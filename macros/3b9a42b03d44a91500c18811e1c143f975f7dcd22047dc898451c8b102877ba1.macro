Attribute VB_Name = "DBConnect"
Sub SharePointAppend(control As IRibbonControl)

On Error GoTo SafeExit

    Dim TimeStart As Double
    Dim TimeRun As String

    If Left(ThisWorkbook.Sheets("Summary").Cells(1, 15), 5) = "Admin" Then 'only allow save feature for admin workbook

        Worksheets("Summary").Activate

        If MsgBox("Upload Data For Report", vbOKCancel, "Report Data") = vbOK Then
            
            TimeStart = Timer
            Application.StatusBar = "Updating Report Data..."
            
            AccessExportFields
            AccessUpdate
                        
            TimeRun = Format((Timer - TimeStart) / 86400, "hh:mm:ss")
            MsgBox ("Data Appended Successfully" & vbCrLf & "Time Taken " & TimeRun), , "Performance"
            Application.StatusBar = False
        
        End If
    Else
        MsgBox ("Adminstration Function Only")
    End If


SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub

Sub AccessExport() 'not working

'Dim acc As New access.Application

On Error GoTo SafeExit

    acc.OpenCurrentDatabase Application.ActiveWorkbook.Path & "\TimeSharePoint.accdb"
    acc.DoCmd.TransferSpreadsheet _
            TransferType:=acImport, _
            SpreadSheetType:=acSpreadsheetTypeExcel12Xml, _
            TableName:="Time_Summary", _
            filename:=Application.ActiveWorkbook.FullName, _
            HasFieldNames:=True, _
            Range:="Summary"
    acc.CloseCurrentDatabase
    acc.Quit
    Set acc = Nothing

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub
Sub AccessUpdate()
On Error GoTo SafeError
      
    'Dim acc As New access.Application
    acc.OpenCurrentDatabase Application.ActiveWorkbook.Path & "\TimeSharePoint.accdb"
    acc.DoCmd.OpenQuery "Time_Summary_SQL_Update", acViewNormal
    acc.DoCmd.OpenQuery "Time_Summary_Local_Delete", acViewNormal
    acc.CloseCurrentDatabase
    acc.Quit
    Set acc = Nothing

SafeExit:
    Exit Sub

SafeError:
    MsgBox "The following error occurred (" & Err.Number & "):" & vbCrLf & Err.Description, , "Database Connection"
    Resume SafeExit

End Sub

Sub AccessDelete(control As IRibbonControl) 'Clear SQL table
On Error GoTo SafeError
      
If MsgBox("Clear Report Data", vbOKCancel, "Report Data") = vbOK Then
      
    Application.StatusBar = "Clearing Report Data..."
    'Dim acc As New access.Application
    acc.OpenCurrentDatabase Application.ActiveWorkbook.Path & "\TimeSharePoint.accdb"
    acc.DoCmd.OpenQuery "Time_Summary_SQL_Delete", acViewNormal
    acc.CloseCurrentDatabase
    acc.Quit
    Set acc = Nothing
    Application.StatusBar = False
    MsgBox ("Data Cleared")
End If


SafeExit:
    Exit Sub

SafeError:
    MsgBox "The following error occurred (" & Err.Number & "):" & vbCrLf & Err.Description, , "Database Connection"
    Resume SafeExit

End Sub

Sub CreateDB()

On Error GoTo SafeExit
    
    Dim GenDB As Object
    Dim FileCheck As String

    Set GenDB = CreateObject("ADOX.Catalog")
    GenDB.Create "Provider=Microsoft.ACE.OLEDB.12.0" & ";Data Source=" & Application.ActiveWorkbook.Path & "\TestDB.accdb"

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub

Sub CreateTable()

On Error GoTo SafeExit

    Dim cn As ADODB.Connection
    Dim SQL As String

    Set cn = New ADODB.Connection
    cn.Open "Provider=Microsoft.ACE.OLEDB.12.0; " & _
"Data Source= " & Application.ActiveWorkbook.Path & "\TestDB.accdb;"

    SQL = "CREATE TABLE Time_Summary_Local (" & _
        "WorkDate date, " & _
        "[External Order] char(20), " & _
        "Workorder char(20), " & _
        "Operation char(10), " & _
        "[Employee ID] char(15), " & _
        "Name char(100), " & _
        "[Emp Type] char(50), " & _
        "Trade char(50), " & _
        "Quantity number, " & _
        "Units char(10), " & _
        "Shift char(20), " & _
        "Supervisor char(50), " & _
        "TimeLoad date, " & _
        "Filename char(255))"

    cn.Execute SQL

    cn.Close
    Set cn = Nothing

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub

Sub AccessDel()

On Error GoTo SafeExit

    Dim cn As ADODB.Connection
    Dim SQL As String

    Set cn = New ADODB.Connection
    cn.Open "Provider=Microsoft.ACE.OLEDB.12.0; " & _
"Data Source= " & Application.ActiveWorkbook.Path & "\TimeSharePoint.accdb;"

    SQL = "DELETE Time_Summary.* FROM Time_Summary;"

    cn.Execute SQL

    cn.Close
    Set cn = Nothing

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub

Sub AccessExportFields()
On Error GoTo SafeError
    Dim cn As ADODB.Connection, rs As ADODB.Recordset, r As Long
    'Dim TimeStart As Double
    'Dim TimeRun As String
            
    'TimeStart = Timer
    'Application.StatusBar = "Connecting to Database..."
    
    'connect to the Access database
    Set cn = New ADODB.Connection
    cn.Open "Provider=Microsoft.ACE.OLEDB.12.0; " & _
    "Data Source= " & Application.ActiveWorkbook.Path & "\TimeSharePoint.accdb;"

    'open a recordset
    Set rs = New ADODB.Recordset
    rs.Open "Time_Summary_Local", cn, adOpenKeyset, adLockOptimistic, adCmdTable

    r = 4
    Do While Len(Range("A" & r).Value) > 0

        With rs
            .AddNew
            .Fields("WorkDate") = Range("A" & r).Value
            .Fields("External Order") = Range("B" & r).Value
            .Fields("Workorder") = Range("C" & r).Value
            .Fields("Operation") = Range("D" & r).Value
            .Fields("Employee ID") = Range("E" & r).Value
            .Fields("Name") = Range("F" & r).Value
            .Fields("Emp Type") = Range("G" & r).Value
            .Fields("Trade") = Range("H" & r).Value
            .Fields("Type") = Range("I" & r).Value
            .Fields("Quantity") = Range("J" & r).Value
            .Fields("Units") = Range("K" & r).Value
            .Fields("Shift") = Range("L" & r).Value
            .Fields("Supervisor") = Range("M" & r).Value
            .Fields("TimeStamp") = Range("N" & r).Value
            .Fields("Filename") = Range("O" & r).Value
            .Update
        End With
        r = r + 1 ' next row

    Loop

    rs.Close
    Set rs = Nothing

    cn.Close
    Set cn = Nothing

    'TimeRun = Format((Timer - TimeStart) / 86400, "hh:mm:ss")
    'Application.StatusBar = "Timesheet Data Sent to Database Successfully" & vbCrLf & "Time Taken " & TimeRun

SafeExit:
    'rs.Close
    'Set rs = Nothing
    'cn.Close
    'Set cn = Nothing
    Exit Sub

SafeError:
    MsgBox "The following error occurred (" & Err.Number & "):" & vbCrLf & Err.Description, , "Database Connection"
    Resume SafeExit
    
End Sub

Public Sub Update()

On Error GoTo SafeExit

    'Creates a new table in Access that is a copy of WISE_IMRQ_Filtered
    DoCmd.TransferDatabase acExport, "Microsoft Access", CurrentDb.name, acTable, "WISE_IMRQ_Filtered", "WISE-IMRQ"

    'Attempt to link new table WISE-IMRQ to SharePoint.
    Dim Site As String
    Dim list As String
    Dim Tbl As String

    list = "{D55414E0-CC11-4782-88EA-0D6EA622BACA}"

    Site = "http://inside/private/tfse/mcl"
    Tbl = "WISE-IMRQ"

    'Relink Sharepoint lists to DB
    DoCmd.TransferSharePointList acLinkSharePointList, Site, list, , Tbl

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub

Sub CreateLinkTable()

On Error GoTo SafeExit

    Dim cn As ADODB.Connection
    Dim SQL As String

    Set cn = New ADODB.Connection
    cn.Open "Provider=Microsoft.ACE.OLEDB.12.0; " & _
"Data Source= " & Application.ActiveWorkbook.Path & "\TestDB.accdb;"

    SQL = "LINK TABLE Time_Summary_Local (" & _
        "WorkDate date, " & _
        "[External Order] char(20), " & _
        "Workorder char(20), " & _
        "Operation char(10), " & _
        "[Employee ID] char(15), " & _
        "Name char(100), " & _
        "[Emp Type] char(50), " & _
        "Trade char(50), " & _
        "Quantity number, " & _
        "Units char(10), " & _
        "Shift char(20), " & _
        "Supervisor char(50), " & _
        "TimeLoad date, " & _
        "Filename char(255))"

    cn.Execute SQL

    cn.Close
    Set cn = Nothing

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub
Sub SQLDelete(control As IRibbonControl) 'active ribbon (Clear PowerBI)
    SQLDeleteRec ("Y")
End Sub

Sub SQLDeleteRec(MsgPrompt As String) 'active ribbon (Clear PowerBI)
On Error GoTo SafeError
    Dim cn As ADODB.Connection
    Dim SQL As String
    Dim sConnString As String
    Dim TimeStart As Double
    Dim TimeRun As String
    Dim Srv, log, Pwd, TblSum, TblSup As String
    Dim RowCount As Integer
    Dim FirstDate, LastDate, Super, FilterDate, FilterSuper, Filter, FilterFile, RunDelete As String

If Application.WorksheetFunction.CountIf(RepBI.Range("H:H"), "Y") = 0 Then
    MsgBox "No Records Selected for Delete" & vbCrLf & "(Enter ""Y"" in ""Delete Flag"" Field)", , "Data Delete"
Else
       
    If MsgPrompt = "Y" Then
        If MsgBox("Delete PowerBI Report Data", vbOKCancel, "Report Data") = vbOK Then RunDelete = "Y"
    Else
        RunDelete = "Y"
    End If
    
    If RunDelete = "Y" Then
        
    Srv = ThisWorkbook.Sheets("Database").Cells(1, 2).Value
    log = ThisWorkbook.Sheets("Database").Cells(2, 2).Value
    Pwd = ThisWorkbook.Sheets("Database").Cells(3, 2).Value
    TblSum = ThisWorkbook.Sheets("Database").Cells(6, 2).Value 'Can only Delete from table not view
    TblSup = ThisWorkbook.Sheets("Database").Cells(7, 2).Value
    SiteID = ThisWorkbook.Sheets("Database").Cells(11, 2).Value
    CatID = ThisWorkbook.Sheets("Database").Cells(12, 2).Value
    Schema = ThisWorkbook.Sheets("Database").Cells(13, 2).Value
    
    TimeStart = Timer
    Application.StatusBar = "Clearing Report Data..."
    
        ' Create the connection string.
        sConnString = "Provider=SQLOLEDB; Data Source=" & Srv & ";" & _
                      "Initial Catalog=" & CatID & ";" & _
                      "User ID=" & log & "; Password=" & Pwd & "; Trusted_Connection=yes" & _
                      "Integrated Security=SSPI;"
    
        Set cn = New ADODB.Connection
        cn.Open sConnString
        
        'If Left(ThisWorkbook.Sheets("Summary").Cells(1, 15), 5) = "Admin" Then
        FilterFile = UniqueFile
            If FilterFile <> "" Then
                SQL = "DELETE from " & Schema & ".[" & TblSum & "] WHERE" & FilterFile & ";"
            Else
                SQL = "DELETE from " & Schema & ".[" & TblSum & "] WHERE Filename='" & "" & "'"
            End If
    '    Else
    '
    '        RowCount = ThisWorkbook.Sheets("Summary").Range("A" & Rows.Count).End(xlUp).row
    '        FilterDate = UniqueDate()
    '        FilterSuper = UniqueSuper()
    '        FilterSite = "(SiteID = " & SiteID & ")"
    '        FilterFile = UniqueFile
    '        Super = ThisWorkbook.Sheets("Summary").Cells(4, 13)
    '
    '        If FilterFile <> "" Then
    '            SQL = "DELETE from dbo.[" & TblSup & "] WHERE" & FilterFile & ";"
    '        Else
    '            SQL = "DELETE from dbo.[" & TblSup & "] WHERE Filename='" & "" & "'"
    '        End If
    '
    '        'SQL = "DELETE FROM dbo.[" & TblSup & "] WHERE" & FilterDate & " and " & FilterSuper & " and " & FilterSite & ";"
    '    End If
        
        cn.Execute SQL
            
        ThisWorkbook.Sheets("ReportData").Visible = True
        ThisWorkbook.Sheets("ReportData").Activate
        
        If ThisWorkbook.Sheets("ReportData").Visible = True Then
            SQLImport ("ImpData")
        End If
        
        cn.Close
        Set cn = Nothing
        
        If MsgPrompt = "Y" Then
            TimeRun = Format((Timer - TimeStart) / 86400, "hh:mm:ss")
            MsgBox ("Done" & vbCrLf & "Time Taken " & TimeRun), , "Performance"
            Application.StatusBar = False
        End If
    End If
End If
SafeExit:

    Exit Sub

SafeError:
    Application.StatusBar = "Sub SQLDelete" & ", " & Err.Number & ", " & Err.Description
    Resume SafeExit

End Sub
Sub SQLExportFields(control As IRibbonControl) 'active ribbon (Upload PowerBI)
On Error GoTo SafeError
    Dim cn As ADODB.Connection
    Dim rs As ADODB.Recordset
    Dim RowCount, RowE, r, d, SiteID, Load, i, j, k, t, u As Integer
    Dim SumData, EmpDay As Variant
    Dim SQList() As String
    Dim SQL, Upl As String
    Dim TimeStart As Double
    Dim TimeRun As String
    Dim Srv, log, Pwd, TblSum, TblSup As String
    Dim Check, TimeFile, TimeSite, TimeUnique As Variant
    
If Application.WorksheetFunction.CountA(ThisWorkbook.Sheets("Summary").Range("A:A")) < 3 Then
    MsgBox "Summary Data Not Extracted", , "Data Upload"
Else
    If MsgBox("Create PowerBI Report Data From Timesheet Summary", vbOKCancel, "Report Data") = vbOK Then
    
        Application.StatusBar = "Checking Database..."
        Check = SQLImport("ChkData")
        TimeStart = Timer
        Load = 0
        j = 1
        
        With Application
            RowE = .IfError(.Match("Upload Data", ThisWorkbook.Sheets("ReportData").Range("H:H"), 0), 2) - 2
        End With
        
        If RowE > 4 Then 'Used to flag timesheets that should be replaced when duplicates detected
            TimeFile = ThisWorkbook.Sheets("ReportData").Range("A5:H" & RowE)
            TimeSite = ThisWorkbook.Sheets("ReportData").Range("G5:H" & RowE)
            TimeUnique = RemoveDuplicate(Check) 'retrieves unique list of filenames for all timesheet entries
                        
            For t = 1 To UBound(TimeFile)
                For u = 1 To UBound(Application.Transpose(TimeUnique))
                        If InStr(1, TimeUnique(u), TimeFile(t, 1)) <> vbNullString Then
                           TimeSite(t, 2) = "Y"
                        Exit For
                        End If
                Next u
            Next
        
            ThisWorkbook.Sheets("ReportData").Range("G5:H" & RowE) = TimeSite
            
        End If
    
        If Left(Check(2, 1), 2) <> "No" Then
        
            For i = 1 To UBound(Check)
                If Check(i, 8) = "Yes" Then
                    Load = Load + 1
                End If
            Next i
            
            If Load > 0 Then
                If MsgBox(Load & " Duplicates Found Please Check." & vbCrLf & "(Ok to Replace Existing Records)", vbOKCancel, "Upload Check") = vbOK Then
                Load = 0
                SQLDeleteRec "N"
                End If
            End If
        End If
        
        If Left(Check(2, 1), 2) = "No" Or Load = 0 Then
        
        Srv = ThisWorkbook.Sheets("Database").Cells(1, 2).Value
        log = ThisWorkbook.Sheets("Database").Cells(2, 2).Value
        Pwd = ThisWorkbook.Sheets("Database").Cells(3, 2).Value
        TblSum = ThisWorkbook.Sheets("Database").Cells(8, 2).Value
        TblSup = ThisWorkbook.Sheets("Database").Cells(9, 2).Value
        SiteID = ThisWorkbook.Sheets("Database").Cells(11, 2).Value
        CatID = ThisWorkbook.Sheets("Database").Cells(12, 2).Value
        Schema = ThisWorkbook.Sheets("Database").Cells(13, 2).Value
    
        Application.StatusBar = "Uploading Report Data..."
            ' Create the connection string.
            sConnString = "Provider=SQLOLEDB; Data Source=" & Srv & ";" & _
                          "Initial Catalog=" & CatID & ";" & _
                          "User ID=" & log & "; Password=" & Pwd & "; Trusted_Connection=yes" & _
                          "Integrated Security=SSPI;"
        
            Set cn = New ADODB.Connection
            cn.Open sConnString
            
            RowCount = ThisWorkbook.Sheets("Summary").Range("A" & Rows.Count).End(xlUp).Row
            SumData = ThisWorkbook.Sheets("Summary").Range("A4:W" & RowCount)
            EmpDay = UniqueEmpDay
            'SiteID = 1
                  
            ReDim SQList(1 To UBound(SumData))
            
            If RowCount > 3 Then
            For r = 1 To UBound(SumData, 1) 'Bulk upload of summary data from array into SQL
                
                Upl = "Y"
                If IsEmpty(EmpDay) = False Then
                    For d = 1 To UBound(EmpDay, 1) 'check unique emp day
                        If EmpDay(d, 1) = SumData(r, 21) Then Upl = "N"
                    Next d
                End If
                
                If Upl = "Y" Then
                    If Left(ThisWorkbook.Sheets("Summary").Cells(1, 15), 5) = "Admin" Then
                        SQList(r) = "INSERT into " & Schema & ".[" & TblSum & "] " & _
                        "(WorkDate, ExtOrder, IntOrder, IntOper, EmpID, Name, EmpType, Trade, Type, Quantity, Units, Shift, Supervisor, TimeStamp, Filename, SiteID, TSID, Finalised, CustSign, CompSign, RoleID, EmpDateID, ProjectID, Org) " & _
                        "values ('" & Format(SumData(r, 1), "mm/dd/yyyy") & "', '" & SumData(r, 2) & "', '" & SumData(r, 3) & "', '" & SumData(r, 4) & "', '" & _
                        SumData(r, 5) & "', '" & Replace(SumData(r, 6), "'", "''") & "', '" & SumData(r, 7) & "', '" & SumData(r, 8) & "', '" & SumData(r, 9) & "', '" & SumData(r, 10) & "', '" & _
                        SumData(r, 11) & "', '" & SumData(r, 12) & "', '" & Replace(SumData(r, 13), "'", "''") & "', '" & Format(SumData(r, 14), "mm/dd/yyyy") & "', '" & SumData(r, 15) & "', '" & _
                        SiteID & "', '" & SumData(r, 16) & "', '" & SumData(r, 17) & "', '" & SumData(r, 18) & "', '" & SumData(r, 19) & "', '" & SumData(r, 22) & "', '" & SumData(r, 21) & "', '" & SumData(r, 20) & "', '" & SumData(r, 23) & "')"
                    Else
                        SQList(r) = "INSERT into " & Schema & ".[" & TblSum & "] " & _
                        "(WorkDate, ExtOrder, IntOrder, IntOper, EmpID, Name, EmpType, Trade, Type, Quantity, Units, Shift, Supervisor, TimeStamp, Filename, SiteID, TSID, Finalised, CustSign, CompSign, RoleID, EmpDateID, ProjectID, Org) " & _
                        "values ('" & Format(SumData(r, 1), "mm/dd/yyyy") & "', '" & SumData(r, 2) & "', '" & SumData(r, 3) & "', '" & SumData(r, 4) & "', '" & _
                        SumData(r, 5) & "', '" & Replace(SumData(r, 6), "'", "''") & "', '" & SumData(r, 7) & "', '" & SumData(r, 8) & "', '" & SumData(r, 9) & "', '" & SumData(r, 10) & "', '" & _
                        SumData(r, 11) & "', '" & SumData(r, 12) & "', '" & Replace(SumData(r, 13), "'", "''") & "', '" & Format(SumData(r, 14), "mm/dd/yyyy") & "', '" & SumData(r, 15) & "', '" & _
                        SiteID & "', '" & SumData(r, 16) & "', '" & SumData(r, 17) & "', '" & SumData(r, 18) & "', '" & SumData(r, 19) & "', '" & SumData(r, 22) & "', '" & SumData(r, 21) & "', '" & SumData(r, 20) & "', '" & SumData(r, 23) & "')"
                    End If
                End If
            
            Next r
                SQL = Join(SQList, vbNewLine)
                cn.Execute SQL
                
                ThisWorkbook.Sheets("ReportData").Visible = True
                ThisWorkbook.Sheets("ReportData").Activate
            
                If ThisWorkbook.Sheets("ReportData").Visible = True Then
                    SQLImport ("ImpData")
                End If
            End If
        '        With rs
        '            .AddNew
        '            .Fields("WorkDate") = Format(SumData(r, 1), "yyyy-mm-dd") 'Format(Range("A" & r).Value, "yyyy-mm-dd")
        '            .Fields("ExtOrder") = SumData(r, 2) 'Range("B" & r).Value
        '            .Fields("IntOrder") = SumData(r, 3) 'Range("C" & r).Value
        '            .Fields("IntOper") = SumData(r, 4) 'Range("D" & r).Value
        '            .Fields("EmpID") = SumData(r, 5) 'Range("E" & r).Value
        '            .Fields("Name") = SumData(r, 6) 'Range("F" & r).Value
        '            .Fields("EmpType") = SumData(r, 7) 'Range("G" & r).Value
        '            .Fields("Trade") = SumData(r, 8) 'Range("H" & r).Value
        '            .Fields("Type") = SumData(r, 9) 'Range("I" & r).Value
        '            .Fields("Quantity") = SumData(r, 10) 'Range("J" & r).Value
        '            .Fields("Units") = SumData(r, 11) 'Range("K" & r).Value
        '            .Fields("Shift") = SumData(r, 12) 'Range("L" & r).Value
        '            .Fields("Supervisor") = SumData(r, 13) 'Range("M" & r).Value
        '            .Fields("TimeStamp") = SumData(r, 14) 'Range("N" & r).Value
        '            .Fields("Filename") = SumData(r, 15) 'Range("O" & r).Value
        '            .Update
        '        End With
        
        '    Next r
        
        '    rs.Close
        '    Set rs = Nothing
        
            cn.Close
            Set cn = Nothing
        
            TimeRun = Format((Timer - TimeStart) / 86400, "hh:mm:ss")
            MsgBox ("Timesheet Data Processed" & vbCrLf & "Time Taken " & TimeRun)
            'Application.StatusBar = False
        
        End If
    End If
End If

Application.StatusBar = False

Exit Sub

SafeError:
    Application.StatusBar = "Sub SQLExportFields Failed - Check Login Details are Correct for SQL SiteID " & SiteID
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    On Error GoTo 0
    
End Sub
Function RemoveDuplicate(MyArray As Variant) As Variant
    Dim i As Long
    Dim arrColl As New Collection
    Dim arrDummy() As Variant
    Dim arrDummy1() As Variant
    Dim item As Variant
    ReDim arrDummy1(LBound(MyArray) To UBound(MyArray))

    For i = LBound(MyArray) To UBound(MyArray) 'convert to string
        arrDummy1(i) = CStr(MyArray(i, 1))
    Next i
    On Error Resume Next
    For Each item In arrDummy1
       arrColl.Add item, item
    Next item
    Err.Clear
    ReDim arrDummy(LBound(MyArray) To arrColl.Count + LBound(MyArray) - 1)
    i = LBound(MyArray)
    For Each item In arrColl
       arrDummy(i) = item
       i = i + 1
    Next item
    RemoveDuplicate = arrDummy
End Function

Sub SQLImportData(control As IRibbonControl) 'active ribbon (Import Data Summary)
   
On Error GoTo SafeExit
      
    ThisWorkbook.Sheets("ReportData").Visible = True
    ThisWorkbook.Sheets("ReportData").Activate
    
    If ThisWorkbook.Sheets("ReportData").Visible = True Then
        SQLImport ("ImpData")
    End If
    
Exit Sub
    
SafeExit:
        Application.StatusBar = "Sub SQLImportData" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub
Function SQLImport(DI As String) As Variant
On Error GoTo SafeError
    Dim cn As ADODB.Connection
    Dim rs, rsa As ADODB.Recordset
    Dim Srv, log, Pwd, TblSum, TblSup As String
    Dim SQL, SQLA, DateRange As String
    Dim RowCount, DataStart, DataEnd, Chk, RowE As Integer
    Dim DS, DF As String
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    Srv = ThisWorkbook.Sheets("Database").Cells(1, 2).Value
    log = ThisWorkbook.Sheets("Database").Cells(2, 2).Value
    Pwd = ThisWorkbook.Sheets("Database").Cells(3, 2).Value
    TblSum = ThisWorkbook.Sheets("Database").Cells(8, 2).Value
    TblSup = ThisWorkbook.Sheets("Database").Cells(9, 2).Value
    RowCount = ThisWorkbook.Sheets("ReportData").Range("A" & Rows.Count).End(xlUp).Row
    CatID = ThisWorkbook.Sheets("Database").Cells(12, 2).Value
    Schema = ThisWorkbook.Sheets("Database").Cells(13, 2).Value
    
    'If RowCount > 4 Then ThisWorkbook.Sheets("ReportData").Range("A5:G" & RowCount).Clear
    ThisWorkbook.Sheets("ReportData").UsedRange.Clear
   
    sConnString = "Provider=SQLOLEDB; Data Source=" & Srv & ";" & _
                  "Initial Catalog=" & CatID & ";" & _
                  "User ID=" & log & "; Password=" & Pwd & "; Trusted_Connection=yes" & _
                  "Integrated Security=SSPI;"

    Set cn = New ADODB.Connection
    Set rs = New ADODB.Recordset
    Set rsa = New ADODB.Recordset
    
    DS = "1900-01-01"
    DF = "2100-12-31"
    
    If Application.WorksheetFunction.Min(ThisWorkbook.Sheets("Summary").Range("A:A")) <> 0 Then
        DS = Format(Application.WorksheetFunction.Min(ThisWorkbook.Sheets("Summary").Range("A:A")), "yyyy-mm-dd")
        DF = Format(Application.WorksheetFunction.Max(ThisWorkbook.Sheets("Summary").Range("A:A")), "yyyy-mm-dd")
    End If
    
    DateRange = "AND (WorkDate BETWEEN CONVERT(DATE, '" & DS & "', 23) AND CONVERT(DATE, '" & DF & "', 23))"
    
    cn.Open sConnString
    
    ' Timesheet Summary
    If Left(ThisWorkbook.Sheets("Summary").Cells(1, 15), 5) = "Admin" Then
          SQL = "SELECT Filename, Convert(varchar, Min(WorkDate), 103) as DateStart, Convert(varchar, Max(WorkDate), 103) as DateFinish, Supervisor, count(distinct EmpID) as Employees, SUM(Quantity) AS Qty, SiteDesc " & _
                "FROM " & Schema & ".[" & TblSum & "] INNER JOIN " & Schema & ".[Details-Site] ON " & Schema & ".[" & TblSum & "].SiteID = " & Schema & ".[Details-Site].SiteID " & _
                "WHERE Units = 'Hours' " & DateRange & _
                "GROUP BY Filename, Supervisor, SiteDesc;"
    Else
          SQL = "SELECT Filename, Convert(varchar, Min(WorkDate), 103) as DateStart, Convert(varchar, Max(WorkDate), 103) as DateFinish, Supervisor, count(distinct EmpID) as Employees, SUM(Quantity) AS Qty, SiteDesc " & _
                "FROM " & Schema & ".[" & TblSum & "] INNER JOIN " & Schema & ".[Details-Site] ON " & Schema & ".[" & TblSum & "].SiteID = " & Schema & ".[Details-Site].SiteID " & _
                "WHERE Units = 'Hours' " & DateRange & _
                "GROUP BY Filename, Supervisor, SiteDesc;"
    End If
    
    ' Total Employee Hours By Day
    If Left(ThisWorkbook.Sheets("Summary").Cells(1, 15), 5) = "Admin" Then
          SQLA = "SELECT STRING_AGG(Filename,', ') AS Filenames, convert(varchar, WorkDate, 103), EmpId, Name, Trade, SUM(Quantity) AS Qty, iif(SUM(Quantity)>14,'Check Hours',null) as Chk FROM " & _
                 "(SELECT Filename, WorkDate, EmpId, Name, Trade, SUM(Quantity) as Quantity, Units " & _
                 "FROM " & Schema & ".[" & TblSum & "] GROUP BY EmpId, Name, Trade, WorkDate, Filename, Units) Data " & _
                 "WHERE Units ='Hours' " & DateRange & _
                 "GROUP BY EmpId, Name, Trade, WorkDate"
    Else
          SQLA = "SELECT STRING_AGG(Filename,', ') AS Filenames, convert(varchar, WorkDate, 103), EmpId, Name, Trade, SUM(Quantity) AS Qty, iif(SUM(Quantity)>14,'Check Hours',null) as Chk FROM " & _
                 "(SELECT Filename, WorkDate, EmpId, Name, Trade, SUM(Quantity) as Quantity, Units " & _
                 "FROM " & Schema & ".[" & TblSum & "] GROUP BY EmpId, Name, Trade, WorkDate, Filename, Units) Data " & _
                 "WHERE Units ='Hours' " & DateRange & _
                 "GROUP BY EmpId, Name, Trade, WorkDate"
    End If
    
    Set rs = cn.Execute(SQL)
    
    If Not rs.EOF Then
        ThisWorkbook.Sheets("ReportData").Cells(1, 1).Value = "Power BI - Current Data Report Summary"
        ThisWorkbook.Sheets("ReportData").Cells(2, 1).Value = "Downloaded: " & Format(Now(), "dd/mm/yyyy HH:MM")
        ThisWorkbook.Sheets("ReportData").Cells(4, 1).Value = "Filename"
        ThisWorkbook.Sheets("ReportData").Cells(4, 2).Value = "Date Start"
        ThisWorkbook.Sheets("ReportData").Cells(4, 3) = "Date Finish"
        ThisWorkbook.Sheets("ReportData").Cells(4, 4) = "Supervisor"
        ThisWorkbook.Sheets("ReportData").Cells(4, 5) = "Employee Num"
        ThisWorkbook.Sheets("ReportData").Cells(4, 6) = "Employee Hrs"
        ThisWorkbook.Sheets("ReportData").Cells(4, 7) = "Site ID"
        ThisWorkbook.Sheets("ReportData").Cells(4, 8) = "Delete Flag (Y)"
        ThisWorkbook.Sheets("ReportData").Range("A5").CopyFromRecordset rs
        rs.Close
        FormatCol ("A4:H4")
        ThisWorkbook.Sheets("ReportData").Range("A1").Font.Bold = True
    End If
    
    
    Set rsa = cn.Execute(SQLA)
    
    RowCount = ThisWorkbook.Sheets("ReportData").Range("A" & Rows.Count).End(xlUp).Row + 2
    DataStart = RowCount + 1
    
    If Not rsa.EOF Then
        ThisWorkbook.Sheets("ReportData").Cells(RowCount, 1).Value = "Filenames"
        ThisWorkbook.Sheets("ReportData").Cells(RowCount, 2).Value = "Work Date"
        ThisWorkbook.Sheets("ReportData").Cells(RowCount, 3) = "Employee ID"
        ThisWorkbook.Sheets("ReportData").Cells(RowCount, 4) = "Employee Name"
        ThisWorkbook.Sheets("ReportData").Cells(RowCount, 5) = "Trade"
        ThisWorkbook.Sheets("ReportData").Cells(RowCount, 6) = "Employee Hrs"
        ThisWorkbook.Sheets("ReportData").Cells(RowCount, 7) = "Comment"
        ThisWorkbook.Sheets("ReportData").Cells(RowCount, 8) = "Upload Data"
        ThisWorkbook.Sheets("ReportData").Range("A" & RowCount + 1).CopyFromRecordset rsa
        rsa.Close
        FormatCol ("A" & RowCount & ":H" & RowCount)
        DataEnd = ThisWorkbook.Sheets("ReportData").Range("A" & Rows.Count).End(xlUp).Row
        
        With ThisWorkbook.Sheets("ReportData").Range("H" & DataStart & ":H" & DataEnd) 'checker for previously uploaded employees
            .Formula = "=IF(IFERROR(MATCH(RC[-5]&""-""&TEXT(RC[-6],""dd/mm/yyyy""),Summary!C[13],0),"""")<>"""",""Yes"","""")"
            .Value = .Value
        End With
    Else
        ThisWorkbook.Sheets("ReportData").Cells(1, 1).Value = "Power BI - Current Data Report Summary"
        ThisWorkbook.Sheets("ReportData").Cells(2, 1).Value = "No Records Available: " & Format(Now(), "dd/mm/yyyy HH:MM")
        ThisWorkbook.Sheets("ReportData").Range("A1").Font.Bold = True
        'MsgBox "No Records Available."
    End If
    
    If DI = "ChkData" Then
        If Not IsError(Application.Match("Upload Data", ThisWorkbook.Sheets("ReportData").Range("H:H"), 0)) Then
            RowE = Application.Match("Upload Data", ThisWorkbook.Sheets("ReportData").Range("H:H"), 0) + 1
            With ThisWorkbook.Sheets("ReportData")
                SQLImport = .Range(.Cells(RowE, 1), .Cells(DataEnd, 8))
            End With
        Else
            With ThisWorkbook.Sheets("ReportData")
                SQLImport = .Range("A1:B2")
            End With
        End If
    End If
      
SafeExit:
     
    If CBool(cn.State And adStateOpen) Then cn.Close
    Set cn = Nothing
    Set rs = Nothing
    Set rsa = Nothing
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Exit Function

SafeError:
    ThisWorkbook.Sheets("ReportData").Cells(1, 1).Value = "Power BI - Current Data Report Summary"
    ThisWorkbook.Sheets("ReportData").Cells(2, 1).Value = "No Server Connection Available: " & Format(Now(), "dd/mm/yyyy HH:MM")
    ThisWorkbook.Sheets("ReportData").Range("A1").Font.Bold = True
    Application.StatusBar = "Sub SQLImport" & ", " & Err.Number & ", " & Err.Description
    Resume SafeExit
End Function
Sub ClearBI()

ThisWorkbook.Sheets("ReportData").UsedRange.Clear
ThisWorkbook.Sheets("ReportData").Cells(1, 1).Value = "Power BI - Current Data Report Summary"
ThisWorkbook.Sheets("ReportData").Cells(2, 1).Value = "Records Cleared: " & Format(Now(), "dd/mm/yyyy HH:MM")
ThisWorkbook.Sheets("ReportData").Range("A1").Font.Bold = True

End Sub

Sub ConnectSqlServer()

On Error GoTo SafeExit

    Dim conn As ADODB.Connection
    Dim rs As ADODB.Recordset
    Dim sConnString As String
 
    ' Create the connection string.
    sConnString = "Provider=SQLOLEDB; Data Source=23.101.237.237,80;" & _
                  "Initial Catalog=Timesheet;" & _
                  "User ID=coe_user; Password=Tunnel###123; Trusted_Connection=yes" & _
                  "Integrated Security=SSPI;"

    
    ' Create the Connection and Recordset objects.
    Set conn = New ADODB.Connection
    Set rs = New ADODB.Recordset
    
    ' Open the connection and execute.
    conn.Open sConnString
    Set rs = conn.Execute("SELECT * from dbo.[TS-ESSO-Data-Summary]")
    
    ' Check we have data.
    If Not rs.EOF Then
        ' Transfer result.
        Sheets("Summary").Range("A1").CopyFromRecordset rs
    ' Close the recordset
        rs.Close
    Else
        MsgBox "Error: No records returned.", vbCritical
    End If

    ' Clean up
    If CBool(conn.State And adStateOpen) Then conn.Close
    Set conn = Nothing
    Set rs = Nothing
  
SafeExit:
        Application.StatusBar = "Sub ConnectSQLServer" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0
  
End Sub
Function UniqueDate() As String

On Error GoTo SafeExit

Dim Tmp As String
Dim Arr() As String
Dim RowCount As Integer
Dim DataDate As Variant

RowCount = ThisWorkbook.Sheets("Summary").Range("A" & Rows.Count).End(xlUp).Row
DataDate = ThisWorkbook.Sheets("Summary").Range("A4:A" & RowCount)

    For i = 1 To UBound(DataDate, 1)
      If (DataDate(i, 1) <> "") And (InStr(Tmp, Format(DataDate(i, 1), "yyyy.mm.dd")) = 0) Then
        Tmp = Tmp & "WorkDate = CONVERT (date,'" & Format(DataDate(i, 1), "yyyy.mm.dd") & "',102) or "
      End If
    Next i

If Len(Tmp) > 0 Then Tmp = "(" & Left(Tmp, Len(Tmp) - 4) & ")"
UniqueDate = Tmp

Exit Function

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Function

Function UniqueSuper() As String

On Error GoTo SafeExit

Dim Tmp As String
Dim Arr() As String
Dim RowCount As Integer
Dim DataSuper As Variant

RowCount = ThisWorkbook.Sheets("Summary").Range("A" & Rows.Count).End(xlUp).Row
DataSuper = ThisWorkbook.Sheets("Summary").Range("M4:M" & RowCount)

    For i = 1 To UBound(DataSuper, 1)
      If (DataSuper(i, 1) <> "") And (InStr(Tmp, Replace(DataSuper(i, 1), "'", "''")) = 0) Then
        Tmp = Tmp & "Supervisor = '" & Replace(DataSuper(i, 1), "'", "''") & "' or "
      End If
    Next i

If Len(Tmp) > 0 Then Tmp = "(" & Left(Tmp, Len(Tmp) - 4) & ")"
UniqueSuper = Tmp

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Function
Function UniqueFile() As String

On Error GoTo SafeExit

Dim Tmp As String
Dim Arr() As String
Dim RowCount As Integer
Dim DataFile As Variant

If Not IsError(Application.Match("Upload Data", ThisWorkbook.Sheets("ReportData").Range("H:H"), 0)) Then
    RowCount = Application.Match("Upload Data", ThisWorkbook.Sheets("ReportData").Range("H:H"), 0) - 2
Else
    RowCount = 5
End If

'RowCount = ThisWorkbook.Sheets("ReportData").Range("A" & Rows.Count).End(xlUp).Row
DataFile = ThisWorkbook.Sheets("ReportData").Range("A5:H" & RowCount)

    For i = 1 To UBound(DataFile, 1)
      If (DataFile(i, 8) = "Y") Or (DataFile(i, 8) = "y") Then
        Tmp = Tmp & "Filename = '" & Trim(DataFile(i, 1)) & "' or "
      End If
    Next i

If Len(Tmp) > 0 Then Tmp = "(" & Left(Tmp, Len(Tmp) - 4) & ")"
UniqueFile = Tmp

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Function
Function UniqueEmpDay() As Variant

On Error GoTo SafeExit

Dim Tmp As String
Dim Arr() As Variant
Dim RowCount, x As Integer
Dim DataFile As Variant

RowCount = ThisWorkbook.Sheets("ReportData").Range("A" & Rows.Count).End(xlUp).Row
DataFile = ThisWorkbook.Sheets("ReportData").Range("A5:H" & RowCount)

x = 0
ReDim Arr(2, x)

    For i = 1 To UBound(DataFile, 1)
      
      If (DataFile(i, 8) = "N") Then
        Arr(0, x) = DataFile(i, 3) & "-" & DataFile(i, 2)
        Arr(1, x) = DataFile(i, 3)
        Arr(2, x) = DataFile(i, 2)
      
      x = x + 1
      ReDim Preserve Arr(2, x)
      End If
  
    Next i

    If x = 0 Then
        UniqueEmpDay = Empty
    Else
        UniqueEmpDay = Application.WorksheetFunction.Transpose(Arr)
    End If

Exit Function

SafeExit:
        On Error GoTo 0

End Function
Sub TextHide8()

Dim RowCount, ColCount As Integer
Dim Prod_End, Emp_End As Integer
Dim sh As Object
Dim NameSh As Variant
Dim i, s As Integer

ReDim NameSh(0)
s = 0
  For Each sh In ActiveWindow.SelectedSheets
    NameSh(s) = sh.name
    s = s + 1
    ReDim Preserve NameSh(s)
  Next sh
ReDim Preserve NameSh(s - 1)

For s = 0 To s - 1
If NameSh(s) = "TimeTemplate" Or NameSh(s) = "Mon" Or _
    NameSh(s) = "Tue" Or NameSh(s) = "Wed" Or _
    NameSh(s) = "Thu" Or NameSh(s) = "Fri" Or _
    NameSh(s) = "Sat" Or NameSh(s) = "Sun" Then
    
    ThisWorkbook.Sheets(NameSh(s)).Select

    RowCount = ActiveSheet.UsedRange.Rows.Count
    ColCount = ActiveSheet.UsedRange.Columns.Count
    
    Prod_End = Application.WorksheetFunction.Match("Allowances", ActiveSheet.Range("A:A"), 0) - 1
    Emp_End = Application.WorksheetFunction.Match("EmpEnd", ActiveSheet.Range("1:1"), 0) - 1
    
    SignUnprotect
    
    For i = 11 To Prod_End
        If Left(ActiveSheet.Cells(i, 1), 1) = "8" Then
            ActiveSheet.Range(Cells(i, 1), Cells(i, 8)).Font.Color = RGB(255, 255, 204)
            With ActiveSheet.Range(Cells(i, 1), Cells(i, 8)).Interior
                .Pattern = xlGray50
                .PatternThemeColor = xlThemeColorDark1
                .Color = 13434879
                .TintAndShade = 0
                .PatternTintAndShade = -0.499984740745262
            End With
            For j = 9 To Emp_End
                If ActiveSheet.Cells(i, j) <> vbNullString Then
                    
                    With ActiveSheet.Cells(i, j).Font
                        .Color = RGB(255, 255, 204)
                        .Size = 1
                    End With
                    
                    With ActiveSheet.Cells(i, j).Interior
                        .Pattern = xlGray50
                        .PatternThemeColor = xlThemeColorDark1
                        .Color = 13434879
                        .TintAndShade = 0
                        .PatternTintAndShade = -0.499984740745262
                    End With
                
                End If
            Next j
        End If
    Next
    
    ActiveSheet.Cells(9, 4) = "(6 Series Orders Only)"
    
    If ActiveSheet.Cells(7, 1) = "Timesheet Approved" Then
        SignLock
    Else
        SignProtect
    End If

End If
Next s

ThisWorkbook.Sheets(NameSh).Select

End Sub
Sub TextHide6()

Dim RowCount, ColCount As Integer
Dim Prod_End, Emp_End As Integer
Dim sh As Object
Dim NameSh As Variant
Dim i, s As Integer

ReDim NameSh(0)
s = 0
  For Each sh In ActiveWindow.SelectedSheets
    NameSh(s) = sh.name
    s = s + 1
    ReDim Preserve NameSh(s)
  Next sh
ReDim Preserve NameSh(s - 1)

For s = 0 To s - 1
If NameSh(s) = "TimeTemplate" Or NameSh(s) = "Mon" Or _
    NameSh(s) = "Tue" Or NameSh(s) = "Wed" Or _
    NameSh(s) = "Thu" Or NameSh(s) = "Fri" Or _
    NameSh(s) = "Sat" Or NameSh(s) = "Sun" Then
    
    ThisWorkbook.Sheets(NameSh(s)).Select

    RowCount = ActiveSheet.UsedRange.Rows.Count
    ColCount = ActiveSheet.UsedRange.Columns.Count
    
    Prod_End = Application.WorksheetFunction.Match("Allowances", ActiveSheet.Range("A:A"), 0) - 1
    Emp_End = Application.WorksheetFunction.Match("EmpEnd", ActiveSheet.Range("1:1"), 0) - 1
    
    SignUnprotect
    
    For i = 11 To Prod_End
    
        If Left(ActiveSheet.Cells(i, 1), 1) = "6" Or (Left(ActiveSheet.Cells(i, 1), 1) = "8" And ListCheck(ActiveSheet.Cells(i, 3)) = vbNullString) Then
            ActiveSheet.Range(Cells(i, 1), Cells(i, 8)).Font.Color = RGB(255, 255, 204)
            With ActiveSheet.Range(Cells(i, 1), Cells(i, 8)).Interior
                .Pattern = xlGray50
                .PatternThemeColor = xlThemeColorDark1
                .Color = 13434879
                .TintAndShade = 0
                .PatternTintAndShade = -0.499984740745262
            End With
            For j = 9 To Emp_End
                If ActiveSheet.Cells(i, j) <> vbNullString Then
                    
                    With ActiveSheet.Cells(i, j).Font
                        .Color = RGB(255, 255, 204)
                        .Size = 1
                    End With
                    
                    With ActiveSheet.Cells(i, j).Interior
                        .Pattern = xlGray50
                        .PatternThemeColor = xlThemeColorDark1
                        .Color = 13434879
                        .TintAndShade = 0
                        .PatternTintAndShade = -0.499984740745262
                    End With
                
                End If
            Next j
        End If
    Next
    
    ActiveSheet.Cells(9, 4) = "(8 Series CVI Orders Only)"
    
    If ActiveSheet.Cells(7, 1) = "Timesheet Approved" Then
        SignLock
    Else
        SignProtect
    End If

End If
Next s

ThisWorkbook.Sheets(NameSh).Select

End Sub
Sub TextUnHide()

Dim RowCount, ColCount As Integer
Dim Prod_End, Emp_End As Integer
Dim sh As Object
Dim NameSh As Variant
Dim i, s As Integer

ReDim NameSh(0)
s = 0
  For Each sh In ActiveWindow.SelectedSheets
    NameSh(s) = sh.name
    s = s + 1
    ReDim Preserve NameSh(s)
  Next sh
ReDim Preserve NameSh(s - 1)

For s = 0 To s - 1
If NameSh(s) = "TimeTemplate" Or NameSh(s) = "Mon" Or _
    NameSh(s) = "Tue" Or NameSh(s) = "Wed" Or _
    NameSh(s) = "Thu" Or NameSh(s) = "Fri" Or _
    NameSh(s) = "Sat" Or NameSh(s) = "Sun" Then
    
    ThisWorkbook.Sheets(NameSh(s)).Select
    
    RowCount = ActiveSheet.UsedRange.Rows.Count
    ColCount = ActiveSheet.UsedRange.Columns.Count
    
    Prod_End = Application.WorksheetFunction.Match("Allowances", ActiveSheet.Range("A:A"), 0) - 1
    Emp_End = Application.WorksheetFunction.Match("EmpEnd", ActiveSheet.Range("1:1"), 0) - 1
    
    SignUnprotect
    
    For i = 11 To Prod_End
        If Left(ActiveSheet.Cells(i, 1), 1) = "8" Or Left(ActiveSheet.Cells(i, 1), 1) = "6" Then
            ActiveSheet.Range(Cells(i, 1), Cells(i, 8)).Font.Color = 0
            ActiveSheet.Range(Cells(i, 1), Cells(i, 8)).Interior.Pattern = xlSolid
            For j = 9 To Emp_End
                If ActiveSheet.Cells(i, j) <> vbNullString Then
                    With ActiveSheet.Cells(i, j).Font
                        .Color = 0
                        .Size = 9
                    End With
                    ActiveSheet.Cells(i, j).Interior.Pattern = xlSolid
                End If
            Next j
        End If
    Next
    
    ActiveSheet.Cells(9, 4) = vbNullString
    
    If ActiveSheet.Cells(7, 1) = "Timesheet Approved" Then
        SignLock
    Else
        SignProtect
    End If
    
End If
Next s

ThisWorkbook.Sheets(NameSh).Select

End Sub

Sub PDFActiveSheet(control As IRibbonControl)

UserForm7.Show

End Sub

Sub PDFActSheet()
'www.contextures.com
'for Excel 2010 and later
Dim wsA As Worksheet
Dim wbA As Workbook
Dim strTime As String
Dim strName As String
Dim strPath As String
Dim strFile As String
Dim strPathFile As String
Dim MyFile As Variant
Dim TimeID As String

On Error GoTo errHandler

Select Case ActiveSheet.name

    Case "TimeTemplate", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"

    'SignUnprotect
    'Signature

End Select

Set wbA = ActiveWorkbook
Set wsA = ActiveSheet
strTime = Format(Now(), "yyyymmdd\_hhmm")

'get active workbook folder, if saved
strPath = wbA.Path
If strPath = "" Then
  strPath = Application.DefaultFilePath
End If
strPath = strPath & "\"

'replace spaces and periods in sheet name
strName = Replace(wsA.name, " ", "")
strName = Replace(strName, ".", "_")

'create default name for savng file
strFile = strName & "_" & strTime & ".pdf"
strPathFile = strPath & strFile

'use can enter name and
'select folder for file
MyFile = Application.GetSaveAsFilename _
    (InitialFileName:=strPathFile, _
        FileFilter:="PDF Files (*.pdf), *.pdf", _
        Title:="Select Folder and FileName to save")

'export to PDF if a folder was selected
If MyFile <> "False" Then
    wsA.ExportAsFixedFormat _
        Type:=xlTypePDF, _
        filename:=MyFile, _
        Quality:=xlQualityHigh, _
        IncludeDocProperties:=True, _
        IgnorePrintAreas:=False, _
        OpenAfterPublish:=False
    'confirmation message with file info
    MsgBox "PDF file has been created: " _
      & vbCrLf _
      & MyFile

End If

strPathFile = MyFile
TimeID = CreateDate

'save to PDF to SQL database
bin "put", strPathFile, TimeID

exitHandler:

    Select Case ActiveSheet.name
        Case "TimeTemplate", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"
        'SignProtect
        End Select
    Exit Sub

errHandler:
    MsgBox "Could not create PDF file"
    Resume exitHandler
End Sub

Sub Quicksort(vArray As Variant, arrLbound As Long, arrUbound As Long)

On Error GoTo SafeExit

'https://wellsr.com/vba/2018/excel/vba-quicksort-macro-to-sort-arrays-fast/
'Sorts a one-dimensional VBA array from smallest to largest
'using a very fast quicksort algorithm variant.
Dim pivotVal As Variant
Dim vSwap    As Variant
Dim tmpLow   As Long
Dim tmpHi    As Long
 
tmpLow = arrLbound
tmpHi = arrUbound
pivotVal = vArray((arrLbound + arrUbound) \ 2)
 
While (tmpLow <= tmpHi) 'divide
   While (vArray(tmpLow) < pivotVal And tmpLow < arrUbound)
      tmpLow = tmpLow + 1
   Wend
  
   While (pivotVal < vArray(tmpHi) And tmpHi > arrLbound)
      tmpHi = tmpHi - 1
   Wend
 
   If (tmpLow <= tmpHi) Then
      vSwap = vArray(tmpLow)
      vArray(tmpLow) = vArray(tmpHi)
      vArray(tmpHi) = vSwap
      tmpLow = tmpLow + 1
      tmpHi = tmpHi - 1
   End If
Wend

  If (arrLbound < tmpHi) Then Quicksort vArray, arrLbound, tmpHi 'conquer
  If (tmpLow < arrUbound) Then Quicksort vArray, tmpLow, arrUbound 'conquer

Exit Sub

SafeExit:
    On Error GoTo 0

End Sub

Sub ProcessData_Quicksort()

On Error GoTo SafeExit

'Example macro to show you how to add a column of data to an array
'and sort the data from smallest to largest using VBA Quicksort.
Dim ArrData() As Variant
Dim i As Long, LastRow As Long

'Store column of data into array
LastRow = ThisWorkbook.Sheets("DataInternalOrder").Range("C" & Rows.Count).End(xlUp).Row
ReDim ArrData(1 To LastRow)
For i = 1 To LastRow
    ArrData(i) = ThisWorkbook.Sheets("DataInternalOrder").Range("C" & i)
Next i

'Now sort your array using the VBA Quicksort macro
Call Quicksort(ArrData(), LBound(ArrData), UBound(ArrData))
'
ThisWorkbook.Sheets("lookup").Range("F1:F" & i) = Application.WorksheetFunction.Transpose(ArrData)

'From here on, your "MyData" array is sorted from smallest to largest

Exit Sub

SafeExit:
        On Error GoTo 0

End Sub

Public Sub put_button()
    
On Error GoTo SafeExit
    
    Dim id As String
    id = Format(Now(), "yyyymmdd-hhmmss-") & Format(1000 * Rnd(), "000")
    Debug.Print id
    bin "put", "Sheet1", id

Exit Sub

SafeExit:
        On Error GoTo 0

End Sub

Public Sub get_button()

On Error GoTo SafeExit

    Dim id As String
    id = "TimeTemplate_20190118_1418.pdf"
    Debug.Print id
    bin "get", "Sheet1", id

Exit Sub

SafeExit:
        On Error GoTo 0

End Sub

Public Function bin(operation As String, FileTS As String, id As String)
' operation: "get" to download, "put" to upload
' worksheet: worksheet to get/put

On Error GoTo SafeExit

    Dim Srv As String
    Dim log As String
    Dim Pwd As String

    Dim stream As Object
    Dim cmd As Object
    Dim filepath As String
    Dim conn As Object
    Dim uploadtime As Date
    Dim table As String
    
    Srv = ThisWorkbook.Sheets("Database").Cells(1, 2).Value
    log = ThisWorkbook.Sheets("Database").Cells(2, 2).Value
    Pwd = ThisWorkbook.Sheets("Database").Cells(3, 2).Value
    CatID = ThisWorkbook.Sheets("Database").Cells(12, 2).Value
    Schema = ThisWorkbook.Sheets("Database").Cells(13, 2).Value
    
    ' Set variables
    'filepath = ActiveWorkbook.Path & "\" & id & ".pdf"
    filepath = FileTS
    table = "TS-Data-Files"
    transtime = Now()
    
    ' This is same for put or get
    Set conn = CreateObject("ADODB.Connection")
    Set stream = CreateObject("ADODB.Stream")
    Set cmd = CreateObject("ADODB.Command")
    Set rs = CreateObject("ADODB.Recordset")
    stream.Type = adTypeBinary
    stream.Open
    
    ' Server connection
    conn.CursorLocation = adUseClient
    
    strconn = "Provider=SQLOLEDB; Data Source=" & Srv & ";" & _
                  "Initial Catalog=" & CatID & ";" & _
                  "User ID=" & log & "; Password=" & Pwd & "; Trusted_Connection=yes" & _
                  "Integrated Security=SSPI;"
                  
    conn.Open strconn
    ' should trap an error here if it cant connect

'If (conn.State And adStateOpen) = adStateOpen Then
'    MsgBox conn.State & " Open"
'End If

    ' How to put item in database
    If (operation = "put") Then
        'ActiveWorkbook.Worksheets("TimeTemplate").ExportAsFixedFormat Type:=xlTypePDF, filename:=filepath
        stream.LoadFromFile filepath
        With cmd
            .CommandText = "INSERT INTO " & Schema & ".[" & table & "] VALUES (?,?,?,?);"
            .CommandType = adCmdText
            .Parameters.Append .CreateParameter("@FileID", adVarChar, adParamInput, Len(filepath), filepath)
            .Parameters.Append .CreateParameter("@TSID", adVarChar, adParamInput, Len(id), id)
            .Parameters.Append .CreateParameter("@SaveFile", adVarBinary, adParamInput, stream.Size, stream.Read)
            .Parameters.Append .CreateParameter("@UploadTime", adDate, adParamInput, Len(transtime), transtime)
        End With
        cmd.ActiveConnection = conn
        cmd.Execute
    End If
       
   ' How to get item from database
    If operation = "get" Then
        rs.Open "SELECT * FROM " & Schema & ".[" & table & "] WHERE TSID = '" & id & "';", conn, adOpenStatic, adLockOptimistic
        stream.Write rs.Fields("SaveFile").Value
        stream.SaveToFile filepath, adSaveCreateOverWrite
        ActiveWorkbook.FollowHyperlink filepath
    End If
    
    conn.Close

    Application.EnableEvents = True
    Application.ScreenUpdating = True

Exit Function

SafeExit:
        On Error GoTo 0

End Function

Sub FormatCol(ColRge As String)
   
On Error GoTo SafeExit
   With RepBI
        With .Range(ColRge).Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .ThemeColor = xlThemeColorDark1
            .TintAndShade = -4.99893185216834E-02
            .PatternTintAndShade = 0
        End With
        With .Range(ColRge).Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With .Range(ColRge).Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With .Range(ColRge).Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With .Range(ColRge).Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With .Range(ColRge).Borders(xlInsideVertical)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With .Range(ColRge).Borders(xlInsideHorizontal)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
    End With
Exit Sub

SafeExit:
        On Error GoTo 0

End Sub
Attribute VB_Name = "DataCusOrder"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DataIntOrder"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DataSum"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DataSumEBA"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "DataUpload"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Database"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MasAllowances"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MasAuto"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MasCategory"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MasClassification"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MasContract"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MasDelays"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MasEBA"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MasEmployee"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MasLocation"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MasMaster"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MasOvertime"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MasProject"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MasPublic"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MasRate"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MasRole"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MasSeq"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MasShift"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MasType"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MasUnits"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "MasWork"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Module1"
Option Compare Text

Public FGFileLocation As String
Sub ButtonNumber_Click(control As IRibbonControl)
 
On Error GoTo SafeExit
   
    UserForm6.Show

Exit Sub

SafeExit:
        Application.StatusBar = "Sub ButtonNumber_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Sub OnErrorGotoZeroTest()
On Error GoTo SafeExit

Err.Raise Number:=9999, Description:="Forced Error"

Exit Sub

SafeExit:
        Application.StatusBar = "Sub onErrorGotoZeroTest" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Sub PaneFreeze()

On Error GoTo SafeExit

If ActiveWindow.FreezePanes = False Then
    Application.Goto Reference:=Range("a1"), Scroll:=True
    'Rows("11:11").Select
    ActiveSheet.Range("I11").Select
    ActiveWindow.FreezePanes = True
    'ActiveSheet.Shapes.Range(Array("ButtonFreeze")).Select
    'Selection.Characters.Text = "Unfreeze Panes To Sign"
    ActiveSheet.Range("A1").Select
Else
    ActiveWindow.FreezePanes = False
    'ActiveSheet.Shapes.Range(Array("ButtonFreeze")).Select
    'Selection.Characters.Text = "Freeze Panes"
    'ActiveWindow.SmallScroll Down:=25
    ActiveSheet.Range("PrintCustName").Select
End If

Exit Sub

SafeExit:
        Application.StatusBar = "Sub PaneFreeze" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Sub ButtonNumberClear_Click(control As IRibbonControl)

On Error GoTo SafeExit

    Select Case ActiveSheet.name
    
        Case "TimeTemplate", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"
            ActiveSheet.Cells(1, 7) = Empty
    
    End Select

Application.ScreenUpdating = True
Application.EnableEvents = True
Application.StatusBar = Empty

Exit Sub

SafeExit:
        Application.StatusBar = "Sub ButtonNumberClear_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0
    
End Sub

Sub ButtonSetup_Click(control As IRibbonControl)
    
On Error GoTo SafeExit
    
    UserForm1.Show

Exit Sub

SafeExit:
        Application.StatusBar = "Sub ButtonSetup_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub
Sub ResSetup_Click(control As IRibbonControl)
    
On Error GoTo SafeExit

    UserForm2.Show

Exit Sub

SafeExit:
        Application.StatusBar = "Sub ResSetup_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub
Sub MasterSetup_Click(control As IRibbonControl)
   
On Error GoTo SafeExit

    If Left(ThisWorkbook.Sheets("Summary").Cells(1, 15), 5) = "Admin" Then 'only allow save feature for admin workbook
        UserForm3.Show
    Else
        MsgBox ("Adminstration Function Only")
    End If
    
Exit Sub

SafeExit:
        Application.StatusBar = "Sub MasterSetup_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0
    
End Sub

Sub TSManager_Click(control As IRibbonControl)

On Error GoTo SafeExit
    
    UserForm4.Show

Exit Sub

SafeExit:
        Application.StatusBar = "Sub TSManager_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub
Sub LoginDB_Click(control As IRibbonControl) '(control As IRibbonControl)
    
On Error GoTo SafeExit
    
    UserForm5.Show
    
Exit Sub

SafeExit:
        Application.StatusBar = "Sub LoginDB_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Sub ShowSheets(control As IRibbonControl)

On Error GoTo SafeExit

    If Left(ThisWorkbook.Sheets("Summary").Cells(1, 15), 5) = "Admin" Then 'only allow save feature for admin workbook
    
            Application.ScreenUpdating = False

            ThisWorkbook.Sheets("Employee").Visible = True 'Employee and Job Data Set
            ThisWorkbook.Sheets("DataInternalOrder").Visible = True
            ThisWorkbook.Sheets("DataInternalActivity").Visible = True
            ThisWorkbook.Sheets("DataCustomerOrder").Visible = True
            ThisWorkbook.Sheets("DataCustomerPO").Visible = True
            ThisWorkbook.Sheets("Master").Visible = True
            
            ThisWorkbook.Sheets("Role").Visible = True 'Master Data Set
            ThisWorkbook.Sheets("Category").Visible = True
            ThisWorkbook.Sheets("Classification").Visible = True
            ThisWorkbook.Sheets("Overtime").Visible = True
            ThisWorkbook.Sheets("Shift").Visible = True
            ThisWorkbook.Sheets("Rate").Visible = True
            ThisWorkbook.Sheets("Units").Visible = True
            ThisWorkbook.Sheets("Allowances").Visible = True
            ThisWorkbook.Sheets("Delays").Visible = True
            ThisWorkbook.Sheets("Location").Visible = True
            ThisWorkbook.Sheets("Contract").Visible = True
            ThisWorkbook.Sheets("Project").Visible = True
            ThisWorkbook.Sheets("Agreement").Visible = True
            ThisWorkbook.Sheets("Public").Visible = True
            ThisWorkbook.Sheets("Auto").Visible = True
            ThisWorkbook.Sheets("Type").Visible = True

            Application.ScreenUpdating = True
    Else
            MsgBox ("Adminstration Function Only")
    End If

Exit Sub

SafeExit:
        Application.StatusBar = "Sub ShowSheets" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Sub HideSheets(control As IRibbonControl)

On Error GoTo SafeExit

    If Left(ThisWorkbook.Sheets("Summary").Cells(1, 15), 5) = "Admin" Then 'only allow save feature for admin workbook
        
            Application.ScreenUpdating = False
    
            ThisWorkbook.Sheets("Employee").Visible = False 'Employee and Job Data Set
            ThisWorkbook.Sheets("DataInternalOrder").Visible = False
            ThisWorkbook.Sheets("DataInternalActivity").Visible = False
            ThisWorkbook.Sheets("DataCustomerOrder").Visible = False
            ThisWorkbook.Sheets("DataCustomerPO").Visible = False
            ThisWorkbook.Sheets("Master").Visible = False
            
            ThisWorkbook.Sheets("Role").Visible = False 'Master Data Set
            ThisWorkbook.Sheets("Category").Visible = False
            ThisWorkbook.Sheets("Classification").Visible = False
            ThisWorkbook.Sheets("Overtime").Visible = False
            ThisWorkbook.Sheets("Shift").Visible = False
            ThisWorkbook.Sheets("Rate").Visible = False
            ThisWorkbook.Sheets("Units").Visible = False
            ThisWorkbook.Sheets("Allowances").Visible = False
            ThisWorkbook.Sheets("Delays").Visible = False
            ThisWorkbook.Sheets("Location").Visible = False
            ThisWorkbook.Sheets("Contract").Visible = False
            ThisWorkbook.Sheets("Project").Visible = False
            ThisWorkbook.Sheets("Agreement").Visible = False
            ThisWorkbook.Sheets("Public").Visible = False
            ThisWorkbook.Sheets("Auto").Visible = False
            ThisWorkbook.Sheets("Type").Visible = False

            Application.ScreenUpdating = True
    Else
            MsgBox ("Adminstration Function Only")
    End If

Exit Sub

SafeExit:
        Application.StatusBar = "Sub HideSheets" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Sub ExtractAll()

On Error GoTo SafeExit

    If ActiveSheet.Cells(1, 4) = 1 Then
        Extract
        Application.StatusBar = "Generating ReportSummary..."
        RepSumPivot
        If ThisWorkbook.Sheets("ReportSummary").Visible = False Then ThisWorkbook.Sheets("ReportSummary").Visible = True
        Application.StatusBar = False
        Exit Sub
    End If
    
    Dim DataRange As Variant
    Dim DataSum() As Variant
    Dim x, i, j, k, Col, log, RowCount, DataCount, SumCount As Integer
    Dim Allow, AllowTot, TimeStart As Double
    Dim WorkStart, WorkEnd, AllowStart As Integer
    Dim Prod, Emer, Npro, Over, FileTotal, FileCount, SheetTotal As Integer
    Dim NameSh, TimeRun, App, CustSig, CompSig, TimeID As String
    Dim wb As Workbook
    Dim ws As Worksheet

    TimeStart = Timer
    NameSh = "Summary"
    
    ActiveSheet.Unprotect
    Application.ScreenUpdating = False 'Process optimisation
    Application.EnableEvents = False

    If FolderCheck(NameSh) = True Then 'check if file path is the same as extraction path
        MsgBox "The Timesheet Consolidate Tool cannot be operated in the same folder as the timesheets they are extracting. Please move the Timesheet Consolidate Tool and try again."
        Exit Sub
    End If

    DataCount = ThisWorkbook.Sheets(NameSh).Range("A" & Rows.Count).End(xlUp).Row 'used to append data not over write in data summary
    SumCount = ThisWorkbook.Sheets(NameSh).Range("Q" & Rows.Count).End(xlUp).Row

    x = 0 'DataCount
    k = SumCount + 1
    ReDim DataSum(20, x) 'columns and rows switched due to redim limitation (must use second attribute)

    If Dir(ThisWorkbook.Sheets(NameSh).Range("E1") & "\" & client, vbDirectory) = "" Then GetFolder
    
    '''''''''''''''''''' Start Workbook Identification ''''''''''''''''''''
    If ThisWorkbook.Sheets(NameSh).Range("E1") = "" Then
        MsgBox "Please select the folder location for the timesheets you wish to extract before extracting."
        Exit Sub
    End If

    folder_path = Range("E1") & "\" 'Correction to folder path format
    file_name = Dir(folder_path) 'set file path

    Do While file_name <> "" 'count number of files in the directory
        FileTotal = FileTotal + 1
        file_name = Dir()
    Loop
    
    'TimeStart = Timer
    
    file_name = Dir(folder_path)
    Do While file_name <> "" 'Loop through workbooks until all files opened
        full_path = folder_path & file_name 'Set path of file to open
        Set wb = Workbooks.Open(full_path, UpdateLinks:=False)  'Assign workbook a variable and open it

    'TimeRun = Format((Timer - TimeStart) / 86400, "hh:mm:ss")
    'MsgBox (File_Name & " Opened Successfully" & vbCrLf & "Time Taken " & TimeRun)

        FileCount = FileCount + 1
        Application.ScreenUpdating = True
        Application.StatusBar = "Processing " & FileCount & " of " & FileTotal & " files"
        Application.ScreenUpdating = False
        '''''''''''''''''''' Start Pull Data ''''''''''''''''''''
        SheetTotal = 0
                        
        For Each ws In wb.Sheets
            If ws.name = "Mon" Or ws.name = "Tue" Or ws.name = "Wed" Or _
               ws.name = "Thu" Or ws.name = "Fri" Or ws.name = "Sat" Or ws.name = "Sun" Then
                If ws.Cells(1, 4) = 1 Then
                
                    RowCount = ws.Range("A" & Rows.Count).End(xlUp).Row - 7 'Determine the number of rows
                    
                    For y = 1 To RowCount 'Determine the allowance range
                        Select Case ws.Cells(y, 1)
                            Case "WORKED HOURS"
                                WorkStart = y + 2
                            Case "ALLOWANCES"
                                WorkEnd = y - 1
                                AllowStart = y + 2
                                AllowEnd = RowCount - 2
                        End Select
                    Next y

                    Col = 1
                    Do Until ws.Cells(2, Col) = "Total Hours"
                        Col = Col + 1
                    Loop

                    DataRange = ws.Range(ws.Cells(1, 1), ws.Cells(RowCount - 2, Col - 1))
                    
                    If ws.Range("AppChk") <> vbNullString Then 'Data for approvals
                        TimeID = ws.Cells(8, 1)
                        App = Format(ws.Range("FinalTime").Value, "yyyy/mm/dd hh:mm")
                        CustSig = ws.Range("PrintCustName").Value
                        CompSig = ws.Range("PrintCompName").Value
                    End If
                    
                    For i = 9 To Col - 1 'cycle through each employee column
                        For j = WorkStart To AllowEnd 'cycle through worked hours
                            'Application.StatusBar = "Extracting Data... " & FileCount & " " & ws.Name & " Col " & i - 7 & " Row " & j 'display status information
                            If DataRange(2, i) <> 0 And DataRange(2, i) <> vbNullString Then
                                If DataRange(j, i) <> 0 And DataRange(j, i) <> vbNullString Then
                                    
                                        DataSum(0, x) = Format(DataRange(4, 7), "mm/dd/yyyy") 'Date (day and month switch for some unknown reason)
                                        DataSum(11, x) = DataRange(6, i) 'Shift
                                        DataSum(12, x) = DataRange(3, 7) 'Supervisor
                                        DataSum(1, x) = DataRange(j, 5) 'External Reference
                                        DataSum(2, x) = DataRange(j, 1) 'Workorder
                                        DataSum(3, x) = DataRange(j, 2) 'Operation
                                        DataSum(4, x) = DataRange(3, i) 'Employee ID
                                        DataSum(5, x) = DataRange(2, i) 'Name
                                        DataSum(6, x) = DataRange(1, i) 'Emp Type
                                        DataSum(7, x) = DataRange(4, i) 'Trade
                                        DataSum(13, x) = Now() 'TimeStamp
                                        DataSum(14, x) = file_name 'Filename
                                        DataSum(19, x) = DataRange(2, 6) 'Site UID
                                        DataSum(20, x) = DataRange(3, i) & "-" & Format(DataRange(4, 7), "dd/mm/yyyy") 'Emp-Day UID
                                        If ws.Range("AppChk") <> vbNullString Then
                                            DataSum(15, x) = TimeID
                                            DataSum(16, x) = App
                                            DataSum(17, x) = CustSig
                                            DataSum(18, x) = CompSig
                                        End If
                                        DataSum(9, x) = DataRange(j, i)
                                        
                                        If j >= WorkStart And j <= WorkEnd Then
                                            If DataRange(j, 3) = "Delay" Then
                                                DataSum(8, x) = DataRange(j, 3) & " - " & DataRange(j, 7) 'Type
                                            Else
                                                DataSum(8, x) = DataRange(j, 3)
                                            End If
                                            DataSum(10, x) = "Hours" 'Units
                                        ElseIf j >= AllowStart And j <= AllowEnd Then
                                            DataSum(8, x) = "Allow" & " - " & DataRange(j, 7) 'Type
                                            DataSum(10, x) = DataRange(j, 8) 'Units
                                        End If

                                    'If Left(ws.Cells(j, 3), 3) <> "WBS" Then 'Check whether WBS or Service Order ' disabled to check speed
                                    '    With ThisWorkbook.Sheets(NameSh).Cells(x, 2)
                                    '        .FormulaR1C1 = "=IFERROR(INDEX(WO_Customer,MATCH(RC[1],WO_UGL,0)),"""")"
                                    '        '.Value = .Value
                                    '    End With
                                    'End If
                                    x = x + 1
                                    ReDim Preserve DataSum(20, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                End If
                            End If
                        Next j
                    Next i

                End If
                SheetTotal = SheetTotal + 1
            End If
        Next ws

        '''''''''''''''''''' End Pull Data ''''''''''''''''''''

        ThisWorkbook.Sheets(NameSh).Cells(k, 23) = file_name
        ThisWorkbook.Sheets(NameSh).Cells(k, 24) = SheetTotal
        k = k + 1
        
        Workbooks(file_name).Close savechanges:=False 'Close the workbook that's just been opened
        file_name = Dir() 'continue to next file

    Loop
    '''''''''''''''''''' End Workbook Identification ''''''''''''''''''''
    RowCount = ThisWorkbook.Sheets(NameSh).Range("A" & Rows.Count).End(xlUp).Row
    ThisWorkbook.Sheets(NameSh).Range("A3:U" & RowCount).name = NameSh

    If x > 0 Then ThisWorkbook.Sheets("Summary").Range("A4:U" & x + 3) = Application.WorksheetFunction.Transpose(DataSum)

    Application.EnableEvents = True
    Application.ScreenUpdating = True

    LastRow = Range("A4").CurrentRegion.Rows.Count + 2

    If TableExists(ActiveSheet, "DataSummary") = False Then
        ActiveSheet.ListObjects.Add(xlSrcRange, Range("A3:U" & LastRow)).name = "DataSummary"
        ActiveSheet.ListObjects("DataSummary").TableStyle = ""
    End If
    
    Application.StatusBar = "Generating ReportSummary..."
    RepSumPivot
    If ThisWorkbook.Sheets("ReportSummary").Visible = False Then ThisWorkbook.Sheets("ReportSummary").Visible = True
    ActiveSheet.Protect AllowFiltering:=True
    
    Application.StatusBar = False
    TimeRun = Format((Timer - TimeStart) / 86400, "hh:mm:ss")
    MsgBox (k - (SumCount + 1) & " Timesheets Extracted Successfully" & vbCrLf & "Time Taken " & TimeRun), , "Performance"
    
Exit Sub
   
SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        Application.StatusBar = "Sub ExtractAll" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0
End Sub
Sub ExtractAllEBA()

On Error GoTo SafeExit

    If ActiveSheet.Cells(1, 4) = 1 Then
        ExtractEBA
        Exit Sub
    End If
    
    'ADD NEW
    Dim DataRangeAllow, DataRange As Variant
    Dim DataSum() As Variant
    Dim DataRow As Integer

    Dim x, i, j, k, Col, RowCount, FileTotal, FileCount, SheetTotal, DataCount, SumCount As Integer
    Dim EBAj, EBAi, EBAt, EBAw As Integer
    Dim EBA, TH, THR, THB, WOH, WOR, EBAR, TimeStart As Double
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim day As Date
    Dim Shift, NameSh, TimeRun As String
    Dim DictHrs As New Scripting.Dictionary
    Dim DictEBA As New Scripting.Dictionary
    Dim EmpID As String
    Dim Arr(0 To 3) As Long

    TimeStart = Timer
    NameSh = "SummaryEBA"

    If FolderCheck(NameSh) = True Then 'check if file path is the same as extraction path
        MsgBox "The Timesheet Consolidate Tool cannot be operated in the same folder as the timesheets they are extracting. Please move the Timesheet Consolidate Tool and try again."
        Exit Sub
    End If

    DataCount = ThisWorkbook.Sheets(NameSh).Range("A" & Rows.Count).End(xlUp).Row 'used to append data not over write in data summary
    SumCount = ThisWorkbook.Sheets(NameSh).Range("R" & Rows.Count).End(xlUp).Row

    x = 0 'DataCount + 1
    k = SumCount + 1
    
    ReDim DataSum(16, x) 'columns and rows switched due to redim limitation (must use second attribute)
    
    If Dir(ThisWorkbook.Sheets(NameSh).Range("E1") & "\" & client, vbDirectory) = "" Then GetFolder
    
    ActiveSheet.Unprotect
    Application.ScreenUpdating = False 'Process optimisation
    Application.EnableEvents = False

    '''''''''''''''''''' Start Workbook Identification ''''''''''''''''''''
    If ThisWorkbook.Sheets(NameSh).Range("E1") = "" Then
        MsgBox "Please select the folder location for the timesheets you wish to extract before extracting."
        Exit Sub
    End If

    folder_path = Range("E1") & "\" 'Correction to folder path format
    file_name = Dir(folder_path) 'set file path

    Do While file_name <> "" 'count number of files in the directory
        FileTotal = FileTotal + 1
        file_name = Dir()
    Loop

    file_name = Dir(folder_path)
    Do While file_name <> "" 'Loop through workbooks until all files opened
        full_path = folder_path & file_name 'Set path of file to open
        Set wb = Workbooks.Open(full_path, UpdateLinks:=False)  'Assign workbook a variable and open it

        FileCount = FileCount + 1
        Application.ScreenUpdating = True
        Application.StatusBar = "Processing " & FileCount & " of " & FileTotal & " files"
        Application.ScreenUpdating = False


        '''''''''''''''''''' Start Pull Data ''''''''''''''''''''
        'wb.Worksheets("Mon").Select 'start at Monday
        SheetTotal = 0
        
        For Each ws In Sheets
        
        If ws.name = "Mon" Or ws.name = "Tue" Or ws.name = "Wed" Or _
           ws.name = "Thu" Or ws.name = "Fri" Or ws.name = "Sat" Or ws.name = "Sun" Then
            If ws.Cells(1, 4) = 1 Then
            
                RowCount = ws.Range("A" & Rows.Count).End(xlUp).Row - 7 'Determine the number of rows

                For y = 1 To RowCount 'Determine the allowance range
                    Select Case ws.Cells(y, 1)
                        Case "WORKED HOURS"
                            WorkStart = y + 2
                        Case "ALLOWANCES"
                            WorkEnd = y - 1
                            AllowStart = y + 2
                            AllowEnd = RowCount - 2
                    End Select
                Next y

                Col = 1
                Do Until ws.Cells(2, Col) = "Total Hours" 'Determine number of employee columns
                    Col = Col + 1
                Loop

                day = Weekday(ws.Cells(4, 6), vbMonday) 'Determine day of week as integer starting Monday = 1
                Shift = ws.Cells(5, 6) 'Determine Shift

                ' Find and set EBA parameters (reset each worksheet/day)
                If ws.Cells(5, 6) = "Public" Then 'Check Public Holiday
                    EBAw = 8
                ElseIf day < 6 And Shift = "Day" Then 'Day Shift
                    EBAw = 2
                ElseIf day < 6 And Shift = "Afternoon" Then 'Afternoon Shift
                    EBAw = 3
                ElseIf day < 6 And Shift = "Night" Then 'Night Shift
                    EBAw = 4
                ElseIf day = 6 And Shift <> "Night" Then 'Saturday Day Shift
                    EBAw = 5
                ElseIf day = 6 And Shift = "Night" Then 'Saturday Night Shift
                    EBAw = 6
                    Else 'Sunday Shift
                    EBAw = 7
                End If

                EBAi = 3 'set EBA counter to start in column 3
                EBAt = 3
                
                ' ADD NEW
                DataRange = ws.Range(ws.Cells(1, 1), ws.Cells(RowCount, Col - 1))
                
                For i = 9 To Col - 1 'cycle through each employee column

                    If Left(ws.Cells(1, i), 5) = "Wages" Then 'Use Wages Calculations

                        'Initialise variables for each employee
                        TH = ws.Cells(5, i) 'select the total hours worked for each employee
                        THB = 0 'Total Hour Bucket
                        THR = TH - THB 'Total Hours Remaining

                        If Left(ws.Cells(1, i), 5) = "Staff" Then 'Set EBA for staff
                            EBAj = 9 'Switch to Staff scenario
                        Else
                            EBAj = EBAw 'Switch back to Wages scenario
                        End If
                        EBAR = Sheets("EBA").Cells(EBAj, EBAi)

                        For j = WorkStart To AllowEnd 'cycle through each work order
                            If DataRange(2, i) <> 0 Or DataRange(2, i) <> vbNullString Then
                                If DataRange(j, i) <> 0 Or DataRange(j, i) <> vbNullString Then
                                
                                    'Initialise variables for each work order
                                    WOH = ws.Cells(j, i) 'Work Order Hours
                                    WOR = WOH ' Work Order Hours Remaining
                                    Debug.Print "WOR New Work Order"; WOR

                                    If j <= WorkEnd Then 'Search Working Hours
                                        Do Until WOR = 0 'loop until hours of work order have been allocated
                                            EBA = Sheets("EBA").Cells(EBAj, EBAi) 'Set EBA
                                            If EBA = 0 Then
                                                EBAi = EBAi + 1
                                                EBAt = EBAt + 1
                                                EBAR = Sheets("EBA").Cells(EBAj, EBAi)
                                            Else

                                                Debug.Print "EBA Start"; EBA
                                                Debug.Print "EBAR: "; EBAR
                                                Debug.Print "EBAi"; EBAi

                                                ' Is Work Order Hours Remaining to be allocated less/greater than or equal to the EBA Remaining to be aloocated
                                                If WOR < EBAR Then
                                                    hours = WOR 'set hours to be written to the sheet
                                                    WOR = WOR - hours
                                                    EBAR = EBAR - hours
                                                    'ThisWorkbook.Sheets("SummaryEBA").Cells(x, 12).Value = Sheets("EBA").Cells(1, EBAt)  'Rate Type
                                                    ' ADD NEW
                                                    DataSum(11, x) = Sheets("EBA").Cells(1, EBAt)  'Rate Type

                                                ElseIf WOR > EBAR Then
                                                    hours = WOR - (WOR - EBAR)
                                                    WOR = Application.WorksheetFunction.Max(0, WOR - hours)
                                                    'ThisWorkbook.Sheets("SummaryEBA").Cells(x, 12).Value = Sheets("EBA").Cells(1, EBAt)  'Rate Type
                                                    ' ADD NEW
                                                    DataSum(11, x) = Sheets("EBA").Cells(1, EBAt)  'Rate Type
                                                    EBAi = EBAi + 1
                                                    EBAt = EBAt + 1
                                                    EBAR = Sheets("EBA").Cells(EBAj, EBAi)

                                                Else
                                                    hours = WOR
                                                    WOR = 0
                                                    'ThisWorkbook.Sheets("SummaryEBA").Cells(x, 12).Value = Sheets("EBA").Cells(1, EBAt)  'Rate Type
                                                    ' ADD NEW
                                                    DataSum(11, x) = Sheets("EBA").Cells(1, EBAt)  'Rate Type
                                                    EBAi = EBAi + 1
                                                    EBAt = EBAt + 1
                                                    EBAR = Sheets("EBA").Cells(2, EBAi)
                                                End If
                                                                                                                                                
                                                DataSum(0, x) = Format(ws.Cells(4, 7), "mm/dd/yyyy")  'Date (day and month are switched for unknown reason)
                                                DataSum(12, x) = DataRange(6, i) 'Shift
                                                DataSum(13, x) = DataRange(3, 7) 'Supervisor
                                                DataSum(2, x) = DataRange(j, 1) 'Workorder
                                                DataSum(3, x) = DataRange(j, 2) 'Operation
                                                DataSum(1, x) = DataRange(j, 5) 'External Order
                                                DataSum(4, x) = DataRange(3, i) 'Employee ID
                                                DataSum(5, x) = DataRange(2, i) 'Name
                                                DataSum(6, x) = DataRange(1, i) 'Emp Type
                                                DataSum(7, x) = DataRange(4, i) 'Trade
                                                DataSum(14, x) = Now() 'TimeStamp
                                                DataSum(15, x) = ActiveWorkbook.name 'Filename
                                                DataSum(10, x) = "Hours" 'Units
                                                DataSum(9, x) = hours 'Quantity
                                                DataSum(8, x) = DataRange(j, 3) 'Type
                                                DataSum(10, x) = "Hours" 'Units

                                                THB = THB + hours
                                                THR = TH - THB

                                                Debug.Print "hours"; hours
                                                Debug.Print "THB"; THB
                                                Debug.Print "THR"; THR
                                                Debug.Print "WOR"; WOR
                                                Debug.Print "EBAR"; EBAR
                                                Debug.Print "EBA End"; EBA
                                                Debug.Print "-----"
                                                x = x + 1 'add new line
                                                ReDim Preserve DataSum(16, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                            End If
                                        Loop
                                    
                                    ElseIf j >= AllowStart Then ' Search Allowances

                                        DataSum(8, x) = "Allow" 'Type
                                        DataSum(0, x) = Format(DataRange(4, 7), "mm/dd/yyyy") 'Date
                                        DataSum(12, x) = DataRange(6, i) 'Shift
                                        DataSum(13, x) = DataRange(3, 7) 'Supervisor
                                        DataSum(2, x) = DataRange(j, 1) 'Workorder
                                        DataSum(3, x) = DataRange(j, 2) 'Operation
                                        DataSum(1, x) = DataRange(j, 5) 'External Order
                                        DataSum(4, x) = DataRange(3, i) 'Employee ID
                                        DataSum(5, x) = DataRange(2, i) 'Name
                                        DataSum(6, x) = DataRange(1, i) 'Emp Type
                                        DataSum(7, x) = DataRange(4, i) 'Trade
                                        DataSum(14, x) = Now() 'TimeStamp
                                        DataSum(15, x) = ActiveWorkbook.name 'Filename
                                        DataSum(10, x) = DataRange(j, 8) 'Units
                                        DataSum(9, x) = DataRange(j, i) 'Quantity
                                        DataSum(11, x) = DataRange(j, 7) 'Rate
                                        
                                        x = x + 1
                                        ReDim Preserve DataSum(16, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                    End If
                                End If
                            End If
                        Next j
                        EBAi = 3  'reset EBA
                        EBAt = 3
                        EBAR = Sheets("EBA").Cells(EBAj, EBAi) 'reset EBAR
                        '''''''''''''''''''' Start Staff Cycle ''''''''''''''''''''
                    Else
                        If Left(ws.Cells(1, i), 5) = "Staff" Then 'Set EBA for staff
                            EBAj = 9 'Staff scenario
                        End If

                        'Load Employee
                        EmpID = ws.Cells(2, i)
                        'Stop
                        'Check Dictionary for Employee
                        If Not DictHrs.Exists(EmpID) Then
                            DictHrs.Add EmpID, 0 'Create Entry with hours
                        End If

                        'Check Dictionary for EBA
                        If Not DictEBA.Exists(EmpID) Then
                            'Create initial values
                            Arr(0) = EBAi
                            Arr(1) = EBAj
                            Arr(2) = EBAt
                            Arr(3) = ThisWorkbook.Sheets("EBA").Cells(EBAj, EBAi) 'Set EBA
                            DictEBA.Add EmpID, Arr
                        Else
                            'Use existing values
                            Arr(0) = DictEBA(EmpID)(0)
                            Arr(1) = DictEBA(EmpID)(1)
                            Arr(2) = DictEBA(EmpID)(2)
                            Arr(3) = DictEBA(EmpID)(3)
                        End If

                        EBA = Sheets("EBA").Cells(DictEBA(EmpID)(1), DictEBA(EmpID)(0)) 'Initialise EBA

                        'Debug.Print arr(0)
                        'Debug.Print arr(1)
                        'Debug.Print arr(2)
                        'Debug.Print arr(3)
                        'Debug.Print DictEBA(EmpID)(0)
                        'Debug.Print DictEBA(EmpID)(1)
                        'Debug.Print DictEBA(EmpID)(2)
                        'Debug.Print DictEBA(EmpID)(3)

                        For j = WorkStart To AllowEnd 'cycle through each work order
                            If ws.Cells(2, i) <> "" Then
                                If ws.Cells(j, i) <> "" And ws.Cells(j, i) <> 0 Then
                                                                       
                                    WOH = ws.Cells(j, i)
                                    WOR = WOH
                                    'If Left(ws.Cells(1, i), 5) = "Staff" Then
                                    DictHrs(EmpID) = DictHrs(EmpID) + WOH
                                    'Else
                                    'DictHrs(EmpID) = WOH
                                    'End If

                                    If j <= WorkEnd Then 'Search Working Hours
                                        hours = 0
                                        Do Until WOR = 0

                                            Debug.Print "xxxxxxxxxxx"
                                            Debug.Print "---Read---"
                                            Debug.Print "Sheet Name "; ws.name
                                            Debug.Print "Emp "; EmpID
                                            Debug.Print "DictHrs(EmpID)"; DictHrs(EmpID)
                                            'Debug.Print "hours"; hours
                                            Debug.Print "WOR"; WOR
                                            'Debug.Print "DictEBA EBAi"; DictEBA(EmpID)(0)
                                            'Debug.Print "DictEBA EBAj"; DictEBA(EmpID)(1)
                                            'Debug.Print "DictEBA EBAt"; DictEBA(EmpID)(2)
                                            Debug.Print "DictEBA EBA"; DictEBA(EmpID)(3)
                                            'Stop
                                            If DictHrs(EmpID) < DictEBA(EmpID)(3) Then
                                                hours = WOR
                                                WOR = WOR - hours
                                                'ThisWorkbook.Sheets("SummaryEBA").Cells(x, 12).Value = Sheets("EBA").Cells(1, arr(2))  'Rate Type
                                                ' ADD NEW
                                                DataSum(11, x) = Sheets("EBA").Cells(1, Arr(2))  'Rate Type

                                            ElseIf DictHrs(EmpID) > DictEBA(EmpID)(3) Then
                                                hours = WOR - (DictHrs(EmpID) - Arr(3))
                                                WOR = Application.WorksheetFunction.Max(0, WOR - hours)
                                                'ThisWorkbook.Sheets("SummaryEBA").Cells(x, 12).Value = Sheets("EBA").Cells(1, arr(2))  'Rate Type
                                                ' ADD NEW
                                                DataSum(11, x) = Sheets("EBA").Cells(1, Arr(2))  'Rate Type
                                                Arr(0) = Arr(0) + 1
                                                Arr(2) = Arr(2) + 1
                                                Arr(3) = ThisWorkbook.Sheets("EBA").Cells(DictEBA(EmpID)(1), Arr(0))
                                                DictEBA(EmpID) = Arr

                                                Else 'if dicthrs = EBAR
                                                hours = WOR
                                                WOR = 0
                                                'ThisWorkbook.Sheets("SummaryEBA").Cells(x, 12).Value = Sheets("EBA").Cells(1, arr(2))  'Rate Type
                                                ' ADD NEW
                                                DataSum(11, x) = Sheets("EBA").Cells(1, Arr(2))  'Rate Type
                                                Arr(0) = Arr(0) + 1
                                                Arr(2) = Arr(2) + 1
                                                Arr(3) = ThisWorkbook.Sheets("EBA").Cells(DictEBA(EmpID)(1), Arr(0))
                                                DictEBA(EmpID) = Arr
                                            End If

                                            Debug.Print "---Write---"
                                            Debug.Print "DictHrs(EmpID)"; DictHrs(EmpID)
                                            'Debug.Print "hours"; hours
                                            Debug.Print "WOR"; WOR
                                            'Debug.Print "DictEBA EBAi"; DictEBA(EmpID)(0)
                                            'Debug.Print "DictEBA EBAj"; DictEBA(EmpID)(1)
                                            'Debug.Print "DictEBA EBAt"; DictEBA(EmpID)(2)
                                            Debug.Print "DictEBA EBA"; DictEBA(EmpID)(3)
                                            Debug.Print "xxxxxxxxxxx"
                                            'Stop

                                            'Print statements

'                                            If Left(ws.Cells(j, 3), 3) <> "WBS" Then 'Check whether WBS or Service Order
'                                                Sheets("SummaryEBA").Cells(x, 2).FormulaR1C1 = "=IFERROR(INDEX(WO_Customer,MATCH(RC[1],WO_UGL,0)),"""")" 'External Order
'                                            End If
                                            
                                            ' ADD NEW
                                            DataSum(0, x) = Format(DataRange(4, 7), "mm/dd/yyyy") 'Date
                                            DataSum(12, x) = DataRange(5, 6) 'Shift
                                            DataSum(13, x) = DataRange(3, 6) 'Supervisor
                                            DataSum(2, x) = DataRange(j, 1) 'Workorder
                                            DataSum(3, x) = DataRange(j, 2) 'Operation
                                            DataSum(4, x) = DataRange(3, i) 'Employee ID
                                            DataSum(5, x) = DataRange(2, i) 'Name
                                            DataSum(6, x) = DataRange(1, i) 'Emp Type
                                            DataSum(7, x) = DataRange(4, i) 'Trade
                                            DataSum(14, x) = Now() 'TimeStamp
                                            DataSum(15, x) = ActiveWorkbook.name 'Filename
                                            DataSum(10, x) = "Hours" 'Units
                                            DataSum(9, x) = hours 'Quantity
                                            DataSum(2, x) = DataRange(j, 5) 'External Order
                                            DataSum(x, 8) = DataRange(j, 3) 'Type
                                            
                                            x = x + 1 'add new line
                                            ReDim Preserve DataSum(16, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                        Loop
                                    ElseIf j >= AllowStart Then ' Search Allowances
                                        
                                        ' ADD NEW
                                        DataSum(8, x) = "Allow" 'Type
                                        DataSum(0, x) = Format(DataRange(4, 7), "mm/dd/yyyy") 'Date
                                        DataSum(12, x) = DataRange(6, i) 'Shift
                                        DataSum(13, x) = DataRange(3, 7) 'Supervisor
                                        DataSum(2, x) = DataRange(j, 1) 'Workorder
                                        DataSum(3, x) = DataRange(j, 2) 'Operation
                                        DataSum(1, x) = DataRange(j, 5) 'External Order
                                        DataSum(4, x) = DataRange(3, i) 'Employee ID
                                        DataSum(5, x) = DataRange(2, i) 'Name
                                        DataSum(6, x) = DataRange(1, i) 'Emp Type
                                        DataSum(7, x) = DataRange(4, i) 'Trade
                                        DataSum(14, x) = Now() 'TimeStamp
                                        DataSum(15, x) = ActiveWorkbook.name 'Filename
                                        DataSum(10, x) = DataRange(j, 8) 'Units
                                        DataSum(9, x) = DataRange(j, i) 'Quantity
                                        DataSum(11, x) = DataRange(j, 7) 'Rate
                                        
                                        x = x + 1
                                        ReDim Preserve DataSum(16, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                    End If
                                End If
                            End If
                        Next j
                        '''''''''''''''''''' End Cycle Employee Column ''''''''''''''''''''
                    End If
                Next i

            End If
        SheetTotal = SheetTotal + 1
        End If
    Application.StatusBar = "Extracting Data... " & ws.name
    Next ws
    
        If x > 0 Then ThisWorkbook.Sheets("SummaryEBA").Range("A4:P" & x + 3) = Application.WorksheetFunction.Transpose(DataSum)
        
        '''''''''''''''''''' End Pull Data ''''''''''''''''''''
        ThisWorkbook.Sheets(NameSh).Cells(k, 18) = file_name
        ThisWorkbook.Sheets(NameSh).Cells(k, 19) = SheetTotal
        k = k + 1
        
        Workbooks(file_name).Close savechanges:=False 'Close the workbook that's just been opened
        file_name = Dir() 'continue to next file

        'remove dictionaries
        DictHrs.RemoveAll
        DictEBA.RemoveAll

    Loop
    '''''''''''''''''''' End Workbook Identification ''''''''''''''''''''

    TimeRun = Format((Timer - TimeStart) / 86400, "hh:mm:ss")
    MsgBox (k - (SumCount + 1) & " Timesheets Extracted Successfully" & vbCrLf & "Time Taken " & TimeRun), , "Performance"

'    LastRow = Range("P4").CurrentRegion.Rows.Count + 2
'
'    If TableExists(ActiveSheet, "SummaryEBA") = False Then 'establish table if it doesn't already exist
'        ActiveSheet.ListObjects.Add(xlSrcRange, Range("A3:P" & LastRow)).Name = "SummaryEBA"
'        ActiveSheet.ListObjects("SummaryEBA").TableStyle = ""
'    End If

    Application.ScreenUpdating = True
    Application.StatusBar = False
    Application.EnableEvents = True
    ActiveSheet.Protect

Exit Sub

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub

Sub ExtractUploadAll()
   
On Error GoTo SafeExit
   
    If ActiveSheet.Cells(1, 4) = 1 Then
        ExtractUpload
        Exit Sub
    End If
    
    Dim DataRangeAllow, DataRange As Variant
    Dim DataSum() As Variant
    Dim DataRow As Integer
    
    Dim x, i, j, k, Col, RowCount, FileTotal, FileCount, SheetTotal, DataCount, SumCount As Integer
    Dim EBAj, EBAi, EBAt, EBAw As Integer
    Dim EBA, WOH, WOR, EBAR, TimeStart As Double
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim day As Date
    Dim Shift, NameSh, TimeRun As String
    Dim DictHrs As New Scripting.Dictionary
    Dim DictEBA As New Scripting.Dictionary
    Dim EmpID As String
    Dim Arr(0 To 3) As Long

    TimeStart = Timer
    NameSh = "UploadSAP"
        
    If FolderCheck(NameSh) = True Then 'check if file path is the same as extraction path
        MsgBox "The Timesheet Consolidate Tool cannot be operated in the same folder as the timesheets they are extracting. Please move the Timesheet Consolidate Tool and try again."
        Exit Sub
    End If

    DataCount = ThisWorkbook.Sheets(NameSh).Range("A" & Rows.Count).End(xlUp).Row 'used to append data not over write in data summary
    SumCount = ThisWorkbook.Sheets(NameSh).Range("O" & Rows.Count).End(xlUp).Row

    x = 0 'DataCount + 1
    k = SumCount + 1
    ReDim DataSum(13, x) 'columns and rows switched due to redim limitation (must use second attribute)
    
    If Dir(ThisWorkbook.Sheets(NameSh).Range("E1") & "\" & client, vbDirectory) = "" Then GetFolder
    
    ActiveSheet.Unprotect
    Application.ScreenUpdating = False 'Process optimisation
    Application.EnableEvents = False

    '''''''''''''''''''' Start Workbook Identification ''''''''''''''''''''
    If ThisWorkbook.Sheets(NameSh).Range("E1") = "" Then
        MsgBox "Please select the folder location for the timesheets you wish to extract before extracting."
        Exit Sub
    End If

    folder_path = Range("E1") & "\" 'Correction to folder path format
    file_name = Dir(folder_path) 'set file path

    Do While file_name <> "" 'count number of files in the directory
        FileTotal = FileTotal + 1
        file_name = Dir()
    Loop

    file_name = Dir(folder_path)
    Do While file_name <> "" 'Loop through workbooks until all files opened
        full_path = folder_path & file_name 'Set path of file to open
        Set wb = Workbooks.Open(full_path, UpdateLinks:=False)  'Assign workbook a variable and open it

        FileCount = FileCount + 1
        Application.ScreenUpdating = True
        Application.StatusBar = "Processing " & FileCount & " of " & FileTotal & " files"
        Application.ScreenUpdating = False

        '''''''''''''''''''' Start Pull Data ''''''''''''''''''''
        'wb.Worksheets("Mon").Select
        
        SheetTotal = 0
       For Each ws In Sheets
        If ws.name = "Mon" Or ws.name = "Tue" Or ws.name = "Wed" Or _
           ws.name = "Thu" Or ws.name = "Fri" Or ws.name = "Sat" Or ws.name = "Sun" Then
            If ws.Cells(1, 4) = 1 Then
                
                RowCount = ws.Range("A" & Rows.Count).End(xlUp).Row - 7 'Determine the number of rows

                For y = 1 To RowCount 'Determine the allowance range
                    Select Case ws.Cells(y, 1)
                        Case "WORKED HOURS"
                            WorkStart = y + 2
                        Case "ALLOWANCES"
                            WorkEnd = y - 1
                            AllowStart = y + 2
                            AllowEnd = RowCount - 2
                    End Select
                Next y

                Col = 1
                Do Until ws.Cells(2, Col) = "Total Hours" 'Determine number of employee columns
                    Col = Col + 1
                Loop

                day = Weekday(ws.Cells(4, 6), vbMonday) 'Determine day of week as integer starting Monday = 1
                Shift = ws.Cells(5, 6) 'Determine Shift

                ' Find and set EBA parameters (reset each worksheet/day)
                If ws.Cells(5, 6) = "Public" Then 'Check Public Holiday
                    EBAw = 8
                ElseIf day < 6 And Shift = "Day" Then 'Day Shift
                    EBAw = 2
                ElseIf day < 6 And Shift = "Afternoon" Then 'Afternoon Shift
                    EBAw = 3
                ElseIf day < 6 And Shift = "Night" Then 'Night Shift
                    EBAw = 4
                ElseIf day = 6 And Shift <> "Night" Then 'Saturday Day Shift
                    EBAw = 5
                ElseIf day = 6 And Shift = "Night" Then 'Saturday Night Shift
                    EBAw = 6
                    Else 'Sunday Shift
                    EBAw = 7
                End If

                EBAi = 3 'set EBA counter to start in column 3
                EBAt = 3
                
                DataRange = ws.Range(ws.Cells(1, 1), ws.Cells(RowCount, Col - 1))

                For i = 9 To Col - 1 'cycle through each employee column

                    If Left(ws.Cells(1, i), 5) = "Wages" Then 'Use Wages Calculations
                        '''''''''''''''''''' Start Wages Cycle ''''''''''''''''''''

                        'Initialise variables for each employee
                        TH = ws.Cells(5, i) 'select the total hours worked for each employee
                        THB = 0 'Total Hour Bucket
                        THR = TH - THB 'Total Hours Remaining

                        If Left(ws.Cells(1, i), 5) = "Staff" Then 'Set EBA for staff
                            If day < 6 Then
                                EBAj = 9 'Switch to Staff scenario Weekday
                            Else
                                EBAj = 10 'Switch to Staff scenario Weekend
                            End If
                        Else
                            EBAj = 11 'EBAw 'Switch back to Wages scenario ** Prevent EBA split for SAP upload **
                        End If
                        EBAR = Sheets("EBA").Cells(EBAj, EBAi)

                        For j = WorkStart To AllowEnd 'cycle through each work order
                        
                            If DataRange(2, i) <> 0 And DataRange(2, i) <> vbNullString Then
                                If DataRange(j, i) <> 0 And DataRange(j, i) <> vbNullString Then
                                
                                ' ADD NEW
                                    DataSum(2, x) = Format(DataRange(4, 7), "mm/dd/yyyy") 'Date (Day and month switched for unknown reason)
                                
                                    'Initialise variables for each work order
                                    WOH = ws.Cells(j, i) 'Work Order Hours
                                    WOR = WOH ' Work Order Hours Remaining
                                    Debug.Print "WOR New Work Order"; WOR

                                    If j <= WorkEnd Then 'Search Working Hours
                                        Do Until WOR = 0 'loop until hours of work order have been allocated
                                            EBA = Sheets("EBA").Cells(EBAj, EBAi) 'Set EBA
                                            If EBA = 0 Then
                                                EBAi = EBAi + 1
                                                EBAt = EBAt + 1
                                                EBAR = Sheets("EBA").Cells(EBAj, EBAi)
                                            Else

                                                Debug.Print "EBA Start"; EBA
                                                Debug.Print "EBAR: "; EBAR
                                                Debug.Print "EBAi"; EBAi

                                                ' Is Work Order Hours Remaining to be allocated less/greater than or equal to the EBA Remaining to be aloocated
                                                If WOR < EBAR Then
                                                    hours = WOR 'set hours to be written to the sheet
                                                    WOR = WOR - hours
                                                    EBAR = EBAR - hours
                                                    RateType = Sheets("EBA").Cells(1, EBAt)
                                                    'ThisWorkbook.Sheets("UploadSAP").Cells(x, 11).Value = Sheets("EBA").Cells(1, EBAt)  'Rate Type

                                                ElseIf WOR > EBAR Then
                                                    hours = WOR - (WOR - EBAR)
                                                    WOR = Application.WorksheetFunction.Max(0, WOR - hours)
                                                    RateType = Sheets("EBA").Cells(1, EBAt)
                                                    'ThisWorkbook.Sheets("UploadSAP").Cells(x, 11).Value = Sheets("EBA").Cells(1, EBAt)  'Rate Type
                                                    EBAi = EBAi + 1
                                                    EBAt = EBAt + 1
                                                    EBAR = Sheets("EBA").Cells(EBAj, EBAi)

                                                Else
                                                    hours = WOR
                                                    WOR = 0
                                                    RateType = Sheets("EBA").Cells(1, EBAt)
                                                    'ThisWorkbook.Sheets("UploadSAP").Cells(x, 11).Value = Sheets("EBA").Cells(1, EBAt)  'Rate Type
                                                    EBAi = EBAi + 1
                                                    EBAt = EBAt + 1
                                                    EBAR = Sheets("EBA").Cells(2, EBAi)
                                                End If

                                                'Print statements
                                                'ThisWorkbook.Sheets("UploadSAP").Cells(x, 1).Value = "UPLOAD" 'Profile
                                                'ThisWorkbook.Sheets("UploadSAP").Cells(x, 2).Value = ws.Cells(3, i) 'Payroll Number
                                                'ThisWorkbook.Sheets("UploadSAP").Cells(x, 3).Value = ws.Cells(4, 6) 'Date
                                                
                                                ' ADD NEW
                                                DataSum(0, x) = "UPLOAD" 'Profile
                                                DataSum(1, x) = DataRange(3, i) 'Payroll Number
                                                DataSum(2, x) = Format(DataRange(4, 7), "mm/dd/yyyy") 'Date
                                                
                                                ' Cost Object
                                                DataSum(4, x) = DataRange(j, 1) & "/" & DataRange(j, 2) 'Cost Object Service Order
                                                DataSum(3, x) = "CS"

                                                Select Case EBAj & "," & RateType ' AA

                                                    Case "9,NT" 'White Collar Staff Weekday
                                                        DataSum(5, x) = 1002

                                                    Case "9,1.5NT"

                                                        Select Case Left(ws.Cells(7, i), 1) 'Check Staff overtime type
                                                            Case "T"
                                                                If DataRange(5, 7) <> "Night" Then
                                                                    DataSum(5, x) = 1310
                                                                Else
                                                                    DataSum(5, x) = 1311
                                                                End If
                                                            Case "O"
                                                                If DataRange(5, 7) <> "Night" Then
                                                                    If Right(ws.Cells(1, i), 1) = "C" Then
                                                                        DataSum(5, x) = 1002 'Check Overtime and Casual changed from 1010 => 1002 due to superannuation requirements
                                                                    Else
                                                                        DataSum(5, x) = 1010
                                                                    End If
                                                                Else
                                                                    DataSum(5, x) = 1130
                                                                End If
                                                            Case "N"
                                                                DataSum(5, x) = 1182
                                                            Case Else
                                                                DataSum(5, x) = 1310
                                                        End Select

                                                    Case "10,NT" 'White Collar Staff Weekday
                                                        DataSum(5, x) = 1002

                                                    Case "10,1.5NT" 'White Collar Staff Weekend

                                                        Select Case Left(ws.Cells(7, i), 1) 'Check Staff overtime type
                                                            Case "T"
                                                                If DataRange(5, 7) <> "Night" Then
                                                                    DataSum(5, x) = 1310
                                                                Else
                                                                    DataSum(5, x) = 1311
                                                                End If
                                                            Case "O"
                                                                If DataRange(5, 7) <> "Night" Then
                                                                    If Right(ws.Cells(1, i), 1) = "C" Then
                                                                        DataSum(5, x) = 1002 'Check Overtime and Casual changed from 1010 => 1002 due to superannuation requirements
                                                                    Else
                                                                        DataSum(5, x) = 1010
                                                                    End If
                                                                Else
                                                                    DataSum(5, x) = 1130
                                                                End If
                                                            Case "N"
                                                                DataSum(5, x) = 1182
                                                            Case Else
                                                                DataSum(5, x) = 1310
                                                        End Select

                                                    Case "11,NT" 'Blue Collar

                                                        Select Case DataRange(5, 7)
                                                            Case "Day"
                                                                DataSum(5, x) = 1001
                                                            Case "Afternoon"
                                                                DataSum(5, x) = 1121
                                                            Case "Night"
                                                                DataSum(5, x) = 1131
                                                            Case "Short Shift"
                                                                DataSum(5, x) = 1140
                                                        End Select

                                                End Select

                                                ' Wage Type
                                                ' PS Group
                                                ' Level
                                                'ThisWorkbook.Sheets("UploadSAP").Cells(x, 10).Value = hours 'Hours
                                                DataSum(9, x) = hours 'Hours
                                                ' Additional

                                                Select Case DataRange(5, 7) 'Shift Type

                                                    Case "Day"
                                                        If Left(ws.Cells(7, i), 1) = "O" And RateType <> "NT" And Right(ws.Cells(1, i), 1) = "C" Then 'check ovetime casual scenario
                                                            'ThisWorkbook.Sheets("UploadSAP").Cells(x, 12).Value = "SH"
                                                            DataSum(11, x) = "SH"
                                                        Else
                                                            'ThisWorkbook.Sheets("UploadSAP").Cells(x, 12).Value = "DS"
                                                            DataSum(11, x) = "DS"
                                                        End If

                                                    Case "Afternoon"
                                                         'ThisWorkbook.Sheets("UploadSAP").Cells(x, 12).Value = "AS"
                                                          DataSum(11, x) = "AS"

                                                    Case "Night"
                                                        If Left(ws.Cells(7, i), 1) = "O" And RateType <> "NT" And Right(ws.Cells(1, i), 1) = "C" Then 'check ovetime casual scenario
                                                            DataSum(11, x) = "SH"
                                                        Else
                                                            DataSum(11, x) = "NS"
                                                        End If

                                                    Case "Short Shift"
                                                        DataSum(11, x) = "SS"
                                                End Select

                                                DataSum(12, x) = ws.Cells(2, i) 'Name

                                                THB = THB + hours
                                                THR = TH - THB

                                                Debug.Print "hours"; hours
                                                Debug.Print "THB"; THB
                                                Debug.Print "THR"; THR
                                                Debug.Print "WOR"; WOR
                                                Debug.Print "EBAR"; EBAR
                                                Debug.Print "EBA End"; EBA
                                                Debug.Print "-----"
                                                x = x + 1 'add new line
                                                ReDim Preserve DataSum(13, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                            End If
                                            'Stop
                                        Loop
                                    ElseIf j >= AllowStart And DataRange(j, 3) <> "Crib" Then ' Search Allowances
                                        
                                        DataSum(0, x) = "UPLOAD" 'Profile
                                        DataSum(1, x) = DataRange(3, i) 'Payroll Number
                                        DataSum(2, x) = Format(DataRange(4, 7), "mm/dd/yyyy") 'Date

                                        If DataRange(j, 7) = "Travel" Or DataRange(j, 7) = "Meal" Then
                                            DataSum(3, x) = "CS" 'Cost Object
                                            DataSum(4, x) = DataRange(j, 1) & "/" & DataRange(j, 2) 'WBS
                                        Else
                                            DataSum(3, x) = "NA" ' Cost Object
                                        End If

                                        Select Case DataRange(j, 7)
                                            Case "LAHA"
                                                DataSum(6, x) = 2700
                                            Case "Travel"
                                                DataSum(5, x) = "Travel"
                                            Case "Crib"
                                                DataSum(5, x) = "Crib"
                                            Case "Meal"
                                                DataSum(5, x) = "Meal"
                                            Case "Annual Leave"
                                                DataSum(5, x) = "5100"
                                            Case "Sick Leave"
                                                DataSum(5, x) = "5200"
                                            Case "Leave Without Pay"
                                                DataSum(5, x) = "5690"
                                            Case "Parental Leave"
                                                DataSum(5, x) = "5625"
                                            Case "Toil Taken"
                                                DataSum(5, x) = "5677"
                                        End Select

                                        ' Wage Type
                                        ' PS Group
                                        ' Level
                                        DataSum(9, x) = DataRange(j, i) ' **Quantity need to Check how to handle in upload**
                                        ' Additional

                                        Select Case DataRange(5, 7) 'Shift Type
                                            Case "Day"
                                                DataSum(11, x) = "DS"
                                            Case "Afternoon"
                                                DataSum(11, x) = "AS"
                                            Case "Night"
                                                DataSum(11, x) = "NS"
                                            Case "Short Shift"
                                                DataSum(11, x) = "SS"
                                        End Select

                                        DataSum(12, x) = DataRange(2, i) 'Name

                                        x = x + 1
                                        ReDim Preserve DataSum(13, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                    End If
                                End If
                            End If
                        Next j
                        EBAi = 3  'reset EBA
                        EBAt = 3
                        EBAR = Sheets("EBA").Cells(EBAj, EBAi) 'reset EBAR
                        '''''''''''''''''''' End Wages Cycle ''''''''''''''''''''
                        Else 'wages/staff selection
                        '''''''''''''''''''' Start Staff Cycle ''''''''''''''''''''
                        If Left(ws.Cells(1, i), 5) = "Staff" Then 'Set EBA for staff
                            EBAj = 9 'Staff scenario
                        Else
                            EBAj = EBAw 'Wages scenario
                        End If

                        'Load Employee
                        EmpID = DataRange(2, i)

                        'Check Dictionary for Employee
                        If Not DictHrs.Exists(EmpID) Then
                            DictHrs.Add EmpID, 0 'Create Entry with hours
                        End If

                        'Check Dictionary for EBA
                        If Not DictEBA.Exists(EmpID) Then
                            'Create initial values
                            Arr(0) = EBAi
                            Arr(1) = EBAj
                            Arr(2) = EBAt
                            Arr(3) = ThisWorkbook.Sheets("EBA").Cells(EBAj, EBAi) 'Set EBA
                            DictEBA.Add EmpID, Arr
                        Else
                            'Use existing values
                            Arr(0) = DictEBA(EmpID)(0)
                            Arr(1) = DictEBA(EmpID)(1)
                            Arr(2) = DictEBA(EmpID)(2)
                            Arr(3) = DictEBA(EmpID)(3)
                        End If

                        EBA = Sheets("EBA").Cells(DictEBA(EmpID)(1), DictEBA(EmpID)(0)) 'Initialise EBA

                        'Debug.Print arr(0)
                        'Debug.Print arr(1)
                        'Debug.Print arr(2)
                        'Debug.Print arr(3)
                        'Debug.Print DictEBA(EmpID)(0)
                        'Debug.Print DictEBA(EmpID)(1)
                        'Debug.Print DictEBA(EmpID)(2)
                        'Debug.Print DictEBA(EmpID)(3)

                        For j = WorkStart To AllowEnd 'cycle through each work order
                            If DataRange(2, i) <> "" Then
                                If DataRange(j, i) <> "" And DataRange(j, i) <> 0 Then

                                    WOH = DataRange(j, i)
                                    WOR = WOH
                                    If Left(ws.Cells(1, i), 5) = "Staff" Then
                                        DictHrs(EmpID) = DictHrs(EmpID) + WOH
                                    Else
                                        DictHrs(EmpID) = WOH
                                    End If

                                    If j <= WorkEnd Then 'Search Working Hours
                                        hours = 0
                                        Do Until WOR = 0

                                            Debug.Print "xxxxxxxxxxx"
                                            Debug.Print "---Read---"
                                            Debug.Print "Emp "; EmpID
                                            Debug.Print "DictHrs(EmpID)"; DictHrs(EmpID)
                                            Debug.Print "hours"; hours
                                            Debug.Print "WOR"; WOR
                                            Debug.Print "DictEBA EBAi"; DictEBA(EmpID)(0)
                                            Debug.Print "DictEBA EBAj"; DictEBA(EmpID)(1)
                                            Debug.Print "DictEBA EBAt"; DictEBA(EmpID)(2)
                                            Debug.Print "DictEBA EBA"; DictEBA(EmpID)(3)
                                            'Stop
                                            If DictHrs(EmpID) < DictEBA(EmpID)(3) Then
                                                hours = WOR
                                                WOR = WOR - hours
                                                'ThisWorkbook.Sheets("UploadSAP").Cells(x, 12).Value = Sheets("EBA").Cells(1, arr(2))  'Rate Type

                                            ElseIf DictHrs(EmpID) > DictEBA(EmpID)(3) Then
                                                hours = WOR - (DictHrs(EmpID) - Arr(3))
                                                WOR = Application.WorksheetFunction.Max(0, WOR - hours)
                                                'ThisWorkbook.Sheets("UploadSAP").Cells(x, 12).Value = Sheets("EBA").Cells(1, arr(2))  'Rate Type
                                                Arr(0) = Arr(0) + 1
                                                Arr(2) = Arr(2) + 1
                                                Arr(3) = ThisWorkbook.Sheets("EBA").Cells(DictEBA(EmpID)(1), Arr(0))
                                                DictEBA(EmpID) = Arr

                                                Else 'if dicthrs = EBAR
                                                hours = WOR
                                                WOR = 0
                                                'ThisWorkbook.Sheets("UploadSAP").Cells(x, 12).Value = Sheets("EBA").Cells(1, arr(2))  'Rate Type
                                                Arr(0) = Arr(0) + 1
                                                Arr(2) = Arr(2) + 1
                                                Arr(3) = ThisWorkbook.Sheets("EBA").Cells(DictEBA(EmpID)(1), Arr(0))
                                                DictEBA(EmpID) = Arr
                                            End If

                                            Debug.Print "---Write---"
                                            Debug.Print "DictHrs(EmpID)"; DictHrs(EmpID)
                                            Debug.Print "hours"; hours
                                            Debug.Print "WOR"; WOR
                                            Debug.Print "DictEBA EBAi"; DictEBA(EmpID)(0)
                                            Debug.Print "DictEBA EBAj"; DictEBA(EmpID)(1)
                                            Debug.Print "DictEBA EBAt"; DictEBA(EmpID)(2)
                                            Debug.Print "DictEBA EBA"; DictEBA(EmpID)(3)
                                            Debug.Print "xxxxxxxxxxx"
                                            'Stop

                                            'Print statements
                                            DataSum(0, x) = "UPLOAD" 'Profile
                                            DataSum(1, x) = ws.Cells(3, i) 'Payroll Number
                                            DataSum(2, x) = Format(ws.Cells(4, 7), "mm/dd/yyyy") 'Date
                                            ' Cost Object
                                            If Left(DataRange(j, 3), 3) = "WBS" Then 'Check whether WBS or Service Order
                                               DataSum(4, x) = DataRange(j, 1) 'Cost Object WBS
                                               DataSum(3, x) = "WBS"
                                            Else
                                                DataSum(4, x) = DataRange(j, 1) & "/" & DataRange(j, 2) 'Cost Object Service Order
                                                DataSum(3, x) = "CS"
                                            End If

                                            Select Case EBAj & "," & RateType ' AA

                                                Case "9,NT" 'White Collar Staff Weekday
                                                    DataSum(5, x) = 1002

                                                Case "9,1.5NT"

                                                    Select Case Left(DataRange(7, i), 1) 'Check Staff overtime type
                                                        Case "T"
                                                            If DataRange(5, 7) <> "Night" Then
                                                                DataSum(5, x) = 1310
                                                            Else
                                                                DataSum(5, x) = 1311
                                                            End If
                                                        Case "O"
                                                            If DataRange(5, 7) <> "Night" Then
                                                                If Right(ws.Cells(1, i), 1) = "C" Then
                                                                    DataSum(5, x) = 1002 'Check Overtime and Casual changed from 1010 => 1002 due to superannuation requirements
                                                                Else
                                                                    DataSum(5, x) = 1010
                                                                End If
                                                            Else
                                                                    DataSum(5, x) = 1130
                                                            End If
                                                        Case "N"
                                                            DataSum(5, x) = 1182
                                                        Case Else
                                                            DataSum(5, x) = 1310
                                                    End Select

                                                Case "10,NT" 'White Collar Staff Weekday
                                                    DataSum(5, x) = 1002

                                                Case "10,1.5NT" 'White Collar Staff Weekend

                                                    Select Case Left(ws.Cells(7, i), 1) 'Check Staff overtime type
                                                        Case "T"
                                                            If DataRange(5, 7) <> "Night" Then
                                                                DataSum(5, x) = 1310
                                                            Else
                                                                DataSum(5, x) = 1311
                                                            End If
                                                        Case "O"
                                                            If DataRange(5, 7) <> "Night" Then
                                                                If Right(ws.Cells(1, i), 1) = "C" Then
                                                                    DataSum(5, x) = 1002 'Check Overtime and Casual changed from 1010 => 1002 due to superannuation requirements
                                                                Else
                                                                    DataSum(5, x) = 1010
                                                                End If
                                                            Else
                                                                DataSum(5, x) = 1130
                                                            End If
                                                        Case "N"
                                                            DataSum(5, x) = 1182
                                                        Case Else
                                                            DataSum(5, x) = 1310
                                                    End Select

                                                Case "11,NT" 'Blue Collar

                                                    Select Case DataRange(5, 7)
                                                        Case "Day"
                                                            DataSum(5, x) = 1001
                                                        Case "Afternoon"
                                                            DataSum(5, x) = 1121
                                                        Case "Night"
                                                            DataSum(5, x) = 1131
                                                        Case "Short Shift"
                                                            DataSum(5, x) = 1140
                                                    End Select

                                            End Select

                                            ' Wage Type
                                            ' PS Group
                                            ' Level
                                            DataSum(9, x) = hours 'Hours
                                            ' Additional

                                            Select Case DataRange(5, 7) 'Shift Type

                                                Case "Day"
                                                    If Left(ws.Cells(7, i), 1) = "O" And RateType <> "NT" And Right(ws.Cells(1, i), 1) = "C" Then 'check ovetime casual scenario
                                                        'ThisWorkbook.Sheets("UploadSAP").Cells(x, 12).Value = "SH"
                                                        DataSum(11, x) = "SH"
                                                    Else
                                                        'ThisWorkbook.Sheets("UploadSAP").Cells(x, 12).Value = "DS"
                                                        DataSum(11, x) = "DS"
                                                    End If

                                                Case "Afternoon"
                                                    'ThisWorkbook.Sheets("UploadSAP").Cells(x, 12).Value = "AS"
                                                        DataSum(11, x) = "AS"

                                                Case "Night"
                                                    If Left(ws.Cells(7, i), 1) = "O" And RateType <> "NT" And Right(ws.Cells(1, i), 1) = "C" Then 'check ovetime casual scenario
                                                        'ThisWorkbook.Sheets("UploadSAP").Cells(x, 12).Value = "SH"
                                                        DataSum(11, x) = "SH"
                                                    Else
                                                        'ThisWorkbook.Sheets("UploadSAP").Cells(x, 12).Value = "NS"
                                                        DataSum(11, x) = "NS"
                                                    End If

                                                Case "Short Shift"
                                                       'ThisWorkbook.Sheets("UploadSAP").Cells(x, 12).Value = "SS"
                                                        DataSum(11, x) = "SS"
                                            End Select

                                           DataSum(12, x) = DataRange(2, i) 'Name

                                            'Debug.Print "hours"; hours
                                            'Debug.Print "THB"; THB
                                            'Debug.Print "THR"; THR
                                            'Debug.Print "WOR"; WOR
                                            'Debug.Print "EBAR"; EBAR
                                            'Debug.Print "EBA End"; EBA
                                            'Debug.Print "-----"
                                            x = x + 1 'add new line
                                            ReDim Preserve DataSum(13, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                        Loop
                                        
                                    ElseIf j >= AllowStart And DataRange(j, 7) <> "Crib" Then ' Search Allowances
                                        DataSum(0, x) = "UPLOAD" 'Profile
                                        DataSum(1, x) = DataRange(3, i) 'Payroll Number
                                        DataSum(2, x) = Format(DataRange(4, 7), "mm/dd/yyyy") 'Date
                                        
                                        If DataRange(j, 7) = "Travel" Or DataRange(j, 7) = "Meal" Then

                                             DataSum(3, x) = "CS" 'Cost Object
                                             DataSum(4, x) = DataRange(j, 1) & "/" & DataRange(j, 2) 'WBS
                                        Else
                                            DataSum(3, x) = "NA" ' Cost Object
                                        End If

                                        Select Case DataRange(j, 7)
                                            Case "LAHA"
                                                DataSum(6, x) = "2700"
                                            Case "Travel"
                                                DataSum(5, x) = "Travel"
                                            Case "Crib"
                                                DataSum(5, x) = "Crib"
                                            Case "Meal"
                                                DataSum(5, x) = "Meal"
                                            Case "Annual Leave"
                                                DataSum(5, x) = "5100"
                                            Case "Sick Leave"
                                                DataSum(5, x) = "5200"
                                            Case "Leave Without Pay"
                                                DataSum(5, x) = "5690"
                                            Case "Parental Leave"
                                                DataSum(5, x) = "5625"
                                            Case "Toil Taken"
                                                DataSum(5, x) = "5677"
                                            Case "Tool Allowance"
                                                DataSum(6, x) = "2105"
                                        End Select

                                        ' Wage Type
                                        ' PS Group
                                        ' Level
                                        'ThisWorkbook.Sheets("UploadSAP").Cells(x, 10).Value = ws.Cells(j, i) ' **Quantity need to Check how to handle in upload**
                                        DataSum(9, x) = DataRange(j, i)
                                        ' Additional

                                        Select Case DataRange(5, 7) 'Shift Type
                                            Case "Day"
                                                DataSum(11, x) = "DS"
                                            Case "Afternoon"
                                                DataSum(11, x) = "AS"
                                            Case "Night"
                                                DataSum(11, x) = "NS"
                                            Case "Short Shift"
                                                DataSum(11, x) = "SS"
                                        End Select

                                        DataSum(12, x) = DataRange(2, i) 'Name

                                        x = x + 1
                                        ReDim Preserve DataSum(13, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                    End If
                                End If
                            End If
                        Next j
                        EBAi = 3  'reset EBA
                        EBAt = 3
                        EBAR = Sheets("EBA").Cells(EBAj, EBAi) 'reset EBAR
                        '''''''''''''''''''' End Staff Cycle ''''''''''''''''''''
                    End If 'End wages/staff selection
                Next i

            End If
        SheetTotal = SheetTotal + 1
        End If
    Application.StatusBar = "Extracting Data... " & ws.name
    Next ws
    
        '''''''''''''''''''' End Pull Data ''''''''''''''''''''
        ThisWorkbook.Sheets(NameSh).Cells(k, 15) = file_name
        ThisWorkbook.Sheets(NameSh).Cells(k, 16) = SheetTotal
        k = k + 1

        Workbooks(file_name).Close savechanges:=False 'Close the workbook that's just been opened
        file_name = Dir() 'continue to next file

        'remove dictionaries
        DictHrs.RemoveAll
        DictEBA.RemoveAll

    Loop
    '''''''''''''''''''' End Workbook Identification ''''''''''''''''''''

    If x > 0 Then ThisWorkbook.Sheets("UploadSAP").Range("A4:M" & x + 3) = Application.WorksheetFunction.Transpose(DataSum)

    TimeRun = Format((Timer - TimeStart) / 86400, "hh:mm:ss")
    MsgBox (k - (SumCount + 1) & " Timesheets Extracted Successfully" & vbCrLf & "Time Taken " & TimeRun), , "Performance"

    Application.ScreenUpdating = True
    Application.StatusBar = False
    Application.EnableEvents = True
    ActiveSheet.Protect

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub
Sub ClearAll()

On Error GoTo SafeExit

    Dim RowCount As Integer

    RowCount = ActiveSheet.Range("A" & Rows.Count).End(xlUp).Row 'Determine the number of rows

    If RowCount > 3 Then
        ActiveSheet.Range("A4:S" & RowCount).ClearContents
    End If

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub
Sub ClearHours(control As IRibbonControl)

On Error GoTo SafeExit

    Dim i, RowCount, DataStartRow, DataFinishCol As Integer
    
    'NINAEDIT - TEST CRITICAL ERROR MESSAGE
    intUserOption = MsgBox("WARNING! This will delete the hours already populated in the entire worksheet, Are you sure your want to proceed?", vbYesNoCancel + vbCritical)
    If intUserOption = 7 Then Exit Sub
    If intUserOption = 2 Then Exit Sub
    
    Select Case ActiveSheet.name
    
    Case "TimeTemplate", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"
    
    Application.ScreenUpdating = False
    
    DataStartRow = Application.WorksheetFunction.Match("ALLOWANCES", ActiveSheet.Range("A:A"), 0) - 1
    DataFinishCol = Application.WorksheetFunction.Match("EmpEnd", ActiveSheet.Range("1:1"), 0) - 1
    RowCount = ActiveSheet.Range("A" & Rows.Count).End(xlUp).Row - 8

    SignUnprotect
    ActiveSheet.Range(ActiveSheet.Cells(11, 9), ActiveSheet.Cells(DataStartRow, DataFinishCol)).ClearContents 'Clear Hours Worked
    ActiveSheet.Range(ActiveSheet.Cells(DataStartRow + 3, 9), ActiveSheet.Cells(RowCount, DataFinishCol)).ClearContents 'Clear Allowances

'    For Each Cell In Sheets("TimeTemplate").UsedRange
'        If Cell.Interior.Color = RGB(255, 255, 204) And Cell.MergeCells = False Then ' Pale Yellow Cells
'           Cell.ClearContents
'        End If
'    Next
    
    SignProtect
    Application.ScreenUpdating = True
    End Select

        Application.EnableEvents = True
        Application.ScreenUpdating = True

Exit Sub

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        Application.StatusBar = "Sub Clearhours" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Function GetFolder() As String 'select folder and put it into the cell

On Error GoTo SafeExit

    Dim fldr As FileDialog
    Dim sItem As String
    Set fldr = Application.FileDialog(msoFileDialogFolderPicker)
    With fldr
        .Title = "Select a Folder"
        .AllowMultiSelect = False
        .InitialFileName = Application.DefaultFilePath
        If .Show <> -1 Then GoTo NextCode
        sItem = .SelectedItems(1)
    End With
NextCode:
    GetFolder = sItem
    ActiveSheet.Cells(1, 5).Value = sItem
    Set fldr = Nothing

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Function
Sub TimeSelect(control As IRibbonControl)

On Error GoTo SafeExit
    
    If Left(ThisWorkbook.Sheets("Summary").Cells(1, 15), 5) = "Admin" Then 'only allow save feature for admin workbook
        UserForm8.Show
    Else
        MsgBox ("Administration function only")
    End If
    
Exit Sub

SafeExit:
        Application.StatusBar = "Sub TimeSelect" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Function getfile(TypeSelect As String, DaySelect As Date, SDay As Integer) As String 'select folder and put it into the cell Type=Day or Weekly / Dayselect=Day or Week Starting Sday / Sday = Payroll start
    On Error GoTo getfile_error

    Dim filesave As FileDialog
    Dim strPath, filename, ModuleName, ClassName, Tempfile, TempClass As String
    Dim wbk As Workbook
    Dim NumLines As Integer
    Dim SDate As Date
    Dim pass As String
    Dim DSel As Variant
       
    pass = "TimeAdmin#"
    
    TempData.UsedRange.Clear
    Set filesave = Application.FileDialog(msoFileDialogSaveAs)
    
    Application.ScreenUpdating = False
    Application.Calculation = False
    
    With filesave
        If TypeSelect = "Week" Then
            .InitialFileName = Format(DaySelect, "yyyy-mm-dd ") & "Timesheet Weekly.xlsm"
        Else
            .InitialFileName = Format(DaySelect, "yyyy-mm-dd ") & "Timesheet Daily.xlsm"
        End If
        
        .Title = "Save As"
        .FilterIndex = 2
        
        If .Show <> 0 Then
            If TimeTemplate.Visible = False Then TimeTemplate.Visible = True
            Application.StatusBar = "Exporting Timesheet..."
            
            strPath = .SelectedItems(1)
            ActiveWorkbook.SaveCopyAs strPath
           
            Application.DisplayAlerts = False
                        
            Set wbk = Workbooks.Open(strPath)
            wbk.Activate
                       
            With wbk
            .Sheets("Test 1").Delete
            .Sheets("MasterTimeTemplate").Delete
            .Sheets("FGDataPivot").Delete
            .Sheets("BlankTables").Delete
            .Sheets("DraftTimeSheets").Delete
            .Sheets("FieldGlassData").Delete
            .Sheets("FieldGlassFinal").Delete
            .Sheets("WorkTime").Delete
            .Sheets("GateReconcile").Delete
            .Sheets("GateTime").Delete
            
            If TypeSelect = "Week" Then
            
            Select Case SDay
            
                Case 1
                DSel = Array("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat")
                
                Case 2
                DSel = Array("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
                
                Case 3
                DSel = Array("Tue", "Wed", "Thu", "Fri", "Sat", "Sun", "Mon")
                
                Case 4
                DSel = Array("Wed", "Thu", "Fri", "Sat", "Sun", "Mon", "Tue")
                
                Case 5
                DSel = Array("Thu", "Fri", "Sat", "Sun", "Mon", "Tue", "Wed")
                
                Case 6
                DSel = Array("Fri", "Sat", "Sun", "Mon", "Tue", "Wed", "Thu")
                
                Case 7
                DSel = Array("Sat", "Sun", "Mon", "Tue", "Wed", "Thu", "Fri")
            
            End Select
            
            .Sheets("Mon").Delete
            .Sheets("Tue").Delete
            .Sheets("Wed").Delete
            .Sheets("Thu").Delete
            .Sheets("Fri").Delete
            .Sheets("Sat").Delete
            .Sheets("Sun").Delete
            
            .Sheets("TimeTemplate").Copy Before:=.Sheets(1)
            .Sheets("TimeTemplate").Copy Before:=.Sheets(1)
            .Sheets("TimeTemplate").Copy Before:=.Sheets(1)
            .Sheets("TimeTemplate").Copy Before:=.Sheets(1)
            .Sheets("TimeTemplate").Copy Before:=.Sheets(1)
            .Sheets("TimeTemplate").Copy Before:=.Sheets(1)
            .Sheets("TimeTemplate").Copy Before:=.Sheets(1)
            
            If .Sheets("TimeTemplate").Visible = False Then .Sheets("TimeTemplate").Visible = True
            If .Sheets("TimeTemplate (2)").Visible = False Then .Sheets("TimeTemplate (2)").Visible = True
            If .Sheets("TimeTemplate (3)").Visible = False Then .Sheets("TimeTemplate (3)").Visible = True
            If .Sheets("TimeTemplate (4)").Visible = False Then .Sheets("TimeTemplate (4)").Visible = True
            If .Sheets("TimeTemplate (5)").Visible = False Then .Sheets("TimeTemplate (5)").Visible = True
            If .Sheets("TimeTemplate (6)").Visible = False Then .Sheets("TimeTemplate (6)").Visible = True
            If .Sheets("TimeTemplate (7)").Visible = False Then .Sheets("TimeTemplate (7)").Visible = True
            If .Sheets("TimeTemplate (8)").Visible = False Then .Sheets("TimeTemplate (8)").Visible = True
            
            .Sheets("TimeTemplate").Visible = False
            .Sheets("TimeTemplate (2)").name = DSel(6) '7   2
            .Sheets("TimeTemplate (3)").name = DSel(5) '8   3
            .Sheets("TimeTemplate (4)").name = DSel(4) '2   4
            .Sheets("TimeTemplate (5)").name = DSel(3) '3   5
            .Sheets("TimeTemplate (6)").name = DSel(2) '4   6
            .Sheets("TimeTemplate (7)").name = DSel(1) '5   7
            .Sheets("TimeTemplate (8)").name = DSel(0) '6   8

            .Sheets(DSel(0)).Protect Password:=pass, UserInterfaceOnly:=True
            .Sheets(DSel(1)).Protect Password:=pass, UserInterfaceOnly:=True
            .Sheets(DSel(2)).Protect Password:=pass, UserInterfaceOnly:=True
            .Sheets(DSel(3)).Protect Password:=pass, UserInterfaceOnly:=True
            .Sheets(DSel(4)).Protect Password:=pass, UserInterfaceOnly:=True
            .Sheets(DSel(5)).Protect Password:=pass, UserInterfaceOnly:=True
            .Sheets(DSel(6)).Protect Password:=pass, UserInterfaceOnly:=True
            
            'NINAEDIT - getting saturday as first day of the week
            
'            If .Sheets("Sat").Cells(4, 7) = "" Then
'                With .Sheets("Sat").Cells(4, 7)
'                    .FormulaR1C1 = "=NOW()-WEEKDAY(NOW(),2) + 6"
'                    .Value = .Value
'                End With
'            Else
'                    SDate = .Sheets("Sat").Cells(4, 7)
'                    .Sheets("Sat").Cells(4, 7) = SDate - Weekday(SDate, 2) + 6
'            End If
            
            .Sheets(DSel(0)).Cells(4, 7) = DaySelect
            .Sheets(DSel(0)).Protect Password:=pass, DrawingObjects:=False, Contents:=True, Scenarios:=True
            
            .Sheets(DSel(1)).Activate
            .Sheets(DSel(1)).Cells(4, 7).FormulaR1C1 = "=IF(" & DSel(0) & "!RC="""",""""," & DSel(0) & "!RC+1)"
            .Sheets(DSel(1)).Cells(4, 7).Locked = True
            .Sheets(DSel(1)).Protect Password:=pass, DrawingObjects:=True, Contents:=True, Scenarios:=True

            .Sheets(DSel(2)).Activate
            .Sheets(DSel(2)).Cells(4, 7).FormulaR1C1 = "=IF(" & DSel(0) & "!RC="""",""""," & DSel(0) & "!RC+2)"
            .Sheets(DSel(2)).Cells(4, 7).Locked = True
            .Sheets(DSel(2)).Protect Password:=pass, DrawingObjects:=True, Contents:=True, Scenarios:=True

            .Sheets(DSel(3)).Activate
            .Sheets(DSel(3)).Cells(4, 7).FormulaR1C1 = "=IF(" & DSel(0) & "!RC="""",""""," & DSel(0) & "!RC+3)"
            .Sheets(DSel(3)).Cells(4, 7).Locked = True
            .Sheets(DSel(3)).Protect Password:=pass, DrawingObjects:=True, Contents:=True, Scenarios:=True

            .Sheets(DSel(4)).Activate
            .Sheets(DSel(4)).Cells(4, 7).FormulaR1C1 = "=IF(" & DSel(0) & "!RC="""",""""," & DSel(0) & "!RC+4)"
            .Sheets(DSel(4)).Cells(4, 7).Locked = True
            .Sheets(DSel(4)).Protect Password:=pass, DrawingObjects:=True, Contents:=True, Scenarios:=True

            .Sheets(DSel(5)).Activate
            .Sheets(DSel(5)).Cells(4, 7).FormulaR1C1 = "=IF(" & DSel(0) & "!RC="""",""""," & DSel(0) & "!RC+5)"
            .Sheets(DSel(5)).Cells(4, 7).Locked = True
            .Sheets(DSel(5)).Protect Password:=pass, DrawingObjects:=True, Contents:=True, Scenarios:=True
            
            .Sheets(DSel(6)).Activate
            .Sheets(DSel(6)).Cells(4, 7).FormulaR1C1 = "=IF(" & DSel(0) & "!RC="""",""""," & DSel(0) & "!RC+6)"
            .Sheets(DSel(6)).Cells(4, 7).Locked = True
            .Sheets(DSel(6)).Protect Password:=pass, DrawingObjects:=True, Contents:=True, Scenarios:=True
            
            Else
            .Sheets(TypeSelect).Delete
            .Sheets("TimeTemplate").name = TypeSelect
            
            End If
            
            .Sheets("Summary").Unprotect
            .Sheets("Summary").Shapes.Range(Array("ButtonFolder")).Delete
            .Sheets("Summary").Shapes.Range(Array("Button 5")).Delete
            .Sheets("Summary").Shapes.Range(Array("Check Box 4")).Delete
            .Sheets("Summary").Cells(1, 5).ClearContents
            .Sheets("Summary").Range("D1:J1").FillLeft
            .Sheets("Summary").Range("Y:Z").Clear
            .Sheets("Summary").Cells(1, 4) = 1
            .Sheets("Summary").Cells(1, 4).Font.Color = RGB(217, 225, 242)
            .Sheets("Summary").Cells(1, 15) = "Rev 7.6" 'Timesheet Revision
            .Sheets("Summary").Protect
            
            .Sheets("SummaryEBA").Unprotect
            .Sheets("SummaryEBA").Shapes.Range(Array("ButtonFolder")).Delete
            .Sheets("SummaryEBA").Cells(1, 5).ClearContents
            .Sheets("SummaryEBA").Range("D1:J1").FillLeft
            .Sheets("SummaryEBA").Range("R:S").Clear
            .Sheets("SummaryEBA").Cells(1, 4) = 1
            .Sheets("SummaryEBA").Cells(1, 4).Font.Color = RGB(217, 225, 242)
            .Sheets("SummaryEBA").Protect
            .Sheets("SummaryEBA").Visible = False

            .Sheets("UploadSAP").Unprotect
            .Sheets("UploadSAP").Shapes.Range(Array("ButtonFolder")).Delete
            .Sheets("UploadSAP").Shapes.Range(Array("Check Box 5")).Delete
            .Sheets("UploadSAP").Shapes.Range(Array("Check Box 6")).Delete
            .Sheets("UploadSAP").Cells(1, 5).ClearContents
            .Sheets("UploadSAP").Range("D1:J1").FillLeft
            .Sheets("UploadSAP").Range("O:P").Clear
            .Sheets("UploadSAP").Cells(1, 4) = 1
            .Sheets("UploadSAP").Cells(1, 4).Font.Color = RGB(217, 225, 242)
            .Sheets("UploadSAP").Protect
            .Sheets("UploadSAP").Visible = False
            
            If .Sheets("ReportData").Visible = True Then .Sheets("ReportData").Visible = False
            
            'wb.Application.Run (Application.ActiveWorkbook.Name & "!RemExt")
            'wb.Application.Run (Application.ActiveWorkbook.Name & "!AssignMacro")
            
            If TypeSelect = "Week" Then
                .Sheets(DSel(0)).Select
            Else
                .Sheets(TypeSelect).Select
                .Sheets(TypeSelect).Cells(4, 7) = DaySelect
            End If
            
            wbk.Close savechanges:=True
            Application.StatusBar = False
            MsgBox "New Timesheet Template Saved Successfully" & vbCrLf & strPath, , "Timesheet"
            End With
        End If
    
    End With
    
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True
    Application.Calculation = True
    
    Exit Function

getfile_error:
    Application.StatusBar = "Function GetFile" & ", " & Err.Number & ", " & Err.Description
    On Error GoTo 0

End Function

Function SAPFileSave()
On Error GoTo getfile_error

    Dim filesave As FileDialog
    Dim strPath, filename As String
    Dim r, c As Integer
    Dim wb As Workbook
    Dim Arr() As Variant

    r = DataUpload.UsedRange.Rows.Count

    If r < 4 Then
    MsgBox "No Data Available To Upload"
    Else
    Set filesave = Application.FileDialog(msoFileDialogSaveAs)
        
     Application.ScreenUpdating = False
    
     With filesave
        .InitialFileName = Format(Now(), "yyyy-mm-dd ") & "SAP Upload.xlsx"
        .Title = "Save As"
        .FilterIndex = 1
        If .Show <> 0 Then
            
            strPath = .SelectedItems(1)
            Application.DisplayAlerts = False
            Set wb = Workbooks.Add
            
            Arr = DataUpload.Range(DataUpload.Cells(3, 1), DataUpload.Cells(r, 13))
            
            wb.Sheets(1).Range(wb.Sheets(1).Cells(1, 1), wb.Sheets(1).Cells(r - 2, 13)) = Arr
            
            
            'NINAEDIT
            lRow = wb.Sheets(1).Cells(Rows.Count, 1).End(xlUp).Row
            Columns("C:C").Select
            Selection.Copy
            Columns("N:N").Select
            ActiveSheet.Paste
            Application.CutCopyMode = False
            Selection.TextToColumns Destination:=Range("O1"), DataType:=xlDelimited, _
                TextQualifier:=xlDoubleQuote, ConsecutiveDelimiter:=False, Tab:=False, _
                Semicolon:=False, Comma:=False, Space:=False, Other:=True, OtherChar _
                :="/", FieldInfo:=Array(Array(1, 1), Array(2, 1), Array(3, 1)), _
                TrailingMinusNumbers:=True
            Range("R2").Select
            Application.CutCopyMode = False
            ActiveCell.FormulaR1C1 = "=RC[-2]&"".""&RC[-3]&"".""&RC[-1]"
            Range("R2").Select
            Selection.AutoFill Destination:=Range("R2:R" & lRow)
            Range("R2:R" & lRow).Select
            Selection.Copy
            Range("C2").Select
            Selection.PasteSpecial Paste:=xlPasteValues, operation:=xlNone, SkipBlanks _
                :=False, Transpose:=False
            Columns("N:R").Select
            Application.CutCopyMode = False
            Selection.ClearContents
            Range("O7").Select
            
            
            wb.SaveAs strPath
            wb.Close
            
            Application.DisplayAlerts = True
        End If
    End With
    
    End If
    Application.ScreenUpdating = True
Exit Function

getfile_error:
    MsgBox ("The following error occurred (" & Err.Number & "):" & vbCrLf & Err.Description)
    On Error GoTo 0

End Function
Function SummaryFileSave()
On Error GoTo getfile_error

    Dim filesave As FileDialog
    Dim strPath, filename As String
    Dim r, c As Integer
    Dim wb As Workbook
    Dim Arr() As Variant

    r = DataSum.UsedRange.Rows.Count

    If r < 4 Then
    MsgBox "No Data Available To Upload"
    Else
    Set filesave = Application.FileDialog(msoFileDialogSaveAs)
        
     Application.ScreenUpdating = False
    
     With filesave
        .InitialFileName = Format(Now(), "yyyy-mm-dd ") & "TimeData.xlsx"
        .Title = "Save As"
        .FilterIndex = 1
        If .Show <> 0 Then
            
            strPath = .SelectedItems(1)
            Application.DisplayAlerts = False
            Set wb = Workbooks.Add
            
            Arr = DataSum.Range(DataSum.Cells(3, 1), DataSum.Cells(r, 22))
            wb.Sheets(1).Range(wb.Sheets(1).Cells(1, 1), wb.Sheets(1).Cells(r - 2, 22)) = Arr
            
            wb.SaveAs strPath
            wb.Close
            
            Application.DisplayAlerts = True
        End If
    End With
    
    End If
    Application.ScreenUpdating = True
Exit Function

getfile_error:
    MsgBox ("The following error occurred (" & Err.Number & "):" & vbCrLf & Err.Description)
    On Error GoTo 0

End Function
Function getfile_old(control As IRibbonControl) As String 'select folder and put it into the cell
    On Error GoTo getfile_error

    Dim filesave As FileDialog
    Dim strPath, filename, ModuleName, ClassName, Tempfile, TempClass As String
    Dim wb As Workbook
    Dim NumLines As Integer
    Dim SDate As Date

    ModuleName = "Module3"
    ClassName = "Module4"
    Tempfile = ActiveWorkbook.Path & "\Module3.bas"
    TempClass = ActiveWorkbook.Path & "\Module4.txt"

    Set filesave = Application.FileDialog(msoFileDialogSaveAs)

    Application.ScreenUpdating = False

    With filesave
        .InitialFileName = Format(Now(), "yyyy-mm-dd ") & "Timesheet.xlsm"
        .Title = "Save As"
        .FilterIndex = 2
        If .Show <> 0 Then

            strPath = .SelectedItems(1)
            
            Application.DisplayAlerts = False
            Set wb = Workbooks.Add
            Set CodeCopy = ThisWorkbook.VBProject.VBComponents(ClassName).CodeModule
            NumLines = CodeCopy.CountOfLines


            ThisWorkbook.Sheets("EBA").Copy Before:=wb.Sheets(1)
            ThisWorkbook.Sheets("DataOps").Copy Before:=wb.Sheets(1)
            ThisWorkbook.Sheets("DataAllow").Copy Before:=wb.Sheets(1)
            ThisWorkbook.Sheets("DataCustomerOrder").Copy Before:=wb.Sheets(1)
            ThisWorkbook.Sheets("DataInternalOrder").Copy Before:=wb.Sheets(1)
            ThisWorkbook.Sheets("DataCustomerPO").Copy Before:=wb.Sheets(1) 'new sheets 15/10/2018 NJM
            ThisWorkbook.Sheets("ComboLookup").Copy Before:=wb.Sheets(1) 'new sheets 15/10/2018 NJM
            ThisWorkbook.Sheets("Platform").Copy Before:=wb.Sheets(1) 'new sheets 15/10/2018 NJM
            ThisWorkbook.Sheets("Employee").Copy Before:=wb.Sheets(1)
            ThisWorkbook.Sheets("UploadSAP").Copy Before:=wb.Sheets(1)
            ThisWorkbook.Sheets("SummaryEBA").Copy Before:=wb.Sheets(1)
            ThisWorkbook.Sheets("Summary").Copy Before:=wb.Sheets(1)
            ThisWorkbook.Sheets("TimeTemplate").Copy Before:=wb.Sheets(1)
            ThisWorkbook.Sheets("TimeTemplate").Copy Before:=wb.Sheets(1)
            ThisWorkbook.Sheets("TimeTemplate").Copy Before:=wb.Sheets(1)
            ThisWorkbook.Sheets("TimeTemplate").Copy Before:=wb.Sheets(1)
            ThisWorkbook.Sheets("TimeTemplate").Copy Before:=wb.Sheets(1)
            ThisWorkbook.Sheets("TimeTemplate").Copy Before:=wb.Sheets(1)
            ThisWorkbook.Sheets("TimeTemplate").Copy Before:=wb.Sheets(1)

            ThisWorkbook.VBProject.VBComponents(ModuleName).Export Tempfile

            wb.VBProject.VBComponents.Import Tempfile
            wb.VBProject.VBComponents.item("ThisWorkbook").CodeModule.AddFromString CodeCopy.Lines(1, NumLines)

            If wb.Sheets("TimeTemplate").Visible = False Then wb.Sheets("TimeTemplate").Visible = True
            If wb.Sheets("TimeTemplate (2)").Visible = False Then wb.Sheets("TimeTemplate (2)").Visible = True
            If wb.Sheets("TimeTemplate (3)").Visible = False Then wb.Sheets("TimeTemplate (3)").Visible = True
            If wb.Sheets("TimeTemplate (4)").Visible = False Then wb.Sheets("TimeTemplate (4)").Visible = True
            If wb.Sheets("TimeTemplate (5)").Visible = False Then wb.Sheets("TimeTemplate (5)").Visible = True
            If wb.Sheets("TimeTemplate (6)").Visible = False Then wb.Sheets("TimeTemplate (6)").Visible = True
            If wb.Sheets("TimeTemplate (7)").Visible = False Then wb.Sheets("TimeTemplate (7)").Visible = True

            wb.Sheets("TimeTemplate").name = "Sun"
            wb.Sheets("TimeTemplate (2)").name = "Sat"
            wb.Sheets("TimeTemplate (3)").name = "Fri"
            wb.Sheets("TimeTemplate (4)").name = "Thu"
            wb.Sheets("TimeTemplate (5)").name = "Wed"
            wb.Sheets("TimeTemplate (6)").name = "Tue"
            wb.Sheets("TimeTemplate (7)").name = "Mon"

            wb.Sheets("Mon").Protect UserInterfaceOnly:=True
            wb.Sheets("Tue").Protect UserInterfaceOnly:=True
            wb.Sheets("Wed").Protect UserInterfaceOnly:=True
            wb.Sheets("Thu").Protect UserInterfaceOnly:=True
            wb.Sheets("Fri").Protect UserInterfaceOnly:=True
            wb.Sheets("Sat").Protect UserInterfaceOnly:=True
            wb.Sheets("Sun").Protect UserInterfaceOnly:=True

            If wb.Sheets("Mon").Cells(4, 6) = "" Then
                With wb.Sheets("Mon").Cells(4, 6)
                    .FormulaR1C1 = "=NOW()-WEEKDAY(NOW(),2)+1"
                    .Value = .Value
                End With
            Else
                SDate = wb.Sheets("Mon").Cells(4, 6)
                wb.Sheets("Mon").Cells(4, 6) = SDate - Weekday(SDate, 2) + 1
            End If

            wb.Sheets("Mon").Protect DrawingObjects:=True, Contents:=True, Scenarios:=True

            wb.Sheets("Tue").Cells(4, 6).FormulaR1C1 = "=IF(Mon!RC="""","""",Mon!RC+1)"
            wb.Sheets("Tue").Cells(4, 6).Locked = True
            wb.Sheets("Tue").Protect DrawingObjects:=True, Contents:=True, Scenarios:=True

            wb.Sheets("Wed").Cells(4, 6).FormulaR1C1 = "=IF(Mon!RC="""","""",Mon!RC+2)"
            wb.Sheets("Wed").Cells(4, 6).Locked = True
            wb.Sheets("Wed").Protect DrawingObjects:=True, Contents:=True, Scenarios:=True

            wb.Sheets("Thu").Cells(4, 6).FormulaR1C1 = "=IF(Mon!RC="""","""",Mon!RC+3)"
            wb.Sheets("Thu").Cells(4, 6).Locked = True
            wb.Sheets("Thu").Protect DrawingObjects:=True, Contents:=True, Scenarios:=True

            wb.Sheets("Fri").Cells(4, 6).FormulaR1C1 = "=IF(Mon!RC="""","""",Mon!RC+4)"
            wb.Sheets("Fri").Cells(4, 6).Locked = True
            wb.Sheets("Fri").Protect DrawingObjects:=True, Contents:=True, Scenarios:=True

            wb.Sheets("Sat").Cells(4, 6).FormulaR1C1 = "=IF(Mon!RC="""","""",Mon!RC+5)"
            wb.Sheets("Sat").Cells(4, 6).Locked = True
            wb.Sheets("Sat").Protect DrawingObjects:=True, Contents:=True, Scenarios:=True

            wb.Sheets("Sun").Cells(4, 6).FormulaR1C1 = "=IF(Mon!RC="""","""",Mon!RC+6)"
            wb.Sheets("Sun").Cells(4, 6).Locked = True
            wb.Sheets("Sun").Protect DrawingObjects:=True, Contents:=True, Scenarios:=True

            wb.Sheets("Summary").Shapes.Range(Array("ButtonFolder")).Delete
            wb.Sheets("Summary").Range("D1:E1").ClearContents
            wb.Sheets("Summary").Range("D1:J1").FillLeft
            wb.Sheets("Summary").Columns("Q:R").Delete Shift:=xlToLeft
            wb.Sheets("Summary").Cells(1, 4) = 1

            wb.Sheets("SummaryEBA").Shapes.Range(Array("ButtonFolder")).Delete
            wb.Sheets("SummaryEBA").Range("D1:E1").ClearContents
            wb.Sheets("SummaryEBA").Range("D1:J1").FillLeft
            wb.Sheets("SummaryEBA").Columns("R:S").Delete Shift:=xlToLeft
            wb.Sheets("SummaryEBA").Cells(1, 4) = 1

            wb.Sheets("UploadSAP").Shapes.Range(Array("ButtonFolder")).Delete
            wb.Sheets("UploadSAP").Range("D1:E1").ClearContents
            wb.Sheets("UploadSAP").Range("D1:J1").FillLeft
            wb.Sheets("UploadSAP").Columns("O:P").Delete Shift:=xlToLeft
            wb.Sheets("UploadSAP").Cells(1, 4) = 1

            'wb.Sheets("Sheet1").Delete
            wb.Sheets("Mon").Select
            
            wb.Application.Run (Application.ActiveWorkbook.name & "!RemExt")
            wb.Application.Run (Application.ActiveWorkbook.name & "!AssignMacro")

            wb.SaveAs strPath, ThisWorkbook.FileFormat
            wb.Close

            Kill Tempfile
            MsgBox ("New Timesheet Template Saved Successfully" & vbCrLf & strPath)

        End If
    End With
    
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True

    Exit Function

getfile_error:
    MsgBox ("The following error occurred (" & Err.Number & "):" & vbCrLf & Err.Description)
    On Error GoTo 0
    
End Function
Public Function Nz(ByVal Value, Optional ByVal ValueIfNull = "")

On Error GoTo SafeExit

    Nz = IIf(IsNull(Value), ValueIfNull, Value)

SafeExit:
        On Error GoTo 0

End Function

Function Gatefile(control As IRibbonControl) As String 'select folder and put it into the cell

    On Error GoTo getfile_error

    Dim fileselect As FileDialog
    Dim strPath, filename, ModuleName, ClassName, Tempfile, TempClass As String
    Dim wb As Workbook
    Dim NumLines As Integer
    Dim SDate As Date

    Set fileselect = Application.FileDialog(msoFileDialogOpen)

    With fileselect
        .Title = "Select File"
        .InitialFileName = ""
        .AllowMultiSelect = False
        If .Show <> 0 Then
            strPath = .SelectedItems(1)
            Range("GateData").Value = strPath
        Else
            Range("GateData").Value = "<Enter Filename>"
        End If

    End With

    Exit Function

getfile_error:
    Application.StatusBar = "Function GateFile" & ", " & Err.Number & ", " & Err.Description
    On Error GoTo 0

End Function

Sub FieldGlassData()

On Error GoTo SafeExit

    Dim x, i, j, k, Col, RowCount, FileTotal, FileCount, SheetTotal, DataCount, SumCount As Integer
    Dim EBAj, EBAi, EBAt, EBAw As Integer
    Dim EBA, TH, THR, THB, WOH, WOR, EBAR, TimeStart As Double
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim day As Date
    Dim NameSh, TimeRun As String
    Dim Shift As Variant
    Dim DictHrs As New Scripting.Dictionary
    Dim DictEBA As New Scripting.Dictionary
    Dim EmpID As String
    Dim Arr(0 To 3) As Long

    TimeStart = Timer
    NameSh = "FieldGlassData"

    If FolderCheck(NameSh) = True Then 'check if file path is the same as extraction path
        MsgBox "The Timesheet Consolidate Tool cannot be operated in the same folder as the timesheets they are extracting. Please move the Timesheet Consolidate Tool and try again."
        Exit Sub
    End If

    DataCount = ThisWorkbook.Sheets(NameSh).Range("A" & Rows.Count).End(xlUp).Row 'used to append data not over write in data summary
    SumCount = ThisWorkbook.Sheets(NameSh).Range("R" & Rows.Count).End(xlUp).Row

    x = DataCount + 1
    k = SumCount + 1

    Application.ScreenUpdating = False 'Process optimisation
    Application.EnableEvents = False

    '''''''''''''''''''' Start Workbook Identification ''''''''''''''''''''
    folder_path = Range("E1") & "\" 'Correction to folder path format
    file_name = Dir(folder_path) 'set file path

    If ThisWorkbook.Sheets(NameSh).Range("E1") = "" Then
        MsgBox "Please select the folder location for the timesheets you wish to extract before extracting."
        Exit Sub
    End If

    Do While file_name <> "" 'count number of files in the directory
        FileTotal = FileTotal + 1
        file_name = Dir()
    Loop

    file_name = Dir(folder_path)
    Do While file_name <> "" 'Loop through workbooks until all files opened
        full_path = folder_path & file_name 'Set path of file to open
        Set wb = Workbooks.Open(full_path, UpdateLinks:=False)  'Assign workbook a variable and open it

        FileCount = FileCount + 1
        Application.ScreenUpdating = True
        Application.StatusBar = "Processing " & FileCount & " of " & FileTotal & " files"
        Application.ScreenUpdating = False


        '''''''''''''''''''' Start Pull Data ''''''''''''''''''''
        wb.Worksheets("Mon").Select

        For Each ws In wb.Sheets
            If ws.name <> "Template" Then
                If ws.Cells(1, 6) = 1 Then

                    SheetTotal = 0
                    RowCount = ws.Range("A" & Rows.Count).End(xlUp).Row 'Determine the number of rows

                    For y = 1 To RowCount 'Determine the allowance range
                        Select Case ws.Cells(y, 1)
                            Case "PRODUCTIVE HOURS"
                                AllowStart = y + 2
                            Case "ALLOWANCES"
                                AllowEnd = y - 1
                                Prod = y
                            Case "VARIATION HOURS"
                                Emer = y
                            Case "DELAY HOURS"
                                Npro = y
                            Case "OVERTIME HOURS"
                                Over = y
                        End Select
                    Next y

                    Col = 1
                    Do Until ws.Cells(2, Col) = "Total Hours" 'Determine number of employee columns
                        Col = Col + 1
                    Loop

                    day = Weekday(ws.Cells(4, 5), vbMonday) 'Determine day of week as integer starting Monday = 1
                    Shift = ws.Cells(5, 5).Value 'Determine Shift

                    ' Find and set EBA parameters (reset each worksheet/day)
                    If Shift = "Public" Then 'Check Public Holiday
                        EBAw = 8
                    ElseIf day < 6 And Shift = "Day" Then 'Day Shift
                        EBAw = 2
                    ElseIf day < 6 And Shift = "Afternoon" Then 'Afternoon Shift
                        EBAw = 3
                    ElseIf day < 6 And Shift = "Night" Then 'Night Shift
                        EBAw = 4
                    ElseIf day = 6 And Shift <> "Night" Then 'Saturday Day Shift
                        EBAw = 5
                    ElseIf day = 6 And Shift = "Night" Then 'Saturday Night Shift
                        EBAw = 6
                        Else 'Sunday Shift
                        EBAw = 7
                    End If

                    EBAi = 3 'set EBA counter to start in column 3
                    EBAt = 3

                    '''''''''''''''''''' Start Cycle Employee Column ''''''''''''''''''''
                    For i = 7 To Col - 1 'cycle through each employee column

                        If Left(ws.Cells(1, i), 5) = "Wages" Then 'Use Wages Calculations

                            '''''''''''''''''''' Start Cycle Wages ''''''''''''''''''''

                            If Left(ws.Cells(1, i), 5) = "Staff" Then 'Set EBA for staff
                                EBAj = 9 'Switch to Staff scenario
                            Else
                                EBAj = EBAw 'Switch back to Wages scenario
                            End If
                            EBAR = Sheets("EBA").Cells(EBAj, EBAi)

                            For j = AllowStart To RowCount 'cycle through each work order
                                If ws.Cells(2, i) <> "" Then
                                    If ws.Cells(j, i) <> "" And ws.Cells(j, i) <> 0 Then
                                        'Initialise variables for each work order
                                        WOH = ws.Cells(j, i) 'Work Order Hours
                                        WOR = WOH ' Work Order Hours Remaining
                                        'Debug.Print "WOR New Work Order"; WOR

                                        If j > AllowEnd Then 'Search Working Hours
                                            Do Until WOR = 0 'loop until hours of work order have been allocated
                                                EBA = Sheets("EBA").Cells(EBAj, EBAi) 'Set EBA
                                                If EBA = 0 Then
                                                    EBAi = EBAi + 1
                                                    EBAt = EBAt + 1
                                                    EBAR = Sheets("EBA").Cells(EBAj, EBAi)
                                                Else

                                                    'Debug.Print "EBA Start"; EBA
                                                    'Debug.Print "EBAR: "; EBAR
                                                    'Debug.Print "EBAi"; EBAi

                                                    ' Is Work Order Hours Remaining to be allocated less/greater than or equal to the EBA Remaining to be aloocated
                                                    If WOR < EBAR Then
                                                        hours = WOR 'set hours to be written to the sheet
                                                        WOR = WOR - hours
                                                        EBAR = EBAR - hours
                                                        ThisWorkbook.Sheets(NameSh).Cells(x, 17).Value = Sheets("EBA").Cells(1, EBAt)  'Rate Type

                                                    ElseIf WOR > EBAR Then
                                                        hours = WOR - (WOR - EBAR)
                                                        WOR = Application.WorksheetFunction.Max(0, WOR - hours)
                                                        ThisWorkbook.Sheets(NameSh).Cells(x, 17).Value = Sheets("EBA").Cells(1, EBAt)  'Rate Type
                                                        EBAi = EBAi + 1
                                                        EBAt = EBAt + 1
                                                        EBAR = Sheets("EBA").Cells(EBAj, EBAi)

                                                    Else
                                                        hours = WOR
                                                        WOR = 0
                                                        ThisWorkbook.Sheets(NameSh).Cells(x, 17).Value = Sheets("EBA").Cells(1, EBAt)  'Rate Type
                                                        EBAi = EBAi + 1
                                                        EBAt = EBAt + 1
                                                        EBAR = Sheets("EBA").Cells(2, EBAi)
                                                    End If

                                                    'Print statements
                                                    With ThisWorkbook.Sheets(NameSh)
                                                        .Cells(x, 4).Value = ws.Cells(4, 5) 'Date
                                                        .Cells(x, 6).Value = ws.Cells(5, 5) 'Shift
                                                        .Cells(x, 1).Value = ws.Cells(3, i) 'Employee ID / Job Seeker ID
                                                        .Cells(x, 2).Value = ws.Cells(2, i) 'Name
                                                        .Cells(x, 5).Value = StartofWeek(Cells(4, 5)) 'First day of the week starting Monday
                                                        .Cells(x, 3).Value = ws.Cells(4, i) 'Trade / Role
                                                        .Cells(x, 16).Value = hours 'Quantity
                                                        .Cells(x, 9).Value = "2030" 'Task Code
                                                        .Cells(x, 10).Value = "Hours Worked - 2030 | RTA Yarwun Pty Ltd - Oper" 'Task Name
                                                        .Cells(x, 15).Value = "HR" 'UOM
                                                        .Cells(4, 7).Formula = "=IFERROR(VLOOKUP($C4,Role!$B$2:$J$19,6,FALSE),"""")" 'Cost Center Code
                                                        .Cells(4, 8).Formula = "=IFERROR(VLOOKUP($C4,Role!$B$2:$J$19,7,FALSE),"""")" 'Cost Center Name
                                                        .Cells(4, 11).Formula = "=IFERROR(VLOOKUP($C4,Role!$B$2:$J$19,8,FALSE),"""")" 'GL Account Name
                                                        .Cells(4, 12).Formula = "=IFERROR(VLOOKUP($C4,Role!$B$2:$J$19,9,FALSE),"""")" 'GL Account Code
                                                        .Cells(4, 13).FormulaArray = "=IFERROR(INDEX(EBA!$M$2:$M$25,MATCH(1,((VLOOKUP(A4,Employee_List,6,FALSE))=EBA!$J$2:$J$25)*(F4=EBA!$K$2:$K$25)*(Q4=EBA!$I$2:$I$25),0)),"""")" 'Rate Category Code
                                                        .Cells(4, 14).Formula = "=IFERROR(VLOOKUP(M4,EBA!$M$2:$N$25,2,FALSE),"""")" 'Rate Category Name
                                                    End With

                                                    'Debug.Print "hours"; hours
                                                    'Debug.Print "THB"; THB
                                                    'Debug.Print "THR"; THR
                                                    'Debug.Print "WOR"; WOR
                                                    'Debug.Print "EBAR"; EBAR
                                                    'Debug.Print "EBA End"; EBA
                                                    'Debug.Print "-----"
                                                    x = x + 1 'add new line
                                                End If
                                                'Stop
                                            Loop
                                        ElseIf j < AllowEnd Then ' Search Allowances

                                            With ThisWorkbook.Sheets(NameSh)
                                                .Cells(x, 4).Value = ws.Cells(4, 5) 'Date
                                                .Cells(x, 5).Value = StartofWeek(Cells(4, 5)) 'First day of the week starting Monday
                                                .Cells(x, 6).Value = ws.Cells(5, 5) 'Shift
                                                .Cells(x, 1).Value = ws.Cells(3, i) 'Employee ID
                                                .Cells(x, 2).Value = ws.Cells(2, i) 'Name
                                                .Cells(x, 3).Value = ws.Cells(4, i) 'Trade
                                                .Cells(x, 9).Value = "2030" 'Task Code
                                                .Cells(x, 10).Value = "Hours Worked - 2030 | RTA Yarwun Pty Ltd - Oper" 'Task Name
                                                .Cells(x, 15).Value = "HR" 'UOM
                                                .Cells(x, 16).Value = ws.Cells(j, i) 'Quantity
                                                .Cells(4, 7).Formula = "=IFERROR(VLOOKUP($C4,Role!$B$2:$J$19,6,FALSE),"""")" 'Cost Center Code
                                                .Cells(4, 8).Formula = "=IFERROR(VLOOKUP($C4,Role!$B$2:$J$19,7,FALSE),"""")" 'Cost Center Name
                                                .Cells(4, 11).Formula = "=IFERROR(VLOOKUP($C4,Role!$B$2:$J$19,8,FALSE),"""")" 'GL Account Name
                                                .Cells(4, 12).Formula = "=IFERROR(VLOOKUP($C4,Role!$B$2:$J$19,9,FALSE),"""")" 'GL Account Code
                                                .Cells(4, 13).FormulaArray = "=IFERROR(INDEX(EBA!$M$2:$M$25,MATCH(1,((VLOOKUP(A4,Employee_List,6,FALSE))=EBA!$J$2:$J$25)*(F4=EBA!$K$2:$K$25)*(Q4=EBA!$I$2:$I$25),0)),"""")" 'Rate Category Code
                                                .Cells(4, 14).Formula = "=IFERROR(VLOOKUP(M4,EBA!$M$2:$N$25,2,FALSE),"""")" 'Rate Category Name

                                                If ws.Cells(j, 3) = "Crib" Then
                                                    .Cells(x, 17) = "2.0NT"
                                                Else
                                                    .Cells(x, 17).Value = "Allow" 'Rate
                                                End If
                                            End With


                                            x = x + 1
                                        End If
                                    End If
                                End If
                            Next j
                            EBAi = 3  'reset EBA
                            EBAt = 3
                            EBAR = Sheets("EBA").Cells(EBAj, EBAi) 'reset EBAR

                            '''''''''''''''''''' End Wages Cycle ''''''''''''''''''''
                        Else
                            '''''''''''''''''''' Start Staff Cycle ''''''''''''''''''''
                            If Left(ws.Cells(1, i), 5) = "Staff" Then 'Set EBA for staff
                                EBAj = 9 'Staff scenario
                            Else
                                EBAj = EBAw 'Wages scenario
                            End If

                            'Load Employee
                            EmpID = ws.Cells(2, i)

                            'Check Dictionary for Employee
                            If Not DictHrs.Exists(EmpID) Then
                                DictHrs.Add EmpID, 0 'Create Entry with hours
                            End If

                            'Check Dictionary for EBA
                            If Not DictEBA.Exists(EmpID) Then
                                'Create initial values
                                Arr(0) = EBAi
                                Arr(1) = EBAj
                                Arr(2) = EBAt
                                Arr(3) = ThisWorkbook.Sheets("EBA").Cells(EBAj, EBAi) 'Set EBA
                                DictEBA.Add EmpID, Arr
                            Else
                                'Use existing values
                                Arr(0) = DictEBA(EmpID)(0)
                                Arr(1) = DictEBA(EmpID)(1)
                                Arr(2) = DictEBA(EmpID)(2)
                                Arr(3) = DictEBA(EmpID)(3)
                            End If

                            EBA = Sheets("EBA").Cells(DictEBA(EmpID)(1), DictEBA(EmpID)(0)) 'Initialise EBA

                            'Debug.Print arr(0)
                            'Debug.Print arr(1)
                            'Debug.Print arr(2)
                            'Debug.Print arr(3)
                            'Debug.Print DictEBA(EmpID)(0)
                            'Debug.Print DictEBA(EmpID)(1)
                            'Debug.Print DictEBA(EmpID)(2)
                            'Debug.Print DictEBA(EmpID)(3)

                            For j = AllowStart To RowCount 'cycle through each work order
                                If ws.Cells(2, i) <> "" Then
                                    If ws.Cells(j, i) <> "" And ws.Cells(j, i) <> 0 Then

                                        WOH = ws.Cells(j, i)
                                        WOR = WOH
                                        DictHrs(EmpID) = DictHrs(EmpID) + WOH

                                        If j > AllowEnd Then 'Search Working Hours
                                            hours = 0
                                            Do Until WOR = 0

                                                Debug.Print "xxxxxxxxxxx"
                                                Debug.Print "---Read---"
                                                Debug.Print "Emp "; EmpID
                                                Debug.Print "DictHrs(EmpID)"; DictHrs(EmpID)
                                                Debug.Print "hours"; hours
                                                Debug.Print "WOR"; WOR
                                                Debug.Print "DictEBA EBAi"; DictEBA(EmpID)(0)
                                                Debug.Print "DictEBA EBAj"; DictEBA(EmpID)(1)
                                                Debug.Print "DictEBA EBAt"; DictEBA(EmpID)(2)
                                                Debug.Print "DictEBA EBA"; DictEBA(EmpID)(3)
                                                'Stop
                                                If DictHrs(EmpID) < DictEBA(EmpID)(3) Then
                                                    hours = WOR
                                                    WOR = WOR - hours
                                                    ThisWorkbook.Sheets(NameSh).Cells(x, 17).Value = Sheets("EBA").Cells(1, Arr(2))  'Rate Type

                                                ElseIf DictHrs(EmpID) > DictEBA(EmpID)(3) Then
                                                    hours = WOR - (DictHrs(EmpID) - Arr(3))
                                                    WOR = Application.WorksheetFunction.Max(0, WOR - hours)
                                                    ThisWorkbook.Sheets(NameSh).Cells(x, 17).Value = Sheets("EBA").Cells(1, Arr(2))  'Rate Type
                                                    Arr(0) = Arr(0) + 1
                                                    Arr(2) = Arr(2) + 1
                                                    Arr(3) = ThisWorkbook.Sheets("EBA").Cells(DictEBA(EmpID)(1), Arr(0))
                                                    DictEBA(EmpID) = Arr

                                                    Else 'if dicthrs = EBAR
                                                    hours = WOR
                                                    WOR = 0
                                                    'ThisWorkbook.Sheets(NameSh).Cells(x, 17).Value = Sheets("EBA").Cells(1, arr(2))  'Rate Type
                                                    Arr(0) = Arr(0) + 1
                                                    Arr(2) = Arr(2) + 1
                                                    Arr(3) = ThisWorkbook.Sheets("EBA").Cells(DictEBA(EmpID)(1), Arr(0))
                                                    DictEBA(EmpID) = Arr
                                                End If

                                                Debug.Print "---Write---"
                                                Debug.Print "DictHrs(EmpID)"; DictHrs(EmpID)
                                                Debug.Print "hours"; hours
                                                Debug.Print "WOR"; WOR
                                                Debug.Print "DictEBA EBAi"; DictEBA(EmpID)(0)
                                                Debug.Print "DictEBA EBAj"; DictEBA(EmpID)(1)
                                                Debug.Print "DictEBA EBAt"; DictEBA(EmpID)(2)
                                                Debug.Print "DictEBA EBA"; DictEBA(EmpID)(3)
                                                Debug.Print "xxxxxxxxxxx"
                                                'Stop

                                                'Print statements
                                                With ThisWorkbook.Sheets(NameSh)
                                                    .Cells(x, 4).Value = ws.Cells(4, 5) 'Date
                                                    .Cells(x, 6).Value = ws.Cells(5, 5) 'Shift
                                                    .Cells(x, 1).Value = ws.Cells(3, i) 'Employee ID / Job Seeker ID
                                                    .Cells(x, 2).Value = ws.Cells(2, i) 'Name
                                                    .Cells(x, 5).Value = StartofWeek(Cells(4, 5)) 'First day of the week starting Monday
                                                    .Cells(x, 3).Value = ws.Cells(4, i) 'Trade / Role
                                                    .Cells(x, 16).Value = hours 'Quantity
                                                    .Cells(x, 9).Value = "2030" 'Task Code
                                                    .Cells(x, 10).Value = "Hours Worked - 2030 | RTA Yarwun Pty Ltd - Oper" 'Task Name
                                                    .Cells(x, 15).Value = "HR" 'UOM
                                                    .Cells(4, 7).Formula = "=IFERROR(VLOOKUP($C4,Role!$B$2:$J$19,6,FALSE),"""")" 'Cost Center Code
                                                    .Cells(4, 8).Formula = "=IFERROR(VLOOKUP($C4,Role!$B$2:$J$19,7,FALSE),"""")" 'Cost Center Name
                                                    .Cells(4, 11).Formula = "=IFERROR(VLOOKUP($C4,Role!$B$2:$J$19,8,FALSE),"""")" 'GL Account Name
                                                    .Cells(4, 12).Formula = "=IFERROR(VLOOKUP($C4,Role!$B$2:$J$19,9,FALSE),"""")" 'GL Account Code
                                                    .Cells(4, 13).FormulaArray = "=IFERROR(INDEX(EBA!$M$2:$M$25,MATCH(1,((VLOOKUP(A4,Employee_List,6,FALSE))=EBA!$J$2:$J$25)*(F4=EBA!$K$2:$K$25)*(Q4=EBA!$I$2:$I$25),0)),"""")" 'Rate Category Code
                                                    .Cells(4, 14).Formula = "=IFERROR(VLOOKUP(M4,EBA!$M$2:$N$25,2,FALSE),"""")" 'Rate Category Name
                                                End With

                                                    'Debug.Print "hours"; hours
                                                    'Debug.Print "THB"; THB
                                                    'Debug.Print "THR"; THR
                                                    'Debug.Print "WOR"; WOR
                                                    'Debug.Print "EBAR"; EBAR
                                                    'Debug.Print "EBA End"; EBA
                                                    'Debug.Print "-----"
                                                    x = x + 1 'add new line

                                                    'End If
                                                    'Stop
                                                Loop
                                            ElseIf j < AllowEnd Then ' Search Allowances
                                                With ThisWorkbook.Sheets(NameSh)
                                                    .Cells(x, 4).Value = ws.Cells(4, 5) 'Date
                                                    .Cells(x, 5).Value = StartofWeek(Cells(4, 5)) 'First day of the week starting Monday
                                                    .Cells(x, 6).Value = ws.Cells(5, 5) 'Shift
                                                    .Cells(x, 1).Value = ws.Cells(3, i) 'Employee ID
                                                    .Cells(x, 2).Value = ws.Cells(2, i) 'Name
                                                    .Cells(x, 3).Value = ws.Cells(4, i) 'Trade
                                                    .Cells(x, 9).Value = "2030" 'Task Code
                                                    .Cells(x, 10).Value = "Hours Worked - 2030 | RTA Yarwun Pty Ltd - Oper" 'Task Name
                                                    .Cells(x, 15).Value = "HR" 'UOM
                                                    .Cells(x, 16).Value = ws.Cells(j, i) 'Quantity
                                                    .Cells(4, 7).Formula = "=IFERROR(VLOOKUP($C4,Role!$B$2:$J$19,6,FALSE),"""")" 'Cost Center Code
                                                    .Cells(4, 8).Formula = "=IFERROR(VLOOKUP($C4,Role!$B$2:$J$19,7,FALSE),"""")" 'Cost Center Name
                                                    .Cells(4, 11).Formula = "=IFERROR(VLOOKUP($C4,Role!$B$2:$J$19,8,FALSE),"""")" 'GL Account Name
                                                    .Cells(4, 12).Formula = "=IFERROR(VLOOKUP($C4,Role!$B$2:$J$19,9,FALSE),"""")" 'GL Account Code
                                                    .Cells(4, 13).FormulaArray = "=IFERROR(INDEX(EBA!$M$2:$M$25,MATCH(1,((VLOOKUP(A4,Employee_List,6,FALSE))=EBA!$J$2:$J$25)*(F4=EBA!$K$2:$K$25)*(Q4=EBA!$I$2:$I$25),0)),"""")" 'Rate Category Code
                                                    .Cells(4, 14).Formula = "=IFERROR(VLOOKUP(M4,EBA!$M$2:$N$25,2,FALSE),"""")" 'Rate Category Name

                                                    If ws.Cells(j, 3) = "Crib" Then
                                                        .Cells(x, 17) = "2.0NT"
                                                    Else
                                                        .Cells(x, 17).Value = "Allow" 'Rate
                                                    End If
                                                End With
                                                x = x + 1
                                            End If
                                        End If
                                    End If
                                Next j
                                '''''''''''''''''''' End Staff Cycle ''''''''''''''''''''
                            End If
                        Next i
                        '''''''''''''''''''' End Cycle Employee Column ''''''''''''''''''''

                    End If
                End If
                SheetTotal = SheetTotal + 1
            Next ws
            '''''''''''''''''''' End Pull Data ''''''''''''''''''''
            'ThisWorkbook.Sheets(NameSh).Cells(k, 18) = ActiveWorkbook.Name
            'ThisWorkbook.Sheets(NameSh).Cells(k, 19) = SheetTotal

            k = k + 1

            Workbooks(file_name).Close savechanges:=False 'Close the workbook that's just been opened
            file_name = Dir() 'continue to next file

            'remove dictionaries
            DictHrs.RemoveAll
            DictEBA.RemoveAll

        Loop


        '''''''''''''''''''' End Workbook Identification ''''''''''''''''''''

        TimeRun = Format((Timer - TimeStart) / 86400, "hh:mm:ss")
        MsgBox (k - (SumCount + 1) & " Timesheets Extracted Successfully" & vbCrLf & "Time Taken " & TimeRun), , "Performance"

        Range("k4:N4").Select
        LastRow = Range("A3").CurrentRegion.Rows.Count + 2
        Selection.AutoFill Destination:=Range("K4:N" & LastRow)
        Range("G4:H4").Select
        Selection.AutoFill Destination:=Range("G4:H" & LastRow)

        If TableExists(ActiveSheet, "FieldGlassData") = False Then
            ActiveSheet.ListObjects.Add(xlSrcRange, Range("A3:Q" & LastRow)).name = "FieldGlassData"
            ActiveSheet.ListObjects("FieldGlassData").TableStyle = ""
        End If

        Application.ScreenUpdating = True
        Application.StatusBar = False
        Application.EnableEvents = True

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

    End Sub

Function StartofWeek(sheetdate As Variant)

On Error GoTo SafeExit

    StartofWeek = sheetdate - Weekday(sheetdate, vbUseSystemDayOfWeek) + 1

SafeExit:
        On Error GoTo 0

End Function

Function GetFileFieldGlass() As String 'select folder and put it into the cell

On Error GoTo SafeExit

        Dim fldr As FileDialog
        Dim sItem As String
        Set fldr = Application.FileDialog(msoFileDialogFilePicker)
        With fldr
            .Title = "Select a Folder"
            .AllowMultiSelect = False
            .InitialFileName = Application.DefaultFilePath
            If .Show <> -1 Then GoTo NextCode
            sItem = .SelectedItems(1)
        End With
NextCode:
        ThisWorkbook.Sheets("FieldGlassData").Range("M1") = sItem
        Set fldr = Nothing

SafeExit:
        On Error GoTo 0

End Function

Sub GenFieldGlass(control As IRibbonControl)

On Error GoTo SafeExit

        Dim source_ws, target_ws As Worksheet
        Set source_ws = ThisWorkbook.Sheets("FGDataPivot")

        If TableExists(ThisWorkbook.Sheets("FieldGlassData"), "FieldGlassData") = False Then 'check whether timesheets have been extracted to the fieldglassdata sheet
            MsgBox "Please extract the timesheet data before attempting to generate the final Field Glass file."
            Exit Sub
        End If

        If ThisWorkbook.Sheets("FieldGlassData").Range("M1") = "" Then
            MsgBox "Please select the folder location for the Field Glass file you wish to use before generating."
            Exit Sub
        End If


        file_path = ThisWorkbook.Sheets("FieldGlassData").Range("M1") 'Correction to folder path format

        Application.ScreenUpdating = False
        Application.EnableEvents = False
        Application.DisplayAlerts = False

        Response = MsgBox("Would you like to import the clients fieldglass file?", vbYesNoCancel, "Generate Field Glass File")

        If Response = vbYes Then 'delete the DraftTimeSheets sheet and reimport from set location
            If SheetExist("DraftTimeSheets") = True Then
                ActiveWorkbook.Sheets("DraftTimeSheets").Delete
            End If

            Workbooks.Open filename:=(file_path) 'open fieldglass workbook
            ActiveWorkbook.Sheets(1).Copy After:=source_ws 'copy to consolidation tool
            Workbooks("DraftTimeSheets.xlsx").Close 'close fieldglass workbook
            ActiveWorkbook.Sheets("DraftTimeSheets").ListObjects.Add(xlSrcRange, Range("$A$13:$U$" & Worksheets("DraftTimeSheets").Range("A13").CurrentRegion.Rows.Count + 12), , xlYes).name = "DraftTimeSheetsData" 'turn sheet into table
            ActiveWorkbook.Sheets("DraftTimeSheets").Visible = xlHidden
            'ActiveWorkbook.Sheets("DraftTimeSheets").Delete 'delete imported fieldglass sheet
        End If

        ActiveWorkbook.RefreshAll 'update queries

        MsgBox "Field Glass File has been generated"
        ActiveWorkbook.Sheets("FieldGlassFinal").Visible = True


        Application.ScreenUpdating = True
        Application.EnableEvents = True
        Application.DisplayAlerts = True
    
Exit Sub
    
SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
         Application.StatusBar = "Function GateFile" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Function SheetExist(sheetname As String)

On Error GoTo SafeExit

        Dim oSheet As Excel.Worksheet
        Dim Check As Boolean

        For Each oSheet In ActiveWorkbook.Sheets 'cheack all sheets in the active workbook
            If oSheet.name = sheetname Then
                Check = True
                Exit For
            Else
                Check = False
            End If
        Next oSheet

        SheetExist = Check

SafeExit:
        On Error GoTo 0

End Function
Sub UpdateTable()

On Error GoTo SafeExit

        LastRow = Range("A8").CurrentRegion.Rows.Count
        Sheets("WorkTime").Range("D8:D" & LastRow + 5).name = "WT_Key"
        Sheets("WorkTime").Range("E8:H" & LastRow + 5).name = "WT_Times"
        Sheets("WorkTime").Range("A8:A" & LastRow + 5).name = "WT_Phase"
        Sheets("WorkTime").Range("B8:B" & LastRow + 5).name = "WT_Type"
        
SafeExit:
        On Error GoTo 0

End Sub
Function FolderCheck(sh)
 
On Error GoTo SafeExit
 
        If ThisWorkbook.Sheets(sh).Range("E1") = Application.ActiveWorkbook.Path Then
            FolderCheck = True
        End If

SafeExit:
        On Error GoTo 0

End Function

Sub CrewInput()

On Error GoTo SafeExit

Dim EmpAdd, EmpCol, EmpAct, i, j, RowCount, Emp As Integer
Dim Sup As String
Dim Crew, CrewSort As Variant

If ActiveSheet.EnableSelection = xlNoSelection Then
Exit Sub
Else
    EmpCol = 9
    EmpAct = 0
    i = 2
    j = 1
    Emp = 9

    Do Until ActiveSheet.Cells(1, EmpCol) = "EmpEnd" 'Determine number of employee columns
        
        If ActiveSheet.Cells(2, EmpCol) <> "" Then EmpAct = EmpAct + 1
        EmpCol = EmpCol + 1
        
    Loop

    EmpAdd = Application.WorksheetFunction.CountIf(Sheets("Employee").Range("N:N"), ActiveSheet.Cells(3, 6))
    
    If EmpAdd > 0 Then
        
        MsgAns = MsgBox("Replace existing " & EmpAct & " employees on timesheet?" & vbCrLf & "(Select ""No"" to Modify Default Crew)", vbYesNoCancel, "Confirm Add Crew")
        If MsgAns = vbYes Then
        
            RowCount = ThisWorkbook.Sheets("Employee").Range("N" & Rows.Count).End(xlUp).Row
            Crew = ThisWorkbook.Sheets("Employee").Range("K2:N" & RowCount)
            Sup = ActiveSheet.Cells(3, 6)
            
            Application.ScreenUpdating = False
            Application.EnableEvents = False
                        
            ActiveSheet.Range(Cells(2, 9), Cells(2, EmpCol - 1)).ClearContents
            
            If EmpAdd > EmpCol - 9 Then 'add additional columns if crew size in larger than available
                For j = 1 To EmpAdd - (EmpCol - 10)
                    Insert_Col
                Next j
            End If
            
            For i = 1 To UBound(Crew) 'adds employee crew names to timesheets
                If Crew(i, 4) = Sup Then
                    ActiveSheet.Cells(2, Emp) = Crew(i, 1)
                    Emp = Emp + 1
                End If
            Next i
            
            If Emp - 1 > 9 Then
                SortEmp Emp - 1
            End If
            
            AutoAllow "Y"
            
            Application.ScreenUpdating = True
            Application.EnableEvents = True
            
            MsgBox "Crew of " & EmpAdd & " employees added ", , "Crew Added"
            
        ElseIf MsgAns = vbNo Then
            empr = Application.Match(ActiveSheet.Cells(3, 6), ThisWorkbook.Sheets("Employee").Range("B:B"), 0)
            ThisWorkbook.Sheets("Employee").Cells(empr, 13) = "Y"
            ThisWorkbook.Sheets("Supervisor").Range("A2") = ActiveSheet.Cells(3, 6)
            With UserForm2
                .MultiPage1.Value = 3
                .Show
            End With
        Else
            Exit Sub
        End If
    
    Else
    
            If ActiveSheet.Cells(3, 7) <> "" Then
                empr = Application.Match(ActiveSheet.Cells(3, 6), ThisWorkbook.Sheets("Employee").Range("B:B"), 0)
                ThisWorkbook.Sheets("Employee").Cells(empr, 13) = "Y"
                ThisWorkbook.Sheets("Supervisor").Range("A2") = ActiveSheet.Cells(3, 6)
                With UserForm2
                    .MultiPage1.Value = 3
                    .Show
                End With
            End If
            
'        MsgBox "Please allocate crew.  No crew assigned to selected supervisor." & vbCrLf & _
'                "Timesheet => Resource Data => Crew", , "Crew Allocation"
    
    End If
End If

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub

Sub WOAct(Ord As String)

On Error GoTo SafeExit

Dim i, r, RowCount As Integer
Dim Act() As Variant
Dim WO As Variant
Dim test As String
Dim sh As Worksheet

Set sh = ThisWorkbook.Worksheets("Lookup")

Application.EnableEvents = False
Application.ScreenUpdating = False

If Ord <> vbNullString Then
    RowCount = ThisWorkbook.Sheets("DataInternalActivity").Range("A" & Rows.Count).End(xlUp).Row
    WO = ThisWorkbook.Sheets("DataInternalActivity").Range("B2:D" & RowCount)

    ReDim Act(1, r)

    r = 0

        For i = 1 To UBound(WO, 1)
        
            If WO(i, 1) = Ord Then
                Act(0, r) = WO(i, 2)
                Act(1, r) = WO(i, 3)
                r = r + 1
                ReDim Preserve Act(1, r)
            End If
        
        Next i

    sh.UsedRange.ClearContents
    sh.Range("A1:B" & r) = Application.WorksheetFunction.Transpose(Act)
    sh.Range("A1:A" & r).name = "WO_OP_List"
Else
    sh.UsedRange.ClearContents
End If

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub
Sub ChkOrder() 'Used to Switch Primary Cost Object (Book to UGL or Book to External)

On Error GoTo SafeExit
Dim Arr1(), Arr2() As Variant
Dim RowCount, WorkEnd, AllowStart, AllowEnd As Integer

SignUnprotect

Application.EnableEvents = False
Application.ScreenUpdating = False

With TimeTemplate

    If .Range("C9") = True Then
        .Range("C9") = False
    Else
        .Range("C9") = True
    End If

    RowCount = .Range("A" & Rows.Count).End(xlUp).Row
                
    For y = 1 To RowCount
        If .Range("A" & y) = "Allowances" Then
            WorkEnd = y - 1
            AllowStart = y + 2
            AllowEnd = RowCount - 8
        End If
    Next y
    
    Arr1 = .Range("A11:A" & WorkEnd).Value
    Arr2 = .Range("E11:E" & WorkEnd).Value
    Arr3 = .Range("A" & AllowStart & ":A" & AllowEnd).Value
    Arr4 = .Range("E" & AllowStart & ":E" & AllowEnd).Value
    
    If .Range("C9") = True Then
        .Range("A10") = "UGL Order"
        .Range("E10") = "ESSO Order" 'Generic customer description
        .Range("A" & AllowStart - 1) = "UGL Order"
        .Range("E" & AllowStart - 1) = "ESSO Order" 'Generic customer description
        'Switch Validation Rules
        .Range("A11:A" & WorkEnd).Validation.Modify xlValidateList, xlValidAlertStop, xlBetween, "=WO_List_Sort"
        .Range("E11:E" & WorkEnd).Validation.Modify xlValidateList, xlValidAlertStop, xlBetween, "=WO_List_Sort_Cust"
        .Range("G11:G" & WorkEnd).Validation.Delete
        .Range("G11:G" & WorkEnd).Validation.Add xlValidateList, xlValidAlertStop, xlBetween, "=WO_Full"
        .Range("A" & AllowStart & ":A" & AllowEnd).Validation.Modify xlValidateList, xlValidAlertStop, xlBetween, "=WO_List_Sort"
        .Range("E" & AllowStart & ":E" & AllowEnd).Validation.Modify xlValidateList, xlValidAlertStop, xlBetween, "=WO_List_Sort_Cust"
        'Switch Existing Data
        .Range("A11:A" & WorkEnd) = Arr2 'Application.WorksheetFunction.Transpose(Comp)
        .Range("E11:E" & WorkEnd) = Arr1
        .Range("A" & AllowStart & ":A" & AllowEnd) = Arr4
        .Range("E" & AllowStart & ":E" & AllowEnd) = Arr3
    Else
        .Range("A10") = "ESSO Order" 'Generic customer description
        .Range("E10") = "UGL Order"
        .Range("A" & AllowStart - 1) = "ESSO Order" 'Generic customer description
        .Range("E" & AllowStart - 1) = "UGL Order"
        'Switch Validation Rules
        .Range("A11:A" & WorkEnd).Validation.Modify xlValidateList, xlValidAlertStop, xlBetween, "=WO_List_Sort_Cust"
        .Range("E11:E" & WorkEnd).Validation.Modify xlValidateList, xlValidAlertStop, xlBetween, "=WO_List_Sort"
        .Range("G11:G" & WorkEnd).Validation.Delete
        .Range("G11:G" & WorkEnd).Validation.Add xlValidateList, xlValidAlertStop, xlBetween, "=WO_Full_Ext"
        .Range("A" & AllowStart & ":A" & AllowEnd).Validation.Modify xlValidateList, xlValidAlertStop, xlBetween, "=WO_List_Sort_Cust"
        .Range("E" & AllowStart & ":E" & AllowEnd).Validation.Modify xlValidateList, xlValidAlertStop, xlBetween, "=WO_List_Sort"
        'Switch Existing Data
        .Range("A11:A" & WorkEnd) = Arr2
        .Range("E11:E" & WorkEnd) = Arr1
        .Range("A" & AllowStart & ":A" & AllowEnd) = Arr4
        .Range("E" & AllowStart & ":E" & AllowEnd) = Arr3
    End If
    
SignProtect

End With

Application.ScreenUpdating = True
Application.EnableEvents = True

Exit Sub

SafeExit:
        Application.ScreenUpdating = True
        Application.EnableEvents = True
        On Error GoTo 0

End Sub
Sub WOFilter(Ord As String)

Dim Arr(), Arr2() As Variant
Dim Arrf As Variant
Dim WOList As Variant
Dim i, x As Integer
Dim NameTest As String
Dim WorkEnd, AllowEnd As Integer

SignUnprotect

Arr = DataIntOrder.Range("WO_All")

ReDim Arrf(1, x)
x = 0

    For i = 1 To UBound(Arr, 1)
        If Arr(i, 8) = Ord Then
            Arrf(1, x) = Arr(i, 1)
            x = x + 1
            ReDim Preserve Arrf(1, x)
        End If
    Next i
    
If x > 1 Then
    ReDim Preserve Arrf(1, x - 1)
    
    WorkEnd = Application.WorksheetFunction.Match("Allowances", ActiveSheet.Range("A:A"), 0) - 1
    AllowEnd = ActiveSheet.Range("A" & Rows.Count).End(xlUp).Row - 8

    ThisWorkbook.Sheets("Lookup").Range("G1:H" & x - 1) = Application.Transpose(Arrf)
    ThisWorkbook.Sheets("Lookup").Range("H1:H" & x - 1).name = "WO_FInt"
    
    If ActiveSheet.Range("C9") = True Then
        ActiveSheet.Range("A11:A" & WorkEnd).Validation.Modify xlValidateList, xlValidAlertStop, xlBetween, "=WO_FInt"
        ActiveSheet.Range("A" & WorkEnd + 3 & ":A" & AllowEnd).Validation.Modify xlValidateList, xlValidAlertStop, xlBetween, "=WO_FInt"
    Else
        ActiveSheet.Range("E11:E" & WorkEnd).Validation.Modify xlValidateList, xlValidAlertStop, xlBetween, "=WO_FInt"
        ActiveSheet.Range("E" & WorkEnd + 3 & ":E" & AllowEnd).Validation.Modify xlValidateList, xlValidAlertStop, xlBetween, "=WO_FInt"
    End If
End If

End Sub

Sub testa()

WOFilter ("2200-0136")

End Sub

Sub WODetail(Ord As String, rn As Integer, t As String)

On Error GoTo SafeExit

Dim i, r, RowCount, Prod_Start As Integer
Dim Act(), TypeList As Variant
Dim WO As Variant
Dim sh As Worksheet

Set sh = ThisWorkbook.Worksheets("Lookup")

Application.EnableEvents = False
Application.ScreenUpdating = False

    TypeList = MasType.Range("Master_Type")
    Prod_Start = Application.WorksheetFunction.Match("Allowances", ActiveSheet.Range("A:A"), 0)
    
    If t = "True" Then
        RowCount = ThisWorkbook.Sheets("DataInternalOrder").Range("A" & Rows.Count).End(xlUp).Row
        WO = ThisWorkbook.Sheets("DataInternalOrder").Range("B2:I" & RowCount)
    Else
        RowCount = ThisWorkbook.Sheets("DataCustomerOrder").Range("A" & Rows.Count).End(xlUp).Row
        WO = ThisWorkbook.Sheets("DataCustomerOrder").Range("B2:E" & RowCount)
    End If

    ReDim Act(5, r)

    r = 0

        For i = 1 To UBound(WO, 1)
        
            If WO(i, 1) = Ord Then
                Act(0, r) = 10
                Act(1, r) = IIf(ActiveSheet.Cells(rn, 3) = "", TypeList(1, 2), ActiveSheet.Cells(rn, 3)) '"Prod" "SCO"
                Act(2, r) = vbNullString
                If t = "True" Then       'UGL Internal
                    Act(3, r) = WO(i, 6) 'Work Order
                    Act(4, r) = WO(i, 7) 'Purchase Order
                Else                     'External
                    Act(3, r) = WO(i, 4) 'Work Order
                    Act(4, r) = vbNullString 'Purchase Order
                End If
                Act(5, r) = WO(i, 2) 'Description
                r = r + 1
                ReDim Preserve Act(5, r)
            End If
        
        Next i
    If rn < Prod_Start Or Ord = vbNullString Then
        ActiveSheet.Range(Cells(rn, 2), Cells(rn, 7)) = Application.WorksheetFunction.Transpose(Act)
    ElseIf rn > Prod_Start + 1 Then
        ActiveSheet.Range(Cells(rn, 2), Cells(rn, 6)) = Application.WorksheetFunction.Transpose(Act)
    End If

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub

Sub WODesc(Ord As String, rn As Integer, t As String)

On Error GoTo SafeExit

Dim i, r, RowCount As Integer
Dim Act(), TypeList As Variant
Dim WO As Variant
Dim test As String
Dim sh As Worksheet

Set sh = ThisWorkbook.Worksheets("Lookup")

Application.EnableEvents = False
Application.ScreenUpdating = False
    
    TypeList = MasType.Range("Master_Type")
    If t = "True" Then
        RowCount = ThisWorkbook.Sheets("DataInternalOrder").Range("A" & Rows.Count).End(xlUp).Row
        WO = ThisWorkbook.Sheets("DataInternalOrder").Range("B2:H" & RowCount)
    Else
        RowCount = ThisWorkbook.Sheets("DataCustomerOrder").Range("A" & Rows.Count).End(xlUp).Row
        WO = ThisWorkbook.Sheets("DataCustomerOrder").Range("B2:E" & RowCount)
    End If

    ReDim Act(5, r)

    r = 0

        For i = 1 To UBound(WO, 1)
        
            If WO(i, 2) = Ord Then
                Act(0, r) = WO(i, 1) 'order
                Act(1, r) = 10
                Act(2, r) = IIf(ActiveSheet.Cells(rn, 3) = "", TypeList(1, 2), ActiveSheet.Cells(rn, 3))     '"Prod" SCO
                Act(3, r) = vbNullString
                If t = "True" Then
                    Act(4, r) = WO(i, 6)
                    Act(5, r) = WO(i, 7)
                Else
                    Act(4, r) = WO(i, 4)
                    Act(5, r) = vbNullString
                End If
                r = r + 1
                ReDim Preserve Act(5, r)
            End If
        
        Next i
        
        ActiveSheet.Range(Cells(rn, 1), Cells(rn, 6)) = Application.WorksheetFunction.Transpose(Act)

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub

Sub ActDesc(Ord As String, rn As Integer)

On Error GoTo SafeExit

Dim i, r, s, RowCount As Integer
Dim Act() As Variant
Dim WDes() As Variant
Dim WO As Variant
Dim sh As Worksheet

Set sh = ThisWorkbook.Worksheets("Lookup")

Application.EnableEvents = False
Application.ScreenUpdating = False

    RowCount = sh.Range("A" & Rows.Count).End(xlUp).Row
    WO = sh.Range("A1:B" & RowCount)

    ReDim Act(r)
    r = 0

        For i = 1 To UBound(WO, 1)
        
            If WO(i, 1) = Ord Then
                Act(r) = WO(i, 2)
                r = r + 1
                ReDim Preserve Act(r)
            End If
            
        Next i
   
    RowCount = ThisWorkbook.Sheets("DataInternalOrder").Range("A" & Rows.Count).End(xlUp).Row
    WO = ThisWorkbook.Sheets("DataInternalOrder").Range("B2:H" & RowCount)
   
    ReDim WDes(s)
    s = 0

        For i = 1 To UBound(WO, 1)
        
            If WO(i, 1) = ActiveSheet.Cells(rn, 1) Then
                WDes(s) = WO(i, 2)
                s = s + 1
                ReDim Preserve WDes(s)
            End If
            
        Next i
   
   If Len(Join(Act)) = 0 Then
    ActiveSheet.Cells(rn, 7) = WDes
   Else
    ActiveSheet.Cells(rn, 7) = Join(WDes) & "- " & Join(Act)
   End If
   
SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0
End Sub

Function OrdAct(Ord As String) As Variant

On Error GoTo SafeExit

Dim i, r, RowCount As Integer
Dim Act() As Variant
Dim WO As Variant

OrdAct = ""

If Ord <> vbNullString Then
    RowCount = ThisWorkbook.Sheets("DataInternalActivity").Range("A" & Rows.Count).End(xlUp).Row
    WO = ThisWorkbook.Sheets("DataInternalActivity").Range("B2:D" & RowCount)

    r = 0
    ReDim Act(1, r)
    
        For i = 1 To UBound(WO, 1)
            
            If WO(i, 1) = Ord Then
                Act(0, r) = WO(i, 2)
                Act(1, r) = WO(i, 3)
                r = r + 1
                ReDim Preserve Act(1, r)
            End If
            
        Next i
        
        OrdAct = Application.WorksheetFunction.Transpose(Act)
End If

SafeExit:
        On Error GoTo 0

End Function
Function OrdCusWO(Ord As Variant) As Variant

On Error GoTo SafeExit

Dim i, r, RowCount As Integer
Dim Act() As Variant
Dim WO As Variant

OrdCusWO = Empty

If Ord <> vbNullString Then
    RowCount = ThisWorkbook.Sheets("DataCustomerOrder").Range("A" & Rows.Count).End(xlUp).Row
    WO = ThisWorkbook.Sheets("DataCustomerOrder").Range("B2:E" & RowCount)

    r = 0
    ReDim Act(1, r)
    
        For i = 1 To UBound(WO, 1)
            
            If WO(i, 4) = Ord Then
                Act(0, r) = WO(i, 1)
                Act(1, r) = WO(i, 2)
                r = r + 1
                ReDim Preserve Act(1, r)
            End If
            
        Next i
        
        OrdCusWO = Application.WorksheetFunction.Transpose(Act)
End If

SafeExit:
        On Error GoTo 0

End Function

Function OrdNoCusWO() As Variant

On Error GoTo SafeExit

Dim i, r, RowCount As Integer
Dim Act() As Variant
Dim WO As Variant

OrdNoCusWO = Empty

    RowCount = ThisWorkbook.Sheets("DataCustomerOrder").Range("A" & Rows.Count).End(xlUp).Row
    WO = ThisWorkbook.Sheets("DataCustomerOrder").Range("B2:E" & RowCount)

    r = 0
    ReDim Act(1, r)
    
        For i = 1 To UBound(WO, 1)
            
            If WO(i, 4) = vbNullString Then
                Act(0, r) = WO(i, 1)
                Act(1, r) = WO(i, 2)
                r = r + 1
                ReDim Preserve Act(1, r)
            End If
            
        Next i
        
        OrdNoCusWO = Application.WorksheetFunction.Transpose(Act)

SafeExit:
        On Error GoTo 0

End Function
Function OrdIntWO(Ord As Variant) As Variant

On Error GoTo SafeExit

Dim i, r, RowCount As Integer
Dim Act() As Variant
Dim WO As Variant

OrdIntWO = Empty

If Ord <> vbNullString Then
    RowCount = ThisWorkbook.Sheets("DataInternalOrder").Range("A" & Rows.Count).End(xlUp).Row
    WO = ThisWorkbook.Sheets("DataInternalOrder").Range("B2:G" & RowCount)

    r = 0
    ReDim Act(1, r)
    
        For i = 1 To UBound(WO, 1)
            
            If WO(i, 6) = Ord Then
                Act(0, r) = WO(i, 1)
                Act(1, r) = WO(i, 2)
                r = r + 1
                ReDim Preserve Act(1, r)
            End If
            
        Next i
        
        OrdIntWO = Application.WorksheetFunction.Transpose(Act)
End If

SafeExit:
        On Error GoTo 0

End Function

Function OrdNoIntWO() As Variant

On Error GoTo SafeExit

Dim i, r, RowCount As Integer
Dim Act() As Variant
Dim WO As Variant

    RowCount = ThisWorkbook.Sheets("DataInternalOrder").Range("A" & Rows.Count).End(xlUp).Row
    WO = ThisWorkbook.Sheets("DataInternalOrder").Range("B2:G" & RowCount)

    r = 0
    ReDim Act(1, r)
    
        For i = 1 To UBound(WO, 1)
            
            If WO(i, 6) = vbNullString Then
                Act(0, r) = WO(i, 1)
                Act(1, r) = WO(i, 2)
                r = r + 1
                ReDim Preserve Act(1, r)
            End If
            
        Next i
        
        OrdNoIntWO = Application.WorksheetFunction.Transpose(Act)

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Function
Function OrdIntPO(Ord As Variant) As Variant

On Error GoTo SafeExit

Dim i, r, RowCount As Integer
Dim Act() As Variant
Dim WO As Variant

OrdIntPO = Empty

If Ord <> vbNullString Then
    RowCount = ThisWorkbook.Sheets("DataInternalOrder").Range("A" & Rows.Count).End(xlUp).Row
    WO = ThisWorkbook.Sheets("DataInternalOrder").Range("B2:H" & RowCount)

    r = 0
    ReDim Act(1, r)
    
        For i = 1 To UBound(WO, 1)
            
            If WO(i, 7) = Ord Then
                Act(0, r) = WO(i, 1)
                Act(1, r) = WO(i, 2)
                r = r + 1
                ReDim Preserve Act(1, r)
            End If
            
        Next i
        
        OrdIntPO = Application.WorksheetFunction.Transpose(Act)
End If

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Function

Function OrdNoIntPO() As Variant

On Error GoTo SafeExit

Dim i, r, RowCount As Integer
Dim Act() As Variant
Dim WO As Variant

    RowCount = ThisWorkbook.Sheets("DataInternalOrder").Range("A" & Rows.Count).End(xlUp).Row
    WO = ThisWorkbook.Sheets("DataInternalOrder").Range("B2:H" & RowCount)

    r = 0
    ReDim Act(1, r)
    
        For i = 1 To UBound(WO, 1)
            
            If WO(i, 7) = vbNullString Then
                Act(0, r) = WO(i, 1)
                Act(1, r) = WO(i, 2)
                r = r + 1
                ReDim Preserve Act(1, r)
            End If
            
        Next i
        
        OrdNoIntPO = Application.WorksheetFunction.Transpose(Act)

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Function

Sub Approval(control As IRibbonControl)

On Error GoTo SafeExit

    Select Case ActiveSheet.name

    Case "TimeTemplate", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"

        SignUnprotect
        Signature

    End Select

    Application.EnableEvents = True
    Application.ScreenUpdating = True

Exit Sub

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        Application.StatusBar = "Sub Approval" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub
Sub Final()

On Error GoTo SafeExit

If ActiveSheet.EnableSelection = xlNoSelection Then
    Exit Sub
Else
    If MsgBox("Finalise And Lock Signed Timesheet", vbOKCancel, "Timesheet Finalise") = vbOK Then
        SignUnprotect
        Signature
    End If
End If

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub

Sub ApprovalClear(control As IRibbonControl)

On Error GoTo SafeExit

Select Case ActiveSheet.name

    Case "TimeTemplate", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"

        SignUnprotect
        SignatureClear
        SignProtect

    End Select

    Application.EnableEvents = True
    Application.ScreenUpdating = True

Exit Sub

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        Application.StatusBar = "Sub ApprovalClear" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Sub Signature()

On Error GoTo SafeExit

Dim i, Cust, Comp, CustCount, CompCount As Integer
Dim SignTop, SignLow, SignRight, AreaTop, AreaLow, AreaLeft As Double
Dim sh As Shape

Cust = 0
Comp = 0

CustCount = 0
CompCount = 0

AreaTop = ActiveSheet.Range("SignCust").Top
AreaLow = ActiveSheet.Range("SignCust").Top + ActiveSheet.Range("SignCust").Height
AreaLeft = ActiveSheet.Range("SignComp").Left

For Each sh In ActiveSheet.Shapes
    SignTop = sh.Top
    SignLow = sh.Top + sh.Height
    SignRight = sh.Left + sh.Width

    If AreaTop <= SignLow And AreaLow >= SignTop Then 'specify height of valid signature
        
        If AreaLeft >= SignRight Then
            CustCount = CustCount + 1
            sh.name = "Ink Cust " & CustCount
            Cust = 1
        Else
            CompCount = CompCount + 1
            sh.name = "Ink Comp " & CompCount
            Comp = 1
        End If
        
    End If

Next sh

Select Case Cust & Comp

Case "00"
    MsgBox "Timesheet Not Signed", , "Timesheet Approval"
    ActiveSheet.Cells(7, 1) = ClearContents
    ActiveSheet.Cells(8, 1).Formula = "=CreateDate()"
    SignProtect
Case "01"
    MsgBox "Signed By Company Only" & vbCrLf & "Customer Signature Required", , "Timesheet Approval"
    ActiveSheet.Cells(7, 1) = ClearContents
    ActiveSheet.Cells(8, 1).Formula = "=CreateDate()"
    SignProtect
Case "10"
    MsgBox "Signed By Customer Only" & vbCrLf & "Company Signature Required", , "Timesheet Approval"
    ActiveSheet.Cells(7, 1) = ClearContents
    ActiveSheet.Cells(8, 1).Formula = "=CreateDate()"
    SignProtect
Case "11"

If ActiveSheet.Range("PrintCustName") = "" Or ActiveSheet.Range("PrintCompName") = "" Then
    MsgBox "Please Print Names Under Signatures"
    ActiveSheet.Cells(7, 1) = ClearContents
    ActiveSheet.Cells(8, 1).Formula = "=CreateDate()"
    SignProtect
Else
    If CreateDate <> Left(ActiveSheet.Range("A8"), 15) Then
        ActiveSheet.Cells(7, 1) = "Timesheet Approved (Copy)"
        SignProtect
        MsgBox "Signed By Customer and Company" & vbCrLf & "Copy of Approved Timesheet", , "Timesheet Approval"
    Else
        ActiveSheet.Range("AppChk").Value = "Timesheet Approved"
        ActiveSheet.Cells(8, 1).Value = CreateDate & "." & ActiveSheet.Index
        ActiveSheet.Range("FinalTime").Value = Now()
        ActiveSheet.Cells(4, 2) = ActiveSheet.UsedRange.Columns.Count
        ActiveSheet.Cells(4, 3) = ActiveSheet.UsedRange.Rows.Count
        With ActiveSheet.Tab 'show greyed out tab as locked
            .ThemeColor = xlThemeColorAccent3
            .TintAndShade = 0.399975585192419
        End With
        SignLock
        MsgBox "Signed By Customer and Company" & vbCrLf & "Timesheet Approved", , "Timesheet Approval"
    End If

End If

End Select

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub

Sub BuildSign()

Dim SignRow, EmpCol As Integer

SignUnprotect

Application.EnableEvents = False
Application.ScreenUpdating = False

    SignRow = Application.Match("RowEnd", ActiveSheet.Range("A:A"), 0)
    EmpCol = Application.Match("Total Hours", ActiveSheet.Range("2:2"), 0)
    
    With ActiveSheet
        .Range(.Cells(SignRow + 5, 9), .Cells(SignRow + 6, EmpCol)).Clear
    End With
    
    'ActiveSheet.Range("J" & SignRow + 5 & ":R" & SignRow + 5).Clear
    ActiveSheet.Range("L" & SignRow + 6 & ":O" & SignRow + 6).UnMerge
    
    ActiveSheet.Range("J" & SignRow + 5).Value = "UGL Signature:"
    ActiveSheet.Range("J" & SignRow + 6).Value = "Print Name:"
    ActiveSheet.Range("Q" & SignRow + 6).Value = "Date:"
        
    With ActiveSheet.Range("J" & SignRow + 5 & ":R" & SignRow + 6).Font
        .name = "Calibri"
        .Size = 12
        .Bold = True
        .ThemeColor = xlThemeColorAccent1
        .TintAndShade = -0.249977111117893
    End With
            
    With ActiveSheet.Range("J" & SignRow + 6 & ":R" & SignRow + 6)
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeTop).ThemeColor = 5
        .Borders(xlEdgeBottom).ThemeColor = 5
        .Borders(xlEdgeTop).TintAndShade = -0.249946592608417
        .Borders(xlEdgeBottom).TintAndShade = -0.249946592608417
        .Borders(xlEdgeTop).Weight = xlMedium
        .Borders(xlEdgeBottom).Weight = xlMedium
    End With
    
    With ActiveSheet.Range("L" & SignRow + 6 & ":O" & SignRow + 6)
        .Merge
        .Locked = False
        .Font.Size = 10
        .Font.Color = 0
        .Interior.Color = 13434879
    End With
    
    With ActiveSheet.Range("R" & SignRow + 6)
        .Merge
        .Locked = False
        .Font.Size = 10
        .Font.Color = 0
        .Interior.Color = 13434879
        .NumberFormat = "dd/mm/yyyy"
    End With
    
    'ActiveSheet.Range("L" & SignRow + 6 & ":O" & SignRow + 6).name = "PrintCompName"
    ActiveSheet.Range("L" & SignRow + 6).name = "PrintCompName"
    ActiveSheet.Range("R" & SignRow + 6).name = "PrintCompDate"
    ActiveSheet.Range("J" & SignRow & ":R" & SignRow + 5).name = "SignComp"

Application.EnableEvents = True
Application.ScreenUpdating = True

SignProtect

End Sub

Sub SignatureClear()

On Error GoTo SafeExit

Dim i As Integer
Dim SignTop, SignLow, AreaTop, AreaLow As Double
Dim sh As Shape

If MsgBox("Clear Timesheet Signatures", vbOKCancel, "Confirm Clear") = vbOK Then

Application.EnableEvents = False
Application.ScreenUpdating = False

AreaTop = ActiveSheet.Range("SignCust").Top
AreaLow = ActiveSheet.Range("SignCust").Top + ActiveSheet.Range("SignCust").Height


For Each sh In ActiveSheet.Shapes
    SignTop = sh.Top
    SignLow = sh.Top + sh.Height
    
    If AreaTop <= SignLow And AreaLow >= SignTop Then 'specify height of valid signature
        sh.Delete
    End If

Next sh

ActiveSheet.Range("AppChk").Value = vbNullString
ActiveSheet.Range("FinalTime").Value = vbNullString
ActiveSheet.Cells(8, 1).Formula = "=CreateDate()"
ActiveSheet.Range("PrintCustName").Value = vbNullString
ActiveSheet.Range("PrintCompName").Value = vbNullString

ActiveSheet.Range("PrintCustDate").ClearContents
ActiveSheet.Range("PrintCompDate").ClearContents

With ActiveSheet.Tab 'show tab as pale blue
    .ThemeColor = xlThemeColorAccent5
    .TintAndShade = 0.399975585192419
End With

End If

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub

Sub SignProtect()

On Error GoTo SafeExit

ActiveSheet.Protect Password:="TimeAdmin#", DrawingObjects:=False, Contents:=True, Scenarios:=True

SafeExit:
        On Error GoTo 0

End Sub
Sub SignLock()

On Error GoTo SafeExit

ActiveSheet.Cells(1, 1).Select
ActiveSheet.Protect Password:="TimeAdmin#", DrawingObjects:=True, Contents:=True, Scenarios:=True
ActiveSheet.EnableSelection = xlNoSelection

SafeExit:
        On Error GoTo 0

End Sub

Sub SignUnprotect()

On Error GoTo SafeExit

ActiveSheet.Unprotect Password:="TimeAdmin#"
ActiveSheet.EnableSelection = xlNoRestrictions

SafeExit:
        On Error GoTo 0

End Sub

Function CreateDate() As String

On Error GoTo SafeExit

    Dim Stamp As Date
    Dim OFS As Object
    Dim CurFile As String
    
    CurFile = ActiveWorkbook.FullName
    Set OFS = CreateObject("Scripting.FileSystemObject")
    Stamp = OFS.getfile(CurFile).DateCreated
    If Err.Number <> 0 Then
        CreateDate = "Not Saved"
    Else
        CreateDate = Format(Stamp, "yyyymmdd.hhmmss")
    End If

SafeExit:
        On Error GoTo 0

End Function

Sub SearchField()

On Error GoTo SafeExit

If ActiveSheet.EnableSelection = xlNoSelection Then
    Exit Sub
Else

    Dim SOrd, SOrdF, SDes, SDesF, SEmp, SEmpF, Arr, Arr2, ArrEmp As Variant
    Dim RowCount, RowCountEmp, i, j, ArrRow, ArrRowEmp, SRow As Integer
    Dim SVal, Drop As String
    
    If ActiveSheet.Range("C9") = True Then
        RowCount = ThisWorkbook.Sheets("DataInternalOrder").Range("B" & Rows.Count).End(xlUp).Row
        Arr = ThisWorkbook.Sheets("DataInternalOrder").Range("B2:B" & RowCount)
        Arr2 = ThisWorkbook.Sheets("DataInternalOrder").Range("C2:C" & RowCount)
    Else
        RowCount = ThisWorkbook.Sheets("DataCustomerOrder").Range("B" & Rows.Count).End(xlUp).Row
        Arr = ThisWorkbook.Sheets("DataCustomerOrder").Range("B2:B" & RowCount)
        Arr2 = ThisWorkbook.Sheets("DataCustomerOrder").Range("C2:C" & RowCount)
    End If
    
    RowCountEmp = ThisWorkbook.Sheets("Employee").Range("B" & Rows.Count).End(xlUp).Row
    ArrEmp = ThisWorkbook.Sheets("Employee").Range("K2:K" & RowCountEmp)
    
    ArrRow = UBound(Arr, 1)
    ArrRowEmp = UBound(ArrEmp, 1)
    
    ReDim SOrd(1 To ArrRow)
    ReDim SDes(1 To ArrRow)
    ReDim SEmp(1 To ArrRowEmp)
    
    For i = 1 To ArrRow
        SOrd(i) = Arr(i, 1)
        SDes(i) = Arr2(i, 1)
    Next i
    
    For j = 1 To ArrRowEmp
        SEmp(j) = ArrEmp(j, 1)
    Next j
    
    SVal = ActiveSheet.Cells(7, 7)
    SOrdF = Filter(SOrd, SVal)
    SDesF = Filter(SDes, SVal)
    SEmpF = Filter(SEmp, SVal)
    
    SignUnprotect
    If UBound(SOrdF, 1) = -1 Or SVal = vbNullString Then
        If UBound(SDesF, 1) = -1 Or SVal = vbNullString Then
            If UBound(SEmpF, 1) = -1 Or SVal = vbNullString Then
                ActiveSheet.Cells(7, 7) = vbNullString
                ActiveSheet.Cells(7, 6) = vbNullString
            Else
                ActiveSheet.Cells(7, 7) = SEmpF
                ActiveSheet.Cells(7, 6) = 2
                ThisWorkbook.Sheets("Lookup").Range("D1:D" & UBound(SEmpF, 1) + 1) = Application.WorksheetFunction.Transpose(SEmpF)
                Drop = "=Lookup!D1:D" & UBound(SEmpF, 1) + 1
            End If
        Else
            ActiveSheet.Cells(7, 7) = SDesF
            ActiveSheet.Cells(7, 6) = 7
            ThisWorkbook.Sheets("Lookup").Range("D1:D" & UBound(SDesF, 1) + 1) = Application.WorksheetFunction.Transpose(SDesF)
            Drop = "=Lookup!D1:D" & UBound(SDesF, 1) + 1
        End If
    Else
        ActiveSheet.Cells(7, 7) = SOrdF
        ActiveSheet.Cells(7, 6) = 1
        ThisWorkbook.Sheets("Lookup").Range("D1:D" & UBound(SOrdF, 1) + 1) = Application.WorksheetFunction.Transpose(SOrdF)
        Drop = "=Lookup!D1:D" & UBound(SOrdF, 1) + 1
    End If
    
    If ActiveSheet.Cells(7, 7) = vbNullString Then
        ActiveSheet.Cells(7, 7).Validation.Delete
    Else
        With ActiveSheet.Cells(7, 7).Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
            xlBetween, Formula1:=Drop
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = ""
        .InputMessage = ""
        .ErrorMessage = ""
        .ShowInput = True
        .ShowError = False
        End With
    End If
    SignProtect
End If

SafeExit:
        On Error GoTo 0

End Sub

Sub UseItem()

On Error GoTo SafeExit

If ActiveSheet.EnableSelection = xlNoSelection Then
    Exit Sub
Else

    Dim ColNo As Integer
    If ActiveSheet.Cells(7, 7) <> vbNullString Then
    
        ColNo = ActiveSheet.Cells(7, 6)
    
        If ColNo <> 2 And ActiveCell.Row > 10 And ActiveCell.Column < 9 And ActiveCell.Locked = False Then
            If ActiveCell <> vbNullString Then
                If MsgBox("Replace Selected Item?", vbOKCancel, "Confirm Overwrite") = vbOK Then ActiveSheet.Cells(ActiveCell.Row, ColNo) = ActiveSheet.Cells(7, 7)
            Else
                ActiveSheet.Cells(ActiveCell.Row, ColNo) = ActiveSheet.Cells(7, 7)
            End If
        End If
        
        If ActiveCell.Address = "$G$3" Or (ColNo = 2 And ActiveCell.Row = 2 And ActiveCell.Column > 8 And ActiveCell.Locked = False) Then
            If ActiveCell <> vbNullString Then
                If MsgBox("Replace Selected Item?", vbOKCancel, "Confirm Overwrite") = vbOK Then ActiveCell = ActiveSheet.Cells(7, 7)
            Else
                ActiveCell = ActiveSheet.Cells(7, 7)
            End If
        End If
        
        ActiveSheet.Cells(7, 7).ClearContents
        ActiveSheet.Cells(7, 7).Validation.Delete
    
    End If

End If

Exit Sub

SafeExit:
        On Error GoTo 0

End Sub

Sub CheckPO()

On Error GoTo SafeExit

Dim TSPO, AllPO, POEx As Variant
Dim RowNum, x, i, j As Integer
Dim txt As String
Dim TSDay As Date

RowNum = ActiveSheet.Range("F" & Rows.Count).End(xlUp).Row

AllPO = ThisWorkbook.Sheets("DataCustomerPO").UsedRange
TSPO = ActiveSheet.Range("E11:F" & RowNum)

x = 0
txt = "Purchase Order         Expiry" & vbCrLf
TSDay = Format(ActiveSheet.Range("G4"), "dd/mm/yyyy")
ReDim POEx(3, x)

For i = 1 To UBound(TSPO)
    For j = 1 To UBound(AllPO)
        If Trim(TSPO(i, 2)) = Trim(AllPO(j, 2)) And AllPO(j, 2) <> vbNullString Then
            POEx(1, x) = TSPO(i, 2)
            POEx(2, x) = Format(AllPO(j, 6), "dd/mm/yyyy")
            POEx(3, x) = IIf(Format(AllPO(j, 6), "dd/mm/yyyy") < TSDay, "Expired", "Okay")
            txt = txt & "   " & POEx(1, x) & "        " & POEx(2, x) & " " & POEx(3, x) & vbCrLf
            x = x + 1
            ReDim Preserve POEx(3, x)
        End If
    Next j
Next i

MsgBox txt, , "PO Expiry"

SafeExit:
        On Error GoTo 0

End Sub

Sub AutoAllow(Multi As String)

On Error GoTo SafeExit

Dim AllTS, AllMas, AllAuto, AllTSNew, EmpTS, AutoReq As Variant
Dim First, Last, LastA, LastAuto, LastEmp As Integer
Dim i, j, k, m, n, r, AddA, AddAuto, Klow, Khigh As Integer
Dim Auto, Wday As String

First = ActiveSheet.Range("allow_start").Row + 2
Last = ActiveSheet.Range("tt_lrow").Row - 1
LastEmp = ActiveSheet.Range("tot_hours").Column - 1

    If MasAllowances.UsedRange.Rows.Count < 2 Then
        LastA = 2
    Else
        LastA = MasAllowances.UsedRange.Rows.Count
    End If
    
    If MasAuto.UsedRange.Rows.Count < 2 Then
        LastAuto = 2
    Else
        LastAuto = MasAuto.UsedRange.Rows.Count
    End If

AllTS = ActiveSheet.Range("G" & First & ":H" & Last) 'Allowances used on current timesheet
AllMas = MasAllowances.Range("B2:I" & LastA) 'Allowances in master data table
AllAuto = MasAuto.Range("B2:E" & LastAuto) 'Allowances in master auto table
EmpTS = Application.Transpose(ActiveSheet.Range(ActiveSheet.Cells(2, 9), ActiveSheet.Cells(6, LastEmp)))
Wday = IIf(Weekday(ActiveSheet.Cells(4, 7), vbMonday) < 6, "Weekday", "Weekend")

If Multi = "Y" Then
    Klow = 1
    Khigh = UBound(EmpTS)
ElseIf Multi = "N" Then
    Klow = ActiveCell.Column - 8
    Khigh = ActiveCell.Column - 8
End If

For i = UBound(AllTS) To 1 Step -1 'Determines the last allowance before all other rows are blank
    If AllTS(i, 1) = vbNullString Then
        Last = i
    Else
        Exit For
    End If
Next i

For i = 1 To UBound(AllTS) 'Populate existing auto allowances
    For j = 1 To UBound(AllMas)
        If AllTS(i, 1) = AllMas(j, 1) And AllMas(j, 6) = "Yes" And (Wday = AllMas(j, 8) Or AllMas(j, 8) = vbNullString) Then
            For k = Klow To Khigh
                If EmpTS(k, 1) <> "" Then
                    ActiveSheet.Cells(First + i - 1, k + 8).Value = AllMas(j, 7)
                Else
                    ActiveSheet.Cells(First + i - 1, k + 8).Value = vbNullString
                End If
            Next k
        End If
    Next j
Next i

For i = 1 To UBound(AllMas) 'add new auto allowances if they dont exist
    AddA = 1
    If AllMas(i, 6) = "Yes" And (Wday = AllMas(i, 8) Or AllMas(i, 8) = vbNullString) Then
        For j = 1 To UBound(AllTS)
            If AllTS(j, 1) <> vbNullString Then
                If AllMas(i, 1) = AllTS(j, 1) Then
                    AddA = 0
                    Exit For
                End If
            End If
        Next j
        If AddA = 1 Then
            If (First + Last - 1) > ActiveSheet.Range("tt_lrow").Row - 1 Then
                MsgBox "Please Add Addtional Rows for Allowances" 'Insert_Row_2 'insert row to allowances id running out of space
                Exit Sub
            End If
            ActiveSheet.Cells(First + Last - 1, 7).Value = AllMas(i, 1)
            For k = Klow To Khigh
                If EmpTS(k, 1) <> "" Then
                    ActiveSheet.Cells(First + Last - 1, k + 8).Value = AllMas(i, 7)
                Else
                    ActiveSheet.Cells(First + Last - 1, k + 8).Value = vbNullString
                End If
            Next k
            Last = Last + 1
        End If
    End If
Next i

'------ Master Data specific Allowances -------'

Auto = "N"
For k = Klow To Khigh 'Check if any Auto Allowances are required
    If EmpTS(k, 1) <> "" Then
        For j = 1 To UBound(AllAuto)
            If EmpTS(k, 3) = AllAuto(j, 2) Or EmpTS(k, 5) = AllAuto(j, 2) Then
                Auto = "Y"
                Exit For
            End If
        Next j
        If Auto = "Y" Then Exit For
    End If
Next k

If Auto = "Y" Then

    Last = ActiveSheet.Range("tt_lrow").Row - 1
    AllTSNew = ActiveSheet.Range("G" & First & ":H" & Last) 'Allowances used on current timesheet after Auto applied
    ReDim AutoReq(2, 1)
    r = 1

    For k = Klow To Khigh 'Determine which Auto Allowances are required
        If EmpTS(k, 1) <> "" Then
            For j = 1 To UBound(AllAuto)
                AddAuto = 1
                For n = 1 To r - 1 'UBound(Application.Transpose(AutoReq))
                    If AllAuto(j, 3) = AutoReq(1, n) Then
                        AddAuto = 0
                    End If
                Next n
                If AddAuto = 1 Then
                    If EmpTS(k, 3) = AllAuto(j, 2) Or EmpTS(k, 5) = AllAuto(j, 2) Then
                        AutoReq(0, r) = AllAuto(j, 2)
                        AutoReq(1, r) = AllAuto(j, 3)
                        AutoReq(2, r) = AllAuto(j, 4)
                        r = r + 1
                        ReDim Preserve AutoReq(2, r)
                    End If
                End If
            Next j
        End If
    Next k

    For i = UBound(AllTSNew) To 1 Step -1 'Determines the last allowance before all other rows are blank
        If AllTSNew(i, 1) = vbNullString Then
            Last = i
        Else
            Exit For
        End If
    Next i

    For i = 1 To UBound(AllTSNew) 'Populate existing auto allowances
        For j = 1 To r - 1
            If AllTSNew(i, 1) = AutoReq(1, j) Then
                For k = Klow To Khigh
                    If EmpTS(k, 3) = AutoReq(0, j) Or EmpTS(k, 5) = AutoReq(0, j) Then
                        If Left(AutoReq(2, j), 1) = "(" Then
                            ActiveSheet.Cells(First + i - 1, k + 8).Value = "=R5C"
                        Else
                            ActiveSheet.Cells(First + i - 1, k + 8).Value = AutoReq(2, j)
                        End If
                    Else
                        ActiveSheet.Cells(First + i - 1, k + 8).Value = vbNullString
                    End If
                Next k
            End If
        Next j
    Next i

    For i = 1 To r - 1 'UBound(Application.Transpose(AutoReq)) 'add new auto allowances if they dont exist
        AddA = 1
        For j = 1 To UBound(AllTSNew)
            If AllTSNew(j, 1) <> vbNullString Then
                If AutoReq(1, i) = AllTSNew(j, 1) Then
                    AddA = 0
                    Exit For
                End If
            End If
        Next j

        If AddA = 1 Then
            If (First + Last - 1) > ActiveSheet.Range("tt_lrow").Row - 1 Then
                MsgBox "Please Add Addtional Rows for Allowances" 'Insert_Row_2 'insert row to allowances id running out of space
                Exit Sub
            End If
            ActiveSheet.Cells(First + Last - 1, 7).Value = AutoReq(1, i)
            For k = Klow To Khigh
                If EmpTS(k, 3) = AutoReq(0, i) Or EmpTS(k, 5) = AutoReq(0, i) Then
                    If Left(AutoReq(2, i), 1) = "(" Then
                        ActiveSheet.Cells(First + Last - 1, k + 8).Value = "=R5C"
                    Else
                        ActiveSheet.Cells(First + Last - 1, k + 8).Value = AutoReq(2, i)
                    End If
                Else
                    ActiveSheet.Cells(First + Last - 1, k + 8).Value = vbNullString
                End If
            Next k
            Last = Last + 1
        End If
    Next i

End If

For k = Klow To Khigh 'Clear Allowances when employee deleted
    If EmpTS(k, 1) = "" Then ActiveSheet.Range(Cells(First, k + 8), Cells(First + Last - 1, k + 8)) = ClearContents
Next k

SafeExit:
        On Error GoTo 0
End Sub

Sub PDF_All()

On Error GoTo SafeExit

Dim SelectSh, SelectWb As Variant
Dim i As Integer
Dim fldr As FileDialog
Dim folder_path, file_name, full_path As String
Dim FileTotal, FileNo As Integer
Dim wb As Workbook

Set fldr = Application.FileDialog(msoFileDialogFolderPicker)
ReDim SelectWb(0)

With fldr
    .Title = "Select a Folder"
    .AllowMultiSelect = False
    .InitialFileName = Application.DefaultFilePath
    If .Show <> 0 Then
        folder_path = .SelectedItems(1) & "\"
    Else
        Set fldr = Nothing
        Exit Sub
    End If
End With

Application.ScreenUpdating = False

file_name = Dir(folder_path) 'set file path
Do While file_name <> "" 'Count number of files in the directory
    FileTotal = FileTotal + 1
    file_name = Dir()
Loop

FileNo = 0

file_name = Dir(folder_path)
Do While Len(file_name) > 0 'Loop through workbooks until all files opened
    full_path = folder_path & file_name 'Set path of file to open
    
    If Right(file_name, 3) <> "zip" Then
    Set wb = Workbooks.Open(full_path)
    
    wb.Activate
        
    ReDim SelectSh(0)
    i = 0

    For Each sh In wb.Worksheets
        If (Left(sh.name, 12) = "TimeTemplate" Or Left(sh.name, 3) = "Mon" Or _
        Left(sh.name, 3) = "Tue" Or Left(sh.name, 3) = "Wed" Or _
        Left(sh.name, 3) = "Thu" Or Left(sh.name, 3) = "Fri" Or _
        Left(sh.name, 3) = "Sat" Or Left(sh.name, 3) = "Sun") And sh.Visible = True Then
            SelectSh(i) = sh.name
            i = i + 1
            ReDim Preserve SelectSh(i)
        End If
    Next
        
    If i > 0 Then
        SelectWb(FileNo) = full_path & ".pdf"
        FileNo = FileNo + 1
        ReDim Preserve SelectWb(FileNo)
        ReDim Preserve SelectSh(i - 1)
        wb.Sheets(SelectSh).Select
        MyFile = full_path & ".pdf"
        If MyFile <> "False" Then
            ActiveSheet.ExportAsFixedFormat _
            Type:=xlTypePDF, _
            filename:=MyFile, _
            Quality:=xlQualityHigh, _
            IncludeDocProperties:=True, _
            IgnorePrintAreas:=False, _
            OpenAfterPublish:=False
        End If
    End If
    
    wb.Close savechanges:=False
    End If
    file_name = Dir()
Loop

If FileNo > 0 Then
    ReDim Preserve SelectWb(FileNo - 1)
    Call CreateZipFile(SelectWb, folder_path & "Timesheet_PDF.zip")
End If

Application.ScreenUpdating = True
MsgBox FileNo & " Timesheets Saved to PDF" & vbCrLf & "Location " & folder_path, , "Processing Status"

SafeExit:
        On Error GoTo 0

End Sub

Sub CreateZipFile(folderToZipPath As Variant, zippedFileFullName As Variant)

Dim ShellApp As Object

'Create an empty zip file
Open zippedFileFullName For Output As #1
Print #1, Chr$(80) & Chr$(75) & Chr$(5) & Chr$(6) & String(18, 0)
Close #1

'Copy the files & folders into the zip file
Set ShellApp = CreateObject("Shell.Application")

For i = 0 To UBound(folderToZipPath)
    ShellApp.Namespace(zippedFileFullName).CopyHere folderToZipPath(i) 'ShellApp.Namespace(folderToZipPath).Items

    'Pause the macro until zipping has finished.
    On Error Resume Next
    Do Until ShellApp.Namespace(zippedFileFullName).Items.Count = i + 1 'ShellApp.Namespace(folderToZipPath).Items.Count
        Application.Wait (Now + TimeValue("0:00:01"))
    Loop
    On Error GoTo 0
Next i

End Sub

Function ListCheck(WorkType As String) As String

Dim TypeList As Variant
Dim Named As String
Dim i As Integer

TypeList = MasType.Range("Master_Type")
Named = ""

For i = 1 To UBound(TypeList)
    If WorkType = TypeList(i, 2) Then
        Named = TypeList(i, 3)
        Exit For
    End If
Next i

ListCheck = Named

End Function
Attribute VB_Name = "Module2"
Sub NamedRangeRow()

On Error GoTo SafeExit

    Dim Row As Integer

    Row = 1

    Do Until Len(Sheets("DataCustomerOrder").Cells(Row, 12).Value) = 0 'determines how many orders in the column
        Row = Row + 1
    Loop

    Sheets("DataCustomerOrder").Range("N2:O" & Row - 1).name = "OrderNoMap"

SafeExit:
        On Error GoTo 0

End Sub

Sub ExtractFast()

On Error GoTo SafeExit

'Example for Array Variant
Dim DataRange As Variant
Dim i, j As Integer
Dim MaxRows, MaxCols As Integer
Dim TimeStart As Double
Dim TimeRun As String

TimeStart = Timer
    
    MaxRows = Sheets("Summary").Range("C7:N34").CurrentRegion.Rows.Count
    MaxCols = Sheets("Summary").Range("C7:N34").CurrentRegion.Columns.Count

    DataRange = Sheets("Summary").Range("C7:N34")
    
    For i = 1 To MaxRows
        For j = 1 To MaxCols
        
            DataRange(i, j) = DataRange(i, j) + 2
        
        Next j
    Next i

    Sheets("Summary").Range("C7:N34") = DataRange

TimeRun = Format((Timer - TimeStart) / 86400 * 100000, "0.000")
MsgBox ("Time Taken " & TimeRun & "sec"), , "Performance"

SafeExit:
        On Error GoTo 0

End Sub
Sub tester()

On Error GoTo SafeExit

Dim P, f, s, a As String
Dim arg As String
Dim DataRange As Variant

P = "C:\Users\nathan.marom\Desktop\Test Esso\"
f = "2018-11-01-1 Timesheet.xlsm"
s = "Mon"
a = "G3"

'arg = "'" & P & "[" & F & "]" & S & "'!" & Range(A).Range("A1").Address(, , xlR1C1)
'getvalue = ExecuteExcel4Macro(arg)
 
'Range (ActiveSheet.Cells)
 
 
 With Sheets("Summary").Range("A5:D50")
    .Formula = "='C:\Users\nathan.marom\Desktop\Test Esso\[2018-11-01-1 Timesheet.xlsm]Mon'!A1"
    .Value = .Value
 End With

SafeExit:
        On Error GoTo 0

End Sub

Sub Updating()

On Error GoTo SafeExit

Application.EnableEvents = True

SafeExit:
        On Error GoTo 0

End Sub

Sub RemoveAllMacros(objDocument As Object)
' deletes all VBProject components from objDocument
' removes the code from built-in components that can't be deleted
' use like this: RemoveAllMacros ActiveWorkbook ' in Excel
' or like this: RemoveAllMacros ActiveWorkbookDocument ' in Word
' requires a reference to the
' Microsoft Visual Basic for Applications Extensibility library

On Error GoTo SafeExit

Dim i As Long, l As Long
    If objDocument Is Nothing Then Exit Sub
    i = 0
    On Error Resume Next
    i = objDocument.VBProject.VBComponents.Count
    On Error GoTo 0
    If i < 1 Then ' no VBComponents or protected VBProject
        MsgBox "The VBProject in " & objDocument.name & _
            " is protected or has no components!", _
            vbInformation, "Remove All Macros"
        Exit Sub
    End If
    With objDocument.VBProject
        For i = .VBComponents.Count To 1 Step -1
            On Error Resume Next
            .VBComponents.Remove .VBComponents(i)
            ' delete the component
            On Error GoTo 0
        Next i
    End With
    With objDocument.VBProject
        For i = .VBComponents.Count To 1 Step -1
            l = 1
            On Error Resume Next
            l = .VBComponents(i).CodeModule.CountOfLines
            .VBComponents(i).CodeModule.DeleteLines 1, l
            ' clear lines
            On Error GoTo 0
        Next i
    End With

SafeExit:
        On Error GoTo 0
End Sub
Attribute VB_Name = "Module3"
Sub RemExt()

On Error GoTo SafeExit

    Dim nName As name 'remove external named ranges

    For Each nName In ActiveWorkbook.Names
        If Left(nName, 2) = "='" Then nName.Delete
    Next nName

SafeExit:
        On Error GoTo 0

End Sub

Sub RemTable()

On Error GoTo SafeExit

    Dim wks As Worksheet, objList As ListObject

    Set wks = ActiveWorkbook.ActiveSheet
    For Each objList In wks.ListObjects
        objList.Unlist
    Next objList

SafeExit:
        On Error GoTo 0

End Sub

Function TableExists(ws As Worksheet, tblNam As String) As Boolean

On Error GoTo SafeExit

    Dim oTbl As ListObject
    For Each oTbl In ws.ListObjects
        If oTbl.name = tblNam Then
            TableExists = True
            Exit Function
        End If
    Next oTbl
    TableExists = False
    
SafeExit:
        On Error GoTo 0
    
End Function
'NINAEDIT
Sub Insert_Col()

On Error GoTo SafeExit

Dim Col, ClockRow, Prod_End, all_end As Integer

If ActiveSheet.EnableSelection = xlNoSelection Then
    Exit Sub
Else

'    If Selection.Column = ActiveCell.Column And Selection.Count = Rows.Count Then
'        Col = ActiveCell.Column
'    Else
        
        'Col = 1
        'Do Until ActiveSheet.Cells(2, Col) = "Total Hours"
        '    Col = Col + 1
        'Loop
            
        Col = Application.Match("Total Hours", ActiveSheet.Range("2:2"), 0)
        
        If ActiveCell.Column > 8 And ActiveCell.Column < Col Then
            Col = ActiveCell.Column + 1
        End If
        
'    End If

    Prod_End = ActiveSheet.Range("allow_start").Row
    all_end = ActiveSheet.Range("TT_lrow").Row
    
    SignUnprotect
    Application.EnableEvents = False
    ClockRow = Application.Match("Allowances", ActiveSheet.Range("A:A"), 0)
    Columns(Col - 1).Copy
    Columns(Col).Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
    'NINAEDIT
    'ActiveSheet.Cells(2, Col).Value = ""
    'ActiveSheet.Cells(2, Col).Select
    ActiveSheet.Columns(Col).Value = ""
    ActiveSheet.Cells(1, Col).FormulaR1C1 = "=IFERROR(LEFT(INDEX(LabSelect,MATCH(R2C,Labour,0),6),3)&""-""&LEFT(INDEX(LabSelect,MATCH(R2C,Labour,0),7),3),"""")"
    ActiveSheet.Cells(3, Col).FormulaR1C1 = "=IFERROR(INDEX(LabSelect,MATCH(R2C,Labour,0),2),"""")"
    ActiveSheet.Cells(4, Col).FormulaR1C1 = "=IFERROR(INDEX(LabSelect,MATCH(R2C,Labour,0),5),"""")"
    ActiveSheet.Cells(5, Col).FormulaR1C1 = "=SUM(R10C:OFFSET(R[" & Prod_End - 5 & "]C,-1,0))+SUMIF(OFFSET(R[" & Prod_End - 5 & "]C8,2,0):OFFSET(R[" & all_end - 5 & "]C8,-1,0),""H""&""*"",OFFSET(R[" & Prod_End - 5 & "]C,2,0):OFFSET(R[" & all_end - 5 & "]C,-1,0))"
    'ActiveSheet.Cells(5, Col).FormulaR1C1 = "=SUM(R[6]C:OFFSET(R[" & prod_end - 5 & "]C,-1,0))"
    ActiveSheet.Cells(9, Col).FormulaR1C1 = "=IFERROR(INDEX(LabSelect,MATCH(R2C,Labour,0),5),"""")"
    ActiveSheet.Cells(10, Col).FormulaR1C1 = "=IFERROR(INDEX(LabSelect,MATCH(R2C,Labour,0),8),"""")"
    ActiveSheet.Cells(ClockRow, Col).FormulaR1C1 = "=IFERROR(IF(R5C=0,"""",TEXT(MOD(R8C-R7C,1)*24,""0.0#"") & ""  ("" & TEXT((MOD(R8C-R7C,1)*24)-R5C,""0.0#"") &"")""),"""")"
    print_row = ActiveSheet.Range("print_row").Row
    ActiveSheet.Cells(print_row, Col).ClearFormats

    'black
    With Cells(5, Col).Font
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
    End With
    With Cells(5, Col).Interior
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    
    Application.EnableEvents = True
    SignProtect
End If

If ActiveCell.Column < 19 Then BuildSign

SafeExit:
        On Error GoTo 0

End Sub

Function FindRow(arg As String)

On Error GoTo SafeExit

    Dim LastRow, Row, RowAllow, RowProd, RowEmrg, RowNPH, RowOT As Integer

    LastRow = Range("A" & Rows.Count).End(xlUp).Row
    Row = 8

    Do Until Row = LastRow
        If ActiveSheet.Cells(Row, 1) = "PRODUCTIVE HOURS" Then
            RowAllow = Row
            'Debug.Print RowAllow
        ElseIf ActiveSheet.Cells(Row, 1) = "VARIATION HOURS" Then
            RowProd = Row
            'Debug.Print RowProd
        ElseIf ActiveSheet.Cells(Row, 1) = "DELAY HOURS" Then
            RowEmrg = Row
            'Debug.Print RowEmrg
        ElseIf ActiveSheet.Cells(Row, 1) = "OVERTIME HOURS" Then
            RowNPH = Row
            'Debug.Print RowNPH
        End If

        Row = Row + 1
    Loop

    If Row = LastRow Then
        RowOT = Row
        'Debug.Print RowOT
    End If

    If arg = "a" Then
        FindRow = RowAllow - 1
    ElseIf arg = "p" Then
        FindRow = RowProd - 1
    ElseIf arg = "v" Then
        FindRow = RowEmrg - 1
    ElseIf arg = "d" Then
        FindRow = RowNPH - 1
    ElseIf arg = "o" Then
        FindRow = LastRow
    End If

SafeExit:
        On Error GoTo 0

End Function

Sub Insert_Row_ARCHIVE()

On Error GoTo SafeExit

Dim Row, FirstRow, LastRow, i, LastAllow, LastProd, LastEmerg, LastNonProd, LastOver As Integer

If ActiveSheet.EnableSelection = xlNoSelection Then
Exit Sub
Else
    LastRow = Range("A" & Rows.Count).End(xlUp).Row - 8
    
    For i = 1 To LastRow
        Select Case Cells(i, 1)

            Case "PRODUCTIVE HOURS"
                FirstRow = i + 2

            Case "ALLOWANCES"
                LastAllow = i - 1

            Case "VARIATION HOURS"
                LastProd = i - 1

            Case "DELAY HOURS"
                LastEmerg = i - 1

            Case "OVERTIME HOURS"
                LastNonProd = i - 1

        End Select

    Next i

    Select Case Application.Caller

        Case "RowAdd1"
            Row = LastAllow

        Case "RowAdd2"
            Row = LastRow - 2 'LastProd

        Case "RowAdd3"
            Row = LastEmerg

        Case "RowAdd4"
            Row = LastNonProd

        Case "RowAdd5"
            Row = LastRow - 1

    End Select

    Application.EnableEvents = False
    SignUnprotect
    Rows(Row).Copy
    Rows(Row).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
    ActiveSheet.Cells(Row + 1, 3).Value = ""
    SignProtect
    Application.EnableEvents = True
End If

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub


'NINAEDIT
Sub Insert_Row_1()

On Error GoTo SafeExit

Dim Row, FirstRow, LastRow, i, LastAllow, LastProd, LastEmerg, LastNonProd, LastOver, Lines As Integer

If ActiveSheet.EnableSelection = xlNoSelection Then
Exit Sub
Else
    LastRow = Range("A" & Rows.Count).End(xlUp).Row - 8

    For i = 1 To LastRow
        Select Case Cells(i, 1)

            Case "WORKED HOURS"
                FirstRow = i + 2
                
            Case "ALLOWANCES"
                LastAllow = i - 1

        End Select

    Next i

    Select Case Application.Caller

        Case "RowAdd1"
            Row = LastAllow
            If ActiveCell.Row > 10 And ActiveCell.Row < LastAllow Then
                Row = ActiveCell.Row
            End If
            Lines = LastAllow - FirstRow + 1
            cols = Range("tot_hours").Column - 1

    End Select

    Application.EnableEvents = False
    SignUnprotect
    Rows(Row).Copy
    Rows(Row).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
    ActiveSheet.Range(Cells(Row + 1, 1), Cells(Row + 1, cols)).Value = ""
    ActiveSheet.Cells(Row + 1, cols + 2).Value = ""
    SignProtect
    Application.EnableEvents = True
End If

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub


'NINAEDIT
Sub Insert_Row_2()

On Error GoTo SafeExit

Dim Row, FirstRow, LastRow, i, LastAllow, LastProd, LastEmerg, LastNonProd, LastOver, Lines As Integer

If ActiveSheet.EnableSelection = xlNoSelection Then
Exit Sub
Else
    LastRow = Range("A" & Rows.Count).End(xlUp).Row - 8

    For i = 1 To LastRow
        Select Case Cells(i, 1)
        
            Case "WORKED HOURS"
                FirstRow = i + 2

            Case "ALLOWANCES"
                LastAllow = i + 2

        End Select

    Next i

    Select Case Application.Caller

        Case "RowAdd2"
            Row = LastRow 'LastProd
            
            If ActiveCell.Row > LastAllow - 1 And ActiveCell.Row < LastRow Then
                Row = ActiveCell.Row
            End If
            
            Lines = (LastRow + 1) - LastAllow 'LastProd - LastAllow
            cols = Range("tot_hours").Column - 1
            
    End Select

    Application.EnableEvents = False
    SignUnprotect
    Rows(Row).Copy
    Rows(Row).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
    ActiveSheet.Range(Cells(Row + 1, 1), Cells(Row + 1, cols)).Value = ""
    ActiveSheet.Cells(Row + 1, cols + 2).Value = ""
    ActiveSheet.Cells(Row + 1, 8).FormulaR1C1 = "=IFERROR(INDEX(AllowUnits,MATCH(RC7,Allowance,0),2),"""")"
    SignProtect
    Application.EnableEvents = True
End If

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub

Sub Delete_Col()

On Error GoTo SafeExit

Dim Col, ColEmp, ColAct, RowWork, RowAllow, RowEnd As Integer

If ActiveSheet.EnableSelection = xlNoSelection Then
Exit Sub
Else
        
    ColEmp = Application.Match("Total Hours", ActiveSheet.Range("2:2"), 0)
    ColAct = ActiveCell.Column
    RowWork = Application.Match("Worked Hours", ActiveSheet.Range("A:A"), 0) + 2
    RowAllow = Application.Match("Allowances", ActiveSheet.Range("A:A"), 0) + 2
    RowEnd = Application.Match("RowEnd", ActiveSheet.Range("A:A"), 0) - 2
    
    If ColAct > 8 And ColAct < ColEmp Then
        Col = ColAct + 1
    End If

    If ColEmp > 19 Then
        SignUnprotect
        Application.EnableEvents = False
        Columns(Col - 1).Delete Shift:=xlToLeft
        ActiveSheet.Cells(2, Col - 2).Select
        Application.EnableEvents = True
        SignProtect
        BuildSign
    ElseIf ColAct > 8 Then
        Application.EnableEvents = False
            With ActiveSheet
            .Cells(2, ColAct).ClearContents
            .Range(.Cells(6, ColAct), .Cells(8, ColAct)).ClearContents
            .Range(.Cells(RowWork, ColAct), .Cells(RowAllow - 3, ColAct)).ClearContents
            .Range(.Cells(RowAllow, ColAct), .Cells(RowEnd, ColAct)).ClearContents
            End With
        Application.EnableEvents = True
    End If
End If

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub
Sub Delete_Row_ARCHIVE()

On Error GoTo SafeExit

Dim Row, FirstRow, LastRow, i, LastAllow, LastProd, LastEmerg, LastNonProd, LastOver, Lines As Integer

If ActiveSheet.EnableSelection = xlNoSelection Then
Exit Sub
Else
    LastRow = Range("A" & Rows.Count).End(xlUp).Row - 8

    For i = 1 To LastRow
        Select Case Cells(i, 1)

            Case "WORKED HOURS"
                FirstRow = i + 2

            Case "ALLOWANCES"
                LastAllow = i + 2

            Case "VARIATION HOURS"
                LastProd = i - 1

            Case "DELAY HOURS"
                LastEmerg = i - 1

            Case "OVERTIME HOURS"
                LastNonProd = i - 1

        End Select

    Next i

    Select Case Application.Caller

        Case "RowDel1"
            Row = LastAllow
            Lines = LastAllow - FirstRow

        Case "RowDel2"
            Row = (LastRow - 0) 'LastProd
            Lines = (LastRow + 1) - LastAllow 'LastProd - LastAllow

        Case "RowDel3"
            Row = LastEmerg
            Lines = LastEmerg - LastProd

        Case "RowDel4"
            Row = LastNonProd
            Lines = LastNonProd - LastEmerg

        Case "RowDel5"
            Row = LastRow - 1
            Lines = (LastRow - 1) - LastNonProd

    End Select

    Application.EnableEvents = False
    If Lines > 3 Then
        SignUnprotect
        Rows(Row).Delete Shift:=xlUp
        ActiveSheet.Cells(Row - 1, 1).Select
        SignProtect
    End If
    Application.EnableEvents = True
End If

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub


'NINAEDIT
Sub Delete_Row_1()

On Error GoTo SafeExit

Dim Row, FirstRow, LastRow, i, LastAllow, LastProd, LastEmerg, LastNonProd, LastOver, Lines, EmpCol, RowAct As Integer

If ActiveSheet.EnableSelection = xlNoSelection Then
Exit Sub
Else
    LastRow = Range("A" & Rows.Count).End(xlUp).Row - 8
    EmpCol = Application.Match("Total Hours", ActiveSheet.Range("2:2"), 0) - 1
    RowAct = ActiveCell.Row
    
    For i = 1 To LastRow
        Select Case Cells(i, 1)

            Case "WORKED HOURS"
                FirstRow = i + 2
                
            Case "ALLOWANCES"
                LastAllow = i - 1

        End Select

    Next i

    Select Case Application.Caller

        Case "RowDel1"
            Row = LastAllow
            If ActiveCell.Row > 10 And ActiveCell.Row < LastAllow Then
                Row = ActiveCell.Row
            End If
            Lines = LastAllow - FirstRow + 1

    End Select

    Application.EnableEvents = False
    If Lines > 8 Then 'And Cells(Row, 1).Value = "" Then
        SignUnprotect
        Rows(Row).Delete Shift:=xlUp
        ActiveSheet.Cells(Row - 1, 1).Select
        SignProtect
    Else
        With ActiveSheet
            .Range(.Cells(RowAct, 1), .Cells(RowAct, EmpCol)).ClearContents
        End With
    End If
    Application.EnableEvents = True
End If

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub


'NINAEDIT
Sub Delete_Row_2()

On Error GoTo SafeExit

Dim Row, FirstRow, LastRow, i, LastAllow, LastProd, LastEmerg, LastNonProd, LastOver, Lines, EmpCol, RowAct As Integer

If ActiveSheet.EnableSelection = xlNoSelection Then
Exit Sub
Else
    LastRow = Range("A" & Rows.Count).End(xlUp).Row - 8
    EmpCol = Application.Match("Total Hours", ActiveSheet.Range("2:2"), 0) - 1
    RowAct = ActiveCell.Row

    For i = 1 To LastRow
        Select Case Cells(i, 1)
        
            Case "WORKED HOURS"
                FirstRow = i + 2

            Case "ALLOWANCES"
                LastAllow = i + 2

        End Select

    Next i

    Select Case Application.Caller

        Case "RowDel2"
            Row = LastRow 'LastProd
            If ActiveCell.Row > LastAllow - 1 And ActiveCell.Row < LastRow Then
                Row = ActiveCell.Row
            End If
            Lines = (LastRow + 1) - LastAllow 'LastProd - LastAllow

    End Select

    Application.EnableEvents = False
    If Lines > 5 Then 'And Cells(Row, 1).Value = "" Then
        SignUnprotect
        Rows(Row).Delete Shift:=xlUp
        ActiveSheet.Cells(Row - 1, 1).Select
        SignProtect
    Else
        With ActiveSheet
            .Range(.Cells(RowAct, 1), .Cells(RowAct, 7)).ClearContents
            .Range(.Cells(RowAct, 9), .Cells(RowAct, EmpCol)).ClearContents
        End With
    End If
    Application.EnableEvents = True
End If

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub


Sub RenSheet()

On Error GoTo SafeExit

    Dim TestName, x As Integer
    Dim OrigName As String

    If Cells(4, 3) <> ActiveSheet.name And Cells(4, 3) <> "" Then

        OrigName = ActiveSheet.name
        TestName = 0
        For Each ws In Sheets
            If Cells(4, 3) = ws.name Then TestName = 1
        Next ws

        If TestName < 1 Then
            ActiveSheet.name = Cells(4, 3)
        Else
            MsgBox ("Timesheet already exists for Employee (" & Cells(4, 3) & ")")
            Cells(4, 3) = OrigName
        End If
    End If

SafeExit:
        On Error GoTo 0

End Sub

Sub NewSheet()

On Error GoTo SafeExit

    ActiveWorkbook.Sheets("Template").Visible = True
    ActiveWorkbook.Sheets("Template").Copy After:=Sheets(Sheets.Count)
    ActiveWorkbook.Sheets("Template").Visible = False

SafeExit:
        On Error GoTo 0

End Sub

Sub AllSheetName()

On Error GoTo SafeExit

    Dim x, i, j, LastRow As Integer
    Dim ValNo, ValYes As String

    Sheets("data").Range("S2:T61").ClearContents

    x = 1
    For Each ws In Sheets
        Sheets("Data").Cells(x + 1, "T").Value = ws.name
        x = x + 1
    Next ws

    ValNo = ""
    ValYes = "Yes"

    LastRow = Worksheets("Data").Cells(Rows.Count, 15).End(xlUp).Row - 1 'returns the last row number with data
    'LastRow = 50
    For i = 1 To LastRow
        Sheets("Data").Cells(i + 1, "S").Value = "=IF(IFERROR(VLOOKUP(N" & i + 1 & ",$T$2:$T$61,1,FALSE),0)=0,0,1)"
    Next i

    For j = 1 To 60
        If UserForm1.Controls("TS" & j).Value = 1 Then UserForm1.Controls("TS" & j).BackColor = RGB(226, 239, 218)
    Next j

SafeExit:
        On Error GoTo 0

End Sub

Sub NewSheetButton()

On Error GoTo SafeExit

    Dim Button As Integer

    'buttontext = Application.Caller
    buttontext = UserForm1.ActiveControl.name

    ActiveSheet.Select
    ActiveSheet.Copy After:=Sheets(Sheets.Count)

    Button = Mid(buttontext, 2, Len(buttontext) - 1)

    UserForm1.Controls("TS" & Button).BackColor = RGB(226, 239, 218)
    UserForm1.Controls("TS" & Button).Text = 1
    ActiveSheet.Cells(4, 3) = Sheets("Data").Cells(Button + 1, "N")

SafeExit:
        On Error GoTo 0

End Sub

Sub ClearTime()

On Error GoTo SafeExit

    ActiveSheet.Range("C13:I24").ClearContents
    ActiveSheet.Range("C29:I36").ClearContents
    ActiveSheet.Range("C39:I44").ClearContents
    ActiveSheet.Range("C53:I57").ClearContents
    ActiveSheet.Range("B61:I72").ClearContents

SafeExit:
        On Error GoTo 0

End Sub

Sub Extract()

On Error GoTo SafeExit

    Dim DataRange As Variant
    Dim DataSum() As Variant
    Dim x, i, j, k, Col, RowCount As Integer
    Dim Allow, AllowTot As Double
    Dim WorkStart, WorkEnd, AllowStart As Integer
    Dim Prod, Emer, Npro, Over As Integer
    Dim NameSh, TimeRun, App, CustSig, CompSig, TimeID As String
    Dim TimeStart As Double

    x = 0
    NameSh = "Summary"
    ReDim DataSum(22, x) 'columns and rows switched due to redim limitation (must use second attribute)
   
    TimeStart = Timer
    Application.StatusBar = "Extracting Data..."
    
    ActiveSheet.Unprotect
    Application.ScreenUpdating = False 'Process optimisation
    Application.EnableEvents = False

    For Each ws In Sheets
        If ws.name = "Mon" Or ws.name = "Tue" Or ws.name = "Wed" Or _
           ws.name = "Thu" Or ws.name = "Fri" Or ws.name = "Sat" Or ws.name = "Sun" Then
            If ws.Cells(1, 4) = 1 Then

                RowCount = ws.Range("A" & Rows.Count).End(xlUp).Row 'Determine the number of rows
                                
                For y = 1 To RowCount 'Determine the allowance range
                        Select Case ws.Cells(y, 1)
                            Case "WORKED HOURS"
                                WorkStart = y + 2
                            Case "ALLOWANCES"
                                WorkEnd = y - 1
                                AllowStart = y + 2
                                AllowEnd = RowCount - 8
                        End Select
                    Next y

                    Col = 1
                    Do Until ws.Cells(2, Col) = "Total Hours"
                        Col = Col + 1
                    Loop

                    DataRange = ws.Range(ws.Cells(1, 1), ws.Cells(RowCount - 2, Col - 1))
                    
                    If ws.Range("AppChk") <> vbNullString Then 'Data for approvals
                        TimeID = ws.Cells(8, 1)
                        App = Format(ws.Range("FinalTime").Value, "yyyy/mm/dd hh:mm")
                        CustSig = ws.Range("PrintCustName").Value
                        CompSig = ws.Range("PrintCompName").Value
                    End If
                    
                    For i = 9 To Col - 1 'cycle through each employee column
                        For j = WorkStart To AllowEnd 'cycle through worked hours
                            'Application.StatusBar = "Extracting Data... " & FileCount & " " & ws.Name & " Col " & i - 7 & " Row " & j 'display status information
                            If DataRange(2, i) <> 0 And DataRange(2, i) <> vbNullString Then
                                If DataRange(j, i) <> 0 And DataRange(j, i) <> vbNullString And j <> AllowStart - 2 Then
                                    
                                        DataSum(0, x) = Format(DataRange(4, 7), "mm/dd/yyyy") 'Date (day and month switch for some unknown reason)
                                        DataSum(11, x) = DataRange(6, i) 'Shift
                                        DataSum(12, x) = DataRange(3, 7) 'Supervisor
                                        DataSum(1, x) = DataRange(j, 5) 'External Reference
                                        DataSum(2, x) = DataRange(j, 1) 'Workorder
                                        DataSum(3, x) = DataRange(j, 2) 'Operation
                                        DataSum(4, x) = DataRange(3, i) 'Employee ID
                                        DataSum(5, x) = DataRange(2, i) 'Name
                                        DataSum(6, x) = DataRange(1, i) 'Emp Type
                                        DataSum(7, x) = DataRange(4, i) 'Trade
                                        DataSum(13, x) = Now() 'TimeStamp
                                        DataSum(14, x) = ActiveWorkbook.name 'Filename
                                        DataSum(19, x) = DataRange(5, 6) 'Site UID
                                        DataSum(20, x) = DataRange(3, i) & "-" & Format(DataRange(4, 7), "dd/mm/yyyy") 'Emp-Day UID
                                        DataSum(21, x) = RoleP6(CStr(DataRange(4, i)))
                                        DataSum(22, x) = CompName(CStr(DataRange(3, i)))
                                        If ws.Range("AppChk") <> vbNullString Then 'Timesheet Approval Details
                                            DataSum(15, x) = TimeID
                                            DataSum(16, x) = App
                                            DataSum(17, x) = CustSig
                                            DataSum(18, x) = CompSig
                                        End If
                                        DataSum(9, x) = DataRange(j, i)
                                        
                                        If j >= WorkStart And j <= WorkEnd Then
                                            If ListCheck(CStr(DataRange(j, 3))) <> vbNullString Then
                                                DataSum(8, x) = DataRange(j, 3) & " - " & DataRange(j, 7) 'Type
                                            Else
                                                DataSum(8, x) = DataRange(j, 3)
                                            End If
                                            DataSum(10, x) = "Hours" 'Units
                                        ElseIf j >= AllowStart And j <= AllowEnd Then
                                            DataSum(8, x) = "Allow" & " - " & DataRange(j, 7) 'Type
                                            DataSum(10, x) = DataRange(j, 8) 'Units
                                        End If

                                    'If Left(ws.Cells(j, 3), 3) <> "WBS" Then 'Check whether WBS or Service Order ' disabled to check speed
                                    '    With ThisWorkbook.Sheets(NameSh).Cells(x, 2)
                                    '        .FormulaR1C1 = "=IFERROR(INDEX(WO_Customer,MATCH(RC[1],WO_UGL,0)),"""")"
                                    '        '.Value = .Value
                                    '    End With
                                    'End If
                                    x = x + 1
                                    ReDim Preserve DataSum(22, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                End If
                            End If
                        Next j
                    Next i
                    
            End If
        End If
    Application.StatusBar = "Extracting Data... " & ws.name
    Next ws

    If x > 0 Then ThisWorkbook.Sheets("Summary").Range("A4:W" & x + 3) = Application.WorksheetFunction.Transpose(DataSum)
       
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Application.StatusBar = False
    ActiveSheet.Protect
    
    TimeRun = Format((Timer - TimeStart) / 86400, "hh:mm:ss")
    MsgBox "Extract Completed... Time " & TimeRun, , "Timesheet Extract"
    
    'LastRow = Range("A4").CurrentRegion.Rows.Count + 2

    'If TableExists(ActiveSheet, "DataSummary") = False Then
    '    ActiveSheet.ListObjects.Add(xlSrcRange, Range("A3:O" & LastRow)).Name = "DataSummary"
    '    ActiveSheet.ListObjects("DataSummary").TableStyle = ""
    'End If
Exit Sub

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        Application.StatusBar = False
        ActiveSheet.Protect
        On Error GoTo 0
   
End Sub
Sub ExtractEBA()

On Error GoTo SafeExit

    Dim DataRangeAllow, DataRange As Variant
    Dim DataSum() As Variant
    Dim DataRow As Integer
    
    Dim x, i, j, k, y, Col, RowCount, AllowStart, AllowEnd As Integer
    Dim EBAj, EBAi, EBAt, EBAw As Integer
    Dim EBA, TH, THR, THB, WOH, WOR, EBAR As Double
    Dim day As Date
    Dim Shift As String
    Dim Prod, Emer, Npro, Over As Integer
    Dim DictHrs As New Scripting.Dictionary
    Dim DictEBA As New Scripting.Dictionary
    Dim EmpID, TimeRun As String
    Dim Arr(0 To 3) As Long
    Dim TimeStart As Double

    x = 0
    k = 4
    
    NameSh = "SummaryEBA"
    
    ReDim DataSum(16, x) 'columns and rows switched due to redim limitation (must use second attribute)
    
    TimeStart = Timer
    Application.StatusBar = "Extracting Data..."

    ActiveSheet.Unprotect
    Application.ScreenUpdating = False 'Process optimisation
    Application.EnableEvents = False

    '''''''''''''''''''' Start Pull Data ''''''''''''''''''''
    For Each ws In Sheets
        If ws.name = "Mon" Or ws.name = "Tue" Or ws.name = "Wed" Or _
           ws.name = "Thu" Or ws.name = "Fri" Or ws.name = "Sat" Or ws.name = "Sun" Then
            If ws.Cells(1, 4) = 1 Then

                RowCount = ws.Range("A" & Rows.Count).End(xlUp).Row 'Determine the number of rows

                For y = 1 To RowCount 'Determine the allowance range
                    Select Case ws.Cells(y, 1)
                        Case "WORKED HOURS"
                            WorkStart = y + 2
                        Case "ALLOWANCES"
                            WorkEnd = y - 1
                            AllowStart = y + 2
                            AllowEnd = RowCount - 2
                    End Select
                Next y

                Col = 1
                Do Until ws.Cells(2, Col) = "Total Hours" 'Determine number of employee columns
                    Col = Col + 1
                Loop

                day = Weekday(ws.Cells(4, 6), vbMonday) 'Determine day of week as integer starting Monday = 1
                Shift = ws.Cells(5, 6) 'Determine Shift

                ' Find and set EBA parameters (reset each worksheet/day)
                If ws.Cells(5, 6) = "Public" Then 'Check Public Holiday
                    EBAw = 8
                ElseIf day < 6 And Shift = "Day" Then 'Day Shift
                    EBAw = 2
                ElseIf day < 6 And Shift = "Afternoon" Then 'Afternoon Shift
                    EBAw = 3
                ElseIf day < 6 And Shift = "Night" Then 'Night Shift
                    EBAw = 4
                ElseIf day = 6 And Shift <> "Night" Then 'Saturday Day Shift
                    EBAw = 5
                ElseIf day = 6 And Shift = "Night" Then 'Saturday Night Shift
                    EBAw = 6
                    Else 'Sunday Shift
                    EBAw = 7
                End If

                EBAi = 3 'set EBA counter to start in column 3
                EBAt = 3
                
                ' ADD NEW
                DataRange = ws.Range(ws.Cells(1, 1), ws.Cells(RowCount, Col - 1))
                
                For i = 9 To Col - 1 'cycle through each employee column

                    If Left(ws.Cells(1, i), 5) = "Wages" Then 'Use Wages Calculations

                        'Initialise variables for each employee
                        TH = ws.Cells(5, i) 'select the total hours worked for each employee
                        THB = 0 'Total Hour Bucket
                        THR = TH - THB 'Total Hours Remaining

                        If Left(ws.Cells(1, i), 5) = "Staff" Then 'Set EBA for staff
                            EBAj = 9 'Switch to Staff scenario
                        Else
                            EBAj = EBAw 'Switch back to Wages scenario
                        End If
                        EBAR = Sheets("EBA").Cells(EBAj, EBAi)

                        For j = WorkStart To AllowEnd 'cycle through each work order
                            If DataRange(2, i) <> 0 Or DataRange(2, i) <> vbNullString Then
                                If DataRange(j, i) <> 0 Or DataRange(j, i) <> vbNullString Then
                                
                                    'Initialise variables for each work order
                                    WOH = ws.Cells(j, i) 'Work Order Hours
                                    WOR = WOH ' Work Order Hours Remaining
                                    Debug.Print "WOR New Work Order"; WOR

                                    If j <= WorkEnd Then 'Search Working Hours
                                        Do Until WOR = 0 'loop until hours of work order have been allocated
                                            EBA = Sheets("EBA").Cells(EBAj, EBAi) 'Set EBA
                                            If EBA = 0 Then
                                                EBAi = EBAi + 1
                                                EBAt = EBAt + 1
                                                EBAR = Sheets("EBA").Cells(EBAj, EBAi)
                                            Else

                                                Debug.Print "EBA Start"; EBA
                                                Debug.Print "EBAR: "; EBAR
                                                Debug.Print "EBAi"; EBAi

                                                ' Is Work Order Hours Remaining to be allocated less/greater than or equal to the EBA Remaining to be aloocated
                                                If WOR < EBAR Then
                                                    hours = WOR 'set hours to be written to the sheet
                                                    WOR = WOR - hours
                                                    EBAR = EBAR - hours
                                                    'ThisWorkbook.Sheets("SummaryEBA").Cells(x, 12).Value = Sheets("EBA").Cells(1, EBAt)  'Rate Type
                                                    ' ADD NEW
                                                    DataSum(11, x) = Sheets("EBA").Cells(1, EBAt)  'Rate Type

                                                ElseIf WOR > EBAR Then
                                                    hours = WOR - (WOR - EBAR)
                                                    WOR = Application.WorksheetFunction.Max(0, WOR - hours)
                                                    'ThisWorkbook.Sheets("SummaryEBA").Cells(x, 12).Value = Sheets("EBA").Cells(1, EBAt)  'Rate Type
                                                    ' ADD NEW
                                                    DataSum(11, x) = Sheets("EBA").Cells(1, EBAt)  'Rate Type
                                                    EBAi = EBAi + 1
                                                    EBAt = EBAt + 1
                                                    EBAR = Sheets("EBA").Cells(EBAj, EBAi)

                                                Else
                                                    hours = WOR
                                                    WOR = 0
                                                    'ThisWorkbook.Sheets("SummaryEBA").Cells(x, 12).Value = Sheets("EBA").Cells(1, EBAt)  'Rate Type
                                                    ' ADD NEW
                                                    DataSum(11, x) = Sheets("EBA").Cells(1, EBAt)  'Rate Type
                                                    EBAi = EBAi + 1
                                                    EBAt = EBAt + 1
                                                    EBAR = Sheets("EBA").Cells(2, EBAi)
                                                End If
                                                                                                                                                
                                                DataSum(0, x) = Format(DataRange(4, 7), "mm/dd/yyyy")  'Date
                                                DataSum(12, x) = DataRange(6, i) 'Shift
                                                DataSum(13, x) = DataRange(3, 7) 'Supervisor
                                                DataSum(2, x) = DataRange(j, 1) 'Workorder
                                                DataSum(3, x) = DataRange(j, 2) 'Operation
                                                DataSum(1, x) = DataRange(j, 5) 'External Order
                                                DataSum(4, x) = DataRange(3, i) 'Employee ID
                                                DataSum(5, x) = DataRange(2, i) 'Name
                                                DataSum(6, x) = DataRange(1, i) 'Emp Type
                                                DataSum(7, x) = DataRange(4, i) 'Trade
                                                DataSum(14, x) = Now() 'TimeStamp
                                                DataSum(15, x) = ActiveWorkbook.name 'Filename
                                                DataSum(10, x) = "Hours" 'Units
                                                DataSum(9, x) = hours 'Quantity
                                                DataSum(8, x) = DataRange(j, 3) 'Type
                                                DataSum(10, x) = "Hours" 'Units

                                                THB = THB + hours
                                                THR = TH - THB

                                                Debug.Print "hours"; hours
                                                Debug.Print "THB"; THB
                                                Debug.Print "THR"; THR
                                                Debug.Print "WOR"; WOR
                                                Debug.Print "EBAR"; EBAR
                                                Debug.Print "EBA End"; EBA
                                                Debug.Print "-----"
                                                x = x + 1 'add new line
                                                ReDim Preserve DataSum(16, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                            End If
                                        Loop
                                    
                                    ElseIf j >= AllowStart Then ' Search Allowances

                                        DataSum(8, x) = "Allow" 'Type
                                        DataSum(0, x) = Format(DataRange(4, 7), "mm/dd/yyyy") 'Date
                                        DataSum(12, x) = DataRange(6, i) 'Shift
                                        DataSum(13, x) = DataRange(3, 7) 'Supervisor
                                        DataSum(2, x) = DataRange(j, 1) 'Workorder
                                        DataSum(3, x) = DataRange(j, 2) 'Operation
                                        DataSum(1, x) = DataRange(j, 5) 'External Order
                                        DataSum(4, x) = DataRange(3, i) 'Employee ID
                                        DataSum(5, x) = DataRange(2, i) 'Name
                                        DataSum(6, x) = DataRange(1, i) 'Emp Type
                                        DataSum(7, x) = DataRange(4, i) 'Trade
                                        DataSum(14, x) = Now() 'TimeStamp
                                        DataSum(15, x) = ActiveWorkbook.name 'Filename
                                        DataSum(10, x) = DataRange(j, 8) 'Units
                                        DataSum(9, x) = DataRange(j, i) 'Quantity
                                        DataSum(11, x) = DataRange(j, 7) 'Rate
                                        
                                        x = x + 1
                                        ReDim Preserve DataSum(16, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                    End If
                                End If
                            End If
                        Next j
                        EBAi = 3  'reset EBA
                        EBAt = 3
                        EBAR = Sheets("EBA").Cells(EBAj, EBAi) 'reset EBAR
                        '''''''''''''''''''' Start Staff Cycle ''''''''''''''''''''
                    Else
                        If Left(ws.Cells(1, i), 5) = "Staff" Then 'Set EBA for staff
                            EBAj = 9 'Staff scenario
                        End If

                        'Load Employee
                        EmpID = ws.Cells(2, i)
                        'Stop
                        'Check Dictionary for Employee
                        If Not DictHrs.Exists(EmpID) Then
                            DictHrs.Add EmpID, 0 'Create Entry with hours
                        End If

                        'Check Dictionary for EBA
                        If Not DictEBA.Exists(EmpID) Then
                            'Create initial values
                            Arr(0) = EBAi
                            Arr(1) = EBAj
                            Arr(2) = EBAt
                            Arr(3) = ThisWorkbook.Sheets("EBA").Cells(EBAj, EBAi) 'Set EBA
                            DictEBA.Add EmpID, Arr
                        Else
                            'Use existing values
                            Arr(0) = DictEBA(EmpID)(0)
                            Arr(1) = DictEBA(EmpID)(1)
                            Arr(2) = DictEBA(EmpID)(2)
                            Arr(3) = DictEBA(EmpID)(3)
                        End If

                        EBA = Sheets("EBA").Cells(DictEBA(EmpID)(1), DictEBA(EmpID)(0)) 'Initialise EBA

                        'Debug.Print arr(0)
                        'Debug.Print arr(1)
                        'Debug.Print arr(2)
                        'Debug.Print arr(3)
                        'Debug.Print DictEBA(EmpID)(0)
                        'Debug.Print DictEBA(EmpID)(1)
                        'Debug.Print DictEBA(EmpID)(2)
                        'Debug.Print DictEBA(EmpID)(3)

                        For j = WorkStart To AllowEnd 'cycle through each work order
                            If ws.Cells(2, i) <> "" Then
                                If ws.Cells(j, i) <> "" And ws.Cells(j, i) <> 0 Then
                                                                       
                                    WOH = ws.Cells(j, i)
                                    WOR = WOH
                                    'If Left(ws.Cells(1, i), 5) = "Staff" Then
                                    DictHrs(EmpID) = DictHrs(EmpID) + WOH
                                    'Else
                                    'DictHrs(EmpID) = WOH
                                    'End If

                                    If j <= WorkEnd Then 'Search Working Hours
                                        hours = 0
                                        Do Until WOR = 0

                                            Debug.Print "xxxxxxxxxxx"
                                            Debug.Print "---Read---"
                                            Debug.Print "Sheet Name "; ws.name
                                            Debug.Print "Emp "; EmpID
                                            Debug.Print "DictHrs(EmpID)"; DictHrs(EmpID)
                                            'Debug.Print "hours"; hours
                                            Debug.Print "WOR"; WOR
                                            'Debug.Print "DictEBA EBAi"; DictEBA(EmpID)(0)
                                            'Debug.Print "DictEBA EBAj"; DictEBA(EmpID)(1)
                                            'Debug.Print "DictEBA EBAt"; DictEBA(EmpID)(2)
                                            Debug.Print "DictEBA EBA"; DictEBA(EmpID)(3)
                                            'Stop
                                            If DictHrs(EmpID) < DictEBA(EmpID)(3) Then
                                                hours = WOR
                                                WOR = WOR - hours
                                                'ThisWorkbook.Sheets("SummaryEBA").Cells(x, 12).Value = Sheets("EBA").Cells(1, arr(2))  'Rate Type
                                                ' ADD NEW
                                                DataSum(11, x) = Sheets("EBA").Cells(1, Arr(2))  'Rate Type

                                            ElseIf DictHrs(EmpID) > DictEBA(EmpID)(3) Then
                                                hours = WOR - (DictHrs(EmpID) - Arr(3))
                                                WOR = Application.WorksheetFunction.Max(0, WOR - hours)
                                                'ThisWorkbook.Sheets("SummaryEBA").Cells(x, 12).Value = Sheets("EBA").Cells(1, arr(2))  'Rate Type
                                                ' ADD NEW
                                                DataSum(11, x) = Sheets("EBA").Cells(1, Arr(2))  'Rate Type
                                                Arr(0) = Arr(0) + 1
                                                Arr(2) = Arr(2) + 1
                                                Arr(3) = ThisWorkbook.Sheets("EBA").Cells(DictEBA(EmpID)(1), Arr(0))
                                                DictEBA(EmpID) = Arr

                                                Else 'if dicthrs = EBAR
                                                hours = WOR
                                                WOR = 0
                                                'ThisWorkbook.Sheets("SummaryEBA").Cells(x, 12).Value = Sheets("EBA").Cells(1, arr(2))  'Rate Type
                                                ' ADD NEW
                                                DataSum(11, x) = Sheets("EBA").Cells(1, Arr(2))  'Rate Type
                                                Arr(0) = Arr(0) + 1
                                                Arr(2) = Arr(2) + 1
                                                Arr(3) = ThisWorkbook.Sheets("EBA").Cells(DictEBA(EmpID)(1), Arr(0))
                                                DictEBA(EmpID) = Arr
                                            End If

                                            Debug.Print "---Write---"
                                            Debug.Print "DictHrs(EmpID)"; DictHrs(EmpID)
                                            'Debug.Print "hours"; hours
                                            Debug.Print "WOR"; WOR
                                            'Debug.Print "DictEBA EBAi"; DictEBA(EmpID)(0)
                                            'Debug.Print "DictEBA EBAj"; DictEBA(EmpID)(1)
                                            'Debug.Print "DictEBA EBAt"; DictEBA(EmpID)(2)
                                            Debug.Print "DictEBA EBA"; DictEBA(EmpID)(3)
                                            Debug.Print "xxxxxxxxxxx"
                                            'Stop

                                            'Print statements

'                                            If Left(ws.Cells(j, 3), 3) <> "WBS" Then 'Check whether WBS or Service Order
'                                                Sheets("SummaryEBA").Cells(x, 2).FormulaR1C1 = "=IFERROR(INDEX(WO_Customer,MATCH(RC[1],WO_UGL,0)),"""")" 'External Order
'                                            End If
                                            
                                            ' ADD NEW
                                            DataSum(0, x) = Format(DataRange(4, 7), "mm/dd/yyyy") 'Date
                                            DataSum(12, x) = DataRange(5, 6) 'Shift
                                            DataSum(13, x) = DataRange(3, 6) 'Supervisor
                                            DataSum(2, x) = DataRange(j, 1) 'Workorder
                                            DataSum(3, x) = DataRange(j, 2) 'Operation
                                            DataSum(4, x) = DataRange(3, i) 'Employee ID
                                            DataSum(5, x) = DataRange(2, i) 'Name
                                            DataSum(6, x) = DataRange(1, i) 'Emp Type
                                            DataSum(7, x) = DataRange(4, i) 'Trade
                                            DataSum(14, x) = Now() 'TimeStamp
                                            DataSum(15, x) = ActiveWorkbook.name 'Filename
                                            DataSum(10, x) = "Hours" 'Units
                                            DataSum(9, x) = hours 'Quantity
                                            DataSum(2, x) = DataRange(j, 5) 'External Order
                                            DataSum(x, 8) = DataRange(j, 3) 'Type
                                            
                                            x = x + 1 'add new line
                                            ReDim Preserve DataSum(16, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                        Loop
                                    ElseIf j >= AllowStart Then ' Search Allowances
                                        
                                        ' ADD NEW
                                        DataSum(8, x) = "Allow" 'Type
                                        DataSum(0, x) = Format(DataRange(4, 7), "mm/dd/yyyy") 'Date
                                        DataSum(12, x) = DataRange(6, i) 'Shift
                                        DataSum(13, x) = DataRange(3, 7) 'Supervisor
                                        DataSum(2, x) = DataRange(j, 1) 'Workorder
                                        DataSum(3, x) = DataRange(j, 2) 'Operation
                                        DataSum(1, x) = DataRange(j, 5) 'External Order
                                        DataSum(4, x) = DataRange(3, i) 'Employee ID
                                        DataSum(5, x) = DataRange(2, i) 'Name
                                        DataSum(6, x) = DataRange(1, i) 'Emp Type
                                        DataSum(7, x) = DataRange(4, i) 'Trade
                                        DataSum(14, x) = Now() 'TimeStamp
                                        DataSum(15, x) = ActiveWorkbook.name 'Filename
                                        DataSum(10, x) = DataRange(j, 8) 'Units
                                        DataSum(9, x) = DataRange(j, i) 'Quantity
                                        DataSum(11, x) = DataRange(j, 7) 'Rate
                                        
                                        x = x + 1
                                        ReDim Preserve DataSum(16, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                    End If
                                End If
                            End If
                        Next j
                        '''''''''''''''''''' End Cycle Employee Column ''''''''''''''''''''
                    End If
                Next i

            End If
        End If
    Application.StatusBar = "Extracting Data... " & ws.name
    Next ws
    
    If x > 0 Then ThisWorkbook.Sheets("SummaryEBA").Range("A4:P" & x + 3) = Application.WorksheetFunction.Transpose(DataSum)
    
    '''''''''''''''''''' End Pull Data ''''''''''''''''''''
    'remove dictionaries
    DictHrs.RemoveAll
    DictEBA.RemoveAll

'    LastRow = Range("P4").CurrentRegion.Rows.Count + 2
'
'    If TableExists(ActiveSheet, "SummaryEBA") = False Then
'        ActiveSheet.ListObjects.Add(xlSrcRange, Range("A3:P" & LastRow)).Name = "SummaryEBA"
'        ActiveSheet.ListObjects("SummaryEBA").TableStyle = ""
'    End If
'
'    ThisWorkbook.Sheets("SummaryEBA").Range("B3").Value = "External Order"

SafeExit:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Application.StatusBar = False
    ActiveSheet.Protect
    
    TimeRun = Format((Timer - TimeStart) / 86400, "hh:mm:ss")
    MsgBox "Extract Completed... Time " & TimeRun, , "Timesheet Extract"
    On Error GoTo 0

End Sub
Sub ExtractUpload()

On Error GoTo SafeExit

    Dim DataRangeAllow, DataRange As Variant
    Dim DataSum() As Variant
    Dim DataRow As Integer
    

    Dim x, i, j, k, Col, RowCount As Integer
    Dim EBAj, EBAi, EBAt, EBAw As Integer
    Dim EBA, TH, THR, THB, WOH, WOR, EBAR As Double
    Dim day As Date
    Dim Shift, RateType As String
    Dim DictHrs As New Scripting.Dictionary
    Dim DictEBA As New Scripting.Dictionary
    Dim EmpID, TimeRun As String
    Dim Arr(0 To 3) As Long
    Dim TimeStart As Double

    x = 0
    k = 4
    
    NameSh = "UploadSAP"
    
    ReDim DataSum(13, x) 'columns and rows switched due to redim limitation (must use second attribute)

    TimeStart = Timer
    Application.StatusBar = "Extracting Data..."
    
    ActiveSheet.Unprotect
    Application.ScreenUpdating = False 'Process optimisation
    Application.EnableEvents = False

    '''''''''''''''''''' Start Pull Data ''''''''''''''''''''
    For Each ws In Sheets
        If ws.name = "Mon" Or ws.name = "Tue" Or ws.name = "Wed" Or _
           ws.name = "Thu" Or ws.name = "Fri" Or ws.name = "Sat" Or ws.name = "Sun" Then
            If ws.Cells(1, 4) = 1 Then

                RowCount = ws.Range("A" & Rows.Count).End(xlUp).Row 'Determine the number of rows

                For y = 1 To RowCount 'Determine the allowance range
                    Select Case ws.Cells(y, 1)
                        Case "WORKED HOURS"
                            WorkStart = y + 2
                        Case "ALLOWANCES"
                            WorkEnd = y - 1
                            AllowStart = y + 2
                            AllowEnd = RowCount - 2
                    End Select
                Next y

                Col = 1
                Do Until ws.Cells(2, Col) = "Total Hours" 'Determine number of employee columns
                    Col = Col + 1
                Loop

                day = Weekday(ws.Cells(4, 6), vbMonday) 'Determine day of week as integer starting Monday = 1
                Shift = ws.Cells(5, 6) 'Determine Shift

                ' Find and set EBA parameters (reset each worksheet/day)
                If ws.Cells(5, 6) = "Public" Then 'Check Public Holiday
                    EBAw = 8
                ElseIf day < 6 And Shift = "Day" Then 'Day Shift
                    EBAw = 2
                ElseIf day < 6 And Shift = "Afternoon" Then 'Afternoon Shift
                    EBAw = 3
                ElseIf day < 6 And Shift = "Night" Then 'Night Shift
                    EBAw = 4
                ElseIf day = 6 And Shift <> "Night" Then 'Saturday Day Shift
                    EBAw = 5
                ElseIf day = 6 And Shift = "Night" Then 'Saturday Night Shift
                    EBAw = 6
                    Else 'Sunday Shift
                    EBAw = 7
                End If

                EBAi = 3 'set EBA counter to start in column 3
                EBAt = 3
                
                DataRange = ws.Range(ws.Cells(1, 1), ws.Cells(RowCount, Col - 1))

                For i = 9 To Col - 1 'cycle through each employee column

                    If Left(ws.Cells(1, i), 5) = "Wages" Then 'Use Wages Calculations
                        '''''''''''''''''''' Start Wages Cycle ''''''''''''''''''''

                        'Initialise variables for each employee
                        TH = ws.Cells(5, i) 'select the total hours worked for each employee
                        THB = 0 'Total Hour Bucket
                        THR = TH - THB 'Total Hours Remaining

                        If Left(ws.Cells(1, i), 5) = "Staff" Then 'Set EBA for staff
                            If day < 6 Then
                                EBAj = 9 'Switch to Staff scenario Weekday
                            Else
                                EBAj = 10 'Switch to Staff scenario Weekend
                            End If
                        Else
                            EBAj = 11 'EBAw 'Switch back to Wages scenario ** Prevent EBA split for SAP upload **
                        End If
                        EBAR = Sheets("EBA").Cells(EBAj, EBAi)

                        For j = WorkStart To AllowEnd 'cycle through each work order
                        
                            If DataRange(2, i) <> 0 And DataRange(2, i) <> vbNullString Then
                                If DataRange(j, i) <> 0 And DataRange(j, i) <> vbNullString Then
                                
                                ' ADD NEW
                                    DataSum(2, x) = Format(DataRange(4, 7), "mm/dd/yyyy") 'Date
                                
                                    'Initialise variables for each work order
                                    WOH = ws.Cells(j, i) 'Work Order Hours
                                    WOR = WOH ' Work Order Hours Remaining
                                    Debug.Print "WOR New Work Order"; WOR

                                    If j <= WorkEnd Then 'Search Working Hours
                                        Do Until WOR = 0 'loop until hours of work order have been allocated
                                            EBA = Sheets("EBA").Cells(EBAj, EBAi) 'Set EBA
                                            If EBA = 0 Then
                                                EBAi = EBAi + 1
                                                EBAt = EBAt + 1
                                                EBAR = Sheets("EBA").Cells(EBAj, EBAi)
                                            Else

                                                Debug.Print "EBA Start"; EBA
                                                Debug.Print "EBAR: "; EBAR
                                                Debug.Print "EBAi"; EBAi

                                                ' Is Work Order Hours Remaining to be allocated less/greater than or equal to the EBA Remaining to be aloocated
                                                If WOR < EBAR Then
                                                    hours = WOR 'set hours to be written to the sheet
                                                    WOR = WOR - hours
                                                    EBAR = EBAR - hours
                                                    RateType = Sheets("EBA").Cells(1, EBAt)
                                                    'ThisWorkbook.Sheets("UploadSAP").Cells(x, 11).Value = Sheets("EBA").Cells(1, EBAt)  'Rate Type

                                                ElseIf WOR > EBAR Then
                                                    hours = WOR - (WOR - EBAR)
                                                    WOR = Application.WorksheetFunction.Max(0, WOR - hours)
                                                    RateType = Sheets("EBA").Cells(1, EBAt)
                                                    'ThisWorkbook.Sheets("UploadSAP").Cells(x, 11).Value = Sheets("EBA").Cells(1, EBAt)  'Rate Type
                                                    EBAi = EBAi + 1
                                                    EBAt = EBAt + 1
                                                    EBAR = Sheets("EBA").Cells(EBAj, EBAi)

                                                Else
                                                    hours = WOR
                                                    WOR = 0
                                                    RateType = Sheets("EBA").Cells(1, EBAt)
                                                    'ThisWorkbook.Sheets("UploadSAP").Cells(x, 11).Value = Sheets("EBA").Cells(1, EBAt)  'Rate Type
                                                    EBAi = EBAi + 1
                                                    EBAt = EBAt + 1
                                                    EBAR = Sheets("EBA").Cells(2, EBAi)
                                                End If

                                                'Print statements
                                                'ThisWorkbook.Sheets("UploadSAP").Cells(x, 1).Value = "UPLOAD" 'Profile
                                                'ThisWorkbook.Sheets("UploadSAP").Cells(x, 2).Value = ws.Cells(3, i) 'Payroll Number
                                                'ThisWorkbook.Sheets("UploadSAP").Cells(x, 3).Value = ws.Cells(4, 6) 'Date
                                                
                                                ' ADD NEW
                                                DataSum(0, x) = "UPLOAD" 'Profile
                                                DataSum(1, x) = DataRange(3, i) 'Payroll Number
                                                DataSum(2, x) = Format(DataRange(4, 7), "mm/dd/yyyy") 'Date
                                                
                                                ' Cost Object
                                                DataSum(4, x) = DataRange(j, 1) & "/" & DataRange(j, 2) 'Cost Object Service Order
                                                DataSum(3, x) = "CS"

                                                Select Case EBAj & "," & RateType ' AA

                                                    Case "9,NT" 'White Collar Staff Weekday
                                                        DataSum(5, x) = 1002

                                                    Case "9,1.5NT"

                                                        Select Case Left(ws.Cells(7, i), 1) 'Check Staff overtime type
                                                            Case "T"
                                                                If DataRange(5, 7) <> "Night" Then
                                                                    DataSum(5, x) = 1310
                                                                Else
                                                                    DataSum(5, x) = 1311
                                                                End If
                                                            Case "O"
                                                                If DataRange(5, 7) <> "Night" Then
                                                                    If Right(ws.Cells(1, i), 1) = "C" Then
                                                                        DataSum(5, x) = 1002 'Check Overtime and Casual changed from 1010 => 1002 due to superannuation requirements
                                                                    Else
                                                                        DataSum(5, x) = 1010
                                                                    End If
                                                                Else
                                                                    DataSum(5, x) = 1130
                                                                End If
                                                            Case "N"
                                                                DataSum(5, x) = 1182
                                                            Case Else
                                                                DataSum(5, x) = 1310
                                                        End Select

                                                    Case "10,NT" 'White Collar Staff Weekday
                                                        DataSum(5, x) = 1002

                                                    Case "10,1.5NT" 'White Collar Staff Weekend

                                                        Select Case Left(ws.Cells(7, i), 1) 'Check Staff overtime type
                                                            Case "T"
                                                                If DataRange(5, 7) <> "Night" Then
                                                                    DataSum(5, x) = 1310
                                                                Else
                                                                    DataSum(5, x) = 1311
                                                                End If
                                                            Case "O"
                                                                If DataRange(5, 7) <> "Night" Then
                                                                    If Right(ws.Cells(1, i), 1) = "C" Then
                                                                        DataSum(5, x) = 1002 'Check Overtime and Casual changed from 1010 => 1002 due to superannuation requirements
                                                                    Else
                                                                        DataSum(5, x) = 1010
                                                                    End If
                                                                Else
                                                                    DataSum(5, x) = 1130
                                                                End If
                                                            Case "N"
                                                                DataSum(5, x) = 1182
                                                            Case Else
                                                                DataSum(5, x) = 1310
                                                        End Select

                                                    Case "11,NT" 'Blue Collar

                                                        Select Case DataRange(5, 7)
                                                            Case "Day"
                                                                DataSum(5, x) = 1001
                                                            Case "Afternoon"
                                                                DataSum(5, x) = 1121
                                                            Case "Night"
                                                                DataSum(5, x) = 1131
                                                            Case "Short Shift"
                                                                DataSum(5, x) = 1140
                                                        End Select

                                                End Select

                                                ' Wage Type
                                                ' PS Group
                                                ' Level
                                                'ThisWorkbook.Sheets("UploadSAP").Cells(x, 10).Value = hours 'Hours
                                                DataSum(9, x) = hours 'Hours
                                                ' Additional

                                                Select Case DataRange(5, 7) 'Shift Type

                                                    Case "Day"
                                                        If Left(ws.Cells(7, i), 1) = "O" And RateType <> "NT" And Right(ws.Cells(1, i), 1) = "C" Then 'check ovetime casual scenario
                                                            'ThisWorkbook.Sheets("UploadSAP").Cells(x, 12).Value = "SH"
                                                            DataSum(11, x) = "SH"
                                                        Else
                                                            'ThisWorkbook.Sheets("UploadSAP").Cells(x, 12).Value = "DS"
                                                            DataSum(11, x) = "DS"
                                                        End If

                                                    Case "Afternoon"
                                                         'ThisWorkbook.Sheets("UploadSAP").Cells(x, 12).Value = "AS"
                                                          DataSum(11, x) = "AS"

                                                    Case "Night"
                                                        If Left(ws.Cells(7, i), 1) = "O" And RateType <> "NT" And Right(ws.Cells(1, i), 1) = "C" Then 'check ovetime casual scenario
                                                            DataSum(11, x) = "SH"
                                                        Else
                                                            DataSum(11, x) = "NS"
                                                        End If

                                                    Case "Short Shift"
                                                        DataSum(11, x) = "SS"
                                                End Select

                                                DataSum(12, x) = ws.Cells(2, i) 'Name

                                                THB = THB + hours
                                                THR = TH - THB

                                                Debug.Print "hours"; hours
                                                Debug.Print "THB"; THB
                                                Debug.Print "THR"; THR
                                                Debug.Print "WOR"; WOR
                                                Debug.Print "EBAR"; EBAR
                                                Debug.Print "EBA End"; EBA
                                                Debug.Print "-----"
                                                x = x + 1 'add new line
                                                ReDim Preserve DataSum(13, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                            End If
                                            'Stop
                                        Loop
                                    ElseIf j >= AllowStart And DataRange(j, 3) <> "Crib" Then ' Search Allowances
                                        
                                        DataSum(0, x) = "UPLOAD" 'Profile
                                        DataSum(1, x) = DataRange(3, i) 'Payroll Number
                                        DataSum(2, x) = Format(DataRange(4, 7), "mm/dd/yyyy") 'Date

                                        If DataRange(j, 7) = "Travel" Or DataRange(j, 7) = "Meal" Then
                                            DataSum(3, x) = "CS" 'Cost Object
                                            DataSum(4, x) = DataRange(j, 1) & "/" & DataRange(j, 2) 'WBS
                                        Else
                                            DataSum(3, x) = "NA" ' Cost Object
                                        End If

                                        Select Case DataRange(j, 7)
                                            Case "LAHA"
                                                DataSum(6, x) = 2700
                                            Case "Travel"
                                                DataSum(5, x) = "Travel"
                                            Case "Crib"
                                                DataSum(5, x) = "Crib"
                                            Case "Meal"
                                                DataSum(5, x) = "Meal"
                                            Case "Annual Leave"
                                                DataSum(5, x) = "5100"
                                            Case "Sick Leave"
                                                DataSum(5, x) = "5200"
                                            Case "Leave Without Pay"
                                                DataSum(5, x) = "5690"
                                            Case "Parental Leave"
                                                DataSum(5, x) = "5625"
                                            Case "Toil Taken"
                                                DataSum(5, x) = "5677"
                                        End Select

                                        ' Wage Type
                                        ' PS Group
                                        ' Level
                                        DataSum(9, x) = DataRange(j, i) ' **Quantity need to Check how to handle in upload**
                                        ' Additional

                                        Select Case DataRange(5, 7) 'Shift Type
                                            Case "Day"
                                                DataSum(11, x) = "DS"
                                            Case "Afternoon"
                                                DataSum(11, x) = "AS"
                                            Case "Night"
                                                DataSum(11, x) = "NS"
                                            Case "Short Shift"
                                                DataSum(11, x) = "SS"
                                        End Select

                                        DataSum(12, x) = DataRange(2, i) 'Name

                                        x = x + 1
                                        ReDim Preserve DataSum(13, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                    End If
                                End If
                            End If
                        Next j
                        EBAi = 3  'reset EBA
                        EBAt = 3
                        EBAR = Sheets("EBA").Cells(EBAj, EBAi) 'reset EBAR
                        '''''''''''''''''''' End Wages Cycle ''''''''''''''''''''
                        Else 'wages/staff selection
                        '''''''''''''''''''' Start Staff Cycle ''''''''''''''''''''
                        If Left(ws.Cells(1, i), 5) = "Staff" Then 'Set EBA for staff
                            EBAj = 9 'Staff scenario
                        Else
                            EBAj = EBAw 'Wages scenario
                        End If

                        'Load Employee
                        EmpID = DataRange(2, i)

                        'Check Dictionary for Employee
                        If Not DictHrs.Exists(EmpID) Then
                            DictHrs.Add EmpID, 0 'Create Entry with hours
                        End If

                        'Check Dictionary for EBA
                        If Not DictEBA.Exists(EmpID) Then
                            'Create initial values
                            Arr(0) = EBAi
                            Arr(1) = EBAj
                            Arr(2) = EBAt
                            Arr(3) = ThisWorkbook.Sheets("EBA").Cells(EBAj, EBAi) 'Set EBA
                            DictEBA.Add EmpID, Arr
                        Else
                            'Use existing values
                            Arr(0) = DictEBA(EmpID)(0)
                            Arr(1) = DictEBA(EmpID)(1)
                            Arr(2) = DictEBA(EmpID)(2)
                            Arr(3) = DictEBA(EmpID)(3)
                        End If

                        EBA = Sheets("EBA").Cells(DictEBA(EmpID)(1), DictEBA(EmpID)(0)) 'Initialise EBA

                        'Debug.Print arr(0)
                        'Debug.Print arr(1)
                        'Debug.Print arr(2)
                        'Debug.Print arr(3)
                        'Debug.Print DictEBA(EmpID)(0)
                        'Debug.Print DictEBA(EmpID)(1)
                        'Debug.Print DictEBA(EmpID)(2)
                        'Debug.Print DictEBA(EmpID)(3)

                        For j = WorkStart To AllowEnd 'cycle through each work order
                            If DataRange(2, i) <> "" Then
                                If DataRange(j, i) <> "" And DataRange(j, i) <> 0 Then

                                    WOH = DataRange(j, i)
                                    WOR = WOH
                                    If Left(ws.Cells(1, i), 5) = "Staff" Then
                                        DictHrs(EmpID) = DictHrs(EmpID) + WOH
                                    Else
                                        DictHrs(EmpID) = WOH
                                    End If

                                    If j <= WorkEnd Then 'Search Working Hours
                                        hours = 0
                                        Do Until WOR = 0

                                            Debug.Print "xxxxxxxxxxx"
                                            Debug.Print "---Read---"
                                            Debug.Print "Emp "; EmpID
                                            Debug.Print "DictHrs(EmpID)"; DictHrs(EmpID)
                                            Debug.Print "hours"; hours
                                            Debug.Print "WOR"; WOR
                                            Debug.Print "DictEBA EBAi"; DictEBA(EmpID)(0)
                                            Debug.Print "DictEBA EBAj"; DictEBA(EmpID)(1)
                                            Debug.Print "DictEBA EBAt"; DictEBA(EmpID)(2)
                                            Debug.Print "DictEBA EBA"; DictEBA(EmpID)(3)
                                            'Stop
                                            If DictHrs(EmpID) < DictEBA(EmpID)(3) Then
                                                hours = WOR
                                                WOR = WOR - hours
                                                'ThisWorkbook.Sheets("UploadSAP").Cells(x, 12).Value = Sheets("EBA").Cells(1, arr(2))  'Rate Type

                                            ElseIf DictHrs(EmpID) > DictEBA(EmpID)(3) Then
                                                hours = WOR - (DictHrs(EmpID) - Arr(3))
                                                WOR = Application.WorksheetFunction.Max(0, WOR - hours)
                                                'ThisWorkbook.Sheets("UploadSAP").Cells(x, 12).Value = Sheets("EBA").Cells(1, arr(2))  'Rate Type
                                                Arr(0) = Arr(0) + 1
                                                Arr(2) = Arr(2) + 1
                                                Arr(3) = ThisWorkbook.Sheets("EBA").Cells(DictEBA(EmpID)(1), Arr(0))
                                                DictEBA(EmpID) = Arr

                                                Else 'if dicthrs = EBAR
                                                hours = WOR
                                                WOR = 0
                                                'ThisWorkbook.Sheets("UploadSAP").Cells(x, 12).Value = Sheets("EBA").Cells(1, arr(2))  'Rate Type
                                                Arr(0) = Arr(0) + 1
                                                Arr(2) = Arr(2) + 1
                                                Arr(3) = ThisWorkbook.Sheets("EBA").Cells(DictEBA(EmpID)(1), Arr(0))
                                                DictEBA(EmpID) = Arr
                                            End If

                                            Debug.Print "---Write---"
                                            Debug.Print "DictHrs(EmpID)"; DictHrs(EmpID)
                                            Debug.Print "hours"; hours
                                            Debug.Print "WOR"; WOR
                                            Debug.Print "DictEBA EBAi"; DictEBA(EmpID)(0)
                                            Debug.Print "DictEBA EBAj"; DictEBA(EmpID)(1)
                                            Debug.Print "DictEBA EBAt"; DictEBA(EmpID)(2)
                                            Debug.Print "DictEBA EBA"; DictEBA(EmpID)(3)
                                            Debug.Print "xxxxxxxxxxx"
                                            'Stop

                                            'Print statements
                                            DataSum(0, x) = "UPLOAD" 'Profile
                                            DataSum(1, x) = DataRange(3, i) 'Payroll Number
                                            DataSum(2, x) = Format(DataRange(4, 7), "mm/dd/yyyy") 'Date
                                            ' Cost Object
                                            If Left(DataRange(j, 3), 3) = "WBS" Then 'Check whether WBS or Service Order
                                               DataSum(4, x) = DataRange(j, 1) 'Cost Object WBS
                                               DataSum(3, x) = "WBS"
                                            Else
                                                DataSum(4, x) = DataRange(j, 1) & "/" & DataRange(j, 2) 'Cost Object Service Order
                                                DataSum(3, x) = "CS"
                                            End If

                                            Select Case EBAj & "," & RateType ' AA

                                                Case "9,NT" 'White Collar Staff Weekday
                                                    DataSum(5, x) = 1002

                                                Case "9,1.5NT"

                                                    Select Case Left(DataRange(7, i), 1) 'Check Staff overtime type
                                                        Case "T"
                                                            If DataRange(5, 7) <> "Night" Then
                                                                DataSum(5, x) = 1310
                                                            Else
                                                                DataSum(5, x) = 1311
                                                            End If
                                                        Case "O"
                                                            If DataRange(5, 7) <> "Night" Then
                                                                If Right(ws.Cells(1, i), 1) = "C" Then
                                                                    DataSum(5, x) = 1002 'Check Overtime and Casual changed from 1010 => 1002 due to superannuation requirements
                                                                Else
                                                                    DataSum(5, x) = 1010
                                                                End If
                                                            Else
                                                                    DataSum(5, x) = 1130
                                                            End If
                                                        Case "N"
                                                            DataSum(5, x) = 1182
                                                        Case Else
                                                            DataSum(5, x) = 1310
                                                    End Select

                                                Case "10,NT" 'White Collar Staff Weekday
                                                    DataSum(5, x) = 1002

                                                Case "10,1.5NT" 'White Collar Staff Weekend

                                                    Select Case Left(ws.Cells(7, i), 1) 'Check Staff overtime type
                                                        Case "T"
                                                            If DataRange(5, 7) <> "Night" Then
                                                                DataSum(5, x) = 1310
                                                            Else
                                                                DataSum(5, x) = 1311
                                                            End If
                                                        Case "O"
                                                            If DataRange(5, 7) <> "Night" Then
                                                                If Right(ws.Cells(1, i), 1) = "C" Then
                                                                    DataSum(5, x) = 1002 'Check Overtime and Casual changed from 1010 => 1002 due to superannuation requirements
                                                                Else
                                                                    DataSum(5, x) = 1010
                                                                End If
                                                            Else
                                                                DataSum(5, x) = 1130
                                                            End If
                                                        Case "N"
                                                            DataSum(5, x) = 1182
                                                        Case Else
                                                            DataSum(5, x) = 1310
                                                    End Select

                                                Case "11,NT" 'Blue Collar

                                                    Select Case DataRange(5, 7)
                                                        Case "Day"
                                                            DataSum(5, x) = 1001
                                                        Case "Afternoon"
                                                            DataSum(5, x) = 1121
                                                        Case "Night"
                                                            DataSum(5, x) = 1131
                                                        Case "Short Shift"
                                                            DataSum(5, x) = 1140
                                                    End Select

                                            End Select

                                            ' Wage Type
                                            ' PS Group
                                            ' Level
                                            DataSum(9, x) = hours 'Hours
                                            ' Additional

                                            Select Case DataRange(5, 7) 'Shift Type

                                                Case "Day"
                                                    If Left(ws.Cells(7, i), 1) = "O" And RateType <> "NT" And Right(ws.Cells(1, i), 1) = "C" Then 'check ovetime casual scenario
                                                        'ThisWorkbook.Sheets("UploadSAP").Cells(x, 12).Value = "SH"
                                                        DataSum(11, x) = "SH"
                                                    Else
                                                        'ThisWorkbook.Sheets("UploadSAP").Cells(x, 12).Value = "DS"
                                                        DataSum(11, x) = "DS"
                                                    End If

                                                Case "Afternoon"
                                                    'ThisWorkbook.Sheets("UploadSAP").Cells(x, 12).Value = "AS"
                                                        DataSum(11, x) = "AS"

                                                Case "Night"
                                                    If Left(ws.Cells(7, i), 1) = "O" And RateType <> "NT" And Right(ws.Cells(1, i), 1) = "C" Then 'check ovetime casual scenario
                                                        'ThisWorkbook.Sheets("UploadSAP").Cells(x, 12).Value = "SH"
                                                        DataSum(11, x) = "SH"
                                                    Else
                                                        'ThisWorkbook.Sheets("UploadSAP").Cells(x, 12).Value = "NS"
                                                        DataSum(11, x) = "NS"
                                                    End If

                                                Case "Short Shift"
                                                       'ThisWorkbook.Sheets("UploadSAP").Cells(x, 12).Value = "SS"
                                                        DataSum(11, x) = "SS"
                                            End Select

                                           DataSum(12, x) = DataRange(2, i) 'Name

                                            'Debug.Print "hours"; hours
                                            'Debug.Print "THB"; THB
                                            'Debug.Print "THR"; THR
                                            'Debug.Print "WOR"; WOR
                                            'Debug.Print "EBAR"; EBAR
                                            'Debug.Print "EBA End"; EBA
                                            'Debug.Print "-----"
                                            x = x + 1 'add new line
                                            ReDim Preserve DataSum(13, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                        Loop
                                        
                                    ElseIf j >= AllowStart And DataRange(j, 7) <> "Crib" Then ' Search Allowances
                                        DataSum(0, x) = "UPLOAD" 'Profile
                                        DataSum(1, x) = DataRange(3, i) 'Payroll Number
                                        DataSum(2, x) = Format(DataRange(4, 7), "mm/dd/yyyy") 'Date
                                        
                                        If DataRange(j, 7) = "Travel" Or DataRange(j, 7) = "Meal" Then

                                             DataSum(3, x) = "CS" 'Cost Object
                                             DataSum(4, x) = DataRange(j, 1) & "/" & DataRange(j, 2) 'WBS
                                        Else
                                            DataSum(3, x) = "NA" ' Cost Object
                                        End If

                                        Select Case DataRange(j, 7)
                                            Case "LAHA"
                                                DataSum(6, x) = "2700"
                                            Case "Travel"
                                                DataSum(5, x) = "Travel"
                                            Case "Crib"
                                                DataSum(5, x) = "Crib"
                                            Case "Meal"
                                                DataSum(5, x) = "Meal"
                                            Case "Annual Leave"
                                                DataSum(5, x) = "5100"
                                            Case "Sick Leave"
                                                DataSum(5, x) = "5200"
                                            Case "Leave Without Pay"
                                                DataSum(5, x) = "5690"
                                            Case "Parental Leave"
                                                DataSum(5, x) = "5625"
                                            Case "Toil Taken"
                                                DataSum(5, x) = "5677"
                                            Case "Tool Allowance"
                                                DataSum(6, x) = "2105"
                                        End Select

                                        ' Wage Type
                                        ' PS Group
                                        ' Level
                                        'ThisWorkbook.Sheets("UploadSAP").Cells(x, 10).Value = ws.Cells(j, i) ' **Quantity need to Check how to handle in upload**
                                        DataSum(9, x) = DataRange(j, i)
                                        ' Additional

                                        Select Case DataRange(5, 7) 'Shift Type
                                            Case "Day"
                                                DataSum(11, x) = "DS"
                                            Case "Afternoon"
                                                DataSum(11, x) = "AS"
                                            Case "Night"
                                                DataSum(11, x) = "NS"
                                            Case "Short Shift"
                                                DataSum(11, x) = "SS"
                                        End Select

                                        DataSum(12, x) = DataRange(2, i) 'Name

                                        x = x + 1
                                        ReDim Preserve DataSum(13, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                    End If
                                End If
                            End If
                        Next j
                        EBAi = 3  'reset EBA
                        EBAt = 3
                        EBAR = Sheets("EBA").Cells(EBAj, EBAi) 'reset EBAR
                        '''''''''''''''''''' End Staff Cycle ''''''''''''''''''''
                    End If 'End wages/staff selection
                Next i

            End If
        End If
    Application.StatusBar = "Extracting Data... " & ws.name
    Next ws
    
    If x > 0 Then ThisWorkbook.Sheets("UploadSAP").Range("A4:M" & x + 3) = Application.WorksheetFunction.Transpose(DataSum)
    
    '''''''''''''''''''' End Pull Data ''''''''''''''''''''
SafeExit:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    ActiveSheet.Protect
    
    Application.StatusBar = False
    TimeRun = Format((Timer - TimeStart) / 86400, "hh:mm:ss")
    MsgBox "Extract Completed... Time " & TimeRun, , "Timesheet Extract"
    On Error GoTo 0

End Sub

Sub Clear()

On Error GoTo SafeExit

    Dim RowCount As Integer
    If ActiveSheet.name = "Summary" Then
        If ThisWorkbook.Sheets("ReportSummary").Visible = True Then ThisWorkbook.Sheets("ReportSummary").Visible = False
        If ThisWorkbook.Sheets("ReportData").Visible = True Then ThisWorkbook.Sheets("ReportData").Visible = False
        RemTable
    End If
    RowCount = ActiveSheet.UsedRange.Rows.Count 'Determine the number of rows

    If RowCount > 3 Then
        ActiveSheet.Unprotect
        ActiveSheet.Range("A4:Z" & RowCount).ClearContents
        ActiveSheet.Protect
    End If

    If ActiveSheet.name = "Summary" Then RepSumPivot

SafeExit:
        On Error GoTo 0

End Sub


Public Function Nz(ByVal Value, Optional ByVal ValueIfNull = "")

On Error GoTo SafeExit

    Nz = IIf(IsNull(Value), ValueIfNull, Value)

SafeExit:
        On Error GoTo 0

End Function
Private Sub Workbook_SheetChange(ByVal sh As Object, ByVal Target As Range)

On Error GoTo SafeExit

    With sh
        If Not Intersect(Target, sh.Range("A:A")) Is Nothing Then
            Application.EnableEvents = False
            MsgBox ("Test")
        End If
    End With
    
SafeExit:
        Application.EnableEvents = True
        On Error GoTo 0

End Sub

Sub AssignMacro()

On Error GoTo SafeExit

    Dim ws As Worksheet
    Dim i As Integer

    ThisWorkbook.Sheets("Summary").Shapes("ButtonClear").OnAction = "Clear"
    ThisWorkbook.Sheets("Summary").Shapes("ButtonExtract").OnAction = "Extract"

    ThisWorkbook.Sheets("SummaryEBA").Shapes("ButtonClear").OnAction = "Clear"
    ThisWorkbook.Sheets("SummaryEBA").Shapes("ButtonExtract").OnAction = "ExtractEBA"

    ThisWorkbook.Sheets("UploadSAP").Shapes("ButtonClear").OnAction = "Clear"
    ThisWorkbook.Sheets("UploadSAP").Shapes("ButtonExtract").OnAction = "ExtractUpload"

'    For Each ws In ThisWorkbook.Worksheets
'
'        If ws.Name = "Mon" Or ws.Name = "Tue" Or ws.Name = "Wed" Or ws.Name = "Thu" _
'    Or ws.Name = "Fri" Or ws.Name = "Sat" Or ws.Name = "Sun" Then
'
'            For i = 1 To 5
'                ws.Shapes("RowAdd" & i).OnAction = "Insert_Row"
'                ws.Shapes("RowDel" & i).OnAction = "Delete_Row"
'            Next i
'
'            ws.Shapes("AddCol1").OnAction = "Insert_Col"
'            ws.Shapes("DelCol1").OnAction = "Delete_Col"
'
'        End If
'
'    Next ws

SafeExit:
        On Error GoTo 0

End Sub

Sub LabPivot()

On Error GoTo SafeExit

Dim RowCount, PivNo As Integer
Dim sh As String

sh = "ReportData"
RowCount = ThisWorkbook.Sheets("Summary").Range("A" & Rows.Count).End(xlUp).Row
PivNo = ThisWorkbook.Sheets(sh).PivotTables.Count

If RowCount > 3 And PivNo = 0 Then

Application.ScreenUpdating = False
Application.EnableEvents = False

ActiveWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:= _
        "Summary!R3C1:R" & RowCount & "C19", Version:=6).CreatePivotTable TableDestination:= _
        "ReportData!R4C9", TableName:="PivotLabour", DefaultVersion:=6

    With ThisWorkbook.Sheets(sh).PivotTables("PivotLabour")
        .ColumnGrand = True
        .HasAutoFormat = True
        .DisplayErrorString = False
        .DisplayNullString = True
        .EnableDrilldown = True
        .ErrorString = ""
        .MergeLabels = False
        .NullString = ""
        .PageFieldOrder = 2
        .PageFieldWrapCount = 0
        .PreserveFormatting = True
        .RowGrand = True
        .SaveData = True
        .PrintTitles = False
        .RepeatItemsOnEachPrintedPage = True
        .TotalsAnnotation = False
        .CompactRowIndent = 1
        .InGridDropZones = False
        .DisplayFieldCaptions = True
        .DisplayMemberPropertyTooltips = False
        .DisplayContextTooltips = True
        .ShowDrillIndicators = True
        .PrintDrillIndicators = False
        .AllowMultipleFilters = False
        .SortUsingCustomLists = True
        .FieldListSortAscending = False
        .ShowValuesRow = False
        .CalculatedMembersInFilters = False
        .RowAxisLayout xlCompactRow
    End With
    With ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").PivotCache
        .RefreshOnFileOpen = False
        .MissingItemsLimit = xlMissingItemsDefault
    End With
    ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").RepeatAllLabels xlRepeatLabels
    ActiveWorkbook.ShowPivotTableFieldList = True
    With ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").PivotFields("Units")
        .Orientation = xlPageField
        .Position = 1
    End With
    ActiveWindow.ScrollRow = 1
    With ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").PivotFields("Type")
        .Orientation = xlRowField
        .Position = 1
    End With
    With ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").PivotFields("Name")
        .Orientation = xlRowField
        .Position = 2
    End With
    With ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").PivotFields("WorkDate")
        .Orientation = xlColumnField
        .Position = 1
    End With
    ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").AddDataField ThisWorkbook.Sheets(sh).PivotTables( _
        "PivotLabour").PivotFields("Quantity"), "Sum of Quantity", xlSum
    With ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").PivotFields("Sum of Quantity")
        .Caption = "Total Hours"
        .NumberFormat = "0.0"
    End With
    ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").PivotFields("Units").ClearAllFilters
    ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").DisplayFieldCaptions = False
    ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").ColumnGrand = False
    ActiveWorkbook.ShowPivotTableFieldList = False

ThisWorkbook.Sheets(sh).Cells(1, 9) = "Current Timesheet Employee Summary"

Application.ScreenUpdating = True
Application.EnableEvents = True

End If

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0
End Sub

Sub DelPivot()

On Error GoTo SafeExit

Dim Piv As PivotTable

For Each Piv In ThisWorkbook.Sheets("ReportData").PivotTables
    ThisWorkbook.Sheets("ReportData").Range(Piv.TableRange2.Address).Delete Shift:=xlUp
Next Piv

SafeExit:
        On Error GoTo 0

End Sub

Sub RepSumPivot()

On Error GoTo SafeExit
 
Dim RowCount, PivNo As Integer
Dim sh As String

sh = "ReportSummary"
If ThisWorkbook.Sheets(sh).Protect = Protect Then ThisWorkbook.Sheets(sh).Unprotect
ThisWorkbook.Sheets(sh).UsedRange.Clear

RowCount = ThisWorkbook.Sheets("Summary").Range("A" & Rows.Count).End(xlUp).Row
PivNo = ThisWorkbook.Sheets(sh).PivotTables.Count

If RowCount > 3 And PivNo = 0 Then

Application.ScreenUpdating = False
Application.EnableEvents = False

    ActiveWorkbook.PivotCaches.Create(SourceType:=xlDatabase, SourceData:= _
        "Summary!R3C1:R" & RowCount & "C23", Version:=6).CreatePivotTable TableDestination:= _
        "ReportSummary!R6C1", TableName:="PivotLabour", DefaultVersion:=6

    With ThisWorkbook.Sheets(sh).PivotTables("PivotLabour")
        .ColumnGrand = False
        .HasAutoFormat = True
        .DisplayErrorString = False
        .DisplayNullString = True
        .EnableDrilldown = True
        .ErrorString = ""
        .MergeLabels = False
        .NullString = ""
        .PageFieldOrder = 2
        .PageFieldWrapCount = 0
        .PreserveFormatting = True
        .RowGrand = True
        .SaveData = True
        .PrintTitles = False
        .RepeatItemsOnEachPrintedPage = True
        .TotalsAnnotation = False
        .CompactRowIndent = 1
        .InGridDropZones = False
        .DisplayFieldCaptions = True
        .DisplayMemberPropertyTooltips = False
        .DisplayContextTooltips = True
        .ShowDrillIndicators = True
        .PrintDrillIndicators = False
        .AllowMultipleFilters = False
        .SortUsingCustomLists = True
        .FieldListSortAscending = False
        .ShowValuesRow = False
        .CalculatedMembersInFilters = False
        .RowAxisLayout xlCompactRow
    End With
    With ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").PivotCache
        .RefreshOnFileOpen = False
        .MissingItemsLimit = xlMissingItemsDefault
    End With
    ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").RepeatAllLabels xlRepeatLabels
    ActiveWorkbook.ShowPivotTableFieldList = True
    
    'NINAEDIT
    With ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").PivotFields("Type")
        .Orientation = xlRowField
        .Position = 1
    End With
'    With ThisWorkbook.Sheets(Sh).PivotTables("PivotLabour").PivotFields("Filename")
'        .Orientation = xlRowField
'        .Position = 1
'    End With
    With ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").PivotFields("Shift")
        .Orientation = xlRowField
        .Position = 2
    End With
    With ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").PivotFields("Employee ID")
        .Orientation = xlRowField
        .Position = 3
    End With
    With ThisWorkbook.Sheets(sh).PivotTables("Pivotlabour").PivotFields("Name")
        .Orientation = xlRowField
        .Position = 4
    End With
    With ThisWorkbook.Sheets(sh).PivotTables("Pivotlabour").PivotFields("Trade")
        .Orientation = xlRowField
        .Position = 5
    End With
    With ThisWorkbook.Sheets(sh).PivotTables("Pivotlabour").PivotFields("Emp Type")
        .Orientation = xlRowField
        .Position = 6
    End With
    With ThisWorkbook.Sheets(sh).PivotTables("Pivotlabour").PivotFields("Units")
        .Orientation = xlRowField
        .Position = 7
    End With
    With ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").PivotFields("WorkDate")
        .Orientation = xlColumnField
        .Position = 1
    End With
    ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").AddDataField ThisWorkbook.Sheets(sh).PivotTables( _
        "PivotLabour").PivotFields("Quantity"), "Sum of Quantity", xlSum
    With ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").PivotFields("Sum of Quantity")
        .Caption = "Total Hours"
        .NumberFormat = "0.0"
    End With
    
    ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").RowAxisLayout xlTabularRow
    ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").RepeatAllLabels xlDoNotRepeatLabels
    
    Dim PvtTbl As PivotTable
    Dim pvtFld As PivotField

    Set PvtTbl = ThisWorkbook.Sheets(sh).PivotTables("PivotLabour")

    With PvtTbl
        For Each pvtFld In .PivotFields
            pvtFld.Subtotals(1) = True
            pvtFld.Subtotals(1) = False
        Next pvtFld
    End With
   
    'ThisWorkbook.Sheets(Sh).PivotTables("PivotLabour").PivotFields("Units").ClearAllFilters
    'ThisWorkbook.Sheets(Sh).PivotTables("PivotLabour").PivotFields("Units").CurrentPage = "Hours"
    ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").DisplayFieldCaptions = True
    'ThisWorkbook.Sheets(Sh).PivotTables("PivotLabour").ColumnGrand = True
    ActiveWorkbook.ShowPivotTableFieldList = False
    
    'NINAEDIT
    ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").PivotFields("Type").Subtotals = Array( _
        True, False, False, False, False, False, False, False, False, False, False, False)
    ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").TableStyle2 = "PivotStyleMedium9"
    ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").PivotFields("Type").AutoSort xlDescending, "Type"
'    ThisWorkbook.Sheets(Sh).PivotTables("PivotLabour").PivotFields("Type").PivotItems("SCO"). _
'        Position = 1
'    ThisWorkbook.Sheets(Sh).PivotTables("PivotLabour").PivotFields("Type").PivotItems("CVI"). _
'        Position = 2
        
    'NINAEDIT
    ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").HasAutoFormat = False
    ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").RepeatAllLabels xlRepeatLabels
   
'    Prod_Last_Row = ThisWorkbook.Sheets("ReportSummary").Columns("A:A").Find(What:="CVI Total", _
'    After:=ThisWorkbook.Sheets("ReportSummary").Range("A1"), LookIn:=xlFormulas, _
'    LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
'    MatchCase:=False, SearchFormat:=False).row

'    Allow_Last_Row = ThisWorkbook.Sheets("ReportSummary").Columns("A:A").Find(What:="Grand Total", _
'    After:=ThisWorkbook.Sheets("ReportSummary").Range("A1"), LookIn:=xlFormulas, _
'    LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
'    MatchCase:=False, SearchFormat:=False).row - 1

    Dim Prod_Last_Row As Variant

    Prod_Last_Row = Application.Match("Allowances", ThisWorkbook.Sheets(sh).Range("A:A"), 0)
    Allow_Last_Row = ThisWorkbook.Sheets(sh).Range("A" & Rows.Count).End(xlUp).Row - 1

    If Not IsError(Prod_Last_Row) Then
        If Prod_Last_Row <> Allow_Last_Row + 1 Then
            ThisWorkbook.Sheets(sh).Range("A8:A" & Prod_Last_Row).Group
            ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").PivotFields("Type2").PivotItems("Group1").Caption = "Labour"
    
            ThisWorkbook.Sheets(sh).Range("A" & Prod_Last_Row + 1 & ":A" & Allow_Last_Row).Group
            ThisWorkbook.Sheets(sh).PivotTables("PivotLabour").PivotFields("Type2").PivotItems("Group2").Caption = "Allowances"
        End If
    End If

    ThisWorkbook.Worksheets("ReportSummary").Columns("A:M").AutoFit
    
    ThisWorkbook.Sheets(sh).Cells(1, 1) = "Extract - Current Data Report Summary"
    ThisWorkbook.Sheets(sh).Cells(1, 1).Font.Bold = True
    ThisWorkbook.Sheets(sh).Cells(2, 1).Value = "Run: " & Format(Now(), "dd/mm/yyyy HH:MM")

    Application.ScreenUpdating = True
    Application.EnableEvents = True

Else
    ThisWorkbook.Sheets(sh).Cells(1, 1) = "Extract - Current Data Report Summary"
    ThisWorkbook.Sheets(sh).Cells(1, 1).Font.Bold = True
    ThisWorkbook.Sheets(sh).Cells(2, 1).Value = "No Summary Data Available: " & Format(Now(), "dd/mm/yyyy HH:MM")
    
'    'NINAEDIT
'    ThisWorkbook.Sheets(Sh).PivotTables("PivotLabour").PivotFields("Type").Subtotals = Array( _
'        True, False, False, False, False, False, False, False, False, False, False, False)
'    ThisWorkbook.Sheets(Sh).PivotTables("PivotLabour").TableStyle2 = "PivotStyleMedium9"
    
End If

Exit Sub

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0
End Sub
Attribute VB_Name = "Module4"
Private Sub Workbook_SheetChange(ByVal sh As Object, ByVal Target As Range)
    On Error GoTo SafeExit

    Dim Col, i As Integer

    Col = 5

    With sh
        Application.EnableEvents = False
        If Not Intersect(Target, Range("4:4")) Is Nothing Then 'Change classification back to default when default class selected
            If ActiveCell = ActiveCell.Offset(2, 0) Then ActiveCell = ActiveCell.Offset(2, 0).Formula
        End If

        If Not Intersect(Target, Range("2:2")) Is Nothing Then 'Change classification back to default when name selected
            Col = 7
            Do Until ActiveSheet.Cells(2, Col) = "Total Hours"
                Col = Col + 1
            Loop

            ActiveCell.Offset(2, 0) = ActiveCell.Offset(6, 0).Formula

            Set Employees = ActiveSheet.Range(Cells(2, 7), Cells(2, Col - 1)) 'Check for duplicates in Employee Name

            If WorksheetFunction.CountIf(Employees, ActiveCell.Value) > 1 Then
                MsgBox "Duplicate Found for " & ActiveCell.Value & ". The entry has been removed."
                ActiveCell.Value = ""
            End If
        End If

        If Not Intersect(Target, Range(Cells(10, 5), Cells(FindRow("a"), 5))) Is Nothing Then 'Check for duplicates in Allowances
            Set rngallow = Range(Cells(10, 5), Cells(FindRow("a"), 5))
            If WorksheetFunction.CountIf(rngallow, ActiveCell.Value) > 1 Then
                MsgBox "Duplicate Found for " & ActiveCell.Value & ". The entry has been removed."
                ActiveCell.Value = ""
            End If
        End If

        If Not Intersect(Target, Range(Cells(FindRow("a") + 2, 5), Cells(FindRow("p"), 5))) Is Nothing Then 'Check for duplicates in Productive Hours
            Set rngallow = Range(Cells(FindRow("a") + 2, 5), Cells(FindRow("p"), 5))
            If WorksheetFunction.CountIf(rngallow, ActiveCell.Value) > 1 Then
                MsgBox "Duplicate Found for " & ActiveCell.Value & ". The entry has been removed."
                ActiveCell.Value = ""
            End If
        End If

        If Not Intersect(Target, Range(Cells(FindRow("p") + 2, 5), Cells(FindRow("v"), 5))) Is Nothing Then 'Check for duplicates in VARIATION HOURS
            Set rngallow = Range(Cells(FindRow("p") + 2, 5), Cells(FindRow("v"), 5))
            If WorksheetFunction.CountIf(rngallow, ActiveCell.Value) > 1 Then
                MsgBox "Duplicate Found for " & ActiveCell.Value & ". The entry has been removed."
                ActiveCell.Value = ""
            End If
        End If

        If Not Intersect(Target, Range(Cells(FindRow("v") + 2, 5), Cells(FindRow("d"), 5))) Is Nothing Then 'Check for duplicates in DELAY HOURS
            Set rngallow = Range(Cells(FindRow("v") + 2, 5), Cells(FindRow("d"), 5))
            If WorksheetFunction.CountIf(rngallow, ActiveCell.Value) > 1 Then
                MsgBox "Duplicate Found for " & ActiveCell.Value & ". The entry has been removed."
                ActiveCell.Value = ""
            End If
        End If

        If Not Intersect(Target, Range(Cells(FindRow("d") + 2, 5), Cells(FindRow("o"), 5))) Is Nothing Then 'Check for duplicates in Overtime Hours
            Set rngallow = Range(Cells(FindRow("d") + 2, 5), Cells(FindRow("o"), 5))
            If WorksheetFunction.CountIf(rngallow, ActiveCell.Value) > 1 Then
                MsgBox "Duplicate Found for " & ActiveCell.Value & ". The entry has been removed."
                ActiveCell.Value = ""
            End If
        End If
    End With

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub

Attribute VB_Name = "Module5"
Function Importdata(Floc As String, FName As String) As Variant

Dim AreaAddress As String
Dim DSht, AreaAdd, ArrayMain  As Variant
Dim Arr1(), Arr2(), Arr3(), Arr4(), Arr5(), Arr6(), Arr7() As Variant
Dim TimeStart As Double
Dim TimeRun As String
Dim a, i, j As Integer

'TimeStart = Timer

TempData.UsedRange.Clear

Application.EnableEvents = False
Application.ScreenUpdating = False

'Floc = "C:\Users\NJM\Desktop\UGL\Final\" '"C:\Users\nathan.marom\Desktop\Esso\Final\"
'FName = "Timesheet Supervisor.xlsm"

DSht = Array("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")
ReDim AreaAdd(1 To 3, 1 To 7)

For a = 1 To 7
    AreaAdd(1, a) = DSht(a - 1) 'Sheetname
    'AreaAdd(1, a) = "='" & Floc & "[" & FName & "]" & DSht(a - 1) & "'!R4C4" 'Worksheet CodeName
    AreaAdd(2, a) = "='" & Floc & "[" & FName & "]" & DSht(a - 1) & "'!R4C2" 'Number of used columns
    AreaAdd(3, a) = "='" & Floc & "[" & FName & "]" & DSht(a - 1) & "'!R4C3" 'Number of used rows
Next a

TempData.Range("A1:G3") = AreaAdd
AreaAdd = TempData.Range("A1:G3")

a = 1 'reset a variable
For a = 1 To 7
    If IsNumeric(AreaAdd(2, a)) = False Then AreaAdd(2, a) = 0
    If IsNumeric(AreaAdd(3, a)) = False Then AreaAdd(3, a) = 0
Next a

ReDim Arr1(AreaAdd(3, 1), AreaAdd(2, 1)) 'Mon
ReDim Arr2(AreaAdd(3, 2), AreaAdd(2, 2)) 'Tue
ReDim Arr3(AreaAdd(3, 3), AreaAdd(2, 3)) 'Wed
ReDim Arr4(AreaAdd(3, 4), AreaAdd(2, 4)) 'Thu
ReDim Arr5(AreaAdd(3, 5), AreaAdd(2, 5)) 'Fri
ReDim Arr6(AreaAdd(3, 6), AreaAdd(2, 6)) 'Sat
ReDim Arr7(AreaAdd(3, 7), AreaAdd(2, 7)) 'Sun

ArrayMain = Array(Arr1, Arr2, Arr3, Arr4, Arr5, Arr6, Arr7)

a = 1 'reset a variable

For a = 1 To 7
    If AreaAdd(2, a) > 0 And AreaAdd(3, a) > 0 Then
        With ThisWorkbook.Sheets("Temp")
        .Range(.Cells(1, 1), .Cells(AreaAdd(3, a), AreaAdd(2, a))) = "='" & Floc & "[" & FName & "]" & DSht(a - 1) & "'!RC"
        ArrayMain(a - 1) = .Range(.Cells(1, 1), .Cells(AreaAdd(3, a), AreaAdd(2, a)))
        End With
    End If
Next a

Importdata = ArrayMain

'Application.EnableEvents = True
'Application.ScreenUpdating = True

'TimeRun = Format((Timer - TimeStart) / 86400 * 100000, "0.000")
'MsgBox ("Time Taken " & TimeRun & "sec")

End Function

Function EAFind(Contract As String, Group As String, Shift As Variant, PubHol As Integer) As Variant

Dim EARules(), EA, EAShift() As Variant
Dim i, j, x As Integer
Dim ShiftCode As String

EARules = MasWork.Range("Master_Time")
EAShift = MasShift.Range("Master_Shift")

For i = 1 To UBound(EAShift)
    If Shift = EAShift(i, 3) Then ShiftCode = EAShift(i, 6)
Next i

If PubHol = 1 Then ShiftCode = "P"

x = 0
ReDim EA(15, x)

For i = 1 To UBound(EARules)
    If Left(EARules(i, 3), 3) = Contract And Left(EARules(i, 4), 3) = Group And Left(EARules(i, 5), 2) = ShiftCode Then
    
        j = 1
   
        For j = 1 To 16
            EA(j - 1, x) = EARules(i, j + 1)
        Next j

        x = x + 1
        ReDim Preserve EA(15, x)
   
    End If
Next i

If x > 0 Then
    EAFind = Application.WorksheetFunction.Transpose(EA)
Else
    'ReDim EA(1, 1)
    'EA(1, 1) = "NIL"
    ReDim EA(1, 16)
    EA(1, 1) = "Check Emp"
    EA(1, 5) = "Check Emp"
    EA(1, 7) = "Check Emp"
    EA(1, 9) = 1
    EA(1, 10) = 24
    EA(1, 11) = 24
    EA(1, 12) = 24
    EA(1, 13) = 24
    EA(1, 14) = 24
    EA(1, 15) = 24
    EA(1, 16) = 24

    EAFind = EA
End If

End Function
Function ShiftCode(Shift As Variant) As String
    EAShift = MasShift.Range("Master_Shift")

    For i = 1 To UBound(EAShift)
        If Shift = EAShift(i, 3) Then ShiftCode = EAShift(i, 2)
    Next i
End Function

Sub test()

EAFind "Permanent", "Wages", "DS"

End Sub
Sub TopFolder()

On Error GoTo SafeExit

    Dim FileSystem As Object
    Dim HostFolder, NameSh As String
    Dim FileNo As Integer
    Dim TimeStart As Double
    Dim P, RowStart As Integer
    
    If ActiveSheet.Cells(1, 4) = 1 Then 'Process single timesheet file
        Extract

        If MsgBox("Generate Report Summary Pivot Table?", vbOKCancel, "Pivot Report") = vbOK Then
            Application.StatusBar = "Generating ReportSummary..."
            RepSumPivot
            If ThisWorkbook.Sheets("ReportSummary").Visible = False Then ThisWorkbook.Sheets("ReportSummary").Visible = True
            ThisWorkbook.Sheets("ReportSummary").Activate
        End If

        Application.StatusBar = False
        Exit Sub
    End If
        
    NameSh = "Summary"
    HostFolder = ThisWorkbook.Sheets(NameSh).Range("E1") & "\"
    
    If HostFolder = "\" Or Dir(HostFolder, vbDirectory) = "" Then
        MsgBox "Please select folder location of timesheets for extracting."
        Exit Sub
    End If
    
    TimeStart = Timer
    ActiveSheet.Unprotect
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    Set FileSystem = CreateObject("Scripting.FileSystemObject")
    RowStart = ThisWorkbook.Sheets(NameSh).Range("A" & Rows.Count).End(xlUp).Row - 3
    
    FileNo = SubFolderProc(FileSystem.GetFolder(HostFolder), 0, 0, 0, NameSh, 0) 'Main File Processing Function
    SubFolderProc FileSystem.GetFolder(HostFolder), 0, FileNo, 1, NameSh, RowStart
    
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    
    SumCount = ThisWorkbook.Sheets(NameSh).Range("Z" & Rows.Count).End(xlUp).Row
    LastRow = Range("A4").CurrentRegion.Rows.Count + 2
    
    If LastRow > 4 Then
        If TableExists(ActiveSheet, "DataSummary") = False Then
            ActiveSheet.ListObjects.Add(xlSrcRange, Range("A3:W" & LastRow)).name = "DataSummary"
            ActiveSheet.ListObjects("DataSummary").TableStyle = ""
        End If

        If MsgBox("Generate Report Summary Pivot Table?", vbOKCancel, "Pivot Report") = vbOK Then
            Application.StatusBar = "Generating ReportSummary..."
            RepSumPivot
            If ThisWorkbook.Sheets("ReportSummary").Visible = False Then ThisWorkbook.Sheets("ReportSummary").Visible = True
            ThisWorkbook.Sheets("ReportSummary").Activate
        End If
    End If
    
    RowCount = ThisWorkbook.Sheets(NameSh).Range("A" & Rows.Count).End(xlUp).Row
    ThisWorkbook.Sheets(NameSh).Range("A3:W" & RowCount).name = NameSh
    
    ActiveSheet.Protect AllowFiltering:=True

    Application.StatusBar = False
    TimeRun = Format((Timer - TimeStart) / 86400, "hh:mm:ss")
    MsgBox (SumCount - 3 & " of" & FileNo & " Timesheets Extracted Successfully" & vbCrLf & "Time Taken " & TimeRun), , "Performance"

Exit Sub
   
SafeExit:
    Application.StatusBar = "Sub ExtractAll" & ", " & Err.Number & ", " & Err.Description
    On Error GoTo 0
    
End Sub
Function SubFolderProc(Folder, FileTotal As Integer, AllFileTotal As Integer, P As Integer, NameSh As String, InitRow As Integer) As Integer
    
On Error GoTo SafeExit
    
    Dim SubFolder
    Dim x, k As Integer
    
    If ThisWorkbook.Sheets(NameSh).Cells(1, 9) = True Then
        For Each SubFolder In Folder.SubFolders
            SubFolderProc SubFolder, FileTotal, AllFileTotal, P, NameSh, InitRow
        Next
    End If
    
    Dim Tfile As File
    Dim DataSum As Variant
    Dim FSO As New FileSystemObject
    
    SumCount = ThisWorkbook.Sheets(NameSh).Range("Y" & Rows.Count).End(xlUp).Row
        
    x = 0
    k = SumCount + 1
    FileTotal = 0
    ReDim DataSum(22, x)
    
        For Each Tfile In Folder.Files 'count number of files in the directory
            If (FSO.GetExtensionName(Tfile.Path) = "xlsm" Or FSO.GetExtensionName(Tfile.Path) = "xlsb" Or FSO.GetExtensionName(Tfile.Path) = "xlsx") And P = 1 Then FileTotal = FileTotal + 1
            If (FSO.GetExtensionName(Tfile.Path) = "xlsm" Or FSO.GetExtensionName(Tfile.Path) = "xlsb" Or FSO.GetExtensionName(Tfile.Path) = "xlsx") And P = 0 Then AllFileTotal = AllFileTotal + 1
        Next
        
        If P = 0 Then SubFolderProc = AllFileTotal
        
        If P = 1 Then
        For Each Tfile In Folder.Files
         
            If (FSO.GetExtensionName(Tfile.Path) = "xlsm" Or FSO.GetExtensionName(Tfile.Path) = "xlsb" Or FSO.GetExtensionName(Tfile.Path) = "xlsx") Then
                 file_name = Tfile.name
                 full_path = Tfile
                          
                 FileCount = FileCount + 1
                 Application.StatusBar = "Processing " & FileCount & " of " & FileTotal & " (" & AllFileTotal & ") files... " & Tfile.ParentFolder & "\" & CStr(file_name)
                 
                 '''''''''''''''''''' Start Pull Data ''''''''''''''''''''
                 SheetTotal = 0
                 DataRange = Importdata(Tfile.ParentFolder & "\", Tfile.name) 'Generates jagged array for each workbook
        
                 For a = 0 To 6
                     If UBound(DataRange(a)) > 0 Then
                         If DataRange(a)(1, 4) = 1 Then
                             
                             RowCount = UBound(DataRange(a)) - 9 'Determine the number of rows
                             
                             For y = 1 To RowCount 'Determine the allowance range
                                 Select Case DataRange(a)(y, 1)
                                     Case "WORKED HOURS"
                                         WorkStart = y + 2
                                     Case "ALLOWANCES"
                                         WorkEnd = y - 1
                                         AllowStart = y + 2
                                         AllowEnd = RowCount
                                 End Select
                             Next y
         
                             Col = 1
                             Do Until DataRange(a)(2, Col) = "Total Hours"
                                 Col = Col + 1
                             Loop
                             
                             If DataRange(a)(7, 1) <> 0 Then 'Data for approvals
                                 TimeID = DataRange(a)(8, 1)
                                 App = Format(DataRange(a)(8, 7), "yyyy/mm/dd hh:mm")
                                 CustSig = DataRange(a)(RowCount + 8, 3)
                                 CompSig = DataRange(a)(RowCount + 8, 12)
                             End If
         
                             For i = 9 To Col - 1 'cycle through each employee column
                                 For j = WorkStart To AllowEnd 'cycle through worked hours
                                     If DataRange(a)(2, i) <> 0 And DataRange(a)(2, i) <> vbNullString Then
                                         If DataRange(a)(j, i) <> 0 And DataRange(a)(j, i) <> vbNullString And j <> AllowStart - 2 Then
                                             
                                                 DataSum(0, x) = Format(CStr(DataRange(a)(4, 7)), "mm/dd/yyyy") 'Date (day and month switch for some unknown reason)
                                                 DataSum(11, x) = CStr(DataRange(a)(6, i)) 'Shift
                                                 DataSum(12, x) = CStr(DataRange(a)(3, 7)) 'Supervisor
                                                 DataSum(1, x) = CStr(DataRange(a)(j, 5)) 'External Reference
                                                 DataSum(2, x) = CStr(DataRange(a)(j, 1)) 'Workorder
                                                 DataSum(3, x) = CStr(DataRange(a)(j, 2)) 'Operation
                                                 DataSum(4, x) = CStr(DataRange(a)(3, i)) 'Employee ID
                                                 DataSum(5, x) = CStr(DataRange(a)(2, i)) 'Name
                                                 DataSum(6, x) = CStr(DataRange(a)(1, i)) 'Emp Type
                                                 DataSum(7, x) = CStr(DataRange(a)(4, i)) 'Trade
                                                 DataSum(13, x) = Now() 'TimeStamp
                                                 DataSum(14, x) = file_name 'Filename
                                                 DataSum(19, x) = CStr(DataRange(a)(5, 6)) 'Project UID
                                                 DataSum(20, x) = CStr(DataRange(a)(3, i)) & "-" & Format(CStr(DataRange(a)(4, 7)), "dd/mm/yyyy") 'Emp-Day UID
                                                 DataSum(21, x) = RoleP6(CStr(DataRange(a)(4, i)))
                                                 DataSum(22, x) = CompName(CStr(DataRange(a)(3, i)))
                                                 If DataRange(a)(7, 1) <> 0 Then
                                                     DataSum(15, x) = TimeID
                                                     DataSum(16, x) = App
                                                     DataSum(17, x) = CustSig
                                                     DataSum(18, x) = CompSig
                                                 End If
                                                 DataSum(9, x) = CStr(DataRange(a)(j, i))
                                                 
                                                 If j >= WorkStart And j <= WorkEnd Then
                                                     If ListCheck(CStr(DataRange(a)(j, 3))) <> vbNullString Then
                                                         DataSum(8, x) = CStr(DataRange(a)(j, 3)) & " - " & CStr(DataRange(a)(j, 7)) 'Type
                                                     Else
                                                         DataSum(8, x) = CStr(DataRange(a)(j, 3))
                                                     End If
                                                     DataSum(10, x) = "Hours" 'Units
                                                 ElseIf j >= AllowStart And j <= AllowEnd Then
                                                     DataSum(8, x) = "Allow" & " - " & CStr(DataRange(a)(j, 7)) 'Type
                                                     DataSum(10, x) = CStr(DataRange(a)(j, 8)) 'Units
                                                 End If
         
                                             x = x + 1
                                             ReDim Preserve DataSum(22, x)
                                         End If
                                     End If
                                 Next j
                             Next i
                         End If
                         SheetTotal = SheetTotal + 1
                     End If
                 Next
                 
                 'If SheetTotal > 0 Then
                     ThisWorkbook.Sheets(NameSh).Cells(k, 25) = file_name
                     ThisWorkbook.Sheets(NameSh).Cells(k, 26) = SheetTotal
                     k = k + 1
                 'End If
                 
            End If
LoopResume:
        Next
        
        If x > 0 Then ThisWorkbook.Sheets("Summary").Range("A" & InitRow + 4 & ":W" & InitRow + x + 3) = Application.WorksheetFunction.Transpose(DataSum)
        InitRow = InitRow + x
    
        End If 'No processing if P = 0

Exit Function
   
SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        Application.StatusBar = "Sub ExtractAll" & ", " & Err.Number & ", " & Err.Description & " Check File..." & CStr(file_name)
        ThisWorkbook.Sheets(NameSh).Cells(k, 25) = "Error" & ", " & Err.Number & ", " & Err.Description & "," & CStr(file_name) & ", " & CStr(DataRange(a)(2, i)) & ", " & Format(CStr(DataRange(a)(4, 7)), "ddd")
        k = k + 1
        Resume LoopResume
        On Error GoTo 0

End Function

Sub ExtractClosedEBA()

On Error GoTo SafeExit

    If ActiveSheet.Cells(1, 4) = 1 Then
        ExtractEBA
        Exit Sub
    End If
    
    'ADD NEW
    Dim DataRangeAllow, DataRange As Variant
    Dim DataSum() As Variant
    Dim DataRow As Integer

    Dim x, i, j, k, Col, RowCount, FileTotal, FileCount, SheetTotal, DataCount, SumCount As Integer
    Dim EBAj, EBAi, EBAt, EBAw As Integer
    Dim EBA, TH, THR, THB, WOH, WOR, EBAR, TimeStart As Double
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim day As Integer
    Dim Shift, NameSh, TimeRun As String
    Dim DictHrs As New Scripting.Dictionary
    Dim DictEBA As New Scripting.Dictionary
    Dim EmpID As String
    Dim Arr(0 To 3) As Long

    TimeStart = Timer
    NameSh = "SummaryEBA"

    If FolderCheck(NameSh) = True Then 'check if file path is the same as extraction path
        MsgBox "The Timesheet Consolidate Tool cannot be operated in the same folder as the timesheets they are extracting. Please move the Timesheet Consolidate Tool and try again."
        Exit Sub
    End If

    DataCount = ThisWorkbook.Sheets(NameSh).Range("A" & Rows.Count).End(xlUp).Row 'used to append data not over write in data summary
    SumCount = ThisWorkbook.Sheets(NameSh).Range("R" & Rows.Count).End(xlUp).Row

    x = 0 'DataCount + 1
    k = SumCount + 1
    
    ReDim DataSum(16, x) 'columns and rows switched due to redim limitation (must use second attribute)
    
    If Dir(ThisWorkbook.Sheets(NameSh).Range("E1") & "\" & client, vbDirectory) = "" Then GetFolder
    
    ActiveSheet.Unprotect
    Application.ScreenUpdating = False 'Process optimisation
    Application.EnableEvents = False

    '''''''''''''''''''' Start Workbook Identification ''''''''''''''''''''
    If ThisWorkbook.Sheets(NameSh).Range("E1") = "" Then
        MsgBox "Please select the folder location for the timesheets you wish to extract before extracting."
        Exit Sub
    End If

    folder_path = Range("E1") & "\" 'Correction to folder path format
    file_name = Dir(folder_path) 'set file path

    Do While file_name <> "" 'count number of files in the directory
        FileTotal = FileTotal + 1
        file_name = Dir()
    Loop

    file_name = Dir(folder_path)
    Do While file_name <> "" 'Loop through workbooks until all files opened
        full_path = folder_path & file_name 'Set path of file to open
        'Set wb = Workbooks.Open(full_path, UpdateLinks:=False)  'Assign workbook a variable and open it

        FileCount = FileCount + 1
        Application.ScreenUpdating = True
        Application.StatusBar = "Processing " & FileCount & " of " & FileTotal & " files"
        Application.ScreenUpdating = False

        '''''''''''''''''''' Start Pull Data ''''''''''''''''''''
        'wb.Worksheets("Mon").Select 'start at Monday
        SheetTotal = 0
 
        DataRange = Importdata(Range("E1") & "\", CStr(file_name))  'Generates jagged array for each workbook
        
'        For Each ws In Sheets
        For a = 0 To 6
            If UBound(DataRange(a)) > 0 Then
'        If ws.name = "Mon" Or ws.name = "Tue" Or ws.name = "Wed" Or _
'           ws.name = "Thu" Or ws.name = "Fri" Or ws.name = "Sat" Or ws.name = "Sun" Then
            If DataRange(a)(1, 4) = 1 Then

                RowCount = UBound(DataRange(a)) - 9 'Determine the number of rows

                For y = 1 To RowCount 'Determine the allowance range
                    Select Case DataRange(a)(y, 1)
                        Case "WORKED HOURS"
                            WorkStart = y + 2
                        Case "ALLOWANCES"
                            WorkEnd = y - 1
                            AllowStart = y + 2
                            AllowEnd = RowCount - 2
                    End Select
                Next y

                Col = 1
                Do Until DataRange(a)(2, Col) = "Total Hours" 'Determine number of employee columns
                    Col = Col + 1
                Loop

                day = Weekday(DataRange(a)(4, 7), vbMonday) 'Determine day of week as integer starting Monday = 1
                Shift = DataRange(a)(5, 7) 'Determine Shift

                ' Find and set EBA parameters (reset each worksheet/day)
                If DataRange(a)(5, 7) = "Public" Then 'Check Public Holiday
                    EBAw = 8
                ElseIf day < 6 And Shift = "Day" Then 'Day Shift
                    EBAw = 2
                ElseIf day < 6 And Shift = "Afternoon" Then 'Afternoon Shift
                    EBAw = 3
                ElseIf day < 6 And Shift = "Night" Then 'Night Shift
                    EBAw = 4
                ElseIf day = 6 And Shift <> "Night" Then 'Saturday Day Shift
                    EBAw = 5
                ElseIf day = 6 And Shift = "Night" Then 'Saturday Night Shift
                    EBAw = 6
                    Else 'Sunday Shift
                    EBAw = 7
                End If

                EBAi = 3 'set EBA counter to start in column 3
                EBAt = 3
                
                ' ADD NEW
                'DataRange = ws.Range(ws.Cells(1, 1), ws.Cells(RowCount, Col - 1))
                
                For i = 9 To Col - 1 'cycle through each employee column

                    If Left(DataRange(a)(1, i), 5) = "Wages" Then 'Use Wages Calculations

                        'Initialise variables for each employee
                        TH = DataRange(a)(5, i) 'select the total hours worked for each employee
                        THB = 0 'Total Hour Bucket
                        THR = TH - THB 'Total Hours Remaining

                        If Left(DataRange(a)(1, i), 5) = "Staff" Then 'Set EBA for staff
                            EBAj = 9 'Switch to Staff scenario
                        Else
                            EBAj = EBAw 'Switch back to Wages scenario
                        End If
                        EBAR = Sheets("EBA").Cells(EBAj, EBAi)

                        For j = WorkStart To AllowEnd 'cycle through each work order
                            If DataRange(a)(2, i) <> 0 Or DataRange(a)(2, i) <> vbNullString Then
                                If DataRange(a)(j, i) <> 0 Or DataRange(a)(j, i) <> vbNullString Then
                                
                                    'Initialise variables for each work order
                                    WOH = DataRange(a)(j, i) 'Work Order Hours
                                    WOR = WOH ' Work Order Hours Remaining
'                                    Debug.Print "WOR New Work Order"; WOR

                                    If j <= WorkEnd Then 'Search Working Hours
                                        Do Until WOR = 0 'loop until hours of work order have been allocated
                                            EBA = Sheets("EBA").Cells(EBAj, EBAi) 'Set EBA
                                            If EBA = 0 Then
                                                EBAi = EBAi + 1
                                                EBAt = EBAt + 1
                                                EBAR = Sheets("EBA").Cells(EBAj, EBAi)
                                            Else

'                                                Debug.Print "EBA Start"; EBA
'                                                Debug.Print "EBAR: "; EBAR
'                                                Debug.Print "EBAi"; EBAi

                                                ' Is Work Order Hours Remaining to be allocated less/greater than or equal to the EBA Remaining to be aloocated
                                                If WOR < EBAR Then
                                                    hours = WOR 'set hours to be written to the sheet
                                                    WOR = WOR - hours
                                                    EBAR = EBAR - hours
                                                    'ThisWorkbook.Sheets("SummaryEBA").Cells(x, 12).Value = Sheets("EBA").Cells(1, EBAt)  'Rate Type
                                                    ' ADD NEW
                                                    DataSum(11, x) = Sheets("EBA").Cells(1, EBAt)  'Rate Type

                                                ElseIf WOR > EBAR Then
                                                    hours = WOR - (WOR - EBAR)
                                                    WOR = Application.WorksheetFunction.Max(0, WOR - hours)
                                                    'ThisWorkbook.Sheets("SummaryEBA").Cells(x, 12).Value = Sheets("EBA").Cells(1, EBAt)  'Rate Type
                                                    ' ADD NEW
                                                    DataSum(11, x) = Sheets("EBA").Cells(1, EBAt)  'Rate Type
                                                    EBAi = EBAi + 1
                                                    EBAt = EBAt + 1
                                                    EBAR = Sheets("EBA").Cells(EBAj, EBAi)

                                                Else
                                                    hours = WOR
                                                    WOR = 0
                                                    'ThisWorkbook.Sheets("SummaryEBA").Cells(x, 12).Value = Sheets("EBA").Cells(1, EBAt)  'Rate Type
                                                    ' ADD NEW
                                                    DataSum(11, x) = Sheets("EBA").Cells(1, EBAt)  'Rate Type
                                                    EBAi = EBAi + 1
                                                    EBAt = EBAt + 1
                                                    EBAR = Sheets("EBA").Cells(2, EBAi)
                                                End If
                                                                                                                                                
                                                DataSum(0, x) = Format(DataRange(a)(4, 7), "mm/dd/yyyy")  'Date (day and month are switched for unknown reason)
                                                DataSum(12, x) = DataRange(a)(6, i) 'Shift
                                                DataSum(13, x) = DataRange(a)(3, 7) 'Supervisor
                                                DataSum(2, x) = DataRange(a)(j, 1) 'Workorder
                                                DataSum(3, x) = DataRange(a)(j, 2) 'Operation
                                                DataSum(1, x) = DataRange(a)(j, 5) 'External Order
                                                DataSum(4, x) = DataRange(a)(3, i) 'Employee ID
                                                DataSum(5, x) = DataRange(a)(2, i) 'Name
                                                DataSum(6, x) = DataRange(a)(1, i) 'Emp Type
                                                DataSum(7, x) = DataRange(a)(4, i) 'Trade
                                                DataSum(14, x) = Now() 'TimeStamp
                                                DataSum(15, x) = CStr(file_name) 'Filename
                                                DataSum(10, x) = "Hours" 'Units
                                                DataSum(9, x) = hours 'Quantity
                                                DataSum(8, x) = DataRange(a)(j, 3) 'Type
                                                DataSum(10, x) = "Hours" 'Units

                                                THB = THB + hours
                                                THR = TH - THB

'                                                Debug.Print "hours"; hours
'                                                Debug.Print "THB"; THB
'                                                Debug.Print "THR"; THR
'                                                Debug.Print "WOR"; WOR
'                                                Debug.Print "EBAR"; EBAR
'                                                Debug.Print "EBA End"; EBA
'                                                Debug.Print "-----"
                                                x = x + 1 'add new line
                                                ReDim Preserve DataSum(16, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                            End If
                                        Loop
                                    
                                    ElseIf j >= AllowStart Then ' Search Allowances

                                        DataSum(8, x) = "Allow" 'Type
                                        DataSum(0, x) = Format(DataRange(a)(4, 7), "mm/dd/yyyy") 'Date
                                        DataSum(12, x) = DataRange(a)(6, i) 'Shift
                                        DataSum(13, x) = DataRange(a)(3, 7) 'Supervisor
                                        DataSum(2, x) = DataRange(a)(j, 1) 'Workorder
                                        DataSum(3, x) = DataRange(a)(j, 2) 'Operation
                                        DataSum(1, x) = DataRange(a)(j, 5) 'External Order
                                        DataSum(4, x) = DataRange(a)(3, i) 'Employee ID
                                        DataSum(5, x) = DataRange(a)(2, i) 'Name
                                        DataSum(6, x) = DataRange(a)(1, i) 'Emp Type
                                        DataSum(7, x) = DataRange(a)(4, i) 'Trade
                                        DataSum(14, x) = Now() 'TimeStamp
                                        DataSum(15, x) = CStr(file_name) 'Filename
                                        DataSum(10, x) = DataRange(a)(j, 8) 'Units
                                        DataSum(9, x) = DataRange(a)(j, i) 'Quantity
                                        DataSum(11, x) = DataRange(a)(j, 7) 'Rate
                                        
                                        x = x + 1
                                        ReDim Preserve DataSum(16, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                    End If
                                End If
                            End If
                        Next j
                        EBAi = 3  'reset EBA
                        EBAt = 3
                        EBAR = Sheets("EBA").Cells(EBAj, EBAi) 'reset EBAR
                        '''''''''''''''''''' Start Staff Cycle ''''''''''''''''''''
                    Else
                        If Left(DataRange(a)(1, i), 5) = "Staff" Then 'Set EBA for staff
                            EBAj = 9 'Staff scenario
                        End If

                        'Load Employee
                        EmpID = DataRange(a)(2, i)
                        'Stop
                        'Check Dictionary for Employee
                        If Not DictHrs.Exists(EmpID) Then
                            DictHrs.Add EmpID, 0 'Create Entry with hours
                        End If

                        'Check Dictionary for EBA
                        If Not DictEBA.Exists(EmpID) Then
                            'Create initial values
                            Arr(0) = EBAi
                            Arr(1) = EBAj
                            Arr(2) = EBAt
                            Arr(3) = ThisWorkbook.Sheets("EBA").Cells(EBAj, EBAi) 'Set EBA
                            DictEBA.Add EmpID, Arr
                        Else
                            'Use existing values
                            Arr(0) = DictEBA(EmpID)(0)
                            Arr(1) = DictEBA(EmpID)(1)
                            Arr(2) = DictEBA(EmpID)(2)
                            Arr(3) = DictEBA(EmpID)(3)
                        End If

                        EBA = Sheets("EBA").Cells(DictEBA(EmpID)(1), DictEBA(EmpID)(0)) 'Initialise EBA

                        'Debug.Print arr(0)
                        'Debug.Print arr(1)
                        'Debug.Print arr(2)
                        'Debug.Print arr(3)
                        'Debug.Print DictEBA(EmpID)(0)
                        'Debug.Print DictEBA(EmpID)(1)
                        'Debug.Print DictEBA(EmpID)(2)
                        'Debug.Print DictEBA(EmpID)(3)

                        For j = WorkStart To AllowEnd 'cycle through each work order
                            If DataRange(a)(2, i) <> "" Then
                                If DataRange(a)(j, i) <> "" And DataRange(a)(j, i) <> 0 Then
                                                                       
                                    WOH = DataRange(a)(j, i)
                                    WOR = WOH
                                    'If Left(ws.Cells(1, i), 5) = "Staff" Then
                                    DictHrs(EmpID) = DictHrs(EmpID) + WOH
                                    'Else
                                    'DictHrs(EmpID) = WOH
                                    'End If

                                    If j <= WorkEnd Then 'Search Working Hours
                                        hours = 0
                                        Do Until WOR = 0

'                                            Debug.Print "xxxxxxxxxxx"
'                                            Debug.Print "---Read---"
'                                            Debug.Print "Sheet Name "; ws.name
'                                            Debug.Print "Emp "; EmpID
'                                            Debug.Print "DictHrs(EmpID)"; DictHrs(EmpID)
                                            'Debug.Print "hours"; hours
'                                            Debug.Print "WOR"; WOR
                                            'Debug.Print "DictEBA EBAi"; DictEBA(EmpID)(0)
                                            'Debug.Print "DictEBA EBAj"; DictEBA(EmpID)(1)
                                            'Debug.Print "DictEBA EBAt"; DictEBA(EmpID)(2)
'                                            Debug.Print "DictEBA EBA"; DictEBA(EmpID)(3)
                                            'Stop
                                            If DictHrs(EmpID) < DictEBA(EmpID)(3) Then
                                                hours = WOR
                                                WOR = WOR - hours
                                                'ThisWorkbook.Sheets("SummaryEBA").Cells(x, 12).Value = Sheets("EBA").Cells(1, arr(2))  'Rate Type
                                                ' ADD NEW
                                                DataSum(11, x) = Sheets("EBA").Cells(1, Arr(2))  'Rate Type

                                            ElseIf DictHrs(EmpID) > DictEBA(EmpID)(3) Then
                                                hours = WOR - (DictHrs(EmpID) - Arr(3))
                                                WOR = Application.WorksheetFunction.Max(0, WOR - hours)
                                                'ThisWorkbook.Sheets("SummaryEBA").Cells(x, 12).Value = Sheets("EBA").Cells(1, arr(2))  'Rate Type
                                                ' ADD NEW
                                                DataSum(11, x) = Sheets("EBA").Cells(1, Arr(2))  'Rate Type
                                                Arr(0) = Arr(0) + 1
                                                Arr(2) = Arr(2) + 1
                                                Arr(3) = ThisWorkbook.Sheets("EBA").Cells(DictEBA(EmpID)(1), Arr(0))
                                                DictEBA(EmpID) = Arr

                                                Else 'if dicthrs = EBAR
                                                hours = WOR
                                                WOR = 0
                                                'ThisWorkbook.Sheets("SummaryEBA").Cells(x, 12).Value = Sheets("EBA").Cells(1, arr(2))  'Rate Type
                                                ' ADD NEW
                                                DataSum(11, x) = Sheets("EBA").Cells(1, Arr(2))  'Rate Type
                                                Arr(0) = Arr(0) + 1
                                                Arr(2) = Arr(2) + 1
                                                Arr(3) = ThisWorkbook.Sheets("EBA").Cells(DictEBA(EmpID)(1), Arr(0))
                                                DictEBA(EmpID) = Arr
                                            End If

'                                            Debug.Print "---Write---"
'                                            Debug.Print "DictHrs(EmpID)"; DictHrs(EmpID)
                                            'Debug.Print "hours"; hours
'                                            Debug.Print "WOR"; WOR
                                            'Debug.Print "DictEBA EBAi"; DictEBA(EmpID)(0)
                                            'Debug.Print "DictEBA EBAj"; DictEBA(EmpID)(1)
                                            'Debug.Print "DictEBA EBAt"; DictEBA(EmpID)(2)
'                                            Debug.Print "DictEBA EBA"; DictEBA(EmpID)(3)
'                                            Debug.0 "xxxxxxxxxxx"
                                            'Stop

                                            'Print statements

'                                            If Left(ws.Cells(j, 3), 3) <> "WBS" Then 'Check whether WBS or Service Order
'                                                Sheets("SummaryEBA").Cells(x, 2).FormulaR1C1 = "=IFERROR(INDEX(WO_Customer,MATCH(RC[1],WO_UGL,0)),"""")" 'External Order
'                                            End If
                                            
                                            ' ADD NEW
                                            DataSum(0, x) = Format(DataRange(a)(4, 7), "mm/dd/yyyy") 'Date
                                            DataSum(12, x) = DataRange(a)(5, 6) 'Shift
                                            DataSum(13, x) = DataRange(a)(3, 6) 'Supervisor
                                            DataSum(2, x) = DataRange(a)(j, 1) 'Workorder
                                            DataSum(3, x) = DataRange(a)(j, 2) 'Operation
                                            DataSum(4, x) = DataRange(a)(3, i) 'Employee ID
                                            DataSum(5, x) = DataRange(a)(2, i) 'Name
                                            DataSum(6, x) = DataRange(a)(1, i) 'Emp Type
                                            DataSum(7, x) = DataRange(a)(4, i) 'Trade
                                            DataSum(14, x) = Now() 'TimeStamp
                                            DataSum(15, x) = CStr(file_name) 'Filename
                                            DataSum(10, x) = "Hours" 'Units
                                            DataSum(9, x) = hours 'Quantity
                                            DataSum(2, x) = DataRange(j, 5) 'External Order
                                            DataSum(x, 8) = DataRange(j, 3) 'Type
                                            
                                            x = x + 1 'add new line
                                            ReDim Preserve DataSum(16, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                        Loop
                                    ElseIf j >= AllowStart Then ' Search Allowances
                                        
                                        ' ADD NEW
                                        DataSum(8, x) = "Allow" 'Type
                                        DataSum(0, x) = Format(DataRange(4, 7), "mm/dd/yyyy") 'Date
                                        DataSum(12, x) = DataRange(6, i) 'Shift
                                        DataSum(13, x) = DataRange(3, 7) 'Supervisor
                                        DataSum(2, x) = DataRange(j, 1) 'Workorder
                                        DataSum(3, x) = DataRange(j, 2) 'Operation
                                        DataSum(1, x) = DataRange(j, 5) 'External Order
                                        DataSum(4, x) = DataRange(3, i) 'Employee ID
                                        DataSum(5, x) = DataRange(2, i) 'Name
                                        DataSum(6, x) = DataRange(1, i) 'Emp Type
                                        DataSum(7, x) = DataRange(4, i) 'Trade
                                        DataSum(14, x) = Now() 'TimeStamp
                                        DataSum(15, x) = CStr(file_name) 'Filename
                                        DataSum(10, x) = DataRange(j, 8) 'Units
                                        DataSum(9, x) = DataRange(j, i) 'Quantity
                                        DataSum(11, x) = DataRange(j, 7) 'Rate
                                        
                                        x = x + 1
                                        ReDim Preserve DataSum(16, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                    End If
                                End If
                            End If
                        Next j
                        '''''''''''''''''''' End Cycle Employee Column ''''''''''''''''''''
                    End If
                Next i

            End If
        SheetTotal = SheetTotal + 1
        End If
    Next
    
        If x > 0 Then ThisWorkbook.Sheets("SummaryEBA").Range("A4:P" & x + 3) = Application.WorksheetFunction.Transpose(DataSum)
        
        '''''''''''''''''''' End Pull Data ''''''''''''''''''''
        ThisWorkbook.Sheets(NameSh).Cells(k, 18) = file_name
        ThisWorkbook.Sheets(NameSh).Cells(k, 19) = SheetTotal
        k = k + 1
        
        'Workbooks(file_name).Close savechanges:=False 'Close the workbook that's just been opened
        file_name = Dir 'continue to next file

        'remove dictionaries
        DictHrs.RemoveAll
        DictEBA.RemoveAll

    Loop
    '''''''''''''''''''' End Workbook Identification ''''''''''''''''''''

    TimeRun = Format((Timer - TimeStart) / 86400, "hh:mm:ss")
    MsgBox (k - (SumCount + 1) & " Timesheets Extracted Successfully" & vbCrLf & "Time Taken " & TimeRun), , "Performance"

'    LastRow = Range("P4").CurrentRegion.Rows.Count + 2
'
'    If TableExists(ActiveSheet, "SummaryEBA") = False Then 'establish table if it doesn't already exist
'        ActiveSheet.ListObjects.Add(xlSrcRange, Range("A3:P" & LastRow)).Name = "SummaryEBA"
'        ActiveSheet.ListObjects("SummaryEBA").TableStyle = ""
'    End If

    Application.ScreenUpdating = True
    Application.StatusBar = False
    Application.EnableEvents = True
    ActiveSheet.Protect

Exit Sub

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub

Sub UploadNoInt()

If DataUpload.Cells(1, 10) = True Then
    TopFolderEA ("Y")
    'UploadClosed ("Y") 'Switch selected for EA interpretation
Else
    TopFolderEA ("N")
    'UploadClosed ("N")
End If

End Sub

Sub UploadClosed(Interpret As String)
   
On Error GoTo SafeExit
   
'    If ActiveSheet.Cells(1, 4) = 1 Then
'        ExtractUpload
'        Exit Sub
'    End If
    
    Dim DataRangeAllow, DataRange As Variant
    Dim DataSum() As Variant
    Dim DataRow As Integer
    
    Dim a, b, x, i, j, k, n, Col, RowCount, FileTotal, FileCount, SheetTotal, DataCount, SumCount, NoSub As Integer
    Dim EBAj, EBAi, EBAt, EBAw, ER As Integer
    Dim EBA, WOH, WOR, EBAR, SHA, NT, TimeStart As Double
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim day, Pub As Integer
    Dim Shift, NameSh, TimeRun As String
    Dim DictHrs As New Scripting.Dictionary
    Dim DictEBA As New Scripting.Dictionary
    Dim EmpID As String
    Dim Arr(0 To 3) As Long
    Dim Allow(), EA(), PubH() As Variant
    Dim DayArr(1, 7) As Variant
    Dim RateType, ActiType, WageType, SA As String

    TimeStart = Timer
    NameSh = "UploadSAP"
        
    If FolderCheck(NameSh) = True Then 'check if file path is the same as extraction path
        MsgBox "The Timesheet Consolidate Tool cannot be operated in the same folder as the timesheets they are extracting. Please move the Timesheet Consolidate Tool and try again."
        Exit Sub
    End If

    DataCount = ThisWorkbook.Sheets(NameSh).Range("A" & Rows.Count).End(xlUp).Row 'used to append data not over write in data summary
    SumCount = ThisWorkbook.Sheets(NameSh).Range("P" & Rows.Count).End(xlUp).Row

    x = 0 'DataCount + 1
    k = SumCount + 1
    ReDim DataSum(13, x) 'columns and rows switched due to redim limitation (must use second attribute)
        
    DayArr(1, 1) = 12
    DayArr(1, 2) = 13
    DayArr(1, 3) = 14
    DayArr(1, 4) = 15
    DayArr(1, 5) = 16
    DayArr(1, 6) = 10
    DayArr(1, 7) = 11
    
    If Interpret = "Y" Then PubH = MasPublic.Range("Public").Value
    
    If Dir(ThisWorkbook.Sheets(NameSh).Range("E1") & "\" & client, vbDirectory) = "" Then GetFolder
    
    ActiveSheet.Unprotect
    
    Application.EnableEvents = False
    Application.ScreenUpdating = False 'Process optimisation
    
    '''''''''''''''''''' Start Workbook Identification ''''''''''''''''''''
    If ThisWorkbook.Sheets(NameSh).Range("E1") = "" Then
        MsgBox "Please select the folder location for the timesheets you wish to extract before extracting."
        Exit Sub
    End If

    folder_path = Range("E1") & "\" 'Correction to folder path format
    'file_name = Dir(folder_path) 'set file path

    Dim FSO As New FileSystemObject
    Dim MainF As Folder, SubF As Folder
    Dim Tfile As File
    Dim P As Integer

    Set FSO = CreateObject("Scripting.FileSystemObject")
    Set MainF = FSO.GetFolder(folder_path)
    NoSub = 0
    
    If CStr(ThisWorkbook.Sheets("UploadSAP").Cells(1, 9)) = "False" Then   'Sub-folder processing switch
        Level = 0
    Else
        Level = 1
    End If
    
    For Each Tfile In MainF.Files
        If FSO.GetExtensionName(Tfile.Path) = "xlsm" Then
            FileTotal = FileTotal + 1
        End If
    Next
    
    For Each SubF In MainF.SubFolders
    NoSub = 1
        For Each Tfile In SubF.Files
            If FSO.GetExtensionName(Tfile.Path) = "xlsm" And Level = 1 Then
                FileTotal = FileTotal + 1
            End If
        Next
    Next
    
    
    If NoSub = 0 And Dir(folder_path & "\TempTime", vbDirectory) = vbNullString Then
        FSO.CreateFolder folder_path & "\TempTime"
        NoSub = 2
    End If
    
    For P = 0 To Level 'Process main folder and sub folders
        For Each SubF In MainF.SubFolders

'    Do While file_name <> "" 'count number of files in the directory
'        filetotal = filetotal + 1
'        file_name = Dir()
'    Loop

' ---------- Needs to go into file loop ------------
        For Each Tfile In IIf(P = 0, MainF.Files, SubF.Files)
        If FSO.GetExtensionName(Tfile.Path) = "xlsm" Then
        file_name = Tfile.name 'Dir(folder_path)
        'Do While file_name <> "" 'Loop through workbooks until all files opened
        full_path = Tfile 'folder_path & file_name 'Set path of file to open
        'Set wb = Workbooks.Open(full_path, UpdateLinks:=False)  'Assign workbook a variable and open it

        FileCount = FileCount + 1
        Application.StatusBar = "Processing " & FileCount & " of " & FileTotal & " files... " & Tfile.ParentFolder & "\" & CStr(file_name)

        '''''''''''''''''''' Start Pull Data ''''''''''''''''''''
        DataRange = Importdata(Tfile.ParentFolder & "\", Tfile.name) 'Importdata(Range("E1") & "\", CStr(file_name))  'Generates jagged array for each workbook (Stores all timesheet information in memory)
        SheetTotal = 0
        For a = 0 To 6
        
         If UBound(DataRange(a)) > 0 Then
            If DataRange(a)(1, 4) = 1 Then
                
                RowCount = UBound(DataRange(a)) - 9 'Determine the number of rows

                For y = 1 To RowCount 'Determine the allowance range
                    Select Case DataRange(a)(y, 1)
                        Case "WORKED HOURS"
                            WorkStart = y + 2
                        Case "ALLOWANCES"
                            WorkEnd = y - 1
                            AllowStart = y + 2
                            AllowEnd = RowCount
                    End Select
                Next y

                Col = 1
                Do Until DataRange(a)(2, Col) = "Total Hours" 'Determine number of employee columns
                    Col = Col + 1
                Loop

                day = Weekday(CDate(DataRange(a)(4, 7)), vbMonday) 'Determine day of week as integer starting Monday = 1
                Pub = 0
                EBAi = 1
                
                If Interpret = "Y" Then
                    For b = 1 To UBound(PubH)
                        If PubH(b, 1) = CDate(DataRange(a)(4, 7)) Then Pub = 1
                    Next b
                End If
                
                For i = 9 To Col - 1 'cycle through each employee column
                 If DataRange(a)(1, i) <> vbNullString Then
                 
                    EA = EAFind(Right(DataRange(a)(1, i), 3), Left(DataRange(a)(1, i), 3), DataRange(a)(6, i), Pub) 'determine the correct EA to use
                    ER = 1
                        '''''''''''''''''''' Start Wages Cycle ''''''''''''''''''''
                    
                     If EA(1, 1) <> "NIL" Then 'Check if Agreement Set Up
                    
                        'Initialise variables for each employee
                        TH = DataRange(a)(5, i) 'select the total hours worked for each employee
                        THB = 0 'Total Hour Bucket
                        THR = TH - THB 'Total Hours Remaining
                        NT = 0 'Set Normal Time Identifier
                    
                        If Interpret = "Y" Then 'Or Right(DataRange(a)(1, i), 3) = "Ext" Then 'always interpret for subcontractors
                            EBAR = EA(ER, DayArr(1, day))
                        Else
                            EBAR = 24
                        End If
                        
                        For j = WorkStart To AllowEnd 'cycle through each work order
                        
                            If DataRange(a)(2, i) <> 0 And DataRange(a)(2, i) <> vbNullString Then
                                If DataRange(a)(j, i) <> 0 And DataRange(a)(j, i) <> vbNullString Then
                                
                                ' ADD NEW
                                    DataSum(2, x) = Format(DataRange(a)(4, 7), "mm/dd/yyyy") 'Date (Day and month switched for unknown reason)
                                
                                    'Initialise variables for each work order
                                    WOH = DataRange(a)(j, i) 'Work Order Hours
                                    WOR = WOH ' Work Order Hours Remaining
'                                    Debug.Print "WOR New Work Order"; WOR
                                    
                                    If j <= WorkEnd Then 'Search Working Hours
                                        
                                   '****** Start Allocate Hours Per EA *******
                                        Do Until WOR = 0 'loop until hours of work order have been allocated
                                            EBA = EA(ER, DayArr(1, day)) 'Sheets("EBA").Cells(EBAj, EBAi) 'Set EBA
                                            If EBA = 0 Then
                                                EBAi = EBAi + 1
                                                For b = 1 To UBound(EA)
                                                    If EA(b, 9) = 1 Then NT = EA(b, DayArr(1, day)) 'Record NT Allocation
                                                    If EA(b, 9) = EBAi Then
                                                        ER = b
                                                        EBAR = EA(ER, DayArr(1, day))
                                                    End If
                                                Next b
                                            Else

                                                ' Is Work Order Hours Remaining to be allocated less/greater than or equal to the EBA Remaining to be aloocated
                                                If WOR < EBAR Then
                                                    hours = WOR
                                                    WOR = WOR - hours
                                                    EBAR = EBAR - hours
                                                    RateType = EA(ER, 8)
                                                    ActiType = EA(ER, 5)
                                                    WageType = EA(ER, 7)
                                                   
                                                ElseIf WOR > EBAR Then
                                                    
                                                    hours = WOR - (WOR - EBAR)
                                                    WOR = Application.WorksheetFunction.Max(0, WOR - hours)
                                                    RateType = EA(ER, 8) 'Sheets("EBA").Cells(1, EBAt)
                                                    ActiType = EA(ER, 5)
                                                    WageType = EA(ER, 7)
                                                    EBAi = EBAi + 1
                                                    For b = 1 To UBound(EA)
                                                        If EA(b, 9) = 1 Then NT = EA(b, DayArr(1, day))
                                                        If EA(b, 9) = EBAi Then
                                                            ER = b
                                                            EBAR = EA(ER, DayArr(1, day))
                                                        End If
                                                    Next b

                                                Else
                                                    
                                                    hours = WOR
                                                    WOR = 0
                                                    RateType = EA(ER, 8)
                                                    ActiType = EA(ER, 5)
                                                    WageType = EA(ER, 7)
                                                    EBAi = EBAi + 1
                                                    For b = 1 To UBound(EA)
                                                        If EA(b, 9) = 1 Then NT = EA(b, DayArr(1, day))
                                                        If EA(b, 9) = EBAi Then
                                                            ER = b
                                                            EBAR = EA(ER, DayArr(1, day))
                                                        End If
                                                    Next b
                                                
                                                End If
                                     
                                   '****** End Allocate Hours Per EA *******
                                   
                                                If Round(hours, 2) > 0 Then
                                                    DataSum(0, x) = "UPLOAD" 'Profile
                                                    DataSum(1, x) = DataRange(a)(3, i) 'Payroll Number
                                                    DataSum(2, x) = Format(DataRange(a)(4, 7), "mm/dd/yyyy") 'Date
                                                
                                                    If Left(DataRange(a)(9, 3), 1) = "T" Then
                                                        DataSum(4, x) = DataRange(a)(j, 1) & "/00" & DataRange(a)(j, 2) 'Cost Object Service Order
                                                    Else
                                                        DataSum(4, x) = DataRange(a)(j, 5) & "/00" & DataRange(a)(j, 2) 'Cost Object Service Order
                                                    End If
                                                
                                                    DataSum(3, x) = "CS"
                                                    DataSum(5, x) = ActiType 'AA Type
                                                    
                                                    If Interpret = "Y" Then DataSum(6, x) = WageType 'WT Type
                                                    
                                                    DataSum(11, x) = ShiftCode(DataRange(a)(6, i))  'Shift
                                                    DataSum(9, x) = Round(hours, 2) 'Hours
                                                    DataSum(12, x) = ActType(DataRange(a)(4, i))  'Trade
                                                    DataSum(13, x) = DataRange(a)(2, i) 'Name
                                                
                                                    x = x + 1 'add new line
                                                End If

                                                THB = THB + hours
                                                THR = TH - THB
                                                
                                                ReDim Preserve DataSum(13, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                            End If
                                        Loop
                                    
                                    ElseIf j >= AllowStart And DataRange(a)(j, 3) <> "Crib" Then ' Search Allowances
                                        
                                        DataSum(0, x) = "UPLOAD" 'Profile
                                        DataSum(1, x) = DataRange(a)(3, i) 'Payroll Number
                                        DataSum(2, x) = Format(DataRange(a)(4, 7), "mm/dd/yyyy") 'Date
                                        
                                        Allow = MasAllowances.Range("Master_Allow")
                                        
                                        For n = 1 To UBound(Allow)
                                            If DataRange(a)(j, 7) = Allow(n, 1) Then
                                                If Allow(n, 3) <> "N/A" Then
                                                    DataSum(3, x) = Allow(n, 3)
                                                    If Left(DataRange(a)(9, 3), 1) = "T" Then
                                                        DataSum(4, x) = DataRange(a)(j, 1) & "/00" & DataRange(a)(j, 2) 'Cost Object Service Order
                                                    Else
                                                        DataSum(4, x) = DataRange(a)(j, 5) & "/00" & DataRange(a)(j, 2) 'Cost Object Service Order
                                                    End If
                                                Else
                                                    DataSum(3, x) = Allow(n, 3)
                                                End If
                                                
                                                Select Case Allow(n, 4)
                                                    Case "WT"
                                                        DataSum(6, x) = Allow(n, 5)
                                                    Case "AA"
                                                        DataSum(5, x) = Allow(n, 5)
                                                End Select
                                            End If
                                        Next

                                        DataSum(9, x) = DataRange(a)(j, i) ' **Quantity need to Check how to handle in upload**
                                        DataSum(11, x) = ShiftCode(DataRange(a)(6, i)) 'Shift
                                        DataSum(12, x) = ActType(DataRange(a)(4, i)) 'Trade
                                        DataSum(13, x) = DataRange(a)(2, i) 'Name

                                        x = x + 1
                                        ReDim Preserve DataSum(13, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                    End If
                                End If
                            End If
                        Next j
                        
                        '****** Start Allocate Shift Allowances Per EA *******
                        If Interpret = "Y" Then
                            If Pub = 1 Then EA = EAFind(Right(DataRange(a)(1, i), 3), Left(DataRange(a)(1, i), 3), DataRange(a)(6, i), 0)
                            For b = 1 To UBound(EA)
                                
                                If Pub = 1 Then
                                    If EA(b, 9) = 1 Then NT = EA(b, DayArr(1, day))
                                End If
                                
                                If EA(b, 9) = "NT" Or EA(b, 9) = "OT" Then
                                    SHA = EA(b, DayArr(1, day))
                                    SA = EA(b, 9)
                               
                                    If SHA <> vbNullString Then
                                    
                                        If SA = "NT" And TH < SHA Then
                                            DataSum(9, x) = TH
                                        ElseIf SA = "NT" And TH >= SHA Then
                                            DataSum(9, x) = SHA
                                        ElseIf SA = "OT" Then
                                            DataSum(9, x) = TH - NT
                                        End If
                                        
                                        DataSum(6, x) = EA(b, 7) 'WageType
                                        DataSum(0, x) = "UPLOAD" 'Profile
                                        DataSum(1, x) = DataRange(a)(3, i) 'Payroll Number
                                        DataSum(2, x) = Format(DataRange(a)(4, 7), "mm/dd/yyyy") 'Date
'                                            If DataRange(a)(9, 3) = "TRUE" Then
'                                                DataSum(4, x) = DataRange(a)(j, 1) & "/00" & DataRange(a)(j, 2) 'Cost Object Service Order
'                                            Else
'                                                DataSum(4, x) = DataRange(a)(j, 5) & "/00" & DataRange(a)(j, 2) 'Cost Object Service Order
'                                            End If
                                        DataSum(3, x) = "N/A"
                                        'DataSum(5, x) = "SALL" 'ActiType 'AA Type
                                        DataSum(11, x) = ShiftCode(DataRange(a)(6, i)) 'Shift
                                        DataSum(12, x) = ActType(DataRange(a)(4, i)) 'Trade
                                        DataSum(13, x) = DataRange(a)(2, i) 'Name
                                        
                                        x = x + 1
                                        ReDim Preserve DataSum(13, x)
                                    
                                    End If
                                End If
                            Next b
                        End If
                        '****** End Allocate Shift Allowances Per EA *******
                        
                        EBAi = 1  'reset EBA
                        EBAR = EA(EBAi, DayArr(1, day)) 'Sheets("EBA").Cells(EBAj, EBAi) 'reset EBAR
                    Else
                        DataSum(0, x) = "NO AGREEMENT SETUP" 'Profile
                        DataSum(1, x) = DataRange(a)(3, i) 'Payroll Number
                        DataSum(2, x) = Format(DataRange(a)(4, 7), "mm/dd/yyyy") 'Date
                        DataSum(10, x) = DataRange(a)(1, i) & ", " & DataRange(a)(6, i) & ", " & IIf(Pub = 1, "PH", 0)
                        DataSum(11, x) = ShiftCode(DataRange(a)(6, i)) 'Shift
                        DataSum(12, x) = ActType(DataRange(a)(4, i)) 'Trade
                        DataSum(13, x) = DataRange(a)(2, i) 'Name
                        x = x + 1
                        ReDim Preserve DataSum(13, x)
                    End If
                 End If
                Next i
            End If
        
        SheetTotal = SheetTotal + 1
        End If
    Next a
    
        '''''''''''''''''''' End Pull Data ''''''''''''''''''''
    'Application.ScreenUpdating = False
        If SheetTotal > 0 Then
            ThisWorkbook.Sheets(NameSh).Cells(k, 16) = file_name
            ThisWorkbook.Sheets(NameSh).Cells(k, 17) = SheetTotal
            k = k + 1
        End If
        
        'Workbooks(file_name).Close savechanges:=False 'Close the workbook that's just been opened
        'file_name = Dir 'continue to next file

        'remove dictionaries
        DictHrs.RemoveAll
        DictEBA.RemoveAll

    'Loop
                End If
            Next
            If NoSub = 2 And Dir(folder_path & "\TempTime", vbDirectory) = vbNullString Then
                FSO.DeleteFolder folder_path & "\TempTime"
                NoSub = 0
            End If
            If P = 0 Then Exit For 'prevent unnecessary processing of sub folders
        Next
    Next
    '''''''''''''''''''' End Workbook Identification ''''''''''''''''''''

    If x > 0 Then ThisWorkbook.Sheets("UploadSAP").Range("A4:N" & x + 3) = Application.WorksheetFunction.Transpose(DataSum)
' ------------- End move to new function -----------------

    TimeRun = Format((Timer - TimeStart) / 86400, "hh:mm:ss")
    MsgBox (k - (SumCount + 1) & " Timesheets Extracted Successfully" & vbCrLf & "Time Taken " & TimeRun), , "Performance"
    
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Application.StatusBar = False
    
    ActiveSheet.Protect

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub

Function ActType(ActDes As Variant) As String

Dim ActTypeList As Variant
Dim ActCode As String
Dim i As Integer

    ActCode = ""
    ActTypeList = MasRole.Range("Master_Role").Value
    
    If ActDes <> vbNullString Then
        For i = 1 To UBound(ActTypeList)
            If Left(ActTypeList(i, 1), 4) = Left(ActDes, 4) And ActTypeList(i, 2) <> vbNullString Then
                ActCode = ActTypeList(i, 3)
                Exit For
            End If
        Next i
    End If

ActType = ActCode

End Function

Function RoleP6(RoleName As Variant) As String

Dim ActTypeList As Variant
Dim RoleCode As String
Dim i As Integer

    RoleCode = ""
    ActTypeList = MasRole.Range("Master_Role").Value
    
    If RoleName <> vbNullString Then
        For i = 1 To UBound(ActTypeList)
            If ActTypeList(i, 1) = RoleName Then
                RoleCode = ActTypeList(i, 4)
                Exit For
            End If
        Next i
    End If

RoleP6 = RoleCode

End Function
Function CompName(EmpID As String) As String

Dim EmpList As Variant
Dim Company As String
Dim i As Integer

    Company = ""
    EmpList = MasEmployee.Range("Employee_List").Value
    
    If EmpID <> vbNullString Then
        For i = 1 To UBound(EmpList)
            If EmpList(i, 2) = EmpID Then
                Company = EmpList(i, 4)
                Exit For
            End If
        Next i
    End If

CompName = Company

End Function
Sub TopFolderEA(Interpret As String)

On Error GoTo SafeExit

    Dim FileSystem As Object
    Dim HostFolder, NameSh As String
    Dim FileNo As Integer
    Dim P, RowStart As Integer
    
    If ActiveSheet.Cells(1, 4) = 1 Then 'Single File EA Interpretation (This code needs to be updated ***Don't Use this function***)
        ExtractUpload
        Exit Sub
    End If
    
    NameSh = "UploadSAP"
    HostFolder = ThisWorkbook.Sheets(NameSh).Range("E1") & "\"
    
    If HostFolder = "\" Or Dir(HostFolder, vbDirectory) = "" Then
        MsgBox "Please select folder location of timesheets for extracting."
        Exit Sub
    End If
    
    TimeStart = Timer
    ActiveSheet.Unprotect
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    
    Set FileSystem = CreateObject("Scripting.FileSystemObject")
    RowStart = ThisWorkbook.Sheets(NameSh).Range("A" & Rows.Count).End(xlUp).Row - 3
    
    FileNo = SubFolderProcEA(FileSystem.GetFolder(HostFolder), 0, 0, 0, NameSh, 0, Interpret) 'Main File Processing Function
    SubFolderProcEA FileSystem.GetFolder(HostFolder), 0, FileNo, 1, NameSh, RowStart, Interpret
    
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    
    SumCount = ThisWorkbook.Sheets(NameSh).Range("Q" & Rows.Count).End(xlUp).Row
    RowCount = ThisWorkbook.Sheets(NameSh).Range("A" & Rows.Count).End(xlUp).Row
    ThisWorkbook.Sheets(NameSh).Range("A3:N" & RowCount).name = NameSh
    
    ActiveSheet.Protect AllowFiltering:=True

    Application.StatusBar = False
    TimeRun = Format((Timer - TimeStart) / 86400, "hh:mm:ss")
    MsgBox (SumCount - 3 & " of" & FileNo & " Timesheets Extracted Successfully" & vbCrLf & "Time Taken " & TimeRun), , "Performance"

Exit Sub
   
SafeExit:
    Application.StatusBar = "Sub ExtractAll" & ", " & Err.Number & ", " & Err.Description
    On Error GoTo 0
    
End Sub

Function SubFolderProcEA(Folder, FileTotal As Integer, AllFileTotal As Integer, P As Integer, NameSh As String, InitRow As Integer, Interpret As String) As Integer
    
On Error GoTo SafeExit
    
    Dim SubFolder
    Dim DataRangeAllow, DataRange As Variant
    Dim DataSum() As Variant
    Dim DataRow As Integer
    Dim a, b, x, i, j, k, n, Col, RowCount, FileCount, SheetTotal, DataCount, SumCount, NoSub As Integer
    Dim EBAj, EBAi, EBAt, EBAw, ER As Integer
    Dim EBA, WOH, WOR, EBAR, SHA, NT, TimeStart As Double
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim day, Pub As Integer
    Dim Shift, TimeRun As String
    Dim DictHrs As New Scripting.Dictionary
    Dim DictEBA As New Scripting.Dictionary
    Dim EmpID As String
    Dim Arr(0 To 3) As Long
    Dim Allow(), EA(), PubH() As Variant
    Dim DayArr(1, 7) As Variant
    Dim RateType, ActiType, WageType, SA As String
    
    If ThisWorkbook.Sheets(NameSh).Cells(1, 9) = True Then
        For Each SubFolder In Folder.SubFolders
            SubFolderProcEA SubFolder, FileTotal, AllFileTotal, P, NameSh, InitRow, Interpret
        Next
    End If

    Dim Tfile As File
    Dim FSO As New FileSystemObject
    
    SumCount = ThisWorkbook.Sheets(NameSh).Range("P" & Rows.Count).End(xlUp).Row
    x = 0
    k = SumCount + 1
    FileTotal = 0
    ReDim DataSum(13, x) 'columns and rows switched due to redim limitation (must use second attribute)
        
    DayArr(1, 1) = 12
    DayArr(1, 2) = 13
    DayArr(1, 3) = 14
    DayArr(1, 4) = 15
    DayArr(1, 5) = 16
    DayArr(1, 6) = 10
    DayArr(1, 7) = 11
    
    If Interpret = "Y" Then PubH = MasPublic.Range("Public").Value
    
    For Each Tfile In Folder.Files 'count number of files in the directory
        If (FSO.GetExtensionName(Tfile.Path) = "xlsm" Or FSO.GetExtensionName(Tfile.Path) = "xlsb" Or FSO.GetExtensionName(Tfile.Path) = "xlsx") And P = 1 Then FileTotal = FileTotal + 1
        If (FSO.GetExtensionName(Tfile.Path) = "xlsm" Or FSO.GetExtensionName(Tfile.Path) = "xlsb" Or FSO.GetExtensionName(Tfile.Path) = "xlsx") And P = 0 Then AllFileTotal = AllFileTotal + 1
    Next
    
    If P = 0 Then SubFolderProcEA = AllFileTotal
    
    If P = 1 Then
    For Each Tfile In Folder.Files
        If FSO.GetExtensionName(Tfile.Path) = "xlsm" Or FSO.GetExtensionName(Tfile.Path) = "xlsb" Or FSO.GetExtensionName(Tfile.Path) = "xlsx" Then
            file_name = Tfile.name 'Dir(folder_path)
            'Do While file_name <> "" 'Loop through workbooks until all files opened
            full_path = Tfile 'folder_path & file_name 'Set path of file to open
            'Set wb = Workbooks.Open(full_path, UpdateLinks:=False)  'Assign workbook a variable and open it
    
            FileCount = FileCount + 1
            Application.StatusBar = "Processing " & FileCount & " of " & FileTotal & " files... " & Tfile.ParentFolder & "\" & CStr(file_name)
    
            '''''''''''''''''''' Start Pull Data ''''''''''''''''''''
            DataRange = Importdata(Tfile.ParentFolder & "\", Tfile.name) 'Importdata(Range("E1") & "\", CStr(file_name))  'Generates jagged array for each workbook (Stores all timesheet information in memory)
            SheetTotal = 0
            For a = 0 To 6
            
            If UBound(DataRange(a)) > 0 Then
                If DataRange(a)(1, 4) = 1 Then
                    
                    RowCount = UBound(DataRange(a)) - 9 'Determine the number of rows
    
                    For y = 1 To RowCount 'Determine the allowance range
                        Select Case DataRange(a)(y, 1)
                            Case "WORKED HOURS"
                                WorkStart = y + 2
                            Case "ALLOWANCES"
                                WorkEnd = y - 1
                                AllowStart = y + 2
                                AllowEnd = RowCount
                        End Select
                    Next y
    
                    Col = 1
                    Do Until DataRange(a)(2, Col) = "Total Hours" 'Determine number of employee columns
                        Col = Col + 1
                    Loop
    
                    day = Weekday(CDate(DataRange(a)(4, 7)), vbMonday) 'Determine day of week as integer starting Monday = 1
                    Pub = 0
                    EBAi = 1
                    
                    If Interpret = "Y" Then
                        For b = 1 To UBound(PubH)
                            If PubH(b, 1) = CDate(DataRange(a)(4, 7)) Then Pub = 1
                        Next b
                    End If
                    
                    For i = 9 To Col - 1 'cycle through each employee column
                        If DataRange(a)(1, i) <> vbNullString Then
                         
                            EA = EAFind(Right(DataRange(a)(1, i), 3), Left(DataRange(a)(1, i), 3), DataRange(a)(6, i), Pub) 'determine the correct EA to use
                            ER = 1
                                '''''''''''''''''''' Start Wages Cycle ''''''''''''''''''''
                            
                             If EA(1, 1) <> "NIL" Then 'Check if Agreement Set Up
                            
                                'Initialise variables for each employee
                                TH = DataRange(a)(5, i) 'select the total hours worked for each employee
                                THB = 0 'Total Hour Bucket
                                THR = TH - THB 'Total Hours Remaining
                                NT = 0 'Set Normal Time Identifier
                            
                                If Interpret = "Y" Then 'Or Right(DataRange(a)(1, i), 3) = "Ext" Then 'always interpret for subcontractors
                                    EBAR = EA(ER, DayArr(1, day))
                                Else
                                    EBAR = 24
                                End If
                                
                                For j = WorkStart To AllowEnd 'cycle through each work order
                                
                                    If DataRange(a)(2, i) <> 0 And DataRange(a)(2, i) <> vbNullString Then
                                        If DataRange(a)(j, i) <> 0 And DataRange(a)(j, i) <> vbNullString Then
                                        
                                        ' ADD NEW
                                            DataSum(2, x) = Format(DataRange(a)(4, 7), "mm/dd/yyyy") 'Date (Day and month switched for unknown reason)
                                        
                                            'Initialise variables for each work order
                                            WOH = DataRange(a)(j, i) 'Work Order Hours
                                            WOR = WOH ' Work Order Hours Remaining
        '                                    Debug.Print "WOR New Work Order"; WOR
                                            
                                            If j <= WorkEnd Then 'Search Working Hours
                                                
                                           '****** Start Allocate Hours Per EA *******
                                                Do Until WOR = 0 'loop until hours of work order have been allocated
                                                    EBA = EA(ER, DayArr(1, day)) 'Sheets("EBA").Cells(EBAj, EBAi) 'Set EBA
                                                    If EBA = 0 Then
                                                        EBAi = EBAi + 1
                                                        For b = 1 To UBound(EA)
                                                            If EA(b, 9) = 1 Then NT = EA(b, DayArr(1, day)) 'Record NT Allocation
                                                            If EA(b, 9) = EBAi Then
                                                                ER = b
                                                                EBAR = EA(ER, DayArr(1, day))
                                                            End If
                                                        Next b
                                                    Else
        
                                                        ' Is Work Order Hours Remaining to be allocated less/greater than or equal to the EBA Remaining to be aloocated
                                                        If WOR < EBAR Then
                                                            hours = WOR
                                                            WOR = WOR - hours
                                                            EBAR = EBAR - hours
                                                            RateType = EA(ER, 8)
                                                            ActiType = EA(ER, 5)
                                                            WageType = EA(ER, 7)
                                                           
                                                        ElseIf WOR > EBAR Then
                                                            
                                                            hours = WOR - (WOR - EBAR)
                                                            WOR = Application.WorksheetFunction.Max(0, WOR - hours)
                                                            RateType = EA(ER, 8) 'Sheets("EBA").Cells(1, EBAt)
                                                            ActiType = EA(ER, 5)
                                                            WageType = EA(ER, 7)
                                                            EBAi = EBAi + 1
                                                            For b = 1 To UBound(EA)
                                                                If EA(b, 9) = 1 Then NT = EA(b, DayArr(1, day))
                                                                If EA(b, 9) = EBAi Then
                                                                    ER = b
                                                                    EBAR = EA(ER, DayArr(1, day))
                                                                End If
                                                            Next b
        
                                                        Else
                                                            
                                                            hours = WOR
                                                            WOR = 0
                                                            RateType = EA(ER, 8)
                                                            ActiType = EA(ER, 5)
                                                            WageType = EA(ER, 7)
                                                            EBAi = EBAi + 1
                                                            For b = 1 To UBound(EA)
                                                                If EA(b, 9) = 1 Then NT = EA(b, DayArr(1, day))
                                                                If EA(b, 9) = EBAi Then
                                                                    ER = b
                                                                    EBAR = EA(ER, DayArr(1, day))
                                                                End If
                                                            Next b
                                                        
                                                        End If
                                             
                                           '****** End Allocate Hours Per EA *******
                                           
                                                        If Round(hours, 2) > 0 Then
                                                            DataSum(0, x) = "UPLOAD" 'Profile
                                                            DataSum(1, x) = DataRange(a)(3, i) 'Payroll Number
                                                            DataSum(2, x) = Format(DataRange(a)(4, 7), "mm/dd/yyyy") 'Date
                                                        
                                                            If Left(DataRange(a)(9, 3), 1) = "T" Then
                                                                DataSum(4, x) = DataRange(a)(j, 1) & "/00" & DataRange(a)(j, 2) 'Cost Object Service Order
                                                            Else
                                                                DataSum(4, x) = DataRange(a)(j, 5) & "/00" & DataRange(a)(j, 2) 'Cost Object Service Order
                                                            End If
                                                        
                                                            DataSum(3, x) = "CS"
                                                            DataSum(5, x) = ActiType 'AA Type
                                                            
                                                            If Interpret = "Y" Then DataSum(6, x) = WageType 'WT Type
                                                            
                                                            DataSum(11, x) = ShiftCode(DataRange(a)(6, i))  'Shift
                                                            DataSum(9, x) = Round(hours, 2) 'Hours
                                                            DataSum(12, x) = ActType(DataRange(a)(4, i))  'Trade
                                                            DataSum(13, x) = DataRange(a)(2, i) 'Name
                                                        
                                                            x = x + 1 'add new line
                                                        End If
        
                                                        THB = THB + hours
                                                        THR = TH - THB
                                                        
                                                        ReDim Preserve DataSum(13, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                                    End If
                                                Loop
                                            
                                            ElseIf j >= AllowStart And DataRange(a)(j, 3) <> "Crib" Then ' Search Allowances
                                                
                                                DataSum(0, x) = "UPLOAD" 'Profile
                                                DataSum(1, x) = DataRange(a)(3, i) 'Payroll Number
                                                DataSum(2, x) = Format(DataRange(a)(4, 7), "mm/dd/yyyy") 'Date
                                                
                                                Allow = MasAllowances.Range("Master_Allow")
                                                
                                                For n = 1 To UBound(Allow)
                                                    If DataRange(a)(j, 7) = Allow(n, 1) Then
                                                        If Allow(n, 3) <> "N/A" Then
                                                            DataSum(3, x) = Allow(n, 3)
                                                            If Left(DataRange(a)(9, 3), 1) = "T" Then
                                                                DataSum(4, x) = DataRange(a)(j, 1) & "/00" & DataRange(a)(j, 2) 'Cost Object Service Order
                                                            Else
                                                                DataSum(4, x) = DataRange(a)(j, 5) & "/00" & DataRange(a)(j, 2) 'Cost Object Service Order
                                                            End If
                                                        Else
                                                            DataSum(3, x) = Allow(n, 3)
                                                        End If
                                                        
                                                        Select Case Allow(n, 4)
                                                            Case "WT"
                                                                DataSum(6, x) = Allow(n, 5)
                                                            Case "AA"
                                                                DataSum(5, x) = Allow(n, 5)
                                                        End Select
                                                    End If
                                                Next
        
                                                DataSum(9, x) = DataRange(a)(j, i) ' **Quantity need to Check how to handle in upload**
                                                DataSum(11, x) = ShiftCode(DataRange(a)(6, i)) 'Shift
                                                DataSum(12, x) = ActType(DataRange(a)(4, i)) 'Trade
                                                DataSum(13, x) = DataRange(a)(2, i) 'Name
        
                                                x = x + 1
                                                ReDim Preserve DataSum(13, x) 'columns and rows switched due to redim limitation (must use second attribute)
                                            End If
                                        End If
                                    End If
                                Next j
                                
                                '****** Start Allocate Shift Allowances Per EA *******
                                If Interpret = "Y" Then
                                    If Pub = 1 Then EA = EAFind(Right(DataRange(a)(1, i), 3), Left(DataRange(a)(1, i), 3), DataRange(a)(6, i), 0)
                                    For b = 1 To UBound(EA)
                                        
                                        If Pub = 1 Then
                                            If EA(b, 9) = 1 Then NT = EA(b, DayArr(1, day))
                                        End If
                                        
                                        If EA(b, 9) = "NT" Or EA(b, 9) = "OT" Then
                                            SHA = EA(b, DayArr(1, day))
                                            SA = EA(b, 9)
                                       
                                            If SHA <> vbNullString Then
                                            
                                                If SA = "NT" And TH < SHA Then
                                                    DataSum(9, x) = TH
                                                ElseIf SA = "NT" And TH >= SHA Then
                                                    DataSum(9, x) = SHA
                                                ElseIf SA = "OT" Then
                                                    DataSum(9, x) = TH - NT
                                                End If
                                                
                                                DataSum(6, x) = EA(b, 7) 'WageType
                                                DataSum(0, x) = "UPLOAD" 'Profile
                                                DataSum(1, x) = DataRange(a)(3, i) 'Payroll Number
                                                DataSum(2, x) = Format(DataRange(a)(4, 7), "mm/dd/yyyy") 'Date
        '                                            If DataRange(a)(9, 3) = "TRUE" Then
        '                                                DataSum(4, x) = DataRange(a)(j, 1) & "/00" & DataRange(a)(j, 2) 'Cost Object Service Order
        '                                            Else
        '                                                DataSum(4, x) = DataRange(a)(j, 5) & "/00" & DataRange(a)(j, 2) 'Cost Object Service Order
        '                                            End If
                                                DataSum(3, x) = "N/A"
                                                'DataSum(5, x) = "SALL" 'ActiType 'AA Type
                                                DataSum(11, x) = ShiftCode(DataRange(a)(6, i)) 'Shift
                                                DataSum(12, x) = ActType(DataRange(a)(4, i)) 'Trade
                                                DataSum(13, x) = DataRange(a)(2, i) 'Name
                                                
                                                x = x + 1
                                                ReDim Preserve DataSum(13, x)
                                            
                                            End If
                                        End If
                                    Next b
                                End If
                                '****** End Allocate Shift Allowances Per EA *******
                                
                                EBAi = 1  'reset EBA
                                EBAR = EA(EBAi, DayArr(1, day)) 'Sheets("EBA").Cells(EBAj, EBAi) 'reset EBAR
                            Else
                                DataSum(0, x) = "NO AGREEMENT SETUP" 'Profile
                                DataSum(1, x) = DataRange(a)(3, i) 'Payroll Number
                                DataSum(2, x) = Format(DataRange(a)(4, 7), "mm/dd/yyyy") 'Date
                                DataSum(10, x) = DataRange(a)(1, i) & ", " & DataRange(a)(6, i) & ", " & IIf(Pub = 1, "PH", 0)
                                DataSum(11, x) = ShiftCode(DataRange(a)(6, i)) 'Shift
                                DataSum(12, x) = ActType(DataRange(a)(4, i)) 'Trade
                                DataSum(13, x) = DataRange(a)(2, i) 'Name
                                x = x + 1
                                ReDim Preserve DataSum(13, x)
                            End If
                        End If
                    Next i
                End If
                SheetTotal = SheetTotal + 1
            End If
                Next a
    
                ' If SheetTotal > 0 Then
                    ThisWorkbook.Sheets(NameSh).Cells(k, 16) = file_name
                    ThisWorkbook.Sheets(NameSh).Cells(k, 17) = SheetTotal
                    k = k + 1
                ' End If
                DictHrs.RemoveAll
                DictEBA.RemoveAll
        End If
LoopResume:
    Next
    
    If x > 0 Then ThisWorkbook.Sheets("UploadSAP").Range("A" & InitRow + 4 & ":N" & InitRow + x + 3) = Application.WorksheetFunction.Transpose(DataSum)
    InitRow = InitRow + x
    
    End If 'No processing if P = 0

Exit Function
   
SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        Application.StatusBar = "Sub ExtractUpload" & ", " & Err.Number & ", " & Err.Description & " Check File..." & CStr(file_name)
        ThisWorkbook.Sheets(NameSh).Cells(k, 16) = "Extract Error" & ", " & Err.Number & ", " & Err.Description & "," & CStr(file_name) & ", " & CStr(DataRange(a)(2, i)) & ", " & Format(CStr(DataRange(a)(4, 7)), "ddd")
        k = k + 1
        'MsgBox "Please Check File" & vbCrLf & CStr(file_name), , "Processing Stopped"
        Resume LoopResume
        On Error GoTo 0

End Function
Attribute VB_Name = "RepBI"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "SAPData"
Option Compare Text

Sub ReplaceOrderSAP(contol As IRibbonControl)

On Error GoTo SafeExit

Dim ColOrd, ColChk, DataSAP, DataSAPFilter, OrdUni As Variant
Dim LocX, LocY, DataRow, DataCol, a, b, c As Integer
Dim SAPFile, Append As String

    Set wb = ThisWorkbook
    MainWB = wb.name
         
    SAPFile = "IW49N"
         
    ' Open Data Source File
    'MsgBox "Please choose the SAP data source file to match"
    DataSource_FileName = Application.GetOpenFilename(FileFilter:="Excel Files, *.xl*;*.xm*;*.csv")
    If DataSource_FileName <> False Then
        Application.ScreenUpdating = False
        Application.EnableEvents = False
        Application.Calculation = False
        Set wbS = Workbooks.Open(filename:=DataSource_FileName, UpdateLinks:=3)
    Else
        Exit Sub
    End If
    
    If MsgBox("Replace Existing Data? " & vbCrLf & "(Cancel to Append Data)", vbOKCancel, "Job Data Replace") = vbOK Then
        Append = "No"
    Else
        Append = "Yes"
    End If
    
    TimeStart = Timer
    
    Set SAP_ws = wbS.Worksheets(1)
    
    'DataSAP = SAP_ws.UsedRange
    DataRow = SAP_ws.UsedRange.Rows.Count
    DataCol = SAP_ws.UsedRange.Columns.Count
    
    ReDim ColOrd(1, 7)  'Exact SAP Column Names
        
    Select Case SAP_ws.Cells(1, 2) 'Check to establish SAP export file format type
        Case ""
            ColOrd(0, 0) = "Order"
            ColOrd(0, 1) = "Description"
            ColOrd(0, 2) = "Act" 'SAP variant seems to change depending on column width previously "OpAc"
            ColOrd(0, 3) = "Operation short text"
            ColOrd(0, 4) = "SOp"
            ColOrd(0, 5) = "Ext Ref #"
            ColOrd(0, 6) = "PO number"
            ColOrd(0, 7) = "PO Exp Dat"
        
        Case "Order"
            ColOrd(0, 0) = "Order"
            ColOrd(0, 1) = "Description"
            ColOrd(0, 2) = "Oper./Act."
            ColOrd(0, 3) = "Opr. short text"
            ColOrd(0, 4) = "Suboperation"
            ColOrd(0, 5) = "External Ref No"
            ColOrd(0, 6) = "PO number"
            ColOrd(0, 7) = "Cust. PO Expiry Date"
            
    End Select
    
    ColChk = SAP_ws.Range("A1:F6") 'Range to check first value
    LocX = 0
    LocY = 0
    
    For a = 1 To 6
        For b = 1 To 6
            If ColChk(a, b) = "Order" Then 'locates the coordinate of the first field header IW49N, IW72, CN43N
                LocY = a
                LocX = b
                Exit For
            ElseIf Left(ColChk(a, b), 3) = "WBS" Then
                ColOrd(0, 0) = "WBS"
                LocY = a
                LocX = b
                Exit For
            End If
        Next b
    Next a
    
    If LocX = 0 Then
        wbS.Windows(1).Close savechanges:=False
        Set wb = Nothing
        Set MainWB = Nothing
        Application.ScreenUpdating = True
        Application.EnableEvents = True
        MsgBox "Please Select Valid File" & vbCrLf & "Selected SAP File Header Names Were Not Found", , "Import SAP"
        Exit Sub
    End If
    
    For c = 0 To 7 'Stores the location of the required column from the SAP data file
        If Not IsError(Application.Match(ColOrd(0, c), SAP_ws.Range(LocY & ":" & LocY), 0)) Then
            ColOrd(1, c) = Application.Match(ColOrd(0, c), SAP_ws.Range(LocY & ":" & LocY), 0)
        Else
            If ColOrd(0, 0) = "Order" Then
                SAPFile = "IW72"
            Else
                SAPFile = "CN43N"
            End If
'            wbS.Windows(1).Close savechanges:=False
'            Set wb = Nothing
'            Set MainWB = Nothing
'            Application.ScreenUpdating = True
'            Application.EnableEvents = True
'            MsgBox "Please Select Valid File" & vbCrLf & "Selected SAP File Header Name ( " & ColOrd(0, c) & " ) Was Not Found", , "Import SAP"
'            Exit Sub
        End If
    
    Next c

    LR = SAP_ws.Cells(Rows.Count, LocX).End(xlUp).Row
    LC = SAP_ws.Cells(LocY, Columns.Count).End(xlToLeft).Column

    DataSAP = SAP_ws.Range(SAP_ws.Cells(LocY, LocX), SAP_ws.Cells(LR, LC))

    SAP_ws.Cells(1, 20) = "Act" 'Sets advanced filter criteria
    SAP_ws.Cells(1, 21) = " /"
    SAP_ws.Cells(1, 22) = ColOrd(0, 4)
    SAP_ws.Cells(2, 20) = "10"
    SAP_ws.Cells(2, 21) = "1"
    SAP_ws.Cells(2, 22) = "="
    
    'Start Order Filter
    ThisWorkbook.Sheets("Temp").UsedRange.Clear
    SAP_ws.Range(SAP_ws.Cells(LocY, LocX), SAP_ws.Cells(LR, LC)).RemoveDuplicates Columns:=Array(1), Header:=xlYes
    LR = SAP_ws.Cells(Rows.Count, LocX).End(xlUp).Row
    DataSAPFilter = SAP_ws.Range(SAP_ws.Cells(LocY, LocX), SAP_ws.Cells(LR, LC))
    ThisWorkbook.Sheets("Temp").Range(ThisWorkbook.Sheets("Temp").Cells(1, 1), ThisWorkbook.Sheets("Temp").Cells(UBound(DataSAPFilter), UBound(Application.Transpose(DataSAPFilter)))) = DataSAPFilter

'    SAP_ws.Range(SAP_ws.Cells(LocY, LocX), SAP_ws.Cells(LR, 19)).AdvancedFilter Action:=xlFilterCopy, _
'    CriteriaRange:=SAP_ws.Range("T1:U2"), CopyToRange:=ThisWorkbook.Sheets("Temp").Range("A1"), _
'    Unique:=True
    
    'From this point data has been extracted from files and is now being processed in local workbook
    
    LRL = ThisWorkbook.Sheets("Temp").Cells(Rows.Count, 1).End(xlUp).Row
    LCL = ThisWorkbook.Sheets("Temp").Cells(1, Columns.Count).End(xlToLeft).Column
    LRT = LRL
    LRA = 0
    
    With ThisWorkbook.Sheets("Temp")
        DataArrayAll = .Range(.Cells(2, 1), .Cells(LRL, LCL))
    End With
    
    ReDim DataArray(1 To 10, 1 To LRL)
    j = 1
    For i = 1 To UBound(DataArrayAll) 'Extract unique workorder data
        If DataArrayAll(i, 1) <> "" Then
            Select Case SAPFile
                Case "IW49N"
                    DataArray(1, j) = j
                    DataArray(2, j) = Trim(CStr(DataArrayAll(i, 1)))
                    DataArray(3, j) = Trim(CStr(DataArrayAll(i, 2)))
                    DataArray(4, j) = Trim(CStr(DataArrayAll(i, 1))) & " " & Trim(CStr(DataArrayAll(i, 2)))
                    DataArray(5, j) = "CS"
                    DataArray(6, j) = "Y"
                    DataArray(7, j) = Trim(CStr(DataArrayAll(i, 11)))
                    If CStr(DataArrayAll(i, 12)) <> "" Then
                        If InStr(Trim(CStr(DataArrayAll(i, 12))), "/") = 0 Then
                            DataArray(8, j) = Trim(CStr(DataArrayAll(i, 12)))
                        Else
                            DataArray(8, j) = Left(Trim(CStr(DataArrayAll(i, 12))), InStr(Trim(CStr(DataArrayAll(i, 12))), "/") - 1)
                        End If
                    End If
                    DataArray(9, j) = Left(Trim(CStr(DataArrayAll(i, 16))), 9)
                    DataArray(10, j) = "IW49N"
                    
                    
                Case "IW72" 'Does not contain activity, purchase order information
                    DataArray(1, j) = j
                    DataArray(2, j) = Trim(DataArrayAll(i, 1)) 'Order
                    DataArray(3, j) = Trim(DataArrayAll(i, 3)) 'Order Description
                    DataArray(4, j) = Trim(DataArrayAll(i, 1)) & " " & Trim(DataArrayAll(i, 3))
                    DataArray(5, j) = "CS"
                    DataArray(6, j) = "Y"
                    DataArray(7, j) = Trim(DataArrayAll(i, 5)) 'External Reference
                    DataArray(8, j) = Trim(DataArrayAll(i, 8)) 'Purchase Order
                    DataArray(9, j) = Left(Trim(DataArrayAll(i, 4)), 9) 'Project Definition
                    DataArray(10, j) = "IW72"
                    
                Case "CN43N" 'WBS information only
                    DataArray(1, j) = i
                    DataArray(2, j) = Trim(DataArrayAll(i, 1)) 'WBS
                    DataArray(3, j) = Trim(DataArrayAll(i, 2)) 'WBS Description
                    DataArray(4, j) = Trim(DataArrayAll(i, 1)) & " " & Trim(DataArrayAll(i, 2))
                    DataArray(5, j) = "WBS"
                    DataArray(6, j) = "Y"
                    DataArray(9, j) = Left(Trim(DataArrayAll(i, 1)), 9) 'Project Definition
                    DataArray(10, j) = "CN43N"
            End Select
        j = j + 1
        End If
    Next i

    HeadIntOrder = Array("UID", "WO_Internal", "WO_Internal_Description", "WO_Full_Description", "Cost Object Type", "Billable", "Customer Workorder", "Customer PO", "Project", "TCode")
    LRT = j
    With ThisWorkbook.Sheets("DataInternalOrder")
        If Append = "No" Then
            .UsedRange.Clear
            .Range("A1:J1") = HeadIntOrder
            .Range("A2:J" & LRL) = Application.Transpose(DataArray)
        Else
            LRA = .Range("A" & Rows.Count).End(xlUp).Row
            LRT = LRA + LRL - 1
            .Range("A" & (LRA + 1) & ":J" & LRT) = Application.Transpose(DataArray)
            .Range("A3" & ":A" & LRT).FormulaR1C1 = "=R[-1]C+1"
            .Range("A3" & ":A" & LRT).Value = .Range("A3" & ":A" & LRT).Value
        End If
    End With
     
    'Sorting Sheet
    'wb.Sheets("ComboLookup").Range("A2:A" & LRT).FormulaR1C1 = "=DataInternalOrder!RC[1]"
    'wb.Sheets("ComboLookup").Range("B2:B" & LRT).FormulaR1C1 = "=COUNTIF(WO_List,""<=""&RC[-1])+(COUNT(WO_List)*ISTEXT(RC[-1]))"
    'wb.Sheets("ComboLookup").Range("C2:C" & LRT).FormulaR1C1 = "=IFERROR(INDEX(WO_List,MATCH(ROWS(R2C3:RC),INDIRECT(R14C5),0)),"""")"
    SortList "DataInternalOrder"

    'Named Ranges
    wb.Sheets("DataInternalOrder").Range("B2:C" & LRT).name = "WO_Internal"
    wb.Sheets("DataInternalOrder").Range("C2:C" & LRT).name = "WO_Full"
    wb.Sheets("DataInternalOrder").Range("B2:I" & LRT).name = "WO_All"
    'wb.Sheets("ComboLookup").Range("A2:A" & LRT).name = "WO_List"
    'wb.Sheets("ComboLookup").Range("C2:C" & LRT).name = "WO_List_Sort"
    
    Select Case SAPFile
        Case "IW49N"
            'Start Operation Filter
            ThisWorkbook.Sheets("Temp").UsedRange.Clear
            SAP_ws.Range(SAP_ws.Cells(LocY, LocX), SAP_ws.Cells(UBound(DataSAP), UBound(Application.Transpose(DataSAP)))) = DataSAP
            LR = SAP_ws.Cells(Rows.Count, LocX).End(xlUp).Row
            
            SAP_ws.Range(SAP_ws.Cells(LocY, LocX), SAP_ws.Cells(LR, LC)).AdvancedFilter Action:=xlFilterCopy, _
            CriteriaRange:=SAP_ws.Range("V1:V2"), CopyToRange:=ThisWorkbook.Sheets("Temp").Range("A1"), _
            Unique:=True
            
            Set SAP_ws = Nothing
            wbS.Windows(1).Close savechanges:=False 'close workbook as not needed
            
            LRL = ThisWorkbook.Sheets("Temp").Range("A" & Rows.Count).End(xlUp).Row
            With ThisWorkbook.Sheets("Temp")
                DataArrayAll = .Range(.Cells(2, 1), .Cells(LRL, LCL))
            End With
            
            ReDim DataArray(1 To 9, 1 To LRL)
            j = 1
            For i = 1 To UBound(DataArrayAll)
                If DataArrayAll(i, 1) <> "" Then
                    DataArray(1, j) = j
                    DataArray(2, j) = Trim(CStr(DataArrayAll(i, 1)))
                    DataArray(3, j) = Trim(CStr(DataArrayAll(i, 3)))
                    DataArray(4, j) = Trim(CStr(DataArrayAll(i, 4)))
                    j = j + 1
                End If
            Next i
        
            HeadIntActivity = Array("UID", "WO_Internal", "OP_Internal", "OP_Internal_Description")
        
            With ThisWorkbook.Sheets("DataInternalActivity")
                .UsedRange.Clear
                .Range("A1:D1") = HeadIntActivity
                .Range("A2:D" & LRL) = Application.Transpose(DataArray)
            End With
            LRL = j
            With ThisWorkbook.Sheets("Temp") 'Unique External Order and PO
                .Range("K1:K" & LRL).RemoveDuplicates Columns:=Array(1), Header:=xlYes
                .Range("L1:M" & LRL).RemoveDuplicates Columns:=Array(1), Header:=xlYes
            End With
        
            'Start External Workorder Filter
            ThisWorkbook.Sheets("DataInternalOrder").Range("G:G").AdvancedFilter Action:=xlFilterCopy, _
            CopyToRange:=ThisWorkbook.Sheets("DataInternalOrder").Range("M1"), Unique:=True
            
            LRL = ThisWorkbook.Sheets("DataInternalOrder").Range("M" & Rows.Count).End(xlUp).Row
            DataArrayAll = ThisWorkbook.Sheets("DataInternalOrder").Range("M2:M" & LRL)
            
            ThisWorkbook.Sheets("DataInternalOrder").Range("M:M").Clear
            
            'LRL = ThisWorkbook.Sheets("Temp").Range("K" & Rows.Count).End(xlUp).Row
            'DataArrayAll = ThisWorkbook.Sheets("Temp").Range("K2:K" & LRL)
            
            ReDim DataArray(1 To 9, 1 To LRL)
            HeadExtOrder = Array("UID", "WO_Customer", "WO_Customer_Description", "WO_Full_Description", "WO_Internal_Map")
            
            If LRL > 2 Then
                For i = 1 To UBound(DataArrayAll)
                    DataArray(1, i) = i
                    DataArray(2, i) = Trim(CStr(DataArrayAll(i, 1)))
                    DataArray(3, i) = "Customer Workorder"
                    DataArray(4, i) = "=TRIM(RC[-2]&""  ""&RC[-1])"
                Next i
            
                With ThisWorkbook.Sheets("DataCustomerOrder")
                    .UsedRange.Clear
                    .Range("A1:E1") = HeadExtOrder
                    .Range("A2:D" & LRL) = Application.Transpose(DataArray)
                End With
            Else
                LRL = 2
                With ThisWorkbook.Sheets("DataCustomerOrder")
                    .UsedRange.Clear
                    .Range("A1:E1") = HeadExtOrder
                    .Range("A2:D2") = Array(1, 9999999, "Customer Order", "9999999 Customer Order")
                End With
            End If
            
            'Named Ranges
            With wb.Sheets("DataCustomerOrder")
                .Range("B2:C" & LRL).name = "WO_Customer_Long"
                .Range("B2:B" & LRL).name = "WO_Customer"
                .Range("D2:D" & LRL).name = "Workorder"
                .Range("E2:E" & LRL).name = "WO_UGL"
            End With
            
            'Start External PO Filter
'            ThisWorkbook.Sheets("DataInternalOrder").Range("H:H").AdvancedFilter Action:=xlFilterCopy, _
'            CopyToRange:=ThisWorkbook.Sheets("DataInternalOrder").Range("M1"), Unique:=True

            ThisWorkbook.Sheets("Temp").Range("L:M").AdvancedFilter Action:=xlFilterCopy, _
            CopyToRange:=ThisWorkbook.Sheets("DataInternalOrder").Range("M1"), Unique:=True

            LRL = ThisWorkbook.Sheets("DataInternalOrder").Range("M" & Rows.Count).End(xlUp).Row
            DataArrayAll = ThisWorkbook.Sheets("DataInternalOrder").Range("M2:N" & LRL)

            ThisWorkbook.Sheets("DataInternalOrder").Range("M:N").Clear
'
'            LRL = ThisWorkbook.Sheets("Temp").Range("L" & Rows.Count).End(xlUp).Row
'            DataArrayAll = ThisWorkbook.Sheets("Temp").Range("L2:M" & LRL)
         
            ReDim DataArray(1 To 9, 1 To LRL)
            HeadExtPO = Array("UID", "PO_Customer", "PO_Customer_Description", "PO_Customer_Full_Description", "WO_Internal_Map", "PO_Expiry")
          
            If LRL > 2 Then
                j = 1
                For i = 1 To UBound(DataArrayAll)
                    If CStr(DataArrayAll(i, 1)) <> "" Then
                        DataArray(1, j) = j
                            If InStr(Trim(CStr(DataArrayAll(i, 1))), "/") = 0 Then
                                DataArray(2, j) = Trim(CStr(DataArrayAll(i, 1)))
                            Else
                                DataArray(2, j) = Left(Trim(CStr(DataArrayAll(i, 1))), InStr(Trim(CStr(DataArrayAll(i, 1))), "/") - 1)
                            End If
                        DataArray(3, j) = "Customer Purchase Order"
                        DataArray(4, j) = "=TRIM(RC[-2]&""  ""&RC[-1])"
                        DataArray(6, j) = Trim(CStr(DataArrayAll(i, 2)))
                        j = j + 1
                    End If
                Next i
            
                With ThisWorkbook.Sheets("DataCustomerPO")
                    .UsedRange.Clear
                    .Range("A1:F1") = HeadExtPO
                    .Range("A2:F" & LRL) = Application.Transpose(DataArray)
                    .Range("F:F").TextToColumns Destination:=Range("F1"), DataType:=xlDelimited, _
                    TextQualifier:=xlDoubleQuote, ConsecutiveDelimiter:=False, Tab:=False, _
                    Semicolon:=False, Comma:=False, Space:=False, Other:=False, FieldInfo _
                    :=Array(1, 4), TrailingMinusNumbers:=True
                End With
                LRL = j
            Else
                LRL = 2
                With ThisWorkbook.Sheets("DataCustomerPO")
                    .UsedRange.Clear
                    .Range("A1:F1") = HeadExtPO
                    .Range("A2:D2") = Array(1, 999999999, "Customer Purchase Order", "999999999 Customer Purchase Order")
                End With
            End If
            'Named Range Definition
            With wb.Sheets("DataCustomerPO")
                .Range("B2:C" & LRL).name = "PO_Customer_Long"
                .Range("B2:B" & LRL).name = "PO_Customer"
            End With
    
        Case "IW72"
            Set SAP_ws = Nothing
            wbS.Windows(1).Close savechanges:=False 'close workbook as not needed
        
            'ThisWorkbook.Sheets("Temp").Range("E:E").RemoveDuplicates Columns:=1, Header:=xlYes
            'ThisWorkbook.Sheets("Temp").Range("H:H").RemoveDuplicates Columns:=1, Header:=xlYes
            
            'wb.Sheets("Temp").Range("H:H").Sort Key1:=Range("H1"), order1:=xlAscending, Header:=xlYes
            
            With ThisWorkbook.Sheets("Temp").Sort
                .SetRange Range("H:H")
                .Header = xlYes
                .MatchCase = False
                .Orientation = xlTopToBottom
                .SortMethod = xlPinYin
                .Apply
            End With
            
            'Start External Workorder Filter
            ThisWorkbook.Sheets("DataInternalOrder").Range("G:G").AdvancedFilter Action:=xlFilterCopy, _
            CopyToRange:=ThisWorkbook.Sheets("DataInternalOrder").Range("M1"), Unique:=True
            
            LRL = ThisWorkbook.Sheets("DataInternalOrder").Range("M" & Rows.Count).End(xlUp).Row
            DataArrayAll = ThisWorkbook.Sheets("DataInternalOrder").Range("M2:M" & LRL)
            
            ThisWorkbook.Sheets("DataInternalOrder").Range("M:M").Clear
                                    
'            ThisWorkbook.Sheets("Temp").Range("E:E").AdvancedFilter Action:=xlFilterCopy, _
'            CopyToRange:=ThisWorkbook.Sheets("Temp").Range("Q1"), Unique:=True
'
'            LRL = ThisWorkbook.Sheets("Temp").Range("Q" & Rows.Count).End(xlUp).Row
'            DataArrayAll = ThisWorkbook.Sheets("Temp").Range("Q2:Q" & LRL)
            
            ReDim DataArray(1 To 9, 1 To LRL)
            HeadExtOrder = Array("UID", "WO_Customer", "WO_Customer_Description", "WO_Full_Description", "WO_Internal_Map")
            
            If LRL > 2 Then
                For i = 1 To UBound(DataArrayAll)
                    DataArray(1, i) = i
                    DataArray(2, i) = Trim(CStr(DataArrayAll(i, 1)))
                    DataArray(3, i) = "Customer Workorder"
                    DataArray(4, i) = "=TRIM(RC[-2]&""  ""&RC[-1])"
                Next i
                
                With ThisWorkbook.Sheets("DataCustomerOrder")
                    .UsedRange.Clear
                    .Range("A1:E1") = HeadExtOrder
                    .Range("A2:D" & LRL) = Application.Transpose(DataArray)
                End With
            Else
                LRL = 2
                With ThisWorkbook.Sheets("DataCustomerOrder")
                    .UsedRange.Clear
                    .Range("A1:E1") = HeadExtOrder
                    .Range("A2:D2") = Array(1, 9999999, "Customer Order", "9999999 Customer Order")
                End With
            End If
            
            With wb.Sheets("DataCustomerOrder")
                .Range("B2:C" & LRL).name = "WO_Customer_Long"
                .Range("B2:B" & LRL).name = "WO_Customer"
                .Range("D2:D" & LRL).name = "Workorder"
                .Range("E2:E" & LRL).name = "WO_UGL"
            End With
            
            'Start External PO Filter
            
            ThisWorkbook.Sheets("DataInternalOrder").Range("H:H").AdvancedFilter Action:=xlFilterCopy, _
            CopyToRange:=ThisWorkbook.Sheets("DataInternalOrder").Range("M1"), Unique:=True
            
            LRL = ThisWorkbook.Sheets("DataInternalOrder").Range("M" & Rows.Count).End(xlUp).Row
            DataArrayAll = ThisWorkbook.Sheets("DataInternalOrder").Range("M2:M" & LRL)
            
            ThisWorkbook.Sheets("DataInternalOrder").Range("M:M").Clear
            
'            ThisWorkbook.Sheets("Temp").Range("H:H").AdvancedFilter Action:=xlFilterCopy, _
'            CopyToRange:=ThisWorkbook.Sheets("Temp").Range("R1"), Unique:=True
'
'            LRL = ThisWorkbook.Sheets("Temp").Range("R" & Rows.Count).End(xlUp).Row
'            DataArrayAll = ThisWorkbook.Sheets("Temp").Range("R2:R" & LRL)
            
            ReDim DataArray(1 To 9, 1 To LRL)
            HeadExtPO = Array("UID", "PO_Customer", "PO_Customer_Description", "PO_Customer_Full_Description", "WO_Internal_Map", "PO_Expiry")
            
            If LRL > 2 Then
                For i = 1 To UBound(DataArrayAll)
                    DataArray(1, i) = i
                    DataArray(2, i) = Trim(CStr(DataArrayAll(i, 1)))
                    DataArray(3, i) = "Customer Purchase Order"
                    DataArray(4, i) = "=TRIM(RC[-2]&""  ""&RC[-1])"
                Next i
            
                With ThisWorkbook.Sheets("DataCustomerPO")
                    .UsedRange.Clear
                    .Range("A1:F1") = HeadExtPO
                    .Range("A2:D" & LRL) = Application.Transpose(DataArray)
                End With
            Else
                LRL = 2
                With ThisWorkbook.Sheets("DataCustomerPO")
                    .UsedRange.Clear
                    .Range("A1:F1") = HeadExtPO
                    .Range("A2:D2") = Array(1, 999999999, "Customer Purchase Order", "999999999 Customer Purchase Order")
                End With
            End If
            'Named Range Definition
            With wb.Sheets("DataCustomerPO")
                .Range("B2:C" & LRL).name = "PO_Customer_Long"
                .Range("B2:B" & LRL).name = "PO_Customer"
            End With
    
        Case "CN43N" 'Used for IW72, CN43N files as there is
            Set SAP_ws = Nothing
            wbS.Windows(1).Close savechanges:=False 'close workbook as not needed
            
'            HeadIntActivity = Array("UID", "WO_Internal", "OP_Internal", "OP_Internal_Description")
'            DataIntActivity = Array(1, "9999999", "0010", "Default Activity")
'            With ThisWorkbook.Sheets("DataInternalActivity")
'                .UsedRange.Clear
'                .Range("A1:D1") = HeadIntActivity
'                .Range("A2:D2") = DataIntActivity
'            End With
            
'            HeadExtOrder = Array("UID", "WO_Customer", "WO_Customer_Description", "WO_Full_Description", "WO_Internal_Map")
'            DataExtOrder = Array(1, "9999999", "Customer Workorder", "0010 Customer Workorder")
'            With ThisWorkbook.Sheets("DataCustomerOrder")
'                .UsedRange.Clear
'                .Range("A1:E1") = HeadExtOrder
'                .Range("A2:D2") = DataExtOrder
'                .Range("B2:C2").name = "WO_Customer_Long"
'                .Range("B2:B2").name = "WO_Customer"
'                .Range("D2:D2").name = "Workorder"
'                .Range("E2:E2").name = "WO_UGL"
'            End With
            
'            HeadExtPO = Array("UID", "PO_Customer", "PO_Customer_Description", "PO_Customer_Full_Description", "WO_Internal_Map", "PO_Expiry")
'            DataExtPO = Array(1, "9999999999", "Customer Purchase Order", "9999999999 Customer Purchase Order")
'            With ThisWorkbook.Sheets("DataCustomerPO")
'                .UsedRange.Clear
'                .Range("A1:F1") = HeadExtPO
'                .Range("A2:D2") = DataExtPO
'                .Range("B2:C2").name = "PO_Customer_Long"
'                .Range("B2:B2").name = "PO_Customer"
'            End With
    
    End Select
    
    ThisWorkbook.Sheets("Temp").UsedRange.Clear
    
    If Append = "Yes" Then
            ThisWorkbook.Sheets("DataInternalOrder").Range("B:J").AdvancedFilter Action:=xlFilterCopy, _
            CopyToRange:=ThisWorkbook.Sheets("Temp").Range("B1"), Unique:=True
            With ThisWorkbook.Sheets("Temp")
                .Range("A1") = "UID"
                .Range("A2") = 1
                LRT = .Range("B" & Rows.Count).End(xlUp).Row
                .Range("A3" & ":A" & LRT).FormulaR1C1 = "=R[-1]C+1"
                .Range("A3" & ":A" & LRT).Value = .Range("A3" & ":A" & LRT).Value
            End With
            ThisWorkbook.Sheets("DataInternalOrder").UsedRange.ClearContents
            ThisWorkbook.Sheets("Temp").Range("A:J").AdvancedFilter Action:=xlFilterCopy, _
            CopyToRange:=ThisWorkbook.Sheets("DataInternalOrder").Range("A1"), Unique:=True
            ThisWorkbook.Sheets("Temp").UsedRange.Clear
            
            'Sorting Sheet
            'wb.Sheets("ComboLookup").Range("A2:A" & LRT).FormulaR1C1 = "=DataInternalOrder!RC[1]"
            'wb.Sheets("ComboLookup").Range("B2:B" & LRT).FormulaR1C1 = "=COUNTIF(WO_List,""<=""&RC[-1])+(COUNT(WO_List)*ISTEXT(RC[-1]))"
            'wb.Sheets("ComboLookup").Range("C2:C" & LRT).FormulaR1C1 = "=IFERROR(INDEX(WO_List,MATCH(ROWS(R2C3:RC),INDIRECT(R14C5),0)),"""")"

            'Named Ranges
            wb.Sheets("DataInternalOrder").Range("B2:C" & LRT).name = "WO_Internal"
            wb.Sheets("DataInternalOrder").Range("C2:C" & LRT).name = "WO_Full"
            wb.Sheets("DataInternalOrder").Range("B2:I" & LRT).name = "WO_All"
            'wb.Sheets("ComboLookup").Range("A2:A" & LRT).name = "WO_List"
            'wb.Sheets("ComboLookup").Range("C2:C" & LRT).name = "WO_List_Sort"
            SortList "DataInternalOrder"
    End If
        
    TimeRun = Format((Timer - TimeStart) / 86400, "hh:mm:ss")
    MsgBox "SAP data loading completed. " & vbCrLf & "Please remember to save workbook." & vbCrLf & _
    "Time Taken " & TimeRun
    
    'wbS.Windows(1).Close savechanges:=False
    Application.ScreenUpdating = True
    Application.EnableEvents = True
    Application.Calculation = True
    Application.StatusBar = False
   
SafeExit:
        'Set SAP_ws = Nothing
        'wbS.Windows(1).Close savechanges:=False 'close workbook
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        Application.Calculation = True
        On Error GoTo 0
   
End Sub

Sub ClearSheetsWhenUpdate()

On Error GoTo SafeExit

    Set wb = ThisWorkbook
    MainWB = wb.name
    
    Application.ScreenUpdating = False
    Application.Calculation = False
    
    wb.Activate
    
    Dim wsName As Variant
    
    For Each wsName In Array("DataInternalOrder", "DataInternalActivity", "DataCustomerOrder", "DataCustomerPO")
        
        Set ws = Worksheets(wsName)
        
        RowCount = ws.Range("B" & Rows.Count).End(xlUp).Row
        
        If RowCount <> 1 Then
        
            Select Case wsName
            
            Case "DataInternalOrder"
            
                ws.Range(ws.Cells(2, 1), ws.Cells(RowCount, 8)).ClearContents
                ws.Cells(2, 1).Value = 1
            
            Case "DataInternalActivity"
            
                ws.Range(ws.Cells(2, 1), ws.Cells(RowCount, 4)).ClearContents
                ws.Cells(2, 1).Value = 1
                
            Case "DataCustomerOrder"
            
                ws.Range(ws.Cells(2, 1), ws.Cells(RowCount, 5)).ClearContents 'erases data relationship
                ws.Cells(2, 1).Value = 1
                
            Case "DataCustomerPO"
            
                ws.Range(ws.Cells(2, 1), ws.Cells(RowCount, 5)).ClearContents 'erases data relationship
                ws.Cells(2, 1).Value = 1
                
            End Select
            
        Else
            
                ws.Cells(2, 1).Value = 1
            
        End If
    
    Next
  
SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        Application.Calculation = True
        On Error GoTo 0
    
End Sub

Public Sub AppendNewOrderSAP(contol As IRibbonControl)
 
On Error GoTo SafeExit
 
Dim DataArray As Variant
Dim sFirstFile, sSecondFile As String
Dim conn As New ADODB.Connection
Dim mrs As New ADODB.Recordset
Dim DBPath As String, sconnect, Short_wb, oComm  As String
Dim iCols As Integer
Dim DataArraySync As Variant
Dim wbS, DataSource_FileName As Variant
    
    Set wbL = ThisWorkbook
    MainWB = wbL.FullName
    
    Application.ScreenUpdating = False
    Application.Calculation = False
       
    ' Open Data Source File
    MsgBox "Please choose the SAP data source file to sync"
    DataSource_FileName = Application.GetOpenFilename(FileFilter:="Excel Files, *.xl*;*.xm*")
    If DataSource_FileName <> False Then
    Set wbS = Workbooks.Open(filename:=DataSource_FileName, UpdateLinks:=3)
    Else
    Exit Sub
    End If
    
    wbS.Windows(1).Visible = True
    
    Set wbSS = wbS
    Set SAP_ws = wbS.Worksheets(1)
    'Set SAP_ws_name = wbS.ActiveSheet
     
    wbS.Sheets.Add Before:=Worksheets(Worksheets.Count)
    ActiveSheet.name = "Temp"
      
    ' pre-process the Customer PO in SAP datasource
    Application.Calculation = True
    fr = SAP_ws.Range("C1:C10").Find("Order").Row
    LR = SAP_ws.Range("C" & Rows.Count).End(xlUp).Row
    SAP_ws.Range("R" & fr & ":R" & LR).FormulaR1C1 = "=LEFT(RC16,10)"
    SAP_ws.Range("R" & fr).Value = "POnum"
  
    Application.CutCopyMode = False
    Application.Calculation = False
    
    wbS.Windows(1).Visible = False
    
    ' return values of arrays to worksheets
    Dim wsName, Temp As Variant
    
    'MsgBox "Syncing to SAP Data...."
    
    ' Workbook and Worksheets settings
    sFirstFile = wbL.FullName
    sSecondFile = wbSS.FullName
    sap_sheet = SAP_ws.name
    frr = fr
    lrr = LR
    Set wb_sap = wbSS
    Set wb_TS = wbL

    For Each wsName In Array("DataInternalOrder", "DataInternalActivity", "DataCustomerOrder", "DataCustomerPO") '"DataInternalActivity", "DataCustomerOrder", "DataCustomerPO"
 
        'wsName = "DataCustomerPO"
        Set ws = wbL.Worksheets(wsName)
        
        Select Case wsName

        Case "DataInternalOrder"
    
            'CompareTwoDB

            ts_sheet = ws.name
            OldRow = ws.Range("B" & Rows.Count).End(xlUp).Row
            trr = OldRow

            ' connection variable
            'Excel 64-bit
            sconnect = "Provider=Microsoft.Ace.OLEDB.12.0;Data Source=" & sSecondFile _
                       & ";Extended Properties=""Excel 8.0;HDR=Yes;IMEX=1"";" '

            conn.Open sconnect ' Open Connection

            'optimization
            Application.EnableEvents = False
            Application.Calculation = xlCalculationManual

            ' SQL query to get the rows that does not exist in Timesheet
            oComm = "SELECT DISTINCT L.* " & _
            "FROM [Excel 8.0;HDR=YES;IMEX=1;" _
            & "database=" & sSecondFile & "].[" & sap_sheet & "$C" & frr & ":R" & lrr & "] AS L " & _
            " LEFT JOIN [Excel 8.0;HDR=YES;IMEX=1;" & _
            " database=" & sFirstFile & "].[" & ts_sheet & "$B1:H" & trr & "] AS S" & _
            " ON L.Order = S.WO_Internal " & _
            "WHERE (((S.WO_Internal) Is Null) AND L.[/] = 1)"

            ' get rows
            mrs.Open oComm, conn
            'Arr = mrs.GetRows ' a method to store the records into arrays, not easy to slice

            ' get headers (only if required), can comment out
            For iCols = 0 To mrs.Fields.Count - 1
                wb_sap.Worksheets("Temp").Cells(1, iCols + 1).Value = mrs.Fields(iCols).name
            Next

            ' paste output in a tempfile
            wb_sap.Worksheets("Temp").Range("A2").CopyFromRecordset mrs

            ' check if tempfile is empty or not, if not empty, capture array
            If wb_sap.Worksheets("Temp").Range("A2").Value <> "" Then
                rec_row = wb_sap.Worksheets("Temp").Range("A" & Rows.Count).End(xlUp).Row
                DataArray = wb_sap.Worksheets("Temp").Range("A2:P" & rec_row).Value
                array_row = UBound(DataArray, 1) - LBound(DataArray, 1) + 1
                array_col = UBound(DataArray, 2) - LBound(DataArray, 2) + 1
                
            Else:
            
            mrs.Close
            conn.Close
            GoTo Nextloop
            
            End If

            ' close adodb connection
            mrs.Close
            conn.Close

            wbL.Activate

            Application.ScreenUpdating = False
            Application.Calculation = False '

            Application.Index(ws.Range("B" & OldRow + 1 & ":B" & OldRow + array_row), , 1) = Application.Index(DataArray, , 1)  'WO Internal
            Application.Index(ws.Range("C" & OldRow + 1 & ":C" & OldRow + array_row), , 1) = Application.Index(DataArray, , 2)  'WO Internal Description
            ws.Range("E" & OldRow + 1 & ":E" & OldRow + array_row).Value = "CS" 'Cost Object Type
            ws.Range("F" & OldRow + 1 & ":F" & OldRow + array_row).Value = "Y"  'Billable default to Y
            Application.Index(ws.Range("G" & OldRow + 1 & ":G" & OldRow + array_row), , 1) = Application.Index(DataArray, , 13)  'Customer Workorder
            Application.Index(ws.Range("H" & OldRow + 1 & ":H" & OldRow + array_row), , 1) = Application.Index(DataArray, , 16)  'Customer PO
            ws.Range("$B$" & OldRow + 1 & ":$H$" & OldRow + array_row).RemoveDuplicates Columns:=Array(1, 2, 3, 4, 5, 6, 7), Header:=xlNo

            NewRow = ws.Range("B" & Rows.Count).End(xlUp).Row

            Application.CutCopyMode = False
            Application.Calculation = True
            Application.EnableEvents = True
            ws.Range("B" & NewRow + 1).ClearContents

        
        Case "DataInternalActivity"

            'CompareTwoDB

            ts_sheet = ws.name
            OldRow = ws.Range("B" & Rows.Count).End(xlUp).Row
            trr = OldRow

            ' connection variable
            'Excel 64-bit
            sconnect = "Provider=Microsoft.Ace.OLEDB.12.0;Data Source=" & sSecondFile _
                       & ";Extended Properties=""Excel 8.0;HDR=Yes;IMEX=1"";" '

            conn.Open sconnect ' Open Connection

            'optimization
            Application.EnableEvents = False
            Application.Calculation = xlCalculationManual

            ' SQL query to get the rows that does not exist in Timesheet
            oComm = "SELECT L.* " & _
            "FROM [Excel 8.0;HDR=YES;IMEX=1;" _
            & "database=" & sSecondFile & "].[" & sap_sheet & "$C" & frr & ":R" & lrr & "] AS L " & _
            " LEFT JOIN [Excel 8.0;HDR=YES;IMEX=1;" & _
            " database=" & sFirstFile & "].[" & ts_sheet & "$B1:H" & trr & "] AS S" & _
            " ON L.Order = S.WO_Internal " & _
            "WHERE (((S.WO_Internal) Is Null) AND L.[/] = 1)"

            ' get rows
            mrs.Open oComm, conn
            'Arr = mrs.GetRows ' a method to store the records into arrays, not easy to slice

            wb_sap.Worksheets("Temp").Cells.ClearContents

            ' get headers (only if required), can comment out
            For iCols = 0 To mrs.Fields.Count - 1
                wb_sap.Worksheets("Temp").Cells(1, iCols + 1).Value = mrs.Fields(iCols).name
            Next

            ' paste output in a tempfile
            wb_sap.Worksheets("Temp").Range("A2").CopyFromRecordset mrs

            ' check if tempfile is empty or not, if not empty, capture array
            If wb_sap.Worksheets("Temp").Range("A2").Value <> "" Then
                rec_row = wb_sap.Worksheets("Temp").Range("A" & Rows.Count).End(xlUp).Row
                DataArray = wb_sap.Worksheets("Temp").Range("A2:P" & rec_row).Value
                array_row = UBound(DataArray, 1) - LBound(DataArray, 1) + 1
                array_col = UBound(DataArray, 2) - LBound(DataArray, 2) + 1
                
            Else:
            
            mrs.Close
            conn.Close
            GoTo Nextloop

            End If

            ' close adodb connection
            mrs.Close
            conn.Close

            wbL.Activate

            Application.ScreenUpdating = False
            Application.Calculation = False

            Application.Index(ws.Range("B" & OldRow + 1 & ":B" & OldRow + array_row), , 1) = Application.Index(DataArray, , 1)  'WO Internal
            Application.Index(ws.Range("C" & OldRow + 1 & ":C" & OldRow + array_row), , 1) = Application.Index(DataArray, , 3)  'OP Internal
            Application.Index(ws.Range("D" & OldRow + 1 & ":D" & OldRow + array_row), , 1) = Application.Index(DataArray, , 4)  'Operation short text

            NewRow = ws.Range("B" & Rows.Count).End(xlUp).Row

            Application.Calculation = True
            Application.EnableEvents = True
            ws.Range("B" & NewRow + 1).ClearContents

        Case "DataCustomerOrder"
        
        OldRow = ws.Range("B" & Rows.Count).End(xlUp).Row
        'ws.Range("B" & 2 & ":B" & OldRow).ClearContents
        wbS.Windows(1).Visible = True
        
        ' filter to critteria  / 1
        SAP_ws.Range("G5").AutoFilter Field:=5, Criteria1:="1"

        ' pre-process the Customer PO in SAP datasource
        Application.Calculation = True
        fr = SAP_ws.AutoFilter.Range.Offset(1).SpecialCells(xlCellTypeVisible).Row
        LR = SAP_ws.Range("C" & Rows.Count).End(xlUp).Row
        SAP_ws.Range("R" & fr & ":R" & LR).FormulaR1C1 = "=LEFT(RC16,10)"

        Application.CutCopyMode = False
        Application.Calculation = False
        
        SAP_ws.Activate
        ' Set return all values to array
        DataArray = SAP_ws.Range(Range("C4:R4"), Range("C4:R4").End(xlDown)).Offset(2, 0).SpecialCells(xlCellTypeVisible).Value
        array_row = UBound(DataArray, 1) - LBound(DataArray, 1) + 1
        array_col = UBound(DataArray, 2) - LBound(DataArray, 2) + 1
            
            wbS.Windows(1).Visible = False

            wbL.Activate
            
            If array_row > OldRow Then

                Application.ScreenUpdating = False
                Application.Calculation = False
                
                ws.Range("A" & 2 & ":D" & array_row + 5).ClearContents
                ws.Range("A2").Value = 1
                Application.Index(ws.Range("B" & 2 & ":B" & array_row), , 1) = Application.Index(DataArray, , 13)   'WO Customer
                Application.Calculation = True
                ws.Range("$B$1:$D$" & array_row).RemoveDuplicates Columns:=Array(1, 2, 3), Header:=xlYes
                Application.Calculation = False
                NewRow = ws.Range("B" & Rows.Count).End(xlUp).Row
    
                ws.Range("C2:C" & NewRow).Value = "Customer Work Order" 'WO Customer Description
    
                Application.CutCopyMode = False
                Application.Calculation = True
                Application.EnableEvents = True
                ws.Range("D2").FormulaR1C1 = "=RC2&"" ""&RC3"
                ws.Range("B" & NewRow + 1).ClearContents

            Else
            
            End If

        Case "DataCustomerPO"
            

            Application.ScreenUpdating = False
            Application.Calculation = False
            
            wbL.Activate
            
            If array_row > OldRow Then
                
                ws.Range("A" & 2 & ":D" & array_row + 5).ClearContents
                ws.Range("A2").Value = 1
                Application.Index(ws.Range("G2:G" & array_row), , 1) = Application.Index(DataArray, , 16)  'PO Customer
    
                ws.Range("$G$1:$G$" & array_row).RemoveDuplicates Columns:=Array(1), Header:=xlYes
                ws.Range("G2:G" & array_row).SpecialCells(xlCellTypeConstants, 23).Copy
                ws.Range("B2").PasteSpecial Paste:=xlPasteValues, operation:=xlNone, SkipBlanks:=False, Transpose:=False
                Application.CutCopyMode = False
    
                NewRow = ws.Range("B" & Rows.Count).End(xlUp).Row
    
                ws.Range("C2:C" & NewRow).Value = "Customer Purchase Order" 'PO Customer Description
    
                ws.Columns("G:I").ClearContents
    
                Application.CutCopyMode = False
                Application.EnableEvents = True
                Application.Calculation = True
                ws.Range("D2").FormulaR1C1 = "=RC2&"" ""&RC3"
                ws.Range("B" & NewRow + 1).ClearContents
            
            Else
            
            End If

        End Select
        
Nextloop:

    Next

    MsgBox "Sync to SAP data source completed. Please remember to save workbook"
    
    wbS.Windows(1).Close savechanges:=False

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub

Sub ReplaceEmployeeSAP(contol As IRibbonControl)

On Error GoTo SafeExit

    Dim DataSAP, DataEmp, DataEmpCur, EmpList, DataSup, DataRole, DataDup, SupCrew, ColEmp As Variant
    Dim TimeStart As Double
    Dim TimeRun, Tmp, Append As String
    Dim DataRow, DataCol, EmpNo, EmpRow, RoleRow, RowStart, i, j, k, t, x, c, e, s, Pos As Integer
    
        Set wb = ThisWorkbook
        DataSource_FileName = Application.GetOpenFilename(FileFilter:="Excel Files, *.xl*;*.xm*")
        
        If DataSource_FileName <> False Then
            
            If MsgBox("Overwrite Existing Employee Details" & vbCrLf & "(Cancel to Append Records)", vbOKCancel, "Confirm Load Employee File") = vbCancel Then
                Append = "Yes"
            Else
                Append = "No"
            End If
            
            Application.ScreenUpdating = False
            Application.EnableEvents = False
            TimeStart = Timer
            
            Set wb_sap = Workbooks.Open(filename:=DataSource_FileName, UpdateLinks:=3)
            Set ws_SAP = wb_sap.Sheets(1)
            
            DataSAP = ws_SAP.UsedRange
            DataRow = ws_SAP.UsedRange.Rows.Count
            DataCol = ws_SAP.UsedRange.Columns.Count
            EmpRow = wb.Sheets("Employee").UsedRange.Rows.Count 'Range("B" & Rows.Count).End(xlUp).Row
            RowStart = 2
            RoleRow = wb.Sheets("Role").Range("B" & Rows.Count).End(xlUp).Row
            
            EmpNo = UBound(DataSAP) - 2
            
            ReDim ColEmp(1, 5)  'Exact SAP Column Names
            ColEmp(0, 0) = "Employee Group"
            ColEmp(0, 1) = "Employee Subgroup"
            ColEmp(0, 2) = "Employee No."
            ColEmp(0, 3) = "Employee Name"
            ColEmp(0, 4) = "Position - Description"
            ColEmp(0, 5) = "Activity Type"
            
            For c = 0 To 5 'Stores the location of the required column from the SAP data file
                If Not IsError(Application.Match(ColEmp(0, c), ws_SAP.Range("1:1"), 0)) Then
                    ColEmp(1, c) = Application.Match(ColEmp(0, c), ws_SAP.Range("1:1"), 0)
                Else
                    wb_sap.Close savechanges:=False
                    Set wb = Nothing
                    Set ws_SAP = Nothing
                    Set wb_sap = Nothing
                    Application.ScreenUpdating = True
                    Application.EnableEvents = True
                    MsgBox "Please Select Valid File" & vbCrLf & "Selected SAP File Header Names Were Not Found", , "Import SAP"
                    Exit Sub
                End If
            Next c
            
            s = 0
            ReDim DataEmp(EmpNo, 9)
            ReDim DataRole(RoleRow, 3)
            ReDim SupCrew(2, s)
                      
            DataRole = wb.Sheets("Role").Range("B2:D" & RoleRow)
            DataEmpCur = wb.Sheets("Employee").Range("B2:N" & EmpRow)
                        
            For e = 1 To UBound(DataEmpCur) 'Preserve the Supervisors
                If DataEmpCur(e, 12) <> "" Or DataEmpCur(e, 13) <> "" Then
                    SupCrew(0, s) = DataEmpCur(e, 1)
                    SupCrew(1, s) = DataEmpCur(e, 12)
                    SupCrew(2, s) = DataEmpCur(e, 13)
                    s = s + 1
                    ReDim Preserve SupCrew(2, s)
                End If
            Next e
                                                         
            Dim NameDup As Integer
            NameDup = 0
            
            For x1 = 2 To UBound(DataSAP) 'Check for duplicate employee names and append name with duplicate indication
                For y1 = 2 To UBound(DataSAP)
                    If Trim(DataSAP(x1, ColEmp(1, 3))) = Trim(DataSAP(y1, ColEmp(1, 3))) Then
                        NameDup = NameDup + 1
                    End If
                Next y1
                If NameDup > 1 Then DataSAP(x1, ColEmp(1, 3)) = Trim(DataSAP(x1, ColEmp(1, 3))) & "(" & NameDup & ")"
                NameDup = 0
            Next x1
            
            For i = 2 To UBound(DataSAP)
                DataEmp(i - 2, 0) = i - 1
                DataEmp(i - 2, 1) = Trim(DataSAP(i, ColEmp(1, 2))) 'Emp No
                DataEmp(i - 2, 3) = IIf(Left(DataSAP(i, ColEmp(1, 1)), 3) = "Sub", "Sub-Contractor", "UGL")
                
                For j = 1 To UBound(DataRole)
                    If DataSAP(i, ColEmp(1, 5)) = DataRole(j, 3) And DataRole(j, 3) <> vbNullString Then
                        DataEmp(i - 2, 4) = Trim(DataRole(j, 1)) 'Pos Des Mapped From Activity Code
                    End If
                Next j
                
                DataEmp(i - 2, 5) = Trim(DataSAP(i, ColEmp(1, 1))) 'Sub Group
                DataEmp(i - 2, 6) = Trim(DataSAP(i, ColEmp(1, 0))) 'Group
                
                With Application.WorksheetFunction
                    Pos = .Find("|", .Substitute(DataSAP(i, ColEmp(1, 3)), " ", "|", Len(DataSAP(i, ColEmp(1, 3))) - Len(.Substitute(DataSAP(i, ColEmp(1, 3)), " ", ""))))
                    DataEmp(i - 2, 9) = Mid(DataSAP(i, ColEmp(1, 3)), Pos + 1, Len(DataSAP(i, ColEmp(1, 3))) - Pos)
                    DataEmp(i - 2, 8) = Left(DataSAP(i, ColEmp(1, 3)), Len(DataSAP(i, ColEmp(1, 3))) - (Len(DataEmp(i - 2, 9)) + 1))
                End With
            Next i

' ***Disabled Role Identification as SAP activity code will be used to determine***

'            For j = 2 To UBound(DataSAP) 'Determine unique Position Descriptions
'                t = 0
'                For k = 0 To x
'                    If DataSAP(j, ColEmp(1, 4)) <> "" And DataSAP(j, ColEmp(1, 4)) = DataRole(1, k) Then t = 1
'                Next k
'
'                If t = 0 Then
'                    DataRole(0, x) = x + 1
'                    DataRole(1, x) = DataSAP(j, ColEmp(1, 4))
'                    x = x + 1
'                    ReDim Preserve DataRole(1, x)
'                End If
'            Next j
            
            'DataRow = DataRow + s
            
            If Append = "Yes" Then
                RowStart = EmpRow + 1
                DataRow = DataRow + EmpRow - 1
                EmpRow = EmpRow + UBound(DataEmp)
            End If
            
            With wb.Sheets("Employee")
                .Range("A" & RowStart & ":P" & EmpRow).Clear
                'If s > 0 Then .Range(.Cells(2, 2), .Cells(s + 1, 10)) = Application.Transpose(DataSup)
                .Range(.Cells(RowStart, 1), .Cells(DataRow, 10)) = DataEmp
            End With
            
            If Append = "Yes" Then
                ThisWorkbook.Sheets("Temp").UsedRange.Clear
                
                ThisWorkbook.Sheets("Employee").Range("B:J").AdvancedFilter Action:=xlFilterCopy, _
                CopyToRange:=ThisWorkbook.Sheets("Temp").Range("B1"), Unique:=True 'Remove duplicate employees
                DataRow = wb.Sheets("Temp").UsedRange.Rows.Count
                
                ThisWorkbook.Sheets("Employee").UsedRange.ClearContents
                ThisWorkbook.Sheets("Temp").Range("B:J").AdvancedFilter Action:=xlFilterCopy, _
                CopyToRange:=ThisWorkbook.Sheets("Employee").Range("B1"), Unique:=True
                HeadEmp = Array("UID", "EmpID Internal", "EmpID Customer", "Company", "Role", "Category", "Classification", "Overtime", "Last Name", "First Name", "Full Name", "Crew Size", "Supervisor", "SuperID", "Full Name Rank", "Full Name Sort")
                ThisWorkbook.Sheets("Employee").Range("A1:P1") = HeadEmp

                ThisWorkbook.Sheets("Temp").UsedRange.Clear
            End If
            
            With wb.Sheets("Employee")
                .Range("A2") = 1
                .Range("A3" & ":A" & DataRow).FormulaR1C1 = "=R[-1]C+1"
                .Range("A3" & ":A" & DataRow).Value = .Range("A3" & ":A" & DataRow).Value
                'Calculated Cells
                .Range("K2:K" & DataRow).FormulaR1C1 = "=RC[-2]&"", ""&RC[-1]" 'Column K Add additional Long Description Rows
                .Range("O2:O" & DataRow).FormulaR1C1 = "=COUNTIF(Labour,""<=""&RC[-4])+(COUNT(Labour)*ISTEXT(RC[-4]))" 'Employee Sorted Rank
                .Range("P2:P" & DataRow).FormulaR1C1 = "=IFERROR(INDEX(Labour,MATCH(ROWS(R2C15:RC[-1]),INDIRECT(""$O$2:$O$"" & COUNT(C[-1])+1),0)),"""")" 'Employee Sorted Full Name
                'Named Ranges
                .Range("A2:K" & DataRow).name = "Employee_List"
                .Range("A2:K" & DataRow).name = "LabSelect"
                .Range("K2:K" & DataRow).name = "Labour"
                .Range("P2:P" & DataRow).name = "LabourFull"
            End With
            
            If SupCrew(0, 0) <> vbNullString Then
                ReDim DataSup(DataRow - 1, 1)
                EmpList = wb.Sheets("Employee").Range("B2:C" & DataRow)
                For i = 1 To UBound(EmpList)
                    For j = 0 To s
                        If EmpList(i, 1) = SupCrew(0, j) Then
                            DataSup(i - 1, 0) = SupCrew(1, j)
                            DataSup(i - 1, 1) = SupCrew(2, j)
                        End If
                    Next j
                Next i
                wb.Sheets("Employee").Range("M2:N" & DataRow) = DataSup
            End If
            
'            With wb.Sheets("Role")
'                .Range("A2:B" & RoleRow).Clear
'                .Range("A2:B" & x + 1) = Application.Transpose(DataRole)
'            End With
            
            'Update Supervisor Sheet
            RowA_Del = ThisWorkbook.Sheets("Supervisor").Range("C" & Rows.Count).End(xlUp).Row
            ThisWorkbook.Sheets("Supervisor").Range("C2:T" & RowA_Del + 10).Clear
            SuperSheetUpdate "Supervisor", DataRow, 2
            
            wb_sap.Close savechanges:=False
        
            Application.ScreenUpdating = True
            Application.EnableEvents = True
        Else
            Exit Sub
        End If
    
        Set wb = Nothing
        Set ws_SAP = Nothing
        Set wb_sap = Nothing

TimeRun = Format((Timer - TimeStart) / 86400, "hh:mm:ss")
MsgBox "SAP data loading completed. " & vbCrLf & "Please remember to save workbook." & vbCrLf & "Time Taken " & TimeRun, , "Employee Data"

Exit Sub

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        Application.StatusBar = "Sub ReplaceEmployeeSAP" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Sub SuperSheetUpdate(NameSh As String, RowA_Add, RowA_Cur)
    
'Clear Supervisor Range
    With ThisWorkbook.Sheets(NameSh)
        .Range("C2:T" & .UsedRange.Rows.Count).ClearContents
    End With
    
'Update Supervisor Sheet
    ThisWorkbook.Sheets(NameSh).Range("C" & RowA_Cur & ":C" & RowA_Add).FormulaR1C1 = "=IF(ISNUMBER(SEARCH(R2C1,Employee!RC[11],1)),Employee!RC[-2],"""")" 'Supervisor sheet Column C (Map Assigned)
    ThisWorkbook.Sheets(NameSh).Range("D" & RowA_Cur & ":D" & RowA_Add).FormulaR1C1 = "=IF(OR(ISNUMBER(SEARCH(R2C1,Employee!RC[10],1)),Employee!RC[10]<>""""),"""",Employee!RC[-3])" 'Column D (Map Unassigned)
    ThisWorkbook.Sheets(NameSh).Range("E" & RowA_Cur & ":E" & RowA_Add).FormulaR1C1 = "=IFERROR(SMALL(INDIRECT(R5C2),Employee!RC[-4]),"""")" 'Column E
    ThisWorkbook.Sheets(NameSh).Range("F" & RowA_Cur & ":F" & RowA_Add).FormulaR1C1 = "=IFERROR(SMALL(INDIRECT(R6C2),Employee!RC[-5]),"""")" 'Column F
    ThisWorkbook.Sheets(NameSh).Range("G" & RowA_Cur & ":G" & RowA_Add).FormulaR1C1 = "=IFERROR(IF(VLOOKUP(RC[-2],INDIRECT(R7C2),1,TRUE)=RC[-2],VLOOKUP(RC[-2],INDIRECT(R7C2),2,TRUE),""""),"""")" 'Column G
    ThisWorkbook.Sheets(NameSh).Range("H" & RowA_Cur & ":H" & RowA_Add).FormulaR1C1 = "=IFERROR(IF(VLOOKUP(RC[-3],INDIRECT(R7C2),1,TRUE)=RC[-3],VLOOKUP(RC[-3],INDIRECT(R8C2),11,TRUE),""""),"""")" 'Column H
    ThisWorkbook.Sheets(NameSh).Range("I" & RowA_Cur & ":I" & RowA_Add).FormulaR1C1 = "=IFERROR(IF(VLOOKUP(RC[-3],INDIRECT(R7C2),1,TRUE)=RC[-3],VLOOKUP(RC[-3],INDIRECT(R7C2),2,TRUE),""""),"""")" 'Column I
    ThisWorkbook.Sheets(NameSh).Range("J" & RowA_Cur & ":J" & RowA_Add).FormulaR1C1 = "=IFERROR(IF(VLOOKUP(RC[-4],INDIRECT(R7C2),1,TRUE)=RC[-4],VLOOKUP(RC[-4],INDIRECT(R8C2),11,TRUE),""""),"""")" 'Column J

    ' ****** CHANGES STARTS HERE - NR ******

    ThisWorkbook.Sheets(NameSh).Range("L" & RowA_Cur & ":L" & RowA_Add).FormulaR1C1 = "=IF(INDIRECT(R10C2)=""Y"",ROW(INDIRECT(""Employee!$M""& ROW())),"""")"
    ThisWorkbook.Sheets(NameSh).Range("M" & RowA_Cur & ":M" & RowA_Add).FormulaR1C1 = "=IFERROR(SMALL(C12,Employee!RC[-12]),"""")"
    ThisWorkbook.Sheets(NameSh).Range("N" & RowA_Cur & ":N" & RowA_Add).FormulaR1C1 = "=IFERROR(INDEX(Employee!C2,Supervisor!RC13),"""")"
    ThisWorkbook.Sheets(NameSh).Range("O" & RowA_Cur & ":O" & RowA_Add).FormulaR1C1 = "=IFERROR(INDEX(Employee!C11,Supervisor!RC13)&"" (Crew Size ""& COUNTIF(Employee!C[-1],RC[-1]) &"")"","""")"

    ThisWorkbook.Sheets(NameSh).Range("Q" & RowA_Cur & ":Q" & RowA_Add).FormulaR1C1 = "=IF(INDIRECT(R10C2)="""",ROW(INDIRECT(""Employee!$L""& ROW())),"""")"
    ThisWorkbook.Sheets(NameSh).Range("R" & RowA_Cur & ":R" & RowA_Add).FormulaR1C1 = "=IFERROR(SMALL(C17,Employee!RC[-17]),"""")"
    ThisWorkbook.Sheets(NameSh).Range("S" & RowA_Cur & ":S" & RowA_Add).FormulaR1C1 = "=IFERROR(INDEX(Employee!C2,Supervisor!RC18),"""")"
    ThisWorkbook.Sheets(NameSh).Range("T" & RowA_Cur & ":T" & RowA_Add).FormulaR1C1 = "=IFERROR(INDEX(Employee!C11,Supervisor!RC18),"""")"
    
    ' ****** CHANGES ENDS HERE - NR ******

End Sub

Function MasterExport(contol As IRibbonControl)
On Error GoTo getfile_error

    Dim filesave As FileDialog
    Dim strPath, filename As String
    Dim r, c As Integer
    Dim NewWb As Workbook
    Dim ShtExp, Data, S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15 As Variant
    
    ShtExp = Array("Role", "Category", "Classification", "Overtime", "Shift", "Rate", "Units", "Allowances", "Auto", "Type", "Delays", "Location", "Contract", "Project", "Agreement", "Public")
    
    Set filesave = Application.FileDialog(msoFileDialogSaveAs)
        
    Application.ScreenUpdating = False
    
     With filesave
        .InitialFileName = "MasterData " & Format(Now(), "yyyy-mm-dd") & ".xlsx"
        .Title = "Save As"
        .FilterIndex = 1
        If .Show <> 0 Then
            
            strPath = .SelectedItems(1)
            Application.DisplayAlerts = False
                
            ReDim DataExp(15)
            
            S0 = ThisWorkbook.Sheets(ShtExp(0)).UsedRange
            S1 = ThisWorkbook.Sheets(ShtExp(1)).UsedRange
            S2 = ThisWorkbook.Sheets(ShtExp(2)).UsedRange
            S3 = ThisWorkbook.Sheets(ShtExp(3)).UsedRange
            S4 = ThisWorkbook.Sheets(ShtExp(4)).UsedRange
            S5 = ThisWorkbook.Sheets(ShtExp(5)).UsedRange
            S6 = ThisWorkbook.Sheets(ShtExp(6)).UsedRange
            S7 = ThisWorkbook.Sheets(ShtExp(7)).UsedRange
            S8 = ThisWorkbook.Sheets(ShtExp(8)).UsedRange
            S9 = ThisWorkbook.Sheets(ShtExp(9)).UsedRange
            S10 = ThisWorkbook.Sheets(ShtExp(10)).UsedRange
            S11 = ThisWorkbook.Sheets(ShtExp(11)).UsedRange
            S12 = ThisWorkbook.Sheets(ShtExp(12)).UsedRange
            S13 = ThisWorkbook.Sheets(ShtExp(13)).UsedRange
            S14 = ThisWorkbook.Sheets(ShtExp(14)).UsedRange
            S15 = ThisWorkbook.Sheets(ShtExp(15)).UsedRange
            
            Data = Array(S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15)
            
            Set NewWb = Workbooks.Add
            
            With NewWb
            
            For i = 15 To 0 Step -1
                With .Sheets.Add(Before:=.Sheets(1))
                    .name = ShtExp(i)
                    .Range(.Cells(1, 1), .Cells(UBound(Data(i)), UBound(Application.Transpose(Data(i))))) = Data(i)
                    '.Range("A:A").Delete
                End With
            Next i
                .Worksheets("Sheet1").Delete
            End With
            
            NewWb.SaveAs strPath
            NewWb.Close
            Application.DisplayAlerts = True
            MsgBox "Master data export completed", , "Master Data"
        End If
        
    End With
    
    Application.EnableEvents = True
    Application.ScreenUpdating = True
Exit Function

getfile_error:
    MsgBox ("The following error occurred (" & Err.Number & "):" & vbCrLf & Err.Description)
    On Error GoTo 0

End Function

Function MasterImport(contol As IRibbonControl)
On Error GoTo getfile_error

    Dim filesave As FileDialog
    Dim strPath, filename As String
    Dim r, c, i, j, wschk, Chk As Integer
    Dim MasWb, wb As Workbook
    Dim ShtExp, ShtChk, Data, S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15 As Variant
    Dim TimeStart As Double
    Dim TimeRun As String
    
    ShtExp = Array("Role", "Category", "Classification", "Overtime", "Shift", "Rate", "Units", "Allowances", "Auto", "Type", "Delays", "Location", "Contract", "Project", "Agreement", "Public")
    
    Set wb = ThisWorkbook
        DataSource_FileName = Application.GetOpenFilename(FileFilter:="Excel Files, *.xl*;*.xm*")
        
        If DataSource_FileName <> False Then
            If MsgBox("Overwrite Existing Master Data", vbOKCancel, "Confirm Overwrite") = vbOK Then
            
                Application.ScreenUpdating = False
                Application.EnableEvents = False
                Application.DisplayAlerts = False
                TimeStart = Timer
                
                Set MasWb = Workbooks.Open(filename:=DataSource_FileName, UpdateLinks:=3)
                  
                wschk = MasWb.Worksheets.Count
                
                For i = 0 To 15
                    Chk = 0
                    
                    For j = 1 To wschk
                        If ShtExp(i) = MasWb.Sheets(j).name Then Chk = 1
                    Next j
                
                    If Chk = 0 Then
                        MasWb.Close savechanges:=False
                        Application.DisplayAlerts = True
                        Application.ScreenUpdating = True
                        Application.EnableEvents = True
                        MsgBox "Please Select Valid Master Data File", , "Import Master Data"
                        Exit Function
                    End If
                Next i
                
                ReDim DataExp(15)
                
                S0 = MasWb.Sheets(ShtExp(0)).UsedRange
                S1 = MasWb.Sheets(ShtExp(1)).UsedRange
                S2 = MasWb.Sheets(ShtExp(2)).UsedRange
                S3 = MasWb.Sheets(ShtExp(3)).UsedRange
                S4 = MasWb.Sheets(ShtExp(4)).UsedRange
                S5 = MasWb.Sheets(ShtExp(5)).UsedRange
                S6 = MasWb.Sheets(ShtExp(6)).UsedRange
                S7 = MasWb.Sheets(ShtExp(7)).UsedRange
                S8 = MasWb.Sheets(ShtExp(8)).UsedRange
                S9 = MasWb.Sheets(ShtExp(9)).UsedRange
                S10 = MasWb.Sheets(ShtExp(10)).UsedRange
                S11 = MasWb.Sheets(ShtExp(11)).UsedRange
                S12 = MasWb.Sheets(ShtExp(12)).UsedRange
                S13 = MasWb.Sheets(ShtExp(13)).UsedRange
                S14 = MasWb.Sheets(ShtExp(14)).UsedRange
                S15 = MasWb.Sheets(ShtExp(15)).UsedRange
                
                Data = Array(S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14, S15)
                
                With wb
                    For i = 0 To 15
                    Application.ScreenUpdating = True
                    Application.StatusBar = "Processing " & ShtExp(i) & "..."
                    Application.ScreenUpdating = False
                        With wb.Sheets(ShtExp(i))
                        .Range(.Cells(2, 1), .Cells(.UsedRange.Rows.Count, .UsedRange.Columns.Count)).ClearContents
                        .Range(.Cells(1, 1), .Cells(UBound(Data(i)), UBound(Application.Transpose(Data(i))))) = Data(i)
                        .Range("A2") = 1
                        If UBound(Data(i)) > 2 Then
                            .Range("A3" & ":A" & UBound(Data(i))).FormulaR1C1 = "=R[-1]C+1"
                            .Range("A3" & ":A" & UBound(Data(i))).Value = .Range("A3" & ":A" & UBound(Data(i))).Value
                        End If
                        End With
                    Next i
                    
                    Application.ScreenUpdating = True
                    Application.StatusBar = "Updating Named Ranges..."
                    Application.ScreenUpdating = False
                    
                    'named ranges
                    .Sheets(ShtExp(0)).Range("B2:B" & UBound(S0)).name = "Role"
                    .Sheets(ShtExp(0)).Range("B2:E" & UBound(S0)).name = "Master_Role"
                    .Sheets(ShtExp(1)).Range("B2:B" & UBound(S1)).name = "Master_Category"
                    .Sheets(ShtExp(2)).Range("B2:B" & UBound(S2)).name = "Master_Class"
                    .Sheets(ShtExp(3)).Range("B2:B" & UBound(S3)).name = "Master_Overtime"
                    .Sheets(ShtExp(4)).Range("C2:C" & UBound(S4)).name = "Shift"
                    .Sheets(ShtExp(4)).Range("A2:F" & UBound(S4)).name = "Master_Shift"
                    .Sheets(ShtExp(5)).Range("B2:C" & UBound(S5)).name = "Master_Rate"
                    .Sheets(ShtExp(6)).Range("B2:C" & UBound(S6)).name = "Master_Units"
                    .Sheets(ShtExp(7)).Range("B2:B" & UBound(S7)).name = "Allowance"
                    .Sheets(ShtExp(7)).Range("B2:I" & UBound(S7)).name = "Master_Allow"
                    .Sheets(ShtExp(7)).Range("A2:B" & UBound(S7)).name = "AllowSelect"
                    .Sheets(ShtExp(7)).Range("B2:C" & UBound(S7)).name = "AllowUnits"
                    .Sheets(ShtExp(8)).Range("A2:E" & UBound(S8)).name = "Master_Auto"
                    .Sheets(ShtExp(9)).Range("B2:B" & UBound(S9)).name = "Type"
                    .Sheets(ShtExp(9)).Range("A2:C" & UBound(S9)).name = "Master_Type"
                    .Sheets(ShtExp(10)).Range("B2:B" & UBound(S10)).name = "Delay"
                    .Sheets(ShtExp(10)).Range("B2:D" & UBound(S10)).name = "Master_Delay"
                    .Sheets(ShtExp(11)).Range("C2:C" & UBound(S11)).name = "Location"
                    .Sheets(ShtExp(11)).Range("B2:E" & UBound(S11)).name = "Master_Location"
                    .Sheets(ShtExp(12)).Range("C2:C" & UBound(S12)).name = "Contract"
                    .Sheets(ShtExp(12)).Range("B2:D" & UBound(S12)).name = "Master_Contract"
                    .Sheets(ShtExp(13)).Range("D2:D" & UBound(S13)).name = "Project"
                    .Sheets(ShtExp(13)).Range("B2:C" & UBound(S13)).name = "Master_Project"
                    .Sheets(ShtExp(13)).Range("B2:D" & UBound(S13)).name = "Project_Full"
                    .Sheets(ShtExp(14)).Range("B2:C" & UBound(S14)).name = "Agreement"
                    .Sheets(ShtExp(14)).Range("A2:Q" & UBound(S14)).name = "Master_Time"
                    .Sheets(ShtExp(15)).Range("B2:C" & UBound(S15)).name = "Public"
                    .Sheets(ShtExp(15)).Range("B2:D" & UBound(S15)).name = "Master_Public"
                
                End With
                
                MasWb.Close savechanges:=False
                Application.DisplayAlerts = True
            
            End If
        
        TimeRun = Format((Timer - TimeStart) / 86400, "hh:mm:ss")
        MsgBox "Master data loading completed. " & vbCrLf & "Please remember to save workbook." & vbCrLf & "Time Taken " & TimeRun, , "Import Master Data"
        End If
    
    Application.StatusBar = False
    Application.EnableEvents = True
    Application.ScreenUpdating = True

Exit Function

getfile_error:
    MsgBox ("The following error occurred (" & Err.Number & "):" & vbCrLf & Err.Description)
    On Error GoTo 0

End Function
Sub MasterCusMapExp()
    MasterExportSingle "DataCustomerOrder"
End Sub
Sub MasterCusMapImp()
    MasterImportSingle "DataCustomerOrder"
End Sub
Sub MasterIntMapExp()
    MasterExportSingle "DataInternalOrder"
End Sub
Sub MasterIntMapImp()
    MasterImportSingle "DataInternalOrder"
End Sub
Sub MasterEmpExp()
    MasterExportSingle "Employee"
End Sub
Sub MasterEmpImp()
    Application.StatusBar = "Importing Employee Details..."
    MasterImportSingle "Employee"
    UserForm2.ListBox1.RowSource = "Employee_List"
    Application.StatusBar = False
End Sub

Function MasterExportSingle(ShtExp As String)
On Error GoTo getfile_error

    Dim filesave As FileDialog
    Dim strPath, filename As String
    Dim r, c As Integer
    Dim NewWb As Workbook
    Dim S0 As Variant
            
    Set filesave = Application.FileDialog(msoFileDialogSaveAs)
        
    Application.ScreenUpdating = False
    
     With filesave
        .InitialFileName = "Master " & ShtExp & " " & Format(Now(), "yyyy-mm-dd") & ".xlsx"
        .Title = "Save As"
        .FilterIndex = 1
        If .Show <> 0 Then
            
            strPath = .SelectedItems(1)
            Application.DisplayAlerts = False
    
            S0 = ThisWorkbook.Sheets(ShtExp).UsedRange
            
            Set NewWb = Workbooks.Add
            
            With NewWb
            
                With .Sheets.Add(Before:=.Sheets(1))
                    .name = ShtExp
                    .Range(.Cells(1, 1), .Cells(UBound(S0), UBound(Application.Transpose(S0)))) = S0
                End With
            
                Select Case ShtExp
                
                    Case "Employee"
                    .Sheets(ShtExp).Range("O:P").Clear
                    
                End Select
                
            End With
            
            NewWb.Sheets("Sheet1").Delete
            
            NewWb.SaveAs strPath
            NewWb.Close
                        
            Application.DisplayAlerts = True
            MsgBox ShtExp & " Export Completed", , "Master Data"
            
        End If
    End With
    
    Application.EnableEvents = True
    Application.ScreenUpdating = True
Exit Function

getfile_error:
    MsgBox ("The following error occurred (" & Err.Number & "):" & vbCrLf & Err.Description)
    On Error GoTo 0

End Function

Function MasterImportSingle(ShtExp As String)
On Error GoTo getfile_error

    Dim filesave As FileDialog
    Dim strPath, filename, NameSh As String
    Dim r, c, i, j, wschk, Chk As Integer
    Dim MasWb, wb As Workbook
    Dim ShtChk, Data, S0 As Variant
    Dim TimeStart As Double
    Dim TimeRun As String
    Dim Super As Variant
                   
    Set wb = ThisWorkbook
        DataSource_FileName = Application.GetOpenFilename(FileFilter:="Excel Files, *.xl*;*.xm*")
        
        If DataSource_FileName <> False Then
            If MsgBox("Overwrite Existing Master Data", vbOKCancel, "Confirm Overwrite") = vbOK Then
            
                Application.ScreenUpdating = False
                Application.EnableEvents = False
                Application.DisplayAlerts = False
                TimeStart = Timer
                
                Set MasWb = Workbooks.Open(filename:=DataSource_FileName, UpdateLinks:=3)
                  
                wschk = MasWb.Worksheets.Count
                Chk = 0
                
                For j = 1 To wschk
                    If ShtExp = MasWb.Sheets(j).name Then Chk = 1
                Next j
            
                If Chk = 0 Then
                    MasWb.Close savechanges:=False
                    Application.DisplayAlerts = True
                    Application.ScreenUpdating = True
                    Application.EnableEvents = True
                    MsgBox "Please Select Valid Master Data File", , "Import Master Data"
                    Exit Function
                End If
                
                S0 = MasWb.Sheets(ShtExp).UsedRange
                         
                With wb
                    
                        With wb.Sheets(ShtExp)
                        .UsedRange.ClearContents
                        .Range(.Cells(1, 1), .Cells(UBound(S0), UBound(Application.Transpose(S0)))) = S0
                        .Range("A2") = 1
                        .Range("A3" & ":A" & UBound(S0)).FormulaR1C1 = "=R[-1]C+1"
                        .Range("A3" & ":A" & UBound(S0)).Value = .Range("A3" & ":A" & UBound(S0)).Value
                        End With
                                        
                    'named ranges
                    Select Case ShtExp
                    
                    Case "DataCustomerOrder"
                        
                        .Sheets(ShtExp).Range("B2:B" & UBound(S0)).name = "WO_Customer"
                        .Sheets(ShtExp).Range("B2:C" & UBound(S0)).name = "WO_Customer_Long"
                        .Sheets(ShtExp).Range("C2:C" & UBound(S0)).name = "WO_Full_Ext"
                        .Sheets(ShtExp).Range("D2:D" & UBound(S0)).name = "Workorder"
                        .Sheets(ShtExp).Range("E2:E" & UBound(S0)).name = "WO_UGL"
                    
                    Case "DataInternalOrder"
                    
                        .Sheets(ShtExp).Range("B2:C" & UBound(S0)).name = "WO_Internal"
                        .Sheets(ShtExp).Range("B2:I" & UBound(S0)).name = "WO_All"
                        .Sheets(ShtExp).Range("C2:C" & UBound(S0)).name = "Workorder_Full"
                        .Sheets(ShtExp).Range("C2:C" & UBound(S0)).name = "WO_Full"
                        
                        '.Sheets("Combolookup").Range("A2:C" & UBound(S0)).ClearContents
                        '.Sheets("ComboLookup").Range("A2:A" & UBound(S0)).FormulaR1C1 = "=DataInternalOrder!RC[1]"
                        '.Sheets("ComboLookup").Range("B2:B" & UBound(S0)).FormulaR1C1 = "=COUNTIF(WO_List,""<=""&RC[-1])+(COUNT(WO_List)*ISTEXT(RC[-1]))"
                        '.Sheets("ComboLookup").Range("C2:C" & UBound(S0)).FormulaR1C1 = "=IFERROR(INDEX(WO_List,MATCH(ROWS(R2C3:RC),INDIRECT(R14C5),0)),"""")"
                    
                        '.Sheets("ComboLookup").Range("A2:A" & UBound(S0)).name = "WO_List"
                        '.Sheets("ComboLookup").Range("C2:C" & UBound(S0)).name = "WO_List_Sort"
                        
                        SortList "DataInternalOrder"
                    
                    Case "Employee"
                        
                        .Sheets(ShtExp).Range("K2:K" & UBound(S0)).FormulaR1C1 = "=RC[-2]&"", ""&RC[-1]"
                        .Sheets(ShtExp).Range("O2:O" & UBound(S0)).FormulaR1C1 = "=COUNTIF(Labour,""<=""&RC[-4])+(COUNT(Labour)*ISTEXT(RC[-4]))"
                        .Sheets(ShtExp).Range("P2:P" & UBound(S0)).FormulaR1C1 = "=IFERROR(INDEX(Labour,MATCH(ROWS(R2C15:RC[-1]),INDIRECT(""$O$2:$O$"" & COUNT(C[-1])+1),0)),"""")"
                                                                                              
                        ReDim Super(1 To UBound(S0) - 1, 1 To 2)
                                                                       
                        For i = 2 To UBound(S0)
                            If S0(i, 13) = "Y" Then
                                Super(i, 1) = "=IF(COUNTIF(C[2],RC[-10])=0,""No Crew"",""Crew Size ("" &COUNTIF(C[2],RC[-10]) & "")"")"
                                Super(i, 2) = "Y"
                            End If
                        Next i
                        
                        .Sheets(ShtExp).Range("L2:M" & UBound(S0)) = Super
                        .Sheets(ShtExp).Range("A2:K" & UBound(S0)).name = "Employee_List"
                        .Sheets(ShtExp).Range("A2:K" & UBound(S0)).name = "LabSelect"
                        .Sheets(ShtExp).Range("K2:K" & UBound(S0)).name = "Labour"
                        .Sheets(ShtExp).Range("P2:P" & UBound(S0)).name = "LabourFull"
                        
                        SuperSheetUpdate "Supervisor", UBound(S0), 2
                                                
                    End Select
                
                End With
                
                MasWb.Close savechanges:=False
                Application.DisplayAlerts = True
            
            End If
        
        TimeRun = Format((Timer - TimeStart) / 86400, "hh:mm:ss")
        MsgBox ShtExp & " Data load completed. " & vbCrLf & "Please remember to save workbook." & vbCrLf & "Time Taken " & TimeRun, , "Import Master Data"
        End If
    
    Application.EnableEvents = True
    Application.ScreenUpdating = True

Exit Function

getfile_error:
    MsgBox ("The following error occurred (" & Err.Number & "):" & vbCrLf & Err.Description)
    On Error GoTo 0

End Function

Sub SortEmp(CrewCol As Integer)

Dim Listing() As Variant
Dim Removed() As Variant

Listing = Application.Transpose(Application.Transpose(ActiveSheet.Range(ActiveSheet.Cells(2, 9), ActiveSheet.Cells(2, CrewCol))))
Quicksort Listing, LBound(Listing), UBound(Listing)

Removed = Application.Transpose(Application.Transpose(RemoveDups(Listing)))
ActiveSheet.Range(ActiveSheet.Cells(2, 9), ActiveSheet.Cells(2, CrewCol)) = Removed

End Sub
Sub SortList(NameSh As String)

Dim Listing() As Variant
Dim Removed() As Variant
Dim RowSh As Integer

RowSh = ThisWorkbook.Sheets(NameSh).Range("B" & Rows.Count).End(xlUp).Row

ThisWorkbook.Sheets("Combolookup").Range("C:C").ClearContents
Listing = Application.Transpose(ThisWorkbook.Sheets(NameSh).Range("B2:B" & RowSh))
Quicksort Listing, LBound(Listing), UBound(Listing)

Removed = Application.Transpose(RemoveDups(Listing))

ThisWorkbook.Sheets("Combolookup").Range("C1:C1") = "UGL Order Sorted"
ThisWorkbook.Sheets("Combolookup").Range("C2" & ":C" & UBound(Removed) + 1) = Removed
ThisWorkbook.Sheets("ComboLookup").Range("C2" & ":C" & UBound(Removed) + 1).name = "WO_List_Sort"

End Sub

Sub SortListCust(NameSh As String)

Dim Listing() As Variant
Dim Removed() As Variant
Dim RowSh As Integer

RowSh = ThisWorkbook.Sheets(NameSh).Range("B" & Rows.Count).End(xlUp).Row

ThisWorkbook.Sheets("Combolookup").Range("B:B").ClearContents
Listing = Application.Transpose(ThisWorkbook.Sheets(NameSh).Range("B2:B" & RowSh))
Quicksort Listing, LBound(Listing), UBound(Listing)

Removed = Application.Transpose(RemoveDups(Listing))

ThisWorkbook.Sheets("Combolookup").Range("B1:B1") = "UGL Customer Sorted"
ThisWorkbook.Sheets("Combolookup").Range("B2" & ":B" & UBound(Removed) + 1) = Removed
ThisWorkbook.Sheets("ComboLookup").Range("B2" & ":B" & UBound(Removed) + 1).name = "WO_List_Sort_Cust"

End Sub

Sub Quicksort(vArray As Variant, arrLbound As Long, arrUbound As Long)
'Sorts a one-dimensional VBA array from smallest to largest
'using a very fast quicksort algorithm variant.
Dim pivotVal As Variant
Dim vSwap    As Variant
Dim tmpLow   As Long
Dim tmpHi    As Long
 
tmpLow = arrLbound
tmpHi = arrUbound
pivotVal = vArray((arrLbound + arrUbound) \ 2)
 
While (tmpLow <= tmpHi) 'divide
   While (vArray(tmpLow) < pivotVal And tmpLow < arrUbound)
      tmpLow = tmpLow + 1
   Wend
  
   While (pivotVal < vArray(tmpHi) And tmpHi > arrLbound)
      tmpHi = tmpHi - 1
   Wend
 
   If (tmpLow <= tmpHi) Then
      vSwap = vArray(tmpLow)
      vArray(tmpLow) = vArray(tmpHi)
      vArray(tmpHi) = vSwap
      tmpLow = tmpLow + 1
      tmpHi = tmpHi - 1
   End If
Wend
 
  If (arrLbound < tmpHi) Then Quicksort vArray, arrLbound, tmpHi 'conquer
  If (tmpLow < arrUbound) Then Quicksort vArray, tmpLow, arrUbound 'conquer

End Sub

Public Function RemoveDups(strings() As Variant) As String()
Dim old_i As Integer
Dim last_i As Integer
Dim result() As String

    ' Make the result array.
    ReDim result(1 To UBound(strings))

    ' Copy the first item into the result array.
    result(1) = strings(1)

    ' Copy the other items
    last_i = 1
    For old_i = 2 To UBound(strings)
        If result(last_i) <> strings(old_i) Then
            If result(last_i) <> vbNullString Then last_i = last_i + 1
            result(last_i) = strings(old_i)
        End If
    Next old_i

    ' Remove unused entries from the result array.
    ReDim Preserve result(1 To last_i)

    ' Return the result array.
    RemoveDups = result
End Function
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet27"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet32"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet33"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet34"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet36"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "TempData"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)

On Error GoTo SafeExit

Dim wb As Workbook
Dim ws As Worksheet

Application.StatusBar = "Saving Workbook..."
Application.EnableEvents = False
Application.ScreenUpdating = False

TempData.UsedRange.Clear

Set wb = ThisWorkbook

For Each ws In wb.Worksheets
    If Left(ws.CodeName, 8) = "TimeTemp" And ws.Visible = True And ws.Cells(7, 1) <> "Timesheet Approved" Then
        ws.Unprotect Password:="TimeAdmin#"
        ws.EnableSelection = xlNoRestrictions
        ws.Cells(4, 2) = ws.UsedRange.Columns.Count
        ws.Cells(4, 3) = ws.UsedRange.Rows.Count
        ws.Cells(4, 4) = ws.CodeName
        ws.Protect Password:="TimeAdmin#", DrawingObjects:=False, Contents:=True, Scenarios:=True
    End If
Next

Application.EnableEvents = True
Application.ScreenUpdating = True
Application.StatusBar = Empty

Exit Sub

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        Application.StatusBar = "Sub Workbook_BeforeSave" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Function CodeNameExist(wb As Workbook, sCodeName As String) As Boolean
    Dim s As String
    Dim ws As Worksheet

    WorksheetCodeNameExists = False
    For Each ws In wb.Worksheets
        If StrComp(ws.CodeName, sCodeName, vbTextCompare) = 0 Then
            CodeNameExist = True
            Exit For
        End If
    Next
    Set ws = Nothing
End Function

Private Sub Workbook_Open()

On Error GoTo SafeExit

    Application.Calculation = True
    Application.EnableEvents = True
    Application.ScreenUpdating = True

Exit Sub

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        Application.StatusBar = "Sub Workbook_Open" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Private Sub Workbook_SheetSelectionChange(ByVal sh As Object, ByVal Target As Range)

On Error GoTo SafeExit

If Selection.Count = 1 Then

Select Case sh.name
    
    Case "TimeTemplate", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"
        
        If Not Intersect(Target, Range("G8")) Is Nothing Then
            If Cells(7, 7) <> Empty Then
                SearchField
            End If
        End If
        
        Dim DataFinishCol As Integer
        DataFinishCol = Application.WorksheetFunction.Match("EmpEnd", ActiveSheet.Range("1:1"), 0) - 1

        If ActiveSheet.Cells(1, 7) <> Empty And Not Intersect(Target, sh.Range(Cells(11, 9), Cells((ActiveSheet.Range("SignCust").Row - 2), DataFinishCol))) Is Nothing Then 'Used to determine range for autonumber
                    
            ActiveCell = ActiveSheet.Cells(1, 7)
        
        End If

'        If Not Intersect(Target, Range("D15:E28")) Is Nothing Then
            
'            MsgBox (Range(ActiveCell.Address).Left & vbCrLf & _
'                    Range(ActiveCell.Address).Top & vbCrLf & _
'                    Application.UsableHeight & " " & Application.Height & vbCrLf & _
'                    Application.UsableWidth & " " & Application.Width)
            
'            UserForm5.Show
        
'        End If
    'Application.EnableEvents = False
    
        If Not Intersect(Target, sh.Range("B10:B" & ActiveSheet.Range("SignCust").Row - 2)) Is Nothing Then
             
            'If sh.Cells(ActiveCell.Row, 1).Value <> "" Then
                
                WOAct (sh.Cells(ActiveCell.Row, 1).Value)
                
'                Dim ListNum As Integer
'                Sheets("ComboLookup").Cells(2, 5) = Sh.Cells(ActiveCell.Row, 1).Value
'                ListNum = Application.WorksheetFunction.Count(Sheets("ComboLookup").Range("H:H")) + 1
'
'                    If ListNum = 1 Then
'                        Sheets("ComboLookup").Range("E3:E3").Name = "WO_OP_List" 'only show line item 0010
'                    Else
'                        Sheets("ComboLookup").Range("H2:H" & ListNum).Name = "WO_OP_List" 'show all line items for workorder
'                    End If
'
'            Else
'                    Sheets("ComboLookup").Range("E4:E4").Name = "WO_OP_List" 'do not show any line items
            'End If
        
        End If
    
    'With Sh.Range(ActiveCell.Address).Validation 'test validation switching to show mutliple columns in combobox
    '    .Modify xlValidateList, xlValidAlertStop, xlBetween, "=A1"
    '    .InCellDropdown = True
    'End With
    
    End Select
    End If
    Application.EnableEvents = True
 
Exit Sub
 
SafeExit:
        Application.EnableEvents = True
        'Application.StatusBar = "Sub Workbook_SheetSelectionChange" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0
 
End Sub

Private Sub Workbook_SheetChange(ByVal sh As Object, ByVal Target As Range)

On Error GoTo SafeExit

Dim RowA_Add, RowA_Del, RowA_Cur, Prod_Start, Delay_Start, Over_Start, Allow_Start, RowSml, RowSml2, RowUse, RowUse2 As Integer
Dim r() As Variant
Dim ShtDay, ShtPrev As String

If TypeName(Selection) = "Rectangle" Then ActiveSheet.Range("A1").Select

 If Selection.Count <= 2 Then

    Select Case sh.name

        Case "TimeTemplate", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"

            Application.ScreenUpdating = False
            Application.EnableEvents = False
            
            If Not Intersect(Target, Range("G4")) Is Nothing And ActiveSheet.CodeName <> ActiveSheet.name Then
                
                If Left(ActiveSheet.CodeName, 4) = "Temp" Or ActiveSheet.CodeName = "TimeTemplate" Then
                    ShtDay = CStr(Format(Target.Value, "ddd"))
                    ShtPrev = ActiveSheet.name
                    ThisWorkbook.Sheets(ShtDay).name = ShtPrev & "d"
                    ActiveSheet.name = ShtDay
                    ThisWorkbook.Sheets(ShtPrev & "d").name = ShtPrev
                End If
                
            End If
            
            If Not Intersect(Target, Range("G7")) Is Nothing Then 'used for search function
            
                If Target.Value = vbNullString Then
                    ActiveSheet.Cells(7, 7).Validation.Delete
                    ActiveSheet.Cells(7, 6) = ClearContents
                End If
            
            End If
            
'            If Not Intersect(Target, Range("G5")) Is Nothing Then
'
'                If Target.Value <> vbNullString Then WOFilter (Sh.Range("F5")) 'Apply filter based on selected project
'
'            End If
            
            If Not Intersect(Target, Range("4:4")) Is Nothing And Intersect(Target, Range("A4:H4")) Is Nothing Then 'Change classification back to default when default class selected
                If ActiveCell = ActiveCell.Offset(5, 0) Then
                   ActiveCell = ActiveCell.Offset(5, 0).Formula
                End If
                AutoAllow "N"
            End If

            If Not Intersect(Target, Range("2:2")) Is Nothing And Intersect(Target, Range("A2:H2")) Is Nothing Then 'Change classification back to default when name selected
                Col = 9
                Do Until ActiveSheet.Cells(2, Col) = "Total Hours"
                    Col = Col + 1
                Loop
                                
                AutoAllow "N"
                
                ActiveCell.Offset(2, 0) = ActiveCell.Offset(7, 0).Formula

                Set Employees = ActiveSheet.Range(Cells(2, 9), Cells(2, Col - 1)) 'Check for duplicates in Employee Name

                If WorksheetFunction.CountIf(Employees, ActiveCell.Value) > 1 And ActiveCell <> vbNullString Then
                    If MsgBox("Duplicate found for employee " & ActiveCell.Value, vbOKCancel, "Confirm Duplicate Employee") = vbCancel Then
                        ActiveCell.Value = ""
                    End If
                End If
                
            End If

            If Not Intersect(Target, Range("6:6")) Is Nothing And Intersect(Target, Range("A6:H6")) Is Nothing Then 'Change classification back to default when name selected
                If ActiveCell <> vbNullString Then
                    ActiveCell.Offset(1, 0).FormulaR1C1 = "=VLOOKUP(R[-1]C,Shift!C3:C5,2,FALSE)"
                    ActiveCell.Offset(1, 0).Value = ActiveCell.Offset(1, 0).Value
                    ActiveCell.Offset(2, 0).FormulaR1C1 = "=VLOOKUP(R[-2]C,Shift!C3:C5,3,FALSE)"
                    ActiveCell.Offset(2, 0).Value = ActiveCell.Offset(2, 0).Value
                Else
                    ActiveCell.Offset(1, 0).ClearContents
                    ActiveCell.Offset(2, 0).ClearContents
                End If
                AutoAllow "N"
            End If

            If Not Intersect(Target, Range("PrintCustName")) Is Nothing Then
                SignUnprotect
                ActiveSheet.Range("PrintCustDate") = Now()
                SignProtect
            End If
            
            If Not Intersect(Target, Range("PrintCompName")) Is Nothing Then
                SignUnprotect
                ActiveSheet.Range("PrintCompDate") = Now()
                SignProtect
            End If
            
            If Not Intersect(Target, Range("A:G")) Is Nothing Then
                Prod_Start = Application.WorksheetFunction.Match("Allowances", ActiveSheet.Range("A:A"), 0)
                Delay_Start = ActiveSheet.Range("SignCust").Row - 1 'sh.Range("A" & Rows.Count).End(xlUp).Row 'Removed Delays
            
                'Delay_Start = Application.WorksheetFunction.Match("DELAY HOURS", ActiveSheet.Range("A:A"), 0)
                'Over_Start = Application.WorksheetFunction.Match("OVERTIME HOURS", ActiveSheet.Range("A:A"), 0)
            
                If Not Intersect(Target, Range("A:A")) Is Nothing And Intersect(Target, Range("A1:A10")) Is Nothing Then
                                                           
                  WODetail Target.Value, Target.Row, CStr(ActiveSheet.Range("C9"))
                    
'                    If ActiveCell.Value <> "" Then
'                        sh.Cells(ActiveCell.Row, 2) = 10 'Operation
                        If ActiveCell.Row < Prod_Start Then
                            SignUnprotect
                                If ActiveSheet.Cells(9, 3) = True Then
                                    Range("G" & ActiveCell.Row).Validation.Modify xlValidateList, xlValidAlertStop, xlBetween, "=WO_Full"
                                Else
                                    Range("G" & ActiveCell.Row).Validation.Modify xlValidateList, xlValidAlertStop, xlBetween, "=WO_Full_Ext"
                                End If
                            SignProtect
                        End If
'
'                        sh.Cells(ActiveCell.Row, 3) = "Prod" 'Work Type
'                        Sheets("ComboLookup").Cells(20, 5) = 10
'                        Sheets("ComboLookup").Cells(2, 5) = ActiveCell
'                        sh.Cells(ActiveCell.Row, 5) = Sheets("ComboLookup").Cells(6, 5)
'                        sh.Cells(ActiveCell.Row, 6) = Sheets("ComboLookup").Cells(9, 5)
'
'                        If ActiveCell.Row < Prod_Start Then _
'                        sh.Cells(ActiveCell.Row, 7) = Sheets("ComboLookup").Cells(19, 5) 'prevent description change on allowances and delays
'                        RowA_Add = Application.WorksheetFunction.Count(Sheets("Combolookup").Range("G:G"))
'                        RowA_Cur = Sheets("Combolookup").Range("H" & Rows.Count).End(xlUp).Row
'
'                        If RowA_Add > RowA_Cur Then
'                            Sheets("ComboLookup").Range("H" & RowA_Cur + 1 & ":H" & RowA_Add + 1).FormulaR1C1 = "=IFERROR(SMALL(INDIRECT(R13C5),RC[-2]),"""")"
'                        End If
'
'                        If RowA_Cur > 10 Then
'                            Sheets("ComboLookup").Range("H" & RowA_Add + 2 & ":H" & RowA_Cur).Clear
'                        End If
'
'                    Else
'
'                        sh.Cells(ActiveCell.Row, 2) = vbNullString
'                        sh.Cells(ActiveCell.Row, 3) = vbNullString
'                        sh.Cells(ActiveCell.Row, 4) = vbNullString
'                        sh.Cells(ActiveCell.Row, 5) = vbNullString
'                        sh.Cells(ActiveCell.Row, 6) = vbNullString
'
'                        If ActiveCell.Row < Prod_Start Then
'                            sh.Cells(ActiveCell.Row, 7) = vbNullString
'                        End If
'                    End If
                
                End If

                If Not Intersect(Target, Range("B:B")) Is Nothing And Intersect(Target, Range("B1:B10")) Is Nothing And _
                       sh.Cells(Target.Row, 1) <> Empty Then 'Operation Change
                                                                      
                       If Target.Row < Prod_Start And ListCheck(sh.Cells(Target.Row, 3)) = vbNullString Then ActDesc Target.Value, Target.Row
                
                End If
                
                If Not Intersect(Target, Range("C:C")) Is Nothing And Intersect(Target, Range("C1:C10")) Is Nothing Then 'Work Type Change
                
                       If Target.Row < Prod_Start Then
                       SignUnprotect
                            If ListCheck(Target.Value) <> vbNullString Then
                                Range("G" & Target.Row).Validation.Modify xlValidateList, xlValidAlertStop, xlBetween, "=" & ListCheck(Target.Value)
                                sh.Cells(Target.Row, 7) = "Please Select " & Target.Value & " Type"
                                sh.Cells(Target.Row, 4) = "100%"
                            Else
                                If ActiveSheet.Cells(9, 3) = True Then
                                    Range("G" & ActiveCell.Row).Validation.Modify xlValidateList, xlValidAlertStop, xlBetween, "=WO_Full"
                                Else
                                    Range("G" & ActiveCell.Row).Validation.Modify xlValidateList, xlValidAlertStop, xlBetween, "=WO_Full_Ext"
                                End If
                                
                                If sh.Cells(Target.Row, 2) = vbNullString Or sh.Cells(Target.Row, 2) = "10" Then
                                    WODetail sh.Cells(Target.Row, 1).Value, Target.Row, CStr(ActiveSheet.Range("C9"))
                                
                                Else
                                    ActDesc sh.Cells(Target.Row, 2).Value, Target.Row
                                End If
                            End If
                        SignProtect
                        End If
                
                End If
            
                If Not Intersect(Target, Range("G:G")) Is Nothing And Not Intersect(Target, Range("G1:G" & Prod_Start)) Is Nothing And _
                   Intersect(Target, Range("G1:G10")) Is Nothing Then
                    
                    If ActiveCell.Value <> vbNullString And ListCheck(sh.Cells(ActiveCell.Row, 3)) = vbNullString Then
                        WODesc Target.Value, Target.Row, ActiveSheet.Range("C9")
'                        sh.Cells(ActiveCell.Row, 1) = "=IFERROR(INDEX(WO_Internal,MATCH(" & ActiveCell.Address & ",Workorder_Full,0),1),"""")"
'                        sh.Cells(ActiveCell.Row, 1) = sh.Cells(ActiveCell.Row, 1).Value
'
'                        sh.Cells(ActiveCell.Row, 2) = 10 'Operation
'                        sh.Cells(ActiveCell.Row, 3) = "Prod" 'Work Type
'                        Sheets("ComboLookup").Cells(20, 5) = 10
'                        Sheets("ComboLookup").Cells(2, 5) = sh.Cells(ActiveCell.Row, 1)
'                        sh.Cells(ActiveCell.Row, 5) = Sheets("ComboLookup").Cells(6, 5)
'                        sh.Cells(ActiveCell.Row, 6) = Sheets("ComboLookup").Cells(9, 5)
'                        sh.Cells(ActiveCell.Row, 7) = Sheets("ComboLookup").Cells(19, 5)

                    'NINAEDIT
                    ElseIf ActiveCell.Value = "Weather" And ListCheck(sh.Cells(ActiveCell.Row, 3)) <> vbNullString Then
                         If Left(sh.Cells(ActiveCell.Row, 1), 1) = 8 Then
                            ActiveCell.Value = "Weather (Non-Billable)"
                         Else
                            ActiveCell.Value = "Weather"
                         End If
                         
                    ElseIf ActiveCell.Value = "Weather (Non-Billable)" And ListCheck(sh.Cells(ActiveCell.Row, 3)) <> vbNullString Then
                         If Left(sh.Cells(ActiveCell.Row, 1), 1) = 6 Then
                            ActiveCell.Value = "Weather"
                         Else
                            ActiveCell.Value = "Weather (Non-Billable)"
                         End If

                    Else
                        If ActiveCell.Value = vbNullString Then
                            sh.Range(Cells(ActiveCell.Row, 1), Cells(ActiveCell.Row, 6)) = ClearContents
                            SignUnprotect
                            If ActiveSheet.Cells(9, 3) = True Then
                                Range("G" & ActiveCell.Row).Validation.Modify xlValidateList, xlValidAlertStop, xlBetween, "=WO_Full"
                            Else
                                Range("G" & ActiveCell.Row).Validation.Modify xlValidateList, xlValidAlertStop, xlBetween, "=WO_Full_Ext"
                            End If
                            SignProtect
                        End If
                    End If
                End If
            
            End If
            
            'NINAEDIT
            If Not Intersect(Target, Range("I:AZ")) Is Nothing And Intersect(Target, Range("G1:G10")) Is Nothing Then
                
                Prod_End = Application.WorksheetFunction.Match("Allowances", ActiveSheet.Range("A:A"), 0) - 1
                Allow_Start = sh.Range("allow_start").Row + 2
                Allow_End = sh.Range("TT_lrow").Row - 1
                cols_tot_hours = sh.Range("tot_hours").Column - 1
                
                'CHANGES IN WORKED HOURS
                If Not Intersect(Target, sh.Range(Cells(11, 9), Cells(Prod_End, cols_tot_hours))) Is Nothing And Intersect(Target, sh.Range(Cells(7, 9), Cells(8, cols_tot_hours))) Is Nothing Then
               
                    curr_col = Target.Column
                    
                    testhour_up = Hour(Cells(7, curr_col).Value)
                    'testhour_down = Hour(Cells(8, curr_col).Value)
                    
                    If Hour(Cells(8, curr_col).Value) > testhour_up Then
                    
                        HD_down = Int(Cells(8, curr_col).Value) * 24 + Hour(Cells(8, curr_col).Value) + Round(Minute(Cells(8, curr_col).Value) / 60, 2)
                        HD_up = Int(Cells(7, curr_col).Value) * 24 + Hour(Cells(7, curr_col).Value) + Round(Minute(Cells(7, curr_col).Value) / 60, 2)
                        HourDifference = Round(HD_down - HD_up, 1)
                        'HourDifference = Hour(Cells(8, curr_col).Value) - Hour(Cells(7, curr_col).Value)
                      
                    ElseIf testhour_up > Hour(Cells(8, curr_col).Value) Then
                    
                        Mod_hr_min = Evaluate("MOD(" & Cells(8, curr_col).Value - Cells(7, curr_col).Value & ",1)")
                        Mod_hr = Int(Format(Mod_hr_min, "h"))
                        Mod_min = Int(Minute(Mod_hr_min)) / 60
                        HourDifference = Round(Mod_hr + Mod_min, 1)
                        'HourDifference = Hour(Cells(7, curr_col).Value) - Hour(Cells(8, curr_col).Value)
                        
'                    ElseIf testhour_up = Hour(Cells(8, curr_col).Value) And Cells(8, curr_col).Value <> 0 Then
'                        MsgBox ("Shift Time Start and Time Finish cannot be the same, Please correct.")

                    End If
                    
                    prod_sum = Application.Sum(Range(Cells(11, curr_col), Cells(Prod_End, curr_col)))
'                    allow_sum = Application.Sum(Range(Cells(Allow_Start, curr_col), Cells(Allow_End, curr_col)))
'                    person_tot_hours = prod_sum + allow_sum
                    
                    person_tot_hours = Round(Cells(5, curr_col).Value, 1)
                    person_name = Cells(2, curr_col).Value
                    Set form_check = Cells(5, curr_col)
                    
                    If person_tot_hours <> HourDifference And person_tot_hours <> 0 Then
                    
                        SignUnprotect
                        'red
                        With Cells(5, curr_col).Font
                            .Color = -16776961
                            .TintAndShade = 0
                        End With
                        With Cells(5, curr_col).Interior
                            .Pattern = xlSolid
                            .PatternColorIndex = xlAutomatic
                            .Color = 16764159
                            .TintAndShade = 0
                            .PatternTintAndShade = 0
                        End With
                        SignProtect
                        
                        'MsgBox (person_name & "'s total work hours does not match with the shift hours, please adjust the work hours")
                        
                    ElseIf prod_sum = 0 Or person_tot_hours = HourDifference Then
                    
                        SignUnprotect
                        'black
                        With Cells(5, curr_col).Font
                            .ColorIndex = xlAutomatic
                            .TintAndShade = 0
                        End With
                        With Cells(5, curr_col).Interior
                            .Pattern = xlNone
                            .TintAndShade = 0
                            .PatternTintAndShade = 0
                        End With
                        SignProtect
                  
                    End If
                    
                'CHANGES IN SHIFT TIME CHANGE
                ElseIf Not Intersect(Target, sh.Range(Cells(7, 9), Cells(8, cols_tot_hours))) Is Nothing Then
                
                    curr_col = Target.Column
                    
                    testhour_up = Hour(Cells(7, curr_col).Value)
                    'testhour_down = Hour(Cells(8, curr_col).Value)
                    
                    If Hour(Cells(8, curr_col).Value) > testhour_up Then
                        HD_down = Int(Cells(8, curr_col).Value) * 24 + Hour(Cells(8, curr_col).Value) + Round(Minute(Cells(8, curr_col).Value) / 60, 2)
                        HD_up = Int(Cells(7, curr_col).Value) * 24 + Hour(Cells(7, curr_col).Value) + Round(Minute(Cells(7, curr_col).Value) / 60, 2)
                        HourDifference = HD_down - HD_up
                        
                    ElseIf testhour_up > Hour(Cells(8, curr_col).Value) Then
                        
                        HD_down = Int(Cells(8, curr_col).Value) * 24 + Hour(Cells(8, curr_col).Value) + Round(Minute(Cells(8, curr_col).Value) / 60, 2)
                        HD_up = Int(Cells(7, curr_col).Value) * 24 + Hour(Cells(7, curr_col).Value) + Round(Minute(Cells(7, curr_col).Value) / 60, 2)
                        HourDifference = HD_up - HD_down
'                    ElseIf testhour_up = Hour(Cells(8, curr_col).Value) And testhour_up <> Hour(Cells(8, curr_col).Value) Then
'                        MsgBox ("Shift Time Start and Time Finish cannot be the same, Please correct!")
                    End If
                    
                    prod_sum = Application.Sum(Range(Cells(11, curr_col), Cells(Prod_End, curr_col)))
'                    allow_sum = Application.Sum(Range(Cells(Allow_Start, curr_col), Cells(Allow_End, curr_col)))
'                    person_tot_hours = prod_sum + allow_sum
                    
                    person_tot_hours = Cells(5, curr_col).Value
                    person_name = Cells(2, curr_col).Value
                    Set form_check = Cells(5, curr_col)
                    
                    If person_tot_hours <> HourDifference And person_tot_hours <> 0 Then
                    
                        SignUnprotect
                        'red
                        With Cells(5, curr_col).Font
                            .Color = -16776961
                            .TintAndShade = 0
                        End With
                        With Cells(5, curr_col).Interior
                            .Pattern = xlSolid
                            .PatternColorIndex = xlAutomatic
                            .Color = 16764159
                            .TintAndShade = 0
                            .PatternTintAndShade = 0
                        End With
                        SignProtect
                        
                        'MsgBox (person_name & "'s total work hours does not match with the shift hours, please adjust the work hours")
                        
                    ElseIf prod_sum = 0 Or person_tot_hours = HourDifference Then
                    
                        SignUnprotect
                        'black
                        With Cells(5, curr_col).Font
                            .ColorIndex = xlAutomatic
                            .TintAndShade = 0
                        End With
                        With Cells(5, curr_col).Interior
                            .Pattern = xlNone
                            .TintAndShade = 0
                            .PatternTintAndShade = 0
                        End With
                        SignProtect
                  
                    End If
                
                End If
                
            End If
            


'            If Not Intersect(Target, range(Cells(10, 5), Cells(FindRow("a"), 5))) Is Nothing Then 'Check for duplicates in Allowances
'                Set rngallow = range(Cells(10, 5), Cells(FindRow("a"), 5))
'                If WorksheetFunction.CountIf(rngallow, ActiveCell.Value) > 1 Then
'                    MsgBox "Duplicate found for " & ActiveCell.Value & ". The entry has been removed."
'                    ActiveCell.Value = ""
'                End If
'            End If
'
'            If Not Intersect(Target, range(Cells(FindRow("a") + 2, 5), Cells(FindRow("p"), 5))) Is Nothing Then 'Check for duplicates in Productive Hours
'                Set rngallow = range(Cells(FindRow("a") + 2, 5), Cells(FindRow("p"), 5))
'                If WorksheetFunction.CountIf(rngallow, ActiveCell.Value) > 1 Then
'                    MsgBox "Duplicate found for " & ActiveCell.Value & ". The entry has been removed."
'                    ActiveCell.Value = ""
'                End If
'            End If
'
'            If Not Intersect(Target, range(Cells(FindRow("p") + 2, 5), Cells(FindRow("v"), 5))) Is Nothing Then 'Check for duplicates in VARIATION HOURS
'                Set rngallow = range(Cells(FindRow("p") + 2, 5), Cells(FindRow("v"), 5))
'                If WorksheetFunction.CountIf(rngallow, ActiveCell.Value) > 1 Then
'                    MsgBox "Duplicate found for " & ActiveCell.Value & ". The entry has been removed."
'                    ActiveCell.Value = ""
'                End If
'            End If
'
'            If Not Intersect(Target, range(Cells(FindRow("v") + 2, 5), Cells(FindRow("d"), 5))) Is Nothing Then 'Check for duplicates in DELAY HOURS
'                Set rngallow = range(Cells(FindRow("v") + 2, 5), Cells(FindRow("d"), 5))
'                If WorksheetFunction.CountIf(rngallow, ActiveCell.Value) > 1 Then
'                    MsgBox "Duplicate found for " & ActiveCell.Value & ". The entry has been removed."
'                    ActiveCell.Value = ""
'                End If
'            End If
'
'            If Not Intersect(Target, range(Cells(FindRow("d") + 2, 5), Cells(FindRow("o"), 5))) Is Nothing Then 'Check for duplicates in Overtime Hours
'                Set rngallow = range(Cells(FindRow("d") + 2, 5), Cells(FindRow("o"), 5))
'                If WorksheetFunction.CountIf(rngallow, ActiveCell.Value) > 1 Then
'                    MsgBox "Duplicate found for " & ActiveCell.Value & ". The entry has been removed."
'                    ActiveCell.Value = ""
'                End If
'            End If

                Application.EnableEvents = True
                Application.ScreenUpdating = True

        Case "DataCustomerOrder"

            Application.EnableEvents = False
            Application.ScreenUpdating = False

             If Not Intersect(Target, sh.Range("G2:G2")) Is Nothing Or _
                Not Intersect(Target, sh.Range("E:E")) Is Nothing Then 'selected workorder trigger or new mapped order
                RowA_Add = sh.Range("B" & Rows.Count).End(xlUp).Row + 1
'
'                     If Application.WorksheetFunction.Count(sh.Range("H:H")) = 0 Then 'Count assigned orders
'                        RowSml = 2 'assigned orders
'                        RowUse = Application.WorksheetFunction.CountA(sh.Range("J:J")) + 1
'                    Else
'                        RowSml = Application.WorksheetFunction.Count(sh.Range("H:H")) + 1
'                        RowUse = Application.WorksheetFunction.CountA(sh.Range("J:J")) + 1
'                    End If
'
'                'Don't need full range to be calculated
'                If RowSml > RowUse Then
'                    sh.Range("J" & RowUse & ":J" & RowSml).FormulaR1C1 = "=IFERROR(SMALL(INDIRECT(""$H$2:$H$"" & COUNTA(C[-9])),RC[-9]),"""")"
'                    sh.Range("L" & RowUse & ":L" & RowSml).FormulaR1C1 = "=IFERROR(IF(VLOOKUP(RC[-2],C[-11],1,TRUE)=RC[-2],VLOOKUP(RC[-2],C[-11]:C[-10],2,TRUE),""""),"""")"
'                    sh.Range("M" & RowUse & ":M" & RowSml).FormulaR1C1 = "=IFERROR(IF(VLOOKUP(RC[-3],C[-12],1,TRUE)=RC[-3],VLOOKUP(RC[-3],C[-12]:C[-10],3,TRUE),""""),"""")"
'                ElseIf RowUse > 20 Then 'ensure not to many cells are being calculated necessarily
'                    sh.Range("J20:J" & RowUse).ClearContents
'                    sh.Range("L20:M" & RowUse).ClearContents
'                End If
'
'                'Named Range Definition
'                Sheets("DataCustomerOrder").Range("L2:M" & RowSml).Name = "OrderMap"
            End If

            If Not Intersect(Target, sh.Range("B:B")) Is Nothing Then

                RowA_Add = sh.Range("B" & Rows.Count).End(xlUp).Row
                RowA_Cur = sh.Range("A" & Rows.Count).End(xlUp).Row
                sh.Cells(2, 1) = 1

'                 If Application.WorksheetFunction.Count(sh.Range("I:I")) = 0 Then 'Count unassigned orders
'                        RowSml2 = 2 'unassigned orders
'                        RowUse2 = Application.WorksheetFunction.CountA(sh.Range("K:K")) + 1
'                        'Sh.Range("K2:K" & RowUse2).ClearContents
'                        'Sh.Range("N2:O" & RowUse2).ClearContents
'                    Else
'                        RowSml2 = Application.WorksheetFunction.Count(sh.Range("I:I")) + 1
'                        RowUse2 = Application.WorksheetFunction.CountA(sh.Range("K:K")) + 1
'                        'Sh.Range("K2:K" & RowUse2).ClearContents
'                        'Sh.Range("N2:O" & RowUse2).ClearContents
'                    End If
'
                If RowA_Add > RowA_Cur Then
                    With sh.Range("A" & RowA_Cur + 1 & ":A" & RowA_Add) 'Column A Add additional UID Rows
                        .FormulaR1C1 = "=R[-1]C+1"
                        .Value = .Value
                    End With

                    ' Add additional calculated columns
                    sh.Range("D" & RowA_Cur + 1 & ":D" & RowA_Add).FormulaR1C1 = "=TRIM(RC[-2]&""  ""&RC[-1])"
'                    sh.Range("H" & RowA_Cur + 1 & ":H" & RowA_Add).FormulaR1C1 = "=IF(ISNUMBER(SEARCH(R2C7,RC[-3],1)),RC[-7],"""")"
'                    sh.Range("I" & RowA_Cur + 1 & ":I" & RowA_Add).FormulaR1C1 = "=IF(OR(ISNUMBER(SEARCH(R2C7,RC[-4],1)),RC[-4]<>""""),"""",RC[-8])"
'
'                    If RowSml2 > RowA_Cur Then
'                        sh.Range("K" & RowA_Cur + 1 & ":K" & RowSml2).FormulaR1C1 = "=IFERROR(SMALL(R2C9:R" & RowA_Add & "C9,RC[-10]),"""")"
'                        sh.Range("N" & RowA_Cur + 1 & ":N" & RowSml2).FormulaR1C1 = "=IFERROR(IF(VLOOKUP(RC[-3],C[-13],1,TRUE)=RC[-3],VLOOKUP(RC[-3],C[-13]:C[-12],2,TRUE),""""),"""")"
'                        sh.Range("O" & RowA_Cur + 1 & ":O" & RowSml2).FormulaR1C1 = "=IFERROR(IF(VLOOKUP(RC[-4],C[-14],1,TRUE)=RC[-4],VLOOKUP(RC[-4],C[-14]:C[-12],3,TRUE),""""),"""")"
'                    End If
                End If

                If RowA_Add < RowA_Cur And RowA_Add > 1 Then
                    RowA_Del = sh.Range("A" & Rows.Count).End(xlUp).Row
                    sh.Rows(RowA_Add + 1 & ":" & RowA_Del + 1).Delete Shift:=xlUp
                    sh.Cells(RowA_Add + 1, 2).Select
                End If

                'Named Ranges
                With Sheets("DataCustomerOrder")
                    .Range("B2:C" & RowA_Add).name = "WO_Customer_Long"
                    .Range("B2:B" & RowA_Add).name = "WO_Customer"
                    .Range("C2:C" & RowA_Add).name = "WO_Full_Ext"
                    .Range("D2:D" & RowA_Add).name = "Workorder"
                    .Range("E2:E" & RowA_Add).name = "WO_UGL"
                End With

                SortListCust "DataCustomerOrder"

            End If

            Application.EnableEvents = True
            Application.ScreenUpdating = True

        
        Case "DataCustomerPO"

            Application.EnableEvents = False

            If Not Intersect(Target, sh.Range("B:B")) Is Nothing Then

                RowA_Add = sh.Range("B" & Rows.Count).End(xlUp).Row
                RowA_Cur = sh.Range("A" & Rows.Count).End(xlUp).Row
                sh.Cells(2, 1) = 1

                If RowA_Add > RowA_Cur Then
                    With sh.Range("A" & RowA_Cur + 1 & ":A" & RowA_Add) 'Column A Add additional UID Rows
                        .FormulaR1C1 = "=R[-1]C+1"
                        .Value = .Value
                    End With
                
                    sh.Range("D" & RowA_Cur + 1 & ":D" & RowA_Add).FormulaR1C1 = "=TRIM(RC[-2]&""  ""&RC[-1])" 'Column D Add additional Long Description Rows
                End If
                
                If RowA_Add < RowA_Cur And RowA_Add > 1 Then
                    RowA_Del = sh.Range("A" & Rows.Count).End(xlUp).Row
                    sh.Rows(RowA_Add + 1 & ":" & RowA_Del + 1).Delete Shift:=xlUp
                    sh.Cells(RowA_Add + 1, 2).Select
                End If

                'Named Range Definition
                With Sheets("DataCustomerPO")
                    .Range("B2:C" & RowA_Add).name = "PO_Customer_Long"
                    .Range("B2:B" & RowA_Add).name = "PO_Customer"
                End With

            End If

            Application.EnableEvents = True
            
        Case "DataInternalOrder"
'
            Application.ScreenUpdating = False
            Application.EnableEvents = False
'
'            If Not Intersect(Target, sh.Range("J2:J2")) Is Nothing Or _
'                Not Intersect(Target, sh.Range("G:G")) Is Nothing Then 'selected workorder trigger or new mapped order
'                RowA_Add = sh.Range("B" & Rows.Count).End(xlUp).Row + 1
'
'                     If Application.WorksheetFunction.Count(sh.Range("K:K")) = 0 Then 'Count assigned orders
'                        RowSml = 2 'assigned orders
'                        RowUse = Application.WorksheetFunction.CountA(sh.Range("M:M")) + 1
'                    Else
'                        RowSml = Application.WorksheetFunction.Count(sh.Range("K:K")) + 1
'                        RowUse = Application.WorksheetFunction.CountA(sh.Range("M:M")) + 1
'                    End If
'
'                'Don't need full range to be calculated
'                If RowSml > RowUse Then
'                    sh.Range("M" & RowUse & ":M" & RowSml).FormulaR1C1 = "=IFERROR(SMALL(INDIRECT(""$K$2:$K$"" & COUNTA(C[-12])),RC[-12]),"""")"
'                    sh.Range("O" & RowUse & ":O" & RowSml).FormulaR1C1 = "=IFERROR(IF(VLOOKUP(RC[-2],C[-14],1,TRUE)=RC[-2],VLOOKUP(RC[-2],C[-14]:C[-13],2,TRUE),""""),"""")"
'                    sh.Range("P" & RowUse & ":P" & RowSml).FormulaR1C1 = "=IFERROR(IF(VLOOKUP(RC[-3],C[-15],1,TRUE)=RC[-3],VLOOKUP(RC[-3],C[-15]:C[-13],3,TRUE),""""),"""")"
'                ElseIf RowUse > 20 Then 'ensure not to many cells are being calculated necessarily
'                    sh.Range("O20:O" & RowUse).ClearContents
'                    sh.Range("P20:P" & RowUse).ClearContents
'                End If
'
'                'Named Range Definition
'                Sheets("DataInternalOrder").Range("O2:P" & RowSml).Name = "OrderMapWO"
'            End If
'
'        ' Original Code
            If Not Intersect(Target, sh.Range("B:B")) Is Nothing Then
                RowA_Add = sh.Range("B" & Rows.Count).End(xlUp).Row
                RowA_Cur = sh.Range("A" & Rows.Count).End(xlUp).Row
                sh.Cells(2, 1) = 1
'
'                    If Application.WorksheetFunction.Count(sh.Range("L:L")) = 0 Then 'Count unassigned orders
'                        RowSml2 = 2 'unassigned orders
'                        RowUse2 = Application.WorksheetFunction.CountA(sh.Range("N:N")) + 1
'                    Else
'                        RowSml2 = Application.WorksheetFunction.Count(sh.Range("L:L")) + 1
'                        RowUse2 = Application.WorksheetFunction.CountA(sh.Range("N:N")) + 1
'                    End If
'
                If RowA_Add > RowA_Cur Then
                    With sh.Range("A" & RowA_Cur + 1 & ":A" & RowA_Add) 'Column A Add additional UID Rows
                        .FormulaR1C1 = "=R[-1]C+1"
                        .Value = .Value
                    End With

                    sh.Range("D" & RowA_Cur + 1 & ":D" & RowA_Add).FormulaR1C1 = "=TRIM(RC[-2]&""  ""&RC[-1])" 'Column D Add additional Long Description Rows
'                    sh.Range("K" & RowA_Cur + 1 & ":K" & RowA_Add).FormulaR1C1 = "=IF(ISNUMBER(SEARCH(R2C10,RC[-4],1)),RC[-10],"""")"
'                    sh.Range("L" & RowA_Cur + 1 & ":L" & RowA_Add).FormulaR1C1 = "=IF(OR(ISNUMBER(SEARCH(R2C10,RC[-5],1)),RC[-5]<>""""),"""",RC[-11])"
'
'                    If RowSml2 > RowA_Cur Then
'                        sh.Range("N" & RowA_Cur + 1 & ":N" & RowSml2).FormulaR1C1 = "=IFERROR(SMALL(INDIRECT(""$L$2:$L$"" & COUNTA(C[-13])),RC[-13]),"""")"
'                        sh.Range("Q" & RowA_Cur + 1 & ":Q" & RowSml2).FormulaR1C1 = "=IFERROR(IF(VLOOKUP(RC[-3],C[-16],1,TRUE)=RC[-3],VLOOKUP(RC[-3],C[-16]:C[-15],2,TRUE),""""),"""")"
'                        sh.Range("R" & RowA_Cur + 1 & ":R" & RowSml2).FormulaR1C1 = "=IFERROR(IF(VLOOKUP(RC[-4],C[-17],1,TRUE)=RC[-4],VLOOKUP(RC[-4],C[-17]:C[-15],3,TRUE),""""),"""")"
'                    End If
                    RowA_Cur = 2
                    ' ************* START Expand ComboLookup Sheet Values ***************
                    'Sheets("ComboLookup").Range("A" & RowA_Cur + 1 & ":A" & RowA_Add).FormulaR1C1 = "=DataInternalOrder!RC[1]"
                    'Sheets("ComboLookup").Range("B" & RowA_Cur + 1 & ":B" & RowA_Add).FormulaR1C1 = "=COUNTIF(WO_List,""<=""&RC[-1])+(COUNT(WO_List)*ISTEXT(RC[-1]))"
                    'Sheets("ComboLookup").Range("C" & RowA_Cur + 1 & ":C" & RowA_Add).FormulaR1C1 = "=IFERROR(INDEX(WO_List,MATCH(ROWS(R2C3:RC),INDIRECT(R14C5),0)),"""")"

                End If

                If RowA_Add < RowA_Cur And RowA_Add > 1 Then 'only when deleting
                    RowA_Del = sh.Range("A" & Rows.Count).End(xlUp).Row
                    sh.Rows(RowA_Add + 1 & ":" & RowA_Del + 1).Delete Shift:=xlUp
                    sh.Cells(RowA_Add + 1, 2).Select
'
                    'Delete ComboLookup Rows
                    'Sheets("ComboLookup").Range("A" & RowA_Add + 1 & ":C" & RowA_Del + 1).Clear
                End If
'
'                'Named Ranges
                Sheets("DataInternalOrder").Range("B2:C" & RowA_Add).name = "WO_Internal"
                Sheets("DataInternalOrder").Range("C2:C" & RowA_Add).name = "WO_Full"
                Sheets("DataInternalOrder").Range("B2:I" & RowA_Add).name = "WO_All"
                SortList "DataInternalOrder"
                'Sheets("ComboLookup").Range("A2:A" & RowA_Add).name = "WO_List"
                'Sheets("ComboLookup").Range("C2:C" & RowA_Add).name = "WO_List_Sort"
'
            End If
            Application.EnableEvents = True
            Application.ScreenUpdating = True
            
        Case "DataInternalActivity"
'
            Application.EnableEvents = False
            Application.ScreenUpdating = False
'
'            If Not Intersect(Target, sh.Range("F2:F2")) Is Nothing Then 'selected workorder trigger
'                RowA_Add = sh.Range("B" & Rows.Count).End(xlUp).Row + 1
'
'                    If Application.WorksheetFunction.Count(sh.Range("G:G")) = 0 Then
'                        RowSml = 2
'                        RowUse = Application.WorksheetFunction.CountA(sh.Range("H:H")) + 1
'                    Else
'                        RowSml = Application.WorksheetFunction.Count(sh.Range("G:G")) + 1
'                        RowUse = Application.WorksheetFunction.CountA(sh.Range("H:H")) + 1
'                    End If
'
'                'Don't need full range to be calculated
'                If RowSml > RowUse Then
'                    sh.Range("H" & RowUse & ":H" & RowSml).FormulaR1C1 = "=IFERROR(SMALL(INDIRECT(""$G$2:$G$"" & COUNTA(C[-6])),RC[-7]),"""")"
'                    sh.Range("I" & RowUse & ":I" & RowSml).FormulaR1C1 = "=IFERROR(IF(VLOOKUP(RC[-1],C[-8],1,TRUE)=RC[-1],VLOOKUP(RC[-1],C[-8]:C[-5],3,TRUE),""""),"""")"
'                    sh.Range("J" & RowUse & ":J" & RowSml).FormulaR1C1 = "=IFERROR(IF(VLOOKUP(RC[-2],C[-9],1,TRUE)=RC[-2],VLOOKUP(RC[-2],C[-9]:C[-6],4,TRUE),""""),"""")"
'                ElseIf RowUse > 20 Then
'                    sh.Range("H20:J" & RowUse).ClearContents
'                End If
'
'                'Named Ranges
'                Sheets("DataInternalActivity").Range("I2:J" & RowSml).Name = "OP_Internal"
'
'            End If
'
           
            If Not Intersect(Target, sh.Range("C:C")) Is Nothing Then
  
                If Target.Value = vbNullString Then
                    sh.Rows(Target.Row & ":" & Target.Row).Delete Shift:=xlUp
                    
                    Dim Arr As Variant
       
                    Arr = OrdAct(UserForm1.ListBox3.Value)
                    UserForm1.ListBox5.list = Arr
                    If UserForm1.ListBox5.ListCount > 0 Then ListBox5.RemoveItem ListBox5.ListCount - 1
                    
                End If
            End If
            
            
            
            If Not Intersect(Target, sh.Range("B:B")) Is Nothing Then
                RowA_Add = sh.Range("B" & Rows.Count).End(xlUp).Row
                RowA_Cur = sh.Range("A" & Rows.Count).End(xlUp).Row
                sh.Cells(2, 1) = 1

                If RowA_Add > RowA_Cur Then
                    With sh.Range("A" & RowA_Cur + 1 & ":A" & RowA_Add) 'Column A Add additional UID Rows
                        .FormulaR1C1 = "=R[-1]C+1"
                        .Value = .Value
                    End With
'
'                    sh.Range("G" & RowA_Cur + 1 & ":G" & RowA_Add).FormulaR1C1 = "=IF(ISNUMBER(SEARCH(R2C6,RC[-5],1)),RC[-6],"""")"
'
'                    ' ************* START Expand ComboLookup Sheet Values ***************
'                    With Sheets("ComboLookup").Range("F" & RowA_Cur + 1 & ":F" & RowA_Add) 'Column F Add additional UID Rows
'                        .FormulaR1C1 = "=DataInternalActivity!RC[-5]"
'                        .Value = .Value
'                    End With
'
'                    Sheets("ComboLookup").Range("G" & RowA_Cur + 1 & ":G" & RowA_Add).FormulaR1C1 = "=IF(ISNUMBER(SEARCH(R2C5,DataInternalActivity!RC[-5],1)),DataInternalActivity!RC[-4],"""")"
'
                End If
                            
'                ' ************* FINISH Expand ComboLookup Sheet Values ***************
'
                If RowA_Add < RowA_Cur And RowA_Add > 1 Then
                    RowA_Del = sh.Range("A" & Rows.Count).End(xlUp).Row
                    sh.Rows(RowA_Add + 1 & ":" & RowA_Del + 1).Delete Shift:=xlUp
                    sh.Cells(RowA_Add + 1, 2).Select
'
'                    'Delete ComboLookup Rows
'                    Sheets("ComboLookup").Range("F" & RowA_Add + 1 & ":G" & RowA_Del + 1).ClearContents
                End If
                        
            End If
            Application.EnableEvents = True
            Application.ScreenUpdating = True
        
        Case "ComboLookup"
        
            If Not Intersect(Target, Sheets("ComboLookup").Range("E2:E2")) Is Nothing Then
            
                Application.EnableEvents = False
                Application.ScreenUpdating = False
                
                RowA_Add = Application.WorksheetFunction.Count(Sheets("Combolookup").Range("G:G"))
                RowA_Cur = Sheets("Combolookup").Range("H" & Rows.Count).End(xlUp).Row
                
                If RowA_Add > RowA_Cur Then
                    Sheets("ComboLookup").Range("H" & RowA_Cur + 1 & ":H" & RowA_Add).FormulaR1C1 = "=IFERROR(SMALL(INDIRECT(R13C5),RC[-2]),"""")"
                End If
                
                If RowA_Cur > 10 Then
                    Sheets("ComboLookup").Range("H" & RowA_Add + 2 & ":H" & RowA_Cur).Clear
                End If
                
                Application.EnableEvents = True
                Application.ScreenUpdating = True

            End If
        
        Case "Employee"
        
        Dim NameSh As String
        NameSh = "Supervisor"
        
            Application.EnableEvents = False

            If Not Intersect(Target, sh.Range("B:B")) Is Nothing Then
                RowA_Add = sh.Range("B" & Rows.Count).End(xlUp).Row ' CHANGE - NR Change to B
                RowA_Cur = sh.Range("A" & Rows.Count).End(xlUp).Row
                sh.Cells(2, 1) = 1
                
                If RowA_Add > RowA_Cur Then
                    With sh.Range("A" & RowA_Cur + 1 & ":A" & RowA_Add) 'Column A Add additional UID Rows
                        .FormulaR1C1 = "=R[-1]C+1"
                        .Value = .Value
                    End With
                RowA_Cur = 2
                
                    sh.Range("K" & RowA_Cur & ":K" & RowA_Add).FormulaR1C1 = "=RC[-2]&"", ""&RC[-1]" 'Column K Add additional Long Description Rows
                    sh.Range("O" & RowA_Cur & ":O" & RowA_Add).FormulaR1C1 = "=COUNTIF(Labour,""<=""&RC[-4])+(COUNT(Labour)*ISTEXT(RC[-4]))" 'Employee Sorted Rank
                    sh.Range("P" & RowA_Cur & ":P" & RowA_Add).FormulaR1C1 = "=IFERROR(INDEX(Labour,MATCH(ROWS(R2C15:RC[-1]),INDIRECT(""$O$2:$O$"" & COUNT(C[-1])+1),0)),"""")" 'Employee Sorted Full Name

                    'Update Supervisor Sheet
                    SuperUpdate NameSh, RowA_Add, RowA_Cur
'                    ThisWorkbook.Sheets(NameSh).Range("C" & RowA_Cur & ":C" & RowA_Add).FormulaR1C1 = "=IF(ISNUMBER(SEARCH(R2C1,Employee!RC[11],1)),Employee!RC[-2],"""")" 'Supervisor sheet Column C (Map Assigned)
'                    ThisWorkbook.Sheets(NameSh).Range("D" & RowA_Cur & ":D" & RowA_Add).FormulaR1C1 = "=IF(OR(ISNUMBER(SEARCH(R2C1,Employee!RC[10],1)),Employee!RC[10]<>""""),"""",Employee!RC[-3])" 'Column D (Map Unassigned)
'                    ThisWorkbook.Sheets(NameSh).Range("E" & RowA_Cur & ":E" & RowA_Add).FormulaR1C1 = "=IFERROR(SMALL(INDIRECT(R5C2),Employee!RC[-4]),"""")" 'Column E
'                    ThisWorkbook.Sheets(NameSh).Range("F" & RowA_Cur & ":F" & RowA_Add).FormulaR1C1 = "=IFERROR(SMALL(INDIRECT(R6C2),Employee!RC[-5]),"""")" 'Column F
'                    ThisWorkbook.Sheets(NameSh).Range("G" & RowA_Cur & ":G" & RowA_Add).FormulaR1C1 = "=IFERROR(IF(VLOOKUP(RC[-2],INDIRECT(R7C2),1,TRUE)=RC[-2],VLOOKUP(RC[-2],INDIRECT(R7C2),2,TRUE),""""),"""")" 'Column G
'                    ThisWorkbook.Sheets(NameSh).Range("H" & RowA_Cur & ":H" & RowA_Add).FormulaR1C1 = "=IFERROR(IF(VLOOKUP(RC[-3],INDIRECT(R7C2),1,TRUE)=RC[-3],VLOOKUP(RC[-3],INDIRECT(R8C2),11,TRUE),""""),"""")" 'Column H
'                    ThisWorkbook.Sheets(NameSh).Range("I" & RowA_Cur & ":I" & RowA_Add).FormulaR1C1 = "=IFERROR(IF(VLOOKUP(RC[-3],INDIRECT(R7C2),1,TRUE)=RC[-3],VLOOKUP(RC[-3],INDIRECT(R7C2),2,TRUE),""""),"""")" 'Column I
'                    ThisWorkbook.Sheets(NameSh).Range("J" & RowA_Cur & ":J" & RowA_Add).FormulaR1C1 = "=IFERROR(IF(VLOOKUP(RC[-4],INDIRECT(R7C2),1,TRUE)=RC[-4],VLOOKUP(RC[-4],INDIRECT(R8C2),11,TRUE),""""),"""")" 'Column J
'
'                    ' ****** CHANGES STARTS HERE - NR ******
'
'                    ThisWorkbook.Sheets(NameSh).Range("L" & RowA_Cur & ":L" & RowA_Add).FormulaR1C1 = "=IF(INDIRECT(R10C2)=""Y"",ROW(INDIRECT(""Employee!$M""& ROW())),"""")"
'                    ThisWorkbook.Sheets(NameSh).Range("M" & RowA_Cur & ":M" & RowA_Add).FormulaR1C1 = "=IFERROR(SMALL(C12,Employee!RC[-12]),"""")"
'                    ThisWorkbook.Sheets(NameSh).Range("N" & RowA_Cur & ":N" & RowA_Add).FormulaR1C1 = "=IFERROR(INDEX(Employee!C2,Supervisor!RC13),"""")"
'                    ThisWorkbook.Sheets(NameSh).Range("O" & RowA_Cur & ":O" & RowA_Add).FormulaR1C1 = "=IFERROR(INDEX(Employee!C11,Supervisor!RC13)&"" (Crew Size ""& COUNTIF(Employee!C[-1],RC[-1]) &"")"","""")"
'
'                    ThisWorkbook.Sheets(NameSh).Range("Q" & RowA_Cur & ":Q" & RowA_Add).FormulaR1C1 = "=IF(INDIRECT(R10C2)="""",ROW(INDIRECT(""Employee!$L""& ROW())),"""")"
'                    ThisWorkbook.Sheets(NameSh).Range("R" & RowA_Cur & ":R" & RowA_Add).FormulaR1C1 = "=IFERROR(SMALL(C17,Employee!RC[-17]),"""")"
'                    ThisWorkbook.Sheets(NameSh).Range("S" & RowA_Cur & ":S" & RowA_Add).FormulaR1C1 = "=IFERROR(INDEX(Employee!C2,Supervisor!RC18),"""")"
'                    ThisWorkbook.Sheets(NameSh).Range("T" & RowA_Cur & ":T" & RowA_Add).FormulaR1C1 = "=IFERROR(INDEX(Employee!C11,Supervisor!RC18),"""")"
                
                    ' ****** CHANGES ENDS HERE - NR ******
                End If
                        
                If RowA_Add < RowA_Cur And RowA_Add > 1 Then
                    RowA_Del = sh.Range("A" & Rows.Count).End(xlUp).Row
                    sh.Rows(RowA_Add + 1 & ":" & RowA_Del + 1).Delete Shift:=xlUp
                    'sh.Cells(RowA_Add + 1, 8).Select
                        
                    ThisWorkbook.Sheets(NameSh).Range("C" & RowA_Add + 1 & ":T" & RowA_Del + 10).Clear 'Remove rows on Supervisor sheet
                End If
                
                'update named ranges
                Sheets("Employee").Range("A2:K" & RowA_Add + 1).name = "Employee_List"
                Sheets("Employee").Range("A2:K" & RowA_Add + 1).name = "LabSelect"
                Sheets("Employee").Range("K2:K" & RowA_Add + 1).name = "Labour"
                Sheets("Employee").Range("P2:P" & RowA_Add + 1).name = "LabourFull"

            End If
            Application.EnableEvents = True

        Case "SavedTS"

            Application.EnableEvents = False

            If Not Intersect(Target, Range("B:B")) Is Nothing Then
                r = RangeUpdate(sh.name)
            End If
            Application.EnableEvents = True

        Case "Services"

            Application.EnableEvents = False

            If Not Intersect(Target, sh.Range("B:B")) Is Nothing Then
                r = RangeUpdate(sh.name)
            End If
            Application.EnableEvents = True

        Case "Role"

            Application.EnableEvents = False

            If Not Intersect(Target, sh.Range("B:B")) Is Nothing Then
                r = RangeUpdate(sh.name)
                RowA_Add = r(0)
                RowA_Cur = r(1)
                
                If RowA_Add <> RowA_Cur Then
                    With sh
                        .Range("B2:B" & RowA_Add).name = "Role"
                    End With
                End If
            End If
            Application.EnableEvents = True

        Case "Category"

            Application.EnableEvents = False

            If Not Intersect(Target, sh.Range("B:B")) Is Nothing Then
                r = RangeUpdate(sh.name)
            End If
            Application.EnableEvents = True

        Case "Classification"

            Application.EnableEvents = False

            If Not Intersect(Target, sh.Range("B:B")) Is Nothing Then
                r = RangeUpdate(sh.name)
            End If
            
            Application.EnableEvents = True

        Case "Overtime"

            Application.EnableEvents = False

            If Not Intersect(Target, sh.Range("B:B")) Is Nothing Then
                r = RangeUpdate(sh.name)
            End If
            
            Application.EnableEvents = True

        Case "Shift"

            Application.EnableEvents = False

            If Not Intersect(Target, sh.Range("B:B")) Is Nothing Then
                r = RangeUpdate(sh.name)
                RowA_Add = r(0)
                RowA_Cur = r(1)
            
                If RowA_Add <> RowA_Cur Then
                    With sh
                        .Range("C2:C" & RowA_Add).name = "Shift"
                    End With
                End If
            
            End If
            Application.EnableEvents = True
        
        Case "Rate"

            Application.EnableEvents = False
            
            If Not Intersect(Target, sh.Range("B:B")) Is Nothing Then
                r = RangeUpdate(sh.name)
            End If
            
            Application.EnableEvents = True

        Case "Units"

            Application.EnableEvents = False

            If Not Intersect(Target, sh.Range("B:B")) Is Nothing Then
                r = RangeUpdate(sh.name)
            End If
            
            Application.EnableEvents = True

        Case "Allowances"

            Application.EnableEvents = False

            If Not Intersect(Target, sh.Range("B:B")) Is Nothing Then
                r = RangeUpdate(sh.name)

                RowA_Add = r(0)
                RowA_Cur = r(1)
                
            If RowA_Add <> RowA_Cur Then
                With sh
                    .Range("B2:B" & RowA_Add).name = "Allowance"
                    .Range("A2:B" & RowA_Add).name = "AllowSelect"
                    .Range("B2:C" & RowA_Add).name = "AllowUnits"
                End With
            End If
            
            End If
            Application.EnableEvents = True

        Case "Delays"

            Application.EnableEvents = False

            If Not Intersect(Target, sh.Range("B:B")) Is Nothing Then
                r = RangeUpdate(sh.name)

                RowA_Add = r(0)
                RowA_Cur = r(1)
                
                If RowA_Add <> RowA_Cur Then
                    With sh
                        .Range("B2:B" & RowA_Add).name = "Delay"
                    End With
                End If

            End If
            
            Application.EnableEvents = True
            
        Case "Location"

            Application.EnableEvents = False

            If Not Intersect(Target, sh.Range("B:B")) Is Nothing Then
                r = RangeUpdate(sh.name)

                RowA_Add = r(0)
                RowA_Cur = r(1)
                
                If RowA_Add <> RowA_Cur Then
                    With sh
                        .Range("C2:C" & RowA_Add).name = "Location"
                    End With
                End If
            
            End If
            
            Application.EnableEvents = True
            
        Case "Contract"

            Application.EnableEvents = False

            If Not Intersect(Target, sh.Range("B:B")) Is Nothing Then
                
                r = RangeUpdate(sh.name)

                RowA_Add = r(0)
                RowA_Cur = r(1)

                If RowA_Add <> RowA_Cur Then
                    With sh
                        .Range("C2:C" & RowA_Add).name = "Contract"
                    End With
                End If
            
            End If
            
            Application.EnableEvents = True
    
        Case "Agreement"
            
            Application.EnableEvents = False
                
            If Not Intersect(Target, sh.Range("B:B")) Is Nothing Then
                                
                r = RangeUpdate(sh.name)

                RowA_Add = r(0) 'sh.Range("B" & Rows.Count).End(xlUp).row
                RowA_Cur = r(1) 'sh.Range("A" & Rows.Count).End(xlUp).row
                       
                If RowA_Add <> RowA_Cur Then
                   With sh
                    .Range("A2:Q" & RowA_Add).name = "Master_Time"
                   End With
                End If
            
            End If
            
           Application.EnableEvents = True

        Case "Project"
            
            Application.EnableEvents = False
                
            If Not Intersect(Target, sh.Range("B:B")) Is Nothing Then
                                
                r = RangeUpdate(sh.name)
            
                RowA_Add = r(0)
                RowA_Cur = r(1)
                       
                If RowA_Add <> RowA_Cur Then
                   With sh
                    .Range("D" & RowA_Cur + 1 & ":D" & RowA_Add).FormulaR1C1 = "=TRIM(RC[-2]&""  ""&RC[-1])"
                    .Range("D2:D" & RowA_Add).name = "Project" 'Named Range for drop down selection on timesheet
                    .Range("B2:D" & RowA_Add).name = "Project_Full" 'Range for WO userform filter
                   End With
                End If
            
            End If
            
           Application.EnableEvents = True

        Case "Public"
            
            Application.EnableEvents = False
                
            If Not Intersect(Target, sh.Range("B:B")) Is Nothing Then
                                
                r = RangeUpdate(sh.name)
            
                RowA_Add = r(0)
                RowA_Cur = r(1)
                       
                If RowA_Add <> RowA_Cur Then
                   With sh
                    .Range("B2:C" & RowA_Add).name = "Public" 'Named Range for drop down selection on timesheet
                   End With
                End If
            
            End If
            
           Application.EnableEvents = True
           
        Case "Auto"
            
            Application.EnableEvents = False
                
            If Not Intersect(Target, sh.Range("B:B")) Is Nothing Then
                                
                r = RangeUpdate(sh.name)
            
                RowA_Add = r(0)
                RowA_Cur = r(1)
                       
                If RowA_Add <> RowA_Cur Then
                   With sh
                    .Range("A2:E" & RowA_Add).name = "Master_Auto" 'Named Range for drop down selection on timesheet
                   End With
                End If
            
            End If
            
        Case "Type"
            
            Application.EnableEvents = False
                
            If Not Intersect(Target, sh.Range("B:B")) Is Nothing Then
                                
                r = RangeUpdate(sh.name)
            
                RowA_Add = r(0)
                RowA_Cur = r(1)
                       
                If RowA_Add <> RowA_Cur Then
                   With sh
                    .Range("A2:C" & RowA_Add).name = "Master_Type" 'Named Range for drop down selection on timesheet
                    .Range("B2:B" & RowA_Add).name = "Type"
                   End With
                End If
            
            End If
            
           Application.EnableEvents = True

    End Select

End If

Application.EnableEvents = True
Application.ScreenUpdating = True

Exit Sub

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        Application.StatusBar = "Sub Workbook_SheetChange" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Function RangeUpdate(Sht As String) As Variant

Dim RowA_Add, RowA_Cur As Integer

    RowA_Add = ThisWorkbook.Sheets(Sht).Range("B" & Rows.Count).End(xlUp).Row
    RowA_Cur = ThisWorkbook.Sheets(Sht).Range("A" & Rows.Count).End(xlUp).Row
    ThisWorkbook.Sheets(Sht).Cells(2, 1) = 1
                
    If RowA_Add > RowA_Cur Then
        With ThisWorkbook.Sheets(Sht).Range("A" & RowA_Cur + 1 & ":A" & RowA_Add) 'Column A Add additional UID Rows
            .FormulaR1C1 = "=R[-1]C+1"
            .Value = .Value
        End With
    End If
                
    If RowA_Add < RowA_Cur And RowA_Add > 1 Then
        RowA_Del = ThisWorkbook.Sheets(Sht).Range("A" & Rows.Count).End(xlUp).Row
        ThisWorkbook.Sheets(Sht).Rows(RowA_Add + 1 & ":" & RowA_Del + 1).Delete Shift:=xlUp
        ThisWorkbook.Sheets(Sht).Cells(RowA_Add + 1, 2).Select
    End If

RangeUpdate = Array(RowA_Add, RowA_Cur)

End Function

Sub SuperUpdate(NameSh As String, RowA_Add, RowA_Cur)
          
'Update Supervisor Sheet
    ThisWorkbook.Sheets(NameSh).Range("C" & RowA_Cur & ":C" & RowA_Add).FormulaR1C1 = "=IF(ISNUMBER(SEARCH(R2C1,Employee!RC[11],1)),Employee!RC[-2],"""")" 'Supervisor sheet Column C (Map Assigned)
    ThisWorkbook.Sheets(NameSh).Range("D" & RowA_Cur & ":D" & RowA_Add).FormulaR1C1 = "=IF(OR(ISNUMBER(SEARCH(R2C1,Employee!RC[10],1)),Employee!RC[10]<>""""),"""",Employee!RC[-3])" 'Column D (Map Unassigned)
    ThisWorkbook.Sheets(NameSh).Range("E" & RowA_Cur & ":E" & RowA_Add).FormulaR1C1 = "=IFERROR(SMALL(INDIRECT(R5C2),Employee!RC[-4]),"""")" 'Column E
    ThisWorkbook.Sheets(NameSh).Range("F" & RowA_Cur & ":F" & RowA_Add).FormulaR1C1 = "=IFERROR(SMALL(INDIRECT(R6C2),Employee!RC[-5]),"""")" 'Column F
    ThisWorkbook.Sheets(NameSh).Range("G" & RowA_Cur & ":G" & RowA_Add).FormulaR1C1 = "=IFERROR(IF(VLOOKUP(RC[-2],INDIRECT(R7C2),1,TRUE)=RC[-2],VLOOKUP(RC[-2],INDIRECT(R7C2),2,TRUE),""""),"""")" 'Column G
    ThisWorkbook.Sheets(NameSh).Range("H" & RowA_Cur & ":H" & RowA_Add).FormulaR1C1 = "=IFERROR(IF(VLOOKUP(RC[-3],INDIRECT(R7C2),1,TRUE)=RC[-3],VLOOKUP(RC[-3],INDIRECT(R8C2),11,TRUE),""""),"""")" 'Column H
    ThisWorkbook.Sheets(NameSh).Range("I" & RowA_Cur & ":I" & RowA_Add).FormulaR1C1 = "=IFERROR(IF(VLOOKUP(RC[-3],INDIRECT(R7C2),1,TRUE)=RC[-3],VLOOKUP(RC[-3],INDIRECT(R7C2),2,TRUE),""""),"""")" 'Column I
    ThisWorkbook.Sheets(NameSh).Range("J" & RowA_Cur & ":J" & RowA_Add).FormulaR1C1 = "=IFERROR(IF(VLOOKUP(RC[-4],INDIRECT(R7C2),1,TRUE)=RC[-4],VLOOKUP(RC[-4],INDIRECT(R8C2),11,TRUE),""""),"""")" 'Column J

    ' ****** CHANGES STARTS HERE - NR ******

    ThisWorkbook.Sheets(NameSh).Range("L" & RowA_Cur & ":L" & RowA_Add).FormulaR1C1 = "=IF(INDIRECT(R10C2)=""Y"",ROW(INDIRECT(""Employee!$M""& ROW())),"""")"
    ThisWorkbook.Sheets(NameSh).Range("M" & RowA_Cur & ":M" & RowA_Add).FormulaR1C1 = "=IFERROR(SMALL(C12,Employee!RC[-12]),"""")"
    ThisWorkbook.Sheets(NameSh).Range("N" & RowA_Cur & ":N" & RowA_Add).FormulaR1C1 = "=IFERROR(INDEX(Employee!C2,Supervisor!RC13),"""")"
    ThisWorkbook.Sheets(NameSh).Range("O" & RowA_Cur & ":O" & RowA_Add).FormulaR1C1 = "=IFERROR(INDEX(Employee!C11,Supervisor!RC13)&"" (Crew Size ""& COUNTIF(Employee!C[-1],RC[-1]) &"")"","""")"

    ThisWorkbook.Sheets(NameSh).Range("Q" & RowA_Cur & ":Q" & RowA_Add).FormulaR1C1 = "=IF(INDIRECT(R10C2)="""",ROW(INDIRECT(""Employee!$L""& ROW())),"""")"
    ThisWorkbook.Sheets(NameSh).Range("R" & RowA_Cur & ":R" & RowA_Add).FormulaR1C1 = "=IFERROR(SMALL(C17,Employee!RC[-17]),"""")"
    ThisWorkbook.Sheets(NameSh).Range("S" & RowA_Cur & ":S" & RowA_Add).FormulaR1C1 = "=IFERROR(INDEX(Employee!C2,Supervisor!RC18),"""")"
    ThisWorkbook.Sheets(NameSh).Range("T" & RowA_Cur & ":T" & RowA_Add).FormulaR1C1 = "=IFERROR(INDEX(Employee!C11,Supervisor!RC18),"""")"
    
    ' ****** CHANGES ENDS HERE - NR ******

End Sub
Attribute VB_Name = "TimeTemplate"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "TimeTemplate1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "TimeTemplate2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "TimeTemplate3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "TimeTemplate4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "TimeTemplate5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "TimeTemplate6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "TimeTemplate7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "TimesheetManager"
Sub ActionSaveTS()

On Error GoTo SafeExit

InputBox:
    defaulttxt = Sheets("TimeTemplate").Cells(8, 5) 'if file has been previously saved, name will exist in this range
    sheetname = InputBox("What would you like to name your Timesheet?", "Save as...", defaulttxt)
    RowCount = Sheets("SavedTS").Range("A" & Rows.Count).End(xlUp).Row

    For i = 1 To RowCount 'check for duplicates
        If sheetname = "" Then
            MsgBox "Operation Cancelled."
            Exit Sub
        ElseIf sheetname = Sheets("SavedTS").Cells(i, 2) Then
            MsgBox "Timesheet name " & sheetname & " has already been taken, please enter a unique name."
            GoTo InputBox
        End If
    Next i
    
    
    If sheetname <> "" Then
        With Sheets("TimeTemplate") 'write sheetname into sheet to save for future reference
            .Unprotect
            .Cells(8, 5) = sheetname
            .Protect DrawingObjects:=True, Contents:=True, Scenarios:=True
            .name = sheetname 'name sheet
        End With
        
        Sheets(sheetname).Visible = xlHidden
        Call NewTS 'create new TS template
        ActiveSheet.name = "TimeTemplate"
    Else 'input box is blank or user exits
        MsgBox "Operation Cancelled"
        Exit Sub
    End If

    DataCount = Sheets("SavedTS").Range("A" & Rows.Count).End(xlUp).Row
    x = DataCount + 1

    Application.EnableEvents = True

    With Sheets("SavedTS")
        .Cells(x, 1).FormulaR1C1 = "=R[-1]C+1" 'UID
        '.Cells(x, 1).Value
        .Cells(x, 2) = sheetname 'name
        .Cells(x, 3) = Sheets(sheetname).Range("E2") 'Project
        .Cells(x, 4) = Sheets(sheetname).Range("E3") 'Supervisor
        .Cells(x, 5) = Sheets(sheetname).Range("E4").Value 'Date
        .Cells(x, 6) = Sheets(sheetname).Range("E5") 'Shift
        .Cells(x, 7) = Now()
    End With

    RowCount = Sheets("SavedTS").Range("A" & Rows.Count).End(xlUp).Row
    Sheets("SavedTS").Range("B2:G" & RowCount + 1).name = "SavedTimesheets"

SafeExit:
        Application.EnableEvents = True
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub

Sub DeleteTS(list)

On Error GoTo SafeExit

    Dim sheetname As String

    Application.EnableEvents = False
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False

    Row = 2
    If MsgBox("Are you sure you want to delete the selected Timesheet?", vbOKCancel, "Confirm Delete") = vbOK Then
        RowCount = Sheets("SavedTS").Range("A" & Rows.Count).End(xlUp).Row
        sheetname = list.Value
        Do Until Sheets("SavedTS").Cells(Row, 2) = list.Value Or _
             Sheets("SavedTS").Cells(Row, 1) = RowCount
            Row = Row + 1
        Loop
    Else
        MsgBox "Operation Cancelled."
        Exit Sub
    End If

    Sheets("SavedTS").Rows(Row).Delete
    ThisWorkbook.Sheets(sheetname).Delete

    RowCount = Sheets("SavedTS").Range("A" & Rows.Count).End(xlUp).Row
    Sheets("SavedTS").Range("B2:G" & RowCount + 1).name = "SavedTimesheets"
    list.RowSource = "SavedTimesheets"

SafeExit:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    On Error GoTo 0
    
End Sub

Sub SaveTS(control As IRibbonControl)

On Error GoTo SafeExit
    
    Call ActionSaveTS
    
SafeExit:
        On Error GoTo 0

End Sub
Sub NewTS()

On Error GoTo SafeExit

    With Sheets("MasterTimeTemplate")
        .Visible = xlSheetVisible
        .Copy After:=Sheets("MasterTimeTemplate")
        .Visible = xlHidden
    End With

SafeExit:
        On Error GoTo 0

End Sub
Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{AFE9F65C-0E38-4352-AE04-D4E4A5C4D5EC}{4036D743-6D61-4E8C-9377-10E15A1C208E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub Checker()

On Error GoTo SafeExit

    'If CheckBox1.Value = True Then
    If ThisWorkbook.Names("DataRel").RefersToRange(1, 1) = True Then
        'CheckBox1.Caption = "Type (1)"
        'Label13.Caption = "Data Relationship - Type (1)" & vbCrLf & "Many Internal Work Orders to One External Work Order"
        MultiPage1.Pages(3).Visible = False
        MultiPage1.Pages(4).Visible = True
        MultiPage1.Value = 4
    Else
        'CheckBox1.Caption = "Type (0)"
        'Label13.Caption = "Data Relationship - Type (0)" & vbCrLf & "One Internal Work Order to Many External Work Orders"
        MultiPage1.Pages(3).Visible = True
        MultiPage1.Pages(4).Visible = False
        MultiPage1.Value = 3
    End If
    
Exit Sub

SafeExit:
        Application.StatusBar = "Sub CheckBox1_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0
    
End Sub

Private Sub ListBox20_Changes()
'On Error GoTo SafeExit
'
'If MultiPage1.Value = 3 Then ListBox9.SetFocus
'
'Exit Sub
'
'SafeExit:
'        Application.StatusBar = "Sub CheckBox2_Click" & ", " & Err.Number & ", " & Err.Description
'        On Error GoTo 0

End Sub

Private Sub ComboMap1_Changes()
'On Error GoTo SafeExit
'
'    If MultiPage1.Value = 2 Then ListMap1.SetFocus
'
'Exit Sub
'
'SafeExit:
'        Application.StatusBar = "Sub ComboMap1_Change" & ", " & Err.Number & ", " & Err.Description
'        On Error GoTo 0

End Sub
Private Sub ListBox10_Changes()
'On Error GoTo SafeExit

'    If MultiPage1.Value = 3 Then ListBox8.SetFocus

'Exit Sub

'SafeExit:
'        Application.StatusBar = "Sub ListBox10_Change" & ", " & Err.Number & ", " & Err.Description
'        On Error GoTo 0
End Sub

Private Sub ComboMap1_Enter()
LabelSel.Caption = "ComboMap1"
End Sub

Private Sub ImportButton1_Click()
MasterCusMapImp
End Sub

Private Sub ExportButton1_Click()
MasterCusMapExp
End Sub

Private Sub ImportButton2_Click()
MasterIntMapImp
End Sub

Private Sub ExportButton2_Click()
MasterIntMapExp
End Sub

Private Sub ListMap1_Enter()
LabelSel.Caption = "ListMap1"
End Sub
Private Sub ListMap2_Enter()
LabelSel.Caption = "ListMap2"
End Sub

Private Sub ComboMap1_Change()
On Error GoTo SafeExit
    
    Dim OrdMap As Variant
    Dim OrdNoMap As Variant

    OrdMap = OrdCusWO(ComboMap1.Value)
    OrdNoMap = OrdNoCusWO
        
    If Not IsEmpty(OrdMap) Then
        ListMap1.list = OrdMap
        If ListMap1.ListCount > 0 Then ListMap1.RemoveItem ListMap1.ListCount - 1
    Else
        ListMap1.Clear
    End If
    
    If Not IsEmpty(OrdNoMap) Then
        ListMap2.list = OrdNoMap
        If ListMap2.ListCount > 0 Then ListMap2.RemoveItem ListMap2.ListCount - 1
    Else
        ListMap2.Clear
    End If

Exit Sub

SafeExit:
        Application.StatusBar = "Sub ComboMap1_Change" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Private Sub ListBox10_Change()
   
On Error GoTo SafeExit
   
    Dim OrdMap As Variant
    Dim OrdNoMap As Variant

    OrdMap = OrdIntWO(ListBox10.Value)
    OrdNoMap = OrdNoIntWO

    If Not IsEmpty(OrdMap) Then
        ListBox8.list = OrdMap
        If ListBox8.ListCount > 0 Then ListBox8.RemoveItem ListBox8.ListCount - 1
    Else
        ListBox8.Clear
    End If
    
    If Not IsEmpty(OrdNoMap) Then
        ListBox7.list = OrdNoMap
        If ListBox7.ListCount > 0 Then ListBox7.RemoveItem ListBox7.ListCount - 1
    Else
        ListBox7.Clear
    End If

Exit Sub

SafeExit:
        Application.StatusBar = "Sub ListBox10_Change" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub
Private Sub ListBox20_Change()

On Error GoTo SafeExit

    Dim OrdMap2 As Variant
    Dim OrdNoMap2 As Variant

    OrdMap2 = OrdIntPO(ListBox20.Value)
    OrdNoMap2 = OrdNoIntPO
        
    If Not IsEmpty(OrdMap2) Then
        ListBox9.list = OrdMap2
        If ListBox9.ListCount > 0 Then ListBox9.RemoveItem ListBox9.ListCount - 1
    Else
        ListBox9.Clear
    End If
    
    If Not IsEmpty(OrdNoMap2) Then
        ListBox7.list = OrdNoMap2
        If ListBox7.ListCount > 0 Then ListBox7.RemoveItem ListBox7.ListCount - 1
    Else
        ListBox7.Clear
    End If

Exit Sub

SafeExit:
        Application.StatusBar = "Sub ListBox20_Change" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Private Sub EditOrder_Click()

On Error GoTo SafeExit

    If ListBox4.ListIndex = -1 Or TextBox3 = Empty Then
        MsgBox ("Please Select a Record")
    Else
        If TextBox3.Enabled = False Or TextBox4.Enabled = False Then
            TextBox3.Enabled = True
            TextBox4.Enabled = True
        Else
            TextBox3.Enabled = False
            TextBox4.Enabled = False
        End If
    End If
    
Exit Sub

SafeExit:
        Application.StatusBar = "Sub EditOrder_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Private Sub EditPO_Click()

On Error GoTo SafeExit

    If ListBox6.ListIndex = -1 Or TextBox7 = Empty Then
        MsgBox ("Please Select a Record")
    Else
        If TextBox7.Enabled = False Or TextBox8.Enabled = False Then
            TextBox7.Enabled = True
            TextBox8.Enabled = True
        Else
            TextBox7.Enabled = False
            TextBox8.Enabled = False
        End If
    End If
    
Exit Sub

SafeExit:
        Application.StatusBar = "Sub EditOrder_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0
End Sub

Private Sub ListBox5_Click()

On Error GoTo SafeExit

Dim i, Row, RowCount As Integer
Dim Act As Variant

    RowCount = Sheets("DataInternalActivity").Range("A" & Rows.Count).End(xlUp).Row
    Act = Sheets("DataInternalActivity").Range("B2:C" & RowCount)
    
    If TextBox5.Enabled = True Then TextBox5.Enabled = False
    If TextBox6.Enabled = True Then TextBox6.Enabled = False
    
    For i = 1 To UBound(Act, 1)
             
        If Act(i, 1) & Act(i, 2) = _
            ListBox3.Value & ListBox5.Value Then
           'ListBox3.list(ListBox5.ListIndex, 0) & ListBox5.list(ListBox5.ListIndex, 0) Then
           
           Exit For
        
        End If

    Next i
    
    Row = i + 1
    
    'i = ListBox3.list(ListBox3.ListIndex, 0)
    'Row = Application.WorksheetFunction.Match(i, Sheets("DataInternalOrder").Range("B:B"), 0)

    TextBox5.ControlSource = "DataInternalActivity!C" & Row
    TextBox6.ControlSource = "DataInternalActivity!D" & Row
    'Range("MapCheck").Value = TextBox1.Value
    'Sheets("DataInternalActivity").Cells(2, 6) = TextBox1.Value

Exit Sub

SafeExit:
        Application.StatusBar = "Sub ListBox5_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Private Sub ListBox6_Click()

On Error GoTo SafeExit

Dim i, Row, RowCount As Integer

    'If TextBox7.Enabled = True Then TextBox7.Enabled = False
    'If TextBox8.Enabled = True Then TextBox8.Enabled = False

    Row = 1

    RowCount = Sheets("DataCustomerPO").Range("A" & Rows.Count).End(xlUp).Row
    
    For i = 0 To ListBox6.ListCount - 1
        If ListBox6.Selected(i) = True Then
            ListIndex = i + 1
        End If
    Next i
    
    Do Until Sheets("DataCustomerPO").Cells(Row, 1) = ListIndex Or _
         Sheets("DataCustomerPO").Cells(Row, 1) = RowCount - 1

        Row = Row + 1

    Loop

    TextBox7.ControlSource = "DataCustomerPO!B" & Row
    TextBox8.ControlSource = "DataCustomerPO!C" & Row
   
Exit Sub

SafeExit:
        Application.StatusBar = "Sub ListBox6_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0
   
End Sub

Private Sub ListBox7_Enter()
CtrlLabel.Caption = "ListBox7"
End Sub

Private Sub ListBox8_Enter()
On Error GoTo SafeExit

ListBox10_Change
SelectLabel.Caption = "WO"
CtrlLabel.Caption = "ListBox8"
KeyAL.Visible = True
KeyUL.Visible = True
KeyAR.Visible = False
KeyUR.Visible = False

Exit Sub

SafeExit:
        Application.StatusBar = "Sub ListBox8_Enter" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0
End Sub
Private Sub ListBox10_Enter()

On Error GoTo SafeExit

ListBox10_Change
SelectLabel.Caption = "WO"
CtrlLabel.Caption = "ListBox10"
KeyAL.Visible = True
KeyUL.Visible = True
KeyAR.Visible = False
KeyUR.Visible = False

Exit Sub

SafeExit:
        Application.StatusBar = "Sub ListBox10_Enter" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub
Private Sub ListBox9_Enter()

On Error GoTo SafeExit

ListBox20_Change
SelectLabel.Caption = "PO"
CtrlLabel.Caption = "ListBox9"
KeyAL.Visible = False
KeyUL.Visible = False
KeyAR.Visible = True
KeyUR.Visible = True

Exit Sub

SafeExit:
        Application.StatusBar = "Sub ListBox9_Enter" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub
Private Sub ListBox20_Enter()

On Error GoTo SafeExit

ListBox20_Change
SelectLabel.Caption = "PO"
CtrlLabel.Caption = "ListBox20"
KeyAL.Visible = False
KeyUL.Visible = False
KeyAR.Visible = True
KeyUR.Visible = True

Exit Sub

SafeExit:
        Application.StatusBar = "Sub ListBox20_Enter" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Private Sub MapOrder1_Click()
    
On Error GoTo SafeExit
    
    Dim i, j, ListNo, RowCount As Integer
    Dim Map1 As Variant
    Dim Map2 As Variant
        
    RowCount = Sheets("DataCustomerOrder").Range("B" & Rows.Count).End(xlUp).Row
    Map1 = ThisWorkbook.Sheets("DataCustomerOrder").Range("B2:C" & RowCount)
    Map2 = ThisWorkbook.Sheets("DataCustomerOrder").Range("E2:F" & RowCount)
    ListNo = ListMap1.ListCount - 1
   
    For i = 0 To ListNo
        If ListMap1.Selected(i) = True Then
            For j = 1 To UBound(Map1, 1)
                If ListMap1.list(i) = Map1(j, 1) Then Map2(j, 1) = vbNullString 'Value to assign to customer mapping
            Next j
        End If
    Next i

    Sheets("DataCustomerOrder").Range("E2:E" & RowCount) = Map2
    ComboMap1_Change

Exit Sub

SafeExit:
        Application.StatusBar = "Sub MapOrder1_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Private Sub MapOrder2_Click()

On Error GoTo SafeExit

    Dim i, j, ListNo, RowCount As Integer
    Dim Map1 As Variant
    Dim Map2 As Variant
    Dim val As String
    
    RowCount = Sheets("DataCustomerOrder").Range("B" & Rows.Count).End(xlUp).Row
    Map1 = ThisWorkbook.Sheets("DataCustomerOrder").Range("B2:C" & RowCount)
    Map2 = ThisWorkbook.Sheets("DataCustomerOrder").Range("E2:F" & RowCount)
    ListNo = ListMap2.ListCount - 1
    val = ComboMap1.Value
    
    For i = 0 To ListNo
        If ListMap2.Selected(i) = True Then
            For j = 1 To UBound(Map1, 1)
                If ListMap2.list(i) = Map1(j, 1) Then Map2(j, 1) = val 'Value to assign to customer mapping
            Next j
        End If
    Next i
     
    Sheets("DataCustomerOrder").Range("E2:E" & RowCount) = Map2
    ComboMap1_Change

Exit Sub

SafeExit:
        Application.StatusBar = "Sub MapOrder2_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub
Private Sub MapOrderExt1_Click()

On Error GoTo SafeExit

    Dim i, j, ListNo, RowCount As Integer
    Dim Map1 As Variant
    Dim Map2 As Variant
    Dim MapSh As String
    Dim Box As ListBox
        
    RowCount = Sheets("DataInternalOrder").Range("B" & Rows.Count).End(xlUp).Row
    Map1 = ThisWorkbook.Sheets("DataInternalOrder").Range("B2:C" & RowCount)
    If SelectLabel.Caption = "WO" Then
        Map2 = ThisWorkbook.Sheets("DataInternalOrder").Range("G2:H" & RowCount)
        MapSh = "G2:G"
    Else
        Map2 = ThisWorkbook.Sheets("DataInternalOrder").Range("H2:I" & RowCount)
        MapSh = "H2:H"
    End If
    
    If SelectLabel.Caption = "WO" Then
    ListNo = ListBox8.ListCount - 1
        For i = 0 To ListNo
            If ListBox8.Selected(i) = True Then
                For j = 1 To UBound(Map1, 1)
                    If ListBox8.list(i) = Map1(j, 1) Then Map2(j, 1) = vbNullString
                Next j
    
            End If
        Next i
    
    ThisWorkbook.Sheets("DataInternalOrder").Range(MapSh & RowCount) = Map2
    ListBox10_Change
    
    Else
    ListNo = ListBox9.ListCount - 1
        For i = 0 To ListNo
            If ListBox9.Selected(i) = True Then
                For j = 1 To UBound(Map1, 1)
                    If ListBox9.list(i) = Map1(j, 1) Then Map2(j, 1) = vbNullString
                Next j
    
            End If
        Next i
   
    ThisWorkbook.Sheets("DataInternalOrder").Range(MapSh & RowCount) = Map2
    ListBox20_Change
    End If

Exit Sub

SafeExit:
        Application.StatusBar = "Sub MapOrderExt1_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0
End Sub

Private Sub MapOrderExt2_Click()

On Error GoTo SafeExit

    Dim i, j, ListNo, RowCount As Integer
    Dim Map1 As Variant
    Dim Map2 As Variant
    Dim val As String
    Dim MapSh As String
        
    RowCount = Sheets("DataInternalOrder").Range("B" & Rows.Count).End(xlUp).Row
    Map1 = ThisWorkbook.Sheets("DataInternalOrder").Range("B2:C" & RowCount)
    If SelectLabel.Caption = "WO" Then
        Map2 = ThisWorkbook.Sheets("DataInternalOrder").Range("G2:H" & RowCount)
        MapSh = "G2:G"
        val = ListBox10.Value
    Else
        Map2 = ThisWorkbook.Sheets("DataInternalOrder").Range("H2:I" & RowCount)
        MapSh = "H2:H"
        val = ListBox20.Value
    End If
    ListNo = ListBox7.ListCount - 1

    For i = 0 To ListNo
        If ListBox7.Selected(i) = True Then
            For j = 1 To UBound(Map1, 1)
                If ListBox7.list(i) = Map1(j, 1) Then Map2(j, 1) = val
            Next j

        End If
    Next i
    
    ThisWorkbook.Sheets("DataInternalOrder").Range(MapSh & RowCount) = Map2
    If SelectLabel.Caption = "WO" Then
    ListBox10_Change
    Else
    ListBox20_Change
    End If

Exit Sub

SafeExit:
        Application.StatusBar = "Sub MapOrderExt2_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0
End Sub
Private Sub MultiPage1_Change()
    
On Error GoTo SafeExit
    
    Dim Row, Row2 As Integer

    Select Case MultiPage1.Value

        Case 11
            ListBox4.Selected(0) = True
            RowCount = Sheets("DataCustomerOrder").Range("A" & Rows.Count).End(xlUp).Row
            ListBox4.RowSource = "DataCustomerOrder!B2:C" & RowCount
        
        Case 21

            Row = Application.WorksheetFunction.Count(Sheets("DataCustomerOrder").Range("J:J")) + 1 'count assigned orders
            Row2 = Application.WorksheetFunction.Count(Sheets("DataCustomerOrder").Range("K:K")) + 1 'count unassigned orders
            RowCount = Sheets("DataInternalOrder").Range("A" & Rows.Count).End(xlUp).Row

            Do Until Len(Sheets("DataCustomerOrder").Cells(Row, 12).Value) = 0 'determines how many orders in the column
                Row = Row + 1
            Loop

            Do Until Len(Sheets("DataCustomerOrder").Cells(Row2, 14).Value) = 0
                Row2 = Row2 + 1
            Loop
           
            If Row <> 2 Then
                Sheets("DataCustomerOrder").Range("L2:M" & Row - 1).name = "OrderMap" 'Adjusts the range to number of orders in column
                ListMap1.RowSource = "DataCustomerOrder!L2:M" & Row - 1
            Else
                ListMap1.RowSource = ""
            End If

            If Row2 <> 2 Then
                Sheets("DataCustomerOrder").Range("N2:O" & Row2 - 1).name = "OrderNoMap"
                ListMap2.RowSource = "DataCustomerOrder!N2:O" & Row2 - 1
            Else
                ListMap2.RowSource = ""
            End If

            Checker

            ComboMap1.RowSource = "WO_Internal"
            Sheets("DataInternalOrder").Range("B2:C" & RowCount).name = "WO_Internal"  ' CHANGE - NR remove -1
            Sheets("DataInternalOrder").Range("C2:C" & RowCount).name = "WO_Full"
            
        Case 31

            Row = Application.WorksheetFunction.Count(Sheets("DataInternalOrder").Range("M:M")) + 1 'count assigned orders
            Row2 = Application.WorksheetFunction.Count(Sheets("DataInternalOrder").Range("N:N")) + 1 'count unassigned orders
            RowCount = Sheets("DataCustomerOrder").Range("A" & Rows.Count).End(xlUp).Row

            Do Until Len(Sheets("DataInternalOrder").Cells(Row, 15).Value) = 0 'determines how many orders in the column
                Row = Row + 1
            Loop

            Do Until Len(Sheets("DataInternalOrder").Cells(Row2, 17).Value) = 0
                Row2 = Row2 + 1
            Loop
           
            If Row <> 2 Then
                Sheets("DataInternalOrder").Range("O2:P" & Row - 1).name = "OrderMapWO" 'Adjusts the range to number of orders in column
                ListBox8.RowSource = "DataInternalOrder!O2:P" & Row - 1
            Else
                ListBox8.RowSource = ""
            End If

            If Row2 <> 2 Then
                Sheets("DataCustomerOrder").Range("Q2:R" & Row2 - 1).name = "OrderNoMapWO"
                ListBox7.RowSource = "DataInternalOrder!Q2:R" & Row2 - 1
            Else
                ListBox7.RowSource = ""
            End If

            Checker

            ListBox10.RowSource = "WO_Customer_Long"
            Sheets("DataCustomerOrder").Range("B2:C" & RowCount).name = "WO_Customer_Long"  ' CHANGE - NR remove -1
            Sheets("DataCustomerOrder").Range("C2:C" & RowCount).name = "WO_Full_Ext"
            
    End Select

Exit Sub

SafeExit:
        Application.StatusBar = "Sub MultiPage1_Change" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0
End Sub

Private Sub OrderSwitch_Click()
If TimeTemplate.Visible = False Then TimeTemplate.Visible = True
TimeTemplate.Activate
ChkOrder
LabelSwitch.Caption = "Primary Cost Object: " & TimeTemplate.Range("A10").Value
Checker
End Sub

Private Sub SearchButton3_Click()
On Error GoTo SafeExit

    Dim i, j As Integer
    Dim k, l As Integer
    Dim m As Variant
    Dim Arr() As Variant
    Dim ListName As String

    Select Case MultiPage1.Value
    
        Case 0
        ListName = "ListBox3"
    
        Case 1
        ListName = "ListBox4"
    
        Case 2
        ListName = "ListBox6"
    
        Case 3
        ListName = LabelSel.Caption
        
        Case 4
        ListName = CtrlLabel.Caption
    
    End Select

If UserForm1.TextSearch3.Text <> vbullstring Then
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    l = 0
    m = CInt(UserForm1.FindCount.Caption)
                    
    With UserForm1.Controls(ListName)
        .MultiSelect = fmMultiSelectSingle
        .ListIndex = -1
    
    ReDim Arr(1, .ListCount - 1)
        
        For i = 0 To .ListCount - 1
            k = 0
            
            For j = 0 To .ColumnCount - 1
                If InStr(1, .Column(j, i), UserForm1.TextSearch3.Text, vbTextCompare) Then
                    k = k + 1
                    .ListIndex = i
                End If
            Next j
        
        If k > 0 Then
            ReDim Preserve Arr(1, l)
            Arr(1, l) = i
            l = l + 1
        End If
        
        If l = 50 Then Exit For
        
        Next i
    
    If l > 0 And m <= l - 1 Then
        .ListIndex = Arr(1, m)
        m = m + 1
        UserForm1.FindCount.Caption = m
    End If
    
    End With
    
    UserForm1.SearchLabel3.Caption = "Found " & IIf(l = 50, ">50", l) & " items. Selected item " & m & " of " & l
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End If

Exit Sub

SafeExit:
        Application.ScreenUpdating = True
        On Error GoTo 0

End Sub
Private Sub ClearButton3_Click()
On Error GoTo SafeExit
    
     Select Case MultiPage1.Value
    
        Case 0
        ListName = "ListBox3"
    
        Case 1
        ListName = "ListBox4"
    
        Case 2
        ListName = "ListBox6"
    
        Case 3
        ListName = LabelSel.Caption
        
        Case 4
        ListName = CtrlLabel.Caption
    
    End Select
    
    UserForm1.TextSearch3.Text = ClearContents
    UserForm1.Controls(ListName).MultiSelect = fmMultiSelectSingle
    UserForm1.Controls(ListName).ListIndex = -1
    UserForm1.SearchLabel3.Caption = Empty
    UserForm1.FindCount.Caption = 0

Exit Sub

SafeExit:
        On Error GoTo 0
End Sub

Private Sub TextBox3_AfterUpdate()
    
On Error GoTo SafeExit
    
    Dim RowNo, RowCount As Integer
       
    RowNo = ListBox4.ListIndex + 2
    RowCount = Sheets("DataCustomerOrder").Range("B" & Rows.Count).End(xlUp).Row
    
    If RowCount = RowNo Then
        TextBox3.ControlSource = "DataCustomerOrder!B" & RowCount
        TextBox4.ControlSource = "DataCustomerOrder!C" & RowCount
    End If
    
Exit Sub

SafeExit:
        Application.StatusBar = "Sub TextBox3_AfterUpdate" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0
End Sub

Private Sub TextBox5_AfterUpdate()

On Error GoTo SafeExit

Dim Arr As Variant
       
    Arr = OrdAct(ListBox3.Value)
    ListBox5.list = Arr
    If ListBox5.ListCount > 0 Then ListBox5.RemoveItem ListBox5.ListCount - 1

Exit Sub

SafeExit:
        Application.StatusBar = "Sub TextBox5_AfterUpdate" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Private Sub TextBox6_Afterupdate()

On Error GoTo SafeExit

Arr = OrdAct(ListBox3.Value)

ListBox5.list = Arr
If ListBox5.ListCount > 0 Then ListBox5.RemoveItem ListBox5.ListCount - 1

Exit Sub

SafeExit:
        Application.StatusBar = "Sub TextBox6_Afterupdate" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Private Sub TextBox7_Afterupdate()

On Error GoTo SafeExit

Dim RowNo, RowCount As Integer
       
    RowNo = ListBox6.ListIndex + 2
    RowCount = Sheets("DataCustomerPO").Range("B" & Rows.Count).End(xlUp).Row
    
    If RowCount = RowNo Then
        TextBox7.ControlSource = "DataCustomerPO!B" & RowCount
        TextBox8.ControlSource = "DataCustomerPO!C" & RowCount
    End If

Exit Sub

SafeExit:
        Application.StatusBar = "Sub TextBox7_Afterupdate" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Private Sub UserForm_Initialize()

On Error GoTo SafeExit
    Dim RowCount As Integer
    
    ButtonAll_Click
    
    MultiPage1.Value = 0
    ListBox3.Selected(0) = True
    
    If ThisWorkbook.Names("DataRel").RefersToRange(1, 1) = True Then
        'CheckBox1.Caption = "Type (1)"
        'Label13.Caption = "Data Relationship - Type (1)" & vbCrLf & "Many Internal Work Orders to One External Work Order"
        MultiPage1.Pages(3).Visible = False
        MultiPage1.Pages(4).Visible = True
    Else
        'CheckBox1.Caption = "Type (0)"
        'Label13.Caption = "Data Relationship - Type (0)" & vbCrLf & "One Internal Work Order to Many External Work Orders"
        MultiPage1.Pages(3).Visible = True
        MultiPage1.Pages(4).Visible = False
    End If
    
    If Left(ThisWorkbook.Sheets("Summary").Cells(1, 15), 5) = "Admin" Then
        OrderSwitch.Visible = True
        LabelSwitch.Visible = True
    Else
        OrderSwitch.Visible = False
        LabelSwitch.Visible = False
    End If
    
    'RowCount = Sheets("DataInternalOrder").Range("A" & Rows.Count).End(xlUp).Row
    'Sheets("DataInternalOrder").Range("B2:C" & RowCount).Name = "WO_Internal"
    'ListBox3.RowSource = "WO_Internal"

Exit Sub

SafeExit:
        Application.StatusBar = "Sub UserForm_Initialize" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Private Sub ListBox4_Click()
    
On Error GoTo SafeExit
    
    Dim i, Row, RowCount As Integer

    'If TextBox3.Enabled = True Then TextBox3.Enabled = False
    'If TextBox4.Enabled = True Then TextBox4.Enabled = False

    Row = 1

    RowCount = Sheets("DataCustomerOrder").Range("A" & Rows.Count).End(xlUp).Row
    
    For i = 0 To ListBox4.ListCount - 1
        If ListBox4.Selected(i) = True Then
            ListIndex = i + 1
        End If
    Next i
    
    Do Until Sheets("DataCustomerOrder").Cells(Row, 1) = ListIndex Or _
         Sheets("DataCustomerOrder").Cells(Row, 1) = RowCount - 1

        Row = Row + 1

    Loop

    TextBox3.ControlSource = "DataCustomerOrder!B" & Row
    TextBox4.ControlSource = "DataCustomerOrder!C" & Row
'    If Sheets("DataCustomerOrder").Cells(Row, 5) <> "" Then Range("MapCheck").Value = Sheets("DataCustomerOrder").Cells(Row, 5)

Exit Sub

SafeExit:
        Application.StatusBar = "Sub ListBox4_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub
Private Sub TextBox1_AfterUpdate()
                                            
    If ComboBox3.ListIndex = -1 Then
        'ButtonAll_Click
    Else
        'ComboBox3_Change
    End If                              'need to check why this was done

End Sub

Private Sub TextBox2_AfterUpdate()

    If ComboBox3.ListIndex = -1 Then
        'ButtonAll_Click
    Else
        'ComboBox3_Change           'need to check why this was done
    End If

End Sub

Private Sub ButtonAll_Click()

Dim All() As Variant

    ComboBox3.Value = vbNullString

    All = DataIntOrder.Range("WO_Internal").Value
    With ListBox3
        .RowSource = Empty
        If Not IsEmpty(All) Then
            .list = All
        End If
    End With

End Sub

Private Sub ComboBox3_Change()

On Error GoTo SafeExit
    
    Dim i, x As Integer
    Dim Arr(), All(), Ord() As Variant
    
    All = DataIntOrder.Range("WO_Internal").Value
    Arr = DataIntOrder.Range("WO_ALL").Value
    x = 0
    
    ReDim Ord(1, x)
    
    For i = 1 To UBound(Arr)
        If Arr(i, 8) = ComboBox3.Value Then
            Ord(0, x) = Arr(i, 1)
            Ord(1, x) = Arr(i, 2)
            x = x + 1
            ReDim Preserve Ord(1, x)
        End If
    Next i

    If x > 1 Then ReDim Preserve Ord(1, x - 1)

    With ListBox3
        If Not IsEmpty(Ord) Then
            .list = Application.Transpose(Ord)
        End If
    End With

    
Exit Sub

SafeExit:
        Application.StatusBar = "Sub ComboBox3_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Private Sub ListBox3_Click()

On Error GoTo SafeExit

    Dim i, RowCount As Integer
    Dim Ord As Variant
    Dim Arr As Variant
    
'    If TextBox1.Enabled = True Then TextBox1.Enabled = False
'    If TextBox2.Enabled = True Then TextBox2.Enabled = False
'    If TextBox5.Enabled = True Then TextBox5.Enabled = False
'    If TextBox6.Enabled = True Then TextBox6.Enabled = False

    If ListBox3.Value <> vbNullString Then
        RowCount = Sheets("DataInternalOrder").Range("A" & Rows.Count).End(xlUp).Row
    
        Ord = Sheets("DataInternalOrder").Range("A2:C" & RowCount)
        Arr = OrdAct(ListBox3.Value)
        
        For i = 1 To UBound(Ord, 1)
            If Ord(i, 2) = ListBox3.Value Then Exit For
        Next i
               
        TextBox1.ControlSource = "DataInternalOrder!B" & i + 1
        TextBox2.ControlSource = "DataInternalOrder!C" & i + 1
'       Range("MapCheck").Value = TextBox1.Value 'slowing down the system with large dataset

        'Sheets("DataInternalActivity").Cells(2, 6) = TextBox1.Value
    
'        If Application.WorksheetFunction.Count(Sheets("DataInternalActivity").Range("H:H")) = 0 Then
'            ListBox5.RowSource = Empty
'            TextBox5.ControlSource = Empty
'            TextBox6.ControlSource = Empty
'            TextBox5.Text = Empty
'            TextBox6.Text = Empty
'        Else
            ListBox5.list = Arr
            If ListBox5.ListCount > 0 Then ListBox5.RemoveItem ListBox5.ListCount - 1
            'ListBox5.RowSource = "DataInternalActivity!I2:J" & Application.WorksheetFunction.Count(Sheets("DataInternalActivity").Range("H:H")) + 1
            TextBox5.ControlSource = Empty
            TextBox6.ControlSource = Empty
            TextBox5.Text = Empty
            TextBox6.Text = Empty
'        End If
    End If
   
Exit Sub

SafeExit:
        Application.StatusBar = "Sub ListBox3_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0
   
End Sub
Private Sub LineAdd_Click()

On Error GoTo SafeExit

Dim RowCount, i, r As Integer

If ListBox3.ListIndex <> -1 And TextBox1 <> Empty Then

    RowCount = Sheets("DataInternalActivity").Range("C" & Rows.Count).End(xlUp).Row
    ThisWorkbook.Sheets("DataInternalActivity").Cells(RowCount + 1, 2) = TextBox1.Value
    
    TextBox5.ControlSource = "DataInternalActivity!C" & RowCount + 1
    TextBox6.ControlSource = "DataInternalActivity!D" & RowCount + 1
    
    TextBox5.Enabled = True
    TextBox6.Enabled = True
    
    TextBox5.SetFocus
Else
    MsgBox ("Please Select Work Order From List")
End If
  
Exit Sub

SafeExit:
        Application.StatusBar = "Sub LineAdd_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0
  
End Sub
Private Sub LineEdit_Click()

On Error GoTo SafeExit

    If ListBox5.ListIndex = -1 Or TextBox5 = Empty Then
        MsgBox ("Please Select a Record")
    Else
        If TextBox5.Enabled = False Or TextBox6.Enabled = False Then
            TextBox5.Enabled = True
            TextBox6.Enabled = True
            TextBox5.SetFocus
        Else
            TextBox5.Enabled = False
            TextBox6.Enabled = False
        End If
    End If
    
Exit Sub

SafeExit:
        Application.StatusBar = "Sub LineEdit_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0
    
End Sub
Private Sub LineDelete_Click()

On Error GoTo SafeExit

    If MsgBox("Are you sure you want to delete existing record?", vbOKCancel, "Confirm Delete") = vbOK And ListBox5.ListIndex <> -1 Then
    
        TextBox5.Value = vbNullString
    
    Else
        
        If ListBox3.ListIndex = -1 Then
            MsgBox ("No Workorder Selected")
        Else
            If ListBox5.ListIndex = -1 Then MsgBox ("No Activity Selected")
        End If
        Exit Sub
    
    End If

Exit Sub

SafeExit:
        Application.StatusBar = "Sub LineDelete_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub
Private Sub ButtonAdd_Click()
    
On Error GoTo SafeExit
    
    Dim RowCount As Integer
    
    RowCount = Sheets("DataInternalOrder").Range("B" & Rows.Count).End(xlUp).Row
    'Sheets("DataInternalOrder").range("B2:C" & RowCount + 1).Name = "WO_Internal"
    ListBox3.RowSource = "DataInternalOrder!B2:C" & RowCount + 1
    
    ListBox3.Selected(RowCount - 1) = True
    TextBox1.ControlSource = "DataInternalOrder!B" & RowCount + 1
    TextBox2.ControlSource = "DataInternalOrder!C" & RowCount + 1

    TextBox1.Enabled = True
    TextBox2.Enabled = True

    TextBox1.SetFocus

Exit Sub

SafeExit:
        Application.StatusBar = "Sub ButtonAdd_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub
Private Sub ButtonEdit_Click()

On Error GoTo SafeExit

    If ListBox3.ListIndex = -1 Or TextBox1 = Empty Then
        MsgBox ("Please Select a Record")
    Else
        If TextBox1.Enabled = False Or TextBox2.Enabled = False Then
            TextBox1.Enabled = True
            TextBox2.Enabled = True
        Else
            TextBox1.Enabled = False
            TextBox2.Enabled = False
        End If
    End If
    
Exit Sub

SafeExit:
        Application.StatusBar = "Sub ButtonEdit_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0
    
End Sub

Private Sub ButtonDelete_Click()
    
On Error GoTo SafeExit
    
    Dim i, j, Row, RowCount, MapCount As Integer
    Dim Ord, Cus As Variant
        
    i = 1
    j = 1
    
    If MsgBox("Are you sure you want to delete existing record?", vbOKCancel, "Confirm Delete") = vbOK And ListBox3.ListIndex <> -1 Then

        RowCount = Sheets("DataInternalOrder").Range("B" & Rows.Count).End(xlUp).Row
        MapCount = Sheets("DataCustomerOrder").Range("B" & Rows.Count).End(xlUp).Row
        
        Ord = ThisWorkbook.Sheets("DataInternalOrder").Range("B2:C" & RowCount)
        Cus = ThisWorkbook.Sheets("DataCustomerOrder").Range("E2:F" & RowCount)
        
        For i = 1 To UBound(Ord, 1)
            If Ord(i, 1) = ListBox3.Value Then Exit For
        Next i

        For j = 1 To UBound(Cus, 1)
            If Cus(j, 1) = TextBox1.Value Then Sheets("DataCustomerOrder").Cells(j + 1, 5) = ClearContents
        Next j

        Sheets("DataInternalOrder").Rows(i + 1).Delete
        
        Sheets("DataInternalOrder").Range("B2:C" & RowCount - 1).name = "WO_Internal"
        ListBox3.RowSource = "DataInternalOrder!B2:C" & RowCount - 1
        ListBox3.ListIndex = ListBox3.ListCount - 1

    Else
        
        If ListBox3.ListIndex = -1 Then MsgBox ("No Workorder Selected")
        ' If ListBox5.ListCount <> 0 Then MsgBox ("Unable to delete whilst Work Order has assigned Operations")
                
        Exit Sub
    End If

Exit Sub

SafeExit:
        Application.StatusBar = "Sub ButtonDelete_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Private Sub POAdd_Click()

On Error GoTo SafeExit

RowCount = Sheets("DataCustomerPO").Range("A" & Rows.Count).End(xlUp).Row

    ListBox6.RowSource = "DataCustomerPO!B2:C" & RowCount + 1
    
    ListBox6.Selected(RowCount - 1) = True
    TextBox7.ControlSource = "DataCustomerPO!B" & RowCount + 1
    TextBox8.ControlSource = "DataCustomerPO!C" & RowCount + 1

    TextBox7.Enabled = True
    TextBox8.Enabled = True

    TextBox7.SetFocus
    
Exit Sub

SafeExit:
        Application.StatusBar = "Sub POAdd_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0
    
End Sub

Private Sub PODelete_Click()

On Error GoTo SafeExit

Dim i, Row, RowCount As Integer

    Row = 1

    If MsgBox("Are you sure you want to delete existing record?", vbOKCancel, "Confirm Delete") = vbOK Then

        RowCount = Sheets("DataCustomerPO").Range("A" & Rows.Count).End(xlUp).Row

        For i = 2 To RowCount
        
            If Sheets("DataCustomerPO").Cells(Row, 2) = ListBox6.list(ListBox6.ListIndex, 0) Then
                Exit For
            Else
                Row = Row + 1
            End If

        Next i
        
        Sheets("DataCustomerPO").Rows(Row).Delete

        'Sheets("DataInternalActivity").Range("B2:C" & RowCount).Name = "WO_Internal"
        ListBox6.RowSource = "DataCustomerPO!B2:C" & RowCount - 1
        
    Else
        
        Exit Sub
    
    End If

Exit Sub

SafeExit:
        Application.StatusBar = "Sub PODelete_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Private Sub ButtonAdd2_Click()

On Error GoTo SafeExit

    Dim RowCount As Integer
    
    RowCount = Sheets("DataCustomerOrder").Range("A" & Rows.Count).End(xlUp).Row

    ListBox4.RowSource = "DataCustomerOrder!B2:C" & RowCount + 1
    
    ListBox4.Selected(RowCount - 1) = True
    TextBox3.ControlSource = "DataCustomerOrder!B" & RowCount + 1
    TextBox4.ControlSource = "DataCustomerOrder!C" & RowCount + 1
    
    TextBox3.Enabled = True
    TextBox4.Enabled = True
    
    TextBox3.SetFocus

Exit Sub

SafeExit:
        Application.StatusBar = "Sub ButtonAdd2_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Private Sub ButtonDelete2_Click()

On Error GoTo SafeExit

    Dim i, Row, RowCount As Integer

    Row = 1

    If MsgBox("Are you sure you want to delete existing record?", vbOKCancel, "Confirm Delete") = vbOK Then

        RowCount = Sheets("DataCustomerOrder").Range("A" & Rows.Count).End(xlUp).Row
        
        For i = 0 To ListBox4.ListCount - 1
            If ListBox4.Selected(i) = True Then
                ListIndex = i + 1
            End If
        Next i
        
        Do Until Sheets("DataCustomerOrder").Cells(Row, 2) = ListBox4.list(ListBox4.ListIndex, 0) Or _
         Sheets("DataCustomerOrder").Cells(Row, 1) = RowCount

            Row = Row + 1

        Loop
        
        Sheets("DataCustomerOrder").Rows(RowCount).Delete
        ListBox4.RowSource = "DataCustomerOrder!B2:C" & RowCount - 1

    Else
        Exit Sub
    End If

Exit Sub

SafeExit:
        Application.StatusBar = "Sub ButtonDelete2_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Private Sub TextBox1_AfterUpdate_old()

On Error GoTo SafeExit

'    Dim i As Integer
'
'    ListNo = ListBox3.ListCount - 1
'
'    For i = 0 To ListNo
'        If ListBox3.ListIndex <> i And TextBox1.Value = ListBox3.list(i) Then
'            MsgBox ("Please enter unique value. Order number already exists.")
'            TextBox1.Value = "<Duplicate>"
'            Exit For
'        End If
'    Next i

'RowCount = Sheets("DataInternalOrder").Range("B" & Rows.Count).End(xlUp).Row
'TextBox1.ControlSource = "DataInternalOrder!B" & RowCount
'TextBox2.ControlSource = "DataInternalOrder!C" & RowCount

Exit Sub

SafeExit:
        Application.StatusBar = "Sub TextBox1_AfterUpdate" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub
Attribute VB_Name = "UserForm2"
Attribute VB_Base = "0{356AFEF3-153A-48E3-B84D-4B3ACB41EF87}{9AAD2935-6CAD-41D5-B7A3-127B563F9D5C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub ComboMap_Change()
On Error GoTo SafeExit

    If MultiPage1.Value = 3 Then CrewMap1.SetFocus

SafeExit:
        On Error GoTo 0
End Sub

Private Sub ComboMap_AfterUpdate()
On Error GoTo SafeExit

Dim Row, Row2 As Integer

    Row = 1
    Row2 = 1
    
    If ComboMap.Value <> Empty Then
    TextSuperName = ComboMap.Column(1)
    Else
    TextSuperName = "All Employees Assigned"
    End If
    
    Do Until Len(Sheets("Supervisor").Cells(Row, 7).Value) = 0 'determines how many orders in the column
        Row = Row + 1
    Loop

    Do Until Len(Sheets("Supervisor").Cells(Row2, 9).Value) = 0
        Row2 = Row2 + 1
    Loop

    If Row <> 2 Then
        Sheets("Supervisor").Range("G2:H" & Row - 1).name = "EmpID_Assigned" 'Adjusts the range to number of orders in column
        CrewMap1.RowSource = "Supervisor!G2:H" & Row - 1
    Else
        CrewMap1.RowSource = ""
    End If

    If Row2 <> 2 Then
        Sheets("Supervisor").Range("I2:J" & Row2 - 1).name = "EmpID_Unassigned"
        CrewMap2.RowSource = "Supervisor!I2:J" & Row2 - 1
    Else
        CrewMap2.RowSource = ""
    End If

SafeExit:
        On Error GoTo 0
    
End Sub

Private Sub ExportButton3_Click()
MasterEmpExp
End Sub

Private Sub ImportButton3_Click()
MasterEmpImp
End Sub

Private Sub MapCrew1_Click()   ' CHANGE NR - create the button functions
On Error GoTo SafeExit

    Dim i, j, ListNo, RowCount As Integer
     
    RowCount = Sheets("Employee").Range("A" & Rows.Count).End(xlUp).Row
    ListNo = CrewMap1.ListCount - 1

    Application.Calculation = xlCalculationManual

    For i = 0 To ListNo
        If CrewMap1.Selected(i) = True Then
            For j = 1 To RowCount
                If CrewMap1.list(i) = Sheets("Employee").Cells(j, 2) Then
                    Sheets("Employee").Cells(j, 14) = Empty
                End If
            Next j

        End If
    Next i

    Application.Calculation = xlCalculationAutomatic
    MultiPage1_Change 'Update the the Named Range row counts

SafeExit:
        On Error GoTo 0

End Sub

Private Sub MapCrew2_Click()
On Error GoTo SafeExit

Dim i, j, ListNo, RowCount As Integer

    RowCount = Sheets("Employee").Range("A" & Rows.Count).End(xlUp).Row
    ListNo = CrewMap2.ListCount - 1

    Application.Calculation = xlCalculationManual

    For i = 0 To ListNo
        If CrewMap2.Selected(i) = True Then
            For j = 1 To RowCount
                If CrewMap2.list(i) = Sheets("Employee").Cells(j, 2) Then
                    Sheets("Employee").Cells(j, 14) = Sheets("Supervisor").Cells(2, 1)  ' CHANGE NR - supervisor id assign to emp.
                End If
            Next j
        End If
    Next i
    
    Application.Calculation = xlCalculationAutomatic
    MultiPage1_Change 'Update the the Named Range row counts

SafeExit:
        On Error GoTo 0

End Sub

Private Sub MapSuper1_Click()
On Error GoTo SafeExit

    Dim i, j, ListNo, RowCount As Integer

    'MsgBox (Application.WorksheetFunction.CountIf(Sheets("employee").range("N:N"), ListMap1.list(ListMap1.ListIndex, 0)))

    RowCount = Sheets("Employee").Range("A" & Rows.Count).End(xlUp).Row
    ListNo = ListMap1.ListCount - 1

    Application.Calculation = xlCalculationManual

    For i = 0 To ListNo
    If Application.WorksheetFunction.CountIf(Sheets("employee").Range("N:N"), ListMap1.list(i)) > 0 And ListMap1.Selected(i) = True Then
        MsgBox (ListMap1.list(i, 1) & " not removed as crew still assigned")
    Else
        If ListMap1.Selected(i) = True Then
            For j = 1 To RowCount
                If ListMap1.list(i) = Sheets("Employee").Cells(j, 2) Then
                    Sheets("Employee").Cells(j, 13) = Empty
                    Sheets("Employee").Cells(j, 12) = Empty
                End If
            Next j

        End If
    End If
    Next i

    Application.Calculation = xlCalculationAutomatic
    MultiPage1_Change 'Update the the Named Range row counts
    CrewMap2.RowSource = "Supervisor!I2:J" & RowBlank + 1

SafeExit:
        On Error GoTo 0

End Sub

Private Sub MapSuper2_Click()
On Error GoTo SafeExit

    Dim i, j, ListNo, RowCount As Integer
 
    RowCount = ThisWorkbook.Sheets("Employee").Range("A" & Rows.Count).End(xlUp).Row
    ListNo = ListMap2.ListCount - 1
            
    Application.Calculation = xlCalculationManual

    For i = 0 To ListNo
        If ListMap2.Selected(i) = True Then
            For j = 1 To RowCount
                If ListMap2.list(i) = Sheets("Employee").Cells(j, 2) Then
                    Sheets("Employee").Cells(j, 13) = "Y"
                    Sheets("Employee").Cells(j, 12) = "=IF(COUNTIF(C[2],RC[-10])=0,""No Crew"",""Crew Size ("" &COUNTIF(C[2],RC[-10]) & "")"")"
                End If
            Next j
        End If
    Next i

    Application.Calculation = xlCalculationAutomatic
    MultiPage1_Change 'Update the the Named Range row counts

SafeExit:
        On Error GoTo 0

End Sub

Private Sub Master_Role_Click()
On Error GoTo SafeExit

    With UserForm3
        .MultiPage1.Value = 0
        .Show
    End With

SafeExit:
        On Error GoTo 0

End Sub
Private Sub Master_Category_Click()
On Error GoTo SafeExit

    With UserForm3
        .MultiPage1.Value = 1
        .Show
    End With

SafeExit:
        On Error GoTo 0

End Sub
Private Sub Master_Class_Click()
On Error GoTo SafeExit

    With UserForm3
        .MultiPage1.Value = 2
        .Show
    End With

SafeExit:
        On Error GoTo 0

End Sub
Private Sub Master_Overtime_Click()
On Error GoTo SafeExit

    With UserForm3
        .MultiPage1.Value = 3
        .Show
    End With

SafeExit:
        On Error GoTo 0

End Sub
Private Sub Master_Role_Rates_Click()
On Error GoTo SafeExit

    With UserForm3
        .MultiPage1.Value = 0
        .Show
    End With

SafeExit:
        On Error GoTo 0

End Sub
Private Sub Master_Class_Rates_Click()
On Error GoTo SafeExit

    With UserForm3
        .MultiPage1.Value = 2
        .Show
    End With

SafeExit:
        On Error GoTo 0

End Sub

Private Sub Master_Shift_Click()
On Error GoTo SafeExit

    With UserForm3
        .MultiPage1.Value = 4
        .Show
    End With

SafeExit:
        On Error GoTo 0

End Sub
Private Sub Master_Rate_Click()
On Error GoTo SafeExit

    With UserForm3
        .MultiPage1.Value = 5
        .Show
    End With

SafeExit:
        On Error GoTo 0

End Sub
Private Sub Master_Units_Click()
On Error GoTo SafeExit

    With UserForm3
        .MultiPage1.Value = 6
        .Show
    End With

SafeExit:
        On Error GoTo 0

End Sub

Private Sub SearchButton1_Click()
On Error GoTo SafeExit

    Dim i As Integer
    Dim j As Integer
    Dim k As Integer

    k = 0

    With UserForm2.ListMap2
        .MultiSelect = fmMultiSelectSingle
        .ListIndex = -1
        .MultiSelect = fmMultiSelectExtended

        For i = 0 To .ListCount - 1
            For j = 0 To .ColumnCount - 1
                If InStr(1, .Column(j, i), UserForm2.TextSearch1.Text, vbTextCompare) Then
                    .ListIndex = i
                    .Selected(i) = True
                    k = k + 1
                End If
            Next j
        Next i
              
    End With

    UserForm2.SearchLabel1.Caption = "Found " & k & " items"

SafeExit:
        On Error GoTo 0

End Sub

Private Sub SearchButton2_Click()
On Error GoTo SafeExit

    Dim i As Integer
    Dim j As Integer
    Dim k As Integer

    k = 0

    With UserForm2.CrewMap2
        .MultiSelect = fmMultiSelectSingle
        .ListIndex = -1
        .MultiSelect = fmMultiSelectExtended

        For i = 0 To .ListCount - 1
            For j = 0 To .ColumnCount - 1
                If InStr(1, .Column(j, i), UserForm2.TextSearch2.Text, vbTextCompare) Then
                    .ListIndex = i
                    .Selected(i) = True
                    k = k + 1
                End If
            Next j
        Next i
              
    End With

    UserForm2.SearchLabel2.Caption = "Found " & k & " items"

SafeExit:
        On Error GoTo 0

End Sub

Private Sub SearchButton3_Click()
On Error GoTo SafeExit

    Dim i, j As Integer
    Dim k, l As Integer
    Dim m As Variant
    Dim Arr() As Variant

    l = 0
    m = CInt(UserForm2.FindCount.Caption)
                
    With UserForm2.ListBox1
        .MultiSelect = fmMultiSelectSingle
        .ListIndex = -1
    
    ReDim Arr(1, .ListCount - 1)
        
        For i = 0 To .ListCount - 1
            k = 0
            
            For j = 0 To .ColumnCount - 2
                If InStr(1, .Column(j, i), UserForm2.TextSearch3.Text, vbTextCompare) Then
                    k = k + 1
                    .ListIndex = i
                End If
            Next j
        
        If k > 0 Then
            ReDim Preserve Arr(1, l)
            Arr(1, l) = i
            l = l + 1
        End If
        
        Next i
    
    If l > 0 And m <= l - 1 Then
        .ListIndex = Arr(1, m)
        m = m + 1
        UserForm2.FindCount.Caption = m
    End If
    
    End With
    
    UserForm2.SearchLabel3.Caption = "Found " & l & " items. Selected item " & m & " of " & l

SafeExit:
        On Error GoTo 0

End Sub
Private Sub ClearButton1_Click()
On Error GoTo SafeExit

    UserForm2.TextSearch1.Text = ClearContents
    UserForm2.ListMap2.MultiSelect = fmMultiSelectSingle
    UserForm2.ListMap2.ListIndex = -1
    UserForm2.ListMap2.MultiSelect = fmMultiSelectExtended
    UserForm2.SearchLabel1.Caption = Empty

SafeExit:
        On Error GoTo 0

End Sub
Private Sub ClearButton2_Click()
On Error GoTo SafeExit

    UserForm2.TextSearch2.Text = ClearContents
    UserForm2.CrewMap2.MultiSelect = fmMultiSelectSingle
    UserForm2.CrewMap2.ListIndex = -1
    UserForm2.CrewMap2.MultiSelect = fmMultiSelectExtended
    UserForm2.SearchLabel2.Caption = Empty

SafeExit:
        On Error GoTo 0

End Sub
Private Sub ClearButton3_Click()
On Error GoTo SafeExit
    
    UserForm2.TextSearch3.Text = ClearContents
    UserForm2.ListBox1.MultiSelect = fmMultiSelectSingle
    UserForm2.ListBox1.ListIndex = -1
    UserForm2.SearchLabel3.Caption = Empty
    UserForm2.FindCount.Caption = 0

SafeExit:
        On Error GoTo 0

End Sub
Private Sub TextSearch3_Enter()
On Error GoTo SafeExit

ClearButton3_Click

SafeExit:
        On Error GoTo 0

End Sub
Private Sub UserForm_Initialize()
On Error GoTo SafeExit

    Dim RowCount As Integer
    If Left(ThisWorkbook.Sheets("Summary").Cells(1, 15), 5) = "Admin" Then
    
        MultiPage1.Value = 0
        ListBox1.Selected(0) = True
        RowCount = Sheets("Employee").Range("A" & Rows.Count).End(xlUp).Row

        Sheets("Employee").Range("A2:K" & RowCount).name = "Employee_List"
        ListBox1.RowSource = "Employee!A2:J" & RowCount
        
    Else
        MultiPage1.Value = 0
        MultiPage1.Pages(0).Visible = True
        MultiPage1.Pages(1).Visible = False
    End If

SafeExit:
        On Error GoTo 0

End Sub
Private Sub MultiPage1_Change()   ' CHANGE - NR - recommend copy and paste entire sub
On Error GoTo SafeExit
    
    Dim RowValue, RowBlank, RowBlankUn, RowCount As Integer

    ' count row variables
        '    RowValue = Sheets("Supervisor").range("N" & Rows.Count).End(xlUp).Row    ' CHANGE - NR - change L to N
        '    RowBlank = Application.WorksheetFunction.CountBlank(Sheets("Supervisor").range("N2:N" & RowValue))   ' CHANGE - NR - change L to N
        '    RowCount = RowValue - RowBlank 'Calculate Number of employees allocated to a supervisor
    
    Select Case MultiPage1.Value
            
        Case 1
            ListBox2.Selected(0) = True
            RowCount = Sheets("Services").Range("B" & Rows.Count).End(xlUp).Row

            Sheets("Services").Range("A2:J" & RowCount).name = "ServiceList"
            ListBox2.RowSource = "Services!A2:J" & RowCount
            
        Case 2
        
         ' count row variables
            RowValue = Sheets("Supervisor").Range("N" & Rows.Count).End(xlUp).Row    ' CHANGE - NR - change L to N
            RowBlank = Application.WorksheetFunction.CountBlank(Sheets("Supervisor").Range("N2:N" & RowValue))   ' CHANGE - NR - change L to N
            RowCount = RowValue - RowBlank 'Calculate Number of employees allocated to a supervisor
            
            If ThisWorkbook.Sheets("Supervisor").Range("N2").Value = "" Then
                ListMap1.RowSource = ""
                Sheets("Supervisor").Range("N2:O2").name = "Supervisor_All"
                ComboMap.RowSource = ""
            Else
                ListMap1.RowSource = "Supervisor!N2:O" & RowCount
                Sheets("Supervisor").Range("N2:O" & RowCount).name = "Supervisor_All"
                ComboMap.RowSource = "Supervisor!N2:O" & RowCount
            End If

            Sheets("Supervisor").Range("S2:T" & RowBlank + 1).name = "Supervisor_Not"
            ListMap2.RowSource = "Supervisor!S2:T" & RowBlank + 1 ' CHANGE - NR - add 1
            
        Case 3 ' CHANGE - NR - added case 3
            
         ' count row variables
            RowValue = Sheets("Supervisor").Range("G" & Rows.Count).End(xlUp).Row    ' CHANGE - NR - change L to N
            RowBlank = Application.WorksheetFunction.CountBlank(Sheets("Supervisor").Range("G2:G" & RowValue))   ' CHANGE - NR - change L to N
            RowCount = RowValue - RowBlank 'Calculate Number of employees allocated to a supervisor
            
            If ThisWorkbook.Sheets("Supervisor").Range("G2").Value = "" Then
                CrewMap1.RowSource = ""
                Sheets("Supervisor").Range("G2:H2").name = "EmpID_Assigned" 'Adjusts the range to number of orders in column
            Else
                CrewMap1.RowSource = "Supervisor!G2:H" & RowCount
                Sheets("Supervisor").Range("G2:H" & RowCount).name = "EmpID_Assigned" 'Adjusts the range to number of orders in column
            End If

            RowBlankUn = Application.WorksheetFunction.CountBlank(Sheets("Supervisor").Range("J2:J" & RowValue))
            Sheets("Supervisor").Range("I2:J" & RowBlank).name = "EmpID_Unassigned"
            CrewMap2.RowSource = "Supervisor!I2:J" & (RowValue - RowBlankUn)
            
            TextSuperName = Sheets("Supervisor").Cells(2, 2)
    End Select

SafeExit:
        On Error GoTo 0

End Sub

Private Sub ListBox1_Click()
On Error GoTo SafeExit

    Dim i, Row, RowCount As Integer

    Row = 1

    RowCount = Sheets("Employee").Range("A" & Rows.Count).End(xlUp).Row - 1 ' CHANGE NR add -1

    Do Until Sheets("Employee").Cells(Row, 1) = ListBox1.Value Or _
         Sheets("Employee").Cells(Row, 1) = RowCount

        Row = Row + 1

    Loop

    TextBox1.ControlSource = "Employee!B" & Row
    TextBox2.ControlSource = "Employee!C" & Row
    TextBox3.ControlSource = "Employee!D" & Row
    ComboBox1.ControlSource = "Employee!E" & Row
    ComboBox2.ControlSource = "Employee!F" & Row
    ComboBox3.ControlSource = "Employee!G" & Row
    ComboBox4.ControlSource = "Employee!H" & Row
    TextBox8.ControlSource = "Employee!I" & Row
    TextBox18.ControlSource = "Employee!J" & Row

SafeExit:
        On Error GoTo 0

End Sub

Private Sub TextBox1_AfterUpdate()
On Error GoTo SafeExit

    ListBox1.ListIndex = ListBox1.ListCount - 1

SafeExit:
        On Error GoTo 0

End Sub

Private Sub ListBox2_Click()
On Error GoTo SafeExit
    
    Dim i, Row, RowCount As Integer

    Row = 1

    RowCount = Sheets("Services").Range("A" & Rows.Count).End(xlUp).Row - 1

    Do Until Sheets("Services").Cells(Row, 1) = ListBox2.Value Or _
         Sheets("Services").Cells(Row, 1) = RowCount

        Row = Row + 1

    Loop

    ComboBox5.ControlSource = "Services!B" & Row
    TextBox10.ControlSource = "Services!C" & Row
    ComboBox6.ControlSource = "Services!D" & Row
    ComboBox7.ControlSource = "Services!E" & Row
    ComboBox8.ControlSource = "Services!F" & Row
    ComboBox9.ControlSource = "Services!G" & Row
    TextBox15.ControlSource = "Services!H" & Row
    TextBox16.ControlSource = "Services!I" & Row
    TextBox17.ControlSource = "Services!J" & Row

SafeExit:
        On Error GoTo 0

End Sub

Private Sub ComboBox5_AfterUpdate()
On Error GoTo SafeExit

    ListBox2.ListIndex = ListBox2.ListCount - 1

SafeExit:
        On Error GoTo 0

End Sub

Private Sub ButtonAdd_Click()
On Error GoTo SafeExit
    
    Dim RowCount As Integer

    RowCount = Sheets("Employee").Range("A" & Rows.Count).End(xlUp).Row 'NR change minus 1

    'Sheets("Employee").range("B2:K" & RowCount + 1).Name = "Employee_List"
    'Sheets("Employee").range("A2:K" & RowCount + 1).Name = "LabSelect"
    'Sheets("Employee").range("K2:K" & RowCount + 1).Name = "Labour"
    ListBox1.RowSource = "Employee!A2:J" & RowCount + 1

    ListBox1.Selected(RowCount - 1) = True
    TextBox1.ControlSource = "Employee!B" & RowCount + 1
    TextBox2.ControlSource = "Employee!C" & RowCount + 1
    TextBox3.ControlSource = "Employee!D" & RowCount + 1
    ComboBox1.ControlSource = "Employee!E" & RowCount + 1
    ComboBox2.ControlSource = "Employee!F" & RowCount + 1
    ComboBox3.ControlSource = "Employee!G" & RowCount + 1
    ComboBox4.ControlSource = "Employee!H" & RowCount + 1
    TextBox8.ControlSource = "Employee!I" & RowCount + 1
    TextBox18.ControlSource = "Employee!J" & RowCount + 1

    TextBox1.SetFocus
     
SafeExit:
        On Error GoTo 0
     
End Sub
Private Sub ButtonDelete_Click()
On Error GoTo SafeExit
    
    Dim i, Row, RowCount, MapCount, NewRowCount As Integer

    Row = 1

    If MsgBox("Are you sure you want to delete existing record?", vbOKCancel, "Confirm Delete") = vbOK Then

        RowCount = Sheets("Employee").Range("A" & Rows.Count).End(xlUp).Row - 1

        Do Until Sheets("Employee").Cells(Row, 1) = ListBox1.Value Or _
             Sheets("Employee").Cells(Row, 1) = RowCount
            Row = Row + 1
        Loop

        Application.Calculation = xlCalculationManual
        Sheets("Employee").Rows(Row).Delete

        Sheets("Employee").Range("A2:K" & RowCount).name = "Employee_List"
        ListBox1.RowSource = "Employee!A2:J" & RowCount
        ListBox1.ListIndex = ListBox1.ListCount - 1
        
        NewRowCount = Sheets("Employee").Range("A" & Rows.Count).End(xlUp).Row
        SuperCount = Application.WorksheetFunction.CountA(Sheets("supervisor").Range("C:C"))
        ThisWorkbook.Sheets("Supervisor").Range("C" & NewRowCount + 1 & ":T" & SuperCount + 10).Clear   'making sure no Formula error in Supervisor Sheet
        
        Application.Calculation = xlCalculationAutomatic

    Else
        Exit Sub
    End If

SafeExit:
        On Error GoTo 0

End Sub

Private Sub ButtonAddRate_Click()
On Error GoTo SafeExit
    
    Dim RowCount As Integer

    RowCount = Sheets("Services").Range("A" & Rows.Count).End(xlUp).Row

    Sheets("Services").Range("A2:J" & RowCount + 1).name = "ServiceList"
    ListBox2.RowSource = "Services!A2:J" & RowCount + 1

    ListBox2.Selected(RowCount - 1) = True

    ComboBox5.ControlSource = "Services!B" & RowCount + 1
    TextBox10.ControlSource = "Services!C" & RowCount + 1
    ComboBox6.ControlSource = "Services!D" & RowCount + 1
    ComboBox7.ControlSource = "Services!E" & RowCount + 1
    ComboBox8.ControlSource = "Services!F" & RowCount + 1
    ComboBox9.ControlSource = "Services!G" & RowCount + 1
    TextBox15.ControlSource = "Services!H" & RowCount + 1
    TextBox16.ControlSource = "Services!I" & RowCount + 1
    TextBox17.ControlSource = "Services!J" & RowCount + 1

    ComboBox5.SetFocus

SafeExit:
        On Error GoTo 0

End Sub
Private Sub ButtonDeleteRate_Click()
On Error GoTo SafeExit
    
    Dim RowA_Add, Row, RowCount As Integer

    Row = 1

    If MsgBox("Are you sure you want to delete existing record?", vbOKCancel, "Confirm Delete") = vbOK Then

        RowCount = Sheets("Services").Range("A" & Rows.Count).End(xlUp).Row - 1

        Do Until Sheets("Services").Cells(Row, 1) = ListBox2.Value Or _
             Sheets("Services").Cells(Row, 1) = RowCount
            Row = Row + 1
        Loop

        Sheets("Services").Rows(Row).Delete
        Sheets("Services").Range("A2:J" & RowCount).name = "ServiceList"
        ListBox2.RowSource = "Services!A2:J" & RowCount
        ListBox2.ListIndex = ListBox2.ListCount - 1

    Else
        Exit Sub
    End If

SafeExit:
        On Error GoTo 0

End Sub

Attribute VB_Name = "UserForm3"
Attribute VB_Base = "0{354D0433-5913-44A5-842B-08B56C42B524}{C58DD388-222B-454D-8214-6C157FFF9A34}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub AutoClear_Click()

Application.ScreenUpdating = False
Application.EnableEvents = False

With MasAuto
    .Range("A2:E" & .UsedRange.Rows.Count).ClearContents
    .Range("A2:A2") = 1
    .Range("B2:E2") = "N/A"
    .Range("A2:E2").name = "Master_Auto"
End With

UserForm3.ListBox15.RowSource = "Master_Auto"

Application.ScreenUpdating = True
Application.EnableEvents = True


End Sub

Private Sub CommandButton1_Click()
On Error GoTo SafeExit

    UserForm3.Hide
    
    'Employee
    UserForm2.ComboBox1.RowSource = "Master_Role"
    UserForm2.ComboBox2.RowSource = "Master_Category"
    UserForm2.ComboBox3.RowSource = "Master_Class"
    UserForm2.ComboBox4.RowSource = "Master_Overtime"
    
    'Rates
    UserForm2.ComboBox5.RowSource = "Master_Role"
    UserForm2.ComboBox6.RowSource = "Master_Shift"
    UserForm2.ComboBox7.RowSource = "Master_Class"
    UserForm2.ComboBox8.RowSource = "Master_Rate"
    UserForm2.ComboBox9.RowSource = "Master_Units"
   
SafeExit:
        On Error GoTo 0
   
End Sub

Private Sub UserForm_Initialize()
On Error GoTo SafeExit

    Dim RowCount As Integer
    Dim NameSh As String
    
    ComboBox1.AddItem ""
    ComboBox1.AddItem "Yes"
    
    ComboBox5.AddItem ""
    ComboBox5.AddItem "Weekday"
    ComboBox5.AddItem "Weekend"
        
    MultiPage1.Value = 0
    NameSh = MultiPage1.Pages(MultiPage1.Value).Caption
    RowCount = Sheets(NameSh).Range("B" & Rows.Count).End(xlUp).Row

    ListBox1.Selected(0) = True
    Sheets(NameSh).Range("B2:E" & RowCount).name = "Master_Role"  ' CHANGE - NR  - remove +1
    ListBox1.RowSource = NameSh & "!B2:E" & RowCount

SafeExit:
        On Error GoTo 0

End Sub
Private Sub MultiPage1_Change()
On Error GoTo SafeExit
    
    Dim RowCount As Integer
    Dim NameSh As String

    NameSh = MultiPage1.Pages(MultiPage1.Value).Caption
    RowCount = Sheets(NameSh).Range("B" & Rows.Count).End(xlUp).Row

    Select Case MultiPage1.Value

        Case 0
            ListBox1.Selected(0) = True

        Case 1
            ListBox2.Selected(0) = True
            Sheets(NameSh).Range("B2:B" & RowCount).name = "Master_Category"    ' CHANGE - NR - remove +1 next to RowCount same below
            ListBox2.RowSource = NameSh & "!B2:B" & RowCount

        Case 2
            ListBox3.Selected(0) = True
            Sheets(NameSh).Range("B2:B" & RowCount).name = "Master_Class"
            ListBox3.RowSource = NameSh & "!B2:B" & RowCount

        Case 3
            ListBox7.Selected(0) = True
            Sheets(NameSh).Range("B2:B" & RowCount).name = "Master_Overtime"
            ListBox7.RowSource = NameSh & "!B2:B" & RowCount

        Case 4
            ListBox4.Selected(0) = True
            Sheets(NameSh).Range("A2:F" & RowCount).name = "Master_Shift"
            ListBox4.RowSource = NameSh & "!A2:F" & RowCount
    
        Case 5
            ListBox5.Selected(0) = True
            Sheets(NameSh).Range("B2:C" & RowCount).name = "Master_Rate"
            ListBox5.RowSource = NameSh & "!B2:C" & RowCount

        Case 6
            ListBox6.Selected(0) = True
            Sheets(NameSh).Range("B2:C" & RowCount).name = "Master_Units"
            ListBox6.RowSource = NameSh & "!B2:C" & RowCount
            
        Case 7
            ListBox8.Selected(0) = True
            Sheets(NameSh).Range("B2:I" & RowCount).name = "Master_Allow"
            ListBox8.RowSource = NameSh & "!B2:I" & RowCount
        
        Case 8
            ListBox9.Selected(0) = True
            Sheets(NameSh).Range("B2:D" & RowCount).name = "Master_Delay"
            ListBox9.RowSource = NameSh & "!B2:D" & RowCount
            
        Case 9
            ListBox10.Selected(0) = True
            Sheets(NameSh).Range("B2:E" & RowCount).name = "Master_Location"
            ListBox10.RowSource = NameSh & "!B2:E" & RowCount
            
        Case 10
            ListBox11.Selected(0) = True
            Sheets(NameSh).Range("B2:D" & RowCount).name = "Master_Contract"
            ListBox11.RowSource = NameSh & "!B2:D" & RowCount
        
        Case 11
            ListBox13.Selected(0) = True
            Sheets(NameSh).Range("B2:C" & RowCount).name = "Master_Project"
            ListBox13.RowSource = NameSh & "!B2:C" & RowCount
        
        Case 12
            ListBox12.Selected(0) = True
            Sheets(NameSh).Range("A2:Q" & RowCount).name = "Master_Time"
            ListBox12.RowSource = NameSh & "!A2:Q" & RowCount
            
        Case 13
            ListBox14.Selected(0) = True
            Sheets(NameSh).Range("B2:D" & RowCount).name = "Master_Public"
            ListBox14.RowSource = NameSh & "!B2:D" & RowCount
        
        Case 14
            ListBox15.Selected(0) = True
            Sheets(NameSh).Range("A2:E" & RowCount).name = "Master_Auto"
            ListBox15.RowSource = NameSh & "!A2:E" & RowCount
            
        Case 15
            ListBox16.Selected(0) = True
            Sheets(NameSh).Range("A2:C" & RowCount).name = "Master_Type"
            ListBox16.RowSource = NameSh & "!A2:C" & RowCount

    End Select

SafeExit:
        On Error GoTo 0

End Sub

Private Sub ListBox1_Click()
On Error GoTo SafeExit
    
    Dim i, Row, RowCount As Integer
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim name As String

    name = "Role"
    Set wb = ThisWorkbook
    Set ws = wb.Sheets(name)
    Row = 1

    Row = IIf(ListBox1.ListIndex < 1, 2, ListBox1.ListIndex + 2)

'    RowCount = ws.Range("B" & Rows.Count).End(xlUp).row
'
'    Do Until ws.Cells(row, 2) = ListBox1.Value Or _
'         ws.Cells(row, 2) = RowCount
'
'        row = row + 1
'
'    Loop

    TextBox1.ControlSource = name & "!B" & Row
    TextBox2.ControlSource = name & "!C" & Row
    TextBox3.ControlSource = name & "!D" & Row
    TextBox4.ControlSource = name & "!E" & Row

SafeExit:
        On Error GoTo 0

End Sub

Private Sub ListBox2_Click()
On Error GoTo SafeExit
    
    Dim i, Row, RowCount As Integer
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim name As String

    name = "Category"
    Set wb = ThisWorkbook
    Set ws = wb.Sheets(name)

    Row = 1

    Row = IIf(ListBox2.ListIndex < 1, 2, ListBox2.ListIndex + 2)

    TextBox6.ControlSource = name & "!B" & Row
    
SafeExit:
        On Error GoTo 0

End Sub

Private Sub ListBox3_Click()
On Error GoTo SafeExit

    Dim i, Row, RowCount As Integer
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim name As String

    name = "Classification"
    Set wb = ThisWorkbook
    Set ws = wb.Sheets(name)

    Row = 1

    Row = IIf(ListBox3.ListIndex < 1, 2, ListBox3.ListIndex + 2)

    TextBox7.ControlSource = name & "!B" & Row
    
SafeExit:
        On Error GoTo 0
    
End Sub

Private Sub ListBox4_Click()
On Error GoTo SafeExit

    Dim i, Row, RowCount As Integer
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim name As String

    name = "Shift"
    Set wb = ThisWorkbook
    Set ws = wb.Sheets(name)

    Row = 1
    Row = IIf(ListBox4.ListIndex < 1, 2, ListBox4.ListIndex + 2)
    
    UID_Shift.ControlSource = name & "!A" & Row
    TextBox8.ControlSource = name & "!B" & Row
    TextBox9.ControlSource = name & "!C" & Row
    TextBox29.ControlSource = Format(name & "!D" & Row, "h:mm")
    TextBox30.ControlSource = Format(name & "!E" & Row, "h:mm")
    'TextBox29 = Format(TextBox29, "hh:mm")
    'TextBox30 = Format(TextBox30, "hh:mm")
    TextBox57.ControlSource = name & "!F" & Row
    
SafeExit:
        On Error GoTo 0
    
End Sub

Private Sub ListBox5_Click()
On Error GoTo SafeExit

    Dim i, Row, RowCount As Integer
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim name As String

    name = "Rate"
    Set wb = ThisWorkbook
    Set ws = wb.Sheets(name)

    Row = 1

    Row = IIf(ListBox5.ListIndex < 1, 2, ListBox5.ListIndex + 2)

    TextBox10.ControlSource = name & "!B" & Row
    TextBox11.ControlSource = name & "!C" & Row
    
SafeExit:
        On Error GoTo 0
    
End Sub
Private Sub ListBox6_Click()
On Error GoTo SafeExit

    Dim i, Row, RowCount As Integer
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim name As String

    name = "Units"
    Set wb = ThisWorkbook
    Set ws = wb.Sheets(name)

    Row = 1

    Row = IIf(ListBox6.ListIndex < 1, 2, ListBox6.ListIndex + 2)

    TextBox12.ControlSource = name & "!B" & Row
    TextBox13.ControlSource = name & "!C" & Row
    
SafeExit:
        On Error GoTo 0
    
End Sub
Private Sub ListBox7_Click()
On Error GoTo SafeExit

    Dim i, Row, RowCount As Integer
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim name As String

    name = "Overtime"
    Set wb = ThisWorkbook
    Set ws = wb.Sheets(name)

    Row = 1

    Row = IIf(ListBox7.ListIndex < 1, 2, ListBox7.ListIndex + 2)

    TextBox14.ControlSource = name & "!B" & Row
    
SafeExit:
        On Error GoTo 0
    
End Sub
Private Sub ListBox8_Click()
On Error GoTo SafeExit

Dim i, Row, RowCount As Integer
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim name As String

    name = "Allowances"
    Set wb = ThisWorkbook
    Set ws = wb.Sheets(name)
    Row = 1

    Row = IIf(ListBox8.ListIndex < 1, 2, ListBox8.ListIndex + 2)

    TextBox16.ControlSource = name & "!B" & Row
    TextBox15.ControlSource = name & "!C" & Row
    TextBox19.ControlSource = name & "!D" & Row
    TextBox20.ControlSource = name & "!E" & Row
    TextBox31.ControlSource = name & "!F" & Row
    ComboBox1.ControlSource = name & "!G" & Row
    TextBox56.ControlSource = name & "!H" & Row
    ComboBox5.ControlSource = name & "!I" & Row
    
SafeExit:
        On Error GoTo 0
    
End Sub

Private Sub ListBox9_Click()
On Error GoTo SafeExit

Dim i, Row, RowCount As Integer
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim name As String

    name = "Delays"
    Set wb = ThisWorkbook
    Set ws = wb.Sheets(name)
    Row = 1

    Row = IIf(ListBox9.ListIndex < 1, 2, ListBox9.ListIndex + 2)

    TextBox18.ControlSource = name & "!B" & Row
    TextBox17.ControlSource = name & "!C" & Row
    TextBox21.ControlSource = name & "!D" & Row

SafeExit:
        On Error GoTo 0
    
End Sub

Private Sub ListBox10_Click()
On Error GoTo SafeExit

Dim i, Row, RowCount As Integer
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim name As String

    name = "Location"
    Set wb = ThisWorkbook
    Set ws = wb.Sheets(name)
    Row = 1

    Row = IIf(ListBox10.ListIndex < 1, 2, ListBox10.ListIndex + 2)

    TextBox22.ControlSource = name & "!B" & Row
    TextBox23.ControlSource = name & "!C" & Row
    TextBox24.ControlSource = name & "!D" & Row
    TextBox28.ControlSource = name & "!E" & Row
    
SafeExit:
        On Error GoTo 0
    
End Sub
Private Sub ListBox11_Click()
On Error GoTo SafeExit

Dim i, Row, RowCount As Integer
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim name As String

    name = "Contract"
    Set wb = ThisWorkbook
    Set ws = wb.Sheets(name)
    Row = 1

    Row = IIf(ListBox11.ListIndex < 1, 2, ListBox11.ListIndex + 2)
    
    TextBox50.ControlSource = name & "!B" & Row
    TextBox49.ControlSource = name & "!C" & Row
    TextBox62.ControlSource = name & "!D" & Row
    
SafeExit:
        On Error GoTo 0
    
End Sub

Private Sub ListBox12_Click()
On Error GoTo SafeExit

    Dim i, Row, RowCount As Integer
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim name As String

    name = "Agreement"
    Set wb = ThisWorkbook
    Set ws = wb.Sheets(name)
    Row = 1
    
    Row = IIf(ListBox12.ListIndex < 1, 2, ListBox12.ListIndex + 2)

    UID_Agree.ControlSource = name & "!A" & Row
    TextBox32.ControlSource = name & "!B" & Row
    TextBox33.ControlSource = name & "!C" & Row
    TextBox34.ControlSource = name & "!D" & Row
    TextBox35.ControlSource = name & "!E" & Row
    TextBox36.ControlSource = name & "!F" & Row
    TextBox37.ControlSource = name & "!G" & Row
    TextBox38.ControlSource = name & "!H" & Row
    TextBox39.ControlSource = name & "!I" & Row
    TextBox40.ControlSource = name & "!J" & Row
    TextBox41.ControlSource = name & "!K" & Row
    TextBox42.ControlSource = name & "!L" & Row
    TextBox43.ControlSource = name & "!M" & Row
    TextBox44.ControlSource = name & "!N" & Row
    TextBox45.ControlSource = name & "!O" & Row
    TextBox46.ControlSource = name & "!P" & Row
    TextBox47.ControlSource = name & "!Q" & Row
    
SafeExit:
        On Error GoTo 0
End Sub
Private Sub ListBox13_Click()
On Error GoTo SafeExit

Dim i, Row, RowCount As Integer
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim name As String

    name = "Project"
    Set wb = ThisWorkbook
    Set ws = wb.Sheets(name)
    Row = 1

    Row = IIf(ListBox13.ListIndex < 1, 2, ListBox13.ListIndex + 2)
    
    TextBox51.ControlSource = name & "!B" & Row
    TextBox52.ControlSource = name & "!C" & Row
    
SafeExit:
        On Error GoTo 0
    
End Sub
Private Sub ListBox14_Click()
On Error GoTo SafeExit

Dim i, Row, RowCount As Integer
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim name As String

    name = "Public"
    Set wb = ThisWorkbook
    Set ws = wb.Sheets(name)
    Row = 1

    Row = IIf(ListBox14.ListIndex < 1, 2, ListBox14.ListIndex + 2)
    
    TextBox53.ControlSource = name & "!B" & Row
    TextBox54.ControlSource = name & "!C" & Row
    TextBox55.ControlSource = name & "!D" & Row
    
SafeExit:
        On Error GoTo 0
End Sub

Private Sub ListBox15_Click()
On Error GoTo SafeExit

    Dim i, Row, RowCount As Integer
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim name As String

    name = "Auto"
    Set wb = ThisWorkbook
    Set ws = wb.Sheets(name)
    Row = 1
    
    Row = IIf(ListBox15.ListIndex < 1, 2, ListBox15.ListIndex + 2)

    UID_Auto.ControlSource = name & "!A" & Row
    ComboBox2.ControlSource = name & "!B" & Row
    ComboBox3.ControlSource = name & "!C" & Row
    ComboBox4.ControlSource = name & "!D" & Row
    TextBox61.ControlSource = name & "!E" & Row
    
SafeExit:
        On Error GoTo 0
End Sub
Private Sub ListBox16_Click()
On Error GoTo SafeExit

    Dim i, Row, RowCount As Integer
    Dim wb As Workbook
    Dim ws As Worksheet
    Dim name As String

    name = "Type"
    Set wb = ThisWorkbook
    Set ws = wb.Sheets(name)
    Row = 1
    
    Row = IIf(ListBox16.ListIndex < 1, 2, ListBox16.ListIndex + 2)

    UID_Type.ControlSource = name & "!A" & Row
    TextBox64.ControlSource = name & "!B" & Row
    TextBox65.ControlSource = name & "!C" & Row
    
SafeExit:
        On Error GoTo 0
End Sub
Private Sub ComboBox2_Change()

Select Case UserForm3.ComboBox2.Value

    Case vbNullString
    UserForm3.ComboBox3.RowSource = vbNullString
    UserForm3.ComboBox3.Value = vbNullString
    
    Case "Role"
    UserForm3.ComboBox3.RowSource = "Master_Role"
    
    Case "Shift"
    UserForm3.ComboBox3.RowSource = "Shift"

End Select

End Sub

Private Sub ComboBox4_AfterUpdate()

Select Case Left(UserForm3.ComboBox4.Column(1), 1)
    
    Case "("
        UserForm3.TextBox61 = UserForm3.ComboBox4.Column(1)
    
    Case Is <> "("
        UserForm3.TextBox61 = vbNullString
    
End Select
 
End Sub


Private Sub ButtonAdd_Click()
On Error GoTo SafeExit

    Dim RowCount As Integer
    Dim NameSh As String
    Dim RowArr As Variant

    NameSh = MultiPage1.Pages(MultiPage1.Value).Caption
    RowCount = Sheets(NameSh).Range("B" & Rows.Count).End(xlUp).Row

    Select Case MultiPage1.Value

        Case 0

            Sheets(NameSh).Range("B2:E" & RowCount + 1).name = "Master_Role"
            ListBox1.RowSource = NameSh & "!B2:E" & RowCount + 1

            ListBox1.Selected(RowCount - 1) = True

            TextBox1.ControlSource = NameSh & "!B" & RowCount + 1
            TextBox2.ControlSource = NameSh & "!C" & RowCount + 1
            TextBox3.ControlSource = NameSh & "!D" & RowCount + 1
            TextBox4.ControlSource = NameSh & "!E" & RowCount + 1
            
            CtlE (MultiPage1.Value)
            TextBox1.SetFocus

        Case 1

            Sheets(NameSh).Range("B2:B" & RowCount + 1).name = "Master_Category"
            ListBox2.RowSource = NameSh & "!B2:B" & RowCount + 1

            ListBox2.Selected(RowCount - 1) = True

            TextBox6.ControlSource = NameSh & "!B" & RowCount + 1
            
            CtlE (MultiPage1.Value)
            TextBox6.SetFocus

        Case 2

            Sheets(NameSh).Range("B2:B" & RowCount + 1).name = "Master_Class"
            ListBox3.RowSource = NameSh & "!B2:B" & RowCount + 1

            ListBox3.Selected(RowCount - 1) = True

            TextBox7.ControlSource = NameSh & "!B" & RowCount + 1
            
            CtlE (MultiPage1.Value)
            
            TextBox7.SetFocus

        Case 3

            Sheets(NameSh).Range("B2:B" & RowCount + 1).name = "Master_Overtime"
            ListBox7.RowSource = NameSh & "!B2:B" & RowCount + 1

            ListBox7.Selected(RowCount - 1) = True

            TextBox14.ControlSource = NameSh & "!B" & RowCount + 1
            
            CtlE (MultiPage1.Value)
            TextBox14.SetFocus

        Case 4

            Sheets(NameSh).Range("A2:F" & RowCount + 1).name = "Master_Shift"
            ListBox4.RowSource = NameSh & "!A2:F" & RowCount + 1

            ListBox4.Selected(RowCount - 1) = True

            UID_Shift.ControlSource = NameSh & "!A" & RowCount + 1
            TextBox8.ControlSource = NameSh & "!B" & RowCount + 1
            TextBox9.ControlSource = NameSh & "!C" & RowCount + 1
            TextBox29.ControlSource = NameSh & "!D" & RowCount + 1
            TextBox30.ControlSource = NameSh & "!E" & RowCount + 1
            TextBox57.ControlSource = NameSh & "!F" & RowCount + 1
                               
            CtlE (MultiPage1.Value)
            TextBox8.SetFocus

        Case 5

            Sheets(NameSh).Range("B2:C" & RowCount + 1).name = "Master_Rate"
            ListBox5.RowSource = NameSh & "!B2:C" & RowCount + 1

            ListBox5.Selected(RowCount - 1) = True

            TextBox10.ControlSource = NameSh & "!B" & RowCount + 1
            TextBox11.ControlSource = NameSh & "!C" & RowCount + 1
            
            CtlE (MultiPage1.Value)
            TextBox10.SetFocus

        Case 6

            Sheets(NameSh).Range("B2:C" & RowCount + 1).name = "Master_Units"
            ListBox6.RowSource = NameSh & "!B2:C" & RowCount + 1
            ListBox6.Selected(RowCount - 1) = True

            TextBox12.ControlSource = NameSh & "!B" & RowCount + 1
            TextBox13.ControlSource = NameSh & "!C" & RowCount + 1
            
            CtlE (MultiPage1.Value)
            
            TextBox12.SetFocus
            
        Case 7

            Sheets(NameSh).Range("B2:I" & RowCount + 1).name = "Master_Allow"
            ListBox8.RowSource = NameSh & "!B2:I" & RowCount + 1

            ListBox8.Selected(RowCount - 1) = True

            TextBox16.ControlSource = NameSh & "!B" & RowCount + 1
            TextBox15.ControlSource = NameSh & "!C" & RowCount + 1
            TextBox19.ControlSource = NameSh & "!D" & RowCount + 1
            TextBox20.ControlSource = NameSh & "!E" & RowCount + 1
            TextBox31.ControlSource = NameSh & "!F" & RowCount + 1
            ComboBox1.ControlSource = NameSh & "!G" & RowCount + 1
            TextBox56.ControlSource = NameSh & "!H" & RowCount + 1
            ComboBox5.ControlSource = NameSh & "!I" & RowCount + 1
            
            CtlE (MultiPage1.Value)
            TextBox16.SetFocus
            
        Case 8

            Sheets(NameSh).Range("B2:D" & RowCount + 1).name = "Master_Delay"
            ListBox9.RowSource = NameSh & "!B2:D" & RowCount + 1

            ListBox9.Selected(RowCount - 1) = True

            TextBox18.ControlSource = NameSh & "!B" & RowCount + 1
            TextBox17.ControlSource = NameSh & "!C" & RowCount + 1
            TextBox21.ControlSource = NameSh & "!D" & RowCount + 1
            
            CtlE (MultiPage1.Value)
            TextBox18.SetFocus
            
        Case 9

            Sheets(NameSh).Range("B2:E" & RowCount + 1).name = "Master_Location"
            ListBox10.RowSource = NameSh & "!B2:E" & RowCount + 1

            ListBox10.Selected(RowCount - 1) = True

            TextBox22.ControlSource = NameSh & "!B" & RowCount + 1
            TextBox23.ControlSource = NameSh & "!C" & RowCount + 1
            TextBox24.ControlSource = NameSh & "!D" & RowCount + 1
            TextBox28.ControlSource = NameSh & "!E" & RowCount + 1
            
            CtlE (MultiPage1.Value)
            TextBox22.SetFocus
            
        Case 10

            Sheets(NameSh).Range("B2:D" & RowCount + 1).name = "Master_Contract"
            ListBox11.RowSource = NameSh & "!B2:D" & RowCount + 1

            ListBox11.Selected(RowCount - 1) = True

            TextBox50.ControlSource = NameSh & "!B" & RowCount + 1
            TextBox49.ControlSource = NameSh & "!C" & RowCount + 1
            TextBox62.ControlSource = NameSh & "!D" & RowCount + 1
            
            CtlE (MultiPage1.Value)
            TextBox50.SetFocus


        Case 11
            
            Sheets(NameSh).Range("B2:C" & RowCount + 1).name = "Master_Project"
            ListBox13.RowSource = NameSh & "!B2:C" & RowCount + 1

            ListBox13.Selected(RowCount - 1) = True

            TextBox51.ControlSource = NameSh & "!B" & RowCount + 1
            TextBox52.ControlSource = NameSh & "!C" & RowCount + 1
            
            CtlE (MultiPage1.Value)
            TextBox51.SetFocus

        Case 12
        
            Sheets(NameSh).Range("A2:Q" & RowCount + 1).name = "Master_Time"
            ListBox12.RowSource = NameSh & "!A2:Q" & RowCount + 1
            
            ReDim RowArr(1 To RowCount + 1) 'Ensure the UID count is correct
            For i = 1 To RowCount + 1
                RowArr(i) = i
            Next i
            Sheets(NameSh).Range("A2:A" & RowCount + 1) = Application.Transpose(RowArr)
            
            ListBox12.Selected(RowCount - 1) = True

            UID_Agree.ControlSource = NameSh & "!A" & RowCount + 1
            TextBox32.ControlSource = NameSh & "!B" & RowCount + 1
            TextBox33.ControlSource = NameSh & "!C" & RowCount + 1
            TextBox34.ControlSource = NameSh & "!D" & RowCount + 1
            TextBox35.ControlSource = NameSh & "!E" & RowCount + 1
            TextBox36.ControlSource = NameSh & "!F" & RowCount + 1
            TextBox37.ControlSource = NameSh & "!G" & RowCount + 1
            TextBox38.ControlSource = NameSh & "!H" & RowCount + 1
            TextBox39.ControlSource = NameSh & "!I" & RowCount + 1
            TextBox40.ControlSource = NameSh & "!J" & RowCount + 1
            TextBox41.ControlSource = NameSh & "!K" & RowCount + 1
            TextBox42.ControlSource = NameSh & "!L" & RowCount + 1
            TextBox43.ControlSource = NameSh & "!M" & RowCount + 1
            TextBox44.ControlSource = NameSh & "!N" & RowCount + 1
            TextBox45.ControlSource = NameSh & "!O" & RowCount + 1
            TextBox46.ControlSource = NameSh & "!P" & RowCount + 1
            TextBox47.ControlSource = NameSh & "!Q" & RowCount + 1
            
            CtlE (MultiPage1.Value)
            TextBox32.SetFocus
            
        Case 13
            
            Sheets(NameSh).Range("B2:D" & RowCount + 1).name = "Master_Public"
            ListBox14.RowSource = NameSh & "!B2:D" & RowCount + 1

            ListBox14.Selected(RowCount - 1) = True

            TextBox53.ControlSource = NameSh & "!B" & RowCount + 1
            TextBox54.ControlSource = NameSh & "!C" & RowCount + 1
            TextBox55.ControlSource = NameSh & "!D" & RowCount + 1
            
            CtlE (MultiPage1.Value)
            TextBox53.SetFocus
        
        Case 14
            
            Sheets(NameSh).Range("A2:E" & RowCount + 1).name = "Master_Auto"
            ListBox15.RowSource = NameSh & "!A2:E" & RowCount + 1

            ListBox15.Selected(RowCount - 1) = True

            UID_Auto.ControlSource = NameSh & "!A" & RowCount + 1
            ComboBox2.ControlSource = NameSh & "!B" & RowCount + 1
            ComboBox3.ControlSource = NameSh & "!C" & RowCount + 1
            ComboBox4.ControlSource = NameSh & "!D" & RowCount + 1
            TextBox61.ControlSource = NameSh & "!E" & RowCount + 1
            
            CtlE (MultiPage1.Value)
            ComboBox2.SetFocus
            
        Case 15
            
            Sheets(NameSh).Range("A2:C" & RowCount + 1).name = "Master_Type"
            ListBox16.RowSource = NameSh & "!A2:C" & RowCount + 1

            ListBox16.Selected(RowCount - 1) = True

            UID_Type.ControlSource = NameSh & "!A" & RowCount + 1
            TextBox64.ControlSource = NameSh & "!B" & RowCount + 1
            TextBox65.ControlSource = NameSh & "!C" & RowCount + 1
            
            CtlE (MultiPage1.Value)
            TextBox64.SetFocus

    End Select

SafeExit:
        On Error GoTo 0

End Sub
Private Sub ButtonDelete_Click()
On Error GoTo SafeExit

    Dim RowA_Add, Row, RowCount As Integer
    Dim NameSh As String

    Row = 1
    NameSh = MultiPage1.Pages(MultiPage1.Value).Caption
    RowCount = Sheets(NameSh).Range("B" & Rows.Count).End(xlUp).Row - 1 ' CHANGE - NR add -1 next to RowCount to prevent infinite looping
    
    If RowCount > 1 Then 'Prevent deleting 1st record
    If MsgBox("Are you sure you want to delete existing record?", vbOKCancel, "Confirm Delete") = vbOK Then

        Select Case MultiPage1.Value

            Case 0

                Do Until Sheets(NameSh).Cells(Row, 2) = ListBox1.Value Or _
                Sheets(NameSh).Cells(Row, 2) = RowCount
                    Row = Row + 1
                Loop

                Sheets(NameSh).Rows(Row).Delete
                Sheets(NameSh).Range("B2:E" & RowCount).name = "Master_Role" ' CHANGE - NR  Remove +1 next to RowCount
                ListBox1.RowSource = NameSh & "!B2:E" & RowCount             ' CHANGE - NR  Remove +1 next to RowCount
                ListBox1.ListIndex = ListBox1.ListCount - 1

            Case 1

                Do Until Sheets(NameSh).Cells(Row, 2) = ListBox2.Value Or _
                Sheets(NameSh).Cells(Row, 2) = RowCount
                    Row = Row + 1
                Loop

                Sheets(NameSh).Rows(Row).Delete
                Sheets(NameSh).Range("B2:B" & RowCount).name = "Master_Category"
                ListBox2.RowSource = NameSh & "!B2:B" & RowCount
                ListBox2.ListIndex = ListBox2.ListCount - 1

            Case 2

                Do Until Sheets(NameSh).Cells(Row, 2) = ListBox3.Value Or _
                Sheets(NameSh).Cells(Row, 2) = RowCount
                    Row = Row + 1
                Loop

                Sheets(NameSh).Rows(Row).Delete
                Sheets(NameSh).Range("B2:B" & RowCount).name = "Master_Class"
                ListBox3.RowSource = NameSh & "!B2:B" & RowCount
                ListBox3.ListIndex = ListBox3.ListCount - 1

            Case 3

                Do Until Sheets(NameSh).Cells(Row, 2) = ListBox7.Value Or _
                Sheets(NameSh).Cells(Row, 2) = RowCount
                    Row = Row + 1
                Loop

                Sheets(NameSh).Rows(Row).Delete
                Sheets(NameSh).Range("B2:B" & RowCount).name = "Master_Overtime"
                ListBox7.RowSource = NameSh & "!B2:B" & RowCount
                ListBox7.ListIndex = ListBox7.ListCount - 1

            Case 4

                Do Until Sheets(NameSh).Cells(Row, 1) = ListBox4.Value Or _
                Sheets(NameSh).Cells(Row, 2) = RowCount
                    Row = Row + 1
                Loop

                Sheets(NameSh).Rows(Row).Delete
                Sheets(NameSh).Range("A2:F" & RowCount).name = "Master_Shift"
                ListBox4.RowSource = NameSh & "!A2:F" & RowCount
                ListBox4.ListIndex = ListBox4.ListCount - 1

            Case 5

                Do Until Sheets(NameSh).Cells(Row, 2) = ListBox5.Value Or _
                Sheets(NameSh).Cells(Row, 2) = RowCount
                    Row = Row + 1
                Loop

                Sheets(NameSh).Rows(Row).Delete
                Sheets(NameSh).Range("B2:C" & RowCount).name = "Master_Rate"
                ListBox5.RowSource = NameSh & "!B2:C" & RowCount
                ListBox5.ListIndex = ListBox5.ListCount - 1

            Case 6

                Do Until Sheets(NameSh).Cells(Row, 2) = ListBox6.Value Or _
                Sheets(NameSh).Cells(Row, 2) = RowCount
                    Row = Row + 1
                Loop

                Sheets(NameSh).Rows(Row).Delete
                Sheets(NameSh).Range("B2:C" & RowCount).name = "Master_Units"
                ListBox6.RowSource = NameSh & "!B2:C" & RowCount
                ListBox6.ListIndex = ListBox6.ListCount - 1
                
            Case 7

                Do Until Sheets(NameSh).Cells(Row, 2) = ListBox8.Value Or _
                Sheets(NameSh).Cells(Row, 2) = RowCount
                    Row = Row + 1
                Loop

                Sheets(NameSh).Rows(Row).Delete
                Sheets(NameSh).Range("B2:I" & RowCount).name = "Master_Allow"
                ListBox8.RowSource = NameSh & "!B2:I" & RowCount
                ListBox8.ListIndex = ListBox8.ListCount - 1
                
            Case 8

                Do Until Sheets(NameSh).Cells(Row, 2) = ListBox9.Value Or _
                Sheets(NameSh).Cells(Row, 2) = RowCount
                    Row = Row + 1
                Loop

                Sheets(NameSh).Rows(Row).Delete
                Sheets(NameSh).Range("B2:D" & RowCount).name = "Master_Delay"
                ListBox9.RowSource = NameSh & "!B2:D" & RowCount
                ListBox9.ListIndex = ListBox9.ListCount - 1
                
            Case 9

                Do Until Sheets(NameSh).Cells(Row, 2) = ListBox10.Value Or _
                Sheets(NameSh).Cells(Row, 2) = RowCount
                    Row = Row + 1
                Loop

                Sheets(NameSh).Rows(Row).Delete
                Sheets(NameSh).Range("B2:E" & RowCount).name = "Master_Location"
                ListBox10.RowSource = NameSh & "!B2:E" & RowCount
                ListBox10.ListIndex = ListBox10.ListCount - 1
                
            Case 10

                Do Until Sheets(NameSh).Cells(Row, 2) = ListBox11.Value Or _
                Sheets(NameSh).Cells(Row, 2) = RowCount
                    Row = Row + 1
                Loop

                Sheets(NameSh).Rows(Row).Delete
                Sheets(NameSh).Range("B2:D" & RowCount).name = "Master_Contract"
                ListBox11.RowSource = NameSh & "!B2:D" & RowCount
                ListBox11.ListIndex = ListBox11.ListCount - 1
                
            Case 11
            
                Row = IIf(ListBox13.ListIndex < 1, 2, ListBox13.ListIndex + 2)

                Sheets(NameSh).Rows(Row).Delete
                Sheets(NameSh).Range("B2:C" & RowCount).name = "Master_Project"
                ListBox13.RowSource = NameSh & "!B2:C" & RowCount
                ListBox13.ListIndex = ListBox13.ListCount - 1
                
            Case 12

                Row = IIf(ListBox12.ListIndex < 1, 2, ListBox12.ListIndex + 2)
                                
                Sheets(NameSh).Rows(Row).Delete
                Sheets(NameSh).Range("A2:Q" & RowCount).name = "Master_Time"
                ListBox12.RowSource = NameSh & "!A2:Q" & RowCount
                ListBox12.ListIndex = ListBox12.ListCount - 1
                
            Case 13

                Row = IIf(ListBox14.ListIndex < 1, 2, ListBox14.ListIndex + 2)

                Sheets(NameSh).Rows(Row).Delete
                Sheets(NameSh).Range("B2:D" & RowCount).name = "Master_Public"
                ListBox14.RowSource = NameSh & "!B2:D" & RowCount
                ListBox14.ListIndex = ListBox14.ListCount - 1
                
            Case 14

                Row = IIf(ListBox15.ListIndex < 1, 2, ListBox15.ListIndex + 2)

                Sheets(NameSh).Rows(Row).Delete
                Sheets(NameSh).Range("A2:E" & RowCount).name = "Master_Auto"
                ListBox15.RowSource = NameSh & "!A2:E" & RowCount
                ListBox15.ListIndex = ListBox15.ListCount - 1
                
            Case 15

                Row = IIf(ListBox16.ListIndex < 1, 2, ListBox16.ListIndex + 2)

                Sheets(NameSh).Rows(Row).Delete
                Sheets(NameSh).Range("A2:C" & RowCount).name = "Master_Type"
                ListBox16.RowSource = NameSh & "!A2:C" & RowCount
                ListBox16.ListIndex = ListBox16.ListCount - 1

        End Select

    Else
        Exit Sub
    End If
    End If

SafeExit:
        On Error GoTo 0

End Sub

Sub ButtonEdit_Click()

On Error GoTo SafeExit

Select Case MultiPage1.Value

    Case 0
        
        If ListBox1.ListIndex = -1 Or TextBox1 = Empty Then
            MsgBox ("Please Select a Record")
        Else
            CtlED (MultiPage1.Value)
        End If
        
    Case 1
        
        If ListBox2.ListIndex = -1 Or TextBox6 = Empty Then
            MsgBox ("Please Select a Record")
        Else
            CtlED (MultiPage1.Value)
        End If
        
    Case 2
        
        If ListBox3.ListIndex = -1 Then
            MsgBox ("Please Select a Record")
        Else
            CtlED (MultiPage1.Value)
        End If
        
    Case 3
        
        If ListBox7.ListIndex = -1 Then
            MsgBox ("Please Select a Record")
        Else
            CtlED (MultiPage1.Value)
        End If
        
    Case 4
        
        If ListBox4.ListIndex = -1 Then
            MsgBox ("Please Select a Record")
        Else
            CtlED (MultiPage1.Value)
        End If
        
    Case 5
        
        If ListBox5.ListIndex = -1 Then
            MsgBox ("Please Select a Record")
        Else
            CtlED (MultiPage1.Value)
        End If

    Case 6
        
        If ListBox6.ListIndex = -1 Then
            MsgBox ("Please Select a Record")
        Else
            CtlED (MultiPage1.Value)
        End If

        
    Case 7
        
        If ListBox8.ListIndex = -1 Then
            MsgBox ("Please Select a Record")
        Else
            CtlED (MultiPage1.Value)
        End If
        
    Case 8
        
        If ListBox9.ListIndex = -1 Then
            MsgBox ("Please Select a Record")
        Else
            CtlED (MultiPage1.Value)
        End If
        
    Case 9
        
        If ListBox10.ListIndex = -1 Then
            MsgBox ("Please Select a Record")
        Else
            CtlED (MultiPage1.Value)
        End If

    Case 10
        
        If ListBox11.ListIndex = -1 Then
            MsgBox ("Please Select a Record")
        Else
            CtlED (MultiPage1.Value)
        End If

    Case 11
    
        If ListBox13.ListIndex = -1 Or TextBox51 = Empty Then
            MsgBox ("Please Select a Record")
        Else
            CtlED (MultiPage1.Value)
        End If
        
    Case 12
    
        If ListBox12.ListIndex = -1 Or TextBox32 = Empty Then
            MsgBox ("Please Select a Record")
        Else
            CtlED (MultiPage1.Value)
        End If
        
    Case 13

        If ListBox14.ListIndex = -1 Or TextBox53 = Empty Then
            MsgBox ("Please Select a Record")
        Else
            CtlED (MultiPage1.Value)
        End If
        
    Case 14

        If ListBox15.ListIndex = -1 Or ComboBox2 = Empty Then
            MsgBox ("Please Select a Record")
        Else
            CtlED (MultiPage1.Value)
        End If
        
    Case 15

        If ListBox16.ListIndex = -1 Or TextBox64 = Empty Then
            MsgBox ("Please Select a Record")
        Else
            CtlED (MultiPage1.Value)
        End If
    
    End Select

Exit Sub

SafeExit:
        Application.StatusBar = "Sub ButtonEdit_Click" & ", " & Err.Number & ", " & Err.Description
        On Error GoTo 0

End Sub

Sub CtlED(P As Integer)

Dim CtlSel As control
    For Each CtlSel In MultiPage1.Pages(P).Controls
    
        If (TypeName(CtlSel) = "TextBox" Or TypeName(CtlSel) = "ComboBox") And Left(CtlSel.name, 3) <> "UID" Then
            
            If CtlSel.Enabled = False Then
                CtlSel.Enabled = True
            Else
                CtlSel.Enabled = False
            End If
            
        End If
    Next
End Sub

Sub CtlE(P As Integer)

Dim CtlSel As control
    For Each CtlSel In MultiPage1.Pages(P).Controls
        If (TypeName(CtlSel) = "TextBox" Or TypeName(CtlSel) = "ComboBox") And Left(CtlSel.name, 3) <> "UID" Then
            CtlSel.Enabled = True
        End If
    Next
End Sub
Attribute VB_Name = "UserForm4"
Attribute VB_Base = "0{1D5FE845-9C4E-4C96-A832-46B7D312C11E}{8D035AC6-7224-4375-B936-E7EEEF30A83B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub ExtractTS_Click()
    'On Error GoTo getfile_error

On Error GoTo SafeExit

    Dim filesave As FileDialog
    Dim strPath, filename, ModuleName, ClassName, Tempfile, TempClass As String
    Dim wb As Workbook
    Dim NumLines As Integer
    Dim SDate As Date
    Dim i As Integer
    Dim coll As New Collection
    Dim sheetname As String

    ModuleName = "Module3"
    ClassName = "Module4"
    Tempfile = ActiveWorkbook.Path & "\Module3.bas"
    TempClass = ActiveWorkbook.Path & "\Module4.txt"

    SavePrompt = MsgBox("Would you like to save the current timesheet?", vbYesNo, "Confirm Save")
    If SavePrompt = vbYes Then Call ActionSaveTS 'save TS

    Set filesave = Application.FileDialog(msoFileDialogSaveAs)

    Application.ScreenUpdating = False
    Application.DisplayAlerts = False

    'create collection with all the TS that were selected by the user
    For i = 0 To Me.ListSavedTS.ListCount - 1
        If Me.ListExtractTS.Selected(i) Then
            coll.Add Me.ListExtractTS.list(i)
        End If
    Next i

    For i = 1 To coll.Count 'create TS for each item in collection
        'Start Load File
        If SheetExist("TimeTemplate") = True Then ThisWorkbook.Sheets("TimeTemplate").Delete
        
        sheetname = coll(i) 'name of sheet is entry of column i
        With ThisWorkbook.Sheets(sheetname)
            .Visible = True
            .name = "TimeTemplate" 'TS needs to be loaded and renamed to this for extraction
            .Select
        End With
        'End Load File
        
        'Start Create Timesheet
        With filesave
            .InitialFileName = coll(i) & " Timesheet.xlsm"
            .Title = "Save As"
            .FilterIndex = 2
            If .Show <> 0 Then

                strPath = .SelectedItems(1)

                Application.DisplayAlerts = False
                Set wb = Workbooks.Add
                Set CodeCopy = ThisWorkbook.VBProject.VBComponents(ClassName).CodeModule
                NumLines = CodeCopy.CountOfLines

                ThisWorkbook.Sheets("EBA").Copy Before:=wb.Sheets(1)
                ThisWorkbook.Sheets("DataOps").Copy Before:=wb.Sheets(1)
                ThisWorkbook.Sheets("DataAllow").Copy Before:=wb.Sheets(1)
                ThisWorkbook.Sheets("DataCustomerOrder").Copy Before:=wb.Sheets(1)
                ThisWorkbook.Sheets("DataInternalOrder").Copy Before:=wb.Sheets(1)
                ThisWorkbook.Sheets("Employee").Copy Before:=wb.Sheets(1)
                ThisWorkbook.Sheets("UploadSAP").Copy Before:=wb.Sheets(1)
                ThisWorkbook.Sheets("SummaryEBA").Copy Before:=wb.Sheets(1)
                ThisWorkbook.Sheets("Summary").Copy Before:=wb.Sheets(1)
                ThisWorkbook.Sheets("TimeTemplate").Copy Before:=wb.Sheets(1)
                ThisWorkbook.Sheets("TimeTemplate").Copy Before:=wb.Sheets(1)
                ThisWorkbook.Sheets("TimeTemplate").Copy Before:=wb.Sheets(1)
                ThisWorkbook.Sheets("TimeTemplate").Copy Before:=wb.Sheets(1)
                ThisWorkbook.Sheets("TimeTemplate").Copy Before:=wb.Sheets(1)
                ThisWorkbook.Sheets("TimeTemplate").Copy Before:=wb.Sheets(1)
                ThisWorkbook.Sheets("TimeTemplate").Copy Before:=wb.Sheets(1)

                ThisWorkbook.VBProject.VBComponents(ModuleName).Export Tempfile

                wb.VBProject.VBComponents.Import Tempfile
                wb.VBProject.VBComponents.item("ThisWorkbook").CodeModule.AddFromString CodeCopy.Lines(1, NumLines)

                If wb.Sheets("TimeTemplate").Visible = False Then wb.Sheets("TimeTemplate").Visible = True
                If wb.Sheets("TimeTemplate (2)").Visible = False Then wb.Sheets("TimeTemplate (2)").Visible = True
                If wb.Sheets("TimeTemplate (3)").Visible = False Then wb.Sheets("TimeTemplate (3)").Visible = True
                If wb.Sheets("TimeTemplate (4)").Visible = False Then wb.Sheets("TimeTemplate (4)").Visible = True
                If wb.Sheets("TimeTemplate (5)").Visible = False Then wb.Sheets("TimeTemplate (5)").Visible = True
                If wb.Sheets("TimeTemplate (6)").Visible = False Then wb.Sheets("TimeTemplate (6)").Visible = True
                If wb.Sheets("TimeTemplate (7)").Visible = False Then wb.Sheets("TimeTemplate (7)").Visible = True

                wb.Sheets("TimeTemplate").name = "Sun"
                wb.Sheets("TimeTemplate (2)").name = "Sat"
                wb.Sheets("TimeTemplate (3)").name = "Fri"
                wb.Sheets("TimeTemplate (4)").name = "Thu"
                wb.Sheets("TimeTemplate (5)").name = "Wed"
                wb.Sheets("TimeTemplate (6)").name = "Tue"
                wb.Sheets("TimeTemplate (7)").name = "Mon"

                wb.Sheets("Mon").Protect UserInterfaceOnly:=True
                wb.Sheets("Tue").Protect UserInterfaceOnly:=True
                wb.Sheets("Wed").Protect UserInterfaceOnly:=True
                wb.Sheets("Thu").Protect UserInterfaceOnly:=True
                wb.Sheets("Fri").Protect UserInterfaceOnly:=True
                wb.Sheets("Sat").Protect UserInterfaceOnly:=True
                wb.Sheets("Sun").Protect UserInterfaceOnly:=True

                If wb.Sheets("Mon").Cells(4, 5) = "" Then
                    With wb.Sheets("Mon").Cells(4, 3)
                        .FormulaR1C1 = "=NOW()-WEEKDAY(NOW(),2)+1"
                        '.Value = .Value
                    End With
                Else
                    SDate = wb.Sheets("Mon").Cells(4, 5)
                    wb.Sheets("Mon").Cells(4, 5) = SDate - Weekday(SDate, 2) + 1
                End If

                wb.Sheets("Mon").Protect DrawingObjects:=True, Contents:=True, Scenarios:=True

                wb.Sheets("Tue").Cells(4, 3).FormulaR1C1 = "=IF(Mon!RC="""","""",Mon!RC+1)"
                wb.Sheets("Tue").Cells(4, 3).Locked = True
                wb.Sheets("Tue").Protect DrawingObjects:=True, Contents:=True, Scenarios:=True

                wb.Sheets("Wed").Cells(4, 3).FormulaR1C1 = "=IF(Mon!RC="""","""",Mon!RC+2)"
                wb.Sheets("Wed").Cells(4, 3).Locked = True
                wb.Sheets("Wed").Protect DrawingObjects:=True, Contents:=True, Scenarios:=True

                wb.Sheets("Thu").Cells(4, 3).FormulaR1C1 = "=IF(Mon!RC="""","""",Mon!RC+3)"
                wb.Sheets("Thu").Cells(4, 3).Locked = True
                wb.Sheets("Thu").Protect DrawingObjects:=True, Contents:=True, Scenarios:=True

                wb.Sheets("Fri").Cells(4, 3).FormulaR1C1 = "=IF(Mon!RC="""","""",Mon!RC+4)"
                wb.Sheets("Fri").Cells(4, 3).Locked = True
                wb.Sheets("Fri").Protect DrawingObjects:=True, Contents:=True, Scenarios:=True

                wb.Sheets("Sat").Cells(4, 3).FormulaR1C1 = "=IF(Mon!RC="""","""",Mon!RC+5)"
                wb.Sheets("Sat").Cells(4, 3).Locked = True
                wb.Sheets("Sat").Protect DrawingObjects:=True, Contents:=True, Scenarios:=True

                wb.Sheets("Sun").Cells(4, 3).FormulaR1C1 = "=IF(Mon!RC="""","""",Mon!RC+6)"
                wb.Sheets("Sun").Cells(4, 3).Locked = True
                wb.Sheets("Sun").Protect DrawingObjects:=True, Contents:=True, Scenarios:=True

                wb.Sheets("Summary").Shapes.Range(Array("ButtonFolder")).Delete
                wb.Sheets("Summary").Range("D1:E1").ClearContents
                wb.Sheets("Summary").Range("D1:J1").FillLeft
                wb.Sheets("Summary").Columns("Q:R").Delete Shift:=xlToLeft

                wb.Sheets("SummaryEBA").Shapes.Range(Array("ButtonFolder")).Delete
                wb.Sheets("SummaryEBA").Range("D1:E1").ClearContents
                wb.Sheets("SummaryEBA").Range("D1:J1").FillLeft
                wb.Sheets("SummaryEBA").Columns("R:S").Delete Shift:=xlToLeft

                wb.Sheets("UploadSAP").Shapes.Range(Array("ButtonFolder")).Delete
                wb.Sheets("UploadSAP").Range("D1:E1").ClearContents
                wb.Sheets("UploadSAP").Range("D1:J1").FillLeft
                wb.Sheets("UploadSAP").Columns("O:P").Delete Shift:=xlToLeft

                wb.Sheets("Sheet1").Delete
                wb.Sheets("Mon").Select

                wb.Application.Run (Application.ActiveWorkbook.name & "!RemExt")
                wb.Application.Run (Application.ActiveWorkbook.name & "!AssignMacro")

                wb.SaveAs strPath, ThisWorkbook.FileFormat
                wb.Close

                Kill Tempfile
                MsgBox ("New Timesheet Template Saved Successfully" & vbCrLf & strPath)

            End If
        End With
        'End Create Timesheet
    Next i
    With ActiveSheet 'rename sheet and 'save'
        .name = sheetname
        .Visible = xlHidden
    End With
    Call NewTS 'create new blank timesheet
    ActiveSheet.name = "TimeTemplate"
    
    Application.DisplayAlerts = True
    Application.ScreenUpdating = True

    Exit Sub

SafeExit:
        Application.DisplayAlerts = True
        Application.ScreenUpdating = True
        Application.EnableEvents = True
        On Error GoTo 0

'getfile_error:
    'MsgBox ("The following error occurred (" & Err.Number & "):" & vbCrLf & Err.Description)
End Sub
Private Sub SaveExit_Click()
On Error GoTo SafeExit
    
    UserForm4.Hide

SafeExit:
        On Error GoTo 0

End Sub

Sub DeleteTS_Click()
On Error GoTo SafeExit

    Call VBAProject.TimesheetManager.DeleteTS(ListSavedTS)

SafeExit:
        On Error GoTo 0

End Sub

Private Sub ListSavedTS_Click()
On Error GoTo SafeExit

    Row = 1
    Sheets("SavedTS").Cells(2, 1).Value = 1

    RowCount = Sheets("SavedTS").Range("A" & Rows.Count).End(xlUp).Row
    Do Until Sheets("SavedTS").Cells(Row, 2) = ListSavedTS.Value Or _
         Sheets("SavedTS").Cells(Row, 1) = RowCount
        Row = Row + 1
    Loop

    TimesheetName_tb.ControlSource = "SavedTS!B" & Row
    ProjectName_tb.ControlSource = "SavedTS!C" & Row
    Supervisor_cb.ControlSource = "SavedTS!D" & Row
    TimesheetDate_tb.ControlSource = "SavedTS!E" & Row
    Shift_tb.ControlSource = "SavedTS!F" & Row
    DateSaved_tb.ControlSource = "SavedTS!G" & Row

SafeExit:
        On Error GoTo 0

End Sub

Private Sub LoadTS_Click()
On Error GoTo SafeExit

    Row = 2

    Application.EnableEvents = False
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False


    SavePrompt = MsgBox("Would you like to save the current timesheet?", vbYesNo, "Confirm Save")
    If SavePrompt = vbYes Then Call ActionSaveTS 'save TS
    
    Sheets("TimeTemplate").Delete

    RowCount = Sheets("SavedTS").Range("A" & Rows.Count).End(xlUp).Row
    sheetname = ListSavedTS.Value
    
    'find row number of selected item
    Do Until Sheets("SavedTS").Cells(Row, 2) = ListSavedTS.Value Or _
         Sheets("SavedTS").Cells(Row, 1) = RowCount
        Row = Row + 1
    Loop

    Sheets("SavedTS").Rows(Row).Delete 'delete record

    'unhide sheet and rename
    With ThisWorkbook.Sheets(sheetname)
        .Visible = True
        .name = "TimeTemplate"
        .Select
    End With

    Sheets("SavedTS").Range("B2:G" & RowCount + 1).name = "SavedTimesheets"
    ListSavedTS.RowSource = "SavedTimesheets"

SafeExit:
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    On Error GoTo 0

End Sub

Private Sub UserForm_Initialize()
On Error GoTo SafeExit

    MultiPage1.Value = 0
    RowCount = Sheets("SavedTS").Range("A" & Rows.Count).End(xlUp).Row
    ListSavedTS.RowSource = "SavedTS!B2:G" & RowCount + 1

SafeExit:
    On Error GoTo 0

End Sub
Attribute VB_Name = "UserForm5"
Attribute VB_Base = "0{52D89143-AFCE-4760-83FD-157D2802B1FC}{E9CE72E6-8809-4096-82A3-FDF41044FB19}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub CommandButton1_Click()
On Error GoTo SafeExit

Me.Hide
Unload Me

SafeExit:
        On Error GoTo 0

End Sub

Private Sub TestButton_Click()

On Error GoTo err_Connection

Dim adoCn As New ADODB.Connection
Dim sConn, Srv, log, Pwd As String
Dim TimeStart As Double
Dim TimeRun As String

Srv = ThisWorkbook.Sheets("Database").Cells(1, 2).Value
log = ThisWorkbook.Sheets("Database").Cells(2, 2).Value
Pwd = ThisWorkbook.Sheets("Database").Cells(3, 2).Value
CatID = ThisWorkbook.Sheets("Database").Cells(12, 2).Value
      
Application.ScreenUpdating = False

TimeStart = Timer

sConn = "Provider=SQLOLEDB; Data Source=" & Srv & ";" & _
        "Initial Catalog=" & CatID & ";" & _
        "User ID=" & log & "; Password=" & Pwd & "; Trusted_Connection=yes" & _
        "Integrated Security=SSPI;"

With adoCn
    .ConnectionString = sConn
    .Open
    .CommandTimeout = 0
End With

If (adoCn.State And adStateOpen) = adStateOpen Then
    MsgBox "Database Connection Successful"
End If

adoCn.Close
Application.ScreenUpdating = True

Exit Sub

err_Connection:
Application.ScreenUpdating = True
TimeRun = Format((Timer - TimeStart) / 86400, "hh:mm:ss")
MsgBox "Unable to connect to the database. Please check credentials" & vbCrLf & "Timeout " & TimeRun
On Error GoTo 0

End Sub

Private Sub UserForm_Initialize()
On Error GoTo SafeExit

    If ThisWorkbook.Sheets("Database").Cells(4, 2) = False Then
        ThisWorkbook.Sheets("Database").Cells(3, 2) = vbNullString
        CheckBox1.Value = False
    Else
        CheckBox1.Value = True
    End If

SafeExit:
        On Error GoTo 0

End Sub
Attribute VB_Name = "UserForm6"
Attribute VB_Base = "0{A30C4EE6-E7BB-49B1-BCFC-3B3D416AC6AA}{67C3D5C9-BBC9-456D-AAD6-16E13FD7427B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub ButClear_Click()
    UserForm6.BoxNum = Empty
End Sub

Private Sub ButSelect_Click()
On Error GoTo SafeExit
Select Case ActiveSheet.name
    
    Case "TimeTemplate", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"
    
        ActiveSheet.Cells(1, 7) = UserForm6.BoxNum.Value
        Unload UserForm6
    
    End Select
   
SafeExit:
        On Error GoTo 0
    
End Sub

Private Sub Num1_Click()
    UserForm6.BoxNum = UserForm6.BoxNum.Value & 1
End Sub
Private Sub Num2_Click()
    UserForm6.BoxNum = UserForm6.BoxNum.Value & 2
End Sub
Private Sub Num3_Click()
    UserForm6.BoxNum = UserForm6.BoxNum.Value & 3
End Sub
Private Sub Num4_Click()
    UserForm6.BoxNum = UserForm6.BoxNum.Value & 4
End Sub
Private Sub Num5_Click()
    UserForm6.BoxNum = UserForm6.BoxNum.Value & 5
End Sub
Private Sub Num6_Click()
    UserForm6.BoxNum = UserForm6.BoxNum.Value & 6
End Sub
Private Sub Num7_Click()
    UserForm6.BoxNum = UserForm6.BoxNum.Value & 7
End Sub
Private Sub Num8_Click()
    UserForm6.BoxNum = UserForm6.BoxNum.Value & 8
End Sub
Private Sub Num9_Click()
    UserForm6.BoxNum = UserForm6.BoxNum.Value & 9
End Sub
Private Sub Num0_Click()
    UserForm6.BoxNum = UserForm6.BoxNum.Value & 0
End Sub
Private Sub NumDec_Click()
On Error GoTo SafeExit

    If UserForm6.BoxNum = Empty Then
        UserForm6.BoxNum = "0."
    ElseIf Len(UserForm6.BoxNum.Value) - Len(Replace(UserForm6.BoxNum.Value, ".", "")) > 0 Then
        Exit Sub
    Else
        UserForm6.BoxNum = UserForm6.BoxNum.Value & "."
    End If
   
SafeExit:
        On Error GoTo 0
   
End Sub
Attribute VB_Name = "UserForm7"
Attribute VB_Base = "0{DE842D9A-6175-4C8B-B2F2-042352318627}{72B7B3D4-EC5C-485F-875B-3FEFCFC9C6EB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Private Sub PDFButton1_Click()
TextUnHide
PDFActSheet
End Sub

Private Sub PDFButton2_Click()
TextHide8
PDFActSheet
TextUnHide
End Sub

Private Sub PDFButton3_Click()
TextHide6
PDFActSheet
TextUnHide
End Sub

Private Sub PDFButtonBulk_Click()
PDF_All
End Sub
Attribute VB_Name = "UserForm8"
Attribute VB_Base = "0{6DA0D5BC-D70C-417B-B4DE-B133A9B95B48}{C8327BAB-8AAA-424B-9244-4586D36862F8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub ButtonSelect_Click()
Dim DaySel As Date
Dim DayStart As Integer

If IsDate(UserForm8.TextEnter) = False Then
    MsgBox "Please Enter Valid Date", , "Date Select"
    Exit Sub
Else
    DaySel = DateValue(TextEnter)
    DayStart = MasSeq.Cells(2, 5).Value
    UserForm8.TextDay = Format(DaySel, "DD/MM/YYYY (DDD)")
    UserForm8.TextWeekStart = Format(DaySel - Weekday(DaySel, DayStart) + 1, "DD/MM/YYYY (DDD)")
    UserForm8.TextWeekEnd = Format(DaySel - Weekday(DaySel, DayStart) + 7, "DD/MM/YYYY (DDD)")
End If
End Sub

Private Sub TextEnter_AfterUpdate()

Dim DaySel As Date
Dim DayStart As Integer

If IsDate(UserForm8.TextEnter) = False Then
    MsgBox "Please Enter Valid Date", , "Date Select"
    Exit Sub
Else
    DaySel = DateValue(TextEnter)
    DayStart = MasSeq.Cells(2, 5).Value
    UserForm8.TextDay = Format(DaySel, "DD/MM/YYYY (DDD)")
    UserForm8.TextWeekStart = Format(DaySel - Weekday(DaySel, DayStart) + 1, "DD/MM/YYYY (DDD)")
    UserForm8.TextWeekEnd = Format(DaySel - Weekday(DaySel, DayStart) + 7, "DD/MM/YYYY (DDD)")
End If

End Sub

Private Sub TimeWeek_Click()

Dim DaySel, WeekS As Date
Dim DayStart As Integer

If UserForm8.TextDay = vbNullString Then
    MsgBox "Please Enter Valid Date", , "Date Select"
Else
    DaySel = DateValue(UserForm8.TextEnter)
    DayStart = MasSeq.Cells(2, 5).Value
    WeekS = DaySel - Weekday(DaySel, DayStart) + 1
    getfile "Week", WeekS, DayStart
    Unload UserForm8
End If

End Sub

Private Sub TimeDay_Click()

Dim DayName As String
Dim DaySel As Date
Dim DayStart As Integer

If UserForm8.TextDay = vbNullString Then
    MsgBox "Please Enter Valid Date", , "Date Select"
Else
    DayName = Mid(CStr(UserForm8.TextDay), 13, 3)
    DaySel = DateValue(UserForm8.TextEnter)
    getfile DayName, DaySel, DayStart
    Unload UserForm8
End If

End Sub

' InQuest injected base64 decoded content
' xL\z]v^i
' bzWK

INQUEST-PP=macro
