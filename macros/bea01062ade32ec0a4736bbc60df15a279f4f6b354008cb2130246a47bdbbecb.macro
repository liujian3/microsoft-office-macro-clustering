Attribute VB_Name = "MEKOS"
Option Explicit

Private Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)

Sub ExecuteSingleFile()

    SetStringProperty key:="docExtension", value:=".pdf"
    SetNumberProperty key:="docFormat", value:=wdFormatPDF
    SetBooleanProperty key:="docProgress", value:=True
    SetBooleanProperty key:="docSingleFile", value:=True
    SetBooleanProperty key:="saveOnExit", value:=False

    FormLetterCreation
End Sub

Sub Execute()
    SetStringProperty key:="docExtension", value:=".pdf"
    SetNumberProperty key:="docFormat", value:=wdFormatPDF
    SetBooleanProperty key:="docProgress", value:=True
    SetBooleanProperty key:="docSingleFile", value:=False
    SetBooleanProperty key:="saveOnExit", value:=False
    
    FormLetterCreation
End Sub

Sub EditSingleFile()

    SetStringProperty key:="docExtension", value:=".pdf"
    SetNumberProperty key:="docFormat", value:=wdFormatPDF
    SetBooleanProperty key:="docProgress", value:=True
    SetBooleanProperty key:="docSingleFile", value:=True
    SetBooleanProperty key:="saveOnExit", value:=True
    
    AddButton
End Sub

Sub Edit()

    SetStringProperty key:="docExtension", value:=".pdf"
    SetNumberProperty key:="docFormat", value:=wdFormatPDF
    SetBooleanProperty key:="docProgress", value:=True
    SetBooleanProperty key:="docSingleFile", value:=False
    SetBooleanProperty key:="saveOnExit", value:=True
     
    AddButton
End Sub

Sub Merge()

    SetStringProperty key:="docExtension", value:=".docx"
    SetNumberProperty key:="docFormat", value:=wdFormatXMLDocument
    SetBooleanProperty key:="docProgress", value:=False
    SetBooleanProperty key:="docSingleFile", value:=False
    SetBooleanProperty key:="saveOnExit", value:=False
        
    FormLetterCreation
End Sub

Sub MergeExecute()

    SetStringProperty key:="docExtension", value:=".docx"
    SetNumberProperty key:="docFormat", value:=wdFormatXMLDocument
    SetBooleanProperty key:="docProgress", value:=False
    SetBooleanProperty key:="docSingleFile", value:=False
    SetBooleanProperty key:="saveOnExit", value:=False
        
    'Ausf|fffd|hren ohne Dokument zu schlie|fffd|en
    ExecuteFormLetterCreation
    
    SetStringProperty key:="docExtension", value:=".pdf"
    SetNumberProperty key:="docFormat", value:=wdFormatPDF
    SetBooleanProperty key:="docProgress", value:=True
    SetBooleanProperty key:="docSingleFile", value:=False
    SetBooleanProperty key:="saveOnExit", value:=False
    
    FormLetterCreation
End Sub
    
    
Sub CheckDocument()
    Dim cnt As Integer    'Anzahl der zu erstellenden Dokumente
    Dim MMerge As Word.MailMerge
    Dim Result As Boolean
    
    Set MMerge = ActiveDocument.MailMerge
    cnt = MMerge.DataSource.RecordCount  'Anzahl der Dokumente bestimmen
    
    If MMerge.State <> wdMainAndDataSource Or cnt <= 0 Then
        'Status nicht OK, keine Datenquelle gefunden oder |fffd|hnliches
        Dim msgResult As String
        msgResult = MsgBox("Das Dokument ist fehlerhaft und kann nicht verarbeitet werden.", vbCritical + vbOKOnly, "Dokument Fehlerhaft")
        Exit Sub
    End If
    
End Sub

Sub AddButton()
    Dim shape As InlineShape
    Dim CreateButton As MSForms.CommandButton
    
    If ActiveDocument.Bookmarks.Exists("ButtonPosition") = True Then
        ActiveDocument.Bookmarks("ButtonPosition").Select
    Else
        ActiveDocument.Paragraphs(1).Range.Select
    End If
    
    '.Select
    Set shape = Selection.InlineShapes.AddOLEControl(ClassType:="Forms.CommandButton.1")
    With shape
         .Width = 150
         .AlternativeText = "Serienbrief erstellen"
    End With
    
    Set CreateButton = shape.OLEFormat.Object
    
    CreateButton.Caption = "Serienbrief erstellen"
    CreateButton.BackColor = &H8000000D
    
    'Code f|fffd|r Auswfuehrung in CommandButton1_Click
    
End Sub

Sub FormLetterCreation()

    Dim ADoc As Word.Document
    Set ADoc = ActiveDocument
   
    RemoveButton ADoc:=ADoc
    
    On Error GoTo errorHandler
    
    RemovePictures
 
    ExecuteFormLetterCreation
    
    CloseDocument ADoc:=ADoc
    
errorHandler:
    If Not Err.Number = 0 Then
        LogInformation "An error has occurred " & Err.Number & " " & Err.Description & ". The macro will end."
        ' go back to the line of code that caused the problem
        Resume Next
    End If
End Sub

Private Sub RemovePictures()

    Dim IsRemovePicture As Boolean
    IsRemovePicture = ActiveDocument.CustomDocumentProperties.Item("remove_pictures")
    
    If IsRemovePicture Then
        Dim Header As HeaderFooter
        Dim xShape As shape
        
headerShapeStart:
        For Each Header In ActiveDocument.Sections(1).Headers
            For Each xShape In Header.Shapes
                If EndsWith(xShape.Name, "_background") Then
                    xShape.Select
                    Selection.Delete
                    'For Each geht nicht wenn delete
                    GoTo headerShapeStart
                End If
            Next xShape
        Next Header
        
normalShapeStart:
        ActiveDocument.Paragraphs(1).Range.Select
        Selection.Collapse wdCollapseStart
        
        For Each xShape In ActiveDocument.Shapes
            If EndsWith(xShape.Name, "_background") Then
                xShape.Select
                Selection.Delete
                'For Each geht nicht wenn delete
                GoTo normalShapeStart
            End If
        Next xShape
        
        ActiveDocument.Paragraphs(1).Range.Select
        Selection.Collapse wdCollapseStart
        
    End If
End Sub

Private Sub RemoveButton(ADoc As Document)

    Dim saveOnExit As Boolean
    saveOnExit = ADoc.CustomDocumentProperties.Item("saveOnExit")
    
    'Wenn bisher keine |fffd|nderung, dann beim schlie|fffd|en nicht speichern
    If ActiveDocument.Saved = True And saveOnExit = True Then
        SetBooleanProperty key:="saveOnExit", value:=False
    End If

    Dim iShape As InlineShape
     
    For Each iShape In ActiveDocument.InlineShapes
        If iShape.Type = wdInlineShapeOLEControlObject Then
            If iShape.OLEFormat.Object.Caption = "Serienbrief erstellen" Then
                iShape.Select
                Selection.Delete
                Exit For
            End If
        End If
    Next iShape

End Sub

Private Sub ExecuteFormLetterCreation()

On Error GoTo errorHandler

    ' Property die zeigt dass das Makro ausgef|fffd|hrt wurde entfernen
    SetBooleanProperty key:="formLetterCreated", value:=False

    ' Felder aktualisieren
    If ActiveDocument.Fields.Update = 0 Then
        'OK
    Else
        MsgBox "Field " & ActiveDocument.Fields.Update & _
        " has an error"
    End If
    
    ' Repaginate the document.
    ActiveDocument.Repaginate
    
    Dim ADoc As Word.Document
    Set ADoc = ActiveDocument
    
    Dim MMerge As Word.MailMerge
    Set MMerge = ADoc.MailMerge
    
    'In einzelne Dokumente speichern
    If MMerge.State = wdMainAndDataSource Then
        Dim extension As String
        Dim format As WdSaveFormat
        Dim ShowProgress As Boolean
        Dim SingleFile As Boolean
        extension = ADoc.CustomDocumentProperties.Item("docExtension")
        format = ADoc.CustomDocumentProperties.Item("docFormat")
        ShowProgress = ADoc.CustomDocumentProperties.Item("docProgress")
        SingleFile = ADoc.CustomDocumentProperties.Item("docSingleFile")
        SaveAs extension:=extension, format:=format, ShowProgress:=ShowProgress, SingleFile:=SingleFile
    End If
      
    ADoc.Activate
        
    ' Property hinzuf|fffd|gen die zeigt dass das Makro ausgef|fffd|hrt wurde
    SetBooleanProperty key:="formLetterCreated", value:=True
    
    Dim saveOnExit As Boolean
    saveOnExit = ADoc.CustomDocumentProperties.Item("saveOnExit")
    
    If saveOnExit Then
        ADoc.Save
    End If

errorHandler:
    If Not Err.Number = 0 Then
        LogInformation "An error has occurred " & Err.Number & " " & Err.Description & ". The macro will end."
        ' go back to the line of code that caused the problem
        Resume Next
    End If

End Sub

Private Sub CloseDocument(ADoc As Document)

    Dim saveOnExit As Boolean
    saveOnExit = ADoc.CustomDocumentProperties.Item("saveOnExit")

    LogInformation "OpenDocuments " & Application.Documents.Count

    ' Wenn nichts mehr offen ist, Applikation beenden
    If Application.Documents.Count = 1 Then
        Application.Quit (True)
    Else
        Dim allClosed As Boolean
        allClosed = True
        
        Dim docLoop As Document
                
        For Each docLoop In Documents
            If Not docLoop = ADoc Then
                LogInformation "Document " & docLoop.Name
                
                docLoop.ActiveWindow.Visible = True
                If docLoop.Saved = False And saveOnExit Then
                    docLoop.Save
                    'x = MsgBox("Bitte sichern Sie Ihre Arbeit und beenden Sie Word.", vbCritical + vbOKOnly, "Word beenden")
                    'ActiveDocument.Close (True)
                    allClosed = False
                Else
                   docLoop.Close (False)
                End If
            End If
        Next docLoop
        
        If allClosed Then
            Application.Quit (True)
        End If
        
        Dim x
        x = MsgBox("Die Ausf|fffd|hrung wurde abgeschlossen. Bitte speichern und schlie|fffd|en Sie das Dokument nun.", vbOKOnly, "Word beenden")
    End If
    
End Sub

Sub MapMailMergeFields()

If ActiveDocument.MailMerge.State = wdMainAndDataSource Then
   Dim wdBuiltIn(0 To 11) As WdMappedDataFields
   Dim wdFieldNames(0 To 11) As String

   wdBuiltIn(0) = wdFirstName
   wdFieldNames(0) = "Vorname"

   wdBuiltIn(1) = wdLastName
   wdFieldNames(1) = "Nachname"
   
   wdBuiltIn(2) = wdCompany
   wdFieldNames(2) = "Firma"
   
   wdBuiltIn(3) = wdAddress1
   wdFieldNames(3) = "Name2"
   
   wdBuiltIn(4) = wdAddress2
   wdFieldNames(4) = "Name3"
   
   wdBuiltIn(5) = wdAddress3
   wdFieldNames(5) = "Strasse"
   
    wdBuiltIn(6) = wdPostalCode
   wdFieldNames(6) = "PLZ"
   
   wdBuiltIn(7) = wdCity
   wdFieldNames(7) = "Ort"
   
   wdBuiltIn(8) = wdCountryRegion
   wdFieldNames(8) = "Land"
   
   wdBuiltIn(9) = wdEmailAddress
   wdFieldNames(9) = "EMail"
   
   wdBuiltIn(10) = wdUniqueIdentifier
   wdFieldNames(10) = "UnserZeichen"
   
   wdBuiltIn(11) = wdCourtesyTitle
   wdFieldNames(11) = "Anrede"
   
   Call MapDataFields(objDocument:=ActiveDocument, _
      wdBuiltInFields:=wdBuiltIn, _
      strDataFieldName:=wdFieldNames)
 End If

End Sub

Private Sub LogInformation(LogMessage As String)
    Dim Dir As String
    Dim LogFileName As String

    Dir = ActiveDocument.CustomDocumentProperties.Item("output_dir")   '"D:\build\" 'Ausgabepfad (Backslash am Ende!)
    LogFileName = Dir & "exec.LOG"

    Dim FileNum As Integer
    FileNum = FreeFile ' next file number
    Open LogFileName For Append As #FileNum ' creates the file if it doesn't exist
    Print #FileNum, LogMessage ' write information at the end of the text file
    Close #FileNum ' close the file
End Sub

Private Sub SaveAs(extension As String, format As WdSaveFormat, ShowProgress As Boolean, SingleFile As Boolean)
    ' ACHTUNG: Bereits vorhanden Dateien im Zielverzeichnis werden ohne R|fffd|ckfrage |fffd|berschieben!
    Dim Dir As String
    Dim cnt As Integer    'Anzahl der zu erstellenden Dokumente
    Dim MMerge As Word.MailMerge
    Dim MMergeDS As Word.MailMergeDataSource    'Datenquelle des Seriendruckdokuments
    Dim FileName As String 'Name der Zieldatei
    Dim CDoc As Word.Document
   
    
    Dir = ActiveDocument.CustomDocumentProperties.Item("output_dir")   '"D:\build\" 'Ausgabepfad (Backslash am Ende!)
    Const FileNameField As String = "ID"  'Name des DB-Feldes, dass den Dateinamen enth|fffd|llt.
   
    Set MMerge = ActiveDocument.MailMerge
    Set MMergeDS = MMerge.DataSource
    
    MMerge.Destination = wdSendToNewDocument
    
    cnt = MMerge.DataSource.RecordCount  'Anzahl der Dokumente bestimmen
    
    If ShowProgress Then
        ProgressForm.Show vbModeless
        ProgressForm.textFrom.Text = "0"
        ProgressForm.textTo.Text = CStr(cnt)
    End If
    
    If SingleFile Then
        Dim i As Integer
        i = 1
        MMergeDS.ActiveRecord = i
        MMergeDS.FirstRecord = i 'Festlegen, dass nur dieser_
        MMergeDS.LastRecord = cnt  'eine Datensatz ausgegeben wird
        MMerge.Execute  'Seriendruck ausf|fffd|hren (Neues Dokument wird erstellt und ge|fffd|ffnet)
        
        'Serienbrief Dokument merken
        Set CDoc = ActiveDocument
        CDoc.ActiveWindow.Visible = False
        
        ' Repaginate the document.
        CDoc.Repaginate
        
        ' Felder aktualisieren
        CDoc.Fields.Update
        
        FileName = Dir & MMergeDS.DataFields(FileNameField).value & extension
       
        CDoc.SaveAs2 FileName:=FileName, FileFormat:=format, AddToRecentFiles:=False 'PDF-Dokument speichern
        CDoc.Close SaveChanges:=wdDoNotSaveChanges    'Dokument ohne .docx zu speichern schlie|fffd|en

        If ShowProgress Then
            ProgressForm.textFrom.Text = CStr(i)
            ProgressForm.Repaint
        Else
            Sleep 1000
        End If
    Else
    
        For i = 1 To cnt
            MMergeDS.ActiveRecord = i
            MMergeDS.FirstRecord = i 'Festlegen, dass nur dieser_
            MMergeDS.LastRecord = i  'eine Datensatz ausgegeben wird
            MMerge.Execute  'Seriendruck ausf|fffd|hren (Neues Dokument wird erstellt und ge|fffd|ffnet)
            
            'Serienbrief Dokument merken
            Set CDoc = ActiveDocument
            CDoc.ActiveWindow.Visible = False
            
            ' Repaginate the document.
            CDoc.Repaginate
            
            ' Felder aktualisieren
            CDoc.Fields.Update
            
            FileName = Dir & MMergeDS.DataFields(FileNameField).value & extension
           
            CDoc.SaveAs2 FileName:=FileName, FileFormat:=format, AddToRecentFiles:=False 'PDF-Dokument speichern
            CDoc.Close SaveChanges:=wdDoNotSaveChanges    'Dokument ohne .docx zu speichern schlie|fffd|en
    
            If ShowProgress Then
                ProgressForm.textFrom.Text = CStr(i)
                ProgressForm.Repaint
            Else
                Sleep 1000
            End If
        Next
    
    End If
    
    If ShowProgress Then
        ProgressForm.Hide
    End If
End Sub

Private Sub MapDataFields(ByRef objDocument As Document, _
      ByRef wdBuiltInFields() As WdMappedDataFields, _
      ByRef strDataFieldName() As String)

     
    Dim intCount As Integer
    With objDocument.MailMerge.DataSource
        For intCount = LBound(wdBuiltInFields) To UBound(wdBuiltInFields)
            .MappedDataFields(wdBuiltInFields(intCount)).DataFieldIndex = _
            .FieldNames(strDataFieldName(intCount)).Index
        Next intCount
    End With
 
End Sub

Public Function HasWatermark()
    HasWatermark = False
    Dim oHdr As HeaderFooter
    Dim oShape As Word.shape

    Set oHdr = ActiveDocument.Sections(1).Headers(wdHeaderFooterPrimary)
    
    For Each oShape In oHdr.Shapes
            If oShape.Name = "draftWatermark" Then
                HasWatermark = True
            Exit For
        End If
    Next

End Function

Sub InsertWaterMark()

    On Error GoTo ErrHandler

    Dim oHdr As HeaderFooter
    Dim oShape As Word.shape

    Set oHdr = ActiveDocument.Sections(1).Headers(wdHeaderFooterPrimary)
    Set oShape = oHdr.Shapes.AddTextEffect(msoTextEffect1, "ENTWURF", "Arial", 1, False, False, 0, 0)
         
    With oShape
        .Name = "draftWatermark"
        .TextEffect.NormalizedHeight = False
        .Line.Visible = False
         
        With .Fill
            .Visible = True
            .Solid
            .ForeColor.RGB = Gray
            .Transparency = 0.5
        End With
         
        .Rotation = 315
        .LockAspectRatio = True
        .Height = InchesToPoints(2.42)
        .Width = InchesToPoints(6.04)
         
        With .WrapFormat
            .AllowOverlap = True
            .Side = wdWrapNone
            .Type = 3
             
        End With
         
        .RelativeHorizontalPosition = wdRelativeVerticalPositionMargin
        .RelativeVerticalPosition = wdRelativeVerticalPositionMargin

        .Left = wdShapeCenter
        .Top = wdShapeCenter
    End With
    
    Selection.Collapse wdCollapseStart
     
    Exit Sub
     
ErrHandler:
    If Not Err.Number = 0 Then
        LogInformation "An error occured trying to insert the watermark: " & Err.Number & " " & Err.Description & ". The macro will end."
    End If
End Sub

 
Sub RemoveWaterMark()
     
    On Error GoTo ErrHandler
    
    Dim oHdr As HeaderFooter
    Dim oShape As Word.shape

    Set oHdr = ActiveDocument.Sections(1).Headers(wdHeaderFooterPrimary)
    oHdr.Shapes("draftWatermark").Delete
    
    Exit Sub
     
ErrHandler:
    If Not Err.Number = 0 Then
        LogInformation "An error occured trying to remove the watermark: " & Err.Number & " " & Err.Description & ". The macro will end."
    End If
     
End Sub

Private Sub SetStringProperty(key As String, value As String)
    SetAProperty key:=key, value:=value, t:=msoPropertyTypeString
End Sub

Private Sub SetBooleanProperty(key As String, value As Boolean)
    SetAProperty key:=key, value:=value, t:=msoPropertyTypeBoolean
End Sub

Private Sub SetNumberProperty(key As String, value As Long)
    SetAProperty key:=key, value:=value, t:=msoPropertyTypeNumber
End Sub

Private Sub SetAProperty(key As String, value As Variant, t As MsoDocProperties)
    Dim ADoc As Word.Document
    Set ADoc = ActiveDocument
    
    If DocPropertyExists(key) Then
        ADoc.CustomDocumentProperties.Item(key).value = value
    Else
        ADoc.CustomDocumentProperties.Add Name:=key, LinkToContent:=False, value:=value, Type:=t
    End If

End Sub

Function DocPropertyExists(key As String) As Boolean
    DocPropertyExists = False
    Dim dpThis As DocumentProperty
    For Each dpThis In ActiveDocument.CustomDocumentProperties
            If UCase(key) = UCase(dpThis.Name) Then
                DocPropertyExists = True
            Exit For
        End If
    Next
End Function

Function EndsWith(str As String, ending As String) As Boolean
     Dim endingLen As Integer
     endingLen = Len(ending)
     EndsWith = (Right(Trim(UCase(str)), endingLen) = UCase(ending))
End Function

Attribute VB_Name = "ProgressForm"
Attribute VB_Base = "0{14A3B784-225C-414B-87DD-54D59C650D86}{D795C49A-9E60-41D7-9903-8217E9305094}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
Private oWordEvents As WordEvents

Private Sub Document_Open()
 Set oWordEvents = New WordEvents
 Dim exec As Boolean
 Dim watermark As Boolean
 exec = ActiveDocument.CustomDocumentProperties.Item("execute_macro")
 watermark = ActiveDocument.CustomDocumentProperties.Item("add_watermark")
  
 If watermark = True Then
    If Not MEKOS.HasWatermark Then
        Call MEKOS.InsertWaterMark
    End If
 ElseIf MEKOS.HasWatermark Then
    Call MEKOS.RemoveWaterMark
 End If
 
 Call MEKOS.MapMailMergeFields
     
 If exec = True Then
    Call MEKOS.CheckDocument
 End If
 
End Sub

Private Sub CommandButton1_Click()
 Call MEKOS.FormLetterCreation
End Sub

Attribute VB_Name = "WordEvents"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private WithEvents oWordApp As Word.Application
Attribute oWordApp.VB_VarHelpID = -1

Private Sub Class_Initialize()
Set oWordApp = Word.Application 'The current running application
End Sub

Private Sub oWordApp_DocumentBeforePrint(ByVal Doc As Document, Cancel As Boolean)
    Dim x As Integer
    x = MsgBox("Das Dokument kann nicht aus Word gedruckt werden.", _
        vbOKOnly)
    Cancel = True
End Sub





INQUEST-PP=macro
