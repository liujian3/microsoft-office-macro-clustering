Attribute VB_Name = "EndofMonthMove"
Sub MoveConvertedSchools()
    
    wsLists.Activate
    ActiveSheet.Range("A1").Select
    MsgBox "Is the company name and number in the 'Lists' worksheet for each school you are moving? Please check the following:" & vbCr & vbCr & _
    "1. 'CompanyNames_Numbers' has the company name and number (from the CTA)" & vbCr & vbCr & _
    "2. You've updated the list using the button below the list if the company is not already there" & vbCr & vbCr & _
    "3. Make sure that the formulas in 'Company_Numbers' and 'Company_Names' are picking up the correct names and numbers" & _
    vbCr & vbCr & "(You can cancel out of the next dialogue box if you wish to stop the programme running.)", vbInformation, "Company Name"
    
    Dim dy As Integer
    Dim mn As Integer
    Dim yr As Integer
    Dim pt As PivotTable

    dy = Day(Now())

    'If it's bet 25th to 31st, then show the month as next month, otherwise show this month
    If dy > 24 Then
    mn = Month(Now) + 1
    Else: mn = Month(Now())
    End If

    If mn = 12 And dy > 15 Then
    yr = Year(Now) + 1
    Else: yr = Year(Now())
    End If

    Dim the_conversion_date As Date, the_input As String, guess_date As Date
    
    'put in first conversion date as guess (unless this is more than 60 days away - see if statement below)
    guess_date = wsConverting.Range("Converting[Programmed Conversion Date]").End(xlUp).Offset(1, 0)
 
showInputBox:
    If wsConverting.Range("Converting[Programmed Conversion Date]").End(xlUp).Offset(1, 0).Value > Int(Now()) + 60 Then
    the_input = Application.InputBox("Choose a conversion date to move (01/mm/yyyy)", "Academies to move", "01/" & mn & "/" & yr)
    Else
    the_input = Application.InputBox("Choose a conversion date to move (01/mm/yyyy)", "Academies to move", Format(guess_date, "dd/mm/yyyy"))
    End If

    If the_input = "" Then
    MsgBox "You must click Cancel to exit.", 48, "You clicked OK but entered nothing."
            GoTo showInputBox
        ElseIf IsDate(the_input) Then
        the_conversion_date = DateValue(the_input)
        ElseIf the_input = False Then
    MsgBox "You clicked the Cancel button, Input Box will close.", 64, "Cancel was clicked."
    Exit Sub
        Else
        MsgBox "Invalid date"
    End If

    wsConverting.Activate

Dim searchRange As Range
Dim CountDateNumber As Integer
Dim dateCellRef As Range
Dim schNameCellRef As String
Dim SchName As String
Dim FirstAddress As String
Dim schNameArray() As String
Dim TrustDetails As String
Dim LoopCounter As Integer
LoopCounter = 1

'Count how many conversion dates there are in order to set the array number
CountDateNumber = Application.CountIf(Range("Converting[Programmed Conversion Date]"), the_conversion_date)
ReDim schNameArray(1 To CountDateNumber)

'set the search range to be the date column
Set searchRange = Range("Converting[Programmed Conversion Date]")

'set the dateCellRef to be the conversion date
Set dateCellRef = wsConverting.Range("Converting").Find(What:=the_conversion_date, SearchOrder:=xlByColumns)
wsConverting.Range("Converting").Find(What:=the_conversion_date, SearchOrder:=xlByColumns).Select

'Message if date not found
If dateCellRef Is Nothing Then
    MsgBox "No date found!"
    'set the first address value to use as end of loop criteria
    Else: FirstAddress = dateCellRef.Address
    dateCellRef.Select

    Do
        'Take first value for schName (currently selected cell)
        'SchName = ActiveCell.Offset(0, -5).Value 'Changed to first cell in row in case a column is added
        SchName = Cells(Application.ActiveCell.Row, 1).Value
        'find next date cell
        Set dateCellRef = searchRange.FindNext(dateCellRef)
        dateCellRef.Select
        'update the array with next value
        schNameArray(LoopCounter) = SchName
        LoopCounter = LoopCounter + 1
    Loop While dateCellRef.Address <> FirstAddress

End If

wsConverting.Range("Converting").Find(What:=the_conversion_date, SearchOrder:=xlByColumns).Select

    
    For n = LBound(schNameArray) To UBound(schNameArray)
    txt = txt & schNameArray(n) & vbCrLf
  Next n
  
  'MsgBox "The following schools will be moved to 'Converted':" & vbCrLf & vbCrLf & txt, 1, "Schools found"
    Dim move_sch As Integer
    Dim movePrompt As String
    Dim moveTitle As String
    
     ' Promt
    movePrompt = "The following schools will be moved to 'Converted':" & vbCrLf & vbCrLf & txt
 
    ' Dialog's Title
    moveTitle = "Schools found"
 
    'Display MessageBox
    move_sch = MsgBox(movePrompt, vbOKCancel, moveTitle)
 
    ' Check pressed button
    If move_sch = vbCancel Then
    MsgBox "You clicked the Cancel button, school(s) will not be moved.", 64, "Cancel was clicked." 'vbInformation = 64
    Exit Sub
    Else
    End If


'Now that schools have been found they need to be moved:

Dim school_phase As String, DfeCode As Integer, Type_of_conv As String, Type_of_Trust As String, Sponsor_details As String
Dim school_name As String, x As Integer, AgeRange As String, CompanyNumber As String

i = 1
x = 1
'CountDateNumber =

Do
    school_name = schNameArray(x)

    'school_phase = ActiveCell.Offset(0, -3).Value
    school_phase = Range("Converting[Name of converting establishment]").Find(schNameArray(x)).Offset(0, 1)
    'DfeCode = ActiveCell.Offset(0, -2).Value
    AgeRange = Range("Converting[Name of converting establishment]").Find(schNameArray(x)).Offset(0, 2)
    DfeCode = Range("Converting[Name of converting establishment]").Find(schNameArray(x)).Offset(0, 3)
    'Type_of_conv = ActiveCell.Offset(0, 1).Value
    Type_of_conv = Range("Converting[Name of converting establishment]").Find(schNameArray(x)).Offset(0, 6)
    'Type_of_Trust = ActiveCell.Offset(0, 2).Value
    Type_of_Trust = Range("Converting[Name of converting establishment]").Find(schNameArray(x)).Offset(0, 7)
    'Sponsor_details = ActiveCell.Offset(0, 3).Value
    Sponsor_details = Range("Converting[Name of converting establishment]").Find(schNameArray(x)).Offset(0, 8)
    
    'Select the worksheet to move the cells to
    wsConverted.Activate
    'Select the last cell in 'name' column
    'Range("Converted[Name of converted establishment]").End(xlDown).Select
    Range("Converted[Name of converted establishment]").End(xlUp).Offset(1, 0).Select

    'Insert row below last row
     ActiveCell.Offset(0, 0).EntireRow.Insert
     'Select inserted row and set font colour to red
    ActiveSheet.ListObjects("Converted").ListRows(1).Range.Font.Color = vbRed
    'Range("Converted[Name of converted establishment]").End(xlUp).Offset(1, 0).Select
    'Insert school name into row
    'ActiveCell.Value = school_name
    ActiveCell.Value = schNameArray(x)
    
    'TrustDetails =
    'MsgBox Application.Match(Sponsor_details, [CompanyNames_Numbers], 0)

    
    'The next bit adds a dialog box to ask if the user knows the Trust name
    Dim FirstTwoWords As String

On Error GoTo NoMaintSchTrust
    FirstTwoWords = Left(Sponsor_details, InStr(InStr(1, Sponsor_details, " ") + 1, Sponsor_details, " ", vbTextCompare) - 1)
On Error GoTo 0
        If FirstTwoWords = "" Then
        GoTo ContAfterNoMaintSchTrust
        Else


        wsLists.Activate
        On Error GoTo NoCompany
        wsLists.Range("CompanyNames_Numbers").Find(What:=FirstTwoWords).Select
        FullTitle = ActiveCell.Value
        End If
    
    Dim TrustGuess As String
    
    TrustGuess = MsgBox("Is the Trust for " & schNameArray(x) & " '" & FullTitle & "'?", vbYesNo, "Trust Name")
    'Dim ButtonClicked As VbMsgBoxResult 'gives you the options for each button i.e. vbYes etc.
        'If ButtonClicked = vbYes Then
        If TrustGuess = vbYes Then
        wsConverted.Range("Converted[Trust / sponsor details]").End(xlUp).Offset(1, 0).Value = FullTitle
        Else
            Load frmCompanyName
            frmCompanyName.txtSchoolName.Value = schNameArray(x) 'school_name
            'cboCompanyName.ListIndex = FullTitle
            frmCompanyName.Show
    
    'end of Trust name box
        End If
        
ContAfterNoMaintSchTrust:

    'Add values
    Range("Converted[Phase]").End(xlUp).Offset(1, 0).Value = school_phase
    Range("Converted[Age Range]").End(xlUp).Offset(1, 0).Value = AgeRange
    Range("Converted[DfE Code]").End(xlUp).Offset(1, 0).Value = DfeCode
    Range("Converted[Completion Date]").End(xlUp).Offset(1, 0).Value = the_conversion_date
    Range("Converted[Type of Conversion - Voluntary or Sponsored]").End(xlUp).Offset(1, 0).Value = Type_of_conv
    Range("Converted[Type of Trust]").End(xlUp).Offset(1, 0).Value = Type_of_Trust
    Range("Converted[Trust / sponsor details]").End(xlUp).Offset(1, 0).Value = Sponsor_details
    Range("Converted[Company number]").End(xlUp).Offset(1, 0).Value = Application.WorksheetFunction.Index(wsLists.Range("Company_Numbers"), Application.WorksheetFunction.Match(wsConverted.Range("Converted[Trust / sponsor details]").End(xlUp).Offset(1, 0), wsLists.Range("CompanyNames"), 0))
    
    'get cell ref for school name and delete the row that contains the school from 'Converting'
    wsConverting.Activate
    
    Dim oRange As Range
    Dim cellRef As String
    
    Set oRange = wsConverting.Range("Converting[Name of converting establishment]").Find(school_name, LookAt:=xlPart)
    cellRef = oRange.Address(0, 0)
    'Range(cellRef).Select
    Range(cellRef).EntireRow.Delete
    
    'get cell ref and value for age range, add to 'converted'
    wsMaintained.Activate
    
    Dim oRange2 As Range
    Dim cellRef2 As String
    
    On Error Resume Next
    Set oRange2 = wsMaintained.Range("Maintained[Establishment Name]").Find(school_name, LookAt:=xlPart)
    cellRef2 = oRange2.Address(0, 0)
    Range(cellRef2).Select
    AgeRange = ActiveCell.Offset(0, 5).Value
    
    'Paste age range into 'converted'
    Dim oRange3 As Range
    Dim cellRef3 As String
    wsConverted.Activate
    
    Set oRange3 = wsConverted.Range("Converted[Name of converted establishment]").Find(school_name, LookAt:=xlPart)
    cellRef3 = oRange3.Address(0, 0)
    Range(cellRef3).Offset(0, 3).Value = "'" & AgeRange
    
    'Delete school from 'Maintained'
    wsMaintained.Activate
    
    Dim oRange4 As Range
    Dim cellRef4 As String
    
    
    Set oRange4 = wsMaintained.Range("Maintained[Establishment Name]").Find(school_name, LookAt:=xlPart)
    cellRef4 = oRange4.Address(0, 0)
    'Range(cellRef).Select
    Range(cellRef4).EntireRow.Delete
    On Error GoTo 0
    
ContAfterNoSchFound:
    
    i = i + 1
    x = x + 1
Loop While x <= CountDateNumber
    
    'MsgBox school_name & " moved"
     
     wsConverted.Range("Converted").Rows.AutoFit
     wsConverted.Select
    
    'refreshes all pivot tables in Converted and Converting
    For Each pt In wsConverted.PivotTables

        pt.RefreshTable

    Next pt

    For Each pt In wsConverting.PivotTables

        pt.RefreshTable

    Next pt
         
  MsgBox "Complete"

    
    Exit Sub
'************************************
'ERROR HANDLING
'************************************
NoMaintSchTrust:
    MsgBox SchName & " was not found in the 'Maintained' tab. You will need to select a Trust name for this school." & vbNewLine & vbNewLine & _
    "You will also have to delete this school from the 'Maintained' tab manually."
    Load frmCompanyName
            frmCompanyName.txtSchoolName.Value = schNameArray(x) 'school_name
            frmCompanyName.Show
Resume ContAfterNoMaintSchTrust

NoCompany:
    MsgBox "You need to add the company name and number from the CTA and then update the lists in the 'Lists' worksheet." & _
    " To do this:" & vbCr & "1. Add the company name and number to the first list in the 'Lists' worksheet" & vbCr & _
    "2. Extend the formula in the second column to get the company number" & vbCr & _
    "3. Click the button below the first column to update the named range" & vbCr & vbCr & _
    "It's important to do all this to update the lists for future use.", vbCritical, "No Company"
Resume ContAfterNoMaintSchTrust

End Sub

Sub test()

    Dim test As String
    
    MsgBox Application.WorksheetFunction.Index(wsLists.Range("Company_Numbers"), Application.WorksheetFunction.Match(wsConverted.Range("Converted[Trust / sponsor details]").End(xlUp).Offset(1, 0), wsLists.Range("CompanyNames"), 0))
    'MsgBox test


End Sub
Attribute VB_Name = "ListsRanges"
Sub Lists1()

'This macro updates the range "CompanyNames_Numbers" to include any added companies
'Without this the range would miss out the last entry
'It runs from the lists tab so this doesn't need activating first
Dim my_start As Range
Dim my_end As Range

Set my_start = Range("A2")
Set my_end = my_start.End(xlDown)
Range(my_start, my_end).Name = "CompanyNames_Numbers"


End Sub
Attribute VB_Name = "MonthlyPrintout"
Sub ImageToWord()

'NEEDS WORD REFERENCE LIBRARY
'COULD ALSO CHANGE STYLES TO CLEAR FOR PRINTING THEN CHANGE BACK

     Dim objWord, objDoc As Object, objSelection As Object, oILShp As InlineShapes
    ActiveWindow.View = xlNormalView
    
    Worksheets("Converted").Activate
    Range("A1:N32").Select
    Selection.CopyPicture Appearance:=xlScreen, Format:=xlPicture
    
    Set objWord = CreateObject("Word.Application")
    Set objDoc = objWord.Documents.Add
    objWord.Visible = True
    objDoc.PageSetup.Orientation = wdOrientLandscape

    objWord.Selection.Paste
   
 objDoc.PageSetup.TopMargin = objWord.InchesToPoints(0.3)
 objDoc.PageSetup.BottomMargin = objWord.InchesToPoints(0.3)
 objDoc.PageSetup.LeftMargin = objWord.InchesToPoints(0.5)
 objDoc.PageSetup.RightMargin = objWord.InchesToPoints(0.5)
 
    Range("A33:N69").Select
    Selection.CopyPicture Appearance:=xlScreen, Format:=xlPicture
    objWord.Selection.Paste
    
    
    Range("A69:N94").Select
    Selection.CopyPicture Appearance:=xlScreen, Format:=xlPicture
    objWord.Selection.Paste
    Range("A2").Select
    
    Set objSelection = objWord.Selection
    
    
    
    'Range("A89:N94").Select
    'Selection.CopyPicture Appearance:=xlScreen, Format:=xlPicture
    'objWord.Selection.Paste
    'Range("A2").Select
    objSelection.TypeText (vbCrLf & vbCrLf)
    
    Worksheets("Converting").Activate
    ActiveSheet.ListObjects("Converting").Range.Select
    Selection.CopyPicture Appearance:=xlScreen, Format:=xlPicture
    objWord.Selection.Paste
    Range("A2").Select
    objSelection.TypeText (vbCrLf & vbNewLine)
    
    Worksheets("Consulting").Activate
    ActiveSheet.ListObjects("Consulting").Range.Select
    Selection.CopyPicture Appearance:=xlScreen, Format:=xlPicture
    objWord.Selection.Paste
    Range("A2").Select
    objSelection.TypeText (vbCrLf & vbNewLine)
    
    Worksheets("New schs since 2013").Activate
    ActiveSheet.ListObjects("NewSchs").Range.Select
    Selection.CopyPicture Appearance:=xlScreen, Format:=xlPicture
    objWord.Selection.Paste
    Range("A2").Select
    objSelection.TypeText (vbCrLf & vbNewLine)
    
    Worksheets("Approved New schools").Activate
    ActiveSheet.ListObjects("AppNewSchs").Range.Select
    Selection.CopyPicture Appearance:=xlScreen, Format:=xlPicture
    objWord.Selection.Paste
    Range("A2").Select
    objSelection.TypeText (vbCrLf & vbNewLine)
    
    Worksheets("New schs awaiting approval").Activate
    ActiveSheet.ListObjects("ProposedAca").Range.Select
    Selection.CopyPicture Appearance:=xlScreen, Format:=xlPicture
    objWord.Selection.Paste
    Range("A2").Select
    Worksheets("Converted").Activate
    Range("A2").Select
    
    Set oILShp = objDoc.InlineShapes
    
    'For Each oILShp In ActiveDocument.InlineShapes
    'oILShp.Select
    'Selection.ParagraphFormat.Alignment = wdAlignParagraphCenter 'FAILS
    'Next
    
    'objDoc.Activate
    
    'objDoc.Selection.WholeStory
    'objDoc.Selection.ParagraphFormat.Alignment = wdAlignParagraphCenter
    
    'Dim shpIn As InlineShape, shp As Shape
  'For Each shpIn In ActiveDocument.InlineShapes
    'shpIn.Select
    'Selection.ParagraphFormat.Alignment = wdAlignParagraphCenter
  'Next shpIn
  'For Each shp In ActiveDocument.Shapes
    'shp.Select
    'Selection.ParagraphFormat.Alignment = 1
  'Next shp

    
    objWord.Selection.TypeParagraph
    
End Sub

Function FnImageInsert(strCompleteImagePath)

   Dim objWord

   Dim objDoc

   Dim objSelection

 Dim objShapes

   Set objWord = CreateObject("Word.Application")

   Set objDoc = objWord.Documents.Open("D:\OpenMe.docx")

   objWord.Visible = True

   Set objSelection = objWord.Selection

   objSelection.TypeText (vbCrLf & "One Picture will be inserted here....")

   Set objShapes = objDoc.InlineShapes

 objShapes.AddPicture (strCompleteImagePath)

End Function
Attribute VB_Name = "MoveToCons"
Sub MoveToConsulting()

    Dim SchName As String
    Dim SchPhase As String
    Dim DfENumber As Integer
    Dim SchType As String
    Dim AgeRange As String
    Dim ButtonClicked As VbMsgBoxResult
    
    SchName = ActiveCell.Value
    On Error Resume Next
    'changed below to be table headers in case a column is added (as opposed to a relative offset reference)
    'SchPhase = ActiveCell.Offset(0, 1).Value
    SchPhase = Cells(ActiveCell.Row, [Maintained[Phase]].Column).Value
    'DfENumber = ActiveCell.Offset(0, 2).Value
    DfENumber = Cells(ActiveCell.Row, [Maintained[DFE]].Column).Value
    'SchType = ActiveCell.Offset(0, 3).Value
    SchType = Cells(ActiveCell.Row, [Maintained[TYPE]].Column).Value
    'AgeRange = ActiveCell.Offset(0, 5).Value
    AgeRange = Cells(ActiveCell.Row, [Maintained[Age range]].Column).Value
    
    If ActiveCell.Column = 1 And ActiveCell.Value <> "" Then
        ButtonClicked = MsgBox("You are about to move " & SchName & ". Click OK to continue.", vbOKCancel, "School to Move")
            If ButtonClicked = vbOK Then
            
                ActiveCell.EntireRow.Delete
    
                wsConsulting.Activate
                wsConsulting.[consulting].Cells(0, [Consulting[Name of converting establishment]].Column).End(xlDown).Offset(1, 0).Select
                'Range("A1").End(xlDown).Offset(1, 0).Select
                ActiveCell.Value = SchName
                'ActiveCell.Offset(0, 1).Value = SchPhase
                Cells(ActiveCell.Row, [Consulting[Phase]].Column).Value = SchPhase
                'ActiveCell.Offset(0, 2).Value = AgeRange
                Cells(ActiveCell.Row, [Consulting[Age Range]].Column).Value = AgeRange
                'ActiveCell.Offset(0, 3).Value = DfENumber
                Cells(ActiveCell.Row, [Consulting[DfE code]].Column).Value = DfENumber
                'ActiveCell.Offset(0, 4).Value = SchType
                Cells(ActiveCell.Row, [Consulting[Type of School]].Column).Value = SchType
                wsConsulting.[Consulting[#This Row]].Font.Color = vbRed

            ElseIf ButtonClicked = vbCancel Then
            Exit Sub
            End If
        
        Else
        
        MsgBox "You have not selected a school in Column A. Please select a school name to move and try again.", vbCritical, "No school selected"
        Exit Sub
    End If

    
End Sub
Attribute VB_Name = "MoveToConv"
Sub MoveToConverting()

    Dim SchName As String
    Dim SchPhase As String
    Dim DfENumber As Integer
    Dim SchType As String
    Dim ConvDate As Variant 'in case there is no known date and it is a string
    Dim TypeOfConv As String
    Dim TypeOfTrust As String
    Dim SponsorDetails As String
    Dim AgeRange As String
    Dim AddComments As String
    Dim ButtonClickedMoveSch As VbMsgBoxResult
    Dim ButtonClickedConvDate As VbMsgBoxResult
    Dim ConvDate2 As Integer
    
    SchName = ActiveCell.Value
    On Error Resume Next
    'Changed relative references to column names in case a column is added:
    'SchPhase = ActiveCell.Offset(0, 1).Value
    SchPhase = Cells(ActiveCell.Row, [Consulting[Phase]].Column).Value
    'AgeRange = ActiveCell.Offset(0, 2).Value
    AgeRange = Cells(ActiveCell.Row, [Consulting[Age Range]].Column).Value
    'DfENumber = ActiveCell.Offset(0, 3).Value
    DfENumber = Cells(ActiveCell.Row, [Consulting[DfE code]].Column).Value
    'SchType = ActiveCell.Offset(0, 4).Value
    SchType = Cells(ActiveCell.Row, [Consulting[Type of School]].Column).Value
    'ConvDate = ActiveCell.Offset(0, 5).Value
    ConvDate = Cells(ActiveCell.Row, [Consulting[Programmed Conversion Date]].Column).Value
    'TypeOfConv = ActiveCell.Offset(0, 6).Value
    TypeOfConv = Cells(ActiveCell.Row, [Consulting[Type of Conversion - Voluntary or Sponsored]].Column).Value
    'TypeOfTrust = ActiveCell.Offset(0, 7).Value
    TypeOfTrust = Cells(ActiveCell.Row, [Consulting[Type of Trust]].Column).Value
    'SponsorDetails = ActiveCell.Offset(0, 8).Value
    SponsorDetails = Cells(ActiveCell.Row, [Consulting[Trust / sponsor details]].Column).Value
    'AddComments = ActiveCell.Offset(0, 8).Value
    AddComments = Cells(ActiveCell.Row, [Consulting[Additional Comments]].Column).Value
    
    If ActiveCell.Column = 1 And ActiveCell.Value <> "" Then
        ButtonClickedMoveSch = MsgBox("You are about to move " & SchName & ". Click OK to continue.", vbOKCancel, "School to Move")
            If ButtonClickedMoveSch = vbOK Then
            
                ActiveCell.EntireRow.Delete
    
                wsConverting.Activate
                If wsConverting.[converting].Cells(0, [Converting[Name of converting establishment]].Column).End(xlDown).Offset(0, 0).Value = "" Then
                    wsConverting.[converting].Cells(0, [Converting[Name of converting establishment]].Column).End(xlDown).Offset(0, 0).Select
                    Else
                    wsConverting.[converting].Cells(0, [Converting[Name of converting establishment]].Column).End(xlDown).Offset(1, 0).Select
                End If
                
                'copies everything bar the conversion date - cov date dealt with below
                ActiveCell.Value = SchName
                'ActiveCell.Offset(0, 1).Value = SchPhase
                Cells(ActiveCell.Row, [Converting[Phase]].Column).Value = SchPhase
                'ActiveCell.Offset(0, 2).Value = AgeRange
                Cells(ActiveCell.Row, [Converting[Age Range]].Column).Value = AgeRange
                'ActiveCell.Offset(0, 3).Value = DfENumber
                Cells(ActiveCell.Row, [Converting[DfE code]].Column).Value = DfENumber
                'ActiveCell.Offset(0, 4).Value = SchType
                Cells(ActiveCell.Row, [Converting[Type of School]].Column).Value = SchType
                'ActiveCell.Offset(0, 6).Value = TypeOfConv
                Cells(ActiveCell.Row, [Converting[Type of Conversion - Voluntary or Sponsored]].Column).Value = TypeOfConv
                'ActiveCell.Offset(0, 7).Value = TypeOfTrust
                Cells(ActiveCell.Row, [Converting[Type of Trust]].Column).Value = TypeOfTrust
                'ActiveCell.Offset(0, 8).Value = SponsorDetails
                Cells(ActiveCell.Row, [Converting[Trust / sponsor details]].Column).Value = SponsorDetails
                'ActiveCell.Offset(0, 9).Value = AddComments
                Cells(ActiveCell.Row, [Converting[Additional Comments]].Column).Value = AddComments
                wsConverting.[Converting[#This Row]].Font.Color = vbRed
                
                
                If ConvDate <> Empty Then
                    ActiveCell.Offset(0, 5).Value = ConvDate
                    Else
                    ButtonClickedConvDate = MsgBox("Do you know the conversion date for this school?", vbYesNoCancel, "Conversion date")
                        If ButtonClickedConvDate = vbYes Then
                            ActiveCell.Offset(0, 4).Value = CDate(Application.InputBox("Enter conversion date. (01/mm/yy)", "Conversion date", "01/"))
                            ElseIf ButtonClickedConvDate = vbNo Or vbCancel Then
                        Exit Sub
                        End If
                    Exit Sub
                End If

            ElseIf ButtonClickedMoveSch = vbCancel Then
            Exit Sub
            End If
        
        Else
        
        MsgBox "You have not selected a school in Column A. Please select a school name to move and try again.", vbCritical, "No school selected"
        Exit Sub
    End If

    
End Sub

Sub test()

    wsConverting.Activate
    'wsConverting.[converting].Cells(0, [Converting[Name of converting establishment]].Column).End(xlDown).Offset(0, 0).Select
        If wsConverting.[converting].Cells(0, [Converting[Name of converting establishment]].Column).End(xlDown).Offset(0, 0).Value = "" Then
            wsConverting.[converting].Cells(0, [Converting[Name of converting establishment]].Column).End(xlDown).Offset(0, 0).Select
            Else
            wsConverting.[converting].Cells(0, [Converting[Name of converting establishment]].Column).End(xlDown).Offset(1, 0).Select
        End If
                'Range("A1").End(xlDown).Offset(1, 0).Select
                
                'copies everything bar the conversion date - cov date dealt with below
                'ActiveCell.Value = SchName
                'ActiveCell.Offset(0, 1).Value = SchPhase
                Cells(ActiveCell.Row, [Converting[Phase]].Column).Select 'Value = SchPhase

End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "frmCompanyName"
Attribute VB_Base = "0{E1AC6B13-55F0-44CC-9F0B-6698A4DED31C}{FB9A65E3-76B0-40FF-B5B1-C90D763699E2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub cboCompanyName_Change()

End Sub

Private Sub cmdOK_Click()

    If cboCompanyName = "" Then
    MsgBox "Choose a company name or press the 'Skip task' button", 48, "No input detected"
        Else
        Range("Converted[Trust / sponsor details]").End(xlUp).Offset(1, 0).Value = cboCompanyName.Value
        Unload Me
    End If
    
End Sub

Private Sub cmdSkip_Click()

    Unload frmCompanyName

End Sub

Private Sub txtSchoolName_Change()

End Sub
Attribute VB_Name = "testModule"
Sub test()

'ActiveSheet.ListObjects("Converting").ListColumns(3).HeaderRowRange.Select
'ActiveSheet.ListObjects("Converting").ListColumns(3).DataBodyRange.Select
'ActiveSheet.ListObjects("Converting").HeaderRowRange.ListColumns(3).Select
'ActiveTable.HeaderRowRange.ListColumns(1).Select
[converting].Cells(0, [Converting[Programmed Conversion Date]].Column).Select

End Sub



Attribute VB_Name = "wsApprovedSchs"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wsConsulting"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wsConverted"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wsConverting"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wsHaltedConvs"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wsLists"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wsMaintained"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wsNewSchs"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wsNewSchsNotApp"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "wsStats"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
