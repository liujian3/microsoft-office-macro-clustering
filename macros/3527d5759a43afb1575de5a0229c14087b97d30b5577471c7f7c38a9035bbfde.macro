Attribute VB_Name = "CustomFunctions"
Option Explicit

Function GetCellValue(ByRef ws As Worksheet, strField As String, lngRow As Long, Optional lngHeadRow As Long = 2) As String
    Dim col As Long
    col = GetCol(ws, strField, lngHeadRow)
    If col > 0 Then
        GetCellValue = ws.Cells(lngRow, col)
    Else
        GetCellValue = ""
    End If
End Function

Function GetCol(ByRef ws As Worksheet, strField As String, Optional lngHeadRow As Long = 2) As Long
    Dim RangeSource As Range, RangeFound As Range
    Set RangeSource = ws.Range(lngHeadRow & ":" & lngHeadRow)
    Set RangeFound = RangeSource.Find(strField, , , xlWhole)
    If RangeFound Is Nothing Then
        GetCol = 0
    Else
        GetCol = RangeFound.Column
    End If
End Function

Function GetColLetter(ByVal col As Integer) As String
    GetColLetter = ""
    Do While col > 0
        GetColLetter = Chr(65 + (col - 1) Mod 26) & GetColLetter
        col = (col - 1) \ 26
    Loop
End Function

Function GetRange(ByVal row As Long, ByVal col As Integer) As String
GetRange = ""
Do While col > 0
    GetRange = Chr(65 + (col - 1) Mod 26) & GetRange
    col = (col - 1) \ 26
Loop
GetRange = GetRange & row
End Function

Public Function GetLastColumn(ByRef ws As Worksheet) As Long
    GetLastColumn = ws.UsedRange.Column + ws.UsedRange.columns.Count - 1
End Function

Public Function GetLastRow(ByRef ws As Worksheet) As Long
    GetLastRow = ws.UsedRange.row + ws.UsedRange.rows.Count - 1
End Function

Function Match(ByRef ws As Worksheet, strSearchValue As String, strSearchCol As String, lngHeadRow As Long) As Long
    Dim lngSearchCol As Long
    Dim RangeSource As Range, RangeFound As Range
    
    lngSearchCol = GetCol(ws, strSearchCol, lngHeadRow)
    Set RangeSource = ws.Range(GetColLetter(lngSearchCol) & (lngHeadRow + 1) & ":" & GetColLetter(lngSearchCol) & GetLastRow(ws))
    Set RangeFound = RangeSource.Find(strSearchValue, , , xlWhole)
    If RangeFound Is Nothing Then
        Match = 0
    Else
        Match = RangeFound.row
    End If
End Function

Function Max(x As Variant, y As Variant) As Variant
    If x > y Then
        Max = x
    Else
        Max = y
    End If
End Function

Function Min(x As Variant, y As Variant) As Variant
    If x < y Then
        Min = x
    Else
        Min = y
    End If
End Function

Function UpdateCellValue(ByRef ws As Worksheet, strField As String, lngRow As Long, strValue As String, Optional lngHeadRow As Long = 2) As String
    Dim col As Long
    col = GetCol(ws, strField, lngHeadRow)
    If col > 0 Then
        ws.Cells(lngRow, col) = strValue
    End If
End Function

Function Vlookup(ByRef ws As Worksheet, strSearchValue As String, strSearchCol As String, strReturnCol As String, lngHeadRow As Long) As String
    Dim lngSearchCol As Long
    Dim lngReturnCol As Long
    Dim RangeSource As Range, RangeFound As Range
    lngSearchCol = GetCol(ws, strSearchCol, lngHeadRow)
    lngReturnCol = GetCol(ws, strReturnCol, lngHeadRow)
    Set RangeSource = ws.Range(GetColLetter(lngSearchCol) & (lngHeadRow + 1) & ":" & GetColLetter(lngSearchCol) & GetLastRow(ws))
    Set RangeFound = RangeSource.Find(strSearchValue, , , xlWhole)
    If RangeFound Is Nothing Then
        Vlookup = ""
    Else
        Vlookup = ws.Cells(RangeFound.row, lngReturnCol)
    End If
End Function

Function SpaceFill(str As String, ByVal totlen As Integer, Optional blnLeft As Boolean = False) As String
Dim subLen As Integer
    subLen = Len(str)
    If blnLeft = True Then
        If subLen < totlen Then
            SpaceFill = String(totlen - subLen, " ") & str
        Else
            SpaceFill = Right(str, totlen)
        End If
    Else 'Right
        If subLen < totlen Then
            SpaceFill = str & String(totlen - subLen, " ")
        Else
            SpaceFill = Left(str, totlen)
        End If
    End If
End Function

Function SplitFirst(strInput As String, Optional strDelimiter As String = " ") As String
Dim lngPos As Long
lngPos = InStr(1, strInput, strDelimiter)
If lngPos > 0 Then
    SplitFirst = Left(strInput, lngPos - 1)
Else
    SplitFirst = strInput
End If
End Function

Function GetJsonField(ByRef strJSON As String, strField As String) As String 'version 4.2
Dim intFieldStart As Integer, intValueStart As Integer, intValueEnd As Integer
    GetJsonField = ""
    intFieldStart = InStr(1, strJSON, Chr(34) & strField & Chr(34) & ":")
    If intFieldStart < 1 Then Exit Function
    intValueStart = intFieldStart + Len(strField) + 3
    If Mid(strJSON, intValueStart, 1) = Chr(34) Then 'alpha
        intValueStart = intValueStart + 1
        intValueEnd = intValueStart - 1
        Do
            intValueEnd = InStr(intValueEnd + 1, strJSON, Chr(34))
            If intValueEnd < intValueStart Then Exit Do
            If Mid(strJSON, intValueEnd - 1, 1) <> "\" Or Mid(strJSON, intValueEnd - 2, 2) = "\\" Then
                GetJsonField = Mid(strJSON, intValueStart, intValueEnd - intValueStart)
                GetJsonField = Replace(GetJsonField, "\" & Chr(34), Chr(34))
                GetJsonField = Replace(GetJsonField, "\\", "\")
                Exit Do
            End If
        Loop
    Else 'numeric
        intValueEnd = InStr(intValueStart, strJSON, ",")
        If intValueEnd < intValueStart Then intValueEnd = InStr(intValueStart, strJSON, "}")
        If intValueEnd < intValueStart Then Exit Function
        GetJsonField = Mid(strJSON, intValueStart, intValueEnd - intValueStart)
    End If
End Function


Attribute VB_Name = "DataUpload"
Option Explicit
Private Type TypeField
    FLNM As String  'Field name
    FLDS As String  'Field Description
    FRPO As Integer 'From Position
    LENG As Long 'Length 'version 1.74
    Type As String  'Type A=Alphanumeric N=Numeric
    MAND As Boolean 'Mandatory
    Column As Integer 'Excel Column
    Decimals As Integer 'number of decimal places
    Key As Boolean 'Is a key in Update or Select
End Type
Private mtypFields(1 To 2, 1 To 999) As TypeField  'version 4.0 1=Input 2=Output 'cannot use dynamic array due to Excel error
Private mintFields(1 To 2) As Integer 'version 4.0
Private ws As Worksheet
Private Type TypeConnection
    Method As String 'API or SQL
    Port As String  'Port number
    Program As String 'Program
    Transaction As String 'Transaction
    TransactionType As String 'S=single M=multiple 'version 4.0
    IonApiUsername As String ' saak version 4.0
    IonApiPassword As String ' sask version 4.0
    IonApiClientId As String ' ci version 4.0
    IonApiClientSecret As String ' cs version 4.0
    IonApiIU As String 'version 4.0
    IonApiTI As String 'version 4.0
    IonApiPU As String 'version 4.0
    IonApiOT As String 'version 4.0
    UserID As String 'User ID
    Password As String 'Password
    Schema As String 'Schema/Library
    Table As String  'Table
    Type As String 'SQL Type
    Database As String 'data base - only required for SQL server
    MaxRecords As Long 'the maximum number of records that will be processed in one run. If zero then no limit 'version 1.8
    Driver As String 'version 2.0 SQLServer or iSeries
    Server As String 'version 2.0 address of server
    Company As String 'version 2.1 Company field for API's
    Division As String 'version 2.1 Division field for API's
    Context As String 'version 3.0 Webservice context
    Namespace As String 'version 3.0 Webservice namespace
    IonToken As String 'version 4.0 ION API Token
    IonTokenExpiry As Date 'version 4.0 date/time token expires
End Type
Public mtypCon As TypeConnection
'Global mobjSock As New MvxSockX  'version 4.0 commented out 'v1.20 added New, changed from Private to Global
Private Enum CheckSheetResult 'result returned from CheckSheet function. version 1.00
    CheckSheetValid
    CheckSheetNotValid
    CheckSheetError
End Enum
Public mblnAuto As Boolean 'v1.20
Public mblnSuccessfull As Boolean 'v1.20
Public mblnAddGo As Boolean 'v1.20
Private mlngValidationErrors As Long 'v1.20
Global mobjCon As New ADODB.Connection 'v1.20
Private mobjRec As ADODB.Recordset
Private mblnSetupDone As Boolean
Public mblnCancelled As Boolean 'was Cancel button clicked
Private mblnKey(4 To 999) As Boolean
Private mintKeyCount As Integer
Public mstrSqlPassword As String, mstrWebServicePassword As String
Public mstrTables(9999, 2) As String
Public mintTables As Integer
Private Type TypeWebService 'version 3.0
    Namespace As String
    Program As String
    Prefix As String
    InputField(1 To 99) As TypeField
    InputFields As Integer
End Type
Public mtypWebServices(1 To 99) As TypeWebService 'version 3.0
Public mintWebServices As Integer, mintWebService As Integer
Public mobjWS As Webservice

Public Sub RunA()
    RunMacroList "A"
End Sub

Public Sub RunB()
    RunMacroList "B"
End Sub

Public Sub RunC()
    RunMacroList "C"
End Sub

Sub RunMacroList(strListID As String)
Dim intIndex As Integer
Dim strParam As String, strParams() As String
Dim strWorksheet As String, strMacro As String
Dim blnError As Boolean
Dim intOkCount As Integer
    For intIndex = 1 To 99
        strParam = GetParam("Macro" & strListID & intIndex)
        If strParam = "" Then Exit For
        strParams = Split(strParam, "/")
        strWorksheet = strParams(0)
        strMacro = strParams(1)
        On Error Resume Next
        Worksheets(strWorksheet).Activate
        If Err.Number <> 0 Then
            On Error GoTo 0
            MsgBox "Invalid worksheet: " + strParam, vbCritical
            blnError = True
            Exit For
        End If
        mblnAuto = True
        mblnSuccessfull = True 'start with assuming true
        Application.Run strMacro
        If Err.Number <> 0 Then
            On Error GoTo 0
            MsgBox "Invalid macro: " + strParam, vbCritical
            blnError = True
            Exit For
        End If
        On Error GoTo 0
        If mblnSuccessfull Then
            intOkCount = intOkCount + 1
        Else
            MsgBox "Macro " + strParam + " failed. Remaining macros will not be run", vbCritical
            blnError = True
            Exit For
        End If
    Next intIndex
    If blnError = True Then
        MsgBox "Did not finish running all macros. Last macro attempted was " & strParam, vbCritical
    Else
        MsgBox "Successfully ran all " & intOkCount & " macros", vbInformation
    End If
    mblnAuto = False
End Sub

Private Function CheckExpiryDate() As Boolean
Dim dtmExpiry As Date
    On Error Resume Next
    dtmExpiry = Worksheets("Validations").Range("Expiry").VALUE
    If Err.Number <> 0 Then
        On Error GoTo 0
        CheckExpiryDate = True
        Exit Function
    End If
    On Error GoTo 0
    If dtmExpiry < Now() Then
        MsgBox "Past expiry date: " & dtmExpiry & vbCrLf & "Please contact ComActivity", vbCritical
        CheckExpiryDate = False
    Else
        CheckExpiryDate = True
    End If
End Function

Public Sub Run()

mblnSuccessfull = False

'get active work sheet
Set ws = ActiveSheet

'check expiry date
If CheckExpiryDate = False Then Exit Sub

If ws.Name = "Params" Then
    MsgBox "Active worksheet cannot be " & ws.Name, vbCritical
    Exit Sub
End If

mblnSetupDone = GetConnectionDetails()

'get method
If mtypCon.Method = "" Then
    frmSelectMethod.Show
    If mblnCancelled = True Then Exit Sub
End If

If mtypCon.Method = "API" Then
    If GetIonApiCredentials = False Then Exit Sub
        
    If mblnSetupDone = False Then 'version 2.1 only get default company/division if setting up sheet for first time
        mtypCon.Company = GetParam("API Company") 'version 2.1
        mtypCon.Division = GetParam("API Division") 'version 2.1
    End If
    If mblnSetupDone = False Or mblnAuto = False Or mtypCon.Password = "" Then
        frmAPIConnection.Show
        If mblnCancelled = True Then Exit Sub
    End If
    API
ElseIf mtypCon.Method = "SQL" Then
    'mtypCon.ConnectionString = GetParam("SQL Connection String") 'version 2.0 commented out
    'mtypCon.DSN = GetParam("SQL Data Source Name")'version 2.0 commented out
    mtypCon.Driver = GetParam("SQL Driver") 'version 2.0
    mtypCon.Server = SplitFirstField(GetParam("SQL Server")) 'version 2.3
    mtypCon.UserID = GetParam("SQL User ID")
    If mstrSqlPassword <> "" Then 'version 2.1
        mtypCon.Password = mstrSqlPassword
    Else
        mtypCon.Password = "" 'version 3.0    version 3.3 changed: GetPassword("SQL Password") to: ""
    End If
    mtypCon.Database = GetParam("SQL Database")
    mtypCon.Schema = GetParam("SQL Schema")
    If mblnSetupDone = False Or mblnAuto = False Or mtypCon.Password = "" Then  'version 2.0 removed: mtypCon.ConnectionString = ""
        frmSQLConnection.Show
        If mblnCancelled = True Then Exit Sub
    End If
    mstrSqlPassword = mtypCon.Password
    SQL
ElseIf mtypCon.Method = "WebService" Then 'version 3.0
    GetWebServices
    mtypCon.Server = SplitFirstField(GetParam("Web Service Server"))
    mtypCon.Port = SplitFirst(GetParam("Web Service Port"))
    mtypCon.UserID = GetParam("Web Service Username")
    If mstrWebServicePassword <> "" Then
        mtypCon.Password = mstrWebServicePassword
    Else
        mtypCon.Password = "" 'version 3.3 changed: GetPassword("Web Service Password") to: ""
    End If
    mtypCon.Context = GetParam("Web Service Context")
    
    If mblnSetupDone = False Or mblnAuto = False Or mtypCon.Password = "" Then
        frmWebServiceConnection.Show
        If mblnCancelled = True Then Exit Sub
    End If
    mstrWebServicePassword = mtypCon.Password
    Webservice
Else
    Exit Sub
End If

End Sub

Private Function GetIonApiCredentials() As Boolean 'version 4.0
Dim strPath As String
Dim objTs As TextStream
Dim objFs As New FileSystemObject
Dim strJSON As String
Dim strMsg As String
Do Until strPath <> ""
    strPath = GetParam("ION API Credentials File")
    If strPath = "" Then
        If SelectIonApiCredentialsFile = False Then
            GetIonApiCredentials = False
            Exit Function
        End If
    End If
Loop

On Error Resume Next
Set objTs = objFs.OpenTextFile(strPath, ForReading)
If Err.Number <> 0 Then
   strMsg = "Error opening ION API Credentials file: " & strPath
   On Error GoTo 0
   MsgBox strMsg, vbCritical
   GetIonApiCredentials = False
   Exit Function
End If
On Error GoTo 0

Do While objTs.AtEndOfStream = False
    strJSON = strJSON & objTs.Read(60000)
Loop

objTs.Close

mtypCon.IonApiUsername = GetJsonField(strJSON, "saak")
mtypCon.IonApiPassword = GetJsonField(strJSON, "sask")
mtypCon.IonApiClientId = GetJsonField(strJSON, "ci")
mtypCon.IonApiClientSecret = GetJsonField(strJSON, "cs")
mtypCon.IonApiIU = GetJsonField(strJSON, "iu")
mtypCon.IonApiTI = GetJsonField(strJSON, "ti")
mtypCon.IonApiPU = GetJsonField(strJSON, "pu")
mtypCon.IonApiOT = GetJsonField(strJSON, "ot")
GetIonApiCredentials = True
Exit Function
ERROR:
strMsg = "Error parsing JSON. " & Err.Description
On Error GoTo 0
MsgBox strMsg, vbCritical
GetIonApiCredentials = False
End Function

Public Function SelectIonApiCredentialsFile() As Boolean 'version 4.0
Dim strCredentialsFiles As String

With Application.FileDialog(msoFileDialogOpen)
    .AllowMultiSelect = False
    .Filters.Add "ION API Credentials File", "*.ionapi", 1
    If .Show <> -1 Then
        SelectIonApiCredentialsFile = False
        Exit Function
    End If
    strCredentialsFiles = .SelectedItems(1)
    UpdateParam "ION API Credentials File", strCredentialsFiles
End With
End Function

Private Sub API()
Dim enumResult As CheckSheetResult
Dim rc As Integer
Dim strReturn As String
Dim i As Integer
Dim typField As TypeField
Dim intField As Integer
Dim row As Long
Dim col As Long
Dim strMsg As String
Dim strArray() As String
Dim strInput As String
Dim lngErrors As Long
Dim lngOK As Long
Dim strField As String
Dim strResult As String
Dim lngLastRow As Long, lngRecordCount As Long 'version 1.8
Dim objXml As New MSXML2.DOMDocument60 'version 4.0
Dim intInOut As Integer 'version 4.0 1=input field 2=output field
Dim intInputIndex As Integer 'version 4.3
mlngValidationErrors = 0

'Connection Details Form
If mblnSetupDone And mblnAuto = True Then
    If ConnectMvxSock("MRS001MI", mtypCon.Company, mtypCon.Division, strMsg) = False Then  'version 2.1 added company and division
        MsgBox strMsg, vbCritical
        Exit Sub
    End If
End If

'Setup worksheet
If mblnSetupDone = False Then
    ws.Range("1:1").Insert xlDown, xlFormatFromLeftOrAbove
    ws.Range("A:A").Insert xlToRight, xlFormatFromLeftOrAbove
    ws.Range("A:A").Insert xlToRight, xlFormatFromLeftOrAbove
    ws.Range("A:A").Insert xlToRight, xlFormatFromLeftOrAbove
    ws.Cells(2, 1) = "Date/Time"
    ws.Cells(2, 2) = "Result"
    ws.Cells(2, 3) = "Message"
End If
ws.Cells(1, 1) = "Method: API" & vbLf & _
                    "TI:" & mtypCon.IonApiTI & vbLf & _
                    "Program:" & mtypCon.Program & vbLf & _
                    "Trans:" & mtypCon.Transaction & vbLf & _
                    "Company:" & mtypCon.Company & vbLf & _
                    "Division:" & mtypCon.Division 'version 2.1 added Company and Division
ws.Range("A:A").NumberFormat = "d/mm/yy h:mm:ss"
ws.Range("A1:B1").HorizontalAlignment = xlLeft
ws.Range("A1:B1").VerticalAlignment = xlTop
If ws.UsedRange.columns.Count >= 3 Then 'version 1.10
    With ws.Range("C1:" & GetRange(1, ws.UsedRange.columns.Count))
        .Orientation = 90
        .HorizontalAlignment = xlLeft
        .ClearContents
        .VerticalAlignment = xlBottom 'version 1.10
    End With
End If
ws.columns("A:A").ColumnWidth = 25
ws.Range("1:1").Interior.Pattern = xlNone
ws.Range("A1:A1").Interior.Color = RGB(220, 220, 220)
ws.Range("2:2").Font.Bold = True 'version 1.10
ActiveWindow.FreezePanes = False
ws.Range("A3").Select
ActiveWindow.FreezePanes = True

'get transaction details
ReadTransaction
ReadTransactionFields 1 'input
ReadTransactionFields 2 'output

'Check if any columns exist at all. If none, then add all possible columns
i = 0
For col = 4 To ws.UsedRange.columns.Count + 1
    If Trim(ws.Cells(2, col)) <> "" Then i = i + 1  'version 1.10
Next col
If i = 0 Then
    For i = 1 To mintFields(1)
        ws.Cells(2, 3 + i) = Trim(mtypFields(1, i).FLNM)
    Next i
    'version 4.0 write output fields
    For i = 1 To mintFields(2)
        ws.Cells(2, 3 + mintFields(1) + i) = ">" & Trim(mtypFields(2, i).FLNM)
    Next i
End If
ws.Range("C1:" & GetRange(1, ws.UsedRange.columns.Count)).Orientation = 90 'version 1.10

'Map fields to columns 'version 4.0
mlngValidationErrors = 0
strMsg = ""
For col = 4 To ws.UsedRange.columns.Count
    strField = ws.Cells(2, col)
    If Left(strField, 1) = ">" Then intInOut = 2 Else intInOut = 1
    intField = GetField(intInOut, ws.Cells(2, col))
    If intField > 0 Then
        ws.Cells(1, col) = Trim(mtypFields(intInOut, intField).FLDS)
        mtypFields(intInOut, intField).Column = col
        ws.Range(GetRange(1, col)).Interior.Color = vbGreen
    ElseIf Trim(ws.Cells(2, col)) = "" Then 'version 1.10
        ws.Cells(1, col) = "WARNING Blank column" & vbLf & "Will be ignored"
        ws.Range(GetRange(1, col)).Interior.Pattern = xlNone
    Else
        ws.Cells(1, col) = "WARNING Invalid Field" & vbLf & "Will be ignored"
        ws.Range(GetRange(1, col)).Interior.Color = vbRed
    End If
Next col
ws.rows("1:1").EntireRow.AutoFit

'Check for missing mandatory fields
For i = 1 To mintFields(1)
    If mtypFields(1, i).MAND = True And mtypFields(1, i).Column = 0 Then
        mlngValidationErrors = mlngValidationErrors + 1
        ws.Range("D:D").Insert xlToRight, xlFormatFromLeftOrAbove
        ws.Cells(1, 4) = mtypFields(1, i).FLDS & vbLf & "INSERTED Mandatory Field"
        ws.Range(GetRange(1, 4)).Interior.Color = vbRed
        ws.Range(GetRange(1, 4)).Orientation = 90 'version 1.10
        ws.Cells(2, 4) = mtypFields(1, i).FLNM
        If strMsg <> "" Then strMsg = strMsg & vbCrLf
        strMsg = strMsg & "Mandatory field " & mtypFields(1, i).FLNM & " was missing and has been inserted"
    End If
Next i
If mlngValidationErrors > 0 Then
    MsgBox strMsg, vbCritical
    Exit Sub
End If

'Validate field lengths and types
lngRecordCount = 0 'version 1.8
For row = 3 To ws.UsedRange.rows.Count
    If IsRowBlank(row) = False And Not (Left(ws.Cells(row, 2), 2) = "OK" And ws.Range(GetRange(row, 2)).Interior.Color = vbGreen) Then
        lngRecordCount = lngRecordCount + 1 'version 1.8
        lngLastRow = row 'version 1.8
        strResult = ""
        strMsg = ""
        For intField = 1 To mintFields(1)
            If mtypFields(1, intField).Column > 0 Then
                If Len(Trim(ws.Cells(row, mtypFields(1, intField).Column))) > mtypFields(1, intField).LENG Then
                    strResult = "Validation ERROR"
                    strMsg = "Field " & mtypFields(1, intField).FLNM & " Max len " & mtypFields(1, intField).LENG & " exceeded"
                    Exit For
                ElseIf mtypFields(1, intField).Type = "N" And IsNumeric(Trim(ws.Cells(row, mtypFields(1, intField).Column))) = False _
                    And Len(Trim(ws.Cells(row, mtypFields(1, intField).Column))) > 0 Then
                    strResult = "Validation ERROR"
                    strMsg = "Field " & mtypFields(1, intField).FLNM & " Not numeric"
                    Exit For
                End If
            End If
        Next intField
        If strMsg <> "" Then
            ws.Cells(row, 2) = strResult
            ws.Cells(row, 3) = strMsg
            ws.Range(GetRange(row, 2)).Interior.Color = vbRed
            mlngValidationErrors = mlngValidationErrors + 1
        Else
            ws.Cells(row, 2) = "Fields validated"
            ws.Range(GetRange(row, 2)).Interior.Pattern = xlNone
        End If
        ws.Cells(row, 1) = Now()
        ws.Range(GetRange(row, 1)).Show
        If mtypCon.MaxRecords > 0 And lngRecordCount >= mtypCon.MaxRecords Then Exit For 'version 1.8
    End If
Next row
'adjust width of message column
ws.columns("A:C").EntireColumn.AutoFit

'Error message, if applicable
If mblnAuto = True Then
    'do not ask questions, just proceed
ElseIf mlngValidationErrors > 0 Then
    strMsg = mlngValidationErrors & " row(s) with validation error(s)." & vbCrLf & "See column C (Message) for error messages." & _
    "Rows with validation errors won't be updated to M3" & vbCrLf & "Only validated rows will be updated to M3." & _
    "Do you want to continue and update validated rows to M3?"
    If MsgBox(strMsg, vbYesNoCancel) <> vbYes Then Exit Sub
Else
    If MsgBox("Validation successfull. Do you now want to update to M3?", vbYesNoCancel) <> vbYes Then Exit Sub
End If
    
'Connect to M3
If ConnectMvxSock(mtypCon.Program, mtypCon.Company, mtypCon.Division, strMsg) = False Then  'version 2.1 added company and division
    MsgBox strMsg, vbCritical
    Exit Sub
End If

'process rows
row = 3
Do While row <= lngLastRow
    If IsRowBlank(row) = False And Not (Left(ws.Cells(row, 2), 2) = "OK" And ws.Range(GetRange(row, 2)).Interior.Color = vbGreen) _
    And Not (ws.Cells(row, 2) = "Validation ERROR" And ws.Range(GetRange(row, 2)).Interior.Color = vbRed) Then
        strResult = ""
        strMsg = ""
        If mtypCon.TransactionType = "M" Then strInput = ";maxrecs=0" Else strInput = "" 'version 4.3 was: strInput = ""
        intInputIndex = 0 'version 4.3
        For intField = 1 To mintFields(1)
            If mtypFields(1, intField).Column > 0 Then strField = ws.Cells(row, mtypFields(1, intField).Column) Else strField = ""
            If strField <> "" Then
                intInputIndex = intInputIndex + 1 'version 4.3
                If intInputIndex = 1 Then strInput = strInput & "?" Else strInput = strInput & "&" 'version 4.3 changed: If strInput = "" then strInput = "?" to: If intInputIndex=1 If intInputIndex = 1 Then strInput = strInput & "?"
                strInput = strInput & mtypFields(1, intField).FLNM & "=" & WorksheetFunction.EncodeURL(strField) 'v4.4 added: WorksheetFunction.urlencode
            End If
        Next intField
        If IonApiCall(mtypCon.Program, mtypCon.Transaction, strInput, strResult, strMsg, objXml) = False Then
            ws.Range(GetRange(row, 2)).Interior.Color = vbRed
            lngErrors = lngErrors + 1
        Else
            ws.Range(GetRange(row, 2)).Interior.Color = vbGreen
            lngOK = lngOK + 1
        End If
        ws.Cells(row, 1) = Now()
        ws.Range(GetRange(row, 1)).Show
        ws.Cells(row, 2) = Trim(strResult)
        ws.Cells(row, 3) = Trim(strMsg)
        WriteOutputFields row, lngLastRow, objXml
        DoEvents
    End If
    row = row + 1
Loop

'adjust width of message column
ws.columns("A:C").EntireColumn.AutoFit

'Message
If mblnAuto = False Or mlngValidationErrors + lngErrors > 0 Then
    MsgBox "Finished. " & lngOK & " rows processed OK. " & mlngValidationErrors + lngErrors & " row(s) with and error", vbExclamation
End If
mblnSuccessfull = (mlngValidationErrors + lngErrors = 0) 'v1.20
    
End Sub

Private Sub WriteOutputFields(ByRef row As Long, ByRef lastRow, ByRef objXml As MSXML2.DOMDocument60)
Dim intField As Integer
Dim objMIRecordNodes As MSXML2.IXMLDOMNodeList
Dim objMIRecordNode As MSXML2.IXMLDOMNode
Dim nextRow As Long, firstRow As Long
    firstRow = row
    nextRow = firstRow
    On Error Resume Next 'v4.4
    Set objMIRecordNodes = objXml.DocumentElement.SelectNodes("ns:MIRecord")
    If Err.Number <> 0 Then
        On Error GoTo 0
        Exit Sub
    End If
    On Error GoTo 0
    For Each objMIRecordNode In objMIRecordNodes
        row = nextRow
        If row > firstRow Then 'insert row and copy down results and input fields
            ws.Range(row & ":" & row).Insert xlDown, xlFormatFromLeftOrAbove
            ws.Cells(row, 1) = ws.Cells(row - 1, 1)
            ws.Cells(row, 2) = ws.Cells(row - 1, 2)
            ws.Cells(row, 3) = ws.Cells(row - 1, 3)
            For intField = 1 To mintFields(1)
                If mtypFields(1, intField).Column > 0 Then
                    ws.Cells(row, mtypFields(1, intField).Column) = ws.Cells(row - 1, mtypFields(1, intField).Column)
                End If
            Next intField
        End If
        For intField = 1 To mintFields(2)
            If mtypFields(2, intField).Column > 0 Then
                ws.Cells(row, mtypFields(2, intField).Column) = GetNodeText(objMIRecordNode, "ns:NameValue[ns:Name='" & mtypFields(2, intField).FLNM & "']/ns:Value")
            End If
        Next intField
        nextRow = row + 1
        If mtypCon.TransactionType = "S" Then Exit For
    Next objMIRecordNode
    lastRow = lastRow + row - firstRow
End Sub

Private Sub ReadTransactionFields(intInOut As Integer) 'version 4.0 read input fields for transaction
Dim typField As TypeField
Dim strResult As String, strMsg As String
Dim strTRTP As String
Dim objXml As New MSXML2.DOMDocument60
Dim objMIRecordNodes As MSXML2.IXMLDOMNodeList
Dim objMIRecordNode As MSXML2.IXMLDOMNode
Dim objMINM_Node As MSXML2.IXMLDOMNode
Dim objTRNM_Node As MSXML2.IXMLDOMNode
Dim objTRTP_Node As MSXML2.IXMLDOMNode
Dim objFLNM_Node As MSXML2.IXMLDOMNode
Dim objFLDS_Node As MSXML2.IXMLDOMNode
Dim objFRPO_Node As MSXML2.IXMLDOMNode
Dim objLENG_Node As MSXML2.IXMLDOMNode
Dim objTYPE_Node As MSXML2.IXMLDOMNode
Dim objMAND_Node As MSXML2.IXMLDOMNode

If intInOut = 1 Then strTRTP = "I" Else strTRTP = "O"
mintFields(intInOut) = 0
'read input fields
If IonApiCall("MRS001MI", "LstFields", "?MINM=" & mtypCon.Program & "&TRNM=" & mtypCon.Transaction & "&TRTP=" & strTRTP, strResult, strMsg, objXml) = True Then
    Set objMIRecordNodes = objXml.DocumentElement.SelectNodes("ns:MIRecord")
    For Each objMIRecordNode In objMIRecordNodes
        Set objMINM_Node = objMIRecordNode.SelectSingleNode("ns:NameValue[ns:Name='MINM']/ns:Value")
        Set objTRNM_Node = objMIRecordNode.SelectSingleNode("ns:NameValue[ns:Name='TRNM']/ns:Value")
        Set objTRTP_Node = objMIRecordNode.SelectSingleNode("ns:NameValue[ns:Name='TRTP']/ns:Value")
        Set objFLNM_Node = objMIRecordNode.SelectSingleNode("ns:NameValue[ns:Name='FLNM']/ns:Value")
        Set objFLDS_Node = objMIRecordNode.SelectSingleNode("ns:NameValue[ns:Name='FLDS']/ns:Value")
        Set objFRPO_Node = objMIRecordNode.SelectSingleNode("ns:NameValue[ns:Name='FRPO']/ns:Value")
        Set objLENG_Node = objMIRecordNode.SelectSingleNode("ns:NameValue[ns:Name='LENG']/ns:Value")
        Set objTYPE_Node = objMIRecordNode.SelectSingleNode("ns:NameValue[ns:Name='TYPE']/ns:Value")
        Set objMAND_Node = objMIRecordNode.SelectSingleNode("ns:NameValue[ns:Name='MAND']/ns:Value")
        If Trim(objMINM_Node.Text) = mtypCon.Program And Trim(objTRNM_Node.Text) = mtypCon.Transaction And objTRTP_Node.Text = strTRTP Then
            typField.FLNM = Trim(UCase(objFLNM_Node.Text))
            typField.FLDS = Trim(objFLDS_Node.Text)
            typField.FRPO = objFRPO_Node.Text
            typField.LENG = objLENG_Node.Text
            typField.Type = objTYPE_Node.Text
            typField.MAND = (objMAND_Node.Text = "1" Or objMAND_Node.Text = "Y")
            typField.Column = 0
            mintFields(intInOut) = mintFields(intInOut) + 1
            mtypFields(intInOut, mintFields(intInOut)) = typField
        End If
    Next objMIRecordNode
End If
End Sub

Private Sub ReadTransaction() 'version 4.0 read transaction details
Dim strResult As String, strMsg As String
Dim objXml As New MSXML2.DOMDocument60
Dim objMIRecordNode As MSXML2.IXMLDOMNode

'read details
If IonApiCall("MRS001MI", "GetTransaction", "?MINM=" & mtypCon.Program & "&TRNM=" & mtypCon.Transaction, strResult, strMsg, objXml) = True Then
    Set objMIRecordNode = objXml.DocumentElement.SelectSingleNode("ns:MIRecord")
    If Trim(GetNodeText(objMIRecordNode, "ns:NameValue[ns:Name='MINM']/ns:Value")) = mtypCon.Program And Trim(GetNodeText(objMIRecordNode, "ns:NameValue[ns:Name='TRNM']/ns:Value")) = mtypCon.Transaction Then
        mtypCon.TransactionType = GetNodeText(objMIRecordNode, "ns:NameValue[ns:Name='SIMU']/ns:Value")
    End If
End If
End Sub


Public Function ConnectMvxSock(strProgram As String, ByVal strCompany As String, ByVal strDivision As String, ByRef strMsg As String) As Boolean 'version 4.0  'version 2.1 added company and division
Dim rc As Integer
Dim strReturn As String
Dim strConoDivi As String 'version 2.1

    'version 4.0
    If Now() > mtypCon.IonTokenExpiry Then
        If GetIonToken(strMsg) = False Then
            MsgBox "Error getting token: " & strMsg, vbCritical
            ConnectMvxSock = False
            Exit Function
        End If
    End If

    'version 2.1 set strConoDivi
    strCompany = Trim(strCompany)
    If strCompany <> "" And IsNumeric(strCompany) = True Then
        strConoDivi = Format(strCompany, "000") & SpaceFill(strDivision, 3)
    Else
        strConoDivi = ""
    End If
    
    'version 2.0
    If ValidateAPIServer(mtypCon.IonApiTI) = False Then 'version 2.3
        MsgBox mtypCon.IonApiTI & " is not on list of valid TI's", vbCritical
        ConnectMvxSock = False
        Exit Function
    End If

'    version 4.0 commented out
'    rc = mobjSock.MvxSockSetup(strIP, strPort, "", 0, "")
'    If rc <> 0 Then
'        mobjSock.MvxSockGetLastError strMsg
'        strMsg = "ERROR setting up connection. Return code: " & rc & vbCrLf & Trim(strMsg)
'        ConnectMvxSock = False
'        Exit Function
'    End If
'    rc = mobjSock.MvxSockInit(strConoDivi, strUserID, strPassword, strProgram)
'    If rc <> 0 Then
'        mobjSock.MvxSockGetLastError strMsg
'        strMsg = "ERROR initialising connection. Return code: " & rc & vbCrLf & Trim(strMsg)
'        ConnectMvxSock = False
'        Exit Function
'    End If
''   version 2.1 end
'    'Set maximum number of records returned from Lst functions to be unlimited
'    rc = mobjSock.MvxSockTrans("SetLstMaxRec   00000", strReturn)
'    If rc <> 0 Then
'        mobjSock.MvxSockGetLastError strMsg
'        strMsg = "ERROR running SetLstMaxRec. Return code " & rc & " " & Trim(strMsg)
'        mobjSock.MvxSockClose
'        ConnectMvxSock = False
'        Exit Function
'    End If
    
    ConnectMvxSock = True

End Function

Private Function GetIonToken(ByRef strMsg As String) As Boolean 'version 4.0
Dim xmlhttp As New MSXML2.XMLHTTP60
Dim strArgumentString As String
    'username saak, password sask, client_id ci, client_secret cs
    strArgumentString = _
    "username=" & mtypCon.IonApiUsername & _
    "&password=" & mtypCon.IonApiPassword & _
    "&client_id=" & mtypCon.IonApiClientId & _
    "&client_secret=" & mtypCon.IonApiClientSecret & _
    "&grant_type=password"

    'pu + ot
    xmlhttp.Open "POST", mtypCon.IonApiPU & mtypCon.IonApiOT, False
    xmlhttp.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
    On Error Resume Next
    xmlhttp.send strArgumentString
    If Err.Number <> 0 Then
        strMsg = "Error getting token when sending: " & Err.Description
        GetIonToken = False
        Exit Function
    End If

    mtypCon.IonToken = GetJsonField(xmlhttp.responseText, "access_token")
    mtypCon.IonTokenExpiry = DateAdd("s", GetJsonField(xmlhttp.responseText, "expires_in"), Now())
    GetIonToken = True
    Exit Function
ERROR:
    strMsg = Err.Description
    GetIonToken = False
End Function

Public Function IonApiCall(strProgram As String, strTransaction As String, ByRef strInput As String, ByRef strResult As String, ByRef strMsg As String, ByRef objXml As MSXML2.DOMDocument60) As Boolean
Dim xmlhttp As New MSXML2.XMLHTTP60
Dim argumentString As String

    argumentString = ""
    'iu + / + ti + /M3/m3api-rest/execute/
    xmlhttp.Open "GET", mtypCon.IonApiIU & "/" & mtypCon.IonApiTI & "/M3/m3api-rest/execute/" & strProgram & "/" & strTransaction & "/" & strInput, False
    xmlhttp.setRequestHeader "Accept", "application/xml" 'selects responseText to be XML
    xmlhttp.setRequestHeader "Authorization", "Bearer " & mtypCon.IonToken
    xmlhttp.send (argumentString)
    
    On Error Resume Next 'v4.4
    objXml.LoadXML xmlhttp.responseText
    objXml.SetProperty "SelectionLanguage", "XPath"
    objXml.SetProperty "SelectionNamespaces", "xmlns:ns='" & objXml.namespaces(0) & "'"
    On Error GoTo 0

    If GetNodeBaseName(objXml.DocumentElement) = "ErrorMessage" Then
        If GetAttributeText(objXml.DocumentElement, "type") = "ServerReturnedNOK" Then
            strResult = "NOK"
        Else
            strResult = GetAttributeText(objXml.DocumentElement, "type")
        End If
        strMsg = Trim(Left(GetNodeText(objXml.DocumentElement, "ns:Message"), 241)) & _
                " (" & Trim(GetAttributeText(objXml.DocumentElement, "field")) & " " & Trim(GetAttributeText(objXml.DocumentElement, "code")) & ")"
        IonApiCall = False
    ElseIf GetNodeBaseName(objXml.DocumentElement) = "miResult" Then
        strResult = "OK"
        strMsg = ""
        IonApiCall = True
    Else
        strResult = "ERROR"
        strMsg = xmlhttp.responseText
        IonApiCall = False
    End If
    Exit Function
ERROR:
    strMsg = Err.Description
    IonApiCall = False
End Function

Private Function GetNodeBaseName(ByRef objNode As MSXML2.IXMLDOMNode) As String
On Error Resume Next
GetNodeBaseName = objNode.BaseName
If Err.Number <> 0 Then GetNodeBaseName = ""
On Error GoTo 0
End Function

Private Function GetNodeText(ByRef objNode As MSXML2.IXMLDOMNode, strXPath As String) As String
On Error Resume Next
GetNodeText = objNode.SelectSingleNode(strXPath).Text
If Err.Number <> 0 Then GetNodeText = ""
On Error GoTo 0
End Function

Private Function GetAttributeText(ByRef objNode As MSXML2.IXMLDOMNode, strAttribute As String) As String
On Error Resume Next
GetAttributeText = objNode.Attributes.getNamedItem(strAttribute).Text
If Err.Number <> 0 Then GetAttributeText = ""
On Error GoTo 0
End Function

Private Function GetField(intInOut As Integer, strField As String) As Integer 'version 4.0
Dim i As Integer
For i = 1 To mintFields(intInOut)
    If Right(Trim(mtypFields(intInOut, i).FLNM), 4) = UCase(Right(Trim(strField), 4)) Then
        GetField = i
        Exit Function
    End If
Next i
GetField = 0
End Function

Private Function GetRange(ByVal row As Long, ByVal col As Integer) As String
GetRange = ""
Do While col > 0
    GetRange = Chr(65 + (col - 1) Mod 26) & GetRange
    col = (col - 1) \ 26
Loop
GetRange = GetRange & row
End Function

Private Function GetColRange(ByVal col As Integer) As String
GetColRange = ""
Do While col > 0
    GetColRange = Chr(65 + (col - 1) Mod 26) & GetColRange
    col = (col - 1) \ 26
Loop
GetColRange = GetColRange & ":" & GetColRange
End Function

Private Function GetColLetter(ByVal col As Integer) As String
GetColLetter = ""
Do While col > 0
    GetColLetter = Chr(65 + (col - 1) Mod 26) & GetColLetter
    col = (col - 1) \ 26
Loop
End Function

Private Function IsRowBlank(row As Long) As Boolean
Dim i As Integer
    For i = 1 To mintFields(1)
        If mtypFields(1, i).Column > 0 Then
            If Trim(ws.Cells(row, mtypFields(1, i).Column)) <> "" Then
                IsRowBlank = False
                Exit Function
            End If
        End If
    Next i
    IsRowBlank = True
End Function

Private Function GetConnectionDetails() As Boolean
Dim strParams() As String
Dim strLine() As String
Dim i As Integer
Dim blnMethod As Boolean, blnProgram As Boolean, blnTransaction As Boolean, blnTable As Boolean, blnType As Boolean, blnNamespace As Boolean, blnTI As Boolean

strParams = Split(ws.Cells(1, 1), vbLf)
For i = LBound(strParams) To UBound(strParams)
    strLine = Split(strParams(i), ":")
    If UBound(strLine) <= 0 Then Exit For 'version 3.0 changed from =0 to <=0
    Select Case UCase(Trim(strLine(0)))
        Case "METHOD"
            mtypCon.Method = Trim(strLine(1))
            blnMethod = True
        Case "PROGRAM"
            mtypCon.Program = Trim(strLine(1))
            blnProgram = True
        Case "TRANS"
            mtypCon.Transaction = Trim(strLine(1))
            blnTransaction = True
        Case "TABLE"
            mtypCon.Table = Trim(strLine(1))
            blnTable = True
        Case "TYPE"
            mtypCon.Type = Trim(strLine(1))
            blnType = True
        Case "COMPANY" 'version 2.1
            mtypCon.Company = Trim(strLine(1))
        Case "DIVISION" 'version 2.1
            mtypCon.Division = Trim(strLine(1))
        Case "NAMESPACE" 'version 3.0
            mtypCon.Namespace = Trim(Mid(strParams(i), 11))
            blnNamespace = True
        Case "TI" 'version 4.0
            mtypCon.IonApiTI = Trim(Mid(strParams(i), 11))
            blnTI = True
    End Select
Next i
If blnMethod And (mtypCon.Method = "API" And blnProgram And blnTransaction Or mtypCon.Method = "SQL" And blnTable And blnType Or mtypCon.Method = "WebService" And blnNamespace) Then 'version 3.0 added WebService
    GetConnectionDetails = True
Else
    GetConnectionDetails = False
    mtypCon.Method = ""
    mtypCon.Program = ""
    mtypCon.Transaction = ""
    mtypCon.Table = ""
    mtypCon.Type = ""
    mtypCon.Company = "" 'version 2.1
    mtypCon.Division = "" 'version 2.1
End If

End Function

Private Sub SQL()
Dim row As Long
Dim col As Long
Dim lastCol As Long
Dim strSql As String
Dim strFullTableName As String
Dim DateTimeCol As Long, ResultCol As Long, MsgCol As Long, SqlCol As Long
Dim i As Long
Dim typField As TypeField
Dim blnFound As Boolean
Dim intFieldsAdded As Integer
Dim blnAddMissingFields As Boolean
Dim strTmp As String
Dim blnCellValidationError As Boolean, blnRowValidationError As Boolean
Dim lngValidationErrors As Long
Dim intInvalidFields As Integer, intDuplicateFields As Integer
Dim blnNeedKey As Boolean
Dim intCount As Integer
Dim intXref(4 To 999) As Integer
Dim blnRunSqls As Boolean

If mtypCon.Schema = "" Then
    strFullTableName = mtypCon.Table
ElseIf mtypCon.Database = "" Then
    strFullTableName = mtypCon.Schema & "." & mtypCon.Table
Else
    strFullTableName = mtypCon.Database & "." & mtypCon.Schema & "." & mtypCon.Table
End If

If GetFields(mtypCon.Schema, mtypCon.Table) = False Then Exit Sub

'Setup worksheet
If mblnSetupDone = False Then
    ws.Range("1:1").Insert xlDown, xlFormatFromLeftOrAbove
    ws.Range("A:A").Insert xlToRight, xlFormatFromLeftOrAbove
    ws.Range("A:A").Insert xlToRight, xlFormatFromLeftOrAbove
    ws.Range("A:A").Insert xlToRight, xlFormatFromLeftOrAbove
    ws.Cells(2, 1) = "Date/Time"
    ws.Cells(2, 2) = "Result"
    ws.Cells(2, 3) = "Message"
End If
ws.Cells(1, 1) = "Method: SQL" & vbLf & "Table:" & mtypCon.Table & vbLf & _
                 "Type:" & mtypCon.Type
ws.Range("A:A").NumberFormat = "d/mm/yy h:mm:ss"
ws.Range("A1:B1").HorizontalAlignment = xlLeft
ws.Range("A1:B1").VerticalAlignment = xlTop
If ws.UsedRange.columns.Count >= 3 Then
    With ws.Range("C1:" & GetRange(1, ws.UsedRange.columns.Count))
        .Orientation = 90
        .HorizontalAlignment = xlLeft
        .ClearContents
        .VerticalAlignment = xlBottom
    End With
End If
ws.columns("A:A").ColumnWidth = 25
ws.Range("1:1").Interior.Pattern = xlNone
ws.Range("2:2").Font.Bold = True 'version 1.10
ws.Range("A1:A1").Interior.Color = RGB(220, 220, 220)
ActiveWindow.FreezePanes = False
ws.Range("A3").Select
ActiveWindow.FreezePanes = True
    
'get last column
For col = 1 To ws.UsedRange.columns.Count
    If ws.Cells(2, col) = "" Or Trim(UCase(ws.Cells(2, col))) = "SQL STATEMENT" Then
        Exit For
    Else
        lastCol = col
    End If
Next col
   
'set column headings
DateTimeCol = 1
ResultCol = 2
MsgCol = 3
SqlCol = lastCol + 1
ws.Cells(2, SqlCol) = "Sql Statement"

blnNeedKey = (mtypCon.Type = "Update" Or mtypCon.Type = "Select")
    
'process fields
intInvalidFields = 0
intDuplicateFields = 0
mintKeyCount = 0
Erase mblnKey 'version 1.7.1
For col = 4 To lastCol
    blnFound = False
    For i = 1 To mintFields(1)
        If UCase(Trim(mtypFields(1, i).FLNM)) = UCase(Trim(Replace(ws.Cells(2, col), "*", ""))) Then 'version 1.72 added UCASE
            If mtypFields(1, i).Column > 0 Then
                intDuplicateFields = intDuplicateFields + 1
                ws.Cells(1, col) = "DUPLICATE"
                ws.Range(GetRange(1, col)).Interior.Color = vbRed
            Else
                If mtypFields(1, i).FLDS <> "" Then strTmp = mtypFields(1, i).FLDS & vbCrLf Else strTmp = ""
                strTmp = strTmp & mtypFields(1, i).Type & "(" & mtypFields(1, i).LENG
                If mtypFields(1, i).Type = "N" Then strTmp = strTmp & "," & mtypFields(1, i).Decimals & ")" Else strTmp = strTmp & ")"
                ws.Cells(1, col) = strTmp
                ws.Range(GetRange(1, col)).Interior.Color = vbGreen
                intXref(col) = i
                If blnNeedKey = True And InStr(1, ws.Cells(2, col), "*") > 0 Then
                    mintKeyCount = mintKeyCount + 1
                    mblnKey(col) = True
                    ws.Range(GetRange(1, col)).Interior.Color = vbYellow
                    ws.Cells(1, col) = "KEY" & vbCrLf & ws.Cells(1, col)
                Else
                    mtypFields(1, i).Column = col
                End If
            End If
            blnFound = True
            Exit For
        End If
    Next i
    If Not blnFound Then
        intInvalidFields = intInvalidFields + 1
        ws.Cells(1, col) = "INVALID"
        ws.Range(GetRange(1, col)).Interior.Color = vbRed
    End If
Next col

'add missing fields
If mtypCon.Type = "Insert" Then
    blnAddMissingFields = True
ElseIf mblnSetupDone = False Then
    blnAddMissingFields = (MsgBox("Do you want missing fields added?" & vbCrLf & "If so, they will be added as new columns to the right of the last field", vbYesNoCancel) = vbYes)
Else
    blnAddMissingFields = False
End If
If blnAddMissingFields = True Then
    intFieldsAdded = 0
    For i = 1 To mintFields(1)
        If mtypFields(1, i).Column = 0 Then
            lastCol = lastCol + 1
            ws.Range(GetColRange(lastCol)).Insert xlToRight, xlFormatFromLeftOrAbove
            If mtypFields(1, i).FLDS <> "" Then strTmp = mtypFields(1, i).FLDS & vbCrLf Else strTmp = ""
            strTmp = strTmp & mtypFields(1, i).Type & "(" & mtypFields(1, i).LENG
            If mtypFields(1, i).Type = "N" Then strTmp = strTmp & "," & mtypFields(1, i).Decimals & ")" Else strTmp = strTmp & ")"
            ws.Cells(1, lastCol) = strTmp
            ws.Cells(2, lastCol) = mtypFields(1, i).FLNM
            ws.Range(GetRange(1, lastCol)).Interior.Color = vbRed
            mtypFields(1, i).Column = lastCol
            intXref(lastCol) = i
            SqlCol = lastCol + 1
            intFieldsAdded = intFieldsAdded + 1
        End If
    Next i
End If

'Check we have a key if needed
If blnNeedKey = True And mintKeyCount = 0 Then
    MsgBox "Please define Key(s) by placing an asterisk (*) at the start of the field name in row 2", vbCritical
    Exit Sub
End If

'Exit if duplicate fields
If intDuplicateFields > 0 Then
    MsgBox intDuplicateFields & " duplicate field(s).", vbCritical
    Exit Sub
End If

'Warn if any invalid fields or missing fields have been added
If intInvalidFields > 0 Or intFieldsAdded > 0 Then
    strTmp = ""
    If intInvalidFields > 0 Then strTmp = intInvalidFields & " invalid field(s)." & vbCrLf
    If intFieldsAdded > 0 Then strTmp = strTmp & "Added " & intFieldsAdded & " field(s)." & vbCrLf
    strTmp = strTmp & "Do you wish to continue"
    If MsgBox(strTmp, vbYesNoCancel) <> vbYes Then
        Exit Sub
    End If
End If

'Validation
lngValidationErrors = 0
For row = 3 To ws.UsedRange.rows.Count
    If ws.Cells(row, ResultCol) = "OK" Then
        'do nothing
    ElseIf Trim(ws.Cells(row, 4)) = "" Then
        ws.Cells(row, ResultCol) = ""
        ws.Range(GetRange(row, ResultCol)).Interior.Color = xlNone
        ws.Cells(row, MsgCol) = ""
        ws.Range(GetRange(row, MsgCol)).Interior.Color = xlNone
    Else 'validate row
        blnRowValidationError = False
        For col = 4 To lastCol
            i = intXref(col)
            If i > 0 And Not (mtypCon.Type = "Select" And mblnKey(col) = False) Then
                blnCellValidationError = False
                If mtypFields(1, i).Type = "N" Then
                    If IsNumeric(Trim(ws.Cells(row, col))) = False Or Trim(ws.Cells(row, col)) = "" Then
                        blnCellValidationError = True
                    ElseIf Len(GetIntegerAbsolute(ws.Cells(row, col))) + Len(GetDecimal(ws.Cells(row, col))) > mtypFields(1, i).LENG Or Len(GetDecimal(ws.Cells(row, col))) > mtypFields(1, i).Decimals Then
                        blnCellValidationError = True
                    End If
                Else
                    If Len(RTrim(ws.Cells(row, col))) > mtypFields(1, i).LENG Then 'version 3.3 changed: Trim to: RTrim
                        blnCellValidationError = True
                    End If
                End If
                If blnCellValidationError Then
                    blnRowValidationError = True
                    ws.Range(GetRange(row, col)).Interior.Color = vbRed
                Else
                    ws.Range(GetRange(row, col)).Interior.Pattern = xlNone
                End If
            End If
        Next col
        ws.Cells(row, 1) = Now()
        If blnRowValidationError = True Then
            lngValidationErrors = lngValidationErrors + 1
            ws.Cells(row, ResultCol) = "VALIDATION ERROR"
            ws.Range(GetRange(row, ResultCol)).Interior.Color = vbRed
            ws.Cells(row, MsgCol) = "Failed Validation Check"
            ws.Range(GetRange(row, MsgCol)).Interior.Color = vbRed
        Else
            ws.Cells(row, ResultCol) = "Validated"
            ws.Range(GetRange(row, ResultCol)).Interior.Color = xlNone
            ws.Cells(row, MsgCol) = ""
            ws.Range(GetRange(row, MsgCol)).Interior.Color = xlNone
        End If
    End If
Next row
ws.columns(DateTimeCol).EntireColumn.AutoFit
ws.columns(ResultCol).EntireColumn.AutoFit
ws.columns(MsgCol).EntireColumn.AutoFit
          
'generate sql statements
For row = 3 To ws.UsedRange.rows.Count
    If Trim(ws.Cells(row, 4)) = "" Or Trim(ws.Cells(row, ResultCol)) = "VALIDATION ERROR" Then
        ws.Cells(row, SqlCol) = ""
    ElseIf Trim(ws.Cells(row, ResultCol)) <> "OK" Then
        Select Case mtypCon.Type
            Case "Insert"
                strSql = "INSERT INTO " & strFullTableName & "("
                intCount = 0
                For col = 4 To lastCol
                    i = intXref(col)
                    If i > 0 Then
                        If intCount > 0 Then strSql = strSql + ","
                        strSql = strSql + mtypFields(1, i).FLNM
                        intCount = intCount + 1
                    End If
                Next col
                strSql = strSql & ") VALUES("
                intCount = 0
                For col = 4 To lastCol
                    i = intXref(col)
                    If i > 0 Then
                        If intCount > 0 Then strSql = strSql + ","
                        If mtypFields(1, i).Type = "N" Then
                            strSql = strSql & Replace(Trim(ws.Cells(row, col)), "'", "''") ' numeric so no quotes
                        Else
                            strSql = strSql & "'" & Replace(RTrim(ws.Cells(row, col)), "'", "''") & "'" 'version 3.3 changed: Trim to: RTrim
                        End If
                        intCount = intCount + 1
                    End If
                Next col
                strSql = strSql + ")"
            Case "Update", "Select"
                If mtypCon.Type = "Update" Then strSql = "UPDATE " & strFullTableName & " SET "
                If mtypCon.Type = "Select" Then strSql = "SELECT "
                intCount = 0
                For col = 4 To lastCol
                    i = intXref(col)
                    If i > 0 And mblnKey(col) = False Then
                        If intCount > 0 Then strSql = strSql + ","
                        If mtypFields(1, i).Type = "N" Then
                            strSql = strSql + mtypFields(1, i).FLNM
                            If mtypCon.Type = "Update" Then strSql = strSql & "=" & Replace(Trim(ws.Cells(row, col)), "'", "''") ' numeric so no quotes
                        Else
                            strSql = strSql + mtypFields(1, i).FLNM
                            If mtypCon.Type = "Update" Then strSql = strSql & "='" & Replace(RTrim(ws.Cells(row, col)), "'", "''") & "'" 'version 3.3 changed: Trim to: RTrim
                        End If
                        intCount = intCount + 1
                    End If
                Next col
                If mtypCon.Type = "Select" Then strSql = strSql & " FROM " & strFullTableName
                strSql = strSql & " WHERE "
                intCount = 0
                For col = 4 To lastCol
                    i = intXref(col)
                    If i > 0 And mblnKey(col) = True Then
                        If intCount > 0 Then strSql = strSql + " and "
                        If mtypFields(1, i).Type = "N" Then
                            strSql = strSql & mtypFields(1, i).FLNM & "=" & Replace(Trim(ws.Cells(row, col)), "'", "''") ' numeric so no quotes
                        Else
                            strSql = strSql & mtypFields(1, i).FLNM & "='" & Replace(Trim(ws.Cells(row, col)), "'", "''") & "'"
                        End If
                        intCount = intCount + 1
                    End If
                Next col
        End Select
        ws.Cells(row, SqlCol) = strSql
    End If
Next row
    
'Decide if calling RunSqls
If mblnAuto = True Then
    blnRunSqls = True
Else
    If lngValidationErrors > 0 Then
        strTmp = lngValidationErrors & " validation error(s)." & vbCrLf & "Rows with validation errors will be skipped." & vbCrLf
    Else
        strTmp = ""
    End If
    strTmp = strTmp & "Do you want to run SQLs?"
    blnRunSqls = (MsgBox(strTmp, vbYesNoCancel) = vbYes)
End If
If blnRunSqls = True Then ExecuteSQLs 3, SqlCol, DateTimeCol, ResultCol, MsgCol, , True 'version 2.1 renamed from RunSQLs to ExecuteSQLs
If lngValidationErrors > 0 Then mblnSuccessfull = False
End Sub

Sub ExecuteSQL()
    'mtypCon.ConnectionString = GetParam("SQL Connection String") 'version 2.0 commented out
    'mtypCon.DSN = GetParam("SQL Data Source Name") 'version 2.0 commented out
    mtypCon.UserID = GetParam("SQL User ID")
    mtypCon.Password = mstrSqlPassword
    mtypCon.Schema = GetParam("SQL Schema")
    If mtypCon.Password = "" Then 'version 2.0 removed: mtypCon.ConnectionString = ""
        frmPassword.Show
        If mblnCancelled = True Then Exit Sub
    End If
    mstrSqlPassword = mtypCon.Password
    ExecuteSQLs 1, 1, 0, 2, 3, 3 'version 2.1 renamed from RunSQLs to ExecuteSQLs
End Sub

Private Sub ExecuteSQLs(startRow As Long, SqlCol As Long, DateTimeCol As Long, ResultCol As Long, MsgCol As Long, Optional SelectStartCol As Long, Optional blnExpandRows As Boolean) 'version 2.1 renamed from RunSQLs to ExecuteSQLs
Dim wsActive As Worksheet
Dim row As Long, col As Long, i As Long
Dim lngRecordsAffected As Long
Dim lngErrors As Long, lngOK As Long
Dim intFld As Integer
Dim lastRow As Long
Dim lngRecCnt As Long
    
mblnSuccessfull = False 'v1.20
Set wsActive = ActiveSheet

If OpenSqlConnection(mtypCon.Driver, mtypCon.Server, mtypCon.Database, mtypCon.Schema, mtypCon.UserID, mtypCon.Password) = False Then Exit Sub   'version 2.0 removed: mtypCon.ConnectionString, added: mtypCon.Driver, mtypCon.Server, removed: mtypCon.DSN,

lastRow = wsActive.UsedRange.rows.Count
row = startRow
Do While row <= lastRow
    If wsActive.Cells(row, SqlCol) <> "" And wsActive.Cells(row, ResultCol) <> "OK" Then
        If DateTimeCol > 0 Then wsActive.Cells(row, DateTimeCol) = Now()
        On Error Resume Next
        Set mobjRec = mobjCon.Execute(wsActive.Cells(row, SqlCol), lngRecordsAffected)
        If Err.Number <> 0 Then
            wsActive.Cells(row, ResultCol) = "ERROR"
            wsActive.Range(GetRange(row, ResultCol)).Interior.Color = vbRed
            wsActive.Cells(row, MsgCol) = Err.Description
            lngErrors = lngErrors + 1
        ElseIf mobjRec.State = adStateOpen Then  '1=adStateOpen
            lngRecCnt = 0
            Do While mobjRec.BOF = False And mobjRec.EOF = False
                lngRecCnt = lngRecCnt + 1
                If lngRecCnt > 1 Then
                    'insert new row
                    row = row + 1
                    lastRow = lastRow + 1
                    wsActive.Range(row & ":" & row).Insert xlDown, xlFormatFromLeftOrAbove
                    If DateTimeCol > 0 Then wsActive.Cells(row, DateTimeCol) = Now()
                    For col = 4 To wsActive.UsedRange.columns.Count 'copy down keys
                        If mblnKey(col) = True Then wsActive.Cells(row, col) = wsActive.Cells(row - 1, col)
                    Next col
                End If
                wsActive.Cells(row, ResultCol) = "OK"
                wsActive.Range(GetRange(row, ResultCol)).Interior.Color = vbGreen
                For intFld = 0 To mobjRec.Fields.Count - 1
                    If SelectStartCol > 0 Then
                        wsActive.Cells(row, SelectStartCol + intFld) = mobjRec.Fields(intFld).VALUE
                    Else
                        For i = 1 To mintFields(1)
                            If UCase(Trim(mobjRec.Fields(intFld).Name)) = UCase(Trim(mtypFields(1, i).FLNM)) Then
                                If mtypFields(1, i).Column > 0 Then
                                    wsActive.Cells(row, mtypFields(1, i).Column) = mobjRec.Fields(intFld).VALUE
                                End If
                            End If
                        Next i
                    End If
                Next intFld
                lngOK = lngOK + 1
                If blnExpandRows = False Then Exit Do
                mobjRec.MoveNext
            Loop
            mobjRec.Close
            If lngRecCnt = 0 Then
                wsActive.Cells(row, ResultCol) = "ERROR"
                wsActive.Range(GetRange(row, 3)).Interior.Color = vbRed
                wsActive.Cells(row, MsgCol) = "0 rows returned"
                lngErrors = lngErrors + 1
            End If
        ElseIf lngRecordsAffected = 0 Then
            wsActive.Cells(row, ResultCol) = "ERROR"
            wsActive.Range(GetRange(row, ResultCol)).Interior.Color = vbRed
            wsActive.Cells(row, MsgCol) = lngRecordsAffected & " record(s) updated"
            lngErrors = lngErrors + 1
        Else
            wsActive.Cells(row, ResultCol) = "OK"
            wsActive.Range(GetRange(row, ResultCol)).Interior.Color = vbGreen
            wsActive.Cells(row, MsgCol) = lngRecordsAffected & " record(s) updated"
            lngOK = lngOK + 1
        End If
        On Error GoTo 0
    End If
    row = row + 1
Loop

mobjCon.Close

If DateTimeCol > 0 Then wsActive.columns(DateTimeCol).EntireColumn.AutoFit
wsActive.columns(ResultCol).EntireColumn.AutoFit
wsActive.columns(MsgCol).EntireColumn.AutoFit
    
If mblnAuto = False Or lngErrors > 0 Then
    MsgBox "Finished. " & lngOK & " rows processed OK. " & lngErrors & " row(s) with an error", vbExclamation
End If
mblnSuccessfull = (lngErrors = 0) 'v1.20

End Sub

Public Function GetParam(ByVal strKey As String) As String
Dim row As Long
Dim wsParam As Worksheet

    Set wsParam = Worksheets("Params")
    strKey = UCase(Trim(strKey))
    For row = 1 To wsParam.UsedRange.rows.Count
        If strKey = UCase(Trim(wsParam.Cells(row, 1))) Then
            GetParam = Trim(wsParam.Cells(row, 2))
            Exit Function
        End If
    Next row
    GetParam = ""
End Function

Function UpdateParam(ByVal strKey As String, ByVal strValue As String) As Boolean
Dim row As Long
Dim wsParam As Worksheet

    Set wsParam = Worksheets("Params")

    strKey = UCase(Trim(strKey))
    For row = 1 To wsParam.UsedRange.rows.Count
        If strKey = UCase(Trim(wsParam.Cells(row, 1))) Then
            wsParam.Cells(row, 2) = Trim(strValue)
            UpdateParam = True
            Exit Function
        End If
    Next row
    UpdateParam = False
End Function
Public Function GetPassword(ByVal strKey As String) As String 'version 3.0
Dim row As Long
Dim wsPasswords As Worksheet

    Set wsPasswords = Worksheets("Passwords")
    strKey = UCase(Trim(strKey))
    For row = 1 To wsPasswords.UsedRange.rows.Count
        If strKey = UCase(Trim(wsPasswords.Cells(row, 1))) Then
            GetPassword = Trim(wsPasswords.Cells(row, 2))
            Exit Function
        End If
    Next row
    GetPassword = ""
End Function

Sub Clear()
Dim wsActive As Worksheet
Dim headingRow As Long
Dim row As Long, col As Long
Dim SqlCol As Long, DateTimeCol As Long, ResultCol As Long, MsgCol As Long
Dim strColumns As String
Dim blnClearAll As Boolean

Set wsActive = ActiveSheet

'get columns to clear
For row = 2 To 3
    For col = 1 To wsActive.UsedRange.columns.Count
        Select Case UCase(Trim(wsActive.Cells(row, col)))
            Case "DATE/TIME"
                DateTimeCol = col
                headingRow = row
                If strColumns <> "" Then strColumns = strColumns & ", "
                strColumns = strColumns & GetColLetter(col)
            Case "RESULT"
                ResultCol = col
                headingRow = row
                If strColumns <> "" Then strColumns = strColumns & ", "
                strColumns = strColumns & GetColLetter(col)
            Case "MESSAGE"
                MsgCol = col
                 If strColumns <> "" Then strColumns = strColumns & ", "
                strColumns = strColumns & GetColLetter(col)
           Case "SQL STATEMENT"
                SqlCol = col
                headingRow = row
                If strColumns <> "" Then strColumns = strColumns & ", "
                strColumns = strColumns & GetColLetter(col)
        End Select
    Next col
Next row

If strColumns = "" Then
    blnClearAll = True
    strColumns = "B to " & GetColLetter(wsActive.UsedRange.columns.Count)
End If

If mblnAuto = False Then
    If MsgBox("You are about to clear columns " & strColumns & vbCrLf & "starting at row " & headingRow + 1 & vbCrLf & "Do you want to continue?", vbYesNoCancel) <> vbYes Then
        Exit Sub
    End If
End If

'clear cells
For col = 1 To wsActive.UsedRange.columns.Count
    If col > 1 And blnClearAll Or col = SqlCol Or col = DateTimeCol Or col = ResultCol Or col = MsgCol Then
        wsActive.Range(GetRange(headingRow + 1, col) & ":" & GetRange(GetLastRow(wsActive), col)).Interior.Pattern = xlNone
        wsActive.Range(GetRange(headingRow + 1, col) & ":" & GetRange(GetLastRow(wsActive), col)).ClearContents
    End If
Next col
End Sub

Public Function OpenSqlConnection(strDriver As String, strServer As String, strDatabase As String, strSchema As String, strUserID As String, strPassword As String) As Boolean 'version 2.0 removed: strConnectionString As String, added: strDriver and strServer, removed: strDSN As String,added: strDatabase
Dim wsDriverMap As Worksheet
If mobjCon.State <> adStateOpen Then
    'version 2.0
    If ValidateSQLServer(strServer) = False Then 'version 2.3
        MsgBox "Server  " & strServer & " is not on list of valid servers", vbCritical
        OpenSqlConnection = False
        Exit Function
    End If
        
    If strDriver = "SQL Server" Then
        mobjCon.ConnectionString = _
            "DRIVER={" & strDriver & "};" & _
            "SERVER=" & strServer & ";" & _
            "DATABASE=" & strDatabase & ";" & _
            "UID=" & strUserID & ";" & _
            "PWD=" & strPassword & ";"
    ElseIf strDriver = "iSeries Access ODBC Driver" Then
        mobjCon.ConnectionString = _
            "DRIVER={" & strDriver & "};" & _
            "SYSTEM=" & strServer & ";" & _
            "DefaultLibraries=" & strSchema & ";" & _
            "UID=" & strUserID & ";" & _
            "PWD=" & strPassword & ";"
    ElseIf strDriver = "PostgreSQL Unicode" Then 'version 2.5
        mobjCon.ConnectionString = _
            "DRIVER={" & strDriver & "};" & _
            "SERVER=" & strServer & ";" & _
            "Port=5444" & ";" & _
            "DATABASE=" & strDatabase & ";" & _
            "UID=" & strUserID & ";" & _
            "PWD=" & strPassword & ";"
    Else
        mobjCon.ConnectionString = ""
    End If
'        mobjCon.ConnectionString = _
'            "DRIVER={" & strDriver & "};" & _
'            Vlookup(wsDriverMap, mtypCon.Driver, "Driver", "Server", 1) & "=" & strServer & ";" & _
'            Vlookup(wsDriverMap, mtypCon.Driver, "Driver", "Database", 1) & "=" & strDatabase & ";" & _
'            Vlookup(wsDriverMap, mtypCon.Driver, "Driver", "User", 1) & "=" & strUserID & ";" & _
'            Vlookup(wsDriverMap, mtypCon.Driver, "Driver", "Password", 1) & "=" & strPassword & ";"
    mobjCon.CursorLocation = adUseServer
    On Error Resume Next
    mobjCon.Open
    If Err.Number <> 0 Then
        MsgBox "Error opening SQL connection. " & Err.Description, vbCritical
        On Error GoTo 0
        OpenSqlConnection = False
        Exit Function
    End If
    On Error GoTo 0
End If
OpenSqlConnection = True
End Function

Private Function GetFields(strSchema As String, strTable As String) As Boolean
Dim recColumns As ADODB.Recordset
'Dim recPrimaryKey As ADODB.Recordset
Dim typField As TypeField
Dim strTmp As String
    
mintFields(1) = 0

If OpenSqlConnection(mtypCon.Driver, mtypCon.Server, mtypCon.Database, mtypCon.Schema, mtypCon.UserID, mtypCon.Password) = False Then 'version 2.0 removed: mtypCon.ConnectionString,added: mtypCon.Driver, mtypCon.Server, removed: mtypCon.DSN,
    GetFields = False
    Exit Function
End If

Set recColumns = mobjCon.OpenSchema(adSchemaColumns, Array(Empty, strSchema, strTable))

Do While recColumns.BOF = False And recColumns.EOF = False
    typField.FLNM = recColumns!COLUMN_NAME
    typField.FRPO = recColumns!ORDINAL_POSITION
    If recColumns!DATA_TYPE = adNumeric Then
        typField.Type = "N"
        typField.LENG = recColumns!NUMERIC_PRECISION
        typField.Decimals = recColumns!NUMERIC_SCALE
    ElseIf recColumns!DATA_TYPE = adInteger Then 'version 1.91
        typField.Type = "N"
        typField.LENG = recColumns!NUMERIC_PRECISION
        typField.Decimals = 0
    ElseIf recColumns!DATA_TYPE = adDouble Then 'version 1.91
        typField.Type = "N"
        typField.LENG = recColumns!NUMERIC_PRECISION
        typField.Decimals = 0
    ElseIf recColumns!DATA_TYPE = adDBTimeStamp Then 'version 1.92
        typField.Type = "A"
        typField.LENG = 23
        typField.Decimals = 0
    Else
        typField.Type = "A"
        typField.LENG = recColumns!CHARACTER_MAXIMUM_LENGTH
    End If
    typField.MAND = True
    typField.Column = 0
    If IsNull(recColumns!Description) Then
        typField.FLDS = GetFieldDescription(typField.FLNM)
    ElseIf Trim(recColumns!Description) = "" Then
        typField.FLDS = GetFieldDescription(typField.FLNM)
    Else
        typField.FLDS = recColumns!Description
    End If
    mintFields(1) = mintFields(1) + 1
    mtypFields(1, mintFields(1)) = typField
    recColumns.MoveNext
Loop

'Set recPrimaryKey = mobjCon.OpenSchema(adSchemaPrimaryKeys, Array(Empty, strSchema, strTable))
'Do While recPrimaryKey.BOF = False And recPrimaryKey.EOF = False
'    strTmp = recPrimaryKey!COLUMN_NAME
'    recPrimaryKey.MoveNext
'Loop

mobjCon.Close
GetFields = True

End Function

Private Function GetFieldDescription(strFieldName As String) As String
Dim wsFields As Worksheet
Dim row As Long, row4 As Long
Dim RangeSource As Range, RangeFound As Range
On Error Resume Next
Set wsFields = Worksheets("Fields")
If Err.Number <> 0 Then
    On Error GoTo 0
    GetFieldDescription = ""
    Exit Function
End If
On Error GoTo 0

Set RangeSource = wsFields.Range("A:A")

'look for full field name
Set RangeFound = RangeSource.Find(strFieldName, , , xlWhole)
If Not RangeFound Is Nothing Then
    row = RangeFound.row
    GetFieldDescription = wsFields.Cells(row, 2)
    Exit Function
End If

'look for field name minus leading 2 characters
Set RangeFound = RangeSource.Find(Mid(strFieldName, 3), , , xlWhole)
If Not RangeFound Is Nothing Then
    row = RangeFound.row
    GetFieldDescription = wsFields.Cells(row, 2)
    Exit Function
End If
GetFieldDescription = ""
End Function

Private Function GetIntegerAbsolute(ByVal strNum As String) As String 'version 3.3 changed name from GetInteger
Dim i As Integer
    GetIntegerAbsolute = ""
    strNum = Trim(strNum)
    If Left(strNum, 1) = "-" Then strNum = Mid(strNum, 2) 'version 3.3
    i = InStrRev(strNum, ".")
    If i > 0 Then strNum = Mid(strNum, 1, i - 1)
    i = 1
    Do While i < Len(strNum)
        If Mid(strNum, i, 1) <> "0" Then Exit Do
        i = i + 1
    Loop
    GetIntegerAbsolute = Mid(strNum, i)
End Function

Private Function GetDecimal(ByVal strNum As String) As String
Dim i As Integer
    GetDecimal = ""
    strNum = Trim(strNum)
    i = InStrRev(strNum, ".")
    If i < 1 Then Exit Function
    strNum = Mid(strNum, i + 1)
    i = Len(strNum)
    Do While i > 0
        If Mid(strNum, i, 1) <> "0" Then Exit Do
        i = i - 1
    Loop
    GetDecimal = Mid(strNum, 1, i)
End Function

Public Function RemoveMultipleSpaces(strString As String) As String
Dim i As Integer
RemoveMultipleSpaces = Left(strString, 1)
For i = 2 To Len(strString)
    If Mid(strString, i, 1) <> " " Or Mid(strString, i - 1, 1) <> " " Then
        RemoveMultipleSpaces = RemoveMultipleSpaces & Mid(strString, i, 1)
    End If
Next i
End Function

Public Function SplitFirstField(strInput As String) As String
Dim strFields() As String
On Error Resume Next
strFields = Split(Trim(strInput), " ")
SplitFirstField = strFields(0)
End Function

Public Function ValidateAPIServer(strIP As String) As Boolean
Dim ws As Worksheet
Dim row As Long, lastRow As Long
Dim col As Long
Set ws = Worksheets("Validations")
lastRow = GetLastRow(ws)
col = GetCol(ws, "ION API TI", 1)
For row = 2 To lastRow
    If SplitFirstField(ws.Cells(row, col)) = Trim(strIP) Then
        ValidateAPIServer = True
        Exit Function
    End If
Next row
ValidateAPIServer = False
End Function

Public Function ValidateSQLServer(strIP As String) As Boolean
Dim ws As Worksheet
Dim row As Long, lastRow As Long
Dim col As Long
Set ws = Worksheets("Validations")
lastRow = GetLastRow(ws)
col = GetCol(ws, "SQL SERVER", 1)
For row = 2 To lastRow
    If SplitFirstField(ws.Cells(row, col)) = Trim(strIP) Then
        ValidateSQLServer = True
        Exit Function
    End If
Next row
ValidateSQLServer = False
End Function

Private Function GetWebServices() As Boolean
Dim ws As Worksheet
Dim row As Long
Dim intInputField As Integer
Dim colInputField As Long
Dim strFLNM As String

Erase mtypWebServices
mintWebServices = 0
On Error Resume Next
Set ws = Worksheets("Web Services")
If Err.Number <> 0 Then
    On Error GoTo 0
    GetWebServices = False
    Exit Function
End If
On Error GoTo 0
For row = 3 To GetLastRow(ws)
    If Trim(GetCellValue(ws, "Namespace", row, 1)) <> "" Then
        mintWebServices = mintWebServices + 1
        mtypWebServices(mintWebServices).Namespace = Trim(GetCellValue(ws, "Namespace", row, 1))
        mtypWebServices(mintWebServices).Program = Trim(GetCellValue(ws, "Program", row, 1))
        'mtypWebServices(mintWebServices).Prefix = Trim(GetCellValue(ws, "Prefix", row, 1))
        mtypWebServices(mintWebServices).Prefix = LCase(Left(mtypWebServices(mintWebServices).Program, 3))
        mtypWebServices(mintWebServices).InputFields = 0
        For intInputField = 1 To 99
            colInputField = GetCol(ws, "Input " & intInputField, 1)
            If colInputField = 0 Then Exit For
            strFLNM = Trim(ws.Cells(row, colInputField))
            If strFLNM <> "" Then
                mtypWebServices(mintWebServices).InputFields = mtypWebServices(mintWebServices).InputFields + 1
                mtypWebServices(mintWebServices).InputField(mtypWebServices(mintWebServices).InputFields).FLNM = strFLNM
                mtypWebServices(mintWebServices).InputField(mtypWebServices(mintWebServices).InputFields).FLDS = ws.Cells(row, colInputField + 1)
                mtypWebServices(mintWebServices).InputField(mtypWebServices(mintWebServices).InputFields).Type = ws.Cells(row, colInputField + 2)
                mtypWebServices(mintWebServices).InputField(mtypWebServices(mintWebServices).InputFields).LENG = ws.Cells(row, colInputField + 3)
            End If
        Next intInputField
    End If
Next row
End Function

Private Function GetWebService(strNameSpace As String) As Integer
Dim intWebService As Integer
For intWebService = 1 To mintWebServices
    If Trim(strNameSpace) = Trim(mtypWebServices(intWebService).Namespace) Then
        GetWebService = intWebService
        Exit Function
    End If
Next intWebService
GetWebService = 0
End Function

Private Sub Webservice()
Dim enumResult As CheckSheetResult
Dim rc As Integer
Dim strReturn As String
Dim i As Integer
Dim typField As TypeField
Dim intField As Integer
Dim row As Long
Dim col As Long
Dim strMsg As String
Dim strArray() As String
Dim strInput As String
Dim blnError As Boolean
Dim lngErrors As Long
Dim lngOK As Long
Dim strField As String
Dim strResult As String
Dim lngLastRow As Long, lngRecordCount As Long 'version 1.8

mlngValidationErrors = 0

mintWebService = GetWebService(mtypCon.Namespace)
If mintWebService < 1 Then
    MsgBox "Invalid namespace: " & mtypCon.Namespace, vbCritical
    Exit Sub
End If

'Setup worksheet
If mblnSetupDone = False Then
    ws.Range("1:1").Insert xlDown, xlFormatFromLeftOrAbove
    ws.Range("A:A").Insert xlToRight, xlFormatFromLeftOrAbove
    ws.Range("A:A").Insert xlToRight, xlFormatFromLeftOrAbove
    ws.Range("A:A").Insert xlToRight, xlFormatFromLeftOrAbove
    ws.Cells(2, 1) = "Date/Time"
    ws.Cells(2, 2) = "Result"
    ws.Cells(2, 3) = "Message"
End If
ws.Cells(1, 1) = "Method: WebService" & vbLf & _
                 "Namespace:" & mtypCon.Namespace
ws.Range("A:A").NumberFormat = "d/mm/yy h:mm:ss"
ws.Range("A1:B1").HorizontalAlignment = xlLeft
ws.Range("A1:B1").VerticalAlignment = xlTop
If ws.UsedRange.columns.Count >= 3 Then 'version 1.10
    With ws.Range("C1:" & GetRange(1, ws.UsedRange.columns.Count))
        .Orientation = 90
        .HorizontalAlignment = xlLeft
        .ClearContents
        .VerticalAlignment = xlBottom 'version 1.10
    End With
End If
ws.columns("A:A").ColumnWidth = 25
ws.Range("1:1").Interior.Pattern = xlNone
ws.Range("A1:A1").Interior.Color = RGB(220, 220, 220)
ws.Range("2:2").Font.Bold = True 'version 1.10
ActiveWindow.FreezePanes = False
ws.Range("A3").Select
ActiveWindow.FreezePanes = True

'read input fields for transaction
mintFields(1) = 0
strMsg = ""
For intField = 1 To mtypWebServices(mintWebService).InputFields
    mintFields(1) = mintFields(1) + 1
    mtypFields(1, mintFields(1)) = mtypWebServices(mintWebService).InputField(intField)
Next intField

'Check if any columns exist at all. If none, then add all possible columns
i = 0
For col = 4 To ws.UsedRange.columns.Count + 1
    If Trim(ws.Cells(2, col)) <> "" Then i = i + 1  'version 1.10
Next col
If i = 0 Then
    For i = 1 To mintFields(1)
        ws.Cells(2, 3 + i) = Trim(mtypFields(1, i).FLNM)
    Next i
End If
ws.Range("C1:" & GetRange(1, ws.UsedRange.columns.Count)).Orientation = 90 'version 1.10

'Map fields to columns
mlngValidationErrors = 0
strMsg = ""
For col = 4 To ws.UsedRange.columns.Count
    intField = GetWSField(ws.Cells(2, col))
    If intField > 0 Then
        ws.Cells(1, col) = Trim(mtypFields(1, intField).FLDS)
        mtypFields(1, intField).Column = col
        ws.Range(GetRange(1, col)).Interior.Color = vbGreen
    ElseIf Trim(ws.Cells(2, col)) = "" Then 'version 1.10
        ws.Cells(1, col) = "WARNING Blank column" & vbLf & "Will be ignored"
        ws.Range(GetRange(1, col)).Interior.Pattern = xlNone
    Else
        ws.Cells(1, col) = "WARNING Invalid Field" & vbLf & "Will be ignored"
        ws.Range(GetRange(1, col)).Interior.Color = vbRed
    End If
Next col
ws.rows("1:1").EntireRow.AutoFit

'Check for missing mandatory fields
For i = 1 To mintFields(1)
    If mtypFields(1, i).MAND = True And mtypFields(1, i).Column = 0 Then
        mlngValidationErrors = mlngValidationErrors + 1
        ws.Range("D:D").Insert xlToRight, xlFormatFromLeftOrAbove
        ws.Cells(1, 4) = mtypFields(1, i).FLDS & vbLf & "INSERTED Mandatory Field"
        ws.Range(GetRange(1, 4)).Interior.Color = vbRed
        ws.Range(GetRange(1, 4)).Orientation = 90 'version 1.10
        ws.Cells(2, 4) = mtypFields(1, i).FLNM
        If strMsg <> "" Then strMsg = strMsg & vbCrLf
        strMsg = strMsg & "Mandatory field " & mtypFields(1, i).FLNM & " was missing and has been inserted"
    End If
Next i
If mlngValidationErrors > 0 Then
    MsgBox strMsg, vbCritical
    Exit Sub
End If

'Validate field lengths and types
lngRecordCount = 0 'version 1.8
For row = 3 To ws.UsedRange.rows.Count
    If IsRowBlank(row) = False And Not (Left(ws.Cells(row, 2), 2) = "OK" And ws.Range(GetRange(row, 2)).Interior.Color = vbGreen) Then
        lngRecordCount = lngRecordCount + 1 'version 1.8
        lngLastRow = row 'version 1.8
        strResult = ""
        strMsg = ""
        For intField = 1 To mintFields(1)
            If mtypFields(1, intField).Column > 0 Then
                If Len(Trim(ws.Cells(row, mtypFields(1, intField).Column))) > mtypFields(1, intField).LENG Then
                    strResult = "Validation ERROR"
                    strMsg = "Field " & mtypFields(1, intField).FLNM & " Max len " & mtypFields(1, intField).LENG & " exceeded"
                    Exit For
                ElseIf mtypFields(1, intField).Type = "N" And IsNumeric(Trim(ws.Cells(row, mtypFields(1, intField).Column))) = False _
                    And Len(Trim(ws.Cells(row, mtypFields(1, intField).Column))) > 0 Then
                    strResult = "Validation ERROR"
                    strMsg = "Field " & mtypFields(1, intField).FLNM & " Not numeric"
                    Exit For
                End If
            End If
        Next intField
        If strMsg <> "" Then
            ws.Cells(row, 2) = strResult
            ws.Cells(row, 3) = strMsg
            ws.Range(GetRange(row, 2)).Interior.Color = vbRed
            mlngValidationErrors = mlngValidationErrors + 1
        Else
            ws.Cells(row, 2) = "Fields validated"
            ws.Range(GetRange(row, 2)).Interior.Pattern = xlNone
        End If
        ws.Cells(row, 1) = Now()
        ws.Range(GetRange(row, 1)).Show
        If mtypCon.MaxRecords > 0 And lngRecordCount >= mtypCon.MaxRecords Then Exit For 'version 1.8
    End If
Next row
'adjust width of message column
ws.columns("A:C").EntireColumn.AutoFit

'Error message, if applicable
If mblnAuto = True Then
    'do not ask questions, just proceed
ElseIf mlngValidationErrors > 0 Then
    strMsg = mlngValidationErrors & " row(s) with validation error(s)." & vbCrLf & "See column C (Message) for error messages." & _
    "Rows with validation errors won't be updated to M3" & vbCrLf & "Only validated rows will be updated to M3." & _
    "Do you want to continue and update validated rows to M3?"
    If MsgBox(strMsg, vbYesNoCancel) <> vbYes Then Exit Sub
Else
    If MsgBox("Validation successfull. Do you now want to update to M3?", vbYesNoCancel) <> vbYes Then Exit Sub
End If
    
'Initialise WS object
Set mobjWS = New Webservice
For intField = 1 To mintFields(1)
    mobjWS.AddInputField mtypFields(1, intField).FLNM
Next intField
mobjWS.DebugFile = GetParam("Web Service Debug File")

'Initialize web service object
If mobjWS.Initialize(mtypCon.Server, mtypCon.Port, mtypCon.Context, mtypCon.UserID, mtypCon.Password, mtypCon.Namespace, mtypWebServices(mintWebService).Prefix, mtypWebServices(mintWebService).Program) = 0 Then
    MsgBox strMsg, vbCritical
    Exit Sub
End If

'process rows
For row = 3 To lngLastRow 'version 1.8
    If IsRowBlank(row) = False And Not (Left(ws.Cells(row, 2), 2) = "OK" And ws.Range(GetRange(row, 2)).Interior.Color = vbGreen) _
    And Not (ws.Cells(row, 2) = "Validation ERROR" And ws.Range(GetRange(row, 2)).Interior.Color = vbRed) Then
        blnError = False
        strResult = ""
        strMsg = ""
        strInput = ""
        mobjWS.ClearFields
        For intField = 1 To mintFields(1)
            If mtypFields(1, intField).Column > 0 Then strField = ws.Cells(row, mtypFields(1, intField).Column) Else strField = ""
            mobjWS.SetField mtypFields(1, intField).FLNM, strField
        Next intField
        rc = mobjWS.SendRequest
        If rc = -1 Then
            blnError = True
            strResult = "ERROR"
            strMsg = mobjWS.Message
        ElseIf rc = 1 Then
            blnError = False
            strResult = "OK"
            strMsg = ""
        Else
            blnError = True
            strResult = "FAULT"
            strMsg = mobjWS.Message
        End If
        ws.Cells(row, 1) = Now()
        ws.Range(GetRange(row, 1)).Show
        ws.Cells(row, 2) = Trim(strResult)
        ws.Cells(row, 3) = Trim(strMsg)
        If blnError = True Then
            ws.Range(GetRange(row, 2)).Interior.Color = vbRed
            lngErrors = lngErrors + 1
        Else
            ws.Range(GetRange(row, 2)).Interior.Color = vbGreen
            lngOK = lngOK + 1
        End If
        DoEvents
    End If
Next row

'Close connection to M3
mobjWS.Disconnect

'adjust width of message column
ws.columns("A:C").EntireColumn.AutoFit

'Message
If mblnAuto = False Or mlngValidationErrors + lngErrors > 0 Then
    MsgBox "Finished. " & lngOK & " rows processed OK. " & mlngValidationErrors + lngErrors & " row(s) with and error", vbExclamation
End If
mblnSuccessfull = (mlngValidationErrors + lngErrors = 0) 'v1.20
    
End Sub

Private Function GetWSField(strField As String) As Integer
Dim i As Integer
For i = 1 To mintFields(1)
    If UCase(Trim(mtypFields(1, i).FLNM)) = UCase(Trim(strField)) Then
        GetWSField = i
        Exit Function
    End If
Next i
GetWSField = 0
End Function


Attribute VB_Name = "SQL"
Option Explicit

Public mwsResults As Worksheet
Private mobjCon As ADODB.Connection
Private mobjRec As ADODB.Recordset
Private Type TypeSqlConnection
    Driver As String
    Server As String
    Database As String
    Schema As String
    User As String
    Password As String
    ConnectionString As String
    Connection As ADODB.Connection
    Open As Boolean
End Type
Private mtypCon As TypeSqlConnection
Public Type TypeParam
    Name As String  'parameter name
    Description As String  'parameter Description
    Type As String  'Type A=Alphanumeric N=Numeric
    Length As Integer 'Length
    Decimals As Integer 'number of decimal places
    VALUE As String 'value entered by user
End Type
Public Type TypeSql
    Statement As String
    Description As String
    typParams(1 To 99) As TypeParam 'array of parameters
    intParams As Integer
    StatementExpanded As String
    Execute As Boolean
    Origin As String
    Trim As Boolean
End Type
Public mtypSQLs(1 To 99) As TypeSql
Public mintSQLs As Integer
Public mintSQLsIndex As Integer
    
Public mblnParametersCancelled As Boolean 'was Cancel button clicked

Private Function OpenConnection(ByRef wsParams As Worksheet) As Boolean
Dim objCon As ADODB.Connection
mtypCon.Driver = Vlookup(wsParams, "SQL Driver", "Name", "Value", 1)
mtypCon.Server = SplitFirstField(Vlookup(wsParams, "SQL Server", "Name", "Value", 1)) 'version 2.3
mtypCon.Database = Vlookup(wsParams, "SQL Database", "Name", "Value", 1)
mtypCon.Schema = Vlookup(wsParams, "SQL Schema", "Name", "Value", 1)
mtypCon.User = Vlookup(wsParams, "SQL User ID", "Name", "Value", 1)
mtypCon.Password = "" 'version 3.0 version 3.3 changed: GetPassword("SQL Password") to: ""
If mtypCon.Driver = "SQL Server" Then
    mtypCon.ConnectionString = _
        "DRIVER={" & mtypCon.Driver & "};" & _
        "SERVER=" & mtypCon.Server & ";" & _
        "DATABASE=" & mtypCon.Database & ";" & _
        "UID=" & mtypCon.User & ";" & _
        "PWD=" & mtypCon.Password & ";"
ElseIf mtypCon.Driver = "iSeries Access ODBC Driver" Then
    mtypCon.ConnectionString = _
        "DRIVER={" & mtypCon.Driver & "};" & _
        "SYSTEM=" & mtypCon.Server & ";" & _
        "DefaultLibraries=" & mtypCon.Schema & ";" & _
        "UID=" & mtypCon.User & ";" & _
        "PWD=" & mtypCon.Password & ";"
ElseIf mtypCon.Driver = "PostgreSQL Unicode" Then 'version 2.5
    mtypCon.ConnectionString = _
        "DRIVER={" & mtypCon.Driver & "};" & _
        "SERVER=" & mtypCon.Server & ";" & _
        "PORT=5444" & ";" & _
        "DATABASE=" & mtypCon.Database & ";" & _
        "UID=" & mtypCon.User & ";" & _
        "PWD=" & mtypCon.Password & ";"
Else
    mtypCon.ConnectionString = ""
End If

Set mtypCon.Connection = New ADODB.Connection
mtypCon.Connection.ConnectionString = mtypCon.ConnectionString
mtypCon.Connection.CursorLocation = adUseServer
On Error Resume Next
mtypCon.Connection.Open
If Err.Number = 0 Then
    mtypCon.Open = True
Else
    MsgBox "Error opening SQL connection. " & Err.Description, vbCritical
    On Error GoTo 0
    mtypCon.Open = False
    OpenConnection = False
    Exit Function
End If
On Error GoTo 0
OpenConnection = True
End Function

Private Sub CloseConnection()
    mtypCon.Connection.Close
    mtypCon.Open = False
End Sub

Private Sub GetSQLs(ByRef ws As Worksheet)
Dim intIndex As Integer
Dim row As Long
mintSQLs = 0
Dim strValue As String
For intIndex = 1 To 99
    row = Match(ws, "SQL" & intIndex, "Name", 1)
    If row > 0 Then
        mintSQLs = mintSQLs + 1
        mtypSQLs(mintSQLs).Statement = GetCellValue(ws, "Value", row, 1)
        mtypSQLs(mintSQLs).Description = Left(GetCellValue(ws, "Description", row, 1), 31)
        mtypSQLs(mintSQLs).intParams = 0
        mtypSQLs(mintSQLs).StatementExpanded = ""
        mtypSQLs(mintSQLs).Execute = False
        If GetCellValue(ws, "Origin", row, 1) <> "" Then
            mtypSQLs(mintSQLs).Origin = GetCellValue(ws, "Origin", row, 1)
            'check range valid
            On Error Resume Next
            strValue = ws.Range(mtypSQLs(mintSQLs).Origin).VALUE
            If Err.Number <> 0 Then
                mtypSQLs(mintSQLs).Origin = "A1"
            End If
            On Error GoTo 0
        Else
            mtypSQLs(mintSQLs).Origin = "A1"
        End If
        mtypSQLs(mintSQLs).Trim = (UCase(Trim(GetCellValue(ws, "Trim", row, 1))) = "YES")
        GetParamsFromSql mtypSQLs(mintSQLs)
        GetParamsProperties ws, mtypSQLs(mintSQLs)
    End If
Next intIndex
End Sub

Private Sub GetParamsFromSql(ByRef typSQL As TypeSql)
Dim strSql As String
Dim i As Integer
Dim blnInParam As Boolean
Dim intLastParamEnd As Integer
Dim intParamStart As Integer

    strSql = typSQL.Statement
    For i = 2 To Len(strSql)
        If blnInParam = False Then
            If Mid(strSql, i - 1, 2) = "::" Then
                blnInParam = True
                intParamStart = i - 1
            End If
        Else
            If IsParamEnded(Mid(strSql, i, 1)) = True Then
                blnInParam = False
                AddParam MyMid(strSql, intParamStart + 2, i - 1), typSQL
                intLastParamEnd = i - 1
            End If
        End If
    Next i
    If blnInParam = True Then
        AddParam Mid(strSql, intParamStart + 2), typSQL
    End If
End Sub

Private Sub AddParam(strParam As String, ByRef typSQL As TypeSql)
Dim p As Integer
For p = 1 To typSQL.intParams
    If Trim(UCase(typSQL.typParams(p).Name)) = Trim(UCase(strParam)) Then Exit Sub
Next p
typSQL.intParams = typSQL.intParams + 1
typSQL.typParams(typSQL.intParams).Name = strParam
End Sub

Private Sub GetParamsProperties(ByRef ws As Worksheet, ByRef typSQL As TypeSql)
Dim row As Long
Dim strValue As String
Dim intIndex As Integer
For intIndex = 1 To typSQL.intParams
    With typSQL.typParams(intIndex)
        row = Match(ws, .Name, "Name", 1)
        If row > 0 Then
            .VALUE = GetCellValue(ws, "Value", row, 1)
            .Description = GetCellValue(ws, "Description", row, 1)
            strValue = GetCellValue(ws, "Type", row, 1)
            If strValue = "Numeric" Or strValue = "Date" Or strValue = "M3Date" Or strValue = "Char" Then
                .Type = strValue
            Else
                .Type = "Char"
            End If
            On Error Resume Next
            .Length = GetCellValue(ws, "Length", row, 1)
            If Err.Number <> 0 Then
                .Length = 0
            End If
            On Error GoTo 0
            On Error Resume Next
            .Decimals = GetCellValue(ws, "Decimals", row, 1)
            If Err.Number <> 0 Then
                .Decimals = 0
            End If
            On Error GoTo 0
        End If
    End With
Next intIndex
End Sub

Public Sub RunActiveSheetSQL()
Dim wsSQLs As Worksheet, wsActive As Worksheet
Dim row As Long
Dim intSQLsIndex As Integer
Set wsSQLs = Worksheets("SQLs")
Set wsActive = ActiveSheet
GetSQLs wsSQLs
For intSQLsIndex = 1 To mintSQLs
    If mtypSQLs(intSQLsIndex).Statement <> "" Then
        If Trim(UCase(mtypSQLs(intSQLsIndex).Description)) = Trim(UCase(wsActive.Name)) Then
            RunOneSQL intSQLsIndex
            Exit For
        End If
    End If
Next intSQLsIndex
End Sub

Public Sub RunOneSQL(intSqlIndex As Integer)
Dim i As Long
Dim startTime As Date
Dim strSql As String
Dim lngRowCount As Long
Dim wsParams As Worksheet, wsSQLs As Worksheet
Dim strMsg As String
Dim intIndex As Integer
    Set wsParams = Worksheets("Params")
    Set wsSQLs = Worksheets("SQLs")
    If mtypCon.Open = False Then
        If OpenConnection(wsParams) = False Then
            Exit Sub
        End If
    End If
    GetSQLs wsSQLs
    mintSQLsIndex = intSqlIndex
    If mtypSQLs(mintSQLsIndex).Statement <> "" Then 'version 6.2
        If mtypSQLs(mintSQLsIndex).intParams > 0 Then
            frmParameters.Show
            If mblnParametersCancelled = True Then
                CloseConnection
                Exit Sub
            End If
        End If
        GetSqlExpandedStatement mtypSQLs(mintSQLsIndex)
        RunSQL mtypSQLs(mintSQLsIndex)
        UpdateParams wsSQLs, mintSQLsIndex
    End If
    CloseConnection
End Sub

Public Sub RunSQLs()
Dim i As Long
Dim startTime As Date
Dim strSql As String
Dim lngRowCount As Long
Dim wsParams As Worksheet, wsSQLs As Worksheet
Dim strMsg As String
Dim intIndex As Integer
    Set wsParams = Worksheets("Params")
    Set wsSQLs = Worksheets("SQLs")
    If mtypCon.Open = False Then
        If OpenConnection(wsParams) = False Then
            Exit Sub
        End If
    End If
    GetSQLs wsSQLs
    For mintSQLsIndex = 1 To mintSQLs
        If mtypSQLs(mintSQLsIndex).Statement <> "" Then 'version 6.2
            If mtypSQLs(mintSQLsIndex).intParams > 0 Then
                frmParameters.Show
                If mblnParametersCancelled = True Then Exit For
            End If
            GetSqlExpandedStatement mtypSQLs(mintSQLsIndex)
            RunSQL mtypSQLs(mintSQLsIndex)
            UpdateParams wsSQLs, mintSQLsIndex
        End If
    Next mintSQLsIndex
    CloseConnection
End Sub


Private Sub RunSQL(ByRef typSQL As TypeSql)
Dim i As Long
Dim startTime As Date
Dim strSql As String
Dim lngRowCount As Long
Dim strMsg As String
Dim row As Long, col As Long
    startTime = Now
    On Error Resume Next
    Set mwsResults = Worksheets(typSQL.Description)
    If Err.Number <> 0 Then
        On Error GoTo 0
        Set mwsResults = Worksheets.Add(, Worksheets(Worksheets.Count))
        mwsResults.Name = typSQL.Description
    End If
    On Error GoTo 0
    Set mobjRec = New ADODB.Recordset
    mobjRec.CursorLocation = adUseClient 'must use client side cursor in order for RecordCount property to be populated otherwise will be -1
    mobjRec.CursorType = adOpenStatic
    strSql = typSQL.StatementExpanded
    On Error Resume Next
    mobjRec.Open strSql, mtypCon.Connection, adOpenDynamic, adLockReadOnly, adCmdText
    If Err.Number <> 0 Then
        strMsg = Err.Description
        MsgBox "Error executing SQL. " & strMsg, vbCritical
        Exit Sub
    End If
    On Error GoTo 0
    'clear range
    row = Max(mwsResults.UsedRange.rows.Count, mwsResults.Range(typSQL.Origin).row)
    col = Max(mwsResults.UsedRange.columns.Count, mwsResults.Range(typSQL.Origin).Column)
    mwsResults.Range(typSQL.Origin & ":" & GetColLetter(col) & row).ClearContents
    'write column headings
    For i = 0 To mobjRec.Fields.Count - 1
        mwsResults.Range(typSQL.Origin).Offset(0, i) = mobjRec.Fields(i).Name
    Next i
    'write data
    On Error Resume Next
    mwsResults.Range(typSQL.Origin).Offset(1, 0).CopyFromRecordset mobjRec
    If Err.Number <> 0 Then
        MsgBox "Error running SQL. " & Err.Description, vbCritical
    End If
    If typSQL.Trim = True Then
        TrimResults mwsResults, typSQL.Origin, mobjRec.RecordCount, mobjRec.Fields.Count
    End If
    mobjRec.Close
    mwsResults.Activate
End Sub

Sub TrimResults(ByRef ws As Worksheet, strOrigin As String, rows As Long, columns As Long)
Application.ScreenUpdating = False
Dim arr As Variant
Dim i As Long, j As Long
Dim strRange As String
Dim startRow As Long, startCol As Long, endRow As Long, endCol As Long
    startRow = ws.Range(strOrigin).row + 1 'don't include field headers row
    startCol = ws.Range(strOrigin).Column
    endRow = startRow + rows - 1
    endCol = startCol + columns - 1
    strRange = GetColLetter(startCol) & startRow & ":" & GetColLetter(endCol) & endRow
    arr = ws.Range(strRange)
    For i = LBound(arr, 1) To UBound(arr, 1)
        For j = LBound(arr, 2) To UBound(arr, 2)
            arr(i, j) = Trim(arr(i, j))
        Next j
    Next i
    ws.Range(strRange).ClearContents
    ws.Range(strRange) = arr
Application.ScreenUpdating = True
End Sub

'Sub TrimResults(ByRef ws As Worksheet, strOrigin As String, rows As Long, columns As Long)
'Application.ScreenUpdating = False
'Dim arr As Variant
'Dim row As Long, col As Long
'Dim startRow As Long, startCol As Long, endRow As Long, endCol As Long
'    startRow = ws.Range(strOrigin).row + 1 'don't include field headers row
'    startCol = ws.Range(strOrigin).column
'    endRow = startRow + rows - 1
'    endCol = startCol + columns - 1
'    For row = startRow To endRow
'        For col = startCol To endCol
'            ws.Cells(row, col) = Trim(ws.Cells(row, col))
'        Next col
'    Next row
'Application.ScreenUpdating = True
'End Sub

Private Sub GetSqlExpandedStatement(ByRef typSQL As TypeSql)
Dim strSql As String, strSqlExpanded As String
Dim i As Integer
Dim blnInParam As Boolean
Dim intLastParamEnd As Integer
Dim intParamStart As Integer

    strSql = typSQL.Statement
    For i = 2 To Len(strSql)
        If blnInParam = False Then
            If Mid(strSql, i - 1, 2) = "::" Then
                blnInParam = True
                intParamStart = i - 1
            End If
        Else
            If IsParamEnded(Mid(strSql, i, 1)) = True Then
                blnInParam = False
                strSqlExpanded = strSqlExpanded & MyMid(strSql, intLastParamEnd + 1, intParamStart - 1) & GetParamValue(typSQL, MyMid(strSql, intParamStart + 2, i - 1))
                intLastParamEnd = i - 1
            End If
        End If
    Next i
    If blnInParam = True Then
        strSqlExpanded = strSqlExpanded & MyMid(strSql, intLastParamEnd + 1, intParamStart - 1) & GetParamValue(typSQL, Mid(strSql, intParamStart + 2))
    Else
        strSqlExpanded = strSqlExpanded & Mid(strSql, intLastParamEnd + 1)
    End If
    typSQL.StatementExpanded = strSqlExpanded
End Sub

Private Sub UpdateParams(ByRef ws As Worksheet, intSqlIndex As Integer)
Dim row As Long
Dim intIndex As Integer
row = Match(ws, "SQL" & intSqlIndex, "Name", 1)
If row > 0 Then UpdateCellValue ws, "Last SQL", row, mtypSQLs(intSqlIndex).StatementExpanded, 1
For intIndex = 1 To mtypSQLs(intSqlIndex).intParams
    row = Match(ws, mtypSQLs(intSqlIndex).typParams(intIndex).Name, "Name", 1)
    If row > 0 Then UpdateCellValue ws, "Value", row, mtypSQLs(intSqlIndex).typParams(intIndex).VALUE, 1
Next intIndex
End Sub

Function GetParamValue(ByRef typSQL As TypeSql, strParam As String) As String
Dim intIndex As Integer
For intIndex = 1 To typSQL.intParams
    With typSQL.typParams(intIndex)
        If .Name = strParam Then
            Select Case .Type
                Case "Char"
                    GetParamValue = "'" & .VALUE & "'"
                Case "M3Date"
                    GetParamValue = Format(.VALUE, "yyyymmdd")
                Case "Date"
                    GetParamValue = "'" & Format(.VALUE, "yyyy-mm-dd") & "'"
                Case "Numeric"
                    GetParamValue = .VALUE
            End Select
            Exit Function
        End If
    End With
Next intIndex
GetParamValue = ""
End Function

Private Function IsParamEnded(ByVal strChar As String) As Boolean
    Select Case strChar
        Case "A" To "Z", "a" To "z", "0" To "9", "_"
            IsParamEnded = False
        Case Else
            IsParamEnded = True
    End Select
End Function

Private Function MyMid(ByRef strX As String, intStart As Integer, intEnd As Integer) As String
    MyMid = Mid(strX, intStart, intEnd - intStart + 1)
End Function





Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_NewSheet(ByVal Sh As Object) 'version 1.10
    Sh.Cells.NumberFormat = "@"
End Sub

Attribute VB_Name = "Webservice"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private mobjHttp As MSXML2.XMLHTTP60

Private mstrMessage As String
Private mblnInitialized As Boolean
Private Type TypeField
    FLNM As String  'Field name
    VALUE As String 'Value
End Type
Private mtypInputFields(1 To 999) As TypeField 'cannot use dynamic array due to Excel error
Private mintInputFields As Integer
Private mtypOutputFields(1 To 999) As TypeField 'cannot use dynamic array due to Excel error
Private mintOutputFields As Integer
Private mstrURL As String
Private mstrUsername As String
Private mstrPassword As String
Private mstrNamespace As String
Private mstrPrefix As String
Private mstrWebservice As String
Private mstrMethod As String
Private mstrProgram As String
Private mstrDebugFile As String

Property Let DebugFile(strDebugFile As String)
    mstrDebugFile = strDebugFile
End Property

Property Get Message() As String
    Message = mstrMessage
End Property

Public Function Initialize(strServer As String, strPort As String, strContext As String, strUsername As String, strPassword As String, _
                        strNameSpace As String, strPrefix As String, strProgram As String) As Integer
'return code 0: failed, 1: successfull
Dim rc As Integer
Dim strReturn As String
Dim strMsg As String
Dim typField As TypeField
Dim strNamespaceParts() As String
Dim intNamespaceParts As Integer
Dim strWebservice As String, strMethod As String
Dim n As Integer

    strNamespaceParts = Split(strNameSpace, "/")
    intNamespaceParts = UBound(strNamespaceParts)
    If intNamespaceParts < 2 Then
        mstrMessage = "ERROR initializing web service. Invalid namespace: " & strNameSpace
        Initialize = 0
        Exit Function
    Else
        strWebservice = strNamespaceParts(intNamespaceParts - 1)
        strMethod = strNamespaceParts(intNamespaceParts)
    End If
   
    If mblnInitialized = True Then
        Initialize = 0
        Exit Function
    End If
    
    Set mobjHttp = New MSXML2.XMLHTTP60
    
    mstrURL = "http://" & SplitFirstField(strServer) & ":" & SplitFirstField(strPort) & "/mws-ws/" & SplitFirstField(strContext) & "/" & strWebservice & "?wsdl"
    
    'Write debug info to file
    If Trim(mstrDebugFile) <> "" Then
        On Error Resume Next
        n = FreeFile()
        Open mstrDebugFile For Append As #n
        Print #n, Now() & "===========================URL ======================================================"
        Print #n, mstrURL ' write to file
        Close #n
        On Error GoTo 0
    End If

    mblnInitialized = True
    mstrWebservice = strWebservice
    mstrProgram = strProgram
    mstrMethod = strMethod
    'mstrPrefix = strPrefix
    mstrPrefix = LCase(Left(mstrMethod, 3))
    mstrNamespace = strNameSpace
    mstrUsername = strUsername
    mstrPassword = strPassword
    Initialize = 1

End Function

Private Function SplitFirstField(strInput As String) As String
Dim strFields() As String
On Error Resume Next
strFields = Split(Trim(strInput), " ")
SplitFirstField = strFields(0)
End Function

Public Function Disconnect() As Integer
'return code 0: failed, 1: successfull
    Set mobjHttp = Nothing
    mblnInitialized = False
    Disconnect = 1
End Function

Public Function AddInputField(ByVal strFieldName As String) As Integer
'return code 0: failed, 1: successfull
Dim intIndex As Integer
Dim typField As TypeField
intIndex = GetInputFieldIndex(strFieldName)
If intIndex > 0 Then
    AddInputField = 0
Else
    typField.FLNM = strFieldName
    typField.VALUE = ""
    mintInputFields = mintInputFields + 1
    mtypInputFields(mintInputFields) = typField
    AddInputField = 1
End If
End Function

Public Function AddOutputField(ByVal strFieldName As String) As Integer
'return code 0: failed, 1: successfull
Dim intIndex As Integer
Dim typField As TypeField
intIndex = GetInputFieldIndex(strFieldName)
If intIndex > 0 Then
    AddOutputField = 0
Else
    typField.FLNM = strFieldName
    typField.VALUE = ""
    mintOutputFields = mintOutputFields + 1
    mtypOutputFields(mintOutputFields) = typField
    AddOutputField = 1
End If
End Function

Public Function SetField(ByVal strFieldName As String, ByVal strFieldValue As String) As Integer
'return code 0: failed, 1: successfull
Dim intIndex As Integer
intIndex = GetInputFieldIndex(strFieldName)
If intIndex > 0 Then
    mtypInputFields(intIndex).VALUE = strFieldValue
    SetField = 1
Else
    SetField = 0
End If
End Function

Public Function SendRequest() As Integer
'return code -1: failed, 0: fault, 1: successfull
Dim rc As Integer
Dim strReturn As String
Dim strInputString As String
Dim strSoapEnv As String
Dim intIndex As Integer
Dim strResponse As String
Dim intFaultStart As Integer, intFaultEnd As Integer
Dim n As Integer

'Open
On Error Resume Next
mobjHttp.Open "Post", mstrURL, False, mstrUsername, mstrPassword
If Err.Number <> 0 Then
    mstrMessage = "ERROR opening web service: " & Err.Description
    On Error GoTo 0
    SendRequest = -1 'error
    Exit Function
End If
On Error GoTo 0
mobjHttp.setRequestHeader "Content-Type", "text/xml"

'build xml
strSoapEnv = _
"<?xml version=""1.0"" encoding=""UTF-8""?>" & _
"<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">" & _
"<soap:Header>" & _
"</soap:Header>" & _
"<soap:Body>" & _
"<" & mstrPrefix & ":" & mstrMethod & " xmlns:" & mstrPrefix & "=""" & mstrNamespace & """>" & _
"<" & mstrPrefix & ":" & mstrProgram & ">"
For intIndex = 1 To mintInputFields
    strSoapEnv = strSoapEnv & _
    "<" & mstrPrefix & ":" & mtypInputFields(intIndex).FLNM & ">" & mtypInputFields(intIndex).VALUE & "</" & mstrPrefix & ":" & mtypInputFields(intIndex).FLNM & ">"
Next intIndex
strSoapEnv = strSoapEnv & _
"</" & mstrPrefix & ":" & mstrProgram & ">" & _
"</" & mstrPrefix & ":" & mstrMethod & ">" & _
"</soap:Body>" & _
"</soap:Envelope>"

'Write debug info to file
If Trim(mstrDebugFile) <> "" Then
    On Error Resume Next
    n = FreeFile()
    Open mstrDebugFile For Append As #n
    Print #n, Now() & "===========================SEND SOAP ENVELOPE ======================================================"
    Print #n, strSoapEnv ' write to file
    Close #n
    On Error GoTo 0
End If

'send
On Error Resume Next
mobjHttp.send strSoapEnv
If Err.Number <> 0 Then
    mstrMessage = "Error sending request. " & Trim(Err.Description)
    SendRequest = -1 'error
    On Error GoTo 0
    Exit Function
End If
On Error GoTo 0

'get response
strResponse = mobjHttp.responseText

'Write debug info to file
If Trim(mstrDebugFile) <> "" Then
    On Error Resume Next
    n = FreeFile()
    Open mstrDebugFile For Append As #n
    Print #n, Now() & "===========================RESPONSE ======================================================"
    Print #n, strResponse ' write to file
    Close #n
    On Error GoTo 0
End If

'check for error
intFaultStart = InStr(1, strResponse, "<faultstring>")
If intFaultStart < 1 Then
    SendRequest = 1 'successful
Else
    intFaultStart = intFaultStart + 13
    intFaultEnd = InStr(intFaultStart, strResponse, "</faultstring>")
    If intFaultEnd > intFaultStart Then mstrMessage = Mid(strResponse, intFaultStart, intFaultEnd - intFaultStart)
    SendRequest = 0 'fault
End If

End Function

Public Function GetField(ByVal strFieldName As String) As String
Dim intIndex As Integer
intIndex = GetOutputFieldIndex(strFieldName)
If intIndex > 0 Then
    GetField = mtypOutputFields(intIndex).VALUE
Else
    GetField = ""
End If
End Function

Public Function ClearFields() As Integer
'return code 0: failed, 1: successfull
Dim intIndex As Integer
For intIndex = 1 To mintInputFields
    mtypInputFields(intIndex).VALUE = ""
Next intIndex
For intIndex = 1 To mintOutputFields
    mtypOutputFields(intIndex).VALUE = ""
Next intIndex
ClearFields = 1
End Function

Private Function GetInputFieldIndex(strFieldName As String) As Integer
Dim intIndex As Integer
For intIndex = 1 To mintInputFields
    If mtypInputFields(intIndex).FLNM = strFieldName Then
        GetInputFieldIndex = intIndex
        Exit Function
    End If
Next intIndex
GetInputFieldIndex = 0
End Function

Private Function GetOutputFieldIndex(strFieldName As String) As Integer
Dim intIndex As Integer
For intIndex = 1 To mintOutputFields
    If mtypOutputFields(intIndex).FLNM = strFieldName Then
        GetOutputFieldIndex = intIndex
        Exit Function
    End If
Next intIndex
GetOutputFieldIndex = 0
End Function





Attribute VB_Name = "frmAPIConnection"
Attribute VB_Base = "0{EA4CE524-F9C5-44B8-8980-303A507410AE}{42C1A2D3-E843-4D1A-937F-ED781F527B92}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private mblnConnected As Boolean 'is mobjSock connected to M3?
Private mblnPopulatedPrograms As Boolean 'has cboProgram been populated?
Private mblnPopulatedTransactions As Boolean 'has cboTransaction been populated?
Private mstrTransactionProgram As String 'program that transactions in comTransaction drop down list are based on

Private Sub UserForm_Activate()
    mblnCancelled = True 'will be set to false if OK clicked, otherwise will stay as true
    mblnConnected = False
    mblnPopulatedPrograms = False
    mblnPopulatedTransactions = False
    mstrTransactionProgram = ""
    cboProgram.Clear
    cboTransaction.Clear
    
    txtTI.Text = mtypCon.IonApiTI 'version 4.0
    cboProgram.Text = mtypCon.Program
    cboTransaction.Text = mtypCon.Transaction
    txtCompany = mtypCon.Company 'version 2.1
    txtDivision = mtypCon.Division 'version 2.1
    
    If cboProgram = "" Then
        cboProgram.SetFocus
    ElseIf cboTransaction = "" Then
        cboTransaction.SetFocus
    ElseIf txtCompany = "" Then 'version 2.1
        txtCompany.SetFocus
    ElseIf txtDivision = "" Then 'version 2.1
        txtDivision.SetFocus
    End If
End Sub

Private Sub cboProgram_DropButtonClick()
    If mblnPopulatedPrograms = False Then
        If mblnConnected = False Then
            If Connect() = False Then Exit Sub
        End If
        PopulatePrograms
    End If
End Sub

Private Sub cboProgram_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If SpaceFill(cboProgram.Text, 10) <> mstrTransactionProgram Then 'if program changes, clear cboTransactions drop down list
        cboTransaction.Clear
        mblnPopulatedTransactions = False
    End If
End Sub

Private Sub cboTransaction_DropButtonClick()
    If mblnPopulatedTransactions = False Then
        If mblnConnected = False Then
            If Connect() = False Then Exit Sub
        End If
        PopulateTransactions
    End If
End Sub

Private Function Connect() As Boolean
Dim strMsg As String
Dim rc As Integer
Dim strReturn As String

    'check if already connected
    If mblnConnected = True Then
        MsgBox "Already connected to M3", vbCritical
        Connect = True
        Exit Function
    End If
    
    'Connect to M3
    If ConnectMvxSock("MRS001MI", txtCompany, txtDivision, strMsg) = False Then  'version 2.1 added txtCompany and txtDivision
        MsgBox strMsg, vbCritical
        Connect = False
        Exit Function
    End If

    Connect = True
    mblnConnected = True

End Function

Private Sub PopulatePrograms() 'version 4.0
Dim objXml As New MSXML2.DOMDocument60
Dim objMIRecordNodes As MSXML2.IXMLDOMNodeList
Dim objMIRecordNode As MSXML2.IXMLDOMNode
Dim objMINMNode As MSXML2.IXMLDOMNode
Dim objMIDSNode As MSXML2.IXMLDOMNode
Dim strResult As String, strMsg As String

If mblnConnected = False Or mblnPopulatedPrograms = True Then Exit Sub

'read programs
If IonApiCall("MRS001MI", "LstPrograms", ";maxrecs=0", strResult, strMsg, objXml) = True Then
    Set objMIRecordNodes = objXml.DocumentElement.SelectNodes("ns:MIRecord")
    For Each objMIRecordNode In objMIRecordNodes
        Set objMINMNode = objMIRecordNode.SelectSingleNode("ns:NameValue[ns:Name='MINM']/ns:Value")
        Set objMIDSNode = objMIRecordNode.SelectSingleNode("ns:NameValue[ns:Name='MIDS']/ns:Value")
        cboProgram.AddItem objMINMNode.Text & " " & objMIDSNode.Text
    Next objMIRecordNode
End If
mblnPopulatedPrograms = True

End Sub

Private Sub PopulateTransactions() 'version 4.0
Dim objXml As New MSXML2.DOMDocument60
Dim objMIRecordNodes As MSXML2.IXMLDOMNodeList
Dim objMIRecordNode As MSXML2.IXMLDOMNode
Dim objMINMNode As MSXML2.IXMLDOMNode
Dim objTRNMNode As MSXML2.IXMLDOMNode
Dim objTRDSNode As MSXML2.IXMLDOMNode
Dim strProgram As String
Dim strResult As String, strMsg As String

If mblnPopulatedTransactions = True Or mblnConnected = False Then Exit Sub

'read transactions
strProgram = SplitFirst(cboProgram.Text)
If IonApiCall("MRS001MI", "LstTransactions", ";maxrecs=0?MINM=" & strProgram, strResult, strMsg, objXml) = True Then
    Set objMIRecordNodes = objXml.DocumentElement.SelectNodes("ns:MIRecord")
    For Each objMIRecordNode In objMIRecordNodes
        Set objMINMNode = objMIRecordNode.SelectSingleNode("ns:NameValue[ns:Name='MINM']/ns:Value")
        Set objTRNMNode = objMIRecordNode.SelectSingleNode("ns:NameValue[ns:Name='TRNM']/ns:Value")
        Set objTRDSNode = objMIRecordNode.SelectSingleNode("ns:NameValue[ns:Name='TRDS']/ns:Value")
        If Trim(objMINMNode.Text) = strProgram Then cboTransaction.AddItem objTRNMNode.Text & " " & objTRDSNode.Text
    Next objMIRecordNode
End If

mblnPopulatedTransactions = True
mstrTransactionProgram = strProgram
    
End Sub

Private Sub cmdCancel_Click()
    Unload Me ' this will trigger UserForm_Terminate to run
End Sub

Private Sub UserForm_Terminate()
'if already connected, close first
If mblnCancelled = True And mblnConnected = True Then
    mblnConnected = False
End If
End Sub

Private Sub cmdOK_Click()
Dim strReturn As String
Dim strMsg As String
Dim rc As Integer
Dim lngMaxRecords As Long 'version 1.8
Dim intCompany As Integer, blnInvalid As Boolean 'version 2.1

    'if not connected then connect
    If mblnConnected = False Then
        If Connect() = False Then Exit Sub
    End If
    
    'check program has been entered
    If Trim(cboProgram.Text) = "" Then
        MsgBox "Please enter program", vbCritical
        cboProgram.SetFocus
        Exit Sub
    End If
    
    'check transaction has been entered
    If Trim(cboTransaction.Text) = "" Then
        MsgBox "Please enter transaction", vbCritical
        cboTransaction.SetFocus
        Exit Sub
    End If
    
    'check program and transaction exist
    If DoesTransactionExist(SplitFirst(cboProgram.Text), SplitFirst(cboTransaction.Text)) = False Then
        MsgBox "Program/Transaction " & SplitFirst(cboProgram.Text) & "/" & SplitFirst(cboTransaction.Text) & " does not exist", vbCritical
        Exit Sub
    End If
    
    'Check txtMaxRecords 'version 1.8
    If Trim(txtMaxRecords) = "" Then
        lngMaxRecords = 0
    Else
        On Error Resume Next
        lngMaxRecords = txtMaxRecords
        If Err.Number <> 0 Then
            On Error GoTo 0
            MsgBox "Max Records is invalid", vbCritical
            txtMaxRecords.SetFocus
            Exit Sub
        End If
        On Error GoTo 0
    End If
    
    'Check txtCompany 'version 2.1
    blnInvalid = False
    If Trim(txtCompany) = "" Then
        intCompany = 0
    Else
        On Error Resume Next
        intCompany = txtCompany
        If Err.Number <> 0 Then
            On Error GoTo 0
            blnInvalid = True
        Else
            On Error GoTo 0
            If intCompany < 1 Or intCompany > 999 Then blnInvalid = True
        End If
    End If
    If blnInvalid Then
        MsgBox "Company is invalid", vbCritical
        txtCompany.SetFocus
        Exit Sub
    End If
    
    mtypCon.Program = SplitFirst(cboProgram.Text) 'version 4.0
    mtypCon.Transaction = SplitFirst(cboTransaction.Text) 'version 4.0
    mtypCon.MaxRecords = lngMaxRecords 'version 1.8
    mtypCon.Company = Trim(txtCompany) 'version 2.1
    mtypCon.Division = Trim(txtDivision) 'version 2.1
    mblnCancelled = False
    Unload Me
    
End Sub

Private Function DoesTransactionExist(strProgram As String, strTransaction As String) As Boolean 'version 4.0
Dim objXml As New MSXML2.DOMDocument60
Dim objMINMNode As MSXML2.IXMLDOMNode
Dim objTRNMNode As MSXML2.IXMLDOMNode
Dim strResult As String, strMsg As String
DoesTransactionExist = False 'begin assuming false
If IonApiCall("MRS001MI", "GetTransaction", "?MINM=" & strProgram & "&TRNM=" & strTransaction, strResult, strMsg, objXml) = True Then
    Set objMINMNode = objXml.DocumentElement.SelectSingleNode("ns:MIRecord[1]/ns:NameValue[ns:Name='MINM']/ns:Value")
    Set objTRNMNode = objXml.DocumentElement.SelectSingleNode("ns:MIRecord[1]/ns:NameValue[ns:Name='TRNM']/ns:Value")
    If Not objMINMNode Is Nothing And Not objTRNMNode Is Nothing Then
        If Trim(objMINMNode.Text) = strProgram And objTRNMNode.Text = strTransaction Then
            DoesTransactionExist = True
        End If
    End If
End If
End Function
Attribute VB_Name = "frmParameters"
Attribute VB_Base = "0{859B76E6-3933-4B44-99AF-8D7843D9C01F}{417ADBBD-57BC-44CF-BA89-5EED0C95D9D3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()
Dim intPos As Integer
Dim strText As String
Dim intIndex As Integer
For intIndex = 1 To mtypSQLs(mintSQLsIndex).intParams
    With mtypSQLs(mintSQLsIndex).typParams(intIndex)
        strText = Trim(Me.Controls("txtParam" & intIndex).Text)
        Select Case .Type
            Case "Numeric"
                If IsNumeric(strText) = False Then
                    MsgBox .Description & " should be numeric", vbCritical
                    Me.Controls("txtParam" & intIndex).SetFocus
                    Exit Sub
                Else
                    intPos = InStr(1, strText, ".")
                    If intPos > 0 Then
                        If Len(strText) - intPos > .Decimals Then
                           MsgBox .Description & " only allowed " & .Decimals & " decimal places", vbCritical
                           Me.Controls("txtParam" & intIndex).SetFocus
                           Exit Sub
                        End If
                    End If
                End If
            Case "Date"
                If IsDate(strText) = False Then
                    MsgBox .Description & " should be a valid date", vbCritical
                    Me.Controls("txtParam" & intIndex).SetFocus
                    Exit Sub
                End If
            Case "M3Date"
                If IsDate(strText) = False Then
                    MsgBox .Description & " should be a valid date", vbCritical
                    Me.Controls("txtParam" & intIndex).SetFocus
                    Exit Sub
                End If
        End Select
        .VALUE = strText
    End With
Next intIndex
mblnParametersCancelled = False
Unload Me
End Sub

Private Sub UserForm_Activate()
Dim objControl As Object
Dim intIndex As Integer
Me.Caption = mtypSQLs(mintSQLsIndex).Description
'first remove any controls that may still be on form from last time. Shouldn't exist as Unload method removes it from memory
For Each objControl In Me.Controls
    If Left(objControl.Name, 8) = "lblParam" Or Left(objControl.Name, 8) = "txtParam" Then
        Me.Controls.Remove objControl.Name
    End If
Next objControl
Me.Height = mtypSQLs(mintSQLsIndex).intParams * 20 + 80
cmdOK.Top = mtypSQLs(mintSQLsIndex).intParams * 20 + 20
cmdCancel.Top = cmdOK.Top
For intIndex = 1 To mtypSQLs(mintSQLsIndex).intParams
    With mtypSQLs(mintSQLsIndex).typParams(intIndex)
        Set objControl = Me.Controls.Add("Forms.Label.1", "lblParam" & intIndex)
        objControl.Top = 10 + (intIndex - 1) * 20
        objControl.Left = 10
        objControl.Width = 100
        objControl.Height = 15
        objControl.Font.Size = 11
        objControl.TextAlign = fmTextAlignRight
        objControl.Caption = .Description
        Set objControl = Me.Controls.Add("Forms.TextBox.1", "txtParam" & intIndex)
        objControl.Top = 10 + (intIndex - 1) * 20
        objControl.Left = 130
        objControl.Height = 20
        objControl.TabIndex = intIndex
        objControl.Font.Size = 11
        If .Length > 0 Then
            objControl.MaxLength = .Length
            objControl.Width = .Length * 12
        Else
            objControl.Width = 100
        End If
        objControl.Text = .VALUE
        If intIndex = 1 Then objControl.SetFocus
    End With
Next intIndex
mblnParametersCancelled = True 'will be set to false if OK clicked, otherwise will stay as true
End Sub


Attribute VB_Name = "frmPassword"
Attribute VB_Base = "0{618C539A-C1EC-4A23-960E-04735810E127}{04F26A65-68E5-4D8E-BD43-00371558EEC5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdOK_Click()
    If txtPassword = "" Then
        MsgBox "Please enter password", vbCritical
        Exit Sub
    End If
    mtypCon.Password = Trim(txtPassword)
    mblnCancelled = False
    Unload Me
End Sub

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub UserForm_Activate()
    mblnCancelled = True ' will be set to false if exiting by clicking one of check boxes
    txtUserID = mtypCon.UserID
End Sub


Attribute VB_Name = "frmSQLConnection"
Attribute VB_Base = "0{8E983B67-F5CB-498C-BAC6-DDAD6D2DC5EE}{6922CE6E-A64F-4FA0-87A4-E9A664726676}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private mblnPopulatedTables As Boolean 'has cboTable been populated?
Private mblnConnected As Boolean 'is mobjSock connected to M3?

Private Sub UserForm_Activate()
    mblnCancelled = True 'will be set to false if OK clicked, otherwise will stay as true
    'txtConnectionString = mtypCon.ConnectionString 'version 2.0 commented out
    'txtDSN = mtypCon.DSN'version 2.0 commented out
    txtUserID = mtypCon.UserID
    txtPassword = mtypCon.Password
    cboTable.Text = mtypCon.Table
    cboType.Text = mtypCon.Type
    txtDriver = mtypCon.Driver 'version 2.0
    txtServer = mtypCon.Server 'version 2.0
    txtDatabase = mtypCon.Database 'version 2.0
    txtSchema = mtypCon.Schema 'version 2.0
    'version 2.0 commented out this block
    'If txtDriver <> "" And txtServer <> "" Then 'version 2.0 changed from txtConnectionString, added: txtdriver<>""
        'txtDSN.Visible = False
        'txtUserID.Visible = False 'version 2.0 commented out
        'txtPassword.Visible = False 'version 2.0 commented out
        'lblDSN.Visible = False
        'lblUserID.Visible = False 'version 2.0 commented out
        'lblPassword.Visible = False 'version 2.0 commented out
    'Else
        'txtServer.Visible = False 'version 2.0 changed from txtConnectionString
        'lblServer.Visible = False 'version 2.0 changed from lblConnectionString
        'txtDriver.Visible = False 'version 2.0
        'lblDriver.Visible = False 'version 2.0
    'End If

    PopulateTables
       
    If txtPassword.Visible = True And txtPassword = "" Then
        txtPassword.SetFocus
    ElseIf cboTable.Text = "" Then
        cboTable.SetFocus
    End If

End Sub

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdOK_Click()
Dim i As Integer

    If txtPassword.Visible = True And txtPassword = "" Then
        MsgBox "Please enter password", vbCritical
        txtPassword.SetFocus
        Exit Sub
    End If
    
    If cboType.Text = "" Then
        MsgBox "Please select SQL Type", vbCritical
        cboType.SetFocus
        Exit Sub
    End If

    mblnCancelled = False
    
    mtypCon.Password = txtPassword
    i = InStr(1, cboTable.Text, " ")
    If i > 1 Then
        mtypCon.Table = Trim(Left(cboTable.Text, i - 1)) 'version 1.73 removed UCASE
    Else
        mtypCon.Table = Trim(cboTable.Text) 'version 1.73 removed UCASE
    End If
    
    mtypCon.Type = cboType.Text

    Unload Me
    
End Sub

Private Function CheckForm() As Boolean
Dim strArray() As String
Dim blnError As Boolean
Dim i As Integer

    CheckForm = True

End Function

Private Sub UserForm_Initialize()
    cboType.AddItem "Insert"
    cboType.AddItem "Update"
    cboType.AddItem "Select"
End Sub

Private Sub cboTable_DropButtonClick()
If mintTables = 0 And (txtPassword.Visible = False Or txtPassword <> "") Then
    GetTables mtypCon.Database, mtypCon.Schema
    PopulateTables
End If
End Sub

Private Sub PopulateTables()
Dim intTable As Integer
    For intTable = 1 To mintTables
        cboTable.AddItem Trim(mstrTables(intTable, 0) & " " & mstrTables(intTable, 1))
    Next intTable
End Sub

Private Function GetTables(strDatabase As String, strSchema As String) As Boolean
Dim recTables As ADODB.Recordset
Dim i As Integer
Dim strMsg As String
    
If OpenSqlConnection(txtDriver, txtServer, txtDatabase, txtSchema, txtUserID, txtPassword) = False Then 'version 2.0 removed: txtConnectionString, added: txtDriver, txtServer , removed: txtDSN,
    GetTables = False
    Exit Function
End If

On Error Resume Next
Set recTables = mobjCon.OpenSchema(adSchemaTables, Array(strDatabase, strSchema, Empty, "TABLE"))
If Err.Number <> 0 Then
    strMsg = Err.Description
    On Error GoTo 0
    MsgBox "ERROR: " & strMsg, vbCritical
    GetTables = False
    Exit Function
End If
On Error GoTo 0

Do While recTables.BOF = False And recTables.EOF = False
    If recTables!TABLE_TYPE = "TABLE" Then
        mintTables = mintTables + 1
        mstrTables(mintTables, 0) = recTables!TABLE_NAME
        If IsNull(recTables!Description) Then
            mstrTables(mintTables, 1) = ""
        Else
            mstrTables(mintTables, 1) = RemoveMultipleSpaces(recTables!Description)
        End If
    End If
    recTables.MoveNext
Loop

PopulateProperties

mobjCon.Close
GetTables = True

End Function


Private Sub PopulateProperties()
Dim i As Integer

cboProperties.Clear
For i = 0 To mobjCon.Properties.Count - 1
    cboProperties.AddItem i & ". " & Trim(mobjCon.Properties(i).Name) & ": " & Trim(mobjCon.Properties(i).VALUE)
Next i

End Sub


Attribute VB_Name = "frmSelectMethod"
Attribute VB_Base = "0{25721CD9-D15B-407F-B13A-82FA0893CDAD}{9247A041-78DB-4E1C-B029-667FCB1F56BD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub cmdAPI_Click()
    mblnCancelled = False
    mtypCon.Method = "API"
    Unload Me
End Sub

Private Sub cmdCancel_Click()
    Unload Me
End Sub

Private Sub cmdSQL_Click()
    mblnCancelled = False
    mtypCon.Method = "SQL"
    Unload Me
End Sub

Private Sub cmdWebService_Click()
    mblnCancelled = False
    mtypCon.Method = "WebService"
    Unload Me
End Sub

Private Sub UserForm_Activate()
    mblnCancelled = True ' will be set to false if exiting by clicking one of check boxes
End Sub

Attribute VB_Name = "frmWebServiceConnection"
Attribute VB_Base = "0{13D6C87C-354B-4776-908D-289357B6079C}{B5F51F18-224E-405A-BBF5-AB6EAA280FBC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private mblnPopulatedNamespaces As Boolean 'has cboNamespace been populated?

Private Sub UserForm_Activate()
    mblnCancelled = True 'will be set to false if OK clicked, otherwise will stay as true
    
    mblnPopulatedNamespaces = False
    cboNamespace.Clear
    
    txtServer = mtypCon.Server 'version 2.0 changed from .IP
    txtPort = mtypCon.Port
    txtUserID = mtypCon.UserID
    txtPassword = mtypCon.Password
    txtContext = mtypCon.Context
    cboNamespace.Text = mtypCon.Namespace
    
    If txtPassword = "" Then
        txtPassword.SetFocus
    ElseIf cboNamespace = "" Then
        cboNamespace.SetFocus
    End If
End Sub

Private Sub cboNamespace_DropButtonClick()
    If mblnPopulatedNamespaces = False Then
        PopulateNamespaces
    End If
End Sub

Private Sub PopulateNamespaces()
Dim strReturn As String
Dim strMsg As String
Dim intWebService As Integer
If mblnPopulatedNamespaces = True Then Exit Sub


For intWebService = 1 To mintWebServices
    cboNamespace.AddItem mtypWebServices(intWebService).Namespace
Next intWebService

mblnPopulatedNamespaces = True

End Sub

Private Sub cmdCancel_Click()
    Unload Me ' this will trigger UserForm_Terminate to run
End Sub

Private Sub cmdOK_Click()
Dim strReturn As String
Dim strMsg As String
Dim lngMaxRecords As Long 'version 1.8
Dim blnInvalid As Boolean  'version 2.1

    'check namespace has been entered
    If Trim(cboNamespace.Text) = "" Then
        MsgBox "Please enter Namespace", vbCritical
        cboNamespace.SetFocus
        Exit Sub
    End If
             
    'Check txtMaxRecords 'version 1.8
    If Trim(txtMaxRecords) = "" Then
        lngMaxRecords = 0
    Else
        On Error Resume Next
        lngMaxRecords = txtMaxRecords
        If Err.Number <> 0 Then
            On Error GoTo 0
            MsgBox "Max Records is invalid", vbCritical
            txtMaxRecords.SetFocus
            Exit Sub
        End If
        On Error GoTo 0
    End If
        
    mtypCon.Password = Trim(txtPassword)
    mtypCon.Namespace = Trim(cboNamespace.Text)
    mtypCon.MaxRecords = lngMaxRecords
    mblnCancelled = False
    Unload Me
    
End Sub




' InQuest injected base64 decoded content
' z{bj[
' zYUjX

INQUEST-PP=macro
