Attribute VB_Name = "Code"
Dim FileName
Dim Error
Dim ReadFrom

Public Sub AutoStart()
    ' ======================================================
    ' Reads Data from the CSV specified in "SourceFile"
    ' and fills the propriate Fields in the Word-File.
    ' Then saves the Word-Document to the location specified
    ' in the CSV-Field No.10.
    ' ======================================================
    ' last edited: 2011-08-23
    ' Roland Unterholzer
    '
    If (DataExists) Then Exit Sub
    If (Not OpenedFromTemp) Then Exit Sub
    GetDataFromCSVAndSave

End Sub

Sub GetDataFromCSVAndSave()

    ShowWaitForm
    FillWithDataAndSave
    If Not Error Then WaitForm.Hide
    
End Sub

Sub FillWithDataAndSave()
    
    Error = False
    AddStatusMessage ("Daten werden eingelesen...")
    UnprotectDocument
    CSVLine = TryToReadFromEnviron
    If (CSVLine = "") Then CSVLine = TryToReadFromCSVFile(Environ("TEMP") & "\" & ActiveDocument.Name & ".CSV")
    If CSVLine = "" Then
        AddStatusError ("FEHLER: Es wurden keine Daten gefunden!")
    End If
    WorkOnCSVLine (CSVLine)
    AddStatusMessage ("Daten wurden erfolgreich eingelesen (" & ReadFrom & ").")
    ProtectDocument
    AddStatusMessage ("Word-Dokument wird gesichert...")
    If SaveDocument Then
        AddStatusMessage ("Word-Dokument wurde erfolgreich gesichert.")
    Else
        AddStatusError ("FEHLER: Das Word-Dokument konnte nicht gespeichert werden!")
    End If
     
End Sub

Function TryToReadFromEnviron()
    
    Result = Environ(ActiveDocument.Name)
    If (Result <> "") Then ReadFrom = "von Umgebungsvariable"
    TryToReadFromEnviron = Result

End Function

Function TryToReadFromCSVFile(FileName As String)
    
    On Error Resume Next
    Open FileName For Input As #1
    If Err.Number <> 0 Then
        TryToReadFromCSVFile = ""
        Exit Function
    Else
        Line Input #1, TryToReadFromCSVFile
        ReadFrom = "von CSV-Datei"
    End If
    Close #1
    On Error GoTo 0

End Function

Sub UnprotectDocument()
    
    If ActiveDocument.ProtectionType = wdAllowOnlyFormFields Then ActiveDocument.Unprotect Password:="ih"

End Sub

Sub ProtectDocument()
    
    ActiveDocument.Bookmarks("\StartOfDoc").Select
    ActiveDocument.Protect Type:=wdAllowOnlyFormFields, NoReset:=True, Password:="ih"

End Sub

Function SaveDocument()
    
    On Error Resume Next
    Application.DisplayAlerts = wdAlertsNone
    ActiveDocument.SaveAs FileName
    Application.DisplayAlerts = wdAlertsAll
    SaveDocument = Err.Number = 0
    On Error GoTo 0

End Function

Sub WorkOnCSVLine(CSV As String)
    
    Dim NAKNummer
    NAKNummer = PopFromCSV(CSV)
    On Error Resume Next
    ActiveDocument.Bookmarks("NAKNummer").Range.Text = NAKNummer
    dummy = PopFromCSV(CSV)
    dummy = PopFromCSV(CSV)
    ActiveDocument.Bookmarks("AuftragLang").Range.Text = PopFromCSV(CSV)
    ActiveDocument.Bookmarks("AuftragKurz").Range.Text = PopFromCSV(CSV)
    dummy = PopFromCSV(CSV)
    ActiveDocument.Bookmarks("IDNummer").Range.Text = PopFromCSV(CSV)
    ActiveDocument.Bookmarks("Bezeichnung").Range.Text = PopFromCSV(CSV)
    ActiveDocument.Bookmarks("Anlage").Range.Text = PopFromCSV(CSV)
    FileName = PopFromCSV(CSV) & "\" & NAKNummer & ".doc"
    On Error GoTo 0
    
End Sub

Function PopFromCSV(CSV As String)
    
    Position = InStr(1, CSV, ";", vbTextCompare)
    PopFromCSV = Left(CSV, Position - 1)
    CSV = Right(CSV, Len(CSV) - Position)
    
End Function

Sub AddStatusMessage(Message As String)
    
    WaitForm.Status.Caption = WaitForm.Status.Caption & Chr(13) & Message
    WaitForm.Repaint

End Sub

Sub AddStatusError(Message As String)

    AddStatusMessage (Message)
    WaitForm.OKButton.Visible = True
    Error = True
    
End Sub

Function DataExists()
    
    On Error Resume Next
    dummy = ActiveDocument.Bookmarks("NAKNummer").Range.Text
    DataExists = Err.Number <> 0
    On Error GoTo 0

End Function

Function OpenedFromTemp()

    OpenedFromTemp = UCase(ActiveDocument.Path) = UCase(Environ("TEMP"))
    
End Function

Sub ShowWaitForm()
    
    WaitForm.Left = (Application.Left + Application.Width - WaitForm.Width) / 2
    WaitForm.Top = (Application.Top + Application.Height - WaitForm.Height) / 2
    WaitForm.Show
    
End Sub


Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
Sub AutoOpen()
    
    AutoStart

End Sub

Attribute VB_Name = "WaitForm"
Attribute VB_Base = "0{8144FA19-BD6F-4FA1-9F45-B87A807DED08}{5E933C19-E027-455A-B077-3D8CDFEB3E6A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False








Private Sub OKButton_Click()
    
    WaitForm.Hide
    
End Sub


INQUEST-PP=macro
