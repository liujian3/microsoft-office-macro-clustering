Attribute VB_Name = "IconSetting"
Option Explicit
' ===================================================================
'   Clipboard APIs
' ===================================================================
'Private Declare Function OpenClipboard Lib "user32" _
'  (ByVal hwnd As Long) As Long
'Private Declare Function CloseClipboard Lib "user32" () As Long
'Private Declare Function RegisterClipboardFormat Lib "user32" _
'  Alias "RegisterClipboardFormatA" (ByVal lpString As String) As Long
'Private Declare Function GetClipboardData Lib "user32" _
'  (ByVal wFormat As Long) As Long
'Private Declare Function SetClipboardData Lib "user32" _
'  (ByVal wFormat As Long, ByVal hMem As Long) As Long
'Private Declare Function EmptyClipboard Lib "user32" () As Long
'Private Const CF_DIB = 8
' ===================================================================
Private Declare Sub IconSet Lib "YomiIconSet.dll" ()
' ===================================================================

Public Declare Function GetModuleHandle Lib "kernel32" Alias "GetModuleHandleA" (ByVal lpModuleName As String) As Long
Public Declare Function FreeLibrary Lib "kernel32" (ByVal hLibModule As Long) As Long
'Public Declare Function LoadLibrary Lib "kernel32" Alias "LoadLibraryA" (ByVal lpLibFileName As String) As Long
'Public Declare Function GetProcAddress Lib "kernel32" (ByVal hModule As Long, ByVal lpProcName As String) As Long

Dim isIconOK As Boolean
Dim InitCnt As Long

Public Function InitIcon()
    If InitCnt = 0 Then
        isIconOK = True
        InitCnt = InitCnt + 1
    End If
    
End Function

Public Function BeforeSetImage() As Boolean
    If isIconOK Then
        IconSet
        BeforeSetImage = True
    Else
        BeforeSetImage = False
    End If
End Function

Public Function AfterSetImage()
    'ClearClipBord
End Function

'Private Sub ClearClipBord()
'    If (OpenClipboard(0&) <> 0) Then
'        Call EmptyClipboard
'        Call CloseClipboard
'    End If
'
'End Sub

Public Function TermIcon()
    Dim hMod As Long
    hMod = GetModuleHandle("YomiIconSet.dll")
    If hMod <> 0 Then
        FreeLibrary (hMod)
    End If

    'hMod = GetModuleHandle("YomiIconSet.dll")
    'If hMod <> 0 Then
    '    Dim pFunc As Long
    '    pFunc = GetProcAddress(hMod, "IconSet")
    '    If pFunc = 0 Then
    '        MsgBox "|fffd||590||fffd||fffd||fffd||fffd||64fe||fffd||142||fffd||fffd||202||fffd|"
    '    End If
    'Else
    '    MsgBox "|fffd||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd||fffd|n|fffd||fffd||fffd|h|fffd||fffd||fffd||fffd||fffd||64fe||fffd||142||fffd||fffd||202||fffd|"
    'End If
    
    isIconOK = False
End Function
Attribute VB_Name = "Menu"
Option Explicit

'========================================
' |fffd||8414|
'========================================
Const MENU_CAPTION = "|fffd||1ce||fffd|v|fffd||fffd|(&Y)"
Const MENU_BTN_CAPTION = "|fffd||1ce||fffd|v|fffd||fffd||fffd||30b|N|fffd||fffd|(&O)"
Const EXEC_NAME = "|fffd||1ce||fffd|v|fffd||fffd||fffd||30b|N|fffd||fffd|"
Const EXE_VAR = "14"

Const TOOLBAR_CAPTION = "|fffd||1ce||fffd|v|fffd||fffd|"
Const TOOLBAR_BTN_CAPTION = "|fffd||1ce||fffd|v|fffd||fffd||fffd||30b|N|fffd||fffd|"

'========================================
' |fffd|N|fffd||fffd||fffd||fffd||fffd||24e||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd|
'========================================
Sub Auto_Open()
    On Error GoTo exitFunc
    Call InitIcon
    
    Call MENU_ADD
    Call TOOLBAR_ADD
    
    '20060525 |fffd|s|fffd||f347||fffd||389||fffd| DLL|fffd||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd|[|fffd|h|fffd||fffd||fffd||202||fffd|
    'Call TermIcon

exitFunc:
End Sub

'========================================
' |fffd|I|fffd||fffd||fffd||fffd||fffd||24e||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd|
'========================================
Sub Auto_Close()
    On Error GoTo exitFunc
    Call MENU_DEL
    'Call TOOLBAR_DEL
    'Application.NormalTemplate.Save
    
exitFunc:
End Sub

'========================================
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||250||752||fffd|A|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd|
'========================================
Sub Remove()
    On Error GoTo exitFunc
    Call MENU_DEL
    Call TOOLBAR_DEL
    'Application.NormalTemplate.Save
    
exitFunc:
End Sub

Sub MENU_ADD()
    On Error GoTo exitFunc
    Dim newMenu As CommandBarPopup
    Dim newBtn As CommandBarButton
    Dim obj As Object
    
    With CommandBars("Worksheet Menu Bar")
        For Each obj In .Controls
            If (obj.Caption = MENU_CAPTION) Then
                If Val(obj.Tag) < Val(EXE_VAR) Then
                    obj.Delete
                    Exit For
                Else
                    Exit Sub
                End If
            End If
        Next
        
            
        Set newMenu = .Controls.Add(Type:=msoControlPopup, temporary:=True)
        newMenu.Caption = MENU_CAPTION
        newMenu.Tag = EXE_VAR
        Set newBtn = newMenu.Controls.Add(Type:=msoControlButton, temporary:=True)
        newBtn.Caption = MENU_BTN_CAPTION
        newBtn.OnAction = EXEC_NAME
        
        If BeforeSetImage Then
            newBtn.PasteFace
            AfterSetImage
        End If
    End With
    
exitFunc:
End Sub
Sub MENU_DEL()
    On Error GoTo exitFunc
    Dim obj As Object

    With CommandBars("Worksheet Menu Bar")
        For Each obj In .Controls
            If (obj.Caption = MENU_CAPTION) Then
                obj.Delete
            End If
        Next
    End With
    
exitFunc:
End Sub

Sub TOOLBAR_ADD()
    On Error GoTo iconFunc
    Dim objBar As CommandBar
    Dim objCont As CommandBarControl
    Dim objBtn As CommandBarButton
    
    
    For Each objBar In CommandBars
        If (objBar.Name = TOOLBAR_CAPTION) Then
            GoTo iconFunc
        End If
    Next
    
    Set objBar = CommandBars.Add(TOOLBAR_CAPTION, msoBarTop, False, False) '    msoBarFloating)
    Set objCont = objBar.Controls.Add(msoControlButton, 1)
    Set objBtn = objCont
    objBtn.Style = msoButtonAutomatic
    objBtn.Caption = TOOLBAR_BTN_CAPTION
    objBtn.TooltipText = TOOLBAR_BTN_CAPTION
    objBtn.OnAction = EXEC_NAME
    objBar.Visible = True

iconFunc:
    On Error GoTo exitFunc
    Set objBar = CommandBars(TOOLBAR_CAPTION)
    Set objBtn = objBar.Controls(1)
    
    On Error GoTo errEnd
    If BeforeSetImage Then
        objBtn.PasteFace
        AfterSetImage
    Else
        objBtn.Style = msoButtonCaption
    End If
exitFunc:

    Exit Sub
errEnd:
    objBtn.Style = msoButtonCaption
End Sub

Sub TOOLBAR_DEL()
    On Error GoTo exitFunc
    Dim obj As Object

    With CommandBars(TOOLBAR_CAPTION)
        .Delete
    End With
    
exitFunc:
End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "YomiExec"
Option Explicit

' API|fffd||fffd|`
Public Declare Function RegSetValueEx Lib "advapi32.dll" Alias "RegSetValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal Reserved As Long, ByVal dwType As Long, lpData As Any, ByVal cbData As Long) As Long         ' Note that if you declare the lpData parameter as String, you must pass it By Value.
Public Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As Long) As Long
Public Declare Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, lpData As Any, lpcbData As Long) As Long         ' Note that if you declare the lpData parameter as String, you must pass it By Value.
Public Declare Function RegCloseKey Lib "advapi32.dll" (ByVal hKey As Long) As Long

Public Const HKEY_LOCAL_MACHINE = &H80000002
Public Const HKEY_CURRENT_USER = &H80000001
Public Const ERROR_SUCCESS = 0&
Public Const REG_DWORD = 4                      ' 32-bit number
Public Const MAX_PATH = 260
Public Const KEY_QUERY_VALUE = &H1
Public Const KEY_SET_VALUE = &H2
Public Const REG_SZ = 1                         ' Unicode nul terminated string

Public Const REGKEY_PATH_1 = "Software\Panasonic\|fffd||1ce||fffd|v|fffd||fffd|\"
Public Const REGKEY_PATH_2 = ".00.000\Path"
Public Const REGKEY_VAL = "InstPath"
Public Const EXE_NAME = "Yomikaku.exe"

Public Const MAX_VAR = 14


Public Sub |fffd||1ce||fffd|v|fffd||fffd||fffd||30b|N|fffd||fffd|()
    Dim sPath As String
    Dim iLen As Integer
    
    On Error GoTo err_prc
    
    'HKEY_CURRENT_USER |fffd||fffd||fffd||fffd||fffd||fffd||fffd||64fe|
    sPath = GetYomiPath(HKEY_CURRENT_USER)
    If (sPath = "") Then
        'HKEY_CURRENT_USER |fffd||242||34c||fffd||fffd||82||fffd||fffd||fffd||202||fffd||fffd||302||fffd|
        'HKEY_LOCAL_MACHINE |fffd||fffd||fffd||fffd||fffd||fffd||fffd||64fe|
        sPath = GetYomiPath(HKEY_LOCAL_MACHINE)
        If (sPath = "") Then
            '|fffd||fffd||fffd||fffd||fffd||182||fffd||fffd||fffd||42a96||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            Call MsgBox("|fffd||1ce||fffd|v|fffd||fffd||fffd||30f||fffd||42a8c||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly, "|fffd||1ce||fffd|v|fffd||fffd||fffd||30b|N|fffd||fffd|")
            Exit Sub
        End If
    End If
    
    '|fffd||1ce||fffd|v|fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd|g|fffd||757||fffd||fffd||fffd|
    sPath = Trim(sPath)
    If Right(sPath, 1) <> "\" Then
        sPath = sPath & "\"
    End If
    sPath = sPath & EXE_NAME
    
    
    If Dir(sPath) <> "" Then
        '|fffd||1ce||fffd|v|fffd||fffd||fffd|N|fffd||fffd|
        Shell sPath, vbNormalFocus
    Else
        Call MsgBox("|fffd||1ce||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|B", vbOKOnly, "|fffd||1ce||fffd|v|fffd||fffd||fffd||30b|N|fffd||fffd|")
    End If
    
    Exit Sub
err_prc:

    Call MsgBox("|fffd||1ce||fffd|v|fffd||fffd||fffd||30b|N|fffd||fffd||fffd||24e||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B", vbOKOnly, "|fffd||1ce||fffd|v|fffd||fffd||fffd||30b|N|fffd||fffd|")
End Sub

Public Function GetYomiPath(sRootKey As String) As String
    Dim Result As Long
    Dim phkResult As Long
    Dim DataType As Long
    Dim sData As String * MAX_PATH
    Dim sOut As String
    Dim iVar As Integer
    
    GetYomiPath = ""
    
    For iVar = MAX_VAR To 1 Step -1
        Result = RegOpenKeyEx(sRootKey, REGKEY_PATH_1 & iVar & REGKEY_PATH_2, 0, KEY_QUERY_VALUE, phkResult)
        If Result <> ERROR_SUCCESS Then
            If iVar = 1 Then
                Exit Function
            End If
        Else
            Exit For
        End If
    Next
    
    
    Result = RegQueryValueEx(phkResult, REGKEY_VAL, 0, DataType, ByVal sData, MAX_PATH)
    If Result <> ERROR_SUCCESS Then
        Call RegCloseKey(phkResult)
        Exit Function
    End If
    
    sOut = Left(sData, InStr(sData, Chr(0)) - 1)
    
    '|fffd|n|fffd||fffd||fffd|h|fffd||fffd||fffd||fffd||82||fffd||fffd||fffd|
    Call RegCloseKey(phkResult)
    
    GetYomiPath = sOut
End Function



INQUEST-PP=macro
