Attribute VB_Name = "Module1"
'Private Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long) 'used for time delay
'Private Declare Sub LoadStdfSimple Lib "c:\test\QuickLoad.dll" (ByVal fileName As String, outputFileName As String)
  
Sub Convert_and_load_STDF()
    If Application.Version = 9 Then Convert_and_load_STDF_for_Office_2000
    If Application.Version = 10 Then Convert_and_load_STDF_for_Office_XP
    'If Application.Version = 11 Then Convert_and_load_STDF_for_Office_XP
    If Application.Version >= 11 Then Convert_and_load_STDF_for_Office_XP
End Sub

Sub Convert_and_load_STDF_for_Office_2000() 'for Office 2000
    Dim MyName As Variant
    Dim MyCSV As String
    Dim MyPath
    Dim RetVal
    MyPath = ThisWorkbook.Path
    ' Open the file dialog
    On Error Resume Next 'sometimes you will get a Type mismatch error if the user clicks the cancel button
    MyName = Application.GetOpenFilename("STD Files (*.std;*.stdf),*.std; *.stdf", , "Select the file to convert")
    If MyName = False Then End
    MyCSV = MyName & ".csv" 'full name of the converted CSV file
    'delete existing CSV file with the same name
    If Not Dir(MyCSV, vbNormal Or vbReadOnly Or vbHidden Or vbSystem Or vbArchive) = "" Then Kill MyCSV
    'define the entire command string to execute the conversion of MyName using TestSimple.exe
    MyConversion = Chr(34) & MyPath & "\testsimple.exe" & Chr(34) & " " & Chr(34) & MyName & Chr(34)
    RetVal = Shell(MyConversion, 0) 'execute the conversion
    'Sleep 12000 ' wait for 5 seconds to give TestSimple sufficient time to execute conversion
    Wait 5
    'note - above time delay may have to be increased if conversion of much larger files is anticipated
    Workbooks.Open MyCSV
End Sub

Sub Convert_and_load_STDF_for_Office_XP() 'for Office XP
    Dim MyName As String
    Dim MyCSV As String
    Dim MyPath
    Dim dlgOpen As FileDialog
    'Const msoFileDialogOpen = 1
    Dim RetVal
    MyPath = ThisWorkbook.Path
    'assumes that QuickLoad.dll and TestSimple.exe are stored
    'in the same directory as this workbook
    'File Dialog use requires that a VBE Reference is set to Microsoft Office X.X Object Library
    Set dlgOpen = Application.FileDialog(msoFileDialogOpen) '(msoFileDialogFolderPicker)
    With dlgOpen
        .Filters.Clear ' clear all filters except what is added below
        .Filters.Add "Open STDF", "*.std; *.stdf; *.std_1; *.gz", 1
        .InitialFileName = ThisWorkbook.Path 'starts in the same directory as this workbook
        .InitialView = msoFileDialogViewDetails
        If .Show <> -1 Then End 'quit entire routine if dialog is cancelled
        
        MyName = .SelectedItems(1)
    End With
        Dim dataPath
        dataPath = Environ("APPDATA") & "\" & "spry"
        MyCSV = MyName & ".csv" 'full name of the converted CSV file
        Dim basename
        basename = ExtractFileName(MyName)
        If Dir(dataPath, vbDirectory) = "" Then MkDir (dataPath)
        MyCSV = dataPath & "\" & basename & ".csv"
        'delete existing CSV file with the same name
        If Not Dir(MyCSV, vbNormal Or vbReadOnly Or vbHidden Or vbSystem Or vbArchive) = "" Then Kill MyCSV
        'define the entire command string to execute the conversion of MyName using TestSimple.exe
        MyConversion = Chr(34) & MyPath & "\testsimple.exe" & Chr(34) & " " & Chr(34) & MyName & Chr(34)
        RetVal = Shell(MyConversion, 0) 'execute the conversion
        Wait 5
        'Sleep 5000 ' wait for 5 seconds to give TestSimple sufficient time to execute conversion
        'note - above time delay may have to be increased if conversion of much larger files is anticipated
        Workbooks.Open MyCSV
    'End If
End Sub
Function ExtractFileName(filespec) As String
'   Returns a filename from a filespec
    Dim x As Variant
    x = Split(filespec, Application.PathSeparator)
    Dim basename As String
    basename = x(UBound(x))
  '  y = Split(basename, ".")
   ' If (LCase(y(UBound(y))) = "gz") Then basename = Left(basename, Len(basename) - 3)
    ExtractFileName = basename
End Function
Sub AddMenuItem_to_FileMenu()
    With Application.MenuBars(xlWorksheet)
        '.Reset  ' alternative - however resets other customizations to menus as well
        
        RemoveSTDFmenuitems ' clear old menu items and refresh with new
        
        With .Menus("File")

            .MenuItems.AddMenu Caption:="Open STDF"
            
            With .MenuItems("Open STDF").MenuItems
                .Add Caption:="Convert and Load STDF", OnAction:="Convert_and_load_STDF"
            End With
            
            With .MenuItems("Open STDF").MenuItems
                .Add Caption:="Remove STDF menu items", OnAction:="RemoveSTDFmenuitems"
            End With

        End With
    End With
End Sub
Sub RemoveSTDFmenuitems()
'    Application.MenuBars(xlWorksheet).Reset ' alternative - however resets other customizations to menus as well
    On Error Resume Next
    With Application.MenuBars(xlWorksheet).Menus("&File") 'Application.CommandBars("Worksheet Menu Bar") '
        For i = 1 To .MenuItems.Count '.Controls.Count
            mycaption = .MenuItems(i).Caption
            If mycaption = "Open STDF" Then
                .MenuItems(i).Delete
                End
            End If
        Next i
    End With
 End Sub

Private Sub Wait(ByVal nSec As Long)
    nSec = nSec + Timer
    While nSec > Timer
        DoEvents
    Wend
End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()

End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)

End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Dim bClosing As Boolean
Private Sub Workbook_Open()
    AddMenuItem_to_FileMenu
End Sub
Private Sub Workbook_BeforeClose(Cancel As Boolean)
    bClosing = Not Cancel
End Sub
Private Sub Workbook_Deactivate()
    On Error Resume Next
    If bClosing <> True Then
        'grey out command if shifting to another workbook
        Application.MenuBars(xlWorksheet).Menus("File").MenuItems("Open STDF").Enabled = False
    Else
        'delete command if closing this workbook
        Application.MenuBars(xlWorksheet).Menus("File").MenuItems("Open STDF").Delete
    End If
    On Error GoTo 0
End Sub
Private Sub Workbook_Activate()
    On Error Resume Next
    Application.MenuBars(xlWorksheet).Menus("File").MenuItems("Open STDF").Enabled = True
    On Error GoTo 0
End Sub

Sub Auto_Open()
    AddIns("Microsoft Scripting Runtime").Installed = True
End Sub


INQUEST-PP=macro
