Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Modul1"
Option Explicit
Private prMPArr As Variant
Private prMPRange As Range

Public Sub MPDataChanged()
    'prMPRange = Empty
End Sub
Private Function prMPDatenX() As Variant
    prInitMPR
    prMPDatenX = prMPArr
End Function
Private Function prMPDaten(pZeile As Integer, pSpalte As Integer) As Double
    
    prInitMPR
    prMPDaten = prMPRange(pZeile, pSpalte)

End Function
Private Sub prInitMPR()

    If prMPRange Is Nothing Then
        Set prMPRange = Tabelle1.Range("MP_PARAMETER_KOMPLETT")
    End If


End Sub

Private Function prMPIndex(pProdukt As Long) As Integer
    Dim mwindex As Integer
    ' Die Zeile f|fffd|rs Produkt heraussuchen
    Select Case pProdukt
        Case 1004
            mwindex = 2
        Case 1005
            mwindex = 4
        Case 11241919
            mwindex = 3
        Case Else
            mwindex = 1
    End Select
        
    prMPIndex = mwindex
    
End Function

Function ManagementPraemieVG(pProdukt As Long, pFS As Boolean)
    
    Dim retu As Double
        
    If pFS Then
        retu = prMPDaten(prMPIndex(pProdukt), 8)
    Else
        retu = prMPDaten(prMPIndex(pProdukt), 5)
    End If
    If IsEmpty(retu) Then
        retu = 0
    End If
    ' Ausnahmeregelungen f|fffd|r Sanktionskategorien
    ManagementPraemieVG = retu
    
End Function
Function RefMarktwertVG(pProdukt As Long, pFS As Boolean, pMPDaten As Range, Optional pEEG2014 As Boolean = False, Optional pBerechnungArt As Integer) As Double
        
    If pEEG2014 Then
        If pBerechnungArt = 1 Then
            RefMarktwertVG = 0
        Else
            RefMarktwertVG = prMPDaten(prMPIndex(pProdukt), 4)
        End If
        
    Else
        If pFS Then
            RefMarktwertVG = prMPDaten(prMPIndex(pProdukt), 9)
        Else
            RefMarktwertVG = prMPDaten(prMPIndex(pProdukt), 6)
        End If
    End If
End Function

Function MszAbzugVG4882_2019(vgname As String) As Integer
    
    MszAbzugVG4882_2019 = 1
    If InStr(vgname, "SgK4822") > 0 Then
        If Right(vgname, 2) >= "19" Then
            If Not InStr(vgname, "Jan19") > 0 Then
                MszAbzugVG4882_2019 = 2
            End If
        End If
    End If
    

End Function
Function VerguetungSanktionPZ(pMenge As Currency, pProdukt As Long, ByVal pAW As Currency, pVGRegulaer As Currency, pMarktwert As Currency, pEEG2014 As Integer, pTyp As Integer, pPZFaktor As Currency, Optional MSZ As Integer = 0) As Currency
    Dim retu As Currency
    
    Select Case pTyp
        Case 0 ' EEG
            Dim AW As Currency
            AW = pAW
            If MSZ = 1 Then
                AW = pAW - 8.5
            ElseIf MSZ = 2 Then
                AW = pAW - 8
            End If
            retu = WorksheetFunction.Round(pPZFaktor * AW, 2)
            
            If pEEG2014 <> 0 Then
                retu = retu - (pAW - pVGRegulaer)
            End If
            
        Case 1 ' MP
            retu = WorksheetFunction.Round(pPZFaktor * pAW, 2) - pMarktwert
        Case 2  'AV
            retu = WorksheetFunction.Round(pPZFaktor * WorksheetFunction.Round(0.8 * pAW, 2), 2)
    End Select
    
    If MSZ = 0 Then ' Ausser bei MSZ: Betrag nach unten auf 0 begrenzen
        If retu < 0 Then retu = 0
    End If
    retu = WorksheetFunction.Round(retu * WorksheetFunction.Round(pMenge, 0) / 100, 2)
    VerguetungSanktionPZ = retu
    
End Function
Function MarktwertVG(pProdukt As Long) As Double
    
    MarktwertVG = prMPDaten(prMPIndex(pProdukt), 4)
    
End Function

Function MarktpraemieVG(pProdukt As Long, pBerechnung As Integer, pVG As Double, pFS As Boolean, pMPDaten As Range, Optional pEEG2014 As Boolean = False) As Double
    
    Select Case pBerechnung
        Case 0
            If pVG = 0 Then ' Wenn die Veguetung 0 ist, dann gibts auch keine Marktpr|fffd|mie
                MarktpraemieVG = 0
            Else
                If pEEG2014 Then
                    MarktpraemieVG = pVG - MarktwertVG(pProdukt)
                Else
                    MarktpraemieVG = pVG - MarktwertVG(pProdukt) + ManagementPraemieVG(pProdukt, pFS)
                End If
                
            End If
        Case 1
            If Not pEEG2014 Then
                MarktpraemieVG = 0 ' Neue Auslegung des Gesetzes keine VG, da MW schon durch Vermarktung erzielt ' MarktwertVG(pProdukt)
            Else
                MarktpraemieVG = 0
            End If
        Case 2
            MarktpraemieVG = 0 ' Neue Auslegung des Gesetzes keine VG, da MW schon durch Vermarktung erzielt ' MarktwertVG(pProdukt) MarktwertVG(pProdukt)
        Case 3, 4
            MarktpraemieVG = ManagementPraemieVG(pProdukt, pFS)
        Case 7
            MarktpraemieVG = pVG
    End Select
    
    If pBerechnung <> 7 Then
        If MarktpraemieVG < 0 Then
            MarktpraemieVG = 0
        End If
    End If

End Function



Public Function VerguetungVG(pProduktID As Long, pBerechnung As Integer, pVG As Double, pMPDaten As Range) As Double
    Select Case pBerechnung
        Case 0
            VerguetungVG = pVG
        Case 1, 2
            VerguetungVG = MarktwertVG(pProduktID)
        Case 3
            VerguetungVG = ManagementPraemieVG(pProduktID, False)
        Case 4
            VerguetungVG = ManagementPraemieVG(pProduktID, True)
    End Select
        
End Function


Public Function IstNach2015_03(pJahr As Integer, pMonat As String) As Boolean

    If pJahr = 2015 Then
        Select Case LCase(pMonat)
            Case "1", "januar", "2", "februar", "3", "m|fffd|rz", "maerz"
                    IstNach2015_03 = False
            Case Else
                IstNach2015_03 = True
        End Select
    ElseIf pJahr > 2015 Then
        IstNach2015_03 = True
    Else
        IstNach2015_03 = False
    End If
        
End Function



Public Function DecodeEEGJahr(pEEGJahr As Integer, pCode1 As Integer, pWert1 As Double, pCode2 As Integer, pWert2 As Double, pCode3 As Integer, pWert3 As Double, pWertSonst As Double) As Double


    Select Case pEEGJahr
        Case pCode1
            DecodeEEGJahr = pWert1
        Case pCode2
            DecodeEEGJahr = pWert2
        Case pCode3
            DecodeEEGJahr = pWert3
        Case Else
            DecodeEEGJahr = pWertSonst
    End Select
End Function
Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdNurVerwendet, 35, 2, MSForms, CommandButton"
Attribute VB_Control = "cmdAllesEinblenden, 34, 3, MSForms, CommandButton"
Const sheetNr = 3
Public EEG_JAHR As Integer

Private Sub UnprotectSheet()
    
    Set sh = Sheets(sheetNr)

    
       
    sh.Activate
    
    sh.Unprotect (Sheets("IDENT").Range("A50").Value)
    blnProtect = True

End Sub



Private Function Status() As Integer

    Dim sh As Worksheet
    
    Set sh = Sheets(sheetNr)
    
    Status = sh.Range("O1")
    
End Function
Private Sub SetStatus(pStatus As Integer)
    
    Dim sh As Worksheet
        
    Set sh = Sheets(sheetNr)
    
    If pStatus > 2 Or pStatus < 0 Then pStatus = 0
    
    
    sh.Range("O1") = pStatus
    
    ' Soll ab 2019 nicht mehr zu sehen sein
    'Me.cmdLeerInhalteAusblenden.Visible = False
    
    Select Case pStatus
        Case 1  ' Vorraussichtlich und benutzt
            Me.cmdAllesEinblenden.Enabled = True
            
            'Me.cmdLeerInhalteAusblenden.Enabled = False
            Me.cmdNurVerwendet.Enabled = True
        Case 2  ' Nur verwendet
            Me.cmdAllesEinblenden.Enabled = True
            'Me.cmdLeerInhalteAusblenden.Enabled = True
            Me.cmdNurVerwendet.Enabled = False
        
        Case Else
            Me.cmdAllesEinblenden.Enabled = False
            'Me.cmdLeerInhalteAusblenden.Enabled = True
            Me.cmdNurVerwendet.Enabled = True
        
    End Select
    
    
End Sub
Private Function ZeileAusblenden(sh As Worksheet, pIntZeile As Integer, pStatus As Integer) As Boolean
    Dim pruefCols(1 To 15) As String
    If sh.Name = "vNNE" Then
            pruefCols(1) = "J"
            pruefCols(2) = "K"
            pruefCols(3) = "L"
    Else
        If EEG_JAHR < 2013 Then
            pruefCols(1) = "J"
            pruefCols(2) = "AE"
            pruefCols(3) = "L"
        Else
            pruefCols(1) = "J"
            pruefCols(2) = "AE"
            pruefCols(3) = "L"
            pruefCols(4) = "AH"
            pruefCols(5) = "AK"
            
            pruefCols(6) = "AN"
            
            pruefCols(7) = "AQ"
            pruefCols(8) = "AR"
            
            pruefCols(9) = "AU"
            pruefCols(10) = "AV"
            
            pruefCols(11) = "AY"
            pruefCols(12) = "AZ"
            
            pruefCols(13) = "BC"
            pruefCols(14) = "BD"
        End If
    End If
    
    If pStatus = 1 Then
        pruefCols(15) = "S"
    End If
    
    
    ZeileAusblenden = True
    
    For i = 1 To UBound(pruefCols)
        If pruefCols(i) <> "" Then
            If CStr(sh.Range(pruefCols(i) & pIntZeile).Value) <> "" And sh.Range(pruefCols(i) & pIntZeile).Value <> 0 Then
                ZeileAusblenden = False
                Exit For
            End If
        End If
    Next
        

End Function
'Private Function ZeileAusblenden(pIntZeile As Integer, pStatus As Integer) As Boolean
'
'    If pStatus = 1 Then
'
'
'        If (sh.Range("J" & intZeilen).Value = "" Or sh.Range("J" & intZeilen).Value = 0) And _
'                                (sh.Range("L" & intZeilen).Value = "" Or sh.Range("L" & intZeilen).Value = 0) And _
'                                (sh.Range("AE" & intZeilen).Value = "" Or sh.Range("AE" & intZeilen).Value = 0) And _
'                                (sh.Range("S" & intZeilen).Value = "" Or sh.Range("S" & intZeilen).Value = 0) Then
'            ZeileAusblenden = True
'        Else
'            ZeileAusblenden = False
'        End If
'
'    Else
'        If (sh.Range("J" & intZeilen).Value = "" Or sh.Range("J" & intZeilen).Value = 0) And _
'                                (sh.Range("L" & intZeilen).Value = "" Or sh.Range("L" & intZeilen).Value = 0) And _
'                                (sh.Range("AE" & intZeilen).Value = "" Or sh.Range("AE" & intZeilen).Value = 0) Then
'            ZeileAusblenden = True
'        Else
'            ZeileAusblenden = False
'        End If
'    End If
'
'End Function
Private Sub InhalteEinAusblenden(pStatus As Integer)
    Dim rng As Range
    Dim intZeilen As Integer
    Dim blnWertImBlock As Boolean
    Dim intDurchlauf As Integer
    Dim strStartLabel As String
    Dim strEndeLabel As String
    Dim blnProtect As Boolean
    
    Application.ScreenUpdating = False
        
    
    Dim sh As Worksheet
    Set sh = Sheets(sheetNr)
    
    
    Dim allhiddenrows As Range
    
       
    sh.Activate
    'If sh.ProtectContents Then
        sh.Unprotect (Sheets("IDENT").Range("A50").Value)
        blnProtect = True
    'End If
    
    EEG_JAHR = Sheets(1).Range("V_EEG_JAHR").Value
    
    SetStatus pStatus
    
    
    For intDurchlauf = 0 To 0
    
        strStartLabel = "Start_Phys_Produkte"
        strEndeLabel = "Ende_Phys_Produkte"
                
        intZeilen = sh.Range(strStartLabel).Cells.Row
        strZeile = ""
        Dim hiddenrows As String
        Dim lStatus As Integer
        lStatus = Status
        
        sh.Range("A" & sh.Range(strStartLabel).Cells.Row & ":A" & sh.Range(strEndeLabel).Cells.Row).EntireColumn.Select
        Selection.EntireRow.Hidden = False
        
        Select Case Status
            
            Case 1, 2         ' Vorraussichtlich und benutzt, nur benutzt
                For Each rng In sh.Range("A" & sh.Range(strStartLabel).Cells.Row & ":A" & sh.Range(strEndeLabel).Cells.Row)
                    If sh.Range("H" & intZeilen).Value <> "" Then
                        If ZeileAusblenden(sh, intZeilen, lStatus) Then
                            'rng.EntireRow.Hidden = True
                            'hiddenrows = hiddenrows & "," & rng.Address
                            If Not allhiddenrows Is Nothing Then
                                Set allhiddenrows = sh.Application.Union(allhiddenrows, rng)
                            Else
                                Set allhiddenrows = rng
                            End If
                        Else
                            blnWertImBlock = True
                        End If
                    Else
                        'wenn ganzer Block, dann leerzeile unter Block auch weg
                        If Not blnWertImBlock Then
                            'rng.EntireRow.Hidden = True
                            If Not allhiddenrows Is Nothing Then
                                Set allhiddenrows = sh.Application.Union(allhiddenrows, rng)
                            Else
                                Set allhiddenrows = rng
                            End If
    
                            'hiddenrows = hiddenrows & "," & rng.Address
                        End If
                        blnWertImBlock = False
                    End If
                
                    intZeilen = intZeilen + 1
                    
                Next
                            
                sh.Range("A1").Select
                
'            Case Else       ' Alle anzeigen
'                sh.Range("A" & sh.Range(strStartLabel).Cells.Row & ":A" & sh.Range(strEndeLabel).Cells.Row).EntireColumn.Select
'                Selection.EntireRow.Hidden = False
'
        End Select
        
    Next
    
    If Not allhiddenrows Is Nothing Then
        allhiddenrows.EntireRow.Hidden = True
    End If


    If blnProtect Then
        sh.Protect (Sheets("IDENT").Range("A50").Value)
    End If
        
    Application.ScreenUpdating = True
    sh.Activate
    sh.Range("A1").Select

End Sub

Private Sub cmdAllesEinblenden_Click()
    
    InhalteEinAusblenden 0
    
End Sub

Private Sub cmdLeerinhalteAusblenden_Click()
    
    InhalteEinAusblenden 1
       
End Sub



Private Sub cmdNurVerwendet_Click()
       
    InhalteEinAusblenden 2

End Sub


Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "cmdNurVerwendet, 20, 1, MSForms, CommandButton"
Attribute VB_Control = "cmdAllesEinblenden, 19, 2, MSForms, CommandButton"
Attribute VB_Control = "cmdLeerInhalteAusblenden, 18, 3, MSForms, CommandButton"
Const sheetNr = 4

Private Sub UnprotectSheet()
    
    Set sh = Sheets(sheetNr)

    
       
    sh.Activate
    
    sh.Unprotect (Sheets("IDENT").Range("A50").Value)
    blnProtect = True

End Sub


Private Function Status() As Integer

    Dim sh As Worksheet
    
    Set sh = Sheets(sheetNr)
    
    Status = sh.Range("O1")
    
End Function
Private Sub SetStatus(pStatus As Integer)
    
    Dim sh As Worksheet
        
    Set sh = Sheets(sheetNr)
    
    If pStatus > 2 Or pStatus < 0 Then pStatus = 0
    
    
    sh.Range("O1") = pStatus
    
    Select Case pStatus
        Case 1  ' Vorraussichtlich und benutzt
            Me.cmdAllesEinblenden.Enabled = True
            Me.cmdLeerInhalteAusblenden.Enabled = False
            Me.cmdNurVerwendet.Enabled = True
        Case 2  ' Nur verwendet
            Me.cmdAllesEinblenden.Enabled = True
            Me.cmdLeerInhalteAusblenden.Enabled = True
            Me.cmdNurVerwendet.Enabled = False
        
        Case Else
            Me.cmdAllesEinblenden.Enabled = False
            Me.cmdLeerInhalteAusblenden.Enabled = True
            Me.cmdNurVerwendet.Enabled = True
        
    End Select
    
    
End Sub
Private Function ZeileAusblenden(sh As Worksheet, pIntZeile As Integer, pStatus As Integer) As Boolean
    Dim pruefCols(1 To 4) As String
    
    pruefCols(1) = "J"
    pruefCols(2) = "K"
    pruefCols(3) = "L"
    
    If pStatus = 1 Then
        pruefCols(4) = "S"
    End If
    
    ZeileAusblenden = True
            
    For i = 1 To UBound(pruefCols)
        If pruefCols(i) <> "" Then
            If CStr(sh.Range(pruefCols(i) & pIntZeile).Value) <> "" And sh.Range(pruefCols(i) & pIntZeile).Value <> 0 Then
                ZeileAusblenden = False
                Exit For
            End If
        End If
    Next

End Function
Private Sub InhalteEinAusblenden(pStatus As Integer)
    Dim rng As Range
    Dim intZeilen As Integer
    Dim blnWertImBlock As Boolean
    Dim intDurchlauf As Integer
    Dim strStartLabel As String
    Dim strEndeLabel As String
    Dim blnProtect As Boolean
    
    Application.ScreenUpdating = False
        
    
    Dim sh As Worksheet
    Set sh = Sheets(sheetNr)
    
    
    Dim allhiddenrows As Range
    
       
    sh.Activate
    'If sh.ProtectContents Then
        sh.Unprotect (Sheets("IDENT").Range("A50").Value)
        blnProtect = True
    'End If
    
    SetStatus pStatus
    
    
    For intDurchlauf = 0 To 0
    
        strStartLabel = "Start_Finz_Produkte"
        strEndeLabel = "Ende_Finz_Produkte"
                
        intZeilen = sh.Range(strStartLabel).Cells.Row
        strZeile = ""
        Dim hiddenrows As String
        Dim lStatus As Integer
        lStatus = Status
        
        'Erst mal alles einblenden
        sh.Range("A" & sh.Range(strStartLabel).Cells.Row & ":A" & sh.Range(strEndeLabel).Cells.Row).EntireColumn.Select
        Selection.EntireRow.Hidden = False
        
        
        ' Nun ausblenden was weg soll
        Select Case Status
            
            Case 1, 2         ' Vorraussichtlich und benutzt, nur benutzt
                For Each rng In sh.Range("A" & sh.Range(strStartLabel).Cells.Row & ":A" & sh.Range(strEndeLabel).Cells.Row)
                    If sh.Range("H" & intZeilen).Value <> "" Then
                        If ZeileAusblenden(sh, intZeilen, lStatus) Then
                            'rng.EntireRow.Hidden = True
                            'hiddenrows = hiddenrows & "," & rng.Address
                            If Not allhiddenrows Is Nothing Then
                                Set allhiddenrows = sh.Application.Union(allhiddenrows, rng)
                            Else
                                Set allhiddenrows = rng
                            End If
                        Else
                            blnWertImBlock = True
                        End If
                    Else
                        'wenn ganzer Block, dann leerzeile unter Block auch weg
                        If Not blnWertImBlock Then
                            'rng.EntireRow.Hidden = True
                            If Not allhiddenrows Is Nothing Then
                                Set allhiddenrows = sh.Application.Union(allhiddenrows, rng)
                            Else
                                Set allhiddenrows = rng
                            End If
    
                            'hiddenrows = hiddenrows & "," & rng.Address
                        End If
                        blnWertImBlock = False
                    End If
                
                    intZeilen = intZeilen + 1
                    
                Next
                            
                sh.Range("A1").Select
                
'            Case Else       ' Alle anzeigen
'                sh.Range("A" & sh.Range(strStartLabel).Cells.Row & ":A" & sh.Range(strEndeLabel).Cells.Row).EntireColumn.Select
'                Selection.EntireRow.Hidden = False
'
        End Select
        
    Next
    
    If Not allhiddenrows Is Nothing Then
        allhiddenrows.EntireRow.Hidden = True
    End If


    If blnProtect Then
        sh.Protect (Sheets("IDENT").Range("A50").Value)
    End If
        
    Application.ScreenUpdating = True
    sh.Activate
    sh.Range("A1").Select

End Sub

Private Sub cmdAllesEinblenden_Click()
    
    InhalteEinAusblenden 0
    
End Sub

Private Sub cmdLeerinhalteAusblenden_Click()

    InhalteEinAusblenden 1
        
End Sub

Private Sub cmdNurVerwendet_Click()
    
    InhalteEinAusblenden 2

End Sub


'Private Sub cmdLeerinhalteAusblenden_Click()
'
'    Dim rng As Range
'    Dim intZeilen As Integer
'    Dim blnWertImBlock As Boolean
'    Dim intDurchlauf As Integer
'    Dim strStartLabel As String
'    Dim strEndeLabel As String
'    Dim blnProtect As Boolean
'
'    Application.ScreenUpdating = False
'
'    intSheet = 3
'
'    Dim allhiddenrows As Range
'    Dim sh As Worksheet
'    Set sh = Sheets(intSheet)
'    sh.Activate
'    'If sh.ProtectContents Then
'        sh.Unprotect (Sheets("IDENT").Range("A50").Value)
'        blnProtect = True
'    'End If
'    For intDurchlauf = 0 To 0
'
'
'        intZeilen = sh.Range(strStartLabel).Cells.Row
'        strZeile = ""
'        If sh.Range("K1").Value = "EIN" Then
'            sh.Range("A" & sh.Range(strStartLabel).Cells.Row & ":A" & sh.Range(strEndeLabel).Cells.Row).EntireColumn.Select
'            Selection.EntireRow.Hidden = False
'        Else
'            For Each rng In sh.Range("A" & sh.Range(strStartLabel).Cells.Row & ":A" & sh.Range(strEndeLabel).Cells.Row)
'                If sh.Range("H" & intZeilen).Value <> "" Then
'                    If (sh.Range("J" & intZeilen).Value = "" Or sh.Range("J" & intZeilen).Value = 0) And _
'                        (sh.Range("K" & intZeilen).Value = "" Or sh.Range("K" & intZeilen).Value = 0) And _
'                        (sh.Range("L" & intZeilen).Value = "" Or sh.Range("L" & intZeilen).Value = 0) And _
'                        (sh.Range("S" & intZeilen).Value = "" Or sh.Range("S" & intZeilen).Value = 0) Then
'
'                        If Not allhiddenrows Is Nothing Then
'                            Set allhiddenrows = sh.Application.Union(allhiddenrows, rng)
'                        Else
'                            Set allhiddenrows = rng
'                        End If
'
'                    Else
'                        blnWertImBlock = True
'                    End If
'                Else
'                    'wenn ganzer Block, dann leerzeile unter Block auch weg
'                    If Not blnWertImBlock Then
'                        'rng.EntireRow.Hidden = True
'                        If Not allhiddenrows Is Nothing Then
'                            Set allhiddenrows = sh.Application.Union(allhiddenrows, rng)
'                        Else
'                            Set allhiddenrows = rng
'                        End If
'                    End If
'                    blnWertImBlock = False
'                End If
'
'                intZeilen = intZeilen + 1
'            Next
'            sh.Range("A1").Select
'
'        End If
'    Next
'    If Not allhiddenrows Is Nothing Then
'        allhiddenrows.EntireRow.Hidden = True
'    End If
'    If sh.Range("K1").Value = "EIN" Then
'        sh.Range("K1").Value = ""
'        cmdLeerinhalteAusblenden.Caption = "Kategoriezeilen auf verwendete bzw. vorausichtlich ben|fffd|tigte einschr|fffd|nken."
'    Else
'        sh.Range("K1").Value = "EIN"
'        cmdLeerinhalteAusblenden.Caption = "Alle Kategorien anzeigen."
'    End If
'
'    If blnProtect Then
'        sh.Protect (Sheets("IDENT").Range("A50").Value)
'    End If
'
'    Application.ScreenUpdating = True
'    sh.Activate
'    sh.Range("A1").Select
'
'
'End Sub


Private Sub CommandButton2_Click()

End Sub

Private Sub CommandButton3_Click()

End Sub
Attribute VB_Name = "Tabelle20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Vor2015_04 As Boolean

Private Sub Worksheet_Change(ByVal Target As Range)
    Dim flag As Boolean
    If Target.Address = "$I$2" Or Target.Address = "$J$2" Then
        On Error Resume Next
        
        Dim wasprotected As Boolean
        If Tabelle1.ProtectionMode = True Then
            Tabelle1.Unprotect "Otto"
            Me.Unprotect "Otto"
        End If
        
        flag = Modul1.IstNach2015_03(Me.Cells(2, 9).Value, Me.Cells(2, 10).Value)
        
        Tabelle1.Range("AF:AH").Columns.Hidden = flag
        Me.Range("65:65").Rows.Hidden = flag
    
        If wasprotected Then
            Tabelle1.Protect "Otto"
            Me.Protect "Otto"
        End If
        
        Err.Clear
        
    
    End If
    
    
   
    
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "Tabelle4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Const sheetNr = 4

Private Sub UnprotectSheet()
    
    Set sh = Sheets(sheetNr)

    
       
    sh.Activate
    
    sh.Unprotect (Sheets("IDENT").Range("A50").Value)
    blnProtect = True

End Sub


Private Function Status() As Integer

    Dim sh As Worksheet
    
    Set sh = Sheets(sheetNr)
    
    Status = sh.Range("O1")
    
End Function
Private Sub SetStatus(pStatus As Integer)
    
    Dim sh As Worksheet
        
    Set sh = Sheets(sheetNr)
    
    If pStatus > 2 Or pStatus < 0 Then pStatus = 0
    
    
    sh.Range("O1") = pStatus
    
    Select Case pStatus
        Case 1  ' Vorraussichtlich und benutzt
            'Me.cmdAllesEinblenden.Enabled = True
            'Me.cmdLeerInhalteAusblenden.Enabled = False
            'Me.cmdNurVerwendet.Enabled = True
        Case 2  ' Nur verwendet
            'Me.cmdAllesEinblenden.Enabled = True
            'Me.cmdLeerInhalteAusblenden.Enabled = True
            'Me.cmdNurVerwendet.Enabled = False
        
        Case Else
            'Me.cmdAllesEinblenden.Enabled = False
            'Me.cmdLeerInhalteAusblenden.Enabled = True
            'Me.cmdNurVerwendet.Enabled = True
        
    End Select
    
    
End Sub
Private Function ZeileAusblenden(sh As Worksheet, pIntZeile As Integer, pStatus As Integer) As Boolean
    Dim pruefCols(1 To 4) As String
    
    pruefCols(1) = "J"
    pruefCols(2) = "K"
    pruefCols(3) = "L"
    
    If pStatus = 1 Then
        pruefCols(4) = "S"
    End If
    
    ZeileAusblenden = True
            
    For i = 1 To UBound(pruefCols)
        If pruefCols(i) <> "" Then
            If CStr(sh.Range(pruefCols(i) & pIntZeile).Value) <> "" And sh.Range(pruefCols(i) & pIntZeile).Value <> 0 Then
                ZeileAusblenden = False
                Exit For
            End If
        End If
    Next

End Function
Private Sub InhalteEinAusblenden(pStatus As Integer)
    Dim rng As Range
    Dim intZeilen As Integer
    Dim blnWertImBlock As Boolean
    Dim intDurchlauf As Integer
    Dim strStartLabel As String
    Dim strEndeLabel As String
    Dim blnProtect As Boolean
    
    Application.ScreenUpdating = False
        
    
    Dim sh As Worksheet
    Set sh = Sheets(sheetNr)
    
    
    Dim allhiddenrows As Range
    
       
    sh.Activate
    'If sh.ProtectContents Then
        sh.Unprotect (Sheets("IDENT").Range("A50").Value)
        blnProtect = True
    'End If
    
    SetStatus pStatus
    
    
    For intDurchlauf = 0 To 0
    
        strStartLabel = "Start_Finz_Produkte"
        strEndeLabel = "Ende_Finz_Produkte"
                
        intZeilen = sh.Range(strStartLabel).Cells.Row
        strZeile = ""
        Dim hiddenrows As String
        Dim lStatus As Integer
        lStatus = Status
        
        'Erst mal alles einblenden
        sh.Range("A" & sh.Range(strStartLabel).Cells.Row & ":A" & sh.Range(strEndeLabel).Cells.Row).EntireColumn.Select
        Selection.EntireRow.Hidden = False
        
        
        ' Nun ausblenden was weg soll
        Select Case Status
            
            Case 1, 2         ' Vorraussichtlich und benutzt, nur benutzt
                For Each rng In sh.Range("A" & sh.Range(strStartLabel).Cells.Row & ":A" & sh.Range(strEndeLabel).Cells.Row)
                    If sh.Range("H" & intZeilen).Value <> "" Then
                        If ZeileAusblenden(sh, intZeilen, lStatus) Then
                            'rng.EntireRow.Hidden = True
                            'hiddenrows = hiddenrows & "," & rng.Address
                            If Not allhiddenrows Is Nothing Then
                                Set allhiddenrows = sh.Application.Union(allhiddenrows, rng)
                            Else
                                Set allhiddenrows = rng
                            End If
                        Else
                            blnWertImBlock = True
                        End If
                    Else
                        'wenn ganzer Block, dann leerzeile unter Block auch weg
                        If Not blnWertImBlock Then
                            'rng.EntireRow.Hidden = True
                            If Not allhiddenrows Is Nothing Then
                                Set allhiddenrows = sh.Application.Union(allhiddenrows, rng)
                            Else
                                Set allhiddenrows = rng
                            End If
    
                            'hiddenrows = hiddenrows & "," & rng.Address
                        End If
                        blnWertImBlock = False
                    End If
                
                    intZeilen = intZeilen + 1
                    
                Next
                            
                sh.Range("A1").Select
                
'            Case Else       ' Alle anzeigen
'                sh.Range("A" & sh.Range(strStartLabel).Cells.Row & ":A" & sh.Range(strEndeLabel).Cells.Row).EntireColumn.Select
'                Selection.EntireRow.Hidden = False
'
        End Select
        
    Next
    
    If Not allhiddenrows Is Nothing Then
        allhiddenrows.EntireRow.Hidden = True
    End If


    If blnProtect Then
        sh.Protect (Sheets("IDENT").Range("A50").Value)
    End If
        
    Application.ScreenUpdating = True
    sh.Activate
    sh.Range("A1").Select

End Sub

Private Sub cmdAllesEinblenden_Click()
    
    InhalteEinAusblenden 0
    
End Sub

Private Sub cmdLeerinhalteAusblenden_Click()

    InhalteEinAusblenden 1
        
End Sub

Private Sub cmdNurVerwendet_Click()
    
    InhalteEinAusblenden 2

End Sub


'Private Sub cmdLeerinhalteAusblenden_Click()
'
'    Dim rng As Range
'    Dim intZeilen As Integer
'    Dim blnWertImBlock As Boolean
'    Dim intDurchlauf As Integer
'    Dim strStartLabel As String
'    Dim strEndeLabel As String
'    Dim blnProtect As Boolean
'
'    Application.ScreenUpdating = False
'
'    intSheet = 3
'
'    Dim allhiddenrows As Range
'    Dim sh As Worksheet
'    Set sh = Sheets(intSheet)
'    sh.Activate
'    'If sh.ProtectContents Then
'        sh.Unprotect (Sheets("IDENT").Range("A50").Value)
'        blnProtect = True
'    'End If
'    For intDurchlauf = 0 To 0
'
'
'        intZeilen = sh.Range(strStartLabel).Cells.Row
'        strZeile = ""
'        If sh.Range("K1").Value = "EIN" Then
'            sh.Range("A" & sh.Range(strStartLabel).Cells.Row & ":A" & sh.Range(strEndeLabel).Cells.Row).EntireColumn.Select
'            Selection.EntireRow.Hidden = False
'        Else
'            For Each rng In sh.Range("A" & sh.Range(strStartLabel).Cells.Row & ":A" & sh.Range(strEndeLabel).Cells.Row)
'                If sh.Range("H" & intZeilen).Value <> "" Then
'                    If (sh.Range("J" & intZeilen).Value = "" Or sh.Range("J" & intZeilen).Value = 0) And _
'                        (sh.Range("K" & intZeilen).Value = "" Or sh.Range("K" & intZeilen).Value = 0) And _
'                        (sh.Range("L" & intZeilen).Value = "" Or sh.Range("L" & intZeilen).Value = 0) And _
'                        (sh.Range("S" & intZeilen).Value = "" Or sh.Range("S" & intZeilen).Value = 0) Then
'
'                        If Not allhiddenrows Is Nothing Then
'                            Set allhiddenrows = sh.Application.Union(allhiddenrows, rng)
'                        Else
'                            Set allhiddenrows = rng
'                        End If
'
'                    Else
'                        blnWertImBlock = True
'                    End If
'                Else
'                    'wenn ganzer Block, dann leerzeile unter Block auch weg
'                    If Not blnWertImBlock Then
'                        'rng.EntireRow.Hidden = True
'                        If Not allhiddenrows Is Nothing Then
'                            Set allhiddenrows = sh.Application.Union(allhiddenrows, rng)
'                        Else
'                            Set allhiddenrows = rng
'                        End If
'                    End If
'                    blnWertImBlock = False
'                End If
'
'                intZeilen = intZeilen + 1
'            Next
'            sh.Range("A1").Select
'
'        End If
'    Next
'    If Not allhiddenrows Is Nothing Then
'        allhiddenrows.EntireRow.Hidden = True
'    End If
'    If sh.Range("K1").Value = "EIN" Then
'        sh.Range("K1").Value = ""
'        cmdLeerinhalteAusblenden.Caption = "Kategoriezeilen auf verwendete bzw. vorausichtlich ben|fffd|tigte einschr|fffd|nken."
'    Else
'        sh.Range("K1").Value = "EIN"
'        cmdLeerinhalteAusblenden.Caption = "Alle Kategorien anzeigen."
'    End If
'
'    If blnProtect Then
'        sh.Protect (Sheets("IDENT").Range("A50").Value)
'    End If
'
'    Application.ScreenUpdating = True
'    sh.Activate
'    sh.Range("A1").Select
'
'
'End Sub


Private Sub CommandButton2_Click()

End Sub

Private Sub CommandButton3_Click()

End Sub

' InQuest injected base64 decoded content
' rgKy
' rgKy

INQUEST-PP=macro
