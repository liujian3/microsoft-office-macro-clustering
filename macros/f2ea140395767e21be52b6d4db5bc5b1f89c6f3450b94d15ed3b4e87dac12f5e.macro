Attribute VB_Name = "MStarGrid"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private m_table As Word.table
Private m_CacheData As MStarVector
Private m_mapBold As MStarMap
Function SetTableTextStyle(fsIndex As Integer, Optional setStyle As Boolean = True)
    SetTableTextStyle = False
    
    If fsIndex > 0 Then
        If setStyle = True Then
             m_table.Range.Style = ThisDocument.Styles(g_arrStyleNames(fsIndex))
        End If
        m_table.Range.Font.name = ThisDocument.Styles(g_arrStyleNames(fsIndex)).Font.name
        m_table.Range.Font.Size = ThisDocument.Styles(g_arrStyleNames(fsIndex)).Font.Size
    End If
    
    SetTableTextStyle = True

End Function
'For Project #777
Function SetTableColumn(nCol As Integer)
    SetTableColumn = False
    
    m_table.Select
    Selection.PageSetup.TextColumns.SetCount (nCol)
    SetTableColumn = True
End Function

Function SetHeadingFormatRow(nRow As Integer)
    Dim nTableRows As Integer
    nTableRows = m_table.Rows.Count
    If nTableRows < nRow Then
        nRow = nTableRows
    End If
    
    m_table.Rows(nRow).HeadingFormat = True
End Function

Function MergeRow(nRow As Integer)
    m_table.Rows(nRow).Cells.Merge
End Function

Function DeleteRow(nRow As Integer)
    m_table.Rows(nRow).Delete
End Function

Function DisplayTableDesc_Ex(TitleKey As String, nRow As Integer) As Boolean
    On Error GoTo Err_Proc
    Dim node As Office.CustomXMLNode
    Dim strTemp As String

    DisplayTableDesc_Ex = False
    
    Set node = g_CustomXMLPart.SelectSingleNode(GetTextXPath(TitleKey))
    If node Is Nothing Then
        Exit Function
    End If
    
    strTemp = Trim(node.Text)
    If strTemp = "" Then
        Exit Function
    End If
        
    Dim oCell As Cell
    Set oCell = m_table.Cell(nRow, 1)
    oCell.Range.Style = ThisDocument.Styles(g_arrStyleNames(conReportContentIdx))
    oCell.Range.Text = strTemp

    m_table.Rows(nRow).Borders(1).Visible = True
    
    DisplayTableDesc_Ex = True
    Exit Function
Err_Proc:
    Err.Clear
End Function

Function AttachToTable(ByRef table As Word.table) As Boolean
    AttachToTable = False
    If table Is Nothing Then Exit Function
    Set m_table = table
    AttachToTable = True
    
    m_table.AllowAutoFit = False
End Function
'nIndex start with 1
Function AttachToTableWithIndex(nIndexL1 As Integer, nIndexL2 As Integer) As Boolean
    AttachToTableWithIndex = False
    
    If nIndexL2 > 0 Then
        Set m_table = ThisDocument.Tables(nIndexL1).Tables(nIndexL2)
    Else
        Set m_table = ThisDocument.Tables(nIndexL1)
    End If
    If m_table Is Nothing Then Exit Function
    
    m_table.AllowAutoFit = False

    AttachToTableWithIndex = True
End Function

Function AttachToTableWithIndexEx(nIndexL1 As Integer, nIndexL2 As Integer, nIndexL3 As Integer) As Boolean
    AttachToTableWithIndexEx = False
    If ThisDocument.Tables.Count < nIndexL1 Then Exit Function
    
    If nIndexL2 > 0 Then
        If ThisDocument.Tables(nIndexL1).Tables Is Nothing Then Exit Function
        If ThisDocument.Tables(nIndexL1).Tables.Count < nIndexL2 Then Exit Function
        If nIndexL3 > 0 Then
            If ThisDocument.Tables(nIndexL1).Tables(nIndexL2).Tables Is Nothing Then Exit Function
            If ThisDocument.Tables(nIndexL1).Tables(nIndexL2).Tables.Count < nIndexL3 Then Exit Function
            Set m_table = ThisDocument.Tables(nIndexL1).Tables(nIndexL2).Tables(nIndexL3)
        Else
            Set m_table = ThisDocument.Tables(nIndexL1).Tables(nIndexL2)
        End If
    Else
        Set m_table = ThisDocument.Tables(nIndexL1)
    End If
    If m_table Is Nothing Then Exit Function
    
    AttachToTableWithIndexEx = True
End Function

Function AttachToTableWithIndexEx4L(nIndexL1 As Integer, nIndexL2 As Integer, nIndexL3 As Integer, nIndexL4 As Integer) As Boolean
    AttachToTableWithIndexEx4L = False
    If ThisDocument.Tables.Count < nIndexL1 Then Exit Function
    
    If nIndexL2 > 0 Then
        If ThisDocument.Tables(nIndexL1).Tables Is Nothing Then Exit Function
        If ThisDocument.Tables(nIndexL1).Tables.Count < nIndexL2 Then Exit Function
        If nIndexL3 > 0 Then
            If ThisDocument.Tables(nIndexL1).Tables(nIndexL2).Tables Is Nothing Then Exit Function
            If ThisDocument.Tables(nIndexL1).Tables(nIndexL2).Tables.Count < nIndexL3 Then Exit Function
            If nIndexL4 > 0 Then
                If ThisDocument.Tables(nIndexL1).Tables(nIndexL2).Tables(nIndexL3).Tables Is Nothing Then Exit Function
                If ThisDocument.Tables(nIndexL1).Tables(nIndexL2).Tables(nIndexL3).Tables.Count < nIndexL4 Then Exit Function
                Set m_table = ThisDocument.Tables(nIndexL1).Tables(nIndexL2).Tables(nIndexL3).Tables(nIndexL4)
            Else
                Set m_table = ThisDocument.Tables(nIndexL1).Tables(nIndexL2).Tables(nIndexL3)
            End If
        Else
            Set m_table = ThisDocument.Tables(nIndexL1).Tables(nIndexL2)
        End If
    Else
        Set m_table = ThisDocument.Tables(nIndexL1)
    End If
    If m_table Is Nothing Then Exit Function
    
    AttachToTableWithIndexEx4L = True
End Function

Function GetTable() As Word.table
    Set GetTable = m_table
End Function
'nRow,nCol start with 0
Function SetData(nRow As Integer, nCol As Integer, ByRef strData As String) As Boolean
    On Error GoTo Err_Proc
    
    Dim i  As Integer
    SetData = False
    If m_table Is Nothing Then
        Exit Function
    End If
    
    If m_table.Rows.Count <= nRow Then
        For i = 0 To nRow - m_table.Rows.Count
            m_table.Rows.Add
        Next i
    End If

    If m_table.Columns.Count <= nCol Then
        For i = 0 To nCol - m_table.Columns.Count
            m_table.Columns.Add
        Next i
    End If
    
    Dim oCell As Cell
    Set oCell = m_table.Cell(nRow + 1, nCol + 1)
    oCell.Range.Text = strData

    SetData = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function
'nRow,nCol start with 0
Function AddCacheData(ByRef strData As String) As Boolean
    On Error GoTo Err_Proc
    
    AddCacheData = False
    If m_table Is Nothing Then
        Exit Function
    End If
        
    m_CacheData.AddItem strData

    AddCacheData = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function
Sub ClearCacheData()
    m_CacheData.Reset
End Sub

Function GetCacheData() As String
    ClearCacheData = m_CacheData
End Function

Function RefrushCacheDataToGrid() As String
    'm_table.Range = m_CacheData
    Dim oCell As Cell
    Dim strData As String
    Dim i As Integer
    Dim ifind As Integer
    Dim nTemp As Integer
    Dim imgPath As String
    
    i = 0
    Application.ScreenUpdating = False
    m_table.Select
    For Each oCell In Selection.Cells
        strData = m_CacheData.GetItem(i)
       
       ' for add morningstar image
        ifind = InStr(1, strData, "isMSR")
        If ifind > 0 Then
            nTemp = InStr(1, strData, "_")
            If nTemp > 0 Then
                strData = Right(strData, Len(strData) - nTemp)
                'imgPath = "C:\Program Files\Morningstar\Advisor Workstation Office\wwwroot\imgs\Grid_Stars_1.gif"
                ThisDocument.InlineShapes.AddPicture ReturnImagePath(strData), False, True, oCell.Range
            End If
        Else
            oCell.Range.Text = strData
            oCell.Range.Font.name = conDefFontName
            If isBold(i) Then
                oCell.Range.Bold = True
                If oCell.Range.Font.Size = conDefFontSize Then oCell.Range.Font.Size = conDefFontSize - 1 'oCell.Range.Font.Size - 1
    '        Else
    '            oCell.Range.Bold = False
            End If
        End If
        i = i + 1
    Next oCell
    'Application.GoBack
    Application.ScreenUpdating = True
End Function

Function FillCell(curRow As Integer, curCol As Integer, strData As String, Optional isbld As Boolean = False, Optional isItalic As Boolean = False) As Boolean
    Dim oCell As Cell
    Dim ifind As Integer
    Dim nTemp As Integer
    Dim imgPath As String
    
    Dim strTemp As String
    strTemp = strData
    
    Set oCell = m_table.Cell(curRow, curCol)

       ' for add morningstar image
        ifind = InStr(1, strData, "isMSR")
        If ifind > 0 Then
            nTemp = InStr(1, strData, "_")
            If nTemp > 0 Then
                strTemp = Right(strTemp, Len(strTemp) - nTemp)
                'imgPath = "C:\Program Files\Morningstar\Advisor Workstation Office\wwwroot\imgs\Grid_Stars_1.gif"
                ThisDocument.InlineShapes.AddPicture ReturnImagePath(strTemp), False, True, oCell.Range
            End If
        Else
            oCell.Range.Text = strTemp
            'oCell.Range.Font.Name = conDefFontName
            If isbld Or isItalic Then
                If isbld Then oCell.Range.Bold = isbld
                If isItalic Then oCell.Range.Italic = isItalic
                If oCell.Range.Font.Size = conDefFontSize Then oCell.Range.Font.Size = conDefFontSize - 1 'oCell.Range.Font.Size - 1
            End If
        End If

End Function

Function ReturnImagePath(strData As String) As String
  
    
        Select Case strData
            Case "1.00"
                ReturnImagePath = g_strWWWRoot + "\imgs\Grid_Stars_1.gif"
            Case "2.00"
                ReturnImagePath = g_strWWWRoot + "\imgs\Grid_Stars_2.gif"
            Case "3.00"
                ReturnImagePath = g_strWWWRoot + "\imgs\Grid_Stars_3.gif"
            Case "4.00"
                ReturnImagePath = g_strWWWRoot + "\imgs\Grid_Stars_4.gif"
            Case "5.00"
                ReturnImagePath = g_strWWWRoot + "\imgs\Grid_Stars_5.gif"
            Case Else
                ReturnImagePath = g_strWWWRoot + "\imgs\Grid_Stars.gif"
        End Select

End Function

Function VisibleGridLine(bVisible As Boolean) As Boolean
    On Error GoTo Err_Proc
    
    Dim i  As Integer
    Dim nMaxBorder  As Integer

    VisibleGridLine = False
    If m_table Is Nothing Then
        Exit Function
    End If
    
    nMaxBorder = 6
    If nMaxBorder > m_table.Borders.Count Then nMaxBorder = m_table.Borders.Count
    
    For i = 1 To nMaxBorder
        m_table.Borders(i).Visible = bVisible
    Next i
       
    VisibleGridLine = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function

Function DrawGridLine(bVisible As Boolean) As Boolean
    On Error GoTo Err_Proc
    
    Dim i  As Integer
    Dim c As Line

    DrawGridLine = False
    If m_table Is Nothing Then
        Exit Function
    End If
    
    If m_table.Rows.Count < 1 Then Exit Function
    
    For i = 1 To 1
        m_table.Cell(1, 1).Borders(i).Visible = bVisible
    Next i
              
    DrawGridLine = True
    
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function

Function DotGridLine(nRow As Integer, Optional nCol As Integer = -1) As Boolean
    On Error GoTo Err_Proc
    
    Dim i  As Integer
    
    DotGridLine = False
    If m_table Is Nothing Then
        Exit Function
    End If
    
    If m_table.Rows.Count < nRow Then Exit Function
    If nCol = -1 Then
        m_table.Rows(nRow).Borders(1).Visible = True
        m_table.Rows(nRow).Borders(1).LineStyle = wdLineStyleDashLargeGap
    Else
        m_table.Cell(nRow, nCol).Borders(1).Visible = True
        m_table.Cell(nRow, nCol).Borders(1).LineStyle = wdLineStyleDashLargeGap
    End If

    DotGridLine = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function
Function FullGridLine(nRow As Integer) As Boolean
    On Error GoTo Err_Proc
    
    Dim i  As Integer
    
    FullGridLine = False
    If m_table Is Nothing Then
        Exit Function
    End If
    
    If m_table.Rows.Count < nRow Then Exit Function
    m_table.Rows(nRow).Borders(1).Visible = True
    'm_table.Rows(nRow).Borders(1).LineStyle = wdLineStyleDashLargeGap

    FullGridLine = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function

'nWidth :pt,nCol start with 0
Function SetColWidth(nCol As Integer, nWidth As Integer) As Boolean
    On Error GoTo Err_Proc
    
    Dim i  As Integer
    Dim nMaxBorder  As Integer

    SetColWidth = False
    If m_table Is Nothing Then
        Exit Function
    End If
    
    If m_table.Columns.Count <= nCol Then
          Exit Function
    End If

    m_table.Columns(nCol + 1).Width = nWidth
    
    SetColWidth = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function

'nWidth :pt,nRow start with 0
Function SetRowHeight(nRow As Integer, nHeight As Integer) As Boolean
    On Error GoTo Err_Proc
    
    Dim i  As Integer
    Dim nMaxBorder  As Integer

    SetRowHeight = False
    If m_table Is Nothing Then
        Exit Function
    End If
      
    If m_table.Rows.Count <= nRow Then
          Exit Function
    End If

    m_table.Rows(nRow + 1).height = nHeight
    
    SetRowHeight = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function

'nAlign: 0:left 1:center,2:right
Function SetColTextAlign(nCol As Integer, nAlign As Integer) As Boolean
    On Error GoTo Err_Proc
    
    Dim i  As Integer
    Dim nMaxBorder  As Integer

    SetColTextAlign = False
    If m_table Is Nothing Then
        Exit Function
    End If
    
    If m_table.Columns.Count <= nCol Then
          Exit Function
    End If

    m_table.Columns(nCol + 1).Select
    If nAlign = 0 Then
        Selection.ParagraphFormat.Alignment = wdAlignParagraphLeft
    End If
    If nAlign = 1 Then
        Selection.ParagraphFormat.Alignment = wdAlignParagraphCenter
    End If
    If nAlign = 2 Then
        Selection.ParagraphFormat.Alignment = wdAlignParagraphRight
    End If
    
    SetColTextAlign = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function

Private Sub Class_Initialize()
    Set m_CacheData = New MStarVector
    Set m_mapBold = New MStarMap
    
End Sub

Private Sub Class_Terminate()
    Set m_CacheData = Nothing
    Set m_mapBold = Nothing
End Sub
Function SetRows(nRows As Integer) As Boolean
    Dim i  As Integer
    
    If nRows = m_table.Rows.Count Then
        Exit Function
    End If
    
    For i = 1 To m_table.Rows.Count - 1
        m_table.Rows.Item(1).Delete
    Next i
        
    For i = 1 To nRows - 1
        m_table.Rows.Add
    Next i
End Function

Function AddRows(nRows As Integer) As Boolean
    Dim i  As Integer
                
    For i = 1 To nRows
        m_table.Rows.Add
    Next i
End Function

Function SetCols(nCols As Integer) As Boolean
    Dim i  As Integer
    Dim col As Column
    
    If nCols = m_table.Columns.Count Then
        Exit Function
    End If
    For i = 1 To m_table.Columns.Count - 1
        m_table.Columns.Item(1).Delete
    Next i
        
    For i = 1 To nCols - 1
        Set col = m_table.Columns.Add
        col.Width = 500 / nCols
    Next i
End Function


Function InsertPicture(nRow As Integer, nCol As Integer, strPicPath As String) As Boolean
    On Error GoTo ErrProc
    m_table.Cell(nRow + 1, nCol + 1).Select
    Dim picConctrol As InlineShape
    Set picConctrol = Selection.InlineShapes.AddPicture(FileName:=g_strWWWRoot + strPicPath, LinkToFile:=True)
    Exit Function
ErrProc:
    Err.Clear
End Function

Public Sub AddBoldToCache(nIndex As Integer)
    m_mapBold.Add nIndex, CStr(nIndex)
End Sub
Public Sub ClearBoldCache()
    m_mapBold.Clear
End Sub
Public Function isBold(nIndex As Integer) As Boolean
    Dim key As String
    Dim value As Variant
    On Error GoTo ErrProc
    
    isBold = False
    key = CStr(nIndex)
    value = m_mapBold.Item(key)
    If IsEmpty(value) Then Exit Function
    
    isBold = True
    Exit Function
ErrProc:
    Err.Clear
End Function

Function InsertPictureInCurrentPos(strPicPath As String) As Boolean
    On Error GoTo ErrProc
    Dim picConctrol As InlineShape
    Set picConctrol = Selection.InlineShapes.AddPicture(FileName:=g_strWWWRoot + strPicPath, LinkToFile:=True)
    Exit Function
ErrProc:
    Err.Clear
End Function

Function FillCellWithPicture(nRow As Integer, nCol As Integer, strPicPath As String) As Boolean
    On Error GoTo ErrProc
    
    Dim picControl As InlineShape
    Set picControl = m_table.Cell(nRow, nCol).Range.InlineShapes.AddPicture(FileName:=g_strWWWRoot + strPicPath, LinkToFile:=True)
    
ErrProc:
    Err.Clear
End Function

Function DrawGridLineWithArray(strDraw As String) As Boolean
    On Error GoTo Err_Proc
    
    Dim i  As Integer
    Dim strLineType As String
    Dim strTemp As String
    Dim nTemp As Integer
    Dim strSec As String
    
    DrawGridLineWithArray = False
    If m_table Is Nothing Then
        Exit Function
    End If
    
    strTemp = strDraw
    nTemp = InStr(1, strTemp, ";")
    If nTemp > 0 Then
        strLineType = Left(strTemp, nTemp - 1)
        strTemp = Right(strTemp, Len(strTemp) - nTemp)
    End If
    
    Do While strTemp <> ""
        nTemp = InStr(1, strTemp, ",")
        If nTemp > 0 Then
            strSec = Left(strTemp, nTemp - 1)
            If strLineType = "dots" Then
                Call DotGridLine(Str2Int(strSec))
            Else
                Call FullGridLine(Str2Int(strSec))
            End If
            strTemp = Right(strTemp, Len(strTemp) - nTemp)
        Else
            nTemp = Str2Int(strTemp)
            If nTemp > 0 Then
                If strLineType = "dots" Then
                    Call DotGridLine(nTemp)
                Else
                    Call FullGridLine(nTemp)
                End If
            End If
            Exit Do
        End If
    Loop

    DrawGridLineWithArray = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function


Attribute VB_Name = "MStarMap"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private coll As Collection

Private Sub Class_Initialize()
    Set coll = New Collection
End Sub

Private Sub Class_Terminate()
    Set coll = Nothing
End Sub

Public Sub Add(value As Variant, key As Variant)
    On Error GoTo Err_Proc
    coll.Add value, key
    Exit Sub
Err_Proc:
    Err.Clear
End Sub

Public Function GetItem(index As Integer) As Variant
    On Error GoTo Err_Proc
    GetItem = coll.Item(index)
    Exit Function
Err_Proc:
    Err.Clear
End Function

Public Function Item(key As Variant) As Variant
    On Error GoTo Err_Proc
    Item = coll.Item(key)
    Exit Function
Err_Proc:
    Err.Clear
End Function


Public Sub Clear()
    Set coll = Nothing
    Set coll = New Collection
End Sub

Public Function Count() As Integer
    On Error GoTo Err_Proc
    Count = coll.Count
    Exit Function
Err_Proc:
    Err.Clear
    Count = 0
End Function
Public Sub Remove(key As Variant)
    On Error GoTo Err_Proc
    coll.Remove key
    Exit Sub
Err_Proc:
    Err.Clear
End Sub
Attribute VB_Name = "MStarVector"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private itemCount As Integer
Private itemBufferSize As Integer
Private itemBuffer() As Variant
 
Private Sub Class_Initialize()
    itemCount = 0
    itemBufferSize = 100
    NewDimensions
End Sub
 
Public Sub Reset()
    itemCount = 0
    itemBufferSize = 100
    NewDimensions
End Sub

Private Sub NewDimensions()
    ReDim Preserve itemBuffer(itemBufferSize) As Variant
End Sub
 
Private Sub CheckDimensions()
    If itemCount > itemBufferSize - 2 Then
        itemBufferSize = itemBufferSize * 2
        NewDimensions
    End If
End Sub
 
Public Sub ShrinkDimensions()
    itemCount = itemBufferSize + 10
    NewDimensions
End Sub
 
Public Function GetSize() As Integer
    GetSize = itemCount
End Function
 
Public Sub AddItem(Item As Variant)
    CheckDimensions
    itemBuffer(itemCount) = Item
    itemCount = itemCount + 1
End Sub
 
Public Function GetItem(index As Integer) As Variant
    If index < 0 Or index >= itemCount Then
        GetItem = ""
        Exit Function
    End If
    GetItem = itemBuffer(index)
End Function
 
Public Function PopItem() As Variant
    PopItem = itemBuffer(itemCount - 1)
    DeleteItem itemCount - 1
End Function
 
Public Function GetNextQueueItem() As Variant
    GetNextQueueItem = itemBuffer(0)
    DeleteItem 0
End Function
 
Public Function ContainsItem(Item As Variant) As Boolean
    Dim i As Integer
    ContainsItem = False
 
    For i = 0 To itemCount - 1
        If itemBuffer(i) = Item Then ContainsItem = True
    Next i
End Function
 
Public Sub InsertItem(index As Integer, Item As Variant)
    Dim i As Integer
 
    CheckDimensions
    For i = itemCount - 1 To index Step -1
        itemBuffer(i + 1) = itemBuffer(i)
    Next i
    itemBuffer(index) = Item
    itemCount = itemCount + 1
End Sub
 
Public Sub DeleteItem(index As Integer)
    Dim i As Integer
 
    For i = index + 1 To itemCount - 1
        itemBuffer(i - 1) = itemBuffer(i)
    Next i
    itemCount = itemCount - 1
End Sub
 
Public Function IsEmpty() As Boolean
    IsEmpty = itemCount <= 0
End Function

Attribute VB_Name = "MStarXmlGrid"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private i_grid As MStarGrid
Private i_strXPath As String
Private i_nodeRoot As Office.CustomXMLNode
Private i_nodeRootAcc As MSXML2.IXMLDOMNode
Private i_nTableIndexL1 As Integer
Private i_nTableIndexL2 As Integer
Private i_nTableIndexL3 As Integer
Private i_nTableIndexL4 As Integer



Private Sub Class_Initialize()
    Set i_grid = New MStarGrid
    i_strXPath = ""
    
    i_nTableIndexL1 = 0
    i_nTableIndexL2 = 0
    i_nTableIndexL3 = 0
    i_nTableIndexL4 = 0
End Sub

Private Sub Class_Terminate()
    Set i_grid = Nothing
End Sub

Function AttachToTable(ByRef table As Word.table) As Boolean
    AttachToTable = i_grid.AttachToTable(table)
End Function
'nIndex start with 1
Function AttachToTableWithIndex(nIndexL1 As Integer, nIndexL2 As Integer) As Boolean
    i_nTableIndexL1 = nIndexL1
    i_nTableIndexL2 = nIndexL2
    
    AttachToTableWithIndex = i_grid.AttachToTableWithIndex(nIndexL1, nIndexL2)
End Function
'nIndex start with 1
Function AttachToTableWithIndexEx(nIndexL1 As Integer, nIndexL2 As Integer, nIndexL3 As Integer) As Boolean
    i_nTableIndexL1 = nIndexL1
    i_nTableIndexL2 = nIndexL2
    i_nTableIndexL3 = nIndexL3
    
    AttachToTableWithIndexEx = i_grid.AttachToTableWithIndexEx(nIndexL1, nIndexL2, nIndexL3)
End Function

'nIndex start with 1
Function AttachToTableWithIndexEx4L(nIndexL1 As Integer, nIndexL2 As Integer, nIndexL3 As Integer, nIndexL4 As Integer) As Boolean
    i_nTableIndexL1 = nIndexL1
    i_nTableIndexL2 = nIndexL2
    i_nTableIndexL3 = nIndexL3
    i_nTableIndexL4 = nIndexL4
  
    AttachToTableWithIndexEx4L = i_grid.AttachToTableWithIndexEx4L(nIndexL1, nIndexL2, nIndexL3, nIndexL4)
End Function

Sub SetDataXPath(strXPath As String, Optional bDelLastS As Boolean = False)
    i_strXPath = strXPath
    If g_CustomXMLPart Is Nothing Then Exit Sub
    Set i_nodeRoot = g_CustomXMLPart.SelectSingleNode(i_strXPath)
    If g_PreProcess = True Then
        Dim strTemp As String
        
        strTemp = Replace(i_strXPath, "/IPS/", "/")
        If InStr(1, i_strXPath, "/section") <= 0 Then
            strTemp = strTemp + "/section[@index='0']"
        End If
        Set i_nodeRootAcc = g_XmlDocAcc.SelectSingleNode(strTemp)
        If bDelLastS Then
            strTemp = i_nodeRootAcc.Text
            Dim nPos As Long
            nPos = InStrRev(strTemp, Chr(10))
            i_nodeRootAcc.Text = Left(strTemp, nPos - 1)
        End If
    End If
End Sub
Function FillGrid(Optional parseType As String = "", Optional TitleKey As String = "", Optional rangeNode As Office.CustomXMLNode) As Boolean
    On Error GoTo Err_Proc
    Dim nodeList As Office.CustomXMLNodes
    Dim node As Office.CustomXMLNode
    Dim nodeTag As Office.CustomXMLNode
  
    Dim i  As Integer
    FillGrid = False
    If i_grid Is Nothing Then
        Exit Function
    End If
        
    If i_nodeRoot Is Nothing Then
        Exit Function
    End If
        
    If (TitleKey = "6_2") Or (TitleKey = "6_5") Or (TitleKey = "6_6") Or (TitleKey = "6_7") Or (TitleKey = "2_8") Or (TitleKey = "7_3") Or (TitleKey = "7_6") Or (TitleKey = "8_11") Or (TitleKey = "7_1") Or (TitleKey = "7_4") Or (TitleKey = "1_7") Then
        FillGrid = FillGrid_ParserCommon_Ex(TitleKey)
        Exit Function
    End If
        
    If parseType = "" Then
        Set nodeTag = i_nodeRoot.SelectSingleNode("section/columnwidth")
        If Not nodeTag Is Nothing Then
            Set nodeList = i_nodeRoot.SelectNodes("section")
            If nodeList.Count > 0 Then
                FillGrid = FillGrid_ParserCommon_MultGrid()
                Exit Function
            End If
        End If
    Else
        If parseType = conParserType_Common Then
            'Set node = i_nodeRoot.SelectSingleNode("section")
            'If Not node Is Nothing Then
                FillGrid = FillGrid_ParserCommon(i_nodeRoot)
                Exit Function
            'End If
        End If
    
        'test----
        If g_adjustLayout = True And g_debug = True Then
            FillGrid = True
            Exit Function
        End If
        '---------
    
        If parseType = conParserType_CurTarCompare Then
            Set nodeTag = i_nodeRoot.SelectSingleNode("usermix")
            If Not nodeTag Is Nothing Then
                'FillGrid = FillGrid_ParserCurTarCompare(i_nodeRoot)
                FillGrid = FillGrid_ParserCurTarCompare(i_nodeRoot, rangeNode)
                Exit Function
            End If
        End If
        
        If parseType = conParserType_AllocCompare Then
            Set nodeTag = i_nodeRoot.SelectSingleNode("usermix")
            If Not nodeTag Is Nothing Then
                FillGrid = FillGrid_ParserAllocCompare(i_nodeRoot)
                Exit Function
            End If
        End If
        
        If parseType = conParserType_Cover Then
            If Not i_nodeRoot Is Nothing Then
                FillGrid = FillGrid_ParserCover(i_nodeRoot)
                Exit Function
            End If
        End If

        If parseType = conParserType_CoverDir Then
            If Not i_nodeRoot Is Nothing Then
                FillGrid = FillGrid_ParserCoverDir(i_nodeRoot)
                Exit Function
            End If
        End If
        
        
        If parseType = conParserType_SectorAnalysis Then
            If Not i_nodeRoot Is Nothing Then
                FillGrid = FillGrid_ParserSectorAnalysis(i_nodeRoot)
                Exit Function
            End If
        End If
                
        If parseType = conParserType_Disclosure Then
            If Not i_nodeRoot Is Nothing Then
                FillGrid = FillGrid_ParserDisclosure(i_nodeRoot)
                Exit Function
            End If
        End If
        
    End If
        
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function

Function FillGrid_ParserCommon(nodeRoot As Office.CustomXMLNode) As Boolean
     On Error GoTo Err_Proc
    Dim nodeList As Office.CustomXMLNodes
    Dim node As Office.CustomXMLNode
    Dim nodeTag As Office.CustomXMLNode
    Dim strTemp As String
    Dim nIndex As Integer
    Dim i  As Integer
    Dim j  As Integer
    Dim k  As Integer
    Dim nColIndex  As Integer
    Dim nTemp  As Integer
    
    Dim nodeListCol As Office.CustomXMLNodes
    Dim nodeCol As Office.CustomXMLNode
    Dim nCols As Integer
    Dim colAttr As MStarMap
    Dim strKey As String
    Dim strColNbr As String

    Dim strCell As String
    Dim nFind As Integer
    Dim nFindB As Integer
    Dim nFindE As Integer
    Dim strDot As String
    Dim nCurCol As Integer
    Dim nCurRow As Integer
    Dim bFormatKMBT As Boolean
    Dim bLangCHS As Boolean
    
    
    'test----
    If g_adjustLayout = True And g_debug = True Then
        FillGrid_ParserCommon = True
        i_grid.VisibleGridLine g_ShowGridLine
        Exit Function
    End If
    '---------
    
    FillGrid_ParserCommon = False
    If i_grid Is Nothing Then
        Exit Function
    End If
    
    If nodeRoot Is Nothing Then
         Exit Function
    End If
    
    bFormatKMBT = False
    strTemp = GetXmlAttrValue("title", nodeRoot)
    If (strTemp = "Wealth Table") Or (strTemp = "Wealth Percentiles") Or (strTemp = "Return Percentiles") Then
        If (strTemp = "Wealth Table") Or (strTemp = "Wealth Percentiles") Then
            bFormatKMBT = True
        End If
        i_grid.VisibleGridLine False
    End If
    
    If g_strPermission = "CHS" Then
        bLangCHS = True
    Else
        bLangCHS = False
    End If
    
    Set nodeTag = nodeRoot.SelectSingleNode("columnwidth")
    If nodeTag Is Nothing Then
         Exit Function
    End If
    
    Application.ScreenUpdating = False
    If g_testGrid = True Then i_grid.VisibleGridLine g_ShowGridLine
    'drawline
    strTemp = GetXmlAttrValue("drawline", nodeTag)
    If g_ShowGridLine = False Then
        If strTemp = "1" Then
            'i_grid.DrawGridLine False
            'dot line
            strTemp = GetXmlAttrValue("linestyle", nodeTag)
            If strTemp = "dots" Then
                i_grid.DotGridLine 1
            Else
                i_grid.FullGridLine 1
            End If
        End If
    End If

    Dim colHiden(conTableMaxCols) As Integer
    Dim nHidenCol As Integer
    ' get and store hidden columns
    strTemp = GetXmlAttrValue("hide", nodeTag)
    If strTemp <> "" Then
        strTemp = Right(strTemp, Len(strTemp) - 1)
        Do While strTemp <> ""
            nTemp = InStr(1, strTemp, ",")
            If nTemp > 0 Then
                nHidenCol = Str2Int(Left(strTemp, nTemp))
            Else
                nHidenCol = Str2Int(strTemp)
            End If
            colHiden(nHidenCol) = 1
            If nTemp <= 0 Then
                Exit Do
            End If
            strTemp = Right(strTemp, Len(strTemp) - nTemp)
        Loop
    End If
    
    
    'init column
    Set nodeList = nodeTag.SelectNodes("colwidth")
    If nodeList Is Nothing Then
        'Application.GoBack
        Application.ScreenUpdating = True

         Exit Function
    End If
    
    Dim strWidthChangable As String
    strWidthChangable = GetXmlAttrValue("widthchangable", nodeTag)
    
    Dim nTableDataSize As Integer
    nTableDataSize = ThisDocument.Styles(g_arrStyleNames(conTableDataIdx)).Font.Size
    
    Dim nWidthToAdd As Integer
    nWidthToAdd = 0
    If (strWidthChangable = "1" And nTableDataSize > 10) Then
        nWidthToAdd = nTableDataSize * 4
    End If
    
    nCols = nodeList.Count
    If nCols = 0 Then Exit Function
'    strTemp = GetXmlAttrValue("cols", nodeTag)
'    If strTemp <> "" Then
'        nCols = Str2Int(strTemp)
'    End If
'
    Dim decArr(50) As Integer
    Set colAttr = New MStarMap
    i_grid.SetCols nCols
    Dim colWidth(conTableMaxCols) As Integer
    Dim colAlign(conTableMaxCols) As Integer
    For i = 1 To nodeList.Count
        Set node = nodeList.Item(i)
        'TextAlign
'        strTemp = GetXmlAttrValue("textAlign", node)
'        If strTemp = "right" Then
'            i_grid.SetColTextAlign i, 2
'        End If
'        If strTemp = "left" Then
'            i_grid.SetColTextAlign i, 0
'        End If
'        If strTemp = "center" Then
'            i_grid.SetColTextAlign i, 1
'        End If
        strTemp = GetXmlAttrValue("textAlignLast", node)
        If strTemp = "end" Then
            'i_grid.SetColTextAlign i, 2
            colAlign(i - 1) = 2
        Else
'            If strTemp = "start" Then
'               'i_grid.SetColTextAlign i, 0
'                colAlign(i - 1) = 0
'            Else
'                colAlign(i - 1) = -1
'            End If
            colAlign(i - 1) = 0
        End If

        strTemp = GetXmlAttrValue("sec", node)
        nIndex = Str2Int(strTemp)
        'column width
        strTemp = node.Text
        If Right(strTemp, 2) = "pt" Then
            strTemp = Left(strTemp, Len(strTemp) - 2)
        End If
        
'        If colHiden(nIndex) <> 1 Then
'            colWidth(nIndex) = Str2Int(strTemp)
'        Else
'            colWidth(nIndex) = 1
'        End If

        If (colHiden(nIndex) = 1) Then
            colWidth(nIndex - 1) = 0
        Else
            colWidth(nIndex - 1) = Str2Int(strTemp) + nWidthToAdd
        End If
        
        
        
        'i_grid.SetColWidth nIndex, Str2Int(strTemp)
        'col decimals
        strTemp = GetXmlAttrValue("showcommas", node)
        If strTemp = "4" Then
            decArr(i) = Str2Int(strTemp)
        Else
            decArr(i) = conDefDecimals
        End If

        strTemp = GetXmlAttrValue("isText", node)
        If strTemp = "1" Then
            colAttr.Add "Text", CStr(i)
        Else
        
            strTemp = GetXmlAttrValue("isMSR", node)
            If strTemp = "1" Then
                colAttr.Add "isMSR", CStr(i)
            Else
                strTemp = GetXmlAttrValue("isYear", node)
                If strTemp = "1" Then
                    colAttr.Add "Year", CStr(i)
                Else
                    colAttr.Add "None", CStr(i)
                End If
            End If
        End If
        
    Next i

    Dim col As Word.Column
    i = 0
    For Each col In i_grid.GetTable().Columns
        If Str2Int(col.Width) <> colWidth(i) And colWidth(i) <> 0 Then
            col.Width = colWidth(i)
        End If
        
        'If g_debug = False Then
            If colAlign(i) <> -1 Then
                col.Select
                If colAlign(i) = 0 Then
                    If Selection.ParagraphFormat.Alignment <> wdAlignParagraphLeft Then
                        Selection.ParagraphFormat.Alignment = wdAlignParagraphLeft
                    End If
                End If
                If colAlign(i) = 1 Then
                    If Selection.ParagraphFormat.Alignment <> wdAlignParagraphCenter Then
                        Selection.ParagraphFormat.Alignment = wdAlignParagraphCenter
                    End If
                End If
                If colAlign(i) = 2 Then
                    If Selection.ParagraphFormat.Alignment <> wdAlignParagraphRight Then
                        Selection.ParagraphFormat.Alignment = wdAlignParagraphRight
                    End If
                End If
            End If
        'End If
        i = i + 1
    Next col

    
    'fill grid
    Set nodeList = nodeRoot.SelectNodes("row")
    If nodeList Is Nothing Then
         'Application.GoBack
         Application.ScreenUpdating = True
         Exit Function
    End If
    
    i_grid.SetRows nodeList.Count
    
    'i_grid.ClearCacheData
    'i_grid.ClearBoldCache
    
    i_grid.SetTableTextStyle (conTableDataIdx)
    
    If False Then
     If i_nodeRootAcc Is Nothing Then Exit Function
        
        strTemp = Right(i_nodeRootAcc.Text, Len(i_nodeRootAcc.Text) - 1)
        i = 0
        Dim isbld As Boolean
        Do While strTemp <> ""
            nTemp = InStr(1, strTemp, Chr(10))
            If nTemp > 0 Then
                strCell = Left(strTemp, nTemp - 1)
            Else
                If strTemp = "" Then
                    Exit Do
                Else
                    strCell = strTemp
                End If
            End If
            
            isbld = False
            
            nCurRow = Int(i / nCols) + 1
            nCurCol = i Mod nCols
            nCurCol = nCurCol + 1
            
            nFind = InStr(1, strCell, "[@linestyle@=")
            If nFind > 0 Then
                nFindB = InStr(1, strCell, "=")
                nFindB = nFindB + 1
                nFindE = InStr(1, strCell, "]")
                
                strDot = Mid(strCell, nFindB, nFindE - nFindB)
                Call i_grid.DotGridLine(Str2Int(strDot))
                
                strCell = Right(strCell, Len(strCell) - nFindE)
            End If
            
            nFind = InStr(1, strCell, "[@drawline@=")
            If nFind > 0 Then
                nFindB = InStr(1, strCell, "=")
                nFindB = nFindB + 1
                nFindE = InStr(1, strCell, "]")
                
                strDot = Mid(strCell, nFindB, nFindE - nFindB)
                strCell = Right(strCell, Len(strCell) - nFindE)
                
                Call i_grid.DrawGridLineWithArray(strDot)
            End If
            
            nFind = InStr(1, strCell, "[@bold@]")
            If nFind > 0 Then
                isbld = True
                'Call i_grid.AddBoldToCache(i)
                strCell = Replace(strCell, "[@bold@]", "")
            End If
            
            nFind = InStr(1, strCell, "[@columnNumber@]")
            If nFind > 0 Then
                i_grid.DotGridLine nCurRow + 1, nCurCol - 1
                i_grid.DotGridLine nCurRow + 1, nCurCol

                strCell = Replace(strCell, "[@columnNumber@]", "")
            End If
            
            strKey = colAttr.Item(CStr(nCurCol))
            
            If colHiden(nCurCol) = 1 Then
                'i_grid.FillCell nCurRow, nCurCol, " ", isbld
                'i_grid.AddCacheData " "
            ElseIf strKey = "Text" Or strKey = "Year" Then
                i_grid.FillCell nCurRow, nCurCol, strCell, isbld
                'i_grid.AddCacheData strCell
                'for Performance of Proposed Securities. Should be changed in furture
            ElseIf strKey = "isMSR" And (i <> 2 And i <> 13) Then
                    i_grid.FillCell nCurRow, nCurCol, "isMSR_" + strCell, isbld
                    'i_grid.AddCacheData "isMSR_" + strCell
                Else
                    i_grid.FillCell nCurRow, nCurCol, FormatNumber(strCell, decArr(nCurCol), bFormatKMBT, bLangCHS), isbld
                    'i_grid.AddCacheData FormatNumber(strCell, conDefDecimals, bFormatKMBT, bLangCHS)
            End If
                
            If nTemp > 0 Then
                strTemp = Right(strTemp, Len(strTemp) - nTemp)
                i = i + 1
            Else
                Exit Do
            End If
        Loop
        'i_nodeRootAcc
    Else
        i = 0
        For i = 1 To nodeList.Count
            Set node = nodeList.Item(i)
         
            strTemp = GetXmlAttrValue("dashline", node)
            Dim isHasDashLine As Boolean
            isHasDashLine = False
            If strTemp = "1" Then isHasDashLine = True
            
            strTemp = GetXmlAttrValue("linestyle", node)
            Dim isDotLine As Boolean
            isDotLine = False
            If strTemp = "dots" Then isDotLine = True
            
            Dim isSolidLine As Boolean
            isSolidLine = False
            If (strTemp = "solids") Then
                isSolidLine = True
            End If
            
            If isHasDashLine Or isDotLine Then
                i_grid.DotGridLine i
            ElseIf (isSolidLine) Then
                i_grid.FullGridLine i
            End If
         
            Set nodeListCol = node.SelectNodes("col")
            nColIndex = 0
            
            Dim isBold As Boolean
            Dim isItalic As Boolean
            For j = 1 To nCols
                isBold = False
                isItalic = False
                If j <= nodeListCol.Count Then
                    Set nodeCol = nodeListCol.Item(j)
                    'proc bold
                    strTemp = GetXmlAttrValue("fontWeight", nodeCol)
                    If strTemp = "bold" Then
                        isBold = True
                    Else
                        strTemp = GetXmlAttrValue("fontWeight", node)
                        If (strTemp = "bold") Then
                            isBold = True
                        End If
                    End If
                    
                    strTemp = GetXmlAttrValue("fontStyle", node)
                    If strTemp = "italic" Then
                        isItalic = True
                    End If
        
                    strTemp = nodeCol.Text
                    strColNbr = GetXmlAttrValue("columnNumber", nodeCol)
                
                    strKey = colAttr.Item(CStr(j))
                    
                    If colHiden(nColIndex + 1) = 1 Then
                        'i_grid.FillCell i + 1, j, " ", isBold
                    ElseIf strKey = "Text" Or strKey = "Year" Then
                        i_grid.FillCell i, j, strTemp, isBold, isItalic
                    Else
                        i_grid.FillCell i, j, FormatNumber(strTemp, decArr(j), bFormatKMBT, bLangCHS), isBold, isItalic
                    End If
                    nColIndex = nColIndex + 1
                    
                    'process columnNumber
                    If strColNbr <> "" Then
                        i_grid.DotGridLine nCurRow, nColIndex
                        i_grid.DotGridLine nCurRow, nColIndex + 1
                        For k = 1 To Str2Int(strColNbr) - 1
                            nColIndex = nColIndex + 1
                            'i_grid.FillCell i + 1, j, " ", isBold
                        Next k
                    End If
                Else
                    If nColIndex < nCols Then
                        nColIndex = nColIndex + 1
                        'i_grid.FillCell i + 1, j, " ", isBold
                    End If
                End If
            Next j
            If isHasDashLine Then
                i_grid.DotGridLine i + 1
            End If
        Next i
    End If
        
    'i_grid.RefrushCacheDataToGrid
    'Application.GoBack
    Application.ScreenUpdating = True

    Set colAttr = Nothing
    FillGrid_ParserCommon = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function

Function FillGrid_ParserCommon_Ex(Optional TitleKey As String = "") As Boolean
     On Error GoTo Err_Proc
    
    Dim bFormatKMBT As Boolean
    Dim bLangCHS As Boolean
    
    FillGrid_ParserCommon_Ex = False
    If i_grid Is Nothing Then
        Exit Function
    End If
    
    If i_nodeRoot Is Nothing Then
         Exit Function
    End If
    
    bFormatKMBT = False
    ' Wealth Table
    If (TitleKey = "6_2") Or (TitleKey = "6_5") Or (TitleKey = "6_6") Or (TitleKey = "6_7") Or (TitleKey = "2_8") Then
        bFormatKMBT = True
    End If
    
    If g_strPermission = "CHS" Then
        bLangCHS = True
    Else
        bLangCHS = False
    End If
    
    ' Process Each Section
    Dim sectionList As Office.CustomXMLNodes
    Set sectionList = i_nodeRoot.SelectNodes("section")
    If sectionList Is Nothing Then
         Exit Function
    End If
    
    i_grid.SetTableTextStyle (conTableDataIdx)
    
    Dim secNode As Office.CustomXMLNode
    Dim strIndex As String
    Dim strSecXPath As String
    Dim nodeRoot As Office.CustomXMLNode
    Dim nodeRootAcc As MSXML2.IXMLDOMNode
    Dim nodeList As Office.CustomXMLNodes
    Dim node As Office.CustomXMLNode
    Dim strTemp As String
    Dim p  As Integer
    Dim nStartRow As Integer
    nStartRow = 2
 
    Dim colHiden(conTableMaxCols) As Integer
    Dim nHidenCol As Integer
    Dim colAttr As MStarMap
        
    For p = 1 To sectionList.Count
        Set secNode = sectionList.Item(p)
        
        If GetXmlAttrValue("isshow", secNode) <> "0" Then
            strIndex = GetXmlAttrValue("index", secNode)
            strSecXPath = i_strXPath + "/section[@index='" + strIndex + "']"
            
            If g_CustomXMLPart Is Nothing Then Exit Function
            Set nodeRoot = g_CustomXMLPart.SelectSingleNode(strSecXPath)
            If g_PreProcess = True Then
                Dim strTemp1 As String
                
                strTemp1 = Replace(strSecXPath, "/IPS/", "/")
                If InStr(1, strSecXPath, "/section") <= 0 Then
                    strTemp1 = strTemp1 + "/section[@index='0']"
                End If
                Set nodeRootAcc = g_XmlDocAcc.SelectSingleNode(strTemp1)
            End If
            
            
            Dim nIndex As Integer
            Dim i As Integer
            Dim j  As Integer
            Dim k  As Integer
            Dim nColIndex  As Integer
            Dim nTemp  As Integer
            
            Dim nodeListCol As Office.CustomXMLNodes
            Dim nodeCol As Office.CustomXMLNode
            Dim nCols As Integer
            Dim strKey As String
            Dim strColNbr As String
        
            Dim strCell As String
            Dim nFind As Integer
            Dim nFindB As Integer
            Dim nFindE As Integer
            Dim strDot As String
            Dim nCurCol As Integer
            Dim nCurRow As Integer
            
            Dim nodeTag As Office.CustomXMLNode
            Set nodeTag = nodeRoot.SelectSingleNode("columnwidth")
            If nodeTag Is Nothing Then
                 Exit Function
            End If
            
            Application.ScreenUpdating = False
            If g_testGrid = True Then i_grid.VisibleGridLine g_ShowGridLine
                    
            If p = 1 Then
                ' get and store hidden columns
                strTemp = GetXmlAttrValue("hide", nodeTag)
                If strTemp <> "" Then
                    strTemp = Right(strTemp, Len(strTemp) - 1)
                    Do While strTemp <> ""
                        nTemp = InStr(1, strTemp, ",")
                        If nTemp > 0 Then
                            nHidenCol = Str2Int(Left(strTemp, nTemp))
                        Else
                            nHidenCol = Str2Int(strTemp)
                        End If
                        colHiden(nHidenCol) = 1
                        If nTemp <= 0 Then
                            Exit Do
                        End If
                        strTemp = Right(strTemp, Len(strTemp) - nTemp)
                    Loop
                End If
                
                'init column
                Set nodeList = nodeTag.SelectNodes("colwidth")
                If nodeList Is Nothing Then
                    'Application.GoBack
                    Application.ScreenUpdating = True
            
                     Exit Function
                End If
                
                Dim strWidthChangable As String
                strWidthChangable = GetXmlAttrValue("widthchangable", nodeTag)
                
                Dim nTableDataSize As Integer
                nTableDataSize = ThisDocument.Styles(g_arrStyleNames(conTableDataIdx)).Font.Size
                
                Dim nWidthToAdd As Integer
                nWidthToAdd = 0
                If (strWidthChangable = "1" And nTableDataSize > 10) Then
                    nWidthToAdd = nTableDataSize * 4
                End If
    
                nCols = nodeList.Count
                If nCols = 0 Then Exit Function
                Set colAttr = New MStarMap
                i_grid.SetCols nCols
                Dim colWidth(conTableMaxCols) As Integer
                Dim colAlign(conTableMaxCols) As Integer
                For i = 1 To nodeList.Count
                    Set node = nodeList.Item(i)
                    strTemp = GetXmlAttrValue("textAlignLast", node)
                    If strTemp = "end" Then
                        colAlign(i - 1) = 2
                    Else
                        colAlign(i - 1) = 0
                    End If
            
                    strTemp = GetXmlAttrValue("sec", node)
                    nIndex = Str2Int(strTemp)
                    'column width
                    strTemp = node.Text
                    If Right(strTemp, 2) = "pt" Then
                        strTemp = Left(strTemp, Len(strTemp) - 2)
                    End If
                    
                    If (colHiden(nIndex) = 1) Then
                        colWidth(nIndex - 1) = 0
                    Else
                         colWidth(nIndex - 1) = Str2Int(strTemp) + nWidthToAdd
                    End If
                                       
                    strTemp = GetXmlAttrValue("isText", node)
                    If strTemp = "1" Then
                        colAttr.Add "Text", CStr(i)
                    Else
                    
                        strTemp = GetXmlAttrValue("isMSR", node)
                        If strTemp = "1" Then
                            colAttr.Add "isMSR", CStr(i)
                        Else
                            strTemp = GetXmlAttrValue("isYear", node)
                            If strTemp = "1" Then
                                colAttr.Add "Year", CStr(i)
                            Else
                                colAttr.Add "None", CStr(i)
                            End If
                        End If
                    End If
                    
                Next i
            
                Dim col As Word.Column
                i = 0
                For Each col In i_grid.GetTable().Columns
                    If Str2Int(col.Width) <> colWidth(i) And colWidth(i) <> 0 Then
                        col.Width = colWidth(i)
                    End If
                    
                    'If g_debug = False Then
                        If colAlign(i) <> -1 Then
                            col.Select
                            If colAlign(i) = 0 Then
                                If Selection.ParagraphFormat.Alignment <> wdAlignParagraphLeft Then
                                    Selection.ParagraphFormat.Alignment = wdAlignParagraphLeft
                                End If
                            End If
                            If colAlign(i) = 1 Then
                                If Selection.ParagraphFormat.Alignment <> wdAlignParagraphCenter Then
                                    Selection.ParagraphFormat.Alignment = wdAlignParagraphCenter
                                End If
                            End If
                            If colAlign(i) = 2 Then
                                If Selection.ParagraphFormat.Alignment <> wdAlignParagraphRight Then
                                    Selection.ParagraphFormat.Alignment = wdAlignParagraphRight
                                End If
                            End If
                        End If
                    'End If
                    i = i + 1
                Next col
                
                i_grid.MergeRow (1)
                i_grid.MergeRow (2)
                i_grid.SetRowHeight 1, 0
            End If
            
            'fill grid
            Set nodeList = nodeRoot.SelectNodes("row")
            If nodeList Is Nothing Then
                 'Application.GoBack
                 Application.ScreenUpdating = True
                 Exit Function
            End If
            
            Dim nSectionRows As Integer
            nSectionRows = nodeList.Count
            i_grid.AddRows nSectionRows
            
            'drawline
            strTemp = GetXmlAttrValue("drawline", nodeTag)
            If g_ShowGridLine = False Then
                If strTemp = "1" Then
                    'i_grid.DrawGridLine False
                    'dot line
                    strTemp = GetXmlAttrValue("linestyle", nodeTag)
                    If strTemp = "dots" Then
                        i_grid.DotGridLine nStartRow + 1
                    Else
                        i_grid.FullGridLine nStartRow + 1
                    End If
                End If
            End If
            
            If p > 1 Then
                i_grid.DotGridLine nStartRow + 1
            End If
            
            If g_PreProcess = True Then
             If nodeRootAcc Is Nothing Then Exit Function
                
                strTemp = Right(nodeRootAcc.Text, Len(nodeRootAcc.Text) - 1)
                i = 0
                Dim isbld As Boolean
                Do While strTemp <> ""
                    nTemp = InStr(1, strTemp, Chr(10))
                    If nTemp > 0 Then
                        strCell = Left(strTemp, nTemp - 1)
                    Else
                        If strTemp = "" Then
                            Exit Do
                        Else
                            strCell = strTemp
                        End If
                    End If
                    
                    isbld = False
                    
                    nCurRow = Int(i / nCols) + nStartRow + 1
                    nCurCol = i Mod nCols
                    nCurCol = nCurCol + 1
                    
                    nFind = InStr(1, strCell, "[@linestyle@=")
                    If nFind > 0 Then
                        nFindB = InStr(1, strCell, "=")
                        nFindB = nFindB + 1
                        nFindE = InStr(1, strCell, "]")
                        
                        strDot = Mid(strCell, nFindB, nFindE - nFindB)
                        'Call i_grid.DotGridLine(Str2Int(strDot))
                        
                        strCell = Right(strCell, Len(strCell) - nFindE)
                    End If
                    
                    nFind = InStr(1, strCell, "[@drawline@=")
                    If nFind > 0 Then
                        nFindB = InStr(1, strCell, "=")
                        nFindB = nFindB + 1
                        nFindE = InStr(1, strCell, "]")
                        
                        strDot = Mid(strCell, nFindB, nFindE - nFindB)
                        strCell = Right(strCell, Len(strCell) - nFindE)
                        
                        'Call i_grid.DrawGridLineWithArray(strDot)
                    End If
                    
                    nFind = InStr(1, strCell, "[@bold@]")
                    If nFind > 0 Then
                        isbld = True
                        'Call i_grid.AddBoldToCache(i)
                        strCell = Replace(strCell, "[@bold@]", "")
                    End If
                    
                    nFind = InStr(1, strCell, "[@columnNumber@]")
                    If nFind > 0 Then
                        i_grid.DotGridLine nCurRow + 1, nCurCol - 1
                        i_grid.DotGridLine nCurRow + 1, nCurCol
        
                        strCell = Replace(strCell, "[@columnNumber@]", "")
                    End If
                    
                    strKey = colAttr.Item(CStr(nCurCol))
                    
                    If colHiden(nCurCol) = 1 Then
                    ElseIf strKey = "Text" Or strKey = "Year" Then
                        i_grid.FillCell nCurRow, nCurCol, strCell, isbld
                    ElseIf strKey = "isMSR" And (i <> 2 And i <> 13) Then
                            i_grid.FillCell nCurRow, nCurCol, "isMSR_" + strCell, isbld
                        Else
                            i_grid.FillCell nCurRow, nCurCol, FormatNumber(strCell, conDefDecimals, bFormatKMBT, bLangCHS), isbld
                    End If
                        
                    If nTemp > 0 Then
                        strTemp = Right(strTemp, Len(strTemp) - nTemp)
                        i = i + 1
                    Else
                        Exit Do
                    End If
                Loop
                nStartRow = nStartRow + nSectionRows
                'i_nodeRootAcc
            Else
                i = 0
                For i = 1 To nodeList.Count
                    Set node = nodeList.Item(i)
                 
                    strTemp = GetXmlAttrValue("dashline", node)
                    Dim isHasDashLine As Boolean
                    isHasDashLine = False
                    If strTemp = "1" Then isHasDashLine = True
                    
                    strTemp = GetXmlAttrValue("linestyle", node)
                    Dim isDotLine As Boolean
                    isDotLine = False
                    If strTemp = "dots" Then isDotLine = True
                    
                    If isHasDashLine Or isDotLine Then
                        i_grid.DotGridLine i + nStartRow
                    End If
                 
                    Set nodeListCol = node.SelectNodes("col")
                    nColIndex = 0
                    
                    Dim isBold As Boolean
                    Dim isItalic As Boolean
                    isBold = False
                    isItalic = False
                    For j = 1 To nCols
                        If j <= nodeListCol.Count Then
                            Set nodeCol = nodeListCol.Item(j)
                            'proc bold
                            strTemp = GetXmlAttrValue("fontWeight", nodeCol)
                            If strTemp = "bold" Then
                                isBold = True
                            Else
                                strTemp = GetXmlAttrValue("fontWeight", node)
                                If (strTemp = "bold") Then
                                    isBold = True
                                End If
                            End If
                            
                            strTemp = GetXmlAttrValue("fontStyle", node)
                            If strTemp = "italic" Then
                                isItalic = True
                            End If
                
                            strTemp = nodeCol.Text
                            strColNbr = GetXmlAttrValue("columnNumber", nodeCol)
                        
                            strKey = colAttr.Item(CStr(j))
                            
                            If colHiden(nColIndex + 1) = 1 Then
                                'i_grid.FillCell i + 1, j, " ", isBold
                            ElseIf strKey = "Text" Or strKey = "Year" Then
                                i_grid.FillCell i + nStartRow, j, strTemp, isBold, isItalic
                            Else
                                i_grid.FillCell i + nStartRow, j, FormatNumber(strTemp, conDefDecimals, bFormatKMBT, bLangCHS), isBold, isItalic
                            End If
                            nColIndex = nColIndex + 1
                            
                            'process columnNumber
                            If strColNbr <> "" Then
                                i_grid.DotGridLine nCurRow, nColIndex
                                i_grid.DotGridLine nCurRow, nColIndex + 1
                                For k = 1 To Str2Int(strColNbr) - 1
                                    nColIndex = nColIndex + 1
                                Next k
                            End If
                        Else
                            If nColIndex < nCols Then
                                nColIndex = nColIndex + 1
                            End If
                        End If
                    Next j
                    If isHasDashLine Then
                        i_grid.DotGridLine i + nStartRow + 1
                    End If
                Next i
                nStartRow = nStartRow + i - 1
            End If
        End If
    Next p
            
    Dim nHeaderRows As Integer
    nHeaderRows = 4
    If TitleKey = "7_1" Then
        nHeaderRows = 3
    ElseIf TitleKey = "2_8" Then
        nHeaderRows = 5
    End If
    
    nStartRow = nStartRow + 1
    i_grid.MergeRow (nStartRow)
    If i_grid.DisplayTableDesc_Ex(TitleKey, nStartRow) = False Then
        i_grid.DeleteRow (nStartRow)
    End If
    ' Repeat header row
    i_grid.SetHeadingFormatRow (nHeaderRows)

    Application.ScreenUpdating = True

    Set colAttr = Nothing
    FillGrid_ParserCommon_Ex = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function



'nRow,nCol start with 0
Function SetDataWithXPath(nRow As Integer, nCol As Integer, ByRef strXPath As String) As Boolean
    On Error GoTo Err_Proc
    
    Dim nodeTag As Office.CustomXMLNode
    Dim i  As Integer
    SetDataWithXPath = False
    If i_grid Is Nothing Then
        Exit Function
    End If
    
    If i_nodeRoot Is Nothing Then
         Exit Function
    End If
    
    Set nodeTag = i_nodeRoot.SelectSingleNode(strXPath)
    If nodeTag Is Nothing Then
         Exit Function
    End If
    
    Dim strData As String
    strData = nodeTag.NodeValue
    SetDataWithXPath = i_grid.SetData(nRow, nCol, strData)
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function

Function VisibleGridLine(bVisible As Boolean) As Boolean
    VisibleGridLine = i_grid.VisibleGridLine(bVisible)
End Function



Function FillGrid_ParserCommon_MultGrid() As Boolean
    On Error GoTo Err_Proc
    Dim nodeList As Office.CustomXMLNodes
    Dim node As Office.CustomXMLNode
    Dim nodeTag As Office.CustomXMLNode
    Dim strTemp As String
    Dim nIndex As Integer
    Dim i  As Integer
    Dim j  As Integer
    Dim nodeListSec As Office.CustomXMLNodes
    Dim table As Word.table
    Dim tablePar As Word.table
    Dim tableCopy As Word.table
    Dim myGrid As MStarGrid
    Dim nodeListNotShow As Office.CustomXMLNodes
    Dim nNotShow  As Integer
    Dim Row1 As Word.row

    nNotShow = 0
    FillGrid_ParserCommon_MultGrid = False
    If i_grid Is Nothing Then
        Exit Function
    End If
    
    If i_nodeRoot Is Nothing Then
         Exit Function
    End If
    
    'init column
    Set nodeList = i_nodeRoot.SelectNodes("section")
    If nodeList Is Nothing Then
         Exit Function
    End If
    
    Set nodeListNotShow = i_nodeRoot.SelectNodes("section[@isshow='0']")
    If Not nodeList Is Nothing Then
         nNotShow = nodeListNotShow.Count
    End If

    If i_nTableIndexL1 = 0 Then Exit Function
    
    Dim strIndex As String
    Dim strXPath As String

'    If ThisDocument.Tables(i_nTableIndexL1).Tables Is Nothing Then
'        Exit Function
'    End If
'    If ThisDocument.Tables(i_nTableIndexL1).Tables(i_nTableIndexL2).Tables Is Nothing Then
'        Exit Function
'    End If
    Application.ScreenUpdating = False
    
    Set tablePar = i_grid.GetTable   'ThisDocument.Tables(i_nTableIndexL1).Tables(i_nTableIndexL2)
    If tablePar.Tables Is Nothing Then
        Exit Function
    End If
    Set myGrid = i_grid 'New MStarGrid
    'myGrid.AttachToTable tablePar
    If g_testGrid = True Then
        myGrid.SetRows 1
        myGrid.SetCols 1
    End If
    myGrid.SetRows nodeList.Count - nNotShow
    If g_testGrid = True Then
        myGrid.VisibleGridLine g_ShowGridLine
    End If
    Set myGrid = Nothing

    Dim nTableCount As Integer
    nTableCount = tablePar.Tables.Count
    'If g_debug = False Then
    If g_testGrid = False And nTableCount > 0 Then
        'for improve the table's performance,copy the first table
        Set tableCopy = tablePar.Tables(1)
        If nTableCount + 1 <= nodeList.Count - nNotShow Then
            tableCopy.Select
            Selection.Copy
            For i = nTableCount + 1 To nodeList.Count - nNotShow
                tablePar.Rows(i).Select
                'Selection.MoveLeft Unit:=wdCharacter, Count:=1
                Selection.PasteAsNestedTable
            Next i
        End If
    Else
        If tablePar.Cell(1, 1).Tables.Count >= 1 Then
            tablePar.Cell(1, 1).Tables(1).Delete
        Else
            'test----
            If g_adjustLayout = True And g_debug = True Then
                i_grid.VisibleGridLine g_ShowGridLine
                Exit Function
            End If
            '---------
        End If
    End If
    Application.ScreenUpdating = True

    'create new table
    For i = 1 To nodeList.Count
        Set node = nodeList.Item(i)
        
        If GetXmlAttrValue("isshow", node) <> "0" Then
        
            If g_testGrid = True Or nTableCount <= 0 Then
                tablePar.Cell(i, 1).Select
               ' Set table = tablePar.Tables(i)
    
                Set table = tablePar.Cell(i, 1).Tables.Add(Range:=Selection.Range, NumRows:=1, NumColumns:= _
                                                            1, DefaultTableBehavior:=wdWord9TableBehavior, AutoFitBehavior:= _
                                                            wdAutoFitWindow)
            Else
                Set table = tablePar.Cell(i, 1).Tables(1)
            End If
    
            'MoveToCurrentParagraphEnd
            'Selection.MoveDown
            'AddBlankRowToEnd
            
            'test----
            If g_adjustLayout = True And g_debug = True Then
                i_grid.VisibleGridLine g_ShowGridLine
            End If
            '---------
            
            strIndex = GetXmlAttrValue("index", node)
            strXPath = i_strXPath + "/section[@index='" + strIndex + "']"
    
            Dim msXmlTb As MStarXmlGrid
            Set msXmlTb = New MStarXmlGrid
            
            If i_nTableIndexL3 > 0 Then
                If msXmlTb.AttachToTableWithIndexEx4L(i_nTableIndexL1, i_nTableIndexL2, i_nTableIndexL3, i) = False Then
                    Exit Function
                End If
            Else
                If msXmlTb.AttachToTableWithIndexEx(i_nTableIndexL1, i_nTableIndexL2, i) = False Then
                    Exit Function
                End If
            End If

            If g_testGrid = True Then msXmlTb.VisibleGridLine g_ShowGridLine

            Call msXmlTb.SetDataXPath(strXPath)
            
            msXmlTb.FillGrid conParserType_Common
                    
            Set msXmlTb = Nothing
            Set table = Nothing
        End If
    Next i
     
    FillGrid_ParserCommon_MultGrid = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function

Function FillGrid_CurTarCompar_Footer(nodeRoot As Office.CustomXMLNode, rangeNode As Office.CustomXMLNode, namePath As String, i As Integer, useAllFlag As Boolean, tagName As String, attrTag As String) As Boolean
    Dim strValue As String
    Dim dbSub As Double
    Dim node As Office.CustomXMLNode
    
    Dim otherTaxableId As String
    'otherTaxableId = GetXmlValue("//root/EFrontFrontier/EFrontResult/othertarget/target[@type='taxable']/@id")
    otherTaxableId = GetXmlAttrValue("taxid", rangeNode)
    If Len(otherTaxableId) <= 0 Then
        otherTaxableId = "target"
    End If
    
    Dim otherAdvTaxableId As String
    'otherAdvTaxableId = GetXmlValue("//root/EFrontFrontier/EFrontResult/othertarget/target[@type='advtaxable']/@id")
    otherAdvTaxableId = GetXmlAttrValue("taxadvid", rangeNode)
    If Len(otherAdvTaxableId) <= 0 Then
        otherAdvTaxableId = "target"
    End If
    
    Dim otherOverallId As String
    otherOverallId = GetXmlAttrValue("overall", rangeNode)
    If Len(otherOverallId) <= 0 Then
        otherOverallId = "overall"
    End If
    
    FillGrid_CurTarCompar_Footer = False
    
    'fill name column
    strValue = GetXmlValue(namePath)
    i_grid.FillCell i, 2, FormatNumber(strValue, conDefDecimals), False
    
    If useAllFlag Then
        
        Set node = nodeRoot.SelectSingleNode("usermix[@id='taxable']/@*[name()='" + tagName + "']")
        strValue = getNodeValue(node)
        i_grid.FillCell i, 3, FormatNumber(strValue, conDefDecimals), False
        
        Set node = nodeRoot.SelectSingleNode("usermix[@id='advtaxable']/@*[name()='" + tagName + "']")
        strValue = getNodeValue(node)
        i_grid.FillCell i, 4, FormatNumber(strValue, conDefDecimals), False
        
        Set node = nodeRoot.SelectSingleNode("usermix[@id='current']/@*[name()='" + tagName + "']")
        strValue = getNodeValue(node)
        i_grid.FillCell i, 5, FormatNumber(strValue, conDefDecimals), False
        If g_strPermission = "ITA" Then
            strValue = Replace(strValue, ".", ",")
        End If
        
        If (IsDouble(strValue)) Then
            dbSub = CDbl(strValue)
        Else
            dbSub = 0#
        End If

        Set node = nodeRoot.SelectSingleNode("usermix[@id='" + otherTaxableId + "']/@*[name()='" + tagName + "']")
        strValue = getNodeValue(node)
        i_grid.FillCell i, 6, FormatNumber(strValue, conDefDecimals), False
        
        Set node = nodeRoot.SelectSingleNode("usermix[@id='" + otherAdvTaxableId + "']/@*[name()='" + tagName + "']")
        strValue = getNodeValue(node)
        i_grid.FillCell i, 7, FormatNumber(strValue, conDefDecimals), False
        
        Set node = nodeRoot.SelectSingleNode("usermix[@id='" + otherOverallId + "']/@*[name()='" + tagName + "']")
        strValue = getNodeValue(node)
        i_grid.FillCell i, 8, FormatNumber(strValue, conDefDecimals), False
        If g_strPermission = "ITA" Then
            strValue = Replace(strValue, ".", ",")
        End If
        
        If (IsDouble(strValue)) Then
            dbSub = CDbl(strValue) - dbSub
        Else
            dbSub = 0# - dbSub
        End If
  
        i_grid.FillCell i, 9, FormatNumber(CStr(dbSub), conDefDecimals), False
           
    Else
            
        Dim currentNode As Office.CustomXMLNode
        Set currentNode = nodeRoot.SelectSingleNode("usermix[@id='current']")
        Dim targetNode As Office.CustomXMLNode
        Set targetNode = nodeRoot.SelectSingleNode("usermix[@id='" + otherOverallId + "']")
        
        strValue = GetXmlAttrValue(attrTag, currentNode)
        If g_strPermission = "ITA" Then
            strValue = Replace(strValue, ".", ",")
        End If
        
        If (IsDouble(strValue)) Then
            dbSub = CDbl(strValue)
        Else
            dbSub = 0#
        End If

        i_grid.FillCell i, 4, FormatNumber(strValue, conDefDecimals), False
        
        strValue = GetXmlAttrValue(attrTag, targetNode)
        i_grid.FillCell i, 7, FormatNumber(strValue, conDefDecimals), False
        If g_strPermission = "ITA" Then
            strValue = Replace(strValue, ".", ",")
        End If
        
        If (IsDouble(strValue)) Then
            dbSub = CDbl(strValue) - dbSub
        Else
            dbSub = 0# - dbSub
        End If

        i_grid.FillCell i, 9, FormatNumber(CStr(dbSub), conDefDecimals), False
    End If
    FillGrid_CurTarCompar_Footer = True
End Function
Function FillGrid_ParserCurTarCompare(nodeRoot As Office.CustomXMLNode, rangeNode As Office.CustomXMLNode) As Boolean
    On Error GoTo Err_Proc
    
    Dim nodeOtherTarget As Office.CustomXMLNode
    Set nodeOtherTarget = g_CustomXMLPart.SelectSingleNode("//EFrontFrontier/EFrontResult/othertarget")
    
    Dim strUseAll As String
    strUseAll = GetXmlAttrValue("useall", nodeOtherTarget)
    
    Dim bFlagUseAll As Boolean
    bFlagUseAll = False
    If strUseAll <> "" Then
        bFlagUseAll = CBool(strUseAll)
    End If

    FillGrid_ParserCurTarCompare = False
    Application.ScreenUpdating = False
    Dim currentNode As Office.CustomXMLNode
    Dim currentNodeList As Office.CustomXMLNodes
    Set currentNode = nodeRoot.SelectSingleNode("usermix[@id='current']")
    If currentNode Is Nothing Then
         Exit Function
    End If
    Set currentNodeList = currentNode.SelectNodes("asset")
    i_grid.SetRows currentNodeList.Count + 4
    
    'fill row name
    Dim name_node As Office.CustomXMLNode
    Dim picPath As String
    Dim name As String
    Dim subCvt As Double
    Dim j As Integer
    Dim i As Integer
    For j = 1 To currentNodeList.Count
        Set name_node = currentNodeList.Item(j)
        picPath = GetXmlAttrValue("type", name_node)
        picPath = g_mapAssetPicure.Item(picPath)
        i_grid.FillCellWithPicture j, 1, picPath
        name = GetXmlAttrValue("name", name_node)
        i_grid.FillCell j, 2, FormatNumber(name, conDefDecimals), False
    Next j

    If bFlagUseAll = True Then
        'Current block
        Dim current_Taxable As Office.CustomXMLNode
        Dim current_TaxableColumnData As Office.CustomXMLNodes
        Set current_Taxable = nodeRoot.SelectSingleNode("usermix[@id='taxable']")
        Set current_TaxableColumnData = current_Taxable.SelectNodes("asset")
        
        Dim current_TaxAdv As Office.CustomXMLNode
        Dim current_TaxAdvColumnData As Office.CustomXMLNodes
        Set current_TaxAdv = nodeRoot.SelectSingleNode("usermix[@id='advtaxable']")
        Set current_TaxAdvColumnData = current_TaxAdv.SelectNodes("asset")
        
        Dim current_overall As Office.CustomXMLNode
        Dim current_overallColumnData As Office.CustomXMLNodes
        Set current_overall = nodeRoot.SelectSingleNode("usermix[@id='current']")
        Set current_overallColumnData = current_overall.SelectNodes("asset")
       
       'Target block
        Dim target_Taxable As Office.CustomXMLNode
        Dim target_TaxableColumnData As Office.CustomXMLNodes
        Dim target_TaxableId As String
        target_TaxableId = GetXmlAttrValue("taxid", rangeNode)
        Set target_Taxable = nodeRoot.SelectSingleNode("usermix[@id='" + target_TaxableId + "']")
        Set target_TaxableColumnData = target_Taxable.SelectNodes("asset")
        
        Dim target_TaxAdv As Office.CustomXMLNode
        Dim target_TaxAdvColumnData As Office.CustomXMLNodes
        Dim target_TaxAdvId As String
        target_TaxAdvId = GetXmlAttrValue("taxadvid", rangeNode)
        Set target_TaxAdv = nodeRoot.SelectSingleNode("usermix[@id='" + target_TaxAdvId + "']")
        Set target_TaxAdvColumnData = target_TaxAdv.SelectNodes("asset")
        
        Dim target_overall As Office.CustomXMLNode
        Dim target_overallColumnData As Office.CustomXMLNodes
        Dim target_overallId As String
        target_overallId = GetXmlAttrValue("overall", rangeNode)
        Set target_overall = nodeRoot.SelectSingleNode("usermix[@id='" + target_overallId + "']")
        Set target_overallColumnData = target_overall.SelectNodes("asset")
        
        Dim curTaxable As String
        Dim curTaxAdv As String
        Dim curoverall As String
        Dim tarTaxable As String
        Dim tarTaxAdv As String
        Dim taroverall As String
     
        For i = 1 To current_overallColumnData.Count
            curTaxable = getItemValue(current_TaxableColumnData, i)
            i_grid.FillCell i, 3, FormatNumber(curTaxable, conDefDecimals), False
            
            curTaxAdv = getItemValue(current_TaxAdvColumnData, i)
            i_grid.FillCell i, 4, FormatNumber(curTaxAdv, conDefDecimals), False
            
            curoverall = getItemValue(current_overallColumnData, i)
            i_grid.FillCell i, 5, FormatNumber(curoverall, conDefDecimals), False
    
            tarTaxable = getItemValue(target_TaxableColumnData, i)
            i_grid.FillCell i, 6, FormatNumber(tarTaxable, conDefDecimals), False
        
            tarTaxAdv = getItemValue(target_TaxAdvColumnData, i)
            i_grid.FillCell i, 7, FormatNumber(tarTaxAdv, conDefDecimals), False
            
            taroverall = getItemValue(target_overallColumnData, i)
            i_grid.FillCell i, 8, FormatNumber(taroverall, conDefDecimals), False
            
            subCvt = CDbl(taroverall) - CDbl(curoverall)
            i_grid.FillCell i, 9, FormatNumber(CStr(subCvt), conDefDecimals), False
        Next i
    Else
        Dim currentColumnData As Office.CustomXMLNodes
        Set currentColumnData = currentNode.SelectNodes("asset")
     
        Dim overallId As String
        overallId = GetXmlAttrValue("overall", rangeNode)
        
        Dim targetColumnData As Office.CustomXMLNodes
        Set targetColumnData = nodeRoot.SelectNodes("usermix[@id='" + overallId + "']/asset")
               
        Dim current_item As String
        Dim target_item As String
        For i = 1 To currentColumnData.Count
            current_item = getItemValue(currentColumnData, i)
            target_item = getItemValue(targetColumnData, i)
            subCvt = CDbl(target_item) - CDbl(current_item)
            i_grid.FillCell i, 4, FormatNumber(current_item, conDefDecimals), False
            i_grid.FillCell i, 7, FormatNumber(target_item, conDefDecimals), False
            i_grid.FillCell i, 9, FormatNumber(CStr(subCvt), conDefDecimals), False
        Next i
        
    End If
    i_grid.FullGridLine i
    Call FillGrid_CurTarCompar_Footer(nodeRoot, rangeNode, conStddev, i, bFlagUseAll, conTypeStddev, conTypeStddev)
    Call FillGrid_CurTarCompar_Footer(nodeRoot, rangeNode, conExpRet, i + 1, bFlagUseAll, conTypeExpRet, conTypeExpRet)
    Call FillGrid_CurTarCompar_Footer(nodeRoot, rangeNode, conYield, i + 2, bFlagUseAll, conTypeYield, conTypeYield)
    Call FillGrid_CurTarCompar_Footer(nodeRoot, rangeNode, conShp, i + 3, bFlagUseAll, conTypeShp, conTypeShp)
    Application.ScreenUpdating = True
    FillGrid_ParserCurTarCompare = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function
Function getItemValue(columnData As Office.CustomXMLNodes, i As Integer) As String
    
    getItemValue = "0"
    
    If i <= columnData.Count Then
        getItemValue = columnData.Item(i).Text
        If Len(getItemValue) < 0 Then
            getItemValue = "0"
        End If
    End If
    Exit Function
End Function
Function FillGrid_ParserAllocCompare(nodeRoot As Office.CustomXMLNode) As Boolean
    On Error GoTo Err_Proc
    Dim nodeList As Office.CustomXMLNodes
    Dim node As Office.CustomXMLNode
    Dim nodeCur As Office.CustomXMLNode
    Dim nodeTar As Office.CustomXMLNode
    Dim nodeProposed As Office.CustomXMLNode
    Dim nodeTemp As Office.CustomXMLNode

    Dim strTemp As String
    Dim strID As String
    Dim strXPath As String
    Dim i  As Integer
    Dim j  As Integer
    Dim nCols As Integer
    Dim dbSub As Double

    FillGrid_ParserAllocCompare = False
    If i_grid Is Nothing Then
        Exit Function
    End If
    
    If nodeRoot Is Nothing Then
         Exit Function
    End If
        
    Set nodeCur = nodeRoot.SelectSingleNode("usermix[@id='current']")
    If nodeCur Is Nothing Then
         Exit Function
    End If
    
    Dim nodeTargetId As Office.CustomXMLNode
    Dim targetid As String
    targetid = "overall"
        
    Set nodeTar = nodeRoot.SelectSingleNode("usermix[@id='" + targetid + "']")
    If nodeTar Is Nothing Then
         Exit Function
    End If
    
    Set nodeProposed = nodeRoot.SelectSingleNode("usermix[@id='proposed']")
    
    
    If g_testGrid = True Then i_grid.VisibleGridLine g_ShowGridLine
    
    nCols = 6

    'fill grid
    Set nodeList = nodeCur.SelectNodes("asset")
    If nodeList Is Nothing Then
         Exit Function
    End If
    
    Application.ScreenUpdating = False
   ' i_grid.SetRows nodeList.Count
    i_grid.AddRows nodeList.Count - 1
       
    For i = 2 To nodeList.Count + 1
        Set node = nodeList.Item(i - 1)
        
        ' flag
        strTemp = GetXmlAttrValue("type", node)
        strTemp = g_mapAssetPicure.Item(strTemp)
        i_grid.FillCellWithPicture i, 1, strTemp

        'name
        strTemp = GetXmlAttrValue("name", node)
        i_grid.FillCell i, 2, FormatNumber(strTemp, conDefDecimals), False
        'i_grid.AddCacheData FormatNumber(strTemp, conDefDecimals)
        
        'current
        strTemp = node.Text
        i_grid.FillCell i, 3, FormatNumber(strTemp, conDefDecimals), False
        'i_grid.AddCacheData FormatNumber(strTemp, conDefDecimals)
        
        'Target
        strID = GetXmlAttrValue("id", node)
        strXPath = "asset[@id='" + strID + "']"
        Set nodeTemp = nodeTar.SelectSingleNode(strXPath)
        If nodeTemp Is Nothing Then
            dbSub = 0
            strTemp = "0.0"
        Else
            strTemp = nodeTemp.Text
            If g_strPermission = "ITA" Then
                strTemp = Replace(strTemp, ".", ",")
            End If
            dbSub = CDbl(strTemp)
        End If
        i_grid.FillCell i, 4, FormatNumber(strTemp, conDefDecimals), False
        'i_grid.AddCacheData FormatNumber(strTemp, conDefDecimals)
        'Proposed
        If nodeProposed Is Nothing Then
            dbSub = 0 - dbSub
            strTemp = "--"
        Else
            Set nodeTemp = nodeProposed.SelectSingleNode(strXPath)
            If nodeTemp Is Nothing Then
                dbSub = 0 - dbSub
                strTemp = "0.0"
            Else
                strTemp = nodeTemp.Text
                If g_strPermission = "ITA" Then
                    strTemp = Replace(strTemp, ".", ",")
                End If
                dbSub = CDbl(strTemp) - dbSub
            End If
        End If
        i_grid.FillCell i, 5, FormatNumber(strTemp, conDefDecimals), False
        'i_grid.AddCacheData FormatNumber(strTemp, conDefDecimals)
        '+/-
        i_grid.FillCell i, 6, FormatNumber(CStr(dbSub), conDefDecimals), False
        'i_grid.AddCacheData FormatNumber(CStr(dbSub), conDefDecimals)
    Next i
    'i_grid.RefrushCacheDataToGrid
'
'    i = 1
'    Dim oCell As Cell
'    For Each oCell In i_grid.GetTable().Columns(1).Cells
''        ' flag
'        If i <= nodeList.Count Then
'            Set node = nodeList.Item(i)
'            strTemp = GetXmlAttrValue("type", node)
'            strTemp = g_mapAssetPicure.Item(strTemp)
'            oCell.Select
'            i_grid.InsertPictureInCurrentPos strTemp
'        End If
'        i = i + 1
'    Next oCell
    i_grid.SetTableTextStyle conTableDataIdx, False
    Application.ScreenUpdating = True
    FillGrid_ParserAllocCompare = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function

Function FillGrid_ParserCover(nodeRoot As Office.CustomXMLNode) As Boolean
    On Error GoTo Err_Proc
    Dim node As Office.CustomXMLNode
    Dim strTemp As String
    Dim i  As Integer
    Dim k As Integer
    Dim nTableIndex As Integer
    
    k = 0

    FillGrid_ParserCover = False
    If i_grid Is Nothing Then
        Exit Function
    End If
    
    If nodeRoot Is Nothing Then
         Exit Function
    End If
    
    i = 1
        
    i_grid.SetTableTextStyle (conCoverTextIdx)
     
'        <GenerateDate>May 7, 2009</GenerateDate>
'        <ClientName>Client for Release234</ClientName>
'        <CAddress/>
'        <CityState>City State</CityState>
'        <ACompanyName>MorningStar</ACompanyName>
'        <AdvisorName>Leis Wei</AdvisorName>
'        <AAddress>shenzhen</AAddress>
'        <ACityState>shenzhen CA 512087</ACityState>
'        <APhoneNumber>(312)696-6000</APhoneNumber>
'        <AEmail>milo.lei@morningstar.com</AEmail>
'        <disclosure>ssssssssss2222222222222dddddddddd</disclosure>
    If g_ReportSetting.bhasCname = True Then
        Set node = nodeRoot.SelectSingleNode("ClientName")
        If Not node Is Nothing Then
             strTemp = Trim(node.Text)
             If strTemp <> "" Then
                Dim nPos As Integer
                nPos = InStr(1, strTemp, "{}")
                Do While nPos > 0
                    i_grid.SetData i, k, Trim(Left(strTemp, nPos - 1))
                    i = i + 1
                    strTemp = Right(strTemp, Len(strTemp) - nPos - 1)
                    nPos = InStr(1, strTemp, "{}")
                Loop
                i_grid.SetData i, k, Trim(strTemp)
                i = i + 1
             End If
        End If
        
        Set node = nodeRoot.SelectSingleNode("CAddress")
        If Not node Is Nothing Then
             If Trim(node.Text) <> "" Then
                i_grid.SetData i, k, Trim(node.Text)
                i = i + 1
             End If
        End If
        
        Set node = nodeRoot.SelectSingleNode("CAddress2")
        If Not node Is Nothing Then
             If Trim(node.Text) <> "" Then
                i_grid.SetData i, k, Trim(node.Text)
                i = i + 1
             End If
        End If
        
        Set node = nodeRoot.SelectSingleNode("CityState")
        If Not node Is Nothing Then
             If Trim(node.Text) <> "" Then
                i_grid.SetData i, k, Trim(node.Text)
                i = i + 1
             End If
        End If
        k = k + 1
    End If
    
    'col 2
    i = 1
    If Trim(g_ReportSetting.PreparedBy) <> "" Then
       i_grid.SetData i, k, Trim(g_ReportSetting.PreparedBy)
       i = i + 1
    End If
    
    Set node = nodeRoot.SelectSingleNode("ACompanyName")
    If Not node Is Nothing Then
         If Trim(node.Text) <> "" Then
            i_grid.SetData i, k, Trim(node.Text)
            i = i + 1
         End If
    End If
    
    Set node = nodeRoot.SelectSingleNode("AAddress")
    If Not node Is Nothing Then
         If Trim(node.Text) <> "" Then
            i_grid.SetData i, k, Trim(node.Text)
            i = i + 1
         End If
    End If
    
    Set node = nodeRoot.SelectSingleNode("AAddress2")
    If Not node Is Nothing Then
         If Trim(node.Text) <> "" Then
            i_grid.SetData i, k, Trim(node.Text)
            i = i + 1
         End If
    End If
    
    Set node = nodeRoot.SelectSingleNode("ACityState")
    If Not node Is Nothing Then
         If Trim(node.Text) <> "" Then
            i_grid.SetData i, k, Trim(node.Text)
            i = i + 1
         End If
    End If
    
    Set node = nodeRoot.SelectSingleNode("APhoneNumber")
    If Not node Is Nothing Then
         If Trim(node.Text) <> "" Then
            i_grid.SetData i, k, Trim(node.Text)
            i = i + 1
         End If
    End If
    
    Set node = nodeRoot.SelectSingleNode("AEmail")
    If Not node Is Nothing Then
         If Trim(node.Text) <> "" Then
            i_grid.SetData i, k, Trim(node.Text)
            i = i + 1
         End If
    End If
    
    Dim bDelRow As Boolean
    bDelRow = False
    If (g_ReportSetting.bhasDisclosure = True) Then
        Set node = nodeRoot.SelectSingleNode("disclosure")
        If Not node Is Nothing Then
            If (Trim(node.Text) <> "") Then
                bDelRow = True
                i_grid.FullGridLine i + 1
                i_grid.MergeRow i + 1
                i_grid.SetData i, 0, Trim(node.Text)
            End If
        End If
    End If
    
    nTableIndex = GetTableIndex(conTableKey_Cover)
    If (g_ReportSetting.bHasCoverLogo = True) Then
        TransformAndInsertChart nTableIndex, 0, 0, 7, 2, conCoverImage, ""
    End If
    
    If (bDelRow = True) Then
        Dim height As Integer
        height = ThisDocument.Tables(nTableIndex).Rows(6).height
        ThisDocument.Tables(nTableIndex).Rows(6).SetHeight RowHeight:=InchesToPoints(1.5), HeightRule:=wdRowHeightExactly
    End If
    
    
    FillGrid_ParserCover = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function


Function FillGrid_ParserCoverDir(nodeRoot As Office.CustomXMLNode) As Boolean
    On Error GoTo Err_Proc
    Dim node As Office.CustomXMLNode
    Dim strTemp As String
    Dim i  As Integer
    Dim nCount  As Integer
    Dim arr() As String
    Dim strFirstSecID As String

    FillGrid_ParserCoverDir = False
    If i_grid Is Nothing Then
        Exit Function
    End If
    
    If nodeRoot Is Nothing Then
         Exit Function
    End If
    
    nCount = g_mapSectionsDisplay.Count
    If nCount < 1 Then Exit Function
    Call i_grid.SetRows(nCount + 2)
    'i_grid.ClearCacheData
      
    i_grid.SetTableTextStyle (conTableOfContentsIdx)
        
    i = 1
    'row 1
    strTemp = " "
    'i_grid.FillCell i, 1, strTemp, False
    'i_grid.FillCell i, 2, strTemp, False
    i_grid.FillCell i, 3, "1", False
   
    'row 2
    i = 2
    'i_grid.FillCell i, 1, strTemp, False
    'i_grid.FillCell i, 2, strTemp, False
    i_grid.FillCell i, 3, "2", False

    For i = 1 To nCount
        arr = g_mapSectionsDisplay.GetItem(i)
        If i = 1 Then
            strFirstSecID = arr(1)
        End If
        'i_grid.FillCell i + 2, 1, " ", False
        'i_grid.FillCell i + 2, 2, " ", False
        'page
        'i_grid.FillCell i + 2, 3, " ", False
    Next i
    'i_grid.RefrushCacheDataToGrid
    
    i = 1
    
    'adjust it
    'i_grid.ClearCacheData
    'i_grid.ClearBoldCache
    'row 1
    strTemp = " "
    Set node = nodeRoot.SelectSingleNode("/root/label/coverpage")
    If Not node Is Nothing Then
         If Trim(node.Text) <> "" Then
            strTemp = node.Text
         End If
    End If
    i_grid.FillCell i, 1, strTemp, True
    i_grid.FillCell i, 2, strTemp, False
    i_grid.FillCell i, 3, "1", False
    
    'row 2
    i = 2
    'i_grid.FillCell i, 1, " ", False
    strTemp = " "
    Set node = nodeRoot.SelectSingleNode("/root/label/tableCont")
    If Not node Is Nothing Then
         If Trim(node.Text) <> "" Then
            strTemp = node.Text
         End If
    End If
    i_grid.FillCell i, 2, strTemp, False
    i_grid.FillCell i, 3, "2", False
    
    strTemp = GetTableInPage(strFirstSecID, 0, False)
    Dim nOffset As Integer
    
    nOffset = Str2Int(strTemp)
    strTemp = GetTableInPage(strFirstSecID, 0)
    nOffset = nOffset - Str2Int(strTemp)
    
    Dim isBold As Boolean
    Dim k As Integer
    k = 1
    For i = 1 To nCount
        arr = g_mapSectionsDisplay.GetItem(i)

        isBold = False
        If i = 1 Or (arr(0) = "6_2" Or arr(0) = "8_11") Then
            If i = 1 Then
                Set node = nodeRoot.SelectSingleNode("/root/label/planrpt")
                strTemp = ""
                If Not node Is Nothing Then
                     If Trim(node.Text) <> "" Then
                        strTemp = node.Text
                     End If
                End If
            Else
                If ((g_ReportSetting.ReportType = "30002" Or g_ReportSetting.ReportType = "30001") And g_strPermission <> "CHS") Then
                    strTemp = g_mapSectionsDisplay.GetItem(i - 1)(4)
                End If
            End If
                            
            'Appendices process
            If (arr(0) = "8_11" And g_ReportSetting.ReportType = "30002" And g_strPermission <> "CHS") Then
                 i_grid.FullGridLine k + 2
            End If
            If (arr(0) = "6_2" And g_ReportSetting.ReportType = "30001" And g_strPermission <> "CHS") Then
                 i_grid.FullGridLine k + 2
            End If
            
            ' For #54265
            If i = 1 Or ((g_ReportSetting.ReportType = "30002" Or g_ReportSetting.ReportType = "30001")) Then
                i_grid.FillCell k + 2, 1, strTemp, True
            End If
        Else
            'i_grid.FillCell i + 2, 1, " ", False
        End If

        If arr(3) = True Then
            'bold group
            'i_grid.AddBoldToCache (i + 2 - 1) * 3 + 1
            isBold = True
        End If
        
        If arr(0) <> "H_IPS_4" And arr(0) <> "H_IR_6" Then
        'title
            i_grid.FillCell k + 2, 2, arr(4), isBold
            'page
            i_grid.FillCell k + 2, 3, CStr(Str2Int(GetTableInPage(arr(1), nOffset)) + nOffset), False
            k = k + 1
        End If
         
    Next i
    'i_grid.RefrushCacheDataToGrid
    
    i_grid.FullGridLine 1
    i_grid.FullGridLine 3
    
    FillGrid_ParserCoverDir = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function


Function FillGrid_ParserSectorAnalysis(nodeRoot As Office.CustomXMLNode) As Boolean
    On Error GoTo Err_Proc
    Dim nodeList As Office.CustomXMLNodes
    Dim node As Office.CustomXMLNode
    Dim nodeCur As Office.CustomXMLNode
    Dim nodeListCur As Office.CustomXMLNodes
    Dim nodeListClass As Office.CustomXMLNodes

    Dim strTemp As String
    Dim strID As String
    Dim strXPath As String
    Dim i  As Integer
    Dim j  As Integer

    FillGrid_ParserSectorAnalysis = False
    If i_grid Is Nothing Then
        Exit Function
    End If
    
    If nodeRoot Is Nothing Then
         Exit Function
    End If
        
    'fill grid
    Set nodeListClass = nodeRoot.SelectNodes("ClassType/Class")
    If nodeListClass Is Nothing Then
         Exit Function
    End If
   
    Set nodeList = nodeRoot.SelectNodes("ClassType")
    If nodeList Is Nothing Then
         Exit Function
    End If
    
    Application.ScreenUpdating = False
    i_grid.SetRows nodeListClass.Count
    'i_grid.ClearCacheData
    'i_grid.ClearBoldCache
      
    Dim nCC As Integer
    nCC = 0
    i = 0
    Dim isBold As Boolean
    For i = 1 To nodeList.Count
        Set node = nodeList.Item(i)
        Set nodeListCur = node.SelectNodes("Class")
        If Not nodeListCur Is Nothing Then
            
            For j = 1 To nodeListCur.Count
                isBold = False
                If j = 1 Then
                    'Call i_grid.AddBoldToCache(nCC * 4 + 1)
                    'Call i_grid.AddBoldToCache(nCC * 4 + 2)
                    'Call i_grid.AddBoldToCache(nCC * 4 + 3)
                    isBold = True
               
                    If i <> 1 Then
                        i_grid.DotGridLine nCC + 1
                    End If
                End If
                Set nodeCur = nodeListCur.Item(j)
                ' picture
                strTemp = GetXmlAttrValue("img", nodeCur)
                i_grid.FillCellWithPicture nCC + 1, 1, strTemp
                'name
                strTemp = GetXmlAttrValue("name", nodeCur)
                i_grid.FillCell nCC + 1, 2, strTemp, isBold
                'current
                strTemp = GetXmlAttrValue("current", nodeCur)
                i_grid.FillCell nCC + 1, 3, FormatNumber(strTemp, conDefDecimals), isBold
                'proposed
                strTemp = GetXmlAttrValue("proposed", nodeCur)
                i_grid.FillCell nCC + 1, 4, FormatNumber(strTemp, conDefDecimals), isBold
                ' picture
                'i_grid.AddCacheData ""
                
                nCC = nCC + 1
            Next j
        End If
    Next i
    'i_grid.RefrushCacheDataToGrid
        
    i_grid.SetTableTextStyle (conTableDataIdx)
    
'    i = 1
'    Dim oCell As Cell
'    For Each oCell In i_grid.GetTable().Columns(1).Cells
''        ' flag
'        If i <= nodeListClass.Count Then
'            Set node = nodeListClass.Item(i)
'            strTemp = GetXmlAttrValue("img", node)
'            oCell.Select
'            i_grid.InsertPictureInCurrentPos strTemp
'        End If
'        i = i + 1
'    Next oCell
    
    Application.ScreenUpdating = True
    FillGrid_ParserSectorAnalysis = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function


' For Project #777
Function FillGrid_ParserDisclosure(nodeRoot As Office.CustomXMLNode) As Boolean
     On Error GoTo Err_Proc
      
    FillGrid_ParserDisclosure = False
    
    If i_grid Is Nothing Then
        Exit Function
    End If
    
    If nodeRoot Is Nothing Then
         Exit Function
    End If
    
    Dim nodeTag As Office.CustomXMLNode
    Set nodeTag = nodeRoot.SelectSingleNode("columnwidth")
    If nodeTag Is Nothing Then
         Exit Function
    End If
    
    Application.ScreenUpdating = False
    
    Dim nodeList As Office.CustomXMLNodes
    'init column
    Set nodeList = nodeTag.SelectNodes("colwidth")
    If nodeList Is Nothing Then
        Application.ScreenUpdating = True
        Exit Function
    End If
       
    Dim nCols As Integer
    nCols = nodeList.Count
    If nCols = 0 Then Exit Function
        
    i_grid.SetCols nCols
    i_grid.SetColWidth 1, 250
    
    'fill grid
    Set nodeList = nodeRoot.SelectNodes("row")
    If nodeList Is Nothing Then
         'Application.GoBack
         Application.ScreenUpdating = True
         Exit Function
    End If
    
    i_grid.SetRows nodeList.Count
    
    i_grid.SetTableTextStyle (conReportContentIdx)
    
    Dim nodeRow As Office.CustomXMLNode
    Dim nodeText As Office.CustomXMLNode
    Dim textList As Office.CustomXMLNodes
    Dim nBoldEnd As Integer
    Dim strTemp As String
    Dim strFontWeight As String
    Dim isBold As Boolean
    Dim isItalic As Boolean
    Dim i As Integer
    Dim j As Integer
    For i = 1 To nodeList.Count
        strTemp = ""
        nBoldEnd = 0
        isBold = False
        isItalic = False
        Set nodeRow = nodeList.Item(i)
        If (nodeRow Is Nothing) Then
            Application.ScreenUpdating = True
            Exit Function
        End If
        
        Set textList = nodeRow.SelectNodes("text")
        For j = 1 To textList.Count
            Set nodeText = textList.Item(j)
            If (nodeText Is Nothing) Then
            Else
               strTemp = strTemp + nodeText.Text
               strFontWeight = GetXmlAttrValue("fontWeight", nodeText)
               If (strFontWeight = "bold") Then
                isBold = True
                nBoldEnd = Len(nodeText.Text)
               ElseIf (strFontWeight = "italic") Then
                isItalic = True
                nBoldEnd = Len(nodeText.Text)
               End If
            End If
        Next j
        
        If (textList.Count > 1) Then
            i_grid.FillCell i, 1, strTemp, False
            With ThisDocument
                .Range(i_grid.GetTable().Cell(i, 1).Range.Start, i_grid.GetTable().Cell(i, 1).Range.Start + nBoldEnd).Select
            End With
            Selection.Font.Bold = isBold
            Selection.Font.Italic = isItalic
        Else
            i_grid.FillCell i, 1, strTemp, isBold, isItalic
        End If
    Next i
  
    Application.ScreenUpdating = True

    FillGrid_ParserDisclosure = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function




Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True


Private Sub cmdAccountHide_Click()
     ShowHideTable conTableIndex_Acconts_LV1, conTableIndex_Acconts_LV2, False
End Sub

Private Sub cmdAccountHide1_Click()
     ShowHideTable conTableIndex_Allocation_LV1, conTableIndex_Allocation_LV2, False
End Sub

Private Sub cmdAccountShow_Click()
     ShowHideTable conTableIndex_Acconts_LV1, conTableIndex_Acconts_LV2, True
End Sub



Private Sub cmdAllcationShow_Click()

     ShowHideTable conTableIndex_Allocation_LV1, conTableIndex_Allocation_LV2, True
End Sub

Private Sub cmdSecListHide_Click()
    Dim nTableIndex As Integer
    nTableIndex = GetTableIndex(conTableKey_SecList)
    If nTableIndex = -1 Then Exit Sub
    ShowHideTable nTableIndex, conTableIndex_SecList_LV2, False
End Sub

Private Sub cmdSecListShow_Click()
    Dim nTableIndex As Integer
    nTableIndex = GetTableIndex(conTableKey_SecList)
    If nTableIndex = -1 Then Exit Sub
    
    ShowHideTable nTableIndex, conTableIndex_SecList_LV2, True

End Sub

Private Sub CommandButton1_Click()
'InitEnv
'DisplaySection_RegionalExposure
'DisplaySection_SecuritiesAllocation
  'Layout
  'DisplaySection_BCMA
  'DisplaySection_Accounts
 ' DisplaySection_MPTStatistics
 ' DisplaySection_ActionPlan
'  Dim WordAcc As Object
'  Set WordAcc = CreateObject("WordReportAcc.MTFillData.1")
'  If WordAcc Is Nothing Then Exit Sub
'
' ' Call WordAcc.AddFunc(AddressOf DisplaySection_DCMA)
'  Call WordAcc.AddFunc(AddressOf DisplaySection_BCMA)
'
'  Call WordAcc.Run(1)
'
'  Set WordAcc = Nothing
  
  'Call CreateThread(ByVal 0&, ByVal 0&, AddressOf DisplaySection_DCMA, ByVal 0&, 0, 0)
  'Call CreateThread(ByVal 0&, ByVal 0&, AddressOf DisplaySection_BCMA, ByVal 0&, 0, 0)

'DeleteBlankPage
'SetHeadersFooters
'InsertNewPage 1
 ' InitEnv
  'DisplaySection_EfficientFrontier
  'DisplaySection_ClientsInformation
 ' DisplaySection_AccountContributions
 ' DisplaySection_DCMA
'DisplaySection_ProposedPortfolio
  
  'DisplaySection_PerformanceofPS
 ' DisplaySection_RiskProfile
 ' DisplaySection_RiskQuestionnaire
 ' DisplaySection_InterestRR
  'DisplaySection_CreditQuality
 ' DisplaySection_FixedIncomeIS
 'DisplaySection_SectorAnalysis
 ' DisplaySection_EquityInvestmentStyle
 'DisplaySection_ProposedPortfolioEF
  'DisplaySection_ForecastedReturns
  'DisplaySection_WealthForecast
  'InsertPictureToContentControl "lblCover_Logo", conLogo_cover
  'DisplaySection_RRStatistics
 ' VisibleCover True
 'DisplaySection_WealthTable
 ' DisplaySection_ActionPlan
 ' DisplaySection_ProposedPortfolio
  'DisplaySection_OptimizationConstranints
  'DisplaySection_DCMA
 ' DisplaySection_SecuritiesAllocation
 ' DisplaySection_SecuritiesList
 '  DisplaySection_CurTarCompare
   'DisplaySection_AllocCompare
'    TransformXsl "Plan_CTAllocation.xsl", ""
  Run
    'TestChart
  'DisplaySection_ForecastedWealth
   ' DisplaySection_CoverDir
    'DisplayReportCover
End Sub


Sub SetHeadersFooters()

    Dim oApp As Word.Application
    Dim oSec As Word.section
    Dim oDoc As Word.Document
    
    'Create a new document in Word
    Set oApp = Application
    Set oDoc = ThisDocument
    
    With oDoc
            
        '=== SECTION 1 ==================================================
        
        'Add two pages to the first section where the first page in the
        'section has different headers and footers than the second page
        Set oSec = .Sections(1)
        oSec.PageSetup.DifferentFirstPageHeaderFooter = True
        oSec.Range.InsertAfter "Text on Page 1 (Section 1)"
        .Range(oSec.Range.End - 1).InsertBreak wdPageBreak
        oSec.Range.InsertAfter "Text on Page 2 (Section 1)"
        
        'Add the headers/footers for the first section (that contains two
        'pages)
        oSec.Headers(wdHeaderFooterFirstPage).Range.Text = _
              "Page1 -- Section 1 First Page Header"
        oSec.Headers(wdHeaderFooterPrimary).Range.Text = _
              "Page2 -- Section 1 Primary Header"
        oSec.Footers(wdHeaderFooterFirstPage).Range.Text = _
              "Page1 -- Section 1 First Page Footer"
        oSec.Footers(wdHeaderFooterPrimary).Range.Text = _
              "Page2 -- Section 1 Primary Footer"
        
        '=== SECTION 2 ==================================================
        
        'Add a new section containing three pages where the first page in
        'the section has different headers and footers than the other two
        'pages
        .Range(oSec.Range.End - 1).InsertBreak wdSectionBreakNextPage
        Set oSec = .Sections(2)
        oSec.PageSetup.DifferentFirstPageHeaderFooter = True
        oSec.Range.InsertAfter "Text on Page 3 (Section 2)"
        .Range(oSec.Range.End - 1).InsertBreak wdPageBreak
        oSec.Range.InsertAfter "Text on Page 4 (Section 2)"
        .Range(oSec.Range.End - 1).InsertBreak wdPageBreak
        oSec.Range.InsertAfter "Text on Page 5 (Section 2)"

        'Add the headers/footers for the second section (that contains
        'three pages) -- notice that the second and third pages in this
        'section will contain the primary header/footer
        oSec.Headers(wdHeaderFooterFirstPage).LinkToPrevious = False
        oSec.Headers(wdHeaderFooterFirstPage).Range.Text = _
              "Page3 -- Section 2 First Page Header"
        oSec.Headers(wdHeaderFooterPrimary).LinkToPrevious = False
        oSec.Headers(wdHeaderFooterPrimary).Range.Text = _
              "Page4and5 -- Section 2 Primary Header"
        oSec.Footers(wdHeaderFooterFirstPage).LinkToPrevious = False
        oSec.Footers(wdHeaderFooterFirstPage).Range.Text = _
              "Page3 -- Section 2 First Page Footer"
        oSec.Footers(wdHeaderFooterPrimary).LinkToPrevious = False
        oSec.Footers(wdHeaderFooterPrimary).Range.Text = _
              "Page4and5 -- Section 2 Primary Footer"
        
        '=== SECTION 3 ==================================================

        'Add a new section containing two pages that all have the same
        'header/footer
        .Range(oSec.Range.End - 1).InsertBreak wdSectionBreakNextPage
        Set oSec = .Sections(3)
        oSec.PageSetup.DifferentFirstPageHeaderFooter = False
        oSec.Range.InsertAfter "Text on Page 6 (Section 3)"
        .Range(oSec.Range.End - 1).InsertBreak wdPageBreak
        oSec.Range.InsertAfter "Text on Page 7 (Section 3)"

        'Add the headers/footers for the third section (that contains
        ' two pages)
        oSec.Headers(wdHeaderFooterPrimary).LinkToPrevious = False
        oSec.Headers(wdHeaderFooterPrimary).Range.Text = _
              "Page6and7 -- Section 3 Primary Header Only"
        oSec.Footers(wdHeaderFooterPrimary).LinkToPrevious = False
        oSec.Footers(wdHeaderFooterPrimary).Range.Text = _
              "Page6and7 -- Section 3 Primary Footer Only"
         
        'Save the document
       ' .SaveAs App.Path & "\mydoc.doc"
        
    End With
    
    'Make Word visible to examine the document
    oApp.Visible = True
        
End Sub


Private Sub Document_New()

End Sub

Private Sub Document_Open()
    If g_debug = False Then
        ThisDocument.Activate
        Run
        ThisDocument.Save
    End If
End Sub


Attribute VB_Name = "Util"
'==================claide.tong====================
Public Function InitEnv() As Boolean
    On Error GoTo Err_Proc
    Dim node As Office.CustomXMLNode
    Dim strXmlPath As String
    
    InitEnv = False
    
    g_PreProcess = True
    
    Set g_XmlDoc = New MSXML2.DOMDocument30
    Set g_XmlDocAcc = New MSXML2.DOMDocument30
    
    g_strRootDir = ThisDocument.Path
    If g_strRootDir = "" Then
        MsgBox "can not get current path."
        Exit Function
    End If
    
    'get page Height
    g_PageHeight = ThisDocument.Sections(conSection_Report).PageSetup.PageHeight
    'get xml name
    strXmlPath = "\" + Left(Application.ActiveDocument, Len(Application.ActiveDocument) - 4) + "xml"
    AttachMyXml g_strRootDir + strXmlPath

    Set node = g_CustomXMLPart.SelectSingleNode("/root/InstallPath")
    If Not node Is Nothing Then
        g_strWWWRoot = node.Text
    End If
    
    Set anode = g_CustomXMLPart.SelectSingleNode("/root/AppTempPath")
    If Not anode Is Nothing Then
        g_strAppTemp = anode.Text
    End If
    
    Set pernode = g_CustomXMLPart.SelectSingleNode("/root/label/Permission")
    If Not pernode Is Nothing Then
        g_strPermission = pernode.Text
    End If
    
    Dim officeVerNode As Office.CustomXMLNode
    Set officeVerNode = g_CustomXMLPart.SelectSingleNode("/root/label/officever")
    If Not officeVerNode Is Nothing Then
        g_strOfficeVer = officeVerNode.Text
    End If
    
    If GetReportSetting = False Then
        MsgBox "Get Report Setting is Failed."
        Exit Function
    End If
    
    If GetReportFormatSettings = False Then
        MsgBox "Get Report Format Setting is Failed."
        Exit Function
    End If
    
    'pre process
    If g_PreProcess = True Then PreProcessData
    
    Set g_mapAssetPicure = New MStarMap
    Set g_mapSections = New MStarMap
    Set g_mapSectionsDisplay = New MStarMap
    Set g_mapCoverDir = New MStarMap
    
    'init picture for asset class
    g_mapAssetPicure.Add "/imgs/efStk.gif", "1601"
    g_mapAssetPicure.Add "/imgs/efIntStk.gif", "1602"
    g_mapAssetPicure.Add "/imgs/efbond.gif", "1603"
    g_mapAssetPicure.Add "/imgs/efCash.gif", "1604"
    g_mapAssetPicure.Add "/imgs/efRealEstate.gif", "1605"
    g_mapAssetPicure.Add "/imgs/efCommodities.gif", "1606"
    g_mapAssetPicure.Add "/imgs/efOther.gif", "1607"
    
    'init section
    AddSection conXPathCaption_Acconts, conTableKey_Acconts, conXPath_SecTag_Acconts
    AddSection conXPathCaption_Allocation, conTableKey_Allocation, conXPath_SecTag_Allocation
    AddSection conXPathCaption_SecList, conTableKey_SecList, conXPath_SecTag_SecList
    AddSection conXPathCaption_SecAllocation, conTableKey_SecAllocation, conXPath_SecTag_SecAllocation_S
    AddSection conXPathCaption_CurTarCompare, conTableKey_CurTarCompare, conXPath_SecTag_CurTarCompare
    AddSection conXPathCaption_AllocCompare, conTableKey_AllocCompare, conXPath_SecTag_AllocCompare
    AddSection conXPathCaption_BCMA, conTableKey_BCMA, conXPath_SecTag_BCMA
    AddSection conXPathCaption_DCMA, conTableKey_DCMA, conXPath_SecTag_DCMA
    AddSection conXPathCaption_AssetClassDetails, conTableKey_AssetClassDetails, conXPath_SecTag_AssetClassDetails
    AddSection conXPathCaption_OptimizationConstranints, conTableKey_OptimizationConstranints, conXPath_SecTag_OptimizationConstranints
    AddSection conXPathCaption_ExpectedRSC, conTableKey_ExpectedRSC, conXPath_SecTag_ExpectedRSC
    AddSection conXPathCaption_Pensions, conTableKey_Pensions, conXPath_SecTag_Pensions
    AddSection conXPathCaption_Income, conTableKey_Income, conXPath_SecTag_Income
    AddSection conXPathCaption_SecondaryIncome, conTableKey_SecondaryIncome, conXPath_SecTag_SecondaryIncome
    AddSection conXPathCaption_InsuranceBenefits, conTableKey_InsuranceBenefits, conXPath_SecTag_InsuranceBenefits
    AddSection conXPathCaption_IncomeSummary, conTableKey_IncomeSummary, conXPath_SecTag_IncomeSummary
    AddSection conXPathCaption_OtherIncome, conTableKey_OtherIncome, conXPath_SecTag_OtherIncome
    AddSection conXPathCaption_RetirementNeeds, conTableKey_RetirementNeeds, conXPath_SecTag_RetirementNeeds
    AddSection conXPathCaption_Education, conTableKey_Education, conXPath_SecTag_Education
    AddSection conXPathCaption_Expenses, conTableKey_Expenses, conXPath_SecTag_Expenses
    AddSection conXPathCaption_ExpenseSummary, conTableKey_ExpenseSummary, conXPath_SecTag_ExpenseSummary
    AddSection conXPathCaption_WealthTable, conTableKey_WealthTable, conXPath_SecTag_WealthTable
    AddSection conXPathCaption_ProposedPortfolio, conTableKey_ProposedPortfolio, conXPath_SecTag_ProposedPortfolio
    AddSection conXPathCaption_ActionPlan, conTableKey_ActionPlan, conXPath_SecTag_ActionPlan
    AddSection conXPathCaption_ActionPlanByAssetClass, conTableKey_ActionPlanByAssetClass, conXPath_SecTag_ActionPlanByAssetClass
    AddSection conXPathCaption_RegionalExposure, conTableKey_RegionalExposure, conXPath_SecTag_RegionalExposure
    AddSection conXPathCaption_MutualFundFees, conTableKey_MutualFundFees, conXPath_SecTag_MutualFundFees
    AddSection conXPathCaption_Performance, conTableKey_Performance, conXPath_SecTag_Performance
    AddSection conXPathCaption_RRStatistics, conTableKey_RRStatistics, conXPath_SecTag_RRStatistics
    AddSection conXPathCaption_MPTStatistics, conTableKey_MPTStatistics, conXPath_SecTag_MPTStatistics
    AddSection conXPathCaption_PerformanceofPS, conTableKey_PerformanceofPS, conXPath_SecTag_PerformanceofPS
'    AddSection conXPathCaption_LegalRegulatory, conTableKey_LegalRegulatory, conXPath_SecTag_LegalRegulatory
'    AddSection conXPathCaption_InvestmentES, conTableKey_InvestmentES, conXPath_SecTag_InvestmentES
    AddSection conXPathCaption_Agreement, conTableKey_Agreement, conXPath_SecTag_Agreement
    AddSection conXPathCaption_ForecastedWealth, conTableKey_ForecastedWealth, conXPath_SecTag_ForecastedWealth
    AddSection conXPathCaption_ForecastedReturns, conTableKey_ForecastedReturns, conXPath_SecTag_ForecastedReturns
    AddSection conXPathCaption_WealthForecast, conTableKey_WealthForecast, conXPath_SecTag_WealthForecast
    AddSection conXPathCaption_ProposedPortfolioEF, conTableKey_ProposedPortfolioEF, conXPath_SecTag_ProposedPortfolioEF
    AddSection conXPathCaption_EquityInvestmentStyle, conTableKey_EquityInvestmentStyle, conXPath_SecTag_EquityInvestmentStyle
    AddSection conXPathCaption_SectorAnalysis, conTableKey_SectorAnalysis, conXPath_SecTag_SectorAnalysis
    AddSection conXPathCaption_FixedIncomeIS, conTableKey_FixedIncomeIS, conXPath_SecTag_FixedIncomeIS
    AddSection conXPathCaption_CreditQuality, conTableKey_CreditQuality, conXPath_SecTag_CreditQuality
    AddSection conXPathCaption_InterestRR, conTableKey_InterestRR, conXPath_SecTag_InterestRR
    AddSection conXPathCaption_RiskQuestionnaire, conTableKey_RiskQuestionnaire, conXPath_SecTag_RiskQuestionnaire
    AddSection conXPathCaption_RiskProfile, conTableKey_RiskProfile, conXPath_SecTag_RiskProfile
    AddSection conXPathCaption_ClientsInformation, conTableKey_ClientsInformation, conXPath_SecTag_ClientsInformation
    AddSection conXPathCaption_AccountContributions, conTableKey_AccountContributions, conXPath_SecTag_AccountContributions
    AddSection conXPathCaption_EfficientFrontier, conTableKey_EfficientFrontier, conXPath_SecTag_EfficientFrontier
    AddSection conXPathCaption_AADisclosure, conTableKey_AADisclosure, conXPath_SecTag_AADisclosure
    AddSection conXPathCaption_WFMDisclosure, conTableKey_WFMDisclosure, conXPath_SecTag_WFMDisclosure
    AddSection conXPathCaption_RTQDisclosure, conTableKey_RTQDisclosure, conXPath_SecTag_RTQDisclosure
    AddSection conXPathCaption_PCMDisclosure, conTableKey_PCMDisclosure, conXPath_SecTag_PCMDisclosure
    
    AddSection conXPathCaption_WealthPercentiles, conTableKey_WealthPercentiles, conXPath_SecTag_WealthPercentiles
    AddSection conXPathCaption_ReturnPercentiles, conTableKey_ReturnPercentiles, conXPath_SecTag_ReturnPercentiles
    AddSection conXPathCaption_IncomeAndExpenses, conTableKey_IncomeAndExpenses, conXPath_SecTag_IncomeAndExpenses
    AddSection conXPathCaption_AdditionsAndWithdrawals, conTableKey_AdditionsAndWithdrawals, conXPath_SecTag_AdditionsAndWithdrawals
    AddSection conXPathCaption_WealthTaxes, conTableKey_WealthTaxes, conXPath_SecTag_WealthTaxes
    
    'Scenarios
    AddSection conXPathCaption_ComparisonScenarios, conTableKey_ComparisonScenarios, conXPath_SecTag_ComparisonScenarios
    AddSection conXPathCaption_ScenariosSummary, conTableKey_ScenariosSummary, conXPath_SecTag_SS_EfficientFrontier
    
    
    'If g_debug = True Then HideAllSection False

    InitEnv = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function

Public Sub AddSection(strID As String, strTableKey As String, strXPath As String)
    Dim sec As SectionSetting
    Dim arr(2) As String

    arr(0) = strID
    arr(1) = strTableKey
    arr(2) = strXPath

'    sec.ID = strID
'    sec.TableKey = strTableKey
'    sec.XPath = strXPath
    
    g_mapSections.Add arr, strID
End Sub

Public Sub AddDisplayedSection(strID As String, strTableKey As String, strXPath As String, strTitle As String, Optional isGroup As Boolean = False)
    Dim sec As SectionSetting
    Dim arr(4) As String

    arr(0) = strID
    arr(1) = strTableKey
    arr(2) = strXPath
    arr(3) = isGroup
    arr(4) = strTitle
  
    g_mapSectionsDisplay.Add arr, strID
End Sub


Public Sub UpdateHeaderStyle()
    Dim i As Integer
    For i = 1 To ThisDocument.Sections.Count
        ThisDocument.Sections(i).Headers(1).Range.Tables(1).Cell(1, 3).Range.Style = ThisDocument.Styles(g_arrStyleNames(conHeaderDetailsIdx))
    Next i
End Sub

Public Function Run() As Boolean
    On Error GoTo Err_Proc
    
    Run = False
    
'    Set g_mapTableIndex = New MStarMap
'    Call GetTableIndexMap

    If g_debug = True Then Call SetSavedFlag(False)
    If GetSavedFlag() = True Then Exit Function
    Call SetSavedFlag(True)
    
    If InitEnv = False Then Exit Function
    
    DisplayReportHeader
    DisplayReportFooter
    
    'hide all section
    'HideAllSection True
    DisplayReportSections
    
    DisplayReportCover
    HideAllNotDisplaySection

    'UpdateFooterStyle
    UpdateFooterStyle
    
    DeleteBlankPage
    
    're-update page number in Table of Contents
    reUpdateTableOfContents
    
    'Move to doc start
    MoveToDocStart
    
    Run = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function

'update page number for each section
Function reUpdateTableOfContents()

    Dim i  As Integer
    Dim k As Integer
    Dim arr() As String
    
    Dim nTableIndex As Integer
    nTableIndex = GetTableIndex(conTableKey_CoverDir)
    
    'if the report no contents,exit the function
    If nTableIndex < 0 Then
        Exit Function
    End If
    
    Dim m_table As Word.table
    Set m_table = ThisDocument.Tables(nTableIndex).Tables(1)
    
    Dim oCell As Cell
    
    Dim nCount  As Integer
    nCount = g_mapSectionsDisplay.Count

    k = 1
    For i = 1 To nCount
        arr = g_mapSectionsDisplay.GetItem(i)

        If arr(0) <> "H_IPS_4" And arr(0) <> "H_IR_6" Then
            'page
            Set oCell = m_table.Cell(k + 2, 3)
            oCell.Range.Text = CStr(Str2Int(GetTableInPage(arr(1), 0, False)))
            k = k + 1
        End If
         
    Next i
End Function

Function UpdateFooterStyle()
    Dim i As Integer
    For i = 1 To ThisDocument.Sections.Count
        ThisDocument.Sections(i).Footers(wdHeaderFooterPrimary).Range.Style = ThisDocument.Styles(g_arrStyleNames(conHeaderDetailsIdx))
    Next i
    
    If g_ReportSetting.bHasCover = False Then
        ThisDocument.Sections(1).Footers(wdHeaderFooterFirstPage).Range.Style = ThisDocument.Styles(g_arrStyleNames(conHeaderDetailsIdx))
    End If
    
    ThisDocument.Sections(2).Footers(wdHeaderFooterFirstPage).Range.Style = ThisDocument.Styles(g_arrStyleNames(conHeaderDetailsIdx))
End Function

Public Function AttachMyXml(ByRef strXMLFile As String) As Boolean
    'Dim oCustomXMLPart As Office.CustomXMLPart
    On Error GoTo Err_Proc
    Dim node As Office.CustomXMLNode
    
    Dim i As Integer
    Dim strXMLPartName As String
    
    AttachMyXml = False
    
    'check if have attached,if attach then delete it
    For i = 4 To ThisDocument.CustomXMLParts.Count
'        If ThisDocument.CustomXMLParts(i).XML = "" Then
'            ThisDocument.CustomXMLParts(i).Delete
'            Exit For
'        Else
'            Set node = ThisDocument.CustomXMLParts(i).SelectSingleNode("/root/" + conXPath_MyTag)
'            If Not node Is Nothing Then
'                ThisDocument.CustomXMLParts(i).Delete
'                Exit For
'            End If
'        End If
      ThisDocument.CustomXMLParts(4).Delete
    Next i
        
    Set g_CustomXMLPart = ThisDocument.CustomXMLParts.Add

    'load the XML file into the custom XML part.
    If g_CustomXMLPart.Load(strXMLFile) = False Then
        Exit Function
    End If
    
    g_XmlDoc.async = False
    g_XmlDoc.Load strXMLFile
    g_CustomXMLPart.AddNode g_CustomXMLPart.SelectSingleNode("root"), conXPath_MyTag
    
    AttachMyXml = True
    Exit Function
Err_Proc:
    MsgBox "Load file:" + strXMLFile + "Failed."
    Err.Clear
End Function


Public Function GetCursor_Page() As Integer
    GetCursor_Page = Selection.Information(wdActiveEndPageNumber)
End Function
Public Function GetCursor_Row() As Integer
    GetCursor_Row = Selection.Information(wdFirstCharacterLineNumber)
End Function

Public Function GetCursor_Col() As Integer
    GetCursor_Col = Selection.Information(wdFirstCharacterColumnNumber)
End Function

Public Function GetPages() As Integer
    GetPages = Selection.Information(wdNumberOfPagesInDocument)
End Function


Public Function SetCursor(page As Integer, row As Integer, col As Integer) As Boolean
    On Error Resume Next
    
    SetCursor = False
    
'    ThisDocument.Sections(conSection_Report).Range.Select
'    Selection.MoveLeft Unit:=wdCharacter, Count:=1
    Selection.Information(wdActiveEndPageNumber) = page
    Selection.Information(wdFirstCharacterLineNumber) = row
    Selection.Information(wdFirstCharacterColumnNumber) = col
    SetCursor = True
    
End Function

Sub MoveToCurrentLineStart()
    '|fffd||1b6||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1f0||fffd||fffd||fffd||fffd|
    Selection.HomeKey Unit:=wdLine
End Sub
Sub MoveToCurrentLineEnd()
    '|fffd||1b6||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1f0||fffd||fffd||3b2|
    Selection.EndKey Unit:=wdLine
End Sub
Sub SelectToCurrentLineStart()
    '|461||fffd||fffd||4f9||fffd||fffd||fffd||fffd||fffd||fffd||1f0||fffd||fffd||fffd||5f5||fffd||fffd||fffd||fffd||fffd|
    Selection.HomeKey Unit:=wdLine, Extend:=wdExtend
End Sub
Sub SelectToCurrentLineEnd()
    '|461||fffd||fffd||4f9||fffd||fffd||fffd||fffd||fffd||fffd||1f0||fffd||fffd||3b2||fffd||fffd||fffd||fffd||fffd||fffd|
    Selection.EndKey Unit:=wdLine, Extend:=wdExtend
End Sub
Sub SelectCurrentLine()
    '|461||fffd||fffd||1f0||fffd||fffd|
    Selection.HomeKey Unit:=wdLine
    Selection.EndKey Unit:=wdLine, Extend:=wdExtend
End Sub
Sub MoveToDocStart()
    '|fffd||1b6||fffd||fffd||fffd||fffd||fffd||fffd||fffd||135||fffd||fffd||fffd||2bc|
    'SetCursor 3, 1, 1
    ThisDocument.Sections(conSection_Report).Range.Select
    Selection.MoveLeft Unit:=wdCharacter, Count:=1

    'Selection.HomeKey Unit:=wdStory
End Sub
Sub MoveToDocEnd()
    '|fffd||1b6||fffd||fffd||fffd||fffd||fffd||fffd||fffd||135||fffd||fffd||fffd||3b2|
    Selection.EndKey Unit:=wdStory
End Sub
Sub SelectToDocStart()
    '|461||fffd||fffd||4f9||fffd||fffd||fffd||fffd||fffd||135||fffd||fffd||fffd||2bc||fffd||fffd||fffd||fffd||fffd||fffd|
    Selection.HomeKey Unit:=wdStory, Extend:=wdExtend
End Sub
Sub SelectToDocEnd()
    '|461||fffd||fffd||4f9||fffd||fffd||fffd||fffd||fffd||135||fffd||fffd||fffd||3b2||fffd||fffd||fffd||fffd||fffd||fffd|
    Selection.EndKey Unit:=wdStory, Extend:=wdExtend
End Sub
Sub SelectDocAll()
    '|461||fffd||fffd||fffd||135||fffd||22b||fffd||fffd||fffd||fffd||fffd||763||fffd||fffd||fffd|WholeStory|fffd||272||b3||fffd|Story|4e6||fffd||1f5||fffd||1f0||fffd||135||fffd||fffd||fffd||fffd||fffd||2fc||fffd||fffd|
    Selection.WholeStory
End Sub
Sub MoveToCurrentParagraphStart()
    '|fffd||1b6||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1f0||fffd||fffd||fffd||fffd||13f||fffd||2bc|
    Selection.MoveUp Unit:=wdParagraph
End Sub
Sub MoveToCurrentParagraphEnd()
    '|fffd||1b6||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1f0||fffd||fffd||fffd||fffd||13d||fffd||3b2|
    Selection.MoveDown Unit:=wdParagraph
End Sub
Sub SelectToCurrentParagraphStart()
    '|461||fffd||fffd||4f9||fffd||fffd||fffd||fffd||fffd||fffd||1f0||fffd||fffd||fffd||4fea||2bc||fffd||fffd||fffd||fffd||fffd||fffd|
    Selection.MoveUp Unit:=wdParagraph, Extend:=wdExtend
End Sub
Sub SelectToCurrentParagraphEnd()
    '|461||fffd||fffd||4f9||fffd||fffd||fffd||fffd||fffd||fffd||1f0||fffd||fffd||fffd||fffd||fffd||3b2||fffd||fffd||fffd||fffd||fffd||fffd|
    Selection.MoveDown Unit:=wdParagraph, Extend:=wdExtend
End Sub
Sub SelectCurrentParagraph()
    '|461||fffd||fffd||fffd||fffd||fffd||fffd||fffd||6b6||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Selection.MoveUp Unit:=wdParagraph
    Selection.MoveDown Unit:=wdParagraph, Extend:=wdExtend
End Sub
Sub DisplaySelectionStartAndEnd()
    '|fffd||fffd||2be||461||fffd||fffd||fffd||fffd||fffd||13f||fffd||2bc||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3bb||fffd||e3||fffd||5e2||fffd||28fa||fffd||135||fffd||fffd||fffd|1|fffd||fffd||fffd||5b7||fffd||fffd||fffd||3bb||fffd||fffd||fffd||fffd|0
    MsgBox ("|fffd||fffd|" & Selection.Start & "|fffd||fffd||fffd||5b7||fffd||fffd||fffd||fffd||fffd|" & Selection.End & "|fffd||fffd||fffd||5b7||fffd|")
End Sub
Sub DeleteCurrentLine()
    '|27e||fffd||fffd||fffd||fffd||1f0||fffd||fffd|
    Selection.HomeKey Unit:=wdLine
    Selection.EndKey Unit:=wdLine, Extend:=wdExtend
    Selection.Delete
End Sub
Sub DeleteCurrentParagraph()
    '|27e||fffd||fffd||fffd||fffd||1f0||fffd||fffd||fffd||fffd|
    Selection.MoveUp Unit:=wdParagraph
    Selection.MoveDown Unit:=wdParagraph, Extend:=wdExtend
    Selection.Delete
End Sub

Sub AddBlankRowToEnd()
    Selection.Paragraphs.Add
End Sub
Public Function TestChart() As Boolean

'    Dim dom As Office.CustomXMLPart
'
'    Set dom = ThisDocument.CustomXMLParts.Add
'    If dom.Load("D:\awd3.0\debuggerpath\WWWRoot\Report\xsl\EFrontResult.xsl") = False Then
'        Exit Function
'    End If
    
    Dim mstb As MStarGrid
    Dim tb As Word.table

    Set tb = ThisDocument.Tables(1)
        
    If tb Is Nothing Then Exit Function
    Set mstb = New MStarGrid
    
    mstb.AttachToTableWithIndex 1, 0
    mstb.SetData 3, 5, "134"
    mstb.VisibleGridLine True
    mstb.SetColWidth 0, 220
    mstb.SetColWidth 1, 68
    mstb.SetRowHeight 0, 40
    mstb.SetData 1, 1, "134"
    
    Dim msXmlTb As MStarXmlGrid
    Set msXmlTb = New MStarXmlGrid
    msXmlTb.AttachToTableWithIndex 1, 0
    msXmlTb.SetDataXPath "/root/Accounts"
    msXmlTb.FillGrid
        
End Function

Public Function GetXmlAttrValue(ByRef strAttrName As String, node As Office.CustomXMLNode) As String
    Dim i As Integer
    GetXmlAttrValue = ""
    
    For i = 1 To node.Attributes.Count
        If node.Attributes(i).BaseName = strAttrName Then
            GetXmlAttrValue = node.Attributes(i).NodeValue
        End If
    Next i
    
End Function
Public Function BindContentControlWithXml(strContentControlName As String, strXmlPath As String, Optional fsIndex As Integer = 0, Optional isBold As Boolean = False, Optional setStyle As Boolean = True) As Boolean
    On Error GoTo Err_Proc
    Dim strXPath As String
    Dim myCC As Word.ContentControl
    Dim oCCs As Word.ContentControls
    Dim i As Integer

    
    BindContentControlWithXml = False
    Set oCCs = ThisDocument.SelectContentControlsByTag(strContentControlName)
    If oCCs.Count >= 1 Then
        For i = 1 To oCCs.Count
            Set myCC = oCCs(i)
            If fsIndex > 0 Then
                If setStyle = True Then
                     myCC.Range.Style = ThisDocument.Styles(g_arrStyleNames(fsIndex))
                End If
                myCC.Range.Font.Size = ThisDocument.Styles(g_arrStyleNames(fsIndex)).Font.Size
                myCC.Range.Font.name = ThisDocument.Styles(g_arrStyleNames(fsIndex)).Font.name
                If isBold = False Then
                    myCC.Range.Font.Bold = ThisDocument.Styles(g_arrStyleNames(fsIndex)).Font.Bold
                Else
                    myCC.Range.Font.Bold = True
                End If
                If fsIndex = conHeaderDetailsIdx Then
                    myCC.Range.Tables(1).Cell(1, 2).Range.Style = ThisDocument.Styles(g_arrStyleNames(conHeaderDetailsIdx))
                    myCC.Range.Tables(1).Cell(1, 2).Range.ParagraphFormat.Alignment = wdAlignParagraphRight
                End If
            End If
            myCC.XMLMapping.SetMapping strXmlPath
        Next i
        BindContentControlWithXml = True
    End If
    
    Exit Function
Err_Proc:
    MsgBox Err.Description
  
End Function


Public Function BindContentControlWithText(strContentControlName As String, strText As String, Optional fsIndex As Integer = 0) As Boolean
    On Error GoTo Err_Proc
    Dim strXPath As String
    Dim myCC As Word.ContentControl
    Dim oCCs As Word.ContentControls
    Dim i As Integer

    BindContentControlWithText = False
    Set oCCs = ThisDocument.SelectContentControlsByTag(strContentControlName)
    If oCCs.Count >= 1 Then
        For i = 1 To oCCs.Count
            Set myCC = oCCs(i)
            If fsIndex > 0 Then
                myCC.Range.Style = ThisDocument.Styles(g_arrStyleNames(fsIndex))
                myCC.Range.Font.Size = ThisDocument.Styles(g_arrStyleNames(fsIndex)).Font.Size
                myCC.Range.Font.name = ThisDocument.Styles(g_arrStyleNames(fsIndex)).Font.name
                myCC.Range.Font.Bold = ThisDocument.Styles(g_arrStyleNames(fsIndex)).Font.Bold
            End If
            myCC.XMLMapping.SetMapping ""
            myCC.Range.Text = strText
        Next i
        BindContentControlWithText = True
    End If
    
    Exit Function
Err_Proc:
    MsgBox Err.Description
  
End Function

Public Function SetTableCellStyle(tableIndex As Integer, nRow As Integer, nCol As Integer, fsIndex As Integer)
    SetTableCellStyle = False
    
    Dim sTable As Word.table
    Set sTable = ThisDocument.Tables(tableIndex)
    
    Dim oCell As Cell
    Set oCell = sTable.Cell(nRow, nCol)
    
'    Dim rptFormat As ReportFormatSetting
'    rptFormat = g_arrFormatSettings(fsIndex)
'
'    oCell.Range.Font.Name = rptFormat.FontName
'    oCell.Range.Font.Size = rptFormat.FontSize
'
'    If (rptFormat.ForeColor <> 0) Then
'        oCell.Range.Font.Color = rptFormat.ForeColor
'    End If
'    oCell.Range.Font.Bold = rptFormat.Bold
'    oCell.Range.Font.Italic = rptFormat.Italic
'    oCell.Range.Font.UnderLine = rptFormat.UnderLine
'    oCell.Range.Font.StrikeThrough = rptFormat.StrikeOut
'    If (rptFormat.BackColor <> 0) Then
'        oCell.Range.Font.Shading.BackgroundPatternColor = rptFormat.BackColor
'    End If
    oCell.Range.Style = ThisDocument.Styles(g_arrStyleNames(fsIndex))
    oCell.Range.Font.Size = ThisDocument.Styles(g_arrStyleNames(fsIndex)).Font.Size
    oCell.Range.Font.name = ThisDocument.Styles(g_arrStyleNames(fsIndex)).Font.name
    oCell.Range.Font.Bold = ThisDocument.Styles(g_arrStyleNames(fsIndex)).Font.Bold
    
    SetTableCellStyle = True
End Function

Public Function GetSectionTable(strContentControlName As String) As Boolean
    On Error GoTo Err_Proc
    Dim strXPath As String
    Dim myCC As Word.ContentControl
    Dim oCCs As Word.ContentControls
    Dim table As Word.table
    
    GetSectionTable = False
    Set oCCs = ThisDocument.SelectContentControlsByTag(strContentControlName)
    If oCCs.Count >= 1 Then
        Set myCC = oCCs(1)
        
        Set table = myCC.Parent
        GetSectionTable = True
    End If
    
    Exit Function
Err_Proc:
    MsgBox Err.Description
  
End Function



Function VisibleGridLine(nIndex As Integer, bVisible As Boolean) As Boolean
    On Error GoTo Err_Proc
    
    Dim table As Word.table
    Dim i  As Integer
    Dim nMaxBorder  As Integer

    VisibleGridLine = False
    
    Set table = ThisDocument.Tables(nIndex)
    If table Is Nothing Then
        Exit Function
    End If
    
    nMaxBorder = 6
    If nMaxBorder > table.Borders.Count Then nMaxBorder = table.Borders.Count
    
    For i = 1 To nMaxBorder
        table.Borders(i).Visible = bVisible
    Next i
       
    VisibleGridLine = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function

Sub ShowHideTable(nIndexL1 As Integer, nIndexL2 As Integer, bVisible As Boolean)
    If nIndexL2 < 1 Then
        'ThisDocument.Tables(nIndexL1).Select
        ThisDocument.Tables(nIndexL1).Range.Font.Hidden = Not bVisible

    Else
        'ThisDocument.Tables(nIndexL1).Tables(nIndexL2).Select
        ThisDocument.Tables(nIndexL1).Range.Font.Hidden = Not bVisible
    End If
    
    Exit Sub
    If bVisible = False Then
        With Selection.Font
            .Hidden = True
        End With
        With ActiveWindow.View
            .ShowHiddenText = False
            '.ShowAll = False
        End With
    Else
        With Selection.Font
            .Hidden = False
        End With
        With ActiveWindow.View
            .ShowHiddenText = True
            '.ShowAll = True
        End With
'        With Selection
'            .Collapse direction:=wdCollapseStart
'            .MoveLeft Unit:=wdCharacter, Count:=1
'        End With
    End If
End Sub

Sub FocusTable(nIndexL1 As Integer, nIndexL2 As Integer)
    If nIndexL2 < 1 Then
        ThisDocument.Tables(nIndexL1).Select
    Else
        ThisDocument.Tables(nIndexL1).Tables(nIndexL2).Select
    End If
    With Selection
        .MoveLeft Unit:=wdCharacter, Count:=1
    End With
End Sub

Sub LostFocusTable(nIndexL1 As Integer, nIndexL2 As Integer)
    If nIndexL2 < 1 Then
        ThisDocument.Tables(nIndexL1).Select
    Else
        ThisDocument.Tables(nIndexL1).Tables(nIndexL2).Select
    End If
    With Selection
        .MoveRight Unit:=wdCharacter, Count:=1
    End With
End Sub
Sub FocusTableEx(nIndexL1 As Integer, nIndexL2 As Integer, nIndexL3 As Integer)
    If nIndexL2 < 1 Then
        ThisDocument.Tables(nIndexL1).Select
    Else
        If nIndexL3 < 1 Then
            ThisDocument.Tables(nIndexL1).Tables(nIndexL2).Select
        Else
            ThisDocument.Tables(nIndexL1).Tables(nIndexL2).Tables(nIndexL3).Select
        End If
    End If
    With Selection
        .MoveLeft Unit:=wdCharacter, Count:=1
    End With
End Sub


Function GetTableIndex(strSecTag As String) As Integer
    On Error GoTo Err_Proc
    
    Dim table As Word.table
    Dim i As Integer
    Dim strTemp As String
    Dim nTemp As String
    
    GetTableIndex = -1
    i = -1
'    i = g_mapTableIndex.Item(strSecTag)
'    If i > 0 Then
'        GetTableIndex = i
'        Exit Function
'    End If
    For i = 1 To ThisDocument.Tables.Count
        Set table = ThisDocument.Tables(i)
'        If Trim(Left(table.Cell(1, 1).Range, conSecMaxKeyLen)) = strSecTag Then
'            GetTableIndex = i
'            Exit Function
'        End If
        strTemp = Trim(table.Cell(1, 1).Range)
        nTemp = InStr(1, strTemp, Chr(13))
        If nTemp > 0 Then
            strTemp = Left(strTemp, nTemp - 1)
        End If
        If strTemp = strSecTag Then
            GetTableIndex = i
            Exit Function
        End If
    Next i
       
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function

Function GetTitleXPath(strTitleTag As String) As String
    On Error GoTo Err_Proc
    
    GetTitleXPath = "//report[@currpt='" + g_ReportSetting.ReportType + "']/sections/sub[@id ='" + strTitleTag + "']/@title"
       
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function
Function GetGroupXPath(strTitleTag As String) As String
    On Error GoTo Err_Proc
    
    GetGroupXPath = "//report[@currpt='" + g_ReportSetting.ReportType + "']/group/g[@id ='" + strTitleTag + "']/@title"
       
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function
Function GetTextXPath(strTitleTag As String) As String
    On Error GoTo Err_Proc
    
    GetTextXPath = "//report[@currpt='" + g_ReportSetting.ReportType + "']/sections/sub[@id ='" + strTitleTag + "']"
       
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function

Function MSStr2Int(strText As String) As Integer
    On Error GoTo Err_Proc
    MSStr2Int = 0
    Dim i As Integer
    i = CInt(strText)
    MSStr2Int = i
    Exit Function
Err_Proc:
    MSStr2Int = -1
End Function

Function IsDouble(strText As String) As Boolean
    On Error GoTo Err_Proc
    IsDouble = True
    
    If g_strPermission = "ITA" Then
        strText = Replace(strText, ".", ",")
    End If
    
    Dim dbValue As Double
    dbValue = CDbl(strText)
    IsDouble = True
    Exit Function
Err_Proc:
    IsDouble = False
End Function

Function MSFormatDate(strDate As String, Optional BreakChar As String = "/") As String
    On Error GoTo Err_Proc
    
    MSFormatDate = strDate
    
    ' month
    Dim strMonth As String
    Dim nPosMonth As Long
    nPosMonth = InStr(1, strDate, BreakChar, vbTextCompare)
    If nPosMonth <= 0 Then
        Exit Function
    End If
    strMonth = Left(strDate, nPosMonth - 1)
    
    'day
    Dim strDay As String
    Dim nPosDay As Long
    nPosDay = InStr(nPosMonth + 1, strDate, BreakChar, vbTextCompare)
    If nPosDay <= 0 Then
        Exit Function
    End If
    strDay = Mid(strDate, nPosMonth + 1, nPosDay - nPosMonth - 1)
    
    ' year
    Dim strYear As String
    strYear = Right(strDate, Len(strDate) - nPosDay)
    
    ' Trans from YYYY-MM-DD to system format
    MSFormatDate = FormatDateTime(strYear + "-" + strMonth + "-" + strDay, vbShortDate)
    
    Exit Function
Err_Proc:
    
End Function

Function FormatNumber(strText As String, dec As Integer, Optional IsFormatKMBT As Boolean = False, Optional IsLangCHS As Boolean = False) As String
    On Error GoTo Err_Proc

    Dim strZero As String
    Dim strFormat As String

    Dim isDbl As Boolean
    isDbl = IsDouble(strText)
    If isDbl = False Then
        If IsDate(strText) = True Then
            FormatNumber = MSFormatDate(strText)
        Else
            FormatNumber = strText
        End If
        Exit Function
    End If
    
    FormatNumber = strText
    
    ' Detect the string
    ' if it is double type, deal it specially
    If isDbl Then
        If IsFormatKMBT Then
            FormatNumber = FormatNumber_KMBT(strText, IsLangCHS)
        Else
            strZero = Left("0000000000000000000000000000000", dec)
            
            If g_strPermission = "ITA" Then
                strText = Replace(strText, ".", ",")
            End If
            strFormat = "#,##0"
            If dec > 0 Then
                strFormat = strFormat + "." + strZero
            End If
            
            FormatNumber = Format(strText, strFormat)
        End If
    End If
     
    Exit Function
Err_Proc:
    'MsgBox Err.Description
End Function

Function FormatNumber_KMBT(strText As String, IsLangCHS As Boolean) As String
    On Error GoTo Err_Proc
    
    Dim strFormat As String
    Dim strValue As String
    Dim strSufx As String
    Dim dbValue As Double
    Dim strPrex As String
    strPrex = ""
    
    FormatNumber_KMBT = ""
            
    If g_strPermission = "ITA" Then
        strText = Replace(strText, ".", ",")
    End If
    dbValue = CDbl(strText)
    
    If dbValue < 0 Then
        dbValue = 0 - dbValue
        strPrex = "-"
    End If
    
    ' CHS LANGUAGE
    If IsLangCHS = True Then
        If dbValue < 10000 Then
            strSufx = ""
            strValue = CStr(dbValue)
        ElseIf dbValue < 100000000 Then
            strSufx = "|fffd||fffd|"
            strValue = CStr(dbValue / 10000)
        ElseIf dbValue < 1000000000000# Then
            strSufx = "|fffd||fffd|"
            strValue = CStr(dbValue / 100000000)
        Else
            strSufx = "|fffd||fffd||fffd||fffd|"
            strValue = CStr(dbValue / 1000000000000#)
        End If
    ' OTHER LANGUAGE
    Else
        If dbValue < 1000 Then
            strSufx = ""
            strValue = CStr(dbValue)
        ElseIf dbValue < 1000000 Then
            strSufx = "K"
            strValue = CStr(dbValue / 1000)
        ElseIf dbValue < 1000000000 Then
            strSufx = "M"
            strValue = CStr(dbValue / 1000000)
        ElseIf dbValue < 1000000000000# Then
            strSufx = "B"
            strValue = CStr(dbValue / 1000000000)
        Else
            strSufx = "T"
            strValue = CStr(dbValue / 1000000000000#)
        End If
    End If
        
    strFormat = strPrex + "#,##0.0" + strSufx
    
    FormatNumber_KMBT = Format(strValue, strFormat)
     
    Exit Function
Err_Proc:
    'MsgBox Err.Description
End Function

Function InsertPicture(strPicPath As String) As Boolean
   ' Dim picConctrol As ContentControl
    
   ' Set picConctrol = ThisDocument.ContentControls.Add(wdContentControlPicture)
    
   ' picConctrol.XMLMapping.SetMapping g_strWWWRoot + strPicPath
    Dim picConctrol As InlineShape
    Set picConctrol = Selection.InlineShapes.AddPicture(FileName:=g_strWWWRoot + strPicPath, LinkToFile:=True)

End Function

Public Function GetXmlValue(strXPath As String) As String
    On Error GoTo Err_Proc
    Dim node As Office.CustomXMLNode
    
    GetXmlValue = ""

    Set node = g_CustomXMLPart.SelectSingleNode(strXPath)
    If Not node Is Nothing Then
        GetXmlValue = node.Text
    End If
    Exit Function
Err_Proc:
    Err.Clear
End Function


Public Function IsShowRiskProfile() As Boolean
    On Error Resume Next
    
    Dim curid As String
    curid = GetXmlValue("root/RiskandQuestionaire/root/riskprofile/@current")
    
    ' Use 1003 to identify UK version
    'If (g_strPermission = "ENG") Then
    ' For UK version
    If (curid = "1003") Then
        Dim chartIdx As String
        chartIdx = GetXmlValue("root/RiskandQuestionaire/root/riskprofile/@chartIndex")
        
        If (CInt(chartIdx) >= 0) Or (IsShowRiskQuestionare = True) Then
            IsShowRiskProfile = True
        Else
            IsShowRiskProfile = False
        End If
        Exit Function
    Else ' For Non-UK version
        Dim vSum As String
        Dim vAdv As String
        Dim vques As String
        Dim sumPath As String
        Dim advPath As String
        'Dim curid As String
        
        'curid = GetXmlValue("root/RiskandQuestionaire/root/riskprofile/@current")
        sumPath = "root/RiskandQuestionaire/root/riskprofile/risk[@id='" + curid + "']/sum/r[@id='4']"
        advPath = "root/RiskandQuestionaire/root/riskprofile/risk[@id='" + curid + "']/advisorSelect/r[@id='4']"
        vSum = GetXmlValue(sumPath)
        vAdv = GetXmlValue(advPath)
        If vSum <> "" Or vAdv <> "" Then
            IsShowRiskProfile = True
        Else
            IsShowRiskProfile = False
            Exit Function
        End If
    End If
    
    IsShowRiskProfile = True
    
End Function

Public Function IsShowRiskQuestionare() As Boolean
    On Error Resume Next
   
    Dim vQue As String

    Dim QuePath As String
    Dim Qcurid As String
    
    Qcurid = GetXmlValue("root/RiskandQuestionaire/root/riskprofile/@current")
    QuePath = "root/RiskandQuestionaire/root/riskprofile/risk[@id='" + Qcurid + "']/score/r[@id='4']"
    
    vQue = GetXmlValue(QuePath)

    If vQue <> "" Then
        IsShowRiskQuestionare = True
    Else
        IsShowRiskQuestionare = False
        Exit Function
    End If
    
    IsShowRiskQuestionare = True
    
End Function

Public Function IsShowScenarios() As Boolean
    On Error Resume Next

    IsShowScenarios = False
    
    Dim value As String
    value = GetXmlValue("root/scenarios/@hide")

    If value = "0" Then
        IsShowScenarios = True
        Exit Function
    End If
    
End Function

Public Function CheckData(strSecID As String) As Boolean
    On Error Resume Next
   
    
    If strSecID = "4_2" Then
        CheckData = IsShowRiskProfile
        Exit Function
    End If
    
    If strSecID = "4_1" Then
        CheckData = IsShowRiskQuestionare
        Exit Function
    End If
    
    If ((strSecID = "2_8") Or (strSecID = "2_9")) Then
        CheckData = IsShowScenarios
        Exit Function
    End If
    
    
    CheckData = True
    
End Function

Public Function MoveTable(strTableKey As String, nRow As Integer, nPage As Integer) As Boolean
    On Error Resume Next
    Dim nTableIndex As Integer
    nTableIndex = GetTableIndex(conTableKey_Income)
    If nTableIndex = -1 Then Exit Function

    MoveTable = False
    
    ThisDocument.Tables(tableIndex).Select
        Selection.Information(wdActiveEndPageNumber) = nPage
        Selection.Information(wdFirstCharacterLineNumber) = nRow
        'Selection.Information(wdFirstCharacterColumnNumber) = col
    MoveTable = True
    
    AddBlankRowToEnd
End Function

Sub HideAllSection(bVisible As Boolean)
    Dim i As Integer
    
    Dim nTableIndex1 As Integer
    Dim nTableIndex2 As Integer
    nTableIndex1 = GetTableIndex(conTableKey_Cover)
    nTableIndex2 = GetTableIndex(conTableKey_CoverDir)
    
    For i = 1 To ThisDocument.Tables.Count
        If nTableIndex1 <> i And nTableIndex2 <> i Then
           ShowHideTable i, 0, Not bVisible
        End If
    Next i
End Sub

Sub GetTableIndexMap()
    Dim table As Word.table
    Dim i As Integer
    Dim strTemp As String
    Dim nTemp As String
    
    'HideAllSection True
    For i = 1 To ThisDocument.Tables.Count
        Set table = ThisDocument.Tables(i)
        strTemp = Trim(table.Cell(1, 1).Range)
        nTemp = InStr(1, strTemp, Chr(13))
        If nTemp > 0 Then
            strTemp = Left(strTemp, nTemp - 1)
        End If
        
        g_mapTableIndex.Add i, strTemp
    Next i
End Sub

Public Function MoveTableToDocStart(strTableKey As String) As Boolean
    On Error Resume Next
    MoveTableToDocStart = False
    
    Dim nTableIndex As Integer
    nTableIndex = GetTableIndex(strTableKey)
    If nTableIndex = -1 Then Exit Function

    ThisDocument.Tables(nTableIndex).Select
        Selection.Cut
    MoveToDocStart
    'AddBlankRowToEnd
    'MoveToDocStart
    Selection.Paste
    MoveTableToDocStart = True
End Function

Public Function InsertNewPage(nPage As Integer) As Boolean
    On Error Resume Next
    InsertNewPage = False
    
    'MoveToDocStart
    SetCursor nPage, 1, 1
    Dim oRange As Range
    Set oRange = ThisDocument.Range
    With oRange
      .Collapse Direction:=wdCollapseStart
      .InsertBreak Type:=wdPageBreak
    End With
    InsertNewPage = True
End Function

Public Function VisibleCover(bVisible As Boolean) As Boolean
    On Error GoTo Err_Proc
    VisibleCover = False
    
    If bVisible = False Then ThisDocument.Sections(conSection_Cover).Range.Font.Hidden = Not bVisible
    If bVisible = True Then
        ThisDocument.Sections(conSection_Cover).Headers(wdHeaderFooterFirstPage).Range = ""
        ThisDocument.Sections(conSection_Cover).Footers(wdHeaderFooterFirstPage).Range = ""
    End If

    VisibleCover = True
    Exit Function
Err_Proc:
    Err.Clear

End Function

Public Function IsDisclosureSection(strTableKey As String) As Boolean
    On Error GoTo Err_Proc
    IsDisclosureSection = False
    
    If ((strTableKey = conTableKey_AADisclosure) Or (strTableKey = conTableKey_WFMDisclosure) Or (strTableKey = conTableKey_RTQDisclosure) Or (strTableKey = conTableKey_PCMDisclosure)) Then
        IsDisclosureSection = True
    End If
Err_Proc:
    Err.Clear
End Function



Public Function IsPercentilesSection(strTableKey As String) As Boolean
    On Error GoTo Err_Proc
    IsPercentilesSection = False
    
    If ((strTableKey = conTableKey_WealthPercentiles) Or (strTableKey = conTableKey_ReturnPercentiles)) Then
        IsPercentilesSection = True
    End If
Err_Proc:
    Err.Clear
End Function

Public Function MoveTableAfterTable(strTableKey As String, strTableKeyToAfter As String, Optional isUserDef As Boolean = False, Optional bGroup As Boolean = False, Optional nextSecId = "") As Boolean
    On Error Resume Next
    MoveTableAfterTable = False
    'Dim dbTableHeight As Double
    Dim nTableIndex As Integer
    
    'test----
    If g_adjustLayout = True And g_debug = True Then
        MoveTableAfterTable = True
        Exit Function
    End If
    '---------
    
    'dbTableHeight = 0
    If isUserDef = False Then
        If bGroup = True Then
            nTableIndex = GetTableIndex(conTableKey_Group)
        Else
            nTableIndex = GetTableIndex(strTableKey)
        End If
    Else
        nTableIndex = GetTableIndex(conTableKey_TextOnly)
    End If
    If nTableIndex = -1 Then Exit Function
    
    Dim nTableIndexAfter As Integer
    nTableIndexAfter = GetTableIndex(strTableKeyToAfter)
    If nTableIndexAfter = -1 And strTableKeyToAfter <> "" Then Exit Function
    
    'Application.ScreenUpdating = False
    
'    If strTableKey <> "" Then
'        dbTableHeight = GetTableSize(nTableIndex)
'    End If
    If isUserDef = False And bGroup = False Then
            ThisDocument.Tables(nTableIndex).Select
            Selection.Cut
    Else
        ThisDocument.Tables(nTableIndex).Tables(1).Select
            Selection.Copy
    End If
    
    If strTableKeyToAfter <> "" Then
        If (IsDisclosureSection(strTableKeyToAfter)) Then
            With ThisDocument
                .Range(.Tables(nTableIndexAfter).Range.Start, .Tables(nTableIndexAfter + 1).Range.End).Select
            End With
        Else
            ThisDocument.Tables(nTableIndexAfter).Select
        End If
        
        With Selection
            .MoveRight Unit:=wdCharacter, Count:=1
        End With
        
        Selection.TypeParagraph
'        'check table suitable
'        If IsTableSuitable(dbTableHeight) = False Then
'            Selection.InsertBreak Word.WdBreakType.wdPageBreak
'        End If
        
'        AddBlankRowToEnd
'        With Selection
'            .MoveRight Unit:=wdCharacter, Count:=1
'        End With
    Else
        MoveToDocStart
    End If


    'g_mapCoverDir.Add CStr(Selection.Information(wdActiveEndPageNumber)), strTableKey
    'For Project #777
    Dim IsInsertBreak As Boolean
    IsInsertBreak = False
    
    Dim IsPrevDisclosure As Boolean
    Dim IsDisclosure As Boolean
    IsPrevDisclosure = IsDisclosureSection(strTableKeyToAfter)
    IsDisclosure = IsDisclosureSection(strTableKey)
    
    Dim IsPercentilesSec As Boolean
    IsPercentilesSec = IsPercentilesSection(strTableKey)
    Dim IsPrevPercentilesSec As Boolean
    IsPrevPercentilesSec = IsPercentilesSection(strTableKeyToAfter)
    
    Dim isRisk As Boolean

    If ((strTableKeyToAfter = conTableKey_RiskProfile) Or (strTableKeyToAfter = conTableKey_RiskQuestionnaire)) Then
        isRisk = True
    End If
    
    If (strTableKeyToAfter <> "") Then
        If (isGroup(strTableKeyToAfter) = False And (IsDisclosure = True Or (strTableKey = conTableKey_ScenariosSummary) Or (isRisk = True) Or (IsPercentilesSec = True))) Then
            IsInsertBreak = True
        Else
            If (bGroup = True And (Left(nextSecId, 3) = "10_") Or (nextSecId = "6_3") Or (nextSecId = "6_4") Or (nextSecId = conTableKey_ScenariosSummary)) Then
                    IsInsertBreak = True
            Else
                If ((IsPrevDisclosure = True) Or (IsPrevPercentilesSec = True)) Then
                    IsInsertBreak = True
                End If
            End If
        End If
        
        If (IsInsertBreak = True) Then
            Selection.InsertBreak wdPageBreak
        End If
    End If
    
    If (IsPrevDisclosure) Then
        ThisDocument.Range(Start:=Selection.Start, End:=Selection.Start). _
            InsertBreak Type:=wdSectionBreakNextPage
        Selection.Start = Selection.Start + 1
        With Selection.PageSetup.TextColumns
            .SetCount NumColumns:=1
            .EvenlySpaced = True
            .LineBetween = False
            .Width = InchesToPoints(3.61)
            .Spacing = InchesToPoints(0.5)
        End With
    End If
    
    Selection.Paste

    'Application.ScreenUpdating = True

    MoveTableAfterTable = True
End Function

Public Function SetSavedFlag(bSaved As Boolean) As Boolean
    On Error Resume Next
    SetSavedFlag = False
    
    Dim nTableIndex As Integer
    
    nTableIndex = GetTableIndex(conTableKey_Cover)
    If nTableIndex = -1 Then Exit Function 'nTableIndex = conTableIndex_Allocation_LV1
    
    If bSaved = True Then
        ThisDocument.Tables(nTableIndex).Cell(1, 2).Range.Text = "1"
    Else
        ThisDocument.Tables(nTableIndex).Cell(1, 2).Range.Text = "0"
    End If
    
    SetSavedFlag = True
End Function

Public Function GetSavedFlag() As Boolean
    On Error Resume Next
    GetSavedFlag = False
    
    Dim nTableIndex As Integer
    
    nTableIndex = GetTableIndex(conTableKey_Cover)
    ' if can't find the cover page tabel, we can think this document had been saved.
    If nTableIndex = -1 Then
        GetSavedFlag = True
        Exit Function 'nTableIndex = conTableIndex_Allocation_LV1
    End If
    
    If Left(ThisDocument.Tables(nTableIndex).Cell(1, 2).Range.Text, 1) <> "1" Then
        Exit Function
    End If
    
    GetSavedFlag = True
End Function


Sub HideAllNotDisplaySection()
    Dim i As Integer
    Dim arr() As String
    Dim strSecID As String
    Dim nTableIndex As Integer
    
    For i = 1 To g_mapSections.Count
        arr = g_mapSections.GetItem(i)
        If IsEmpty(g_mapSectionsDisplay.Item(arr(0))) Then
            nTableIndex = GetTableIndex(arr(1))
            If nTableIndex > 1 Then
                ThisDocument.Tables(nTableIndex).Delete
                'ShowHideTable nTableIndex, 0, False
            End If
        End If
    Next i
    
    'hide text only
    nTableIndex = GetTableIndex(conTableKey_TextOnly)
    If nTableIndex > 0 Then
        'ShowHideTable nTableIndex, 0, False
        ThisDocument.Tables(nTableIndex).Delete
    End If
    'hide group
    nTableIndex = GetTableIndex(conTableKey_Group)
    If nTableIndex > 0 Then
        'ShowHideTable nTableIndex, 0, False
        ThisDocument.Tables(nTableIndex).Delete
    End If
End Sub

Public Function TransformXsl(strXslFile As String, strHtml As String, strParaValue As String) As String
    On Error GoTo Err_Proc
    TransformXsl = ""
    Dim strXml As String
    Dim strXMLFile As String
    Dim xsldoc As New MSXML2.DOMDocument30
    Dim strTemp As String
    Dim node As MSXML2.IXMLDOMNode
         
    'If it is office 2010 and EF graph
    If (g_strOfficeVer = "2" And ((strXslFile = conFixIncomeStyleboxChart) Or (strXslFile = conCorrMatrixChart) Or (strXslFile = conAAChart) Or (strXslFile = conEquityStyleboxChart) Or (strXslFile = conProposedPortfolioEFChart) Or (strXslFile = "Plan_WealthPercentiles.xsl") Or (strXslFile = "Plan_ReturnPercentiles.xsl") Or (strXslFile = "Plan_WealthForecast.xsl") Or (strXslFile = "Plan_Common.xsl") Or (strXslFile = "Plan_CTForecast.xsl") Or (strXslFile = "Plan_CTForecast_RW.xsl") Or (strXslFile = "Plan_Stylebox.xsl") Or (Left(strXslFile, 18) = "Plan_questionnaire") Or (Left(strXslFile, 12) = "Plan_profile"))) Then
        strXMLFile = conLocalHost + "/Report/2010xsl/" + strXslFile
    Else
        strXMLFile = conLocalHost + "/Report/xsl/" + strXslFile
    End If

    xsldoc.async = False
    
    If Not xsldoc.Load(strXMLFile) Then
        Err.Raise xsldoc.parseError.ErrorCode, , xsldoc.parseError.reason
    End If
    
    Set node = xsldoc.SelectSingleNode("xsl:stylesheet/xsl:param[@name='name']")
    If Not node Is Nothing Then
        Set node = node.Attributes.getNamedItem("select")
        If Not node Is Nothing Then
            node.Text = strParaValue
        End If
    End If
        
    strXml = g_XmlDoc.transformNode(xsldoc.DocumentElement)
    
    If strHtml = "" Then
        strTemp = Left(strXslFile, Len(strXslFile) - 4) + CStr(Rnd(Time)) + ".htm"
        strXMLFile = g_strAppTemp + strTemp
    Else
        strTemp = strHtml
        strXMLFile = g_strAppTemp + "\temp\" + strHtml
    End If
    
    Open strXMLFile For Output As #1
    Print #1, strXml
    Close #1
    
    Set xsldoc = Nothing
    TransformXsl = strTemp
    Exit Function
Err_Proc:
    MsgBox Err.Description
    Err.Clear
End Function

Public Function InsertChartToTable(myTable As Word.table, nRow As Integer, nCol As Integer, strXslFile As String, strParaValue As String)
    On Error GoTo Err_Proc
    Dim strFile As String
    Dim strTemp As String
    
    strFile = TransformXsl(strXslFile, "", strParaValue)
    If strFile = "" Then Exit Function
    
    strTemp = conLocalHost + "/AppTemp/" + strFile
                
    myTable.Cell(nRow, nCol).Select
    
    Application.ScreenUpdating = False
    Selection.InsertFile FileName:=strTemp
    Application.ScreenUpdating = True
    
    ' Save word failed - 4198 error solution
    'There are more than one issue, the CVST return section graph shows error when saving the document
    'However it is OK when there is only this section in the report
    'It is very hard to find the root cause
    'So I add the below code to fix it as a tempory solution.
    'By Jean.Jing 12/07/2012
    'update for an issue in Wealth Forecast section by Jean.Jing 24/04/2013
    If ((strXslFile = conForecastedReturnsChart And strParaValue = "'Return'") Or (strXslFile = conWealthForecastChart)) Then
        myTable.Cell(nRow, nCol).Select
        Selection.Delete
        myTable.Cell(nRow, nCol).Select
        Application.ScreenUpdating = False
        Selection.InsertFile FileName:=strTemp
        Application.ScreenUpdating = True
    End If

    strTemp = g_strAppTemp + strFile
    Kill strTemp
    
    Exit Function
Err_Proc:
    'MsgBox Err.Description
    Err.Clear
End Function

Public Function isShowChartTable()
     
     isShowChartTable = False
     
     Dim chartIndex As String
     chartIndex = GetXmlValue("root/RiskandQuestionaire/root/riskprofile/@chartIndex")
     If (chartIndex <> "" And CInt(chartIndex) > 0) Then
        isShowChartTable = True
     End If
     
     Exit Function
     
End Function

Public Function TransformAndInsertChartEx(nTableIndexLv1 As Integer, nTableIndexLv2 As Integer) As Boolean
    On Error GoTo Err_Proc
    TransformAndInsertChartEx = False
    
    Dim strFile As String
    Dim myTable As Word.table
    Dim strTemp As String
    
    Set myTable = ThisDocument.Tables(nTableIndexLv1).Tables(nTableIndexLv2)
    
    
    Dim strXmlPie As String
    Dim strXmlChart As String
    Dim strXMLFilePie As String
    Dim strXMLFileChart As String
    Dim xsldocPie As New MSXML2.DOMDocument30
    Dim xsldocChart As New MSXML2.DOMDocument30
    
    ' Office 2010 or above
    If (g_strOfficeVer = "2") Then
        strXMLFilePie = conLocalHost + "/Report/2010xsl/" + conScenariosPie
        strXMLFileChart = conLocalHost + "/Report/2010xsl/" + conScenariosChart
    Else 'Office 2007
        strXMLFilePie = conLocalHost + "/Report/xsl/" + conScenariosPie
        strXMLFileChart = conLocalHost + "/Report/xsl/" + conScenariosChart
    End If
    
    
    xsldocPie.async = False
    xsldocChart.async = False
    
    'Load XSL files
    If Not xsldocPie.Load(strXMLFilePie) Then
        Err.Raise xsldocPie.parseError.ErrorCode, , xsldocPie.parseError.reason
    End If
    
    If Not xsldocChart.Load(strXMLFileChart) Then
        Err.Raise xsldocChart.parseError.ErrorCode, , xsldocChart.parseError.reason
    End If
    
    
    Dim node As MSXML2.IXMLDOMNode
    
         
    Dim scenarioCount As Integer
    Dim i As Integer
    Dim k As Integer
    Dim div As Integer
    Dim arrS(2)
    arrS(1) = "s1"
    arrS(2) = "s2"
    Dim arrF(2)
    arrF(1) = "f1"
    arrF(2) = "f2"
    
    Dim strScenarioId As String
    Dim strXPathEF As String
    Dim strXPathWFE As String
         
    Dim nodeScenariosEFList As Office.CustomXMLNodes
    Set nodeScenariosEFList = g_CustomXMLPart.SelectNodes(conXPath_SecTag_SS_EfficientFrontier + "/EFrontResult")
    Dim nodeScenariosEF As Office.CustomXMLNode
    
    
    scenarioCount = nodeScenariosEFList.Count
    
    Dim nRow As Integer
    Dim nCol As Integer
    Dim kCount As Integer
    nRow = 1
    nCol = 1
    
    kCount = 0
    i = 0
    k = 0
    Do While i < scenarioCount
        ' get a item
        Set nodeScenariosEF = nodeScenariosEFList.Item(i + 1)
        
        If (nodeScenariosEF Is Nothing) Then
            Exit Do
        End If
        
        'set parameters
        strScenarioId = GetXmlAttrValue("sid", nodeScenariosEF)
        strXPathEF = "/root/scenarios/efficientsdata/EFrontResult[@sid='" + strScenarioId + "']"
        
        Set node = xsldocPie.SelectSingleNode("xsl:stylesheet/xsl:param[@name='" + arrS(i Mod 2 + 1) + "']")
        If Not node Is Nothing Then
            Set node = node.Attributes.getNamedItem("select")
            If Not node Is Nothing Then
                node.Text = strXPathEF
            End If
        End If
            
        Set node = xsldocChart.SelectSingleNode("xsl:stylesheet/xsl:param[@name='" + arrS(i Mod 2 + 1) + "']")
        If Not node Is Nothing Then
            Set node = node.Attributes.getNamedItem("select")
            If Not node Is Nothing Then
                node.Text = strXPathEF
            End If
        End If
        
        strXPathWFE = "/root/scenarios/forecastdata/WealthForecast[@sid='" + strScenarioId + "']"
        
        Set node = xsldocChart.SelectSingleNode("xsl:stylesheet/xsl:param[@name='" + arrF(i Mod 2 + 1) + "']")
        If Not node Is Nothing Then
            Set node = node.Attributes.getNamedItem("select")
            If Not node Is Nothing Then
                node.Text = strXPathWFE
            End If
        End If

                
        'Draw chart
        If (((i + 1) Mod 2 = 0) Or ((i + 1) >= scenarioCount)) Then
            Dim s As Integer
            If ((i + 1) Mod 2 = 0) Then
                s = 2
            Else
                s = (i + 1) Mod 2
            End If
            
            'set scount parameters
            Set node = xsldocPie.SelectSingleNode("xsl:stylesheet/xsl:param[@name='scount']")
            If Not node Is Nothing Then
                Set node = node.Attributes.getNamedItem("select")
                If Not node Is Nothing Then
                    node.Text = Str(s)
                End If
            End If
                
            Set node = xsldocChart.SelectSingleNode("xsl:stylesheet/xsl:param[@name='scount']")
            If Not node Is Nothing Then
                Set node = node.Attributes.getNamedItem("select")
                If Not node Is Nothing Then
                    node.Text = Str(s)
                End If
            End If
            
            strXmlPie = g_XmlDoc.transformNode(xsldocPie.DocumentElement)
            strXmlChart = g_XmlDoc.transformNode(xsldocChart.DocumentElement)
            
            'Draw AA chart
            InsertChartToTableEx myTable, nRow, nCol, strXmlPie, conScenariosPie
            nRow = nRow + 1
            ' Draw EF & WFE chart
            InsertChartToTableEx myTable, nRow, nCol, strXmlChart, conScenariosChart
            nRow = nRow + 1
            
            kCount = kCount + 1
                        
        End If
        
        i = i + 1
    Loop
                 
    Dim c As Integer
    c = 0
    Do While nRow + c <= 26
        myTable.Rows(nRow).Delete
        c = c + 1
    Loop
    
    Set xsldocPie = Nothing
    Set xsldocChart = Nothing
    

    TransformAndInsertChartEx = True
    Exit Function
Err_Proc:
    'MsgBox Err.Description
    Err.Clear
End Function

Public Function InsertChartToTableEx(myTable As Word.table, nRow As Integer, nCol As Integer, strXml As String, strXslFile As String)
    On Error GoTo Err_Proc
    Dim strHtmlFile As String
    Dim strTemp As String
    Dim strXMLFile As String
    
    If (strXml = "") Then Exit Function
    
    strHtmlFile = Left(strXslFile, Len(strXslFile) - 4) + CStr(Rnd(Time)) + ".htm"
    strXMLFile = g_strAppTemp + strHtmlFile
    
    Open strXMLFile For Output As #1
    Print #1, strXml
    Close #1
    
    strTemp = conLocalHost + "/AppTemp/" + strHtmlFile
        
    myTable.Cell(nRow, nCol).Select
    
    Application.ScreenUpdating = False
    Selection.InsertFile FileName:=strTemp
    Application.ScreenUpdating = True

    strTemp = g_strAppTemp + strHtmlFile
    Kill strTemp
    
    Exit Function
Err_Proc:
    'MsgBox Err.Description
    Err.Clear
End Function

Sub movePicture()
    If Selection.InlineShapes.Count = 1 Then
       'this needs to be performed only if it is an inline shape
       Selection.InlineShapes(1).ConvertToShape.Select
    End If
    'this needs to be performed in  all cases
    If Selection.ShapeRange.Count = 1 Then
      Selection.ShapeRange.RelativeHorizontalPosition = wdRelativeHorizontalPositionPage
      Selection.ShapeRange.RelativeVerticalPosition = wdRelativeVerticalPositionPage
      Selection.ShapeRange.Left = PixelsToPoints(10)
      Selection.ShapeRange.Top = PixelsToPoints(50)
     'Else
      'MsgBox ("An Image was not selected")
     End If
End Sub

Sub EraseClipboard()
    If (OpenClipboard(0&)) Then
        Call EmptyClipboard
        Call CloseClipboard
    End If
End Sub


Public Function TransformAndInsertChart(nTableIndexLv1 As Integer, nTableIndexLv2 As Integer, nTableIndexLv3 As Integer, nRow As Integer, nCol As Integer, strXslFile As String, strParaValue As String) As Boolean
    On Error GoTo Err_Proc
    TransformAndInsertChart = False
    Dim strFile As String
    Dim myTable As Word.table
    Dim strTemp As String
    
    'test----
    If g_adjustLayout = True And g_debug = True Then
        TransformAndInsertChart = True
        Exit Function
    End If
    '---------

    If nTableIndexLv3 > 0 Then
        Set myTable = ThisDocument.Tables(nTableIndexLv1).Tables(nTableIndexLv2).Tables(nTableIndexLv3)
    Else
        If nTableIndexLv2 > 0 Then
            Set myTable = ThisDocument.Tables(nTableIndexLv1).Tables(nTableIndexLv2)
        Else
            Set myTable = ThisDocument.Tables(nTableIndexLv1)
        End If
    End If
    
    Dim processed As Boolean
    processed = False
    
    Dim curid As String
    curid = GetXmlValue("root/RiskandQuestionaire/root/riskprofile/@current")
    
    'If (g_strPermission = "ENG") Then
    If (curid = "1003") Then
        If (strXslFile = conRiskQuestionnaireChart) Then
            InsertChartToTable myTable, nRow, nCol, conRiskQuestionnaireChart1, strParaValue
            InsertChartToTable myTable, nRow + 1, nCol, conRiskQuestionnaireChart2, strParaValue
            InsertChartToTable myTable, nRow + 2, nCol, conRiskQuestionnaireChart3, strParaValue
            processed = True
        ElseIf (strXslFile = conRiskProfileChart) Then
            InsertChartToTable myTable, nRow, nCol, conRiskProfileChart1, strParaValue
            If (isShowChartTable = True) Then
                InsertChartToTable myTable, nRow + 1, nCol, conRiskProfileChart2, strParaValue
            Else
                myTable.Rows(nRow + 1).Delete
            End If
            processed = True
        End If
    End If
    
    If (processed = False) Then
        If (strXslFile = conRiskQuestionnaireChart) Then
            myTable.Rows(nRow + 2).Delete
            myTable.Rows(nRow + 1).Delete
        ElseIf (strXslFile = conRiskProfileChart) Then
            myTable.Rows(nRow + 1).Delete
        End If
        
        If (strXslFile = "Plan_CoverImg.xsl") Then
            Set coverCell = myTable.Cell(nRow, nCol)
            Dim inshp As InlineShape, inshpWidthStr As String, inshpHeightStr As String, inshpWidth As Integer, inshpHeight As Integer ', coverRange As Range
        
            'Set coverRange = ThisDocument.Range(Start:=coverCell.Range.Start, End:=coverCell.Range.End)
            Dim coverlogoPath As String
            'coverlogoPath = g_strAppTemp + "\ReportImages\advisorlogo_cover.jpg"
            coverlogoPath = conLocalHost + "/AppTemp/ReportImages/advisorlogo_cover.jpg"
            
            coverCell.Select
            Set inshp = Selection.InlineShapes.AddPicture(FileName:=coverlogoPath, LinkToFile:=False, SaveWithDocument:=True) ', Range:=coverRange)
            
            inshpWidthStr = GetXmlValue("/root/cover/logow")
            inshpHeightStr = GetXmlValue("/root/cover/logoh")
            
            inshpWidth = CInt(inshpWidthStr)
            inshpHeight = CInt(inshpHeightStr)
            
            If inshpWidth > 265 Then
                inshpWidth = 265
            End If
            
            If inshpHeight > 150 Then
                inshpHeight = 150
            End If
            
            inshp.Width = PixelsToPoints(inshpWidth)
            inshp.height = PixelsToPoints(inshpHeight)
            inshp.Select
            Selection.Cut 'Cut the picture and paste to coverCell
            coverCell.Select
            Selection.PasteAndFormat (wdPasteDefault)
            EraseClipboard 'clear the clipboard
            movePicture
        Else
            InsertChartToTable myTable, nRow, nCol, strXslFile, strParaValue
        End If
    End If
    

    TransformAndInsertChart = True
    Exit Function
Err_Proc:
    'MsgBox Err.Description
    Err.Clear
End Function
Public Function InsertChartToTableForAllocCompar(nTableIndexLv1 As Integer, nTableIndexLv2 As Integer, nTableIndexLv3 As Integer, nTableIndexLv4 As Integer, nRow As Integer, nCol As Integer, strXslFile As String, strParaValue As String) As Boolean
    On Error GoTo Err_Proc
    InsertChartToTableForAllocCompar = False
    Dim strFile As String
    Dim myTable As Word.table
    
    Set myTable = ThisDocument.Tables(nTableIndexLv1).Tables(nTableIndexLv2).Tables(nTableIndexLv3).Tables(nTableIndexLv4)
    InsertChartToTable myTable, nRow, nCol, strXslFile, strParaValue
    InsertChartToTableForAllocCompar = True
    Exit Function
Err_Proc:
    'MsgBox Err.Description
    Err.Clear
End Function

Function GetTableInPage(strID As String, nOffset As Integer, Optional bCache As Boolean = True) As String

    Dim strTemp As String
'    Dim strKey As String

    GetTableInPage = ""
    
    If bCache = True Then
        strTemp = g_mapCoverDir.Item(strID)
        If IsEmpty(strTemp) = False Then
            If strTemp <> "" Then
                GetTableInPage = strTemp
                Exit Function
            End If
        End If
    End If
      
'    If IsTextOnly(strID) = True Then
'        strKey = GetXmlValue(GetTitleXPath(strID))
'    Else
'        strKey = strID
'    End If
    
    nTableIndex = GetTableIndex(strID)
    If nTableIndex = -1 Then Exit Function 'nTableIndex = conTableIndex_Allocation_LV1

    ThisDocument.Tables(nTableIndex).Select
    With Selection
        .MoveLeft Unit:=wdCharacter, Count:=1
    End With
    
    nTableIndex = Selection.Information(wdActiveEndPageNumber) - nOffset
    GetTableInPage = CStr(nTableIndex)
End Function


Function InsertPictureToContentControl(strID As String, strPicPath As String) As Boolean
    On Error GoTo Err_Proc
    Dim myCC As Word.ContentControl
    Dim oCCs As Word.ContentControls
    Dim i As Integer
    Dim shape As InlineShape
    
    InsertPictureToContentControl = False

    Set oCCs = ThisDocument.SelectContentControlsByTag(strID)
    If oCCs.Count >= 1 Then
        For i = 1 To oCCs.Count
            Set myCC = oCCs(i)
            If myCC.Range.InlineShapes.Count >= 1 Then myCC.Range.InlineShapes(1).Delete
            Set shape = myCC.Range.InlineShapes.AddPicture(FileName:=g_strWWWRoot + strPicPath, LinkToFile:=True)
        Next i
    End If
    
    InsertPictureToContentControl = True
    Exit Function
Err_Proc:
    Err.Clear
End Function

Function GetTableSize(nTableIndex As Integer) As Double
    On Error GoTo Err_Proc
    Dim dbRet As Double
    Dim myTable As Word.table
    Dim dbStartSpace As Double
    Dim dbEndSpace As Double
        
    GetTableSize = 0
    Set myTable = ThisDocument.Tables(nTableIndex)
    
'    Dim myRow As Word.row
'    dbRet = 0
'    For Each myRow In myTable.Rows
'        dbRet = dbRet + myRow.Height
'    Next myRow
    myTable.Select
    dbStartSpace = Selection.Information(wdVerticalPositionRelativeToPage)
    
    Selection.MoveRight Unit:=wdCharacter, Count:=1
    dbEndSpace = Selection.Information(wdVerticalPositionRelativeToPage)
    
    If dbEndSpace >= dbStartSpace Then
        dbRet = dbEndSpace - dbStartSpace
    Else
        If ThisDocument.PageSetup.FooterDistance > 1000 Then
            dbRet = g_PageHeight - dbStartSpace - 23 - ThisDocument.PageSetup.BottomMargin _
                    + (dbEndSpace - 3 - ThisDocument.PageSetup.TopMargin)
        Else
            dbRet = g_PageHeight - dbStartSpace - ThisDocument.PageSetup.FooterDistance - ThisDocument.PageSetup.BottomMargin _
                    + (dbEndSpace - ThisDocument.PageSetup.HeaderDistance - ThisDocument.PageSetup.TopMargin)
        End If
    End If
    
    GetTableSize = dbRet
    Exit Function
Err_Proc:
    Err.Clear
End Function


Function IsTableSuitable(dbTableHeight As Double) As Boolean
    On Error GoTo Err_Proc
    Dim dbSpace As Double
  
    IsTableSuitable = False
    
    dbSpace = Selection.Information(wdVerticalPositionRelativeToPage)
    dbSpace = g_PageHeight - dbSpace
    
'    If dbSpace > g_PageHeight / 2 Then
'        IsTableSuitable = True
'        Exit Function
'    End If
    If ThisDocument.PageSetup.FooterDistance > 1000 Then
        dbSpace = dbSpace - 23 - ThisDocument.PageSetup.BottomMargin
    Else
        dbSpace = dbSpace - ThisDocument.PageSetup.FooterDistance - ThisDocument.PageSetup.BottomMargin
    End If
    If dbSpace < dbTableHeight - 20 Then
        Exit Function
    End If
    
    IsTableSuitable = True
    Exit Function
Err_Proc:
    Err.Clear
End Function

Sub CheckPageBreakChar()
    Dim PageCount As Long
    Dim rRange     As Range
    Dim i     As Integer
    Dim strTemp As String
 
    On Error GoTo Err_Proc
    
    'get first page number with contents
    MoveToDocStart
    Dim s As Integer
    s = GetCursor_Page()
    If (g_ReportSetting.bHasCover = False) Then
        s = 1
    End If

    PageCount = Selection.Information(wdNumberOfPagesInDocument)
    For i = PageCount To 1 Step -1
        Set rRange = ThisDocument.Range( _
                        Start:=ThisDocument.GoTo(wdGoToPage, wdGoToAbsolute, i).Start)
        
        strTemp = Replace(rRange.Text, Chr(13), "")
        
        'UK RTQ
        If ((Left(strTemp, 1) = Chr(12)) And (i > s)) Then
            rRange.Select
            MoveToCurrentLineStart
            Selection.Delete Unit:=wdCharacter, Count:=1
        End If
        
        'strTemp = Replace(strTemp, "|07|", "")
        'strTemp = Trim(strTemp)
        
        'This variable is to define from where we should remove the special character ''
        'Dim s As Integer
        's = 4
        'If (g_ReportSetting.bHasCover = False) Then
            's = 1
        'End If
        
        'UK RTQ
        'If ((Left(strTemp, 1) = "") And (i > s)) Then
            'If ((Left(strTemp, 13) <> "Risk Profile") Or (g_strPermission <> "ENG")) Then
                'rRange.Select
                'MoveToCurrentLineStart
                'Selection.Delete Unit:=wdCharacter, Count:=1
            'End If
        'End If
    Next i
    
    Exit Sub
Err_Proc:
    Err.Clear
End Sub

Sub DeleteBlankPage()
    Dim PageCount As Long
    Dim rRange     As Range
    Dim i     As Integer
    Dim strTemp As String
    Dim nRCount As Integer
    Dim bMoveToStart As Boolean
    bMoveToStart = True
 
    On Error GoTo Err_Proc

    CheckPageBreakChar
    
    'Do more check about the page break character
    'There may has more than one character in one section
    'It had occured in Xixi and Sarah's computer
    CheckPageBreakChar
    
    'Current VS Target and Allocation comparision have page break character
    CheckPageBreakChar
    CheckPageBreakChar
    
    PageCount = Selection.Information(wdNumberOfPagesInDocument)
    For i = PageCount To 1 Step -1
        Set rRange = ThisDocument.Range( _
                        Start:=ThisDocument.GoTo(wdGoToPage, wdGoToAbsolute, i).Start)
        
        strTemp = Replace(rRange.Text, Chr(13), "")
        strTemp = Replace(strTemp, "|07|", "")
        strTemp = Trim(strTemp)
        
        If Len(strTemp) < 10 Then
            rRange.Delete
            nRCount = Selection.Information(wdNumberOfPagesInDocument)
            If (nRCount = PageCount) Then
                Set rRange = ThisDocument.Range( _
                Start:=ThisDocument.GoTo(wdGoToPage, wdGoToAbsolute, i).Start)
                rRange.Select
                Selection.Delete Unit:=wdCharacter, Count:=1
                Selection.TypeBackspace
                bMoveToStart = True
            End If
        Else
            If (bMoveToStart = True) Then
                MoveToDocStart
            End If
            Exit Sub
        End If
    Next i
    
    If (bMoveToStart = True) Then
        MoveToDocStart
    End If
    
    Exit Sub
Err_Proc:
    Err.Clear
End Sub


Public Function TransformXslToString(strXslFile As String) As String
    On Error GoTo Err_Proc
    TransformXslToString = ""
    Dim strXml As String
    Dim strXMLFile As String
    Dim xsldoc As New MSXML2.DOMDocument30
    Dim strTemp As String
    Dim node As MSXML2.IXMLDOMNode
         
    strXMLFile = conLocalHost + strXslFile

    xsldoc.async = False
    
    If Not xsldoc.Load(strXMLFile) Then
        Err.Raise xsldoc.parseError.ErrorCode, , xsldoc.parseError.reason
    End If
            
    strXml = g_XmlDoc.transformNode(xsldoc.DocumentElement)
    strXml = DecodeXML(strXml)
        
    Set xsldoc = Nothing
    TransformXslToString = strXml
    Exit Function
Err_Proc:
    MsgBox Err.Description
    Err.Clear
End Function

Public Function DecodeXML(strSour As String) As String
    On Error GoTo Err_Proc
    Dim strResult As String

    Dim i As Integer
    DecodeXML = ""
    
    strResult = strSour
    'strResult = Replace(strResult, "&quot;", "\""")
    'strResult = Replace(strResult, "&amp;", "&")
    'strResult = Replace(strResult, "&lt;", "<")
    'strResult = Replace(strResult, "&gt;", ">")
    'strResult = Replace(strResult, "&apos;", "\'")
    strResult = Replace(strResult, "_|TSFB;", "<")
    strResult = Replace(strResult, "_|TSFE;", ">")
    
    DecodeXML = strResult
    Exit Function
Err_Proc:
    MsgBox Err.Description
    Err.Clear
End Function

Public Function PreProcessData() As Boolean
    On Error GoTo Err_Proc

    Dim i As Integer
    PreProcessData = False
    
    
    Dim strXml As String
    strXml = TransformXslToString("/Report/word/PlanReport_common.xsl")
          
    g_XmlDocAcc.async = False
    If Not g_XmlDocAcc.LoadXML(strXml) Then
        Err.Raise xsldoc.parseError.ErrorCode, , xsldoc.parseError.reason
    End If
    
    If g_debug = True Then g_XmlDocAcc.Save ("c:\temp.xml")
    
    PreProcessData = True
    Exit Function
Err_Proc:
    Err.Clear
End Function


Public Function Str2Int(strTemp As String) As Integer
    On Error GoTo Err_Proc

    Dim i As Integer
    Str2Int = 0
    
    If strTemp = "" Then
        Str2Int = 0
    Else
        Str2Int = CInt(strTemp)
    End If
    Exit Function
Err_Proc:
    Err.Clear
End Function

Public Sub Layout()
    On Error GoTo Err_Proc

    Dim i As Integer
    
    
    Exit Sub
Err_Proc:
    Err.Clear
End Sub
Public Function getNodeValue(node As Office.CustomXMLNode) As String
    
    If node Is Nothing Or Len(node.Text) <= 0 Then
        getNodeValue = "0"
        Exit Function
    End If
    getNodeValue = node.Text
    Exit Function
End Function

Public Function AutoBreakPage(strTableKey As String, strTableAfterKey As String) As Boolean
    On Error GoTo Err_Proc
    Dim nTableIndex As Integer
    Dim nTableAfterIndex As Integer
    Dim myTable As Word.table
    Dim nStartPage As Integer
    Dim nEndPage As Integer
    Dim nRow2Page As Integer

    AutoBreakPage = False
    
    nTableIndex = GetTableIndex(strTableKey)
    If nTableIndex = -1 Then Exit Function
        
    
    Application.ScreenUpdating = False

    Set myTable = ThisDocument.Tables(nTableIndex)
    
    myTable.Rows(2).Select
    nRow2Page = GetCursor_Page()
    
    myTable.Select
    Selection.MoveRight Unit:=wdCharacter, Count:=1
    nEndPage = GetCursor_Page()
    
    myTable.Select
    Selection.MoveLeft Unit:=wdCharacter, Count:=1
    nStartPage = GetCursor_Page()
    
    If strTableAfterKey = "" Then
        g_mapCoverDir.Add CStr(nStartPage), strTableKey
        Exit Function
    End If
    
    nTableAfterIndex = GetTableIndex(strTableAfterKey)
    If nTableAfterIndex = -1 Then Exit Function

    Dim nRow As Integer
    nRow = GetCursor_Row()
    
    ' If it is riskprofile or riskquestionare section, don't break page if previous section rows is less than 15 lines.
    If ((strTableKey = conTableKey_RiskProfile) Or (strTableKey = conTableKey_RiskQuestionnaire)) Then
        If ((strTableAfterKey <> conTableKey_RiskProfile) And (strTableAfterKey <> conTableKey_RiskQuestionnaire) And (strTableAfterKey <> conTableKey_ProposedPortfolioEF) And (strTableAfterKey <> conTableKey_EquityInvestmentStyle) And (strTableAfterKey <> conTableKey_ForecastedWealth) And (strTableAfterKey <> conTableKey_ForecastedReturns) And (strTableAfterKey <> conTableKey_FixedIncomeIS) And (strTableAfterKey <> conTableKey_EfficientFrontier)) Then
            If ((nEndPage > nStartPage) And nRow < 12) Then
                nEndPage = nStartPage
            End If
        End If
    End If
    
    
    If nEndPage > nStartPage And nRow > 5 Then
        If isGroup(strTableAfterKey) = False Then
            If nRow2Page <> nStartPage Then
                Selection.InsertBreak Word.WdBreakType.wdColumnBreak
            Else
                Selection.InsertBreak Word.WdBreakType.wdPageBreak
            End If
            g_mapCoverDir.Add CStr(nStartPage + 1), strTableKey
        Else
            Set myTable = ThisDocument.Tables(nTableAfterIndex)
            myTable.Select
            Selection.MoveLeft Unit:=wdCharacter, Count:=1
            
            If nRow2Page <> nStartPage Then
                Selection.InsertBreak Word.WdBreakType.wdColumnBreak
            Else
                Selection.InsertBreak Word.WdBreakType.wdPageBreak
            End If
            g_mapCoverDir.Remove strTableAfterKey
            g_mapCoverDir.Add CStr(nStartPage + 1), strTableKey
            g_mapCoverDir.Add CStr(nStartPage + 1), strTableAfterKey
        End If
    Else
        g_mapCoverDir.Add CStr(nStartPage), strTableKey
        Exit Function
    End If
    
    Application.ScreenUpdating = True
    AutoBreakPage = True
    Exit Function
Err_Proc:
    Application.ScreenUpdating = True
    Err.Clear
End Function


Attribute VB_Name = "constdef"
'==================claide.tong====================
Public Type ReportSetting
    ReportType As String
    ReportID As String
    xPath As String
    Sections As String
    PreparedBy As String

    vecSection As MStarVector
    bHasCover As Boolean
    bHasCoverLogo As Boolean
    bHasFooterLogo As Boolean
    bhasDataGen As Boolean
    bhasPname As Boolean
    bhasCname As Boolean
    bhasDisclosure As Boolean
    
End Type

Public Type SectionSetting
    ID As String
    TableKey As String
    xPath As String
End Type

'<style code="1" name="Report Content" desc="Text report section content, including descriptions">
'<font name="Morningstar 1" size="8" color="" backgroundcolor="" underline="" strikeout="" weight="" style=""/>
'<paragraph ptbefore="2" ptafter="4"/>
'</style>
Public Type ReportFormatSetting
    FontName As String
    FontSize As Integer
    ForeColor As Long
    BackColor As Long
    Bold As Boolean
    Italic As Boolean
    UnderLine As Boolean
    StrikeOut As Boolean
    ParagraphPtBefore As Integer
    ParagraphPtAfter As Integer
End Type

'for test
Public Const g_testGrid = False
'Public Const g_debug = True
Public Const g_debug = False
Public Const g_SectionDesc_Row = 4
Public g_PreProcess As Boolean
Public Const g_adjustLayout = False
Public Const g_ShowGridLine = False
'xml doc
Public g_CustomXMLPart As Office.CustomXMLPart
Public g_XmlDoc As MSXML2.DOMDocument30
Public g_XmlDocAcc As MSXML2.DOMDocument30

'main dir
Public g_strRootDir As String
'my xml tage
Public Const conXPath_MyTag = "MStar_word_template"

'for max key len
Public Const conSecMaxKeyLen = 100
' font
Public Const conDefFontName = "Morningstar 1"
Public Const conDefFontSize = 8
Public Const conDefTextFontSize = 8
'table max cols
Public Const conTableMaxCols = 30

'default Decimal
Public Const conDefDecimals = 2
'my file root
Public g_strWWWRoot As String
'img logo root
Public g_strAppTemp As String
'permission
Public g_strPermission As String
'picture for asset
Public g_mapAssetPicure As MStarMap
'table index
Public g_mapTableIndex As MStarMap
'report setting
Public g_ReportSetting As ReportSetting
'Section map
Public g_mapSections As MStarMap
'displayed Section map
Public g_mapSectionsDisplay As MStarMap
'displayed cover dir map
Public g_mapCoverDir As MStarMap
'page size
Public g_PageHeight As Double
'table title height
Public Const conTitleHeight = 12
'Office version
Public g_strOfficeVer As String

Public Const conLocalHost = "http://localhost:49991"

' ----- Style Format setting begin ------ '
Public Const conMaxFormats = 10
Public g_arrFormatSettings(conMaxFormats) As ReportFormatSetting
Public g_arrStyleNames(conMaxFormats) As String

' Style format index definitions
Public Const conReportContentIdx = 1
Public Const conTableDataIdx = 2
Public Const conSectionHeadingIdx = 3
Public Const conGroupHeadingIdx = 4
Public Const conTitleIdx = 5
Public Const conSubTitleIdx = 6
Public Const conCoverTextIdx = 7
Public Const conTableOfContentsIdx = 8
Public Const conHeadersIdx = 9
Public Const conHeaderDetailsIdx = 10
' ----- Style Format setting end ------ '

'sections
Public Const conSection_Cover = 1
Public Const conSection_Report = 2
'chart
Public Const conAAChart = "Plan_AssetAllocationChart.xsl"
Public Const conForecastedWealthChart = "Plan_CTForecast_RW.xsl"
Public Const conForecastedReturnsChart = "Plan_CTForecast_RW.xsl"
Public Const conWealthForecastChart = "Plan_WealthForecast.xsl"
Public Const conProposedPortfolioEFChart = "Plan_EFrontGraph.xsl"
Public Const conEquityStyleboxChart = "Plan_EquityStylebox.xsl"
Public Const conStockSectorChart = "Plan_StockSector.xsl"
Public Const conFixIncomeStyleboxChart = "Plan_FixIncomeStylebox.xsl"
Public Const conCreditQualityChart = "Plan_CreditQuality.xsl"
Public Const conInterestRRChart = "Plan_RateRisk.xsl"
Public Const conRiskQuestionnaireChart = "Plan_questionnaire.xsl"
Public Const conRiskQuestionnaireChart1 = "Plan_questionnaire_UK.xsl"
Public Const conRiskQuestionnaireChart2 = "Plan_questionnaire_UK2.xsl"
Public Const conRiskQuestionnaireChart3 = "Plan_questionnaire_UK3.xsl"
Public Const conRiskProfileChart = "Plan_profile.xsl"
Public Const conRiskProfileChart1 = "Plan_profile_UK.xsl"
Public Const conRiskProfileChart2 = "Plan_profile_UK2.xsl"
Public Const conCoverImage = "Plan_CoverImg.xsl"
Public Const conWealthPercentilesChart = "Plan_WealthPercentiles.xsl"
Public Const conReturnPercentilesChart = "Plan_ReturnPercentiles.xsl"
Public Const conScenariosChart = "Plan_scenarioChart.xsl"
Public Const conScenariosPie = "Plan_scenarioAAChart.xsl"
Public Const conCorrMatrixChart = "Plan_CorreMatrixGraph.xsl"

'--------------logo-------------
Public Const conLogo_footer = "\ReportImages\advisorlogo_footer.jpg"
Public Const conLogo_cover = "\ReportImages\advisorlogo_cover.jpg"

'--------------parser type-------------
Public Const conParserType_Common = "Common"
Public Const conParserType_CurTarCompare = "CurTarCompare"
Public Const conParserType_AllocCompare = "AllocCompare"
Public Const conParserType_Cover = "Cover"
Public Const conParserType_CoverDir = "CoverDir"
Public Const conParserType_SectorAnalysis = "SectorAnalysis"
Public Const conParserType_Disclosure = "Disclosure"

'--------------label-------------
Public Const conLabel_AssetAlloction = "lblAssetAllocation"
Public Const conLabel_AssetAlloctionForAlloc = "lblAssetAlloctionForAlloc"
Public Const conLabel_CurrentYear = "lbYearlCurrent"
Public Const conLabel_Target = "lblTarget"
Public Const conLabel_TargetYear = "lblYearTarget"
Public Const conLabel_Current = "lblCurrent"
Public Const conLabel_Proposed = "lblProposed"
Public Const conLable_SubCVT = "lblSubCVT"
Public Const conLable_SubOverAll = "lblSubOverAll"
Public Const conLabel_AssetWeight = "lblAssetWeight"
Public Const conLabel_TargetPer = "lblTargetPer"
Public Const conLabel_CurrentPer = "lblCurrentPer"
Public Const conLabel_ProposedPer = "lblProposedPer"
Public Const conLabel_Sub = "lblSub"
Public Const conLabel_AllocCompareTitle = "lblAllocationComparisonTitle"
Public Const conLabel_Pensins = "lblPensionsTitle"
Public Const conLabel_ActionPlan = "lblActionPlanTitle"
Public Const conLabel_RegionalExposure = "lblRegionalExposureTitle"
Public Const conLabel_Reasset = "lblReasset"
Public Const conLabel_Recur = "lblRecur"
Public Const conLabel_Rebmk = "lblRebmk"
Public Const conLabel_BenchmarkName = "lblBenchmarkName"
Public Const conLabel_Repropos = "lblRepropos"
Public Const conLable_Taxable = "lblTaxable"
Public Const conLable_TarAdvTaxable = "lblTargetTaxAdv"
Public Const conLable_AdvTaxable = "lblTaxAdv"
Public Const conLable_CurAdvTaxable = "lblCurrentTaxAdv"
Public Const conLable_Overall = "lblOverAll"

Public Const conLabel_ClientS = "lblClientS"
Public Const conLabel_SpouseS = "lblSpouseS"
Public Const conLabel_AdvisorS = "lblAdvisorS"
Public Const conLabel_SDate = "lblSDate"
Public Const conLabel_SigClientName = "lblSig_ClientName"
Public Const conLabel_SigSpouseName = "lblSig_SpouseName"

Public Const conLabel_SectorWeightings = "lblSectorWeightings"
Public Const conLabel_Stylecur = "lblStylecur"
Public Const conLabel_Stylepos = "lblStylepos"
Public Const conLabel_BMK = "lblBMK"

'-----------asset sum------------------------
Public Const conStddev = "//alloclabel/summary/i[@type='stddev']/@title"
Public Const conExpRet = "//alloclabel/summary/i[@type='return']/@title"
Public Const conYield = "//alloclabel/summary/i[@type='yield']/@title"
Public Const conShp = "//alloclabel/summary/i[@type='sharpratio']/@title"
Public Const conTypeStddev = "stddev"
Public Const conTypeExpRet = "return"
Public Const conTypeYield = "yield"
Public Const conTypeShp = "sharpratio"

'------------Account section ---------------
Public Const conTableCaption_Acconts = "Accounts" 'table caption tag
Public Const conTableKey_Acconts = "Current Accounts" 'table  key
Public Const conXPathCaption_Acconts = "3_1" 'table caption bind's node
Public Const conXPath_SecTag_Acconts = "/root/Accounts" 'table caption bind's node
Public Const conTableIndex_Acconts_LV1 = 1 'table index for level 1
Public Const conTableIndex_Acconts_LV2 = 1 'table index for level 2


'------------Current Allocation section ---------------
Public Const conTableCaption_Allocation = "Allocation" 'table caption tag
Public Const conTableKey_Allocation = "Current Allocation" 'table  key
Public Const conXPathCaption_Allocation = "3_3" 'table caption bind's node
Public Const conXPath_SecTag_Allocation = "/root/Allocation" 'table caption bind's node
Public Const conTableIndex_Allocation_LV1 = 2 'table index for level 1
Public Const conTableIndex_Allocation_LV2 = 1 'table index for level 2

'------------Securities List section ---------------
Public Const conTableCaption_SecList = "SecuritiesList" 'table caption tag
Public Const conTableKey_SecList = "Securities List" 'table  key
Public Const conXPathCaption_SecList = "7_1" 'table caption bind's node
Public Const conXPath_SecTag_SecList = "/root/SecuritiesList" 'table caption bind's node
Public Const conTableIndex_SecList_LV2 = 1 'table index for level 2

'------------Security Allocation section ---------------
Public Const conTableCaption_SecAllocation = "SecurityAllocation" 'table caption tag
Public Const conTableKey_SecAllocation = "Security-Level Allocation" 'table  key
Public Const conXPathCaption_SecAllocation = "3_4" 'table caption bind's node
Public Const conXPath_SecTag_SecAllocation_S = "/root/SecAllocation_Sinfo" 'table caption bind's node
Public Const conTableIndex_SecAllocation_LV2_S = 1 'table index for level 2

Public Const conXPath_SecTag_SecAllocation_A = "/root/SecAllocation_Ainfo" 'table caption bind's node
Public Const conTableIndex_SecAllocation_LV2_A = 2 'table index for level 2

'------------current target comparison section ---------------
Public Const conTableCaption_CurTarCompare = "CurTarCompare" 'table caption tag
Public Const conTableKey_CurTarCompare = "Current vs. Target Allocation" 'table  key
Public Const conXPathCaption_CurTarCompare = "5_5" 'table caption bind's node
Public Const conXPath_SecTag_CurTarCompare = "/root/EFrontFrontier/EFrontResult/mixes" 'table caption bind's node
Public Const conTableIndex_CurTarCompare_LV2 = 2 'table index for level 2

'------------allocation comparison section ---------------
Public Const conTableCaption_AllocCompare = "AllocCompare" 'table caption tag
Public Const conTableKey_AllocCompare = "Allocation Comparison" 'table  key
Public Const conXPathCaption_AllocCompare = "7_2" 'table caption bind's node
Public Const conXPath_SecTag_AllocCompare = "/root/EFrontFrontier/EFrontResult/mixes" 'table caption bind's node
Public Const conTableIndex_AllocCompare_LV2 = 0 'table index for level 0

'------------Basic Capital Market Assumptions section---------------
Public Const conTableCaption_BCMA = "BasicMarkAssum" 'table caption tag
Public Const conTableKey_BCMA = "Basic Capital Market Assumptions" 'table  key
Public Const conXPathCaption_BCMA = "5_1" 'table caption bind's node
Public Const conXPath_SecTag_BCMA = "/root/CMABasic" 'table caption bind's node
Public Const conTableIndex_BCMA_LV1 = 1 'table index for level 1
Public Const conTableIndex_BCMA_LV2 = 1 'table index for level 2

'------------Detailed Capital Market Assumptions section ---------------
Public Const conTableCaption_DCMA = "CMADetail" 'table caption tag
Public Const conTableKey_DCMA = "Detailed Capital Market Assumptions" 'table  key
Public Const conXPathCaption_DCMA = "5_2" 'table caption bind's node
Public Const conXPath_SecTag_DCMA = "/root/CMADetail" 'table caption bind's node
Public Const conTableIndex_DCMA_LV2 = 1 'table index for level 2
Public Const conXPath_SecTag_DCMACORR = "/root/Corrmatrix" 'correlation matrix node

'------------Asset Class Details section---------------
Public Const conTableCaption_AssetClassDetails = "AssetClassDetails" 'table caption tag
Public Const conTableKey_AssetClassDetails = "Asset Class Details" 'table  key
Public Const conXPathCaption_AssetClassDetails = "1_7" 'table caption bind's node
Public Const conXPath_SecTag_AssetClassDetails = "/root/AssetDetail" 'table caption bind's node
Public Const conTableIndex_AssetClassDetails_LV1 = 1 'table index for level 1
Public Const conTableIndex_AssetClassDetails_LV2 = 1 'table index for level 2

'------------Optimization Constranints section---------------
Public Const conTableCaption_OptimizationConstranints = "OptimizationConstranints" 'table caption tag
Public Const conTableKey_OptimizationConstranints = "Optimization Constranints" 'table  key
Public Const conXPathCaption_OptimizationConstranints = "5_3" 'table caption bind's node
Public Const conXPath_SecTag_OptimizationConstranints = "/root/Constraints" 'table caption bind's node
Public Const conTableIndex_OptimizationConstranints_LV1 = 1 'table index for level 1
Public Const conTableIndex_OptimizationConstranints_LV2 = 1 'table index for level 2

'------------Expected Retirement/Social Security section---------------
Public Const conTableCaption_ExpectedRSC = "ExpectedRSC" 'table caption tag
Public Const conTableKey_ExpectedRSC = "Expected Retirement/Social Security" 'table  key
Public Const conXPathCaption_ExpectedRSC = "1_2" 'table caption bind's node
Public Const conXPath_SecTag_ExpectedRSC = "/root/Security" 'table caption bind's node
Public Const conTableIndex_ExpectedRSC_LV1 = 1 'table index for level 1
Public Const conTableIndex_ExpectedRSC_LV2 = 1 'table index for level 2

'-----------Pensions section---------------
Public Const conTableCaption_Pensions = "Pensions" 'table caption tag
Public Const conTableKey_Pensions = "Pensions" 'table  key
Public Const conXPathCaption_Pensions = "1_3" 'table caption bind's node
Public Const conXPath_SecTag_Pensions = "/root/Pensions" 'table caption bind's node
Public Const conTableIndex_Pensions_LV1 = 1 'table index for level 1
Public Const conTableIndex_Pensions_LV2 = 1 'table index for level 2

'-----------Income section---------------
Public Const conTableCaption_Income = "Income" 'table caption tag
Public Const conTableKey_Income = "Income" 'table  key
Public Const conXPathCaption_Income = "1_4" 'table caption bind's node
Public Const conXPath_SecTag_Income = "/root/Income" 'table caption bind's node
Public Const conTableIndex_Income_LV1 = 1 'table index for level 1
Public Const conTableIndex_Income_LV2 = 1 'table index for level 2

'-----------secondary Income section---------------
Public Const conTableCaption_SecondaryIncome = "SecondaryIncome" 'table caption tag
Public Const conTableKey_SecondaryIncome = "SecondaryIncome" 'table  key
Public Const conXPathCaption_SecondaryIncome = "1_9" 'table caption bind's node
Public Const conXPath_SecTag_SecondaryIncome = "/root/secondary" 'table caption bind's node
Public Const conTableIndex_SecondaryIncome_LV1 = 1 'table index for level 1
Public Const conTableIndex_SecondaryIncome_LV2 = 1 'table index for level 2

'-----------Insurance Benefits section---------------
Public Const conTableCaption_InsuranceBenefits = "InsuranceBenefits" 'table caption tag
Public Const conTableKey_InsuranceBenefits = "Insurance Benefits" 'table  key
Public Const conXPathCaption_InsuranceBenefits = "1_5" 'table caption bind's node
Public Const conXPath_SecTag_InsuranceBenefits = "/root/Insurance" 'table caption bind's node
Public Const conTableIndex_InsuranceBenefits_LV2 = 1 'table index for level 2

'-----------Income Summary section---------------
Public Const conTableCaption_IncomeSummary = "IncomeSummary" 'table caption tag
Public Const conTableKey_IncomeSummary = "Income Summary" 'table  key
Public Const conXPathCaption_IncomeSummary = "1_6" 'table caption bind's node
Public Const conXPath_SecTag_IncomeSummary = "/root/IncomeSummary" 'table caption bind's node
Public Const conTableIndex_IncomeSummary_LV2 = 1 'table index for level 2

'-----------Other Income section---------------
Public Const conTableCaption_OtherIncome = "OtherIncome" 'table caption tag
Public Const conTableKey_OtherIncome = "Other Income" 'table  key
Public Const conXPathCaption_OtherIncome = "1_8" 'table caption bind's node
Public Const conXPath_SecTag_OtherIncome = "/root/OtherIncome" 'table caption bind's node
Public Const conTableIndex_OtherIncome_LV2 = 1 'table index for level 2

'-----------Retirement Needs section---------------
Public Const conTableCaption_RetirementNeeds = "RetirementNeeds" 'table caption tag
Public Const conTableKey_RetirementNeeds = "Retirement Needs" 'table  key
Public Const conXPathCaption_RetirementNeeds = "2_2" 'table caption bind's node
Public Const conXPath_SecTag_RetirementNeeds = "/root/Retirement" 'table caption bind's node
Public Const conTableIndex_RetirementNeeds_LV2 = 1 'table index for level 2

'-----------Education section---------------
Public Const conTableCaption_Education = "Education" 'table caption tag
Public Const conTableKey_Education = "Education" 'table  key
Public Const conXPathCaption_Education = "2_1" 'table caption bind's node
Public Const conXPath_SecTag_Education = "/root/Education" 'table caption bind's node
Public Const conTableIndex_Education_LV2 = 1 'table index for level 2

'-----------Miscellaneous Expenses section---------------
Public Const conTableCaption_Expenses = "MiscellaneousExpenses" 'table caption tag
Public Const conTableKey_Expenses = "Miscellaneous Expenses" 'table  key
Public Const conXPathCaption_Expenses = "2_3" 'table caption bind's node
Public Const conXPath_SecTag_Expenses = "/root/Expenses" 'table caption bind's node
Public Const conTableIndex_Expenses_LV2 = 1 'table index for level 2

'-----------Expense Summary Section---------------
Public Const conTableCaption_ExpenseSummary = "ExpenseSummary" 'table caption tag
Public Const conTableKey_ExpenseSummary = "Expense Summary" 'table  key
Public Const conXPathCaption_ExpenseSummary = "2_4" 'table caption bind's node
Public Const conXPath_SecTag_ExpenseSummary = "/root/ExpenseSummary" 'table caption bind's node
Public Const conTableIndex_ExpenseSummary_LV2 = 1 'table index for level 2


'-----------Wealth Table Section---------------
Public Const conTableCaption_WealthTable = "WealthTable" 'table caption tag
Public Const conTableKey_WealthTable = "Wealth Table" 'table  key
Public Const conXPathCaption_WealthTable = "6_2" 'table caption bind's node
Public Const conXPath_SecTag_WealthTable = "/root/WealthTable" 'table caption bind's node
Public Const conXPath_SecTag_WealthTableDetail = "/root/WealthTableDetail" 'table caption bind's node

Public Const conTableIndex_WealthTable_LV2 = 1 'table index for level 2

'-----------Proposed Portfolio Section---------------
Public Const conTableCaption_ProposedPortfolio = "ProposedPortfolio" 'table caption tag
Public Const conTableKey_ProposedPortfolio = "Proposed Portfolio" 'table  key
Public Const conXPathCaption_ProposedPortfolio = "7_4" 'table caption bind's node
Public Const conXPath_SecTag_ProposedPortfolio = "/root/Portfolio" 'table caption bind's node
Public Const conTableIndex_ProposedPortfolio_LV2 = 1 'table index for level 2

'-----------Action Plan Section---------------
Public Const conTableCaption_ActionPlan = "ActionPlan" 'table caption tag
Public Const conTableKey_ActionPlan = "Action Plan" 'table  key
Public Const conXPathCaption_ActionPlan = "7_3" 'table caption bind's node
Public Const conXPath_SecTag_ActionPlan = "/root/ActionPlan" 'table caption bind's node
Public Const conTableIndex_ActionPlan_LV2 = 1 'table index for level 2

'-----------Action Plan By Asset Class Section---------------
Public Const conTableCaption_ActionPlanByAssetClass = "ActionPlanByAssetClass" 'table caption tag
Public Const conTableKey_ActionPlanByAssetClass = "Action Plan By Asset Class" 'table  key
Public Const conXPathCaption_ActionPlanByAssetClass = "7_6" 'table caption bind's node
Public Const conXPath_SecTag_ActionPlanByAssetClass = "/root/ActionPlanByAssetClass" 'table caption bind's node
Public Const conTableIndex_ActionPlanByAssetClass_LV2 = 1 'table index for level 2


'-----------Regional Exposure Section---------------
Public Const conTableCaption_RegionalExposure = "RegionalExposure" 'table caption tag
Public Const conTableKey_RegionalExposure = "Regional Exposure" 'table  key
Public Const conXPathCaption_RegionalExposure = "8_3" 'table caption bind's node
Public Const conXPath_SecTag_RegionalExposure = "/root/IPS/RegionalExposure" 'table caption bind's node
Public Const conTableIndex_RegionalExposure_LV2 = 1 'table index for level 2

'-----------Mutual Fund Fees and Expenses Section---------------
Public Const conTableCaption_MutualFundFees = "MutualFundFees" 'table caption tag
Public Const conTableKey_MutualFundFees = "Mutual Fund Fees" 'table  key
Public Const conXPathCaption_MutualFundFees = "8_7" 'table caption bind's node
Public Const conXPath_SecTag_MutualFundFees = "/root/MFfees" 'table caption bind's node
Public Const conTableIndex_MutualFundFees_LV2 = 1 'table index for level 2

'-----------Performance Section---------------
Public Const conTableCaption_Performance = "Performance" 'table caption tag
Public Const conTableKey_Performance = "Performance" 'table  key
Public Const conXPathCaption_Performance = "8_8" 'table caption bind's node
Public Const conXPath_SecTag_Performance = "/root/Performance" 'table caption bind's node
Public Const conTableIndex_Performance_LV2 = 1 'table index for level 2

'-----------Risk and Return Statistics Section---------------
Public Const conTableCaption_RRStatistics = "RRStatistics" 'table caption tag
Public Const conTableKey_RRStatistics = "Risk and Return Statistics" 'table  key
Public Const conXPathCaption_RRStatistics = "8_9" 'table caption bind's node
Public Const conXPath_SecTag_RRStatistics = "/root/IPS/RiskandReturnStatistics" 'table caption bind's node
Public Const conTableIndex_RRStatistics_LV2 = 1 'table index for level 2

'-----------MPT Statistics Section---------------
Public Const conTableCaption_MPTStatistics = "MPTStatistics" 'table caption tag
Public Const conTableKey_MPTStatistics = "MPT Statistics" 'table  key
Public Const conXPathCaption_MPTStatistics = "8_10" 'table caption bind's node
Public Const conXPath_SecTag_MPTStatistics = "/root/MPTstatistic" 'table caption bind's node
Public Const conTableIndex_MPTStatistics_LV2 = 1 'table index for level 2

'-----------Performance of Proposed Securities Section---------------
Public Const conTableCaption_PerformanceofPS = "PerformanceofPS" 'table caption tag
Public Const conTableKey_PerformanceofPS = "Performance of PS" 'table  key
Public Const conXPathCaption_PerformanceofPS = "8_11" 'table caption bind's node
Public Const conXPath_SecTag_PerformanceofPS = "/root/PerfmProSecurity" 'table caption bind's node
Public Const conTableIndex_PerformanceofPS_LV2 = 1 'table index for level 2

'-----------Legal & Regulatory Section---------------
Public Const conTableCaption_LegalRegulatory = "LegalRegulatory" 'table caption tag
Public Const conTableKey_LegalRegulatory = "Legal Regulatory" 'table  key
Public Const conXPathCaption_LegalRegulatory = "9_1" 'table caption bind's node
Public Const conXPath_SecTag_LegalRegulatory = "/root/XXX_XXX" 'table caption bind's node
Public Const conTableIndex_LegalRegulatory_LV2 = 1 'table index for level 2

'
'-----------Investment Evaluation &amp; Selection Section---------------
Public Const conTableCaption_InvestmentES = "InvestmentES" 'table caption tag
Public Const conTableKey_InvestmentES = "Investment ES" 'table  key
Public Const conXPathCaption_InvestmentES = "9_3" 'table caption bind's node
Public Const conXPath_SecTag_InvestmentES = "/root/XXX_XXX" 'table caption bind's node
Public Const conTableIndex_InvestmentES_LV2 = 1 'table index for level 2

'''----------- TextOnly Section---------------
Public Const conTableKey_TextOnly = "@TextOnly@" 'table  key
'''----------- Group Section---------------
Public Const conTableKey_Group = "@Group@" 'table  key

'-----------Agreement Section---------------
Public Const conTableCaption_Agreement = "Agreement" 'table caption tag
Public Const conTableKey_Agreement = "Agreement" 'table  key
Public Const conXPathCaption_Agreement = "9_7" 'table caption bind's node
Public Const conXPath_SecTag_Agreement = "/root/XXX_XXX" 'table caption bind's node
Public Const conTableIndex_Agreement_LV2 = 1 'table index for level 2

'-----------Cover ---------------
Public Const conTableKey_Cover = "Cover" 'table  key
Public Const conXPath_SecTag_Cover = "/root/cover" 'table caption bind's node
Public Const conTableIndex_Cover_LV2 = 1 'table index for level 2

'-----------CoverDir ---------------
Public Const conTableKey_CoverDir = "CoverDir" 'table  key
Public Const conXPath_SecTag_CoverDir = "/root" 'table caption bind's node
Public Const conTableIndex_CoverDir_LV2 = 1 'table index for level 2

'-----------Forecasted Wealth Selection Section---------------
Public Const conTableCaption_ForecastedWealth = "ForecastedWealth" 'table caption tag
Public Const conTableKey_ForecastedWealth = "Forecasted Wealth" 'table  key
Public Const conXPathCaption_ForecastedWealth = "5_7" 'table caption bind's node
Public Const conXPath_SecTag_ForecastedWealth = "/root/XXX_XXX" 'table caption bind's node
Public Const conTableIndex_ForecastedWealth_LV2 = 1 'table index for level 2

'-----------Forecasted Returns Selection Section---------------
Public Const conTableCaption_ForecastedReturns = "ForecastedReturns" 'table caption tag
Public Const conTableKey_ForecastedReturns = "Forecasted Returns" 'table  key
Public Const conXPathCaption_ForecastedReturns = "5_6" 'table caption bind's node
Public Const conXPath_SecTag_ForecastedReturns = "/root/XXX_XXX" 'table caption bind's node
Public Const conTableIndex_ForecastedReturns_LV2 = 1 'table index for level 2

'-----------Wealth Forecast Selection Section---------------
Public Const conTableCaption_WealthForecast = "WealthForecast" 'table caption tag
Public Const conTableKey_WealthForecast = "Wealth Forecast" 'table  key
Public Const conXPathCaption_WealthForecast = "6_1" 'table caption bind's node
Public Const conXPath_SecTag_WealthForecast = "/root/XXX_XXX" 'table caption bind's node
Public Const conTableIndex_WealthForecast_LV2 = 1 'table index for level 2

'-----------ProposedPortfolioEF Section---------------
Public Const conTableCaption_ProposedPortfolioEF = "ProposedPortfolioEF" 'table caption tag
Public Const conTableKey_ProposedPortfolioEF = "ProposedPortfolioEF" 'table  key
Public Const conXPathCaption_ProposedPortfolioEF = "7_5" 'table caption bind's node
Public Const conXPath_SecTag_ProposedPortfolioEF = "/root/XXX_XXX" 'table caption bind's node
Public Const conTableIndex_ProposedPortfolioEF_LV2 = 1 'table index for level 2

'-----------EquityInvestmentStyle Section---------------
Public Const conTableCaption_EquityInvestmentStyle = "EquityInvestmentStyle" 'table caption tag
Public Const conTableKey_EquityInvestmentStyle = "Equity Investment Style" 'table  key
Public Const conXPathCaption_EquityInvestmentStyle = "8_1" 'table caption bind's node
Public Const conXPath_SecTag_EquityInvestmentStyle = "/root/XXX_XXX" 'table caption bind's node
Public Const conTableIndex_EquityInvestmentStyle_LV2 = 1 'table index for level 2

'-----------SectorAnalysis Section---------------
Public Const conTableCaption_SectorAnalysis = "SectorAnalysis" 'table caption tag
Public Const conTableKey_SectorAnalysis = "SectorAnalysis" 'table  key
Public Const conXPathCaption_SectorAnalysis = "8_2" 'table caption bind's node
Public Const conXPath_SecTag_SectorAnalysis = "/root/IPS/AnalysisClass" 'table caption bind's node
Public Const conTableIndex_SectorAnalysis_LV2 = 1 'table index for level 2

'-----------FixedIncomeIS Section---------------
Public Const conTableCaption_FixedIncomeIS = "FixedIncomeIS" 'table caption tag
Public Const conTableKey_FixedIncomeIS = "FixedIncomeIS" 'table  key
Public Const conXPathCaption_FixedIncomeIS = "8_4" 'table caption bind's node
Public Const conXPath_SecTag_FixedIncomeIS = "/root/XXX_XXX" 'table caption bind's node
Public Const conTableIndex_FixedIncomeIS_LV2 = 1 'table index for level 2

'-----------CreditQuality Section---------------
Public Const conTableCaption_CreditQuality = "CreditQuality" 'table caption tag
Public Const conTableKey_CreditQuality = "Credit Quality" 'table  key
Public Const conXPathCaption_CreditQuality = "8_5" 'table caption bind's node
Public Const conXPath_SecTag_CreditQuality = "/root/XXX_XXX" 'table caption bind's node
Public Const conTableIndex_CreditQuality_LV2 = 1 'table index for level 2

'-----------InterestRR Section---------------
Public Const conTableCaption_InterestRR = "InterestRR" 'table caption tag
Public Const conTableKey_InterestRR = "InterestRR" 'table  key
Public Const conXPathCaption_InterestRR = "8_6" 'table caption bind's node
Public Const conXPath_SecTag_InterestRR = "/root/XXX_XXX" 'table caption bind's node
Public Const conTableIndex_InterestRR_LV2 = 1 'table index for level 2

'-----------RiskQuestionnaire Section---------------
Public Const conTableCaption_RiskQuestionnaire = "RiskQuestionnaire" 'table caption tag
Public Const conTableKey_RiskQuestionnaire = "RiskQuestionnaire" 'table  key
Public Const conXPathCaption_RiskQuestionnaire = "4_1" 'table caption bind's node
Public Const conXPath_SecTag_RiskQuestionnaire = "/root/XXX_XXX" 'table caption bind's node
Public Const conTableIndex_RiskQuestionnaire_LV2 = 1 'table index for level 2

'-----------RiskProfile Section---------------
Public Const conTableCaption_RiskProfile = "RiskProfile" 'table caption tag
Public Const conTableKey_RiskProfile = "Risk Profile" 'table  key
Public Const conXPathCaption_RiskProfile = "4_2" 'table caption bind's node
Public Const conXPath_SecTag_RiskProfile = "/root/XXX_XXX" 'table caption bind's node
Public Const conTableIndex_RiskProfile_LV2 = 1 'table index for level 2


'-----------Clients Information section---------------
Public Const conTableCaption_ClientsInformation = "ClientsInformation" 'table caption tag
Public Const conTableKey_ClientsInformation = "Clients Information" 'table  key
Public Const conXPathCaption_ClientsInformation = "1_1" 'table caption bind's node
Public Const conXPath_SecTag_ClientsInformation = "/root/Clients" 'table caption bind's node
Public Const conTableIndex_ClientsInformation_LV2 = 1 'table index for level 2

'-----------Account Contributions section---------------
Public Const conTableCaption_AccountContributions = "AccountContributions" 'table caption tag
Public Const conTableKey_AccountContributions = "Account Contributions" 'table  key
Public Const conXPathCaption_AccountContributions = "3_2" 'table caption bind's node
Public Const conXPath_SecTag_AccountContributions = "/root/Contributions" 'table caption bind's node
Public Const conTableIndex_AccountContributions_LV2 = 1 'table index for level 2


'-----------Efficient Frontier  Selection Section---------------
Public Const conTableCaption_EfficientFrontier = "EfficientFrontier" 'table caption tag
Public Const conTableKey_EfficientFrontier = "Efficient Frontier" 'table  key
Public Const conXPathCaption_EfficientFrontier = "5_4" 'table caption bind's node
Public Const conXPath_SecTag_EfficientFrontier = "/root/XXX_XXX" 'table caption bind's node
Public Const conTableIndex_EfficientFrontier_LV2 = 1 'table index for level 2

'-----------Asset Allocation Disclosure section---------------
Public Const conTableCaption_AADisclosure = "AADisclosure" 'table caption tag
Public Const conTableKey_AADisclosure = "Investment Policy Statement Disclosure" 'table  key
Public Const conXPathCaption_AADisclosure = "10_1" 'table caption bind's node
Public Const conXPath_SecTag_AADisclosure = "/root/AADisclosure/section" 'table caption bind's node
Public Const conTableIndex_AADisclosure_LV2 = 1 'table index for level 2

'-----------Wealth Forecasting Methodology Disclosure section---------------
Public Const conTableCaption_WFMDisclosure = "WFMDisclosure" 'table caption tag
Public Const conTableKey_WFMDisclosure = "Wealth Forecasting Methodology Disclosure" 'table  key
Public Const conXPathCaption_WFMDisclosure = "10_2" 'table caption bind's node
Public Const conXPath_SecTag_WFMDisclosure = "/root/WFMDisclosure/section" 'table caption bind's node
Public Const conTableIndex_WFMDisclosure_LV2 = 1 'table index for level 2

'-----------Risk Tolerance Disclosure section---------------
Public Const conTableCaption_RTQDisclosure = "RTQDisclosure" 'table caption tag
Public Const conTableKey_RTQDisclosure = "Investment Risk" 'table  key
Public Const conXPathCaption_RTQDisclosure = "10_3" 'table caption bind's node
Public Const conXPath_SecTag_RTQDisclosure = "/root/RTQDisclosure/section" 'table caption bind's node
Public Const conTableIndex_RTQDisclosure_LV2 = 1 'table index for level 2

'-----------Portfolio Comparison Methodology Disclosure section---------------
Public Const conTableCaption_PCMDisclosure = "PCMDisclosure" 'table caption tag
Public Const conTableKey_PCMDisclosure = "Portfolio Comparison Methodology Disclosure" 'table  key
Public Const conXPathCaption_PCMDisclosure = "10_4" 'table caption bind's node
Public Const conXPath_SecTag_PCMDisclosure = "/root/PCMDisclosure/section" 'table caption bind's node
Public Const conTableIndex_PCMDisclosure_LV2 = 1 'table index for level 2


'-----------Wealth Percentiles Section---------------
Public Const conTableCaption_WealthPercentiles = "WealthPercentiles" 'table caption tag
Public Const conTableKey_WealthPercentiles = "Wealth Percentiles" 'table  key
Public Const conXPathCaption_WealthPercentiles = "6_3" 'table caption bind's node
Public Const conXPath_SecTag_WealthPercentiles = "/root/WealthPercentiles" 'table caption bind's node
Public Const conTableIndex_WealthPercentiles_LV2 = 1 'table index for level 2
Public Const conTableIndex_WealthPercentiles_LV3 = 5 'table index for level 3

'-----------Return Percentiles Section---------------
Public Const conTableCaption_ReturnPercentiles = "ReturnPercentiles" 'table caption tag
Public Const conTableKey_ReturnPercentiles = "Return Percentiles" 'table  key
Public Const conXPathCaption_ReturnPercentiles = "6_4" 'table caption bind's node
Public Const conXPath_SecTag_ReturnPercentiles = "/root/ReturnPercentiles" 'table caption bind's node
Public Const conTableIndex_ReturnPercentiles_LV2 = 1 'table index for level 2
Public Const conTableIndex_ReturnPercentiles_LV3 = 5 'table index for level 3

'-----------Income And Expenses Section---------------
Public Const conTableCaption_IncomeAndExpenses = "IncomeAndExpenses" 'table caption tag
Public Const conTableKey_IncomeAndExpenses = "Income And Expenses" 'table  key
Public Const conXPathCaption_IncomeAndExpenses = "6_5" 'table caption bind's node
Public Const conXPath_SecTag_IncomeAndExpenses = "/root/IncomeAndExpenses" 'table caption bind's node
Public Const conTableIndex_IncomeAndExpenses_LV2 = 0 'table index for level 2

'-----------Additions And Withdrawals Section---------------
Public Const conTableCaption_AdditionsAndWithdrawals = "AdditionsAndWithdrawals" 'table caption tag
Public Const conTableKey_AdditionsAndWithdrawals = "Additions And Withdrawals" 'table  key
Public Const conXPathCaption_AdditionsAndWithdrawals = "6_6" 'table caption bind's node
Public Const conXPath_SecTag_AdditionsAndWithdrawals = "/root/AdditionsAndWithdrawals" 'table caption bind's node
Public Const conTableIndex_AdditionsAndWithdrawals_LV2 = 0 'table index for level 2

'----------- Wealth Taxes ---------------
Public Const conTableCaption_WealthTaxes = "Taxes" 'table caption tag
Public Const conTableKey_WealthTaxes = "Taxes" 'table  key
Public Const conXPathCaption_WealthTaxes = "6_7" 'table caption bind's node
Public Const conXPath_SecTag_WealthTaxes = "/root/WealthTaxes" 'table caption bind's node
Public Const conTableIndex_WealthTaxes_LV2 = 0 'table index for level 2


'----------- Detail Comparison Scenarios ---------------
Public Const conTableCaption_ComparisonScenarios = "ScenarioComparison" 'table caption tag
Public Const conTableKey_ComparisonScenarios = "Detailed Comparison Scenarios" 'table  key
Public Const conXPathCaption_ComparisonScenarios = "2_8" 'table caption bind's node
Public Const conXPath_SecTag_ComparisonScenarios = "/root/DetailedComparisonScenarios" 'table caption bind's node
Public Const conTableIndex_ComparisonScenarios_LV2 = 0 'table index for level 2



'----------- Scenarios Summary ---------------
Public Const conTableCaption_ScenariosSummary = "ScenariosSummary" 'table caption tag
Public Const conTableKey_ScenariosSummary = "Scenario Comparison Summary" 'table  key
Public Const conXPathCaption_ScenariosSummary = "2_9" 'table caption bind's node
Public Const conXPath_SecTag_SS_EfficientFrontier = "/root/scenarios/efficientsdata" 'table caption bind's node
Public Const conXPath_SecTag_SS_WealthForecast = "/root/scenarios/forecastdata" 'table caption bind's node
Public Const conTableIndex_ScenariosSummary_LV2 = 0 'table index for level 2

#If Win64 Then

Public Declare PtrSafe Function OpenClipboard Lib "user32" (ByVal Hwnd As Long) As Long
Public Declare PtrSafe Function CloseClipboard Lib "user32" () As Long
Public Declare PtrSafe Function EmptyClipboard Lib "user32" () As Long

#Else

Public Declare Function OpenClipboard Lib "user32" (ByVal Hwnd As Long) As Long
Public Declare Function CloseClipboard Lib "user32" () As Long
Public Declare Function EmptyClipboard Lib "user32" () As Long

#End If


Attribute VB_Name = "report"
Public Function GetReportSetting() As Boolean
    On Error GoTo Err_Proc
    Dim node As Office.CustomXMLNode
    Dim strTemp As String
    Dim strSec As String
    Dim nTemp As Integer

    
    GetReportSetting = False
    Set node = g_CustomXMLPart.SelectSingleNode("//report/row/setting/report")
    If node Is Nothing Then
        Exit Function
    End If
    
    
    g_ReportSetting.ReportType = GetXmlAttrValue("currpt", node)
    g_ReportSetting.ReportID = GetXmlAttrValue("currptId", node)
    g_ReportSetting.xPath = "//report/row/setting/report/rpt[@type='" + g_ReportSetting.ReportType + "' and @id='" + g_ReportSetting.ReportID + "']"
    
    Set node = g_CustomXMLPart.SelectSingleNode(g_ReportSetting.xPath)
    If node Is Nothing Then
        Exit Function
    End If
    'cover
    If GetXmlAttrValue("cover", node) = "1" Then
        g_ReportSetting.bHasCover = True
    Else
        g_ReportSetting.bHasCover = False
    End If
    
    'date
    If GetXmlAttrValue("date", node) = "1" Then
        g_ReportSetting.bhasDataGen = True
    Else
        g_ReportSetting.bhasDataGen = False
    End If
    'pname
    If GetXmlAttrValue("pname", node) = "1" Then
        g_ReportSetting.bhasPname = True
    Else
        g_ReportSetting.bhasPname = False
    End If
    'cname
    If GetXmlAttrValue("cname", node) = "1" Then
        g_ReportSetting.bhasCname = True
    Else
        g_ReportSetting.bhasCname = False
    End If
    'preparedby
    g_ReportSetting.PreparedBy = GetXmlAttrValue("preparedby", node)
    If (g_ReportSetting.PreparedBy = "") Then
        g_ReportSetting.PreparedBy = GetXmlValue("root/cover/AdvisorName")
    End If
    'cover disclosure
    If GetXmlAttrValue("coverdisclosure", node) = "1" Then
        g_ReportSetting.bhasDisclosure = True
    Else
        g_ReportSetting.bhasDisclosure = False
    End If
    
    
    g_ReportSetting.Sections = GetXmlAttrValue("esec", node)
    Set g_ReportSetting.vecSection = New MStarVector
    'parse sec
    strTemp = g_ReportSetting.Sections
    Do While strTemp <> ""
        nTemp = InStr(1, strTemp, "|")
        If nTemp > 0 Then
            strSec = Left(strTemp, nTemp - 1)
            g_ReportSetting.vecSection.AddItem strSec
            strTemp = Right(strTemp, Len(strTemp) - nTemp)
        Else
            If strTemp <> "" Then g_ReportSetting.vecSection.AddItem strTemp
            Exit Do
        End If
    Loop

    g_ReportSetting.bHasCoverLogo = False
    Set node = g_CustomXMLPart.SelectSingleNode("//label/coverlogo")
    If Not node Is Nothing Then
        If node.Text = "1" Then g_ReportSetting.bHasCoverLogo = True
    End If

    g_ReportSetting.bHasFooterLogo = False
    Set node = g_CustomXMLPart.SelectSingleNode("//label/footerlogo")
    If Not node Is Nothing Then
        If node.Text = "1" Then g_ReportSetting.bHasFooterLogo = True
    End If

    If g_ReportSetting.bHasFooterLogo = True Then
        If g_ReportSetting.bHasCoverLogo = False Or g_ReportSetting.bHasCover = False Then
        Else
             g_ReportSetting.bHasFooterLogo = False
        End If
    End If
    
    
    GetReportSetting = True
    Exit Function
Err_Proc:
    MsgBox "Get Report Setting is Failed."
    Err.Clear
End Function

Public Function GetReportFormatSettings() As Boolean
    On Error GoTo Err_Proc
    
    GetReportFormatSettings = False
    
    Dim node As Office.CustomXMLNode
    Dim fsList As Office.CustomXMLNodes
    Dim fstyle As Office.CustomXMLNode
    
    Set node = g_CustomXMLPart.SelectSingleNode("//setting/row/setting/rptformatting")
    If node Is Nothing Then
        Exit Function
    End If
    
    Set fsList = node.SelectNodes("style")
    If fsList Is Nothing Or fsList.Count <= 0 Then
        Exit Function
    End If
    
    Dim i As Integer
    Dim nIdx As Integer
    Dim nodeFont As Office.CustomXMLNode
    Dim nodeParagraph As Office.CustomXMLNode
    For i = 1 To fsList.Count
        Set fstyle = fsList.Item(i)
        If Not fstyle Is Nothing Then
            nIdx = CInt(GetXmlAttrValue("code", fstyle))
            If nIdx > 0 Then
                Set nodeFont = fstyle.SelectSingleNode("font")
                Set nodeParagraph = fstyle.SelectSingleNode("paragraph")
                If Not nodeFont Is Nothing And Not nodeParagraph Is Nothing Then
                    Dim stylename As String
                    stylename = "MS" + GetXmlAttrValue("name", fstyle)
                    g_arrStyleNames(nIdx) = stylename
                                        
                    ' The section heading style is already defined.
                    If nIdx <> conSectionHeadingIdx Then
                        ThisDocument.Styles.Add name:=stylename, Type:=wdStyleTypeParagraph
                    End If
                    
                    With ThisDocument.Styles(stylename)
                        If ((nIdx = conTableOfContentsIdx) Or (nIdx = conCoverTextIdx)) Then
                            .BaseStyle = "No Spacing"
                        Else
                            .BaseStyle = wdStyleNormal
                        End If
                        .Font.name = GetXmlAttrValue("name", nodeFont)
                        .Font.Size = CInt(GetXmlAttrValue("size", nodeFont))
                        
                        If ((nIdx = conTableOfContentsIdx) Or (nIdx = conCoverTextIdx) Or (nIdx = conTitleIdx)) Then
                            .Font.Spacing = 0.8
                        End If
                        
                        Dim strTemp As String
                        strTemp = GetXmlAttrValue("color", nodeFont)
                        If (strTemp <> "") Then
                            .Font.Color = CLng(strTemp)
                        End If
                        
                        strTemp = GetXmlAttrValue("backgroundcolor", nodeFont)
                        If strTemp <> "" Then
                            .Font.Shading.BackgroundPatternColor = CLng(strTemp)
                            If nIdx = conGroupHeadingIdx Then
                                .ParagraphFormat.Shading.BackgroundPatternColor = CLng(strTemp)
                            End If
                        End If
                        
                        .Font.Bold = False
                        .Font.Italic = False
                        .Font.StrikeThrough = False
                        If (GetXmlAttrValue("weight", nodeFont) = "1") Then .Font.Bold = True
                        If (GetXmlAttrValue("style", nodeFont) = "1") Then .Font.Italic = True
                        If (GetXmlAttrValue("underline", nodeFont) = "1") Then .Font.UnderLine = wdUnderlineDash
                        If (GetXmlAttrValue("strikeout", nodeFont) = "1") Then .Font.StrikeThrough = True
                        
                        Dim ptBefore As Integer
                        Dim ptAfter As Integer
                        ptBefore = CInt(GetXmlAttrValue("ptbefore", nodeParagraph))
                        ptAfter = CInt(GetXmlAttrValue("ptafter", nodeParagraph))
                        .ParagraphFormat.SpaceBefore = ptBefore
                        .ParagraphFormat.SpaceAfter = ptAfter
                        .NoSpaceBetweenParagraphsOfSameStyle = False
                        
                    End With
                End If
            End If
        End If
    Next i
    
    GetReportFormatSettings = True
    Exit Function
Err_Proc:
    MsgBox "Get Report Formatting Failed."
    Err.Clear
End Function

Public Function DisplayReportHeader() As Boolean
    On Error GoTo Err_Proc
    
    DisplayReportHeader = False
    'first page
    Call BindContentControlWithXml("lblHd_pname", "//planinfo/@pname", conTitleIdx)
    'Call BindContentControlWithXml("lblHd_gentext", "//label/gen")
    'Call BindContentControlWithXml("lblHd_gendate", "//cover/GenerateDate")

    'other page
    Call BindContentControlWithXml("lblHd_DataAsof", "/root/label/C_DataAsOf", conHeaderDetailsIdx)
    'Call BindContentControlWithXml("lblHd_CDate", "/root/label/header/date")
    
    Dim strCDate As String
    strCDate = GetXmlValue("/root/label/header/date")
    Call BindContentControlWithText("lblHd_CDate", MSFormatDate(strCDate, "-"), conHeaderDetailsIdx)
    
    Call BindContentControlWithXml("lblHd_PlanName", g_ReportSetting.xPath + "/@title", conHeadersIdx)
    Call BindContentControlWithXml("lblHd_Title", g_ReportSetting.xPath + "/@title", conTitleIdx)
    
'    If g_ReportSetting.bhasCname = False Then
'        Call BindContentControlWithXml("lblHd_PrepareFor", "//label/pareby", conCoverTextIdx, True)
'        Call BindContentControlWithXml("lblHd_HdrPrepareFor", "//label/pareby", conHeadersIdx)
'        Call BindContentControlWithXml("lblHd_PrepareBy", "//label/blank")
'    Else
'        Call BindContentControlWithXml("lblHd_PrepareFor", "//label/parefor", conCoverTextIdx, True)
'        Call BindContentControlWithXml("lblHd_HdrPrepareFor", "//label/parefor", conHeadersIdx)
'        Call BindContentControlWithXml("lblHd_PrepareBy", "//label/pareby", conCoverTextIdx, True)
'        Call BindContentControlWithXml("lblHd_HdrPrepareBy", "//label/pareby", conHeadersIdx)
'    End If
    
    Call BindContentControlWithXml("lblHd_Header", g_ReportSetting.xPath + "/@header", conHeadersIdx)
    
    Dim nPos As Integer
    Dim strClientName As String
    Dim strTemp As String
    strClientName = GetXmlValue("//cover/ClientName")
    strTemp = strClientName
    nPos = InStr(1, strClientName, "{}")
    If nPos > 0 Then
        strTemp = Left(strClientName, nPos - 1)
    End If
    Call BindContentControlWithText("lblHd_ClientName", strTemp, conHeadersIdx)
    Call BindContentControlWithText("lblHd_PBy", g_ReportSetting.PreparedBy, conHeadersIdx)

    DisplayReportHeader = True
    Exit Function
Err_Proc:
    Err.Clear
End Function

Public Function DisplayReportFooter() As Boolean
    On Error GoTo Err_Proc
    Dim i As Integer
    
    DisplayReportFooter = False
    
    If g_ReportSetting.bHasCover = True Then
         Call BindContentControlWithXml("lblFt_SDateFirst", "//planinfo/@a")
        Call BindContentControlWithXml("lblFt_AllRightsFirst", "//planinfo/@a")
        Call BindContentControlWithXml("lblFt_FinraFirst", "//planinfo/@a")
    Else
        Call BindContentControlWithXml("lblFt_SDateFirst", "//planinfo/@planstartyear")
        Call BindContentControlWithXml("lblFt_AllRightsFirst", "//footer/C_FooterBase")
        Call BindContentControlWithXml("lblFt_FinraFirst", g_ReportSetting.xPath + "/@footer")
         If g_ReportSetting.bHasFooterLogo = True Then
        InsertPictureToContentControl "lblFooterLogoFirst", conLogo_footer
    End If
    End If
    
    Call BindContentControlWithXml("lblFt_SDate", "//planinfo/@planstartyear")
    Call BindContentControlWithXml("lblFt_AllRights", "//footer/C_FooterBase")
    Call BindContentControlWithXml("lblFt_Finra", g_ReportSetting.xPath + "/@footer")

    If g_ReportSetting.bHasFooterLogo = True Then
        InsertPictureToContentControl "lblFooterLogo", conLogo_footer
    End If
    
    DisplayReportFooter = True
    Exit Function
Err_Proc:
    Err.Clear
End Function

Public Function DisplayReportCover() As Boolean
    On Error GoTo Err_Proc
    Dim nTableIndex As Integer
    Dim myCC As Word.ContentControl
    Dim oCCs As Word.ContentControls
    Dim i As Integer
    Dim shape As InlineShape
    
    DisplayReportCover = False

    VisibleCover g_ReportSetting.bHasCover
    
    If g_ReportSetting.bHasCover = False Then
        DisplayReportCover = True
        Exit Function
    End If
    
    Call BindContentControlWithXml("lblHd_subtitle", g_ReportSetting.xPath + "/@subtitle", conSubTitleIdx)
    

    If g_ReportSetting.bhasDataGen = True Then
         Call BindContentControlWithXml("lblHd_Covergentext", "//label/gen", conCoverTextIdx)
         Call BindContentControlWithXml("lblHd_Covergendate", "//cover/GenerateDate", conCoverTextIdx)
    Else
        Call BindContentControlWithXml("lblHd_Covergentext", "//label/blank")
        Call BindContentControlWithXml("lblHd_Covergendate", "//label/blank")
        Call BindContentControlWithXml("lblHd_CoverPname", "//label/blank")
    End If
    
    If g_ReportSetting.bhasPname = True Then
         Call BindContentControlWithXml("lblHd_CoverPname", "//planinfo/@pname", conCoverTextIdx)
    End If

    
    DisplaySection_CoverDir
    DisplayReportCover = DisplaySection_Cover

    If g_ReportSetting.bhasCname = False Then
        Call BindContentControlWithXml("lblHd_PrepareFor", "//label/pareby", conCoverTextIdx, True)
        Call BindContentControlWithXml("lblHd_HdrPrepareFor", "//label/pareby", conHeadersIdx)
        Call BindContentControlWithXml("lblHd_PrepareBy", "//label/blank")
    Else
        Call BindContentControlWithXml("lblHd_PrepareFor", "//label/parefor", conCoverTextIdx, True)
        Call BindContentControlWithXml("lblHd_HdrPrepareFor", "//label/parefor", conHeadersIdx)
        Call BindContentControlWithXml("lblHd_PrepareBy", "//label/pareby", conCoverTextIdx, True)
        Call BindContentControlWithXml("lblHd_HdrPrepareBy", "//label/pareby", conHeadersIdx)
    End If
    
    Exit Function
Err_Proc:
    Err.Clear
End Function


Public Function DisplayReportSections() As Boolean
    On Error GoTo Err_Proc
    Dim i As Integer
    Dim strSecID As String
    Dim strTemp As String
    Dim node As Office.CustomXMLNode
    Dim secSetting As SectionSetting
    Dim nCount As Integer
    Dim arr() As String
    Dim strLastTableKey As String
  
    DisplayReportSections = False

    strLastTableKey = ""
    nCount = g_ReportSetting.vecSection.GetSize()
    For i = 1 To nCount
        strSecID = g_ReportSetting.vecSection.GetItem(i - 1)

        
        If Not IsEmpty(g_mapSections.Item(strSecID)) And CheckData(strSecID) Then
            arr = g_mapSections.Item(strSecID)
            If strSecID = conXPathCaption_SecAllocation Then
                Set node = g_CustomXMLPart.SelectSingleNode(conXPath_SecTag_SecAllocation_S)
                If node Is Nothing Then
                    Set node = g_CustomXMLPart.SelectSingleNode(conXPath_SecTag_SecAllocation_A)
                    If node Is Nothing Then GoTo Break_
                End If
            Else
                Set node = g_CustomXMLPart.SelectSingleNode(arr(2))
            End If
            If Not node Is Nothing Or arr(2) = "/root/XXX_XXX" Then
                 MoveTableAfterTable arr(1), strLastTableKey
            
                'display section Accounts
                 If strSecID = conXPathCaption_Acconts Then DisplaySection_Accounts: GoTo Break_
                 
                'display section Alloction
                 If strSecID = conXPathCaption_Allocation Then DisplaySection_Alloction: GoTo Break_
                 'display section Securities List
                 If strSecID = conXPathCaption_SecList Then DisplaySection_SecuritiesList: GoTo Break_
                 'Display Section SecuritiesAllocation
                 If strSecID = conXPathCaption_SecAllocation Then DisplaySection_SecuritiesAllocation: GoTo Break_
                 'Display Section CurTarCompare
                 If strSecID = conXPathCaption_CurTarCompare Then DisplaySection_CurTarCompare: GoTo Break_
                 'Display Section AllocCompare
                 If strSecID = conXPathCaption_AllocCompare Then DisplaySection_AllocCompare: GoTo Break_
                 'Display Section Basic Capital Market Assumptions
                 If strSecID = conXPathCaption_BCMA Then DisplaySection_BCMA: GoTo Break_
                        
                 'Display Section Detailed Capital Market Assumptions
                 If strSecID = conXPathCaption_DCMA Then DisplaySection_DCMA: GoTo Break_
                 'Display Section Asset Class Details
                 If strSecID = conXPathCaption_AssetClassDetails Then DisplaySection_AssetClassDetails: GoTo Break_
                 'Display Section Optimization Constranints
                 If strSecID = conXPathCaption_OptimizationConstranints Then DisplaySection_OptimizationConstranints: GoTo Break_
                 'Display Section Expected Retirement/Social Security
                 If strSecID = conXPathCaption_ExpectedRSC Then DisplaySection_ExpectedRSC: GoTo Break_
                 'Display Section Pensions
                 If strSecID = conXPathCaption_Pensions Then DisplaySection_Pensions: GoTo Break_
                 'Display Section Income
                 If strSecID = conXPathCaption_Income Then DisplaySection_Income: GoTo Break_
                 'Display Section secondary Income
                 If strSecID = conXPathCaption_SecondaryIncome Then DisplaySection_SecondaryIncome: GoTo Break_
                 'Display Section Insurance Benefits
                 If strSecID = conXPathCaption_InsuranceBenefits Then DisplaySection_InsuranceBenefits: GoTo Break_
                 'Display Section Income Summary
                 If strSecID = conXPathCaption_IncomeSummary Then DisplaySection_IncomeSummary: GoTo Break_
                 'Display Section Other Income
                 If strSecID = conXPathCaption_OtherIncome Then DisplaySection_OtherIncome: GoTo Break_
                 'Display Section Retirement Needs
                 If strSecID = conXPathCaption_RetirementNeeds Then DisplaySection_RetirementNeeds: GoTo Break_
                 'Display Section Education
                 If strSecID = conXPathCaption_Education Then DisplaySection_Education: GoTo Break_
                 'Display Section Expenses
                 If strSecID = conXPathCaption_Expenses Then DisplaySection_Expenses: GoTo Break_
                 'Display Section Expenses Summary
                 If strSecID = conXPathCaption_ExpenseSummary Then DisplaySection_ExpenseSummary: GoTo Break_
                 'Display Section Wealth Table
                 If strSecID = conXPathCaption_WealthTable Then DisplaySection_WealthTable: GoTo Break_
                 'Display Section Proposed Portfolio
                 If strSecID = conXPathCaption_ProposedPortfolio Then DisplaySection_ProposedPortfolio: GoTo Break_
                 'Display Section Action Plan
                 If strSecID = conXPathCaption_ActionPlan Then DisplaySection_ActionPlan: GoTo Break_
                 'Display Section Action Plan By Asset Class
                 If strSecID = conXPathCaption_ActionPlanByAssetClass Then DisplaySection_ActionPlanByAssetClass: GoTo Break_
                 'Display Section Regional Exposure
                 If strSecID = conXPathCaption_RegionalExposure Then DisplaySection_RegionalExposure: GoTo Break_
                 'Display Section Mutual Fund Fees
                 If strSecID = conXPathCaption_MutualFundFees Then DisplaySection_MutualFundFees: GoTo Break_
                 'Display Section Performance
                 If strSecID = conXPathCaption_Performance Then DisplaySection_Performance: GoTo Break_
                 'Display Section RR Statistics Performance
                 If strSecID = conXPathCaption_RRStatistics Then DisplaySection_RRStatistics: GoTo Break_
                 'Display Section MPT Statistics Performance
                 If strSecID = conXPathCaption_MPTStatistics Then DisplaySection_MPTStatistics: GoTo Break_
                 'Display section Performanceof PS
                 If strSecID = conXPathCaption_PerformanceofPS Then DisplaySection_PerformanceofPS: GoTo Break_
                 'Display section Agreement
                 If strSecID = conXPathCaption_Agreement Then DisplaySection_Agreement: GoTo Break_
                 'Display section ForecastedWealth
                 If strSecID = conXPathCaption_ForecastedWealth Then DisplaySection_ForecastedWealth: GoTo Break_
                 'Display section ForecastedReturns
                 If strSecID = conXPathCaption_ForecastedReturns Then DisplaySection_ForecastedReturns: GoTo Break_
                 'Display section WealthForecast
                 If strSecID = conXPathCaption_WealthForecast Then DisplaySection_WealthForecast: GoTo Break_
                 'Display section ProposedPortfolioEF
                 If strSecID = conXPathCaption_ProposedPortfolioEF Then DisplaySection_ProposedPortfolioEF: GoTo Break_
                 'Display section EquityInvestmentStyle
                 If strSecID = conXPathCaption_EquityInvestmentStyle Then DisplaySection_EquityInvestmentStyle: GoTo Break_
                 'Display section SectorAnalysis
                 If strSecID = conXPathCaption_SectorAnalysis Then DisplaySection_SectorAnalysis: GoTo Break_
                 'Display section FixedIncomeIS
                 If strSecID = conXPathCaption_FixedIncomeIS Then DisplaySection_FixedIncomeIS: GoTo Break_
                 'Display section CreditQuality
                 If strSecID = conXPathCaption_CreditQuality Then DisplaySection_CreditQuality: GoTo Break_
                 'Display section InterestRR
                 If strSecID = conXPathCaption_InterestRR Then DisplaySection_InterestRR: GoTo Break_
                 'Display section RiskQuestionnaire
                 If strSecID = conXPathCaption_RiskQuestionnaire Then DisplaySection_RiskQuestionnaire: GoTo Break_
                 'Display section RiskProfile
                 If strSecID = conXPathCaption_RiskProfile Then DisplaySection_RiskProfile: GoTo Break_
                 'Display section ClientsInformation
                 If strSecID = conXPathCaption_ClientsInformation Then DisplaySection_ClientsInformation: GoTo Break_
                 'Display section AccountContributions
                 If strSecID = conXPathCaption_AccountContributions Then DisplaySection_AccountContributions: GoTo Break_
                 'Display section EfficientFrontier
                 If strSecID = conXPathCaption_EfficientFrontier Then DisplaySection_EfficientFrontier: GoTo Break_
                 'Display section AA Disclosure
                 If strSecID = conXPathCaption_AADisclosure Then DisplaySection_AADisclosure (strLastTableKey): GoTo Break_
                 'Display section WFM Disclosure
                 If strSecID = conXPathCaption_WFMDisclosure Then DisplaySection_WFMDisclosure (strLastTableKey): GoTo Break_
                 'Display section RTQ Disclosure
                 If strSecID = conXPathCaption_RTQDisclosure Then DisplaySection_RTQDisclosure (strLastTableKey): GoTo Break_
                 'Display section WFM Disclosure
                 If strSecID = conXPathCaption_PCMDisclosure Then DisplaySection_PCMDisclosure (strLastTableKey): GoTo Break_
                 'Display section Wealth Percentiles
                 If strSecID = conXPathCaption_WealthPercentiles Then DisplaySection_WealthPercentiles: GoTo Break_
                 'Display section Return Percentiles
                 If strSecID = conXPathCaption_ReturnPercentiles Then DisplaySection_ReturnPercentiles: GoTo Break_
                 'Display section Income And Expenses
                 If strSecID = conXPathCaption_IncomeAndExpenses Then DisplaySection_IncomeAndExpenses: GoTo Break_
                 'Display section Additions And Withdrawals
                 If strSecID = conXPathCaption_AdditionsAndWithdrawals Then DisplaySection_AdditionsAndWithdrawals: GoTo Break_
                 'Display section Wealth Taxes
                 If strSecID = conXPathCaption_WealthTaxes Then DisplaySection_WealthTaxes: GoTo Break_
                 'Display section Scenarios Comparison
                 If strSecID = conXPathCaption_ComparisonScenarios Then DisplaySection_ComparisonScenarios: GoTo Break_
                 'Display section Scenarios Summary
                 If strSecID = conXPathCaption_ScenariosSummary Then DisplaySection_ScenariosSummary: GoTo Break_
Break_:
                 AutoBreakPage arr(1), strLastTableKey
                 strLastTableKey = arr(1)
                 AddDisplayedSection arr(0), arr(1), arr(2), GetXmlValue(GetTitleXPath(arr(0))), False

            End If
        Else
            If IsTextOnly(strSecID) = True Then
'                strLastTableKey = DisplaySection_TextOnly(strSecID, strLastTableKey)
'                strTemp = GetXmlValue(GetTitleXPath(strSecID))
'                AddDisplayedSection strSecID, strTemp, "", strTemp, True
                 strTemp = DisplaySection_TextOnly(strSecID)
                 MoveTableAfterTable strSecID, strLastTableKey, True
                 
                 AutoBreakPage strSecID, strLastTableKey
                 strLastTableKey = strSecID
                 
                 AddDisplayedSection strSecID, strSecID, "", strTemp, False
            Else
                If isGroup(strSecID) = True Then
                    strTemp = DisplaySection_Group(strSecID)
                    
                    Dim nextSecId As String
                    nextSecId = ""
                    If (i <> nCount) Then
                        nextSecId = g_ReportSetting.vecSection.GetItem(i)
                    End If
                    
                    MoveTableAfterTable strSecID, strLastTableKey, False, True, nextSecId
                    
                    AutoBreakPage strSecID, strLastTableKey
                    strLastTableKey = strSecID
                    
                    AddDisplayedSection strSecID, strSecID, "", strTemp, True
                End If
            End If
        End If
    Next i
    
    DisplayReportSections = True
    Exit Function
Err_Proc:
    Err.Clear
End Function







Attribute VB_Name = "section"
Public Function AndSectionTitle(ByRef strID As String, ByRef strXPath As String, bNewRow As Boolean, bEndDoc As Boolean) As Boolean
    On Error Resume Next
    AndSectionTitle = False
    
    If bEndDoc Then
        MoveToDocEnd
    End If
   
    If bNewRow Then
        AddBlankRowToEnd
        MoveToDocEnd
    End If
    
    AndSectionTitle = True
    Exit Function
End Function

Public Function AddDescForSection(nTableIndex As Integer, TitleKey As String) As Boolean
    On Error GoTo Err_Proc
    Dim node As Office.CustomXMLNode
    Dim strTemp As String
    Dim rowCount As Integer

    AddDescForSection = False
  
    
    Set node = g_CustomXMLPart.SelectSingleNode(GetTextXPath(TitleKey))
    If node Is Nothing Then
        Exit Function
    End If
    
    strTemp = Trim(node.Text)
    If strTemp = "" Then
        Exit Function
    End If
    
    ThisDocument.Tables(nTableIndex).Rows.Add
    rowCount = ThisDocument.Tables(nTableIndex).Rows.Count
        
    Dim oCell As Cell
    Set oCell = ThisDocument.Tables(nTableIndex).Cell(rowCount, 1)
    SetTableCellStyle nTableIndex, rowCount, 1, conReportContentIdx
    oCell.height = 15
    oCell.Range.Text = strTemp
    ThisDocument.Tables(nTableIndex).Rows(rowCount).Borders(1).Visible = True
    AddDescForSection = True
    Exit Function
Err_Proc:
    Err.Clear
End Function
Function ChangeSectionHeaderBackColor(nTableIndex As Integer)
    ThisDocument.Tables(nTableIndex).Rows(1).Select
    Selection.Shading.BackgroundPatternColor = ThisDocument.Styles(g_arrStyleNames(conSectionHeadingIdx)).Font.Shading.BackgroundPatternColor
    ThisDocument.Tables(nTableIndex).Rows(2).Select
    Selection.Shading.BackgroundPatternColor = ThisDocument.Styles(g_arrStyleNames(conSectionHeadingIdx)).Font.Shading.BackgroundPatternColor
End Function

Public Function DisplaySection_Accounts() As Boolean
    DisplaySection_Accounts = DisplaySection_Common(conTableCaption_Acconts, conTableKey_Acconts, conXPathCaption_Acconts, _
                                                    conXPath_SecTag_Acconts, conTableIndex_Acconts_LV2)
End Function

Public Function DisplaySection_Alloction() As Boolean
    DisplaySection_Alloction = DisplaySection_Common(conTableCaption_Allocation, conTableKey_Allocation, conXPathCaption_Allocation, _
                                                    conXPath_SecTag_Allocation, conTableIndex_Allocation_LV2)
End Function

Public Function DisplaySection_SecuritiesList() As Boolean
    DisplaySection_SecuritiesList = DisplaySection_Common(conTableCaption_SecList, conTableKey_SecList, conXPathCaption_SecList, _
                                                    conXPath_SecTag_SecList, conTableIndex_SecList_LV2)
End Function

Public Function DisplaySection_SecuritiesAllocation() As Boolean
    On Error GoTo Err_Proc
    Dim msXmlTb As MStarXmlGrid
    Dim nTableIndex As Integer
    DisplaySection_SecuritiesAllocation = False
    
    nTableIndex = GetTableIndex(conTableKey_SecAllocation)
    If nTableIndex = -1 Then Exit Function 'nTableIndex = conTableIndex_Allocation_LV1
    
    ChangeSectionHeaderBackColor (nTableIndex)
    
    'init section table
    If g_testGrid = True Then VisibleGridLine nTableIndex, g_ShowGridLine
    'ThisDocument.Tables(conTableIndex_Acconts_LV1).Rows(1).Select
    
    'attach table caption
    BindContentControlWithXml conTableCaption_SecAllocation, GetTitleXPath(conXPathCaption_SecAllocation), conSectionHeadingIdx
    'attach S table
    Set msXmlTb = New MStarXmlGrid
    If msXmlTb.AttachToTableWithIndex(nTableIndex, conTableIndex_SecAllocation_LV2_S) = False Then
        Exit Function
    End If
    Call msXmlTb.SetDataXPath(conXPath_SecTag_SecAllocation_S)
    
    If msXmlTb.FillGrid = False Then
        Set msXmlTb = Nothing
        Exit Function
    End If
    Set msXmlTb = Nothing

    'attach A table
    Set msXmlTb = New MStarXmlGrid
    If msXmlTb.AttachToTableWithIndex(nTableIndex, conTableIndex_SecAllocation_LV2_A) = False Then
        Exit Function
    End If
    Call msXmlTb.SetDataXPath(conXPath_SecTag_SecAllocation_A)
    
    If msXmlTb.FillGrid = False Then
        Set msXmlTb = Nothing
        Exit Function
    End If
    Set msXmlTb = Nothing
    
    DisplayTableDesc nTableIndex, conXPathCaption_SecAllocation, g_SectionDesc_Row + 1

    DisplaySection_SecuritiesAllocation = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function

Public Function DisplaySection_CurTarCompare() As Boolean
    On Error GoTo Err_Proc
    
    DisplaySection_CurTarCompare = False
    
    Dim nTableIndex As Integer
    nTableIndex = GetTableIndex(conTableKey_CurTarCompare)
    If nTableIndex = -1 Then
        Exit Function
    End If

    Dim targetTable As Word.table
    Set targetTable = ThisDocument.Tables(nTableIndex)
    
    If g_testGrid = True Then
        VisibleGridLine nTableIndex, g_ShowGridLine
    End If
    
    Dim nodeOtherTarget As Office.CustomXMLNode
    Set nodeOtherTarget = g_CustomXMLPart.SelectSingleNode("//EFrontFrontier/EFrontResult/othertarget")
    
    Dim strUseAll As String
    strUseAll = GetXmlAttrValue("useall", nodeOtherTarget)
    
    Dim bFlagUseAll As Boolean
    If strUseAll <> "" Then
        bFlagUseAll = CBool(strUseAll)
    Else
        bFlagUseAll = False
    End If

'    ChangeSectionHeaderBackColor (nTableIndex)
    BindContentControlWithXml conTableCaption_CurTarCompare, GetTitleXPath(conXPathCaption_CurTarCompare), conSectionHeadingIdx
       
    If bFlagUseAll Then
        BindContentControlWithXml conLabel_Target, "//alloclabel/target", conTableDataIdx
        BindContentControlWithXml conLabel_Current, "//alloclabel/current", conTableDataIdx
    
        BindContentControlWithXml conLabel_AssetAlloction, "//alloclabel/astal", conTableDataIdx, True
        BindContentControlWithXml conLabel_TargetYear, "//alloclabel/target", conTableDataIdx, True
        BindContentControlWithXml conLabel_CurrentYear, "//alloclabel/current", conTableDataIdx, True
        BindContentControlWithXml conLable_SubCVT, "//alloclabel/astsub", conTableDataIdx, True
    
        BindContentControlWithXml conLabel_AssetWeight, "//alloclabel/aswei", conTableDataIdx, False, False
        BindContentControlWithXml conLable_Taxable, "//alloclabel/tax", conTableDataIdx, False, False
        BindContentControlWithXml conLable_CurAdvTaxable, "//alloclabel/taxadv", conTableDataIdx, False, False
        BindContentControlWithXml conLable_TarAdvTaxable, "//alloclabel/taxadv", conTableDataIdx, False, False
        BindContentControlWithXml conLable_Overall, "//alloclabel/overall", conTableDataIdx, False, False
        BindContentControlWithXml conLable_SubOverAll, "//alloclabel/overall", conTableDataIdx, False, False
    Else
        BindContentControlWithXml conLabel_AssetAlloction, "//label/blank"
        BindContentControlWithXml conLabel_TargetYear, "//label/blank"
        BindContentControlWithXml conLabel_CurrentYear, "//label/blank"
        BindContentControlWithXml conLable_SubCVT, "//label/blank"
        
        BindContentControlWithXml conLable_Taxable, "//label/blank"
        BindContentControlWithXml conLable_CurAdvTaxable, "//alloclabel/current", conTableDataIdx, False, False
        BindContentControlWithXml conLable_TarAdvTaxable, "//alloclabel/target", conTableDataIdx, False, False
        BindContentControlWithXml conLable_Overall, "//label/blank"
        BindContentControlWithXml conLable_SubOverAll, "//alloclabel/astsub", conTableDataIdx, False, False
    End If

    Dim msXmlTb As MStarXmlGrid
    Dim rangeNodes As Office.CustomXMLNodes
    Dim i As Integer
    Dim j As Integer
    Dim begYear As String
    Dim endYear As String
    Dim targetPer As Word.ContentControl
    Dim strText As String
    Set rangeNodes = g_CustomXMLPart.SelectNodes("//EFrontFrontier/EFrontResult/othertarget/range")
    
    For i = 1 To rangeNodes.Count
    
        If i > 15 Then
             Exit For
        End If
    
        'modify the target title
        begYear = GetXmlAttrValue("syr", rangeNodes.Item(i))
        endYear = GetXmlAttrValue("eyr", rangeNodes.Item(i))
        strText = begYear + "-" + endYear
        If Len(endYear) <= 0 Then
            strText = begYear
        End If
        Set targetPer = ThisDocument.SelectContentControlsByTitle(conTableCaption_CurTarCompare + CStr(i)).Item(1)
        targetPer.XMLMapping.SetMapping ""
        targetPer.Range.Text = targetPer.Range.Text + ":" + strText
        If bFlagUseAll Then
            Set targetPer = ThisDocument.SelectContentControlsByTitle(conLabel_TargetYear + CStr(i)).Item(1)
            targetPer.XMLMapping.SetMapping ""
            targetPer.Range.Text = targetPer.Range.Text + ":" + strText
        End If
        Set msXmlTb = New MStarXmlGrid
        If msXmlTb.AttachToTableWithIndexEx4L(nTableIndex, i, 3, conTableIndex_CurTarCompare_LV2) = False Then
            Set msXmlTb = Nothing
            Exit Function
        End If
        Call msXmlTb.SetDataXPath(conXPath_SecTag_CurTarCompare)
        If msXmlTb.FillGrid(conParserType_CurTarCompare, "", rangeNodes.Item(i)) = False Then
            Set msXmlTb = Nothing
            Exit Function
        End If
        TransformAndInsertChart nTableIndex, i, 1, 1, 1, conAAChart, "'current'"
        
        Dim chartOverallId As String
        chartOverallId = GetXmlAttrValue("overall", rangeNodes.Item(i))
        TransformAndInsertChart nTableIndex, i, 2, 1, 1, conAAChart, "'" + chartOverallId + "'"
        'TransformAndInsertChart nTableIndex, i, 2, 1, 1, conAAChart, "'overall'"
        Set msXmlTb = Nothing
    Next i

    Set msXmlTb = Nothing
    For j = targetTable.Rows.Count To (rangeNodes.Count + 2) Step -1
        targetTable.Rows(j).Delete
    Next j
    AddDescForSection nTableIndex, conXPathCaption_CurTarCompare
    DisplaySection_CurTarCompare = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function
Public Function DisplaySection_AllocCompare() As Boolean
    On Error GoTo Err_Proc
    Dim msXmlTb As MStarXmlGrid
    Dim nTableIndex As Integer
    Dim footer_Row As Integer
    DisplaySection_AllocCompare = False
    
    nTableIndex = GetTableIndex(conTableKey_AllocCompare)
    If nTableIndex = -1 Then Exit Function 'nTableIndex = conTableIndex_Allocation_LV1
    
    ChangeSectionHeaderBackColor (nTableIndex)
    
    'init section table
    If g_testGrid = True Then VisibleGridLine nTableIndex, g_ShowGridLine
    
    'attach table caption
    BindContentControlWithXml conTableCaption_AllocCompare, GetTitleXPath(conXPathCaption_AllocCompare), conSectionHeadingIdx
    
    'bind label
    BindContentControlWithXml conLabel_TargetPer, "//alloclabel/asttgt", conTableDataIdx, False, False
    BindContentControlWithXml conLabel_CurrentPer, "//alloclabel/astcur", conTableDataIdx, False, False
    BindContentControlWithXml conLabel_ProposedPer, "//alloclabel/astprp", conTableDataIdx, False, False
    BindContentControlWithXml conLabel_Sub, "//alloclabel/astsub", conTableDataIdx, False, False
    BindContentControlWithXml conLabel_Proposed, "//alloclabel/propose", conTableDataIdx, False, False
    
    BindContentControlWithXml conLabel_Target, "//alloclabel/target", conTableDataIdx, False, False
    BindContentControlWithXml conLabel_Current, "//alloclabel/current", conTableDataIdx, False, False
    BindContentControlWithXml conLabel_AssetAlloctionForAlloc, "//alloclabel/astal", conTableDataIdx, False, False
   ' BindContentControlWithXml conLabel_AllocCompareTitle, GetTextXPath(conXPathCaption_AllocCompare)
    
    DisplayTableDesc nTableIndex, conXPathCaption_AllocCompare
    footer_Row = 4
    ThisDocument.Tables(nTableIndex).Rows(footer_Row).SetHeight 25, wdRowHeightAuto

    'attach table
    Set msXmlTb = New MStarXmlGrid
    If msXmlTb.AttachToTableWithIndexEx4L(nTableIndex, 1, 2, conTableIndex_AllocCompare_LV2) = False Then
        Exit Function
    End If
    Call msXmlTb.SetDataXPath(conXPath_SecTag_AllocCompare)
    
    If msXmlTb.FillGrid(conParserType_AllocCompare) = False Then
        Set msXmlTb = Nothing
        Exit Function
    End If
    Set msXmlTb = Nothing

    'show chart
    InsertChartToTableForAllocCompar nTableIndex, 1, 1, 1, 1, 1, conAAChart, "'current'"
    InsertChartToTableForAllocCompar nTableIndex, 1, 1, 2, 1, 1, conAAChart, "'overall'"
    
    ' if equal 100%
    Dim strEqual As String
    strEqual = GetXmlValue("//root/EFrontFrontier/EFrontResult/mixes/usermix[@id='proposed']/@equal100")
    If strEqual <> "false" Then
       InsertChartToTableForAllocCompar nTableIndex, 1, 1, 3, 1, 1, conAAChart, "'proposed'"
    End If

    DisplaySection_AllocCompare = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function

Public Function DisplaySection_BCMA() As Boolean
    DisplaySection_BCMA = DisplaySection_Common(conTableCaption_BCMA, conTableKey_BCMA, conXPathCaption_BCMA, _
                                                    conXPath_SecTag_BCMA, conTableIndex_BCMA_LV2)
                                                    

End Function

Public Function DisplaySection_DCMA() As Boolean

    'Show chart below
    Dim nTableIndex As Integer
    DisplaySection_DCMA = False
    
    nTableIndex = GetTableIndex(conTableKey_DCMA)
    If nTableIndex = -1 Then Exit Function

    'show chart
    TransformAndInsertChart nTableIndex, 0, 0, 4, 1, conCorrMatrixChart, ""
    
    DisplaySection_DCMA = DisplaySection_Common(conTableCaption_DCMA, conTableKey_DCMA, conXPathCaption_DCMA, _
                                                    conXPath_SecTag_DCMA, conTableIndex_DCMA_LV2, 5)

End Function

Public Function DisplaySection_AssetClassDetails() As Boolean
    DisplaySection_AssetClassDetails = DisplaySection_Common(conTableCaption_AssetClassDetails, conTableKey_AssetClassDetails, conXPathCaption_AssetClassDetails, _
                                                    conXPath_SecTag_AssetClassDetails, conTableIndex_AssetClassDetails_LV2)

End Function
Public Function DisplaySection_OptimizationConstranints() As Boolean
    DisplaySection_OptimizationConstranints = DisplaySection_Common(conTableCaption_OptimizationConstranints, conTableKey_OptimizationConstranints, conXPathCaption_OptimizationConstranints, _
                                                    conXPath_SecTag_OptimizationConstranints, conTableIndex_OptimizationConstranints_LV2)

End Function

Public Function DisplaySection_ExpectedRSC() As Boolean
    DisplaySection_ExpectedRSC = DisplaySection_Common(conTableCaption_ExpectedRSC, conTableKey_ExpectedRSC, conXPathCaption_ExpectedRSC, _
                                                    conXPath_SecTag_ExpectedRSC, conTableIndex_ExpectedRSC_LV2)


End Function

Public Function DisplaySection_Pensions() As Boolean
    DisplaySection_Pensions = DisplaySection_Common(conTableCaption_Pensions, conTableKey_Pensions, conXPathCaption_Pensions, _
                                                    conXPath_SecTag_Pensions, conTableIndex_Pensions_LV2)

End Function

Public Function DisplaySection_Income() As Boolean
    DisplaySection_Income = DisplaySection_Common(conTableCaption_Income, conTableKey_Income, conXPathCaption_Income, _
                                                    conXPath_SecTag_Income, conTableIndex_Income_LV2)

End Function
Public Function DisplaySection_SecondaryIncome() As Boolean
    DisplaySection_SecondaryIncome = DisplaySection_Common(conTableCaption_SecondaryIncome, conTableKey_SecondaryIncome, conXPathCaption_SecondaryIncome, _
                                                    conXPath_SecTag_SecondaryIncome, conTableIndex_SecondaryIncome_LV2)

End Function

Public Function DisplaySection_InsuranceBenefits() As Boolean
    DisplaySection_InsuranceBenefits = DisplaySection_Common(conTableCaption_InsuranceBenefits, conTableKey_InsuranceBenefits, conXPathCaption_InsuranceBenefits, _
                                                    conXPath_SecTag_InsuranceBenefits, conTableIndex_InsuranceBenefits_LV2)

End Function

Public Function DisplaySection_IncomeSummary() As Boolean
    DisplaySection_IncomeSummary = DisplaySection_Common(conTableCaption_IncomeSummary, conTableKey_IncomeSummary, conXPathCaption_IncomeSummary, _
                                                    conXPath_SecTag_IncomeSummary, conTableIndex_IncomeSummary_LV2)

End Function

Public Function DisplaySection_OtherIncome() As Boolean
    DisplaySection_OtherIncome = DisplaySection_Common(conTableCaption_OtherIncome, conTableKey_OtherIncome, conXPathCaption_OtherIncome, _
                                                    conXPath_SecTag_OtherIncome, conTableIndex_OtherIncome_LV2)

End Function

Public Function DisplaySection_RetirementNeeds() As Boolean
    DisplaySection_RetirementNeeds = DisplaySection_Common(conTableCaption_RetirementNeeds, conTableKey_RetirementNeeds, conXPathCaption_RetirementNeeds, _
                                                    conXPath_SecTag_RetirementNeeds, conTableIndex_RetirementNeeds_LV2)

End Function

Public Function DisplaySection_Education() As Boolean
    DisplaySection_Education = DisplaySection_Common(conTableCaption_Education, conTableKey_Education, conXPathCaption_Education, _
                                                    conXPath_SecTag_Education, conTableIndex_Education_LV2)

End Function

Public Function DisplaySection_Expenses() As Boolean
    DisplaySection_Expenses = DisplaySection_Common(conTableCaption_Expenses, conTableKey_Expenses, conXPathCaption_Expenses, _
                                                    conXPath_SecTag_Expenses, conTableIndex_Expenses_LV2)

End Function

' For Project #777
Public Function DisplaySection_AADisclosure(preSecId As String) As Boolean
    DisplaySection_AADisclosure = DisplaySection_Disclosure(conTableCaption_AADisclosure, conTableKey_AADisclosure, conXPathCaption_AADisclosure, _
                                                    conXPath_SecTag_AADisclosure, conTableIndex_AADisclosure_LV2, preSecId)

End Function

Public Function DisplaySection_WFMDisclosure(preSecId As String) As Boolean
    DisplaySection_WFMDisclosure = DisplaySection_Disclosure(conTableCaption_WFMDisclosure, conTableKey_WFMDisclosure, conXPathCaption_WFMDisclosure, _
                                                    conXPath_SecTag_WFMDisclosure, conTableIndex_WFMDisclosure_LV2, preSecId)

End Function

Public Function DisplaySection_RTQDisclosure(preSecId As String) As Boolean
    DisplaySection_RTQDisclosure = DisplaySection_Disclosure(conTableCaption_RTQDisclosure, conTableKey_RTQDisclosure, conXPathCaption_RTQDisclosure, _
                                                    conXPath_SecTag_RTQDisclosure, conTableIndex_RTQDisclosure_LV2, preSecId)

End Function

Public Function DisplaySection_PCMDisclosure(preSecId As String) As Boolean
    DisplaySection_PCMDisclosure = DisplaySection_Disclosure(conTableCaption_PCMDisclosure, conTableKey_PCMDisclosure, conXPathCaption_PCMDisclosure, _
                                                    conXPath_SecTag_PCMDisclosure, conTableIndex_PCMDisclosure_LV2, preSecId)

End Function

Public Function DisplaySection_WealthTable() As Boolean
    
    Dim node As Office.CustomXMLNode
    Dim strXPath As String

    strXPath = conXPath_SecTag_WealthTable
    Set node = g_CustomXMLPart.SelectSingleNode("root/label/bwealthDetail")
    If Not node Is Nothing Then
        If node.Text = "1" Then
            strXPath = conXPath_SecTag_WealthTableDetail
        End If
    End If

    DisplaySection_WealthTable = DisplaySection_Common(conTableCaption_WealthTable, conTableKey_WealthTable, conXPathCaption_WealthTable, _
                                                    strXPath, conTableIndex_WealthTable_LV2)

End Function
Public Function DisplaySection_ExpenseSummary() As Boolean
    DisplaySection_ExpenseSummary = DisplaySection_Common(conTableCaption_ExpenseSummary, conTableKey_ExpenseSummary, conXPathCaption_ExpenseSummary, _
                                                    conXPath_SecTag_ExpenseSummary, conTableIndex_ExpenseSummary_LV2)

End Function

Public Function DisplaySection_ProposedPortfolio() As Boolean
    DisplaySection_ProposedPortfolio = DisplaySection_Common(conTableCaption_ProposedPortfolio, conTableKey_ProposedPortfolio, conXPathCaption_ProposedPortfolio, _
                                                    conXPath_SecTag_ProposedPortfolio, conTableIndex_ProposedPortfolio_LV2)

End Function

Public Function DisplayTableDesc(nTableIndex As Integer, TitleKey As String, Optional row As Integer = g_SectionDesc_Row) As Boolean
    On Error GoTo Err_Proc
    Dim node As Office.CustomXMLNode
    Dim strTemp As String

    DisplayTableDesc = False
    
    'test----
    If g_adjustLayout = True And g_debug = True Then
        DisplayTableDesc = True
        Exit Function
    End If
    '---------
    
    Set node = g_CustomXMLPart.SelectSingleNode(GetTextXPath(TitleKey))
    If node Is Nothing Then
        If ThisDocument.Tables(nTableIndex).Rows.Count >= row Then
            ThisDocument.Tables(nTableIndex).Rows(row).Delete
        End If
        Exit Function
    End If
    
    strTemp = Trim(node.Text)
    If strTemp = "" Then
        If ThisDocument.Tables(nTableIndex).Rows.Count >= row Then
            ThisDocument.Tables(nTableIndex).Rows(row).Delete
        End If
        Exit Function
    End If
    
    If ThisDocument.Tables(nTableIndex).Rows.Count < row Then
        ThisDocument.Tables(nTableIndex).Rows.Add
    End If
        
    Dim oCell As Cell
    Set oCell = ThisDocument.Tables(nTableIndex).Cell(row, 1)
    SetTableCellStyle nTableIndex, row, 1, conReportContentIdx
    oCell.Range.Text = strTemp
    ThisDocument.Tables(nTableIndex).Rows(row).Borders(1).Visible = True
    DisplayTableDesc = True
    Exit Function
Err_Proc:
    Err.Clear
End Function


Public Function DisplaySection_Common(TableCaption As String, TableKey As String, TitleKey As String, BindXmlPath As String, tableIndex As Integer, Optional row As Integer = g_SectionDesc_Row, Optional tableIndexLv3 As Integer = 0) As Boolean
    On Error GoTo Err_Proc
    Dim msXmlTb As MStarXmlGrid
    DisplaySection_Common = False
    Dim nTableIndex As Integer
    
    nTableIndex = GetTableIndex(TableKey)
    If nTableIndex = -1 Then Exit Function 'nTableIndex = conTableIndex_Acconts_LV1
    'init section table
    If g_testGrid = True Then VisibleGridLine nTableIndex, g_ShowGridLine
    'ThisDocument.Tables(conTableIndex_Acconts_LV1).Rows(1).Select
    
    ChangeSectionHeaderBackColor (nTableIndex)
    
'    'bind label
'    BindContentControlWithXml SecDesc, GetTextXPath(TitleKey)
    If (TitleKey <> "4_1") And (TitleKey <> "4_2") And (TitleKey <> "6_2") And (TitleKey <> "6_5") And (TitleKey <> "6_6") And (TitleKey <> "6_7") And (TitleKey <> "7_3") And (TitleKey <> "7_6") And (TitleKey <> "8_11") And (TitleKey <> "7_1") And (TitleKey <> "7_4") And (TitleKey <> "1_7") Then
        DisplayTableDesc nTableIndex, TitleKey, row
    End If
    
    If row = g_SectionDesc_Row - 1 Then
        BindContentControlWithXml TableCaption, GetTitleXPath(TitleKey), conSectionHeadingIdx
        DisplaySection_Common = True
        Exit Function
    End If
    'attach table
    Set msXmlTb = New MStarXmlGrid
    If tableIndexLv3 > 0 Then
        If msXmlTb.AttachToTableWithIndexEx(nTableIndex, tableIndex, tableIndexLv3) = False Then
            BindContentControlWithXml TableCaption, GetTitleXPath(TitleKey), conSectionHeadingIdx
            Exit Function
        End If
    Else
        If (TitleKey = "6_2") Or (TitleKey = "7_3") Or (TitleKey = "7_6") Or (TitleKey = "8_11") Or (TitleKey = "7_1") Or (TitleKey = "7_4") Or (TitleKey = "1_7") Then
            tableIndex = 0
        End If
        If msXmlTb.AttachToTableWithIndex(nTableIndex, tableIndex) = False Then
            BindContentControlWithXml TableCaption, GetTitleXPath(TitleKey), conSectionHeadingIdx
            Exit Function
        End If
    End If
    
    Dim bDelLastS As Boolean
    bDelLastS = False
    If TableCaption = conTableCaption_ClientsInformation And g_strPermission <> "ENU" Then
        bDelLastS = True
    End If
    Call msXmlTb.SetDataXPath(BindXmlPath, bDelLastS)
    
    If msXmlTb.FillGrid("", TitleKey) = False Then
        BindContentControlWithXml TableCaption, GetTitleXPath(TitleKey), conSectionHeadingIdx
        Set msXmlTb = Nothing
        Exit Function
    End If
    Set msXmlTb = Nothing
    
    'attach table caption
    BindContentControlWithXml TableCaption, GetTitleXPath(TitleKey), conSectionHeadingIdx

    DisplaySection_Common = True
    Exit Function
Err_Proc:
    Err.Clear
    'MsgBox Err.Description
End Function

'For Project #777
Public Function DisplaySection_Disclosure(TableCaption As String, TableKey As String, TitleKey As String, BindXmlPath As String, tableIndex As Integer, preSecId As String, Optional row As Integer = g_SectionDesc_Row, Optional tableIndexLv3 As Integer = 0) As Boolean
    On Error GoTo Err_Proc
    Dim msXmlTb As MStarXmlGrid
    
    DisplaySection_Disclosure = False
    Dim nTableIndex As Integer
    
    ' Get Title Table
    nTableIndex = GetTableIndex(TableKey)
    If nTableIndex = -1 Then Exit Function
    
    
    Dim strTitle As String
    strTitle = GetXmlValue(GetTitleXPath(TitleKey))
    
    Dim strSubTitle As String
    strSubTitle = GetXmlValue(BindXmlPath + "/@subtitle")
    If ((TitleKey = "10_1") Or (TitleKey = "10_3")) Then
        strSubTitle = strTitle
        strTitle = GetXmlValue(BindXmlPath + "/@title")
    End If
    
    Dim table1 As table
    Set table1 = ThisDocument.Tables(nTableIndex)
    
    table1.Range.Style = ThisDocument.Styles(g_arrStyleNames(conSectionHeadingIdx))
    table1.Range.Font.Size = ThisDocument.Styles(g_arrStyleNames(conSectionHeadingIdx)).Font.Size
    table1.Range.Font.name = ThisDocument.Styles(g_arrStyleNames(conSectionHeadingIdx)).Font.name
    table1.Cell(2, 1).Range.Font.Bold = True
    table1.Cell(2, 1).Range.Text = strTitle
    table1.Cell(3, 1).Range.Text = strSubTitle
    table1.Cell(3, 1).Range.Font.Bold = False
    ' Show top border for row 3
    table1.Rows(3).Borders(1).Visible = True
    table1.Rows(3).Borders(1).LineStyle = wdLineStyleDashLargeGap
    table1.Columns.Width = 529
    
    'init section table
    If g_testGrid = True Then VisibleGridLine nTableIndex, g_ShowGridLine
    
    'attach table
    Set msXmlTb = New MStarXmlGrid
    If msXmlTb.AttachToTableWithIndex(nTableIndex, tableIndex) = False Then
        Exit Function
    End If
    
    Call msXmlTb.SetDataXPath(BindXmlPath, False)
    
    If msXmlTb.FillGrid(conParserType_Disclosure, TitleKey) = False Then
        Set msXmlTb = Nothing
        Exit Function
    End If
    Set msXmlTb = Nothing
    
    table1.Tables(tableIndex).Select
    ThisDocument.Range(Start:=Selection.Start, End:=Selection.Start). _
        InsertBreak Type:=wdSectionBreakContinuous
    Selection.Start = Selection.Start + 1
    With Selection.PageSetup.TextColumns
        .SetCount NumColumns:=2
        .EvenlySpaced = True
        .LineBetween = False
        .Width = InchesToPoints(3.61)
        .Spacing = InchesToPoints(0.5)
    End With
    
    Dim breakType As Word.WdBreakType
    breakType = wdSectionBreakNextPage
    If (preSecId = "") Or (isGroup(preSecId)) Then
        breakType = wdSectionBreakContinuous
    End If
    
    table1.Select
    ThisDocument.Range(Start:=Selection.Start, End:=Selection.Start). _
        InsertBreak Type:=breakType
    Selection.Start = Selection.Start + 1
    With Selection.PageSetup.TextColumns
        .SetCount NumColumns:=1
    End With
    
    DisplaySection_Disclosure = True
    Exit Function
Err_Proc:
    Err.Clear
    'MsgBox Err.Description
End Function

Public Function DisplaySection_ActionPlan() As Boolean
    g_PreProcess = False
    DisplaySection_ActionPlan = DisplaySection_Common(conTableCaption_ActionPlan, conTableKey_ActionPlan, conXPathCaption_ActionPlan, conXPath_SecTag_ActionPlan, conTableIndex_ActionPlan_LV2)
    g_PreProcess = True
End Function

Public Function DisplaySection_ActionPlanByAssetClass() As Boolean
    g_PreProcess = False
    DisplaySection_ActionPlanByAssetClass = DisplaySection_Common(conTableCaption_ActionPlanByAssetClass, conTableKey_ActionPlanByAssetClass, conXPathCaption_ActionPlanByAssetClass, conXPath_SecTag_ActionPlanByAssetClass, conTableIndex_ActionPlanByAssetClass_LV2)
    g_PreProcess = True
End Function

Public Function DisplaySection_RegionalExposure() As Boolean
    'bind label
    BindContentControlWithXml conLabel_BenchmarkName, "/root/label/benchmark", conTableDataIdx, True
    BindContentControlWithXml conLabel_Reasset, "/root/IPS/label/reasset", conTableDataIdx
    BindContentControlWithXml conLabel_Recur, "/root/IPS/label/recur", conTableDataIdx
    BindContentControlWithXml conLabel_Rebmk, "/root/IPS/label/rebmk", conTableDataIdx
    BindContentControlWithXml conLabel_Repropos, "/root/IPS/label/repropos", conTableDataIdx

    DisplaySection_RegionalExposure = DisplaySection_Common(conTableCaption_RegionalExposure, conTableKey_RegionalExposure, conXPathCaption_RegionalExposure, conXPath_SecTag_RegionalExposure, conTableIndex_RegionalExposure_LV2, g_SectionDesc_Row, 2)
End Function

Public Function DisplaySection_MutualFundFees() As Boolean
    DisplaySection_MutualFundFees = DisplaySection_Common(conTableCaption_MutualFundFees, conTableKey_MutualFundFees, conXPathCaption_MutualFundFees, _
                                                    conXPath_SecTag_MutualFundFees, conTableIndex_MutualFundFees_LV2)

End Function

Public Function DisplaySection_Performance() As Boolean
    DisplaySection_Performance = DisplaySection_Common(conTableCaption_Performance, conTableKey_Performance, conXPathCaption_Performance, _
                                                    conXPath_SecTag_Performance, conTableIndex_Performance_LV2)

End Function

Public Function DisplaySection_RRStatistics() As Boolean
    DisplaySection_RRStatistics = DisplaySection_Common(conTableCaption_RRStatistics, conTableKey_RRStatistics, conXPathCaption_RRStatistics, _
                                                    conXPath_SecTag_RRStatistics, conTableIndex_RRStatistics_LV2)

End Function

Public Function DisplaySection_MPTStatistics() As Boolean
    DisplaySection_MPTStatistics = DisplaySection_Common(conTableCaption_MPTStatistics, conTableKey_MPTStatistics, conXPathCaption_MPTStatistics, _
                                                    conXPath_SecTag_MPTStatistics, conTableIndex_MPTStatistics_LV2)

End Function


Public Function DisplaySection_PerformanceofPS() As Boolean
    DisplaySection_PerformanceofPS = DisplaySection_Common(conTableCaption_PerformanceofPS, conTableKey_PerformanceofPS, conXPathCaption_PerformanceofPS, _
                                                    conXPath_SecTag_PerformanceofPS, conTableIndex_PerformanceofPS_LV2)

End Function

'Public Function DisplaySection_LegalRegulatory() As Boolean
'    DisplaySection_LegalRegulatory = DisplaySection_Common(conTableCaption_LegalRegulatory, conTableKey_LegalRegulatory, conXPathCaption_LegalRegulatory, _
'                                                    conXPath_SecTag_LegalRegulatory, conTableIndex_LegalRegulatory_LV2, g_SectionDesc_Row - 1)
'
'End Function
'Public Function DisplaySection_InvestmentES() As Boolean
'    DisplaySection_InvestmentES = DisplaySection_Common(conTableCaption_InvestmentES, conTableKey_InvestmentES, conXPathCaption_InvestmentES, _
'                                                    conXPath_SecTag_InvestmentES, conTableIndex_InvestmentES_LV2, g_SectionDesc_Row - 1)
'
'End Function
Public Function DisplaySection_Group(secID As String) As String
    On Error GoTo Err_Proc
    Dim nTableIndex As Integer
    Dim i As Integer
    Dim table As Word.table

    DisplaySection_Group = ""
    nTableIndex = GetTableIndex(conTableKey_Group)
    If nTableIndex = -1 Then Exit Function 'nTableIndex = conTableIndex_Acconts_LV1
    'init section table
    If g_debug = True Then VisibleGridLine nTableIndex, g_ShowGridLine

    Set table = ThisDocument.Tables(nTableIndex).Tables(1)
    i = 0
    table.Select
    For Each oCell In Selection.Cells
        If i = 0 Then
            strData = secID
        Else
            strData = GetXmlValue(GetGroupXPath(secID))
            DisplaySection_Group = strData
            SetTableCellStyle nTableIndex, i + 1, 1, conGroupHeadingIdx
        End If
        oCell.Range.Text = strData
        'oCell.Range.Font.Name = conDefFontName
        i = i + 1
    Next oCell
    
    Exit Function
Err_Proc:
    Err.Clear
    'MsgBox Err.Description
End Function
Public Function DisplaySection_TextOnly(secID As String) As String
    On Error GoTo Err_Proc

    Dim nTableIndex As Integer
    Dim i As Integer
    Dim table As Word.table

    DisplaySection_TextOnly = ""
    nTableIndex = GetTableIndex(conTableKey_TextOnly)
    If nTableIndex = -1 Then Exit Function 'nTableIndex = conTableIndex_Acconts_LV1
    'init section table
    If g_debug = True Then VisibleGridLine nTableIndex, g_ShowGridLine

    ChangeSectionHeaderBackColor (nTableIndex)

    Set table = ThisDocument.Tables(nTableIndex).Tables(1)
    i = 0
    
    table.Rows(1).Select
    Selection.Shading.BackgroundPatternColor = ThisDocument.Styles(g_arrStyleNames(conSectionHeadingIdx)).Font.Shading.BackgroundPatternColor

    table.Select
    
    Dim fsIndex As Integer
    For Each oCell In Selection.Cells
        fsIndxe = 0
        If i = 0 Then
            strData = secID
        Else
            If i = 1 Then
                strData = GetXmlValue(GetTitleXPath(secID))
                DisplaySection_TextOnly = strData
                fsIndex = conSectionHeadingIdx
                'SetTableCellStyle nTableIndex, i, 1, conSectionHeadingIdx
            Else
                strData = GetXmlValue(GetTextXPath(secID))
                fsIndex = conReportContentIdx
                'SetTableCellStyle nTableIndex, i, 1, conReportContentIdx
            End If
        End If
                
        If (fsIndex > 0) Then
             oCell.Range.Style = ThisDocument.Styles(g_arrStyleNames(fsIndex))
             If i = 1 Then
                oCell.Range.Shading.BackgroundPatternColor = ThisDocument.Styles(g_arrStyleNames(conSectionHeadingIdx)).Font.Shading.BackgroundPatternColor
             End If
        End If
        
        oCell.Range.Text = strData
        
        i = i + 1
    Next oCell

    Exit Function
Err_Proc:
    Err.Clear
    'MsgBox Err.Description
End Function
'
'Public Function DisplaySection_TextOnly(secID As String, strTableKeyToAfter As String) As String
'    On Error GoTo Err_proc
'
'    DisplaySection_TextOnly = ""
'    Dim table As Word.table
'
'    'test----
'    If g_adjustLayout = True And g_debug = True Then
'        Exit Function
'    End If
'    '---------
'
'    Dim nTableIndexAfter As Integer
'    nTableIndexAfter = GetTableIndex(strTableKeyToAfter)
'    If nTableIndexAfter = -1 And strTableKeyToAfter <> "" Then Exit Function
'
'    If strTableKeyToAfter <> "" Then
'        ThisDocument.Tables(nTableIndexAfter).Select
'        With Selection
'            .MoveRight Unit:=wdCharacter, Count:=1
'        End With
'
'        Selection.TypeParagraph
'
''        AddBlankRowToEnd
''        With Selection
''            .MoveRight Unit:=wdCharacter, Count:=1
''        End With
'    Else
'        MoveToDocStart
'    End If
'
''    MoveToDocStart
''    AddBlankRowToEnd
''    MoveToDocStart
'
'    Set table = ThisDocument.Tables.Add(Range:=Selection.Range, NumRows:=2, NumColumns:= _
'    1, DefaultTableBehavior:=wdWord9TableBehavior, AutoFitBehavior:= _
'    wdAutoFitWindow)
'    'set font
'    table.Select
'    With Selection.Font
'        .Name = conDefFontName
'        .Bold = False
'        .Size = conDefTextFontSize
'        .Spacing = 0
'    End With
'
'    g_mapCoverDir.Add CStr(Selection.Information(wdActiveEndPageNumber)), GetXmlValue(GetTitleXPath(secID))
'
'    Set myGrid = New MStarGrid
'    myGrid.AttachToTable table
'    Application.ScreenUpdating = False
'
'    myGrid.VisibleGridLine g_ShowGridLine
'    Set myGrid = Nothing
'
''    table.Select
''    With Selection
''        .MoveRight Unit:=wdCharacter, Count:=1
''    End With
'
'    Dim oCell As Cell
'    Dim strData As String
'    Dim i As Integer
'
'    i = 0
'    table.Select
'    For Each oCell In Selection.Cells
'        If i = 0 Then
'            strData = GetXmlValue(GetTitleXPath(secID))
'            oCell.Range.Bold = True
'             table.Rows(1).Alignment = wdAlignRowLeft
'            oCell.Shading.BackgroundPatternColor = wdColorGray10
'            'oCell.Height = conTitleHeight
'            DisplaySection_TextOnly = strData
'
'        Else
'            strData = GetXmlValue(GetTextXPath(secID))
'        End If
'        oCell.Range.Text = strData
'
'        i = i + 1
'    Next oCell
'    'Application.GoBack
'    Application.ScreenUpdating = True
'
'
'    Exit Function
'Err_proc:
'    Err.Clear
'    'Application.GoBack
'    Application.ScreenUpdating = True
'    'MsgBox Err.Description
'End Function



Public Function DisplaySection_Agreement() As Boolean
    DisplaySection_Agreement = DisplaySection_Common(conTableCaption_Agreement, conTableKey_Agreement, conXPathCaption_Agreement, _
                                                    conXPath_SecTag_Agreement, conTableIndex_Agreement_LV2, g_SectionDesc_Row - 1)
                                                    
    Dim table As Word.table
    Dim nTableIndex As Integer

    nTableIndex = GetTableIndex(conTableKey_Agreement)
    If nTableIndex = -1 Then Exit Function
    Set table = ThisDocument.Tables(nTableIndex).Tables(1)
    
    'bind label
    BindContentControlWithXml conLabel_ClientS, "//signature/clientsign", conReportContentIdx
    BindContentControlWithXml conLabel_SpouseS, "//signature/clientsign", conReportContentIdx
    BindContentControlWithXml conLabel_AdvisorS, "//cover/AdvisorName", conReportContentIdx
    BindContentControlWithXml conLabel_SDate, "//signature/date", conReportContentIdx
    
    Dim nPos As Integer
    Dim strSigName As String
    strSigName = GetXmlValue("//cover/SigName")
    nPos = InStr(1, strSigName, "{}")
    If nPos > 0 Then
        BindContentControlWithText conLabel_SigClientName, Left(strSigName, nPos - 1), conReportContentIdx
        BindContentControlWithText conLabel_SigSpouseName, Right(strSigName, Len(strSigName) - nPos - 1), conReportContentIdx
    Else
        BindContentControlWithXml conLabel_SigClientName, "//cover/SigName", conReportContentIdx
        'BindContentControlWithXml conLabel_SigSpouseName, "//label/blank"
        table.Rows(5).Delete
        table.Rows(4).Delete
    End If

End Function

Public Function DisplaySection_Cover() As Boolean
    On Error GoTo Err_Proc
    Dim msXmlTb As MStarXmlGrid
    Dim nTableIndex As Integer
    DisplaySection_Cover = False
    
    nTableIndex = GetTableIndex(conTableKey_Cover)
    If nTableIndex = -1 Then Exit Function 'nTableIndex = conTableIndex_Allocation_LV1
    
    'init section table
    'If g_debug = True Then VisibleGridLine nTableIndex, g_ShowGridLine
    
    'attach table
    Set msXmlTb = New MStarXmlGrid
    If msXmlTb.AttachToTableWithIndex(nTableIndex, conTableIndex_Cover_LV2) = False Then
        Exit Function
    End If
    Call msXmlTb.SetDataXPath(conXPath_SecTag_Cover)
    
    If msXmlTb.FillGrid(conParserType_Cover) = False Then
        Set msXmlTb = Nothing
        Exit Function
    End If
    Set msXmlTb = Nothing

    DisplaySection_Cover = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function

Public Function IsTextOnly(secID As String) As Boolean
    IsTextOnly = False

    Dim node As Office.CustomXMLNode
    Dim strXPath  As String
    
    strXPath = "//report[@currpt='" + g_ReportSetting.ReportType + "']/sections/sub[@id='" + secID + "']/@textonly"
    Set node = g_CustomXMLPart.SelectSingleNode(strXPath)
    If node Is Nothing Then Exit Function
    
    If node.Text <> "1" Then Exit Function

    IsTextOnly = True
End Function

Public Function isGroup(secID As String) As Boolean
    isGroup = False

    Dim node As Office.CustomXMLNode
    Dim strXPath  As String
    
    strXPath = GetGroupXPath(secID)
    Set node = g_CustomXMLPart.SelectSingleNode(strXPath)
    If node Is Nothing Then Exit Function
    
    isGroup = True
End Function

Public Function DisplaySection_ForecastedWealth() As Boolean
    Dim nTableIndex As Integer
    DisplaySection_ForecastedWealth = False
    
    nTableIndex = GetTableIndex(conTableKey_ForecastedWealth)
    If nTableIndex = -1 Then Exit Function 'nTableIndex = conTableIndex_Allocation_LV1


    'show chart
    TransformAndInsertChart nTableIndex, 1, 0, 1, 1, conForecastedWealthChart, "'Wealth'"
    
    DisplaySection_ForecastedWealth = DisplaySection_Common(conTableCaption_ForecastedWealth, conTableKey_ForecastedWealth, conXPathCaption_ForecastedWealth, _
                                                    conXPath_SecTag_ForecastedWealth, conTableIndex_ForecastedWealth_LV2)
                            
End Function


Public Function DisplaySection_CoverDir() As Boolean
    On Error GoTo Err_Proc
    Dim msXmlTb As MStarXmlGrid
    Dim nTableIndex As Integer
    DisplaySection_CoverDir = False
    
    nTableIndex = GetTableIndex(conTableKey_CoverDir)
    If nTableIndex = -1 Then Exit Function 'nTableIndex = conTableIndex_Allocation_LV1
    
    
    'init section table
    'If g_debug = True Then VisibleGridLine nTableIndex, g_ShowGridLine
    
    'attach table
    Call BindContentControlWithXml("lblHd_TableContents", "//label/tableCont", conSubTitleIdx)
    Set msXmlTb = New MStarXmlGrid
    If msXmlTb.AttachToTableWithIndex(nTableIndex, conTableIndex_CoverDir_LV2) = False Then
        Exit Function
    End If
    Call msXmlTb.SetDataXPath(conXPath_SecTag_CoverDir)
    
    If msXmlTb.FillGrid(conParserType_CoverDir) = False Then
        Set msXmlTb = Nothing
        Exit Function
    End If
    Set msXmlTb = Nothing

    DisplaySection_CoverDir = True
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function

Public Function DisplaySection_ForecastedReturns() As Boolean
    Dim nTableIndex As Integer
    DisplaySection_ForecastedReturns = False
    
    nTableIndex = GetTableIndex(conTableKey_ForecastedReturns)
    If nTableIndex = -1 Then Exit Function 'nTableIndex = conTableIndex_Allocation_LV1


    'show chart
    TransformAndInsertChart nTableIndex, 1, 0, 1, 1, conForecastedReturnsChart, "'Return'"
    
    DisplaySection_ForecastedReturns = DisplaySection_Common(conTableCaption_ForecastedReturns, conTableKey_ForecastedReturns, conXPathCaption_ForecastedReturns, _
                                                    conXPath_SecTag_ForecastedReturns, conTableIndex_ForecastedReturns_LV2)
                            
End Function

Public Function DisplaySection_WealthForecast() As Boolean
    Dim nTableIndex As Integer
    DisplaySection_WealthForecast = False
    
    nTableIndex = GetTableIndex(conTableKey_WealthForecast)
    If nTableIndex = -1 Then Exit Function 'nTableIndex = conTableIndex_Allocation_LV1


    'show chart
    TransformAndInsertChart nTableIndex, 1, 0, 1, 1, conWealthForecastChart, ""
    
    DisplaySection_WealthForecast = DisplaySection_Common(conTableCaption_WealthForecast, conTableKey_WealthForecast, conXPathCaption_WealthForecast, _
                                                    conXPath_SecTag_WealthForecast, conTableIndex_WealthForecast_LV2)
                            
End Function


Public Function DisplaySection_ProposedPortfolioEF() As Boolean
    Dim nTableIndex As Integer
    DisplaySection_ProposedPortfolioEF = False
    
    nTableIndex = GetTableIndex(conTableKey_ProposedPortfolioEF)
    If nTableIndex = -1 Then Exit Function 'nTableIndex = conTableIndex_Allocation_LV1


    'show chart
    TransformAndInsertChart nTableIndex, 1, 0, 1, 1, conProposedPortfolioEFChart, "'1'"
    
    DisplaySection_ProposedPortfolioEF = DisplaySection_Common(conTableCaption_ProposedPortfolioEF, conTableKey_ProposedPortfolioEF, conXPathCaption_ProposedPortfolioEF, _
                                                    conXPath_SecTag_ProposedPortfolioEF, conTableIndex_ProposedPortfolioEF_LV2)
                            
End Function

Public Function DisplaySection_EquityInvestmentStyle() As Boolean
    Dim nTableIndex As Integer
    DisplaySection_EquityInvestmentStyle = False
    
    nTableIndex = GetTableIndex(conTableKey_EquityInvestmentStyle)
    If nTableIndex = -1 Then Exit Function 'nTableIndex = conTableIndex_Allocation_LV1


    'show chart
    TransformAndInsertChart nTableIndex, 1, 0, 1, 1, conEquityStyleboxChart, ""
    
    DisplaySection_EquityInvestmentStyle = DisplaySection_Common(conTableCaption_EquityInvestmentStyle, conTableKey_EquityInvestmentStyle, conXPathCaption_EquityInvestmentStyle, _
                                                    conXPath_SecTag_EquityInvestmentStyle, conTableIndex_EquityInvestmentStyle_LV2)
                            
End Function

Public Function DisplaySection_SectorAnalysis() As Boolean
    On Error GoTo Err_Proc
    Dim msXmlTb As MStarXmlGrid
    Dim nTableIndex As Integer
    DisplaySection_SectorAnalysis = False
    
    nTableIndex = GetTableIndex(conTableKey_SectorAnalysis)
    If nTableIndex = -1 Then Exit Function 'nTableIndex = conTableIndex_Allocation_LV1
    
    ChangeSectionHeaderBackColor (nTableIndex)
     
    'init section table
    If g_testGrid = True Then VisibleGridLine nTableIndex, g_ShowGridLine
    
    'attach table caption
    BindContentControlWithXml conTableCaption_SectorAnalysis, GetTitleXPath(conXPathCaption_SectorAnalysis), conSectionHeadingIdx
    
    'bind label
    BindContentControlWithXml conLabel_SectorWeightings, "/root/IPS/label/sector/@name", conTableDataIdx
    BindContentControlWithXml conLabel_Stylecur, "/root/IPS/label/stylecur", conTableDataIdx
    BindContentControlWithXml conLabel_Stylepos, "/root/IPS/label/stylepos", conTableDataIdx
    BindContentControlWithXml conLabel_BMK, "/root/IPS/label/benchmark/@name", conTableDataIdx
    
    DisplayTableDesc nTableIndex, conXPathCaption_SectorAnalysis, 5
    'attach table
    Set msXmlTb = New MStarXmlGrid
    If msXmlTb.AttachToTableWithIndexEx4L(nTableIndex, 1, 2, 1) = False Then
        Exit Function
    End If
    Call msXmlTb.SetDataXPath(conXPath_SecTag_SectorAnalysis)
    
    If msXmlTb.FillGrid(conParserType_SectorAnalysis) = False Then
        Set msXmlTb = Nothing
        Exit Function
    End If
    Set msXmlTb = Nothing

    TransformAndInsertChart nTableIndex, 1, 2, 1, 2, conStockSectorChart, ""


    DisplaySection_SectorAnalysis = True
    
    Exit Function
Err_Proc:
    MsgBox Err.Description
End Function

Public Function DisplaySection_FixedIncomeIS() As Boolean
    Dim nTableIndex As Integer
    DisplaySection_FixedIncomeIS = False
    
    nTableIndex = GetTableIndex(conTableKey_FixedIncomeIS)
    If nTableIndex = -1 Then Exit Function 'nTableIndex = conTableIndex_Allocation_LV1


    'show chart
    TransformAndInsertChart nTableIndex, 1, 0, 1, 1, conFixIncomeStyleboxChart, ""
    
    DisplaySection_FixedIncomeIS = DisplaySection_Common(conTableCaption_FixedIncomeIS, conTableKey_FixedIncomeIS, conXPathCaption_FixedIncomeIS, _
                                                    conXPath_SecTag_FixedIncomeIS, conTableIndex_FixedIncomeIS_LV2)
                            
End Function

Public Function DisplaySection_CreditQuality() As Boolean
    Dim nTableIndex As Integer
    DisplaySection_CreditQuality = False
    
    nTableIndex = GetTableIndex(conTableKey_CreditQuality)
    If nTableIndex = -1 Then Exit Function 'nTableIndex = conTableIndex_Allocation_LV1


    'show chart
    TransformAndInsertChart nTableIndex, 1, 0, 1, 1, conCreditQualityChart, ""
    
    DisplaySection_CreditQuality = DisplaySection_Common(conTableCaption_CreditQuality, conTableKey_CreditQuality, conXPathCaption_CreditQuality, _
                                                    conXPath_SecTag_CreditQuality, conTableIndex_CreditQuality_LV2)
                            
End Function

Public Function DisplaySection_InterestRR() As Boolean
    Dim nTableIndex As Integer
    DisplaySection_InterestRR = False
    
    nTableIndex = GetTableIndex(conTableKey_InterestRR)
    If nTableIndex = -1 Then Exit Function 'nTableIndex = conTableIndex_Allocation_LV1


    'show chart
    TransformAndInsertChart nTableIndex, 1, 0, 1, 1, conInterestRRChart, ""
    
    DisplaySection_InterestRR = DisplaySection_Common(conTableCaption_InterestRR, conTableKey_InterestRR, conXPathCaption_InterestRR, _
                                                    conXPath_SecTag_InterestRR, conTableIndex_InterestRR_LV2)
                            
End Function

Public Function DisplaySection_RiskQuestionnaire() As Boolean
    Dim nTableIndex As Integer
    DisplaySection_RiskQuestionnaire = False
    
    nTableIndex = GetTableIndex(conTableKey_RiskQuestionnaire)
    If nTableIndex = -1 Then Exit Function 'nTableIndex = conTableIndex_Allocation_LV1


    'show chart
    TransformAndInsertChart nTableIndex, 1, 0, 1, 1, conRiskQuestionnaireChart, ""
    
    DisplaySection_RiskQuestionnaire = DisplaySection_Common(conTableCaption_RiskQuestionnaire, conTableKey_RiskQuestionnaire, conXPathCaption_RiskQuestionnaire, _
                                                    conXPath_SecTag_RiskQuestionnaire, conTableIndex_RiskQuestionnaire_LV2)
                            
End Function


Public Function DisplaySection_RiskProfile() As Boolean
    Dim nTableIndex As Integer
    DisplaySection_RiskProfile = False
    
    nTableIndex = GetTableIndex(conTableKey_RiskProfile)
    If nTableIndex = -1 Then Exit Function 'nTableIndex = conTableIndex_Allocation_LV1


    'show chart
    TransformAndInsertChart nTableIndex, 1, 0, 1, 1, conRiskProfileChart, ""
    
    DisplaySection_RiskProfile = DisplaySection_Common(conTableCaption_RiskProfile, conTableKey_RiskProfile, conXPathCaption_RiskProfile, _
                                                    conXPath_SecTag_RiskProfile, conTableIndex_RiskProfile_LV2)
                            
End Function

Public Function DisplaySection_ClientsInformation() As Boolean
    g_PreProcess = False
    DisplaySection_ClientsInformation = DisplaySection_Common(conTableCaption_ClientsInformation, conTableKey_ClientsInformation, conXPathCaption_ClientsInformation, _
                                                    conXPath_SecTag_ClientsInformation, conTableIndex_ClientsInformation_LV2)
    g_PreProcess = True

End Function

Public Function DisplaySection_AccountContributions() As Boolean
    DisplaySection_AccountContributions = DisplaySection_Common(conTableCaption_AccountContributions, conTableKey_AccountContributions, conXPathCaption_AccountContributions, _
                                                    conXPath_SecTag_AccountContributions, conTableIndex_AccountContributions_LV2)

End Function


Public Function DisplaySection_EfficientFrontier() As Boolean
    Dim nTableIndex As Integer
    DisplaySection_EfficientFrontier = False
    
    nTableIndex = GetTableIndex(conTableKey_EfficientFrontier)
    If nTableIndex = -1 Then Exit Function 'nTableIndex = conTableIndex_Allocation_LV1


    'show chart
    TransformAndInsertChart nTableIndex, 1, 0, 1, 1, conProposedPortfolioEFChart, "'0'"
    
    DisplaySection_EfficientFrontier = DisplaySection_Common(conTableCaption_EfficientFrontier, conTableKey_EfficientFrontier, conXPathCaption_EfficientFrontier, _
                                                    conXPath_SecTag_EfficientFrontier, conTableIndex_EfficientFrontier_LV2)
                            
End Function


Public Function DisplaySection_WealthPercentiles() As Boolean
    
    'SHow chart below
    Dim nTableIndex As Integer
    DisplaySection_WealthPercentiles = False
    
    nTableIndex = GetTableIndex(conTableKey_WealthPercentiles)
    If nTableIndex = -1 Then Exit Function

    'show chart
    TransformAndInsertChart nTableIndex, 2, 0, 1, 1, conWealthPercentilesChart, ""
    
    DisplaySection_WealthPercentiles = DisplaySection_Common(conTableCaption_WealthPercentiles, conTableKey_WealthPercentiles, conXPathCaption_WealthPercentiles, _
                                                    conXPath_SecTag_WealthPercentiles, conTableIndex_WealthPercentiles_LV2, conTableIndex_WealthPercentiles_LV3)

End Function


Public Function DisplaySection_ReturnPercentiles() As Boolean
    
    'SHow chart below
    Dim nTableIndex As Integer
    DisplaySection_ReturnPercentiles = False
    
    nTableIndex = GetTableIndex(conTableKey_ReturnPercentiles)
    If nTableIndex = -1 Then Exit Function

    'show chart
    TransformAndInsertChart nTableIndex, 2, 0, 1, 1, conReturnPercentilesChart, ""
    
    DisplaySection_ReturnPercentiles = DisplaySection_Common(conTableCaption_ReturnPercentiles, conTableKey_ReturnPercentiles, conXPathCaption_ReturnPercentiles, _
                                                    conXPath_SecTag_ReturnPercentiles, conTableIndex_ReturnPercentiles_LV2, conTableIndex_ReturnPercentiles_LV3)
    

End Function


Public Function DisplaySection_IncomeAndExpenses() As Boolean
    
    DisplaySection_IncomeAndExpenses = DisplaySection_Common(conTableCaption_IncomeAndExpenses, conTableKey_IncomeAndExpenses, conXPathCaption_IncomeAndExpenses, _
                                                    conXPath_SecTag_IncomeAndExpenses, conTableIndex_IncomeAndExpenses_LV2)

End Function

Public Function DisplaySection_AdditionsAndWithdrawals() As Boolean
    
    DisplaySection_AdditionsAndWithdrawals = DisplaySection_Common(conTableCaption_AdditionsAndWithdrawals, conTableKey_AdditionsAndWithdrawals, conXPathCaption_AdditionsAndWithdrawals, _
                                                    conXPath_SecTag_AdditionsAndWithdrawals, conTableIndex_AdditionsAndWithdrawals_LV2)


End Function


Public Function DisplaySection_WealthTaxes() As Boolean
    
    DisplaySection_WealthTaxes = DisplaySection_Common(conTableCaption_WealthTaxes, conTableKey_WealthTaxes, conXPathCaption_WealthTaxes, _
                                                    conXPath_SecTag_WealthTaxes, conTableIndex_WealthTaxes_LV2)


End Function


Public Function DisplaySection_ComparisonScenarios() As Boolean
    
    DisplaySection_ComparisonScenario = DisplaySection_Common(conTableCaption_ComparisonScenarios, conTableKey_ComparisonScenarios, conXPathCaption_ComparisonScenarios, _
                                                    conXPath_SecTag_ComparisonScenarios, conTableIndex_ComparisonScenarios_LV2)


End Function


Public Function DisplaySection_ScenariosSummary() As Boolean
    Dim nTableIndex As Integer
    DisplaySection_ScenariosSummary = False
    
    nTableIndex = GetTableIndex(conTableKey_ScenariosSummary)
    If nTableIndex = -1 Then Exit Function 'nTableIndex = conTableIndex_Allocation_LV1

    ChangeSectionHeaderBackColor (nTableIndex)
    'show scenarios AA chart
    
    'show scenarios EF & WFE chart
    
    TransformAndInsertChartEx nTableIndex, 1
    
    BindContentControlWithXml conTableCaption_ScenariosSummary, GetTitleXPath(conXPathCaption_ScenariosSummary), conSectionHeadingIdx, False, False
    
   
    'DisplaySection_ScenariosSummary = DisplaySectionForScenario(conTableCaption_ScenariosSummary, conTableKey_ScenariosSummary, conXPathCaption_ScenariosSummary, _
                                                    conXPath_SecTag_SS_EfficientFrontier, conTableIndex_ScenariosSummary_LV2)
                                                    
    AddDescForSection nTableIndex, conXPathCaption_ScenariosSummary
    DisplaySection_ScenariosSummary = True
End Function








' InQuest injected base64 decoded content
' Z+av
' z{Oj
' %>'-
' *'j*
' *'j*
' j[aM
' *'>V
' *'jQ1
' j[a=

INQUEST-PP=macro
