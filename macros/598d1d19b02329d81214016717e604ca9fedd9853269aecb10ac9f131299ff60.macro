Attribute VB_Name = "Feuil1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'M|fffd|thode appel|fffd|e lors du changement de valeur dans le feuillet
'Cela nous permet de d|fffd|clencher l'attribution des couleurs ad|fffd|quates
'pour les types de Cr|fffd|atures diff|fffd|rentes
Private Sub Worksheet_Change(ByVal Target As Range)
    
    If Target.Column = 6 Then
       Call UpdateTypeColor(ActiveSheet, Target)
    End If
    
End Sub

Attribute VB_Name = "Feuil3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'M|fffd|thode appel|fffd|e lors du changement de valeur dans le feuillet
'Cela nous permet de d|fffd|clencher la recopie des valeurs issues
'du premier feuillet du classeur
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim myExcelSheet As Worksheet
    
    Set myExcelSheet = ActiveSheet
    
    If Target.Column = 2 Then
        Call CheckCreatureDoublon(myExcelSheet, Target)
        Call UpdateCreatureInfo(myExcelSheet, Target)
    End If
    
    If Target.Column = 13 Then
        Call UpdateDungeonValidity(myExcelSheet)
        Call UpdateBoxNumber(myExcelSheet)
    End If
    
End Sub

Attribute VB_Name = "Feuil7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Feuil9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ToolsMethod"
'Fonction permettant de v|fffd|rifier si la cr|fffd|ature n'est pas d|fffd|j|fffd| pr|fffd|sente
'dans le donjon en cr|fffd|ation
Public Function CheckCreatureDoublon(oWorksheet As Worksheet, oRangeConcerned As Range)
        
    Dim sourceExcelSheet As Worksheet
    Dim oFoundRange As Range
    Dim iCptCreature As Integer
    
    Dim sFirstAddress As String
    
    iCptCreature = 0
    
    Set sourceExcelSheet = ThisWorkbook.Worksheets("Mon Donjon")
            
    Set oFoundRange = sourceExcelSheet.Range("B1:B100").Find(oRangeConcerned.Text, , , xlWhole, , xlNext)
    sFirstAddress = oFoundRange.Address
    
    Do
        iCptCreature = iCptCreature + 1
        Set oFoundRange = sourceExcelSheet.Range("B1:B100").FindNext(oFoundRange)
    Loop While (Not oFoundRange Is Nothing) And (oFoundRange.Address <> sFirstAddress)
    
    If iCptCreature > 1 Then
        oRangeConcerned.Value = ""
        MsgBox "Cette carte a d|fffd|j|fffd| |fffd|t|fffd| choisie dans ce donjon." & vbNewLine & _
               "Si vous le souhaitez, vous pouvez modifier la quantit|fffd| " & vbNewLine & _
               "de celle-ci en vous r|fffd|f|fffd|rant |fffd| la ligne correspondante.", vbInformation
    End If
        
End Function
'Fonction permettant de g|fffd|rer les couleurs des diff|fffd|rents types
'(limit|fffd| |fffd| 3 avec la mise en forme conditionnelle)
Public Function UpdateTypeColor(oWorksheet As Worksheet, oCellToUpdate As Range)
    
    Select Case oCellToUpdate.Text
        Case "Vert"
            oCellToUpdate.Interior.ColorIndex = 4
            oCellToUpdate.Font.ColorIndex = 4
        Case "Orange"
            oCellToUpdate.Interior.ColorIndex = 44
            oCellToUpdate.Font.ColorIndex = 44
        Case "Bleu"
            oCellToUpdate.Interior.ColorIndex = 5
            oCellToUpdate.Font.ColorIndex = 5
        Case "Rouge"
            oCellToUpdate.Interior.ColorIndex = 3
            oCellToUpdate.Font.ColorIndex = 3
        Case Else
            oCellToUpdate.Interior.ColorIndex = 2
            oCellToUpdate.Font.ColorIndex = 2
    End Select

End Function
    
'Fonction permettant de g|fffd|rer la recopie des informations des cr|fffd|atures
'entre diff|fffd|rents feuillets du classeur
Public Function UpdateCreatureInfo(oWorksheet As Worksheet, oRangeConcerned As Range)
    
    Dim sourceExcelSheet As Worksheet
    Dim oFoundRange As Range

    Set sourceExcelSheet = ThisWorkbook.Worksheets("Donjon")
            
    For Each oCurrentRange In oRangeConcerned
        Set oFoundRange = sourceExcelSheet.Range("B1:B100").Find(oRangeConcerned.Text, , , xlWhole, , xlNext)
        
        For i = 3 To 13
            If oFoundRange Is Nothing Or oFoundRange.Text = "" Then
                If i = 13 Then
                    'Lors de la suppression de la cr|fffd|ature qu'elle contenait
                    'On r|fffd|initialise la ligne nombre a "vide"
                    oWorksheet.Cells(oCurrentRange.Row, 13).Value = ""
                Else
                    'Lors de la suppression de la cr|fffd|ature qu'elle contenait
                    'On r|fffd|initialise la ligne a "vide"
                    oWorksheet.Cells(oCurrentRange.Row, i).Interior.ColorIndex = 15
                    oWorksheet.Cells(oCurrentRange.Row, i).Value = ""
                End If
            Else
                oWorksheet.Cells(oCurrentRange.Row, i) = sourceExcelSheet.Cells(oFoundRange.Row, i)
            End If
        Next
        
        If Not oFoundRange Is Nothing And oFoundRange.Text <> "" Then
            'Appel de la fonction permettant de finaliser l'affichage de la couleur de la cr|fffd|ature
            Call UpdateTypeColor(oWorksheet, oWorksheet.Cells(oCurrentRange.Row, 6))
            
        End If
    Next
        
End Function

'Fonction permettant de tester la validit|fffd| du donjon selon les r|fffd|gles
Public Function UpdateDungeonValidity(oWorksheet As Worksheet) As Boolean
        
    Dim sourceExcelSheet As Worksheet
    Dim oFoundRange As Range
    
    Dim bDongeonIsValid As Boolean
    
    Dim bGreenIsValid As Boolean
    Dim bOrangeIsValid As Boolean
    Dim bBlueIsValid As Boolean
    Dim bRedIsValid As Boolean
    Dim bManaGreenIsValid As Boolean
    Dim bManaOrangeIsValid As Boolean
    Dim bManaBlueIsValid As Boolean
    Dim bManaRedIsValid As Boolean
    Dim bTotalGreenIsValid As Boolean
    Dim bTotalOrangeIsValid As Boolean
    Dim bTotalBlueIsValid As Boolean
    Dim bTotalRedIsValid As Boolean
    
    Dim bUniqueIsValid As Boolean
    
    Dim iCptManaGreen As Integer
    Dim iCptManaOrange As Integer
    Dim iCptManaBlue As Integer
    Dim iCptManaRed As Integer
    Dim iCptGreen As Integer
    Dim iCptOrange As Integer
    Dim iCptBlue As Integer
    Dim iCptRed As Integer

    iCptManaGreen = 0
    iCptManaOrange = 0
    iCptManaBlue = 0
    iCptManaRed = 0
    iCptGreen = 0
    iCptOrange = 0
    iCptBlue = 0
    iCptRed = 0
    
    oWorksheet.Range("rGreenMana").Value = 0
    oWorksheet.Range("rOrangeMana").Value = 0
    oWorksheet.Range("rBlueMana").Value = 0
    oWorksheet.Range("rRedMana").Value = 0
    oWorksheet.Range("rGreen").Value = 0
    oWorksheet.Range("rOrange").Value = 0
    oWorksheet.Range("rBlue").Value = 0
    oWorksheet.Range("rRed").Value = 0
            
    bUniqueIsValid = True
                
    For i = 7 To 53
        'Traitement des cartes vertes
        If oWorksheet.Cells(i, 6).Text = "Vert" Then
            If oWorksheet.Cells(i, 5) = "Oui" Then
                iCptManaGreen = iCptManaGreen + (oWorksheet.Cells(i, 13).Value)
                oWorksheet.Range("rGreenMana").Value = iCptManaGreen
                If iCptManaGreen <> 6 Then
                    bManaGreenIsValid = False
                Else
                    bManaGreenIsValid = True
                End If
            Else
                iCptGreen = iCptGreen + (oWorksheet.Cells(i, 13).Value)
                oWorksheet.Range("rGreen").Value = iCptGreen
                If iCptGreen <> 6 Then
                    bGreenIsValid = False
                Else
                    bGreenIsValid = True
                End If
            End If
            bTotalGreenIsValid = bManaGreenIsValid And bGreenIsValid
        End If
        'Traitement des cartes oranges
        If oWorksheet.Cells(i, 6).Text = "Orange" Then
            If oWorksheet.Cells(i, 5) = "Oui" Then
                iCptManaOrange = iCptManaOrange + (oWorksheet.Cells(i, 13).Value)
                oWorksheet.Range("rOrangeMana").Value = iCptManaOrange
                If iCptManaOrange <> 6 Then
                    bManaOrangeIsValid = False
                Else
                    bManaOrangeIsValid = True
                End If
            Else
                iCptOrange = iCptOrange + (oWorksheet.Cells(i, 13).Value)
                oWorksheet.Range("rOrange").Value = iCptOrange
                If iCptOrange <> 6 Then
                    bOrangeIsValid = False
                Else
                    bOrangeIsValid = True
                End If
            End If
            bTotalOrangeIsValid = bOrangeIsValid And bManaOrangeIsValid
        End If
        'Traitement des cartes bleues
        If oWorksheet.Cells(i, 6).Text = "Bleu" Then
            If oWorksheet.Cells(i, 5) = "Oui" Then
                iCptManaBlue = iCptManaBlue + (oWorksheet.Cells(i, 13).Value)
                oWorksheet.Range("rBlueMana").Value = iCptManaBlue
                If iCptManaBlue <> 6 Then
                    bManaBlueIsValid = False
                Else
                    bManaBlueIsValid = True
                End If
            Else
                iCptBlue = iCptBlue + (oWorksheet.Cells(i, 13).Value)
                oWorksheet.Range("rBlue").Value = iCptBlue
                If iCptBlue <> 6 Then
                    bBlueIsValid = False
                Else
                    bBlueIsValid = True
                End If
            End If
            bTotalBlueIsValid = bBlueIsValid And bManaBlueIsValid
        End If
        'Traitement des cartes rouges
        If oWorksheet.Cells(i, 6).Text = "Rouge" Then
            If oWorksheet.Cells(i, 5) = "Oui" Then
                iCptManaRed = iCptManaRed + (oWorksheet.Cells(i, 13).Value)
                oWorksheet.Range("rRedMana").Value = iCptManaRed
                If iCptManaRed <> 6 Then
                    bManaRedIsValid = False
                Else
                    bManaRedIsValid = True
                End If
            Else
                iCptRed = iCptRed + (oWorksheet.Cells(i, 13).Value)
                oWorksheet.Range("rRed").Value = iCptRed
                If iCptRed <> 6 Then
                    bRedIsValid = False
                Else
                    bRedIsValid = True
                End If
            End If
            bTotalRedIsValid = bRedIsValid And bManaRedIsValid
        End If
        
        'V|fffd|rification du nombre de carte de type "unique" (doivent |fffd|tre pr|fffd|sente qu'une seule fois)
        If (InStr(oWorksheet.Cells(i, 8).Text, "Unique") <> 0) Then
            If (oWorksheet.Cells(i, 13).Value = 1) Then
                bUniqueIsValid = bUniqueIsValid And True
            Else
                bUniqueIsValid = False
                oWorksheet.Cells(i, 13).Value = 1
                MsgBox "Cette carte est de type ""Unique"" et ne peut donc |fffd|tre" & vbNewLine & _
                       "pr|fffd|sente qu'en un seul exemplaire dans ce doncjon.", vbInformation
            End If
        End If
    Next
    

    
    bDongeonIsValid = bTotalGreenIsValid And _
                      bTotalOrangeIsValid And _
                      bTotalBlueIsValid And _
                      bTotalRedIsValid And _
                      bUniqueIsValid
    
    If Not bDongeonIsValid Then
        oWorksheet.Range("rValid").Value = "NON VALIDE"
    Else
        oWorksheet.Range("rValid").Value = "VALIDE"
    End If
            
        
End Function

'Fonction permettant de calculer le nombre de bo|fffd|te de chaque type n|fffd|cessaire
'|fffd| la r|fffd|alisation d'un donjon choisi
Public Function UpdateBoxNumber(oWorksheet As Worksheet)
    
    Dim sourceExcelSheet As Worksheet
    Dim oFoundRange As Range

    Dim iCptBoxLiche As Integer
    Dim iCptBoxForge As Integer
    Dim iCptBoxAntre As Integer
    
    Dim iCptBoxLicheMax As Integer
    Dim iCptBoxForgeMax As Integer
    Dim iCptBoxAntreMax As Integer
    
    iCptBoxLicheMax = 0
    iCptBoxForgeMax = 0
    iCptBoxAntreMax = 0
    
    Set sourceExcelSheet = ThisWorkbook.Worksheets("Donjon")
                
    For i = 7 To 53
        Set oFoundRange = sourceExcelSheet.Range("B1:B100").Find(oWorksheet.Cells(i, 2).Text, , , xlWhole, , xlNext)
        If Not oFoundRange Is Nothing And oFoundRange.Text <> "" Then
        
            If oWorksheet.Cells(i, 3).Text = "L" Then
                If ((oWorksheet.Cells(i, 13).Value Mod sourceExcelSheet.Cells(oFoundRange.Row, 13).Value) > 0) Then
                    iCptBoxLiche = oWorksheet.Range("rBoxLiche").Value + (((oWorksheet.Cells(i, 13).Value \ sourceExcelSheet.Cells(oFoundRange.Row, 13).Value) + 1) - oWorksheet.Range("rBoxLiche").Value)
                Else
                    iCptBoxLiche = oWorksheet.Range("rBoxLiche").Value + (((oWorksheet.Cells(i, 13).Value \ sourceExcelSheet.Cells(oFoundRange.Row, 13).Value)) - oWorksheet.Range("rBoxLiche").Value)
                End If
                
                If iCptBoxLicheMax < iCptBoxLiche Then
                    iCptBoxLicheMax = iCptBoxLiche
                End If
            Else
                If oWorksheet.Cells(i, 3).Text = "E" Then
                    If ((oWorksheet.Cells(i, 13).Value Mod sourceExcelSheet.Cells(oFoundRange.Row, 13).Value) > 0) Then
                        iCptBoxForge = oWorksheet.Range("rBoxForge").Value + (((oWorksheet.Cells(i, 13).Value \ sourceExcelSheet.Cells(oFoundRange.Row, 13).Value) + 1) - oWorksheet.Range("rBoxForge").Value)
                    Else
                        iCptBoxForge = oWorksheet.Range("rBoxForge").Value + (((oWorksheet.Cells(i, 13).Value \ sourceExcelSheet.Cells(oFoundRange.Row, 13).Value)) - oWorksheet.Range("rBoxForge").Value)
                    End If
                    
                    If iCptBoxForgeMax < iCptBoxForge Then
                        iCptBoxForgeMax = iCptBoxForge
                    End If
                Else
                    If oWorksheet.Cells(i, 3).Text = "F" Then
                        If ((oWorksheet.Cells(i, 13).Value Mod sourceExcelSheet.Cells(oFoundRange.Row, 13).Value) > 0) Then
                            iCptBoxAntre = oWorksheet.Range("rBoxAntre").Value + (((oWorksheet.Cells(i, 13).Value \ sourceExcelSheet.Cells(oFoundRange.Row, 13).Value) + 1) - oWorksheet.Range("rBoxAntre").Value)
                        Else
                            iCptBoxAntre = oWorksheet.Range("rBoxAntre").Value + (((oWorksheet.Cells(i, 13).Value \ sourceExcelSheet.Cells(oFoundRange.Row, 13).Value)) - oWorksheet.Range("rBoxAntre").Value)
                        End If
                        
                        If iCptBoxAntreMax < iCptBoxAntre Then
                            iCptBoxAntreMax = iCptBoxAntre
                        End If
                    End If
                End If
            End If
        End If
    Next
    
    oWorksheet.Range("rBoxLiche").Value = iCptBoxLicheMax
    oWorksheet.Range("rBoxForge").Value = iCptBoxForgeMax
    oWorksheet.Range("rBoxAntre").Value = iCptBoxAntreMax
    
End Function


INQUEST-PP=macro
