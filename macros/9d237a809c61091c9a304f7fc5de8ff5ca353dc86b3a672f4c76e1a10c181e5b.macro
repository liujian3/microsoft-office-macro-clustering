Attribute VB_Name = "Classify"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private m_Name As String
Private m_Cnt As Integer
Private m_Values() As Variant

Public Property Get Name() As Variant
    Name = m_Name
End Property

Public Property Let Name(ByVal vNewValue As Variant)
    m_Name = vNewValue
End Property

Public Property Get cnt() As Variant
    cnt = m_Cnt
End Property

Public Sub AddValue(ByVal vNewValue As Variant)
    m_Cnt = m_Cnt + 1
    ReDim Preserve m_Values(1 To m_Cnt)
    m_Values(m_Cnt) = vNewValue
End Sub

Public Property Get Values() As Variant
    Dim i As Long, j As Long
    Dim val() As Variant
    ReDim val(1 To m_Cnt, 1 To 1)
    For i = 1 To m_Cnt
        val(i, 1) = m_Values(i)
    Next i
    Values = val
End Property

Private Sub Class_Initialize()
    m_Cnt = 0
End Sub

Private Sub Class_Terminate()
    ReDim m_Values(0)
End Sub
Attribute VB_Name = "MdlTenGrp"
'=======================================================
' Graph for Sss_SRK Ver3.0 (SDSKD Ten Graph)
'
' 2008.04 WZH
'=======================================================

Option Explicit
Private Const ERR_NULLRGE As String = "The data range should not be empty"

Private Sub DrawTenBorder(ByVal rgeData As Range)
    rgeData.Borders(xlDiagonalDown).LineStyle = xlNone
    rgeData.Borders(xlDiagonalUp).LineStyle = xlNone
    With rgeData.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .colorindex = xlAutomatic
    End With
    With rgeData.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .colorindex = xlAutomatic
    End With
    With rgeData.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .colorindex = xlAutomatic
    End With
    With rgeData.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .colorindex = xlAutomatic
    End With
End Sub

Private Function ProcData(ByRef bTitle As Boolean, ByRef nCateNum As Integer, ByRef sht As Worksheet, _
                          ByRef RgeNameData As Range, ByRef RgeClsData As Range, _
                          ByRef RgeXData As Range, ByRef RgeYData As Range) As Integer
    Dim rge As Range, rgeFiltered As Range
    Dim i, j, nSmpNum As Integer
    Dim bModified As Boolean
    nSmpNum = RgeClsData.Rows.Count
    If nSmpNum < RgeXData.Rows.Count Then
        nSmpNum = RgeXData.Rows.Count
    End If
    If nSmpNum < RgeYData.Rows.Count Then
        nSmpNum = RgeYData.Rows.Count
    End If
    'Set sht = RgeClsData.Worksheet.Parent.Worksheets.Add
    'Set sht = ThisWorkbook.Worksheets("TempSht")
    Set rge = sht.Range("A1")
    rge(1, 1) = "|fffd||91||316||fffd||fffd||fffd|"
    If Not bTitle Then
        rge(1, 2) = "CLASS"
        rge(1, 3) = "X"
        rge(1, 4) = "Y"
        Set rge = rge(2, 2)
        nSmpNum = nSmpNum + 1
    End If
    If Not RgeNameData Is Nothing Then
        Call RgeNameData.Columns(1).Copy
        rge(2, 1).PasteSpecial xlPasteValues
    Else
        For i = 2 To nSmpNum
            rge(i, 1) = i - 1
        Next i
    End If
    RgeClsData.Columns(1).Copy
    rge(1, 2).PasteSpecial xlPasteValues
    RgeXData.Columns(1).Copy
    rge(1, 3).PasteSpecial xlPasteValues
    RgeYData.Columns(1).Copy
    rge(1, 4).PasteSpecial xlPasteValues
'08.11.18 add -- bgn -- : avoid "AdvancedFilter" delete 0 sample
    bModified = False
    For i = 2 To nSmpNum
        For j = 2 To 4
            If rge(i, j) = 0 Then
                rge(i, j) = 1E-32
                bModified = True
            End If
        Next j
    Next i
'08.11.18 add -- end --

    'rge(1, 6).Range("A1:C1") = ""
    'rge(2, 6).Range("A1:C1").FormulaR1C1 = "=VALUE(RC[-4])"
    rge(1, 6) = Range("B1")
    rge(2, 6).FormulaR1C1 = ">0"
    Set rge = Range(rge(1, 1), rge(nSmpNum, 4))
    rge.AdvancedFilter xlFilterCopy, sht.Range("$E$1:$F$2"), sht.Range("$J$1"), False
    Set rge = sht.Range("$J$1")
    nSmpNum = sht.Range(rge(1, 2), rge(1, 2).End(xlDown)).Rows.Count
    Set rge = sht.Range(rge, rge(nSmpNum, 1))
    Set RgeNameData = sht.Range(rge(1, 1), rge(nSmpNum, 1))
    Set RgeClsData = sht.Range(rge(1, 2), rge(nSmpNum, 2))
    Set RgeXData = sht.Range(rge(1, 3), rge(nSmpNum, 3))
    Set RgeYData = sht.Range(rge(1, 4), rge(nSmpNum, 4))
'08.11.18 add -- bgn --
    If bModified Then
        For i = 2 To nSmpNum
            For j = 2 To 4
                If rge(i, j) = 1E-32 Then
                    rge(i, j) = 0
                End If
            Next j
        Next i
    End If
'08.11.18 add -- end --
    
    bTitle = True
    nCateNum = Application.WorksheetFunction.max(RgeClsData) - Application.WorksheetFunction.min(RgeClsData) + 1
    If nSmpNum < 1 Then
        ProcData = -1
    Else
        ProcData = 0
    End If
End Function

Public Sub drawTenGrp(ByVal yRge As String, ByVal xRge As String, ByVal clsrge As String, _
                          ByVal outrge As String, ByVal namerge As String, ByVal strPara As String)
    Dim i, j, k As Integer
    Dim rtn As Integer
    Dim RgeYData As Range, RgeXData As Range, RgeClsData As Range
    Dim RgeOut As Range, RgeNameData As Range, RgeCateData As Range
    Dim RgeTmp As Range
    Dim bSmpName As Boolean
    Dim bCateName As Boolean
    Dim bOutYes As Boolean
    Dim bDataTitle As Boolean, bContinue As Boolean
    Dim oRow As Integer, oCol As Integer
    Dim nSmpNum As Integer, nCateNum As Integer
    Dim strXTitle As String, strYTitle As String, strChtTitle As String
    Dim tmpSht As Worksheet
    Dim xData() As Variant, yData() As Variant
    Dim tmpVal As Double
    Dim colorindex() As Variant
    Dim flgMarker As Integer
    Dim para As Object
    Dim grpWidth As Long, grpHeight As Long
    Dim minCateNo As Integer
    
    colorindex() = Array(5, 7, 10, 3, 1, 45, 8, 54, 4)
    
    On Error Resume Next
redisp:

    Set RgeYData = Nothing
    Set RgeXData = Nothing
    Set RgeClsData = Nothing
    Set RgeOut = Nothing
    Set RgeNameData = Nothing
    
    If 1 Then
        Set RgeYData = Range(toXlA1str(yRge)) '07.2.9 LSQ add "toXlA1()", |fffd||209||fffd||fffd||fffd|
        Set RgeXData = Range(toXlA1str(xRge))
        Set RgeClsData = Range(toXlA1str(clsrge))
        Set RgeOut = Range(toXlA1str(outrge))
        Set para = Comm_setdict(strPara)
        If para.exists("Marker") Then
            flgMarker = para("Marker")
        Else
            flgMarker = 0
        End If
        If para.exists("Width") Then
            grpWidth = para("Width")
        Else
            grpWidth = 0
        End If
        If para.exists("Height") Then
            grpHeight = para("Height")
        Else
            grpHeight = 0
        End If
        bDataTitle = True
        bContinue = True
        
        '09.1.29 LSQ add
        If para.exists("ChartTitle") Then
            strChtTitle = para("ChartTitle")
        Else
            strChtTitle = ""
        End If
        'end
        
        If para.exists("SmpName") Then
            bSmpName = (para("SmpName") = 1)
        Else
            bSmpName = True
        End If
        If bSmpName Then
            Set RgeNameData = Range(toXlA1str(namerge))
        End If
        If para.exists("CateName") Then
            bCateName = (para("CateName") = 1)
        Else
            bCateName = False
        End If
        If bCateName Then
            If para.exists("CateRange") Then
                Set RgeCateData = Range(toXlA1str(para("CateRange")))
                If RgeCateData Is Nothing Then
                    bCateName = False
                End If
            Else
                bCateName = False
            End If
        End If
        
        bOutYes = False
        
        nSmpNum = RgeXData.Rows.Count - 1
        
        If Err.Number <> 0 Then
            Exit Sub
        End If
        
        Set tmpSht = RgeOut.Worksheet.parent.Worksheets.Add
        
        rtn = ProcData(bDataTitle, nCateNum, tmpSht, RgeNameData, RgeClsData, RgeXData, RgeYData)
        If rtn < 0 Then Exit Sub
        
        Application.ScreenUpdating = False
        RgeOut.Worksheet.Activate
        RgeOut.Select
        oRow = 1
        oCol = 1
        RgeOut(oRow, oCol).Resize(nSmpNum + 2, nCateNum + 3).ClearContents
        RgeOut(oRow, oCol) = "|fffd|O|fffd||fffd||fffd|t|fffd|p|fffd|f|fffd|[|fffd|^"
        oRow = oRow + 1
        RgeOut(oRow, oCol) = "|fffd||91||316||fffd||fffd||fffd|"
        If bDataTitle Then
            RgeOut(oRow, oCol + 1) = RgeXData(1, 1)
            strXTitle = RgeXData(1, 1).text
            strYTitle = RgeYData(1, 1).text
            Set RgeXData = Range(RgeXData(2, 1), RgeXData(nSmpNum + 1, 1))
            Set RgeYData = Range(RgeYData(2, 1), RgeYData(nSmpNum + 1, 1))
            Set RgeClsData = Range(RgeClsData(2, 1), RgeClsData(nSmpNum + 1, 1))
            Set RgeNameData = Range(RgeNameData(2, 1), RgeNameData(nSmpNum + 1, 1))
            'nSmpNum = nSmpNum - 1
        Else
            RgeOut(oRow, oCol + 1) = "X"
            strXTitle = "X"
            strYTitle = "Y"
        End If
        minCateNo = Application.WorksheetFunction.min(RgeClsData)
        If bCateName Then
            For i = 1 To nCateNum
                RgeOut(oRow, oCol + i + 1) = RgeCateData(i, 1)
            Next i
        Else
            For i = 1 To nCateNum
                RgeOut(oRow, oCol + i + 1) = minCateNo + i - 1
            Next i
        End If
        'oRow = oRow + 1
        For i = 1 To nSmpNum
            If bSmpName Then
                RgeOut(oRow + i, oCol) = RgeNameData(i, 1)
            Else
                RgeOut(oRow + i, oCol) = i
            End If
            RgeOut(oRow + i, oCol + 1) = RgeXData(i, 1)
            RgeOut(oRow + i, oCol + val(RgeClsData(i, 1).Value) - minCateNo + 1 + 1) = RgeYData(i, 1)
        Next i
        Set RgeTmp = Range(RgeOut(2, 1), RgeOut(nSmpNum + 2, nCateNum + 2))
        For i = 1 To nCateNum + 2
            Call DrawTenBorder(RgeTmp.Columns(i))
            Call DrawTenBorder(RgeTmp(1, i))
        Next i
        Set RgeTmp = Range(RgeOut(3, 2), RgeOut(nSmpNum + 2, nCateNum + 2))
        'ThisWorkbook.Worksheets("tmplTenGrp").ChartObjects("grpTen").Copy
        Workbooks(gxlabkgraph).Worksheets("tmplTenGrp").ChartObjects("grpTen").Copy
        RgeOut.Worksheet.Activate
        RgeOut(1, 1).Select
        ActiveSheet.Paste
        Call ActiveChart.SetSourceData(RgeTmp)
        For i = 1 To nCateNum
            'ActiveChart.SeriesCollection(i).XValues = "='" & RgeTmp.Worksheet.Name & "'!" & toXlRCstr(RgeTmp.Columns(1).Address)
            'ActiveChart.SeriesCollection(i).Values = "='" & RgeTmp.Worksheet.Name & "'!" & toXlRCstr(RgeTmp.Columns(i + 1).Address)
            ActiveChart.SeriesCollection(i).Name = "='" & RgeTmp.Worksheet.Name & "'!" & toXlRCstr(RgeOut(2, i + 2).Address)
        Next i
        ActiveChart.Axes(xlValue).HasTitle = True
        ActiveChart.Axes(xlCategory).HasTitle = True
        ActiveChart.Axes(xlValue).AxisTitle.Characters.text = strYTitle
        ActiveChart.Axes(xlCategory).AxisTitle.Characters.text = strXTitle
        ActiveChart.Axes(xlValue).AxisTitle.Orientation = xlHorizontal
        ActiveChart.Axes(xlValue).AxisTitle.Top = 6
        If strChtTitle <> "" Then '09.1.29 LSQ add : graph title
            ActiveChart.ChartTitle.Characters.text = strChtTitle
        End If
        
        If Not bSmpName Then
            For i = 1 To nCateNum
                ActiveChart.SeriesCollection(i).ApplyDataLabels Type:=xlDataLabelsShowNone, LegendKey:=False
            Next i
        Else
            For i = 1 To nCateNum
                ActiveChart.SeriesCollection(i).ApplyDataLabels Type:=xlDataLabelsShowLabel, LegendKey:=False
                For j = 1 To ActiveChart.SeriesCollection(i).Points.Count
                    If ActiveChart.SeriesCollection(i).Points(j).HasDataLabel Then
                        ActiveChart.SeriesCollection(i).Points(j).DataLabel.text = RgeNameData(j, 1)
                    End If
                Next j
            Next i
        End If
        For i = 1 To nCateNum
            With ActiveChart.SeriesCollection(i)
                .MarkerBackgroundColorIndex = colorindex((i - 1) Mod 9)
                .MarkerForegroundColorIndex = .MarkerBackgroundColorIndex
                If flgMarker = 0 Then
                .MarkerStyle = IIf(i = 1, xlCircle, xlDiamond)  '08.12.29 LSQ mdf
                Else
                .MarkerStyle = IIf(flgMarker = 1, xlCircle, xlDiamond)
                .MarkerBackgroundColorIndex = colorindex((flgMarker - 1) Mod 9)
                .MarkerForegroundColorIndex = .MarkerBackgroundColorIndex
                End If
                .Smooth = False
                .MarkerSize = 6
                .Shadow = False
                .Border.LineStyle = xlNone
            End With
        Next i
        Call setChartPosSize(ActiveChart.parent, RgeOut(1, 1), grpHeight, grpWidth)
        ActiveChart.ChartArea.Select
        Call MatchWorkbookFont
        ActiveChart.HasLegend = False
        If para.exists("HasLegend") Then
            ActiveChart.HasLegend = (para("HasLegend") = 1)
            If ActiveChart.HasLegend Then
                ActiveChart.Legend.Border.colorindex = 1
            End If
        End If
        If bOutYes Then
            Set RgeTmp = RgeOut.Worksheet.Cells(ActiveChart.parent.BottomRightCell.Row + 1, ActiveChart.parent.TopLeftCell.Column)
            RgeTmp(1, 1) = "|fffd||fffd||fffd|P|fffd||fffd||fffd||58c|W|fffd||fffd|"
            Set RgeTmp = RgeTmp(2, 1)
            For i = 1 To nCateNum
                RgeTmp(i, 1) = RgeOut(2, i + 2)
                k = 0
                For j = 1 To nSmpNum
                    If val(RgeClsData(j, 1)) = i Then
                        k = k + 1
                        ReDim Preserve xData(1 To k)
                        ReDim Preserve yData(1 To k)
                        xData(k) = RgeXData(j, 1)
                        yData(k) = RgeYData(j, 1)
                    End If
                Next j
                tmpVal = Application.WorksheetFunction.Correl(xData, yData)
                RgeTmp(i, 2) = tmpVal
            Next i
            RgeTmp(nCateNum + 1, 1) = "|fffd|S|fffd||fffd|"
            RgeTmp(nCateNum + 1, 2) = Application.WorksheetFunction.Correl(RgeXData, RgeYData)
            Call DrawTenBorder(Range(RgeTmp(1, 1), RgeTmp(nCateNum, 1)))
            Call DrawTenBorder(Range(RgeTmp(1, 2), RgeTmp(nCateNum, 2)))
            Call DrawTenBorder(RgeTmp(nCateNum + 1, 1))
            Call DrawTenBorder(RgeTmp(nCateNum + 1, 2))
        End If
        Application.DisplayAlerts = False
        tmpSht.Delete
        Application.DisplayAlerts = True
        RgeOut.Select
    End If
    Set para = Nothing
    On Error GoTo 0
End Sub

'=== EOF ===


Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet27"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "mdlCommGrp"
'=======================================================
' SSS|fffd||fffd||fffd||289||fffd||fffd||fffd||fffd|_Ver2.5
' Common Functions
' 2007.01 WZH
'=======================================================

Option Explicit

#If 0 Then '--- moved : 07.2.7 ---
Sub SetDataLabel(ByVal ser As Series, ByVal namerge As Range, _
                 Optional ByVal fontsize As Integer = 10, _
                 Optional ByVal charcnt As Integer = 32)
    Dim i As Integer
    On Error Resume Next
    ser.ApplyDataLabels Type:= _
            xlDataLabelsShowLabel, AutoText:=True, LegendKey:=False
    ser.DataLabels.Font.Size = fontsize
    For i = 1 To ser.Points.Count
        If getExcelVerNo() < 12 Then
            ser.Points(i).DataLabel.Characters.text = MidB(namerge.Range("A1").Offset(i - 1, 0).Value, 1, charcnt)
        Else
            ser.Points(i).DataLabel.text = MidB(namerge.Range("A1").Offset(i - 1, 0).Value, 1, charcnt)
        End If
    Next i
    On Error GoTo 0
End Sub

Function SetDict(ByVal strPara As String) As Object
    Dim arys() As String, subarys() As String
    Dim s As String
    Dim i As Integer, j As Integer
    Dim dict As Object
    arys = Split(strPara, "&")
    Set dict = CreateObject("Scripting.dictionary")
    For i = 0 To UBound(arys)
        subarys = Split(arys(i), "=")
        dict(subarys(0)) = subarys(1)
    Next i
    i = 1
    Set SetDict = dict
    Set dict = Nothing
End Function
#End If '--- moved : 07.2.7 ---

Sub SetTicks(ByVal cht As Chart, ByVal strTicks As String)
    Dim i As Integer, j As Integer
    Dim Ticks() As String
    Dim bRevStatus As Boolean
    Dim xSeries As Series
    Dim CateCnt As Integer
    Dim CateNum As Integer
    Dim cates() As Integer
    Dim MaxScale As Double, MinScale As Double
    Dim bScreenUpdating As Boolean
    On Error Resume Next
    bScreenUpdating = Application.ScreenUpdating
    Application.ScreenUpdating = False
    bRevStatus = cht.Axes(xlCategory).ReversePlotOrder
    If bRevStatus Then
        cht.Axes(xlCategory).ReversePlotOrder = False
        strTicks = StrReverse(strTicks)
    End If
    Ticks = Split(strTicks, ",")
    CateNum = 0
    CateCnt = UBound(Ticks)
    ReDim cates(1 To CateCnt)
    For i = 1 To CateCnt
        CateNum = CateNum + CInt(Ticks(i - 1))
        cates(i) = CInt(Ticks(i - 1))
        For j = 1 To i - 1
            cates(i) = cates(i) + CInt(Ticks(j - 1))
        Next j
    Next i
    CateNum = CateNum + CInt(Ticks(CateCnt))
    Set xSeries = cht.SeriesCollection.NewSeries
    xSeries.Name = "tick1"
    xSeries.ChartType = xlXYScatterLinesNoMarkers
    cht.Axes(xlValue, xlSecondary).MinimumScale = 0
    cht.Axes(xlValue, xlSecondary).MaximumScale = CateNum
    cht.Axes(xlValue, xlSecondary).MinorUnitIsAuto = True
    cht.Axes(xlValue, xlSecondary).MajorUnit = 1
    MaxScale = cht.Axes(xlValue, xlPrimary).MaximumScale
    MinScale = cht.Axes(xlValue, xlPrimary).MinimumScale
    cht.Axes(xlValue, xlPrimary).MaximumScaleIsAuto = False
    cht.Axes(xlValue, xlPrimary).MinimumScaleIsAuto = False
    cht.Axes(xlCategory, xlSecondary).MinimumScale = MinScale
    cht.Axes(xlCategory, xlSecondary).MaximumScale = MaxScale
    xSeries.XValues = "={" & MinScale & "," & MaxScale & "}"
    xSeries.Values = "={" & cates(1) & "," & cates(1) & "}"
    xSeries.Border.colorindex = 1
    xSeries.Border.LineStyle = xlDot
    xSeries.Border.Weight = xlThin
    xSeries.MarkerStyle = xlNone
    For i = 2 To CateCnt
        Set xSeries = cht.SeriesCollection.NewSeries
        xSeries.ChartType = xlXYScatterLinesNoMarkers
        xSeries.Name = "tick" & i
        xSeries.XValues = "={" & MinScale & "," & MaxScale & "}"
        xSeries.Values = "={" & cates(i) & "," & cates(i) & "}"
        xSeries.Border.colorindex = 1
        xSeries.Border.LineStyle = xlDot
        xSeries.Border.Weight = xlThin
        xSeries.MarkerStyle = xlNone
    Next i
    
    cht.Axes(xlValue, xlSecondary).Delete
    cht.Axes(xlCategory, xlSecondary).Delete
    cht.Axes(xlCategory).Select
    cht.Axes(xlCategory).ReversePlotOrder = bRevStatus
    cht.Axes(xlValue).MinimumScale = MinScale
    cht.Axes(xlValue).MaximumScale = MaxScale
    Application.ScreenUpdating = bScreenUpdating
    On Error GoTo 0
End Sub

Attribute VB_Name = "mdlCommPub"
'=======================================================
' SSS|fffd||fffd||fffd||289||fffd||fffd||fffd||fffd|_Ver2.5
' Common Public
' 2007.1.29 LSQ
'=======================================================
Option Explicit
Option Private Module

'prefix = 'G' : means public used in this file
Public GrgeStr As String
Public GbkName As String
Public GstName As String
Public GrgStr As String

'=== EOF ===

Attribute VB_Name = "mdlDotPlot"
'=======================================================
' Graph for SSS|fffd||fffd||fffd||289||fffd||fffd||fffd||fffd|_ (DotPlot)
'
' 2008.12.23 WZH
'=======================================================
Option Explicit

Private Const MAXITEMNUM As Integer = 20
Private Const maxCateNum As Integer = 200
Private Const MINCLSSMPNUM As Integer = 2

Private Const ERR_NULLOUT As String = "The output range should not be empty"
Private Const ERR_OVERITEMNUM As String = "The count of items is over "
Private Const ERR_OVERCATENUM As String = "The count of categories is over "
Private Const ERR_NUMDATA As String = "Non-numeric data exists"
Private Const ERR_CLSSMPNUM As String = "The number of sample in each class should be at least "

Type DotPlot_T
    rgeClass As Range
    rgeItem As Range
    RgeOut As Range
    bNewSheet As Boolean
    typeForNoData As Integer
    typeForOut As Integer
    dataMKSize As Integer
    avgMKSize As Integer
    medMKSize As Integer
    typeStdev As Integer
    UniqueCount As Collection
    maxClsCnt As Integer
    minClsCnt As Integer
End Type

Private Function CollectionSort(ByRef oCollection As Collection, Optional bSortAscending As Boolean = True) As Long
    Dim lSort1 As Long, lSort2 As Long
    Dim vTempItem1 As Variant, vTempItem2 As Variant, bSwap As Boolean
    
    On Error GoTo ErrFailed
    For lSort1 = 1 To oCollection.Count - 1
        For lSort2 = lSort1 + 1 To oCollection.Count
            If bSortAscending Then
                If oCollection(lSort1).Name > oCollection(lSort2).Name Then
                    bSwap = True
                Else
                    bSwap = False
                End If
            Else
                If oCollection(lSort1).Name < oCollection(lSort2).Name Then
                    bSwap = True
                Else
                    bSwap = False
                End If
            End If
            If bSwap Then
                'Store the items
                If VarType(oCollection(lSort1)) = vbObject Then
                    Set vTempItem1 = oCollection(lSort1)
                Else
                    vTempItem1 = oCollection(lSort1)
                End If
                
                If VarType(oCollection(lSort2)) = vbObject Then
                    Set vTempItem2 = oCollection(lSort2)
                Else
                    vTempItem2 = oCollection(lSort2)
                End If
                
                'Swap the items over
                oCollection.Add vTempItem1, , lSort2
                oCollection.Add vTempItem2, , lSort1
                'Delete the original items
                oCollection.Remove lSort1 + 1
                oCollection.Remove lSort2 + 1
            End If
        Next
    Next
    Exit Function

ErrFailed:
    CollectionSort = Err.Number
    On Error GoTo 0
End Function

Private Sub SetRangeBorder(ByVal rge As Range, _
                           ByVal wtLeft As XlBorderWeight, ByVal wtTop As XlBorderWeight, _
                           ByVal wtRight As XlBorderWeight, ByVal wtBottom As XlBorderWeight)
    rge.Borders(xlEdgeTop).Weight = wtTop
    rge.Borders(xlEdgeLeft).Weight = wtLeft
    rge.Borders(xlEdgeBottom).Weight = wtBottom
    rge.Borders(xlEdgeRight).Weight = wtRight
End Sub

'process nonumeric data
Private Sub ProcNoNumeric(ByVal flg As Integer, ByVal rowCnt As Integer, ByVal colcnt As Integer, data As Variant)
    Dim i As Integer, j As Integer
    Dim mdfFlg As Boolean
    For i = 1 To rowCnt
        mdfFlg = False
        For j = 1 To colcnt
            If Not IsNumeric(data(i, j)) Then
                If flg = 1 Then
                    data(i, j) = ""
                Else
                    mdfFlg = True
                    Exit For
                End If
            End If
        Next j
        If mdfFlg Then
            For j = 1 To colcnt
                data(i, j) = ""
            Next j
        End If
    Next i
End Sub

'get category count
Private Function GetUniqueCount(dotPlot As DotPlot_T) As Integer
    Dim rgeClass As Range, rge As Range
    Dim r As Range, o As Range
    Dim t As Integer
    Dim tt As Classify
    Dim maxCnt  As Long, minCnt  As Long
    Dim i As Integer
    
    Set rgeClass = dotPlot.rgeClass
    
    Application.Volatile
    On Error Resume Next
    Set rge = Range(rgeClass(2, 1), rgeClass(rgeClass.Rows.Count, rgeClass.Columns.Count))
    For Each r In rge
        If Trim(CStr(r.Value)) <> vbNullString Then
            Set tt = dotPlot.UniqueCount.Item(CStr(r.Value))
            If tt Is Nothing Then
                Set tt = New Classify
                tt.Name = r.Value
                Call tt.AddValue(CInt(r.Row - rge.Row + 1))
                dotPlot.UniqueCount.Add tt, CStr(r.Value)
            Else
                Call tt.AddValue(CInt(r.Row - rge.Row + 1))
            End If
            Set tt = Nothing
        End If
    Next
    
    minCnt = dotPlot.UniqueCount(1).cnt
    maxCnt = minCnt
    For i = 2 To dotPlot.UniqueCount.Count
        Set tt = dotPlot.UniqueCount(i)
        If tt.cnt > maxCnt Then maxCnt = tt.cnt
        If tt.cnt < minCnt Then minCnt = tt.cnt
    Next i
    
    dotPlot.maxClsCnt = maxCnt
    dotPlot.minClsCnt = minCnt
    GetUniqueCount = dotPlot.UniqueCount.Count
    Call CollectionSort(dotPlot.UniqueCount)
    On Error GoTo 0
End Function

'check input
Private Function checkData(dotPlot As DotPlot_T) As Boolean
    Dim itemnum As Integer, SmpNum As Integer, minClsCnt As Integer
    Dim newSht As Worksheet
    Dim rge As Range
    If dotPlot.rgeItem Is Nothing Then
       checkData = False
       Exit Function
    End If
    itemnum = dotPlot.rgeItem.Columns.Count
    SmpNum = dotPlot.rgeItem.Rows.Count
    If itemnum > MAXITEMNUM Then
        checkData = False
        Call MsgBox(ERR_OVERITEMNUM & MAXITEMNUM, vbCritical, "Error")
        Exit Function
    End If
    
    Set rge = Range(dotPlot.rgeItem(2, 1), dotPlot.rgeItem(SmpNum, itemnum))
    If dotPlot.typeForNoData = 3 Then
        If Application.WorksheetFunction.Count(rge) <> rge.Rows.Count * rge.Columns.Count Then
            checkData = False
            Call MsgBox(ERR_NUMDATA, vbCritical, "Error")
            Exit Function
        End If
    End If
    If dotPlot.bNewSheet Then
        Set newSht = dotPlot.rgeItem.Worksheet.parent.Worksheets.Add
        Set dotPlot.RgeOut = newSht.Range("A1")
    ElseIf dotPlot.RgeOut Is Nothing Then
        checkData = False
        Call MsgBox(ERR_NULLOUT, vbCritical, "Error")
        Exit Function
    End If
    If Not dotPlot.rgeClass Is Nothing Then
        Set dotPlot.UniqueCount = New Collection
        itemnum = GetUniqueCount(dotPlot)
        minClsCnt = dotPlot.minClsCnt
        If itemnum > maxCateNum Or minClsCnt < 2 Then
            If dotPlot.bNewSheet Then
                Application.DisplayAlerts = False
                dotPlot.RgeOut.Worksheet.Delete
                dotPlot.rgeItem.Cells(1, 1).Select
                Application.DisplayAlerts = True
            End If
            Set dotPlot.UniqueCount = Nothing
            checkData = False
            If itemnum > maxCateNum Then
                Call MsgBox(ERR_OVERCATENUM & maxCateNum, vbCritical, "Error")
            Else
                Call MsgBox(ERR_CLSSMPNUM & MINCLSSMPNUM, vbCritical, "Error")
            End If
            Exit Function
        End If
    End If
    checkData = True
End Function

'modify series marker
Private Sub SetMarkers(ByVal cht As Chart, dotPlot As DotPlot_T)
    Dim i As Integer, serCnt As Integer, mkCnt As Integer
    Dim ser As Series
    On Error Resume Next
    serCnt = cht.SeriesCollection.Count
    'mkCnt = IIf(dotPlot.typeForOut = 1, 2, IIf(dotPlot.typeForOut = 2, 1, 0))
    For i = 1 To serCnt
        Set ser = cht.SeriesCollection.Item(i)
        If i <= serCnt Then
            ser.MarkerSize = dotPlot.dataMKSize
            ser.Border.LineStyle = xlNone
            With ser
                .MarkerBackgroundColorIndex = 1
                .MarkerForegroundColorIndex = 1
                .MarkerStyle = xlDiamond
                .MarkerSize = 6
                .Border.LineStyle = xlNone
            End With
        Else
            With ser
                .MarkerBackgroundColorIndex = IIf(i = serCnt, 5, 3)
                .MarkerForegroundColorIndex = IIf(i = serCnt, 5, 3)
                .MarkerStyle = xlDiamond
                .MarkerSize = IIf(i = serCnt, dotPlot.medMKSize, dotPlot.avgMKSize)
                .Border.LineStyle = xlNone
            End With
        End If
    Next i
    'For i = 0 To mkCnt - 1
    '    Set ser = cht.SeriesCollection.Item(serCnt - i)
    '    ser.Delete
    'Next i
    On Error GoTo 0
End Sub

Private Function subDotPlot(dotPlot As DotPlot_T) As Range
    If dotPlot.rgeClass Is Nothing Then
        Set subDotPlot = doNoClass(dotPlot)
    Else
        Set subDotPlot = doWithClass(dotPlot)
    End If
End Function

'procedure for data without class item
Private Function doNoClass(dotPlot As DotPlot_T) As Range
    Dim RgeOut As Range, rgeItem As Range
    Dim rge As Range, o As Range, r As Range
    Dim i As Long, j As Long, k As Long
    Dim itemCnt As Long, smpCnt As Long
    Dim data As Variant, itemData As Variant
    
    Set RgeOut = dotPlot.RgeOut
    Set rgeItem = dotPlot.rgeItem
    Set rge = rgeItem.Rows(1)
    Set rgeItem = rgeItem.Worksheet.Range(rgeItem(2, 1), rgeItem(rgeItem.Rows.Count, rgeItem.Columns.Count))
    itemCnt = rgeItem.Columns.Count
    smpCnt = rgeItem.Rows.Count

    itemData = rgeItem.Value
    Call ProcNoNumeric(dotPlot.typeForNoData, smpCnt, itemCnt, itemData)
    
    'RgeOut.Offset(1, 0).Value = "|fffd|f|fffd|[|fffd|^"
    'RgeOut.Offset(smpCnt + 1, 0).Value = "|fffd||fffd||fffd||3d2|l"
    'RgeOut.Offset(smpCnt + 2, 0).Value = "|fffd||fffd||fffd||fffd||fffd|l"
    'RgeOut.Offset(smpCnt + 3, 0).Value = "|fffd|W|fffd||fffd||fffd||38d||fffd|"
    'RgeOut.Offset(smpCnt + 4, 0).Value = "n"
    For i = 1 To itemCnt
        RgeOut.Offset(0, i).Value = rge.Cells(1, i).Value '"Item" & i
        data = rgeItem.Columns(i).Value
        For j = 1 To smpCnt
            data(j, 1) = itemData(j, i)
        Next j
        Range(RgeOut, RgeOut.Offset(smpCnt - 1)).Offset(1, i).Value = data
        'RgeOut.Offset(smpCnt + 1, i).Value = Application.WorksheetFunction.Average(data)
        'RgeOut.Offset(smpCnt + 2, i).Value = Application.WorksheetFunction.Median(data)
        'If dotPlot.typeStdev = 1 Then
        '    RgeOut.Offset(smpCnt + 3, i).Value = Application.WorksheetFunction.StDev(data)
        'Else
        '    RgeOut.Offset(smpCnt + 3, i).Value = Application.WorksheetFunction.StDevP(data)
        'End If
        'RgeOut.Offset(smpCnt + 4, i).Value = Application.WorksheetFunction.Count(data)
        Call SetRangeBorder(RgeOut.Offset(0, i), xlHairline, xlThin, xlHairline, xlThin)
        Call SetRangeBorder(Range(RgeOut.Offset(1, i), RgeOut.Offset(smpCnt, i)), xlHairline, xlThin, xlHairline, xlThin)
        'Call SetRangeBorder(Range(RgeOut.Offset(smpCnt + 1, i), RgeOut.Offset(smpCnt + 4, i)), xlHairline, xlThin, xlHairline, xlThin)
    Next i
    Set doNoClass = Range(RgeOut, RgeOut.Offset(smpCnt, itemCnt))
    Call SetRangeBorder(RgeOut, xlThick, xlThick, xlThin, xlThin)
    'Call SetRangeBorder(Range(RgeOut.Offset(1, 0), RgeOut.Offset(smpCnt, 0)), xlThin, xlThin, xlThin, xlThin)
    'Call SetRangeBorder(Range(RgeOut.Offset(smpCnt + 1, 0), RgeOut.Offset(smpCnt + 4, 0)), xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(doNoClass, xlThick, xlThick, xlThick, xlThick)
End Function

'10.09.27 DZH cmt
'procedure for data with class item
#If 0 Then
Private Function doWithClass(dotPlot As DotPlot_T) As Range
    Dim RgeOut As Range, rgeItem As Range, rgeName As Range
    Dim rge As Range
    Dim r As Range, o As Range
    Dim t As Integer
    Dim tt As Classify, dd As Classify
    Dim val As Variant, data As Variant
    Dim maxCnt As Long
    Dim i As Long, m As Long, k As Long
    
    Set RgeOut = dotPlot.RgeOut
    Set rgeItem = dotPlot.rgeItem
    Set rgeName = rgeItem.Rows(1)
    
    maxCnt = dotPlot.maxClsCnt
    
    Set rge = rgeItem.Worksheet.Range(rgeItem(2, 1), rgeItem(rgeItem.Rows.Count, rgeItem.Columns.Count))
    
    Set o = RgeOut
    'o.Offset(2, 0).Value = "|fffd|f|fffd|[|fffd|^"
    'o.Offset(maxCnt + 2, 0).Value = "|fffd||fffd||fffd||3d2|l"
    'o.Offset(maxCnt + 3, 0).Value = "|fffd||fffd||fffd||fffd||fffd|l"
    'o.Offset(maxCnt + 4, 0).Value = "|fffd|W|fffd||fffd||fffd||38d||fffd|"
    'o.Offset(maxCnt + 5, 0).Value = "n"
    data = rge.Value
    Call ProcNoNumeric(dotPlot.typeForNoData, rge.Rows.Count, rge.Columns.Count, data)
    
    'Call SetRangeBorder(Range(o.Offset(2, 0), o.Offset(maxCnt + 1, 0)), xlThin, xlThin, xlThin, xlThin)
    'Call SetRangeBorder(Range(o.Offset(maxCnt + 2, 0), o.Offset(maxCnt + 5, 0)), xlThin, xlThin, xlThin, xlThin)
    For i = 1 To rge.Columns.Count
        o.Offset(0, 1).Value = rgeName.Cells(1, i) '    data(1, i) '"Item" & i
        For m = 1 To dotPlot.UniqueCount.Count
            Set tt = dotPlot.UniqueCount(m)
            o.Offset(1, m).Value = "|fffd||fffd|" + tt.Name + "|fffd|Q"
            Call SetRangeBorder(o.Offset(1, m), xlHairline, xlThin, xlHairline, xlThin)
            'Set dd = New Classify
            val = tt.Values
            For k = 1 To tt.cnt
                o.Offset(k + 1, m).Value = data(val(k, 1), i)
                'Call dd.AddValue((data(val(k, 1), i)))
            Next
            'val = dd.Values
            'o.Offset(maxCnt + 2, m).Value = Application.WorksheetFunction.Average(val)
            'o.Offset(maxCnt + 3, m).Value = Application.WorksheetFunction.Median(val)
            'If dotPlot.typeStdev = 1 Then
            '    o.Offset(maxCnt + 4, m).Value = Application.WorksheetFunction.StDev(val)
            'Else
            '    o.Offset(maxCnt + 4, m).Value = Application.WorksheetFunction.StDevP(val)
            'End If
            'o.Offset(maxCnt + 5, m).Value = dd.cnt
            'Set dd = Nothing
            Call SetRangeBorder(Range(o.Offset(2, m), o.Offset(maxCnt + 1, m)), xlHairline, xlThin, xlHairline, xlThin)
            'Call SetRangeBorder(Range(o.Offset(maxCnt + 2, m), o.Offset(maxCnt + 5, m)), xlHairline, xlThin, xlHairline, xlThin)
        Next m
        Call SetRangeBorder(Range(o.Offset(0, 1), o.Offset(maxCnt + 1, dotPlot.UniqueCount.Count)), xlThin, xlThin, xlThin, xlThin)  '08.12.24 LSQ, old: xlThin, xlThick, xlThin, xlThick
        Set o = o.Offset(0, dotPlot.UniqueCount.Count)
    Next i
    Set doWithClass = Range(RgeOut, RgeOut.Offset(maxCnt + 1, dotPlot.UniqueCount.Count * rge.Columns.Count))
    'Call SetRangeBorder(doWithClass, xlThin, xlThin, xlThin, xlThin) '08.12.24 LSQ, old: xlThick, xlThick, xlThick, xlThick
End Function
#End If

'10.09.27 DZH add
'procedure for data with class item
Private Function doWithClass(dotPlot As DotPlot_T) As Range
    Dim RgeOut As Range, rgeItem As Range, rgeName As Range
    Dim rge As Range
    Dim r As Range, o As Range
    Dim t As Integer
    Dim tt As Classify, dd As Classify
    Dim val As Variant, data As Variant
    Dim maxCnt As Long
    Dim i As Long, m As Long, k As Long, z As Integer
    Dim tmpAry1() As Double
    
    Set RgeOut = dotPlot.RgeOut
    Set rgeItem = dotPlot.rgeItem
    Set rgeName = rgeItem.Rows(1)
    
    maxCnt = dotPlot.maxClsCnt
    
    Set rge = rgeItem.Worksheet.Range(rgeItem(2, 1), rgeItem(rgeItem.Rows.Count, rgeItem.Columns.Count))
    
    Set o = RgeOut
    'o.Offset(2, 0).Value = "|fffd|f|fffd|[|fffd|^"
    'o.Offset(maxCnt + 2, 0).Value = "|fffd||fffd||fffd||3d2|l"
    'o.Offset(maxCnt + 3, 0).Value = "|fffd||fffd||fffd||fffd||fffd|l"
    'o.Offset(maxCnt + 4, 0).Value = "|fffd|W|fffd||fffd||fffd||38d||fffd|"
    'o.Offset(maxCnt + 5, 0).Value = "n"
    data = rge.Value
    Call ProcNoNumeric(dotPlot.typeForNoData, rge.Rows.Count, rge.Columns.Count, data)

    For i = 1 To rge.Columns.Count
        o.Offset(0, 1).Value = rgeName.Cells(1, i) '    data(1, i) '"Item" & i
        z = 1
        For m = 1 To dotPlot.UniqueCount.Count
            Set tt = dotPlot.UniqueCount(m)
            o.Offset(1, m).Value = "|fffd||fffd|" + tt.Name + "|fffd|Q"
            
            Call SetRangeBorder(o.Offset(1, m), xlHairline, xlThin, xlHairline, xlThin)
            
            Call SetRangeBorder(o.Offset(1, m + dotPlot.UniqueCount.Count), xlHairline, xlThin, xlHairline, xlThin)
            
            val = tt.Values
            o.Offset(1, m + dotPlot.UniqueCount.Count).Value = 0
         #If 0 Then
            For k = 1 To tt.cnt
                o.Offset(k + 1, m).Value = data(val(k, 1), i)
                o.Offset(k + 1, m + dotPlot.UniqueCount.Count).Value = z
            Next
         #Else
            ReDim tmpAry1(1 To tt.cnt, 1 To 1) As Double
            For k = 1 To tt.cnt
                tmpAry1(k, 1) = data(val(k, 1), i)
            Next
            o.Offset(2, m).Resize(tt.cnt, 1) = tmpAry1
            o.Offset(2, m + dotPlot.UniqueCount.Count).Resize(tt.cnt, 1) = z
         #End If
            z = z + 1
            
            Call SetRangeBorder(Range(o.Offset(2, m), o.Offset(maxCnt + 1, m)), xlHairline, xlThin, xlHairline, xlThin)
            
            Call SetRangeBorder(Range(o.Offset(2, m + dotPlot.UniqueCount.Count), o.Offset(maxCnt + 1, m + dotPlot.UniqueCount.Count)), xlHairline, xlThin, xlHairline, xlThin)
        Next m

        Call SetRangeBorder(Range(o.Offset(0, 1), o.Offset(maxCnt + 1, dotPlot.UniqueCount.Count * 2)), xlThin, xlThin, xlThin, xlThin) '08.12.24 LSQ, old: xlThin, xlThick, xlThin, xlThick

        Set o = o.Offset(0, dotPlot.UniqueCount.Count * 2)
        
    Next i
   
    Set doWithClass = Range(RgeOut, RgeOut.Offset(maxCnt + 1, dotPlot.UniqueCount.Count * 2 * rge.Columns.Count))
   
End Function


'10.09.27 DZh cmt
#If 0 Then
'draw a dot plot
Private Function DrawDotPlot(ByVal rgeGrpOut As Range, ByVal rgeData As Range) As Chart
    Dim cht As Chart
    
    'ThisWorkbook.Worksheets("tmplDotPlot").ChartObjects("grpDotPlot").Copy
    Set cht = Comm_GetTmplGrp(rgeGrpOut, ThisWorkbook.Name, "tmplDotPlot", "grpDotPlot")
    'rgeGrpOut.Select
    'ActiveSheet.Paste
    'Set cht = ActiveChart
    Call cht.SetSourceData(rgeData)
    cht.parent.Left = rgeGrpOut.Left
    cht.parent.Top = rgeGrpOut.Top
    'cht.Parent.Width = rgeGrpOut.Offset(0, 9).Left - rgeGrpOut.Left
    'cht.Parent.Height = rgeGrpOut.Offset(18, 0).Top - rgeGrpOut.Top
    cht.ChartArea.Select
    MatchWorkbookFont
    Set DrawDotPlot = cht
End Function
#End If

'10.09.25 DZH add
'draw a dot plot
'Note: slove the problem that if series's amount over 255  chart can not draw
Private Function DrawDotPlot(ByVal rgeGrpOut As Range, ByVal rgeData As Range) As Chart
    Dim cht As Chart
    
    Dim rowNum As Integer, colNum As Integer
    Dim i As Integer, j As Integer
    Dim tmpRge As Range, rge As Range
    Dim maxNum As Double, minNum As Double
    
    rowNum = rgeData.Rows.Count
    colNum = rgeData.Columns.Count
    
    If colNum Mod 2 = 0 Then
         colNum = colNum / 2
    Else
        MsgBox "Data Range Error"
        Exit Function
    End If
   
    Set rge = rgeData.Offset(1, 0).Resize(rowNum - 1, colNum)
    Set rge = rge.Resize(rowNum - 1, 1)
    
    'copy Chart from Model sheet
    Set cht = Comm_GetTmplGrp(rgeGrpOut, ThisWorkbook.Name, "tmplDotPlot", "SR2DotPlot")
    
#If 0 Then 'for 3 or more group use
    If colNum > 2 Then
        For i = 3 To colNum
            cht.SeriesCollection.NewSeries
            cht.SeriesCollection(i + 1).ChartType = xlXYScatter
            ActiveChart.SeriesCollection(i + 1).AxisGroup = 2
        Next
    ElseIf colNum = 1 Then
        cht.SeriesCollection(3).Delete
    End If
#End If
    
    'set bar data range
    With cht.SeriesCollection(1)
        .XValues = rgeData.Resize(1, colNum)
        .Values = rgeData.Offset(0, colNum).Resize(1, colNum)
    End With
    
    'set Dot data range
    For i = 1 To cht.SeriesCollection.Count - 1
        With cht.SeriesCollection(i + 1)
            .XValues = rge.Offset(0, i + colNum - 1)
            .Values = rge.Offset(0, i - 1)
        End With
    Next
    
    'set The fisrt Y-Axes'value = the second Y-Axes's value
    With ActiveChart.Axes(xlValue, xlSecondary)
        .MinimumScaleIsAuto = True
        .MaximumScaleIsAuto = True
        minNum = .MinimumScale
        maxNum = .MaximumScale
    End With
    
    With ActiveChart.Axes(xlValue)
        .MinimumScale = minNum
        .MaximumScale = maxNum
    End With
    
    'for 3 or more group use
     'set The second X-Axes
    'With ActiveChart.Axes(xlCategory)
        '.MajorTickMark = xlNone
        '.MinorTickMark = xlNone
        '.TickLabelPosition = xlLow
    'End With
    
    'set Chart's position
    With cht
        .parent.Left = rgeGrpOut.Left
        .parent.Top = rgeGrpOut.Top
    End With
    
    cht.ChartArea.Select
    MatchWorkbookFont
    Set DrawDotPlot = cht
End Function

'main entrance for procedure
Public Sub DrawDotPlot_A(ByVal strRgeClass As String, ByVal strRgeItemData As String, ByVal strRgeOut As String, _
                                  ByVal crossAt As Double, Optional ByVal strPara As String = vbNullString)
    Dim dotPlot As DotPlot_T
    Dim rge As Range, rgeGrp As Range
    Dim cht As Chart
    Dim itemCnt As Long, smpCnt As Long
    Dim i As Long, j As Long
    Dim dlg As DialogSheet
    Dim ret As Boolean
    Dim para As Object
    Dim cht_w As Integer, cht_h As Integer
    Dim ChtType As Integer
    
    On Error GoTo DrawDotPlot_err
    Set dotPlot.rgeClass = Range(strRgeClass)
    Set dotPlot.rgeItem = Range(strRgeItemData)
    Set dotPlot.RgeOut = Range(strRgeOut)
    If strPara <> vbNullString Then
        Set para = Comm_setdict(strPara)
        cht_w = para("Width")
        cht_h = para("Height")
        ChtType = para("ChtType")
    Else
        cht_w = 10
        cht_h = 20
        ChtType = 0
    End If
    dotPlot.bNewSheet = False
    dotPlot.typeForNoData = 1
    dotPlot.typeForOut = 1
    dotPlot.typeStdev = 1
    dotPlot.dataMKSize = 6
    dotPlot.avgMKSize = 6
    dotPlot.medMKSize = 6
    
    If Not checkData(dotPlot) Then
        Exit Sub
    End If
    
    itemCnt = dotPlot.rgeItem.Columns.Count
    Set rgeGrp = dotPlot.RgeOut.Offset(0, itemCnt + 3)
    
    Set rge = subDotPlot(dotPlot)
    If dotPlot.rgeClass Is Nothing Then
        smpCnt = rge.Rows.Count
        Set cht = DrawDotPlot(rgeGrp, Range(rge(1, 2), rge(smpCnt, itemCnt + 1)))
        Call SetMarkers(cht, dotPlot)
    Else
        smpCnt = rge.Rows.Count
        j = (rge.Columns.Count - 1) \ itemCnt
        Set rgeGrp = dotPlot.RgeOut.Offset(0, 1) '08.12.24 LSQ mdf, old = dotPlot.RgeOut
        For i = 1 To itemCnt
            Set cht = DrawDotPlot(rgeGrp, Range(rge(2, 2 + (i - 1) * j), rge(smpCnt, i * j + 1)))
            cht.ChartTitle.text = dotPlot.rgeItem.Rows(1).Cells(1, i).text ' "Item" & i
            cht.Axes(xlValue).CrossesAt = crossAt
            
            '11.1.8 LSQ add
            Call setAxisScale(cht.Axes(xlValue))
            Call setAxisScale(cht.Axes(xlValue, xlSecondary))
            
            Set rgeGrp = rgeGrp.Offset(0, 9)
            Call SetMarkers(cht, dotPlot)
            If ChtType = 1 Then
                cht.Axes(xlCategory).CategoryNames = Array("0", "1")
                With cht.PlotArea.Border
                    .colorindex = 1
                    .Weight = xlThin
                    .LineStyle = xlContinuous
                End With
                cht.Axes(xlValue).TickLabels.NumberFormatLocal = "0%"
            End If
        Next i
    End If
    
    Call Comm_setChartPosSize(cht.parent, dotPlot.RgeOut, cht_h, cht_w)
    Call Comm_CutDataLink(ActiveWorkbook, ThisWorkbook.Name)
    
    dotPlot.RgeOut.Select
exit_sub:
    Set dotPlot.UniqueCount = Nothing
    Exit Sub
DrawDotPlot_err:
    Resume exit_sub
End Sub
'
Private Sub setAxisScale(ax As Axis)
'|fffd||fffd||fffd||752||fffd|
'11.1.8 LSQ add
    Dim minV As Double, maxV As Double, majorU As Double

    minV = 0
    maxV = 1
    majorU = 0.25
    
    With ax
        .MinimumScale = minV
        .MaximumScale = maxV
        .MajorUnit = majorU
    End With
    
End Sub

'=== EOF ===
Attribute VB_Name = "mdlSr1Grp"
'=======================================================
' SSS|fffd||fffd||fffd||289||fffd||fffd||fffd||fffd|_Ver2.5
' |fffd||fffd||fffd||289||fffd|1|fffd||fffd|
' 2006.12 WZH
' 2007.1.29 LSQ mdf
'=======================================================
Option Explicit
Option Base 1   '10.5.31 LSQ add

Sub DrawSr1CateScore(ByVal strWrkSht As String, ByVal strGrpOut As String, _
                     ByVal strGrpData As String, ByVal strPara As String)
    Dim wrkbk As Workbook
    Dim wrkst As Worksheet
    Dim datarge As Range, outrge As Range, cateRge As Range
    Dim cht As Chart
    Dim para As Object
    Dim strCates As String
    Dim strCateRge As String
    Dim GrpRows As Integer, GrpCols As Integer
    
    'Setting
    On Error Resume Next
    GrgeStr = "'" & strWrkSht & "'!A1"
    Call getRangeInfo(GrgeStr, GbkName, GstName, GrgStr)
    Set wrkbk = Workbooks(GbkName)
    Set wrkst = Workbooks(GbkName).Worksheets(GstName)
    Set para = Comm_setdict(strPara)
    On Error GoTo 0
    '
    If wrkbk Is Nothing Or wrkst Is Nothing Or para Is Nothing Then
        MsgBox MSG_GRP_DATA_ERR
        Exit Sub
    End If
    
    Set outrge = wrkst.Range(Comm_ToXlA1str(strGrpOut))
    Set datarge = wrkst.Range(Comm_ToXlA1str(strGrpData))

    strCates = para("Cates")
    strCateRge = para("CateRge")
    GrpRows = para("Rows")
    GrpCols = para("Cols")
    Set cateRge = wrkst.Range(Comm_ToXlA1str(strCateRge))
    
    Set datarge = Union(cateRge, datarge)
    
    Set cht = Comm_GetTmplGrp(outrge, ThisWorkbook.Name, "tmplSR1", "grpCateScore")
    If cht Is Nothing Then
        Exit Sub
    End If
    
    cht.ChartTitle.Characters.text = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd|X|fffd|R|fffd|A"
    cht.SetSourceData datarge
    Call SetTicks(cht, strCates)
    
    '|fffd|}|fffd||308||292|u|fffd||183|T|fffd|C|fffd|Y
    Call Comm_setChartPosSize(cht.parent, outrge, GrpRows, GrpCols)
    
    cht.ChartArea.Select
    MatchWorkbookFont
    
    outrge.Select
End Sub

Sub DrawSr1SmpScore1(ByVal strWrkSht As String, ByVal strGrpOut As String, _
                     ByVal strGrpData As String, ByVal strPara As String)
    Dim wrkbk As Workbook
    Dim wrkst As Worksheet
    Dim datarge As Range, outrge As Range, namerge As Range
    Dim cht As Chart
    Dim strName As String
    Dim i As Long, rowNum As Long
    Dim para As Object
    Dim bNameDisp As Boolean
    Dim corr As Double
    
    'Setting
    On Error Resume Next
    GrgeStr = "'" & strWrkSht & "'!A1"
    Call getRangeInfo(GrgeStr, GbkName, GstName, GrgStr)
    Set wrkbk = Workbooks(GbkName)
    Set wrkst = Workbooks(GbkName).Worksheets(GstName)
    Set para = Comm_setdict(strPara)
    On Error GoTo 0
    '
    If wrkbk Is Nothing Or wrkst Is Nothing Or para Is Nothing Then
        MsgBox MSG_GRP_DATA_ERR
        Exit Sub
    End If
    
    Set outrge = wrkst.Range(Comm_ToXlA1str(strGrpOut))
    Set datarge = wrkst.Range(Comm_ToXlA1str(strGrpData))

    strName = para("NameRange")
    bNameDisp = CInt(para("NameDisp"))
    corr = CDbl(para("Cor"))
    Set para = Nothing

    Set cht = Comm_GetTmplGrp(outrge, ThisWorkbook.Name, "tmplSR1", "grpSmpScore1")
    If cht Is Nothing Then
        Exit Sub
    End If
    
    cht.SetSourceData datarge
    cht.Shapes("relVal").DrawingObject.Caption = "|fffd||fffd||fffd||58c|W|fffd||fffd|=" & corr
    If bNameDisp Then
        Set namerge = wrkst.Range(Comm_ToXlA1str(strName))
        Call Comm_SetDataLabel(cht.SeriesCollection(1), namerge.Range("A1"))
    End If
    
    '|fffd|}|fffd||308||292|u|fffd||183|T|fffd|C|fffd|Y
    Call Comm_setChartPosSize(cht.parent, outrge)
    
    cht.ChartArea.Select
    MatchWorkbookFont
    
    outrge.Select
End Sub

Sub DrawSr1SmpScore2(ByVal strWrkSht As String, ByVal strGrpOut As String, _
                     ByVal strGrpData As String, ByVal strPara As String)
    Dim wrkbk As Workbook
    Dim wrkst As Worksheet
    Dim datarge As Range, outrge As Range
    Dim cht As Chart
    
    'Setting
    On Error Resume Next
    GrgeStr = "'" & strWrkSht & "'!A1"
    Call getRangeInfo(GrgeStr, GbkName, GstName, GrgStr)
    Set wrkbk = Workbooks(GbkName)
    Set wrkst = Workbooks(GbkName).Worksheets(GstName)
    On Error GoTo 0
    '
    If wrkbk Is Nothing Or wrkst Is Nothing Then
        MsgBox MSG_GRP_DATA_ERR
        Exit Sub
    End If
    
    Set outrge = wrkst.Range(Comm_ToXlA1str(strGrpOut))
    Set datarge = wrkst.Range(Comm_ToXlA1str(strGrpData))

    Set cht = Comm_GetTmplGrp(outrge, ThisWorkbook.Name, "tmplSR1", "grpSmpScore2")
    If cht Is Nothing Then
        Exit Sub
    End If
    
    cht.SetSourceData datarge
    
    '|fffd|}|fffd||308||292|u|fffd||183|T|fffd|C|fffd|Y
    Call Comm_setChartPosSize(cht.parent, outrge)
    
    cht.ChartArea.Select
    MatchWorkbookFont
    
    outrge.Select
End Sub

'2010.05.24 added
Function hkRank_Or_medRank(medTable As Variant, ByVal nVal As Long, ByVal iVal As Long) As Double
    Dim i As Long, id As Long
    If (nVal > 20) Then
        hkRank_Or_medRank = (1# * iVal) / (nVal + 1#)
        Exit Function
    End If
    id = 0
    For i = 1 To iVal - 1
        id = id + (21 - i)
    Next i
    id = id + (nVal - iVal)
    If (id < 0 Or id >= 210) Then
        hkRank_Or_medRank = -1
        Exit Function
    End If
    hkRank_Or_medRank = medTable(id + 1) '10.5.31 LSQ mdf; 1 based
End Function
'
'
'10.5.31 LSQ mdf (refer to \Design\ProbPlot.xls)
'
Sub DrawSr1LogGrp(ByVal strWrkSht As String, ByVal strGrpOut As String, _
                                    ByVal strGrpData As String, ByVal strPara As String)
    Dim wrkbk As Workbook
    Dim wrkst As Worksheet
    Dim datarge As Range, outrge As Range, wrkRge As Range
    Dim cht As Chart
    Dim SmpNum As Long
    Dim i As Long, j As Long, rowNum As Long
    Dim para As Object
    Dim dblmax As Double, dblmin As Double
    Dim medTable As Variant, v As Variant 'prob_x As Variant,
    Dim tmpstr As String
    Dim xAry(1 To 3) As Double
    
'   prob_x = Array(3.09, 2.326, 1.645, 1.282, 0.524, 0#, -0.524, -1.282, -1.645, -2.326, -3.09)
    medTable = Array(0.5, 0.293, 0.206, 0.159, 0.129, 0.109, 0.094, 0.083, 0.074, 0.067, 0.061, 0.056, 0.052, 0.048, 0.045, 0.042, 0.04, 0.038, 0.036, 0.034, _
       0.707, 0.5, 0.386, 0.314, 0.264, 0.228, 0.201, 0.18, 0.162, 0.148, 0.136, 0.126, 0.117, 0.109, 0.103, 0.097, 0.092, 0.087, 0.083, _
              0.794, 0.614, 0.5, 0.421, 0.364, 0.321, 0.286, 0.259, 0.236, 0.217, 0.2, 0.186, 0.174, 0.164, 0.154, 0.146, 0.138, 0.131, _
                     0.841, 0.686, 0.579, 0.5, 0.44, 0.393, 0.355, 0.324, 0.298, 0.275, 0.256, 0.239, 0.225, 0.212, 0.2, 0.19, 0.181, _
                            0.871, 0.736, 0.636, 0.56, 0.5, 0.452, 0.412, 0.379, 0.35, 0.326, 0.305, 0.286, 0.269, 0.255, 0.242, 0.23, _
                                   0.891, 0.772, 0.679, 0.607, 0.548, 0.5, 0.46, 0.425, 0.395, 0.37, 0.347, 0.327, 0.309, 0.293, 0.279, _
                                          0.906, 0.799, 0.714, 0.645, 0.588, 0.54, 0.5, 0.465, 0.435, 0.408, 0.385, 0.364, 0.645, 0.328, _
                                                 0.917, 0.82, 0.741, 0.676, 0.621, 0.575, 0.535, 0.5, 0.469, 0.442, 0.418, 0.397, 0.377, _
                                                        0.926, 0.838, 0.764, 0.702, 0.65, 0.605, 0.565, 0.531, 0.5, 0.473, 0.448, 0.426, _
                                                               0.933, 0.852, 0.783, 0.725, 0.674, 0.63, 0.592, 0.558, 0.527, 0.5, 0.475, _
                                                                       0.939, 0.864, 0.8, 0.744, 0.695, 0.653, 0.615, 0.582, 0.552, 0.525, _
                                                                              0.944, 0.874, 0.814, 0.761, 0.714, 0.673, 0.636, 0.603, 0.574, _
                                                                                     0.948, 0.883, 0.826, 0.775, 0.731, 0.691, 0.655, 0.623, _
                                                                                            0.952, 0.891, 0.836, 0.788, 0.745, 0.707, 0.672, _
                                                                                                   0.955, 0.897, 0.846, 0.8, 0.758, 0.721, _
                                                                                                          0.958, 0.903, 0.854, 0.81, 0.77, _
                                                                                                                 0.96, 0.908, 0.862, 0.819, _
                                                                                                                        0.962, 0.913, 0.869, _
                                                                                                                               0.964, 0.917, _
                                                                                                                                      0.966)
    'Setting
    On Error Resume Next
    GrgeStr = "'" & strWrkSht & "'!A1"
    Call getRangeInfo(GrgeStr, GbkName, GstName, GrgStr)
    Set wrkbk = Workbooks(GbkName)
    Set wrkst = Workbooks(GbkName).Worksheets(GstName)
    Set para = Comm_setdict(strPara)
    On Error GoTo 0
    '
    If wrkbk Is Nothing Or wrkst Is Nothing Or para Is Nothing Then
        MsgBox MSG_GRP_DATA_ERR
        Exit Sub
    End If
    
    Set outrge = wrkst.Range(Comm_ToXlA1str(strGrpOut))
    Set datarge = wrkst.Range(Comm_ToXlA1str(strGrpData))
    dblmax = Application.WorksheetFunction.max(datarge)
    dblmin = Application.WorksheetFunction.min(datarge)
    
    SmpNum = para("SmpNum")
    Set para = Nothing
   
    Set wrkRge = outrge.Range("B2") '.Worksheet.Parent.Worksheets.Add.Range("B2")
    Set wrkRge = wrkRge.Resize(SmpNum, 1)
    v = datarge.Value
    wrkRge.Value = v
    Call wrkRge.Sort(Key1:=outrge.Range("B2"), Order1:=xlAscending)
    For i = 1 To SmpNum
        v(i, 1) = i
    Next i
    Set wrkRge = outrge.Range("A2")
    Set wrkRge = wrkRge.Resize(SmpNum, 1)
    wrkRge.Value = v
    For i = 1 To SmpNum
        v(i, 1) = hkRank_Or_medRank(medTable, SmpNum, i)
        v(i, 1) = Application.WorksheetFunction.NormSInv(v(i, 1))
    Next i
    Set wrkRge = outrge.Range("C2")
    Set wrkRge = wrkRge.Resize(SmpNum, 1)
    wrkRge.Value = v

    'wrkRge.Worksheet.Visible = xlSheetHidden
    tmpstr = "=" & wrkRge.Worksheet.Name & "!"
    Set wrkRge = outrge.Range("C2").Resize(SmpNum, 1)
    outrge.Worksheet.Activate
    Set cht = Comm_GetTmplGrp(outrge, ThisWorkbook.Name, "tmplLog", "grpLog")
    If cht Is Nothing Then
        Exit Sub
    End If
    
    'Set dummy lines; 10.5.31 LSQ add
    Call setDummyLines(cht, dblmin, dblmax)

    For i = 1 To 1  '10.5.31 LSQ mdf; old : 1 to 12
        cht.SeriesCollection(i).Values = tmpstr & Comm_ToXlRCStr(wrkRge.Address)
        cht.SeriesCollection(i).XValues = tmpstr & Comm_ToXlRCStr(outrge.Range("B2:B" & SmpNum + 1).Address)
        Set wrkRge = wrkRge.Offset(0, 1)
    Next i
   
    '
    With ActiveChart.Axes(xlCategory)
        .MinimumScale = dblmin
        .MaximumScale = dblmax
        .Crosses = xlCustom
        .CrossesAt = dblmax
    End With
    
    '|fffd|}|fffd||308||292|u|fffd||183|T|fffd|C|fffd|Y
    Call Comm_setChartPosSize(cht.parent, outrge, 24, 9)
    
    cht.ChartArea.Select
    MatchWorkbookFont
    
    outrge.Select
    
    '10.5.31 LSQ add
    Call Comm_CutDataLink(ActiveWorkbook, gxlabkgraph)
End Sub
'end add

#If 0 Then '10.5.31
Private Sub NU_setSrsLable(ByVal srs As Series, ByVal strLabel As String)
    srs.ApplyDataLabels
    srs.DataLabels.Position = xlLabelPositionLeft
    
    srs.Points(1).DataLabel.text = ""
    srs.Points(2).DataLabel.text = strLabel
    srs.Points(3).DataLabel.text = ""

End Sub
#End If

Private Sub setDummyLines(ByVal cht As Chart, ByVal dMin As Double, ByVal dMax As Double)
    Dim i As Integer, a As Double
    Dim xAry(1 To 3) As Double, yAry As Variant ', labAry As Variant
    Dim srs As Series
    
    'X values
    xAry(1) = WorksheetFunction.Round(dMin - 0.005, 2)
    xAry(2) = WorksheetFunction.Round(dMin + 0.005, 2)
    xAry(3) = WorksheetFunction.Round(dMax + 0.005, 2)
    'dMin = xAry(1)
    'dMax = xAry(3)
    
    'Y values & Labels are fixed
    yAry = Array(3.0902, 2.3263, 1.6449, 1.2816, 0.6745) '0.7 -- 0.5244
    'labAry = Array(0.999, 0.99, 0.95, 0.9, 0.75, 0.5, 0.25, 0.1, 0.05, 0.01, 0.001) 'prob
    
    For i = 1 To 11
        Set srs = cht.SeriesCollection(i + 1)
        
        If i = 6 Then
            a = 0
        ElseIf i < 6 Then
            a = yAry(i)
        Else
            a = -yAry(11 - i + 1)
        End If
        
        srs.XValues = xAry()
        srs.Values = Array(a, a, a)
        
        'already set labels in template chart
        'Call setSrsLable(srs, labAry(i))
    Next i
End Sub

'=== EOF ===
Attribute VB_Name = "mdlSr2Grp"
'=======================================================
' SSS|fffd||fffd||fffd||289||fffd||fffd||fffd||fffd|_Ver2.5
' |fffd||fffd||fffd||289||fffd|2|fffd||fffd|
' 2007.01 WZH
' 2007.1.29 LSQ mdf
'=======================================================

Option Explicit

Sub DrawSr2CateScore1(ByVal strWrkSht As String, _
                      ByVal strGrpOut As String, ByVal strGrpData As String, _
                      ByVal strPara As String)
    Dim wrkbk As Workbook
    Dim wrkst As Worksheet
    Dim datarge As Range, outrge As Range, xRge As Range
    Dim cht As Chart
    Dim para As Object
    Dim strCates As String
    Dim strXRge As String
    Dim nAxisNo As Integer
    Dim GrpRows As Integer
    Dim GrpCols As Integer
    Dim GrpType As Integer
    'Setting
    On Error Resume Next
    GrgeStr = "'" & strWrkSht & "'!A1"
    Call getRangeInfo(GrgeStr, GbkName, GstName, GrgStr)
    Set wrkbk = Workbooks(GbkName)
    Set wrkst = Workbooks(GbkName).Worksheets(GstName)
    Set para = Comm_setdict(strPara)
    On Error GoTo 0
    '
    If wrkbk Is Nothing Or wrkst Is Nothing Or para Is Nothing Then
        MsgBox MSG_GRP_DATA_ERR
        Exit Sub
    End If
    
    Set outrge = wrkst.Range(Comm_ToXlA1str(strGrpOut))
    Set datarge = wrkst.Range(Comm_ToXlA1str(strGrpData))

    strXRge = para("XRge")
    strCates = para("Cates")
    nAxisNo = CInt(para("AxesNo"))
    GrpRows = para("Rows")
    GrpCols = para("Cols")
    GrpType = para("GrpType")
    
    Set para = Nothing
    
    Set xRge = wrkst.Range(Comm_ToXlA1str(strXRge))
    Set datarge = Union(xRge, datarge)

    Set cht = Comm_GetTmplGrp(outrge, ThisWorkbook.Name, "tmplSR2", "grpCateScore1")
    If cht Is Nothing Then
        Exit Sub
    End If

    cht.SetSourceData datarge
    If GrpType = 2 Then
        cht.ChartTitle.Characters.text = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd|X|fffd|R|fffd|A|fffd|i" & nAxisNo & "|fffd||fffd||fffd|j"
        cht.Axes(xlCategory).AxisTitle.Delete
    Else
        cht.ChartTitle.Characters.text = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd|X|fffd|R|fffd|A"
        cht.Axes(xlCategory).AxisTitle.Delete                               '2010.06.16 added
    End If
    Call SetTicks(cht, strCates)
    
    '|fffd|}|fffd||308||292|u|fffd||183|T|fffd|C|fffd|Y
    Call Comm_setChartPosSize(cht.parent, outrge, GrpRows, GrpCols)
    
    cht.ChartArea.Select
    MatchWorkbookFont
    
    outrge.Select
End Sub

Sub DrawSr2CateScore2(ByVal strWrkSht As String, ByVal strGrpOut As String, _
                      ByVal strGrpData As String, ByVal strPara As String)
    Dim wrkbk As Workbook
    Dim wrkst As Worksheet
    Dim datarge As Range, outrge As Range, namerge As Range
    Dim cht As Chart
    Dim strName As String, strNameX As String, strNameY As String '09.1.30 LSQ
    Dim i As Long, rowNum As Long
    Dim para As Object
    Dim bNameDisp As Boolean
    
    'Setting
    On Error Resume Next
    GrgeStr = "'" & strWrkSht & "'!A1"
    Call getRangeInfo(GrgeStr, GbkName, GstName, GrgStr)
    Set wrkbk = Workbooks(GbkName)
    Set wrkst = Workbooks(GbkName).Worksheets(GstName)
    Set para = Comm_setdict(strPara)
    On Error GoTo 0
    '
    If wrkbk Is Nothing Or wrkst Is Nothing Or para Is Nothing Then
        MsgBox MSG_GRP_DATA_ERR
        Exit Sub
    End If
    
    Set outrge = wrkst.Range(Comm_ToXlA1str(strGrpOut))
    Set datarge = wrkst.Range(Comm_ToXlA1str(strGrpData))

    bNameDisp = CBool(para("NameDisp"))
    strName = para("NameRange")
    strNameX = para("AxisXName") '09.1.30 LSQ add
    strNameY = para("AxisYName") '09.1.30 LSQ add
    Set para = Nothing
    Set namerge = wrkst.Range(toXlA1str(strName))

    Set cht = Comm_GetTmplGrp(outrge, ThisWorkbook.Name, "tmplSR2", "grpCateScore2")
    If cht Is Nothing Then
        Exit Sub
    End If
    
    cht.SetSourceData datarge
    cht.Axes(1).AxisTitle.Caption = strNameX '09.1.30 LSQ add
    cht.Axes(2).AxisTitle.Caption = strNameY '09.1.30 LSQ add
    If bNameDisp Then
        Call Comm_SetDataLabel(cht.SeriesCollection(1), namerge.Range("B2"))
    End If
    
    '|fffd|}|fffd||308||292|u|fffd||183|T|fffd|C|fffd|Y
    Call Comm_setChartPosSize(cht.parent, outrge)
    
    cht.ChartArea.Select
    MatchWorkbookFont
    
    outrge.Select
End Sub

Sub DrawSr2SmpScore1(ByVal strWrkSht As String, _
                     ByVal strGrpOut As String, ByVal strGrpData As String, _
                     ByVal strPara As String)
    Dim wrkbk As Workbook
    Dim wrkst As Worksheet
    Dim datarge As Range, outrge As Range, xRge As Range
    Dim cht As Chart
    Dim para As Object
    Dim strAxis As String
    Dim strXRge As String
    Dim nAxisNo As Integer
    Dim i As Integer
    Dim GrpRows As Integer
    Dim GrpCols As Integer
    Dim colorInx() As Variant
    colorInx = Array(5, 7, 10, 3, 1, 45, 8, 54, 4)
    
    'Setting
    On Error Resume Next
    GrgeStr = "'" & strWrkSht & "'!A1"
    Call getRangeInfo(GrgeStr, GbkName, GstName, GrgStr)
    Set wrkbk = Workbooks(GbkName)
    Set wrkst = Workbooks(GbkName).Worksheets(GstName)
    Set para = Comm_setdict(strPara)
    On Error GoTo 0
    '
    If wrkbk Is Nothing Or wrkst Is Nothing Or para Is Nothing Then
        MsgBox MSG_GRP_DATA_ERR
        Exit Sub
    End If
    
    nAxisNo = CInt(para("AxesNo"))
    strXRge = para("XRge")
    GrpRows = para("Rows")
    GrpCols = para("Cols")
    Set para = Nothing
    
    Set xRge = wrkst.Range(Comm_ToXlA1str(strXRge))
    Set outrge = wrkst.Range(Comm_ToXlA1str(strGrpOut))
    Set datarge = wrkst.Range(Comm_ToXlA1str(strGrpData))
    
    Set datarge = Union(xRge, datarge)
    
    Set cht = Comm_GetTmplGrp(outrge, ThisWorkbook.Name, "tmplSR2", "grpSmpScore1")
    If cht Is Nothing Then
        Exit Sub
    End If
    
    cht.SetSourceData datarge
    cht.SeriesCollection(1).Delete
    'strAxis = Split(strGrpData, ",")(0)
    'Set dataRge = wrkst.Range(toXlA1str(strAxis))
    'Set dataRge = Range(dataRge(2, 1), dataRge(dataRge.Rows.Count, 1))
    Set datarge = Range(xRge(2, 1), xRge(xRge.Rows.Count, 1))
    strAxis = Comm_ToXlRCStr(datarge.Address)
    cht.SeriesCollection(1).XValues = "='" & GstName & "'!" & strAxis
    cht.ChartTitle.Characters.text = "|fffd||fffd||fffd||283|O|fffd||fffd||fffd|t" & nAxisNo
    
    For i = 1 To cht.SeriesCollection.Count
        With cht.SeriesCollection.Item(i).Border
            .colorindex = colorInx((i - 1) Mod 9)
            .Weight = xlThin
            .LineStyle = xlContinuous
        End With
        cht.SeriesCollection.Item(i).MarkerStyle = xlNone
    Next i
    
    '|fffd|}|fffd||308||292|u|fffd||183|T|fffd|C|fffd|Y
    Call Comm_setChartPosSize(cht.parent, outrge, GrpRows, GrpCols)
    
    cht.ChartArea.Select
    MatchWorkbookFont
    
    outrge.Select
End Sub

Sub DrawSr2SmpScore2(ByVal strWrkSht As String, ByVal strGrpOut As String, _
                     ByVal strGrpData As String, ByVal strPara As String)
    Dim wrkbk As Workbook
    Dim wrkst As Worksheet
    Dim datarge As Range, outrge As Range, yRge1 As Range, yRge2 As Range
    Dim cht As Chart
    Dim para As Object
    Dim strAxis As String
    Dim strYRge1 As String
    Dim strYRge2 As String
    Dim i As Integer
    Dim GrpRows As Integer
    Dim GrpCols As Integer
    Dim colorInx() As Variant
    colorInx = Array(5, 7, 10, 3, 1, 45, 8, 54, 4)
    
    'Setting
    On Error Resume Next
    GrgeStr = "'" & strWrkSht & "'!A1"
    Call getRangeInfo(GrgeStr, GbkName, GstName, GrgStr)
    Set wrkbk = Workbooks(GbkName)
    Set wrkst = Workbooks(GbkName).Worksheets(GstName)
    Set para = Comm_setdict(strPara)
    On Error GoTo 0
    '
    If wrkbk Is Nothing Or wrkst Is Nothing Or para Is Nothing Then
        MsgBox MSG_GRP_DATA_ERR
        Exit Sub
    End If
    
    strYRge1 = para("YRge1")
    strYRge2 = para("YRge2")
    GrpRows = para("Rows")
    GrpCols = para("Cols")
    Set para = Nothing
    
    Set yRge1 = wrkst.Range(Comm_ToXlA1str(strYRge1))
    Set yRge2 = wrkst.Range(Comm_ToXlA1str(strYRge2))
    
    Set outrge = wrkst.Range(Comm_ToXlA1str(strGrpOut))
    Set datarge = wrkst.Range(Comm_ToXlA1str(strGrpData))
    
    Set datarge = Union(datarge, yRge1, yRge2)
    
    Set cht = Comm_GetTmplGrp(outrge, ThisWorkbook.Name, "tmplSR2", "grpSmpScore2")
    If cht Is Nothing Then
        Exit Sub
    End If
    
    cht.SetSourceData datarge
    cht.SeriesCollection(1).Delete
    strAxis = strGrpData                'Split(strGrpData, ",")(0)
    Set datarge = wrkst.Range(Comm_ToXlA1str(strAxis))
    Set datarge = Range(datarge(2, 1), datarge(datarge.Rows.Count, 1))
    strAxis = Comm_ToXlRCStr(datarge.Address)
    cht.SeriesCollection(1).XValues = "='" & GstName & "'!" & strAxis
    
    For i = 1 To cht.SeriesCollection.Count
        With cht.SeriesCollection.Item(i).Border
            .colorindex = colorInx((i - 1) Mod 9)
            .Weight = xlThin
            .LineStyle = xlContinuous
        End With
        cht.SeriesCollection.Item(i).MarkerStyle = xlNone
    Next i
    
    '|fffd|}|fffd||308||292|u|fffd||183|T|fffd|C|fffd|Y
    Call Comm_setChartPosSize(cht.parent, outrge, GrpRows, GrpCols)
    
    cht.ChartArea.Select
    MatchWorkbookFont
    
    outrge.Select
End Sub
'=== EOF ===


Attribute VB_Name = "mdlTK5Grp"
'=======================================================
' SSS_|fffd||fffd||fffd|vVer6.5
'
' 2007.01 WZH
'=======================================================

Option Explicit

'Draw Distribution Graph
Private Sub SubDrawDistGrp(ByVal strDist As String, ByVal strWrkSht As String, _
                        ByVal strGrpOut As String, ByVal strGrpData As String, _
                        ByVal strPara As String)
    Dim wrkbk As Workbook
    Dim wrksht As Worksheet
    Dim datarge As Range, outrge As Range
    Dim xRge As Range, yRge As Range
    Dim datanum As Long
    Dim cht As Chart
    Dim lngSum As Long
    Dim fontsize As Integer
    Dim axisName As String
    Dim para As Object
    On Error Resume Next
    Set wrkbk = Range("'" & strWrkSht & "'!$A$1").Worksheet.parent
    Set wrksht = Range("'" & strWrkSht & "'!$A$1").Worksheet
    Set outrge = wrksht.Range(Comm_ToXlA1str(strGrpOut))
    Set datarge = wrksht.Range(Comm_ToXlA1str(strGrpData))
    Set para = Comm_setdict(strPara)
    On Error GoTo 0
    If outrge Is Nothing Or datarge Is Nothing Or para Is Nothing Then
        Exit Sub
    End If
        
    #If 0 Then
    ThisWorkbook.Worksheets("tmpl" & strDist).ChartObjects("grp" & strDist).Copy
    wrksht.Activate
    outrge.Select
    wrksht.Paste
    Set cht = Selection.parent
    #End If
    
    Set cht = Comm_GetTmplGrp(outrge, ThisWorkbook.Name, "tmpl" & strDist, "grp" & strDist)
    If cht Is Nothing Then
        Exit Sub
    End If
    
    Call cht.SetSourceData(datarge)
    If strDist = "BDist" Or strDist = "DDist" Then
        cht.ChartType = xlColumnClustered
    End If
    
    Set para = Nothing
    
    '|fffd|}|fffd||308||292|u|fffd||183|T|fffd|C|fffd|Y
    Call Comm_setChartPosSize(cht.parent, outrge)
    Call Comm_MatchWorkbookFont
    
    outrge.Select
    On Error GoTo 0
End Sub

Sub DrawDistGrp(pCode As Integer, strWrkSht As String, strGrpOut As String, strGrpData As String, strPara As String)
    Dim strDist As String
    If pCode < 1 Or pCode > 7 Then Exit Sub
    Select Case pCode
    Case 1:
        strDist = "RDist"
    Case 2:
        strDist = "SRDist"
    Case 3:
        strDist = "BDist"
    Case 4:
        strDist = "DDist"
    Case 5:
        strDist = "TDist"
    Case 6:
        strDist = "XDist"
    Case 7:
        strDist = "FDist"
    End Select
    Call SubDrawDistGrp(strDist, strWrkSht, strGrpOut, strGrpData, strPara)
End Sub

'|fffd|q|fffd|X|fffd|g|fffd|O|fffd||fffd||fffd||fffd|
Sub Tk5DrawHistGrp(strWrkSht As String, strGrpOut As String, strGrpData As String, strPara As String)
    Dim wrkbk As Workbook
    Dim wrksht As Worksheet
    Dim datarge As Range, outrge As Range
    Dim xRge As Range, yRge As Range
    Dim datanum As Long
    Dim cht As Chart
    Dim GrpType As Integer, Direct As Integer, GDIST As Integer
    Dim dblUCL As Double, dblLCL As Double
    Dim dblmax As Double, dblmin As Double
    Dim dblAVE As Double
    Dim para As Object
    Dim GrpNo As Integer
    Dim axisno As Integer
    Dim bBorder As Boolean
    
    On Error Resume Next
    Set wrkbk = Range("'" & strWrkSht & "'!$A$1").Worksheet.parent
    Set wrksht = Range("'" & strWrkSht & "'!$A$1").Worksheet
    Set outrge = wrksht.Range(Comm_ToXlA1str(strGrpOut))
    Set datarge = wrksht.Range(Comm_ToXlA1str(strGrpData))
    Set para = Comm_setdict(strPara)
    On Error GoTo 0
    If outrge Is Nothing Or datarge Is Nothing Or para Is Nothing Then
        Exit Sub
    End If
    
    GrpType = CInt(para("GrpType"))
    Direct = CInt(para("Direct"))
    GDIST = CInt(para("GDIST"))
    dblUCL = CDbl(para("UCL"))
    dblLCL = CDbl(para("LCL"))
    dblmax = CDbl(para("MAX"))
    dblmin = CDbl(para("MIN"))
    dblAVE = CDbl(para("AVE"))
    bBorder = CBool(para("BORDER"))
    
    Set para = Nothing
    
    GrpNo = (GrpType - 1) * 2 + Direct
    
    #If 0 Then
    ThisWorkbook.Worksheets("tmplHist").ChartObjects("grpHist" & GrpNo).Copy
    wrksht.Activate
    outrge.Select
    wrksht.Paste
    Set cht = Selection.parent
    #End If
    
    Set cht = Comm_GetTmplGrp(outrge, ThisWorkbook.Name, "tmplHist", "grpHist" & GrpNo)
    If cht Is Nothing Then
        Exit Sub
    End If
    
    datanum = datarge.Rows.Count
    If Direct = 1 Then                                              '|fffd|c
        Set xRge = Range(datarge(1, 1), datarge(datanum, 1))
        Set yRge = Range(datarge(1, 2), datarge(datanum, 2))
        cht.SeriesCollection(1).Values = "='" & strWrkSht & "'!" & Comm_ToXlRCStr(yRge.Address)
        cht.SeriesCollection(1).XValues = "='" & strWrkSht & "'!" & Comm_ToXlRCStr(xRge.Address)
        Set yRge = Range(datarge(1, 3), datarge(datanum, 3))
        cht.SeriesCollection(2).Values = "='" & strWrkSht & "'!" & Comm_ToXlRCStr(yRge.Address)
        cht.SeriesCollection(2).XValues = "='" & strWrkSht & "'!" & Comm_ToXlRCStr(xRge.Address)
        cht.SeriesCollection("LCL").XValues = "={" & dblLCL & "," & dblLCL & "}"
        cht.SeriesCollection("LCL").Values = "={0," & cht.Axes(xlValue, xlPrimary).MaximumScale & "}"
        cht.SeriesCollection("UCL").XValues = "={" & dblUCL & "," & dblUCL & "}"
        cht.SeriesCollection("UCL").Values = "={0," & cht.Axes(xlValue, xlPrimary).MaximumScale & "}"
        cht.SeriesCollection("AVE").XValues = "={" & dblAVE & "," & dblAVE & "}"
        cht.SeriesCollection("AVE").Values = "={0," & cht.Axes(xlValue, xlPrimary).MaximumScale & "}"
        cht.Axes(xlValue, xlSecondary).MinimumScale = cht.Axes(xlValue, xlPrimary).MinimumScale
        cht.Axes(xlValue, xlSecondary).MaximumScale = cht.Axes(xlValue, xlPrimary).MaximumScale
        cht.Axes(xlCategory, xlSecondary).MinimumScale = dblmin
        cht.Axes(xlCategory, xlSecondary).MaximumScale = dblmax
        cht.Axes(xlCategory).TickLabels.NumberFormatLocal = "0.00_ "
        cht.Axes(xlCategory).TickLabelSpacingIsAuto = True
    Else                                                            '|fffd||fffd|
        If GrpType = 1 Then
            Set xRge = Range(datarge(1, 1), datarge(datanum, 1))
            Set yRge = Range(datarge(1, 2), datarge(datanum, 2))
            cht.SeriesCollection(1).Values = "='" & strWrkSht & "'!" & Comm_ToXlRCStr(yRge.Address)
            cht.SeriesCollection(1).XValues = "='" & strWrkSht & "'!" & Comm_ToXlRCStr(xRge.Address)
            axisno = xlValue
        Else                                                        '|fffd||702||fffd||fffd|
            Set xRge = Range(datarge(1, 1), datarge(datanum, 1))
            Set yRge = Range(datarge(1, 2), datarge(datanum, 2))
            cht.SeriesCollection(1).XValues = "='" & strWrkSht & "'!" & Comm_ToXlRCStr(yRge.Address)
            cht.SeriesCollection(1).Values = "='" & strWrkSht & "'!" & Comm_ToXlRCStr(xRge.Address)
            axisno = xlCategory
        End If
        Set yRge = Range(datarge(1, 2), datarge(datanum, 3))
        cht.SeriesCollection(2).XValues = "='" & strWrkSht & "'!" & Comm_ToXlRCStr(yRge.Address)
        cht.SeriesCollection(2).Values = "='" & strWrkSht & "'!" & Comm_ToXlRCStr(xRge.Address)
        cht.Axes(axisno, xlPrimary).MinimumScale = 0
        cht.Axes(axisno, xlPrimary).MaximumScale = cht.Axes(axisno, xlPrimary).MaximumScale
        cht.SeriesCollection("LCL").Values = "={" & dblLCL & "," & dblLCL & "}"
        cht.SeriesCollection("LCL").XValues = "={0," & cht.Axes(axisno, xlPrimary).MaximumScale & "}"
        cht.SeriesCollection("UCL").Values = "={" & dblUCL & "," & dblUCL & "}"
        cht.SeriesCollection("UCL").XValues = "={0," & cht.Axes(axisno, xlPrimary).MaximumScale & "}"
        cht.SeriesCollection("AVE").Values = "={" & dblAVE & "," & dblAVE & "}"
        cht.SeriesCollection("AVE").XValues = "={0," & cht.Axes(axisno, xlPrimary).MaximumScale & "}"
        cht.Axes(xlCategory, xlSecondary).MinimumScale = cht.Axes(axisno, xlPrimary).MinimumScale
        cht.Axes(xlCategory, xlSecondary).MaximumScale = cht.Axes(axisno, xlPrimary).MaximumScale
        cht.Axes(xlValue, xlSecondary).MinimumScale = dblmin
        cht.Axes(xlValue, xlSecondary).MaximumScale = dblmax
        If GrpType <> 1 Then
            cht.Axes(xlValue, xlPrimary).MinimumScale = dblmin
            cht.Axes(xlValue, xlPrimary).MaximumScale = dblmax
        End If
    End If
    If GDIST = 0 Then
        cht.SeriesCollection(2).Delete
    ElseIf GDIST = 1 Then
        cht.SeriesCollection(2).MarkerStyle = xlSquare
    Else
        cht.SeriesCollection(2).MarkerStyle = xlNone
    End If
    
    If Not bBorder Then
        cht.SeriesCollection("LCL").Delete
        cht.SeriesCollection("UCL").Delete
        cht.SeriesCollection("AVE").Delete
    End If
    
    '|fffd|}|fffd||308||292|u|fffd||183|T|fffd|C|fffd|Y
    Call Comm_setChartPosSize(cht.parent, outrge)
    Call Comm_MatchWorkbookFont
    
    outrge.Select
    On Error GoTo 0
End Sub

'Draw Weibull Paper
Sub DrawWBPGrp(strWrkSht As String, strGrpOut As String, strGrpData As String, strPara As String)
    Dim wrkbk As Workbook
    Dim wrksht As Worksheet
    Dim datarge As Range, outrge As Range
    Dim xRge As Range, yRge As Range, namerge As Range
    Dim datanum As Long
    Dim cht As Chart
    Dim GrpNo As Integer
    Dim itemnum As Integer
    Dim mline As Integer
    Dim para As Object
    Dim serie As Series
    Dim i As Integer, j As Integer
    Dim dblmax As Double, dblmin As Double
    Dim CateLabels As Variant
    CateLabels = Array(0.5, 1, 5, 10, 20, 30, 40, 50, 60, 70, 80, 90, 95)
    
    On Error Resume Next
    Set wrkbk = Range("'" & strWrkSht & "'!$A$1").Worksheet.parent
    Set wrksht = Range("'" & strWrkSht & "'!$A$1").Worksheet
    Set outrge = wrksht.Range(Comm_ToXlA1str(strGrpOut))
    Set datarge = wrksht.Range(Comm_ToXlA1str(strGrpData))
    Set para = Comm_setdict(strPara)
    On Error GoTo 0
    If outrge Is Nothing Or datarge Is Nothing Or para Is Nothing Then
        Exit Sub
    End If
    
    itemnum = CInt(para("ItemNum"))
    GrpNo = CInt(para("GrpNo"))
    mline = CInt(para("SW"))
    
    #If 0 Then
    ThisWorkbook.Worksheets("tmplWBP").ChartObjects("grpWBP" & GrpNo).Copy
    wrksht.Activate
    outrge.Select
    wrksht.Paste
    Set cht = Selection.parent
    #End If
    
    Set cht = Comm_GetTmplGrp(outrge, ThisWorkbook.Name, "tmplWBP", "grpWBP" & GrpNo)
    If cht Is Nothing Then
        Exit Sub
    End If
    
'    '2016.2.29 LSQ add, then cmt
'    outrge.Select
'    DoEvents
    
    Set para = Nothing
    'Application.ScreenUpdating = True
    datanum = datarge.Rows.Count
    Set namerge = datarge(1, 2)
    Set xRge = Range(datarge(2, 1), datarge(datanum, 1))
    Set yRge = Range(datarge(2, 2), datarge(datanum, 2))
    dblmax = Application.WorksheetFunction.max(xRge)
    dblmin = Application.WorksheetFunction.min(xRge)
    cht.Axes(xlValue).MaximumScaleIsAuto = True
    cht.Axes(xlValue).MinimumScaleIsAuto = True
    DoEvents
    For i = 1 To itemnum
        'Set nameRge = dataRge.Range("A1").Offset(0, i)
        'Set xrge = Range(dataRge(2, 1), dataRge(datanum, 1))
        'Set yrge = Range(dataRge(2, i + 1), dataRge(datanum, i + 1))
        Set serie = cht.SeriesCollection.NewSeries
        serie.Name = namerge.text
        serie.Values = "='" & strWrkSht & "'!" & Comm_ToXlRCStr(yRge.Address)
        serie.XValues = "='" & strWrkSht & "'!" & Comm_ToXlRCStr(xRge.Address)
        If GrpNo = 1 Then
            serie.Border.LineStyle = xlNone
            serie.MarkerStyle = xlMarkerStyleAutomatic
        Else
            serie.MarkerStyle = xlNone
        End If
        Set namerge = namerge.Offset(0, 1)
        Set yRge = yRge.Offset(0, 1)
    Next i
    cht.Axes(xlValue).MaximumScaleIsAuto = True
    cht.Axes(xlValue).MinimumScaleIsAuto = True
    DoEvents
    If GrpNo = 1 Then
        cht.Axes(xlValue).MaximumScaleIsAuto = False
        cht.Axes(xlValue).MinimumScaleIsAuto = False
    Else
        cht.SeriesCollection(1).Delete
    End If
    cht.Axes(xlCategory).MaximumScaleIsAuto = False
    cht.Axes(xlCategory).MinimumScaleIsAuto = False
    cht.Axes(xlCategory).MaximumScale = dblmax
    cht.Axes(xlCategory).MinimumScale = dblmin
    DoEvents
    If GrpNo = 1 Then
        Set namerge = datarge(1, 1 + itemnum + 1)
        Set xRge = Range(datarge(2, 1), datarge(datanum, 1))
        Set yRge = Range(datarge(2, 1 + itemnum + 1), datarge(datanum, 1 + itemnum + 1))
        For i = 1 To itemnum
            'Set nameRge = dataRge(1, i + ItemNum + 1)
            'Set xrge = Range(dataRge(2, 1), dataRge(datanum, 1))
            'Set yrge = Range(dataRge(2, i + ItemNum + 1), dataRge(datanum, i + ItemNum + 1))
            Set serie = cht.SeriesCollection.NewSeries
            serie.Name = namerge.text
            serie.Values = "='" & strWrkSht & "'!" & Comm_ToXlRCStr(yRge.Address)
            serie.XValues = "='" & strWrkSht & "'!" & Comm_ToXlRCStr(xRge.Address)
            serie.MarkerStyle = xlNone
            Set namerge = namerge.Offset(0, 1)
            Set yRge = yRge.Offset(0, 1)
        Next i
        
        Set xRge = Range(datarge(2, 2 * itemnum + 2), datarge(datanum, 2 * itemnum + 2))
        Set yRge = Range(datarge(2, 2 * itemnum + 2 + 1), datarge(datanum, 2 * itemnum + 2 + 1))
        For i = 1 To 13
            'Set xrge = Range(dataRge(2, 2 * ItemNum + 2 * i), dataRge(datanum, 2 * ItemNum + 2 * i))
            'Set yrge = Range(dataRge(2, 2 * ItemNum + 2 * i + 1), dataRge(datanum, 2 * ItemNum + 2 * i + 1))
            Set serie = cht.SeriesCollection(i)
            serie.XValues = "='" & strWrkSht & "'!" & Comm_ToXlRCStr(xRge.Address)
            serie.Values = "='" & strWrkSht & "'!" & Comm_ToXlRCStr(yRge.Address)
            serie.Points(1).ApplyDataLabels Type:= _
                xlDataLabelsShowLabel, AutoText:=True, LegendKey:=False
            serie.Points(1).DataLabel.Position = xlLabelPositionLeft
            serie.Points(1).DataLabel.text = CateLabels(i - 1)
            Set xRge = xRge.Offset(0, 2)
            Set yRge = yRge.Offset(0, 2)
        Next i
    End If
    
    If GrpNo = 1 Then
        itemnum = 2 * (itemnum + 13)
    End If
    
    Application.ScreenUpdating = True '10.11.23 LSQ add; in Excel2010, axis setting not work bfe Screen Updated
    
    '16.2.29 LSQ mdf --bgn --
    If GrpNo = 1 Then
        cht.Axes(xlValue).MaximumScaleIsAuto = False
        cht.Axes(xlValue).MinimumScaleIsAuto = False
    Else
        'remain = TRUE or 0 to 100
    End If
    '-- end --
    
    Set namerge = datarge(1, itemnum + 2)
    Set xRge = Range(datarge(2, itemnum + 2), datarge(14, itemnum + 2))
    Set yRge = Range(datarge(2, itemnum + 2 + 1), datarge(14, itemnum + 2 + 1))
    If GrpNo = 1 Then
        j = 2
    Else
        j = 1
    End If
    For i = 1 To mline
        'Set nameRge = dataRge(1, ItemNum + 2 * i)
        'Set xrge = Range(dataRge(2, ItemNum + 2 * i), dataRge(14, ItemNum + 2 * i))
        'Set yrge = Range(dataRge(2, ItemNum + 2 * i + 1), dataRge(14, ItemNum + 2 * i + 1))
        Set serie = cht.SeriesCollection.NewSeries
        serie.Values = "='" & strWrkSht & "'!" & Comm_ToXlRCStr(yRge.Address)
        serie.XValues = "='" & strWrkSht & "'!" & Comm_ToXlRCStr(xRge.Address)
        serie.Points(j).ApplyDataLabels Type:= _
            xlDataLabelsShowLabel, AutoText:=True, LegendKey:=False
        serie.Points(j).DataLabel.Position = xlLabelPositionBelow
        If GrpNo = 1 Then
            serie.Points(j).DataLabel.text = namerge.text
        End If
        serie.Border.LineStyle = xlDot
        serie.Border.Weight = xlThin
        serie.MarkerStyle = xlNone
        serie.Border.colorindex = 1
        cht.Legend.LegendEntries(cht.Legend.LegendEntries.Count).Delete
        Set namerge = namerge.Offset(0, 2)
        Set xRge = xRge.Offset(0, 2)
        Set yRge = yRge.Offset(0, 2)
    Next i

    cht.Legend.Position = xlLegendPositionRight
    '|fffd|}|fffd||308||292|u|fffd||183|T|fffd|C|fffd|Y
    Call Comm_setChartPosSize(cht.parent, outrge, 22, 9)
    Call Comm_MatchWorkbookFont
    
    outrge.Select
    
    '16.2.29 LSQ cmt
    'On Error GoTo 0
End Sub

'life
Sub DrawLifeGrp(strWrkSht As String, strGrpOut As String, strGrpData As String, strPara As String)
    Dim wrkbk As Workbook
    Dim wrksht As Worksheet
    Dim datarge As Range, outrge As Range
    Dim xRge As Range, yRge As Range
    Dim datanum As Long
    Dim cht As Chart
    Dim lngSum As Long
    Dim fontsize As Integer
    Dim axisName As String
    Dim para As Object
    On Error Resume Next
    Set wrkbk = Range("'" & strWrkSht & "'!$A$1").Worksheet.parent
    Set wrksht = Range("'" & strWrkSht & "'!$A$1").Worksheet
    Set outrge = wrksht.Range(Comm_ToXlA1str(strGrpOut))
    Set datarge = wrksht.Range(Comm_ToXlA1str(strGrpData))
    Set para = Comm_setdict(strPara)
    On Error GoTo 0
    If outrge Is Nothing Or datarge Is Nothing Or para Is Nothing Then
        Exit Sub
    End If
    
    Set para = Nothing
    
    #If 0 Then
    ThisWorkbook.Worksheets("tmplLife").ChartObjects("grpLife").Copy
    wrksht.Activate
    outrge.Select
    wrksht.Paste
    Set cht = Selection.parent
    #End If
    
    Set cht = Comm_GetTmplGrp(outrge, ThisWorkbook.Name, "tmplLife", "grpLife")
    If cht Is Nothing Then
        Exit Sub
    End If
    
    Call cht.SetSourceData(datarge)
    cht.Legend.Position = xlLegendPositionRight
    
    '|fffd|}|fffd||308||292|u|fffd||183|T|fffd|C|fffd|Y
    Call Comm_setChartPosSize(cht.parent, outrge)
    Call Comm_MatchWorkbookFont
    
    outrge.Select
    On Error GoTo 0
End Sub

Private Function GetIndexByIntValue(ByVal intLook As Long, rge As Range) As Long
    Dim i, cnt
    cnt = rge.Rows.Count
    For i = 1 To cnt
        If rge.Cells(i, 1) = intLook Then
            GetIndexByIntValue = i
            Exit Function
        End If
    Next i
    GetIndexByIntValue = -1
End Function

'KM
Sub DrawKMGrp(strWrkSht As String, strGrpOut As String, strGrpData As String, strPara As String)
    Dim wrkbk As Workbook
    Dim wrksht As Worksheet
    Dim datarge As Range, outrge As Range
    Dim xRge As Range, yRge As Range, namerge As Range
    Dim datanum As Long
    Dim cht As Chart
    Dim GroupNum As Integer
    Dim i As Integer, j As Integer, k As Long
    Dim para As Object
    Dim serie As Series
    Dim colorindex As Variant
    Dim markerindex As Variant
    Dim GrpInfo As Range, r As Range
    colorindex = Array(5, 7, 10, 3, 1, 45, 8, 54, 4)
    markerindex = Array(xlMarkerStyleDiamond, xlMarkerStyleSquare, xlMarkerStyleTriangle, xlMarkerStyleCircle, _
                        xlMarkerStyleStar, xlMarkerStyleX, xlMarkerStyleDiamond, xlMarkerStyleSquare, xlMarkerStyleTriangle)
    
    On Error Resume Next
    Set wrkbk = Range("'" & strWrkSht & "'!$A$1").Worksheet.parent
    Set wrksht = Range("'" & strWrkSht & "'!$A$1").Worksheet
    Set outrge = wrksht.Range(Comm_ToXlA1str(strGrpOut))
    Set datarge = wrksht.Range(Comm_ToXlA1str(strGrpData))
    Set para = Comm_setdict(strPara)
    On Error GoTo 0
    If outrge Is Nothing Or datarge Is Nothing Or para Is Nothing Then
        Exit Sub
    End If
    
    GroupNum = CInt(para("GroupNum"))
    
    'datanum = datarge.Rows.Count
    'datarge.Range("A1").Resize(datanum, 2 * GroupNum).Copy outrge.Range("A25")
    'datarge.Range("A1").Resize(datanum, 2 * GroupNum).Cells.Clear
    'Set datarge = outrge.Range("A25").Resize(datanum, 2)
    
    #If 0 Then
    ThisWorkbook.Worksheets("tmplKM").ChartObjects("grpKM").Copy
    wrksht.Activate
    outrge.Select
    wrksht.Paste
    Set cht = Selection.parent
    #End If
    
    Set cht = Comm_GetTmplGrp(outrge, ThisWorkbook.Name, "tmplKM", "grpKM")
    If cht Is Nothing Then
        Exit Sub
    End If
    
    datanum = datarge.Rows.Count
    Set namerge = datarge(1, 2)
    Set xRge = Range(datarge(2, 1), datarge(datanum, 1))
    Set yRge = Range(datarge(2, 2), datarge(datanum, 2))
    For i = 1 To GroupNum
        'Set nameRge = dataRge(1, 2 * (i - 1) + 2)
        'Set xrge = Range(dataRge(2, 2 * (i - 1) + 1), dataRge(datanum, 2 * (i - 1) + 1))
        'Set yrge = Range(dataRge(2, 2 * (i - 1) + 2), dataRge(datanum, 2 * (i - 1) + 2))
        xRge.Range("A1").Offset(-1, 0).Resize(1, 2).Copy xRge.Range("A1").Offset(-1, GroupNum * 2 + 1)
        yRge.Range("A1").Offset(-1, 0).Resize(1, 2).Copy yRge.Range("A1").Offset(-1, GroupNum * 2 + 1)
        xRge.Copy xRge.Range("A1").Offset(0, GroupNum * 2 + 1)
        yRge.Copy yRge.Range("A1").Offset(0, GroupNum * 2 + 1)
        Set serie = cht.SeriesCollection.NewSeries
        serie.Name = namerge.text
        serie.Values = "='" & strWrkSht & "'!" & Comm_ToXlRCStr(yRge.Address)
        serie.XValues = "='" & strWrkSht & "'!" & Comm_ToXlRCStr(xRge.Address)
        With serie
            .MarkerStyle = xlMarkerStyleNone
            .Smooth = False
            .Shadow = False
            .Border.colorindex = colorindex((i - 1) Mod 9)
            .Border.Weight = xlThin
            #If 0 Then
            Set GrpInfo = wrksht.Range(Comm_ToXlA1str(para("GrpInfo" & i)))
            For j = 1 To serie.Points.Count
                k = GetIndexByIntValue(serie.XValues(j), GrpInfo.Columns(1))
                If k > 0 Then
                    Set r = GrpInfo.Cells(k, 2)
                    If val(r) = 0 Then
                        'serie.Points(j).MarkerStyle = xlMarkerStyleNone
                    Else
                        With serie.Points(j)
                            .MarkerSize = 4
                            .MarkerBackgroundColorIndex = colorindex((i - 1) Mod 9)
                            .MarkerForegroundColorIndex = .MarkerBackgroundColorIndex
                            If (i - 1) Mod 9 = 4 Then .MarkerBackgroundColorIndex = xlNone
                            .MarkerStyle = markerindex((i - 1) Mod 9)
                        End With
                    End If
                End If
            Next j
            #End If
        End With
        Set namerge = namerge.Offset(0, 2)
        Set xRge = xRge.Offset(0, 2)
        Set yRge = yRge.Offset(0, 2)
    Next i
    Set namerge = datarge(1, 2).Offset(0, GroupNum * 2 + 1)
    Set xRge = Range(datarge(2, 1), datarge(datanum, 1)).Offset(0, GroupNum * 2 + 1)
    Set yRge = Range(datarge(2, 2), datarge(datanum, 2)).Offset(0, GroupNum * 2 + 1)
    For i = 1 To GroupNum
        Set serie = cht.SeriesCollection.NewSeries
        serie.Name = namerge.text
        serie.Values = "='" & strWrkSht & "'!" & Comm_ToXlRCStr(yRge.Address)
        serie.XValues = "='" & strWrkSht & "'!" & Comm_ToXlRCStr(xRge.Address)
        With serie
            .MarkerSize = 4
            .MarkerBackgroundColorIndex = colorindex((i - 1) Mod 9)
            .MarkerForegroundColorIndex = .MarkerBackgroundColorIndex
            If (i - 1) Mod 9 = 4 Then .MarkerBackgroundColorIndex = xlNone
            .MarkerStyle = markerindex((i - 1) Mod 9)
            .Smooth = False
            .Shadow = False
            .Border.colorindex = colorindex((i - 1) Mod 9)
            .Border.Weight = xlThin
            Set GrpInfo = wrksht.Range(Comm_ToXlA1str(para("GrpInfo" & i)))
            For j = 1 To serie.Points.Count
                k = GetIndexByIntValue(serie.XValues(j), GrpInfo.Columns(1))
                If k > 0 Then
                    Set r = GrpInfo.Cells(k, 2)
                    If val(r) = 0 Then
                        'serie.Points(j).MarkerStyle = xlMarkerStyleNone
                        xRge(j, 1) = ""
                        yRge(j, 1) = ""
                    Else
                        'With serie.Points(j)
                        '    .MarkerSize = 4
                        '    .MarkerBackgroundColorIndex = colorindex((i - 1) Mod 9)
                        '    .MarkerForegroundColorIndex = .MarkerBackgroundColorIndex
                        '    If (i - 1) Mod 9 = 4 Then .MarkerBackgroundColorIndex = xlNone
                        '    .MarkerStyle = markerindex((i - 1) Mod 9)
                        'End With
                    End If
                End If
            Next j
        End With
        Set namerge = namerge.Offset(0, 2)
        Set xRge = xRge.Offset(0, 2)
        Set yRge = yRge.Offset(0, 2)
    Next i

    Set para = Nothing
    
    cht.SeriesCollection(1).Delete
    cht.HasLegend = False
    cht.HasLegend = True
    For i = 1 To GroupNum
        cht.Legend.LegendEntries(GroupNum + 1).Delete
    Next i
    
    cht.Legend.Position = xlLegendPositionRight
    
    ActiveChart.ChartArea.Select
    Call Comm_MatchWorkbookFont
    
    '|fffd|}|fffd||308||292|u|fffd||183|T|fffd|C|fffd|Y
    Call Comm_setChartPosSize(cht.parent, outrge, 22, 8)
    
    outrge.Select
    On Error GoTo 0
End Sub

'=== EOF ===

' InQuest injected base64 decoded content
' ZrH+
' N'$-
' *Zr)

INQUEST-PP=macro
