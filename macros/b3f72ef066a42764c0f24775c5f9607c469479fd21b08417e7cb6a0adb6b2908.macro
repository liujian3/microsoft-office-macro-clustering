Attribute VB_Name = "Foglio1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Foglio2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Foglio3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Foglio4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Foglio5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Helper"
Global Const SHEET_COLS As String = "Cols"
Global Const SHEET_WIP As String = "WIP"
Global Const SHEET_COMPANY As String = "Aziende"

Function getInputFile(titolo As String) As String
    Dim fDialog As Office.FileDialog
   
    Set fDialog = Application.FileDialog(msoFileDialogFilePicker)
    With fDialog
        .AllowMultiSelect = False
        .Title = titolo
        .InitialFileName = ThisWorkbook.Path & "\"
        .Filters.Clear
        .Filters.Add "Excel file", "*.xlsx;*.xlsm"
        
        If .Show = True Then
            getInputFile = .SelectedItems(1)
        End If
    End With
End Function

'funzione che cerca gli elementi contenuti nelle posizioni delle chiavi (elencate nell'array)
'se c'|fffd| una riga gi|fffd| presente, verr|fffd| restituito il numero della riga
'altrimenti verr|fffd| restituito -1
Function checkUnique(wbIn As Workbook, shWIP As Worksheet) As Integer
    checkUnique = -1

    Dim arrKey As Variant
    arrKey = Array("TITOLO", "SEDE", "DATA FINE")
    
    Dim titolo As Variant
    Dim sede As Variant
    Dim data_fine As Variant
    Dim rng As Range
    
    titolo = getColKey("TITOLO", wbIn, shWIP)
    sede = getColKey("SEDE", wbIn, shWIP)
    data_fine = getColKey("DATA FINE", wbIn, shWIP)
    
    shWIP.AutoFilterMode = False
    
    Dim lR As Double, lC As Double
    lR = shWIP.UsedRange.Rows(shWIP.UsedRange.Rows.Count).row
    lC = shWIP.UsedRange.Columns(shWIP.UsedRange.Columns.Count).Column
    
    With ThisWorkbook.Sheets("Macro")
        shWIP.Range(shWIP.Cells(2, 1), shWIP.Cells(lR, lC)).AutoFilter 2, .Range("EVENT_YEAR").Value
        shWIP.Range(shWIP.Cells(2, 1), shWIP.Cells(lR, lC)).AutoFilter 3, .Range("COMPANY_NAME").Value
        shWIP.Range(shWIP.Cells(2, 1), shWIP.Cells(lR, lC)).AutoFilter 4, .Range("AGENCY_NAME").Value
    End With
    
    shWIP.Range(shWIP.Cells(2, 1), shWIP.Cells(lR, lC)).AutoFilter shWIP.Range(sede(0) & "1").Column, CStr(sede(1))
    shWIP.Range(shWIP.Cells(2, 1), shWIP.Cells(lR, lC)).AutoFilter shWIP.Range(data_fine(0) & "1").Column, "=" & CDate(data_fine(1))
    
    If shWIP.Range(shWIP.Cells(2, 1), shWIP.Cells(lR, 1)).SpecialCells(xlCellTypeVisible).Count > 1 Then
        For Each rng In shWIP.Range(shWIP.Cells(2, 1), shWIP.Cells(lR, 1)).SpecialCells(xlCellTypeVisible)
            checkUnique = rng.row
        Next rng
    End If
   
    shWIP.AutoFilterMode = False
    
End Function

'restituisce array con colonna WIP e valore da cercare
Function getColKey(key As String, wbIn As Workbook, shWIP As Worksheet) As Variant
    getColKey = Array()
    With ThisWorkbook.Sheets(SHEET_COLS)
        Dim r As Integer
        Dim find As Boolean
        find = False
        r = 2
        
        While .Cells(r, 1).Value <> "" And find = False
            If .Cells(r, 4).Value = key Then
                getColKey = Array(.Cells(r, 1).Value, wbIn.Sheets(.Cells(r, 2).Value).Range(.Cells(r, 3).Value).Value)
                find = True
            End If
            r = r + 1
        Wend
    End With
End Function

Function checkIfSheetExists(shName As String, wb As Workbook) As Boolean
    On Error Resume Next
    checkIfSheetExists = Len(wb.Sheets(shName).Name) > 0
    On Error GoTo 0
End Function
Attribute VB_Name = "Modulo1"
Sub Macro_Click()
    Dim wbIn As Workbook
    Dim shIn As Worksheet
    Dim wbOut As Workbook
    Dim shOut As Worksheet
    Dim shCols As Worksheet
    Dim s As String, s_wip As String
    Dim new_wip As Boolean, new_row As Boolean
    Dim nSheet As Integer
    Dim row As Double
    Dim dAlert As Boolean, delete_tmp_sheet As Boolean
    
    dAlert = Application.DisplayAlerts
    
    delete_tmp_sheet = False
    new_row = True
    row = -1
    
    Set shCols = ThisWorkbook.Sheets(SHEET_COLS)
    
    s = getInputFile("Selezionare file consuntivo/preventivo")
    If s = "" Then Exit Sub
    
    Dim company As String
    With ThisWorkbook.Sheets("Macro")
        company = Application.WorksheetFunction.VLookup(.Range("COMPANY_NAME").Value, ThisWorkbook.Sheets(SHEET_COMPANY).Columns("A:B"), 2, 0)
    
        If Dir(ThisWorkbook.Path & "\Output", vbDirectory) <> "" Then
       
            If Dir(ThisWorkbook.Path & "\Output\" & company & " " & .Range("EVENT_YEAR").Value & ".xlsx") <> "" Then
                new_wip = False
            Else
                new_wip = True
            End If
        Else
            new_wip = True
        End If
    End With
    
    If new_wip Then
        'creazione nuovo file
        
        nSheet = Application.SheetsInNewWorkbook
        Application.SheetsInNewWorkbook = 1
        Set wbOut = Workbooks.Add
        Application.SheetsInNewWorkbook = nSheet
        
        delete_tmp_sheet = True
    Else
        'richiesta file da aggiornare
        
        With ThisWorkbook.Sheets("Macro")
            Set wbOut = Workbooks.Open(ThisWorkbook.Path & "\Output\" & company & " " & .Range("EVENT_YEAR").Value & ".xlsx")
            Debug.Print ThisWorkbook.Path & "\Output\" & company & " " & .Range("EVENT_YEAR").Value & ".xlsx"
        End With
        
        If Not checkIfSheetExists(SHEET_WIP, wbOut) Then
            MsgBox "Foglio """ & SHEET_WIP & """ non presente nel file selezionato." & vbNewLine & "Impossibile continuare", vbExclamation
            Exit Sub
        End If
        
        Dim lCT As Double, lCOut As Double
        
        With ThisWorkbook.Sheets(SHEET_WIP)
            lCT = .UsedRange.Columns(.UsedRange.Columns.Count).Column
        End With
        
        With wbOut.Sheets(SHEET_WIP)
            lCOut = .UsedRange.Columns(.UsedRange.Columns.Count).Column
        End With
        
        'controllo numero di colonne sheet WIP
        If lCT <> lCOut Then
            MsgBox "Numero colonne diverse tra il file """ & wbOut.Name & """ e il template della macro", vbExclamation
            Exit Sub
        End If
        
        Dim col_error As Boolean
        Dim col As Double
        Dim rHeader As Integer
        
        col_error = False
        'controllo testi colonne sheet WIP
        rHeader = ThisWorkbook.Sheets(SHEET_WIP).Range("TEMPLATE_ROW").row + 1
        For col = 1 To lCT
            If ThisWorkbook.Sheets(SHEET_WIP).Cells(rHeader, col).Value <> wbOut.Sheets(SHEET_WIP).Cells(rHeader, col).Value Then
                col_error = True
                Exit For
            End If
        Next col
        
        If col_error Then
            MsgBox "Colonna " & Split(wbOut.Sheets(SHEET_WIP).Cells(1, col).Address, "$")(1) & " diversa tra il file """ & wbOut.Name & """ e il template", vbExclamation
            Exit Sub
        End If
        
    End If
    
    Application.EnableEvents = False
    Set wbIn = Workbooks.Open(s)
    Application.EnableEvents = True
    
    If new_wip Then
        'se nuovo file, copio il template dalla macro
        ThisWorkbook.Sheets(SHEET_WIP).Copy wbIn.Sheets(1)
        Set shOut = wbIn.Sheets(SHEET_WIP)
        shOut.Visible = xlSheetVisible
        shOut.Activate
    Else
        'se file da aggiornare, copio il foglio WIP dall'output nell'input per compilare il tutto dalla macro
        wbOut.Sheets(SHEET_WIP).Copy wbIn.Sheets(1)
        Set shOut = wbIn.Sheets(SHEET_WIP)
        
        row = checkUnique(wbIn, shOut)
        
        If row > 0 Then
            If MsgBox("Record gi|fffd| presente alla riga """ & row & """ del file WIP. Sovrascriverlo?", vbYesNo) = vbNo Then
                Application.DisplayAlerts = False
                wbIn.Sheets(SHEET_WIP).Delete
                Application.DisplayAlerts = dAlert
                Exit Sub
            End If
            new_row = False
        End If
    End If
    
    
    Dim r As Integer
    Dim formula_str As String
    
    row = IIf(row > 0, row, shOut.UsedRange.Rows(shOut.UsedRange.Rows.Count).row + 1)
    If new_row Then
        shOut.Rows(shOut.Range("TEMPLATE_ROW").row).Hidden = False
        
        shOut.Rows(1).Copy
        shOut.Rows(row).PasteSpecial xlPasteAll
        Application.CutCopyMode = False
    End If
    
    r = 2
    While shCols.Cells(r, 1).Value <> ""
        shOut.Range(shCols.Cells(r, 1).Value & row).NumberFormat = shOut.Range(shCols.Cells(r, 1).Value & shOut.Range("TEMPLATE_ROW").row).NumberFormat
        If shCols.Cells(r, 3).Value <> "" Then 'c'|fffd| una formula
            If shCols.Cells(r, 2).Value <> "" Then 'c'|fffd| uno sheet indicato
                If checkIfSheetExists(shCols.Cells(r, 2).Value, wbIn) Then
                    If InStr(1, shCols.Cells(r, 3).Value, ":") > 1 Or InStr(1, shCols.Cells(r, 3).Value, ",") > 1 Then 'cerco se c'|fffd| un range per effettuare nel caso la somma
                        elem = Split(shCols.Cells(r, 3).Value, ",")
                        formula_str = "=SUM("
                        For i = 0 To UBound(elem)
                            formula_str = formula_str & "'" & shCols.Cells(r, 2).Value & "'!" & elem(i) & ","
                        Next i
                        formula_str = Left(formula_str, Len(formula_str) - 1) & ")"
                    Else
                        formula_str = "='" & shCols.Cells(r, 2).Value & "'!" & shCols.Cells(r, 3).Value
                    End If
                    
                    shOut.Range(shCols.Cells(r, 1).Value & row).formula = formula_str
                Else
                    MsgBox "Foglio """ & shCols.Cells(r, 2).Value & """ non presente nell'input selezionato", vbExclamation
                    Exit Sub
                End If
            Else
                shOut.Range(shCols.Cells(r, 1).Value & row).formula = "=" & shCols.Cells(r, 3).Value
            End If
        End If
        shOut.Range(shCols.Cells(r, 1).Value & row).Value = shOut.Range(shCols.Cells(r, 1).Value & row).Value
        
        r = r + 1
    Wend
    
    If new_row Then
        max_id = Application.WorksheetFunction.Max(shOut.Range("A1:A" & shOut.UsedRange.Rows(shOut.UsedRange.Rows.Count).row)) + 1
        shOut.Cells(row, 1).Value = max_id
    End If
    
    shOut.Cells(row, 2).Value = ThisWorkbook.Sheets("Macro").Range("EVENT_YEAR").Value
    shOut.Cells(row, 3).Value = ThisWorkbook.Sheets("Macro").Range("COMPANY_NAME").Value
    shOut.Cells(row, 4).Value = ThisWorkbook.Sheets("Macro").Range("AGENCY_NAME").Value
    
    For c = shOut.Range("TEMPLATE_ROW").Column To shOut.UsedRange.Columns(shOut.UsedRange.Columns.Count).Column
        If shOut.Cells(shOut.Range("TEMPLATE_ROW").row, c).HasFormula Then
            shOut.Cells(row, c).NumberFormat = shOut.Cells(shOut.Range("TEMPLATE_ROW").row, c).NumberFormat
            shOut.Cells(shOut.Range("TEMPLATE_ROW").row, c).Copy
            shOut.Cells(row, c).PasteSpecial xlPasteFormulas
            Application.CutCopyMode = False
            shOut.Cells(row, c).Value = shOut.Cells(row, c).Value
        End If
    Next c
    
    shOut.Rows(shOut.Range("TEMPLATE_ROW").row).Hidden = True
    
    shOut.Activate
    shOut.Cells(row, 1).Select
    
    Application.DisplayAlerts = False
    
    If checkIfSheetExists(SHEET_WIP, wbOut) Then
        If wbOut.Sheets.Count = 1 Then
            wbOut.Sheets.Add wbOut.Sheets(1)
            delete_tmp_sheet = True
        End If
        wbOut.Sheets(SHEET_WIP).Delete
    End If
    
    shOut.Copy wbOut.Sheets(1)
    If delete_tmp_sheet Then wbOut.Sheets(2).Delete
    
    
    Application.DisplayAlerts = dAlert
    
    wbIn.Close False
    
    wbOut.Activate
    wbOut.Sheets(1).Activate
    If Not new_wip Then
        wbOut.Save
    Else
        With ThisWorkbook.Sheets("Macro")
            If Dir(ThisWorkbook.Path & "\Output", vbDirectory) = "" Then MkDir ThisWorkbook.Path & "\Output"
            wbOut.SaveAs ThisWorkbook.Path & "\Output\" & company & " " & .Range("EVENT_YEAR").Value, 51
        End With
    End If
    
    Dim msg As String
    msg = IIf(new_wip, "Creazione effettuata con successo", "Aggiornamento effettuato con successo")
    MsgBox msg, vbInformation
End Sub


Attribute VB_Name = "Questa_cartella_di_lavoro"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
