Attribute VB_Name = "BHAGrafPr"
Sub BHAGrafPrep()
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "BHARep" |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|3, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Dim Sh As Worksheet
Dim CatSh As Worksheet
Dim CsPipe As Worksheet
Dim Wb As Workbook
Dim BHARepIsExist As Boolean
Dim i As Integer
Dim j As Integer
Dim Strt As Integer
Dim Lnt As Integer
Dim RowNmb As Integer
Dim PicRange As Range
Dim PicPath As String
Dim ClsValue As String
Dim Coll As Collection
Dim Summ As Double

Application.ScreenUpdating = False
Application.DisplayAlerts = False

'Translat BHTC_NAME to RUS

Set Wb = ThisWorkbook '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
 
If Not ShIsExist("BHARep", Wb) Then Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| "BHARep" |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SheetIsExist
If Not ShIsExist("RusCat", Wb) Then Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| "BHARep" |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
RowNmb = 0
Set CatSh = Wb.Sheets("RusCat") '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| BHA,
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Set Coll = New Collection
i = 1
Do While CatSh.Cells(i, 3) <> ""
    Coll.Add CatSh.Cells(i, 3)
i = i + 1
Loop

Set Sh = Wb.Worksheets("BHARep") ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "BHARep"

i = 2
Do While Sh.Cells(i, 2) <> ""
    ClsValue = Sh.Cells(i, 2)
    j = 1
    For Each Itm In Coll
        If Itm = ClsValue And CatSh.Cells(j, 4) <> "" Then
            Sh.Cells(i, 2) = CatSh.Cells(j, 4)
            Exit For
        End If
    j = j + 1
    Next Itm
i = i + 1
Loop

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Sh.Columns(2).WrapText = True
Sh.Columns(2).ColumnWidth = 30
Sh.Columns(8).ColumnWidth = 20
Sh.Rows(1).RowHeight = 60

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
i = 2
Do While Sh.Cells(i, 9) <> ""
Sh.Cells(i, 3) = Sh.Cells(i, 3) * 1000
Sh.Cells(i, 4) = Sh.Cells(i, 4) * 1000
i = i + 1
Loop


PicImportFromLibSheet ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ImpPicToBHAFromLibSheet, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|....

Application.Calculation = xlManual ' |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

Sh.Columns(6).Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Sh.Columns(13).Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
Set CsPipe = Wb.Worksheets("CsPipe") ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|  "CsPipe" |fffd||fffd| ADV, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|3
i = 2
Do While Sh.Cells(i, 1) <> ""
RowNmb = RowNmb + 1
Summ = Summ + Sh.Cells(i, 5) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
If Sh.Cells(i, 1) = 1 Then Sh.Cells(i, 6).FormulaR1C1 = "=RC[-1]" ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
If Sh.Cells(i, 1) <> 1 And i <> 2 Then Sh.Cells(i, 6).FormulaR1C1 = "=R[1]C+RC[-1]" ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sh.Cells(i, 3) = Round(Sh.Cells(i, 3), 1)
Sh.Cells(i, 3).NumberFormat = "0.0"
Sh.Cells(i, 4).NumberFormat = "0.0"
Sh.Cells(i, 5).NumberFormat = "0.00"
Sh.Cells(i, 6).NumberFormat = "0.00"
Sh.Cells(i, 12) = Sh.Cells(i, 12) / 9.8 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd|/|fffd||fffd|
Sh.Cells(i, 12).NumberFormat = "0.00"
Sh.Cells(i, 14) = Sh.Cells(i, 14) / 1000000 ' |fffd||fffd||fffd|
Sh.Cells(i, 14).NumberFormat = "0.0"
Sh.Cells(i, 13).FormulaR1C1 = "=RC[-1]*RC[-8]/1000"
Sh.Cells(i, 13).NumberFormat = "0.0"

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If Sh.Cells(i, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then
    j = 2
    Do While CsPipe.Cells(j, 1) <> ""
        If Sh.Cells(i, 11) = CsPipe.Cells(j, 1) Then
            Select Case CsPipe.Cells(j, 18)
            Case "N"
                Sh.Cells(i, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & Chr(10) & "New (|fffd||fffd||fffd||fffd||fffd| 1)"
            Case "P"
                Sh.Cells(i, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & Chr(10) & "Premium (|fffd||fffd||fffd||fffd||fffd| 2)"
            Case "C"
                Sh.Cells(i, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & Chr(10) & "Class 2 (|fffd||fffd||fffd||fffd||fffd| 3)"
            End Select
            Sh.Cells(i, 2) = Sh.Cells(i, 2) & DPGrade(Sh.Cells(i, 14)) ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|,|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            
        End If
        
    j = j + 1
    Loop
End If
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Sh.Cells(i, 9) = TrltMan(Sh.Cells(i, 9)) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Sh.Cells(i, 7) = TrltThreds(Sh.Cells(i, 7)) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Sh.Cells(i, 8) = TrltThreds(Sh.Cells(i, 8)) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|

' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If Sh.Cells(i, 1) = 1 Then
Sh.Rows(i).RowHeight = 45
Sh.Cells(i, 2) = Sh.Cells(i, 2) & Chr(10) & BitJets() ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Bit(|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End If
If Not Sh.Cells(i, 9) = "" Then

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Strt = Len(Sh.Cells(i, 2) & Chr(10))
Lnt = Len("""" & Sh.Cells(i, 9) & """")
Sh.Cells(i, 2) = Sh.Cells(i, 2) & Chr(10) & """" & Sh.Cells(i, 9) & """"

Sh.Cells(i, 2).Characters(Start:=Strt, Length:=Lnt).Font.Color = -903577
End If
i = i + 1
Loop

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Sh.Cells(2, 5).FormulaR1C1 = "=RC[1]-R[1]C[1]"
Sh.Cells(2, 6) = Summ

' |fffd||fffd||fffd||fffd||fffd|
For i = 1 To 18
Sh.Cells(1, i) = Wb.Sheets("Setup").Cells(i, 12)
Next i

Sh.Rows(1).RowHeight = 45
Sh.Rows(1).WrapText = True
'Sh.Columns(15).Hidden = True
Sh.Cells.HorizontalAlignment = xlCenter
Sh.Cells.VerticalAlignment = xlCenter
Sh.Rows("1:8").Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Header ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd| |fffd||fffd||fffd||fffd||fffd|
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|  Head, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|

Wb.Sheets("Header").Cells(7, 2) = CStr(Sh.Cells(RowNmb + 9, 3)) & "|fffd||fffd|"

For i = 3 To 6
Sh.Cells(i, 2) = Wb.Sheets("Header").Cells(i, 1)
Sh.Cells(i, 2).HorizontalAlignment = xlLeft
Sh.Range("C" & i & ":E" & i).Merge
Sh.Cells(i, 3).HorizontalAlignment = xlLeft
Sh.Cells(i, 3) = Wb.Sheets("Header").Cells(i, 2)
Next i
FrmtBorders Sh.Range("B3:E6")
FrmtBorders Sh.Range("A9:O" & RowNmb + 9)
FrmtBorders Sh.Range("R9:R" & RowNmb + 9)

' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (+1)
Sh.Columns(1).Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove


' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| 10-|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Setup, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
For i = 1 To 19
ThisWorkbook.Sheets("BHARep").Columns(i).ColumnWidth = ThisWorkbook.Sheets("Setup").Cells(i, 10)
Next i
' |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Setup |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 7 |fffd| 6 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| #3
For i = 2 To 12
Sh.Columns(Wb.Sheets("Setup").Cells(i, 7)).Hidden = Not (Wb.Sheets("Setup").Cells(i, 6))
Next i

AddShapeForSave '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

'HideSheets ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

Application.Calculation = xlAutomatic

Sh.Select
End Sub
Sub PicFromFils()
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| ADV |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| PicLib
Dim Wb As Workbook
Dim Sh As Worksheet
Dim PicRange As Range
Dim i As Integer
Dim PicPath As String
Set Wb = ThisWorkbook
Set Sh = Wb.Sheets("BHARep")
i = 2
Do While Sh.Cells(i, 16) <> ""
    PicPath = Wb.Path & "\bhaicons\" & Sh.Cells(i, 9) & ".gif"
    Set PicRange = Sh.Cells(i, 11)
    PicInsertToRange PicRange, PicPath, , True, False
    i = i + 1
Loop
End Sub

Function DPGrade(ByVal YeildStrenght As Double) As String
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

If YeildStrenght = 0 Then
    DPGrade = ""
    Exit Function
End If
If YeildStrenght >= 930 Then
    DPGrade = Chr(10) & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| (S-135)"
    Exit Function
End If
If YeildStrenght >= 724 Then
    DPGrade = Chr(10) & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| M (G-105)"
    Exit Function
End If
If YeildStrenght >= 655 Then
    DPGrade = Chr(10) & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| (X-95)"
    Exit Function
End If
If YeildStrenght >= 517 Then
    DPGrade = Chr(10) & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| E (E-75)"
    Exit Function
End If
DPGrade = Chr(10) & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|"
End Function

Function TrltMan(ByVal Mnf As String) As String
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| "Translate", |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| InputBox
Dim Wb As Workbook
Dim Sh As Worksheet
Dim i As Integer
Set Wb = ThisWorkbook
If Mnf = "" Then
    TrltMan = ""
    Exit Function
End If
If Not ShIsExist("Translate", Wb) Then
    TrltMan = Mnf
    Exit Function
End If
Set Sh = Wb.Sheets("Translate")
i = 2
Do While Sh.Cells(i, 1) <> "" And i < 1000
    If Sh.Cells(i, 1) = Mnf Then
        TrltMan = Sh.Cells(i, 2)
        Exit Function
    End If
i = i + 1
Loop
TrltMan = InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|: " & Mnf, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
If TrltMan <> "" Then
Sh.Cells(i, 1) = Mnf
Sh.Cells(i, 2) = TrltMan
Else
TrltMan = Mnf
End If
End Function

Function TrltThreds(ByVal Thred As String) As String
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Dim Wb As Workbook
Dim Sh As Worksheet
Dim i As Integer
Set Wb = ThisWorkbook
If Thred = "" Or Thred = "NULL" Then
    TrltThreds = ""
    Exit Function
End If
If Not ShIsExist("Translate", Wb) Then
    TrltThreds = Thred
    Exit Function
End If
Set Sh = Wb.Sheets("Translate")
i = 2
Do While Sh.Cells(i, 4) <> "" And i < 1000
    If Sh.Cells(i, 4) = Thred Then
        TrltThreds = Sh.Cells(i, 5)
        Exit Function
    End If
i = i + 1
Loop
TrltThreds = InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|: " & Thred, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
If TrltThreds <> "" Then
Sh.Cells(i, 4) = Thred
Sh.Cells(i, 6) = Thred
Sh.Cells(i, 5) = TrltThreds
Else
TrltThreds = Thred
End If
End Function

Sub FrmtBorders(ByRef rng As Range)
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
rng.Borders(xlEdgeLeft).Weight = xlMedium
rng.Borders(xlEdgeTop).Weight = xlMedium
rng.Borders(xlEdgeBottom).Weight = xlMedium
rng.Borders(xlEdgeRight).Weight = xlMedium
rng.Borders(xlInsideVertical).Weight = xlThin
rng.Borders(xlInsideHorizontal).Weight = xlThin
End Sub

Sub AddShapeForSave()
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SaveBHARus (|fffd||fffd||fffd||fffd||fffd||fffd| SaveBHA, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd| |fffd||fffd||fffd||fffd| "BHARep"
Dim Shp As Shape
Set Shp = ThisWorkbook.Sheets("BHARep").Shapes.AddShape(msoShapeRoundedRectangle, 495, 18.75, 221.25, 60)
Shp.TextFrame2.TextRange.Characters.Text = "Save BHArus Report"
Shp.TextFrame2.TextRange.Font.Size = 18
Shp.TextFrame2.VerticalAnchor = msoAnchorMiddle
Shp.TextFrame2.TextRange.ParagraphFormat.Alignment = msoAlignCenter
Shp.Placement = xlFreeFloating
Shp.OnAction = "SaveBHARus"
Shp.Name = "SaveBtmn"
End Sub

Function TrltHeader(ClmnName As String) As String
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim Sh As Worksheet: Set Sh = TWb.Sheets("Translate")
Dim i As Integer
If ClmnName = "" Or ClmnName = "NULL" Then
    TrltHeader = ""
    Exit Function
End If
If Not ShIsExist("Translate", TWb) Then
    TrltHeader = ClmnName
    Exit Function
End If
i = 2
Do While Sh.Cells(i, 19) <> "" And i < 1000
    If Sh.Cells(i, 19) = ClmnName Then
        TrltHeader = Sh.Cells(i, 20)
        Exit Function
    End If
i = i + 1
Loop
TrltHeader = InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|: " & ClmnName, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
If TrltHeader <> "" Then
Sh.Cells(i, 19) = ClmnName
Sh.Cells(i, 20) = TrltHeader
Else
TrltHeader = ClmnName
End If
End Function
Function TrlSens(ClmnName As String) As String
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim Sh As Worksheet: Set Sh = TWb.Sheets("Translate")
Dim i As Integer
If ClmnName = "" Or ClmnName = "NULL" Then
    TrlSens = ""
    Exit Function
End If
If Not ShIsExist("Translate", TWb) Then
    TrlSens = ClmnName
    Exit Function
End If
i = 2
Do While Sh.Cells(i, 22) <> "" And i < 1000
    If Sh.Cells(i, 22) = ClmnName Then
        TrlSens = Sh.Cells(i, 23)
        Exit Function
    End If
i = i + 1
Loop
TrlSens = InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|: " & ClmnName, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
If TrlSens <> "" Then
Sh.Cells(i, 22) = ClmnName
Sh.Cells(i, 23) = TrlSens
Else
TrlSens = ClmnName
End If
End Function
Attribute VB_Name = "Bit"
Function BitJets() As String
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "BITRep" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| #3 |fffd||fffd| ADV
Dim Wb As Workbook
Dim Sh As Worksheet
Dim i As Integer
Dim j As Integer
Dim jts As String
Set Wb = ThisWorkbook
If Not ShIsExist("BITRep", Wb) Then
    BitJets = ""
    Exit Function
End If
Set Sh = Wb.Worksheets("BITRep")
Sh.Columns(10).ClearContents
Sh.Columns(11).ClearContents
Sh.Cells(1, 10) = Sh.Cells(2, 5)
Sh.Cells(1, 11) = 1
i = 3
Do While Sh.Cells(i, 5) <> ""
    j = 1
    Do While Sh.Cells(j, 10) <> ""
        If Sh.Cells(i, 5) = Sh.Cells(j, 10) Then
        Sh.Cells(j, 11) = Sh.Cells(j, 11) + 1
        j = 1000
        End If
    j = j + 1
    Loop
    If j <> 1001 Then
    Sh.Cells(j, 10) = Sh.Cells(i, 5)
    Sh.Cells(j, 11) = 1
    End If
i = i + 1
Loop
jts = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: "
i = 1
Do While Sh.Cells(i, 10) <> ""
jts = jts & CStr(Round(Sh.Cells(i, 10) * 10000) / 10) & "|fffd||fffd| X " & CStr(Sh.Cells(i, 11)) & "|fffd||fffd|, "
i = i + 1
Loop
BitJets = jts
End Function

Function BitJets2(ByRef BJSh As Worksheet) As String
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "BITRep" |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| #3 |fffd||fffd| ADV
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim i As Integer
Dim j As Integer
Dim jts As String

If Not ShIsExist(BJSh.Name, TWb) Then
    BitJets2 = ""
    Exit Function
End If

BJSh.Columns(14).ClearContents
BJSh.Columns(15).ClearContents
BJSh.Cells(1, 14) = BJSh.Cells(2, 5)
BJSh.Cells(1, 15) = 1
i = 3
Do While BJSh.Cells(i, 5) <> ""
    j = 1
    Do While BJSh.Cells(j, 14) <> ""
        If BJSh.Cells(i, 5) = BJSh.Cells(j, 14) Then
        BJSh.Cells(j, 15) = BJSh.Cells(j, 15) + 1
        j = 1000
        End If
    j = j + 1
    Loop
    If j <> 1001 Then
    BJSh.Cells(j, 14) = BJSh.Cells(i, 5)
    BJSh.Cells(j, 15) = 1
    End If
i = i + 1
Loop
jts = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: "
i = 1
Do While BJSh.Cells(i, 14) <> ""
jts = jts & CStr(Round(BJSh.Cells(i, 14) * 10000) / 10) & "|fffd||fffd| X " & CStr(BJSh.Cells(i, 15)) & "|fffd||fffd|, "
i = i + 1
Loop
BitJets2 = jts
End Function
Attribute VB_Name = "DDBHAFromADV"
Sub DDBHARusMain()
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim DDBHARepSh As Worksheet: Set DDBHARepSh = TWb.Sheets("DDBHARep")
Dim i As Integer
Dim DDPipe As Worksheet: Set DDPipe = TWb.Worksheets("DDPipe")
Dim Start As String
Dim Length As String
Dim RowNmb As Integer
Dim Summ As Double
Dim LstRow As Integer
Translate_BHTC_NAME DDBHARepSh, 2
i = 2
Do While DDBHARepSh.Cells(i, 1) <> ""
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    DDBHARepSh.Cells(i, 4) = TrltMan(DDBHARepSh.Cells(i, 4))
    DDBHARepSh.Cells(i, 10) = TrltThreds(DDBHARepSh.Cells(i, 10))
    DDBHARepSh.Cells(i, 11) = TrltThreds(DDBHARepSh.Cells(i, 11))
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If DDBHARepSh.Cells(i, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" And Not DDPipe Is Nothing Then
        j = 2
        Do While DDPipe.Cells(j, 1) <> ""
            If DDBHARepSh.Cells(i, 13) = DDPipe.Cells(j, 1) Then
                Select Case DDPipe.Cells(j, 18)
                Case "N"
                    DDBHARepSh.Cells(i, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & Chr(10) & "New (|fffd||fffd||fffd||fffd||fffd| 1)"
                Case "P"
                    DDBHARepSh.Cells(i, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & Chr(10) & "Premium (|fffd||fffd||fffd||fffd||fffd| 2)"
                Case "C"
                    DDBHARepSh.Cells(i, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|," & Chr(10) & "Class 2 (|fffd||fffd||fffd||fffd||fffd| 3)"
                End Select
                DDBHARepSh.Cells(i, 2) = DDBHARepSh.Cells(i, 2) & DPGrade(DDBHARepSh.Cells(i, 15)) ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|,|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            End If
        j = j + 1
        Loop
    End If
    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    
    If DDBHARepSh.Cells(i, 1) = 1 Then
        DDBHARepSh.Rows(i).RowHeight = 80
        If ShIsExist("DDBITRep", TWb) Then DDBHARepSh.Cells(i, 2) = DDBHARepSh.Cells(i, 2) & Chr(10) & BitJets2(TWb.Sheets("DDBITRep")) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Bit
    End If
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    Strt = Len(DDBHARepSh.Cells(i, 2) & Chr(10))
    Lnt = Len("""" & DDBHARepSh.Cells(i, 4) & """")
    DDBHARepSh.Cells(i, 2) = DDBHARepSh.Cells(i, 2) & Chr(10) & """" & DDBHARepSh.Cells(i, 4) & """"
    DDBHARepSh.Cells(i, 2).Characters(Start:=Strt, Length:=Lnt).Font.Color = -903577
i = i + 1
Loop
LstRow = i - 1
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
For i = 1 To 16
DDBHARepSh.Cells(1, i) = TrltHeader(DDBHARepSh.Cells(1, i))
Next i
DDBHARepSh.Rows(1).RowHeight = 80
DDBHARepSh.Cells.WrapText = True
DDBHARepSh.Cells.HorizontalAlignment = xlCenter
DDBHARepSh.Cells.VerticalAlignment = xlCenter
'DDBHARepSh.Rows("1:8").Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
PicImportFromLibSheet2 DDBHARepSh, 12, 17 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Application.Calculation = xlManual ' |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

DDBHARepSh.Columns(10).Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
DDBHARepSh.Columns(16).Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
DDBHARepSh.Columns(17).Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
i = 2
RowNmb = 0
Summ = 0
Do While DDBHARepSh.Cells(i, 1) <> ""
    RowNmb = RowNmb + 1
    Summ = Summ + DDBHARepSh.Cells(i, 9) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    If DDBHARepSh.Cells(i, 1) = 1 Then DDBHARepSh.Cells(i, 10).FormulaR1C1 = "=RC[-1]" ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    If DDBHARepSh.Cells(i, 1) = 1 Then DDBHARepSh.Cells(i, 17).FormulaR1C1 = "=RC[-1]"
    If DDBHARepSh.Cells(i, 1) <> 1 And i <> 2 Then DDBHARepSh.Cells(i, 10).FormulaR1C1 = "=R[1]C+RC[-1]" ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If DDBHARepSh.Cells(i, 1) <> 1 Then DDBHARepSh.Cells(i, 17).FormulaR1C1 = "=R[1]C+RC[-1]"
    
    If DDBHARepSh.Cells(i, 6) <> "" Then
        DDBHARepSh.Cells(i, 6) = Round(DDBHARepSh.Cells(i, 6) * 1000, 1)
        DDBHARepSh.Cells(i, 6).NumberFormat = "0.0"
    End If
    
    DDBHARepSh.Cells(i, 7) = Round(DDBHARepSh.Cells(i, 7) * 1000, 1)
    DDBHARepSh.Cells(i, 7).NumberFormat = "0.0"
    DDBHARepSh.Cells(i, 8) = Round(DDBHARepSh.Cells(i, 8) * 1000, 1)
    DDBHARepSh.Cells(i, 8).NumberFormat = "0.0"
    DDBHARepSh.Cells(i, 9).NumberFormat = "0.00"
    DDBHARepSh.Cells(i, 10).NumberFormat = "0.00"
    DDBHARepSh.Cells(i, 15) = DDBHARepSh.Cells(i, 15) / 9.8 ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd|/|fffd||fffd|
    DDBHARepSh.Cells(i, 15).NumberFormat = "0.00"
    DDBHARepSh.Cells(i, 16).NumberFormat = "0.00"
    DDBHARepSh.Cells(i, 17).NumberFormat = "0.0"
    DDBHARepSh.Cells(i, 18) = DDBHARepSh.Cells(i, 18) / 1000000 ' |fffd||fffd||fffd|
    DDBHARepSh.Cells(i, 18).NumberFormat = "0.0"
    DDBHARepSh.Cells(i, 16).FormulaR1C1 = "=RC[-1]*RC[-7]/1000"
    'DDBHARepSh.Cells(i, 13).NumberFormat = "0.0"
    If DDBHARepSh.Cells(i, 1) = 1 Then TWb.Sheets("DDSetup").Cells(2, 6) = DDBHARepSh.Cells(i, 6) & "mm" ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
i = i + 1
Loop
FrmtBorders DDBHARepSh.Range("A1:S1")
FrmtBorders DDBHARepSh.Range("A2:S" & i - 1)


DDBHARepSh.Cells(2, 9).FormulaR1C1 = "=RC[1]-R[1]C[1]"
DDBHARepSh.Cells(2, 10) = Summ
DDBHARepSh.Cells(1, 10) = "|fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd| , |fffd|"
DDBHARepSh.Cells(1, 16) = "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| , |fffd|"
DDBHARepSh.Cells(1, 17) = "|fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd| , |fffd|"

' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| 3-|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| DDSetup, |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (4-|fffd||fffd|)
For i = 1 To 19
TWb.Sheets("DDBHARep").Columns(i).ColumnWidth = TWb.Sheets("DDSetup").Cells(i, 3)
If i <> 1 Then DDBHARepSh.Columns(i).Hidden = Not (TWb.Sheets("DDSetup").Cells(i, 4))
Next i
LstRow = SensInsert(LstRow, DDBHARepSh) + 11 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
DDBHAHeader DDBHARepSh ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
AddShapeWithMacroatSh DDBHARepSh, "SaveDDBHARus", "Save BHA Rus", 450, 65, 300, 60
DDBHARepSh.Cells(LstRow, 1) = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
DDBHARepSh.Rows(LstRow).RowHeight = 40
DDBHARepSh.Rows(LstRow).Font.Size = 14
DDBHARepSh.Range("A" & LstRow & ":S" & LstRow).Font.Bold = True
DDBHARepSh.Range("A" & LstRow & ":S" & LstRow).HorizontalAlignment = xlLeft
DDBHARepSh.Range("A" & LstRow & ":S" & LstRow).MergeCells = True
LstRow = LstRow + 3
DDBHARepSh.Cells(LstRow, 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|:  ________________________________ |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|  ""|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|"""
DDBHARepSh.Rows(LstRow).RowHeight = 20
DDBHARepSh.Rows(LstRow).Font.Size = 14
DDBHARepSh.Range("A" & LstRow & ":S" & LstRow).Font.Bold = True
DDBHARepSh.Range("A" & LstRow & ":S" & LstRow).HorizontalAlignment = xlLeft
DDBHARepSh.Range("A" & LstRow & ":S" & LstRow).MergeCells = True
DDBHARepSh.Columns(1).Insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
DDBHARepSh.PageSetup.PrintArea = "$A$1:$V$" & LstRow + 20
DDBHARepSh.PageSetup.Zoom = 30
Set TWb = Nothing
Set DDBHARepSh = Nothing
Application.Calculation = xlAutomatic
End Sub
Function DDBHAComponentImport(BHAR_IDENTIFIER As String)
Dim WhtSt As String
Dim FromSt As String
Dim WhereSt As String
Dim Rqst As String
WhtSt = "BHAC_SEQUENCE_POSITION, BHTC_NAME, BHA_COMPONENT.BHAC_NAME, BHAC_MANUF, BHAC_SERIAL_NUM, BHAC_GAUGE_OD, BHAC_OD, BHAC_ID, BHAC_ACTUAL_LENGTH,BHAC_TOP_CONNECTION_THREAD, BHAC_BOT_CONNECTION_THREAD, REF_TOOL_CLASS.BHTC_GRAPHIC_FILENAME, BHAC_IDENTIFIER, BHAC_WEIGHT_PER_LENGTH, BHAC_YIELD_STRENGTH, BHA_COMPONENT.BHAC_DESCRIPTION"
FromSt = "REF_TOOL_CLASS, BHA_COMPONENT"
WhereSt = "REF_TOOL_CLASS.BHTC_IDENTIFIER = BHA_COMPONENT.BHTC_IDENTIFIER AND BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' ORDER BY BHAC_SEQUENCE_POSITION DESC"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
RunInfoGetOneShWhithCommand "DDBHARep", Rqst
'DDBITRep
WhtSt = "DBIT.DBIT_IADC_NO, DBIT.BHAC_IDENTIFIER, DBIT.DBIT_TFA , BIT_JETS.BIJE_NUMBER, BIT_JETS.BIJE_DIAM, BIT_JETS.BIJE_SET_NUMBER, BIT_JETS.BIJE_IDENTIFIER, DBIT_IADC_NO, DBIT_GAUGE_LEN, DBIT_DISCHARGE_COEFF"
FromSt = "DBIT, BHA_COMPONENT, BIT_JETS"
WhereSt = "BIT_JETS.BHAC_IDENTIFIER=BHA_COMPONENT.BHAC_IDENTIFIER AND DBIT.BHAC_IDENTIFIER=BHA_COMPONENT.BHAC_IDENTIFIER AND BIJE_SET_NUMBER<>'2' AND BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "'ORDER BY  BIT_JETS.BIJE_NUMBER"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
RunInfoGetOneShWhithCommand "DDBITRep", Rqst
'MotorRep
WhtSt = "MOTOR.*"
FromSt = "MOTOR, BHA_COMPONENT"
WhereSt = "MOTOR.BHAC_IDENTIFIER=BHA_COMPONENT.BHAC_IDENTIFIER AND BHA_COMPONENT.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "'"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
RunInfoGetOneShWhithCommand "DDMotoRep", Rqst
' Bends
WhtSt = "BENDS.*"
FromSt = "BENDS, BHA_COMPONENT"
WhereSt = "BHA_COMPONENT.BHAC_IDENTIFIER=BENDS.BHAC_IDENTIFIER AND BHA_COMPONENT.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "'"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
RunInfoGetOneShWhithCommand "DDBendsRep", Rqst
' Pipe
WhtSt = "DRILLPIPE.*"
FromSt = "DRILLPIPE, BHA_COMPONENT"
WhereSt = "BHA_COMPONENT.BHAC_IDENTIFIER=DRILLPIPE.BHAC_IDENTIFIER AND BHA_COMPONENT.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "'"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
RunInfoGetOneShWhithCommand "DDPipe", Rqst
' For DDBHAHeader
WhtSt = "WELLBORE.WLBR_NAME, FACILITY_TAB.FCTY_NAME, OBJECT_OF_INTEREST_TAB.OOIN_NAME, COMPANY_NAME.CPNM_NAME"
FromSt = "BHA_RUN, WELLBORE, PROGRAM_TAB, FACILITY_TAB, OBJECT_OF_INTEREST_TAB, OBJECT_TO_FACILITY, COMPANY_NAME"                '"WELLBORE, WELL_TAB, FACILITY_TAB, COMPANY_NAME"
WhereSt = "COMPANY_NAME.CPNM_IDENTIFIER=PROGRAM_TAB.CPNM_IDENTIFIER AND OBJECT_TO_FACILITY.FCTY_IDENTIFIER=FACILITY_TAB.FCTY_IDENTIFIER AND OBJECT_OF_INTEREST_TAB.OOIN_IDENTIFIER=OBJECT_TO_FACILITY.OOIN_IDENTIFIER AND PROGRAM_TAB.FCTY_IDENTIFIER=FACILITY_TAB.FCTY_IDENTIFIER AND PROGRAM_TAB.PROG_IDENTIFIER=BHA_RUN.PROG_IDENTIFIER AND BHA_RUN.WLBR_IDENTIFIER=WELLBORE.WLBR_IDENTIFIER And BHA_RUN.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "'"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
RunInfoGetOneShWhithCommand "DDBHAHeader", Rqst
' For Sensors
WhtSt = "BHA_COMPONENT.BHAC_SEQUENCE_POSITION, REF_TOOL_CLASS.BHTC_NAME,  REF_SENSOR_TYPE.REST_TYPE,  BHA_COMPONENT_SENSORS.BHCS_OFFSET_FROM_BTM_COMP, BHA_COMPONENT_SENSORS.BHCS_OFFSET_FROM_BTM_BIT"
FromSt = "BHA_COMPONENT, REF_TOOL_CLASS, BHA_COMPONENT_SENSORS, REF_SENSOR_TYPE"
WhereSt = "REF_SENSOR_TYPE.REST_IDENTIFIER=BHA_COMPONENT_SENSORS.REST_IDENTIFIER  AND BHA_COMPONENT_SENSORS.BHAC_IDENTIFIER=BHA_COMPONENT.BHAC_IDENTIFIER AND REF_TOOL_CLASS.BHTC_IDENTIFIER = BHA_COMPONENT.BHTC_IDENTIFIER AND BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' ORDER BY BHAC_SEQUENCE_POSITION DESC"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
RunInfoGetOneShWhithCommand "DDBHASens", Rqst
End Function
Sub Translate_BHTC_NAME(Sh As Worksheet, ClmnIndex As Integer) 'Translat BHTC_NAME to RUS
' Sh - WorkSheet with BHTC_NAME column and ClmnIndex - Column number (with BHTC_NAME)
Dim Wb As Workbook: Set Wb = Sh.Parent
Dim Col As Collection
Dim i As Integer
If Not ShIsExist(Sh.Name, Wb) Then Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| "BHARep" |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SheetIsExist
If Not ShIsExist("RusCat", Wb) Then Exit Sub '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| "BHARep" |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
RowNmb = 0
Set CatSh = Wb.Sheets("RusCat") '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| BHA,
' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Set Coll = New Collection
i = 1
Do While CatSh.Cells(i, 3) <> ""
    Coll.Add CatSh.Cells(i, 3)
i = i + 1
Loop
i = 2
Do While Sh.Cells(i, ClmnIndex) <> ""
    ClsValue = Sh.Cells(i, ClmnIndex)
    j = 1
    For Each Itm In Coll
        If Itm = ClsValue And CatSh.Cells(j, 4) <> "" Then
            Sh.Cells(i, ClmnIndex) = CatSh.Cells(j, 4)
            Exit For
        End If
    j = j + 1
    Next Itm
i = i + 1
Loop
Set Col = Nothing
End Sub
Sub UserFormForDDTLAShow()
UserFormForDDTLA.Show
End Sub
Function SensInsert(ByVal LstRow As Integer, ByRef WSh As Worksheet) As Integer
Dim TWb As Workbook: Set TWb = ThisWorkbook

Dim i As Integer
LstRow = LstRow + 3
'|fffd||fffd||fffd||fffd||fffd|
SensInsert = LstRow
If Not ShIsExist("Translate", TWb) Then Exit Function '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| "Translate" |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SheetIsExist
If Not ShIsExist("DDBHASens", TWb) Then Exit Function '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| "DDBHASens" |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SheetIsExist
WSh.Cells(LstRow, 1) = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|. |fffd||fffd||fffd|"
WSh.Cells(LstRow, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd|"
WSh.Cells(LstRow, 3) = "|fffd||fffd||fffd||fffd|. |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd|"
WSh.Cells(LstRow, 4) = "|fffd||fffd||fffd||fffd|. |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd|"
WSh.Rows(LstRow).RowHeight = 60
WSh.Cells.WrapText = True
FrmtBorders WSh.Range("A" & LstRow & ":D" & LstRow)

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Dim TrlSh As Worksheet: Set TrlSh = TWb.Sheets("Translate")
Dim DDBHASens As Worksheet: Set DDBHASens = TWb.Sheets("DDBHASens")

LstRow = LstRow + 1
i = 2
Do While DDBHASens.Cells(i, 1) <> "" And i < 100
    WSh.Cells(LstRow, 1) = DDBHASens.Cells(i, 1)
    WSh.Cells(LstRow, 2) = TrlSens(DDBHASens.Cells(i, 3))
    WSh.Cells(LstRow, 3) = DDBHASens.Cells(i, 4)
    WSh.Cells(LstRow, 4) = DDBHASens.Cells(i, 5)
    LstRow = LstRow + 1
i = i + 1
Loop
SensInsert = LstRow
FrmtBorders WSh.Range("A" & LstRow - i + 2 & ":D" & LstRow - 1)
End Function
Sub DDBHAHeader(ByRef WSh As Worksheet)
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim i As Integer
WSh.Rows("1:10").Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
FrmtBorders WSh.Range("B5:D9")
For i = 5 To 9
WSh.Range("C" & i & ":D" & i).Merge
Next i
WSh.Cells(5, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:"
WSh.Cells(6, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:"
WSh.Cells(7, 2) = "|fffd||fffd||fffd||fffd|:"
WSh.Cells(8, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:"
WSh.Cells(9, 2) = "|fffd||fffd||fffd||fffd| |fffd|"
WSh.Range("B5:C9").HorizontalAlignment = xlLeft
With WSh.Range("B2:M2")
    .Merge
    .Font.Name = "Calibri"
    .Font.Size = 14
    .Font.Bold = True
End With
WSh.Range("B2:M2") = "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & TWb.Sheets("DDSetup").Cells(2, 6)
If Not ShIsExist("DDBHAHeader", TWb) Then
    Exit Sub
End If
Dim BHAHeaderSh As Worksheet: Set BHAHeaderSh = TWb.Sheets("DDBHAHeader")
Dim opr As String
Dim fld As String
Dim pad As String
Dim well As String
well = BHAHeaderSh.Cells(2, 1)
pad = BHAHeaderSh.Cells(2, 2)
fld = BHAHeaderSh.Cells(2, 3)
opr = BHAHeaderSh.Cells(2, 4)
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
WSh.Cells(5, 3) = Trlt2(opr, 7)
WSh.Cells(6, 3) = Trlt2(fld, 10)
WSh.Cells(7, 3) = Trlt2(pad, 13, True)
WSh.Cells(8, 3) = Trlt2(well, 16, True)
End Sub
Sub AddShapeWithMacroatSh(ByRef Sh As Worksheet, MacroName As String, BtmnName As String, x As Integer, y As Integer, Lns As Integer, Hght As Integer)
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SaveBHARus (|fffd||fffd||fffd||fffd||fffd||fffd| SaveBHA, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd| |fffd||fffd||fffd||fffd| "BHARep"
Dim Shp As Shape
Set Shp = Sh.Shapes.AddShape(msoShapeRoundedRectangle, x, y, Lns, Hght)
Shp.TextFrame2.TextRange.Characters.Text = BtmnName
Shp.TextFrame2.TextRange.Font.Size = 18
Shp.TextFrame2.VerticalAnchor = msoAnchorMiddle
Shp.TextFrame2.TextRange.ParagraphFormat.Alignment = msoAlignCenter
Shp.Placement = xlFreeFloating
Shp.OnAction = MacroName
Shp.Name = BtmnName
End Sub
Public Function ColFromDatabase(Command As String) As Collection
' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Dim Col As Collection
Set Col = New Collection
Dim sHostName As String ' Get Host Name / Get Computer Name
sHostName = Environ$("computername")

'ADO = activex data objects
'data <--> OLEDB Provider <--> ADO Data object
' You need a reference to ADO Libraray!!

Dim sSql As String
Dim sSqlCommand As String
Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction
Dim cmdObj As ADODB.Command 'declarate a command object
Dim MSQLVertion As String
Dim gf As Field
Dim i, j As Integer
Dim PrnStr As String
Dim TxtStr As String
Dim KeySt As String
Dim flag As Boolean
Dim Str As String
Dim sCon As String
'On Error Resume Next
sCon = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=True;Data Source=" & sHostName & "\ADVANTAGE" & WinVersion & ";Initial Catalog=advantage"
Set cn = New ADODB.Connection
cn.Open sCon
Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
rs.Open Command, cn, adOpenForwardOnly, adLockReadOnly, adCmdText
If rs.EOF Then
Else
    For i = 1 To rs.RecordCount
            j = 1
            For Each gf In rs.Fields
            
                     If IsNull(gf.Value) = False Then
                        If j <> 1 Then
                            Str = Col(i)
                            Col.Remove (i)
                            Col.Add Str & "-" & CStr(Replace(gf.Value, "-", "_"))
                        Else
                            Col.Add CStr(Replace(gf.Value, "-", "_"))
                        End If
                    Else
                        If j <> 1 Then
                            Str = Col(i)
                            Col.Remove (i)
                            Col.Add Str & "-" & " "
                        Else
                            Col.Add " "
                        End If
                    End If
               j = j + 1
            Next gf
        rs.MoveNext
    Next i
End If
cn.Close
Set ColFromDatabase = Col
Set Col = Nothing
Set cn = Nothing
Set rs = Nothing
End Function
Public Function Separator(Arg As String, SepCr As String, Ind As Integer) As String
If Arg = "" Then Exit Function
If SepCr = "" Then Exit Function
If Ind > Len(Arg) Then Exit Function
Dim i As Integer
Dim Chr As String
Dim IndCount As Integer
Chr = ""
IndCount = 0
For i = 1 To Len(Arg)
    Cr = mid(Arg, i, 1)
    If Cr = SepCr Then IndCount = IndCount + 1
If IndCount = Ind And Cr <> SepCr Then Separator = Separator & Cr
Next i
End Function
Sub AddShapeForDDBHARepSave()
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| SaveBHARus
Dim Shp As Shape
Set Shp = ThisWorkbook.Sheets("DDBHARep").Shapes.AddShape(msoShapeRoundedRectangle, 495, 18.75, 221.25, 60)
Shp.TextFrame2.TextRange.Characters.Text = "Save BHArus Report"
Shp.TextFrame2.TextRange.Font.Size = 18
Shp.TextFrame2.VerticalAnchor = msoAnchorMiddle
Shp.TextFrame2.TextRange.ParagraphFormat.Alignment = msoAlignCenter
Shp.Placement = xlFreeFloating
Shp.OnAction = "SaveDDBHARus"
Shp.Name = "SaveBtmn"
End Sub
Attribute VB_Name = "DEForm"
Attribute VB_Base = "0{71C2D881-84EB-4557-B37C-2D16FAFB5DA9}{BFCE9AD1-1479-4C51-8B0A-C70844D11361}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_Initialize()
Application.ScreenUpdating = False
Application.DisplayAlerts = False
If ThisWorkbook.Sheets("BHA Perf").Visible = -1 Then CheckBox1.Value = True
If ThisWorkbook.Sheets("RUN KPI").Visible = -1 Then CheckBox2.Value = True
If ThisWorkbook.Sheets("WPGPlan").Visible = -1 Then CheckBox3.Value = True
If ThisWorkbook.Sheets("WPGFact").Visible = -1 Then CheckBox4.Value = True
If ThisWorkbook.Sheets("Slidesheet").Visible = -1 Then CheckBox5.Value = True
If ThisWorkbook.Sheets("TLA").Visible = -1 Then CheckBox6.Value = True
If ThisWorkbook.Sheets("Hookload Chart ").Visible = -1 Then CheckBox7.Value = True
If ThisWorkbook.Sheets("Torque Chart").Visible = -1 Then CheckBox8.Value = True
If ThisWorkbook.Sheets("ECD Chart").Visible = -1 Then CheckBox9.Value = True
If ThisWorkbook.Sheets("DDBHARep").Visible = -1 Then CheckBox10.Value = True
If ThisWorkbook.Sheets("Plots").Visible = -1 Then CheckBox11.Value = True
If ThisWorkbook.Sheets("VP-HP").Visible = -1 Then CheckBox12.Value = True
If ThisWorkbook.Sheets("Photos").Visible = -1 Then CheckBox13.Value = True
End Sub

Private Sub CommandButton7_Click()
ThisWorkbook.Sheets("Tabls").Visible = CInt(-1)
Dim Sh As Worksheet
For Each Sh In ThisWorkbook.Sheets
    If Sh.Name <> "Tabls" Then Sh.Visible = CInt(0)
Next Sh
If CheckBox1.Value Then ThisWorkbook.Sheets("BHA Perf").Visible = CInt(-1)
If CheckBox2.Value Then ThisWorkbook.Sheets("RUN KPI").Visible = CInt(-1)
If CheckBox3.Value Then ThisWorkbook.Sheets("WPGPlan").Visible = CInt(-1)
If CheckBox4.Value Then ThisWorkbook.Sheets("WPGFact").Visible = CInt(-1)
If CheckBox5.Value Then ThisWorkbook.Sheets("Slidesheet").Visible = CInt(-1)
If CheckBox6.Value Then ThisWorkbook.Sheets("TLA").Visible = CInt(-1)
If CheckBox7.Value Then ThisWorkbook.Sheets("Hookload Chart ").Visible = CInt(-1)
If CheckBox8.Value Then ThisWorkbook.Sheets("Torque Chart").Visible = CInt(-1)
If CheckBox9.Value Then ThisWorkbook.Sheets("ECD Chart").Visible = CInt(-1)
If CheckBox10.Value Then ThisWorkbook.Sheets("DDBHARep").Visible = CInt(-1)
If CheckBox11.Value Then ThisWorkbook.Sheets("Plots").Visible = CInt(-1)
If CheckBox12.Value Then ThisWorkbook.Sheets("VP-HP").Visible = CInt(-1)
If CheckBox13.Value Then ThisWorkbook.Sheets("Photos").Visible = CInt(-1)


If Not CheckBox1.Value Then ThisWorkbook.Sheets("BHA Perf").Visible = CInt(0)
If Not CheckBox2.Value Then ThisWorkbook.Sheets("RUN KPI").Visible = CInt(0)
If Not CheckBox3.Value Then ThisWorkbook.Sheets("WPGPlan").Visible = CInt(0)
If Not CheckBox4.Value Then ThisWorkbook.Sheets("WPGFact").Visible = CInt(0)
If Not CheckBox5.Value Then ThisWorkbook.Sheets("Slidesheet").Visible = CInt(0)
If Not CheckBox6.Value Then ThisWorkbook.Sheets("TLA").Visible = CInt(0)
If Not CheckBox7.Value Then ThisWorkbook.Sheets("Hookload Chart ").Visible = CInt(0)
If Not CheckBox8.Value Then ThisWorkbook.Sheets("Torque Chart").Visible = CInt(0)
If Not CheckBox9.Value Then ThisWorkbook.Sheets("ECD Chart").Visible = CInt(0)
If Not CheckBox10.Value Then ThisWorkbook.Sheets("DDBHARep").Visible = CInt(0)
If Not CheckBox11.Value Then ThisWorkbook.Sheets("Plots").Visible = CInt(0)
If Not CheckBox12.Value Then ThisWorkbook.Sheets("VP-HP").Visible = CInt(0)
If Not CheckBox13.Value Then ThisWorkbook.Sheets("Photos").Visible = CInt(0)

Application.ScreenUpdating = True
Application.DisplayAlerts = True
Unload Me
End Sub
Private Sub CommandButton1_Click()
CheckBox1.Value = True
CheckBox2.Value = True
CheckBox3.Value = True
CheckBox4.Value = True
CheckBox5.Value = True
End Sub
Private Sub CommandButton2_Click()
CheckBox1.Value = False
CheckBox2.Value = False
CheckBox3.Value = False
CheckBox4.Value = False
CheckBox5.Value = False
End Sub
Private Sub CommandButton4_Click()
CheckBox6.Value = True
CheckBox7.Value = True
CheckBox8.Value = True
CheckBox9.Value = True
End Sub
Private Sub CommandButton3_Click()
CheckBox6.Value = False
CheckBox7.Value = False
CheckBox8.Value = False
CheckBox9.Value = False
End Sub
Private Sub CommandButton6_Click()
CheckBox10.Value = True
CheckBox11.Value = True
CheckBox12.Value = True
CheckBox13.Value = True
End Sub
Private Sub CommandButton5_Click()
CheckBox10.Value = False
CheckBox11.Value = False
CheckBox12.Value = False
CheckBox13.Value = False
End Sub

Private Sub UserForm_Terminate()
CommandButton7_Click
End Sub
Private Sub CommandButton8_Click()
CheckBox1.Value = True
CheckBox2.Value = True
CheckBox3.Value = True
CheckBox4.Value = True
CheckBox5.Value = True
CheckBox6.Value = True
CheckBox7.Value = True
CheckBox8.Value = True
CheckBox9.Value = True
CheckBox10.Value = True
CheckBox11.Value = True
CheckBox12.Value = True
CheckBox13.Value = True
End Sub
Private Sub CommandButton9_Click()
CheckBox1.Value = False
CheckBox2.Value = False
CheckBox3.Value = False
CheckBox4.Value = False
CheckBox5.Value = False
CheckBox6.Value = False
CheckBox7.Value = False
CheckBox8.Value = False
CheckBox9.Value = False
CheckBox10.Value = False
CheckBox11.Value = False
CheckBox12.Value = False
CheckBox13.Value = False
End Sub
Attribute VB_Name = "ExportFromDDADV"
Sub ExportFromDDADVAll()
Application.ScreenUpdating = False
Application.DisplayAlerts = False
Dim WhtSt As String
Dim FromSt As String
Dim WhereSt As String
Dim Rqst As String
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim Col As Collection: Set Col = New Collection
Dim i As Integer
Dim Wb As Workbook: Set Wb = Workbooks.Add
Dim Dt As String: Dt = CStr(Format(Date, "dd.mm.yyyy")) & " " & TimeFormatChange(CStr(Time))

Col.Add "BHA_RUN"                   '1
Col.Add "BHA_DRILLING_PARAMETERS"   '2
Col.Add "BHA_COMPONENT"             '3
Col.Add "BHA_COMPONENT_SENSORS"     '4
Col.Add "DBIT"                      '5
Col.Add "BIT_JETS"                  '6
Col.Add "MOTOR"                     '7
Col.Add "BENDS"                     '8
Col.Add "DRILLPIPE"                 '9
Col.Add "WELLBORE"                  '10
Col.Add "PROGRAM_TAB"               '11
Col.Add "FACILITY_TAB"              '12
Col.Add "OBJECT_OF_INTEREST_TAB"    '13
Col.Add "OBJECT_TO_FACILITY"        '14
Col.Add "COMPANY_NAME"              '15
Col.Add "REF_TOOL_CLASS"            '16
Col.Add "REF_SENSOR_TYPE"           '17
Col.Add "CAT_DP_OPERATING_MODE"     '18
Col.Add "SURVEY_STATION"            '19
Col.Add "SURVEY_SECTION"            '20
Col.Add "SurveyStationsDeleted"     '21
Col.Add "PATH_TO_WELLBORE"          '22
Col.Add "BIT_CONDITION"             '23
Col.Add "STABILIZER"                '24
Col.Add "INTEQ_CREW"                '25
Col.Add "DAILY_WELL_STATUS"         '26
Col.Add "DAILY_SCREEN_STATUS"       '27
Col.Add "DAILY_RUN_STATUS"          '28
Col.Add "DAILY_REPORT"              '29
Col.Add "DAILY_PUMP_STATUS"         '30
Col.Add "DAILY_MUD_REPORT"          '31
Col.Add "DAILY_COMMENT"             '32
Col.Add "DAILY_CASING_LINER"        '33
Col.Add "WELL_TAB"                  '34

If Col.Count > 0 Then
    For i = 1 To Col.Count
        WhtSt = CStr(Col(i)) & ".*"
        FromSt = CStr(Col(i))
        Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt)
        RunInfoGetOneShWhithCommandtoWb CStr(Col(i)), Rqst, Wb
    Next i
End If

Wb.SaveAs FileName:=ThisWorkbook.Path & "\ADVEngExportFile (" & Dt & ").advexp", FileFormat:=51
Wb.Close
MsgBox "All data was saved in: " & ThisWorkbook.Path & "\ADVEngExportFile (" & Dt & ").advexp"

End Sub

Function TimeFormatChange(Tm As String)
If Tm = "" Then Exit Function
Dim Cr As String
Dim i As Integer
For i = 1 To Len(Tm)
    Cr = mid(Tm, i, 1)
    If Cr = ":" Then
       TimeFormatChange = TimeFormatChange & "-"
    Else
        TimeFormatChange = TimeFormatChange & Cr
    End If
Next i
End Function

Attribute VB_Name = "For_BHA_Perf"
Sub BHA_Perf_Udate(BHAR_IDENTIFIER As String, DLRP_END_DATE As String)

Dim WhtSt As String
Dim FromSt As String
Dim WhereSt As String
Dim Rqst As String
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim BHAPerfSh As Worksheet
Dim MPRReport As Worksheet
Dim Sh As Worksheet
Dim i As Integer
Dim j As Integer
Dim Pi As Double: Pi = 3.1415926
Dim ROPCons As Double: ROPCons = 3600
Dim WhtCons As Double: WhtCons = 0.000101971621
Dim RUNKPISh As Worksheet
Dim ArrDDs()
Dim DDBHAHeader()
Dim BHARun()
Dim BitCondArr()
Dim Nozzels()
Dim MotorArr()
Dim UBHSArr()
Dim BENDSArr()
Dim JobNumber()

If Not ShIsExist("BHA Perf", TWb) Then
    MsgBox "No BHA Perf sheet in this Excel Workbook, contact to Wellplanner please!"
    Exit Sub
Else
    Set BHAPerfSh = TWb.Sheets("BHA Perf")
End If



' For DDBHAHeader
WhtSt = "WELLBORE.WLBR_NAME, FACILITY_TAB.FCTY_NAME, OBJECT_OF_INTEREST_TAB.OOIN_NAME, COMPANY_NAME.CPNM_NAME"
FromSt = "BHA_RUN, WELLBORE, PROGRAM_TAB, FACILITY_TAB, OBJECT_OF_INTEREST_TAB, OBJECT_TO_FACILITY, COMPANY_NAME"                '"WELLBORE, WELL_TAB, FACILITY_TAB, COMPANY_NAME"
WhereSt = "COMPANY_NAME.CPNM_IDENTIFIER=PROGRAM_TAB.CPNM_IDENTIFIER AND OBJECT_TO_FACILITY.FCTY_IDENTIFIER=FACILITY_TAB.FCTY_IDENTIFIER AND OBJECT_OF_INTEREST_TAB.OOIN_IDENTIFIER=OBJECT_TO_FACILITY.OOIN_IDENTIFIER AND PROGRAM_TAB.FCTY_IDENTIFIER=FACILITY_TAB.FCTY_IDENTIFIER AND PROGRAM_TAB.PROG_IDENTIFIER=BHA_RUN.PROG_IDENTIFIER AND BHA_RUN.WLBR_IDENTIFIER=WELLBORE.WLBR_IDENTIFIER And BHA_RUN.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "'"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
DDBHAHeader = GetArrayWithCommand(Rqst)

If DDBHAHeader(0, 0) = "" Then
    MsgBox "No Data in ADV for BHA Perf Client and well data import, please check it manually!"
    Exit Sub
Else
        BHAPerfSh.Cells(3, 3) = DDBHAHeader(0, 3)
        BHAPerfSh.Cells(3, 8) = DDBHAHeader(0, 2)
        BHAPerfSh.Cells(3, 14) = DDBHAHeader(0, 1)
        BHAPerfSh.Cells(3, 17) = DDBHAHeader(0, 0)
End If

' For JobNumber
WhtSt = "a.PROG_NUMBER"
FromSt = "PROGRAM_TAB a, BHA_RUN b"
WhereSt = "a.PROG_IDENTIFIER=b.PROG_IDENTIFIER and b.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "'"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
JobNumber = GetArrayWithCommand(Rqst)
If Not IsEmpty(JobNumber(0, 0)) Then BHAPerfSh.Cells(2, 3) = JobNumber(0, 0)

'For personal
If DLRP_END_DATE <> "" Then
    WhtSt = "a.INCR_NAME, a.INCR_INITIALS, a.INCR_DAYSHIFTYN"
    FromSt = "INTEQ_CREW a, DAILY_REPORT b"
    WhereSt = "a.INTL_IDENTIFIER IN (13999999, 16999999, 17999999, 1999999, 4999999,5999999) and a.DLRP_IDENTIFIER = b.DLRP_IDENTIFIER and b.DLRP_END_DATE = '" & Left(DLRP_END_DATE, 10) & "'"
    Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
    ArrDDs = GetArrayWithCommand(Rqst)
End If

If ArrDDs(0, 0) <> "" Then
For i = 0 To UBound(ArrDDs, 1)
    If ArrDDs(i, 2) = "Y" Then BHAPerfSh.Cells(8, 4) = ArrDDs(i, 0) & " " & ArrDDs(i, 1) & "."
    If ArrDDs(i, 2) = "N" Then BHAPerfSh.Cells(9, 4) = ArrDDs(i, 0) & " " & ArrDDs(i, 1) & "."
Next i
End If

' For RUN data
WhtSt = "BHA_RUN.*"
FromSt = "BHA_RUN"                '"WELLBORE, WELL_TAB, FACILITY_TAB, COMPANY_NAME"
WhereSt = "BHA_RUN.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "'"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)

BHARun = GetArrayWithCommand(Rqst)

If BHARun(0, 0) <> "" Then

    If Not IsEmpty(BHARun(0, 14)) Then BHAPerfSh.Cells(9, 11) = BHARun(0, 14)
    If Not IsEmpty(BHARun(0, 16)) Then BHAPerfSh.Cells(10, 11) = BHARun(0, 16)
    If Not IsEmpty(BHARun(0, 13)) Then BHAPerfSh.Cells(9, 12) = BHARun(0, 13)
    If Not IsEmpty(BHARun(0, 15)) Then BHAPerfSh.Cells(10, 12) = BHARun(0, 15)
    If Not IsEmpty(BHARun(0, 28)) Then BHAPerfSh.Cells(9, 14) = BHARun(0, 28) * 360 / (2 * Pi)
    If Not IsEmpty(BHARun(0, 29)) Then BHAPerfSh.Cells(10, 14) = BHARun(0, 29) * 360 / (2 * Pi)
    If Not IsEmpty(BHARun(0, 26)) Then BHAPerfSh.Cells(9, 15) = BHARun(0, 26) * 360 / (2 * Pi)
    If Not IsEmpty(BHARun(0, 27)) Then BHAPerfSh.Cells(10, 15) = BHARun(0, 27) * 360 / (2 * Pi)
    If Not IsEmpty(BHARun(0, 20)) Then BHAPerfSh.Cells(9, 16) = BHARun(0, 20)
    If Not IsEmpty(BHARun(0, 21)) Then BHAPerfSh.Cells(10, 16) = BHARun(0, 21)
    If Not IsEmpty(BHARun(0, 44)) Then BHAPerfSh.Cells(4, 3) = BHARun(0, 44) * 1000
    If Not IsEmpty(BHARun(0, 11)) Then BHAPerfSh.Cells(5, 3) = BHARun(0, 11)
    If Not IsEmpty(BHARun(0, 40)) Then BHAPerfSh.Cells(48, 4) = BHARun(0, 40) / 1000
    If Not IsEmpty(BHARun(0, 30)) Then BHAPerfSh.Cells(49, 4) = BHARun(0, 30) * 1000
    If Not IsEmpty(BHARun(0, 31)) Then BHAPerfSh.Cells(47, 11) = BHARun(0, 31)
    'If Not IsEmpty(BHARun(0, 48)) And Not IsEmpty(BHARun(0, 49)) Then BHAPerfSh.Cells(49, 16) = BHARun(0, 31)
    If Not IsEmpty(BHARun(0, 93)) Then BHAPerfSh.Cells(48, 11) = BHARun(0, 93) * 100
    If Not IsEmpty(BHARun(0, 83)) Then BHAPerfSh.Cells(100, 1) = BHARun(0, 83)
    If Not IsEmpty(BHARun(0, 84)) Then BHAPerfSh.Cells(114, 1) = BHARun(0, 84)
    If Not IsEmpty(BHARun(0, 87)) Then BHAPerfSh.Cells(125, 1) = BHARun(0, 87)
    If Not IsEmpty(BHARun(0, 85)) Then BHAPerfSh.Cells(171, 1) = BHARun(0, 85)
End If

If ShIsExist("RUN KPI", TWb) Then
    Set RUNKPISh = TWb.Sheets("RUN KPI")
    For i = 0 To UBound(BHARun, 2)
        If Not IsEmpty(BHARun(0, i)) Then RUNKPISh.Cells(62, 25 + i) = BHARun(0, i)
    Next i
End If

'for BIT
WhtSt = "a.*, b.BHAC_SERIAL_NUM, c.*,b.BHAC_NAME"
FromSt = "BIT_CONDITION a, BHA_COMPONENT b, DBIT c"
WhereSt = "b.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' AND a.BHAC_IDENTIFIER = b.BHAC_IDENTIFIER AND a.BHAC_IDENTIFIER = c.BHAC_IDENTIFIER"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)

BitCondArr = GetArrayWithCommand(Rqst)

If BHARun(0, 0) <> "" Then

    If Not IsEmpty(BitCondArr(0, 1)) Then BHAPerfSh.Cells(31, 1) = BitCondArr(0, 1)
    If Not IsEmpty(BitCondArr(0, 2)) Then BHAPerfSh.Cells(31, 2) = BitCondArr(0, 2)
    If Not IsEmpty(BitCondArr(0, 3)) Then BHAPerfSh.Cells(31, 3) = BitCondArr(0, 3)
    If Not IsEmpty(BitCondArr(0, 4)) Then BHAPerfSh.Cells(31, 4) = BitCondArr(0, 4)
    If Not IsEmpty(BitCondArr(0, 5)) Then BHAPerfSh.Cells(31, 5) = BitCondArr(0, 5)
    If Not IsEmpty(BitCondArr(0, 6)) Then BHAPerfSh.Cells(31, 6) = BitCondArr(0, 6)
    If Not IsEmpty(BitCondArr(0, 7)) Then BHAPerfSh.Cells(31, 7) = BitCondArr(0, 7)
    If Not IsEmpty(BitCondArr(0, 8)) Then BHAPerfSh.Cells(31, 8) = BitCondArr(0, 8)
    
    If Not IsEmpty(BitCondArr(0, 10)) Then BHAPerfSh.Cells(30, 1) = BitCondArr(0, 10)
    If Not IsEmpty(BitCondArr(0, 11)) Then BHAPerfSh.Cells(30, 2) = BitCondArr(0, 11)
    If Not IsEmpty(BitCondArr(0, 12)) Then BHAPerfSh.Cells(30, 3) = BitCondArr(0, 12)
    If Not IsEmpty(BitCondArr(0, 13)) Then BHAPerfSh.Cells(30, 4) = BitCondArr(0, 13)
    If Not IsEmpty(BitCondArr(0, 14)) Then BHAPerfSh.Cells(30, 5) = BitCondArr(0, 14)
    If Not IsEmpty(BitCondArr(0, 15)) Then BHAPerfSh.Cells(30, 6) = BitCondArr(0, 15)
    If Not IsEmpty(BitCondArr(0, 16)) Then BHAPerfSh.Cells(30, 7) = BitCondArr(0, 16)
   
    If Not IsEmpty(BitCondArr(0, 17)) Then BHAPerfSh.Cells(35, 3) = BitCondArr(0, 17)
    If Not IsEmpty(BitCondArr(0, 46)) Then BHAPerfSh.Cells(36, 3) = BitCondArr(0, 46)
    If Not IsEmpty(BitCondArr(0, 26)) Then BHAPerfSh.Cells(34, 6) = BitCondArr(0, 26)
    If Not IsEmpty(BitCondArr(0, 19)) Then BHAPerfSh.Cells(35, 11) = BitCondArr(0, 19)
End If




'for Nozzels
WhtSt = "b.*"
FromSt = "BHA_COMPONENT a, BIT_JETS b"
WhereSt = "a.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' AND a.BHAC_IDENTIFIER = b.BHAC_IDENTIFIER AND b.BIJE_SET_NUMBER=1"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
Nozzels = GetArrayWithCommand(Rqst)
If Nozzels(0, 0) <> "" Then
    For i = 0 To UBound(Nozzels, 1)
    If i < 8 Then
       If Not IsEmpty(Nozzels(i, 5)) Then BHAPerfSh.Cells(34 + i, 12) = Nozzels(0, 5) * 1000 * 32 / 25.4
        If Not IsEmpty(Nozzels(i, 5)) Then BHAPerfSh.Cells(34 + i, 13) = Nozzels(0, 5) * 1000
    Else
       If Not IsEmpty(Nozzels(i, 5)) Then BHAPerfSh.Cells(34 + i - 9, 14) = Nozzels(0, 5) * 1000 * 32 / 25.4
       If Not IsEmpty(Nozzels(i, 5)) Then BHAPerfSh.Cells(34 + i - 9, 15) = Nozzels(0, 5) * 1000
    End If
    If i > 15 Then Exit For
    Next i
End If

'for Motor
WhtSt = "b.*, a.*"
FromSt = "BHA_COMPONENT a, MOTOR b"
WhereSt = "a.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' AND a.BHAC_IDENTIFIER = b.BHAC_IDENTIFIER"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
MotorArr = GetArrayWithCommand(Rqst)
'RunInfoGetOneShWhithCommand "Motors", Rqst
If MotorArr(0, 0) <> "" Then
    If Not IsEmpty(MotorArr(0, 83)) Then BHAPerfSh.Cells(13, 13) = MotorArr(0, 83)
    If Not IsEmpty(MotorArr(0, 34)) Then BHAPerfSh.Cells(17, 13) = MotorArr(0, 34) * 1000
    If Not IsEmpty(MotorArr(0, 35)) Then BHAPerfSh.Cells(18, 13) = MotorArr(0, 35) * 1000
    If Not IsEmpty(MotorArr(0, 49)) Then BHAPerfSh.Cells(20, 13) = MotorArr(0, 49)
    If Not IsEmpty(MotorArr(0, 33)) Then BHAPerfSh.Cells(22, 13) = MotorArr(0, 33) / 1000
End If

'for Motor Stab
WhtSt = "c.*"
FromSt = "BHA_COMPONENT a, MOTOR b, BHA_STAB_POINT c"
WhereSt = "a.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' AND a.BHAC_IDENTIFIER = b.BHAC_IDENTIFIER AND a.BHAC_IDENTIFIER = c.BHAC_IDENTIFIER"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
UBHSArr = GetArrayWithCommand(Rqst)
'RunInfoGetOneShWhithCommand "Stabs", Rqst
If UBHSArr(0, 0) <> "" Then
    If Not IsEmpty(UBHSArr(0, 13)) Then BHAPerfSh.Cells(15, 13) = UBHSArr(0, 13) * 1000
End If

'for Motor bend
WhtSt = "c.*"
FromSt = "BHA_COMPONENT a, MOTOR b, BENDS c"
WhereSt = "a.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' AND a.BHAC_IDENTIFIER = b.BHAC_IDENTIFIER AND a.BHAC_IDENTIFIER = c.BHAC_IDENTIFIER"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
BENDSArr = GetArrayWithCommand(Rqst)
RunInfoGetOneShWhithCommand "BENDSArr", Rqst
If BENDSArr(0, 0) <> "" Then
    If Not IsEmpty(BENDSArr(0, 2)) Then BHAPerfSh.Cells(16, 13) = BENDSArr(0, 2) * 360 / (2 * Pi)
End If

MsgBox "BHA Perf has been Updated!"

End Sub

Sub UserFormForBHAPerfShow()
Dim Sh As Worksheet: Set Sh = ThisWorkbook.Sheets("BHA Perf")
UserFormForDDTLA.Show
Sh.Visible = xlSheetVisible
Sh.Select
End Sub


Attribute VB_Name = "For_DDI"
Option Base 1
Function Tortuousity(LastTortuousity As Double, DLS As Double, DeltaMD As Double) As Double
Tortuousity = LastTortuousity + ((DLS / 30) * DeltaMD)
End Function
Function AHD(LastAHD As Double, DeltaNorth As Double, DeltaEast As Double) As Double
AHD = LastAHD + Sqr(DeltaNorth * DeltaNorth + DeltaEast * DeltaEast)
End Function
Function ERD(AHD As Double, TVD As Double) As Double
If TVD = 0 Then
    ERD = 0
    Exit Function
End If
ERD = AHD / TVD
End Function
Function DDI(MD As Double, TVD As Double, Tortuosity As Double, AHD As Double) As Double
If TVD = 0 Or MD = 0 Or Tortuosity = 0 Or AHD = 0 Then
    DDI = 0
    Exit Function
End If
DDI = Abs(Log(3.28083 * MD * Tortuosity * AHD / TVD) / Log(10))
End Function

Sub DDICalcForPlan()
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim i As Integer
Dim j As Integer
If Not ShIsExist("WPGPlan", TWb) Or Not ShIsExist("DDI", TWb) Then
    Exit Sub
End If
Dim WPGPlanSh As Worksheet: Set WPGPlanSh = TWb.Sheets("WPGPlan")
Dim DDISh As Worksheet: Set DDISh = TWb.Sheets("DDI")
DDISh.Range("A3:D10000").ClearContents
For i = 20 To WPGPlanSh.UsedRange.Rows.Count
    If WPGPlanSh.Cells(i, 1) = "MD" Then Exit For
Next i
If WPGPlanSh.Cells(i, 1) <> "MD" Then Exit Sub
i = i + 3
j = 3
Do While WPGPlanSh.Cells(i, 1) <> ""
DDISh.Cells(j, 1) = WPGPlanSh.Cells(i, 1)
DDISh.Cells(j, 2) = Tortuousity(DDISh.Cells(j - 1, 2), WPGPlanSh.Cells(i, 12), CDbl(WPGPlanSh.Cells(i, 1) - WPGPlanSh.Cells(i - 1, 1)))
DDISh.Cells(j, 3) = AHD(DDISh.Cells(j - 1, 3), WPGPlanSh.Cells(i, 6) - WPGPlanSh.Cells(i - 1, 6), WPGPlanSh.Cells(i, 7) - WPGPlanSh.Cells(i - 1, 7))
DDISh.Cells(j, 4) = DDI(WPGPlanSh.Cells(i, 1), WPGPlanSh.Cells(i, 4), DDISh.Cells(j, 2), DDISh.Cells(j, 3))
j = j + 1
i = i + 1
Loop
End Sub
Sub DDICalcForFact()
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim i As Integer
Dim j As Integer
If Not ShIsExist("WPGFact", TWb) Or Not ShIsExist("DDI", TWb) Then
    Exit Sub
End If
Dim WPGFactSh As Worksheet: Set WPGFactSh = TWb.Sheets("WPGFact")
Dim DDISh As Worksheet: Set DDISh = TWb.Sheets("DDI")
DDISh.Range("E3:H10000").ClearContents
For i = 20 To WPGFactSh.UsedRange.Rows.Count
    If WPGFactSh.Cells(i, 1) = "MD" Then Exit For
Next i
If WPGFactSh.Cells(i, 1) <> "MD" Then Exit Sub
i = i + 3
j = 3
Do While WPGFactSh.Cells(i, 1) <> ""
    DDISh.Cells(j, 5) = WPGFactSh.Cells(i, 1)
    DDISh.Cells(j, 6) = Tortuousity(DDISh.Cells(j - 1, 2), WPGFactSh.Cells(i, 12), CDbl(WPGFactSh.Cells(i, 1) - WPGFactSh.Cells(i - 1, 1)))
    DDISh.Cells(j, 7) = AHD(DDISh.Cells(j - 1, 3), WPGFactSh.Cells(i, 6) - WPGFactSh.Cells(i - 1, 6), WPGFactSh.Cells(i, 7) - WPGFactSh.Cells(i - 1, 7))
    DDISh.Cells(j, 8) = DDI(WPGFactSh.Cells(i, 1), WPGFactSh.Cells(i, 4), DDISh.Cells(j, 2), DDISh.Cells(j, 3))
    j = j + 1
    i = i + 1
Loop
End Sub

Function DDIFromArray(WGRArray As Variant) As Variant
Dim MDRow As Double
Dim i As Double
Dim j As Double
ReDim Arr(1 To UBound(WGRArray, 1), 1 To 4)
For i = 1 To UBound(WGRArray, 1) - 1
    If WGRArray(i, 1) = "MD" Then Exit For
Next i
If WGRArray(i, 1) <> "MD" Then
    Arr(1, 1) = "Error"
    DDIFromArray = Arr
    Exit Function
End If
MDRow = i
j = 2
    Arr(1, 1) = WGRArray(MDRow + 2, 1) 'MD
    Arr(1, 2) = 0                      'Tortuosity  -V
    Arr(1, 3) = 0                      'AHD         -W
    Arr(1, 4) = 0                      'DDI         -Y
For i = MDRow + 3 To UBound(WGRArray, 1)
    Arr(j, 1) = WGRArray(i, 1)
    If IsEmpty(WGRArray(i, 1)) Or WGRArray(i, 1) = "" Then Exit For
    Arr(j, 2) = Arr(j - 1, 2) + ((WGRArray(i, 12) / 10) * (WGRArray(i, 1) - WGRArray(i - 1, 1))) ' Tortuosity
    Arr(j, 3) = Arr(j - 1, 3) + Sqr((WGRArray(i, 6) - WGRArray(i - 1, 6)) ^ 2 + (WGRArray(i, 7) - WGRArray(i - 1, 7)) ^ 2) ' AHD
    'wsWGR.Range("X" & i).Value = wsWGR.Range("W" & i).Value / wsWGR.Range("D" & i).Value         ' ERD Ratio
    If Arr(j, 3) = 0 Or Arr(j, 2) = 0 Or WGRArray(i, 4) = 0 Then
        Arr(j, 4) = 0
    Else
        Arr(j, 4) = Log10((3.28083 * WGRArray(i, 1) * Arr(j, 3) * Arr(j, 2)) / WGRArray(i, 4))
    End If
    j = j + 1
Next i
DDIFromArray = Arr
End Function
Sub DDIFact2()
Dim TWb As Workbook: Set TWb = ThisWorkbook
If Not ShIsExist("WPGPlan", TWb) Or Not ShIsExist("DDI", TWb) Then
    Exit Sub
End If
Dim WGRArray()
Dim DDIArr()
Dim WPGFact As Worksheet: Set WPGFact = ThisWorkbook.Sheets("WPGFact")
Dim DDI As Worksheet: Set DDI = ThisWorkbook.Sheets("DDI")
DDI.Range("E3:H10000").ClearContents
On Error Resume Next
WGRArray = WPGFact.UsedRange.Value
If Err <> 0 Then
Err.Clear
    MsgBox "Import WGR fact please!"
    Exit Sub
End If
DDIArr = DDIFromArray(WGRArray)
If DDIArr(1, 1) = "Error" Then
    MsgBox "Import WGR fact please!"
    Exit Sub
Else
    DDI.Range("E3:H" & UBound(DDIArr, 1) + 2) = DDIArr
End If
End Sub

Sub DDIPlan2()
Dim TWb As Workbook: Set TWb = ThisWorkbook
If Not ShIsExist("WPGPlan", TWb) Or Not ShIsExist("DDI", TWb) Then
    Exit Sub
End If
Dim WGRArray()
Dim DDIArr()
Dim WPGPlan As Worksheet: Set WPGPlan = ThisWorkbook.Sheets("WPGPlan")
Dim DDI As Worksheet: Set DDI = ThisWorkbook.Sheets("DDI")
DDI.Range("A3:D10000").ClearContents
WGRArray = WPGPlan.UsedRange.Value
DDIArr = DDIFromArray(WGRArray)
If DDIArr(1, 1) = "Error" Then
    MsgBox "Import WGR plan please!"
    Exit Sub
Else
    DDI.Range("A3:D" & UBound(DDIArr, 1) + 2) = DDIArr
End If
End Sub

Attribute VB_Name = "For_DE"
Sub DE_Form_Show()
Attribute DE_Form_Show.VB_Description = "For DE Form Show"
Attribute DE_Form_Show.VB_ProcData.VB_Invoke_Func = "q\n14"
    DEForm.Show
End Sub
Attribute VB_Name = "For_DeptTime"
Sub ImportDepthTime(StartTime As String, EndTime As String)
Dim StrCon As String
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'Dim sHostName As String
'sHostName = Environ$("computername")
'StrCon = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=True;Data Source=" & sHostName & "\ADVANTAGE" & WinVersion & ";Initial Catalog=advantage"
StrCon = StrComCheck()
If StrCon = "" Then Exit Sub

GetDataFromGenGenTimeWithTime StartTime, EndTime, StrCon

TimeBalance

ECDDataFromGenMDPPressWithTime StartTime, EndTime, StrCon


End Sub

Sub ImportECD(StartTime As String, EndTime As String)
Dim StrCon As String
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'Dim sHostName As String
'sHostName = Environ$("computername")

'StrCon = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=True;Data Source=" & sHostName & "\ADVANTAGE" & WinVersion & ";Initial Catalog=advantage"
StrCon = StrComCheck()

If StrCon = "" Then Exit Sub

ECDDataFromGenMDPPressWithTime StartTime, EndTime, StrCon
FlowDataFromRAW_MWD_GENERICWithTime StartTime, EndTime, StrCon
RPMGTIDataFromGenGenTimeWithTime StartTime, EndTime, StrCon
HKLDwRotDataFromGenGenTimeWithTime StartTime, EndTime, StrCon
HKLDwoRotDataFromGenGenTimeWithTime StartTime, EndTime, StrCon
TFOwoRotDataFromGenDataIndexGenRawDirMWD_TIMEMWD_RUN_TO_COMPONENTMWD_DIRECTIONALWithTime StartTime, EndTime, StrCon
DasIncRotatDataFromGenDataIndexGenDirRotatWithTime StartTime, EndTime, StrCon
DasIncNRotaDataFromGenDataIndexGenDirNRotaWithTime StartTime, EndTime, StrCon
NearBitRotaNaviGammaDataFromGenSRIGNBDGenDataIndexWithTime StartTime, EndTime, StrCon
WobRopDataFromGenGenTimeWithTime StartTime, EndTime, StrCon
WbGenAuto StartTime, EndTime, StrCon

End Sub
Function StrComCheck() As String
On Error Resume Next:
' You need a reference to ADO Libraray!!
Dim sCon As String
Dim cn As ADODB.Connection 'declare connaction
Set cn = New ADODB.Connection
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| W7
sCon = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=True;User ID=adv;Initial Catalog=advantage;Data Source= ADVMWD2\ADVANTAGE2012"
cn.Open sCon
If Err = 0 Then
    StrComCheck = sCon
    cn.Close
    Set cn = Nothing
    Exit Function
End If

Err = 0
sCon = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=True; User ID=adv;Initial Catalog=advantage;Data Source=ADVMWD1\ADVANTAGE2012"
cn.Open sCon
If Err = 0 Then
    StrComCheck = sCon
    cn.Close
    Set cn = Nothing
    Exit Function
End If


' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XP
Err = 0
sCon = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=True; User ID=adv;Initial Catalog=advantage;Data Source=ADVMWD2\advantage2005"
cn.Open sCon
If Err = 0 Then
    StrComCheck = sCon
    cn.Close
    Set cn = Nothing
    Exit Function
End If


Err = 0
sCon = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=True; User ID=adv;Initial Catalog=advantage;Data Source=ADVMWD1\advantage2005"
cn.Open sCon
If Err = 0 Then
    StrComCheck = sCon
    cn.Close
    Set cn = Nothing
    Exit Function
End If
MsgBox "Connection is not exist!"
StrComCheck = ""
Set cn = Nothing
End Function


Function RigActivity(Cd As Integer) As String
Select Case Cd
Case 0
    RigActivity = " No monitor"
Case 110
    RigActivity = " No monitor"
Case 100
    RigActivity = " No monitor"
Case 4
    RigActivity = " In Slips"
Case 6
    RigActivity = " Tripping In (devil)"
Case 116
    RigActivity = " Tripping In w rotation w circ"
Case 106
    RigActivity = " Tripping In w rotation wo circ"
Case 16
    RigActivity = " Tripping In wo rotation w circ"
Case 7
    RigActivity = " Tripping Out"
Case 14
    RigActivity = " Circulation (in slips)"
Case 12
    RigActivity = " Rimming wo rotation"
Case 3
    RigActivity = " Off Bottom"
Case 13
    RigActivity = " Off Bottom (rotation w circ wo rotating)"
Case 103
    RigActivity = " Off Bottom (rotation wo circ w rotating)"
Case 112
    RigActivity = "  rotating, circulating, reaming "
Case 104
    RigActivity = " In Slips wo cirk w rotation"

Case 111
    RigActivity = " Drilling rotation"
Case 5
    RigActivity = " Connection"
Case 11
    RigActivity = " Drilling slide"
Case 114
    RigActivity = " InSlips Circ Rot"
Case 105
    RigActivity = " Rimming w rotation wo circ"
Case 113
    RigActivity = " Off Bottom w rot and w circ"
Case 117
    RigActivity = " Back Rimming w rotation"
Case 107
    RigActivity = " Back Rimming w rotation wo circ"
Case 17
    RigActivity = " Back Rimming wo rotation w circ"
Case Else
    RigActivity = CStr(Cd)
End Select
End Function
Sub GetDataFromGenGenTimeWithTime(StartTime As String, EndTime As String, sCon As String)
Dim Wht As String
Dim Frm As String
Dim Wher As String
Dim Command As String
Wht = "c.Time, c.Depth, c.RigActivityCode, d.BITDEP, b.RunNo"
Frm = "GenDataSet b, GenDataIndex c, GenGenTime d"
Wher = "b.id = c.GenDataSetId AND c.EditFlag>-1 AND c.id = d.GenDataIndexId and (c.Time BETWEEN '" & StartTime & "' AND '" & EndTime & "' ) ORDER BY c.Time"
Command = "SELECT " & Wht & " FROM " & Frm & " WHERE " & Wher
ThisWorkbook.Sheets("GenGenTime").Range("A1:G20000").ClearContents
GetOneShWhithCommandtoWbDepthTime "GenGenTime", Command, ThisWorkbook, sCon
End Sub

Sub GetOneShWhithCommandtoWbDepthTime(TabName As String, Command As String, Wb As Workbook, sCon As String) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If sCon = "" Then Exit Sub
Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction
Dim sSql As String
Dim gf As Field
Dim Sh As Worksheet
Dim Lst As Collection
Dim i As Double
Dim j As Double
Dim k As Double
Dim RgActCode As Integer
sSql = TabName

Set cn = New ADODB.Connection
cn.Open sCon
Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
'MsgBox Command
rs.Open Command, cn, adOpenForwardOnly, adLockReadOnly, adCmdText
If rs.EOF Then
    MsgBox "There is not DATA for this time interval!"
Else
    Dim MyArray()
    MyArray = rs.GetRows()
    MyArray = TransposeArray(MyArray)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    j = 0
    RgActCode = MyArray(0, 2)
    For i = 1 To UBound(MyArray, 1)
        If MyArray(i, 2) <> RgActCode Then
            j = j + 1
            RgActCode = MyArray(i, 2)
        End If
    Next i
    MsgBox CStr(i) & "to" & CStr(j)
    ReDim TempArray(LBound(MyArray, 1) To j, LBound(MyArray, 2) To UBound(MyArray, 2))
    For k = LBound(MyArray, 2) To UBound(MyArray, 2)
        If k = 2 Then
            TempArray(0, k) = RigActivity(CStr(MyArray(0, k)))
        Else
            TempArray(0, k) = MyArray(0, k)
        End If
    Next k
    j = LBound(MyArray, 1) + 1
    RgActCode = MyArray(0, 2)
    For i = LBound(MyArray, 1) + 1 To UBound(MyArray, 1)
        If MyArray(i, 2) <> RgActCode Then
            For k = LBound(MyArray, 2) To UBound(MyArray, 2)
                If k = 2 Then
                    TempArray(j, k) = RigActivity(CStr(MyArray(i, k)))
                Else
                    TempArray(j, k) = MyArray(i, k)
                End If
            Next k
            j = j + 1
            RgActCode = MyArray(i, 2)
        End If
    Next i
    ReDim MyArray1(LBound(TempArray, 1) To UBound(TempArray, 1) - 1, LBound(TempArray, 2) To UBound(TempArray, 2) + 2)
    For i = LBound(TempArray, 1) To UBound(TempArray, 1) - 1
        MyArray1(i, 0) = TempArray(i, 0)
        MyArray1(i, 1) = TempArray(i + 1, 0)
        MyArray1(i, 2) = TempArray(i + 1, 0) - TempArray(i, 0)
        MyArray1(i, 3) = TempArray(i, 1)
        MyArray1(i, 4) = TempArray(i, 3)
        MyArray1(i, 5) = TempArray(i, 2)
    Next i
    Array2worksheet Wb.Sheets(sSql), MyArray1
End If
cn.Close
Set cn = Nothing
Set rs = Nothing
End Sub

Function StTimeFromBox(StartTime As String) As String
If StartTime = "" Then Exit Function
Dim i As Integer
Dim Cr As String
For i = 5 To Len(StartTime)
Cr = mid(StartTime, i, 1)
If mid(StartTime, i + 1, 3) <> "to " Then
    If Cr <> "/" Then
        StTimeFromBox = StTimeFromBox & Cr
    Else
        StTimeFromBox = StTimeFromBox & "-"
    End If
Else
    Exit For
End If
Next i
StTimeFromBox = Format(CDate(StTimeFromBox), "yyyy-mm-dd Hh:Nn:Ss")
End Function

Function EndTimeFromBox(EndTime As String) As String
If EndTime = "" Then Exit Function
'ComboBox2.AddItem "From " & Separator(ColRuns(i), "-", 0) & " to " & Separator(ColRuns(i), "-", 1)
'Format(CStr(DTPicker1.Value + DTPicker2.Value - Date), "yyyy-mm-dd Hh:Nn:Ss"
Dim i As Integer
Dim Cr As String
For i = 5 To Len(EndTime)
If mid(EndTime, i + 1, 4) = " to " Then Exit For
Next i
If i + 5 = Len(EndTime) Then
    EndTimeFromBox = "2025-01-01 00:00:00"
Else
i = i + 5
    EndTimeFromBox = mid(EndTime, i)
    EndTimeFromBox = Format(CDate(EndTimeFromBox), "yyyy-mm-dd Hh:Nn:Ss")
End If
End Function
Sub Array2worksheet(ByRef Sh As Worksheet, ByVal Arr)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Arr |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ColumnsNames.
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| sh
    If UBound(Arr, 1) > Sh.Rows.Count - 1 Or UBound(Arr, 2) > Sh.Columns.Count Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| " & Sh.Name, vbCritical, _
               "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & UBound(Arr, 1) & "*" & UBound(Arr, 2): End
    End If
    With Sh
        .Range("a2").Resize(UBound(Arr, 1), UBound(Arr, 2)).Value = Arr
        .UsedRange.EntireColumn.AutoFit
    End With
End Sub
Function TransposeArray(ByVal Arr As Variant) As Variant
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim TempArray As Variant
    ReDim TempArray(LBound(Arr, 2) To UBound(Arr, 2), LBound(Arr, 1) To UBound(Arr, 1))
    For x = LBound(Arr, 2) To UBound(Arr, 2)
        For y = LBound(Arr, 1) To UBound(Arr, 1)
            TempArray(x, y) = Arr(y, x)
        Next y
    Next x
    TransposeArray = TempArray
End Function
Sub TimeBalance()
Dim Sh As Worksheet: Set Sh = ThisWorkbook.Sheets("GenGenTime")
Dim DataArray()
Dim TempArray()
Dim SumTimeArr()
Dim i As Double
Dim j As Double
Dim Summ

Sh.Range("H2:J50000").ClearContents
DataArray = Sh.Range("A2:A100000")
For i = LBound(DataArray, 1) To UBound(DataArray, 1)
    If DataArray(i, 1) = "" Then Exit For
Next i
i = i - 1
ReDim DataArray(0 To i, 0 To 5)
DataArray = Sh.Range("A2:F" & CStr(i + 1))
TempArray = Sh.Range("A2:F" & CStr(i + 1))
TempArray = RemuveDuplicateFromArray(TempArray, 6)
ReDim SumTimeArr(0 To UBound(TempArray, 1))

For i = LBound(DataArray, 1) To UBound(DataArray, 1)
    For j = LBound(TempArray, 1) To UBound(TempArray, 1)
        If DataArray(i, 6) = TempArray(j) Then
            SumTimeArr(j) = SumTimeArr(j) + DataArray(i, 3)
        
        End If
    Next j
Next i

For i = LBound(TempArray, 1) To UBound(TempArray, 1)
    Sh.Cells(i + 2, 10) = TempArray(i)
    Sh.Cells(i + 2, 9) = SumTimeArr(i)
    Summ = Summ + SumTimeArr(i)
Next i
Sh.Cells(i + 2, 8) = Summ
Set Sh = Nothing
End Sub
Function RemuveDuplicateFromArray(ByVal Arr As Variant, Ind As Integer) As Variant

Dim TempArray(0 To 1000)
Dim TempArray1()
Dim i As Double
Dim j As Double
Dim k As Double
Dim flag As Boolean
Dim Tmp
k = 0
TempArray(0) = Arr(1, Ind)
For i = LBound(Arr, 1) To UBound(Arr, 1)
    flag = True
    For j = LBound(TempArray, 1) To UBound(TempArray, 1)
        If TempArray(j) = Arr(i, Ind) Then
        flag = False
        Exit For
        End If
    Next j
    If flag Then
        k = k + 1
        TempArray(k) = Arr(i, Ind)
    End If
Next i
ReDim TempArray1(0 To k)
For i = 0 To k
    TempArray1(i) = TempArray(i)
Next i
RemuveDuplicateFromArray = TempArray1
End Function

Function GetArrayWithCommand(Command As String) As Variant
Dim sHostName As String
' Get Host Name / Get Computer Name
sHostName = Environ$("computername")
'ADO = activex data objects
'data <--> OLEDB Provider <--> ADO Data object
' You need a reference to ADO Libraray!!

Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction
Dim cmdObj As ADODB.Command 'declarate a command object
Dim MSQLVertion As String
Dim gf As Field
Dim i As Integer
Dim MyArray()
ReDim tmpArr(0 To 1, 0 To 1)
tmpArr(0, 0) = ""

Set cn = New ADODB.Connection
sCon = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=True;Data Source=" & sHostName & "\ADVANTAGE" & WinVersion & ";Initial Catalog=advantage"
cn.Open sCon

Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
'MsgBox Command
rs.Open Command, cn, adOpenForwardOnly, adLockReadOnly, adCmdText
If rs.EOF Then
    MsgBox "There is not DATA for this time interval!"
    MyArray = tmpArr
    GetArrayWithCommand = MyArray
Else
    
    MyArray = rs.GetRows()
    GetArrayWithCommand = TransposeArray(MyArray)
End If
cn.Close


Set cn = Nothing
Set rs = Nothing
End Function
Function GetArrayFromSQLByTime(Command As String, StartTime As String, EndTime As String, sCon As String) As Variant
'ADO = activex data objects
'data <--> OLEDB Provider <--> ADO Data object
' You need a reference to ADO Libraray!!
Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction
Dim cmdObj As ADODB.Command 'declarate a command object
Dim gf As Field
Dim i As Double
Dim MyArray()
ReDim tmpArr(0 To 1, 0 To 1)
tmpArr(0, 0) = ""
Set cn = New ADODB.Connection
cn.Open sCon
Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
'MsgBox Command
rs.Open Command, cn, adOpenForwardOnly, adLockReadOnly, adCmdText

If rs.EOF Then
    MyArray = tmpArr
    GetArrayFromSQLByTime = MyArray
Else
    MyArray = rs.GetRows()
    GetArrayFromSQLByTime = TransposeArray(MyArray)
End If
cn.Close
Set cn = Nothing
Set rs = Nothing
End Function
Sub ECDDataFromGenMDPPressWithTime(StartTime As String, EndTime As String, sCon As String)
Dim Wht As String
Dim Frm As String
Dim Wher As String
Dim Command As String
Wht = "c.Time, c.Depth, c.RigActivityCode, d.ACTECDX, b.RunNo"
Frm = "GenDataSet b, GenDataIndex c, GenMDPPress d"
Wher = "b.id = c.GenDataSetId AND c.EditFlag>-1 AND c.id = d.GenDataIndexId and (c.Time BETWEEN '" & StartTime & "' AND '" & EndTime & "' ) ORDER BY c.Time"
Command = "SELECT " & Wht & " FROM " & Frm & " WHERE " & Wher
ThisWorkbook.Sheets("GenMDPPress").Range("A1:CD20000").ClearContents
GetOneShWhithCommandtoWbGenMDPPress "GenMDPPress", Command, ThisWorkbook, sCon

Wht = "c.Time, c.Depth, c.RigActivityCode, d.MWSTATX, d.SURGECDX, b.RunNo"
Frm = "GenDataSet b, GenDataIndex c, GenDHolePSW d"
Wher = "b.id = c.GenDataSetId AND c.EditFlag>-1 AND c.id = d.GenDataIndexId and (c.Time BETWEEN '" & StartTime & "' AND '" & EndTime & "' ) ORDER BY c.Time"
Command = "SELECT " & Wht & " FROM " & Frm & " WHERE " & Wher
ThisWorkbook.Sheets("GenDHolePSW").Range("A1:CD20000").ClearContents
GetOneShWhithCommandtoWbGenMDPPress "GenDHolePSW", Command, ThisWorkbook, sCon

End Sub
Sub GetOneShWhithCommandtoWbGenMDPPress(TabName As String, Command As String, Wb As Workbook, sCon As String) ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
If sCon = "" Then Exit Sub
Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction
Dim sSql As String
Dim gf As Field
Dim Sh As Worksheet
Dim Lst As Collection
Dim i As Double
Dim j As Double
Dim k As Double
Dim RgActCode As Integer
sSql = TabName

Set cn = New ADODB.Connection
cn.Open sCon
Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
'MsgBox Command
rs.Open Command, cn, adOpenForwardOnly, adLockReadOnly, adCmdText
If rs.EOF Then
    'MsgBox "There is not DATA for this time interval!"
Else
    rs.MoveFirst
    Wb.Sheets(TabName).Cells(2, 1).CopyFromRecordset rs
End If
cn.Close
Set cn = Nothing
Set rs = Nothing
End Sub

Sub FlowDataFromRAW_MWD_GENERICWithTime(StartTime As String, EndTime As String, sCon As String)
Dim Wht As String
Dim Frm As String
Dim Wher As String
Dim Command As String
Wht = "RAGE_TIME, RAGE_MDEPTH, RAGE_ACT_CODE, RAGE_VALUE, RAGE_RUN_NO"
Frm = "RAW_MWD_GENERIC c"
Wher = "c.RAGE_MNEMONIC='DLC_RPMX' AND RAGE_EDIT_FLAG=0 AND (c.RAGE_TIME BETWEEN '" & StartTime & "' AND '" & EndTime & "' ) ORDER BY c.RAGE_TIME"
Command = "SELECT " & Wht & " FROM " & Frm & " WHERE " & Wher
GetOneShWhithCommandtoWbGenMDPPressFlow "GenMDPPress", Command, ThisWorkbook, sCon

End Sub
Sub GetOneShWhithCommandtoWbGenMDPPressFlow(TabName As String, Command As String, Wb As Workbook, sCon As String)
If sCon = "" Then Exit Sub
Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction
Dim sSql As String
Dim gf As Field
Dim Sh As Worksheet
Dim Lst As Collection
Dim i As Double
Dim j As Double
Dim k As Double
Dim RgActCode As Integer
sSql = TabName

Set cn = New ADODB.Connection
cn.Open sCon
Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
'MsgBox Command
rs.Open Command, cn, adOpenForwardOnly, adLockReadOnly, adCmdText
If rs.EOF Then
    'MsgBox "There is not DATA for this time interval!"
Else
    rs.MoveFirst
    Wb.Sheets(TabName).Cells(2, 11).CopyFromRecordset rs
End If
cn.Close
Set cn = Nothing
Set rs = Nothing
End Sub
Sub RPMGTIDataFromGenGenTimeWithTime(StartTime As String, EndTime As String, sCon As String)
Dim Wht As String
Dim Frm As String
Dim Wher As String
Dim Command As String

Wht = "c.Time, c.Depth, c.RigActivityCode, d.BITDEP, d.SURF_RPM, d.TORQUE_AVG"
Frm = "GenDataIndex c, GenGenTime d"
Wher = "c.EditFlag>-1 AND c.id = d.GenDataIndexId and (c.RigActivityCode in (111,107,112,117,113,11))and d.SURF_RPM>0 and (c.Time BETWEEN '" & StartTime & "' AND '" & EndTime & "' ) ORDER BY c.Time"
Command = "SELECT " & Wht & " FROM " & Frm & " WHERE " & Wher
GetOneShWhithCommandtoWbGenGenTimeRPM "GenMDPPress", Command, ThisWorkbook, sCon

End Sub
Sub GetOneShWhithCommandtoWbGenGenTimeRPM(TabName As String, Command As String, Wb As Workbook, sCon As String)
If sCon = "" Then Exit Sub
Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction

Set cn = New ADODB.Connection
cn.Open sCon
Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
'MsgBox Command
rs.Open Command, cn, adOpenForwardOnly, adLockReadOnly, adCmdText
If rs.EOF Then
    'MsgBox "There is not DATA for this time interval!"
Else
    rs.MoveFirst
    Wb.Sheets(TabName).Cells(2, 19).CopyFromRecordset rs
End If
cn.Close
Set cn = Nothing
Set rs = Nothing
End Sub
Sub HKLDwRotDataFromGenGenTimeWithTime(StartTime As String, EndTime As String, sCon As String)
Dim Wht As String
Dim Frm As String
Dim Wher As String
Dim Command As String

Wht = "c.Time, c.Depth, c.RigActivityCode, d.BITDEP, d.HKLD_AVG"
Frm = "GenDataIndex c, GenGenTime d"
Wher = "c.EditFlag>-1 AND c.id = d.GenDataIndexId and (c.RigActivityCode in (107,112,117,113)) and (c.Time BETWEEN '" & StartTime & "' AND '" & EndTime & "' ) ORDER BY c.Time"
Command = "SELECT " & Wht & " FROM " & Frm & " WHERE " & Wher
GetOneShWhithCommandtoWbGenGenTimeHLDwRot "GenMDPPress", Command, ThisWorkbook, sCon

End Sub
Sub GetOneShWhithCommandtoWbGenGenTimeHLDwRot(TabName As String, Command As String, Wb As Workbook, sCon As String)
If sCon = "" Then Exit Sub
Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction

Set cn = New ADODB.Connection
cn.Open sCon
Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
'MsgBox Command
rs.Open Command, cn, adOpenForwardOnly, adLockReadOnly, adCmdText
If rs.EOF Then
    'MsgBox "There is not DATA for this time interval!"
Else
    rs.MoveFirst
    Wb.Sheets(TabName).Cells(2, 26).CopyFromRecordset rs
End If
cn.Close
Set cn = Nothing
Set rs = Nothing
End Sub

Sub HKLDwoRotDataFromGenGenTimeWithTime(StartTime As String, EndTime As String, sCon As String)
Dim Wht As String
Dim Frm As String
Dim Wher As String
Dim Command As String

Wht = "c.Time, c.Depth, c.RigActivityCode, d.BITDEP, d.HKLD_AVG"
Frm = "GenDataIndex c, GenGenTime d"
Wher = "c.EditFlag>-1 AND c.id = d.GenDataIndexId and (c.RigActivityCode in (12,13,16)) and (c.Time BETWEEN '" & StartTime & "' AND '" & EndTime & "' ) ORDER BY c.Time"
Command = "SELECT " & Wht & " FROM " & Frm & " WHERE " & Wher
GetOneShWhithCommandtoWbGenGenTimeHLDwoRot "GenMDPPress", Command, ThisWorkbook, sCon

End Sub
Sub GetOneShWhithCommandtoWbGenGenTimeHLDwoRot(TabName As String, Command As String, Wb As Workbook, sCon As String)
If sCon = "" Then Exit Sub
Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction

Set cn = New ADODB.Connection
cn.Open sCon
Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
'MsgBox Command
rs.Open Command, cn, adOpenForwardOnly, adLockReadOnly, adCmdText
If rs.EOF Then
    'MsgBox "There is not DATA for this time interval!"
Else
    rs.MoveFirst
    Wb.Sheets(TabName).Cells(2, 32).CopyFromRecordset rs
End If
cn.Close
Set cn = Nothing
Set rs = Nothing
End Sub

Sub TFOwoRotDataFromGenDataIndexGenRawDirMWD_TIMEMWD_RUN_TO_COMPONENTMWD_DIRECTIONALWithTime(StartTime As String, EndTime As String, sCon As String)
Dim Wht As String
Dim Frm As String
Dim Wher As String
Dim Command As String

Wht = "c.Time, c.Depth, c.RigActivityCode, d.HTFB, d.MTFB"
Frm = "GenDataIndex c, GenRawDir d"
Wher = "c.id = d.GenDataIndexId and (c.RigActivityCode in (11)) and (c.Time BETWEEN '" & StartTime & "' AND '" & EndTime & "' ) ORDER BY c.Time"
Command = "SELECT " & Wht & " FROM " & Frm & " WHERE " & Wher
GetOneShWhithCommandtoWbGenGenTimeTFOwoRot "GenMDPPress", Command, ThisWorkbook, sCon

End Sub
Function GetOneShWhithCommandtoWbGenGenTimeTFOwoRot(TabName As String, Command As String, Wb As Workbook, sCon As String) As Boolean
If sCon = "" Then Exit Function
Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction
GetOneShWhithCommandtoWbGenGenTimeTFOwoRot = False

Set cn = New ADODB.Connection
cn.Open sCon
Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
'MsgBox Command
rs.Open Command, cn, adOpenForwardOnly, adLockReadOnly, adCmdText
If rs.EOF Then
    'MsgBox "There is not DATA for this time interval!"
Else
    rs.MoveFirst
    Wb.Sheets(TabName).Cells(2, 38).CopyFromRecordset rs
    GetOneShWhithCommandtoWbGenGenTimeTFOwoRot = True
End If
cn.Close
Set cn = Nothing
Set rs = Nothing
End Function

Sub DasIncRotatDataFromGenDataIndexGenDirRotatWithTime(StartTime As String, EndTime As String, sCon As String)
Dim Wht As String
Dim Frm As String
Dim Wher As String
Dim Command As String

Wht = "a.Id, a.Depth, a.RigActivityCode, a.Time, b.INRX "
Frm = "GenDataIndex a, GenDirRotat b"
Wher = "a.EditFlag>-1 AND a.id = b.GenDataIndexId and (a.RigActivityCode in (111,11)) and (a.Time BETWEEN '" & StartTime & "' AND '" & EndTime & "' ) ORDER BY a.Time"
Command = "SELECT " & Wht & " FROM " & Frm & " WHERE " & Wher
GetOneShWhithCommandtoWbGenDataIndexGenDirRotatDasIncRotat "GenMDPPress", Command, ThisWorkbook, sCon

End Sub
Sub GetOneShWhithCommandtoWbGenDataIndexGenDirRotatDasIncRotat(TabName As String, Command As String, Wb As Workbook, sCon As String)
If sCon = "" Then Exit Sub
Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction

Set cn = New ADODB.Connection
cn.Open sCon
Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
'MsgBox Command
rs.Open Command, cn, adOpenForwardOnly, adLockReadOnly, adCmdText
If rs.EOF Then
    'MsgBox "There is not DATA for this time interval!"
Else
    rs.MoveFirst
    Wb.Sheets(TabName).Cells(2, 45).CopyFromRecordset rs
End If
cn.Close
Set cn = Nothing
Set rs = Nothing
End Sub

Sub DasIncNRotaDataFromGenDataIndexGenDirNRotaWithTime(StartTime As String, EndTime As String, sCon As String)
Dim Wht As String
Dim Frm As String
Dim Wher As String
Dim Command As String

Wht = "a.Id, a.Depth, a.RigActivityCode, a.Time, b.INNXS "
Frm = "GenDataIndex a, GenDirNRota b"
Wher = "a.EditFlag>-1 AND a.id = b.GenDataIndexId and (a.RigActivityCode in (11)) and (a.Time BETWEEN '" & StartTime & "' AND '" & EndTime & "' ) ORDER BY a.Time"
Command = "SELECT " & Wht & " FROM " & Frm & " WHERE " & Wher
GetOneShWhithCommandtoWbGenDataIndexGenDirNRotaDasIncNRota "GenMDPPress", Command, ThisWorkbook, sCon

End Sub
Sub GetOneShWhithCommandtoWbGenDataIndexGenDirNRotaDasIncNRota(TabName As String, Command As String, Wb As Workbook, sCon As String)
If sCon = "" Then Exit Sub
Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction

Set cn = New ADODB.Connection
cn.Open sCon
Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
'MsgBox Command
rs.Open Command, cn, adOpenForwardOnly, adLockReadOnly, adCmdText
If rs.EOF Then
    'MsgBox "There is not DATA for this time interval!"
Else
    rs.MoveFirst
    Wb.Sheets(TabName).Cells(2, 51).CopyFromRecordset rs
End If
cn.Close
Set cn = Nothing
Set rs = Nothing
End Sub

Sub NearBitRotaNaviGammaDataFromGenSRIGNBDGenDataIndexWithTime(StartTime As String, EndTime As String, sCon As String)
Dim Wht As String
Dim Frm As String
Dim Wher As String
Dim Command As String

'Wht = "a.Id, a.Depth, a.RigActivityCode, a.Time, b.IMCX "
Wht = "a.Depth, a.Time, b.IMCX "
Frm = "GenDataIndex a, GenSRIGNBD b"
Wher = "a.EditFlag>-1 AND a.id = b.GenDataIndexId and (a.RigActivityCode in (111)) and (a.Time BETWEEN '" & StartTime & "' AND '" & EndTime & "' ) ORDER BY a.Time"
Command = "SELECT " & Wht & " FROM " & Frm & " WHERE " & Wher
GetOneShWhithCommandtoWbGenDataIndexIdGenSRIGNBDNearBitRotaNaviGamma "GenMDPPress", Command, ThisWorkbook, sCon

End Sub
Sub GetOneShWhithCommandtoWbGenDataIndexIdGenSRIGNBDNearBitRotaNaviGamma(TabName As String, Command As String, Wb As Workbook, sCon As String)
If sCon = "" Then Exit Sub
Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction

Set cn = New ADODB.Connection
cn.Open sCon
Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
'MsgBox Command
rs.Open Command, cn, adOpenForwardOnly, adLockReadOnly, adCmdText
If rs.EOF Then
    'MsgBox "There is not DATA for this time interval!"
Else
    rs.MoveFirst
    Wb.Sheets(TabName).Cells(2, 57).CopyFromRecordset rs
End If
cn.Close
Set cn = Nothing
Set rs = Nothing
End Sub
Sub WobRopDataFromGenGenTimeWithTime(StartTime As String, EndTime As String, sCon As String)
Dim Wht As String
Dim Frm As String
Dim Wher As String
Dim Command As String
Dim BHARunSh As Worksheet: Set BHARunSh = ThisWorkbook.Worksheets("BHARun")

Wht = "c.Time, c.Depth, c.RigActivityCode, d.ROP_AVG, d.WOB_AVG"
Frm = "GenDataIndex c, GenGenTime d"
If BHARunSh.Cells(2, 5) = 1 Then
    Wher = "c.EditFlag>-1 AND c.id = d.GenDataIndexId and (c.RigActivityCode in (111,11)) and (c.Time BETWEEN '" & StartTime & "' AND '" & EndTime & "' ) ORDER BY c.Time"
Else
    Wher = "c.EditFlag>-1 AND c.id = d.GenDataIndexId and (c.RigActivityCode in (111)) and (c.Time BETWEEN '" & StartTime & "' AND '" & EndTime & "' ) ORDER BY c.Time"
End If
Command = "SELECT " & Wht & " FROM " & Frm & " WHERE " & Wher
GetOneShWhithCommandtoWbGenGenTimeWobRop "GenMDPPress", Command, ThisWorkbook, sCon

End Sub
Sub GetOneShWhithCommandtoWbGenGenTimeWobRop(TabName As String, Command As String, Wb As Workbook, sCon As String)
If sCon = "" Then Exit Sub
Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction

Set cn = New ADODB.Connection
cn.Open sCon
Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
'MsgBox Command
rs.Open Command, cn, adOpenForwardOnly, adLockReadOnly, adCmdText
If rs.EOF Then
    'MsgBox "There is not DATA for this time interval!"
Else
    rs.MoveFirst
    Wb.Sheets(TabName).Cells(2, 61).CopyFromRecordset rs
End If
cn.Close
Set cn = Nothing
Set rs = Nothing
End Sub
Sub WbGenAuto(StartTime As String, EndTime As String, sCon As String)
Dim Arr() ' Presure
Dim ArrR1() ' 1st Rib TFO
Dim ResArr1()
Dim i As Double
Dim j As Double
Dim RIB1TFO As Double
Dim Wht As String
Dim Frm As String
Dim Wher As String
Dim Command As String
Wht = "c.Depth, a.ATK_IRIB1X*100, a.ATK_IRIB2X*100, a.ATK_IRIB3X*100"
Frm = "GenDataIndex c, GenATK_GT_DIAG a"
Wher = "c.id = a.GenDataIndexId and a.ATK_IRIB1X <> -9999 and a.ATK_IRIB2X <> -9999 and a.ATK_IRIB3X <> -9999 and (c.RigActivityCode in (111,11)) and (c.Time BETWEEN '" & StartTime & "' AND '" & EndTime & "' ) ORDER BY c.Time"
Command = "SELECT " & Wht & " FROM " & Frm & " WHERE " & Wher

Arr = GetArrayFromSQLByTime(Command, StartTime, EndTime, sCon)
If Arr(0, 0) <> "" Then
    ' Exact
Else
    Wht = "c.Depth, a.CUR_PRES1X/101325, a.CUR_PRES2X/101325, a.CUR_PRES3X/101325"
    Frm = "GenDataIndex c, GenAutoT2Ac a"
    Wher = "c.id = a.GenDataIndexId and a.CUR_PRES1X <> -9999 and a.CUR_PRES2X <> -9999 and a.CUR_PRES3X <> -9999 and (c.RigActivityCode in (111,11)) and (c.Time BETWEEN '" & StartTime & "' AND '" & EndTime & "' ) ORDER BY c.Time"
    Command = "SELECT " & Wht & " FROM " & Frm & " WHERE " & Wher
    Arr = GetArrayFromSQLByTime(Command, StartTime, EndTime, sCon)
End If

Wht = "c.Depth, a.ACTHTFX*57.2958"
Frm = "GenDataIndex c, GenAutoTAct a"
Wher = "c.id = a.GenDataIndexId and a.ACTHTFX <> -9999 and (c.RigActivityCode in (111,11)) and (c.Time BETWEEN '" & StartTime & "' AND '" & EndTime & "' ) ORDER BY c.Time"
Command = "SELECT " & Wht & " FROM " & Frm & " WHERE " & Wher
ArrR1() = GetArrayFromSQLByTime(Command, StartTime, EndTime, sCon)
If Arr(0, 0) = "" Or ArrR1(0, 0) = "" Then Exit Sub
ReDim ResArr(LBound(Arr, 1) To UBound(Arr, 1), LBound(Arr, 1) To 3)
For i = 0 To UBound(Arr, 1) - 1
    ResArr(i, 0) = Arr(i, 0)
    For j = 1 To UBound(ArrR1, 1) - 1
        If Arr(i, 0) > ArrR1(j - 1, 0) And Arr(i, 0) <= ArrR1(j, 0) Then
           If ArrR1(j - 1, 1) = 510.000229044 Or ArrR1(j, 1) = 510.000229044 Then
                RIB1TFO = 510.000229044
           Else
                RIB1TFO = Interpol(CDbl(ArrR1(j - 1, 0)), CDbl(ArrR1(j, 0)), CDbl(ArrR1(j - 1, 1)), CDbl(ArrR1(j, 1)), CDbl(Arr(i, 0)))
           End If
        End If
    Next j
    ResArr(i, 1) = Fors(CDbl(Arr(i, 1)), CDbl(Arr(i, 2)), CDbl(Arr(i, 3)))
    If RIB1TFO <> 510.000229044 Then
        ResArr(i, 2) = ForsTFO(CDbl(Arr(i, 1)), CDbl(Arr(i, 2)), CDbl(Arr(i, 3)), CDbl(ResArr(i, 1)), RIB1TFO)
        k = k + 1
    Else
        ResArr(i, 2) = -9999
    End If
Next i
If k <> 0 Then
    ReDim ResArr1(0 To k - 1, LBound(Arr, 1) To 2)
    k = 0
    For i = 0 To UBound(ResArr, 1) - 1
        If ResArr(i, 2) <> -9999 Then
            For j = 0 To 2
                ResArr1(k, j) = ResArr(i, j)
            Next j
            k = k + 1
        End If
    Next i
    ThisWorkbook.Sheets("TF Chart").Range("AJ6:AL100000").ClearContents
    ThisWorkbook.Sheets("TF Chart").Range("AJ" & 6 + LBound(ResArr1, 1) & ":Al" & 6 + UBound(ResArr1, 1)) = ResArr1
End If
End Sub
Function Interpol(x1 As Double, x2 As Double, y1 As Double, y2 As Double, x As Double) As Double
Interpol = -9999
If x > x1 And x <= x2 Then
    Interpol = (x - x1) * (y2 - y1) / (x2 - x1) + y1
End If
End Function
Function Fors(F1 As Double, F2 As Double, F3 As Double) As Double
Fors = -9999
y = -F1 + F2 * Cos(1.0471975511966) + F3 * Cos(1.0471975511966)
x = -F2 * Sin(1.0471975511966) + F3 * Sin(1.0471975511966)
Fors = Sqr(x ^ 2 + y ^ 2)
End Function
Function ForsTFO(F1 As Double, F2 As Double, F3 As Double, Fors As Double, TFO As Double) As Double
ForsTFO = -9999
y = -F1 + F2 * Cos(1.0471975511966) + F3 * Cos(1.0471975511966)
x = -F2 * Sin(1.0471975511966) + F3 * Sin(1.0471975511966)
If y = 0 Then
    If x > 0 Then
        ForsTFO = 90
    Else
        ForsTFO = 270
    End If
Else
    ForsTFO = WorksheetFunction.Acos(y / Fors) * 180 / WorksheetFunction.Pi()
    If x < 0 Then
        ForsTFO = 360 - ForsTFO
    End If
End If
ForsTFO = ForsTFO + TFO
If ForsTFO >= 360 Then ForsTFO = ForsTFO - 360
End Function
Attribute VB_Name = "For_ECDFilesImport"
Option Base 1

Sub ECDFileImport()
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim ECDFOSh As Worksheet: Set ECDFOSh = TWb.Sheets("ECD_FLOW_OFF")
Dim ECDRTSh As Worksheet: Set ECDRTSh = TWb.Sheets("ECD_RT")
Dim ECDFOWb As Workbook
Dim ECDRTWb As Workbook


With Application.FileDialog(msoFileDialogFilePicker)
    .Title = "Select ECD_FLOW_OFF"
    .ButtonName = "Select ECD_FLOW_OFF"
    .AllowMultiSelect = False
    .InitialFileName = TWb.Path
    .Filters.Clear
    .Filters.Add "Excel files", "*.xls*", 1
    If .Show Then FolderFO = .SelectedItems(1)
End With

With Application.FileDialog(msoFileDialogFilePicker)
    .Title = "Select ECD_RT"
    .ButtonName = "Select ECD_RT"
    .AllowMultiSelect = False
    .InitialFileName = TWb.Path
    .Filters.Clear
    .Filters.Add "Excel files", "*.xls*", 1
    If .Show Then FolderRT = .SelectedItems(1)
End With

If FolderFO <> "" And Right(FolderFO, 17) = "ECD_FLOW_OFF.xlsx" Then
    Set ECDFOWb = Workbooks.Open(FolderFO)
    ECDFOWb.Application.DisplayAlerts = False
    ECDFOWb.Windows(1).Visible = False
    ECDFOWb.Worksheets(1).UsedRange.Copy ECDFOSh.Range(ECDFOWb.Worksheets(1).UsedRange.Address)
    ECDFOWb.Close
Else
    MsgBox ("ECD FLOW OFF File was not imported! Try again, please!")
End If

If FolderRT <> "" And Right(FolderRT, 11) = "ECD_RT.xlsx" Then
    Set ECDRTWb = Workbooks.Open(FolderRT)
    ECDRTWb.Application.DisplayAlerts = False
    ECDRTWb.Windows(1).Visible = False
    ECDRTWb.Worksheets(1).UsedRange.Copy ECDRTSh.Range(ECDRTWb.Worksheets(1).UsedRange.Address)
    ECDRTWb.Close
Else
    MsgBox ("ECD Real Time File was not imported! Try again, please!")
End If

End Sub
Sub DataFromECDRTToTLA()
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim ECDRTSh As Worksheet: Set ECDRTSh = TWb.Sheets("ECD_RT")
Dim ECDFOSh As Worksheet: Set ECDFOSh = TWb.Sheets("ECD_FLOW_OFF")
Dim TLASh As Worksheet: Set TLASh = TWb.Sheets("TLA")
Dim i As Integer
Dim j As Integer
Dim k As Integer
Dim l As Integer
Dim m As Integer
Dim n As Integer
Dim o As Integer
Dim LasrOperation As String
Dim Offset As Double
Dim LastMD As Double
Dim MD As Double
Offset = 5.8
ReamingCreterea = 50
Dim ECDRTArr:
ECDRTArr = ECDRTSh.UsedRange
ECDFOArr = ECDFOSh.UsedRange
TLASh.Range("AA11:AL20000").ClearContents

j = 11
k = 11
l = 11
m = 11
For i = 2 To UBound(ECDRTArr, 1)
    If Not IsEmpty(ECDRTArr(i, 4)) Then
        If CStr(ECDRTArr(i, 7)) = "Drilling" Then
            TLASh.Cells(j, 27) = Round(CDbl(ECDRTArr(i, 4)), 2) + Offset
            TLASh.Cells(j, 28) = Round(CDbl(ECDRTArr(i, 8)), 4)
            LasrOperation = "Drilling"
            MD = ECDRTArr(i, 4) + Offset
            j = j + 1
        End If
        If CStr(ECDRTArr(i, 7)) = "Reaming" Then
            If (MD - CDbl(ECDRTArr(i, 4)) + Offset) < ReamingCreterea Then
                If LasrOperation = "Drilling" Then
                    TLASh.Cells(k, 31) = Round(CDbl(ECDRTArr(i, 4)), 2) + Offset
                    TLASh.Cells(k, 32) = Round(CDbl(ECDRTArr(i, 8)), 4)
                    LasrOperation = "Reaming"
                    LastMD = CDbl(ECDRTArr(i, 4)) + Offset
                    k = k + 1
                Else
                    If LastMD > (CDbl(ECDRTArr(i, 4)) + Offset) Then
                        TLASh.Cells(k, 31) = Round(CDbl(ECDRTArr(i, 4)), 2) + Offset
                        TLASh.Cells(k, 32) = Round(CDbl(ECDRTArr(i, 8)), 4)
                        LasrOperation = "Reaming"
                        LastMD = CDbl(ECDRTArr(i, 4)) + Offset
                        k = k + 1
                    Else
                        TLASh.Cells(l, 29) = Round(CDbl(ECDRTArr(i, 4)), 2) + Offset
                        TLASh.Cells(l, 30) = Round(CDbl(ECDRTArr(i, 8)), 4)
                        LasrOperation = "Reaming"
                        LastMD = CDbl(ECDRTArr(i, 4)) + Offset
                        l = l + 1
                    End If
                End If
            Else
                TLASh.Cells(m, 33) = Round(CDbl(ECDRTArr(i, 4)), 2) + Offset
                TLASh.Cells(m, 34) = Round(CDbl(ECDRTArr(i, 8)), 4)
                LasrOperation = "Reaming"
                LastMD = CDbl(ECDRTArr(i, 4)) + Offset
                m = m + 1
            End If
        End If
    End If
Next i
n = 11
o = 11
For i = 2 To UBound(ECDFOArr, 1)
    If Not IsEmpty(ECDFOArr(i, 4)) Then
        If CDbl(ECDFOArr(i, 4)) > 0 Then
            If Not IsEmpty(ECDFOArr(i, 8)) Then
                If CDbl(ECDFOArr(i, 8)) > 0 And CDbl(ECDFOArr(i, 8)) < 3 Then
                    TLASh.Cells(n, 35) = Round(CDbl(ECDFOArr(i, 4)), 2) + Offset
                    TLASh.Cells(n, 36) = Round(CDbl(ECDFOArr(i, 8)), 4)
                    n = n + 1
                End If
            End If
            If Not IsEmpty(ECDFOArr(i, 9)) Then
                If CDbl(ECDFOArr(i, 9)) > 0 And CDbl(ECDFOArr(i, 9)) < 3 Then
                    TLASh.Cells(o, 37) = Round(CDbl(ECDFOArr(i, 4)), 2) + Offset
                    TLASh.Cells(o, 38) = Round(CDbl(ECDFOArr(i, 9)), 4)
                    o = o + 1
                End If
            End If
        End If
    End If
Next i
MsgBox "ECD data was imported!"
End Sub
Attribute VB_Name = "For_FullSlideSheet"
Option Base 1
Sub FullSlideSheet(BHAR_IDENTIFIER As String)
Dim WhtSt As String
Dim FromSt As String
Dim WhereSt As String
Dim Rqst As String
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim SlSh As Worksheet: Set SlSh = TWb.Sheets("FullSlideSheet")
Dim UvatSh As Worksheet: Set UvatSh = TWb.Sheets("UvatNGSlideSheet")
Dim Sh As Worksheet
Dim i As Integer
Dim j As Integer
Dim u As Integer
Dim Pi As Double: Pi = 3.1415926
Dim ROPCons As Double: ROPCons = 3600
Dim WhtCons As Double: WhtCons = 0.000101971621
Dim DrilledFootage As Double
Dim DrilledSlide As Double
Dim DrilledTime As Double
Dim DrilledSlideTime As Double
Dim CircTime As Double
Dim DlTime As Double
Dim TFOTime As Double
Dim SurveyTime As Double
Dim WashTime As Double
Dim ATKRunIdentifire As Boolean

' For MPRReport
WhtSt = "CAT_DP_OPERATING_MODE.CDPO_SHORT_NAME, CAT_DP_OPERATING_MODE.CDPO_LONG_NAME, BHA_DRILLING_PARAMETERS.*"
FromSt = "BHA_DRILLING_PARAMETERS,CAT_DP_OPERATING_MODE"
WhereSt = "CAT_DP_OPERATING_MODE.CDPO_IDENTIFIER=BHA_DRILLING_PARAMETERS.CDPO_IDENTIFIER AND BHA_DRILLING_PARAMETERS.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' ORDER BY BHA_DRILLING_PARAMETERS.BDRP_END_TIME"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
RunInfoGetOneShWhithCommand "MPRReport", Rqst

' For DDBHAHeader
WhtSt = "WELLBORE.WLBR_NAME, FACILITY_TAB.FCTY_NAME, OBJECT_OF_INTEREST_TAB.OOIN_NAME, COMPANY_NAME.CPNM_NAME"
FromSt = "BHA_RUN, WELLBORE, PROGRAM_TAB, FACILITY_TAB, OBJECT_OF_INTEREST_TAB, OBJECT_TO_FACILITY, COMPANY_NAME"                '"WELLBORE, WELL_TAB, FACILITY_TAB, COMPANY_NAME"
WhereSt = "COMPANY_NAME.CPNM_IDENTIFIER=PROGRAM_TAB.CPNM_IDENTIFIER AND OBJECT_TO_FACILITY.FCTY_IDENTIFIER=FACILITY_TAB.FCTY_IDENTIFIER AND OBJECT_OF_INTEREST_TAB.OOIN_IDENTIFIER=OBJECT_TO_FACILITY.OOIN_IDENTIFIER AND PROGRAM_TAB.FCTY_IDENTIFIER=FACILITY_TAB.FCTY_IDENTIFIER AND PROGRAM_TAB.PROG_IDENTIFIER=BHA_RUN.PROG_IDENTIFIER AND BHA_RUN.WLBR_IDENTIFIER=WELLBORE.WLBR_IDENTIFIER And BHA_RUN.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "'"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
RunInfoGetOneShWhithCommand "DDBHAHeader", Rqst

' For RUN data
WhtSt = "BHA_RUN.*"
FromSt = "BHA_RUN"                '"WELLBORE, WELL_TAB, FACILITY_TAB, COMPANY_NAME"
WhereSt = "BHA_RUN.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "'"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
RunInfoGetOneShWhithCommand "BHARun", Rqst
Dim BHARunSh As Worksheet: Set BHARunSh = TWb.Worksheets("BHARun")

' For Mud data
WhtSt = "b.DLWS_CUR_HOLE_MD, c.*"
FromSt = "DAILY_RUN_STATUS a, DAILY_WELL_STATUS b, DAILY_MUD_REPORT c"
WhereSt = "a.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' and a.DLRP_IDENTIFIER=b.DLRP_IDENTIFIER and a.DLRP_IDENTIFIER=c.DLRP_IDENTIFIER"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
'RunInfoGetOneShWhithCommand "MudDDR", Rqst



If Not ShIsExist("MPRReport", TWb) Then
    MsgBox "No Data in ADV for SlideSheet with this BHA!"
    Exit Sub
End If

Dim MPRReport As Worksheet: Set MPRReport = TWb.Sheets("MPRReport")

If BHARunSh.Cells(2, 5) <> 1 Then
    SlSh.Range("A11:AO1000").ClearContents
    ATKRunIdentifire = False
Else
    SlSh.Range("A11:AA1000").ClearContents
    SlSh.Range("AD11:AO1000").ClearContents
    ATKRunIdentifire = True
End If

SlSh.Cells(5, 30).ClearContents
UvatSh.Range("A17:AU2500").ClearContents


i = 2
j = 11
u = 17
 
Do While MPRReport.Cells(i, 1) <> ""


    SlSh.Cells(j, 1) = MPRReport.Cells(i, 8)
    SlSh.Cells(j, 2) = MPRReport.Cells(i, 8)
    SlSh.Cells(j, 3) = MPRReport.Cells(i, 9)
    SlSh.Cells(j, 4) = (MPRReport.Cells(i, 9) - MPRReport.Cells(i, 8)) * 24
    SlSh.Cells(j, 5) = TrlOprtions(CStr(MPRReport.Cells(i, 2)))
    CircTime = CircTime + SlSh.Cells(j, 4)
    
    UvatSh.Cells(u, 2) = MPRReport.Cells(i, 8)
    UvatSh.Cells(u, 3) = MPRReport.Cells(i, 8)
    UvatSh.Cells(u, 4) = MPRReport.Cells(i, 9)
    If u = 17 Then
        UvatSh.Cells(u, 1) = 1
    Else
        UvatSh.Cells(u, 1) = DateDiff("d", UvatSh.Cells(17, 2), UvatSh.Cells(u, 2)) + 1
    End If
    
    If MPRReport.Cells(i, 1) = "C" Then
        If InStr(1, CStr(MPRReport.Cells(i, 35)), "TFO") <> 0 Then
            UvatSh.Cells(u, 5) = (MPRReport.Cells(i, 9) - MPRReport.Cells(i, 8)) * 24
            TFOTime = TFOTime + UvatSh.Cells(u, 5)
        Else
                If InStr(1, CStr(MPRReport.Cells(i, 35)), "Survey") <> 0 Then
                    UvatSh.Cells(u, 6) = (MPRReport.Cells(i, 9) - MPRReport.Cells(i, 8)) * 24
                    SurveyTime = SurveyTime + UvatSh.Cells(u, 6)
                Else
                    UvatSh.Cells(u, 8) = (MPRReport.Cells(i, 9) - MPRReport.Cells(i, 8)) * 24
                    WashTime = WashTime + UvatSh.Cells(u, 8)
                End If
        End If
    Else
        
        
        
    End If
    
    
    If MPRReport.Cells(i, 1) = "DL" Then DlTime = DlTime + SlSh.Cells(j, 4)
    If MPRReport.Cells(i, 1) = "D" Or MPRReport.Cells(i, 1) = "DC" Or MPRReport.Cells(i, 1) = "H" Or MPRReport.Cells(i, 1) = "O" Or MPRReport.Cells(i, 1) = "R" Or MPRReport.Cells(i, 1) = "RO" Or MPRReport.Cells(i, 1) = "S" Then
        
        UvatSh.Cells(u, 9) = (MPRReport.Cells(i, 9) - MPRReport.Cells(i, 8)) * 24
        If MPRReport.Cells(i, 1) = "O" Then
            UvatSh.Cells(u, 16) = MPRReport.Cells(i, 13)
            UvatSh.Cells(u, 17) = MPRReport.Cells(i, 14)
            UvatSh.Cells(u, 18) = MPRReport.Cells(i, 15)
            UvatSh.Cells(u, 19) = MPRReport.Cells(i, 16) * ROPCons
        Else
            UvatSh.Cells(u, 9) = MPRReport.Cells(i, 13)
            UvatSh.Cells(u, 10) = MPRReport.Cells(i, 14)
            UvatSh.Cells(u, 11) = MPRReport.Cells(i, 15)
            UvatSh.Cells(u, 13) = MPRReport.Cells(i, 16) * ROPCons
        End If
        
        
        SlSh.Cells(j, 6) = MPRReport.Cells(i, 1)
        SlSh.Cells(j, 8) = MPRReport.Cells(i, 17) * 360 / (2 * Pi)
        
        Select Case MPRReport.Cells(i, 5)
        Case 2
            SlSh.Cells(j, 7) = "HSL"
        Case 3
            SlSh.Cells(j, 7) = "HSR"
        Case 4
            SlSh.Cells(j, 7) = "M"
        Case 5
            SlSh.Cells(j, 7) = "GYR"
        Case 0
            SlSh.Cells(j, 7).ClearContents
            SlSh.Cells(j, 8).ClearContents
        End Select
        
        UvatSh.Cells(u, 14) = SlSh.Cells(j, 7)
        UvatSh.Cells(u, 15) = SlSh.Cells(j, 8)
        
           
        SlSh.Cells(j, 9) = MPRReport.Cells(i, 13)
        SlSh.Cells(j, 10) = MPRReport.Cells(i, 14)
        SlSh.Cells(j, 11) = MPRReport.Cells(i, 15)
        
        If MPRReport.Cells(i, 49) <> 0 Then SlSh.Cells(j, 12) = MPRReport.Cells(i, 49) * 100
        If MPRReport.Cells(i, 1) = "S" Then SlSh.Cells(j, 16) = MPRReport.Cells(i, 19) * 360 / (2 * Pi)
        If MPRReport.Cells(i, 1) = "H" Then SlSh.Cells(j, 13) = MPRReport.Cells(i, 50) * 100
        If MPRReport.Cells(i, 1) = "H" Then SlSh.Cells(j, 14) = MPRReport.Cells(i, 21) * 360 / (2 * Pi)
        SlSh.Cells(j, 17) = MPRReport.Cells(i, 16) * ROPCons
       End If
       
    SlSh.Cells(j, 26) = MPRReport.Cells(i, 29) * 1000
    UvatSh.Cells(u, 23) = MPRReport.Cells(i, 29) * 1000

       If MPRReport.Cells(i, 30) <> 0 Then
        SlSh.Cells(j, 28) = MPRReport.Cells(i, 30) / 100000
        UvatSh.Cells(u, 25) = MPRReport.Cells(i, 30) / 100000
    End If
    If MPRReport.Cells(i, 31) <> 0 Then
        SlSh.Cells(j, 27) = MPRReport.Cells(i, 31) / 100000
    UvatSh.Cells(u, 24) = MPRReport.Cells(i, 31) / 100000
    End If
    If MPRReport.Cells(i, 32) <> 0 Then
        SlSh.Cells(j, 29) = MPRReport.Cells(i, 32) / 100000
    End If
    
    SlSh.Cells(j, 29).Interior.Pattern = xlNone
    
    If ATKRunIdentifire Then
        If SlSh.Cells(j, 28) <> 0 Then
            If MPRReport.Cells(i, 1) = "S" Or MPRReport.Cells(i, 1) = "H" Or MPRReport.Cells(i, 1) = "RO" Or MPRReport.Cells(i, 1) = "DC" Or MPRReport.Cells(i, 1) = "D" Then
                SlSh.Cells(j, 27).FormulaR1C1 = "=IF(RC[1]<>0,RC[1]-RC[2],"""")"
                If SlSh.Cells(j, 29) = "" Then
                    SlSh.Cells(j, 29).Interior.Color = 15773696
                Else
                    SlSh.Cells(j, 29).Interior.Pattern = xlNone
                End If
            End If
            
            UvatSh.Cells(u, 24) = MPRReport.Cells(i, 30) / 100000
        End If
    Else
    
    End If
    If MPRReport.Cells(i, 25) <> 0 Then
        SlSh.Cells(j, 30) = MPRReport.Cells(i, 25) / 10000
        UvatSh.Cells(u, 20) = MPRReport.Cells(i, 25) / 10000
    End If
    If MPRReport.Cells(i, 22) <> 0 Then
        SlSh.Cells(j, 31) = MPRReport.Cells(i, 22) * 60
        UvatSh.Cells(u, 21) = MPRReport.Cells(i, 22) * 60
    End If
    If MPRReport.Cells(i, 24) <> 0 Then
        SlSh.Cells(j, 32) = MPRReport.Cells(i, 24) / 1000
        UvatSh.Cells(u, 26) = MPRReport.Cells(i, 24) / 1000
    End If
    If MPRReport.Cells(i, 23) <> 0 Then
        SlSh.Cells(j, 33) = MPRReport.Cells(i, 23) / 1000
        UvatSh.Cells(u, 27) = MPRReport.Cells(i, 23) / 1000
    End If
    If MPRReport.Cells(i, 26) <> 0 Then
        SlSh.Cells(j, 34) = MPRReport.Cells(i, 26) * WhtCons
        UvatSh.Cells(u, 29) = MPRReport.Cells(i, 26) * WhtCons
    End If
    If MPRReport.Cells(i, 27) <> 0 Then
        SlSh.Cells(j, 35) = MPRReport.Cells(i, 27) * WhtCons
        UvatSh.Cells(u, 28) = MPRReport.Cells(i, 27) * WhtCons
    End If
    If MPRReport.Cells(i, 28) <> 0 Then
        SlSh.Cells(j, 36) = MPRReport.Cells(i, 28) * WhtCons
        UvatSh.Cells(u, 30) = MPRReport.Cells(i, 28) * WhtCons
    End If
    SlSh.Cells(j, 37) = MPRReport.Cells(i, 12) / 3600
    If MPRReport.Cells(i, 33) <> 0 Then SlSh.Cells(j, 38) = MPRReport.Cells(i, 33) / 1000
    If MPRReport.Cells(i, 35) <> 0 Then
        SlSh.Cells(j, 39) = MPRReport.Cells(i, 35)
        UvatSh.Cells(u, 44) = MPRReport.Cells(i, 35)
    End If
    If MPRReport.Cells(i, 1) = "D" Or MPRReport.Cells(i, 1) = "H" Or MPRReport.Cells(i, 1) = "O" Or MPRReport.Cells(i, 1) = "R" Or MPRReport.Cells(i, 1) = "RO" Or MPRReport.Cells(i, 1) = "S" Then
        DrilledFootage = DrilledFootage + SlSh.Cells(j, 11)
        DrilledTime = DrilledTime + SlSh.Cells(j, 4)
    End If
    If MPRReport.Cells(i, 1) = "O" Then
        DrilledSlide = DrilledSlide + SlSh.Cells(j, 11)
        DrilledSlideTime = DrilledSlideTime + SlSh.Cells(j, 4)
    
    End If
    
    j = j + 1
    i = i + 1
    u = u + 1
Loop

If DlTime <> 0 Then SlSh.Cells(5, 30) = DlTime

If DrilledFootage <> 0 And DrilledTime <> 0 Then
    SlSh.Cells(1, 21) = DrilledFootage
    UvatSh.Cells(5, 24) = DrilledFootage
    SlSh.Cells(2, 21) = DrilledFootage - DrilledSlide
    UvatSh.Cells(6, 24) = DrilledFootage - DrilledSlide
    SlSh.Cells(3, 21) = DrilledSlide
    UvatSh.Cells(7, 24) = DrilledSlide
    If DrilledTime <> 0 Then
        SlSh.Cells(4, 21) = DrilledFootage / DrilledTime
        UvatSh.Cells(8, 24) = DrilledFootage / DrilledTime
    End If
    If DrilledTime = 0 Then
        SlSh.Cells(4, 21) = ""
        UvatSh.Cells(8, 24) = ""
    End If
    SlSh.Cells(1, 25) = (DrilledFootage - DrilledSlide) * 100 / DrilledFootage
    SlSh.Cells(2, 25) = (DrilledSlide) * 100 / DrilledFootage
    UvatSh.Cells(5, 30) = (DrilledFootage - DrilledSlide) * 100 / DrilledFootage
    UvatSh.Cells(6, 30) = (DrilledSlide) * 100 / DrilledFootage
    
    If (DrilledTime - DrilledSlideTime) <> 0 Then
        SlSh.Cells(5, 21) = (DrilledFootage - DrilledSlide) / (DrilledTime - DrilledSlideTime)
        UvatSh.Cells(9, 24) = (DrilledFootage - DrilledSlide) / (DrilledTime - DrilledSlideTime)
    End If
    If DrilledSlideTime <> 0 Then
        SlSh.Cells(6, 21) = DrilledSlide / DrilledSlideTime
        UvatSh.Cells(10, 24) = DrilledSlide / DrilledSlideTime
    End If
    If DrilledSlideTime = 0 Then SlSh.Cells(6, 21) = ""

    SlSh.Cells(1, 30) = DrilledTime
    UvatSh.Cells(7, 30) = DrilledTime
    SlSh.Cells(2, 30) = DrilledTime - DrilledSlideTime
    UvatSh.Cells(12, 24) = DrilledTime - DrilledSlideTime
    SlSh.Cells(3, 30) = DrilledSlideTime
    UvatSh.Cells(11, 24) = DrilledSlideTime
    SlSh.Cells(4, 30) = CircTime
    UvatSh.Cells(8, 30) = CircTime
Else
    UvatSh.Range("X5:X12").ClearContents
    UvatSh.Range("AD5:AD12").ClearContents
End If

If SurveyTime <> 0 Then
    UvatSh.Cells(11, 30) = SurveyTime
    SlSh.Cells(6, 30) = SurveyTime
Else
    UvatSh.Cells(11, 30) = ""
    SlSh.Cells(6, 30) = ""
End If

If ShIsExist("DDBHAHeader", TWb) Then
    Dim DDBHAHeader As Worksheet: Set DDBHAHeader = TWb.Sheets("DDBHAHeader")
        SlSh.Cells(1, 3) = DDBHAHeader.Cells(2, 4)
        SlSh.Cells(2, 3) = DDBHAHeader.Cells(2, 3)
        SlSh.Cells(3, 3) = DDBHAHeader.Cells(2, 2)
        SlSh.Cells(4, 3) = DDBHAHeader.Cells(2, 1)
    Set DDBHAHeader = Nothing
End If
If ShIsExist("BHARun", TWb) Then
    Dim BHARun As Worksheet: Set BHARun = TWb.Sheets("BHARun")
        'SlSh.Cells(1, 17) = BHARun.Cells(2, 11)
        'SlSh.Cells(2, 17) = BHARun.Cells(2, 51) * 1000
        If BHARun.Cells(2, 47) <> "" Then SlSh.Cells(1, 12) = BHARun.Cells(2, 47)
        If BHARun.Cells(2, 48) <> "" Then SlSh.Cells(4, 12) = BHARun.Cells(2, 48)
    Set BHARun = Nothing
End If

If SlSh.Cells(3, 12) <> "" Then
    SlSh.Cells(1, 34) = Round((SlSh.Cells(3, 12) - SlSh.Cells(2, 12)) * 24, 2)
Else
    SlSh.Cells(3, 12) = Now()
    SlSh.Cells(1, 34) = Round((SlSh.Cells(3, 12) - SlSh.Cells(2, 12)) * 24, 2)
    SlSh.Cells(3, 12) = ""
End If
SlSh.Cells(2, 34) = Round(CircTime - DrilledTime - SurveyTime - DlTime, 2)
For Each Sh In TWb.Sheets
   If Sh.Name <> "Tabls" And Sh.Visible <> 2 Then Sh.Visible = 0
Next Sh
If j = 11 Then
    MsgBox "No Data in ADV for SlideSheet with this BHA!"
    Exit Sub
End If
    



'If SlSh.Cells(3, 12) = "" Then
'    SlSh.Cells(1, 34) = SlSh.Cells(j - 1, 3) - SlSh.Cells(2, 12)
'Else
'    SlSh.Cells(1, 34) = SlSh.Cells(j - 1, 3) - SlSh.Cells(3, 12)
'End If



Dim SlShWsrv As Worksheet: Set SlShWsrv = TWb.Sheets("FullSlideSheetWithSurvey")

i = 11
Do While i < 1000
    If SlShWsrv.Cells(i, 8).Interior.ThemeColor = xlThemeColorDark1 Then
        SlShWsrv.Rows(i).Delete
        i = i - 1
    End If
i = i + 1
Loop

SlShWsrv.Range("A1:AO1000").Value = SlSh.Range("A1:AO1000").Value
SurveyToSlidsheetFromWPGFact SlShWsrv
SurveyToUvatNGSlideSheetFromWPGFact UvatSh
If j <> 11 Then MsgBox "SlideSheet was imported!"

Set Sh = Nothing
Set TWb = Nothing
Set SlSh = Nothing
End Sub

Sub SurveyToSlidsheetFromWPGFact(ByRef SlSh As Worksheet)
Dim TWb As Workbook: Set TWb = ThisWorkbook
If Not ShIsExist("WPGFact", TWb) Then
    Exit Sub
End If
Dim WPGFactSh As Worksheet: Set WPGFactSh = TWb.Sheets("WPGFact")
Dim m As Integer
For m = 20 To WPGFactSh.UsedRange.Rows.Count
    If WPGFactSh.Cells(m, 1) = "MD" Then Exit For
Next m
If WPGFactSh.Cells(m, 1) <> "MD" Then
    MsgBox "Import WGR fact for surveys!"
    Exit Sub
End If
Dim k As Integer
k = m + 2
Do While WPGFactSh.Cells(k, 1) <> ""
k = k + 1
Loop
k = k - 1

Dim i As Integer
Dim j As Integer
Dim n As Integer
Dim l As Integer
i = 11
Do While SlSh.Cells(i, 1) <> ""
    l = 0
    If SlSh.Cells(i, 9) <> "" And SlSh.Cells(i, 10) <> "" And SlSh.Cells(i, 11) <> "" Then
        For n = m + 2 To k
            If WPGFactSh.Cells(n, 1) > SlSh.Cells(i, 9) And WPGFactSh.Cells(n, 1) <= SlSh.Cells(i, 10) Then
                SlSh.Rows(i + 1 + l).Insert Shift:=xlUp, CopyOrigin:=xlFormatFromLeftOrAbove
                SlSh.Range("A" & i + 1 + l & ":AO" & i + 1 + l).Interior.ThemeColor = xlThemeColorDark1
                SlSh.Range("A" & i + 1 + l & ":AO" & i + 1 + l).Interior.TintAndShade = -0.249977111117893
                SlSh.Cells(i + 1 + l, 18) = WPGFactSh.Cells(n, 1)
                SlSh.Cells(i + 1 + l, 19) = WPGFactSh.Cells(n, 2)
                SlSh.Cells(i + 1 + l, 20) = WPGFactSh.Cells(n, 3)
                SlSh.Cells(i + 1 + l, 21) = WPGFactSh.Cells(n, 4)
                SlSh.Cells(i + 1 + l, 22) = WPGFactSh.Cells(n, 12)
                SlSh.Cells(i + 1 + l, 23) = WPGFactSh.Cells(n, 14)
                SlSh.Cells(i + 1 + l, 24) = WPGFactSh.Cells(n, 15)
                SlSh.Cells(i + 1 + l, 25) = WPGFactSh.Cells(n, 13)
                SlSh.Cells(i + 1 + l, 39) = "Survey point"
                SlSh.Cells(i + 1 + l, 1) = "Survey point"
                l = l + 1
            End If
        Next n
    End If
i = i + 1
Loop

End Sub

Sub SurveyToUvatNGSlideSheetFromWPGFact(ByRef SlSh As Worksheet)
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim FromMD As Double
Dim ToMD As Double
If Not ShIsExist("WPGFact", TWb) Then
    Exit Sub
End If
Dim WPGFactSh As Worksheet: Set WPGFactSh = TWb.Sheets("WPGFact")
Dim m As Integer
For m = 20 To WPGFactSh.UsedRange.Rows.Count
    If WPGFactSh.Cells(m, 1) = "MD" Then Exit For
Next m
If WPGFactSh.Cells(m, 1) <> "MD" Then
    Exit Sub
End If
Dim k As Integer
k = m + 2
Do While WPGFactSh.Cells(k, 1) <> ""
k = k + 1
Loop
k = k - 1

Dim i As Integer
Dim j As Integer
Dim n As Integer
Dim l As Integer
i = 17
Do While SlSh.Cells(i, 1) <> ""
    If SlSh.Cells(i, 12) <> "" Or SlSh.Cells(i, 10) <> "" And SlSh.Cells(i, 18) <> "" Then
        If SlSh.Cells(i, 12) <> "" Then
            FromMD = SlSh.Cells(i, 10)
            ToMD = SlSh.Cells(i, 11)
        Else
            FromMD = SlSh.Cells(i, 16)
            ToMD = SlSh.Cells(i, 17)
        End If
    
        For n = m + 2 To k
            If WPGFactSh.Cells(n, 1) > FromMD And WPGFactSh.Cells(n, 1) <= ToMD Then
                SlSh.Cells(i, 31) = WPGFactSh.Cells(n, 1)
                SlSh.Cells(i, 32) = WPGFactSh.Cells(n, 2)
                SlSh.Cells(i, 33) = WPGFactSh.Cells(n, 3)
                SlSh.Cells(i, 34) = WPGFactSh.Cells(n, 4)
                SlSh.Cells(i, 35) = WPGFactSh.Cells(n, 12)
                SlSh.Cells(i, 36) = WPGFactSh.Cells(n, 14)
                SlSh.Cells(i, 37) = WPGFactSh.Cells(n, 15)
            End If
        Next n
    End If
i = i + 1
Loop

End Sub
Function TrlOprtions(OprtionsName As String) As String
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim Sh As Worksheet: Set Sh = TWb.Sheets("Translate")
Dim i As Integer
If OprtionsName = "" Or OprtionsName = "NULL" Then
    TrlOprtions = ""
    Exit Function
End If
If Not ShIsExist("Translate", TWb) Then
    TrlOprtions = OprtionsName
    Exit Function
End If
i = 2
Do While Sh.Cells(i, 25) <> "" And i < 1000
    If Sh.Cells(i, 25) = OprtionsName Then
        TrlOprtions = Sh.Cells(i, 26)
        Exit Function
    End If
i = i + 1
Loop
TrlOprtions = InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|: " & OprtionsName, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
If TrlOprtions <> "" Then
Sh.Cells(i, 25) = OprtionsName
Sh.Cells(i, 26) = TrlOprtions
Else
TrlOprtions = OprtionsName
End If
End Function



Attribute VB_Name = "For_Ploting"
Option Base 1
Sub PlotUpdate()
Application.ScreenUpdating = False
PlotsCalcForPlan
PlotsCalcForFact
Application.ScreenUpdating = True
End Sub

Sub PlotsCalcForPlan()
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim i As Double
Dim j As Double
Dim WPGPlanArr()
Dim N1, N2, N3, N4, TVD, VS1, VS2 As Double
Dim Arr As Variant

VS1 = 1000000
VS2 = -1000000
N1 = 1000000
N2 = -1000000
E1 = 1000000
E2 = -1000000

If Not ShIsExist("WPGPlan", TWb) Or Not ShIsExist("Plots", TWb) Then
    Exit Sub
End If
Dim WPGPlanSh As Worksheet: Set WPGPlanSh = TWb.Sheets("WPGPlan")
Dim Plots As Worksheet: Set Plots = TWb.Sheets("Plots")
If WPGPlanSh.UsedRange.Rows.Count < 22 Then
    MsgBox "Import WGR Plan for Plot it!"
    Exit Sub
End If

Plots.Range("A10:H10000").ClearContents

For i = 20 To WPGPlanSh.UsedRange.Rows.Count - 1
    If WPGPlanSh.Cells(i, 1) = "MD" Then Exit For
Next i
If WPGPlanSh.Cells(i, 1) <> "MD" Then
    MsgBox "Import WGR Plan for Plot it!"
    Exit Sub
End If
i = i + 3
j = 10
Do While WPGPlanSh.Cells(i, 1) <> ""

If N1 > CDbl(WPGPlanSh.Cells(i, 6)) Then N1 = CDbl(WPGPlanSh.Cells(i, 6))
If N2 < CDbl(WPGPlanSh.Cells(i, 6)) Then N2 = CDbl(WPGPlanSh.Cells(i, 6))
If E1 > CDbl(WPGPlanSh.Cells(i, 7)) Then E1 = CDbl(WPGPlanSh.Cells(i, 7))
If E2 < CDbl(WPGPlanSh.Cells(i, 7)) Then E2 = CDbl(WPGPlanSh.Cells(i, 7))
If VS1 > CDbl(WPGPlanSh.Cells(i, 16)) Then VS1 = CDbl(WPGPlanSh.Cells(i, 16))
If VS2 < CDbl(WPGPlanSh.Cells(i, 16)) Then VS2 = CDbl(WPGPlanSh.Cells(i, 16))
If TVD < CDbl(WPGPlanSh.Cells(i, 4)) Then TVD = CDbl(WPGPlanSh.Cells(i, 4))

    Plots.Cells(j, 1) = WPGPlanSh.Cells(i, 1)
    Plots.Cells(j, 2) = WPGPlanSh.Cells(i, 2)
    Plots.Cells(j, 3) = WPGPlanSh.Cells(i, 3)
    Plots.Cells(j, 4) = WPGPlanSh.Cells(i, 4)
    Plots.Cells(j, 5) = WPGPlanSh.Cells(i, 5)
    Plots.Cells(j, 6) = WPGPlanSh.Cells(i, 6)
    Plots.Cells(j, 7) = WPGPlanSh.Cells(i, 7)
    Plots.Cells(j, 8).FormulaR1C1 = "=VerticalSection(RC[-2],RC[-1],R4C13)"
    j = j + 1
    i = i + 1
Loop

Arr = TVD_VS_limits(TVD, VS1, VS2)

Set Chrt = Plots.ChartObjects("Chart 2").Chart

Chrt.Axes(xlCategory).MinimumScale = Arr(2)
Chrt.Axes(xlCategory).MaximumScale = Arr(3)
Chrt.Axes(xlValue).MinimumScale = 0
Chrt.Axes(xlValue).MaximumScale = Arr(1)



Arr = N_E_limits(N1, N2, E1, E2)
Set Chrt = Plots.ChartObjects("Chart 3").Chart
Chrt.Axes(xlCategory).MinimumScale = Arr(3)
Chrt.Axes(xlCategory).MaximumScale = Arr(4)
Chrt.Axes(xlValue).MinimumScale = Arr(1)
Chrt.Axes(xlValue).MaximumScale = Arr(2)
    Plots.Cells(4, 13) = ClosureAzi(WPGPlanSh.Cells(i - 1, 6), WPGPlanSh.Cells(i - 1, 7))
End Sub
Sub PlotsCalcForFact()
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim i As Double
Dim j As Double
If Not ShIsExist("WPGFact", TWb) Or Not ShIsExist("Plots", TWb) Then
    Exit Sub
End If
Dim WPGFactSh As Worksheet: Set WPGFactSh = TWb.Sheets("WPGFact")
Dim Plots As Worksheet: Set Plots = TWb.Sheets("Plots")
If WPGFactSh.UsedRange.Rows.Count < 21 Then
    MsgBox "Import WGR Fact for Plot it!"
    Exit Sub
End If
Plots.Range("I10:S10000").ClearContents
For i = 20 To WPGFactSh.UsedRange.Rows.Count - 1
    If WPGFactSh.Cells(i, 1) = "MD" Then Exit For
Next i
If WPGFactSh.Cells(i, 1) <> "MD" Then
    MsgBox "Import WGR Fact for Plot it!"
    Exit Sub
End If
i = i + 3
j = 10
Do While WPGFactSh.Cells(i, 1) <> ""
    Plots.Cells(j, 9) = WPGFactSh.Cells(i, 1)
    Plots.Cells(j, 10) = WPGFactSh.Cells(i, 2)
    Plots.Cells(j, 11) = WPGFactSh.Cells(i, 3)
    Plots.Cells(j, 12) = WPGFactSh.Cells(i, 4)
    Plots.Cells(j, 13) = WPGFactSh.Cells(i, 5)
    Plots.Cells(j, 14) = WPGFactSh.Cells(i, 6)
    Plots.Cells(j, 15) = WPGFactSh.Cells(i, 7)
    Plots.Cells(j, 16).FormulaR1C1 = "=VerticalSection(RC[-2],RC[-1],R4C13)"
    j = j + 1
    i = i + 1
Loop
End Sub
Function VerticalSection(n As Double, E As Double, AziVS As Double) As Double
Dim Closure As Double
Dim ClosureAzi As Double
Dim AziVSRad As Double
Dim Pi As Double
Dim DeltaAzi As Double
Pi = 3.14159265358979
AziVSRad = AziVS * Pi / 180
Closure = Sqr(n * n + E * E)
If n <> 0 Then
    If n > 0 Then
        ClosureAzi = Atn(E / n)
        If ClosureAzi < 0 Then ClosureAzi = ClosureAzi + 2 * Pi
    Else
        ClosureAzi = Atn(E / n) + Pi
    End If
Else
    ClosureAzi = 0
End If
DeltaAzi = AziVSRad - ClosureAzi
VerticalSection = Closure * Cos(DeltaAzi)
End Function
Function ClosureAzi(n As Double, E As Double) As Double
Dim Closure As Double
Dim AziVSRad As Double
Dim Pi As Double
Pi = 3.14159265358979
Closure = Sqr(n * n + E * E)
If n <> 0 Then
    If n > 0 Then
        ClosureAzi = Atn(E / n)
        If ClosureAzi < 0 Then ClosureAzi = ClosureAzi + 2 * Pi
    Else
        ClosureAzi = Atn(E / n) + Pi
    End If
Else
    ClosureAzi = 0
End If
ClosureAzi = ClosureAzi * 180 / Pi
End Function
Function N_E_limits(ByVal N1 As Double, ByVal N2 As Double, ByVal E1 As Double, ByVal E2 As Double) As Variant
ReDim Arr(1 To 4)

Dim DeltaN As Double
Dim DeltaE As Double

DeltaN = N2 - N1
DeltaE = E2 - E1

If Abs(DeltaN) > Abs(DeltaE) Then
    Arr(3) = Abs(DeltaE) / 2 + E1 - Abs(DeltaN / 2)
    Arr(4) = Abs(DeltaE) / 2 + E1 + Abs(DeltaN / 2)
    Arr(1) = Abs(DeltaN) / 2 + N1 - Abs(DeltaN / 2)
    Arr(2) = Abs(DeltaN) / 2 + N1 + Abs(DeltaN / 2)
Else
    Arr(1) = Abs(DeltaN) / 2 + N1 - Abs(DeltaE / 2)
    Arr(2) = Abs(DeltaN) / 2 + N1 + Abs(DeltaE / 2)
    Arr(3) = Abs(DeltaE) / 2 + E1 - Abs(DeltaE / 2)
    Arr(4) = Abs(DeltaE) / 2 + E1 + Abs(DeltaE / 2)
End If


Arr(3) = Arr(3) - 50
Arr(4) = Arr(4) + 50
Arr(1) = Arr(1) - 50
Arr(2) = Arr(2) + 50
Arr(1) = Round(Arr(1) / 50, 0) * 50
Arr(2) = Round(Arr(2) / 50, 0) * 50
Arr(3) = Round(Arr(3) / 50, 0) * 50
Arr(4) = Round(Arr(4) / 50, 0) * 50
N_E_limits = Arr
End Function
Function TVD_VS_limits(ByVal TVD As Double, ByVal VS1 As Double, ByVal VS2 As Double) As Variant
ReDim Arr(1 To 3)
Dim DeltaVS As Double
DeltaVS = VS2 - VS1
If Abs(TVD) > Abs(DeltaVS) Then
    Arr(1) = TVD
    Arr(2) = Abs(DeltaVS) / 2 + VS1 - TVD / 2
    Arr(3) = Abs(DeltaVS) / 2 + VS1 + TVD / 2
Else
    Arr(1) = DeltaVS
    Arr(2) = VS1
    Arr(3) = VS2
End If
Arr(1) = Arr(1) + 200
Arr(2) = Arr(2) - 100
Arr(3) = Arr(3) + 100
Arr(1) = Round(Arr(1) / 100, 0) * 100
Arr(2) = Round(Arr(2) / 50, 0) * 50
Arr(3) = Round(Arr(3) / 50, 0) * 50
TVD_VS_limits = Arr
End Function

Attribute VB_Name = "For_RUN_KPI"
Sub ApdateKPI()
DDIFact2
DDIPlan2
Dim TWb As Workbook: Set TWb = ThisWorkbook
If Not ShIsExist("Slidesheet", TWb) Then
    Exit Sub
End If
Dim SlSh As Worksheet: Set SlSh = TWb.Sheets("Slidesheet")
Dim KPISh As Worksheet: Set KPISh = TWb.Sheets("RUN KPI")
Dim Chr As Chart
KPISh.Range("Y8:AJ37").ClearContents
Dim i As Integer
Dim j As Integer: j = 8
Dim Dt As String: Dt = CStr(Format(SlSh.Cells(9, 1), "dd/mm/yyyy"))
Dim Dttmp As String: Dttmp = CStr(Format(SlSh.Cells(9, 1), "dd/mm/yyyy"))
Dim MTRS As Double
Dim RotMTRS As Double
Dim SldMTRS As Double
Dim DHrs As Double
Dim RotHrs As Double
Dim SldHrs As Double
For i = 9 To 1000
    If SlSh.Cells(i, 1) <> "" Or i = 1000 Then
        Dttmp = CStr(Format(SlSh.Cells(i, 1), "dd/mm/yyyy"))
        If Dt <> Dttmp Then
            Dt = Dttmp
            KPISh.Cells(j, 25) = j - 7
            KPISh.Cells(j, 26) = MTRS
            KPISh.Cells(j, 27) = RotMTRS
            KPISh.Cells(j, 28) = SldMTRS
            If MTRS <> 0 Then KPISh.Cells(j, 29) = RotMTRS / MTRS
            If MTRS <> 0 Then KPISh.Cells(j, 30) = SldMTRS / MTRS
            KPISh.Cells(j, 31) = DHrs
            KPISh.Cells(j, 32) = RotHrs
            KPISh.Cells(j, 33) = SldHrs
            If DHrs <> 0 Then KPISh.Cells(j, 34) = MTRS / DHrs
            If RotHrs <> 0 Then KPISh.Cells(j, 35) = RotMTRS / RotHrs
            If SldHrs <> 0 Then KPISh.Cells(j, 36) = SldMTRS / SldHrs
            MTRS = 0
            RotMTRS = 0
            SldMTRS = 0
            DHrs = 0
            RotHrs = 0
            SldHrs = 0
            j = j + 1
            If j = 38 Then Exit Sub
        Else
            MTRS = MTRS + SlSh.Cells(i, 10)
            If SlSh.Cells(i, 5) = "R" Or SlSh.Cells(i, 5) = "RO" Or SlSh.Cells(i, 5) = "H" Then RotMTRS = RotMTRS + SlSh.Cells(i, 10)
            If SlSh.Cells(i, 5) = "O" Or SlSh.Cells(i, 5) = "S" Then SldMTRS = SldMTRS + SlSh.Cells(i, 10)
            DHrs = DHrs + SlSh.Cells(i, 4)
            If SlSh.Cells(i, 5) = "R" Or SlSh.Cells(i, 5) = "RO" Or SlSh.Cells(i, 5) = "H" Then RotHrs = RotHrs + SlSh.Cells(i, 4)
            If SlSh.Cells(i, 5) = "O" Or SlSh.Cells(i, 5) = "S" Then SldHrs = SldHrs + SlSh.Cells(i, 4)
        End If
                
    End If
Next i

Set Chr = KPISh.ChartObjects("Chart12").Chart
Chr.SeriesCollection(1).Values = "='RUN KPI'!$AA$8:$AA$" & CStr(j - 1)
Chr.SeriesCollection(2).Values = "='RUN KPI'!$AB$8:$AB$" & CStr(j - 1)
Chr.SeriesCollection(3).Values = "='RUN KPI'!$AJ$8:$AJ$" & CStr(j - 1)

Set Chr = KPISh.ChartObjects("Chart13").Chart
Chr.SeriesCollection(1).Values = "='RUN KPI'!$AF$8:$AF$" & CStr(j - 1)
Chr.SeriesCollection(2).Values = "='RUN KPI'!$AG$8:$AG$" & CStr(j - 1)

Set Chr = KPISh.ChartObjects("Chart15").Chart
Chr.SeriesCollection(1).Values = "='RUN KPI'!$AC$8:$AC$" & CStr(j - 1)
Chr.SeriesCollection(2).Values = "='RUN KPI'!$AD$8:$AD$" & CStr(j - 1)

Set Chr = KPISh.ChartObjects("Chart14").Chart
Chr.SeriesCollection(1).Values = "='RUN KPI'!$AN$8:$AN$" & CStr(j - 1)
Chr.SeriesCollection(2).Values = "='RUN KPI'!$AO$8:$AO$" & CStr(j - 1)

End Sub

Attribute VB_Name = "For_SlideSheet"
Sub SlideSheet(BHAR_IDENTIFIER As String)
Dim WhtSt As String
Dim FromSt As String
Dim WhereSt As String
Dim Rqst As String
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim SlSh As Worksheet: Set SlSh = TWb.Sheets("Slidesheet")
Dim Sh As Worksheet
Dim i As Integer
Dim j As Integer
Dim Pi As Double: Pi = 3.1415926
Dim ROPCons As Double: ROPCons = 3600
Dim WhtCons As Double: WhtCons = 0.000101971621
' For MPRReport
WhtSt = "CAT_DP_OPERATING_MODE.CDPO_SHORT_NAME, CAT_DP_OPERATING_MODE.CDPO_LONG_NAME, BHA_DRILLING_PARAMETERS.*"
FromSt = "BHA_DRILLING_PARAMETERS,CAT_DP_OPERATING_MODE"
WhereSt = "CAT_DP_OPERATING_MODE.CDPO_IDENTIFIER=BHA_DRILLING_PARAMETERS.CDPO_IDENTIFIER AND BHA_DRILLING_PARAMETERS.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' ORDER BY BHA_DRILLING_PARAMETERS.BDRP_END_TIME"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
RunInfoGetOneShWhithCommand "MPRReport", Rqst
' For DDBHAHeader
WhtSt = "WELLBORE.WLBR_NAME, FACILITY_TAB.FCTY_NAME, OBJECT_OF_INTEREST_TAB.OOIN_NAME, COMPANY_NAME.CPNM_NAME"
FromSt = "BHA_RUN, WELLBORE, PROGRAM_TAB, FACILITY_TAB, OBJECT_OF_INTEREST_TAB, OBJECT_TO_FACILITY, COMPANY_NAME"                '"WELLBORE, WELL_TAB, FACILITY_TAB, COMPANY_NAME"
WhereSt = "COMPANY_NAME.CPNM_IDENTIFIER=PROGRAM_TAB.CPNM_IDENTIFIER AND OBJECT_TO_FACILITY.FCTY_IDENTIFIER=FACILITY_TAB.FCTY_IDENTIFIER AND OBJECT_OF_INTEREST_TAB.OOIN_IDENTIFIER=OBJECT_TO_FACILITY.OOIN_IDENTIFIER AND PROGRAM_TAB.FCTY_IDENTIFIER=FACILITY_TAB.FCTY_IDENTIFIER AND PROGRAM_TAB.PROG_IDENTIFIER=BHA_RUN.PROG_IDENTIFIER AND BHA_RUN.WLBR_IDENTIFIER=WELLBORE.WLBR_IDENTIFIER And BHA_RUN.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "'"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
RunInfoGetOneShWhithCommand "DDBHAHeader", Rqst
' For RUN data
WhtSt = "BHA_RUN.*"
FromSt = "BHA_RUN"                '"WELLBORE, WELL_TAB, FACILITY_TAB, COMPANY_NAME"
WhereSt = "BHA_RUN.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "'"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
RunInfoGetOneShWhithCommand "BHARun", Rqst

If Not ShIsExist("MPRReport", TWb) Then
MsgBox "No Data in ADV for SlideSheet with this BHA!"
Exit Sub
End If
Dim MPRReport As Worksheet: Set MPRReport = TWb.Sheets("MPRReport")
SlSh.Range("A9:AO1000").ClearContents
SlSh.Range("C1:D4").ClearContents
SlSh.Range("Q1:Q4").ClearContents
SlSh.Range("U1:U4").ClearContents
SlSh.Range("AD2:AD4").ClearContents

SurveyDeleteFromSlidsheet

Application.ScreenUpdating = False
Application.DisplayAlerts = False
i = 2
j = 9
Do While MPRReport.Cells(i, 1) <> ""
    If MPRReport.Cells(i, 1) = "D" Or MPRReport.Cells(i, 1) = "DC" Or MPRReport.Cells(i, 1) = "H" Or MPRReport.Cells(i, 1) = "O" Or MPRReport.Cells(i, 1) = "R" Or MPRReport.Cells(i, 1) = "RO" Or MPRReport.Cells(i, 1) = "S" Then
        SlSh.Cells(j, 1) = MPRReport.Cells(i, 8)
        SlSh.Cells(j, 2) = MPRReport.Cells(i, 8)
        SlSh.Cells(j, 3) = MPRReport.Cells(i, 9)
        SlSh.Cells(j, 4) = MPRReport.Cells(i, 10) / 3600
        SlSh.Cells(j, 5) = MPRReport.Cells(i, 1)
        SlSh.Cells(j, 7) = MPRReport.Cells(i, 17) * 360 / (2 * Pi)
        Select Case MPRReport.Cells(i, 5)
        Case 2
            SlSh.Cells(j, 6) = "HSL"
        Case 3
            SlSh.Cells(j, 6) = "HSR"
        Case 4
            SlSh.Cells(j, 6) = "M"
        Case 5
            SlSh.Cells(j, 6) = "GYR"
        Case 0
            SlSh.Cells(j, 6).ClearContents
            SlSh.Cells(j, 7).ClearContents
        End Select
        
        SlSh.Cells(j, 8) = MPRReport.Cells(i, 13)
        SlSh.Cells(j, 9) = MPRReport.Cells(i, 14)
        SlSh.Cells(j, 10) = MPRReport.Cells(i, 15)
        If MPRReport.Cells(i, 49) <> 0 Then SlSh.Cells(j, 11) = MPRReport.Cells(i, 49) * 100
        If MPRReport.Cells(i, 1) = "S" Then SlSh.Cells(j, 12) = MPRReport.Cells(i, 19) * 360 / (2 * Pi)
        If MPRReport.Cells(i, 1) = "H" Then SlSh.Cells(j, 13) = MPRReport.Cells(i, 50) * 100
        If MPRReport.Cells(i, 1) = "H" Then SlSh.Cells(j, 14) = MPRReport.Cells(i, 21) * 360 / (2 * Pi)
        
        SlSh.Cells(j, 17) = MPRReport.Cells(i, 16) * ROPCons
        SlSh.Cells(j, 28) = MPRReport.Cells(i, 29) * 1000
        If MPRReport.Cells(i, 30) <> 0 Then SlSh.Cells(j, 29) = MPRReport.Cells(i, 30) / 100000
        If MPRReport.Cells(i, 31) <> 0 Then SlSh.Cells(j, 30) = MPRReport.Cells(i, 31) / 100000
        If MPRReport.Cells(i, 32) <> 0 Then SlSh.Cells(j, 31) = MPRReport.Cells(i, 32) / 100000
        If MPRReport.Cells(i, 25) <> 0 Then SlSh.Cells(j, 32) = MPRReport.Cells(i, 25) / 10000
        If MPRReport.Cells(i, 22) <> 0 Then SlSh.Cells(j, 33) = MPRReport.Cells(i, 22) * 60
        If MPRReport.Cells(i, 24) <> 0 Then SlSh.Cells(j, 34) = MPRReport.Cells(i, 24) / 1000
        If MPRReport.Cells(i, 23) <> 0 Then SlSh.Cells(j, 35) = MPRReport.Cells(i, 23) / 1000
        If MPRReport.Cells(i, 26) <> 0 Then SlSh.Cells(j, 36) = MPRReport.Cells(i, 26) * WhtCons
        If MPRReport.Cells(i, 27) <> 0 Then SlSh.Cells(j, 37) = MPRReport.Cells(i, 27) * WhtCons
        If MPRReport.Cells(i, 28) <> 0 Then SlSh.Cells(j, 38) = MPRReport.Cells(i, 28) * WhtCons
        If MPRReport.Cells(i, 33) <> 0 Then SlSh.Cells(j, 40) = MPRReport.Cells(i, 33) / 1000
        If MPRReport.Cells(i, 35) <> 0 Then SlSh.Cells(j, 41) = MPRReport.Cells(i, 35)
        j = j + 1
    End If
i = i + 1
Loop


If ShIsExist("DDBHAHeader", TWb) Then
    Dim DDBHAHeader As Worksheet: Set DDBHAHeader = TWb.Sheets("DDBHAHeader")
        SlSh.Cells(1, 3) = DDBHAHeader.Cells(2, 4)
        SlSh.Cells(2, 3) = DDBHAHeader.Cells(2, 3)
        SlSh.Cells(3, 3) = DDBHAHeader.Cells(2, 2)
        SlSh.Cells(4, 3) = DDBHAHeader.Cells(2, 1)
    Set DDBHAHeader = Nothing
End If
If ShIsExist("BHARun", TWb) Then
    Dim BHARun As Worksheet: Set BHARun = TWb.Sheets("BHARun")
        SlSh.Cells(1, 17) = BHARun.Cells(2, 11)
        SlSh.Cells(2, 17) = BHARun.Cells(2, 51) * 1000
        SlSh.Cells(1, 21) = BHARun.Cells(2, 16) - BHARun.Cells(2, 14)
        
        If BHARun.Cells(2, 66) <> 0 Then SlSh.Cells(2, 21) = BHARun.Cells(2, 66)
        If BHARun.Cells(2, 70) <> 0 Then SlSh.Cells(2, 21) = BHARun.Cells(2, 70) + BHARun.Cells(2, 74)
        If BHARun.Cells(2, 68) <> 0 Then SlSh.Cells(3, 21) = BHARun.Cells(2, 68)
        If BHARun.Cells(2, 72) <> 0 Then SlSh.Cells(3, 21) = BHARun.Cells(2, 72)
        SlSh.Cells(4, 21) = BHARun.Cells(2, 18) * ROPCons
        
        If BHARun.Cells(2, 67) <> 0 Then SlSh.Cells(2, 30) = BHARun.Cells(2, 67) / 3600
        If BHARun.Cells(2, 71) <> 0 Then SlSh.Cells(2, 30) = (BHARun.Cells(2, 71) + BHARun.Cells(2, 75)) / 3600
        If BHARun.Cells(2, 69) <> 0 Then SlSh.Cells(3, 30) = BHARun.Cells(2, 69) / 3600
        If BHARun.Cells(2, 73) <> 0 Then SlSh.Cells(3, 30) = BHARun.Cells(2, 73) / 3600
        SlSh.Cells(4, 30) = BHARun.Cells(2, 76) / 3600
        SlSh.Cells(1, 34) = (BHARun.Cells(2, 48) - BHARun.Cells(2, 47)) * 24
    Set BHARun = Nothing
End If

For Each Sh In TWb.Sheets
   If Sh.Name <> "Tabls" And Sh.Visible <> 2 Then Sh.Visible = 0
Next Sh
'If j = 9 Then MsgBox "No Data in ADV for SlideSheet with this BHA!"
'If j <> 9 Then MsgBox "SlideSheet was imported!"

'TWb.Sheets("BHARun").Visible = -1
SlSh.Visible = -1
SlSh.Select
Set Sh = Nothing
Set TWb = Nothing
Set SlSh = Nothing
End Sub



Attribute VB_Name = "For_SurveyImport"
Sub ImportSurvey(BHAR_IDENTIFIER As String)
Application.ScreenUpdating = False
Application.DisplayAlerts = False
Dim WhtSt As String
Dim FromSt As String
Dim WhereSt As String
Dim Rqst As String
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim SrvSh As Worksheet: Set SrvSh = TWb.Sheets("Survey")
Dim Sh As Worksheet
Dim i As Integer
Dim j As Integer
Dim SRVRep As Worksheet
Dim Pi As Double: Pi = 3.1415926
' For SRVRep
WhtSt = "SURVEY_STATION.*"
FromSt = "SURVEY_STATION, PATH_TO_WELLBORE, BHA_RUN"
WhereSt = "PATH_TO_WELLBORE.PATH_IDENTIFIER=SURVEY_STATION.PATH_IDENTIFIER AND BHA_RUN.WLBR_IDENTIFIER=PATH_TO_WELLBORE.WLBR_IDENTIFIER AND BHA_RUN.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' ORDER BY SRSP_MDEPTH"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
RunInfoGetOneShWhithCommand "SRVRep", Rqst
' For SRVRepDlt
WhtSt = "SurveyStationsDeleted.*"
FromSt = "SurveyStationsDeleted, SURVEY_SECTION, BHA_RUN"
WhereSt = "SURVEY_SECTION.SRSC_IDENTIFIER=SurveyStationsDeleted.SRSC_IDENTIFIER AND BHA_RUN.PROG_IDENTIFIER=SURVEY_SECTION.PROG_IDENTIFIER AND BHA_RUN.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "'"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
RunInfoGetOneShWhithCommand "SRVRepDlt", Rqst

If ShIsExist("SRVRepDlt", TWb) And ShIsExist("SRVRep", TWb) Then
    Dim SRVRepDlt As Worksheet: Set SRVRepDlt = TWb.Sheets("SRVRepDlt")
    Set SRVRep = TWb.Sheets("SRVRep")
    i = 2
    Do While SRVRep.Cells(i, 1) <> ""
        j = 2
        Do While SRVRepDlt.Cells(j, 1) <> ""
            If SRVRep.Cells(i, 1) = SRVRepDlt.Cells(j, 1) Then
                SRVRep.Rows(i).Delete
                i = i - 1
            End If
        j = j + 1
        Loop
    i = i + 1
    Loop
    Application.DisplayAlerts = False
    SRVRepDlt.Delete
End If
Dim Srv As Worksheet: Set Srv = TWb.Sheets("Survey")
Srv.Range("A2:S10000").ClearContents
If ShIsExist("SRVRep", TWb) Then
    Set SRVRep = TWb.Sheets("SRVRep")
    i = 2
    Do While SRVRep.Cells(i, 1) <> ""
        Srv.Cells(i, 1) = SRVRep.Cells(i, 11)
        Srv.Cells(i, 2) = SRVRep.Cells(i, 12) * 360 / (2 * Pi)
        Srv.Cells(i, 3) = SRVRep.Cells(i, 14) * 360 / (2 * Pi)
        Srv.Cells(i, 4) = SRVRep.Cells(i, 10)
        Srv.Cells(i, 5) = SRVRep.Cells(i, 15)
        Srv.Cells(i, 6) = SRVRep.Cells(i, 16)
        Srv.Cells(i, 7) = SRVRep.Cells(i, 17) * 3600 / (2 * Pi)
        Srv.Cells(i, 8) = SRVRep.Cells(i, 18) * 3600 / (2 * Pi)
        Srv.Cells(i, 9) = SRVRep.Cells(i, 22) * 3600 / (2 * Pi)
        Srv.Cells(i, 10) = SRVRep.Cells(i, 23) * 360 / (2 * Pi)
    i = i + 1
    Loop
End If

End Sub
Attribute VB_Name = "For_SurveyToSlidesheet"
Sub SurveyToSlidsheet()
SurveyDeleteFromSlidsheet
Application.ScreenUpdating = False
Application.DisplayAlerts = False
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim SlSh As Worksheet: Set SlSh = TWb.Sheets("Slidesheet")
If Not ShIsExist("Survey", TWb) Then
    MsgBox "Sheet Survey is not exist, please check ADV survey and import Survey!"
    Set TWb = Nothing
    Set SlSh = Nothing
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Exit Sub
End If
Dim Srv As Worksheet: Set Srv = TWb.Sheets("Survey")
Dim i As Integer
Dim j As Integer
Dim k As Integer
i = 9
Do While SlSh.Cells(i, 8) <> ""
j = 2
k = 0
    Do While Srv.Cells(j, 1) <> "" And Srv.Cells(j, 1) < SlSh.Cells(i, 9)
            If Srv.Cells(j, 1) > SlSh.Cells(i, 8) And Srv.Cells(j, 1) < SlSh.Cells(i, 9) Then
            SlSh.Rows(i + 1 + k).Insert Shift:=xlUp, CopyOrigin:=xlFormatFromLeftOrAbove
            SlSh.Range("A" & i + 1 + k & ":AO" & i + 1 + k).Interior.ThemeColor = xlThemeColorDark1
            SlSh.Range("A" & i + 1 + k & ":AO" & i + 1 + k).Interior.TintAndShade = -0.249977111117893
            SlSh.Cells(i + 1 + k, 20) = Srv.Cells(j, 1)
            SlSh.Cells(i + 1 + k, 21) = Srv.Cells(j, 2)
            SlSh.Cells(i + 1 + k, 22) = Srv.Cells(j, 3)
            SlSh.Cells(i + 1 + k, 23) = Srv.Cells(j, 4)
            SlSh.Cells(i + 1 + k, 24) = Srv.Cells(j, 7)
            SlSh.Cells(i + 1 + k, 25) = Srv.Cells(j, 9)
            SlSh.Cells(i + 1 + k, 26) = Srv.Cells(j, 8)
            SlSh.Cells(i + 1 + k, 27) = Srv.Cells(j, 10)
            SlSh.Cells(i + 1 + k, 41) = "Survey point"
        k = k + 1
        End If
    j = j + 1
    Loop
i = i + 1 + k
Loop
Application.ScreenUpdating = True
Application.DisplayAlerts = True
End Sub
Sub SurveyDeleteFromSlidsheet()
Application.ScreenUpdating = False
Application.DisplayAlerts = False
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim SlSh As Worksheet: Set SlSh = TWb.Sheets("Slidesheet")
Dim i As Integer
i = 9
Do While i < 1000
    If SlSh.Cells(i, 8).Interior.ThemeColor = xlThemeColorDark1 Then
    SlSh.Rows(i).Delete
    i = i - 1
    End If
i = i + 1
Loop
Application.ScreenUpdating = True
Application.DisplayAlerts = True
End Sub


Attribute VB_Name = "For_TLAFunctions"
Option Base 1

Function AutoHKLChartCorection(HKLRfakt As Double, MDfakt As Double, ModalArr As Variant) As Double

Dim MDlast As Double
Dim MDnext As Double
Dim HKDwRlastcalc As Double
Dim HKDwRnextcalc As Double
Dim i As Integer
Dim j As Integer
Dim k As Integer
ReDim HklUpModelInterpolated(1 To 4)
ReDim HklDwnModelInterpolated(1 To 4)
ReDim FFarr(1 To 4)
Dim FFup As Double
Dim FFdown As Double


Dim flag As Integer
flag = False
i = 9

Do While Not IsEmpty(ModalArr(i, 1))
    If Not IsEmpty(ModalArr(i, 1)) And Not IsEmpty(ModalArr(i + 1, 1)) Then
        If CDbl(ModalArr(i, 1)) < MDfakt And CDbl(ModalArr(i + 1, 1)) >= MDfakt Then
            flag = True
            AutoHKLChartCorection = HKLRfakt - (CDbl(ModalArr(i, 10)) + (MDfakt - CDbl(ModalArr(i, 1))) * (CDbl(ModalArr(i + 1, 10)) - CDbl(ModalArr(i, 10))) / (CDbl(ModalArr(i + 1, 1)) - CDbl(ModalArr(i, 1))))
        End If
    End If
i = i + 1
Loop
If Not flag Then
    AutoHKLChartCorection = 0
End If
End Function

Function AutoFFCalculation(HKLRfakt As Double, HKLDounfakt As Double, HKLUpfakt As Double, MDfakt As Double, ModalArr As Variant) As Variant

Dim MDlast As Double
Dim MDnext As Double
Dim HKDwRlastcalc As Double
Dim HKDwRnextcalc As Double
Dim i As Integer
Dim j As Integer
Dim k As Integer
ReDim HklUpModelInterpolated(1 To 4)
ReDim HklDwnModelInterpolated(1 To 4)
ReDim FFarr(1 To 4)
Dim FFup As Double
Dim FFdown As Double

Dim flag As Integer
flag = False
i = 9

Do While Not IsEmpty(ModalArr(i, 1))
    If Not IsEmpty(ModalArr(i, 1)) And Not IsEmpty(ModalArr(i + 1, 1)) Then
        If CDbl(ModalArr(i, 1)) < MDfakt And CDbl(ModalArr(i + 1, 1)) >= MDfakt Then
            flag = True
            AutoHKLChartCorection = HKLRfakt - (CDbl(ModalArr(i, 10)) + (MDfakt - CDbl(ModalArr(i, 1))) * (CDbl(ModalArr(i + 1, 10)) - CDbl(ModalArr(i, 10))) / (CDbl(ModalArr(i + 1, 1)) - CDbl(ModalArr(i, 1))))
            For j = 1 To 4
                FFarr(j) = ModalArr(7, j * 2)
                HklDwnModelInterpolated(j) = AutoHKLChartCorection + (CDbl(ModalArr(i, j * 2)) + (MDfakt - CDbl(ModalArr(i, 1))) * (CDbl(ModalArr(i + 1, j * 2)) - CDbl(ModalArr(i, j * 2))) / (CDbl(ModalArr(i + 1, 1)) - CDbl(ModalArr(i, 1))))
                HklUpModelInterpolated(j) = AutoHKLChartCorection + (CDbl(ModalArr(i, j * 2 + 1)) + (MDfakt - CDbl(ModalArr(i, 1))) * (CDbl(ModalArr(i + 1, j * 2 + 1)) - CDbl(ModalArr(i, j * 2 + 1))) / (CDbl(ModalArr(i + 1, 1)) - CDbl(ModalArr(i, 1))))
            Next j
            If HKLDounfakt < HklDwnModelInterpolated(4) Then
                FFdown = FFarr(1)
            Else
                If HKLDounfakt > HklDwnModelInterpolated(1) Then
                    FFdown = FFarr(4)
                Else
                    For j = 1 To 3
                        If HKLDounfakt < HklDwnModelInterpolated(j) And HKLDounfakt >= HklDwnModelInterpolated(j + 1) Then
                            FFdown = FFarr(j) + (HKLDounfakt - HklDwnModelInterpolated(j)) * (FFarr(j + 1) - FFarr(j)) / (HklDwnModelInterpolated(j + 1) - HklDwnModelInterpolated(j))
                        End If
                    Next j
                End If
            End If
            
            If HKLUpfakt < HklUpModelInterpolated(1) Then
                FFup = FFarr(1)
            Else
                If HKLUpfakt > HklUpModelInterpolated(4) Then
                    FFup = FFarr(4)
                Else
                    For j = 1 To 3
                        If HKLUpfakt > HklUpModelInterpolated(j) And HKLUpfakt <= HklUpModelInterpolated(j + 1) Then
                            FFup = FFarr(j) + (HKLUpfakt - HklUpModelInterpolated(j)) * (FFarr(j + 1) - FFarr(j)) / (HklUpModelInterpolated(j + 1) - HklUpModelInterpolated(j))
                        End If
                    Next j
                End If
            End If
            
            
        End If
    End If
i = i + 1
Loop
If Not flag Then
    AutoFFCalculation(1) = 0
    AutoFFCalculation(2) = 0
Else
    AutoFFCalculation(1) = Round(FFdown, 2)
    AutoFFCalculation(2) = Round(FFup, 2)
End If
End Function
Function AutoFFUpCalculation(HKLRfakt As Double, HKLUpfakt As Double, MDfakt As Double, ModalArr As Variant) As Double
Dim MDlast As Double
Dim MDnext As Double
Dim HKDwRlastcalc As Double
Dim HKDwRnextcalc As Double
Dim i As Integer
Dim j As Integer
Dim k As Integer
Dim HKLChartCorection As Double
ReDim HklUpModelInterpolated(1 To 4)
ReDim FFarr(1 To 4)
Dim FFup As Double
Dim flag As Integer
flag = False
i = 9
Do While Not IsEmpty(ModalArr(i, 1))
    If Not IsEmpty(ModalArr(i, 1)) And Not IsEmpty(ModalArr(i + 1, 1)) Then
        If CDbl(ModalArr(i, 1)) < MDfakt And CDbl(ModalArr(i + 1, 1)) >= MDfakt Then
            flag = True
            HKLChartCorection = HKLRfakt - (CDbl(ModalArr(i, 10)) + (MDfakt - CDbl(ModalArr(i, 1))) * (CDbl(ModalArr(i + 1, 10)) - CDbl(ModalArr(i, 10))) / (CDbl(ModalArr(i + 1, 1)) - CDbl(ModalArr(i, 1))))
            For j = 1 To 4
                FFarr(j) = ModalArr(7, j * 2)
                HklUpModelInterpolated(j) = HKLChartCorection + (CDbl(ModalArr(i, j * 2 + 1)) + (MDfakt - CDbl(ModalArr(i, 1))) * (CDbl(ModalArr(i + 1, j * 2 + 1)) - CDbl(ModalArr(i, j * 2 + 1))) / (CDbl(ModalArr(i + 1, 1)) - CDbl(ModalArr(i, 1))))
            Next j
            If HKLUpfakt < HklUpModelInterpolated(1) Then
                FFup = FFarr(1)
            Else
                If HKLUpfakt > HklUpModelInterpolated(4) Then
                    FFup = FFarr(4)
                Else
                    For j = 1 To 3
                        If HKLUpfakt > HklUpModelInterpolated(j) And HKLUpfakt <= HklUpModelInterpolated(j + 1) Then
                            FFup = FFarr(j) + (HKLUpfakt - HklUpModelInterpolated(j)) * (FFarr(j + 1) - FFarr(j)) / (HklUpModelInterpolated(j + 1) - HklUpModelInterpolated(j))
                        End If
                    Next j
                End If
            End If
        End If
    End If
i = i + 1
Loop
If Not flag Then
    If i <> 9 Then
        i = i - 1
        HKLChartCorection = HKLRfakt - (CDbl(ModalArr(i, 10)) + (MDfakt - CDbl(ModalArr(i, 1))) * (CDbl(ModalArr(i + 1, 10)) - CDbl(ModalArr(i, 10))) / (CDbl(ModalArr(i + 1, 1)) - CDbl(ModalArr(i, 1))))
        For j = 1 To 4
            FFarr(j) = ModalArr(7, j * 2)
            HklUpModelInterpolated(j) = HKLChartCorection + (CDbl(ModalArr(i, j * 2 + 1)) + (MDfakt - CDbl(ModalArr(i, 1))) * (CDbl(ModalArr(i + 1, j * 2 + 1)) - CDbl(ModalArr(i, j * 2 + 1))) / (CDbl(ModalArr(i + 1, 1)) - CDbl(ModalArr(i, 1))))
        Next j
        If HKLUpfakt < HklUpModelInterpolated(1) Then
            FFup = FFarr(1)
        Else
                If HKLUpfakt > HklUpModelInterpolated(4) Then
                    FFup = FFarr(4)
                Else
                    For j = 1 To 3
                        If HKLUpfakt > HklUpModelInterpolated(j) And HKLUpfakt <= HklUpModelInterpolated(j + 1) Then
                            FFup = FFarr(j) + (HKLUpfakt - HklUpModelInterpolated(j)) * (FFarr(j + 1) - FFarr(j)) / (HklUpModelInterpolated(j + 1) - HklUpModelInterpolated(j))
                        End If
                    Next j
                End If
        End If
        AutoFFUpCalculation = Round(FFup, 2)
    Else
       AutoFFUpCalculation = 0
    End If
Else
    AutoFFUpCalculation = Round(FFup, 2)
End If
End Function
Function FFDownCalculation(HKLRfakt As Double, HKLDounfakt As Double, MDfakt As Double, ModalArr As Variant) As Double

Dim MDlast As Double
Dim MDnext As Double
Dim HKDwRlastcalc As Double
Dim HKDwRnextcalc As Double
Dim i As Integer
Dim j As Integer
Dim k As Integer
ReDim HklUpModelInterpolated(1 To 4)
ReDim HklDwnModelInterpolated(1 To 4)
ReDim FFarr(1 To 4)
Dim FFdown As Double


Dim flag As Integer
flag = False
i = 9

Do While Not IsEmpty(ModalArr(i, 1))
    If Not IsEmpty(ModalArr(i, 1)) And Not IsEmpty(ModalArr(i + 1, 1)) Then
        If CDbl(ModalArr(i, 1)) < MDfakt And CDbl(ModalArr(i + 1, 1)) >= MDfakt Then
            flag = True
            HKLChartCorection = HKLRfakt - (CDbl(ModalArr(i, 10)) + (MDfakt - CDbl(ModalArr(i, 1))) * (CDbl(ModalArr(i + 1, 10)) - CDbl(ModalArr(i, 10))) / (CDbl(ModalArr(i + 1, 1)) - CDbl(ModalArr(i, 1))))
            For j = 1 To 4
                FFarr(j) = ModalArr(7, j * 2)
                HklDwnModelInterpolated(j) = HKLChartCorection + (CDbl(ModalArr(i, j * 2)) + (MDfakt - CDbl(ModalArr(i, 1))) * (CDbl(ModalArr(i + 1, j * 2)) - CDbl(ModalArr(i, j * 2))) / (CDbl(ModalArr(i + 1, 1)) - CDbl(ModalArr(i, 1))))
                
            Next j
            If HKLDounfakt < HklDwnModelInterpolated(4) Then
                FFdown = FFarr(1)
            Else
                If HKLDounfakt > HklDwnModelInterpolated(1) Then
                    FFdown = FFarr(4)
                Else
                    For j = 1 To 3
                        If HKLDounfakt < HklDwnModelInterpolated(j) And HKLDounfakt >= HklDwnModelInterpolated(j + 1) Then
                            FFdown = FFarr(j) + (HKLDounfakt - HklDwnModelInterpolated(j)) * (FFarr(j + 1) - FFarr(j)) / (HklDwnModelInterpolated(j + 1) - HklDwnModelInterpolated(j))
                        End If
                    Next j
                End If
            End If
        End If
    End If
i = i + 1
Loop
If Not flag Then
    If i <> 9 Then
        i = i - 1
        HKLChartCorection = HKLRfakt - (CDbl(ModalArr(i, 10)) + (MDfakt - CDbl(ModalArr(i, 1))) * (CDbl(ModalArr(i + 1, 10)) - CDbl(ModalArr(i, 10))) / (CDbl(ModalArr(i + 1, 1)) - CDbl(ModalArr(i, 1))))
        For j = 1 To 4
            FFarr(j) = ModalArr(7, j * 2)
            HklDwnModelInterpolated(j) = HKLChartCorection + (CDbl(ModalArr(i, j * 2)) + (MDfakt - CDbl(ModalArr(i, 1))) * (CDbl(ModalArr(i + 1, j * 2)) - CDbl(ModalArr(i, j * 2))) / (CDbl(ModalArr(i + 1, 1)) - CDbl(ModalArr(i, 1))))
                   
        Next j
            If HKLDounfakt < HklDwnModelInterpolated(4) Then
                FFdown = FFarr(1)
            Else
                If HKLDounfakt > HklDwnModelInterpolated(1) Then
                    FFdown = FFarr(4)
                Else
                    For j = 1 To 3
                        If HKLDounfakt < HklDwnModelInterpolated(j) And HKLDounfakt >= HklDwnModelInterpolated(j + 1) Then
                            FFdown = FFarr(j) + (HKLDounfakt - HklDwnModelInterpolated(j)) * (FFarr(j + 1) - FFarr(j)) / (HklDwnModelInterpolated(j + 1) - HklDwnModelInterpolated(j))
                        End If
                    Next j
                End If
            End If
    
        FFDownCalculation = Round(FFdown, 2)
    Else
        FFDownCalculation = 0
    End If
Else
    FFDownCalculation = Round(FFdown, 2)
End If
End Function
Function FFTorqueCalculation(Torquefakt As Double, MDfakt As Double, ModalArr As Variant) As Double

Dim MDlast As Double
Dim MDnext As Double
Dim TorqueLastCalc As Double
Dim TorqueNextCalc As Double
Dim i As Integer
Dim j As Integer
Dim k As Integer
ReDim TorqueModelInterpolated(1 To 4)
ReDim FFarr(1 To 4)
Dim FFTorque As Double

Dim flag As Integer
flag = False
i = 9

Do While Not IsEmpty(ModalArr(i, 11))
    If Not IsEmpty(ModalArr(i, 11)) And Not IsEmpty(ModalArr(i + 1, 11)) Then
        If CDbl(ModalArr(i, 11)) < MDfakt And CDbl(ModalArr(i + 1, 11)) >= MDfakt Then
            flag = True
            For j = 1 To 4
                FFarr(j) = ModalArr(7, j + 11)
                TorqueModelInterpolated(j) = CDbl(ModalArr(i, j + 11)) + (MDfakt - CDbl(ModalArr(i, 11))) * ((CDbl(ModalArr(i + 1, j + 11)) - CDbl(ModalArr(i, j + 11))) / (CDbl(ModalArr(i + 1, 11)) - CDbl(ModalArr(i, 11))))
            Next j
            If Torquefakt < TorqueModelInterpolated(1) Then
                FFTorque = FFarr(1)
            Else
                If Torquefakt > TorqueModelInterpolated(4) Then
                    FFTorque = FFarr(4)
                Else
                    For j = 1 To 3
                        If Torquefakt > TorqueModelInterpolated(j) And Torquefakt <= TorqueModelInterpolated(j + 1) Then
                            FFTorque = FFarr(j) + (Torquefakt - TorqueModelInterpolated(j)) * (FFarr(j + 1) - FFarr(j)) / (TorqueModelInterpolated(j + 1) - TorqueModelInterpolated(j))
                        End If
                    Next j
                End If
            End If
        End If
    End If
i = i + 1
Loop
If Not flag Then
    If i <> 9 Then
        i = i - 1
        For j = 1 To 4
            FFarr(j) = ModalArr(7, j + 11)
            TorqueModelInterpolated(j) = CDbl(ModalArr(i, j + 11)) + (MDfakt - CDbl(ModalArr(i, 11))) * ((CDbl(ModalArr(i + 1, j + 11)) - CDbl(ModalArr(i, j + 11))) / (CDbl(ModalArr(i + 1, 11)) - CDbl(ModalArr(i, 11))))
        Next j
            If Torquefakt < TorqueModelInterpolated(1) Then
                FFTorque = FFarr(1)
            Else
                If Torquefakt > TorqueModelInterpolated(4) Then
                    FFTorque = FFarr(4)
                Else
                    For j = 1 To 3
                        If Torquefakt > TorqueModelInterpolated(j) And Torquefakt <= TorqueModelInterpolated(j + 1) Then
                            FFTorque = FFarr(j) + (Torquefakt - TorqueModelInterpolated(j)) * (FFarr(j + 1) - FFarr(j)) / (TorqueModelInterpolated(j + 1) - TorqueModelInterpolated(j))
                        End If
                    Next j
                End If
            End If
    FFTorqueCalculation = Round(FFTorque, 2)
    Else
        FFTorqueCalculation = 0
    End If
Else
    FFTorqueCalculation = Round(FFTorque, 2)
End If
End Function
Sub FFCalcForChart()
Dim ModelSh As Worksheet: Set ModelSh = ThisWorkbook.Sheets("Model")
Dim HKLChartSh As Worksheet: Set HKLChartSh = ThisWorkbook.Sheets("Hookload Chart ")
Dim TLASh As Worksheet: Set TLASh = ThisWorkbook.Sheets("TLA")
Dim i As Integer
Dim j As Integer
Dim k As Integer
Dim FFUPatEndMD As Double
Dim FFDownatEndMD As Double
Dim FFTorqueatEndMD As Double
Dim ModelArr: Set ModelArr = ModelSh.UsedRange
i = 11
j = 11

HKLChartSh.Range("T11:Y1000").ClearContents
HKLChartSh.Range("X4:X6").ClearContents

Do While TLASh.Cells(i, 5) <> ""
    k = 11
    Do While TLASh.Cells(k, 9) <> ""
        If TLASh.Cells(k, 9) = TLASh.Cells(i, 5) Then
            HKLChartSh.Cells(j, 20) = TLASh.Cells(i, 5)
            FFUPatEndMD = AutoFFUpCalculation(TLASh.Cells(k, 10), TLASh.Cells(i, 6), TLASh.Cells(i, 5), ModelArr)
            HKLChartSh.Cells(j, 21) = FFUPatEndMD
            j = j + 1
        End If
    k = k + 1
    Loop
i = i + 1
Loop

i = 11
j = 11

Do While TLASh.Cells(i, 7) <> ""
    k = 11
    Do While TLASh.Cells(k, 9) <> ""
        If TLASh.Cells(k, 9) = TLASh.Cells(i, 7) Then
            HKLChartSh.Cells(j, 22) = TLASh.Cells(i, 7)
            FFDownatEndMD = FFDownCalculation(TLASh.Cells(k, 10), TLASh.Cells(i, 8), TLASh.Cells(i, 7), ModelArr)
            HKLChartSh.Cells(j, 23) = FFDownatEndMD
            j = j + 1
        End If
    k = k + 1
    Loop
i = i + 1
Loop

i = 11
j = 11

Do While TLASh.Cells(i, 1) <> ""
    HKLChartSh.Cells(j, 24) = TLASh.Cells(i, 1)
    FFTorqueatEndMD = FFTorqueCalculation(TLASh.Cells(i, 2), TLASh.Cells(i, 1), ModelArr)
    HKLChartSh.Cells(j, 25) = FFTorqueatEndMD
j = j + 1
i = i + 1
Loop
If FFUPatEndMD <> 0 Then HKLChartSh.Cells(4, 24) = FFUPatEndMD
If FFUPatEndMD <> 0 Then HKLChartSh.Cells(5, 24) = FFUPatEndMD
If FFTorqueatEndMD <> 0 Then HKLChartSh.Cells(6, 24) = FFTorqueatEndMD

End Sub



Attribute VB_Name = "For_TLASheet"
Sub ToTLASheet2(BHAR_IDENTIFIER As String)
'On error resume next
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim Tla As Worksheet: Set Tla = TWb.Sheets("TLA")
Dim GenMDPPressSh As Worksheet: Set GenMDPPressSh = TWb.Sheets("GenMDPPress")
Dim GenDHolePSWSh As Worksheet: Set GenDHolePSWSh = TWb.Sheets("GenDHolePSW")
Dim TFOSh As Worksheet: Set TFOSh = TWb.Sheets("TFO")
Dim WPGFactSh As Worksheet: Set WPGFactSh = TWb.Sheets("WPGFact")
Dim FullSlideSheetSh As Worksheet: Set FullSlideSheetSh = TWb.Sheets("FullSlideSheet")
Dim ROPChartSh As Worksheet: Set ROPChartSh = TWb.Sheets("ROP Chart")
Dim TFChartSh As Worksheet: Set TFChartSh = TWb.Sheets("TF Chart")
Dim Chr As Chart
Dim MinMD As Integer
Dim MaxMD As Integer
Dim Sh As Worksheet
Dim Col As Collection: Set Col = New Collection
Dim i As Double
Dim j As Double
Dim k As Double
Dim l As Double
Dim WhtCons As Double: WhtCons = 0.000101971621
Dim PlVCons As Double: PlVCons = 2.088543
Dim WhtSt As String
Dim FromSt As String
Dim WhereSt As String
Dim Rqst As String
Dim TLADataWesImported As Boolean
Dim DDBHAHeader()
Dim BHARun()
Dim TLAFirstRow As Integer
Dim FlowFactor As Double
Dim MaxMDSurvey As Integer


If Tla Is Nothing Then
    Exit Sub
End If


' For DDBHAHeader
WhtSt = "WELLBORE.WLBR_NAME, FACILITY_TAB.FCTY_NAME, OBJECT_OF_INTEREST_TAB.OOIN_NAME, COMPANY_NAME.CPNM_NAME"
FromSt = "BHA_RUN, WELLBORE, PROGRAM_TAB, FACILITY_TAB, OBJECT_OF_INTEREST_TAB, OBJECT_TO_FACILITY, COMPANY_NAME"                '"WELLBORE, WELL_TAB, FACILITY_TAB, COMPANY_NAME"
WhereSt = "COMPANY_NAME.CPNM_IDENTIFIER=PROGRAM_TAB.CPNM_IDENTIFIER AND OBJECT_TO_FACILITY.FCTY_IDENTIFIER=FACILITY_TAB.FCTY_IDENTIFIER AND OBJECT_OF_INTEREST_TAB.OOIN_IDENTIFIER=OBJECT_TO_FACILITY.OOIN_IDENTIFIER AND PROGRAM_TAB.FCTY_IDENTIFIER=FACILITY_TAB.FCTY_IDENTIFIER AND PROGRAM_TAB.PROG_IDENTIFIER=BHA_RUN.PROG_IDENTIFIER AND BHA_RUN.WLBR_IDENTIFIER=WELLBORE.WLBR_IDENTIFIER And BHA_RUN.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "'"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
DDBHAHeader = GetArrayWithCommand(Rqst)
'RunInfoGetOneShWhithCommand "DDBHAHeader", Rqst

If DDBHAHeader(0, 0) = "" Then
    MsgBox "No Data in ADV for BHA Perf Client and well data import, please check it manually!"
    Exit Sub
Else
        Tla.Cells(3, 3) = DDBHAHeader(0, 3)
        Tla.Cells(3, 7) = DDBHAHeader(0, 2)
        Tla.Cells(3, 11) = DDBHAHeader(0, 1)
        Tla.Cells(4, 11) = DDBHAHeader(0, 0)
End If

' For RUN data
WhtSt = "BHA_RUN.*"
FromSt = "BHA_RUN"                '"WELLBORE, WELL_TAB, FACILITY_TAB, COMPANY_NAME"
WhereSt = "BHA_RUN.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "'"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)

BHARun = GetArrayWithCommand(Rqst)

If BHARun(0, 0) <> "" Then
        If Not IsEmpty(BHARun(0, 44)) Then Tla.Cells(4, 3) = BHARun(0, 44) * 1000
        If Not IsEmpty(BHARun(0, 11)) Then Tla.Cells(5, 3) = BHARun(0, 11)
End If

' For TLA
TLAFirstRow = 10

Tla.Range("A" & TLAFirstRow + 1 & ":N1000").ClearContents
Tla.Range("Q" & TLAFirstRow + 1 & ":Z1000").ClearContents

Tla.Range("AA" & TLAFirstRow + 1 & ":BJ500000").ClearContents

Set Col = ColFromDatabase("SELECT BDRP_END_DEPTH, BDRP_TORQUE_OFF_BTM FROM BHA_DRILLING_PARAMETERS a WHERE a.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' AND BDRP_TORQUE_OFF_BTM <>0 AND NOT BDRP_TORQUE_OFF_BTM IS NULL AND NOT BDRP_END_DEPTH IS NULL AND (a.CDPO_IDENTIFIER IN ('10', '3', '6', '7', '8', '9')) ORDER BY BDRP_END_DEPTH")
If Col.Count <> 0 Then
    For i = 1 To Col.Count
        Tla.Cells(i + TLAFirstRow, 1) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 0)))
        Tla.Cells(i + TLAFirstRow, 2) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 1))) / 1000
    Next i
    TLADataWesImported = True
End If
Set Col = ColFromDatabase("SELECT BDRP_END_DEPTH, BDRP_TORQUE_ON_BTM FROM BHA_DRILLING_PARAMETERS a WHERE a.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' AND BDRP_TORQUE_ON_BTM <>0 AND NOT BDRP_TORQUE_ON_BTM IS NULL AND NOT BDRP_END_DEPTH IS NULL AND (a.CDPO_IDENTIFIER IN ('10', '3', '6', '7', '8', '9')) ORDER BY BDRP_END_DEPTH")
If Col.Count <> 0 Then
    For i = 1 To Col.Count
        Tla.Cells(i + TLAFirstRow, 3) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 0)))
        Tla.Cells(i + TLAFirstRow, 4) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 1))) / 1000
    Next i
    TLADataWesImported = True
End If
Set Col = ColFromDatabase("SELECT BDRP_END_DEPTH, BDRP_PICK_UP_HKLD FROM BHA_DRILLING_PARAMETERS a WHERE a.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' AND BDRP_PICK_UP_HKLD <>0 AND NOT BDRP_PICK_UP_HKLD IS NULL AND NOT BDRP_END_DEPTH IS NULL AND (a.CDPO_IDENTIFIER IN ('10', '3', '6', '7', '8', '9')) ORDER BY BDRP_END_DEPTH")
If Col.Count <> 0 Then
    For i = 1 To Col.Count
        Tla.Cells(i + TLAFirstRow, 5) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 0)))
        Tla.Cells(i + TLAFirstRow, 6) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 1))) * WhtCons
    Next i
    TLADataWesImported = True
End If
Set Col = ColFromDatabase("SELECT BDRP_END_DEPTH, BDRP_SLACK_OFF_HKLD FROM BHA_DRILLING_PARAMETERS a WHERE a.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' AND BDRP_SLACK_OFF_HKLD <>0 AND NOT BDRP_SLACK_OFF_HKLD IS NULL AND NOT BDRP_END_DEPTH IS NULL AND (a.CDPO_IDENTIFIER IN ('10', '3', '6', '7', '8', '9')) ORDER BY BDRP_END_DEPTH")
If Col.Count <> 0 Then
    For i = 1 To Col.Count
        Tla.Cells(i + TLAFirstRow, 7) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 0)))
        Tla.Cells(i + TLAFirstRow, 8) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 1))) * WhtCons
    Next i
    TLADataWesImported = True
End If
Set Col = ColFromDatabase("SELECT BDRP_END_DEPTH, BDRP_ROTATING_HKLD FROM BHA_DRILLING_PARAMETERS a WHERE a.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' AND BDRP_ROTATING_HKLD <>0 AND NOT BDRP_ROTATING_HKLD IS NULL AND NOT BDRP_END_DEPTH IS NULL AND (a.CDPO_IDENTIFIER IN ('10', '3', '6', '7', '8', '9')) ORDER BY BDRP_END_DEPTH")
If Col.Count <> 0 Then
    For i = 1 To Col.Count
        Tla.Cells(i + TLAFirstRow, 9) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 0)))
        Tla.Cells(i + TLAFirstRow, 10) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 1))) * WhtCons
    Next i
End If
' ECD extracting
Set Col = ColFromDatabase("SELECT BDRP_END_DEPTH, BDRP_FLOW_RATE, BDRP_MUD_DENSITY FROM BHA_DRILLING_PARAMETERS a WHERE a.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' AND BDRP_MUD_DENSITY <>0 AND NOT BDRP_MUD_DENSITY IS NULL AND BDRP_FLOW_RATE<>0 and Not BDRP_FLOW_RATE IS NULL and NOT BDRP_END_DEPTH IS NULL AND (a.CDPO_IDENTIFIER IN ('10', '3', '6', '7', '8', '9')) ORDER BY BDRP_END_DEPTH")
If Col.Count <> 0 Then
    For i = 1 To Col.Count
        Tla.Cells(i + TLAFirstRow, 12) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 0)))
        Tla.Cells(i + TLAFirstRow, 13) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 1))) * 1000
        Tla.Cells(i + TLAFirstRow, 14) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 2))) / 1000
    Next i
    TLADataWesImported = True
End If

' SPP extracting
Set Col = ColFromDatabase("SELECT BDRP_END_DEPTH, BDRP_PRESSURE_ON_BTM FROM BHA_DRILLING_PARAMETERS a WHERE a.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' AND BDRP_PRESSURE_ON_BTM <>0 AND NOT BDRP_PRESSURE_ON_BTM IS NULL and NOT BDRP_END_DEPTH IS NULL AND (a.CDPO_IDENTIFIER IN ('10', '3', '6', '7', '8', '9')) ORDER BY BDRP_END_DEPTH")
If Col.Count <> 0 Then
    For i = 1 To Col.Count
        Tla.Cells(i + TLAFirstRow, 17) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 0)))
        Tla.Cells(i + TLAFirstRow, 18) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 1))) / 100000
    Next i
    TLADataWesImported = True
End If
Set Col = ColFromDatabase("SELECT BDRP_END_DEPTH, BDRP_PRESSURE_OFF_BTM FROM BHA_DRILLING_PARAMETERS a WHERE a.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "'  AND BDRP_PRESSURE_OFF_BTM<>0 and Not BDRP_PRESSURE_OFF_BTM IS NULL and NOT BDRP_END_DEPTH IS NULL AND (a.CDPO_IDENTIFIER IN ('10', '3', '6', '7', '8', '9')) ORDER BY BDRP_END_DEPTH")
If Col.Count <> 0 Then
    For i = 1 To Col.Count
        Tla.Cells(i + TLAFirstRow, 19) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 0)))
        Tla.Cells(i + TLAFirstRow, 20) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 1))) / 100000
    Next i
    TLADataWesImported = True
End If
Set Col = ColFromDatabase("SELECT BDRP_END_DEPTH, BDRP_SURFACE_RPM FROM BHA_DRILLING_PARAMETERS a WHERE a.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "'  AND BDRP_SURFACE_RPM<>0 and Not BDRP_SURFACE_RPM IS NULL and NOT BDRP_END_DEPTH IS NULL AND (a.CDPO_IDENTIFIER IN ('10', '3', '6', '7', '8', '9')) ORDER BY BDRP_END_DEPTH")
If Col.Count <> 0 Then
    For i = 1 To Col.Count
        Tla.Cells(i + TLAFirstRow, 45) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 0)))
        Tla.Cells(i + TLAFirstRow, 46) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 1))) * 60
    Next i
    TLADataWesImported = True
End If


' For Mud data
WhtSt = "b.DLWS_CUR_HOLE_MD, c.DLMR_MUD_DENSITY, c.DLMR_PLASTIC_VISCOSITY, c.DLMR_YIELD_POINT, c.DLMR_10_SEC_GEL, c.DLMR_MUD_10_MIN_GEL"
FromSt = "DAILY_RUN_STATUS a, DAILY_WELL_STATUS b, DAILY_MUD_REPORT c"
WhereSt = "a.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' and a.DLRP_IDENTIFIER=b.DLRP_IDENTIFIER and a.DLRP_IDENTIFIER=c.DLRP_IDENTIFIER AND b.DLWS_CUR_HOLE_MD<>0 and Not b.DLWS_CUR_HOLE_MD IS NULL AND c.DLMR_MUD_DENSITY<>0 and Not c.DLMR_MUD_DENSITY IS NULL AND c.DLMR_PLASTIC_VISCOSITY<>0 and Not c.DLMR_PLASTIC_VISCOSITY IS NULL AND c.DLMR_YIELD_POINT<>0 and Not c.DLMR_YIELD_POINT IS NULL AND c.DLMR_10_SEC_GEL<>0 and Not c.DLMR_10_SEC_GEL IS NULL AND c.DLMR_MUD_10_MIN_GEL<>0 and Not c.DLMR_MUD_10_MIN_GEL IS NULL ORDER BY DLWS_CUR_HOLE_MD"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
Set Col = ColFromDatabase(Rqst)
If Col.Count <> 0 Then
    For i = 1 To Col.Count
        Tla.Cells(i + TLAFirstRow, 21) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 0)))
        Tla.Cells(i + TLAFirstRow, 22) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 1))) / 1000
        Tla.Cells(i + TLAFirstRow, 23) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 2))) * 1000
        Tla.Cells(i + TLAFirstRow, 24) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 3))) * PlVCons
        Tla.Cells(i + TLAFirstRow, 25) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 4))) * PlVCons
        Tla.Cells(i + TLAFirstRow, 26) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 5))) * PlVCons
    Next i
    TLADataWesImported = True
End If

' ECD extracting

i = 2
j = 2
k = 2
m = 2
l = 2
Dim PreviosDepthForRimming As Double
Do While GenMDPPressSh.Cells(i, 4) <> ""
    If GenMDPPressSh.Cells(i, 3) = 11 Or GenMDPPressSh.Cells(i, 3) = 111 Then ' Drilling
        Tla.Cells(j + TLAFirstRow, 27) = GenMDPPressSh.Cells(i, 2)
        Tla.Cells(j + TLAFirstRow, 28) = GenMDPPressSh.Cells(i, 4) / 1000
        j = j + 1
    End If
    If GenMDPPressSh.Cells(i, 3) = 12 Or GenMDPPressSh.Cells(i, 3) = 112 Then ' Rimming
        
        If PreviosDepthForRimming > GenMDPPressSh.Cells(i, 4) Then ' Up or Down
            Tla.Cells(k + TLAFirstRow, 29) = GenMDPPressSh.Cells(i, 2)
            Tla.Cells(k + TLAFirstRow, 30) = GenMDPPressSh.Cells(i, 4) / 1000
            k = k + 1
        Else
            Tla.Cells(m + TLAFirstRow, 31) = GenMDPPressSh.Cells(i, 2)
            Tla.Cells(m + TLAFirstRow, 32) = GenMDPPressSh.Cells(i, 4) / 1000
            m = m + 1
        End If
        PreviosDepthForRimming = GenMDPPressSh.Cells(i, 4)
    End If
    If GenMDPPressSh.Cells(i, 3) = 6 Or GenMDPPressSh.Cells(i, 3) = 16 Or GenMDPPressSh.Cells(i, 3) = 116 Then ' Tripping
        Tla.Cells(l + TLAFirstRow, 33) = GenMDPPressSh.Cells(i, 2)
        Tla.Cells(l + TLAFirstRow, 34) = GenMDPPressSh.Cells(i, 4) / 1000
        l = l + 1
    End If
    
i = i + 1
Loop

' ECD extracting static (if OnTrak / AziTrak w Battery
i = 2
j = 2
k = 2

Do While GenDHolePSWSh.Cells(i, 2) <> ""
        Tla.Cells(i + TLAFirstRow, 35) = GenDHolePSWSh.Cells(j, 2)
        Tla.Cells(i + TLAFirstRow, 36) = GenDHolePSWSh.Cells(j, 4) / 1000
        Tla.Cells(i + TLAFirstRow, 37) = GenDHolePSWSh.Cells(k, 2)
        Tla.Cells(i + TLAFirstRow, 38) = GenDHolePSWSh.Cells(k, 5) / 1000
i = i + 1
j = j + 1
k = k + 1
Loop

' Flowrate extracting
i = 2
j = 2
k = 2
m = 2
l = 2

If ThisWorkbook.Worksheets("Setup").Cells(2, 29) <> "" Then
    FlowFactor = ThisWorkbook.Worksheets("Setup").Cells(2, 29)
    Do While GenMDPPressSh.Cells(i, 12) <> ""
            If GenMDPPressSh.Cells(i, 13) = 11 Or GenMDPPressSh.Cells(i, 13) = 111 Then ' Drilling
                Tla.Cells(j + TLAFirstRow, 39) = GenMDPPressSh.Cells(i, 12)
                Tla.Cells(j + TLAFirstRow, 40) = GenMDPPressSh.Cells(i, 14) * FlowFactor / 1000
                j = j + 1
            End If
            If GenMDPPressSh.Cells(i, 13) = 12 Or GenMDPPressSh.Cells(i, 13) = 112 Then ' Rimming
                Tla.Cells(k + TLAFirstRow, 41) = GenMDPPressSh.Cells(i, 12)
                Tla.Cells(k + TLAFirstRow, 42) = GenMDPPressSh.Cells(i, 14) * FlowFactor / 1000
                k = k + 1
            End If
            If GenMDPPressSh.Cells(i, 13) = 6 Or GenMDPPressSh.Cells(i, 13) = 16 Then ' Tripping
                Tla.Cells(m + TLAFirstRow, 43) = GenMDPPressSh.Cells(i, 12)
                Tla.Cells(m + TLAFirstRow, 44) = GenMDPPressSh.Cells(i, 14) * FlowFactor / 1000
                m = m + 1
            End If
    i = i + 1
    Loop
Else
    MsgBox "Setup BCPM configuration!"
End If
i = 2
j = 2
k = 2
Do While GenMDPPressSh.Cells(i, 19) <> ""
    If GenMDPPressSh.Cells(i, 21) = 11 Or GenMDPPressSh.Cells(i, 21) = 111 Then ' Drilling
        If GenMDPPressSh.Cells(i, 23) >= 0 Then
            Tla.Cells(j + TLAFirstRow, 47) = GenMDPPressSh.Cells(i, 22)
            Tla.Cells(j + TLAFirstRow, 48) = GenMDPPressSh.Cells(i, 23) * 60
            Tla.Cells(j + TLAFirstRow, 55) = GenMDPPressSh.Cells(i, 22)
            Tla.Cells(j + TLAFirstRow, 56) = GenMDPPressSh.Cells(i, 24) / 1000
            
            j = j + 1
        End If
    Else
        If GenMDPPressSh.Cells(i, 23) >= 0 Then
            Tla.Cells(k + TLAFirstRow, 49) = GenMDPPressSh.Cells(i, 22)
            Tla.Cells(k + TLAFirstRow, 50) = GenMDPPressSh.Cells(i, 23) * 60
            Tla.Cells(k + TLAFirstRow, 57) = GenMDPPressSh.Cells(i, 22)
            Tla.Cells(k + TLAFirstRow, 58) = GenMDPPressSh.Cells(i, 24) / 1000
            k = k + 1
        End If
    End If
i = i + 1
Loop
' For Hook Loads
i = 2
j = 2
Do While GenMDPPressSh.Cells(i, 26) <> ""
    Tla.Cells(j + TLAFirstRow, 59) = GenMDPPressSh.Cells(i, 29)
    Tla.Cells(j + TLAFirstRow, 60) = GenMDPPressSh.Cells(i, 30) * WhtCons
j = j + 1
i = i + 1
Loop

i = 2
j = 2
Do While GenMDPPressSh.Cells(i, 32) <> ""
    Tla.Cells(j + TLAFirstRow, 61) = GenMDPPressSh.Cells(i, 35)
    Tla.Cells(j + TLAFirstRow, 62) = GenMDPPressSh.Cells(i, 36) * WhtCons
j = j + 1
i = i + 1
Loop


Set Col = Nothing
If TLADataWesImported Then MsgBox "TLA Data Was Imported!"
If Not TLADataWesImported Then MsgBox "No Data in ADV for this BHA!"

'Clear Form Sheet
TFOSh.Range("AF6:AY100000").ClearContents
TFOSh.Range("Y3:Z7").ClearContents
TFChartSh.Range("AF6:AI100000").ClearContents
TFChartSh.Range("AM6:AY100000").ClearContents

i = 2
j = 6
m = 6
Do While GenMDPPressSh.Cells(i, 38) <> ""

'For HTFB
If GenMDPPressSh.Cells(i, 41) <> -9999 Then
    TFOSh.Cells(j, 50) = GenMDPPressSh.Cells(i, 39) + GenMDPPressSh.Cells(i, 43)
    TFOSh.Cells(j, 33) = GenMDPPressSh.Cells(i, 41) * 180 / 3.1415926
    If TFOSh.Cells(j, 33) > 180 Then TFOSh.Cells(j, 33) = TFOSh.Cells(j, 33) - 360
    TFOSh.Cells(j, 32).FormulaR1C1 = "=RC[18]+R19C25"
    j = j + 1
End If


'For MTFB
If GenMDPPressSh.Cells(i, 42) <> -9999 Then
    TFOSh.Cells(m, 51) = GenMDPPressSh.Cells(i, 39) + GenMDPPressSh.Cells(i, 43)
    TFOSh.Cells(m, 35) = GenMDPPressSh.Cells(i, 42) * 180 / 3.1415926
    TFOSh.Cells(m, 34).FormulaR1C1 = "=RC[17]+R19C25"
    m = m + 1
End If

i = i + 1
Loop

TFOSh.Cells(6, 36) = GenMDPPressSh.Cells(2, 43)

If GenMDPPressSh.Cells(2, 43) = "" Then
    TFOSh.Range("X17:Z20").Font.Bold = True
    TFOSh.Range("X17:Z20").Font.Size = 18
    TFOSh.Range("X17:Z18").Interior.Color = 65535
    TFOSh.Range("Y19:Y19").Interior.Color = 255
    TFOSh.Cells(19, 25) = 0
End If

'For Each crt In TFChartSh.ChartObjects
    ' MsgBox crt.Name
     'If crt.Name = "Chart 16" Then crt.Name = "Chart 1"
'Next crt

If j > 6 Then
Set Chr = TFOSh.ChartObjects("Chart 1").Chart
Chr.SeriesCollection(1).XValues = "=TFO!$AF$6:$AF$" & CStr(j - 1)
Chr.SeriesCollection(1).Values = "=TFO!$AG$6:$AG$" & CStr(j - 1)
End If

If m > 6 Then
Set Chr = TFOSh.ChartObjects("Chart 3").Chart
Chr.SeriesCollection(1).XValues = "=TFO!$AH$6:$AH$" & CStr(m - 1)
Chr.SeriesCollection(1).Values = "=TFO!$AI$6:$AI$" & CStr(m - 1)
End If


'For DasIncRotat

i = 2
m = 6
Do While GenMDPPressSh.Cells(i, 46) <> ""

If GenMDPPressSh.Cells(i, 49) <> -9999 Then
    TFOSh.Cells(m, 37) = GenMDPPressSh.Cells(i, 46)
    TFOSh.Cells(m, 38) = GenMDPPressSh.Cells(i, 49) * 180 / 3.1415926
    m = m + 1
End If

i = i + 1
Loop

'For DasIncNRotat

i = 2
k = 6
Do While GenMDPPressSh.Cells(i, 52) <> ""

If GenMDPPressSh.Cells(i, 55) <> -9999 Then
    TFOSh.Cells(k, 39) = GenMDPPressSh.Cells(i, 52)
    TFOSh.Cells(k, 40) = GenMDPPressSh.Cells(i, 55) * 180 / 3.1415926
    k = k + 1
End If

i = i + 1
Loop

'For NearBitRotatNaviGamma

i = 2
j = 6
Do While GenMDPPressSh.Cells(i, 57) <> ""

If GenMDPPressSh.Cells(i, 59) <> 0 Then
    TFOSh.Cells(j, 41) = GenMDPPressSh.Cells(i, 57)
    TFOSh.Cells(j, 42) = GenMDPPressSh.Cells(i, 59) * 180 / 3.1415926
    j = j + 1
End If

i = i + 1
Loop

If m > 6 Then
Set Chr = TFOSh.ChartObjects("Chart 1").Chart
Chr.Axes(xlCategory).MinimumScale = CInt(TFOSh.Cells(6, 37) / 10) * 10 - 10
Chr.Axes(xlCategory).MaximumScale = CInt(TFOSh.Cells(m - 1, 37) / 10) * 10 - 10

Set Chr = TFOSh.ChartObjects("Chart 2").Chart
Chr.SeriesCollection(1).XValues = "=TFO!$AK$6:$AK$" & CStr(m - 1)
Chr.SeriesCollection(1).Values = "=TFO!$AL$6:$AL$" & CStr(m - 1)
Chr.SeriesCollection(2).XValues = "=TFO!$AM$6:$AM$" & CStr(k - 1)
Chr.SeriesCollection(2).Values = "=TFO!$AN$6:$AN$" & CStr(k - 1)
Chr.SeriesCollection(3).XValues = "=TFO!$AO$6:$AO$" & CStr(j - 1)
Chr.SeriesCollection(3).Values = "=TFO!$AP$6:$AP$" & CStr(j - 1)
Chr.Axes(xlCategory).MinimumScale = CInt(TFOSh.Cells(6, 37) / 10) * 10 - 10
Chr.Axes(xlCategory).MaximumScale = CInt(TFOSh.Cells(m - 1, 37) / 10) * 10 - 10

Set Chr = TFOSh.ChartObjects("Chart 3").Chart
Chr.Axes(xlCategory).MinimumScale = CInt(TFOSh.Cells(6, 37) / 10) * 10 - 10
Chr.Axes(xlCategory).MaximumScale = CInt(TFOSh.Cells(m - 1, 37) / 10) * 10 - 10

TFOSh.Cells(3, 25) = CInt(TFOSh.Cells(6, 37) / 10) * 10 - 10
TFOSh.Cells(4, 25) = CInt(TFOSh.Cells(m - 1, 37) / 10) * 10 - 10
TFOSh.Cells(6, 25) = 0
TFOSh.Cells(7, 25) = 100
End If

Set Chr = TFOSh.ChartObjects("Chart 2").Chart
Chr.SeriesCollection(4).XValues = "=TFO!$AQ$6:$AQ$" & CStr(j - 1)
Chr.SeriesCollection(4).Values = "=TFO!$AR$6:$AR$" & CStr(j - 1)

j = 6
k = FullSlideSheetSh.UsedRange.Rows.Count
For i = 11 To k Step 1
 If FullSlideSheetSh.Cells(i, 6) = "O" Then
    TFOSh.Cells(j, 45) = FullSlideSheetSh.Cells(i, 9)
    j = j + 1
    Do While FullSlideSheetSh.Cells(i, 10) > TFOSh.Cells(j - 1, 45)
        TFOSh.Cells(j, 45) = TFOSh.Cells(j - 1, 45) + 1
        If FullSlideSheetSh.Cells(i, 7) = "HSL" Then
        TFOSh.Cells(j - 1, 46) = -FullSlideSheetSh.Cells(i, 8)
            Else
        TFOSh.Cells(j - 1, 46) = FullSlideSheetSh.Cells(i, 8)
        End If
        j = j + 1
    Loop
    If FullSlideSheetSh.Cells(i, 7) = "HSL" Then
    TFOSh.Cells(j - 1, 46) = -FullSlideSheetSh.Cells(i, 8)
        Else
    TFOSh.Cells(j - 1, 46) = FullSlideSheetSh.Cells(i, 8)
    End If
End If
Next i

Set Chr = TFOSh.ChartObjects("Chart 1").Chart
Chr.SeriesCollection(2).XValues = "=TFO!$AS$6:$AS$" & CStr(j - 1)
Chr.SeriesCollection(2).Values = "=TFO!$AT$6:$AT$" & CStr(j - 1)

MaxMDSurvey = WorksheetFunction.Max(FullSlideSheetSh.Range("J11:J100000"))

i = 19
Do While (WPGFactSh.Cells(i, 1) <> "MD") And (i < 20000)
         
i = i + 1
Loop

i = i + 2
j = 6

Do While (WPGFactSh.Cells(i, 1) <> "") And (i < 20000)

TFOSh.Cells(j, 43) = WPGFactSh.Cells(i, 1)
TFChartSh.Cells(j, 39) = WPGFactSh.Cells(i, 1)
TFOSh.Cells(j, 44) = WPGFactSh.Cells(i, 2)
TFChartSh.Cells(j, 40) = WPGFactSh.Cells(i, 2)
TFChartSh.Cells(j, 41) = WPGFactSh.Cells(i, 3)

i = i + 1
j = j + 1
Loop

If WPGFactSh.Cells(i - 1, 1) < MaxMDSurvey - 30 Then
    MsgBox "Import WGR fact please!"
    Exit Sub
End If

'Clear Form Sheet
ROPChartSh.Range("U6:Z100000").ClearContents
i = 2
m = 6

Do While GenMDPPressSh.Cells(i, 62) <> ""


If GenMDPPressSh.Cells(i, 65) > 0 Then
    ROPChartSh.Cells(m, 21) = GenMDPPressSh.Cells(i, 62)
    ROPChartSh.Cells(m, 22) = GenMDPPressSh.Cells(i, 64) * 3600
    ROPChartSh.Cells(m, 23) = GenMDPPressSh.Cells(i, 65) / 9806.652
    m = m + 1
End If

i = i + 1

Loop

Set Chr = ROPChartSh.ChartObjects("Chart 1").Chart
Chr.SeriesCollection(1).XValues = "='ROP Chart'!$W$6:$W$" & CStr(m - 1)
Chr.SeriesCollection(1).Values = "='ROP Chart'!$V$6:$V$" & CStr(m - 1)


j = 6
If m > 6 Then
    MaxMD = ROPChartSh.Cells(m - 1, 21)
    Do While ROPChartSh.Cells(m - 1, 21) > (MaxMD - 30) And m > 5
    ROPChartSh.Cells(j, 24) = ROPChartSh.Cells(m - 1, 21)
    ROPChartSh.Cells(j, 25) = ROPChartSh.Cells(m - 1, 22)
    ROPChartSh.Cells(j, 26) = ROPChartSh.Cells(m - 1, 23)
    j = j + 1
    m = m - 1
    Loop
End If

Set Chr = ROPChartSh.ChartObjects("Chart 1").Chart
Chr.SeriesCollection(2).XValues = "='ROP Chart'!$Z$6:$Z$" & CStr(j - 2)
Chr.SeriesCollection(2).Values = "='ROP Chart'!$Y$6:$Y$" & CStr(j - 2)

'For TF Chart

i = 6
j = 6


If TFOSh.Cells(6, 36) = "" Then
    TFChartSh.Range("S17:W20").Font.Bold = True
    TFChartSh.Range("S17:W20").Font.Size = 18
    TFChartSh.Range("S17:X18").Interior.Color = 65535
    TFChartSh.Range("V19:V19").Interior.Color = 255
    TFChartSh.Cells(19, 22) = 0
End If

Do While TFOSh.Cells(i, 32) <> ""

TFChartSh.Cells(j, 50) = TFOSh.Cells(i, 50)
TFChartSh.Cells(j, 33) = TFOSh.Cells(i, 33)
If TFChartSh.Cells(j, 33) < 0 Then TFChartSh.Cells(j, 33) = TFChartSh.Cells(j, 33) + 360
TFChartSh.Cells(j, 32).FormulaR1C1 = "=RC[18]+R19C22"
TFChartSh.Cells(j, 34) = TFOSh.Cells(i, 45)
TFChartSh.Cells(j, 35) = TFOSh.Cells(i, 46)
If TFChartSh.Cells(j, 35) < 0 Then TFChartSh.Cells(j, 35) = TFChartSh.Cells(j, 35) + 360

i = i + 1
j = j + 1
Loop

If j > 6 Then
Set Chr = TFChartSh.ChartObjects("Chart 1").Chart
Chr.SeriesCollection(1).XValues = "='TF Chart'!$AF$6:$AF$" & CStr(j - 1)
Chr.SeriesCollection(1).Values = "='TF Chart'!$AG$6:$AG$" & CStr(j - 1)
Chr.SeriesCollection(2).XValues = "='TF Chart'!$AH$6:$AH$" & CStr(j - 1)
Chr.SeriesCollection(2).Values = "='TF Chart'!$AI$6:$AI$" & CStr(j - 1)
Chr.Axes(xlCategory).MinimumScale = CInt(TFChartSh.Cells(6, 32) / 10) * 10 - 10
Chr.Axes(xlCategory).MaximumScale = CInt(TFChartSh.Cells(j - 1, 32) / 10) * 10 - 10
End If

j = 6
Do While TFChartSh.Cells(j, 36) <> ""
j = j + 1
Loop

If j > 6 Then
Set Chr = TFChartSh.ChartObjects("Chart 2").Chart
Chr.SeriesCollection(1).XValues = "='TF Chart'!$AJ$6:$AJ$" & CStr(j - 1)
Chr.SeriesCollection(1).Values = "='TF Chart'!$AL$6:$AL$" & CStr(j - 1)
Chr.SeriesCollection(2).XValues = "='TF Chart'!$AJ$6:$AJ$" & CStr(j - 1)
Chr.SeriesCollection(2).Values = "='TF Chart'!$AK$6:$AK$" & CStr(j - 1)
Chr.Axes(xlCategory).MinimumScale = CInt(TFChartSh.Cells(6, 36) / 10) * 10 - 10
Chr.Axes(xlCategory).MaximumScale = CInt(TFChartSh.Cells(j - 1, 36) / 10) * 10 - 10
End If

j = 6
Do While TFChartSh.Cells(j, 39) <> ""
j = j + 1
Loop

If j > 6 Then
Set Chr = TFChartSh.ChartObjects("Chart 1").Chart
Chr.SeriesCollection(3).XValues = "='TF Chart'!$AM$6:$AM$" & CStr(j - 1)
Chr.SeriesCollection(3).Values = "='TF Chart'!$AN$6:$AN$" & CStr(j - 1)
Chr.SeriesCollection(4).XValues = "='TF Chart'!$AM$6:$AM$" & CStr(j - 1)
Chr.SeriesCollection(4).Values = "='TF Chart'!$AO$6:$AO$" & CStr(j - 1)
Set Chr = TFChartSh.ChartObjects("Chart 2").Chart
Chr.SeriesCollection(3).XValues = "='TF Chart'!$AM$6:$AM$" & CStr(j - 1)
Chr.SeriesCollection(3).Values = "='TF Chart'!$AN$6:$AN$" & CStr(j - 1)
Chr.SeriesCollection(4).XValues = "='TF Chart'!$AM$6:$AM$" & CStr(j - 1)
Chr.SeriesCollection(4).Values = "='TF Chart'!$AO$6:$AO$" & CStr(j - 1)
End If

GenMDPPressSh.Cells.Clear
MsgBox "Done!"
End Sub
Sub TFO()
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim GenMDPPressSh As Worksheet: Set GenMDPPressSh = TWb.Sheets("GenMDPPress")
Dim TFOSh As Worksheet: Set TFOSh = TWb.Sheets("TFO")
Dim WPGFactSh As Worksheet: Set WPGFactSh = TWb.Sheets("WPGFact")
Dim FullSlideSheetSh As Worksheet: Set FullSlideSheetSh = TWb.Sheets("FullSlideSheet")
Dim ROPChartSh As Worksheet: Set ROPChartSh = TWb.Sheets("ROP Chart")
Dim TFChartSh As Worksheet: Set TFChartSh = TWb.Sheets("TF Chart")
Dim Chr As Chart
Dim MinMD As Integer
Dim MaxMD As Integer
Dim MaxMDSurvey As Integer

'Clear Form Sheet
TFOSh.Range("AF6:AY100000").ClearContents
TFOSh.Range("Y3:Z7").ClearContents
TFChartSh.Range("AF6:AI100000").ClearContents
TFChartSh.Range("AM6:AY100000").ClearContents

i = 2
j = 6
m = 6
Do While GenMDPPressSh.Cells(i, 38) <> ""

'For HTFB
If GenMDPPressSh.Cells(i, 41) <> -9999 Then
    TFOSh.Cells(j, 50) = GenMDPPressSh.Cells(i, 39) + GenMDPPressSh.Cells(i, 43)
    TFOSh.Cells(j, 33) = GenMDPPressSh.Cells(i, 41) * 180 / 3.1415926
    If TFOSh.Cells(j, 33) > 180 Then TFOSh.Cells(j, 33) = TFOSh.Cells(j, 33) - 360
    TFOSh.Cells(j, 32).FormulaR1C1 = "=RC[18]+R19C25"
    j = j + 1
End If


'For MTFB
If GenMDPPressSh.Cells(i, 42) <> -9999 Then
    TFOSh.Cells(m, 51) = GenMDPPressSh.Cells(i, 39) + GenMDPPressSh.Cells(i, 43)
    TFOSh.Cells(m, 35) = GenMDPPressSh.Cells(i, 42) * 180 / 3.1415926
    TFOSh.Cells(m, 34).FormulaR1C1 = "=RC[17]+R19C25"
    m = m + 1
End If

i = i + 1
Loop

TFOSh.Cells(6, 36) = GenMDPPressSh.Cells(2, 43)

If GenMDPPressSh.Cells(2, 43) = "" Then
    TFOSh.Range("X17:Z20").Font.Bold = True
    TFOSh.Range("X17:Z20").Font.Size = 18
    TFOSh.Range("X17:Z18").Interior.Color = 65535
    TFOSh.Range("Y19:Y19").Interior.Color = 255
    TFOSh.Cells(19, 25) = 0
End If

'For Each crt In TFChartSh.ChartObjects
    ' MsgBox crt.Name
     'If crt.Name = "Chart 16" Then crt.Name = "Chart 1"
'Next crt

If j > 6 Then
Set Chr = TFOSh.ChartObjects("Chart 1").Chart
Chr.SeriesCollection(1).XValues = "=TFO!$AF$6:$AF$" & CStr(j - 1)
Chr.SeriesCollection(1).Values = "=TFO!$AG$6:$AG$" & CStr(j - 1)
End If

If m > 6 Then
Set Chr = TFOSh.ChartObjects("Chart 3").Chart
Chr.SeriesCollection(1).XValues = "=TFO!$AH$6:$AH$" & CStr(m - 1)
Chr.SeriesCollection(1).Values = "=TFO!$AI$6:$AI$" & CStr(m - 1)
End If


'For DasIncRotat

i = 2
m = 6
Do While GenMDPPressSh.Cells(i, 46) <> ""

If GenMDPPressSh.Cells(i, 49) <> -9999 Then
    TFOSh.Cells(m, 37) = GenMDPPressSh.Cells(i, 46)
    TFOSh.Cells(m, 38) = GenMDPPressSh.Cells(i, 49) * 180 / 3.1415926
    m = m + 1
End If

i = i + 1
Loop

'For DasIncNRotat

i = 2
k = 6
Do While GenMDPPressSh.Cells(i, 52) <> ""

If GenMDPPressSh.Cells(i, 55) <> -9999 Then
    TFOSh.Cells(k, 39) = GenMDPPressSh.Cells(i, 52)
    TFOSh.Cells(k, 40) = GenMDPPressSh.Cells(i, 55) * 180 / 3.1415926
    k = k + 1
End If

i = i + 1
Loop

'For NearBitRotatNaviGamma

i = 2
j = 6
Do While GenMDPPressSh.Cells(i, 57) <> ""

If GenMDPPressSh.Cells(i, 59) <> 0 Then
    TFOSh.Cells(j, 41) = GenMDPPressSh.Cells(i, 57)
    TFOSh.Cells(j, 42) = GenMDPPressSh.Cells(i, 59) * 180 / 3.1415926
    j = j + 1
End If

i = i + 1
Loop

If m > 6 Then
Set Chr = TFOSh.ChartObjects("Chart 1").Chart
Chr.Axes(xlCategory).MinimumScale = CInt(TFOSh.Cells(6, 37) / 10) * 10 - 10
Chr.Axes(xlCategory).MaximumScale = CInt(TFOSh.Cells(m - 1, 37) / 10) * 10 - 10

Set Chr = TFOSh.ChartObjects("Chart 2").Chart
Chr.SeriesCollection(1).XValues = "=TFO!$AK$6:$AK$" & CStr(m - 1)
Chr.SeriesCollection(1).Values = "=TFO!$AL$6:$AL$" & CStr(m - 1)
Chr.SeriesCollection(2).XValues = "=TFO!$AM$6:$AM$" & CStr(k - 1)
Chr.SeriesCollection(2).Values = "=TFO!$AN$6:$AN$" & CStr(k - 1)
Chr.SeriesCollection(3).XValues = "=TFO!$AO$6:$AO$" & CStr(j - 1)
Chr.SeriesCollection(3).Values = "=TFO!$AP$6:$AP$" & CStr(j - 1)
Chr.Axes(xlCategory).MinimumScale = CInt(TFOSh.Cells(6, 37) / 10) * 10 - 10
Chr.Axes(xlCategory).MaximumScale = CInt(TFOSh.Cells(m - 1, 37) / 10) * 10 - 10

Set Chr = TFOSh.ChartObjects("Chart 3").Chart
Chr.Axes(xlCategory).MinimumScale = CInt(TFOSh.Cells(6, 37) / 10) * 10 - 10
Chr.Axes(xlCategory).MaximumScale = CInt(TFOSh.Cells(m - 1, 37) / 10) * 10 - 10

TFOSh.Cells(3, 25) = CInt(TFOSh.Cells(6, 37) / 10) * 10 - 10
TFOSh.Cells(4, 25) = CInt(TFOSh.Cells(m - 1, 37) / 10) * 10 - 10
TFOSh.Cells(6, 25) = 0
TFOSh.Cells(7, 25) = 100
End If

Set Chr = TFOSh.ChartObjects("Chart 2").Chart
Chr.SeriesCollection(4).XValues = "=TFO!$AQ$6:$AQ$" & CStr(j - 1)
Chr.SeriesCollection(4).Values = "=TFO!$AR$6:$AR$" & CStr(j - 1)

j = 6
k = FullSlideSheetSh.UsedRange.Rows.Count
For i = 11 To k Step 1
 If FullSlideSheetSh.Cells(i, 6) = "O" Then
    TFOSh.Cells(j, 45) = FullSlideSheetSh.Cells(i, 9)
    j = j + 1
    Do While FullSlideSheetSh.Cells(i, 10) > TFOSh.Cells(j - 1, 45)
        TFOSh.Cells(j, 45) = TFOSh.Cells(j - 1, 45) + 1
        If FullSlideSheetSh.Cells(i, 7) = "HSL" Then
        TFOSh.Cells(j - 1, 46) = -FullSlideSheetSh.Cells(i, 8)
            Else
        TFOSh.Cells(j - 1, 46) = FullSlideSheetSh.Cells(i, 8)
        End If
        j = j + 1
    Loop
    If FullSlideSheetSh.Cells(i, 7) = "HSL" Then
    TFOSh.Cells(j - 1, 46) = -FullSlideSheetSh.Cells(i, 8)
        Else
    TFOSh.Cells(j - 1, 46) = FullSlideSheetSh.Cells(i, 8)
    End If
End If
Next i

Set Chr = TFOSh.ChartObjects("Chart 1").Chart
Chr.SeriesCollection(2).XValues = "=TFO!$AS$6:$AS$" & CStr(j - 1)
Chr.SeriesCollection(2).Values = "=TFO!$AT$6:$AT$" & CStr(j - 1)

MaxMDSurvey = WorksheetFunction.Max(FullSlideSheetSh.Range("J11:J100000"))

i = 19
Do While (WPGFactSh.Cells(i, 1) <> "MD") And (i < 20000)
         
i = i + 1
Loop

i = i + 2
j = 6

Do While (WPGFactSh.Cells(i, 1) <> "") And (i < 20000)

TFOSh.Cells(j, 43) = WPGFactSh.Cells(i, 1)
TFChartSh.Cells(j, 39) = WPGFactSh.Cells(i, 1)
TFOSh.Cells(j, 44) = WPGFactSh.Cells(i, 2)
TFChartSh.Cells(j, 40) = WPGFactSh.Cells(i, 2)
TFChartSh.Cells(j, 41) = WPGFactSh.Cells(i, 3)

i = i + 1
j = j + 1
Loop

If WPGFactSh.Cells(i - 1, 1) < MaxMDSurvey - 30 Then
    MsgBox "Import WGR fact please!"
    'Exit Sub
End If

'Clear Form Sheet
ROPChartSh.Range("U6:Z100000").ClearContents
i = 2
m = 6

Do While GenMDPPressSh.Cells(i, 62) <> ""


If GenMDPPressSh.Cells(i, 65) > 0 Then
    ROPChartSh.Cells(m, 21) = GenMDPPressSh.Cells(i, 62)
    ROPChartSh.Cells(m, 22) = GenMDPPressSh.Cells(i, 64) * 3600
    ROPChartSh.Cells(m, 23) = GenMDPPressSh.Cells(i, 65) / 9806.652
    m = m + 1
End If

i = i + 1

Loop

Set Chr = ROPChartSh.ChartObjects("Chart 1").Chart
Chr.SeriesCollection(1).XValues = "='ROP Chart'!$W$6:$W$" & CStr(m - 1)
Chr.SeriesCollection(1).Values = "='ROP Chart'!$V$6:$V$" & CStr(m - 1)


j = 6
If m > 6 Then
    MaxMD = ROPChartSh.Cells(m - 1, 21)
    Do While ROPChartSh.Cells(m - 1, 21) > (MaxMD - 30) And m > 5
    ROPChartSh.Cells(j, 24) = ROPChartSh.Cells(m - 1, 21)
    ROPChartSh.Cells(j, 25) = ROPChartSh.Cells(m - 1, 22)
    ROPChartSh.Cells(j, 26) = ROPChartSh.Cells(m - 1, 23)
    j = j + 1
    m = m - 1
    Loop
End If

Set Chr = ROPChartSh.ChartObjects("Chart 1").Chart
Chr.SeriesCollection(2).XValues = "='ROP Chart'!$Z$6:$Z$" & CStr(j - 2)
Chr.SeriesCollection(2).Values = "='ROP Chart'!$Y$6:$Y$" & CStr(j - 2)

'For TF Chart

i = 6
j = 6


If TFOSh.Cells(6, 36) = "" Then
    TFChartSh.Range("S17:W20").Font.Bold = True
    TFChartSh.Range("S17:W20").Font.Size = 18
    TFChartSh.Range("S17:X18").Interior.Color = 65535
    TFChartSh.Range("V19:V19").Interior.Color = 255
    TFChartSh.Cells(19, 22) = 0
End If

Do While TFOSh.Cells(i, 32) <> ""

TFChartSh.Cells(j, 50) = TFOSh.Cells(i, 50)
TFChartSh.Cells(j, 33) = TFOSh.Cells(i, 33)
If TFChartSh.Cells(j, 33) < 0 Then TFChartSh.Cells(j, 33) = TFChartSh.Cells(j, 33) + 360
TFChartSh.Cells(j, 32).FormulaR1C1 = "=RC[18]+R19C22"
TFChartSh.Cells(j, 34) = TFOSh.Cells(i, 45)
TFChartSh.Cells(j, 35) = TFOSh.Cells(i, 46)
If TFChartSh.Cells(j, 35) < 0 Then TFChartSh.Cells(j, 35) = TFChartSh.Cells(j, 35) + 360

i = i + 1
j = j + 1
Loop

If j > 6 Then
Set Chr = TFChartSh.ChartObjects("Chart 1").Chart
Chr.SeriesCollection(1).XValues = "='TF Chart'!$AF$6:$AF$" & CStr(j - 1)
Chr.SeriesCollection(1).Values = "='TF Chart'!$AG$6:$AG$" & CStr(j - 1)
Chr.SeriesCollection(2).XValues = "='TF Chart'!$AH$6:$AH$" & CStr(j - 1)
Chr.SeriesCollection(2).Values = "='TF Chart'!$AI$6:$AI$" & CStr(j - 1)
Chr.Axes(xlCategory).MinimumScale = CInt(TFChartSh.Cells(6, 32) / 10) * 10 - 10
Chr.Axes(xlCategory).MaximumScale = CInt(TFChartSh.Cells(j - 1, 32) / 10) * 10 - 10
End If

j = 6
Do While TFChartSh.Cells(j, 36) <> ""
j = j + 1
Loop

If j > 6 Then
Set Chr = TFChartSh.ChartObjects("Chart 2").Chart
Chr.SeriesCollection(1).XValues = "='TF Chart'!$AJ$6:$AJ$" & CStr(j - 1)
Chr.SeriesCollection(1).Values = "='TF Chart'!$AL$6:$AL$" & CStr(j - 1)
Chr.SeriesCollection(2).XValues = "='TF Chart'!$AJ$6:$AJ$" & CStr(j - 1)
Chr.SeriesCollection(2).Values = "='TF Chart'!$AK$6:$AK$" & CStr(j - 1)
Chr.Axes(xlCategory).MinimumScale = CInt(TFChartSh.Cells(6, 36) / 10) * 10 - 10
Chr.Axes(xlCategory).MaximumScale = CInt(TFChartSh.Cells(j - 1, 36) / 10) * 10 - 10
End If

j = 6
Do While TFChartSh.Cells(j, 39) <> ""
j = j + 1
Loop

If j > 6 Then
Set Chr = TFChartSh.ChartObjects("Chart 1").Chart
Chr.SeriesCollection(3).XValues = "='TF Chart'!$AM$6:$AM$" & CStr(j - 1)
Chr.SeriesCollection(3).Values = "='TF Chart'!$AN$6:$AN$" & CStr(j - 1)
Chr.SeriesCollection(4).XValues = "='TF Chart'!$AM$6:$AM$" & CStr(j - 1)
Chr.SeriesCollection(4).Values = "='TF Chart'!$AO$6:$AO$" & CStr(j - 1)
Set Chr = TFChartSh.ChartObjects("Chart 2").Chart
Chr.SeriesCollection(3).XValues = "='TF Chart'!$AM$6:$AM$" & CStr(j - 1)
Chr.SeriesCollection(3).Values = "='TF Chart'!$AN$6:$AN$" & CStr(j - 1)
Chr.SeriesCollection(4).XValues = "='TF Chart'!$AM$6:$AM$" & CStr(j - 1)
Chr.SeriesCollection(4).Values = "='TF Chart'!$AO$6:$AO$" & CStr(j - 1)
End If

GenMDPPressSh.Cells.Clear
MsgBox "Done!"
End Sub
Sub Chartcorrect()
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim TFOSh As Worksheet: Set TFOSh = TWb.Sheets("TFO")
Dim Chr As Chart
Dim MinMD As Integer
Dim MaxMD As Integer
Dim MinInc As Integer
Dim MaxInc As Integer
Dim MaxMDSurvey As Intege

MinMD = TFOSh.Cells(3, 25)
MaxMD = TFOSh.Cells(4, 25)
MinInc = TFOSh.Cells(6, 25)
MaxInc = TFOSh.Cells(7, 25)

If MinMD And MaxMD <> 0 Then
Set Chr = TFOSh.ChartObjects("Chart 1").Chart
Chr.Axes(xlCategory).MinimumScale = CInt((MinMD) / 10) * 10 - 10
Chr.Axes(xlCategory).MaximumScale = CInt((MaxMD) / 10) * 10 - 10
Set Chr = TFOSh.ChartObjects("Chart 2").Chart
Chr.Axes(xlCategory).MinimumScale = CInt((MinMD) / 10) * 10 - 10
Chr.Axes(xlCategory).MaximumScale = CInt((MaxMD) / 10) * 10 - 10
Set Chr = TFOSh.ChartObjects("Chart 3").Chart
Chr.Axes(xlCategory).MinimumScale = CInt((MinMD) / 10) * 10 - 10
Chr.Axes(xlCategory).MaximumScale = CInt((MaxMD) / 10) * 10 - 10
End If

If MinInc And MaxInc <> 0 Then
Set Chr = TFOSh.ChartObjects("Chart 2").Chart
Chr.Axes(xlValue).MinimumScale = CInt(MinInc)
Chr.Axes(xlValue).MaximumScale = CInt(MaxInc)
End If

End Sub



Sub ToTLASheet3(BHAR_IDENTIFIER As String, StartTime As String, EndTime As String) ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'On error resume next
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim Tla As Worksheet: Set Tla = TWb.Sheets("TLA")
Dim GenMDPPressSh As Worksheet: Set GenMDPPressSh = TWb.Sheets("GenMDPPress")
Dim TFOSh As Worksheet: Set TFOSh = TWb.Sheets("TFO")
Dim WPGFactSh As Worksheet: Set WPGFactSh = TWb.Sheets("WPGFact")
Dim FullSlideSheetSh As Worksheet: Set FullSlideSheetSh = TWb.Sheets("FullSlideSheet")
Dim ROPChartSh As Worksheet: Set ROPChartSh = TWb.Sheets("ROP Chart")
Dim TFChartSh As Worksheet: Set TFChartSh = TWb.Sheets("TF Chart")
Dim Chr As Chart
Dim MinMD As Integer
Dim MaxMD As Integer

Dim Sh As Worksheet
Dim Col As Collection: Set Col = New Collection
Dim i As Integer
Dim WhtCons As Double: WhtCons = 0.000101971621
Dim WhtSt As String
Dim FromSt As String
Dim WhereSt As String
Dim Rqst As String
Dim TLADataWesImported As Boolean

If Tla Is Nothing Then
    Exit Sub
End If

' For DDBHAHeader
WhtSt = "WELLBORE.WLBR_NAME, FACILITY_TAB.FCTY_NAME, OBJECT_OF_INTEREST_TAB.OOIN_NAME, COMPANY_NAME.CPNM_NAME"
FromSt = "BHA_RUN, WELLBORE, PROGRAM_TAB, FACILITY_TAB, OBJECT_OF_INTEREST_TAB, OBJECT_TO_FACILITY, COMPANY_NAME"                '"WELLBORE, WELL_TAB, FACILITY_TAB, COMPANY_NAME"
WhereSt = "COMPANY_NAME.CPNM_IDENTIFIER=PROGRAM_TAB.CPNM_IDENTIFIER AND OBJECT_TO_FACILITY.FCTY_IDENTIFIER=FACILITY_TAB.FCTY_IDENTIFIER AND OBJECT_OF_INTEREST_TAB.OOIN_IDENTIFIER=OBJECT_TO_FACILITY.OOIN_IDENTIFIER AND PROGRAM_TAB.FCTY_IDENTIFIER=FACILITY_TAB.FCTY_IDENTIFIER AND PROGRAM_TAB.PROG_IDENTIFIER=BHA_RUN.PROG_IDENTIFIER AND BHA_RUN.WLBR_IDENTIFIER=WELLBORE.WLBR_IDENTIFIER And BHA_RUN.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "'"
Rqst = CStr(" SELECT " & WhtSt & " FROM " & FromSt & " WHERE " & WhereSt)
RunInfoGetOneShWhithCommand "DDBHAHeader", Rqst

If ShIsExist("DDBHAHeader", ThisWorkbook) Then
    Dim DDBHAHeader As Worksheet: Set DDBHAHeader = ThisWorkbook.Sheets("DDBHAHeader")
        Tla.Cells(3, 3) = DDBHAHeader.Cells(2, 4)
        Tla.Cells(3, 7) = DDBHAHeader.Cells(2, 3)
        Tla.Cells(3, 11) = DDBHAHeader.Cells(2, 2)
        Tla.Cells(4, 11) = DDBHAHeader.Cells(2, 1)
    Set DDBHAHeader = Nothing
End If

' For TLA

Tla.Range("A11:W1000").ClearContents

Set Col = ColFromDatabase("SELECT BDRP_END_DEPTH, BDRP_TORQUE_OFF_BTM FROM BHA_DRILLING_PARAMETERS a WHERE a.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' AND BDRP_TORQUE_OFF_BTM <>0 AND NOT BDRP_TORQUE_OFF_BTM IS NULL AND NOT BDRP_END_DEPTH IS NULL and (a.BDRP_END_TIME BETWEEN '" & StartTime & "' AND '" & EndTime & "' ) AND (a.CDPO_IDENTIFIER IN ('10', '3', '6', '7', '8', '9'))  ORDER BY BDRP_END_DEPTH")
If Col.Count <> 0 Then
    For i = 1 To Col.Count
        Tla.Cells(i + 10, 1) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 0)))
        Tla.Cells(i + 10, 2) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 1))) / 1000
    Next i
    TLADataWesImported = True
End If
Set Col = ColFromDatabase("SELECT BDRP_END_DEPTH, BDRP_TORQUE_ON_BTM FROM BHA_DRILLING_PARAMETERS a WHERE a.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' AND BDRP_TORQUE_ON_BTM <>0 AND NOT BDRP_TORQUE_ON_BTM IS NULL AND NOT BDRP_END_DEPTH IS NULL AND (a.BDRP_END_TIME BETWEEN '" & StartTime & "' AND '" & EndTime & "' ) AND (a.CDPO_IDENTIFIER IN ('10', '3', '6', '7', '8', '9'))  ORDER BY BDRP_END_DEPTH")
If Col.Count <> 0 Then
    For i = 1 To Col.Count
        Tla.Cells(i + 10, 3) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 0)))
        Tla.Cells(i + 10, 4) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 1))) / 1000
    Next i
    TLADataWesImported = True
End If
Set Col = ColFromDatabase("SELECT BDRP_END_DEPTH, BDRP_PICK_UP_HKLD FROM BHA_DRILLING_PARAMETERS a WHERE a.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' AND BDRP_PICK_UP_HKLD <>0 AND NOT BDRP_PICK_UP_HKLD IS NULL AND NOT BDRP_END_DEPTH IS NULL AND (a.BDRP_END_TIME BETWEEN '" & StartTime & "' AND '" & EndTime & "' ) AND (a.CDPO_IDENTIFIER IN ('10', '3', '6', '7', '8', '9'))  ORDER BY BDRP_END_DEPTH")
If Col.Count <> 0 Then
    For i = 1 To Col.Count
        Tla.Cells(i + 10, 5) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 0)))
        Tla.Cells(i + 10, 6) = CDbl(NumbersOnly(Separator(CStr(Col(i)), "-", 1))) * WhtCons
    Next i
    TLADataWesImported = True
End If
Set Col = ColFromDatabase("SELECT BDRP_END_DEPTH, BDRP_SLACK_OFF_HKLD FROM BHA_DRILLING_PARAMETERS a WHERE a.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' AND BDRP_SLACK_OFF_HKLD <>0 AND NOT BDRP_SLACK_OFF_HKLD IS NULL AND NOT BDRP_END_DEPTH IS NULL AND (a.BDRP_END_TIME BETWEEN '" & StartTime & "' AND '" & EndTime & "' ) AND (a.CDPO_IDENTIFIER IN ('10', '3', '6', '7', '8', '9'))  ORDER BY BDRP_END_DEPTH")
If Col.Count <> 0 Then
    For i = 1 To Col.Count
        Tla.Cells(i + 10, 7) = CDbl(NumbersOnly(NumbersOnly(Separator(CStr(Col(i)), "-", 0))))
        Tla.Cells(i + 10, 8) = CDbl(NumbersOnly(NumbersOnly(Separator(CStr(Col(i)), "-", 1)))) * WhtCons
    Next i
End If
Set Col = ColFromDatabase("SELECT BDRP_END_DEPTH, BDRP_ROTATING_HKLD FROM BHA_DRILLING_PARAMETERS a WHERE a.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' AND BDRP_ROTATING_HKLD <>0 AND NOT BDRP_ROTATING_HKLD IS NULL AND NOT BDRP_END_DEPTH IS NULL AND (a.BDRP_END_TIME BETWEEN '" & StartTime & "' AND '" & EndTime & "' ) AND (a.CDPO_IDENTIFIER IN ('10', '3', '6', '7', '8', '9'))  ORDER BY BDRP_END_DEPTH")
If Col.Count <> 0 Then
    For i = 1 To Col.Count
        Tla.Cells(i + 10, 9) = CDbl(NumbersOnly(NumbersOnly(Separator(CStr(Col(i)), "-", 0))))
        Tla.Cells(i + 10, 10) = CDbl(NumbersOnly(NumbersOnly(Separator(CStr(Col(i)), "-", 1)))) * WhtCons
    Next i
    TLADataWesImported = True
End If
' ECD extracting
Set Col = ColFromDatabase("SELECT BDRP_END_DEPTH, BDRP_FLOW_RATE, BDRP_MUD_DENSITY FROM BHA_DRILLING_PARAMETERS a WHERE a.BHAR_IDENTIFIER='" & BHAR_IDENTIFIER & "' AND BDRP_MUD_DENSITY <>0 AND NOT BDRP_MUD_DENSITY IS NULL AND BDRP_FLOW_RATE<>0 and Not BDRP_FLOW_RATE IS NULL and NOT BDRP_END_DEPTH IS NULL AND (a.BDRP_END_TIME BETWEEN '" & StartTime & "' AND '" & EndTime & "' ) AND (a.CDPO_IDENTIFIER IN ('10', '3', '6', '7', '8', '9'))  ORDER BY BDRP_END_DEPTH")
If Col.Count <> 0 Then
    For i = 1 To Col.Count
        Tla.Cells(i + 10, 12) = CDbl(NumbersOnly(NumbersOnly((Separator(CStr(Col(i)), "-", 0)))))
        Tla.Cells(i + 10, 13) = CDbl(NumbersOnly(NumbersOnly(Separator(CStr(Col(i)), "-", 1)))) * 1000
        Tla.Cells(i + 10, 14) = CDbl(NumbersOnly(NumbersOnly(Separator(CStr(Col(i)), "-", 2)))) / 1000
    Next i
    TLADataWesImported = True
End If
Set Col = Nothing
If TLADataWesImported Then MsgBox "TLA Data Was Imported!"
If Not TLADataWesImported Then MsgBox "No Data in ADV for this BHA!"

'Clear Form Sheet
TFOSh.Range("AF6:AY100000").ClearContents
TFOSh.Range("Y3:Z7").ClearContents
TFChartSh.Range("AF6:AI100000").ClearContents
TFChartSh.Range("AM6:AY100000").ClearContents

i = 2
j = 6
m = 6
Do While GenMDPPressSh.Cells(i, 38) <> ""

'For HTFB
If GenMDPPressSh.Cells(i, 41) <> -9999 Then
    TFOSh.Cells(j, 50) = GenMDPPressSh.Cells(i, 39) + GenMDPPressSh.Cells(i, 43)
    TFOSh.Cells(j, 33) = GenMDPPressSh.Cells(i, 41) * 180 / 3.1415926
    If TFOSh.Cells(j, 33) > 180 Then TFOSh.Cells(j, 33) = TFOSh.Cells(j, 33) - 360
    TFOSh.Cells(j, 32).FormulaR1C1 = "=RC[18]+R19C25"
    j = j + 1
End If


'For MTFB
If GenMDPPressSh.Cells(i, 42) <> -9999 Then
    TFOSh.Cells(m, 51) = GenMDPPressSh.Cells(i, 39) + GenMDPPressSh.Cells(i, 43)
    TFOSh.Cells(m, 35) = GenMDPPressSh.Cells(i, 42) * 180 / 3.1415926
    TFOSh.Cells(m, 34).FormulaR1C1 = "=RC[17]+R19C25"
    m = m + 1
End If

i = i + 1
Loop

TFOSh.Cells(6, 36) = GenMDPPressSh.Cells(2, 43)

If GenMDPPressSh.Cells(2, 43) = "" Then
    TFOSh.Range("X17:Z20").Font.Bold = True
    TFOSh.Range("X17:Z20").Font.Size = 18
    TFOSh.Range("X17:Z18").Interior.Color = 65535
    TFOSh.Range("Y19:Y19").Interior.Color = 255
    TFOSh.Cells(19, 25) = 0
End If

'For Each crt In TFChartSh.ChartObjects
    ' MsgBox crt.Name
     'If crt.Name = "Chart 16" Then crt.Name = "Chart 1"
'Next crt

If j > 6 Then
Set Chr = TFOSh.ChartObjects("Chart 1").Chart
Chr.SeriesCollection(1).XValues = "=TFO!$AF$6:$AF$" & CStr(j - 1)
Chr.SeriesCollection(1).Values = "=TFO!$AG$6:$AG$" & CStr(j - 1)
End If

If m > 6 Then
Set Chr = TFOSh.ChartObjects("Chart 3").Chart
Chr.SeriesCollection(1).XValues = "=TFO!$AH$6:$AH$" & CStr(m - 1)
Chr.SeriesCollection(1).Values = "=TFO!$AI$6:$AI$" & CStr(m - 1)
End If


'For DasIncRotat

i = 2
m = 6
Do While GenMDPPressSh.Cells(i, 46) <> ""

If GenMDPPressSh.Cells(i, 49) <> -9999 Then
    TFOSh.Cells(m, 37) = GenMDPPressSh.Cells(i, 46)
    TFOSh.Cells(m, 38) = GenMDPPressSh.Cells(i, 49) * 180 / 3.1415926
    m = m + 1
End If

i = i + 1
Loop

'For DasIncNRotat

i = 2
k = 6
Do While GenMDPPressSh.Cells(i, 52) <> ""

If GenMDPPressSh.Cells(i, 55) <> -9999 Then
    TFOSh.Cells(k, 39) = GenMDPPressSh.Cells(i, 52)
    TFOSh.Cells(k, 40) = GenMDPPressSh.Cells(i, 55) * 180 / 3.1415926
    k = k + 1
End If

i = i + 1
Loop

'For NearBitRotatNaviGamma

i = 2
j = 6
Do While GenMDPPressSh.Cells(i, 57) <> ""

If GenMDPPressSh.Cells(i, 59) <> 0 Then
    TFOSh.Cells(j, 41) = GenMDPPressSh.Cells(i, 57)
    TFOSh.Cells(j, 42) = GenMDPPressSh.Cells(i, 59) * 180 / 3.1415926
    j = j + 1
End If

i = i + 1
Loop

If m > 6 Then
Set Chr = TFOSh.ChartObjects("Chart 1").Chart
Chr.Axes(xlCategory).MinimumScale = CInt(TFOSh.Cells(6, 37) / 10) * 10 - 10
Chr.Axes(xlCategory).MaximumScale = CInt(TFOSh.Cells(m - 1, 37) / 10) * 10 - 10

Set Chr = TFOSh.ChartObjects("Chart 2").Chart
Chr.SeriesCollection(1).XValues = "=TFO!$AK$6:$AK$" & CStr(m - 1)
Chr.SeriesCollection(1).Values = "=TFO!$AL$6:$AL$" & CStr(m - 1)
Chr.SeriesCollection(2).XValues = "=TFO!$AM$6:$AM$" & CStr(k - 1)
Chr.SeriesCollection(2).Values = "=TFO!$AN$6:$AN$" & CStr(k - 1)
Chr.SeriesCollection(3).XValues = "=TFO!$AO$6:$AO$" & CStr(j - 1)
Chr.SeriesCollection(3).Values = "=TFO!$AP$6:$AP$" & CStr(j - 1)
Chr.Axes(xlCategory).MinimumScale = CInt(TFOSh.Cells(6, 37) / 10) * 10 - 10
Chr.Axes(xlCategory).MaximumScale = CInt(TFOSh.Cells(m - 1, 37) / 10) * 10 - 10

Set Chr = TFOSh.ChartObjects("Chart 3").Chart
Chr.Axes(xlCategory).MinimumScale = CInt(TFOSh.Cells(6, 37) / 10) * 10 - 10
Chr.Axes(xlCategory).MaximumScale = CInt(TFOSh.Cells(m - 1, 37) / 10) * 10 - 10

TFOSh.Cells(3, 25) = CInt(TFOSh.Cells(6, 37) / 10) * 10 - 10
TFOSh.Cells(4, 25) = CInt(TFOSh.Cells(m - 1, 37) / 10) * 10 - 10
TFOSh.Cells(6, 25) = 0
TFOSh.Cells(7, 25) = 100
End If

Set Chr = TFOSh.ChartObjects("Chart 2").Chart
Chr.SeriesCollection(4).XValues = "=TFO!$AQ$6:$AQ$" & CStr(j - 1)
Chr.SeriesCollection(4).Values = "=TFO!$AR$6:$AR$" & CStr(j - 1)

j = 6
k = FullSlideSheetSh.UsedRange.Rows.Count
For i = 11 To k Step 1
 If FullSlideSheetSh.Cells(i, 6) = "O" Then
    TFOSh.Cells(j, 45) = FullSlideSheetSh.Cells(i, 9)
    j = j + 1
    Do While FullSlideSheetSh.Cells(i, 10) > TFOSh.Cells(j - 1, 45)
        TFOSh.Cells(j, 45) = TFOSh.Cells(j - 1, 45) + 1
        If FullSlideSheetSh.Cells(i, 7) = "HSL" Then
        TFOSh.Cells(j - 1, 46) = -FullSlideSheetSh.Cells(i, 8)
            Else
        TFOSh.Cells(j - 1, 46) = FullSlideSheetSh.Cells(i, 8)
        End If
        j = j + 1
    Loop
    If FullSlideSheetSh.Cells(i, 7) = "HSL" Then
    TFOSh.Cells(j - 1, 46) = -FullSlideSheetSh.Cells(i, 8)
        Else
    TFOSh.Cells(j - 1, 46) = FullSlideSheetSh.Cells(i, 8)
    End If
End If
Next i

Set Chr = TFOSh.ChartObjects("Chart 1").Chart
Chr.SeriesCollection(2).XValues = "=TFO!$AS$6:$AS$" & CStr(j - 1)
Chr.SeriesCollection(2).Values = "=TFO!$AT$6:$AT$" & CStr(j - 1)

MaxMDSurvey = WorksheetFunction.Max(FullSlideSheetSh.Range("J11:J100000"))

i = 19
Do While (WPGFactSh.Cells(i, 1) <> "MD") And (i < 20000)
         
i = i + 1
Loop

i = i + 2
j = 6

Do While (WPGFactSh.Cells(i, 1) <> "") And (i < 20000)

TFOSh.Cells(j, 43) = WPGFactSh.Cells(i, 1)
TFChartSh.Cells(j, 39) = WPGFactSh.Cells(i, 1)
TFOSh.Cells(j, 44) = WPGFactSh.Cells(i, 2)
TFChartSh.Cells(j, 40) = WPGFactSh.Cells(i, 2)
TFChartSh.Cells(j, 41) = WPGFactSh.Cells(i, 3)

i = i + 1
j = j + 1
Loop

If WPGFactSh.Cells(i - 1, 1) < MaxMDSurvey - 30 Then
    MsgBox "Import WGR fact please!"
    Exit Sub
End If

'Clear Form Sheet
ROPChartSh.Range("U6:Z100000").ClearContents
i = 2
m = 6

Do While GenMDPPressSh.Cells(i, 62) <> ""


If GenMDPPressSh.Cells(i, 65) > 0 Then
    ROPChartSh.Cells(m, 21) = GenMDPPressSh.Cells(i, 62)
    ROPChartSh.Cells(m, 22) = GenMDPPressSh.Cells(i, 64) * 3600
    ROPChartSh.Cells(m, 23) = GenMDPPressSh.Cells(i, 65) / 9806.652
    m = m + 1
End If

i = i + 1

Loop

Set Chr = ROPChartSh.ChartObjects("Chart 1").Chart
Chr.SeriesCollection(1).XValues = "='ROP Chart'!$W$6:$W$" & CStr(m - 1)
Chr.SeriesCollection(1).Values = "='ROP Chart'!$V$6:$V$" & CStr(m - 1)


j = 6
If m > 6 Then
    MaxMD = ROPChartSh.Cells(m - 1, 21)
    Do While ROPChartSh.Cells(m - 1, 21) > (MaxMD - 30) And m > 5
    ROPChartSh.Cells(j, 24) = ROPChartSh.Cells(m - 1, 21)
    ROPChartSh.Cells(j, 25) = ROPChartSh.Cells(m - 1, 22)
    ROPChartSh.Cells(j, 26) = ROPChartSh.Cells(m - 1, 23)
    j = j + 1
    m = m - 1
    Loop
End If

Set Chr = ROPChartSh.ChartObjects("Chart 1").Chart
Chr.SeriesCollection(2).XValues = "='ROP Chart'!$Z$6:$Z$" & CStr(j - 2)
Chr.SeriesCollection(2).Values = "='ROP Chart'!$Y$6:$Y$" & CStr(j - 2)

'For TF Chart

i = 6
j = 6


If TFOSh.Cells(6, 36) = "" Then
    TFChartSh.Range("S17:W20").Font.Bold = True
    TFChartSh.Range("S17:W20").Font.Size = 18
    TFChartSh.Range("S17:X18").Interior.Color = 65535
    TFChartSh.Range("V19:V19").Interior.Color = 255
    TFChartSh.Cells(19, 22) = 0
End If

Do While TFOSh.Cells(i, 32) <> ""

TFChartSh.Cells(j, 50) = TFOSh.Cells(i, 50)
TFChartSh.Cells(j, 33) = TFOSh.Cells(i, 33)
If TFChartSh.Cells(j, 33) < 0 Then TFChartSh.Cells(j, 33) = TFChartSh.Cells(j, 33) + 360
TFChartSh.Cells(j, 32).FormulaR1C1 = "=RC[18]+R19C22"
TFChartSh.Cells(j, 34) = TFOSh.Cells(i, 45)
TFChartSh.Cells(j, 35) = TFOSh.Cells(i, 46)
If TFChartSh.Cells(j, 35) < 0 Then TFChartSh.Cells(j, 35) = TFChartSh.Cells(j, 35) + 360

i = i + 1
j = j + 1
Loop

If j > 6 Then
Set Chr = TFChartSh.ChartObjects("Chart 1").Chart
Chr.SeriesCollection(1).XValues = "='TF Chart'!$AF$6:$AF$" & CStr(j - 1)
Chr.SeriesCollection(1).Values = "='TF Chart'!$AG$6:$AG$" & CStr(j - 1)
Chr.SeriesCollection(2).XValues = "='TF Chart'!$AH$6:$AH$" & CStr(j - 1)
Chr.SeriesCollection(2).Values = "='TF Chart'!$AI$6:$AI$" & CStr(j - 1)
Chr.Axes(xlCategory).MinimumScale = CInt(TFChartSh.Cells(6, 32) / 10) * 10 - 10
Chr.Axes(xlCategory).MaximumScale = CInt(TFChartSh.Cells(j - 1, 32) / 10) * 10 - 10
End If

j = 6
Do While TFChartSh.Cells(j, 36) <> ""
j = j + 1
Loop

If j > 6 Then
Set Chr = TFChartSh.ChartObjects("Chart 2").Chart
Chr.SeriesCollection(1).XValues = "='TF Chart'!$AJ$6:$AJ$" & CStr(j - 1)
Chr.SeriesCollection(1).Values = "='TF Chart'!$AL$6:$AL$" & CStr(j - 1)
Chr.SeriesCollection(2).XValues = "='TF Chart'!$AJ$6:$AJ$" & CStr(j - 1)
Chr.SeriesCollection(2).Values = "='TF Chart'!$AK$6:$AK$" & CStr(j - 1)
Chr.Axes(xlCategory).MinimumScale = CInt(TFChartSh.Cells(6, 36) / 10) * 10 - 10
Chr.Axes(xlCategory).MaximumScale = CInt(TFChartSh.Cells(j - 1, 36) / 10) * 10 - 10
End If

j = 6
Do While TFChartSh.Cells(j, 39) <> ""
j = j + 1
Loop

If j > 6 Then
Set Chr = TFChartSh.ChartObjects("Chart 1").Chart
Chr.SeriesCollection(3).XValues = "='TF Chart'!$AM$6:$AM$" & CStr(j - 1)
Chr.SeriesCollection(3).Values = "='TF Chart'!$AN$6:$AN$" & CStr(j - 1)
Chr.SeriesCollection(4).XValues = "='TF Chart'!$AM$6:$AM$" & CStr(j - 1)
Chr.SeriesCollection(4).Values = "='TF Chart'!$AO$6:$AO$" & CStr(j - 1)
Set Chr = TFChartSh.ChartObjects("Chart 2").Chart
Chr.SeriesCollection(3).XValues = "='TF Chart'!$AM$6:$AM$" & CStr(j - 1)
Chr.SeriesCollection(3).Values = "='TF Chart'!$AN$6:$AN$" & CStr(j - 1)
Chr.SeriesCollection(4).XValues = "='TF Chart'!$AM$6:$AM$" & CStr(j - 1)
Chr.SeriesCollection(4).Values = "='TF Chart'!$AO$6:$AO$" & CStr(j - 1)
End If

GenMDPPressSh.Cells.Clear
MsgBox "Done!"

End Sub
Function NumbersOnly(Str As String) As String
If Str = "" Then Exit Function
On Error Resume Next
Dim Cr As String
Dim i As Integer
Dim flag As Boolean: flag = False
For i = 1 To Len(Str)
    Cr = mid(Str, i, 1)
    If Cr = "1" Then NumbersOnly = NumbersOnly & Cr
    If Cr = "2" Then NumbersOnly = NumbersOnly & Cr
    If Cr = "3" Then NumbersOnly = NumbersOnly & Cr
    If Cr = "4" Then NumbersOnly = NumbersOnly & Cr
    If Cr = "5" Then NumbersOnly = NumbersOnly & Cr
    If Cr = "6" Then NumbersOnly = NumbersOnly & Cr
    If Cr = "7" Then NumbersOnly = NumbersOnly & Cr
    If Cr = "8" Then NumbersOnly = NumbersOnly & Cr
    If Cr = "9" Then NumbersOnly = NumbersOnly & Cr
    If Cr = "0" Then NumbersOnly = NumbersOnly & Cr
    If Cr = "." Then NumbersOnly = NumbersOnly & Cr
Next i
End Function
Sub UserFormForTLAfShow()
Dim Sh As Worksheet: Set Sh = ThisWorkbook.Sheets("TLA")
UserFormForDDTLA.Show
Sh.Visible = xlSheetVisible
Sh.Select
End Sub
Sub ReCorrectionCalc()
Dim ModelSh As Worksheet: Set ModelSh = ThisWorkbook.Sheets("Model")
Dim HKLChartSh As Worksheet: Set HKLChartSh = ThisWorkbook.Sheets("Hookload Chart ")
Dim TLASh As Worksheet: Set TLASh = ThisWorkbook.Sheets("TLA")
Dim ModelArr
Dim TLAArr
Dim i As Integer
Dim HKLR As Double
Dim MD As Double
If HKLChartSh.Cells(8, 9) = "Yes" Then
    Set ModelArr = ModelSh.UsedRange
    Set TLAArr = TLASh.UsedRange
    i = 11
    Do While Not IsEmpty(TLAArr(i, 9)) And Not IsEmpty(TLAArr(i, 10))
        HKLR = TLAArr(i, 10)
        MD = TLAArr(i, 9)
    i = i + 1
    Loop
    If HKLR <> 0 And MD <> 0 Then
        HKLChartSh.Cells(8, 5) = Round(CDbl(AutoHKLChartCorection(HKLR, MD, ModelArr)), 2)
    End If
End If
End Sub
Function AutoHKLChartCorection(HKLRfakt As Double, MDfakt As Double, ModalArr As Variant) As Double

Dim MDlast As Double
Dim MDnext As Double
Dim HKDwRlastcalc As Double
Dim HKDwRnextcalc As Double
Dim i As Integer
Dim j As Integer
Dim k As Integer
ReDim HklUpModelInterpolated(1 To 4)
ReDim HklDwnModelInterpolated(1 To 4)
ReDim FFarr(1 To 4)
Dim FFup As Double
Dim FFdown As Double


Dim flag As Integer
flag = False
i = 9

Do While Not IsEmpty(ModalArr(i, 1))
    If Not IsEmpty(ModalArr(i, 1)) And Not IsEmpty(ModalArr(i + 1, 1)) Then
        If CDbl(ModalArr(i, 1)) < MDfakt And CDbl(ModalArr(i + 1, 1)) >= MDfakt Then
            flag = True
            AutoHKLChartCorection = HKLRfakt - (CDbl(ModalArr(i, 10)) + (MDfakt - CDbl(ModalArr(i, 1))) * (CDbl(ModalArr(i + 1, 10)) - CDbl(ModalArr(i, 10))) / (CDbl(ModalArr(i + 1, 1)) - CDbl(ModalArr(i, 1))))
        End If
    End If
i = i + 1
Loop
If Not flag Then
    AutoHKLChartCorection = 0
End If
    
End Function
Function Interpol(x1 As Double, x2 As Double, y1 As Double, y2 As Double, x As Double) As Double
Interpol = -9999
If x > x1 And x <= x2 Then
    Interpol = (x - x1) * (y2 - y1) / (x2 - x1) + y1
End If
End Function
Attribute VB_Name = "For_WPGImport"
Sub WPGFactImport()
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim WPGFactSh As Worksheet: Set WPGFactSh = TWb.Sheets("WPGFact")
Dim WPGFactWb As Workbook

With Application.FileDialog(msoFileDialogFilePicker)
    .Title = "Select WPGR file"
    .ButtonName = "Select"
    .AllowMultiSelect = False
    .InitialFileName = TWb.Path
    .Filters.Add "Excel files", "*.xls*", 1
    If .Show Then Folder = .SelectedItems(1) Else Exit Sub
End With

If Folder <> "" Then
    Set WPGFactWb = Workbooks.Open(Folder)
    WPGFactWb.Application.DisplayAlerts = False
    WPGFactWb.Windows(1).Visible = False
        
    If InStr(1, WPGFactWb.Worksheets(1).Cells(2, 1), "Actual Wellpath Geographic Report", vbTextCompare) <> 0 Then
        WPGFactWb.Worksheets(1).UsedRange.Copy WPGFactSh.Range(WPGFactWb.Worksheets(1).UsedRange.Address)
        MsgBox "WPG Fact has been imported!"
    Else
        
        MsgBox ("Selected file is not WPGR")
    End If
        WPGFactWb.Close
Else
    MsgBox ("WPG Fact was not imported! Try again, please!")
End If
End Sub

Attribute VB_Name = "Head"
Sub Header()
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Dim Wb As Workbook: Set Wb = ThisWorkbook
Dim Sh As Worksheet
Dim BHAHeaderSh As Worksheet
Dim i As Integer
Dim opr As String
Dim fld As String
Dim pad As String
Dim well As String

If Not ShIsExist("Header", Wb) Then
    Exit Sub
End If
If Not ShIsExist("BHAHeader", Wb) Then
    Exit Sub
End If
Set Sh = Wb.Sheets("Header")
Set BHAHeaderSh = Wb.Sheets("BHAHeader")

opr = BHAHeaderSh.Cells(2, 4)
fld = BHAHeaderSh.Cells(2, 5)
pad = BHAHeaderSh.Cells(2, 6)
well = BHAHeaderSh.Cells(2, 7)

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Header
Sh.Columns(2).ClearContents
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sh.Cells(3, 2) = Trlt2(opr, 7)
Sh.Cells(4, 2) = Trlt2(fld, 10)
Sh.Cells(5, 2) = Trlt2(pad, 13, True)
Sh.Cells(6, 2) = Trlt2(well, 16, True)
End Sub



Function Trlt2(ByVal Statm As String, ByVal ColNum As Integer, Optional ByVal Def As Boolean) As String
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Translate, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Dim Wb As Workbook
Dim Sh As Worksheet
Dim i As Integer
Dim DefTrans As String
Set Wb = ThisWorkbook
DefTrans = ""
If Statm = "" Or Statm = "NULL" Then
    Trlt2 = ""
    Exit Function
End If
If Not ShIsExist("Translate", Wb) Then
    Trlt2 = Statm
    Exit Function
End If
Set Sh = Wb.Sheets("Translate")
i = 2
Do While Sh.Cells(i, ColNum) <> "" And i < 1000
    If Sh.Cells(i, ColNum) = Statm Then
        Trlt2 = Sh.Cells(i, ColNum + 1)
        Exit Function
    End If
i = i + 1
Loop
If Def Then DefTrans = Statm
Trlt2 = InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|: " & Statm, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", DefTrans)
If Trlt2 <> "" Then
Sh.Cells(i, ColNum) = Statm
Sh.Cells(i, ColNum + 1) = Trlt2
Else
Trlt2 = Statm
End If
End Function
Attribute VB_Name = "ImpPicToBHAFromLibSheet"

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Sub PicImportFromLibSheet()

Dim Sh As Worksheet
Dim PicLibSh As Worksheet
Dim Wb As Workbook
Dim i As Integer
Dim PicRange As Range
Dim PicName As String
Set Wb = ThisWorkbook
Application.ScreenUpdating = False
Application.DisplayAlerts = False
If Not ShIsExist("BHARep", Wb) Then Exit Sub


For i = 2 To 4
If Wb.Sheets("Setup").Cells(i, 3) = True Then
    If Not ShIsExist(CStr(Wb.Sheets("Setup").Cells(i, 2)), Wb) Then Exit Sub
    Set PicLibSh = Wb.Sheets(CStr(Wb.Sheets("Setup").Cells(i, 2)))
End If
Next i
Set Sh = Wb.Sheets("BHARep")
i = 2
Do While Sh.Cells(i, 1) <> ""
Set PicRange = Sh.Cells(i, 16)
PicName = Sh.Cells(i, 9)
PicInsertToRangeFromThisBookSheet PicRange, PicName, , True, , PicLibSh
i = i + 1
Loop
Application.ScreenUpdating = True
Application.DisplayAlerts = True
End Sub

Sub PicImportFromLibSheet2(ByRef BHASh As Worksheet, PicNameColumnIndex As Integer, PicColomnIndex As Integer)

Dim PicLibSh As Worksheet
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim i As Integer
Dim PicRange As Range
Dim PicName As String

For i = 2 To 4
If TWb.Sheets("Setup").Cells(i, 3) = True Then
    If Not ShIsExist(CStr(TWb.Sheets("Setup").Cells(i, 2)), TWb) Then Exit Sub
    Set PicLibSh = TWb.Sheets(CStr(TWb.Sheets("Setup").Cells(i, 2)))
End If
Next i
i = 2
Do While BHASh.Cells(i, 1) <> ""
    Set PicRange = BHASh.Cells(i, PicColomnIndex)
    PicName = BHASh.Cells(i, PicNameColumnIndex)
    PicInsertToRangeFromThisBookSheet PicRange, PicName, , True, , PicLibSh
i = i + 1
Loop
End Sub

Sub PicInsertToRangeFromThisBookSheet(ByRef PicRange As Range, ByVal PicName As String, _
                     Optional ByVal AdjustWidth As Boolean, _
                     Optional ByVal AdjustHeight As Boolean, _
                     Optional ByVal AdjustPicture As Boolean = False, _
                     Optional ByRef PicLibSh As Worksheet)
    ' ==========  |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:  ====================
    ' PicRange - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' PicName - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| JPG, BMP, PNG, |fffd| |fffd|.|fffd|.)
    ' AdjustWidth - |fffd||fffd||fffd||fffd| TRUE, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
    ' AdjustHeight - |fffd||fffd||fffd||fffd| TRUE, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
    ' AdjustPicture - |fffd||fffd||fffd||fffd| TRUE, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|,
    '                 |fffd||fffd||fffd||fffd| FALSE (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    ' AdjustName - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    On Error Resume Next: Application.ScreenUpdating = False
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
    Dim ph As Shape
    Dim Shp As Shape
    Dim Sh As Worksheet
    
    Set Sh = PicRange.Parent
    
    For Each Shp In PicLibSh.Shapes
        If Shp.Name = PicName Then
            Shp.Copy
            Sh.Paste PicRange
            Exit For
        End If
       
    Next Shp
    
    
    

    Set ph = Sh.Shapes.Item(Sh.Shapes.Count)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ph.Top = PicRange.Top: ph.Left = PicRange.Left + 1
 
    K_picture = ph.Width / ph.Height    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    K_PicRange = PicRange.Width / PicRange.Height    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

    If AdjustPicture Then    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)

        ' |fffd||fffd||fffd||fffd| AdjustWidth=TRUE, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If AdjustWidth Then ph.Width = PicRange.Width: ph.Height = ph.Width / K_picture
 
        ' |fffd||fffd||fffd||fffd| AdjustHeight=TRUE, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If AdjustHeight Then ph.Height = PicRange.Height: ph.Width = ph.Height * K_picture
 
        ' AdjustWidth=TRUE |fffd| AdjustHeight=TRUE: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
        If AdjustWidth And AdjustHeight Then ph.Width = PicRange.Width: ph.Height = PicRange.Height
 
 
    Else    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...)

        If AdjustWidth Then    ' |fffd||fffd||fffd||fffd| AdjustWidth=TRUE, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            PicRange.Cells(1).ColumnWidth = PicRange.Cells(1).ColumnWidth * ph.Width / PicRange.Cells(1).Width
            While Abs(PicRange.Cells(1).Width - ph.Width) > 0.1    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                PicRange.Cells(1).ColumnWidth = PicRange.Cells(1).ColumnWidth - 0.2 * (PicRange.Cells(1).Width - ph.Width)
            Wend
        End If
 
        If AdjustHeight Then    ' |fffd||fffd||fffd||fffd| AdjustHeight=TRUE, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            PicRange.Cells(1).RowHeight = PicRange.Cells(1).RowHeight * ph.Height / PicRange.Cells(1).Height
            While Abs(PicRange.Cells(1).RowHeight - ph.Height) > 0.3    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            Delta = PicRange.Cells(1).RowHeight - (PicRange.Cells(1).RowHeight - ph.Height) / 5
                PicRange.Cells(1).RowHeight = Delta
            Wend
        End If
 
    End If
End Sub

Sub PicImportToLibSheet()
'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Dim PicLibSh As Worksheet
Dim Wb As Workbook
Dim i As Integer
Dim PicRange As Range
Dim PicName As String
Dim PicPath As String

Application.ScreenUpdating = False
Application.DisplayAlerts = False

Set Wb = ThisWorkbook

If Not ShIsExist("PicLib", Wb) Then Exit Sub

Set PicLibSh = Wb.Sheets("PicLib")

i = 2
Do While PicLibSh.Cells(i, 1) <> ""
Set PicRange = PicLibSh.Cells(i, 2)
PicName = PicLibSh.Cells(i, 1)
PicPath = Wb.Path & "\bhaicons\" & PicLibSh.Cells(i, 1) & ".gif"
PicInsertToRange PicRange, PicPath, True, True, True, PicName
i = i + 1
Loop

Application.ScreenUpdating = True
Application.DisplayAlerts = True
End Sub

Sub PicLibSheetRedactor()
Dim Nm As String
Dim Shp As Shape
Dim Sh As Worksheet
On Error Resume Next:
Set Sh = ThisWorkbook.ActiveSheet

For Each Shp In Sh.Shapes
   If CStr(Range(Shp.TopLeftCell.Offset(0, -1).Address)) <> "" And Shp.Name <> CStr(Range(Shp.TopLeftCell.Offset(0, -1).Address)) Then
    
        If IfShpExistOnSheet(CStr(Range(Shp.TopLeftCell.Offset(0, -1).Address).Value), Sh) Then Sh.Shapes(CStr(Range(Shp.TopLeftCell.Offset(0, -1).Address).Value)).Delete
        Shp.Name = CStr(Range(Shp.TopLeftCell.Offset(0, -1).Address).Value)
    End If

Next

End Sub

Function IfShpExistOnSheet(ShpName As String, ByRef Sh As Worksheet) As Boolean
Dim Shp As Shape
IfShpExistOnSheet = False
For Each Shp In Sh.Shapes
If Shp.Name = ShpName Then
IfShpExistOnSheet = True
Exit Function
End If
Next
End Function
Sub PicInsertToRange(ByRef PicRange As Range, ByVal PicPath As String, _
                     Optional ByVal AdjustWidth As Boolean, _
                     Optional ByVal AdjustHeight As Boolean, _
                     Optional ByVal AdjustPicture As Boolean = False, _
                     Optional ByVal AdjustName As String)
    ' ==========  |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:  ====================
    ' PicRange - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' PicPath - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| JPG, BMP, PNG, |fffd| |fffd|.|fffd|.)
    ' AdjustWidth - |fffd||fffd||fffd||fffd| TRUE, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
    ' AdjustHeight - |fffd||fffd||fffd||fffd| TRUE, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
    ' AdjustPicture - |fffd||fffd||fffd||fffd| TRUE, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|,
    '                 |fffd||fffd||fffd||fffd| FALSE (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|), |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    ' AdjustName - |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    On Error Resume Next: Application.ScreenUpdating = False
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
    Dim ph As Picture: Set ph = PicRange.Parent.Pictures.Insert(PicPath, msoFalse)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
    ph.Name = AdjustName
    
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ph.Top = PicRange.Top: ph.Left = PicRange.Left
 
    K_picture = ph.Width / ph.Height    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    K_PicRange = PicRange.Width / PicRange.Height    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

    If AdjustPicture Then    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)

        ' |fffd||fffd||fffd||fffd| AdjustWidth=TRUE, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If AdjustWidth Then ph.Width = PicRange.Width: ph.Height = ph.Width / K_picture
 
        ' |fffd||fffd||fffd||fffd| AdjustHeight=TRUE, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If AdjustHeight Then ph.Height = PicRange.Height: ph.Width = ph.Height * K_picture
 
        ' AdjustWidth=TRUE |fffd| AdjustHeight=TRUE: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
        If AdjustWidth And AdjustHeight Then ph.Width = PicRange.Width: ph.Height = PicRange.Height
 
 
    Else    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...)

        If AdjustWidth Then    ' |fffd||fffd||fffd||fffd| AdjustWidth=TRUE, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            PicRange.Cells(1).ColumnWidth = PicRange.Cells(1).ColumnWidth * ph.Width / PicRange.Cells(1).Width
            While Abs(PicRange.Cells(1).Width - ph.Width) > 0.1    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                PicRange.Cells(1).ColumnWidth = PicRange.Cells(1).ColumnWidth - 0.2 * (PicRange.Cells(1).Width - ph.Width)
            Wend
        End If
 
        If AdjustHeight Then    ' |fffd||fffd||fffd||fffd| AdjustHeight=TRUE, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            PicRange.Cells(1).RowHeight = PicRange.Cells(1).RowHeight * ph.Height / PicRange.Cells(1).Height
            While Abs(PicRange.Cells(1).Height - ph.Height) > 0.1    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                PicRange.Cells(1).RowHeight = PicRange.Cells(1).RowHeight - 0.2 * (PicRange.Cells(1).Height - ph.Height)
            Wend
        End If
 
    End If
End Sub

Sub CleanPics()
Dim Shp As Shape
Dim Shptmp As Shape
Dim Sh As Worksheet
Set Sh = ThisWorkbook.Sheets("PicLib")
For Each Shp In Sh.Shapes
Shp.Copy
Sh.PasteSpecial Format:="Bitmap", Link:=False, DisplayAsIcon:=False

    Selection.ShapeRange.Left = (Shp.TopLeftCell.Offset(0).Left + 1)
    Selection.ShapeRange.Top = (Shp.TopLeftCell.Offset(0).Top + 1)


Shp.Delete


Next
End Sub


Sub hlp()

Dim Shp As Shape
Dim Shptmp As Shape
Dim Sh As Worksheet


Set Sh = ThisWorkbook.Sheets("PicLibGPN")
For Each Shp In Sh.Shapes
If Shp.Type = 13 Then
   ActiveSheet.Shapes.Range(Array(Shp.Name)).Select
    Selection.ShapeRange.PictureFormat.Crop.PictureWidth = 34
    Selection.ShapeRange.PictureFormat.Crop.PictureHeight = 67
    Selection.ShapeRange.PictureFormat.Crop.PictureOffsetX = 0
    Selection.ShapeRange.PictureFormat.Crop.PictureOffsetY = -2

End If

'Shp.ScaleWidth 1.1, msoFalse, msoScaleFromTopLeft
'Shp.Left = Shp.TopLeftCell.Left + 1
'Shp.TopLeftCell.Offset(0, 2) = Shp.Width
'Shp.TopLeftCell.Offset(0, 2) = Shp.Width / Shp.Height

'Shp.TopLeftCell.Offset(0, 2) = Shp.Type
    'ActiveSheet.Shapes.Range(Array("acc")).Select
    'Selection.ShapeRange.ScaleWidth 1.2, msoFalse, msoScaleFromTopLeft



Next
End Sub
Attribute VB_Name = "Main"
Option Base 1

Function WinVersion() As String
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| MSQL |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2005 |fffd||fffd||fffd| 2012
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| getVersion |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (Option Explicit) - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| WVG
If CStr(getVersion()) = "Version is 6.1" Or CStr(getVersion()) = "Version is 10.0" Then
WinVersion = "2012"
Else
WinVersion = "2005"
End If
End Function


Sub RunInfoGetOneSh(TabName As String, Collmns As String)
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| ADV |fffd||fffd||fffd||fffd||fffd||fffd||fffd|(-|fffd||fffd|) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| #1 (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
Application.ScreenUpdating = False
Application.DisplayAlerts = False
Dim sHostName As String
' Get Host Name / Get Computer Name
sHostName = Environ$("computername")
'ADO = activex data objects
'data <--> OLEDB Provider <--> ADO Data object
' You need a reference to ADO Libraray!!
Dim sCon As String
Dim sSql As String
Dim sSqlCommand As String
Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction
Dim cmdObj As ADODB.Command 'declarate a command object
Dim MSQLVertion As String
Dim gf As Field
Dim Sh As Worksheet
Dim Wb As Workbook
Dim Lst As Collection
Dim i As Integer
Set Wb = ThisWorkbook
sSql = TabName
For Each Sh In Wb.Worksheets
If Sh.Name = TabName Then
Sh.Visible = (0)
Sh.Delete
End If
Next Sh
Worksheets.Add.Name = sSql
Set cn = New ADODB.Connection
sCon = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=True;Data Source=" & sHostName & "\ADVANTAGE" & WinVersion & ";Initial Catalog=advantage"
cn.Open sCon
sSqlCommand = "SELECT " & Collmns & " FROM " & TabName
Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
rs.Open sSqlCommand, cn, adOpenForwardOnly, adLockReadOnly, adCmdText
If rs.EOF Then
'MsgBox ("The record set is empty. rs.EOF=" & rs.EOF)
Worksheets(sSql).Delete
Else
'MsgBox ("The number of rows returnned from the select sattment is :" & rs.RecordCount)
Range("a1").Select
Dim coloffset As Integer
coloffset = 0
For Each gf In rs.Fields
Range("a1").Offset(0, coloffset).Value = gf.Name
coloffset = coloffset + 1
Next gf
        'If Collmns <> "*" Then
        'For i = 1 To rs.Fields(1).ActualSize
         ' MsgBox rs.Fields(0).Value
         ' rs.MoveNext
         ' Next i
      '  End If

rs.MoveFirst
Sheets(sSql).Cells(2, 1).CopyFromRecordset rs
Sheets(sSql).Visible = CInt(0)
End If
cn.Close
Set cn = Nothing
Set rs = Nothing
Application.ScreenUpdating = True
Application.DisplayAlerts = True
End Sub

Sub RunInfoGetOneShWhithCommand(TabName As String, Command As String)
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| ADV  |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| SQL
Dim sHostName As String
' Get Host Name / Get Computer Name
sHostName = Environ$("computername")
'ADO = activex data objects
'data <--> OLEDB Provider <--> ADO Data object
' You need a reference to ADO Libraray!!
Dim sCon As String
Dim sSql As String
Dim sSqlCommand As String
Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction
Dim cmdObj As ADODB.Command 'declarate a command object
Dim MSQLVertion As String
Dim gf As Field
Dim Sh As Worksheet
Dim Wb As Workbook
Dim Lst As Collection
Dim i As Integer

Set Wb = ThisWorkbook
sSql = TabName
For Each Sh In Wb.Worksheets
If Sh.Name = TabName Then
Sh.Visible = (0)
Sh.Delete
End If
Next Sh
Worksheets.Add.Name = sSql
Set cn = New ADODB.Connection
sCon = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=True;Data Source=" & sHostName & "\ADVANTAGE" & WinVersion & ";Initial Catalog=advantage"
cn.Open sCon
'sSql = "SURVEY_STATION"
'sSql = "BHA_RUN"
'sSql = "APP_CASE_BHA_RUN"
'sSql = "BHA_LIFE_BUCKET"
'sSql = "plan_survey_program"
sSqlCommand = Command
Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
rs.Open sSqlCommand, cn, adOpenForwardOnly, adLockReadOnly, adCmdText

If rs.EOF Then
'MsgBox ("The record set is empty. rs.EOF=" & rs.EOF)
Worksheets(sSql).Delete
Else
'MsgBox ("The number of rows returnned from the select sattment is :" & rs.RecordCount)

Range("a1").Select
Dim coloffset As Integer
coloffset = 0


For Each gf In rs.Fields
Range("a1").Offset(0, coloffset).Value = gf.Name
coloffset = coloffset + 1
Next gf
        'If Collmns <> "*" Then
        'For i = 1 To rs.Fields(1).ActualSize
         ' MsgBox rs.Fields(0).Value
         ' rs.MoveNext
         ' Next i
      '  End If

rs.MoveFirst
Sheets(sSql).Cells(2, 1).CopyFromRecordset rs

End If
cn.Close
Set cn = Nothing
Set rs = Nothing
End Sub

Public Function CollFromRs(Command As String, FildIndex As Integer, sCon As String) As Collection
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| ADV, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd||fffd|), |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| "" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Set CollFromRs = New Collection

Dim sHostName As String ' Get Host Name / Get Computer Name
sHostName = Environ$("computername")
'ADO = activex data objects
'data <--> OLEDB Provider <--> ADO Data object
' You need a reference to ADO Libraray!!

Dim sSql As String
Dim sSqlCommand As String
Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction
Dim cmdObj As ADODB.Command 'declarate a command object
Dim MSQLVertion As String
Dim gf As Field
Dim i As Integer

If sCon = "" Then sCon = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=True;Data Source=" & sHostName & "\ADVANTAGE" & WinVersion & ";Initial Catalog=advantage"
Set cn = New ADODB.Connection
cn.Open sCon
Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
rs.Open Command, cn, adOpenForwardOnly, adLockReadOnly, adCmdText
If rs.EOF Then
    MsgBox ("The record set is empty. rs.EOF=" & rs.EOF)
Else
    For i = 1 To rs.RecordCount
        If IsNull(rs.Fields(FildIndex).Value) = False Then
        CollFromRs.Add CStr(rs.Fields(FildIndex).Value)
        End If
        rs.MoveNext
    Next i
End If
cn.Close
Set cn = Nothing
Set rs = Nothing
End Function


Sub GoToTabs()
Attribute GoToTabs.VB_ProcData.VB_Invoke_Func = "q\n14"
Application.ScreenUpdating = False
Application.DisplayAlerts = False
Worksheets("Tabls").Select
Application.ScreenUpdating = True
Application.DisplayAlerts = True
End Sub


Sub UnhideSheets()
Dim Sh As Worksheet
For Each Sh In ThisWorkbook.Sheets
Sh.Visible = CInt(-1)
Next
ThisWorkbook.Sheets("Tabls").Select
End Sub

Sub UnhideSetup()

If Not ShIsExist("Setup", ThisWorkbook) Then Exit Sub
ThisWorkbook.Sheets("Setup").Visible = CInt(-1)
ThisWorkbook.Sheets("Setup").Select
End Sub

Sub RunInfoGetOneShWhithCommandtoWb(TabName As String, Command As String, Wb As Workbook)
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| ADV  |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| SQL
Dim sHostName As String
' Get Host Name / Get Computer Name
sHostName = Environ$("computername")
'ADO = activex data objects
'data <--> OLEDB Provider <--> ADO Data object
' You need a reference to ADO Libraray!!
Dim sCon As String
Dim sSql As String
Dim sSqlCommand As String
Dim rs As ADODB.Recordset 'rs holds dara
Dim cn As ADODB.Connection 'declare connaction
Dim cmdObj As ADODB.Command 'declarate a command object
Dim MSQLVertion As String
Dim gf As Field
Dim Sh As Worksheet
Dim Lst As Collection
Dim i As Integer
sSql = TabName
For Each Sh In Wb.Worksheets
If Sh.Name = TabName Then
Sh.Visible = (0)
Sh.Delete
End If
Next Sh
Wb.Worksheets.Add.Name = sSql
Set cn = New ADODB.Connection
sCon = "Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=True;Data Source=" & sHostName & "\ADVANTAGE" & WinVersion & ";Initial Catalog=advantage"
cn.Open sCon
'sSql = "SURVEY_STATION"
'sSql = "BHA_RUN"
'sSql = "APP_CASE_BHA_RUN"
'sSql = "BHA_LIFE_BUCKET"
'sSql = "plan_survey_program"
sSqlCommand = Command
Set rs = New ADODB.Recordset
rs.CursorLocation = adUseClient 'who manages the
rs.Open sSqlCommand, cn, adOpenForwardOnly, adLockReadOnly, adCmdText
If rs.EOF Then
'MsgBox ("The record set is empty. rs.EOF=" & rs.EOF)
Wb.Worksheets(sSql).Delete
Else
'MsgBox ("The number of rows returnned from the select sattment is :" & rs.RecordCount)
Range("a1").Select
Dim coloffset As Integer
coloffset = 0
For Each gf In rs.Fields
Range("a1").Offset(0, coloffset).Value = gf.Name
coloffset = coloffset + 1
Next gf
        'If Collmns <> "*" Then
        'For i = 1 To rs.Fields(1).ActualSize
         ' MsgBox rs.Fields(0).Value
         ' rs.MoveNext
         ' Next i
      '  End If
rs.MoveFirst
Wb.Sheets(sSql).Cells(2, 1).CopyFromRecordset rs
End If
cn.Close
Set cn = Nothing
Set rs = Nothing
End Sub

Attribute VB_Name = "Maths"
'=======================================================================
' Module        : Maths
'-----------------------------------------------------------------------
' Type          : Code Module
'-----------------------------------------------------------------------
' Description   : Math function
'-----------------------------------------------------------------------
' Properties    :
'-----------------------------------------------------------------------
' Events        :
'-----------------------------------------------------------------------
' LIBRARY       :
' References    :
'-----------------------------------------------------------------------
' OTHER         :
' References    :
'-----------------------------------------------------------------------
' Author        : Andrey Valchuk
'-----------------------------------------------------------------------
' Created       : Dec 14, 2015
'-----------------------------------------------------------------------
' Edited        :
'=======================================================================

Public Function Arccos(x) As Double
    If RoundMath(x, 8) = 1# Then Arccos = 0#: Exit Function
    If RoundMath(x, 8) = -1# Then Arccos = Pi: Exit Function
    Arccos = Atn(-x / Sqr(-x * x + 1)) + 2 * Atn(1)
End Function
Public Function Arcsin(x As Double) As Double
    If (Sqr(1 - x * x) <= 0.000000000001) And (Sqr(1 - x * x) >= -0.000000000001) Then
                                                                                      Arcsin = Pi / 2
    Else
        Arcsin = Atn(x / Sqr(-x * x + 1))
    End If
End Function
Public Function Log10(x As Variant)
    Log10 = Log(x) / Log(10#)
End Function

'*******
'******* Improve Excel RoundMathing function so that it works according to math principles
'*******
Public Function RoundMath(ByVal AnyNumber, ByVal Digits)
    RoundMath = Round((AnyNumber + 1E-99), Digits)
End Function
Attribute VB_Name = "Modul_Help"
Sub ShVisi()
Dim Sh As Worksheet
For Each Sh In ThisWorkbook.Sheets
    Sh.Visible = xlSheetVisible
Next Sh


End Sub

Attribute VB_Name = "Module1"
Sub Macro1()
Attribute Macro1.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro1 Macro
'

'
    ActiveCell.FormulaR1C1 = "=RC[1]-RC[2]"
    Range("AC12").Select
End Sub
Attribute VB_Name = "Module2"
Sub Macro2()
Attribute Macro2.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro2 Macro
'

'
    Range("AC12").Select
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 15773696
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
End Sub
Sub Macro3()
Attribute Macro3.VB_ProcData.VB_Invoke_Func = " \n14"
'
' Macro3 Macro
'

'
    With Selection.Interior.Pattern = xlNone
        .Pattern = xlNone
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
End Sub
Attribute VB_Name = "SaveBHA"
Sub SaveBHARus()
' Mode - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' 1-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    
Dim Mode As Integer
Dim Wbtmp As Workbook
Dim Wb As Workbook
Dim Sh As Worksheet
Dim tmpSh As Worksheet
Dim Shp As Shape
Dim WbName As String
Dim WbBHARep As Workbook
Dim Ap As Application

Mode = 0 '|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|.

Set Wb = ThisWorkbook
Set Ap = Wb.Application
Set Sh = Wb.ActiveSheet
Select Case Mode
Case 0
    
    If Wb.Sheets("Header").Cells(7, 2) <> "" And Sh.Name = "BHARep" Then
        If ShIsExist(CStr(Wb.Sheets("Header").Cells(7, 2)), Wb) Then
           If (MsgBox(CStr(Wb.Sheets("Header").Cells(7, 2)) & " is exist in this WorkBook, replace it?", vbYesNo, "Save BHA Report")) = 7 Then
                 Application.ScreenUpdating = True
                 Application.DisplayAlerts = True
                Exit Sub
           End If
            Wb.Sheets(CStr(Wb.Sheets("Header").Cells(7, 2))).Delete
        End If
    Sh.Name = CStr(Wb.Sheets("Header").Cells(7, 2))
    WbName = ChecStringFileName("BHARus " & Wb.Sheets("Header").Cells(7, 2) & " " & Wb.Sheets("Header").Cells(4, 2) & "-" & Wb.Sheets("Header").Cells(5, 2) & "-" & Wb.Sheets("Header").Cells(6, 2))
    Else
    WbName = ChecStringFileName("BHARus " & Sh.Name & " " & Sh.Cells(4, 4) & "-" & Sh.Cells(5, 4) & "-" & Sh.Cells(6, 4))
    End If
     Sh.Copy
    Set WbBHARep = ActiveWorkbook
    For Each tmpSh In WbBHARep.Sheets
        For Each Shp In tmpSh.Shapes
            If Shp.Name = "SaveBtmn" Then Shp.Delete
        Next Shp
    Next tmpSh
    WbBHARep.SaveAs ThisWorkbook.Path & "\" & WbName & ".xlsx", FileFormat:=51
    
End Select
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
End Sub
Sub SaveDDBHARus()
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
Dim TWb As Workbook: Set TWb = ThisWorkbook
Dim BHARepSh As Worksheet: Set BHARepSh = TWb.ActiveSheet
Dim WbName As String
WbName = "BHARus"
If TWb.Sheets("DDSetup").Cells(2, 6) <> "" Then WbName = WbName & " " & TWb.Sheets("DDSetup").Cells(2, 6)
If BHARepSh.Cells(6, 4) <> "" Then WbName = WbName & "-" & BHARepSh.Cells(6, 4)
If BHARepSh.Cells(7, 4) <> "" Then WbName = WbName & "-" & BHARepSh.Cells(7, 4)
If BHARepSh.Cells(8, 4) <> "" Then WbName = WbName & "-" & BHARepSh.Cells(8, 4)
If BHARepSh.Cells(9, 4) <> "" Then WbName = WbName & "- Run#" & BHARepSh.Cells(9, 4)

BHARepSh.Copy
If TWb.Sheets("DDSetup").Cells(2, 6) <> "" Then ActiveWorkbook.Sheets(1).Name = TWb.Sheets("DDSetup").Cells(2, 6)

    For Each Shp In ActiveWorkbook.Sheets(1).Shapes
            If Shp.Name = "Save BHA Rus" Then Shp.Delete
    Next Shp



Dim WbBHARep As Workbook: Set WbBHARep = ActiveWorkbook
    WbBHARep.SaveAs ThisWorkbook.Path & "\" & ChecStringFileName(WbName) & ".xlsx", FileFormat:=51
    WbBHARep.SaveAs ThisWorkbook.Path & "\" & ChecStringFileName(WbName), FileFormat:=57
     Application.ScreenUpdating = True
    Application.DisplayAlerts = True
End Sub

Function ChecStringFileName(ByVal FileName As String) As String
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|), |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd| -, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| N/A
If FileName = "" Then
    ChecStringFileName = ""
    Exit Function
End If
ChecStringFileName = ""
Dim Cr As String
Dim i As Integer

For i = 1 To Len(FileName)
Cr = mid(FileName, i, 1)
If Cr = "*" Then Cr = "-"
If Cr = "|" Then Cr = "-"
If Cr = "\" Then Cr = "-"
If Cr = ":" Then Cr = "-"
If Cr = """" Then Cr = "-"
If Cr = "<" Then Cr = "-"
If Cr = ">" Then Cr = "-"
If Cr = "?" Then Cr = "-"
If Cr = "/" Then Cr = "-"
ChecStringFileName = ChecStringFileName & Cr
Next i
End Function
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet162"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
If Not Intersect(Target, [C7]) Is Nothing Then
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    If Not IsNumeric(Cells(7, 3)) Then Cells(7, 3) = 0
    Cells(7, 3) = CDbl(Cells(7, 3))
    Dim i As Integer
    Dim Correction As Double: Correction = CDbl(Cells(7, 3))
    Dim Sh As Worksheet: Set Sh = ThisWorkbook.Sheets("Model")
    i = 9
    Do While Sh.Cells(i, 30) <> ""
        Sh.Cells(i, 30) = Sh.Cells(i, 30) + Correction - Cells(10, 3)
        Sh.Cells(i, 31) = Sh.Cells(i, 31) + Correction - Cells(10, 3)
        Sh.Cells(i, 32) = Sh.Cells(i, 32) + Correction - Cells(10, 3)
    i = i + 1
    Loop
    Cells(10, 3) = Correction
    Application.EnableEvents = True
    Application.ScreenUpdating = True
End If
End Sub
Sub EnbEv()

Application.EnableEvents = True
End Sub

Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet27"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet29"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
Application.ScreenUpdating = False
If Not Intersect(Target, [E8]) Is Nothing Then
    If Not IsNumeric(Cells(8, 5)) Then Cells(8, 5) = 0
    Me.ChartObjects(1).Chart.Axes(xlCategory).MinimumScale = Me.Cells(1, 1)
    Me.ChartObjects(1).Chart.Axes(xlCategory).MaximumScale = Me.Cells(2, 1)
End If
If Not Intersect(Target, [I8]) Is Nothing Then
    If Cells(8, 9) = "Yes" Then
        ReCorrectionCalc
    End If
End If
Application.ScreenUpdating = True
End Sub

Attribute VB_Name = "Sheet31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3738"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet53"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet54"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet55"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet63"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet70"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet74"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet75"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "SheetIsExist"
Function ShIsExist(ByVal ShName As String, ByRef Wb As Workbook) As Boolean
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TRUE |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Wb |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ShName,
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| AppSkrnUpd - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| AppDispAllUpd - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Msg (Boolean) - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
ShIsExist = False
Dim Sh As Worksheet
For Each Sh In Wb.Sheets
    If Sh.Name = ShName Then
    ShIsExist = True
    Exit Function
    End If
Next Sh

End Function
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tmp"

Public Sub XXX()
Dim i As Integer
Dim CollName As Collection
Dim CollGUID As Collection
Dim CollFullPath As Collection

Set CollName = New Collection
Set CollGUID = New Collection
Set CollFullPath = New Collection

For Each ref In ActiveWorkbook.VBProject.References
   CollName.Add ref.Name
   CollGUID.Add ref.GUID
   CollFullPath.Add ref.FullPath
Next ref

If CollName.Count > 0 Then
    For i = 1 To CollName.Count
     'MsgBox CollName(i) & "  " & CollFullPath(i)
    Next i
End If
'Application.VBE.ActiveVBProject.References.AddFromFile "C:\windows\SysWOW64\MSCOMCTL.OCX"
 
 
Set CollName = Nothing
Set CollGUID = Nothing
Set CollFullPath = Nothing
End Sub

'If
'Application.VBE.ActiveVBProject.References.Item("MSForms").IsBroken = True
'Then
'Application.VBE.ActiveVBProject.References.Remove ref
'Application.VBE.ActiveVBProject.References.AddFrom Guid("{0D452EE1-E08F-101A-852E-02608C4D0BB4}",
'2, 0) = True 'ms forms reference C:WINNTsystem32FM20.DLL full path
'End If

Sub ShowAllSh()
For Each Sh In ThisWorkbook.Sheets
    Sh.Visible = -1
Next Sh
End Sub

Sub ShListtoSheet()
Dim Sh As Worksheet
Dim i As Integer: i = 1
For Each Sh In ActiveWorkbook.Sheets
Cells(i, 10) = Sh.Name

i = i + 1
Next Sh

End Sub
Attribute VB_Name = "UserFormForDDTLA"
Attribute VB_Base = "0{77F418CD-8853-48E4-8D9C-7AD1A8E1C3B9}{9F10FE82-8B08-44D7-854D-F92D9C005BD7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub ComboBox3_Change()
Dim i As Integer
Dim j As Integer
Dim flag As Boolean
If ComboBox3.ListIndex <> -1 Then
    ComboBox4.Clear
    i = 3
    j = 0
    Do While ThisWorkbook.Sheets("Setup").Cells(i, 27) <> ""
    flag = True
        If ThisWorkbook.Sheets("Setup").Cells(i, 27) = ComboBox3.Value Then
            If j = 0 Then
                ComboBox4.AddItem CStr(ThisWorkbook.Sheets("Setup").Cells(i, 28))
            Else
                flag = True
                For j = 1 To (ComboBox4.LineCount - 1)
                    If ComboBox4.List(j) = CStr(ThisWorkbook.Sheets("Setup").Cells(i, 28)) Then flag = False
                Next j
                If flag Then ComboBox4.AddItem CStr(ThisWorkbook.Sheets("Setup").Cells(i, 28))
            End If
        End If
    i = i + 1
    Loop
    If ComboBox3.ListIndex <> -1 And ComboBox4.ListCount <> 0 Then
        For i = 0 To (ComboBox4.ListCount - 1)
            If CStr(ThisWorkbook.Sheets("Setup").Cells(2, 28)) = ComboBox4.List(i) Then ComboBox4.ListIndex = (i)
        Next i
    End If
End If
End Sub


Private Sub CommandButton12_Click()
CommandButton7_Click
CommandButton14_Click
ApdateKPI
BHA_Perf_Udate Label1.Caption, EndTimeFromBox(ComboBox2.Value)
CheckBox7.Value = True
CheckBox8.Value = True
End Sub
Private Sub CommandButton13_Click()
WPGFactImport
End Sub
Private Sub CommandButton14_Click()
    FullSlideSheet Label1.Caption
    CommandButton5_Click
End Sub
Private Sub CommandButton16_Click()
ThisWorkbook.Sheets("Setup").Cells(2, 27) = ComboBox3.Value
ThisWorkbook.Sheets("Setup").Cells(2, 28) = ComboBox4.Value
Dim i As Integer
i = 3
Do While ThisWorkbook.Sheets("Setup").Cells(i, 29) <> ""
    If CStr(ThisWorkbook.Sheets("Setup").Cells(i, 27)) = ComboBox3.Value Then
        If CStr(ThisWorkbook.Sheets("Setup").Cells(i, 28)) = ComboBox4.Value Then
            ThisWorkbook.Sheets("Setup").Cells(2, 29) = ThisWorkbook.Sheets("Setup").Cells(i, 29)
        End If
    End If
i = i + 1
Loop
End Sub
Private Sub CommandButton3_Click()
CheckBox1.Value = True
CheckBox2.Value = True
CheckBox3.Value = True
CheckBox4.Value = True
CheckBox5.Value = True
End Sub
Private Sub CommandButton4_Click()
CheckBox1.Value = False
CheckBox2.Value = False
CheckBox3.Value = False
CheckBox4.Value = False
CheckBox5.Value = False
End Sub
Private Sub CommandButton5_Click()
If CheckBox6.Value Then
    MsgBox "Data interval for TLA only, All SlideSheet Data will import to AKPI"
    'GetDataFromGenGenTimeWithTime WLBR_IDENTIFIER, CStr(Format(CStr(DTPicker1.Value + DTPicker2.Value - Date), "yyyy-mm-dd Hh:Nn:Ss")), CStr(Format(CStr(DTPicker3.Value + DTPicker4.Value - Date), "yyyy-mm-dd Hh:Nn:Ss"))
    ImportSurvey Label1.Caption
    SlideSheet Label1.Caption
Else
    ImportSurvey Label1.Caption
    SlideSheet Label1.Caption
End If
End Sub
Private Sub CommandButton6_Click()
ExportFromDDADVAll
End Sub
Private Sub CommandButton7_Click()
If CheckBox6.Value Then
    ToTLASheet3 Label1.Caption, CStr(Format(CStr(DTPicker1.Value + DTPicker2.Value - Date), "yyyy-mm-dd Hh:Nn:Ss")), CStr(Format(CStr(DTPicker3.Value + DTPicker4.Value - Date), "yyyy-mm-dd Hh:Nn:Ss"))
Else
    If CheckBox24.Value Then
    
    Else
        ImportECD StTimeFromBox(ComboBox2.Value), EndTimeFromBox(ComboBox2.Value)
    End If
    
    ToTLASheet2 Label1.Caption
End If
ReCorrectionCalc
FFCalcForChart
End Sub
Private Sub CommandButton15_Click()
If CheckBox24.Value Then
    ECDFileImport 'ECD files import
    DataFromECDRTToTLA
Else
    ImportECD StTimeFromBox(ComboBox2.Value), EndTimeFromBox(ComboBox2.Value)
End If
MsgBox "Done"
End Sub
Private Sub UserForm_Initialize()
Application.ScreenUpdating = False
Application.DisplayAlerts = False

If ThisWorkbook.Sheets("BHA Perf").Visible = -1 Then CheckBox7.Value = True
If ThisWorkbook.Sheets("RUN KPI").Visible = -1 Then CheckBox8.Value = True
If ThisWorkbook.Sheets("WPGPlan").Visible = -1 Then CheckBox9.Value = True
If ThisWorkbook.Sheets("WPGFact").Visible = -1 Then CheckBox10.Value = True
'If ThisWorkbook.Sheets("Slidesheet").Visible = -1 Then CheckBox11.Value = True
If ThisWorkbook.Sheets("TLA").Visible = -1 Then CheckBox12.Value = True
If ThisWorkbook.Sheets("Hookload Chart ").Visible = -1 Then CheckBox13.Value = True
If ThisWorkbook.Sheets("Torque Chart").Visible = -1 Then CheckBox15.Value = True
If ThisWorkbook.Sheets("ECD Chart").Visible = -1 Then CheckBox16.Value = True
If ThisWorkbook.Sheets("DDBHARep").Visible = -1 Then CheckBox17.Value = True
If ThisWorkbook.Sheets("Plots").Visible = -1 Then CheckBox18.Value = True
If ThisWorkbook.Sheets("Photos").Visible = -1 Then CheckBox19.Value = True
If ThisWorkbook.Sheets("VP-HP").Visible = -1 Then CheckBox20.Value = True
If ThisWorkbook.Sheets("FullSlideSheet").Visible = -1 Then CheckBox21.Value = True
If ThisWorkbook.Sheets("FullSlideSheetWithSurvey").Visible = -1 Then CheckBox22.Value = True
If ThisWorkbook.Sheets("UvatNGSlideSheet").Visible = -1 Then CheckBox23.Value = True
If ThisWorkbook.Sheets("Setup").Cells(2, 24) Then CheckBox24.Value = False
If ThisWorkbook.Sheets("ROP Chart").Visible = -1 Then CheckBox26.Value = True
If ThisWorkbook.Sheets("TF Chart").Visible = -1 Then CheckBox27.Value = True

Dim i As Integer
Dim j As Integer
Dim flag As Boolean
Dim Col As Collection
Dim ColDefoult As Collection
Dim ColRuns As Collection
Dim ShDDSetup As Worksheet: Set ShDDSetup = ThisWorkbook.Worksheets("DDSetup")
Set Col = New Collection
Set ColDefoult = New Collection
Set ColRuns = New Collection
Set Col = ColFromDatabase("SELECT WLBR_SHORT_NAME, WLBR_IDENTIFIER FROM WELLBORE")
Set ColDefoult = ColFromDatabase("SELECT WLBR_IDENTIFIER FROM USER_DEFAULTS")
For i = 1 To Col.Count
    ComboBox1.AddItem Separator(Col(i), "-", 0)
    If ColDefoult(1) = Separator(Col(i), "-", 1) Then ComboBox1.ListIndex = i - 1
    ComboBox1_2.AddItem Col(i)
Next i
Set ColRuns = ColFromDatabase("SELECT BHAR_PICKUP_TIME,BHAR_LAYDOWN_TIME, BHAR_IDENTIFIER, BHAR_START_MDEPTH, BHAR_END_MDEPTH, BHAR_OBJECTIVE, BHAR_OBSERVATIONS FROM BHA_RUN WHERE WLBR_IDENTIFIER = '" & ColDefoult(1) & "'")
For i = 1 To ColRuns.Count
    ComboBox2.AddItem "From " & Separator(ColRuns(i), "-", 0) & " to " & Separator(ColRuns(i), "-", 1)
    ComboBox2_1.AddItem Left(CStr(ColRuns(i)), 1500)
Next i
i = i - 1
ComboBox2.ListIndex = i - 1
CheckBox1 = ShDDSetup.Cells(15, 4)
CheckBox2 = ShDDSetup.Cells(16, 4)
CheckBox3 = ShDDSetup.Cells(17, 4)
CheckBox4 = ShDDSetup.Cells(18, 4)
CheckBox5 = ShDDSetup.Cells(19, 4)
Set Col = Nothing
Set ColDefoult = Nothing
Set ColRuns = Nothing

ComboBox3.AddItem CStr(ThisWorkbook.Sheets("Setup").Cells(3, 27))
i = 4
Do While ThisWorkbook.Sheets("Setup").Cells(i, 27) <> ""
    flag = True
    For j = 0 To ComboBox3.ListCount - 1
        If ComboBox3.List(j) = CStr(ThisWorkbook.Sheets("Setup").Cells(i, 27)) Then flag = False
    Next j
    If flag Then ComboBox3.AddItem CStr(ThisWorkbook.Sheets("Setup").Cells(i, 27))
    If ThisWorkbook.Sheets("Setup").Cells(2, 27) <> "" Then
        If CStr(ThisWorkbook.Sheets("Setup").Cells(2, 27)) = ComboBox3.List(ComboBox3.ListCount - 1) Then ComboBox3.ListIndex = (ComboBox3.ListCount - 1)
    End If
i = i + 1
Loop

If ThisWorkbook.Sheets("Setup").Cells(2, 29) = "" Then
    MsgBox "Please, select BCPM diametr and restrictor configuration."
    MultiPage1.Value = 4
End If

ComboBox3.Style = fmStyleDropDownList '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
ComboBox4.Style = fmStyleDropDownList '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

End Sub
Private Sub ComboBox1_Change()
If Label1.Visible Or ComboBox1.ListIndex = -1 Then
Label1.Visible = False
Exit Sub
End If
Dim i As Integer
Dim Col As Collection
Dim ColDefoult As Collection
Dim ColRuns As Collection
Set Col = New Collection
Set ColDefoult = New Collection
Set ColRuns = New Collection
Set ColRuns = ColFromDatabase("SELECT BHAR_PICKUP_TIME,BHAR_LAYDOWN_TIME, BHAR_IDENTIFIER, BHAR_START_MDEPTH, BHAR_END_MDEPTH, BHAR_OBJECTIVE, BHAR_OBSERVATIONS FROM BHA_RUN WHERE WLBR_IDENTIFIER = '" & Separator(ComboBox1_2.List(ComboBox1.ListIndex), "-", 1) & "'")
ComboBox2.ListIndex = -1
For i = 1 To ComboBox2.ListCount - 1
ComboBox2.RemoveItem (0)
ComboBox2_1.RemoveItem (0)
Next i
For i = 1 To ColRuns.Count
    ComboBox2.AddItem "From " & Separator(ColRuns(i), "-", 0) & " to " & Separator(ColRuns(i), "-", 1)
    If Len(ColRuns(i)) > 1000 Then
        ComboBox2_1.AddItem Left(ColRuns(i), 1000)
    Else
        ComboBox2_1.AddItem ColRuns(i)
    End If
Next i
i = i - 1
ComboBox2.ListIndex = i - 1
Set Col = Nothing
Set ColDefoult = Nothing
Set ColRuns = Nothing
End Sub
Private Sub ComboBox2_Change()
If ComboBox2.ListIndex = -1 Then Exit Sub
Dim i As Integer
Dim Run As String
i = ComboBox2.ListIndex
Run = ComboBox2_1.List(i)
Label1.Caption = Separator(Run, "-", 2)
Label2.Caption = "From " & Separator(Run, "-", 3) & " to " & Separator(Run, "-", 4) & " m"
Label3.Caption = Separator(Run, "-", 5)
Label4.Caption = Separator(Run, "-", 6)
Label5.Caption = Separator(Run, "-", 2)
End Sub
Private Sub CommandButton1_Click()
Application.ScreenUpdating = False
Application.DisplayAlerts = False
DDBHAComponentImport Label1.Caption
DDBHARusMain
ThisWorkbook.Sheets("Tabls").Select
CheckBox17.Value = True
CommandButton2_Click
End Sub
Private Sub CommandButton2_Click()
ThisWorkbook.Sheets("Tabls").Visible = CInt(-1)
Dim Sh As Worksheet
Dim trsls As String
For Each Sh In ThisWorkbook.Sheets
    If Sh.Name <> "Tabls" Then Sh.Visible = CInt(0)
Next Sh

If CheckBox7.Value Then ThisWorkbook.Sheets("BHA Perf").Visible = CInt(-1)
If CheckBox8.Value Then ThisWorkbook.Sheets("RUN KPI").Visible = CInt(-1)
If CheckBox9.Value Then ThisWorkbook.Sheets("WPGPlan").Visible = CInt(-1)
If CheckBox10.Value Then ThisWorkbook.Sheets("WPGFact").Visible = CInt(-1)
'If CheckBox11.Value Then ThisWorkbook.Sheets("Slidesheet").Visible = CInt(-1)
If CheckBox12.Value Then ThisWorkbook.Sheets("TLA").Visible = CInt(-1)
If CheckBox13.Value Then ThisWorkbook.Sheets("Hookload Chart ").Visible = CInt(-1)
If CheckBox15.Value Then ThisWorkbook.Sheets("Torque Chart").Visible = CInt(-1)
If CheckBox16.Value Then ThisWorkbook.Sheets("ECD Chart").Visible = CInt(-1)
If CheckBox17.Value Then ThisWorkbook.Sheets("DDBHARep").Visible = CInt(-1)
If CheckBox18.Value Then ThisWorkbook.Sheets("Plots").Visible = CInt(-1)
If CheckBox19.Value Then ThisWorkbook.Sheets("Photos").Visible = CInt(-1)
If CheckBox20.Value Then ThisWorkbook.Sheets("VP-HP").Visible = CInt(-1)
If CheckBox21.Value Then ThisWorkbook.Sheets("FullSlideSheet").Visible = CInt(-1)
If CheckBox22.Value Then ThisWorkbook.Sheets("FullSlideSheetWithSurvey").Visible = CInt(-1)
If CheckBox23.Value Then ThisWorkbook.Sheets("UvatNGSlideSheet").Visible = CInt(-1)
If CheckBox26.Value Then ThisWorkbook.Sheets("ROP Chart").Visible = CInt(-1)
If CheckBox27.Value Then ThisWorkbook.Sheets("TF Chart").Visible = CInt(-1)
If CheckBox25.Value Then
   trsls = InputBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| TFO")
    If trsls = "engineer" Then
    ThisWorkbook.Sheets("TFO").Visible = CInt(-1)
    Else
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
    ThisWorkbook.Sheets("TFO").Visible = CInt(2)
    End If
Else
ThisWorkbook.Sheets("TFO").Visible = CInt(2)
End If

If Not CheckBox7.Value Then ThisWorkbook.Sheets("BHA Perf").Visible = CInt(0)
If Not CheckBox8.Value Then ThisWorkbook.Sheets("RUN KPI").Visible = CInt(0)
If Not CheckBox9.Value Then ThisWorkbook.Sheets("WPGPlan").Visible = CInt(0)
If Not CheckBox10.Value Then ThisWorkbook.Sheets("WPGFact").Visible = CInt(0)
'If Not CheckBox11.Value Then ThisWorkbook.Sheets("Slidesheet").Visible = CInt(0)
If Not CheckBox12.Value Then ThisWorkbook.Sheets("TLA").Visible = CInt(0)
If Not CheckBox13.Value Then ThisWorkbook.Sheets("Hookload Chart ").Visible = CInt(0)
If Not CheckBox15.Value Then ThisWorkbook.Sheets("Torque Chart").Visible = CInt(0)
If Not CheckBox16.Value Then ThisWorkbook.Sheets("ECD Chart").Visible = CInt(0)
If Not CheckBox17.Value Then ThisWorkbook.Sheets("DDBHARep").Visible = CInt(0)
If Not CheckBox18.Value Then ThisWorkbook.Sheets("Plots").Visible = CInt(0)
If Not CheckBox19.Value Then ThisWorkbook.Sheets("Photos").Visible = CInt(0)
If Not CheckBox20.Value Then ThisWorkbook.Sheets("VP-HP").Visible = CInt(0)
If Not CheckBox21.Value Then ThisWorkbook.Sheets("FullSlideSheet").Visible = CInt(0)
If Not CheckBox22.Value Then ThisWorkbook.Sheets("FullSlideSheetWithSurvey").Visible = CInt(0)
If Not CheckBox23.Value Then ThisWorkbook.Sheets("UvatNGSlideSheet").Visible = CInt(0)


If CheckBox24.Value Then ThisWorkbook.Sheets("Setup").Cells(2, 24) = True

Application.ScreenUpdating = True
Application.DisplayAlerts = True
Unload Me
End Sub
Private Sub CheckBox1_Click()
Dim ShDDSetup As Worksheet: Set ShDDSetup = ThisWorkbook.Worksheets("DDSetup")
ShDDSetup.Cells(15, 4) = CheckBox1
End Sub
Private Sub CheckBox2_Click()
Dim ShDDSetup As Worksheet: Set ShDDSetup = ThisWorkbook.Worksheets("DDSetup")
ShDDSetup.Cells(16, 4) = CheckBox2
End Sub
Private Sub CheckBox3_Click()
Dim ShDDSetup As Worksheet: Set ShDDSetup = ThisWorkbook.Worksheets("DDSetup")
ShDDSetup.Cells(17, 4) = CheckBox3
End Sub
Private Sub CheckBox4_Click()
Dim ShDDSetup As Worksheet: Set ShDDSetup = ThisWorkbook.Worksheets("DDSetup")
ShDDSetup.Cells(18, 4) = CheckBox4
End Sub
Private Sub CheckBox5_Click()
Dim ShDDSetup As Worksheet: Set ShDDSetup = ThisWorkbook.Worksheets("DDSetup")
ShDDSetup.Cells(19, 4) = CheckBox5
End Sub
Private Sub CB8_Click()
If CheckBox24.Value Then
    MsgBox "We can not impotr data from CADence"
Else
    ImportDepthTime StTimeFromBox(ComboBox2.Value), EndTimeFromBox(ComboBox2.Value)
End If
End Sub
Private Sub CheckBox6_Change()
If CheckBox6 Then
    Frame1.Visible = True
    DTPicker1.Value = Format(Date, "dd/mm/yyyy")
    DTPicker2.Value = Format(Date, "dd/MM/yyyy")
    DTPicker3.Value = Format(Date, "dd/MM/yyyy")
    DTPicker4.Value = Format(Date, "dd/MM/yyyy")
Else
    Frame1.Visible = False

End If
End Sub
Private Sub CommandButton8_Click()
CheckBox7.Value = True
CheckBox8.Value = True
CheckBox9.Value = True
CheckBox10.Value = True
'CheckBox11.Value = True
CheckBox21.Value = True
CheckBox22.Value = True
End Sub
Private Sub CommandButton9_Click()
CheckBox7.Value = False
CheckBox8.Value = False
CheckBox9.Value = False
CheckBox10.Value = False
'CheckBox11.Value = False
CheckBox21.Value = False
CheckBox22.Value = False
End Sub
Private Sub CommandButton10_Click()
CheckBox12.Value = False
CheckBox13.Value = False
CheckBox15.Value = False
CheckBox16.Value = False
CheckBox26.Value = False
CheckBox27.Value = False
End Sub
Private Sub CommandButton11_Click()
CheckBox12.Value = True
CheckBox13.Value = True
CheckBox15.Value = True
CheckBox16.Value = True
CheckBox26.Value = True
CheckBox27.Value = True
End Sub
Attribute VB_Name = "WVG"
'FUNCTION TO DETERMINE WINDOWS VERSION NUMBER
'Windows 7 should be 6.1 (Windows Vista = 6.0, Windows 7 = 6.1 and Windows 8 = 6.2),  5.1, the internal version number of Windows XP
 Option Explicit
Private Type OSVERSIONINFO
   dwOSVersionInfoSize As Long
   dwMajorVersion As Long
   dwMinorVersion As Long
   dwBuildNumber As Long
   dwPlatformId As Long
   szCSDVersion As String * 128
 End Type

Public Declare Function GetVersionExA Lib "kernel32" (lpVersionInformation As OSVERSIONINFO) As Integer

Public Function getVersion() As String
  Dim osinfo As OSVERSIONINFO
   Dim retvalue As Integer
  osinfo.dwOSVersionInfoSize = 148
   osinfo.szCSDVersion = Space$(128)
   retvalue = GetVersionExA(osinfo)
  getVersion = "Version is " & osinfo.dwMajorVersion & "." & osinfo.dwMinorVersion
End Function

Attribute VB_Name = "tst"

Sub test()
Dim i As Integer
For i = 24 To 224
Cells(69, i) = "'" & Cells(68, i).FormulaR1C1
Next

End Sub
Attribute VB_Name = "????1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "????2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "????3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' Z+aN)
' Z+aN)
' y(^z

INQUEST-PP=macro
