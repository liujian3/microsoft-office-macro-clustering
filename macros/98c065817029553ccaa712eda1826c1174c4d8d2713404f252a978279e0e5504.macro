Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Funktionen"
'Prints out formula as text
'taken and modified from Simon Benninga: Financial Modeling ,  3rd ed.
'Oxford University Press, 2008
Function getformula(cell As Range) As String
Attribute getformula.VB_Description = "Visualisiert die Excel-Syntax der betreffenden Zelle"
Attribute getformula.VB_ProcData.VB_Invoke_Func = " \n14"
   Application.Volatile
   If cell.HasArray Then
   getformula = "<-- " & " {" & cell.FormulaLocal & "}"
   Else
   getformula = "<-- " & " " & cell.FormulaLocal
   End If
End Function

Function geo_return(asset As Range) As Double
Attribute geo_return.VB_Description = "Berechnet das geometrische Mittel eines Vektors von diskreten Renditen"
Attribute geo_return.VB_ProcData.VB_Invoke_Func = " \n14"
'calculates the geometric mean of asset returns
'note that returns must be in decimal notation
' by Prof. Dr. Thomas Zimmerer

n = WorksheetFunction.Count(asset)
ReDim mod_asset(1 To n)

For i = 1 To n
    mod_asset(i) = 1 + asset(i)
Next i
    
    geo_return = WorksheetFunction.GeoMean(mod_asset) - 1
    
End Function
'Transformation formulas
' transform continuous expected returns and volatilities
' into their correspondent discret parameters and vice versa
' by Prof. Dr. Thomas Zimmerer
Function log_mean(mean As Double, vola As Double) As Double
Attribute log_mean.VB_Description = "Transformiert den Erwartungswert der diskreten Renditen in den Erwartungswert der stetigen Renditen"
Attribute log_mean.VB_ProcData.VB_Invoke_Func = " \n14"
   log_mean = Log(mean + 1) - 0.5 * Log(1 + (vola / (mean + 1)) ^ 2)
End Function

Function log_vola(mean As Double, vola As Double) As Double
    log_vola = (Log(1 + (vola / (mean + 1)) ^ 2)) ^ 0.5
End Function

Function dis_mean(mean As Double, vola As Double) As Double
    dis_mean = Exp(mean + vola ^ 2 / 2) - 1
End Function

Function dis_vola(mean As Double, vola As Double) As Double
    dis_vola = (Exp(2 * mean + vola ^ 2) * (Exp(vola ^ 2) - 1)) ^ 0.5
End Function
Function JB_p_value(Data As Range, Significance As Double) As Double
Attribute JB_p_value.VB_Description = "Empirisches Signifikanzniveau des JB-Tests auf Normalverteilung"
Attribute JB_p_value.VB_ProcData.VB_Invoke_Func = " \n14"
' calculates the p value of the Jarque Bera Test statistic
' Null hypothesis: "Normal Distribution"
' Null is rejected (not rejected) if p value is smaller (greater) than level of significance
' by Prof. Dr. Thomas Zimmerer

Number = WorksheetFunction.Count(Data)
Skew = WorksheetFunction.Skew(Data)
Kurtosis = WorksheetFunction.Kurt(Data) + 3

TS = Number / 6 * (Skew ^ 2 + 1 / 4 * (Kurtosis - 3) ^ 2)
p_value = Application.WorksheetFunction.ChiDist(TS, 2)
JB_p_value = p_value

End Function


Function JB_Test(Data As Range, Significance As Double)
Attribute JB_Test.VB_Description = "Testaussage des JB-Tests auf Normalverteilung"
Attribute JB_Test.VB_ProcData.VB_Invoke_Func = " \n14"
' prompts result of Jarque Bera Test
' Null hypothesis: "Normal Distribution"
' Null is rejected (not rejected) if p value is smaller (greater) than level of significance
' by Prof. Dr. Thomas Zimmerer

Number = WorksheetFunction.Count(Data)
Skew = WorksheetFunction.Skew(Data)
Kurtosis = WorksheetFunction.Kurt(Data) + 3

TS = Number / 6 * (Skew ^ 2 + 1 / 4 * (Kurtosis - 3) ^ 2)
p_value = Application.WorksheetFunction.ChiDist(TS, 2)

If p_value > Significance Then
   JB_Test = "ja"
   Else
   JB_Test = "nein"
End If

End Function
Function Semi_Variance(Data As Range)
Attribute Semi_Variance.VB_Description = "Semivarianz eines Renditevektors"
Attribute Semi_Variance.VB_ProcData.VB_Invoke_Func = " \n14"
' calculates semi variance on any data
' by Prof. Dr. Thomas Zimmerer

  Number = WorksheetFunction.Count(Data)
  mean = WorksheetFunction.Average(Data)
  Sumsv = 0
    For i = 1 To Number
    If Data(i) < mean Then
        Sumsv = Sumsv + ((Data(i) - mean) ^ 2)
    End If
    Next
  
  Semi_Variance = Sumsv / Number

End Function
Function Semi_Vola(Data As Range)
Attribute Semi_Vola.VB_Description = "Semivolatilit|fffd|t eines Renditevektors"
Attribute Semi_Vola.VB_ProcData.VB_Invoke_Func = " \n14"
' calculates semi variance on any data
' by Prof. Dr. Thomas Zimmerer

  Number = WorksheetFunction.Count(Data)
  mean = WorksheetFunction.Average(Data)
  Sumsv = 0
    For i = 1 To Number
    If Data(i) < mean Then
        Sumsv = Sumsv + ((Data(i) - mean) ^ 2)
    End If
    Next
  
  Semi_Vola = (Sumsv / Number) ^ 0.5

End Function

Function LPM(Data, target, Order)
Attribute LPM.VB_Description = "Lower Partial Moment beliebiger Ordnung relativ zu einer vordefinierten Zielrendite"
Attribute LPM.VB_ProcData.VB_Invoke_Func = " \n14"
' calculates lower partial moments on any data with
' predefined target and order of the LPM
' by Prof. Dr. Thomas Zimmerer

  Number = WorksheetFunction.Count(Data)
  Sumlpm = 0
    For i = 1 To Number
    If Data(i) < target Then
        Sumlpm = Sumlpm + ((target - Data(i)) ^ Order)
    End If
    Next
  
  LPM = Sumlpm / Number

End Function

Function UPM(Data, target, Order)
' calculates upper partial moments on any data with
' predefined target and order of the LPM
' by Prof. Dr. Thomas Zimmerer

  zahl = WorksheetFunction.Count(Data)
  Sumlpm = 0
    For i = 1 To zahl
    If Data(i) > target Then
        Sumlpm = Sumlpm + ((Data(i) - target) ^ Order)
    End If
    Next
  
  UPM = Sumlpm / zahl
  

End Function

Function participation(ref_asset, asset)
' calculates the participation ratio of asset vs. reference asset
' conditional measure as arithmetic mean single period participation ratios
' periods where there was no participation are excluded
' by Prof. Dr. Thomas Zimmerer

n = WorksheetFunction.Count(asset)
ReDim mod_r(1 To n)

For i = 1 To n
        'exclude return constellations which do not make sense
        If ref_asset(i) < asset(i) _
        Or ref_asset(i) * asset(i) < 0 _
        Or ref_asset(i) < 0 And asset(i) < 0 Then
            mod_r(i) = 0
        Else
            mod_r(i) = WorksheetFunction.Max(asset(i) / ref_asset(i), 0)
            
        End If
Next i
    

participation = UPM(mod_r, 0, 1) / UPM(mod_r, 0, 0)

End Function

Function MEL(Data, target)
Attribute MEL.VB_Description = "Mean Excess Loss: mittlere Unterschreitungsh|fffd|he der Zielrendite, LPM1/LPM0"
Attribute MEL.VB_ProcData.VB_Invoke_Func = " \n14"
' calculates mean excess loss of any return data with predefined target
' by Prof. Dr. Thomas Zimmerer

If LPM(Data, target, 0) = 0 Then
MEL = 0
Else
MEL = LPM(Data, target, 1) / LPM(Data, target, 0)
End If

End Function
Function con_SR(Data, target)
' calculates conditional shortfall return of any return data with predefined target
' by Prof. Dr. Thomas Zimmerer

If LPM(Data, target, 0) = 0 Then
con_SR = target
Else
con_SR = target - MEL(Data, target)
End If

End Function
Function MER(Data, target)
' calculates mean excess return of any return data with predefined target
' by Prof. Dr. Thomas Zimmerer

MER = UPM(Data, target, 1) / UPM(Data, target, 0)

End Function
Function con_ER(Data, target)
' calculates conditional excess return of any return data with predefined target
' by Prof. Dr. Thomas Zimmerer

con_ER = target + MER(Data, target)

End Function

Function con_VaR(Data, Confidence)
' calculates conditional value at risk of any return data with
' predefined confidence level
' by Prof. Dr. Thomas Zimmerer

orig_VaR = WorksheetFunction.Percentile(Data, 1 - Confidence)
If LPM(Data, orig_VaR, 0) = 0 Then
con_VaR = target
Else
con_VaR = orig_VaR - LPM(Data, orig_VaR, 1) / LPM(Data, orig_VaR, 0)
End If

End Function

Function MAX_DD(bReturnVector)
' Calculates Maximum Drawdown from a vector of simple returns
'
' Input: a vector of fund simple returns
' Output: a maximum drawdown figure
' Comment: it doesn't matter whether the simple returns are arranged in cols or rows
'
' originally by Andreas Steiner, March 2006
' http://www.andreassteiner.net/performanceanalysis
' modified by Prof. Dr. Thomas Zimmerer

n = WorksheetFunction.Max(bReturnVector.Columns.Count, bReturnVector.Rows.Count)

ReDim bDrawdownVector(1 To n)
ReDim bCumReturn(1 To n)

bCumReturn(1) = Log(1 + bReturnVector.Cells(1).Value)
bMax = bCumReturn(1)
bDrawdownVector(1) = bMax - bCumReturn(1)
        
    For i = 2 To n
        bCumReturn(i) = bCumReturn(i - 1) + Log(1 + bReturnVector.Cells(i).Value)
        bMax = WorksheetFunction.Max(bCumReturn(i), bMax)
        bDrawdownVector(i) = bMax - bCumReturn(i)
    Next i
    
    MAX_DD = WorksheetFunction.Max(bDrawdownVector)
    MAX_DD = Exp(-MAX_DD) - 1
End Function

Function sortino(Data, target)
'calculates sortino ratio for any return data relative to predefined target return
' by Prof. Dr. Thomas Zimmerer

If LPM(Data, target, 2) = 0 Then
sortino = 0
Else
sortino = (WorksheetFunction.Average(Data) - target) / ((LPM(Data, target, 2)) ^ 0.5)
End If

End Function

Function pearson_up(ref_asset, asset)
'calculates the pearson-up correlation coefficient
'takes only correlations into account, when ref_asset has positive returns
' by Prof. Dr. Thomas Zimmerer

n = WorksheetFunction.Count(ref_asset)
ReDim mod_ref_asset(1 To n)
ReDim mod_asset(1 To n)

For i = 1 To n
        If ref_asset(i) > 0 Then
            mod_ref_asset(i) = ref_asset(i)
            mod_asset(i) = asset(i)
       End If
Next i
    
    pearson_up = WorksheetFunction.Correl(mod_ref_asset, mod_asset)
    
End Function

Function pearson_down(ref_asset, asset)
'calculates the pearson-down correlation coefficient
'takes only correlations into account, when ref_asset has negative returns
' by Prof. Dr. Thomas Zimmerer

n = WorksheetFunction.Count(ref_asset)
ReDim mod_ref_asset(1 To n)
ReDim mod_asset(1 To n)

For i = 1 To n
        If ref_asset(i) < 0 Then
            mod_ref_asset(i) = ref_asset(i)
            mod_asset(i) = asset(i)
       End If
Next i
    
    pearson_down = WorksheetFunction.Correl(mod_ref_asset, mod_asset)
    
End Function

Function omega(Data, target)
' calculates the gain-loss-ratio for any return data relative to some target return
' by Prof. Dr. Thomas Zimmerer

If LPM(Data, target, 1) = 0 Then
omega = 1
Else
omega = UPM(Data, target, 1) / LPM(Data, target, 1)
End If

End Function
Function fung_hsieh(ref_asset, asset, class)
' calculates return quartiles relative to a reference asset
' to be specified: reference asset against which current asset has to be analysed
' class designes return quartile of reference asset
' by Prof. Dr. Thomas Zimmerer

n = WorksheetFunction.Count(asset)
counter = 0

sum_asset = 0

If class = 1 Then
border_down = WorksheetFunction.Min(ref_asset)
border_up = WorksheetFunction.Percentile(ref_asset, 0.2)
ElseIf class = 2 Then
border_down = WorksheetFunction.Percentile(ref_asset, 0.2)
border_up = WorksheetFunction.Percentile(ref_asset, 0.4)
ElseIf class = 3 Then
border_down = WorksheetFunction.Percentile(ref_asset, 0.4)
border_up = WorksheetFunction.Percentile(ref_asset, 0.6)
ElseIf class = 4 Then
border_down = WorksheetFunction.Percentile(ref_asset, 0.6)
border_up = WorksheetFunction.Percentile(ref_asset, 0.8)
ElseIf class = 5 Then
border_down = WorksheetFunction.Percentile(ref_asset, 0.8)
border_up = WorksheetFunction.Percentile(ref_asset, 1)
End If

For i = 1 To n
    If ref_asset(i) >= border_down And ref_asset(i) <= border_up Then
        sum_asset = sum_asset + asset(i)
        counter = counter + 1
    End If
Next i

fung_hsieh = sum_asset / counter

End Function


Function CF_VaR(Data As Range, Confidence As Double) As Double
' calculates Cornish Fisher VaR for predefined confidence probability
' to be specified: return vector and confidence level
' by Prof. Dr. Thomas Zimmerer
   
    mean = Application.WorksheetFunction.Average(Data)
    std = Application.WorksheetFunction.StDev(Data)
    Skew = Application.WorksheetFunction.Skew(Data)
    xsKurt = Application.WorksheetFunction.Kurt(Data) + 3
    
    Z = Application.WorksheetFunction.NormSInv(Confidence)
    
    a = (1 / 6) * (Z ^ 2 - 1) * Skew
    b = (1 / 24) * ((Z ^ 3) - (3 * Z)) * xsKurt
    c = (1 / 36) * ((2 * Z ^ 3) - (5 * Z)) * (Skew ^ 2)
    
    CF_VaR = mean - ((Z + a + b - c) * std)
    
    
    
End Function



Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
