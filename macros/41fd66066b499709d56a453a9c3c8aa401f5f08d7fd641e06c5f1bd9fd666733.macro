Attribute VB_Name = "AddCombatant"
Attribute VB_Base = "0{D36C35BD-36B7-4C36-8D60-788F8BA67612}{B625A74E-9828-4FFD-8F53-13EBC5BDA3BE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub CMDAdd_Click()
    Dim i, j, k, m, n As Long
    
    Dim msg As String
    Dim Quant As Long
    Dim Block(1 To 1, 1 To 10) As Variant
    Dim AllBlocks() As Variant
    
    Dim RowAdd As Long
    Dim AllCurr() As Variant
    
    Dim Check129 As String
    Dim Encounter() As Variant
    
    'check max monsters
    Encounter() = Sheets("Readied Encounter").Range("C17:C150").Value
    
    j = 0
    For i = 1 To UBound(Encounter(), 1)
        If Not Encounter(i, 1) = "" Then
            j = j + 1
        End If
    Next
    
    If j >= 129 Then
        Check129 = MsgBox("The encounter creature cap is 129. Please reduce the number of enemy combatants before continuing. I apologize for any inconvenience.", vbOKOnly, "Error")
        End
    End If
    'end max check
    
    If CMBBlocks.Value = "" Then
        msg = MsgBox("Please select a creature to add", vbOKOnly, "Error")
        Exit Sub
    End If
    
    If IsNumeric(TXTQuantity.Value) = False Then
        msg = MsgBox("Please enter a positive integer for quantity", vbOKOnly, "Error")
        Exit Sub
    ElseIf TXTQuantity.Value > 25 Then
        msg = MsgBox("are you sure you would like to add " & TXTQuantity.Value & " " & CMBBlocks.Value & " To the combat?", vbOKCancel, "Are you sure?")
        If msg = 2 Then Exit Sub
    End If
    
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    
    Quant = TXTQuantity.Value
    
    Block(1, 1) = CMBBlocks.Value
    AllBlocks() = Sheets("Enemy Library").Range("Creatures").Value
    
    i = 0
    Do
        i = i + 1
    Loop Until i = UBound(AllBlocks(), 1) Or Block(1, 1) = AllBlocks(i, 1)
    
    If i = UBound(AllBlocks(), 1) And Not Block(1, 1) = AllBlocks(i, 1) Then
        msg = MsgBox("Please select a creature from the list to add", vbOKOnly, "Error")
        CMBBlocks.Value = ""
        Exit Sub
    End If
    k = i
    
    Block(1, 5) = ""
    Block(1, 6) = AllBlocks(i, 2)
    Block(1, 7) = AllBlocks(i, 3)
    Block(1, 8) = AllBlocks(i, 5)
    Block(1, 9) = "=" & AllBlocks(i, 6) & "*L1"
    Block(1, 10) = AllBlocks(i, 7)
    
    AllCurr() = Sheets("Readied Encounter").Range("A17:A10000").Value
    
    i = 1
    Do Until i = UBound(AllCurr(), 1) Or AllCurr(i, 1) = ""
        i = i + 1
    Loop
    i = i + 3
    
    n = 0
    For m = 1 To i - 3
        If Block(1, 1) = AllCurr(m, 1) Then
            n = n + 1
        End If
    Next
    
    For j = 1 To Quant
        Block(1, 2) = j + n
        Block(1, 3) = RandomHP(AllBlocks(k, 4))
        Block(1, 4) = "=" & Block(1, 3)
        Sheets("Readied Encounter").Range("A" & i + j + 12 & ":J" & i + j + 12).Value = Block()
        'Color Scale
        Call HealthScale(Sheets("Readied Encounter").Range("D" & i + j + 12), "$C$" & i + j + 12)
    Next
    
    With Sheets("Readied Encounter").Range("A" & i + j - 1 + 12 & ":J" & i + j - 1 + 12).Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Color = -13683110
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    
    Application.EnableEvents = True
    Application.Calculate
    
    Sheets("Readied Encounter").Columns("B:J").EntireColumn.AutoFit
    Sheets("Readied Encounter").Columns("E").EntireColumn.ColumnWidth = 17.57
    
    Application.ScreenUpdating = True
    End
End Sub

Private Sub TXTQuantity_Change()
    Dim msg As String
    
    If TXTQuantity.Value = "" Then
        Exit Sub
    ElseIf TXTQuantity.Value < 1 Or IsNumeric(TXTQuantity.Value) = False Then
        msg = MsgBox("Please enter a positive integer for quantity", vbOKOnly, "Error")
        TXTQuantity.Value = ""
        Exit Sub
    ElseIf TXTQuantity.Value - Int(TXTQuantity.Value) > 0 Then
        msg = MsgBox("Please enter whole number", vbOKOnly, "Error")
        TXTQuantity.Value = ""
        Exit Sub
    End If
        
End Sub

Private Sub UserForm_Initialize()
    Dim i, j, k As Long
    'Used
    'i
    'Reusable
    'i
    Dim Blocks() As Variant
    Dim dum As Double
    
    Blocks() = Worksheets("Enemy Library").Range("Creatures[Block]").Value
    
    For i = 1 To UBound(Blocks(), 1)
        CMBBlocks.AddItem (Blocks(i, 1))
    Next
End Sub
Attribute VB_Name = "AddNewCreature"
Attribute VB_Base = "0{27F52133-1F34-417A-9A11-B8D1BB3F7677}{FC61ABC5-363C-40BA-A004-EED4BA4418E4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private Sub CMD_AddCreature_Click()
    Dim Arra() As Variant
    Dim Existing() As Variant
    
    Dim i As Integer
    
    Dim dum As String
    
    Arra() = GetValsx()
    
    Existing() = Sheets("Enemy Library").Range("Creatures[Block]").Value
    For i = 1 To UBound(Existing(), 1)
        If Arra(1, 1) = Existing(i, 1) Then
            dum = MsgBox("This creature is already catalogued. Would you like to continue?", vbOKCancel, "This creature appears to exist already")
            If dum = vbCancel Then
                Exit Sub
            Else
                dum = ""
                Exit For
            End If
        End If
    Next
    
    For i = 1 To 9
        If Arra(1, i) = "" Then
            dum = MsgBox("One or more required feilds is empty.", , "Error")
            Exit Sub
        End If
    Next
    
    Range("Creatures[[#Headers],[Block]]").Offset(2, 0).Select
    Selection.End(xlDown).Select
    Selection.ListObject.ListRows.Add AlwaysInsert:=True
    
    Range(ActiveCell.Offset(1, 0).Address & ":" & ActiveCell.Offset(1, 8).Address).Value = Arra()
    
    Call ClearVals
    Call SetCMBs
End Sub
Private Sub ClearVals()
    TXT_CreatureName.Value = ""
    CMB_Size.Value = ""
    TXT_AC.Value = ""
    CMB_Health.Value = ""
    TXT_CR.Value = ""
    CMB_Source.Value = ""
    TXT_DexterityScore.Value = ""
    TXT_InitiativeModifier.Value = ""
End Sub
Private Function GetValsx()
    Dim Arra(1 To 1, 1 To 9) As Variant
    
    Dim i As Integer
    Dim dum As String
    
    Arra(1, 1) = TXT_CreatureName.Value
    Arra(1, 2) = CMB_Size.Value
    Arra(1, 3) = TXT_AC.Value
    Arra(1, 4) = CMB_Health.Value
    
    If Replace(TXT_CR.Value, "/", "") = TXT_CR.Value Then
        Arra(1, 5) = TXT_CR.Value
    Else
        Arra(1, 5) = "'" & TXT_CR.Value
    End If
    
    Arra(1, 6) = "=IF([@CR]=" & """" & """" & "," & """" & """" & ",VLOOKUP([@CR],CREXP[#All],2,FALSE))"
    Arra(1, 7) = CMB_Source.Value
    Arra(1, 8) = TXT_DexterityScore.Value
    If TXT_InitiativeModifier.Value = "" Or IsNumeric(TXT_InitiativeModifier) = False Then
        Arra(1, 9) = "=IFERROR(DexModifier([@[Dex Score]]),NA())"
    Else
        Arra(1, 9) = TXT_InitiativeModifier.Value
    End If
    
    GetValsx = Arra()
End Function

Private Sub Label11_Click()

End Sub

Private Sub Label2_Click()

End Sub

Private Sub TXT_AC_Change()
    Dim dum As String
    
    If TXT_AC = "" Or IsNumeric(TXT_AC.Value) = True Then
        
    Else
        dum = MsgBox("Please enter a positive numeric value.", , "Error")
        TXT_AC.Value = ""
    End If
End Sub

Private Sub TXT_CR_Change()
    Dim dum As String
    
    If TXT_CR = "" Or IsNumeric(TXT_CR.Value) = True Or Right(TXT_CR.Value, 1) = "/" Or TXT_CR = "1/8" Or TXT_CR = "1/4" Or TXT_CR = "1/2" Then
        
    Else
        dum = MsgBox("Please enter a valid CR between 0 and 30.", , "Error")
        TXT_CR.Value = ""
    End If
End Sub

Private Sub TXT_DexterityScore_Change()
    Dim dum As Variant
    
    If TXT_DexterityScore.Value = "" Then
        
        TXT_InitiativeModifier.Value = ""
        
    ElseIf IsNumeric(TXT_DexterityScore.Value) = True Then
        dum = TXT_DexterityScore.Value
        
        If dum < 10 Then dum = dum - 1
        
        dum = Application.WorksheetFunction.RoundDown((dum - 10) / 2, 0)
        
        TXT_InitiativeModifier.Value = dum
    Else
        dum = MsgBox("Please enter a positive numeric value.", , "Error")
        TXT_DexterityScore.Value = ""
    End If
End Sub

Private Sub TXT_InitiativeModifier_Change()
    Dim dum As String
    
    If TXT_InitiativeModifier.Value = "" Or IsNumeric(TXT_InitiativeModifier.Value) = True Or TXT_InitiativeModifier.Value = "-" Then
    
    ElseIf IsNumeric(TXT_InitiativeModifier.Value) = False Then
        If Left(TXT_InitiativeModifier.Value, 1) = "-" And IsNumeric(Right(TXT_InitiativeModifier.Value, Len(TXT_InitiativeModifier.Value) - 1)) = True Then
            
        Else
            dum = MsgBox("Please enter a numeric value.", , "Error")
            TXT_InitiativeModifier.Value = ""
        End If
    Else
        dum = MsgBox("Please enter a numeric value.", , "Error")
        TXT_InitiativeModifier.Value = ""
    End If
End Sub
Private Sub UserForm_Initialize()
    Call SetCMBs
End Sub
Private Sub SetCMBs()
    Dim SRCO(), SRCN(), SZO(), SZN(), HPO(), HPN() As Variant
    
    CMB_Size.Clear
    CMB_Source.Clear
    CMB_Health.Clear
    
    SRCO() = Sheets("Enemy Library").Range("Creatures[Source]").Value
    SZO() = Sheets("Enemy Library").Range("Creatures[Size]").Value
    HPO() = Sheets("Enemy Library").Range("Creatures[HP]").Value
    
    SRCN() = RemoveDupes(SRCO())
    SZN() = RemoveDupes(SZO())
    HPN() = RemoveDupes(HPO())
    
    Call BubbleSort(SRCN())
    Call BubbleSort(SZN())
    Call BubbleSort(HPN())
    
    CMB_Size.list = SZN()
    CMB_Source.list = SRCN()
    CMB_Health.list = HPN()
End Sub

Private Function RemoveDupes(InputArray()) As Variant
    Dim Array_2() As Variant
    
    Dim dum As Variant
    Dim InArr As Boolean
    
    Dim i, j, x As Integer
    
    i = 0
    j = 0
    x = 1
    
    ReDim Preserve Array_2(1 To 1)
    Array_2(1) = InputArray(1, 1)
    
    On Error Resume Next
    For i = 1 To UBound(InputArray(), 1)
        InArr = False
        For j = 1 To x
            If Array_2(j) = InputArray(i, 1) Then
                InArr = True
                Exit For
            End If
        Next
        
        If InArr = False Then
            x = x + 1
            ReDim Preserve Array_2(1 To x)
            
            Array_2(x) = InputArray(i, 1)
        End If
    Next
    
    RemoveDupes = Array_2
End Function
Private Sub BubbleSort(list() As Variant)
'   Sorts an array using bubble sort algorithm
    Dim First As Integer, Last As Long
    Dim i As Long, j As Long
    Dim Temp As Variant
    
    First = LBound(list())
    Last = UBound(list())
    
    For i = First To Last - 1
        For j = i + 1 To Last
            If list(i) > list(j) Then
                Temp = list(j)
                list(j) = list(i)
                list(i) = Temp
            End If
        Next j
    Next i
End Sub
Attribute VB_Name = "AwardEXPForm"
Attribute VB_Base = "0{FE0B39C4-8354-4D4C-AD8D-D7BF6E2A404A}{DBD7F5C6-5548-495F-AEBD-B094A77651A3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CMDAward_Click()
    Dim i, j As Long
    
    Dim EXPER As Double
    Dim Active() As Variant
    
    EXPER = Round(TXTAward.Value, 0)
    
    If OPTPartyEXP.Value = True Then
        j = CountActive()
        
        EXPER = Round(EXPER / j, 0)
    End If
    
    Call AwardEXP(EXPER)
    End
End Sub
Private Function CountActive()
    Dim i, j As Integer
    
    Dim Active() As Variant
    
    Active() = Sheets("Player Manager").Range("J13:CM13").Value
    
    j = 0
    For i = 1 To UBound(Active(), 2)
        If Not Active(1, i) = "" Then
            j = j + 1
        End If
    Next
    
    CountActive = j
End Function

Private Sub OPTExpEach_Click()
    Call ChangeEXPOPT
End Sub

Private Sub OPTPartyEXP_Click()
    Call ChangeEXPOPT
End Sub

Private Sub TXTAward_Change()
    Dim Valerie As Variant
    Dim Ox As String
    
    Valerie = TXTAward.Value
    
    If Valerie = "" Then
        Exit Sub
    ElseIf Valerie <= 0 Or Valerie = "-" Then
        Ox = MsgBox("Please enter a value greater than zero", , "Error")
        TXTAward.Value = ""
    ElseIf IsNumeric(Valerie) = False Then
        Ox = MsgBox("Please enter a numerical value", , "Error")
        TXTAward.Value = ""
    End If
End Sub

Private Sub UserForm_Initialize()
    Dim i As Integer
    
    OPTPartyEXP.Value = 1
    Call ChangeEXPOPT
End Sub
Private Sub ChangeEXPOPT()
    Dim i, j As Integer
    
    Dim EXPThresh() As Variant
    Dim Lab As String
    
    EXPThresh() = Sheets("Encounter Builder").Range("U2:AD3").Value
    
    If OPTExpEach.Value = True Then
        j = CountActive()
        For i = 1 To 10 Step 3
            EXPThresh(2, i) = Round(EXPThresh(2, i) / j, 0)
        Next
    End If
    
    Lab = "Trivial:   < " & EXPThresh(2, 1) & " Exp"
    Lab = Lab & vbCrLf & "Easy:     < " & EXPThresh(2, 4) & " Exp"
    Lab = Lab & vbCrLf & "Medium: < " & EXPThresh(2, 7) & " Exp"
    Lab = Lab & vbCrLf & "Hard:     < " & EXPThresh(2, 10) & " Exp"
    Lab = Lab & vbCrLf & "Deadly:  > " & EXPThresh(2, 10) & " Exp"
    
    LBLExperienceThresholds.Caption = Lab
End Sub
Attribute VB_Name = "EncounterBrowser"
Attribute VB_Base = "0{F0A21F33-DC23-482A-9526-630669B505FF}{C0C2A547-D4CC-4ECF-B384-243A4DCFBFCB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CMDDelete_Click()
    Dim i As Double
    Dim Conf As String
    
    Dim Encounter As String
    
    Dim SavedE() As Variant
    
    If LstEncounters.ListIndex = 0 Then Exit Sub
    
    Encounter = LstEncounters.Value
    
    Conf = MsgBox("Are you sure that you want to delete the selected encounter?", vbYesNo, "Delete Encounter?")
    If Conf = vbNo Then Exit Sub
    
    If Sheets("Saved Encounters").Range("A3").Value = "" Then
        i = 1
        Sheets("Saved Encounters").Rows(i + 1).EntireRow.Delete
        End
    Else
        SavedE() = Range("SavedEncounters[Encounter Name]").Value
        
        For i = 1 To UBound(SavedE(), 1)
            If Encounter = SavedE(i, 1) Then Exit For
        Next
    End If
    
    Sheets("Saved Encounters").Rows(i + 1).EntireRow.Delete
    
    Call GetLstEncountersVals
End Sub

Private Sub CMDLoad_Click()
    Dim i, j, k As Double
    'Used
    'i,j,k
    'Replacable
    'j,k
    
    Dim Encounter As String
    
    Dim SavedE() As Variant
    Dim Load(1 To 30, 1 To 11) As Variant
    
    If IsNull(LstEncounters.Value) = True Then Exit Sub
    If LstEncounters.ListIndex = 0 Then Exit Sub
    
    Application.ScreenUpdating = False
    
    Encounter = LstEncounters.Value
    SavedE() = Range("SavedEncounters").Value
    
    i = 1
    Do Until Encounter = SavedE(i, 1) Or i > 10000
        i = i + 1
    Loop
    
    k = 2
    For j = 1 To 30
        Load(j, 1) = SavedE(i, k)
        Load(j, 11) = SavedE(i, k + 1)
        k = k + 2
    Next
    
    Sheets("Encounter Builder").Range("A19:K48").Value = Load()
    Sheets("Xanathar's Encounter Builder").Range("A34:K63").Value = Load()
    
    Calculate
    
    Application.ScreenUpdating = True
    End
End Sub

Private Sub LstEncounters_Click()

End Sub

Private Sub UserForm_Initialize()
    Call GetLstEncountersVals
End Sub
Private Sub GetLstEncountersVals()
    
    Dim cc As Integer
    Dim i, j, k As Integer
    
    'setup lstbox
    LstEncounters.Clear
    
    cc = 61
    
    LstEncounters.ColumnCount = cc
    LstEncounters.ColumnWidths = "90,90,14,90,14,90,14,90,14,90,14,90,14,90,14,90,14,90,14,90,14,90,14,90,14,90,14,90,14,90,14,90,14,90,14,90,14,90,14,90,14,90,14,90,14,90,14,90,14,90,14,90,14,90,14,90,14,90,14,90,14"
    
    LstEncounters.list = Sheets("Saved Encounters").Range("SavedEncounters[#ALL]").Value
    
End Sub
Attribute VB_Name = "EncounterGenerator"
Option Explicit
Public Sub GetCMBVals1()
    
End Sub
Public Sub ClearReady()
    'Clear Values
    Sheets("Readied Encounter").Range("A17:J1048576").ClearContents
    'Clear Formats
    With Sheets("Readied Encounter").Range("A17:J145").Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .Color = -13683110
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Sheets("Readied Encounter").Range("A17:J145").Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Color = -13683110
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    
    Columns("D:D").FormatConditions.Delete
    
    Call ClearInitiatives
End Sub
Public Sub Ready()
    Dim i, j, k, m, n As Double
    'Used
    'i,j,k
    'Replacable
    'i,j,k
    
    Dim Encounter() As Variant
    Dim Output() As Variant
    Dim CreatureInfo() As Variant
    
    Dim Creatures As Double
    Dim RangeX As Double
    
    Dim Check129 As String
    
    Application.ScreenUpdating = False
    
    If ActiveSheet.Name = "Encounter Builder" Then
        Encounter() = Sheets("Encounter Builder").Range("A19:V48").Value
    ElseIf ActiveSheet.Name = "Xanathar's Encounter Builder" Then
        Encounter() = Sheets("Xanathar's Encounter Builder").Range("A34:V63").Value
    End If
    
    'check max
    For i = 1 To UBound(Encounter(), 1)
        j = j + Encounter(i, 11)
    Next
    
    If j > 129 Then
        Check129 = MsgBox("The encounter creature cap is 129. Please reduce the number of enemy combatants before continuing. I apologize for any inconvenience.", vbOKOnly, "Error")
        End
    End If
    'end check max
    
    For i = 1 To 30
        Creatures = Creatures + Encounter(i, 11)
    Next
    
    If Creatures = 0 Then Exit Sub
    
    ReDim Output(1 To Creatures, 1 To 10) As Variant
    
    Call ClearReady
    
    'Get Values
    k = 1
    n = 1
    For i = 1 To 30
        If Not Encounter(i, 1) = "" Then
            CreatureInfo() = GetCreatureInfo(Encounter(i, 1))
            For j = 1 To Encounter(i, 11)
                'Name
                Output(k, 1) = CreatureInfo(1, 1)
                '#
                Output(k, 2) = j
                'Hp max
                If Not CreatureInfo(1, 4) = "" Then
                    Output(k, 3) = RandomHP(CreatureInfo(1, 4))
                End If
                'Current HP
                Output(k, 4) = "=C" & 16 + n
                n = n + 1
                'Conditions
                Output(k, 5) = ""
                'Size
                Output(k, 6) = CreatureInfo(1, 2)
                'AC
                Output(k, 7) = CreatureInfo(1, 3)
                'CR
                Output(k, 8) = CreatureInfo(1, 5)
                'EXP
                Output(k, 9) = "=" & CreatureInfo(1, 6) & "*L1"
                'Source
                Output(k, 10) = CreatureInfo(1, 7)
                
                'Color Scale
                Sheets("Readied Encounter").Range("D" & k + 16).FormatConditions.Delete
                Call HealthScale(Sheets("Readied Encounter").Range("D" & k + 16), "$C$" & k + 16)
                
                'Next
                k = k + 1
            Next
            
            With Sheets("Readied Encounter").Range("A" & k + 15 & ":J" & k + 15).Borders(xlEdgeBottom)
                .LineStyle = xlContinuous
                .Color = -13683110
                .TintAndShade = 0
                .Weight = xlMedium
            End With
        End If
    Next
    
    Sheets("Readied Encounter").Range("A17:J" & Creatures + 16).Value = Output()
    With Sheets("Readied Encounter").Columns("B:J").EntireColumn
        .ColumnWidth = 45
        .AutoFit
    End With
    
    Sheets("Readied Encounter").Columns("E").EntireColumn.ColumnWidth = 17.57
    
    Sheets("Readied Encounter").Activate
    Sheets("Readied Encounter").Range("A3").Select
    
    Application.ScreenUpdating = True
End Sub
Public Sub HealthScale(RangeX As Range, Ref As String)
    RangeX.FormatConditions.AddColorScale ColorScaleType:=3
    RangeX.FormatConditions(RangeX.FormatConditions.Count).SetFirstPriority
    RangeX.FormatConditions(1).ColorScaleCriteria(1).Type = xlConditionValueNumber
    RangeX.FormatConditions(1).ColorScaleCriteria(1).Value = 0
    
    With RangeX.FormatConditions(1).ColorScaleCriteria(1).FormatColor
        .Color = 7039480
        .TintAndShade = 0
    End With
    RangeX.FormatConditions(1).ColorScaleCriteria(2).Type = _
        xlConditionValueNumber
    RangeX.FormatConditions(1).ColorScaleCriteria(2).Value = "='Readied Encounter'!" & Ref & "/2"
    With RangeX.FormatConditions(1).ColorScaleCriteria(2).FormatColor
        .Color = 8711167
        .TintAndShade = 0
    End With
    RangeX.FormatConditions(1).ColorScaleCriteria(3).Type = _
        xlConditionValueNumber
    RangeX.FormatConditions(1).ColorScaleCriteria(3).Value = _
        "='Readied Encounter'!" & Ref & "*2"
    With RangeX.FormatConditions(1).ColorScaleCriteria(3).FormatColor
        .Color = 16764743
        .TintAndShade = 0
    End With
End Sub
Public Sub ClearEncounter()
    Sheets("Encounter Builder").Range("A19:K48").Value = ""
    
    Call ClearReady
End Sub
Public Sub PullLoadView()
    EncounterBrowser.Show
End Sub
Public Sub SaveEncounter()
    Dim i, j, k As Integer
    'Used
    'i,j,k
    'Reusable
    'j,k
    
    Dim Original() As Variant
    Dim Altered() As Variant
    Dim NameX() As Variant
    
    Dim EncounterName As String
    Dim NameChk As Boolean
    Dim RangeX As Range
    
    'Pull values
    If ActiveSheet.Name = "Encounter Builder" Then
        Set RangeX = Sheets("Encounter Builder").Range("A19:K48")
    ElseIf ActiveSheet.Name = "Xanathar's Encounter Builder" Then
        Set RangeX = Sheets("Xanathar's Encounter Builder").Range("A34:K63")
    End If
    
    If Not Sheets("Saved Encounters").Range("A3").Value = "" Then
        NameX() = Range("SavedEncounters[Encounter Name]").Value
    End If
    
    'Get Name
    EncounterName = InputBox("Please name your encounter", "Encounter Name")
    If EncounterName = "" Then Exit Sub
    
    If Not Sheets("Saved Encounters").Range("A3").Value = "" Then
        j = 1
        Do
            NameChk = True
            For k = 1 To UBound(NameX(), 1)
                If EncounterName = NameX(k, 1) Then
                    NameChk = False
                    Exit For
                End If
            Next
            j = j + 1
            
            If NameChk = False Then
                EncounterName = InputBox("That name has already been used. Please enter a unique identifier for your encounter", "Encounter Name")
                If EncounterName = "" Then Exit Sub
            End If
        Loop Until NameChk = True Or j > 10000
    End If
    
    Original = RangeX.Value
    
    i = 2 * UBound(Original(), 1)
    ReDim Altered(1 To 1, 1 To i) As Variant
    
    k = 1
    
    For j = 1 To i / 2
        Altered(1, k) = Original(j, 1)
        Altered(1, k + 1) = Original(j, 11)
        k = k + 2
    Next
    
    If Not Sheets("Saved Encounters").Range("A2").Value = "" Then
        Sheets("Saved Encounters").Range("SavedEncounters[Encounter Name]").ListObject.ListRows.Add (1)
    End If
    Sheets("Saved Encounters").Range("B2:BI2").Value = Altered()
    Sheets("Saved Encounters").Range("A2").Value = EncounterName
End Sub
Attribute VB_Name = "Formatting"
Option Explicit
Private Sub FormatRemaining()
    Dim i, j As Integer
    Dim Col As String
    Dim Edit As Range
    
    j = 8
    
    Range("H30:AY30").FormatConditions.Delete
    
    For i = 2 To 44 Step 2
        Col = ColumnName(j)
        
        Set Edit = Range(Col & "30")
        
        Application.CutCopyMode = False
        Edit.FormatConditions.AddColorScale ColorScaleType:=3
        Edit.FormatConditions(Edit.FormatConditions.Count).SetFirstPriority
        Edit.FormatConditions(1).ColorScaleCriteria(1).Type = xlConditionValueNumber
        Edit.FormatConditions(1).ColorScaleCriteria(1).Value = "=-'Xanathar''s Encounter Builder'!$" & Col & "$26"
        With Edit.FormatConditions(1).ColorScaleCriteria(1).FormatColor
            .Color = 192
            .TintAndShade = 0
        End With
        Edit.FormatConditions(1).ColorScaleCriteria(2).Type = xlConditionValueNumber
        Edit.FormatConditions(1).ColorScaleCriteria(2).Value = 0
        With Edit.FormatConditions(1).ColorScaleCriteria(2).FormatColor
            .ThemeColor = xlThemeColorDark1
            .TintAndShade = 0
        End With
        Edit.FormatConditions(1).ColorScaleCriteria(3).Type = xlConditionValueNumber
        Edit.FormatConditions(1).ColorScaleCriteria(3).Value = "='Xanathar''s Encounter Builder'!$" & Col & "$26"
        With Edit.FormatConditions(1).ColorScaleCriteria(3).FormatColor
            .Color = 15773696
            .TintAndShade = 0
        End With
        
        Edit.FormatConditions.Add Type:=xlExpression, Formula1:="=$" & Col & "$26=0"
        Edit.FormatConditions(Edit.FormatConditions.Count).SetFirstPriority
        With Edit.FormatConditions(1).Font
            .ThemeColor = xlThemeColorDark1
            .TintAndShade = -4.99893185216834E-02
        End With
        With Edit.FormatConditions(1).Interior
            .PatternColorIndex = xlAutomatic
            .ThemeColor = xlThemeColorDark1
            .TintAndShade = -4.99893185216834E-02
        End With
        Edit.FormatConditions(1).StopIfTrue = False
        j = j + 2
    Next
End Sub
Attribute VB_Name = "Functions"
Option Explicit
Public Sub AwardEXP(EXP As Double)
    Dim i, j As Integer
    'Used
    'i
    'Reuse
    'i
    
    Dim PlayerEXP() As Variant
    Dim Active() As Variant
    
    Dim NLV1() As Variant
    Dim NLV2() As Variant
    Dim LvUp() As String
    Dim Alert As String
    
    NLV1() = Sheets("Aux Lists").Range("PlayerLevel").Value
    
    If EXP = 0 Then Exit Sub
    
    If Not EXP - Int(EXP) = 0 Then
        EXP = RoundRight(EXP)
    End If
    PlayerEXP() = Sheets("Player Manager").Range("J17:CU17").Value
    Active() = Sheets("Player Manager").Range("J13:CU13").Value
    
    For i = 1 To UBound(PlayerEXP(), 2) Step 9
        If Not Active(1, i) = "" Then
            PlayerEXP(1, i) = PlayerEXP(1, i) + EXP
        End If
    Next
    
    Sheets("Player Manager").Range("J17:CU17").Value = PlayerEXP()
    
    Calculate
    NLV2() = Sheets("Aux Lists").Range("PlayerLevel").Value
    ReDim LvUp(1 To UBound(NLV1()), 1 To 2) As String
    
    j = 0
    For i = 1 To UBound(NLV1())
        If Not NLV1(i, 2) = NLV2(i, 2) Then
            j = j + 1
            LvUp(j, 1) = NLV1(i, 1)
            LvUp(j, 2) = NLV1(i, 2) & "->" & NLV2(i, 2)
        End If
    Next
    
    Sheets("Player Manager").Select
    
    If j > 0 Then
        Alert = "The following characters have leveled up:" & vbCrLf
        For i = 1 To j
            Alert = Alert & vbCrLf & LvUp(i, 1) & ": " & LvUp(i, 2)
        Next
        Alert = Alert & vbCrLf & vbCrLf & "Congratulations!"
        Alert = MsgBox(Alert, vbOKOnly, "Level UP!")
    End If
End Sub
Public Function RoundRight(Numb As Double)
    Dim splitit() As String
    
    splitit = Split(Numb, ".")
    If CDbl(splitit(1)) >= 5 Then
        RoundRight = CDbl(splitit(0)) + 1
    Else
        RoundRight = CDbl(splitit(0))
    End If
End Function
Public Function PMNumberOfPlayers()
    PMNumberOfPlayers = (2 + Worksheets("Player Manager").DropDowns("CMBPlayer").Value)
End Function
Public Function ColumnNumber(Name)
    ColumnNumber = Range(Name & 1).Column
End Function
Public Function ColumnName(Number)
    ColumnName = Split(Cells(, Number).Address, "$")(1)
End Function
Public Function GetAC(Dex As Double, Armor As String, Special As Double, Shield As String)
    Dim Dexmod As Double
    Dim ArmorMod As Double
    Dim DexMax As Double
    Dim ShieldMod As Double
    
    Dim dum As Variant
    Dim splitit() As String
    
    Dexmod = (Dex - 10) / 2
    dum = CStr(Dexmod)
    splitit() = Split(dum, ".")
    Dexmod = CDbl(splitit(0))
    
    If Armor = "" Then
        ArmorMod = 10
    Else
        'Dexmod
        If Not Armor = Replace(Armor, "(Max ", "") Then
            splitit() = Split(Armor, "Max ")
            splitit() = Split(splitit(1), ")")
            DexMax = CDbl(splitit(0))
            If Dexmod > DexMax Then
                Dexmod = DexMax
            End If
        End If
        
        splitit() = Split(Armor, "AC: ")
        
        'Armormod
        If Not Replace(Armor, " Str", "") = Armor Then
            splitit() = Split(splitit(1), " Str")
            ArmorMod = CDbl(splitit(0))
            Dexmod = 0
        Else
            splitit() = Split(splitit(1), "+Dex")
            ArmorMod = CDbl(splitit(0))
        End If
    End If
    
    If Not Shield = "" Then
        ShieldMod = 2
    Else
        ShieldMod = 0
    End If
    
    GetAC = ArmorMod + Dexmod + Special + ShieldMod
End Function
Public Function SplitHP(Dice As Variant, NumberDieAdd As Integer)
    Dim splitit() As String
    Dim BoiledDown As String
    
    Dim Numb As Double
    Dim Die As Double
    Dim Con As Double
    
    Dim dum As Variant
    
    If IsNumeric(Dice) = True Then
        ReDim splitit(0 To 2) As String
        splitit(2) = "0"
        splitit(2) = "0"
        splitit(2) = CStr(Dice)
        SplitHP = splitit(NumberDieAdd)
        Exit Function
    End If
    
    dum = Replace(Dice, " ", "")
    splitit() = Split(dum, "(")
    dum = Replace(splitit(1), ")", "")
    dum = Replace(dum, "d", "+")
    dum = Replace(dum, "-", "+-")
    splitit() = Split(dum, "+")
    If UBound(splitit(), 1) < 2 Then
        ReDim Preserve splitit(0 To 2)
        splitit(2) = 0
    End If
    
    SplitHP = splitit(NumberDieAdd)
    
End Function
Public Function RandomValue(Low As Variant, High As Variant)
    Randomize
    
    RandomValue = Int((High - Low + 1) * Rnd + Low)
End Function
Public Function RandomHP(Dice)
    Dim i As Integer
    'Used
    'i
    'Replacable
    'i
    
    Dim Numb As Integer
    Dim Die As Integer
    Dim Add As Integer
    
    Dim Health As Double
    
    If IsNumeric(Dice) = True Then
        RandomHP = Dice
        Exit Function
    End If
    
    Numb = SplitHP(Dice, 0)
    Die = SplitHP(Dice, 1)
    Add = SplitHP(Dice, 2)
    
    For i = 1 To Numb
        Health = Health + RandomValue(1, Die)
    Next
    
    Health = Health + Add
    
    If Health <= 0 Then
        Health = 1
    End If
    
    RandomHP = Health
End Function
Public Function GetCreatureInfo(Name)
    
    Dim i, j, k, m, p As Double
    'Used:
    'i,j,k
    'Replacable
    'i,k
    
    Dim Creature() As Variant
    Dim CreatureTable() As Variant
    
    Dim Dum1 As Variant
    Dim splitit() As String
    Dim Health As Double
    Dim HPInfo(1 To 3) As Double
    
    CreatureTable() = Sheets("Enemy Library").Range("Creatures").Value
    
    j = UBound(CreatureTable(), 1)
    m = UBound(CreatureTable(), 2)
    
    ReDim Creature(1 To 1, 1 To m) As Variant
    
    For i = 1 To j
        If UCase(Name) = UCase(CreatureTable(i, 1)) Then
            For k = 1 To m
                Creature(1, k) = CreatureTable(i, k)
            Next
            Exit For
        End If
    Next
    
    GetCreatureInfo = Creature()
End Function
Public Function RemoveDupes(MyArray As Variant) As Variant
    Dim i, j As Long
    
    Dim NewArray() As Variant
    
    ReDim NewArray(1 To UBound(MyArray, 1), 1 To UBound(MyArray, 2))
    
    j = UBound(MyArray, 1)
    
    For i = 1 To j
        For k = 1 To j
            
        Next
    Next
    
End Function
Attribute VB_Name = "InitiativeTracker"
Option Explicit
Public Sub InitiativePlayers(NumbIt As Integer)
    Dim i, j As Integer
    
    Dim Players As Range
    Dim STR As String
    
    'clear old
    Set Players = Sheets("Initiative Tracker").Range("C8:C17")
    Players.Validation.Delete
    Players.Value = ""
    Set Players = Sheets("Initiative Tracker").Range("A8:C17")
    Players.ClearFormats
    With Players.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 13224393
    End With
    With Players.Font
        .Color = -3552823
        .TintAndShade = 0
    End With
    
    'set new validation
    Set Players = Sheets("Initiative Tracker").Range("C8:C" & 7 + NumbIt)
    With Players.Validation
        .Delete
        .Add Type:=xlValidateInputOnly, AlertStyle:=xlValidAlertStop, Operator _
        :=xlBetween
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = "Input Roll"
        .ErrorTitle = ""
        .InputMessage = _
        "When using this sheet please input the roll AFTER modifiers. The initiative modifier is NOT automatically added."
        .ErrorMessage = ""
        .ShowInput = True
        .ShowError = True
    End With
    
    'Format
    Set Players = Sheets("Initiative Tracker").Range("A8:C" & 7 + NumbIt)
    Players.Borders(xlDiagonalDown).LineStyle = xlNone
    Players.Borders(xlDiagonalUp).LineStyle = xlNone
    With Players.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Color = -13683110
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Players.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Color = -13683110
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Players.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Color = -13683110
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Players.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Color = -13683110
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Players.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .Color = -13683110
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Players.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .Color = -13683110
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Players
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    With Players.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = 15921906
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    With Players.Font
        .Color = -13683110
        .TintAndShade = 0
    End With
    
    'conditional formatting
    j = 0
    For i = 10 To 9 + NumbIt * 9 Step 9
        'step down on initiative tracker
        j = j + 1
        Set Players = Sheets("Initiative Tracker").Range("A" & 7 + j & ":C" & 7 + j)
        
        'set ref
        STR = "='Player Manager'!$" & ColumnName(i) & "$13="""""
        Players.FormatConditions.Add Type:=xlExpression, Formula1:=STR
        
        'set validation
        Players.FormatConditions(Players.FormatConditions.Count).SetFirstPriority
        With Players.FormatConditions(1).Font
            .Color = -3552823
            .TintAndShade = 0
        End With
        With Players.FormatConditions(1).Interior
            .PatternColorIndex = xlAutomatic
            .Color = 15921906
            .TintAndShade = 0
        End With
        Players.FormatConditions(1).StopIfTrue = True
    Next
End Sub
Public Sub AutoRollMonsters()
    Dim i, j, k As Integer
    
    Dim Roll As Integer
    Dim Infor() As Variant
    Dim Rolls() As Variant
    Dim Dead() As Variant
    
    Infor() = Sheets("Initiative Tracker").Range("G8:G136").Value
    Dead() = Sheets("Initiative Tracker").Range("H8:H136").Value
    ReDim Rolls(1 To UBound(Infor(), 1), 1 To 1)
    
    For i = 1 To UBound(Infor(), 1)
        If Infor(i, 1) = "" Then Exit For
        
        If Dead(i, 1) <= 0 Then
            Rolls(i, 1) = ""
        Else
            Randomize
            Roll = Int((20 - 1 + 1) * Rnd + 1)
            Roll = Roll + Infor(i, 1)
            Rolls(i, 1) = Roll
        End If
    Next
    
    
    Sheets("Initiative Tracker").Range("I8:I136").Value = Rolls()
End Sub
Public Sub AutoRollPlayers()
    Dim i, j, k As Integer
    
    Dim Roll As Integer
    Dim Infor() As Variant
    Dim Rolls() As Variant
    Dim Active() As Variant
    
    Infor() = Sheets("Initiative Tracker").Range("B8:B17").Value
    Active() = Sheets("Aux Lists").Range("ActivePlayers").Value
    ReDim Rolls(1 To UBound(Infor(), 1), 1 To 1)
    
    For i = 1 To UBound(Infor(), 1)
        If Infor(i, 1) = "" Then Exit For
        
        If Active(i, 2) = 0 Then
            Rolls(i, 1) = ""
        Else
            Randomize
            Roll = Int((20 - 1 + 1) * Rnd + 1)
            Roll = Roll + Infor(i, 1)
            Rolls(i, 1) = Roll
        End If
    Next
    
    
    Sheets("Initiative Tracker").Range("C8:C17").Value = Rolls()
End Sub
Public Sub ClearInitiatives()
    Sheets("Initiative Tracker").Range("C8:C17,I8:I136").Value = ""
End Sub
Public Function InitiativeOrder(Playerl, Monsterl, Out) As Variant
    Dim i, j, k, m, n As Integer
    
    Dim Order() As Variant
    Dim Sort As Integer
    Dim dum As Variant
    Dim Players() As Variant
    Dim Monsters() As Variant
    
    Players() = Playerl.Value
    Monsters() = Monsterl.Value
    
    i = 0
    j = 0
    k = 1
    Do Until i = UBound(Monsters(), 1) Or k = UBound(Monsters(), 1)
        If Not Monsters(k, 4) = "" Then
            i = i + 1
        End If
        k = k + 1
    Loop
    k = 1
    Do Until j = UBound(Players(), 1) Or k = UBound(Players(), 1)
        If Not Players(k, 3) = "" Then
            j = j + 1
        End If
        k = k + 1
    Loop
    
    ReDim Order(1 To Out, 1 To 4)
    
    If i + j = 0 Then
        For i = 1 To Out
            Order(i, 1) = ""
            Order(i, 2) = ""
            Order(i, 3) = ""
            Order(i, 4) = ""
        Next
        InitiativeOrder = Order
        Exit Function
    End If
    
    j = 1
    For i = 1 To 10
        If Not Players(i, 3) = "" Then
            Order(j, 1) = Players(i, 1)
            Order(j, 2) = "-"
            Order(j, 3) = Players(i, 2)
            Order(j, 4) = Players(i, 3)
            j = j + 1
        End If
    Next
    
    n = j
    For i = 1 To UBound(Monsters(), 1)
        If Not Monsters(i, 5) = "" And Monsters(i, 4) > 0 Then
            Order(n, 1) = Monsters(i, 1)
            Order(n, 2) = Monsters(i, 2)
            Order(n, 3) = Monsters(i, 3)
            Order(n, 4) = Monsters(i, 5)
            n = n + 1
        End If
    Next
    
    Sort = 0
    m = 0
    Do Until Sort = UBound(Order(), 1) - 1 Or m > 1000
        Sort = 0
        For k = 1 To UBound(Order(), 1) - 1
            If Order(k, 4) < Order(k + 1, 4) Then
                For j = 1 To 4
                    dum = Order(k, j)
                    Order(k, j) = Order(k + 1, j)
                    Order(k + 1, j) = dum
                Next
            ElseIf Order(k, 4) = Order(k + 1, 4) And Order(k, 3) < Order(k + 1, 3) Then
                For j = 1 To 4
                    dum = Order(k, j)
                    Order(k, j) = Order(k + 1, j)
                    Order(k + 1, j) = dum
                Next
            Else
                Sort = Sort + 1
            End If
        Next
        m = m + 1
    Loop
    
    For i = n To Out
        Order(i, 1) = ""
        Order(i, 2) = ""
        Order(i, 3) = ""
        Order(i, 4) = ""
    Next
    
    InitiativeOrder = Order
End Function
Attribute VB_Name = "LibrarySearch"
Attribute VB_Base = "0{9EC135BD-8311-4B24-B67E-DD5F07B46B46}{78FFDE68-7D7A-4750-94DB-AE119153D580}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CMBConditions_Change()
    Dim i As Integer
    
    Dim Effect() As Variant
    
    Effect() = Sheets("Character Lists").Range("Conditions").Value
    
    LBLEffect.Caption = ""
    
    For i = 1 To UBound(Effect, 1)
        If CMBConditions.Value = Effect(i, 1) Then
            LBLEffect.Caption = Effect(i, 2)
            Exit For
        End If
    Next
End Sub

Private Sub CMBEnvironments_Change()
    Dim i As Integer
    
    Dim Listy() As Variant
    Dim Valerie As String
    Dim Yea As Boolean
    
    If CMBEnvironments.Value = "" Then
        TXTEnvironments.Value = ""
        Exit Sub
    End If
    
    Listy() = Sheets("Environmental").Range("Environments").Value
    
    Valerie = CMBEnvironments.Value
    
    Yea = False
    For i = 1 To UBound(Listy())
        If Valerie = Listy(i, 1) Then
            Yea = True
            Exit For
        End If
    Next
    
    If Yea = False Then Exit Sub
    
    TXTEnvironments.Value = Listy(i, 2)
End Sub

Private Sub CMBHazards_Change()
    Dim i As Integer
    
    Dim Listy() As Variant
    Dim Valerie As String
    Dim Yea As Boolean
    
    If CMBHazards.Value = "" Then
        TXTHazards.Value = ""
        Exit Sub
    End If
    
    Listy() = Sheets("Environmental").Range("Hazards").Value
    
    Valerie = CMBHazards.Value
    
    Yea = False
    For i = 1 To UBound(Listy())
        If Valerie = Listy(i, 1) Then
            Yea = True
            Exit For
        End If
    Next
    
    If Yea = False Then Exit Sub
    
    TXTHazards.Value = Listy(i, 2)
End Sub

Private Sub CMBIncident_Change()
    Dim i, j As Integer
    
    Dim Incidents() As Variant
    
    If CMBIncident.Value = "" Then
        TXTAdditionalOptions.Value = ""
        Exit Sub
    End If
    
    Incidents = Sheets("Random Encounters").Range("RandomEncounters").Value
    
    For i = 1 To UBound(Incidents(), 1)
        If Incidents(i, 2) = CMBIncident.Value Then
            TXTAdditionalOptions.Value = Incidents(i, 3)
            Exit Sub
        End If
    Next
    
    LBLScroll3.Visible = True
End Sub

Private Sub CMBInjuries_Change()
    Dim i As Integer
    
    Dim Effect() As Variant
    
    Effect() = Sheets("Character Lists").Range("LingeringInjuries").Value
    
    LBLInjuries.Caption = ""
    
    For i = 1 To UBound(Effect, 1)
        If CMBInjuries.Value = Effect(i, 1) Then
            LBLInjuries.Caption = Effect(i, 2)
            Exit For
        End If
    Next
End Sub

Private Sub CMBItems_Change()
    Dim i, j As Integer
    Dim Items() As Variant
    Dim ItemInf As String
    
    Items() = Sheets("Item Library").Range("Items").Value
    
    For i = 1 To UBound(Items(), 1)
        If CMBItems.Value = Items(i, 1) Then Exit For
        
        If i + 1 > UBound(Items(), 1) Then Exit Sub
    Next
    
    ItemInf = "Name: " & Items(i, 1) & vbCrLf & _
        "Value: " & Items(i, 2)
    
    If Not Items(i, 3) = "" Then
        ItemInf = ItemInf & vbCrLf & _
            "Damage: " & Items(i, 3)
    End If
    
    ItemInf = ItemInf & vbCrLf & _
        "Weight: " & Items(i, 4)
    
    If Not Items(i, 5) = "" Then
        ItemInf = ItemInf & vbCrLf & _
            "Properties: " & Items(i, 5)
    End If
    
    ItemInf = ItemInf & vbCrLf & _
        "Item Type: " & Items(i, 6)
    
    LBLItems.Caption = ItemInf
        
End Sub

Private Sub CMBMagicItems_Change()
    Dim i, j As Integer
    Dim Items() As Variant
    Dim ItemInf As String
    
    Items() = Sheets("Magic Item Library").Range("MagicItems").Value
    
    For i = 1 To UBound(Items(), 1)
        If CMBMagicItems.Value = Items(i, 1) Then Exit For
        
        If i + 1 > UBound(Items(), 1) Then Exit Sub
    Next
    
    ItemInf = "Name: " & Items(i, 1) & vbCrLf & _
        "Item Type: " & Items(i, 2)
    
    ItemInf = ItemInf & vbCrLf & _
        "Consumable: " & Items(i, 3)
    
    ItemInf = ItemInf & vbCrLf & _
        "Rarity: " & Items(i, 4)
        
    ItemInf = ItemInf & vbCrLf & _
        "Attunement: " & Items(i, 5)
    
    ItemInf = ItemInf & vbCrLf & _
        "Sourcebook: " & Items(i, 6)
    
    ItemInf = ItemInf & vbCrLf & _
        "Notes: " & Items(i, 7)
        
    ItemInf = ItemInf & vbCrLf & _
        "Cursed: " & Items(i, 8)
    
    If Not Items(i, 9) = "" Then
        ItemInf = ItemInf & vbCrLf & _
            "Attunement Requirements: " & Items(i, 9)
    End If
    
    ItemInf = ItemInf & vbCrLf & vbCrLf & _
        "Description: " & vbCrLf & _
            Items(i, 10)
    
    
    TXTMagicItems.Value = ItemInf
    LBLScroll.Visible = True
End Sub

Private Sub CMBSpells_Change()
    Dim i, j As Integer
    Dim Spells() As Variant
    Dim SpellInf As String
    Dim Components As String
    
    Spells() = Sheets("Spell Library").Range("Spells").Value
    
    For i = 1 To UBound(Spells(), 1)
        If CMBSpells.Value = Spells(i, 1) Then Exit For
        
        If i + 1 > UBound(Spells(), 1) Then Exit Sub
    Next
    
    SpellInf = "Name: " & Spells(i, 1)

    If Spells(i, 2) = 0 Then
        SpellInf = SpellInf & vbCrLf & _
            "Level: Cantrip"
    Else
        SpellInf = SpellInf & vbCrLf & _
            "Level: " & Spells(i, 2)
    End If
    
    SpellInf = SpellInf & vbCrLf & _
        "Spell School: " & Spells(i, 5)
    
    'Components Fix
    For j = 6 To 8
        If Not Spells(i, j) = "" Then
            If Components = "" Then
                Components = Spells(i, j)
            Else
                Components = Components & ", " & Spells(i, j)
            End If
        End If
    Next
    
    SpellInf = SpellInf & vbCrLf & _
        "Components: " & Components
    
    If Not Components = Replace(Components, "M", "WOAH") And Spells(i, 19) = "" And Spells(i, 17) = "" Then
        SpellInf = SpellInf & vbCrLf & _
            "    Consumed: " & Spells(i, 18)
    ElseIf Not Components = Replace(Components, "M", "WOAH") And Not Spells(i, 19) = "" And Spells(i, 17) = "" Then
        SpellInf = SpellInf & vbCrLf & _
            "    Component(s): " & Spells(i, 19) & vbCrLf & _
            "    Consumed: " & Spells(i, 18)
    ElseIf Not Components = Replace(Components, "M", "WOAH") And Not Spells(i, 19) = "" And Not Spells(i, 17) = "" Then
        SpellInf = SpellInf & vbCrLf & _
            "    Component(s): " & Spells(i, 19) & vbCrLf & _
            "    Cost: " & Spells(i, 17) & vbCrLf & _
            "    Consumed: " & Spells(i, 18)
    End If
    
    SpellInf = SpellInf & vbCrLf & _
            "Concentration: " & Spells(i, 16)
    
    SpellInf = SpellInf & vbCrLf & vbCrLf & _
        "Description: " & Spells(i, 3) & vbCrLf
    
    SpellInf = SpellInf & vbCrLf & _
        "At Higher Levels: " & Spells(i, 4) & vbCrLf
    
    'Other
    SpellInf = SpellInf & vbCrLf & _
        "Ritual: " & Spells(i, 10)
        
    SpellInf = SpellInf & vbCrLf & _
        "Casting Time: " & Spells(i, 9)
    
    SpellInf = SpellInf & vbCrLf & _
        "Duration: " & Spells(i, 12) & vbCrLf
    
    SpellInf = SpellInf & vbCrLf & _
        "Range: " & Spells(i, 11)
    'Units on range
    If Not Spells(i, 11) = "Self" Then
        SpellInf = SpellInf & "'"
    End If
    
    If Not Spells(i, 14) = "" Then
        SpellInf = SpellInf & vbCrLf & vbCrLf & _
            "Damage Type: " & Spells(i, 14)
    End If
    
    If Not Spells(i, 15) = "" Then
        SpellInf = SpellInf & vbCrLf & _
            "Saving Throw: " & Spells(i, 15)
    End If
    
    SpellInf = SpellInf & vbCrLf & vbCrLf & _
        "Classes With This Spell: " & Spells(i, 20) & vbCrLf
    
    SpellInf = SpellInf & vbCrLf & _
        "Source book: " & Spells(i, 21)
    
    TXTSpells.Value = SpellInf
    LBLScroll2.Visible = True
End Sub

Private Sub CMBType_Change()
    Dim i As Double
    
    Dim Vals() As Variant
    
    CMBIncident.Enabled = True
    
    CMBIncident.Clear
    
    Vals() = Sheets("Random Encounters").Range("RandomEncounters").Value
    
    For i = 1 To UBound(Vals(), 1)
        If Vals(i, 1) = CMBType.Value Then
            CMBIncident.AddItem (Vals(i, 2))
        End If
    Next
    
    CMBIncident.Value = ""
    
End Sub

Private Sub CMBVision_Change()
    Dim i As Integer
    
    Dim Listy() As Variant
    Dim Valerie As String
    Dim Yea As Boolean
    
    If CMBVision.Value = "" Then
        TXTVision.Value = ""
        Exit Sub
    End If
    
    Listy() = Sheets("Environmental").Range("Vision").Value
    
    Valerie = CMBVision.Value
    
    Yea = False
    For i = 1 To UBound(Listy())
        If Valerie = Listy(i, 1) Then
            Yea = True
            Exit For
        End If
    Next
    
    If Yea = False Then Exit Sub
    
    TXTVision.Value = Listy(i, 2)
End Sub

Private Sub CMDMagicRandom_Click()
    Dim i, j, k, m As Double
    'Used
    'i,j,k,m
    'Reusable
    'i,k,m
    Dim Parameters(1 To 7) As Boolean
    Dim Consumable As Boolean
    
    Dim MITable() As Variant
    Dim ItemBoo() As Boolean
    Dim ChoosableItems() As Variant
    
    Dim Err As String
    
    Dim Randy As Double
    
    Parameters(1) = CHKCommon.Value
    Parameters(2) = CHKUncommon.Value
    Parameters(3) = CHKRare.Value
    Parameters(4) = CHKVRare.Value
    Parameters(5) = CHKLegendary.Value
    Parameters(6) = CHKUnique.Value
    Parameters(7) = CHKArtifact.Value
    
    Consumable = OPTConsumable.Value
    
    MITable() = Sheets("Magic Item Library").Range("MagicItems").Value
    ReDim ItemBoo(1 To UBound(MITable(), 1)) As Boolean
    
    For i = 1 To UBound(MITable(), 1)
        If MITable(i, 3) = Consumable Then
            If Parameters(1) = True And MITable(i, 4) = "Common" Then
                j = j + 1
                ItemBoo(i) = True
            ElseIf Parameters(2) = True And MITable(i, 4) = "Uncommon" Then
                j = j + 1
                ItemBoo(i) = True
            ElseIf Parameters(3) = True And MITable(i, 4) = "Rare" Then
                j = j + 1
                ItemBoo(i) = True
            ElseIf Parameters(4) = True And MITable(i, 4) = "Very Rare" Then
                j = j + 1
                ItemBoo(i) = True
            ElseIf Parameters(5) = True And MITable(i, 4) = "Legendary" Then
                j = j + 1
                ItemBoo(i) = True
            ElseIf Parameters(6) = True And MITable(i, 4) = "Unique" Then
                j = j + 1
                ItemBoo(i) = True
            ElseIf Parameters(7) = True And MITable(i, 4) = "Artifact" Then
                j = j + 1
                ItemBoo(i) = True
            Else
                ItemBoo(i) = False
            End If
        End If
    Next
    
    If j = 0 Then
        Err = MsgBox("Your parameters have yeilded no items. Please consider widening your choices.", , "Error")
        Exit Sub
    End If
    
    ReDim ChoosableItems(1 To j) As Variant
    
    k = 0
    For i = 1 To UBound(MITable(), 1)
        If ItemBoo(i) = True Then
            k = k + 1
            ChoosableItems(k) = MITable(i, 1)
        End If
    Next
    
    Randy = RandomValue(1, j)
    
    CMBMagicItems.Value = ChoosableItems(Randy)
    
End Sub

Private Sub CMDRandomEncounter_Click()
    Dim i As Integer
    
    Dim Listy() As Variant
    
    Listy() = Sheets("Random Encounters").Range("RandomEncounters").Value
    
    i = RandomValue(1, UBound(Listy(), 1))
    
    CMBType.Value = Listy(i, 1)
    CMBIncident.Value = Listy(i, 2)
    
    
    
End Sub

Private Sub CMDRandomItem_Click()
    Dim i As Double
    
    Dim Items() As Variant
    
    Items() = Sheets("Item Library").Range("Items").Value
    
    CMBItems.Value = Items(RandomValue(1, UBound(Items, 1)), 1)
End Sub

Private Sub Label1_Click()

End Sub

Private Sub Label2_Click()

End Sub

Private Sub LBLHazards_Click()

End Sub

Private Sub LBLVision_Click()

End Sub

Private Sub LBLInjuries_Click()

End Sub

Private Sub MultiPage1_Change()

End Sub

Private Sub UserForm_Initialize()
    Dim ItemRange As String
    
    MultiPage1.Value = 0
    MultiPage2.Value = 0
    
    CMDMagicRandom.Font.Size = 7
    CMDRandomItem.Font.Size = 7
    CMDRandomEncounter.Font.Size = 7
    
    Call AddVals(CMBItems, "'Item Library'!Items[Name]", 1)
    'ItemRange = "'Item Library'!Items[Name]"
    'CMBItems.RowSource = ItemRange
    
    Call AddVals(CMBMagicItems, "'Magic Item Library'!MagicItems[Name]", 1)
    'ItemRange = "'Magic Item Library'!MagicItems[Name]"
    'CMBMagicItems.RowSource = ItemRange
    
    Call AddVals(CMBSpells, "'Spell Library'!Spells[Name]", 1)
    'ItemRange = "'Spell Library'!Spells[Name]"
    'CMBSpells.RowSource = ItemRange
    
    Call AddVals(CMBConditions, "'Character Lists'!Conditions[Condition]", 1)
    'ItemRange = "'Character Lists'!Conditions[Condition]"
    'CMBConditions.RowSource = ItemRange
    CMBConditions.Value = "None"
    
    Call AddVals(CMBInjuries, "'Character Lists'!LingeringInjuries[Injury]", 1)
    
    Call PullEncounterTypes
    Call GetEnvironmental
End Sub
Private Sub AddVals(CMBNAME As Object, RNGX As String, Col As Integer)
    Dim i As Integer
    
    Dim RNGY() As Variant
    
    RNGY() = Range(RNGX).Value
    
    For i = 1 To UBound(RNGY(), 1)
        CMBNAME.AddItem (RNGY(i, Col))
    Next
End Sub
Private Sub GetEnvironmental()
    Dim i, j, k
    
    Dim WHAT As Boolean
    
    i = 2
    WHAT = False
    Do Until i > 100 Or WHAT = True
        i = i + 1
        If Sheets("Environmental").Range("A" & i).Value = "" And Sheets("Environmental").Range("D" & i).Value = "" And Sheets("Environmental").Range("G" & i).Value = "" Then
            WHAT = True
        End If
    Loop
    
    For j = 3 To i
        If Not Sheets("Environmental").Range("A" & j).Value = "" Then
            CMBVision.AddItem Sheets("Environmental").Range("A" & j).Value
        End If
        If Not Sheets("Environmental").Range("D" & j).Value = "" Then
            CMBEnvironments.AddItem Sheets("Environmental").Range("D" & j).Value
        End If
        If Not Sheets("Environmental").Range("G" & j).Value = "" Then
            CMBHazards.AddItem Sheets("Environmental").Range("G" & j).Value
        End If
    Next
End Sub
Private Sub PullEncounterTypes()
    Dim i, j, k As Long
    
    Dim FullList() As Variant
    Dim PullList() As Variant
    
    Dim BooTemp As Boolean
    
    FullList() = Sheets("Random Encounters").Range("RandomEncounters[Type]").Value
    ReDim PullList(1 To UBound(FullList(), 1))
    
    PullList(1) = FullList(1, 1)
    
    k = 1
    For i = 2 To UBound(FullList(), 1)
        BooTemp = True
        For j = 1 To i - 1
            If FullList(i, 1) = PullList(j) Then
                BooTemp = False
                Exit For
            End If
        Next
        If BooTemp = True Then
            k = k + 1
            PullList(k) = FullList(i, 1)
        End If
    Next
    
    For i = 1 To k
        CMBType.AddItem (PullList(i))
    Next
    
End Sub
Attribute VB_Name = "Loadem"
Option Explicit
Public Sub LoadLibrarySearch()
Attribute LoadLibrarySearch.VB_Description = "Opens library search window"
Attribute LoadLibrarySearch.VB_ProcData.VB_Invoke_Func = "l\n14"
    LibrarySearch.Show
End Sub
Public Sub AddCreature()
    AddCombatant.Show
End Sub
Public Sub NewWindowRE()
    ActiveWindow.NewWindow
    Sheets("Readied Encounter").Select
End Sub
Public Sub NewWindowIT()
    ActiveWindow.NewWindow
    Sheets("Initiative Tracker").Select
End Sub
Public Sub EncounterExp()
    Call AwardEXP(Sheets("Readied Encounter").Range("D1").Value)
End Sub
Public Sub AwardIt()
    AwardEXPForm.Show
End Sub
Public Sub BrowseEncounters()
    EncounterBrowser.Show
End Sub
Public Sub AddCreatureX()
    AddNewCreature.Show
End Sub
Public Sub ShowHideRowsX()
    ShowHideRows.Show
End Sub
Attribute VB_Name = "PlayerSheet"
Option Explicit
Public Sub ShowCharacterLists()
    Sheets("Character Lists").Visible = True
    Sheets("Character Lists").Select
End Sub
Public Sub HideCharacterLists()
    Sheets("Character Lists").Visible = False
    Sheets("Player Manager").Select
End Sub
Public Function DexModifier(Dex As Integer)
    Dim Result As Double
    
    Result = (Dex - 10) / 2
    
    If Result < 0 And Abs(Result) - Int(Abs(Result)) = 0.5 Then
        Result = Result - 0.5
    ElseIf Result > 0 And Result - Int(Result) = 0.5 Then
        Result = Result - 0.5
    End If
    
    DexModifier = Result
End Function
Public Function LiftingCarrying(STR, Race, RaceTable)
    Dim i As Integer
    
    Dim RaceMods() As Variant
    Dim Modifier As Integer
    
    Dim Output(0 To 1) As String
    
    RaceMods() = RaceTable.Value
    
    Modifier = 1
    For i = 1 To UBound(RaceMods(), 1)
        If Race = RaceMods(i, 1) Then
            Modifier = RaceMods(i, 2)
            Exit For
        End If
    Next
    
    Output(0) = 15 * STR * Modifier
    Output(1) = 2 * Output(0)
    
    LiftingCarrying = "Push/Drag/Lift: " & Output(0) & vbCrLf & _
        " Carrying Capacity: " & Output(1)
    
End Function
Public Sub ClearPlayerSheet()
    Dim ClearRange As Range
    
    Dim Confirm As String
    
    Confirm = MsgBox("Are you sure you would like to completely reset all player information?", vbOKCancel, "Reset Player Manager")
    If Confirm = 2 Then End
    
    Sheets("Player Manager").Select
    
    Set ClearRange = Sheets("Player Manager").Range("J9:CU9,J11:CU11,J17:CU17,J19:CU19,J21:CU21,J30:CU34,J47:CU51,J56:CU57,J62:CU62")
    
    ClearRange.Value = ""
    
    Sheets("Player Manager").Range("J13:CU13").Value = Worksheets("Aux Lists").Range("A4").Value
    
    'Sheets("Player Manager").Shapes("Sanity").OLEFormat.Object.Value = 0
    'Sheets("Player Manager").Shapes("Honor").OLEFormat.Object.Value = 0
    
    'Call SanityToggle
    'Call HonorToggle
    
    Sheets("Readied Encounter").Range("E5:F14").Value = ""
    Call LongRest
    
    Worksheets("Player Manager").DropDowns("CMBPlayer").Value = 8
    Call NumberPlayers
    
End Sub
Public Sub ResetCurrentHP()
    Dim i As Integer
    
    Dim Formu As String
    Dim Column As String
    
    For i = 1 To 90 Step 9
        Column = ColumnName(9 + i)
        
        Formu = "=" & Column & "19"
        
        'Range(Column & 20).Select
        Range(Column & 20).Formula = Formu
    Next
End Sub
Public Sub ConditionButton()
    LibrarySearch.Show
End Sub
Public Sub SanityToggle()
    If Worksheets("Player Manager").Shapes("Sanity").OLEFormat.Object.Value = 1 Then
        Sheets("Player Manager").Rows(47).EntireRow.Hidden = False
    Else
        Sheets("Player Manager").Rows(47).EntireRow.Hidden = True
    End If
End Sub
Public Sub HonorToggle()
    If Worksheets("Player Manager").Shapes("Honor").OLEFormat.Object.Value = 1 Then
        Sheets("Player Manager").Rows(48).EntireRow.Hidden = False
    Else
        Sheets("Player Manager").Rows(48).EntireRow.Hidden = True
    End If
End Sub
Public Sub NumberPlayers()
    Dim i, j, k As Integer
    'Used
    'i,j,k
    'replacable
    'i
    Dim RangeX As String
    Dim RangeY As String
    Dim splitit() As String
    
    Application.ScreenUpdating = False
    
    Sheets("Player Manager").Columns("A:CU").Hidden = False
    k = PMNumberOfPlayers
    
    If k = 10 Then
        Sheets("Player Manager").Shapes("Player 1").Visible = True
        Sheets("Player Manager").Shapes("Player 2").Visible = True
        Sheets("Player Manager").Shapes("Player 3").Visible = True
        
        'Format
        With Sheets("Player Manager").Range("BU1:CU8").Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .ThemeColor = xlThemeColorDark1
            .TintAndShade = -4.99893185216834E-02
            .PatternTintAndShade = 0
        End With
        Sheets("Player Manager").Range("BU1:CU8").Borders(xlDiagonalDown).LineStyle = xlNone
        Sheets("Player Manager").Range("BU1:CU8").Borders(xlDiagonalUp).LineStyle = xlNone
        With Sheets("Player Manager").Range("BU1:CU8").Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .Color = -13683110
            .TintAndShade = 0
            .Weight = xlMedium
        End With
        With Sheets("Player Manager").Range("BU1:CU8").Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .Color = -13683110
            .TintAndShade = 0
            .Weight = xlMedium
        End With
        With Sheets("Player Manager").Range("BU1:CU8").Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Color = -13683110
            .TintAndShade = 0
            .Weight = xlMedium
        End With
        With Sheets("Player Manager").Range("BU1:CU8").Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Color = -13683110
            .TintAndShade = 0
            .Weight = xlMedium
        End With
        Sheets("Player Manager").Range("BU1:CU8").Borders(xlInsideVertical).LineStyle = xlNone
        Sheets("Player Manager").Range("BU1:CU8").Borders(xlInsideHorizontal).LineStyle = xlNone
        Sheets("Readied Encounter").Rows("5:14").EntireRow.Hidden = False
    Else
        j = 10 + 9 * k
        
        splitit() = Split(CStr(Cells(1, (j)).Address), "$")
        RangeX = splitit(1) & ":CU"
        RangeY = splitit(1) & "13:CU13"
        
        Sheets("Player Manager").Range(RangeY).Value = ""
        Sheets("Player Manager").Columns(RangeX).Hidden = True
        
        'hide 1st pic
        Sheets("Player Manager").Shapes("Player 1").Visible = False
        With Sheets("Player Manager").Range("BU1:CU8").Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .ThemeColor = xlThemeColorAccent3
            .TintAndShade = 0.399975585192419
            .PatternTintAndShade = 0
        End With
        Sheets("Player Manager").Range("BU1:CU8").Borders(xlDiagonalDown).LineStyle = xlNone
        Sheets("Player Manager").Range("BU1:CU8").Borders(xlDiagonalUp).LineStyle = xlNone
        Sheets("Player Manager").Range("BU1:CU8").Borders(xlEdgeLeft).LineStyle = xlNone
        Sheets("Player Manager").Range("BU1:CU8").Borders(xlEdgeTop).LineStyle = xlNone
        With Sheets("Player Manager").Range("BU1:CU8").Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Color = -13683110
            .TintAndShade = 0
            .Weight = xlMedium
        End With
        
        'check 2nd pic
        If k < 7 Then
            Sheets("Player Manager").Shapes("Player 2").Visible = False
            
            'format
            With Sheets("Player Manager").Range("AT1:BT8").Interior
                .Pattern = xlSolid
                .PatternColorIndex = xlAutomatic
                .ThemeColor = xlThemeColorAccent3
                .TintAndShade = 0.399975585192419
                .PatternTintAndShade = 0
            End With
            Sheets("Player Manager").Range("AT1:BT8").Borders(xlDiagonalDown).LineStyle = xlNone
            Sheets("Player Manager").Range("AT1:BT8").Borders(xlDiagonalUp).LineStyle = xlNone
            Sheets("Player Manager").Range("AT1:BT8").Borders(xlEdgeLeft).LineStyle = xlNone
            Sheets("Player Manager").Range("AT1:BT8").Borders(xlEdgeTop).LineStyle = xlNone
            With Sheets("Player Manager").Range("AT1:BT8").Borders(xlEdgeBottom)
                .LineStyle = xlContinuous
                .Color = -13683110
                .TintAndShade = 0
                .Weight = xlMedium
            End With
            Sheets("Player Manager").Range("AT1:BT8").Borders(xlEdgeRight).LineStyle = xlNone
            Sheets("Player Manager").Range("AT1:BT8").Borders(xlInsideVertical).LineStyle = xlNone
            Sheets("Player Manager").Range("AT1:BT8").Borders(xlInsideHorizontal).LineStyle = xlNone
        Else
            Sheets("Player Manager").Shapes("Player 2").Visible = True
            
            'Format
            With Sheets("Player Manager").Range("AT1:BT8").Interior
                .Pattern = xlSolid
                .PatternColorIndex = xlAutomatic
                .ThemeColor = xlThemeColorDark1
                .TintAndShade = -4.99893185216834E-02
                .PatternTintAndShade = 0
            End With
            Sheets("Player Manager").Range("AT1:BT8").Borders(xlDiagonalDown).LineStyle = xlNone
            Sheets("Player Manager").Range("AT1:BT8").Borders(xlDiagonalUp).LineStyle = xlNone
            With Sheets("Player Manager").Range("AT1:BT8").Borders(xlEdgeLeft)
                .LineStyle = xlContinuous
                .Color = -13683110
                .TintAndShade = 0
                .Weight = xlMedium
            End With
            With Sheets("Player Manager").Range("AT1:BT8").Borders(xlEdgeTop)
                .LineStyle = xlContinuous
                .Color = -13683110
                .TintAndShade = 0
                .Weight = xlMedium
            End With
            With Sheets("Player Manager").Range("AT1:BT8").Borders(xlEdgeBottom)
                .LineStyle = xlContinuous
                .Color = -13683110
                .TintAndShade = 0
                .Weight = xlMedium
            End With
            With Sheets("Player Manager").Range("AT1:BT8").Borders(xlEdgeRight)
                .LineStyle = xlContinuous
                .Color = -13683110
                .TintAndShade = 0
                .Weight = xlMedium
            End With
            Sheets("Player Manager").Range("AT1:BT8").Borders(xlInsideVertical).LineStyle = xlNone
            Sheets("Player Manager").Range("AT1:BT8").Borders(xlInsideHorizontal).LineStyle = xlNone
        End If
        
        If k < 4 Then
            Sheets("Player Manager").Shapes("Player 3").Visible = False
            Sheets("Player Manager").Shapes("DMGuild").Visible = False
        Else
            Sheets("Player Manager").Shapes("Player 3").Visible = True
            Sheets("Player Manager").Shapes("DMGuild").Visible = True
        End If
        
        'readied encounter hiding
        Sheets("Readied Encounter").Rows("5:" & 14 - 10 + k).EntireRow.Hidden = False
        Sheets("Readied Encounter").Rows(5 + k & ":14").EntireRow.Hidden = True
    End If
    
    Call InitiativePlayers(k)
    
    Calculate
    Application.ScreenUpdating = True
End Sub
Attribute VB_Name = "ReadiedEncounter"
Option Explicit
Public Sub LongRest()
    Dim ResetRange As Range
    Dim Confirm As String
    Dim ELV As Integer
    Dim ELVS As String
    
    Dim i As Integer
    
    If Not ActiveSheet.Name = "Player Manager" Then
        Confirm = MsgBox("Are you sure you would like to allow the PCs to long rest?", vbOKCancel, "Long Rest")
        If Confirm = 2 Then End
    End If
    
    For i = 5 To 14
        Sheets("Readied Encounter").Range("D" & i).Formula = "=C" & i
        
        'Condition rest
        ELVS = Sheets("Readied Encounter").Range("E" & i).Value
        If Not Replace(ELVS, "Exhausted (LV", "") = ELVS And Not ELVS = "Exhausted (LV1)" Then
            ELVS = Replace(ELVS, "Exhausted (LV", "")
            ELVS = Replace(ELVS, ")", "")
            ELV = CInt(ELVS)
            ELV = ELV - 1
            ELVS = "Exhausted (LV" & ELV & ")"
            Sheets("Readied Encounter").Range("E" & i).Value = ELVS
        Else
            Sheets("Readied Encounter").Range("E" & i).Value = ""
        End If
    Next
    
    'clear concentration
    Sheets("Readied Encounter").Range("F5:F14").Value = ""
    
End Sub
Attribute VB_Name = "RunOnStart"
Option Explicit
Sub Auto_Open()
    If CommandBars("Ribbon").Height > 100 Then
       CommandBars.ExecuteMso "MinimizeRibbon"
    End If
    
    Sheets("Player Manager").Select
    Sheets("Player Manager").Range("A1").Select
    Application.DisplayFormulaBar = True
    ActiveWindow.DisplayHeadings = False
    ActiveWindow.DisplayGridlines = False
    ActiveWindow.Zoom = 100
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Attribute VB_Name = "Sheet46"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "Creature01, 21, 30, MSForms, ComboBox"
Option Explicit
Private Sub Creature01_DropButtonClick()
    Creature01.ListFillRange = "CreatureNames"
End Sub
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBox1, 25, 0, MSForms, ComboBox"
Option Explicit
Private Sub ComboBox1_DropButtonClick()
    ComboBox1.ListFillRange = "CreatureNames"
End Sub
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ShowHideRows"
Attribute VB_Base = "0{DFEBE6C6-7C3C-45F0-A98A-48FBB67F9AB9}{08EDCE3C-6DC6-4852-A3DB-3DD1ED6A8C62}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub LST_Rows_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim Header As String
    Dim i, j, k As Integer
    
    Dim dum As Variant
    
    Header = LST_Rows.Value
    k = LST_Rows.ListIndex
    
    i = 17
    Do Until Sheets("Player Manager").Range("A" & i).Value = Header Or Sheets("Player Manager").Range("A" & i).Value = "Stop"
        dum = Sheets("Player Manager").Range("A" & i).Value
        i = i + 1
    Loop
    
    j = i + 1
    Do Until Not Sheets("Player Manager").Range("A" & j).Value = "" Or j - i > 60 Or Sheets("Player Manager").Range("A" & j).Value = "Stop"
        j = j + 1
    Loop
    If Sheets("Player Manager").Range("A" & j).Value = "Stop" Then
        j = j - 3
    Else
        j = j - 1
    End If
    
    If Sheets("Player Manager").Rows(i & ":" & j).Hidden = True Then
        Sheets("Player Manager").Rows(i & ":" & j).Hidden = False
    Else
        Sheets("Player Manager").Rows(i & ":" & j).Hidden = True
    End If
    
    LST_Rows.Clear
    Call GetList
    LST_Rows.ListIndex = k
End Sub

Private Sub GetList()
    Dim RowsX() As Variant
    Dim Reduced() As Variant
    Dim Blacklist(1 To 2) As Variant
    
    Dim i, j, k As Integer
    Dim UbRows, UbBlacklist, UbR As Integer
    Dim TF As Boolean
    
    'get headers
    RowsX() = Sheets("Player Manager").Range("A18:A63").Value
    
    UbRows = UBound(RowsX(), 1)
    
    ReDim Preserve RowsX(1 To UbRows, 1 To 2) As Variant
    
    For i = 1 To UbRows
        If Not RowsX(i, 1) = "" Then
            j = j + 1
        End If
    Next
    
    ReDim Reduced(1 To j, 1 To 2)
    UbR = j
    j = 0
    
    UbBlacklist = UBound(Blacklist(), 1)
    
    'populate the reduced list
    For i = 1 To UbRows
        If Rows(i + 17).Hidden = True And Not RowsX(i, 1) = "" And Not RowsX(i, 1) = Empty Then
            j = j + 1
            Reduced(j, 1) = RowsX(i, 1)
            Reduced(j, 2) = "Hidden"
        ElseIf Not RowsX(i, 1) = "" And Not RowsX(i, 1) = Empty Then
            j = j + 1
            Reduced(j, 1) = RowsX(i, 1)
        Else
            
        End If
        If i = 27 Then
            i = i
        End If
    Next
    
    LST_Rows.ColumnCount = 2
    LST_Rows.list = Reduced()
End Sub

Private Sub UserForm_Initialize()
    Call GetList
    
    LST_Rows.ColumnWidths = "150,15"
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "XanatharsEncounterGenerator"
Option Explicit
Public Sub ClearEncounterX()
    Sheets("Xanathar's Encounter Builder").Range("A34:K63").Value = ""
    
    Call ClearReady
End Sub
'other
Public Function FractionToDecimal(Value As Variant)
    Dim splitit() As String
    
    If IsNumeric(Value) = False Then
        splitit() = Split(Value, "/")
        FractionToDecimal = splitit(0) / splitit(1)
    Else
        FractionToDecimal = Value
    End If
    
End Function
Public Function GetCreaturePlayer(Level As Range, Table As Range)
    Dim i, j, k As Integer
    'Used
    'i
    'Replacable
    'i
    
    Dim PCR() As Variant
    Dim LV As Variant
    Dim Output(1 To 1, 1 To 22)
    
    LV = Level.Value
    If LV = "" Then
        For i = 1 To 22
            Output(1, i) = ""
        Next
    Else
        PCR() = Table.Value
        
        For i = 1 To 22
            If ModX(PCR(LV, i + 1), 1) > 0 Then
                Output(1, i) = WorksheetFunction.Text(PCR(LV, i + 1), "# ?/?")
                Output(1, i) = Right(Output(1, i), Len(Output(1, i)) - 1)
            Else
                Output(1, i) = PCR(LV, i + 1)
            End If
        Next
    End If
    
    GetCreaturePlayer = Output()
    
End Function

Private Function ModX(a As Variant, b As Variant)
    ModX = a - (b * Fix(a \ b))
End Function


' InQuest injected base64 decoded content
' y8kz

INQUEST-PP=macro
