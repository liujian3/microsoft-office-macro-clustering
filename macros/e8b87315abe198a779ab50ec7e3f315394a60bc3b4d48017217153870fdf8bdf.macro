Attribute VB_Name = "ModF9Conversion"
Option Explicit
Private p_sCapBuff As String
Private p_sBSPEC As String
Private p_sToken As String
Private p_sValue As String
Private p_iSearch As Integer
Private p_iStart As Integer
Private p_iComma As Integer
Private p_iLoop As Integer
Private p_iEnd As Long
Const P_ILAST = 6
Private p_sVal(1, P_ILAST) As String
Private p_sData(12) As String
Private p_sMonths(12) As String
Const P_INUMPERIODTST = 5
Private p_sPeriods(P_INUMPERIODTST) As String
Private p_iPeriods(P_INUMPERIODTST) As Integer
Private p_iPCount As Long
Private p_iDataStr As Long
Private p_iDataEnd As Long
Private p_iSegmentNum As Long
Private p_sParams As String
Private p_sCompSave As String
Private r_ExcWorkSheet As Excel.Worksheet
Private r_ExcRange As Excel.Range
Private fCompanyNotOpen As Boolean
Const r_oms25 = """oms25"""
Const r_bedrnm = """bedrnm"""
Const r_sDblQuote = """"

Private Sub Fillp_LstTerms()
  For p_iStart = 0 To P_ILAST
    Select Case p_iStart
      Case 0
        p_sVal(0, p_iStart) = "BSPEC("
        p_sVal(1, p_iStart) = ""
      Case 1
        p_sVal(0, p_iStart) = "=NGL("
        p_sVal(1, p_iStart) = "-GL_BAL("
      Case 2
        p_sVal(0, p_iStart) = "=GL("
        p_sVal(1, p_iStart) = "GL_BAL("
      Case 3
        p_sVal(0, p_iStart) = "=SDESC("
        p_sVal(1, p_iStart) = "CU_DATA("
      Case 4
        p_sVal(0, p_iStart) = "=DESC("
        p_sVal(1, p_iStart) = "ACC_DATA("
      Case 5
        p_sVal(0, p_iStart) = "CODATA("
        p_sVal(1, p_iStart) = "CO_DATA("
      Case 6
        p_sVal(0, p_iStart) = "GLTRAN("
        p_sVal(1, p_iStart) = "GL_BAL_DATE("
      Case Else
    End Select
  Next p_iStart
  
  For p_iStart = 1 To 12
    'no MonthName in 8.0
    p_sMonths(p_iStart) = UCase$(Format$(p_iStart, "mmmm")) 'MonthName(p_iStart))
  Next p_iStart
  
  p_sPeriods(1) = "THIS MONTH"
  p_iPeriods(1) = Month(Now)
  p_sPeriods(2) = "PRIOR MONTH"
  
  If p_iPeriods(1) = 1 Then
    p_iPeriods(2) = 12
  Else
    p_iPeriods(2) = p_iPeriods(1) - 1
  End If
  
  p_sPeriods(3) = "YEAR"
  p_iPeriods(3) = Year(Now)
  p_sPeriods(4) = "LAST YEAR"
  p_iPeriods(4) = Year(Now) - 1
  p_sPeriods(5) = "PREVIOUS YEAR"
  p_iPeriods(5) = Year(Now) - 1
End Sub

Function ConvertF9XL(r_xlRange As Excel.Range) As Boolean
  Dim p_bTSOFnd As Boolean
  Dim p_bBSPECFnd As Boolean
  Dim p_bGLFnd As Boolean
  Dim p_bDescFnd As Boolean
  Dim p_bAnyChanges As Boolean
  Dim p_sFunc As String
  On Error GoTo Err_Handlr
  p_bAnyChanges = False
  If r_xlRange.HasFormula Then
    p_sCapBuff = r_xlRange.Formula
    p_bBSPECFnd = False
    p_bGLFnd = False
    p_bDescFnd = False
    For p_iStart = 0 To P_ILAST
      p_iSearch = InStr(1, p_sCapBuff, p_sVal(0, p_iStart), vbBinaryCompare)
      If p_iSearch > 0 Then
        p_iEnd = InStr(p_iSearch, p_sCapBuff, ")")
        'Debug.Print "Match Formula= " & r_xlRange.Formula
        If p_iEnd > 0 Then
         Select Case p_iStart
          Case 0 'BSPEC
            p_bBSPECFnd = True
            p_sBSPEC = Mid$(p_sCapBuff, p_iSearch + Len(p_sVal(0, p_iStart)), p_iEnd - p_iSearch - Len(p_sVal(0, p_iStart)))
            'Determine if TSO is present
            p_iComma = InStr(1, p_sBSPEC, ",")
            p_bTSOFnd = False
            If p_iComma > 0 Then
              p_sToken = Mid$(p_sBSPEC, 1, p_iComma - 1)
              If InStr(p_sToken, """") Then
                'Use value
                If InStr(p_sToken, "-") Then
                  'TSO FOUND, Set a flag and do not add it
                  p_bTSOFnd = True
                End If
              Else
                p_sValue = r_ExcWorkSheet.Range(p_sToken, p_sToken).value
                If InStr(p_sValue, "-") Then
                  'TSO FOUND, Set a flag and do not add it
                  p_bTSOFnd = True
                End If
              End If
              If p_bTSOFnd Then
                p_sBSPEC = Mid$(p_sBSPEC, p_iComma + 1)
              End If
              Call ParsebSpec(p_sBSPEC)
            End If
          Case 1, 2, 6 'Ngl or Gl GLTran
             p_sFunc = p_sVal(1, p_iStart)
             p_bGLFnd = True
             If p_bBSPECFnd Then
                p_sFunc = p_sFunc & p_sBSPEC
             Else 'No bspec, so get first token
                p_iEnd = InStr(p_iSearch, p_sCapBuff, ")")
                p_sBSPEC = Mid$(p_sCapBuff, p_iSearch + Len(p_sVal(0, p_iStart)), p_iEnd - p_iSearch - Len(p_sVal(0, p_iStart)))
                p_iComma = InStr(1, p_sBSPEC, ",")
                If p_iComma > 0 Then
                  p_sFunc = p_sFunc & Mid$(p_sBSPEC, 1, p_iComma - 1) & "," & r_sDblQuote & r_sDblQuote _
                  & "," & r_sDblQuote & r_sDblQuote
                End If
                p_iEnd = InStr(1, p_sCapBuff, ",")
                If p_iEnd > 0 Then
                  p_iEnd = p_iEnd - 1
                End If
             End If
             p_sParams = Mid$(p_sCapBuff, p_iEnd + 1)
             p_iPCount = 0
             p_iDataEnd = InStr(1, p_sParams, ",")
             p_iDataStr = p_iDataEnd
             While p_iDataEnd > 0
               If p_iDataEnd > 1 Then
                  p_sData(p_iPCount) = Mid$(p_sParams, p_iDataStr + 1, p_iDataEnd - p_iDataStr - 1)
                  If p_iPCount = 0 Then
                    CheckPeriod p_sData(p_iPCount), 0
                  End If
                  p_iPCount = p_iPCount + 1
                End If
                p_iDataStr = p_iDataEnd
                p_iDataEnd = InStr(p_iDataEnd + 1, p_sParams, ",")
                If p_iDataEnd = 0 Then
                  p_iDataEnd = InStr(p_iDataStr + 1, p_sParams, ")")
                End If
            Wend
           ' p_sFunc = p_sVal(1, p_iStart) & p_sBSPEC ' & Mid$(p_sCapBuff, p_iEnd + 1)
            If p_iPCount > 0 Then
              If p_bBSPECFnd Then
                If p_iPCount > 4 Then
                  p_iPCount = 4
                End If
              End If
              For p_iDataStr = 0 To p_iPCount - 1
                'Need to flip them
                'Period       Company
                'Company      Year
                'Year         Period
                'Type         Balance Type
                'Currency     (Remove)
                'Topic        (Remove)
                p_iDataEnd = p_iDataStr
                'If p_bBSPECFnd Then
                  Select Case p_iDataStr
                    Case 0
                      If p_iPCount > 1 Then
                        p_iDataEnd = 1
                      End If
                    Case 1
                      If p_iPCount > 2 Then
                        p_iDataEnd = 2
                      End If
                    Case 2
                      p_iDataEnd = 0
                    Case 3
                      p_iDataEnd = 3
                  End Select
                'End If
                p_sFunc = p_sFunc & "," & p_sData(p_iDataEnd)
              Next p_iDataStr
              p_sFunc = p_sFunc & ")"
            End If
          Case 3, 4 'Sdesc, Desc
            p_bDescFnd = True
            p_sFunc = p_sVal(1, p_iStart)
            p_sParams = Mid$(p_sCapBuff, p_iEnd + 1)
            '=ACC_DATA("     1005",-1,"oms25")
            '=CC_DATA("100CS000",-1,"oms25")
            '=CU_DATA("1000",-1,"oms25")
            If p_bBSPECFnd Then
              p_iDataEnd = InStr(1, p_sBSPEC, ",")
              If p_iStart = 4 Then 'Desc
                If p_iDataEnd > 0 Then
                  p_sToken = Mid$(p_sBSPEC, 1, p_iDataEnd - 1)
                Else
                  p_sToken = p_sBSPEC
                End If
                p_sFunc = p_sFunc & p_sToken
                p_iDataEnd = InStr(2, p_sParams, ",")
                If p_iDataEnd > 0 Then
                  p_sToken = Mid$(p_sParams, 1, p_iDataEnd - 1)
                Else
                  p_sToken = p_sParams
           '       Debug.Print Mid$(p_sToken, Len(p_sToken), 1)
                  If Mid$(p_sParams, Len(p_sParams), 1) = ")" Then
                    p_sToken = Left$(p_sParams, Len(p_sParams) - 1)
                  End If
                End If
                p_sFunc = p_sFunc & p_sToken
              Else 'SDesc needs to find out which one ?
                p_iPCount = 0
                p_iDataEnd = InStr(1, p_sParams, ",")
                p_iDataStr = p_iDataEnd
                While p_iDataEnd > 0
                   If p_iDataEnd <> p_iDataStr Then
                     p_sData(p_iPCount) = Mid$(p_sParams, p_iDataStr + 1, p_iDataEnd - p_iDataStr - 1)
                     p_iPCount = p_iPCount + 1
                   End If
                   p_iDataStr = p_iDataEnd
                   p_iDataEnd = InStr(p_iDataEnd + 1, p_sParams, ",")
                   If p_iDataEnd = 0 Then
                     p_iDataEnd = InStr(p_iDataStr + 1, p_sParams, ")")
                   End If
                Wend
                p_iSegmentNum = 1
                If p_iPCount > 0 Then
                  p_iSegmentNum = SDescSegment(p_sData(0))
                  p_sCompSave = p_sData(1)
                Else
                  p_sCompSave = "-1"
                End If
                Select Case p_iSegmentNum
                  Case 2
                    p_sFunc = "CU_DATA("
                  Case 3
                    p_sFunc = "CC_DATA("
                  Case Else
                    p_sFunc = "ACC_DATA("
                End Select
                p_iPCount = 0
                p_iDataEnd = InStr(1, p_sBSPEC, ",")
                p_iDataStr = p_iDataEnd
                While p_iDataEnd > 0
                   If p_iDataEnd = p_iDataStr Then
                     p_sData(p_iPCount) = Mid$(p_sBSPEC, 1, p_iDataEnd - 1)
                   Else
                     p_sData(p_iPCount) = Mid$(p_sBSPEC, p_iDataStr + 1, p_iDataEnd - p_iDataStr - 1)
                   End If
                   p_iPCount = p_iPCount + 1
                   p_iDataStr = p_iDataEnd
                   p_iDataEnd = InStr(p_iDataEnd + 1, p_sBSPEC, ",")
                   If p_iDataEnd = 0 Then
                     p_sData(p_iPCount) = Mid$(p_sBSPEC, p_iDataStr + 1)
                   End If
                Wend
                If p_iPCount > 0 Then
                  p_sToken = p_sData(p_iSegmentNum - 1)
                Else
                  p_sToken = p_sBSPEC
                End If
                p_sFunc = p_sFunc & p_sToken & "," & p_sCompSave
              End If 'SDesc with bspec
            Else 'no bspec
              p_iDataEnd = InStr(1, p_sCapBuff, "(")
              p_sParams = Mid$(p_sCapBuff, p_iDataEnd + 1)
              p_iPCount = 0
              p_iDataEnd = InStr(1, p_sParams, ",")
              p_iDataStr = p_iDataEnd
              While p_iDataEnd > 0
                If p_iDataEnd = p_iDataStr Then
                  p_sData(p_iPCount) = Mid$(p_sParams, 1, p_iDataEnd - 1)
                Else
                  p_sData(p_iPCount) = Mid$(p_sParams, p_iDataStr + 1, p_iDataEnd - p_iDataStr - 1)
                End If
                p_iPCount = p_iPCount + 1
                p_iDataStr = p_iDataEnd
                p_iDataEnd = InStr(p_iDataEnd + 1, p_sParams, ",")
                If p_iDataEnd = 0 Then
                  p_iDataEnd = InStr(p_iDataStr + 1, p_sParams, ")")
                End If
              Wend
              If p_iStart = 4 Then 'Desc no bspec
                p_sFunc = p_sFunc & p_sData(0) & "," & p_sData(1)
              Else 'Sdesc no bspec
                p_iSegmentNum = SDescSegment(p_sData(1))
                Select Case p_iSegmentNum
                  Case 2
                    p_sFunc = "CU_DATA("
                  Case 3
                    p_sFunc = "CC_DATA("
                  Case Else
                    p_sFunc = "ACC_DATA("
                End Select
                p_sFunc = p_sFunc & p_sData(0) & "," & p_sData(2)
              End If
            End If
            p_sFunc = p_sFunc & "," & r_oms25 & ")"
          Case 5 'CODATA
            p_bDescFnd = True
            p_sFunc = p_sVal(1, p_iStart) & "-1," & r_bedrnm & ")"
'                    Case 6 'GLTRAN
         End Select
        End If
      End If
    Next p_iStart
  'r_xlRange.Formula = "=a1"
    If p_bGLFnd Or p_bDescFnd Then
      p_bAnyChanges = True
'      Debug.Print r_xlRange.Formula & " =" & p_sFunc
      r_xlRange.Formula = "=" & p_sFunc
'        Debug.Print r_xlRange.Formula
    End If
  End If 'Has formula
  Exit Function
Err_Handlr:
  Debug.Print "ConvertF9XL Err>" & Err.Description, Err.Number, p_sCapBuff
  Resume Next
End Function

Sub CheckPeriod(r_sLocation As String, r_iType As Integer)
  Dim p_iMloop As Integer
  Dim p_sValue As String
  Dim p_bCellFnd As Boolean
  Dim p_bStarFnd As Boolean
  On Error GoTo Err_Handlr
    If InStr(r_sLocation, "&") Then Exit Sub
    If r_ExcWorkSheet.Range(r_sLocation).HasFormula Then
    Else
      p_sValue = r_ExcWorkSheet.Range(r_sLocation).value
      Select Case r_iType
      Case 0
        If Len(p_sValue) > 0 Then
          p_sValue = UCase$(p_sValue)
 '        Debug.Print p_sValue
          For p_iMloop = 1 To 12
            If p_sValue = p_sMonths(p_iMloop) Then
              r_ExcWorkSheet.Range(r_sLocation).value = p_iMloop
              Exit Sub
            End If
          Next p_iMloop
          For p_iMloop = 1 To P_INUMPERIODTST
            If p_sValue = p_sPeriods(p_iMloop) Then
              r_ExcWorkSheet.Range(r_sLocation).value = p_iPeriods(p_iMloop)
              Exit Sub
            End If
          Next p_iMloop
'       Debug.Print r_ExcWorkSheet.Range(r_sLocation).Value
        End If
      Case 1
          p_bCellFnd = False
          p_iDataEnd = InStr(p_sValue, "..")
          If p_iDataEnd > 0 Then
            p_sValue = Mid$(p_sValue, 1, p_iDataEnd - 1) & ":" & Mid$(p_sValue, p_iDataEnd + 2)
            p_bCellFnd = True
          End If
          If p_sValue = "*" Then
            p_sValue = ""
            p_bCellFnd = True
          End If
          'Wildcard replace
          p_iDataEnd = InStr(p_sValue, "*")
          p_bStarFnd = False
          While p_iDataEnd > 0
            p_sValue = Left$(p_sValue, p_iDataEnd - 1) & "%" & Mid$(p_sValue, p_iDataEnd + 1)
            p_iDataEnd = InStr(p_sValue, "*")
            p_bCellFnd = True
            p_bStarFnd = True
          Wend
          p_iDataEnd = InStr(p_sValue, "?")
          While p_iDataEnd > 0
            p_sValue = Left$(p_sValue, p_iDataEnd - 1) & "_" & Mid$(p_sValue, p_iDataEnd + 1)
            p_iDataEnd = InStr(p_sValue, "?")
            p_bCellFnd = True
          Wend
          If p_bCellFnd Then 'Set Cell value
            If p_bStarFnd Then
              If Left$(p_sValue, 1) <> "'" Then
                p_sValue = "'%" & p_sValue
              Else
                p_sValue = "%" & p_sValue
              End If
            End If
            r_ExcWorkSheet.Range(r_sLocation).value = p_sValue
          End If
      Case Else
      End Select
    End If
  Exit Sub
Err_Handlr:
  'Debug.Print "CheckPeriod Err>" & Err.Description, Err.Number
  Exit Sub
End Sub

Sub ParsebSpec(r_sbSpec As String)
  Dim p_iToken As Integer
  Dim p_iStr As Integer
  Dim p_sToken As String
  On Error GoTo Err_Handlr
  p_iToken = InStr(1, r_sbSpec, ",")
  p_iStr = 1
  While p_iToken > 0
    p_sToken = Mid(r_sbSpec, p_iStr, p_iToken - p_iStr)
    Call CheckPeriod(p_sToken, 1)
    p_iStr = p_iToken + 1
    p_iToken = InStr(p_iToken + 1, r_sbSpec, ",")
    If p_iToken = 0 Then
      p_sToken = Mid(r_sbSpec, p_iStr)
      Call CheckPeriod(p_sToken, 1)
    End If
  Wend
  Exit Sub
Err_Handlr:
  Debug.Print "ParsebSpec Err>" & Err.Description, Err.Number
  Exit Sub
End Sub

Private Function SDescSegment(r_sSegment As String) As Integer
  Dim retval As Integer
  Dim Startval As Integer
  Dim p_sSeg As String
  retval = InStr(1, r_sSegment, """")
  If retval = 0 Then 'Allow for " or no " of the segment number
    p_sSeg = r_sSegment
  Else
    p_sSeg = ""
    Startval = retval
    While retval > 0
      If Startval <> retval Then
        p_sSeg = p_sSeg & Mid$(r_sSegment, Startval + 1, retval - Startval - 1)
      End If
      Startval = retval
      retval = InStr(retval + 1, r_sSegment, """")
    Wend
  End If
  retval = Val(p_sSeg)
  If retval < 1 Or retval > 3 Then
    retval = 1
  End If
  SDescSegment = retval
End Function

Private Sub F9ConvertWorksheet(ByVal ws As Excel.Worksheet)
    Dim formulas As Range, nCount As Long
    Dim sFormula As String, nOffsID As Long, nLenID As Long, nOffsRep As Long, nLenRep As Long
    On Error Resume Next
    Dim sSheetName As String
    sSheetName = "Worksheet" & " " & ws.Name & ": "
    sSheetName = g_App.Term.String(12802, "Worksheet") & " " & ws.Name & ": "
    On Error GoTo NoFormulas
    Set formulas = ws.Cells.SpecialCells(xlCellTypeFormulas)
    fCompanyNotOpen = False
    On Error GoTo EndPass1
    nCount = 0
    Fillp_LstTerms
    For Each r_ExcRange In formulas
        nCount = nCount + 1
        'Application.StatusBar = sSheetName & g_App.Term.String(10560, "Checking...") & " (" & ((nCount * 100) \ formulas.Cells.Count) & "%)"
        Application.StatusBar = sSheetName & "Checking..." & " (" & ((nCount * 100) \ formulas.Cells.Count) & "%)"
        'sFormula = r_ExcRange.Formula
        If ConvertF9XL(r_ExcRange) Then
        End If
    Next r_ExcRange
EndPass1:
    'Application.StatusBar = sSheetName & g_App.Term.String(9081, "Converting...") & " (100%)"
    Application.StatusBar = sSheetName & "Converting..." & " (100%)"
Failed:
    Application.StatusBar = ""
    Exit Sub
CantSetFormula:
    'If err.Number = 1004 Then Resume ContinuePass2
    GoTo Failed
NoFormulas:
End Sub


Public Sub F9ConvertWorkbook(ByVal wb As Excel.Workbook)
    Dim nOldCalculation As Long, fOldScreenUpdating As Boolean, fCalculate As Boolean
    nOldCalculation = Application.Calculation
    fOldScreenUpdating = Application.ScreenUpdating
    Application.Calculation = xlCalculationManual
    Application.ScreenUpdating = False
    p_bRunningUpdate = True
    For Each r_ExcWorkSheet In wb.Worksheets
        F9ConvertWorksheet r_ExcWorkSheet
    Next r_ExcWorkSheet
    p_bRunningUpdate = False
    Application.Calculation = nOldCalculation
    Application.ScreenUpdating = fOldScreenUpdating
End Sub


Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Option Explicit
   
   
  
Private Sub Workbook_AddinInstall()
    InstallCommandBars
End Sub

Private Sub Workbook_AddinUninstall()
    UninstallCommandBars
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    CleanSession
End Sub

Private Sub Workbook_Open()
    UpdateCommandBars
    CreateSession
    CheckRights
End Sub

Public Sub AddIn_OnInformation()
    Application.EnableCancelKey = xlDisabled
    Dim frm As New frmInformation
    frm.Show
End Sub

Public Sub AddIn_OnGenerate()
    Application.EnableCancelKey = xlDisabled
    On Error GoTo Failed
    If Not ActiveWorkbook Is Nothing Then
        If ActiveWorkbook.ActiveSheet.ProtectContents Then
            MsgBox g_App.Term.String(32672, "The worksheet is protected")
        ElseIf TestDefaultConnection Then
            Dim conn As IExlConnection: Set conn = g_Ses.Connection(g_Ses.DefaultID)
            Do While g_Ses.AvailableWizards(conn).Count = 0
                Call ShowNoRightsMessage
                Set conn = g_Ses.CreateConnection
                If conn Is Nothing Then Exit Do
            Loop
            If Not conn Is Nothing Then
                g_Ses.DefaultID = conn.ID
                'BR25.858.537
                'Set Default Company object in order to display customize term correctly
                g_Ses.ExactApplication.DefaultCompany = conn.Company
                Dim frm As New frmGenerate
                frm.Show
            End If
        End If
    End If
Failed:
End Sub

Public Sub AddIn_OnHelp()
    Application.EnableCancelKey = xlDisabled
    On Error GoTo Failed
    If Not ActiveWorkbook Is Nothing Then
        g_App.Term.ShowHelp 0, "", "S0165"
    End If
Failed:
End Sub

Public Sub AddIn_OnWizard()
On Error GoTo ErrorHandler


    Application.EnableCancelKey = xlDisabled
    
    If Not ActiveWorkbook Is Nothing Then
        If ActiveWorkbook.ActiveSheet.ProtectContents Then
            MsgBox g_App.Term.String(32672, "The worksheet is protected")
        Else
            Dim sWizard As String
            sWizard = Application.CommandBars.ActionControl.Parameter
            
            If TestWizardReport(sWizard) Then
                If TestAvailableWizardConnections(sWizard) Then
                    Dim frm As New frmGenerate
                    frm.SetWizard sWizard
                    On Error Resume Next
                    frm.Show
                    On Error GoTo 0
                    Set frm = Nothing
                    
                'ElseIf g_Ses.Company(g_Ses.DefaultID).GetOpt(590) Then
                '    MsgBox "Report cannot be generated with license option 590."
                
                ElseIf Not IsEmpty(g_Ses.DefaultID) Then
                    Call ShowNoRightsMessage
                End If
            Else
                MsgBox g_App.Term.String(32710, "This wizard is not allowed here")
            End If
        End If
    End If
    
Exit Sub
ErrorHandler:
    Err.Source = "ThisWorkbook::AddIn_OnWizard"
    Call ProcessError(Err)
End Sub

Public Sub AddIn_OnRefresh()
On Error GoTo Failed


    Application.EnableCancelKey = xlErrorHandler
    Application.ScreenUpdating = False
    
    RunMacro ActiveWorkbook, "OnRefreshInitialize"
    RunMacro ActiveWorkbook, "OnRefreshBeforeReports"
    
    Call RefreshReports(ActiveWorkbook)
    
    RunMacro ActiveWorkbook, "OnRefreshAfterReports"
    RunMacro ActiveWorkbook, "OnRefreshBeforeFormulas"
    
    Application.StatusBar = g_App.Term.String(17959, "Calculating...")
    Select Case Application.Version
        'BR24.596.391 - ngwa112107: Add refresh support for Office 2007
        'BR35.518.630 - Add refresh support for office 2010 (14.0)
        Case "9.0", "10.0", "11.0", "12.0", "14.0" 'Office: (2000,XP,2003,2007)
            Application.CalculateFull
        'End:BR24.596.391
        Case "8.0"  'Office 97
            Application.Calculate
        Case Else   'Others
            Application.Calculate
    End Select
    
    RunMacro ActiveWorkbook, "OnRefreshAfterFormulas"
    RunMacro ActiveWorkbook, "OnRefreshBeforePivots"
    UpdatePivotTables ActiveWorkbook
    RunMacro ActiveWorkbook, "OnRefreshAfterPivots"
    Application.ScreenUpdating = True
    Application.StatusBar = ""


Exit Sub
Failed:
    If Err.Number = 18 Then 'User interrupt
        If MsgBox(g_App.Term.String(18944, "Are you sure you want to cancel?"), vbOKCancel) = vbCancel Then Resume
    End If
    Application.ScreenUpdating = True
    Application.StatusBar = ""
End Sub

Public Sub AddIn_OnUpdate()
    Application.EnableCancelKey = xlDisabled
    On Error GoTo Failed
    If Not ActiveWorkbook Is Nothing Then
        Dim rep As exl.IExlReport
        Dim v As esl.ValueSet
        Dim bIsCustom   As Boolean
        
        'AT[]
        bIsCustom = IsCustomAddIn(rep, v)
        If Not bIsCustom Then
            Set rep = g_Ses.Reports(ActiveWorkbook)(ActiveCell)
        End If
        
        If Not rep Is Nothing Then
            Set v = rep.value
            Dim conn As exl.IExlConnection
            Set conn = g_Ses.Connection(v.value("System.Company"))
            If Not conn Is Nothing Then
                If Not conn.Connected Then
                    conn.Reconnect
                End If
                If conn.Connected Then
                    Dim fh As IFunctionHandler
                    Set fh = g_Ses.Company(conn.ID)
                    'Check rights
                    If fh.Function("00000000043").Enabled Then
                        If bIsCustom Then
                            Dim eCusAddIn   As CustomAddIn
                            Set eCusAddIn = New CustomAddIn
                            g_App.ConnectObject eCusAddIn, conn.Company, g_App.Term
                            Call eCusAddIn.BeginUpdate(rep)
                        Else
                            Dim frm As New frmUpdate
                            If frm.Initialize(conn, rep, v) Then
                                frm.Show
                            End If
                        End If
                    Else
                        Call ShowNoRightsMessage
                    End If
                End If
            End If
        End If
    End If
Failed:
End Sub

Public Sub AddIn_OnConvert()
    Application.EnableCancelKey = xlDisabled
    On Error GoTo Failed
    If Not ActiveWorkbook Is Nothing Then
        ConvertWorkbook ActiveWorkbook
    End If
Failed:
End Sub

Public Sub AddIn_OnSearchMenu()
    Application.EnableCancelKey = xlDisabled
    On Error GoTo Failed
    If Not ActiveWorkbook Is Nothing Then
        If TestDefaultConnection Then
            If CheckLicense Then
                'BR17.153.122 foon36643: This need to make sure user need not to re-add in the target
                If Application.CommandBars.ActionControl.Parameter = "artgrp" Then
                    Application.CommandBars.ActionControl.Parameter = "itemassortment"
                End If
                
                If TestAvailableSearch(g_Ses.DefaultID, Application.CommandBars.ActionControl.Parameter) Then
                    Dim frm As New frmSearch
                    frm.SetTable Application.CommandBars.ActionControl.Parameter
                    frm.Show
                Else
                    Call ShowNoRightsMessage
                End If
            End If
        End If
    End If
Failed:
End Sub

Public Sub AddIn_OnSearchButton()
    Application.EnableCancelKey = xlDisabled
    On Error GoTo Failed
    If Not ActiveWorkbook Is Nothing Then
        If TestDefaultConnection() Then
            If CheckLicense() Then
                Dim conn As IExlConnection: Set conn = g_Ses.Connection(g_Ses.DefaultID)
                Do While TestAvailableSearch(conn.ID) = False
                    Call ShowNoRightsMessage
                    Set conn = g_Ses.CreateConnection
                    If conn Is Nothing Then Exit Do
                Loop
                If Not conn Is Nothing Then
                    g_Ses.DefaultID = conn.ID
                    Dim frm As New frmSearch
                    frm.Show
                End If
            End If
        End If
    End If
Failed:
End Sub

Public Sub AddIn_OnFunction()
    Application.EnableCancelKey = xlDisabled
    On Error GoTo Failed
    If Not ActiveWorkbook Is Nothing Then
        If ActiveWorkbook.ActiveSheet.ProtectContents And ActiveCell.Locked Then
            MsgBox g_App.Term.String(32672, "The worksheet is protected")
        Else
            If Not ActiveCell.HasFormula Then
                ExactFunctionWizard
            ElseIf IsExactFunction(ActiveCell.Formula) Then
                ExactFunctionWizard
            Else
                Application.Dialogs(xlDialogFunctionWizard).Show
            End If
        End If
    End If
Failed:
End Sub

Public Sub AddIn_OnPasteFunction()
    Application.EnableCancelKey = xlDisabled
    On Error GoTo Failed
    If Not ActiveWorkbook Is Nothing Then
        If ActiveWorkbook.ActiveSheet.ProtectContents And ActiveCell.Locked Then
            MsgBox g_App.Term.String(32672, "The worksheet is protected")
        Else
            If Not ActiveCell.HasFormula Then
                Application.Dialogs(xlDialogFunctionWizard).Show
            ElseIf IsExactFunction(ActiveCell.Formula) Then
                ExactFunctionWizard
            Else
                Application.Dialogs(xlDialogFunctionWizard).Show
            End If
        End If
    End If
Failed:
End Sub

Public Sub AddIn_OnAbout()
    Application.EnableCancelKey = xlDisabled
    Dim conn As exl.IExlConnection, cmp As esl.Company, obAbout As clsAbout
    On Error GoTo Failed
    Set conn = g_Ses.Connection(g_Ses.DefaultID)
    If Not conn Is Nothing Then Set cmp = conn.Company
    Set obAbout = New clsAbout
    obAbout.Initialize g_App, cmp, g_App.Term
    obAbout.Show g_Ses.hWnd, g_App.Term.String(10011, "About")
Failed:
End Sub

Public Sub AddIn_OnStartExcel(ByVal sValue As String)
On Error GoTo ErrorHandler

    Application.EnableCancelKey = xlDisabled
    DoEvents
    Call StartFromShell(g_Glob.Expand(sValue))
    
    
Exit Sub
ErrorHandler:
    Err.Source = "ThisWorkbook::AddIn_OnStartExcel"
    Call ProcessError(Err)
End Sub

Public Sub AddIn_OnF9Convert()
    Application.EnableCancelKey = xlDisabled
    On Error GoTo Failed
    If Not ActiveWorkbook Is Nothing Then
        F9ConvertWorkbook ActiveWorkbook
    End If
Failed:
End Sub

Attribute VB_Name = "clsAbout"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Option Explicit

Private m_App As esl.Application
Private m_comp As esl.Company
Private m_Term As esl.ITranslator
Private m_State As esl.ISlicState
Private WithEvents m_Slic As slui.ProxySlic
Attribute m_Slic.VB_VarHelpID = -1



Private Declare Function ReleaseDC Lib "user32" (ByVal hWnd As Long, ByVal hDC As Long) As Long
Private Declare Function GetDeviceCaps Lib "gdi32" (ByVal hDC As Long, ByVal nIndex As Long) As Long
Private Const LOGPIXELSX = 88        '  Logical pixels/inch in X

' Start generated section
' Script E:\Voyager\rtm\e4shell.exe\About.cls generated by EditSlic version 1.0 on Wed Jan 17 16:31:30 2001

Private Function GetAboutSlic() As String
    Dim s As String

    s = _
"form(2) {" & _
"      component(""pictLogo"", Picture) {" & _
"       AllowRowMargin = 0" & _
"       ResourceName16 = ""-4""" & _
"       SlicAlignment = 1" & _
"       SlicParameters = ""!0""" & _
"       TopMargin = 22" & _
"       Type = 2" & _
"      }" & _
"      component(""pictLogo"", Picture) {" & _
"       AllowRowMargin = 0" & _
"       BottomMargin = 7" & _
"       SlicAlignment = 1" & _
"       SlicParameters = ""0""" & _
"       TopMargin = 8" & _
"       Type = 2" & _
"      }" & _
"      component(""pictBanner"", Picture) {" & _
"       BottomMargin = 30" & _
"       ResourceName8 = ""-3""" & _
"       SlicAlignment = 1" & _
"       Type = 2"
    s = s & _
"      }" & _
"      component(""fipProduct"", Fip) {" & _
"       Caption = ""Product""" & _
"       CaptionAlignment = 1" & _
"       CaptionTermID = 15370" & _
"       Indications = 0" & _
"       StyleFlags = 5" & _
"      }" & _
"      component(""fipVersion"", Fip) {" & _
"       Caption = ""Version""" & _
"       CaptionAlignment = 1" & _
"       CaptionTermID = 3823" & _
"       Indications = 0" & _
"       StyleFlags = 5" & _
"      }" & _
"      component(""fipInternalVersion"", Fip) {" & _
"       Caption = ""Database version""" & _
"       CaptionAlignment = 1" & _
"       CaptionTermID = 32390" & _
"       Indications = 0" & _
"       StyleFlags = 5" & _
"      }"
    s = s & _
"      component(""fipLicenseName"", Fip) {" & _
"       Caption = ""License name""" & _
"       CaptionAlignment = 1" & _
"       CaptionTermID = 1715" & _
"       SlicParameters = ""C""" & _
"       StyleFlags = 5" & _
"      }" & _
"      component(""fipLicenseType"", Fip) {" & _
"       Caption = ""License type""" & _
"       CaptionAlignment = 1" & _
"       CaptionTermID = 27427" & _
"       Indications = 0" & _
"       SlicParameters = ""C""" & _
"       StyleFlags = 5" & _
"      }" & _
"      component(""fipSerial"", Fip) {" & _
"       Caption = ""License number""" & _
"       CaptionAlignment = 1" & _
"       CaptionTermID = 6716" & _
"       Indications = 0" & _
"       SlicParameters = ""C""" & _
"       StyleFlags = 5"
    s = s & _
"      }" & _
"      button(""btnOK"") {" & _
"       ActionType = 512" & _
"       IsCancel = 1" & _
"       Caption = ""&OK""" & _
"       CaptionTermID = 921" & _
"       IsDefault = 1" & _
"      }" & _
"}"
    GetAboutSlic = s
End Function
' End generated section

Public Sub Show(hWnd As Long, sAboutExact As String)
    Dim dlg As SlicDialog
    Dim f As ProxyFip
    Dim frm As esl.SlicForm
    Dim lic As esl.License

    Set lic = m_comp
    Set dlg = New esl.SlicDialog
    m_App.ConnectObject dlg, m_comp, m_Term
    dlg.Title = sAboutExact
    dlg.Script = GetAboutSlic
    dlg.Parameters = m_App.Appearance & IIf(lic Is Nothing, "", "C")
    dlg.Load hWnd, slfNone
    Set m_State = dlg.SlicState
    Set m_Slic = m_State.Proxy("")

    ' For excellent logo right aligned at the correct spot
    ' TODO?: Hans should make the margins in the same coordinate system as the picturewidth
    Dim l As Long, hDC As Long
    l = m_State.Proxy("pictBanner").PictureWidth - m_State.Proxy("pictLogo").PictureWidth
    hDC = GetDC(m_Slic.hWnd)
    m_State.Proxy("pictLogo").LeftMargin = l * GetDeviceCaps(hDC, LOGPIXELSX) / 2540
    ReleaseDC m_Slic.hWnd, hDC

    'BR18.990.689 foon36643:Wrong menu bar name for Other Products (e.g. Cubic Pro, Grote Beer)
    'Solution: Determine the product group based on Icon2003T?.dll
    Dim i As Integer
    Dim sBrand As String
    For i = 12 To 0 Step -1
        sBrand = "Icon2003T" & i
        If Dir(m_App.Environment.BinariesPath(sBrand, "dll")) <> "" Then
            m_App.Appearance = i
            Exit For
        End If
    Next
    With m_App.Environment.VersionInfo
        'BR17.864.877 foon36643: Get value from settings
'        Dim m_sMenuName As String
'        m_sMenuName = GetSetting("EG2000WordAddIn", "Start", "MenuBarName", "")
'        If m_sMenuName = "" Then
'            Dim tempApp As esl.Application
'            Set tempApp = g_App
'            If tempApp Is Nothing Then
'                Set tempApp = New esl.Application
'            End If
'            m_sMenuName = tempApp.Environment.VersionInfo.CommercialName
'        End If

        m_State.Proxy("fipProduct").value = .CommercialName
        m_State.Proxy("fipProduct").DimLength = Len(.CommercialName)
        'BR17.864.877 end
    'BR18.990.689 foon36643 end
        m_State.Proxy("fipVersion").value = .CommercialVersion
        m_State.Proxy("fipInternalVersion").value = .MajorNumber & "." & .MinorNumber & .RevisionNumber & "." & .BuildNumber
    End With
    If Not lic Is Nothing Then
        m_State.Proxy("fipLicenseType").value = IIf(lic.Type = licDemo, "Demo", m_Term.String(6486, "Normal"))
        m_State.Proxy("fipLicenseName").value = lic.Name
        m_State.Proxy("fipLicenseName").DimLength = Len(lic.Name)
        m_State.Proxy("fipSerial").value = lic.Number
        m_State.Proxy("fipSerial").DimLength = Len(lic.Number)
    End If
    m_Slic.Refresh
    dlg.Show (ssfNone)
End Sub

Public Sub Initialize(ByVal App As esl.Application, ByVal comp As esl.Company, ByVal Term As esl.ITranslator)
    Set m_App = App
    Set m_comp = comp
    Set m_Term = Term
End Sub
Attribute VB_Name = "clsDblClickEvent"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private WithEvents xlApp As Excel.Application
Attribute xlApp.VB_VarHelpID = -1


Private Sub Class_Initialize()
   Set xlApp = Application
End Sub
Private Sub xlApp_SheetBeforeDoubleClick(ByVal Sh As Object, ByVal Target As Range, Cancel As Boolean)
    Dim sRange As String
    Dim frm As New frmSearch
    
    sRange = CellName(Target.Column, 1) & ":" & CellName(Target.Column, Target.row)
    If IsColumnHeader(sRange, g_App.Term.String(8494, "Cost center")) Then
        frm.SetTable "kstpl"
        frm.Show
    End If
    
    If IsColumnHeader(sRange, g_App.Term.String(1194, "Cost unit")) Then
        frm.SetTable "kstdr"
        frm.Show
    End If
End Sub

Private Function CellName(ByVal iCol As Long, ByVal iRow As Long) As String
    If iCol < 27 Then
        CellName = Chr(64 + iCol) & iRow
    Else
        CellName = Chr(64 + ((iCol - 1) \ 26)) & Chr(65 + ((iCol - 1) Mod 26)) & iRow
    End If
End Function

Private Function IsColumnHeader(ByVal sRange As String, ByVal sWhat As String)
    Set Rng = Range(sRange).Find(What:=sWhat, LookAt:=xlWhole, LookIn:=xlValues)
    IsColumnHeader = Not (Rng Is Nothing)
End Function



Attribute VB_Name = "clsEvent"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Public WithEvents App As Application
Attribute App.VB_VarHelpID = -1

'Public WithEvents cmdPasteFunction As CommandBarButton     '06.468.469

'06.468.469
'Private Sub cmdPasteFunction_Click(ByVal ctrl As CommandBarButton, CancelDefault As Boolean)
'
'    If IsExactFunction(ActiveCell.Formula) Then
'        CancelDefault = True
'        ExactFunctionWizard
'    End If
'
'End Sub

Private Sub App_NewWorkbook(ByVal wb As Workbook)
    'toolbar buttons and menu items must be synchronized
    Call g_Ses.EnableControl("Information", True)
    Call g_Ses.EnableControl("Search", True)
    Call g_Ses.EnableControl("Function", True)
    'BR18.645.497 foon36643:The Reports command name is wizards and not "reports"
    Call g_Ses.EnableControl("Wizards", True)
    
    Call g_Ses.EnableControl("Update", False)
    Call g_Ses.EnableControl("Refresh", True)
End Sub

Private Sub App_SheetSelectionChange(ByVal Sh As Object, ByVal Target As Range)
    '[adam21726 21-11-2002 12:07] if cell selecton is changed the 'Update'-button must be checked again(05.153.504)
    Call AdjustUpdateButton(Sh)
End Sub

Private Sub App_WorkbookActivate(ByVal wb As Workbook)
    Call App_SheetActivate(wb.ActiveSheet)
End Sub

Private Sub App_WorkbookNewSheet(ByVal wb As Workbook, ByVal Sh As Object)
    Call g_Ses.EnableControl("Update", False)
    Call g_Ses.EnableControl("Refresh", True)
End Sub

Private Sub App_SheetActivate(ByVal Sh As Object)
On Error GoTo ErrorHandler

    If (Application.Workbooks.Count = 1) Then
        '(re)enabling buttons+menu items

        Call g_Ses.EnableControl("Search", True)
        Call g_Ses.EnableControl("Function", True)
        'BR18.645.497 foon36643:The Reports command name is wizards and not "reports"
        Call g_Ses.EnableControl("Wizards", True)
    End If

    'hide/show Exact toolbar depending on type object
    'and if toolbar is available
    With CommandBars
        Dim i As Long
        For i = 1 To .Count
            If (.Item(i).Name = m_sToolbarName) Then
                .Item(i).Visible = (TypeOf Sh Is Worksheet)
                Exit For
            End If
        Next i
    End With
    
    Call AdjustUpdateButton(Sh)
    Call g_Ses.EnableControl("Refresh", True)

Exit Sub
ErrorHandler:
    Err.Source = "clsEvent::App_SheetActivate"
    Call ProcessError(Err)
End Sub

Private Sub App_WorkbookOpen(ByVal wb As Workbook)
    Call g_Ses.EnableControl("Information", True)
    Call g_Ses.EnableControl("Search", True)
    Call g_Ses.EnableControl("Function", True)
    'BR18.645.497 foon36643:The Reports command name is wizards and not "reports"
    Call g_Ses.EnableControl("Wizards", True)
    
    Call App_SheetActivate(wb.Sheets(1))
    
    gbStartFromShell = False
End Sub

Private Sub App_WorkbookBeforeClose(ByVal wb As Workbook, Cancel As Boolean)
    'if this was the last open workbook => disablen buttons and menu items
    If (Application.Workbooks.Count = 1) Then
        Call g_Ses.EnableControl("Search", False)
        Call g_Ses.EnableControl("Function", False)
        'BR18.645.497 foon36643:The Reports command name is wizards and not "reports"
        Call g_Ses.EnableControl("Wizards", False)
        
        Call g_Ses.EnableControl("Update", False)
        Call g_Ses.EnableControl("Refresh", False)
    End If
    
End Sub

Private Sub AdjustUpdateButton(ByVal Sh As Object)
On Error GoTo ErrorHandler

    
    Dim bUpdatable As Boolean
    Dim ws As Worksheet
    
    '[adam21726 21-10-2002 12:17] only for Worksheet
    If (TypeOf Sh Is Worksheet) Then
        Set ws = Sh
    
        '////////////////////////////////
        'does this sheet contain (saved) an Exact report data
        Dim sDefineName As String
        sDefineName = LCase$("ExactAddinReport1.Area")
        
        Dim i As Long
        With ws.Names
            For i = 1 To .Count
                If (LCase$(Right$(.Item(i).Name, Len(.Item(i).Name) - InStr(1, .Item(i).Name, "!"))) = sDefineName) Then
                    'yes
                    
                    'check if data changed by user can be updated/refreshed
                    bUpdatable = IsDataUpdatable
                    Exit For
                End If
            Next i
        End With
    End If
    
    'enable/disable button
    Call g_Ses.EnableControl("Update", bUpdatable)
    
CleanUp:
    Set ws = Nothing

Exit Sub
ErrorHandler:
    Err.Source = "clsEvent::AdjustUpdateButton"
    Call ProcessError(Err)
    
    GoTo CleanUp
End Sub

Attribute VB_Name = "frmFunction"
Attribute VB_Base = "0{A3943AE0-4986-4B64-90D2-73D909D133F5}{687FC2F4-5978-4A70-A22E-CD7FFDE684FB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private m_gfx As esl.Graphics
Public m_Conn As exl.IExlConnection

Private m_stFuncHead As esl.ISlicState
Private m_stFuncData As esl.ISlicState
Private WithEvents m_fipCompany As slui.fip
Attribute m_fipCompany.VB_VarHelpID = -1


Private WithEvents m_fipFunction As slui.fip
Attribute m_fipFunction.VB_VarHelpID = -1


Private WithEvents m_btnNew As slui.FlatButton
Attribute m_btnNew.VB_VarHelpID = -1


Private m_State As esl.ISlicState

Private WithEvents slcFuncHead As slui.Slic
Attribute slcFuncHead.VB_VarHelpID = -1


Private WithEvents slcFuncData As slui.Slic
Attribute slcFuncData.VB_VarHelpID = -1



'Very ugly, but VBA doesn't support 'WithEvents' arrays
Private WithEvents m_fip1 As slui.fip
Attribute m_fip1.VB_VarHelpID = -1

Private WithEvents m_fip2 As slui.fip
Attribute m_fip2.VB_VarHelpID = -1

Private WithEvents m_fip3 As slui.fip
Attribute m_fip3.VB_VarHelpID = -1

Private WithEvents m_fip4 As slui.fip
Attribute m_fip4.VB_VarHelpID = -1

Private WithEvents m_fip5 As slui.fip
Attribute m_fip5.VB_VarHelpID = -1

Private WithEvents m_fip6 As slui.fip
Attribute m_fip6.VB_VarHelpID = -1

Private WithEvents m_fip7 As slui.fip
Attribute m_fip7.VB_VarHelpID = -1

Private WithEvents m_fip8 As slui.fip
Attribute m_fip8.VB_VarHelpID = -1

Private WithEvents m_fip9 As slui.fip
Attribute m_fip9.VB_VarHelpID = -1

Private WithEvents m_fip10 As slui.fip
Attribute m_fip10.VB_VarHelpID = -1

Private WithEvents m_fip11 As slui.fip
Attribute m_fip11.VB_VarHelpID = -1

Private WithEvents m_fip12 As slui.fip
Attribute m_fip12.VB_VarHelpID = -1

Private WithEvents m_fip13 As slui.fip
Attribute m_fip13.VB_VarHelpID = -1

Private WithEvents m_fip14 As slui.fip
Attribute m_fip14.VB_VarHelpID = -1

Private WithEvents m_fip15 As slui.fip
Attribute m_fip15.VB_VarHelpID = -1

Private WithEvents m_fip16 As slui.fip
Attribute m_fip16.VB_VarHelpID = -1

Private WithEvents m_fip17 As slui.fip
Attribute m_fip17.VB_VarHelpID = -1

Private WithEvents m_fip18 As slui.fip
Attribute m_fip18.VB_VarHelpID = -1

Private WithEvents m_fip19 As slui.fip 'BR21.769.636 foon36643:G2003 - Excel Add In - CAT_BAL Function gives an error message when all CC categories hay a subcategory
Attribute m_fip19.VB_VarHelpID = -1

Private m_sLabel(1 To 19) As String 'BR21.769.636 foon36643:G2003 - Excel Add In - CAT_BAL Function gives an error message when all CC categories hay a subcategory
Private m_sTable As String
Public m_sResult As String

Private Function IsOptionalParam(ByVal nIndex As Long) As Boolean
    IsOptionalParam = (Left(m_sLabel(nIndex), 1) = "[")
End Function

Private Function GetParamName(ByVal nIndex As Long) As String
    If IsOptionalParam(nIndex) Then
        Dim sLabel As String
        sLabel = m_sLabel(nIndex)
        GetParamName = Mid(sLabel, 2, Len(sLabel) - 2)
    Else
        GetParamName = m_sLabel(nIndex)
    End If
End Function

Private Sub SetFip(ByVal nIndex As Long, ByVal ctl As slui.fip)
    Select Case nIndex
    Case 1: Set m_fip1 = ctl
    Case 2: Set m_fip2 = ctl
    Case 3: Set m_fip3 = ctl
    Case 4: Set m_fip4 = ctl
    Case 5: Set m_fip5 = ctl
    Case 6: Set m_fip6 = ctl
    Case 7: Set m_fip7 = ctl
    Case 8: Set m_fip8 = ctl
    Case 9: Set m_fip9 = ctl
    Case 10: Set m_fip10 = ctl
    Case 11: Set m_fip11 = ctl
    Case 12: Set m_fip12 = ctl
    Case 13: Set m_fip13 = ctl
    Case 14: Set m_fip14 = ctl
    Case 15: Set m_fip15 = ctl
    Case 16: Set m_fip16 = ctl
    Case 17: Set m_fip17 = ctl
    Case 18: Set m_fip18 = ctl
    Case 19: Set m_fip19 = ctl 'BR21.769.636 foon36643:G2003 - Excel Add In - CAT_BAL Function gives an error message when all CC categories hay a subcategory
    End Select
End Sub

Private Function GetFip(ByVal vntIndex As Variant) As slui.fip
    If IsEmpty(vntIndex) Then Exit Function
    
    If IsNumeric(vntIndex) Then
        Select Case vntIndex
        Case 1: Set GetFip = m_fip1
        Case 2: Set GetFip = m_fip2
        Case 3: Set GetFip = m_fip3
        Case 4: Set GetFip = m_fip4
        Case 5: Set GetFip = m_fip5
        Case 6: Set GetFip = m_fip6
        Case 7: Set GetFip = m_fip7
        Case 8: Set GetFip = m_fip8
        Case 9: Set GetFip = m_fip9
        Case 10: Set GetFip = m_fip10
        Case 11: Set GetFip = m_fip11
        Case 12: Set GetFip = m_fip12
        Case 13: Set GetFip = m_fip13
        Case 14: Set GetFip = m_fip14
        Case 15: Set GetFip = m_fip15
        Case 16: Set GetFip = m_fip16
        Case 17: Set GetFip = m_fip17
        Case 18: Set GetFip = m_fip18
        Case 19: Set GetFip = m_fip19 'BR21.769.636 foon36643:G2003 - Excel Add In - CAT_BAL Function gives an error message when all CC categories hay a subcategory
        End Select
    Else
        Dim nIndex As Long
        For nIndex = 1 To 19 'BR21.769.636 foon36643:G2003 - Excel Add In - CAT_BAL Function gives an error message when all CC categories hay a subcategory
            If vntIndex = GetParamName(nIndex) Then
                Set GetFip = GetFip(nIndex)
                Exit Function
            End If
        Next nIndex
    End If
End Function

Private Function GetFunction() As String
'On Error Resume Next
On Error GoTo ErrorHandler


    Dim sSeparator As String
    'sSeparator = Application.International(xlListSeparator)
    sSeparator = ","
    
    Dim sFunc As String, sValue As String
    Dim nRow As Long, nCol As Long, nCols As Long
    Dim ctl As slui.fip
    Dim vtValue As Variant
    
    nRow = m_fipFunction.value
    sFunc = "=" & shtFunc.Cells(nRow, 1).value & "("
    nCol = 1
    nCols = 0
    
    Do While Len(shtFunc.Cells(nRow, nCol + 1).value) > 0
        Dim sParam As String
        sParam = shtFunc.Cells(nRow, nCol + 1).value
        If sParam = "[co]" Then
            'If m_fipCompany.value <> -1 Then
            sValue = m_fipCompany.value
            If Left(sValue, 1) = "=" Then sValue = Mid(sValue, 2)
            sFunc = sFunc & sValue
            'End If
        ' BR 14.851.686 yong107021
        ' Add in closing_entries to indicate include closing entries
        ' ElseIf sParam = "[after_entry]" Then
        ElseIf sParam = "[after_entry]" Or sParam = "[closing_entries]" Then
            nCols = nCols + 1
            Set ctl = m_stFuncData.Unknown("Fip" & nCols)
            If IsNull(ctl.value) Then
                vtValue = ""
            Else
                vtValue = ctl.value
            End If
            
            If vtValue Then
                sValue = "1"
            Else
                sValue = "0"
            End If
            sFunc = sFunc & sValue
            
        ElseIf sParam <> "[skip]" And Not HideParam(sParam) Then
            nCols = nCols + 1
            Set ctl = m_stFuncData.Unknown("Fip" & nCols)
            
            If (ctl Is Nothing) Then
                vtValue = ""
            ElseIf IsNull(ctl.value) Then
                vtValue = ""
            Else
                'BR: 08.740.102 Kavien Poon
                'truncate the space for the empty combofip
                If Trim(ctl.value) = "" Then
                    vtValue = Trim(ctl.value)
                Else
                    vtValue = ctl.value
                End If
            End If
            
            If Not (ctl Is Nothing) Then
                If Len(vtValue) > 0 Or Left(sParam, 1) <> "[" Then
                    sValue = vtValue
                    If ctl.DimType <> esl.typeTest Then
                        If VarType(vtValue) = vbString Or VarType(vtValue) = vbDate Then
                            If Left(sValue, 1) = "=" Then
                                sValue = Mid(sValue, 2)
                            Else
                                sValue = Chr(34) & RTrim(sValue) & Chr(34)
                            End If
                        End If
                    ElseIf ctl.DimType = esl.typeTest Then
                        If IsNumeric(vtValue) = False Then
                            sValue = Chr(34) & RTrim(sValue) & Chr(34)
                        End If
                    End If
                    sFunc = sFunc & sValue
                End If
            End If
        End If
        
        nCol = nCol + 1
        sFunc = sFunc & sSeparator
    Loop
    
    Do While Right(sFunc, 1) = sSeparator
        sFunc = Left(sFunc, Len(sFunc) - 1)
    Loop
    
    GetFunction = sFunc & ")"
    
    
Exit Function
ErrorHandler:
    GetFunction = ""
    
    Err.Source = "frmFunction::GetFunction"
    Call ProcessError(Err)
End Function

Private Sub FillFunctionList()
    Dim nRow As Long: nRow = 1
    m_fipFunction.TestValues.Clear
    Do While Len(shtFunc.Cells(nRow, 1).value) > 0
        If IsEnabled(m_Conn.ID, nRow) Then
            m_fipFunction.TestValues.Add nRow, shtFunc.Cells(nRow, 1).value
        End If
        nRow = nRow + 1
    Loop
End Sub

Private Sub InitFuncHead()
    Set slcFuncHead = m_State.Unknown("slcHead")
    slcFuncHead.Script = GetFuncHeadSlic
    
    g_App.ConnectObject slcFuncHead, Nothing, g_App.Term
    Set m_stFuncHead = slcFuncHead
    Set m_fipCompany = m_stFuncHead.Unknown("Company")
    Set m_fipFunction = m_stFuncHead.Unknown("Function")
    Set m_btnNew = m_stFuncHead.Unknown("New")
    FillCompanyList
    FillFunctionList
    slcFuncHead.Refresh
End Sub

Private Sub FillCompanyList()
    Dim v As esl.ValueSet, conn As exl.IExlConnection, vnt As Variant
    Set v = m_fipCompany.TestValues
    v.Clear
    If TestEnabledFunctions(g_Ses.DefaultID) Then
        v.Add -1, g_App.Term.String(8521, "Default")
    End If
    For Each conn In g_Ses.Connections
        If conn.Connected Then
            If TestEnabledFunctions(conn.ID) Then
                v.Add conn.ID, conn.ID & " " & conn.Description
            End If
        End If
    Next conn
  '  If v.Find(-1, vnt) Then
  '      m_fipCompany.value = -1
  '  End If
End Sub

Private Sub PrepareBrowserTable(ByVal sFunc As String)
    Select Case sFunc
    Case "ACC_DATA": m_sTable = "grtbk"
    Case "CC_DATA": m_sTable = "kstpl"
    Case "CO_DATA": m_sTable = "bedryf"
    Case "CRD_DATA": m_sTable = "cicmpy"
    Case "CU_DATA": m_sTable = "kstdr"
    Case "CURR_CODE_DATA": m_sTable = "valuta"
    Case "DEB_DATA": m_sTable = "cicmpy"
    Case "HR_DATA": m_sTable = "humres"
    Case "ITEM_DATA": m_sTable = "items"
    'Br19.243.686 foon36643:Item group show * when the Item group has 10 characters
    'Solution: Use itemassortment instead of artgrp
    Case "ITEM_GROUP_DATA": m_sTable = "ItemAssortment"
    Case "MAIN_CLASS_DATA": m_sTable = "accountclasses"
    Case "PROJ_DATA": m_sTable = "prproject"
    Case "SUB_CLASS_DATA": m_sTable = "accountclasses"
    Case "CAT_DATA": m_sTable = "accountclasses"
    Case Else
        '?
    End Select
End Sub

Private Sub InitFuncData()
On Error GoTo Failed

    Set slcFuncData = m_State.Unknown("slcMain")
    
    slcFuncData.Script = GetFuncDataSlic
    Dim nRow As Long, nCol As Long, nCols As Long, sParam As String
    nRow = m_fipFunction.value
    m_sFunction = m_fipFunction.Text
    nCol = 1
    nCols = 0
    Do While Len(shtFunc.Cells(nRow, nCol + 1).value) > 0
        sParam = shtFunc.Cells(nRow, nCol + 1).value
        If sParam <> "[co]" And sParam <> "[skip]" And Not HideParam(sParam) Then
            nCols = nCols + 1
        End If
        nCol = nCol + 1
    Loop
    slcFuncData.Parameters = Left("ABCDEFGHIJKLMNOPQRSTUVWXYZ", nCols)
    
    g_App.ConnectObject slcFuncData, m_Conn.Company, g_App.Term
    Set m_stFuncData = slcFuncData
    nCol = 1
    nCols = 0
    
    Do While Len(shtFunc.Cells(nRow, nCol + 1).value) > 0
        sParam = shtFunc.Cells(nRow, nCol + 1).value
        If (sParam <> "[co]") And (sParam <> "[skip]") And (Not HideParam(sParam)) Then
            nCols = nCols + 1
            Dim ctl As slui.fip
            Set ctl = m_stFuncData.Unknown("Fip" & nCols)
            SetFip nCols, ctl
            m_sLabel(nCols) = sParam
            SetFipProperties m_Conn, ctl, sParam
        End If
        nCol = nCol + 1
    Loop
    PrepareBrowserTable shtFunc.Cells(nRow, 1).value
    slcFuncData.Refresh


Exit Sub
Failed:
End Sub

Private Function HideParam(ByVal sParam As String) As Boolean
    HideParam = False
    Select Case sParam
    'BR.13.347.016 - As per request, Checking whether to Hide/Show 'Reporting Date' in selection is removed.
    
        Case "[wrh_loc]"
            If Not m_Conn.Company.GetOpt(34) Then
                HideParam = True
            End If
        Case "[wrh_code]", "wrh_code"
            If Not m_Conn.Company.GetOpt(32) Then
                HideParam = True
            End If

        Case "[cc_cat1]"
            If Not m_Conn.Company.GetOpt(50) Then
                HideParam = True
                Exit Function
            End If
            
            HideParam = SpecialCaseForCostCenter(1)
            
        Case "[cc_cat2]"
            If Not m_Conn.Company.GetOpt(50) Then
                HideParam = True
                Exit Function
            End If
            
            HideParam = SpecialCaseForCostCenter(2)
        
        Case "[cc_cat3]"
            If Not m_Conn.Company.GetOpt(50) Then
                HideParam = True
                Exit Function
            End If
            
            HideParam = SpecialCaseForCostCenter(3)
            
        Case "[cc_cat4]"
            If Not m_Conn.Company.GetOpt(50) Then
                HideParam = True
                Exit Function
            End If
            
            HideParam = SpecialCaseForCostCenter(4)
    End Select
End Function

Private Sub m_btnNew_Click()
    Dim conn As exl.IExlConnection
    'Set conn = g_Ses.CreateConnection
    Set conn = AddNewConnection(m_State.Form("").Window)
    
    If (Not conn Is Nothing) Then
        If TestEnabledFunctions(conn.ID) Then
            FillCompanyList
            m_fipCompany.value = conn.ID
        Else
            Call ShowNoRightsMessage
        End If
        
        Set conn = Nothing
    End If
    
End Sub

Private Sub Code_ButtonClick()
    On Error GoTo Failed
    Dim func As exl.IExlConnectionFunctions, value As String
    Set func = m_Conn
    value = func.Browse(IIf(GetFip("price_list_type").value = qdmItem, "artbst", "artgrp"))
    If Len(value) > 0 Then
        GetFip("code").value = Mid(value, 2)
    End If
    Exit Sub
Failed:
End Sub

Private Sub Code_EValidate(vntValue As Variant, sError As String, bValid As Boolean)
    On Error GoTo Failed
    Dim sValue As String
    sValue = GetFip("code").value
    If Len(sValue) = 0 Or Left(sValue, 1) = "=" Then
        bValid = True
    Else
        Dim cnn As EDL.EdlConnection
        Set cnn = m_Conn.Company
        If GetFip("price_list_type").value = qdmItem Then
            bValid = (cnn.Query("SELECT COUNT(*) FROM artbst WHERE artcode = '" & sValue & "'") = 1)
        Else
            bValid = (cnn.Query("SELECT COUNT(*) FROM artgrp WHERE artgrp = '" & sValue & "'") = 1)
        End If
    End If
    Exit Sub
Failed:
End Sub

Private Sub Field_ButtonClick()
On Error GoTo ErrorHandler


    Dim frm As New frmListView
    Dim cnn As EDL.EdlConnection, qy As EDL.EdlQuery
    Set cnn = m_Conn.Company
    
    If m_sTable = "cicmpy" Then
        Set qy = cnn.OpenQuery("SELECT ColumnName, TermID, Description FROM DDColumns WHERE TableName = " & cnn.LitString(m_sTable) & " AND (Type & 0x100000) = 0 AND ColumnName <> 'PurchaseOrderAmount' AND ColumnName <> 'SalesOrderAmount' ", edlClientSnapshot, edlReadOnly, 0)
    Else
        Set qy = cnn.OpenQuery("SELECT ColumnName, TermID, Description FROM DDColumns WHERE TableName = " & cnn.LitString(m_sTable) & " AND (Type & 0x100000) = 0", edlClientSnapshot, edlReadOnly, 0)
    End If
    frm.lst.ColumnHeaders.Add , , g_App.Term.String(8451, "Column"), 200
    
    Do While Not qy.EOF
        frm.lst.ListItems.Add , qy.char("ColumnName"), g_App.Term.String(qy.Long("TermID"), qy.char("Description"))
        qy.FetchNext
    Loop
    
    'BR18.057.588 foon36643: add on blank item to the list if table is not selected yet
    If frm.lst.ListItems.Count = 0 Then
        frm.lst.ListItems.Add , "", ""
    End If
    
    frm.Init Me
    frm.Show
    
    If Len(m_sResult) > 0 Then
        GetFip("field").value = m_sResult
        m_sResult = ""
    End If
    
    
Exit Sub
ErrorHandler:
    Err.Source = "frmFunction::Field_ButtonClick"
    Call ProcessError(Err, slcFuncData.hWnd)
End Sub

Private Sub Field_EValidate(vntValue As Variant, sError As String, bValid As Boolean)
    On Error GoTo Failed
    Dim sValue As String
    sValue = GetFip("field").value
    If Len(sValue) = 0 Then
        bValid = True
    Else
        Dim cnn As EDL.EdlConnection
        Set cnn = m_Conn.Company
        bValid = (cnn.Query("SELECT COUNT(*) FROM DDColumns WHERE TableName = '" & m_sTable & "' AND ColumnName = '" & sValue & "'") = 1)
        'BR18.000.900 foon36643: Show Not found if field not found
        If bValid = False Then
            sError = g_App.Term.String(11337, "Not found")
        End If
    End If
    Exit Sub
Failed:
End Sub

Private Sub File_Change()
    On Error Resume Next
    m_sTable = GetFip("file").value
End Sub

Private Sub Index_ButtonClick()
On Error GoTo Failed


    Dim frm As New frmListView
    Dim cnn As EDL.EdlConnection, qy As EDL.EdlQuery
    Set cnn = m_Conn.Company
    Set qy = cnn.OpenQuery("SELECT IndexName FROM DDIndexes WHERE TableName = '" & m_sTable & "'", edlClientSnapshot, edlReadOnly, 0)
    frm.lst.ColumnHeaders.Add , , g_App.Term.String(7273, "Index"), 200
    Do While Not qy.EOF
        frm.lst.ListItems.Add , qy.char("IndexName"), qy.char("IndexName")
        qy.FetchNext
    Loop
    'BR18.057.588 foon36643: add on blank item to the list if table is not selected yet
    If frm.lst.ListItems.Count = 0 Then
        frm.lst.ListItems.Add , "", ""
    End If
    
    frm.Init Me
    frm.Show
    If Len(m_sResult) > 0 Then
        GetFip("index").value = m_sResult
        m_sResult = ""
    End If
    
    
Exit Sub
Failed:
End Sub

Private Sub Index_EValidate(vntValue As Variant, sError As String, bValid As Boolean)
    On Error GoTo Failed
    Dim sValue As String
    sValue = GetFip("index").value
    If Len(sValue) = 0 Then
        bValid = True
    Else
        Dim cnn As EDL.EdlConnection
        Set cnn = m_Conn.Company
        bValid = (cnn.Query("SELECT COUNT(*) FROM DDIndexes WHERE TableName = '" & m_sTable & "' AND IndexName = '" & sValue & "'") = 1)
         'BR18.000.900 foon36643: Show Not found if field not found
        If bValid = False Then
            sError = g_App.Term.String(11337, "Not found")
        End If
    End If
    Exit Sub
Failed:
End Sub

Private Sub Period_EValidate(vntValue As Variant, sError As String, bValid As Boolean)
On Error GoTo Failed


    Dim fip As slui.fip, sValue As String
    Set fip = GetFip("period")
    sValue = fip.value
    If Len(sValue) = 0 Or Left(sValue, 1) = "=" Then
        bValid = True
    Else
        Dim settings As esl.ISettings
        Set settings = m_Conn.Company
        Dim nPer As Integer, nMaxPer As Integer
        nPer = CInt(sValue)
        nMaxPer = CInt(settings("eaccount\hoogste_boekperiode,c"))
        If nPer < -1 Or nPer > nMaxPer Then
            sError = g_App.Term.String(30246, "Highest financial period") & ": " & nMaxPer
            bValid = False
        Else
            bValid = True
        End If
    End If


Exit Sub
Failed:
    bValid = False
    sError = g_App.Term.String(8985, "May not be") & ": " & vntValue
End Sub

Private Sub fip_ButtonClick(ByVal nIndex As Long)
    Select Case GetParamName(nIndex)
    Case "code": Code_ButtonClick
    Case "field": Field_ButtonClick
    Case "index": Index_ButtonClick
    End Select
End Sub

Private Sub fip_Change(ByVal nIndex As Long)
On Error GoTo ErrorHandler

    Dim fip As slui.fip
    Dim sField As String
    Dim cnn As EDL.EdlConnection
    
    Set cnn = m_Conn.Company
    
    sField = GetParamName(nIndex)
    sField = LCase$(sField)

    Select Case (sField)
    Case "file":
        Call File_Change
        
    Case "trans_type"
        'FCR20.703.356 foon36643: There is no budget field in ACC_BAL but only seleciton of trans_type
        If m_sFunction <> "ACC_BAL" Then
            Set fip = GetFip("bud_vers")
            If GetFip(nIndex).value = "7" Then 'If transaction type is 'Budget'
                Dim vnt As Variant
                
                If g_Ses.Company.GetOpt(590) = True Then
                    vnt = Get_DefaultBudget
                    
                    If Not IsEmpty(vnt) Then
                        fip.value = vnt(LBound(vnt), 1)
                    End If
                    
                    fip.Enabled = False
                Else
                    fip.Enabled = True  'Enable the 'Budget scenario' field
                    fip.DimModifiers = 67108864 'Refuse empty field
                    
                    GetFip("after_entry").value = True  'Set 'After entry' to true
                End If
            Else
                fip.value = ""
                fip.Enabled = False
                fip.DimModifiers = 0
            End If
        End If
    
    Case "class_id"
        Dim sClassId As String
        
        Set fip = GetFip("class_code")
        
        sClassId = GetFip(nIndex).value
        
        With fip
            .DimLength = 30
            .DimType = typeLas
            .BrowseIndex = "ix_accountclasses"
            .BrowseField = "AccountClassCode"
            .BrowseSQLSelect = "SELECT ClassID, AccountClassCode, Description FROM accountclasses WHERE ClassID = " & sClassId & " ORDER BY ClassID, AccountClassCode"
            .BrowseTable = "AccountClasses"
            .Browser.FixLen = 1
            .BrowseSQLColInfo = "ClassId,,,,,,1;"
        
            If (Len(Trim(sClassId)) = 0) Then
                .Caption = g_App.Term.String(31284, "Classification") & ": ?"
                .Enabled = False
            Else
                .Caption = cnn.Query("SELECT [Description_0] FROM AccountClassnames WHERE ClassID = ?", sClassId)
                .Browser.KeyValue(1) = sClassId
            End If
        End With
        
    Case Else
        '?
    End Select
    
    
Exit Sub
ErrorHandler:
    Err.Source = "frmFunction::fip_Change(" & nIndex & ")"
    Call ProcessError(Err, slcFuncData.hWnd)
End Sub

Private Sub fip_EValidate(ByVal nIndex As Long, vntValue As Variant, sError As String, bValid As Boolean)
On Error GoTo ErrorHandler


    '////////////////
    '[adam21726 14-11-2002 19:20] check for cell reference()
    Dim f As fip
    Dim cnn As EDL.EdlConnection
    Dim i As Long
    Dim sPart As Variant
    
    If (vntValue <> "") Then
        If (Left$(vntValue, 1) = "=") Then
            Set f = GetFip(nIndex)
            
            Dim bAllowEmpty As Boolean
            bAllowEmpty = ((f.DimModifiers And esl.tmNoEmpty) <> esl.tmNoEmpty)
            
            Dim sValue As String
            bValid = IsValidCell(Right$(vntValue, Len(vntValue) - 1), bAllowEmpty, sValue, sError)

            If (bValid = True) Then
                'let's validate the cell's value if not empty
                If (sValue <> "") Then
                    f.value = sValue
                    f.DimLength = Len(sValue)
                    bValid = f.Validate
                    
                    If (bValid = False) Then
                        sError = g_App.Term.String(5961, "Reference") & "(" & LCase$(g_App.Term.String(8413, "Cell")) & ")" & ": " & LCase$(g_App.Term.String(11337, "Not found"))
                    Else
                        Exit Sub
                    End If
                End If
            End If
            
            If (bValid = False) Then GoTo CleanUp
        End If
    End If
    
    '////////////////
    Dim sField As String
    sField = GetParamName(nIndex)
    sField = LCase$(sField)
    
    Dim vRetval As Variant
    Set cnn = m_Conn.Company
    
    Select Case (sField)
    Case "code":
        Code_EValidate vntValue, sError, bValid
        
    Case "field":
        Field_EValidate vntValue, sError, bValid
        
    Case "index":
        Index_EValidate vntValue, sError, bValid
        
    Case "period"
        If (vntValue & "" <> "") Then
            'BR 15.153.050 yong107021
            'Add checking on space
            If InStr(Trim(vntValue) & "", " ") > 0 Then
                bValid = False
                sError = g_App.Term.String(8497, "No space is allowed")
            ElseIf (InStr(vntValue, ":") > 0) Then
                sPart = Split2(vntValue, ":")
                If (UBound(sPart) = 1) Then
                    If (bValid = True) And Not IsNumeric(sPart(0)) Then
                        bValid = False
                        sError = g_App.Term.String(8985, "May not be") & ": " & sPart(0)
                    End If
                    
                    If (bValid = True) And Not IsNumeric(sPart(1)) Then
                        bValid = False
                        sError = g_App.Term.String(8985, "May not be") & ": " & sPart(1)
                    End If
                    
                    If (bValid = True) Then
                        If CLng(sPart(0)) > CLng(sPart(1)) = True Then
                            bValid = False
                            sError = sPart(0) & " " & g_App.Term.String(5876, "greater than") & " " & sPart(1)
                        
                        Else
                            If (bValid = True) Then
                                Set f = GetFip(nIndex)
                                f.value = sPart(0)
                                bValid = f.Validate
                                sError = f.Error
                    
                                If (bValid = True) Then
                                    f.value = sPart(1)
                                    bValid = f.Validate
                                    sError = f.Error
                                End If
                            End If
                        
                            If (bValid = False) Then sError = sError
                        End If
                    End If
                Else
                    bValid = False
                    sError = g_App.Term.String(20006, "Invalid") & ": " & LCase$(g_App.Term.String(24733, "Selection range") & "; " & g_App.Term.String(2411, "Format"))
                End If
            ElseIf (InStr(vntValue, ",") > 0) Then
                If m_sFunction = "GL_BAL" Then
                    sPart = SplitComma(vntValue, ",")
                    If UBound(sPart) > 0 Then
                        i = UBound(sPart)
                        Do Until i = -1
                        Set f = GetFip(nIndex)
                        f.value = sPart(i)
                        bValid = f.Validate
                        sError = f.Error
                        i = i - 1
                        If (bValid = False) Then
                            sError = g_App.Term.String(20006, "Invalid") & ": " & LCase$(g_App.Term.String(24733, "Selection range") & "; " & g_App.Term.String(2411, "Format"))
                            Exit Sub
                        End If
                        Loop
                    End If
                Else
                    Period_EValidate vntValue, sError, bValid
                End If
            ElseIf (InStr(vntValue, "*") > 0) Or (InStr(vntValue, "?") > 0) Then
                If m_sFunction = "GL_BAL" Then
                    Dim sPeriod As String
                    If InStr(vntValue, "*") > 0 Then
                        sPeriod = Replace(vntValue, "*", "%")
                    Else
                        sPeriod = Replace(vntValue, "?", "_")
                    End If
                    vRetval = cnn.Query("SELECT 1 FROM perdat WHERE LTRIM(RTRIM(per_fin)) LIKE ?", sPeriod, edlNoNulls)
                    If (IsEmpty(vRetval) = True) Then
                        bValid = False
                        sError = g_App.Term.String(11337, "Not found")
                    Else
                        bValid = True
                        sError = ""
                    End If
                Else
                    Period_EValidate vntValue, sError, bValid
                End If
            Else
                Period_EValidate vntValue, sError, bValid
            End If
        End If
        
    '[adam21726 21-10-2002 09:57] always pass (the original) validation results
    Case "crd_nr":
        If vntValue <> "" Then
            vRetval = cnn.Query("SELECT ID FROM cicmpy WHERE crdcode = ?", Format$(vntValue, "@@@@@@@@@@@@@@@@@@@@"))
            If (IsEmpty(vRetval) = True) Then
                bValid = False
                sError = g_App.Term.String(11337, "Not found")
            Else
                bValid = True
                sError = ""
            End If
        End If
    'Start OOIP229616 - FC29.341.602 - 16/01/2009 remove Debtor Code checking at below, because allow user to key in debtor code in range.
    'Case "deb_nr":
    '    If vntValue <> "" Then
    '        vRetval = cnn.Query("SELECT ID FROM cicmpy WHERE debcode = ?", Format$(vntValue, "@@@@@@@@@@@@@@@@@@@@"))
    '        If (IsEmpty(vRetval) = True) Then
    '            bValid = False
    '            sError = g_App.Term.String(11337, "Not found")
    '        Else
    '            bValid = True
    '            sError = ""
    '        End If
    '    End If
    'End OOIP229616 - FC29.341.602 - 16/01/2009 remove Debtor Code checking at below, because allow user to key in debtor code in range.
    Case "class_id":
        If (vntValue = "0") Then
            bValid = False
            sError = g_App.Term.String(20005, "Missing")
        End If
        
    Case "wrh_loc":
        bValid = False

        'get current fip
        Set f = GetFip(nIndex)
        
        bAllowEmpty = ((f.DimModifiers And esl.tmNoEmpty) <> esl.tmNoEmpty)

        'get linked fip
        Set f = GetFip(nIndex - 1)
        
        If (f.Validate = True) Then
            If Len(Trim(vntValue)) <> 0 Then
                vRetval = cnn.Query("SELECT ID FROM evloc WHERE maglok = ? AND magcode = ?", Array(vntValue, f.value))
                If (IsEmpty(vRetval) = True) Then
                    sError = g_App.Term.String(11337, "Not found")
                Else
                    bValid = True
                    sError = ""
                End If
            Else
                If bAllowEmpty Then
                    bValid = True
                    sError = ""
                End If
            End If
        End If
    
    Case "item"
    'BR19.014.959 - ngwa112107 - 20060502 - Wrong validation here! Check with artbst table to validate.
''        bValid = True
''        sError = ""
        If Len(Trim(vntValue)) > 0 Then
            vRetval = cnn.Query("SELECT TOP 1 artcode FROM artbst WHERE artcode = ?", vntValue)
            If (IsEmpty(vRetval) = True) Then
                bValid = False
                sError = g_App.Term.String(11337, "Not found")
            Else
                bValid = True
                sError = ""
            End If
        End If
    'End:BR19.014.959
    
    Case "main_class_cd", _
         "sub_class_cd", _
         "class_code", _
         "sub_class_code", _
         "acc_nr", _
         "cu", _
         "account", _
         "cc", _
         "deb_nr":  'OOIP229616 - FC29.341.602 - 16/01/2009 - Add deb_nr (debtor fip)
        '[adam21726 22-11-2002 13:37]
        'this fips can contain range abc:def
        
        If (bValid = False) Then
            If (InStr(1, vntValue, ":") > 1 And _
                InStr(1, vntValue, ":") < Len(vntValue)) Then
                'lets check both parts
                sPart = Split2(vntValue, ":")
                If (UBound(sPart) = 1) Then
                    Set f = GetFip(nIndex)
                    f.value = sPart(0)
                    bValid = f.Validate
                    sError = f.Error
                    
                    If (bValid = True) Then
                        f.value = sPart(1)
                        bValid = f.Validate
                        sError = f.Error
                        
                        If (bValid = True) Then
                            If sPart(0) > sPart(1) = True Then
                                bValid = False
                                sError = sPart(0) & " " & g_App.Term.String(5876, "less than") & " " & sPart(1)
                            End If
                        End If
                        
                        If (bValid = False) Then sError = sError & "(" & LCase$(g_App.Term.String(4211, "Range") & "; " & g_App.Term.String(8165, "To")) & ")"
                    Else
                        sError = sError & "(" & LCase$(g_App.Term.String(4211, "Range") & "; " & g_App.Term.String(22921, "From")) & ")"
                    End If
                        
                Else
                    bValid = False
                    sError = g_App.Term.String(20006, "Invalid") & ": " & LCase$(g_App.Term.String(24733, "Selection range") & "; " & g_App.Term.String(2411, "Format"))
                End If
                    
                
            ElseIf (InStr(1, vntValue, ":") = 1 Or (InStr(1, vntValue, ":") = Len(vntValue) And Len(vntValue) > 0)) Then
           
                'not compatible with 8.0!
                'sPart = Replace(vntValue, ":", "")
                sPart = ReplaceString(vntValue, ":", "")
                If Len(Trim(sPart)) <> 0 Then
                    Set f = GetFip(nIndex)
                    f.value = sPart
                    bValid = f.Validate
                    sError = f.Error
                    
                    If (bValid = False) Then
                        If InStr(1, vntValue, ":") = 1 Then
                            sError = sError & "(" & LCase$(g_App.Term.String(4211, "Range") & "; " & g_App.Term.String(8165, "To")) & ")"
                        ElseIf InStr(1, vntValue, ":") = Len(vntValue) Then
                            sError = sError & "(" & LCase$(g_App.Term.String(4211, "Range") & "; " & g_App.Term.String(22921, "From")) & ")"
                        End If
                    End If
                Else
                    bValid = False
                    sError = g_App.Term.String(20006, "Invalid") & ": " & LCase$(g_App.Term.String(24733, "Selection range") & "; " & g_App.Term.String(2411, "Format"))
                End If
            
            'Start OOIP229616 - FC29.341.602 - 16/01/2009 - Move Debtor Code checking to here, because allow user to key in debtor code in range.
            ElseIf sField = "deb_nr" Then
                If vntValue <> "" Then
                    vRetval = cnn.Query("SELECT ID FROM cicmpy WHERE debcode = ?", Format$(vntValue, "@@@@@@@@@@@@@@@@@@@@"))
                    If (IsEmpty(vRetval) = True) Then
                        bValid = False
                        sError = g_App.Term.String(11337, "Not found")
                    Else
                        bValid = True
                        sError = ""
                        vntValue = Format(vntValue, "@@@@@@@@@")
                    End If
                End If
            'End OOIP229616 - FC29.341.602 - 16/01/2009
            
            ElseIf (InStr(1, vntValue, ",") > 1 And _
                InStr(1, vntValue, ",") < Len(vntValue)) Then
                
                sPart = SplitComma(vntValue, ",")
                If UBound(sPart) > 0 Then
                    i = UBound(sPart)
                    Do Until i = -1
                    Set f = GetFip(nIndex)
                    f.value = sPart(i)
                    bValid = f.Validate
                    sError = f.Error
                    i = i - 1
                    If (bValid = False) Then
                        sError = g_App.Term.String(20006, "Invalid") & ": " & LCase$(g_App.Term.String(24733, "Selection range") & "; " & g_App.Term.String(2411, "Format"))
                        Exit Sub
                    End If
                    Loop
                End If
            
            ElseIf (InStr(1, vntValue, "*") > 0) Then
                bValid = True
                sError = ""
            
            ElseIf (InStr(1, vntValue, "?") > 0) Then
                bValid = True
                sError = ""
            'BR 15.316.076 yong107021 validate GL account when key in on fip
            'BR 15.903.487 onye177030 add account
            ElseIf sField = "acc_nr" Or sField = "account" Then
                If Len(Trim(vntValue)) > 0 Then
                    'BR 15.903.487 onye177030 add filter " omzrek IN ('K','J','N') AND bal_vw= 'W'" for account
                    'vRetval = cnn.Query("SELECT reknr FROM grtbk WHERE reknr = ? " , Format(vntValue, "@@@@@@@@@"))
                    vRetval = cnn.Query("SELECT reknr FROM grtbk WHERE reknr = ? " & IIf(sField = "account", " AND omzrek IN ('K','J','N') AND bal_vw= 'W'", ""), Format(vntValue, "@@@@@@@@@"))
                    If (IsEmpty(vRetval) = True) Then
                        bValid = False
                        sError = g_App.Term.String(11337, "Not found")
                    Else
                        bValid = True
                        sError = ""
                        vntValue = Format(vntValue, "@@@@@@@@@")
                    End If
                End If
            End If
        End If
    Case "facode":
        If Len(Trim(vntValue)) > 0 Then
            vRetval = cnn.Query("SELECT ID FROM facard WHERE assetcode = ?", vntValue)
            If (IsEmpty(vRetval) = True) Then
                bValid = False
                sError = g_App.Term.String(11337, "Not found")
            Else
                bValid = True
                sError = ""
            End If
        End If
        
    Case "date":
        If Len(Trim(vntValue)) > 0 Then
            Dim fipYear As fip, fipPeriod As fip
            Dim lYear As Long, lPeriod As Long
            Dim s As esl.ISettings
            Dim vCheck As Variant, vDate As Variant
            
            Set s = m_Conn.Company
            
            Set f = GetFip("date")
            Set fipYear = GetFip("FY")
            Set fipPeriod = GetFip("period")
            ' BR 14.701.735 ysbr
            If Not fipYear Is Nothing And Not fipPeriod Is Nothing Then
                If (Trim(fipYear.value) = "" Or Trim(fipYear.value) <> "") And Trim(fipPeriod.value) = "" Then
                    If Trim(fipYear.value) <> "" Then
                        lYear = fipYear.value
                    Else
                        lYear = ECY2FY(s("eaccount\default_boekjaar,c"))
                    End If
                
                    vCheck = cnn.Query("SELECT 1 FROM perdat WHERE " & cnn.LitDate(f.value) & " BETWEEN bgdatum AND eddatum AND bkjrcode = ? ", lYear, edlNoNulls)
                    
                    If Not IsEmpty(vCheck) Then
                        bValid = True
                    Else
                        bValid = False
                        vDate = cnn.Query("SELECT MIN(bgdatum), MAX(eddatum) FROM perdat WHERE bkjrcode = ? ", lYear, edlNoNulls)
                        If Not IsEmpty(vDate) Then
                            sError = g_App.Term.String(9022, "Must be between") & ": " & CDate(vDate(1)) & " " & _
                                     g_App.Term.String(5875, "And") & " " & CDate(vDate(2))
                        End If
                    End If
                Else
                    If Trim(fipYear.value) <> "" Then
                        lYear = fipYear.value
                    Else
                        lYear = ECY2FY(s("eaccount\default_boekjaar,c"))
                    End If
                    
                    lPeriod = fipPeriod.value
                    
                    vCheck = cnn.Query("SELECT 1 FROM perdat WHERE " & cnn.LitDate(f.value) & " BETWEEN bgdatum AND eddatum AND bkjrcode = ? AND per_fin = ?", _
                                       Array(lYear, lPeriod), edlNoNulls)
                                       
                    If Not IsEmpty(vCheck) Then
                        bValid = True
                    Else
                        bValid = False
                        vDate = cnn.Query("SELECT bgdatum, eddatum FROM perdat WHERE bkjrcode = ? AND per_fin = ?", _
                                           Array(lYear, lPeriod), edlNoNulls)
                        If Not IsEmpty(vDate) Then
                            sError = g_App.Term.String(9022, "Must be between") & ": " & CDate(vDate(1)) & " " & _
                                     g_App.Term.String(5875, "And") & " " & CDate(vDate(2))
                        End If
                    End If
                End If
            End If
        End If
    'BR25.563.173 - ngwa112107: [ISSUE]: For itemcode, it is case sensitive. Always pass value in uppercase.
    '[SOLUTION]: Convert ItemCode value to uppercase when found.
    Case "item_code"
        vntValue = UCase(vntValue)
    'End:BR25.563.173
    Case Else
        '[adam21726 21-10-2002 09:57] always pass (the original) validation result
        'bValid = True
    End Select
        
CleanUp:
    Set cnn = Nothing
    Set f = Nothing
    
Exit Sub
ErrorHandler:
    Err.Source = "frmFunction::fip_EValidate(" & nIndex & ")"
    Call ProcessError(Err, slcFuncData.hWnd)
    
    GoTo CleanUp
End Sub

Private Sub m_fip1_ButtonClick(): fip_ButtonClick 1: End Sub
Private Sub m_fip2_ButtonClick(): fip_ButtonClick 2: End Sub
Private Sub m_fip3_ButtonClick(): fip_ButtonClick 3: End Sub
Private Sub m_fip4_ButtonClick(): fip_ButtonClick 4: End Sub
Private Sub m_fip5_ButtonClick(): fip_ButtonClick 5: End Sub
Private Sub m_fip6_ButtonClick(): fip_ButtonClick 6: End Sub
Private Sub m_fip7_ButtonClick(): fip_ButtonClick 7: End Sub
Private Sub m_fip8_ButtonClick(): fip_ButtonClick 8: End Sub
Private Sub m_fip9_ButtonClick(): fip_ButtonClick 9: End Sub
Private Sub m_fip10_ButtonClick(): fip_ButtonClick 10: End Sub
Private Sub m_fip11_ButtonClick(): fip_ButtonClick 11: End Sub
Private Sub m_fip12_ButtonClick(): fip_ButtonClick 12: End Sub
Private Sub m_fip13_ButtonClick(): fip_ButtonClick 13: End Sub
Private Sub m_fip14_ButtonClick(): fip_ButtonClick 14: End Sub
Private Sub m_fip15_ButtonClick(): fip_ButtonClick 15: End Sub
Private Sub m_fip16_ButtonClick(): fip_ButtonClick 16: End Sub
Private Sub m_fip17_ButtonClick(): fip_ButtonClick 17: End Sub
Private Sub m_fip18_ButtonClick(): fip_ButtonClick 18: End Sub
Private Sub m_fip19_ButtonClick(): fip_ButtonClick 19: End Sub 'BR21.769.636 foon36643:G2003 - Excel Add In - CAT_BAL Function gives an error message when all CC categories hay a subcategory

Private Sub m_fip1_Change(): fip_Change 1: End Sub
Private Sub m_fip2_Change(): fip_Change 2: End Sub
Private Sub m_fip3_Change(): fip_Change 3: End Sub
Private Sub m_fip4_Change(): fip_Change 4: End Sub
Private Sub m_fip5_Change(): fip_Change 5: End Sub
Private Sub m_fip6_Change(): fip_Change 6: End Sub
Private Sub m_fip7_Change(): fip_Change 7: End Sub
Private Sub m_fip8_Change(): fip_Change 8: End Sub
Private Sub m_fip9_Change(): fip_Change 9: End Sub
Private Sub m_fip10_Change(): fip_Change 10: End Sub
Private Sub m_fip11_Change(): fip_Change 11: End Sub
Private Sub m_fip12_Change(): fip_Change 12: End Sub
Private Sub m_fip13_Change(): fip_Change 13: End Sub
Private Sub m_fip14_Change(): fip_Change 14: End Sub
Private Sub m_fip15_Change(): fip_Change 15: End Sub
Private Sub m_fip16_Change(): fip_Change 16: End Sub
Private Sub m_fip17_Change(): fip_Change 17: End Sub
Private Sub m_fip18_Change(): fip_Change 18: End Sub
Private Sub m_fip19_Change(): fip_Change 19: End Sub 'BR21.769.636 foon36643:G2003 - Excel Add In - CAT_BAL Function gives an error message when all CC categories hay a subcategory

Private Sub m_fip1_EValidate(vntValue As Variant, sError As String, bValid As Boolean): fip_EValidate 1, vntValue, sError, bValid: End Sub
Private Sub m_fip2_EValidate(vntValue As Variant, sError As String, bValid As Boolean): fip_EValidate 2, vntValue, sError, bValid: End Sub
Private Sub m_fip3_EValidate(vntValue As Variant, sError As String, bValid As Boolean): fip_EValidate 3, vntValue, sError, bValid: End Sub
Private Sub m_fip4_EValidate(vntValue As Variant, sError As String, bValid As Boolean): fip_EValidate 4, vntValue, sError, bValid: End Sub
Private Sub m_fip5_EValidate(vntValue As Variant, sError As String, bValid As Boolean): fip_EValidate 5, vntValue, sError, bValid: End Sub
Private Sub m_fip6_EValidate(vntValue As Variant, sError As String, bValid As Boolean): fip_EValidate 6, vntValue, sError, bValid: End Sub
Private Sub m_fip7_EValidate(vntValue As Variant, sError As String, bValid As Boolean): fip_EValidate 7, vntValue, sError, bValid: End Sub
Private Sub m_fip8_EValidate(vntValue As Variant, sError As String, bValid As Boolean): fip_EValidate 8, vntValue, sError, bValid: End Sub
Private Sub m_fip9_EValidate(vntValue As Variant, sError As String, bValid As Boolean): fip_EValidate 9, vntValue, sError, bValid: End Sub
Private Sub m_fip10_EValidate(vntValue As Variant, sError As String, bValid As Boolean): fip_EValidate 10, vntValue, sError, bValid: End Sub
Private Sub m_fip11_EValidate(vntValue As Variant, sError As String, bValid As Boolean): fip_EValidate 11, vntValue, sError, bValid: End Sub
Private Sub m_fip12_EValidate(vntValue As Variant, sError As String, bValid As Boolean): fip_EValidate 12, vntValue, sError, bValid: End Sub
Private Sub m_fip13_EValidate(vntValue As Variant, sError As String, bValid As Boolean): fip_EValidate 13, vntValue, sError, bValid: End Sub
Private Sub m_fip14_EValidate(vntValue As Variant, sError As String, bValid As Boolean): fip_EValidate 14, vntValue, sError, bValid: End Sub
Private Sub m_fip15_EValidate(vntValue As Variant, sError As String, bValid As Boolean): fip_EValidate 15, vntValue, sError, bValid: End Sub
Private Sub m_fip16_EValidate(vntValue As Variant, sError As String, bValid As Boolean): fip_EValidate 16, vntValue, sError, bValid: End Sub
Private Sub m_fip17_EValidate(vntValue As Variant, sError As String, bValid As Boolean): fip_EValidate 17, vntValue, sError, bValid: End Sub
Private Sub m_fip18_EValidate(vntValue As Variant, sError As String, bValid As Boolean): fip_EValidate 18, vntValue, sError, bValid: End Sub
Private Sub m_fip19_EValidate(vntValue As Variant, sError As String, bValid As Boolean): fip_EValidate 19, vntValue, sError, bValid: End Sub 'BR21.769.636 foon36643:G2003 - Excel Add In - CAT_BAL Function gives an error message when all CC categories hay a subcategory

Private Sub m_fipCompany_Change()
'    Set m_conn = g_Ses.Connection(g_Glob.ParamValue(m_fipCompany.value))
'    Dim v As esl.ValueSet
'    Set v = slcFuncData.value
'    InitFuncData
'    slcFuncData.value = v
    'Dim comp As esl.Company
    'If Not g_Ses Is Nothing Then
    '    Set comp = g_Ses.Connection(m_fipCompany.value).Company
    '    If Not comp Is Nothing Then
    '        If Not ExactOption(comp, OPT_EXCEL_ADD_IN) Then
    '            Call ShowNoRightsMessage
    '            SendKeys "%{F4}"
    '            Exit Sub
    '        End If
    '    End If
    'End If

    If m_Conn <> g_Ses.Connection(g_Glob.ParamValue(m_fipCompany.value)) Then
        Set m_Conn = g_Ses.Connection(g_Glob.ParamValue(m_fipCompany.value))
        FillFunctionList
        InitFuncData
    End If
End Sub

Private Sub m_fipFunction_Change()
    
    InitFuncData
End Sub

Private Sub cmdOK_Click()
On Error GoTo ErrorHandler


    If (slcFuncData.Validate = False) Then
        '[adam21726 18-10-2002 16:41] display message and set focus to invalid fip
        Call SetFocusToErrorFip(slcFuncData)
    Else
        Me.Hide
        DoEvents
        Application.ScreenUpdating = False
        Dim func As exl.IExlConnectionFunctions
        Set func = m_Conn
        func.SaveToWorkbook ActiveWorkbook

        'WARNING: parameter with dubble quotes causes RE in here
        ActiveCell.value = GetFunction
        Application.ScreenUpdating = True
   
    End If
    
    
Exit Sub
ErrorHandler:
    Err.Source = "frmFunction::cmdOK_Click"
    Call ProcessError(Err, slcFuncData.hWnd)
End Sub
Private Sub InitFuncEmbedded()
    slcFuncMain.Script = GetEmbeddedSlic
    
    g_App.ConnectObject slcFuncMain, Nothing, g_App.Term
    Set m_State = slcFuncMain
    
    InitFuncHead
    InitDummyData
    slcFuncMain.Refresh     'Need this after InitDummyData to free space for the fips
    InitFuncData
    'slcFuncMain.Refresh     'Resize slic again so that it will not overlapping the action buttons
End Sub

Private Sub slcFuncMain_ButtonClick(ByVal nActionType As Long, ByVal sName As String, ByVal sAction As String, ByVal sParams As String)
    Select Case UCase(sName)
    Case "CMDOK"
        cmdOK_Click
        
    Case "CMDCANCEL"
        SendKeys "%{F4}"
    End Select
    
End Sub

Private Sub UserForm_Activate()
    If Not m_fipFunction Is Nothing Then
        SetFocus m_fipFunction.hWnd
    End If
End Sub

Private Sub UserForm_Initialize()
    Set m_gfx = New esl.Graphics
    Me.BackColor = m_gfx.Color(ecolActiveBackground)
    Me.Caption = g_App.Term.String(6344, "Function")
    Set m_Conn = g_Ses.Connection(g_Ses.DefaultID)
    If Not m_Conn Is Nothing Then
        On Error Resume Next
        InitFuncEmbedded
    End If
    'Workaround: This is commented out and put into InitDummyData. InitDummyData initializes
    '            slic for the first time and makes enough space for fips
    'slcFuncMain.Refresh
End Sub

Private Sub InitDummyData()
    Set slcFuncData = m_State.Unknown("slcMain")
    slcFuncData.Script = GetSlcDummySlic
    g_App.ConnectObject slcFuncData, Nothing, g_App.Term
    slcFuncData.Refresh
End Sub

Public Function Init(ByVal nRow As Long, ByVal sParams As String) As Boolean
    On Error Resume Next
    Dim sSeparator As String:
    'sSeparator = Application.International(xlListSeparator)
    sSeparator = ","
    
    Dim nParam As Long, sParam As String, sValue As String
    Dim nOffs As Long, nPos As Long, char As String, fLast As Boolean, sPos As Long
    Dim nCtl As Long, ctl As slui.fip
    Dim v As esl.ValueSet, vnt As Variant
    Dim sChecking As Boolean
    
    Init = False
    
    SetCompanyFip nRow, sParams
    
    m_fipFunction.value = nRow: DoEvents
    
    nParam = 1: nCtl = 1: nOffs = 2
    nPos = InStr(nOffs, sParams, sSeparator)
    
    If nPos = 0 Then
        nPos = Len(sParams)
        fLast = True
    End If
    
    Do While nPos > 0
        
        sParam = shtFunc.Cells(nRow, nParam + 1).value
        sValue = Trim(Mid(sParams, nOffs, nPos - nOffs))
        sChecking = False
        If Len(sValue) > 0 Then
        
            'Look for "" to indicate the complete string
            sPos = InStr(1, sValue, """")
            If sPos > 0 Then
                If Mid(sValue, Len(sValue), 1) = """" Then
                    
                Else
                    Do Until sChecking = True
                        'Check for the next comma separator
                        nPos = InStr(nPos + 1, sParams, sSeparator)
                        'Assign the new string to sValue
                        sValue = Trim(Mid(sParams, nOffs, nPos - nOffs))
                        'Check again for the "" to indicate the complete string
                        sPos = InStr(2, sValue, """")
                        If sPos > 0 Then
                            'If found, then string completed
                            sChecking = True
                        Else
                            'Continue look for the string
                            sChecking = False
                        End If
                    Loop
                End If
            End If
            char = UCase(Left(sValue, 1))
            
            If char = Chr(34) Then
                sValue = Mid(sValue, 2, Len(sValue) - 2)
            ElseIf ((char >= "A") And (char <= "Z")) Or char = "$" Then
                sValue = "=" & sValue
            End If

            If sParam <> "[co]" And sParam <> "[skip]" And Not HideParam(sParam) Then
                Set ctl = m_stFuncData.Unknown("Fip" & nCtl)
                ctl.value = sValue
            End If
        End If
        
        If fLast Then Exit Do
        
        If sParam <> "[co]" And sParam <> "[skip]" And Not HideParam(sParam) Then
            nCtl = nCtl + 1
        End If
        
        nParam = nParam + 1
        nOffs = nPos + 1
        nPos = InStr(nOffs, sParams, sSeparator)
        
        If nPos = 0 Then
            nPos = Len(sParams)
            fLast = True
        End If
    Loop
    
    If Not m_Conn Is Nothing Then
        If m_Conn.Connected Then
            Init = True
        End If
    End If
End Function

Private Sub SetCompanyFip(ByVal nRow As Long, sParams As String)
    On Error Resume Next
    Dim sSeparator As String:
    'sSeparator = Application.International(xlListSeparator)
    sSeparator = ","
    
    Dim nParam As Long, sParam As String, sValue As String
    Dim nOffs As Long, nPos As Long, char As String, fLast As Boolean
    Dim nCtl As Long, ctl As slui.fip
    Dim v As esl.ValueSet, vnt As Variant

    nParam = 1: nCtl = 1: nOffs = 2
    nPos = InStr(nOffs, sParams, sSeparator)
    
    'we first have to set the company and after that the function
    'before we can start setting the parameters.
    '******************************************************************************
    If nPos = 0 Then
        nPos = Len(sParams)
        fLast = True
    End If
    
    Do While nPos > 0
        
        sParam = shtFunc.Cells(nRow, nParam + 1).value
        sValue = Trim(Mid(sParams, nOffs, nPos - nOffs))
        
        If Len(sValue) > 0 Then
        
            char = UCase(Left(sValue, 1))
            
            If char = Chr(34) Then
                sValue = Mid(sValue, 2, Len(sValue) - 2)
            ElseIf ((char >= "A") And (char <= "Z")) Or char = "$" Then
                sValue = "=" & sValue
            End If
            
            If sParam = "[co]" Then
                Set v = m_fipCompany.TestValues
                If Not v.Find(sValue, vnt) Then
                    sValue = -1
                    'v.Add sValue, g_App.Term.String(8413, "Cell") & ": " & Mid(sValue, 2)
                End If
                
                m_fipCompany.value = sValue
                Exit Sub
            End If
        End If
            
        If fLast Then Exit Do
                
        nParam = nParam + 1
        nOffs = nPos + 1
        nPos = InStr(nOffs, sParams, sSeparator)
        
        If nPos = 0 Then
            nPos = Len(sParams)
            fLast = True
        End If
    Loop
End Sub


Attribute VB_Name = "frmGenerate"
Attribute VB_Base = "0{632302D4-F2F8-4D1B-B27C-808900EBBF29}{1FA88727-F431-427F-BD93-E003A7641276}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private m_gfx As esl.Graphics
Private m_Conn As exl.IExlConnection
Private m_rep As exl.IExlReport
Private m_wiz As exl.IExlWizard
Private m_wizSlic As exl.IExlWizardSlic
Private m_stWizHead As esl.ISlicState
Private m_State As esl.ISlicState

Private WithEvents slcWizData As Slic
Attribute slcWizData.VB_VarHelpID = -1

Private WithEvents slcWizHead As Slic
Attribute slcWizHead.VB_VarHelpID = -1

Private WithEvents m_fipCompany As slui.ProxyFip
Attribute m_fipCompany.VB_VarHelpID = -1

Private WithEvents m_fipWizard As slui.ProxyFip
Attribute m_fipWizard.VB_VarHelpID = -1

Private WithEvents m_btnNew As slui.ProxyFlatButton
Attribute m_btnNew.VB_VarHelpID = -1


Private WithEvents m_ValueFip As slui.fip
Attribute m_ValueFip.VB_VarHelpID = -1


Private Sub cmdOK_Click()
On Error GoTo ErrorHandler
Dim i As Integer
    If (slcWizData.Validate = False) Then
        '[adam21726 10-10-2002 13:43] display message and set focus to invalid fip
        Call SetFocusToErrorFip(slcWizData)

    Else
        Call g_Ses.EnableControl("Update", False)
        Call g_Ses.EnableControl("Refresh", False)
        
        Me.Hide
        DoEvents
        Application.ScreenUpdating = False
        
        'BR 10.696.124
        Select Case LCase$(m_fipWizard.value)
        'BR21.785.079 foon36643:Excel Add-in sheet not totally refreshed after changing the SQL query
        'Clean the worksheet first before new query is display
            Case "select"
            'BR21.976.259 foon36643:Excel add-in: Entire excel sheet is erased by pressing of OK button - in reports: select
            'Revert BR: 21.785.079 changes
'                For i = 1 To Worksheets.Count
'                    If Not (Worksheets(i).ProtectContents) Then
'                        Worksheets(i).Range("1:65536").Clear
'                    Else
'                        Worksheets(i).Name = Worksheets(i).Name & i
'                    End If
'                Next
            Case "table"
            'BR40.097.777 - Old data not clear when filtering change causing old data still shown
            If Not m_rep Is Nothing Then m_rep.Range.CurrentRegion.Clear
            
            Case Else
                'BR: 10.095.997 Kavien Poon
                'Check for existing report in the workbook
                If g_Ses.Reports(ActiveWorkbook).Count > 0 Then
                    Dim oResult As VbMsgBoxResult
                    oResult = MsgBox(g_App.Term.String(5259, "Exit current worksheet") & "?", vbYesNoCancel + vbQuestion)
                    
                    If oResult = vbNo Then
                        'Use the existing active workbook
                        
                        ' BR 14.987.494 - yong107021
                        ' Check for protected sheet before clear
                        For i = 1 To Worksheets.Count
                            If Not (Worksheets(i).ProtectContents) Then
                                Worksheets(i).Range("1:65536").Clear
                            Else
                                Worksheets(i).Name = Worksheets(i).Name & i
                            End If
                        Next
                        'BR18.803.271 foon36643: Activate worksheet for 2nd time on same sheet
                        If Charts.Count > 0 Then
                            Application.DisplayAlerts = False
                            Application.Charts.Delete
                            Application.DisplayAlerts = True
                        End If
                    ElseIf oResult = vbYes Then
                        'Create a new workbook
                        On Error Resume Next
                        
                        If Not m_rep Is Nothing Then Set m_rep = Nothing
                        
                        Dim oNewWorkbook As Workbook
                        Set oNewWorkbook = Application.Workbooks.Add
                        oNewWorkbook.Activate
                        DoEvents
            
                        Dim reps As exl.IExlReports
                        Set reps = g_Ses.Reports(ActiveWorkbook)
                        Set m_rep = reps(ActiveCell)
                        
                        If m_rep Is Nothing Then
                            Set m_rep = reps.Add(ActiveCell, Nothing)
                            
                            Set m_wiz = g_Ses.Wizard(m_fipWizard.value)
                            m_wiz.Initialize g_Ses, m_Conn, m_rep
                        End If
                        DoEvents
                    Else
                        'Exit the wizard
                        GoTo ExitWizard
                    End If
                End If
        End Select
        
        ' create hyperlink if it is budget
        If m_fipWizard.value = g_App.Term.String(8391, "budget") Then InitDblClickEvent
        Dim func As exl.IExlConnectionFunctions
        Set func = m_Conn
        func.SaveToWorkbook ActiveWorkbook
        
        Dim v As esl.ValueSet
        Set v = m_wizSlic.value
        v.Add "System", slcWizHead.value
        If v.value("System.Company") = "-1" Then
            v.value("System.Company") = g_Ses.DefaultID
        End If
        
        Dim es As ERROR_STRUCTURE2
        
        On Error Resume Next
        If m_fipWizard.Enabled = False Then v.Add "System.Wizard", m_fipWizard.value
        
        '////////////////////////////////
        With Err
            es.Number = .Number
            es.Source = .Source
            es.Description = .Description
        End With
        On Error GoTo ErrorHandler
        
        Select Case (es.Number)
        Case 0, -2147467259:
            'continue
        Case Else
            Call Err.Raise(es.Number, es.Source, es.Description)
        End Select
        
        '////////////////////////////////
        'Dim upd As exl.IExlWizardUpdate
        'Set upd = m_wiz
        v.Add "System.Update", (Not m_wiz Is Nothing)
        Set m_rep.value = v
        Call m_wiz.Generate
        m_rep.RunMacro

'BR: 10.095.997 Kavien Poon
'Label to exit the wizard
ExitWizard:
        
        'check "Update"-item for status
        Call g_Ses.EnableControl("Update", IsDataUpdatable)
        Call g_Ses.EnableControl("Refresh", True)
        
        'g_Ses.UpdateUI
        Application.ScreenUpdating = True
    End If
    
    
Exit Sub
ErrorHandler:
    Err.Source = "frmGenerate::cmdOK_Click"
    Call ProcessError(Err, slcWizData.hWnd)
End Sub

Private Sub FillCompanyList()
    Dim v As esl.ValueSet, conn As exl.IExlConnection, vnt As Variant
    Set v = m_fipCompany.TestValues
    v.Clear
    If g_Ses.AvailableWizards(g_Ses.Connection(-1)).Count > 0 Then
        v.Add -1, g_App.Term.String(8521, "Default")
    End If
    For Each conn In g_Ses.Connections
        If conn.Connected Then
            Call SetCompanyInfoIntoExcel(conn.ID) 'BR35.262.289
            If m_fipWizard.Enabled Then
                If g_Ses.AvailableWizards(conn).Count > 0 Then
                    v.Add conn.ID, conn.ID & " " & conn.Description
                End If
            ElseIf g_Ses.AvailableWizards(conn).Find(m_fipWizard.value, vnt) Then
                v.Add conn.ID, conn.ID & " " & conn.Description
            End If
        End If
    Next conn
    If v.Find(-1, vnt) Then
        m_fipCompany.value = -1
    End If
End Sub

Private Sub FillWizardList()
    Dim v As esl.ValueSet
    Set v = g_Ses.AvailableWizards(m_Conn)
    m_fipWizard.TestValues.Clear
    Dim nIndex As Long
    For nIndex = 0 To v.Count - 1
        Dim sWizard As String, sDescription As String
        sWizard = v.Item(nIndex)
       'BR18.762.564 foon36643:Change the description from aging analysis to receivable/payable to hv consistent with FDUC and FCUC
        If sWizard = "Outstanding" Then
            sDescription = g_App.Term.String(32542, "Receivables") & "/" & g_App.Term.String(32539, "Payables")
        Else
            sDescription = v.value(sWizard)
        End If
        m_fipWizard.TestValues.Add sWizard, sDescription
    Next nIndex
End Sub

Private Sub InitWizEmbedded()
    slcWizMain.Script = GetEmbeddedSlic
    
    g_App.ConnectObject slcWizMain, Nothing, g_App.Term
    Set m_State = slcWizMain
    Set m_fipCompany = m_State.Proxy("Company")
    
    InitWizHead
End Sub

Private Sub InitWizHead()
    Set slcWizHead = m_State.Unknown("slcHead")
    slcWizHead.Script = GetWizHeadSlic

    g_App.ConnectObject slcWizHead, Nothing, g_App.Term
    
    Set m_stWizHead = slcWizHead
    Set m_fipCompany = m_stWizHead.Proxy("Company")
    Set m_fipWizard = m_stWizHead.Proxy("Wizard")
    Set m_btnNew = m_stWizHead.Proxy("New")
    FillCompanyList
    FillWizardList
    slcWizHead.Refresh
End Sub

Private Sub InitWizData()
On Error GoTo Failed


    Set slcWizData = m_State.Unknown("slcMain")
    
    Set m_wiz = g_Ses.Wizard(m_fipWizard.value)
    m_wiz.Initialize g_Ses, m_Conn, m_rep
    Set m_wizSlic = m_wiz
    
    g_App.ConnectObject slcWizData, m_Conn.Company, g_App.Term
    
    slcWizData.Script = m_wizSlic.Script
    Dim sst As esl.ISlicState
    Set sst = slcWizData
    Set m_wizSlic.State = sst
    
    'only for [Tabel data]-report
    '[adam21726 24-10-2002 13:52] we need 'Value'-fip for workaround(04.548.061)
    If (LCase$(m_fipWizard.value) = "table") Then
        Set m_ValueFip = sst.Unknown("Value")
    Else
        Set m_ValueFip = Nothing
    End If
    slcWizData.Refresh
    '2005-09-30;chin111989; BR 16.680.429 Refresh n resize the slic
    slcWizMain.Refresh
    
    
Exit Sub
Failed:
    '?
End Sub

Private Sub RestoreSlic(ByVal v As esl.IValueSet)
    slcWizHead.value = v.value("System")
    v.Remove "System"
    UpdateRestoreSettings v 'BR18.764.257 - ngwa112107 - 20050413 - Do some touch up to range settings before display
    Set m_wizSlic.value = v
End Sub

Private Sub m_action_ButtonClick(ByVal nActionType As Long, ByVal sName As String, ByVal sAction As String, ByVal sParams As String)

End Sub

Private Sub m_btnNew_Click()
    Dim conn As exl.IExlConnection
    'Set conn = g_Ses.CreateConnection
    Set conn = AddNewConnection(m_State.Form("").Window)
    
    If (Not conn Is Nothing) Then
        If g_Ses.AvailableWizards(conn).Count > 0 Then
            FillCompanyList
            m_fipCompany.value = conn.ID
        Else
            Call ShowNoRightsMessage
        End If
        
        Set conn = Nothing
    End If
    
End Sub

Private Sub m_fipCompany_Change()
    'Dim comp As esl.Company
    'If Not g_Ses Is Nothing Then
    '    Set comp = g_Ses.Connection(m_fipCompany.value).Company
    '    If Not comp Is Nothing Then
    '        If Not ExactOption(comp, OPT_EXCEL_ADD_IN) Then
    '            Call ShowNoRightsMessage
    '            SendKeys "%{F4}"
    '            Exit Sub
    '        End If
    '    End If
    'End If

    If m_Conn <> g_Ses.Connection(m_fipCompany.value) Then
        Set m_Conn = g_Ses.Connection(m_fipCompany.value)
        Dim sWizard As String
        Dim vWizard As Variant
        sWizard = m_fipWizard.value
        FillWizardList
        If m_fipWizard.TestValues.Find(sWizard, vWizard) Then
            m_fipWizard.value = sWizard
        End If
        InitWizData
    End If
End Sub

Private Sub m_fipWizard_Change()
    InitWizData
End Sub

Private Sub m_ValueFip_EValidate(vntValue As Variant, sError As String, bValid As Boolean)
    '[adam21726 24-10-2002 13:52] if as invalid marked 'Value'-fip is disabled it's ok(04.548.061)
    If (m_ValueFip.Enabled = False) Then
        m_ValueFip.Error = ""
        sError = ""
        bValid = True
    End If
    
End Sub

Private Sub slcWizMain_ButtonClick(ByVal nActionType As Long, ByVal sName As String, ByVal sAction As String, ByVal sParams As String)
    Select Case UCase(sName)
    Case "CMDOK"
        cmdOK_Click
        
    Case "CMDCANCEL"
        SendKeys "%{F4}"
    End Select
End Sub

Private Sub UserForm_Activate()
    If Not m_fipWizard Is Nothing Then
        SetFocus m_fipWizard.hWnd
    End If
End Sub

Private Sub UserForm_Initialize()
    Set m_gfx = New esl.Graphics
    Me.BackColor = m_gfx.Color(ecolActiveBackground)
    Me.Caption = g_App.Term.String(1422, "Reports")
    Set m_Conn = g_Ses.Connection(g_Ses.DefaultID)
    
    'Dim comp As esl.Company
    'If Not g_Ses Is Nothing Then
    '    Set comp = m_Conn.Company
    '    If Not comp Is Nothing Then
    '        If Not ExactOption(comp, OPT_EXCEL_ADD_IN) Then
    '            Call ShowNoRightsMessage
    '            SendKeys "%{F4}"
    '            Exit Sub
    '        End If
    '    End If
    'End If
    
    If Not m_Conn Is Nothing Then
        On Error Resume Next
        InitWizEmbedded
        Dim reps As exl.IExlReports
        Dim i As Integer
        'BR18.803.271 foon36643: Activate worksheet for 2nd time on same sheet
        If ActiveCell Is Nothing Then
            For i = 1 To Worksheets.Count
                 If Not (Worksheets(i).ProtectContents) Then
                     ActiveWorkbook.Worksheets(i).Activate
                 End If
             Next
        End If
        Set reps = g_Ses.Reports(ActiveWorkbook)
        Set m_rep = reps(ActiveCell)
        'Refresh slic with the Dummy slic to give it proper height
        InitDummyData
        slcWizMain.Refresh
        'BR16.443.886
        'Resize form to fit in all fip control
        slcWizMain.Width = slcWizMain.Width + 50
        Width = slcWizMain.Width
        If m_rep Is Nothing Then
            Set m_rep = reps.Add(ActiveCell, Nothing)
            InitWizData
            'BR 14.402.131
            'This code is to ensure event raised completely while user access excel add-in via terminal server
            Dim v As esl.ValueSet
            Set v = g_Ses.AvailableWizards(m_Conn)
            If v.Count > 3 Then
                m_fipWizard.value = v.Item(2)
                m_fipWizard.value = v.Item(0)
            End If
            slcWizHead.Refresh
            slcWizData.Refresh
            Set v = Nothing
        Else
            InitWizData
            RestoreSlic m_rep.value
        End If
        
    End If
    
    'slcWizMain.Refresh
End Sub

Private Sub InitDummyData()
    Set slcWizData = m_State.Unknown("slcMain")
    slcWizData.Script = GetSlcDummySlic
    g_App.ConnectObject slcWizData, Nothing, g_App.Term
    slcWizData.Refresh
End Sub

Public Sub SetWizard(ByVal sWizard As String)
    m_fipWizard.value = sWizard
    m_fipWizard.Enabled = False
End Sub

Public Sub SetValue(ByVal v As esl.ValueSet)
    On Error Resume Next
    Set m_wizSlic.value = v
End Sub

Private Sub UserForm_Terminate()
    Set slcWizData = Nothing
    Set slcWizHead = Nothing
    
    Set m_gfx = Nothing
    Set m_Conn = Nothing
    Set m_rep = Nothing
    Set m_wiz = Nothing
    Set m_wizSlic = Nothing
    Set m_stWizHead = Nothing
    Set m_State = Nothing


    Set m_fipCompany = Nothing
    Set m_fipWizard = Nothing
    Set m_btnNew = Nothing
End Sub

'BR18.764.257 - ngwa112107 - 20060413
'Added this function to cleanup the range settings behaviour when From <> EMPTY and To = EMPTY.
'With FillMinMax is False, data returned to the slic interface is not correct anymore.
'Hence, hardcode the interface manually if found an issue as mentioned in the BR.
Private Sub UpdateRestoreSettings(ByVal v As esl.IValueSet)
    
Dim vResult As Variant

    Select Case m_fipWizard.value
        '~BUDGET REPORT~
        Case "Budget"
            'BR18.911.185/18.913.776 - ngwa112107 - 20050421
            'Manually set Period.To field to empty when "99" is found.
            'There will never be a period "99" as due to range limitations,
            'the FillMinMax set to True will autofill in the MAX number.
            'Period range TO = EMPTY
            If v.value("Period.all") = 0 Then
                If v.value("Period.to") = "99" Then v.value("Period.to") = ""
            End If
            'End:BR18.911.185/18.913.776
            'GL Account range TO = EMPTY
            If v.value("GLAccount.all") = 0 Then
                If Not v.Find("GLAccount.to", vResult) Then v.value("GLAccount.to") = ""
            End If
        Case "Balance"
            'BR18.766.596 foon36643:cleanup the range settings behaviour when From <> EMPTY and To = EMPTY.
            'GL Account range TO = EMPTY
            If v.value("Ledger.all") = 0 Then
                If Not v.Find("Ledger.to", vResult) Then v.value("Ledger.to") = ""
            End If
        '~ELSE~
        Case Else
    End Select
    
End Sub
'End:BR18.764.257

'BR35.262.289
Private Sub SetCompanyInfoIntoExcel(ByVal ConnID As String)
   Dim fh As IFunctionHandler
   Set fh = g_Ses.Company(ConnID)
   Set fh = Nothing
End Sub
Attribute VB_Name = "frmInformation"
Attribute VB_Base = "0{84A19A74-A8A7-403A-8958-BB9978DA84A7}{6932FE87-8127-4799-8513-B0BA3E5D3F71}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private m_gfx As esl.Graphics
Private m_stInformation As esl.ISlicState
Private m_mtx As slui.SlicMutex
Private WithEvents m_btnNew As slui.FlatButton
Attribute m_btnNew.VB_VarHelpID = -1


Private WithEvents m_btnOpen As slui.FlatButton
Attribute m_btnOpen.VB_VarHelpID = -1


Private WithEvents m_btnClose As slui.FlatButton
Attribute m_btnClose.VB_VarHelpID = -1

Private WithEvents m_btnOpenAll As slui.FlatButton
Attribute m_btnOpenAll.VB_VarHelpID = -1


Private WithEvents m_btnSetDefault As slui.FlatButton
Attribute m_btnSetDefault.VB_VarHelpID = -1



Private m_fipDefFY As slui.fip
Private m_fipMinFY As slui.fip
Private m_fipMaxFY As slui.fip
Private m_fipMaxPer As slui.fip
Private m_fipDefCurr As slui.fip
'Private m_fipSecCurr As slui.fip

Private Sub InitConnections()
    Set lstConnections.Font = m_gfx.Font(efontNormal)
    lstConnections.ColumnHeaders.Add 1, , g_App.Term.String(6362, "Co."), 40
    lstConnections.ColumnHeaders.Add 2, , g_App.Term.String(4243, "Description"), 160
    lstConnections.ColumnHeaders.Add 3, , g_App.Term.String(31286, "Default date"), 100
    lstConnections.ColumnHeaders.Add 4, , g_App.Term.String(3226, "Server"), 80
    lstConnections.ColumnHeaders.Add 5, , g_App.Term.String(5454, "Database"), 80
    lstConnections.ColumnHeaders.Add 6, , g_App.Term.String(16394, "User"), 80
End Sub

Private Sub ClearProperties()
    m_fipDefFY = ""
    m_fipMinFY = ""
    m_fipMaxFY = ""
    m_fipMaxPer = ""
    m_fipDefCurr = ""
    'm_fipSecCurr = ""
    m_mtx.value = False
    m_btnOpen.Enabled = False
    m_btnClose.Enabled = False
    m_btnSetDefault.Enabled = False
    m_btnOpenAll.Enabled = False
End Sub

Private Sub FillProperties(ByVal Item As ListItem)
    On Error GoTo Failed
    Dim conn As exl.IExlConnection
    Set conn = g_Ses.Connection(Mid(Item.key, 2))
    If conn.Connected Then
        Dim s As esl.ISettings
        Set s = conn.Company
        m_fipDefFY = ECY2FY(s("eaccount\default_boekjaar,c"))
        m_fipMinFY = ECY2FY(s("eaccount\laagste_boekjaar,c"))
        m_fipMaxFY = ECY2FY(s("eaccount\hoogste_boekjaar,c"))
        m_fipMaxPer = s("eaccount\hoogste_boekperiode,c")
        m_fipDefCurr = s("eaccount\default_valutacode,c")
        'BR 14.662.072
        'm_fipSecCurr = s("eaccount\secondary_currency,c")
        m_mtx.value = True
        m_btnClose.Enabled = True
        m_btnSetDefault.Enabled = (conn.ID <> g_Ses.DefaultID)
    Else
        ClearProperties
        m_mtx.value = False
        m_btnOpen.Enabled = True
        m_btnOpenAll.Enabled = True
    End If
    slcInformation.Refresh
    Exit Sub
Failed:
    ClearProperties
End Sub

Private Sub FillConnections(ByVal fSelect As Boolean)
    Dim obItems As ListItems, obItem As ListItem
    Dim conn As exl.IExlConnection
    Set obItems = lstConnections.ListItems
    obItems.Clear
    For Each conn In g_Ses.Connections
        Set obItem = obItems.Add(, "C" & conn.ID, conn.ID)
        If conn.ID = g_Ses.DefaultID Then
            obItem.SubItems(1) = conn.Description & " (" & g_App.Term.String(8521, "Default") & ")"
        Else
            obItem.SubItems(1) = conn.Description
        End If
        If conn.Connected Then obItem.SubItems(2) = conn.Company.ProcessDate
        obItem.SubItems(3) = conn.ServerName
        obItem.SubItems(4) = conn.DatabaseName
        obItem.SubItems(5) = conn.UserName
    Next conn
    
    If fSelect And (obItems.Count > 0) Then
        Set obItem = obItems(1)
        obItem.Selected = True
        FillProperties obItem
    Else
        ClearProperties
    End If
End Sub

Private Sub SelectConnection(ByVal sID As String)
    On Error GoTo Failed
    Dim obItem As ListItem
    Set obItem = lstConnections.ListItems("C" & sID)
    obItem.Selected = True
    FillProperties obItem
    lstConnections.SetFocus
    Exit Sub
Failed:
    ClearProperties
End Sub

Private Sub InitInformation()
On Error GoTo ErrorHandler


    slcInformation.Script = GetInformationSlic
    g_App.ConnectObject slcInformation, Nothing, g_App.Term
    Set m_stInformation = slcInformation
    
    Set m_mtx = m_stInformation.Unknown("Mutex0")
    Set m_btnNew = m_stInformation.Unknown("New")
    Set m_btnOpen = m_stInformation.Unknown("Open")
    Set m_btnClose = m_stInformation.Unknown("Close")
    Set m_btnOpenAll = m_stInformation.Unknown("OpenAll")
    Set m_btnSetDefault = m_stInformation.Unknown("SetDefault")
    Set m_fipDefFY = m_stInformation.Unknown("DefFY")
    Set m_fipMinFY = m_stInformation.Unknown("MinFY")
    Set m_fipMaxFY = m_stInformation.Unknown("MaxFY")
    Set m_fipMaxPer = m_stInformation.Unknown("MaxPer")
    Set m_fipDefCurr = m_stInformation.Unknown("DefCurr")
    'BR 14.662.072
    'Set m_fipSecCurr = m_stInformation.Unknown("SecCurr")
    InitConnections
    FillConnections True
    
    slcInformation.Refresh
    
    
Exit Sub
ErrorHandler:
    Err.Source = "frmInformation::InitInformation"
    Call ProcessError(Err)
End Sub

Private Sub lstConnections_ItemClick(ByVal Item As MSComctlLib.ListItem)
    FillProperties Item
End Sub

Private Sub m_btnClose_Click()
On Error GoTo ErrorHandler
    
    m_btnClose.Enabled = False
    
    Dim conn As exl.IExlConnection
    Set conn = g_Ses.Connection(Mid(lstConnections.SelectedItem.key, 2))
    If conn.ID = g_Ses.DefaultID Then
        Dim conn2 As exl.IExlConnection, nNewID As Long
        nNewID = -1
        For Each conn2 In g_Ses.Connections
            If conn2.Connected And conn2.ID <> conn.ID Then
                nNewID = conn2.ID
                Exit For
            End If
        Next conn2
        g_Ses.DefaultID = nNewID
    End If
    Set conn.Company = Nothing
    FillConnections False
    SelectConnection conn.ID
    
CleanUp:
    m_btnClose.Enabled = True
    
    
Exit Sub
ErrorHandler:
    Err.Source = "frmInformation::m_btnClose_Click"
    Call ProcessError(Err, m_stInformation.Form("").Window)
    
    GoTo CleanUp
End Sub

Private Sub m_btnNew_Click()
On Error GoTo ErrorHandler


    m_btnNew.Enabled = False
    
    Dim sID As String
    With lstConnections
        If (Not .SelectedItem Is Nothing) Then sID = .SelectedItem.Text
    End With
    
    Dim conn As exl.IExlConnection
    'Set conn = g_Ses.CreateConnection
    Set conn = AddNewConnection(m_stInformation.Form("").Window)
    
    If (Not conn Is Nothing) Then
        'BR 40.260.784 - Call the g_Ses.Company so that the connection information can be saved.
        sID = g_Ses.Company(conn.ID)
        FillConnections False
    End If
    
CleanUp:
    If (sID <> "") Then Call SelectConnection(sID)
    
    Set conn = Nothing
    m_btnNew.Enabled = True


Exit Sub
ErrorHandler:
    Err.Source = "frmInformation::m_btnNew_Click"
    Call ProcessError(Err, m_stInformation.Form("").Window)
    
    GoTo CleanUp
End Sub

Private Sub m_btnOpen_Click()
On Error GoTo ErrorHandler

    m_btnOpen.Enabled = False

    Dim conn As exl.IExlConnection
    Set conn = g_Ses.Connection(Mid(lstConnections.SelectedItem.key, 2))
    'adam21726 no reconnect
    'If (conn.Reconnect) Then
    If (conn.Connected = False) Then
        Call g_Ses.OpenConnection(conn.ServerName, conn.DatabaseName, conn.UserName, True, Date)
        
        If IsEmpty(g_Ses.DefaultID) Then g_Ses.DefaultID = conn.ID
        FillConnections False
        SelectConnection conn.ID
    End If
    
CleanUp:
    Set conn = Nothing
    m_btnOpen.Enabled = True
    

Exit Sub
ErrorHandler:
    Err.Source = "frmInformation::m_btnOpen_Click"
    Call ProcessError(Err, m_stInformation.Form("").Window)
    
    GoTo CleanUp
End Sub

Private Sub m_btnOpenAll_Click()
    On Error GoTo Failed

    Dim conn As esl.Company
    Dim conn2 As exl.IExlConnection
    
    Dim conn1 As exl.IExlConnection
    
    For Each conn2 In g_Ses.Connections
        If Not conn2.Connected Then
        
'            Set Conn = New esl.Company
            
            Set conn2 = g_Ses.OpenConnection(conn2.ServerName, conn2.DatabaseName, conn2.UserName, True, Date)
                            
            'Conn.Open conn2.ServerName, conn2.DatabaseName, conn2.UserName, "", Date
            'Set conn2.Company = Conn
                    
            If IsEmpty(g_Ses.DefaultID) Then g_Ses.DefaultID = conn2.ID
                       
        End If
    Next
        
    FillConnections True
    SelectConnection g_Ses.DefaultID
    
    Exit Sub
Failed:
    MsgBox Err.Description
End Sub

Private Sub m_btnSetDefault_Click()
    On Error GoTo Failed
    Dim conn As exl.IExlConnection
    Set conn = g_Ses.Connection(Mid(lstConnections.SelectedItem.key, 2))
    g_Ses.DefaultID = conn.ID
    FillConnections False
    SelectConnection conn.ID
    Exit Sub
Failed:
End Sub

Private Sub slcInformation_ButtonClick(ByVal nActionType As Long, ByVal sName As String, ByVal sAction As String, ByVal sParams As String)
    Select Case UCase(sName)
    Case "CMDCLOSE"
        SendKeys "%{F4}"
    End Select
End Sub

Private Sub UserForm_Initialize()
    Set m_gfx = New esl.Graphics
    Me.Caption = g_App.Term.String(8642, "Information")
    InitInformation
    'FC35.708.362: Set form backcolor.
    Me.BackColor = m_gfx.Color(ecolActiveBackground)
End Sub
Attribute VB_Name = "frmListView"
Attribute VB_Base = "0{B998A93F-1492-4C7C-B4A8-ABAA6027F325}{4094C393-5D57-4CC5-8523-8B30F72E5C22}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private m_gfx As esl.Graphics
Private m_frmParent As frmFunction

Private Sub cmdCancel_Click()
    SendKeys "%{F4}"
End Sub

Private Sub cmdOK_Click()
    m_frmParent.m_sResult = lst.SelectedItem.key
    SendKeys "%{F4}"
End Sub

Public Sub Init(ByVal frmParent As frmFunction)
    Set m_frmParent = frmParent
    On Error GoTo Failed
    With lst.ListItems.Item(1)
        .Selected = True
        .EnsureVisible
    End With
Failed:
End Sub

Private Sub lst_DblClick()
    cmdOK_Click
End Sub

Private Sub UserForm_Initialize()
    Set m_gfx = New esl.Graphics
    Set lst.Font = m_gfx.Font(efontNormal)
    cmdOK.Caption = g_App.Term.String(9830, "OK")
    Set cmdOK.Font = m_gfx.Font(efontButton)
    cmdCancel.Caption = g_App.Term.String(1021, "Cancel")
    Set cmdCancel.Font = m_gfx.Font(efontButton)
    
    'FC35.708.362: Set form backcolor.
    Me.BackColor = m_gfx.Color(ecolActiveBackground)
    Frame1.BackColor = m_gfx.Color(ecolActiveBackground)
End Sub
Attribute VB_Name = "frmSearch"
Attribute VB_Base = "0{216A394B-7DAC-4880-AD41-CEC369348C71}{8F48E7D1-285E-4886-9AC1-E8530F7589D8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private m_gfx As esl.Graphics
Private m_Conn As exl.IExlConnection
Private m_stSearch As esl.ISlicState
Private WithEvents m_fipCompany As slui.fip
Attribute m_fipCompany.VB_VarHelpID = -1


Private m_fipSearch As slui.fip
Private WithEvents m_btnNew As slui.FlatButton
Attribute m_btnNew.VB_VarHelpID = -1



Private Sub cmdOK_Click()
    Dim sValue As String
    Dim nRow As Long: nRow = 1
    
    If slcSearch.Validate Then
        Me.Hide
        DoEvents
        Dim func As exl.IExlConnectionFunctions, value As String
        Set func = m_Conn
        
        Do While Len(shtSearch.Cells(nRow, 1).value) > 0
            sValue = shtSearch.Cells(nRow, 1).value
            If sValue = m_fipSearch.value Then
                If Len(shtSearch.Cells(nRow, 5).value) > 0 Then
                    value = func.Browse(m_fipSearch.value, shtSearch.Cells(nRow, 5).value)
                Else
                    value = func.Browse(m_fipSearch.value, Empty)
                End If
                Exit Do
            End If
            nRow = nRow + 1
        Loop
        'BR 14.510.284 YSBR
        'Check ActiveCell
        If ActiveCell Is Nothing Then
            MsgBox g_App.Term.String(32672, "The worksheet is protected")
        Else
            If ActiveWorkbook.ActiveSheet.ProtectContents And ActiveCell.Locked Then
                MsgBox g_App.Term.String(32672, "The worksheet is protected")
            Else
                ActiveCell.value = value
                func.SaveToWorkbook ActiveWorkbook
            End If
        End If
    End If
End Sub

Private Sub InitSearch()
    slcSearch.Script = GetSearchSlic
    g_App.ConnectObject slcSearch, Nothing, g_App.Term
    Set m_stSearch = slcSearch
    Set m_fipCompany = m_stSearch.Unknown("Company")
    Set m_btnNew = m_stSearch.Unknown("New")
    Set m_fipSearch = m_stSearch.Unknown("Search")
    FillCompanyList
    FillFipSearch
    slcSearch.Refresh
End Sub

Private Sub FillFipSearch()
    Dim fh As IFunctionHandler
    Dim sValue As String
    Dim nRow As Long: nRow = 1
    
    Set fh = g_Ses.Company(m_Conn)
    
    m_fipSearch.TestValues.Clear
    Do While Len(shtSearch.Cells(nRow, 1).value) > 0
        sValue = ExtractValue(1, shtSearch.Cells(nRow, 4))
        If sValue <> "" Then
            If fh.Function(sValue).Enabled Then
                m_fipSearch.TestValues.Add shtSearch.Cells(nRow, 1), g_App.Term.String(shtSearch.Cells(nRow, 3).value, shtSearch.Cells(nRow, 2).value)
            End If
        End If
        nRow = nRow + 1
    Loop
End Sub

Private Sub FillCompanyList()
    Dim v As esl.ValueSet, conn As exl.IExlConnection, vnt As Variant
    Set v = m_fipCompany.TestValues
    v.Clear
    If TestAvailableSearch(g_Ses.DefaultID) Then
        v.Add -1, g_App.Term.String(8521, "Default")
    End If
    For Each conn In g_Ses.Connections
        If conn.Connected Then
            If TestAvailableSearch(conn.ID) Then
                v.Add conn.ID, conn.ID & " " & conn.Description
            End If
        End If
    Next conn
    If v.Find(-1, vnt) Then
        m_fipCompany.value = -1
    End If
End Sub

Public Sub SetTable(ByVal sTable As String)
    m_fipSearch.value = sTable
    'm_fipSearch.Enabled = False    '06.193.909
End Sub

Private Sub m_btnNew_Click()
    Dim conn As exl.IExlConnection
    'Set conn = g_Ses.CreateConnection
    Set conn = AddNewConnection(m_stSearch.Form("").Window)
    
    If (Not conn Is Nothing) Then
        If TestAvailableSearch(conn.ID) Then
            FillCompanyList
            m_fipCompany.value = conn.ID
        Else
            Call ShowNoRightsMessage
        End If
        
        Set conn = Nothing
    End If
    
End Sub

Private Sub m_fipCompany_Change()
    'Dim comp As esl.Company
    'If Not g_Ses Is Nothing Then
    '    Set comp = g_Ses.Connection(m_fipCompany.value).Company
    '    If Not ExactOption(comp, OPT_EXCEL_ADD_IN) Then
    '        Call ShowNoRightsMessage
    '        SendKeys "%{F4}"
    '        Exit Sub
    '    End If
    'End If

    If m_Conn <> g_Ses.Connection(m_fipCompany.value) Then
        Set m_Conn = g_Ses.Connection(m_fipCompany.value)
        FillFipSearch
    End If
End Sub

Private Sub slcSearch_ButtonClick(ByVal nActionType As Long, ByVal sName As String, ByVal sAction As String, ByVal sParams As String)
    Select Case UCase(sName)
    Case "CMDOK"
        cmdOK_Click
        
    Case "CMDCANCEL"
        SendKeys "%{F4}"
    End Select
End Sub

Private Sub UserForm_Initialize()
    Set m_gfx = New esl.Graphics
    Me.BackColor = m_gfx.Color(ecolActiveBackground)
    Me.Caption = g_App.Term.String(8788, "Search")
    Set m_Conn = g_Ses.Connection(g_Ses.DefaultID)
    InitSearch
End Sub

Private Sub UserForm_Resize()
    Static i As Long
    If (i = 1) Then Exit Sub
    i = 1
    
    'resize
    Me.Height = slcSearch.Height

End Sub
Attribute VB_Name = "frmUpdate"
Attribute VB_Base = "0{AB59E5EB-1914-4C2C-8F54-0C1465E8B7EA}{DEE3ED39-CE41-4D55-AC10-6839A50822D2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private m_gfx As esl.Graphics
Private m_Conn As exl.IExlConnection
Private m_rep As exl.IExlReport
Private m_wiz As exl.IExlWizard
Private m_wizUpdate As exl.IExlWizardUpdate
Private slcWizUpdate As slui.Slic
Private m_State As esl.ISlicState

Private m_bCloseWorkbook As Boolean 'FC 26.141.307 - Man. quotation : To close the excel sheet automatically once updated

Private Sub cmdOK_Click()
    If slcWizUpdate.Validate Then
        Me.Hide
        DoEvents
        Application.ScreenUpdating = False
        m_wizUpdate.Update
        Application.ScreenUpdating = True
        
        'FC 26.141.307 - close the excel automatically when it's updated
         If m_bCloseWorkbook Then
            Application.ActiveWorkbook.Close SaveChanges:=False

            If Application.Workbooks.Count = 0 Then
                Application.Quit
            End If
        End If
    End If
End Sub

Private Sub slcWizMain_ButtonClick(ByVal nActionType As Long, ByVal sName As String, ByVal sAction As String, ByVal sParams As String)
    Select Case UCase(sName)
    Case "CMDOK"
        cmdOK_Click
    Case "CMDCANCEL"
        SendKeys "%{F4}"
    End Select
End Sub

Private Sub UserForm_Initialize()
    Set m_gfx = New esl.Graphics
    Me.BackColor = m_gfx.Color(ecolActiveBackground)
    Me.Caption = g_App.Term.String(1103, "Update")
End Sub

Public Function Initialize(ByVal conn As exl.IExlConnection, ByVal rep As exl.IExlReport, ByVal v As esl.ValueSet) As Boolean
    Initialize = False
    On Error GoTo Failed
    Set m_Conn = conn
    Set m_rep = rep
    Set m_wiz = g_Ses.Wizard(v.value("System.Wizard"))
    m_wiz.Initialize g_Ses, m_Conn, m_rep
    Set m_wizUpdate = m_wiz
    
    'FC 26.141.307 - for man. quotation screen ("bomcp" with quantity fip) only, close the excel when it's updated
    If LCase$(v.value("System.Wizard")) = "bomcp" And v.Find("fipQuantity", "") Then
        m_bCloseWorkbook = True
    End If
    
    v.Remove "System"
    
    slcWizMain.Script = GetEmbeddedSlic
    
    g_App.ConnectObject slcWizMain, Nothing, g_App.Term
    Set m_State = slcWizMain
    
    Set slcWizUpdate = m_State.Unknown("slcHead")
    slcWizUpdate.Script = m_wizUpdate.Script
    g_App.ConnectObject slcWizUpdate, m_Conn.Company, g_App.Term
    Dim sst As esl.ISlicState
    Set sst = slcWizUpdate
    Set m_wizUpdate.State = sst
    Set m_wizUpdate.value = v
    Initialize = True
    
    With slcWizMain
        .Refresh
        .Width = .TotalWidth
        .Height = .TotalHeight
        Width = .TotalWidth + (Width - InsideWidth)
        Height = .TotalHeight + (Height - InsideHeight)
    End With
Failed:
End Function

Attribute VB_Name = "modCommandBars"
Option Explicit
Option Private Module

'Increase MENU_VERSION by 1 each time this module is modified.
Private Const MENU_VERSION = 10

Private m_nMenuVersion As Long
Private m_sMenuName As String
Public m_sToolbarName As String

Private m_clsEvent As New clsEvent

Private Sub InitMenuVariables(ByVal hKey As Long)
    Dim tempApp As esl.Application
    Set tempApp = g_App
    If tempApp Is Nothing Then
        Set tempApp = New esl.Application
    End If
    m_nMenuVersion = 0
    
    'BR18.990.689 foon36643:Wrong menu bar name for Other Products (e.g. Cubic Pro, Grote Beer)
    'Solution: Determine the product group based on Icon2003T?.dll
    Dim i As Integer
    Dim sBrand As String
    For i = 12 To 0 Step -1
        sBrand = "Icon2003T" & i
        If Dir(tempApp.Environment.BinariesPath(sBrand, "dll")) <> "" Then
            tempApp.Appearance = i
            Exit For
        End If
    Next
    'BR17.864.877 foon36643: Get value from settings
'    m_sMenuName = GetSetting("EG2000WordAddIn", "Start", "MenuBarName", "")
'    If m_sMenuName = "" Then
        m_sMenuName = tempApp.Environment.VersionInfo.CommercialName
'    End If
    m_sToolbarName = m_sMenuName
    'BR17.864.877 end
    'BR18.990.689 foon36643 end
    
    RegSetValueEx hKey, "MenuVersion", 0, REG_DWORD, m_nMenuVersion, 4
    RegSetString hKey, "MenuName", 0, REG_SZ, m_sMenuName, Len(m_sMenuName)
    RegSetString hKey, "ToolbarName", 0, REG_SZ, m_sToolbarName, Len(m_sToolbarName)
    
End Sub

Private Sub LoadMenuVariables()
    Dim hKey As Long, cbData As Long
    If RegCreateKey(HKEY_CURRENT_USER, REGEXCEL, hKey) = 0 Then
        cbData = 4
        If RegQueryValueEx(hKey, "MenuVersion", 0, REG_DWORD, m_nMenuVersion, cbData) <> 0 Then
            InitMenuVariables hKey
        End If
        If RegGetString(hKey, "MenuName", m_sMenuName) <> 0 Then
            InitMenuVariables hKey
        End If
        If RegGetString(hKey, "ToolbarName", m_sToolbarName) <> 0 Then
            InitMenuVariables hKey
        End If
        RegDeleteValue hKey, "Menu Name"
        RegDeleteValue hKey, "Toolbar Name"
        RegCloseKey hKey
    End If
End Sub

Private Sub SetMenuVersion(ByVal nVersion As Long)
    Dim hKey As Long
    If RegCreateKey(HKEY_CURRENT_USER, REGEXCEL, hKey) = 0 Then
        RegSetValueEx hKey, "MenuVersion", 0, REG_DWORD, nVersion, 4
        RegCloseKey hKey
        m_nMenuVersion = nVersion
    End If
End Sub

Private Sub DeleteMenu(ByVal sMenuName As String)
    On Error Resume Next
    'First delete registry entries
    Dim hKey As Long
    Call RegCreateKey(HKEY_CURRENT_USER, REGEXCEL, hKey)
    Call RegDeleteValue(hKey, "MenuVersion")
    Call RegDeleteValue(hKey, "MenuName")
    Call RegDeleteValue(hKey, "ToolbarName")
    'Delete manu from Excel
    Dim ctrl As CommandBarControl
    With Application.CommandBars("Worksheet Menu Bar")
        For Each ctrl In .Controls
            If InStr(1, sMenuName, ctrl.Caption) Then
                ctrl.Delete
            End If
        Next
    End With
    
End Sub

Private Sub BuildMenu(ByVal sMenuName As String)
    On Error GoTo Failed
    Dim toolbar As CommandBar, menu As CommandBar
    Set toolbar = Application.CommandBars("EG2000")
    
    'Delete any extra menu from Excel first
    Dim ctrl As CommandBarControl
    With Application.CommandBars("Worksheet Menu Bar")
        For Each ctrl In .Controls
            If InStr(1, sMenuName, ctrl.Caption) Then
                ctrl.Delete
            End If
        Next
    End With
    
    With Application.CommandBars("Worksheet Menu Bar").Controls.Add(Type:=msoControlPopup, Before:=10)
        Set menu = .CommandBar
        .Caption = sMenuName
    End With
    toolbar.Controls("Information").Copy menu
    With menu.Controls
        With .Add(Type:=msoControlPopup)
            .Caption = "Search"
            .Tag = "EG2000:Search"
            .BeginGroup = True
            With .Controls
                With .Add(Type:=msoControlButton)
                    .Caption = "General ledger accounts"
                    .OnAction = "ThisWorkbook.AddIn_OnSearchMenu"
                    .Parameter = "grtbk"
                    .Tag = "EG2000:Search:grtbk"
                End With
                With .Add(Type:=msoControlButton)
                    .Caption = "Accountclasses"
                    .OnAction = "ThisWorkbook.AddIn_OnSearchMenu"
                    .Parameter = "accountclasses"
                    .Tag = "EG2000:Search:58"
                End With
                With .Add(Type:=msoControlButton)
                    .Caption = "Human resources"
                    .OnAction = "ThisWorkbook.AddIn_OnSearchMenu"
                    .Parameter = "humres"
                    .Tag = "EG2000:Search:humres"
                End With
                With .Add(Type:=msoControlButton)
                    .Caption = "Creditors"
                    .OnAction = "ThisWorkbook.AddIn_OnSearchMenu"
                    .Parameter = "credit"
                    .Tag = "EG2000:Search:credit"
                End With
                With .Add(Type:=msoControlButton)
                    .Caption = "Debtors"
                    .OnAction = "ThisWorkbook.AddIn_OnSearchMenu"
                    .Parameter = "debitr"
                    .Tag = "EG2000:Search:debitr"
                End With
                With .Add(Type:=msoControlButton)
                    .Caption = "Items"
                    .OnAction = "ThisWorkbook.AddIn_OnSearchMenu"
                    .Parameter = "artbst"
                    .Tag = "EG2000:Search:artbst"
                End With
                With .Add(Type:=msoControlButton)
                    .Caption = "Item groups"
                    .OnAction = "ThisWorkbook.AddIn_OnSearchMenu"
                    .Parameter = "itemassortment" 'BR17.153.122 foon36643
                    .Tag = "EG2000:Search:artgrp"
                End With
                With .Add(Type:=msoControlButton)
                    .Caption = "Cost centers"
                    .OnAction = "ThisWorkbook.AddIn_OnSearchMenu"
                    .Parameter = "kstpl"
                    .Tag = "EG2000:3384"
                End With
                With .Add(Type:=msoControlButton)
                    .Caption = "Cost units"
                    .OnAction = "ThisWorkbook.AddIn_OnSearchMenu"
                    .Parameter = "kstdr"
                    .Tag = "EG2000:3383"
                End With
                With .Add(Type:=msoControlButton)
                    .Caption = "Countries"
                    .OnAction = "ThisWorkbook.AddIn_OnSearchMenu"
                    .Parameter = "land"
                    .Tag = "EG2000:8495"
                End With
                With .Add(Type:=msoControlButton)
                    .Caption = "Currencies"
                    .OnAction = "ThisWorkbook.AddIn_OnSearchMenu"
                    .Parameter = "valuta"
                    .Tag = "EG2000:9073"
                End With
                With .Add(Type:=msoControlButton)
                    .Caption = "Projects"
                    .OnAction = "ThisWorkbook.AddIn_OnSearchMenu"
                    .Parameter = "prproject"
                    .Tag = "EG2000:8671"
                End With
            End With
        End With
    End With
    toolbar.Controls("Function").Copy menu
    
'    With menu.Controls
'        With .Add(Type:=msoControlPopup)
'            .Caption = "Wizards"
'            .Tag = "EG2000:Wizards"
'            .BeginGroup = True
'        End With
'    End With

    '08.260.779
    toolbar.Controls("Wizards").Copy menu
    menu.Controls(menu.Controls.Count).BeginGroup = True
    
    With toolbar.Controls
        .Item("Update").Copy menu
        .Item("Refresh").Copy menu
    End With
'Change according BR: 03.903.380 to menu bellow
'    With menu.Controls.Add(Type:=msoControlButton)
'        .Caption = "Convert"
'        .OnAction = "ThisWorkbook.AddIn_OnConvert"
'        .Tag = "EG2000:Convert"
'        .BeginGroup = True
'    End With

    With menu.Controls.Add(Type:=msoControlPopup)
        .Caption = "Convert"
        .Tag = "EG2000:9833"
        .BeginGroup = True

        With .Controls.Add(Type:=msoControlButton)
            .Caption = "Convert"
            .OnAction = "ThisWorkbook.AddIn_OnConvert"
            .Tag = "EG2000:Convert"
            .BeginGroup = True
        End With

        With .Controls.Add(Type:=msoControlButton)
            .Caption = "F9 Convert"
            .OnAction = "ThisWorkbook.AddIn_OnF9Convert"
            .Tag = "EG2000:F9 Convert"
            .BeginGroup = True
        End With
    End With

    With menu.Controls.Add(Type:=msoControlPopup)
        .Caption = "Help"
        .Tag = "EG2000:6836"
        .BeginGroup = True
        With .Controls.Add(Type:=msoControlButton)
            .Caption = "Help"
            .OnAction = "ThisWorkbook.AddIn_OnHelp"
            .Tag = "EG2000:6836"
        End With
        With .Controls.Add(Type:=msoControlButton)
            .Caption = "About"
            .OnAction = "ThisWorkbook.AddIn_OnAbout"
            .Tag = "EG2000:10011"
        End With
    End With
    Exit Sub
Failed:
End Sub

Private Sub DeleteToolbar(ByVal sToolbarName As String)
    On Error Resume Next
    Application.CommandBars(sToolbarName).Delete
End Sub

Private Sub RenameToolbar(ByVal sToolbarName As String)
    On Error GoTo Failed
    Dim ctl As CommandBarControl
    With Application.CommandBars("EG2000")
        .Name = sToolbarName
        .RowIndex = -1
        .Left = 0
        .Visible = True
        For Each ctl In .Controls
            ctl.Tag = "EG2000:" & ctl.Caption
        Next ctl
    End With
    Exit Sub
Failed:
End Sub

Private Sub ModifyPopup()
    On Error GoTo Failed
    Dim popup As CommandBar
    Set popup = Application.CommandBars("Cell")
    With Application.CommandBars("EG2000").Controls
        .Item("Search").Copy popup, 1
        .Item("Function").Copy popup, 2
    End With
    popup.Controls(3).BeginGroup = True
    Exit Sub
Failed:
End Sub

Private Sub RestorePopup()
    On Error Resume Next
    Application.CommandBars("Cell").Reset
End Sub

Private Sub SubclassCommand(ByVal nCommandID As Long, ByVal sMacro As String)
    On Error GoTo Failed
    Dim ctl As CommandBarControl
    Set ctl = Application.CommandBars.FindControl(, nCommandID)
    If Not ctl Is Nothing Then ctl.OnAction = sMacro
    Exit Sub
Failed:
End Sub

Public Sub InstallCommandBars()
    LoadMenuVariables
    ModifyPopup
    BuildMenu m_sMenuName
    RenameToolbar m_sToolbarName
    SubclassCommand 385, "ThisWorkbook.AddIn_OnPasteFunction"  '03.905.940
    SetMenuVersion MENU_VERSION
End Sub

Public Sub UninstallCommandBars()
    On Error Resume Next
    DoEvents
    LoadMenuVariables
    'DeleteToolbar "EG2000"
    DeleteToolbar m_sToolbarName
    DeleteMenu m_sMenuName
    RestorePopup
    SubclassCommand 385, ""
End Sub

Public Sub UpdateCommandBars()
    LoadMenuVariables
    If m_nMenuVersion < MENU_VERSION Then
        DeleteToolbar m_sToolbarName
        DeleteMenu m_sMenuName
        RestorePopup
        ModifyPopup
        BuildMenu m_sMenuName
        RenameToolbar m_sToolbarName
        SetMenuVersion MENU_VERSION
    Else
        DeleteToolbar "EG2000"
    End If
    'InitEvent   '03.905.940
End Sub

'06.468.469
'Public Sub InitEvent()
'    Dim cbrBar As CommandBar
'
'    Set cbrBar = Application.CommandBars("Standard")
'
'    If cbrBar Is Nothing Then Exit Sub
'    With cbrBar
'        Set m_clsEvent.cmdPasteFunction = .FindControl(, 385)
'    End With
'
'End Sub

Attribute VB_Name = "modConst"
Option Private Module
Option Explicit

'BalanceType
Public Const btLedgers = 1
Public Const btSubclass = 2

'BalanceInclude
Public Const biAll = 1
Public Const biBalance = 2
Public Const biProfitLoss = 3

'AmountType
Public Const atRealization = 1
Public Const atBudgets = 2

'AmountValue
Public Const avDebit = 1
Public Const avCredit = 2
Public Const avBalance = 3
Public Const avPositive = 4
Public Const avNegative = 5
Public Const avQuantity = 6

'AmountCalculation
Public Const acPeriod = 1
Public Const acCumulative = 2
Public Const acPeriodAltCurrency = 3
Public Const acCumulativeAltCurrency = 4

'BudgetValue
Public Const bvDebit = 3
Public Const bvCredit = 4
Public Const bvQuantity = 5

'QTY_DISC_MAINT
Public Const qdmItem = 1
Public Const qdmGroup = 2

'Options
Public Const OPT_EXCEL_ADD_IN = 97
Attribute VB_Name = "modConversion"
Option Explicit
Option Private Module

Private fObsoleteFunctions As Boolean
Private fNoDefaultCompany As Boolean
Private fCompanyNotOpen As Boolean
Private collMissingIDs As New Collection

Private fCantFindRepID As Boolean

Private Function IsObsoleteFunction(ByVal sFunction As String) As Boolean
    Select Case UCase(sFunction)
    Case "PROJECT_CAT": IsObsoleteFunction = True
    Case "PROJECT_CC": IsObsoleteFunction = True
    Case "PROJECT_DATA": IsObsoleteFunction = True
    Case "PROJECT_EMP": IsObsoleteFunction = True
    Case "PROJECT_EXPS": IsObsoleteFunction = True
    Case "PROJECT_GROUP": IsObsoleteFunction = True
    Case "PROJECT_HOURS": IsObsoleteFunction = True
    Case "PROJECT_MACHINE": IsObsoleteFunction = True
    Case "PROJECT_TOTAL_EMPLOYEE": IsObsoleteFunction = True
    Case "PROJECT_TOTAL_ENTRY_TYPE": IsObsoleteFunction = True
    Case "PROJECT_TOTAL_ITEM": IsObsoleteFunction = True
    Case "PROJECT_TOTAL_LEDGER": IsObsoleteFunction = True
    Case "PROJECT_TOTAL_MACHINERY": IsObsoleteFunction = True
    Case "PROJECT_UNITS": IsObsoleteFunction = True
    Case "REL_DATA": IsObsoleteFunction = True
    Case Else: IsObsoleteFunction = False
    End Select
End Function

Private Function HasObsoleteFunction(ByVal sFormula As String) As Boolean
    On Error GoTo Failed
    Dim nPos As Long
    nPos = InStr(sFormula, "'!")
    Do While nPos > 0
        sFormula = Mid(sFormula, nPos + 2)
        nPos = InStr(sFormula, "(")
        If nPos > 0 Then
            If IsObsoleteFunction(Left(sFormula, nPos - 1)) Then
                HasObsoleteFunction = True
                Exit Function
            End If
        End If
        nPos = InStr(sFormula, "'!")
    Loop
Failed:
    HasObsoleteFunction = False
End Function

Private Function IsExactFunction(ByVal sFunction As String) As Boolean
    Select Case UCase(sFunction)
    Case "ACC_BAL", _
         "ACC_BAL_DATE", _
         "ACC_DATA", _
         "BUDGET_CC", _
         "BUDGET_CU", _
         "CC_BAL", _
         "CC_BAL_DATE", _
         "CC_DATA", _
         "CC_MAIN_CLASS", _
         "CC_MAIN_CLASS_DATE", _
         "CC_SUB_CLASS", _
         "CC_SUB_CLASS_DATE", _
         "CO_DATA", _
         "CRD_DATA", _
         "CRD_OUTSTAN_ALL", _
         "CRD_OUTSTANDING", _
         "CU_BAL", _
         "CU_BAL_DATE", _
         "CU_DATA", _
         "CU_MAIN_CLASS", _
         "CU_MAIN_CLASS_DATE", _
         "CU_SUB_CLASS", _
         "CU_SUB_CLASS_DATE", _
         "CURR_CODE_DATA", _
         "CURR_INFO":
        IsExactFunction = True
        
    Case "DEB_DATA", _
         "DEB_OUTSTAN_ALL", _
         "DEB_OUTSTANDING", _
         "EXCHANGE_RATE", _
         "FILE_FIELD", _
         "FILE_FIRST", _
         "FILE_NEXT", _
         "GL_BAL", _
         "GL_BAL_DATE", _
         "GL_TRANS", _
         "GL_TRANS_DATE", _
         "HR_DATA", _
         "IS_HIDDEN", _
         "ITEM_DATA", _
         "ITEM_DELIVERY", _
         "ITEM_GROUP_DATA", _
         "MAIN_CLASS_BAL", _
         "MAIN_CLASS_BAL_DATE", _
         "MAIN_CLASS_DATA", _
         "PROJ_DATA", _
         "PROJ_FIN_DATA", _
         "PROJ_LEDGER", _
         "PROJ_TOTAL_EMP", _
         "PROJ_TOTAL_MACH", _
         "QTY_DISC_MAINT":
        IsExactFunction = True
        
    Case "REV_DEBTOR", _
         "REV_DEBTOR_FY", _
         "REV_GROUP", _
         "REV_GROUP_FY", _
         "REV_ITEM", _
         "REV_ITEM_FY", _
         "STOCK_INFO", _
         "SUB_CLASS_BAL", _
         "SUB_CLASS_BAL_DATE", _
         "SUB_CLASS_DATA", _
         "CAT_BAL", _
         "CAT_DATA", _
         "BUDGET_BAL":
        IsExactFunction = True
        
    Case Else
        IsExactFunction = False
    End Select
    
End Function
Private Function StripExactFunctions(ByVal sFormula As String) As String
    On Error GoTo Failed
    StripExactFunctions = sFormula
    Dim sNewFormula As String, nPos As Long, sPrefix As String
    nPos = InStr(sFormula, "'!")
    While nPos > 0
        sPrefix = Left(sFormula, nPos - 1)
        sFormula = Mid(sFormula, nPos + 2)
        nPos = InStr(sFormula, "(")
        If nPos > 0 Then
            If IsExactFunction(Left(sFormula, nPos - 1)) Then
                nPos = InStrRev_Off97(sPrefix, "'")
                If nPos > 0 Then sPrefix = Left(sPrefix, nPos - 1)
            Else
                sPrefix = sPrefix & "'!"
            End If
        End If
        sNewFormula = sNewFormula & sPrefix
        nPos = InStr(sFormula, "'!")
    Wend
    sNewFormula = sNewFormula & sFormula
    Exit Function
Failed:
    StripExactFunctions = sFormula
End Function

Private Sub ParseFormula(ByVal sFormula As String, ByVal nParam As Long, ByRef nOffs As Long, ByRef nLen As Long)
    'TODO: This subroutine can't handle nested functions.
    Dim sSeparator As String, nIndex As Long
    'sSeparator = Application.International(xlListSeparator)
    sSeparator = ","
    nOffs = InStr(sFormula, "("): nIndex = 1
    Do While nOffs > 0 And nIndex < nParam
        nOffs = InStr(nOffs + 1, sFormula, sSeparator): nIndex = nIndex + 1
    Loop
    If nOffs > 0 Then
        nOffs = nOffs + 1: nIndex = InStr(nOffs, sFormula, sSeparator)
        nLen = IIf(nIndex > 0, nIndex - nOffs, Len(sFormula) - nOffs)
    Else
        nLen = 0
    End If
End Sub

Private Function IsRevenueFormula(ByRef sFormula As String, ByRef nOffsID As Long, ByRef nLenID As Long, ByRef nOffsRep As Long, ByRef nLenRep As Long) As Boolean
    On Error GoTo Failed
    If Mid(sFormula, 2, 1) = "'" Then
        sFormula = "=" & Mid(sFormula, InStr(sFormula, "'!") + 2)
    End If
    If Left(sFormula, 12) = "=REV_DEBTOR(" Then
        ParseFormula sFormula, 3, nOffsID, nLenID
        ParseFormula sFormula, 2, nOffsRep, nLenRep
        IsRevenueFormula = True
    ElseIf Left(sFormula, 15) = "=REV_DEBTOR_FY(" Then
        ParseFormula sFormula, 3, nOffsID, nLenID
        ParseFormula sFormula, 2, nOffsRep, nLenRep
        IsRevenueFormula = True
    ElseIf Left(sFormula, 11) = "=REV_GROUP(" Then
        ParseFormula sFormula, 4, nOffsID, nLenID
        ParseFormula sFormula, 2, nOffsRep, nLenRep
        IsRevenueFormula = True
    ElseIf Left(sFormula, 14) = "=REV_GROUP_FY(" Then
        ParseFormula sFormula, 4, nOffsID, nLenID
        ParseFormula sFormula, 2, nOffsRep, nLenRep
        IsRevenueFormula = True
    End If
    Exit Function
Failed:
End Function

Private Sub AddMissingID(ByVal sID As String)
    On Error Resume Next
    collMissingIDs.Add sID, sID
End Sub

Private Function GetMissingIDs() As String
    Dim sList As String, vntID As Variant
    For Each vntID In collMissingIDs
        sList = sList & ", " & vntID
    Next vntID
    GetMissingIDs = Mid(sList, 3)
End Function

Private Sub TestRevenueFormula(ByVal sFormula As String, ByVal nOffsID As Long, ByVal nLenID As Long, ByVal nOffsRep As Long, ByVal nLenRep As Long)
    Dim sID As String
    If nOffsID = 0 Then
        sID = g_Ses.DefaultID
    Else
        sID = Trim(Mid(sFormula, nOffsID, nLenID))
    End If
    If Len(sID) = 0 Then
        If IsEmpty(g_Ses.DefaultID) Then
            AddMissingID g_App.Term.String(8521, "Default")
            fNoDefaultCompany = True
        End If
    Else
        sID = g_Glob.ParamValue(sID)
        Dim conn As exl.IExlConnection
        Set conn = g_Ses.Connection(sID)
        If conn Is Nothing Then
            AddMissingID sID
            fCompanyNotOpen = True
        ElseIf Not conn.Connected Then
            AddMissingID sID
            fCompanyNotOpen = True
        End If
    End If
End Sub

Private Function ConvertRevenueFormula(ByRef sFormula As String, ByRef nOffsID As Long, ByRef nLenID As Long, ByRef nOffsRep As Long, ByRef nLenRep As Long) As String
    On Error GoTo Failed
    Dim sID As String, sRep As String
    If nOffsID = 0 Then
        sID = g_Ses.DefaultID
    Else
        sID = Trim(Mid(sFormula, nOffsID, nLenID))
        If Len(sID) = 0 Then
            sID = g_Ses.DefaultID
        End If
    End If
    sID = g_Glob.ParamValue(sID)
    sRep = Trim(Mid(sFormula, nOffsRep, nLenRep))
    If Left(sRep, 1) = Chr(34) And Right(sRep, 1) = Chr(34) Then
        If Len(sRep) > 2 Then
            sRep = Mid(sRep, 2, Len(sRep) - 2)
            Dim cnn As EDL.EdlConnection
            Set cnn = g_Ses.Company(sID)
            sRep = cnn.Query("SELECT res_id FROM humres WHERE usr_id = '" & sRep & "_rep'")
            If Len(sRep) = 0 Then Err.Raise 1004 'Application defined error
        Else
            sRep = ""
        End If
        ConvertRevenueFormula = Left(sFormula, nOffsRep - 1) & sRep & Mid(sFormula, nOffsRep + nLenRep)
    Else
        ConvertRevenueFormula = sFormula
    End If
    Exit Function
Failed:
    fCantFindRepID = True
    Dim sSep As String, sText As String, nPos As Long
    sSep = Application.International(xlListSeparator)
    sText = "'" & sFormula
    nPos = InStr(sText, ",")
    Do While nPos > 0
        sText = Left(sText, nPos - 1) & sSep & Mid(sText, nPos + 1)
        nPos = InStr(sText, ",")
    Loop
    ConvertRevenueFormula = sText
End Function

Private Sub ConvertWorksheet(ByVal ws As Excel.Worksheet)
    Dim nOldCalculation As Long, fOldScreenUpdating As Boolean, fCalculate As Boolean
    Dim formulas As Range, r As Excel.Range, nCount As Long
    Dim sFormula As String, nOffsID As Long, nLenID As Long, nOffsRep As Long, nLenRep As Long
    Dim sSheetName As String: sSheetName = g_App.Term.String(12802, "Worksheet") & " " & ws.Name & ": "
    nOldCalculation = Application.Calculation
    fOldScreenUpdating = Application.ScreenUpdating
    Application.Calculation = xlCalculationManual
    Application.ScreenUpdating = False

    Set formulas = ws.Cells.SpecialCells(xlCellTypeFormulas)

    fObsoleteFunctions = False
    fNoDefaultCompany = False
    fCompanyNotOpen = False
    fCantFindRepID = False
    Set collMissingIDs = New Collection

    On Error GoTo EndPass1
    nCount = 0
    For Each r In formulas
        nCount = nCount + 1
        Application.StatusBar = sSheetName & g_App.Term.String(10560, "Checking...") & " (" & ((nCount * 100) \ formulas.Cells.Count) & "%)"
        sFormula = r.Formula
        If HasObsoleteFunction(sFormula) Then
            fObsoleteFunctions = True
        End If
        If IsRevenueFormula(sFormula, nOffsID, nLenID, nOffsRep, nLenRep) Then
            TestRevenueFormula sFormula, nOffsID, nLenID, nOffsRep, nLenRep
        End If
    Next r
EndPass1:
    Application.StatusBar = sSheetName & g_App.Term.String(10560, "Checking...") & " (100%)"

    If fObsoleteFunctions Then
        MsgBox g_App.Term.String(6494, "Some functions that are no longer supported were detected.  They can be identified by the following error message in the cell") & ": #NAME?"
    End If

    If fNoDefaultCompany Or fCompanyNotOpen Then
        MsgBox g_App.Term.String(6434, "Some functions cannot be converted until the following companies are opened") & ": " & GetMissingIDs
        Set collMissingIDs = Nothing
        Exit Sub
    End If
    Set collMissingIDs = Nothing

    On Error GoTo EndPass2
    nCount = 0
    For Each r In formulas
        nCount = nCount + 1
        Application.StatusBar = sSheetName & g_App.Term.String(9081, "Converting...") & " (" & ((nCount * 100) \ formulas.Cells.Count) & "%)"
        sFormula = r.Formula
        sFormula = StripExactFunctions(sFormula)
        If IsRevenueFormula(sFormula, nOffsID, nLenID, nOffsRep, nLenRep) Then
            sFormula = ConvertRevenueFormula(sFormula, nOffsID, nLenID, nOffsRep, nLenRep)
        End If
        If sFormula <> r.Formula Then
            On Error GoTo CantSetFormula
            r.Formula = sFormula
            On Error GoTo Failed
            fCalculate = True
        End If
ContinuePass2:
    Next r
EndPass2:
    Application.StatusBar = sSheetName & g_App.Term.String(9081, "Converting...") & " (100%)"

Failed:
    Application.ScreenUpdating = fOldScreenUpdating
    Application.Calculation = nOldCalculation
    If fCalculate Then
        Application.StatusBar = sSheetName & g_App.Term.String(17959, "Calculating...")
        ws.Calculate
    End If

    Application.StatusBar = ""
    If fCantFindRepID Then
        MsgBox g_App.Term.String(6574, "The following conversion failed") & ": " & g_App.Term.String(8757, "Representatives")
    End If
    Exit Sub

CantSetFormula:
    If Err.Number = 1004 Then Resume ContinuePass2
    GoTo Failed
End Sub

Public Sub ConvertWorkbook(ByVal wb As Excel.Workbook)
    Dim ws As Excel.Worksheet
    For Each ws In wb.Worksheets
        ConvertWorksheet ws
    Next ws
End Sub
Attribute VB_Name = "modDeclarations"
Option Private Module
Option Explicit

Public Const REGBASE = "Software\Exact\Exact for Windows\4.0"
Public Const REGEXCEL = REGBASE & "\Office Addins\Excel"

Public Const HKEY_CURRENT_USER = &H80000001
Public Const HKEY_LOCAL_MACHINE = &H80000002

Public Const KEY_ALL_ACCESS = &HF003F
Public Const KEY_READ = &H20019

Public Const REG_DWORD = 4
Public Const REG_SZ = 1

Public Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As Long) As Long
Public Declare Function RegCreateKey Lib "advapi32.dll" Alias "RegCreateKeyA" (ByVal hKey As Long, ByVal lpSubKey As String, phkResult As Long) As Long
Public Declare Function RegCloseKey Lib "advapi32.dll" (ByVal hKey As Long) As Long

Public Declare Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, lpData As Any, lpcbData As Long) As Long
Public Declare Function RegSetValueEx Lib "advapi32.dll" Alias "RegSetValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal Reserved As Long, ByVal dwType As Long, lpData As Any, ByVal cbData As Long) As Long
Public Declare Function RegDeleteValue Lib "advapi32.dll" Alias "RegDeleteValueA" (ByVal hKey As Long, ByVal lpValueName As String) As Long

Public Declare Function RegQueryString Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, ByVal lpData As String, lpcbData As Long) As Long
Public Declare Function RegSetString Lib "advapi32.dll" Alias "RegSetValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal Reserved As Long, ByVal dwType As Long, ByVal lpData As String, ByVal cbData As Long) As Long
Public Declare Function SetFocus Lib "user32.dll" (ByVal hWnd As Long) As Long

Public Function RegGetString(ByVal hKey As Long, ByVal lpValueName As String, ByRef lpValue As String) As Long
    Dim s As String * 1024, n As Long
    n = 1024
    RegGetString = RegQueryString(hKey, lpValueName, 0, REG_SZ, s, n)
    If RegGetString = 0 Then lpValue = Left(s, n)
End Function
Attribute VB_Name = "modFunction"
Option Explicit
Option Private Module

Public m_sFunction As String

Public Function SpecialCaseForRevenue() As Boolean
    
    Select Case m_sFunction
        Case "REV_GROUP", "REV_GROUP_FY", "REV_ITEM", "REV_ITEM_FY", "REV_DEBTOR", "REV_DEBTOR_FY"
            SpecialCaseForRevenue = True
        Case Else
            SpecialCaseForRevenue = False
    End Select
    
End Function

Public Function SpecialCaseForCostCenter(vClassId As Variant) As Boolean

    On Error Resume Next
    
    Dim vnt As Variant
    Dim ssql As String
    
    Dim cnn As EDL.EdlConnection: Set cnn = g_Ses.Company(g_Ses.DefaultID)
    
    ssql = "SELECT a.description FROM CostCenterClassNames a " & _
           "INNER JOIN CostCenterClasses b ON a.classid = b.classid " & _
           "WHERE a.classid = ?"
    
    vnt = cnn.Query(ssql, vClassId, edlNoNulls + edlForce2dim)
    
    SpecialCaseForCostCenter = True
    
    If Not IsEmpty(vnt) Then
        If UBound(vnt) > 1 Then
            SpecialCaseForCostCenter = False
        End If
    End If
    
    On Error GoTo 0

End Function

Public Function Get_DefaultBudget() As Variant
    'BR Number: 08.040.092 - Kavien Poon
    'Get the first budget scenario for opt590 on
    
    On Error Resume Next
    
    Dim vnt As Variant
    
    Dim cnn As EDL.EdlConnection: Set cnn = g_Ses.Company(g_Ses.DefaultID)
    
    vnt = cnn.Query("SELECT TOP 1 bud_vers, oms30_1 AS oms30 FROM bdgvrs WHERE bud_niveau = 'G' ORDER BY bud_vers", , edlNoNulls + edlForce2dim)
    
    Get_DefaultBudget = vnt
    
    On Error GoTo 0
End Function

Public Function Get_CostCenterClasses(vClassId As Variant) As Variant

    On Error Resume Next
    
    Dim vnt As Variant
    
    Dim cnn As EDL.EdlConnection: Set cnn = g_Ses.Company(g_Ses.DefaultID)
    
    vnt = cnn.Query("SELECT CostCenterClassCode, Description FROM CostCenterClasses WHERE classid = ?", vClassId, edlNoNulls + edlForce2dim)
    
    Get_CostCenterClasses = vnt
    
    On Error GoTo 0

End Function

Public Sub SetFipProperties(ByVal conn As exl.IExlConnection, ByVal ctl As slui.fip, ByVal sParam As String)
    'BR: 08.740.102 Kavien Poon
    'Change from ""/Empty to " " in combofip
    
    Dim vResult As Variant, vTest As Variant
    Dim cnn As EDL.EdlConnection
    Dim i As Long
    
    Dim fOptional As Boolean
    If Left(sParam, 1) = "[" Then
        sParam = Mid(sParam, 2, Len(sParam) - 2)
        fOptional = True
    Else
        fOptional = False
    End If
    
    If SpecialCaseForRevenue Then
        fOptional = True
    End If
    
    Dim vnt As Variant
    
    Dim t As esl.ITranslator, s As esl.ISettings, v As esl.ValueSet
    Set t = g_App.Term
    Set s = conn.Company
    Set v = ctl.TestValues

    v.Clear
    If fOptional Then
        ctl.DimModifiers = esl.tmOptional Or esl.tmNoDefault
    Else
        ctl.DimModifiers = esl.tmNoEmpty
    End If
    'BR 14.546.141
    Select Case LCase(sParam)
    Case "account"
        ctl.Caption = t.String(3952, "Account")
        ctl.DimLength = 6
        ctl.DimType = "4"
        ctl.BrowseTable = "grtbk"
        ctl.BrowseField = "reknr"
        ctl.BrowseSQLSelect = "SELECT ID, reknr, oms25_0 AS oms25, bal_vw, debcrd FROM grtbk WHERE omzrek IN ('K','J','N') AND bal_vw= 'W' ORDER BY reknr"
        
    Case "acc_nr"
        ctl.Caption = t.String(31263, "GL account")
        ctl.BrowseTable = "grtbk"
        
    Case "activity"
        ctl.Caption = t.String(3201, "activity")
        ctl.DimModifiers = ctl.DimModifiers Or esl.tmUpper
        ctl.DimLength = 30
        ctl.DimType = 1
        ctl.BrowseTable = "artbst"
        ctl.BrowseField = "artcode"
        ctl.BrowseSQLSelect = "SELECT artbst.ID AS ID, artcode, oms30_0 AS oms30 FROM artbst WHERE property = 'L' AND condition = 'A' ORDER BY artcode"
        
    Case "after_entry"
        ctl.Caption = t.String(20378, "After Entry")
        ctl.DimType = esl.typeNoYes
        
    Case "amount"
        ctl.Caption = t.String(4182, "Amount")
        ctl.DimType = esl.typeTest
        ctl.DimModifiers = esl.tmNoEmpty
        
        If fOptional Then
            v.Add " ", ""
        End If
        
        v.Add "1", t.String(19630, "Debit")
        v.Add "2", t.String(1886, "Credit")
        v.Add "3", t.String(5614, "All")
        
    Case "budgetversion"
        ctl.Caption = t.String(32493, "Budget scenario")
        ctl.BrowseTable = "bdgvrs"
        'BR 14.491.199
        ctl.BrowseField = "bud_vers"
        'BR 14.260.557, filter out bud_vers -> 'MRP'
        ctl.BrowseSQLSelect = "Select bud_vers,oms30 from bdgvrs where bud_niveau = 'G' AND bud_vers <> 'MRP'"
        If g_Ses.Company.GetOpt(590) = True Then
            vnt = Get_DefaultBudget
            
            If Not IsEmpty(vnt) Then
                ctl.value = vnt(LBound(vnt), 1)
            End If
            
            ctl.Enabled = False
        End If
        
    Case "bud_vers"
        ctl.Caption = t.String(32493, "Budget scenario")
        ctl.BrowseTable = "bdgvrs"
        'BR 19.332.710 foon36643:Magnify screen' in excel addin for function CAT_BAL does nothing
        'solution: set the browsefield to bud_vers
        ctl.BrowseField = "bud_vers"
        'BR 14.260.557, filter out bud_vers -> 'MRP'
        ctl.BrowseSQLSelect = "Select bud_vers,oms30 from bdgvrs where bud_niveau = 'G' AND bud_vers <> 'MRP'"
        ctl.Enabled = False
        
    Case "bud_value"
        ctl.Caption = t.String(2514, "Value")
        ctl.DimType = esl.typeTest
        ctl.DimModifiers = esl.tmNoEmpty
                
        v.Add " ", ""
'        v.Add "1", t.String(2135, "Debit balance")
'        v.Add "2", t.String(2136, "Credit balance")
        v.Add "3", t.String(2137, "Budget amount debit")
        v.Add "4", t.String(2138, "Budget amount credit")
        v.Add "5", t.String(5783, "Budget quantities")
        
    Case "calc":
        ctl.Caption = t.String(9488, "Calculation method")
        ctl.DimType = esl.typeTest
        ctl.DimModifiers = esl.tmNoEmpty
        
        v.Add " ", ""
        v.Add "1", t.String(1249, "Period figures")
        v.Add "2", t.String(8508, "Cumulative")
        
        'BR: 09.734.930 Kavien Poon
        'Disable the function for secondary currency
        'v.Add "3", t.String(32613, "Period figures in secondary currency")
        'v.Add "4", t.String(32614, "Cumulative in secondary currency")
        
    Case "cc_cat1", "cc_cat2", "cc_cat3", "cc_cat4"
        Set cnn = g_Ses.Company(g_Ses.DefaultID)
        
        Dim ssql As String
        
        ssql = "SELECT classid, description FROM CostCenterClassNames " & _
               "WHERE classid = ?"
        
        Select Case LCase(sParam)
            Case "cc_cat1"
                vResult = cnn.Query(ssql, 1, edlNoNulls)
            Case "cc_cat2"
                vResult = cnn.Query(ssql, 2, edlNoNulls)
            Case "cc_cat3"
                vResult = cnn.Query(ssql, 3, edlNoNulls)
            Case "cc_cat4"
                vResult = cnn.Query(ssql, 4, edlNoNulls)
        End Select
                                    
        If Not IsEmpty(vResult) Then
            If Len(Trim(vResult(2))) <> 0 Then
                ctl.Caption = vResult(2)
            Else
                ctl.Caption = Space(20)
            End If
            ctl.DimType = esl.typeTest
            
            vTest = Get_CostCenterClasses(vResult(1))
            If Not IsEmpty(vTest) Then
                ctl.DimModifiers = esl.tmNoEmpty
                
                Call v.Add(" ", "")
                For i = LBound(vTest) To UBound(vTest)
                    Call v.Add(vTest(i, 1), vTest(i, 1) & " - " & vTest(i, 2))
                Next i
            End If
        End If
        
    Case "cc", "cc_code"
        ctl.Caption = t.String(8494, "Cost center")
        ctl.BrowseTable = "kstpl"
        
    Case "cell"
        ctl.Caption = t.String(8413, "Cell")
        ctl.value = "="
        
    Case "check_on_curr"
        ctl.Caption = t.String(32714, "Currency check")
        ctl.DimType = esl.typeTest
        ctl.DimModifiers = esl.tmNoEmpty
        
        v.Add " ", ""
        v.Add "1", t.String(32615, "Only items with the correct currency code")
        v.Add "2", t.String(32624, "All outstanding items regardless of the currency code")
        v.Add "3", t.String(32625, "All outstanding items converted to the specified currency code")
        
    Case "code"
        ctl.Caption = t.String(1102, "Item code") & "/" & t.String(222, "Assortment")
        ctl.ButtonType = slui.buttonRight
    'BR 14.851.686 yong107021
    Case "closing_entries"
        ctl.Caption = t.String(15148, "Include closing entries")
        ctl.DimType = esl.typeYesNo
    'end BR 14.851.686
        
    Case "crd_nr":
        ctl.Caption = t.String(8504, "Vendor")
        ctl.BrowseField = "crdcode"
        ctl.BrowseIndex = "ix_crdcode"
        ctl.BrowseSQLSelect = "SELECT crdcode, cmp_name, cmp_fadd1, cmp_fcity, cmp_fctry FROM cicmpy WHERE (crdcode IS NOT NULL) ORDER BY crdcode"
        ctl.BrowseSQLTables = "cicmpy"
        ctl.BrowseTable = "cicmpy"
        ctl.DimLength = 20
        
    Case "cu", "cu_code"
        ctl.Caption = t.String(1194, "Cost unit")
        ctl.BrowseTable = "kstdr"
        
    Case "curr_code"
        ctl.Caption = t.String(9192, "Currency code")
        ctl.BrowseTable = "valuta"
        
    Case "curr_type"
        ctl.Caption = t.String(5172, "Type")
        ctl.DimType = esl.typeTest
        ctl.DimModifiers = esl.tmNoEmpty
        
        v.Add " ", ""
        v.Add "0", t.String(4806, "Default currency")
        'BR 14.662.072 ysbr
        'v.Add "1", t.String(24582, "Secondary currency")
        'v.Add "2", t.String(24665, "Secondary currency factor")
        
    Case "date"
        ctl.Caption = t.String(8516, "Date")
        ctl.DimType = esl.typeDate
        
    Case "days"
        ctl.Caption = t.String(1722, "Days")
        ctl.DimType = esl.typeLong
        ctl.DimLength = 5
        ctl.value = -1
        
    Case "deb_nr":
        ctl.Caption = t.String(3264, "Customer")
        ctl.BrowseField = "debcode"
        ctl.BrowseIndex = "ix_debcode"
        ctl.BrowseSQLSelect = "SELECT debcode, cmp_name, cmp_fadd1, cmp_fcity, cmp_fctry  FROM cicmpy WHERE (debcode IS NOT NULL) ORDER BY debcode"
        ctl.BrowseSQLTables = "cicmpy"
        ctl.BrowseTable = "cicmpy"
        'BR 29.831.890
        ctl.DimLength = 41 '20
       
    Case "entry_nr"
        ctl.Caption = t.String(4627, "Entry number")
        ctl.DimType = esl.typeNum
        ctl.DimLength = 8
        
    Case "facode"
        ctl.Caption = t.String(3167, "Machine")
        ctl.BrowseTable = "facard"
        ctl.Browser.Flags = 0
        
    Case "file"
        ctl.Caption = t.String(8890, "Table")
        ctl.BrowseField = "TableName"
        'BR21.085.740 foon36643:Globe2003 Batch360: EAI - searching for tables is only in English possible although the description is visible in German
        'Don't allow to termsn the ddcolumns as there is no multiple description exist
'        ctl.BrowseSQLColInfo = "Description,,,,,,,,,TermID;"
        ctl.BrowseSQLHidden = "TermID"
        ctl.BrowseSQLSelect = "SELECT TableName, Description, TermID FROM DDTables ORDER BY TableName"
        ctl.BrowseSQLTables = "DDTables"
        ctl.BrowseTable = "DDTables"
        ctl.DimModifiers = esl.tmNoEmpty 'required
        
    Case "field"
        ctl.Caption = t.String(8451, "Column")
        ctl.ButtonType = slui.buttonRight
        
    Case "fromdate"
        ctl.Caption = t.String(22474, "From Date")
        ctl.DimType = 16
        
    Case "fy"
        ctl.Caption = t.String(1193, "Financial year")
        ctl.DimType = esl.typeTest
        ctl.DimModifiers = esl.tmNoEmpty
        v.Clear
        Dim nYear As Long, nMinYear As Long, nMaxYear As Long
        nMinYear = ECY2FY(s("eaccount\laagste_boekjaar,c"))
        nMaxYear = ECY2FY(s("eaccount\hoogste_boekjaar,c"))
        v.Add " ", ""
        For nYear = nMinYear To nMaxYear
            v.Add nYear, nYear
        Next nYear
        
    Case "humres"
        ctl.Caption = t.String(12, "Resource")
        ctl.DimLength = 6
        ctl.DimType = 4
        ctl.BrowseTable = "humres"
        ctl.DimLength = 9
        
    Case "index"
        ctl.Caption = t.String(7273, "Index")
        ctl.ButtonType = slui.buttonRight
        
    Case "item":
        ctl.Caption = t.String(1102, "Item Code")
        ctl.AutoValidate = 1 'BR19.014.959 - ngwa112107 - 20060502 - Set to true to validate the artcode
        ctl.DimModifiers = ctl.DimModifiers Or esl.tmUpper
        'ctl.DimLength = 60
        ctl.DimType = 1
        ctl.BrowseTable = "artbst"
        
    Case "item_code"
        ctl.Caption = t.String(1102, "Item code")
        ctl.AutoValidate = 1 'BR18.939.610 foon36643: Change autovalidate to 1 so that the checking will be done when lost focus on the item
        ctl.BrowseTable = "artbst"
        
    Case "item_group"
        ctl.Caption = t.String(1162, "Item group")
        ctl.DimLength = "10"
        ctl.DimType = "1"
       'Br19.243.686 foon36643:Item group show * when the Item group has 10 characters
       'Solution: Use itemassortment instead of artgrp
        ctl.BrowseTable = "ItemAssortment"
        
    Case "item_group_cd"
        ctl.Caption = t.String(1162, "Item group")
        'Br19.243.686 foon36643:Item group show * when the Item group has 10 characters
       'Solution: Use itemassortment instead of artgrp
        ctl.BrowseTable = "ItemAssortment"
        
    Case "key"
        ctl.Caption = t.String(5330, "Key")
        ctl.value = "="
    Case "machine"
        ctl.Caption = t.String(3167, "machine")
        ctl.DimLength = "15"
        ctl.DimType = "1"
        ctl.BrowseTable = "facard"
        ctl.BrowseField = "assetcode"
        ctl.BrowseSQLTables = "facard,artbst"
        ctl.BrowseSQLSelect = "SELECT facard.assetcode, facard.descr50 FROM facard INNER JOIN artbst ON facard.artcode = artbst.artcode WHERE artbst.property = 'M' AND facard.status IN ('A','G','C') ORDER BY facard.assetcode"
        ctl.Browser.Flags = 0
        
    Case "main_class_cd":
        Set cnn = g_Ses.Company(g_Ses.DefaultID)
        
        With ctl
            .Caption = cnn.Query("SELECT [Description_0] From AccountClassNames Where ClassID=1", , edlNoNulls)
            .DimLength = 30
            .DimType = typeLas
            .BrowseIndex = "ix_accountclasses"
            .BrowseField = "AccountClassCode"
            .BrowseTable = "AccountClasses"
            .BrowseSQLSelect = "SELECT ClassID, AccountClassCode, Description FROM accountclasses WHERE ClassID=1 ORDER BY ClassID, AccountClassCode"
            .BrowseSQLColInfo = "ClassId,,,,,,1;"
            .Browser.FixLen = 1
            .Browser.KeyValue(1) = 1
        End With
        
    Case "outstan_type"
        ctl.Caption = t.String(5172, "Type")
        ctl.DimType = esl.typeTest
        ctl.DimModifiers = esl.tmNoEmpty
        
        v.Add " ", ""
        
        'BR 11.694.400 Change test value for the following function
        If Not (m_sFunction = "DEB_OUTSTAN_ALL" Or m_sFunction = "DEB_OUTSTANDING" Or _
        m_sFunction = "CRD_OUTSTAN_ALL" Or m_sFunction = "CRD_OUTSTANDING") Then
            v.Add "1", t.String(2162, "Amount after entry")
            v.Add "2", t.String(2163, "Amount after posting")
            v.Add "3", t.String(32618, "Amount after entry in currency of outstanding item")
            v.Add "4", t.String(32619, "Amount after posting in currency of outstanding item")
            v.Add "5", t.String(32620, "Amount payment charge/discount")
            v.Add "6", t.String(1901, "Original amount")
            v.Add "7", t.String(2122, "Exchange rate outstanding items")
            v.Add "8", t.String(9616, "Quantity")
        Else
            v.Add "4", t.String(4182, "Amount")
            v.Add "5", t.String(32620, "Amount payment charge/discount")
            v.Add "6", t.String(1901, "Original amount")
            v.Add "7", t.String(2122, "Exchange rate outstanding items")
        End If
        
        'v.Add "9", t.String(32621, "Amount after entry in secondary currency")
        'v.Add "10", t.String(32622, "Amount after posting in secondary currency")
    Case Else
        'Split function because it became too large
        SetFipProperties2 conn, ctl, sParam, fOptional
    End Select
    
    ctl.CaptionAlignment = slui.captLeft
    If (ctl.DimModifiers And esl.tmVarkq) = esl.tmVarkq Then
        ctl.Browser.Flags = 0
    End If
End Sub

Private Sub SetFipProperties2(ByVal conn As exl.IExlConnection, ByVal ctl As slui.fip, ByVal sParam As String, ByVal fOptional As Boolean)
On Error GoTo ErrorHandler


    Dim t As esl.ITranslator, s As esl.ISettings, v As esl.ValueSet
    Dim cnn As EDL.EdlConnection
    Set t = g_App.Term
    Set s = conn.Company
    Set v = ctl.TestValues
    
    Dim vResult As Variant
    
    Select Case sParam
    Case "period"
        ctl.Caption = t.String(5771, "Period")
    Case "price"
        ctl.Caption = t.String(4217, "Price")
        ctl.DimType = esl.typePrice
        ctl.DimLength = 8
    Case "price_list"
        ctl.Caption = t.String(3517, "Price list code")
        ctl.BrowseTable = "stfoms"
        
    Case "price_list_type"
        ctl.Caption = t.String(5172, "Type")
        ctl.DimType = esl.typeTest
        ctl.DimModifiers = esl.tmNoEmpty
        
        If fOptional Then
            v.Add " ", ""
        End If
        
        v.Add qdmItem, t.String(32623, "Change price lists for items")
        v.Add qdmGroup, t.String(32626, "Change price lists for item groups")
        
    Case "project_subtype"
        ctl.Caption = t.String(1105, "Transaction Type")
        ctl.DimType = esl.typeTest
        ctl.DimModifiers = esl.tmNoEmpty
        
        v.Add " ", ""
        v.Add "1", t.String(12348, "Labor")
        v.Add "2", t.String(653, "Machine")
        'v.Add "3", t.String(8702, "Item")
        'v.Add "4", t.String(13534, "Direct")
        
    Case "project_type"
        ctl.Caption = t.String(3801, "Type")
        ctl.DimType = esl.typeTest
        ctl.DimModifiers = esl.tmNoEmpty
        
        v.Add " ", ""
        v.Add "1", t.String(11690, "Cost")
        v.Add "2", t.String(1169, "Revenue")
        'FC33.629.148 - split WIP into 4 WIPs
        v.Add "3", t.String(9562, "WIP") & " (" & t.String(37103, "other") & ")"
        v.Add "4", t.String(37101, "WIP production")
        v.Add "5", t.String(789, "WIP Revenue")
        v.Add "6", t.String(806, "WIP costs")
        'v.Add "5", t.String(8900, "Outstanding")
    Case "project_value"
        ctl.Caption = t.String(2514, "Value")
        ctl.DimType = esl.typeTest
        ctl.DimModifiers = esl.tmNoEmpty
        
        v.Add " ", ""
        v.Add "1", t.String(11829, "Actual Amount")
        'v.Add "2", t.String(2257, "Budget Ammount")
        v.Add "2", t.String(3214, "Planning ") & " " & t.String(16704, " Amount")
        v.Add "3", t.String(12568, "Actual quantity")
        'v.Add "4", t.String(2534, "Budget Quantity")
        v.Add "4", t.String(3214, "Planning ") & " " & t.String(8706, " quantity")
        
    Case "prproject"
        ctl.Caption = t.String(2114, "Project Code")
        ctl.DimModifiers = ctl.DimModifiers Or esl.tmVarkq Or esl.tmUpper
        ctl.DimLength = "35"
        ctl.BrowseTable = "prproject"
    Case "qty1"
        ctl.Caption = t.String(2746, "From quantity (1)")
        ctl.DimType = esl.typeDouble
        ctl.DimLength = 6
        ctl.DimScale = 3
    Case "qty2"
        ctl.Caption = t.String(9300, "From quantity (2)")
        ctl.DimType = esl.typeDouble
        ctl.DimLength = 6
        ctl.DimScale = 3
    Case "qty3"
        ctl.Caption = t.String(9301, "From quantity (3)")
        ctl.DimType = esl.typeDouble
        ctl.DimLength = 6
        ctl.DimScale = 3
    Case "qty4"
        ctl.Caption = t.String(9302, "From quantity (4)")
        ctl.DimType = esl.typeDouble
        ctl.DimLength = 6
        ctl.DimScale = 3
    Case "qty5"
        ctl.Caption = t.String(9303, "From quantity (5)")
        ctl.DimType = esl.typeDouble
        ctl.DimLength = 6
        ctl.DimScale = 3
    Case "qty_disc_type"
        ctl.Caption = t.String(2736, "Discount type")
        ctl.DimType = esl.typeTest
        ctl.DimModifiers = esl.tmNoEmpty
        
        If fOptional Then
            v.Add " ", ""
        End If
        'v.Add "", ""
        v.Add "1", t.String(8466, "Percentage")
        v.Add "2", t.String(4182, "Amount")
        v.Add "3", t.String(1356, "New price")
    Case "rec_type"
        ctl.Caption = t.String(5172, "Type")
        ctl.DimType = esl.typeTest
        ctl.DimModifiers = esl.tmNoEmpty
        
        v.Add " ", ""
        v.Add "1", t.String(32627, "Receipt of completed purchase packages")
        v.Add "2", t.String(32628, "Receipt of incompleted purchase packages")
        v.Add "3", t.String(32629, "Receipt of completed sales packages")
        v.Add "4", t.String(32630, "Receipt of incompleted sales packages")
        
    Case "rep"
        ctl.Caption = t.String(1348, "Representative")
        ctl.DimType = esl.typeLong
        ctl.DimModifiers = ctl.DimModifiers Or esl.tmVarkq Or esl.tmNoZero
        ctl.DimLength = 10
        ctl.BrowseField = "res_id"
        ctl.BrowseTable = "humres"
        ctl.BrowseSQLSelect = "SELECT humres.res_id, humres.usr_id, humres.fullname FROM humres INNER JOIN pwruc ON (humres.res_id = pwruc.res_id AND pwruc.role_id = 999) ORDER BY humres.res_id"
        ctl.BrowseSQLTables = "humres, pwruc"
        
    Case "rev_type"
        ctl.Caption = t.String(5172, "Type")
        ctl.DimType = esl.typeTest
        ctl.DimModifiers = esl.tmNoEmpty
        
        v.Add " ", ""
        v.Add "1", t.String(1169, "Revenue")
        v.Add "2", t.String(10908, "Revenue PY")
        v.Add "3", t.String(2980, "Revenue quantity")
        v.Add "4", t.String(32631, "Revenue quantity previous year")
        v.Add "5", t.String(32632, "Revenue margin")
        v.Add "6", t.String(32633, "Revenue margin previous year")
        'v.Add "7", t.String(30618, "Revenue budget")
        'v.Add "8", t.String(32634, "Revenue budget quantity")
        v.Add "9", t.String(20130, "Cost price") 'BR17.205.959 foon36643: As instructed by sing hau, change the description to cost price from standard price
        
    Case "senario"
        ctl.Caption = t.String(32493, "Budget scenario")
        ctl.DimLength = "10"
        ctl.DimType = "1"
        ctl.BrowseTable = "bdgvrs"
'        Dim rstResult As Variant
'        Set cnn = g_Ses.Company(g_Ses.DefaultID)
'        rstResult = (cnn.Query("SELECT TOP 1 bud_vers FROM bdgvrs WHERE vers_stat IN ('A','F') AND bkjrcode_v <=?", year(Date), edlNoNulls))
'        ctl.value = rstResult
        
        Dim vnt As Variant
        
        If g_Ses.Company.GetOpt(590) = True Then
            vnt = Get_DefaultBudget
            
            If Not IsEmpty(vnt) Then
                ctl.value = vnt(LBound(vnt), 1)
            End If
            
            ctl.Enabled = False
        End If
    Case "transtype"
        ctl.Caption = t.String(8804, "Show")
        ctl.DimType = esl.typeTest
        ctl.DimModifiers = esl.tmNoEmpty
        
        If fOptional Then
            v.Add " ", ""
        End If
        
        v.Add "0", t.String(8391, "Budget")
        v.Add "1", t.String(4820, "Realized")
    Case "show"
        'BR 09.069.969
        ctl.Caption = t.String(2514, "value")
        ctl.DimType = esl.typeTest
        ctl.DimModifiers = esl.tmNoEmpty
        
        If fOptional Then
            v.Add " ", ""
        End If
        
        v.Add "0", t.String(16704, "Amount")
        v.Add "1", t.String(8706, "Quantity")
        v.Add "2", t.String(16704, "Amount") & ": " & t.String(11690, "Costs")
        v.Add "3", t.String(8706, "Quantity") & ": " & t.String(11690, "Costs")
        v.Add "4", t.String(16704, "Amount") & ": " & t.String(1169, "Revenue")
        v.Add "5", t.String(8706, "Quantity") & ": " & t.String(1169, "Revenue")
    Case "showmach" 'New Case
        ctl.Caption = t.String(2514, "value")
        ctl.DimType = esl.typeTest
        ctl.DimModifiers = esl.tmNoEmpty
        
        If fOptional Then
            v.Add " ", ""
        End If
        
        v.Add "0", t.String(16704, "Amount")
        v.Add "1", t.String(8706, "quantity")
    Case "show_all"
        ctl.Caption = t.String(8804, "show")
        ctl.DimType = esl.typeTest
        ctl.DimModifiers = esl.tmNoEmpty
        
        If fOptional Then
            v.Add " ", ""
        End If
        
        v.Add "1", t.String(11829, "Actual Amount")
        v.Add "2", t.String(2257, "Budget Ammount")
        v.Add "3", t.String(12568, "Actual Quantity")
        v.Add "4", t.String(2534, "Budget Quantity")
    Case "status"
        ctl.Caption = t.String(20378, "After Entry")
        ctl.DimType = esl.typeNoYes
    Case "stock_type"
        ctl.Caption = t.String(5172, "Type")
        ctl.DimType = esl.typeTest
        ctl.DimModifiers = esl.tmNoEmpty
        
        If fOptional Then
            v.Add " ", ""
        End If
        
        v.Add "1", t.String(1830, "Reserved stock on order")
        'BR19.635.551 foon36643:Obsolete fields 'minvrd' and 'veilvrd' are used in STOCK_INFO
'        v.Add "2", t.String(1402, "Minimum stock")
        v.Add "3", t.String(1392, "Maximum stock")
        v.Add "4", t.String(29344, "Safety stock")
        v.Add "5", t.String(6996, "Purchase order level")
        v.Add "6", t.String(7723, "Stock ordered")
        v.Add "7", t.String(8800, "Shelf stock")
        v.Add "8", t.String(1406, "Available stock")
        v.Add "9", t.String(1403, "Economic stock")
    
    Case "sub_class_code":
        Set cnn = g_Ses.Company(g_Ses.DefaultID)
        
        With ctl
            .Caption = cnn.Query("select [Description_0] FROM AccountClassnames WHERE ClassID = 2", , edlNoNulls)
            .DimLength = 30
            .DimType = typeLas
            .BrowseIndex = "ix_accountclasses"
            .BrowseField = "AccountClassCode"
            .BrowseTable = "AccountClasses"
            .BrowseSQLSelect = "SELECT ClassID, AccountClassCode, Description FROM accountclasses WHERE ClassID=2 ORDER BY ClassID, AccountClassCode"
            .BrowseSQLColInfo = "ClassId,,,,,,1;"
            .Browser.FixLen = 1
            .Browser.KeyValue(1) = 2
        End With
        
    Case "todate":
        ctl.Caption = t.String(8172, "To Date")
        ctl.DimType = 16
        
    Case "usage":
        ctl.Caption = t.String(349, "usage")
        ctl.DimLength = 30
        ctl.DimType = 1
        ctl.BrowseTable = "artbst"
        ctl.BrowseField = "artcode"
        ctl.BrowseSQLSelect = "SELECT artbst.ID AS ID, artcode, oms30_0 AS oms30 FROM artbst WHERE property = 'M' AND condition = 'A' ORDER BY artcode"
        
    Case "value":
        ctl.Caption = t.String(2514, "Value")
        ctl.DimType = esl.typeTest
        ctl.DimModifiers = esl.tmNoEmpty
        
        v.Add " ", ""
        v.Add "1", t.String(19630, "Debit")
        v.Add "2", t.String(1886, "Credit")
        v.Add "3", t.String(1254, "Balance")
        v.Add "4", t.String(6524, "Positive")
        v.Add "5", t.String(11397, "Negative")
        
        'BR 11.694.400 Change test value for the following function
        If Not (m_sFunction = "DEB_OUTSTAN_ALL" Or m_sFunction = "DEB_OUTSTANDING" Or _
        m_sFunction = "CRD_OUTSTAN_ALL" Or m_sFunction = "CRD_OUTSTANDING") Then
            v.Add "6", t.String(9616, "Quantity")
        End If
        
    Case "value1"
        ctl.Caption = t.String(2175, "Amount or percentage")
        ctl.DimType = esl.typeDouble
        ctl.DimLength = 8
        ctl.DimScale = 3
        
    Case "value2"
        ctl.Caption = t.String(22043, "Amount or percentage (2)")
        ctl.DimType = esl.typeDouble
        ctl.DimLength = 8
        ctl.DimScale = 3
        
    Case "value3"
        ctl.Caption = t.String(22044, "Amount or percentage (3)")
        ctl.DimType = esl.typeDouble
        ctl.DimLength = 8
        ctl.DimScale = 3
        
    Case "value4"
        ctl.Caption = t.String(22045, "Amount or percentage (4)")
        ctl.DimType = esl.typeDouble
        ctl.DimLength = 8
        ctl.DimScale = 3
        
    Case "value5"
        ctl.Caption = t.String(22046, "Amount or percentage (5)")
        ctl.DimType = esl.typeDouble
        ctl.DimLength = 8
        ctl.DimScale = 3
        
    Case "weekfrom"
        ctl.Caption = t.String(22474, "From Date")
        ctl.DimType = 16
        
    Case "weekto"
        ctl.Caption = t.String(8172, "To Date")
        ctl.DimType = 16
        
    Case "week_nr"
        ctl.Caption = t.String(2093, "Week number")
        ctl.DimType = esl.typeLong
        ctl.min = 1
        ctl.max = 53
        
    Case "which_rate"
        ctl.Caption = t.String(8570, "Exchange rate")
        ctl.DimType = esl.typeTest
        ctl.DimModifiers = esl.tmNoEmpty
        
        v.Add " ", ""
        v.Add "1", t.String(32636, "Most recent exchange rate")
        v.Add "2", t.String(32637, "Exchange rate before the most recent exchange rate")
        
    Case "wrh_code":
        ctl.Caption = t.String(4076, "Warehouse code")
        ctl.BrowseTable = "magaz"
        
    Case "wrh_loc":
        With ctl
            .Caption = t.String(2585, "Warehouse location")
            .BrowseField = "maglok"
            .BrowseTable = "evloc"
            .BrowseIndex = "evloc"
            .field = "maglok"
            .Table = "evloc"
            .DimType = esl.typeLas
            .DimLength = 10
        End With
        
        '05.968.212
        'If Not s("bestel\use_block_locations,b") Then
            'ctl.DimModifiers = esl.tmOptional Or esl.tmNoDefault
        'End If
        
    Case "year"
        ctl.Caption = t.String(1321, "year")
        ctl.DimLength = "4"
        ctl.DimType = "28"
        ctl.value = Year(Now())
        
    Case "reportdate"
        With ctl
            'FC 15.365.379 yong107021
            '.Caption = t.String(15730, "Reporting date")
            .Caption = t.String(4211, "Range")

            .DimLength = 8
            .DimType = typeTest
            
            Call v.Add("1", t.String(8516, "Date"))
            Call v.Add("2", t.String(15730, "Reporting date"))
            
            .value = "1"
        End With
        
    Case "class_id":
        ctl.Caption = t.String(18272, "Classification level")
        ctl.DimType = esl.typeTest
        
        Set cnn = g_Ses.Company(g_Ses.DefaultID)
        vResult = cnn.Query("SELECT ClassID FROM accountclassnames WHERE enabled = 1", , edlForce2dim)
        If (IsEmpty(vResult) = True) Then
            Call v.Add("0", "?")
            ctl.Error = t.String(20005, "Missing")
        Else
            Dim i As Long
            
            ctl.DimModifiers = esl.tmNoEmpty
            
            If fOptional Then
                v.Add " ", ""
            End If
            
            For i = LBound(vResult) To UBound(vResult)
                Call v.Add(vResult(i), vResult(i))
            Next i
        End If
        
    Case "class_code":
        'since the 1st value(if available) is the default it will be fetched
        Set cnn = g_Ses.Company(g_Ses.DefaultID)
        vResult = cnn.Query("SELECT TOP 1 ClassID FROM accountclassnames WHERE enabled = 1")
        
        With ctl
            .DimLength = 30
            .DimType = typeLas
            .BrowseIndex = "ix_accountclasses"
            .BrowseField = "AccountClassCode"
            .BrowseSQLSelect = "SELECT ClassID, AccountClassCode, Description FROM accountclasses WHERE ClassID = " & vResult & " ORDER BY ClassID, AccountClassCode"
            .BrowseTable = "AccountClasses"
            .Browser.FixLen = 1
            .BrowseSQLColInfo = "ClassId,,,,,,1;"
        
            If (IsEmpty(vResult) = True) Then
                .Caption = t.String(31284, "Classification") & ": ?"
                .Enabled = False
            Else
                .Caption = cnn.Query("SELECT [Description_0] FROM AccountClassnames WHERE ClassID = ?", vResult)
                .Browser.KeyValue(1) = vResult
            End If
        End With
        
    Case "trans_type":
        With ctl
            .Caption = t.String(1105, "Transaction type")
            .DimLength = 8
            .DimType = typeTest
            
            'note: only numbers(not Void is "V"!!!)
            Call v.Add("1", t.String(5614, "All"))
            Call v.Add("2", t.String(8836, "Standard"))
            'FCR20.703.356 foon36643: There is no budget field in ACC_BAL but only seleciton of trans_type
            If m_sFunction = "ACC_BAL" Then
                Call v.Add("8", t.String(6486, "Normal"))
            End If
            If m_sFunction <> "ACC_BAL" Then
                Call v.Add("3", t.String(662, "Void"))
            End If
            'optional
            Call v.Add("4", t.String(1313, "Opening balance"))
            Call v.Add("5", t.String(6400, "Correction"))
'            If (conn.Company.GetOpt(205)) Then
                Call v.Add("6", t.String(4407, "Fiscal"))
'            End If
            If m_sFunction <> "ACC_BAL" Then
                Call v.Add("7", t.String(8391, "Budget"))
            End If
            'FCR20.703.356 end
            
            .value = "1"
        End With
        
    Case Else
        ctl.Caption = sParam
    End Select
    
    
Exit Sub
ErrorHandler:
    Err.Source = "modFunction::SetFipProperties2"
    Call ProcessError(Err)
End Sub

Private Function GetFunctionName(ByVal sFormula As String) As String
    Dim sFunc As String, nPos As Long
    If Mid(sFormula, 2, 1) = "'" Then
        nPos = InStr(3, sFormula, "'!")
        If nPos > 0 Then
            sFunc = Mid(sFormula, nPos + 2)
        End If
    Else
        sFunc = Mid(sFormula, 2)
    End If
    nPos = InStr(sFunc, "(")
    If nPos > 0 Then
        GetFunctionName = Left(sFunc, nPos - 1)
    End If
End Function

Private Function GetFunctionParams(ByVal sFormula As String) As String
    Dim sFunc As String, nPos As Long
    If Mid(sFormula, 2, 1) = "'" Then
        nPos = InStr(3, sFormula, "'!")
        If nPos > 0 Then
            sFunc = Mid(sFormula, nPos + 2)
        End If
    Else
        sFunc = Mid(sFormula, 2)
    End If
    nPos = InStr(sFunc, "(")
    If nPos > 0 Then
        GetFunctionParams = Mid(sFunc, nPos)
    End If
End Function

Public Function GetExactFunctionRow(ByVal sFormula As String) As Long
    Dim sFunction As String, nRow As Long
    sFunction = GetFunctionName(sFormula)
    nRow = 1
    Do While Len(shtFunc.Cells(nRow, 1).value) > 0
        If shtFunc.Cells(nRow, 1).value = sFunction Then
            GetExactFunctionRow = nRow
            Exit Function
        End If
        nRow = nRow + 1
    Loop
    GetExactFunctionRow = 0
End Function

Public Function IsExactFunction(ByVal sFormula As String) As Boolean
    IsExactFunction = (GetExactFunctionRow(sFormula) > 0)
End Function

Public Sub ExactFunctionWizard()
    If TestDefaultConnection Then
        If CheckLicense Then
            Dim frm As frmFunction
            If ActiveCell.HasFormula Then
                Dim nRow As Long
                nRow = GetExactFunctionRow(ActiveCell.Formula)
                If IsEnabled(g_Ses.DefaultID, nRow) Then
                    Set frm = New frmFunction
                    If Not frm.Init(nRow, GetFunctionParams(ActiveCell.Formula)) Then
                        If Not frm.m_Conn Is Nothing Then
                            MsgBox g_App.Term.String(6166, "Company is closed") & ": " & frm.m_Conn.ID
                        Else
                            MsgBox g_App.Term.String(6166, "Company is closed")
                        End If
                    Else
                        'BR 39.551.935 - 'Set Default Company object in order to display customize term correctly
                        g_Ses.ExactApplication.DefaultCompany = frm.m_Conn.Company
                        frm.Show
                    End If
                Else
                    Call ShowNoRightsMessage
                End If
            Else
                Dim conn As IExlConnection: Set conn = g_Ses.Connection(g_Ses.DefaultID)
                Do While TestEnabledFunctions(conn.ID) = False
                    Call ShowNoRightsMessage
                    Set conn = g_Ses.CreateConnection
                    If conn Is Nothing Then Exit Do
                Loop
                If Not conn Is Nothing Then
                    g_Ses.DefaultID = conn.ID
                    'BR 39.551.935 - 'Set Default Company object in order to display customize term correctly
                    g_Ses.ExactApplication.DefaultCompany = conn.Company
                    Set frm = New frmFunction
                    frm.Show
                End If
            End If
        End If
    End If
End Sub

Public Sub ShowExactFunctions(ByVal fVisible As Boolean)
    Dim nCategory As Long: nCategory = IIf(fVisible, 14, 0)
    Dim nRow As Long: nRow = 1
    Do While Len(shtFunc.Cells(nRow, 1).value) > 0
        Application.MacroOptions shtFunc.Cells(nRow, 1), , , , , , nCategory
        nRow = nRow + 1
    Loop
End Sub

Public Function IsEnabled(ByVal ConnID As String, ByVal nRow As Long) As Boolean
    Dim fh As IFunctionHandler
    Dim sValue As String
    Dim nCol As Integer: nCol = 1
    Dim bValue As Boolean
    Dim i As Integer
    
    On Error GoTo errH
    If nRow <= 0 Then GoTo errH
    
    Do While Len(shtFunc.Cells(nRow, nCol)) <> 0
        nCol = nCol + 1
    Loop
    'Column with expresion
    nCol = nCol + 1
    
    Set fh = g_Ses.Company(ConnID)
    
    'Manage OR expresion
    Do
        IsEnabled = True
        i = 1
        'Manage AND expresion
        Do
            sValue = ExtractValue(i, shtFunc.Cells(nRow, nCol))
            If sValue = "" Then Exit Do
            If Left(sValue, 3) = "opt" Then
                bValue = g_Ses.Company(ConnID).GetOpt(CInt(Right(sValue, Len(sValue) - 3)))
            Else
                bValue = fh.Function(sValue).Enabled
            End If
            IsEnabled = (IsEnabled And bValue)
            If IsEnabled = False Then Exit Do
            i = i + 1
        Loop
        nCol = nCol + 1
    Loop While (IsEnabled = False) And (Len(shtFunc.Cells(nRow, nCol)) <> 0)

    Exit Function

errH:
    IsEnabled = False
End Function

Public Function TestEnabledFunctions(ByVal ConnID As String) As Boolean
    Dim nRow As Long: nRow = 1
    TestEnabledFunctions = False
    Do While Len(shtFunc.Cells(nRow, 1).value) > 0
        If IsEnabled(ConnID, nRow) Then
            TestEnabledFunctions = True
            Exit Do
        End If
        nRow = nRow + 1
    Loop
End Function
Attribute VB_Name = "modMacros"
Option Explicit

Public Sub FillDefaultWAdmin()
    Dim i As Integer
    Dim strSearchKey As String
    Dim iRow As Integer
    
    If ActiveCell.Column = 1 Then 'Resource Column
        iRow = Excel.ActiveCell.row
        strSearchKey = UCase(Trim(ActiveCell.value))
        'If Len(Trim(Excel.Cells(iRow, 2).value)) > 0 Then Exit Sub
    
        For i = 2 To 10000
            If Len(Trim(Excel.ActiveWorkbook.Sheets(4).Cells(i, 1).value)) = 0 Then Exit For
            If strSearchKey = UCase(Trim(Excel.ActiveWorkbook.Sheets(4).Cells(i, 1).value)) Then
                Excel.ActiveWorkbook.Sheets(1).Cells(iRow, 2).NumberFormat = "@"
                Excel.ActiveWorkbook.Sheets(1).Cells(iRow, 2).value = Excel.ActiveWorkbook.Sheets(4).Cells(i, 3).value
                Exit For
            End If
        Next
    
    ElseIf ActiveCell.Column = 3 Then 'Project Column
        iRow = Excel.ActiveCell.row
        strSearchKey = UCase(Trim(ActiveCell.value))
        'If Len(Trim(Excel.Cells(iRow, 4).value)) > 0 Then Exit Sub
    
        For i = 2 To 10000
            If Len(Trim(Excel.ActiveWorkbook.Sheets(5).Cells(i, 1).value)) = 0 Then Exit For
            If strSearchKey = UCase(Trim(Excel.ActiveWorkbook.Sheets(5).Cells(i, 1).value)) Then
                Excel.ActiveWorkbook.Sheets(1).Cells(iRow, 5).value = Excel.ActiveWorkbook.Sheets(5).Cells(i, 2).value
                Exit For
            End If
        Next
        For i = 2 To 10000
            If Len(Trim(Excel.ActiveWorkbook.Sheets(3).Cells(i, 1).value)) = 0 Then Exit For
            If strSearchKey = UCase(Trim(Excel.ActiveWorkbook.Sheets(3).Cells(i, 1).value)) Then
                Excel.ActiveWorkbook.Sheets(1).Cells(iRow, 4).value = Excel.ActiveWorkbook.Sheets(3).Cells(i, 2).value
                Exit For
                End If
        Next
    ElseIf ActiveCell.Column = 6 Then 'Activity Column
        iRow = Excel.ActiveCell.row
        strSearchKey = UCase(Trim(ActiveCell.value))
        'If Len(Trim(Excel.Cells(iRow, 7).value)) > 0 Then Exit Sub
    
        For i = 2 To 10000
            If Len(Trim(Excel.ActiveWorkbook.Sheets(2).Cells(i, 1).value)) = 0 Then Exit For
            If strSearchKey = UCase(Trim(Excel.ActiveWorkbook.Sheets(2).Cells(i, 1).value)) Then
                Excel.ActiveWorkbook.Sheets(1).Cells(iRow, 7).NumberFormat = "@"
                Excel.ActiveWorkbook.Sheets(1).Cells(iRow, 7).value = Excel.ActiveWorkbook.Sheets(2).Cells(i, 2).value
                Exit For
            End If
        Next
    Else
        Call FillDescWithAdmin
    End If
    
End Sub

Public Sub FillDefault()
    Dim i As Integer
    Dim strSearchKey As String
    Dim iRow As Integer
        
    If ActiveCell.Column = 1 Then 'Project Column
        iRow = Excel.ActiveCell.row
        strSearchKey = UCase(Trim(ActiveCell.value))
        'If Len(Trim(Excel.Cells(iRow, 2).value)) > 0 Then Exit Sub
    
        For i = 2 To 10000
            If Len(Trim(Excel.ActiveWorkbook.Sheets(5).Cells(i, 1).value)) = 0 Then Exit For
            If strSearchKey = UCase(Trim(Excel.ActiveWorkbook.Sheets(5).Cells(i, 1).value)) Then
                Excel.ActiveWorkbook.Sheets(1).Cells(iRow, 3).value = Excel.ActiveWorkbook.Sheets(5).Cells(i, 2).value
                Exit For
            End If
        Next
        For i = 2 To 10000
            If Len(Trim(Excel.ActiveWorkbook.Sheets(3).Cells(i, 1).value)) = 0 Then Exit For
            If strSearchKey = UCase(Trim(Excel.ActiveWorkbook.Sheets(3).Cells(i, 1).value)) Then
                Excel.ActiveWorkbook.Sheets(1).Cells(iRow, 2).value = Excel.ActiveWorkbook.Sheets(3).Cells(i, 2).value
                Exit For
                End If
        Next
    ElseIf ActiveCell.Column = 4 Then 'Activity Column
        iRow = Excel.ActiveCell.row
        strSearchKey = UCase(Trim(ActiveCell.value))
        'If Len(Trim(Excel.Cells(iRow, 5).value)) > 0 Then Exit Sub
    
        For i = 2 To 10000
            If Len(Trim(Excel.ActiveWorkbook.Sheets(2).Cells(i, 1).value)) = 0 Then Exit For
            If strSearchKey = UCase(Trim(Excel.ActiveWorkbook.Sheets(2).Cells(i, 1).value)) Then
                Excel.ActiveWorkbook.Sheets(1).Cells(iRow, 5).NumberFormat = "@"
                Excel.ActiveWorkbook.Sheets(1).Cells(iRow, 5).value = Excel.ActiveWorkbook.Sheets(2).Cells(i, 2).value
                Exit For
            End If
        Next
    Else
        Call FillDesc
    End If
    
End Sub

Private Sub FillDescWithAdmin()
    Dim i As Integer
    Dim strSearchKey As String
    Dim iRow As Integer
    
    iRow = Excel.ActiveCell.row
    
    'If Len(Trim(Excel.Cells(iRow, 2).value)) = 0 Then 'Empty Resource?
        strSearchKey = UCase(Trim(Excel.Cells(iRow, 1).value))
    
        For i = 2 To 10000
            If Len(Trim(Excel.ActiveWorkbook.Sheets(4).Cells(i, 1).value)) = 0 Then Exit For
            If strSearchKey = UCase(Trim(Excel.ActiveWorkbook.Sheets(4).Cells(i, 1).value)) Then
                Excel.ActiveWorkbook.Sheets(1).Cells(iRow, 2).NumberFormat = "@"
                Excel.ActiveWorkbook.Sheets(1).Cells(iRow, 2).value = Excel.ActiveWorkbook.Sheets(4).Cells(i, 3).value
                Exit For
            End If
        Next
    'End If
    
    'If Len(Trim(Excel.Cells(iRow, 4).value)) = 0 Then 'Empty Project?
        strSearchKey = UCase(Trim(Excel.Cells(iRow, 3).value))
        
        For i = 2 To 10000
            If Len(Trim(Excel.ActiveWorkbook.Sheets(3).Cells(i, 1).value)) = 0 Then Exit For
            If strSearchKey = UCase(Trim(Excel.ActiveWorkbook.Sheets(3).Cells(i, 1).value)) Then
                Excel.ActiveWorkbook.Sheets(1).Cells(iRow, 4).value = Excel.ActiveWorkbook.Sheets(3).Cells(i, 2).value
                Exit For
                End If
        Next
    'End If
    
    'If Len(Trim(Excel.Cells(iRow, 7).value)) = 0 Then 'Empty Activity?
        strSearchKey = UCase(Trim(Excel.Cells(iRow, 6).value))
    
        For i = 2 To 10000
            If Len(Trim(Excel.ActiveWorkbook.Sheets(2).Cells(i, 1).value)) = 0 Then Exit For
            If strSearchKey = UCase(Trim(Excel.ActiveWorkbook.Sheets(2).Cells(i, 1).value)) Then
                Excel.ActiveWorkbook.Sheets(1).Cells(iRow, 7).NumberFormat = "@"
                Excel.ActiveWorkbook.Sheets(1).Cells(iRow, 7).value = Excel.ActiveWorkbook.Sheets(2).Cells(i, 2).value
                Exit For
            End If
        Next
    'End If
End Sub

Private Sub FillDesc()
    Dim i As Integer
    Dim strSearchKey As String
    Dim iRow As Integer

    iRow = Excel.ActiveCell.row
        
    'If Len(Trim(Excel.Cells(iRow, 2).value)) = 0 Then 'Empty Project?
        strSearchKey = UCase(Trim(Excel.Cells(iRow, 1).value))
        
        For i = 2 To 10000
            If Len(Trim(Excel.ActiveWorkbook.Sheets(3).Cells(i, 1).value)) = 0 Then Exit For
            If strSearchKey = UCase(Trim(Excel.ActiveWorkbook.Sheets(3).Cells(i, 1).value)) Then
                Excel.ActiveWorkbook.Sheets(1).Cells(iRow, 2).NumberFormat = "@"
                Excel.ActiveWorkbook.Sheets(1).Cells(iRow, 2).value = Excel.ActiveWorkbook.Sheets(3).Cells(i, 2).value
                Exit For
            End If
        Next
    'End If
    
    'If Len(Trim(Excel.Cells(iRow, 5).value)) = 0 Then 'Empty Activity?
        strSearchKey = UCase(Trim(Excel.Cells(iRow, 4).value))
    
        For i = 2 To 10000
            If Len(Trim(Excel.ActiveWorkbook.Sheets(2).Cells(i, 1).value)) = 0 Then Exit For
            If strSearchKey = UCase(Trim(Excel.ActiveWorkbook.Sheets(2).Cells(i, 1).value)) Then
                Excel.ActiveWorkbook.Sheets(1).Cells(iRow, 5).NumberFormat = "@"
                Excel.ActiveWorkbook.Sheets(1).Cells(iRow, 5).value = Excel.ActiveWorkbook.Sheets(2).Cells(i, 2).value
                Exit For
            End If
        Next
    'End If
End Sub


Private Sub FillTime()
    Dim i As Integer
    Dim StartTime
    Dim EndTime
    Dim iRow As Integer

    iRow = Excel.ActiveCell.row
        
    StartTime = Excel.Cells(iRow, 2).value
    EndTime = Excel.Cells(iRow, 3).value
    
    If ActiveCell.Column = 2 Or ActiveCell.Column = 3 Then
        CalculateActuals StartTime, EndTime, iRow
    ElseIf ActiveCell.Column = 4 Then
        CalculateStartEndTime StartTime, EndTime, iRow
    End If
    
End Sub
        
Function TimeLong(ByVal timeValue)
    ' Return nr of secs
    TimeLong = (Hour(timeValue) * 3600) + (Minute(timeValue) * 60) + Second(timeValue)
End Function
 
Function TimeString(ByVal timeValue)
    Dim lHour
    Dim lMin
    Dim lSec
    
    lHour = Fix(timeValue / 3600)
    lMin = Fix((timeValue Mod 3600) / 60)
    lSec = Fix((timeValue Mod 3600) Mod 60)

    TimeString = TimeSerial(lHour, lMin, lSec)
End Function

Function CalculateActuals(StartTime, EndTime, iRow)
    Dim dActualHour, iPos
    If Len(StartTime & "") > 0 And Len(EndTime & "") > 0 Then
        dActualHour = (TimeLong(EndTime) - TimeLong(StartTime)) / 3600
        dActualHour = FormatNumber((dActualHour), 2)
        dActualHour = Replace(dActualHour, ",", ".")
        If Len(dActualHour) > 0 Then
            iPos = InStr(dActualHour, ".")
            If iPos > 0 Then
                Excel.ActiveWorkbook.Sheets(1).Cells(iRow, 4).value = Left(dActualHour, iPos + 2)
            Else
                Excel.ActiveWorkbook.Sheets(1).Cells(iRow, 4).value = dActualHour
            End If
        End If
    End If
End Function

Function CalculateStartEndTime(sStartTime, sEndTime, iRow)
    Dim dActualHour
    dActualHour = Excel.Cells(iRow, 4).value
    If Len(dActualHour & "") > 0 Then
        If Len(sStartTime & "") = 0 Then sStartTime = TimeSerial("00", "00", "00")
        If Len(sEndTime & "") = 0 Then sEndTime = TimeSerial("00", "00", "00")
            sStartTime = FormatDateTime(sStartTime, 4)
            sEndTime = FormatDateTime(TimeString(TimeLong(sStartTime) + (dActualHour * 3600)), 4)
            Excel.ActiveWorkbook.Sheets(1).Cells(iRow, 2).value = sStartTime
            Excel.ActiveWorkbook.Sheets(1).Cells(iRow, 3).value = sEndTime
    End If
End Function
        

Attribute VB_Name = "modMain"
Option Private Module
Option Explicit

'////////////////////////////////
'compatibility with 8.0(MS Excel 97)

'doesn't work
'Private Enum Constants
'    MAX_PATH = 255
'    CLR_INVALID = -1
'End Enum

'ERROR_STRUCTURE from eAccount.dll::Helper-class is not visible
Public Type ERROR_STRUCTURE2
    Number As Long
    Description As String
    Source As String
End Type

'////////////////////////////////
Private Const MAX_PATH = 255
Private Const GW_CHILD = 5
Private Const GW_HWNDNEXT = 2

Private Declare Function GetClassNameA Lib "user32.dll" ( _
    ByVal hWnd As Long, _
    ByVal lpClassName As Long, _
    ByVal nMaxCount As Long _
) As Long

Private Declare Function GetWindow Lib "user32.dll" ( _
    ByVal hWnd As Long, _
    ByVal uCmd As Long _
) As Long

'
'Private Declare Function GetBkColor Lib "gdi32.dll" ( _
'    ByVal hDC As Long _
') As Long
'
Public Declare Function GetDC Lib "user32.dll" ( _
    ByVal hWnd As Long _
) As Long

Public g_App As esl.Application
Public g_Ses As exl.ExlSession
Public g_Glob As exl.IExlGlobals
Public g_Func As exl.IExlFunctions
Public g_ExApp As New clsEvent

Public lErrorCode As Long
Public m_Graphix As esl.Graphics

'ShowNoRightsMessage
'Public Enum SNRM_
'    SNRM_GENERATE = 1
'    SNRM_OPEN = 2
'End Enum
Public Const SNRM_GENERATE = 1
Public Const SNRM_OPEN = 2

Private Declare Function GetComputerNameA Lib "kernel32.dll" ( _
    ByVal lpBuffer As Long, _
    ByVal nSize As Long _
) As Long
Const MAX_COMPUTERNAME_LENGTH = 15
Private sComputerName As String

Public Sub CleanSession()
On Error Resume Next

    Set g_App = Nothing
    Set g_Ses.ExactApplication = Nothing
    
    'BR17.360.080 - ngwa112107 - 20051207
    Set g_Ses.ExcelApplication = Nothing
    'End - BR17.360.080
    
    Set g_Ses = Nothing
    Set g_Glob = Nothing
    Set g_Func = Nothing
    Set g_ExApp.App = Nothing
    Set g_ExApp = Nothing
    Set m_Graphix = Nothing
    
On Error GoTo 0
End Sub

Public Sub CreateSession()
On Error GoTo ErrorHandler

    Set g_App = New esl.Application
    Set g_Ses = New exl.ExlSession
    Set g_Glob = g_Ses
    Set g_Func = g_Ses
    Set g_Ses.ExactApplication = g_App
    Set g_Ses.ExcelApplication = Application
    Set g_ExApp.App = Application
    Set m_Graphix = New esl.Graphics
    
Exit Sub
ErrorHandler:
    Err.Source = "modMain::CreateSession"
    Call ProcessError(Err)
End Sub

Private Function GetDefaultConnection() As exl.IExlConnection
    Dim conn As exl.IExlConnection
    Set conn = g_Ses.Connection(g_Ses.DefaultID)
    If conn Is Nothing Then
        Set conn = g_Ses.CreateConnection
    End If
    If Not conn Is Nothing Then
        If Not conn.Connected Then
            conn.Reconnect
        End If
        If conn.Connected Then
            Set GetDefaultConnection = conn
        End If
    End If
End Function

Public Function CheckRights() As Boolean
    g_Ses.ExactApplication.FunctionID = "00000000040"
End Function

Public Function CheckLicense() As Boolean
    Dim conn As exl.IExlConnection
    Dim comp As esl.Company
    Set conn = GetDefaultConnection
    If Not conn Is Nothing Then
        Set comp = conn.Company
        If Not comp Is Nothing Then
            If Not ExactOption(comp, OPT_EXCEL_ADD_IN) Then
                Call ShowNoRightsMessage
                CheckLicense = False
            Else
                CheckLicense = True
            End If
        End If
    End If
End Function

Public Function TestDefaultConnection() As Boolean
    Dim conn As exl.IExlConnection
    Dim comp As esl.Company
    Set conn = GetDefaultConnection
    If Not conn Is Nothing Then
        Set comp = conn.Company
        If Not comp Is Nothing Then
            TestDefaultConnection = True
        Else
            TestDefaultConnection = False
        End If
    End If
End Function

Public Function TestAvailableWizardConnections(ByVal sWizard As String) As Boolean
    Dim conn As exl.IExlConnection, vnt As Variant
    For Each conn In g_Ses.Connections
        If conn.Connected Then
            If g_Ses.AvailableWizards(conn).Find(sWizard, vnt) Then
                TestAvailableWizardConnections = True
                Exit Function
            End If
        End If
    Next conn
    Set conn = GetDefaultConnection
    If Not conn Is Nothing Then
        'Debug.Assert conn.Connected
        If g_Ses.AvailableWizards(conn).Find(sWizard, vnt) Then
            TestAvailableWizardConnections = True
        End If
    End If
End Function

Public Function TestWizardReport(ByVal sWizard As String) As Boolean
    On Error GoTo Failed
    Dim reps As exl.IExlReports, rep As exl.IExlReport
    Set reps = g_Ses.Reports(ActiveWorkbook)
    Set rep = reps(ActiveCell)
    If rep Is Nothing Then
        TestWizardReport = True
    ElseIf rep.value.value("System.Wizard") = sWizard Then
        TestWizardReport = True
    End If
    Exit Function
Failed:
    TestWizardReport = True
End Function

Public Function TestAvailableSearch(ByVal ConnID As String, Optional ByVal sSearch As String) As Boolean
    Dim fh As IFunctionHandler
    Dim sValue As String
    
    TestAvailableSearch = False
    sSearch = LCase(sSearch)
    
    On Error GoTo errH
    
    Set fh = g_Ses.Company(ConnID)
    
    Dim nRow As Long: nRow = 1
    Do While Len(shtSearch.Cells(nRow, 1).value) > 0
        If sSearch <> "" Then
            If sSearch <> shtSearch.Cells(nRow, 1) Then GoTo NextRow
        End If
        sValue = ExtractValue(1, shtSearch.Cells(nRow, 4))
        If sValue <> "" Then
            If fh.Function(sValue).Enabled Then
                TestAvailableSearch = True
                Exit Do
            End If
            If sSearch <> "" Then Exit Do
        End If
NextRow:
        nRow = nRow + 1
    Loop

errH:
End Function

'Public Sub ShowNoRightsMessage(Optional ByVal lFlag As SNRM_ = SNRM_GENERATE, _
                               Optional ByVal lHwnd As Long = 0)
Public Sub ShowNoRightsMessage(Optional ByVal lFlag As Long = SNRM_GENERATE, _
                               Optional ByVal lHwnd As Long = 0)
    Dim sMessage As String
    
    Select Case (lFlag)
    Case SNRM_GENERATE:
        sMessage = g_App.Term.String(8964, "Can't generate")
    Case SNRM_OPEN:
        sMessage = g_App.Term.String(8968, "Can't open")
    Case Else
        '?
        Exit Sub
    End Select
        
    sMessage = sMessage & ": " & LCase$(g_App.Term.String(15469, "No rights")) & "!"
    Call g_App.Message(lHwnd, sMessage, , edlgWarning)
    
End Sub

Public Function IsDataUpdatable() As Boolean
On Error GoTo ErrorHandler
IsDataUpdatable = False

    '////////////////////////////////
    Dim comp As esl.Company
    Dim rep As exl.IExlReport
    Dim vs As ValueSet
    Dim conn As exl.IExlConnection
    Dim fh As IFunctionHandler
    Dim vReportName As Variant
    Dim bIsCustom As Boolean
    Dim sFunctionID As String

    'not for Chart
    If (TypeOf ActiveWorkbook.ActiveSheet Is Chart) Then GoTo CleanUp
    'AT[]
    bIsCustom = IsCustomAddIn(rep, vs, vReportName)
    
    If Not bIsCustom Then
        Set rep = g_Ses.Reports(ActiveWorkbook)(ActiveCell)
        If (rep Is Nothing) Then GoTo CleanUp
        Set vs = rep.value
    End If
    
    
    Set conn = g_Ses.Connection(vs.value("System.Company"))
    If (conn Is Nothing) Then GoTo CleanUp

    If (conn.Connected = False) Then
        'crashes If (conn.Reconnect = False) Then GoTo CleanUp
        Dim es As ERROR_STRUCTURE2
        
        On Error Resume Next
        'Call conn.Reconnect    '06.451.651
        
        '////////////////////////////////
        With Err
            es.Number = .Number
            es.Source = .Source
            es.Description = .Description
        End With
        On Error GoTo ErrorHandler
        
        Select Case (es.Number)
        Case 0:
            'check Excel
            If (conn.Company.GetOpt(OPT_EXCEL_ADD_IN) = False) Then
                Call ShowNoRightsMessage
                GoTo CleanUp
            End If
            
        Case -2147467259:
            'cancelled(?)
            GoTo CleanUp

        Case Else
            Call Err.Raise(es.Number, es.Source, es.Description)
        End Select
    End If
    
    Set comp = conn.Company

    'check if user has rights
    Set fh = comp
    If (fh.Function("00000000043").Enabled = False) Then GoTo CleanUp

    'get report name
    'AT[]
    If bIsCustom Then
        IsDataUpdatable = True
        
    Else
        vReportName = LCase$(rep.value.value("System.Wizard"))
        'FCR25.060.895 - ngwa112107: Allow for customize reports from respective Logistics
        'module to be updated. Also, clean up codes from FCR24.100.843 to use in a Select
        'expression for easy maintenance and debugging later.
        'BR24.921.719 - ngwa112107: [ISSUE]: Rights is not checked for updating data
        '[SOLUTION]: Check for the related functionID before allow user to Update Production Calculation report
        'FCR24.100.843 - ngwa112107: PRODCP report from manufacturing will not be
        'called from Excel Addin reports. However, once the data exported to Excel,
        'the Update button needs to be enabled for updating purposes
        Dim bOnlyUpdReport As Boolean 'FCR25.060.895
        Select Case LCase$(rep.value.value("System.Wizard"))
            Case "prodcp"
                sFunctionID = "00000001141"
                bOnlyUpdReport = True
            Case "maintpricelistpergroup"
                sFunctionID = "00000001368"
                bOnlyUpdReport = True
            Case "pmaintpricelistpergrp"
                sFunctionID = "00000001367"
                bOnlyUpdReport = True
            Case "maintecharge" 'FC 31.036.321 Excel add-in for e-charge code
                sFunctionID = "00000001460"
                bOnlyUpdReport = True
            Case "htscode"
                sFunctionID = "00000001470"
                bOnlyUpdReport = True
        End Select
        If bOnlyUpdReport Then
            bOnlyUpdReport = False
            If (fh.Function(sFunctionID).Enabled = False) Then GoTo CleanUp
            IsDataUpdatable = True
            Exit Function
        End If
        'End:FCR25.060.895/FCR24.100.843/BR24.921.719
        Set vs = g_Ses.AvailableWizards(conn)
    
        Dim i As Long
        
        For i = 0 To (vs.Count - 1)
            If (LCase(vs.Item(i)) = vReportName) Then
                'found!
                
                'FCR 12.303.418 - Added fiscaladj report
                'determine if user has right to save data for this report
                Select Case (vReportName)
                Case "budget": 'Budget
                    sFunctionID = "650888"
                    
                Case "changeprices": ' 'Change prices' was renamed to 'Update items'
                    sFunctionID = "652051"
                    
                Case "pmaintpricelist": 'Maintain purchase price lists
                    sFunctionID = "00000000774"
                    
                Case "maintpricelist": 'Maintain sales price lists
                    sFunctionID = "00000000754"
                    
                Case "HTSCode"
                    sFunctionID = "00000001470"
                    
                Case "labourhour": 'Labour hours
                    sFunctionID = "00000000951"
                    
                Case "machinehour": 'Machine hours
                    sFunctionID = "00000000307"
                Case "mps": 'MPS
                    sFunctionID = "00000000946" 'BR#10.821.144
                    
                Case "bomcp": 'BOM Update cost prices
                    sFunctionID = "00000001141"
                    
                Case "mpurs"
                    sFunctionID = "00000001065" 'BR#11.735.101
                
                Case "fiscaladj"
                    sFunctionID = "00000000384"
                
                Case Else
                    'not(balance,table...)
                    GoTo CleanUp
                End Select
                If (fh.Function(sFunctionID).Enabled = False) Then GoTo CleanUp
                    IsDataUpdatable = True
                Exit For
            End If
            
        Next i
    End If
    
    
    'try to find if this report is available
    
    
CleanUp:
    Set comp = Nothing
    Set rep = Nothing
    Set vs = Nothing
    Set conn = Nothing
    Set fh = Nothing
    
Exit Function
ErrorHandler:
    'no error message will be shown to the user
    'possible RE: 9(after [Set rep = ...]
    'Err.Source = "modMain::IsDataUpdatable"
    'Call ProcessError(Err)
    
    GoTo CleanUp
End Function

'AT[]
Public Function IsCustomAddIn(ByRef rep As IExlReport, ByRef vs As ValueSet, Optional ByRef vParam As Variant = Empty) As Boolean
    On Error GoTo ErrHdl
    For Each rep In g_Ses.Reports(ActiveWorkbook)
        Set vs = rep.value
        If vs.Find("Param1", vParam) Then
            vParam = Split(vParam, ":")
            If IsArray(vParam) Then
                If vParam(0) = "[Custom]" Then
                    vParam = Replace(Replace(vParam(1), "[", ""), "]", "")
                    IsCustomAddIn = True
                    Exit For
                End If
            End If
            Exit For
        End If
    Next
    Exit Function
    
ErrHdl:
End Function
'end

Public Sub SetFocusToErrorFip(ByVal s As Slic)
On Error GoTo ErrorHandler

    
    If (s Is Nothing) Then Call Err.Raise(10000, , "Slic is not specified")
    
    'recursively searching for fips
    If (s.Form.Count = 0) Then Exit Sub
    
    'no redimensioning of array on 8.0 or you get error
    '[This array is fixed or temporarily locked] later on
    Dim oObject(65535) As Object
    Dim lObjectsFound As Long
    Dim lIndex As Long
    
    Dim i As Long
    Dim r As slui.ProxyRange
    
    With s.Form
        lObjectsFound = .Count
        'ReDim oObject(lObjectsFound - 1)
        
        For i = 0 To (.Count - 1)
            Set oObject(i) = .Item(i)
        Next i
    End With
    
    lIndex = 0
    
    Dim bValid As Boolean
    Dim lHwnd As Long
    
    Dim lFipHandle() As Long
    Dim lFipsCount As Long
    
    Do Until (lIndex >= lObjectsFound)
        With oObject(lIndex)
'Debug.Print lIndex & " | " & .Name & " | " & Hex$(.Window)

            Select Case (.Type)
            Case sctComponent:
                If (TypeOf .Proxy Is ProxyFip) Then
                    bValid = .Proxy.Validate
                    If (bValid = False) Then lHwnd = .Proxy.hWnd
                    
                ElseIf (TypeOf .Proxy Is ProxyRange) Then
                        bValid = .Proxy.Validate
                        If (bValid = False) Then Set r = .Proxy
                Else
                    bValid = True
                End If
            
                If (bValid = False) Then
                    'found!
                
                    'for ProxyRange get both fips
                    If (TypeOf .Proxy Is ProxyRange) Then
                        lErrorCode = GetBothEditFips(.Proxy.hWnd, _
                                                     lFipHandle, _
                                                     lFipsCount)
                        If (lErrorCode <> 0) Then
                            Call Err.Raise(10001, , "Call to 'GetBothEditFips' failed with error code #" & lErrorCode)
                            
                        ElseIf (lFipsCount <> 2) Then
                                Call Err.Raise(10002, , "Failed to enumerate ProxyRange child windows")
                        Else
                            'continue
                        End If
                        
                        'the following applies
                        '* 1ste fip is dirty and 2nd not => focus to 1st
                        '* 2nd fip is dirty and 1st not => focus to 2nd
                        '* both fips are dirty => focus to 1st(Note: for ProxyRange with Combo's this is ok
                        'but for simple fips there should be check if only 2nd is invalid(how to determine?)
                        
                        '* boths fips are not dirty => this can not be!
                        If (r.DirtyFrom = True And _
                            r.DirtyTo = False) Then
                            lHwnd = lFipHandle(0)
                                                    
                        ElseIf (r.DirtyFrom = False And _
                                r.DirtyTo = True) Then
                                lHwnd = lFipHandle(1)
                                
                        ElseIf (r.DirtyFrom = True And _
                                r.DirtyTo = True) Then
                                'which one?
                                lHwnd = lFipHandle(0)
                        Else
                            Call Err.Raise(10003, , "Neither ProxyFip in ProxyRange is marked dirty")
                        End If
                    End If
            
'Debug.Print lIndex & " | " & .Name & " | " & Hex$(.Window) & " | " & Hex$(.Proxy.hWnd)

                    'message
                    Call g_App.Message(s.hWnd, g_App.Term.String(7482, "Correct the fields marked in red."), , edlgWarning)

                    'focus
                    lErrorCode = SetFocus(lHwnd)
                    If (lErrorCode = 0) Then Call Err.Raise(10004, , "Call to 'SetFocus' failed")

                    Exit Do 'done
                End If
                
            Case sctGroup, _
                 sctMutexGroup, _
                 sctForm:
                'add children to array
                For i = 0 To (.Count - 1)
                    'error [This array is fixed or temporarily locked] on 8.0
                    'ReDim Preserve oObject(lObjectsFound)
                    Set oObject(lObjectsFound) = .Item(i)
                    lObjectsFound = lObjectsFound + 1
                Next i
                
            Case Else
                'not applicable
            End Select
        End With

        lIndex = lIndex + 1
    Loop
    
CleanUp:
    Set r = Nothing

Exit Sub
ErrorHandler:
    'silent
    'Err.Source = "modMain::SetFocusToErrorFip"
    'Call ProcessError(Err, s.hWnd)
    GoTo CleanUp
End Sub

Private Function GetBothEditFips(ByVal hWnd As Long, _
                                 ByRef lFipHandle() As Long, _
                                 ByRef lFipsCount As Long) As Long
On Error GoTo ErrorHandler
GetBothEditFips = 0


    lFipsCount = 0

    Dim lAtlHwnd As Long
    
    lAtlHwnd = GetWindow(hWnd, _
                           GW_CHILD)
    If (lAtlHwnd = 0) Then Call Err.Raise(1, , "Call to 'GetWindow' failed")
    
    Dim lBufferSize As Long
    Dim sWindowClassName As String
    Dim lChildHwnd As Long
    
    Do
        lBufferSize = MAX_PATH
        ReDim btBuffer(lBufferSize - 1) As Byte
    
        'get class name
        lBufferSize = GetClassNameA(lAtlHwnd, _
                                    VarPtr(btBuffer(0)), _
                                    lBufferSize)
        If (Err.LastDllError <> 0) Then Call Err.Raise(2, , "Call to 'GetClassNameA' failed with error code #" & Err.LastDllError)
    
        'convert to W
        sWindowClassName = StrConv(btBuffer, vbUnicode)
        sWindowClassName = Left$(sWindowClassName, lBufferSize)
        
        If (sWindowClassName = "AtlAxWin") Then
            lChildHwnd = GetWindow(lAtlHwnd, _
                                   GW_CHILD)
            If (lChildHwnd = 0) Then Call Err.Raise(3, , "Call to 'GetWindow' failed")
        
            lBufferSize = MAX_PATH
            ReDim btBuffer(lBufferSize - 1) As Byte
        
            'get class name
            lBufferSize = GetClassNameA(lChildHwnd, _
                                        VarPtr(btBuffer(0)), _
                                        lBufferSize)
            If (Err.LastDllError <> 0) Then Call Err.Raise(4, , "Call to 'GetClassNameA' failed with error code #" & Err.LastDllError)
        
            'convert to W
            sWindowClassName = StrConv(btBuffer, vbUnicode)
            sWindowClassName = Left$(sWindowClassName, lBufferSize)
        
            'check if is fip
            If (sWindowClassName = "FipEdit" Or _
                sWindowClassName = "FipComboParent") Then
                'found => adding to array
                ReDim Preserve lFipHandle(lFipsCount)
                lFipHandle(lFipsCount) = lChildHwnd
                lFipsCount = lFipsCount + 1
                
                'stop if both fips are found
                If (lFipsCount = 2) Then Exit Do
            End If
        End If
        
        'try to get the next Atl-window
        lAtlHwnd = GetWindow(lAtlHwnd, _
                             GW_HWNDNEXT)
        If (Err.LastDllError <> 0) Then
            Call Err.Raise(5, , "Call to 'GetWindow' failed with error code #" & Err.LastDllError)
        
        ElseIf (lAtlHwnd = 0) Then
                'no more Atl-children
                Exit Do
        Else
            'continue
        End If
    Loop

    'ok
    

Exit Function
ErrorHandler:
    GetBothEditFips = Err.Number
End Function

Public Function AddNewConnection(ByVal lHwnd As Long) As exl.IExlConnection
On Error GoTo ErrorHandler
Set AddNewConnection = Nothing

    '[adam21726 13-11-2002 11:06] ask for input without adding to session
    'Set conn = g_Ses.CreateConnection

    Dim comp As esl.Company
    
    If (sComputerName = "") Then Call FetchComputerName
    If (sComputerName = "") Then Exit Function
    
    '////////////////
    '[adam21726 15-11-2002 11:46] catch error(workaround for system bug)(05.113.992)
    Dim es As ERROR_STRUCTURE2
    
    On Error Resume Next
    Set comp = g_App.OpenCompany(lHwnd)
    
    With Err
        es.Number = .Number
        es.Source = .Source
        es.Description = .Description
    End With
    On Error GoTo ErrorHandler
    
    Select Case (es.Number)
    Case 0, _
         -2147467259:
        '-2147467259 => cancelled(?)
        
    Case -2147220479:
        Call g_App.Message(lHwnd, g_App.Term.String(32605, "The version of the database is older than the version of the installed software."), , edlgWarning)
        
    Case Else
        Call Err.Raise(es.Number, es.Source, es.Description)
    End Select
    
    '////////////////
    If (Not comp Is Nothing) Then
        Dim sServerName(1) As String
        Select Case (LCase$(comp.ServerName))
        Case ".", "(local)":
            sServerName(1) = sComputerName
        Case Else
            sServerName(1) = comp.ServerName
        End Select
        sServerName(1) = LCase$(sServerName(1))
        
        Dim conn As exl.IExlConnection
        
        For Each conn In g_Ses.Connections
            Select Case (LCase$(conn.ServerName))
            Case ".", "(local)":
                sServerName(0) = sComputerName
            Case Else
                sServerName(0) = comp.ServerName
            End Select
            sServerName(0) = LCase$(sServerName(0))
        
            '[adam21726 13-11-2002 09:36] if chosen company is already available => warning user
            If (Format$(conn.ID, "000") = Format$(comp.Nr, "000") And _
                sServerName(1) = sServerName(0)) Then
                Call g_App.Message(lHwnd, g_App.Term.String(8968, "Can't open") & ": " & Format$(comp.Nr, "000") & "." & vbCrLf & vbCrLf & g_App.Term.String(19011, "Already exists") & "!", , edlgWarning)
                
                GoTo CleanUp
            End If
        Next conn
        
        'does not exist yet => check the rights
        If (comp.GetOpt(OPT_EXCEL_ADD_IN) = False) Then
            Call ShowNoRightsMessage(SNRM_OPEN, lHwnd)
            
            GoTo CleanUp
        End If
        
        Set AddNewConnection = g_Ses.OpenConnection(comp.ServerName, comp.DatabaseName, comp.User.Name, True, Date)
    End If
    
CleanUp:
    Set conn = Nothing

Exit Function
ErrorHandler:
    Err.Source = "modMain::AddNewConnection"
    Call ProcessError(Err, lHwnd)
    
    GoTo CleanUp
End Function

Private Sub FetchComputerName()
On Error GoTo ErrorHandler


    'get local server name
    Dim lBufferSize As Long: lBufferSize = MAX_COMPUTERNAME_LENGTH + 1
    ReDim btBuffer(lBufferSize - 1) As Byte
    
    lErrorCode = GetComputerNameA(VarPtr(btBuffer(0)), _
                                  VarPtr(lBufferSize))
    If (lErrorCode = 0) Then Call Err.Raise(10000, , "Call to 'GetComputerNameA' failed")
    
    sComputerName = StrConv(btBuffer, vbUnicode)
    sComputerName = Left$(sComputerName, InStr(1, sComputerName, vbNullChar) - 1)


Exit Sub
ErrorHandler:
    Err.Source = "modMain::FetchComputerName"
    Call ProcessError(Err)
    
    sComputerName = ""
End Sub

Public Function IsValidCell(ByVal sName As String, _
                            Optional ByVal bAllowEmpty As Boolean = False, _
                            Optional ByRef sValue As String, _
                            Optional ByRef sError As String) As Boolean
On Error GoTo ErrorHandler
    IsValidCell = False
    sValue = ""
    sError = g_App.Term.String(8413, "Cell") & ": " & LCase$(g_App.Term.String(26678, "Invalid reference"))

    If (sName = "") Then
        Exit Function
    ElseIf (InStr(1, sName, " ") > 0) Then
        Exit Function
    Else
        'continue
    End If
    
    sName = LCase$(sName)
    
    'Check if the cell reference is valid
    If Not IsError(sName) Then
        sValue = Range(sName).value
        sError = ""

        If (bAllowEmpty = False) Then
            If (sValue = "") Then
                sError = g_App.Term.String(8413, "Cell") & ": " & LCase$(g_App.Term.String(8985, "May not be") & ": " & g_App.Term.String(17392, "Empty"))
            Else
                IsValidCell = True
            End If
        Else
            IsValidCell = True
        End If
    End If

Exit Function
ErrorHandler:
    'no error!
    'Err.Source = "modMain::IsValidCell"
    'Call ProcessError(Err)
End Function

Public Function Split2(ByVal sString As String, _
                       ByVal sDelimiter As String) As Variant
On Error GoTo ErrorHandler

    'since there is no Strings.Split function in 8.0
    Dim sArray() As String
    Split2 = sArray
    
    If (sString = "") Then
        Exit Function
    
    ElseIf (sDelimiter = "") Then
            Exit Function
    
    ElseIf (Len(sDelimiter) > Len(sString)) Then
            Exit Function
    Else
        'continue
    End If
    
    Dim lCount As Long: lCount = 0
    Dim i As Long: i = 1
    
    i = InStr(1, sString, sDelimiter)
    If (i > 0) Then
        ReDim Preserve sArray(lCount + 1)
        sArray(lCount) = Left$(sString, i - 1)
        sArray(lCount + 1) = Right$(sString, Len(sString) - i)
        lCount = lCount + 2
     
        Do
            i = InStr(1, sArray(lCount - 1), sDelimiter)
            If (i = 0) Then Exit Do
        
            ReDim Preserve sArray(lCount)
            sArray(lCount) = Left$(sArray(lCount - 2), i - 1)
            sString = Right$(sArray(lCount - 2), Len(sArray(lCount - 2)) - i)
            lCount = lCount + 1
        Loop
    
        Split2 = sArray
    End If

Exit Function
ErrorHandler:
    Split2 = Array()
End Function

Public Function SplitComma(ByVal sString As String, _
                       ByVal sDelimiter As String) As Variant
On Error GoTo ErrorHandler

    'since there is no Strings.Split function in 8.0
    Dim sArray() As String
    SplitComma = sArray
    
    If (sString = "") Then
        Exit Function
    
    ElseIf (sDelimiter = "") Then
            Exit Function
    
    ElseIf (Len(sDelimiter) > Len(sString)) Then
            Exit Function
    Else
        'continue
    End If
    
    Dim lCount As Long: lCount = 0
    Dim i As Long: i = 1
    
    i = InStr(1, sString, sDelimiter)
    If (i > 0) Then
        Do
        ReDim Preserve sArray(lCount + 1)
        sArray(lCount) = Left$(sString, i - 1)
        sString = Right$(sString, Len(sString) - i)
        lCount = lCount + 1
        i = InStr(1, sString, sDelimiter)
        If i <= 0 Then
            sArray(lCount) = Right$(sString, Len(sString) - i)
            SplitComma = sArray
            Exit Function
        End If

        Loop
    
        
    End If

Exit Function
ErrorHandler:
    SplitComma = Array()
End Function

Public Function ReplaceString(ByVal sExpression As String, ByVal sFind As String, _
                              ByVal sReplace As String) As String

    Dim iPos As Long

    iPos = InStr(1, sExpression, sFind)
    While iPos > 0
        sExpression = Left(sExpression, iPos - 1) & sReplace & Mid$(sExpression, iPos + 1)
        iPos = InStr(1, sExpression, sFind)
    Wend

    ReplaceString = sExpression

End Function

Attribute VB_Name = "modStartFromShell"
Option Explicit
Option Private Module

Public gbStartFromShell As Boolean

Private Sub OpenDefaultCompany(ByVal v As esl.ValueSet)
On Error GoTo Failed
    Dim sKey As Variant
    Dim v1 As esl.ValueSet
    Dim conn As exl.IExlConnection
    
    Set v = v.value("Company")
    
    If v.Find("Application", sKey) Then
        Set v1 = v.value("Application")
        g_Ses.ExactApplication.FunctionID = v1.value("FunctionID")
    End If
    
    'Not sure why the below statement will causes run time error for acc_bal
    'rte will happen as soon user close the excel.
    'use TestDefaultConnection to solved the problem temporary.
    Set conn = g_Ses.OpenConnection(v.value("ServerName"), v.value("DatabaseName"), v.value("UserName"), v.value("Authentication"), v.value("ProcessDate"))
    
    'BR25.858.537
    'Set Default Company object in order to display customize term correctly
    g_Ses.ExactApplication.DefaultCompany = conn.Company
    
    'TestDefaultConnection
    
Exit Sub
Failed:
    
End Sub

Private Sub AssignNamedCells(ByVal v As esl.ValueSet, ByVal prefix As String)
    On Error Resume Next
    Dim nIndex As Long, nCount As Long
    Dim sKey As String, vntValue As Variant
    Dim n As Excel.Name, v2 As esl.ValueSet
    nCount = v.Count
    For nIndex = 0 To nCount - 1
        sKey = v.Item(nIndex)
        Set v2 = Nothing
        Set v2 = v.value(sKey)
        If Not v2 Is Nothing Then
            AssignNamedCells v2, prefix & sKey & "."
        Else
            Set n = Nothing
            Set n = ActiveWorkbook.Names(prefix & sKey)
            If Not n Is Nothing Then
                vntValue = v.value(sKey)
                If VarType(vntValue) = vbString Then
                    vntValue = "'" & vntValue
                End If
                n.RefersToRange.value = vntValue
            End If
        End If
    Next nIndex
End Sub

Private Sub ExecuteWizard(ByVal v As esl.ValueSet)
On Error GoTo ErrorHandler

 
    Dim sWizard As String
    sWizard = v.value("System.Wizard")

    If Len(sWizard) > 0 Then
        If v.value("System.Silent") Then

            Call g_Ses.EnableControl("Update", False)
            Call g_Ses.EnableControl("Refresh", False)

            Dim v2 As esl.ValueSet, r As Range, rep As exl.IExlReport, wiz As exl.IExlWizard, Sh As String
            
            Set wiz = g_Ses.Wizard(sWizard)
            
            Set v2 = v.value("Slic")
            v2.Add "System.Wizard", sWizard
            v2.Add "System.Company", -1
            v2.Add "System.Update", (Not wiz Is Nothing)
            
            Sh = v.value("System.DataSheet")
            If Len(Sh) > 0 Then
                Set r = ActiveWorkbook.Sheets(Sh).Range("A1")
            Else
                Set r = ActiveCell
            End If

            Set rep = g_Ses.Reports(ActiveWorkbook).Add(r, v2)
            wiz.Initialize g_Ses, g_Ses.Connection(), rep
            Call wiz.Generate
            
            Set rep = Nothing
            Set v2 = Nothing
            Set r = Nothing
            Set wiz = Nothing

            '[adam21726 28-10-2002 18:01] also here check "Update"-item for status(04.881.364)
            Call g_Ses.EnableControl("Update", IsDataUpdatable)
            Call g_Ses.EnableControl("Refresh", True)
            'g_Ses.UpdateUI
        Else
            Dim frm As New frmGenerate
            frm.SetWizard sWizard
            On Error Resume Next
            frm.SetValue v.value("Slic")
            'On Error GoTo 0
            On Error GoTo ErrorHandler
            frm.Show
            
            Set frmGenerate = Nothing
        End If
    End If
    
    
Exit Sub
ErrorHandler:
    Err.Source = "modStartFromShell::ExecuteWizard"
    Call ProcessError(Err)
End Sub

Public Sub StartFromShell(ByVal v As esl.ValueSet)
    On Error Resume Next
    
    gbStartFromShell = True
    
    OpenDefaultCompany v
    AssignNamedCells v.value("Slic"), ""
    ExecuteWizard v
    
    If v.value("System.Refresh") Then Call ThisWorkbook.AddIn_OnRefresh
    
    '[adam21726 01-11-2002 12:24] if there is no data => close application
    If (TypeOf ActiveWorkbook.ActiveSheet Is Worksheet) Then
        If (v.value("System.Silent")) Then
            With ActiveWorkbook.ActiveSheet.UsedRange
                If (.Columns.Count = 1 And _
                    .Rows.Count = 1) Then
                    Call ActiveWorkbook.Close(False)
                    Application.Quit
                    Exit Sub
                End If
            End With
        End If
    End If
    
End Sub


Attribute VB_Name = "modUpdate"
Option Explicit
Option Private Module

Public Sub RefreshReports(ByVal wb As Workbook)
On Error GoTo ErrorHandler
    
    
    Dim vs As ValueSet
    Dim rep As exl.IExlReport
    Dim conn As exl.IExlConnection
    Dim vID As Variant, vWiz As Variant

    If (g_Ses.Reports(wb).Count = 0) Then GoTo CleanUp
    
    Dim bfound As Boolean
    Dim sReport As String
    Dim i As Long
    
    For Each rep In g_Ses.Reports(wb)
        Set vs = rep.value
        
        vID = ""
        Call vs.Find("System.Company", vID)
        Set conn = g_Ses.Connection(vID)
        If (conn Is Nothing) Then GoTo SkipReport
    
        If (conn.Connected = False) Then
            'ask user to reconnect
            'crashes If (conn.Reconnect = False) Then GoTo SkipReport
            
            Dim es As ERROR_STRUCTURE2
            
            On Error Resume Next
            Call conn.Reconnect
            
            '////////////////////////////////
            With Err
                es.Number = .Number
                es.Source = .Source
                es.Description = .Description
            End With
            On Error GoTo ErrorHandler
            
            Select Case (es.Number)
            Case 0:
                'check Excel
                If (conn.Company.GetOpt(OPT_EXCEL_ADD_IN) = False) Then GoTo NoRights
                
            Case -2147467259:
                'cancelled(?)
                GoTo SkipReport
    
            Case Else
                Call Err.Raise(es.Number, es.Source, es.Description)
            End Select
        End If

        bfound = False
        vWiz = ""
        Call rep.value.Find("System.Wizard", vWiz)
        sReport = LCase$(vWiz)
        
        'BR 10.283.664
        'Do not check the rights for the SELECT wizard
        If (sReport = "select") Then
            If gbStartFromShell Then
                bfound = True
            End If
        End If
        
        'BR24.921.719 - ngwa112107: [ISSUE]: Refresh on Production Calculation report hits NO RIGHTS!
        '[SOLUTION]: Always allow refresh for Production Calculation report
        If (sReport = "prodcp") Then
            bfound = True
        End If
        'End:BR24.921.719
        
        'CBR:35.717.499 Refresh on Labour Hour hits NO RIGHTS!
        '[SOLUTION]: Always allow refresh for Labour hour refresh
        If (LCase(sReport) = "prthrentry") Then
           bfound = True
        End If
        
        If Not bfound Then
            '[adam21726 10-10-2002 19:25] current connection must be used
            Set vs = g_Ses.AvailableWizards(conn)
            For i = 0 To (vs.Count - 1)
                If (LCase$(vs.Item(i)) = sReport) Then
                    bfound = True
                    Exit For
                End If
            Next i
        End If
        'BR 14.850.873 yong107021
        'Make sure clear worksheet before retrieve data
        'If Not Worksheets Is Nothing Then
        '    For i = 1 To Worksheets.Count
        '        Worksheets(i).Range("1:65536").Clear
        '    Next
        'End If
        If (bfound = True) Then
            Call rep.Refresh
        Else
            If (CheckRightsInvisible(rep) = True) Then
                Call rep.Refresh
            Else
NoRights:
                Call ShowNoRightsMessage
            End If
        End If
        
SkipReport:
    Next rep
    
CleanUp:
    Set rep = Nothing
    Set vs = Nothing
    Set conn = Nothing
    
    
Exit Sub
ErrorHandler:
    Err.Source = "modUpdate::RefreshReports"
    Call ProcessError(Err)

    GoTo CleanUp
End Sub

Public Sub UpdatePivotTables(wb As Excel.Workbook)
    Dim ws As Excel.Worksheet
    For Each ws In wb.Worksheets
        Dim pt As Excel.PivotTable
        For Each pt In ws.PivotTables
            pt.RefreshTable
        Next pt
        ws.Calculate
    Next ws
End Sub

Private Function CheckRightsInvisible(rep As exl.IExlReport)
    On Error Resume Next
    Dim sWiz As String
    Dim vs As New ValueSet
    Dim i As Integer
    Dim bfound As Boolean
    sWiz = LCase(rep.value.value("System.Wizard"))
    vs.Clear
    vs.Add "GLbyDate", "00000000101"
    vs.Add "GLcharts", "0000000240"
    vs.Add "IntActBalance", "00000000024"
    vs.Add "FutavStock", "00000000066"
    vs.Add "StockVal", "652448"
    vs.Add "Transactions", "00000001092"
    
    For i = 0 To vs.Count - 1
        If LCase(vs.Item(i)) = sWiz Then
            bfound = True
            Exit For
        End If
    Next i
    
    If Not bfound Then
        CheckRightsInvisible = False
    Else
        'check rights
        Dim fh As esl.IFunctionHandler
        Set fh = g_Ses.Connection(rep.value.value("System.Company")).Company
        
        If fh.Function(vs.value(vs.Item(i))).Enabled Then
            CheckRightsInvisible = True
        Else
            CheckRightsInvisible = False
        End If
    End If
    
End Function



Attribute VB_Name = "modUtilities"
Option Private Module
Option Explicit

Private p_evtDblClickEvents As clsDblClickEvent

Public p_bRunningUpdate As Boolean

Public Sub RunMacro(ByVal book As Excel.Workbook, ByVal macro As String)
    On Error Resume Next
    'If the setting doesn't exist, execute the macro
    If g_App.User.settings("Debug\Excel\DisableEvents") = 0 Then
        CheckRights
        Select Case macro
            Case "OnRefreshInitialize"
                Application.Run "'" & book.Name & "'!ThisWorkbook." & macro, g_Ses.Company
            Case Else
                Application.Run "'" & book.Name & "'!ThisWorkbook." & macro
        End Select
    End If
End Sub

'Office97 doesn't support function InStrRev()
Public Function InStrRev_Off97(ByVal s1 As String, ByVal s2 As String) As Long
    Dim pos As Long, newpos As Long
    pos = InStr(s1, s2)
    If pos > 0 Then
        Do
            newpos = InStr(pos + 1, s1, s2)
            If newpos = 0 Then Exit Do
            pos = newpos
        Loop
    End If
    InStrRev_Off97 = pos
End Function

Public Function ECY2FY(ByVal ecy As String) As Long
    ECY2FY = 1372 + 10 * Asc(Mid(ecy, 1, 1)) + Asc(Mid(ecy, 2, 1))
End Function

Public Function CellName(ByVal iCol As Long, ByVal iRow As Long) As String
    If iCol < 27 Then
        CellName = Chr(64 + iCol) & iRow
    Else
        CellName = Chr(64 + ((iCol - 1) \ 26)) & Chr(65 + ((iCol - 1) Mod 26)) & iRow
    End If
End Function

Public Sub FillConnectionList(ByVal fip As slui.fip)
    Dim v As esl.ValueSet, conn As exl.IExlConnection, vnt As Variant
    Set v = fip.TestValues
    v.Clear
    v.Add -1, g_App.Term.String(8521, "Default")
    For Each conn In g_Ses.Connections
        If conn.Connected Then
            v.Add conn.ID, conn.ID & " " & conn.Description
        End If
    Next conn
    If v.Find(-1, vnt) Then
        fip.value = -1
    End If
End Sub

Public Function ExtractValue(ByVal iIndex As Integer, ByVal sExpr As String) As String
    Dim iStart As Integer: iStart = 1
    Dim i As Integer
    Dim iEnd As Integer
    
    ExtractValue = ""
    For i = 1 To iIndex
        iStart = InStr(iStart, sExpr, "[")
        If iStart = 0 Then
            Exit For
        Else
            iStart = iStart + 1
        End If
    Next
    
    If iStart > 0 Then
        iEnd = InStr(iStart, sExpr, "]")
        If iEnd > 0 Then
            ExtractValue = Mid(sExpr, iStart, iEnd - iStart)
        End If
    End If

End Function

Public Function ExactOption(ByVal comp As esl.Company, ByVal Nr As Long) As Boolean
    Dim lic As esl.License
    If Not comp Is Nothing Then
        Set lic = comp
        ExactOption = lic.Option(Nr)
    End If
End Function

Public Sub InitDblClickEvent()
    Set p_evtDblClickEvents = New clsDblClickEvent
End Sub

Attribute VB_Name = "modWorksheetFunctions"
Option Explicit
Const NoRights = "#NO_RIGHTS!"
Const NOVALUE = "#VALUE!"

Public Function IS_HIDDEN(cell As Range, Optional ByVal co As Variant) As Boolean
On Error GoTo Err_Hndlr
    IS_HIDDEN = False
    If IsFunctionAvailable(co, "IS_HIDDEN") Then
        IS_HIDDEN = (cell.Rows.Hidden Or cell.Columns.Hidden)
    End If
  Exit Function
Err_Hndlr:
  IS_HIDDEN = False
End Function

'--=[ System ]=--

Public Function TERM_STRING(ByVal termid As Long, Optional default As Variant, Optional langcode As Variant) As String
    TERM_STRING = g_Func.TERM_STRING(termid, default, langcode)
End Function

Public Function FILE_FIRST(ByVal file As String, Optional ByVal co As Variant, Optional ByVal index As Variant, Optional ByVal field As Variant) As Variant
On Error GoTo Err_Hndlr
    FILE_FIRST = NoRights
    If IsFunctionAvailable(co, "FILE_FIRST") Then
        FILE_FIRST = g_Func.FILE_FIRST(file, co, index, field)
    End If
  Exit Function
Err_Hndlr:
  FILE_FIRST = NOVALUE
End Function

Public Function FILE_NEXT(ByVal cell As String, ByVal file As String, Optional ByVal co As Variant, Optional ByVal index As Variant) As Variant
On Error GoTo Err_Hndlr
    FILE_NEXT = NoRights
    If IsFunctionAvailable(co, "FILE_NEXT") Then
        FILE_NEXT = g_Func.FILE_NEXT(cell, file, co, index)
    End If
  Exit Function
Err_Hndlr:
  FILE_NEXT = NOVALUE
End Function

Public Function FILE_FIELD(ByVal file As String, ByVal key As String, Optional ByVal co As Variant, Optional ByVal index As Variant, Optional ByVal field As Variant) As Variant
On Error GoTo Err_Hndlr
    FILE_FIELD = NoRights
    If IsFunctionAvailable(co, "FILE_FIELD") Then
        FILE_FIELD = g_Func.FILE_FIELD(file, key, co, index, field)
    End If
  Exit Function
Err_Hndlr:
  FILE_FIELD = NOVALUE
End Function

Public Function ACC_DATA(ByVal acc_nr As String, Optional ByVal co As Variant, Optional ByVal field As Variant) As Variant
On Error GoTo Err_Hndlr
    ACC_DATA = NoRights
    If IsFunctionAvailable(co, "ACC_DATA") Then
        ACC_DATA = g_Func.ACC_DATA(Trim$(acc_nr), co, field)
    End If
  Exit Function
Err_Hndlr:
  ACC_DATA = NOVALUE
End Function

Public Function CC_DATA(ByVal cc_code As String, Optional ByVal co As Variant, Optional ByVal field As Variant) As Variant
On Error GoTo Err_Hndlr
CC_DATA = NoRights
 
    
    If IsFunctionAvailable(co, "CC_DATA") Then
      CC_DATA = g_Func.CC_DATA(cc_code, co, field)
    End If
    

Exit Function
Err_Hndlr:
    CC_DATA = NOVALUE
End Function

Public Function CO_DATA(Optional ByVal co As Variant, Optional ByVal field As Variant) As Variant
On Error GoTo Err_Hndlr
    CO_DATA = NoRights
    If IsFunctionAvailable(co, "CO_DATA") Then
        CO_DATA = g_Func.CO_DATA(co, field)
    End If
  Exit Function
Err_Hndlr:
  CO_DATA = NOVALUE
End Function

Public Function CRD_DATA(ByVal crd_nr As String, _
                         Optional ByVal co As Variant, _
                         Optional ByVal field As Variant) As Variant
On Error GoTo ErrorHandler
CRD_DATA = NoRights


    If (IsFunctionAvailable(co, "CRD_DATA") = False) Then Exit Function
    
    '[adam21726 18-10-2002 17:32] the crd_nr references the [cicmpy.crdcode] so
    'it must be converted to [cicmpy.crdnr]
    Dim conn As EDL.EdlConnection
    Set conn = g_Ses.Company(g_Ses.DefaultID)
    
    crd_nr = conn.Query("SELECT crdnr FROM cicmpy WHERE crdcode = ?", Format$(crd_nr, "@@@@@@@@@@@@@@@@@@@@"))
    'BR18.504.126 foon36643: Show Value# if cannot find the debtor
    If (IsEmpty(crd_nr) = True) Or crd_nr = "" Then Call Err.Raise(1)
    
    If Not IsMissing(field) Then field = LCase$(Trim$(field))
    
    CRD_DATA = g_Func.CRD_DATA(crd_nr, co, field)

CleanUp:
    Set conn = Nothing

Exit Function
ErrorHandler:
    CRD_DATA = NOVALUE
    
    GoTo CleanUp
End Function

Public Function CU_DATA(ByVal cu_code As String, Optional ByVal co As Variant, Optional ByVal field As Variant) As Variant
On Error GoTo Err_Hndlr
    CU_DATA = NoRights
    If IsFunctionAvailable(co, "CU_DATA") Then
        CU_DATA = g_Func.CU_DATA(cu_code, co, field)
    End If
  Exit Function
Err_Hndlr:
  CU_DATA = NOVALUE
End Function

Public Function CURR_CODE_DATA(ByVal curr_code As String, Optional ByVal co As Variant, Optional ByVal field As Variant) As Variant
On Error GoTo Err_Hndlr
    CURR_CODE_DATA = NoRights
    If IsFunctionAvailable(co, "CURR_CODE_DATA") Then
        CURR_CODE_DATA = g_Func.CURR_CODE_DATA(curr_code, co, field)
    End If
  Exit Function
Err_Hndlr:
  CURR_CODE_DATA = NOVALUE
End Function

Public Function DEB_DATA(ByVal deb_nr As String, _
                         Optional ByVal co As Variant, _
                         Optional ByVal field As Variant) As Variant
On Error GoTo ErrorHandler
DEB_DATA = NoRights
    
    
    If (IsFunctionAvailable(co, "DEB_DATA") = False) Then Exit Function
    
    '[adam21726 18-10-2002 17:32] the deb_nr references the [cicmpy.debcode] so
    'it must be converted to [cicmpy.debnr]
    Dim conn As EDL.EdlConnection
    Set conn = g_Ses.Company(g_Ses.DefaultID)
    
    deb_nr = conn.Query("SELECT debnr FROM cicmpy WHERE debcode = ?", Format$(deb_nr, "@@@@@@@@@@@@@@@@@@@@"))
    'BR18.504.126 foon36643: Show Value# if cannot find the debtor
    If (IsEmpty(deb_nr) = True) Or deb_nr = "" Then Call Err.Raise(1)
    
    If Not IsMissing(field) Then field = LCase$(Trim$(field))
    
    DEB_DATA = g_Func.DEB_DATA(deb_nr, co, field)
    
    'BR17.773.321 foon36643: Get the debnr instead of guid value that store in cmp_reseller
    If field = "cmp_reseller" Then
        DEB_DATA = conn.Query("SELECT debnr FROM cicmpy WHERE cmp_wwn = ?", DEB_DATA)
    End If

CleanUp:
    Set conn = Nothing

Exit Function
ErrorHandler:
    DEB_DATA = NOVALUE
    
    GoTo CleanUp
End Function

Public Function ITEM_DATA(ByVal item_code As String, Optional ByVal co As Variant, Optional ByVal field As Variant) As Variant
On Error GoTo Err_Hndlr
    ITEM_DATA = NoRights
    If IsFunctionAvailable(co, "ITEM_DATA") Then
        ITEM_DATA = g_Func.ITEM_DATA(item_code, co, field)
    End If
  Exit Function
Err_Hndlr:
  ITEM_DATA = NOVALUE
End Function

Public Function ITEM_GROUP_DATA(ByVal item_group_cd As String, Optional ByVal co As Variant, Optional ByVal field As Variant) As Variant
On Error GoTo Err_Hndlr
    ITEM_GROUP_DATA = NoRights
    If IsFunctionAvailable(co, "ITEM_GROUP_DATA") Then
        ITEM_GROUP_DATA = g_Func.ITEM_GROUP_DATA(item_group_cd, co, field)
    End If
  Exit Function
Err_Hndlr:
  ITEM_GROUP_DATA = NOVALUE
End Function

Public Function MAIN_CLASS_DATA(ByVal main_class_cd As String, Optional ByVal co As Variant, Optional ByVal field As Variant, Optional ByVal model As Variant) As Variant
On Error GoTo Err_Hndlr
    Dim lID As Long
    MAIN_CLASS_DATA = NoRights
    If IsFunctionAvailable(co, "MAIN_CLASS_DATA") Then
        'MAIN_CLASS_DATA = g_Func.MAIN_CLASS_DATA(main_class_cd, co, field, model)
        'BR 16.411.771 yong107021
        'Use index IX_AccountClasses to get data
        Dim sKey As String
        sKey = Format$(1, String$(4, "0")) & Format$(main_class_cd, "!" & String$(30, "@"))
        'lID = GetIdentID(1, main_class_cd)
        'MAIN_CLASS_DATA = g_Func.MAIN_CLASS_DATA(lID, co, field, model)
        MAIN_CLASS_DATA = g_Func.MAIN_CLASS_DATA(sKey, co, field, model)
    End If
  Exit Function
Err_Hndlr:
  MAIN_CLASS_DATA = NOVALUE
End Function

Public Function SUB_CLASS_DATA(ByVal sub_class_code As String, Optional ByVal co As Variant, Optional ByVal field As Variant) As Variant
On Error GoTo Err_Hndlr
    Dim lID As Long
    SUB_CLASS_DATA = NoRights
    If IsFunctionAvailable(co, "SUB_CLASS_DATA") Then
        'SUB_CLASS_DATA = g_Func.SUB_CLASS_DATA(sub_class_code, co, field)
        'BR 16.411.771 yong107021
        'Use index IX_AccountClasses to get data
        Dim sKey As String
        sKey = Format$(2, String$(4, "0")) & Format$(sub_class_code, "!" & String$(30, "@"))
        'lID = GetIdentID(1, main_class_cd)
        'SUB_CLASS_DATA = g_Func.SUB_CLASS_DATA(lID, co, field)
        SUB_CLASS_DATA = g_Func.SUB_CLASS_DATA(sKey, co, field)
    End If
  Exit Function
Err_Hndlr:
  SUB_CLASS_DATA = NOVALUE
End Function


'--=[ Financial ]=--

Public Function CURR_INFO(Optional ByVal co As Variant, Optional ByVal curr_type As Variant) As Variant
On Error GoTo Err_Hndlr
    CURR_INFO = NoRights
    If IsFunctionAvailable(co, "CURR_INFO") Then
        CURR_INFO = g_Func.CURR_INFO(co, curr_type)
    End If
  Exit Function
Err_Hndlr:
  CURR_INFO = NOVALUE
End Function

Private Function EXCHANGE_RATE(ByVal curr_code As String, Optional ByVal co As Variant, Optional ByVal curr_date As Variant) As Variant
    EXCHANGE_RATE = NoRights
    If IsFunctionAvailable(co, "EXCHANGE_RATE") Then
        Dim which_rate As Variant
        which_rate = 1
        EXCHANGE_RATE = g_Func.EXCHANGE_RATE(curr_code, co, which_rate, curr_date)
    End If
End Function

Public Function GL_TRANS(ByVal acc_nr As String, Optional ByVal co As Variant, _
    Optional ByVal curr_code As Variant, Optional ByVal FY As Variant, _
    Optional ByVal Period As Variant, Optional ByVal calc As Variant) As Variant
On Error GoTo Err_Hndlr


    GL_TRANS = NoRights
    If IsFunctionAvailable(co, "GL_TRANS") Then
        GL_TRANS = g_Func.GL_TRANS(Trim$(acc_nr), co, curr_code, FY, Period, calc)
    End If


Exit Function
Err_Hndlr:
    GL_TRANS = NOVALUE
End Function

' FC 15.397.735 yong107021
' Add in closing_type to indicate include closing entries
Public Function GL_TRANS_DATE(ByVal acc_nr As String, Optional ByVal co As Variant, _
    Optional ByVal curr_code As Variant, Optional ByVal vWeekFrom As Variant, _
    Optional ByVal vWeekTo As Variant, _
    Optional ByVal reportdate As Variant, _
    Optional ByVal closing_type As Variant = 1) As Variant
On Error GoTo Err_Hndlr
    GL_TRANS_DATE = NoRights
    If IsFunctionAvailable(co, "GL_TRANS_DATE") Then
        GL_TRANS_DATE = g_Func.GL_TRANS_DATE(Trim$(acc_nr), co, curr_code, vWeekFrom, vWeekTo, reportdate, closing_type)
    End If
  Exit Function
Err_Hndlr:
  GL_TRANS_DATE = NOVALUE
End Function
'FC16.142.329 yong107021
' Add in closing_type to indicate include closing entries and default to false if no param pass in
Public Function ACC_BAL(ByVal acc_nr As String, _
                        Optional ByVal co As Variant, _
                        Optional ByVal FY As Variant, _
                        Optional ByVal Period As Variant, _
                        Optional ByVal balance_type As Variant, _
                        Optional ByVal value As Variant, _
                        Optional ByVal calc As Variant, _
                        Optional ByVal transdate As Variant, _
                        Optional ByVal reportdate As Variant, _
                        Optional ByVal trans_type As Variant, _
                        Optional ByVal closing_type As Variant = 0) As Variant
On Error GoTo Err_Hndlr

    ACC_BAL = NoRights
    If IsFunctionAvailable(co, "ACC_BAL") Then
    'FCR20.703.356 foon36643: Add in trans_type
        'FC16.142.329 yong107021
        'ACC_BAL = g_Func.ACC_BAL(Trim$(acc_nr), co, FY, Period, balance_type, value, calc, transdate, reportdate)
        ACC_BAL = g_Func.ACC_BAL(Trim$(acc_nr), co, FY, Period, balance_type, value, calc, transdate, reportdate, closing_type, trans_type)
    End If
    

Exit Function
Err_Hndlr:
    ACC_BAL = NOVALUE
End Function

' BR 14.851.686 yong107021
' Add in closing_type to indicate include closing entries
Public Function ACC_BAL_DATE(ByVal acc_nr As String, Optional ByVal co As Variant, _
    Optional ByVal vWeekFrom As Variant, Optional ByVal vWeekTo As Variant, _
    Optional ByVal balance_type As Variant, Optional ByVal value As Variant, Optional ByVal reportdate As Variant, _
    Optional ByVal closing_type As Variant = 1) As Variant
On Error GoTo Err_Hndlr


    ACC_BAL_DATE = NoRights
    If IsFunctionAvailable(co, "ACC_BAL_DATE") Then
        ' BR 14.851.686 yong107021
        ' Add in closing_type to indicate include closing entries
        ' ACC_BAL_DATE = g_Func.ACC_BAL_DATE(Trim$(acc_nr), co, vWeekFrom, vWeekTo, balance_type, value, reportdate)
        ACC_BAL_DATE = g_Func.ACC_BAL_DATE(Trim$(acc_nr), co, vWeekFrom, vWeekTo, balance_type, value, reportdate, closing_type)
    End If
    
    
Exit Function
Err_Hndlr:
    ACC_BAL_DATE = NOVALUE
End Function

'Fc31.098.296, 'include closing entries' added (Note: set thisWorkbook's isAddin to false to edit the params)
Public Function MAIN_CLASS_BAL(ByVal main_class_cd As String, Optional ByVal co As Variant, _
    Optional ByVal FY As Variant, Optional ByVal Period As Variant, _
    Optional ByVal balance_type As Variant, Optional ByVal value As Variant, _
    Optional ByVal calc As Variant, Optional ByVal transdate As Variant, Optional ByVal reportdate As Variant, Optional ByVal closing_type As Variant = 1) As Variant
On Error GoTo Err_Hndlr


    MAIN_CLASS_BAL = NoRights
    If IsFunctionAvailable(co, "MAIN_CLASS_BAL") Then
        MAIN_CLASS_BAL = g_Func.MAIN_CLASS_BAL(main_class_cd, co, FY, Period, balance_type, value, calc, , transdate, reportdate, closing_type)
    End If
    
    
Exit Function
Err_Hndlr:
  MAIN_CLASS_BAL = NOVALUE
End Function

' FC 15.397.735 yong107021
' Add in closing_type to indicate include closing entries
Public Function MAIN_CLASS_BAL_DATE(ByVal main_class_cd As String, Optional ByVal co As Variant, _
    Optional ByVal vWeekFrom As Variant, Optional ByVal vWeekTo As Variant, _
    Optional ByVal balance_type As Variant, Optional ByVal value As Variant, _
    Optional ByVal reportdate As Variant, _
    Optional ByVal closing_type As Variant = 1) As Variant
On Error GoTo Err_Hndlr


    MAIN_CLASS_BAL_DATE = NoRights
    If IsFunctionAvailable(co, "MAIN_CLASS_BAL_DATE") Then
        MAIN_CLASS_BAL_DATE = g_Func.MAIN_CLASS_BAL_DATE(main_class_cd, co, vWeekFrom, vWeekTo, balance_type, value, , reportdate, closing_type)
    End If
    
    
Exit Function
Err_Hndlr:
    MAIN_CLASS_BAL_DATE = NOVALUE
End Function

Public Function SUB_CLASS_BAL(ByVal sub_class_code As String, Optional ByVal co As Variant, _
    Optional ByVal FY As Variant, Optional ByVal Period As Variant, _
    Optional ByVal balance_type As Variant, Optional ByVal value As Variant, _
    Optional ByVal calc As Variant, Optional ByVal transdate As Variant, _
    Optional ByVal reportdate As Variant, Optional ByVal closing_type As Variant = 1) As Variant
On Error GoTo Err_Hndlr


    SUB_CLASS_BAL = NoRights
    If IsFunctionAvailable(co, "SUB_CLASS_BAL") Then
        SUB_CLASS_BAL = g_Func.SUB_CLASS_BAL(sub_class_code, co, FY, Period, balance_type, value, calc, , transdate, reportdate, closing_type)
    End If


Exit Function
Err_Hndlr:
    SUB_CLASS_BAL = NOVALUE
End Function

' FC 15.397.735 yong107021
' Add in closing_type to indicate include closing entries
Public Function SUB_CLASS_BAL_DATE(ByVal sub_class_code As String, Optional ByVal co As Variant, _
    Optional ByVal vWeekFrom As Variant, Optional ByVal vWeekTo As Variant, _
    Optional ByVal balance_type As Variant, Optional ByVal value As Variant, _
    Optional ByVal reportdate As Variant, _
    Optional ByVal closing_type As Variant = 1) As Variant
On Error GoTo Err_Hndlr


    SUB_CLASS_BAL_DATE = NoRights
    If IsFunctionAvailable(co, "SUB_CLASS_BAL_DATE") Then
        SUB_CLASS_BAL_DATE = g_Func.SUB_CLASS_BAL_DATE(sub_class_code, co, vWeekFrom, vWeekTo, balance_type, value, , reportdate, closing_type)
    End If
    
    
Exit Function
Err_Hndlr:
    SUB_CLASS_BAL_DATE = NOVALUE
End Function

Public Function CC_BAL(ByVal acc_nr As String, ByVal cc As String, _
    Optional ByVal co As Variant, Optional ByVal FY As Variant, _
    Optional ByVal Period As Variant, Optional ByVal balance_type As Variant, _
    Optional ByVal value As Variant, Optional ByVal calc As Variant, Optional ByVal transdate As Variant, Optional ByVal reportdate As Variant) As Variant
On Error GoTo Err_Hndlr


    CC_BAL = NoRights
    If IsFunctionAvailable(co, "CC_BAL") Then
        CC_BAL = g_Func.CC_BAL(Trim$(acc_nr), cc, co, FY, Period, balance_type, value, calc, transdate, reportdate)
    End If
    
    
Exit Function
Err_Hndlr:
    CC_BAL = NOVALUE
End Function

Public Sub ProcessError(ByVal oError As ErrObject, _
                        Optional ByVal lWindowHandle As Long = 0)
    'trim possible unprintable chars
    oError.Description = RTrim$(oError.Description)
    'not compatible with 8.0!
    'oError.Description = Replace$(oError.Description, Chr$(10), ";")

    If (g_App Is Nothing) Then
        Call MsgBox("Error description: " & oError.Description & "(" & oError.Number & ")" & vbCrLf & _
                    "Error source: " & oError.Source)
    Else
        Call g_App.UnexpectedError(lWindowHandle, oError)
    End If

End Sub

' FC 15.397.735 yong107021
' Add in closing_type to indicate include closing entries
Public Function CC_BAL_DATE(ByVal acc_nr As String, ByVal cc As String, _
    Optional ByVal co As Variant, Optional ByVal vWeekFrom As Variant, _
    Optional ByVal vWeekTo As Variant, Optional ByVal balance_type As Variant, _
    Optional ByVal value As Variant, Optional ByVal reportdate As Variant, _
    Optional ByVal closing_type As Variant = 1) As Variant
On Error GoTo Err_Hndlr


    CC_BAL_DATE = NoRights
    If IsFunctionAvailable(co, "CC_BAL_DATE") Then
        CC_BAL_DATE = g_Func.CC_BAL_DATE(Trim$(acc_nr), cc, co, vWeekFrom, vWeekTo, balance_type, value, reportdate, closing_type)
    End If


Exit Function
Err_Hndlr:
    CC_BAL_DATE = NOVALUE
End Function

' FC 15.397.735 yong107021
' Add in closing_type to indicate include closing entries
Public Function GL_BAL(ByVal acc_nr As String, Optional ByVal cu As String, Optional ByVal cc As String, _
    Optional ByVal co As Variant, Optional ByVal FY As Variant, _
    Optional ByVal Period As Variant, Optional ByVal balance_type As Variant, _
    Optional ByVal value As Variant, _
    Optional ByVal closing_type As Variant = 1) As Variant
On Error GoTo Err_Hndlr


    GL_BAL = NoRights
    If IsFunctionAvailable(co, "GL_BAL") Then
        GL_BAL = g_Func.GL_BAL(Trim$(acc_nr), cu, cc, co, FY, Period, balance_type, value, , closing_type)
    End If


Exit Function
Err_Hndlr:
    GL_BAL = NOVALUE
End Function

Public Function BUDGET_BAL(ByVal strBudVers As Variant, ByVal acc_nr As String, Optional ByVal cu As String, Optional ByVal cc As String, _
    Optional ByVal co As Variant, Optional ByVal FY As Variant, _
    Optional ByVal Period As Variant, _
    Optional ByVal value As Variant, Optional ByVal calc As Variant) As Variant
On Error GoTo Err_Hndlr


    BUDGET_BAL = NoRights
    If IsFunctionAvailable(co, "BUDGET_BAL") Then
        BUDGET_BAL = g_Func.BUDGET_BAL(Trim$(acc_nr), cu, cc, co, FY, Period, value, calc, strBudVers)
    End If


Exit Function
Err_Hndlr:
    BUDGET_BAL = NOVALUE
End Function

' FC 15.397.735 yong107021
' Add in closing_type to indicate include closing entries
' BR 15.919.584 yong107021
' cahneg cu and cc to optional fields
Public Function GL_BAL_DATE(ByVal acc_nr As String, Optional ByVal cu As String, Optional ByVal cc As String, _
    Optional ByVal co As Variant, Optional ByVal vWeekFrom As Variant, _
    Optional ByVal vWeekTo As Variant, Optional ByVal balance_type As Variant, _
    Optional ByVal value As Variant, Optional ByVal reportdate As Variant, _
    Optional ByVal closing_type As Variant = 1) As Variant
On Error GoTo Err_Hndlr


    GL_BAL_DATE = NoRights
    If IsFunctionAvailable(co, "GL_BAL_DATE") Then
        GL_BAL_DATE = g_Func.GL_BAL_DATE(Trim$(acc_nr), cu, cc, co, vWeekFrom, vWeekTo, balance_type, value, reportdate, closing_type)
    End If


Exit Function
Err_Hndlr:
    GL_BAL_DATE = NOVALUE
End Function

Public Function CC_MAIN_CLASS(ByVal main_class_cd As String, ByVal cc As String, _
    Optional ByVal co As Variant, Optional ByVal FY As Variant, _
    Optional ByVal Period As Variant, Optional ByVal balance_type As Variant, _
    Optional ByVal value As Variant, Optional ByVal calc As Variant, _
    Optional ByVal transdate As Variant, Optional ByVal reportdate As Variant) As Variant
On Error GoTo Err_Hndlr


    CC_MAIN_CLASS = NoRights
    If IsFunctionAvailable(co, "CC_MAIN_CLASS") Then
        CC_MAIN_CLASS = g_Func.CC_MAIN_CLASS(main_class_cd, cc, co, FY, Period, balance_type, value, calc, , transdate, reportdate)
    End If


Exit Function
Err_Hndlr:
    CC_MAIN_CLASS = NOVALUE
End Function

' BR 15.257.056 yong107021
' model was removed from slic, so swap place with reportdate=>reportdate,model
' FC 15.397.735 yong107021
' Add in closing_type to indicate include closing entries
' model was replace with closing_type
Public Function CC_MAIN_CLASS_DATE(ByVal main_class_cd As String, ByVal cc As String, _
    Optional ByVal co As Variant, Optional ByVal vWeekFrom As Variant, _
    Optional ByVal vWeekTo As Variant, Optional ByVal balance_type As Variant, _
    Optional ByVal value As Variant, _
    Optional ByVal reportdate As Variant, _
    Optional ByVal closing_type As Variant = 1) As Variant
On Error GoTo Err_Hndlr


    CC_MAIN_CLASS_DATE = NoRights
    If IsFunctionAvailable(co, "CC_MAIN_CLASS_DATE") Then
        CC_MAIN_CLASS_DATE = g_Func.CC_MAIN_CLASS_DATE(main_class_cd, cc, co, vWeekFrom, vWeekTo, balance_type, value, , reportdate, closing_type)
    End If


Exit Function
Err_Hndlr:
    CC_MAIN_CLASS_DATE = NOVALUE
End Function

Public Function CC_SUB_CLASS(ByVal sub_class_code As String, ByVal cc As String, _
    Optional ByVal co As Variant, Optional ByVal FY As Variant, _
    Optional ByVal Period As Variant, Optional ByVal balance_type As Variant, _
    Optional ByVal value As Variant, Optional ByVal calc As Variant, _
    Optional ByVal transdate As Variant, Optional ByVal reportdate As Variant) As Variant
On Error GoTo Err_Hndlr


    CC_SUB_CLASS = NoRights
    If IsFunctionAvailable(co, "CC_SUB_CLASS") Then
        CC_SUB_CLASS = g_Func.CC_SUB_CLASS(sub_class_code, cc, co, FY, Period, balance_type, value, calc, , transdate, reportdate)
    End If


Exit Function
Err_Hndlr:
    CC_SUB_CLASS = NOVALUE
End Function

' BR 15.257.056 yong107021
' model was removed from slic, so swap place with reportdate=>reportdate,model
' FC 15.397.735 yong107021
' Add in closing_type to indicate include closing entries
' model was replace with closing_type
Public Function CC_SUB_CLASS_DATE(ByVal sub_class_code As String, ByVal cc As String, _
    Optional ByVal co As Variant, Optional ByVal vWeekFrom As Variant, _
    Optional ByVal vWeekTo As Variant, Optional ByVal balance_type As Variant, _
    Optional ByVal value As Variant, _
    Optional ByVal reportdate As Variant, _
    Optional ByVal closing_type As Variant = 1) As Variant
On Error GoTo Err_Hndlr


    CC_SUB_CLASS_DATE = NoRights
    If IsFunctionAvailable(co, "CC_SUB_CLASS_DATE") Then
        
        CC_SUB_CLASS_DATE = g_Func.CC_SUB_CLASS_DATE(sub_class_code, cc, co, vWeekFrom, vWeekTo, balance_type, value, , reportdate, closing_type)
    End If


Exit Function
Err_Hndlr:
    CC_SUB_CLASS_DATE = NOVALUE
End Function

Public Function CU_BAL(ByVal acc_nr As String, ByVal cu As String, _
    Optional ByVal co As Variant, Optional ByVal FY As Variant, _
    Optional ByVal Period As Variant, Optional ByVal balance_type As Variant, _
    Optional ByVal value As Variant, Optional ByVal calc As Variant, Optional ByVal transdate As Variant, Optional ByVal reportdate As Variant) As Variant
On Error GoTo Err_Hndlr


    CU_BAL = NoRights
    If IsFunctionAvailable(co, "CU_BAL") Then
        CU_BAL = g_Func.CU_BAL(Trim$(acc_nr), cu, co, FY, Period, balance_type, value, calc, transdate, reportdate)
    End If


Exit Function
Err_Hndlr:
    CU_BAL = NOVALUE
End Function

Public Function CU_BAL_DATE(ByVal acc_nr As String, ByVal cu As String, _
    Optional ByVal co As Variant, Optional ByVal vWeekFrom As Variant, _
    Optional ByVal vWeekTo As Variant, Optional ByVal balance_type As Variant, _
    Optional ByVal value As Variant, Optional ByVal reportdate As Variant) As Variant
On Error GoTo Err_Hndlr


    CU_BAL_DATE = NoRights
    If IsFunctionAvailable(co, "CU_BAL_DATE") Then
        
        CU_BAL_DATE = g_Func.CU_BAL_DATE(Trim$(acc_nr), cu, co, vWeekFrom, vWeekTo, balance_type, value, reportdate)
    End If


Exit Function
Err_Hndlr:
    CU_BAL_DATE = NOVALUE
End Function

Public Function CU_MAIN_CLASS(ByVal main_class_cd As String, ByVal cu As String, _
    Optional ByVal co As Variant, Optional ByVal FY As Variant, _
    Optional ByVal Period As Variant, Optional ByVal balance_type As Variant, _
    Optional ByVal value As Variant, Optional ByVal calc As Variant, _
    Optional ByVal transdate As Variant, Optional ByVal reportdate As Variant) As Variant
On Error GoTo Err_Hndlr


    CU_MAIN_CLASS = NoRights
    If IsFunctionAvailable(co, "CU_MAIN_CLASS") Then
        CU_MAIN_CLASS = g_Func.CU_MAIN_CLASS(main_class_cd, cu, co, FY, Period, balance_type, value, calc, , transdate, reportdate)
    End If


Exit Function
Err_Hndlr:
    CU_MAIN_CLASS = NOVALUE
End Function

' BR 15.257.056 yong107021
' model was removed from slic, so swap place with reportdate=>reportdate,model
Public Function CU_MAIN_CLASS_DATE(ByVal main_class_cd As String, ByVal cu As String, _
    Optional ByVal co As Variant, Optional ByVal vWeekFrom As Variant, _
    Optional ByVal vWeekTo As Variant, Optional ByVal balance_type As Variant, _
    Optional ByVal value As Variant, _
    Optional ByVal reportdate As Variant, _
    Optional ByVal model As Variant) As Variant
On Error GoTo Err_Hndlr


    CU_MAIN_CLASS_DATE = NoRights
    If IsFunctionAvailable(co, "CU_MAIN_CLASS_DATE") Then
        CU_MAIN_CLASS_DATE = g_Func.CU_MAIN_CLASS_DATE(main_class_cd, cu, co, vWeekFrom, vWeekTo, balance_type, value, model, reportdate)
    End If


Exit Function
Err_Hndlr:
    CU_MAIN_CLASS_DATE = NOVALUE
End Function

Public Function CU_SUB_CLASS(ByVal sub_class_code As String, ByVal cu As String, _
    Optional ByVal co As Variant, Optional ByVal FY As Variant, _
    Optional ByVal Period As Variant, Optional ByVal balance_type As Variant, _
    Optional ByVal value As Variant, Optional ByVal calc As Variant, _
    Optional ByVal transdate As Variant, Optional ByVal reportdate As Variant) As Variant
On Error GoTo Err_Hndlr


    CU_SUB_CLASS = NoRights
    If IsFunctionAvailable(co, "CU_SUB_CLASS") Then
        CU_SUB_CLASS = g_Func.CU_SUB_CLASS(sub_class_code, cu, co, FY, Period, balance_type, value, calc, , transdate, reportdate)
    End If


Exit Function
Err_Hndlr:
    CU_SUB_CLASS = NOVALUE
End Function

' BR 15.257.056 yong107021
' model was removed from slic, so swap place with reportdate=>reportdate,model
Public Function CU_SUB_CLASS_DATE(ByVal sub_class_code As String, ByVal cu As String, _
    Optional ByVal co As Variant, Optional ByVal vWeekFrom As Variant, _
    Optional ByVal vWeekTo As Variant, Optional ByVal balance_type As Variant, _
    Optional ByVal value As Variant, _
    Optional ByVal reportdate As Variant, _
    Optional ByVal modal As Variant) As Variant
On Error GoTo Err_Hndlr


    CU_SUB_CLASS_DATE = NoRights
    If IsFunctionAvailable(co, "CU_SUB_CLASS_DATE") Then
        CU_SUB_CLASS_DATE = g_Func.CU_SUB_CLASS_DATE(sub_class_code, cu, co, vWeekFrom, vWeekTo, balance_type, value, modal, reportdate)
    End If


Exit Function
Err_Hndlr:
    CU_SUB_CLASS_DATE = NOVALUE
End Function


Public Function CRD_OUTSTAN_ALL(ByVal crd_nr As String, ByVal days As Integer, _
    Optional ByVal co As Variant, Optional ByVal curr_code As Variant, _
    Optional ByVal outstan_type As Variant, Optional ByVal check_on_curr As Variant, _
    Optional ByVal value As Variant) As Variant
On Error GoTo Err_Hndlr
    CRD_OUTSTAN_ALL = NoRights
    If IsFunctionAvailable(co, "CRD_OUTSTAN_ALL") Then
        CRD_OUTSTAN_ALL = g_Func.CRD_OUTSTAN_ALL(crd_nr, days, co, curr_code, outstan_type, check_on_curr, value)
    End If
  Exit Function
Err_Hndlr:
  CRD_OUTSTAN_ALL = NOVALUE
End Function

Public Function DEB_OUTSTAN_ALL(ByVal deb_nr As String, ByVal days As Integer, _
    Optional ByVal co As Variant, Optional ByVal curr_code As Variant, _
    Optional ByVal outstan_type As Variant, Optional ByVal check_on_curr As Variant, _
    Optional ByVal value As Variant) As Variant
On Error GoTo Err_Hndlr
    DEB_OUTSTAN_ALL = NoRights
    If IsFunctionAvailable(co, "DEB_OUTSTAN_ALL") Then
        DEB_OUTSTAN_ALL = g_Func.DEB_OUTSTAN_ALL(deb_nr, days, co, curr_code, outstan_type, check_on_curr, value)
    End If
  Exit Function
Err_Hndlr:
  DEB_OUTSTAN_ALL = NOVALUE
End Function

Public Function CRD_OUTSTANDING(ByVal crd_nr As String, ByVal entry_nr As String, _
    Optional ByVal co As Variant, Optional ByVal outstan_type As Variant, _
    Optional ByVal value As Variant) As Variant
    CRD_OUTSTANDING = NoRights
On Error GoTo Err_Hndlr
    If IsFunctionAvailable(co, "CRD_OUTSTANDING") Then
        CRD_OUTSTANDING = g_Func.CRD_OUTSTANDING(crd_nr, entry_nr, co, outstan_type, value)
    End If
  Exit Function
Err_Hndlr:
  CRD_OUTSTANDING = NOVALUE
End Function

Public Function DEB_OUTSTANDING(ByVal deb_nr As String, ByVal entry_nr As String, _
    Optional ByVal co As Variant, Optional ByVal outstan_type As Variant, _
    Optional ByVal value As Variant) As Variant
On Error GoTo Err_Hndlr
    DEB_OUTSTANDING = NoRights
    If IsFunctionAvailable(co, "DEB_OUTSTANDING") Then
        DEB_OUTSTANDING = g_Func.DEB_OUTSTANDING(deb_nr, entry_nr, co, outstan_type, value)
    End If
  Exit Function
Err_Hndlr:
  DEB_OUTSTANDING = NOVALUE
End Function

Public Function BUDGET_CC(Optional ByVal strBudVers As Variant, Optional ByVal co As Variant, _
    Optional ByVal shtFY As Variant, Optional ByVal shtPer As Variant, _
    Optional ByVal strClassCode As Variant, Optional ByVal strSubClassCode As Variant, _
    Optional ByVal strAccNr As Variant, Optional ByVal strCostCenter As Variant, _
    Optional ByVal strCurrCode As Variant, Optional ByVal shtValue As Variant, _
    Optional ByVal shtCalc As Variant, Optional ByVal transdate As Variant, Optional ByVal reportdate As Variant) As Variant
On Error GoTo Err_Hndlr


    BUDGET_CC = NoRights
    If IsFunctionAvailable(co, "BUDGET_CC") Then
        BUDGET_CC = g_Func.BUDGET_CC(strBudVers, co, shtFY, shtPer, strClassCode, strSubClassCode, strAccNr, strCostCenter, strCurrCode, shtValue, shtCalc, transdate, reportdate)
    End If
    
    
Exit Function
Err_Hndlr:
    BUDGET_CC = NOVALUE
End Function

Public Function BUDGET_CU(Optional ByVal strBudVers As Variant, Optional ByVal co As Variant, _
    Optional ByVal shtFY As Variant, Optional ByVal shtPer As Variant, _
    Optional ByVal strClassCode As Variant, Optional ByVal strSubClassCode As Variant, _
    Optional ByVal strAccNr As Variant, Optional ByVal strCostUnit As Variant, _
    Optional ByVal strCurrCode As Variant, Optional ByVal shtValue As Variant, _
    Optional ByVal shtCalc As Variant, Optional ByVal transdate As Variant, Optional ByVal reportdate As Variant) As Variant
On Error GoTo Err_Hndlr


    BUDGET_CU = NoRights
    If IsFunctionAvailable(co, "BUDGET_CU") Then
        BUDGET_CU = g_Func.BUDGET_CU(strBudVers, co, shtFY, shtPer, strClassCode, strSubClassCode, strAccNr, strCostUnit, strCurrCode, shtValue, shtCalc, transdate, reportdate)
    End If


Exit Function
Err_Hndlr:
    BUDGET_CU = NOVALUE
End Function


'--=[ Logistics ]=--

Public Function ITEM_DELIVERY(ByVal item_code As String, Optional ByVal crd_nr As String, Optional ByVal co As Variant) As Variant
On Error GoTo Err_Hndlr
    ITEM_DELIVERY = NoRights
    If IsFunctionAvailable(co, "ITEM_DELIVERY") Then
        ITEM_DELIVERY = g_Func.ITEM_DELIVERY(item_code, crd_nr, co)
    End If
  Exit Function
Err_Hndlr:
  ITEM_DELIVERY = NOVALUE
End Function

Public Function STOCK_INFO(ByVal item_code As String, Optional ByVal co As Variant, _
    Optional ByVal wrh_code As Variant, Optional ByVal wrh_loc As Variant, Optional ByVal stock_type As Variant) As Variant
On Error GoTo Err_Hndlr
    STOCK_INFO = NoRights
    If IsFunctionAvailable(co, "STOCK_INFO") Then
        STOCK_INFO = g_Func.STOCK_INFO(item_code, co, wrh_code, wrh_loc, stock_type)
    End If
  Exit Function
Err_Hndlr:
  STOCK_INFO = NOVALUE
End Function

Public Function REV_DEBTOR_FY(ByVal deb_nr As String, ByVal rep As String, _
    Optional ByVal co As Variant, Optional ByVal FY As Variant, _
    Optional ByVal Period As Variant, Optional ByVal rev_type As Variant, _
    Optional ByVal calc As Variant) As Variant
On Error GoTo Err_Hndlr


    REV_DEBTOR_FY = NoRights
    If IsFunctionAvailable(co, "REV_DEBTOR_FY") Then
        REV_DEBTOR_FY = g_Func.REV_DEBTOR_FY(deb_nr, rep, co, FY, Period, rev_type, calc)
    End If


Exit Function
Err_Hndlr:
    REV_DEBTOR_FY = NOVALUE
End Function

Public Function REV_DEBTOR(ByVal deb_nr As String, ByVal rep As String, _
    Optional ByVal co As Variant, Optional ByVal Period As Variant, _
    Optional ByVal rev_type As Variant, Optional ByVal calc As Variant) As Variant
On Error GoTo Err_Hndlr
    REV_DEBTOR = NoRights
    If IsFunctionAvailable(co, "REV_DEBTOR") Then
        REV_DEBTOR = g_Func.REV_DEBTOR(deb_nr, rep, co, Period, rev_type, calc)
    End If
  Exit Function
Err_Hndlr:
  REV_DEBTOR = NOVALUE
End Function

Public Function REV_GROUP_FY(ByVal item_group_cd As String, ByVal rep As String, _
    ByVal deb_nr As String, Optional ByVal co As Variant, _
    Optional ByVal FY As Variant, Optional ByVal Period As Variant, _
    Optional ByVal rev_type As Variant, Optional ByVal calc As Variant) As Variant
On Error GoTo Err_Hndlr


    REV_GROUP_FY = NoRights
    If IsFunctionAvailable(co, "REV_GROUP_FY") Then
        REV_GROUP_FY = g_Func.REV_GROUP_FY(item_group_cd, rep, deb_nr, co, FY, Period, rev_type, calc)
    End If


Exit Function
Err_Hndlr:
    REV_GROUP_FY = NOVALUE
End Function

Public Function REV_GROUP(ByVal item_group_cd As String, ByVal rep As String, _
    ByVal deb_nr As String, Optional ByVal co As Variant, _
    Optional ByVal Period As Variant, Optional ByVal rev_type As Variant, _
    Optional ByVal calc As Variant) As Variant
On Error GoTo Err_Hndlr
    REV_GROUP = NoRights
    If IsFunctionAvailable(co, "REV_GROUP") Then
        REV_GROUP = g_Func.REV_GROUP(item_group_cd, rep, deb_nr, co, Period, rev_type, calc)
    End If
  Exit Function
Err_Hndlr:
  REV_GROUP = NOVALUE
End Function

Public Function REV_ITEM_FY(ByVal item_code As String, ByVal deb_nr As String, _
    Optional ByVal co As Variant, Optional ByVal FY As Variant, _
    Optional ByVal Period As Variant, Optional ByVal rev_type As Variant, _
    Optional ByVal calc As Variant) As Variant
On Error GoTo Err_Hndlr


    REV_ITEM_FY = NoRights
    If IsFunctionAvailable(co, "REV_ITEM_FY") Then
        REV_ITEM_FY = g_Func.REV_ITEM_FY(item_code, deb_nr, co, FY, Period, rev_type, calc)
    End If


Exit Function
Err_Hndlr:
    REV_ITEM_FY = NOVALUE
End Function

Public Function REV_ITEM(ByVal item_code As String, ByVal deb_nr As String, _
    Optional ByVal co As Variant, Optional ByVal Period As Variant, _
    Optional ByVal rev_type As Variant, Optional ByVal calc As Variant) As Variant
On Error GoTo Err_Hndlr
    REV_ITEM = NoRights
    If IsFunctionAvailable(co, "REV_ITEM") Then
        REV_ITEM = g_Func.REV_ITEM(item_code, deb_nr, co, Period, rev_type, calc)
    End If
  Exit Function
Err_Hndlr:
  REV_ITEM = NOVALUE
End Function

Public Function QTY_DISC_MAINT(ByVal price_list As String, ByVal price_list_type As Integer, _
    ByVal code As String, ByVal qty_disc_type As Integer, ByVal price As Double, _
    ByVal qty1 As Double, ByVal value1 As Double, Optional ByVal co As Variant, _
    Optional ByVal qty2 As Variant, Optional ByVal value2 As Variant, _
    Optional ByVal qty3 As Variant, Optional ByVal value3 As Variant, _
    Optional ByVal qty4 As Variant, Optional ByVal value4 As Variant, _
    Optional ByVal qty5 As Variant, Optional ByVal value5 As Variant) As String
On Error GoTo Err_Hndlr
    QTY_DISC_MAINT = NoRights
    If IsFunctionAvailable(co, "QTY_DISC_MAINT") Then
        QTY_DISC_MAINT = g_Func.QTY_DISC_MAINT(price_list, price_list_type, code, qty_disc_type, price, qty1, value1, co, qty2, value2, qty3, value3, qty4, value4, qty5, value5)
    End If
  Exit Function
Err_Hndlr:
  QTY_DISC_MAINT = NOVALUE
End Function

'//PROJECT//

Public Function HR_DATA(ByVal vhumres As String, Optional ByVal co As Variant, _
    Optional ByVal field As Variant) As Variant
    HR_DATA = NoRights
On Error GoTo Err_Hndlr
    If IsFunctionAvailable(co, "HR_DATA") Then
        HR_DATA = g_Func.HR_DATA(vhumres, co, field)
    End If
  Exit Function
Err_Hndlr:
  HR_DATA = NOVALUE
End Function

Public Function PROJ_DATA(ByVal vProjectCode As String, Optional ByVal co As Variant, _
    Optional ByVal field As Variant) As Variant
    PROJ_DATA = NoRights
On Error GoTo Err_Hndlr
    If IsFunctionAvailable(co, "PROJ_DATA") Then
        PROJ_DATA = g_Func.PROJ_DATA(vProjectCode, co, field)
    End If
  Exit Function
Err_Hndlr:
  PROJ_DATA = NOVALUE
End Function

Public Function PROJ_FIN_DATA(ByVal vProjectCode As String, Optional ByVal vResourceID As String, _
    Optional ByVal vItemGroup As Variant, _
    Optional ByVal vItem As Variant, _
    Optional ByVal vFacode As Variant, _
    Optional ByVal vAccount As Variant, _
    Optional ByVal vProjectType As Variant, _
    Optional ByVal vProjectSubType As Variant, _
    Optional ByVal vProjectValue As Variant, _
    Optional ByVal vSenario As Variant, _
    Optional ByVal vStatus As Variant, _
    Optional ByVal vFromDate As Variant, _
    Optional ByVal vToDate As Variant, _
    Optional ByVal co As Variant) As Variant
On Error GoTo Err_Hndlr
    
    
    PROJ_FIN_DATA = NoRights

    If IsFunctionAvailable(co, "PROJ_FIN_DATA") Then
        '[adam21726 24-09-2002 12:14] invert 'After entry' value(04.542.833)
        vStatus = (Not vStatus)
    
        PROJ_FIN_DATA = g_Func.PROJ_FIN_DATA(vProjectCode, _
        vResourceID, _
        vItemGroup, _
        vItem, _
        vFacode, _
        vAccount, _
        vProjectType, _
        vProjectSubType, _
        vProjectValue, _
        vSenario, vStatus, vFromDate, vToDate, co)
    End If


Exit Function
Err_Hndlr:
    PROJ_FIN_DATA = NOVALUE
End Function

Public Function PROJ_TOTAL_EMP(ByVal vProjectCode As String, _
    Optional ByVal vResID As Variant, _
    Optional ByVal vWeekFrom As Variant, _
    Optional ByVal vWeekTo As Variant, _
    Optional ByVal vActivity As Variant, _
    Optional ByVal vShow As Variant, _
    Optional ByVal vValue As Variant, _
    Optional ByVal co As Variant) As Variant
    PROJ_TOTAL_EMP = NoRights
On Error GoTo Err_Hndlr
    If IsFunctionAvailable(co, "PROJ_TOTAL_EMP") Then
        PROJ_TOTAL_EMP = g_Func.PROJ_TOTAL_EMP(vProjectCode, vResID, vWeekFrom, _
        vWeekTo, vActivity, vShow, vValue, co)
    End If
  Exit Function
Err_Hndlr:
  PROJ_TOTAL_EMP = NOVALUE
End Function

Public Function PROJ_TOTAL_MACH(ByVal vProjectCode As String, _
    Optional ByVal vMachID As Variant, _
    Optional ByVal vWeekFrom As Variant, _
    Optional ByVal vWeekTo As Variant, _
    Optional ByVal vYear As Variant, _
    Optional ByVal vUsage As Variant, _
    Optional ByVal vShow As Variant, _
    Optional ByVal co As Variant) As Variant
    PROJ_TOTAL_MACH = NoRights
On Error GoTo Err_Hndlr
    If IsFunctionAvailable(co, "PROJ_TOTAL_MACH") Then
        PROJ_TOTAL_MACH = g_Func.PROJ_TOTAL_MACH(vProjectCode, vMachID, vWeekFrom, _
        vWeekTo, vYear, vUsage, vShow, co)
    End If
  Exit Function
Err_Hndlr:
  PROJ_TOTAL_MACH = NOVALUE
End Function

Public Function PROJ_LEDGER(ByVal vProjectCode As String, _
    Optional ByVal vLedger As Variant, _
    Optional ByVal vSenario As Variant, _
    Optional ByVal vDateFrom As Variant, _
    Optional ByVal vDateTo As Variant, _
    Optional ByVal vShow As Variant, _
    Optional ByVal co As Variant) As Variant
    PROJ_LEDGER = NoRights
On Error GoTo Err_Hndlr
    If IsFunctionAvailable(co, "PROJ_LEDGER") Then
        PROJ_LEDGER = g_Func.PROJ_LEDGER(vProjectCode, vLedger, vSenario, vDateFrom, vDateTo, vShow, co)
    End If
  Exit Function
Err_Hndlr:
  PROJ_LEDGER = NOVALUE
End Function

Private Function IsFunctionAvailable(ByRef ConnID As Variant, ByVal sFName As String) As Boolean
    Dim sCompany As String
    Dim vs As esl.ValueSet
    
    Set vs = New esl.ValueSet
    If g_Ses.AvailableFunctions Is Nothing Then
        Set g_Ses.AvailableFunctions = New esl.ValueSet
    Else
        Set vs = g_Ses.AvailableFunctions
    End If
  
    If p_bRunningUpdate Then
        IsFunctionAvailable = False
    Else
        If IsMissing(ConnID) Or IsNull(ConnID) Then
            sCompany = g_Ses.DefaultID
            ConnID = g_Ses.DefaultID
        Else
            sCompany = ConnID
        End If
        
        If vs.Find(sFName, "") Then
            IsFunctionAvailable = vs.value(sFName)
        Else
            IsFunctionAvailable = True
            If Not IsEnabled(sCompany, GetExactFunctionRow("=" & sFName & "()")) Then
                IsFunctionAvailable = False
            End If
            'Cache the result in a value set
            vs.Add sFName, IsFunctionAvailable
            Set g_Ses.AvailableFunctions = vs
        End If
    End If
    
End Function

' get IdentID from AccountClasses
Private Function GetIdentID(ByVal ClassId, ByVal AccountClassCode) As Long
    Dim conn As EDL.EdlConnection
    Dim vResult As Variant
    
    Set conn = g_Ses.Company(g_Ses.DefaultID)
    vResult = conn.Query("SELECT IdentID FROM AccountClasses WHERE ClassID=? AND AccountClassCode =?", Array(ClassId, AccountClassCode), edlNoNulls)
    If Not IsEmpty(vResult) Then
        GetIdentID = vResult
    End If
End Function
' BR 18.267.879 foon36643
' Add in closing_entries to indicate include closing entries
Public Function CAT_BAL(ByVal class_level As String, _
                        ByVal class_code As String, _
                        Optional ByVal co As Variant, _
                        Optional ByVal FY As Variant, _
                        Optional ByVal Period As Variant, _
                        Optional ByVal balance_type As Variant, _
                        Optional ByVal value As Variant, _
                        Optional ByVal calc As Variant, _
                        Optional ByVal cc_cat1 As Variant, _
                        Optional ByVal cc_cat2 As Variant, _
                        Optional ByVal cc_cat3 As Variant, _
                        Optional ByVal cc_cat4 As Variant, _
                        Optional ByVal cc As Variant, _
                        Optional ByVal cu As Variant, _
                        Optional ByVal trans_type As Variant, _
                        Optional ByVal bud_vers As Variant, _
                        Optional ByVal wrh_code As Variant, _
                        Optional ByVal transdate As Variant, _
                        Optional ByVal reportdate As Variant, _
                        Optional ByVal closing_type As Variant = 1) As Variant
On Error GoTo ErrorHandler
CAT_BAL = NoRights
 
    If IsFunctionAvailable(co, "CAT_BAL") Then
        CAT_BAL = g_Func.CAT_BAL(class_level, class_code, co, FY, Period, balance_type, value, calc, cc_cat1, cc_cat2, cc_cat3, cc_cat4, cc, cu, trans_type, bud_vers, wrh_code, transdate, reportdate, closing_type)
    End If


Exit Function
ErrorHandler:
    CAT_BAL = NOVALUE
End Function

Public Function CAT_DATA(ByVal class_level As String, _
                         ByVal class_code As String, _
                         Optional ByVal co As Variant, _
                         Optional ByVal field As Variant) As Variant
On Error GoTo ErrorHandler
CAT_DATA = NoRights

    If IsFunctionAvailable(co, "CAT_DATA") Then
        'note: the key format must be as follows:
        Dim sKey As String
        'BR 13.974.587 should be length 4, not 8
        sKey = Format$(class_level, String$(4, "0")) & Format$(class_code, "!" & String$(30, "@"))
        
        CAT_DATA = g_Func.CAT_DATA(sKey, co, field)
    End If
    
    
Exit Function
ErrorHandler:
    CAT_DATA = NOVALUE
End Function


Attribute VB_Name = "shtFunc"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Option Explicit
Attribute VB_Name = "shtSearch"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "slcDummy"
Option Explicit

' Start generated section
' Script D:\Voyager\eg2000.xla\0_Slic\SlcDummy.bas generated by EditSlic version 1.0 on Thu May 17 13:46:57 2001

Function GetSlcDummySlic() As String
        Dim s As String
        s = _
"form(2) {" & _
"      component(""Fip0"", Fip) {" & _
"       Enabled = 0" & _
"      }" & _
"      component(""Fip1"", Fip) {" & _
"      }" & _
"      component(""Fip2"", Fip) {" & _
"      }" & _
"      component(""Fip3"", Fip) {" & _
"      }" & _
"      component(""Fip4"", Fip) {" & _
"      }" & _
"      component(""Fip5"", Fip) {" & _
"      }" & _
"      component(""Fip6"", Fip) {" & _
"      }" & _
"      component(""Fip7"", Fip) {" & _
"      }" & _
"      component(""Fip8"", Fip) {" & _
"      }" & _
"      component(""Fip9"", Fip) {" & _
"      }"
        s = s & _
"      component(""Fip10"", Fip) {" & _
"      }" & _
"      component(""Fip11"", Fip) {" & _
"      }" & _
"      component(""Fip12"", Fip) {" & _
"      }" & _
"      component(""Fip13"", Fip) {" & _
"      }" & _
"      component(""Fip14"", Fip) {" & _
"      }" & _
"      component(""Fip15"", Fip) {" & _
"      }" & _
"      component(""Fip16"", Fip) {" & _
"      }" & _
"      component(""Fip17"", Fip) {" & _
"      }" & _
"      component(""Fip18"", Fip) {" & _
"      }" & _
"      component(""Fip19"", Fip) {" & _
"      }"
        s = s & _
"      component(""Fip20"", Fip) {" & _
"      }" & _
"      component(""Fip21"", Fip) {" & _
"      }" & _
"}"
        GetSlcDummySlic = s
End Function
' End generated section


Attribute VB_Name = "slcEmbedded"
Option Explicit

' Start generated section
' Script D:\EmbeddedSlic.bas generated by EditSlic version 1.0 on Tue Mar 20 12:28:31 2001

Function GetEmbeddedSlic() As String
    Dim s As String
    
    s = _
"form(2) {" & _
"      component(""slcHead"", Slic) {" & _
"       SlicAlignment = 1" & _
"      }" & _
"      component(""slcMain"", Slic) {" & _
"       SlicAlignment = 1" & _
"       SlicMinHeight = 30" & _
"      }" & _
"      button(""cmdOK"") {" & _
"       ActionType = 512" & _
"       Caption = ""&OK""" & _
"       CaptionTermID = 921" & _
"       IsDefault = 1" & _
"       MenuParam = 0" & _
"      }" & _
"      button(""cmdCancel"") {" & _
"       ActionType = 1" & _
"       Caption = ""&Cancel""" & _
"       CaptionTermID = 904" & _
"      }" & _
"}"

    GetEmbeddedSlic = s
End Function
' End generated section
Attribute VB_Name = "slcFuncData"
Option Explicit
Option Private Module

' Start generated section
' Script C:\FuncData.bas generated by EditSlic version 1.0 on Mon Jan 29 13:48:55 2001

Function GetFuncDataSlic() As String
        Dim s As String

            s = _
"form(2) {" & _
"      group(""Group0"") {" & _
"       SlicStyle = 2" & _
"         component(""Fip1"", Fip) {" & _
"           CaptionAlignment = 1" & _
"           DimLength = 50" & _
"           Indications = 5" & _
"           SlicParameters = ""A""" & _
"         }" & _
"         component(""Fip2"", Fip) {" & _
"           CaptionAlignment = 1" & _
"           DimLength = 50" & _
"           Indications = 5" & _
"           SlicParameters = ""B""" & _
"         }" & _
"         component(""Fip3"", Fip) {" & _
"           CaptionAlignment = 1" & _
"           DimLength = 50" & _
"           Indications = 5" & _
"           SlicParameters = ""C""" & _
"         }" & _
"         component(""Fip4"", Fip) {"
    s = s & _
"           CaptionAlignment = 1" & _
"           DimLength = 50" & _
"           Indications = 5" & _
"           SlicParameters = ""D""" & _
"         }" & _
"         component(""Fip5"", Fip) {" & _
"           CaptionAlignment = 1" & _
"           DimLength = 50" & _
"           Indications = 5" & _
"           SlicParameters = ""E""" & _
"         }" & _
"         component(""Fip6"", Fip) {" & _
"           CaptionAlignment = 1" & _
"           DimLength = 50" & _
"           Indications = 5" & _
"           SlicParameters = ""F""" & _
"         }" & _
"         component(""Fip7"", Fip) {" & _
"           CaptionAlignment = 1" & _
"           DimLength = 50" & _
"           Indications = 5" & _
"           SlicParameters = ""G"""
    s = s & _
"         }" & _
"         component(""Fip8"", Fip) {" & _
"           CaptionAlignment = 1" & _
"           DimLength = 50" & _
"           Indications = 5" & _
"           SlicParameters = ""H""" & _
"         }" & _
"         component(""Fip9"", Fip) {" & _
"           CaptionAlignment = 1" & _
"           DimLength = 50" & _
"           Indications = 5" & _
"           SlicParameters = ""I""" & _
"         }" & _
"         component(""Fip10"", Fip) {" & _
"           CaptionAlignment = 1" & _
"           DimLength = 50" & _
"           Indications = 5" & _
"           SlicParameters = ""J""" & _
"         }" & _
"         component(""Fip11"", Fip) {" & _
"           CaptionAlignment = 1" & _
"           DimLength = 50"
    s = s & _
"           Indications = 5" & _
"           SlicParameters = ""K""" & _
"         }" & _
"         component(""Fip12"", Fip) {" & _
"           CaptionAlignment = 1" & _
"           DimLength = 50" & _
"           Indications = 5" & _
"           SlicParameters = ""L""" & _
"         }" & _
"         component(""Fip13"", Fip) {" & _
"           CaptionAlignment = 1" & _
"           DimLength = 50" & _
"           Indications = 5" & _
"           SlicParameters = ""M""" & _
"         }" & _
"         component(""Fip14"", Fip) {" & _
"           CaptionAlignment = 1" & _
"           DimLength = 50" & _
"           Indications = 5" & _
"           SlicParameters = ""N""" & _
"         }" & _
"         component(""Fip15"", Fip) {"
    s = s & _
"           CaptionAlignment = 1" & _
"           DimLength = 50" & _
"           Indications = 5" & _
"           SlicParameters = ""O""" & _
"         }" & _
"         component(""Fip16"", Fip) {" & _
"           CaptionAlignment = 1" & _
"           DimLength = 50" & _
"           Indications = 5" & _
"           SlicParameters = ""P""" & _
"         }" & _
"         component(""Fip17"", Fip) {"
    s = s & _
"           CaptionAlignment = 1" & _
"           DimLength = 50" & _
"           Indications = 5" & _
"           SlicParameters = ""Q""" & _
"         }" & _
"         component(""Fip18"", Fip) {" & _
"           CaptionAlignment = 1" & _
"           DimLength = 50" & _
"           Indications = 5" & _
"           SlicParameters = ""R"""
    s = s & _
"         }" & _
"         component(""Fip19"", Fip) {" & _
"           CaptionAlignment = 1" & _
"           DimLength = 50" & _
"           Indications = 5" & _
"           SlicParameters = ""S""" & _
"         }" & _
"      }" & _
"}"
        GetFuncDataSlic = s
End Function
' End generated section
Attribute VB_Name = "slcFuncHead"
Option Private Module
Option Explicit

' Start generated section
' Script C:\FuncHead.bas generated by EditSlic version 1.0 on Thu Jan 25 15:09:57 2001

Function GetFuncHeadSlic() As String
        Dim s As String

        s = _
"form(2) {" & _
"       SlicColumns = 2" & _
"       SlicRootStyle = 3" & _
"      component(""Company"", Fip) {" & _
"       DimType = 12" & _
"       Caption = ""Company""" & _
"       CaptionAlignment = 1" & _
"       CaptionTermID = 5642" & _
"       DimModifiers = 536870912" & _
"       Indications = 5" & _
"      }" & _
"      component(""New"", FlatButton) {" & _
"       Caption = ""New company""" & _
"       CaptionTermID = 25740" & _
"       Ellipsis = 1" & _
"       Style = 1" & _
"      }" & _
"      component(""Function"", Fip) {" & _
"       DimType = 12" & _
"       Caption = ""Function""" & _
"       CaptionAlignment = 1" & _
"       CaptionTermID = 6344"
        s = s & _
"       DimModifiers = 536870912" & _
"       Indications = 5" & _
"      }" & _
"}"
        GetFuncHeadSlic = s
End Function
' End generated section
Attribute VB_Name = "slcInformation"
Option Explicit
Option Private Module

' Start generated section
' Script C:\Documents and Settings\span5759\Desktop\mc.bas generated by EditSlic version 1.0 on Wed Aug 21 12:44:37 2002

Function GetInformationSlic() As String
    Dim s As String

    s = _
"form(2) {" & _
"       SlicRootStyle = 2" & _
"      component(""Mutex0"", Mutex) {" & _
"       Hidden = 1" & _
"       MutexGroup = ""MutexGroup""" & _
"       MutexType = 3" & _
"      }" & _
"      group(""Group1"") {" & _
"       SlicAlignment = 1" & _
"       SlicColumns = 4" & _
"       SlicStyle = 3" & _
"         component(""New"", FlatButton) {" & _
"           Caption = ""New company""" & _
"           CaptionTermID = 25740" & _
"           Ellipsis = 1" & _
"           Style = 1" & _
"         }" & _
"         mutexgroup(""MutexGroup"") {" & _
"            component(""Open"", FlatButton) {" & _
"               Caption = ""Open company""" & _
"               CaptionTermID = 1019" & _
"               Ellipsis = 1"
    s = s & _
"               Enabled = 0" & _
"               Style = 1" & _
"            }" & _
"            component(""Close"", FlatButton) {" & _
"               Caption = ""Close company""" & _
"               CaptionTermID = 29417" & _
"               Enabled = 0" & _
"               Style = 1" & _
"            }" & _
"         }" & _
"         component(""SetDefault"", FlatButton) {" & _
"           Caption = ""Set as default""" & _
"           CaptionTermID = 32601" & _
"           Enabled = 0" & _
"           Style = 1" & _
"         }" & _
"         component(""OpenAll"", FlatButton) {" & _
"           Caption = ""Open All""" & _
"           CaptionTermID = 6119" & _
"           Style = 1" & _
"         }" & _
"      }" & _
"      group(""Group2"") {"
    s = s & _
"       SlicColumns = 2" & _
"       SlicStyle = 2" & _
"         group(""Group2.1"") {" & _
"            component(""DefFY"", Fip) {" & _
"               DimType = 3" & _
"               Caption = ""Default financial year""" & _
"               CaptionAlignment = 1" & _
"               CaptionTermID = 8991" & _
"               DimLength = 4" & _
"               Indications = 5" & _
"               StyleFlags = 5" & _
"            }" & _
"            component(""MinFY"", Fip) {" & _
"               DimType = 3" & _
"               Caption = ""Lowest financial year""" & _
"               CaptionAlignment = 1" & _
"               CaptionTermID = 12265" & _
"               DimLength = 4" & _
"               Indications = 5" & _
"               StyleFlags = 5" & _
"            }" & _
"            component(""MaxFY"", Fip) {"
    s = s & _
"               DimType = 3" & _
"               Caption = ""Highest financial year""" & _
"               CaptionAlignment = 1" & _
"               CaptionTermID = 12264" & _
"               DimLength = 4" & _
"               Indications = 5" & _
"               StyleFlags = 5" & _
"            }" & _
"            component(""MaxPer"", Fip) {" & _
"               DimType = 3" & _
"               Caption = ""Highest financial period""" & _
"               CaptionAlignment = 1" & _
"               CaptionTermID = 30246" & _
"               DimLength = 3" & _
"               Indications = 5" & _
"               StyleFlags = 5" & _
"            }" & _
"         }" & _
"         group(""Group2.2"") {" & _
"            component(""DefCurr"", Fip) {" & _
"               Caption = ""Default currency""" & _
"               CaptionAlignment = 1"
    s = s & _
"               CaptionTermID = 4806" & _
"               DimLength = 3" & _
"               Indications = 5" & _
"               StyleFlags = 5" & _
"            }" & _
"         }" & _
"      }" & _
"      button(""cmdClose"") {" & _
"       ActionType = 512" & _
"       Caption = ""&Close""" & _
"       CaptionTermID = 902" & _
"       IsDefault = 1" & _
"       MenuParam = 0" & _
"      }"
    s = s & _
"}"
'BR 14.662.072
'"            component(""SecCurr"", Fip) {" & _
'"               Caption = ""Secondary currency""" & _
'"               CaptionAlignment = 1" & _
'"               CaptionTermID = 24582" & _
'"               DimLength = 3" & _
'"               Indications = 5" & _
'"               StyleFlags = 5" & _
'"            }" &_

    GetInformationSlic = s
End Function
' End generated section

Attribute VB_Name = "slcSearch"
Option Private Module
Option Explicit

' Start generated section
' Script C:\Search.bas generated by EditSlic version 1.0 on Wed Jan 24 17:49:06 2001

Function GetSearchSlic() As String
        Dim s As String

        s = _
"form(2) {" & _
"       SlicColumns = 2" & _
"      component(""Company"", Fip) {" & _
"       DimType = 12" & _
"       Caption = ""Company""" & _
"       CaptionAlignment = 1" & _
"       CaptionTermID = 5642" & _
"       DimModifiers = 536870912" & _
"       Indications = 5" & _
"      }" & _
"      component(""New"", FlatButton) {" & _
"       Caption = ""New company""" & _
"       CaptionTermID = 25740" & _
"       Ellipsis = 1" & _
"       Style = 1" & _
"      }" & _
"      component(""Search"", Fip) {" & _
"       DimType = 12" & _
"       Caption = ""Search""" & _
"       CaptionAlignment = 1" & _
"       CaptionTermID = 8788"
        s = s & _
"       Indications = 5" & _
"       TestValues = {" & _
"               ""grtbk"" = ""General ledger accounts"", 8609, """", """"" & _
"               ""accountclasses"" = ""Categories"", 58, """", """"" & _
"               ""humres"" = ""Human resources"", 23736, """", """"" & _
"               ""credit"" = ""Creditors"", 18696, """", """"" & _
"               ""debitr"" = ""Debtors"", 18694, """", """"" & _
"               ""artbst"" = ""Items"", 9889, """", """"" & _
"               ""artgrp"" = ""Item groups"", 2562, """", """""
        s = s & _
"               ""kstpl"" = ""Cost centers"", 3384, """", """"" & _
"               ""kstdr"" = ""Cost units"", 3383, """", """"" & _
"               ""land"" = ""Countries"", 8495, """", """"" & _
"               ""valuta"" = ""Currencies"", 9073, """", """"" & _
"               ""prproject"" = ""Projects"", 8671, """", """"" & _
"       }" & _
"      }" & _
"      button(""cmdOK"") {" & _
"       ActionType = 512" & _
"       Caption = ""&OK""" & _
"       CaptionTermID = 921" & _
"       IsDefault = 1" & _
"       MenuParam = 0" & _
"      }" & _
"      button(""cmdCancel"") {" & _
"       ActionType = 1" & _
"       Caption = ""&Cancel""" & _
"       CaptionTermID = 904" & _
"      }" & _
"}"
        GetSearchSlic = s
End Function
' End generated section
Attribute VB_Name = "slcWizHead"
Option Private Module
Option Explicit

' Start generated section
' Script C:\WizHead.bas generated by EditSlic version 1.0 on Wed Jan 24 18:13:47 2001

Function GetWizHeadSlic() As String
        Dim s As String

        s = _
"form(2) {" & _
"       SlicColumns = 2" & _
"       SlicRootStyle = 3" & _
"      component(""Company"", Fip) {" & _
"       DimType = 12" & _
"       Caption = ""Company""" & _
"       CaptionAlignment = 1" & _
"       CaptionTermID = 5642" & _
"       DimModifiers = 536870912" & _
"       Indications = 5" & _
"      }" & _
"      component(""New"", FlatButton) {" & _
"       Caption = ""New company""" & _
"       CaptionTermID = 25740" & _
"       Ellipsis = 1" & _
"       Style = 1" & _
"      }" & _
"      component(""Wizard"", Fip) {" & _
"       DimType = 12" & _
"       Caption = ""Generate""" & _
"       CaptionAlignment = 1" & _
"       CaptionTermID = 8612"
        s = s & _
"       Indications = 5" & _
"      }" & _
"}"
        GetWizHeadSlic = s
End Function
' End generated section

' InQuest injected base64 decoded content
' :t^~
' :t^~
' :t^~
' *'Z,
' x)br

INQUEST-PP=macro
