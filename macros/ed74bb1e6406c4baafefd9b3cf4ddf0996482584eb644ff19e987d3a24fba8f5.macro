Attribute VB_Name = "ClassAppEvents"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public WithEvents app As Application

Private Sub app_DocumentChange()
    On Error Resume Next
    
    CloseBln
    
    OpenBln
    Set objDocBln = ActiveDocument
FatalError:
    Err.Clear
End Sub

Private Sub CloseBln()
Dim strVal As String
    On Error GoTo FatalErrorClose
    strVal = ""
    
    'if old doc's bln was being displayed, then close it
    strVal = objDocBln.Variables(strPOST_WIZ_BLN).Value
    If strVal = "1" Then
        If fPostWizBlnOpen Then
            objPostWizBln.Close
            fPostWizBlnOpen = False
        End If
    End If
FatalErrorClose:
    Err.Clear
End Sub

Private Sub OpenBln()
Dim strVal As String

    On Error GoTo FatalErrorOpen
    strVal = ""
    strVal = ActiveDocument.Variables(strPOST_WIZ_BLN).Value

    'check to see if bln should be displayed for new doc.
    If (strVal = "1") Then
        objPostWizBln.Show
        fPostWizBlnOpen = True
    End If
    
FatalErrorOpen:
    Err.Clear
End Sub
Attribute VB_Name = "Common"
' --------------------------------------------------------------------------------------
' WORD 97 WIZARD
' Common VBA Module
' --------------------------------------------------------------------------------------

Option Explicit

' --------------------------------------------------------------------------------------
' CONSTANT DECLARATIONS

' Note use of trailing spaces and punctuation...

' Banter strings
Public Const strSTARTING        As String = "Der "
Public Const strSTARTING2       As String = " wird geladen..."
Public Const strAPPLYING        As String = "Formatvorlagen werden kopiert..."
Public Const strCREATING_DOC    As String = "Dokument wird erstellt..."
Public Const strSAVE_SETTINGS   As String = "Einstellungen werden gespeichert..."
Public Const strRST_SETTINGS    As String = "Einstellungen werden wiederhergestellt..."
Public Const strUPDATING_STYLE  As String = "Formatvorlagen werden kopiert..."

' Error messages
Public Const strERR_BAD_DOC         As String = "Der Assistent kann nicht im aktiven Dokument verwendet werden. Um den Assistenten zu verwenden, w|fffd|hlen Sie ""Neu"" im Men|fffd| ""Datei"" und w|fffd|hlen Sie den "
Public Const strERR_BAD_DOC2        As String = " aus."
Public Const strERR_INTERNAL        As String = "Der Assistent kann nicht fortfahren, da ein Fehler aufgetreten ist."
Public Const strERR_WIZ_NOT_FOUND   As String = "Der Assistent konnte nicht im Benutzer-Vorlagen-Pfad gefunden werden."
Public Const strERR_STYLE_NOT_FOUND As String = "Der Assistent konnte die ben|fffd|tigte Datei "
Public Const strERR_STYLE_NOT_FOUND2 As String = " nicht finden. Diese Datei wird ben|fffd|tigt, um das Dokument zu formatieren. Falls die Datei nicht installiert ist, f|fffd|hren Sie bitte das Setup erneut durch, und installieren Sie die Datei."
Public Const strERR_ADDR_BOOK       As String = "Fehler beim Einf|fffd|gen eines Namens aus einem Adre|fffd|buch."
Public Const strERR_SEND_FAX        As String = "Der Assistent konnte dieses Dokument nicht per Fax versenden."
Public Const strERR_SEND_MAIL       As String = "Der Assistent konnte dieses Dokument nicht per E-Mail versenden."
Public Const strERR_AUTOTEXT_NOT_FOUND As String = "Word konnte keinen AutoText aus dem Assistenten einf|fffd|gen. Bitte f|fffd|hren Sie das Setup-Programm erneut aus und installieren Sie diesen Assistenten neu."
Public Const strERR_INIT_FORM       As String = "Word konnte den Eingabedialog des Assistenten nicht anzeigen. Bitte starten Sie den Assistenten erneut."
Public Const strERR_INIT_CALL_BACK  As String = "Word konnte die Auswahloptionen zum Ende des Assistenten nicht anzeigen. Bitte starten Sie den Assistenten erneut, um die Auswahlm|fffd|glichkeiten zu sehen."

' Misc strings
Public Const strWIZ As String = ".wiz"  'common extension to a wizard file
Public Const strDOT As String = ".dot"  'extension to a template file

'the setting in which this wizard has been saved. If the wizard is saved with A4 settings then
'this constant should be set to A4
Public Const strWIZ_SAVED_AS As String = "A4"

'the settings key for page size
Public Const strREG_PAGE_SIZE As String = "PageSize"
'to check if it is A4 and change the pagesize if the key's value is this string
Public Const strA4_SETTING As String = "A4"
' --------------------------------------------------------------------------------------
' ************     DO NOT LOCALIZE ANY CODE BEYOND THIS POINT  *************************
' --------------------------------------------------------------------------------------

'registry key under which to store individual wizard preference settings
Public Const strREG_SETTINGS_BASE_KEY As String = "HKEY_CURRENT_USER\Software\Microsoft\Office\8.0\Word\Wizards\"

Public Const strSPACE       As String = " "
Public Const strCOMMA       As String = ","
Public Const strSHP_MAP     As String = "shpMap"  'prefix to the names of the shapes in the navigation chart/map
Public Const strLBL_MAP     As String = "lblMap"  'prefix to the names of the labels in the navigation chart/map
Public Const strREG_ASSISTANT_HELP As String = "Assistant Help" 'registry entry to store local state of Assistant
                                                                'for this wizard
Public Const strREG_ASSISTANT_TIME_STAMP As String = "Time Stamp" 'registry to store the time stamp when the
                                                                  'local state of the wizard changed.

'COLOR constants used
Public Const COLOR_DISABLED As Long = &H404040  'used for disabled panel's label and shape
Public Const COLOR_DARKGREY As Long = &H808080  'used for visited panel's label and shape
Public Const COLOR_LIGHTGREY As Long = &HC0C0C0 'used for unvisited panel's label and shape
Public Const COLOR_RED      As Long = vbRed
Public Const COLOR_GREEN    As Long = vbGreen
Public Const COLOR_WHITE    As Long = vbWhite


' --------------------------------------------------------------------------------------
' VARIABLE DECLARATIONS

' Wizard Names And FileNames
Public strWizName As String
Public strWizLongName As String
Public strWizShortName As String

Public fSettingsRestored As Boolean
Public fSettingsSaved As Boolean

' Application Environment
Public objActiveRange   As Range     'current range
Public objWizTemplate   As Template  'doc's template i.e the wizard
Public iAlertsLevel      As Integer   'stores the initial alerts level

' Variables to store some environment values
Public strPathSeparator As String   ' Directory separator in a path
Public strTemplatePath As String    ' Path of the the wizard and corresponding templates

'current panel of the multipage control in the dialog
Public iCurrentPanel As Integer

' Registry location key
Public strRegSettingsKey As String

' Assistant
Public objAssistantBalloon  As Balloon  'help balloon displayed for each panel
Public fBalloonVisible      As Boolean  'true if the above balloon is visible
Public iLocalState          As Integer  'Local State of Assistant for passing to Office
Public lAssistantId         As Long     'assistant id obtained from StartWizard call
Public fExitTglEvent        As Boolean  'this is set to True, if we don't want the click
                                        'event for the toggle buttonto be executed when
                                        'we change its value

Public fWizardCallBack      As Boolean  'we set it to True in FReenterWizardPanel
                                        'since it is used only in JumpToPanel
                                        'to disable jumping to otherpanels, by clicking
                                        'on the shapes
Public fInitialAssistantState As Boolean  ' to go back to after exiting wizard
Public fAsstHelp As Boolean

'if the activedocument's papersize was changed then one of the two following
'variables will be set according to the paper size that is being set.
Public fChangeToA4 As Boolean
Public fChangeToLetter As Boolean

'Post wizard balloon options.
Public objPostWizBln As Balloon
Public objDocBln As Document
Public clsBln As New ClassAppEvents
Public fBlnInitialized As Boolean
Public fPostWizBlnOpen As Boolean

'variables storing the rectangle of the form to be avoided
'by the asst. and balloon
Public lFormTop As Long, lFormHeight As Long
Public lFormLeft As Long, lFormWidth As Long

' Wizard dialog form
Public formWizard As formWizDlg 'New formWizDlg

' General Purpose Utilities for Starting, Saving, and Restoring Wizards
' --------------------------------------------------------------------------------------
Public Sub StartWizard()
    On Error GoTo FatalError
  
    Application.ScreenUpdating = False
    
    ' Init Global Var
    fWizardCallBack = False
    fExitTglEvent = False
    fSettingsRestored = False
    fSettingsSaved = False
    lAssistantId = 0
  
    ' Identify Wizard
    InitWizardName (True)
    
    ' We're busy now
    StatusBar = strSTARTING & strWizName & strSTARTING2

    SetWizardEnvironment

    ' Locate the wizard template
    InitDocTemplate
    strTemplatePath = StrWizardPath

    ' Initialize the new document
    InitDoc
    
    ' Initialize form
    InitWizard (True)
    
    'remove any text which might written for indicating progress
    StatusBar = ""
    
    ' Connect to the Assistant
    InitWizardAssistant
    
    ' Bring up dialog
    System.Cursor = wdCursorNormal
    Application.ScreenUpdating = True
    
    formWizard.Show
    
    ResetWizardEnvironment (True)
    Exit Sub

FatalError:
    ReportError Err
End Sub  ' Main / StartWizard


Private Sub InitDocTemplate()
    ' Did user create a New Document or a New Template?
    On Error GoTo CreatingNewTemplate
    
    ' New Document
    Set objWizTemplate = ActiveDocument.AttachedTemplate
    Exit Sub

CreatingNewTemplate:
    ' New Template
    Set objWizTemplate = ActiveDocument
End Sub  ' InitDocTemplate


Private Function StrWizardPath() As String
    Dim strPath As String
    Dim strFileName As String
    Dim i As Integer
    Dim fFound As Boolean

    On Error GoTo FatalError
    
    fFound = True
    strPath = objWizTemplate.Path

    If (Len(strPath) = 0) Then
        ' New template based on Wizard
        ' Get location of templates - first look in UserTemplatesPath
        ' and then in Workgroup path
        i = 0
        fFound = False
        strPath = Application.Options.DefaultFilePath(wdUserTemplatesPath)
        
        While ((i < 2) And fFound = False)
            If (Len(strPath) <> 0) Then
                ' First try to find wizard with long filename
                WordBasic.FileFind SearchPath:=strPath, Name:=strWizLongName & strWIZ, SubDir:=1, MatchCase:=0
                If WordBasic.CountFoundFiles() = 0 Then
                    ' Try to find wizard with short filename
                    WordBasic.FileFind SearchPath:=strPath, Name:=strWizShortName & strWIZ, SubDir:=1, MatchCase:=0
                    If WordBasic.CountFoundFiles() <> 0 Then fFound = True
                Else
                    fFound = True
                End If
            End If
        
            i = i + 1
            strPath = Application.Options.DefaultFilePath(wdWorkgroupTemplatesPath)
        Wend
        
        If (fFound) Then ' Wizard was found, so save path
            strFileName = WordBasic.[FoundFileName$](1)
            strPath = WordBasic.[FileNameInfo$](strFileName, 5)
        End If
    End If

    If (fFound) Then
        strPathSeparator = Application.PathSeparator
        If Right$(strPath, 1) <> strPathSeparator Then strPath = strPath & strPathSeparator
        StrWizardPath = strPath
        Exit Function
    End If

LWizardMissing:
    DisplayErrorMsg strERR_WIZ_NOT_FOUND
    
FatalError:
    ReportError Err
End Function ' StrWizardPath

'sets the wizard environment
Private Sub SetWizardEnvironment()
    System.Cursor = wdCursorWait
    'set alert level to none, so that Word/VBA dont display display any
    'error messages by themselves
    iAlertsLevel = Application.DisplayAlerts
    Application.DisplayAlerts = wdAlertsNone
    'Disable Cancel key, to prevent ESC key from interrupting the macro.
    'it will still dismiss the Form though
    Application.EnableCancelKey = wdCancelDisabled
End Sub

'resets the environment to what it was before the wizard was executed
Sub ResetWizardEnvironment(fDummy As Boolean)
    System.Cursor = wdCursorNormal
    'remove any text which might written for indicating progress
    StatusBar = ""
    Application.ScreenUpdating = True
    ActiveWindow.View.Type = wdPageView
    Application.DisplayAlerts = iAlertsLevel
    Application.EnableCancelKey = wdCancelInterrupt
End Sub

'returns the value stored in registry key strId
Public Function StrFetchPref(strId As String) As String
    On Error GoTo LReturnNull
    
    StrFetchPref = System.PrivateProfileString("", strRegSettingsKey, strId)
    Exit Function
LReturnNull:
    StrFetchPref = ""
End Function

'stores strValue in registry key strId
Public Sub StorePref(strId As String, strValue As String)
    Dim strTemp As String

    ' If string is empty, store "~" as placeholder
    If (Len(strValue) = 0) Then
        strTemp = "~"
    Else
        strTemp = strValue
    End If
    
    System.PrivateProfileString("", strRegSettingsKey, strId) = strTemp
End Sub

'returns the string stored in strId. If empty, returns strDefault
Public Function StrRestorePref(strId As String, strDefault As String) As String
    Dim strTemp As String

    strTemp = StrFetchPref(strId)
    ' If length is 0, it wasn't in regsistry, so use default value
    If Len(strTemp) = 0 Then
        strTemp = strDefault
    ' "~" is a placeholder to allow returning empty strings
    ElseIf strTemp = "~" Then
        strTemp = ""
    End If
    
    StrRestorePref = strTemp
End Function

' stores iVal in registry key strId as a string
Public Sub StoreValPref(strId As String, iVal As Integer)
    StorePref strId, CStr(iVal)
End Sub

'returns the value stored in the key strId
'if invalid, returns iDefault
Public Function FRestorePref(strId As String, fDefault As Boolean) As Boolean

    Dim strVal As String

    strVal = StrFetchPref(strId)
    If Len(strVal) = 0 Then
        FRestorePref = fDefault
    Else
        FRestorePref = Val(strVal)
    End If
End Function


'returns the value stored in the key strId
'if invalid, returns iDefault
Public Function IRestorePref(strId As String, iDefault As Integer) As Integer
    Dim strVal As String

    strVal = StrFetchPref(strId)
    If Len(strVal) = 0 Then
        IRestorePref = iDefault
    Else
        IRestorePref = Val(strVal)
    End If
End Function


'main error reporting routine called for fatal errors in the wizard
'SHOULD NOT BE CALLED FOR POST-WIZARD ERRORS
Public Sub ReportError(ByVal ErrorCode As ErrObject)
    Dim lErrorCode As Long
    Dim strErrorMsg As String
    
    lErrorCode = ErrorCode.Number
    strErrorMsg = ErrorCode.Description
    
    'The next statement seems to reset the ErrorCode object,
    'even though it is a ByVal argument
    On Error Resume Next
    
    ResetWizardEnvironment (True)
    
    If fBalloonVisible Then objAssistantBalloon.Close
    If lErrorCode Then DisplayErrorMsg strErrorMsg
    If lAssistantId Then Assistant.EndWizard lAssistantId, False '2nd parameter is fSuccess
    
    If (Not (formWizard Is Nothing)) Then
        formWizard.Hide
        Unload formWizard
        Set formWizard = Nothing
    End If
    
    'ReportError is not called in post-wizard option errors.
    'So, always closing the doc.
    ActiveDocument.Close wdDoNotSaveChanges 'ActiveDocument assumed to be set
    
    'terminate the wizard
    End

End Sub ' ReportError

'initialises the new doc. that is getting created
Private Sub InitDoc()
    Dim fBadDoc As Integer
    
    On Error GoTo FatalError

    'chk if doc.path errors if path not present.
    fBadDoc = False
    If (Len(ActiveDocument.Path) <> 0) Then
        'doc has been saved before
        fBadDoc = True
    Else
        Set objActiveRange = ActiveDocument.Content
        'chk if range has anything other than a paragraph mark
        If (objActiveRange.End > objActiveRange.Start + 1) Then fBadDoc = True
    End If
        
    If (fBadDoc) Then
        DisplayErrorMsg strERR_BAD_DOC & strWizName & strERR_BAD_DOC2
        ResetWizardEnvironment (True)
        'terminate the wizard
        End
    End If
    
    objActiveRange.Collapse wdCollapseStart
    
    SetPageSize

    Exit Sub

FatalError:
    ReportError Err
End Sub  ' InitDoc

' --------------------------------------------------------------------------------------
' Assistant related functions
' --------------------------------------------------------------------------------------

'initialises the Assistant for the wizard
Private Sub InitWizardAssistant()
    Dim lPrivate As Long
    
    fBalloonVisible = False
    On Error GoTo FatalError
    
    ' Was Assistant visible, when wizard was started?
    fInitialAssistantState = Assistant.Visible
    
    ' What is the local state of Assistant for this wizard?
    'if user changed "Help for wizards" globally in the Assistant Options dlg,
    'Word will automatically update this to reflect the latest value.
    iLocalState = IRestorePref(strREG_ASSISTANT_HELP, msoWizardActInactive)
    
    'the form is shown centered on the app. -StartUpPosition = CenterOwner
    lFormHeight = formWizard.Height
    lFormWidth = formWizard.Width
    lFormTop = Application.Top + (Application.Height / 2) - (lFormHeight / 2)
    If (lFormTop < 0) Then lFormTop = 0
    lFormLeft = Application.Left + (Application.Width / 2) - (lFormWidth / 2)
    If (lFormLeft < 0) Then lFormLeft = 0

    lAssistantId = Assistant.StartWizard(iLocalState, "Common.fnHelpCallBack", lPrivate, _
                                    Top:=lFormTop, Left:=lFormLeft, _
                                    Bottom:=lFormTop + lFormHeight, _
                                    Right:=lFormLeft + lFormWidth)
    
    iLocalState = msoWizardActInactive
    If lAssistantId = 0 Then GoTo FatalError 'error with Assistant.Startwizard.
                                             'Assistant probably not installed
    
    ' Initialize Balloon
    Set objAssistantBalloon = Assistant.NewBalloon
    With objAssistantBalloon
        .Heading = strWizName
        .Mode = msoModeModeless
        .Button = msoButtonSetNone
        .Text = rgstrAssistantMsg(0)
    End With
    objAssistantBalloon.SetAvoidRectangle lFormLeft, lFormTop, lFormLeft + lFormWidth, lFormTop + lFormHeight
    If Assistant.BalloonError Then GoTo FatalError
    fAsstHelp = True
    Exit Sub
    
FatalError:
    fAsstHelp = False
    'since error occurred with assistant actions, let's disable Assistant button
    formWizard.tglAssistant.Enabled = False
    Err.Clear
End Sub

'this function called when user clicks on a button in the balloon put up by StartWizard or
'ActivateWizard.
Public Sub fnHelpCallBack(iHelp As Integer, lPrivate As Long)
    Select Case iHelp
        Case msoWizardMsgLocalStateOff:
            iLocalState = msoWizardActInactive
            'user doesn't want help anymore
            'if balloon is up,then close it
            If fBalloonVisible Then
                objAssistantBalloon.Close
                fBalloonVisible = False
            End If
            
            If (formWizard.tglAssistant.Value) Then
                fExitTglEvent = True
                formWizard.tglAssistant.Value = False
            End If
        Case msoWizardMsgShowHelp:
            iLocalState = msoWizardActActive
                        
            If (Not (formWizard.tglAssistant.Value)) Then
                fExitTglEvent = True
                formWizard.tglAssistant.Value = True
            End If
            
            If fBalloonVisible Then Exit Sub 'help balloon already up (should not occur, though)
            
            If fAsstHelp Then 'if no error in building help balloon
                objAssistantBalloon.Text = rgstrAssistantMsg(iCurrentPanel)
                objAssistantBalloon.Show
                If Assistant.BalloonError = msoBalloonErrorNone Then _
                    fBalloonVisible = True
            End If

    End Select
End Sub

Public Sub RestoreAssistant(fDummy As Boolean)
    On Error Resume Next
    Assistant.Visible = fInitialAssistantState
    Err.Clear
End Sub  ' RestoreAssistant


'displays error message in a balloon if Assistant is visible
'else uses a Msgbox
Public Sub DisplayErrorMsg(strErrMsg As String)
    Dim objErrBalloon As Balloon

    On Error GoTo DisplayMsgBox
    
    If lAssistantId Then
        If Assistant.Visible Then
            Set objErrBalloon = Assistant.NewBalloon
            With objErrBalloon
                .Mode = msoModeModal
                .Heading = strWizName
                .Text = strErrMsg
                .Button = msoButtonSetOK
                .Icon = msoIconAlert
            End With
            objErrBalloon.Show
            If Assistant.BalloonError = msoBalloonErrorNone Then
                Err.Clear
                Exit Sub
            End If
        End If
    End If
    
DisplayMsgBox:
    MsgBox strErrMsg, vbExclamation + vbOKOnly + vbApplicationModal, strWizName
    Err.Clear
    
End Sub
'if there exists a PageSize key with a value of A4 then change
'activedocument's page size to be A4
Private Sub SetPageSize()
    Dim strProperty As String
    
    fChangeToA4 = False
    fChangeToLetter = False
    On Error GoTo TryLetterPageSize
    strProperty = ""
    strProperty = System.PrivateProfileString("", strREG_SETTINGS_BASE_KEY, strREG_PAGE_SIZE)
    If strProperty = strA4_SETTING Then
        If strWIZ_SAVED_AS <> "A4" Then
            ActiveDocument.PageSetup.PaperSize = wdPaperA4
            fChangeToA4 = True
        End If
    End If

TryLetterPageSize:
    On Error GoTo -1 'resets Err and the error handler
    On Error GoTo ExitSub
    If Len(strProperty) Then
    'registry entry was not found. Wizard should have letter size settings
        If strWIZ_SAVED_AS <> "A4" Then
            ActiveDocument.PageSetup.PaperSize = wdPaperLetter
            fChangeToLetter = True
        End If
    Else
        ActiveDocument.PageSetup.PaperSize = wdPaperLetter
        fChangeToLetter = True
    End If
ExitSub:
    Err.Clear
End Sub

' End Common Module
Attribute VB_Name = "Memo"
' --------------------------------------------------------------------------------------
' WORD 97 WIZARD
' Memo Wizard Specific Code
' --------------------------------------------------------------------------------------
Option Explicit

' --------------------------------------------------------------------------------------
' CONSTANT DECLARATIONS

' Bookmark Names
Public Const strBKMK_TITLE          As String = "Title"

' The following Style names MUST match names in template files
Public Const strSTY_MSG_HDR_FRST    As String = "Nachrichtenkopf Anfang"
Public Const strSTY_MSG_HDR_LST     As String = "Nachrichtenkopf Ende"
Public Const strSTY_MSG_HDR_LBL     As String = "Nachrichtenkopfbeschriftung"
Public Const strSTY_DOC_LABEL       As String = "Dokumentbeschriftung"
'Autotext name
Public Const strCONTEMP_AUTOTEXT    As String = "cntmpgfx2"

' Mail dialog strings
Public Const strMAIL_PROMPT         As String = "Wie m|fffd|chten Sie dieses Memo versenden?"
Public Const strMAIL_CAPTION        As String = "Memo versenden"

' Banter strings
Public Const strEMPTY_MACRO         As String = "EmptyMacro "

' Error Messages
Public Const strERR_BAD_MEASUREMENT As String = "Ung|fffd|ltiges Ma|fffd|"
Public Const strERR_LIMIT           As String = "Das Ma|fffd| mu|fffd| zwischen "
Public Const strAND                 As String = " und "
Public Const strERR_LIMIT2          As String = " liegen."

' Document Label Strings
Public Const strTYPE_HERE           As String = "  Hier klicken und Text eingeben  "
Public Const strDEFAULT_TITLE       As String = "Internes Memorandum" ' Default title to Memo
Public Const sDEFAULT_OWNFORM_SPACE As Single = 144     ' Change values of rgstrDefaultOwnFormSpace in InitWizardStrings()
Public Const sMAX_OWN_FORM_SPACE    As Single = 6 * 72  ' max. allowable margin for own form in pts.

Public Const strDATE                As String = "Datum:"
Public Const strFROM                As String = "Von:"
Public Const strSUBJECT_COLON       As String = "Betreff:"
Public Const strSUBJECT             As String = "  Hier klicken und Betreff eingeben  "
Public Const strPRIORITY            As String = "Priorit|fffd|t:"
Public Const strURGENT              As String = "Dringend"
Public Const strTO                  As String = "An:"
Public Const strNAMES               As String = "  Hier klicken und Namen eingeben  "
Public Const strCC                  As String = "Kopien an:"
Public Const strDISTRIBUTION        As String = "Verteiler"
Public Const strLIST                As String = "Siehe Verteilerliste"
Public Const strENC                 As String = "Anl. "  'Enclosures; note space!
Public Const strATTACHMENTS         As String = "Anh|fffd|nge"
Public Const strCONFIDENTIAL        As String = "Vertraulich"
Public Const strCALL_BACK_HEADING   As String = "Wie wollen Sie das Memo ver|fffd|ndern?"
' --------------------------------------------------------------------------------------
' DO NOT LOCALIZE ANY CODE BEYOND THIS POINT EXCEPT FOR InitWizardName and InitWizardStrings
' --------------------------------------------------------------------------------------

' Memo Wizard  Document and Form Control Related Constants
Public Const iMAX_PANEL                     As Integer = 7 ' Number of last panel in MultiPage (First=0)
Public rgstrAssistantMsg(iMAX_PANEL + 1)    As String ' as many as there are states
' Memo Assistant
Public Const iCALL_BACK_COUNT               As Integer = 4 ' Number of items in CallBackBalloon (First=1)
Public rgstrCallBackMsg(iCALL_BACK_COUNT)   As String
' Panel Page Numbers
Public Const wzPAGE_START           As Integer = 0
Public Const wzPAGE_STYLE           As Integer = 1
Public Const wzPAGE_TITLE           As Integer = 2
Public Const wzPAGE_HEADING         As Integer = 3
Public Const wzPAGE_RECIPIENT       As Integer = 4
Public Const wzPAGE_CLOSING         As Integer = 5
Public Const wzPAGE_HEADFOOT        As Integer = 6
Public Const wzPAGE_FINISH          As Integer = 7

' Memo Styles
Public Const wzPROFESSIONAL         As Integer = 0
Public Const wzCONTEMPORARY         As Integer = 1
Public Const wzELEGANT              As Integer = 2
Public Const iLONG_NAME             As Integer = 0
Public Const iSHORT_NAME             As Integer = 1

' Location of Own Form Heading
Public Const wzTOP                  As Integer = 0
Public Const wzLEFT                 As Integer = 1
Public Const wzRIGHT                As Integer = 2

Public Const strPOST_WIZ_BLN        As String = "Memo Post Wizard Balloon"
' --------------------------------------------------------------------------------------
' VARIABLE DECLARATIONS

' General
Public formSend                     As formMailFax ' Instance of Send by Mail/FAX form
Public iDefaultUnit                 As Integer
Public rgstrTemplateFileNames(2, 1) As String
Public fStylesCopied                As Boolean
Public fInitializingForm            As Boolean

' Margins and Units of Measurement
Public Const iUNITS_STRINGS         As Integer = 16
Public Const iUNITS_BASIC           As Integer = 4 ' Used for dimensioning arrays for in cm mm pt pi
Public rgstrUnits(iUNITS_STRINGS)   As String
Public rgsConversionRatio(iUNITS_STRINGS) As String
Public rgsUnitIncrements(iUNITS_BASIC) As Single  ' Spin Button increment for each unit of measurement
Public rgiRndOffDigits(iUNITS_BASIC) As Integer 'to what decimal place should we round off for each unit

' Page 2
Public strTitle                     As String
Public fOwnForm                     As Boolean
Public iOwnFormOrientation          As Integer
Public sOwnFormSpace                As Single
Public rgstrDefaultOwnFormSpace(iUNITS_BASIC) As String
Public fCheckValidity               As Boolean
' Page 3
Public strHeadingDate               As String
Public strHeadingFrom               As String
Public strHeadingSubject            As String
' Page 4
Public strMemoTo                    As String
Public strMemoCC                    As String
Public fCheckTo                     As Boolean
Public fCheckCc                     As Boolean
Public fDistributionPage            As Boolean
' Page 5
Public strClosingWriter             As String
Public strClosingTypist             As String
Public strClosingEnclosure          As String
' Page 6
Public strHeaderTopic               As String
Public fHeaderTopicEdited           As Boolean
' Page 1
Public iMemoStyle                   As Integer
Public iSavedStyle                  As Integer


Public Sub InitWizardName(fDummy As Boolean)
    strWizShortName = "Memo"
    strWizLongName = "Memo-Assistent"
    strWizName = strWizLongName
End Sub


Private Sub InitWizardStrings()
    On Error GoTo FatalError
    
    ' WIZARD PANEL HELP MESSAGES
    ' Note: this list is indexed 0 - wzPAGE_FINISH
    rgstrAssistantMsg(wzPAGE_START) = "Um die gleichen Einstellungen und Daten wie beim letzten Memo zu verwenden, klicken Sie einfach auf Fertigstellen."
    rgstrAssistantMsg(wzPAGE_STYLE) = "W|fffd|hlen Sie einen der Stile aus. Sie k|fffd|nnen den Stil nochmals |fffd|ndern nachdem der Assistent durchgelaufen ist."
    rgstrAssistantMsg(wzPAGE_TITLE) = "Klicken Sie auf 'Ja' um einen dekorativen Titel im Kopf des Memos zu erstellen. Klicken Sie auf 'Nein' um weitere Optionen anzuzeigen f|fffd|r die Seitenr|fffd|nder Ihres Memos an ein vorgedrucktes Formular anzupassen."
    rgstrAssistantMsg(wzPAGE_HEADING) = "W|fffd|hlen Sie die Kontrollk|fffd|stchen der Elemente aus, die im Kopf des Memos erscheinen sollen. Geben Sie dann Text in die Eingabefelder neben den Kontrollk|fffd|stchen ein. Sie k|fffd|nnen Kopf des Memos ver|fffd|ndern, wenn das Memo fertiggestellt ist, indem Sie den Text |fffd|berschreiben."
    rgstrAssistantMsg(wzPAGE_RECIPIENT) = "Sie k|fffd|nnen Namen aus einem Adre|fffd|buch verwenden, oder Namen in die Eingabefelder eingeben. Klicken Sie 'Ja' um eine separate Seite f|fffd|r den Verteiler zu erstellen. Eine separate Seite f|fffd|r den Verteiler ist hilfreich, wenn sehr viele Namen in den Feldern 'An:' und 'Cc:' stehen. Klicken Sie auf 'Nein' um den Verteiler auf der gleichen Seite wie den Memotext zu plazieren."
    rgstrAssistantMsg(wzPAGE_CLOSING) = "Geben Sie die Anzahl der Anlagen in das Eingabefeld ein und w|fffd|hlen Sie, ob Sie das Memo Anh|fffd|nge haben wird."
    rgstrAssistantMsg(wzPAGE_HEADFOOT) = "Um zu verhindern, da|fffd| das Datum zweimal auf jeder Seite erscheint, kreuzen Sie nur eins der beiden Kontrollk|fffd|stchen an. Wenn beide Kontrollk|fffd|stchen angekreutz sind, erscheint das Datum sowohl in der Kopfzeile wie auch in der Fu|fffd|zeile."
    rgstrAssistantMsg(wzPAGE_FINISH) = "Um eine Einstellung zu ver|fffd|ndern, klicken Sie auf '< Zur|fffd|ck'."
    
    ' ASSISTANT CALLBACK BALLOON MESSAGES
    ' Note: change constant  iCALL_BACK_COUNT if number of items in list changes
    rgstrCallBackMsg(0) = "Kopf-/Fu|fffd|zeile ver|fffd|ndern"
    rgstrCallBackMsg(1) = "Memo-Stil ver|fffd|ndern"
    rgstrCallBackMsg(2) = "Das Memo versenden"
    rgstrCallBackMsg(3) = "Hilfe zu einem anderen Thema anfordern..."

    ' Template File Names
    rgstrTemplateFileNames(wzPROFESSIONAL, iLONG_NAME) = "Professionelles Memo.dot"
    rgstrTemplateFileNames(wzPROFESSIONAL, iSHORT_NAME) = "profmemo.dot"
    rgstrTemplateFileNames(wzCONTEMPORARY, iLONG_NAME) = "Aktuelles Memo.dot"
    rgstrTemplateFileNames(wzCONTEMPORARY, iSHORT_NAME) = "Aktumemo.dot"
    rgstrTemplateFileNames(wzELEGANT, iLONG_NAME) = "Elegantes Memo.dot"
    rgstrTemplateFileNames(wzELEGANT, iSHORT_NAME) = "elegmemo.dot"
    
    ' 2 inch default margin in all units
    ' Note: change constant iDEFAULT_OWN_FORM_SPACE if values changed below
    rgstrDefaultOwnFormSpace(wdInches) = "2in"
    rgstrDefaultOwnFormSpace(wdCentimeters) = "5cm"
    rgstrDefaultOwnFormSpace(wdMillimeters) = "50mm"
    rgstrDefaultOwnFormSpace(wdPoints) = "144pt"
    rgstrDefaultOwnFormSpace(wdPicas) = "12pi"

    'rgstrunits is used with iDefaultUnit in error messages.
    'so it should be indexed in the same order as that in VBA enum.
    'for eg. if the default unit is cm and iDefaultUnit set to Application.Options.MeasurementUnit equals 3
    'then rgstrUnits(3) should be cm.
    'ALSO, ALWAYS ENTER IN LOWER CASE STRINGS. WE CONVERT
    'USER'S INPUT TO LOWER CASE BEFORE CHECKING WITH THIS ARRAY FOR A MATCH
    ' Note: if number of elements in array changes, change iUNITS_STRINGS above
    rgstrUnits(wdInches) = "in": rgsConversionRatio(wdInches) = 72    '0
    rgstrUnits(wdCentimeters) = "cm": rgsConversionRatio(wdCentimeters) = 72 / 2.54  '1
    rgstrUnits(wdMillimeters) = "mm": rgsConversionRatio(wdMillimeters) = 72 / 25.4 '2
    rgstrUnits(wdPoints) = "pt": rgsConversionRatio(wdPoints) = 1  '3
    rgstrUnits(wdPicas) = "pi": rgsConversionRatio(wdPicas) = 12  '4
    rgstrUnits(5) = "in.": rgsConversionRatio(5) = 72
    rgstrUnits(6) = Chr$(34): rgsConversionRatio(6) = 72
    rgstrUnits(7) = "pt.": rgsConversionRatio(7) = 1
    rgstrUnits(8) = "cm.": rgsConversionRatio(8) = 72 / 2.54
    rgstrUnits(9) = "mm.": rgsConversionRatio(9) = 72 / 25.4
    rgstrUnits(10) = "pi.": rgsConversionRatio(10) = 12
    rgstrUnits(11) = "inches": rgsConversionRatio(11) = 72
    rgstrUnits(12) = "centimeters": rgsConversionRatio(12) = 72 / 2.54
    rgstrUnits(13) = "millimeters": rgsConversionRatio(13) = 72 / 25.4
    rgstrUnits(14) = "points": rgsConversionRatio(14) = 1
    rgstrUnits(15) = "picas": rgsConversionRatio(15) = 12
    
' --------------------------------------------------------------------------------------
'*******************   DO NOT LOCALIZE ANY ANY CODE BEYOND THIS POINT *****************
' --------------------------------------------------------------------------------------
    
    ' Spin-button increments for measurement units
    rgsUnitIncrements(wdInches) = 0.1: rgiRndOffDigits(wdInches) = 1
    rgsUnitIncrements(wdCentimeters) = 0.1: rgiRndOffDigits(wdCentimeters) = 1
    rgsUnitIncrements(wdMillimeters) = 1: rgiRndOffDigits(wdMillimeters) = 0
    rgsUnitIncrements(wdPoints) = 1: rgiRndOffDigits(wdPoints) = 0
    rgsUnitIncrements(wdPicas) = 1: rgiRndOffDigits(wdPicas) = 0

    ' Location in registry DO NOT CHANGE THIS VALUE FOR LOCALIZATION
    strRegSettingsKey = strREG_SETTINGS_BASE_KEY & "Memo Wizard"

    Exit Sub
FatalError:
    ReportError Err
End Sub  ' InitWizardStrings


Public Sub InitWizard(fDummy As Boolean)
    On Error GoTo FatalError
    
    ' Global Vars
    iCurrentPanel = 0
    iDefaultUnit = Options.MeasurementUnit
    fCheckTo = False
    fCheckCc = False


    ' Initialize strings
    InitWizardStrings
    
    ' Create a new instance of the form
    Set formWizard = New formWizDlg
    If formWizard Is Nothing Then GoTo FatalError
    
    formWizard.lblStart.Caption = " " & strWizLongName & " "
    
    Exit Sub
    
FatalError:
    DisplayErrorMsg strERR_INIT_FORM
    ReportError Err
End Sub


Private Function FReenterWizardPanel(iLockPanel As Integer) As Boolean
    Dim i As Integer
    Dim objControls As Object
    
    On Error GoTo FatalError
    
    'if for some reason formWizard has been deleted then reinstantiate formWizDlg
    If formWizard Is Nothing Then Set formWizard = New formWizDlg
    
    fWizardCallBack = True
    
    ' First disable all flow chart controls
    Set objControls = formWizard.Controls
    For i = 0 To iMAX_PANEL
        objControls(strSHP_MAP & i).BackColor = COLOR_DISABLED
        objControls(strLBL_MAP & i).ForeColor = COLOR_DISABLED
        objControls(strLBL_MAP & i).FONTBOLD = False
    Next i
        
    ' Select new flow chart marker
    objControls(strSHP_MAP & iLockPanel).BackColor = vbGreen
    objControls(strLBL_MAP & iLockPanel).ForeColor = vbWhite
    objControls(strLBL_MAP & iLockPanel).FONTBOLD = True
    
    With formWizard
        ' Navigation Buttons
        .tglAssistant.Visible = False
        .cmdCancel.Visible = False
        .cmdBack.Visible = False
        .cmdNext.Visible = False
        .cmdFinish.Visible = False
        .cmdOk.Visible = True
        .cmdCancelReVisit.Visible = True
        
        ' Escape Service
        .cmdCancel.Cancel = False
        .cmdCancelReVisit.Cancel = True
    
        ' Change to new active page
        .mpgWizardPage.Value = iLockPanel
        iCurrentPanel = iLockPanel
        
        ' Restore previously selected style
        Select Case iMemoStyle
            Case wzPROFESSIONAL
                .optProfessional.Value = True
                .shpShadowProfessional.Visible = True
                .shpShadowContemporary.Visible = False
                .shpShadowElegant.Visible = False
                .optProfessional.SetFocus
            Case wzCONTEMPORARY
                .optContemporary.Value = True
                .shpShadowProfessional.Visible = False
                .shpShadowContemporary.Visible = True
                .shpShadowElegant.Visible = False
                .optContemporary.SetFocus
            Case wzELEGANT
                .optElegant.Value = True
                .shpShadowProfessional.Visible = False
                .shpShadowContemporary.Visible = False
                .shpShadowElegant.Visible = True
                .optElegant.SetFocus
        End Select
    End With

    ' No errors
    FReenterWizardPanel = True
    Exit Function

FatalError:
    DisplayErrorMsg strERR_INIT_FORM
    FReenterWizardPanel = False
End Function


' fDummy prevents sub from appearing in Word Tools/Macro list
Public Sub SaveDialogValues(fDummy As Boolean)
    On Error GoTo FatalError
    
    ' Display status
    Application.ScreenUpdating = False
    StatusBar = strSAVE_SETTINGS
    System.Cursor = wdCursorWait
    
    ' Assistant
    System.PrivateProfileString("", strREG_SETTINGS_BASE_KEY, strREG_ASSISTANT_TIME_STAMP) = Format$(Now, "General Date")
    StoreValPref strREG_ASSISTANT_HELP, iLocalState
  
    ' Page 2
    StoreValPref "Own Form", Int(fOwnForm)
    StorePref "Title", formWizard.txtTitle.Text
    StoreValPref "Own Form Orientation", iOwnFormOrientation
    StorePref "Own Form Space", Str(sOwnFormSpace)
    
    ' Page 3
    StoreValPref "Heading Date", formWizard.chkHeadingDate.Value
    StoreValPref "Heading From", formWizard.chkHeadingFrom.Value
    StorePref "Heading From Text", formWizard.txtHeadingFrom.Text
    StoreValPref "Heading Subject", formWizard.chkHeadingSubject.Value
    StorePref "Heading Subject Text", formWizard.txtHeadingSubject.Text
    StoreValPref "Heading Priority", formWizard.chkHeadingPriority.Value
 
    ' Page 4
    StoreValPref "Memo To", formWizard.chkMemoTo.Value
    StorePref "Memo To Text", formWizard.txtMemoTo.Text
    StoreValPref "Memo Cc", formWizard.chkMemoCc.Value
    StorePref "Memo Cc Text", formWizard.txtMemoCc.Text
    StoreValPref "Distribution Page", Int(fDistributionPage)
    
    ' Page 5
    StoreValPref "Closing Writer", formWizard.chkClosingWriter.Value
    StorePref "Closing Writer Text", formWizard.txtClosingWriter.Text
    StoreValPref "Closing Typist", formWizard.chkClosingTypist.Value
    StorePref "Closing Typist Text", formWizard.txtClosingTypist.Text
    StoreValPref "Closing Attachment", formWizard.chkClosingAttachment.Value
    
    ' Page 5
    StoreValPref "Header Topic", formWizard.chkHeaderTopic.Value
    StoreValPref "Header Date", formWizard.chkHeaderDate.Value
    StoreValPref "Header Page Number", formWizard.chkHeaderPageNumber.Value
    StoreValPref "Footer Confidential", formWizard.chkFooterConfidential.Value
    StoreValPref "Footer Date", formWizard.chkFooterDate.Value
    StoreValPref "Footer Page Number", formWizard.chkFooterPageNumber.Value
    
    ' Page 1
    StoreValPref "Memo Style", iMemoStyle
    
    ' Done
    fSettingsSaved = True
    StatusBar = ""
    System.Cursor = wdCursorNormal
    Application.ScreenUpdating = True
    Exit Sub

FatalError:
    ReportError Err
End Sub  ' SaveNewWizardValues


Public Sub RestoreDialogValues(fDummy As Boolean)
    On Error GoTo FatalError
    StatusBar = strRST_SETTINGS
    Application.ScreenUpdating = False
    System.Cursor = wdCursorWait
    fInitializingForm = True
    'Page0
    ' Page 2
    fOwnForm = FRestorePref("Own Form", False)
    If fOwnForm Then
        formWizard.optIncludeTitleNo = True
        strTitle = ""
        formWizard.frmOwnForm.Visible = True
    Else
        formWizard.optIncludeTitleYes = True
        strTitle = StrRestorePref("Title", strDEFAULT_TITLE)
        formWizard.txtTitle.Text = strTitle
        formWizard.frmOwnForm.Visible = False
    End If

    iOwnFormOrientation = IRestorePref("Own Form Orientation", 0)
    Select Case iOwnFormOrientation
        Case wzTOP
            formWizard.optOwnFormTop.Value = True
        Case wzLEFT
            formWizard.optOwnFormLeft.Value = True
        Case wzRIGHT
            formWizard.optOwnFormRight.Value = True
        Case Else
            iOwnFormOrientation = wzTOP
            formWizard.optOwnFormTop.Value = True
    End Select
    
    sOwnFormSpace = IRestorePref("Own Form Space", sDEFAULT_OWNFORM_SPACE)
    If (sOwnFormSpace < 0) Or (sOwnFormSpace > sMAX_OWN_FORM_SPACE) Then sOwnFormSpace = sDEFAULT_OWNFORM_SPACE
    formWizard.txtOwnFormSpace.Text = StrDefaultMsrmentFromPts(sOwnFormSpace)
    
    
    ' Page 3
    strHeadingDate = Date
    If FRestorePref("Heading Date", True) Then
        formWizard.chkHeadingDate.Value = True
        formWizard.txtHeadingDate.Text = strHeadingDate
    Else
        formWizard.chkHeadingDate.Value = False
        formWizard.txtHeadingDate.Text = ""
    End If
    
    strHeadingFrom = StrRestorePref("Heading From Text", Application.UserName)
    If FRestorePref("Heading From", True) Then
        formWizard.chkHeadingFrom.Value = True
        formWizard.txtHeadingFrom.Text = strHeadingFrom
    Else
        formWizard.chkHeadingFrom.Value = False
        formWizard.txtHeadingFrom.Text = ""
    End If
    
    strHeadingSubject = StrRestorePref("Heading Subject Text", "")
    If FRestorePref("Heading Subject", True) Then
        formWizard.chkHeadingSubject.Value = True
        formWizard.txtHeadingSubject.Text = strHeadingSubject
    Else
        formWizard.chkHeadingSubject.Value = False
        formWizard.txtHeadingSubject.Text = ""
    End If
    
    formWizard.chkHeadingPriority.Value = FRestorePref("Heading Priority", False)
 
 
    ' Page 4
    ' Is MAPI Available?
    If Application.MAPIAvailable Then formWizard.cmdAddressBook.Enabled = True
    
    strMemoTo = StrRestorePref("Memo To Text", "")
    If FRestorePref("Memo To", True) Then
        formWizard.chkMemoTo.Value = True
        formWizard.txtMemoTo.Text = strMemoTo
    Else
        formWizard.chkMemoTo.Value = False
        formWizard.txtMemoTo.Text = ""
    End If
    fCheckTo = False
    
    strMemoCC = StrRestorePref("Memo Cc Text", "")
    If FRestorePref("Memo Cc", True) Then
        formWizard.chkMemoCc.Value = True
        formWizard.txtMemoCc.Text = strMemoCC
    Else
        formWizard.chkMemoCc.Value = False
        formWizard.txtMemoCc.Text = ""
    End If
    fCheckCc = False
    
    fDistributionPage = FRestorePref("Distribution Page", False)
    If fDistributionPage Then
        formWizard.optDistributionYes.Value = True
    Else
        formWizard.optDistributionNo.Value = True
    End If
    
    
    ' Page 5
    strClosingWriter = StrRestorePref("Closing Writer Text", Application.UserInitials)
    If FRestorePref("Closing Writer", False) Then
        formWizard.chkClosingWriter.Value = True
        formWizard.txtClosingWriter.Text = strClosingWriter
    Else
        formWizard.chkClosingWriter.Value = False
        formWizard.txtClosingWriter.Text = ""
    End If
    
    strClosingTypist = StrRestorePref("Closing Typist Text", "")
    If FRestorePref("Closing Typist", False) Then
        formWizard.chkClosingTypist.Value = True
        formWizard.txtClosingTypist.Text = strClosingTypist
    Else
        formWizard.chkClosingTypist.Value = False
        formWizard.txtClosingTypist.Text = ""
    End If
    
    strClosingEnclosure = "1"
    
    formWizard.chkClosingAttachment.Value = FRestorePref("Closing Attachment", False)
    
    
    ' Page 6
    If Len(strHeadingSubject) = 0 Then
        strHeaderTopic = strTitle
    ElseIf Len(strTitle) Then
        strHeaderTopic = strTitle & ": " & strHeadingSubject
    Else
        strHeaderTopic = strHeadingSubject
    End If
    If FRestorePref("Header Topic", True) Then
        formWizard.chkHeaderTopic.Value = True
        formWizard.txtHeaderTopic.Text = strHeaderTopic
    Else
        formWizard.chkHeaderTopic.Value = False
        formWizard.txtHeaderTopic.Text = ""
    End If
    fHeaderTopicEdited = False
        
    formWizard.chkHeaderDate.Value = FRestorePref("Header Date", False)
    formWizard.chkHeaderPageNumber.Value = FRestorePref("Header Page Number", False)
    formWizard.chkFooterConfidential.Value = FRestorePref("Footer Confidential", True)
    formWizard.chkFooterDate.Value = FRestorePref("Footer Date", True)
    formWizard.chkFooterPageNumber.Value = FRestorePref("Footer Page Number", True)
    
    'Page 1
    iMemoStyle = IRestorePref("Memo Style", 0)
    Select Case iMemoStyle
        Case wzPROFESSIONAL
            formWizard.optProfessional.Value = True
            formWizard.shpShadowProfessional.Visible = True
        Case wzCONTEMPORARY
            formWizard.optContemporary.Value = True
            formWizard.shpShadowContemporary.Visible = True
        Case wzELEGANT
            formWizard.optElegant.Value = True
            formWizard.shpShadowElegant.Visible = True
        Case Else
            iMemoStyle = wzPROFESSIONAL
            formWizard.optProfessional.Value = True
            formWizard.shpShadowProfessional.Visible = True
    End Select

    fCheckValidity = False
    fStylesCopied = False
    fInitializingForm = False
    System.Cursor = wdCursorNormal
    fSettingsRestored = True
    StatusBar = ""
    Application.ScreenUpdating = True
    Exit Sub
    
FatalError:
    ReportError Err
End Sub  ' RestoreDialogValues


' fDummy prevents sub from appearing in Word Tools/Macro list
Public Sub CreateNewDoc(fDummy As Boolean)
    Dim objRangeBuffer As Range
    Dim strWizDate As String
    Dim strMemoTitle As String
    Dim strBtmPgText As String
    Dim strTypistText As String
    Dim strRtChar As String
    Dim i As Integer
     
    On Error GoTo FatalError
    Application.ScreenUpdating = False

    StatusBar = strCREATING_DOC
    System.Cursor = wdCursorWait
    
    ' Setup For PrePrinted Margins
    If fOwnForm Then  'sOwnFormSpace set in txtOwnFormSpace_AfterUpdate() in pts
        Select Case iOwnFormOrientation
            Case wzTOP  'top
                ActiveDocument.PageSetup.TopMargin = sOwnFormSpace
            Case wzLEFT 'left
                ActiveDocument.PageSetup.LeftMargin = sOwnFormSpace
            Case wzRIGHT 'right
                ActiveDocument.PageSetup.RightMargin = sOwnFormSpace
            Case Else
                iOwnFormOrientation = wzTOP
                ActiveDocument.PageSetup.TopMargin = sOwnFormSpace
        End Select
    End If
    

    ' Separate Distribution Page
    If fDistributionPage Then
        ' Distribution Heading
        objActiveRange.InsertAfter strDISTRIBUTION & vbCr
        objActiveRange.Style = wdStyleHeading1
        objActiveRange.Collapse wdCollapseEnd
        
        ' To
        objActiveRange.Style = wdStyleMessageHeader
        objActiveRange.InsertAfter strTO & vbTab
        Set objRangeBuffer = objActiveRange.Duplicate
        objActiveRange.Collapse wdCollapseEnd

        If formWizard.txtMemoTo.TextLength Then
            objActiveRange.InsertAfter formWizard.txtMemoTo.Text & vbCr
        Else
            InsertMacroButton strNAMES, objActiveRange
            objActiveRange.InsertParagraphAfter
        End If
        objRangeBuffer.Bold = True
        objActiveRange.Collapse wdCollapseEnd
        
        ' CC
        objActiveRange.InsertAfter strCC & vbTab
        Set objRangeBuffer = objActiveRange.Duplicate
        objActiveRange.Collapse wdCollapseEnd
        
        If formWizard.txtMemoCc.TextLength Then
            objActiveRange.InsertAfter formWizard.txtMemoCc.Text & vbCr
        Else
            InsertMacroButton strNAMES, objActiveRange
            objActiveRange.InsertParagraphAfter
        End If
        objRangeBuffer.Bold = True
        objActiveRange.Collapse wdCollapseEnd
        
        ' Finish off bottom of distribution page
        objActiveRange.Style = wdStyleNormal
        objActiveRange.InsertParagraphAfter
        objActiveRange.InsertParagraphAfter
        objActiveRange.InsertBreak wdSectionBreakNextPage
        objActiveRange.Collapse wdCollapseEnd
    End If
    
    ' Start of Memo Page 1
    ' Memo Heading
    strMemoTitle = ""
    If Not fOwnForm Then
        strMemoTitle = formWizard.txtTitle.Text & vbCr
        
        If iMemoStyle = wzCONTEMPORARY Then
            strMemoTitle = LCase$(strMemoTitle)
            InsertATEntry (True)
        End If
        objActiveRange.InsertAfter strMemoTitle
        objActiveRange.Style = strSTY_DOC_LABEL
        ActiveDocument.Bookmarks.Add strBKMK_TITLE, objActiveRange
        objActiveRange.Collapse wdCollapseEnd
    End If

    ' First Paragraph needs "first" style
    objActiveRange.Style = strSTY_MSG_HDR_FRST
    
    ' Date
    If formWizard.chkHeadingDate.Value Then
        objActiveRange.InsertAfter strDATE & vbTab
        Set objRangeBuffer = objActiveRange.Duplicate
        objActiveRange.Collapse wdCollapseEnd
        objActiveRange.InsertAfter formWizard.txtHeadingDate.Text & vbCr
        objActiveRange.Collapse wdCollapseEnd
        objRangeBuffer.Style = strSTY_MSG_HDR_LBL
        objActiveRange.Style = wdStyleMessageHeader
    End If
    
    ' To
    If formWizard.chkMemoTo.Value Then
        objActiveRange.InsertAfter strTO & vbTab
        Set objRangeBuffer = objActiveRange.Duplicate
        objActiveRange.Collapse wdCollapseEnd
        If fDistributionPage Then
            objActiveRange.InsertAfter strLIST & vbCr
        ElseIf formWizard.txtMemoTo.Text = "" Then
            InsertMacroButton strNAMES, objActiveRange
            objActiveRange.InsertParagraphAfter
        Else
            objActiveRange.InsertAfter formWizard.txtMemoTo.Text & vbCr
        End If
        objActiveRange.Collapse wdCollapseEnd
        objRangeBuffer.Style = strSTY_MSG_HDR_LBL
        objActiveRange.Style = wdStyleMessageHeader
    End If
    
    ' CC
    If formWizard.chkMemoCc.Value Then
        objActiveRange.InsertAfter strCC & vbTab
        Set objRangeBuffer = objActiveRange.Duplicate
        objActiveRange.Collapse wdCollapseEnd
        If fDistributionPage Then
            objActiveRange.InsertAfter strLIST & vbCr
        ElseIf formWizard.txtMemoCc.Text = "" Then
            InsertMacroButton strNAMES, objActiveRange
            objActiveRange.InsertParagraphAfter
        Else
            objActiveRange.InsertAfter formWizard.txtMemoCc.Text & vbCr
        End If
        objActiveRange.Collapse wdCollapseEnd
        objRangeBuffer.Style = strSTY_MSG_HDR_LBL
        objActiveRange.Style = wdStyleMessageHeader
    End If
    
    ' From
    If formWizard.chkHeadingFrom.Value Then
        objActiveRange.InsertAfter strFROM & vbTab
        Set objRangeBuffer = objActiveRange.Duplicate
        objActiveRange.Collapse wdCollapseEnd
        objActiveRange.InsertAfter formWizard.txtHeadingFrom.Text & vbCr
        objActiveRange.Collapse wdCollapseEnd
        objRangeBuffer.Style = strSTY_MSG_HDR_LBL
        objActiveRange.Style = wdStyleMessageHeader
    End If

    ' Subject
    If formWizard.chkHeadingSubject.Value Then
        objActiveRange.InsertAfter strSUBJECT_COLON & vbTab
        Set objRangeBuffer = objActiveRange.Duplicate
        objActiveRange.Collapse wdCollapseEnd
        
        If formWizard.txtHeadingSubject.Text = "" Then
            InsertMacroButton strSUBJECT, objActiveRange
            objActiveRange.InsertParagraphAfter
        Else
            objActiveRange.InsertAfter formWizard.txtHeadingSubject.Text & vbCr
        End If
        objActiveRange.Collapse wdCollapseEnd
        objRangeBuffer.Style = strSTY_MSG_HDR_LBL
        objActiveRange.Style = wdStyleMessageHeader
    End If

    ' Priority
    If formWizard.chkHeadingPriority.Value Then
        objActiveRange.InsertAfter strPRIORITY & vbTab
        Set objRangeBuffer = objActiveRange.Duplicate
        objActiveRange.Collapse wdCollapseEnd
        InsertMacroButton strURGENT, objActiveRange
        objActiveRange.Style = wdStyleMessageHeader
        objActiveRange.InsertParagraphAfter
        objActiveRange.Collapse wdCollapseEnd
        objRangeBuffer.Style = strSTY_MSG_HDR_LBL
        
    End If
    
    ' Now set previous Paragraph to "Last" style
    objActiveRange.Start = objActiveRange.End - 1 'select the paragraph mark
    objActiveRange.Style = strSTY_MSG_HDR_LST
    objActiveRange.Collapse wdCollapseEnd
    ' Bottom of Page 1

    InsertMacroButton strTYPE_HERE, objActiveRange
    objActiveRange.InsertAfter vbCr & vbCr
    objActiveRange.Style = wdStyleBodyText
    objActiveRange.Collapse wdCollapseEnd
    
    ' Finish bottom of page:
    strBtmPgText = formWizard.txtClosingWriter.Text
    strTypistText = formWizard.txtClosingTypist.Text
    If Len(strBtmPgText) Then
        If Len(strTypistText) Then
            strBtmPgText = strBtmPgText & "/"
        Else
            strBtmPgText = strBtmPgText & vbCr
        End If
    End If
    If Len(strTypistText) Then strBtmPgText = strBtmPgText & strTypistText
    If formWizard.chkClosingEnclosure.Value Then strBtmPgText = strBtmPgText & vbCr & strENC & formWizard.txtClosingEnclosure.Text
    If formWizard.chkClosingAttachment.Value Then strBtmPgText = strBtmPgText & vbCr & strATTACHMENTS

    objActiveRange.InsertAfter strBtmPgText
    AddHeaderFooter
    
    ' Final Touches
    With ActiveDocument
        .UndoClear
        .SpellingChecked = True
        .GrammarChecked = True
    ' Save iMemoStyle as document variable
        .Variables.Add "iMemoStyle", CStr(iMemoStyle)
    End With
    
    i = Len(strMemoTitle)
    strRtChar = Right$(strMemoTitle, 1)
    While ((strRtChar = vbCr) Or (strRtChar = vbLf)) And (i)
        i = i - 1
        strRtChar = Mid$(strMemoTitle, i, 1)
    Wend

    If (i > 0) Then
        If (i > 255) Then i = 255
        strMemoTitle = Left$(strMemoTitle, i)
    Else
        strMemoTitle = ""
    End If

    If Len(strMemoTitle) Then
        WordBasic.FileSummaryInfo Title:=strMemoTitle, Subject:=formWizard.txtHeadingSubject.Text
    Else
        WordBasic.FileSummaryInfo Subject:=formWizard.txtHeadingSubject.Text
    End If

    ' Window Caption
    strWizDate = formWizard.txtHeadingDate.Text
    If Len(strWizDate) = 0 Then strWizDate = Str(Date)
    strMemoTitle = formWizard.txtHeaderTopic.Text
    If Len(strMemoTitle) = 0 Then strMemoTitle = strWizShortName
    ActiveWindow.Caption = ActiveWindow.Caption & " - " & strMemoTitle & ", " & strWizDate

    Selection.HomeKey wdStory

    Exit Sub

FatalError:
    Application.ScreenUpdating = True
    ReportError Err
End Sub ' CreateNewDoc


'inserts a MacroButton field at the given range and updates the range to be at the end
'of the inserted field. Updates the field for display of the result.
Private Sub InsertMacroButton(strText As String, objRng As Range)
    Dim objFld As Field
    
    'insert the field
    Set objFld = objRng.Fields.Add(objRng, wdFieldMacroButton, strEMPTY_MACRO & "[" & strText & "]", False)
    
    Set objRng = objFld.Result
    With objRng
        .Collapse wdCollapseEnd
        .End = .End + 1
        .Start = .End
    End With
End Sub


Private Sub AddHeaderFooter()
    Dim strHeadFootDate As String
    Dim objFooter As HeaderFooter
    Dim objHeader As HeaderFooter
    Dim objFootRng As Range
    Dim objHeadRng As Range
    Dim objSection As Section
    
    Set objSection = ActiveDocument.Sections(1)
    
    Set objFooter = objSection.Footers(wdHeaderFooterPrimary)
    Set objFootRng = objFooter.Range
    Set objHeader = objSection.Headers(wdHeaderFooterPrimary)
    Set objHeadRng = objHeader.Range
    objSection.PageSetup.DifferentFirstPageHeaderFooter = True
    
    ' Get user specified date, or current date
    If formWizard.chkHeaderDate.Value Or formWizard.chkFooterDate.Value Then
        If formWizard.chkHeadingDate.Value Then
            strHeadFootDate = formWizard.txtHeadingDate.Text
        Else
            strHeadFootDate = Str(Date)
        End If
    End If
    
    ' Header
    If formWizard.chkHeaderDate.Value Then
        If formWizard.chkHeaderTopic.Value Then
            If formWizard.chkHeaderPageNumber.Value Then
                'Date, Title, Page
                objHeadRng.InsertAfter strHeadFootDate & vbTab & formWizard.txtHeaderTopic.Text & vbTab
                objHeadRng.Collapse wdCollapseEnd
                objHeadRng.Fields.Add objHeadRng, wdFieldPage
            Else
                'Date, Title
                objHeadRng.InsertAfter strHeadFootDate & vbTab & vbTab & formWizard.txtHeaderTopic.Text
            End If
        ElseIf formWizard.chkHeaderPageNumber.Value Then
            'Date, Page
            objHeadRng.InsertAfter strHeadFootDate & vbTab & vbTab
            objHeadRng.Collapse wdCollapseEnd
            objHeadRng.Fields.Add objHeadRng, wdFieldPage
        Else
            'Date
            objHeadRng.InsertAfter strHeadFootDate
        End If
    ElseIf formWizard.chkHeaderTopic.Value Then
        If formWizard.chkHeaderPageNumber.Value Then
            'Title, Page
            objHeadRng.InsertAfter formWizard.txtHeaderTopic.Text & vbTab & vbTab
            objHeadRng.Collapse wdCollapseEnd
            objHeadRng.Fields.Add objHeadRng, wdFieldPage
        Else
            'Title
            objHeadRng.InsertAfter formWizard.txtHeaderTopic.Text
        End If
    ElseIf formWizard.chkHeaderPageNumber.Value Then
        'Page
        objHeadRng.Fields.Add objHeadRng, wdFieldPage
    End If
    objSection.Headers(wdHeaderFooterFirstPage).Range.Text = ""

    ' Footer

    If formWizard.chkFooterDate.Value Then
        If formWizard.chkFooterConfidential.Value Then
            If formWizard.chkFooterPageNumber.Value Then
                'Date, Confidential, Page
                objFootRng.InsertAfter strHeadFootDate & vbTab & strCONFIDENTIAL & vbTab
                objFootRng.Collapse wdCollapseEnd
                objFootRng.Fields.Add objFootRng, wdFieldPage
            Else
                'Date, Confidential
                objFootRng.InsertAfter strHeadFootDate & vbTab & vbTab & strCONFIDENTIAL
            End If
        ElseIf formWizard.chkFooterPageNumber.Value Then
            'Date, Page
            objFootRng.InsertAfter strHeadFootDate & vbTab & vbTab
            objFootRng.Collapse wdCollapseEnd
            objFootRng.Fields.Add objFootRng, wdFieldPage
        Else
            'Date
            objFootRng.InsertAfter strHeadFootDate
        End If
    ElseIf formWizard.chkFooterConfidential.Value Then
        If formWizard.chkFooterPageNumber.Value Then
            'Confidential, Page
            objFootRng.InsertAfter strCONFIDENTIAL & vbTab & vbTab
            objFootRng.Collapse wdCollapseEnd
            objFootRng.Fields.Add objFootRng, wdFieldPage
        Else
            'Confidential
            objFootRng.InsertAfter strCONFIDENTIAL
        End If
    ElseIf formWizard.chkFooterPageNumber.Value Then
        'Page
        objFootRng.Fields.Add objFootRng, wdFieldPage
    End If
    With objHeader.Range
        .SpellingChecked = True
        .GrammarChecked = True
    End With
    With objFooter.Range
        .SpellingChecked = True
        .GrammarChecked = True
    End With
    objSection.Footers(wdHeaderFooterFirstPage).Range.FormattedText = objFooter.Range.FormattedText
End Sub


Public Function FApplyMemoStyle(iMemoStyle As Integer) As Boolean
    Dim strStyleName As String
    Dim strLongName As String
    
    ' Let user know we're busy
    StatusBar = strAPPLYING
    
    ' Attempt to locate longname, otherwise use shortname
StartOfSearch:
    strStyleName = strTemplatePath & rgstrTemplateFileNames(iMemoStyle, iLONG_NAME)
    strLongName = strStyleName
    If Dir(strStyleName) = "" Then strStyleName = strTemplatePath & rgstrTemplateFileNames(iMemoStyle, iSHORT_NAME)

    ' Get Template Styles
    On Error GoTo TemplateNotFound
    ActiveDocument.CopyStylesFromTemplate (strStyleName)

    StatusBar = ""
    fStylesCopied = True
    FApplyMemoStyle = True
    Exit Function
    
TemplateNotFound:
    StatusBar = ""
    DisplayErrorMsg strERR_STYLE_NOT_FOUND & strLongName & strERR_STYLE_NOT_FOUND2
    fStylesCopied = False
    FApplyMemoStyle = False

End Function

Public Sub InitCallBack(fDummy As Boolean)
    Dim i As Integer
    Dim objCallBackLabels As BalloonLabels

    On Error GoTo ErrorCallBack
    
    If Not (fBlnInitialized) Then
    
        Set objPostWizBln = Assistant.NewBalloon
        fBlnInitialized = True
        With objPostWizBln
            .Heading = strCALL_BACK_HEADING
            .Mode = msoModeModeless
            .Button = msoButtonSetCancel
            .BalloonType = msoBalloonTypeButtons
            .Callback = "Memo.fnCallBack"
        End With
    
        Set objCallBackLabels = objPostWizBln.Labels
        objCallBackLabels.Count = iCALL_BACK_COUNT
        For i = 1 To iCALL_BACK_COUNT
            objCallBackLabels.Item(i).Text = rgstrCallBackMsg(i - 1)
        Next i
    End If
    
    objPostWizBln.Show

    If (Assistant.BalloonError) Then GoTo ErrorCallBack
    
    fPostWizBlnOpen = True
    Set objDocBln = ActiveDocument
    Set clsBln.app = Application
    ActiveDocument.Variables.Add strPOST_WIZ_BLN, "1"
    
    Exit Sub
    
ErrorCallBack:
    DisplayErrorMsg strERR_INIT_CALL_BACK
    If (Not (formWizard Is Nothing)) Then
        Unload formWizard
        Set formWizard = Nothing
    End If
    fPostWizBlnOpen = False
    Set objDocBln = ActiveDocument
    Set clsBln.app = Application
    ActiveDocument.Variables.Add strPOST_WIZ_BLN, "0"
End Sub

Public Function fnCallBack(objBln As Balloon, iBtn As Integer, lPrivate As Long)
    Dim objView As View
    Dim objTmpDoc As Document
    On Error GoTo ErrorCallBack
    
    Select Case iBtn
        Case Is < 1 'Exit
            objBln.Close
            fPostWizBlnOpen = False
            ActiveDocument.Variables(strPOST_WIZ_BLN).Value = "0"
            RestoreAssistant (True)
            If (Not (formWizard Is Nothing)) Then
                Unload formWizard
                Set formWizard = Nothing
            End If
        Case 1: 'Change Header/Footer...
            Set objView = ActiveWindow.View
            objView.Type = wdPageView
            objView.SeekView = wdSeekCurrentPageHeader
        Case 2: 'Change Memo Style...
            objBln.Close
            fPostWizBlnOpen = False
            iMemoStyle = Val(ActiveDocument.Variables("iMemoStyle").Value)
            iSavedStyle = iMemoStyle
            If (FReenterWizardPanel(wzPAGE_STYLE)) Then formWizard.Show
            objBln.Show
            fPostWizBlnOpen = True
        Case 3: 'Send the memo to someone
            Set formSend = New formMailFax
            With formSend
                .Caption = strMAIL_CAPTION
                .lblPrompt.Caption = strMAIL_PROMPT
            End With
            Set objTmpDoc = ActiveDocument
            objBln.Close
            fPostWizBlnOpen = False
            formSend.Show
            Set formSend = Nothing
            'if we are back in the same doc. due to some error
            'then Changedoc event won't get fired
            If (objTmpDoc = ActiveDocument) And (Not (fPostWizBlnOpen)) Then
                objBln.Show
                fPostWizBlnOpen = True
            End If
        Case 4: 'Get help...
            Assistant.Help
    End Select
    Exit Function
    
ErrorCallBack:
    DisplayErrorMsg Err.Discription
End Function


'MEASUREMENT  RELATED  FUNCTIONS
' --------------------------------------------------------------------------------------

'converts user input to lower case before checking with rgstrUnits array.
'Returns false if not a valid unit. Doesn't do a very rigorous check. Just checks for valid units string.
Public Function FChkMeasurement(ByVal strOldMsr As String, strNewMsr As String) As Boolean
    Dim strDecSetting As String
    Dim strTemp As String, strRtChr As String
    Dim iPos As Integer, i As Integer
    Dim fFoundNum As Boolean
    Dim strVal As String, strUnitsInMsr As String

    On Error GoTo LReturnFalse
    fFoundNum = False

    strDecSetting = Application.International(wdDecimalSeparator)
    strTemp = RTrim$(LTrim$(strOldMsr))
    iPos = Len(strTemp)
    If iPos = 0 Then GoTo LReturnFalse

    strRtChr = Right$(strTemp, 1)
    If IsNumeric(strRtChr) Then
        fFoundNum = True
    Else
        iPos = iPos - 1
    End If
    'scan from right to left till you hit a separator
    While Not (fFoundNum) And iPos > 0
        strRtChr = Mid$(strTemp, iPos, 1)
        If IsNumeric(strRtChr) Or strRtChr = strDecSetting Or strRtChr = strSPACE Then
            fFoundNum = True
        Else
            iPos = iPos - 1
        End If
    Wend
    
    If iPos = 0 Then GoTo LReturnFalse
    strVal = LTrim$(Str$(Val(strTemp)))
    If iPos = Len(strTemp) Then
        'no units present. append default units
        strNewMsr = strVal & rgstrUnits(iDefaultUnit)
        FChkMeasurement = True
        Exit Function
    Else
        strUnitsInMsr = LTrim$(Mid$(strTemp, iPos + 1))
        'convert to lower case
        strUnitsInMsr = LCase$(strUnitsInMsr)
        'chk if it is a valid units string. valid units strings stored in rgstrUnits
        For i = 0 To iUNITS_STRINGS - 1
            If strUnitsInMsr = rgstrUnits(i) Then
                strNewMsr = strVal & strUnitsInMsr
                FChkMeasurement = True
                Exit Function
            End If
        Next i
    End If

LReturnFalse:
    FChkMeasurement = False

End Function 'FChkMeasurement


'assumes validity of string that is passed has been checked
'In case of error returns -1, else returns value of measurement in pts.
Public Function SPtsFromTxtMsrment(strMsr As String) As Single
    On Error GoTo LReturnError
    Dim i As Integer
    Dim sVal As Single
    Dim strUnits As String, strVal As String
    Dim iPos As Integer

    strMsr = LTrim$(RTrim$(strMsr))
    sVal = Val(strMsr)
    If sVal = 0 Then
        SPtsFromTxtMsrment = 0
        Exit Function
    End If
    
    strVal = LTrim$(RTrim$(CStr(sVal)))
    iPos = InStr(strMsr, strVal)
    strUnits = LTrim$(Mid$(strMsr, iPos + Len(strVal)))
    For i = 0 To iUNITS_STRINGS - 1
        If strUnits = rgstrUnits(i) Then
            SPtsFromTxtMsrment = sVal * rgsConversionRatio(i)
            Exit Function
        End If
    Next i

LReturnError:
    SPtsFromTxtMsrment = -1
End Function


'converts points measurement to the default unit measurement
Public Function SDefaultMsrmentFromPts(sMeasurement As Single) As Single
    SDefaultMsrmentFromPts = sMeasurement / rgsConversionRatio(iDefaultUnit)
End Function


'converts points measurement to the default unit measurement
Public Function StrDefaultMsrmentFromPts(sMeasurement As Single) As String
    Dim sVal As Single
    
    sVal = sMeasurement / rgsConversionRatio(iDefaultUnit)
    If (rgiRndOffDigits(iDefaultUnit)) Then
        StrDefaultMsrmentFromPts = Format$(sVal, "0.0") & rgstrUnits(iDefaultUnit)
    Else
        StrDefaultMsrmentFromPts = Format$(sVal, "0") & rgstrUnits(iDefaultUnit)
    End If
    
End Function


'Measurement functions
Public Function SRound(sVal As Single, i As Integer) As Single
    Dim iMul As Long, j As Integer
    Dim sMulVal As Single
    Dim iMulVal As Long
    Dim sFraction As Single
    
    iMul = 1
    For j = 1 To i
        iMul = iMul * 10
    Next j
    sMulVal = sVal * iMul
    iMulVal = Int(sMulVal)
    
    sFraction = sMulVal - iMulVal
    If sFraction < 0.5 Then
        SRound = iMulVal / iMul
    Else
        SRound = (iMulVal + 1) / iMul
    End If
    
End Function


Public Function StrSubstituteText(strText As String, strTarget As String, strReplace As String) As String
    Dim strResult As String
    Dim iPos As Integer, iTargetLength As Integer, iReplaceLength As Integer
    
    ' Init
    strResult = strText
    iTargetLength = Len(strTarget)
    iReplaceLength = Len(strReplace)
    
    ' Test for do nothing cases
    If Len(strText) = 0 Or iTargetLength = 0 Then GoTo LEnd
    
    iPos = InStr(1, strResult, strTarget)
    
    While (iPos) 'presence of strTarget
        strResult = Left$(strResult, iPos - 1) & strReplace & Mid$(strResult, iPos + iTargetLength)
        iPos = iPos + iReplaceLength
        iPos = InStr(iPos, strResult, strTarget)
    Wend
        

LEnd:
    StrSubstituteText = strResult

End Function

Public Sub InsertATEntry(fDummy As Boolean)
    On Error Resume Next
    Set objActiveRange = objWizTemplate.AutoTextEntries(strCONTEMP_AUTOTEXT).Insert(objActiveRange, True)
    objActiveRange.Collapse wdCollapseEnd
    Err.Clear
End Sub
' End Memo Wizard Module
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Document_Close()
On Error GoTo Close_error
    If ActiveDocument.Variables(strPOST_WIZ_BLN).Value = "1" Then
        If fPostWizBlnOpen Then
            objPostWizBln.Close
            fPostWizBlnOpen = False
        End If
    End If
    
Close_error:
    Err.Clear
End Sub
Private Sub Document_New()
    Common.StartWizard
End Sub
Attribute VB_Name = "formMailFax"
Attribute VB_Base = "0{1D22A72C-4FDD-11D0-B5E8-00AA00BBB76C}{1D22A71F-4FDD-11D0-B5E8-00AA00BBB76C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False







' Word Wizard / Selection of Email Target
Option Explicit

Private Sub cmdCancel_Click()
    ' Close Form
    formSend.Hide
End Sub

Private Sub cmdOK_Click()
    Dim fAttachMailState As Boolean
    Dim strErrMsg As String
    
    strErrMsg = ""
    formSend.Hide
    If optEmail.Value Then
        On Error GoTo ErrEMail
        ' Get current state
        fAttachMailState = Options.SendMailAttach
        ' Force state to True
        Options.SendMailAttach = True
        ' Send Mail
        ActiveDocument.SendMail
        ' Restore state
        Options.SendMailAttach = fAttachMailState
    Else
        On Error GoTo ErrFax
        ' Send Fax
        Application.SendFax
    End If
    
CloseForm:
    Exit Sub
    
ErrEMail:
    If Err.Number Then strErrMsg = vbCr & Err.Description
    DisplayErrorMsg strERR_SEND_MAIL & strErrMsg
    GoTo CloseForm
    
ErrFax:
    If Err.Number Then strErrMsg = vbCr & Err.Description
    DisplayErrorMsg strERR_SEND_FAX & strErrMsg
    GoTo CloseForm
End Sub

' End MailFax Form Code Module

Attribute VB_Name = "formWizDlg"
Attribute VB_Base = "0{1D22A730-4FDD-11D0-B5E8-00AA00BBB76C}{1D22A717-4FDD-11D0-B5E8-00AA00BBB76C}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

' Memo Wizard Form

Option Explicit

' Flowchart Controls
Private Sub lblMap0_Click()
    JumpToPanel (0)
End Sub

Private Sub lblMap1_Click()
    JumpToPanel (1)
End Sub

Private Sub lblMap2_Click()
    JumpToPanel (2)
End Sub

Private Sub lblMap3_Click()
    JumpToPanel (3)
End Sub

Private Sub lblMap4_Click()
    JumpToPanel (4)
End Sub

Private Sub lblMap5_Click()
    JumpToPanel (5)
End Sub

Private Sub lblMap6_Click()
    JumpToPanel (6)
End Sub

Private Sub lblMap7_Click()
    JumpToPanel (7)
End Sub

Private Sub shpMap0_Click()
    JumpToPanel (0)
End Sub

Private Sub shpMap1_Click()
    JumpToPanel (1)
End Sub

Private Sub shpMap2_Click()
    JumpToPanel (2)
End Sub

Private Sub shpMap3_Click()
    JumpToPanel (3)
End Sub

Private Sub shpMap4_Click()
    JumpToPanel (4)
End Sub

Private Sub shpMap5_Click()
    JumpToPanel (5)
End Sub

Private Sub shpMap6_Click()
    JumpToPanel (6)
End Sub

Private Sub shpMap7_Click()
    JumpToPanel (7)
End Sub


' Navigator Controls
Private Sub tglAssistant_Click()
    If lAssistantId = 0 Then Exit Sub 'tglAssistant should be disabled. extra safety

    If fExitTglEvent Then
        fExitTglEvent = False
        Exit Sub
    End If

    If (iLocalState = msoWizardActInactive) Then
        'we want the button to be pressed only when user chooses
        'Help with this wizard option.
        If tglAssistant.Value Then
            fExitTglEvent = True
            tglAssistant.Value = False
        End If
        Assistant.ActivateWizard lAssistantId, msoWizardActActive
    ElseIf (iLocalState = msoWizardActActive) Then
        Assistant.ActivateWizard lAssistantId, msoWizardActInactive
    End If
    
End Sub

Private Sub cmdBack_Click()
    If iCurrentPanel > wzPAGE_START Then JumpToPanel (iCurrentPanel - 1)
End Sub

Private Sub cmdNext_Click()
    If iCurrentPanel < wzPAGE_FINISH Then JumpToPanel (iCurrentPanel + 1)
End Sub

Private Sub cmdCancel_Click()
    iMemoStyle = iSavedStyle
    Err.Clear
    ReportError Err
End Sub

Private Sub cmdFinish_Click()
    Application.ScreenUpdating = False
    ' Check for Cr/Lf
    If fCheckTo Then CleanUpTo
    If fCheckCc Then CleanUpCc

    ' if settings has not been restored, then nothing would have changed
    If Not (fSettingsRestored) Then
        RestoreDialogValues (True)
        'could have changed Assistant though
        System.PrivateProfileString("", strREG_SETTINGS_BASE_KEY, strREG_ASSISTANT_TIME_STAMP) = Format$(Now, "General Date")
        StoreValPref strREG_ASSISTANT_HELP, iLocalState
    Else
        If Not (fSettingsSaved) Then SaveDialogValues (True)
    End If
    
    If Not (fStylesCopied) Then
        If Not (FApplyMemoStyle(iMemoStyle)) Then
            fSettingsSaved = False
            Application.ScreenUpdating = True
            JumpToPanel wzPAGE_STYLE
            Exit Sub
        End If
    End If
    
    If fBalloonVisible Then
        objAssistantBalloon.Close
        fBalloonVisible = False
    End If
    
    CreateNewDoc (True)
    
    ' Hide Wizard and close assistant
    formWizard.Hide
    If lAssistantId Then
        Assistant.EndWizard lAssistantId, True
        InitCallBack (True)
    End If
End Sub

Private Sub cmdOK_Click()
    On Error GoTo ErrOk
    
    System.Cursor = wdCursorWait
    Application.ScreenUpdating = False

    ' Which style was selected?
    If FApplyMemoStyle(iMemoStyle) Then
        ' Save updated style selection to registry
        StoreValPref "Memo Style", iMemoStyle
        
        ' Update document variable
        ActiveDocument.Variables("iMemoStyle").Value = CStr(iMemoStyle)
        
        ' Format Memo Title
        If Not fOwnForm Then
            'goto bookmark
            ActiveDocument.Bookmarks(strBKMK_TITLE).Select
            'apply case
            Select Case iMemoStyle
                Case wzPROFESSIONAL
                    Selection.Range.Case = wdTitleWord
                Case wzCONTEMPORARY
                    Selection.Range.Case = wdLowerCase
                    Set objActiveRange = ActiveDocument.Content
                    objActiveRange.Collapse wdCollapseStart
                    InsertATEntry (True)
            End Select
        End If
        Selection.HomeKey wdStory
    End If
    
ErrOk:
    System.Cursor = wdCursorNormal
    Application.ScreenUpdating = True

    ' Done with wizard panel
    formWizard.Hide
End Sub

Private Sub cmdCancelReVisit_Click()
    formWizard.Hide
End Sub


' Page 1
Private Sub optIncludeTitleYes_Click()
    If fInitializingForm Then Exit Sub
    fOwnForm = False
    ' Restore Title
    frmOwnForm.Visible = False
    txtTitle.Text = strTitle
    ' Set new focus
    SelectTextBox txtTitle
    UpdateHeaderTopic
End Sub

Private Sub txtOwnFormSpace_Change()
    fCheckValidity = True
End Sub

Private Sub txtTitle_AfterUpdate()
    If fInitializingForm Then Exit Sub
    UpdateHeaderTopic
End Sub

Private Sub txtTitle_Change()
    If fInitializingForm Then Exit Sub
    If txtTitle.TextLength Then
        optIncludeTitleYes.Value = True
        frmOwnForm.Visible = False
    End If
End Sub

Private Sub optIncludeTitleNo_Click()
    If fInitializingForm Then Exit Sub
    fOwnForm = True
    ' Save Title
    strTitle = txtTitle.Text
    txtTitle.Text = ""
    UpdateHeaderTopic
    ' Set new focus
    frmOwnForm.Visible = True
    Select Case iOwnFormOrientation
        Case wzTOP
            optOwnFormTop.SetFocus
        Case wzLEFT
            optOwnFormLeft.SetFocus
        Case wzRIGHT
            optOwnFormRight.SetFocus
        Case Else
            iOwnFormOrientation = wzTOP
            optOwnFormTop.SetFocus
    End Select
End Sub

Private Sub optOwnFormTop_Click()
    iOwnFormOrientation = wzTOP
End Sub

Private Sub optOwnFormLeft_Click()
    iOwnFormOrientation = wzLEFT
End Sub

Private Sub optOwnFormRight_Click()
    iOwnFormOrientation = wzRIGHT
End Sub

Private Sub txtOwnFormSpace_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If (FInvalidSpace) Then Cancel = True
End Sub

Private Sub spnOwnFormSpace_SpinDown()
    Dim sNewVal As Single
    Dim sNewPtsVal As Single, strTxt As String
    
    sNewVal = SRound(SDefaultMsrmentFromPts(sOwnFormSpace), rgiRndOffDigits(iDefaultUnit)) - rgsUnitIncrements(iDefaultUnit)
     ' Convert back to points
    sNewPtsVal = sNewVal * rgsConversionRatio(iDefaultUnit)

    ' Update control and global var
    If sNewPtsVal >= 0 Then
        sOwnFormSpace = sNewPtsVal
        If (rgiRndOffDigits(iDefaultUnit)) Then
            strTxt = Format$(sNewVal, "0.0")
        Else
            strTxt = Format$(sNewVal, "0")
        End If
        
        txtOwnFormSpace.Text = strTxt & rgstrUnits(iDefaultUnit)
    End If
    
    fCheckValidity = False
End Sub

Private Sub spnOwnFormSpace_SpinUp()
    Dim sNewVal As Single
    Dim sNewPtsVal As Single, strTxt As String
    
    sNewVal = SRound(SDefaultMsrmentFromPts(sOwnFormSpace), rgiRndOffDigits(iDefaultUnit)) + rgsUnitIncrements(iDefaultUnit)
     ' Convert back to points
    sNewPtsVal = sNewVal * rgsConversionRatio(iDefaultUnit)

    ' Update control and global var
    If sNewPtsVal < sMAX_OWN_FORM_SPACE Then
        sOwnFormSpace = sNewPtsVal
        If (rgiRndOffDigits(iDefaultUnit)) Then
            strTxt = Format$(sNewVal, "0.0")
        Else
            strTxt = Format$(sNewVal, "0")
        End If
        
        txtOwnFormSpace.Text = strTxt & rgstrUnits(iDefaultUnit)
    End If
    fCheckValidity = False
End Sub


' Page 2
Private Sub txtHeadingDate_Change()
    If txtHeadingDate.TextLength Then chkHeadingDate.Value = True
End Sub

Private Sub chkHeadingDate_AfterUpdate()
    If fInitializingForm Then Exit Sub
    If chkHeadingDate.Value Then
        ' Restore previous value
        txtHeadingDate.Text = strHeadingDate
        SelectTextBox txtHeadingDate
    Else
        ' Save value and clear
        strHeadingDate = txtHeadingDate.Text
        txtHeadingDate.Text = ""
    End If
End Sub

Private Sub txtHeadingFrom_Change()
    If txtHeadingFrom.TextLength Then chkHeadingFrom.Value = True
End Sub

Private Sub chkHeadingFrom_AfterUpdate()
    If fInitializingForm Then Exit Sub
    If chkHeadingFrom.Value Then
        ' Restore previous value
        txtHeadingFrom.Text = strHeadingFrom
        SelectTextBox txtHeadingFrom
    Else
        ' Save value and clear
        strHeadingFrom = txtHeadingFrom.Text
        txtHeadingFrom.Text = ""
    End If
End Sub

Private Sub txtHeadingSubject_AfterUpdate()
    If fInitializingForm Then Exit Sub
    UpdateHeaderTopic
End Sub

Private Sub txtHeadingSubject_Change()
    If txtHeadingSubject.TextLength Then chkHeadingSubject.Value = True
End Sub

Private Sub chkHeadingSubject_AfterUpdate()
    If fInitializingForm Then Exit Sub
    If chkHeadingSubject.Value Then
        ' Restore previous value
        txtHeadingSubject.Text = strHeadingSubject
        SelectTextBox txtHeadingSubject
    Else
        ' Save value and clear
        strHeadingSubject = txtHeadingSubject.Text
        txtHeadingSubject.Text = ""
    End If
    UpdateHeaderTopic
End Sub


' Page 3
Private Sub cmdAddressBook_Click()
    Dim strAdd As String
    Dim iPtr As Integer
    Dim iEnd As Integer
    Const strADDRESS_DELIMETER = ", "
    Dim strErrMsg As String
    Dim strCcNames As String
    Dim strToNames As String
    Dim strTmpText As String
    Dim strRtChar As String
    
    On Error GoTo AddrBookError
    strErrMsg = strERR_ADDR_BOOK
    
    ' Get To and Cc fields
    strAdd = Application.GetAddress("", "", 0, 1, 2)
    iEnd = Len(strAdd)
    
    ' Location of first Cr separating the To and Cc names
    iPtr = InStr(strAdd, vbCr)
    Select Case iPtr
        Case 0
            ' Nothing selected
            Exit Sub
        Case 1
            ' Only Cc selected
            strToNames = ""
            strCcNames = Mid$(strAdd, 2, iEnd - 2)

        Case Else
            ' To selected
            strToNames = Left$(strAdd, iPtr - 1)
            
            ' Cc also?
            strCcNames = ""
            If Len(strAdd) > iPtr Then strCcNames = Mid$(strAdd, iPtr + 1, iEnd - iPtr - 1)

    End Select
        
    If Len(strToNames) Then
        strTmpText = txtMemoTo.Text
        strRtChar = Right$(strTmpText, 1)
        If (strRtChar = vbCr) Or (strRtChar = vbLf) Or (strRtChar = strADDRESS_DELIMETER) Or (strRtChar = "") Then
            strTmpText = strTmpText & strToNames
        Else
            strTmpText = strTmpText & strADDRESS_DELIMETER & strToNames
        End If
        txtMemoTo.Text = strTmpText
    End If

    If Len(strCcNames) Then
        strTmpText = txtMemoCc.Text
        strRtChar = Right$(strTmpText, 1)
        If (strRtChar = vbCr) Or (strRtChar = vbLf) Or (strRtChar = strADDRESS_DELIMETER) Or (strRtChar = "") Then
            strTmpText = strTmpText & strCcNames
        Else
            strTmpText = strTmpText & strADDRESS_DELIMETER & strCcNames
        End If
        txtMemoCc.Text = strTmpText
    End If

ReturnAddrBk:
    SelectTextBox txtMemoTo
    Exit Sub
    
AddrBookError:
    If Err.Number Then strErrMsg = strErrMsg & vbCr & Err.Description
    DisplayErrorMsg strErrMsg
    GoTo ReturnAddrBk
End Sub

Private Sub txtMemoTo_Change()
    If txtMemoTo.TextLength Then
        chkMemoTo.Value = True
        fCheckTo = True
    End If
End Sub

Private Sub chkMemoTo_AfterUpdate()
    If fInitializingForm Then Exit Sub
    If chkMemoTo.Value Then
        ' Restore previous value
        txtMemoTo.Text = strMemoTo
        SelectTextBox txtMemoTo
    Else
        ' Save value and clear
        strMemoTo = txtMemoTo.Text
        txtMemoTo.Text = ""
    End If
End Sub

Private Sub txtMemoCc_Change()
    If txtMemoCc.TextLength Then
        chkMemoCc.Value = True
        fCheckCc = True
    End If
End Sub

Private Sub chkMemoCc_AfterUpdate()
    If fInitializingForm Then Exit Sub
    If chkMemoCc.Value Then
        ' Restore previous value
        txtMemoCc.Text = strMemoCC
        SelectTextBox txtMemoCc
    Else
        ' Save value and clear
        strMemoCC = txtMemoCc.Text
        txtMemoCc.Text = ""
    End If
End Sub

Private Sub optDistributionYes_Click()
    fDistributionPage = True
End Sub

Private Sub optDistributionNo_Click()
    fDistributionPage = False
End Sub


' Page 4
Private Sub chkClosingWriter_AfterUpdate()
    If fInitializingForm Then Exit Sub
    If chkClosingWriter.Value Then
        ' Restore previous value
        txtClosingWriter.Text = strClosingWriter
        SelectTextBox txtClosingWriter
    Else
        ' Save value and clear
        strClosingWriter = txtClosingWriter.Text
        txtClosingWriter.Text = ""
    End If
End Sub

Private Sub txtClosingWriter_Change()
    If txtClosingWriter.TextLength Then chkClosingWriter.Value = True
End Sub

Private Sub chkClosingTypist_AfterUpdate()
    If fInitializingForm Then Exit Sub
    If chkClosingTypist.Value Then
        ' Restore previous value
        txtClosingTypist.Text = strClosingTypist
        SelectTextBox txtClosingTypist
    Else
        ' Save value and clear
        strClosingTypist = txtClosingTypist.Text
        txtClosingTypist.Text = ""
    End If
End Sub

Private Sub txtClosingTypist_Change()
    If txtClosingTypist.TextLength Then chkClosingTypist.Value = True
End Sub

Private Sub chkClosingEnclosure_AfterUpdate()
    If fInitializingForm Then Exit Sub
    If chkClosingEnclosure.Value Then
        ' Restore previous value
        txtClosingEnclosure.Text = strClosingEnclosure
        SelectTextBox txtClosingEnclosure
    Else
        ' Save value and clear
        strClosingEnclosure = txtClosingEnclosure.Text
        txtClosingEnclosure.Text = ""
    End If
End Sub

Private Sub txtClosingEnclosure_Change()
    If txtClosingEnclosure.TextLength Then chkClosingEnclosure.Value = True
End Sub


' Page 5
Private Sub chkHeaderTopic_AfterUpdate()
    If fInitializingForm Then Exit Sub
    If chkHeaderTopic.Value Then
        ' Restore previous value
        txtHeaderTopic.Text = strHeaderTopic
        SelectTextBox txtHeaderTopic
    Else
        ' Save value and clear
        strHeaderTopic = txtHeaderTopic.Text
        txtHeaderTopic.Text = ""
    End If
End Sub

Private Sub txtHeaderTopic_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    fHeaderTopicEdited = True
End Sub

Private Sub txtHeaderTopic_Change()
    If txtHeaderTopic.TextLength Then chkHeaderTopic.Value = True
End Sub


' Page 1
Private Sub optProfessional_Click()
    If iMemoStyle <> wzPROFESSIONAL Then
        Select Case iMemoStyle
            Case wzCONTEMPORARY
                shpShadowContemporary.Visible = False
            Case wzELEGANT
                shpShadowElegant.Visible = False
        End Select
        shpShadowProfessional.Visible = True
        iMemoStyle = wzPROFESSIONAL
        fStylesCopied = False
    End If
End Sub

Private Sub optContemporary_Click()
    If iMemoStyle <> wzCONTEMPORARY Then
        Select Case iMemoStyle
            Case wzPROFESSIONAL
                shpShadowProfessional.Visible = False
            Case wzELEGANT
                shpShadowElegant.Visible = False
        End Select
        shpShadowContemporary.Visible = True
        iMemoStyle = wzCONTEMPORARY
        fStylesCopied = False
    End If
End Sub

Private Sub optElegant_Click()
    If iMemoStyle <> wzELEGANT Then
        Select Case iMemoStyle
            Case wzPROFESSIONAL
                shpShadowProfessional.Visible = False
            Case wzCONTEMPORARY
                shpShadowContemporary.Visible = False
        End Select
        shpShadowElegant.Visible = True
        iMemoStyle = wzELEGANT
        fStylesCopied = False
    End If
End Sub

Private Sub imgProfessional_Click()
    If iMemoStyle <> wzPROFESSIONAL Then
        Select Case iMemoStyle
            Case wzCONTEMPORARY
                shpShadowContemporary.Visible = False
            Case wzELEGANT
                shpShadowElegant.Visible = False
        End Select
        shpShadowProfessional.Visible = True
        iMemoStyle = wzPROFESSIONAL
        optProfessional.Value = True
        optProfessional.SetFocus
        fStylesCopied = False
    End If
End Sub

Private Sub imgContemporary_Click()
    If iMemoStyle <> wzCONTEMPORARY Then
        Select Case iMemoStyle
            Case wzPROFESSIONAL
                shpShadowProfessional.Visible = False
            Case wzELEGANT
                shpShadowElegant.Visible = False
        End Select
        shpShadowContemporary.Visible = True
        iMemoStyle = wzCONTEMPORARY
        optContemporary.Value = True
        optContemporary.SetFocus
        fStylesCopied = False
    End If
End Sub

Private Sub imgElegant_Click()
    If iMemoStyle <> wzELEGANT Then
        Select Case iMemoStyle
            Case wzPROFESSIONAL
                shpShadowProfessional.Visible = False
            Case wzCONTEMPORARY
                shpShadowContemporary.Visible = False
        End Select
        shpShadowElegant.Visible = True
        iMemoStyle = wzELEGANT
        optElegant.Value = True
        optElegant.SetFocus
        fStylesCopied = False
    End If
End Sub

Private Sub JumpToPanel(iNewPanel As Integer)
    Dim lNewFormTop As Long
    Dim lNewFormLeft As Long
    
    If iCurrentPanel = iNewPanel Or fWizardCallBack Then Exit Sub

    If FPageLostFocus Then
        ' Deselect current flow chart marker
        formWizard.Controls(strSHP_MAP & iCurrentPanel).BackColor = COLOR_DARKGREY
        formWizard.Controls(strLBL_MAP & iCurrentPanel).FONTBOLD = False
        iCurrentPanel = iNewPanel
            
        ' Select new flow chart marker
        formWizard.Controls(strSHP_MAP & iCurrentPanel).BackColor = COLOR_GREEN
        formWizard.Controls(strLBL_MAP & iCurrentPanel).FONTBOLD = True
            
        ' Change to new active page
        mpgWizardPage.Value = iCurrentPanel
        If fBalloonVisible Then
            lNewFormTop = formWizard.Top
            lNewFormLeft = formWizard.Left
            
            If (lNewFormTop <> lFormTop) Or (lNewFormLeft <> lFormLeft) Then
                lFormTop = lNewFormTop
                lFormLeft = lNewFormLeft
                objAssistantBalloon.SetAvoidRectangle lFormLeft, lFormTop, lFormLeft + lFormWidth, lFormTop + lFormHeight
            End If
            objAssistantBalloon.Close
            objAssistantBalloon.Text = rgstrAssistantMsg(iNewPanel)
            objAssistantBalloon.Show
        End If
        
        ' Set focus to new control
        PageSetFocus
    End If
End Sub

Private Function FPageLostFocus() As Boolean
Dim fRet As Boolean

    fRet = True
    Select Case iCurrentPanel
        Case wzPAGE_START
            cmdBack.Enabled = True
            If Not (fSettingsRestored) Then RestoreDialogValues (True)
        Case wzPAGE_STYLE
            If Not (fStylesCopied) Then
                If Not (FApplyMemoStyle(iMemoStyle)) Then fRet = False
            End If
        Case wzPAGE_TITLE
            If (fCheckValidity) Then
                If (FInvalidSpace) Then fRet = False
            End If
        Case wzPAGE_RECIPIENT
            If fCheckTo Then CleanUpTo
            If fCheckCc Then CleanUpCc
        Case wzPAGE_FINISH
            fSettingsSaved = False
            cmdNext.Enabled = True
    End Select
    FPageLostFocus = fRet
End Function

Private Sub PageSetFocus()
    Select Case iCurrentPanel
        Case wzPAGE_START
            cmdNext.SetFocus
            cmdBack.Enabled = False
        Case wzPAGE_TITLE
            If optIncludeTitleYes.Value Then
                SelectTextBox txtTitle
            Else
                Select Case iOwnFormOrientation
                    Case wzTOP
                        optOwnFormTop.SetFocus
                    Case wzLEFT
                        optOwnFormLeft.SetFocus
                    Case wzRIGHT
                        optOwnFormRight.SetFocus
                    Case Else
                        iOwnFormOrientation = wzTOP
                        optOwnFormTop.SetFocus
                End Select
            End If
        Case wzPAGE_HEADING
            chkHeadingDate.SetFocus
        Case wzPAGE_RECIPIENT
            chkMemoTo.SetFocus
        Case wzPAGE_CLOSING
            chkClosingEnclosure.SetFocus
            'The German version doesn't have the initials at the end of the Memo
            'chkClosingWriter.SetFocus
        Case wzPAGE_HEADFOOT
            chkHeaderDate.SetFocus
        Case wzPAGE_STYLE
            Select Case iMemoStyle
                Case wzPROFESSIONAL
                    optProfessional.SetFocus
                Case wzCONTEMPORARY
                    optContemporary.SetFocus
                Case wzELEGANT
                    optElegant.SetFocus
                Case Else
                    iMemoStyle = wzPROFESSIONAL
                    optProfessional.SetFocus
            End Select
        Case wzPAGE_FINISH
            cmdFinish.SetFocus
            cmdNext.Enabled = False
            If Not (fSettingsSaved) Then SaveDialogValues (True)
    End Select
End Sub

Private Sub CleanUpTo()
    Dim strTemp As String, j As Integer
    Dim strRtChar As String
    
    strTemp = RTrim$(txtMemoTo.Text)
    'remove extra vbCrLf at the end of the string
    strRtChar = Right$(strTemp, 1)
    j = Len(strTemp)
    While ((strRtChar = vbCr) Or (strRtChar = vbLf)) And j
        strTemp = Left$(strTemp, j - 1)
        j = j - 1
        strRtChar = Right$(strTemp, 1)
    Wend
    If Len(strTemp) Then
        strTemp = StrSubstituteText(strTemp, vbLf, "")
        strTemp = StrSubstituteText(strTemp, vbCr, ", ")
    End If
    txtMemoTo.Text = RTrim$(strTemp)
    fCheckTo = False
End Sub

Private Sub CleanUpCc()
    Dim strTemp As String, j As Integer
    Dim strRtChar As String
    
    strTemp = RTrim$(txtMemoCc.Text)
    'remove extra vbCrLf at the end of the string
    strRtChar = Right$(strTemp, 1)
    j = Len(strTemp)
    While ((strRtChar = vbCr) Or (strRtChar = vbLf)) And j
        strTemp = Left$(strTemp, j - 1)
        j = j - 1
        strRtChar = Right$(strTemp, 1)
    Wend
    If Len(strTemp) Then
        strTemp = StrSubstituteText(strTemp, vbLf, "")
        strTemp = StrSubstituteText(strTemp, vbCr, ", ")
    End If
    txtMemoCc.Text = RTrim$(strTemp)
    fCheckCc = False
End Sub

Private Sub SelectTextBox(objTxtBox As Control)
    With objTxtBox
        .SelStart = 0
        .SelLength = .TextLength
        .SetFocus
    End With
End Sub

Private Sub UpdateHeaderTopic()
    If Not fHeaderTopicEdited Then
        If txtTitle.TextLength Then
            If txtHeadingSubject.TextLength Then
                strHeaderTopic = txtTitle.Text & ": " & txtHeadingSubject.Text
            Else
                strHeaderTopic = txtTitle.Text
            End If
        ElseIf txtHeadingSubject.TextLength Then
            strHeaderTopic = txtHeadingSubject.Text
        Else
            strHeaderTopic = ""
        End If
        If chkHeaderTopic.Value Then txtHeaderTopic.Text = strHeaderTopic
    End If
End Sub
Private Function FInvalidSpace() As Boolean
    Dim strOldMsr As String, strNewMsr As String
    Dim sVal As Single, fRet As Boolean
    
    fRet = False
    If fInitializingForm Then
        FInvalidSpace = False
        Exit Function
    End If
    strOldMsr = txtOwnFormSpace.Text
    If Not (FChkMeasurement(strOldMsr, strNewMsr)) Then
        DisplayErrorMsg (strERR_BAD_MEASUREMENT)
        txtOwnFormSpace.Text = StrDefaultMsrmentFromPts(sOwnFormSpace)
        SelectTextBox txtOwnFormSpace
        fRet = True
    Else
        sVal = SPtsFromTxtMsrment(strNewMsr)
        If (sVal < 0) Or (sVal > sMAX_OWN_FORM_SPACE) Then
            DisplayErrorMsg (strERR_LIMIT & "0" & strAND & StrDefaultMsrmentFromPts(sMAX_OWN_FORM_SPACE)) & strERR_LIMIT2
            txtOwnFormSpace.Text = StrDefaultMsrmentFromPts(sOwnFormSpace)
            SelectTextBox txtOwnFormSpace
            fRet = True
        Else
            txtOwnFormSpace.Text = strNewMsr
            sOwnFormSpace = sVal
        End If
    End If
    fCheckValidity = False
    FInvalidSpace = fRet
End Function
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If (CloseMode = vbFormControlMenu) Then
        Err.Clear
        ReportError Err
    End If
End Sub
' End Memo Wizard Form Code


' InQuest injected base64 decoded content
' Szjej

INQUEST-PP=macro
