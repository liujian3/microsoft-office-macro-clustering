Attribute VB_Name = "Macros"
Sub btnGoTo_Main_Form_Tab()
    Sheets("Main Form").Activate
End Sub

Sub btnGoTo_MDT_Tab()
    Sheets("Master Data Table").Activate
End Sub

Sub cmdNewScenario()
    
'    'Resize & Relocate the Button (Form Control)
'    ' *** Only needed if button loses size/position ***
'    ActiveSheet.Shapes("Button 15").Left = 249.75
'    ActiveSheet.Shapes("Button 15").Top = 30.75
'    ActiveSheet.Shapes("Button 15").Height = 26.25
'    ActiveSheet.Shapes("Button 15").Width = 107.25
    
    frmMain.lblRecType.Caption = "NEW"
    frmMain.Show
    
End Sub
Sub cmdSearch()
    
'    'Resize & Relocate the Button (Form Control)
'    ' *** Only needed if button loses size/position ***
'    ActiveSheet.Shapes("Button 16").Left = 114
'    ActiveSheet.Shapes("Button 16").Top = 201.75
'    ActiveSheet.Shapes("Button 16").Height = 21
'    ActiveSheet.Shapes("Button 16").Width = 68.25
    
    Dim iScenarioId As Integer
    Dim sStatus As String
    Dim sDesc As String
    Dim iStartRow As Integer
    Dim iStartColumn As Integer
    Dim i As Integer
    Dim rngEdit As Range
    Dim rngSelect As Range
    
    iStartRow = 20
    iStartColumn = 2
    
    'Check the Scenario # field to ensure it has a numeric value
    If Not (IsNumeric(Sheets("Main Form").Range("C10").Value)) Then
        MsgBox "Enter a valid numeric/integer value for Scenario #.", vbCritical, "Search Scenario"
        Exit Sub
    End If
    
    'Check the Scenario # field to ensure it has an INTEGER value
    'NOTE: This check will not work until we know that the value is indeed numeric (hence the reason for this second check.
    If Not (Int(Sheets("Main Form").Range("C10").Value) = Sheets("Main Form").Range("C10").Value) Then
        MsgBox "Enter a valid numeric/integer value for Scenario #.", vbCritical, "Search Scenario"
        Exit Sub
    End If
        
    iScenarioId = Sheets("Main Form").Range("C10").Value
    sStatus = Sheets("Main Form").Range("C11").Value
    sDesc = LCase(Sheets("Main Form").Range("C12").Value)
    
    If iScenarioId = 0 And sStatus = "" And sDesc = "" Then
        MsgBox "Enter at least one search criteria.", vbCritical, "Search Scenario"
        Exit Sub
    End If
    
    Application.ScreenUpdating = False
    
    'Select the "Scenario #" of the first row for a Search Return
    Sheets("Main Form").Range("B20").Select
    
    'If there was a previous search, delete all rows before repopulating with the new search
    While ActiveCell.Value <> ""
        ActiveCell.EntireRow.Delete
    Wend
    
    
    'Select the first scenario from the MDT
    Sheets("Master Data Table").Activate
    ActiveSheet.Range("A3").Select
    
    'Loop through the records in Master Data Table sheet to find matching records
    While ActiveCell.Value <> ""
        Set rngEdit = Sheets("Main Form").Range("A" & iStartRow)
        
        '    ActiveSheet.Hyperlinks.Add Anchor:=Selection, Address:="A20", _
        TextToDisplay:="Edit"
        
        If sStatus = "ALL" Then
            Sheets("Main Form").Hyperlinks.Add Anchor:=rngEdit, Address:=rngEdit, TextToDisplay:="Edit"
            Sheets("Main Form").Cells(iStartRow, iStartColumn + 20).Value = ActiveCell.Row
            Sheets("Main Form").Cells(iStartRow, iStartColumn).Value = ActiveCell.Value
            Sheets("Main Form").Cells(iStartRow, iStartColumn + 1).Value = ActiveCell.Offset(0, 1).Value
            Sheets("Main Form").Cells(iStartRow, iStartColumn + 2).Value = ActiveCell.Offset(0, 3).Value
            Sheets("Main Form").Cells(iStartRow, iStartColumn + 3).Value = ActiveCell.Offset(0, 6).Value
            iStartRow = iStartRow + 1
        End If
        If iScenarioId > 0 And sStatus = "" And sDesc = "" Then 'Scenario Id provided in Search
            If iScenarioId = ActiveCell.Value Then
                Sheets("Main Form").Hyperlinks.Add Anchor:=rngEdit, Address:=rngEdit, TextToDisplay:="Edit"
                Sheets("Main Form").Cells(iStartRow, iStartColumn + 20).Value = ActiveCell.Row
                Sheets("Main Form").Cells(iStartRow, iStartColumn).Value = ActiveCell.Value
                Sheets("Main Form").Cells(iStartRow, iStartColumn + 1).Value = ActiveCell.Offset(0, 1).Value
                Sheets("Main Form").Cells(iStartRow, iStartColumn + 2).Value = ActiveCell.Offset(0, 3).Value
                iStartRow = iStartRow + 1
            End If
        ElseIf iScenarioId = 0 And sStatus <> "" And sDesc = "" Then    'Status provided in Search
            If sStatus = ActiveCell.Offset(0, 1).Value Then
                Sheets("Main Form").Hyperlinks.Add Anchor:=rngEdit, Address:=rngEdit, TextToDisplay:="Edit"
                Sheets("Main Form").Cells(iStartRow, iStartColumn + 20).Value = ActiveCell.Row
                Sheets("Main Form").Cells(iStartRow, iStartColumn).Value = ActiveCell.Value
                Sheets("Main Form").Cells(iStartRow, iStartColumn + 1).Value = ActiveCell.Offset(0, 1).Value
                Sheets("Main Form").Cells(iStartRow, iStartColumn + 2).Value = ActiveCell.Offset(0, 3).Value
                iStartRow = iStartRow + 1
            End If
        ElseIf iScenarioId = 0 And sStatus = "" And sDesc <> "" Then 'Description Text provided in Search
            If InStr(LCase(ActiveCell.Offset(0, 3).Value), sDesc) > 0 Then
                Sheets("Main Form").Hyperlinks.Add Anchor:=rngEdit, Address:=rngEdit, TextToDisplay:="Edit"
                Sheets("Main Form").Cells(iStartRow, iStartColumn + 20).Value = ActiveCell.Row
                Sheets("Main Form").Cells(iStartRow, iStartColumn).Value = ActiveCell.Value
                Sheets("Main Form").Cells(iStartRow, iStartColumn + 1).Value = ActiveCell.Offset(0, 1).Value
                Sheets("Main Form").Cells(iStartRow, iStartColumn + 2).Value = ActiveCell.Offset(0, 3).Value
                iStartRow = iStartRow + 1
            End If
        ElseIf iScenarioId > 0 And sStatus <> "" And sDesc = "" Then 'Scenario Id and Status provided in Search
            If iScenarioId = ActiveCell.Value And sStatus = ActiveCell.Offset(0, 1).Value Then
                Sheets("Main Form").Hyperlinks.Add Anchor:=rngEdit, Address:=rngEdit, TextToDisplay:="Edit"
                Sheets("Main Form").Cells(iStartRow, iStartColumn + 20).Value = ActiveCell.Row
                Sheets("Main Form").Cells(iStartRow, iStartColumn).Value = ActiveCell.Value
                Sheets("Main Form").Cells(iStartRow, iStartColumn + 1).Value = ActiveCell.Offset(0, 1).Value
                Sheets("Main Form").Cells(iStartRow, iStartColumn + 2).Value = ActiveCell.Offset(0, 3).Value
                iStartRow = iStartRow + 1
            End If
        ElseIf iScenarioId = 0 And sStatus <> "" And sDesc <> "" Then 'Status and Desc text provided in Search
            If sStatus = ActiveCell.Offset(0, 1).Value And InStr(LCase(ActiveCell.Offset(0, 3).Value), sDesc) > 0 Then
                Sheets("Main Form").Hyperlinks.Add Anchor:=rngEdit, Address:=rngEdit, TextToDisplay:="Edit"
                Sheets("Main Form").Cells(iStartRow, iStartColumn + 20).Value = ActiveCell.Row
                Sheets("Main Form").Cells(iStartRow, iStartColumn).Value = ActiveCell.Value
                Sheets("Main Form").Cells(iStartRow, iStartColumn + 1).Value = ActiveCell.Offset(0, 1).Value
                Sheets("Main Form").Cells(iStartRow, iStartColumn + 2).Value = ActiveCell.Offset(0, 3).Value
                iStartRow = iStartRow + 1
            End If
        ElseIf iScenarioId > 0 And sStatus = "" And sDesc <> "" Then 'Scenario Id and Desc text provided in Search
            If iScenarioId = ActiveCell.Value And InStr(LCase(ActiveCell.Offset(0, 3).Value), sDesc) > 0 Then
                Sheets("Main Form").Hyperlinks.Add Anchor:=rngEdit, Address:=rngEdit, TextToDisplay:="Edit"
                Sheets("Main Form").Cells(iStartRow, iStartColumn + 20).Value = ActiveCell.Row
                Sheets("Main Form").Cells(iStartRow, iStartColumn).Value = ActiveCell.Value
                Sheets("Main Form").Cells(iStartRow, iStartColumn + 1).Value = ActiveCell.Offset(0, 1).Value
                Sheets("Main Form").Cells(iStartRow, iStartColumn + 2).Value = ActiveCell.Offset(0, 3).Value
                iStartRow = iStartRow + 1
            End If
        ElseIf iScenarioId > 0 And sStatus <> "" And sDesc <> "" Then 'Scenario Id, Status and Desc provided in Search
            If iScenarioId = ActiveCell.Value And sStatus = ActiveCell.Offset(0, 1).Value And InStr(LCase(ActiveCell.Offset(0, 3).Value), sDesc) > 0 Then
                Sheets("Main Form").Hyperlinks.Add Anchor:=rngEdit, Address:=rngEdit, TextToDisplay:="Edit"
                Sheets("Main Form").Cells(iStartRow, iStartColumn + 20).Value = ActiveCell.Row
                Sheets("Main Form").Cells(iStartRow, iStartColumn).Value = ActiveCell.Value
                Sheets("Main Form").Cells(iStartRow, iStartColumn + 1).Value = ActiveCell.Offset(0, 1).Value
                Sheets("Main Form").Cells(iStartRow, iStartColumn + 2).Value = ActiveCell.Offset(0, 3).Value
                iStartRow = iStartRow + 1
            End If
        End If
        
        ActiveCell.Offset(1, 0).Activate
    Wend
    
    Sheets("Main Form").Activate
    Sheets("Main Form").Range("B20").Activate
    
    If Sheets("Main Form").Range("B20").Value = "" Then
        Application.ScreenUpdating = True
        MsgBox "No records found. Refine your search.", vbInformation, "Search Scenario"
        Exit Sub
    End If
    
    Set rngSelect = Sheets("Main Form").Range("A20:D" & iStartRow - 1)
    rngSelect.Select
    
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    Sheets("Main Form").Range("B20").Select

    Application.ScreenUpdating = True
    
End Sub
Sub cmdClear()
'    'Resize & Relocate the Button (Form Control)
'    ' *** Only needed if button loses size/position ***
'    ActiveSheet.Shapes("Button 17").Left = 190.5
'    ActiveSheet.Shapes("Button 17").Top = 201.75
'    ActiveSheet.Shapes("Button 17").Height = 21
'    ActiveSheet.Shapes("Button 17").Width = 68.25
    
    Application.ScreenUpdating = False
    Dim rngSelect As Range
    
    Sheets("Main Form").Range("B20").Select
    
    While ActiveCell.Value <> ""
        ActiveCell.EntireRow.Delete
    Wend
    
    Set rngSelect = Sheets("Main Form").Range("A19:D19")
    rngSelect.Select
    
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    Sheets("Main Form").Range("C10:C12").Select
    Selection.ClearContents
    Sheets("Main Form").Range("C10").Select
    
    Application.ScreenUpdating = True
    
End Sub
Sub cmdRiskScoreReport()
'    'Resize & Relocate the Button (Form Control)
'    ' *** Only needed if button loses size/position ***
'    ActiveSheet.Shapes("Button 18").Left = 675
'    ActiveSheet.Shapes("Button 18").Top = 135.75
'    ActiveSheet.Shapes("Button 18").Height = 24.75
'    ActiveSheet.Shapes("Button 18").Width = 105.75
        
    'Call "CreateReportRiskScore" from the "Main Form" worksheet >>> Sheet3
    Application.Run "Sheet3.CreateReportRiskScore"
     
End Sub

Sub cmdGapIDReport()
'    'Resize & Relocate the Button (Form Control)
'    ' *** Only needed if button loses size/position ***
'    ActiveSheet.Shapes("Button 22").Left = 675
'    ActiveSheet.Shapes("Button 22").Top = 166.5
'    ActiveSheet.Shapes("Button 22").Height = 24.75
'    ActiveSheet.Shapes("Button 22").Width = 105.75
        
    'Call "CreateReportGapId" from the "Main Form" worksheet >>> Sheet3
    Application.Run "Sheet3.CreateReportGapId"
End Sub

Sub cmdGapClosureReport()
'    'Resize & Relocate the Button (Form Control)
'    ' *** Only needed if button loses size/position ***
'    ActiveSheet.Shapes("Button 23").Left = 675
'    ActiveSheet.Shapes("Button 23").Top = 197.25
'    ActiveSheet.Shapes("Button 23").Height = 24.75
'    ActiveSheet.Shapes("Button 23").Width = 105.75
        
    'Call "CreateReportGapClosure" from the "Main Form" worksheet >>> Sheet3
    Application.Run "Sheet3.CreateReportGapClosure"
End Sub

Sub cmdSummaryReport()
'    'Resize & Relocate the Button (Form Control)
'    ' *** Only needed if button loses size/position ***
'    ActiveSheet.Shapes("Button 24").Left = 800
'    ActiveSheet.Shapes("Button 24").Top = 135.75
'    ActiveSheet.Shapes("Button 24").Height = 24.75
'    ActiveSheet.Shapes("Button 24").Width = 105.75
        
    'Call "CreateSummaryReport" from the "Main Form" worksheet >>> Sheet3
    Application.Run "Sheet3.CreateSummaryReport"
End Sub



Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
    If Target.TextToDisplay = "Edit" Then
        frmMain.lblRecType.Caption = "EDIT"
        frmMain.lblRowNum.Caption = GetRowNum(Target.Range)
        frmMain.Show
    End If
End Sub

Private Function GetRowNum(sAddress As Range) As Integer
    Dim iCol, iRow As Integer
        
    iCol = sAddress.Column + 21
    iRow = sAddress.Row
    
    GetRowNum = Sheets("Main Form").Cells(iRow, iCol).Value
    
End Function

Private Sub AddAsLastWorksheet(sRepName As String)

    Worksheets.Add(After:=Worksheets(Worksheets.Count)).Name = sRepName

End Sub

Private Sub DeleteSheet(sRepName As String)
    For Each ws In Sheets
        Application.DisplayAlerts = False
        If ws.Name = sRepName Then
            ws.Delete
            Exit For
        End If
    Next
    
    Application.DisplayAlerts = True

End Sub


Private Sub CreateReportRiskScore()
   
    'Triggered from the "Risk Score Report" Button
    
    Application.ScreenUpdating = False
    
    Call DeleteSheet("Risk Score Report")
    
    Sheets("RSTemplate").Visible = True
    Sheets("RSTemplate").Select
    Sheets("RSTemplate").Copy After:=Sheets(Sheets.Count)
    Sheets("RSTemplate (2)").Select
    Sheets("RSTemplate (2)").Name = "Risk Score Report"
    Sheets("RSTemplate").Visible = False
    
    Sheets("Risk Score Report").Range("A1").Select
    Sheets("Risk Score Report").Range("B3").Value = Date
    
    Sheets("Risk Score Report").Range("A9").Select
    
    Sheets("Master Data Table").Activate
    Sheets("Master Data Table").Range("A3").Select
    
    Dim iStartRow As Integer
    
    iStartRow = 9
    
    While ActiveCell.Value <> ""
        Sheets("Risk Score Report").Cells(iStartRow, 1).Value = ActiveCell.Value
        Sheets("Risk Score Report").Cells(iStartRow, 2).Value = ActiveCell.Offset(0, 1).Value
        Sheets("Risk Score Report").Cells(iStartRow, 3).Value = ActiveCell.Offset(0, 3).Value
        Sheets("Risk Score Report").Cells(iStartRow, 4).Value = ActiveCell.Offset(0, 4).Value
        Sheets("Risk Score Report").Cells(iStartRow, 5).Value = ActiveCell.Offset(0, 6).Value
        Sheets("Risk Score Report").Cells(iStartRow, 6).Value = ActiveCell.Offset(0, 7).Value
        Sheets("Risk Score Report").Cells(iStartRow, 7).Value = ActiveCell.Offset(0, 9).Value
        Sheets("Risk Score Report").Cells(iStartRow, 8).Value = ActiveCell.Offset(0, 10).Value
        Sheets("Risk Score Report").Cells(iStartRow, 9).Value = ActiveCell.Offset(0, 11).Value
        Sheets("Risk Score Report").Cells(iStartRow, 10).Value = ActiveCell.Offset(0, 12).Value
        Sheets("Risk Score Report").Cells(iStartRow, 11).Value = ActiveCell.Offset(0, 13).Value
        Sheets("Risk Score Report").Cells(iStartRow, 12).Value = ActiveCell.Offset(0, 14).Value
        Sheets("Risk Score Report").Cells(iStartRow, 13).Value = ActiveCell.Offset(0, 15).Value
        Sheets("Risk Score Report").Cells(iStartRow, 14).Value = ActiveCell.Offset(0, 16).Value
        Sheets("Risk Score Report").Cells(iStartRow, 15).Value = ActiveCell.Offset(0, 17).Value
        Sheets("Risk Score Report").Cells(iStartRow, 16).Value = ActiveCell.Offset(0, 18).Value
        Sheets("Risk Score Report").Cells(iStartRow, 17).Value = ActiveCell.Offset(0, 19).Value
        
        iStartRow = iStartRow + 1
        ActiveCell.Offset(1, 0).Activate
    Wend
    
    Sheets("Risk Score Report").Activate
    Sheets("Risk Score Report").Range("A4").Select
    Sheets("Risk Score Report").Range("A4").Activate
    
    Application.ScreenUpdating = True
End Sub

Private Sub CreateReportGapId()
    
    'Triggered from the "Gap ID Report" Button
    
    Application.ScreenUpdating = False
    
    Call DeleteSheet("Gap ID Report")
    
    Sheets("GITemplate").Visible = True
    Sheets("GITemplate").Select
    Sheets("GITemplate").Copy After:=Sheets(Sheets.Count)
    Sheets("GITemplate (2)").Select
    Sheets("GITemplate (2)").Name = "Gap ID Report"
    Sheets("GITemplate").Visible = False
    
    Sheets("Gap ID Report").Range("A1").Select
    Sheets("Gap ID Report").Range("B3").Value = Date
    
    Sheets("Gap ID Report").Range("A9").Select
    
    Sheets("Master Data Table").Activate
    Sheets("Master Data Table").Range("A3").Select
    
    Dim iStartRow As Integer
    
    iStartRow = 9
    
    While ActiveCell.Value <> ""
        Sheets("Gap ID Report").Cells(iStartRow, 1).Value = ActiveCell.Value
        Sheets("Gap ID Report").Cells(iStartRow, 2).Value = ActiveCell.Offset(0, 1).Value
        Sheets("Gap ID Report").Cells(iStartRow, 3).Value = ActiveCell.Offset(0, 3).Value
        Sheets("Gap ID Report").Cells(iStartRow, 4).Value = ActiveCell.Offset(0, 6).Value
        Sheets("Gap ID Report").Cells(iStartRow, 5).Value = ActiveCell.Offset(0, 19).Value
        Sheets("Gap ID Report").Cells(iStartRow, 6).Value = ActiveCell.Offset(0, 21).Value
        Sheets("Gap ID Report").Cells(iStartRow, 7).Value = ActiveCell.Offset(0, 24).Value
        Sheets("Gap ID Report").Cells(iStartRow, 8).Value = ActiveCell.Offset(0, 25).Value
        Sheets("Gap ID Report").Cells(iStartRow, 9).Value = ActiveCell.Offset(0, 27).Value
        Sheets("Gap ID Report").Cells(iStartRow, 10).Value = ActiveCell.Offset(0, 33).Value
        Sheets("Gap ID Report").Cells(iStartRow, 11).Value = ActiveCell.Offset(0, 34).Value
        
        iStartRow = iStartRow + 1
        ActiveCell.Offset(1, 0).Activate
    Wend
    
    Sheets("Gap ID Report").Activate
    Sheets("Gap ID Report").Range("A4").Select
    Sheets("Gap ID Report").Range("A4").Activate
    
    
    Application.ScreenUpdating = True
End Sub

Private Sub CreateReportGapClosure()
    
    'Triggered from the "Gap Closure Report" Button
    
    Application.ScreenUpdating = False
    
    Call DeleteSheet("Gap Closure Report")
    
    Sheets("GCTemplate").Visible = True
    Sheets("GCTemplate").Select
    Sheets("GCTemplate").Copy After:=Sheets(Sheets.Count)
    Sheets("GCTemplate (2)").Select
    Sheets("GCTemplate (2)").Name = "Gap Closure Report"
    Sheets("GCTemplate").Visible = False
    
    Sheets("Gap Closure Report").Range("A1").Select
    Sheets("Gap Closure Report").Range("B3").Value = Date
    
    Sheets("Gap Closure Report").Range("A9").Select
    
    Sheets("Master Data Table").Activate
    Sheets("Master Data Table").Range("A3").Select
    
    Dim iStartRow As Integer
    
    iStartRow = 9
    
    While ActiveCell.Value <> ""
        Sheets("Gap Closure Report").Cells(iStartRow, 1).Value = ActiveCell.Value
        Sheets("Gap Closure Report").Cells(iStartRow, 2).Value = ActiveCell.Offset(0, 1).Value
        Sheets("Gap Closure Report").Cells(iStartRow, 3).Value = ActiveCell.Offset(0, 3).Value
        Sheets("Gap Closure Report").Cells(iStartRow, 4).Value = ActiveCell.Offset(0, 6).Value
        Sheets("Gap Closure Report").Cells(iStartRow, 5).Value = ActiveCell.Offset(0, 19).Value
        Sheets("Gap Closure Report").Cells(iStartRow, 6).Value = ActiveCell.Offset(0, 38).Value
        Sheets("Gap Closure Report").Cells(iStartRow, 7).Value = ActiveCell.Offset(0, 39).Value
        Sheets("Gap Closure Report").Cells(iStartRow, 8).Value = ActiveCell.Offset(0, 40).Value
        Sheets("Gap Closure Report").Cells(iStartRow, 9).Value = ActiveCell.Offset(0, 41).Value
        Sheets("Gap Closure Report").Cells(iStartRow, 10).Value = ActiveCell.Offset(0, 42).Value
        Sheets("Gap Closure Report").Cells(iStartRow, 11).Value = ActiveCell.Offset(0, 44).Value
        Sheets("Gap Closure Report").Cells(iStartRow, 12).Value = ActiveCell.Offset(0, 45).Value
        Sheets("Gap Closure Report").Cells(iStartRow, 13).Value = ActiveCell.Offset(0, 46).Value
        
        iStartRow = iStartRow + 1
        ActiveCell.Offset(1, 0).Activate
    Wend
    
    Sheets("Gap Closure Report").Activate
    Sheets("Gap Closure Report").Range("A4").Select
    Sheets("Gap Closure Report").Range("A4").Activate
    
    
    Application.ScreenUpdating = True
End Sub

Private Sub CreateSummaryReport()

    'Triggered from the "Summary Report" Button

    Application.ScreenUpdating = False
    
    Call DeleteSheet("Summary Report")
    
    Sheets("SummaryTemplate").Visible = True
    Sheets("SummaryTemplate").Select
    Sheets("SummaryTemplate").Copy After:=Sheets(Sheets.Count)
    Sheets("SummaryTemplate (2)").Select
    Sheets("SummaryTemplate (2)").Name = "Summary Report"
    Sheets("SummaryTemplate").Visible = False
    
    Sheets("Summary Report").Range("A1").Select
    Sheets("Summary Report").Range("B3").Value = Date
    
    Sheets("Summary Report").Range("A9").Select
    
    Sheets("Master Data Table").Activate
    Sheets("Master Data Table").Range("A3").Select
    
    Dim iStartRow As Integer
    
    iStartRow = 9
    
    While ActiveCell.Value <> ""
        Sheets("Summary Report").Cells(iStartRow, 1).Value = ActiveCell.Value
        Sheets("Summary Report").Cells(iStartRow, 2).Value = ActiveCell.Offset(0, 1).Value
        Sheets("Summary Report").Cells(iStartRow, 3).Value = ActiveCell.Offset(0, 3).Value
        Sheets("Summary Report").Cells(iStartRow, 4).Value = ActiveCell.Offset(0, 6).Value
        Sheets("Summary Report").Cells(iStartRow, 5).Value = ActiveCell.Offset(0, 19).Value
        Sheets("Summary Report").Cells(iStartRow, 6).Value = ActiveCell.Offset(0, 9).Value
        Sheets("Summary Report").Cells(iStartRow, 7).Value = ActiveCell.Offset(0, 15).Value
        Sheets("Summary Report").Cells(iStartRow, 8).Value = ActiveCell.Offset(0, 16).Value
        Sheets("Summary Report").Cells(iStartRow, 9).Value = ActiveCell.Offset(0, 18).Value
        Sheets("Summary Report").Cells(iStartRow, 10).Value = ActiveCell.Offset(0, 25).Value
        Sheets("Summary Report").Cells(iStartRow, 11).Value = ActiveCell.Offset(0, 34).Value
        
        iStartRow = iStartRow + 1
        ActiveCell.Offset(1, 0).Activate
    Wend
    
    Sheets("Summary Report").Activate
    Sheets("Summary Report").Range("A4").Select
    Sheets("Summary Report").Range("A4").Activate
    
    
    Application.ScreenUpdating = True
End Sub
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)

On Error Resume Next

'----------------------------------------------------
'If Time Period (column K) is selected then populate
'the appropriate data for the duration.
'If Time Period = "Shift" then allow user to populate
'----------------------------------------------------
'Target Column = K
If Target.Column = 11 Then
    'Target Validation Type = List
    If Target.Validation.Type = 3 Then
        Application.EnableEvents = False

        'Check Value
        If Target = "Day" Then
            Target.Offset(0, 1) = 24
        ElseIf Target = "Week" Then
            Target.Offset(0, 1) = 168
        ElseIf Target = "Month" Then
            Target.Offset(0, 1) = 720
        ElseIf Target = "Quarter" Then
            Target.Offset(0, 1) = 2184
        ElseIf Target = "Year" Then
            Target.Offset(0, 1) = 8760
        Else
            Target.Offset(0, 1).ClearContents
        End If
    End If
End If


'----------------------------------------------------
'If user changes data in the Duration of Time Period
'(column L), then back-check the selected Time Period
'If the selection is "Shift", allow the change
'If the selection is Day, Week, Month, Quarter, or
'Year, do not allow the change - reset to the
'appropriate value.
'----------------------------------------------------
'Target Column = L
If Target.Column = 12 Then
    Application.EnableEvents = False

    'Check Value
    If Target.Offset(0, -1) = "Day" Then
        Target = 24
    ElseIf Target.Offset(0, -1) = "Week" Then
        Target = 168
    ElseIf Target.Offset(0, -1) = "Month" Then
        Target = 720
    ElseIf Target.Offset(0, -1) = "Quarter" Then
        Target = 2184
    ElseIf Target.Offset(0, -1) = "Year" Then
        Target = 8760
    Else
        'No automated change - allow user change
    End If

End If

exitHandler:
  Application.EnableEvents = True
  Exit Sub

End Sub
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)
    
    'When a hyperlink on this worksheet is clicked, check the "ScreenTip" text and
    'call the main data entry form if it matches the example scenarios.
    
    If Target.ScreenTip = "Open Scenario 1 in Form View" Then
        frmMain.lblRecType.Caption = "EDIT2"
        frmMain.lblRowNum.Caption = 3
        frmMain.Show
    ElseIf Target.ScreenTip = "Open Scenario 2 in Form View" Then
        frmMain.lblRecType.Caption = "EDIT2"
        frmMain.lblRowNum.Caption = 4
        frmMain.Show
    ElseIf Target.ScreenTip = "Open Scenario 3 in Form View" Then
        frmMain.lblRecType.Caption = "EDIT2"
        frmMain.lblRowNum.Caption = 5
        frmMain.Show
    ElseIf Target.ScreenTip = "Open Scenario 4 in Form View" Then
        frmMain.lblRecType.Caption = "EDIT2"
        frmMain.lblRowNum.Caption = 6
        frmMain.Show
    ElseIf Target.ScreenTip = "Open Scenario 5 in Form View" Then
        frmMain.lblRecType.Caption = "EDIT2"
        frmMain.lblRowNum.Caption = 7
        frmMain.Show
    End If
End Sub
Private Sub Worksheet_Change(ByVal Target As Range)

On Error Resume Next

'----------------------------------------------------
'If Time Period (column K) is selected then populate
'the appropriate data for the duration.
'If Time Period = "Shift" then allow user to populate
'----------------------------------------------------
'Target Column = K
If Target.Column = 11 Then
    'Target Validation Type = List
    If Target.Validation.Type = 3 Then
        Application.EnableEvents = False

        'Check Value
        If Target = "Day" Then
            Target.Offset(0, 1) = 24
        ElseIf Target = "Week" Then
            Target.Offset(0, 1) = 168
        ElseIf Target = "Month" Then
            Target.Offset(0, 1) = 720
        ElseIf Target = "Quarter" Then
            Target.Offset(0, 1) = 2184
        ElseIf Target = "Year" Then
            Target.Offset(0, 1) = 8760
        Else
            Target.Offset(0, 1).ClearContents
        End If
    End If
End If


'----------------------------------------------------
'If user changes data in the Duration of Time Period
'(column L), then back-check the selected Time Period
'If the selection is "Shift", allow the change
'If the selection is Day, Week, Month, Quarter, or
'Year, do not allow the change - reset to the
'appropriate value.
'----------------------------------------------------
'Target Column = L
If Target.Column = 12 Then
    Application.EnableEvents = False

    'Check Value
    If Target.Offset(0, -1) = "Day" Then
        Target = 24
    ElseIf Target.Offset(0, -1) = "Week" Then
        Target = 168
    ElseIf Target.Offset(0, -1) = "Month" Then
        Target = 720
    ElseIf Target.Offset(0, -1) = "Quarter" Then
        Target = 2184
    ElseIf Target.Offset(0, -1) = "Year" Then
        Target = 8760
    Else
        'No automated change - allow user change
    End If

End If

exitHandler:
  Application.EnableEvents = True
  Exit Sub

End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "frmHelp_ASF_01_Name"
Attribute VB_Base = "0{CF0B5711-C5B9-46D7-88CC-2EDCE41A6658}{3FD69536-8E3B-4DE3-B560-EEE8FC5763FC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
    Unload Me
End Sub
Attribute VB_Name = "frmHelp_ASF_02_Description"
Attribute VB_Base = "0{D727CEC5-402A-45F9-90B4-09AC8E4CF1E6}{2FC6E22C-1EEF-45D2-AF5C-C0CE42A2069D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
    Unload Me
End Sub
Attribute VB_Name = "frmHelp_ASF_04_Manufacturer"
Attribute VB_Base = "0{A553A13E-2758-4231-8A18-94CF95DBE6E0}{34FC11C3-5001-4084-BA87-628A85AC0D52}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
    Unload Me
End Sub

Attribute VB_Name = "frmHelp_ASF_05_PLCalc"
Attribute VB_Base = "0{A6825CF9-D2F1-4672-92F6-733627182D27}{1D5415F3-7384-4113-BD72-C05054600A04}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
    Unload Me
End Sub
Attribute VB_Name = "frmHelp_ASF_06_PLr"
Attribute VB_Base = "0{5CDF4DA0-67BB-4FBB-BF56-8FB03DEB109A}{3B4391ED-436B-46CA-9B28-4268D6174350}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
    Unload Me
End Sub

Attribute VB_Name = "frmHelp_ASF_07_ASF_OK"
Attribute VB_Base = "0{644ECD52-8207-411A-A1C5-975BC59EF650}{AB0CE1EF-49E2-488B-8644-197B2D518B19}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
    Unload Me
End Sub
Attribute VB_Name = "frmHelp_PG_01_Name"
Attribute VB_Base = "0{7B0F3914-B4F9-46E1-BC23-D5D24156FA18}{0163EA24-7F07-490C-A0B3-6A5621983FC0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
    Unload Me
End Sub
Attribute VB_Name = "frmHelp_PG_02_Description"
Attribute VB_Base = "0{F2FB7057-9C55-41A1-BD37-5C5157E12C86}{E6D665B8-42CF-4513-A609-42A7DD286069}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
    Unload Me
End Sub
Attribute VB_Name = "frmHelp_PG_04_PG_OK"
Attribute VB_Base = "0{B2861459-8464-4BB8-9194-183CEEC79D67}{DFF7B3A8-2C22-42B5-A8FD-2D8A0F214B14}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
    Unload Me
End Sub
Attribute VB_Name = "frmHelp_PG_ASF_01_Checklist"
Attribute VB_Base = "0{FE63BBC8-491D-42BE-8253-7926B03CD0CB}{7E3B46D0-C0F1-4232-A87C-3203C7CD3209}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
    Unload Me
End Sub
Attribute VB_Name = "frmHelp_RS_01_IOES"
Attribute VB_Base = "0{F0F3542C-9D1A-43D0-AFBA-ABC2BEE17FB7}{7E6CABC2-3ED8-4EC4-A0C9-B9A1A16D98C8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
    Unload Me
End Sub
Attribute VB_Name = "frmHelp_RS_03_Severity"
Attribute VB_Base = "0{1EFA66C1-E65A-4139-AFDC-7B52EC4878E8}{5E903BA5-5B9F-4BBD-8150-8D3A873C9AE7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
    Unload Me
End Sub
Attribute VB_Name = "frmHelp_RS_06_Frequency"
Attribute VB_Base = "0{A9D5D9F4-0723-4F8F-8E44-5F9AE2E4E191}{AF185CAD-B294-4147-BDBE-C1B55220BA41}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
    Unload Me
End Sub
Attribute VB_Name = "frmHelp_RS_07_Duration"
Attribute VB_Base = "0{04685DB0-927C-4CB3-8C23-14D5C83B21D3}{1BA9BA02-0527-410C-A95D-9CD076E856F9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
    Unload Me
End Sub
Attribute VB_Name = "frmHelp_RS_08_People"
Attribute VB_Base = "0{F46E299D-BCF8-441A-85E2-0369F4FF1037}{CFD466B1-4062-4984-BF70-44F75A9C9C7A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
    Unload Me
End Sub
Attribute VB_Name = "frmHelp_RS_09_Avoidance"
Attribute VB_Base = "0{9BB8FC33-F5FF-49D5-98E1-72B9789258AC}{497B675D-C563-4206-B0CD-9DD144830692}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
    Unload Me
End Sub
Attribute VB_Name = "frmHelp_RS_11_Exposure"
Attribute VB_Base = "0{2AC25B29-9771-47DB-8AE2-087464817707}{E5CC98A0-BC56-4B73-B673-1B8B4DA82150}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
    Unload Me
End Sub

Attribute VB_Name = "frmMain"
Attribute VB_Base = "0{994A151D-D2F0-4E3B-81A7-39D6713E491B}{3EAD8E25-A9F8-41B0-BCD3-1824E261A50B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub btnNextRS_Click()
    MultiPage1.Value = 1
End Sub

Private Sub cmdCancel_Click()
    'ClearValues
    Unload Me
End Sub

''---------------------------------------------------------------------------------------'''
'Calculate the Exposure Rate (% of Day) - Column P
'Formula Used (as per excel) - ''''''''''=IF(O3>0,(24/L3)*M3*N3*O3/1440,"-")''''''''''''
'Fields Used
'    Column O - Number of People Exposed
'    Column L - Duration of Time Period (Hours)
'    Column M - Frequency of Task(Number/Time Period)
'    Column N - Duration of Exposure(Minutes)
''---------------------------------------------------------------------------------------'''
Private Sub CalculateExposureRatePercentage()
    If Val(txtPeopleExposed.Text) > 0 And Val(txtDurationTimePrdHrs.Text) > 0 Then
        txtExpRatePercCalc.Text = Round((((24 / Val(txtDurationTimePrdHrs.Text)) * Val(txtTaskFreq.Text) * Val(txtDurationExposure.Text) * Val(txtPeopleExposed.Text)) / 1440) * 100, 2) & "%"
    Else
        txtExpRatePercCalc.Text = "-"
    End If
End Sub

''---------------------------------------------------------------------------------------'''
'Calculate the Exposure Rate - Column Q
'Formula Used (as per excel) - ''''''''''=IF(P3="-","-",IF(P3<$P$1,"E1",IF(P3<$Q$1,"E2","E3")))''''''''''''
'Fields Used
'    Column P - Calculated Exposure Rate (% of Day)
'    Cell P1  - 'Calculation Data'!J6
'    Cell Q1  - 'Calculation Data'!J7
''---------------------------------------------------------------------------------------'''
Private Sub CalculateExposureRate()
    If txtExpRatePercCalc.Text = "-" Then
        txtExpRateCalc.Text = "-"
    Else
        If (Mid(txtExpRatePercCalc.Text, 1, Len(txtExpRatePercCalc.Text) - 1) / 100) < ActiveWorkbook.Sheets("Calculation Data").Range("$J$6").Value Then
            txtExpRateCalc.Text = "E1"
        Else
            If (Mid(txtExpRatePercCalc.Text, 1, Len(txtExpRatePercCalc.Text) - 1) / 100) < ActiveWorkbook.Sheets("Calculation Data").Range("$J$7").Value Then
                txtExpRateCalc.Text = "E2"
            Else
                txtExpRateCalc.Text = "E3"
            End If
        End If
    End If
End Sub

''---------------------------------------------------------------------------------------'''
'Calculate the Avoidance Possibility - Column S
'Formula Used (as per excel) - ''''''''''=IF(R3="","-",IF(R3="Yes","A1","A2"))''''''''''''
'Fields Used
'    Column R - Hazard: Possible to Avoid?
''---------------------------------------------------------------------------------------'''
Private Sub CalculateAvoidancePossibility()
    If ddlHazardAvoidance.Text = "" Then
        txtAvoidancePossibilityCalc.Text = "-"
    Else
        If ddlHazardAvoidance.Text = "Yes" Then
            txtAvoidancePossibilityCalc.Text = "A1"
        Else
            txtAvoidancePossibilityCalc.Text = "A2"
        End If
    End If
    
End Sub

''---------------------------------------------------------------------------------------'''
'Calculate the Risk Score - Column T
'Formula Used (as per excel) - ''''''''''{=IF(S3="-","-",INDEX('Calculation Data'!$D$6:$D$35,MATCH(1,(J3='Calculation Data'!$A$6:$A$35)*(Q3='Calculation Data'!$B$6:$B$35)*(S3='Calculation Data'!$C$6:$C$35),0)))}''''''''''''
'Fields Used
'   Column J - Severity
'   Column Q - Exposure Rate
'   Column S - Possibility of Avoidance
'   For Risk Score Refer to Table Risk Score Chart on Calculation Data sheet A5:D35
''---------------------------------------------------------------------------------------'''
Private Sub CalculateRiskScore()
    Dim sSeverity As String
    Dim sExposure As String
    Dim sAvoidance As String
    
    sSeverity = ddlSeverity.Text
    sExposure = txtExpRateCalc.Text
    sAvoidance = txtAvoidancePossibilityCalc.Text
    
    Dim rngSeverity As Range
    Dim rngExposure As Range
    Dim rngAvoidance As Range
    Dim rngRiskScore As Range
    
    Set rngSeverity = Sheets("Calculation Data").Range("$A$6:$A$35")
    Set rngExposure = Sheets("Calculation Data").Range("$B$6:$B$35")
    Set rngAvoidance = Sheets("Calculation Data").Range("$C$6:$C$35")
    Set rngRiskScore = Sheets("Calculation Data").Range("$D$6:$D$35")
    
    If sSeverity <> "" And sExposure <> "" And sAvoidance <> "" Then
        txtRiskScore.Text = WorksheetFunction.SumIfs(rngRiskScore, rngSeverity, sSeverity, rngExposure, sExposure, rngAvoidance, sAvoidance)
    End If

End Sub

''---------------------------------------------------------------------------------------'''
'Calculate the PLr - Column AG
'Formula Used (as per excel) - ''''''''''=IF(T3="-","-",(INDEX('Calculation Data'!$P$6:$P$10,MATCH(T3,'Calculation Data'!$O$6:$O$10,0))))''''''''''''
'Fields Used
'   Column T - Risk Score
'   For PLr Refer to PLr - Performance Level Required Table on Calculation Data sheet O5:P10
''---------------------------------------------------------------------------------------'''
Private Sub CalculatePLr()
    Dim iRiskScore As Integer
    
    iRiskScore = Val(txtRiskScore.Text)
    
    Select Case iRiskScore
        Case 1
            txtPLrCalc.Text = "a"
        Case 2
            txtPLrCalc.Text = "b"
        Case 3
            txtPLrCalc.Text = "c"
        Case 4
            txtPLrCalc.Text = "d"
        Case 5
            txtPLrCalc.Text = "e"
        Case "0"
            txtPLrCalc.Text = "-"
    End Select

End Sub

Private Sub cmdHelp_ASF_01_Checklist_Click()
    frmHelp_PG_ASF_01_Checklist.Show
End Sub

Private Sub cmdHelp_ASF_01_Name_Click()
    frmHelp_ASF_01_Name.Show
End Sub

Private Sub cmdHelp_ASF_02_Description_Click()
    frmHelp_ASF_02_Description.Show
End Sub

Private Sub cmdHelp_ASF_04_Manufacturer_Click()
    frmHelp_ASF_04_Manufacturer.Show
End Sub

Private Sub cmdHelp_ASF_05_PLCalc_Click()
    frmHelp_ASF_05_PLCalc.Show
End Sub



Private Sub cmdHelp_ASF_06_PLr_Click()
    frmHelp_ASF_06_PLr.Show
End Sub

Private Sub cmdHelp_ASF_07_ASF_OK_Click()
    frmHelp_ASF_07_ASF_OK.Show
End Sub

Private Sub cmdHelp_PG_01_Checklist_Click()
    frmHelp_PG_ASF_01_Checklist.Show
End Sub

Private Sub cmdHelp_PG_01_Name_Click()
    frmHelp_PG_01_Name.Show
End Sub

Private Sub cmdHelp_PG_02_Description_Click()
    frmHelp_PG_02_Description.Show
End Sub

Private Sub cmdHelp_PG_04_PG_OK_Click()
    frmHelp_PG_04_PG_OK.Show
End Sub

Private Sub cmdHelp_RS_01_IOES_Click()
    frmHelp_RS_01_IOES.Show
End Sub

Private Sub cmdHelp_RS_03_Severity_Click()
    frmHelp_RS_03_Severity.Show
End Sub

Private Sub cmdHelp_RS_06_Frequency_Click()
    frmHelp_RS_06_Frequency.Show
End Sub

Private Sub cmdHelp_RS_07_Duration_Click()
    frmHelp_RS_07_Duration.Show
End Sub

Private Sub cmdHelp_RS_08_People_Click()
    frmHelp_RS_08_People.Show
End Sub

Private Sub cmdHelp_RS_09_Avoidance_Click()
    frmHelp_RS_09_Avoidance.Show
End Sub

Private Sub cmdHelp_RS_11_Exposure_Click()
    frmHelp_RS_11_Exposure.Show
End Sub

Private Sub cmdNextGIPG_Click()
    MultiPage1.Value = 2
End Sub

Private Sub cmdNextGISF_Click()
    MultiPage1.Value = 3
End Sub

Private Sub cmdPrevGC_Click()
    MultiPage1.Value = 2
End Sub

Private Sub cmdPrevGIPG_Click()
    MultiPage1.Value = 0
End Sub

Private Sub cmdPrevGISF_Click()
    MultiPage1.Value = 1
End Sub

Private Sub cmdSave_Click()
    ''Save the Scenario Information
    
    Dim iRow As Integer
    Dim iScenarioId As Integer
    Dim i As Integer
    Dim rngSearch As Range
    
    iScenarioId = Val(txtScenarioID.Text)
    
    If lblRecType.Caption = "NEW" Then
        Application.ScreenUpdating = False
        Sheets("Master Data Table").Unprotect

        i = Sheets("Master Data Table").Range("ScenarioCount")
        Sheets("Master Data Table").Activate
        
        'N. Markey - 2015_02_01
        'Did not account for a blank worksheet, if i = 0, set do not insert a new row
        'If you do not skip the "insert", the new row will be formatted like row #2 (Headings)
        
        If i = 0 Then
            'Do nothing - Row #3 will be selected once you call "SaveScenario"
        Else
            'Original code (which assumes some data in the spreadsheet)
            Sheets("Master Data Table").Range("A" & i + 3).Select
            Selection.EntireRow.Insert
        End If
        
        If SaveScenario(i + 3) = True Then
            cmdCancel_Click
            lblRecType.Caption = ""
            
            i = Sheets("Master Data Table").Range("ScenarioCount")
            'Sheets("Master Data Table").Range("A" & i + 2).Select
            Sheets("Main Form").Activate
            Sheets("Main Form").Range("A3").Select
        End If
        Application.ScreenUpdating = True
        
    ElseIf lblRecType.Caption = "EDIT" Then
        Application.ScreenUpdating = False
        Sheets("Master Data Table").Activate
        Set rngSearch = Sheets("Master Data Table").Range("A3:A1000")
        iRow = WorksheetFunction.Match(iScenarioId, rngSearch, 0) + 2
        
        If SaveScenario(iRow) Then
            cmdCancel_Click
            lblRecType.Caption = ""
            'Sheets("Master Data Table").Range("A" & iRow).Select
            Sheets("Main Form").Activate
            Sheets("Main Form").Range("A3").Select
        End If
        Application.ScreenUpdating = True
    End If
    
    
End Sub

Private Function SaveScenario(iRowNum As Integer) As Boolean
            
    SaveScenario = False
            
    Sheets("Master Data Table").Protect UserInterfaceonly:=True
    
    Sheets("Master Data Table").Cells(iRowNum, 1).Value = txtScenarioID.Text                            'Scenario Id
        
    '''''''''''Risk Scoring Section''''''''''''''''''''
    Sheets("Master Data Table").Cells(iRowNum, 2).Value = ddlScenarioStatus.Text                        'Scenario Status
    Sheets("Master Data Table").Cells(iRowNum, 4).Value = txtTaskDescription.Text                       'Task Description
    Sheets("Master Data Table").Cells(iRowNum, 5).Value = ddlFullIOES.Text                              'Full IOES
    Sheets("Master Data Table").Cells(iRowNum, 7).Value = txtHazardDesc.Text                            'Hazard Description
    Sheets("Master Data Table").Cells(iRowNum, 8).Value = txtExpectedInjury.Text                        'Expected Injury
    Sheets("Master Data Table").Cells(iRowNum, 10).Value = ddlSeverity.Text                             'Severity
    Sheets("Master Data Table").Cells(iRowNum, 11).Value = ddlTimePeriod.Text                           'Time Period
    Sheets("Master Data Table").Cells(iRowNum, 12).Value = txtDurationTimePrdHrs.Text                   'Duration of Time Period
    Sheets("Master Data Table").Cells(iRowNum, 13).Value = txtTaskFreq.Text                             'Frequency of Task
    Sheets("Master Data Table").Cells(iRowNum, 14).Value = txtDurationExposure.Text                     'Duration of Exposure
    Sheets("Master Data Table").Cells(iRowNum, 15).Value = txtPeopleExposed.Text                        'Number of People Exposed
    
    Sheets("Master Data Table").Cells(iRowNum, 16).Locked = True
    Sheets("Master Data Table").Cells(iRowNum, 16).FormulaHidden = False
    
    Sheets("Master Data Table").Cells(iRowNum, 16).FormulaR1C1 _
                = "=IF(R[0]C[-1]>0,(24/R[0]C[-4])*R[0]C[-3]*R[0]C[-2]*R[0]C[-1]/1440,""-"")"            'Calculated Exposure Rate
    
    Sheets("Master Data Table").Cells(iRowNum, 17).Locked = True
    Sheets("Master Data Table").Cells(iRowNum, 17).FormulaHidden = False
    'Sheets("Master Data Table").Protect UserInterfaceonly:=True
    
    Sheets("Master Data Table").Cells(iRowNum, 17).FormulaR1C1 _
                = "=IF(R[0]C[-1]=""-"",""-"",IF(R[0]C[-1]<R1C16,""E1"",IF(R[0]C[-1]<R1C17,""E2"",""E3"")))" 'Exposure Rate
                
    Sheets("Master Data Table").Cells(iRowNum, 18).Value = ddlHazardAvoidance.Text                      'Hazard: Possible to Avoid?
    
    Sheets("Master Data Table").Cells(iRowNum, 19).Locked = True
    Sheets("Master Data Table").Cells(iRowNum, 19).FormulaHidden = False
    
    Sheets("Master Data Table").Cells(iRowNum, 19).FormulaR1C1 _
                = "=IF(R[0]C[-1]="""",""-"",IF(R[0]C[-1]=""Yes"",""A1"",""A2""))"                       'Possibility of Avoidance
    
    Sheets("Master Data Table").Cells(iRowNum, 20).Locked = True
    Sheets("Master Data Table").Cells(iRowNum, 20).FormulaHidden = False
    
    Sheets("Master Data Table").Cells(iRowNum, 20).FormulaArray = _
                "=IF(R[0]C[-1]=""-"",""-"",INDEX('Calculation Data'!R6C4:R35C4,MATCH(1,(R[0]C[-10]='Calculation Data'!R6C1:R35C1)*(R[0]C[-3]='Calculation Data'!R6C2:R35C2)*(R[0]C[-1]='Calculation Data'!R6C3:R35C3),0)))"           'Risk Score
    '''''''''''----------------'''''''''''''''''''''''''
    
    '''''''''''Gap Id - Physical Guarding Section''''''''''
    Sheets("Master Data Table").Cells(iRowNum, 22).Value = txtNamePG.Text                       'Name - Physical Guarding
    Sheets("Master Data Table").Cells(iRowNum, 23).Value = txtDescPG.Text                       'Description/Notes
    Sheets("Master Data Table").Cells(iRowNum, 24).Value = ddlChecklistResults.Text             'Check List Results
    Sheets("Master Data Table").Cells(iRowNum, 25).Value = ddlPhysicalGuarding.Text             'Physical Guarding Ok?
    Sheets("Master Data Table").Cells(iRowNum, 26).Value = txtGapClosureProposalPG.Text         'Gap Closure Proposal - Physical Guarding
    '''''''''''----------------'''''''''''''''''''''''''
    
    '''''''''''Gap Id - Saftey Function Section''''''''''
    Sheets("Master Data Table").Cells(iRowNum, 28).Value = txtSafetyFunctionName.Text           'Name of the Safety Function
    Sheets("Master Data Table").Cells(iRowNum, 29).Value = txtFuncDesc.Text                     'Functional Description/Notes
    Sheets("Master Data Table").Cells(iRowNum, 30).Value = ddlInspectionResults.Text            'Checklist/Field Insepection Results
    Sheets("Master Data Table").Cells(iRowNum, 31).Value = ddlManInstMet.Text                   'Manufacturers Instructions Met
    Sheets("Master Data Table").Cells(iRowNum, 32).Value = txtPLCalc.Text                       'PL
    
    Sheets("Master Data Table").Cells(iRowNum, 33).Locked = True
    Sheets("Master Data Table").Cells(iRowNum, 33).FormulaHidden = False
    
    Sheets("Master Data Table").Cells(iRowNum, 33).Value = _
                "=IF(R[0]C[-13]=""-"",""-"",(INDEX('Calculation Data'!R6C16:R10C16,MATCH(R[0]C[-13],'Calculation Data'!R6C15:R10C15,0))))"        'PLr
    Sheets("Master Data Table").Cells(iRowNum, 34).Value = ddlSafetyFuncOk.Text                 'Safety Function OK?
    Sheets("Master Data Table").Cells(iRowNum, 35).Value = txtGapClosureProposalSF.Text         'Gap Closure Proposal
    '''''''''''----------------'''''''''''''''''''''''''
    
    
    '''''''''''Gap Closure Section''''''''''
    Sheets("Master Data Table").Cells(iRowNum, 37).Value = txtNotes.Text                        'Notes
    Sheets("Master Data Table").Cells(iRowNum, 39).Value = txtActualSoln.Text                   'Actual Solution
    Sheets("Master Data Table").Cells(iRowNum, 40).Value = ddlGapClosed.Text                    'Gap Closed?
    If ddlGapClosed.Text = "" Then                                                              'If no, Variance Approved
        'If the user has not stated whether or not the gap is closed, clear this value (null)
        Sheets("Master Data Table").Cells(iRowNum, 41).Value = ""
        'If for some reason the user did select the checkbox, ensure that the value does get set to "Yes"
        If (IIf(chkVariance.Value, "Yes", "No") = "Yes") Then
            Sheets("Master Data Table").Cells(iRowNum, 41).Value = IIf(chkVariance.Value, "Yes", "No")
        End If
    Else
        'Only update this field if the user has stated whether or not the gap is closed.
        Sheets("Master Data Table").Cells(iRowNum, 41).Value = IIf(chkVariance.Value, "Yes", "No")
    End If
    Sheets("Master Data Table").Cells(iRowNum, 42).Value = txtDateCompletedGC.Text              'Date Complete - Gap Closure
    Sheets("Master Data Table").Cells(iRowNum, 43).Value = txtMOC.Text                          'MOC
    Sheets("Master Data Table").Cells(iRowNum, 45).Value = txtDateCompletedValidation.Text      'Date Completed - Validation
    Sheets("Master Data Table").Cells(iRowNum, 46).Value = txtCompletedBy.Text                  'Completed By
    Sheets("Master Data Table").Cells(iRowNum, 47).Value = txtSuppDoc.Text                      'Supporting Documentation
    '''''''''''----------------'''''''''''''''''''''''''
    
    SaveScenario = True
End Function

Private Function LoadScenario(iRowNum As Integer) As Boolean
    Dim SourceWorksheet As String
                
    LoadScenario = False
            
    'N. Markey - 2015_04_17
    'Added code which allows for viewing the Example Scenarios in the form view
    'Code to view the actual Master Data Table data still exists
    'Saving of data when viewing Example Scenarios is disabled
    
    If lblRecType.Caption = "EDIT" Then
        'Form Call was for the purpose of editing MRA data in the Master Data Table
        SourceWorksheet = "Master Data Table"
    ElseIf lblRecType.Caption = "EDIT2" Then
        'Form Call was for the purpose of viewing the example scenarios in the form
        SourceWorksheet = "Example Scenarios"
    End If
    
    txtScenarioID.Text = Sheets(SourceWorksheet).Cells(iRowNum, 1).Value                   'Scenario Id
        
    '''''''''''Risk Scoring Section''''''''''''''''''''
    ddlScenarioStatus.Text = Sheets(SourceWorksheet).Cells(iRowNum, 2).Value               'Scenario Status
    txtTaskDescription.Text = Sheets(SourceWorksheet).Cells(iRowNum, 4).Value              'Task Description
    ddlFullIOES.Text = Sheets(SourceWorksheet).Cells(iRowNum, 5).Value                     'Full IOES
    txtHazardDesc.Text = Sheets(SourceWorksheet).Cells(iRowNum, 7).Value                   'Hazard Description
    txtExpectedInjury.Text = Sheets(SourceWorksheet).Cells(iRowNum, 8).Value               'Expected Injury
    ddlSeverity.Text = Sheets(SourceWorksheet).Cells(iRowNum, 10).Value                    'Severity
    ddlTimePeriod.Text = Sheets(SourceWorksheet).Cells(iRowNum, 11).Value                  'Time Period
    txtDurationTimePrdHrs.Text = Sheets(SourceWorksheet).Cells(iRowNum, 12).Value          'Duration of Time Period
    txtTaskFreq.Text = Sheets(SourceWorksheet).Cells(iRowNum, 13).Value                    'Frequency of Task
    txtDurationExposure.Text = Sheets(SourceWorksheet).Cells(iRowNum, 14).Value            'Duration of Exposure
    txtPeopleExposed.Text = Sheets(SourceWorksheet).Cells(iRowNum, 15).Value               'Number of People Exposed
    'txtExpRatePercCalc.Text = Sheets(SourceWorksheet).Cells(iRowNum, 16).Value             'Calculated Exposure Rate
    'txtExpRateCalc.Text = Sheets(SourceWorksheet).Cells(iRowNum, 17).Value                 'Exposure Rate
    ddlHazardAvoidance.Text = Sheets(SourceWorksheet).Cells(iRowNum, 18).Value             'Hazard: Possible to Avoid?
    'txtAvoidancePossibilityCalc.Text = Sheets(SourceWorksheet).Cells(iRowNum, 19).Value    'Possibility of Avoidance
    'txtRiskScore.Text = Sheets(SourceWorksheet).Cells(iRowNum, 20).Value                   'Risk Score
    '''''''''''----------------'''''''''''''''''''''''''
    
    '''''''''''Gap Id - Physical Guarding Section''''''''''
    txtNamePG.Text = Sheets(SourceWorksheet).Cells(iRowNum, 22).Value                      'Name - Physical Guarding
    txtDescPG.Text = Sheets(SourceWorksheet).Cells(iRowNum, 23).Value                      'Description/Notes
    ddlChecklistResults.Text = Sheets(SourceWorksheet).Cells(iRowNum, 24).Value            'Check List Results
    ddlPhysicalGuarding.Text = Sheets(SourceWorksheet).Cells(iRowNum, 25).Value            'Physical Guarding Ok?
    txtGapClosureProposalPG.Text = Sheets(SourceWorksheet).Cells(iRowNum, 26).Value        'Gap Closure Proposal - Physical Guarding
    '''''''''''----------------'''''''''''''''''''''''''
    
    '''''''''''Gap Id - Saftey Function Section''''''''''
    txtSafetyFunctionName.Text = Sheets(SourceWorksheet).Cells(iRowNum, 28).Value          'Name of the Safety Function
    txtFuncDesc.Text = Sheets(SourceWorksheet).Cells(iRowNum, 29).Value                    'Functional Description/Notes
    ddlInspectionResults.Text = Sheets(SourceWorksheet).Cells(iRowNum, 30).Value           'Checklist/Field Insepection Results
    ddlManInstMet.Text = Sheets(SourceWorksheet).Cells(iRowNum, 31).Value                  'Manufacturers Instructions Met
    txtPLCalc.Text = Sheets(SourceWorksheet).Cells(iRowNum, 32).Value                      'PL
    'txtPLrCalc.Text = Sheets(SourceWorksheet).Cells(iRowNum, 33).Value                     'PLr
    ddlSafetyFuncOk.Text = Sheets(SourceWorksheet).Cells(iRowNum, 34).Value                'Safety Function OK?
    txtGapClosureProposalSF.Text = Sheets(SourceWorksheet).Cells(iRowNum, 35).Value        'Gap Closure Proposal
    '''''''''''----------------'''''''''''''''''''''''''
    
    
    '''''''''''Gap Closure Section''''''''''
    txtNotes.Text = Sheets(SourceWorksheet).Cells(iRowNum, 37).Value                       'Notes
    txtActualSoln.Text = Sheets(SourceWorksheet).Cells(iRowNum, 39).Value                  'Actual Solution
    ddlGapClosed.Text = Sheets(SourceWorksheet).Cells(iRowNum, 40).Value                   'Gap Closed?
    If Sheets(SourceWorksheet).Cells(iRowNum, 41).Value = "Yes" Then
        chkVariance.Value = True                                                                'If no, Variance Approved
    Else
        chkVariance.Value = False
    End If
    txtDateCompletedGC.Text = Sheets(SourceWorksheet).Cells(iRowNum, 42).Value             'Date Complete - Gap Closure
    txtMOC.Text = Sheets(SourceWorksheet).Cells(iRowNum, 43).Value                         'MOC
    txtDateCompletedValidation.Text = Sheets(SourceWorksheet).Cells(iRowNum, 45).Value     'Date Completed - Validation
    txtCompletedBy.Text = Sheets(SourceWorksheet).Cells(iRowNum, 46).Value                 'Completed By
    txtSuppDoc.Text = Sheets(SourceWorksheet).Cells(iRowNum, 47).Value                     'Supporting Documentation
    '''''''''''----------------'''''''''''''''''''''''''
    
    LoadScenario = True
End Function

Private Sub ddlChecklistResults_Exit(ByVal Cancel As MSForms.ReturnBoolean)
   If ddlChecklistResults.MatchFound = False And ddlChecklistResults.Value <> "" Then
        MsgBox "This is not a valid selection.", vbCritical, "Checklist Results"
        Cancel = True
        ddlChecklistResults.SelStart = 0
        ddlChecklistResults.SelLength = Len(ddlChecklistResults.Value)
    End If

End Sub

Private Sub ddlFullIOES_Exit(ByVal Cancel As MSForms.ReturnBoolean)
   If ddlFullIOES.MatchFound = False And ddlFullIOES.Value <> "" Then
        MsgBox "This is not a valid selection.", vbCritical, "Full IOES"
        Cancel = True
        ddlFullIOES.SelStart = 0
        ddlFullIOES.SelLength = Len(ddlFullIOES.Value)
    End If
End Sub

Private Sub ddlGapClosed_Exit(ByVal Cancel As MSForms.ReturnBoolean)
   If ddlGapClosed.MatchFound = False And ddlGapClosed.Value <> "" Then
        MsgBox "This is not a valid selection.", vbCritical, "Gap Closed"
        Cancel = True
        ddlGapClosed.SelStart = 0
        ddlGapClosed.SelLength = Len(ddlGapClosed.Value)
    End If

End Sub

Private Sub ddlHazardAvoidance_Change()
    CalculateAvoidancePossibility
End Sub

Private Sub ddlHazardAvoidance_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If ddlHazardAvoidance.MatchFound = False And ddlHazardAvoidance.Value <> "" Then
        MsgBox "This is not a valid selection.", vbCritical, "Select Hazard Avoidance"
        Cancel = True
        ddlHazardAvoidance.SelStart = 0
        ddlHazardAvoidance.SelLength = Len(ddlHazardAvoidance.Value)
    End If
End Sub

Private Sub ddlInspectionResults_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If ddlInspectionResults.MatchFound = False And ddlInspectionResults.Value <> "" Then
        MsgBox "This is not a valid selection.", vbCritical, "Select Inspection Results"
        Cancel = True
        ddlInspectionResults.SelStart = 0
        ddlInspectionResults.SelLength = Len(ddlInspectionResults.Value)
    End If
End Sub

Private Sub ddlManInstMet_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If ddlManInstMet.MatchFound = False And ddlManInstMet.Value <> "" Then
        MsgBox "This is not a valid selection.", vbCritical, "Select Manufacturers Instruction"
        Cancel = True
        ddlManInstMet.SelStart = 0
        ddlManInstMet.SelLength = Len(ddlManInstMet.Value)
    End If
End Sub

Private Sub ddlPhysicalGuarding_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If ddlPhysicalGuarding.MatchFound = False And ddlPhysicalGuarding.Value <> "" Then
        MsgBox "This is not a valid selection.", vbCritical, "Select Physical Guarding"
        Cancel = True
        ddlPhysicalGuarding.SelStart = 0
        ddlPhysicalGuarding.SelLength = Len(ddlPhysicalGuarding.Value)
    End If

End Sub

Private Sub ddlSafetyFuncOk_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If ddlSafetyFuncOk.MatchFound = False And ddlSafetyFuncOk.Value <> "" Then
        MsgBox "This is not a valid selection.", vbCritical, "Select Safety Function OK"
        Cancel = True
        ddlSafetyFuncOk.SelStart = 0
        ddlSafetyFuncOk.SelLength = Len(ddlSafetyFuncOk.Value)
    End If

End Sub

Private Sub ddlScenarioStatus_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If ddlScenarioStatus.MatchFound = False And ddlScenarioStatus.Value <> "" Then
        MsgBox "This is not a valid selection.", vbCritical, "Select Scenario Status"
        Cancel = True
        ddlScenarioStatus.SelStart = 0
        ddlScenarioStatus.SelLength = Len(ddlScenarioStatus.Value)
    End If
End Sub

Private Sub ddlSeverity_Change()
    CalculateRiskScore
End Sub

Private Sub ddlSeverity_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If ddlSeverity.MatchFound = False And ddlSeverity.Value <> "" Then
        MsgBox "This is not a valid selection.", vbCritical, "Select Severity"
        Cancel = True
        ddlSeverity.SelStart = 0
        ddlSeverity.SelLength = Len(ddlSeverity.Value)
    End If

End Sub

Private Sub ddlTimePeriod_Change()
    CaluclateTimePeriod
End Sub

Private Sub CaluclateTimePeriod()
    Select Case ddlTimePeriod.Text
        Case "Day"
            txtDurationTimePrdHrs.Text = 24
            txtDurationTimePrdHrs.Enabled = False
        Case "Week"
            txtDurationTimePrdHrs.Text = 168
            txtDurationTimePrdHrs.Enabled = False
        Case "Month"
            txtDurationTimePrdHrs.Text = 720
            txtDurationTimePrdHrs.Enabled = False
        Case "Quarter"
            txtDurationTimePrdHrs.Text = 2184
            txtDurationTimePrdHrs.Enabled = False
        Case "Year"
            txtDurationTimePrdHrs.Text = 8760
            txtDurationTimePrdHrs.Enabled = False
        Case "Shift"
            txtDurationTimePrdHrs.Text = ""
            txtDurationTimePrdHrs.Enabled = True
        
    End Select
End Sub

Private Sub ddlTimePeriod_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If ddlTimePeriod.MatchFound = False And ddlTimePeriod.Value <> "" Then
        MsgBox "This is not a valid selection.", vbCritical, "Select Time Period"
        Cancel = True
        ddlTimePeriod.SelStart = 0
        ddlTimePeriod.SelLength = Len(ddlTimePeriod.Value)
    End If

End Sub

Private Sub txtAvoidancePossibilityCalc_Change()
    CalculateRiskScore
End Sub

Private Sub txtExpRateCalc_Change()
    CalculateRiskScore
End Sub

Private Sub txtExpRatePercCalc_Change()
    If txtExpRatePercCalc.Text = "" Then Exit Sub
    CalculateExposureRate
End Sub
    
Private Sub txtHazardDesc_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    MultiPage1.TabIndex = 0
End Sub

Private Sub txtPeopleExposed_Change()
    CalculateExposureRatePercentage
End Sub

Private Sub txtDurationTimePrdHrs_Change()
    CalculateExposureRatePercentage
End Sub

Private Sub txtRiskScore_Change()
    CalculatePLr
End Sub

Private Sub txtTaskFreq_Change()
    CalculateExposureRatePercentage
End Sub

Private Sub txtDurationExposure_Change()
    CalculateExposureRatePercentage
End Sub

Private Sub UserForm_Activate()
    Dim rngScenario As Range
    Dim scenarioId As Integer
    
    If lblRecType.Caption = "NEW" Then
        'ClearValues
        scenarioId = Sheets("Master Data Table").Range("ScenarioCount")
        
            'N. Markey - 2015_02_01
            'Did not account for a blank worksheet, if scenarioId = 0, set the first value to 1
            If scenarioId = 0 Then
                txtScenarioID.Text = 1
            Else
                'Original code (which assumes some data in the spreadsheet)
                txtScenarioID.Text = Sheets("Master Data Table").Cells(scenarioId + 2, 1).Value + 1
            End If
            
            'Enable the "Save" button (since it may have been disabled when viewing example scenarios)
            cmdSave.Enabled = True
                                
    ElseIf lblRecType.Caption = "EDIT" Then
        Call LoadScenario(Val(lblRowNum.Caption))
        'Enable the "Save" button (since it may have been disabled when viewing example scenarios)
        cmdSave.Enabled = True
            
    'N. Markey - 2015_04_17
    'Added another call to the form -- EDIT2 denotes that a user wants to view the example MRA scenarios
    ElseIf lblRecType.Caption = "EDIT2" Then
        Call LoadScenario(Val(lblRowNum.Caption))
        'Disable the "Save" button for the example scenarios
        cmdSave.Enabled = False
                
    End If
    
    MultiPage1.Value = 0
    ddlScenarioStatus.SetFocus
    
End Sub

Private Sub ClearValues()
    
    txtScenarioID.Text = ""              'Scenario Id
        
    '''''''''''Risk Scoring Section''''''''''''''''''''
    ddlScenarioStatus.Text = ""               'Scenario Status
    txtTaskDescription.Text = ""              'Task Description
    ddlFullIOES.Text = ""                     'Full IOES
    txtHazardDesc.Text = ""                   'Hazard Description
    txtExpectedInjury.Text = ""               'Expected Injury
    ddlSeverity.Text = ""                    'Severity
    ddlTimePeriod.Text = ""                  'Time Period
    txtDurationTimePrdHrs.Text = ""          'Duration of Time Period
    txtTaskFreq.Text = ""                    'Frequency of Task
    txtDurationExposure.Text = ""            'Duration of Exposure
    txtPeopleExposed.Text = ""               'Number of People Exposed
    txtExpRatePercCalc.Text = ""             'Calculated Exposure Rate
    txtExpRateCalc.Text = ""                 'Exposure Rate
    ddlHazardAvoidance.Text = ""             'Hazard: Possible to Avoid?
    txtAvoidancePossibilityCalc.Text = ""    'Possibility of Avoidance
    txtRiskScore.Text = ""                   'Risk Score
    '''''''''''----------------'''''''''''''''''''''''''
    
    '''''''''''Gap Id - Physical Guarding Section''''''''''
    txtNamePG.Text = ""                      'Name - Physical Guarding
    txtDescPG.Text = ""                      'Description/Notes
    ddlChecklistResults.Text = ""            'Check List Results
    ddlPhysicalGuarding.Text = ""            'Physical Guarding Ok?
    txtGapClosureProposalPG.Text = ""        'Gap Closure Proposal - Physical Guarding
    '''''''''''----------------'''''''''''''''''''''''''
    
    '''''''''''Gap Id - Saftey Function Section''''''''''
    txtSafetyFunctionName.Text = ""          'Name of the Safety Function
    txtFuncDesc.Text = ""                    'Functional Description/Notes
    ddlInspectionResults.Text = ""           'Checklist/Field Insepection Results
    ddlManInstMet.Text = ""                  'Manufacturers Instructions Met
    txtPLCalc.Text = ""                      'PL
    txtPLrCalc.Text = ""                     'PLr
    ddlSafetyFuncOk.Text = ""                'Safety Function OK?
    txtGapClosureProposalSF.Text = ""        'Gap Closure Proposal
    '''''''''''----------------'''''''''''''''''''''''''
    
    
    '''''''''''Gap Closure Section''''''''''
    txtNotes.Text = ""                       'Notes
    txtActualSoln.Text = ""                  'Actual Solution
    ddlGapClosed.Text = ""                   'Gap Closed?
    chkVariance.Value = False                'If no, Variance Approved
    txtDateCompletedGC.Text = ""             'Date Complete - Gap Closure
    txtMOC.Text = ""                         'MOC
    txtDateCompletedValidation.Text = ""     'Date Completed - Validation
    txtCompletedBy.Text = ""                 'Completed By
    txtSuppDoc.Text = ""                     'Supporting Documentation
    '''''''''''----------------'''''''''''''''''''''''''

End Sub



INQUEST-PP=macro
