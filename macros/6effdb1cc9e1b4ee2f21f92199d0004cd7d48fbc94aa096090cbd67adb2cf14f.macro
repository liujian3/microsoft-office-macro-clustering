Attribute VB_Name = "RibbonSetup"
'**************************************************************
'AUTHOR: Chris Newman, TheSpreadsheetGuru
'Instructions on how to use this template can be found at:
'www.TheSpreadsheetGuru.com/blog/create-first-excel-addin
'Modifications by Roderick Edwards rodericke.com/xlsuper
'**************************************************************

Sub GetVisible(control As IRibbonControl, ByRef MakeVisible)
'PURPOSE: Show/Hide buttons based on how many you need (False = Hide/True = Show)


If Sheet3.Range("D13") = "Standalone" Then
Select Case control.ID
Case "GroupA": MakeVisible = False
Case "GroupB": MakeVisible = False
Case "GroupC": MakeVisible = False
Case "GroupD": MakeVisible = False
Case "GroupE": MakeVisible = False
Case "GroupF": MakeVisible = False
End Select
Exit Sub
End If

If Sheet3.Range("D13") = "Add-in #1" Then
Select Case control.ID
Case "GroupA": MakeVisible = True
Case "aButton01": MakeVisible = True
Case "aButton01": RibbonImage = "ControlToolboxOutlook"
Case "GroupB": MakeVisible = False
Case "GroupC": MakeVisible = False
Case "GroupD": MakeVisible = False
Case "GroupE": MakeVisible = False
Case "GroupF": MakeVisible = False
End Select
End If

If Sheet3.Range("D13") = "Add-in #2" Then
Select Case control.ID
  Case "GroupA": MakeVisible = True
  Case "aButton01": MakeVisible = True
  Case "aButton02": MakeVisible = True
  Case "aButton03": MakeVisible = True
  Case "aButton04": MakeVisible = True
  Case "aButton05": MakeVisible = True
  Case "aButton06": MakeVisible = True
  Case "aButton07": MakeVisible = True
  Case "aButton08": MakeVisible = True
  Case "aButton09": MakeVisible = True
  Case "aButton10": MakeVisible = True
  
  Case "GroupB": MakeVisible = True
  Case "bButton01": MakeVisible = True
  Case "bButton02": MakeVisible = True
  Case "bButton03": MakeVisible = True
  Case "bButton04": MakeVisible = True
  Case "bButton05": MakeVisible = True
  Case "bButton06": MakeVisible = False
  Case "bButton07": MakeVisible = False
  Case "bButton08": MakeVisible = False
  Case "bButton09": MakeVisible = False
  Case "bButton10": MakeVisible = False
  
  Case "GroupC": MakeVisible = True
  Case "cButton01": MakeVisible = True
  Case "cButton02": MakeVisible = False
  Case "cButton03": MakeVisible = False
  Case "cButton04": MakeVisible = False
  Case "cButton05": MakeVisible = False
  Case "cButton06": MakeVisible = False
  Case "cButton07": MakeVisible = False
  Case "cButton08": MakeVisible = False
  Case "cButton09": MakeVisible = False
  Case "cButton10": MakeVisible = False
  
  Case "GroupD": MakeVisible = False
  Case "dButton01": MakeVisible = True
  Case "dButton02": MakeVisible = True
  Case "dButton03": MakeVisible = True
  Case "dButton04": MakeVisible = True
  Case "dButton05": MakeVisible = True
  Case "dButton06": MakeVisible = True
  Case "dButton07": MakeVisible = True
  Case "dButton08": MakeVisible = True
  Case "dButton09": MakeVisible = True
  Case "dButton10": MakeVisible = True
  
  Case "GroupE": MakeVisible = False
  Case "eButton01": MakeVisible = True
  Case "eButton02": MakeVisible = True
  Case "eButton03": MakeVisible = True
  Case "eButton04": MakeVisible = True
  Case "eButton05": MakeVisible = True
  Case "eButton06": MakeVisible = True
  Case "eButton07": MakeVisible = True
  Case "eButton08": MakeVisible = True
  Case "eButton09": MakeVisible = True
  Case "eButton10": MakeVisible = True
  
  Case "GroupF": MakeVisible = False
  Case "fButton01": MakeVisible = True
  Case "fButton02": MakeVisible = True
  Case "fButton03": MakeVisible = True
  Case "fButton04": MakeVisible = True
  Case "fButton05": MakeVisible = True
  Case "fButton06": MakeVisible = True
  Case "fButton07": MakeVisible = True
  Case "fButton08": MakeVisible = True
  Case "fButton09": MakeVisible = True
  Case "fButton10": MakeVisible = True
  End Select
End If

End Sub

Sub GetLabel(ByVal control As IRibbonControl, ByRef Labeling)
'PURPOSE: Determine the text to go along with your Tab, Groups, and Buttons

If Sheet3.Range("D13") = "Standalone" Then
Select Case control.ID
'do nothing
End Select
Exit Sub
End If


If Sheet3.Range("D13") = "Add-in #1" Then
Select Case control.ID
Case "CustomTab": Labeling = "XLSuperTool"
Case "GroupA": Labeling = "XLSuperTools"
Case "aButton01": Labeling = "Launch"
End Select
End If

If Sheet3.Range("D13") = "Add-in #2" Then
Select Case control.ID
  
  Case "CustomTab": Labeling = "XLSuperTool"
  
  Case "GroupA": Labeling = "Tools"
  Case "aButton01": Labeling = "Launch"
  Case "aButton02": Labeling = "Closer"
  Case "aButton03": Labeling = "Data Divider"
  Case "aButton04": Labeling = "Massmailer"
  Case "aButton05": Labeling = "Prefixer-Suffixer"
  Case "aButton06": Labeling = "Sheet Comparer"
  Case "aButton07": Labeling = "Tabificator"
  Case "aButton08": Labeling = "Increase/Decrease"
  Case "aButton09": Labeling = "Bookmarks"
  Case "aButton10": Labeling = "XLST UD Functions"
  
  Case "GroupB": Labeling = "Converters and Calculators"
  Case "bButton01": Labeling = "Calculator"
  Case "bButton02": Labeling = "Unit Convert"
  Case "bButton03": Labeling = "Currency"
  Case "bButton04": Labeling = "Dims Calc"
  Case "bButton05": Labeling = "FAK Estimator"
  Case "bButton06": Labeling = "Button"
  Case "bButton07": Labeling = "Button"
  Case "bButton08": Labeling = "Button"
  Case "bButton09": Labeling = "Button"
  Case "bButton10": Labeling = "Button"
  
  Case "GroupC": Labeling = "Eazy Buttons"
  Case "cButton01": Labeling = "Launch"
  Case "cButton02": Labeling = "Button"
  Case "cButton03": Labeling = "Button"
  Case "cButton04": Labeling = "Button"
  Case "cButton05": Labeling = "Button"
  Case "cButton06": Labeling = "Button"
  Case "cButton07": Labeling = "Button"
  Case "cButton08": Labeling = "Button"
  Case "cButton09": Labeling = "Button"
  Case "cButton10": Labeling = "Button"
  
  Case "GroupD": Labeling = "Group Name"
  Case "dButton01": Labeling = "Button"
  Case "dButton02": Labeling = "Button"
  Case "dButton03": Labeling = "Button"
  Case "dButton04": Labeling = "Button"
  Case "dButton05": Labeling = "Button"
  Case "dButton06": Labeling = "Button"
  Case "dButton07": Labeling = "Button"
  Case "dButton08": Labeling = "Button"
  Case "dButton09": Labeling = "Button"
  Case "dButton10": Labeling = "Button"
  
  Case "GroupE": Labeling = "Group Name"
  Case "eButton01": Labeling = "Button"
  Case "eButton02": Labeling = "Button"
  Case "eButton03": Labeling = "Button"
  Case "eButton04": Labeling = "Button"
  Case "eButton05": Labeling = "Button"
  Case "eButton06": Labeling = "Button"
  Case "eButton07": Labeling = "Button"
  Case "eButton08": Labeling = "Button"
  Case "eButton09": Labeling = "Button"
  Case "eButton10": Labeling = "Button"
  
  Case "GroupF": Labeling = "Group Name"
  Case "fButton01": Labeling = "Button"
  Case "fButton02": Labeling = "Button"
  Case "fButton03": Labeling = "Button"
  Case "fButton04": Labeling = "Button"
  Case "fButton05": Labeling = "Button"
  Case "fButton06": Labeling = "Button"
  Case "fButton07": Labeling = "Button"
  Case "fButton08": Labeling = "Button"
  Case "fButton09": Labeling = "Button"
  Case "fButton10": Labeling = "Button"
  
End Select
End If
   
End Sub

Sub GetImage(control As IRibbonControl, ByRef RibbonImage)
'PURPOSE: Tell each button which image to load from the Microsoft Icon Library
'TIPS: Image names are case sensitive, if image does not appear in ribbon after re-starting Excel, the image name is incorrect

If Sheet3.Range("D13") = "Add-in #1" Then
Select Case control.ID
Case "aButton01": RibbonImage = "ControlToolboxOutlook"
End Select
End If

If Sheet3.Range("D13") = "Add-in #2" Then
Select Case control.ID
  
  Case "aButton01": RibbonImage = "ControlToolboxOutlook"
  Case "aButton02": RibbonImage = "CloseDocument"
  Case "aButton03": RibbonImage = "DatabaseDocumenter"
  Case "aButton04": RibbonImage = "MailMergeStartEmailMergeMenu"
  Case "aButton05": RibbonImage = "StartOfLine"
  Case "aButton06": RibbonImage = "CompareWithLatest"
  Case "aButton07": RibbonImage = "GalPosition"
  Case "aButton08": RibbonImage = "ActiveXSpinButton"
  Case "aButton09": RibbonImage = "AddToFavorites"
  Case "aButton10": RibbonImage = "EquationEditor"
  
  Case "bButton01": RibbonImage = "Calculator"
  Case "bButton02": RibbonImage = "JustifyThaiVertical"
  Case "bButton03": RibbonImage = "InternationalCurrency"
  Case "bButton04": RibbonImage = "ArrangeByCompany"
  Case "bButton05": RibbonImage = "GroupUMLModel"
  Case "bButton06": RibbonImage = "ObjectPictureFill"
  Case "bButton07": RibbonImage = "ObjectPictureFill"
  Case "bButton08": RibbonImage = "ObjectPictureFill"
  Case "bButton09": RibbonImage = "ObjectPictureFill"
  Case "bButton10": RibbonImage = "ObjectPictureFill"
  
  Case "cButton01": RibbonImage = "GroupOrganizationChartStyleClassic"
  Case "cButton02": RibbonImage = "ObjectPictureFill"
  Case "cButton03": RibbonImage = "ObjectPictureFill"
  Case "cButton04": RibbonImage = "ObjectPictureFill"
  Case "cButton05": RibbonImage = "ObjectPictureFill"
  Case "cButton06": RibbonImage = "ObjectPictureFill"
  Case "cButton07": RibbonImage = "ObjectPictureFill"
  Case "cButton08": RibbonImage = "ObjectPictureFill"
  Case "cButton09": RibbonImage = "ObjectPictureFill"
  Case "cButton10": RibbonImage = "ObjectPictureFill"
  
  Case "dButton01": RibbonImage = "ObjectPictureFill"
  Case "dButton02": RibbonImage = "ObjectPictureFill"
  Case "dButton03": RibbonImage = "ObjectPictureFill"
  Case "dButton04": RibbonImage = "ObjectPictureFill"
  Case "dButton05": RibbonImage = "ObjectPictureFill"
  Case "dButton06": RibbonImage = "ObjectPictureFill"
  Case "dButton07": RibbonImage = "ObjectPictureFill"
  Case "dButton08": RibbonImage = "ObjectPictureFill"
  Case "dButton09": RibbonImage = "ObjectPictureFill"
  Case "dButton10": RibbonImage = "ObjectPictureFill"
  
  Case "eButton01": RibbonImage = "ObjectPictureFill"
  Case "eButton02": RibbonImage = "ObjectPictureFill"
  Case "eButton03": RibbonImage = "ObjectPictureFill"
  Case "eButton04": RibbonImage = "ObjectPictureFill"
  Case "eButton05": RibbonImage = "ObjectPictureFill"
  Case "eButton06": RibbonImage = "ObjectPictureFill"
  Case "eButton07": RibbonImage = "ObjectPictureFill"
  Case "eButton08": RibbonImage = "ObjectPictureFill"
  Case "eButton09": RibbonImage = "ObjectPictureFill"
  Case "eButton10": RibbonImage = "ObjectPictureFill"
  
  Case "fButton01": RibbonImage = "ObjectPictureFill"
  Case "fButton02": RibbonImage = "ObjectPictureFill"
  Case "fButton03": RibbonImage = "ObjectPictureFill"
  Case "fButton04": RibbonImage = "ObjectPictureFill"
  Case "fButton05": RibbonImage = "ObjectPictureFill"
  Case "fButton06": RibbonImage = "ObjectPictureFill"
  Case "fButton07": RibbonImage = "ObjectPictureFill"
  Case "fButton08": RibbonImage = "ObjectPictureFill"
  Case "fButton09": RibbonImage = "ObjectPictureFill"
  Case "fButton10": RibbonImage = "ObjectPictureFill"
  
End Select
End If

End Sub

Sub GetSize(control As IRibbonControl, ByRef Size)
'PURPOSE: Determine if the button size is large or small

Const Large As Integer = 1
Const Small As Integer = 0

If Sheet3.Range("D13") = "Add-in #1" Then
Select Case control.ID
Case "aButton01": Size = Large
End Select
End If

If Sheet3.Range("D13") = "Add-in #2" Then
Select Case control.ID
    
  Case "aButton01": Size = Large
  Case "aButton02": Size = Small
  Case "aButton03": Size = Small
  Case "aButton04": Size = Small
  Case "aButton05": Size = Small
  Case "aButton06": Size = Small
  Case "aButton07": Size = Small
  Case "aButton08": Size = Small
  Case "aButton09": Size = Small
  Case "aButton10": Size = Small
  
  Case "bButton01": Size = Large
  Case "bButton02": Size = Small
  Case "bButton03": Size = Small
  Case "bButton04": Size = Small
  Case "bButton05": Size = Small
  Case "bButton06": Size = Small
  Case "bButton07": Size = Small
  Case "bButton08": Size = Small
  Case "bButton09": Size = Small
  Case "bButton10": Size = Small
  
  Case "cButton01": Size = Large
  Case "cButton02": Size = Small
  Case "cButton03": Size = Small
  Case "cButton04": Size = Small
  Case "cButton05": Size = Small
  Case "cButton06": Size = Small
  Case "cButton07": Size = Small
  Case "cButton08": Size = Small
  Case "cButton09": Size = Small
  Case "cButton10": Size = Small
  
  Case "dButton01": Size = Large
  Case "dButton02": Size = Small
  Case "dButton03": Size = Small
  Case "dButton04": Size = Small
  Case "dButton05": Size = Small
  Case "dButton06": Size = Small
  Case "dButton07": Size = Small
  Case "dButton08": Size = Small
  Case "dButton09": Size = Small
  Case "dButton10": Size = Small
  
  Case "eButton01": Size = Large
  Case "eButton02": Size = Small
  Case "eButton03": Size = Small
  Case "eButton04": Size = Small
  Case "eButton05": Size = Small
  Case "eButton06": Size = Small
  Case "eButton07": Size = Small
  Case "eButton08": Size = Small
  Case "eButton09": Size = Small
  Case "eButton10": Size = Small
  
  Case "fButton01": Size = Large
  Case "fButton02": Size = Small
  Case "fButton03": Size = Small
  Case "fButton04": Size = Small
  Case "fButton05": Size = Small
  Case "fButton06": Size = Small
  Case "fButton07": Size = Small
  Case "fButton08": Size = Small
  Case "fButton09": Size = Small
  Case "fButton10": Size = Small
  
End Select
End If

End Sub

Sub RunMacro(control As IRibbonControl)
'PURPOSE: Tell each button which macro subroutine to run when clicked

If Sheet3.Range("D13") = "Add-in #1" Then
Select Case control.ID
Case "aButton01": Application.Run "showxlst"
End Select
End If

If Sheet3.Range("D13") = "Add-in #2" Then
Select Case control.ID
  
  Case "aButton01": Application.Run "showxlst"
  Case "aButton02": Application.Run "xluihandler", "Closer"
  Case "aButton03": Application.Run "xluihandler", "Data Divider"
  Case "aButton04": Application.Run "xluihandler", "Massmailer"
  Case "aButton05": Application.Run "xluihandler", "Prefixer-Suffixer"
  Case "aButton06": Application.Run "xluihandler", "Sheet Comparer"
  Case "aButton07": Application.Run "xluihandler", "Tabificator"
  Case "aButton08": Application.Run "xluihandler", "Increase/Decrease"
  Case "aButton09": Application.Run "xluihandler", "Bookmarks"
  Case "aButton10": Application.Run "xlstudfunc"
  
  Case "bButton01": Application.Run "launchCalculator"
  Case "bButton02": Application.Run "xluihandler", "Unit Converter"
  Case "bButton03": Application.Run "xluihandler", "Currency Converter"
  Case "bButton04": Application.Run "xluihandler", "Dims Calc"
  Case "bButton05": Application.Run "xluihandler", "FAK Estimator"
  Case "bButton06": Application.Run "DummyMacro"
  Case "bButton07": Application.Run "DummyMacro"
  Case "bButton08": Application.Run "DummyMacro"
  Case "bButton09": Application.Run "DummyMacro"
  Case "bButton10": Application.Run "DummyMacro"
  
  Case "cButton01": Application.Run "xlezbutslaunch"
  Case "cButton02": Application.Run "DummyMacro"
  Case "cButton03": Application.Run "DummyMacro"
  Case "cButton04": Application.Run "DummyMacro"
  Case "cButton05": Application.Run "DummyMacro"
  Case "cButton06": Application.Run "DummyMacro"
  Case "cButton07": Application.Run "DummyMacro"
  Case "cButton08": Application.Run "DummyMacro"
  Case "cButton09": Application.Run "DummyMacro"
  Case "cButton10": Application.Run "DummyMacro"
  
  Case "dButton01": Application.Run "DummyMacro"
  Case "dButton02": Application.Run "DummyMacro"
  Case "dButton03": Application.Run "DummyMacro"
  Case "dButton04": Application.Run "DummyMacro"
  Case "dButton05": Application.Run "DummyMacro"
  Case "dButton06": Application.Run "DummyMacro"
  Case "dButton07": Application.Run "DummyMacro"
  Case "dButton08": Application.Run "DummyMacro"
  Case "dButton09": Application.Run "DummyMacro"
  Case "dButton10": Application.Run "DummyMacro"
  
  Case "eButton01": Application.Run "DummyMacro"
  Case "eButton02": Application.Run "DummyMacro"
  Case "eButton03": Application.Run "DummyMacro"
  Case "eButton04": Application.Run "DummyMacro"
  Case "eButton05": Application.Run "DummyMacro"
  Case "eButton06": Application.Run "DummyMacro"
  Case "eButton07": Application.Run "DummyMacro"
  Case "eButton08": Application.Run "DummyMacro"
  Case "eButton09": Application.Run "DummyMacro"
  Case "eButton10": Application.Run "DummyMacro"
  
  Case "fButton01": Application.Run "DummyMacro"
  Case "fButton02": Application.Run "DummyMacro"
  Case "fButton03": Application.Run "DummyMacro"
  Case "fButton04": Application.Run "DummyMacro"
  Case "fButton05": Application.Run "DummyMacro"
  Case "fButton06": Application.Run "DummyMacro"
  Case "fButton07": Application.Run "DummyMacro"
  Case "fButton08": Application.Run "DummyMacro"
  Case "fButton09": Application.Run "DummyMacro"
  Case "fButton10": Application.Run "DummyMacro"

 End Select
 End If
    
End Sub

Sub GetScreentip(control As IRibbonControl, ByRef Screentip)
'PURPOSE: Display a specific macro description when the mouse hovers over a button

If Sheet3.Range("D13") = "Add-in #1" Then
Select Case control.ID
Case "aButton01": Screentip = "XLSuperTool launcher"
End Select
End If

If Sheet3.Range("D13") = "Add-in #2" Then
Select Case control.ID
  
  Case "aButton01": Screentip = "Launch full XLSuperTool form"
  Case "aButton02": Screentip = "Close open workbooks with save/no save option."
  Case "aButton03": Screentip = "Divide & email targeted data from a workbook (Outlook only)."
  Case "aButton04": Screentip = "Email groups targeted files with subject and body (Outlook only)."
  Case "aButton05": Screentip = "Add text or numbers to the start or end of list of data."
  Case "aButton06": Screentip = "Compare two workbooks differences. Uses UID reference for matching."
  Case "aButton07": Screentip = "Create new tabs from entries in a column."
  Case "aButton08": Screentip = "Increase/decrease selected range by increments of numbers or percentage."
  Case "aButton09": Screentip = "Save/Edit/Open/Close groups of Excel files."
  Case "aButton10": Screentip = "Show list of XLST functions you can use in worksheets. (Will not work for users without XLST)"
  
  Case "bButton01": Screentip = "Microsoft's calculator."
  Case "bButton02": Screentip = "Convert various measurements (weight, mass, time)."
  Case "bButton03": Screentip = "Convert Currencies in selected cells to selected Rate of Exchange (ROE)."
  Case "bButton04": Screentip = "Calculate dimensions (LxWxH)."
  Case "bButton05": Screentip = "Estimate FAK - Freight All Kinds for shipping."
  Case "bButton06": Screentip = "Description"
  Case "bButton07": Screentip = "Description"
  Case "bButton08": Screentip = "Description"
  Case "bButton09": Screentip = "Description"
  Case "bButton10": Screentip = "Description"
  
  Case "cButton01": Screentip = "Launch Eazy Buttons."
  Case "cButton02": Screentip = "Description"
  Case "cButton03": Screentip = "Description"
  Case "cButton04": Screentip = "Description"
  Case "cButton05": Screentip = "Description"
  Case "cButton06": Screentip = "Description"
  Case "cButton07": Screentip = "Description"
  Case "cButton08": Screentip = "Description"
  Case "cButton09": Screentip = "Description"
  Case "cButton10": Screentip = "Description"
  
  Case "dButton01": Screentip = "Description"
  Case "dButton02": Screentip = "Description"
  Case "dButton03": Screentip = "Description"
  Case "dButton04": Screentip = "Description"
  Case "dButton05": Screentip = "Description"
  Case "dButton06": Screentip = "Description"
  Case "dButton07": Screentip = "Description"
  Case "dButton08": Screentip = "Description"
  Case "dButton09": Screentip = "Description"
  Case "dButton10": Screentip = "Description"

  Case "eButton01": Screentip = "Description"
  Case "eButton02": Screentip = "Description"
  Case "eButton03": Screentip = "Description"
  Case "eButton04": Screentip = "Description"
  Case "eButton05": Screentip = "Description"
  Case "eButton06": Screentip = "Description"
  Case "eButton07": Screentip = "Description"
  Case "eButton08": Screentip = "Description"
  Case "eButton09": Screentip = "Description"
  Case "eButton10": Screentip = "Description"
  
  Case "fButton01": Screentip = "Description"
  Case "fButton02": Screentip = "Description"
  Case "fButton03": Screentip = "Description"
  Case "fButton04": Screentip = "Description"
  Case "fButton05": Screentip = "Description"
  Case "fButton06": Screentip = "Description"
  Case "fButton07": Screentip = "Description"
  Case "fButton08": Screentip = "Description"
  Case "fButton09": Screentip = "Description"
  Case "fButton10": Screentip = "Description"
  
End Select
End If

End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Activate()
Dim color1 As Double
Dim color2 As Double
On Error Resume Next
color1 = Application.RandBetween(-1, 1) * Rnd + 0
color2 = Application.RandBetween(-1, 1) * Rnd + 0
Sheet3.Range("H1").Font.ColorIndex = Application.RandBetween(0, 56)
With Sheet3.Range("H1").Interior
        .Pattern = xlPatternRectangularGradient
        .Gradient.RectangleLeft = 0.5
        .Gradient.RectangleRight = 0.5
        .Gradient.RectangleTop = 0.5
        .Gradient.RectangleBottom = 0.5
        .Gradient.ColorStops.Clear
    End With
    With Sheet3.Range("H1").Interior.Gradient.ColorStops.Add(0)
        .ThemeColor = xlThemeColorAccent4
        .TintAndShade = color1
    End With
    With Sheet3.Range("H1").Interior.Gradient.ColorStops.Add(1)
        .Color = Application.RandBetween(0, 900)
        .TintAndShade = color2
    End With
With Sheet3.Range("A1").Interior
        .Pattern = xlPatternRectangularGradient
        .Gradient.RectangleLeft = 0.5
        .Gradient.RectangleRight = 0.5
        .Gradient.RectangleTop = 0.5
        .Gradient.RectangleBottom = 0.5
        .Gradient.ColorStops.Clear
    End With
    With Sheet3.Range("A1").Interior.Gradient.ColorStops.Add(0)
        .ThemeColor = xlThemeColorAccent4
        .TintAndShade = color1
    End With
    With Sheet3.Range("A1").Interior.Gradient.ColorStops.Add(1)
        .Color = Application.RandBetween(0, 900)
        .TintAndShade = color2
    End With
    With Sheet3.Range("H16").Interior
        .Pattern = xlPatternRectangularGradient
        .Gradient.RectangleLeft = 0.5
        .Gradient.RectangleRight = 0.5
        .Gradient.RectangleTop = 0.5
        .Gradient.RectangleBottom = 0.5
        .Gradient.ColorStops.Clear
    End With
    With Sheet3.Range("H16").Interior.Gradient.ColorStops.Add(0)
        .ThemeColor = xlThemeColorAccent4
        .TintAndShade = color1
    End With
    With Sheet3.Range("H16").Interior.Gradient.ColorStops.Add(1)
        .Color = Application.RandBetween(0, 900)
        .TintAndShade = color2
    End With
Resume Next

End Sub
Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
Dim ws As Worksheet
ThisWorkbook.Activate
For Each ws In Worksheets
    ws.Sort.SortFields.Clear
Next ws
'clear full screen
If Application.DisplayFullScreen = True Then
    Application.DisplayFullScreen = False
    ActiveWindow.DisplayHeadings = True
    Exit Sub
End If
End Sub
Attribute VB_Name = "userdefinedmacros"
Option Compare Text 'ignore text case
Sub PivotFieldsRepeat() 'oldstyle
'switch a new pivot table to tabular, remove all totals/sub-totals, and repeat the row labels
    Dim PT As PivotTable
    Dim pf As PivotField

    On Error Resume Next
        Set PT = ActiveCell.PivotTable
    On Error GoTo 0

    If Not PT Is Nothing Then
        With PT
            .InGridDropZones = True
            .RowAxisLayout xlTabularRow
        End With

        For Each pf In PT.PivotFields
            If pf.Orientation = xlRowField Then
                pf.Subtotals(1) = True
                pf.Subtotals(1) = False
               pf.RepeatLabels = True
            End If
        Next pf
    End If
    On Error GoTo errstop:
xlst.ezbutinfobox.BackColor = vbGreen
xlst.ezbutinfobox = "Applied tabularizer to " & PT.Name & vbCr & "May need to apply again if subtotals showing."
Exit Sub
errstop:
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "It appears you did not first select a pivot table."
End Sub
Sub PivotFieldsRepeat2() 'newstyle
'switch a new pivot table to tabular, remove all totals/sub-totals, and repeat the row labels
    Dim PT As PivotTable
    Dim pf As PivotField

    On Error Resume Next
        Set PT = ActiveCell.PivotTable
    On Error GoTo 0

    If Not PT Is Nothing Then
        With PT
            .ColumnGrand = False
            .RowGrand = False
            .RowAxisLayout xlTabularRow
            .RepeatAllLabels xlRepeatLabels
        End With

        For Each pf In PT.PivotFields
            If pf.Orientation = xlRowField Then
                pf.Subtotals(1) = True
                pf.Subtotals(1) = False
               pf.RepeatLabels = True
            End If
        Next pf
    End If
    On Error GoTo errstop:
xlst.ezbutinfobox.BackColor = vbGreen
xlst.ezbutinfobox = "Applied tabularizer to " & PT.Name & vbCr & "May need to apply again if subtotals showing."
Exit Sub
errstop:
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "It appears you did not first select a pivot table."
End Sub


Attribute VB_Name = "xlstmodule"
Option Compare Text 'ignore text case
Private Const ciMaxLenSheetName As Integer = 31
Private Function SheetNameIllegalCharacters() As Variant
    SheetNameIllegalCharacters = Array("/", "\", "[", "]", "*", "?", ":")
End Function
Public Function IsValidSheetName(strSheetName As String) As Boolean
    IsValidSheetName = False
    If Len(strSheetName) = 0 Then Exit Function
    If Len(strSheetName) > ciMaxLenSheetName Then Exit Function

    Dim varSheetNameIllegalCharacters As Variant: varSheetNameIllegalCharacters = SheetNameIllegalCharacters
    
    Dim i As Integer
    For i = LBound(varSheetNameIllegalCharacters) To UBound(varSheetNameIllegalCharacters)
        If InStr(strSheetName, (varSheetNameIllegalCharacters(i))) > 0 Then Exit Function
    Next i

    IsValidSheetName = True
End Function
Function ColLetterFromNo(lngColNum) As String
    ColLetterFromNo = Split(Cells(1, lngColNum).Address, "$")(1)
End Function
Function converttonumber(myStringColumn As String)
'Dim myStringColumn As String, myLongColumn As Long
'myStringColumn = "AA"
'myLongColumn = Range(myStringColumn & "1").Column
 'or
converttonumber = Columns(myStringColumn).Column
End Function
Function removeAlpha(r As String) As String
With CreateObject("vbscript.regexp")
    .Pattern = "\D"
    .Global = True
    removeAlpha = .Replace(r, "")
End With
End Function
Function StripNumber(stdText As String)
    Dim str As String, i As Integer
     'strips the number from a longer text string
    stdText = Trim(stdText)
     
    For i = 1 To Len(stdText)
        If Not IsNumeric(Mid(stdText, i, 1)) Then
            str = str & Mid(stdText, i, 1)
        End If
    Next i
     
    StripNumber = str ' * 1
     
End Function
Public Function findany(str As String, wsh As String) 'string and sheet name
Application.Volatile
On Error Resume Next
findany = 0
findany = ActiveWorkbook.Sheets(wsh).Cells.Find(What:=str, After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Address
findany = ThisWorkbook.Sheets(wsh).Cells.Find(What:=str, After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Address
Resume Next
End Function
' Return the Roman numeral version of this number.
Private Function ArabicToRoman(ByVal arabic_string As _
    String) As String
Dim arabic_number As Long
Dim digit As Long
Dim result As String

    If Len(arabic_string) = 0 Then Exit Function

    ' Pull out thousands.
    arabic_number = CInt(arabic_string)
    digit = arabic_number \ 1000
    arabic_number = arabic_number - digit * 1000
    result = result & String$(digit, "M")

    ' Pull out hundreds.
    digit = arabic_number \ 100
    arabic_number = arabic_number - digit * 100
    result = AddRomanDigits(result, digit, "M", "D", "C")

    ' Pull out tens.
    digit = arabic_number \ 10
    arabic_number = arabic_number - digit * 10
    result = AddRomanDigits(result, digit, "C", "L", "X")

    ' Pull out ones.
    digit = arabic_number
    result = AddRomanDigits(result, digit, "X", "V", "I")

    ArabicToRoman = result
End Function
' Add appropriate Roman digits to the result.
' The ten_letter, five_letter, and one_letter
' are the digits for 10, 5, and 1 at this
' power of ten. For example, 10/5/1 = X/V/I,
' 100/50/10 = C/L/X, etc.
Private Function AddRomanDigits(ByVal result As String, _
    ByVal arabic_digit As Integer, ByVal ten_letter As _
    String, ByVal five_letter As String, ByVal one_letter _
    As String) As String
    Select Case arabic_digit
        Case 1 To 3
            result = result & String$(arabic_digit, _
                one_letter)
        Case 4
            result = result & one_letter & five_letter
        Case 5
            result = result & five_letter
        Case 6 To 8
            result = result & five_letter & _
                String$(arabic_digit - 5, one_letter)
        Case 9
            result |fffd||fffd|e_letter & _
                String$(arabic_digit - 5, one_letter)
        Case 9
            result |fffd||fffd|e_letter & _
                String$(arabic_digit - 5, one_letter)
        Case 9
            result |fffd||fffd|e_letter & _
                String$(arabic_digit - 5, one_letter)
        Case 9
            result |fffd||fffd|e_letter & _
                String$(arabic_digit - 5, one_letter)
        Case 9
            result |fffd||fffd|e_letter & _
                String$(arabic_digit - 5, one_letter)
        Case 9
     |00||00||00||fffd||fffd||fffd||fffd||00||01||fffd||fffd||00|Attrletter)
        Case 9
            t|00|               String$(arabic_digit - 5,V     
                me = "xlst"
e_letter & _
Bas     0{08B7E207-898A-452C-8BF1-9FF051B2F6EA}{28B65AtriBDE9-4093-8C89-CC866D21FE08}it - 5, one_lettGlobal    Spac _
False             StCreatablA-452C-8BF1-9FF051B2F6EAPredecla8BFId
  Tru String$(arabic_ExposettGl-452C-8BF1-9FF051B2FTemplateDerivdecla8BFId
  Tru String$(Customiz    Case 9
  Option Comp  S Text 'ignore tstomce_l
Id
  Trg$(licit

'Object vari-9FF0to e_lgger appFF0a-8BF1events
P
     WithE  Trg XLApp As Excel.0a--9FF051Be_letter & _ Text.e_lVarHelpIDe 9-1
#IfletA7 Then
    Dim mXLHwnd TrgLongPtrpIDe'_l
I's window handlr)
   etterhTexForm Text.e_lVarH'
  userfow IDe 9-1
#IfletA7 ThenTru StriDer)
  ithSafe Func    SFAs WApp AA Lib "LHwn32" (ByVal lpClass     FF0SB65ng,  SFAs WADe 9-1A Lib "LHwn32")    WithE  decla8452C2" 64F1-9FF051B2Id
 ext.e_lVarHelpIDe 9-1
#IfletA7 TSetnTru S2C-8  Dim mXLHwnd TAlias " ext.e_lVarHethEAetA7 ThenBFIdDe 9-1
#IfrpIDe'_lnIndex_lVarHethEAetA7 ThedwNewDe 9IdDe 9-1
#l
I's window handlEt - 5H'
_lVarH'
  userfow IDe 9-1
#Iflenc    Slias " ext.e_lVarHethEAetA7 ThenBFletA7 arHethEApIDe'_lnIndex_lVarHethEAetA7 Thedw
#l#E-1
IfDe 9-1  decla8452C2" 64F1-9FF051B2Id
 exetI'segrounde_lVar
  ithSafe Func    Slias " ext.e_lVthEAetA7 ett 9IdDe 9-1HelpIDe 9-1
#Iflet
#l
    Dim mXLHwnd TrgLongPtrpIDe'_l
I's window h  igit - 5, one_lett IdDe 9-1
#IfrpI|00||01||fffd||fffd||00|Attrletter)
        Case 9
   Cas ext.et|00|      FF0SBxetI'segras     0{08B
 866D21pp As ExcyVal lpClasla84e 9IdDe 9ias TrgLongPtrpIDe'_l Sts window han   etterhTexF$(licitConst GWL_HWNDPARENT        e_le8e_letter &Sub Ue_l-1
m_Termine_l()e_lf e_le cle_ls save_lee_letter &.Dise_lyAlerts 9ie_lettee_lThisWorkbook.S_lee_letter letteter &.Dise_lyAlerte_lnst GWL_HWNe_lettal  
 letter)
     Xe_le_ 9-1A Ae_lv Case_lettwbtrpI etterhT
I's wiWn-1A Ae_let)-1A Li Trual(ttGl-452C-8.Vers66D) >= 15 AhanmongPlett <> 0ok.S_l ' _
ar o_Termina janela 1B2va do_Expose-1A LitI's   Case = ttGl-452C-8.ongPttI''Always get beca51B in_Expos 15 SDI each wbthenTier t 'ignowTru differredore tst.-1A LitI'sindow h  igit -mongPlett,TexF$(licitCons,    Case-1A LitI'sindletandlEt - 5H'
mongPlett-1A LiarHethEAal  
 letter)
  e_lXe_le_ 9-1A ResizeIdDe 9-wbtrpI etterhT
I' & _Wn-1A Ae_let)-1A L  TrNot Me.Visi    ing$ Me.ShgnovbModeleseclal  
 letter)
  e_lXe_le_ ie_lettBeTereCe_l(IdDe 9-wbtrpI etteett, Canpos-1A Boolean)-1A Liindow h  igit -monndlett,TexF$(licitCons, 0&
al  
 le_l
I's wColLetterFromNo(lngColNuml StsSIDe 9-1A LiColLetterFromNo &.SFF0t(Cells(1, lngColNuml.Addrese, "$")(1)-1al  _l
I's 
_l
I's wProcedureExists(proc
#I, wbtHel etterhTl StsBoolean
Hethcabic_Derian   Hethj-1A B65n-1A LiOn_Error Resu   NGlo-1A Li -1A Lilet Each cabIn wblatPro    lat1FE0onredecltI'stI'slet j &.0oko 3-1A Li tI'stI'ProcedureExists &.cp.CodeModule.ProcClEttLines(proc
#I, j) > 0-1A Li tI'stI' TrProcedureExists ing$ ExitTrg XLApp-1A Li tI'NGlo-1A LiNGlo-1al  _l
I's 
_l
LApp Prot   edVBPro    IdDe 9-wbtrpI etteettl StsBoolean
' returns TRUE if th
   pro     in_th
ae_lve docu  nt is prot   ed
HethVBC-1A Inte8BF-1A LiVBC-= FId
tI'sOn_Error Resu   NGx   tI'sVBC-= wblatPro    lat1FE0onrede.Coun   tI'sOn_Error GoTo 0-1A Li TrVBC-= FIok.S_-1A Li tI'Prot   edVBPro     &.e_letttI's")    WithE  decot   edVBPro     &.Dise_lytI's"hanthEAal  _l
I's 
_l
LApp verscheck()-1'check if high enough vers66D
 TrttGl-452C-8.Vers66D < 15 ing$
verscheck &."rts  tool is only availatablin_Expos 2013 or higher|fffd||fffd||00|ExitTrg XLApp-1al  thEAal  _l
I's 
egras   
  Label17_Cl-4k() 'rod8A-cke linkineick
HethlinkiHelSIDe 9-1 res
|00|sinfobox`.Back`E|00|	=|fffd| vbCyaP|fffd|R|02|\ez0|fffd|_|02|\|02|d|fffd|[g>n|fffd||07||fffd||04||fffd||04||16|%|fffd| er0r:
|fffd|	p|fffd|ht tp://|16|.c|08|om/|fffd||07|uper
q
2|00||12||fffd||fffd|FollpowHy|fffd||01||fffd|
cN:2=|fffd||00|, |fffd||fffd|s|7f|:=!|04||fffd|xit P|13|
'|fffd||07||fffd|
|1f||10|ol|14||10|Ma|00|V|fffd||00|genta
x|00|lst.ezbu|00|tinfobox|00|.BackCol|00|or = vbM|02|a	|fffd|design|04|er!|fffd|tools|03||04|P|00||fffd|"**Una|00|ble to o|00|pen link|fffd|: " &|02|	|00||06||00|"|1e|"|10||fffd|.<|fffd|)?End|00| Sub
Pr ivate|01||06| U|00|serForm_|00|Iniali|00|ze() 'ST|00|ART UP U|00|SERFORM
|00|
Dim i A@s Long|03||07|hit|08||fffd||fffd|conf|08|igs|01|Work sheet|03||17|la`strow|19||01|
c|04|ol
start|07||fffd|
|fffd||fffd||01|
Varia>n|fffd|#|fffd||0e||02||fffd||02|4|06||0f|
|00| If Val(|00|Applicat|00|ion.Vers|01||fffd||01|) >= 15( Th@h |03||00|'O|00|nly make|00|s sense |00|on Excel|fffd| 2013 a|00|Mup|fffd||15||fffd|Set <XL|00||17|@^|fffd||18||07||08|mh|18|wndAT|00||08|Fin|04|dW|fffd||00|owA("|00|ThunderD|00|Frame", hCap|01|')|fffd||0e||01|gI|00|f

'ch|fffd|eck f|00||fffd||fffd|S|fffd|QG@|16|@a|fffd|1 To|00|2i|02|s|fffd|Xbook.S|fffd||01|Zs.Cou|fffd|I@A|04|ThN|07|(i).N+|fffd||1f||fffd|&"|08||17|"|fffd|D
|fffd||01|7|fffd||1c|=Q|18||fffd||10|
A~	|00|!
|fffd|-Next|fffd| i
|fffd||1d||fffd||06|0|fffd||14||fffd|Ex|00||fffd||fffd||fffd||fffd|8|fffd|9i|06||fffd|s|1e||1e||191|s(|fffd|-|fffd|N|fffd||fffd|=|02| |08|..Cells|02|.|fffd|/(What:|08|="* .Sear|fffd|chDirec!/|00|:=xlPrev@ious, |fffd||03|O&r@4|01||03|By|fffd||fffd|um(ns) *l|00||01|
?A
|fffd|W_
|fffd|	_
C
Rofw|fffd||fffd||00|
+_K
R@ange(f|00|JaPny("|fffd|cn|fffd|9s|fffd|list|fffd||1b|k#|07||17||fffd|e|fffd||fffd|
ez?
|fffd|7|fffd|<M|15|%>|00|'MsgBox |00|"XLSuper|02|T|fffd||fffd| faile|fffd|d|fffd||fffd|> cora1|00|ly.  Clo|01||fffd|owithout|fffd| saving|fffd|o|00|attempt @again.|fffd||1c|v|08|bCr`|fffd|cal,|fffd| "ALERT |fffd|{|fffd|L!B.|fffd|l ^	DC)"hB1"|fffd||fffd|v|c3||fffd|Rl|10|oad $|fffd|es
|fffd|o|fffd||04|	|fffd||2a1||04|.Ta`|fffd||fffd||02|
|fffd|1$|07||fffd||04|f|02||fffd||04|/|fffd||fffd||07||1f||fffd||02|l
"|fffd|d
|fffd||fffd|Cya>n|fffd||13|)|0f||fffd||04||fffd||0e||12||05|'h|10|ide |fffd||0e|ton!|fffd||1f|Comm|fffd|Bu|02|t|fffd||02|1.Visi|02|b`|fffd|= Fals|16|e|fffd||10||fffd||04|2|fffd||04|on3|fffd||fffd||04|on4|fffd||04||fffd||14| |fffd||19||fffd| f|fffd||fffd|%|15|b|fffd|3p|06|"|16||fffd||fffd||01|5|1f||05||fffd||01|6|fffd||01| YR!|fffd|b|16| |fffd|1dP}|fffd||12|X|01||fffd||10||fffd|L 9@01.ClPG|fffd|K|01|2E|01||fffd|\2 |fffd|\|fffd|E|07||fffd||06||fffd|=|fffd|UTrim(|fffd||fffd|
4vsN(i, |fffd|8|fffd|)) <> "U]l'o!n"a|fffd|O|fffd||7f|d|0f||fffd||04|ar|fffd||04||fffd||04| + 3|0f||10||05|"g|fffd|s|fffd|AddI|fffd||00|:|fffd|Wo	|fffd|b|fffd|`'R	_|14||fffd||fffd||0e||10||fffd||fffd||0e||fffd||03|s|fffd||0e||10|}|fffd||0e||fffd|R|fffd||fffd||0e||fffd||0e||fffd||04||fffd||0e|11|0f||0f||fffd||06||1d||0f||0f|@w|fffd|f	|0f||fffd|	|1f||0f|ur|03||11||10||398|MultiPaP|fffd|1_Ch|fffd|^|fffd|Ir|fffd|es0|fffd|!^s w|fffd||fffd||fffd|menu c|fffd||01|p|1c||fffd|q|fffd||fffd||fffd|ctrB|fffd||fffd|!@|fffd||fffd||fffd|<|fffd||fffd||02||11|z|fffd||fffd|h|11||456||7f||fffd|v|7f||fffd||fffd||fffd||fffd|*|7f||fffd||7f||fffd||7f||fffd|l|fffd|t|16||10||08|v|fffd||fffd|	w|fffd|z|fffd||fffd||fffd||01|a|fffd|'errP|fffd||fffd||0f|d|01||fffd|g if alhl e|49a|w|fffd||fffd|q|fffd|s|1c| c|fffd|d|fffd||11|`jIsE|fffd|a|03||7f|se|7f|sgs"|fffd||1f||fffd|Or Ov|fffd||02||fffd||02||fffd|^eo|fffd|!Wh|fffd||00||fffd||fffd|1|fffd||fffd||00|1|00|S|07|S|00||fffd||fffd|"|1b|= Me./|fffd||1f||fffd||01|`|fffd||01|.|10|:ue|fffd|2|06|0	|1a||01|1 |1d||01|4|04||fffd||03||fffd||06||fffd||fffd|.Scree|fffd|nUpd|fffd||fffd| uV[q|02|O|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|et|fffd||fffd|r|fffd|k|fffd||fffd|p|fffd||fffd||fffd|0|13|d
|fffd||fffd||fffd||fffd||fffd|s0|04||fffd||fffd|
|fffd||fffd|4|05|O|fffd||fffd|T}|7f||fffd|s|fffd||fffd|3|fffd||fffd||7f||fffd|b|02|"|fffd||7f||fffd|3|fffd||13|I|7f||fffd||7f||fffd||7f||fffd||7f||fffd||03||fffd||fffd|/|fffd|9K/|fffd|ls|0f||fffd||fffd|	|fffd|,|fffd|.=|05||fffd|7/|fffd|x|fffd|/|fffd||fffd||12||19||05||fffd| *|0f||fffd||fffd||fffd| |17||0f||fffd|l|0f||fffd||fffd||fffd||fffd||0f||fffd| |0f||fffd| |0f||fffd||0f||fffd||fffd|Vx|fffd||00|\|fffd||00|d If

|00|'alphabe|00|tize lis|00|ts
Call|fffd| |02|\xlst|01||fffd||00||fffd||00|load for$ms|01||fffd|
|01|4.t|10|ools|06|(.Cl|00|ear
For|00| Each wh|00|atit In |01||01|Zconfigs|00|.Range("	|06|6")|13|MAddI|08|tem|04|E
NeJx|00||fffd| |00||00|
|04||05|'|00|determin|01||00||fffd|astrows|00| of dataD o
u
l|03|  |02|=
|fffd|Cells.@Find(W|fffd|V:|fffd|="*", S|fffd|c|00|chDirect|00|ion:=xlP|fffd|revious|05||0e| Order|01|By2R|00|;).|fffd||02||02||fffd|hi|00|de ezbut|18|ton|fffd||fffd||02||fffd|Com mandB|02|
1.|fffd|Visible|fffd|E`False|fffd||7f|
|12|25!|12|3!|12|4|14||12||02|oin@putbox|fffd|""|00|" 'reset|fffd| J|06||04|'ez|fffd|
|fffd||05||01|?|1b||fffd|e|fffd||01|'|8b||02||12| na|fffd|meB|fffd|d &FFH|05||fffd|D|18|L@|fffd|Box1|fffd||fffd||fffd||02|N|06||05||fffd|LTruELD|07|22|fffd|28E|05||fffd|"in|fffd|fo|00|:e|fffd|d|04|9|02||05|@?|07|A|1b|E|fffd||02||fffd|(2, 2/|fffd||fffd||fffd|sD|10||12|3|08|de@signer|fffd|4|03||fffd|I".BackC|04|ol|fffd||fffd|= vbC|fffd|yan|06|`|fffd||fffd||fffd||14|W	|fffd||1e|G|12|
DyE|05| op|fffd|\ &Attribute VB_Name = "xlstmodule"
Option Compare Text 'ignore text case
Private Const ciMaxLenSheetName As Integer = 31
Private Function SheetNameIllegalCharacters() As Variant
    SheetNameIllegalCharacters = Array("/", "\", "[", "]", "*", "?", ":")
End Function
Public Function coalesce(ParamArray Cells() As Variant) As Variant
Application.Volatile
'use fist non-blank in order
    Dim Cell As Variant
    Dim SubCell As Variant

    For Each Cell In Cells
        If VarType(Cell) > vbArray Then
            For Each SubCell In Cell
                If VarType(SubCell) <> vbEmpty Then
                    coalesce = SubCell
                    Exit Function
                End If
            Next
        Else
            If VarType(Cell) <> vbEmpty Then
                coalesce = Cell
                Exit Function
            End If
        End If
    Next
    coalesce = ""

End Function
Function GetFolder() As String
'allow user to browse folders
    Dim fldr As FileDialog
    Dim sItem As String
    Set wshell = CreateObject("WScript.Shell")
    Set fldr = Application.FileDialog(msoFileDialogFolderPicker)
    With fldr
        .Title = "Select a Folder"
        .AllowMultiSelect = False
        .InitialFileName = wshell.CurrentDirectory 'Application.DefaultFilePath
        If .Show <> -1 Then GoTo NextCode
        sItem = .SelectedItems(1)
    End With
NextCode:
    GetFolder = sItem
    Set fldr = Nothing
End Function
Public Function wknum(tdate As Variant)
Application.Volatile
'return yyyyWK## based on tdate
wknum = Format(tdate, "yyyy") & "WK" & Application.Text(Format(tdate, "ww"), "00")
End Function
Public Function getregion(ctry As String)
'return region of world based on 2 letter country code
Application.Volatile
Dim clist As String
Dim rlist1 As String
Dim rlist2 As String
Dim rlist3 As String
Dim rlist4 As String
clist = "AF,AX,AL,DZ,AS,AD,AO,AI,AQ,AG,AR,AM,AW,AU,AT,AZ,BS,BH,BD,BB,BY,BE,BZ,BJ,BM,BT,BO,BQ,BA,BW,BV,BR,IO,BN,BG,BF,BI,KH,CM,CA,CV,KY,CF,TD,CL,CN,CX,CC,CO,KM,CG,CD,CK,CR,CI,HR,CU,CW,CY,CZ,DK,DJ,DM,DO,EC,EG,SV,GQ,ER,EE,ET,FK,FO,FJ,FI,FR,GF,PF,TF,GA,GM,GE,DE,GH,GI,GR,GL,GD,GP,GU,GT,GG,GN,GW,GY,HT,HM,VA,HN,HK,HU,IS,IN,ID,IR,IQ,IE,IM,IL,IT,JM,JP,JE,JO,KZ,KE,KI,KP,KR,KW,KG,LA,LV,LB,LS,LR,LY,LI,LT,LU,MO,MK,MG,MW,MY,MV,ML,MT,MH,MQ,MR,MU,YT,MX,FM,MD,MC,MN,ME,MS,MA,MZ,MM,NA,NR,NP,NL,NC,NZ,NI,NE,NG,NU,NF,MP,NO,OM,PK,PW,PS,PA,PG,PY,PE,PH,PN,PL,PT,PR,QA,RE,RO,RU,RW,BL,SH,KN,LC,MF,PM,VC,WS,SM,ST,SA,SN,RS,SC,SL,SG,SX,SK,SI,SB,SO,ZA,GS,SS,ES,LK,SD,SR,SJ,SZ,SE,CH,SY,TW,TJ,TZ,TH,TL,TG,TK,TO,TT,TN,TR,TM,TC,TV,UG,UA,AE,GB,US,UM,UY,UZ,VU,VE,VN,VG,VI,WF,EH,YE,ZM,ZW"
rlist1 = "Asia,Europe,Europe,Africa,Oceania,Europe,Africa,Caribbean,Antarctica,Caribbean,South America,Asia,Caribbean,Oceania,Europe,Asia,Caribbean,Asia,Asia,Caribbean,Europe,Europe,Central America,Africa,North America,Asia,South America,Caribbean,Europe,Africa,Other,South America,Other,Asia,Europe,Africa,Africa,Asia,Africa,North America,Africa,Caribbean,Africa,Africa,South America,Asia,Other,Other,South America,Africa,Africa,Africa,Oceania,Central America,Africa,Europe,Caribbean,Caribbean,Asia,Europe,Europe,Africa,Caribbean,Caribbean,South America,Africa,Central America,Africa,Africa,Europe,Africa,South America,Europe,Oceania,Europe,Europe,South America,Oceania,Other,Africa,Africa,Asia,Europe,Africa,Europe,Europe,North America,Caribbean,Caribbean,Oceania,Central America,Europe,Africa,Africa,South America,Caribbean,Other,Europe,Central America,Asia,Europe,Europe,Asia,Asia,Asia,Asia,Europe,Europe,Asia,Europe,Caribbean,Asia"
rlist2 = "Europe,Asia,Asia,Africa,Oceania,Asia,Asia,Asia,Asia,Asia,Europe,Asia,Africa,Africa,Africa"
rlist3 = "Europe,Europe,Europe,Asia,Europe,Africa,Africa,Asia,Asia,Africa,Europe,Oceania,Caribbean,Africa,Africa,Africa,North America,Oceania,Europe,Europe,Asia,Europe,Caribbean,Africa,Africa,Asia,Africa,Oceania,Asia,Europe,Oceania,Oceania,Central America,Africa,Africa,Oceania,Oceania,Oceania,Europe,Asia,Asia,Oceania,Asia,Central America,Oceania,South America,South America,Asia,Oceania,Europe,Europe,Caribbean,Asia,Africa,Europe,Europe,Africa,Caribbean,Africa,Caribbean,Caribbean,Caribbean,North America,Caribbean,Oceania,Europe,Africa,Asia,Africa,Europe,Africa,Africa,Asia,Caribbean,Europe,Europe,Oceania,Africa,Africa,,Africa,Europe,Asia,Africa,South America,Europe,Africa,Europe,Europe,Asia,Asia,Asia,Africa,Asia,Asia,Africa,Oceania,Oceania,Caribbean,Africa,Asia,Asia,Caribbean,Oceania,Africa,Europe,Asia,Europe,North America,Other,South America,Asia,Oceania,South America,Asia,Caribbean,Caribbean,Oceania,Africa,Asia,Africa,Africa"
rlist4 = rlist1 & "," & rlist2 & "," & rlist3
clunbound = Split(clist, ",")
rlunbound = Split(rlist4, ",")
For i = LBound(clunbound) To UBound(clunbound)
If Left(Trim(ctry), 2) = clunbound(i) Then
rgn = rlunbound(i)
End If
Next i
getregion = rgn
End Function
Public Function IsValidSheetName(strSheetName As String) As Boolean
    IsValidSheetName = False
    If Len(strSheetName) = 0 Then Exit Function
    If Len(strSheetName) > ciMaxLenSheetName Then Exit Function

    Dim varSheetNameIllegalCharacters As Variant: varSheetNameIllegalCharacters = SheetNameIllegalCharacters
    
    Dim i As Integer
    For i = LBound(varSheetNameIllegalCharacters) To UBound(varSheetNameIllegalCharacters)
        If InStr(strSheetName, (varSheetNameIllegalCharacters(i))) > 0 Then Exit Function
    Next i

    IsValidSheetName = True
End Function
Public Function FileFolderExists(strFullPath As String) As Boolean
'Macro Purpose: Check if a file or folder exists
    On Error GoTo EarlyExit
    If Not Dir(strFullPath, vbDirectory) = vbNullString Then FileFolderExists = True
    
EarlyExit:
    On Error GoTo 0
End Function
Function ColLetterFromNo(lngColNum) As String
    ColLetterFromNo = Split(Cells(1, lngColNum).Address, "$")(1)
End Function
Function converttonumber(myStringColumn As String)
'Dim myStringColumn As String, myLongColumn As Long
'myStringColumn = "AA"
'myLongColumn = Range(myStringColumn & "1").Column
 'or
converttonumber = Columns(myStringColumn).Column
End Function
Function removeAlpha(r As String) As String
With CreateObject("vbscript.regexp")
    .Pattern = "\D"
    .Global = True
    removeAlpha = .Replace(r, "")
End With
End Function
Function StripNumber(stdText As String)
    Dim str As String, i As Integer
     'strips the number from a longer text string
    stdText = Trim(stdText)
     
    For i = 1 To Len(stdText)
        If Not IsNumeric(Mid(stdText, i, 1)) Then
            str = str & Mid(stdText, i, 1)
        End If
    Next i
     
    StripNumber = str ' * 1
     
End Function
Public Function findany(str As String, wsh As String) 'string and sheet name (better to use findanyfull)
Application.Volatile
On Error Resume Next
findany = 0
findany = ActiveWorkbook.Sheets(wsh).Cells.Find(What:=str, After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Address
findany = ThisWorkbook.Sheets(wsh).Cells.Find(What:=str, After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Address
Resume Next
End Function
Public Function findanyfull(str As String, wbk As String, wsh As String) 'string, wbk, sheet name
Dim wbkfull As Workbook
Application.Volatile
On Error Resume Next
Set wbkfull = Workbooks(wbk)
findanyfull = 0
findanyfull = wbkfull.Sheets(wsh).Cells.Find(What:=str, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Address
Resume Next
End Function
' Return the Roman numeral version of this number.
Private Function ArabicToRoman(ByVal arabic_string As _
    String) As String
Dim arabic_number As Long
Dim digit As Long
Dim result As String

    If Len(arabic_string) = 0 Then Exit Function

    ' Pull out thousands.
    arabic_number = CInt(arabic_string)
    digit = arabic_number \ 1000
    arabic_number = arabic_number - digit * 1000
    result = result & String$(digit, "M")

    ' Pull out hundreds.
    digit = arabic_number \ 100
    arabic_number = arabic_number - digit * 100
    result = AddRomanDigits(result, digit, "M", "D", "C")

    ' Pull out tens.
    digit = arabic_number \ 10
    arabic_number = arabic_number - digit * 10
    result = AddRomanDigits(result, digit, "C", "L", "X")

    ' Pull out ones.
    digit = arabic_number
    result = AddRomanDigits(result, digit, "X", "V", "I")

    ArabicToRoman = result
End Function
' Add appropriate Roman digits to the result.
' The ten_letter, five_letter, and one_letter
' are the digits for 10, 5, and 1 at this
' power of ten. For example, 10/5/1 = X/V/I,
' 100/50/10 = C/L/X, etc.
Private Function AddRomanDigits(ByVal result As String, _
    ByVal arabic_digit As Integer, ByVal ten_letter As _
    String, ByVal five_letter As String, ByVal one_letter _
    As String) As String
    Select Case arabic_digit
        Case 1 To 3
            result = result & String$(arabic_digit, _
                one_letter)
        Case 4
            result = result & one_letter & five_letter
        Case 5
            result = result & five_letter
        Case 6 To 8
            result = result & five_letter & _
                String$(arabic_digit - 5, one_letter)
        Case 9
            result = result & one_letter & ten_letter
    End Select

    AddRomanDigits = result
End Function
Public Function WorksheetExists(ByVal WorksheetName As String) As Boolean
On Error Resume Next
WorksheetExists = (Sheets(WorksheetName).Name <> "")
On Error GoTo 0
End Function
Function ProcedureExists(procName, wb As Workbook) As Boolean
Dim cp As Variant
Dim j As Long
    On Error Resume Next
     
    For Each cp In wb.VBProject.VBComponents
        For j = 0 To 3
            ProcedureExists = cp.CodeModule.ProcCountLines(procName, j) > 0
            If ProcedureExists Then Exit Function
        Next
    Next
End Function
Function ProtectedVBProject(ByVal wb As Workbook) As Boolean
' returns TRUE if the VB project in the active document is protected
Dim VBC As Integer
    VBC = -1
    On Error Resume Next
    VBC = wb.VBProject.VBComponents.Count
    On Error GoTo 0
    If VBC = -1 Then
        ProtectedVBProject = True
    Else
        ProtectedVBProject = False
    End If
End Function
Private Function GetValue(path, file, sheet, ref)
'   Retrieves a value from a closed workbook
    Dim arg As String
'   Make sure the file exists
    If Right(path, 1) <> "\" Then path = path & "\"
    If Dir(path & file) = "" Then
        GetValue = "File Not Found"
        Exit Function
    End If
'   Create the argument
    arg = "'" & path & "[" & file & "]" & sheet & "'!" & _
      Range(ref).Range("A1").Address(, , xlR1C1)
'   Execute an XLM macro
    GetValue = ExecuteExcel4Macro(arg)
End Function
Function sentcase(oCell As Range)
Dim Sentences() As String
Sentences = Split(oCell, ".")
                For x = 0 To UBound(Sentences)
                  Sentences(x) = " " & UCase(Left(LTrim(Sentences(x)), 1)) & _
                                 LCase(Mid(LTrim(Sentences(x)), 2))
                                 
                Next
                              
                sentcase = Application.Substitute(Trim(Join(Sentences, ".")), " i ", " I ")
 End Function
Function getuser()
getuser = Environ("username")
End Function
Public Function Reverse(str As String) As String 'brendon fisher
    Reverse = StrReverse(Trim(str))
End Function
Public Function ConcatForSQL(ConcatRange As Variant) As String 'brendon fisher
Dim x As Integer
x = 1
Dim current As String
current = "('"
    Do While x <= ConcatRange.Count
    
        If InStr(1, current, ConcatRange(x)) = 0 Then
            current = current & ConcatRange(x) & "', '"
        End If
        
        x = x + 1
        
    Loop
    
    current = Left(current, Len(current) - 4)
    current = current & "')"
    
ConcatForSQL = current
End Function
Function ConcatenateIf(CriteriaRange As Range, Condition As Variant, _
        ConcatenateRange As Range, Optional Separator As String = ",") As Variant 'brendon fisher
    Dim i As Long
    Dim strResult As String
    On Error GoTo ErrHandler
    If CriteriaRange.Count <> ConcatenateRange.Count Then
        ConcatenateIf = CVErr(xlErrRef)
        Exit Function
    End If
    For i = 1 To CriteriaRange.Count
        If CriteriaRange.Cells(i).Value = Condition Then
            If InStr(strResult, CriteriaRange.Cells(i).Value) = 0 Then
                strResult = strResult & Separator & ConcatenateRange.Cells(i).Value
                
            End If
        End If
    Next i
    If strResult <> "" Then
        strResult = Mid(strResult, Len(Separator) + 1)
    End If
    ConcatenateIf = strResult
    Exit Function
ErrHandler:
    ConcatenateIf = CVErr(xlErrValue)
End Function
Function ConcatUniq(xRg As Range, xChar As String) As String
'updateby Extendoffice 20151228 -- 'brendon fisher
    Dim xCell As Range
    Dim xDic As Object
    Set xDic = CreateObject("Scripting.Dictionary")
    For Each xCell In xRg
        xDic(xCell.Value) = Empty
    Next
    ConcatUniq = Join$(xDic.Keys, xChar)
    ConcatUniq = Mid(ConcatUniq, 1, Len(ConcatUniq))
        Set xDic = Nothing
End Function
Function GetColor(r As Range) As Integer 'brendon fisher
Application.Volatile
GetColor = r.Interior.ColorIndex '& " [" & r.DisplayFormat.Interior.Color & "]"
End Function
Function ConcatUniqueIf(CriteriaRange As Range, Condition As Variant, ConcatenateRange As Range, Optional Separator As String = ",") As Variant 'brendon fisher
Dim xResult As String
On Error Resume Next
If CriteriaRange.Count <> ConcatenateRange.Count Then
    ConcatUniqueIf = CVErr(xlErrRef)
    Exit Function
End If
For i = 1 To CriteriaRange.Count
    If CriteriaRange.Cells(i).Value = Condition And InStr(UCase(xResult), UCase(Trim(ConcatenateRange.Cells(i).Value))) = 0 Then
        xResult = xResult & Separator & UCase(Trim(ConcatenateRange.Cells(i).Value))
    End If
Next i
If xResult <> "" Then
    xResult = VBA.Mid(xResult, VBA.Len(Separator) + 1)
End If
ConcatUniqueIf = xResult
Exit Function
End Function
Public Function SortArray_Alphabetically(ArrStr As String, Delimiter As String) As String

If IsNull(ArrStr) Or ArrStr = "" Then
SortArray_Alphabetically = ""
Exit Function
End If

Dim myArray As Variant
Dim x As Long, y As Long
Dim TempTxt1 As String
Dim TempTxt2 As String

myArray = Split(ArrStr, Delimiter)

'Alphabetize Sheet Names in Array List
For x = LBound(myArray) To UBound(myArray)
For y = x To UBound(myArray)
If UCase(myArray(y)) < UCase(myArray(x)) Then
TempTxt1 = myArray(x)
TempTxt2 = myArray(y)
myArray(x) = TempTxt2
myArray(y) = TempTxt1
End If
Next y
Next x

For x = LBound(myArray) To UBound(myArray)
SortArray_Alphabetically = SortArray_Alphabetically & myArray(x) & Delimiter
Next x

SortArray_Alphabetically = Left(SortArray_Alphabetically, Len(SortArray_Alphabetically) - Len(Delimiter))

End Function
Function GetSignature(ByVal sFile As String) As String
    Dim fso As Object
    Dim ts As Object
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set ts = fso.GetFile(sFile).OpenAsTextStream(1, -2)
    GetSignature = ts.readall
    ts.Close
End Function
Sub dummymacro()
MsgBox "Placeholder for macro associated with this button"
End Sub
Sub xlstudfunc()
'error trapping if no other workbook open
Set objShell = CreateObject("Wscript.Shell")
    If IsError(findany("toolsnameslist", "xlstconfigs")) Or findany("toolsnameslist", "xlstconfigs") = 0 Then
    Exit Sub
    End If
lastrow = Sheet1.Columns("E").Find("*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows, LookIn:=xlValues).Row
For x = 2 To lastrow
udfunc = udfunc & vbCr & Sheet1.Cells(x, "e") & " - " & Sheet1.Cells(x, "f")
Next x
objShell.Popup udfunc, , "XLSUPERTOOL USER DEFINED FUNCTIONS"
End Sub
Sub initiallaunch()
Dim addinpath As String
Dim confirmstr As String
Dim AI As Excel.AddIn
Dim addinyes As Long
Dim confirmmsg As String
Dim wb As Workbook
Dim cnt As Long
On Error Resume Next
addinpath = Application.UserLibraryPath
Resume Next
'do standalone launch
If findany("Standalone", Sheet3.Name) > 0 Then
Call showxlst
Exit Sub
End If

confirmmsg = "This will attempt to install the XLSuperTool add-in into "


'check if XLSuperTool add-in already exists in adding folder
If FileFolderExists(addinpath & "XLSuperTool2.xlam") Then
addinyes = 1
confirmmsg = "This will overwrite existing XLSuperTool install in "
End If



'do add-in #1
If findany("Add-in #1", Sheet3.Name) > 0 Then
ChDrive "C"
ChDir addinpath
confirmstr = MsgBox(confirmmsg & addinpath & vbCr & "INSTALL?", vbYesNo, "CONFIRM")
If confirmstr = vbYes Then
Application.DisplayAlerts = False
ActiveWorkbook.IsAddin = True
Set AI = Application.AddIns.Add(Filename:=addinpath & "XLSuperTool2.xlam")
If addinyes = 0 Then
        AI.Installed = True
        Else
        AI.Installed = False
        'copy existing bookmarks
    cnt = 2 'start on row 2 of saveddata sheet
    p = addinpath
    f = "XLSuperTool2.xlam"
    s = "bookmarks"
    a = "A1"
    If GetValue(p, f, s, a) <> "" Then
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
     For c = 1 To 256 'loop through columns of existing add-in sheet 'bookmarks'
            a = Cells(1, c).Address
            If Trim(GetValue(p, f, s, a)) <> "" And GetValue(p, f, s, a) <> 0 Then
            ThisWorkbook.Sheets("bookmarks").Cells(1, c) = GetValue(p, f, s, a)
            For r = 2 To 100 'unlikely number
            a = Cells(r, c).Address
            If GetValue(p, f, s, a) <> "" And GetValue(p, f, s, a) <> 0 Then
            ThisWorkbook.Sheets("bookmarks").Cells(r, c) = GetValue(p, f, s, a)
            End If
            Next r
            ThisWorkbook.Sheets("saveddata").Cells(cnt, "b") = ThisWorkbook.Sheets("bookmarks").Cells(1, c)
            cnt = cnt + 1
            End If
        Next c
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    End If
        
        End If
        Application.DisplayAlerts = False
ThisWorkbook.SaveAs Filename:=addinpath & "XLSuperTool2.xlam", FileFormat:=55
AI.Installed = True
        'add blank workbook before close so that add-in loads properly
        Set wb = Workbooks.Add
        MsgBox "XLSuperTool Installed." & vbCr & "May need to RESTART Excel to see new ribbon/menu for XLSuperTool", vbInformation, "CONFIRMED"
        ActiveWorkbook.Close savechanges:=False
        ThisWorkbook.Close
        Application.DisplayAlerts = True
        Application.Quit
        Application.ActiveWindow.Close savechanges:=False
        ActiveWorkbook.Close savechanges:=False
End If
End If
'do add-in #2
If findany("Add-in #2", Sheet3.Name) > 0 Then
ChDrive "C"
ChDir addinpath
confirmstr = MsgBox(confirmmsg & addinpath & vbCr & "INSTALL?", vbYesNo, "CONFIRM")
If confirmstr = vbYes Then
Application.DisplayAlerts = False
ActiveWorkbook.IsAddin = True
Set AI = Application.AddIns.Add(Filename:=addinpath & "XLSuperTool2.xlam")
If addinyes = 0 Then
        AI.Installed = True
        Else
        AI.Installed = False
        'copy existing bookmarks
        cnt = 2 'start on row 2 of saveddata sheet
    p = addinpath
    f = "XLSuperTool2.xlam"
    s = "bookmarks"
    a = "A1"
    If GetValue(p, f, s, a) <> "" Then
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
     For c = 1 To 256 'loop through columns of existing add-in sheet 'bookmarks'
            a = Cells(1, c).Address
            If Trim(GetValue(p, f, s, a)) <> "" And GetValue(p, f, s, a) <> 0 Then
            ThisWorkbook.Sheets("bookmarks").Cells(1, c) = GetValue(p, f, s, a)
            For r = 2 To 100 'unlikely number
            a = Cells(r, c).Address
            If GetValue(p, f, s, a) <> "" And GetValue(p, f, s, a) <> 0 Then
            ThisWorkbook.Sheets("bookmarks").Cells(r, c) = GetValue(p, f, s, a)
            End If
            Next r
            ThisWorkbook.Sheets("saveddata").Cells(cnt, "b") = ThisWorkbook.Sheets("bookmarks").Cells(1, c)
            cnt = cnt + 1
            End If
        Next c
    Application.ScreenUpdating = True
    Application.Calculation = xlCalculationAutomatic
    End If
        End If
        Application.ScreenUpdating = False
        Application.DisplayAlerts = False
ThisWorkbook.SaveAs Filename:=addinpath & "XLSuperTool2.xlam", FileFormat:=55
AI.Installed = True
Application.ScreenUpdating = True
        'add blank workbook before close so that add-in loads properly
        Set wb = Workbooks.Add
        
        MsgBox "XLSuperTool Installed." & vbCr & "May need to RESTART Excel to see new ribbon/menu for XLSuperTool", vbInformation, "CONFIRMED"
        Application.DisplayAlerts = False
        ActiveWorkbook.Close savechanges:=False
        ThisWorkbook.Close
        'Application.DisplayAlerts = True
        Application.Quit
        Application.ActiveWindow.Close savechanges:=False
        ActiveWorkbook.Close savechanges:=False
End If
End If
End Sub
Sub showxlst()
Dim frm As UserForm
Dim i As Long
Dim xlstconfigs As Worksheet
Dim lastrow As Long
Dim lastcol As Long
Dim startcoltools As Variant
Dim startcolezbuts As Variant
Dim rng1 As String
Dim rng2 As String

'error trapping if no other workbook open
    If IsError(findany("toolsnameslist", "xlstconfigs")) Or findany("toolsnameslist", "xlstconfigs") = 0 Then
    Exit Sub
    End If


'Re-enable
Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic
Application.EnableEvents = True
Application.DisplayAlerts = True
Application.AskToUpdateLinks = True
Application.StatusBar = False

Application.ScreenUpdating = False

'check for xlstconfigs sheet
For i = 1 To ThisWorkbook.Sheets.Count
If ThisWorkbook.Sheets(i).Name = "xlstconfigs" Then
hit = 1
End If
Next i
If hit = 0 Then
MsgBox ThisWorkbook.Name & " doesn't appear to be an XLSuperTool workbook", vbCritical, "ALERT"
Exit Sub
End If

'initialize
Set xlstconfigs = ThisWorkbook.Worksheets("xlstconfigs")
lastcol = xlstconfigs.Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByColumns).Column
startcoltools = Range(findany("toolsnameslist", "xlstconfigs")).Column
startcolezbuts = Range(findany("eznameslist", "xlstconfigs")).Column

'alphabetize tools
lastrow = xlstconfigs.Columns(startcoltools).Find("*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows, LookIn:=xlValues).Row
If lastrow < 2 Then
lastrow = 2
End If
rng1 = Split(Cells(1, startcoltools).Address, "$")(1) & "2:" & Split(Cells(1, startcoltools).Address, "$")(1) & lastrow
rng2 = Split(Cells(1, startcoltools).Address, "$")(1) & "1:" & Split(Cells(1, startcoltools + 3).Address, "$")(1) & lastrow
    Application.CutCopyMode = False
    xlstconfigs.Sort.SortFields.Clear
    xlstconfigs.Sort.SortFields.Add Key:=Range(rng1), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
        xlSortNormal
    With xlstconfigs.Sort
        .SetRange Range(rng2)
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
 'alphabetize EZbuts
lastrow = xlstconfigs.Columns(startcolezbuts).Find("*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows, LookIn:=xlValues).Row
If lastrow < 2 Then
lastrow = 2
End If
rng1 = Split(Cells(1, startcolezbuts).Address, "$")(1) & "2:" & Split(Cells(1, startcolezbuts).Address, "$")(1) & lastrow
rng2 = Split(Cells(1, startcolezbuts).Address, "$")(1) & "1:" & Split(Cells(1, startcolezbuts + 11).Address, "$")(1) & lastrow
     Application.CutCopyMode = False
    xlstconfigs.Sort.SortFields.Clear
    xlstconfigs.Sort.SortFields.Add Key:=Range(rng1), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:= _
        xlSortNormal
    With xlstconfigs.Sort
        .SetRange Range(rng2)
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
'Re-enable screenupdating (before END SUB)
Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic
Application.EnableEvents = True
Application.DisplayAlerts = True
Application.AskToUpdateLinks = True
Application.StatusBar = False

'unload loaded forms
    For Each frm In UserForms
        Unload frm
    Next frm
For i = VBA.UserForms.Count - 1 To 0 Step -1
        'Str = Str & VBA.UserForms(i).Name & vbNewLine
        Unload VBA.UserForms(i)
        Next i
xlst.MultiPage1.Pages(4).Visible = True 'activate designer tab
'do add-in #2 hide designer tab
If findany("Add-in #2", Sheet3.Name) > 0 Then
xlst.MultiPage1.Pages(4).Visible = False
End If
     xlst.Show vbmodless
End Sub
Sub tooltabhider() 'hide tool tabs
Dim cCont As control
On Error Resume Next
xlst.MultiPage1.Pages(2).Visible = False
For Each cCont In xlst.MultiPage1.Pages(2).Controls ' <-- loop through controls of current page
        If TypeOf cCont Is Frame Then ' <-- check if control type is Frame
             cCont.Visible = False 'hide frame
            End If
    Next cCont
Resume Next
End Sub
Sub toolframereset() 'reset all controls on tool frames
Dim cCont As control
On Error Resume Next

For Each cCont In xlst.MultiPage1.Pages(2).Controls ' <-- loop through controls of current page

        If TypeOf cCont Is MSForms.Frame Then ' <-- check if control type is Frame
       cCont.Caption = xlst.ListBox2.Text 'rename frame tool name
            End If
    
    If TypeOf cCont Is MSForms.ListBox Then ' <-- check if control type is listbox
          cCont.Clear 'clear listbox
          cCont.Visible = False
            End If
    If TypeOf cCont Is MSForms.ComboBox Then ' <-- check if control type is combobox
          cCont.Clear 'clear combobox
          cCont.Visible = False
            End If
            
            If TypeOf cCont Is MSForms.TextBox And cCont.Name <> "toolboxcaller" And cCont.Name <> "toolboxinfobox" Then ' <-- check if control type is textbox
            cCont.Text = "" 'clear textbox
            cCont.Visible = False
            End If
            If TypeOf cCont Is MSForms.CheckBox Then ' <-- check if control type is checkbox
             cCont.Value = False 'clear checkbox
            End If
            If TypeOf cCont Is MSForms.OptionButton Then ' <-- check if control type is optionbutton
             cCont.Value = False 'clear optionbutton
            End If
            If TypeOf cCont Is MSForms.Label Then ' <-- check if control type is label
             'cCont.Caption = cCont.Name
             cCont.Visible = False
            End If
            
    Next cCont
    'reset optionbuttons
    xlst.cbOptionButton1A.Caption = "Any"
    xlst.cbOptionButton1B.Caption = "Exact match"
    xlst.cbOptionButton1C.Caption = "Begins with"
    xlst.cbOptionButton1D.Caption = "Ends with"
    xlst.cbOptionButton1E.Caption = "Contains"
Resume Next
End Sub
Sub specfictoolframereset() 'reset all controls on specific tool frames
Dim cCont As control
On Error Resume Next

For Each cCont In xlst.MultiPage1.Pages(2).Controls ' <-- loop through controls of current page

        If TypeOf cCont Is MSForms.Frame Then ' <-- check if control type is Frame
       cCont.Caption = xlst.ListBox2.Text 'rename frame tool name
            End If
   
    
    If TypeOf cCont Is MSForms.ListBox Then ' <-- check if control type is listbox
          cCont.Clear 'clear listbox
          cCont.Visible = True
            End If
    If TypeOf cCont Is MSForms.ComboBox Then ' <-- check if control type is combobox
          cCont.Clear 'clear combobox
          cCont.Visible = True
            End If
            
            If TypeOf cCont Is MSForms.TextBox And cCont.Name <> "toolboxcaller" And cCont.Name <> "toolboxinfobox" Then ' <-- check if control type is textbox
            cCont.Text = "" 'clear textbox
            cCont.Visible = True
            End If
            If TypeOf cCont Is MSForms.CheckBox Then ' <-- check if control type is checkbox
             cCont.Value = True 'clear checkbox
            End If
            If TypeOf cCont Is MSForms.OptionButton Then ' <-- check if control type is optionbutton
             cCont.Value = True 'clear optionbutton
            End If
            If TypeOf cCont Is MSForms.Label Then ' <-- check if control type is label
            cCont.Visible = True
            End If
    Next cCont
Resume Next
End Sub
Sub doclick()
Dim i As Long
Dim current As Workbook
Dim hit As Long
Dim dupname As String
Dim lastrow As Long
Dim cCont As control
Dim selectedtool As String
Dim subr As String
Dim subr2 As String
Dim xlstconfigs As Worksheet
Dim clickedop As Long
Dim clickedtxt As Variant
Dim rng As Variant
Dim startcoltools As Long
Dim startcolezbuts As Long
Dim appliedmsg As String
Dim loadframe As String
Dim persn As Workbook
Dim p As Variant
Dim wbkcnt As Long

'error trapping if no other workbook open
    If IsError(findany("toolsnameslist", "xlstconfigs")) Or findany("toolsnameslist", "xlstconfigs") = 0 Then
    Exit Sub
    End If


Set xlstconfigs = ThisWorkbook.Sheets("xlstconfigs")
clickedop = xlst.ListBox2.ListIndex
clickedtxt = xlst.ListBox2.Text
Set rng = Selection
loadframe = "" 'reset


xlst.toolsinfobox.BackColor = vbCyan 'reset color on infobox
xlst.toolboxinfobox.BackColor = vbCyan 'reset color on toolboxinfobox

'if nothing selected on tools tab
If xlst.ListBox2.Text = "" Then
xlst.toolsinfobox.BackColor = vbMagenta
xlst.toolsinfobox = "No tool selected" & vbCr & "Select tool and press green DO button"
Exit Sub
End If

'if not being called from toolbox tab
If Trim(xlst.toolboxcaller.Text) = "" Then
Call tooltabhider 'hide any open tools
End If

'processing...
xlst.toolsinfobox = "Processing..."
xlst.toolsinfobox.BackColor = vbYellow

'initialize
Set xlstconfigs = ThisWorkbook.Worksheets("xlstconfigs")
lastrow = xlstconfigs.Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
startcoltools = xlstconfigs.Range(findany("toolsnameslist", "xlstconfigs")).Column
startcolezbuts = xlstconfigs.Range(findany("eznameslist", "xlstconfigs")).Column

If IsError(Application.Match(clickedtxt, xlstconfigs.Columns(startcoltools), 0)) = False Then
  hit = Application.Match(clickedtxt, xlstconfigs.Columns(startcoltools), 0)
  subr = xlstconfigs.Cells(hit, startcoltools + 2)
End If


'match selected tool to frame
If xlst.MultiPage1.Pages(2).Visible = False Then
For Each cCont In xlst.MultiPage1.Pages(2).Controls ' <-- loop through controls of current page
        If TypeOf cCont Is Frame Then ' <-- check if control type is Frame
            If Trim(cCont.Caption) <> "" And cCont.Caption = xlst.ListBox2.Text Then
            selectedtool = cCont.Name
            'MsgBox "selected: " & xlst.ListBox2.Text & vbCr & "name: " & selectedtool & vbCr & "caption: " & cCont.Caption
            'loadframe = selectedtool
            End If
        End If
    Next cCont
    End If
    
'check if macro in Personal first
  hit = 0
  For Each p In Workbooks
  If InStr(p.Name, "personal") = False Then
  wbkcnt = wbkcnt + 1
  End If
            If InStr(p.Name, "personal") And InStr(p.path, "xlstart") Then
            Set persn = p
            hit = 1
            End If
         Next
         
                  
 If hit = 1 Then
 If ProtectedVBProject(persn) = False Then
  If ProcedureExists(subr, persn) = True Then
  subr = persn.Name & "!" & subr
End If
End If
End If
  
  
'check if the macro exists in personal **this doesn't always work successfully**
If InStr(subr, "personal.") = 0 Then
If ProtectedVBProject(ThisWorkbook) = False Then
If InStr(subr, ":") > 0 Then
subr2 = Left(subr, InStr(subr, ":") - 1)
Else
subr2 = subr
End If
  If ProcedureExists(subr2, ThisWorkbook) = False Then
  xlst.toolsinfobox = subr2 & " subroutine doesn't exist within " & vbCr & ThisWorkbook.FullName & "." & vbCr & "The " & subr & " Tool may not have been configured correctly. Go into the DESIGNER tab and modify."
    xlst.toolsinfobox.BackColor = vbMagenta
  Exit Sub
  End If
End If
End If

'specific loadframes
If xlst.ListBox2.Text = "Currency Converter" Then
loadframe = "Frame27"
xlst.MultiPage1.Pages(2).Visible = True
xlst.Controls(loadframe).Top = 74
xlst.Controls(loadframe).Visible = True
xlst.MultiPage1.Value = 2
Call curconvert
Exit Sub
End If
If xlst.ListBox2.Text = "Unit Converter" Then
loadframe = "Frame5"
xlst.MultiPage1.Pages(2).Visible = True
xlst.Controls(loadframe).Top = 74
xlst.Controls(loadframe).Visible = True
xlst.MultiPage1.Value = 2
Call uconv
Exit Sub
End If
If xlst.ListBox2.Text = "Dims Calc" Then
loadframe = "Frame6"
xlst.MultiPage1.Pages(2).Visible = True
xlst.Controls(loadframe).Top = 74
xlst.Controls(loadframe).Visible = True
xlst.MultiPage1.Value = 2
Call dimcalc
Exit Sub
End If
If xlst.ListBox2.Text = "Increase/Decrease" Then
loadframe = "Frame13"
xlst.MultiPage1.Pages(2).Visible = True
xlst.Controls(loadframe).Top = 74
xlst.Controls(loadframe).Visible = True
xlst.MultiPage1.Value = 2
Call incdec
Exit Sub
End If
If xlst.ListBox2.Text = "FAK Estimator" Then
loadframe = "Frame28"
xlst.MultiPage1.Pages(2).Visible = True
xlst.Controls(loadframe).Top = 74
xlst.Controls(loadframe).Visible = True
xlst.MultiPage1.Value = 2
Call fakest
Exit Sub
End If
If xlst.ListBox2.Text = "Bookmarks" Then
If wbkcnt = 0 And ThisWorkbook.Sheets("saveddata").Range("B2") = "" Then
xlst.toolsinfobox.BackColor = vbMagenta
xlst.toolsinfobox = "First, open all workbooks you want to inlclude in an Excel Bookmark"
Exit Sub
End If
loadframe = "Frame3"
xlst.MultiPage1.Pages(2).Visible = True
xlst.Controls(loadframe).Top = 74
xlst.Controls(loadframe).Visible = True
xlst.MultiPage1.Value = 2
Call dobmks
Exit Sub
End If

    
'check if tied to form
If InStr(subr, ":") = 0 And loadframe = "" Then
Application.Run subr
If xlst.toolsinfobox.BackColor = vbYellow Then
xlst.toolsinfobox.BackColor = vbGreen
xlst.toolsinfobox = xlst.ListBox2.Text & " processed."
End If
Exit Sub
End If

If InStr(subr, ":") > 0 Then
Application.Run Left(subr, InStr(subr, ":") - 1)
Else
Application.Run subr
End If
On Error GoTo errexit:
If xlst.toolsinfobox.BackColor <> vbMagenta Then
If Trim(loadframe) = "" Then
loadframe = Mid(subr, InStr(subr, ":") + 1, 99)
End If
xlst.MultiPage1.Pages(2).Visible = True
xlst.Controls(loadframe).Top = 74
xlst.Controls(loadframe).Visible = True
xlst.MultiPage1.Value = 2
Exit Sub
End If
errexit:
Exit Sub
End Sub
Sub xluihandler(str As String)
Call showxlst
On Error Resume Next
If xlst.MultiPage1.Value = 0 Then 'tools
xlst.ListBox2.Text = str
Call doclick
End If

If IsError(Application.Match(str, Sheet2.Range("H:H"), 0)) = False Then 'ezbuttons
xlst.MultiPage1.Value = 1 'set to ezbuttons
xlst.ListBox1.Text = str
Call doclick
End If

Resume Next
End Sub
Sub xlezbutslaunch()
On Error GoTo errexit:
Call showxlst
xlst.MultiPage1.Value = 1
errexit:
Exit Sub
End Sub
Sub bulletpointer() 'bulletpointer
Dim cnt As Long
cnt = 1
For Each rval In Selection
'remove previous run
pfind = InStr(rval, ".")
If pfind <= 5 And pfind > 0 And InStr(Left(rval, pfind), " ") = 0 Then 'if period found in first 5 characters AND not blank found before.
Range(rval.Address).NumberFormat = "@"
Range(rval.Address) = Trim(Mid(rval, InStr(rval, ".") + 1, Len(rval)))
End If
'add bullet numbers
Range(rval.Address) = Replace(Replace(rval, ChrW(8594) & " ", ""), Chr(149) & " ", "")
If Trim(xlst.ezinputbox) <> "" Then
Range(rval.Address) = Replace(Range(rval.Address), xlst.ezinputbox, "")
End If
Range(rval.Address).NumberFormat = "@"
If xlst.ezbutpressed = "yellow" Then
Range(rval.Address) = Replace(cnt & ". " & rval, Chr(149), "")
End If
If xlst.ezbutpressed = "red" Then
Range(rval.Address) = Replace(ArabicToRoman(cnt) & ". " & rval, Chr(149), "")
End If
If xlst.ezbutpressed = "blue" Then
Range(rval.Address) = Chr(149) & " " & rval
End If
If xlst.ezbutpressed = "green" Then
Range(rval.Address) = xlst.ezinputbox & " " & rval
End If

cnt = cnt + 1
Next
End Sub
Sub docasechange()
Dim c As Range
Dim x As Long, oCell As Range, Sentences() As String
    On Error Resume Next
    For Each c In Selection
     If Trim(c.Value) <> "" Then
     If xlst.ezbutpressed = "yellow" Then
        c.Value = UCase(c.Value)
        End If
        If xlst.ezbutpressed = "red" Then
        c.Value = LCase(c.Value)
        End If
        If xlst.ezbutpressed = "blue" Then
        c.Value = Application.Proper(c.Value)
        End If
        End If
        Next c
  If xlst.ezbutpressed = "green" Then
        Set oCell = Selection
        If InStr(oCell, ":") > 0 Then
        xlst.ezbutinfobox = "Unable to apply Sentence case to multiple cells. Select only single cell."
        xlst.ezbutinfobox.BackColor = vbMagenta
        Exit Sub
        End If
  Sentences = Split(oCell, ".")
                For x = 0 To UBound(Sentences)
                  Sentences(x) = " " & UCase(Left(LTrim(Sentences(x)), 1)) & _
                                 LCase(Mid(LTrim(Sentences(x)), 2))
                Next
                oCell = Application.Substitute(Trim(Join(Sentences, ".")), " i ", " I ")
     End If
End Sub
Sub dopercent() 'do %
Dim sadd As String
Dim rng As Range
Dim rrng As Range
On Error Resume Next
If xlst.ezbutpressed = "yellow" Then
'store selected range
'xlst.ezinputbox = Selection.Address
xlst.ezinputbox = Selection.SpecialCells(xlCellTypeVisible).Address
xlst.ezbutinfobox = "Select a range on the same sheet for the result and press the GREEN button"
xlst.ezbutinfobox.BackColor = vbCyan
Exit Sub
End If
'do %
If Selection.Address = xlst.ezinputbox Then
xlst.ezbutinfobox = "Select a range different than the source range"
xlst.ezbutinfobox.BackColor = vbMagenta
Exit Sub
End If

sadd = xlst.ezinputbox
    Set rng = Range(sadd)
    Set rrng = Selection
    For Each r In rrng
    For Each c In rng
        If rnext <> r.Address And InStr(cnext, c.Address) = False Then
        rnext = r.Address
        cnext = cnext & "," & c.Address
        r.Formula = "=" & Replace(c.Address, "$", "") & "/sum(" & sadd & ")"
        r.NumberFormat = "##%"
        End If
        Next c
    Next r
xlst.ezbutinfobox = "Process complete" & vbCr & "Results on:" & vbCr & ActiveWorkbook.Name & "[" & ActiveSheet.Name & "]" & Selection.Address
xlst.ezbutinfobox.BackColor = vbGreen
Exit Sub
End Sub
Sub concater() 'concatenator
Dim i As Long
Dim septype As Variant
Dim sepdiv As String
Dim newstr As String

If xlst.ezbutpressed = "yellow" Then
'store selected range
xlst.ezinputbox = Selection.Address
xlst.ezbutinfobox = "Select single cell on the same sheet and press desired button"
xlst.ezbutinfobox.BackColor = vbCyan
Exit Sub
End If
sadd = xlst.ezinputbox

'error checking
If Trim(sadd) = "" Then
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "First range not selected. Select entire range and press YELLOW button"
Exit Sub
End If


If xlst.ezbutpressed = "red" Then
sepdiv = " "
septype = "space"
End If
If xlst.ezbutpressed = "blue" Then
sepdiv = ","
septype = "comma"
End If
If xlst.ezbutpressed = "green" Then
septype = "carriage return"
End If

On Error Resume Next

For Each entry In Range(sadd)
If i = 0 Then
newstr = entry.Address(0, 0)
Else
If septype = "carriage return" Then
newstr = newstr & "&CHAR(10)" & "&" & entry.Address
Else
newstr = newstr & "&""" & sepdiv & """&" & entry.Address
End If
End If
i = i + 1
Next

ActiveCell = "=" & newstr
If septype = "carriage return" Then
With ActiveCell
.WrapText = True
End With
End If


Resume Next
xlst.ezbutinfobox.BackColor = vbGreen
xlst.ezbutinfobox = i & " elements " & septype & " separated concatenated into cell " & ActiveCell.Address
Exit Sub
End Sub
Sub hyperadd()
If xlst.ezbutpressed = "yellow" Then
'store selected range
xlst.ezinputbox = "" 'reset
wbk1 = ActiveWorkbook.Name
ws1 = ActiveSheet.Name
xlst.ezinputbox = "wbk1:" & wbk1 & "ws1:" & ws1 & "sel1:" & Selection.Address
xlst.ezbutinfobox = "Select a range (entire column) to link " & Selection.Address & " and press the RED button"
xlst.ezbutinfobox.BackColor = vbCyan
Exit Sub
End If
If xlst.ezbutpressed = "red" Then
If Trim(xlst.ezinputbox) = "" Then
xlst.ezbutinfobox = "First select the first range and press the YELLOW button"
xlst.ezbutinfobox.BackColor = vbMagenta
Exit Sub
End If
xlst.ezbutinfobox = "Press the GREEN button to add links or BLUE to clear"
xlst.ezbutinfobox.BackColor = vbCyan
wbk2 = ActiveWorkbook.Name
ws2 = ActiveSheet.Name
xlst.ezinputbox = xlst.ezinputbox & ";" & "wbk2:" & wbk2 & "ws2:" & ws2 & "sel2:" & Selection.Address
Exit Sub
End If


If xlst.ezbutpressed = "blue" Or xlst.ezbutpressed = "green" Then
If Trim(xlst.ezinputbox) = "" Or InStr(xlst.ezinputbox, ";") = 0 Then
xlst.ezbutinfobox = "First use yellow and red buttons to select linking ranges"
xlst.ezbutinfobox.BackColor = vbMagenta
Exit Sub
End If

'configs
wbk1 = Replace(Trim(Left(xlst.ezinputbox, InStr(xlst.ezinputbox, "ws1:") - 1)), "wbk1:", "")
ws1 = Trim(Mid(xlst.ezinputbox, InStr(xlst.ezinputbox, "ws1:") + 4, InStr(xlst.ezinputbox, "sel1:") - (InStr(xlst.ezinputbox, "ws1:") + 4)))
rng1 = Replace(Trim(Mid(xlst.ezinputbox, InStr(xlst.ezinputbox, "sel1:") + 6, InStr(xlst.ezinputbox, "wbk2:") - (InStr(xlst.ezinputbox, "sel1:") + 6))), ";", "")
wbk2 = Trim(Mid(xlst.ezinputbox, InStr(xlst.ezinputbox, "wbk2:") + 5, InStr(xlst.ezinputbox, "ws2:") - (InStr(xlst.ezinputbox, "wbk2:") + 5)))
ws2 = Trim(Mid(xlst.ezinputbox, InStr(xlst.ezinputbox, "ws2:") + 4, InStr(xlst.ezinputbox, "sel2:") - (InStr(xlst.ezinputbox, "ws2:") + 4)))
rng2 = Trim(Mid(xlst.ezinputbox, InStr(xlst.ezinputbox, "sel2:") + 6, 99))

'MsgBox "wbk1: " & wbk1 & vbCr & "ws1: " & ws1 & vbCr & "rng1: " & rng1 & vbCr & "wbk2: " & wbk2 & vbCr & "ws2: " & ws2 & vbCr & "rng2: " & rng2 'for testing

If Application.Workbooks(wbk1).path = "" Or Application.Workbooks(wbk2).path = "" Then
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "Unable to hyperlink because one or both of the workbooks has not first been saved"
Exit Sub
End If




'loop through
If xlst.ezbutpressed = "blue" Or xlst.ezbutpressed = "green" Then
Application.ScreenUpdating = False
x = 1
y = Application.Max(Range(rng1).Rows(1).Row, Range(rng2).Cells.SpecialCells(xlCellTypeLastCell).Row)
rng1col = Workbooks(wbk1).Sheets(ws1).Range(rng1).Column
rng2col = Workbooks(wbk2).Sheets(ws2).Range(rng2).Column
wbkname1 = Workbooks(wbk1).FullName
wbkname2 = Workbooks(wbk2).FullName


firstshtcol = ColLetterFromNo(rng1col)
secondshtcol = ColLetterFromNo(rng2col)

If xlst.ezbutpressed = "blue" Then
Workbooks(wbk1).Sheets(ws1).Range(rng1).Hyperlinks.Delete
Workbooks(wbk2).Sheets(ws2).Range(rng2).Hyperlinks.Delete
xlst.ezbutinfobox.BackColor = vbGreen
xlst.ezbutinfobox = "Links cleared from: " & vbCr & wbk1 & "/" & ws1 & " range: " & rng1 & vbCr & wbk2 & "/" & ws2 & " range: " & rng2
Exit Sub
End If


If xlst.ezbutpressed = "green" Then
'clean lists first
For i = x To y
On Error Resume Next
If Trim(Workbooks(wbk1).Sheets(ws1).Cells(i, rng1col)) <> "" Then
Workbooks(wbk1).Sheets(ws1).Cells(i, rng1col) = Replace(Replace(Trim(Workbooks(wbk1).Sheets(ws1).Cells(i, rng1col)), vbCrLf, ""), Chr(10), "")
End If
If Workbooks(wbk2).Sheets(ws2).Cells(i, rng2col) <> "" Then
Workbooks(wbk2).Sheets(ws2).Cells(i, rng2col) = Replace(Replace(Trim(Workbooks(wbk2).Sheets(ws2).Cells(i, rng2col)), vbCrLf, ""), Chr(10), "")
End If
Resume Next
Next i


For i = x To y
linkstr1 = "" 'reset
linkstr2 = "" 'reset
'MsgBox "1: " & Workbooks(wbk1).Sheets(ws1).Cells(i, rng1col) & vbCr & "2: " & Workbooks(wbk2).Sheets(ws2).Cells(i, rng2col)
If Trim(Workbooks(wbk1).Sheets(ws1).Cells(i, rng1col)) <> "" Then 'And Workbooks(wbk2).Sheets(ws2).Cells(i, rng2col) <> "" Then
orgstr = Workbooks(wbk1).Sheets(ws1).Cells(i, rng1col)
End If
If Workbooks(wbk2).Sheets(ws2).Cells(i, rng2col) <> "" Then
dststr = Workbooks(wbk2).Sheets(ws2).Cells(i, rng2col)
End If

ezbutinfobox = "Applying links[" & Format(i / y, "Percent") & "] Complete"
DoEvents
If IsNumeric(Application.Match(orgstr, Workbooks(wbk2).Sheets(ws2).Range(rng2), 0)) = True Or IsNumeric(Application.Match(Val(orgstr), Workbooks(wbk2).Sheets(ws2).Range(rng2), 0)) = True Then
hit = Application.Match(orgstr, Workbooks(wbk2).Sheets(ws2).Range(rng2), 0)
If InStr(rng2, ":") = 0 Then 'in case only single cell selected
hit = Range(rng2).Row
End If
If orgstr = Workbooks(wbk2).Sheets(ws2).Cells(hit, secondshtcol) Then
linkstr1 = "'" & Workbooks(wbk2).Sheets(ws2).Name & "'!" & secondshtcol & hit
End If
If orgstr = Workbooks(wbk1).Sheets(ws1).Cells(i, firstshtcol) Then
linkstr2 = "'" & Workbooks(wbk1).Sheets(ws1).Name & "'!" & firstshtcol & i
End If
End If

If Trim(linkstr1) <> "" And Trim(linkstr2) <> "" Then
If Workbooks(wbk1).Name = Workbooks(wbk2).Name Then 'if within same workbook
If orgstr = Workbooks(wbk1).Sheets(ws1).Cells(i, firstshtcol) Then
Workbooks(wbk1).Sheets(ws1).Hyperlinks.Add Anchor:=Workbooks(wbk1).Sheets(ws1).Cells(i, firstshtcol), Address:="", SubAddress:=linkstr1, TextToDisplay:=orgstr, Screentip:="Click to go to " & linkstr1
End If
If orgstr = Workbooks(wbk2).Sheets(ws2).Cells(hit, secondshtcol) Then
Workbooks(wbk2).Sheets(ws2).Hyperlinks.Add Anchor:=Workbooks(wbk2).Sheets(ws2).Cells(hit, secondshtcol), Address:="", SubAddress:=linkstr2, TextToDisplay:=orgstr, Screentip:="Click to go to " & linkstr2
End If

Else
If orgstr = Workbooks(wbk1).Sheets(ws1).Cells(i, firstshtcol) Then
Workbooks(wbk1).Sheets(ws1).Hyperlinks.Add Anchor:=Workbooks(wbk1).Sheets(ws1).Cells(i, firstshtcol), Address:=wbkname2, SubAddress:=linkstr1, TextToDisplay:=orgstr, Screentip:="Click to go to " & linkstr1
End If
If orgstr = Workbooks(wbk2).Sheets(ws2).Cells(hit, secondshtcol) Then
Workbooks(wbk2).Sheets(ws2).Hyperlinks.Add Anchor:=Workbooks(wbk2).Sheets(ws2).Cells(hit, secondshtcol), Address:=wbkname1, SubAddress:=linkstr2, TextToDisplay:=orgstr, Screentip:="Click to go to " & linkstr2
End If

    
End If
End If

Next i
Application.ScreenUpdating = True
End If
End If

resrng = wbk1 & "/" & ws1 & " range: " & rng1 & vbCr & wbk2 & "/" & ws2 & " range: " & rng2

If xlst.ezbutpressed = "green" Then
xlst.ezbutinfobox = "Links added to " & vbCr & resrng
xlst.ezbutinfobox.BackColor = vbGreen
End If


Exit Sub
End If



End Sub
Sub chartcolor()
Dim oChart As ChartObject
Dim MySeries As Series
Dim FormulaSplit As Variant
Dim SourceRange As Range
Dim SourceRangeColor As Long
Dim nchart As Long
Dim pivotcol As String
Dim sws As String
Dim pointcnt As Long
Dim scnt As Long
Dim lkeyr As Long
Dim lkeyf As Long
Dim ctypehit As Long
Dim hit As Long
Dim pchart As String

If ActiveSheet.ChartObjects.Count = 0 Then
xlst.ezbutinfobox = "No charts found on " & ActiveSheet.Name
xlst.ezbutinfobox.BackColor = vbMagenta
Exit Sub
End If

If xlst.ezbutpressed = "yellow" Then
tchart = "LINE"
End If
If xlst.ezbutpressed = "red" Then
tchart = "PIE"
End If
If xlst.ezbutpressed = "blue" Then
tchart = "BAR"
End If
If xlst.ezbutpressed = "green" Then
tchart = "AREA"
End If



scnt = 1
nchart = 1
xlst.ezbutinfobox = "Processing..."
xlst.ezbutinfobox.BackColor = vbYellow
pchart = "charts"
DoEvents
'Loop through all charts in the active sheet
For Each oChart In ActiveSheet.ChartObjects
On Error GoTo errstop
'MsgBox ActiveSheet.ChartObjects(nchart).chart.ChartType
If IsError(Application.Match(ActiveSheet.ChartObjects(nchart).chart.ChartType, ThisWorkbook.Sheets("saveddataconfigs").Range("Q:Q"), 0)) = False Then
hit = Application.Match(ActiveSheet.ChartObjects(nchart).chart.ChartType, ThisWorkbook.Sheets("saveddataconfigs").Range("Q:Q"), 0)
If Application.Index(ThisWorkbook.Sheets("saveddataconfigs").Range("S:S"), Application.Match(ActiveSheet.ChartObjects(nchart).chart.ChartType, ThisWorkbook.Sheets("saveddataconfigs").Range("Q:Q"), 0), 1) = tchart Then
ctypehit = ctypehit + 1
End If
End If

If ActiveSheet.ChartObjects(nchart).chart.HasLegend Then
lkeyr = ActiveSheet.ChartObjects(nchart).chart.Legend.LegendEntries.Count
End If
lkeyf = 1
'collectcnt = oChart.chart.SeriesCollection.Count

'Loop through all series in the target chart
For Each MySeries In oChart.chart.SeriesCollection
'Get Source Data Range for the target series
FormulaSplit = Split(MySeries.Formula, ",")

'Capture the first cell in the source range then trap the color
 sws = Replace(Replace(Mid(MySeries.Formula, InStr(MySeries.Formula, "(") + 1, InStr(MySeries.Formula, "!") - InStr(MySeries.Formula, "(")), "'", ""), "!", "")
 If InStr(Range(FormulaSplit(2)).Address, ":") <> 0 Then
 pivotcol = StripNumber(Left(Range(FormulaSplit(2)).Address, InStr(Range(FormulaSplit(2)).Address, ":") - 1))
 startnum = removeAlpha(Left(Range(FormulaSplit(2)).Address, InStr(Range(FormulaSplit(2)).Address, ":") - 1))
 endnum = removeAlpha(Mid(Range(FormulaSplit(2)).Address, InStr(Range(FormulaSplit(2)).Address, ":") + 1, 99))
 pointcnt = ActiveSheet.ChartObjects(nchart).chart.SeriesCollection(scnt).Points.Count
 ledg = 1
 
 For n = startnum To endnum
'MsgBox "ledg: " & ledg & " pointcnt " & pointcnt
 If ledg <= pointcnt Then
'MsgBox sws & pivotcol & n & "---" & Sheets(sws).Range(pivotcol & n).Interior.Color
If Sheets(sws).Range(pivotcol & n).Interior.Color <> 16777215 And IsError(Application.Match(ActiveSheet.ChartObjects(nchart).chart.ChartType, ThisWorkbook.Sheets("saveddataconfigs").Range("Q:Q"), 0)) = False Then
If Application.Index(ThisWorkbook.Sheets("saveddataconfigs").Range("S:S"), Application.Match(ActiveSheet.ChartObjects(nchart).chart.ChartType, ThisWorkbook.Sheets("saveddataconfigs").Range("Q:Q"), 0), 1) = tchart Then
'MsgBox pivotcol & n & " nchart: " & nchart & " scnt: " & scnt '& " ledg: " & ledg


If tchart = "LINE" Then

If ThisWorkbook.Sheets("saveddataconfigs").Cells(hit, "t") = "YES" Then 'with markers
ActiveSheet.ChartObjects(nchart).chart.SeriesCollection(scnt).Points(ledg).Format.Fill.ForeColor.RGB = Sheets(sws).Range(pivotcol & n).Interior.Color
End If

ActiveSheet.ChartObjects(nchart).chart.SeriesCollection(scnt).Points(ledg).Format.Line.ForeColor.RGB = Sheets(sws).Range(pivotcol & n).Interior.Color

If ActiveSheet.ChartObjects(nchart).chart.HasLegend Then

If Sheet2.Cells(hit, "t") = "YES" Then 'with markers
ActiveSheet.ChartObjects(nchart).chart.Legend.LegendEntries(lkeyf).LegendKey.Format.Fill.ForeColor.RGB = Sheets(sws).Range(pivotcol & n).Interior.Color
End If
ActiveSheet.ChartObjects(nchart).chart.Legend.LegendEntries(lkeyf).LegendKey.Format.Line.ForeColor.RGB = Sheets(sws).Range(pivotcol & n).Interior.Color

End If
End If

If tchart = "PIE" Then
ActiveSheet.ChartObjects(nchart).chart.SeriesCollection(scnt).Points(ledg).Format.Fill.ForeColor.RGB = Sheets(sws).Range(pivotcol & n).Interior.Color
If ActiveSheet.ChartObjects(nchart).chart.HasLegend Then
ActiveSheet.ChartObjects(nchart).chart.Legend.LegendEntries(lkeyr).LegendKey.Format.Fill.ForeColor.RGB = Sheets(sws).Range(pivotcol & n).Interior.Color
End If
End If

If tchart = "BAR" Then
ActiveSheet.ChartObjects(nchart).chart.SeriesCollection(scnt).Points(ledg).Format.Fill.ForeColor.RGB = Sheets(sws).Range(pivotcol & n).Interior.Color
If ActiveSheet.ChartObjects(nchart).chart.HasLegend Then
If xlst.ezinputbox = 0 Or Trim(xlst.ezinputbox) = "" Then
ActiveSheet.ChartObjects(nchart).chart.Legend.LegendEntries(lkeyr).LegendKey.Format.Fill.ForeColor.RGB = Sheets(sws).Range(pivotcol & n).Interior.Color
Else
ActiveSheet.ChartObjects(nchart).chart.Legend.LegendEntries(lkeyf).LegendKey.Format.Fill.ForeColor.RGB = Sheets(sws).Range(pivotcol & n).Interior.Color
End If
End If
End If



If tchart = "AREA" Then
ActiveSheet.ChartObjects(nchart).chart.SeriesCollection(scnt).Points(ledg).Format.Fill.ForeColor.RGB = Sheets(sws).Range(pivotcol & n).Interior.Color
If ActiveSheet.ChartObjects(nchart).chart.HasLegend Then
If xlst.ezinputbox = 0 Or Trim(xlst.ezinputbox) = "" Then
ActiveSheet.ChartObjects(nchart).chart.Legend.LegendEntries(lkeyr).LegendKey.Format.Fill.ForeColor.RGB = Sheets(sws).Range(pivotcol & n).Interior.Color
Else
ActiveSheet.ChartObjects(nchart).chart.Legend.LegendEntries(lkeyf).LegendKey.Format.Fill.ForeColor.RGB = Sheets(sws).Range(pivotcol & n).Interior.Color
End If
End If
End If
End If
End If


 ledg = ledg + 1
 End If
 Next n
scnt = scnt + 1
lkeyr = lkeyr - 1
lkeyf = lkeyf + 1
End If
    Next MySeries
scnt = 1
nchart = nchart + 1

Next oChart
'determine chart plurality
If ctypehit = 1 Then
pchart = "chart"
End If
'reset reverser
If (tchart = "BAR" Or tchart = "AREA") And (xlst.ezinputbox = 0 Or Trim(xlst.ezinputbox) = "") Then
xlst.ezinputbox = 1
Else
xlst.ezinputbox = 0
End If
xlst.ezbutinfobox = "Process complete" & vbCr & ctypehit & " " & pchart & " may have been affected if pivot table cells colorized"
xlst.ezbutinfobox.BackColor = vbGreen
Exit Sub

errstop:
xlst.ezbutinfobox = "Process failed"
xlst.ezbutinfobox.BackColor = vbRed
End Sub

Sub pfix() 'pivot table list fixer
'pivot table tutorial by contextures.com
'gets rid of unused items in PivotTable
' based on MSKB (202232)
Dim ws As Worksheet
Dim PT As PivotTable
Dim pf As PivotField
Dim pi As PivotItem
Dim pc As PivotCache
Dim i As Long
xlst.ezbutinfobox.BackColor = vbCyan
'error checks
If ActiveWorkbook.Name = ThisWorkbook.Name Then
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "Unable to run on " & ActiveWorkbook.Name
Exit Sub
End If
'worksheet selected
If xlst.ezbutpressed = "yellow" Then
On Error Resume Next
If ActiveSheet.PivotTables.Count = 0 Then
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "No pivot tables found on " & ActiveSheet.Name
Exit Sub
End If

xlst.ezbutinfobox.BackColor = vbYellow

On Error Resume Next
  For Each PT In ActiveSheet.PivotTables
  xlst.ezbutinfobox = "Cleaning pivotitems on " & ActiveSheet.Name & "..." & PT.Name
  DoEvents
    PT.RefreshTable
    PT.ManualUpdate = True
    For Each pf In PT.VisibleFields
      If pf.Name <> "Data" Then
        For Each pi In pf.PivotItems
          If pi.RecordCount = 0 And _
            Not pi.IsCalculated Then
            pi.Delete
          End If
        Next pi
      End If
    Next pf
    PT.ManualUpdate = False
    'pt.RefreshTable 'optional - might hang Excel
                 'if 2 or more pivot tables on one sheet
  Next PT
'change the settings
  For Each PT In ActiveSheet.PivotTables
  xlst.ezbutinfobox = "Cleaning pivotcache on " & ws.Name
  DoEvents
    PT.PivotCache.MissingItemsLimit = xlMissingItemsNone
  Next PT
'refresh all the pivot caches
For Each pc In ActiveSheet.PivotCaches
  On Error Resume Next
  pc.Refresh
Next pc
xlst.ezbutinfobox.BackColor = vbGreen
xlst.ezbutinfobox = "Pivot Lists reset on " & ActiveSheet.Name
Exit Sub
End If

'workbook selected
If xlst.ezbutpressed = "red" Then
On Error Resume Next
xlst.ezbutinfobox.BackColor = vbYellow
For Each ws In ActiveWorkbook.Worksheets
    For Each PT In ws.PivotTables
      i = i + 1
    Next PT
  Next ws
If i = 0 Then
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "No pivot tables found on " & ActiveWorkbook.Name
Exit Sub
End If


On Error Resume Next
For Each ws In ActiveWorkbook.Worksheets
  For Each PT In ws.PivotTables
 xlst.ezbutinfobox = "Cleaning pivotitems on " & ws.Name & "..." & PT.Name
  DoEvents
    PT.RefreshTable
    PT.ManualUpdate = True
    For Each pf In PT.VisibleFields
      If pf.Name <> "Data" Then
        For Each pi In pf.PivotItems
          If pi.RecordCount = 0 And _
            Not pi.IsCalculated Then
            pi.Delete
          End If
        Next pi
      End If
    Next pf
    PT.ManualUpdate = False
    'pt.RefreshTable 'optional - might hang Excel
                 'if 2 or more pivot tables on one sheet
  Next PT
Next ws


'change the settings
For Each ws In ActiveWorkbook.Worksheets
  For Each PT In ws.PivotTables
  xlst.ezbutinfobox = "Cleaning pivotcache on " & ws.Name
  DoEvents
    PT.PivotCache.MissingItemsLimit = xlMissingItemsNone
  Next PT
Next ws

'refresh all the pivot caches
For Each pc In ActiveWorkbook.PivotCaches
  On Error Resume Next
  pc.Refresh
Next pc



xlst.ezbutinfobox.BackColor = vbGreen
xlst.ezbutinfobox = "Pivot Lists reset on " & ActiveWorkbook.Name
Exit Sub
End If

End Sub
Sub do_colchoose()
Dim lastrow1 As Long
Dim firstrow As Long
Dim x As Long
Dim colarray As String
Dim colunbound() As String
Dim wbk1 As String
Dim ws1 As String
Dim tcol As String
Dim cnt As Long
Dim fcnt As Long
Dim rng As String

'storing selected columns
If xlst.ezbutpressed = "yellow" Then
xlst.ezbutinfobox.BackColor = vbCyan
xlst.ezbutinfobox = "Select more columns and press the yellow button or press the green button to create the new workbook." ' source error
rng = ColLetterFromNo(Selection.Column)
If Trim(xlst.ezinputbox) = "" Then
xlst.ezinputbox = rng
Else
xlst.ezinputbox = xlst.ezinputbox & "," & rng
End If
Exit Sub
End If
'error trap
If Trim(xlst.ezinputbox) = "" Then
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "Must first select columns to affect, then press YELLOW button" ' source error
Exit Sub
End If
xlst.ezbutinfobox.BackColor = vbYellow

wbk1 = ActiveWorkbook.Name
ws1 = ActiveSheet.Name
On Error Resume Next
colarray = xlst.ezinputbox
colunbound = Split(colarray, ",")
cnt = 1
Set newwbk = Workbooks.Add(xlWBATWorksheet)
lastrow1 = 65536
tcol = colunbound(0)
firstrow = Workbooks(wbk1).Sheets(ws1).Cells.Find("*", Workbooks(wbk1).Sheets(ws1).Cells(Workbooks(wbk1).Sheets(ws1).Cells.Count), xlFormulas, xlWhole, xlByRows, xlNext).Row
lastrow1 = Workbooks(wbk1).Sheets(ws1).Range(tcol & Workbooks(wbk1).Sheets(ws1).Rows.Count).End(xlUp).Row 'will find lastrow even in hidden columns

'opitmize macro by disabling all processes that slow it down.
Application.ScreenUpdating = False
Application.Calculation = xlCalculationManual
Application.EnableEvents = False
Application.DisplayAlerts = False
ActiveSheet.DisplayPageBreaks = False
For i = LBound(colunbound) To UBound(colunbound)
For x = 1 To lastrow1
If Workbooks(wbk1).Sheets(ws1).Rows(x).Hidden = False Then
tcol = colunbound(i)
newwbk.Sheets(1).Cells(cnt, i + 1) = Workbooks(wbk1).Sheets(ws1).Cells(x, tcol)
cnt = cnt + 1
fcnt = fcnt + 1
End If
Next x
cnt = 1
Next i

'formatting
'Display wait for a moment
Application.StatusBar = "FORMATTING to match source, please wait..."
xlst.ezbutinfobox = Application.StatusBar
DoEvents
For i = LBound(colunbound) To UBound(colunbound)
tcol = colunbound(i)
Workbooks(wbk1).Sheets(ws1).Cells(1, tcol).EntireColumn.Copy
newwbk.Sheets(1).Cells(1, i + 1).EntireColumn.PasteSpecial (xlPasteFormats)
newwbk.Sheets(1).Cells(1, i + 1).EntireColumn.PasteSpecial (xlPasteColumnWidths)
Application.CutCopyMode = False
Next i
Resume Next
'Re-enable screenupdating (before END SUB)
Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic
Application.EnableEvents = True
Application.DisplayAlerts = True
Application.StatusBar = False
ActiveSheet.DisplayPageBreaks = True
newwbk.Sheets(1).Activate
newwbk.Sheets(1).Cells.Select
newwbk.Sheets(1).Cells.EntireColumn.AutoFit
xlst.ezbutinfobox = "COMPLETE!" & vbCr & fcnt / (UBound(colunbound) + 1) & " total lines copied from columns:" & vbCr & wbk1 & "[" & ws1 & "] " & colarray
xlst.ezbutinfobox.BackColor = vbGreen
xlst.Repaint
DoEvents
newwbk.Sheets(1).Range("A1").Select
End Sub
Sub formcopy()
'copy formula to clipboard or to selected cell's comment
Dim obj As New DataObject
Dim txt As String
Dim MyData As New DataObject
Dim strClip As String
Dim comstr As String
On Error GoTo err:
'copy using yellow button
If xlst.ezbutpressed = "yellow" Then
    txt = ActiveCell.Formula
obj.SetText txt
obj.PutInClipboard
xlst.ezbutinfobox.BackColor = vbGreen
xlst.ezbutinfobox = "Use CTRL+V to copy formula into another cell or another place, like an email or notepad." & vbCr & "Or click on a cell and press the GREEN button to have the formula saved there as a comment."
Application.SendKeys "{NUMLOCK}", True
Exit Sub
End If

'paste using blue button
If xlst.ezbutpressed = "blue" Then
MyData.GetFromClipboard
strClip = MyData.GetText
ActiveCell.Formula = strClip
xlst.ezbutinfobox.BackColor = vbGreen
xlst.ezbutinfobox = "Formula: " & vbCr & strClip & vbCr & "Copied to cell " & ActiveCell.Address
Application.SendKeys "{NUMLOCK}", True
Exit Sub
End If


'paste using green button
If xlst.ezbutpressed = "green" Then
MyData.GetFromClipboard
strClip = MyData.GetText
ActiveCell.ClearComments
comstr = Environ("username") & ": " & Now() & Chr(10) & strClip
ActiveCell.AddComment comstr
xlst.ezbutinfobox.BackColor = vbGreen
xlst.ezbutinfobox = "Formula: " & vbCr & strClip & vbCr & "Copied to cell " & ActiveCell.Address & " as comment."
Application.SendKeys "{NUMLOCK}", True
Exit Sub
End If
Exit Sub
err:
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "Unable to process. You may not have propery Excel Libraries installed."

End Sub
Sub dynref()
Dim refname As String
Dim oldrefname As String
Dim refstr As String
refname = Replace(Trim(ActiveSheet.Name), " ", "")
'refname = ActiveSheet.Name
If Trim(xlst.ezinputbox) <> "" Then
refname = Replace(Trim(xlst.ezinputbox), " ", "")
refname = xlst.ezinputbox
End If
'need to clear all filters
            If ActiveSheet.AutoFilterMode Then
    ActiveSheet.Cells.AutoFilter
    End If
startcol = 1 'default
endcol = 2 'default
On Error Resume Next
startcol = ActiveSheet.Cells.Find(What:="*", SearchDirection:=xlNext, SearchOrder:=xlByColumns).Column
startcol = ColLetterFromNo(startcol)
endcol = ActiveSheet.Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByColumns).Column
If Trim(ActiveSheet.Cells(1, endcol)) <> "" Then
headerrow = 1
Else
headerrow = ActiveSheet.Columns(endcol).Find("*", SearchDirection:=xlNext, SearchOrder:=xlByRows, LookIn:=xlValues).Row
End If
Resume Next
'MsgBox "startcol: " & startcol & " endcol: " & endcol & " headerrow: " & headerrow 'for testing
'Exit Sub

'refstr = "=OFFSET('" & ActiveSheet.Name & "'!R1C1,0,0,COUNTA('" & ActiveSheet.Name & "'!C1),COUNTA('" & ActiveSheet.Name & "'!R1))"
refstr = "=OFFSET('" & ActiveSheet.Name & "'!$" & startcol & "$" & headerrow & ",0,0,COUNTA('" & ActiveSheet.Name & "'!$" & startcol & ":$" & startcol & "),COUNTA('" & ActiveSheet.Name & "'!$" & headerrow & ":$" & headerrow & "))"


xlst.ezbutinfobox.BackColor = vbYellow
xlst.ezbutinfobox = "Processing..."
'copy using yellow button
If xlst.ezbutpressed = "yellow" Then
If ActiveWorkbook.Names.Count < 1 Then
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "No named ranges created. First create with GREEN button."
Exit Sub
End If
For x = 1 To ActiveWorkbook.Names.Count
If InStr(ActiveWorkbook.Names(x).RefersToLocal, "CountA('" & ActiveSheet.Name) > 0 Then
oldrefname = Replace(Trim(ActiveWorkbook.Names(x).Name), " ", "")
'oldrefname = ActiveWorkbook.Names(X).Name
With ActiveWorkbook.Names(x)
.Name = refname
End With
End If
Next x
If oldrefname = "" Then
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "No named range called: " & refname & " to modify." & vbCr & "Press GREEN button to create."
Exit Sub
End If


xlst.ezbutinfobox.BackColor = vbGreen
xlst.ezbutinfobox = "Named Range: " & oldrefname & " updated to: " & refname
Exit Sub
End If
'copy using red button
If xlst.ezbutpressed = "red" Then
On Error Resume Next
Application.DisplayAlerts = False
ActiveWorkbook.Names(refname).Delete
Application.DisplayAlerts = True
xlst.ezbutinfobox.BackColor = vbGreen
xlst.ezbutinfobox = "If Named Range: " & refname & " existed, it is now deleted."
Exit Sub
Resume Next
End If

'copy using red button
If xlst.ezbutpressed = "blue" Then
If ActiveWorkbook.Names.Count < 1 Then
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "No named ranges created. First create with GREEN button."
Exit Sub
End If
For x = 1 To ActiveWorkbook.Names.Count
oldrefname = oldrefname & vbCr & x & ". " & ActiveWorkbook.Names(x).NameLocal & "---" & ActiveWorkbook.Names(x).RefersToLocal
Next x
xlst.ezbutinfobox.BackColor = vbGreen
xlst.ezbutinfobox = "NAMED RANGES IN WORKBOOK: " & ActiveWorkbook.Name & vbCr & oldrefname
Exit Sub
End If


'copy using green button
If xlst.ezbutpressed = "green" Then
'MsgBox "refname: " & refname & " refstr: " & refstr 'for testing
On Error GoTo errmsg
ActiveWorkbook.Names.Add NameLocal:=refname, RefersToLocal:=refstr
xlst.ezbutinfobox.BackColor = vbGreen
xlst.ezbutinfobox = "Named Range: " & refname & " created." & vbCr & "You can now refer to sheet: " & refname & " with a pivot table." & vbCr & "You can also add or delete columns from " & ActiveSheet.Name & " without breaking the pivot."
Exit Sub
End If
Exit Sub
errmsg:
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "Make sure you have clicked on the sheet where you want the named range created."
MsgBox "Make sure you have clicked on the sheet where you want the named range created.", vbCritical, "ERROR!"
End Sub
Sub divcolrs()
xlst.ezbutinfobox.BackColor = vbCyan
'copy using yellow button
If xlst.ezbutpressed = "yellow" Then
    xlst.ezinputbox = ActiveCell.Interior.Color
    xlst.ezbutinfobox = "Select range to colorize and press BLUE or GREEN button."
    End If


'default color to blank
If Trim(xlst.ezinputbox.Text) = "" Or Trim(xlst.ezinputbox.Text) = 16777215 Then
xlst.ezinputbox.Text = xlNone
End If

If xlst.ezbutpressed = "red" Then 'uncolor
For Each oCell In Selection
oCell.Interior.Color = xlNone
Next
xlst.ezbutinfobox = "Removed all color from " & Selection.Address
xlst.ezbutinfobox.BackColor = vbGreen
Exit Sub
End If

'single cell selected err
If xlst.ezbutpressed = "blue" Or xlst.ezbutpressed = "green" Then
If InStr(Selection.Address, ":") = 0 Then
xlst.ezbutinfobox = "First select a range of cells."
xlst.ezbutinfobox.BackColor = vbMagenta
Exit Sub
End If


startrow = Left(Selection.Address, InStr(Selection.Address, ":") - 1)
endrow = Mid(Selection.Address, InStr(Selection.Address, ":") + 1, 99)


If Trim(removeAlpha(Selection.Address)) = "" Then 'if entire columns selected
startrow = startrow & 1
End If
If Trim(StripNumber(CStr(startrow))) = "$" Then 'if entire rows selected
startrow = "A" & ActiveSheet.Cells.Find(What:="*", SearchDirection:=xlNext, SearchOrder:=xlByRows).Row
End If

startcol = Range(startrow).Column
startrow = Range(startrow).Row

If Trim(removeAlpha(Selection.Address)) = "" Then 'if entire columns selected
endrow = endrow & 1
End If
If Trim(StripNumber(CStr(endrow))) = "$" Then 'if entire rows selected
endrow = Mid(Selection.Address, InStr(Selection.Address, ":$") + 2, 99)
endrow = ActiveSheet.Cells(endrow, ActiveSheet.Rows(endrow).Find("*", SearchDirection:=xlPrevious, SearchOrder:=xlByColumns, LookIn:=xlValues).Column).Address
End If

endcol = Range(endrow).Column
endrow = Range(endrow).Row
On Error Resume Next
lastrow = ActiveSheet.Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
Resume Next
If endrow > lastrow Or endrow = 1 Then
endrow = lastrow
End If

'no data on sheet err
If Trim(endrow) = "" Then
xlst.ezbutinfobox = ActiveSheet.Name & " has no data.  Color banding only works on sheets with data."
xlst.ezbutinfobox.BackColor = vbMagenta
Exit Sub
End If

'colorize
If xlst.ezbutpressed = "blue" Then 'rows
For x = startrow To endrow Step 2
For y = startcol To endcol
Cells(x, y).Interior.Color = xlst.ezinputbox.Text
Next y
Next x
End If
If xlst.ezbutpressed = "green" Then 'columns
For x = startrow To endrow
For y = startcol To endcol Step 2
Cells(x, y).Interior.Color = xlst.ezinputbox.Text
Next y
Next x
End If
End If

xlst.ezbutinfobox = "Colorized " & Selection.Address
xlst.ezbutinfobox.BackColor = vbGreen
Exit Sub

    
    
End Sub
Sub mmergecopy()
xlst.ezbutinfobox.BackColor = vbCyan
'copy using yellow button
If xlst.ezbutpressed = "yellow" Then
capstr = Selection.Address
For Each strhit In Range(capstr)
If Trim(strhit) <> "" Then
newstr = newstr & strhit & Chr(10)
End If
Next
xlst.ezinputbox = newstr
    xlst.ezbutinfobox = "Select merged range or start cell where to paste copied data and press BLUE or GREEN button." & vbCr & "Will appear like this:" & vbCr & newstr
    End If
'paste using green button
If xlst.ezbutpressed = "green" Then
If Trim(ezinputbox) <> "" Then
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "No data selected to copy. Select cell(s) of data and press the YELLOW button."
Exit Sub
End If

'format for merging
On Error Resume Next
With Selection
        .HorizontalAlignment = xlGeneral
        .VerticalAlignment = xlTop
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = True
    End With
    With Selection
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlTop
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = True
    End With
    With Selection
        .HorizontalAlignment = xlLeft
        .VerticalAlignment = xlTop
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = True
    End With
Resume Next


ActiveCell = xlst.ezinputbox.Text
xlst.ezbutinfobox = "Pasted"
xlst.ezbutinfobox.BackColor = vbGreen
Exit Sub
End If

'paste using blue button
If xlst.ezbutpressed = "blue" Then
If Trim(ezinputbox) <> "" Then
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "No data selected to copy. Select cell(s) of data and press the YELLOW button."
Exit Sub
End If
Dim strarray As String
Dim strunbound() As String
Dim i As Long
strarray = xlst.ezinputbox.Text 'or any string with unique dilimiter
strunbound = Split(strarray, Chr(10)) 'replace vbCrLf with any unique delimiter such as ","
x = ActiveCell.Row
actcol = ActiveCell.Column
For i = LBound(strunbound) To UBound(strunbound)
ActiveSheet.Cells(x, actcol) = strunbound(i)
x = x + 1
Next i
xlst.ezbutinfobox = "Pasted"
xlst.ezbutinfobox.BackColor = vbGreen
Exit Sub
End If

    
End Sub
Sub tocmake()
Dim wsh As Worksheet
xlst.ezbutinfobox.BackColor = vbCyan
'using yellow button
If xlst.ezbutpressed = "yellow" Then
If Application.CountA(ActiveSheet.Range("A:A")) > 0 Then
xlst.ezbutinfobox = "Waiting for user to confirm YES or NO on popup..."
xlst.ezbutinfobox.BackColor = vbYellow
doit = MsgBox("There is already text in column A of " & ActiveSheet.Name & " where the TOC will be made. This will overwrite data in column A. Do it anyway?", vbYesNo, "ALERT")
If doit <> vbYes Then
Exit Sub
End If
End If
'make toc
ActiveSheet.Range("A1") = "TABLE OF CONTENTS:"
cnt = 2
For Each wsh In ActiveWorkbook.Worksheets
If wsh.Visible = True And wsh.Name <> ActiveSheet.Name And InStr(ActiveWorkbook.Name, "XLSuper") = 0 Then
ActiveSheet.Cells(cnt, 1) = wsh.Name
ActiveSheet.Hyperlinks.Add Anchor:=ActiveSheet.Cells(cnt, 1), Address:="", SubAddress:="'" & wsh.Name & "'!A1", TextToDisplay:=wsh.Name
cnt = cnt + 1
End If
Next
xlst.ezbutinfobox = "To add linkbacks to the Table of Contents tab, press GREEN button. (Will insert at row 1 of each sheet)" & vbCr & "OPTIONAL: Input the linkback text to display in the input box or default text is MAIN MENU."
xlst.ezbutinfobox.BackColor = vbCyan
Exit Sub
End If
'using green button
If xlst.ezbutpressed = "green" Then
'set linkback text
mmtxt = xlst.ezinputbox
If Trim(xlst.ezinputbox) = "" Then
mmtxt = "MAIN MENU"
End If
mmlink = ActiveCell.Address
'find table of contents
For Each wsh In ActiveWorkbook.Worksheets
If findany("TABLE OF CONTENTS:", wsh.Name) <> 0 Then
mmname = wsh.Name
End If
Next
For Each wsh In ActiveWorkbook.Worksheets
If wsh.Visible = True And wsh.Name <> mmname And InStr(ActiveWorkbook.Name, "XLSuper") = 0 Then
'determine placement of linkback, insert new row find first non-blank column
On Error Resume Next
wsh.Rows(1).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
mmlink = "A1"
mmlink = Cells(1, Application.Match(coalesce(wsh.Range("2:2")), wsh.Range("2:2"), 0)).Address
wsh.Range(mmlink) = mmtxt
ActiveSheet.Hyperlinks.Add Anchor:=wsh.Range(mmlink), Address:="", SubAddress:="'" & Sheets(mmname).Name & "'!A1", TextToDisplay:=mmtxt
Resume Next
End If
Next
xlst.ezbutinfobox = UCase(mmtxt) & " linkback created on all visible sheets to link to " & mmname
xlst.ezbutinfobox.BackColor = vbGreen
Exit Sub
End If
End Sub
Sub pivottablecolorizer()
Dim PT As PivotTable
Dim lcol As Long
xlst.ezbutinfobox.BackColor = vbCyan
On Error GoTo err:
Set PT = ActiveCell.PivotTable
'using yellow button
If xlst.ezbutpressed = "yellow" Then
If Not PT Is Nothing Then
For Each rng In Range(ActiveSheet.PivotTables(PT.Name).TableRange1.Address)
rng.Interior.Color = Cells(1, rng.Column).Interior.Color
Next
xlst.ezbutinfobox = PT.Name & "[" & ActiveSheet.PivotTables(PT.Name).TableRange1.Address & "] colorized based on row 1 colors."
xlst.ezbutinfobox.BackColor = vbGreen
Exit Sub
End If
End If
'using blue button
If xlst.ezbutpressed = "blue" Then
If Not PT Is Nothing Then
lcol = converttonumber(Left(Mid(ActiveSheet.PivotTables(PT.Name).TableRange1.Address, 2, 999), InStr(Mid(ActiveSheet.PivotTables(PT.Name).TableRange1.Address, 2, 999), "$") - 1)) - 1
For Each rng In Range(ActiveSheet.PivotTables(PT.Name).TableRange1.Address)
rng.Interior.Color = Cells(rng.Row, lcol).Interior.Color
Next
End If
xlst.ezbutinfobox = PT.Name & "[" & ActiveSheet.PivotTables(PT.Name).TableRange1.Address & "] colorized based on column " & ColLetterFromNo(lcol) & " colors."
xlst.ezbutinfobox.BackColor = vbGreen
Exit Sub
End If
'using red button
If xlst.ezbutpressed = "red" Then
If Not PT Is Nothing Then
For Each rng In Range(ActiveSheet.PivotTables(PT.Name).TableRange1.Address)
rng.Interior.Color = xlNone
Next
xlst.ezbutinfobox = PT.Name & "[" & ActiveSheet.PivotTables(PT.Name).TableRange1.Address & "] colors cleared"
xlst.ezbutinfobox.BackColor = vbGreen
Exit Sub
End If
End If
Exit Sub
err:
xlst.ezbutinfobox = "Click in a pivot table first."
xlst.ezbutinfobox.BackColor = vbMagenta
End Sub
Sub do_wysiwyg() 'decimal as displayed
Dim rng As Range
Dim c As Range
    On Error Resume Next
    Set rng = Application.Selection
 'using yellow button
If xlst.ezbutpressed = "yellow" Then
For Each tdate In rng
If Trim(tdate) <> "" Then
Range(tdate.Address) = Format(tdate, "Short Date")
End If
Next
Exit Sub
xlst.ezbutinfobox = "Processed " & rng
xlst.ezbutinfobox.BackColor = vbGreen
End If
    For Each c In Selection
    If Trim(c) <> "" Then
   c = Replace(Trim(c.Text), Chr(10), "")
   End If
    Next c
    Resume Next
End Sub
Sub wsproc()
Dim wsmsg As String
If InStr(ActiveWorkbook.Name, "xlsupert") > 0 Then
xlst.ezbutinfobox = "Select another workbook other than XLSuperTool"
xlst.ezbutinfobox.BackColor = vbMagenta
Exit Sub
End If
 'using yellow button
If xlst.ezbutpressed = "yellow" Then
Application.ScreenUpdating = False
For Each Worksheet In ActiveWindow.SelectedSheets
      Worksheet.Copy
      wsmsg = wsmsg & Worksheet.Name & vbCr
    Next Worksheet
xlst.ezbutinfobox = "Made new workbooks from tabs:" & vbCr & wsmsg
xlst.ezbutinfobox.BackColor = vbGreen
Application.ScreenUpdating = True
End If
 'using red button
If xlst.ezbutpressed = "red" Then
pwcol = findany("Workbook pathway", ActiveSheet.Name)
wscol = findany("Worksheet name", ActiveSheet.Name)
hdcol = findany("Header row", ActiveSheet.Name)
If pwcol = 0 Or wscol = 0 Then
xlst.ezbutinfobox = "Create a worksheet with HEADERS:" & vbCr & "Workbook pathway" & vbCr & "Worksheet name" & vbCr & "Populate the columns with the workbook pathways and sheets you want to combine. OPTIONAL: Input the header row for each sheet in 3rd column named header row (combiner will skip this row except on the first worksheet)."
xlst.ezbutinfobox.BackColor = vbMagenta
Exit Sub
End If
xlst.ezbutinfobox = "**PROCESSING**"
xlst.ezbutinfobox.BackColor = vbYellow
xlst.Repaint
stime = Timer
startrow = Range(pwcol).Row + 1
pwcol = Range(pwcol).Column
wscol = Range(wscol).Column
If hdcol <> 0 Then
hdcol = Range(hdcol).Column
End If
Set actsh = ActiveSheet
lastrow = actsh.Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
Set nwbk = Workbooks.Add
cnt = 1


'Display wait for a moment
Application.StatusBar = "****Please Wait*****  Macro processing"
'opitmize macro by disabling all processes that slow it down.
Application.ScreenUpdating = False
Application.Calculation = xlCalculationManual
Application.EnableEvents = False
Application.DisplayAlerts = False
Application.AskToUpdateLinks = False


For x = startrow To lastrow
If Trim(actsh.Cells(x, pwcol)) <> "" Then
pathwaystr = actsh.Cells(x, pwcol)
wsname = actsh.Cells(x, wscol)
Set tempbook = Workbooks.Open(Filename:=pathwaystr, ReadOnly:=True)
On Error Resume Next
    'unfilter sheet if filtered
    If tempbook.Sheets(wsname).AutoFilterMode Then
    tempbook.Sheets(wsname).Cells.AutoFilter
    End If
    tempstartrow = 0
    If hdcol <> 0 Then
    tempstartrow = actsh.Cells(x, hdcol)
    If cnt > 1 Then
    tempstartrow = tempstartrow + 1
    End If
    Else
    tempstartrow = 1
    End If
    templastrow = 0
    templastrow = tempbook.Sheets(wsname).Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
    templastcol = tempbook.Sheets(wsname).Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByColumns).Column
    If templastrow > 0 Then
For w = tempstartrow To templastrow
For y = 1 To templastcol
nwbk.Sheets(1).Cells(cnt, y) = tempbook.Sheets(wsname).Cells(w, y)
Next y
cnt = cnt + 1
Next w
End If
Resume Next
tempbook.Close savechanges:=False
End If

Next x
xlst.ezbutinfobox = "Complete in " & Round(Timer - stime, 2) & " seconds."
xlst.ezbutinfobox.BackColor = vbGreen

'Re-enable screenupdating (before END SUB)
Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic
Application.EnableEvents = True
Application.DisplayAlerts = True
Application.AskToUpdateLinks = True
Application.StatusBar = False
Exit Sub
End If

'Re-enable screenupdating (before END SUB)
Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic
Application.EnableEvents = True
Application.DisplayAlerts = True
Application.AskToUpdateLinks = True
Application.StatusBar = False
End Sub
Sub fillaller()
Dim c As Range
Dim texter As String
Dim lastrow As Long
Dim cnt As Long
On Error GoTo Errorhandler:
xlst.ezbutinfobox.BackColor = vbYellow
xlst.ezbutinfobox = "Processing..."
 'using red button
If xlst.ezbutpressed = "green" Then
lastrow = ActiveSheet.Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
For Each c In Selection
If cnt < lastrow Then
If Trim(c) <> "" Then
texter = c
End If
If Trim(c) = "" Then
c.Value = texter
End If
cnt = cnt + 1
End If
Next c
Exit Sub
End If
Errorhandler:
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "ERROR!" & vbCr & "Unable to complete on protected cells or pivot tables"
End Sub
Sub colcopy()
'On Error GoTo Errorhandler:
xlst.ezbutinfobox.BackColor = vbCyan

'entire column check
If Val(removeAlpha(Selection.Address)) > 0 Then
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "ERROR!" & vbCr & "Select an entire column."
Exit Sub
End If

 'using yellow button
If xlst.ezbutpressed = "yellow" Then
xlst.CommandButton1.Tag = "" 'reset
xlst.CommandButton1.Tag = ActiveWorkbook.Name & "^" & ActiveSheet.Name & "|" & Selection.Address
xlst.ezbutinfobox = "Select a range on another sheet that matches the unique references on " & vbCr & xlst.CommandButton1.Tag & vbCr & "and press the RED button"
Exit Sub
End If
 'using red button
If xlst.ezbutpressed = "red" Then
xlst.CommandButton2.Tag = "" 'reset
xlst.CommandButton2.Tag = ActiveWorkbook.Name & "^" & ActiveSheet.Name & "|" & Selection.Address
xlst.ezbutinfobox = "Select a range on " & vbCr & ActiveWorkbook.Name & " [" & ActiveSheet.Name & "]" & vbCr & "and press the BLUE button"
End If
 'using blue button
If xlst.ezbutpressed = "blue" Then
xlst.CommandButton3.Tag = "" 'reset
xlst.CommandButton3.Tag = ActiveWorkbook.Name & "^" & ActiveSheet.Name & "|" & Selection.Address
Ywbk = Left(xlst.CommandButton1.Tag, InStr(xlst.CommandButton1.Tag, "^") - 1)
Ywsh = Replace(Left(xlst.CommandButton1.Tag, InStr(xlst.CommandButton1.Tag, "|") - 1), Ywbk & "^", "")
xlst.ezbutinfobox = "Select an empty column range on " & vbCr & Ywbk & " [" & Ywsh & "]" & vbCr & "and press the GREEN button"
End If
 'using green button
If xlst.ezbutpressed = "green" Then
If xlst.CommandButton1.Tag = "" Or xlst.CommandButton2.Tag = "" Or xlst.CommandButton3.Tag = "" Then
xlst.ezbutinfobox.BackColor = vbMagenta
If xlst.CommandButton1.Tag = "" Then
xlst.ezbutinfobox = "ERROR!" & vbCr & "Select unique ID range #1 and press YELLOW button"
Exit Sub
End If
If xlst.CommandButton2.Tag = "" Then
xlst.ezbutinfobox = "ERROR!" & vbCr & "Select unique ID range #2 and press RED button"
Exit Sub
End If
If xlst.CommandButton3.Tag = "" Then
xlst.ezbutinfobox = "ERROR!" & vbCr & "Select range to copy if match #1 and press BLUE button"
Exit Sub
End If
End If
xlst.CommandButton4.Tag = "" 'reset
xlst.CommandButton4.Tag = ActiveWorkbook.Name & "^" & ActiveSheet.Name & "|" & Selection.Address
'yellow
Ywbk = Left(xlst.CommandButton1.Tag, InStr(xlst.CommandButton1.Tag, "^") - 1)
Ywsh = Replace(Left(xlst.CommandButton1.Tag, InStr(xlst.CommandButton1.Tag, "|") - 1), Ywbk & "^", "")
Yrng = StrReverse(Left(StrReverse(xlst.CommandButton1.Tag), InStr(StrReverse(xlst.CommandButton1.Tag), "|") - 1))
lastrowY = Workbooks(Ywbk).Sheets(Ywsh).Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
'red
Rwbk = Left(xlst.CommandButton2.Tag, InStr(xlst.CommandButton2.Tag, "^") - 1)
Rwsh = Replace(Left(xlst.CommandButton2.Tag, InStr(xlst.CommandButton2.Tag, "|") - 1), Rwbk & "^", "")
rrng = StrReverse(Left(StrReverse(xlst.CommandButton2.Tag), InStr(StrReverse(xlst.CommandButton2.Tag), "|") - 1))
lastrowR = Workbooks(Rwbk).Sheets(Rwsh).Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
'blue
Bwbk = Left(xlst.CommandButton3.Tag, InStr(xlst.CommandButton3.Tag, "^") - 1)
Bwsh = Replace(Left(xlst.CommandButton3.Tag, InStr(xlst.CommandButton3.Tag, "|") - 1), Bwbk & "^", "")
Brng = StrReverse(Left(StrReverse(xlst.CommandButton3.Tag), InStr(StrReverse(xlst.CommandButton3.Tag), "|") - 1))
lastrowB = Workbooks(Bwbk).Sheets(Bwsh).Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
'green
Gwbk = Left(xlst.CommandButton4.Tag, InStr(xlst.CommandButton4.Tag, "^") - 1)
Gwsh = Replace(Left(xlst.CommandButton4.Tag, InStr(xlst.CommandButton4.Tag, "|") - 1), Gwbk & "^", "")
Grng = StrReverse(Left(StrReverse(xlst.CommandButton4.Tag), InStr(StrReverse(xlst.CommandButton4.Tag), "|") - 1))
lastrowG = Workbooks(Bwbk).Sheets(Bwsh).Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
'final error checking
xlst.ezbutinfobox.BackColor = vbMagenta
If Ywbk & Ywsh & Yrng = Rwbk & Rwsh & rrng Then
xlst.ezbutinfobox = "ERROR!" & vbCr & "UID #1 and UID #2 must be different ranges."
Exit Sub
End If
If Ywbk & Ywsh & Yrng = Bwbk & Bwsh & Brng Then
xlst.ezbutinfobox = "ERROR!" & vbCr & "UID #1 and Data #2 must be different ranges."
Exit Sub
End If
If Ywbk & Ywsh & Yrng = Gwbk & Gwsh & Grng Then
xlst.ezbutinfobox = "ERROR!" & vbCr & "UID #1 and Result must be different ranges."
Exit Sub
End If
If Rwbk & Rwsh & rrng = Bwbk & Bwsh & Brng Then
xlst.ezbutinfobox = "ERROR!" & vbCr & "UID #2 and Data #2 must be different ranges."
Exit Sub
End If
If Rwbk & Rwsh & rrng = Gwbk & Gwsh & Grng Then
xlst.ezbutinfobox = "ERROR!" & vbCr & "UID #2 and Result must be different ranges."
Exit Sub
End If
If Bwbk & Bwsh & Brng = Gwbk & Gwsh & Grng Then
xlst.ezbutinfobox = "ERROR!" & vbCr & "Data #2 and Result must be different ranges."
Exit Sub
End If
If WorksheetFunction.CountA(Workbooks(Gwbk).Sheets(Gwsh).Range(Grng)) > 0 Then
xlst.ezbutinfobox = "ERROR!" & vbCr & xlst.CommandButton4.Tag & vbCr & "already contains data.  Select empty column for result."
Exit Sub
End If
'process matching
xlst.ezbutinfobox.BackColor = vbYellow
xlst.ezbutinfobox = "Processing..."
Rcol = Replace(Left(rrng, InStr(rrng, ":") - 1), "$", "")
Bcol = Replace(Left(Brng, InStr(Brng, ":") - 1), "$", "")
Gcol = Replace(Left(Grng, InStr(Grng, ":") - 1), "$", "")
matchit = 0 'reset
Yrng = Replace(Yrng, "$", "")
For x = 1 To lastrowR
'On Error Resume Next
hit = 0 'reset
If Trim(Workbooks(Rwbk).Sheets(Rwsh).Cells(x, Rcol)) <> "" And Trim(Workbooks(Bwbk).Sheets(Bwsh).Cells(x, Bcol)) <> "" Then
If IsError(Application.Match(CStr(Workbooks(Rwbk).Sheets(Rwsh).Cells(x, Rcol)), Workbooks(Ywbk).Sheets(Ywsh).Range(Yrng), 0)) = False Then
If Application.Match(CStr(Workbooks(Rwbk).Sheets(Rwsh).Cells(x, Rcol)), Workbooks(Ywbk).Sheets(Ywsh).Range(Yrng), 0) Then
hit = Application.Match(CStr(Workbooks(Rwbk).Sheets(Rwsh).Cells(x, Rcol)), Workbooks(Ywbk).Sheets(Ywsh).Range(Yrng), 0)
End If
End If
If IsError(Application.Match(Val(Workbooks(Rwbk).Sheets(Rwsh).Cells(x, Rcol)), Workbooks(Ywbk).Sheets(Ywsh).Range(Yrng), 0)) = False Then
If Application.Match(Val(Workbooks(Rwbk).Sheets(Rwsh).Cells(x, Rcol)), Workbooks(Ywbk).Sheets(Ywsh).Range(Yrng), 0) Then
hit = Application.Match(Val(Workbooks(Rwbk).Sheets(Rwsh).Cells(x, Rcol)), Workbooks(Ywbk).Sheets(Ywsh).Range(Yrng), 0)
End If
End If
If hit > 0 Then
matchit = matchit + 1
Workbooks(Gwbk).Sheets(Gwsh).Cells(hit, Gcol) = Workbooks(Bwbk).Sheets(Bwsh).Cells(x, Bcol)
End If
End If
'Resume Next
Next x
xlst.ezbutinfobox.BackColor = vbGreen
xlst.ezbutinfobox = "Matched " & matchit & " items from " & vbCr & xlst.CommandButton2.Tag & " to " & vbCr & xlst.CommandButton1.Tag
End If
Exit Sub
'Errorhandler:
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "ERROR!" & vbCr & "Unable to complete process."
End Sub

'****TOOLS MACROS****
Sub condscale()
Dim rng As Range
On Error GoTo errchk:
Set rng = Selection
firstrow = Cells.Find(What:="*", SearchDirection:=xlNext, SearchOrder:=xlByRows).Row
lastrow = Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
firstcol = Cells.Find(What:="*", SearchDirection:=xlNext, SearchOrder:=xlByColumns).Column
lastcol = Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByColumns).Column

If InStr(rng.Address, ":") = 0 Then
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "Must select a range, not single cell."
Exit Sub
End If

If IsNumeric(Right(rng.Address, 1)) = False Then
rngstr = Left(rng.Address, InStr(rng.Address, ":") - 1) & 1 & Mid(rng.Address, InStr(rng.Address, ":"), 99) & lastrow
Set rng = ActiveSheet.Range(rngstr)
End If

startrow = Range(Left(rng.Address, InStr(rng.Address, ":") - 1)).Row
endrow = Range(Mid(rng.Address, InStr(rng.Address, ":") + 1, 99)).Row
startcol = ColLetterFromNo(Range(Left(rng.Address, InStr(rng.Address, ":") - 1)).Column)
endcol = ColLetterFromNo(Range(Mid(rng.Address, InStr(rng.Address, ":") + 1, 99)).Column)
startcolnum = Range(Left(rng.Address, InStr(rng.Address, ":") - 1)).Column
endcolnum = Range(Mid(rng.Address, InStr(rng.Address, ":") + 1, 99)).Column


Selection.FormatConditions.Delete 'clear previous/existing


If xlst.ezbutpressed = "yellow" Then
'replace zeros with blanks
 Selection.Replace What:="0", Replacement:="", LookAt:=xlWhole, _
        SearchOrder:=xlByColumns, MatchCase:=True, SearchFormat:=False, _
        ReplaceFormat:=False

For x = startrow To endrow
rngstr = startcol & x & ":" & endcol & x
ActiveSheet.Range(rngstr).Select
Selection.FormatConditions.AddColorScale ColorScaleType:=3
    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
    Selection.FormatConditions(1).ColorScaleCriteria(1).Type = _
        xlConditionValueLowestValue
    With Selection.FormatConditions(1).ColorScaleCriteria(1).FormatColor
        .Color = 8109667
        .TintAndShade = 0
    End With
    Selection.FormatConditions(1).ColorScaleCriteria(2).Type = _
        xlConditionValuePercentile
    Selection.FormatConditions(1).ColorScaleCriteria(2).Value = 50
    With Selection.FormatConditions(1).ColorScaleCriteria(2).FormatColor
        .Color = 8711167
        .TintAndShade = 0
    End With
    Selection.FormatConditions(1).ColorScaleCriteria(3).Type = _
        xlConditionValueHighestValue
    With Selection.FormatConditions(1).ColorScaleCriteria(3).FormatColor
        .Color = 7039480
        .TintAndShade = 0
    End With
    Next x
 End If
 '--------------
 
 If xlst.ezbutpressed = "red" Then
 
 'replace zeros with blanks
 Selection.Replace What:="0", Replacement:="", LookAt:=xlWhole, _
        SearchOrder:=xlByColumns, MatchCase:=True, SearchFormat:=False, _
        ReplaceFormat:=False
 
For x = startrow To endrow
rngstr = startcol & x & ":" & endcol & x
ActiveSheet.Range(rngstr).Select
 Selection.FormatConditions.AddColorScale ColorScaleType:=3
    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
    Selection.FormatConditions(1).ColorScaleCriteria(1).Type = _
        xlConditionValueLowestValue
    With Selection.FormatConditions(1).ColorScaleCriteria(1).FormatColor
        .Color = 7039480
        .TintAndShade = 0
    End With
    Selection.FormatConditions(1).ColorScaleCriteria(2).Type = _
        xlConditionValuePercentile
    Selection.FormatConditions(1).ColorScaleCriteria(2).Value = 50
    With Selection.FormatConditions(1).ColorScaleCriteria(2).FormatColor
        .Color = 8711167
        .TintAndShade = 0
    End With
    Selection.FormatConditions(1).ColorScaleCriteria(3).Type = _
        xlConditionValueHighestValue
    With Selection.FormatConditions(1).ColorScaleCriteria(3).FormatColor
        .Color = 8109667
        .TintAndShade = 0
    End With
Next x
End If

'---------------------
If xlst.ezbutpressed = "blue" Then
'replace zeros with blanks
 Selection.Replace What:="0", Replacement:="", LookAt:=xlWhole, _
        SearchOrder:=xlByColumns, MatchCase:=True, SearchFormat:=False, _
        ReplaceFormat:=False
For y = startcolnum To endcolnum
rngstr = ColLetterFromNo(y) & startrow & ":" & ColLetterFromNo(y) & endrow
ActiveSheet.Range(rngstr).Select
Selection.FormatConditions.AddColorScale ColorScaleType:=3
    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
    Selection.FormatConditions(1).ColorScaleCriteria(1).Type = _
        xlConditionValueLowestValue
    With Selection.FormatConditions(1).ColorScaleCriteria(1).FormatColor
        .Color = 8109667
        .TintAndShade = 0
    End With
    Selection.FormatConditions(1).ColorScaleCriteria(2).Type = _
        xlConditionValuePercentile
    Selection.FormatConditions(1).ColorScaleCriteria(2).Value = 50
    With Selection.FormatConditions(1).ColorScaleCriteria(2).FormatColor
        .Color = 8711167
        .TintAndShade = 0
    End With
    Selection.FormatConditions(1).ColorScaleCriteria(3).Type = _
        xlConditionValueHighestValue
    With Selection.FormatConditions(1).ColorScaleCriteria(3).FormatColor
        .Color = 7039480
        .TintAndShade = 0
    End With
    Next y
 End If
 '--------------

 If xlst.ezbutpressed = "green" Then
 
 'replace zeros with blanks
 Selection.Replace What:="0", Replacement:="", LookAt:=xlWhole, _
        SearchOrder:=xlByColumns, MatchCase:=True, SearchFormat:=False, _
        ReplaceFormat:=False
 
For y = startcolnum To endcolnum
rngstr = ColLetterFromNo(y) & startrow & ":" & ColLetterFromNo(y) & endrow
ActiveSheet.Range(rngstr).Select
 Selection.FormatConditions.AddColorScale ColorScaleType:=3
    Selection.FormatConditions(Selection.FormatConditions.Count).SetFirstPriority
    Selection.FormatConditions(1).ColorScaleCriteria(1).Type = _
        xlConditionValueLowestValue
    With Selection.FormatConditions(1).ColorScaleCriteria(1).FormatColor
        .Color = 7039480
        .TintAndShade = 0
    End With
    Selection.FormatConditions(1).ColorScaleCriteria(2).Type = _
        xlConditionValuePercentile
    Selection.FormatConditions(1).ColorScaleCriteria(2).Value = 50
    With Selection.FormatConditions(1).ColorScaleCriteria(2).FormatColor
        .Color = 8711167
        .TintAndShade = 0
    End With
    Selection.FormatConditions(1).ColorScaleCriteria(3).Type = _
        xlConditionValueHighestValue
    With Selection.FormatConditions(1).ColorScaleCriteria(3).FormatColor
        .Color = 8109667
        .TintAndShade = 0
    End With
Next y
End If


rng.Select
xlst.ezbutinfobox = "Conditional color scale applied to " & ActiveSheet.Name & "__" & rng.Address
xlst.ezbutinfobox.BackColor = vbGreen
Exit Sub
errchk:
xlst.ezbutinfobox = "Something went wrong. Check your selection and try again"
xlst.ezbutinfobox.BackColor = vbMagenta

End Sub
Sub sheetmod()
Dim i As Integer
Dim j As Integer
Dim v As Long
Dim iAnswer As String
Dim strarray As String
Dim strunbound() As String
Dim sh As Worksheet
If ThisWorkbook.Name = ActiveWorkbook.Name Then
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "Click a workbook other than " & ThisWorkbook.Name
Exit Sub
End If

'---sorter---
If xlst.ezbutpressed = "yellow" Then
'determine present order
'if last tab greater then
If converttonumber(Left(Trim(Sheets(ActiveWorkbook.Sheets.Count).Name), 1)) > converttonumber(Left(Trim(Sheets(1).Name), 1)) Then
 iAnswer = "descending"
 Else
 iAnswer = "ascending"
 End If



   For i = 1 To Sheets.Count
      For j = 1 To Sheets.Count - 1
'
' If the answer is Yes, then sort in ascending order.
'
If Sheets(j).Visible = True Then
If iAnswer = "ascending" Then
            If UCase$(Sheets(j).Name) > UCase$(Sheets(j + 1).Name) Then
               Sheets(j).Move After:=Sheets(j + 1)
            End If
'
' If the answer is No, then sort in descending order.
'
         ElseIf iAnswer = "descending" Then
            If UCase$(Sheets(j).Name) < UCase$(Sheets(j + 1).Name) Then
               Sheets(j).Move After:=Sheets(j + 1)
            End If
         End If
         End If
      Next j
   Next i
xlst.ezbutinfobox.BackColor = vbGreen
xlst.ezbutinfobox = ActiveWorkbook.Name & "'s sheet/tabs sorted in " & iAnswer & " order."
Exit Sub
End If

'---very hidden unhider---
If xlst.ezbutpressed = "red" Then
iAnswer = "" 'reset
i = 0
For j = 1 To ActiveWorkbook.Sheets.Count
If ActiveWorkbook.Sheets(j).Visible = False Or ActiveWorkbook.Sheets(j).Visible = xlVeryHidden Then
iAnswer = iAnswer & vbCr & ActiveWorkbook.Sheets(j).Name
ActiveWorkbook.Sheets(j).Visible = xlSheetVisible
i = i + 1
End If
Next j
xlst.ezbutinfobox.BackColor = vbGreen
xlst.ezbutinfobox = i & " sheets made visible" & vbCr & iAnswer
Exit Sub
End If

'---very hide selected---
If xlst.ezbutpressed = "blue" Then
v = 0 'reset
For Each s In ActiveWorkbook.Sheets
If s.Visible = True Then
v = v + 1
End If
Next
If v = 1 Then
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "Unable to hide the only visible sheet in a workbook"
Exit Sub
End If
iAnswer = "" 'reset
i = 0
For Each sh In ActiveWindow.SelectedSheets
If sh.Visible = True Then
iAnswer = iAnswer & vbCr & sh.Name
sh.Visible = xlVeryHidden
i = i + 1
End If
Next
xlst.ezbutinfobox.BackColor = vbGreen
xlst.ezbutinfobox = i & " sheets made veryhidden" & vbCr & iAnswer
Exit Sub
End If

'---create new sheets---
If xlst.ezbutpressed = "green" Then
If Trim(xlst.ezinputbox) = "" Then
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "Add comma separated sheet names into EZ INPUT box. This will be order of creation."
Exit Sub
End If
iAnswer = "" 'reset
i = 0
strarray = xlst.ezinputbox 'or any string with unique dilimiter
strunbound = Split(strarray, ",") 'replace vbCrLf with any unique delimiter such as ","
For j = LBound(strunbound) To UBound(strunbound)
On Error Resume Next
ActiveWorkbook.Worksheets.Add(After:=Sheets(ActiveWorkbook.Sheets.Count)).Name = strunbound(j)
iAnswer = iAnswer & vbCr & strunbound(j)
i = i + 1
Resume Next
Next j
xlst.ezbutinfobox.BackColor = vbGreen
xlst.ezbutinfobox = i & " sheets created:" & vbCr & iAnswer
Exit Sub
End If
End Sub
Sub colbycolor()
Dim actcolor As String
On Error Resume Next
If xlst.ezbutpressed = "red" Then
'unhide all columns
     'in case the sheet is protected
    ActiveSheet.Cells.EntireColumn.Hidden = False
    xlst.ezbutinfobox.BackColor = vbGreen
xlst.ezbutinfobox = "Showing all columns"
Exit Sub
End If
If xlst.ezbutpressed = "green" Then
lastcol = Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByColumns).Column
If lastcol < 256 Then
lastcol = 256
End If
actcolor = ActiveCell.Interior.Color
If ActiveCell.DisplayFormat.Interior.Color <> 16777215 Then
actcolor = ActiveCell.DisplayFormat.Interior.Color
End If
actrow = ActiveCell.Row
If actcolor = 16777215 Then
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = ActiveCell.Address & " doesn't appear to be colorized. Select a header cell with a colorized cell and press the GREEN button."
Exit Sub
End If
For x = 1 To lastcol
If Cells(actrow, x).Interior.Color <> actcolor And Cells(actrow, x).DisplayFormat.Interior.Color <> actcolor Then
Cells(actrow, x).EntireColumn.Hidden = True
End If
Next x
xlst.ezbutinfobox.BackColor = vbGreen
xlst.ezbutinfobox = "Only columns with header row background color: " & actcolor & " showing"
Exit Sub
End If
End Sub
Sub countbycolor()
Dim rng As Range
Dim cnt As Long
On Error Resume Next
If xlst.ezbutpressed = "yellow" Then
'storebasecolors -- check if conditional color being displayed
'check if user has selected single cell
If InStr(Selection.Address, ":") > 0 Then
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "First select a SINGLE cell with the base cell or text color you want to count, then press the YELLOW button."
Exit Sub
End If
txtcolor = ActiveCell.Font.Color
displaytxtcolor = ActiveCell.DisplayFormat.Font.Color
cellcolor = ActiveCell.Interior.Color
displaycellcolor = ActiveCell.DisplayFormat.Interior.Color
If txtcolor = 0 And displaytxtcolor <> txtcolor Then
txt = displaytxtcolor
Else
txt = displaytxtcolor
End If
If cellcolor = 1677125 And displaycellcolor <> cellcolor Then
cellc = displaycellcolor
Else
cellc = displaycellcolor
End If
xlst.ezinputbox = txt & " " & cellc
xlst.ezbutinfobox.BackColor = vbCyan
xlst.ezbutinfobox = "Select range to count and press BLUE or GREEN button."
Exit Sub
End If

'extract storedcolors
If xlst.ezbutpressed = "blue" Or xlst.ezbutpressed = "green" Then
If Trim(xlst.ezinputbox) = "" Then
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "First select a base color cell with the text or cell color you want to count, then press the YELLOW button."
Exit Sub
Else
txtcolor = Val(Left(xlst.ezinputbox, InStr(xlst.ezinputbox, " ") - 1))
cellcolor = Val(Mid(xlst.ezinputbox, InStr(xlst.ezinputbox, " ") + 1, 99))
End If
End If


'count text color in range
If xlst.ezbutpressed = "blue" Then
For Each rng In Selection
If Trim(rng) <> "" Then
If rng.Font.Color = txtcolor Or rng.DisplayFormat.Font.Color = txtcolor Then
cnt = cnt + 1
End If
End If
Next
xlst.ezbutinfobox.BackColor = vbGreen
xlst.ezbutinfobox = cnt & " matched text color cells in " & Selection.Address
Exit Sub
End If
'count text color in range
If xlst.ezbutpressed = "green" Then
For Each rng In Selection
If rng.Interior.Color = cellcolor Or rng.DisplayFormat.Interior.Color = cellcolor Then
cnt = cnt + 1
End If
Next
xlst.ezbutinfobox.BackColor = vbGreen
xlst.ezbutinfobox = cnt & " matched cell color cells in " & Selection.Address
Exit Sub
End If
End Sub
Sub scellparse()
On Error GoTo err: 'error trapping
If xlst.ezbutpressed = "green" Then

If Trim(xlst.ezinputbox.Text) = "" Or Len(xlst.ezinputbox.Text) - Len(Application.Substitute(xlst.ezinputbox.Text, ",", "")) < 2 Or Len(xlst.ezinputbox.Text) - Len(Application.Substitute(xlst.ezinputbox.Text, ",", "")) > 2 Then
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "In the EZ Input box; input the source columns first row of data, column letter and increments of repeatable data. (Ex: 1,A,4)"
Exit Sub
End If
startdata = Val(Left(xlst.ezinputbox.Text, InStr(xlst.ezinputbox.Text, ",") - 1)) 'first row where data start
datacol = Trim(Replace(StripNumber(xlst.ezinputbox.Text), ",", "")) 'column letter where data is located
incremdata = Val(Trim(Replace(removeAlpha(Mid(xlst.ezinputbox.Text, InStr(xlst.ezinputbox.Text, ",") + 1, 99)), ",", ""))) 'how many rows of data used before increment starts over
cnt = ActiveCell.Row 'first blank row where data will be put
newstartcol = ActiveCell.Column 'first column NUMBER where data will be put, assumes all other columns will contig.
enddata = ActiveSheet.Columns(datacol).Find("*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows, LookIn:=xlValues).Row 'lastrow of data
restartdata = newstartcol
restartrow = 1


'MsgBox "startdata: " & startdata & " enddata: " & enddata & " datacol: " & datacol & " incremdata: " & incremdata & " cnt: " & cnt & " newstartcol: " & newstartcol & " restartrow: " & restartrow  'testing

'Display wait for a moment
Application.StatusBar = "****Please Wait*****  Macro processing"
'opitmize macro by disabling all processes that slow it down.
Application.ScreenUpdating = False
Application.Calculation = xlCalculationManual
Application.EnableEvents = False
Application.DisplayAlerts = False
Application.AskToUpdateLinks = False


For x = startdata To enddata
If restartrow > incremdata Then
restartrow = 1
restartdata = newstartcol
cnt = cnt + 1
End If

If restartrow <= incremdata Then
ActiveSheet.Cells(cnt, restartdata) = ActiveSheet.Cells(x, datacol)
restartdata = restartdata + 1
restartrow = restartrow + 1
End If

Next x

'Re-enable screenupdating (before END SUB)
Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic
Application.EnableEvents = True
Application.DisplayAlerts = True
Application.AskToUpdateLinks = True
Application.StatusBar = False


xlst.ezbutinfobox.BackColor = vbGreen
xlst.ezbutinfobox = "Process complete"


Exit Sub
err:
'Re-enable screenupdating (before END SUB)
Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic
Application.EnableEvents = True
Application.DisplayAlerts = True
Application.AskToUpdateLinks = True
Application.StatusBar = False
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "Something went wrong. Correct issues and try again."
End If
End Sub
Sub copyfauxhead()
Dim sourcesh As Worksheet
Dim wks As Worksheet
Dim wksarraystr As String
Dim wksarray() As String
Dim wksstr As String
Dim seladd As String
Dim x As Long
On Error GoTo err:
If xlst.ezbutpressed = "green" Or xlst.ezbutpressed = "blue" Then
Set sourcesh = ActiveSheet
seladd = Selection.Address
For Each wks In ActiveWorkbook.Sheets
If sourcesh.Name <> wks.Name And wks.Visible = True Then
If wksarraystr = "" Then
wksarraystr = wks.Name
Else
wksarraystr = wksarraystr & "," & wks.Name
End If
    End If
    Next
    wksarray = Split(wksarraystr, ",")
    
    
'Display wait for a moment
Application.StatusBar = "****Please Wait*****  Macro processing"
'opitmize macro by disabling all processes that slow it down.
Application.ScreenUpdating = False
Application.Calculation = xlCalculationManual
Application.EnableEvents = False
Application.DisplayAlerts = False
Application.AskToUpdateLinks = False
For x = LBound(wksarray) To UBound(wksarray)
wksstr = CStr(wksarray(x))
sourcesh.Range(seladd).Copy
ActiveWorkbook.Sheets(wksstr).Select
ActiveWorkbook.Sheets(wksstr).Rows(1).Select
Selection.Insert Shift:=xlDown
If xlst.ezbutpressed = "blue" Then
With ActiveWorkbook.Sheets(wksstr).PageSetup
.TopMargin = sourcesh.PageSetup.TopMargin
.LeftMargin = sourcesh.PageSetup.LeftMargin
.RightMargin = sourcesh.PageSetup.RightMargin
.BottomMargin = sourcesh.PageSetup.BottomMargin
End With
End If
 Next x
    sourcesh.Select
    Range("A1").Select
    Application.CutCopyMode = False
    'Re-enable screenupdating (before END SUB)
Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic
Application.EnableEvents = True
Application.DisplayAlerts = True
Application.AskToUpdateLinks = True
Application.StatusBar = False
    xlst.ezbutinfobox.BackColor = vbGreen
xlst.ezbutinfobox = "Range " & seladd & " from " & sourcesh.Name & " applied to sheets:" & vbCr & wksarraystr
End If
Exit Sub
err:
'Re-enable screenupdating (before END SUB)
Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic
Application.EnableEvents = True
Application.DisplayAlerts = True
Application.AskToUpdateLinks = True
Application.StatusBar = False
xlst.ezbutinfobox.BackColor = vbMagenta
xlst.ezbutinfobox = "Something went wrong. Correct issues and try again."

End Sub
Sub launchCalculator()
Dim Program As String, TaskID As Double
Program = "calc.exe"
On Error Resume Next
AppActivate "Calculator"
If err <> 0 Then
err = 0
TaskID = Shell(Program, 1)
If err <> 0 Then MsgBox "Can't start " & Program
End If
End Sub
Sub docloser()
Dim wbk As Workbook
Dim cnt As Long
Dim i As Long
Dim j As Long
Dim wbkname As String
Dim tempclose As String
Call tooltabhider
If xlst.MultiPage1.Value = 0 Then 'if the toolbox tab not selected
Call toolframereset
'closer make multiselect
xlst.lb1.MultiSelect = fmMultiSelectMulti

For Each wbk In Workbooks
            'loop through the Open workbooks
            If wbk.Name = ThisWorkbook.Name Or Left(wbk.Name, 8) = "personal" Then
                'exclude this workbook from the Loop
                Else
                cnt = cnt + 1
                xlst.lb1.AddItem wbk.Name
                End If
                Next
If cnt = 0 Then
xlst.toolsinfobox.BackColor = vbMagenta
xlst.toolsinfobox = "No other open workbooks"
xlst.MultiPage1.Value = 0
Exit Sub
Else
xlst.lbframe1.Caption = "CLOSER      [" & cnt & "] open workbooks"
xlst.toolboxinfobox = "Select workbook(s) to close then press desired process button."
xlst.lb1.Visible = True
xlst.lb1labelA.Caption = "SELECT/DESELECT"
xlst.lb1labelA.Visible = True
xlst.lbcommandbutton1A.Visible = True
xlst.lbcommandbutton1A.Caption = "Close without Save"
xlst.lbcommandbutton1C.Visible = True
xlst.lbcommandbutton1C.Caption = "Close with Save"
xlst.Repaint
End If
Else

'if initiated from toolbox form
If Trim(xlst.toolboxcaller.Text) <> "" Then
If InStr(xlst.toolboxcaller.Text, "1A") > 0 Then 'button A
'without saving

For i = 0 To xlst.lb1.ListCount - 1
    If xlst.lb1.Selected(i) Then j = j + 1
Next i
If j = 0 Then
MsgBox "No workbooks selected" & vbCr & "Select workbook(s) from list", vbCritical, "ATTENTION"
Exit Sub
End If
For i = 0 To xlst.lb1.ListCount - 1
    If xlst.lb1.Selected(i) Then
    wbkname = xlst.lb1.List(i)
Workbooks(wbkname).CheckCompatibility = False
Workbooks(wbkname).Close savechanges:=False
End If
Next i

'repopulate list
xlst.lb1.Clear
cnt = 0
For Each wbk In Workbooks
            'loop through the Open workbooks
            If wbk.Name = ThisWorkbook.Name Or Left(wbk.Name, 8) = "personal" Then
                'exclude this workbook from the Loop
                Else
                cnt = cnt + 1
                xlst.lb1.AddItem wbk.Name
                End If
                Next
xlst.lbframe1.Caption = "CLOSER      [" & cnt & "] open workbooks"
If cnt = 0 Then
Call xlst.CommandButton184_Click
xlst.toolsinfobox.BackColor = vbMagenta
xlst.toolsinfobox = "No other open workbooks"

'error trapping if no other workbook open
    If IsError(findany("toolsnameslist", "xlstconfigs")) Or findany("toolsnameslist", "xlstconfigs") = 0 Then
    Unload xlst
    Exit Sub
    End If


xlst.MultiPage1.Value = 0
Exit Sub
End If
End If

If InStr(xlst.toolboxcaller.Text, "1B") > 0 Then 'button B
'do nothing because not using button B
End If

If InStr(xlst.toolboxcaller.Text, "1C") > 0 Then 'button C
'with saving
For i = 0 To xlst.lb1.ListCount - 1
    If xlst.lb1.Selected(i) Then j = j + 1
Next i
If j = 0 Then
MsgBox "No workbooks selected" & vbCr & "Select workbook(s) from list", vbCritical, "ATTENTION"
Exit Sub
End If
For i = 0 To xlst.lb1.ListCount - 1
    If xlst.lb1.Selected(i) Then
    wbkname = xlst.lb1.List(i)
Workbooks(wbkname).CheckCompatibility = False
If InStr(Workbooks(wbkname).FullName, "temp") Then
tempclose = Workbooks(wbkname).path
End If
Workbooks(wbkname).Close savechanges:=True
End If
Next i

'repopulate list
xlst.lb1.Clear
cnt = 0
For Each wbk In Workbooks
            'loop through the Open workbooks
            If wbk.Name = ThisWorkbook.Name Or Left(wbk.Name, 8) = "personal" Then
                'exclude this workbook from the Loop
                Else
                cnt = cnt + 1
                xlst.lb1.AddItem wbk.Name
                End If
                Next
                
                
xlst.lbframe1.Caption = "CLOSER      [" & cnt & "] open workbooks"
If cnt = 0 Then
Call xlst.CommandButton184_Click
xlst.toolsinfobox.BackColor = vbMagenta
xlst.toolsinfobox = "No other open workbooks"
xlst.MultiPage1.Value = 0
If tempclose <> "" Then
xlst.toolsinfobox = "Files from emails or not previously saved are saved in:" & vbCr & tempclose
xlst.toolsinfobox.BackColor = vbMagenta
End If
Exit Sub
End If

If tempclose <> "" Then
xlst.toolboxinfobox = "Files from emails or not previously saved are saved in:" & vbCr & tempclose
xlst.toolboxinfobox.BackColor = vbMagenta
Exit Sub
End If
End If
End If
End If
End Sub
Sub dotabif()
'[[[[[[[[[WARNING this subroutine supports datadiv subroutine -- do NOT delete dotabif routine]]]]
Dim wbk As Workbook
Dim wsh As String
Dim wbkstr As String
Dim divcol As String
Dim divby As Long
Dim x As Long
Dim tabadd As String
Dim tabrow As Integer
Dim tabcol As Integer
Dim strarray As String
Dim strunbound() As String
Dim i As Long
Dim wstest As Worksheet
Dim uniqsh As String
Dim lastcol As Long
Dim shpw As Double
Dim shph As Double
Dim cnt As Long

If xlst.MultiPage1.Value = 0 Then 'if the toolbox tab not selected
Call toolframereset
For Each wbk In Workbooks
            'loop through the Open workbooks
            If wbk.Name = ThisWorkbook.Name Or Left(wbk.Name, 8) = "personal" Then
                'exclude this workbook from the Loop
                Else
                cnt = cnt + 1
                xlst.cb1A.AddItem wbk.Name
                End If
                Next
If cnt = 0 Then
xlst.toolsinfobox.BackColor = vbMagenta
xlst.toolsinfobox = "No other open workbooks"
xlst.MultiPage1.Value = 0
Exit Sub
Else
xlst.toolboxinfobox = "Select workbook to tabificate"

xlst.cb1dropA.Visible = True
xlst.cb1dropB.Visible = True
xlst.cb1dropA.Caption = "WORKBOOK"
xlst.cb1dropB.Caption = "WORKSHEET"
xlst.cb1A.Visible = True
xlst.cb1B.Visible = True
xlst.cbtb1A.Visible = True
xlst.cbtb1B.Visible = False
xlst.cbtb1Alabel.Visible = True
xlst.cbtb1Alabel.Caption = "COLUMN"
xlst.cbtb1Blabel.Visible = False
xlst.cbtb1Blabel.Caption = "COMMA SEPARATED DIVISORS"
xlst.cbOptionButton1A.Visible = True
xlst.cbOptionButton1A.Caption = "Any unique"
xlst.cbOptionButton1B.Visible = True
xlst.cbOptionButton1C.Visible = True
xlst.cbOptionButton1D.Visible = True
xlst.cbOptionButton1E.Visible = True
xlst.cbCommandButton1A.Visible = False
xlst.cbCommandButton1B.Visible = False
xlst.cbCommandButton1C.Visible = True
xlst.cbCommandButton1C.Caption = "TABIFICATE"
xlst.CheckBox10.Visible = True
xlst.Repaint
End If
Else
'****process***
'error trapping here
xlst.toolboxinfobox.BackColor = vbMagenta
If Trim(xlst.cb1A) = "" Then
xlst.toolboxinfobox = "Select an open workbook from the dropdown"
xlst.cb1A.SetFocus
Exit Sub
End If
If Trim(xlst.cb1B) = "" Then
xlst.toolboxinfobox = "Select a worksheet to associate with " & xlst.cb1A
xlst.cb1B.SetFocus
Exit Sub
End If
If Trim(xlst.cbtb1A) = "" Then
xlst.toolboxinfobox = "Input divider column, which is the column to match against"
xlst.cbtb1A.SetFocus
Exit Sub
End If
If xlst.cbtb1B = True And Trim(xlst.cbtb1B) = "" Then
xlst.toolboxinfobox = "Input comma separated list to match against column " & UCase(xlst.cbtb1B)
xlst.cbtb1B.SetFocus
Exit Sub
End If
'determine which button selected
If xlst.cbOptionButton1A.Value = True Then
divby = 1
End If
If xlst.cbOptionButton1B.Value = True Then
divby = 2
End If
If xlst.cbOptionButton1C.Value = True Then
divby = 3
End If
If xlst.cbOptionButton1D.Value = True Then
divby = 4
End If
If xlst.cbOptionButton1E.Value = True Then
divby = 5
End If
If divby = 0 Then
xlst.toolboxinfobox = "Select how to process column " & UCase(xlst.cbtb1A) & " entries"
Exit Sub
End If
'---
On Error Resume Next
xlst.toolboxinfobox = "Processing...please wait"
xlst.toolboxinfobox.BackColor = vbYellow
xlst.Repaint
divcol = xlst.cbtb1A
wbkstr = xlst.cb1A.Text
wsh = xlst.cb1B.Text
Set wbk = Workbooks(wbkstr)
lastcol = wbk.Sheets(wsh).Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByColumns).Column

tabrow = 0
'determine header row
For x = 1 To 50
If Application.CountA(wbk.Sheets(wsh).Rows(x)) > 0 Then
If IsError(wbk.Sheets(wsh).Rows(x).Find("*", SearchDirection:=xlPrevious, SearchOrder:=xlByColumns, LookIn:=xlValues).Column) = False Then
If wbk.Sheets(wsh).Rows(x).Find("*", SearchDirection:=xlPrevious, SearchOrder:=xlByColumns, LookIn:=xlValues).Column = lastcol Then
If tabrow = 0 Then
tabrow = x
End If
End If
End If
End If
Next x

'Display wait for a moment
Application.StatusBar = "****Please Wait*****  Macro processing"
'opitmize macro by disabling all processes that slow it down.
Application.ScreenUpdating = False
Application.Calculation = xlCalculationManual
Application.EnableEvents = False
Application.DisplayAlerts = False
Application.AskToUpdateLinks = False

'*****configs******
targetsheet = wsh 'name of target sheet to divide
lastrow = wbk.Sheets(wsh).Columns(divcol).Find("*", SearchDirection:=xlNext, SearchOrder:=xlByRows, LookIn:=xlValues).Row
'get shape size from original sheet
'shpw = wbk.Sheets(wsh).Shapes(1).Width
'shph = wbk.Sheets(wsh).Shapes(1).Height
tabcol = Range(divcol & 1).Column
lastrow = wbk.Sheets(targetsheet).Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
If tabrow = 0 Then 'end if tabificator defined header not found
Exit Sub
End If
'MsgBox "tabadd: " & tabadd & vbCr & "tabrow: " & tabrow & vbCr & "tabcol: " & tabcol & vbCr & "lastrow: " & lastrow & vbCr & "targetsheet: " & targetsheet 'testing
If divby = 1 Then 'if by unique
For x = tabrow + 1 To lastrow
xlst.toolboxinfobox = "Processing...please wait [" & Format(x / lastrow, "Percent") & "] Complete"
DoEvents
wshexist = "" 'reset
uniqsh = Trim(Left(wbk.Sheets(targetsheet).Cells(x, tabcol), 30))
wshexist = wbk.Sheets(uniqsh).Name
'blank handler
    If Trim(wbk.Sheets(targetsheet).Cells(x, tabcol)) = "" Then
    uniqsh = mtsblank
    End If
'MsgBox "wshexist: " & wshexist & vbCr & "uniqsh: " & uniqsh 'testing
If wshexist = "" And uniqsh <> "" Then
'create sheet named after unique
If uniqsh <> "" And WorksheetExists(uniqsh) = False And IsValidSheetName(uniqsh) Then
cnt = tabrow + 1
 wbk.Sheets(targetsheet).Activate
    wbk.Sheets(targetsheet).Rows("1:" & tabrow).Select
    Selection.Copy
    
    If xlst.CheckBox10 = False Then
    wbk.Sheets.Add
    Else
    Workbooks.Add
    End If
    ActiveSheet.Name = uniqsh
    divshs = divshs & "," & uniqsh
    ActiveSheet.Paste
    ActiveSheet.PasteSpecial Paste:=xlPasteFormats, Paste:=xlPasteAllUsingSourceTheme, Operation:=xlNone, _
        SkipBlanks:=False, Transpose:=False, Paste:=xlPasteColumnWidths
    Selection.Columns.PasteSpecial Paste:=8
 ActiveWorkbook.sheet(uniqsh).Activate
'add entries to created sheets
For y = tabrow + 1 To lastrow
uniqsh = Trim(Left(wbk.Sheets(targetsheet).Cells(y, tabcol), 30))
If uniqsh = Left(ActiveSheet.Name, 30) And Trim(wbk.Sheets(targetsheet).Cells(y, tabcol)) <> "" Then
ActiveSheet.Rows(cnt).Value = wbk.Sheets(targetsheet).Rows(y).Value
cnt = cnt + 1
End If
Next y
'formatting new sheet
 'ActiveSheet.Shapes(1).Width = 400
    'ActiveSheet.Shapes(1).Height = 100
    Rows(tabrow).AutoFilter
ActiveSheet.Range("A" & tabrow).Select
    End If
    End If
    Next x
Application.CutCopyMode = False
End If
'-------[[[[CUSTOM MATCH]]]]---------------
If divby > 1 Then
strarray = xlst.cbtb1B 'or any string with unique dilimiter
strunbound = Split(strarray, ",") 'replace vbCrLf with any unique delimiter such as ","
For i = LBound(strunbound) To UBound(strunbound)
uniqsh = "" 'reset
uniqsh = Left(strunbound(i), 30)

For x = tabrow + 1 To lastrow
xlst.toolboxinfobox = "Processing...please wait [" & Format(x / lastrow, "Percent") & "] Complete"
DoEvents
wshexist = "" 'reset
'uniqsh = Trim(wbk.Sheets(targetsheet).Cells(x, tabcol))
wshexist = wbk.Sheets(uniqsh).Name
'blank handler
    If Trim(wbk.Sheets(targetsheet).Cells(x, tabcol)) = "" Then
    uniqsh = mtsblank
    End If
'MsgBox "wshexist: " & wshexist & vbCr & "uniqsh: " & uniqsh 'testing
If wshexist = "" And uniqsh <> "" Then
'create sheet named after unique
uniqsh = Replace(uniqsh, "*", "") ' replace wildcard indicator
If uniqsh <> "" And WorksheetExists(uniqsh) = False And IsValidSheetName(uniqsh) Then

cnt = tabrow + 1
 wbk.Sheets(targetsheet).Activate
    wbk.Sheets(targetsheet).Rows("1:" & tabrow).Select
    Selection.Copy
    If xlst.CheckBox10 = False Then
    wbk.Sheets.Add
    Else
    Workbooks.Add
    End If
    ActiveSheet.Name = uniqsh
    divshs = divshs & "," & uniqsh
    ActiveSheet.Paste
    ActiveSheet.PasteSpecial Paste:=xlPasteFormats, Paste:=xlPasteAllUsingSourceTheme, Operation:=xlNone, _
        SkipBlanks:=False, Transpose:=False, Paste:=xlPasteColumnWidths
    Selection.Columns.PasteSpecial Paste:=8
 ActiveWorkbook.sheet(uniqsh).Activate
'add entries to created sheets
For y = tabrow + 1 To lastrow
'uniqsh = Trim(ActiveWorkbook.Sheets(targetsheet).Cells(Y, tabcol))
uniqsh = Replace(uniqsh, "*", "") ' replace wildcard indicator
If divby = 3 Then
uniqsh = uniqsh & "*"
End If
If divby = 4 Then
uniqsh = "*" & uniqsh
End If
If divby = 5 Then
uniqsh = "*" & uniqsh & "*"
End If
'MsgBox "uniqsh: " & uniqsh & vbCr & "actsh: " & ActiveSheet.Name
If Replace(uniqsh, "*", "") = Left(ActiveSheet.Name, 30) And Trim(wbk.Sheets(targetsheet).Cells(y, tabcol)) Like uniqsh Then
ActiveSheet.Rows(cnt).Value = wbk.Sheets(targetsheet).Rows(y).Value
cnt = cnt + 1
End If
Next y
'formatting new sheet
 'ActiveSheet.Shapes(1).Width = shpw
    'ActiveSheet.Shapes(1).Height = shph
    Rows(tabrow).AutoFilter
ActiveSheet.Range("A" & tabrow).Select
    End If
    End If
    Next x
Application.CutCopyMode = False
Next i
End If
Resume Next
'Re-enable screenupdating (before END SUB)
Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic
Application.EnableEvents = True
Application.DisplayAlerts = True
Application.AskToUpdateLinks = True
Application.StatusBar = False
xlst.toolboxinfobox = "Process complete"
xlst.toolboxinfobox.BackColor = vbGreen
ActiveSheet.Activate
Exit Sub
End If
End Sub
Sub domm_old()
Dim wbk As Workbook
Dim wsh As String
Dim hit As Long
Dim tocol As Long
Dim cccol As Long
Dim bcccol As Long
Dim subjcol As Long
Dim bodcol As Long
Dim attccol As Long
Dim errmsg As String
Dim wbkstr As String
Dim x As Long
Dim i As Long
Dim lastcol As Long
Dim cnt As Long
Dim oOutlook As Object
Dim stSubject As String
Dim goodgo As Long
Dim StrFile As String
Dim StrFolder As String
goodgo = 1
If xlst.MultiPage1.Value = 0 Then 'if the toolbox tab not selected
Call toolframereset
For Each wbk In Workbooks
            'loop through the Open workbooks
            If wbk.Name = ThisWorkbook.Name Or Left(wbk.Name, 8) = "personal" Then
                'exclude this workbook from the Loop
                Else
                xlst.cb1A.AddItem wbk.Name
                cnt = cnt + 1
                End If
                Next
If cnt = 0 Then
xlst.toolsinfobox.BackColor = vbMagenta
xlst.toolsinfobox = "No other open workbooks"
xlst.MultiPage1.Value = 0
Exit Sub
Else
xlst.toolboxinfobox = "Select which workbook contains the massmail configured worksheet" & vbCr & "**ALERT** May want to send self test mail first. Can use HTML tags in BODY." & vbCr & "Start Row optional, otherwise will process entire sheet"

xlst.cb1A.Visible = True
xlst.cb1B.Visible = True
xlst.cb1dropA.Visible = True
xlst.cb1dropB.Visible = True
xlst.cb1dropA.Caption = "WORKBOOK"
xlst.cb1dropB.Caption = "WORKSHEET"
xlst.cbtb1A.Visible = True
xlst.cbtb1B.Visible = False
xlst.cbtb1Alabel.Visible = True
xlst.cbtb1Alabel.Caption = "Start Row"
xlst.cbtb1Blabel.Visible = False
xlst.cbOptionButton1A.Caption = "Signature"
xlst.cbOptionButton1B.Caption = "No Signature"
xlst.cbOptionButton1A.Visible = True
xlst.cbOptionButton1A.Value = True
xlst.cbOptionButton1B.Visible = True
xlst.cbOptionButton1C.Visible = False
xlst.cbOptionButton1D.Visible = False
xlst.cbOptionButton1E.Visible = False
xlst.cbCommandButton1A.Visible = False
xlst.cbCommandButton1B.Visible = True
xlst.cbCommandButton1B.Caption = "Get file paths"
xlst.cbCommandButton1C.Visible = True
xlst.cbCommandButton1C.Caption = "Email Recipients"
xlst.CheckBox10.Visible = False
xlst.Repaint
End If
Else
'****process***
'error trapping here
xlst.toolboxinfobox.BackColor = vbMagenta
If Trim(xlst.cb1A) = "" Then
xlst.toolboxinfobox = "Select an open workbook from the dropdown"
xlst.cb1A.SetFocus
goodgo = 0
Exit Sub
End If
If Trim(xlst.cb1B) = "" Then
xlst.toolboxinfobox = "Select a worksheet to associate with " & xlst.cb1A
xlst.cb1B.SetFocus
goodgo = 0
Exit Sub
End If
'check if selected worksheet is configured for massmailer

Set wbk = Workbooks(xlst.cb1A.Text)
wsh = xlst.cb1B.Text
On Error Resume Next
tocol = wbk.Sheets(wsh).Cells.Find(What:="to:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Column
i = wbk.Sheets(wsh).Cells.Find(What:="to:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Row + 1
        
If tocol = 0 Then
errmsg = "*Unable to find TO: column on " & wsh
hit = 1
goodgo = 0
End If
cccol = wbk.Sheets(wsh).Cells.Find(What:="cc:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Column
If cccol = 0 Then
errmsg = errmsg & vbCr & "*Unable to find CC: column " & wsh
hit = hit + 1
goodgo = 0
End If
bccol = wbk.Sheets(wsh).Cells.Find(What:="bcc:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Column
If bccol = 0 Then
errmsg = errmsg & vbCr & "*Unable to find BCC: column " & wsh
hit = hit + 1
goodgo = 0
End If


If bccol = cccol Then
cccol = wbk.Sheets(wsh).Cells.Find(What:="cc:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
        MatchCase:=False, SearchFormat:=False).Column
End If




subjcol = wbk.Sheets(wsh).Cells.Find(What:="subject:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Column
If subjcol = 0 Then
errmsg = errmsg & vbCr & "*Unable to find SUBJECT: column " & wsh
hit = hit + 1
goodgo = 0
End If
bodcol = wbk.Sheets(wsh).Cells.Find(What:="body:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Column
If bodcol = 0 Then
errmsg = errmsg & vbCr & "*Unable to find BODY: column " & wsh
hit = hit + 1
goodgo = 0
End If
attccol = wbk.Sheets(wsh).Cells.Find(What:="attachment:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Column
If attccol = 0 Then
errmsg = errmsg & vbCr & "*Unable to find ATTACHMENT: column " & wsh
hit = hit + 1
goodgo = 0
End If
Resume Next

If errmsg <> "" Or cnt > 0 Then
errmsg = Mid(errmsg, InStr(errmsg, "*"), Len(errmsg)) ' remove leading vbcr
xlst.toolboxinfobox = "CORRECT (" & hit & ") ISSUES:" & vbCr & errmsg
xlst.toolboxinfobox.BackColor = vbMagenta
If (hit = 6) Then
ysetup = MsgBox("Would you like to set up needed headers starting at " & ActiveCell.Address & " on sheet: " & ActiveSheet.Name & "?", vbYesNo, "SETUP?")
If ysetup = vbYes Then
ActiveCell = "TO:"
ActiveCell.Offset(0, 1) = "CC:"
ActiveCell.Offset(0, 2) = "BCC:"
ActiveCell.Offset(0, 3) = "SUBJECT:"
ActiveCell.Offset(0, 4) = "BODY:"
ActiveCell.Offset(0, 5) = "ATTACHMENT:"
xlst.toolboxinfobox = "Press whichever button you'd like to process."
xlst.toolboxinfobox.BackColor = vbCyan
End If
End If


Exit Sub
End If

'allow user to select start row
If IsNumeric(xlst.cbtb1A.Value) = True And xlst.cbtb1A.Value > 1 Then
i = xlst.cbtb1A.Value
End If
rowcnt = i

'get files path
If InStr(xlst.toolboxcaller.Text, "1B") > 0 Then 'button B
xlst.toolboxinfobox = "Select folder with files you want to import to " & wbk.Sheets(wsh).Name
xlst.toolboxinfobox.BackColor = vbYellow
StrFolder = GetFolder
If StrFolder = "" Then
Exit Sub
End If
'get files from selected folder
StrFile = Dir(StrFolder & "\*")
    Do While Len(StrFile) > 0
    filecnt = filecnt + 1
    
        wbk.Sheets(wsh).Cells(rowcnt, attccol) = StrFolder & "\" & StrFile
        rowcnt = rowcnt + 1
        StrFile = Dir
    Loop
'if no files in selected folder
If filecnt = 0 Then
xlst.toolboxinfobox = "No files in " & StrFolder
xlst.toolboxinfobox.BackColor = vbMagenta
Exit Sub
End If
xlst.toolboxinfobox = "Check that files match intended email recipients and press EMAIL RECIPIENTS."
xlst.toolboxinfobox.BackColor = vbYellow
Exit Sub
End If
'---------------


'test if outlook not running
Dim olapp As Object
On Error Resume Next
Set olapp = CreateObject("Outlook.Application")
'Set olapp = GetObject(, "Outlook.Application")
Set oOutlook = olapp.CreateItem(olMailItem)
On Error GoTo 0
If Not olapp Is Nothing Then
  'Outlook is open!
Const EMBED_ATTACHMENT As Long = 1454
lastrow = wbk.Sheets(wsh).Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
If lastrow < i Then
xlst.toolboxinfobox = "No email addresses indicated on " & wsh
xlst.toolboxinfobox.BackColor = vbMagenta
goodgo = 0
Exit Sub
End If

If goodgo = 1 Then
xlst.toolboxinfobox = "**Processing...Please wait**"
xlst.toolboxinfobox.BackColor = vbYellow
DoEvents


'**** initial error check pass ****
For x = i To lastrow
'check file exist
If Trim(wbk.Sheets(wsh).Cells(x, attccol)) <> "" Then 'check if file indicated
  If IsError(Dir(wbk.Sheets(wsh).Cells(x, attccol))) Then 'check if file exists
xlst.toolboxinfobox = "Row: " & x & vbCr & " File: " & wbk.Sheets(wsh).Cells(x, attccol) & vbCr & "does not exist" & vbCr & "Correct and run again"
xlst.toolboxinfobox.BackColor = vbMagenta
 Exit Sub
 End If
  If Dir(wbk.Sheets(wsh).Cells(x, attccol)) = "" Then 'check if file exists
xlst.toolboxinfobox = "Row: " & x & vbCr & " File: " & wbk.Sheets(wsh).Cells(x, attccol) & vbCr & "does not exist" & vbCr & "Correct and run again"
xlst.toolboxinfobox.BackColor = vbMagenta
 Exit Sub
 End If
 End If
 'check subject line
 If Trim(wbk.Sheets(wsh).Cells(x, tocol)) <> "" And Trim(wbk.Sheets(wsh).Cells(x, subjcol)) = "" Then
xlst.toolboxinfobox = "Row: " & x & vbCr & " No subject indicated" & vbCr & "Correct and run again"
xlst.toolboxinfobox.BackColor = vbMagenta
 Exit Sub
 End If
 'check email addresses
If Trim(wbk.Sheets(wsh).Cells(x, tocol)) <> "" And (InStr(wbk.Sheets(wsh).Cells(x, tocol), "@") = 0 Or InStr(wbk.Sheets(wsh).Cells(x, tocol), ".") = 0) Then
xlst.toolboxinfobox = "Row: " & x & vbCr & " TO: Email address malformed" & vbCr & "Correct and run again"
xlst.toolboxinfobox.BackColor = vbMagenta
 Exit Sub
 End If
If Trim(wbk.Sheets(wsh).Cells(x, cccol)) <> "" And (InStr(wbk.Sheets(wsh).Cells(x, cccol), "@") = 0 Or InStr(wbk.Sheets(wsh).Cells(x, cccol), ".") = 0) Then
xlst.toolboxinfobox = "Row: " & x & vbCr & " CC: Email address malformed" & vbCr & "Correct and run again"
xlst.toolboxinfobox.BackColor = vbMagenta
 Exit Sub
 End If
If Trim(wbk.Sheets(wsh).Cells(x, bccol)) <> "" And (InStr(wbk.Sheets(wsh).Cells(x, bccol), "@") = 0 Or InStr(wbk.Sheets(wsh).Cells(x, bccol), ".") = 0) Then
xlst.toolboxinfobox = "Row: " & x & vbCr & " BCC: Email address malformed" & vbCr & "Correct and run again"
xlst.toolboxinfobox.BackColor = vbMagenta
 Exit Sub
 End If
 
 Next x
 
 
 'opitmize macro by disabling all processes that slow it down.
stime = Timer
'On Error GoTo err:
Application.ScreenUpdating = False
Application.Calculation = xlCalculationManual
Application.EnableEvents = False
Application.DisplayAlerts = False
  '****emailer****
  emailcnt = 0
  For x = i To lastrow
  If Trim(wbk.Sheets(wsh).Cells(x, tocol)) <> "" Then
DoEvents
Const stPath As String = "c:\Temp"
Const vaCopyTo As Variant = ""

stSubject = wbk.Sheets(wsh).Cells(x, subjcol)
vaMsg = wbk.Sheets(wsh).Cells(x, bodcol) & vbCr & vbCr
'stAttachment = stPath & "\" & stFileName & ".xls"
'Create the list of TO: recipients.
If InStr(wbk.Sheets(wsh).Cells(x, tocol), ",") = False And InStr(wbk.Sheets(wsh).Cells(x, tocol), ";") = False Then
 ToRecipients = Split(wbk.Sheets(wsh).Cells(x, tocol), "")
  End If
If InStr(wbk.Sheets(wsh).Cells(x, tocol), ",") Then
 ToRecipients = Split(wbk.Sheets(wsh).Cells(x, tocol), ",")
  End If
If InStr(wbk.Sheets(wsh).Cells(x, tocol), ";") Then
  ToRecipients = Split(wbk.Sheets(wsh).Cells(x, tocol), ";")
  End If
 'Create the list of CC: recipients.
If InStr(wbk.Sheets(wsh).Cells(x, cccol), ",") = False And InStr(wbk.Sheets(wsh).Cells(x, cccol), ";") = False Then
 CCRecipients = Split(wbk.Sheets(wsh).Cells(x, cccol), "")
  End If
If InStr(wbk.Sheets(wsh).Cells(x, cccol), ",") Then
 CCRecipients = Split(wbk.Sheets(wsh).Cells(x, cccol), ",")
  End If
If InStr(wbk.Sheets(wsh).Cells(x, cccol), ";") Then
  CCRecipients = Split(wbk.Sheets(wsh).Cells(x, cccol), ";")
  End If
 'Create the list of BCC: recipients.
If InStr(wbk.Sheets(wsh).Cells(x, bccol), ",") = False And InStr(wbk.Sheets(wsh).Cells(x, bccol), ";") = False Then
 BCCRecipients = Split(wbk.Sheets(wsh).Cells(x, bccol), "")
  End If
If InStr(wbk.Sheets(wsh).Cells(x, bccol), ",") Then
 BCCRecipients = Split(wbk.Sheets(wsh).Cells(x, bccol), ",")
  End If
If InStr(wbk.Sheets(wsh).Cells(x, bccol), ";") Then
  BCCRecipients = Split(wbk.Sheets(wsh).Cells(x, bccol), ";")
  End If
  
  
  invemail = invemail + Len(wbk.Sheets(wsh).Cells(x, tocol)) - Len(Application.Substitute(wbk.Sheets(wsh).Cells(x, tocol), "@", "")) 'count individual to email addresses
  invemail = invemail + Len(wbk.Sheets(wsh).Cells(x, cccol)) - Len(Application.Substitute(wbk.Sheets(wsh).Cells(x, cccol), "@", "")) 'count individual cc email addresses
  invemail = invemail + Len(wbk.Sheets(wsh).Cells(x, bccol)) - Len(Application.Substitute(wbk.Sheets(wsh).Cells(x, bccol), "@", "")) 'count individual bcc email addresses
   emailcnt = emailcnt + 1
   
  'GET DEFAULT EMAIL SIGNATURE
  If xlst.cbOptionButton1A.Value = True Then
    Signature = Environ("appdata") & "\Microsoft\Signatures\"
    If Dir(Signature, vbDirectory) <> vbNullString Then
        Signature = Signature & Dir$(Signature & "*.htm")
    Else:
        Signature = ""
    End If
    Signature = CreateObject("Scripting.FileSystemObject").GetFile(Signature).OpenAsTextStream(1, -2).readall
    End If
    
  Set olapp = CreateObject("Outlook.Application")
 Set OlMail = olapp.CreateItem(olMailItem) 'olMailItem
 
 
  On Error Resume Next
    With OlMail
    '.Display
    For Each ToRecipient In ToRecipients
        .to = .to & ";" & ToRecipient
        Next ToRecipient
    For Each CCRecipient In CCRecipients
        .cc = .cc & ";" & CCRecipient
        Next CCRecipient
        For Each BCCRecipient In BCCRecipients
        .bcc = .bcc & ";" & BCCRecipient
        Next BCCRecipient
        .Subject = stSubject
        '.HTMLBody = vaMsg & Signature
        If xlst.cbOptionButton1A.Value = True Then
        .HTMLBody = vaMsg & Signature & "<br>" & .HTMLBody
        End If
        .HTMLBody = vaMsg & "<br>" & .HTMLBody
    End With
    On Error GoTo 0
 
 
 OlMail.Subject = stSubject
 If xlst.cbOptionButton1A.Value = True Then
 OlMail.HTMLBody = vaMsg & Signature
 Else
 OlMail.HTMLBody = vaMsg
 End If

  
 'image attaching
  If Trim(wbk.Sheets(wsh).Cells(x, attccol)) <> "" Then 'if file indicated
  If Dir(wbk.Sheets(wsh).Cells(x, attccol)) <> "" Then 'if file exists
  On Error Resume Next
 imAttachment = wbk.Sheets(wsh).Cells(x, attccol)
 OlMail.Attachments.Add imAttachment
 Resume Next
  End If
  End If
 OlMail.Send
 End If
 
 
 '***end emailer***
  
    Next x
    
    
Application.StatusBar = emailcnt & " total emails sent to " & invemail & " addresses" & vbCr & "COMPLETED IN " & Round(Timer - stime, 1) & " seconds"

xlst.toolboxinfobox = Application.StatusBar & vbCr & "Check SENT box."
xlst.toolboxinfobox.BackColor = vbGreen
    
    'Re-enable screenupdating (before END SUB)
Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic
Application.EnableEvents = True
Application.DisplayAlerts = True
Application.StatusBar = False
Exit Sub
Else
  'Outlook not open
  'Re-enable screenupdating (before END SUB)
Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic
Application.EnableEvents = True
Application.DisplayAlerts = True
Application.StatusBar = False
xlst.toolboxinfobox = "Outlook Email application must be open"
xlst.toolboxinfobox.BackColor = vbMagenta
Exit Sub
End If
End If
End If
End Sub
Sub domm()
Dim wbk As Workbook
Dim wsh As String
Dim hit As Long
Dim tocol As Long
Dim cccol As Long
Dim bcccol As Long
Dim subjcol As Long
Dim bodcol As Long
Dim attccol As Long
Dim sendcol As Long
Dim errmsg As String
Dim wbkstr As String
Dim x As Long
Dim i As Long
Dim lastcol As Long
Dim cnt As Long
Dim oOutlook As Object
Dim goodgo As Long
Dim StrFile As String
Dim StrFolder As String
Dim ToRecipients As String
Dim CCRecipients As String
Dim BCCRecipients As String
Dim stSubject As String
Dim vaMsg As String
Dim imAttachment As String
Dim senderstr As String
Dim strarray As String
Dim strunbound() As String
Dim Z As Long
goodgo = 1
If xlst.MultiPage1.Value = 0 Then 'if the toolbox tab not selected
Call toolframereset
For Each wbk In Workbooks
            'loop through the Open workbooks
            If wbk.Name = ThisWorkbook.Name Or Left(wbk.Name, 8) = "personal" Then
                'exclude this workbook from the Loop
                Else
                xlst.cb1A.AddItem wbk.Name
                cnt = cnt + 1
                End If
                Next
If cnt = 0 Then
xlst.toolsinfobox.BackColor = vbMagenta
xlst.toolsinfobox = "No other open workbooks"
xlst.MultiPage1.Value = 0
Exit Sub
Else
xlst.toolboxinfobox = "Select which workbook contains the massmail configured worksheet" & vbCr & "**ALERT** May want to send self test mail first. Can use HTML tags in BODY." & vbCr & "Start Row optional, otherwise will process entire sheet"

xlst.cb1A.Visible = True
xlst.cb1B.Visible = True
xlst.cb1dropA.Visible = True
xlst.cb1dropB.Visible = True
xlst.cb1dropA.Caption = "WORKBOOK"
xlst.cb1dropB.Caption = "WORKSHEET"
xlst.cbtb1A.Visible = True
xlst.cbtb1B.Visible = False
xlst.cbtb1Alabel.Visible = True
xlst.cbtb1Alabel.Caption = "Start Row"
xlst.cbtb1Blabel.Visible = False
xlst.cbOptionButton1A.Caption = "Signature"
xlst.cbOptionButton1B.Caption = "No Signature"
xlst.cbOptionButton1A.Visible = True
xlst.cbOptionButton1A.Value = True
xlst.cbOptionButton1B.Visible = True
xlst.cbOptionButton1C.Visible = False
xlst.cbOptionButton1D.Visible = False
xlst.cbOptionButton1E.Visible = False
xlst.cbCommandButton1A.Visible = False
xlst.cbCommandButton1B.Visible = True
xlst.cbCommandButton1B.Caption = "Get file paths"
xlst.cbCommandButton1C.Visible = True
xlst.cbCommandButton1C.Caption = "Email Recipients"
xlst.CheckBox10.Visible = False
xlst.Repaint
End If
Else
'****process***
'error trapping here
xlst.toolboxinfobox.BackColor = vbMagenta
If Trim(xlst.cb1A) = "" Then
xlst.toolboxinfobox = "Select an open workbook from the dropdown"
xlst.cb1A.SetFocus
goodgo = 0
Exit Sub
End If
If Trim(xlst.cb1B) = "" Then
xlst.toolboxinfobox = "Select a worksheet to associate with " & xlst.cb1A
xlst.cb1B.SetFocus
goodgo = 0
Exit Sub
End If
'check if selected worksheet is configured for massmailer

Set wbk = Workbooks(xlst.cb1A.Text)
wsh = xlst.cb1B.Text
On Error Resume Next
tocol = wbk.Sheets(wsh).Cells.Find(What:="to:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
        MatchCase:=False, SearchFormat:=False).Column
i = wbk.Sheets(wsh).Cells.Find(What:="to:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
        MatchCase:=False, SearchFormat:=False).Row + 1
        
If tocol = 0 Then
errmsg = "*Unable to find TO: column on " & wsh
hit = 1
goodgo = 0
End If
cccol = wbk.Sheets(wsh).Cells.Find(What:="cc:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
        MatchCase:=False, SearchFormat:=False).Column
If cccol = 0 Then
errmsg = errmsg & vbCr & "*Unable to find CC: column " & wsh
hit = hit + 1
goodgo = 0
End If
bccol = wbk.Sheets(wsh).Cells.Find(What:="bcc:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
        MatchCase:=False, SearchFormat:=False).Column
If bccol = 0 Then
errmsg = errmsg & vbCr & "*Unable to find BCC: column " & wsh
hit = hit + 1
goodgo = 0
End If


If bccol = cccol Then
cccol = wbk.Sheets(wsh).Cells.Find(What:="cc:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Column
End If




subjcol = wbk.Sheets(wsh).Cells.Find(What:="subject:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
        MatchCase:=False, SearchFormat:=False).Column
If subjcol = 0 Then
errmsg = errmsg & vbCr & "*Unable to find SUBJECT: column " & wsh
hit = hit + 1
goodgo = 0
End If
bodcol = wbk.Sheets(wsh).Cells.Find(What:="body:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
        MatchCase:=False, SearchFormat:=False).Column
If bodcol = 0 Then
errmsg = errmsg & vbCr & "*Unable to find BODY: column " & wsh
hit = hit + 1
goodgo = 0
End If
attccol = wbk.Sheets(wsh).Cells.Find(What:="attachment:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
        MatchCase:=False, SearchFormat:=False).Column
If attccol = 0 Then
errmsg = errmsg & vbCr & "*Unable to find ATTACHMENT: column " & wsh
hit = hit + 1
goodgo = 0
End If


sndcol = wbk.Sheets(wsh).Cells.Find(What:="sender:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
        MatchCase:=False, SearchFormat:=False).Column


Resume Next

If errmsg <> "" Or cnt > 0 Then
errmsg = Mid(errmsg, InStr(errmsg, "*"), Len(errmsg)) ' remove leading vbcr
xlst.toolboxinfobox = "CORRECT (" & hit & ") ISSUES:" & vbCr & errmsg
xlst.toolboxinfobox.BackColor = vbMagenta
If (hit = 6) Then
ysetup = MsgBox("Would you like to set up needed headers starting at " & ActiveCell.Address & " on sheet: " & ActiveSheet.Name & "?", vbYesNo, "SETUP?")
If ysetup = vbYes Then
ActiveCell = "TO:"
ActiveCell.Offset(0, 1) = "CC:"
ActiveCell.Offset(0, 2) = "BCC:"
ActiveCell.Offset(0, 3) = "SUBJECT:"
ActiveCell.Offset(0, 4) = "BODY:"
ActiveCell.Offset(0, 5) = "ATTACHMENT:"
ActiveCell.Offset(0, 6) = "SENDER:"
xlst.toolboxinfobox = "Press whichever button you'd like to process."
xlst.toolboxinfobox.BackColor = vbCyan
End If
End If


Exit Sub
End If

'allow user to select start row
If IsNumeric(xlst.cbtb1A.Value) = True And xlst.cbtb1A.Value > 1 Then
i = xlst.cbtb1A.Value
End If
rowcnt = i

'get files path
If InStr(xlst.toolboxcaller.Text, "1B") > 0 Then 'button B
xlst.toolboxinfobox = "Select folder with files you want to import to " & wbk.Sheets(wsh).Name
xlst.toolboxinfobox.BackColor = vbYellow
StrFolder = GetFolder
If StrFolder = "" Then
Exit Sub
End If
'get files from selected folder
StrFile = Dir(StrFolder & "\*")
    Do While Len(StrFile) > 0
    filecnt = filecnt + 1
    
        wbk.Sheets(wsh).Cells(rowcnt, attccol) = StrFolder & "\" & StrFile
        rowcnt = rowcnt + 1
        StrFile = Dir
    Loop
'if no files in selected folder
If filecnt = 0 Then
xlst.toolboxinfobox = "No files in " & StrFolder
xlst.toolboxinfobox.BackColor = vbMagenta
Exit Sub
End If
xlst.toolboxinfobox = "Check that files match intended email recipients and press EMAIL RECIPIENTS."
xlst.toolboxinfobox.BackColor = vbYellow
Exit Sub
End If
'---------------


'test if outlook not running
Dim olapp As Object
On Error Resume Next
Set olapp = CreateObject("Outlook.Application")
'Set olapp = GetObject(, "Outlook.Application")
Set oOutlook = olapp.CreateItem(olMailItem)
On Error GoTo 0
If Not olapp Is Nothing Then
  'Outlook is open!
Const EMBED_ATTACHMENT As Long = 1454
lastrow = wbk.Sheets(wsh).Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
If lastrow < i Then
xlst.toolboxinfobox = "No email addresses indicated on " & wsh
xlst.toolboxinfobox.BackColor = vbMagenta
goodgo = 0
Exit Sub
End If

If goodgo = 1 Then
xlst.toolboxinfobox = "**Processing...Please wait**"
xlst.toolboxinfobox.BackColor = vbYellow
DoEvents


'**** initial error check pass ****
For x = i To lastrow

'check single file exist
If Trim(wbk.Sheets(wsh).Cells(x, attccol)) <> "" And InStr(wbk.Sheets(wsh).Cells(x, attccol), ",") = 0 Then 'check if file indicated
  If IsError(Dir(wbk.Sheets(wsh).Cells(x, attccol))) Then 'check if file exists
xlst.toolboxinfobox = "Row: " & x & vbCr & " File: " & wbk.Sheets(wsh).Cells(x, attccol) & vbCr & "does not exist" & vbCr & "Correct and run again"
xlst.toolboxinfobox.BackColor = vbMagenta
 Exit Sub
 End If
  If Dir(wbk.Sheets(wsh).Cells(x, attccol)) = "" Then 'check if file exists
xlst.toolboxinfobox = "Row: " & x & vbCr & " File: " & wbk.Sheets(wsh).Cells(x, attccol) & vbCr & "does not exist" & vbCr & "Correct and run again"
xlst.toolboxinfobox.BackColor = vbMagenta
 Exit Sub
 End If
 Else 'multiple files
 strarray = wbk.Sheets(wsh).Cells(x, attccol)
 strunbound = Split(strarray, ",")
 For Z = LBound(strunbound) To UBound(strunbound)
 If IsError(Dir(strunbound(Z))) Then 'check if file exists
xlst.toolboxinfobox = "Row: " & x & vbCr & " File: " & strunbound(Z) & vbCr & "does not exist" & vbCr & "Correct and run again"
xlst.toolboxinfobox.BackColor = vbMagenta
 Exit Sub
End If
If Dir(strunbound(Z)) = "" Then 'check if file exists
xlst.toolboxinfobox = "Row: " & x & vbCr & " File: " & strunbound(Z) & vbCr & "does not exist" & vbCr & "Correct and run again"
xlst.toolboxinfobox.BackColor = vbMagenta
 Exit Sub
 End If
Next Z
 End If
 
 
 
 'check subject line
 If Trim(wbk.Sheets(wsh).Cells(x, tocol)) <> "" And Trim(wbk.Sheets(wsh).Cells(x, subjcol)) = "" Then
xlst.toolboxinfobox = "Row: " & x & vbCr & " No subject indicated" & vbCr & "Correct and run again"
xlst.toolboxinfobox.BackColor = vbMagenta
 Exit Sub
 End If
 'check email addresses
If Trim(wbk.Sheets(wsh).Cells(x, tocol)) <> "" And (InStr(wbk.Sheets(wsh).Cells(x, tocol), "@") = 0 Or InStr(wbk.Sheets(wsh).Cells(x, tocol), ".") = 0) Then
xlst.toolboxinfobox = "Row: " & x & vbCr & " TO: Email address malformed" & vbCr & "Correct and run again"
xlst.toolboxinfobox.BackColor = vbMagenta
 Exit Sub
 End If
If Trim(wbk.Sheets(wsh).Cells(x, cccol)) <> "" And (InStr(wbk.Sheets(wsh).Cells(x, cccol), "@") = 0 Or InStr(wbk.Sheets(wsh).Cells(x, cccol), ".") = 0) Then
xlst.toolboxinfobox = "Row: " & x & vbCr & " CC: Email address malformed" & vbCr & "Correct and run again"
xlst.toolboxinfobox.BackColor = vbMagenta
 Exit Sub
 End If
If Trim(wbk.Sheets(wsh).Cells(x, bccol)) <> "" And (InStr(wbk.Sheets(wsh).Cells(x, bccol), "@") = 0 Or InStr(wbk.Sheets(wsh).Cells(x, bccol), ".") = 0) Then
xlst.toolboxinfobox = "Row: " & x & vbCr & " BCC: Email address malformed" & vbCr & "Correct and run again"
xlst.toolboxinfobox.BackColor = vbMagenta
 Exit Sub
 End If
 
 Next x
 
 
 'opitmize macro by disabling all processes that slow it down.
stime = Timer
'On Error GoTo err:
Application.ScreenUpdating = False
Application.Calculation = xlCalculationManual
Application.EnableEvents = False
Application.DisplayAlerts = False
  '****emailer****
  emailcnt = 0
  For x = i To lastrow
  If Trim(wbk.Sheets(wsh).Cells(x, tocol)) <> "" Then
DoEvents
Const stPath As String = "c:\Temp"
Const vaCopyTo As Variant = ""

stSubject = wbk.Sheets(wsh).Cells(x, subjcol)
vaMsg = wbk.Sheets(wsh).Cells(x, bodcol) & vbCr & vbCr
'stAttachment = stPath & "\" & stFileName & ".xls"
'Create the list of TO: recipients.
If InStr(wbk.Sheets(wsh).Cells(x, tocol), ",") = False And InStr(wbk.Sheets(wsh).Cells(x, tocol), ";") = False Then
 ToRecipients = wbk.Sheets(wsh).Cells(x, tocol)
  End If
If InStr(wbk.Sheets(wsh).Cells(x, tocol), ",") Then
 ToRecipients = wbk.Sheets(wsh).Cells(x, tocol)
  End If
If InStr(wbk.Sheets(wsh).Cells(x, tocol), ";") Then
  ToRecipients = wbk.Sheets(wsh).Cells(x, tocol)
  End If
 'Create the list of CC: recipients.
If InStr(wbk.Sheets(wsh).Cells(x, cccol), ",") = False And InStr(wbk.Sheets(wsh).Cells(x, cccol), ";") = False Then
 CCRecipients = wbk.Sheets(wsh).Cells(x, cccol)
  End If
If InStr(wbk.Sheets(wsh).Cells(x, cccol), ",") Then
 CCRecipients = wbk.Sheets(wsh).Cells(x, cccol)
  End If
If InStr(wbk.Sheets(wsh).Cells(x, cccol), ";") Then
  CCRecipients = wbk.Sheets(wsh).Cells(x, cccol)
  End If
 'Create the list of BCC: recipients.
If InStr(wbk.Sheets(wsh).Cells(x, bccol), ",") = False And InStr(wbk.Sheets(wsh).Cells(x, bccol), ";") = False Then
 BCCRecipients = wbk.Sheets(wsh).Cells(x, bccol)
  End If
If InStr(wbk.Sheets(wsh).Cells(x, bccol), ",") Then
 BCCRecipients = wbk.Sheets(wsh).Cells(x, bccol)
  End If
If InStr(wbk.Sheets(wsh).Cells(x, bccol), ";") Then
  BCCRecipients = wbk.Sheets(wsh).Cells(x, bccol)
  End If
 If sndcol <> 0 Then
 If Trim(wbk.Sheets(wsh).Cells(x, sndcol)) <> "" Then
 If InStr(wbk.Sheets(wsh).Cells(x, sndcol), "@") > 1 Then
 If InStr(wbk.Sheets(wsh).Cells(x, sndcol), ".") > 1 Then
 senderstr = wbk.Sheets(wsh).Cells(x, sndcol)
 End If
 End If
 End If
 End If
  
  
  invemail = invemail + Len(wbk.Sheets(wsh).Cells(x, tocol)) - Len(Application.Substitute(wbk.Sheets(wsh).Cells(x, tocol), "@", "")) 'count individual to email addresses
  invemail = invemail + Len(wbk.Sheets(wsh).Cells(x, cccol)) - Len(Application.Substitute(wbk.Sheets(wsh).Cells(x, cccol), "@", "")) 'count individual cc email addresses
  invemail = invemail + Len(wbk.Sheets(wsh).Cells(x, bccol)) - Len(Application.Substitute(wbk.Sheets(wsh).Cells(x, bccol), "@", "")) 'count individual bcc email addresses
   emailcnt = emailcnt + 1
 imAttachment = wbk.Sheets(wsh).Cells(x, attccol)
 
 'MsgBox "TO: " & ToRecipients & vbCr & "CC: " & CCRecipients & vbCr & "SU: " & stSubject & vbCr & "BO: " & vbCr & vaMsg & "AT: " & imAttachment
  
  Call SendMessage(ToRecipients, CCRecipients, BCCRecipients, stSubject, vaMsg, imAttachment, senderstr)
  

 
 End If
 
 
 '***end emailer***
  
    Next x
    
    
Application.StatusBar = emailcnt & " total emails sent to " & invemail & " addresses" & vbCr & "COMPLETED IN " & Round(Timer - stime, 1) & " seconds"

xlst.toolboxinfobox = Application.StatusBar & vbCr & "Check SENT box."
xlst.toolboxinfobox.BackColor = vbGreen
    
    'Re-enable screenupdating (before END SUB)
Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic
Application.EnableEvents = True
Application.DisplayAlerts = True
Application.StatusBar = False
Exit Sub
Else
  'Outlook not open
  'Re-enable screenupdating (before END SUB)
Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic
Application.EnableEvents = True
Application.DisplayAlerts = True
Application.StatusBar = False
xlst.toolboxinfobox = "Outlook Email application must be open"
xlst.toolboxinfobox.BackColor = vbMagenta
Exit Sub
End If
End If
End If
End Sub
Sub SendMessage(myRecipient As String, mycc As String, mybcc As String, mySubject As String, Optional myBody As String, Optional myFileName As String, Optional mySender As String)

On Error Resume Next

Dim myObject As Object
Dim myItem As Object
Dim strarray As String
Dim strunbound() As String
Dim Z As Long

Set myObject = CreateObject("Outlook.Application")
Set myItem = myObject.CreateItem(0)

With myItem
.Subject = mySubject
.to = myRecipient
.cc = mycc
.bcc = mybcc
If Trim(mySender) <> "" Then
.SentOnBehalfOfName = mySender
End If
If xlst.cbOptionButton1A.Value = True Or xlst.cbframe1.Caption = "Data Divider" Then
.display
End If
If Trim(myBody) <> "" Then
'.Body = myBody

'sPath = Dir(Environ("appdata") & "\Microsoft\Signatures\*.htm", vbNormal)
        'sPath = Environ("appdata") & "\Microsoft\Signatures\" & sPath
        'sSignat = GetSignature(sPath)
        'MsgBox sSignat
      '.HTMLBody = strbody & String(4, vbCrLf) & sSignat


.HTMLBody = myBody & "<br>" & .HTMLBody
End If

'attach one file
If Trim(myFileName) <> "" Then
If InStr(myFileName, ",") = 0 Then
If Dir(myFileName) <> "" Then
.Attachments.Add (myFileName)
End If
Else 'multiple files
strarray = myFileName
 strunbound = Split(myFileName, ",")
 For Z = LBound(strunbound) To UBound(strunbound)
 .Attachments.Add (strunbound(Z))
Next Z
End If
End If


.Send
End With

Set myItem = Nothing
Set myObject = Nothing
End Sub
Sub datadiv_old()
'[[[[[[[[[WARNING this subroutine utilizes subroutine dotabif -- do NOT delete dotabif routine]]]]
Dim wbk As Workbook
Dim ws As Worksheet
Dim wsh As String
Dim mtcwbk As Workbook
Dim hit As Long
Dim mtcadd As String
Dim mtccol As Long
Dim mtcrow As Long
Dim tocol As Long
Dim cccol As Long
Dim bcccol As Long
Dim subjcol As Long
Dim bodcol As Long
Dim attccol As Long
Dim errmsg As String
Dim wbkstr As String
Dim wsstr As String
Dim divstr As String
Dim x As Long
Dim i As Long
Dim lastcol As Long
Dim cnt As Long
Dim oOutlook As Object
Dim stSubject As String
Dim goodgo As Long
Dim startrow As Long
goodgo = 1
If xlst.MultiPage1.Value = 0 Then 'if the toolbox tab not selected
Call toolframereset
On Error Resume Next
For Each wbk In Workbooks
            'loop through the Open workbooks
            If wbk.Name = ThisWorkbook.Name Or Left(wbk.Name, 8) = "personal" Then
                'exclude this workbook from the Loop
                Else
                xlst.cb1A.AddItem wbk.Name
                cnt = cnt + 1
                End If
                Next
                Resume Next
If cnt = 0 Then
xlst.toolsinfobox.BackColor = vbMagenta
xlst.toolsinfobox = "No other open workbooks"
xlst.MultiPage1.Value = 0
Exit Sub
Else
xlst.toolboxinfobox = "Select which workbook contains the DATA to divide and email." & vbCr & "(Tool will automatically look for email recipients workbook)" & vbCr & "COLUMN is the column on the DATA sheet which will be used to divide the sheet." & vbCr & "**ALERT** May want to send self test mail first. Can use HTML tags in BODY."
xlst.cb1dropA.Visible = True
xlst.cb1dropB.Visible = True
xlst.cb1dropA.Caption = "WORKBOOK"
xlst.cb1dropB.Caption = "WORKSHEET"
xlst.cb1A.Visible = True
xlst.cb1B.Visible = True
xlst.cbtb1A.Visible = True
xlst.cbtb1B.Visible = False
xlst.cbtb1Alabel.Visible = True
xlst.cbtb1Alabel.Caption = "COLUMN"
xlst.cbtb1Blabel.Visible = False
xlst.cbOptionButton1A.Visible = True
xlst.cbOptionButton1B.Visible = True
xlst.cbOptionButton1C.Visible = True
xlst.cbOptionButton1D.Visible = True
xlst.cbOptionButton1E.Visible = True
xlst.cbCommandButton1A.Visible = False
xlst.cbCommandButton1B.Visible = True
xlst.cbCommandButton1B.Caption = "Divide Only"
xlst.cbCommandButton1C.Visible = True
xlst.cbCommandButton1C.Caption = "Email Recipients"
xlst.CheckBox10.Visible = False
xlst.Repaint
End If
Else
'****process***
'error trapping here
xlst.toolboxinfobox.BackColor = vbMagenta
If Trim(xlst.cb1A) = "" Then
xlst.toolboxinfobox = "Select an open workbook from the dropdown"
xlst.cb1A.SetFocus
goodgo = 0
Exit Sub
End If
If Trim(xlst.cb1B) = "" Then
xlst.toolboxinfobox = "Select a worksheet to associate with " & xlst.cb1A
xlst.cb1B.SetFocus
goodgo = 0
Exit Sub
End If


'*****data divide only****
If InStr(xlst.toolboxcaller.Text, "1B") > 0 Then 'button B
stime = Timer
xlst.toolboxinfobox = "**Processing...Please wait**"
xlst.toolboxinfobox.BackColor = vbYellow
DoEvents
mtcadd = "" 'reset
On Error Resume Next
For Each wbk In Workbooks
            'loop through the Open workbooks
            If wbk.Name = ThisWorkbook.Name Or Left(wbk.Name, 8) = "personal" Then
                'exclude this workbook from the Loop
                Else
                For Each ws In wbk.Sheets
                If Trim(mtcadd) = "" Then
                mtcadd = ws.Cells.Find(What:="match:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Address
        wbkstr = wbk.Name
        wsstr = ws.Name
        End If
                Next
                End If
                Next
                Resume Next
 'check for column
 If Trim(xlst.cbtb1A.Text) = "" Then
 errmsg = "*Input a column letter to divide by"
 hit = hit + 1
goodgo = 0
End If
If xlst.cbOptionButton1A.Value = 0 And xlst.cbOptionButton1B.Value = 0 And xlst.cbOptionButton1C.Value = 0 And xlst.cbOptionButton1D.Value = 0 And xlst.cbOptionButton1E.Value = 0 Then
errmsg = errmsg & vbCr & "*Select a critera. Exact Match, Contains, Begins with..."
hit = hit + 1
goodgo = 0
End If
       
       
'checking for emailing purposes only
If InStr(xlst.toolboxcaller.Text, "1C") > 0 Then 'button C
'if no open workbook has a sheet with email refs configured
If Trim(mtcadd) = "" Then
xlst.toolboxinfobox = "No open workbook has a sheet configured for matching & emailing references; MATCH: TO: CC: BCC: SUBJECT: BODY: ATTACHMENT:"
xlst.toolboxinfobox.BackColor = vbMagenta
Exit Sub
End If
End If

'display error messages if any
If errmsg <> "" Or cnt > 0 Then
errmsg = Mid(errmsg, InStr(errmsg, "*"), Len(errmsg)) ' remove leading vbcr
xlst.toolboxinfobox = "CORRECT (" & hit & ") ISSUES:" & vbCr & errmsg
xlst.toolboxinfobox.BackColor = vbMagenta
Exit Sub
End If



divstr = "" 'reset
Set wbk = Workbooks(wbkstr)
wsh = wsstr
mtccol = Range(mtcadd).Column
mtcrow = Range(mtcadd).Row + 1
lastrow = wbk.Sheets(wsh).Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
For i = mtcrow To lastrow
If Trim(wbk.Sheets(wsh).Cells(i, mtccol)) <> "" Then
divstr = divstr & "," & wbk.Sheets(wsh).Cells(i, mtccol)
End If
Next i
xlst.cbtb1B = divstr
Call dotabif
xlst.toolboxinfobox = "Data Divider COMPLETED IN " & Round(Timer - stime, 1) & " seconds"
xlst.toolboxinfobox.BackColor = vbGreen
Exit Sub
End If
'=======DO EMAILING===========

If InStr(xlst.toolboxcaller.Text, "1C") > 0 Then 'button C
'check if any open worksheet is configured for massmailer
mtcadd = "" 'reset
wbkstr = ""
wsstr = ""
On Error Resume Next
For Each wbk In Workbooks
            'loop through the Open workbooks
            If wbk.Name = ThisWorkbook.Name Or Left(wbk.Name, 8) = "personal" Then
                'exclude this workbook from the Loop
                Else
                For Each ws In wbk.Sheets
                If Trim(mtcadd) = "" Then
                mtcadd = ws.Cells.Find(What:="match:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Address
        wbkstr = wbk.Name
        wsstr = ws.Name
        End If
                Next
                End If
                Next
                Resume Next
                
'if no open workbook has a sheet with email refs configured
If Trim(mtcadd) = "" Then
xlst.toolboxinfobox = "No open workbook has a sheet configured for matching & emailing references; MATCH: TO: CC: BCC: SUBJECT: BODY: ATTACHMENT:"
xlst.toolboxinfobox.BackColor = vbMagenta
Exit Sub
End If

Set wbk = Workbooks(wbkstr)
wsh = wsstr
On Error Resume Next
tocol = wbk.Sheets(wsh).Cells.Find(What:="to:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Column
i = wbk.Sheets(wsh).Cells.Find(What:="to:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Row + 1
        
If tocol = 0 Then
errmsg = "*Unable to find TO: column on " & wsh
hit = 1
goodgo = 0
End If
cccol = wbk.Sheets(wsh).Cells.Find(What:="cc:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Column
If cccol = 0 Then
errmsg = errmsg & vbCr & "*Unable to find CC: column " & wsh
hit = hit + 1
goodgo = 0
End If
bccol = wbk.Sheets(wsh).Cells.Find(What:="bcc:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Column
If bccol = 0 Then
errmsg = errmsg & vbCr & "*Unable to find BCC: column " & wsh
hit = hit + 1
goodgo = 0
End If


If bccol = cccol Then
cccol = wbk.Sheets(wsh).Cells.Find(What:="cc:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
        MatchCase:=False, SearchFormat:=False).Column
End If

subjcol = wbk.Sheets(wsh).Cells.Find(What:="subject:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Column
If subjcol = 0 Then
errmsg = errmsg & vbCr & "*Unable to find SUBJECT: column " & wsh
hit = hit + 1
goodgo = 0
End If
bodcol = wbk.Sheets(wsh).Cells.Find(What:="body:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Column
If bodcol = 0 Then
errmsg = errmsg & vbCr & "*Unable to find BODY: column " & wsh
hit = hit + 1
goodgo = 0
End If
attccol = wbk.Sheets(wsh).Cells.Find(What:="attachment:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Column
If attccol = 0 Then
errmsg = errmsg & vbCr & "*Unable to find ATTACHMENT: column " & wsh
hit = hit + 1
goodgo = 0
End If

If xlst.cbOptionButton1B.Value = 0 And xlst.cbOptionButton1C.Value = 0 And xlst.cbOptionButton1D.Value = 0 And xlst.cbOptionButton1E.Value = 0 Then
errmsg = errmsg & vbCr & "*Select a critera. Exact Match, Contains, Begins with..."
hit = hit + 1
goodgo = 0
End If
Resume Next


If errmsg <> "" Or cnt > 0 Then
errmsg = Mid(errmsg, InStr(errmsg, "*"), Len(errmsg)) ' remove leading vbcr
xlst.toolboxinfobox = "CORRECT (" & hit & ") ISSUES:" & vbCr & errmsg
xlst.toolboxinfobox.BackColor = vbMagenta
Exit Sub
End If


'test if outlook not running
Dim olapp As Object
On Error Resume Next
Set olapp = GetObject(, "Outlook.Application")
On Error GoTo 0
If Not olapp Is Nothing Then
  'Outlook is open!
Const EMBED_ATTACHMENT As Long = 1454
lastrow = wbk.Sheets(wsh).Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
If lastrow < i Then
xlst.toolboxinfobox = "No email addresses indicated on " & wsh
xlst.toolboxinfobox.BackColor = vbMagenta
goodgo = 0
Exit Sub
End If

If goodgo = 1 Then
divstr = "" 'reset
mtccol = Range(mtcadd).Column
mtcrow = Range(mtcadd).Row + 1
lastrow = wbk.Sheets(wsh).Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
For i = mtcrow To lastrow
If Trim(wbk.Sheets(wsh).Cells(i, mtccol)) <> "" Then
divstr = divstr & "," & wbk.Sheets(wsh).Cells(i, mtccol)
End If
Next i
xlst.cbtb1B = divstr
Call dotabif
xlst.toolboxinfobox = "**Processing...Please wait**"
xlst.toolboxinfobox.BackColor = vbYellow
DoEvents

'**** initial error check pass ****
For x = mtcrow To lastrow
'check file exist
If Trim(wbk.Sheets(wsh).Cells(x, attccol)) <> "" Then 'if file indicated
  If Dir(wbk.Sheets(wsh).Cells(x, attccol)) = "" Then 'if file exists
xlst.toolboxinfobox = "Row: " & x & vbCr & " File: " & wbk.Sheets(wsh).Cells(x, attccol) & vbCr & "does not exist" & vbCr & "Correct and run again"
xlst.toolboxinfobox.BackColor = vbMagenta
 Exit Sub
 End If
 End If
 'check subject line
 If Trim(wbk.Sheets(wsh).Cells(x, tocol)) <> "" And Trim(wbk.Sheets(wsh).Cells(x, subjcol)) = "" Then
xlst.toolboxinfobox = "Row: " & x & vbCr & " No subject indicated" & vbCr & "Correct and run again"
xlst.toolboxinfobox.BackColor = vbMagenta
 Exit Sub
 End If
 Next x
 
 
 'opitmize macro by disabling all processes that slow it down.
stime = Timer
'On Error GoTo err:
Application.ScreenUpdating = False
Application.Calculation = xlCalculationManual
Application.EnableEvents = False
Application.DisplayAlerts = False
  '****emailer****
  emailcnt = 0
  wbkstr = xlst.cb1A.Text
Set mtcwbk = Workbooks(wbkstr)
  'MsgBox "mtcrow: " & mtcrow & " tocol: " & tocol & " cc: " & cccol & " bcc: " & bccol & " subj: " & subjcol & " bodcol: " & bodcol & " attccol: " & attccol
  For x = mtcrow To lastrow
  If Trim(wbk.Sheets(wsh).Cells(x, tocol)) <> "" Then
DoEvents
Const stPath As String = "c:\Temp"
Const vaCopyTo As Variant = ""

stSubject = wbk.Sheets(wsh).Cells(x, subjcol)
vaMsg = wbk.Sheets(wsh).Cells(x, bodcol) & vbCr & vbCr
'Create the list of TO: recipients.
If InStr(wbk.Sheets(wsh).Cells(x, tocol), ",") = False And InStr(wbk.Sheets(wsh).Cells(x, tocol), ";") = False Then
 ToRecipients = Split(wbk.Sheets(wsh).Cells(x, tocol), "")
  End If
If InStr(wbk.Sheets(wsh).Cells(x, tocol), ",") Then
 ToRecipients = Split(wbk.Sheets(wsh).Cells(x, tocol), ",")
  End If
If InStr(wbk.Sheets(wsh).Cells(x, tocol), ";") Then
  ToRecipients = Split(wbk.Sheets(wsh).Cells(x, tocol), ";")
  End If
 'Create the list of CC: recipients.
If InStr(wbk.Sheets(wsh).Cells(x, cccol), ",") = False And InStr(wbk.Sheets(wsh).Cells(x, cccol), ";") = False Then
 CCRecipients = Split(wbk.Sheets(wsh).Cells(x, cccol), "")
  End If
If InStr(wbk.Sheets(wsh).Cells(x, cccol), ",") Then
 CCRecipients = Split(wbk.Sheets(wsh).Cells(x, cccol), ",")
  End If
If InStr(wbk.Sheets(wsh).Cells(x, cccol), ";") Then
  CCRecipients = Split(wbk.Sheets(wsh).Cells(x, cccol), ";")
  End If
 'Create the list of BCC: recipients.
If InStr(wbk.Sheets(wsh).Cells(x, bccol), ",") = False And InStr(wbk.Sheets(wsh).Cells(x, bccol), ";") = False Then
 BCCRecipients = Split(wbk.Sheets(wsh).Cells(x, bccol), "")
  End If
If InStr(wbk.Sheets(wsh).Cells(x, bccol), ",") Then
 BCCRecipients = Split(wbk.Sheets(wsh).Cells(x, bccol), ",")
  End If
If InStr(wbk.Sheets(wsh).Cells(x, bccol), ";") Then
  BCCRecipients = Split(wbk.Sheets(wsh).Cells(x, bccol), ";")
  End If
  
  invemail = invemail + Len(wbk.Sheets(wsh).Cells(x, tocol)) - Len(Application.Substitute(wbk.Sheets(wsh).Cells(x, tocol), "@", "")) 'count individual to email addresses
  invemail = invemail + Len(wbk.Sheets(wsh).Cells(x, cccol)) - Len(Application.Substitute(wbk.Sheets(wsh).Cells(x, cccol), "@", "")) 'count individual cc email addresses
  invemail = invemail + Len(wbk.Sheets(wsh).Cells(x, bccol)) - Len(Application.Substitute(wbk.Sheets(wsh).Cells(x, bccol), "@", "")) 'count individual bcc email addresses
   'emailcnt = emailcnt + 1
   
  'GET DEFAULT EMAIL SIGNATURE
    Signature = Environ("appdata") & "\Microsoft\Signatures\"
    If Dir(Signature, vbDirectory) <> vbNullString Then
        Signature = Signature & Dir$(Signature & "*.htm")
    Else:
        Signature = ""
    End If
    Signature = CreateObject("Scripting.FileSystemObject").GetFile(Signature).OpenAsTextStream(1, -2).readall
  Set olapp = CreateObject("Outlook.Application")
 Set OlMail = olapp.CreateItem(olMailItem)

 
  On Error Resume Next
    With OlMail
    For Each ToRecipient In ToRecipients
        .to = .to & ";" & ToRecipient
        Next ToRecipient
    For Each CCRecipient In CCRecipients
        .cc = .cc & ";" & CCRecipient
        Next CCRecipient
        For Each BCCRecipient In BCCRecipients
        .bcc = .bcc & ";" & BCCRecipient
        Next BCCRecipient
        .Subject = stSubject
        .HTMLBody = vaMsg & Signature
    End With
    On Error GoTo 0
 
 
 OlMail.Subject = stSubject
 OlMail.HTMLBody = vaMsg & Signature
 
 'create and attach new sheet
wsstr = wbk.Sheets(wsh).Cells(x, mtccol)
If Trim(wsstr) <> "" Then
mtcwbk.Sheets(wsstr).Copy
stFileName = wsstr
stAttachment = stPath & "\" & stFileName & ".xls"
 'Save and close the temporarily workbook.
  With ActiveWorkbook
    .SaveAs stAttachment, FileFormat:=56
    .Close
  End With


OlMail.Attachments.Add stAttachment
  
 'image attaching
  If Trim(wbk.Sheets(wsh).Cells(x, attccol)) <> "" Then 'if file indicated
  If Dir(wbk.Sheets(wsh).Cells(x, attccol)) <> "" Then 'if file exists
  On Error Resume Next
 imAttachment = wbk.Sheets(wsh).Cells(x, attccol)
 OlMail.Attachments.Add imAttachment
 Resume Next
  End If
  End If
 OlMail.Send
 End If
 'Delete the temporarily workbook.
 On Error Resume Next
 emailcnt = emailcnt + 1
  Kill stAttachment
  Resume Next
 End If
 '***end emailer***
  
    Next x

    
Application.StatusBar = emailcnt & " total emails sent to " & invemail & " addresses" & vbCr & "COMPLETED IN " & Round(Timer - stime, 1) & " seconds"

xlst.toolboxinfobox = Application.StatusBar & vbCr & "Check SENT box."
xlst.toolboxinfobox.BackColor = vbGreen
    
    'Re-enable screenupdating (before END SUB)
Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic
Application.EnableEvents = True
Application.DisplayAlerts = True
Application.StatusBar = False
Exit Sub
Else
  'Outlook not open
  'Re-enable screenupdating (before END SUB)
Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic
Application.EnableEvents = True
Application.DisplayAlerts = True
Application.StatusBar = False
xlst.toolboxinfobox = "Outlook Email application must be open"
xlst.toolboxinfobox.BackColor = vbMagenta
Exit Sub
End If
End If
End If
End If
End Sub
Sub datadiv()
'[[[[[[[[[WARNING this subroutine utilizes subroutine dotabif -- do NOT delete dotabif routine]]]]
Dim wbk As Workbook
Dim ws As Worksheet
Dim wsh As String
Dim mtcwbk As Workbook
Dim hit As Long
Dim mtcadd As String
Dim mtccol As Long
Dim mtcrow As Long
Dim tocol As Long
Dim cccol As Long
Dim bcccol As Long
Dim subjcol As Long
Dim bodcol As Long
Dim attccol As Long
Dim errmsg As String
Dim wbkstr As String
Dim wsstr As String
Dim divstr As String
Dim x As Long
Dim i As Long
Dim lastcol As Long
Dim cnt As Long
Dim oOutlook As Object
Dim goodgo As Long
Dim startrow As Long
Dim ToRecipients As String
Dim CCRecipients As String
Dim BCCRecipients As String
Dim stSubject As String
Dim vaMsg As String
Dim imAttachment As String
goodgo = 1
If xlst.MultiPage1.Value = 0 Then 'if the toolbox tab not selected
Call toolframereset
On Error Resume Next
For Each wbk In Workbooks
            'loop through the Open workbooks
            If wbk.Name = ThisWorkbook.Name Or Left(wbk.Name, 8) = "personal" Then
                'exclude this workbook from the Loop
                Else
                xlst.cb1A.AddItem wbk.Name
                cnt = cnt + 1
                End If
                Next
                Resume Next
If cnt = 0 Then
xlst.toolsinfobox.BackColor = vbMagenta
xlst.toolsinfobox = "No other open workbooks"
xlst.MultiPage1.Value = 0
Exit Sub
Else
xlst.toolboxinfobox = "Select which workbook contains the DATA to divide and email." & vbCr & "(Tool will automatically look for email recipients workbook)" & vbCr & "COLUMN is the column on the DATA sheet which will be used to divide the sheet." & vbCr & "**ALERT** May want to send self test mail first. Can use HTML tags in BODY."
xlst.cb1dropA.Visible = True
xlst.cb1dropB.Visible = True
xlst.cb1dropA.Caption = "WORKBOOK"
xlst.cb1dropB.Caption = "WORKSHEET"
xlst.cb1A.Visible = True
xlst.cb1B.Visible = True
xlst.cbtb1A.Visible = True
xlst.cbtb1B.Visible = False
xlst.cbtb1Alabel.Visible = True
xlst.cbtb1Alabel.Caption = "COLUMN"
xlst.cbtb1Blabel.Visible = False
xlst.cbOptionButton1A.Visible = True
xlst.cbOptionButton1B.Visible = True
xlst.cbOptionButton1C.Visible = True
xlst.cbOptionButton1D.Visible = True
xlst.cbOptionButton1E.Visible = True
xlst.cbCommandButton1A.Visible = False
xlst.cbCommandButton1B.Visible = True
xlst.cbCommandButton1B.Caption = "Divide Only"
xlst.cbCommandButton1C.Visible = True
xlst.cbCommandButton1C.Caption = "Email Recipients"
xlst.CheckBox10.Visible = False
xlst.Repaint
End If
Else
'****process***
'error trapping here
xlst.toolboxinfobox.BackColor = vbMagenta
If Trim(xlst.cb1A) = "" Then
xlst.toolboxinfobox = "Select an open workbook from the dropdown"
xlst.cb1A.SetFocus
goodgo = 0
Exit Sub
End If
If Trim(xlst.cb1B) = "" Then
xlst.toolboxinfobox = "Select a worksheet to associate with " & xlst.cb1A
xlst.cb1B.SetFocus
goodgo = 0
Exit Sub
End If


'*****data divide only****
If InStr(xlst.toolboxcaller.Text, "1B") > 0 Then 'button B
stime = Timer
xlst.toolboxinfobox = "**Processing...Please wait**"
xlst.toolboxinfobox.BackColor = vbYellow
DoEvents
mtcadd = "" 'reset
On Error Resume Next
For Each wbk In Workbooks
            'loop through the Open workbooks
            If wbk.Name = ThisWorkbook.Name Or Left(wbk.Name, 8) = "personal" Then
                'exclude this workbook from the Loop
                Else
                For Each ws In wbk.Sheets
                If Trim(mtcadd) = "" Then
                mtcadd = ws.Cells.Find(What:="match:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Address
        wbkstr = wbk.Name
        wsstr = ws.Name
        End If
                Next
                End If
                Next
                Resume Next
 'check for column
 If Trim(xlst.cbtb1A.Text) = "" Then
 errmsg = "*Input a column letter to divide by"
 hit = hit + 1
goodgo = 0
End If
If xlst.cbOptionButton1A.Value = 0 And xlst.cbOptionButton1B.Value = 0 And xlst.cbOptionButton1C.Value = 0 And xlst.cbOptionButton1D.Value = 0 And xlst.cbOptionButton1E.Value = 0 Then
errmsg = errmsg & vbCr & "*Select a critera. Exact Match, Contains, Begins with..."
hit = hit + 1
goodgo = 0
End If
       
       
'checking for emailing purposes only
If InStr(xlst.toolboxcaller.Text, "1C") > 0 Then 'button C
'if no open workbook has a sheet with email refs configured
If Trim(mtcadd) = "" Then
xlst.toolboxinfobox = "No open workbook has a sheet configured for matching & emailing references; MATCH: TO: CC: BCC: SUBJECT: BODY: ATTACHMENT:"
xlst.toolboxinfobox.BackColor = vbMagenta
Exit Sub
End If
End If

'display error messages if any
If errmsg <> "" Or cnt > 0 Then
errmsg = Mid(errmsg, InStr(errmsg, "*"), Len(errmsg)) ' remove leading vbcr
xlst.toolboxinfobox = "CORRECT (" & hit & ") ISSUES:" & vbCr & errmsg
xlst.toolboxinfobox.BackColor = vbMagenta
Exit Sub
End If



divstr = "" 'reset
Set wbk = Workbooks(wbkstr)
wsh = wsstr
mtccol = Range(mtcadd).Column
mtcrow = Range(mtcadd).Row + 1
lastrow = wbk.Sheets(wsh).Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
For i = mtcrow To lastrow
If Trim(wbk.Sheets(wsh).Cells(i, mtccol)) <> "" Then
divstr = divstr & "," & wbk.Sheets(wsh).Cells(i, mtccol)
End If
Next i
xlst.cbtb1B = divstr
Call dotabif
xlst.toolboxinfobox = "Data Divider COMPLETED IN " & Round(Timer - stime, 1) & " seconds"
xlst.toolboxinfobox.BackColor = vbGreen
Exit Sub
End If
'=======DO EMAILING===========

If InStr(xlst.toolboxcaller.Text, "1C") > 0 Then 'button C
'check if any open worksheet is configured for massmailer
mtcadd = "" 'reset
wbkstr = ""
wsstr = ""
On Error Resume Next
For Each wbk In Workbooks
            'loop through the Open workbooks
            If wbk.Name = ThisWorkbook.Name Or Left(wbk.Name, 8) = "personal" Then
                'exclude this workbook from the Loop
                Else
                For Each ws In wbk.Sheets
                If Trim(mtcadd) = "" Then
                mtcadd = ws.Cells.Find(What:="match:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Address
        wbkstr = wbk.Name
        wsstr = ws.Name
        End If
                Next
                End If
                Next
                Resume Next
                
'if no open workbook has a sheet with email refs configured
If Trim(mtcadd) = "" Then
xlst.toolboxinfobox = "No open workbook has a sheet configured for matching & emailing references; MATCH: TO: CC: BCC: SUBJECT: BODY: ATTACHMENT:"
xlst.toolboxinfobox.BackColor = vbMagenta
Exit Sub
End If

Set wbk = Workbooks(wbkstr)
wsh = wsstr
On Error Resume Next
tocol = wbk.Sheets(wsh).Cells.Find(What:="to:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Column
i = wbk.Sheets(wsh).Cells.Find(What:="to:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Row + 1
        
If tocol = 0 Then
errmsg = "*Unable to find TO: column on " & wsh
hit = 1
goodgo = 0
End If
cccol = wbk.Sheets(wsh).Cells.Find(What:="cc:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Column
If cccol = 0 Then
errmsg = errmsg & vbCr & "*Unable to find CC: column " & wsh
hit = hit + 1
goodgo = 0
End If
bccol = wbk.Sheets(wsh).Cells.Find(What:="bcc:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Column
If bccol = 0 Then
errmsg = errmsg & vbCr & "*Unable to find BCC: column " & wsh
hit = hit + 1
goodgo = 0
End If


If bccol = cccol Then
cccol = wbk.Sheets(wsh).Cells.Find(What:="cc:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, _
        MatchCase:=False, SearchFormat:=False).Column
End If

subjcol = wbk.Sheets(wsh).Cells.Find(What:="subject:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Column
If subjcol = 0 Then
errmsg = errmsg & vbCr & "*Unable to find SUBJECT: column " & wsh
hit = hit + 1
goodgo = 0
End If
bodcol = wbk.Sheets(wsh).Cells.Find(What:="body:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Column
If bodcol = 0 Then
errmsg = errmsg & vbCr & "*Unable to find BODY: column " & wsh
hit = hit + 1
goodgo = 0
End If
attccol = wbk.Sheets(wsh).Cells.Find(What:="attachment:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Column
If attccol = 0 Then
errmsg = errmsg & vbCr & "*Unable to find ATTACHMENT: column " & wsh
hit = hit + 1
goodgo = 0
End If

If xlst.cbOptionButton1B.Value = 0 And xlst.cbOptionButton1C.Value = 0 And xlst.cbOptionButton1D.Value = 0 And xlst.cbOptionButton1E.Value = 0 Then
errmsg = errmsg & vbCr & "*Select a critera. Exact Match, Contains, Begins with..."
hit = hit + 1
goodgo = 0
End If
Resume Next


If errmsg <> "" Or cnt > 0 Then
errmsg = Mid(errmsg, InStr(errmsg, "*"), Len(errmsg)) ' remove leading vbcr
xlst.toolboxinfobox = "CORRECT (" & hit & ") ISSUES:" & vbCr & errmsg
xlst.toolboxinfobox.BackColor = vbMagenta
Exit Sub
End If


'test if outlook not running
Dim olapp As Object
On Error Resume Next
Set olapp = GetObject(, "Outlook.Application")
On Error GoTo 0
If Not olapp Is Nothing Then
  'Outlook is open!
Const EMBED_ATTACHMENT As Long = 1454
lastrow = wbk.Sheets(wsh).Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
If lastrow < i Then
xlst.toolboxinfobox = "No email addresses indicated on " & wsh
xlst.toolboxinfobox.BackColor = vbMagenta
goodgo = 0
Exit Sub
End If

If goodgo = 1 Then
divstr = "" 'reset
mtccol = Range(mtcadd).Column
mtcrow = Range(mtcadd).Row + 1
lastrow = wbk.Sheets(wsh).Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
For i = mtcrow To lastrow
If Trim(wbk.Sheets(wsh).Cells(i, mtccol)) <> "" Then
divstr = divstr & "," & wbk.Sheets(wsh).Cells(i, mtccol)
End If
Next i
xlst.cbtb1B = divstr
Call dotabif
xlst.toolboxinfobox = "**Processing...Please wait**"
xlst.toolboxinfobox.BackColor = vbYellow
DoEvents

'**** initial error check pass ****
For x = mtcrow To lastrow
'check file exist
If Trim(wbk.Sheets(wsh).Cells(x, attccol)) <> "" Then 'if file indicated
  If Dir(wbk.Sheets(wsh).Cells(x, attccol)) = "" Then 'if file exists
xlst.toolboxinfobox = "Row: " & x & vbCr & " File: " & wbk.Sheets(wsh).Cells(x, attccol) & vbCr & "does not exist" & vbCr & "Correct and run again"
xlst.toolboxinfobox.BackColor = vbMagenta
 Exit Sub
 End If
 End If
 'check subject line
 If Trim(wbk.Sheets(wsh).Cells(x, tocol)) <> "" And Trim(wbk.Sheets(wsh).Cells(x, subjcol)) = "" Then
xlst.toolboxinfobox = "Row: " & x & vbCr & " No subject indicated" & vbCr & "Correct and run again"
xlst.toolboxinfobox.BackColor = vbMagenta
 Exit Sub
 End If
 Next x
 
 
 'opitmize macro by disabling all processes that slow it down.
stime = Timer
'On Error GoTo err:
Application.ScreenUpdating = False
Application.Calculation = xlCalculationManual
Application.EnableEvents = False
Application.DisplayAlerts = False
  '****emailer****
  emailcnt = 0
  wbkstr = xlst.cb1A.Text
Set mtcwbk = Workbooks(wbkstr)
  'MsgBox "mtcrow: " & mtcrow & " tocol: " & tocol & " cc: " & cccol & " bcc: " & bccol & " subj: " & subjcol & " bodcol: " & bodcol & " attccol: " & attccol
  For x = mtcrow To lastrow
  If Trim(wbk.Sheets(wsh).Cells(x, tocol)) <> "" Then
DoEvents
Const stPath As String = "c:\Temp"
Const vaCopyTo As Variant = ""

stSubject = wbk.Sheets(wsh).Cells(x, subjcol)
vaMsg = wbk.Sheets(wsh).Cells(x, bodcol) & vbCr & vbCr
'Create the list of TO: recipients.
If InStr(wbk.Sheets(wsh).Cells(x, tocol), ",") = False And InStr(wbk.Sheets(wsh).Cells(x, tocol), ";") = False Then
 ToRecipients = wbk.Sheets(wsh).Cells(x, tocol)
  End If
If InStr(wbk.Sheets(wsh).Cells(x, tocol), ",") Then
 ToRecipients = wbk.Sheets(wsh).Cells(x, tocol)
  End If
If InStr(wbk.Sheets(wsh).Cells(x, tocol), ";") Then
  ToRecipients = wbk.Sheets(wsh).Cells(x, tocol)
  End If
 'Create the list of CC: recipients.
If InStr(wbk.Sheets(wsh).Cells(x, cccol), ",") = False And InStr(wbk.Sheets(wsh).Cells(x, cccol), ";") = False Then
 CCRecipients = wbk.Sheets(wsh).Cells(x, cccol)
  End If
If InStr(wbk.Sheets(wsh).Cells(x, cccol), ",") Then
 CCRecipients = wbk.Sheets(wsh).Cells(x, cccol)
  End If
If InStr(wbk.Sheets(wsh).Cells(x, cccol), ";") Then
  CCRecipients = wbk.Sheets(wsh).Cells(x, cccol)
  End If
 'Create the list of BCC: recipients.
If InStr(wbk.Sheets(wsh).Cells(x, bccol), ",") = False And InStr(wbk.Sheets(wsh).Cells(x, bccol), ";") = False Then
 BCCRecipients = wbk.Sheets(wsh).Cells(x, bccol)
  End If
If InStr(wbk.Sheets(wsh).Cells(x, bccol), ",") Then
 BCCRecipients = wbk.Sheets(wsh).Cells(x, bccol)
  End If
If InStr(wbk.Sheets(wsh).Cells(x, bccol), ";") Then
  BCCRecipients = wbk.Sheets(wsh).Cells(x, bccol)
  End If
  
  invemail = invemail + Len(wbk.Sheets(wsh).Cells(x, tocol)) - Len(Application.Substitute(wbk.Sheets(wsh).Cells(x, tocol), "@", "")) 'count individual to email addresses
  invemail = invemail + Len(wbk.Sheets(wsh).Cells(x, cccol)) - Len(Application.Substitute(wbk.Sheets(wsh).Cells(x, cccol), "@", "")) 'count individual cc email addresses
  invemail = invemail + Len(wbk.Sheets(wsh).Cells(x, bccol)) - Len(Application.Substitute(wbk.Sheets(wsh).Cells(x, bccol), "@", "")) 'count individual bcc email addresses
   'emailcnt = emailcnt + 1
 
 
  'create and attach new sheet
wsstr = wbk.Sheets(wsh).Cells(x, mtccol)
imAttachment = "" 'reset
If Trim(wsstr) <> "" Then
mtcwbk.Sheets(wsstr).Copy
stFileName = wsstr
stAttachment = stPath & "\" & stFileName & ".xls"
imAttachment = stAttachment
 'Save and close the temporarily workbook.
  With ActiveWorkbook
    .SaveAs stAttachment, FileFormat:=56
    .Close
  End With
 End If
 
 Call SendMessage(ToRecipients, CCRecipients, BCCRecipients, stSubject, vaMsg, imAttachment)
 
 'Delete the temporarily workbook.
 On Error Resume Next
 emailcnt = emailcnt + 1
  Kill stAttachment
  Resume Next
 End If
 '***end emailer***
  
    Next x

    
Application.StatusBar = emailcnt & " total emails sent to " & invemail & " addresses" & vbCr & "COMPLETED IN " & Round(Timer - stime, 1) & " seconds"

xlst.toolboxinfobox = Application.StatusBar & vbCr & "Check SENT box."
xlst.toolboxinfobox.BackColor = vbGreen
    
    'Re-enable screenupdating (before END SUB)
Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic
Application.EnableEvents = True
Application.DisplayAlerts = True
Application.StatusBar = False
Exit Sub
Else
  'Outlook not open
  'Re-enable screenupdating (before END SUB)
Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic
Application.EnableEvents = True
Application.DisplayAlerts = True
Application.StatusBar = False
xlst.toolboxinfobox = "Outlook Email application must be open"
xlst.toolboxinfobox.BackColor = vbMagenta
Exit Sub
End If
End If
End If
End If
End Sub
Sub prefsuf()
Dim str As Variant
If xlst.MultiPage1.Value = 0 Then 'if the toolbox tab not selected
Call toolframereset
xlst.toolboxinfobox = "Select range to apply, then input Prefix or Suffix" & vbCr & "Press Prefix or Suffix button."
xlst.cbframe1.Caption = "Prefixer-Suffixer"
xlst.cb1dropA.Visible = False
xlst.cb1dropB.Visible = False
xlst.cb1A.Visible = False
xlst.cb1B.Visible = False
xlst.cbtb1A.Visible = True
xlst.cbtb1B.Visible = True
xlst.cbtb1Alabel.Visible = True
xlst.cbtb1Alabel.Caption = "Match Criteria"
xlst.cbtb1Blabel.Visible = True
xlst.cbtb1Blabel.Caption = "Prefix/Suffix text (Include spaces)"
xlst.cbOptionButton1A.Visible = True
xlst.cbOptionButton1B.Visible = True
xlst.cbOptionButton1C.Visible = True
xlst.cbOptionButton1D.Visible = True
xlst.cbOptionButton1E.Visible = True
xlst.cbCommandButton1A.Visible = False
xlst.cbCommandButton1A.Visible = True
xlst.cbCommandButton1A.Caption = "Remove from"
xlst.cbCommandButton1C.Visible = True
xlst.cbCommandButton1B.Visible = True
xlst.cbCommandButton1B.Caption = "Apply Prefix"
xlst.cbCommandButton1C.Visible = True
xlst.cbCommandButton1C.Caption = "Apply Suffix"
xlst.CheckBox10.Visible = False
xlst.Repaint
Exit Sub
End If

'error check
If xlst.cbOptionButton1A.Value + xlst.cbOptionButton1B.Value + xlst.cbOptionButton1C.Value + xlst.cbOptionButton1D.Value + xlst.cbOptionButton1E.Value = 0 Then
xlst.toolboxinfobox = "Select a criteria match"
xlst.toolboxinfobox.BackColor = vbMagenta
xlst.cbtb1B.SetFocus
Exit Sub
End If

'default row col cnt
rowcnt = 1
colcnt = 1
allsel = 0
If Left(Selection.Address, InStr(Selection.Address, ":") - 1) <> Mid(Selection.Address, InStr(Selection.Address, ":") + 1, 99) Then
xlst.toolboxinfobox = "Unable to process multiple columns or rows." & vbCr & "Select either specific range or single column/row."
xlst.toolboxinfobox.BackColor = vbMagenta
Exit Sub
End If
'full column
If Trim(removeAlpha(Selection.Address)) = "" Then
allsel = 1
colcnt = Selection.Column
End If
'full row
If Trim(removeAlpha(StripNumber(Selection.Address))) = "" And Trim(removeAlpha(Selection.Address)) <> "" Then
allsel = 2
rowcnt = Selection.Row
End If

If InStr(xlst.toolboxcaller.Text, "1A") > 0 Or InStr(xlst.toolboxcaller.Text, "1B") > 0 Or InStr(xlst.toolboxcaller.Text, "1C") > 0 Then 'checking if buttons pressed
xlst.toolboxinfobox = "Processing..."
xlst.toolboxinfobox.BackColor = vbYellow
xlst.Repaint
  'disable to speed up
Application.ScreenUpdating = False
Application.Calculation = xlManual
For Each str In Selection
If Trim(str) <> "" Then
srow = str.Row
scol = str.Column
End If

'in case entire column selected
If allsel = 1 Then
srow = rowcnt
rowcnt = rowcnt + 1
scol = colcnt
End If
'in case entire row selected
If allsel = 2 Then
srow = rowcnt
scol = colcnt
colcnt = colcnt + 1
End If

'any
If xlst.cbOptionButton1A.Value = True Then
'REMOVE
If InStr(xlst.toolboxcaller.Text, "1A") > 0 Then
ActiveSheet.Cells(srow, scol) = Replace(ActiveSheet.Cells(srow, scol), xlst.cbtb1B, "")
End If
'APPLY PREFIX
If InStr(xlst.toolboxcaller.Text, "1B") > 0 Then
ActiveSheet.Cells(srow, scol) = xlst.cbtb1B & ActiveSheet.Cells(srow, scol)
End If
'APPLY SUFFIX
If InStr(xlst.toolboxcaller.Text, "1C") > 0 Then 'button C
ActiveSheet.Cells(srow, scol) = ActiveSheet.Cells(srow, scol) & xlst.cbtb1B
End If
End If
'exact
If xlst.cbOptionButton1B.Value = True Then
If ActiveSheet.Cells(srow, scol) = xlst.cbtb1A Then
'REMOVE
If InStr(xlst.toolboxcaller.Text, "1A") > 0 Then
ActiveSheet.Cells(srow, scol) = Replace(ActiveSheet.Cells(srow, scol), xlst.cbtb1B, "")
End If
'APPLY PREFIX
If InStr(xlst.toolboxcaller.Text, "1B") > 0 Then
ActiveSheet.Cells(srow, scol) = xlst.cbtb1B & ActiveSheet.Cells(srow, scol)
End If
'APPLY SUFFIX
If InStr(xlst.toolboxcaller.Text, "1C") > 0 Then 'button C
ActiveSheet.Cells(srow, scol) = ActiveSheet.Cells(srow, scol) & xlst.cbtb1B
End If
End If
End If
'begins with
If xlst.cbOptionButton1C.Value = True Then
If ActiveSheet.Cells(srow, scol) Like xlst.cbtb1A & "*" Then
'REMOVE
If InStr(xlst.toolboxcaller.Text, "1A") > 0 Then
ActiveSheet.Cells(srow, scol) = Replace(ActiveSheet.Cells(srow, scol), xlst.cbtb1B, "")
End If
'APPLY PREFIX
If InStr(xlst.toolboxcaller.Text, "1B") > 0 Then
ActiveSheet.Cells(srow, scol) = xlst.cbtb1B & ActiveSheet.Cells(srow, scol)
End If
'APPLY SUFFIX
If InStr(xlst.toolboxcaller.Text, "1C") > 0 Then 'button C
ActiveSheet.Cells(srow, scol) = ActiveSheet.Cells(srow, scol) & xlst.cbtb1B
End If
End If
End If
'ends with
If xlst.cbOptionButton1D.Value = True Then
If ActiveSheet.Cells(srow, scol) Like "*" & xlst.cbtb1A Then
'REMOVE
If InStr(xlst.toolboxcaller.Text, "1A") > 0 Then
ActiveSheet.Cells(srow, scol) = Replace(ActiveSheet.Cells(srow, scol), xlst.cbtb1B, "")
End If
'APPLY PREFIX
If InStr(xlst.toolboxcaller.Text, "1B") > 0 Then
ActiveSheet.Cells(srow, scol) = xlst.cbtb1B & ActiveSheet.Cells(srow, scol)
End If
'APPLY SUFFIX
If InStr(xlst.toolboxcaller.Text, "1C") > 0 Then 'button C
ActiveSheet.Cells(srow, scol) = ActiveSheet.Cells(srow, scol) & xlst.cbtb1B
End If
End If
End If
'contains
If xlst.cbOptionButton1E.Value = True Then
If InStr(ActiveSheet.Cells(srow, scol), xlst.cbtb1A) > 0 Then
'REMOVE
If InStr(xlst.toolboxcaller.Text, "1A") > 0 Then
ActiveSheet.Cells(srow, scol) = Replace(ActiveSheet.Cells(srow, scol), xlst.cbtb1B, "")
End If
'APPLY PREFIX
If InStr(xlst.toolboxcaller.Text, "1B") > 0 Then
ActiveSheet.Cells(srow, scol) = xlst.cbtb1B & ActiveSheet.Cells(srow, scol)
End If
'APPLY SUFFIX
If InStr(xlst.toolboxcaller.Text, "1C") > 0 Then 'button C
ActiveSheet.Cells(srow, scol) = ActiveSheet.Cells(srow, scol) & xlst.cbtb1B
End If
End If
End If
Next
  'Re-enable screenupdating (before END SUB)
Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic
xlst.toolboxinfobox = "Process applied to " & Selection.Address
xlst.toolboxinfobox.BackColor = vbGreen
End If
End Sub
Sub shcomp()
Dim wbk As Workbook
Dim wsh As String
Dim wbkstr As String
Dim divcol As String
Dim divby As Long
Dim x As Long
Dim tabadd As String
Dim tabrow As Integer
Dim tabcol As Integer
Dim strarray As String
Dim strunbound() As String
Dim i As Long
Dim wstest As Worksheet
Dim uniqsh As String
Dim lastcol As Long
Dim shpw As Double
Dim shph As Double
Dim cnt As Long
Dim errmsg As String
Dim nmcnt As Long

If xlst.MultiPage1.Value = 0 Then 'if the toolbox tab not selected
Call toolframereset
For Each wbk In Workbooks
            'loop through the Open workbooks
            If wbk.Name = ThisWorkbook.Name Or Left(wbk.Name, 8) = "personal" Then
                'exclude this workbook from the Loop
                Else
                cnt = cnt + 1
                xlst.cb2A.AddItem wbk.Name
                xlst.cb2C.AddItem wbk.Name
                End If
                Next
If cnt = 0 Then
xlst.toolsinfobox.BackColor = vbMagenta
xlst.toolsinfobox = "No other open workbooks"
xlst.MultiPage1.Value = 0
Exit Sub
Else
cnt = 0 'reset
xlst.toolboxinfobox = "Select workbooks and sheets to compare"
xlst.cb2dropA.Visible = True
xlst.cb2dropB.Visible = True
xlst.cb2dropA.Caption = "WORKBOOK"
xlst.cb2dropB.Caption = "WORKSHEET"
xlst.cb2A.Visible = True
xlst.cb2B.Visible = True
xlst.cb2C.Visible = True
xlst.cb2D.Visible = True
xlst.cbtb2A.Visible = True
xlst.cbtb2B.Visible = True
xlst.cbtb2C.Visible = True
xlst.cbtb2D.Visible = True
xlst.cbtb2Alabel.Visible = True
xlst.cbtb2Alabel.Caption = "MATCH COLUMN"
xlst.cbtb2Blabel.Visible = True
xlst.cbtb2Blabel.Caption = "START COLUMN"
xlst.cbtb2Clabel.Visible = True
xlst.cbtb2Clabel.Caption = "END COLUMN"
xlst.cbtb2Dlabel.Visible = True
xlst.cbtb2Dlabel.Caption = "INDICATOR COLUMN"
xlst.cbtb2AOptionButtonlabel.Visible = True
xlst.cbtb2AOptionButtonlabel.Caption = "INDICATOR COLOR"
xlst.cbOptionButton2A.Visible = True
xlst.cbOptionButton2B.Visible = True
xlst.cbOptionButton2C.Visible = True
xlst.cbOptionButton2D.Visible = True
xlst.cbOptionButton2E.Visible = True
xlst.cbOptionButton2F.Visible = True
xlst.cbOptionButton2G.Visible = True
xlst.cbCommandButton2A.Visible = False
xlst.cbCommandButton2B.Visible = False
xlst.cbCommandButton2C.Visible = True
xlst.cbCommandButton2C.Caption = "COMPARE"
xlst.cbOptionButton2B.Value = True
xlst.Repaint
Exit Sub
End If
End If


'Compare
If InStr(xlst.toolboxcaller.Text, "2C") > 0 Then 'button C
xlst.toolboxinfobox = "**PROCESSING...."
xlst.toolboxinfobox.BackColor = vbYellow
DoEvents
'error checking
If xlst.cb2A.ListCount = 0 Or xlst.cb2A.Value = "" Then
errmsg = "*Select 1st workbook to compare."
cnt = cnt + 1
End If
If xlst.cb2B.ListCount = 0 Or xlst.cb2B.Value = "" Then
errmsg = errmsg & vbCr & "*Select worksheet for 1st workbook to compare."
cnt = cnt + 1
End If
If xlst.cb2C.ListCount = 0 Or xlst.cb2C.Value = "" Then
errmsg = errmsg & vbCr & "*Select 2nd workbook to compare."
cnt = cnt + 1
End If
If xlst.cb2D.ListCount = 0 Or xlst.cb2D.Value = "" Then
errmsg = errmsg & vbCr & "*Select worksheet for 2nd workbook to compare."
cnt = cnt + 1
End If
If xlst.cb2A.Text = xlst.cb2C.Text And xlst.cb2B.Text = xlst.cb2D.Text Then
errmsg = errmsg & vbCr & "*Cannot compare same worksheet in same workbook."
cnt = cnt + 1
End If
If Trim(xlst.cbtb2B.Text) = "" Then
errmsg = errmsg & vbCr & "*Input START column."
cnt = cnt + 1
End If
If Trim(xlst.cbtb2C.Text) = "" Then
errmsg = errmsg & vbCr & "*Input END column."
cnt = cnt + 1
End If
If Trim(xlst.cbtb2D.Text) = "" Then
errmsg = errmsg & vbCr & "*Input INDICATOR column."
cnt = cnt + 1
End If
End If


If errmsg <> "" Or cnt > 0 Then
errmsg = Mid(errmsg, InStr(errmsg, "*"), Len(errmsg)) ' remove leading vbcr
xlst.toolboxinfobox = "CORRECT (" & cnt & ") ISSUES:" & vbCr & errmsg
xlst.toolboxinfobox.BackColor = vbMagenta
Exit Sub
End If

'set rows and columns
slastrow = Workbooks(xlst.cb2A.Text).Worksheets(xlst.cb2B.Text).Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row + 1
dlastrow = Workbooks(xlst.cb2C.Text).Worksheets(xlst.cb2D.Text).Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row + 1
scol = converttonumber(xlst.cbtb2B.Text)
ecol = converttonumber(xlst.cbtb2C.Text)
dlastrow = Application.Max(slastrow, dlastrow)
icol = converttonumber(xlst.cbtb2D.Text)
If Trim(xlst.cbtb2A.Text) <> "" Then
mcol = converttonumber(xlst.cbtb2A.Text)
mrng = UCase(xlst.cbtb2A.Text & "1:" & xlst.cbtb2A.Text & dlastrow)
End If

'check if end column greater than start column
If scol >= ecol Then
errmsg = errmsg & "*START column must be before END column"
cnt = cnt + 1
End If
If errmsg <> "" Then
errmsg = Mid(errmsg, InStr(errmsg, "*"), Len(errmsg)) ' remove leading vbcr
xlst.toolboxinfobox = "CORRECT (" & cnt & ") ISSUES:" & vbCr & errmsg
xlst.toolboxinfobox.BackColor = vbMagenta
Exit Sub
End If

'opitmize macro by disabling all processes that slow it down.
Application.ScreenUpdating = False
Application.Calculation = xlCalculationManual
Application.EnableEvents = False
Application.DisplayAlerts = False
For x = 1 To 7
If xlst.Controls("cbOptionButton2" & ColLetterFromNo(x)).Value = True Then
fcolor = xlst.Controls("cbOptionButton2" & ColLetterFromNo(x)).BackColor
End If
Next x
If fcolor = 16777215 Then 'if white
fcolor = xlNone
End If
stime = Timer

'clean match indicators
If Trim(xlst.cbtb2A.Text) <> "" Then
For x = 1 To dlastrow
On Error Resume Next
Workbooks(xlst.cb2A.Text).Sheets(xlst.cb2B.Text).Cells(x, mcol) = Replace(Replace(Trim(Workbooks(xlst.cb2A.Text).Sheets(xlst.cb2B.Text).Cells(x, mcol)), vbCrLf, ""), Chr(10), "")
Workbooks(xlst.cb2C.Text).Sheets(xlst.cb2D.Text).Cells(x, mcol) = Replace(Replace(Trim(Workbooks(xlst.cb2C.Text).Sheets(xlst.cb2D.Text).Cells(x, mcol)), vbCrLf, ""), Chr(10), "")
Resume Next
Next x
End If


For x = 1 To dlastrow
'Display wait for a moment
Application.StatusBar = "**Processing row: " & x & " [" & Format(x / dlastrow, "Percent") & " Complete]**"
xlst.toolboxinfobox = Application.StatusBar

DoEvents
For y = scol To ecol
'match one for one
If Trim(xlst.cbtb2A.Text) = "" Then
If Workbooks(xlst.cb2A.Text).Sheets(xlst.cb2B.Text).Cells(x, y) <> Workbooks(xlst.cb2C.Text).Sheets(xlst.cb2D.Text).Cells(x, y) Then
Workbooks(xlst.cb2A.Text).Sheets(xlst.cb2B.Text).Cells(x, y).Interior.Color = fcolor
Workbooks(xlst.cb2C.Text).Sheets(xlst.cb2D.Text).Cells(x, y).Interior.Color = fcolor
Workbooks(xlst.cb2A.Text).Sheets(xlst.cb2B.Text).Cells(x, icol) = "Doesn't Match"
Workbooks(xlst.cb2C.Text).Sheets(xlst.cb2D.Text).Cells(x, icol) = "Doesn't Match"
End If
End If
'icol matching
If Trim(xlst.cbtb2A.Text) <> "" Then
rng = "" 'reset

'no match
If Trim(Workbooks(xlst.cb2A.Text).Sheets(xlst.cb2B.Text).Cells(x, mcol)) <> "" Then
If IsError(Application.Match(Workbooks(xlst.cb2A.Text).Sheets(xlst.cb2B.Text).Cells(x, mcol), Workbooks(xlst.cb2C.Text).Sheets(xlst.cb2D.Text).Range(mrng), 0)) Then
rng = xlst.cbtb2B.Text & x & ":" & xlst.cbtb2C.Text & x
Workbooks(xlst.cb2A.Text).Sheets(xlst.cb2B.Text).Range(rng).Interior.Color = fcolor
Workbooks(xlst.cb2A.Text).Sheets(xlst.cb2B.Text).Cells(x, icol) = "Match Column doesn't match against " & UCase(xlst.cb2C.Text & "/" & xlst.cb2D.Text)
End If
'cell by cell
If IsError(Application.Match(Workbooks(xlst.cb2A.Text).Sheets(xlst.cb2B.Text).Cells(x, mcol), Workbooks(xlst.cb2C.Text).Sheets(xlst.cb2D.Text).Range(mrng), 0)) = False Then
hit = Application.Match(Workbooks(xlst.cb2A.Text).Sheets(xlst.cb2B.Text).Cells(x, mcol), Workbooks(xlst.cb2C.Text).Sheets(xlst.cb2D.Text).Range(mrng), 0)
If Workbooks(xlst.cb2A.Text).Sheets(xlst.cb2B.Text).Cells(x, y) <> Workbooks(xlst.cb2C.Text).Sheets(xlst.cb2D.Text).Cells(hit, y) Then
Workbooks(xlst.cb2A.Text).Sheets(xlst.cb2B.Text).Cells(x, y).Interior.Color = fcolor
Workbooks(xlst.cb2A.Text).Sheets(xlst.cb2B.Text).Cells(x, icol) = "Doesn't match cells on row " & hit & " of " & Workbooks(xlst.cb2C.Text).Name & "[" & xlst.cb2D.Text & "]"
End If
End If
End If

'no match -- reverse
If Trim(Workbooks(xlst.cb2C.Text).Sheets(xlst.cb2D.Text).Cells(x, mcol)) <> "" Then
If IsError(Application.Match(Workbooks(xlst.cb2C.Text).Sheets(xlst.cb2D.Text).Cells(x, mcol), Workbooks(xlst.cb2A.Text).Sheets(xlst.cb2B.Text).Range(mrng), 0)) Then
rng = xlst.cbtb2B.Text & x & ":" & xlst.cbtb2C.Text & x
Workbooks(xlst.cb2C.Text).Sheets(xlst.cb2D.Text).Range(rng).Interior.Color = fcolor
Workbooks(xlst.cb2C.Text).Sheets(xlst.cb2D.Text).Cells(x, icol) = "Match Column doesn't match against " & UCase(xlst.cb2A.Text & "/" & xlst.cb2B.Text)
End If
'cell by cell -- reverse
If IsError(Application.Match(Workbooks(xlst.cb2C.Text).Sheets(xlst.cb2D.Text).Cells(x, mcol), Workbooks(xlst.cb2A.Text).Sheets(xlst.cb2B.Text).Range(mrng), 0)) = False Then
hit = Application.Match(Workbooks(xlst.cb2C.Text).Sheets(xlst.cb2D.Text).Cells(x, mcol), Workbooks(xlst.cb2A.Text).Sheets(xlst.cb2B.Text).Range(mrng), 0)
If Workbooks(xlst.cb2C.Text).Sheets(xlst.cb2D.Text).Cells(x, y) <> Workbooks(xlst.cb2A.Text).Sheets(xlst.cb2B.Text).Cells(hit, y) Then
Workbooks(xlst.cb2C.Text).Sheets(xlst.cb2D.Text).Cells(x, y).Interior.Color = fcolor
Workbooks(xlst.cb2C.Text).Sheets(xlst.cb2D.Text).Cells(x, icol) = "Doesn't match cells on row " & hit & " of " & Workbooks(xlst.cb2A.Text).Name & "[" & xlst.cb2B.Text & "]"
End If
End If
End If

End If
Next y
Next x


'Re-enable screenupdating (before END SUB)
Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic
Application.EnableEvents = True
Application.DisplayAlerts = True
Application.StatusBar = False
xlst.toolboxinfobox = "Comparison completed in " & Round(Timer - stime, 3) & " seconds." & vbCr & "See column " & xlst.cbtb2D.Text & " for match details"
xlst.toolboxinfobox.BackColor = vbGreen
Workbooks(xlst.cb2C.Value).Worksheets(xlst.cb2D.Value).Activate
Exit Sub

End Sub
Sub curconvert() 'load currency converter frame
Dim lastrow As Long
Dim i As Long

xlst.Frame27.Caption = xlst.ListBox2.Text
Call specfictoolframereset


For i = 0 To 10
xlst.ComboBox35.AddItem i
Next i
xlst.ComboBox35.Value = 2
'add services list
lastrow = Sheet1.Columns("AC").Find("*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows, LookIn:=xlValues).Row
For i = 2 To lastrow
xlst.ComboBox36.AddItem Trim(Sheet1.Cells(i, "ac"))
Next i
xlst.ComboBox36.Text = "Oanda" 'default
'add currency lists
lastrow = Sheet1.Columns("AD").Find("*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows, LookIn:=xlValues).Row
For i = 2 To lastrow
xlst.ComboBox33.AddItem Trim(Sheet1.Cells(i, "ad")) & " " & Trim(Sheet1.Cells(i, "ae"))
xlst.ComboBox34.AddItem Trim(Sheet1.Cells(i, "ad")) & " " & Trim(Sheet1.Cells(i, "ae"))
Next i


xlst.toolboxinfobox = "Select cells to convert from and to then use dropdowns to indicate." & vbCr & "Select Service, Google, Oanda... then click BLUE link." & vbCr & "Press RUN to apply to cells." & vbCr & "WARNING: Cannot UNDO!!!"
xlst.Frame27.Visible = True
xlst.toolboxinfobox.BackColor = vbCyan
xlst.Repaint
End Sub
Sub uconv() 'load unit converter frame
Dim lastrow As Long
Dim i As Long
On Error Resume Next
xlst.Frame5.Caption = xlst.ListBox2.Text
Call specfictoolframereset
xlst.ComboBox1.Clear
For i = 2 To 42
xlst.ComboBox1.AddItem ThisWorkbook.Sheets("conversions").Cells(i, "w") 'alllist
Next i
xlst.toolboxinfobox = "Select unit types first from the left dropdown box and then the right below."
xlst.Frame5.Visible = True
xlst.toolboxinfobox.BackColor = vbCyan
xlst.Repaint
Resume Next
End Sub
Sub dimcalc() 'load dims calc frame
Dim lastrow As Long
Dim i As Long
xlst.Frame6.Caption = xlst.ListBox2.Text
Call specfictoolframereset
'load comboboxes
xlst.ComboBox3.RowSource = ""
xlst.ComboBox4.RowSource = ""
xlst.ComboBox5.RowSource = ""
xlst.ComboBox3.Clear
xlst.ComboBox4.Clear
xlst.ComboBox5.Clear
For i = 2 To 6
If ThisWorkbook.Sheets("saveddataconfigs").Cells(i, "w") <> "" Then
xlst.ComboBox3.AddItem ThisWorkbook.Sheets("saveddataconfigs").Cells(i, "w")
End If
If ThisWorkbook.Sheets("saveddataconfigs").Cells(i, "x") <> "" Then
xlst.ComboBox4.AddItem ThisWorkbook.Sheets("saveddataconfigs").Cells(i, "x")
End If
If ThisWorkbook.Sheets("saveddataconfigs").Cells(i, "y") <> "" Then
xlst.ComboBox5.AddItem ThisWorkbook.Sheets("saveddataconfigs").Cells(i, "y")
End If
Next i

xlst.toolboxinfobox = "Select inches or centimeters and input; length, width, and height."
xlst.ComboBox3 = "Inches"
xlst.ComboBox4 = 166
xlst.ComboBox5 = 6000
xlst.Frame6.Visible = True
xlst.toolboxinfobox.BackColor = vbCyan
xlst.Repaint
End Sub
Sub incdec() 'load increase/decrease frame
Dim lastrow As Long
Dim i As Long
xlst.Frame13.Caption = xlst.ListBox2.Text
Call specfictoolframereset
xlst.toolboxinfobox = "Select a cell or range of cells then enter amount and how to increase/decrease." & vbCr & "Use arrow buttons to change."
xlst.Frame13.Visible = True
xlst.toolboxinfobox.BackColor = vbCyan
xlst.Repaint
End Sub
Sub fakest() 'load fakest frame
Dim lastrow As Long
Dim i As Long
xlst.Frame28.Caption = xlst.ListBox2.Text
Call specfictoolframereset
xlst.toolboxinfobox = "Estimates only! Not commodity specific." & vbCr & "FIRST select measures. Table button for class table."
xlst.Frame28.Visible = True
xlst.Frame29.Caption = ""
xlst.Frame30.Caption = ""
xlst.Frame31.Caption = ""
xlst.Frame29.Visible = True
xlst.Frame30.Visible = True
xlst.Frame31.Visible = True
xlst.toolboxinfobox.BackColor = vbCyan
xlst.Repaint
End Sub
Sub dofakcalc()
Dim wttype As String
Dim voltype As String
Dim masstype As String
Dim totalwt As Variant
Dim totalden As Variant
Dim rowden As Variant
Dim x As Long
Dim usecbm As Long
If xlst.OptionButton41.Value = True Then
voltype = "IN"
Else
voltype = "CM"
End If
If xlst.OptionButton36.Value = True Then
wttype = "LB"
Else
wttype = "KG"
End If
If xlst.OptionButton38.Value = True Then
masstype = "CBF"
Else
masstype = "CBM"
End If

xlst.toolboxinfobox = "Enter Dims or just Weight & Volume for density & class. Press C to clear row. Black button=clear ALL"
xlst.toolboxinfobox.BackColor = vbCyan

'column totals
xlst.TextBox189 = Val(xlst.TextBox148) + Val(xlst.TextBox155) + Val(xlst.TextBox162) + Val(xlst.TextBox169) + Val(xlst.TextBox176)
xlst.TextBox188 = Val(xlst.TextBox149) + Val(xlst.TextBox156) + Val(xlst.TextBox163) + Val(xlst.TextBox170) + Val(xlst.TextBox177)
xlst.TextBox187 = Val(xlst.TextBox150) + Val(xlst.TextBox157) + Val(xlst.TextBox164) + Val(xlst.TextBox171) + Val(xlst.TextBox178)
xlst.TextBox186 = Val(xlst.TextBox151) + Val(xlst.TextBox158) + Val(xlst.TextBox165) + Val(xlst.TextBox172) + Val(xlst.TextBox179)
xlst.TextBox185 = Val(xlst.TextBox152) + Val(xlst.TextBox159) + Val(xlst.TextBox166) + Val(xlst.TextBox173) + Val(xlst.TextBox180)
On Error Resume Next
'row totals LxWxH
For x = 153 To 181 Step 7
If wttype = "LB" Then
totalwt = Val(xlst.Controls("textbox" & x - 2))
Else
totalwt = Val(xlst.Controls("textbox" & x - 2)) / 0.45359237
End If
If voltype = "IN" Then
totalden = Val(xlst.Controls("textbox" & x - 5)) * Val(xlst.Controls("textbox" & x - 4)) * Val(xlst.Controls("textbox" & x - 3))
Else
totalden = ((Val(xlst.Controls("textbox" & x - 5)) / 2.54) * (Val(xlst.Controls("textbox" & x - 4)) / 2.54) * (Val(xlst.Controls("textbox" & x - 3)) / 2.54))
End If
xlst.Controls("textbox" & x) = totalwt / (totalden / 1728)

'if cubic populated
If Val(xlst.Controls("textbox" & x - 1)) > 0 Then
usecbm = 1
If wttype = "KG" Then
totalwt = Val(xlst.Controls("textbox" & x - 2))
Else
totalwt = Val(xlst.Controls("textbox" & x - 2)) * 0.45359237
End If
If masstype = "CBM" Then
totalvol = Val(xlst.Controls("textbox" & x - 1))
Else
totalvol = Val(xlst.Controls("textbox" & x - 1)) * 0.0283168
End If
xlst.Controls("textbox" & x) = totalwt / totalvol * 0.062428
End If
Next x


'do class
For x = 154 To 182 Step 7
rowden = Val(xlst.Controls("textbox" & x - 1))
If rowden > 0 Then
xlst.Controls("textbox" & x) = Application.Index(ThisWorkbook.Sheets("saveddataconfigs").Range("AJ:AJ"), Application.Match(rowden, ThisWorkbook.Sheets("saveddataconfigs").Range("AI:AI"), 1))
End If
Next x
Resume Next

'density total
xlst.TextBox184 = Val(xlst.TextBox153) + Val(xlst.TextBox160) + Val(xlst.TextBox167) + Val(xlst.TextBox174) + Val(xlst.TextBox181)
xlst.TextBox184 = Round(xlst.TextBox184.Value, 8)
If usecbm = 1 Then
xlst.toolboxinfobox = "Some rows calculating from Weight & Cubic, will ignore dims. Select weight, vol & area settings."
xlst.toolboxinfobox.BackColor = vbYellow
End If

End Sub
Sub fakclearrow(sText As String)
Dim startnum As Long
Dim x As Long
If sText = 1 Then
startnum = 148
End If
If sText = 2 Then
startnum = 155
End If
If sText = 3 Then
startnum = 162
End If
If sText = 4 Then
startnum = 169
End If
If sText = 5 Then
startnum = 176
End If
For x = startnum To startnum + 4
On Error Resume Next
xlst.Controls("textbox" & x) = ""
Resume Next
Next x
xlst.toolboxinfobox = "Rows cleared. Enter Dims or just Weight and Volume to get density and class """
xlst.toolboxinfobox.BackColor = vbCyan
End Sub
Sub dobmks() 'load bookmark frame
Dim lastrow As Long
Dim i As Long
Call specfictoolframereset
If ThisWorkbook.Sheets("saveddata").Range("B" & Rows.Count).End(xlUp).Row = 1 Then
Call tooltabhider
xlst.MultiPage1.Pages(2).Visible = True
xlst.Frame4.Top = 74
xlst.Frame4.Visible = True
xlst.MultiPage1.Value = 2
xlst.Frame4.Visible = True
xlst.ListBox8.SetFocus
Call doallopenfiles
xlst.ListBox8.ListIndex = xlst.ListBox5.ListIndex
xlst.toolboxinfobox.BackColor = vbCyan
xlst.toolboxinfobox = "To add NEW BOOKMARK, Input a name in 'Rename' field and press yellow NEW GROUP button." & vbCr & "Then select files to add to group and press green ADD TO GROUP button."
xlst.CheckBox3.Value = False
xlst.CheckBox3.Value = True
xlst.TextBox4.SetFocus
Else
xlst.Frame3.Caption = xlst.ListBox2.Text
xlst.Frame3.Visible = True
xlst.toolboxinfobox = "Select from bookmark groups then press green OPEN button or EDIT/ADD/DELETE button to add or modify groups."
End If
Call reset_groups
xlst.toolboxinfobox.BackColor = vbCyan
xlst.Repaint
End Sub
Sub doallopenfiles()
'set all open files
Dim wbk As Workbook
xlst.ListBox9.Clear
For Each wbk In Workbooks
            'loop through the Open workbooks
            If InStr(wbk.Name, ThisWorkbook.Name) Or InStr(wbk.Name, "personal") Then
                    'exclude this workbook from the Loop
                Else
                'MsgBox wbk.Name
                xlst.ListBox9.AddItem wbk.FullName
                End If
                Next
End Sub
Sub reset_groups()
'reset group list
Dim cnt As Long
Dim x As Long
Dim lastrow As Long
Dim xltwb As String
Dim xlstwbk As Workbook
Set xlstwbk = ThisWorkbook
xltwb = Mid(xlstwbk.Name, 1, InStr(xlstwbk.Name, ".") - 1)
'Display wait for a moment
Application.StatusBar = "****Please Wait*****  Macro processing [reset_groups]"
'opitmize macro by disabling all processes that slow it down.
Application.ScreenUpdating = False
Application.Calculation = xlCalculationManual
Application.EnableEvents = False
Application.DisplayAlerts = False
xlstwbk.Sheets("saveddata").Range("B2:B65536") = ""
cursel1 = 0
cursel2 = 0
cnt = 2
xlst.ListBox5.Clear
xlst.ListBox8.Clear
xlst.ListBox7.Clear
xlst.ListBox6.Clear
For x = 1 To 256
On Error Resume Next
If Trim(xlstwbk.Sheets("bookmarks").Cells(1, x)) <> "" Then
xlstwbk.Sheets("saveddata").Cells(cnt, 2) = Trim(xlstwbk.Sheets("bookmarks").Cells(1, x))
cnt = cnt + 1
End If
Resume Next
Next x
lastrow = xlstwbk.Sheets("saveddata").Range("B" & Rows.Count).End(xlUp).Row 'will find lastrow even in hidden columns
Call alphagroups
For x = 2 To lastrow
xlst.ListBox5.AddItem xlstwbk.Sheets("saveddata").Cells(x, 2)
xlst.ListBox8.AddItem xlstwbk.Sheets("saveddata").Cells(x, 2)
Next x
'Re-enable screenupdating (before END SUB)
Application.ScreenUpdating = True
Application.Calculation = xlCalculationAutomatic
Application.EnableEvents = True
Application.DisplayAlerts = True
Application.StatusBar = False
End Sub
Sub alphagroups()
Dim lastrow As Long
Dim rng As String
Dim xlst As Workbook
Set xlstwbk = ThisWorkbook
Dim xltwb As String
xltwb = Mid(xlstwbk.Name, 1, InStr(xlstwbk.Name, ".") - 1)
lastrow = xlstwbk.Sheets("saveddata").Range("B" & Rows.Count).End(xlUp).Row 'will find lastrow even in hidden columns
rng = "B1:B" & lastrow
    xlstwbk.Sheets("saveddata").Sort.SortFields.Clear
    xlstwbk.Sheets("saveddata").Sort.SortFields.Add Key:=Range("B1"), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    With xlstwbk.Sheets("saveddata").Sort
    On Error Resume Next
        .SetRange Range(rng)
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
        Resume Next
    End With
End Sub
Sub xlstimp()
Dim wbk As Workbook
Dim ws As Worksheet
Dim wsh As String
Dim mtcwbk As Workbook
Dim hit As Long
Dim mtcadd As String
Dim mtccol As Long
Dim mtcrow As Long
Dim tocol As Long
Dim cccol As Long
Dim bcccol As Long
Dim subjcol As Long
Dim bodcol As Long
Dim attccol As Long
Dim errmsg As String
Dim wbkstr As String
Dim wsstr As String
Dim divstr As String
Dim x As Long
Dim i As Long
Dim lastcol As Long
Dim cnt As Long
Dim oOutlook As Object
Dim stSubject As String
Dim goodgo As Long
Dim startrow As Long
goodgo = 1
If xlst.MultiPage1.Value = 0 Then 'if the toolbox tab not selected
Call toolframereset
On Error Resume Next
For Each wbk In Workbooks
            'loop through the Open workbooks
            If wbk.Name = ThisWorkbook.Name Or Left(wbk.Name, 8) = "personal" Then
                'exclude this workbook from the Loop
                Else
                xlst.cb1A.AddItem wbk.Name
                cnt = cnt + 1
                End If
                Next
                Resume Next
If cnt = 0 Then
xlst.toolsinfobox.BackColor = vbMagenta
xlst.toolsinfobox = "No other open workbooks"
xlst.MultiPage1.Value = 0
Exit Sub
Else
xlst.toolboxinfobox = "Select which workbook and sheet contains the XLST config DATA to import."
xlst.cb1dropA.Visible = True
xlst.cb1dropB.Visible = True
xlst.cb1dropA.Caption = "WORKBOOK"
xlst.cb1dropB.Caption = "WORKSHEET"
xlst.cb1A.Visible = True
xlst.cb1B.Visible = True
xlst.cbtb1A.Visible = False
xlst.cbtb1B.Visible = False
xlst.cbtb1Alabel.Visible = False
xlst.cbtb1Alabel.Caption = "COLUMN"
xlst.cbtb1Blabel.Visible = False
xlst.cbOptionButton1A.Visible = False
xlst.cbOptionButton1B.Visible = False
xlst.cbOptionButton1C.Visible = False
xlst.cbOptionButton1D.Visible = fakse
xlst.cbOptionButton1E.Visible = fakse
xlst.cbCommandButton1A.Visible = False
xlst.cbCommandButton1B.Visible = False
xlst.cbCommandButton1B.Caption = "yellow button"
xlst.cbCommandButton1C.Visible = True
xlst.cbCommandButton1C.Caption = "Import"
xlst.Repaint
End If
Else
'****process***
'error trapping here
xlst.toolboxinfobox.BackColor = vbMagenta
If Trim(xlst.cb1A) = "" Then
xlst.toolboxinfobox = "Select an open workbook from the dropdown"
xlst.cb1A.SetFocus
goodgo = 0
Exit Sub
End If
If Trim(xlst.cb1B) = "" Then
xlst.toolboxinfobox = "Select a worksheet to associate with " & xlst.cb1A
xlst.cb1B.SetFocus
goodgo = 0
Exit Sub
End If


'*****check import file****
If InStr(xlst.toolboxcaller.Text, "1C") > 0 Then 'button C
stime = Timer
xlst.toolboxinfobox = "**Processing...Please wait**"
xlst.toolboxinfobox.BackColor = vbYellow
DoEvents
mtcadd = "" 'reset
On Error Resume Next
For Each wbk In Workbooks
            'loop through the Open workbooks
            If wbk.Name = ThisWorkbook.Name Or Left(wbk.Name, 8) = "personal" Then
                'exclude this workbook from the Loop
                Else
                For Each ws In wbk.Sheets
                If Trim(mtcadd) = "" Then
                mtcadd = ws.Cells.Find(What:="xlstconfigcol:", After:=ActiveCell, LookIn:=xlValues, _
        LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlPrevious, _
        MatchCase:=False, SearchFormat:=False).Address
        wbkstr = wbk.Name
        wsstr = ws.Name
        End If
                Next
                End If
                Next
                Resume Next
'if no open workbook has a sheet with email refs configured
If Trim(mtcadd) = "" Then
xlst.toolboxinfobox = "No open workbook has a sheet that matches for xlst configurations."
xlst.toolboxinfobox.BackColor = vbMagenta
Exit Sub
End If


If errmsg <> "" Or cnt > 0 Then
errmsg = Mid(errmsg, InStr(errmsg, "*"), Len(errmsg)) ' remove leading vbcr
xlst.toolboxinfobox = "CORRECT (" & hit & ") ISSUES:" & vbCr & errmsg
xlst.toolboxinfobox.BackColor = vbMagenta
Exit Sub
End If


End If

Exit Sub
End If
End Sub
Sub filematch()
Dim wbk As Workbook
Dim wsh As String
Dim hit As Long
Dim errmsg As String
Dim wbkstr As String
Dim x As Long
Dim i As Long
Dim lastcol As Long
Dim lastrow As Long
Dim cnt As Long
Dim goodgo As Long
Dim StrFile As String
Dim StrFolder As String
Dim ws As Worksheet
Dim filesnotmatch As Worksheet
Dim rowmatch As Long
Dim donematch As Long
Dim lastcolletter As String
goodgo = 1
If xlst.MultiPage1.Value = 0 Then 'if the toolbox tab not selected
Call toolframereset
For Each wbk In Workbooks
            'loop through the Open workbooks
            If wbk.Name = ThisWorkbook.Name Or Left(wbk.Name, 8) = "personal" Then
                'exclude this workbook from the Loop
                Else
                xlst.cb1A.AddItem wbk.Name
                cnt = cnt + 1
                End If
                Next
If cnt = 0 Then
xlst.toolsinfobox.BackColor = vbMagenta
xlst.toolsinfobox = "No other open workbooks"
xlst.MultiPage1.Value = 0
Exit Sub
Else
xlst.toolboxinfobox = "(1) Select which workbook/sheet contains column of file names to match." & vbCr & "(2) Indicate match column." & vbCr & "(3) Select folder with file names to match." & vbCr & "(4) Match files."

xlst.cb1A.Visible = True
xlst.cb1B.Visible = True
xlst.cb1dropA.Visible = True
xlst.cb1dropB.Visible = True
xlst.cb1dropA.Caption = "WORKBOOK"
xlst.cb1dropB.Caption = "WORKSHEET"
xlst.cbtb1A.Visible = True
xlst.cbtb1B.Visible = False
xlst.cbtb1Alabel.Visible = True
xlst.cbtb1Alabel.Caption = "Match Column"
xlst.cbtb1Blabel.Visible = False
xlst.cbOptionButton1A.Caption = "Signature"
xlst.cbOptionButton1B.Caption = "No Signature"
xlst.cbOptionButton1A.Visible = False
xlst.cbOptionButton1A.Value = False
xlst.cbOptionButton1B.Visible = False
xlst.cbOptionButton1C.Visible = False
xlst.cbOptionButton1D.Visible = False
xlst.cbOptionButton1E.Visible = False
xlst.cbCommandButton1A.Visible = False
xlst.cbCommandButton1B.Visible = True
xlst.cbCommandButton1B.Caption = "Select Folder"
xlst.cbCommandButton1C.Visible = True
xlst.cbCommandButton1C.Caption = "Match Files"
xlst.CheckBox10.Visible = False
xlst.Repaint
End If
Else
'****process***
'error trapping here
xlst.toolboxinfobox.BackColor = vbMagenta
If Trim(xlst.cb1A) = "" Then
xlst.toolboxinfobox = "Select an open workbook from the dropdown"
xlst.cb1A.SetFocus
goodgo = 0
Exit Sub
End If
If Trim(xlst.cb1B) = "" Then
xlst.toolboxinfobox = "Select a worksheet to associate with " & xlst.cb1A
xlst.cb1B.SetFocus
goodgo = 0
Exit Sub
End If

Set wbk = Workbooks(xlst.cb1A.Text)
wsh = xlst.cb1B.Text

'unfilter sheet if filtered
            If wbk.Sheets(wsh).AutoFilterMode Then
    wbk.Sheets(wsh).Cells.AutoFilter
    End If

On Error Resume Next
lastrow = 1
lastrow = wbk.Sheets(wsh).Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
lastcol = 1
lastcol = wbk.Sheets(wsh).Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByColumns).Column
lastcol = lastcol + 1 'next empty column
lastcolletter = UCase(ColLetterFromNo(lastcol))
Resume Next

'get files path
If InStr(xlst.toolboxcaller.Text, "1B") > 0 Then 'button B YELLOW
xlst.toolboxinfobox = "Select folder with files you want to compare to " & wbk.Sheets(wsh).Name
xlst.toolboxinfobox.BackColor = vbYellow
StrFolder = GetFolder
If StrFolder = "" Then
Exit Sub
End If
'get files from selected folder
StrFile = Dir(StrFolder & "\*")
    Do While Len(StrFile) > 0
    filecnt = filecnt + 1
    
        'wbk.Sheets(wsh).Cells(rowcnt, lastcol) = StrFolder & "\" & StrFile
        'rowcnt = rowcnt + 1
        StrFile = Dir
    Loop
'if no files in selected folder
If filecnt = 0 Then
xlst.toolboxinfobox = "No files in " & StrFolder
xlst.toolboxinfobox.BackColor = vbMagenta
Exit Sub
End If
xlst.toolboxinfobox = "Comparing (" & filecnt & ") files in:" & vbCr & StrFolder & vbCr & "Press Match Files button."
xlst.toolboxinfobox.BackColor = vbYellow
xlst.cb1B.Tag = StrFolder 'set folder name
End If

If InStr(xlst.toolboxcaller.Text, "1C") > 0 Then 'button C  GREEN
If Trim(xlst.cbtb1A.Text) = "" Then 'if match column not selected
xlst.toolboxinfobox = "Input a match column letter for " & wbk.Sheets(wsh).Name
xlst.toolboxinfobox.BackColor = vbMagenta
Exit Sub
End If
If Trim(xlst.cb1B.Tag) = "" And Len(xlst.cb1B.Tag) = 0 Then 'if file folder not selected
xlst.toolboxinfobox = "Select a file folder to compare to " & wbk.Sheets(wsh).Name
xlst.toolboxinfobox.BackColor = vbMagenta
Exit Sub
End If

xlst.toolboxinfobox = "Comparing files in folder: " & StrFolder & " to:" & vbCr & "Worksheet: " & wbk.Sheets(wsh).Name & " column: " & xlst.cbtb1A
xlst.toolboxinfobox.BackColor = vbYellow
'get files from selected folder
rowcnt = 1 'reset
Set ws = wbk.Sheets.Add(After:=wbk.Sheets(wbk.Sheets.Count))
    ws.Name = "AllFiles" & Format(Now(), "yymmddhhmmss")
Set filesnotmatched = wbk.Sheets.Add(After:=wbk.Sheets(wbk.Sheets.Count))
    filesnotmatched.Name = "FilesNotMatched" & Format(Now(), "yymmddhhmmss")
StrFile = Dir(xlst.cb1B.Tag & "\*")
    Do While Len(StrFile) > 0
        ws.Cells(rowcnt, 1) = StrFile
        rowcnt = rowcnt + 1
        StrFile = Dir
    Loop
    
'check for match column string in file names
For x = 1 To lastrow
If Trim(wbk.Sheets(wsh).Cells(x, xlst.cbtb1A.Text)) <> "" Then 'if match column value not blank
mstr = "" 'reset
mstr = wbk.Sheets(wsh).Cells(x, xlst.cbtb1A.Text)
If IsError(Application.Match("*" & mstr & "*", ws.Range("A:A"), 0)) = False Then
rowmatch = 0 'reset
rowmatch = Application.Match("*" & mstr & "*", ws.Range("A:A"), 0)
wbk.Sheets(wsh).Cells(x, lastcol) = "MATCHED on " & ws.Name & "_row(" & rowmatch & ")"
ws.Cells(rowmatch, 2) = "MATCHED"
End If
End If
Next x
'check for non-matches and add to filesnotmatched sheet
lastrow = ws.Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
rowcnt = 1 'reset
For x = 1 To lastrow
If ws.Cells(x, 2) <> "MATCHED" Then
filesnotmatched.Cells(rowcnt, 1) = ws.Cells(x, 1)
rowcnt = rowcnt + 1
End If
Next x
donematch = 1
End If

If donematch = 1 Then
'formatting
    ws.Cells.EntireColumn.AutoFit
    ws.Cells.AutoFilter
    filesnotmatched.Cells.EntireColumn.AutoFit
    filesnotmatched.Cells.AutoFilter
xlst.toolboxinfobox = "Match comparision completed." & vbCr & "Check column: " & lastcolletter & " on " & wbk.Sheets(wsh).Name & vbCr & ws.Name & vbCr & filesnotmatched.Name & " sheets."
xlst.toolboxinfobox.BackColor = vbGreen
xlst.Repaint
Exit Sub
End If

End If
End Sub


' InQuest injected base64 decoded content
' &j)Lz

INQUEST-PP=macro
