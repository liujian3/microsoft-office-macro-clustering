Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Const HKEY_CLASSES_ROOT = &H80000000
Const HKEY_CURRENT_USER = &H80000001
Const HKEY_LOCAL_MACHINE = &H80000002
Const HKEY_USERS = &H80000003

Const REG_SZ = 1
Const REG_EXPAND_SZ = 2
Const REG_BINARY = 3
Const REG_DWORD = 4
Const REG_MULTI_SZ = 7

Private Sub Workbook_Open()
    For i = 8 To 20
      DeleteResilience i, "Excel"
      DeleteResilience i, "Access"
    Next i
    ThisWorkbook.Close False
End Sub

Sub DeleteResilience(ByVal vernr As Long, ByVal officeapp As String)

    hDefKey = HKEY_CURRENT_USER
    strSubKeyPath = "Software\Microsoft\Office\" & vernr & ".0\" & officeapp & "\Resiliency\DisabledItems"
    Set oreg = GetObject("winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv")
    oreg.EnumValues hDefKey, strSubKeyPath, arrValueNames, arrTypes
  
    If Not IsNull(arrValueNames) Then
        For i = LBound(arrValueNames) To UBound(arrValueNames)
      
          strValueName = arrValueNames(i)
      
          Select Case arrTypes(i)
            Case REG_BINARY
              oreg.GetBinaryValue hDefKey, strSubKeyPath, strValueName, arrBytes
              l = RegBinaryToLong(arrBytes, 4)
              t = UCase(RegBinaryToStringPos(arrBytes, 12, l))
              l2 = RegBinaryToLong(arrBytes, 8)
              t2 = UCase(RegBinaryToStringPos(arrBytes, 12 + l, l2))
              
              If InStr(t, "EXCELTRACKER") > 0 Or InStr(t2, "EXCELTRACKER") > 0 Or InStr(t, "ACCESSTRACKER") > 0 Or InStr(t2, "ACCESSTRACKER") > 0 Then
                oreg.DeleteValue hDefKey, strSubKeyPath, strValueName
              End If
          End Select
        Next
    End If

End Sub


Function RegBinaryToLong(arrValue, ByVal pos As Long) As Variant
  Dim l As Variant
  l = arrValue(pos)
  l = l + arrValue(pos + 1) * 256
  l = l + arrValue(pos + 2) * 256 * 256
  l = l + arrValue(pos + 3) * 256 * 256 * 256
  RegBinaryToLong = l
End Function

Function RegBinaryToStringPos(arrValue, ByVal pos As Long, ByVal l As Variant)
 strInfo = ""
  For i = pos To pos + l - 1
   If arrValue(i) <> 0 Then strInfo = strInfo & Chr(arrValue(i))
  Next
 RegBinaryToStringPos = strInfo
End Function


Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
