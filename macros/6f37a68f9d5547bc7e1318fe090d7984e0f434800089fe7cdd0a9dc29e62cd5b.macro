Attribute VB_Name = "HomePage"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Activate()
SetFalse

Set SmartWB = ActiveWorkbook
Set smartWS = SmartWB.Worksheets("Buyer-SmartSheet")
Set imgWS = SmartWB.Worksheets("Images")

Set zTab = smartWS.ListObjects("List1")
Call getUnique
Application.GoTo Reference:=Worksheets(imgWS.Name).Range("A1"), Scroll:=True
SetTrue
End Sub

Function getUnique() '(Function to get Line#, SKU and VPN from Buyer SmartSheet
Dim iTab As ListObject, zTab As ListObject, sRng As Range, lnRng As Range, vRng As Range
Dim i As Integer, x As Integer
Dim imgWS As Worksheet
Dim iCount, jCount, kCount, iNum

Set SmartWB = ActiveWorkbook
Set smartWS = SmartWB.Worksheets("Buyer-SmartSheet")
Set imgWS = SmartWB.Worksheets("Images")

Set zTab = smartWS.ListObjects("List1")
Set iTab = imgWS.ListObjects("tbl_Images")
Set sRng = zTab.ListColumns(2).DataBodyRange
Set lnRng = zTab.ListColumns(1).DataBodyRange
Set vRng = zTab.ListColumns(8).DataBodyRange

If Application.WorksheetFunction.CountBlank(lnRng) < 150 Then
    iCount = UniqueItems(smartWS.Range(lnRng.Address), False)
Else
    iTab.DataBodyRange.ClearContents
    SetTrue
    End
End If
jCount = UniqueItems(smartWS.Range(sRng.Address), False)
kCount = UniqueItems(smartWS.Range(vRng.Address), False)

iTab.ListColumns(1).DataBodyRange.Cells.ClearContents
iTab.ListColumns(2).DataBodyRange.Cells.ClearContents
iTab.ListColumns(3).DataBodyRange.Cells.ClearContents

For i = LBound(iCount) To UBound(iCount) - 1
On Error Resume Next
        iTab.DataBodyRange.Cells(i + 1, 1) = iCount(i + 1)
        iTab.DataBodyRange.Cells(i + 1, 2) = jCount(i + 1)
        iTab.DataBodyRange.Cells(i + 1, 3) = smartWS.Range(vRng.Address).Cells(i + 1, 1)
On Error GoTo 0
Next i

End Function
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Public xCell As Range
Dim s As String, sErrors As String

Private Sub Worksheet_Activate()
Set SmartWB = ActiveWorkbook
Set smartWS = SmartWB.Worksheets("Buyer-SmartSheet")
Application.AutoCorrect.AutoFillFormulasInLists = False
    If Application.CutCopyMode = xlCopy Or Application.CutCopyMode = xlCut Or Len(GetClipboardText) > 0 Then
        If smartWS.Cells(Selection.Row, smartWS.Range("mTab_Required").Column) = "Drop Down" Then
            ToggleCutCopyAndPaste False
            End
        End If
    End If

End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
    MsgBox "Sorry! Right click is disabled on this worksheet due to data/formatting control requirements!", vbInformation + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
    Cancel = True
    SetTrue
End Sub

Private Sub Worksheet_Change(ByVal Target As Excel.Range)
Dim locIdx As String, targetFormula As String, UndoString As String, selFirstRo As Long, selLastRo As Long, hdrLastRo As Long
Dim rChanged, lastRow, chkObj, actRo, actCol, MyVal, MyOldVal, rCel, hChanged, mycolstr, lastCol, zCell, xString, mResp, xmSKU
Dim addWB As Workbook, addWBPath As String
addWBPath = Environ("appdata") & "\Microsoft\Excel\XLSTART\AH-Buyer-SmartSheet-AddIn*.xlam"
xFound = vbaSmartSheetFunctions.Check4File(CStr(addWBPath))
If xFound Then
    If addWB Is Nothing Then
        Set addWB = Application.Workbooks(Dir(Environ("appdata") & "\Microsoft\Excel\XLSTART\AH-Buyer-SmartSheet-AddIn*.xlam"))
    End If
End If

actRo = ActiveCell.Row
actCol = ActiveCell.Column

SetFalse

chkObj = setObjects

    If chkObj = False Then
        Target.ClearContents
        'DialogBoxTest.Show
        GoTo WayOut
    End If

        If Application.CommandBars("Standard").Controls("&Undo").Enabled = True Then
            On Error Resume Next
                UndoString = Trim(Left(Application.CommandBars("Standard").Controls("&Undo").List(1), 6))
            On Error GoTo 0
        End If

'Added on May 08, 2019 | Updated May 23, 2019
    On Error Resume Next
        If (Target.Row <> Selection.Row) And ((Target.Row > smartWS.Range("mTab_Header").Row) And (Selection.Row < smartWS.Range("mTab_Header").Row)) Then Target.Select
    On Error GoTo 0
'==========================

    If Target.Row > smartWS.Range("mTab_Header").Row And Selection.Row > smartWS.Range("mTab_Header").Row Then
        If Selection.Columns.Count > 1 Then
            If Target(1) <> Selection(1) Then
                MsgBox "You have selected more than 1 column. Please retry selecting cell(s) within a single column.", vbCritical, "At Home: Buyer SmartSheet|fffd|"
            ElseIf UndoString = "Paste" Then
                MsgBox "You are trying to paste data from more than 1 column. Copy Paste allowed only on a single column (from a single column).", vbCritical, "At Home: Buyer SmartSheet|fffd|"
            Else
                GoTo nxtPhase
            End If
                On Error Resume Next
                Application.Undo
                Selection.Cells(1).Select
                On Error GoTo 0
                GoTo WayOut
        End If
    ElseIf Target.Row = smartWS.Range("mTab_Header").Row Or Selection.Row = smartWS.Range("mTab_Header").Row Or Target.Row = smartWS.Range("mTab_Required").Row Or Selection.Row = smartWS.Range("mTab_Required").Row _
                                        Or Target.Row = smartWS.Range("mTabType").Row Or Selection.Row = smartWS.Range("mTabType").Row Then
        MsgBox "You have selected the Header Rows while making the change. Please note that you will not be able to edit the Header Rows. Please retry!", vbExclamation, "At Home: Buyer SmartSheet"
        On Error Resume Next
        Application.Undo
        Selection.Cells(1).Select
        On Error GoTo 0
        GoTo WayOut
    End If

nxtPhase:
        foundRng = GetAutoFilterRange

           If Left(foundRng, 2) <> "No" And UndoString = "Paste" Then
                On Error Resume Next
                Application.Undo
                On Error GoTo 0
                MsgBox "Please remove filter selection and then use the copy / Paste Function.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
                'SheetProtectUnProtect (True)

            GoTo WayOut
            End If

        Call vbaSmartSheetFunctions.AssignUsrRng(Target)

        If UndoString = "WB" Then GoTo WayOut

        If UndoString = "Auto F" Or UndoString = "Fill" Then
            Dim celDrag
            celDrag = Selection.Columns.Count
                If ((NewCelDragCols <> OldcelDragCols) And (OldcelDragCols <> "") And (NewCelDragCols > 1)) Or (NewCelDragCols > 1 And OldcelDragCols > 1) Then
                'smartws.Cells(smartws.Range("mTab_tRow").Row, Selection(1).Column).Resize(1, Selection.Columns.Count).Copy
                    On Error Resume Next
                    Application.Undo
                    On Error GoTo 0
                    MsgBox "Cell Drag and Drop across multiple columns is restricted.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
                    OldcelDragCols = 1
                    NewCelDragCols = 1
                GoTo WayOut
                End If
        End If
        If UsrRng.HasFormula = True And UsrRng.Column <= smartWS.Range("mTab_Finisher").Column Then
                MsgBox "Copied range has formulas which are referenced to external worksheets / workbooks. SmartSheet is protected from pasting such formulas as they create reference Errors" & vbCrLf & vbCrLf & _
                "Please convert the source range to values and then you can copy paste into this workbook.", vbCritical, "At Home: Buyer-SmartSheet"
                Set zCell = smartWS.Cells(smartWS.Range("mTab_Required").Row, UsrRng.Column)
                    'Application.CutCopyMode = False
                   'zCell.Copy
                    For Each xCell In UsrRng
                        xCell.ClearContents
                        zCell.Copy: xCell.PasteSpecial xlPasteFormats
                        xCell.Locked = False
                        xCell.HorizontalAlignment = xlCenter
                    Next xCell
                    'Application.CutCopyMode = True
                On Error GoTo 0
                GoTo WayOut
        End If

        If (Target.Row > smartWS.Range("mTab_Header").Row And UndoString <> "Paste" And UndoString <> "Auto F" And UndoString <> "Fill") _
        Or (Target(1).Address = smartWS.Range("Department").Address And UndoString <> "Paste" And UndoString <> "Auto F" And UndoString <> "Fill") _
        Or (Target(1).Address = smartWS.Range("VendorNum").Address And UndoString <> "Paste" And UndoString <> "Auto F" And UndoString <> "Fill") Then

            MyVal = smartWS.Range(Target(1).Address)

'[?4/?30/?2019 8:45 AM]  Vidya Shankara: (replaced on May 02 in v5.13)
            #If Mac Then
                Application.StatusBar = "Macro Working...."
                Select Case True
                    Case MyVal = ""
                        UndoString = "Clear"
                    Case MyVal <> ""
                        Dim dList
                        On Error Resume Next: dList = ActiveCell.Validation.Type: On Error GoTo 0
                        Select Case True
                            Case dList = 3: UndoString = "Entry"
                            Case dList = 0 And InStr(foundRng, "Selection") > 0
                            If GetClipboardText <> "" Then
                                UndoString = "Paste" ': mycopyText = ""
                            Else
                                UndoString = "Typing"
                            End If
                            Case dList = 0 And InStr(foundRng, "Target") > 0: UndoString = "Typing"
                        End Select
                End Select
            #End If

            If UndoString = "Paste" Then GoTo pstContinue
            Application.EnableEvents = False
                'If IsEmpty(MyVal) And (UndoString = "Typing" Or UndoString = "Entry") Then MyVal = ""
                If MyVal <> MyOldVal Then
                    On Error Resume Next
                    Application.Undo
                    On Error GoTo 0
                End If

           MyOldVal = smartWS.Range(Target(1).Address) 'smartWS.Range(Target.Address)(1).Value

            If IsEmpty(MyOldVal) = True Then MyOldVal = ""
            If IsEmpty(MyVal) = True Then MyVal = ""
            smartWS.Range(Target.Address) = MyVal
        End If

        If UndoString = "Auto F" Or UndoString = "Fill" Then
            MyVal = smartWS.Range(Target(1).Address)
        End If

pstContinue:
        selFirstRo = Target.Row
        selLastRo = selFirstRo + Selection.Rows.Count - 1
        lastRow = smartWS.Cells(Rows.Count, Range("mTab_Header").Column).End(xlUp).Row
        lastCol = smartWS.Cells(Columns.Count, Range("mtab_Finisher").Column).End(xlUp).Column
        hdrLastRo = smartWS.Range("mtab_Header").Row
        mycolstr = vbaSmartSheetFunctions.ColLtr(CLng(Target.Column))
        mycolstr = mycolstr & ":" & mycolstr



If selFirstRo = hdrLastRo Then GoTo WayOut
'****************************************----------------header events start---------------------*******************************************************
        Set hChanged = Application.Intersect(Target, Columns(CStr(mycolstr)), Rows(smartWS.Range("VendorHidden").Row & ":" & hdrLastRo))

If Target.Row < smartWS.Range("mTab_Header").Row Then

'Protect manual location override
If Target.Row = [Location0].Row - 11 And _
   (Target.Column = [Location1].Column Or Target.Column = [Location2].Column) Then

       If [Location0].Value2 <> "" Then
           If [Location1].Value2 <> [Location0].Value2 Then
               [Location1].Value = [Location0].Value
           End If

           If [Location2].Value2 <> "" Then
               [Location2].Value = ""
           End If
       Else
           If [Location1].Value2 <> 900 Then
               [Location1].Value = 900
           End If
           If [Location2].Value2 <> 920 Then
               [Location2].Value = 920
           End If
       End If
End If

If Target.Row = [ShipPoint2].Row And Target.Column = [ShipPoint2].Column And _
    [Location0].Value2 <> "" And [ShipPoint2].Value2 <> "" Then
    [ShipPoint2].Value = ""
End If
If Target.Row = [TransitDays2].Row And Target.Column = [TransitDays2].Column And _
    [Location0].Value2 <> "" And [TransitDays2].Value2 <> "" Then
    [TransitDays2].Value = ""
End If

    If Not Application.Intersect(hChanged, smartWS.Range("SelectSplit")) Is Nothing Then

UnProtectSheet smartWS.Name
            Select Case True
                Case UndoString = "Typing" Or UndoString = "Entry"
                Call selSplit(ActiveWorkbook.Worksheets(smartWS.Name), Target)

                Case UndoString = "Paste"
                    On Error Resume Next
                    Application.Undo
                    On Error GoTo 0
                    MsgBox "Copy/Paste Restricted on this cell.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
                    ' call vbaSmartSheetFunctions.cellDragDrop(False)
                Case UndoString = "Auto F"

                Case UndoString = "Clear"
                [StoreSplitOld].Value = [StoreSplit].Value
                 UsrRng.MergeArea.ClearContents
                [StoreSplit].Value = 0
                smartWS.Range([SelectSplit].Address).Offset(1, 0) = ""
                smartWS.Range([SelectSplit].Address).Offset(1, 0).Cells.Interior.Color = RGB(255, 255, 255)
                smartWS.Range([SelectSplit].Address).Offset(1, 0).Locked = True
            End Select
            ProtectSheet smartWS.Name
            GoTo WayOut

    ElseIf Not Application.Intersect(hChanged, smartWS.Range("mTab_Required")) Is Nothing Or Not Application.Intersect(hChanged, smartWS.Range("mTabType")) Is Nothing Then
    Select Case True
        Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "Auto F" Or UndoString = "Clear"

        GoTo WayOut
        Case UndoString = "Paste"
            On Error Resume Next
            Application.Undo
            On Error GoTo 0
            MsgBox "Copy/Paste Restricted on this cell.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
            ' call vbaSmartSheetFunctions.cellDragDrop(False)
        GoTo WayOut

    End Select

    ElseIf Not Application.Intersect(hChanged, smartWS.Range("ShipPoint1")) Is Nothing Or Not Application.Intersect(hChanged, smartWS.Range("ShipPoint2")) Is Nothing Then
    Select Case True
        Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "" Or UndoString = "Valida"
                UsrRng.Cells(1, 1) = Target.Value
            GoTo WayOut
        Case UndoString = "Paste"
            On Error Resume Next
            Application.Undo
            On Error GoTo 0
            MsgBox "Copy/Paste Restricted on this cell.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
            ' call vbaSmartSheetFunctions.cellDragDrop(False)

        GoTo WayOut
        Case UndoString = "Auto F"

        GoTo WayOut
        Case UndoString = "Clear"
            UsrRng.ClearContents
        GoTo WayOut
    End Select

'ExpRctDt
    ElseIf Not Application.Intersect(hChanged, smartWS.Range("ExpRctDt")) Is Nothing Then
    Select Case True
        Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "Clear"

        GoTo WayOut
        Case UndoString = "Paste"
            On Error Resume Next
            Application.Undo
            On Error GoTo 0
            MsgBox "Copy/Paste Restricted on this cell.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
            ' call vbaSmartSheetFunctions.cellDragDrop(False)

        GoTo WayOut
        Case UndoString = "Auto F"
                    On Error Resume Next
                    Application.Undo
                    On Error GoTo 0
                    MsgBox "Drag and Drop restrictred on this column. Please choose from the Dropdown values.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"

        GoTo WayOut
    End Select

    ElseIf Not Application.Intersect(hChanged, smartWS.Range("OTBPeriod")) Is Nothing Then
    Select Case True
        Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "" Or UndoString = "Valida"
            For Each xCell In smartWS.Range(Target.Address)
                xCell = Target.Value
            Next xCell
        GoTo WayOut
        Case UndoString = "Paste"
            On Error Resume Next
            Application.Undo
            On Error GoTo 0
            MsgBox "Copy/Paste Restricted on this cell.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
            ' call vbaSmartSheetFunctions.cellDragDrop(False)

        GoTo WayOut
        Case UndoString = "Auto F"
                    On Error Resume Next
                    Application.Undo
                    On Error GoTo 0
                    MsgBox "Drag and Drop restrictred on this column. Please choose from the Dropdown values.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"

        GoTo WayOut
        Case UndoString = "Clear"
            UsrRng.MergeArea.ClearContents
UnProtectSheet smartWS.Name
            [TransitDays1].ClearContents
            [TransitDays2].ClearContents
ProtectSheet smartWS.Name
        GoTo WayOut

    End Select


    ElseIf Not Application.Intersect(hChanged, smartWS.Range("Commission")) Is Nothing Then
    Select Case True
        Case UndoString = "Typing" Or UndoString = "Entry"
                    If Trim(hChanged) <> "" Then
                        If Not IsNumeric(Trim(hChanged)) Then GoTo commClear
                            For Each xCell In UsrRng
                                    xCell.Value = Format(MyVal * 100 / 100, "Percent")
                                    xCell.Cells.Interior.Color = xlNone
                            Next xCell
                    End If
        GoTo WayOut
        Case UndoString = "Paste"
            On Error Resume Next
            Application.Undo
            On Error GoTo 0
            MsgBox "Copy/Paste Restricted on this cell.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
            ' call vbaSmartSheetFunctions.cellDragDrop(False)

        GoTo WayOut
        Case UndoString = "Auto F"

        GoTo WayOut
        Case UndoString = "Clear"
commClear:
                    If UndoString = "Typing" Or UndoString = "Entry" Then
                        UsrRng(1).Value = 0
                    ElseIf UndoString = "Paste" Then
                        For Each xCell In UsrRng
                            xCell(1).Value = 0
                        Next xCell
                    End If
                    UsrRng(1).Value = 0
                    UsrRng.MergeArea.Cells.NumberFormat = "0.00%"
        GoTo WayOut
    End Select

    ElseIf Not Application.Intersect(hChanged, smartWS.Range("ApproverSign")) Is Nothing Then
    Select Case True
        Case UndoString = "Typing" Or UndoString = "Entry"
           Target(1).Value = UCase(Trim(Target))
        GoTo WayOut
        Case UndoString = "Paste"
            On Error Resume Next
            Application.Undo
            On Error GoTo 0
            MsgBox "Copy/Paste Restricted on this cell.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
            ' call vbaSmartSheetFunctions.cellDragDrop(False)
        GoTo WayOut
        Case UndoString = "Clear" Or UndoString = "Auto F"

        GoTo WayOut
    End Select

    ElseIf Not Application.Intersect(hChanged, smartWS.Range("OTBDollar")) Is Nothing Or Not Application.Intersect(hChanged, smartWS.Range("mTab_FobShipment")) Is Nothing _
            Or Not Application.Intersect(hChanged, smartWS.Range("ImpOrDom")) Is Nothing Or Not Application.Intersect(hChanged, smartWS.Range("HmfMpf")) Is Nothing _
            Or Not Application.Intersect(hChanged, smartWS.Range("DmgAlw")) Is Nothing Or Not Application.Intersect(hChanged, smartWS.Range("MktgAlw")) Is Nothing _
            Or Not Application.Intersect(hChanged, smartWS.Range("TradeAlw")) Is Nothing _
            Or Not Application.Intersect(hChanged, smartWS.Range("NewStrAlw")) Is Nothing Or Not Application.Intersect(hChanged, smartWS.Range("Allowances")) Is Nothing _
            Or Not Application.Intersect(hChanged, smartWS.Range("xDepartment")) Is Nothing Or Not Application.Intersect(hChanged, smartWS.Range(Range("mTab_Header"), Range("mtab_Finisher"))) Is Nothing Then
    Select Case True
        Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "Auto F" Or UndoString = "Clear" Or UndoString = "" Or UndoString = "Valida"

        GoTo WayOut
        Case UndoString = "Paste"
            On Error Resume Next
            Application.Undo
            On Error GoTo 0
            MsgBox "Copy/Paste Restricted on this cell.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
            ' call vbaSmartSheetFunctions.cellDragDrop(False)

        GoTo WayOut
    End Select

    ElseIf Not Application.Intersect(hChanged, smartWS.Range("CP_SKU")) Is Nothing Or Not Application.Intersect(hChanged, smartWS.Range("CP_BuyQty")) Is Nothing _
                    Or Not Application.Intersect(hChanged, smartWS.Range("CP_BuyRet")) Is Nothing Or Not Application.Intersect(hChanged, smartWS.Range("CP_IMU1")) Is Nothing _
                    Or Not Application.Intersect(hChanged, smartWS.Range("CP_IMU2")) Is Nothing Or Not Application.Intersect(hChanged, smartWS.Range("CP_Blended")) Is Nothing Then
    Select Case True
        Case UndoString = "Typing" Or UndoString = "Entry"
                UsrRng = Target.Value
        GoTo WayOut
        Case UndoString = "Paste"
            On Error Resume Next
            Application.Undo
            On Error GoTo 0
            MsgBox "Copy/Paste Restricted on this cell.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
        GoTo WayOut
        Case UndoString = "Auto F"
            On Error Resume Next
            Application.Undo
            On Error GoTo 0
            MsgBox "Drag and Drop Restricted on this cell.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
        GoTo WayOut
        Case UndoString = "Clear"
            UsrRng.ClearContents
        GoTo WayOut
    End Select

    ElseIf Not Application.Intersect(hChanged, smartWS.Range("Location0")) Is Nothing Then
    Select Case True
        Case UndoString = "Typing" Or UndoString = "Entry"
        Dim xloc
            #If Mac Then
                xloc = macChkNumbersnLgth(smartWS.Range(hChanged.Address), 3)
            #Else
                xloc = vbaSmartSheetFunctions.chkNumbersnLgth(smartWS.Range(hChanged.Address), 3)
            #End If
            If xloc = "" Then GoTo clrLoc

            If ((IsNumeric(hChanged.Value) And (hChanged.Value < 1)) And (smartWS.Range("SelectSplit")) = "SINGLE STORE/DC") Then
                MsgBox "You need to enter a Location in this cell since you have selected Single Store/DC as the Split Type." & vbCrLf & vbCrLf & "Please change the Store Split type to a value other than 'SINGLE STORE/DC' to clear off the value in cell 'C13'." _
                        , vbCritical, "At Home: Buyer SmartSheet|fffd|"
                GoTo WayOut
            End If

            If IsNumeric([Location0].Value2) And [Location0].Value2 <> "" Then
                [Location1].Value = [Location0].Value: [Location2].Value = "": [ShipPoint2].Value = "": [TransitDays2].Value = "": [DNSA2].Value = "": [DNSB2].Value = ""
            Else
                [Location1].Value = 900: [Location2].Value = 920
            End If

        GoTo WayOut
        Case UndoString = "Paste"
            On Error Resume Next
            Application.Undo
            On Error GoTo 0
            MsgBox "Copy/Paste Restricted on this cell.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
            ' call vbaSmartSheetFunctions.cellDragDrop(False)
        GoTo WayOut
        Case UndoString = "Auto F"

        GoTo WayOut
        Case UndoString = "Clear"
clrLoc:
            On Error Resume Next
            Application.Undo
            On Error GoTo 0
            If [Location0] <> "" Then
                MsgBox "You need to enter a Location in this cell since you have selected Single Store/DC as the Split Type." & vbCrLf & vbCrLf & "Please change the Store Split type to a value other than 'SINGLE STORE/DC' to clear off the value in cell 'C13'." _
                        , vbCritical, "At Home: Buyer SmartSheet|fffd|"
            End If
            ' call vbaSmartSheetFunctions.cellDragDrop(False)
        GoTo WayOut
    End Select

    ElseIf Not Application.Intersect(hChanged, smartWS.Range("VendorNum")(1)) Is Nothing Then
    Select Case True
        Case UndoString = "Typing" Or UndoString = "Entry"
        If MyVal = MyOldVal Then
            [VendorNum].Interior.Color = xlNone
            GoTo WayOut
        End If
        If MyVal = "" And MyOldVal <> "" Then GoTo venNClear
            #If Mac Then
                Call macChkNumbersnLgth(smartWS.Range(hChanged.Address), 6)
                MsgBox "You are using MAC OS. Hence Vendor Name could not be fetched from JDA. Please use Windows OS to get full features of SmartSheet", vbInformation, "At Home: Buyer-SmartSheet"
            #Else
                Call vbaSmartSheetFunctions.chkNumbersnLgth(smartWS.Range(hChanged.Address), 6)
                Call vbaSmartSheetFunctions.FetchVendorInfo(CLng(hChanged))
            #End If
        GoTo WayOut
        Case UndoString = "Paste"
            On Error Resume Next
            Application.Undo
            On Error GoTo 0
            MsgBox "Copy/Paste Restricted on this cell.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
            ' call vbaSmartSheetFunctions.cellDragDrop(False)
        GoTo WayOut
        Case UndoString = "Auto F"

        GoTo WayOut
        Case UndoString = "Clear"
venNClear:
            smartWS.Range("VendorNum")(1).Offset(1, 0).MergeArea.ClearContents
            [VendorNum].Interior.Color = xlNone
        GoTo WayOut
    End Select
    ElseIf Not Application.Intersect(hChanged, smartWS.Range("mTab_ExtPONotes")) Is Nothing Then
'Checks for Special Characters and removes them. Also truncates the text to 43 Characters
Select Case True
        Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = ""
              If IsNull(Trim(hChanged)) Or IsEmpty(Trim(hChanged)) Or Trim(hChanged) = "" Then GoTo chkClrExt
                Call vbaSmartSheetFunctions.clrSplChars(smartWS.Range(hChanged.Address), 43)
                If smartWS.Range("ExtNote1").Address = hChanged.Address Then
                    If MsgBox("Set the same note to External Note 2 as well?", vbQuestion + vbYesNo, "At Home: Buyer SmartSheet|fffd|") = vbYes Then
                        hChanged.Offset(1, 0)(1).Value = smartWS.Range(hChanged.Address)
                    End If
                End If
        GoTo WayOut
        Case UndoString = "Paste"
            Call vbaSmartSheetFunctions.clrSplChars(smartWS.Range(hChanged(1).Address), 43)
                        smartWS.Cells(smartWS.Range("ex_ExtNote").Row, UsrRng.Column).Copy
                        UsrRng.MergeArea.PasteSpecial xlPasteFormats
                        UsrRng.PasteSpecial xlPasteValidation
                        With UsrRng.MergeArea.Borders
                            .LineStyle = xlContinuous
                            .Weight = xlThin
                            .Color = vbBlack
                        End With
                        UsrRng.MergeArea.Cells.Locked = False
        GoTo WayOut
        Case UndoString = "Auto F"

        GoTo WayOut
        Case UndoString = "Clear"
chkClrExt:
                If hChanged.Address = smartWS.Range("ExtNote1").Address Then
                    hChanged.MergeArea.ClearContents
                If hChanged.Offset(1, 0)(1) = "" Then GoTo WayOut
                    If MsgBox("No data entered. Clear External Note 2 as well?", vbQuestion + vbYesNo, "At Home: Buyer SmartSheet|fffd|") = vbYes Then
                        hChanged.Offset(1, 0).MergeArea.ClearContents
                    End If
                ElseIf hChanged.Address = smartWS.Range("ExtNote2").Address Then
                    hChanged.MergeArea.ClearContents
                End If
        GoTo WayOut
    End Select

GoTo WayOut


    ElseIf Not Application.Intersect(hChanged, smartWS.Range("mTab_IntPONotes")) Is Nothing Then
'Checks for Special Characters and removes them. Also truncates the text to 100 Characters

    Select Case True
        Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = ""
        If IsNull(Trim(hChanged)) Or IsEmpty(Trim(hChanged)) Or Trim(hChanged) = "" Then GoTo chkClrInt
                Call vbaSmartSheetFunctions.clrSplChars(smartWS.Range(hChanged.Address), 100)
                If hChanged.Address = smartWS.Range("IntNote1").Address Then
                    'hChanged.Offset(1, 0)(1).Value = vbaSmartSheetFunctions.chkSplChrnLgth(Range(hChanged.Address), 100)
                     hChanged.Offset(1, 0)(1).Value = smartWS.Range(hChanged.Address)
                End If
        GoTo WayOut
        Case UndoString = "Paste"
                        #If Mac Then
                            macChkSplChrnLgth UsrRng, 100
                        #Else
                            Call vbaSmartSheetFunctions.chkSplChrnLgth(UsrRng, 100)
                        #End If
                        smartWS.Cells(smartWS.Range("ex_IntNote").Row, UsrRng.Column).Copy
                        UsrRng.MergeArea.PasteSpecial xlPasteFormats
                        UsrRng.PasteSpecial xlPasteValidation
                        With UsrRng.MergeArea.Borders
                            .LineStyle = xlContinuous
                            .Weight = xlThin
                            .Color = vbBlack
                        End With
                        UsrRng.MergeArea.Cells.Locked = False
                        Call vbaSmartSheetFunctions.clrSplChars(smartWS.Range(hChanged(1).Address), 100)
        GoTo WayOut
        Case UndoString = "Auto F"

        GoTo WayOut
        Case UndoString = "Clear"
chkClrInt:
            If hChanged.Address = smartWS.Range("IntNote1").Address Then
                hChanged.MergeArea.ClearContents
                If hChanged.Offset(1, 0)(1) = "" Then GoTo WayOut
                If MsgBox("No data entered. Clear Internal Note 2 as well?", vbQuestion + vbYesNo, "At Home: Buyer SmartSheet|fffd|") = vbYes Then
                    hChanged.Offset(1, 0).MergeArea.ClearContents
                End If
            ElseIf hChanged.Address = smartWS.Range("IntNote2").Address Then
                hChanged.MergeArea.ClearContents
            End If
        GoTo WayOut
    End Select

    ElseIf Not Application.Intersect(hChanged, smartWS.Range("BuyNote")) Is Nothing Then
'Checks for Special Characters and removes them. Also truncates the text to 300 Characters

    Select Case True
        Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = ""
        If IsNull(Trim(hChanged)) Or IsEmpty(Trim(hChanged)) Or Trim(hChanged) = "" Then GoTo WayOut
                'Call vbaSmartSheetFunctions.chkSplChrnLgth Range(hChanged.Address), 300
                Call vbaSmartSheetFunctions.clrSplChars(smartWS.Range(hChanged.Address), 300)
        GoTo WayOut
        Case UndoString = "Paste"
'                UsrRng.MergeArea.Cells(1).PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
'                Application.CutCopyMode = False
                        smartWS.Cells(smartWS.Range("ex_BuyNote").Row, UsrRng.Column).Copy
                        UsrRng.MergeArea.PasteSpecial xlPasteFormats
                        UsrRng.PasteSpecial xlPasteValidation
                        With UsrRng.MergeArea.Borders
                            .LineStyle = xlContinuous
                            .Weight = xlThin
                            .Color = vbBlack
                        End With
                        UsrRng.MergeArea.Cells.Locked = False
                Call vbaSmartSheetFunctions.clrSplChars(smartWS.Range(hChanged(1).Address), 300)

        GoTo WayOut
        Case UndoString = "Auto F"

        GoTo WayOut
        Case UndoString = "Clear"
            UsrRng.MergeArea.ClearContents
        GoTo WayOut
    End Select

    ElseIf Not Application.Intersect(hChanged, smartWS.Range("DistMeth")) Is Nothing Then
'Checks for Numbers. Also truncates the text to 3 Characters

    Select Case True
        Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "" Or UndoString = "Valida"

        Select Case True
            Case hChanged = "C=VENDOR PACK"
                If MsgBox("Selection option doesnt allow Nested SKU entries. If already entered, they will be cleared! Continue?", vbQuestion + vbYesNo + vbDefaultButton2, "At Home: Buyer SmartSheet|fffd|") = vbYes Then
                    smartWS.Range("NestedSKURng").ClearContents
                    smartWS.Range("NestedSKURng").Cells.Locked = True
                Else
                    On Error Resume Next
                    Application.Undo
                    On Error GoTo 0
                End If
            Case hChanged = "2=PREDIST"
                smartWS.Range("NestedSKURng").Cells.Locked = False
            Case hChanged = "3=DIRECT TO STORE"
                smartWS.Range("NestedSKURng").Cells.Locked = False
        End Select


        GoTo WayOut
        Case UndoString = "Paste"
            On Error Resume Next
            Application.Undo
            On Error GoTo 0
            MsgBox "Copy/Paste Restricted on this cell.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
            ' call vbaSmartSheetFunctions.cellDragDrop(False)
        GoTo WayOut
        Case UndoString = "Auto F" Or UndoString = "Clear"

        GoTo WayOut
    End Select

     ElseIf Not Application.Intersect(hChanged, smartWS.Range("Buyer")) Is Nothing Then
'Checks for Numbers. Also truncates the text to 3 Characters

    Select Case True
        Case UndoString = "Typing" Or UndoString = "Entry"
            If Not (IsNull(hChanged) Or IsEmpty(hChanged) Or hChanged.Value = "") Then
            #If Mac Then
                Call macChkNumbersnLgth(smartWS.Range(hChanged.Address), 6)
            #Else
                Call vbaSmartSheetFunctions.chkNumbersnLgth(smartWS.Range(hChanged.Address), 6)
            #End If
            End If

        GoTo WayOut
        Case UndoString = "Paste"
            On Error Resume Next
            Application.Undo
            On Error GoTo 0
            MsgBox "Copy/Paste Restricted on this cell.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
            ' call vbaSmartSheetFunctions.cellDragDrop(False)

        GoTo WayOut
        Case UndoString = "Auto F" Or UndoString = "Clear"

        GoTo WayOut
    End Select
    End If
End If

'****************************************----------------header events end---------------------*******************************************************

' BELOW SELECT CASE STATEMENTS ARE RUN FOR THE SKU LEVEL ENTRIES
         Set rChanged = Application.Intersect(Target, Columns(CStr(mycolstr)), Rows(Range("mTab_Header").Row + 1 & ":" & lastRow))

    Select Case True
'=======================================================================================================================================================
'--> Events based Department selection or deletion.
'=======================================================================================================================================================
'Case smartws.Range("Department")(1).Column
        Case InStr(Target.Address, smartWS.Range("Department")(1).Address) > 0
            Select Case True

                Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = ""
                    If MyVal = MyOldVal Then GoTo WayOut
                    If MyVal = "" And MyOldVal <> "" Then GoTo depClear
                        If Application.WorksheetFunction.CountBlank(smartWS.Range("SubDeptRng")) < 150 Then
                            If MsgBox("Changing the Department will clear the related Sub Department, Class and Sub Class entries across the sheet." & vbNewLine & vbNewLine & "Do you want to continue?", vbQuestion + vbYesNo + vbDefaultButton2, "At Home: Buyer SmartSheet|fffd|") = vbYes Then
                                    Call vbaSmartSheetFunctions.Get_Dept_Cls_sCls(Target.Value)
                                    If [VendorName] = "" And [VendorNum] <> "" Then
                                    #If Mac Then
                                        MsgBox "You are using MAC OS. Hence Vendor Name could not be fetched from JDA. Please use Windows OS to get full features of SmartSheet", vbInformation, "At Home: Buyer-SmartSheet"
                                    #Else
                                        Call vbaSmartSheetFunctions.FetchVendorInfo(CLng([VendorNum]))
                                    #End If
                                    End If
                            Else
                                    smartWS.Range("Department")(1).Value = MyOldVal
                                    GoTo WayOut
                            End If
                        Else
                            Call vbaSmartSheetFunctions.Get_Dept_Cls_sCls(Target.Value)
                                If [VendorName] = "" And [VendorNum] <> "" Then
                                    #If Mac Then
                                        MsgBox "You are using MAC OS. Hence Vendor Name could not be fetched from JDA. Please use Windows OS to get full features of SmartSheet", vbInformation, "At Home: Buyer-SmartSheet"
                                    #Else
                                        Call vbaSmartSheetFunctions.FetchVendorInfo(CLng([VendorNum]))
                                    #End If
                                End If
                        End If

                        UnProtectSheet smartWS.Name
                        On Error Resume Next
                        [xDepartment] = CLng(Format(Left([Department].Value, InStr(1, [Department].Value, "-", vbTextCompare) - 1), "000"))
                        On Error GoTo 0
                        ProtectSheet smartWS.Name

                Case UndoString = "Paste"
                    On Error Resume Next
                    Application.Undo
                    On Error GoTo 0
                    MsgBox "Copy/Paste Restricted on this column. Please choose from the Dropdown values.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"

                Case UndoString = "Auto F"
                    On Error Resume Next
                    Application.Undo
                    On Error GoTo 0
                    MsgBox "Drag and Drop restrictred on this column. Please choose from the Dropdown values.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"

                Case UndoString = "Clear"
depClear:
       If Application.WorksheetFunction.CountBlank(smartWS.Range("SubDeptRng")) < 150 Then
            If MsgBox("Changing the Department will clear the related Sub Department, Class and Sub Class entries across the sheet." & _
                            vbNewLine & vbNewLine & "Do you want to continue?", vbQuestion + vbYesNo + vbDefaultButton2, "At Home: Buyer SmartSheet|fffd|") = vbYes Then
                smartWS.Range("mTab_Header").Offset(1, 8).Resize(smartWS.Range("SKURng").Count, 3).ClearContents
                smartWS.Range("mTab_Header").Offset(1, 8).Resize(smartWS.Range("SKURng").Count, 3).Validation.Delete
                [xDepartment] = ""
            End If
        ElseIf Application.WorksheetFunction.CountBlank(smartWS.Range("SubDeptRng")) = 150 Then
            smartWS.Range("mTab_Header").Offset(1, 8).Resize(smartWS.Range("SKURng").Count, 3).ClearContents
            smartWS.Range("mTab_Header").Offset(1, 8).Resize(smartWS.Range("SKURng").Count, 3).Validation.Delete
            [xDepartment] = ""
        Else
            On Error Resume Next
            Application.Undo
            UnProtectSheet smartWS.Name
            [xDepartment] = CLng(Format(Left([Department].Value, InStr(1, [Department].Value, "-", vbTextCompare) - 1), "000"))
            ProtectSheet smartWS.Name
            On Error GoTo 0
        End If
            End Select

'=======================================================================================================================================================
'--> Events based SubDepartment selection or deletion.
'=======================================================================================================================================================
        Case rChanged.Column = smartWS.Range("mtab_sdept").Column
            Dim xvalTyp
            Select Case True

                Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "Fill"
                    If MyVal = MyOldVal Then GoTo WayOut
                    If MyVal = "" And MyOldVal <> "" Then GoTo sDepClear

                        Call vbaSmartSheetFunctions.Get_Dept_Cls_sCls(smartWS.Range("Department"), CStr(MyVal))

                                For Each xCell In UsrRng
                                    On Error Resume Next
                                    xvalTyp = 0: xvalTyp = xCell.Validation.Type
                                    On Error GoTo 0
                                        If xvalTyp = 3 Then
                                            xCell.Value = MyVal
                                        Else
                                            xCell.ClearContents
                                        End If
                                Next xCell

                Case UndoString = "Paste"
                    On Error Resume Next
                    Application.Undo
                    On Error GoTo 0
                    MsgBox "Copy/Paste Restricted on this column. Please choose from the Dropdown values.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
                    ' call vbaSmartSheetFunctions.cellDragDrop(False)

                Case UndoString = "Auto F"
                    On Error Resume Next
                    Application.Undo
                    On Error GoTo 0
                    MsgBox "Drag and Drop restrictred on this column. Please choose from the Dropdown values.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
                Case UndoString = "Clear"
sDepClear:

                For Each xCell In UsrRng
                    xCell.Offset(, 1).Resize(, 2).ClearContents
                    xCell.Offset(, 1).Resize(, 2).Validation.Delete
                Next xCell


            End Select

'=======================================================================================================================================================
'--> Events based Class selection or deletion.
'=======================================================================================================================================================
        Case rChanged.Column = smartWS.Range("mTab_ClassRng").Column
        Dim ofsRow
            Select Case True

                Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "Fill"
                    If MyVal = MyOldVal Then GoTo WayOut
                    If MyVal = "" And MyOldVal <> "" Then GoTo clsClear

                        Dim mCls, vCls, valCls, oCel, vCelTyp

                        For Each oCel In UsrRng
                            valCls = "": vCelTyp = 0: vCls = 0
                            On Error Resume Next
                            vCelTyp = oCel.Validation.Type
                            'valCls = oCel.Validation.Formula1
                            Set valCls = hierWS.Range(Mid(oCel.Validation.Formula1, 2))
                            vCls = Application.WorksheetFunction.Match(MyVal, valCls, 0)
                            On Error GoTo 0
                                If vCelTyp = 3 Then
                                    If vCls = 0 Then
                                        On Error Resume Next
                                        UsrRng.ClearContents
                                        On Error GoTo 0
                                        MsgBox "Class: """ & MyVal & """ not found in the dropdown for the Sub Department: " & oCel.Offset(, -1) & "." _
                                        & vbCrLf & vbCrLf & " Please select Classes separately where Sub Departments are different in the selected range.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
                                        'UnProtectSheet (ActiveSheet.name)
                                        GoTo clsClear
                                        GoTo WayOut
                                    End If
                                ElseIf vCelTyp <> 3 Then
                                    On Error Resume Next
                                    UsrRng.ClearContents
                                    On Error GoTo 0
                                    MsgBox "Sub Department not selected for the row " & oCel.Row & "." _
                                    & " Please enter Sub Department for the Items before selecting its Classes.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
                                    'UnProtectSheet (ActiveSheet.name)
                                    GoTo WayOut
                                End If
                        Next oCel
                    ofsRow = (Target.Row) - (smartWS.Range("mtab_Header").Row)
                    Call vbaSmartSheetFunctions.Get_Dept_Cls_sCls(smartWS.Range("Department"), CStr(smartWS.Range("SubDeptRng")(ofsRow)), CStr(MyVal))
                                For Each xCell In UsrRng
                                    On Error Resume Next
                                    xvalTyp = 0: xvalTyp = xCell.Validation.Type
                                    On Error GoTo 0
                                        If xvalTyp = 3 Then
                                            xCell.Value = MyVal
                                        Else
                                            xCell.ClearContents
                                        End If
                                Next xCell

                Case UndoString = "Paste"
                    On Error Resume Next
                    Application.Undo
                    On Error GoTo 0
                    MsgBox "Copy/Paste Restricted on this column. Please choose from the Dropdown values.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
                    ' call vbaSmartSheetFunctions.cellDragDrop(False)

                Case UndoString = "Auto F"
                    On Error Resume Next
                    Application.Undo
                    On Error GoTo 0
                    MsgBox "Drag and Drop restrictred on this column. Please choose from the Dropdown values.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
                Case UndoString = "Clear"
clsClear:

                For Each xCell In UsrRng
                    xCell.Offset(, 1).Resize(, 1).ClearContents
                    xCell.Offset(, 1).Resize(, 1).Validation.Delete
                Next xCell

            End Select

'=======================================================================================================================================================
'--> Events based SubClass selection or deletion.
'=======================================================================================================================================================
        Case rChanged.Column = smartWS.Range("mtab_SubClass").Column

            Select Case True

            Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "Fill"
                If MyVal = MyOldVal Then GoTo WayOut
                If MyVal = "" And MyOldVal <> "" Then GoTo sClsClear

                'instr(oCel.Validation.Formula1,"!")+1
                For Each oCel In UsrRng
                    valCls = "": vCelTyp = 0: vCls = 0
                    On Error Resume Next
                    vCelTyp = oCel.Validation.Type
                    'valCls = oCel.Validation.Formula1
                    Set valCls = hierWS.Range(Mid(oCel.Validation.Formula1, 2))
                    vCls = Application.WorksheetFunction.Match(MyVal, valCls, 0)
                    On Error GoTo 0
                        If vCelTyp = 3 Then
                            If vCls = 0 Then
                                On Error Resume Next
                                UsrRng.ClearContents
                                On Error GoTo 0
                                MsgBox "Sub Class: """ & MyVal & """ not found in the dropdown for the Class " & oCel.Offset(, -1) & "." _
                                & vbCrLf & vbCrLf & " Please select Sub Classes separately where Classes are different in the selected range.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
                                'UnProtectSheet (ActiveSheet.name)
                            GoTo WayOut
                            End If
                        ElseIf vCelTyp <> 3 Then
                            On Error Resume Next
                            UsrRng.ClearContents
                            On Error GoTo 0
                                MsgBox "Class not selected for the row " & oCel.Row & "." _
                                    & " Please enter Classes for the Items before selecting its Sub Classes.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
                            'UnProtectSheet (ActiveSheet.name)
                            GoTo WayOut
                        End If
                Next oCel

                                For Each xCell In UsrRng
                                    On Error Resume Next
                                    xvalTyp = 0: xvalTyp = xCell.Validation.Type
                                    On Error GoTo 0
                                        If xvalTyp = 3 Then
                                            xCell.Value = MyVal
                                        Else
                                            xCell.ClearContents
                                        End If
                                Next xCell

        Case UndoString = "Paste"
            On Error Resume Next
            Application.Undo
            On Error GoTo 0
            MsgBox "Copy/Paste Restricted on this cell.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
            ' call vbaSmartSheetFunctions.cellDragDrop(False)

        Case UndoString = "Auto F" Or UndoString = "Clear"
sClsClear:
    End Select

'Validate columns in List1
'=======================================================================================================================================================
'--> Events based SKU selection or deletion.
'=======================================================================================================================================================
        Case rChanged.Column = smartWS.Range("SKURng").Column

            Select Case True
                Case UndoString = "Typing" Or UndoString = "Entry"
                If MyVal = MyOldVal Then GoTo WayOut
                If MyVal = "" And MyOldVal <> "" Then GoTo clearSKU

                If UsrRng.Cells.Count > 1 Then
                    UsrRng.ClearContents
                    MsgBox "Please select a single row to continue. SKU should be unique." & vbNewLine & "Data (if " & MyVal & " is not a duplicate) will be entered only in the active cell.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
                    With UsrRng.Cells(1)
                            If IsNumeric(MyVal) Then
                               .Value = MyVal
                               .Select
                            Else
                                .Value = ""
                                .Select
                            End If
                    End With
                Else
                    With UsrRng
                        .Value = MyVal
                    End With
                End If

            #If Mac Then
                Call macChkNumbersnLgth(UsrRng, 9)
            #Else
                Call vbaSmartSheetFunctions.chkNumbersnLgth(UsrRng, 9)
            #End If
                Call vbaSmartSheetFunctions.chkDuplicate(UsrRng)
                GoTo WayOut
                Case UndoString = "Paste"
                        For Each xCell In UsrRng
                                xCell.Value = Trim(xCell.Value)
                                smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                                xCell.PasteSpecial xlPasteFormats
                                xCell.PasteSpecial xlPasteValidation
                                xCell.Cells.Locked = False
                                xCell.Cells.HorizontalAlignment = xlCenter
                        Next xCell
                    #If Mac Then
                        Call macChkNumbersnLgth(UsrRng, 9)
                    #Else
                        Call vbaSmartSheetFunctions.chkNumbersnLgth(UsrRng, 9)
                    #End If
                    Call vbaSmartSheetFunctions.chkDuplicate(UsrRng)
            Application.CutCopyMode = True

                GoTo WayOut
                Case UndoString = "Auto F" Or UndoString = "Fill"
            #If Mac Then
                Call macChkNumbersnLgth(UsrRng, 9)
            #Else
                Call vbaSmartSheetFunctions.chkNumbersnLgth(UsrRng, 9)
            #End If
                Call vbaSmartSheetFunctions.chkDuplicate(UsrRng)
            GoTo WayOut
                Case UndoString = "Clear"
clearSKU:
                If UsrRng.Cells.Count > 1 Then
                            For Each xCell In UsrRng
                                xmSKU = xCell.Value
                                xCell.ClearContents
                            Next xCell
                Else
                        For Each xCell In UsrRng
                            xmSKU = xCell.Value
                            xCell.ClearContents
                        Next xCell
                End If

                Call vbaSmartSheetFunctions.chkDuplicate(smartWS.Range(UsrRng.Address))
                GoTo WayOut
            End Select

'=======================================================================================================================================================
'--> Events based Item Description selection and Ecomm Description selection or deletion.
'=======================================================================================================================================================
        Case rChanged.Column = smartWS.Range("ItemDescrRng").Column Or rChanged.Column = smartWS.Range("EcommDescRng").Column

            Select Case True
                Case UndoString = "Typing" Or UndoString = "Entry"
                    For Each xCell In UsrRng
                        xCell.Value = MyVal
                    Next xCell
                'Call vbaSmartSheetFunctions.chkSplChrnLgth smartWS.Range(UsrRng.Address), 30
               Call vbaSmartSheetFunctions.clrSplChars(smartWS.Range(UsrRng.Address), 30)
                GoTo WayOut
                Case UndoString = "Paste" Or UndoString = "Fill"
                        For Each zCell In UsrRng
                            smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                            zCell.PasteSpecial xlPasteFormats
                            zCell.PasteSpecial xlPasteValidation
                            zCell.Cells.Locked = False
                            zCell.Cells.HorizontalAlignment = xlLeft
                        Next zCell
                        'Call vbaSmartSheetFunctions.chkSplChrnLgth smartWS.Range(UsrRng.Address), 30
                Call vbaSmartSheetFunctions.clrSplChars(smartWS.Range(UsrRng.Address), 30)
                GoTo WayOut
                Case UndoString = "Auto F"
                    'Call vbaSmartSheetFunctions.chkSplChrnLgth smartWS.Range(UsrRng.Address), 30
                    Call vbaSmartSheetFunctions.clrSplChars(smartWS.Range(UsrRng.Address), 30)
                GoTo WayOut
                Case UndoString = "Clear"
                        For Each xCell In UsrRng
                            xmSKU = xCell.Value
                            xCell.ClearContents
                        Next xCell
                GoTo WayOut
            End Select

'=======================================================================================================================================================
'--> Events based NestedSKURng selection or deletion.
'=======================================================================================================================================================
Case rChanged.Column = smartWS.Range("NestedSKURng").Column

            Select Case True
                Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "Auto F" Or UndoString = "Fill"
                    If IsNumeric(MyVal) = False Then GoTo nstClear
                    For Each xCell In UsrRng
                        If IsNumeric(MyVal) Then
                            xCell.Value = Int(MyVal)
                        Else
                            xCell.Value = ""
                        End If
                    Next xCell
            #If Mac Then
                Call macChkNumbersnLgth(UsrRng, 3)
            #Else
                Call vbaSmartSheetFunctions.chkNumbersnLgth(UsrRng, 3)
            #End If
            GoTo WayOut
                Case UndoString = "Paste"
                    For Each xCell In UsrRng
                    If IsNumeric(xCell) = False Then xCell.ClearContents
                        If IsNumeric(MyVal) Then
                            xCell.Value = Int(MyVal)
                        Else
                            xCell.Value = ""
                        End If
                        smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                        xCell.PasteSpecial xlPasteFormats
                        xCell.PasteSpecial xlPasteValidation
                        xCell.Cells.Locked = False
                        xCell.Cells.HorizontalAlignment = xlCenter
                    Next xCell
            #If Mac Then
                Call macChkNumbersnLgth(UsrRng, 3)
            #Else
                Call vbaSmartSheetFunctions.chkNumbersnLgth(UsrRng, 3)
            #End If
            GoTo WayOut
                Case UndoString = "Clear"
nstClear:
                For Each xCell In UsrRng
                    xCell.ClearContents
                Next xCell

                GoTo WayOut
            End Select
'=======================================================================================================================================================
'--> Events based Quality Desc and Archetype selection or deletion.
'=======================================================================================================================================================
        Case rChanged.Column = smartWS.Range("QualityDescRng").Column Or rChanged.Column = smartWS.Range("ArchDescRng").Column

            Select Case True
                Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = ""
                        For Each xCell In UsrRng
                            xCell.Value = MyVal
                        Next xCell
                GoTo WayOut
                Case UndoString = "Paste"
                    On Error Resume Next
                    Application.Undo
                    On Error GoTo 0
                    MsgBox "Copy/Paste Restricted on this column. Please choose from the Dropdown values.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"

                GoTo WayOut
                Case UndoString = "Auto F" Or UndoString = "Clear"

                GoTo WayOut
            End Select

''=======================================================================================================================================================
'--> Events based Vendor Part Number selection or deletion.
'=======================================================================================================================================================
       Case rChanged.Column = smartWS.Range("VPNRng").Column

            Select Case True
                Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "Auto F"
                        If UndoString = "Auto F" Then MyVal = ActiveCell.Value
                        For Each xCell In UsrRng
                            xCell = MyVal
                        Next xCell
                        #If Mac Then
                            macChkSplChrnLgth UsrRng, 15
                        #Else
                            Call vbaSmartSheetFunctions.chkSplChrnLgth(UsrRng, 15)
                        #End If
                    Call vbaSmartSheetFunctions.chkDuplicate(UsrRng)
                    Application.CutCopyMode = True
                GoTo WayOut
                Case UndoString = "Paste"
                    For Each xCell In UsrRng
                        smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                        xCell.PasteSpecial xlPasteFormats
                        xCell.PasteSpecial xlPasteValidation
                        xCell.Cells.Locked = False
                        xCell.Cells.HorizontalAlignment = xlCenter
                    Next xCell
                        #If Mac Then
                            macChkSplChrnLgth UsrRng, 15
                        #Else
                            Call vbaSmartSheetFunctions.chkSplChrnLgth(UsrRng, 15)
                        #End If
                    Call vbaSmartSheetFunctions.chkDuplicate(smartWS.Range(UsrRng.Address))
                    Application.CutCopyMode = True
                GoTo WayOut
                Case UndoString = "Fill"
                        #If Mac Then
                            macChkSplChrnLgth UsrRng, 15
                        #Else
                            Call vbaSmartSheetFunctions.chkSplChrnLgth(UsrRng, 15)
                        #End If
                    Call vbaSmartSheetFunctions.chkDuplicate(smartWS.Range(UsrRng.Address))
                GoTo WayOut
                Case UndoString = "Clear"
                If UsrRng.Cells.Count > 1 Then
                        For Each xCell In UsrRng
                            xmSKU = xCell.Value
                            xCell.ClearContents
                        Next xCell
                Else
                        For Each xCell In UsrRng
                            xmSKU = xCell.Value
                            xCell.ClearContents
                        Next xCell
                End If
                Call vbaSmartSheetFunctions.chkDuplicate(smartWS.Range(UsrRng.Address))
                GoTo WayOut
            End Select

'=======================================================================================================================================================
'--> Events based Unit Cost selection or deletion.
'=======================================================================================================================================================
        Case rChanged.Column = smartWS.Range("UnitCostRng").Column

            Select Case True
                Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "Fill" Or UndoString = "Auto F"
                    If Trim(MyVal) <> "" Then
                        If Not IsNumeric(Trim(MyVal)) Then GoTo untClear
                        If IsNumeric(Trim(MyVal)) And Trim(MyVal) < 0 Then GoTo untClear
                            For Each xCell In UsrRng
                                    xCell.Value = Application.WorksheetFunction.Round(MyVal, 2)
                                    xCell.Cells.Interior.Color = xlNone
                                    Call xIMUCheck(xCell.Row)
                            Next xCell
                    End If
                    Call SetNumberFormats(UsrRng.Column)
                GoTo WayOut
                Case UndoString = "Paste"
                    For Each xCell In UsrRng
                        If Not IsNumeric(xCell.Value) Then
                            xCell.ClearContents
                            smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                            xCell.PasteSpecial xlPasteFormats
                            xCell.PasteSpecial xlPasteValidation
                            xCell.Cells.Interior.Color = xlNone
                            xCell.Cells.Locked = False
                            xCell.Cells.HorizontalAlignment = xlCenter
                            GoTo nxUntCell
                        End If
                            If IsNumeric(xCell.Value) And xCell.Value > 0 Then
                                xCell.Value = Application.WorksheetFunction.Round(xCell.Value, 2)
                                smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                                xCell.PasteSpecial xlPasteFormats
                                xCell.PasteSpecial xlPasteValidation
                                xCell.Cells.Interior.Color = xlNone
                            End If
                        xCell.Cells.Locked = False
                        xCell.Cells.HorizontalAlignment = xlCenter
                        Call xIMUCheck(xCell.Row)
nxUntCell:
                    Next xCell
                    Call SetNumberFormats(UsrRng.Column)
                GoTo WayOut
                Case UndoString = "Clear"
untClear:
                    If UndoString = "Typing" Or UndoString = "Entry" Then
                        Target.ClearContents
                    ElseIf UndoString = "Paste" Then
                        For Each xCell In UsrRng
                            xCell.ClearContents
                        Next xCell
                    End If
                    Call SetNumberFormats(UsrRng.Column)
                GoTo WayOut
            End Select

'=======================================================================================================================================================
'--> Events based FCM selection or deletion.
'=======================================================================================================================================================

        Case rChanged.Column = smartWS.Range("FCMRng").Column

            Select Case True
                Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "Fill" Or UndoString = "Auto F"
                    If Trim(MyVal) <> "" Then
                        If Not IsNumeric(Trim(MyVal)) Then GoTo fcmClear
                        If IsNumeric(Trim(MyVal)) And Trim(MyVal) < 0 Then GoTo fcmClear
                            For Each xCell In UsrRng
                                    xCell.Value = Application.WorksheetFunction.Round(MyVal, 1)
                                    xCell.Cells.Interior.Color = xlNone
                                    Call xIMUCheck(xCell.Row)
                            Next xCell
                    End If
                    Call SetNumberFormats(UsrRng.Column)
                GoTo WayOut
                Case UndoString = "Paste"
                    For Each xCell In UsrRng
                        If Not IsNumeric(xCell.Value) Then
                            xCell.ClearContents
                            smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                            xCell.PasteSpecial xlPasteFormats
                            xCell.PasteSpecial xlPasteValidation
                            xCell.Cells.Interior.Color = xlNone
                            xCell.Cells.Locked = False
                            xCell.Cells.HorizontalAlignment = xlCenter
                            GoTo nxfcCell
                        End If
                            If IsNumeric(xCell.Value) And xCell.Value > 0 Then
                                xCell.Value = Application.WorksheetFunction.Round(xCell.Value, 1)
                                smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                                'xCell.PasteSpecial xlPasteFormats
                                xCell.PasteSpecial xlPasteValidation
                                xCell.Cells.Interior.Color = xlNone
                            End If
                        xCell.Cells.Locked = False
                        xCell.Cells.HorizontalAlignment = xlCenter
                        Call xIMUCheck(xCell.Row)
nxfcCell:
                    Next xCell
                    Call SetNumberFormats(UsrRng.Column)
                GoTo WayOut
                Case UndoString = "Clear"
fcmClear:
                    If UndoString = "Typing" Or UndoString = "Entry" Then
                        Target.ClearContents
                        Target.Cells.Formula = "=1/1"
                        Target.Cells.NumberFormat = "0.0"
                    ElseIf UndoString = "Clear" Then
                        If UsrRng.Cells.Count > 1 Then
                                For Each xCell In UsrRng
                                    xCell.ClearContents
                                Next xCell
                        End If
                            For Each xCell In UsrRng
                                xCell.Formula = "=IFERROR(IF(VALUE(" & Replace(smartWS.Cells(xCell.Row, 1).Address, "$", "") & ")>0,1,""""),"""")"
                                xCell.NumberFormat = "0.0"
                            Next xCell
                    End If
                    Call SetNumberFormats(UsrRng.Column)
                GoTo WayOut
            End Select

 '=======================================================================================================================================================
'--> Events based Retail selection or deletion.
'=======================================================================================================================================================

       Case rChanged.Column = smartWS.Range("RetailRng").Column

            Select Case True
                Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "Fill" Or UndoString = "Auto F"
                If Trim(MyVal) <> "" Then
                    If Not IsNumeric(Trim(MyVal)) Then GoTo retClear
                    If IsNumeric(Trim(MyVal)) And Trim(MyVal) < 0 Then GoTo retClear
                            For Each xCell In UsrRng
                                If xRetChk(CDbl(Trim(MyVal))) Then
                                    xCell.Value = Application.WorksheetFunction.Round(Trim(MyVal), 2)
                                    xCell.Cells.Interior.Color = xlNone
                                Else
                                    xCell.Value = Application.WorksheetFunction.Round(Trim(MyVal), 2)
                                    xCell.Cells.Interior.Color = vbRed
                                End If
                            Call xIMUCheck(xCell.Row)
                                If xChange = True Then
                                    Target.ClearContents
                                    GoTo WayOut
                                End If
                            Next xCell
                    End If
                    Call SetNumberFormats(UsrRng.Column)
                GoTo WayOut
                Case UndoString = "Paste"
                    For Each xCell In UsrRng
                        If Not IsNumeric(xCell.Value) Or xCell.Value = "" Then
                            xCell.ClearContents
                            smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                            xCell.PasteSpecial xlPasteFormats
                            xCell.PasteSpecial xlPasteValidation
                            xCell.Cells.Interior.Color = xlNone
                            xCell.Cells.Locked = False
                            xCell.Cells.HorizontalAlignment = xlCenter
                            GoTo nxRetCell
                        End If
                            If IsNumeric(xCell.Value) And xRetChk(CDbl(xCell.Value)) Then
                                xCell.Value = Format(Application.WorksheetFunction.Round(xCell.Value, 2), "0.00")
                                smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                                xCell.PasteSpecial xlPasteFormats
                                xCell.PasteSpecial xlPasteValidation
                                xCell.Cells.Interior.Color = xlNone
                            ElseIf IsNumeric(xCell.Value) And xRetChk(CDbl(xCell.Value)) = False Then
                                xCell.Value = Format(Application.WorksheetFunction.Round(xCell.Value, 2), "0.00")
                                smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                                xCell.PasteSpecial xlPasteFormats
                                xCell.PasteSpecial xlPasteValidation
                                xCell.Cells.Interior.Color = vbRed
                            End If
                        xCell.Cells.Locked = False
                        xCell.Cells.HorizontalAlignment = xlCenter
                        Call xIMUCheck(xCell.Row)
                                If xChange = True Then
                                    Target.ClearContents
                                    GoTo WayOut
                                End If

nxRetCell:
                    Next xCell
                    Call SetNumberFormats(UsrRng.Column)
                GoTo WayOut
                Case UndoString = "Clear"
retClear:
                    If UndoString = "Typing" Or UndoString = "Entry" Then
                        Target.ClearContents
                        Target.Cells.Interior.Color = xlNone
                    ElseIf UndoString = "Paste" Then
                        For Each xCell In UsrRng
                            xCell.ClearContents
                            xCell.Cells.Interior.Color = xlNone
                            'Call xIMUCheck(xCell.Row)
                        Next xCell
                    End If
                        UsrRng.Cells.Interior.Color = xlNone
                    Call vbaSmartSheetFunctions.chkTotRetail
                GoTo WayOut
            End Select

'=======================================================================================================================================================
'--> Events based Case Pack selection or deletion.
'=======================================================================================================================================================

        Case rChanged.Column = smartWS.Range("CasePackRng").Column

            Select Case True
                Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "Fill" Or UndoString = "Auto F"
                If Trim(MyVal) <> "" Then
                    If Not IsNumeric(Trim(MyVal)) Then GoTo cpkClear
                    If IsNumeric(Trim(MyVal)) And Trim(MyVal) < 0 Then GoTo cpkClear
                            For Each xCell In UsrRng
                                    xCell.Value = Application.WorksheetFunction.Round(Trim(MyVal), 0)
                                    'xCell.Offset(0, 1).Value = Application.WorksheetFunction.Round(Trim(MyVal), 0)
                                    xCell.Cells.Interior.Color = xlNone
                                    Call SetNumberFormats(xCell.Column)
                            Next xCell
                    End If

                GoTo WayOut
                Case UndoString = "Paste"
                    For Each xCell In UsrRng
                        If Not IsNumeric(xCell.Value) Then
                            xCell.ClearContents
                            smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                            xCell.PasteSpecial xlPasteFormats
                            xCell.PasteSpecial xlPasteValidation
                            xCell.Cells.Interior.Color = xlNone
                            xCell.Cells.Locked = False
                            xCell.Cells.HorizontalAlignment = xlCenter
                            GoTo nxcpkCell
                        End If
                            If IsNumeric(xCell.Value) And xCell.Value > 0 Then
                                xCell.Value = Format(Application.WorksheetFunction.Round(xCell.Value, 0), "0")
                                smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                                xCell.PasteSpecial xlPasteFormats
                                xCell.PasteSpecial xlPasteValidation
                                xCell.Cells.Interior.Color = xlNone
                            End If
                        xCell.Cells.Locked = False
                        xCell.Cells.HorizontalAlignment = xlCenter
                        Call SetNumberFormats(xCell.Column)
nxcpkCell:
                    Next xCell
                GoTo WayOut
                Case UndoString = "Clear"
cpkClear:
                    If UndoString = "Typing" Or UndoString = "Entry" Then
                        Target.ClearContents
                    ElseIf UndoString = "Paste" Then
                        For Each xCell In UsrRng
                            xCell.ClearContents
                        Next xCell
                    End If
                GoTo WayOut
            End Select

'=======================================================================================================================================================
'--> Events based Case Weight and Case Cube selection or deletion.
'=======================================================================================================================================================

        Case rChanged.Column = smartWS.Range("CaseWeightRng").Column Or rChanged.Column = smartWS.Range("CaseCubeRng").Column

            Select Case True
                Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "Fill" Or UndoString = "Auto F"
                If Trim(MyVal) <> "" Then
                        If Not IsNumeric(Trim(MyVal)) Then GoTo cwgtClear
                        If IsNumeric(Trim(MyVal)) And Trim(MyVal) < 0 Then GoTo cwgtClear
                            For Each xCell In UsrRng
                                    xCell.Value2 = Application.WorksheetFunction.Round(MyVal, 3)
                                    xCell.Cells.Interior.Color = xlNone
                            Next xCell
                    End If
                    Call SetNumberFormats(UsrRng.Column)
                GoTo WayOut
                Case UndoString = "Paste"
                    For Each xCell In UsrRng
                        If Not IsNumeric(xCell.Value) Then
                            xCell.ClearContents
                            smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                            xCell.PasteSpecial xlPasteFormats: xCell.PasteSpecial xlPasteValidation: xCell.Cells.Interior.Color = xlNone: xCell.Cells.Locked = False: xCell.Cells.HorizontalAlignment = xlCenter
                            GoTo nxcWgtCell
                        End If
                            If IsNumeric(xCell.Value) Then
                            Dim xNum As Double
                                xCell.Value = Application.WorksheetFunction.Round(xCell, 3)
                                smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                                xCell.PasteSpecial xlPasteFormats
                                xCell.PasteSpecial xlPasteValidation
                                xCell.Cells.Interior.Color = xlNone
                            End If
                        xCell.Cells.Locked = False
                        xCell.Cells.HorizontalAlignment = xlCenter
nxcWgtCell:
                    Next xCell
                    Call SetNumberFormats(UsrRng.Column)
                GoTo WayOut
                Case UndoString = "Clear"
cwgtClear:
                    If UndoString = "Typing" Or UndoString = "Entry" Then
                        Target.ClearContents
                    ElseIf UndoString = "Paste" Then
                        For Each xCell In UsrRng
                            xCell.ClearContents
                        Next xCell
                    End If
                GoTo WayOut
            End Select

'=======================================================================================================================================================
'--> Events based Item Length, Width and Height & Case Length, Width and Height selection or deletion.
'=======================================================================================================================================================

        Case rChanged.Column = smartWS.Range("ItemLengthRng").Column Or rChanged.Column = smartWS.Range("ItemWidthRng").Column _
                    Or rChanged.Column = smartWS.Range("ItemHeightRng").Column Or rChanged.Column = smartWS.Range("CaseLengthRng").Column _
                    Or rChanged.Column = smartWS.Range("CaseWidthRng").Column Or rChanged.Column = smartWS.Range("CaseHeightRng").Column

            Select Case True
                Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "Fill" Or UndoString = "Auto F"
                    If Trim(MyVal) <> "" Then
                        If Not IsNumeric(Trim(MyVal)) Then GoTo ilClear
                        If IsNumeric(Trim(MyVal)) And Trim(MyVal) < 0 Then GoTo ilClear
                            For Each xCell In UsrRng
                                    xCell.Value = Application.WorksheetFunction.Round(MyVal, 1)
                                    xCell.Cells.Interior.Color = xlNone
                                    Call xIMUCheck(xCell.Row)
                            Next xCell
                    End If
                    Call SetNumberFormats(UsrRng.Column)
                GoTo WayOut
                Case UndoString = "Paste"
                    For Each xCell In UsrRng
                        If Not IsNumeric(xCell.Value) Then
                            xCell.ClearContents
                            smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                            xCell.PasteSpecial xlPasteFormats
                            xCell.PasteSpecial xlPasteValidation
                            xCell.Cells.Interior.Color = xlNone
                            xCell.Cells.Locked = False
                            xCell.Cells.HorizontalAlignment = xlCenter
                            GoTo nxilCell
                        End If
                            If IsNumeric(xCell.Value) And xCell.Value > 0 Then
                                xCell.Value = Application.WorksheetFunction.Round(xCell.Value, 1)
                                smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                                xCell.PasteSpecial xlPasteFormats
                                xCell.PasteSpecial xlPasteValidation
                                xCell.Cells.Interior.Color = xlNone
                            End If
                        xCell.Cells.Locked = False
                        xCell.Cells.HorizontalAlignment = xlCenter
                        Call xIMUCheck(xCell.Row)
nxilCell:
                    Next xCell
                    Call SetNumberFormats(UsrRng.Column)
                GoTo WayOut
                Case UndoString = "Clear"
ilClear:
                    If UndoString = "Typing" Or UndoString = "Entry" Then
                        Target.ClearContents
                    ElseIf UndoString = "Paste" Then
                        For Each xCell In UsrRng
                            xCell.ClearContents
                        Next xCell
                    End If
                    Call SetNumberFormats(UsrRng.Column)
                GoTo WayOut
            End Select
'=======================================================================================================================================================
'--> Events based Primary HTS Code selection or deletion.
'=======================================================================================================================================================

        Case rChanged.Column = smartWS.Range("PrimHTSRng").Column

        Dim xHTS, xStrHTS, i, lChk
            lChk = False
            Select Case True
                Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "Fill" Or UndoString = "Auto F"
                        If Trim(MyVal) = "" Then GoTo htsClear
                        If UndoString = "Auto F" Then MyVal = ActiveCell.Value
                        If xInstance(CStr(MyVal), ".") = 2 Then
                            xHTS = Split(MyVal, ".")
                            For i = LBound(xHTS) To UBound(xHTS)
                                Select Case i
                                    Case 0
                                        If IsNumeric(xHTS(i)) And Len(xHTS(i)) > 0 And Len(xHTS(i)) = 4 Then
                                            xStrHTS = xHTS(i)
                                        Else
                                            xStrHTS = ""
                                        End If
                                    Case 1
                                        If IsNumeric(xHTS(i)) And Len(xHTS(i)) = 2 Then
                                            If xStrHTS <> "" Then
                                                xStrHTS = xStrHTS & "." & xHTS(i)
                                            Else
                                                xStrHTS = ""
                                            End If
                                        Else
                                            xStrHTS = ""
                                        End If
                                    Case 2
                                        If IsNumeric(xHTS(i)) And Len(xHTS(i)) > 0 And Len(xHTS(i)) <= 4 Then
                                            If xStrHTS <> "" Then
                                                xStrHTS = xStrHTS & "." & xHTS(i)
                                            Else
                                                xStrHTS = ""
                                            End If
                                        Else
                                            xStrHTS = ""
                                        End If
                                End Select
                            Next i
                        ElseIf xInstance(CStr(MyVal), ".") = 0 Then
                            If IsNumeric(MyVal) And Len(MyVal) = 10 Then
                                xStrHTS = Left(MyVal, 4) & "." & Mid(MyVal, 5, 2) & "." & Right(MyVal, 4)
                            Else
                                xStrHTS = ""
                            End If
                        End If
                        For Each xCell In UsrRng
                            xCell.Value = xStrHTS
                        Next xCell

                GoTo WayOut
                Case UndoString = "Paste"
                For Each xCell In UsrRng
                        If xInstance(CStr(xCell), ".") = 2 Then
                            xHTS = Split(xCell, ".")
                            For i = LBound(xHTS) To UBound(xHTS)
                                Select Case i
                                    Case 0
                                        If IsNumeric(xHTS(i)) And Len(xHTS(i)) > 0 And Len(xHTS(i)) = 4 Then
                                            xStrHTS = xHTS(i)
                                        Else
                                            xStrHTS = ""
                                        End If
                                    Case 1
                                        If IsNumeric(xHTS(i)) And Len(xHTS(i)) = 2 Then
                                            If xStrHTS <> "" Then
                                                xStrHTS = xStrHTS & "." & xHTS(i)
                                            Else
                                                xStrHTS = ""
                                            End If
                                        Else
                                            xStrHTS = ""
                                        End If
                                    Case 2
                                        If IsNumeric(xHTS(i)) And Len(xHTS(i)) > 0 And Len(xHTS(i)) <= 4 Then
                                            If xStrHTS <> "" Then
                                                xStrHTS = xStrHTS & "." & xHTS(i)
                                            Else
                                                xStrHTS = ""
                                            End If
                                        Else
                                            xStrHTS = ""
                                        End If
                                End Select
                            Next i
                        ElseIf xInstance(CStr(xCell), ".") = 0 Then
                            If IsNumeric(xCell) And Len(xCell) = 10 Then
                                xStrHTS = Left(xCell, 4) & "." & Mid(xCell, 5, 2) & "." & Right(xCell, 4)
                            Else
                                xStrHTS = ""
                            End If
                        End If
                        xCell.Value = xStrHTS
                Next xCell
'                Set xCell = Nothing
'                For Each xCell In UsrRng
'                    xCell.Value = xStrHTS
'                Next xCell
                Set xCell = Nothing

                    For Each xCell In UsrRng
                        smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                        xCell.PasteSpecial xlPasteFormats
                        xCell.PasteSpecial xlPasteValidation
                        xCell.Cells.Locked = False
                        xCell.Cells.HorizontalAlignment = xlCenter
                    Next xCell
                GoTo WayOut

                Case UndoString = "Clear"
htsClear:
                    If UndoString = "Typing" Or UndoString = "Entry" Then
                        Target.ClearContents
                    ElseIf UndoString = "Paste" Then
                        For Each xCell In UsrRng
                            xCell.ClearContents
                        Next xCell
                    End If

                GoTo WayOut
            End Select

'=======================================================================================================================================================
'--> Events based Primary Duty% selection or deletion.
'=======================================================================================================================================================

        Case rChanged.Column = smartWS.Range("DutyRng").Column

            Select Case True
                Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "Fill" Or UndoString = "Auto F"
                If Not IsNumeric(Trim(MyVal)) Then GoTo prdtClear
                If UndoString = "Auto F" Then MyVal = ActiveCell.Value2
                        For Each xCell In UsrRng
                            If IsNumeric(MyVal) Then
                                    xCell = Format(MyVal * 100 / 100, "Percent")
                            Else
                                xCell = "0.00%"
                            End If
                            Call xIMUCheck(xCell.Row)
                        Next xCell
                        Call SetNumberFormats(UsrRng.Column)
                GoTo WayOut
                Case UndoString = "Paste"
                    For Each xCell In UsrRng
                        If Not IsNumeric(xCell.Value) Then
                            xCell.ClearContents
                            smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                            xCell.PasteSpecial xlPasteFormats
                            xCell.PasteSpecial xlPasteValidation
                            xCell.Cells.Interior.Color = xlNone
                            xCell.Cells.Locked = False
                            xCell.Cells.HorizontalAlignment = xlCenter
                            GoTo nxprdtCell
                        End If
                            If IsNumeric(xCell.Value) And xCell.Value > 0 Then
                                xCell.Value = Format(xCell, "Percent")
                                xCell.NumberFormat = "0.00%"
                                smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                                xCell.PasteSpecial xlPasteFormats
                                xCell.PasteSpecial xlPasteValidation
                                xCell.Cells.Interior.Color = xlNone
                            End If
                        xCell.Cells.Locked = False
                        xCell.Cells.HorizontalAlignment = xlCenter
nxprdtCell:
                    Call xIMUCheck(xCell.Row)
                    Next xCell
                    Call SetNumberFormats(UsrRng.Column)
                GoTo WayOut
                Case UndoString = "Clear"
prdtClear:
                    If UndoString = "Typing" Or UndoString = "Entry" Then
                        Target.ClearContents
                    ElseIf UndoString = "Paste" Then
                        For Each xCell In UsrRng
                            xCell.ClearContents
                                If smartWS.Range("ImporDom") = "*IMPORT*" Then
                                    xCell = 0
                                End If
                            Call xIMUCheck(xCell.Row)
                        Next xCell
                    End If
                    Call SetNumberFormats(UsrRng.Column)
                GoTo WayOut
            End Select

'=======================================================================================================================================================
'--> Events based Primary UPC selection or deletion.
'=======================================================================================================================================================

        Case rChanged.Column = smartWS.Range("UPC_1Rng").Column

            Select Case True
                Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "Auto F" Or UndoString = "Fill"
                If UndoString = "Auto F" Then MyVal = CStr(ActiveCell)
                If UsrRng.Cells.Count > 1 And UCase(Trim(MyVal)) <> "CREATE" Then
                    MsgBox "Please select a single row to continue. UPC should be unique. If " & MyVal & " is not a duplicate, it will be accepted.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
                    With UsrRng
                    For Each xCell In .Cells
                            If IsNumeric(MyVal) And MyVal > 0 Then
                                xCell.Value = CStr(MyVal)
                                    #If Mac Then
                                        Call macChkNumbersnLgth(UsrRng, 12)
                                    #Else
                                        Call vbaSmartSheetFunctions.chkNumbersnLgth(UsrRng, 12)
                                    #End If
                            ElseIf Not IsNumeric(xCell) And UCase(Trim(MyVal)) = "CREATE" Then
                                xCell.Value = UCase(Trim(MyVal))
                            Else
                                xCell.Value = ""
                            End If
                    Next xCell
                    End With
                Else
                    With UsrRng
                            If IsNumeric(MyVal) And MyVal > 0 Then
                                    .Value = CStr(UCase(Trim(MyVal)))
                                #If Mac Then
                                    Call macChkNumbersnLgth(UsrRng, 12)
                                #Else
                                    Call vbaSmartSheetFunctions.chkNumbersnLgth(UsrRng, 12)
                                #End If
                            ElseIf UCase(Trim(MyVal)) = "CREATE" Then
                                .Value = UCase(Trim(MyVal))
                            Else
                                .Value = ""
                            End If
                    End With
                End If
                Call SetNumberFormats(UsrRng.Column)
                Call vbaSmartSheetFunctions.chkDuplicate(UsrRng)
                GoTo WayOut
                Case UndoString = "Paste"
                        For Each xCell In UsrRng
                            If IsNumeric(xCell) Then

                            #If Mac Then
                                Call macChkNumbersnLgth(UsrRng, 12)
                            #Else
                                Call vbaSmartSheetFunctions.chkNumbersnLgth(UsrRng, 12)
                            #End If

                            ElseIf Not IsNumeric(xCell) And UCase(Trim(xCell)) = "CREATE" Then
                                xCell.Value = UCase(Trim(xCell))
                            Else
                                xCell.Value = ""
                            End If
                        Next xCell
                Set xCell = Nothing
                    For Each xCell In UsrRng
                        smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                        xCell.PasteSpecial xlPasteFormats
                        xCell.PasteSpecial xlPasteValidation
                        xCell.Cells.Locked = False
                        xCell.Cells.HorizontalAlignment = xlCenter
                    Next xCell
                        SetNumberFormats (UsrRng.Column)
                        Call vbaSmartSheetFunctions.chkDuplicate(UsrRng)
                        Application.CutCopyMode = True
                GoTo WayOut
                Case UndoString = "Clear"
                    For Each xCell In UsrRng
                        xmSKU = xCell.Value
                        xCell.ClearContents
                    Next xCell
                Call vbaSmartSheetFunctions.chkDuplicate(smartWS.Range(UsrRng.Address))
                GoTo WayOut
            End Select

'=======================================================================================================================================================
'--> Events based Color, Size, Shape, Material, Lighting, Packaging, SetFlag, Product Type selection or deletion.
'=======================================================================================================================================================

        Case rChanged.Column = smartWS.Range("ColorDescRng").Column Or rChanged.Column = smartWS.Range("SizeDescRng").Column _
                    Or rChanged.Column = smartWS.Range("ShapeDescRng").Column Or rChanged.Column = smartWS.Range("MaterialDescRng").Column _
                    Or rChanged.Column = smartWS.Range("LightingDescRng").Column Or rChanged.Column = smartWS.Range("PackagingRng").Column _
                    Or rChanged.Column = smartWS.Range("SetFlagRng").Column Or rChanged.Column = smartWS.Range("ProdTypeRng").Column _
                    Or rChanged.Column = smartWS.Range("AllStoresRng").Column

            Select Case True
                Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "" Or UndoString = "Valida"
                        For Each xCell In UsrRng
                                xCell.Value = MyVal
                        Next xCell
                GoTo WayOut
                Case UndoString = "Paste"
                    On Error Resume Next
                    Application.Undo
                    On Error GoTo 0
                    MsgBox "Copy/Paste Restricted on this column. Please choose from the Dropdown values.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
                GoTo WayOut
                Case UndoString = "Auto F"

                GoTo WayOut
                Case UndoString = "Clear"

                GoTo WayOut
            End Select

'--> Events based Home LID selection or deletion.

        Case rChanged.Column = smartWS.Range("HomeLIDRng").Column Or rChanged.Column = smartWS.Range("SpMerchLocID").Column

            Select Case True
                Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "Auto F" Or UndoString = "Fill"
                    If UndoString = "Auto F" Then MyVal = ActiveCell.Value
                        For Each xCell In UsrRng
                                xCell = CStr(MyVal)
                        Next xCell
                        #If Mac Then
                            macChkSplChrnLgth UsrRng, 5
                        #Else
                            Call vbaSmartSheetFunctions.chkSplChrnLgth(UsrRng, 5)
                        #End If
                GoTo WayOut
                Case UndoString = "Paste"
                    For Each xCell In UsrRng
                        smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                        xCell.PasteSpecial xlPasteFormats
                        xCell.PasteSpecial xlPasteValidation
                        xCell.Cells.Locked = False
                        xCell.Cells.HorizontalAlignment = xlCenter
                    Next xCell
                        #If Mac Then
                            macChkSplChrnLgth UsrRng, 5
                        #Else
                            Call vbaSmartSheetFunctions.chkSplChrnLgth(UsrRng, 5)
                        #End If
                GoTo WayOut
                Case UndoString = "Clear"

                GoTo WayOut
            End Select

'=======================================================================================================================================================
'--> Events based Coordinate ID selection or deletion.
'=======================================================================================================================================================

        Case rChanged.Column = smartWS.Range("CoOrDID").Column

            Select Case True
                Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "Auto F" Or UndoString = "Fill"
                    If UndoString = "Auto F" Then MyVal = ActiveCell.Value
                        For Each xCell In UsrRng
                            xCell.Value = MyVal
                        Next xCell
                        #If Mac Then
                            macChkSplChrnLgth UsrRng, 6
                        #Else
                            Call vbaSmartSheetFunctions.chkSplChrnLgth(UsrRng, 6)
                        #End If
                GoTo WayOut
                Case UndoString = "Paste"
                    For Each xCell In UsrRng
                        smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                        xCell.PasteSpecial xlPasteFormats
                        xCell.PasteSpecial xlPasteValidation
                        xCell.Cells.Locked = False
                        xCell.Cells.HorizontalAlignment = xlCenter
                    Next xCell
                GoTo WayOut
                Case UndoString = "Auto F"

                GoTo WayOut
                Case UndoString = "Clear"

                GoTo WayOut
            End Select


'=======================================================================================================================================================
'--> Events based Season Code selection or deletion.
'=======================================================================================================================================================

        Case rChanged.Column = smartWS.Range("SeasonCodRng").Column

            Select Case True
                Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "" Or UndoString = "Valida" Or UndoString = "Auto F" Or UndoString = "Fill"
                If UndoString = "Auto F" Then MyVal = ActiveCell.Value
                        For Each xCell In UsrRng
                            xCell.Value = MyVal
                            On Error Resume Next
                            xCell.Offset(, 1) = Application.WorksheetFunction.Index([tbl_Season], Application.WorksheetFunction.Match(rChanged, [tbl_Season].Columns(1), 1), 2)
                            On Error GoTo 0
                        Next xCell
                GoTo WayOut
                Case UndoString = "Paste"
                    On Error Resume Next
                    Application.Undo
                    On Error GoTo 0
                    MsgBox "Copy/Paste Restricted on this column. Please choose from the Dropdown values.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"

                GoTo WayOut
                Case UndoString = "Clear"
                GoTo WayOut
            End Select


'=======================================================================================================================================================
'--> Events based Season Desc selection or deletion.
'=======================================================================================================================================================

        Case rChanged.Column = smartWS.Range("SeasonDescRng").Column

            Select Case True
                Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "" Or UndoString = "Auto F" Or UndoString = "Fill" Or UndoString = "Valida"
                If UndoString = "Auto F" Then MyVal = ActiveCell.Value
                UnProtectSheet smartWS.Name
                        For Each xCell In UsrRng
                            xCell.Value = MyVal
                            On Error Resume Next
                            xCell.Offset(, -1) = Application.WorksheetFunction.Index([tbl_Season], Application.WorksheetFunction.Match(MyVal, [tbl_Season].Columns(2), 1), 1)
                            On Error GoTo 0
                        Next xCell
                ProtectSheet smartWS.Name
                GoTo WayOut
                Case UndoString = "Paste"
                    For Each xCell In UsrRng
                        smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                        xCell.PasteSpecial xlPasteFormats
                        xCell.PasteSpecial xlPasteValidation
                        xCell.Cells.Locked = False
                        xCell.Cells.HorizontalAlignment = xlCenter
                    Next xCell
                GoTo WayOut
                Case UndoString = "Clear"
                UnProtectSheet smartWS.Name
                        For Each xCell In UsrRng
                            On Error Resume Next
                            xCell.Offset(, -1).ClearContents
                            On Error GoTo 0
                        Next xCell
                ProtectSheet smartWS.Name
                GoTo WayOut
            End Select

'=======================================================================================================================================================
'--> Events based Collection selection or deletion.
'=======================================================================================================================================================

        Case rChanged.Column = smartWS.Range("CollRng").Column Or rChanged.Column = smartWS.Range("TicketingDescRng").Column

            Select Case True
                Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "Auto F" Or UndoString = "Fill"
                If UndoString = "Auto F" Then MyVal = ActiveCell.Value
                        For Each xCell In UsrRng
                            xCell.Value = MyVal
                        Next xCell
                        If rChanged.Column = smartWS.Range("CollRng").Column Then
                            #If Mac Then
                                macChkSplChrnLgth UsrRng, 35
                            #Else
                                Call vbaSmartSheetFunctions.chkSplChrnLgth(UsrRng, 35)
                            #End If
                        End If
                        If rChanged.Column = smartWS.Range("TicketingDescRng").Column Then Call vbaSmartSheetFunctions.clrSplChars(smartWS.Range(UsrRng.Address), 25)
                GoTo WayOut
                Case UndoString = "Paste"
                    For Each xCell In UsrRng
                        smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                        xCell.PasteSpecial xlPasteFormats
                        xCell.PasteSpecial xlPasteValidation
                        xCell.Cells.Locked = False
                        xCell.Cells.HorizontalAlignment = xlCenter
                    Next xCell
                        If rChanged.Column = smartWS.Range("CollRng").Column Then
                            #If Mac Then
                                macChkSplChrnLgth UsrRng, 35
                            #Else
                                Call vbaSmartSheetFunctions.chkSplChrnLgth(UsrRng, 35)
                            #End If
                        End If
                        If rChanged.Column = smartWS.Range("TicketingDescRng").Column Then Call vbaSmartSheetFunctions.clrSplChars(smartWS.Range(UsrRng.Address), 25)
                GoTo WayOut
                Case UndoString = "Clear"

                GoTo WayOut
            End Select

'=======================================================================================================================================================
'--> Events based Initial Order Quantity selection or deletion.
'=======================================================================================================================================================

        Case rChanged.Column = smartWS.Range("InitOrderQtyRng").Column

            Select Case True
                Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "Auto F" Or UndoString = "Fill"
                If UndoString = "Auto F" Then MyVal = ActiveCell.Value
                        For Each xCell In UsrRng
                            xCell.Value = MyVal
                        Next xCell
                Call vbaSmartSheetFunctions.chkTotUnits
                Call vbaSmartSheetFunctions.chkTotRetail
                GoTo WayOut
                Case UndoString = "Paste"
                    For Each xCell In UsrRng
                        smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                        xCell.PasteSpecial xlPasteFormats
                        xCell.PasteSpecial xlPasteValidation
                        xCell.Cells.Locked = False
                        xCell.Cells.HorizontalAlignment = xlCenter
                    Next xCell
                    Call SetNumberFormats(UsrRng.Column)
                    Call vbaSmartSheetFunctions.chkTotUnits
                    Call vbaSmartSheetFunctions.chkTotRetail
                GoTo WayOut
                Case UndoString = "Clear"
                Call vbaSmartSheetFunctions.chkTotUnits
                GoTo WayOut
            End Select

'=======================================================================================================================================================
'--> Events based Fill Units selection or deletion.
'=======================================================================================================================================================

        Case rChanged.Column = smartWS.Range("FillUnitsRng").Column Or rChanged.Column = smartWS.Range("PlanUnitsRng").Column

            Select Case True
                Case UndoString = "Typing" Or UndoString = "Entry" Or UndoString = "Auto F" Or UndoString = "Fill"
                If UndoString = "Auto F" Then MyVal = ActiveCell.Value
                        For Each xCell In UsrRng
                            xCell.Value = MyVal
                        Next xCell
                         #If Mac Then
                            Call macChkNumbersnLgth(UsrRng)
                        #Else
                            Call vbaSmartSheetFunctions.chkNumbersnLgth(UsrRng, True)
                        #End If
                'Call vbaSmartSheetFunctions.chkNumbersnLgth(smartWS.Range(UsrRng.Address), True)
                GoTo WayOut
                Case UndoString = "Paste"
                    For Each xCell In UsrRng
                        smartWS.Cells(smartWS.Range("mtab_Required").Row, UsrRng.Column).Copy
                        xCell.PasteSpecial xlPasteFormats
                        xCell.PasteSpecial xlPasteValidation
                        xCell.Cells.Locked = False
                        xCell.Cells.HorizontalAlignment = xlCenter
                    Next xCell
                    Call SetNumberFormats(UsrRng.Column)
                GoTo WayOut
                Case UndoString = "Clear"

                GoTo WayOut
            End Select
End Select
WayOut:
xChange = False

On Error Resume Next
 If UsrRng.Cells.Count = 1 Then
    smartWS.Cells(actRo, actCol).Select
 ElseIf InStr(Selection.Address, ",") > 0 And Left(foundRng, 2) = "No" Then
    UsrRng.Select
End If
On Error GoTo 0
ProtectSheet smartWS.Name
Application.StatusBar = ""
SetTrue
End Sub

Private Sub Worksheet_Deactivate()
' call vbaSmartSheetFunctions.cellDragDrop(True)
Application.AutoCorrect.AutoFillFormulasInLists = True
Call ToggleCutCopyAndPaste(True)
Application.OnKey "{F2}"
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
SetFalse
Dim rChanged, rCel As Range, UndoString, celValRng, ValNum
Dim valType, lastRow, lastCol
Dim mainTab As ListObject
Dim chkObj As Boolean

On Error Resume Next
Set smartWS = ActiveWorkbook.Sheets("Buyer-SmartSheet")
On Error GoTo 0
If smartWS Is Nothing Then GoTo WayOut

'chkObj = setObjects
lastCol = smartWS.Cells(smartWS.Range("mtab_Header").Row, Columns.Count).End(xlToLeft).Column

'If chkObj = False Then GoTo WayOut

'Set oldSelCells = Selection.SpecialCells(xlCellTypeVisible).Cells
OldcelDragCols = NewCelDragCols: NewCelDragCols = Selection.Columns.Count

On Error Resume Next: valType = False: valType = Target.Validation.Type = 3: On Error GoTo 0

On Error Resume Next: Application.OnKey "{F2}": If valType Then Application.OnKey "{F2}", "":
On Error GoTo 0

    ' get previously selected range address
    strOldRange = strNewRange
    ' get currently selected address
    strNewRange = Target(1).Address
'Call ToggleCutCopyAndPaste(True)
If ((Application.CutCopyMode <> xlCut) And (Application.CutCopyMode <> xlCopy)) Or (Len(GetClipboardText) = 0) Then GoTo togTrue

If Application.CutCopyMode = xlCut Then
        Application.CutCopyMode = False
        MsgBox "CUT/Paste fuction not allowed on Buyers SmartSheet. ONLY COPY/Paste allowed only on Free Text Columns.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
        GoTo WayOut
End If

If Application.CutCopyMode = xlCopy Then
    If Len(GetClipboardText) > 0 Then
            If strOldRange = "" Then strOldRange = Target.Address
            CopiedCol = Range(strOldRange)(1).Column
            CopiedRow = Range(strOldRange).Row
            ToBePasteCol = Range(strNewRange)(1).Column
            ToBePasteRow = Range(strNewRange).Row
    Else
        CopiedCol = "": ToBePasteCol = ""
        CopiedRow = "": ToBePasteRow = ""
        ' call vbaSmartSheetFunctions.cellDragDrop(False)
    End If
End If
If CopiedRow = "" Then
    GoTo WayOut
ElseIf CopiedRow <= smartWS.Range("mTab_Header").Row Then
'    'SheetProtectUnProtect (True)
    ToggleCutCopyAndPaste False
    GoTo WayOut
End If

'=======================================================================================================================================================
'--> Event based on dropdown columns where CutCopy set to false
'=======================================================================================================================================================
If Application.CutCopyMode = xlCut Or Application.CutCopyMode = xlCopy Then
On Error Resume Next
Dim desString, srcString

desString = smartWS.Cells(smartWS.Range("mtabType").Row, smartWS.Range(strNewRange).Column).Value
srcString = smartWS.Cells(smartWS.Range("mtabType").Row, smartWS.Range(strOldRange).Column).Value
'If IsError(InStr(smartWS.Range(strNewRange).Validation.Formula1, "Rng")) or smartWS.Range("mtabType") <> "Drop Down" Then
If desString = "Auto" Or desString = "Drop Down" Then
    ValNum = smartWS.Range(strNewRange).Column
    Application.OnKey "^{d}", ""
Else
    'ValNum = InStr(smartWS.Range(strNewRange).Validation.Formula1, "Rng")
    ValNum = 0
    Application.OnKey "^{d}"
End If
On Error GoTo 0

If CopiedCol <> "" And ToBePasteCol <> "" And CopiedRow > smartWS.Range("mTab_Header").Row And ToBePasteRow > smartWS.Range("mTab_Header").Row Then
Call ToggleCutCopyAndPaste(True)
    Select Case True
        Case CopiedCol <> ToBePasteCol
            If ValNum > 0 Then
                Call ToggleCutCopyAndPaste(False)
            ElseIf ValNum = 0 Then
                Call ToggleCutCopyAndPaste(True)
            End If

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("SKURng")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("ItemDescrRng")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("EcommDescRng")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("NestedSKURng")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("VPNRng")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("UnitCostRng")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("FCMRng")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("RetailRng")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("CasePackRng")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("CaseWeightRng")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("CaseCubeRng")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("ItemLengthRng")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("ItemWidthRng")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("ItemHeightRng")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("CaseLengthRng")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("CaseDims")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("CaseWidthRng")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("CaseHeightRng")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("PrimHTSRng")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("PenHTCDuty")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("UPC_1Rng")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("SetFlagRng")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("SeasonDescRng")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("AllStoresRng")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("FinalCaseQty")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("FillUnitsRng")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("TotalCube")) Is Nothing
            Call ToggleCutCopyAndPaste(True)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("mTab_VendorInfo")) Is Nothing
            Call ToggleCutCopyAndPaste(False)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("mTab_Header")) Is Nothing
            Call ToggleCutCopyAndPaste(False)

        Case Not Application.Intersect(smartWS.Range(strNewRange), smartWS.Range("VendorNum")) Is Nothing
            Call ToggleCutCopyAndPaste(False)

        Case ValNum > 0
            Call ToggleCutCopyAndPaste(False)

'        Case ValNum = 0
'            Call ToggleCutCopyAndPaste(True)

        Case smartWS.Range(strNewRange).Row <= smartWS.Range("mTab_Header").Row
            Call ToggleCutCopyAndPaste(False)

'        Case smartWS.Range(strNewRange).Row > lastRow
'            Call ToggleCutCopyAndPaste(False)

        Case smartWS.Range(strNewRange).Column > lastCol
            If smartWS.Range(strNewRange).Column = lastCol + 1 Then
                Call ToggleCutCopyAndPaste(True)
            Else
                Call ToggleCutCopyAndPaste(False)
            End If

    End Select
End If
End If
    'SheetProtectUnProtect (True)
togTrue:

'Call ToggleCutCopyAndPaste(True)
WayOut:
'ProtectSheet smartWS.name
SetTrue
End Sub
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Public chkObj

Private Sub Workbook_Activate()
On Error Resume Next
Set SmartWB = ActiveWorkbook
Set smartWS = SmartWB.Worksheets("Buyer-SmartSheet")
On Error GoTo 0
If ActiveSheet.Name = smartWS.Name Then
On Error Resume Next
Dim myTyp
myTyp = 0
myTyp = ActiveCell.Validation.Type
On Error GoTo 0
Application.AutoCorrect.AutoFillFormulasInLists = False
    If Application.CutCopyMode = xlCut Or Application.CutCopyMode = xlCopy Or Len(GetClipboardText) > 0 Then
        If myTyp = 3 Then
            Call ToggleCutCopyAndPaste(False)
            End
        Else
            Call ToggleCutCopyAndPaste(True)
            End
        End If
    End If
End If
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
Dim xFile
SetFalse
ToggleCutCopyAndPaste True
' vbaSmartSheetFunctions.cellDragDrop True
On Error Resume Next
Application.OnKey "{F2}"
Application.OnKey "^x"
Application.OnKey "{TAB}"
Application.OnKey "{ENTER}"
On Error GoTo 0

Call vbaSmartSheetFunctions.HideWelcomeScreen
SetTrue
End Sub

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)

Dim FSO, tWB As Workbook, myWB As Workbook, fldr As FileDialog, templatePath, templateForm, FilePath, sItem
Dim varResult As Variant, ActBook As Workbook

If IsEmpty(blnClose) Then blnClose = False
If Cancel = True Then Exit Sub
If SaveAsUI = True Then Exit Sub

End Sub

Private Sub Workbook_Deactivate()
' vbaSmartSheetFunctions.cellDragDrop True
Application.AutoCorrect.AutoFillFormulasInLists = True
Call ToggleCutCopyAndPaste(True)
On Error Resume Next
Application.OnKey "{F2}"
On Error GoTo 0
End Sub

Private Sub workbook_open()
Dim addWB As Workbook, addWBPath As String, xFile
addWBPath = Environ("appdata") & "\Microsoft\Excel\XLSTART\AH-Buyer-SmartSheet-AddIn*.xlam"
xFound = vbaSmartSheetFunctions.Check4File(CStr(addWBPath))
If xFound Then
    If addWB Is Nothing Then
        Set addWB = Application.Workbooks(Dir(Environ("appdata") & "\Microsoft\Excel\XLSTART\AH-Buyer-SmartSheet-AddIn*.xlam"))
    End If
End If

SetFalse
chkObj = setObjects(addWB)

If chkObj = True Then
   
    strUserDomain = GetDomainName()
    If strUserDomain <> "GARDENRIDGE" Then
        SetVendorView "WB"
    ElseIf strUserDomain = "GARDENRIDGE" Then
        SetBuyerView "WB"
        
        xFound = vbaSmartSheetFunctions.Check4File(CStr(addWBPath))
        If xFound = True Then
            If Not IsFileOpen(CStr(addWBPath)) Then
                'Workbooks.Open Application.Workbooks(addWB.FullName)
            End If
        Else
            'MsgBox "Addin Missing - The Addin Needs to be installed for using all Buyer SmartSheet features", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
            Call vbaSmartSheetFunctions.HideOtherScreen
            'ThisWorkbook.Close False
            GoTo WayOut
        End If
        
            Call vbaSmartSheetFunctions.HideOtherScreen
        
            If smartWS.[OTBPeriod] = "" Then ' smartWS.[VendorNum].Value2 = "" Or smartWS.[OTBPeriod] = "" Then
                smartWS.[OTBPeriod].Value = WorksheetFunction.VLookup(CLng(CDate(DateAdd("d", 60, Date))), calWS.[tblFisCal], 2, True)
'            Else
'                smartWS.[OTBPeriod].Value = WorksheetFunction.VLookup(CLng(CDate(Date)), calWS.[tblFisCal], 2, True)
            End If
            If smartWS.Range("DistMeth") = "" Or IsEmpty(smartWS.Range("DistMeth")) Then
                smartWS.Range("DistMeth") = "2=PREDIST"
            End If
    End If
Else
    If Not addWB Is Nothing Then Application.Run ("'" & Replace(addWB.Name, "'", "''") & "'!ShowTheForm")
    GoTo WayOut
End If

Call vbaSmartSheetFunctions.hdlNames(Workbooks(SmartWB.Name))

OldcelDragCols = "": NewCelDragCols = ""
strOldRange = "": strNewRange = ""
CopiedCol = "": CopiedRow = ""
ToBePasteCol = "": ToBePasteRow = ""

WayOut:
Call ToggleCutCopyAndPaste(True)
OldcelDragCols = "": NewCelDragCols = ""
strOldRange = "": strNewRange = ""
CopiedCol = "": CopiedRow = ""
ToBePasteCol = "": ToBePasteRow = ""

smartWS.Activate
If (ActiveWindow.Zoom <> 100) Then ActiveWindow.Zoom = 100
SetTrue
End Sub
 
Private Sub Workbook_SheetActivate(ByVal Sh As Object)
On Error Resume Next
Set SmartWB = ActiveWorkbook
Set smartWS = SmartWB.Worksheets("Buyer-SmartSheet")
Set Sh = ActiveSheet

Dim myTyp
myTyp = 0
myTyp = ActiveCell.Validation.Type
On Error GoTo 0

If Sh.Name = smartWS.Name Then
    If Application.CutCopyMode = xlCut Or Application.CutCopyMode = xlCopy Or Len(GetClipboardText) > 0 Then
        If myTyp = 3 Then
            Call ToggleCutCopyAndPaste(False)
            End
        Else
            Call ToggleCutCopyAndPaste(True)
            End
        End If
    End If
End If

End Sub
Attribute VB_Name = "vbaCustomViews"
Option Explicit
Const strPassword = encryptionPassword
Global strUserDomain As String

Function GetDomainName() As String
Dim wsNetwork As Variant
 
 #If Mac Then
 
 #Else
    Set wsNetwork = CreateObject("WScript.Network")
    GetDomainName = wsNetwork.UserDomain
#End If
 End Function


Function SetBuyerView(Optional WB As String)
SetFalse
Set SmartWB = ActiveWorkbook
Set smartWS = ActiveWorkbook.Worksheets("Buyer-SmartSheet")

SmartWB.Unprotect password:=strPassword
smartWS.Activate

If smartWS.ProtectContents = True Then
    UnProtectSheet (smartWS.Name)
End If

Dim i As Integer, j As Integer

With smartWS
    .Cells.EntireRow.Hidden = False
    .Cells.EntireColumn.Hidden = False

        With SmartWB.Worksheets("ControlSet")
            For i = 2 To .UsedRange.Rows.Count
                If .Cells(i, 5) = 0 Then
                    smartWS.Range(.Cells(i, 2)).Columns.Hidden = True
                ElseIf .Cells(i, 5) = 1 Then
                    smartWS.Range(.Cells(i, 2)).Columns.Hidden = False
                End If
            Next i
        End With

    .ScrollArea = ""
    .Range("mTab_Required").EntireRow.Hidden = False
    .Range("mTabType").EntireRow.Hidden = False
    .Range("unusedCpls").Columns.Hidden = True
End With
Call unhideImages
smartWS.ListObjects("List1").HeaderRowRange.Columns(70) = ""
smartWS.ListObjects("List1").HeaderRowRange.Columns(70).Cells.Font.Color = vbWhite
LockCells
ProtectSheet (smartWS.Name)
SmartWB.Protect password:=strPassword, Structure:=True, Windows:=True

    If WB <> "WB" Then
        SetTrue
    End If
Application.GoTo Reference:=Worksheets(smartWS.Name).Range("D18"), Scroll:=True

End Function

Function SetVendorView(Optional WB As String)
SetFalse
Set SmartWB = ActiveWorkbook
Set smartWS = ActiveWorkbook.Worksheets("Buyer-SmartSheet")

SmartWB.Unprotect password:=strPassword
smartWS.Activate

If ActiveSheet.ProtectContents = True Then
    UnProtectSheet (ActiveSheet.Name)
End If
Dim i As Integer, j As Integer

smartWS.Cells.EntireRow.Hidden = False
smartWS.Cells.EntireColumn.Hidden = False
smartWS.Range("VendorHidden").Rows.Hidden = True
smartWS.Range("unusedCpls").Columns.Hidden = True
smartWS.ScrollArea = smartWS.Range("List1").Address
With SmartWB.Worksheets("ControlSet")
    For i = 2 To .UsedRange.Rows.Count
        If .Cells(i, 6) = 0 Then
            smartWS.Range(.Cells(i, 2)).Columns.Hidden = True
        ElseIf .Cells(i, 6) = 1 Then
            smartWS.Range(.Cells(i, 2)).Columns.Hidden = False
        End If
    Next i
End With
LockCells
Call vbaSmartSheetFunctions.hideImages
    smartWS.Range("mTab_Required").EntireRow.Hidden = False
    smartWS.Range("mTabType").EntireRow.Hidden = False
    smartWS.ListObjects("List1").HeaderRowRange.Columns(70) = "Additional Comments"
    smartWS.ListObjects("List1").HeaderRowRange.Columns(70).Cells.Font.Color = vbBlack
HideAllSheets
ProtectAllSheets
SmartWB.Protect password:=strPassword, Structure:=True, Windows:=True

If WB <> "WB" Then
    SetTrue
End If
Application.GoTo Reference:=Worksheets(smartWS.Name).Range("D18"), Scroll:=True
End Function

Function SetCustomView() 'Optional WB As String
SetFalse
Dim WB
Set SmartWB = ActiveWorkbook
Set smartWS = ActiveWorkbook.Worksheets("Buyer-SmartSheet")
SmartWB.Unprotect password:=strPassword
If smartWS.ProtectContents = True Then
UnProtectSheet (smartWS.Name)
End If
smartWS.Cells.EntireRow.Hidden = False
smartWS.Cells.EntireColumn.Hidden = False
'smartWS.Range("unusedRpws").Rows.Hidden = True
smartWS.Range("unusedCpls").Columns.Hidden = True
unhideImages
smartWS.ScrollArea = ""
smartWS.ListObjects("List1").HeaderRowRange.Columns(70) = ""
smartWS.ListObjects("List1").HeaderRowRange.Columns(70).Cells.Font.Color = vbWhite
LockCells
ProtectSheet (smartWS.Name)
SmartWB.Protect password:=strPassword, Structure:=True, Windows:=True
    
    If WB <> "WB" Then
        SetTrue
    End If
Application.GoTo Reference:=Worksheets(smartWS.Name).Range("D18"), Scroll:=True
End Function

Function GetColAddress()
Dim i As Long
Dim mainTab As ListObject
Set SmartWB = ActiveWorkbook
Set smartWS = SmartWB.Sheets("Buyer-SmartSheet")
Set cSetWS = SmartWB.Sheets("ControlSet")
Set mainTab = smartWS.ListObjects("List1")
UnProtectSheet (cSetWS.Name)
For i = 1 To smartWS.UsedRange.Columns.Count - 1
cSetWS.Cells(i + 1, 1) = mainTab.HeaderRowRange.Columns(i)
 If cSetWS.Cells(i + 1, 1) = mainTab.HeaderRowRange.Columns(i) Then ' smartWS.Cells(Range("mTab_Header").Row, i) Then
    cSetWS.Cells(i + 1, 2) = mainTab.HeaderRowRange.Columns(i).Address
    cSetWS.Cells(i + 1, 3) = mainTab.ListColumns(i).DataBodyRange.Address 'Range(Cells(smartWS.Range("mTab_Header").Offset(1, 0).Row, i), Cells(smartWS.UsedRange.Rows.Count, i)).Address
    cSetWS.Cells(i + 1, 1).Interior.Color = xlNone
 Else
    cSetWS.Cells(i + 1, 1).Interior.Color = vbRed
 End If
Next i
ProtectSheet ("ControlSet")
End Function

Function HideAllSheets()
Dim ws As Worksheet
ActiveWorkbook.Unprotect password:=strPassword
ActiveWorkbook.Worksheets("Buyer-SmartSheet").Visible = xlSheetVisible
ActiveWorkbook.Worksheets("Images").Visible = xlSheetVisible
For Each ws In ActiveWorkbook.Worksheets
 If ws.Name <> "Buyer-SmartSheet" And ws.Name <> "Images" Then
 ws.Visible = xlSheetVeryHidden
 End If
Next ws
ActiveWorkbook.Protect password:=strPassword, Structure:=True, Windows:=True
End Function

Function Unhideallsheets()
Dim ws As Worksheet
ActiveWorkbook.Unprotect password:=strPassword
ActiveWorkbook.Worksheets("Buyer-SmartSheet").Visible = xlSheetVisible
ActiveWorkbook.Worksheets("Images").Visible = xlSheetVisible
ActiveWorkbook.Worksheets("Buyer-SmartSheet").Activate
For Each ws In ActiveWorkbook.Worksheets
 If ws.Name <> "Buyer-SmartSheet" And ws.Name <> "Images" Then
 If ws.Visible <> xlSheetVisible Then
 ws.Visible = xlSheetHidden
 ws.Visible = xlSheetVisible
 End If
 End If
Next ws
End Function

Private Function Sheet_KeyPress _
(ByVal KeyAscii As Integer, ByVal KeyCode As Integer, _
ByVal Target As Range, Cancel As Boolean)
 
 Const msg As String = _
 "Numeric Characters are not allowed in" & _
 vbNewLine & "the Range: """
 Const TITLE As String = "Invalid Entry !"
 
 If Not Intersect(Target, Range("$T$4:$Z$5")) Is Nothing Then
 If Chr(KeyAscii) Like "[0-9]" Then
 MsgBox msg & Range("A1:D10").Address(False, False) _
 & """ .", vbCritical, TITLE
 Cancel = True
 End If
 End If
End Function

Function LockCells()
    Dim i As Long
    ActiveWorkbook.Sheets("Buyer-SmartSheet").Activate
    UnProtectSheet (ActiveSheet.Name)
    
        For i = 1 To ActiveWorkbook.Worksheets("Buyer-SmartSheet").UsedRange.Columns.Count
            If Worksheets("controlset").Cells(i + 1, 1) = ActiveSheet.Cells(ActiveSheet.Range("mTab_Header").Row, i) Then
                If Worksheets("controlset").Cells(i + 1, 4) = 0 Then
                    Range(Worksheets("controlset").Cells(i + 1, 3)).Locked = False
                ElseIf Worksheets("controlset").Cells(i + 1, 4) = 1 Then
                    Range(Worksheets("controlset").Cells(i + 1, 3)).Locked = True
                End If
            End If
        Next i
    
    ProtectSheet (ActiveSheet.Name)
End Function
Attribute VB_Name = "vbaGetCSVData"
Option Explicit
Public curDataFilePath As String
'Global Const curDataFilePath = "\\corp-files1\COMMON2\iSeriesDev\Item_PO_RefSheets\"    'Development
'Global Const curDataFilePath = "\\corp-files1\COMMON2\iSeriesTest\Item_PO_RefSheets\"    'Test
'Global Const curDataFilePath = "\\corp-files1\COMMON2\iSeriesProd\Item_PO_RefSheets\"    'Production

Sub FindReplaceAll(fnd As String, rplc As String, wsname As String)
'PURPOSE: Find & Replace text/values throughout a specific sheet
'SOURCE: www.TheSpreadsheetGuru.com
Dim sht As Worksheet
'Store a specfic sheet to a variable
  Set sht = ActiveWorkbook.Worksheets(wsname)
'Perform the Find/Replace All
On Error Resume Next
  sht.Cells.Replace what:=fnd, Replacement:=rplc, _
    LookAt:=xlPart, SearchOrder:=xlByRows, MatchCase:=False, _
    SearchFormat:=False, ReplaceFormat:=False
On Error GoTo 0
End Sub

''******************************************************************
'' Download hierarchy from MMS
''******************************************************************
'
'Function GetDepartment()
'
'If setObjects = False Then Exit Function
''
''If Not getAuth() Then Exit Function
'
'SetFalse
'Dim curDataFileName As String, strSQL As String
'Dim xlCon As Connection, xlRs As Recordset
'
'Set xlCon = New ADODB.Connection
'Set xlRs = New ADODB.Recordset
'
'curDataFilePath = Environ("temp") & "\TempBSSCSVRef\"
''curDataFilePath = "\\corp-files1\COMMON2\iSeriesDev\Item_PO_RefSheets\"    'Development
'curDataFileName = "POM800_Ref_Hierarchy"
'
'vbaSmartSheetFunctions.Check4File (curDataFilePath & curDataFileName & ".csv")
'
'If xFound = False Then
'    MsgBox "The CSV query file is missing in the Shared Drive. Please contact Buyers SmartSheet Admin.", vbCritical, "At Home: Buyer SmartSheet|fffd|"
'    GoTo WayOut
'End If
'
'Dim nextRow As Integer
'
'#If Win64 Then
'    With xlCon
'        .Provider = "Microsoft.ACE.OLEDB.12.0"
'        .ConnectionString = "Data Source=" & curDataFilePath & ";" & _
'        "Extended Properties=""text;HDR=Yes;FMT=Delimited;IMEX=1;Mode=Read;ReadOnly=True;"""
'    End With
'#Else
'    With xlCon
'        .Provider = "Microsoft.Jet.OLEDB.4.0"
'        .ConnectionString = "Data Source=" & curDataFilePath & ";" & _
'        "Extended Properties=""text;HDR=Yes;FMT=Delimited;IMEX=1;Mode=Read;ReadOnly=True;"""
'    End With
'#End If
'
'On Error Resume Next
'xlCon.Open
'If xlCon Is Nothing Then
'    With xlCon
'        .Provider = "Microsoft.Jet.OLEDB.4.0"
'        .ConnectionString = "Data Source=" & curDataFilePath & ";" & _
'        "Extended Properties=""text;HDR=Yes;FMT=Delimited;IMEX=1;Mode=Read;ReadOnly=True;"""
'    End With
'    xlCon.Open
'End If

'On Error GoTo 0
'
'UnProtectSheet hierWS.Name
'xlRs.CursorLocation = adUseClient
'xlRs.Open "SELECT DISTINCT DEPT, SUB_DEPT, CLASS, SUB_CLASS FROM " & curDataFileName & ".csv ORDER BY DEPT, SUB_DEPT, CLASS, SUB_CLASS", xlCon
'hierWS.ListObjects("Table4").DataBodyRange.ClearContents
'hierWS.Range("Table4").Cells(1, 1).CopyFromRecordset xlRs
''clearblankspaces Range(hierWS.Range("hTab_distDep").Offset(1, 0).EntireColumn.Address)
'xlRs.Close
'
'UnProtectSheet hierWS.Name
'xlRs.CursorLocation = adUseClient
'xlRs.Open "SELECT DISTINCT DEPT FROM " & curDataFileName & ".csv ORDER BY DEPT", xlCon
'hierWS.Range("hTab_distDepRng").ClearContents
'hierWS.Range("hTab_distDep").Offset(1, 0).CopyFromRecordset xlRs
''clearblankspaces Range(hierWS.Range("hTab_distDep").Offset(1, 0).EntireColumn.Address)
'xlRs.Close
'
'xlRs.CursorLocation = adUseClient
'xlRs.Open "SELECT DISTINCT DEPT, SUB_DEPT  FROM " & curDataFileName & ".csv ORDER BY DEPT", xlCon
'hierWS.Range("hTab_Dep2SDepRng").Resize(, 2).ClearContents
'hierWS.Range("hTab_Dep2SDep").Offset(1, 0).CopyFromRecordset xlRs
''clearblankspaces Range(hierWS.Range("hTab_distDep").Offset(1, 2).EntireColumn)
'xlRs.Close
'
'xlRs.CursorLocation = adUseClient
'xlRs.Open "SELECT DISTINCT DEPT & SUB_DEPT AS SUB_DEPT, CLASS  FROM " & curDataFileName & ".csv ORDER BY 1", xlCon
'hierWS.Range("hTab_SDep2ClsRng").Resize(, 2).ClearContents
'hierWS.Range("hTab_SDep2Cls").Offset(1, 0).CopyFromRecordset xlRs
''clearblankspaces Range(hierWS.Range("hTab_distDep").Offset(1, 5).EntireColumn)
'xlRs.Close
'
'xlRs.CursorLocation = adUseClient
'xlRs.Open "SELECT DISTINCT DEPT & SUB_DEPT & CLASS AS CLASS, SUB_CLASS  FROM " & curDataFileName & ".csv ORDER BY 1", xlCon
'hierWS.Range("hTab_Cls2sClsRng").Resize(, 2).ClearContents
'hierWS.Range("hTab_Cls2sCls").Offset(1, 0).CopyFromRecordset xlRs
''clearblankspaces Range(hierWS.Range("hTab_distDep").Offset(1, 8).EntireColumn)
'xlRs.Close
'
'xlCon.Close
'
'Set xlRs = Nothing
'Set xlCon = Nothing
'
'Call FindReplaceAll
'
'WayOut:
'ProtectSheet hierWS.Name
'If Not (xlRs Is Nothing) Then
'  If (xlRs.State And adStateOpen) = 1 Then xlRs.Close
'  Set xlRs = Nothing
'End If
'If Not (xlCon Is Nothing) Then
'  If (xlCon.State And adStateOpen) = 1 Then xlCon.Close
'  Set xlCon = Nothing
'End If
'Application.StatusBar = "Ready"
'If xFound = True Then xFound = False
'SetTrue
'
'End Function

'Function GetOTBDetails(addWB As Workbook)
'SetFalse
'Application.DisplayStatusBar = True
'Dim query As String
'Dim xlCon As New ADODB.Connection
'Dim xlRs As New ADODB.Recordset
'Dim xOTB As String, xRng As Range, xCell
'Dim currentDataFileName As String
'Dim thisRow As Integer
'Application.StatusBar = "Checking the connection and authorizing the user... please wait!"
'If setObjects = False Then Exit Function
'Application.StatusBar = "Checking for OTB Period and Department in Buyers SmartSheet... please wait!"
'If smartWS.Range("OTBPeriod") = "" Or smartWS.Range("Department") = "" Then
'    MsgBox "The OTB Period and Department must be select to refresh the data", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
'    SetTrue
'    End
'End If
'
''If Not getAuth() Then Exit Function
'Application.StatusBar = "Preparing the connection to fetch details... please wait!"
'Set xlCon = New ADODB.Connection
'Set xlRs = New ADODB.Recordset
'
'    If Not (smartWS.Range("OTBPeriod")) Is Nothing Then
'        Set xRng = smartWS.Range("OTBPeriod")
'        xOTB = Left(xRng.Value, 9)
'    Else
'        Set xRng = SmartWB.Sheets("OTB").Range("OTBDetails")
'
'        For Each xCell In xRng(1).Cells
'            If xCell.Value <> "" Then
'                xOTB = xOTB & "'" & xCell.Value & "',"
'            End If
'        Next xCell
'
'        xOTB = Left(xOTB, Len(xOTB) - 1)
'        xOTB = Left(xOTB, 9)
'
'    End If
'
'Application.StatusBar = "Checking for the CSV Query file... please wait!"
'
''curDataFilePath = Environ("temp") & "\TempBSSCSVRef\"
'curDataFilePath = "\\corp-files1\COMMON2\iSeriesDev\Item_PO_RefSheets\" ' Development
'currentDataFileName = "POM800_BI_REF_OTB"
'xFound = False
'xFound = vbaSmartSheetFunctions.Check4File(curDataFilePath & currentDataFileName & ".csv")
'
'If xFound = False Then
'    MsgBox "The CSV query file is missing in the Shared Drive. Please contact Buyers SmartSheet Admin.", vbCritical, "At Home: Buyer SmartSheet|fffd|"
'    SetTrue
'    End
'End If
'
'Application.StatusBar = "Connecting... please wait!"
'
'#If Win64 Then
'    With xlCon
'        .Provider = "Microsoft.ACE.OLEDB.12.0"
'        .ConnectionString = "Data Source=" & curDataFilePath & ";" & _
'        "Extended Properties=""text;HDR=Yes;FMT=Delimited;IMEX=1;Mode=Read;ReadOnly=True;"""
'    End With
'#Else
'    With xlCon
'        .Provider = "Microsoft.Jet.OLEDB.4.0"
'        .ConnectionString = "Data Source=" & curDataFilePath & ";" & _
'        "Extended Properties=""text;HDR=Yes;FMT=Delimited;IMEX=1;Mode=Read;ReadOnly=True;"""
'    End With
'#End If
'
'On Error Resume Next
'xlCon.Open
'If xlCon Is Nothing Then
'    With xlCon
'        .Provider = "Microsoft.Jet.OLEDB.4.0"
'        .ConnectionString = "Data Source=" & curDataFilePath & ";" & _
'        "Extended Properties=""text;HDR=Yes;FMT=Delimited;IMEX=1;Mode=Read;ReadOnly=True;"""
'    End With
'    xlCon.Open
'End If
'
'On Error GoTo 0
'
'Application.StatusBar = "Querying the data... please wait!"
'xlRs.CursorLocation = adUseClient
'xlRs.Open "SELECT * FROM [" & currentDataFileName & ".csv]", xlCon
'
'If (xlRs.BOF And xlRs.EOF) Then
'    Application.StatusBar = "No records found!"
'    SetTrue
'    End
'Else
'    xlRs.MoveFirst
'    Debug.Print Replace(addWB.Name, "'", "''")
'    Application.StatusBar = "Success! " & xlRs.RecordCount & " record(s) fetched!"
'End If
'OTBWS.Activate
'Application.StatusBar = "Fetching OTB details to Buyers SmartSheet... please wait!"
'Dim i As Integer, j As Integer, x As String
'i = xlRs.Fields.Count
'SmartWB.Unprotect encryptionPassword
''OTBWS.Visible = xlSheetVisible
'UnProtectSheet (OTBWS.Name)
'
'thisRow = 1
'
'For j = 0 To i - 1
'    OTBWS.Cells(thisRow, j + 1).EntireColumn.ClearContents
'    x = xlRs.Fields.Item(j).Name
'    OTBWS.Cells(thisRow, j + 1).Value = x
'Next j
'
'OTBWS.Range("OTBCalWeek").Offset(1, 0).CopyFromRecordset xlRs
'
'For j = 0 To i - 1
'    x = xlRs.Fields.Item(j).Name
'
'Select Case True
'    Case Right(Trim(x), 1) = "$" Or Right(Trim(x), 4) = "Code"
'        OTBWS.Cells(thisRow, j + 1).EntireColumn.Cells.NumberFormat = "General"
'        OTBWS.Cells(thisRow, j + 1).EntireColumn.TextToColumns DataType:=xlDelimited, _
'                                        TextQualifier:=xlDoubleQuote, ConsecutiveDelimiter:=False, Tab:=True, _
'                                        Semicolon:=False, Comma:=False, Space:=False, Other:=False, FieldInfo _
'                                        :=Array(1, 1), TrailingMinusNumbers:=True
'End Select
'
'Next j
'
'ProtectSheet (OTBWS.Name)
'SmartWB.Protect password:=encryptionPassword, Structure:=True, Windows:=True
'smartWS.Activate
'
'WayOut:
'
'If Not (xlRs Is Nothing) Then
'  If (xlRs.State And adStateOpen) = 1 Then xlRs.Close
'  Set xlRs = Nothing
'End If
'If Not (xlCon Is Nothing) Then
'  If (xlCon.State And adStateOpen) = 1 Then xlCon.Close
'  Set xlCon = Nothing
'End If
'Application.StatusBar = "Ready"
'If xFound = True Then xFound = False
'SetTrue
'
'End Function

Attribute VB_Name = "vbaReuseModules"
Option Explicit
'Global UsrRng, foundRng, SmartWB, smartWS, cSetWS, shipWS, hierWS, refWS, calWS, SKUWS, OTBWS, fCtrlWS, objStr, Lst, strOldRange, strNewRange, CopiedCol, ToBePasteCol, CopiedRow, ToBePasteRow, blnClose
'Global selectedRos, selectedCols
'Global foundRos, foundCols
'Global OldcelDragCols, NewCelDragCols, oldSelCells, xFound As Boolean

Function chkLastRow()
SetFalse
Dim xTab As ListObject, strSKU As String, strVPN As String, skuCol As Long, vpnCol As Long, lstSKURow As Long, lstvpnRow As Long, headRow As Long, lstLineRow As Long, linCol As Long, maxRow As Long, othMax, othStr, othChk() As Long, strVal As String, valRow As Long
Dim i As Integer, x As Integer, y
Dim zxCell, zxRng, vbResp, yzRng

Set SmartWB = ActiveWorkbook
Set smartWS = ActiveWorkbook.Worksheets("Buyer-SmartSheet")
On Error Resume Next
Set yzRng = Intersect(ActiveCell.EntireRow, ActiveCell.ListObject.DataBodyRange)

foundRng = GetAutoFilterRange

If Not yzRng Is Nothing Then
    Call vbaSmartSheetFunctions.AssignUsrRng(smartWS.Range(yzRng(1).Address))
End If

On Error GoTo 0

Set xTab = smartWS.ListObjects("List1")

strSKU = "SKU (if already in JDA)"
strVPN = "Vendor Part #" & Chr(10) & "(up to 15 chars)"

On Error Resume Next
skuCol = Application.WorksheetFunction.Match(strSKU, xTab.HeaderRowRange, 0)
vpnCol = Application.WorksheetFunction.Match(strVPN, xTab.HeaderRowRange, 0)
linCol = Application.WorksheetFunction.Match("Line", xTab.HeaderRowRange, 0)
headRow = smartWS.Range("mTab_Header").Row
On Error GoTo 0
lstSKURow = 0: lstvpnRow = 0: lstLineRow = 0
On Error Resume Next
lstSKURow = xTab.DataBodyRange.Columns(skuCol).find("*", SearchOrder:=xlByRows, SearchDirection:=xlPrevious).Row
lstvpnRow = xTab.DataBodyRange.Columns(vpnCol).find("*", SearchOrder:=xlByRows, SearchDirection:=xlPrevious).Row
lstLineRow = xTab.DataBodyRange.Columns(linCol).find("*", SearchOrder:=xlByRows, LookIn:=xlValues, SearchDirection:=xlPrevious).Row
maxRow = (Application.WorksheetFunction.Max(lstSKURow, lstvpnRow, lstLineRow) + 1) - headRow
On Error GoTo 0

vbResp = MsgBox("This will clear data entered in this Worksheet." & vbCrLf & vbCrLf & "Select 'Yes' to clear off the entire Details Section along with the Header Details." & vbCrLf & vbCrLf & "Select 'No' to clear off data from the selected row." & _
                    vbCrLf & vbCrLf & "Select 'Cancel' and no changes will be made.", vbExclamation + vbYesNoCancel + vbDefaultButton3, "At Home: Buyer SmartSheet")

UnProtectSheet smartWS.Name
Select Case vbResp

    Case vbYes

'==================================
'Resets all rows
'==================================

    For x = 1 To xTab.ListColumns.Count
    strVal = smartWS.Range("mTab_Required").Cells(1, x)
    Select Case True
        Case strVal = "Mandatory"
            xTab.HeaderRowRange.Columns(x).Cells.Interior.Color = RGB(100, 100, 100)
            xTab.HeaderRowRange.Columns(x).Cells.Font.Color = vbWhite
            smartWS.Range("mTab_Required").Cells(1, x).Interior.Color = xlNone
            smartWS.Range("mTab_Required").Cells(1, x).Font.Color = vbBlack
            xTab.ListColumns(x).DataBodyRange.Cells.Interior.Color = xlNone
        Case strVal = "Optional"
        If x <> 70 Then
            xTab.HeaderRowRange.Columns(x).Cells.Interior.Color = xlNone
            xTab.HeaderRowRange.Columns(x).Cells.Font.Color = vbBlack
            smartWS.Range("mTab_Required").Cells(1, x).Interior.Color = xlNone
            smartWS.Range("mTab_Required").Cells(1, x).Font.Color = vbBlack
            xTab.ListColumns(x).DataBodyRange.Cells.Interior.Color = xlNone
        End If
        Case strVal = "Calculated" Or strVal = "Hidden"
            xTab.ListColumns(x).DataBodyRange.Cells.Interior.Color = RGB(217, 217, 217)
            xTab.ListColumns(x).DataBodyRange.Cells.Locked = True
    End Select
    Next x
    
    If Environ("USERNAME") = "VChakkoth" Or Environ("USERNAME") = "VShankara" Then
        If MsgBox("Do you want to clear the Header data as well? Please confirm!", vbQuestion + vbYesNo + vbDefaultButton2, "At Home: Buyer SmartSheet") = vbYes Then
            With smartWS
                .[ShipPoint1].ClearContents: .[ShipPoint2].ClearContents
                .[SelectSplit].ClearContents: .[StoreSplitOld] = .[StoreSplit]: .[StoreSplit] = 0
                .[OTBPeriod].MergeArea.ClearContents
                .[TransitDays1].ClearContents: .[TransitDays2].ClearContents
                .[Commission].MergeArea = 0
                .[Commission].Cells.Interior.Color = RGB(217, 217, 217)
                .[ImpOrDom].ClearContents
                .[DistMeth].ClearContents
                .[VendorNum].ClearContents: .[VendorName].MergeArea.ClearContents
                .[Buyer].ClearContents
                .[Department].MergeArea.ClearContents: .[xDepartment] = 0
                .[DmgAlw].ClearContents: .[MktgAlw].ClearContents: .[NewStrAlw].ClearContents: .[TradeAlw].ClearContents
                .[DmgAlw].Cells.Interior.Color = RGB(217, 217, 217): .[MktgAlw].Cells.Interior.Color = RGB(217, 217, 217): .[NewStrAlw].Cells.Interior.Color = RGB(217, 217, 217): .[TradeAlw].Cells.Interior.Color = RGB(217, 217, 217)
                .[ExtNote1].MergeArea.ClearContents: .[ExtNote2].MergeArea.ClearContents
                .[IntNote1].MergeArea.ClearContents: .[IntNote2].MergeArea.ClearContents
                .[BuyNote].MergeArea.ClearContents
                .[ApproverSign].MergeArea.ClearContents
                .[BlendIMUStrCnt].ClearContents: .[BlendIMU5050].ClearContents: .[BlendIMUStrCnt] = 0: .[BlendIMU5050] = 0
                .[StoreCount1].ClearContents: .[StoreCount2].ClearContents: .[StoreCount1] = 0: .[StoreCount2] = 0
                .[CP_SKU].ClearContents: .[CP_BuyQty].ClearContents: .[CP_BuyRet].ClearContents: .[CP_IMU1].ClearContents: .[CP_IMU2].ClearContents: .[CP_Blended].ClearContents
                .Range("SubDeptRng").Cells.Validation.Delete
                .Range("mtab_ClassRng").Cells.Validation.Delete
                .Range("subClassRng").Cells.Validation.Delete
            End With
        End If
    End If
    
    Call SetNumberFormats
        
        For i = maxRow To (xTab.DataBodyRange.Rows.Count - 1)
         On Error Resume Next
            'Debug.Print xTab.ListRows(i).Range.SpecialCells(xlCellTypeConstants).Address
            'debug.print xTab.DataBodyRange.Cells.SpecialCells(xlCellTypeConstants, 23).Address
            With xTab
                .DataBodyRange.Cells.SpecialCells(xlCellTypeConstants, 23).ClearContents
                .DataBodyRange.Cells.SpecialCells(xlCellTypeConstants, 23).Locked = False
                .DataBodyRange.Cells.SpecialCells(xlCellTypeBlanks).Locked = False
                .ListColumns("Season Code").DataBodyRange.Cells.Locked = True
                .ListColumns("Second UPC").DataBodyRange.Cells.Locked = True
            End With
            With xTab.DataBodyRange.Cells.Font
                .Name = "Tahoma"
                .Bold = False
                .Italic = False
                .Underline = False
                .Color = vbBlack
                .Size = 9
            End With

            If Err.Number = 1004 Then GoTo WayOut
          On Error GoTo 0
          GoTo WayOut
        Next i

    Case vbNo
    If ActiveCell.Row > headRow Then
        On Error Resume Next
            For Each zxCell In UsrRng
                Set zxRng = Intersect(zxCell.EntireRow, zxCell.ListObject.DataBodyRange)
                    If Not zxRng Is Nothing Then
                        zxRng.Cells.SpecialCells(xlCellTypeConstants, 23).ClearContents
                        zxRng.Cells.SpecialCells(xlCellTypeConstants, 23).Locked = False
                        If Err.Number = 1004 Then GoTo nexOne
                    End If
nexOne:
            Next zxCell
        On Error GoTo 0
    Else
        MsgBox "Please select a row in the Detail Section to clear contents", vbExclamation, "At Home: Buyer SmartSheet"
        GoTo WayOut
    End If

    Case vbCancel
        GoTo WayOut

End Select

WayOut:
Call ToggleCutCopyAndPaste(True)
OldcelDragCols = "": NewCelDragCols = ""
strOldRange = "": strNewRange = ""
CopiedCol = "": CopiedRow = ""
ToBePasteCol = "": ToBePasteRow = ""

smartWS.Activate
If (ActiveWindow.Zoom <> 100) Then ActiveWindow.Zoom = 100
Application.GoTo Reference:=Worksheets(smartWS.Name).Range("D18"), Scroll:=True

ProtectSheet smartWS.Name

SetTrue
End Function
Attribute VB_Name = "vbaSmartSheetFunctions"
Option Explicit

Global UsrRng As Range, foundRng, SmartWB, smartWS, cSetWS, shipWS, hierWS, refWS, calWS, SKUWS, OTBWS, fCtrlWS, objStr, Lst, strOldRange, strNewRange, CopiedCol, ToBePasteCol, CopiedRow, ToBePasteRow, blnClose
Global selectedRos, selectedCols, mycopyText
Global foundRos, foundCols
Global OldcelDragCols, NewCelDragCols, oldSelCells, xFound As Boolean
Public Const encryptionPassword = "I must not fear.  Fear is the mindkiller."
Dim mmsServer, mmsUser, mmsPassword, mmsLibrary, mmsCtlLibrary As String
Dim authed As Boolean
Global xChange As Boolean, skuReq, skuRes
Dim anyErrors
Const strPassword = encryptionPassword


Function Check4File(xFile As String) As Boolean
    Dim FilePath As String
    FilePath = ""
    xFound = True
    On Error Resume Next
    FilePath = Dir(xFile)
    On Error GoTo 0
    If FilePath <> "" Then
        xFound = True
    Else
        xFound = False
    End If
    
    Check4File = xFound
    
End Function

Function setObjects(Optional addWB As Workbook) As Boolean
On Error Resume Next
Set SmartWB = ActiveWorkbook
Dim anyErrors As Boolean, x As Integer

If Not addWB Is Nothing Then Application.Run ("'" & Replace(addWB.Name, "'", "''") & "'!HideTheForm")
If Not addWB Is Nothing Then Application.Run ("'" & Replace(addWB.Name, "'", "''") & "'!ClearTheForm")

setObjects = True

x = 1
    If SheetExists("Buyer-SmartSheet", Workbooks(SmartWB.Name)) Then
        Set smartWS = SmartWB.Sheets("Buyer-SmartSheet")
    Else
        Call vbaSmartSheetFunctions.chkShtError("Buyer-SmartSheet Missing!", x)
        x = x + 1
        setObjects = False
    End If

    If SheetExists("ControlSet", Workbooks(SmartWB.Name)) Then
        Set cSetWS = SmartWB.Sheets("ControlSet")
    Else
        Call vbaSmartSheetFunctions.chkShtError("ControlSet Sheet Missing!", x)
        x = x + 1
        setObjects = False
    End If

     If SheetExists("Shipping Points", Workbooks(SmartWB.Name)) Then
        Set shipWS = SmartWB.Sheets("Shipping Points")
    Else
        Call vbaSmartSheetFunctions.chkShtError("Shipping Points Sheet Missing!", x)
        x = x + 1
        setObjects = False
    End If

    If SheetExists("Hierarchy", Workbooks(SmartWB.Name)) Then
        Set hierWS = SmartWB.Sheets("Hierarchy")
    Else
        Call vbaSmartSheetFunctions.chkShtError("Hierarchy Sheet Missing!", x)
        x = x + 1
        setObjects = False
    End If

    If SheetExists("RefSheets", Workbooks(SmartWB.Name)) Then
        Set refWS = SmartWB.Sheets("RefSheets")
    Else
        Call vbaSmartSheetFunctions.chkShtError("Reference Sheet Missing!", x)
        setObjects = False
    End If

    If SheetExists("SKUAttributes", Workbooks(SmartWB.Name)) Then
        Set SKUWS = SmartWB.Sheets("SKUAttributes")
    Else
        Call vbaSmartSheetFunctions.chkShtError("SKUAttributes Sheet Missing!", x)
        setObjects = False
    End If

    If SheetExists("OTB", Workbooks(SmartWB.Name)) Then
        Set OTBWS = SmartWB.Sheets("OTB")
    Else
        Call vbaSmartSheetFunctions.chkShtError("OTB Sheet Missing!", x)
        setObjects = False
    End If

    If SheetExists("FieldCtrl", Workbooks(SmartWB.Name)) Then
        Set fCtrlWS = SmartWB.Sheets("FieldCtrl")
    Else
        Call vbaSmartSheetFunctions.chkShtError("FieldCtrl Sheet Missing!", x)
        setObjects = False
    End If

    If SheetExists("Calendar", Workbooks(SmartWB.Name)) Then
        Set calWS = SmartWB.Sheets("Calendar")
    Else
        Call vbaSmartSheetFunctions.chkShtError("Calendar Sheet Missing!", x)
        setObjects = False
    End If
On Error GoTo 0

End Function

Function SheetExists(shtName As String, Optional WB As Workbook) As Boolean
    Dim sht As Worksheet
        If WB Is Nothing Then Set WB = SmartWB
            On Error Resume Next
                Set sht = WB.Sheets(shtName)
            On Error GoTo 0

            SheetExists = Not sht Is Nothing
 End Function

Function chkShtError(errMsg As String, Optional shtCt As Integer, Optional addWB As Workbook)
Dim anyErrors As Boolean
    anyErrors = True
    Application.Run "'" & Replace(addWB.Name, "'", "''") & "'!ShowError", "Error in Workbook; Error message = " & shtCt & ": " & errMsg
End Function

Function FilterHighlight() As Boolean
'Application.EnableEvents = False
On Error GoTo xFunction
Set Lst = smartWS.ListObjects("List1")

Dim flt As Filter
    Dim intCol As Integer
        For Each flt In Lst.AutoFilter.Filters
            intCol = intCol + 1
            If flt.On Then
                FilterHighlight = True
                Exit Function
            Else
                FilterHighlight = False
            End If
        Next flt
Exit Function
xFunction:
FilterHighlight = False
'Application.EnableEvents = True
End Function



Public Function GetAutoFilterRange() As String
'Application.EnableEvents = False
'Cancel = True

Set Lst = ActiveWorkbook.Worksheets("Buyer-SmartSheet").ListObjects("List1")

Set foundRos = Nothing: Set foundCols = Nothing: Set selectedRos = Nothing: Set selectedCols = Nothing: Set foundRng = Nothing

    If Lst.AutoFilter.FilterMode Then
        If vbaSmartSheetFunctions.FilterHighlight = True Then
            With Lst.AutoFilter.Range
            Set UsrRng = .Offset(1, 0).Resize(.Rows.Count - 1, 1).Cells.SpecialCells(xlCellTypeVisible)
                If Selection.Columns(1).Rows.Count > 1 Then
                    selectedRos = smartWS.Range(Selection.Columns(1).Address).Rows.SpecialCells(xlCellTypeVisible).Count
                Else
                    selectedRos = 1
                End If

                If Selection.Rows(1).Columns.Count > 1 Then
                    If ActiveCell.Column = Selection.Columns(1).Column Then
                        selectedCols = smartWS.Range(Selection.Rows(1).Address).Columns.SpecialCells(xlCellTypeVisible).Count
                    Else
                        MsgBox "Activecell cannot be in the last column of the selected Range. Invalid Range selection.", vbCritical
                        GetAutoFilterRange = "Exit"
                        Exit Function
                    End If
                Else
                    selectedCols = 1
                End If

                If selectedRos > 1 Or selectedCols > 1 Then
                'GetAutoFilterRange = smartWS.Cells(Target.Row, Target.Column).Resize(Selection.Rows.Count, Target.Column).SpecialCells(xlCellTypeVisible)
                    GetAutoFilterRange = "FilterSelection"
                'GetAutoFilterRange = smartWS.Range(Selection.Columns(1).Address).SpecialCells(xlCellTypeVisible).Address
                ElseIf selectedRos = 1 Then
                    GetAutoFilterRange = "FilterTarget"
                ElseIf UsrRng.Cells.Count = 0 Then
                    MsgBox "No Rows found to work", vbCritical
                    GetAutoFilterRange = "Exit"
                    Exit Function
                End If
            End With
        Else
            If Selection.Cells.Count = 1 Then
                GetAutoFilterRange = "NoFilterTarget"
                Exit Function
            ElseIf Selection.Cells.Count > 1 Then
                GetAutoFilterRange = "NoFilterSelection"
                Exit Function
            End If
        End If
    Else
'        On Error Resume Next
'        Application.Undo
'        On Error GoTo 0
        If Selection.Cells.Count = 1 Then
            GetAutoFilterRange = "NoFilterTarget"
            Exit Function
        ElseIf Selection.Cells.Count > 1 Then
            GetAutoFilterRange = "NoFilterSelection"
            Exit Function
        End If
    End If
End Function


Function AssignUsrRng(ByVal Target As Excel.Range)
Dim xyzRng As Range, xRng As Range
    Select Case True
        Case foundRng = "NoFilterTarget" Or foundRng = "FilterTarget"
        If Selection.Areas.Count > 1 Then
            Set xRng = Nothing: Set xyzRng = Nothing
            For Each xyzRng In Selection.Areas
                If xRng Is Nothing Then
                    Set xRng = xyzRng
                Else
                    Set xRng = Union(xRng, xyzRng)
                End If
            Next xyzRng
            Set UsrRng = smartWS.Range(xRng.Address)
        ElseIf Selection.Areas.Count = 1 Then
            If Selection.Cells.Count > 1 Then
                Set UsrRng = smartWS.Range(Selection.Columns(1).Address)
            Else
                'Set UsrRng = smartWS.Range(ActiveCell.Address)
                Set UsrRng = smartWS.Range(Target.Address)
            End If
        End If

        Case foundRng = "NoFilterSelection"
        If Selection.Areas.Count > 1 Then
            Set xRng = Nothing: Set xyzRng = Nothing
            For Each xyzRng In Selection.Areas
                If xRng Is Nothing Then
                    Set xRng = xyzRng
                Else
                    Set xRng = Union(xRng, xyzRng)
                End If
            Next xyzRng
            Set UsrRng = smartWS.Range(xRng.Address)
        ElseIf Selection.Areas.Count = 1 Then
            If Selection.Cells.Count > 1 Then
                Set UsrRng = smartWS.Range(Selection.Columns(1).Address)
            Else
                'Set UsrRng = smartWS.Range(ActiveCell.Address)
                Set UsrRng = smartWS.Range(Target.Address)
            End If
'            Set UsrRng = smartWS.Range(Selection.Columns(1).Address)
        End If
        Case foundRng = "Exit"
'            UnProtectSheet (smartWS.name)

        Exit Function

        Case foundRng = "FilterSelection"
        If Selection.Areas.Count > 1 Then
            Set xRng = Nothing: Set xyzRng = Nothing
            For Each xyzRng In Selection.Areas
                If xRng Is Nothing Then
                    Set xRng = xyzRng
                Else
                    Set xRng = Union(xRng, xyzRng)
                End If
            Next xyzRng
            Set UsrRng = smartWS.Range(xRng.Address)
        ElseIf Selection.Areas.Count = 1 Then
            If Selection.Cells.Count > 1 Then
                Set UsrRng = smartWS.Range(Selection.Cells.Address).Resize(Selection.Rows.Count, 1).SpecialCells(xlCellTypeVisible)
            Else
                'Set UsrRng = smartWS.Range(ActiveCell.Address)
                Set UsrRng = smartWS.Range(Target.Address).Resize(Selection.Rows.Count, 1).SpecialCells(xlCellTypeVisible)
            End If
            'Set UsrRng = smartWS.Range(Target.Address).Resize(Selection.Rows.Count, 1).SpecialCells(xlCellTypeVisible)
        End If
    End Select
End Function



Function ColLtr(iCol As Long) As String
'iCol = 1550
If iCol > 0 And iCol <= Columns.Count Then ColLtr = Replace(Cells(1, iCol).Address(0, 0), 1, "")
End Function

Function ProtectAllSheets()
Unhideallsheets
Dim ws As Worksheet
For Each ws In ActiveWorkbook.Worksheets
If ws.Name <> "Images" Then
        ws.Protect password:=strPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True, _
         UserInterfaceOnly:=True, AllowFormattingCells:=True, AllowFormattingColumns:=False, _
         AllowFormattingRows:=False, AllowInsertingColumns:=False, AllowInsertingRows:=False, _
         AllowInsertingHyperlinks:=False, AllowDeletingColumns:=False, AllowDeletingRows:=False, _
         AllowSorting:=False, AllowFiltering:=True, AllowUsingPivotTables:=False
         ws.EnableSelection = xlNoRestrictions
End If
Next ws
HideAllSheets
ActiveWorkbook.Protect password:=strPassword, Structure:=True, Windows:=True
End Function

Function UnProtectAllSheets()

ActiveWorkbook.Protect password:=strPassword
Dim ws As Worksheet
For Each ws In ActiveWorkbook.Worksheets
ws.Unprotect password:=strPassword
Next ws

End Function

Function ProtectSheet(strSheet As String)
Set SmartWB = ActiveWorkbook
Dim ws As Worksheet


ActiveWorkbook.Unprotect password:=strPassword
Set ws = SmartWB.Worksheets(strSheet)
ws.Protect password:=strPassword, DrawingObjects:=True, Contents:=True, Scenarios:=True, _
 UserInterfaceOnly:=True, AllowFormattingCells:=True, AllowFormattingColumns:=False, _
 AllowFormattingRows:=False, AllowInsertingColumns:=False, AllowInsertingRows:=False, _
 AllowInsertingHyperlinks:=False, AllowDeletingColumns:=False, AllowDeletingRows:=False, _
 AllowSorting:=False, AllowFiltering:=True, AllowUsingPivotTables:=False
ActiveWorkbook.Protect password:=strPassword, Structure:=True, Windows:=True

End Function

Function UnProtectSheet(strSheet As String)

Dim ws As Worksheet
ActiveWorkbook.Unprotect password:=strPassword
Set ws = ActiveWorkbook.Worksheets(strSheet)
ws.Unprotect password:=strPassword
ActiveWorkbook.Protect password:=strPassword, Structure:=True, Windows:=True

End Function

Function selSplit(sWS As Worksheet, Target As Range)
                  Select Case True
                    Case Target = "SYSTEMIC SPLIT"
                        [StoreSplitOld].Value = [StoreSplit].Value
                        '[SelectSplit].Value = "SYSTEMIC SPLIT"
                        [StoreSplit].Value2 = 1
                        sWS.Range([SelectSplit].Address).Offset(1, 0) = ""
                        sWS.Range([SelectSplit].Address).Offset(1, 0).Cells.Interior.Color = RGB(255, 255, 255)
                        sWS.Range([SelectSplit].Address).Offset(1, 0).Locked = True
                            'Restore Do Not Ship Before/After dates
                                [Location1].Value = 900: [Location2].Value = 920
                                [DNSB2].Formula = "=iferror(IF(ExpRctDt=0,"""",DNSA2" & "-6),"""")": [DNSA2].Formula = "=iferror(IF(ExpRctDt=0,"""",ExpRctDt-TransitDays2),"""")"
                                ''''********************************"""""""""""""""""""

                    Case Target = "50/50 SPLIT"
                        [StoreSplitOld].Value = [StoreSplit].Value
                        '[SelectSplit].Value = "50/50 SPLIT"
                        [StoreSplit].Value2 = 2
                        sWS.Range([SelectSplit].Address).Offset(1, 0) = ""
                        sWS.Range([SelectSplit].Address).Offset(1, 0).Cells.Interior.Color = RGB(255, 255, 255)
                        sWS.Range([SelectSplit].Address).Offset(1, 0).Locked = True
                            'Restore Do Not Ship Before/After dates
                                [Location1].Value = 900: [Location2].Value = 920
                                [DNSB2].Formula = "=iferror(IF(ExpRctDt=0,"""",DNSA2" & "-6),"""")": [DNSA2].Formula = "=iferror(IF(ExpRctDt=0,"""",ExpRctDt-TransitDays2),"""")"
                                ''''********************************"""""""""""""""""""

                    Case Target = "SINGLE STORE/DC"
                        [StoreSplitOld].Value = [StoreSplit].Value
                        [StoreSplit].Value2 = 3
                        If [StoreSplit].Value2 = 3 And [StoreSplitOld].Value2 = 3 Then GoTo WOut
                        sWS.Range([SelectSplit].Address).Offset(1, 0) = ""
                        sWS.Range([SelectSplit].Address).Offset(1, 0).Locked = False
                        sWS.Range([SelectSplit].Address).Offset(1, 0).Cells.Interior.Color = RGB(204, 255, 255)
                        Application.GoTo sWS.Range([SelectSplit].Address).Offset(1, 0)

                  Case Target = ""
                        If [StoreSplit].Value2 = 0 And [StoreSplitOld].Value2 = 0 Then GoTo WOut
                        [StoreSplitOld].Value = [StoreSplit].Value
                        [StoreSplit].Value2 = 0
                        sWS.Range([SelectSplit].Address).Offset(1, 0) = ""
                        sWS.Range([SelectSplit].Address).Offset(1, 0).Cells.Interior.Color = RGB(255, 255, 255)
                        sWS.Range([SelectSplit].Address).Offset(1, 0).Locked = True
                End Select

WOut:
xChange = False

On Error Resume Next
Target.Select
On Error GoTo 0
ProtectSheet sWS.Name
End Function

Public Function SetTrue()
On Error Resume Next
Set SmartWB = ActiveWorkbook
Set smartWS = SmartWB.Worksheets("Buyer-SmartSheet")

Application.EnableEvents = True
Application.DisplayAlerts = True
Application.ScreenUpdating = True
smartWS.DisplayPageBreaks = True
Application.EnableAnimations = True
Application.EnableCancelKey = xlInterrupt
On Error GoTo 0

End Function

Public Function SetFalse()
On Error Resume Next
Set SmartWB = ActiveWorkbook
Set smartWS = SmartWB.Worksheets("Buyer-SmartSheet")

    Application.EnableAnimations = False
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    smartWS.DisplayPageBreaks = False
    Application.EnableCancelKey = xlDisabled
On Error GoTo 0
End Function

Function ColLtrx(ByVal iCol As Long, Optional sCol As String = "") As String
    ' shg 2012
    If iCol = 0 Then
        ColLtrx = sCol
    Else
        sCol = Chr(65 + (iCol - 1) Mod 26) & sCol
        iCol = (iCol - 1) \ 26
        ColLtrx = ColLtrx(iCol, sCol)
    End If

End Function

Function Get_Dept_Cls_sCls(xDep As String, Optional xsDep As String, Optional xCls As String, Optional xsCls As String, Optional fRng As Range)
Dim xMatch, xCount, x, a, hierRng
Dim dRng, sDRng, cRng, cSRng, myRo, myRos, myAddress, rsString, mySDep, myClass, mySClass, xPass, xPassCol, depRng, xCell

If Not fRng Is Nothing Then
    Set UsrRng = fRng
    Set hierWS = ActiveWorkbook.Sheets("Hierarchy")
End If

Select Case True
    'Get SubDepartmet Dropdowns and populate Department Values
    Case xDep <> "" And xsDep = "" And xCls = "" And xsCls = ""
         Set dRng = hierWS.Range("hTab_Dep2SDepRng")
         On Error Resume Next
         myRo = 0: myRos = 0
         myRo = Application.WorksheetFunction.Match(xDep, dRng, 0) + 1
         myRos = Application.WorksheetFunction.CountIf(dRng, xDep)
         myAddress = hierWS.Cells(myRo, dRng.Offset(, 1).Column).Resize(myRos, 1).Address
         On Error GoTo 0

         rsString = "": x = 0

            If myRos = 1 Then
                Set depRng = smartWS.Range(smartWS.Range("mTab_Header").Offset(1, 8).Address)
                xPass = True: If xPassCol = "" Then xPassCol = depRng.Column
                mySDep = hierWS.Cells(myRo, dRng.Offset(, 1).Column).Value
            End If
            If xPass = True Then
            UnProtectSheet (smartWS.Name)
            smartWS.Range("mTab_Header").Offset(1, 8).Resize(smartWS.Range("SKURng").Count, 3).ClearContents
            smartWS.Range("mTab_Header").Offset(1, 9).Resize(smartWS.Range("SKURng").Count, 2).Validation.Delete
            With smartWS.Range("mTab_Header").Offset(1, 8).Resize(smartWS.Range("SKURng").Count, 2).Validation
                .Delete
                .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
                    Operator:=xlBetween, Formula1:="=" & hierWS.Name & "!" & myAddress
            End With
            ProtectSheet (smartWS.Name)
            GoTo runClass
           Else
            UnProtectSheet (smartWS.Name)
            smartWS.Range("mTab_Header").Offset(1, 8).Resize(smartWS.Range("SKURng").Count, 3).ClearContents
            smartWS.Range("mTab_Header").Offset(1, 9).Resize(smartWS.Range("SKURng").Count, 2).Validation.Delete
            With smartWS.Range("mTab_Header").Offset(1, 8).Resize(smartWS.Range("SKURng").Count, 1).Validation
                .Delete
                .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
                    Operator:=xlBetween, Formula1:="=" & hierWS.Name & "!" & myAddress
            End With
           ProtectSheet (smartWS.Name)
           End If

    'Get SubDepartmet Dropdowns and populate Department Values
    Case xDep <> "" And xsDep <> "" And xCls = "" And xsCls = ""
runClass:
    If xPass = True Then xPass = False

        Set sDRng = hierWS.Range("hTab_SDep2ClsRng")
         On Error Resume Next
         myRo = 0: myRos = 0
         myRo = Application.WorksheetFunction.Match(xDep & xsDep, sDRng, 0) + 1
         myRos = Application.WorksheetFunction.CountIf(sDRng, xDep & xsDep)
         myAddress = hierWS.Cells(myRo, sDRng.Offset(, 1).Column).Resize(myRos, 1).Address
         On Error GoTo 0

         rsString = "": x = 0
            UnProtectSheet (smartWS.Name)
        If myRos = 1 Then
            Set depRng = UsrRng.Offset(0, 1)
            xPass = True: If xPassCol = "" Then xPassCol = UsrRng.Column
                With UsrRng.Offset(0, 1)
                    For Each xCell In .Cells
                        xCell.Validation.Delete
                        xCell.Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
                                    Operator:=xlBetween, Formula1:="=" & hierWS.Name & "!" & myAddress
                    Next xCell
                End With
            myClass = hierWS.Cells(myRo, sDRng.Offset(, 1).Column).Value
        End If
        If xPass = True Then
                With UsrRng
                    For Each xCell In .Cells
                        xCell.Offset(, 1).Resize(, 2).ClearContents
                        xCell.Offset(, 1).Resize(, 2).Validation.Delete
                    Next xCell
                End With
                With UsrRng.Offset(0, 1)
                    For Each xCell In .Cells
                        xCell.Validation.Delete
                        xCell.Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
                                    Operator:=xlBetween, Formula1:="=" & hierWS.Name & "!" & myAddress
                    Next xCell
                End With

            With UsrRng
                .Offset(0, 1).Value = myClass
            End With
            xCls = myClass
            GoTo runsClass
        Else
            With UsrRng
            For Each xCell In .Cells
                xCell.Offset(, 1).Resize(, 2).ClearContents
                xCell.Offset(, 1).Resize(, 2).Validation.Delete
            Next xCell
            End With
                With UsrRng.Offset(0, 1)
                    For Each xCell In .Cells
                        xCell.Validation.Delete
                        xCell.Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
                                    Operator:=xlBetween, Formula1:="=" & hierWS.Name & "!" & myAddress
                    Next xCell
                End With

        End If
            ProtectSheet (smartWS.Name)
    'Get SubDepartmet Dropdowns and populate Department Values
    Case xDep <> "" And xsDep <> "" And xCls <> "" And xsCls = ""
runsClass:
        If xPass = True Then xPass = False

         Set cRng = hierWS.Range("hTab_Cls2sClsRng")
         On Error Resume Next
         myRo = 0: myRos = 0
         myRo = Application.WorksheetFunction.Match(xDep & xsDep & xCls, cRng, 0) + 1
         myRos = Application.WorksheetFunction.CountIf(cRng, xDep & xsDep & xCls)
         myAddress = hierWS.Cells(myRo, cRng.Offset(, 1).Column).Resize(myRos, 1).Address
         On Error GoTo 0

         rsString = "": x = 0
            UnProtectSheet (smartWS.Name)
        If myRos = 1 Then
            Set cSRng = UsrRng.Offset(0, 1)
            xPass = True: If xPassCol = "" Then xPassCol = cSRng.Column
            mySClass = hierWS.Cells(myRo, cRng.Offset(, 1).Column).Value
            With UsrRng.Offset(0, smartWS.Range("mTab_subClass").Column - UsrRng.Column)
              For Each xCell In .Cells
                xCell.Validation.Delete
                xCell.Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
                            Operator:=xlBetween, Formula1:="=" & hierWS.Name & "!" & myAddress
                xCell.Value = mySClass
              Next xCell
            End With
        Else
            With UsrRng
            For Each xCell In .Cells
                xCell.Offset(, smartWS.Range("mTab_subClass").Column - UsrRng.Column).ClearContents
            Next xCell
            End With
            With UsrRng.Offset(0, smartWS.Range("mTab_subClass").Column - UsrRng.Column)
              For Each xCell In .Cells
                xCell.Validation.Delete
                xCell.Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
                            Operator:=xlBetween, Formula1:="=" & hierWS.Name & "!" & myAddress
              Next xCell
            End With
        End If
            ProtectSheet (smartWS.Name)

'        End If


'SetTrue
End Select
End Function


Public Function macChkSplChrnLgth(xRnge As Range, Optional xLength As Variant) As String
      Dim ch, i, rCel As Variant
    Dim cleanString
    For Each rCel In xRnge.Cells
    With rCel
        'If bytes Is Nothing Then bytes = Array(rCel.Value)
        cleanString = rCel.Value
        For i = 1 To Len(rCel.Value)
        
            'If Chr(ch) Like "[A-Z.a-z 0-9]" Then cleanString = cleanString & Chr(ch)
             If Mid(rCel.Value, i, 1) Like "[!A-Z.a-z 0-9]" Then cleanString = Replace(cleanString, Mid(rCel.Value, i, 1), "")
            Debug.Print .Value & " - " & cleanString
            '[^a-z 0-9_/.-]+
        Next i
        If xLength > 0 And Len(cleanString) > xLength Then cleanString = Left(cleanString, xLength)
        .Value = UCase(cleanString)
        macChkSplChrnLgth = cleanString
        End With
    Next rCel
End Function
Public Function chkSplChrnLgth(xRnge As Range, Optional xLength As Variant) As String
Dim s As String, sErrors As String, yLen, chkLen As Boolean: chkLen = True
Dim xCell As Range, xResult As Variant
Application.EnableEvents = False
    With CreateObject("VBScript.RegExp")
        .Global = True
        .IgnoreCase = True
        .Pattern = "[^a-z 0-9/.-]+"
            For Each xCell In xRnge
            On Error Resume Next
                s = CStr(xCell)
                    If xLength <= 0 Or xLength = "" Or IsNull(xLength) Or IsEmpty(xLength) Then
                        xLength = Len(.Replace(CStr(xCell), ""))
                        chkLen = True
                    Else
                        yLen = Len(.Replace(CStr(xCell), ""))
                        If yLen > xLength Then chkLen = False
                    End If

                    If xCell.PrefixCharacter = "'" Or .test(s) Or chkLen = False Then
                        sErrors = sErrors & vbLf & xCell.Address(0, 0) & vbTab & s
                        xCell.Cells.NumberFormat = "@"
                        xCell.Cells.HorizontalAlignment = xlLeft
                        If xLength <= 0 Or xLength = "" Then xLength = Len(.Replace(CStr(xCell), ""))
                        chkSplChrnLgth = UCase(Left(Trim(Replace(.Replace(CStr(xCell), ""), "'", "", 1, , vbTextCompare)), xLength))
                        xCell.Formula = chkSplChrnLgth
                    Else
                        If xLength <= 0 Or xLength = "" Then xLength = Len(.Replace(CStr(xCell), ""))
                        xCell.Cells.NumberFormat = "@"
                        xCell.Cells.HorizontalAlignment = xlLeft
                        chkSplChrnLgth = UCase(Left(Trim(CStr(xCell)), xLength))
                        xCell.Formula = chkSplChrnLgth
                    End If
            On Error GoTo 0
            Next xCell
    End With
'If Len(sErrors) Then
'    MsgBox "These cells had invalid entries and /or had more than " & xLength & " characters and have been truncated:" & sErrors, vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
'End If
End Function

' Vidya Apr 30 8:52
Public Function macChkNumbersnLgth(xRnge As Range, Optional xLength As Variant) As String
    Dim ch, i, rCel As Variant
    Dim cleanString
    For Each rCel In xRnge.Cells
    With rCel
        'If bytes Is Nothing Then bytes = Array(rCel.Value)
        cleanString = rCel.Value
        For i = 1 To Len(rCel.Value)
        
            'If Chr(ch) Like "[A-Z.a-z 0-9]" Then cleanString = cleanString & Chr(ch)
             If Mid(rCel.Value, i, 1) Like "[!0-9]" Then cleanString = Replace(cleanString, Mid(rCel.Value, i, 1), "")
            'debug.print .Value & " - " & cleanString
            '[^a-z 0-9_/.-]+
        Next i
        If xLength > 0 And Len(cleanString) > xLength Then cleanString = Left(cleanString, xLength)
        .Value = UCase(cleanString)
        macChkNumbersnLgth = cleanString
        End With
    Next rCel
End Function

Public Function chkNumbersnLgth(xRnge As Range, Optional xLength As Variant) As String
Dim s As String, sErrors As String, yLen, chkLen As Boolean: chkLen = True
Dim xCell As Range, xResult As Variant
Application.EnableEvents = False
    With CreateObject("VBScript.RegExp")
        .Global = True
        .IgnoreCase = True
        .Pattern = "[^0-9]"
            For Each xCell In xRnge
                s = CStr(xCell)
                If xLength <= 0 Or xLength = "" Or IsNull(xLength) Or IsEmpty(xLength) Then
                    yLen = Len(.Replace(xCell.Value, ""))
                    chkLen = True
                Else
                    yLen = Len(.Replace(xCell.Value, ""))
                    If yLen > xLength Then
                        yLen = 0
                        chkLen = False
                    Else
                        yLen = xLength
                        chkLen = True
                    End If
                End If
                    If xCell < 0 Or xCell.PrefixCharacter = "'" Or .test(s) Or chkLen = False Then
                        sErrors = sErrors & vbLf & xCell.Address(0, 0) & vbTab & s
'                           chkNumbersnLgth = UCase(Left(Trim(.Replace(xCell.Value, "")), yLen))
                            If xCell.MergeCells Then
                                chkNumbersnLgth = xCell.MergeArea.ClearContents
                            Else
                                chkNumbersnLgth = xCell.ClearContents
                            End If
'                           xCell.Value = chkNumbersnLgth
                    Else
                        If xLength = True Then GoTo nxCell
                        xCell.Value = UCase(Left(Trim(xCell.Value), xLength))
                        chkNumbersnLgth = xCell.Value
                    End If
nxCell:
            Next xCell
    End With
'If Len(sErrors) Then
'    MsgBox "These cells had invalid entries and /or had more than " & xLength & " characters and have been cleared:" & sErrors, vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
'End If
End Function

Public Function chkDecimals(xRnge As Range, Optional xLength As Variant) As String
Dim s As String, sErrors As String, yLen, chkLen As Boolean: chkLen = True
Dim xCell As Range, xResult As Variant
Application.EnableEvents = False
    With CreateObject("VBScript.RegExp")
        .Global = True
        .IgnoreCase = True
        .Pattern = "[^\d\.?]+"
            For Each xCell In xRnge
                s = xCell.Value
                If xLength <= 0 Or xLength = "" Or IsNull(xLength) Or IsEmpty(xLength) Then
                    yLen = 2
                    chkLen = True
                Else
                    yLen = 2
                    If yLen > xLength Then
                        yLen = xLength
                        chkLen = False
                    Else
                        yLen = yLen
                        chkLen = True
                    End If
                End If
                    If xCell.PrefixCharacter = "'" Or .test(s) Or chkLen = False Then
                        sErrors = sErrors & vbLf & xCell.Address(0, 0) & vbTab & s
                        On Error Resume Next
                            chkDecimals = Application.WorksheetFunction.Round(.Replace(xCell.Value, ""), yLen)
                        On Error GoTo 0
                            xCell.Value = chkDecimals
                    Else
                        chkDecimals = .Replace(xCell.Value, "")
                        xCell.Value = chkDecimals
                    End If
            Next xCell
    End With
'If Len(sErrors) Then
'    MsgBox "These cells had invalid entries and /or had more than " & xLength & " characters and have been cleared:" & sErrors, vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
'End If
End Function

Function NamedRangesReport()
Dim nm As Name, n As Long, y As Range, z As Worksheet
Application.ScreenUpdating = False
Set z = ActiveSheet
n = 2
With z
    .[a1:D1].EntireColumn.ClearContents
    .[a1:D1] = [{"Name","Sheet Name","Starting Range","Ending Range"}]
    For Each nm In ActiveWorkbook.Names
    On Error Resume Next
        .Cells(n, 1) = nm.Name
        .Cells(n, 2) = Range(nm).Parent.Name
        .Cells(n, 3) = nm.RefersToRange.Address(False, False)
        n = n + 1
    On Error GoTo 0
    Next nm
End With

Application.ScreenUpdating = True
End Function




'Function NamedRangesReport1()
'Dim nm As name, n As Long, y As Range, z As Worksheet
'Application.ScreenUpdating = False
'    For Each nm In ActiveWorkbook.Names
'    On Error Resume Next
'        Debug.Print nm.name & "|" & Range(nm).Parent.name & "|" & nm.RefersToRange.Address(False, False)
'    On Error GoTo 0
'    Next nm
'Application.ScreenUpdating = True
'End Function

Function cellDragDrop(Allow As Boolean)
'    Select Case Allow
'        Case Is = False
'            Application.CellDragAndDrop = Allow
'            Application.OnKey "^{d}", ""
'        Case Is = True
'            Application.CellDragAndDrop = Allow
'            Application.OnKey "^{d}"
'    End Select
End Function

Function ToggleCutCopyAndPaste(Allow As Boolean)
On Error Resume Next
     'Activate/deactivate cut, copy, paste and pastespecial menu items
    Call vbaSmartSheetFunctions.EnableMenuItem(21, Allow) ' cut
    Call vbaSmartSheetFunctions.EnableMenuItem(19, True) ' copy
    Call vbaSmartSheetFunctions.EnableMenuItem(22, Allow) ' paste
    Call vbaSmartSheetFunctions.EnableMenuItem(755, Allow) ' pastespecial
    Call vbaSmartSheetFunctions.EnableMenuItem(108, Allow) ' Format Painter
'     'Activate/deactivate drag and drop ability
    If Allow = False Then Application.CellDragAndDrop = True

     'Activate/deactivate cut, copy, paste and pastespecial shortcut keys
    With Application
        Select Case Allow
        Case Is = False
            '.OnKey "^c", "CutCopyPasteDisabled"
            .OnKey "^v", "CutCopyPasteDisabled"
            .OnKey "^x", "CutCopyPasteDisabled"
            .OnKey "+{DEL}", "CutCopyPasteDisabled"
            .OnKey "^{INSERT}", "CutCopyPasteDisabled"
            .OnKey "^{d}", "CutCopyPasteDisabled"
            .OnKey "~", "CutCopyPasteDisabled"
            .OnKey "{ENTER}", "CutCopyPasteDisabled"
            '.OnKey "%{DOWN}", "CutCopyPasteDisabled"
        Case Is = True
            .OnKey "^c"
            .OnKey "^v"
            .OnKey "^x"
            .OnKey "+{DEL}"
            .OnKey "^{INSERT}"
            .OnKey "^{d}"
            .OnKey "~"
            .OnKey "{ENTER}"
            '.OnKey "%{DOWN}"
        End Select
    End With
On Error GoTo 0
End Function

Function EnableMenuItem(ctlId As Integer, Enabled As Boolean)
     'Activate/Deactivate specific menu item
    Dim cBar As CommandBar
    Dim cBarCtrl As CommandBarControl
    For Each cBar In Application.CommandBars
        If cBar.Name <> "Clipboard" Then
            Set cBarCtrl = cBar.FindControl(ID:=ctlId, recursive:=True)
            If Not cBarCtrl Is Nothing Then cBarCtrl.Enabled = Enabled
        End If
    Next
End Function

Function CutCopyPasteDisabled()
     'Inform user that the functions have been disabled
    MsgBox "Sorry. Cut/Copy/Paste fuction not allowed on this column.", vbCritical + vbOKOnly, "At Home: Buyer SmartSheet|fffd|"
    Application.CutCopyMode = False
     Application.OnKey "{ENTER}"
    Application.OnKey "~"
End Function

Function TestFileOpened(xFile As String)
    ' Test to see if the file is open.
    If IsFileOpen(xFile) Then
        ' Add code here to handle case where file is open by anotheruser.
        Workbooks(Dir(xFile)).Close False
    End If

End Function

' This function checks to see if a file is open or not. If the file is
' already open, it returns True. If the file is not open, it returns
' False. Otherwise, a run-time error occurs because there is
' some other problem accessing the file.

Function IsFileOpen(fileName As String)
    Dim filenum As Integer, errnum As Integer

    On Error Resume Next   ' Turn error checking off.
    filenum = FreeFile()   ' Get a free file number.
    ' Attempt to open the file and lock it.
    Open fileName For Input Lock Read As #filenum
    Close filenum          ' Close the file.
    errnum = Err           ' Save the error number that occurred.
    On Error GoTo 0        ' Turn error checking back on.

    ' Check to see which error occurred.
    Select Case errnum

        ' No error occurred.
        ' File is NOT already open by another user.
        Case 0
         IsFileOpen = False

        ' Error number for "Permission Denied."
        ' File is already opened by another user.
        Case 70
            IsFileOpen = True

        ' Another error occurred.
        Case Else
            'Error errnum
            
    End Select

End Function


Function hideImages()
Dim s As Integer, i As Integer
s = smartWS.Shapes.Count
For i = 1 To s
    On Error Resume Next
    smartWS.Shapes(i).Visible = False
    On Error GoTo 0
Next i
End Function

Function unhideImages()
Dim s As Integer, i As Integer
s = smartWS.Shapes.Count
For i = 1 To s
    On Error Resume Next
    smartWS.Shapes(i).Visible = True
    On Error GoTo 0
Next i
End Function

Function SetNumberFormats(Optional xCol As Long)
Dim xColRef, yColRef, lookFor, findX, xCell, fRng, hCol, hAdd, nStr
Set smartWS = ActiveWorkbook.Worksheets("Buyer-SmartSheet")
Set fCtrlWS = ActiveWorkbook.Worksheets("FieldCtrl")
Set cSetWS = ActiveWorkbook.Worksheets("ControlSet")
Set hCol = cSetWS.ListObjects("tblControls").ListRows(1)
hAdd = hCol.Range.Offset(-1, 0).Address

If IsEmpty(xCol) Then xCol = ""

xColRef = Excel.WorksheetFunction.Match("Decimal", fCtrlWS.Range("SKUControlHeader"), 0)
yColRef = Excel.WorksheetFunction.Match("Range Address", cSetWS.Range(hAdd), 0)

If xCol > 0 Then GoTo rxCol
On Error Resume Next
For Each xCell In smartWS.Range("mTabType")
    If xCell.Value = "Numeric" Then
        lookFor = xCell.Offset(1, 0)
        findX = Excel.WorksheetFunction.Index(fCtrlWS.Range("Table9"), Excel.WorksheetFunction.Match(lookFor, fCtrlWS.Range("Table9").Columns(1), 0), xColRef)
        fRng = Excel.WorksheetFunction.Index(cSetWS.Range("tblControls"), Excel.WorksheetFunction.Match(lookFor, cSetWS.Range("tblControls").Columns(1), 0), yColRef)
        If findX = 0 Then
            nStr = CStr("0")
        ElseIf IsNumeric(findX) Then
            nStr = CStr("0." & String(findX, "0"))
        ElseIf Right(findX, 1) = "P" Then
            nStr = CStr("0." & String(Left(findX, InStr(1, findX, "P") - 1), "0"))
        End If
On Error GoTo 0
        smartWS.Range(fRng).Cells.NumberFormat = nStr

    End If
Next xCell
Exit Function
rxCol:
If xCol > 0 Then
On Error Resume Next
        lookFor = smartWS.Cells(smartWS.Range("mtab_Header").Row, xCol)
        findX = Excel.WorksheetFunction.Index(fCtrlWS.Range("Table9"), Excel.WorksheetFunction.Match(lookFor, fCtrlWS.Range("Table9").Columns(1), 0), xColRef)
        fRng = Excel.WorksheetFunction.Index(cSetWS.Range("tblControls"), Excel.WorksheetFunction.Match(lookFor, cSetWS.Range("tblControls").Columns(1), 0), yColRef)
        If findX = 0 Or IsEmpty(findX) Then
            nStr = CStr("0")
        ElseIf IsNumeric(findX) Then
            nStr = CStr("0." & String(findX, "0"))
        ElseIf Right(findX, 1) = "P" Then
            nStr = CStr("0." & String(Left(findX, InStr(1, findX, "P") - 1), "0")) & "%"
        ElseIf findX = "@" Then
            nStr = "@"
        End If
        smartWS.Range(fRng).Cells.NumberFormat = nStr
On Error GoTo 0
End If

End Function

Function xInstance(chkStr As String, sepStr As String) As Integer
   xInstance = UBound(Split(chkStr, sepStr))
End Function

Function xRetChk(xRetAmt As Double) As Boolean
Dim xRetRng As Range, xCell, yRet
Set SmartWB = ActiveWorkbook
Set refWS = SmartWB.Worksheets("RefSheets")

Set xRetRng = refWS.Range(refWS.[tbl_PricePt].Address)

yRet = 0

On Error Resume Next
yRet = Application.WorksheetFunction.Match(xRetAmt, xRetRng, 0)
On Error GoTo 0

If yRet > 0 Then
    xRetChk = True
Else
    xRetChk = False
End If

End Function

Function UniqueItems(ArrayIn, Optional Count As Variant) As Variant
'   Accepts an array or range as input
'   If Count = True or is missing, the function returns the number of unique elements
'   If Count = False, the function returns a variant array of unique elements
    Dim Unique() As Variant ' array that holds the unique items
    Dim Element As Variant, NumUnique
    Dim i As Integer
    Dim FoundMatch As Boolean
'   If 2nd argument is missing, assign default value
    If IsMissing(Count) Then Count = True
'   Counter for number of unique elements
    NumUnique = 0
'   Loop thru the input array
    For Each Element In ArrayIn
        FoundMatch = False
'       Has item been added yet?
        For i = 1 To NumUnique
            If Element = Unique(i) Then
                FoundMatch = True
                Exit For '(exit loop)
            End If
        Next i
AddItem:
'       If not in list, add the item to unique list
        If Not FoundMatch And Not IsEmpty(Element) Then
            NumUnique = NumUnique + 1
            ReDim Preserve Unique(NumUnique)
            Unique(NumUnique) = Element
        End If
    Next Element
'   Assign a value to the function
    If Count Then UniqueItems = NumUnique Else UniqueItems = Unique
End Function

Function getUniqueWeek() '(Function to get Unique Fiscal Week for populating the Drop Down field OTB Period
Dim fCalRng As Range
Dim i As Integer, x As Integer
Dim wCount, wNum

Set SmartWB = ActiveWorkbook
Set smartWS = SmartWB.Worksheets("Buyer-SmartSheet")
Set calWS = SmartWB.Worksheets("Calendar")

Set fCalRng = calWS.Range("tblFisCal")

wCount = UniqueItems(calWS.Range(fCalRng.Columns(2).Address), False)
UnProtectSheet calWS.Name
calWS.[tabUWeek].ClearContents
For i = LBound(wCount) To UBound(wCount) - 1
        calWS.[tabUWeek].Cells(i + 1, 1) = wCount(i + 1)
Next i
ProtectSheet calWS.Name
End Function


Function chkDuplicate(xRng As Range)
Dim xTab As ListObject, x, iRow As Long, y As Integer, lRow As Integer
Dim xRow As Integer
Dim xCol As Integer

If SmartWB Is Nothing Then Set SmartWB = ActiveWorkbook
If smartWS Is Nothing Then Set smartWS = SmartWB.Worksheets("Buyer-SmartSheet")
Set xTab = smartWS.ListObjects("List1")
xCol = xRng.Column
lRow = xTab.ListRows.Count
On Error Resume Next
xRow = xTab.DataBodyRange.Columns(xCol).find("*", SearchOrder:=xlByRows, SearchDirection:=xlPrevious).Row
On Error GoTo 0
iRow = xRow - smartWS.Range("mtab_Header").Row

For y = 1 To iRow
If Not IsError(xTab.DataBodyRange.Cells(y, xCol)) Then
    If (xTab.DataBodyRange.Cells(y, xCol) <> "") Then
        If (UCase(Trim(xTab.DataBodyRange.Cells(y, xCol))) = "CREATE" And (xCol = xTab.ListColumns("Primary UPC").Range.Column)) Then GoTo upcCreate
        x = WorksheetFunction.Match(xTab.DataBodyRange.Cells(y, xCol), xTab.ListColumns(xCol).DataBodyRange, 0)
'        Debug.Print x; " | "; y
            If y <> x Then
                'xTab.DataBodyRange.Cells(y, xCol).Interior.Color = vbYellow
                xTab.DataBodyRange.Cells(y, xCol).ClearContents
                xTab.DataBodyRange.Cells(y, xCol).Interior.Color = xlNone
            Else
                xTab.DataBodyRange.Cells(y, xCol).Interior.Color = xlNone
            End If
    ElseIf xTab.DataBodyRange.Cells(y, xCol) = "" Then
upcCreate:
        xTab.DataBodyRange.Cells(y, xCol).Interior.Color = xlNone
    End If
Else
    xTab.DataBodyRange.Cells(y, xCol).ClearContents
    xTab.DataBodyRange.Cells(y, xCol).Interior.Color = xlNone
End If
Next y
End Function

Function sortSKUData()
Dim sTab As ListObject, sortCol As Range
Set SmartWB = ActiveWorkbook
Set smartWS = SmartWB.Worksheets("Buyer-SmartSheet")
Set sTab = smartWS.ListObjects("List1")
Set sortCol = smartWS.Range(sTab.ListColumns(2).DataBodyRange.Address)
UnProtectSheet smartWS.Name
With sTab.Sort
    .SortFields.Clear
    .SortFields.Add Key:=sortCol, SortOn:=xlSortOnValues, Order:=xlAscending
    .Header = xlYes
    .Apply
End With
End Function

'Sub test()
'Dim x
'x = True
'End Sub
'====================================================================================================
'Vidya -Apr 30 08:51
Function GetClipboardText() As String
    Dim BufObj As MSForms.DataObject
    Set BufObj = New MSForms.DataObject
    BufObj.GetFromClipboard
    On Error Resume Next
    GetClipboardText = ""
    If BufObj.GetFormat(1) Then
        GetClipboardText = Application.WorksheetFunction.Clean(Left(BufObj.GetText, 255))
        mycopyText = GetClipboardText
    End If
            If GetClipboardText = "" Then mycopyText = ""
    On Error GoTo 0
End Function

Function clrSplChars(txtRange As Range, Optional nChars As Integer) As String
  Dim testString As String, xCell
  Dim badChars() As String, badChar As String, prohibChars, clnString As String
  Dim i As Integer
  prohibChars = "@ , | < > ; : ' "" &"
  
  For Each xCell In txtRange
  testString = xCell.Value2
  If testString = "" Then
    Exit Function
  End If
  i = 0
  
  On Error Resume Next
  For i = 1 To xInstance(testString, "  ")
    testString = Replace(UCase(Trim(testString)), "  ", " ", 1, , vbTextCompare)
  Next i
  
  i = 0
  For i = 1 To xInstance(testString, Chr(39))
    testString = Replace(UCase(Trim(testString)), Chr(39), "", 1, , vbTextCompare)
  Next i
  
  i = 0
  
  badChars = Split(prohibChars, " ", , vbTextCompare)
  For i = LBound(badChars) To UBound(badChars)
    'debug.print badChars(i)
    badChar = badChars(i)
    If InStr(testString, badChar) > 0 Then
        testString = Replace(UCase(Trim(Replace(testString, badChar, "", , , vbTextCompare))), "  ", " ", 1, , vbTextCompare)
    End If
  Next i
If nChars > 0 Then
    clrSplChars = Left(UCase(Trim(testString)), nChars)
Else
    clrSplChars = UCase(Trim(testString))
End If
xCell.Value2 = clrSplChars
Next xCell
On Error GoTo 0
End Function

Function resetallsettings()
SetTrue
Call ToggleCutCopyAndPaste(True)
OldcelDragCols = "": NewCelDragCols = ""
strOldRange = "": strNewRange = ""
CopiedCol = "": CopiedRow = ""
ToBePasteCol = "": ToBePasteRow = ""
If (ActiveWindow.Zoom <> 100) Then ActiveWindow.Zoom = 100
End Function

'******************************************************************
' Check for IMU Errors - if IMU is less than the minimum set for the selected Department
'******************************************************************
Function xIMUCheck(Optional xRow As Integer, Optional addWB As Workbook) As Boolean
xChange = False ' Exit change Check when True
Dim xRetail As Range, xUnit As Range, xIMU1 As Range, xIMU2 As Range, numIMU As Double, cSetWS, refWS
Dim i As Integer, x As Integer, strRUnit As String, strRRet As String, strRIMU1 As String, strRIMU2 As String, strDept As String
Dim strErrArr As String, sErrArr
Dim xsDept As Range, xClass As Range, xsClass As Range, strSDept As String, strClass As String, strsClass As String
Dim tblIMU As ListObject

Dim strUCost As String, strRCost As String, strIMU1 As String, strIMU2 As String

Set SmartWB = ActiveWorkbook
Set smartWS = SmartWB.Worksheets("Buyer-SmartSheet")
Set cSetWS = SmartWB.Worksheets("ControlSet")
Set refWS = SmartWB.Worksheets("RefSheets")
Set tblIMU = refWS.ListObjects("tbl_IMUCheck")

strUCost = "Unit Cost"
strRCost = "Retail"
strIMU1 = "IMU %" & Chr(10) & "Loc 1"
strIMU2 = "IMU %" & Chr(10) & "Loc 2"

UnProtectSheet smartWS.Name

On Error Resume Next
    smartWS.[xDepartment] = Left(smartWS.Range("Department"), InStr(1, smartWS.Range("Department"), "-", vbTextCompare) - 1)
On Error GoTo 0

ProtectSheet smartWS.Name

If Not IsError(smartWS.[xDepartment]) Then
    strDept = smartWS.[xDepartment]
Else
    strDept = 0
    If addWB Is Nothing Then
        MsgBox "Department is missing. Please select a valid Department from the drop down options", vbCritical, "At Home: Buyer SmartSheet|fffd|"
        xChange = True
        Exit Function
    Else
        Application.Run "'" & Replace(addWB.Name, "'", "''") & "'!ShowError", "Department is missing. Please select a valid Department from the drop down options", smartWS.Range("Department"), Replace(smartWS.Range("Department").Address, "$", "")
    End If
End If

On Error Resume Next
i = Application.WorksheetFunction.Match("Range Address", cSetWS.Range("tblControls").Rows(0), 0)
strRUnit = Application.WorksheetFunction.Index(cSetWS.Range("tblControls"), Application.WorksheetFunction.Match(strUCost, cSetWS.Range("tblControls").Columns(1), 0), i)
strRRet = Application.WorksheetFunction.Index(cSetWS.Range("tblControls"), Application.WorksheetFunction.Match(strRCost, cSetWS.Range("tblControls").Columns(1), 0), i)
strRIMU1 = Application.WorksheetFunction.Index(cSetWS.Range("tblControls"), Application.WorksheetFunction.Match(strIMU1, cSetWS.Range("tblControls").Columns(1), 0), i)
strRIMU2 = Application.WorksheetFunction.Index(cSetWS.Range("tblControls"), Application.WorksheetFunction.Match(strIMU2, cSetWS.Range("tblControls").Columns(1), 0), i)
'numIMU = (Application.WorksheetFunction.Index(refWS.Range("tbl_IMUCheck"), Application.WorksheetFunction.Match(Val(strDept), refWS.Range("tbl_IMUCheck").Columns(2), 0), 7)) / 100
On Error GoTo 0

If strRRet <> "" Then Set xRetail = smartWS.Range(strRRet)
If strRUnit <> "" Then Set xUnit = smartWS.Range(strRUnit)
If strRIMU1 <> "" Then Set xIMU1 = smartWS.Range(strRIMU1)
If strRIMU2 <> "" Then Set xIMU2 = smartWS.Range(strRIMU2)
Set xsDept = smartWS.Range("SubDeptRng")
Set xClass = smartWS.Range("mtab_ClassRng")
Set xsClass = smartWS.Range("SubClassRng")

If xRow > 0 Then
    x = xRow - smartWS.Range("mtab_header").Row

On Error Resume Next
    strSDept = Left(xsDept.Cells(x, 1), InStr(1, xsDept.Cells(x, 1), "-", vbTextCompare) - 1)
    strClass = Left(xClass.Cells(x, 1), InStr(1, xClass.Cells(x, 1), "-", vbTextCompare) - 1)
    strsClass = Left(xsClass.Cells(x, 1), InStr(1, xsClass.Cells(x, 1), "-", vbTextCompare) - 1)
On Error GoTo 0

If strDept = "" Or strSDept = "" Or strClass = "" Or strsClass = "" Then Exit Function

numIMU = xfindIMU(Val(strDept), Val(strSDept), Val(strClass), Val(strsClass))
    
        If xRetail.Cells(x, 1) > 0 And xUnit.Cells(x, 1) > 0 Then
            If CDbl(xIMU1.Cells(x, 1)) < CDbl(numIMU) Then
                xIMU1.Cells(x, 1).Cells.Interior.Color = vbRed
            Else
                xIMU1.Cells(x, 1).Cells.Interior.Color = RGB(217, 217, 217)
            End If
            If CDbl(xIMU2.Cells(x, 1)) < CDbl(numIMU) Then
                xIMU2.Cells(x, 1).Cells.Interior.Color = vbRed
            Else
                xIMU2.Cells(x, 1).Cells.Interior.Color = RGB(217, 217, 217)
            End If
        Else
            xIMU1.Cells(x, 1).Cells.Interior.Color = RGB(217, 217, 217)
            xIMU2.Cells(x, 1).Cells.Interior.Color = RGB(217, 217, 217)
        End If
ElseIf xRow = 0 And Replace(addWB.Name, "'", "''") <> "" Then
    For x = 1 To xRetail.Rows.Count
    
On Error Resume Next
    strSDept = Left(xsDept.Cells(x, 1), InStr(1, xsDept.Cells(x, 1), "-", vbTextCompare) - 1)
    strClass = Left(xClass.Cells(x, 1), InStr(1, xClass.Cells(x, 1), "-", vbTextCompare) - 1)
    strsClass = Left(xsClass.Cells(x, 1), InStr(1, xsClass.Cells(x, 1), "-", vbTextCompare) - 1)
On Error GoTo 0

numIMU = xfindIMU(Val(strDept), Val(strSDept), Val(strClass), Val(strsClass))
    
        If xRetail.Cells(x, 1) > 0 And xUnit.Cells(x, 1) > 0 Then
            If CDbl(xIMU1.Cells(x, 1)) < CDbl(numIMU) Then
                If Not addWB Is Nothing Then _
                Application.Run "'" & Replace(addWB.Name, "'", "''") & "'!ShowError", "'IMU % Loc 1' is less than the minimum (" & Format(CDbl(numIMU), "0.00%") & ") set for Department: " & [xDepartment], Format(xIMU1.Cells(x, 1), "0.00%"), Replace(xIMU1.Cells(x, 1).Address, "$", "")
                xIMU1.Cells(x, 1).Cells.Interior.Color = vbRed
                If strErrArr = "" Then
                    strErrArr = "True"
                Else
                    strErrArr = strErrArr & "," & "True"
                End If
            Else
                xIMU1.Cells(x, 1).Cells.Interior.Color = RGB(217, 217, 217)
            End If
            If CDbl(xIMU2.Cells(x, 1)) < CDbl(numIMU) Then
            If Not addWB Is Nothing Then _
                Application.Run "'" & Replace(addWB.Name, "'", "''") & "'!ShowError", "'IMU % Loc 2' is less than the minimum (" & Format(CDbl(numIMU), "0.00%") & ") set for Department: " & [xDepartment], Format(xIMU2.Cells(x, 1), "0.00%"), Replace(xIMU2.Cells(x, 1).Address, "$", "")
                xIMU2.Cells(x, 1).Cells.Interior.Color = vbRed
                If strErrArr = "" Then
                    strErrArr = "True"
                Else
                    strErrArr = strErrArr & "," & "True"
                End If
            Else
                xIMU2.Cells(x, 1).Cells.Interior.Color = RGB(217, 217, 217)
            End If
        End If
    Next x
        'strErrArr = Left(strErrArr, Len(strErrArr) - 1)
        If strErrArr <> "" Then
            sErrArr = Split(strErrArr, ",", , vbTextCompare)
                For i = LBound(sErrArr) To UBound(sErrArr)
                    If sErrArr(i) = "True" Then
                        xIMUCheck = True
                        Exit Function
                    End If
                Next i
        Else
            sErrArr = ""
        End If
        If sErrArr = "" Then xIMUCheck = False
End If

End Function

Function chkTotRetail(Optional addWB As Workbook) As Boolean
Set SmartWB = ActiveWorkbook
Set smartWS = SmartWB.Worksheets("Buyer-SmartSheet")

If smartWS.Range("mTab_TotRetail") > smartWS.Range("OTBDollar") Then
    If Not addWB Is Nothing Then _
        MsgBox "Total Retail (" & Format(smartWS.Range("mTab_TotRetail"), "$#,##0.00") & ") exceeds the OTB $ available for Department: " & [xDepartment], vbExclamation, "At Home: Buyer SmartSheet"
        'Application.Run "'" & Replace(addWB.name, "'", "''") & "'!ShowError", "'Total Retail exceeds the OTB $ available for Department: " & [xDepartment], Format(smartWS.Range("mTab_TotRetail"), "$#,##0.00"), Replace(smartWS.Range("mTab_TotRetail").Address, "$", "")
        smartWS.Range("mTab_TotRetail").Cells.Interior.Color = vbRed
        chkTotRetail = True
Else
    smartWS.Range("mTab_TotRetail").Cells.Interior.Color = RGB(217, 217, 217)
    chkTotRetail = False
End If

End Function

Function chkTotUnits(Optional addWB As Workbook) As Boolean
Set SmartWB = ActiveWorkbook
Set smartWS = SmartWB.Worksheets("Buyer-SmartSheet")

If smartWS.Range("mTab_TotUnits") >= 1000000 Then
If Not addWB Is Nothing Then _
    Application.Run "'" & Replace(addWB.Name, "'", "''") & "'!ShowError", "Total Units must be less than 1 million.", Format(CDbl(smartWS.Range("mTab_TotUnits").Value), "0"), Replace(smartWS.Range("mTab_TotUnits").Address, "$", "")
    smartWS.Range("mTab_TotUnits").Cells.Interior.Color = vbRed
    chkTotUnits = False
Else
    smartWS.Range("mTab_TotUnits").Cells.Interior.Color = RGB(217, 217, 217)
    chkTotUnits = False
End If
End Function

Function chkNestedSKUGrpCount(Optional addWB As Workbook) As Boolean
Dim nsGrpRng As Range
Dim i As Integer, x As Integer
Dim nsgCount, nsNum

Set SmartWB = ActiveWorkbook
Set smartWS = SmartWB.Worksheets("Buyer-SmartSheet")

Set nsGrpRng = smartWS.Range("NestedSKURng")
If Application.WorksheetFunction.CountBlank(nsGrpRng) < 150 Then
    nsgCount = UniqueItems(smartWS.Range(nsGrpRng.Address), False)

    For i = LBound(nsgCount) To UBound(nsgCount)
        If Not i = 0 Then
            x = Application.WorksheetFunction.CountIf(smartWS.Range(nsGrpRng.Address), nsgCount(i))
                If x > 40 Then
                    If Not addWB Is Nothing Then _
                    Application.Run "'" & Replace(addWB.Name, "'", "''") & "'!ShowError", "'Nested Group (" & nsgCount(i) & ") has " & x & " SKUs assigned and exceeds the maximum allowed", nsGrpRng.Cells(i, 1), Replace(nsGrpRng.Address, "$", "")
                    chkNestedSKUGrpCount = False
                End If
        End If
    Next i

End If
End Function

Function FetchVendorInfo(xVNum As Long)
Dim addWB As Workbook, addWBPath As String, xFile
#If Mac Then
    'addWBPath = "//Users/vidyashankarars/Documents/"
    End Function
#Else
    addWBPath = Environ("APPDATA") & "\Microsoft\Excel\XLSTART\AH-Buyer-SmartSheet*AddIn*.xlam"
#End If

xFound = vbaSmartSheetFunctions.Check4File(CStr(addWBPath))
    If xFound Then
        If addWB Is Nothing Then
            Set addWB = Application.Workbooks(Dir(addWBPath))
            Application.Run "'" & Replace(addWB.Name, "'", "''") & "'!FetchVendorDetails", xVNum
        End If
    Else
        MsgBox "You seem to be missing the 'SmartSheet AddIn' in the XLSTART Location. Please contact SmartSheet Administrator", vbInformation, "At Home: Buyer-SmartSheet"
        SetTrue
        End
    End If
End Function

Function hdlNames(Optional nWB As Workbook)
Set nWB = ActiveWorkbook
Dim n
On Error Resume Next
For Each n In nWB.Names
    If n.Visible Then n.Visible = False
Next n
On Error GoTo 0
End Function

Function HideOtherScreen()
    Dim Sheet As Object
    ActiveWorkbook.Unprotect encryptionPassword
    ActiveWorkbook.Sheets("Buyer-SmartSheet").Visible = xlSheetVisible
    ActiveWorkbook.Sheets("Images").Visible = xlSheetVisible
    ActiveWorkbook.Sheets("Buyer-SmartSheet").Activate
    For Each Sheet In ActiveWorkbook.Sheets
        If Sheet.Name <> "Buyer-SmartSheet" And Sheet.Name <> "Images" Then
            Sheet.Visible = xlSheetVeryHidden
        End If
    Next Sheet
    ActiveWorkbook.Protect encryptionPassword
    Set Sheet = Nothing
     
End Function
Function HideWelcomeScreen()
    Dim Sheet As Object
    ActiveWorkbook.Unprotect encryptionPassword
    ActiveWorkbook.Sheets("Welcome").Visible = xlSheetVisible
    ActiveWorkbook.Sheets("Welcome").Activate
    For Each Sheet In ActiveWorkbook.Sheets
        If Sheet.Name <> "Welcome" Then
            Sheet.Visible = xlSheetVeryHidden
        End If
    Next Sheet
    ActiveWorkbook.Protect encryptionPassword
    Set Sheet = Nothing
     
End Function

Function xfindIMU(ByVal xDpt As Integer, ByVal xsDpt As Integer, ByVal xCls As Integer, ByVal xsCls As Integer) As Double
Dim tblIMU As ListObject, i As Integer, z As Integer
Set SmartWB = ActiveWorkbook: Set smartWS = SmartWB.Worksheets("Buyer-SmartSheet"): Set refWS = SmartWB.Worksheets("RefSheets")
Set tblIMU = refWS.ListObjects("tbl_IMUCheck")

    For i = 1 To tblIMU.DataBodyRange.Rows.Count
        If tblIMU.ListColumns(2).DataBodyRange.Cells(i, 1).Value = xDpt And tblIMU.ListColumns(3).DataBodyRange.Cells(i, 1).Value = xsDpt And tblIMU.ListColumns(4).DataBodyRange.Cells(i, 1).Value = xCls And tblIMU.ListColumns(5).DataBodyRange.Cells(i, 1).Value = xsCls Then
            xfindIMU = (tblIMU.ListColumns(7).DataBodyRange.Cells(i, 1).Value) / 100
            Exit Function
        End If
    Next i
    
    For i = 1 To tblIMU.DataBodyRange.Rows.Count
        If tblIMU.ListColumns(2).DataBodyRange.Cells(i, 1).Value = xDpt And tblIMU.ListColumns(3).DataBodyRange.Cells(i, 1).Value = xsDpt And tblIMU.ListColumns(4).DataBodyRange.Cells(i, 1).Value = xCls And tblIMU.ListColumns(5).DataBodyRange.Cells(i, 1).Value = 0 Then
            xfindIMU = (tblIMU.ListColumns(7).DataBodyRange.Cells(i, 1).Value) / 100
            Exit Function
        End If
    Next i
        
    For i = 1 To tblIMU.DataBodyRange.Rows.Count
        If tblIMU.ListColumns(2).DataBodyRange.Cells(i, 1).Value = xDpt And tblIMU.ListColumns(3).DataBodyRange.Cells(i, 1).Value = xsDpt And tblIMU.ListColumns(4).DataBodyRange.Cells(i, 1).Value = 0 And tblIMU.ListColumns(5).DataBodyRange.Cells(i, 1).Value = 0 Then
            xfindIMU = (tblIMU.ListColumns(7).DataBodyRange.Cells(i, 1).Value) / 100
            Exit Function
        End If
    Next i
    
    For i = 1 To tblIMU.DataBodyRange.Rows.Count
        If tblIMU.ListColumns(2).DataBodyRange.Cells(i, 1).Value = xDpt And tblIMU.ListColumns(3).DataBodyRange.Cells(i, 1).Value = 0 And tblIMU.ListColumns(4).DataBodyRange.Cells(i, 1).Value = 0 And tblIMU.ListColumns(5).DataBodyRange.Cells(i, 1).Value = 0 Then
            xfindIMU = (tblIMU.ListColumns(7).DataBodyRange.Cells(i, 1).Value) / 100
            Exit Function
        End If
    Next i
    
    For i = 1 To tblIMU.DataBodyRange.Rows.Count
        If tblIMU.ListColumns(2).DataBodyRange.Cells(i, 1).Value <> xDpt And tblIMU.ListColumns(3).DataBodyRange.Cells(i, 1).Value <> xsDpt And tblIMU.ListColumns(4).DataBodyRange.Cells(i, 1).Value <> xCls And tblIMU.ListColumns(5).DataBodyRange.Cells(i, 1).Value <> xsCls Then
            xfindIMU = (42) / 100
            Exit Function
        End If
    Next i
    
End Function


INQUEST-PP=macro
