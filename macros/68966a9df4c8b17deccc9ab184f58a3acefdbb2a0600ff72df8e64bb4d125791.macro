Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "mod_HW2F_Cap"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "mod_HW2F_CapCPD"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "mod_HW2F_Caplets"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CreateCapletsBtn, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "ResizeTableBtn, 2, 1, MSForms, CommandButton"
Option Explicit
Option Base 1
Option Compare Text

Private Function IsValidFreq(x As String) As Boolean
    Dim y As String: y = UCase$(x)
    
    IsValidFreq = (y = "1M" Or y = "2M" Or y = "3M" _
                  Or y = "4M" Or y = "6M")
End Function

Private Function TenorInMonths(x As String) As Integer
    Dim y As String: y = UCase$(x)
    
    If y Like "##Y" Or y Like "#Y" Then
        TenorInMonths = CInt(Left$(x, Len(x) - 1)) * 12
    ElseIf y Like "##M" Or y Like "#M" Then
        TenorInMonths = CInt(Left$(x, Len(x) - 1))
    Else
        Err.Raise 5
    End If
End Function


Private Sub GenerateCaplets()
    Application.ScreenUpdating = False
    Dim i As Integer, j As Integer, counter As Integer: counter = 0
    ClearCaplets
    Dim invCom$: invCom = """"
    Dim asn$: asn = ActiveSheet.Name
    Dim rngIn As Range: Set rngIn = Range("NX_" & asn & "_M_SelectionGrid")
    Dim rngOt As Range: Set rngOt = Range("NX_" & asn & "_M_CapletDefs")
    Dim ID$
    Dim rngCcy As Range: Set rngCcy = Range("NX_" & asn & "_M_CurrencyValue")
    Dim rngPrefix As Range: Set rngPrefix = Range("NX_" & asn & "_M_PrefixValue")
    Dim rngModel As Range: Set rngModel = Range("NX_" & asn & "_M_ModelValue")
    Dim rngName As Range: Set rngName = Range("NX_" & asn & "_M_NameValue")
    Dim rngFreq As Range: Set rngFreq = Range("NX_" & asn & "_M_FreqValue")
    Dim freqMonths As Integer
    
    Dim indexCurve$: indexCurve = Range("NX_" & asn & "_M_IndexCurve").Address
    Dim volType$: volType = Range("NX_" & asn & "_M_VolType").Address
    
    If IsValidFreq(rngFreq.Value) Then
        freqMonths = TenorInMonths(rngFreq.Value)
    Else
        GoTo GenerateCaplets_BadFreq
    End If
    
    'The tenor last observed
    Dim prevMonths As Integer: prevMonths = freqMonths
    
    ' fill in the caplets
    For j = 2 To rngIn.Rows.Count
        On Error GoTo GenerateCaplets_BadTenor
        Dim nMonths As Integer: nMonths = TenorInMonths(rngIn.Cells(j, 1))
        On Error GoTo 0
        
        For i = 1 To rngIn.Columns.Count
            If rngIn.Cells(j, i) = "Y" Then
                counter = counter + 1
                rngOt.Cells(counter, 1) = rngIn.Cells(j, 1)
                'rngOt.Cells(counter, 1).NumberFormat = "dd-mmm-yy"
                rngOt.Cells(counter, 2) = rngIn.Cells(1, i)
                
                ID = rngPrefix.Address & "&" & invCom & "." & invCom & "&" & rngCcy.Address & "&" & invCom & ".Cap" & CStr(counter) & invCom
                rngOt.Cells(counter, 3).Formula = "=nxInstrumentCapTenorCentralizedQuote(" & ID _
                    & "," & rngCcy.Address _
                    & "," & Range("NX_" & asn & "_M_Flavor").Address _
                    & "," & invCom & (CStr(prevMonths) & "M") & invCom & "," _
                    & rngOt.Cells(counter, 1).Address(0, 0) & "," _
                    & rngFreq.Address & "," _
                    & Range("NX_" & asn & "_M_BasisValue").Address & "," _
                    & rngOt.Cells(counter, 2).Address(0, 0) & "," _
                    & Range("NX_" & asn & "_M_VolCurveID").Address & "," _
                    & volType & "," _
                    & "," _
                    & Range("NX_" & asn & "_M_ConventionValue").Address & "," _
                    & "," _
                    & "," _
                    & "," _
                    & "," _
                    & Range("NX_" & asn & "_M_NoticePeriodValue").Offset(0, -1).Address & ":" & indexCurve & ")"
            End If
        Next
        
        prevMonths = nMonths
    Next
    If counter > 0 Then
        Range(rngOt.Cells(1, 1), rngOt.Cells(counter, 3)).Select
        ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_CapletDefs", RefersTo:=Selection
        Selection.HorizontalAlignment = xlCenter
        Selection.Interior.ColorIndex = 2
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
        End With
        
        Range("NX_" & asn & "_M_InstCollection").Formula = "=nxInstrumentCollection(" _
            & invCom & rngPrefix.Value & "." & rngName.Value & ".Collection" & invCom _
            & "," & rngCcy.Address & "," _
            & Range(rngOt.Cells(1, 3).Offset(-1, 0), rngOt.Cells(counter, 3)).Address & ")"
     
        Range("E11").Select
        ActiveSheet.Calculate
    Else
        Range("NX_" & asn & "_M_InstCollection") = "NO CAPLETS"
    End If
    
    Exit Sub
    
GenerateCaplets_BadFreq:
    MsgBox "Illegal frequency " & rngFreq.Value & "; Frequency must be 1M, 2M, 3M, 4M or 6M", _
        vbExclamation, "Invalid Frequency"
    Exit Sub
    
GenerateCaplets_BadTenor:
    MsgBox "Illegal tenor; Tenors must be of form ##M or ##Y.", _
        vbExclamation, "Invalid Tenor"
    Exit Sub
End Sub


Private Sub ClearCaplets()
    Dim rng As Range: Set rng = Range("NX_" & ActiveSheet.Name & "_M_CapletDefs")
    Range(rng.Cells(1, 1), rng.Cells(rng.Rows.Count, rng.Columns.Count)).Clear
End Sub


Private Sub CreateCapletsBtn_Click()
    GenerateCaplets
End Sub

Private Sub ResizeTableBtn_Click()
    ResizeTable
End Sub


Private Sub ResizeTable()
    Range("NX_" & Me.Name & "_M_SelectionGrid") = ""
    Dim asn$: asn = ActiveSheet.Name
    Dim anchor As Range: Set anchor = Range("NX_" & Me.Name & "_M_SelectionGrid").Cells(1, 1)
    Dim temp: temp = Application.Run("NxLibView", Range("NX_" & Me.Name & "_M_VolCurveID"))
    
    'Check that a valid volatility curve was returned
    On Error GoTo ResizeTable_BadVolCurve
    Dim ErrorCheck As Variant: ErrorCheck = LBound(temp, 1): ErrorCheck = LBound(temp, 2)
    On Error GoTo 0
    
    Dim i As Integer, dateCounter As Integer, strikeCounter As Integer
    dateCounter = 0
    strikeCounter = 0
    
    Dim freqVal$: freqVal = Range("NX_" & asn & "_M_FreqValue")
    Dim freqMonths As Integer
     
    If IsValidFreq(freqVal) Then
        freqMonths = TenorInMonths(freqVal)
    Else
        GoTo ResizeTable_BadFreq
    End If
    
    'Tenors every freq for first two years
    For i = (freqMonths * 2) To 24 Step freqMonths
         dateCounter = dateCounter + 1
         If (i Mod 12 = 0) Then
            anchor.Offset(dateCounter, 0) = CStr(i / 12) & "Y"
         Else
            anchor.Offset(dateCounter, 0) = CStr(i) & "M"
         End If
    Next
    
    For i = 2 To UBound(temp)
        If temp(i, 1) = "" Then Exit For
        If Not (UCase$(temp(i, 1)) = "1Y" Or UCase$(temp(i, 1)) = "2Y") Then
            dateCounter = dateCounter + 1
            anchor.Offset(dateCounter, 0) = temp(i, 1)
            anchor.Offset(dateCounter, 0).NumberFormat = "dd-mmm-yy"
        End If
    Next
    
    strikeCounter = strikeCounter + 1
    anchor.Offset(0, strikeCounter) = "ATM"
    
    For i = 3 To UBound(temp, 2)
        If Not IsNumeric(temp(1, i)) Or Len(temp(1, i)) = 0 Then Exit For
        strikeCounter = strikeCounter + 1
        anchor.Offset(0, strikeCounter) = temp(1, i)
    Next
    ActiveWorkbook.Names.Add Name:="NX_" & Me.Name & "_M_SelectionGrid", RefersTo:=Range(anchor, anchor.Offset(dateCounter, strikeCounter))
    Exit Sub

ResizeTable_BadFreq:
    MsgBox "Illegal frequency " & freqVal & "; Frequency must be 1M, 2M, 3M, 4M or 6M", _
        vbExclamation, "Invalid Frequency"
    Exit Sub
    
ResizeTable_BadVolCurve:
    MsgBox temp(1) & vbCrLf & "Check that your market data is properly loaded.", _
        vbExclamation, "Numerix Object Not Found"
End Sub






Attribute VB_Name = "mod_HW2F_Constant"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "mod_HW2F_Swaptions"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "ComboBox1, 2, 1, MSForms, ComboBox"
'Option Explicit
Option Base 1
Option Compare Text

Private hasBeenInitialised As Boolean

Private Sub Worksheet_Activate()
    hasBeenInitialised = False
    ComboBox1.Clear
    ComboBox1.AddItem ("Clear Grid")
    ComboBox1.AddItem ("2y CMS")
    ComboBox1.AddItem ("5y CMS")
    ComboBox1.AddItem ("10y CMS")
    ComboBox1.AddItem ("20y CMS")
    ComboBox1.AddItem ("30y CMS")
    ComboBox1.AddItem ("5y Diagonal")
    ComboBox1.AddItem ("10y Diagonal")
    ComboBox1.AddItem ("15y Diagonal")
    ComboBox1.AddItem ("20y Diagonal")
    ComboBox1.AddItem ("25y Diagonal")
    ComboBox1.AddItem ("30y Diagonal")
    ComboBox1.AddItem ("40y Diagonal")
    ComboBox1.AddItem ("50y Diagonal")
    hasBeenInitialised = True
End Sub


Private Sub generateSwaptions()
    Application.ScreenUpdating = False
    Dim i As Integer, j As Integer, counter As Integer: counter = 0
    clearSwaptions
    Dim invCom$: invCom = """"
    Dim asn$: asn = ActiveSheet.Name
    Dim rngIn As Range: Set rngIn = Range("NX_" & asn & "_M_SelectionGrid")
    Dim rngOt As Range: Set rngOt = Range("NX_" & asn & "_M_SwaptionDefs")
    Dim strikeAdd$: strikeAdd = Range("NX_" & asn & "_M_StrikeValue").Address
    Dim CcyAdd$: CcyAdd = Range("NX_" & asn & "_M_CurrencyValue").Address
    Dim flavourAdd$: flavourAdd = Range("NX_" & asn & "_M_FlavourValue").Address
    Dim prefixVal$: prefixVal = Range("NX_" & asn & "_M_PrefixValue").Address
    Dim modelVal$: modelVal = Range("NX_" & asn & "_M_ModelValue").Address
    Dim sptnIDAdd$: sptnIDAdd = Range("NX_" & asn & "_M_SwaptionIDValue").Address
    Dim convAdd$: convAdd = Range("NX_" & asn & "_M_ConventionValue").Address
    Dim ID$: ID = prefixVal & "&" & invCom & "." & invCom & "&" & modelVal & "&" & invCom & "." & invCom & "&" & CcyAdd
    
    Dim fixedFreq$: fixedFreq = Range("NX_" & asn & "_M_FixedFreq").Address
    Dim floatFreq$: floatFreq = Range("NX_" & asn & "_M_FloatFreq").Address
    Dim indexCurve$: indexCurve = Range("NX_" & asn & "_M_IndexCurve").Address
    Dim volType$: volType = Range("NX_" & asn & "_M_VolType").Address
    Dim volBasis$: volBasis = Range("NX_" & asn & "_M_VolBasis").Address
    
    Debug.Print ID
    ' fill in the swaptions
    For j = 1 To rngIn.Rows.Count
        For i = 1 To rngIn.Columns.Count
            If rngIn.Cells(j, i) = "Y" Then
                counter = counter + 1
                rngOt.Cells(counter, 1) = rngIn.Cells(j, 1)
                rngOt.Cells(counter, 2) = rngIn.Cells(1, i)
                rngOt.Cells(counter, 3).Formula = "=" & strikeAdd
                rngOt.Cells(counter, 4).Formula = "= nxInstrumentSwaptionTwoLegTenorCentralizedQuote(" & _
                    ID & "&" & invCom & "." & invCom & "&" & rngOt.Cells(counter, 1).Address(0, 0) & "&" & invCom & "." & invCom & "&" & rngOt(counter, 2).Address(0, 0) _
                    & "," & CcyAdd _
                    & "," & flavourAdd _
                    & "," & rngOt.Cells(counter, 1).Address(0, 0) _
                    & "," & rngOt.Cells(counter, 2).Address(0, 0) _
                    & "," & fixedFreq _
                    & "," & floatFreq _
                    & "," & rngOt.Cells(counter, 3).Address(0, 0) _
                    & "," & sptnIDAdd _
                    & "," & volType _
                    & "," _
                    & "," & volBasis _
                    & "," & indexCurve _
                    & "," _
                    & "," _
                    & "," & convAdd & ")"
            End If
        Next
    Next
    
    If counter = 0 Then Exit Sub
    Range(rngOt.Cells(1, 1), rngOt.Cells(counter, 4)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_SwaptionDefs", RefersTo:=Selection

    Selection.Interior.ColorIndex = 2
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    
    Range("NX_" & asn & "_M_InstCollection").Formula = "=nxInstrumentCollection(" & ID & "&" & invCom & ".Collection" & invCom & "," & CcyAdd & "," _
        & Range(rngOt.Cells(1, 4).Offset(-1, 0), rngOt.Cells(counter, 4)).Address & ")"
    
    Range("E11").Select
    
    
    ActiveSheet.Calculate
End Sub

Private Sub ComboBox1_Change()
    If hasBeenInitialised = False Then Exit Sub
    Application.ScreenUpdating = False
    Select Case ComboBox1.Text
        Case "CLEAR GRID":   clearSwaptionSelectionGrid
                             clearSwaptions
                             ActiveSheet.Calculate
                             Exit Sub
        Case "2y CMS":       populateCMS "2y"
        Case "5y CMS":       populateCMS "5y"
        Case "10y CMS":      populateCMS "10y"
        Case "20y CMS":      populateCMS "20y"
        Case "30y CMS":      populateCMS "30y"
        Case "5y Diagonal":  populateDiagonal 5
        Case "10y Diagonal": populateDiagonal 10
        Case "15y Diagonal": populateDiagonal 15
        Case "20y Diagonal": populateDiagonal 20
        Case "25y Diagonal": populateDiagonal 25
        Case "30y Diagonal": populateDiagonal 30
        Case "40y Diagonal": populateDiagonal 40
        Case "50y Diagonal": populateDiagonal 50
        Case Else
            MsgBox "Fatal error in swaption creation"
            Exit Sub
    End Select
    generateSwaptions
    ActiveSheet.Calculate
End Sub

Private Sub CommandButton1_Click()
    generateSwaptions
End Sub

' clear the swaptions
Private Sub clearSwaptions()
    Dim rng As Range: Set rng = Range("NX_" & ActiveSheet.Name & "_M_SwaptionDefs")
    Range(rng.Cells(1, 1), rng.Cells(rng.Rows.Count, rng.Columns.Count)).Clear
End Sub

' clear swaption selection area
Private Sub clearSwaptionSelectionGrid()
    Dim rng As Range: Set rng = Range("NX_" & ActiveSheet.Name & "_M_SelectionGrid")
    Range(rng.Cells(2, 2), rng.Cells(rng.Rows.Count, rng.Columns.Count)).FormulaArray = ""
End Sub

Private Sub populateCMS(CMSTenor$)
    Dim i As Integer, j As Integer
    Dim rng As Range: Set rng = Range("NX_" & ActiveSheet.Name & "_M_SelectionGrid")
    For i = 1 To rng.Columns.Count
        If rng.Cells(1, i) = CMSTenor Then
            For j = 2 To rng.Rows.Count
                rng.Cells(j, i) = "Y"
            Next j
            Exit Sub
        End If
    Next
End Sub

Private Sub populateDiagonal(tenorYrs As Integer)
    Dim i As Integer
    For i = 1 To tenorYrs - 1
        doIndividualOption i & "Y", tenorYrs - i & "Y"
    Next
End Sub

Private Sub doIndividualOption(optTenor$, swapTenor$)
    Dim i As Integer, j As Integer
    Dim rng As Range: Set rng = Range("NX_" & ActiveSheet.Name & "_M_SelectionGrid")
    Dim foundSwap As Boolean: foundSwap = False
    For i = 1 To rng.Columns.Count
        If rng.Cells(1, i) = swapTenor Then
            foundSwap = True
            Exit For
        End If
    Next
    If foundSwap Then
        For j = 1 To rng.Rows.Count
            If rng.Cells(j, 1) = optTenor$ Then
                rng.Cells(j, i) = "Y"
                Exit For
            End If
        Next
    End If
End Sub






Attribute VB_Name = "mod_HW2F_SwaptionsCPD"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 1, 0, MSForms, CommandButton"
Attribute VB_Control = "ComboBox1, 2, 1, MSForms, ComboBox"
'Option Explicit
Option Base 1
Option Compare Text

Private hasBeenInitialised As Boolean

Private Sub Worksheet_Activate()
    hasBeenInitialised = False
    ComboBox1.Clear
    ComboBox1.AddItem ("Clear Grid")
    ComboBox1.AddItem ("2y CMS")
    ComboBox1.AddItem ("5y CMS")
    ComboBox1.AddItem ("10y CMS")
    ComboBox1.AddItem ("20y CMS")
    ComboBox1.AddItem ("30y CMS")
    ComboBox1.AddItem ("5y Diagonal")
    ComboBox1.AddItem ("10y Diagonal")
    ComboBox1.AddItem ("15y Diagonal")
    ComboBox1.AddItem ("20y Diagonal")
    ComboBox1.AddItem ("25y Diagonal")
    ComboBox1.AddItem ("30y Diagonal")
    ComboBox1.AddItem ("40y Diagonal")
    ComboBox1.AddItem ("50y Diagonal")
    hasBeenInitialised = True
End Sub


Private Sub generateSwaptions()
    Application.ScreenUpdating = False
    Dim i As Integer, j As Integer, counter As Integer: counter = 0
    clearSwaptions
    Dim invCom$: invCom = """"
    Dim asn$: asn = ActiveSheet.Name
    Dim rngIn As Range: Set rngIn = Range("NX_" & asn & "_M_SelectionGrid")
    Dim rngOt As Range: Set rngOt = Range("NX_" & asn & "_M_SwaptionDefs")
    Dim strikeAdd$: strikeAdd = Range("NX_" & asn & "_M_StrikeValue").Address
    Dim CcyAdd$: CcyAdd = Range("NX_" & asn & "_M_CurrencyValue").Address
    Dim flavourAdd$: flavourAdd = Range("NX_" & asn & "_M_FlavourValue").Address
    Dim prefixVal$: prefixVal = Range("NX_" & asn & "_M_PrefixValue").Address
    Dim modelVal$: modelVal = Range("NX_" & asn & "_M_ModelValue").Address
    Dim sptnIDAdd$: sptnIDAdd = Range("NX_" & asn & "_M_SwaptionIDValue").Address
    Dim convAdd$: convAdd = Range("NX_" & asn & "_M_ConventionValue").Address
    Dim ID$: ID = prefixVal & "&" & invCom & "." & invCom & "&" & modelVal & "&" & invCom & "." & invCom & "&" & CcyAdd
    
    Dim fixedFreq$: fixedFreq = Range("NX_" & asn & "_M_FixedFreq").Address
    Dim floatFreq$: floatFreq = Range("NX_" & asn & "_M_FloatFreq").Address
    Dim indexCurve$: indexCurve = Range("NX_" & asn & "_M_IndexCurve").Address
    Dim volType$: volType = Range("NX_" & asn & "_M_VolType").Address
    Dim volBasis$: volBasis = Range("NX_" & asn & "_M_VolBasis").Address
    
    Debug.Print ID
    ' fill in the swaptions
    For j = 1 To rngIn.Rows.Count
        For i = 1 To rngIn.Columns.Count
            If rngIn.Cells(j, i) = "Y" Then
                counter = counter + 1
                rngOt.Cells(counter, 1) = rngIn.Cells(j, 1)
                rngOt.Cells(counter, 2) = rngIn.Cells(1, i)
                rngOt.Cells(counter, 3).Formula = "=" & strikeAdd
                rngOt.Cells(counter, 4).Formula = "= nxInstrumentSwaptionTwoLegTenorCentralizedQuote(" & _
                    ID & "&" & invCom & "." & invCom & "&" & rngOt.Cells(counter, 1).Address(0, 0) & "&" & invCom & "." & invCom & "&" & rngOt(counter, 2).Address(0, 0) _
                    & "," & CcyAdd _
                    & "," & flavourAdd _
                    & "," & rngOt.Cells(counter, 1).Address(0, 0) _
                    & "," & rngOt.Cells(counter, 2).Address(0, 0) _
                    & "," & fixedFreq _
                    & "," & floatFreq _
                    & "," & rngOt.Cells(counter, 3).Address(0, 0) _
                    & "," & sptnIDAdd _
                    & "," & volType _
                    & "," _
                    & "," & volBasis _
                    & "," & indexCurve _
                    & "," _
                    & "," _
                    & "," & convAdd & ")"
            End If
        Next
    Next
    
    If counter = 0 Then Exit Sub
    Range(rngOt.Cells(1, 1), rngOt.Cells(counter, 4)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & asn & "_M_SwaptionDefs", RefersTo:=Selection

    Selection.Interior.ColorIndex = 2
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
    
    Range("NX_" & asn & "_M_InstCollection").Formula = "=nxInstrumentCollection(" & ID & "&" & invCom & ".Collection" & invCom & "," & CcyAdd & "," _
        & Range(rngOt.Cells(1, 4).Offset(-1, 0), rngOt.Cells(counter, 4)).Address & ")"
    
    Range("E11").Select
    
    
    ActiveSheet.Calculate
End Sub

Private Sub ComboBox1_Change()
    If hasBeenInitialised = False Then Exit Sub
    Application.ScreenUpdating = False
    Select Case ComboBox1.Text
        Case "CLEAR GRID":   clearSwaptionSelectionGrid
                             clearSwaptions
                             ActiveSheet.Calculate
                             Exit Sub
        Case "2y CMS":       populateCMS "2y"
        Case "5y CMS":       populateCMS "5y"
        Case "10y CMS":      populateCMS "10y"
        Case "20y CMS":      populateCMS "20y"
        Case "30y CMS":      populateCMS "30y"
        Case "5y Diagonal":  populateDiagonal 5
        Case "10y Diagonal": populateDiagonal 10
        Case "15y Diagonal": populateDiagonal 15
        Case "20y Diagonal": populateDiagonal 20
        Case "25y Diagonal": populateDiagonal 25
        Case "30y Diagonal": populateDiagonal 30
        Case "40y Diagonal": populateDiagonal 40
        Case "50y Diagonal": populateDiagonal 50
        Case Else
            MsgBox "Fatal error in swaption creation"
            Exit Sub
    End Select
    generateSwaptions
    ActiveSheet.Calculate
End Sub

Private Sub CommandButton1_Click()
    generateSwaptions
End Sub

' clear the swaptions
Private Sub clearSwaptions()
    Dim rng As Range: Set rng = Range("NX_" & ActiveSheet.Name & "_M_SwaptionDefs")
    Range(rng.Cells(1, 1), rng.Cells(rng.Rows.Count, rng.Columns.Count)).Clear
End Sub

' clear swaption selection area
Private Sub clearSwaptionSelectionGrid()
    Dim rng As Range: Set rng = Range("NX_" & ActiveSheet.Name & "_M_SelectionGrid")
    Range(rng.Cells(2, 2), rng.Cells(rng.Rows.Count, rng.Columns.Count)).FormulaArray = ""
End Sub

Private Sub populateCMS(CMSTenor$)
    Dim i As Integer, j As Integer
    Dim rng As Range: Set rng = Range("NX_" & ActiveSheet.Name & "_M_SelectionGrid")
    For i = 1 To rng.Columns.Count
        If rng.Cells(1, i) = CMSTenor Then
            For j = 2 To rng.Rows.Count
                rng.Cells(j, i) = "Y"
            Next j
            Exit Sub
        End If
    Next
End Sub

Private Sub populateDiagonal(tenorYrs As Integer)
    Dim i As Integer
    For i = 1 To tenorYrs - 1
        doIndividualOption i & "Y", tenorYrs - i & "Y"
    Next
End Sub

Private Sub doIndividualOption(optTenor$, swapTenor$)
    Dim i As Integer, j As Integer
    Dim rng As Range: Set rng = Range("NX_" & ActiveSheet.Name & "_M_SelectionGrid")
    Dim foundSwap As Boolean: foundSwap = False
    For i = 1 To rng.Columns.Count
        If rng.Cells(1, i) = swapTenor Then
            foundSwap = True
            Exit For
        End If
    Next
    If foundSwap Then
        For j = 1 To rng.Rows.Count
            If rng.Cells(j, 1) = optTenor$ Then
                rng.Cells(j, i) = "Y"
                Exit For
            End If
        Next
    End If
End Sub







' InQuest injected base64 decoded content
' Szz+	
' z{kjX

INQUEST-PP=macro
