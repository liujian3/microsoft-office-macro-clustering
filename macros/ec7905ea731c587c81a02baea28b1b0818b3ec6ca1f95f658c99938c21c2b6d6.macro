Attribute VB_Name = "Exemple"

Public Function GetFilesToRead(ByVal aBeginDate As Date, ByVal aEndDate As Date) As Variant

  Dim filesToReadArray() As String
  Dim numberOfMonths, numberofYears, monthAux, yearAux As Integer
  Dim dateAux As Date
  Dim month1, month2, year1, year2 As Integer
  Dim i As Integer
  
  If aBeginDate > aEndDate Then
    dateAux = aBeginDate
    aBeginDate = aEndDate
    aEndDate = dateAux
  End If
     
  numberOfMonths = DateDiff("m", aBeginDate, aEndDate)
  numberofYears = DateDiff("yyyy", aBeginDate, aEndDate)
  month1 = DatePart("m", aBeginDate)
  month2 = DatePart("m", aEndDate)
  year1 = DatePart("yyyy", aBeginDate)
  year2 = DatePart("yyyy", aEndDate)

  monthAux = month1
  yearAux = year1
  ReDim filesToReadArray(numberOfMonths) As String
  
  If numberofYears = 0 Then
    For i = 0 To numberOfMonths
      If monthAux <= month2 Then
        filesToReadArray(i) = ("Stats " & yearAux & "-" & Format(monthAux, "00") & ".txt")
        monthAux = monthAux + 1
      End If
    Next
  Else
    For i = 0 To numberOfMonths
      If yearAux < year2 Then
        If monthAux <= 12 Then
          filesToReadArray(i) = ("Stats " & yearAux & "-" & Format(monthAux, "00") & ".txt")
          If monthAux = 12 Then
            yearAux = yearAux + 1
            monthAux = 0
          End If
          monthAux = monthAux + 1
        End If
      ElseIf yearAux = year2 Then
        If monthAux <= month2 Then
          filesToReadArray(i) = ("Stats " & yearAux & "-" & Format(monthAux, "00") & ".txt")
          monthAux = monthAux + 1
        End If
      End If
    Next
  End If
  GetFilesToRead = filesToReadArray
End Function


Public Function GetLinesList(ByVal aBeginDate As Date, ByVal aEndDate As Date, _
  ByVal aProductCode As String, ByVal aUserName As String, ByVal aIpAddress As String) As Variant

  Dim aFilesToRead() As String
  Dim i As Integer
  Dim aSplitLine() As String
  Dim aResult() As String
  Dim pathFile, sLine As String
  Dim date1 As Date
  Dim Filenum As Integer
  
  Filenum = FreeFile
  pathFile = ActiveWorkbook.Path & "\"
  aFilesToRead = GetFilesToRead(aBeginDate, aEndDate)
  
  If IsArrayAllocated(aFilesToRead) Then
    For i = 0 To UBound(aFilesToRead)
      If Dir(pathFile & aFilesToRead(i)) <> "" Then
        Open pathFile & aFilesToRead(i) For Input As Filenum
        While Not EOF(Filenum)
          Line Input #Filenum, sLine
          aSplitLine = Split(sLine, Chr(9))
          If (sLine <> "") Then
            If (aSplitLine(0) <> "Date/time") Then
              date1 = CDate(Replace(aSplitLine(0), "T", " "))
              If (date1 >= aBeginDate) And (date1 <= aEndDate) And _
                ((aProductCode = "") Or (StrComp(aSplitLine(3), aProductCode, vbTextCompare) = 0)) And _
                ((aUserName = "") Or (StrComp(aSplitLine(7), aUserName, vbTextCompare) = 0)) And _
                ((aIpAddress = "") Or (StrComp(aSplitLine(6), aIpAddress, vbTextCompare) = 0)) Then
               
                ReDim Preserve aResult(UUBound(aResult) + 1)
                aResult(UBound(aResult)) = sLine
              End If
            End If
          End If
        Wend
        Close Filenum
      End If
    Next
    GetLinesList = aResult
  End If
End Function

Public Function TimeSpent(ByVal aLineList As Variant, ByVal aActionCode1 As String, ByVal aActionCode2 As String) As Long

  Dim aSplitLine, aSplitLineAux As Variant
  Dim aLineLst() As String
  Dim date1, date2 As Date
  Dim TimeDif As Long
  Dim GlobalTime As Long
  
  GlobalTime = 0
  aLineLst = aLineList
  If IsArrayAllocated(aLineLst) Then
      For i = 0 To UBound(aLineLst)
        aSplitLine = Split(aLineList(i), Chr(9))
        If aSplitLine(1) = aActionCode1 Then
          For j = i + 1 To UBound(aLineList)
            aSplitLineAux = Split(aLineList(j), Chr(9))
            If (aSplitLineAux(1) = aActionCode2) And (aSplitLine(2) = aSplitLineAux(2)) Then
              date1 = CDate(Replace(aSplitLine(0), "T", " "))
              date2 = CDate(Replace(aSplitLineAux(0), "T", " "))
              TimeDif = DateDiff("s", date1, date2)
              GlobalTime = GlobalTime + TimeDif
              Exit For
            End If
          Next
        End If
      Next
  End If
  TimeSpent = GlobalTime
End Function

Function IsArrayAllocated(Arr As Variant) As Boolean
  On Error Resume Next
  IsArrayAllocated = False
  IsArrayAllocated = IsArray(Arr) And Not IsError(LBound(Arr, 1)) And LBound(Arr, 1) <= UBound(Arr, 1)
End Function

Public Function UUBound(a As Variant) As Long
  On Error Resume Next
  Dim size As Long
  size = UBound(a)
  If Err = 9 Then
    UUBound = -1
  Else
    UUBound = size
  End If
End Function

Function NiceTime(Value As Double) As String
  If Value > 86400 Then
    NiceTime = Value \ 86400 & " jours"
    Value = Value Mod 86400
  Else
    NiceTime = ""
  End If
  
  If Value > 3600 Then
    If NiceTime <> "" Then
      NiceTime = NiceTime & ", " & Value \ 3600 & " heures"
    Else
      NiceTime = Value \ 3600 & " heures"
    End If
    Value = Value Mod 3600
  End If
  
  If Value > 60 Then
    If NiceTime <> "" Then
      NiceTime = NiceTime & ", " & Value \ 60 & " minutes"
    Else
      NiceTime = Value \ 60 & " minutes"
    End If
    Value = Value Mod 60
  End If
  
  If Value <> 0 Then
    If NiceTime <> "" Then
      NiceTime = NiceTime & ", " & Value & " secondes"
    Else
      NiceTime = Value & " secondes"
    End If
  End If
End Function


Attribute VB_Name = "Feuil1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 4, 0, MSForms, CommandButton"
Private Sub CommandButton1_Click()
  StatsForm.Show
End Sub
Attribute VB_Name = "Feuil2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 2, 0, MSForms, CommandButton"
Private Sub CommandButton1_Click()
  Dim date1, date2 As Date
  Dim productCode, userName, address As String
  Dim lines As Variant
  Dim timeInSeconds As Double
  
  If Worksheets(2).Range("C2").Value <> "" Then
    date1 = Worksheets(2).Range("C2").Value
  Else
    date1 = Date
  End If
  
  If Worksheets(2).Range("C3").Value <> "" Then
    date2 = Worksheets(2).Range("C3").Value
  Else
    date2 = Date
  End If
  
  productCode = Worksheets(2).Range("C4").Value
  userName = Worksheets(2).Range("C5").Value
  address = Worksheets(2).Range("C6").Value
  
  lines = GetLinesList(date1, date2, productCode, userName, address)
  timeInSeconds = TimeSpent(lines, "TAKE_LICENSE", "RELEASE_LICENSE")
  Worksheets(2).Range("C11").Value = NiceTime(timeInSeconds)
End Sub



Attribute VB_Name = "StatsForm"
Attribute VB_Base = "0{1779370A-6301-4E9C-9109-EC1CED7B2B8C}{23E4AAAA-92FC-454C-BEF1-076F238248AC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim date1, date2 As Date
Private Sub btnSearch_Click()
  MsgBox "Temps: " & NiceTime(TimeSpent(GetLinesList(date1, date2, txtbProductCode.Value, txtbUserName.Value, txtbIpAddress.Value), "TAKE_LICENSE", "RELEASE_LICENSE")) & Chr(10) & _
  "Logiciel: " & txtbProductCode.Value & Chr(10) & "Entre le: " & date1 & " et le " & date2
  
End Sub

Private Sub LDBeginDate_Exit(ByVal Cancel As MSForms.ReturnBoolean)
  If Not IsDate(LDBeginDate.Value) Then
    MsgBox "Date incorrecte, veuillez l'entrer de nouveau", vbCritical
    LDBeginDate.Value = vbNullString
    LDBeginDate.SetFocus
    Exit Sub
  End If
  date1 = DateSerial(Year(Date), Month(Date), Day(Date))
  LDBeginDate.Value = Format(LDBeginDate.Value, "dd/mm/yyyy")
  date1 = LDBeginDate.Value
End Sub

Private Sub LDEndDate_Exit(ByVal Cancel As MSForms.ReturnBoolean)
  If Not IsDate(LDEndDate.Value) Then
    MsgBox "Date incorrecte, veuillez l'entrer de nouveau", vbCritical
    LDEndDate.Value = vbNullString
    LDEndDate.SetFocus
    Exit Sub
  End If
  date2 = DateSerial(Year(Date), Month(Date), Day(Date))
  LDEndDate.Value = Format(LDEndDate.Value, "dd/mm/yyyy")
  date2 = LDEndDate.Value
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
