Attribute VB_Name = "EstaPasta_de_trabalho"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Modulo2"
Declare Function GetActiveWindow Lib "user32" () As Long
Declare Function GetFocus Lib "user32" () As Long
Declare Function GetWindowWord Lib "user32" (ByVal hwnd As Long, ByVal nIndex As Long) As Integer
Declare Function SendMessage Lib "user32" Alias "SendMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Integer, ByVal lParam As Long) As Long
Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
Declare Function ExtractIcon Lib "Shell32.dll" Alias "ExtractIconA" (ByVal hInst As Long, ByVal lpszExeFileName As String, ByVal nIconIndex As Long) As Long
Declare Function DestroyIcon Lib "user32" (ByVal hIcon As Long) As Long
Declare Function SetFocusAPI Lib "user32" Alias "SetFocus" (ByVal hwnd As Long) As Long
'
' API Constants
'
Global Const WM_SETICON = &H80
Global Const GWL_HINSTANCE = (-6)
Global Const GWL_STYLE = (-16)
Global Const WS_SYSMENU = &H80000
Public Const SM_CXICON = 11
Public Const SM_CYICON = 12
Public Const SM_CXSMICON = 49
Public Const SM_CYSMICON = 50

Const SW_SHOW = 5
'
' Various Windows Handles
'
Dim hPreviousXLMAINBigIcon As Long
Dim hPreviousXLMAINSmallIcon As Long
Dim hPreviousEXCEL9BigIcon As Long
Dim hPreviousEXCEL9SmallIcon As Long
Dim hNewIcon As Long
Dim hInstanceExcel As Integer
Dim hWndXLMAIN As Long
Dim hWndEXCEL9 As Long

Function SetPerceptorIcon() As Boolean
    Dim theIconSource As String
    Dim theIconIndex As Long
    Dim istat As Long
    Application.EnableEvents = False 'Coloquei aqui para evitar bug de falta de retorno de COMAdd-ins no Excel 2000
    
    theIconSource = ThisWorkbook.Path & "\Applicat.ico"
    ' can be any valid windows icon source(.EXE, .DLL, .ICO)

    theIconIndex = 0
    ' the index to the icon within the source
    ' If this index is 0, the ExtractIcon function
    ' returns the first icon in the source

    istat = SetNewIcon(theIconSource, theIconIndex)    ' do the deed
    SetPerceptorIcon = True
End Function


'   A routine to change the standard Excel Icons
Function SetNewIcon(theIconSource As String, theIconIndex As Long) As Long
    Dim L As Long
    ' Get handle to active window (Classname XLMAIN).
    hWndXLMAIN = FindWindow("XLMAIN", Application.Caption)
    L = SetFocusAPI(hWndXLMAIN)
    hWndEXCEL9 = GetFocus()
    ' Getthe icon from the source
    hNewIcon = ExtractIcon(0, theIconSource, 0)
    SetNewIcon = hNewIcon                       ' return code from function
    If hNewIcon = Null Or hNewIcon = 1 Then
        ' 1 means invalid icon source, 0means no icons in source
        MsgBox "icon not found"
        GoTo TidyUp
    End If
    hPreviousXLMAINBigIcon = SendMessage(hWndXLMAIN, WM_SETICON, 1, hNewIcon)  ' Big Icon
    hPreviousXLMAINSmallIcon = SendMessage(hWndXLMAIN, WM_SETICON, 0, hNewIcon) ' Small Icon
    hPreviousEXCEL9BigIcon = SendMessage(hWndEXCEL9, WM_SETICON, 1, hNewIcon)  ' Big Icon
    hPreviousEXCEL9SmallIcon = SendMessage(hWndEXCEL9, WM_SETICON, 0, hNewIcon) ' Small Icon
TidyUp:
End Function
'
'   A routine to restore the standard Excel Icons
Sub restoreXLIcon()
    Dim hIcon As Long
    Dim lRetv As Long

    hIcon = SendMessage(hWndXLMAIN, WM_SETICON, True, hPreviousXLMAINBigIcon)     ' restore Big Icon
    hIcon = SendMessage(hWndXLMAIN, WM_SETICON, False, hPreviousXLMAINSmallIcon)  ' restore Small Icon
    hIcon = SendMessage(hWndEXCEL9, WM_SETICON, True, hPreviousEXCEL9BigIcon)     ' restore Big Icon
    hIcon = SendMessage(hWndEXCEL9, WM_SETICON, False, hPreviousEXCEL9SmallIcon)  ' restore Small Icon
    lRetv = DestroyIcon(hIcon)      ' I think this is necessary to free memory reserved in ExtractIcon

End Sub

'From Bill Manville (Re: Message)
'MVP - Microsoft Excel, Oxford, England



Attribute VB_Name = "Modulo3"
Option Explicit
Declare Function apiGetTempDir Lib "kernel32" Alias "GetTempPathA" (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long
Dim sPathSep As String
Dim sLastErro As String

Function fTempFolder()
'Returns Temp Folder Name
    Dim strNameFolder As String
    Dim vSize As Long
    strNameFolder = String$(255, 0)
    vSize = apiGetTempDir(255, strNameFolder)
    If vSize <> 0 Then
        fTempFolder = Left(strNameFolder, vSize + 1 * (Mid(strNameFolder, vSize, 1) = "\"))
    Else
        fTempFolder = ""
    End If
End Function

Function fCpapCfgTempFld()
'No XP, Vista e Win7 a pasta do Windows s|fffd| pode ser acessada com direitos administrativos. Ent|fffd|o levei para pasta temp.
    sPathSep = Application.PathSeparator
    fCpapCfgTempFld = ""
    If fTempFolder <> "" Then
        'Em Temp tenta a subpasta CpapCfgTemp, se n|fffd|o existir cria e se n|fffd|o tiver sucesso vai no raiz mesmo
        If VBA.FileSystem.Dir(fTempFolder & sPathSep & "CpapCfgTemp", vbDirectory) <> "" Then
            fCpapCfgTempFld = fTempFolder & sPathSep & "CpapCfgTemp"
        Else
            Err.Clear
            VBA.FileSystem.MkDir fTempFolder & sPathSep & "CpapCfgTemp"
            If Err.Number <> 0 Then
                fCpapCfgTempFld = fTempFolder
            Else
                fCpapCfgTempFld = fTempFolder & sPathSep & "CpapCfgTemp"
            End If
        End If
    End If
    If Len(fCpapCfgTempFld) < Len("c:\temp") Then fCpapCfgTempFld = CVErr(0)    'Evitar raiz
End Function

Private Sub tt()
    'MsgBox GetCpapTmpFldName(ThisWorkbook.Path)
    MsgBox fDirP_WinTmp(ThisWorkbook.Path)
End Sub

Function fDirP_WinTmp(DirP As String) As String    'Cria um DirP de arquivos de programa temp no Windows temp para executar de l|fffd| localmente.
    Dim sTempFolder As String
    Dim sCpapTmpFldName As String
    Dim DirPini As String
    Dim bCopyOk As Boolean
    sPathSep = Application.PathSeparator
    sTempFolder = fTempFolder()
    DirPini = DirP

    If Left(sTempFolder, 3) <> Left(DirP, 3) Then
        fDirP_WinTmp = DirP
        If Dir("M:\cpap\diversos\temporar.xlb") <> "" And Left(ThisWorkbook.Path, 3) = "O:\" Then Exit Function    'Na pasta para personalizar e montar pacote de m|fffd|q. conhecida, executar em DirP |fffd|nico conforme originalmente.
        If Dir("M:\cpap\diversos\temporar.xlb") <> "" Then If MsgBox("Rodar no DirP = DirPini n|fffd|o criar um DirP em temp?", vbOKCancel, "CPAP - Editar") = vbOK Then Exit Function

        'Criar pasta em temp para DirP de acordo com o nome do usu|fffd|rio ou aproveitar atualizando se j|fffd| existir. Se sucesso, o DirBD vai ficar separado no DirP original que passa a ser DirPini.
        On Error Resume Next
        sCpapTmpFldName = GetCpapTmpFldName(DirP)
        If VBA.FileSystem.Dir(sTempFolder & sPathSep & sCpapTmpFldName, vbDirectory) <> "" Then
            DirP = sTempFolder & sPathSep & sCpapTmpFldName
        Else
            VBA.FileSystem.MkDir sTempFolder & sPathSep & sCpapTmpFldName
            If Err.Number = 0 Then DirP = sTempFolder & sPathSep & sCpapTmpFldName Else sLastErro = "Erro ao criar pasta em Temp. (" & Err.Number & ": " & Err.Description & ")"
        End If
    End If

    bCopyOk = True    'Se n|fffd|o for necess|fffd|rio copiar, considera copiado com sucesso e retorna o mesmo DirP.
    If DirP <> DirPini Then    'Se o DirP for alterado, transfere os primeiros arquivos necess|fffd|rio at|fffd| jap. Antes cria o LeiameTmp.txt com info sobre a pasta tempor|fffd|ria.
        bCopyOk = WriteLeiameTmp(DirP & sPathSep & "LeiameTmp.txt")    'Se falhar nem adianta continuar, pois a pasta pode n|fffd|o ter todos direitos de acesso
        If bCopyOk Then CopyDirPiniVBA DirP & sPathSep & "Applicat.ico", DirPini, DirP    'Arquivo de |fffd|cone da janela no Windows, alerta se falhar, mas continua, pois n|fffd|o impede que o cpap funcione.
        If bCopyOk Then bCopyOk = CopyDirPiniVBA(DirP & sPathSep & "cpap_fun.pla", DirPini, DirP)
        If bCopyOk Then bCopyOk = CopyDirPiniVBA(DirP & sPathSep & "cpap_pri.mac", DirPini, DirP)
        If bCopyOk Then bCopyOk = CopyDirPiniVBA(DirP & sPathSep & "cpap_ex8.mac", DirPini, DirP)
        If bCopyOk Then bCopyOk = CopyDirPiniVBA(DirP & sPathSep & "cpap-cfg.mac", DirPini, DirP)
        If bCopyOk Then bCopyOk = CopyDirPiniVBA(DirP & sPathSep & "cpap_jap.mac", DirPini, DirP)
        If bCopyOk Then bCopyOk = CopyDirPiniVBA(DirP & sPathSep & "cpap_jap.pla", DirPini, DirP)
        If Val(Application.Version) >= 12 Then
            If bCopyOk Then bCopyOk = CopyDirPiniVBA(DirP & sPathSep & "cpap.xlam", DirPini, DirP)
            If bCopyOk Then    'Arquivo de |fffd|cones dos bot|fffd|es da Ribbon, alerta se falhar, mas continua, pois n|fffd|o impede que o cpap funcione o bot|fffd|o |fffd| exido ainda sem |fffd|cone.
                Dim sFilePng As String
                Dim i As Long
                Dim FilePngArr() As String
                sFilePng = Dir(DirPini & sPathSep & "*.png")
                Do While sFilePng <> ""
                    ReDim Preserve FilePngArr(i)
                    FilePngArr(i) = sFilePng
                    sFilePng = Dir()
                    i = i + 1
                Loop
                For i = 0 To UBound(FilePngArr())
                    CopyDirPiniVBA DirP & sPathSep & FilePngArr(i), DirPini, DirP
                Next
            End If
        End If
    End If

    If Err.Number = 0 And bCopyOk Then fDirP_WinTmp = DirP Else MsgBox "N|fffd|o foi poss|fffd|vel usar Window Temp para executar localmente com maior rapidez. " & sLastErro, vbInformation + vbOKOnly, "CPAP - Iniciando"
End Function

Private Function GetCpapTmpFldName(sDirP) As String    'Cria um nome |fffd|nico e diferencial a partir de DirP que pode ser identif. visualmente em temp pelo inicio e fim
    sPathSep = Application.PathSeparator
    GetCpapTmpFldName = Replace(sDirP, sPathSep, "_")
    GetCpapTmpFldName = Replace(GetCpapTmpFldName, ":", "")
    GetCpapTmpFldName = Replace(GetCpapTmpFldName, "__", "")    'Inicio caminho UNC em rede
    If Len(GetCpapTmpFldName) > 30 Then GetCpapTmpFldName = Left(GetCpapTmpFldName, 15) & CheckSum4(sDirP) & Right(GetCpapTmpFldName, 15)
End Function

Function CheckSum2(CheckString)
    Dim i
    Dim Ac
    Dim cs
    For i = 1 To Len(CheckString)
        Ac = Ac + (i * Asc(Mid(CheckString, i, 1)))
    Next
    cs = (Ac And &HFF0000) \ 65536    ' third byte
    cs = cs + (Ac And &HFF00&) \ 256  ' + second byte
    cs = (cs + (Ac And 255)) And 255  ' + low byte
    CheckSum2 = Right("0" & Hex(cs), 2)
End Function

Function CheckSum4(CheckString)
'Especial checksum com quatro caracteres
    CheckSum4 = CheckSum2(CheckString)
    CheckSum4 = CheckSum4 & CheckSum2("osso sod44dj uyfddgd dj" & CheckSum4)
End Function

Private Function CopyDirPiniVBA(sNomXL As String, sDirPini As String, sDirP As String) As Boolean    'Existe igual em cpapf.xla e ex8
    Dim sNomeXLini As String
    Dim bCopy As Boolean    ':If InStr(1, sNomXL, "mp.mac") > 0 Then Stop
    If InStr(1, sNomXL, Application.PathSeparator) = 0 Or LCase(Left(sNomXL, Len(sDirPini))) = LCase(sDirPini) Or LCase(Left(sNomXL, Len(sDirP))) <> LCase(sDirP) Then CopyDirPiniVBA = True: Exit Function   'N|fffd|o |fffd| necess|fffd|rio copiar para DirP se n|fffd|o vier com path explicitado ou pelo path o arquivo estiver sendo aberto diretamente de DipPini mesmo ou n|fffd|o estiver sendo aberto de DirP.
    sNomeXLini = sDirPini & Mid(sNomXL, Len(sDirP) + 1)
    On Error Resume Next
    Dim sRet As String
    sRet = Dir(sNomeXLini)    'Se gerar erro retornando vazio, indica rede com problema e n|fffd|o falta do arquivo.
    If (Err.Number = 0 And sRet = "") And Dir(sNomXL) = "" Then MsgBox "O arquivo " & sNomeXLini & " n|fffd|o foi encontrado. Reinicie o CPAP e, se o problema persistir, reinstale.", vbCritical, "CPAP|fffd| - Erro em CopyDirPiniVBA!": Exit Function
    If (Err.Number <> 0 And sRet = "") And Dir(sNomXL) <> "" Then MsgBox "O arquivo " & sNomeXLini & " n|fffd|o p|fffd|de ser acessado. Ser|fffd| usado o backup existente em " & sNomXL & ".", vbInformation, "CPAP|fffd| - Erro em CopyDirPiniVBA!": CopyDirPiniVBA = True: Exit Function    'Se a rede falhar usa o que est|fffd| em temp
    If Dir(sNomXL) = "" Then bCopy = True Else If FileLen(sNomeXLini) <> FileLen(sNomXL) Or FileDateTime(sNomeXLini) <> FileDateTime(sNomXL) Then bCopy = True    'Se n|fffd|o existir copiar e, se existir, comparar antes de copiar.
    If Not bCopy Then CopyDirPiniVBA = True: Exit Function
    Dim i As Long
    Do    'Copiar com retentativa
        If i > 0 Then MyWait 0.5
        Err.Clear: i = i + 1
        FileCopy sNomeXLini, sNomXL
    Loop While Err.Number <> 0 And i < 20
    If Err.Number <> 0 Then MsgBox Err.Number & ": " & Err.Description, vbCritical, "CPAP|fffd| - Erro em CopyDirPiniVBA!" Else CopyDirPiniVBA = True
End Function

Function WriteLeiameTmp(sFile As String) As Boolean
    Dim sFileDescr As String
    sFileDescr = "ESTA PASTA PODE SER DELETADA SEM CAUSAR PROBLEMAS!" & vbCrLf & vbCrLf _
            & "|fffd| uma pasta tempor|fffd|ria criada pelo CPAP para copiar arquivos da rede ou de um drive diferente do drive de instala|fffd||fffd|o do Windows." & vbCrLf _
            & "Os arquivos s|fffd|o copiados |fffd| medida que vai sendo necess|fffd|rio abrir, assim os arquivos de c|fffd|digos ser|fffd|o sempre abertos e carregados na mem|fffd|ria linkados entre si localmente, evitando instabilidade na execu|fffd||fffd|o se houver problemas ou dificuldades transit|fffd|rias na rede." & vbCrLf _
            & "Esta pasta at|fffd| poderia ser deletada automaticamente pelo CPAP ao final de cada execu|fffd||fffd|o, mas, sendo mantida, a inicializa|fffd||fffd|o da pr|fffd|xima execu|fffd||fffd|o se d|fffd| um pouco mais r|fffd|pida e o pr|fffd|prio Windows j|fffd| faz a limpeza de arquivos e pastas salvos aqui autom|fffd|tica e periodicamente."
    On Error GoTo ErrorHandler
    WriteLeiameTmp = True
    'If Dir(sFile) <> "" Then If FileLen(sFile) > 0 Then Exit Function    'Se j|fffd| existir e n|fffd|o estiver vazio, aproveita. Comentei porque talvez seja melhor sempre escrever assim sempre testa o acesso ao iniciar. Este tipo de escrita |fffd| sempre muito r|fffd|pido.
    Open sFile For Output As #1
    Print #1, sFileDescr    'Write #1, sFileDescr
    Close #1
    Exit Function
ErrorHandler:
    Close #1
    WriteLeiameTmp = False
    sLastErro = "Erro ao escrever o arquivo LeiameTmp.txt em Temp. (" & Err.Number & ": " & Err.Description & ")"
    'MyMsgBox IIf(IsPortg, "N|fffd|o foi poss|fffd|vel salvar a nova configura|fffd||fffd|o no arquivo INI em:", "It wasn't possible to save the new setting on INI file at:") & vbCrLf & sFile, 1, IIf(IsPortg, "Erro! " & Err.Description, "Error! " & Err.Description)
End Function

Sub MyWait(PauseSeg As Double)
    Dim Start
    Start = Timer
    Do While Timer < Start + PauseSeg
        DoEvents
        'Sleep 1    'Com isso o CPU Usage cai de 100% para seus 0 ou 2% normal
    Loop
End Sub
Attribute VB_Name = "Plan1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Plan2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Plan3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Plan4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Plan5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True



INQUEST-PP=macro
