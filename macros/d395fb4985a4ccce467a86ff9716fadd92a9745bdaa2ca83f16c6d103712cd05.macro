Attribute VB_Name = "ChartEvents"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

'Events for the embedded charts.
Public WithEvents CustomChart1 As Chart
Attribute CustomChart1.VB_VarHelpID = -1
Public WithEvents CustomChart2 As Chart
Attribute CustomChart2.VB_VarHelpID = -1
Public WithEvents SmithChart1 As Chart
Attribute SmithChart1.VB_VarHelpID = -1

Private Sub CustomChart1_Deactivate()
   CustomChart1_Activated = False
End Sub

'Custom XY chart.

Private Sub CustomChart1_MouseDown _
           (ByVal Button As Long, ByVal Shift As Long, _
            ByVal X As Long, ByVal Y As Long)

   Dim IDNum As Long
   Dim Arg1 As Long
   Dim Arg2 As Long

   'If Shift, Ctrl, or Alt key is down, ignore event and let chart element be selected.
   If Shift > 0 Then
      CustomChart1_Activated = True
      Exit Sub
   End If

   'Find out what chart element is under the mouse.
   With Sheets("Custom").ChartObjects(1).Chart
      .GetChartElement X, Y, IDNum, Arg1, Arg2
      '''IDtoStatusBar IDNum, Arg1, Arg2  'for debugging

      'Ignore event and allow selection for likely non-series
      'clickable items like exterior chart area, legend, axes.
      If IDNum = xlChartArea Or IDNum = xlChartTitle Or _
         IDNum = xlLegend Or IDNum = xlLegendEntry Or IDNum = xlLegendKey Or _
         IDNum = xlAxis Or IDNum = xlAxisTitle Then
         CustomChart1_Activated = True
         Exit Sub
      End If
      
      'Next step is to deselect whatever chart element was clicked and deactivate the
      'chart itself, both done by selecting a sheet cell.  However, under XL2007 this
      'causes a crash if the chart was already activated before this MouseDown event.
      'To avoid this, must 1) select the cell outside of this event proc, and 2) set
      'EnableEvents = False.  If either is not done, XL2007 will crash.  Schedule the
      'remainder of the MouseDown code to run as soon as this event proc exits.
      'Note OnTime proc must be in a standard module.  Single quotes to pass parms.
      
      If Val(Application.Version) < 12 Then
         'XL2003 and below, immediately clear the selection.  Avoids brief
         'display of "selection indicators" on whatever was clicked.
         'EnableEvents = False to avoid resetting CustomChart1_Activated flag.
         Application.EnableEvents = False
         Sheets("Custom").Range("D4").Activate
         Application.EnableEvents = True
      End If
             
      Application.OnTime Now, "'Process_CustomChart1_MouseDown " & _
            Button & ", " & IDNum & ", " & Arg1 & ", " & Arg2 & "'"
            
      'Xl2007, if right click must clear the "Format the Series" context menu.
      If Button <> 1 Then
         If Val(Application.Version) > 11 Then
            On Error Resume Next
            SendKeys "{ESC}", False
            If Err.Number <> 0 Then
               'VBA.SendKeys failed (Vista), use SendInput API instead.
               SendKey VK_Escape
            End If
            On Error GoTo 0
         End If
      End If
   End With
End Sub

Private Sub CustomChart1_Resize()
   ShowPixelSize
End Sub

'''Private Sub CustomChart1_BeforeDoubleClick(ByVal ElementID As Long, ByVal Arg1 As Long, ByVal Arg2 As Long, Cancel As Boolean)
'''   'Keep novice users out of trouble.
'''   'But:  Note that BeforeDoubleClick is fired ONLY if the MouseDown event, which happens first,
'''   'did NOT change the initial selection.  So if the MouseDown event allowed the selection, such
'''   'as for the ChartArea or Legend, then this BeforeDoubleClick event will fire and the action
'''   'will be canceled (Cancel=True).  However, if the MouseDown event changed the selection, such
'''   'as after a MouseDown on the primary trace, this BeforeDoubleClick will NOT fire.  The result
'''   'is that the sheet object [ActiveSheet.ChartObject(1)] is selected and the "Format Object"
'''   'dialog appears.  Haven't yet figured out how to prevent that.
'''   Cancel = True
'''   Sheets("Custom").Range("D4").Activate
'''End Sub

'Custom MiniSmith chart.

Private Sub CustomChart2_MouseDown _
           (ByVal Button As Long, ByVal Shift As Long, _
            ByVal X As Long, ByVal Y As Long)
            
   Dim IDNum As Long
   Dim Arg1 As Long
   Dim Arg2 As Long
   Dim Offset As Long
   
   'If Shift, Ctrl, or Alt key is down, ignore event and let chart element be selected.
   If Shift > 0 Then
      Exit Sub
   End If
   
   'Find out what chart element is under (or near) the mouse.
   With Sheets("Custom").ChartObjects(2).Chart
      .GetChartElement X, Y, IDNum, Arg1, Arg2
      
      'Ignore event and allow selection for likely non-series
      'clickable items like exterior chart area, legend, axes.
      If IDNum = xlChartArea Or IDNum = xlChartTitle Or _
         IDNum = xlLegend Or IDNum = xlLegendEntry Or IDNum = xlLegendKey Or _
         IDNum = xlAxis Or IDNum = xlAxisTitle Then
         Exit Sub
      End If
      
      'Allow click on RefZo box to change Zo.
      'Note:  Under XL2003 and below, clicking on a shape within a chart container
      'fires the chart Activate and MouseDown events.  However, under XL2007 and
      'above clicking on a shape within a chart container executes the macro
      'assigned to the shape (if any) without firing any chart events.  So this
      'code will never be called when under XL2007.
      If IDNum = xlShape Then
         Sheets("Custom").Range("D4").Activate
         ChangeZo
         Exit Sub
      End If
      
      'Next step is to deselect whatever chart element was clicked and deactivate the
      'chart itself, both done by selecting a sheet cell.  However, under XL2007 this
      'causes a crash if the chart was already activated before this MouseDown event.
      'To avoid this, must 1) select the cell outside of this event proc, and 2) set
      'EnableEvents = False.  If either is not done, XL2007 will crash.  Schedule the
      'remainder of the MouseDown code to run as soon as this event proc exits.
      'Note OnTime proc must be in a standard module.  Single quotes to pass parms.
      
      If Val(Application.Version) < 12 Then
         'XL2003 and below, immediately clear the selection.  Avoids brief
         'display of "selection indicators" on whatever was clicked.
         Sheets("Custom").Range("D4").Activate
      End If
             
      Application.OnTime Now, "'Process_CustomChart2_MouseDown " & _
            Button & ", " & IDNum & ", " & Arg1 & ", " & Arg2 & "'"
            
      'Xl2007, if right click must clear the "Format the Series" context menu.
      If Button <> 1 Then
         If Val(Application.Version) > 11 Then
            On Error Resume Next
            SendKeys "{ESC}", False
            If Err.Number <> 0 Then
               'VBA.SendKeys failed (Vista), use SendInput API instead.
               SendKey VK_Escape
            End If
            On Error GoTo 0
         End If
      End If
   End With
End Sub

'''Private Sub CustomChart2_BeforeDoubleClick(ByVal ElementID As Long, ByVal Arg1 As Long, ByVal Arg2 As Long, Cancel As Boolean)
'''   'See comment at CustomChart1_BeforeDoubleClick.
'''   Cancel = True
'''   Sheets("Custom").Range("D4").Activate
'''End Sub

'Smith (main) chart.

Private Sub SmithChart1_Deactivate()
   SmithChart1_Activated = False
   If ActiveWorkbook.Name = ThisWorkbook.Name Then  'skip if jumping to another workbook
      'Make sure the pseudo-chart-tip R|fffd|jX box is hidden.
      Sheets("Smith").ChartObjects(1).Chart.Shapes("boxSmithR+jX").Visible = False
      'XL2003 and below, also hide the "Where are my buttons?" box.
      '(Never shown in the first place for XL2007 and above.)
      Sheets("Smith").Shapes("boxSmithPrompt2").Visible = False
   End If
End Sub

Private Sub SmithChart1_MouseDown _
           (ByVal Button As Long, ByVal Shift As Long, _
            ByVal X As Long, ByVal Y As Long)
            
   Dim IDNum As Long
   Dim Arg1 As Long
   Dim Arg2 As Long
   Dim Offset As Long

   'If Shift, Ctrl, or Alt key is down, ignore event and let chart element be selected.
   If Shift > 0 Then
      SmithChart1_Activated = True
      If Val(Application.Version) < 12 Then
         'XL2003 and below, chart is brought to front on activate.
         'Show the "Where are my buttons?" box.
         Sheets("Smith").Shapes("boxSmithPrompt2").Visible = True
      End If
      Exit Sub
   End If
   
   'Find out what chart element is under (or near) the mouse.
   With Sheets("Smith").ChartObjects(1).Chart
      .GetChartElement X, Y, IDNum, Arg1, Arg2
      '''IDtoStatusBar IDNum, Arg1, Arg2  'for debugging
      
      'Ignore event and allow selection for likely non-series
      'clickable items like exterior chart area, legend, axes.
      If IDNum = xlChartArea Or IDNum = xlChartTitle Or _
         IDNum = xlLegend Or IDNum = xlLegendEntry Or IDNum = xlLegendKey Or _
         IDNum = xlAxis Or IDNum = xlAxisTitle Then
         SmithChart1_Activated = True
         If Val(Application.Version) < 12 Then
            'XL2003 and below, chart is brought to front on activate.
            'Show the "Where are my buttons?" box.
            Sheets("Smith").Shapes("boxSmithPrompt2").Visible = True
         End If
         Exit Sub
      End If
      
      'Allow click on RefZo box to change Zo.
      'Note:  Under XL2003 and below, clicking on a shape within a chart container
      'fires the chart Activate and MouseDown events.  However, under XL2007 and
      'above clicking on a shape within a chart container executes the macro
      'assigned to the shape (if any) without firing any chart events.  So this
      'code will never be called when under XL2007.
      If IDNum = xlShape Then
         Sheets("Smith").Range("D4").Activate
         ChangeZo
         Exit Sub
      End If
      
      'Next step is to deselect whatever chart element was clicked and deactivate the
      'chart itself, both done by selecting a sheet cell.  However, under XL2007 this
      'causes a crash if the chart was already activated before this MouseDown event.
      'To avoid this, must 1) select the cell outside of this event proc, and 2) set
      'EnableEvents = False.  If either is not done, XL2007 will crash.  Schedule the
      'remainder of the MouseDown code to run as soon as this event proc exits.
      'Note OnTime proc must be in a standard module.  Single quotes to pass parms.
      
      If Val(Application.Version) < 12 Then
         'XL2003 and below, immediately clear the selection.  Avoids brief
         'display of "selection indicators" on whatever was clicked.
         'EnableEvents = False to avoid resetting SmithChart1_Activated flag.
         Application.EnableEvents = False
         Sheets("Smith").Range("D4").Activate
         Application.EnableEvents = True
      End If
             
      Application.OnTime Now, "'Process_SmithChart1_MouseDown " & _
            Button & ", " & IDNum & ", " & Arg1 & ", " & Arg2 & "'"
            
      'Xl2007, if right click must clear the "Format the Series" context menu.
      If Button <> 1 Then
         If Val(Application.Version) > 11 Then
            On Error Resume Next
            SendKeys "{ESC}", False
            If Err.Number <> 0 Then
               'VBA.SendKeys failed (Vista), use SendInput API instead.
               SendKey VK_Escape
            End If
            On Error GoTo 0
         End If
      End If
   End With
End Sub

Private Sub SmithChart1_Resize()
   ShowPixelSize
End Sub

Private Sub SmithChart1_MouseMove _
           (ByVal Button As Long, ByVal Shift As Long, _
            ByVal X As Long, ByVal Y As Long)
            
   Dim IDNum As Long
   Dim Arg1 As Long
   Dim Arg2 As Long
   
   'Note: Chart must be activated for MouseMove event to fire.
   'Use  ActiveSheet.ChartObjects(1).Activate  beforehand,
   'or click inside the chart border.
   '
   'For converting MouseMove x/y to .Shapes x/y, see:
   '  http://www.informit.com/articles/article.aspx?p=374498&seqNum=2
   '  http://www.informit.com/articles/article.aspx?p=366892&seqNum=2
   
   With Sheets("Smith").ChartObjects(1).Chart
      .GetChartElement X, Y, IDNum, Arg1, Arg2
      If (IDNum = xlSeries And Arg1 >= 18 And Arg1 <= 22) Or _
         (IDNum = xlDataLabel And Arg1 >= 1 And Arg1 <= 5) Then
         
         'Mouse is on Primary, Snapshot, or an interior DataLabel.
         Dim dZoom As Double
         Dim dXVal As Double
         Dim dYVal As Double
         Dim dPixelSize As Double
         Dim CALeft As Double, CATop As Double
         Dim Rsnap As Double, Xsnap As Double, Zo As Double
         Dim Denom As Double, RhoReal As Double, RhoImag As Double, RhoMag As Double
   
         dZoom = ActiveWindow.Zoom / 100
         dPixelSize = 72 / PixelsPerInch(0)  'PointsPerPixel
         dXVal = X * dPixelSize / dZoom
         dYVal = Y * dPixelSize / dZoom
         'XL2007.  Under XL2007, shapes on a chart use the same coordinates
         'as shapes on the sheet, but under earlier versions shapes on a chart
         'are positioned relative to the Chart container.
         If Val(Application.Version) <= 11 Then
            CALeft = .ChartArea.Left
            CATop = .ChartArea.Top
         Else
            CALeft = 0
            CATop = 0
         End If
         dXVal = dXVal - CALeft
         dYVal = dYVal - CATop

         Select Case Arg1
            Case 18  'Primary
               RhoReal = [RhoRe].Offset(Arg2).Value  'don't need to compute Rs or Xs,
               RhoImag = [RhoIm].Offset(Arg2).Value  '   but used below for positioning
               .Shapes("boxSmithR+jX").TextFrame.Characters.Text = _
                     "(Zo=" & [Refzo].Text & ")  R|fffd|jX=" & vbLf & _
                     "(" & [Rs].Offset(Arg2).Text & _
                     ", " & [Xs].Offset(Arg2).Text & ")"
            Case 19 To 22  'Snapshots
               Select Case Arg1
                  Case 19  'Snap 1
                     Zo = Range("O5").Value
                     RhoReal = Range("M1").Offset(Arg2).Value
                     RhoImag = Range("N1").Offset(Arg2).Value
                  Case 20  'Snap 2
                     Zo = Range("V5").Value
                     RhoReal = Range("T1").Offset(Arg2).Value
                     RhoImag = Range("U1").Offset(Arg2).Value
                  Case 21  'Snap 3
                     Zo = Range("AC5").Value
                     RhoReal = Range("AA1").Offset(Arg2).Value
                     RhoImag = Range("AB1").Offset(Arg2).Value
                  Case 22  'Snap 4
                     Zo = Range("AJ5").Value
                     RhoReal = Range("AH1").Offset(Arg2).Value
                     RhoImag = Range("AI1").Offset(Arg2).Value
               End Select
               RhoMag = Sqr(RhoReal ^ 2 + RhoImag ^ 2)
               Denom = 1 + RhoMag ^ 2 - 2 * RhoReal
               If Denom <> 0 Then Rsnap = (1 - RhoMag ^ 2) / Denom * Zo Else Rsnap = 99999.99
               If Denom <> 0 Then Xsnap = (2 * RhoImag) / Denom * Zo Else Xsnap = 0
               .Shapes("boxSmithR+jX").TextFrame.Characters.Text = _
                     "(Zo=" & CStr(Zo) & ")  R|fffd|jX=" & vbLf & _
                     "(" & Format(Rsnap, "0.00") & _
                     ", " & Format(Xsnap, "0.00") & ")"
            Case Else
               'DataLabel.  Always in front of series, so can't use Arg2.
               'Deduce Rho from DataLabel posiiton instead.
               RhoReal = .Axes(xlCategory).MinimumScale + _
                  (.Axes(xlCategory).MaximumScale - _
                     .Axes(xlCategory).MinimumScale) * _
                  (X * dPixelSize / dZoom - _
                     (.PlotArea.InsideLeft + CALeft)) / _
                     .PlotArea.InsideWidth
               RhoImag = .Axes(xlValue).MinimumScale + _
                  (.Axes(xlValue).MaximumScale - _
                     .Axes(xlValue).MinimumScale) * _
                  (1 - (Y * dPixelSize / dZoom - _
                     (.PlotArea.InsideTop + CATop)) / _
                     .PlotArea.InsideHeight)
               RhoMag = Sqr(RhoReal ^ 2 + RhoImag ^ 2)
               If RhoMag <= 1 Then  'not corrupted by scrolling, see below
                  Denom = 1 + RhoMag ^ 2 - 2 * RhoReal
                  Zo = [Refzo].Value
                  If Denom <> 0 Then Rsnap = (1 - RhoMag ^ 2) / Denom * Zo Else Rsnap = 99999.99
                  If Denom <> 0 Then Xsnap = (2 * RhoImag) / Denom * Zo Else Xsnap = 0
                  .Shapes("boxSmithR+jX").TextFrame.Characters.Text = _
                        "(Zo=" & CStr(Zo) & ")  R|fffd|jX=" & vbLf & _
                        "(" & Format(Rsnap, "0.00") & _
                        ", " & Format(Xsnap, "0.00") & ")"
               Else
                  .Shapes("boxSmithR+jX").TextFrame.Characters.Text = _
                        "R|fffd|jX info" & vbLf & _
                        "not available" & vbLf & _
                        "for this point"
               End If
         End Select
            
         With .Shapes("boxSmithR+jX")
            'If sheet has been scrolled (up/down or left/right), the
            '.ChartArea.Left and .ChartArea.Top properties from above
            'will be garbage.  Just leave Shape .Left and .Top as-is.
            On Error Resume Next
            If RhoReal < 0 Then  'is mouse on left or right side?
               .Left = dXVal + 10
            Else
               .Left = dXVal - 10 - .Width
            End If
            If RhoImag > 0 Then  'is mouse on top or bottom half?
               .Top = dYVal
            Else
               .Top = dYVal - .Height
            End If
            On Error GoTo 0
            .Visible = True
         End With
         
      Else
         'Mouse is not on Primary, Snapshot, or an interior DataLabel.
         .Shapes("boxSmithR+jX").Visible = False
      End If
   End With
End Sub

Private Sub SendKey(VKcode As Byte, _
                    Optional KeyDn As Boolean = True, _
                    Optional KeyUp As Boolean = True)
   Dim KInput(0 To 1) As KEYBDINPUT
   Dim i As Integer
   
   'Build keyboard input.  See:
   'http://msdn.microsoft.com/en-us/library/ms646267(VS.85).aspx
   'Arrows are "extended" keys, must set dwFlags=KEYEVENTF_EXTENDEDKEY
   'See http://vb.mvps.org/samples/SendInput/ for a 1:1 replacement for VBA.SendKeys.
   If KeyDn Then
      KInput(0).dwType = INPUT_KEYBOARD
      KInput(0).wVK = VKcode
      KInput(0).dwFlags = KEYEVENTF_KEYDN
   End If
   If KeyUp Then
      If KeyDn Then i = 1 Else i = 0
      KInput(i).dwType = INPUT_KEYBOARD
      KInput(i).wVK = VKcode
      KInput(i).dwFlags = KEYEVENTF_KEYUP
   End If
   
   'Send to foreground window.
   SendInput i + 1, KInput(0), Len(KInput(0))
End Sub

'''Private Sub SmithChart1_BeforeDoubleClick(ByVal ElementID As Long, ByVal Arg1 As Long, ByVal Arg2 As Long, Cancel As Boolean)
'''   'See comment at CustomChart1_BeforeDoubleClick.
'''   Cancel = True
'''   Sheets("Smith").Range("D4").Activate
'''End Sub

'''Private Sub IDtoStatusBar(IDNum As Long, Arg1 As Long, Arg2 As Long)
'''   'For debugging, write info to status bar.
'''   Dim sElement As String
'''   Dim sArg As String
'''   Select Case IDNum
'''       Case xlChartArea
'''           sElement = "Chart Area"
'''       Case xlChartTitle
'''           sElement = "Chart Title"
'''       Case xlPlotArea
'''           sElement = "Plot Area"
'''       Case xlLegend
'''           sElement = "Legend"
'''       Case xlFloor
'''           sElement = "Floor"
'''       Case xlWalls
'''           sElement = "Walls"
'''       Case xlCorners
'''           sElement = "Corners"
'''       Case xlDataTable
'''           sElement = "Data Table"
'''       Case xlSeries
'''           sElement = "Series " & Arg1
'''           If Arg2 > 0 Then sArg = ", Point " & Arg2
'''       Case xlDataLabel
'''           sElement = "Data Label"
'''           sArg = ", Series " & Arg1
'''           If Arg2 > 0 Then sArg = sArg & ", Point " & Arg2
'''       Case xlTrendline
'''           sElement = "Trendline"
'''           sArg = ", Series " & Arg1 & ", Trendline " & Arg2
'''       Case xlErrorBars
'''           sElement = "Error Bars"
'''           sArg = ", Series " & Arg1
'''       Case xlXErrorBars
'''           sElement = "X Error Bars"
'''           sArg = ", Series " & Arg1
'''       Case xlYErrorBars
'''           sElement = "Y Error Bars"
'''           sArg = ", Series " & Arg1
'''       Case xlLegendEntry
'''           sElement = "Legend Entry"
'''           sArg = ", Series " & Arg1
'''       Case xlLegendKey
'''           sElement = "Legend Key"
'''           sArg = ", Series " & Arg1
'''       Case xlAxis
'''           sElement = IIf(Arg1 = 1, "Primary ", "Secondary ")
'''           sElement = sElement & IIf(Arg2 = 1, "Category ", "Value ")
'''           sElement = sElement & "Axis"
'''       Case xlMajorGridlines
'''           sElement = IIf(Arg1 = 1, "Primary ", "Secondary ")
'''           sElement = sElement & IIf(Arg2 = 1, "Category ", "Value ")
'''           sElement = sElement & "Major Gridlines"
'''       Case xlMinorGridlines
'''           sElement = IIf(Arg1 = 1, "Primary ", "Secondary ")
'''           sElement = sElement & IIf(Arg2 = 1, "Category ", "Value ")
'''           sElement = sElement & "Minor Gridlines"
'''       Case xlAxisTitle
'''           sElement = IIf(Arg1 = 1, "Primary ", "Secondary ")
'''           sElement = sElement & IIf(Arg2 = 1, "Category ", "Value ")
'''           sElement = sElement & "Axis Title"
'''       ''Case xlDisplayUnitLabel
'''           sElement = IIf(Arg1 = 1, "Primary ", "Secondary ")
'''           sElement = sElement & IIf(Arg2 = 1, "Category ", "Value ")
'''           sElement = sElement & "Axis Display Unit Label"
'''       Case xlUpBars
'''           sElement = "Up Bars"
'''           sArg = ", Group Index " & Arg1
'''       Case xlDownBars
'''           sElement = "Down Bars"
'''           sArg = ", Group Index " & Arg1
'''       Case xlSeriesLines
'''           sElement = "Series Lines"
'''           sArg = ", Group Index " & Arg1
'''       Case xlHiLoLines
'''           sElement = "High-Low Lines"
'''           sArg = ", Group Index " & Arg1
'''       Case xlDropLines
'''           sElement = "Drop Lines"
'''           sArg = ", Group Index " & Arg1
'''       Case xlRadarAxisLabels
'''           sElement = "Radar Axis Labels"
'''           sArg = ", Group Index " & Arg1
'''       Case xlShape
'''           sElement = "Shape"
'''           sArg = ", Shape Number " & Arg1
'''       Case xlNothing
'''           sElement = "Nothing"
'''   End Select
'''   Application.StatusBar = sElement & sArg
'''   Debug.Print sElement & sArg
'''End Sub
Attribute VB_Name = "ChartProcs"
Option Compare Text  ' "AAA" = "aaa"
Option Explicit
Option Private Module
        
'Must explicitly declare chart events class module to use events for embedded charts.
Dim myClassModule1 As New ChartEvents

'Custom XY chart.

Public Sub Process_CustomChart1_MouseDown(Button As Long, IDNum As Long, _
                                          Arg1 As Long, Arg2 As Long)

   'Deselect whatever chart element was clicked along with the chart itself.
   'XL2007:  If the chart was already activated *before* this MouseDown event
   '(perhaps to show chart tips under XL2007), this *MUST* be done outside the
   'MouseDown event proc and *MUST* be done with EnableEvents = False.
   'Note:  Under XL2003 and below, clicking on a shape within a chart container
   'fires the chart Activate and MouseDown events.  However, under XL2007 and
   'above clicking on a shape within a chart container executes the macro
   'assigned to the shape (if any) without firing any chart events.
   Application.EnableEvents = False
   
   Sheets("Custom").Range("D4").Activate
   
   'Process clicks on any series.  Primary, Secondary, ZeroLine, and RefLines all
   'share the same Freq axis and number of points.  For any visible Snapshot
   'series probably okay also, but do a brief check to make sure the Snapshot doesn't
   'represent a completely different frequency range.
   If IDNum = xlSeries Then
      If (Arg1 = 2 Or Arg1 = 3 Or Arg1 = 5 Or Arg1 = 6) And _
         (Application.Index(Sheets("Custom").ChartObjects(1).Chart. _
               SeriesCollection(Arg1).XValues, Arg2) <> _
         [TCFreq].Offset(Arg2)) Then
         MsgBox "The frequency range or step size of this Snapshot does not match" & vbLf & _
                "the Primary trace.  Click on the Primary trace to set the marker.", _
                vbOKOnly, "Mismatched Range and/or Step Size"
      ElseIf Button = 1 Then  'left click
         If [MarkFreqIndex].Value = -1 Then  '#1 markers not up
            [MarkFreqIndex].Value = Arg2
            OpenFreqMarker1
         Else
            [MarkFreqIndex].Value = Arg2
            PositionMarkers "Marker1", Arg2
         End If
      Else  'right click
         If [Mark2FreqIndex].Value = -1 Then  '#2 markers not up
            [Mark2FreqIndex].Value = Arg2
            OpenFreqMarker2
         Else
            [Mark2FreqIndex].Value = Arg2
            PositionMarkers "Marker2", Arg2
         End If
      End If
   End If
   
   'If the chart was already active before this MouseDown (perhaps to show
   'chart tips under XL2007), reactivate.
   If CustomChart1_Activated Then
      ActiveSheet.ChartObjects(1).Activate
   End If
   
   Application.EnableEvents = True
End Sub

'Custom MiniSmith chart.

Public Sub Process_CustomChart2_MouseDown(Button As Long, IDNum As Long, _
                                          Arg1 As Long, Arg2 As Long)

   'Deselect whatever chart element was clicked along with the chart itself.
   'See notes above.
   Application.EnableEvents = False
   
   Sheets("Custom").Range("D4").Activate
   
   'Process clicks only on the Primary series.
   If IDNum = xlSeries And Arg1 = 18 Then
      If Button = 1 Then  'left click
         If [MarkFreqIndex].Value = -1 Then  '#1 markers not up
            [MarkFreqIndex].Value = Arg2
            OpenFreqMarker1
         Else
            [MarkFreqIndex].Value = Arg2
            PositionMarkers "Marker1", Arg2
         End If
      Else  'right click
         If [Mark2FreqIndex].Value = -1 Then  '#2 markers not up
            [Mark2FreqIndex].Value = Arg2
            OpenFreqMarker2
         Else
            [Mark2FreqIndex].Value = Arg2
            PositionMarkers "Marker2", Arg2
         End If
      End If
   ElseIf IDNum = xlSeries And Arg1 >= 19 And Arg1 <= 22 Then
      MsgBox "On the Smith charts, markers may be placed only on the" & vbLf & _
             "Primary (default color red) trace, not on Snapshot traces.", _
             vbOKOnly, "Primary Trace Only"
   End If
   
   Application.EnableEvents = True
End Sub

'Smith (main) chart.

Public Sub Process_SmithChart1_MouseDown(Button As Long, IDNum As Long, _
                                          Arg1 As Long, Arg2 As Long)

   'Deselect whatever chart element was clicked along with the chart itself.
   'See notes above.
   Application.EnableEvents = False
   
   Sheets("Smith").Range("D4").Activate
   
   'Process clicks only on the Primary series.
   If IDNum = xlSeries And Arg1 = 18 Then
      If Button = 1 Then  'left click
         If [MarkFreqIndex].Value = -1 Then  '#1 markers not up
            [MarkFreqIndex].Value = Arg2
            OpenFreqMarker1
         Else
            [MarkFreqIndex].Value = Arg2
            PositionMarkers "Marker1", Arg2
         End If
      Else  'right click
         If [Mark2FreqIndex].Value = -1 Then  '#2 markers not up
            [Mark2FreqIndex].Value = Arg2
            OpenFreqMarker2
         Else
            [Mark2FreqIndex].Value = Arg2
            PositionMarkers "Marker2", Arg2
         End If
      End If
   ElseIf IDNum = xlSeries And Arg1 >= 19 And Arg1 <= 22 Then
      MsgBox "On the Smith charts, markers may be placed only on the" & vbLf & _
             "Primary (default color red) trace, not on Snapshot traces.", _
             vbOKOnly, "Primary Trace Only"
   End If
   
   'If the chart was already active before this MouseDown (perhaps to show
   'R|fffd|jX pseudo chart tips), reactivate.
   If SmithChart1_Activated Then
      ActiveSheet.ChartObjects(1).Activate
   End If
   
   Application.EnableEvents = True
End Sub

Public Sub OpenFreqMarker1()
   
   Application.ScreenUpdating = False
   With Sheets("Custom")
      .Shapes("spnMarker1").Visible = True  'spinner
      .Shapes("boxM1").Visible = True         'spinner label
      .Shapes("boxFmarkcolor").Visible = True
      .Shapes("Marker1OnScreen").Visible = True  'check box
      .Shapes("fbtnFreqKHz").Visible = True  'Freq KHz/Hz button
      .Range("A30:A31").EntireRow.Hidden = False  'data table
      .Range("A35").EntireRow.Hidden = False
      .Range("A37").EntireRow.Hidden = False
      .Range("A38").EntireRow.Hidden = True  'initial prompt to set M1
      With .ChartObjects(1).Chart
         'Vertical line .Top and .Height should never change, just make sure.
         .Shapes("Marker1").Top = .PlotArea.InsideTop
         .Shapes("Marker1").Height = .PlotArea.InsideHeight
         .Shapes("Marker1Shadow").Top = .PlotArea.InsideTop - .Shapes("Marker1Shadow").Height
      End With
      With .Shapes("boxCustomPrompt")
         'Show highlighted prompt boxes with user instructions.
         .TextFrame.Characters.Text = _
            "Click new point or use" & vbLf & _
            "spinner.  Click outside" & vbLf & _
            "or press ESC to remove."
         .Fill.ForeColor.SchemeColor = 65  'white
         '''.Line.Weight = 2
         .Line.ForeColor.SchemeColor = 10  'red
      End With
   End With
   With Sheets("Smith")
      If .Visible Then  'only do in "R" mode
         .Shapes("spnsMarker1").Visible = True  'spinner
         .Shapes("boxM1").Visible = True        'spinner label
         .Shapes("boxFmarkcolor").Visible = True
         .Shapes("Marker1OnScreen").Visible = True   'check box
         .Shapes("fbtnFreqKHz").Visible = True  'Freq KHz/Hz button
         .Range("A79:A80").EntireRow.Hidden = False  'data table
         .Range("A84").EntireRow.Hidden = False
         .Range("A86").EntireRow.Hidden = False
         .Range("A87").EntireRow.Hidden = True  'initial prompt to set M1
         With .Shapes("boxSmithPrompt")
            .TextFrame.Characters.Text = _
               "Click new point or use" & vbLf & _
               "spinner.  Click outside" & vbLf & _
               "or press ESC to remove."
            .Fill.ForeColor.SchemeColor = 65  'white
            '''.Line.Weight = 2
            .Line.ForeColor.SchemeColor = 10  'red
         End With
         Sheets("Custom").Shapes("boxCustomPrompt2").Visible = True  '"synchronized" prompt
      End If
   End With
   Application.StatusBar = "Marker(s) in use"  'avoid flashing while markers are up
   Application.ScreenUpdating = True
   
   'Turn on Esc key, used to close markers.
   Application.OnKey "{Esc}", "CloseFreqMarkers"
   
   'Set initial position.
   PositionMarkers "Marker1", CLng([MarkFreqIndex])
   
   'Info message if first time.
   If [ShowMarkerMsg] Then
      Application.ScreenUpdating = True  'force display of markers just built
      MsgBox "The frequency markers (vertical line on the Custom XY" & vbLf & _
             "chart, large dots on the Smith charts) are synchronized." & vbLf & _
             "To select a different frequency click a point on any chart" & vbLf & _
             "or use the spinner." & vbLf & vbLf & _
             "To remove the markers press the Esc key or" & vbLf & _
             "click anywhere outside the chart outlines." & vbLf & vbLf & _
             "This message will not appear again.", , _
             "To move the markers ..."
      [ShowMarkerMsg].Value = False
   End If
End Sub

Public Sub PositionMarkers(strMarkerName As String, Arg2 As Long)
   'strMarkerName will be "Marker1" or "Marker2".
   'Arg2 is the Marker frequency index [MarkFreqIndex] or [Mark2FreqIndex],
   'set by MouseDown chart events and by spinner.
   Dim MarkerText As String
   Dim PA As PlotArea
   
   'Build marker text box text, if requested for either Custom or Smith for this marker.
   '(was  "Freq:   " & [TCFreq].Offset(Arg2).Text & vbLf & _  )
   If Sheets("Custom").CheckBoxes(strMarkerName & "OnScreen").Value = xlOn Or _
      Sheets("Smith").CheckBoxes(strMarkerName & "OnScreen").Value = xlOn Then
      If Sheets("Smith").Visible Then  'in "R" or "RT" or "FF" mode
         MarkerText = _
            IIf([TCFreq] = "Freq (MHz)", "Freq:     ", "Len:      ") & Format([TCFreq].Offset(Arg2).Value, "0.000") & vbLf & _
            "SWR:      " & [SWR].Offset(Arg2).Text & vbLf & _
            "Rs:         " & [Rs].Offset(Arg2).Text & vbLf & _
            "Xs:         " & [Xs].Offset(Arg2).Text & vbLf & _
            "Zmag:    " & [Zmag].Offset(Arg2).Text & vbLf & _
            "Theta:    " & [Theta].Offset(Arg2).Text & vbLf & _
            "Rho:      " & [Rho].Offset(Arg2).Text & vbLf & _
            "RL:         " & [RetLoss].Offset(Arg2).Text & vbLf & _
            "Phase:   " & [Phase].Offset(Arg2).Text
      ElseIf Sheets("Data").Range("B6") = "|Zo|" Then  'in "TL" mode
         MarkerText = _
            "Freq:    " & Format([TCFreq].Offset(Arg2).Value, "0.000") & vbLf & _
            "|Zo|:   " & [SWR].Offset(Arg2).Text & vbLf & _
            "Ro:   " & [Rs].Offset(Arg2).Text & vbLf & _
            "Xo:   " & [Xs].Offset(Arg2).Text & vbLf & _
            "VF:   " & [Zmag].Offset(Arg2).Text & vbLf & _
            "Loss:     " & [Theta].Offset(Arg2).Text & vbLf & _
            "/100ft:        " & [Rho].Offset(Arg2).Text & vbLf & _
            "/100m:        " & [RetLoss].Offset(Arg2).Text & vbLf & _
            "|S21|:        " & [Phase].Offset(Arg2).Text
      Else  'in "T" or "G" mode
         MarkerText = _
            "Freq:     " & Format([TCFreq].Offset(Arg2).Value, "0.000") & vbLf & _
            "TL:      " & [SWR].Offset(Arg2).Text & vbLf & _
            "TL (dB):   " & [Rs].Offset(Arg2).Text & vbLf & _
            IIf([PrevMode] = "T", "Phase:  ", "Delay:  ") & [Xs].Offset(Arg2).Text
      End If
      MarkerText = LeftRightAlign(MarkerText)
   End If
   
   'Set marker positions.
   Dim XscaleMin As Double, XscaleMax As Double, ScaleType As Long
   Dim MFreq As Double
   Dim MLeft As Single
   With Sheets("Custom").ChartObjects(1).Chart
      XscaleMin = .Axes(xlCategory).MinimumScale
      XscaleMax = .Axes(xlCategory).MaximumScale
      'XL2007: ScaleType property cannot be used on Category axis if
      'the chart has a secondary Value axis.  Use alternate method to
      'determine if existing Category scale is Log or Linear.
      If .Axes(xlCategory).CrossesAt < 0 Then
         ScaleType = xlLinear
      Else
         ScaleType = xlLogarithmic
      End If
      MFreq = [TCFreq].Offset(Arg2).Value
      Set PA = .PlotArea
      'Line
      With .Shapes(strMarkerName)
         .Width = 0  'make sure line stays vertical
         If ScaleType = xlLinear Then
            MLeft = PA.InsideLeft + _
               (MFreq - XscaleMin) * PA.InsideWidth / (XscaleMax - XscaleMin)
         Else
            MLeft = PA.InsideLeft + _
               (Application.Log10(MFreq) - Application.Log10(XscaleMin)) * PA.InsideWidth / _
                  (Application.Log10(XscaleMax) - Application.Log10(XscaleMin))
         End If
         .Left = MLeft
         .Visible = True  'don't show until position is set
      End With
      With .Shapes(strMarkerName & "Shadow")
         .Left = MLeft - .Width / 2
         .Visible = True  'don't show until position is set
      End With
      'Text, if currently requested.
      If Sheets("Custom").CheckBoxes(strMarkerName & "OnScreen").Value = xlOn Then
         With .Shapes(strMarkerName & "Text")
            .TextFrame.Characters.Text = MarkerText
            .Left = MLeft + 10
            .Top = PA.InsideTop + PA.InsideHeight / 2 - .Height / 2
            'Adjust if outside chart area.
            If (.Left + .Width) > (Sheets("Custom").ChartObjects(1).Width - 5) Then
               .Left = MLeft - .Width - 10
            End If
            .Visible = True
         End With
      End If
   End With
   
   With Sheets("Smith")
      'Dot markers are regular series, only need to worry about data labels.
      If .Visible Then  'only do in "R" mode
         If .CheckBoxes(strMarkerName & "OnScreen").Value = xlOn Then
            'CStr() needed for XL2007.
            With .ChartObjects(1).Chart.SeriesCollection(CStr(strMarkerName)).Points(1)
               'Build a DataLabel for the Marker text.
               On Error Resume Next  'sometimes fails if focus is on ActiveX control
               If .HasDataLabel = False Then
                  .HasDataLabel = True
                  .ApplyDataLabels
               End If
               With .DataLabel
                  .Border.LineStyle = xlAutomatic
                  .Interior.ColorIndex = 19  'pale yellow
                  .Font.FontStyle = "Bold"
                  .Font.Size = 8
                  ''.NumberFormatLinked = False
                  ''.NumberFormat = "General"
                  .HorizontalAlignment = xlCenter
                  ''.VerticalAlignment = xlCenter
                  .Text = MarkerText
                  'Set centered to right of marker if possible, else left of marker.
                  .Position = xlLabelPositionRight
                  If .Left > 300 Then .Position = xlLabelPositionLeft
               End With
               '''If Err.Number > 0 Then MsgBox "Unable to set text"
            End With
         End If
         
         If strMarkerName = "Marker1" Then
            'Set hidden Smith sheet cell to SWR for possible auto-size of circle.
            'Only set if needed, otherwise causes needless recalculation.
            If [AutoSWR] = True Then .Range("BU9").Value = [SWR].Offset(Arg2)
         End If
      End If  'in "R" mode
   End With
End Sub

Public Sub OpenFreqMarker2()
   
   Application.ScreenUpdating = False
   With Sheets("Custom")
      .Shapes("spnMarker2").Visible = True  'spinner
      .Shapes("boxM2").Visible = True         'spinner label
      .Shapes("fbtnZoomM1M2").Visible = True  'Zoom M1 to M2 button
      .Shapes("boxFmark2color").Visible = True
      .Shapes("Marker2OnScreen").Visible = True  'check box
      .Range("A32:A33").EntireRow.Hidden = False  'data table
      .Range("A35").EntireRow.Hidden = True
      .Range("A36").EntireRow.Hidden = False
      With .ChartObjects(1).Chart
         'Vertical line .Top and .Height should never change, just make sure.
         .Shapes("Marker2").Top = .PlotArea.InsideTop
         .Shapes("Marker2").Height = .PlotArea.InsideHeight
         .Shapes("Marker2Shadow").Top = .PlotArea.InsideTop - .Shapes("Marker2Shadow").Height
      End With
   End With
   With Sheets("Smith")
      If .Visible Then  'only do in "R" mode
         .Shapes("spnsMarker2").Visible = True  'spinner
         .Shapes("boxM2").Visible = True          'spinner label
         .Shapes("boxFmark2color").Visible = True
         .Shapes("Marker2OnScreen").Visible = True  'check box
         .Range("A81:A82").EntireRow.Hidden = False  'data table
         .Range("A84").EntireRow.Hidden = True
         .Range("A85").EntireRow.Hidden = False
      End If
   End With
   Application.ScreenUpdating = True
   
   'Make sure Marker1 is up as well.
   If [MarkFreqIndex] = -1 Then
      [MarkFreqIndex] = 1  'left-most frequency
      OpenFreqMarker1
      Sheets("Custom").Range("A35").EntireRow.Hidden = True
      Sheets("Smith").Range("A84").EntireRow.Hidden = True
   End If
   
   'Set initial position.
   PositionMarkers "Marker2", CLng([Mark2FreqIndex])
End Sub

Public Sub CloseFreqMarkers()
   'This proc is called when the Esc key is pressed, when the user clicks outside
   'the chart (by Worksheet_SelectionChange event), or when a new data file is loaded.
   Dim CurSht As String
   Dim ScrUpdating As Boolean, EnEvents As Boolean
   
   'Avoid entering break mode if the Esc key is pressed twice rapidly.
   'EnableCancelKey property is automatically set back to xlInterrupt when the proc ends.
   Application.EnableCancelKey = xlDisabled
   
   If [MarkFreqIndex] = -1 Then Exit Sub  'already closed, quit now
   
   ScrUpdating = Application.ScreenUpdating  'save current status
   EnEvents = Application.EnableEvents
   Application.ScreenUpdating = False
   Application.EnableEvents = False
   CurSht = ActiveSheet.Name
   
   If TypeName(Selection) = "Legend" Then
      'Allow user to drag legend and then clear selection without closing markers, if any.
      ActiveSheet.Range("D4").Activate
      If ActiveSheet.Name = "Custom" Then
         CustomChart1_Activated = False
      Else
         SmithChart1_Activated = False
      End If
      GoTo Done
   End If
   
   'Can't hide ActiveX control if it has the focus, can't change the focus if
   'the sheet is not active, so make each sheet active and then return to original.
   With Sheets("Custom")
      .Activate
      .Range("D4").Activate
      CustomChart1_Activated = False
      With .ChartObjects(1).Chart
         .Shapes("Marker1").Visible = False
         .Shapes("Marker1Shadow").Visible = False
         .Shapes("Marker1Text").Visible = False
         .Shapes("Marker2").Visible = False
         .Shapes("Marker2Shadow").Visible = False
         .Shapes("Marker2Text").Visible = False
      End With
      .Shapes("spnMarker1").Visible = False  'spinners
      .Shapes("spnMarker2").Visible = False
      .Shapes("boxM1").Visible = False  'spinner labels
      .Shapes("boxM2").Visible = False
      .Shapes("fbtnZoomM1M2").Visible = False  'Zoom M1 to M2 button
      .Shapes("boxFmarkcolor").Visible = False
      .Shapes("boxFmark2color").Visible = False
      .Shapes("Marker1OnScreen").Visible = False  'check boxes
      .Shapes("Marker2OnScreen").Visible = False
      .Shapes("fbtnFreqKHz").Visible = False  'Freq KHz/Hz button
      .Range("A30:A33").EntireRow.Hidden = True  'marker data table
      .Range("A35:A37").EntireRow.Hidden = True
      .Range("A38").EntireRow.Hidden = False  'initial prompt to set M1
      With .Shapes("boxCustomPrompt")
         If Val(Application.Version) < 12 Then
            .TextFrame.Characters.Text = _
               "To see frequency and data values" & vbLf & _
               "hover mouse over any plot point."
         Else
            'XL2007, hovering does not show chart tips unless chart is first activated.
            .TextFrame.Characters.Text = _
               "To see frequency and data values" & vbLf & _
               "first click the chart border then" & vbLf & _
               "hover mouse over any plot point."
         End If
         .Fill.ForeColor.SchemeColor = 22  'gray
         .Line.Weight = 1
         .Line.ForeColor.SchemeColor = 12  'blue
      End With
      .Shapes("boxCustomPrompt2").Visible = False  '"synchronized" box
   End With
   With Sheets("Smith")
      .Activate
      .Range("D4").Activate
      SmithChart1_Activated = False
      .Shapes("boxSmithPrompt2").Visible = False  '"Where are my buttons?" box
      .Shapes("spnsMarker1").Visible = False  'spinners
      .Shapes("spnsMarker2").Visible = False
      .Shapes("boxM1").Visible = False  'spinner labels
      .Shapes("boxM2").Visible = False
      .Shapes("boxFmarkcolor").Visible = False
      .Shapes("boxFmark2color").Visible = False
      .Shapes("Marker1OnScreen").Visible = False  'check boxes
      .Shapes("Marker2OnScreen").Visible = False
      .Shapes("fbtnFreqKHz").Visible = False  'Freq KHz/Hz button
      .Range("A79:A82").EntireRow.Hidden = True  'marker data table
      .Range("A84:A86").EntireRow.Hidden = True
      .Range("A87").EntireRow.Hidden = False  'initial prompt to set M1
      With .Shapes("boxSmithPrompt")
         .TextFrame.Characters.Text = _
            "To see R|fffd|jX values first click" & vbLf & _
            "the chart border then hover" & vbLf & _
            "mouse over any plot point."
         .Fill.ForeColor.SchemeColor = 22  'gray
         .Line.Weight = 1
         .Line.ForeColor.SchemeColor = 12  'blue
      End With
      'Chart deactivated, make sure the pseudo-chart-tip R|fffd|jX box is hidden.
      .ChartObjects(1).Chart.Shapes("boxSmithR+jX").Visible = False
   End With
   
   [MarkFreqIndex].Value = -1   '-1 is used as flag to indicate no markers are up
   [Mark2FreqIndex].Value = -1  'also is the offset for the SmithMarker chart series
   
Done:
   Sheets(CurSht).Activate
   Application.ScreenUpdating = ScrUpdating  'restore previous status
   Application.EnableEvents = EnEvents
   Application.StatusBar = False  'normal operation
   Application.OnKey "{Esc}"  'normal Esc function
End Sub

Public Sub ZoomBetweenMarkers()
   'Both Marker1 and Marker2 are up (button is not enabled otherwise).
   Dim Fmin As Double, Fmax As Double, Ftemp As Double
   
   Sheets("Custom").Range("D4").Activate  'focus off any ActiveX control - damn!
   
   'Use the freq values as shown in the marker table, with NumberFormat rounding if any.
   '[TCFreq].Offset(Arg2).Text
   '===> NO <===
   'Does not seem to work correctly for non-English versions of Excel, even though it
   'works for me under various different language regional settings.  Use .Round instead.
   If Sheets("Custom").Range("C31").NumberFormat = "0.000000" Then
      Fmin = Application.Round([TCFreq].Offset([MarkFreqIndex]), 6)
      Fmax = Application.Round([TCFreq].Offset([Mark2FreqIndex]), 6)
   Else  '.NumberFormat = "0.000"
      Fmin = Application.Round([TCFreq].Offset([MarkFreqIndex]), 3)
      Fmax = Application.Round([TCFreq].Offset([Mark2FreqIndex]), 3)
   End If
   If Fmin = Fmax Then
      'Try Hz instead of KHz.
      Fmin = Application.Round([TCFreq].Offset([MarkFreqIndex]), 6)
      Fmax = Application.Round([TCFreq].Offset([Mark2FreqIndex]), 6)
      If Fmin = Fmax Then
         MsgBox "Markers must be separated by at least 1 Hz to use zooming.", vbExclamation, "Move Marker(s)"
         Exit Sub
      End If
   End If
   'Make sure Marker1 below Marker2.  If not don't bug user, just switch.
   If Fmin > Fmax Then
      Ftemp = Fmin
      Fmin = Fmax
      Fmax = Ftemp
   End If
   
   'Set Min/Max X scale freqs to Marker frequencies.
   With Sheets("Custom").ChartObjects(1).Chart.Axes(xlCategory)
      'To keep scale reasonable, set Fmin <= and Fmax >= closest minor tick value.
      'NO: Too confusing.
      '''Fmin = Application.Floor(Fmin / .MinorUnit, 1) * .MinorUnit
      '''Fmax = Application.Ceiling(Fmax / .MinorUnit, 1) * .MinorUnit
      .MinimumScale = Fmin
      .MaximumScale = Fmax
      [CustomXScaleAllowReset].Value = False
   End With
   
   'Show "Scale(s) Locked" label.
   Sheets("Custom").Shapes("boxScales").Visible = True
   
   'Reset Marker positions since marker .Left is dependent on X scale min/max.
   PositionMarkers "Marker1", CLng([MarkFreqIndex])
   PositionMarkers "Marker2", CLng([Mark2FreqIndex])
   
   'Freq scale now zoomed, make "Full Range" button visible.
   Sheets("Custom").Shapes("fbtnFullRange").Visible = True
   
   'Re-do Min/Max/Avg.
   TransferYrange [CustomYorig], [CustomY]  '[CustomY] is the plotted range
   If [CustomY2off].Value <> 99 Then
      TransferYrange [CustomY2orig], [CustomY2], xlSecondary
   End If
End Sub

Public Sub FullRange()
   'Note that this button is made visible only after zooming between markers.
   'However, markers may have been removed without unzooming.
   
   ActiveSheet.Range("D4").Activate  'focus off any ActiveX control - damn!
   
   'Set Min/Max X scale freqs to values previously set by ReadData proc.
   With Sheets("Custom").ChartObjects(1).Chart
      With .Axes(xlCategory)
         'XL2007: ScaleType property cannot be used on Category axis if
         'the chart has a secondary Value axis.  Use alternate method to
         'determine if existing Category scale is Log or Linear.
         If .CrossesAt < 0 Then  'xlLinear
            .MinimumScale = [MinXscale]
         Else  'xlLogarithmic
            'Log Freq scale, be careful not to set Min to 0.
            If [MinXscale] = 0 Then
               .MinimumScaleIsAuto = True
            Else
               .MinimumScale = [MinXscale]
            End If
         End If
         .MaximumScale = [MaxXscale]
      End With
      [CustomXScaleAllowReset].Value = True
      'Hide "Scale(s) Locked" label if Y and Y2 scales not locked
      '   AND  all scales .MajorUnitIsAuto = True.
      If .Axes(xlCategory, xlPrimary).MajorUnitIsAuto = True And _
         .Axes(xlValue, xlPrimary).MinimumScaleIsAuto = True And _
         .Axes(xlValue, xlPrimary).MaximumScaleIsAuto = True And _
         .Axes(xlValue, xlPrimary).MajorUnitIsAuto = True And _
         .Axes(xlValue, xlSecondary).MinimumScaleIsAuto = True And _
         .Axes(xlValue, xlSecondary).MaximumScaleIsAuto = True And _
         .Axes(xlValue, xlSecondary).MajorUnitIsAuto = True Then
         Sheets("Custom").Shapes("boxScales").Visible = False
      End If
   End With
   
   'If Markers are up, reset position since Marker .Left is dependent on X scale min/max.
   If [MarkFreqIndex].Value <> -1 Then
      PositionMarkers "Marker1", CLng([MarkFreqIndex])
   End If
   If [Mark2FreqIndex].Value <> -1 Then
      PositionMarkers "Marker2", CLng([Mark2FreqIndex])
   End If
   
   'Freq scale now at full range, hide this button.
   Sheets("Custom").Shapes("fbtnFullRange").Visible = False
   
   'Re-do Min/Max/Avg.
   TransferYrange [CustomYorig], [CustomY]  '[CustomY] is the plotted range
   If [CustomY2off].Value <> 99 Then
      TransferYrange [CustomY2orig], [CustomY2], xlSecondary
   End If
End Sub

Public Sub RebuildLegend()
   'This proc will rebuild an existing chart legend when a series visibility changes.
   'Code is very similar to UserForm_Initialize() and btnOK_Click() in frmLegend.
   'Difference is that this code is called ONLY if .HasLegend is already TRUE.
   
   Dim Sname As String
   Dim Snames(1 To 6) As String
   Dim Snumbers(1 To 6) As Integer
   Dim SnCnt As Integer
   Dim PrevPALeft As Single, PrevPAWidth As Single
   Dim LegendLeft As Single, LegendTop As Single
   
   With ActiveSheet.ChartObjects(1).Chart
      'Make list of currently visible series names.
      If ActiveSheet.Name = "Custom" Then
         SnCnt = 1
         Snames(1) = .SeriesCollection(1).Name  'Primary
         Snumbers(1) = 1
         If ActiveSheet.Shapes("boxSnap1").Visible Then
            SnCnt = SnCnt + 1
            Snames(SnCnt) = .SeriesCollection(2).Name
            Snumbers(SnCnt) = 2
         End If
         If ActiveSheet.Shapes("boxSnap2").Visible Then
            SnCnt = SnCnt + 1
            Snames(SnCnt) = .SeriesCollection(3).Name
            Snumbers(SnCnt) = 3
         End If
         If ActiveSheet.DropDowns("fcboY2axis").ListIndex > 1 Then  'Secondary
            SnCnt = SnCnt + 1
            Snames(SnCnt) = .SeriesCollection(4).Name
            Snumbers(SnCnt) = 4
         End If
         If ActiveSheet.Shapes("boxSnap3").Visible Then
            SnCnt = SnCnt + 1
            Snames(SnCnt) = .SeriesCollection(5).Name
            Snumbers(SnCnt) = 5
         End If
         If ActiveSheet.Shapes("boxSnap4").Visible Then
            SnCnt = SnCnt + 1
            Snames(SnCnt) = .SeriesCollection(6).Name
            Snumbers(SnCnt) = 6
         End If
      Else  'Smith
         SnCnt = 1
         Snames(1) = .SeriesCollection(18).Name
         Snumbers(1) = 18
         If ActiveSheet.Shapes("boxSnap1").Visible Then
            SnCnt = SnCnt + 1
            Snames(SnCnt) = .SeriesCollection(19).Name
            Snumbers(SnCnt) = 19
         End If
         If ActiveSheet.Shapes("boxSnap2").Visible Then
            SnCnt = SnCnt + 1
            Snames(SnCnt) = .SeriesCollection(20).Name
            Snumbers(SnCnt) = 20
         End If
         If ActiveSheet.Shapes("boxSnap3").Visible Then
            SnCnt = SnCnt + 1
            Snames(SnCnt) = .SeriesCollection(21).Name
            Snumbers(SnCnt) = 21
         End If
         If ActiveSheet.Shapes("boxSnap4").Visible Then
            SnCnt = SnCnt + 1
            Snames(SnCnt) = .SeriesCollection(22).Name
            Snumbers(SnCnt) = 22
         End If
      End If
   End With
      
   Application.ScreenUpdating = False
   With ActiveSheet.ChartObjects(1).Chart
      PrevPALeft = .PlotArea.Left
      PrevPAWidth = .PlotArea.Width
      
      'Build new legend, always starting from scratch so the code below
      'can remove 'gridline' legend entries and unused snapshot entries.
      LegendLeft = .Legend.Left
      LegendTop = .Legend.Top
      .HasLegend = False  'always start fresh
      .HasLegend = True   'defaults to position right
      
      With .Legend
         If ActiveSheet.Name = "Custom" Then
            'NOTE:  Since the Custom chart uses both Primary and Secondary axes,
            'the order of the legend entries does not exactly match the order
            'of the chart series.
            ' S#             L#
            '  1  Primary     1
            '  2  Snap1       2
            '  3  Snap2       3
            '  4  Secondary   6
            '  5  Snap3       7
            '  6  Snap4       8
            '  7  ZeroLine    9
            '  8  RefLineP1   4
            '  9  RefLineP2   5
            ' 10  RefLineS1  10
            ' 11  RefLineS2  11
            .LegendEntries(11).Delete  'RefLineS2
            .LegendEntries(10).Delete  'RefLineS1
            .LegendEntries(9).Delete   'ZeroLine
            If Not ActiveSheet.Shapes("boxSnap4").Visible Then .LegendEntries(8).Delete
            If Not ActiveSheet.Shapes("boxSnap3").Visible Then .LegendEntries(7).Delete
            If ActiveSheet.DropDowns("fcboY2axis").ListIndex = 1 Then .LegendEntries(6).Delete
            .LegendEntries(5).Delete   'RefLineP2
            .LegendEntries(4).Delete   'RefLineP1
            If Not ActiveSheet.Shapes("boxSnap2").Visible Then .LegendEntries(3).Delete
            If Not ActiveSheet.Shapes("boxSnap1").Visible Then .LegendEntries(2).Delete
         Else  'Smith
            Do Until .LegendEntries.Count = 7
               .LegendEntries(1).Delete  'grid lines
            Loop
           .LegendEntries(7).Delete  'Marker2
           .LegendEntries(6).Delete  'Marker1
            If Not ActiveSheet.Shapes("boxSnap4").Visible Then .LegendEntries(5).Delete
            If Not ActiveSheet.Shapes("boxSnap3").Visible Then .LegendEntries(4).Delete
            If Not ActiveSheet.Shapes("boxSnap2").Visible Then .LegendEntries(3).Delete
            If Not ActiveSheet.Shapes("boxSnap1").Visible Then .LegendEntries(2).Delete
         End If
         
         'Format legend box.
         .Shadow = True
         .Font.Name = "Arial"
         .Font.FontStyle = "Bold"
         .Font.Size = 8
         .AutoScaleFont = False
      End With  'With .Legend
      
      .Legend.Left = LegendLeft
      .Legend.Top = LegendTop
      
      'Restore original plot area size.
      .PlotArea.Left = PrevPALeft
      .PlotArea.Width = PrevPAWidth
      'Under XL2000 (and maybe above), must SET the width
      'to a value less than the desired READ width.
      Dim NextTry As Single
      NextTry = PrevPAWidth
      Do While .PlotArea.Width > PrevPAWidth
         NextTry = NextTry - 1
         .PlotArea.Width = NextTry
      Loop
      
      'Restore AutoSize property to all chart-level text boxes.
      'For Custom sheet, reset Markers (shapes) if necessary.
      '(Markers on Smith are regular chart series, repositioned automatically.)
      'Reset txtSmithZo.left, is not put back quite right by Excel after manual PA resize.
      If ActiveSheet.Name = "Custom" Then
         .Shapes("Marker1Text").TextFrame.AutoSize = True
         .Shapes("Marker2Text").TextFrame.AutoSize = True
         If [MarkFreqIndex].Value <> -1 Then PositionMarkers "Marker1", CLng([MarkFreqIndex])
         If [Mark2FreqIndex].Value <> -1 Then PositionMarkers "Marker2", CLng([Mark2FreqIndex])
      Else  'Smith
         .Shapes("txtSmithZo").TextFrame.AutoSize = True
         .Shapes("txtSmithZo").Left = 5.25
      End If
   End With  'ActiveSheet.ChartObjects(1).Chart
   
   'End by deactivating chart.
   ActiveSheet.Range("D4").Activate
   Application.ScreenUpdating = True
End Sub

Public Sub DotsOnOff()
   ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   
   On Error Resume Next  'error if series not visible (scale locked, primay "off scale")
   
   With Sheets("Custom").ChartObjects(1).Chart.SeriesCollection(1)
      If .MarkerStyle = xlNone Then
         'Set Custom primary series markers.
         .MarkerStyle = xlCircle
         .MarkerForegroundColorIndex = 1
         .MarkerBackgroundColorIndex = .Border.ColorIndex
         .MarkerSize = 5
      Else
         'Remove Custom primary series markers.
         .MarkerStyle = xlNone
      End If
   End With
   
   On Error GoTo 0
   
   SyncDotsWeights  'set other series to match
End Sub

Public Sub LineWeight()
   ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   
   On Error Resume Next  'error if series not visible (scale locked, primay "off scale")
   
   With Sheets("Custom").ChartObjects(1).Chart.SeriesCollection(1).Border
      If .Weight = xlThin Then
         'Set Custom primary line weight to xlMedium.
         .Weight = xlMedium
      ElseIf .Weight = xlMedium Then
         'Set Custom primary line weight to xlThick.
         .Weight = xlThick
      Else
         'Set Custom primary line weight to xlThin.
         .Weight = xlThin
      End If
   End With
   
   On Error GoTo 0
   
   SyncDotsWeights  'set other series to match
End Sub

Public Sub SyncDotsWeights()
   'Synchronize other series markers/weights on all charts to match Custom primary.
   Dim i As Integer
   Dim MStyle As Long
   Dim BWeight As Long
   
   On Error Resume Next  'error if series not visible
   
   With Sheets("Custom").ChartObjects(1).Chart
      MStyle = .SeriesCollection(1).MarkerStyle     'primary style
      BWeight = .SeriesCollection(1).Border.Weight  'primary weight
      If Err.Number <> 0 Then Exit Sub  'primary not visible, quit
      For i = 2 To 6  'secondary and snapshots
         .SeriesCollection(i).MarkerStyle = MStyle
         If MStyle <> xlNone Then
            .SeriesCollection(i).MarkerForegroundColorIndex = 1
            .SeriesCollection(i).MarkerBackgroundColorIndex = .SeriesCollection(i).Border.ColorIndex
            .SeriesCollection(i).MarkerSize = 5
         End If
         .SeriesCollection(i).Border.Weight = BWeight
      Next i
   End With
   
   With Sheets("Smith").ChartObjects(1).Chart
      For i = 18 To 22  'primary and snapshots
         .SeriesCollection(i).MarkerStyle = MStyle
         If MStyle <> xlNone Then
            .SeriesCollection(i).MarkerForegroundColorIndex = 1
            .SeriesCollection(i).MarkerBackgroundColorIndex = .SeriesCollection(i).Border.ColorIndex
            .SeriesCollection(i).MarkerSize = 5
         End If
         .SeriesCollection(i).Border.Weight = BWeight
      Next i
   End With
   
   With Sheets("Custom").ChartObjects(2).Chart
      For i = 18 To 22  'primary and snapshots
         .SeriesCollection(i).MarkerStyle = MStyle
         If MStyle <> xlNone Then
            .SeriesCollection(i).MarkerForegroundColorIndex = 1
            .SeriesCollection(i).MarkerBackgroundColorIndex = .SeriesCollection(i).Border.ColorIndex
            .SeriesCollection(i).MarkerSize = 5
         End If
         .SeriesCollection(i).Border.Weight = BWeight
      Next i
   End With
   
   On Error GoTo 0
End Sub

Public Sub SetChartEvents()
   'Note that this code must be executed from a standard module, not a sheet object.
   'To stop events use VBE Reset or Set ___ = Nothing
   
   Set myClassModule1.CustomChart1 = Sheets("Custom").ChartObjects(1).Chart
   Set myClassModule1.CustomChart2 = Sheets("Custom").ChartObjects(2).Chart
   Set myClassModule1.SmithChart1 = Sheets("Smith").ChartObjects(1).Chart
End Sub

Public Sub ShowPixelSize()
   'Show pixel size info for chart.
   'Custom1 and Smith1 chart 'Resize' events call this proc.
   Dim PicHigh As Single
   Dim PicWide As Single
   Dim PicWideInch As Single
   Dim PicHighInch As Single
   Dim PixelsWide As Integer
   Dim PixelsHigh As Integer
   ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   With ActiveSheet.ChartObjects(1)  'note NOT .Chart.ChartArea.Width/.Height
      PicWide = .Width
      PicHigh = .Height
   End With
   PicWideInch = PicWide / 72    'points to inches ("logical", not necessarily physical)
   PicHighInch = PicHigh / 72
   PixelsWide = PicWideInch * PixelsPerInch(0)  'typically 96 or 120 dpi for displays
   PixelsHigh = PicHighInch * PixelsPerInch(1)
   Application.StatusBar = "Chart Width x Height = " & _
                           PixelsWide & " x " & PixelsHigh & " Pixels"
End Sub

Public Function PixelsPerInch(XorY As Long) As Long
   'Get the screen resolution in pixels per inch.
   'Under Excel 2000 and above could use Application.DefaultWebOptions.PixelsPerInch.
   #If VBA7 Then
      Dim hDC As LongPtr
   #Else
      Dim hDC As Long
   #End If

   hDC = CreateIC("DISPLAY", vbNullString, vbNullString, 0)
   If XorY = 0 Then
      PixelsPerInch = GetDeviceCaps(hDC, 88)  'LOGPIXELSX = 88 = Logical pixels/inch in X
   Else
      PixelsPerInch = GetDeviceCaps(hDC, 90)  'LOGPIXELSY = 90 = Logical pixels/inch in Y
   End If
   DeleteDC (hDC)
End Function

Public Function LeftRightAlign(strToAlign As String) As String
   Dim strTmp As String
   Dim TextChars(1 To 10) As String
   Dim TextLens(1 To 10) As Single
   Dim NumEntries As Integer
   Dim w1 As Single, w2 As Single, W1s As Single
   Dim MaxLen As Single
   Dim i As Integer
   Dim sh As Shape
   For i = 1 To 10
      If InStr(1, strToAlign, vbLf, vbTextCompare) > 0 Then
         TextChars(i) = Left(strToAlign, InStr(1, strToAlign, vbLf, vbTextCompare) - 1)
         strToAlign = Mid(strToAlign, Len(TextChars(i)) + 2)
      Else
         TextChars(i) = strToAlign
         Exit For
      End If
   Next i
   NumEntries = i
   Set sh = Sheets("Custom").Shapes("boxAlign")
   With sh.TextFrame.Characters
      .Text = "x x"
      w1 = sh.Width
      .Text = "x  x"
      w2 = sh.Width
      W1s = w2 - w1
      For i = 1 To NumEntries
         .Text = TextChars(i)
         TextLens(i) = sh.Width
         If TextLens(i) > MaxLen Then MaxLen = TextLens(i)
      Next i
      LeftRightAlign = ""
      For i = 1 To NumEntries
         strTmp = Left(TextChars(i), InStr(1, TextChars(i), ":", vbTextCompare))
         strTmp = strTmp & "" & Space(CLng((MaxLen - TextLens(i)) / W1s)) & Mid(TextChars(i), Len(strTmp) + 1)
         LeftRightAlign = LeftRightAlign & strTmp & vbLf
      Next i
      LeftRightAlign = Left(LeftRightAlign, Len(LeftRightAlign) - 1)
   End With
End Function


Attribute VB_Name = "DataProcs"
Option Compare Text  ' "AAA" = "aaa"
Option Explicit
Option Private Module

Public ReadDataCanceled As Boolean  'used by frmMeasureTL

Public Sub ReadData(Optional ReadFrom As String = "", _
                    Optional AskS2P As Boolean = False, _
                    Optional FromRefresh As Boolean = False, _
                    Optional GetOpenTitle As String = "Zplots: Load Data")
   Dim PrevPath As String
   Dim FileToOpen As Variant
   Dim ModifiedOn As Variant
   
   Dim TC As Long
   Dim R As Double, X As Double, Zo As Double
   Dim Denom As Double, RhoReal As Double, RhoImag As Double, RhoMag As Double
   Dim MinFreq As Double, MaxFreq As Double
   
   Dim FromBk As String
   Dim FromSht As Worksheet
   Dim rngFrom As Range
   Dim rngRegion As Range
   Dim cSrc As Range
   Dim vSrc As Variant
   Dim strInputLine As String
   Dim LastRow As Long
   Dim Rw As Long
   Dim VNA4WinType As String
   Dim DUTdesc As String
   Dim cFind As Range
   Dim blnConsec As Boolean
   Dim blnComma As Boolean
   Dim blnSpace As Boolean
   Dim blnTab As Boolean
   Dim rngOpt As Range
   Dim strOptions As String
   Dim SnPFormat As String
   Dim SnPFreqMult As Double
   Dim SnPCom1 As String, SnPCom2 As String, SnPCom3 As String
   Dim LabelLeft As String, LabelRight As String
   Dim LastRwColA As Long, LastRwColI As Long
   Dim MoreInfo As String
   
   Dim vColsAB As Variant
   Dim vFplus2 As Variant
   Dim vFreq As Variant
   Dim vRhoRL As Variant
   Dim Results() As Double
   Dim Mode As String
   Dim ScrUpdating As Boolean
   Dim ShowInTaskbar As Boolean
   Dim WaitCnt As Long
   Dim myVNAs1p As Boolean
   Dim myVNAs2p As Boolean
   
   'This proc can be called from the fbtnLoad button, in which case no file path/name
   'will be supplied, or from the Workbook_Activate event if a valid data file
   'is already open in another Excel window, in which case the path/name is passed
   '(for .csv files) or the MultiNEC workbook path/name is passed (ending in .xls).
   'Also can be called from the fbtnGenData button, path/name passed.
   'Also can be called from the fbtnRefresh button, path/name passed.
   'Also can be called from the fbtnChangeS2P button, path/name passed.
   'Also can be called from the Worksheet_Change event for TriggerLoad, path/name passed.
   
   'If not called from fbtnRefresh, make sure EnablePolling is off.
   If Not FromRefresh Then [EnablePolling].Value = False
      
   ReadDataCanceled = False
   If ReadFrom = "" Then
      On Error Resume Next  'Try to pre-set path, but don't fail if not valid
      PrevPath = CurDir
      ChDrive [DirData].Value
      ChDir [DirData].Value
      If GetOpenTitle <> "Load ->S2P<- Data File" Then
         FileToOpen = Application.GetOpenFilename( _
                      "Zplots Data (*.csv; *.dat; *.txt; *.s1p; *.s2p),*.csv; *.dat; *.txt; *.s1p; *.s2p," & _
                      "All Files (*.*),*.*", 1, _
                      GetOpenTitle)
      Else
         FileToOpen = Application.GetOpenFilename( _
                      "S2P File (*.s2p),*.s2p", 1, _
                      GetOpenTitle)
      End If
      If FileToOpen = False Then
         ChDrive PrevPath
         ChDir PrevPath
         ReadDataCanceled = True
         Exit Sub
      End If
      '''[DirData].Value = CurDir  'obsolete
      'Update v2.4:  When using GetOpenFilename or GetSaveAsFilename, if the chosen folder
      'is contained in a "Library" under Win7 and later, CurDir is *not* reset.  Use an
      'alternate method to save the chosen folder for subsequent GetOpen or GetSaveAs.
      'This change applies to all cases where [DirData], [DirSnapshot], or [DirExportGIF]
      'is reset following a GetOpen or GetSaveAs.
      'Save user-specified path for next time, then reset to previous (may not have changed).
      [DirData].Value = Left(FileToOpen, MyInStrRev(CStr(FileToOpen), "\") - 1)
      ChDrive PrevPath
      ChDir PrevPath
      On Error GoTo 0
   Else
      FileToOpen = ReadFrom
   End If
   
   With Application
      ScrUpdating = .ScreenUpdating  'save current status
      .ScreenUpdating = False
      .Calculation = xlCalculationManual  'faster updates
      .EnableEvents = False  'avoid Book and Sheet .Activate/.Deactivate
      .StatusBar = "Loading ..."
      On Error Resume Next
      ShowInTaskbar = .ShowWindowsInTaskbar  'save current status (not valid in XL97)
      If .Workbooks.Count = 1 Then .ShowWindowsInTaskbar = False
      On Error GoTo 0
   End With
   
   '  Use Excel to read and parse the file.  This will create a new temporary workbook
   '  and fill the cells of each row with the comma delimited fields from the opened
   '  file.  Do a range transfer to the target sheet, then close the temp workbook.
   '  Two things to note:
   '  1. Except for AM, the csv file will always have a period as the decimal point
   '     and a comma as the field separator, the English language standard.
   '  2. Use .Formula = .Formula for the transfer.  The .Formula property, unlike .Value
   '     and .FormulaLocal, always uses the language of the macro.  That's me, English.
   '     Hence a German Excel user can read a "period decimal" file like AIM csv.
   '     BUT > This works ONLY if the data is read into pre-formatted "Text" cells.
   '     AND > Using target.Formula = xxx ONLY works for individual assignments, not a
   '     full range transfer.
   
   'Change:  Instead of using "Workbooks.OpenText FileName:=FileToOpen ..." to read
   'the file, it's faster to Open and do Line Inputs into cells in new workbook.
   'Avoids the Excel "Requesting virus scan..." delay.  Then use .TextToColumns to
   'parse the data as necessary.
   
   If Right(ReadFrom, 4) <> ".xls" Then
      'Not from a MultiNEC.xls type workbook, read the file.
      
      'Instead of reading FileToOpen directly, use Name to a temporary file to avoid
      'file conflicts, possible when doing polling on a rapidly changing file.  Name
      'will fail with error 75 (Path/File access error) if the file is currently open.
      On Error Resume Next
      Kill "$Zplots$.tmp"  'in CurDir, if at all
      WaitCnt = 0
      Do Until WaitCnt = 60  'max wait 60 x 50ms = 3 seconds
         Err.Clear
         Name FileToOpen As "$Zplots$.tmp"
         If Err.Number = 0 Then Exit Do
         Sleep 50
         WaitCnt = WaitCnt + 1
      Loop
      If WaitCnt = 60 Then
         MsgBox "File" & vbLf & _
                FileToOpen & vbLf & _
                "appears to be in use by another program." & vbLf & _
                "Gave up waiting after multiple read attempts.", _
                vbExclamation, "File in Use"
         ReadDataCanceled = True
         GoTo Quit
      End If
      On Error GoTo 0
      
      'Inspect first line, see reason below.
      Open "$Zplots$.tmp" For Input As #1
      Line Input #1, strInputLine
      Close #1
      
      ModifiedOn = FileDateTime("$Zplots$.tmp")
      Workbooks.Add  'creates and makes active a new, empty workbook
      Range("A1").EntireColumn.NumberFormat = "@"  'Text, needed in case no space
                                                      'between comma and number
      If InStrB(strInputLine, vbLf) > 0 Then
         'It is possible that csv and txt files may be emailed between users.
         'Some email programs strip the vbCR [Chr(13)] from the end of each line
         'for inline text attachments.  The VBA 'Line Input' statement recognizes
         'ONLY vbCR [Chr(13)] or vbCR|fffd|vbLF [Chr(13) + Chr(10)] as the end of line,
         'not a single vbLF [Chr(10)].  If the input file has only a single vbLF as
         'the end of line indicator, Line Input will read the entire file as one line,
         'with the vbLF bytes included.
         Dim OneChar As Byte
         LastRow = 0
         strInputLine = ""
         Open "$Zplots$.tmp" For Binary As #1
         Do While Not EOF(1)
            Get #1, , OneChar
            If OneChar = 10 Then
               'LF found.  Write current string (if any) to next workbook cell.
               LastRow = LastRow + 1
               Cells(LastRow, 1).Value = strInputLine
               strInputLine = ""
            Else
               'Append character to end of string.
               strInputLine = strInputLine & Chr(OneChar)
            End If
         Loop
         Close #1
      Else
         'Can do normal Line Input reads.
         LastRow = 0
         Open "$Zplots$.tmp" For Input As #1
         Do While Not EOF(1)
            LastRow = LastRow + 1
            Line Input #1, strInputLine
            Cells(LastRow, 1).Value = strInputLine
         Loop
         Close #1
      End If
      
      'Back to original FileToOpen name, assuming newer version not created already.
      On Error Resume Next
      Name "$Zplots$.tmp" As FileToOpen
      On Error GoTo 0
      
      'AM (Antenna Model) csv files are language-specific.
      'If necessary, translate back to English format to be
      'able to use common code below.
      If Left(Range("A2"), 8) = """Antenna" Then
         If InStr(Range("A5"), ";") > 0 Then
            'Set a region to include numeric data and column headers.
            Set rngRegion = Range(Range("A4"), Range("A3").End(xlDown))
            rngRegion.Replace ",", "."  'replace all commas with periods
            rngRegion.Replace ";", ","  'replace all semicolons with commas
         End If
      End If
      
      'Same goes for Zplots generic files.
      If InStr(Left(Range("A1"), 7), "Zplots") > 0 Then  'may be 'Zplots' or '"Zplots'
         If InStr(Range("A3"), ";") > 0 Then
            'Set a region to include numeric data and column headers.
            Set rngRegion = Range(Range("A2"), Range("A65536").End(xlUp))  'in case single entry
            rngRegion.Replace ",", "."  'replace all commas with periods
            rngRegion.Replace ";", ","  'replace all semicolons with commas
         End If
      End If
      
      'Same goes for DL1SNG vector Antenna Analyzer files.
      If Left(Range("A1"), 5) = "FA-VA" Then
         'Delete any lines before the "Pkt.-Nr" line.
         Do While Left(Range("A3"), 7) <> "Pkt.-Nr"
            Rows(3).Delete Shift:=xlUp
         Loop
         If InStr(Range("A3"), ";") > 0 Then
            'Set a region to include numeric data and column headers.
            Set rngRegion = Range(Range("A3"), Range("A3").End(xlDown))
            rngRegion.Replace ",", "."  'replace all commas with periods
            rngRegion.Replace ";", ","  'replace all semicolons with commas
         End If
      End If
      
      'If s1p/s2p format file, parse on spaces/tabs.  All others, parse on commas.
      If Right(FileToOpen, 4) = ".s1p" Or Right(FileToOpen, 4) = ".s2p" Then
         blnConsec = True
         blnComma = False
         blnSpace = True
         blnTab = True
         'Before parsing, search the first few lines (max 10) for comments.
         'Save the first 3 found.
         For Rw = 1 To IIf(LastRow < 10, LastRow, 10)
            If Left(Cells(Rw, 1).Value, 1) = "!" Then
               If SnPCom1 = "" Then
                  SnPCom1 = Cells(Rw, 1).Value
               ElseIf SnPCom2 = "" Then
                  SnPCom2 = Cells(Rw, 1).Value
               ElseIf SnPCom3 = "" Then
                  SnPCom3 = Cells(Rw, 1).Value
                  Exit For
               End If
            End If
         Next Rw
      Else
         blnConsec = False
         blnComma = True
         blnSpace = False
         blnTab = False
      End If
      
      'Set a region to include all filled cells in column A.
      Set rngRegion = Range([A1], Cells.SpecialCells(xlCellTypeLastCell))
      
      If Application.International(xlDecimalSeparator) = "." Then
         'English user.
         'Parse on commas/spaces, filling into General cells
         rngRegion.TextToColumns Destination:=rngRegion, DataType:=xlDelimited, _
               TextQualifier:=xlDoubleQuote, ConsecutiveDelimiter:=blnConsec, _
               Tab:=blnTab, Semicolon:=False, Comma:=blnComma, Space:=blnSpace, Other:=False
      Else
         'Non-English user.
         'Parse on commas/spaces, filling into explicit 'Text' (type 2) cells for 22 columns.
         '(REFL.DAT files have fields of interest out to column 22 = "V".)
         rngRegion.TextToColumns Destination:=rngRegion, DataType:=xlDelimited, _
               TextQualifier:=xlDoubleQuote, ConsecutiveDelimiter:=blnConsec, _
               Tab:=blnTab, Semicolon:=False, Comma:=blnComma, Space:=blnSpace, Other:=False, _
               FieldInfo:=Array(Array(1, 2), Array(2, 2), Array(3, 2), Array(4, 2), Array(5, 2), _
                                Array(6, 2), Array(7, 2), Array(8, 2), Array(9, 2), Array(10, 2), _
                                Array(11, 2), Array(12, 2), Array(13, 2), Array(14, 2), Array(15, 2), _
                                Array(16, 2), Array(17, 2), Array(18, 2), Array(19, 2), Array(20, 2), _
                                Array(21, 2), Array(22, 2))
      End If
      
      On Error GoTo Invalid  'in case text from invalid files causes Excel problems
      
      'Validity checks.
      FromBk = ActiveWorkbook.Name
      Set FromSht = Workbooks(FromBk).Worksheets(1)
      myVNAs1p = False
      myVNAs2p = False
      If Left(FromSht.Range("A2"), 3) = "AIM" Or _
         (Left(FromSht.Range("A2"), 3) = "VNA" And _
          FromSht.Range("B5") = "SWR") Then
         'OK AIM (or W5BIG VNA Port A)
      ElseIf Left(FromSht.Range("A1"), 7) = "VNA4Win" Then
         'OK VNA4Win
      ElseIf FromSht.Range("A1") = "Exeter" Then
         'OK Exeter
      ElseIf FromSht.Range("A1") = "Frequency(Hz)" Then
         'OK VNA1/miniVNA
      ElseIf Right(FileToOpen, 4) = ".s1p" Or Right(FileToOpen, 4) = ".s2p" Then
         'OK generic s1p/s2p (based on filename extension, not file contents)
      ElseIf FromSht.Range("E1") = "Reflection" Or _
             FromSht.Range("E1") = "  |G|.dB " Or _
             FromSht.Range("E1") = " mean |G| " Then
         'OK REFL.DAT/TRANS.DAT/GRPDEL.DAT
      ElseIf FromSht.Range("A1") = "myVNA data file" And _
             FromSht.Range("I2") = " S12 Imag" Then
         'myVNA data, treat like s2p (except swap S12 and S22 columns)
         myVNAs2p = True
         FromSht.Range("A1").Value = "#"
         FromSht.Range("B1").Value = "HZ"
         FromSht.Range("C1").Value = "RI"
         FromSht.Range("A2").Value = "!"
      ElseIf FromSht.Range("A1") = "myVNA data file" And _
             (FromSht.Range("C2") = " S11 Imag" Or _
              FromSht.Range("C2") = " Rho(imag)") Then
         'myVNA data, treat like s1p
         myVNAs1p = True
         FromSht.Range("A1").Value = "#"
         FromSht.Range("B1").Value = "HZ"
         FromSht.Range("C1").Value = "RI"
         FromSht.Range("A2").Value = "!"
      ElseIf Left(Range("A1"), 5) = "FA-VA" Then
         'OK DL1SNG vector Antenna Analyzer
      ElseIf Left(FromSht.Range("A1"), 5) = "EZNEC" And _
             FromSht.Range("A3") = "Alt Z0: " Then
         'OK EZNEC (LastZ)
      ElseIf Left(FromSht.Range("A2"), 7) = "Antenna" And _
             FromSht.Range("B4") = "Source" Then
         'AM Impedances OK, Patterns not OK
      ElseIf Left(FromSht.Range("A1"), 6) = "Zplots" Then
         'OK Zplots Generated
      ElseIf Left(FromSht.Range("A1"), 17) = "Transmission Line" Then
         'OK Zplots "TL Parms" type file
      ElseIf Left(FromSht.Range("A1"), 15) = "Fixed Frequency" Then
         'OK Zplots "Fixed Freq" type file
      Else
Invalid:
         'Not recognized.
         If FromSht.Range("A2") = "! Tucson Amateur Packet Radio" Then
            MoreInfo = vbLf & vbLf & "For TAPR VNA data, use S2P text format instead of CSV format."
         ElseIf Left(FromSht.Range("A1"), 5) = "EZNEC" And _
                FromSht.Range("A3") = "Src #" Then
            MoreInfo = vbLf & vbLf & "Use the ""LastZ"" file, NOT the ""LastZ_sorted"" file."
         Else
            MoreInfo = ""
         End If
         MsgBox "File" & vbLf & FileToOpen & vbLf & _
                "is not a recognized format." & MoreInfo, _
                vbExclamation + vbOKOnly, "File Not Recognized"
         Workbooks(FromBk).Close SaveChanges:=True 'SM6WHY
         ReadDataCanceled = True
         GoTo Quit
      End If
      On Error GoTo 0
   Else
      'Getting data from open MultiNEC workbook, no translation problems.
      Set FromSht = Workbooks(Dir(ReadFrom)).Worksheets(4)  'MultiNEC Calculate sheet
      ModifiedOn = FileDateTime(ReadFrom)
   End If
   
   Mode = "R"     'Reflection mode, normal processing unless reset below
   With ThisWorkbook
      '"WhichS2P" used only with s2p files
      .Sheets("Data").Range("WhichS2P").Value = ""
      'SignX option buttons only shown for VNA1/miniVNA.
      .Sheets("Custom").Shapes("grpSignX").Visible = True
      .Sheets("Smith").Shapes("grpSignX").Visible = True
      '"Change S2P Subset(s)" buttons only shown for s2p files.
      .Sheets("Data").Shapes("fbtnChangeS2P").Visible = False
      .Sheets("Custom").Shapes("fbtnChangeS2P").Visible = False
      .Sheets("Smith").Shapes("fbtnChangeS2P").Visible = False
      'Make sure RefLine color dots are not visible (No ref lines to start).
      .Sheets("Custom").Shapes("boxRefLinescolor").Visible = False
      .Sheets("Custom").Shapes("boxRefLines2color").Visible = False
      'No "xx ft Added/Subtracted" transmission line reminder (No TL add/sub to start).
      .Sheets("Custom").Shapes("boxTline").TextFrame.Characters.Text = " "
      .Sheets("Smith").Shapes("boxTline").TextFrame.Characters.Text = " "
      'No Custom sheet text box for TL Parms.
      .Sheets("Custom").Shapes("boxTLParmsInfo").Visible = False
      'No Custom sheet "Reload Measured data" button.
      .Sheets("Custom").Shapes("fbtnReloadMeas").Visible = False
   End With
   
   'Transfer in data, calculate other values as necessary.
   With ThisWorkbook.Sheets("Data")
      'Clear all old scan data, including RhoRe/Im, ZeroLine, Y/Y2 plot values.
      Range(.Range("TCFreq").Offset(1), .Range("OriginalX").End(xlDown)).ClearContents
      If .Range("AI7").Value <> "" Then  'right side S21 or S12 data, if any
         Range(.Range("AI7"), .Range("AL6").End(xlDown)).ClearContents
      End If
      .Range("A2:L4").ClearContents  'header stuff
      
      '#####   AIM (or W5BIG VNA Port A)   #####
      If Left(FromSht.Range("A2"), 3) = "AIM" Or _
         (Left(FromSht.Range("A2"), 11) = "VNA version" And _
          FromSht.Range("B5") = "SWR") Then
         'AIM (or W5BIG VNA Port A) csv scan file.
         'Transfer comment lines and RefZo.
         .Range("A2:C4").Formula = FromSht.Range("A1:C3").Formula
         .[Refzo].Formula = FromSht.Range("B4").Formula
         
         'Set a range for just the scan points numeric data (Freq to RL), then transfer in.
         'Close source workbook, which also activates the previous book, me.
         'Fill remainder of Data sheet.
         'For AIM, don't show the freq noise.
         Set rngFrom = Range(FromSht.Range("A6"), FromSht.Range("H5").End(xlDown))
         TransferToData rngFrom  'also sets [TCcnt]
         Workbooks(FromBk).Close SaveChanges:=True 'SM6WHY
         'Update v2.3:  Ignore AIM's Z thru RL, sign of RL is negative for older AIM programs, positive for newer.
         'Compute it myself to insure negative sign.
         FillData  '''WithZtoRL:=False
      '#####   AIM (or W5BIG VNA Port A)   #####
         
      '#####   VNA4Win   #####
      ElseIf Left(FromSht.Range("A1"), 7) = "VNA4Win" Then
         'VNA4Win sweep file.
         'Check for verison 1.2A, realign if necessary.
         If InStr(FromSht.Range("A1"), "version 1.2A") > 0 Then
            FromSht.Rows("5:6").Insert Shift:=xlDown
            FromSht.Rows("9:9").Insert Shift:=xlDown
         End If
         'Transfer various header lines.
         .Range("A2").Formula = FromSht.Range("A1").Formula
         .Range("A3").Formula = FromSht.Range("A3").Formula & " " & FromSht.Range("A4").Formula
         .Range("A4").Formula = FromSht.Range("A6").Formula
         .Range("E4").Formula = FromSht.Range("A8").Formula
         .Range("H4").Formula = FromSht.Range("A9").Formula
         .[Refzo].Formula = 50  'default 50
         
         'Keep track of type of VNA4Win data.
         'May be 'Freq,Rs,Xs' or 'Freq,Zmag,Theta' or other combinations.
         VNA4WinType = FromSht.Range("B13")
         If FromSht.Range("A11") = "Transmission mode" Then
            Mode = "T"
         ElseIf FromSht.Range("A11") = "Group Delay mode" Then
            Mode = "G"
         ElseIf FromSht.Range("A11") = "Reflection mode" Then
            Mode = "R"
         Else
            MsgBox "File" & vbLf & FileToOpen & vbLf & _
                   "is not a recognized format.", _
                   vbExclamation + vbOKOnly, "File Not Recognized"
            Workbooks(FromBk).Close SaveChanges:=True 'SM6WHY
            GoTo Quit
         End If
         
         'Set a range for just the scan points numeric data, then transfer in.
         'Close source workbook, which also activates the previous book, me.
         If VNA4WinType <> "SWR" Then
            Set rngFrom = Range(FromSht.Range("A14"), FromSht.Range("C13").End(xlDown))
         Else
            Set rngFrom = Range(FromSht.Range("A14"), FromSht.Range("B13").End(xlDown))
         End If
         TransferToData rngFrom  'also sets [TCcnt]
         Workbooks(FromBk).Close SaveChanges:=True  'SM6WHY
         
         If Mode = "R" Then
            'Reflection mode.
            'Load a * x 3 range into vFplus2, Freq-Hz plus other two VNA4Win fields.
            'Change Freq to MHz, calculate R/X, transfer back to Data sheet.
            vFplus2 = .Range("A7").Resize([TCcnt], 3)  'First 3 columns
            ReDim Results(1 To [TCcnt], 1 To 4)        'Freq through Xs columns
            Zo = [Refzo]
            
            'Try to catch "rho,deg" files which are really Smith "RhoRe, RhoIm".
            If VNA4WinType = "rho" Then
               For TC = 1 To [TCcnt]
                  If vFplus2(TC, 2) < 0 Then
                     VNA4WinType = "Smith"  'because |Rho| is never < 0
                     Exit For
                  End If
               Next TC
            End If
            
            Select Case VNA4WinType
               Case "|Z| ohms"  '|Z| and Zdeg
                  For TC = 1 To [TCcnt]
                     Results(TC, 1) = vFplus2(TC, 1) / 1000000  'Freq to MHz
                     Results(TC, 3) = vFplus2(TC, 2) * Cos(vFplus2(TC, 3) * DEG2RAD)  'R = |Z| cos Zdeg
                     Results(TC, 4) = vFplus2(TC, 2) * Sin(vFplus2(TC, 3) * DEG2RAD)  'X = |Z| sin Zdeg
                  Next TC
               Case "Rs ohms"  'Rs and Xs
                  For TC = 1 To [TCcnt]
                     Results(TC, 1) = vFplus2(TC, 1) / 1000000  'Freq to MHz
                     Results(TC, 3) = vFplus2(TC, 2)  'R
                     Results(TC, 4) = vFplus2(TC, 3)  'X
                  Next TC
               Case "Rp ohms"  'Rp and Xp
                  For TC = 1 To [TCcnt]
                     Denom = vFplus2(TC, 2) ^ 2 + vFplus2(TC, 3) ^ 2  'Rp^2 + Xp^2
                     If Denom <> 0 Then R = (vFplus2(TC, 2) * vFplus2(TC, 3) ^ 2) / Denom Else R = 99999.99
                     If Denom <> 0 Then X = (vFplus2(TC, 2) ^ 2 * vFplus2(TC, 3)) / Denom Else X = 99999.99
                     Results(TC, 1) = vFplus2(TC, 1) / 1000000  'Freq to MHz
                     Results(TC, 3) = R
                     Results(TC, 4) = X
                  Next TC
               Case "rho"  '|Rho| and RhoDeg
                  For TC = 1 To [TCcnt]
                     RhoReal = vFplus2(TC, 2) * Cos(vFplus2(TC, 3) * DEG2RAD)  'RhoRe = |Rho| cos RhoDeg
                     RhoImag = vFplus2(TC, 2) * Sin(vFplus2(TC, 3) * DEG2RAD)  'RhoIm = |Rho| sin RhoDeg
                     Denom = 1 + RhoMag ^ 2 - 2 * RhoReal
                     If Denom <> 0 Then R = (1 - RhoMag ^ 2) / Denom * Zo Else R = 99999.99
                     If Denom <> 0 Then X = (2 * RhoImag) / Denom * Zo Else X = 0
                     Results(TC, 1) = vFplus2(TC, 1) / 1000000  'Freq to MHz
                     Results(TC, 3) = R
                     Results(TC, 4) = X
                  Next TC
               Case "Smith"  'Smith chart save, RhoRe and RhoIm   ????? currently called "rho"
                  For TC = 1 To [TCcnt]
                     RhoReal = vFplus2(TC, 2)
                     RhoImag = vFplus2(TC, 3)
                     Denom = 1 + RhoMag ^ 2 - 2 * RhoReal
                     If Denom <> 0 Then R = (1 - RhoMag ^ 2) / Denom * Zo Else R = 99999.99
                     If Denom <> 0 Then X = (2 * RhoImag) / Denom * Zo Else X = 0
                     Results(TC, 1) = vFplus2(TC, 1) / 1000000  'Freq to MHz
                     Results(TC, 3) = R
                     Results(TC, 4) = X
                  Next TC
               Case "RL dB"  'RL and RhoDeg
                  For TC = 1 To [TCcnt]
                     RhoMag = 10 ^ (vFplus2(TC, 2) / 20)  '|Rho| = 10 ^ (RL/20)
                     RhoReal = RhoMag * Cos(vFplus2(TC, 3) * DEG2RAD)  'RhoRe = |Rho| cos Rhodeg
                     RhoImag = RhoMag * Sin(vFplus2(TC, 3) * DEG2RAD)  'RhoIm = |Rho| sin Rhodeg
                     Denom = 1 + RhoMag ^ 2 - 2 * RhoReal
                     If Denom <> 0 Then R = (1 - RhoMag ^ 2) / Denom * Zo Else R = 99999.99
                     If Denom <> 0 Then X = (2 * RhoImag) / Denom * Zo Else X = 0
                     Results(TC, 1) = vFplus2(TC, 1) / 1000000  'Freq to MHz
                     Results(TC, 3) = R
                     Results(TC, 4) = X
                  Next TC
               Case "SWR"  'SWR *only*
                  For TC = 1 To [TCcnt]
                     Results(TC, 1) = vFplus2(TC, 1) / 1000000  'Freq to MHz
                     Results(TC, 3) = vFplus2(TC, 2) * Zo  'arbitrarily set R = SWR * Zo
                     Results(TC, 4) = 0                    'and X = 0
                  Next TC
            End Select
            'Transfer back to Data sheet.
            'Fill remainder of sheet, including SWR.
            .Range("A7").Resize([TCcnt], 4).Value = Results
            FillData WithSWR:=True
            If VNA4WinType = "SWR" Then
               'Issue warning message, force XY chart to show SWR.
               MsgBox "Warning: This file contains only SWR data.  Other" & vbLf & _
                      "fields shown by Zplots are completely arbitrary.", , "*** SWR ONLY ***"
               Sheets("Custom").DropDowns("fcboYaxis").ListIndex = 1   'SWR
               fcboYaxis_Change
               If Sheets("Custom").DropDowns("fcboY2axis").ListIndex > 1 Then
                  Sheets("Custom").DropDowns("fcboY2axis").ListIndex = 1  '(none)
                  fcboY2axis_Change
               End If
            End If
         Else
            'Transmission / Group Delay mode.  Similar except fewer fields are calculated.
            vFplus2 = .Range("A7").Resize([TCcnt], 3)  'First 3 columns
            ReDim Results(1 To [TCcnt], 1 To 4)        'Freq through Phase columns
            Select Case VNA4WinType
               Case "Mag"
                  On Error Resume Next
                  For TC = 1 To [TCcnt]
                     Results(TC, 1) = vFplus2(TC, 1) / 1000000  'Freq to MHz
                     Results(TC, 2) = vFplus2(TC, 2)  'Gain mag
                     Results(TC, 3) = 20 * Application.Log10(Results(TC, 2))  'Gain (dB)
                     Results(TC, 4) = vFplus2(TC, 3)  'Phase (deg)
                     If Results(TC, 2) = 0 Then Results(TC, 3) = -999
                  Next TC
                  On Error GoTo 0
               Case "dB"
                  For TC = 1 To [TCcnt]
                     Results(TC, 1) = vFplus2(TC, 1) / 1000000    'Freq to MHz
                     Results(TC, 2) = 10 ^ (vFplus2(TC, 2) / 20)  'Gain mag
                     Results(TC, 3) = vFplus2(TC, 2)  'Gain (dB)
                     Results(TC, 4) = vFplus2(TC, 3)  'Phase (deg) / Delay (uS)
                  Next TC
            End Select
            'Transfer back to Data sheet.
            .Range("A7").Resize([TCcnt], 4).Value = Results
         End If
      '#####   VNA4Win   #####
         
      '#####   Exeter   #####
      ElseIf FromSht.Range("A1") = "Exeter" Then
         'Exeter sweep file.
         'Transfer various header lines.
         .Range("A2").Formula = "Exeter version " & FromSht.Range("B1").Formula
         .Range("A3").Formula = FromSht.Range("C1").Formula
         .Range("E4").Formula = "ADC Rate = " & FromSht.Range("B6").Formula
         .Range("H4").Formula = "Average = " & FromSht.Range("B7").Formula
         .[Refzo].Formula = 50  'default 50
         
         'Delete the extra "Feed System" row, if any.
         If FromSht.Range("A8") = "Feed System" Then
            FromSht.Rows(8).Delete
         End If
         
         'Set a range for just the scan points numeric data, then transfer in.
         'Only care about Freq, RhoRe, RhoIm.  Remaining columns, if any, ignored.
         '==> For "S21" transmission type files the fields will be GainRe, GainIm.
         'Close source workbook, which also activates the previous book, me.
         Set rngFrom = Range(FromSht.Range("A10"), FromSht.Range("C9").End(xlDown))
         TransferToData rngFrom  'also sets [TCcnt]
         If FromSht.Range("B3") = " ""S21""" Then Mode = "T"  'normally "R"
         Workbooks(FromBk).Close SaveChanges:=False
         
         If Mode = "R" Then
            'Reflection mode.
            'Load a * x 3 range into vFplus2, Freq-Hz plus Exeter RhoRe/RhoIm.
            'Change Freq to MHz, calculate R/X, transfer back to Data sheet.
            vFplus2 = .Range("A7").Resize([TCcnt], 3)  'First 3 columns
            ReDim Results(1 To [TCcnt], 1 To 4)        'Freq through Xs columns
            Zo = [Refzo]
            For TC = 1 To [TCcnt]
               RhoReal = vFplus2(TC, 2)
               RhoImag = vFplus2(TC, 3)
               RhoMag = Sqr(RhoReal ^ 2 + RhoImag ^ 2)
               'Find R and X.
               Denom = 1 + RhoMag ^ 2 - 2 * RhoReal
               If Denom <> 0 Then R = (1 - RhoMag ^ 2) / Denom * Zo Else R = 99999.99
               If Denom <> 0 Then X = (2 * RhoImag) / Denom * Zo Else X = 0
               'Set return array.
               Results(TC, 1) = vFplus2(TC, 1) / 1000000  'Freq to MHz
               Results(TC, 3) = R
               Results(TC, 4) = X
            Next TC
            'Transfer back to Data sheet.
            'Fill remainder of sheet, including SWR.
            .Range("A7").Resize([TCcnt], 4).Value = Results
            FillData WithSWR:=True
         Else
            'Transmission mode.  Similar except fewer fields are calculated.
            vFplus2 = .Range("A7").Resize([TCcnt], 3)  'First 3 columns
            ReDim Results(1 To [TCcnt], 1 To 4)        'Freq through Phase columns
            On Error Resume Next
            For TC = 1 To [TCcnt]
               RhoReal = vFplus2(TC, 2)  'actually GainReal
               RhoImag = vFplus2(TC, 3)  'and GainImag
               'Set return array.
               Results(TC, 1) = vFplus2(TC, 1) / 1000000  'Freq to MHz
               Results(TC, 2) = Sqr(RhoReal ^ 2 + RhoImag ^ 2)  'Gain mag
               Results(TC, 3) = 20 * Application.Log10(Results(TC, 2))  'Gain (dB)
               Results(TC, 4) = Application.Atan2(RhoReal, RhoImag) * RAD2DEG  'Phase (deg)
               If Results(TC, 2) = 0 Then Results(TC, 3) = -999
            Next TC
            On Error GoTo 0
            'Transfer back to Data sheet.
            .Range("A7").Resize([TCcnt], 4).Value = Results
         End If
      '#####   Exeter   #####
         
      '#####   VNA1/miniVNA/miniVNA PRO   #####
       ElseIf FromSht.Range("A1") = "Frequency(Hz)" Then
         'VNA1/miniVNA sweep file.
         'No header info present.
         '>>> NOTE <<<
         'The following string is used as a test in frmMeasureTL proc btnOK1_Click.
         'Coordinate any changes.
         .Range("A2").Formula = "VNA1 / miniVNA / miniVNA PRO"  '<<< See Note above
         .[Refzo].Formula = 50  'default 50
         
         'Set a range for just the scan points numeric data, then transfer in.
         'Close source workbook, which also activates the previous book, me.
         Set rngFrom = Range(FromSht.Range("A2"), FromSht.Range("C1").End(xlDown))
         TransferToData rngFrom  'also sets [TCcnt]
         If FromSht.Range("B1") = "Return Loss(dB)" Then  'Reflection mode
            If FromSht.Range("C1") = "Phase(deg)" Then  'unsigned Phase
               'SignX option buttons only shown for VNA1/miniVNA (not Pro) in
               'Reflection mode.  Then use current value of [SignXMethod] below.
               ThisWorkbook.Sheets("Custom").Shapes("grpSignX").Visible = True
               ThisWorkbook.Sheets("Smith").Shapes("grpSignX").Visible = True
            Else  'C1 = "|fffd|Phase(deg)"
               'Data from miniVNA Pro, leave Phase signed as is.
               .[SignXMethod].Value = 2
            End If
         Else  'B1 = "Transmission Loss(dB)"
            Mode = "T"  'normally "R"
         End If
         Workbooks(FromBk).Close SaveChanges:=False
         
         If Mode = "R" Then
            'Reflection mode.
            'Load a * x 3 range into vFplus2.
            'Calculate Freq in MHz, calculate R/X, transfer back to Data sheet.
            'Note that RL is given as positive.
            vFplus2 = .Range("A7").Resize([TCcnt], 3)  'Freq, RL, Phase
            ReDim Results(1 To [TCcnt], 1 To 4)        'Freq through Xs columns
            Zo = [Refzo]
   
            Dim Phase() As Double
            ReDim Phase(1 To [TCcnt])
            Dim GR() As Double
            Dim GI() As Double
            ReDim GR(1 To [TCcnt])
            ReDim GI(1 To [TCcnt])
            Dim SignX() As Integer
            ReDim SignX(1 To [TCcnt])
            For TC = 1 To [TCcnt]
               RhoMag = 10 ^ (-vFplus2(TC, 2) / 20)  '|Rho| = 10 ^ (RL/20)
               RhoReal = RhoMag * Cos(vFplus2(TC, 3) * DEG2RAD)  'RhoRe = |Rho| cos Rhodeg
               RhoImag = RhoMag * Sin(vFplus2(TC, 3) * DEG2RAD)  'RhoIm = |Rho| sin Rhodeg
               Denom = 1 + RhoMag ^ 2 - 2 * RhoReal
               If Denom <> 0 Then R = (1 - RhoMag ^ 2) / Denom * Zo Else R = 99999.99
               If Denom <> 0 Then X = (2 * RhoImag) / Denom * Zo Else X = 0
               Results(TC, 1) = vFplus2(TC, 1) / 1000000  'Freq to MHz
               Results(TC, 3) = R
               Results(TC, 4) = X
               Phase(TC) = vFplus2(TC, 3)
               GR(TC) = RhoReal
               GI(TC) = RhoImag
            Next TC
            
            Select Case [SignXMethod]
               Case 1  'None
                  'Leave X as positive only (or as signed for miniVNA Pro).
               Case 2  'via Phase
                  'Determine the sign of X based on Phase changes at (or near) 0 and 180 degrees.
                  SignXviaPhase Phase, SignX
                  'Change the sign of X.  Note that Phase is recalculated later in common
                  'code shared by all recognized file types, no need to correct it here.
                  For TC = 1 To [TCcnt]
                     Results(TC, 4) = Results(TC, 4) * SignX(TC)
                  Next TC
               Case 3  'via Rotation
                  'Determine the sign of X based on clockwise rotation of GR/GI (Smith) points.
                  SignXviaGRGI GR, GI, SignX
                  'Change the sign of X.  Note that GI is recalculated later in common
                  'code shared by all recognized file types, no need to correct it here.
                  For TC = 1 To [TCcnt]
                     Results(TC, 4) = Results(TC, 4) * SignX(TC)
                  Next TC
            End Select
      
            'Transfer back to Data sheet.
            'Fill remainder of sheet, including SWR.
            .Range("A7").Resize([TCcnt], 4).Value = Results
            FillData WithSWR:=True
         Else
            'Transmission mode.
            'Note that TL is given as positive.
            vFplus2 = .Range("A7").Resize([TCcnt], 3)  'First 3 columns
            ReDim Results(1 To [TCcnt], 1 To 4)        'Freq through Phase columns
            For TC = 1 To [TCcnt]
               Results(TC, 1) = vFplus2(TC, 1) / 1000000     'Freq to MHz
               Results(TC, 2) = 10 ^ (-vFplus2(TC, 2) / 20)  'Gain mag
               Results(TC, 3) = -vFplus2(TC, 2)              'Gain (dB)
               Results(TC, 4) = vFplus2(TC, 3)               'Phase (deg)
            Next TC
            'Transfer back to Data sheet.
            .Range("A7").Resize([TCcnt], 4).Value = Results
         End If
         
         'Set Min/Max frequencies for horizontal scale.
         'Adjust MinFreq down by 1 step increment.  VNA1/miniVNA poor logic.
         'Don't do this if the miniVNA file was created by Zplots, I included the start freq.
         '>>>Update v1.5:  Not all programs had this problem and the original miniVNA
         'has fixed the problem.  Just use the shared logic at the end of this proc
         'for setting the Min/Max on the horizontal scale.
'''         If .Range("C2").Value <> "(via Zplots)" Then
'''            MinFreq = Results(1, 1) - (Results(2, 1) - Results(1, 1))
'''            MaxFreq = Results([TCcnt], 1)
'''         End If
      '#####   VNA1/miniVNA/miniVNA PRO   #####
      
      '#####   Generic s1p/s2p or myVNA equivalent   #####
      ElseIf Right(FileToOpen, 4) = ".s1p" Or Right(FileToOpen, 4) = ".s2p" _
             Or myVNAs1p Or myVNAs2p Then
         
         'Delete any lines before the option line.
         Do While FromSht.Range("A1").Value <> "#" And LastRow > 1
            FromSht.Rows(1).Delete Shift:=xlUp
            LastRow = LastRow - 1
         Loop
         If FromSht.Range("A1").Value <> "#" Then  'option line not found
            MsgBox "File" & vbLf & FileToOpen & vbLf & _
                   "is not a recognized format." & vbLf & _
                   "(Option line '# ...' is missing.)", _
                   vbExclamation + vbOKOnly, "File Not Recognized"
            Workbooks(FromBk).Close SaveChanges:=False
            GoTo Quit
         End If
         
         'Reconstruct the set of options, with a trailing space.
         For Each rngOpt In FromSht.Range("B1:F1")
            strOptions = strOptions & " " & rngOpt.Text
         Next rngOpt
         strOptions = strOptions & " "
         
         'Make sure data type is 'S', which is the default.
         If InStr(strOptions, " Y ") > 0 Or InStr(strOptions, " Z ") > 0 Or _
            InStr(strOptions, " H ") > 0 Or InStr(strOptions, " G ") > 0 Then
            MsgBox "File" & vbLf & FileToOpen & vbLf & _
                   "is not a recognized format." & vbLf & _
                   "(Only data type 'S' is supported by Zplots.)", _
                   vbExclamation + vbOKOnly, "File Not Recognized"
            Workbooks(FromBk).Close SaveChanges:=False
            GoTo Quit
         End If
         
         'Get frequency units multiplier to convert to MHz.
         If InStr(strOptions, " Hz ") > 0 Then
            SnPFreqMult = 0.000001
         ElseIf InStr(strOptions, " KHz ") > 0 Then
            SnPFreqMult = 0.001
         ElseIf InStr(strOptions, " MHz ") > 0 Then
            SnPFreqMult = 1
         ElseIf InStr(strOptions, " GHz ") > 0 Then
            SnPFreqMult = 1000
         Else
            SnPFreqMult = 1000  'default is GHz
         End If
         
         'Keep track of s1p/s2p format, may be 'DB'/'MA'/'RI'.
         If InStr(strOptions, " DB ") > 0 Then
            SnPFormat = "DB"
         ElseIf InStr(strOptions, " MA ") > 0 Then
            SnPFormat = "MA"
         ElseIf InStr(strOptions, " RI ") > 0 Then
            SnPFormat = "RI"
         Else
            SnPFormat = "MA"  'default
         End If
         
         'Get RefZo.
         If InStr(strOptions, " R ") > 0 Then
            strOptions = Mid(strOptions, InStr(strOptions, " R ") + 3)
            .[Refzo].Formula = Left(strOptions, InStr(strOptions, " ") - 1)
            If Not IsNumeric(.[Refzo].Formula) Then
               MsgBox "File" & vbLf & FileToOpen & vbLf & _
                      "is not a recognized format." & vbLf & _
                      "(Reference resistance '" & .[Refzo].Formula & "' not valid.)", _
                      vbExclamation + vbOKOnly, "File Not Recognized"
               Workbooks(FromBk).Close SaveChanges:=False
               GoTo Quit
            End If
         Else
            .[Refzo].Formula = 50  'default
         End If
         
         'In the lines following the option line (which is now row 1):
         '  Delete any comment lines.
         '  Delete any blank lines (check col B, not A, see next).
         '  Shift left any data lines that are blank in col A (result of
         '  parsing on spaces when Freq values have leading blanks).
         'Note 1.  LastRow was set to the last filled row when reading file,
         '         minus any lines before the option line already deleted, above.
         'Note 2.  Instead of making 3 references to the sheet for each line
         '         (check for comment in col A, check for empty in col B, check for
         '         empty in col A), just make 1 reference to transfer all col A:B
         '         data to a variant.  Then check the elements of the variant rather
         '         than the sheet.  Runs about 70% faster.
         vColsAB = FromSht.Range("A1").Resize(LastRow, 2)
         For Rw = LastRow To 2 Step -1
            If Left(vColsAB(Rw, 1), 1) = "!" Then
               FromSht.Rows(Rw).Delete Shift:=xlUp  'comment, delete
            ElseIf vColsAB(Rw, 2) = "" Then
               FromSht.Rows(Rw).Delete Shift:=xlUp  'empty line, delete
            ElseIf vColsAB(Rw, 1) = "" Then
               FromSht.Cells(Rw, 1).Delete Shift:=xlToLeft  'empty col A, shift left
            End If
         Next Rw
         
         'Update v2.4:  AntScope allows scans starting at Freq=0.  Delete if found.
         If FromSht.Cells(2, 1) = 0 Then FromSht.Rows(2).Delete Shift:=xlUp
         
         'Warning:  When using the .End method in code below, use
         '  FromSht.Range("_65536").End(xlUp)
         'instead of
         '  FromSht.Range("_1").End(xlDown)
         'Necessary if a) option line is empty (all defaults) and/or b) only 1 data point.
         
         If Right(FileToOpen, 4) = ".s2p" Or myVNAs2p Then
            'S2P format, Freq + 8 data columns.
            'Delete any noise data at the end of the file.
            'Note that noise data is only 5 columns wide.
            LastRwColA = FromSht.Range("A65536").End(xlUp).Row
            LastRwColI = FromSht.Range("I65536").End(xlUp).Row
            If LastRwColA > LastRwColI Then
               Range(FromSht.Cells(LastRwColI + 1, 1), FromSht.Cells(LastRwColA, 9)).Delete
            End If
            
            'If requested (fbtnChangeS2P), query user as to which data is to be used.
            'Otherwise, set [WhichS2P] based on last use of frmWhichS2P.
            If AskS2P Then
               Load frmWhichS2P
               frmWhichS2P.FileToOpen.Caption = FileToOpen
               frmWhichS2P.Show  'sets [WhichS2P] on Terminate
            Else
               ThisWorkbook.Sheets("Data").Range("WhichS2P").Value = _
                  ThisWorkbook.Sheets("Data").Range("FormWhichS2P").Value
            End If
            
            'For myVNAs2p type files, must swap S22 and S12 columns to be
            'consistent with standard Touchstone column layout.
            If myVNAs2p Then
               Columns("H:I").Cut
               Columns("F:F").Insert Shift:=xlToRight
            End If
            
            Select Case ThisWorkbook.Sheets("Data").Range("WhichS2P").Value
               Case " (S11)"
                  'Use S11 data in cols B:C, Mode R
                  'No column delete/shift required
               Case " (S21)"
                  'Use S21 data in cols D:E, Mode T
                  Columns("B:C").Delete Shift:=xlToLeft
                  Mode = "T"
               Case " (S12)"
                  'Use S12 data in cols F:G, Mode T
                  Columns("B:E").Delete Shift:=xlToLeft
                  Mode = "T"
               Case " (S22)"
                  'Use S22 data in cols H:I, Mode R
                  Columns("B:G").Delete Shift:=xlToLeft
               Case " (S11/S21)"
                  'First capture S21 data (D:E) to cols AJ:AL.  Note FromSht col C
                  '(to Data sheet AI) is unused, included just to match normal from/to
                  'widths of variables vFplus2 and Results, below.
                  Set rngFrom = Range(FromSht.Range("C2"), FromSht.Range("E65536").End(xlUp))
                  TransferToData rngFrom, "AI7"
                  
                  'Primarily use S11 data in cols B:C, Mode RT
                  'No column delete/shift required
                  Mode = "RT"
               Case " (S22/S12)"
                  'First capture S12 data (F:G) to cols AJ:AL.  Note FromSht col E
                  '(to Data sheet AI) is unused, included just to match normal from/to
                  'widths of variables vFplus2 and Results, below.
                  Set rngFrom = Range(FromSht.Range("E2"), FromSht.Range("G65536").End(xlUp))
                  TransferToData rngFrom, "AI7"
                  
                  'Primarily use S22 data in cols H:I, Mode RT
                  Columns("B:G").Delete Shift:=xlToLeft
                  Mode = "RT"
            End Select
            
            'Show "Change S2P Subset(s)" buttons.
            ThisWorkbook.Sheets("Data").Shapes("fbtnChangeS2P").Visible = True
            ThisWorkbook.Sheets("Custom").Shapes("fbtnChangeS2P").Visible = True
            ThisWorkbook.Sheets("Smith").Shapes("fbtnChangeS2P").Visible = True
         End If
         
         'Set a range for just the data to be used, then transfer in.
         'Close source workbook, which also activates the previous book, me.
         Set rngFrom = Range(FromSht.Range("A2"), FromSht.Range("C65536").End(xlUp))
         TransferToData rngFrom  'also sets [TCcnt]
         Workbooks(FromBk).Close SaveChanges:=False
         
         'Also transfer first 3 comment lines (if present), set during file read.
         .Range("A2").Value = SnPCom1
         .Range("A3").Value = SnPCom2
         .Range("A4").Value = SnPCom3
         
         If Mode = "R" Or Mode = "RT" Then
            'Reflection mode (exclusively or primarily).
            'Load a * x 3 range into vFplus2, Freq-Hz plus S11 fields.
            'Change Freq to MHz, calculate R/X, transfer back to Data sheet.
            vFplus2 = .Range("A7").Resize([TCcnt], 3)  'First 3 columns
            ReDim Results(1 To [TCcnt], 1 To 4)        'Freq through Xs columns
            Zo = [Refzo]
            
            Select Case SnPFormat
               Case "DB"  'RL(dB) and RhoDeg
                  For TC = 1 To [TCcnt]
                     RhoMag = 10 ^ (vFplus2(TC, 2) / 20)  '|Rho| = 10 ^ (RL/20)
                     RhoReal = RhoMag * Cos(vFplus2(TC, 3) * DEG2RAD)  'RhoRe = |Rho| cos Rhodeg
                     RhoImag = RhoMag * Sin(vFplus2(TC, 3) * DEG2RAD)  'RhoIm = |Rho| sin Rhodeg
                     'Find R and X.
                     Denom = 1 + RhoMag ^ 2 - 2 * RhoReal
                     If Denom <> 0 Then R = (1 - RhoMag ^ 2) / Denom * Zo Else R = 99999.99
                     If Denom <> 0 Then X = (2 * RhoImag) / Denom * Zo Else X = 0
                     'Set return array.
                     Results(TC, 1) = vFplus2(TC, 1) * SnPFreqMult  'Freq to MHz
                     Results(TC, 3) = R
                     Results(TC, 4) = X
                  Next TC
               Case "MA"  'RL(mag) and RhoDeg
                  For TC = 1 To [TCcnt]
                     RhoMag = vFplus2(TC, 2)
                     RhoReal = RhoMag * Cos(vFplus2(TC, 3) * DEG2RAD)  'RhoRe = |Rho| cos Rhodeg
                     RhoImag = RhoMag * Sin(vFplus2(TC, 3) * DEG2RAD)  'RhoIm = |Rho| sin Rhodeg
                     'Find R and X.
                     Denom = 1 + RhoMag ^ 2 - 2 * RhoReal
                     If Denom <> 0 Then R = (1 - RhoMag ^ 2) / Denom * Zo Else R = 99999.99
                     If Denom <> 0 Then X = (2 * RhoImag) / Denom * Zo Else X = 0
                     'Set return array.
                     Results(TC, 1) = vFplus2(TC, 1) * SnPFreqMult  'Freq to MHz
                     Results(TC, 3) = R
                     Results(TC, 4) = X
                  Next TC
               Case "RI"  'RhoReal and RhoImag
                  For TC = 1 To [TCcnt]
                     RhoReal = vFplus2(TC, 2)
                     RhoImag = vFplus2(TC, 3)
                     RhoMag = Sqr(RhoReal ^ 2 + RhoImag ^ 2)
                     'Find R and X.
                     Denom = 1 + RhoMag ^ 2 - 2 * RhoReal
                     If Denom <> 0 Then R = (1 - RhoMag ^ 2) / Denom * Zo Else R = 99999.99
                     If Denom <> 0 Then X = (2 * RhoImag) / Denom * Zo Else X = 0
                     'Set return array.
                     Results(TC, 1) = vFplus2(TC, 1) * SnPFreqMult  'Freq to MHz
                     Results(TC, 3) = R
                     Results(TC, 4) = X
                  Next TC
            End Select
            
            'Transfer back to Data sheet.
            'Fill remainder of sheet, including SWR.
            .Range("A7").Resize([TCcnt], 4).Value = Results
            FillData WithSWR:=True
            
            If Mode = "RT" Then
               'Calculate S21/S12 fields (except freq, not used), replace on Data sheet.
               vFplus2 = .Range("AI7").Resize([TCcnt], 3)
               ReDim Results(1 To [TCcnt], 1 To 4)
               Select Case SnPFormat
                  Case "DB"  'TL(dB) and Phase(deg)
                     For TC = 1 To [TCcnt]
                        Results(TC, 2) = 10 ^ (vFplus2(TC, 2) / 20)  'TL(mag) from dB
                        Results(TC, 3) = vFplus2(TC, 2)  'TL(dB)
                        Results(TC, 4) = vFplus2(TC, 3)  'Phase(deg)
                     Next TC
                  Case "MA"  'TL(mag) and Phase(deg)
                     On Error Resume Next
                     For TC = 1 To [TCcnt]
                        Results(TC, 2) = vFplus2(TC, 2)  'TL(mag)
                        Results(TC, 3) = 20 * Application.Log10(Results(TC, 2))  'TL(dB) from mag
                        Results(TC, 4) = vFplus2(TC, 3)  'Phase(deg)
                        If Results(TC, 2) = 0 Then Results(TC, 3) = -999
                     Next TC
                     On Error GoTo 0
                  Case "RI"  'Real and Imag
                     On Error Resume Next
                     For TC = 1 To [TCcnt]
                        RhoReal = vFplus2(TC, 2)  'actually TLReal ...
                        RhoImag = vFplus2(TC, 3)  '... and TLImag
                        Results(TC, 2) = Sqr(RhoReal ^ 2 + RhoImag ^ 2)  'TL(mag)
                        Results(TC, 3) = 20 * Application.Log10(Results(TC, 2))  'TL(dB) from mag
                        Results(TC, 4) = Application.Atan2(RhoReal, RhoImag) * RAD2DEG  'Phase(deg)
                        If Results(TC, 2) = 0 Then Results(TC, 3) = -999
                     Next TC
                     On Error GoTo 0
               End Select
               .Range("AI7").Resize([TCcnt], 4).Value = Results
            End If
         Else
            'Transmission mode.  Similar except fewer fields are calculated.
            vFplus2 = .Range("A7").Resize([TCcnt], 3)  'First 3 columns
            ReDim Results(1 To [TCcnt], 1 To 4)        'Freq through Phase columns
            
            Select Case SnPFormat
               Case "DB"  'TL(dB) and Phase(deg)
                  For TC = 1 To [TCcnt]
                     Results(TC, 1) = vFplus2(TC, 1) * SnPFreqMult  'Freq to MHz
                     Results(TC, 2) = 10 ^ (vFplus2(TC, 2) / 20)  'TL(mag) from dB
                     Results(TC, 3) = vFplus2(TC, 2)  'TL(dB)
                     Results(TC, 4) = vFplus2(TC, 3)  'Phase(deg)
                  Next TC
               Case "MA"  'TL(mag) and Phase(deg)
                  On Error Resume Next
                  For TC = 1 To [TCcnt]
                     Results(TC, 1) = vFplus2(TC, 1) * SnPFreqMult  'Freq to MHz
                     Results(TC, 2) = vFplus2(TC, 2)  'TL(mag)
                     Results(TC, 3) = 20 * Application.Log10(Results(TC, 2))  'TL(dB) from mag
                     Results(TC, 4) = vFplus2(TC, 3)  'Phase(deg)
                     If Results(TC, 2) = 0 Then Results(TC, 3) = -999
                  Next TC
                  On Error GoTo 0
               Case "RI"  'Real and Imag
                  On Error Resume Next
                  For TC = 1 To [TCcnt]
                     RhoReal = vFplus2(TC, 2)  'actually TLReal ...
                     RhoImag = vFplus2(TC, 3)  '... and TLImag
                     Results(TC, 1) = vFplus2(TC, 1) * SnPFreqMult  'Freq to MHz
                     Results(TC, 2) = Sqr(RhoReal ^ 2 + RhoImag ^ 2)  'TL(mag)
                     Results(TC, 3) = 20 * Application.Log10(Results(TC, 2))  'TL(dB) from mag
                     Results(TC, 4) = Application.Atan2(RhoReal, RhoImag) * RAD2DEG  'Phase(deg)
                     If Results(TC, 2) = 0 Then Results(TC, 3) = -999
                  Next TC
                  On Error GoTo 0
            End Select
            
            'Transfer back to Data sheet.
            .Range("A7").Resize([TCcnt], 4).Value = Results
         End If
      '#####   Generic s1p/s2p or myVNA equivalent   #####
      
      '#####   REFL.DAT/TRANS.DAT/GRPDEL.DAT   #####
      ElseIf FromSht.Range("E1") = "Reflection" Or _
             FromSht.Range("E1") = "  |G|.dB " Or _
             FromSht.Range("E1") = " mean |G| " Then
         'First look for multiple DUT entries.
         Dim StartRowDUT(1 To 100) As Integer
         Dim NumDUTs As Integer
         Dim vDUT As Variant
         NumDUTs = 0
         For Each cFind In Range(Range("E1"), Range("E1").End(xlDown))
            If cFind = "Reflection" Or cFind = "  |G|.dB " Or cFind = " mean |G| " Then
               Select Case cFind
                  Case "Reflection"
                     Mode = "R"
                  Case "  |G|.dB "
                     Mode = "T"
                  Case " mean |G| "
                     Mode = "G"
               End Select
               NumDUTs = NumDUTs + 1
               StartRowDUT(NumDUTs) = cFind.Row
               cFind.EntireRow.ClearContents  'marks end of previous DUT set
            End If
         Next cFind
         If NumDUTs > 1 Then
            vDUT = Application.InputBox( _
                           Prompt:="This file contains " & NumDUTs & " DUT data sets." & vbLf & _
                                   "Enter the number (default 1) for the DUT set to show." & vbLf & _
                                   "To show a different DUT set, reload the data and" & vbLf & "enter a different number.", _
                           Title:="Multiple DUT data sets", Default:=1, Type:=1)
            If vDUT = False Or vDUT < 1 Or vDUT > NumDUTs Then vDUT = 1
            If vDUT > 1 Then
               'Delete all rows above the start of this DUT set.  Makes logic below simpler.
               Range(Cells(1, 1), Cells(StartRowDUT(vDUT) - 1, 1)).EntireRow.Delete
            End If
         End If
         
         'Transfer various header lines.  Note that DUT description text field does not have
         'double quotes, hence embedded commas are parsed out.  Put back together.
         Select Case Mode
            Case "R"
               .Range("A2").Formula = "REFL.DAT type file"
               .Range("A3").Formula = "Data collected on " & CDate(Range("A4")) & " at " & CDate(Range("B4"))
               DUTdesc = Range("AF4").Text & "," & _
                         Range("AG4").Text & "," & _
                         Range("AH4").Text & "," & _
                         Range("AI4").Text & "," & _
                         Range("AJ4").Text
               Do While Right(DUTdesc, 1) = ","
                  DUTdesc = Left(DUTdesc, Len(DUTdesc) - 1)
               Loop
               .Range("A4").Formula = DUTdesc
               .[Refzo].Formula = Range("Y4").Formula
            
               'Delete, cut/insert, and clear columns to match Zplots column layout.
               '(This came from a recorded macro.)
               Columns("A:B").Delete Shift:=xlToLeft
               Columns("B:C").Cut
               Columns("U:U").Insert Shift:=xlToRight
               Columns("B:B").Cut
               Columns("J:J").Insert Shift:=xlToRight
               Columns("C:C").Cut
               Columns("J:J").Insert Shift:=xlToRight
               Columns("B:B").Cut
               Columns("J:J").Insert Shift:=xlToRight
               Columns("I:I").Insert Shift:=xlToRight
               Columns("L:L").Cut
               Columns("P:P").Insert Shift:=xlToRight
               Columns("L:L").Cut
               Columns("O:O").Insert Shift:=xlToRight
               Columns("R:R").Cut
               Columns("T:T").Insert Shift:=xlToRight
               Columns("P:Q").Delete Shift:=xlToLeft
               'Update v1.5:  Account for Phase <-> %RefPwr column swap.
               Columns("I:I").Delete Shift:=xlToLeft
               Columns("J:J").Insert Shift:=xlToRight
            
               'Set a range for appropriate columns (ignoring headers), transfer in.
               'Close source workbook, which also activates the previous book, me.
               'Set RL negative, calculate %RefPwr.
               Set rngFrom = Range(Range("A4"), Range("A3").End(xlDown).Offset(, 18))
               TransferToData rngFrom  'also sets [TCcnt]
               Workbooks(FromBk).Close SaveChanges:=False
               vRhoRL = .Range("G7").Resize([TCcnt], 2)  'Rho, RL columns
               ReDim Results(1 To [TCcnt], 1 To 1)
               For TC = 1 To [TCcnt]
                  Results(TC, 1) = -vRhoRL(TC, 2)  'negative RL
               Next TC
               .Range("H7").Resize([TCcnt], 1).Value = Results  '"H" = RL column
               For TC = 1 To [TCcnt]
                  Results(TC, 1) = vRhoRL(TC, 1) ^ 2 * 100  '%RefPwr = Rho^2 * 100
               Next TC
               'Update v1.5:  Account for Phase <-> %RefPwr column swap.
               .Range("J7").Resize([TCcnt], 1).Value = Results  '"J" = %RefPwr column
            Case "T"
               .Range("A2").Formula = "TRANS.DAT type file"
               .Range("A3").Formula = "Data collected on " & CDate(Range("A3")) & " at " & CDate(Range("B3"))
               DUTdesc = Range("J3").Text & "," & _
                         Range("K3").Text & "," & _
                         Range("L3").Text & "," & _
                         Range("M3").Text & "," & _
                         Range("N3").Text
               Do While Right(DUTdesc, 1) = ","
                  DUTdesc = Left(DUTdesc, Len(DUTdesc) - 1)
               Loop
               .Range("A4").Formula = DUTdesc
            
               'Delete, cut/insert, and clear columns to match Zplots column layout.
               Columns("A:B").Delete Shift:=xlToLeft
            
               'Set a range for appropriate columns (ignoring headers), transfer in.
               'Close source workbook, which also activates the previous book, me.
               'Nothing else to do.
               Set rngFrom = Range(Range("A3"), Range("A2").End(xlDown).Offset(, 3))
               TransferToData rngFrom  'also sets [TCcnt]
               Workbooks(FromBk).Close SaveChanges:=False
            Case "G"
               .Range("A2").Formula = "GRPDEL.DAT type file"
               .Range("A3").Formula = "Data collected on " & CDate(Range("A3")) & " at " & CDate(Range("B3"))
               DUTdesc = Range("M3").Text & "," & _
                         Range("N3").Text & "," & _
                         Range("O3").Text & "," & _
                         Range("P3").Text & "," & _
                         Range("Q3").Text
               Do While Right(DUTdesc, 1) = ","
                  DUTdesc = Left(DUTdesc, Len(DUTdesc) - 1)
               Loop
               .Range("A4").Formula = DUTdesc
            
               'Delete, cut/insert, and clear columns to match Zplots column layout.
               Columns("A:B").Delete Shift:=xlToLeft
               Columns("B:B").Delete Shift:=xlToLeft
               Columns("D:E").Delete Shift:=xlToLeft
            
               'Set a range for appropriate columns (ignoring headers), transfer in.
               'Close source workbook, which also activates the previous book, me.
               'Change Grp Delay to |fffd|sec.
               Set rngFrom = Range(Range("A3"), Range("A2").End(xlDown).Offset(, 3))
               TransferToData rngFrom  'also sets [TCcnt]
               Workbooks(FromBk).Close SaveChanges:=False
               vRhoRL = .Range("D7").Resize([TCcnt], 1)  'Grp Delay column
               ReDim Results(1 To [TCcnt], 1 To 1)
               For TC = 1 To [TCcnt]
                  Results(TC, 1) = vRhoRL(TC, 1) * 1000000  'Grp Delay to |fffd|sec
               Next TC
               .Range("D7").Resize([TCcnt], 1).Value = Results
         End Select
      '#####   REFL.DAT/TRANS.DAT/GRPDEL.DAT   #####
         
      '#####   EZNEC   #####
      ElseIf Left(FromSht.Range("A1"), 5) = "EZNEC" Then
         'EZNEC LastZ.txt file.
         'Transfer date/time, comment line, and RefZo.
         .Range("A2").Formula = "Created on: " & FromSht.Range("B2").Value
         .Range("A3:A4").Formula = FromSht.Range("A1:A2").Formula
         .[Refzo].Formula = 50  'always 50 from EZNEC for first SWR column
         
         'If multiple sources, ask user which one to display.
         If FromSht.Range("B4").End(xlDown) <> 1 Then  'last row Src# <> 1, multiple sources
            vSrc = Application.InputBox( _
                           Prompt:="This file contains impedance data for " & FromSht.Range("B4").End(xlDown) & " sources." & vbLf & _
                                   "Enter the number (default 1) for the source to show." & vbLf & _
                                   "To show a different source, reload the data and" & vbLf & "enter a different number.", _
                           Title:="Multiple Sources", Default:=1, Type:=1)
            If vSrc = False Or vSrc < 1 Or vSrc > FromSht.Range("B4").End(xlDown) Then vSrc = 1
            For Each cSrc In Range(FromSht.Range("B5"), FromSht.Range("B4").End(xlDown))
               If cSrc.Value = vSrc Then cSrc.Value = 0  'set the one of interest to 0
            Next cSrc
            Range(FromSht.Range("A5"), FromSht.Range("F4").End(xlDown)). _
                  Sort Key1:=Range("B5"), Order1:=xlAscending, Header:=xlNo
            For Each cSrc In Range(FromSht.Range("B5"), FromSht.Range("B4").End(xlDown))
               If cSrc.Value > 0 Then
                  cSrc.Offset(, 2).ClearContents  'Clear X cell, then the 'set rngFrom'
                  Exit For                        'below will stop one cell above here.
               End If
            Next cSrc
         End If
         
         'Move SWR(50) values from column E to column B.
         FromSht.Columns("E:E").Cut Destination:=FromSht.Columns("B:B")
         
         'Set a range for just the Freq, [copied] SWR, R, and X columns, then transfer in.
         'Close source workbook, which also activates the previous book, me.
         'Fill remainder of Data sheet.
         Set rngFrom = Range(FromSht.Range("A5"), FromSht.Range("D4").End(xlDown))
         TransferToData rngFrom  'also sets [TCcnt]
         Workbooks(FromBk).Close SaveChanges:=False
         FillData
      '#####   EZNEC   #####
         
      '#####   AM (Antenna Model)   #####
      ElseIf Left(FromSht.Range("A2"), 7) = "Antenna" Then
         'AM Impedances csv file.
         'Transfer header fields.
         .Range("A2:A4").Formula = FromSht.Range("A1:A3").Formula
         
         'If multiple sources, ask user which one to display.
         If FromSht.Range("B4").End(xlDown) <> 1 Then  'last row Src# <> 1, multiple sources
            vSrc = Application.InputBox( _
                           Prompt:="This file contains impedance data for " & FromSht.Range("B4").End(xlDown) & " sources." & vbLf & _
                                   "Enter the number (default 1) for the source to show." & vbLf & _
                                   "To show a different source, reload the data and" & vbLf & "enter a different number.", _
                           Title:="Multiple Sources", Default:=1, Type:=1)
            If vSrc = False Or vSrc < 1 Or vSrc > FromSht.Range("B4").End(xlDown) Then vSrc = 1
            For Each cSrc In Range(FromSht.Range("B5"), FromSht.Range("B4").End(xlDown))
               If cSrc.Value = vSrc Then cSrc.Value = 0  'set the one of interest to 0
            Next cSrc
            Range(FromSht.Range("A5"), FromSht.Range("G4").End(xlDown)). _
                  Sort Key1:=Range("B5"), Order1:=xlAscending, Header:=xlNo
            For Each cSrc In Range(FromSht.Range("B5"), FromSht.Range("B4").End(xlDown))
               If cSrc.Value > 0 Then
                  cSrc.Offset(, 5).ClearContents  'Clear X cell, then the 'set rngFrom'
                  Exit For                        'below will stop one cell above here.
               End If
            Next cSrc
         End If
         
         'AM allows the Zo to be set separately for each source.
         'Get value AFTER the source of interest has been moved to the top.
         .[Refzo].Formula = FromSht.Range("D5").Formula
         
         'Delete Source, Match Type, Feedline Z0 columns.
         FromSht.Columns("B:D").Delete
         
         'Set a range for just the Freq, SWR, R, and X columns, then transfer in.
         'Close source workbook, which also activates the previous book, me.
         'Fill remainder of Data sheet.
         Set rngFrom = Range(FromSht.Range("A5"), FromSht.Range("D4").End(xlDown))
         TransferToData rngFrom  'also sets [TCcnt]
         Workbooks(FromBk).Close SaveChanges:=False
         FillData
      '#####   AM (Antenna Model)   #####
         
      '#####   DL1SNG vector Antenna Analyzer   #####
      ElseIf Left(FromSht.Range("A1"), 5) = "FA-VA" Then
         'Transfer header fields.
         .Range("A2").Formula = FromSht.Range("A2").Formula & "," & FromSht.Range("B2").Formula
         .[Refzo].Formula = 50  'default 50
         
         'Delete Pkt.-Nr column.
         FromSht.Columns("A").Delete
         
         'Insert placeholder column for SWR.
         FromSht.Columns("B").Insert Shift:=xlToRight
         
         'Set a range for just the Freq, SWR (inserted), R, and X columns, then transfer in.
         'Close source workbook, which also activates the previous book, me.
         'Change freq from Hz to MHz.
         Set rngFrom = Range(FromSht.Range("A4"), FromSht.Range("D3").End(xlDown))
         TransferToData rngFrom  'also sets [TCcnt]
         Workbooks(FromBk).Close SaveChanges:=False
         vFreq = .Range("A7").Resize([TCcnt], 1)
         ReDim Results(1 To [TCcnt], 1 To 1)
         For TC = 1 To [TCcnt]
            Results(TC, 1) = vFreq(TC, 1) / 1000000  'Freq to MHz
         Next TC
         'Transfer back to Data sheet.
         'Fill remainder of sheet, including SWR.
         .Range("A7").Resize([TCcnt], 1).Value = Results
         FillData WithSWR:=True
      '#####   DL1SNG vector Antenna Analyzer   #####
         
      '#####   Zplots Generated   #####
      ElseIf Left(FromSht.Range("A1"), 6) = "Zplots" Then
         'Zplots generated file.
         'Transfer header fields.
         .Range("A2").Formula = "Zplots Generated Data"
         .[Refzo].Formula = 50  'default 50
         
         'Update v2.4:  AntScope allows scans starting at Freq=0.  Delete if found.
         If FromSht.Cells(3, 1) = 0 Then FromSht.Rows(3).Delete Shift:=xlUp
         
         'Insert placeholder column for SWR.
         FromSht.Columns("B").Insert Shift:=xlToRight
         
         'Set a range for just the Freq, SWR (inserted), R, and X columns, then transfer in.
         'Close source workbook, which also activates the previous book, me.
         'Fill remainder of Data sheet.
         Set rngFrom = Range(FromSht.Range("A3"), FromSht.Range("D2").End(xlDown))
         TransferToData rngFrom  'also sets [TCcnt]
         Workbooks(FromBk).Close SaveChanges:=False
         FillData WithSWR:=True
         
         'Avoid noise for Rp, Xp, Ls, Cs, Lp, Cp.  Shows up as spikes on XY chart
         'if values are all very close but not identical, likely for generated data.
         Dim vTouchUp As Variant
         vTouchUp = .Range("L7").Resize([TCcnt], 6)  'Rp through Cp columns
         ReDim Results(1 To [TCcnt], 1 To 6)
         For TC = 1 To [TCcnt]
            Results(TC, 1) = Application.Round(vTouchUp(TC, 1), 8)
            Results(TC, 2) = Application.Round(vTouchUp(TC, 2), 8)
            Results(TC, 3) = Application.Round(vTouchUp(TC, 3), 8)
            Results(TC, 4) = Application.Round(vTouchUp(TC, 4), 8)
            Results(TC, 5) = Application.Round(vTouchUp(TC, 5), 8)
            Results(TC, 6) = Application.Round(vTouchUp(TC, 6), 8)
         Next TC
         .Range("L7").Resize([TCcnt], 6).Value = Results
      '#####   Zplots Generated   #####
      
      '#####   Zplots "TL Parms" type file   #####
      ElseIf Left(FromSht.Range("A1"), 17) = "Transmission Line" Then
         'Zplots "$TL Parms Measured$" or "$TL Parms Generated$" type file.
         'Transfer comment lines.
         .Range("A2:A4").Formula = FromSht.Range("A1:A3").Formula
         'Transfer (possible) data fields.  (Only present for Measured, not Generated, data.)
         .Range("D5:N5").Formula = FromSht.Range("D4:N4").Formula
         
         'Set a range for just the numeric data (Freq to Delay(ns)), then transfer in.
         'Close source workbook, which also activates the previous book, me.
         Set rngFrom = Range(FromSht.Range("A6"), FromSht.Range("R5").End(xlDown))
         TransferToData rngFrom  'also sets [TCcnt]
         Workbooks(FromBk).Close SaveChanges:=False

         If .Range("D5") <> "" Then  'Measured (not Generated) data
            'Set "User Spec" Tline and info box text from measured parms.
'>>>>>>     '>>> WARNING <<<     >>> WARNING <<<     >>> WARNING <<<
'>>>>>>     'Value in next line (99) must match Ubound of arrays in frmAddSubTL
            [TLTypeLI].Value = 99  'last choice in drop-down list (note: zero-based)
            [UserZo].Value = .Range("D5")
            [UserVF].Value = .Range("E5")
            [UserK1].Value = .Range("F5")
            [UserK2].Value = .Range("G5")
            [UserK0].Value = .Range("M5")
            [TLLen].Value = .Range("H5")
            [TLUnits].Value = .Range("I5")
            'Also transfer Start, Stop, Step to frmGenData tab 6 (TL Parms) fields.
            [GenF6start].Value = [TCFreq].Offset(1)
            [GenF6stop].Value = [TCFreq].Offset([TCcnt])
            If Abs(([TCFreq].Offset([TCcnt] - 1) - [TCFreq].Offset([TCcnt] - 2)) - _
                   ([TCFreq].Offset([TCcnt]) - [TCFreq].Offset([TCcnt] - 1))) < 0.00001 Then
               'Step sizes within 10 Hz, assume linear
               [GenF6step].Value = CStr([TCcnt]) & "p"
            Else
               [GenF6step].Value = CStr([TCcnt]) & "e"
            End If
            'TL Parms info box.
            Sheets("Custom").Shapes("boxTLParmsInfo").TextFrame.Characters.Text = _
               "Parms derived from measurements:" & vbLf & _
               .Range("J5") & vbLf & _
               .Range("K5") & vbLf & _
               .Range("L5")
            Sheets("Custom").Shapes("boxTLParmsInfo").Visible = True
            'Clear Data sheet row, done transferring values.
            .Range("D5:N5").ClearContents
         Else  'Generated TL Parms data
            'If measured data still available (temp file not deleted/renamed),
            'make visible the "Reload Measured Data" button.
            If Dir(ThisWorkbook.Path & "\$TL Parms Measured$.csv") <> "" Then
               Sheets("Custom").Shapes("fbtnReloadMeas").Visible = True
            End If
         End If
         Mode = "TL"
      '#####   Zplots "TL Parms" type file   #####
      
      '#####   Zplots "Fixed Freq" type file   #####
      ElseIf Left(FromSht.Range("A1"), 15) = "Fixed Frequency" Then
         'Zplots "$T-Line at Fixed Freq$" type file.
         'Transfer comment lines, set RefZo if empty.
         .Range("A2:E4").Formula = FromSht.Range("A1:E3").Formula
         If IsEmpty(.Range("RefZo")) Then .Range("RefZo").Value = 50
         
         'Set a range for just the numeric data (Len to RhoIm), then transfer in.
         'Close source workbook, which also activates the previous book, me.
         Set rngFrom = Range(FromSht.Range("A6"), FromSht.Range("S5").End(xlDown))
         TransferToData rngFrom  'also sets [TCcnt]
         Workbooks(FromBk).Close SaveChanges:=False
         Mode = "FF"
      '#####   Zplots "Fixed Freq" type file   #####
         
      '#####   MultiNEC   #####
      Else
         'From open MultiNEC workbook.
         'Transfer values for Freq, R, X, SWR, and [RefZo].
         .Range("A2").Value = "Copied from MultiNEC on: " & Date & " " & Time
         .Range("A4").Value = Dir(FromSht.Range("CurFname"))  'model name
         .[Refzo].Value = FromSht.Range("RefZo")
         'Freq
         Set rngFrom = Range(FromSht.Range("B11"), FromSht.Range("B10").End(xlDown))
         .Range("A7").Resize(rngFrom.Rows.Count, 1).Value = rngFrom.Value
         'SWR
         Set rngFrom = Range(FromSht.Range("I11"), FromSht.Range("I10").End(xlDown))
         .Range("B7").Resize(rngFrom.Rows.Count, 1).Value = rngFrom.Value
         'R and X
         Set rngFrom = Range(FromSht.Range("G11"), FromSht.Range("H10").End(xlDown))
         .Range("C7").Resize(rngFrom.Rows.Count, 2).Value = rngFrom.Value
         
         'Fill remainder of Data sheet.
         .[TCcnt].Value = rngFrom.Rows.Count  'number of frequencies
         FillData
      '#####   MultiNEC   #####
         
      End If  'end for data source choices
   End With  'ThisWorkbook.Sheets("Data")
   
   '==================   End of "per data source" calculations   ==================
   
   SheetLayout Mode  'Reformat sheets based on Mode
   
   [PrevMode].Value = Mode
   [PrevWhichS2P].Value = [WhichS2P].Value
   
   'Do a better job of setting min/max Freq scale values than standard Excel defaults.
   'First get min/max from data unless set above (only from VNA1/miniVNA input).
   If MaxFreq = 0 Then  'not already set  >>>Update v1.5: No longer ever set above
      MinFreq = [TCFreq].Offset(1)
      MaxFreq = [TCFreq].Offset([TCcnt])
   End If
   With WorksheetFunction
      'Set Min to 0 if appropriate (Min <= 2, Max >=10, and Max a multiple of 10).
      If Int(MinFreq) <= 2 And MaxFreq >= 10 And MaxFreq Mod 10 = 0 Then
         MinFreq = 0
         MaxFreq = .Round(MaxFreq, 0)
      End If
      'Now find pleasing values for the X scale min/max.
      'Note that [MinXscale] and [MaxXscale] are saved for possible
      'use by the "Set Scales" dialog and the FullRange proc.
      If .Round(MaxFreq, 3) > .Round(MinFreq, 3) Then
         [MinXscale].Value = .Round(MinFreq, 3)
         [MaxXscale].Value = .Round(MaxFreq, 3)
      Else
         If .Round(MaxFreq, 4) > .Round(MinFreq, 4) Then
            [MinXscale].Value = .Round(MinFreq, 4)
            [MaxXscale].Value = .Round(MaxFreq, 4)
         Else
            If .Round(MaxFreq, 5) > .Round(MinFreq, 5) Then
               [MinXscale].Value = .Round(MinFreq, 5)
               [MaxXscale].Value = .Round(MaxFreq, 5)
            Else
               If .Round(MaxFreq, 6) > .Round(MinFreq, 6) Then
                  [MinXscale].Value = .Round(MinFreq, 6)
                  [MaxXscale].Value = .Round(MaxFreq, 6)
               Else
                  [MinXscale].Value = .Round(MinFreq, 6)
                  [MaxXscale].Value = .Round(MaxFreq, 6) + 0.000001
               End If
            End If
         End If
      End If
   End With
   'Finally, if X scale not locked by user, set the chart min/max scale values.
   If [CustomXScaleAllowReset] Then  'not locked by user
      With Sheets("Custom").ChartObjects(1).Chart.Axes(xlCategory)
         If .CrossesAt < 0 Then  'xlLinear
            .MinimumScale = [MinXscale]
         Else  'xlLogarithmic
            'Log Freq scale, be careful not to set Min to 0.
            If [MinXscale] = 0 Then
               .MinimumScaleIsAuto = True
            Else
               .MinimumScale = [MinXscale]
            End If
         End If
         .MaximumScale = [MaxXscale]
      End With
   End If
   
   'Make obvious where the data came from.
   'Note that [WhichS2P]="" for all but s2p type data.
   [CurFname].Value = Dir(FileToOpen)  'File Name.Type that was opened, no path
   
   Dim CurrentlyLoaded As String
   If Mode <> "TL" And Mode <> "FF" Then
      CurrentlyLoaded = _
         "Data currently loaded is from:" & vbLf & [CurFname].Value & _
         IIf(vSrc > 0, ", Src #" & vSrc, "") & [WhichS2P] & vbLf & _
         "Modified: " & ModifiedOn
   Else
      If Left(Sheets("Data").Range("A3"), 9) = "Line Type" Then  'Generated (or FF) data, show Line Type
         CurrentlyLoaded = _
            "Data currently loaded is from:" & vbLf & [CurFname].Value & vbLf & _
            "[Type: " & Mid(Sheets("Data").Range("A3"), 12) & "]"
      Else  'Measured data, show first (only) source file
         CurrentlyLoaded = Mid(Sheets("Data").Range("A3"), 9, _
                           InStr(Sheets("Data").Range("A3"), "/") - 12)
         CurrentlyLoaded = _
            "Data currently loaded is from:" & vbLf & [CurFname].Value & vbLf & _
            "[" & CurrentlyLoaded & "]"
      End If
   End If
   Sheets("Data").Shapes("boxLoadedFile").TextFrame.Characters.Text = CurrentlyLoaded
   Sheets("Custom").Shapes("boxLoadedFile").TextFrame.Characters.Text = CurrentlyLoaded
   Sheets("Smith").Shapes("boxLoadedFile").TextFrame.Characters.Text = CurrentlyLoaded
   Sheets("Custom").Shapes("boxLoadedFile").Left = 657.75 - _
      (Sheets("Custom").Shapes("boxLoadedFile").Width) / 2  'looks nicer centered under MiniSmith
      
   'Modify "Left scale" / "Right scale" labels on Custom chart if appropriate.
   LabelLeft = "Left" & vbLf & "scale"
   LabelRight = "Right" & vbLf & "scale"
   Select Case [WhichS2P]
      Case ""
         'Not s2p type data, no extra info.
      Case " (S11)"
         LabelLeft = LabelLeft & vbLf & "(S11)"
         LabelRight = LabelRight & vbLf & "(S11)"
      Case " (S21)"
         LabelLeft = LabelLeft & vbLf & "(S21)"
         LabelRight = LabelRight & vbLf & "(S21)"
      Case " (S12)"
         LabelLeft = LabelLeft & vbLf & "(S12)"
         LabelRight = LabelRight & vbLf & "(S12)"
      Case " (S22)"
         LabelLeft = LabelLeft & vbLf & "(S22)"
         LabelRight = LabelRight & vbLf & "(S22)"
      Case " (S11/S21)"
         LabelLeft = LabelLeft & vbLf & "(S11)"
         LabelRight = LabelRight & vbLf & "(S21)"
      Case " (S22/S12)"
         LabelLeft = LabelLeft & vbLf & "(S22)"
         LabelRight = LabelRight & vbLf & "(S12)"
   End Select
   Sheets("Custom").Shapes("boxYLeft").TextFrame.Characters.Text = LabelLeft
   Sheets("Custom").Shapes("boxYRight").TextFrame.Characters.Text = LabelRight
      
   'Scroll Data sheet back to top, if now showing.
   If ActiveSheet.Name = "Data" Then
      ActiveWindow.ScrollRow = 7
      [Refzo].Select
   End If
   
   'If marker(s) are up, reposition and rebuild if the previous marker frequency is
   'the same as the new frequency at the marker index value.  Note that since
   '.Calculation = xlCalculationManual the frequencies in the marker tables have
   'not yet been updated.  Hence they are still the values from the previous file.
   'If marker(s) are up but previous and new frequencies are not the same, close markers.
   If [MarkFreqIndex].Value <> -1 Then
      If [TCFreq].Offset([MarkFreqIndex]) = Sheets("Custom").Range("C31") And _
         [TCFreq].Offset([Mark2FreqIndex]) = Sheets("Custom").Range("C32") Then
         'New freq at M1 same as old freq at M1, and new freq at M2 same as
         'old freq at M2 or M2 not in use.  OK to leave markers up, but go to
         'AutoCalc now so that proc PositionMarkers will have correct data.
         Application.Calculation = xlCalculationAutomatic
         PositionMarkers "Marker1", CLng([MarkFreqIndex])
         If [Mark2FreqIndex].Value <> -1 Then
            PositionMarkers "Marker2", CLng([Mark2FreqIndex])
         End If
      Else
         'One or both markers no longer match in frequency, close both.
         CloseFreqMarkers
      End If
   End If
   
Quit:
   With Application
      If [MarkFreqIndex].Value <> -1 Then
         .StatusBar = "Marker(s) in use"  'avoid flashing while markers are up
      Else
         .StatusBar = False
      End If
      .Calculation = xlCalculationAutomatic
      .EnableEvents = True
      .ScreenUpdating = ScrUpdating  'restore previous status
      On Error Resume Next
      .ShowWindowsInTaskbar = ShowInTaskbar  'restore previous status (not valid in XL97)
      On Error GoTo 0
   End With
End Sub

Public Sub SheetLayout(Mode As String)
   Dim CurSht As String
   
   If Mode = "R" Then  'normal Reflection mode
      If [PrevMode] = Mode Then
         If [WhichS2P] = "" And [PrevWhichS2P] = "" Then
            'Transfer Y values for plotting.  Note that chart series X data always
            'refers to the current extent of the Freq column (col A).
            TransferYrange [CustomYorig], [CustomY]  '[CustomY] is the plotted range
            If [CustomY2off] <> 99 Then TransferYrange [CustomY2orig], [CustomY2], xlSecondary
         Else
            'For s2p data, also reset series name / axis titles in case S11<->S22, both Mode R.
            'Also reset (to blank) if previous data was s2p but current data is not.
            Application.Calculation = xlCalculationAutomatic  'needed to allow series name reset
            fcboYaxis_Change  'also transfers Y range
            If [CustomY2off] <> 99 Then fcboY2axis_Change
         End If
      Else
         'Close any data markers.  Needed to keep marker and table visibility in sync.
         CloseFreqMarkers
         'Show Data sheet in "Reflection (Impedance)" layout
         With Sheets("Data")
            .Range("B6:S6").Value = Array("SWR", "Rs", "Xs", "Zmag", "Theta", _
                  "Rho", "RL", "Phase", "%RPwr", "Q", _
                  "Rp", "Xp", "Ls", "Cs", "Lp", "Cp", "RhoRe", "RhoIm")
            .Range("B1:M1").EntireColumn.NumberFormat = "0.000"
            .Range("N1:Q1").EntireColumn.NumberFormat = "General"
            .Range("F1").EntireColumn.NumberFormat = "0.00"    'Theta
            .Range("G1").EntireColumn.NumberFormat = "0.0000"  'Rho
            .Range("I1").EntireColumn.NumberFormat = "0.00"    'Phase
            .Range("J1").EntireColumn.NumberFormat = "0.00"    '%RPwr
            .Columns("AJ:AL").Hidden = True  'S21 or S12 data columns hidden
            .Range("A5").Value = "Zo"
            .Range("B5").NumberFormat = "General"  'Zo
            .Shapes("fbtnChangeZo").Visible = True
            .Shapes("fbtnSaveS1P").Visible = True
         End With
         'Show Custom Mini-Smith chart and Add/Sub TL button, change drop down lists.
         CurSht = ActiveSheet.Name
         Application.Calculation = xlCalculationAutomatic  'needed to allow series name reset
         With Sheets("Custom")
            .Activate  'in case legend must be rebuilt
            .ChartObjects(2).Visible = True  'miniSmith
            .Shapes("boxSmithcolor").Visible = True
            .Shapes("boxTmodeReminder").Visible = False
            .Shapes("boxTLmodeReminder").Visible = False
            .Shapes("fbtnSaveS1P").Visible = True
            .Shapes("fbtnAddSub").Visible = True
            
            'Save ListIndex values for PrevMode.
            Sheets("Data").Range("LIMode" & [PrevMode]).Value = .DropDowns("fcboYaxis").ListIndex
            Sheets("Data").Range("LI2Mode" & [PrevMode]).Value = .DropDowns("fcboY2axis").ListIndex
            
            'Reset dropdown choices.
            .Range("M3:M18").Value = Application.Transpose( _
                  Array("SWR", "Rs", "Xs", "Zmag", "Theta (deg)", "Rho (mag)", _
                        "RL (dB)", "Phase (deg)", "% Ref Pwr", "Q", "Rp", "Xp", _
                        "Ls (|fffd|H)", "Cs (pF)", "Lp (|fffd|H)", "Cp (pF)"))
            .DropDowns("fcboYaxis").ListFillRange = "M3:M18"
            .DropDowns("fcboYaxis").DropDownLines = 16
            .DropDowns("fcboY2axis").ListFillRange = "M2:M18"
            .DropDowns("fcboY2axis").DropDownLines = 17
            
            'Set ListIndex values to previous choice for this mode, if possible.
            .DropDowns("fcboYaxis").ListIndex = 0  'to force refresh in box
            .DropDowns("fcboYaxis").ListIndex = Sheets("Data").Range("LIModeR")
            fcboYaxis_Change  'also transfers Y range
            
            .DropDowns("fcboY2axis").ListIndex = 0  'to force refresh in box
            If .Range("Z1").Value = "Take Snapshot" And _
               .Range("AD1").Value = "Take Snapshot" Then
               'No secondary snaps present, set secondary LI to previous choice.
               .DropDowns("fcboY2axis").ListIndex = Sheets("Data").Range("LI2ModeR")
            Else
               'Snap 3 and/or 4 present, don't use previous choice if "none".
               If Sheets("Data").Range("LI2ModeR") = 1 Then
                  .DropDowns("fcboY2axis").ListIndex = 9  'Phase (deg)
               Else
                  .DropDowns("fcboY2axis").ListIndex = Sheets("Data").Range("LI2ModeR")
               End If
            End If
            fcboY2axis_Change
            
            'Marker table formatting.
            .Range("D1:K1").EntireColumn.NumberFormat = "0.000"
            .Range("H1").EntireColumn.NumberFormat = "0.00"    'Theta
            .Range("I1").EntireColumn.NumberFormat = "0.0000"  'Rho
            .Range("K1").EntireColumn.NumberFormat = "0.00"    'Phase
         End With
         Sheets(CurSht).Activate
         'Make Smith sheet visible, with SaveS1p and Add/Subt buttons.
         With Sheets("Smith")
            .Visible = True
            .Shapes("fbtnSaveS1P").Visible = True
            .Shapes("fbtnAddSub").Visible = True
         End With
         'Smith charts now visible, make sure dots/weights still in sync.
         SyncDotsWeights
      End If
      With Sheets("Data")
         'Save original R/X values for use with Add/Subtract TL.
         .Range("OriginalR").Offset(1).Resize([TCcnt], 2).Value = _
               .Range("Rs").Offset(1).Resize([TCcnt], 2).Value
      End With
      'Turn on Y2 zero line if Xs/Theta/Phase/Xp/Ls/Cs/Lp/Cp selected.
      If [CustomY2off] = 3 Or [CustomY2off] = 5 Or [CustomY2off] = 8 Or [CustomY2off] = 12 Or _
         [CustomY2off] = 13 Or [CustomY2off] = 14 Or [CustomY2off] = 15 Or [CustomY2off] = 16 Then
         [CustomZline].Value = 0  '[CustomZline] covers the full range of frequencies
      End If
      
   ElseIf Mode = "RT" Then  'combined Reflection/Transmission mode, used for S11/S21 or S22/S12
      If [PrevMode] = Mode Then
         If [WhichS2P] = "" And [PrevWhichS2P] = "" Then
            'Transfer Y values for plotting.  Note that chart series X data always
            'refers to the current extent of the Freq column (col A).
            TransferYrange [CustomYorig], [CustomY]  '[CustomY] is the plotted range
            If [CustomY2off] <> 99 Then TransferYrange [CustomY2orig], [CustomY2], xlSecondary
         Else
            'For s2p data, also reset series name / axis titles in case S11<->S22, both Mode R.
            'Also reset (to blank) if previous data was s2p but current data is not.
            Application.Calculation = xlCalculationAutomatic  'needed to allow series name reset
            fcboYaxis_Change  'also transfers Y range
            If [CustomY2off] <> 99 Then fcboY2axis_Change
         End If
      Else
         'Close any data markers.  Needed to keep marker and table visibility in sync.
         CloseFreqMarkers
         'Show Data sheet in "Reflection (Impedance)" layout + S21 / S12 data
         With Sheets("Data")
            .Range("B6:S6").Value = Array("SWR", "Rs", "Xs", "Zmag", "Theta", _
                  "Rho", "RL", "Phase", "%RPwr", "Q", _
                  "Rp", "Xp", "Ls", "Cs", "Lp", "Cp", "RhoRe", "RhoIm")
            .Range("B1:M1").EntireColumn.NumberFormat = "0.000"
            .Range("N1:Q1").EntireColumn.NumberFormat = "General"
            .Range("F1").EntireColumn.NumberFormat = "0.00"    'Theta
            .Range("G1").EntireColumn.NumberFormat = "0.0000"  'Rho
            .Range("I1").EntireColumn.NumberFormat = "0.00"    'Phase
            .Range("J1").EntireColumn.NumberFormat = "0.00"    '%RPwr
            .Columns("AJ:AL").Hidden = False  'S21 or S12 data columns visible
            .Range("A5").Value = "Zo"
            .Range("B5").NumberFormat = "General"  'Zo
            .Shapes("fbtnChangeZo").Visible = True
            .Shapes("fbtnSaveS1P").Visible = True
         End With
         'Show Custom Mini-Smith chart and Add/Sub TL button, change drop down lists.
         CurSht = ActiveSheet.Name
         Application.Calculation = xlCalculationAutomatic  'needed to allow series name reset
         With Sheets("Custom")
            .Activate  'in case legend must be rebuilt
            .ChartObjects(2).Visible = True  'miniSmith
            .Shapes("boxSmithcolor").Visible = True
            .Shapes("boxTmodeReminder").Visible = False
            .Shapes("boxTLmodeReminder").Visible = False
            .Shapes("fbtnSaveS1P").Visible = True
            .Shapes("fbtnAddSub").Visible = True
            
            'Save ListIndex values for PrevMode.
            Sheets("Data").Range("LIMode" & [PrevMode]).Value = .DropDowns("fcboYaxis").ListIndex
            Sheets("Data").Range("LI2Mode" & [PrevMode]).Value = .DropDowns("fcboY2axis").ListIndex
            
            'Reset dropdown choices.
            .Range("M3:M18").Value = Application.Transpose( _
                  Array("SWR", "Rs", "Xs", "Zmag", "Theta (deg)", "Rho (mag)", _
                        "RL (dB)", "Phase (deg)", "% Ref Pwr", "Q", "Rp", "Xp", _
                        "Ls (|fffd|H)", "Cs (pF)", "Lp (|fffd|H)", "Cp (pF)"))
            .DropDowns("fcboYaxis").ListFillRange = "M3:M18"
            .DropDowns("fcboYaxis").DropDownLines = 16
            .DropDowns("fcboY2axis").ListFillRange = "M21:M24"
            .DropDowns("fcboY2axis").DropDownLines = 4
            
            'Set ListIndex values to previous choice for this mode, if possible.
            .DropDowns("fcboYaxis").ListIndex = 0  'to force refresh in box
            .DropDowns("fcboYaxis").ListIndex = Sheets("Data").Range("LIModeRT")
            fcboYaxis_Change  'also transfers Y range
            
            .DropDowns("fcboY2axis").ListIndex = 0  'to force refresh in box
            If .Range("Z1").Value = "Take Snapshot" And _
               .Range("AD1").Value = "Take Snapshot" Then
               'No secondary snaps present, set secondary LI to previous choice.
               .DropDowns("fcboY2axis").ListIndex = Sheets("Data").Range("LI2ModeRT")
            Else
               'Snap 3 and/or 4 present, don't use previous choice if "none".
               If Sheets("Data").Range("LI2ModeRT") = 1 Then
                  .DropDowns("fcboY2axis").ListIndex = 3  'TL (dB)
               Else
                  .DropDowns("fcboY2axis").ListIndex = Sheets("Data").Range("LI2ModeRT")
               End If
            End If
            fcboY2axis_Change
            
            'Marker table formatting.
            .Range("D1:K1").EntireColumn.NumberFormat = "0.000"
            .Range("H1").EntireColumn.NumberFormat = "0.00"    'Theta
            .Range("I1").EntireColumn.NumberFormat = "0.0000"  'Rho
            .Range("K1").EntireColumn.NumberFormat = "0.00"    'Phase
         End With
         Sheets(CurSht).Activate
         'Make Smith sheet visible, with SaveS1p and Add/Subt buttons.
         With Sheets("Smith")
            .Visible = True
            .Shapes("fbtnSaveS1P").Visible = True
            .Shapes("fbtnAddSub").Visible = True
         End With
         'Smith charts now visible, make sure dots/weights still in sync.
         SyncDotsWeights
      End If
      With Sheets("Data")
         'Save original R/X values for use with Add/Subtract TL.
         .Range("OriginalR").Offset(1).Resize([TCcnt], 2).Value = _
               .Range("Rs").Offset(1).Resize([TCcnt], 2).Value
      End With
      'Turn on Y2 zero line if Phase.
      If [CustomY2off] = 37 Then
         [CustomZline].Value = 0  '[CustomZline] covers the full range of frequencies
      End If
      
   ElseIf Mode = "TL" Then  'Transmission Line Parameters mode
      If [PrevMode] = Mode Then
         'Transfer values for plotting.
         TransferYrange [CustomYorig], [CustomY]  '[CustomY] is the plotted range
         If [CustomY2off] <> 99 Then TransferYrange [CustomY2orig], [CustomY2], xlSecondary
      Else
         'Close any data markers.  Needed to keep marker and table visibility in sync.
         CloseFreqMarkers
         'Show Data sheet in "TL Parms" layout
         With Sheets("Data")
            .Range("B6:S6").Value = Array("|Zo|", "Ro", "Xo", "VF", _
                  "Loss", "/100ft", "/100m", "|S21| (dB)", _
                  "Dist R(ft)", "Dist L(ft)", "Dist G(ft)", "Dist C(ft)", _
                  "Dist R(m)", "Dist L(m)", "Dist G(m)", "Dist C(m)", "Delay(ns)", "n/a")
            .Range("B1:Q1").EntireColumn.NumberFormat = "0.000"
            .Range("E1").EntireColumn.NumberFormat = "0.0000"    'VF
            .Columns("AJ:AL").Hidden = True  'S21 or S12 data columns hidden
            .Range("A5:B5").ClearContents  '"Zo" and [RefZo]
            .Shapes("fbtnChangeZo").Visible = False
            .Shapes("fbtnSaveS1P").Visible = False
         End With
         'Hide Custom Mini-Smith chart and Add/Sub TL button, change drop down lists.
         CurSht = ActiveSheet.Name
         Application.Calculation = xlCalculationAutomatic  'needed to allow series name reset
         With Sheets("Custom")
            .Activate  'in case legend must be rebuilt
            .ChartObjects(2).Visible = False  'miniSmith
            .Shapes("boxSmithcolor").Visible = False
            .Shapes("boxTmodeReminder").Visible = False
            .Shapes("boxTLmodeReminder").Visible = True
            .Shapes("fbtnSaveS1P").Visible = False
            .Shapes("fbtnAddSub").Visible = False
            
            'Save ListIndex values for PrevMode.
            Sheets("Data").Range("LIMode" & [PrevMode]).Value = .DropDowns("fcboYaxis").ListIndex
            Sheets("Data").Range("LI2Mode" & [PrevMode]).Value = .DropDowns("fcboY2axis").ListIndex
            
            'Reset dropdown choices.
            .Range("M3:M19").Value = Application.Transpose( _
                  Array("|Zo|", "Ro", "Xo", "VF", _
                        "Loss (dB)", "Loss/100ft", "Loss/100m", "|S21| (dB)", _
                        "Dist R (mohms/ft)", "Dist L (nH/ft)", "Dist G (|fffd|S/ft)", "Dist C (pF/ft)", _
                        "Dist R (mohms/m)", "Dist L (nH/m)", "Dist G (|fffd|S/m)", "Dist C (pF/m)", _
                        "Delay (ns)"))
            .DropDowns("fcboYaxis").ListFillRange = "M3:M19"
            .DropDowns("fcboYaxis").DropDownLines = 17
            .DropDowns("fcboY2axis").ListFillRange = "M2:M19"
            .DropDowns("fcboY2axis").DropDownLines = 18
            
            'Set ListIndex values to previous choice for this mode, if possible.
            .DropDowns("fcboYaxis").ListIndex = 0  'to force refresh in box
            .DropDowns("fcboYaxis").ListIndex = Sheets("Data").Range("LIModeTL")
            fcboYaxis_Change  'also transfers Y range
            
            .DropDowns("fcboY2axis").ListIndex = 0  'to force refresh in box
            If .Range("Z1").Value = "Take Snapshot" And _
               .Range("AD1").Value = "Take Snapshot" Then
               'No secondary snaps present, set secondary LI to previous choice.
               .DropDowns("fcboY2axis").ListIndex = Sheets("Data").Range("LI2ModeTL")
            Else
               'Snap 3 and/or 4 present, don't use previous choice if "none".
               If Sheets("Data").Range("LI2ModeTL") = 1 Then
                  .DropDowns("fcboY2axis").ListIndex = 7  'Loss/100ft
               Else
                  .DropDowns("fcboY2axis").ListIndex = Sheets("Data").Range("LI2ModeTL")
               End If
            End If
            fcboY2axis_Change
            
            'Marker table formatting.
            .Range("D1:K1").EntireColumn.NumberFormat = "0.000"
            .Range("G1").EntireColumn.NumberFormat = "0.0000"    'VF
         End With
         Sheets(CurSht).Activate
         'Hide Smith sheet.
         Sheets("Smith").Visible = False
      End If
      
   ElseIf Mode = "FF" Then  'Fixed Frequency Transmission Line
      If [PrevMode] = Mode Then
         'Transfer values for plotting.
         TransferYrange [CustomYorig], [CustomY]  '[CustomY] is the plotted range
         If [CustomY2off] <> 99 Then TransferYrange [CustomY2orig], [CustomY2], xlSecondary
      Else
         'Close any data markers.  Needed to keep marker and table visibility in sync.
         CloseFreqMarkers
         'Show Data sheet in "Fixed Freq T-Line" layout
         With Sheets("Data")
            .Range("B6:S6").Value = Array("SWR", "Rs", "Xs", "Zmag", "Theta", _
                  "Rho", "RL", "Phase", "%RPwr", _
                  "E-mag", "E-phase", "I-mag", "I-phase", _
                  "Power", "Pwr Loss", "True SWR", _
                  "RhoRe", "RhoIm")
            .Range("B1:Q1").EntireColumn.NumberFormat = "0.000"
            .Range("F1").EntireColumn.NumberFormat = "0.00"    'Theta
            .Range("G1").EntireColumn.NumberFormat = "0.0000"  'Rho
            .Range("I1").EntireColumn.NumberFormat = "0.00"    'Phase
            .Range("J1").EntireColumn.NumberFormat = "0.00"    '%RPwr
            .Range("L1").EntireColumn.NumberFormat = "0.00"    'E-phase
            .Range("N1").EntireColumn.NumberFormat = "0.00"    'I-phase
            .Columns("AJ:AL").Hidden = True  'S21 or S12 data columns hidden
            .Range("A5").Value = "Zo"
            .Range("B5").NumberFormat = "General"  'Zo
            .Shapes("fbtnChangeZo").Visible = True
            .Shapes("fbtnSaveS1P").Visible = False
         End With
         'Show Custom Mini-Smith chart, change drop down lists.
         CurSht = ActiveSheet.Name
         Application.Calculation = xlCalculationAutomatic  'needed to allow series name reset
         With Sheets("Custom")
            .Activate  'in case legend must be rebuilt
            .ChartObjects(2).Visible = True  'miniSmith
            .Shapes("boxSmithcolor").Visible = True
            .Shapes("boxTmodeReminder").Visible = False
            .Shapes("boxTLmodeReminder").Visible = False
            .Shapes("fbtnSaveS1P").Visible = False
            .Shapes("fbtnAddSub").Visible = False
            
            'Save ListIndex values for PrevMode.
            Sheets("Data").Range("LIMode" & [PrevMode]).Value = .DropDowns("fcboYaxis").ListIndex
            Sheets("Data").Range("LI2Mode" & [PrevMode]).Value = .DropDowns("fcboY2axis").ListIndex
            
            'Reset dropdown choices.
            .Range("M3:M18").Value = Application.Transpose( _
                  Array("SWR", "Rs", "Xs", "Zmag", "Theta (deg)", "Rho (mag)", _
                        "RL (dB)", "Phase (deg)", "% Ref Pwr", _
                        "E-mag (V)", "E-phase (deg)", "I-mag (A)", "I-phase (deg)", _
                        "Power (W)", "Pwr Loss (dB)", "True SWR"))
            .DropDowns("fcboYaxis").ListFillRange = "M3:M18"
            .DropDowns("fcboYaxis").DropDownLines = 16
            .DropDowns("fcboY2axis").ListFillRange = "M2:M18"
            .DropDowns("fcboY2axis").DropDownLines = 17
            
            'Set ListIndex values to previous choice for this mode, if possible.
            .DropDowns("fcboYaxis").ListIndex = 0  'to force refresh in box
            .DropDowns("fcboYaxis").ListIndex = Sheets("Data").Range("LIModeFF")
            fcboYaxis_Change  'also transfers Y range
            
            .DropDowns("fcboY2axis").ListIndex = 0  'to force refresh in box
            If .Range("Z1").Value = "Take Snapshot" And _
               .Range("AD1").Value = "Take Snapshot" Then
               'No secondary snaps present, set secondary LI to previous choice.
               .DropDowns("fcboY2axis").ListIndex = Sheets("Data").Range("LI2ModeFF")
            Else
               'Snap 3 and/or 4 present, don't use previous choice if "none".
               If Sheets("Data").Range("LI2ModeFF") = 1 Then
                  .DropDowns("fcboY2axis").ListIndex = 2  'SWR
               Else
                  .DropDowns("fcboY2axis").ListIndex = Sheets("Data").Range("LI2ModeFF")
               End If
            End If
            fcboY2axis_Change
            
            'Marker table formatting.
            .Range("D1:K1").EntireColumn.NumberFormat = "0.000"
            .Range("H1").EntireColumn.NumberFormat = "0.00"    'Theta
            .Range("I1").EntireColumn.NumberFormat = "0.0000"  'Rho
            .Range("K1").EntireColumn.NumberFormat = "0.00"    'Phase
         End With
         Sheets(CurSht).Activate
         'Make Smith sheet visible, but no SaveS1p or Add/Subt buttons.
         With Sheets("Smith")
            .Visible = True
            .Shapes("fbtnSaveS1P").Visible = False
            .Shapes("fbtnAddSub").Visible = False
         End With
         'Smith charts now visible, make sure dots/weights still in sync.
         SyncDotsWeights
      End If
      'Turn on Y2 zero line if Xs/Theta/Phase/E-phase/I-phase selected.
      If [CustomY2off] = 3 Or [CustomY2off] = 5 Or [CustomY2off] = 8 Or _
         [CustomY2off] = 11 Or [CustomY2off] = 13 Then
         [CustomZline].Value = 0  '[CustomZline] covers the full range of frequencies
      End If
      
   Else  'Transmission / Group Delay mode, T / G
      If [PrevMode] = Mode Then
         If [WhichS2P] = "" And [PrevWhichS2P] = "" Then
            'Transfer values for plotting.
            TransferYrange [CustomYorig], [CustomY]  '[CustomY] is the plotted range
            If [CustomY2off] <> 99 Then TransferYrange [CustomY2orig], [CustomY2], xlSecondary
         Else
            'For s2p data, also reset series name / axis titles in case S21<->S12, both Mode T.
            'Also reset (to blank) if previous data was s2p but current data is not.
            Application.Calculation = xlCalculationAutomatic  'needed to allow series name reset
            fcboYaxis_Change  'also transfers Y range
            If [CustomY2off] <> 99 Then fcboY2axis_Change
         End If
      Else
         'Close any data markers.  Needed to keep marker and table visibility in sync.
         CloseFreqMarkers
         'Show Data sheet in "Transmission" layout
         With Sheets("Data")
            .Range("B6:S6").Value = Array("TL (mag)", "TL (dB)", IIf(Mode = "T", "Phase", "Grp Delay"), _
                  " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ")
            .Range("B1").EntireColumn.NumberFormat = "0.0000"  '|TL|
            .Range("C1").EntireColumn.NumberFormat = "0.000"   'TL dB
            .Range("D1").EntireColumn.NumberFormat = "0.00"    'TL Phase / Grp Delay
            .Columns("AJ:AL").Hidden = True  'S21 or S12 data columns hidden
            .Range("A5:B5").ClearContents  '"Zo" and [RefZo]
            .Shapes("fbtnChangeZo").Visible = False
            .Shapes("fbtnSaveS1P").Visible = False
         End With
         'Hide Custom Mini-Smith chart and Add/Sub TL button, change drop down lists.
         CurSht = ActiveSheet.Name
         Application.Calculation = xlCalculationAutomatic  'needed to allow series name reset
         With Sheets("Custom")
            .Activate  'in case legend must be rebuilt
            .ChartObjects(2).Visible = False  'miniSmith
            .Shapes("boxSmithcolor").Visible = False
            .Shapes("boxTmodeReminder").Visible = True
            .Shapes("boxTLmodeReminder").Visible = False
            .Shapes("fbtnSaveS1P").Visible = False
            .Shapes("fbtnAddSub").Visible = False
            
            'Save ListIndex values for PrevMode.
            Sheets("Data").Range("LIMode" & [PrevMode]).Value = .DropDowns("fcboYaxis").ListIndex
            Sheets("Data").Range("LI2Mode" & [PrevMode]).Value = .DropDowns("fcboY2axis").ListIndex
            
            'Reset dropdown choices.
            .Range("M3:M5").Value = Application.Transpose( _
                  Array("TL (mag)", "TL (dB)", IIf(Mode = "T", "Phase (deg)", "Grp Delay (|fffd|S)")))
            .DropDowns("fcboYaxis").ListFillRange = "M3:M5"
            .DropDowns("fcboYaxis").DropDownLines = 3
            .DropDowns("fcboY2axis").ListFillRange = "M2:M5"
            .DropDowns("fcboY2axis").DropDownLines = 4
            
            'Set ListIndex values to previous choice for this mode, if possible.
            .DropDowns("fcboYaxis").ListIndex = 0  'to force refresh in box
            .DropDowns("fcboYaxis").ListIndex = Sheets("Data").Range("LIMode" & Mode)
            fcboYaxis_Change  'also transfers Y range
            
            .DropDowns("fcboY2axis").ListIndex = 0  'to force refresh in box
            If .Range("Z1").Value = "Take Snapshot" And _
               .Range("AD1").Value = "Take Snapshot" Then
               'No secondary snaps present, set secondary LI to previous choice.
               .DropDowns("fcboY2axis").ListIndex = Sheets("Data").Range("LI2Mode" & Mode)
            Else
               'Snap 3 and/or 4 present, don't use previous choice if "none".
               If Sheets("Data").Range("LI2Mode" & Mode) = 1 Then
                  .DropDowns("fcboY2axis").ListIndex = 4  'Phase (deg) [or Grp Delay (|fffd|S)]
               Else
                  .DropDowns("fcboY2axis").ListIndex = Sheets("Data").Range("LI2Mode" & Mode)
               End If
            End If
            fcboY2axis_Change
            
            'Marker table formatting.
            .Range("D1").EntireColumn.NumberFormat = "0.0000"  '|TL|
            .Range("E1").EntireColumn.NumberFormat = "0.000"   'TL dB
            .Range("F1").EntireColumn.NumberFormat = "0.00"    'TL Phase / Grp Delay
         End With
         Sheets(CurSht).Activate
         'Hide Smith sheet.
         Sheets("Smith").Visible = False
      End If
      'Turn on Y2 zero line if Phase selected.
      If Mode = "T" And [CustomY2off] = 3 Then
         [CustomZline].Value = 0  '[CustomZline] covers the full range of frequencies
      End If
   End If
   
   'Column A header.
   'Text for "boxFixedFreq", if visible.
   'Caption for "Freq KHz" / "Len decimals" buttons.
   If Mode = "FF" Then  'Fixed Frequency Transmission Line
      Range("TCFreq").Value = "Length (" & Sheets("Data").Range("E4") & ")"
      Sheets("Custom").Shapes("boxFixedFreq").TextFrame.Characters.Text = Sheets("Data").Range("E3")
      Sheets("Smith").Shapes("boxFixedFreq").TextFrame.Characters.Text = Sheets("Data").Range("E3")
      Sheets("Custom").Shapes("boxFixedFreq").Visible = True
      Sheets("Smith").Shapes("boxFixedFreq").Visible = True
      Sheets("Data").Shapes("fbtnFreqKHz").TextFrame.Characters.Text = "Len decimals"
      Sheets("Custom").Shapes("fbtnFreqKHz").TextFrame.Characters.Text = "Len decimals"
      Sheets("Smith").Shapes("fbtnFreqKHz").TextFrame.Characters.Text = "Len decimals"
   Else  'all other modes
      Range("TCFreq").Value = "Freq (MHz)"
      Sheets("Custom").Shapes("boxFixedFreq").Visible = False
      Sheets("Smith").Shapes("boxFixedFreq").Visible = False
      Sheets("Data").Shapes("fbtnFreqKHz").TextFrame.Characters.Text = "Freq KHz/Hz"
      Sheets("Custom").Shapes("fbtnFreqKHz").TextFrame.Characters.Text = "Freq KHz/Hz"
      Sheets("Smith").Shapes("fbtnFreqKHz").TextFrame.Characters.Text = "Freq KHz/Hz"
   End If
   
   'Custom XY chart X axis title (if not locked by user) and main title.
   With Sheets("Custom")
      If .Range("M31") Then  'True = Use default X axis title
         If Mode = "FF" Then
            [CustomXtitle].Value = "Line " & Range("TCFreq") & " - Distance from Input"
         Else
            [CustomXtitle].Value = "Frequency (MHz)"
         End If
         With .ChartObjects(1).Chart.Axes(xlCategory, xlPrimary)
            .HasTitle = True  'in case cleared by user
            .AxisTitle.Text = [CustomXtitle].Value
         End With
      End If
      SetCustomTitle  '... vs [X axis title] not used in FF mode
   End With
End Sub

Public Sub TransferToData(rngFrom As Range, _
                          Optional CellTo As String = "A7")
   Dim TC As Long, Col As Long, NumCols As Long
   Dim vFrom As Variant
   Dim Results() As Double
   
   With ThisWorkbook.Sheets("Data")
      'Set number of frequencies, aka "Test Cases" (old MultiNEC terminology).
      .[TCcnt].Value = rngFrom.Rows.Count
      NumCols = rngFrom.Columns.Count
      
      If Application.International(xlDecimalSeparator) = "." Then
         'English user, can do full range transfer.
         .Range(CellTo).Resize(.[TCcnt], NumCols).Formula = rngFrom.Formula
      Else
         'Non-English user, must convert one at a time.  Use Val, not CDbl,
         'since formulas will contain periods as the decimal point.  Also,
         'Val will return 0 for any empty formulas (inserted blank columns).
         vFrom = rngFrom.Formula
         ReDim Results(1 To .[TCcnt], 1 To NumCols)
         For TC = 1 To .[TCcnt]
            For Col = 1 To NumCols
               Results(TC, Col) = Val(vFrom(TC, Col))
            Next Col
         Next TC
         .Range(CellTo).Resize(.[TCcnt], rngFrom.Columns.Count).Value = Results
      End If
   End With
End Sub

Public Sub FillData(Optional WithSWR As Boolean = False, _
                    Optional WithZtoRL As Boolean = True)
   Dim Freq As Double, R As Double, X As Double, Zo As Double
   Dim Denom As Double, RhoReal As Double, RhoImag As Double, RhoMag As Double
   Dim TC As Long
   Dim vFreq As Variant, vRX As Variant
   Dim Results() As Double, ResultsSWR() As Double
   
   With ThisWorkbook.Sheets("Data")
      'Using Freq and R/X already set, calculate Zmag to RhoIm (plus SWR, if requested).
      vFreq = .Range("A7").Resize([TCcnt], 2)  'Freq column ... ( ,2) to ensure array for vFreq
      vRX = .Range("C7").Resize([TCcnt], 2)    'R and X columns ... even for single frequency
      If WithZtoRL Then
         ReDim Results(1 To [TCcnt], 1 To 15)  'Zmag through RhoIm, 15 columns
      Else
         ReDim Results(1 To [TCcnt], 5 To 15)  'Phase through RhoIm, 11 columns
      End If
      If WithSWR Then
         ReDim ResultsSWR(1 To [TCcnt], 1 To 1)  'SWR, if requested
      End If
      Zo = [Refzo]
      On Error Resume Next
      For TC = 1 To [TCcnt]
         Freq = vFreq(TC, 1)
         R = vRX(TC, 1)
         X = vRX(TC, 2)
         'Gamma = (Z - Zo) / (Z + Zo), simplified when Zo = real only.
         If R <> 99999.99 Then
            Denom = (R + Zo) ^ 2 + X ^ 2
            RhoReal = ((R - Zo) * (R + Zo) + X ^ 2) / Denom
            RhoImag = (2 * X * Zo) / Denom
         Else
            RhoReal = 1
            RhoImag = 0
         End If
         RhoMag = Sqr(RhoReal ^ 2 + RhoImag ^ 2)
         'Fill Results array for this frequency.
         If WithZtoRL Then
            Results(TC, 1) = Sqr(R ^ 2 + X ^ 2)  'Zmag
            Results(TC, 2) = Application.Atan2(R, X) * RAD2DEG  'Theta
            Results(TC, 3) = RhoMag
            Results(TC, 4) = 20 * Application.Log10(RhoMag)  'Ret Loss, dB
            'Error resets for any Log10(0) conditions.
            'Note that any Atan2(0,0) errors for Theta are left at 0.
            If RhoMag = 0 Then
               Results(TC, 4) = -999.99  'RL if RhoMag=0
            End If
         End If
         Results(TC, 5) = Application.Atan2(RhoReal, RhoImag) * RAD2DEG  'Phase
         Results(TC, 6) = RhoMag ^ 2 * 100  '% Ref Pwr
         Results(TC, 7) = Abs(X) / R  'Q
         Results(TC, 8) = (R ^ 2 + X ^ 2) / R  'Rp
         Results(TC, 9) = (R ^ 2 + X ^ 2) / X  'Xp
         Results(TC, 10) = X / (6.28318530717959 * Freq)  'Ls
         Results(TC, 11) = -1000000 / (6.28318530717959 * Freq * X)  'Cs
         Results(TC, 12) = Results(TC, 9) / (6.28318530717959 * Freq)  'Lp
         Results(TC, 13) = -1000000 / (6.28318530717959 * Freq * Results(TC, 9))  'Cp
         Results(TC, 14) = RhoReal
         Results(TC, 15) = RhoImag
         'Error resets for any DIV/0 conditions.
         'Note that any Atan2(0,0) errors for Phase are left at 0.
         If R = 0 Then
            Results(TC, 7) = 99999.99  'Q if R=0
            Results(TC, 8) = 99999.99  'Rp if R=0
         End If
         If X = 0 Then
            Results(TC, 9) = 99999.99    'Xp if X=0
            Results(TC, 11) = -99999.99  'Cs if X=0
            Results(TC, 12) = 99999.99   'Lp if X=0
            Results(TC, 13) = 0       'Cp if X=0
         End If
         If WithSWR Then
            If RhoMag < 0.980197824 Then
               ResultsSWR(TC, 1) = (1 + RhoMag) / (1 - RhoMag)  'SWR
            Else
               ResultsSWR(TC, 1) = 99.999
            End If
         End If
      Next TC
      On Error GoTo 0
      'Transfer Results to Data sheet.
      If WithZtoRL Then
         .Range("E7").Resize([TCcnt], 15).Value = Results
      Else
         .Range("I7").Resize([TCcnt], 11).Value = Results
      End If
      If WithSWR Then
         .Range("B7").Resize([TCcnt], 1).Value = ResultsSWR
      End If
   End With
End Sub

Public Sub TransferYrange(rngFrom As Range, rngTo As Range, _
                          Optional PriSec As Long = xlPrimary)
   
   '>>>Update v1.5: Y data is no longer clipped at upper and lower
   'scale limits.  Too confusing when hovering over plot points as
   'to whether data was clipped or was actually at the scale limit.
   'Just transfer rngFrom -> rngTo as is.
   
   rngTo.Value = rngFrom.Value

   'Also transfer NumberFormat for use with Chart Tips.
   rngTo.EntireColumn.NumberFormat = rngFrom.Item(1).NumberFormat

   'Set Min/Max/Avg (ActiveX label lblYmmm/lblY2mma).
   Dim rngYvals As Range
   Dim ctlYmma As Object
   If Sheets("Custom").Shapes("fbtnFullRange").Visible Then  'only zoomed freqs
      Dim TC As Long
      Dim Xmin As Double, Xmax As Double
      Dim OffsetLo As Long, OffsetHi As Long
      With Sheets("Custom").ChartObjects(1).Chart.Axes(xlCategory)
         Xmin = .MinimumScale
         Xmax = .MaximumScale
      End With
      For TC = 1 To [TCcnt]
         If Range("TCFreq").Offset(TC) >= Xmin Then
            OffsetLo = TC
            Exit For
         End If
      Next TC
      For TC = [TCcnt] To 1 Step -1
         If Range("TCFreq").Offset(TC) <= Xmax Then
            OffsetHi = TC
            Exit For
         End If
      Next TC
      Set rngYvals = Range(rngTo.Item(OffsetLo), rngTo.Item(OffsetHi))
   Else  'all values
      Set rngYvals = rngTo
   End If

   'Note that YValsMMA (=Data!$AM$2) must be visible else .Text returns empty string.
   Range("YValsMMA").NumberFormat = rngFrom.Item(1).NumberFormat
   If PriSec = xlPrimary Then
      Set ctlYmma = Sheets("Custom").lblYmma
   Else
      Set ctlYmma = Sheets("Custom").lblY2mma
   End If
   Select Case Left(ctlYmma.Caption, 3)
      Case "Min"
         Range("YValsMMA").Value = Application.Min(rngYvals)
         ctlYmma.Caption = "Min: " & Range("YValsMMA").Text
      Case "Max"
         Range("YValsMMA").Value = Application.Max(rngYvals)
         ctlYmma.Caption = "Max: " & Range("YValsMMA").Text
      Case "Avg"
         Range("YValsMMA").Value = Application.Average(rngYvals)
         ctlYmma.Caption = "Avg: " & Range("YValsMMA").Text
   End Select
   Range("YValsMMA").Clear
   
'''   Dim YminVal As Double, YmaxVal As Double
'''   Dim TC As Long
'''   Dim vFrom As Variant
'''   Dim Results() As Double
'''   Dim CalcWasAuto As Boolean
'''   With Sheets("Custom").ChartObjects(1).Chart.Axes(xlValue, PriSec)
'''      If .MinimumScaleIsAuto And _
'''         .MaximumScaleIsAuto And _
'''         .ScaleType <> xlLogarithmic Then
'''         'Transfer range as is.
'''         rngTo.Value = rngFrom.Value
'''      Else
'''         'Create a (possibly) clipped range.
'''         If Application.Calculation = xlCalculationAutomatic Then
'''            'Caller may have already set to Manual, don't reset at proc end.
'''            Application.Calculation = xlCalculationManual
'''            CalcWasAuto = True
'''         End If
'''         If .MinimumScaleIsAuto Then
'''            YminVal = -1E+99
'''         Else
'''            YminVal = .MinimumScale
'''         End If
'''         If .MaximumScaleIsAuto Then
'''            YmaxVal = 1E+99
'''         Else
'''            YmaxVal = .MaximumScale
'''         End If
'''         If .ScaleType = xlLogarithmic Then
'''            YminVal = .MinimumScale
'''         End If
'''         vFrom = rngFrom
'''         ReDim Results(1 To rngFrom.Rows.Count, 1 To 1)
'''         For TC = 1 To rngFrom.Rows.Count
'''            If vFrom(TC, 1) < YminVal Then
'''               Results(TC, 1) = YminVal
'''            ElseIf vFrom(TC, 1) > YmaxVal Then
'''               Results(TC, 1) = YmaxVal
'''            Else
'''               Results(TC, 1) = vFrom(TC, 1)
'''            End If
'''         Next TC
'''         rngTo.Value = Results
'''         If CalcWasAuto Then Application.Calculation = xlCalculationAutomatic
'''      End If
'''   End With
End Sub

Public Sub ChangeZo()
   Dim Default As String, NewZo As String, WrongSep As String
   Dim TC As Long
   Dim R As Double, X As Double, Zo As Double
   Dim Denom As Double, RhoReal As Double, RhoImag As Double, RhoMag As Double
   
   Dim vRX As Variant
   Dim ResultsA() As Double
   Dim ResultsB() As Double
   Dim ResultsC() As Double
   
   If ActiveSheet.Name <> "Data" Then
      ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   End If
   
   'Show input box, get new Zo value.
   Default = CStr([Refzo])
   Do
      NewZo = InputBox("Enter the desired new Zo value." & vbLf & _
                       "This will change the results for SWR, Rho," & vbLf & _
                       "Return Loss, Phase, % Reflected Power," & vbLf & _
                       "and the position of the Smith chart trace.", "Change Zo", Default)
      If Len(NewZo) > 0 Then
         If IsNumeric(NewZo) Then
            'VBA "IsNumeric" recognizes both "99.9" and "99,9" as numeric.
            If Application.International(xlDecimalSeparator) = "," Then WrongSep = "." Else WrongSep = ","
            If InStr(NewZo, WrongSep) = 0 Then
               If NewZo > 0 Then
                  [Refzo].Value = CDbl(NewZo)  'CDbl needed if regional comma
                  Exit Do
               End If
            End If
         End If
         Default = NewZo
         Beep
      Else
         Exit Sub  'Cancel pressed
      End If
   Loop
   
   Application.Calculation = xlCalculationManual
         
   With Sheets("Data")
      'Calculate new Rho, Return Loss, Phase, % Ref Pwr, RhoRe, RhoIm and SWR.
      vRX = .Range("C7").Resize([TCcnt], 2)  'R and X columns
      ReDim ResultsA(1 To [TCcnt], 1 To 4)   'Rho through % Ref Pwr columns
      ReDim ResultsB(1 To [TCcnt], 1 To 2)   'RhoRe/RhoIm columns
      ReDim ResultsC(1 To [TCcnt], 1 To 1)   'SWR column
      Zo = [Refzo]
      
      On Error Resume Next
      For TC = 1 To [TCcnt]
         R = vRX(TC, 1)
         X = vRX(TC, 2)
         If R <> 99999.99 Then
            Denom = (R + Zo) ^ 2 + X ^ 2
            RhoReal = ((R - Zo) * (R + Zo) + X ^ 2) / Denom
            RhoImag = (2 * X * Zo) / Denom
         Else
            RhoReal = 1
            RhoImag = 0
         End If
         RhoMag = Sqr(RhoReal ^ 2 + RhoImag ^ 2)
         
         ResultsA(TC, 1) = RhoMag
         ResultsA(TC, 2) = 20 * Application.Log10(RhoMag)  'RL
         ResultsA(TC, 3) = Application.Atan2(RhoReal, RhoImag) * RAD2DEG  'Phase
         ResultsA(TC, 4) = RhoMag ^ 2 * 100  '% Ref Pwr
         'Error resets for any Log10(0) conditions.
         'Note that any Atan2(0,0) errors for Phase are left at 0.
         If RhoMag = 0 Then
            ResultsA(TC, 2) = -999.99  'RL if RhoMag=0
         End If
         
         ResultsB(TC, 1) = RhoReal
         ResultsB(TC, 2) = RhoImag
            
         If RhoMag < 0.980197824 Then
            ResultsC(TC, 1) = (1 + RhoMag) / (1 - RhoMag)  'SWR
         Else
            ResultsC(TC, 1) = 99.999
         End If
      Next TC
      On Error GoTo 0
      
      'Transfer to Data sheet.
      .Range("G7").Resize([TCcnt], 4).Value = ResultsA  'Rho through % Ref Pwr
      .Range("R7").Resize([TCcnt], 2).Value = ResultsB  'RhoRe/RhoIm
      .Range("B7").Resize([TCcnt], 1).Value = ResultsC  'SWR
   End With
   
   'Transfer values for plotting, with possible clipping.
   TransferYrange [CustomYorig], [CustomY]  '[CustomY] is the plotted range
   If [CustomY2off] <> 99 Then
      TransferYrange [CustomY2orig], [CustomY2], xlSecondary
   End If
   
   Application.Calculation = xlCalculationAutomatic
   
   'If marker(s) up, rebuild.
   If [MarkFreqIndex].Value <> -1 Then
      PositionMarkers "Marker1", CLng([MarkFreqIndex])
   End If
   If [Mark2FreqIndex].Value <> -1 Then
      PositionMarkers "Marker2", CLng([Mark2FreqIndex])
   End If
End Sub

Public Sub ChangeSignX()
   Dim TC As Long
   Dim vX As Variant
   Dim vPhase As Variant
   Dim vGRGI As Variant
   Dim Results() As Double
   Dim Phase() As Double
   Dim GR() As Double
   Dim GI() As Double
   Dim SignX() As Integer
   
   Application.Calculation = xlCalculationManual
         
   With Sheets("Data")
      vX = .Range("D7").Resize([TCcnt], 2)  'X column - "D", ( ,2) to ensure array even if single freq
      ReDim Results(1 To [TCcnt], 1 To 1)
      Select Case [SignXMethod]
         Case 1  ''None
            ''Set new X to all positive.
            For TC = 1 To [TCcnt]
               Results(TC, 1) = Abs(vX(TC, 1))
            Next TC
            
           
         Case 2  'via Phase
            'Get existing Phase values, change to all positive,
            'then use to determine sign of X.
            vPhase = .Range("I7").Resize([TCcnt], 2)  'Phase column - "I", ( ,2) see above
            ReDim Phase(1 To [TCcnt])
            ReDim SignX(1 To [TCcnt])
            For TC = 1 To [TCcnt]
               Phase(TC) = Abs(vPhase(TC, 1))
            Next TC
            SignXviaPhase Phase, SignX
            For TC = 1 To [TCcnt]
               Results(TC, 1) = Abs(vX(TC, 1)) * SignX(TC)
            Next TC
         Case 3  'via Rotation
            'Get existing GR/GI values, change GI to all positive,
            'then use to determine sign of X.
            vGRGI = .Range("R7").Resize([TCcnt], 2)  'RhoRe/RhoIm columns - "R" and "S"
            ReDim GR(1 To [TCcnt])
            ReDim GI(1 To [TCcnt])
            ReDim SignX(1 To [TCcnt])
            For TC = 1 To [TCcnt]
               GR(TC) = vGRGI(TC, 1)
               GI(TC) = Abs(vGRGI(TC, 2))
            Next TC
            SignXviaGRGI GR, GI, SignX
            For TC = 1 To [TCcnt]
               Results(TC, 1) = Abs(vX(TC, 1)) * SignX(TC)
            Next TC
      End Select
      'Transfer revised X values back to Data sheet, then recalculate other items.
      '(Not necessary for everything but simpler this way.)
      .Range("D7").Resize([TCcnt], 1).Value = Results
      FillData
   
      'Save resolved sign R/X values for use with Add/Subtract TL.
      .Range("OriginalR").Offset(1).Resize([TCcnt], 2).Value = _
            .Range("Rs").Offset(1).Resize([TCcnt], 2).Value
   End With
   
   'Transfer values for plotting, with possible clipping.
   TransferYrange [CustomYorig], [CustomY]  '[CustomY] is the plotted range
   If [CustomY2off] <> 99 Then
      TransferYrange [CustomY2orig], [CustomY2], xlSecondary
   End If
   
   Application.Calculation = xlCalculationAutomatic
   
   'If marker(s) up, rebuild.
   If [MarkFreqIndex].Value <> -1 Then
      PositionMarkers "Marker1", CLng([MarkFreqIndex])
   End If
   If [Mark2FreqIndex].Value <> -1 Then
      PositionMarkers "Marker2", CLng([Mark2FreqIndex])
   End If
End Sub

Public Sub SignXviaPhase(Phase() As Double, SignX() As Integer)
   Dim PNX As Integer
   Dim SwapAtLow As Double, SwapAtHigh As Double
   Dim AllowLowSwap As Boolean, AllowHighSwap As Boolean
   Dim TC As Long, TCstep As Long
   Dim PNvote As Integer
   
   'If fewer than 3 points quit now.
   If [TCcnt] < 3 Then
      SignX(1) = 1
      SignX([TCcnt]) = 1
      Exit Sub
   End If
   
   'Assume sign should be negative (PNX = -1) to start, will verify below.
   PNX = -1
   SwapAtLow = 3
   SwapAtHigh = 177
   AllowLowSwap = True
   AllowHighSwap = True
   'Check for phase changes near 0 and 180.  Since change may occur rapidly
   'the actual change point may be missed.  Project min/max phase using
   'previous trend x 3.  To prevent false hits with noise spikes, set
   'absolute thresholds at 30 and 150.
   For TC = 2 To [TCcnt] - 1
      'Check for phase change near 0 (typically 3 or less).
      If Phase(TC) > SwapAtLow Then AllowLowSwap = True
      If Phase(TC) < 30 And _
            (Phase(TC) + 3 * (Phase(TC) - Phase(TC - 1))) < SwapAtLow And _
               Phase(TC) < Phase(TC + 1) And _
                  AllowLowSwap = True Then
         'Change sign when phase falls (or projected to fall) below 3 and next is higher.
         'Don't allow next minimum until goes 2 above and comes back down.
         PNX = -PNX
         SwapAtLow = Phase(TC) + 2
         AllowLowSwap = False
      End If
      'Check for phase change near 180 (typically 177 or greater).
      If Phase(TC) < SwapAtHigh Then AllowHighSwap = True
      If Phase(TC) > 150 And _
            (Phase(TC) + 3 * (Phase(TC) - Phase(TC - 1))) > SwapAtHigh And _
               Phase(TC) > Phase(TC + 1) And _
                  AllowHighSwap = True Then
         'Change sign when phase rises (or projected to rise) above 177 and next is lower.
         'Don't allow next maximum until goes 2 below and comes back up.
         PNX = -PNX
         SwapAtHigh = Phase(TC) - 2
         AllowHighSwap = False
      End If
      'Set sign for this point, current PNX value or as changed above.
      SignX(TC) = PNX
   Next TC
   SignX(1) = SignX(2)
   SignX([TCcnt]) = SignX([TCcnt] - 1)
   
   'Initial assumption for PNX may have been wrong.  Apply the SignX
   'correction to the Phase, then check 15 points within the frequency
   'range.  Not counting places where the Smith chart trace loops
   'around on itself, and places where the phase goes from -180 to +180,
   'the phase should have a negative slope.  If the vote of the 15 points
   'shows a negative slope, the initial assumption for PNX was correct.
   'If fewer than 16 points available, skip check and hope for the best.
   If [TCcnt] >= 16 Then
      For TC = 1 To [TCcnt]
         Phase(TC) = Phase(TC) * SignX(TC)
      Next TC
      PNvote = 0
      TCstep = Int([TCcnt] / 16)
      On Error Resume Next
      For TC = TCstep To (15 * TCstep) Step TCstep
         'Look 5 points ahead in case frequencies are tightly packed
         '(resulting in many cases of equal phase from one point to
         'the next).  On Error above in case last check beyond range.
         If (Phase(TC + 5) <= Phase(TC)) Or _
            (Phase(TC + 5) > 170 And Phase(TC) < -170) Then
            'Slope is negative or flat, or jumps from (approximately) -180 to +180.
            'Initial assumption may have been correct.
            PNvote = PNvote + 1
         Else
            'Slope is positive, initial assumption may have been wrong.
            PNvote = PNvote - 1
         End If
      Next TC
      If PNvote < 0 Then
         'Overall vote is that initial assumption was wrong, swap signs.
         For TC = 1 To [TCcnt]
            SignX(TC) = -SignX(TC)
         Next TC
      End If
   End If
   
   'Return to caller, where SignX() will be applied to the X values.
End Sub

Public Sub SignXviaGRGI(GR() As Double, GI() As Double, SignX() As Integer)
   Dim TC As Long
   Dim Angle As Double
   Dim PrevAngle As Double
   
   'If fewer than 3 points quit now.
   If [TCcnt] < 3 Then
      SignX(1) = 1
      SignX([TCcnt]) = 1
      Exit Sub
   End If
   
   'Check for clockwise rotation of GammaReal/GammaImag points.
   'Gives false reading for closed loop Smith chart traces.
   On Error Resume Next  'Atan2 error if GR&GI=0, assume angle=0
   PrevAngle = Application.Atan2(GR(1), GI(1))
   SignX(1) = 1  'initial assumption, reset below
   For TC = 2 To [TCcnt]
      Angle = Application.Atan2(GR(TC), GI(TC))
      If Angle < PrevAngle Then
         'CW rotation, leave sign positive.
         SignX(TC) = 1
      ElseIf Angle > PrevAngle Then
         'CCW rotation, sign should be negative.
         SignX(TC) = -1
      Else
         'Angles are equal, set sign same as previous point.
         SignX(TC) = SignX(TC - 1)
      End If
      PrevAngle = Angle
   Next TC
   SignX(1) = SignX(2)
   
   'Look for and correct any single-point spikes.
   For TC = 2 To [TCcnt-1]
      If (SignX(TC) = 1 And SignX(TC - 1) = -1 And SignX(TC + 1) = -1) Or _
         (SignX(TC) = -1 And SignX(TC - 1) = 1 And SignX(TC + 1) = 1) Then
         SignX(TC) = SignX(TC - 1)
      End If
   Next TC
   
   'Return to caller, where SignX() will be applied to the X values.
End Sub

'''Public Function Sin(Arg As Double) As Double
'''   'Better fix was to change DEG2RAD from 1.74532925199433E-02 to 1.74532925199432E-02
'''
'''   'Catch VBA rounding error due to use of DEG2RAD
'''   'rather than [PI()]/180, where
'''   '  Sin(+180 * DEG2RAD) = -7.65717784317888E-16
'''   'and
'''   '  Sin(-180 * DEG2RAD) = +7.65717784317888E-16
'''   'Result should be 0 in both cases.
'''   '
'''   'Note that use of [PI()]/180 gives the correct sign
'''   'but still not 0.  That is,
'''   '  Sin(+180 * [PI()]/180) = +1.22460635382238E-16
'''
'''   Sin = VBA.Sin(Arg)
''''''   If Sgn(Sin) <> Sgn(Arg) Then Sin = 0  <<< WRONG!!! Sin(179+180)=-0.017
'''   If Abs(Sin) < 0.00000000000001 Then Sin = 0
'''End Function

Public Function MyInStrRev(sCheck As String, sCompare As String) As Long
   'Replacment for VBA6 InStrRev, not available under VBA5.
   Dim i As Integer
   For i = Len(sCheck) To 1 Step -1
      If Mid(sCheck, i, 1) = sCompare Then
         MyInStrRev = i
         Exit Function
      End If
   Next i
   MyInStrRev = 0  'sCompare not found
End Function
Attribute VB_Name = "OnActionMacros"
Option Compare Text  ' "AAA" = "aaa"
Option Explicit
Option Private Module

Dim FileToRefresh As String
Dim LastModified As Variant

'=============  Custom sheet forms buttons/dropdowns  =============

Public Sub fcboYaxis_Change()
   Dim NewName As String
   
   ActiveSheet.Range("D4").Activate  'focus off any ActiveX control (marker spinners)
   
   With Sheets("Custom")
      'Transfer values for plotting, with possible clipping.
      [CustomYoff].Value = .DropDowns("fcboYaxis").ListIndex  'defines [CustomYorig] range
      TransferYrange [CustomYorig], [CustomY]  '[CustomY] is the plotted range, possibly clipped
      
      With .ChartObjects(1).Chart
         'Reset primary series name.
         NewName = [CustomTitles].Offset([CustomYoff])
         
         'Add s2p prefix if appropriate.
         Select Case [WhichS2P]
            Case ""
               'No-op, not s2p data, no prefix.
            Case " (S11)"
               NewName = "S11 " & NewName
            Case " (S21)"
               NewName = "S21 " & NewName
            Case " (S12)"
               NewName = "S12 " & NewName
            Case " (S22)"
               NewName = "S22 " & NewName
            Case " (S11/S21)"
               NewName = "S11 " & NewName  'left scale
            Case " (S22/S12)"
               NewName = "S22 " & NewName  'left scale
         End Select
         
         On Error Resume Next  'in case scales locked in a way to hide entire series
         .SeriesCollection(1).Name = NewName
         On Error GoTo 0
         
         'Set new Y axis title (if default).
         If Range("M32").Value Then  'True=use default
            [CustomYtitle].Value = NewName
         End If
         .Axes(xlValue, xlPrimary).HasTitle = True  'in case cleared by user
         .Axes(xlValue, xlPrimary).AxisTitle.Text = [CustomYtitle]
      End With
      
      SetCustomTitle  'to account for axis change
   End With
   
   'If Markers are up, reset position since Marker .Left is dependent on
   'PlotArea.InsideLeft and .InsideWidth which may change with new scaling.
   If [MarkFreqIndex].Value <> -1 Then
      PositionMarkers "Marker1", CLng([MarkFreqIndex])
   End If
   If [Mark2FreqIndex].Value <> -1 Then
      PositionMarkers "Marker2", CLng([Mark2FreqIndex])
   End If
End Sub

Public Sub fcboY2axis_Change()
   Dim NewName As String
   Dim PrevY2off As Long
   Dim InitPAWidth As Single, InitATLeft As Single
   Dim WantWidth As Single, NextTry As Single
   
   ActiveSheet.Range("D4").Activate  'focus off any ActiveX control (marker spinners)
   
   With Sheets("Custom")
      PrevY2off = [CustomY2off].Value
      
      If .DropDowns("fcboY2axis").ListIndex = 1 Then  '(none)
         'Check for any existing Snapshots 3/4.  If present, reset
         'DropDown choice to former value and prompt user to erase.
         If .Range("Z1").Value = "Erase Snapshot" Or .Range("AD1").Value = "Erase Snapshot" Then
            If [WhichS2P] = " (S11/S21)" Or [WhichS2P] = " (S22/S12)" Then  'Mode RT
               .DropDowns("fcboY2axis").ListIndex = [CustomY2off].Value + 1 - 34
            Else
               .DropDowns("fcboY2axis").ListIndex = [CustomY2off].Value + 1
            End If
            MsgBox "Snapshots 3 and 4 must be erased before" & vbLf & _
                   "removing the secondary (right scale) trace.", _
                   vbOKOnly, "Erase Snapshot(s) First"
            Exit Sub
         End If
         
         With .ChartObjects(1).Chart
            'Change series name before hiding, just to avoid confusion when debugging.
            On Error Resume Next  'in case scales locked in a way to hide entire series
            .SeriesCollection(4).Name = "Secondary"
            On Error GoTo 0
            'Turn off secondary axis line, tick marks, and tick labels,
            'but do not delete the axis itself.  This avoids phantom
            'rescaling of the primary axis.  Go figure.
            With .Axes(xlValue, xlSecondary)
               If .HasTitle Then .AxisTitle.Text = " "  'avoid deleting title if possible
               .Border.LineStyle = xlNone
               .MajorTickMark = xlNone
               .TickLabelPosition = xlNone
            End With
            'Rebuild legend (if legend is present) since secondary series now not visible.
            If .HasLegend Then RebuildLegend
         End With
         
         [CustomY2off].Value = 99  'signaling no data to be plotted
         Application.Calculation = xlCalculationManual
         [CustomY2].ClearContents
         [CustomZline].ClearContents
         'Remove any reference lines and hide corresponding buttons.
         'Also hide reference line color dot button if Primary not being used.
         [CustomRefS1].ClearContents
         [CustomRefS2].ClearContents
         .Shapes("fbtnSec1").Visible = False
         .Shapes("fbtnSec2").Visible = False
         If Len(Range("CustomRefP1").Item(1)) = 0 Then .Shapes("boxRefLinescolor").Visible = False
         If Len(Range("CustomRefP2").Item(1)) = 0 Then .Shapes("boxRefLines2color").Visible = False
         'Hide pseudo-legend line and color change button.
         .Shapes("fLineY2").Visible = False
         .Shapes("boxY2color").Visible = False
         'Hide Min/Max/Avg ActiveX control.
         .lblY2mma.Visible = False
         Application.Calculation = xlCalculationAutomatic
         
      Else
         [CustomY2off].Value = .DropDowns("fcboY2axis").ListIndex - 1  'defines [CustomY2orig] range
         If [WhichS2P] = " (S11/S21)" Or [WhichS2P] = " (S22/S12)" Then  'Mode RT
            [CustomY2off].Value = [CustomY2off].Value + 34  'S21/S12 data, cols AJ:AL
         End If
         
         Application.Calculation = xlCalculationManual
         TransferYrange [CustomY2orig], [CustomY2], xlSecondary  '[CustomY2] is the plotted range
         'Turn on Y2 zero line if Xs/Theta/Phase/Xp/Ls/Cs/Lp/Cp selected.
         'Note:  >>> NOT USED <<< for TL Mode.
         'Note:  >>> Different set for FF mode <<<
         If Not .Shapes("boxTLmodeReminder").Visible Then
            If Range("TCFreq") = "Freq (MHz)" Then  'not FF mode
               If [CustomY2off] = 3 Or [CustomY2off] = 5 Or [CustomY2off] = 8 Or [CustomY2off] = 12 Or _
                  [CustomY2off] = 13 Or [CustomY2off] = 14 Or [CustomY2off] = 15 Or [CustomY2off] = 16 Or _
                  [CustomY2off] = 37 Then
                  [CustomZline].Value = 0  '[CustomZline] covers the full range of frequencies
               Else
                  [CustomZline].ClearContents
               End If
            Else  'FF mode
               If [CustomY2off] = 3 Or [CustomY2off] = 5 Or [CustomY2off] = 8 Or _
                  [CustomY2off] = 11 Or [CustomY2off] = 13 Then
                  [CustomZline].Value = 0  '[CustomZline] covers the full range of frequencies
               Else
                  [CustomZline].ClearContents
               End If
            End If
         End If
         Application.Calculation = xlCalculationAutomatic
         
         With .ChartObjects(1).Chart
            'Reset secondary series name.
            If [WhichS2P] = " (S11/S21)" Or [WhichS2P] = " (S22/S12)" Then  'Mode RT1/2
               NewName = [CustomTitles].Offset([CustomY2off] - 15)  'from RT1/2 range, M21:M24
            Else
               NewName = [CustomTitles].Offset([CustomY2off])       'from normal range, M2:M18/5
            End If
         
            'Add s2p prefix if appropriate.
            Select Case [WhichS2P]
               Case ""
                  'No-op, not s2p data, no prefix.
               Case " (S11)"
                  NewName = "S11 " & NewName
               Case " (S21)"
                  NewName = "S21 " & NewName
               Case " (S12)"
                  NewName = "S12 " & NewName
               Case " (S22)"
                  NewName = "S22 " & NewName
               Case " (S11/S21)"
                  NewName = "S21 " & NewName  'right scale
               Case " (S22/S12)"
                  NewName = "S12 " & NewName  'right scale
            End Select
         
            On Error Resume Next  'in case scales locked in a way to hide entire series
            .SeriesCollection(4).Name = NewName
            SyncDotsWeights
            On Error GoTo 0
            
            If PrevY2off = 99 Then
               Dim CI As Long  '3=red, 4=green, 5=blue, 7=magenta, 8=cyan, 48=40%-gray
               CI = Sheets("Custom").Shapes("boxY2color").Fill.ForeColor.SchemeColor - 7
               'Restore axis properties.
               With .Axes(xlValue, xlSecondary)
                  .TickLabels.NumberFormat = "General"
                  .TickLabelPosition = xlNextToAxis
                  .TickLabels.Font.ColorIndex = CI
                  .Border.LineStyle = xlAutomatic
                  .MajorTickMark = xlCross
               End With
               If Not .Axes(xlValue, xlSecondary).HasTitle Then
                  'Axis title was manually cleared by user.
                  'Restore it, then adjust positioning.
                  Application.ScreenUpdating = False
                  .Axes(xlValue, xlSecondary).HasTitle = True
                  InitPAWidth = .PlotArea.Width  'after adding title
                  InitATLeft = .Axes(xlValue, xlSecondary).AxisTitle.Left
                  .Axes(xlValue, xlSecondary).AxisTitle.Left = 999  'move as far right as possible
                  WantWidth = InitPAWidth + _
                        (.Axes(xlValue, xlSecondary).AxisTitle.Left - InitATLeft)
                  .PlotArea.Width = WantWidth
                  'Under XL2000 (and maybe above), must SET the width
                  'to a value less than the desired READ width.
                  NextTry = WantWidth
                  Do While .PlotArea.Width > WantWidth
                     NextTry = NextTry - 1
                     .PlotArea.Width = NextTry
                  Loop
                  Application.ScreenUpdating = True
               End If
               .Axes(xlValue, xlSecondary).AxisTitle.Font.ColorIndex = CI
            End If
            
            'Set new Y2 axis title (if default).
            If Sheets("Custom").Range("M33").Value Then  'True=use default
               [CustomY2title].Value = NewName
            End If
            .Axes(xlValue, xlSecondary).HasTitle = True  'in case cleared by user
            .Axes(xlValue, xlSecondary).AxisTitle.Text = [CustomY2title]
            
            'Rebuild legend if present and if secondary series was previously empty.
            'Not necessary (and avoids screen flash) if only name/data changes for series.
            If .HasLegend And PrevY2off = 99 Then RebuildLegend
         End With
         
         'Make sure right side reference line buttons are visible.
         .Shapes("fbtnSec1").Visible = True
         .Shapes("fbtnSec2").Visible = True
         'Show pseudo-legend line and color change button.
         .Shapes("fLineY2").Visible = True
         .Shapes("boxY2color").Visible = True
         'Show Min/Max/Avg ActiveX control.
         .lblY2mma.Visible = True
      End If
      
      SetCustomTitle  'to account for axis change
   End With
   
   'If Markers are up, reset position since Marker .Left is dependent on
   'PlotArea.InsideLeft and .InsideWidth which may change with new scaling.
   If [MarkFreqIndex].Value <> -1 Then
      PositionMarkers "Marker1", CLng([MarkFreqIndex])
   End If
   If [Mark2FreqIndex].Value <> -1 Then
      PositionMarkers "Marker2", CLng([Mark2FreqIndex])
   End If
End Sub

Public Sub SetCustomTitle()
   If ActiveSheet.Name <> "Data" Then
      ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   End If
   'If default being used, update the [CustomMtitle] value.
   If Sheets("Custom").Range("M30").Value Then  'True=use default
      If Range("TCFreq") = "Freq (MHz)" Then  'not FF mode
         If [CustomY2off] = 99 Then  'no secondary trace
            [CustomMtitle].Value = [CustomYtitle] & "    vs    " & [CustomXtitle]
         Else
            [CustomMtitle].Value = [CustomYtitle] & "  &  " & [CustomY2title] & "    vs    " & [CustomXtitle]
         End If
      Else  'FF mode, do not include X axis title in Main title
         If [CustomY2off] = 99 Then  'no secondary trace
            [CustomMtitle].Value = [CustomYtitle]
         Else
            [CustomMtitle].Value = [CustomYtitle] & "  &  " & [CustomY2title]
         End If
      End If
      [CustomMtitle].Value = Application.Substitute([CustomMtitle], " (MHz)", "")
      [CustomMtitle].Value = Application.Substitute([CustomMtitle], " (deg)", "")
      [CustomMtitle].Value = Application.Substitute([CustomMtitle], " (dB)", "")
      [CustomMtitle].Value = Application.Substitute([CustomMtitle], " (mag)", "")
      [CustomMtitle].Value = Application.Substitute([CustomMtitle], " (|fffd|H)", "")
      [CustomMtitle].Value = Application.Substitute([CustomMtitle], " (pF)", "")
      [CustomMtitle].Value = Application.Substitute([CustomMtitle], " (ft)", "")
      [CustomMtitle].Value = Application.Substitute([CustomMtitle], " (m)", "")
      [CustomMtitle].Value = Application.Substitute([CustomMtitle], " (V)", "")
      [CustomMtitle].Value = Application.Substitute([CustomMtitle], " (A)", "")
      [CustomMtitle].Value = Application.Substitute([CustomMtitle], " (W)", "")
   End If
   'Set the Custom sheet chart main title to the value in cell [CustomMtitle].
   With Sheets("Custom").ChartObjects(1).Chart
      .HasTitle = True  'in case cleared by user
      .ChartTitle.Text = [CustomMtitle]
   End With
End Sub

Public Sub fbtnSnapshot_Custom_Click()
   Dim AnySnapVisible As Boolean
   ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   With Sheets("Custom")
      .Shapes("fbtnSnapshot").Visible = False  'possible to double show (error) if save/recall used
      Load frmCustomSnaps  'less screen flashing this way
      frmCustomSnaps.Show
      .Shapes("fbtnSnapshot").Visible = True
      'On return, set visibility of white backing if any snaps are showing.
      AnySnapVisible = .Shapes("boxSnap1").Visible Or .Shapes("boxSnap2").Visible Or _
                       .Shapes("boxSnap3").Visible Or .Shapes("boxSnap4").Visible
      .Shapes("boxSnapBacking").Visible = AnySnapVisible
   End With
End Sub

Public Sub fbtnScales_Custom_Click()
   ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   frmXYMinMax.Show
End Sub

Public Sub fbtnRefLine_Custom_Click()
   Dim RefLineVal As String, Title As String, Default As String
   Dim strRange As String
   Dim iSeries As Integer
   ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   Select Case Application.Caller
      Case "fbtnPri1"
         strRange = "CustomRefP1"
         Title = "Left scale reference line #1"
         iSeries = 8
      Case "fbtnPri2"
         strRange = "CustomRefP2"
         Title = "Left scale reference line #2"
         iSeries = 9
      Case "fbtnSec1"
         strRange = "CustomRefS1"
         Title = "Right scale reference line #1"
         iSeries = 10
      Case "fbtnSec2"
         strRange = "CustomRefS2"
         Title = "Right scale reference line #2"
         iSeries = 11
   End Select
   
   'Show input box, get reference line value.
   Default = Range(strRange).Item(1)
   RefLineVal = InputBox( _
                "Enter the desired value for the reference line." & vbLf & vbLf & _
                "To remove an existing line (if any), clear the" & vbLf & _
                "value or click Cancel or press the Esc key.", Title, Default)
   If Len(RefLineVal) > 0 Then
      If IsNumeric(RefLineVal) Then
         Range(strRange).Value = CDbl(RefLineVal)  'CDbl needed if regional comma
         With ActiveSheet.ChartObjects(1).Chart
            .SeriesCollection(iSeries).HasDataLabels = False
            If iSeries = 8 Or iSeries = 9 Then
               'Left side (Primary) lines
               With .SeriesCollection(iSeries).Points(1)
                  .HasDataLabel = True
                  .DataLabel.Position = xlLabelPositionRight
                  .DataLabel.Font.FontStyle = "Bold"
                  .DataLabel.Font.Size = 6
                  .DataLabel.Border.LineStyle = xlAutomatic
                  .DataLabel.Interior.ColorIndex = xlAutomatic
               End With
            Else
               'Right side (Secondary) lines
               With .SeriesCollection(iSeries).Points([TCcnt])
                  .HasDataLabel = True
                  .DataLabel.Position = xlLabelPositionLeft
                  .DataLabel.Font.FontStyle = "Bold"
                  .DataLabel.Font.Size = 6
                  .DataLabel.Border.LineStyle = xlAutomatic
                  .DataLabel.Interior.ColorIndex = xlAutomatic
               End With
            End If
         End With
      End If
   Else
      'Field cleared or Cancel pressed, remove line.
      Range(strRange).ClearContents
   End If
   
   'If reference lines are visible, make sure they both show the color
   'of the corresponding "Change color" button, and show the button.
   Dim CI As Long
   On Error Resume Next  'in case series not visible, or user cleared line/marker
   With Sheets("Custom")
      'Lines P1 and S1.
      If Len(Range("CustomRefP1").Item(1)) > 0 Or _
         Len(Range("CustomRefS1").Item(1)) > 0 Then
         'Show color change button.
         .Shapes("boxRefLinescolor").Visible = True
         CI = .Shapes("boxRefLinescolor").Fill.ForeColor.SchemeColor - 7
         With .ChartObjects(1).Chart.SeriesCollection(8)  'Left 1
            .Border.ColorIndex = CI
         End With
         With .ChartObjects(1).Chart.SeriesCollection(10)  'Right 1
            .Border.ColorIndex = CI
         End With
      Else
         'Hide color change button.
         .Shapes("boxRefLinescolor").Visible = False
      End If
      'Lines P2 and S2.
      If Len(Range("CustomRefP2").Item(1)) > 0 Or _
         Len(Range("CustomRefS2").Item(1)) > 0 Then
         'Show color change button.
         .Shapes("boxRefLines2color").Visible = True
         CI = .Shapes("boxRefLines2color").Fill.ForeColor.SchemeColor - 7
         With .ChartObjects(1).Chart.SeriesCollection(9)  'Left 2
            .Border.ColorIndex = CI
         End With
         With .ChartObjects(1).Chart.SeriesCollection(11)  'Right 2
            .Border.ColorIndex = CI
         End With
      Else
         'Hide color change button.
         .Shapes("boxRefLines2color").Visible = False
      End If
   End With
End Sub

Public Sub boxTLmodeReminder_Click()
   'Create a dummy data file, load it, delete it.
   'Used merely to get back to the standard (Mode R) layout.
   Open ThisWorkbook.Path & "\$Temp$.csv" For Output As #1
   Write #1, "Zplots"
   Write #1, "Freq(MHz)", "Rs", "Xs"
   Write #1, 0.1, 0, 0
   Write #1, 10, 10, 0
   Write #1, 20, 20, 0
   Close #1
   ReadData ThisWorkbook.Path & "\$Temp$.csv"
   Kill ThisWorkbook.Path & "\$Temp$.csv"
End Sub

Public Sub fbtnReloadMeas_Click()
   ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   If Dir(ThisWorkbook.Path & "\$TL Parms Measured$.csv") = "" Then
      MsgBox "File" & vbLf & _
             ThisWorkbook.Path & "\$TL Parms Measured$.csv" & vbLf & _
             "not found.", _
             vbExclamation + vbOKOnly, "File Not Found"
   Else
      ReadData ThisWorkbook.Path & "\$TL Parms Measured$.csv"
   End If
End Sub

'=============  Smith sheet forms buttons  =============

Public Sub fbtnZoomIn_Smith_Click()
   'ZoomIn the Smith chart.
   Dim MinMax As Double
   ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   With Sheets("Smith").ChartObjects(1).Chart
      Select Case .Axes(xlCategory).MaximumScale
         Case 1.0001  'now full size, go to SWR 5
            With .Axes(xlCategory)
               .MinimumScale = -0.6667
               .MaximumScale = 0.6667
               MinMax = 0.6667
            End With
            With .Axes(xlValue)
               .MinimumScale = -0.6667
               .MaximumScale = 0.6667
            End With
            'Note that the labels must be set to (at least) a single blank.
            'If a label is set to a null string then it is deleted from the chart.
            .SeriesCollection("X=0.2").Points(1).DataLabel.Text = " "
            .SeriesCollection("X=0.5").Points(1).DataLabel.Text = " "
            .SeriesCollection("X=1.0").Points(1).DataLabel.Text = " "
            .SeriesCollection("X=2.0").Points(1).DataLabel.Text = " "
            .SeriesCollection("X=5.0").Points(6).DataLabel.Text = " "
            .SeriesCollection("X=-0.2").Points(1).DataLabel.Text = " "
            .SeriesCollection("X=-0.5").Points(1).DataLabel.Text = " "
            .SeriesCollection("X=-1.0").Points(1).DataLabel.Text = " "
            .SeriesCollection("X=-2.0").Points(1).DataLabel.Text = " "
            .SeriesCollection("X=-5.0").Points(1).DataLabel.Text = " "
            .SeriesCollection("R=0").Points(1).DataLabel.Text = " "
            .SeriesCollection("R=0").Points(37).DataLabel.Text = " "
         Case 0.6667  'now SWR 5, go to SWR 3
            With .Axes(xlCategory)
               .MinimumScale = -0.5001
               .MaximumScale = 0.5001
               MinMax = 0.5001
            End With
            With .Axes(xlValue)
               .MinimumScale = -0.5001
               .MaximumScale = 0.5001
            End With
            .SeriesCollection("R=0.2").Points(31).DataLabel.Text = " "
            .SeriesCollection("R=5.0").Points(37).DataLabel.Text = " "
         Case 0.5001  'now SWR 3, go to SWR 2
            With .Axes(xlCategory)
               .MinimumScale = -0.3334
               .MaximumScale = 0.3334
               MinMax = 0.3334
            End With
            With .Axes(xlValue)
               .MinimumScale = -0.3334
               .MaximumScale = 0.3334
            End With
         Case Else  'end of zoom limit
            Exit Sub
      End Select
   End With
   'Match the MiniSmith, which has no data labels.
   With Sheets("Custom").ChartObjects(2).Chart
      With .Axes(xlCategory)
         .MinimumScale = -MinMax
         .MaximumScale = MinMax
      End With
      With .Axes(xlValue)
         .MinimumScale = -MinMax
         .MaximumScale = MinMax
      End With
   End With
End Sub

Public Sub fbtnZoomOut_Smith_Click()
   'ZoomOut the Smith chart.
   Dim MinMax As Double
   ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   With Sheets("Smith").ChartObjects(1).Chart
      Select Case .Axes(xlCategory).MaximumScale
         Case 0.3334  'now SWR 2, go to SWR 3
            With .Axes(xlCategory)
               .MinimumScale = -0.5001
               .MaximumScale = 0.5001
               MinMax = 0.5001
            End With
            With .Axes(xlValue)
               .MinimumScale = -0.5001
               .MaximumScale = 0.5001
            End With
         Case 0.5001  'now SWR 3, go to SWR 5
            With .Axes(xlCategory)
               .MinimumScale = -0.6667
               .MaximumScale = 0.6667
               MinMax = 0.6667
            End With
            With .Axes(xlValue)
               .MinimumScale = -0.6667
               .MaximumScale = 0.6667
            End With
            .SeriesCollection("R=0.2").Points(31).DataLabel.Text = "0.2"
            .SeriesCollection("R=5.0").Points(37).DataLabel.Text = "5"
         Case 0.6667  'now SWR 5, go to full scale
            With .Axes(xlCategory)
               .MinimumScale = -1.0001
               .MaximumScale = 1.0001
               MinMax = 1.0001
            End With
            With .Axes(xlValue)
               .MinimumScale = -1.0001
               .MaximumScale = 1.0001
            End With
            .SeriesCollection("R=0.2").Points(31).DataLabel.Text = "0.2"
            .SeriesCollection("R=0.5").Points(39).DataLabel.Text = "0.5"
            .SeriesCollection("R=1.0").Points(29).DataLabel.Text = "1"
            .SeriesCollection("R=2.0").Points(37).DataLabel.Text = "2"
            .SeriesCollection("R=5.0").Points(37).DataLabel.Text = "5"
            .SeriesCollection("X=0.2").Points(1).DataLabel.Text = "0.2"
            .SeriesCollection("X=0.5").Points(1).DataLabel.Text = "0.5"
            .SeriesCollection("X=1.0").Points(1).DataLabel.Text = "1"
            .SeriesCollection("X=2.0").Points(1).DataLabel.Text = "2"
            .SeriesCollection("X=5.0").Points(6).DataLabel.Text = "5"
            .SeriesCollection("X=-0.2").Points(1).DataLabel.Text = "-0.2"
            .SeriesCollection("X=-0.5").Points(1).DataLabel.Text = "-0.5"
            .SeriesCollection("X=-1.0").Points(1).DataLabel.Text = "-1"
            .SeriesCollection("X=-2.0").Points(1).DataLabel.Text = "-2"
            .SeriesCollection("X=-5.0").Points(1).DataLabel.Text = "-5"
            .SeriesCollection("R=0").Points(1).DataLabel.Text = "0"
            .SeriesCollection("R=0").Points(37).DataLabel.Text = "8"  'Is rotated 90 deg.
         Case Else  'end of zoom limit
            Exit Sub
      End Select
   End With
   'Match the MiniSmith, which has no data labels.
   With Sheets("Custom").ChartObjects(2).Chart
      With .Axes(xlCategory)
         .MinimumScale = -MinMax
         .MaximumScale = MinMax
      End With
      With .Axes(xlValue)
         .MinimumScale = -MinMax
         .MaximumScale = MinMax
      End With
   End With
End Sub

Public Sub fbtnSnapshot_Smith_Click()
   Dim AnySnapVisible As Boolean
   ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   With Sheets("Smith")
      .Shapes("fbtnSnapshot").Visible = False  'possible to double show (error) if save/recall used
      Load frmSmithSnaps  'less screen flashing this way
      frmSmithSnaps.Show
      .Shapes("fbtnSnapshot").Visible = True
      'On return, set visibility of white backing if any snaps are showing.
      AnySnapVisible = .Shapes("boxSnap1").Visible Or .Shapes("boxSnap2").Visible Or _
                       .Shapes("boxSnap3").Visible Or .Shapes("boxSnap4").Visible
      .Shapes("boxSnapBacking").Visible = AnySnapVisible
   End With
End Sub

Public Sub fbtnCircle_Smith_Click()
   Dim Response As String, Default As String
   ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   If [AutoSWR] Then
      Default = -1
   ElseIf [SWRSize] = 1 Then
      Default = 0
   Else
      Default = CStr([SWRSize])
   End If
   Do
      'Loop until valid response or cancel.
      Response = InputBox("Enter the desired SWR circle size, > 1." & vbLf & _
                          "     - or -" & vbLf & _
                          "Enter a value of 0 to hide the circle." & vbLf & _
                          "     - or -" & vbLf & _
                          "Enter a value of -1 to automatically re-size" & vbLf & _
                          "the circle to match the Frequency marker dot.", _
                          "SWR Circle Size (or Hide or Auto Size)", Default)
      If Response = "" Then Exit Sub  'cancel button pressed
      If IsNumeric(Response) Then
         If Response > 1 Then
            [SWRSize].Value = CDbl(Response)
            [AutoSWR].Value = False
            'Show color change button.
            Sheets("Smith").Shapes("boxSWRcolor").Visible = True
            Exit Sub
         ElseIf Response = 0 Then
            [SWRSize].Value = 1  'circle with zero radius, ie hidden
            [AutoSWR].Value = False
            'Hide color change button.
            Sheets("Smith").Shapes("boxSWRcolor").Visible = False
            Exit Sub
         ElseIf Response = -1 Then
            [SWRSize].Formula = "=BU9"  'auto size to match marker
            [AutoSWR].Value = True
            'Show color change button.
            Sheets("Smith").Shapes("boxSWRcolor").Visible = True
            Exit Sub
         Else
            Beep
            Default = Response
         End If
      Else
         Beep
         Default = Response
      End If
   Loop
End Sub

Public Sub foptSignXNone_Click()
   ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   ChangeSignX
End Sub

Public Sub foptSignXPhase_Click()
   ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   ChangeSignX
End Sub

Public Sub foptSignXGRGI_Click()
   ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   ChangeSignX
End Sub

Public Sub fbtnYcolor_Click()
   Dim CI As Long  '3=red, 4=green, 5=blue, 7=magenta, 8=cyan, 48=40%-gray
   Dim vResponse As Variant
   
   With Sheets("Custom")
      'SchemeColor = ColorIndex + 7
      CI = .Shapes("boxYcolor").Fill.ForeColor.SchemeColor - 7
      .Range("D4").Activate
      vResponse = Application.Dialogs(xlDialogPatterns).Show(xlSolid, CI, CI)
      If vResponse = False Then Exit Sub  'Cancel pressed
      CI = .Range("D4").Interior.ColorIndex
      .Range("D4").Interior.ColorIndex = 15  'back to default 20% gray
      If CI = xlNone Then Exit Sub  '"No Color" - invalid choice
      .Shapes("boxYcolor").Fill.ForeColor.SchemeColor = CI + 7
      .Shapes("fLineY").Line.ForeColor.SchemeColor = CI + 7  'line under dropdown
      On Error Resume Next  'in case series not visible for any reason, or user cleared line/marker
      With .ChartObjects(1).Chart.SeriesCollection(1)  'Primary
         .Border.ColorIndex = CI
         If .MarkerStyle <> xlNone Then .MarkerBackgroundColorIndex = CI
      End With
      If Err.Number = 0 Then
         Application.ScreenUpdating = True  'so new trace color will show when question asked
         If MsgBox("Do you want to also change the color" & vbLf & _
                   "for the axis title and scale numbers?", _
                   vbYesNo, "Change scale color also?") = vbYes Then
            .ChartObjects(1).Chart.Axes(xlValue, xlPrimary).AxisTitle.Font.ColorIndex = CI
            .ChartObjects(1).Chart.Axes(xlValue, xlPrimary).TickLabels.Font.ColorIndex = CI
         Else
            .ChartObjects(1).Chart.Axes(xlValue, xlPrimary).AxisTitle.Font.ColorIndex = xlAutomatic
            .ChartObjects(1).Chart.Axes(xlValue, xlPrimary).TickLabels.Font.ColorIndex = xlAutomatic
         End If
      End If
   End With
End Sub

Public Sub fbtnY2color_Click()
   Dim CI As Long  '3=red, 4=green, 5=blue, 7=magenta, 8=cyan, 48=40%-gray
   Dim vResponse As Variant
   
   With Sheets("Custom")
      'SchemeColor = ColorIndex + 7
      CI = .Shapes("boxY2color").Fill.ForeColor.SchemeColor - 7
      .Range("D4").Activate
      vResponse = Application.Dialogs(xlDialogPatterns).Show(xlSolid, CI, CI)
      If vResponse = False Then Exit Sub  'Cancel pressed
      CI = .Range("D4").Interior.ColorIndex
      .Range("D4").Interior.ColorIndex = 15  'back to default 20% gray
      If CI = xlNone Then Exit Sub  '"No Color" - invalid choice
      .Shapes("boxY2color").Fill.ForeColor.SchemeColor = CI + 7
      .Shapes("fLineY2").Line.ForeColor.SchemeColor = CI + 7  'line under dropdown
      On Error Resume Next  'in case series not visible for any reason, or user cleared line/marker
      With .ChartObjects(1).Chart.SeriesCollection(4)  'Secondary
         .Border.ColorIndex = CI
         If .MarkerStyle <> xlNone Then .MarkerBackgroundColorIndex = CI
      End With
      If Err.Number = 0 Then
         Application.ScreenUpdating = True  'so new trace color will show when question asked
         If MsgBox("Do you want to also change the color" & vbLf & _
                   "for the axis title and scale numbers?", _
                   vbYesNo, "Change scale color also?") = vbYes Then
            .ChartObjects(1).Chart.Axes(xlValue, xlSecondary).AxisTitle.Font.ColorIndex = CI
            .ChartObjects(1).Chart.Axes(xlValue, xlSecondary).TickLabels.Font.ColorIndex = CI
         Else
            .ChartObjects(1).Chart.Axes(xlValue, xlSecondary).AxisTitle.Font.ColorIndex = xlAutomatic
            .ChartObjects(1).Chart.Axes(xlValue, xlSecondary).TickLabels.Font.ColorIndex = xlAutomatic
         End If
      End If
   End With
End Sub

Public Sub fbtnSmithcolor_Click()
   Dim CI As Long  '3=red, 4=green, 5=blue, 7=magenta, 8=cyan, 48=40%-gray
   Dim vResponse As Variant
   
   With ActiveSheet  'buttons available on both Smith and Custom sheets
      'SchemeColor = ColorIndex + 7
      CI = .Shapes("boxSmithcolor").Fill.ForeColor.SchemeColor - 7
      .Range("D4").Activate
      vResponse = Application.Dialogs(xlDialogPatterns).Show(xlSolid, CI, CI)
      If vResponse = False Then Exit Sub  'Cancel pressed
      CI = .Range("D4").Interior.ColorIndex
      .Range("D4").Interior.ColorIndex = 15  'back to default 20% gray
      If CI = xlNone Then Exit Sub  '"No Color" - invalid choice
   End With
   On Error Resume Next  'in case series not visible for any reason, or user cleared line/marker
   Sheets("Smith").Shapes("boxSmithcolor").Fill.ForeColor.SchemeColor = CI + 7
   With Sheets("Smith").ChartObjects(1).Chart.SeriesCollection(18)  'Primary
      .Border.ColorIndex = CI
      If .MarkerStyle <> xlNone Then .MarkerBackgroundColorIndex = CI
   End With
   Sheets("Custom").Shapes("boxSmithcolor").Fill.ForeColor.SchemeColor = CI + 7
   With Sheets("Custom").ChartObjects(2).Chart.SeriesCollection(18)  'Primary
      .Border.ColorIndex = CI
      If .MarkerStyle <> xlNone Then .MarkerBackgroundColorIndex = CI
   End With
End Sub

Public Sub fbtnFmarkcolor_Click()
   Dim CI As Long
   Dim vResponse As Variant
   
   With ActiveSheet  'buttons available on both Smith and Custom sheets
      'SchemeColor = ColorIndex + 7
      CI = .Shapes("boxFmarkcolor").Fill.ForeColor.SchemeColor - 7
      .Range("D4").Activate
      vResponse = Application.Dialogs(xlDialogPatterns).Show(xlSolid, CI, CI)
      If vResponse = False Then Exit Sub  'Cancel pressed
      CI = .Range("D4").Interior.ColorIndex
      .Range("D4").Interior.ColorIndex = 15  'back to default 20% gray
      If CI = xlNone Then Exit Sub  '"No Color" - invalid choice
   End With
   On Error Resume Next  'in case series not visible for any reason, or user cleared line/marker
   Sheets("Custom").Shapes("boxFmarkcolor").Fill.ForeColor.SchemeColor = CI + 7
   Sheets("Custom").ChartObjects(1).Chart.Shapes("Marker1").Line.ForeColor.SchemeColor = CI + 7
   Sheets("Custom").ChartObjects(1).Chart.Shapes("Marker1Shadow").TextFrame.Characters.Font.ColorIndex = CI
   Sheets("Smith").Shapes("boxFmarkcolor").Fill.ForeColor.SchemeColor = CI + 7
   With Sheets("Smith").ChartObjects(1).Chart.SeriesCollection(23)  'Marker1 - Smith
      .MarkerBackgroundColorIndex = CI
   End With
   With Sheets("Custom").ChartObjects(2).Chart.SeriesCollection(23)  'Marker1 - miniSmith
      .MarkerBackgroundColorIndex = CI
   End With
End Sub

Public Sub fbtnFmark2color_Click()
   Dim CI As Long
   Dim vResponse As Variant
   
   With ActiveSheet  'buttons available on both Smith and Custom sheets
      'SchemeColor = ColorIndex + 7
      CI = .Shapes("boxFmark2color").Fill.ForeColor.SchemeColor - 7
      .Range("D4").Activate
      vResponse = Application.Dialogs(xlDialogPatterns).Show(xlSolid, CI, CI)
      If vResponse = False Then Exit Sub  'Cancel pressed
      CI = .Range("D4").Interior.ColorIndex
      .Range("D4").Interior.ColorIndex = 15  'back to default 20% gray
      If CI = xlNone Then Exit Sub  '"No Color" - invalid choice
   End With
   On Error Resume Next  'in case series not visible for any reason, or user cleared line/marker
   Sheets("Custom").Shapes("boxFmark2color").Fill.ForeColor.SchemeColor = CI + 7
   Sheets("Custom").ChartObjects(1).Chart.Shapes("Marker2").Line.ForeColor.SchemeColor = CI + 7
   Sheets("Custom").ChartObjects(1).Chart.Shapes("Marker2Shadow").TextFrame.Characters.Font.ColorIndex = CI
   Sheets("Smith").Shapes("boxFmark2color").Fill.ForeColor.SchemeColor = CI + 7
   With Sheets("Smith").ChartObjects(1).Chart.SeriesCollection(24)  'Marker2 - Smith
      .MarkerBackgroundColorIndex = CI
   End With
   With Sheets("Custom").ChartObjects(2).Chart.SeriesCollection(24)  'Marker2 - miniSmith
      .MarkerBackgroundColorIndex = CI
   End With
End Sub

Public Sub fbtnSWRcolor_Click()
   Dim CI As Long  '3=red, 4=green, 5=blue, 7=magenta, 8=cyan, 48=40%-gray
   Dim vResponse As Variant
   
   With Sheets("Smith")
      'SchemeColor = ColorIndex + 7
      CI = .Shapes("boxSWRcolor").Fill.ForeColor.SchemeColor - 7
      .Range("D4").Activate
      vResponse = Application.Dialogs(xlDialogPatterns).Show(xlSolid, CI, CI)
      If vResponse = False Then Exit Sub  'Cancel pressed
      CI = .Range("D4").Interior.ColorIndex
      .Range("D4").Interior.ColorIndex = 15  'back to default 20% gray
      If CI = xlNone Then Exit Sub  '"No Color" - invalid choice
      On Error Resume Next  'in case series not visible for any reason, or user cleared line/marker
      .Shapes("boxSWRcolor").Fill.ForeColor.SchemeColor = CI + 7
      .Shapes("boxCircle").TextFrame.Characters.Font.ColorIndex = CI
      With .ChartObjects(1).Chart.SeriesCollection(17)  'SWR circle - Smith
         .Border.ColorIndex = CI
      End With
   End With
   With Sheets("Custom").ChartObjects(2).Chart.SeriesCollection(17)  'SWR circle - miniSmith
      .Border.ColorIndex = CI
   End With
End Sub

Public Sub fbtnRefLinescolor_Click()
   Dim CI As Long  '3=red, 4=green, 5=blue, 7=magenta, 8=cyan, 48=40%-gray
   Dim vResponse As Variant
   
   With Sheets("Custom")
      'SchemeColor = ColorIndex + 7
      CI = .Shapes("boxRefLinescolor").Fill.ForeColor.SchemeColor - 7
      .Range("D4").Activate
      vResponse = Application.Dialogs(xlDialogPatterns).Show(xlSolid, CI, CI)
      If vResponse = False Then Exit Sub  'Cancel pressed
      CI = .Range("D4").Interior.ColorIndex
      .Range("D4").Interior.ColorIndex = 15  'back to default 20% gray
      If CI = xlNone Then Exit Sub  '"No Color" - invalid choice
      .Shapes("boxRefLinescolor").Fill.ForeColor.SchemeColor = CI + 7
      On Error Resume Next  'in case series not visible, or user cleared line/marker
      With .ChartObjects(1).Chart.SeriesCollection(8)  'Left 1
         .Border.ColorIndex = CI
      End With
      With .ChartObjects(1).Chart.SeriesCollection(10)  'Right 1
         .Border.ColorIndex = CI
      End With
   End With
End Sub

Public Sub fbtnRefLines2color_Click()
   Dim CI As Long  '3=red, 4=green, 5=blue, 7=magenta, 8=cyan, 48=40%-gray
   Dim vResponse As Variant
   
   With Sheets("Custom")
      'SchemeColor = ColorIndex + 7
      CI = .Shapes("boxRefLines2color").Fill.ForeColor.SchemeColor - 7
      .Range("D4").Activate
      vResponse = Application.Dialogs(xlDialogPatterns).Show(xlSolid, CI, CI)
      If vResponse = False Then Exit Sub  'Cancel pressed
      CI = .Range("D4").Interior.ColorIndex
      .Range("D4").Interior.ColorIndex = 15  'back to default 20% gray
      If CI = xlNone Then Exit Sub  '"No Color" - invalid choice
      .Shapes("boxRefLines2color").Fill.ForeColor.SchemeColor = CI + 7
      On Error Resume Next  'in case series not visible, or user cleared line/marker
      With .ChartObjects(1).Chart.SeriesCollection(9)  'Left 2
         .Border.ColorIndex = CI
      End With
      With .ChartObjects(1).Chart.SeriesCollection(11)  'Right 2
         .Border.ColorIndex = CI
      End With
   End With
End Sub

'=============  Shared forms buttons  =============

Public Sub fbtnFreqKHz_Click()
   If ActiveSheet.Name <> "Data" Then
      ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   End If
   'Toggle between KHz and Hz for Frequency dispaly.
   With Sheets("Data")
      If .Range("A7").NumberFormat = "0.000000" Then
         .Range("A1").EntireColumn.NumberFormat = "0.000"
      Else
         .Range("A1").EntireColumn.NumberFormat = "0.000000"
      End If
   End With
   'Set marker tables to match.
   Sheets("Custom").Range("C31:C33").NumberFormat = Sheets("Data").Range("A7").NumberFormat
   Sheets("Smith").Range("B80:B82").NumberFormat = Sheets("Data").Range("A7").NumberFormat
End Sub

Public Sub fbtnLoad_Click()
   If ActiveSheet.Name <> "Data" Then
      ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   End If
   ReadData
   ChangeSignX 'SM6WHY
End Sub

Public Sub fbtnRefresh_Click()
   If ActiveSheet.Name <> "Data" Then
      ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   End If
   FileToRefresh = [DirData] & "\" & [CurFname]
   If Dir(FileToRefresh) = "" Then
      MsgBox "File" & vbLf & _
             FileToRefresh & vbLf & _
             "not found.  Use the Load Data button to select an" & vbLf & _
             "existing file before using Refresh or Enable Polling.", _
             vbExclamation + vbOKOnly, "File Not Found (Refresh/Polling)"
      [EnablePolling].Value = False
   Else
      LastModified = FileDateTime(FileToRefresh)
      ReadData FileToRefresh, , True  'reload currently loaded file path+name
      If [EnablePolling] Then
         'Check for new FileDateTime without delay, in case file was updated
         'during the time it took for ReadData to load it.  If so, Refresh it
         'again immediately.  Since "Ontime Now" is being used instead of a direct
         'call to Polling, the DoEvents may not be necessary.  Doesn't hurt to have it.
         DoEvents
         Application.OnTime Now, "Polling"
      End If
   End If
   
   ChangeSignX  'SM6WHY
End Sub

Public Sub Polling()
   If ThisWorkbook.Sheets("Data").Range("EnablePolling").Value Then  'still checked?
      If Dir(FileToRefresh) = "" Then
         'File no longer present, stop polling.
         ThisWorkbook.Sheets("Data").Range("EnablePolling").Value = False
      Else
         'File still present, see if new FileDateTime since last Refresh.
         If FileDateTime(FileToRefresh) <> LastModified Then
            'Refresh file, but first make sure I'm still the active workbook.
            'Note that Workbook_Activate event fires only if I'm *not* the active book.
            ThisWorkbook.Activate
            fbtnRefresh_Click
         Else
            'Check again in 1 second.  Note that the minimum granularity for
            'FileDateTime is 1 second, no need to check any sooner.
            Application.OnTime Now + TimeValue("00:00:01"), "Polling"
         End If
      End If
   End If
   
   ChangeSignX  'SM6WHY
End Sub

Public Sub chkPolling_Click()
   If [EnablePolling] Then fbtnRefresh_Click
End Sub

Public Sub fbtnChangeS2P_Click()
   If ActiveSheet.Name <> "Data" Then
      ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   End If
   If Dir([DirData] & "\" & [CurFname]) = "" Then
      MsgBox "File" & vbLf & _
             [DirData] & "\" & [CurFname] & vbLf & _
             "not found.", _
             vbExclamation + vbOKOnly, "File Not Found"
   Else
      ReadData [DirData] & "\" & [CurFname], True  'reload currently loaded file path+name
   End If
End Sub

Public Sub fbtnAddSub_Click()
   ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   frmAddSubTL.Show
End Sub

Public Sub fbtnMeasure_Click()
   ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   frmMeasureTL.Show
End Sub

Public Sub fbtnTitles_Click()
   ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   frmTitles.Show
End Sub

Public Sub fbtnLegend_Click()
   ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   frmLegend.Show
End Sub

Public Sub fbtnGenData_Click()
   If ActiveSheet.Name <> "Data" Then
      ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   End If
   frmGenData.Show
End Sub

Public Sub fbtnPrtPrev_Click()
   Application.ScreenUpdating = False
   ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   'Insert current file name as center header.  Footer has non-changing boilerplate.
   ActiveSheet.ChartObjects(1).Chart.PageSetup.CenterHeader = _
         "&""Arial""&B&10File:  " & [CurFname]
   ActiveSheet.ChartObjects(1).Chart.PrintPreview
   Range("D4").Select  'deselect chart
   Application.ScreenUpdating = True  'XL2007, needed to avoid "white buttons" on return
End Sub

Public Sub fbtnCopy_Click()
   Dim SaveCIca As Long
   Dim SaveCIpa As Long
   Dim Fillca As Long
   Dim Fillpa As Long
   
   ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   'Save chart colors now, may be changed by frmCopyScale.
   With ActiveSheet.ChartObjects(1).Chart
      SaveCIca = .ChartArea.Interior.ColorIndex
      SaveCIpa = .PlotArea.Interior.ColorIndex
      Fillca = .ChartArea.Fill.Type
      Fillpa = .PlotArea.Fill.Type
   End With
   'Activate chart to show WYSIWYG appearance, without the
   'worksheet level buttons and text boxes.
   ActiveSheet.ChartObjects(1).Activate
   frmCopyScale.Show
   If [CopyScaleFactor] < 0 Then  'Cancel or Close on form
      [CopyScaleFactor].Value = -[CopyScaleFactor]
      With ActiveSheet.ChartObjects(1).Chart
         'Restore appearance, but only if solid color fill.
         If Fillca = msoFillSolid And Fillpa = msoFillSolid Then
            .ChartArea.Interior.ColorIndex = SaveCIca
            .PlotArea.Interior.ColorIndex = SaveCIpa
         End If
      End With
      ActiveSheet.Range("D4").Activate  'deactivate chart
      Exit Sub
   End If
   
   Application.ScreenUpdating = False
   ActiveSheet.Range("D4").Activate  'deactivate chart
   
   With ActiveSheet.ChartObjects(1).Chart
      'Chart, 3 parms
      .CopyPicture Appearance:=xlScreen, Size:=xlScreen, Format:=xlBitmap
      'Restore appearance, but only if solid color fill.
      If Fillca = msoFillSolid And Fillpa = msoFillSolid Then
         .ChartArea.Interior.ColorIndex = SaveCIca
         .PlotArea.Interior.ColorIndex = SaveCIpa
      End If
      ActiveSheet.Range("D4").Activate  'deactivate chart
   End With
   
   'Resize if requested.  XL2007, must copy to shape even at size=1.
   If [CopyScaleFactor] <> 1 Or Val(Application.Version) > 11 Then
      Dim CurSht As String
      CurSht = ActiveSheet.Name
      Application.EnableEvents = False
      Sheets("Data").Activate  'just a convenient temporary spot
      ActiveSheet.Paste  'paste from the CopyPicture above, will reset selection
      If TypeName(Selection) = "Picture" Then
         With Selection
            .ShapeRange.LockAspectRatio = msoTrue
            .ShapeRange.ScaleHeight [CopyScaleFactor], True
            .ShapeRange.ScaleWidth [CopyScaleFactor], True
            'Shape, copy back to clipboard as bitmap.
            .CopyPicture Appearance:=xlScreen, Format:=xlBitmap
            .Delete
         End With
      Else
         MsgBox "Resize failed, clipboard in use.", vbExclamation, "Resize failed"
      End If
      Sheets(CurSht).Activate
      Application.EnableEvents = True
   End If
   
   Application.ScreenUpdating = True
End Sub

Public Sub fbtnGIF_Click()
   Dim FileToSaveAs As Variant
   Dim PrevPath As String
   Dim SuggestName As String
   Dim SaveAsTitle As String
   Dim SaveCIca As Long
   Dim SaveCIpa As Long
   Dim Fillca As Long
   Dim Fillpa As Long
   Dim CurSht As String
   Dim PicHigh As Single
   Dim PicWide As Single
   Dim ScaleFactor As Single
   
   ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   [CopyScaleFactor].Value = [CopyScaleFactor] + 100  'signal to change frmCopyScale caption
   
   'Save chart colors now, may be changed by frmCopyScale.
   With ActiveSheet.ChartObjects(1).Chart
      SaveCIca = .ChartArea.Interior.ColorIndex
      SaveCIpa = .PlotArea.Interior.ColorIndex
      Fillca = .ChartArea.Fill.Type
      Fillpa = .PlotArea.Fill.Type
   End With
   'Activate chart to show WYSIWYG appearance, without the worksheet level buttons
   'and text boxes.  Form may also set Visible state of shapes on Smith chart.
   ActiveSheet.ChartObjects(1).Activate
   frmCopyScale.Show
   If [CopyScaleFactor] < 0 Then  'Cancel or Close on form
      [CopyScaleFactor].Value = -[CopyScaleFactor]
      With ActiveSheet.ChartObjects(1).Chart
         'Restore appearance, but only if solid color fill.
         If Fillca = msoFillSolid And Fillpa = msoFillSolid Then
            .ChartArea.Interior.ColorIndex = SaveCIca
            .PlotArea.Interior.ColorIndex = SaveCIpa
         End If
      End With
      ActiveSheet.Range("D4").Activate  'deactivate chart
      Exit Sub
   End If
   
   On Error Resume Next  'Try to pre-set path, but don't fail if not valid
   PrevPath = CurDir
   ChDrive [DirExportGIF].Value
   ChDir [DirExportGIF].Value
   SuggestName = FnOnly([CurFname]) & " " & ActiveSheet.ChartObjects(1).Name
   SaveAsTitle = "Save Chart as GIF File"
   FileToSaveAs = Application.GetSaveAsFilename( _
         SuggestName, _
         "Graphics Interchange Format (*.gif),*.gif", , _
         SaveAsTitle)
   If FileToSaveAs = False Then
      ChDrive PrevPath
      ChDir PrevPath
      With ActiveSheet.ChartObjects(1).Chart
         'Restore appearance, but only if solid color fill.
         If Fillca = msoFillSolid And Fillpa = msoFillSolid Then
            .ChartArea.Interior.ColorIndex = SaveCIca
            .PlotArea.Interior.ColorIndex = SaveCIpa
         End If
      End With
      ActiveSheet.Range("D4").Activate  'deactivate chart
      Exit Sub
   End If
   'Save user-specified path for next time, then reset to previous (may not have changed).
   [DirExportGIF].Value = Left(FileToSaveAs, MyInStrRev(CStr(FileToSaveAs), "\") - 1)
   ChDrive PrevPath
   ChDir PrevPath
   On Error GoTo 0
   
   Application.ScreenUpdating = False
   ActiveSheet.Range("D4").Activate  'deactivate chart
         
   If [CopyScaleFactor] = 1 Then
      'Export chart directly as GIF, no resizing.
      On Error Resume Next
      ActiveSheet.ChartObjects(1).Chart.Export FileToSaveAs, "GIF", False
      If Err.Number <> 0 Then
         MsgBox "The filter required to export charts in GIF format is" & vbLf & _
                "not available on this computer.  You can re-run the" & vbLf & _
                "Excel Setup and install the GIF Export filter.", _
                vbExclamation, "GIF export not available"
      End If
      On Error GoTo 0
   Else
      'To be resized.
      'First create a bitmap clipboard copy.
      ActiveSheet.ChartObjects(1).Chart _
         .CopyPicture Appearance:=xlScreen, Size:=xlScreen, Format:=xlBitmap
        
      'IMPORTANT:  Create a temporary workbook to contain the
      'temporary resized chart, else the current workbook grows in
      'size with each new chart added, even if subsequently deleted.
      Application.EnableEvents = False  'avoid workbook Deactivate/Activate events
      ScaleFactor = [CopyScaleFactor]
      Workbooks.Add  'becomes the active workbook
      ActiveWorkbook.Sheets(1).Activate
      Sheets(1).Range("B2").Select  'just for convenient single step viewing
      
      'Paste the CopyPicture bitmap from above, will reset selection.
      ActiveSheet.Paste
      If TypeName(Selection) = "Picture" Then
         With Selection
            'Resize and note new Width and Height.
            .ShapeRange.LockAspectRatio = msoTrue
            .ShapeRange.ScaleWidth ScaleFactor, True
            .ShapeRange.ScaleHeight ScaleFactor, True
            PicWide = .Width
            PicHigh = .Height
            'Copy as bitmap back to clipboard, delete.
            .CopyPicture Appearance:=xlScreen, Format:=xlBitmap
            .Delete
         End With
   
         'Add an empty embedded chart, which will be Shapes(1) on the sheet.
         'ActiveSheet.Shapes(1) = ActiveSheet.ChartObjects(1)
         CurSht = ActiveSheet.Name
         Charts.Add
         ActiveChart.Location Where:=xlLocationAsObject, Name:=CurSht
         ActiveSheet.Shapes(1).Left = ActiveSheet.Range("B2").Left  'convenient for debugging
         ActiveSheet.Shapes(1).Top = ActiveSheet.Range("B2").Top
         
         'Set chart to same size as the resized picture above.
         ActiveSheet.Shapes(1).Width = PicWide
         ActiveSheet.Shapes(1).Height = PicHigh
         
         'Paste resized bitmap from above into ChartArea, which creates ActiveChart.Shapes(1)
         ActiveSheet.ChartObjects(1).Chart.Paste
         If TypeName(Selection) = "Picture" Then
            'Adjust the position of the pasted picture.
            'Adjustment is slightly greater than .ChartArea.Left, why ???
            ActiveSheet.ChartObjects(1).Chart.Shapes(1).IncrementLeft -4
            ActiveSheet.ChartObjects(1).Chart.Shapes(1).IncrementTop -4
            
            'Remove chart border.  This must be done *after* all positioning and sizing.
            ActiveSheet.ChartObjects(1).Chart.ChartArea.Border.LineStyle = 0
         
            'Export as GIF and finish.
            On Error Resume Next
            ActiveSheet.ChartObjects(1).Chart.Export FileToSaveAs, "GIF", False
            If Err.Number <> 0 Then
               MsgBox "The filter required to export charts in GIF format is" & vbLf & _
                      "not available on this computer.  You can re-run the" & vbLf & _
                      "Excel Setup and install the GIF Export filter.", _
                      vbExclamation, "GIF export not available"
            End If
            On Error GoTo 0
         Else
            MsgBox "Resize failed, clipboard in use.", vbExclamation, "Resize failed"
         End If
      Else
         MsgBox "Resize failed, clipboard in use.", vbExclamation, "Resize failed"
         Selection.Delete
      End If
      'Discard the temporary workbook.
      ActiveWorkbook.Close SaveChanges:=False
      Application.EnableEvents = True
      Application.Calculate  'required after above Workbook.Close (?)
   End If
   
   'Restore chart appearance, but only if solid color fill.
   If Fillca = msoFillSolid And Fillpa = msoFillSolid Then
      With ActiveSheet.ChartObjects(1).Chart
         .ChartArea.Interior.ColorIndex = SaveCIca
         .PlotArea.Interior.ColorIndex = SaveCIpa
      End With
   End If
   
   Application.ScreenUpdating = True
End Sub

Public Sub fbtnSaveS1P_Click()
   Dim PrevPath As String
   Dim FileToSaveAs As Variant
   Dim Suffix As Integer
   Dim TC As Long
   Dim vFreq As Variant
   Dim vRho As Variant
   Dim vPhase As Variant
   Dim strInfoBox As String
   
   If [Refzo] <> 50 Then
      If MsgBox("Warning:  The current reference resistance for S11 values" & vbLf & _
                "is " & CStr([Refzo]) & " ohms.  The standard for s1p files is 50 ohms." & vbLf & _
                "Do you want to continue with ""Save as S1P"" anyway?", _
                vbYesNo + vbDefaultButton2, "Warning: Reference resistance not 50 ohms") = vbNo Then
         Exit Sub
      End If
   End If
   
   On Error Resume Next  'Try to pre-set path, but don't fail if not valid
   PrevPath = CurDir
   ChDrive [DirData].Value
   ChDir [DirData].Value
   FileToSaveAs = FnOnly([CurFname])  'suggest
   If Dir(FileToSaveAs & ".s1p") <> "" Then  'don't overwrite any existing
      For Suffix = 1 To 99
         FileToSaveAs = FileToSaveAs & Format(Suffix, "00")
         If Dir(FileToSaveAs & ".s1p") = "" Then
            Exit For
         Else
            FileToSaveAs = FnOnly([CurFname])
         End If
      Next Suffix
   End If
   FileToSaveAs = Application.GetSaveAsFilename(FileToSaveAs, _
                  "Touchstone S1P (*.s1p),*.s1p", 1, "Save Reflection Data As ...")
   If FileToSaveAs = False Then
      ChDrive PrevPath
      ChDir PrevPath
      Exit Sub
   End If
   'Save user-specified path for next time, then reset to previous (may not have changed).
   [DirData].Value = Left(FileToSaveAs, MyInStrRev(CStr(FileToSaveAs), "\") - 1)
   ChDrive PrevPath
   ChDir PrevPath
   On Error GoTo 0
   
   vFreq = Sheets("Data").Range("TCFreq").Offset(1).Resize([TCcnt], 2)  'Note ( ,2) which forces
   vRho = Sheets("Data").Range("Rho").Offset(1).Resize([TCcnt], 2)      'vXXX to be an array
   vPhase = Sheets("Data").Range("Phase").Offset(1).Resize([TCcnt], 2)  'even for single freq
   
   Open FileToSaveAs For Output As #1
   Print #1, "!Created via Zplots ""Save as S1P"" button"
   Print #1, "!Original data file:  " & [CurFname]
   strInfoBox = Sheets("Custom").Shapes("boxTline").TextFrame.Characters.Text
   If strInfoBox = " " Then
      Print #1, "!Transmission line transform:  None"
   Else
      Print #1, "!Transmission line transform:  " & strInfoBox
   End If
   Print #1, "# MHZ S MA R " & [Refzo]
   For TC = 1 To [TCcnt]
      Print #1, Format(vFreq(TC, 1), "000.000000"); _
                Spc(3); Format(vRho(TC, 1), "0.000000000000000"); _
                Spc(3); Format(vPhase(TC, 1), "000.000000000000")
   Next TC
   Close #1
   
   'If "," used as decimal point (non-English numbers) replace with ".".
   'Note that Application.DecimalSeparator not available  prior to XL2003,
   'VBA Replace() not available prior to XL2000.
   If Application.International(xlDecimalSeparator) = "," Then
      Dim sRecord As String
      Open FileToSaveAs For Input As #1
      Open "$Zplots$.tmp" For Output As #2  'in CurDir
      Do While Not EOF(1)
         Line Input #1, sRecord
         Print #2, Application.Substitute(sRecord, ",", ".")
      Loop
      Close #1
      Close #2
      Kill FileToSaveAs
      Name "$Zplots$.tmp" As FileToSaveAs
   End If
   
   MsgBox "Reflection data saved in file" & vbLf & _
          FileToSaveAs, _
          vbOKOnly, "File Saved"
End Sub

Public Sub MarkerOnScreen_Click()
   'Caller will be "Marker1OnScreen" or "Marker2OnScreen".
   'ActiveSheet will be Custom or Smith.
   'Text box to change on Custom sheet is either "Marker1Text" or "Marker2Text".
   'Series name for data label on Smith sheet is either "Marker1" or "Marker2".
   ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   Dim strMarkerName As String
   strMarkerName = Left(Application.Caller, 7)
   If ActiveSheet.Name = "Custom" Then
      If ActiveSheet.CheckBoxes(Application.Caller).Value = xlOn Then
         'Call common proc to build text and set position.
         PositionMarkers strMarkerName, _
               CLng(IIf(strMarkerName = "Marker1", [MarkFreqIndex], [Mark2FreqIndex]))
      Else
         ActiveSheet.ChartObjects(1).Chart.Shapes(strMarkerName & "Text").Visible = False
      End If
   Else  'Smith
      On Error Resume Next  'in case series not visible for any reason, or user cleared line/marker
      If ActiveSheet.CheckBoxes(Application.Caller).Value = xlOn Then
         'Call common proc to build text and set position.
         PositionMarkers strMarkerName, _
               CLng(IIf(strMarkerName = "Marker1", [MarkFreqIndex], [Mark2FreqIndex]))
      Else
         'CStr() needed for XL2007.
         Sheets("Smith").ChartObjects(1).Chart.SeriesCollection(CStr(strMarkerName)).Points(1).HasDataLabel = False
      End If
   End If
End Sub

Public Function FnOnly(NameType As String) As String
   Dim i As Integer
   For i = Len(NameType) To 2 Step -1
      If Mid(NameType, i, 1) = "." Then
         FnOnly = Left(NameType, i - 1)
         Exit Function
      End If
   Next i
   FnOnly = NameType  'no "." found
End Function

Public Sub DoCalc()
   'See ThisWorkbook.Activate for details.
   Calculate
End Sub

'=============  Dummy Click  =============

Public Sub DummyClick()
   'No-op.  By assigning this macro to a shape, clicking
   'the shape has no effect as opposed to selecting it.
   'Used for shapes on sheets that do not have Object level protection.
End Sub

'=========================================

'''Function AnalyzeColor(sh As Shape, Optional sType As String = "text")
'''    Dim aIdx As Variant
'''    Dim aClr As Variant
'''    Dim ret As Variant
'''    aIdx = Array(1, 53, 52, 51, 49, 11, 55, 56, 9, 46, 12, _
'''                 10, 14, 5, 47, 16, 3, 45, 43, 50, 42, 41, _
'''                 13, 48, 7, 44, 6, 4, 8, 33, 54, 15, 38, 40, _
'''                 36, 35, 34, 37, 39, 2, _
'''                 17, 18, 19, 20, 21, _
'''                 22, 23, 24, 25, 26, _
'''                 27, 28, 29, 30, 31, 32)
'''    aClr = Array("Black", "Brown", "Olive Green", "Dark Green", "Dark Teal", _
'''                 "Dark Blue", "Indigo", "Gray-80%", "Dark Red", "Orange", "Dark Yellow", _
'''                 "Green", "Teal", "Blue", "Blue-Gray", "Gray-50%", "Red", "Light Orange", _
'''                 "Lime", "Sea Green", "Aqua", "Light Blue", "Violet", "Gray-40%", "Pink", _
'''                 "Gold", "Yellow", "Bright Green", "Turqoise", "Sky Blue", "Plum", _
'''                 "Gray-25%", "Rose", "Tan", "Light Yellow", "Light Green", "Light Turqoise", _
'''                 "Pale Blue", "Lavendar", "White", _
'''                 "Periwinkle", "Plum", "Ivory", "Light Turquoise", "Dark Purple", _
'''                 "Coral", "Ocean Blue", "Ice Blue", "Dark Blue", "Pink", _
'''                 "Yellow", "Turquoise", "Violet", "Dark Red", "Teal", "Blue")
'''    On Error Resume Next
'''    ret = Application.Match((sh.Fill.ForeColor.SchemeColor - 7), aIdx, 0) - 1  'option base 0
'''    sType = LCase(sType)
'''    Select Case sType
'''    Case "text"
'''        AnalyzeColor = IIf(IsEmpty(ret), "Color ?", aClr(ret))
'''    Case "index"
'''        AnalyzeColor = IIf(IsEmpty(ret), CLng(xlNone), aIdx(ret))
'''    Case "rgb"
'''        AnalyzeColor = IIf(IsEmpty(ret), GetRGB(xlNone), GetRGB(CLng(aIdx(ret))))
'''    End Select
'''End Function
'''
'''Function GetRGB(lColor As Long) As Variant
'''    Dim r As Long
'''    Dim g As Long
'''    Dim b As Long
'''    r = lColor Mod 256
'''    g = Int(lColor / 256) Mod 256
'''    b = Int(lColor / 256 / 256)
'''    GetRGB = "#" & Right("0" & Hex(r), 2) & _
'''             Right("0" & Hex(g), 2) & _
'''             Right("0" & Hex(b), 2)
'''End Function
Attribute VB_Name = "PublicAndAPI"
Option Compare Text  ' "AAA" = "aaa"
Option Explicit
Option Private Module

Public CustomChart1_Activated As Boolean
Public SmithChart1_Activated As Boolean

'==================================================================

Public Const SL As Double = 983.571056430446           '= 299.792458 / 0.3048 (Freq=MHz)
Public Const SLfps As Double = 983571056.430446        '= 299792458 / 0.3048  (Freq=Hz)
Public Const DEG2RAD As Double = 1.74532925199432E-02  '= PI() / 180 (-1E16 for Sin() rounding problem)
Public Const RAD2DEG As Double = 57.2957795130824      '= 180 / PI()
Public Const NEPER As Double = 8.68588963806504        '= 20 / Ln(10)   dB/neper
Public Const ONEPI As Double = 3.14159265358979
Public Const TWOPI As Double = 6.28318530717959

'==================================================================

'API functions to get the screen resolution in pixels per inch.
'Under Excel 2000 and above could use Application.DefaultWebOptions.PixelsPerInch.
#If VBA7 Then
   Declare PtrSafe Function CreateIC Lib "gdi32" Alias "CreateICA" _
                   (ByVal lpDriverName As String, ByVal lpDeviceName As String, _
                    ByVal lpOutput As String, lpInitData As Long) As LongPtr
                     
   Declare PtrSafe Function GetDeviceCaps Lib "gdi32" _
                   (ByVal hDC As LongPtr, ByVal nIndex As Long) As Long
                    
   Declare PtrSafe Function DeleteDC Lib "gdi32" _
                   (ByVal hDC As LongPtr) As Long
                   
   Declare PtrSafe Function GetSystemMetrics32 Lib "user32" Alias "GetSystemMetrics" _
                   (ByVal nIndex As Long) As Long
#Else
   Declare Function CreateIC Lib "gdi32" Alias "CreateICA" _
                   (ByVal lpDriverName As String, ByVal lpDeviceName As String, _
                    ByVal lpOutput As String, lpInitData As Long) As Long
                     
   Declare Function GetDeviceCaps Lib "gdi32" _
                   (ByVal hDC As Long, ByVal nIndex As Long) As Long
                    
   Declare Function DeleteDC Lib "gdi32" _
                   (ByVal hDC As Long) As Long
                   
   Declare Function GetSystemMetrics32 Lib "user32" Alias "GetSystemMetrics" _
                   (ByVal nIndex As Long) As Long
#End If

Public Const SM_CXSCREEN = 0
Public Const SM_CYSCREEN = 1

        
'API function to get serial number (and other info) about a path.
'API Sleep.
'API GetTickCount, returns number of milliseconds that have elapsed since the system was started.
#If VBA7 Then
   Declare PtrSafe Function GetVolumeInformation Lib "kernel32" Alias "GetVolumeInformationA" _
          (ByVal lpRootPathName As String, _
           ByVal lpVolumeNameBuffer As String, _
           ByVal nVolumeNameSize As Long, _
           lpVolumeSerialNumber As Long, _
           lpMaximumComponentLength As Long, _
           lpFileSystemFlags As Long, _
           ByVal lpFileSystemNameBuffer As String, _
           ByVal nFileSystemNameSize As Long) As Long
 
   Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMiliseconds As Long)
   
   Declare PtrSafe Function GetTickCount Lib "kernel32" () As Long
#Else
   Declare Function GetVolumeInformation Lib "kernel32" Alias "GetVolumeInformationA" _
          (ByVal lpRootPathName As String, _
           ByVal lpVolumeNameBuffer As String, _
           ByVal nVolumeNameSize As Long, _
           lpVolumeSerialNumber As Long, _
           lpMaximumComponentLength As Long, _
           lpFileSystemFlags As Long, _
           ByVal lpFileSystemNameBuffer As String, _
           ByVal nFileSystemNameSize As Long) As Long
 
   Declare Sub Sleep Lib "kernel32" (ByVal dwMiliseconds As Long)
   
   Declare Function GetTickCount Lib "kernel32" () As Long
#End If

'==================================================================

'OpenPF records.
Public Type PFHeaderBlock
   Version As Byte
   HeaderLen As Integer
   SourceLen As Byte
   TitleLen As Byte
   EnvirLen As Byte
   NotesLen As Integer
End Type

Public Type PFDataBlock
   BlockType As Byte
   BlockLen As Integer
End Type

Public Type PFFarFieldData
   TitleLen As Byte
   EnvirLen As Byte
   NotesLen As Integer
   Frequency As Single
   Plane As Byte
   PlaneAngle As Single
   Symmetry As Byte
   NumPoints As Integer
   FirstAngle As Single
   Increment As Single
End Type

Public Type PFCustomData
   NumberFormatX As String * 10
   NumberFormatY As String * 10
   NumPoints As Integer
End Type

Public Type PFSmithData
   NumPoints As Integer
End Type

'==================================================================

'Replacement code for VBA.Sendkeys.

Public Type KEYBDINPUT
   dwType      As Long
   wVK         As Integer
   wScan       As Integer
   dwFlags     As Long
   dwTime      As Long
   dwExtraInfo As Long
   dwPadding1  As Long
   dwPadding2  As Long
End Type

#If VBA7 Then
   Declare PtrSafe Function SendInput Lib "user32.dll" _
          (ByVal nInputs As Long, _
           pInputs As KEYBDINPUT, _
           ByVal cbSize As Long) As Long
#Else
   Declare Function SendInput Lib "user32.dll" _
          (ByVal nInputs As Long, _
           pInputs As KEYBDINPUT, _
           ByVal cbSize As Long) As Long
#End If

Public Const INPUT_KEYBOARD As Long = 1
Public Const KEYEVENTF_KEYDN As Long = 0
Public Const KEYEVENTF_KEYUP As Long = 2

Public Const VK_Escape = 27
Attribute VB_Name = "Sheet01"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Compare Text  ' "AAA" = "aaa"
Option Explicit

Private Sub Worksheet_Activate()
   'Avoid showing an empty page, confusing.
   If Len(Cells(ActiveWindow.ScrollRow, 1)) = 0 Then
      ActiveWindow.ScrollRow = 7
      [Refzo].Select
   End If
End Sub
Attribute VB_Name = "Sheet02"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "spnMarker1, 105, 0, MSForms, SpinButton"
Attribute VB_Control = "spnMarker2, 106, 1, MSForms, SpinButton"
Attribute VB_Control = "lblYmma, 142, 2, MSForms, Label"
Attribute VB_Control = "lblY2mma, 146, 5, MSForms, Label"
Option Compare Text  ' "AAA" = "aaa"
Option Explicit

Private Sub Worksheet_Activate()

   Sheets("Custom").Range("D4").Activate

   'Associate events with embedded charts.  Normally only need to
   'do this once but may be reset during development and debugging.
   'Note that the code must be executed from a standard module, not a sheet object.
   SetChartEvents

   'If the marker info box is up, enable the Esc OnKey.
   If [MarkFreqIndex].Value <> -1 Then Application.OnKey "{Esc}", "CloseFreqMarkers"
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Excel.Range, Cancel As Boolean)
   'Keep novice users out of trouble.
   Cancel = True
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Excel.Range, Cancel As Boolean)
   'Keep novice users out of trouble.
   Cancel = True
End Sub

Private Sub Worksheet_Deactivate()
   'Make sure the OnKey proc for the Markers is cleared.
   Application.OnKey "{Esc}"

   'Reset status bar in case pixel info shown
   If Application.StatusBar <> "Marker(s) in use" Then Application.StatusBar = False
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
   'Close Freq Markers (if any) if user clicks outside the chart area,
   'to be consistent with instructions given for moving legend.
   Application.EnableEvents = False
   If [MarkFreqIndex].Value <> -1 Then
      'Marker(s) up.  If new selection was adjacent to home cell the user
      'probably pressed a keyboard arrow key.  Treat like M1 spinner click.
      If Not Application.Intersect(Target, Range("C4,D5")) Is Nothing Then
         spnMarker1_SpinDown
         Range("D4").Activate
      ElseIf Not Application.Intersect(Target, Range("E4,D3")) Is Nothing Then
         spnMarker1_SpinUp
         Range("D4").Activate
      ElseIf Not Application.Intersect(Target, Range("C31:K33")) Is Nothing Then
         'Selection on marker table, maybe to do a copy/paste.  Allow.
         Application.EnableEvents = True
         Exit Sub
      Else
         CloseFreqMarkers
      End If
   End If
   'If Markers not up, allow cell selection.
   'For production version, no need to allow other cell selection.
   'Comment out for design mode.
   Range("D4").Activate
   Application.EnableEvents = True
End Sub

Private Sub spnMarker1_SpinDown()
   If [MarkFreqIndex] = 1 Then Exit Sub
   [MarkFreqIndex].Value = [MarkFreqIndex] - 1
   PositionMarkers "Marker1", CLng([MarkFreqIndex])
End Sub

Private Sub spnMarker1_SpinUp()
   If [MarkFreqIndex] = [TCcnt] Then Exit Sub
   [MarkFreqIndex].Value = [MarkFreqIndex] + 1
   PositionMarkers "Marker1", CLng([MarkFreqIndex])
End Sub

Private Sub spnMarker2_SpinDown()
   If [Mark2FreqIndex] = 1 Then Exit Sub
   [Mark2FreqIndex].Value = [Mark2FreqIndex] - 1
   PositionMarkers "Marker2", CLng([Mark2FreqIndex])
End Sub

Private Sub spnMarker2_SpinUp()
   If [Mark2FreqIndex] = [TCcnt] Then Exit Sub
   [Mark2FreqIndex].Value = [Mark2FreqIndex] + 1
   PositionMarkers "Marker2", CLng([Mark2FreqIndex])
End Sub

Private Sub lblYmma_Click()
   Application.Calculation = xlCalculationManual  'faster updates
   Select Case Left(lblYmma.Caption, 3)
      Case "Min"
         lblYmma.Caption = "Max"
      Case "Max"
         lblYmma.Caption = "Avg"
      Case "Avg"
         lblYmma.Caption = "Min"
   End Select
   TransferYrange [CustomYorig], [CustomY]
   Application.Calculation = xlCalculationAutomatic
End Sub

Private Sub lblY2mma_Click()
   Application.Calculation = xlCalculationManual  'faster updates
   Select Case Left(lblY2mma.Caption, 3)
      Case "Min"
         lblY2mma.Caption = "Max"
      Case "Max"
         lblY2mma.Caption = "Avg"
      Case "Avg"
         lblY2mma.Caption = "Min"
   End Select
   TransferYrange [CustomY2orig], [CustomY2], xlSecondary
   Application.Calculation = xlCalculationAutomatic
End Sub
Attribute VB_Name = "Sheet03"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "spnsMarker1, 68, 0, MSForms, SpinButton"
Attribute VB_Control = "spnsMarker2, 69, 1, MSForms, SpinButton"
Option Compare Text  ' "AAA" = "aaa"
Option Explicit

Private Sub Worksheet_Activate()
   Sheets("Smith").Range("D4").Activate

   'Associate events with embedded charts.  Normally only need to
   'do this once but may be reset during development and debugging.
   'Note that the code must be executed from a standard module, not a sheet object.
   SetChartEvents

   'If the marker info box is up, enable the Esc OnKey.
   If [MarkFreqIndex].Value <> -1 Then Application.OnKey "{Esc}", "CloseFreqMarkers"
   
   'Do not show chart tips, info is Gamma Real and Imaginary.
   With Application
      .ShowChartTipNames = False
      .ShowChartTipValues = False
   End With
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Excel.Range, Cancel As Boolean)
   'Keep novice users out of trouble.
   Cancel = True
End Sub

Private Sub Worksheet_BeforeRightClick(ByVal Target As Excel.Range, Cancel As Boolean)
   'Keep novice users out of trouble.
   Cancel = True
End Sub

Private Sub Worksheet_Deactivate()
   'Make sure the OnKey procs for the Markers is cleared.
   Application.OnKey "{Esc}"

   'Reset status bar in case pixel info shown
   If Application.StatusBar <> "Marker(s) in use" Then Application.StatusBar = False
   
   'Reset to show chart tips.
   With Application
      .ShowChartTipNames = True
      .ShowChartTipValues = True
   End With
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
   'Close Freq Markers (if any) if user clicks outside the chart area,
   'to be consistent with instructions given for moving legend.
   Application.EnableEvents = False
   If [MarkFreqIndex].Value <> -1 Then
      'Marker(s) up.  If new selection was adjacent to home cell the user
      'probably pressed a keyboard arrow key.  Treat like M1 spinner click.
      If Not Application.Intersect(Target, Range("C4,D5")) Is Nothing Then
         spnsMarker1_SpinDown
         Range("D4").Activate
      ElseIf Not Application.Intersect(Target, Range("E4,D3")) Is Nothing Then
         spnsMarker1_SpinUp
         Range("D4").Activate
      ElseIf Not Application.Intersect(Target, Range("B80:J82")) Is Nothing Then
         'Selection on marker table, maybe to do a copy/paste.  Allow.
         Application.EnableEvents = True
         Exit Sub
      Else
         CloseFreqMarkers
      End If
   End If
   
   'If Markers not up, allow cell selection.
   'For production version, no need to allow other cell selection.
   'Comment out for design mode.
   Range("D4").Activate
   Application.EnableEvents = True
End Sub

Private Sub spnsMarker1_SpinDown()
   If [MarkFreqIndex] = 1 Then Exit Sub
   [MarkFreqIndex].Value = [MarkFreqIndex] - 1
   PositionMarkers "Marker1", CLng([MarkFreqIndex])
End Sub

Private Sub spnsMarker1_SpinUp()
   If [MarkFreqIndex] = [TCcnt] Then Exit Sub
   [MarkFreqIndex].Value = [MarkFreqIndex] + 1
   PositionMarkers "Marker1", CLng([MarkFreqIndex])
End Sub

Private Sub spnsMarker2_SpinDown()
   If [Mark2FreqIndex] = 1 Then Exit Sub
   [Mark2FreqIndex].Value = [Mark2FreqIndex] - 1
   PositionMarkers "Marker2", CLng([Mark2FreqIndex])
End Sub

Private Sub spnsMarker2_SpinUp()
   If [Mark2FreqIndex] = [TCcnt] Then Exit Sub
   [Mark2FreqIndex].Value = [Mark2FreqIndex] + 1
   PositionMarkers "Marker2", CLng([Mark2FreqIndex])
End Sub
Attribute VB_Name = "Sheet04"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
   Dim FileToLoad As String

   'Sheets("TriggerLoad").Visible = xlVeryHidden
   'Note that this sheet is hidden to avoid user distraction.
   
   'The only cell that will ever be changed is A1, and the
   'only way A1 is changed (besides here) is via ZplotsLink.xls.
   'That way, this Worksheet_Change event is not fired during normal
   'Zplots processing, even with EnableEvents = True.
   
   FileToLoad = Me.Range("A1").Value
   Application.EnableEvents = True
   Me.Range("A1").ClearContents
   Application.EnableEvents = True
   
   'Load the passed path+name of the interface data file.
   If ActiveSheet.Name <> "Data" Then
      ActiveSheet.Range("D4").Activate  'focus off any ActiveX control
   End If
   ReadData FileToLoad
   'Deduce [DirData], used in various places.
   [DirData].Value = Left(FileToLoad, InStr(FileToLoad, Dir(FileToLoad)) - 2)
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Compare Text  ' "AAA" = "aaa"
Option Explicit

Private Sub Workbook_Open()
   Dim sht As Worksheet
   Dim CurSht As String

   'Page breaks off on all sheets.
   On Error Resume Next  'cannot set PageBreaks if a printer is not installed
   For Each sht In ActiveWorkbook.Sheets
      sht.DisplayPageBreaks = False
   Next sht

   'Check the volume serial number of the C drive (if present) to
   'see if this workbook has been copied to another machine.
   'If so, be sure to show the Legend and Marker message boxes on first use.
   If [VolumeSerial] <> SerialNumber("C:\") Then
      [VolumeSerial].Value = SerialNumber("C:\")  'save in workbook
      [ShowLegendMsg].Value = True
      [ShowMarkerMsg].Value = True
      [ShowRibbonMsg].Value = True
      [ShowLogScaleMsg].Value = True
   End If
   On Error GoTo 0
   
   'In order to prevent the mysterious "Shrinking PlotArea" problem under XL97,
   'activate the Custom chart.  Apparently this sets the "ActiveChart" reference
   'correctly, even though ActiveChart is not generally used.
   If ActiveSheet.Name = "Custom" Then
      Sheets("Custom").ChartObjects(1).Activate
      Sheets("Custom").Range("D4").Activate
   Else
      Application.ScreenUpdating = False
      CurSht = ActiveSheet.Name
      Sheets("Custom").Activate
      Sheets("Custom").ChartObjects(1).Activate
      Sheets("Custom").Range("D4").Activate
      Sheets(CurSht).Activate
   End If
   'This triggers the CustomChart1_Resize event, so clear the status bar info.
   Application.StatusBar = False

   'Associate events with embedded charts.
   'Note that the code must be executed from a standard module, not a book/sheet object.
   SetChartEvents
   
   'XL2007 only.  Show one-time reminder about how to minimize ribbon.
   '(Only if ribbon not already minimized and only for screen heights <= 768 pixels.)
   'Also, modify Custom prompt if markers not in use.  With XL2007,
   'hovering does not show chart tips unless chart is first activated.
   If Val(Application.Version) > 11 Then
      On Error Resume Next  '? Non-English Excel, name may not be "Ribbon" ?
      If Application.CommandBars("Ribbon").Height > 100 Then
         If (GetSystemMetrics32(1) <= 768) And [ShowRibbonMsg] Then
            MsgBox "You can increase the amount of available window" & vbLf & _
                   "space by pressing Ctrl+F1 (after clearing this" & vbLf & _
                   "message) in order to toggle the Ribbon on and off." & vbLf & vbLf & _
                   "This message will not appear again.", , _
                   "Just a Reminder ..."
            [ShowRibbonMsg].Value = False
         End If
      End If
      On Error GoTo 0
      
      With Sheets("Custom").Shapes("boxCustomPrompt").TextFrame.Characters
         If Left(.Text, 6) = "To see" Then
            .Text = _
               "To see frequency and data values" & vbLf & _
               "first click the chart border then" & vbLf & _
               "hover mouse over any plot point."
         End If
      End With
   End If

   'If workbook was saved with Polling ON, resume polling loop.
   If [EnablePolling] Then fbtnRefresh_Click
   
   'Fix XL2007 screw-up with textboxes in charts.
   With Sheets("Custom").ChartObjects(2).Chart
      .ChartArea.AutoScaleFont = False
      With .Shapes("txtSmithZo").TextFrame
         .AutoSize = True
         .MarginLeft = 1.44
         .MarginRight = 1.44
         .MarginTop = 0.72
         .MarginBottom = 0.72
         .Characters.Font.Size = 8
      End With
   End With
   With Sheets("Smith").ChartObjects(1).Chart
      .ChartArea.AutoScaleFont = False
      With .Shapes("txtSmithZo").TextFrame
         .AutoSize = True
         .MarginLeft = 1.44
         .MarginRight = 1.44
         .MarginTop = 0.72
         .MarginBottom = 0.72
         .Characters.Font.Size = 10
      End With
   End With
   
   'Fix XL2007 screw-up with Custom chart PlotArea width.
   'WARNING:  >>>>>  Don't do this for Excel 2000  <<<<<
   If Val(Application.Version) > 11 Then
      On Error Resume Next
      With Sheets("Custom").ChartObjects(1).Chart
         .PlotArea.Width = 534 - 14
         .PlotArea.Left = 14
         .Axes(xlValue, xlPrimary).AxisTitle.Left = 0
         '''.Axes(xlValue, xlSecondary).AxisTitle.Left = 536
         '''.Axes(xlValue, xlPrimary).AxisTitle.Top = 131
         '''.Axes(xlValue, xlSecondary).AxisTitle.Top = 131
      End With
   End If
End Sub

Private Sub Workbook_Activate()
   Dim wb As Workbook
   Dim FileToOpen As String
   
   'In case reset elsewhere.
   With Application
      If .CutCopyMode = False Then
         .Calculation = xlCalculationAutomatic
         .DisplayStatusBar = True
      End If
      .ShowChartTipNames = IIf(ActiveSheet.Name = "Smith", False, True)
      .ShowChartTipValues = IIf(ActiveSheet.Name = "Smith", False, True)
   End With

   'If the marker info box is up (Custom and Smith sheets), enable the associated OnKey.
   'Also freeze the status bar.
   If [MarkFreqIndex].Value <> -1 Then
      If ActiveSheet.Name = "Custom" Or ActiveSheet.Name = "Smith" Then
         Application.OnKey "{Esc}", "CloseFreqMarkers"
      End If
      Application.StatusBar = "Marker(s) in use"  'avoid flashing while markers are up
   End If
   
   'Temporary Worksheet Menu Bar, 'File' menu control.
   'XL2007, don't bother.  Nobody is likely to click "Add-Ins" to load a data file.
   If Val(Application.Version) < 12 Then
      On Error Resume Next  '? Non-English Excel ?
      With Application.CommandBars(1).Controls(1)
         'Delete first if present, just in case Temporary:=True failed.
         If .Controls(1).Caption = "Zplots: Load Data..." Then .Controls(1).Delete
         .Controls.Add Type:=msoControlButton, Before:=1, Temporary:=True
         .Controls(1).Caption = "Zplots: Load Data..."
         .Controls(1).FaceId = 23
         .Controls(1).OnAction = "fbtnLoad_Click"
         .Controls(2).BeginGroup = True  'put a group break line before "New"
      End With
      On Error GoTo 0
   End If
   
   'See if another open workbook (if any) is an
   'AIM/VNA4Win/Exeter/miniVNA/AM csv file, or MultiNEC.
   'If so, ask user if this data should be loaded.
   For Each wb In Workbooks
      If wb.Name <> ThisWorkbook.Name Then
         'AIM csv open?
         If Right(wb.Name, 4) = ".csv" And _
            Left(wb.Worksheets(1).Range("A2"), 3) = "AIM" Then
            If MsgBox( _
                  "You have an AIM csv file open in another Excel window." & vbLf & _
                  "Would you like to load the data from that file into Zplots?", _
                  vbYesNo, "Load data from '" & wb.Name & "'?") = vbYes Then
               FileToOpen = wb.FullName
               wb.Close SaveChanges:=False
               ReadData FileToOpen
               'Deduce [DirData], used in various places.
               [DirData].Value = Left(FileToOpen, InStr(FileToOpen, Dir(FileToOpen)) - 2)
            End If
            Exit For
         End If
         'W5BIG VNA Port A csv open?
         If Right(wb.Name, 4) = ".csv" And _
            Left(wb.Worksheets(1).Range("A2"), 11) = "VNA version" And _
            wb.Worksheets(1).Range("B5") = "SWR" Then
            If MsgBox( _
                  "You have a VNA2180 Port A csv file open in another Excel window." & vbLf & _
                  "Would you like to load the data from that file into Zplots?", _
                  vbYesNo, "Load data from '" & wb.Name & "'?") = vbYes Then
               FileToOpen = wb.FullName
               wb.Close SaveChanges:=False
               ReadData FileToOpen
               'Deduce [DirData], used in various places.
               [DirData].Value = Left(FileToOpen, InStr(FileToOpen, Dir(FileToOpen)) - 2)
            End If
            Exit For
         End If
         'VNA4Win csv open?
         If Right(wb.Name, 4) = ".csv" And _
            Left(wb.Worksheets(1).Range("A1"), 7) = "VNA4Win" Then
            If MsgBox( _
                  "You have a VNA4Win csv file open in another Excel window." & vbLf & _
                  "Would you like to load the data from that file into Zplots?", _
                  vbYesNo, "Load data from '" & wb.Name & "'?") = vbYes Then
               FileToOpen = wb.FullName
               wb.Close SaveChanges:=False
               ReadData FileToOpen
               'Deduce [DirData], used in various places.
               [DirData].Value = Left(FileToOpen, InStr(FileToOpen, Dir(FileToOpen)) - 2)
            End If
            Exit For
         End If
         'Exeter csv open?
         If Right(wb.Name, 4) = ".csv" And _
            wb.Worksheets(1).Range("A1") = "Exeter" Then
            If MsgBox( _
                  "You have an Exeter csv file open in another Excel window." & vbLf & _
                  "Would you like to load the data from that file into Zplots?", _
                  vbYesNo, "Load data from '" & wb.Name & "'?") = vbYes Then
               FileToOpen = wb.FullName
               wb.Close SaveChanges:=False
               ReadData FileToOpen
               'Deduce [DirData], used in various places.
               [DirData].Value = Left(FileToOpen, InStr(FileToOpen, Dir(FileToOpen)) - 2)
            End If
            Exit For
         End If
         'VNA1/miniVNA csv open?
         If Right(wb.Name, 4) = ".csv" And _
            wb.Worksheets(1).Range("A1") = "Frequency(Hz)" Then
            If MsgBox( _
                  "You have a VNA1/miniVNA csv file open in another Excel window." & vbLf & _
                  "Would you like to load the data from that file into Zplots?", _
                  vbYesNo, "Load data from '" & wb.Name & "'?") = vbYes Then
               FileToOpen = wb.FullName
               wb.Close SaveChanges:=False
               ReadData FileToOpen
               'Deduce [DirData], used in various places.
               [DirData].Value = Left(FileToOpen, InStr(FileToOpen, Dir(FileToOpen)) - 2)
            End If
            Exit For
         End If
         'myVNA csv open?
         If Right(wb.Name, 4) = ".csv" And _
            wb.Worksheets(1).Range("A1") = "myVNA data file" And _
            (wb.Worksheets(1).Range("C2") = " S11 Imag" Or _
             wb.Worksheets(1).Range("C2") = " Rho(imag)") Then
            If MsgBox( _
                  "You have a myVNA csv file open in another Excel window." & vbLf & _
                  "Would you like to load the data from that file into Zplots?", _
                  vbYesNo, "Load data from '" & wb.Name & "'?") = vbYes Then
               FileToOpen = wb.FullName
               wb.Close SaveChanges:=False
               ReadData FileToOpen
               'Deduce [DirData], used in various places.
               [DirData].Value = Left(FileToOpen, InStr(FileToOpen, Dir(FileToOpen)) - 2)
            End If
            Exit For
         End If
         'DL1SNG vector Antenna Analyzer csv open?
         If Right(wb.Name, 4) = ".csv" And _
            Left(wb.Worksheets(1).Range("A1"), 5) = "FA-VA" Then
            If MsgBox( _
                  "You have a DL1SNG vector Antenna Analyzer file open in another Excel window." & vbLf & _
                  "Would you like to load the data from that file into Zplots?", _
                  vbYesNo, "Load data from '" & wb.Name & "'?") = vbYes Then
               FileToOpen = wb.FullName
               wb.Close SaveChanges:=False
               ReadData FileToOpen
               'Deduce [DirData], used in various places.
               [DirData].Value = Left(FileToOpen, InStr(FileToOpen, Dir(FileToOpen)) - 2)
            End If
            Exit For
         End If
         'EZNEC LastZ.txt/LastZ.csv open?
         If (Right(wb.Name, 4) = ".txt" Or Right(wb.Name, 4) = ".csv") And _
            Left(wb.Worksheets(1).Range("A1"), 5) = "EZNEC" Then
            If MsgBox( _
                  "You have an EZNEC LastZ file open in another Excel window." & vbLf & _
                  "Would you like to load the data from that file into Zplots?", _
                  vbYesNo, "Load data from '" & wb.Name & "'?") = vbYes Then
               FileToOpen = wb.FullName
               wb.Close SaveChanges:=False
               ReadData FileToOpen
               'Deduce [DirData], used in various places.
               [DirData].Value = Left(FileToOpen, InStr(FileToOpen, Dir(FileToOpen)) - 2)
            End If
            Exit For
         End If
         'AM csv open?
         If Right(wb.Name, 4) = ".csv" And _
            Left(wb.Worksheets(1).Range("A2"), 7) = "Antenna" And _
            wb.Worksheets(1).Range("B4") = "Source" Then
            If MsgBox( _
                  "You have an AM Impedances csv file open in another Excel window." & vbLf & _
                  "Would you like to load the data from that file into Zplots?", _
                  vbYesNo, "Load data from '" & wb.Name & "'?") = vbYes Then
               FileToOpen = wb.FullName
               wb.Close SaveChanges:=False
               ReadData FileToOpen
               'Deduce [DirData], used in various places.
               [DirData].Value = Left(FileToOpen, InStr(FileToOpen, Dir(FileToOpen)) - 2)
            End If
            Exit For
         End If
         'Zplots csv open?
         If Right(wb.Name, 4) = ".csv" And _
            Left(wb.Worksheets(1).Range("A1"), 6) = "Zplots" Then
            If MsgBox( _
                  "You have a Zplots Generated csv file open in another Excel window." & vbLf & _
                  "Would you like to load the data from that file into Zplots?", _
                  vbYesNo, "Load data from '" & wb.Name & "'?") = vbYes Then
               FileToOpen = wb.FullName
               wb.Close SaveChanges:=False
               ReadData FileToOpen
               'Deduce [DirData], used in various places.
               [DirData].Value = Left(FileToOpen, InStr(FileToOpen, Dir(FileToOpen)) - 2)
            End If
            Exit For
         End If
         '"TL Parms" type csv open?
         If Right(wb.Name, 4) = ".csv" And _
            Left(wb.Worksheets(1).Range("A1"), 17) = "Transmission Line" Then
            If MsgBox( _
                  "You have a 'TL Parms' type csv file open in another Excel window." & vbLf & _
                  "Would you like to load the data from that file into Zplots?", _
                  vbYesNo, "Load data from '" & wb.Name & "'?") = vbYes Then
               FileToOpen = wb.FullName
               wb.Close SaveChanges:=False
               ReadData FileToOpen
               'Deduce [DirData], used in various places.
               [DirData].Value = Left(FileToOpen, InStr(FileToOpen, Dir(FileToOpen)) - 2)
            End If
            Exit For
         End If
'''         'MultiNEC-like xls open?
'''         If wb.WorkSheets.Count = 12 Then
'''            If wb.WorkSheets(4).Name = "Calculate" And _
'''               Not IsEmpty(wb.WorkSheets(4).Range("G11")) Then
'''               If MsgBox( _
'''                     "You have MultiNEC open in another Excel window." & vbLf & _
'''                     "Would you like to load the calculation results into Zplots?" & vbLf & vbLf & _
'''                     "Warning:  This makes sense only if you have run a" & vbLf & _
'''                     "frequency sweep with MultiNEC, not a 'variable' sweep.", _
'''                     vbYesNo, "Load data from '" & wb.Name & "'?") = vbYes Then
'''                  ReadData wb.FullName
'''               End If
'''               Exit For
'''            End If
'''         End If
      End If
   Next wb

   'If Excel is already running with another workbook, even a blank one, and Zplots
   'is opened to a sheet that has a chart object, a 'Calculate' prompt will appear in
   'the Status bar.  This might be confusing.  The prompt can be cleared with F9 or by
   'executing a Calculate statement, but the statement must be run *after* this Activate
   'proc has finished.  Just doing a Calculate here does not clear the prompt.
   'Schedule a one-line proc to run as soon as possible after this proc finishes.
   'Note:  This seems to be true only for XL2000 and below, but doesn't hurt in any case.
   If Application.CutCopyMode = False Then Application.OnTime Now, "DoCalc"
End Sub

Private Sub Workbook_Deactivate()

   'Reset OnKey used to close markers.
   Application.OnKey "{Esc}"

   'Temporary Worksheet Menu Bar, 'File' menu control.
   'Don't want to show this in other workbooks that might be open at the same time.
   With Application.CommandBars(1).Controls(1)
      If .Controls(1).Caption = "Zplots: Load Data..." Then .Controls(1).Delete
   End With

   'If the user is jumping to a different workbook from here, that workbook will be
   'active at this point.  If the active sheet in that workbook is named "Smith" it
   'is probably MultiNEC.  And if that's the case, make sure that focus is off the
   'ActiveX control on the Smith sheet.  (Only seems to be a problem under XL97.)
   'On the other hand, if the user is closing this workbook then ThisWorkbook and
   'ActiveWorkbook will be the same.  Doesn't hurt to activate [A1] on this Smith sheet.
   'Debug.Print ThisWorkbook.Name & "/" & ThisWorkbook.ActiveSheet.Name
   'Debug.Print ActiveWorkbook.Name & "/" & ActiveWorkbook.ActiveSheet.Name
   If ActiveWorkbook.ActiveSheet.Name = "Smith" Then ActiveWorkbook.ActiveSheet.[A1].Activate
   On Error GoTo 0
End Sub

Private Function SerialNumber(RootPath As String) As Long
   GetVolumeInformation RootPath, vbNullString, 0, SerialNumber, 0, 0, vbNullString, 0
End Function
Attribute VB_Name = "TlineFunctions"
Option Explicit
Option Private Module

Public Type ReIm
   Re As Double
   Im As Double
End Type

Dim CalcS21 As Boolean
Dim TCS21 As ReIm

Public Sub AddSubtractTL(LenFt As Double, _
                         Zohf As Double, _
                         VFhf As Double, _
                         K1 As Double, _
                         K2 As Double, _
                         K0 As Double)
   Dim TC As Long
   Dim Freq As Double, R As Double, X As Double
   Dim Zinput As ReIm
   Dim vFreq As Variant
   Dim vRX As Variant
   Dim Results() As Double
   Dim strInfoBox As String
   Dim S21() As ReIm
   
   Application.Calculation = xlCalculationManual  'faster updates
   
   If LenFt = 0 Then
      'Length 0 means restore original R and X values.
      Sheets("Data").Range("Rs").Offset(1).Resize([TCcnt], 2).Value = _
         Sheets("Data").Range("OriginalR").Offset(1).Resize([TCcnt], 2).Value
   Else
      'If AddTL and all OriginalR/X values are 50+j0, ask to create s2p file.
      CalcS21 = False
      If LenFt > 0 And _
         Application.Average([OriginalR].Offset(1).Resize([TCcnt])) = 50 And _
         Application.Average([OriginalX].Offset(1).Resize([TCcnt])) = 0 Then
         If MsgBox("After the transmission line has been added do you" & vbLf & _
                   "want to create an s2p file with the results?", _
                   vbYesNo, "Create S2P File?") = vbYes Then
            CalcS21 = True
            If [Refzo] <> 50 Then
               If MsgBox("Warning:  The current reference resistance for S11 values" & vbLf & _
                         "is " & CStr([Refzo]) & " ohms.  The standard for s2p files is 50 ohms." & vbLf & _
                         "Do you want to create an s2p file anyway?", _
                         vbYesNo + vbDefaultButton2, "Warning: Reference resistance not 50 ohms") = vbNo Then
                  CalcS21 = False
               End If
            End If
         End If
      End If
      'Do the TL transform.
      vFreq = Sheets("Data").Range("TCFreq").Offset(1).Resize([TCcnt], 2)  '( ,2) to ensure array for vFreq even if single freq
      vRX = Sheets("Data").Range("OriginalR").Offset(1).Resize([TCcnt], 2)
      ReDim Results(1 To [TCcnt], 1 To 2)  'Rs and Xs columns
      If CalcS21 Then ReDim S21(1 To [TCcnt])
      For TC = 1 To [TCcnt]
         Freq = vFreq(TC, 1)
         R = vRX(TC, 1)
         X = vRX(TC, 2)
         'Do the transform.
         Zinput = ZIZL(COMPLEX(R, X), Freq, LenFt, Zohf, VFhf, K1, K2, K0)
         R = Zinput.Re
         X = Zinput.Im
         'Reset R and X.
         Results(TC, 1) = R
         Results(TC, 2) = X
         'Set entry in S21 array, if calculated by ZIZL function.
         If CalcS21 Then S21(TC) = TCS21
      Next TC
      'Back to Data sheet.
      Sheets("Data").Range("Rs").Offset(1).Resize([TCcnt], 2).Value = Results
   End If
   
   'Fill remainder of Data sheet.
   FillData WithSWR:=True
   
   'Transfer values for plotting, with possible clipping.
   TransferYrange [CustomYorig], [CustomY]  '[CustomY] is the plotted range
   If [CustomY2off].Value <> 99 Then
      TransferYrange [CustomY2orig], [CustomY2], xlSecondary
   End If
   
   'Set info boxes.
   If LenFt = 0 Then
      strInfoBox = " "
   Else
      strInfoBox = "(" & CStr([TLLen]) & " " & [TLUnits] & IIf(LenFt > 0, " Added)", " Subtracted)")
   End If
   strInfoBox = Application.Substitute(strInfoBox, "Millimeters", "mm")
   Sheets("Custom").Shapes("boxTline").TextFrame.Characters.Text = strInfoBox
   Sheets("Smith").Shapes("boxTline").TextFrame.Characters.Text = strInfoBox
   
   Application.Calculation = xlCalculationAutomatic
   
   'If marker(s) up, rebuild.
   If [MarkFreqIndex].Value <> -1 Then
      PositionMarkers "Marker1", CLng([MarkFreqIndex])
   End If
   If [Mark2FreqIndex].Value <> -1 Then
      PositionMarkers "Marker2", CLng([Mark2FreqIndex])
   End If
   
   'Build s2p file if requested.
   If CalcS21 Then
      Dim PrevPath As String
      Dim FileToSaveAs As Variant
      Dim Suffix As Integer
      Dim vS11 As Variant
      
      On Error Resume Next  'Try to pre-set path, but don't fail if not valid
      PrevPath = CurDir
      ChDrive [DirData].Value
      ChDir [DirData].Value
      FileToSaveAs = FnOnly([CurFname])  'suggest
      If Dir(FileToSaveAs & ".s2p") <> "" Then  'don't overwrite any existing
         For Suffix = 1 To 99
            FileToSaveAs = FileToSaveAs & Format(Suffix, "00")
            If Dir(FileToSaveAs & ".s2p") = "" Then
               Exit For
            Else
               FileToSaveAs = FnOnly([CurFname])
            End If
         Next Suffix
      End If
      FileToSaveAs = Application.GetSaveAsFilename(FileToSaveAs, _
                     "Touchstone S2P (*.s2p),*.s2p", 1, "Save Reflection/Transmission Data As ...")
      If FileToSaveAs = False Then
         ChDrive PrevPath
         ChDir PrevPath
         GoTo SaveS2PDone
      End If
      'Save user-specified path for next time, then reset to previous (may not have changed).
      [DirData].Value = Left(FileToSaveAs, MyInStrRev(CStr(FileToSaveAs), "\") - 1)
      ChDrive PrevPath
      ChDir PrevPath
      On Error GoTo 0
      
      vS11 = Sheets("Data").Range("RhoRe").Offset(1).Resize([TCcnt], 2)  'RhoRe/RhoIm
      
      Open FileToSaveAs For Output As #1
      Print #1, "!Created via Zplots"
      Print #1, "!T-Line:  " & frmAddSubTL.cboLineTypes
      Print #1, "!Length:  " & frmAddSubTL.txtLen & " " & frmAddSubTL.cboLenUnits
      Print #1, "# MHZ S RI R " & [Refzo]
      For TC = 1 To [TCcnt]
         Print #1, Format(vFreq(TC, 1), "000.000000"); _
                   Spc(3); Format(vS11(TC, 1), "0.000000000000000"); _
                   Spc(3); Format(vS11(TC, 2), "0.000000000000000"); _
                   Spc(3); Format(S21(TC).Re, "0.000000000000000"); _
                   Spc(3); Format(S21(TC).Im, "0.000000000000000"); _
                   Spc(3); Format(S21(TC).Re, "0.000000000000000"); _
                   Spc(3); Format(S21(TC).Im, "0.000000000000000"); _
                   Spc(3); Format(vS11(TC, 1), "0.000000000000000"); _
                   Spc(3); Format(vS11(TC, 2), "0.000000000000000")
      Next TC
      Close #1
      
      'If "," used as decimal point (non-English numbers) replace with ".".
      'Note that Application.DecimalSeparator not available  prior to XL2003,
      'VBA Replace() not available prior to XL2000.
      If Application.International(xlDecimalSeparator) = "," Then
         Dim sRecord As String
         Open FileToSaveAs For Input As #1
         Open "$Zplots$.tmp" For Output As #2  'in CurDir
         Do While Not EOF(1)
            Line Input #1, sRecord
            Print #2, Application.Substitute(sRecord, ",", ".")
         Loop
         Close #1
         Close #2
         Kill FileToSaveAs
         Name "$Zplots$.tmp" As FileToSaveAs
      End If
      
      MsgBox "Reflection/Transmission data saved in file" & vbLf & _
             FileToSaveAs, _
             vbOKOnly, "File Saved"
SaveS2PDone:
   End If
End Sub

Function GetTLParms(Freq As Double, _
                    LenFt As Double, _
                    Zohf As Double, _
                    VFhf As Double, _
                    K1 As Double, _
                    K2 As Double, _
                    K0 As Double) As Variant
                   
   'GetTLParms(Freq,  LenFt,  Zohf,  VFhf,  K1,      K2,        K0)
   'GetTLParms(10,    37.9,   50,    0.66,  0.1234,  0.003456,  0.123)
   'GetTLParms(AF48,  AF49,   AF50,  AF51,  AF52,    AF53,      AF54)
   
   '>>> WARNING <<<     >>> WARNING <<<     >>> WARNING <<<
   'This code is duplicated in proc btnOK_Click of frmGenData.  Coordinate any changes.
              
   'UPDATE Sep/Oct/Nov 2010:
   'Use Chipman/Johnson method to compute RLGC and hence Zo and Gamma at Freq.
   '    See Owen Duffy, http://vk1od.net/transmissionline/concept/mptl.htm
   '    See Johnson, "High Speed Signal Propagation", section 3.1, equations 3.3 and 3.4.
   'Include correction for internal inductance.
   'Include correction for DC resistance.
   'Compute corrected VF at Freq from Gamma.
   
   Dim Rdc As Double, Rhf As Double, Lhf As Double, Ghf As Double, Chf As Double
   Dim w As Double
   Dim Zint As ReIm
   Dim RjwL As ReIm
   Dim GjwC As ReIm
   Dim Zo As ReIm
   Dim Gamma As ReIm
   Dim Results(1 To 4, 1 To 1) As Double
            
   Rdc = 2 * (K0 / 100 / NEPER) * Zohf              'Ohms/ft  (note K0 is dB/100ft)
   Rhf = 2 * (K1 / 100 / NEPER * Sqr(Freq)) * Zohf  'Ohms/ft  (note K1 is dB/100ft)
   Lhf = Zohf / (SLfps * VFhf)                      'Henries/ft
   Ghf = 2 * (K2 / 100 / NEPER * Freq) / Zohf       'Siemens/ft  (note K2 is dB/100ft)
   Chf = 1 / (Zohf * SLfps * VFhf)                  'Farads/ft
   w = TWOPI * Freq * 1000000                       'omega
            
   Zint = IMSQRT(IMSUM(COMPLEX(Rdc ^ 2, 0), _
                 IMPOWER(COMPLEX(Rhf, Rhf), 2)))    'internal impedance, Rdc+Rhf+Li
   RjwL = IMSUM(Zint, COMPLEX(0, w * Lhf))          'Rdc+Rhf, Li+Lhf (Le)
   GjwC = COMPLEX(Ghf, w * Chf)
   Zo = IMSQRT(IMDIV(RjwL, GjwC))
   Gamma = IMSQRT(IMPRODUCT(RjwL, GjwC))
   
   Results(1, 1) = Zo.Re                     'Real(Zo)
   Results(2, 1) = Zo.Im                     'Imag(Zo)
   Results(3, 1) = w / (SLfps * Gamma.Im)    'corrected VF
   Results(4, 1) = Gamma.Re * NEPER * LenFt  'loss over LenFt, dB
   
   GetTLParms = Results
End Function

Function ZIZL(Zload As ReIm, _
              Freq As Double, _
              LenFt As Double, _
              Zohf As Double, _
              VFhf As Double, _
              K1 As Double, _
              K2 As Double, _
              K0 As Double) As ReIm
              
   'Returns Z (complex) at input end of transmission line.
   'LenFt is set negative to transform in the opposite direction.
   
   'Zload     Z (complex) at load end of line
   'Freq      Frequency, MHz
   'LenFt     Line length in feet
   'Zohf      Characteristic impedance (nominal)
   'VFhf      Velocity factor (nominal)
   'K1        Coefficient for conductor loss
   'K2        Coefficient for dielectric loss
   'K0    DC resistance, ohms/Kft
   
   Dim vTLParms As Variant
   Dim Zo As ReIm
   Dim VF As Double
   Dim Loss As Double
   Dim AlphaL As Double
   Dim BetaL As Double
   Dim Sinh_gL As ReIm
   Dim Cosh_gL As ReIm
   Dim RefR As Double
   Dim Ds As ReIm
 
   'Get Zo (true Zo at Freq), VF (true VF at Freq), and Loss (dB per LenFt).
   vTLParms = GetTLParms(Freq, LenFt, Zohf, VFhf, K1, K2, K0)
   Zo.Re = vTLParms(1, 1)
   Zo.Im = vTLParms(2, 1)
   VF = vTLParms(3, 1)    'corrected VF
   Loss = vTLParms(4, 1)  'loss over LenFt, dB
   
   'Propagation constant, real and imaginary components of GammaL.
   AlphaL = Loss / NEPER
   BetaL = (TWOPI * Freq) / (SL * VF) * LenFt
   
   With Application.WorksheetFunction
      Sinh_gL = COMPLEX(Cos(BetaL) * .Sinh(AlphaL), Sin(BetaL) * .Cosh(AlphaL))
      Cosh_gL = COMPLEX(Cos(BetaL) * .Cosh(AlphaL), Sin(BetaL) * .Sinh(AlphaL))
   End With

   ZIZL = IMPRODUCT(Zo, IMDIV(IMSUM(IMPRODUCT(Zload, Cosh_gL), _
                                    IMPRODUCT(Zo, Sinh_gL)), _
                              IMSUM(IMPRODUCT(Zo, Cosh_gL), _
                                    IMPRODUCT(Zload, Sinh_gL))))
                                    
   'If requested calculate S21.
   'See Equation Set 2 here:
   '   http://na.tm.agilent.com/plts/help/WebHelp/Analyzing/Analyzing_Transmission_Line_Parameters.html
   'Note that PLTS "Z" = my Zo, PLTS "Zo" = my RefR.
   If CalcS21 Then
      RefR = 50  'standard S21 reference
      Ds = IMSUM(IMPRODUCT(IMPRODUCT(COMPLEX(2 * RefR, 0), Zo), Cosh_gL), _
                 IMPRODUCT(IMSUM(COMPLEX(RefR ^ 2, 0), IMPRODUCT(Zo, Zo)), Sinh_gL))
      TCS21 = IMDIV(IMPRODUCT(COMPLEX(2 * RefR, 0), Zo), Ds)
   End If
End Function

Sub TestIt()
   Dim AlphaL As Double
   Dim BetaL As Double
   Dim Sinh_gL As ReIm
   Dim Cosh_gL As ReIm
   Dim ZIZL As ReIm
   Dim Zo As ReIm
   Dim Zload As ReIm
AlphaL = 2.5
BetaL = ONEPI * 0.25  'use 1 to test G3TXQ loss
Zo.Re = 50.5
Zo.Im = -2
Zload.Re = 0
Zload.Im = 0
   With Application.WorksheetFunction
      Sinh_gL = COMPLEX(Cos(BetaL) * .Sinh(AlphaL), Sin(BetaL) * .Cosh(AlphaL))
      Cosh_gL = COMPLEX(Cos(BetaL) * .Cosh(AlphaL), Sin(BetaL) * .Sinh(AlphaL))
   End With

   ZIZL = IMPRODUCT(Zo, IMDIV(IMSUM(IMPRODUCT(Zload, Cosh_gL), _
                                    IMPRODUCT(Zo, Sinh_gL)), _
                              IMSUM(IMPRODUCT(Zo, Cosh_gL), _
                                    IMPRODUCT(Zload, Sinh_gL))))
Dim X1 As Double, X2 As Double, X3 As Double, X4 As Double, X5 As Double, X6 As Double
Dim Zin As ReIm
Dim GammaL As ReIm
X1 = IMABS(Zo)
X2 = ZIZL.Re
X3 = ZIZL.Im
X4 = IMABS(ZIZL)
Zin = ZIZL
''Zo = COMPLEX(IMABS(ZIZL), 0)
GammaL = IMATANH( _
                IMPRODUCT(Zo, _
                       IMDIV(IMSUB(Zload, Zin), _
                             IMSUB(IMPRODUCT(Zload, Zin), _
                                   IMPRODUCT(Zo, Zo)))))
X5 = GammaL.Re
'''GammaL = IMATANH(IMDIV(Zin, Zo))
'''GammaL = IMATANH(IMDIV(Zin, COMPLEX(X1, 0)))
X6 = IMABS(Zin) / IMABS(Zo)
End Sub

'
'  Replacement functions for some Excel ATPVBAEN complex number functions.
'  Avoids hassle of making sure the ATPVBAEN add-in is loaded and referenced.
'

Function COMPLEX(Arg1 As Double, Optional Arg2 As Double = 0) As ReIm
   COMPLEX.Re = Arg1
   COMPLEX.Im = Arg2
End Function

Function IMSUM(Arg1 As ReIm, Arg2 As ReIm) As ReIm
   IMSUM.Re = Arg1.Re + Arg2.Re
   IMSUM.Im = Arg1.Im + Arg2.Im
End Function

Function IMSUB(Arg1 As ReIm, Arg2 As ReIm) As ReIm
   IMSUB.Re = Arg1.Re - Arg2.Re
   IMSUB.Im = Arg1.Im - Arg2.Im
End Function

Function IMPRODUCT(Arg1 As ReIm, Arg2 As ReIm) As ReIm
   IMPRODUCT.Re = Arg1.Re * Arg2.Re - Arg1.Im * Arg2.Im
   IMPRODUCT.Im = Arg1.Re * Arg2.Im + Arg1.Im * Arg2.Re
End Function

Function IMDIV(Arg1 As ReIm, Arg2 As ReIm) As ReIm
   Dim Denom As Double
   If Arg2.Re = 0 And Arg2.Im = 0 Then
      IMDIV.Re = 1E+38
      IMDIV.Im = 0
   Else
      Denom = Arg2.Re ^ 2 + Arg2.Im ^ 2
      IMDIV.Re = (Arg1.Re * Arg2.Re + Arg1.Im * Arg2.Im) / Denom
      IMDIV.Im = (Arg1.Im * Arg2.Re - Arg1.Re * Arg2.Im) / Denom
   End If
End Function

Function IMSQRT(Arg1 As ReIm) As ReIm
   Dim Radius As Double, Angle As Double
   Radius = Sqr(Arg1.Re ^ 2 + Arg1.Im ^ 2)
   On Error Resume Next  'if both Re and Im are 0, leave Angle as 0
   Angle = Application.Atan2(Arg1.Re, Arg1.Im)  'Atan2() instead of Atn() allows for negative Re
   IMSQRT.Re = Sqr(Radius) * Cos(Angle / 2)
   IMSQRT.Im = Sqr(Radius) * Sin(Angle / 2)
End Function

Function IMPOWER(Arg1 As ReIm, Power As Double) As ReIm
   Dim Radius As Double, Angle As Double
   Radius = Sqr(Arg1.Re ^ 2 + Arg1.Im ^ 2)
   On Error Resume Next  'if both Re and Im are 0, leave Angle as 0
   Angle = Application.Atan2(Arg1.Re, Arg1.Im)  'Atan2() instead of Atn() allows for negative Re
   IMPOWER.Re = Radius ^ Power * Cos(Power * Angle)
   IMPOWER.Im = Radius ^ Power * Sin(Power * Angle)
End Function

Function IMREAL(Arg1 As ReIm) As Double
   IMREAL = Arg1.Re
End Function

Function IMAGINARY(Arg1 As ReIm) As Double
   IMAGINARY = Arg1.Im
End Function

Function IMABS(Arg1 As ReIm) As Double
   IMABS = Sqr(Arg1.Re ^ 2 + Arg1.Im ^ 2)
End Function

Function IMARGUMENT(Arg1 As ReIm) As Double
   IMARGUMENT = Application.Atan2(Arg1.Re + 1E-38, Arg1.Im)  'radians
End Function

Function IMARGUMENTdeg(Arg1 As ReIm) As Double
   IMARGUMENTdeg = Application.Atan2(Arg1.Re + 1E-38, Arg1.Im) * RAD2DEG  'degrees
End Function

Function IMCONJUGATE(Arg1 As ReIm) As ReIm
   IMCONJUGATE.Re = Arg1.Re
   IMCONJUGATE.Im = -Arg1.Im
End Function

Function IMEXP(Arg1 As ReIm) As ReIm
   IMEXP.Re = Exp(Arg1.Re) * Cos(Arg1.Im)
   IMEXP.Im = Exp(Arg1.Re) * Sin(Arg1.Im)
End Function

Function IMLN(Arg1 As ReIm) As ReIm
   Arg1.Re = Arg1.Re + 1E-38
   IMLN.Re = Log(Sqr(Arg1.Re ^ 2 + Arg1.Im ^ 2))
   IMLN.Im = Application.Atan2(Arg1.Re, Arg1.Im)
End Function

Function IMATANH(Arg1 As ReIm) As ReIm
   'See http://live.boost.org/doc/libs/1_34_0/doc/html/boost_math/inverse_complex.html
   IMATANH = IMDIV(IMSUB(IMLN(IMSUM(COMPLEX(1, 0), Arg1)), _
                         IMLN(IMSUB(COMPLEX(1, 0), Arg1))), _
                   COMPLEX(2, 0))
End Function
Attribute VB_Name = "frmAddSubTL"
Attribute VB_Base = "0{57B6CFFE-478A-4867-95DA-E217C31DF65A}{9298DF37-8780-42EF-AA64-777B9315E547}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text  ' "AAA" = "aaa"
Option Explicit
  
Dim vZohf As Variant, vVFhf As Variant, vK1 As Variant, vK2 As Variant, vK0 As Variant
Dim LI As Long
Dim ChecksOK As Boolean
Dim LossFreq As Double
Dim PrevUnits As String

Private Sub UserForm_Initialize()
   
   '>>> WARNING <<<     >>> WARNING <<<     >>> WARNING <<<
   'If new specs are added, thus increasing the UBound of all these variant arrays,
   'make a corresponding change in proc ReadData section /Zplots "TL Parms" type file/.
   '
   'Also:  These arrays are duplicated in frmGenData.  Coordinate any changes.
   '>>> WARNING <<<     >>> WARNING <<<     >>> WARNING <<<

   cboLineTypes.List = Array( _
         "Andrew Braided CNT-100", "Andrew Braided CNT-195", "Andrew Braided CNT-240", "Andrew Braided CNT-300", "Andrew Braided CNT-400", "Andrew Braided CNT-600", "Andrew Heliax  LDF4-50A", "Andrew Heliax  LDF5-50A", "Andrew Heliax  LDF6-50", "Belden 8215    (RG-6A/U)", "Belden 7915A   (RG-6/HDTV)", "Belden 9116    (RG-6/CATV)", "Belden 8237    (RG-8/U)", "Belden 9251    (RG-8/U)", "Belden 9913    (RG-8/U)", "Belden 9913F7 (RG-8/U)", "Belden 9914    (RG-8/U)", "Belden 9258    (RG-8X)", "Belden 8213    (RG-11/U)", "Belden 8238    (RG-11/U)", _
         "Belden 8261    (RG-11A/U)", "Belden 9212    (RG-11/U)", "Belden 8219    (RG-58A/U)", "Belden 8240    (RG-58A/U)", "Belden 8259    (RG-58A/U)", "Belden 8262    (RG-58C/U)", "Belden 9201    (RG-58/U)", "Belden 8212    (RG-59/U)", "Belden 8241    (RG-59/U)", "Belden 8263    (RG-59B/U)", "Belden 9269    (RG-62A/U)", "Belden 9857    (RG-63/U)", "Belden 83242  (RG-142B/U)", "Belden 7805    (RG-174/U)", "Belden 8216    (RG-174/U)", "Belden 83265  (RG-178B/U)", "Belden 83269  (RG-188A/U)", "Belden 8267    (RG-213/U)", "Belden 8268    (RG-214/U)", "Belden 84303   (RG-303/U)", _
         "Belden 84316   (RG-316/U)", "CommScope 2427K   (RG-8)", "CommScope 3227     (RG-8)", "Davis RF Bury-Flex", "Radioware RG-6", "Radioware RG-8X", "Radioware RG-11", "Radioware RG-58", "Radioware RG-174", "Radioware RG-213", "Radioware RF-9913", "Radioware RF-9914F", "Tandy Cable RG-8X", "Tandy Cable RG-58", "Tandy Cable RG-59", "Times  LMR-100A", "Times  LMR-195", "Times  LMR-200", "Times  LMR-240", "Times  LMR-240-UF", _
         "Times  LMR-240-75", "Times  LMR-300", "Times  LMR-400", "Times  LMR-400-UF", "Times  LMR-400-75", "Times  LMR-500", "Times  LMR-600", "Times  LMR-600-UF", "Times  LMR-600-75", "Times  LMR-900", "Times  LMR-1200", "Times  LMR-1700", "Wireman CQ102     (RG-8)", "Wireman CQ106     (RG-8)", "Wireman CQ1000   (RG-8)", "Wireman CQ116     (RG-8X)", "Wireman CQ117     (RG-8X)", "Wireman CQ118     (RG-8X)", "Wireman CQ124     (RG-58)", "Wireman CQ129FF (RG-58)", _
         "Wireman CQ113     (RG-213)", "Wireman CQ142A   (RG-217)", "UTP Category 3", "UTP Category 5E", "UTP Category 6", "STP-A 150 ohm", "Wireman 551 Ladder Line", "Wireman 552 Ladder Line", "Wireman 553 Ladder Line", "Wireman 554 Ladder Line", "Wireman 551 LL (ice/snow)", "Wireman 552 LL (ice/snow)", "Wireman 553 LL (ice/snow)", "Wireman 554 LL (ice/snow)", "Generic 300 ohm Tubular", "Generic 450 ohm Window", "Generic 600 ohm Open", "Ideal (lossless) 50 ohm", "Ideal (lossless) 75 ohm", "User spec: Set parms below")

   vZohf = Array( _
         50, 50, 50, 50, 50, 50, 50, 50, 50, 75, 75, 75, 52, 52, 50, 52, 50, 50, 75, 75, _
         75, 76, 53.5, 51.5, 50, 50, 52, 75, 75, 75, 90, 125, 50, 50, 50, 50, 50, 50, 50, 50, _
         50, 50, 50, 50, 75, 50, 75, 50, 50, 50, 50, 50, 50, 50, 75, 50, 50, 50, 50, 50, _
         75, 50, 50, 50, 75, 50, 50, 50, 75, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 52, _
         50, 50, 100, 100, 100, 150, 400, 380, 395, 360, 390, 365, 380, 350, 300, 450, 600, 50, 75, 999)
   vZohf(UBound(vZohf)) = [UserZo]

   vVFhf = Array( _
         0.66, 0.8, 0.83, 0.83, 0.85, 0.87, 0.88, 0.89, 0.89, 0.66, 0.83, 0.83, 0.66, 0.66, 0.84, 0.85, 0.82, 0.82, 0.84, 0.66, _
         0.66, 0.66, 0.73, 0.66, 0.66, 0.66, 0.66, 0.78, 0.66, 0.66, 0.84, 0.84, 0.7, 0.66, 0.66, 0.695, 0.695, 0.66, 0.66, 0.7, _
         0.695, 0.84, 0.84, 0.82, 0.82, 0.78, 0.78, 0.66, 0.66, 0.66, 0.84, 0.83, 0.78, 0.66, 0.66, 0.66, 0.76, 0.83, 0.84, 0.84, _
         0.84, 0.85, 0.85, 0.85, 0.85, 0.86, 0.87, 0.87, 0.87, 0.87, 0.88, 0.89, 0.84, 0.82, 0.85, 0.78, 0.72, 0.8, 0.66, 0.78, _
         0.66, 0.66, 0.61, 0.61, 0.61, 0.61, 0.902, 0.918, 0.902, 0.93, 0.864, 0.883, 0.869, 0.887, 0.8, 0.91, 0.92, 0.66, 0.66, 999)
   vVFhf(UBound(vVFhf)) = [UserVF]

   vK0 = Array( _
         0.352647, 0.108574, 0.062452, 0.039521, 0.026753, 0.015027, 0.008946, 0.005906, 0.003561, 0.375388, 0.063697, 0.615093, 0.025891, 0.025891, 0.402115, 0.02422, 0.019978, 0.066013, 0.190155, 0.042271, _
         0.042271, 0.041715, 0.104718, 0.118904, 0.12942, 0.12942, 0.129453, 0.603418, 0.594885, 0.594885, 0.212804, 0.147313, 0.187615, 0.35699, 2.156088, 3.098352, 0.865983, 0.256179, 0.020846, 0.178929, _
         1.189647, 0.020151, 0.020151, 0.025189, 0.063697, 0.466609, 0.178674, 0.12942, 2.108132, 0.025189, 0.186127, 0.298145, 0.069487, 0.138974, 0.19109, 0.786073, 0.108574, 0.089117, 0.061583, 0.070964, _
         0.08101, 0.03761, 0.026405, 0.023626, 0.024031, 0.018154, 0.015027, 0.014158, 0.014998, 0.009468, 0.005993, 0.004169, 0.023452, 0.025623, 0.025189, 0.066013, 0.066013, 0.063407, 0.255365, 0.126112, _
         1.104626, 0.024494, 0.247548, 0.247548, 0.247548, 0.101335, 0.249956, 0.355771, 0.077708, 0.149143, 0.256365, 0.370392, 0.080775, 0.153404, 0.021715, 0.009651, 0.003619, 0#, 0#, 0)
   vK0(UBound(vK0)) = [UserK0]

   vK1 = Array( _
         0.691672, 0.363325, 0.260761, 0.201307, 0.131386, 0.082774, 0.064142, 0.034825, 0.022861, 0.24666, 0.195292, 0.196584, 0.185562, 0.185562, 0.129373, 0.158114, 0.13942, 0.288776, 0.113867, 0.199492, _
         0.199492, 0.198907, 0.398776, 0.321239, 0.436326, 0.403833, 0.32071, 0.280797, 0.319915, 0.319915, 0.27102, 0.149965, 0.353181, 0.690569, 0.777862, 1.448062, 0.856815, 0.154587, 0.163915, 0.338634, _
         0.800401, 0.136083, 0.123024, 0.154616, 0.196827, 0.316133, 0.130375, 0.403626, 0.86802, 0.199693, 0.123263, 0.140867, 0.316119, 0.378678, 0.300255, 0.709385, 0.358541, 0.326439, 0.239481, 0.293214, _
         0.232188, 0.196637, 0.124805, 0.147204, 0.112936, 0.094339, 0.072828, 0.093622, 0.07023, 0.055074, 0.038836, 0.02222, 0.131438, 0.164155, 0.131439, 0.242334, 0.327886, 0.23948, 0.482485, 0.473162, _
         0.120013, 0.152518, 0.683349, 0.612538, 0.591814, 0.326196, 0.044559, 0.041126, 0.078862, 0.04364, 0.045702, 0.042816, 0.081975, 0.044887, 0.09224, 0.022439, 0.019219, 0#, 0#, 0)
   vK1(UBound(vK1)) = [UserK1]

   vK2 = Array( _
         0.001106, 0.000299, 0#, 0#, 0#, 0.000059, 0.000193, 0.000153, 0.000131, 0.002253, 0.000071, 0.00019, 0.001357, 0.001357, 0.000223, 0#, 0#, 0.002125, 0.001554, 0.00072, _
         0.00072, 0.000803, 0.005265, 0.004695, 0.009218, 0.008761, 0.004718, 0.002069, 0.001754, 0.001754, 0.000073, 0.000989, 0.001996, 0.001356, 0.008695, 0#, 0.001408, 0.003135, 0.002752, 0.003147, _
         0.003536, 0.001562, 0.00046, 0#, 0.000257, 0.003738, 0.001802, 0.008667, 0.002986, 0.002006, 0.000541, 0.000557, 0.002984, 0.003754, 0.000076, 0.001766, 0.000424, 0.000172, 0.000447, 0.000307, _
         0.00026, 0.000181, 0.000187, 0.000315, 0.000374, 0.000332, 0.000353, 0.000237, 0.00026, 0.000065, 0.000143, 0.000275, 0#, 0#, 0#, 0.003309, 0.001195, 0.001934, 0.000295, 0#, _
         0.001291, 0.000171, 0.083457, 0.006121, 0.00036, 0.006211, 0.0012, 0.001, 0.0009, 0.0017, 0.086984, 0.077033, 0.069739, 0.092957, 0.001089, 0.000459, 0.00009, 0#, 0#, 0)
   vK2(UBound(vK2)) = [UserK2]
   
   LI = [TLTypeLI]
   cboLineTypes.ListIndex = LI  'sets txtZo/VF/K1/K2/K0
'''   If LI = UBound(vZohf) Then
'''      txtZo.Enabled = True
'''      txtVF.Enabled = True
'''      txtK0.Enabled = True
'''      txtK1.Enabled = True
'''      txtK2.Enabled = True
'''   Else
'''      txtZo.Enabled = False
'''      txtVF.Enabled = False
'''      txtK0.Enabled = False
'''      txtK1.Enabled = False
'''      txtK2.Enabled = False
'''   End If
    
   txtLen.Value = CStr([TLLen])
   cboLenUnits.List = Array("Feet", "Meters", "Inches", "Millimeters")
   cboLenUnits.Value = [TLUnits]
   If [TLAdd] Then
      optAdd.Value = True
   Else
      optSubtract.Value = True
   End If
   
   Me.StartUpPosition = 0
   Me.Top = Application.Top + Application.Height - Me.Height - 5  '10
   Me.Left = Application.Left + Application.Width - Me.Width - 5  '10
   If ActiveSheet.Name = "Custom" Then
      If Me.Top > 245 Then Me.Top = 245
      If Me.Left > 570 Then Me.Left = 570
   Else  'Smith
      If Me.Top > 190 Then Me.Top = 190
      If Me.Left > 445 Then Me.Left = 445
   End If
   
   LossFreq = ([TCFreq].Offset(1) + [TCFreq].Offset([TCcnt])) / 2  'average of loaded data
   LossFreq = Application.Round(LossFreq, 3)  'whole number KHz
   If LossFreq = 0 Then LossFreq = 0.001  'but not 0
   ShowDelayLoss
   
   PrevUnits = cboLenUnits
End Sub

Private Sub cboLineTypes_Change()
   If cboLineTypes.ListIndex = -1 Then
      MsgBox "Make a selection from the drop down list of available choices.", _
             vbExclamation, "Selection Required for Line Type"
   Else
      LI = cboLineTypes.ListIndex
      txtZo.Value = CStr(vZohf(LI))  'use Cstr to be regionally aware
      txtVF.Value = CStr(vVFhf(LI))
      txtK0.Value = Format(vK0(LI), "0.000000")
      txtK1.Value = Format(vK1(LI), "0.000000")  'use Format for consistent decimals
      txtK2.Value = Format(vK2(LI), "0.000000")
'''      If LI = UBound(vZohf) Then
'''         txtZo.Enabled = True
'''         txtVF.Enabled = True
'''         txtK0.Enabled = True
'''         txtK1.Enabled = True
'''         txtK2.Enabled = True
'''      Else
'''         txtZo.Enabled = False
'''         txtVF.Enabled = False
'''         txtK0.Enabled = False
'''         txtK1.Enabled = False
'''         txtK2.Enabled = False
'''      End If
      ShowDelayLoss
   End If
End Sub

Private Sub txtLen_Change()
   ShowDelayLoss
End Sub

Private Sub cboLenUnits_Change()
   Dim LenFt As Double
   
   'Convert existing length to new units.  Actual length does not change except for rounding.
   If PrevUnits = "" Then Exit Sub  'initialization not completed
   On Error Resume Next  'in case invalid txtLen
   Select Case PrevUnits
      Case "Feet"
         LenFt = CDbl(txtLen)
      Case "Meters"
         LenFt = CDbl(txtLen) / 0.3048
      Case "Inches"
         LenFt = CDbl(txtLen) / 12
      Case "Millimeters"
         LenFt = CDbl(txtLen) / 304.8
   End Select
   If LenFt <= 0 Then Err.Number = 1
   If Err.Number <> 0 Then
      txtLen.SelStart = 0
      txtLen.SelLength = 99
      txtLen.SetFocus
      Beep
      Exit Sub
   End If
   Select Case cboLenUnits.Value
      Case "Feet"
         txtLen = Format(LenFt, "0.0###")
      Case "Meters"
         txtLen = Format(LenFt * 0.3048, "0.0###")
      Case "Inches"
         txtLen = Format(LenFt * 12, "0.0###")
      Case "Millimeters"
         txtLen = Format(LenFt * 304.8, "0.0###")
   End Select
   PrevUnits = cboLenUnits
End Sub

Private Sub txtZo_Change()
   ShowDelayLoss
End Sub

Private Sub txtVF_Change()
   ShowDelayLoss
End Sub

Private Sub txtK0_Change()
   ShowDelayLoss
End Sub

Private Sub txtK1_Change()
   ShowDelayLoss
End Sub

Private Sub txtK2_Change()
   ShowDelayLoss
End Sub

Private Sub btnOK_Click()
   btnApply_Click
   If ChecksOK Then
      Unload Me
   End If
End Sub

Private Sub btnApply_Click()
   Dim LenFt As Double
   Dim Zohf As Double
   Dim VFhf As Double
   Dim K0 As Double
   Dim K1 As Double
   Dim K2 As Double
   
   CheckInput
   
   If ChecksOK Then
      Select Case cboLenUnits
         Case "Feet"
            LenFt = CDbl(txtLen)
         Case "Meters"
            LenFt = CDbl(txtLen) / 0.3048
         Case "Inches"
            LenFt = CDbl(txtLen) / 12
         Case "Millimeters"
            LenFt = CDbl(txtLen) / 304.8
      End Select
      If optSubtract Then LenFt = -LenFt  'input to load, use negative length
      Zohf = vZohf(LI)
      VFhf = vVFhf(LI)
      K0 = vK0(LI)
      K1 = vK1(LI)
      K2 = vK2(LI)
      
      AddSubtractTL LenFt, Zohf, VFhf, K1, K2, K0
   End If
End Sub

Private Sub btnCancel_Click()
   Unload Me
End Sub

Private Sub btnUndo_Click()
   AddSubtractTL 0, 0, 0, 0, 0, 0  'line length 0, has the effect of restoring all original data
End Sub

Private Sub spnLength_SpinUp()
   If Not IsNumeric(txtLen) Then
      MsgBox "Length must be a numeric value greater than 0.", _
             vbExclamation, "Invalid Length"
      txtLen.SelStart = 0
      txtLen.SelLength = 99
      txtLen.SetFocus
      Exit Sub
   End If
   If optOne Then
      txtLen.Value = CStr(CDbl(txtLen.Value) + 1)
   Else
      txtLen.Value = CStr(CDbl(txtLen.Value) + 0.1)
   End If
   btnApply_Click
End Sub

Private Sub spnLength_SpinDown()
   If Not IsNumeric(txtLen) Then
      MsgBox "Length must be a numeric value greater than 0.", _
             vbExclamation, "Invalid Length"
      txtLen.SelStart = 0
      txtLen.SelLength = 99
      txtLen.SetFocus
      Exit Sub
   End If
   If optOne Then
      If CSng(txtLen.Value) > 1 Then
         txtLen.Value = CStr(CDbl(txtLen.Value) - 1)
      Else
         Beep
         Exit Sub
      End If
   Else
      If CSng(txtLen.Value) > 0.1 Then
         txtLen.Value = CStr(CDbl(txtLen.Value) - 0.1)
      Else
         Beep
         Exit Sub
      End If
   End If
   btnApply_Click
End Sub

Private Sub btnConv_Click()
   frmConversions.Show
End Sub

Private Sub CheckInput()
   'Check all user input fields, set module level variable CheckOK.
   ChecksOK = False
   
   'Check parms, save if user spec.
   If Not IsNumeric(txtZo) Then
      txtZo.SetFocus
      MsgBox "Zo must be a numeric value greater than 0.", _
             vbExclamation, "Invalid User Setting"
      Exit Sub
   End If
   If txtZo <= 0 Then
      txtZo.SetFocus
      MsgBox "Zo must be a numeric value greater than 0.", _
             vbExclamation, "Invalid User Setting"
      Exit Sub
   End If
   If Not IsNumeric(txtVF) Then
      txtVF.SetFocus
      MsgBox "VF must be a numeric value > 0 and <= 1.", _
             vbExclamation, "Invalid User Setting"
      Exit Sub
   End If
   If txtVF <= 0 Or txtVF > 1 Then
      txtVF.SetFocus
      MsgBox "VF must be a numeric value > 0 and <= 1.", _
             vbExclamation, "Invalid User Setting"
      Exit Sub
   End If
   If Not IsNumeric(txtK0) Then
      txtK0.SetFocus
      MsgBox "K0 must be a numeric value.", _
             vbExclamation, "Invalid User Setting"
      Exit Sub
   End If
   If Not IsNumeric(txtK1) Then
      txtK1.SetFocus
      MsgBox "K1 must be a numeric value.", _
             vbExclamation, "Invalid User Setting"
      Exit Sub
   End If
   If Not IsNumeric(txtK2) Then
      txtK2.SetFocus
      MsgBox "K2 must be a numeric value.", _
             vbExclamation, "Invalid User Setting"
      Exit Sub
   End If
   'Allow (temporary) override of mfg specs.
   vZohf(LI) = CDbl(txtZo.Value)
   vVFhf(LI) = CDbl(txtVF.Value)
   vK0(LI) = CDbl(txtK0.Value)
   vK1(LI) = CDbl(txtK1.Value)
   vK2(LI) = CDbl(txtK2.Value)
   'Save if user spec.
   If LI = UBound(vZohf) Then
      [UserZo].Value = CDbl(txtZo.Value)
      [UserVF].Value = CDbl(txtVF.Value)
      [UserK0].Value = CDbl(txtK0.Value)
      [UserK1].Value = CDbl(txtK1.Value)
      [UserK2].Value = CDbl(txtK2.Value)
   End If
   
   'Validity checks for length and units.
   If Not IsNumeric(txtLen) Then
      MsgBox "Length must be a numeric value greater than 0.", _
             vbExclamation, "Invalid Length"
      txtLen.SelStart = 0
      txtLen.SelLength = 99
      txtLen.SetFocus
      Exit Sub
   End If
   If CDbl(txtLen) <= 0 Then
      MsgBox "Length must be a numeric value greater than 0.", _
             vbExclamation, "Invalid Length"
      txtLen.SelStart = 0
      txtLen.SelLength = 99
      txtLen.SetFocus
      Exit Sub
   End If
   If cboLenUnits.ListIndex = -1 Then
      MsgBox "Make a selection from the drop down list of available choices.", _
             vbExclamation, "Selection Required for Units"
      cboLenUnits.SelStart = 0
      cboLenUnits.SelLength = 99
      cboLenUnits.SetFocus
      Exit Sub
   End If
   
   'All OK, save.
   [TLTypeLI].Value = LI
   [TLLen].Value = CDbl(txtLen.Value)
   [TLUnits].Value = cboLenUnits.Value
   [TLAdd].Value = optAdd.Value
   
   ChecksOK = True
End Sub

Private Sub ShowDelayLoss()
   Dim Length As Double
   Dim LenFt As Double
   Dim Zohf As Double, VFhf As Double, K0 As Double, K1 As Double, K2 As Double
   Dim vTLParms As Variant
   Dim VF As Double
   Dim Delay As Double
   Dim strDelay As String
   Dim Loss As Double
   
   If LossFreq = 0 Then Exit Sub  'initialization not completed
   
   On Error Resume Next  'in case invalid entry for Length or Zo, VF, K0, K1, K2
   Length = CDbl(txtLen.Value)
   Zohf = CDbl(txtZo.Value)
   VFhf = CDbl(txtVF.Value)
   K0 = CDbl(txtK0.Value)
   K1 = CDbl(txtK1.Value)
   K2 = CDbl(txtK2.Value)
   If Length <= 0 Or Zohf <= 0 Or VFhf <= 0 Or VFhf > 1 Then Err.Number = 1
   If Err.Number <> 0 Then
      lblDelay.Caption = "Time Delay = ???"
      lblLoss.Caption = "Loss (@ " & LossFreq & " MHz) = ???"
      Exit Sub
   End If
   On Error GoTo 0
   
   Select Case cboLenUnits.Value
      Case "Feet"
         LenFt = Length
      Case "Meters"
         LenFt = Length / 0.3048
      Case "Inches"
         LenFt = Length / 12
      Case "Millimeters"
         LenFt = Length / 304.8
   End Select
   
   'Get VF (true VF at Freq) and Loss (dB per LenFt).
   'Note LossFreq declared at module level, set by caller.
   vTLParms = GetTLParms(LossFreq, LenFt, Zohf, VFhf, K1, K2, K0)
   VF = vTLParms(3, 1)    'corrected VF
   Loss = vTLParms(4, 1)  'loss over LenFt, dB
   
   Delay = LenFt / (SLfps * VF)  'seconds (at corrected VF)
   strDelay = ""
   If Delay >= 1 Then
      strDelay = Format(Delay, "0.000 s")
   ElseIf Delay >= 0.001 Then
      strDelay = Format(Delay * 1000, "0.000 ms")
   ElseIf Delay >= 0.000001 Then
      strDelay = Format(Delay * 1000000, "0.000 |fffd|s")
   ElseIf Delay >= 0.000000001 Then
      strDelay = Format(Delay * 1000000000, "0.000 ns")
   Else
      strDelay = Format(Delay * 1000000000000#, "0.000 ps")
   End If
   lblDelay.Caption = "Time Delay = " & _
               strDelay & _
               "  (VF = " & Format(VF, "0.0000") & ")"
   
   On Error Resume Next  'in case overflow for very high loss
   lblLoss.Caption = "Loss = " & _
               Format(Loss, "0.000") & " dB = " & _
               Format(10 ^ (Loss / 10), "0.0000") & " factor"
   lblLossFreq.Caption = "(Both @ " & Format(LossFreq, "0.000") & " MHz)"
End Sub
Attribute VB_Name = "frmConversions"
Attribute VB_Base = "0{4B501B7E-CB72-400D-85BE-DC9FE3F53F60}{D1A0D0FD-6268-4CD3-AEC5-E4B023F1081A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim DoChanges As Boolean

Private Sub UserForm_Initialize()
   'Set an option button to be the initial one on.
   optLen = True
   optLen.SetFocus
   
   'Format initial values for regional decimal symbol.
   'Note that "Format" is regionally aware.
   txtFreq = "10"
   txtVF = Format(0.66, ".000")
   txtLenFt = Format(32.458, "0.000")
   txtLenM = Format(9.893, "0.000")
   txtWL = Format(0.5, "0.0")
   txtDeg = "180"
   If Application.International(xlDecimalSeparator) = "," Then
      Label19.Caption = "(M = Ft x 0,3048)"
      Label15.Caption = "=  299,792458E+6 M/sec"
      Label16.Caption = "=  983,571056E+6 Ft/sec"
   End If
   
   'The DoChanges flag is used to allow a distinction to be made between
   'user entry in a field (in which case the change should be recognized
   'and the other fields calculated as necessary) and program calculation
   'of a field (in which case don't want to treat it as a user change).
   '
   'Note that setting Application.EnableEvents=False doesn't work for controls
   'on a form, nor does setting .Enabled=False prevent the control
   'from responding to a program-initiated change event.
   
   DoChanges = True
End Sub


'Change event handlers for option buttons.  Note that this is the Change event,
'not the Click event.  Event will fire once for the option button that becomes
'false, and again for the option button that becomes true.  Set the background
'color of text box(es), lock or unlock, and set the equation as appropriate.

Private Sub optFreq_Change()
   If optFreq Then
      txtFreq.BackColor = &HE0E0E0
      txtFreq.Locked = True
      lblEqTop = "WL  x  VF  x  C"
      lblEqMid = "Freq  =  --------------------"
      lblEqBot = "Len"
   Else
      txtFreq.BackColor = vbWhite
      txtFreq.Locked = False
   End If
End Sub
Private Sub optVF_Change()
   If optVF Then
      txtVF.BackColor = &HE0E0E0
      txtVF.Locked = True
      lblEqTop = "Len  x  Freq"
      lblEqMid = "  VF  =  --------------------"
      lblEqBot = "WL  x  C"
   Else
      txtVF.BackColor = vbWhite
      txtVF.Locked = False
   End If
End Sub
Private Sub optLen_Change()
   If optLen Then
      txtLenFt.BackColor = &HE0E0E0
      txtLenFt.Locked = True
      txtLenM.BackColor = &HE0E0E0
      txtLenM.Locked = True
      lblEqTop = "WL  x  VF  x  C"
      lblEqMid = " Len  =  --------------------"
      lblEqBot = "Freq"
   Else
      txtLenFt.BackColor = vbWhite
      txtLenFt.Locked = False
      txtLenM.BackColor = vbWhite
      txtLenM.Locked = False
   End If
End Sub
Private Sub optWL_Change()
   If optWL Then
      txtWL.BackColor = &HE0E0E0
      txtWL.Locked = True
      txtDeg.BackColor = &HE0E0E0
      txtDeg.Locked = True
      lblEqTop = "Len  x  Freq"
      lblEqMid = "  WL  =  --------------------"
      lblEqBot = "VF  x  C"
   Else
      txtWL.BackColor = vbWhite
      txtWL.Locked = False
      txtDeg.BackColor = vbWhite
      txtDeg.Locked = False
   End If
End Sub

'Change event handlers for text boxes.  If data is invalid don't process,
'but don't beep since this may have been a typo or just a cleared entry.

Private Sub txtFreq_Change()
   If Not DoChanges Then Exit Sub
   If Not IsNumeric(txtFreq) Then Exit Sub
   If txtFreq <= 0 Then Exit Sub
   Calc_Convert
End Sub
Private Sub txtVF_Change()
   If Not DoChanges Then Exit Sub
   If Not IsNumeric(txtVF) Then Exit Sub
   If txtVF <= 0 Then Exit Sub
   If txtVF > 1 Then Exit Sub
   Calc_Convert
End Sub
Private Sub txtLenFt_Change()
   If Not DoChanges Then Exit Sub
   If Not IsNumeric(txtLenFt) Then Exit Sub
   If txtLenFt <= 0 Then Exit Sub
   DoChanges = False
   txtLenM = Application.WorksheetFunction.Round(txtLenFt * 0.3048, 6)
   Calc_Convert
End Sub
Private Sub txtLenM_Change()
   If Not DoChanges Then Exit Sub
   If Not IsNumeric(txtLenM) Then Exit Sub
   If txtLenM <= 0 Then Exit Sub
   DoChanges = False
   txtLenFt = Application.WorksheetFunction.Round(txtLenM / 0.3048, 6)
   Calc_Convert
End Sub
Private Sub txtWL_Change()
   If Not DoChanges Then Exit Sub
   If Not IsNumeric(txtWL) Then Exit Sub
   If txtWL <= 0 Then Exit Sub
   DoChanges = False
   txtDeg = Application.WorksheetFunction.Round(txtWL * 360, 6)
   Calc_Convert
End Sub
Private Sub txtDeg_Change()
   If Not DoChanges Then Exit Sub
   If Not IsNumeric(txtDeg) Then Exit Sub
   If txtDeg <= 0 Then Exit Sub
   DoChanges = False
   txtWL = Application.WorksheetFunction.Round(txtDeg / 360, 6)
   Calc_Convert
End Sub

'Exit (Lost Focus) handlers for text boxes.  Don't allow exit with invalid data,
'except possibly just tabbing through invalid VF before setting other boxes.
'Beep on this, want to call attention before leaving.

Private Sub txtFreq_Exit(ByVal Cancel As MSForms.ReturnBoolean)
   If Not IsNumeric(txtFreq) Then Beep: Cancel = True: Exit Sub
   If txtFreq <= 0 Then Beep: Cancel = True: Exit Sub
End Sub
Private Sub txtVF_Exit(ByVal Cancel As MSForms.ReturnBoolean)
   If optVF Then Exit Sub
   If Not IsNumeric(txtVF) Then Beep: Cancel = True: Exit Sub
   If txtVF <= 0 Then Beep: Cancel = True: Exit Sub
   If txtVF > 1 Then Beep: Cancel = True: Exit Sub
End Sub
Private Sub txtLenFt_Exit(ByVal Cancel As MSForms.ReturnBoolean)
   If Not IsNumeric(txtLenFt) Then Beep: Cancel = True: Exit Sub
   If txtLenFt <= 0 Then Beep: Cancel = True: Exit Sub
End Sub
Private Sub txtLenM_Exit(ByVal Cancel As MSForms.ReturnBoolean)
   If Not IsNumeric(txtLenM) Then Beep: Cancel = True: Exit Sub
   If txtLenM <= 0 Then Beep: Cancel = True: Exit Sub
End Sub
Private Sub txtWL_Exit(ByVal Cancel As MSForms.ReturnBoolean)
   If Not IsNumeric(txtWL) Then Beep: Cancel = True: Exit Sub
   If txtWL <= 0 Then Beep: Cancel = True: Exit Sub
End Sub
Private Sub txtDeg_Exit(ByVal Cancel As MSForms.ReturnBoolean)
   If Not IsNumeric(txtDeg) Then Beep: Cancel = True: Exit Sub
   If txtDeg <= 0 Then Beep: Cancel = True: Exit Sub
End Sub

'Close button.

Private Sub btnClose_Click()
   Unload Me
End Sub

'Common calculations, depending on which option is selected.

Private Sub Calc_Convert()
   DoChanges = False
   
   If optFreq Then
      txtFreq = Application.WorksheetFunction.Round((txtWL * txtVF * SL) / txtLenFt, 6)
   ElseIf optVF Then
      txtVF = Application.WorksheetFunction.Round((txtLenFt * txtFreq) / (txtWL * SL), 3)
   ElseIf optLen Then
      With Application.WorksheetFunction
         txtLenFt = .Round((txtWL * txtVF * SL) / txtFreq, 3)
         txtLenM = .Round(txtLenFt * 0.3048, 3)
      End With
   Else
      With Application.WorksheetFunction
         txtWL = .Round((txtLenFt * txtFreq) / (txtVF * SL), 4)
         txtDeg = .Round(txtWL * 360, 1)
      End With
   End If
   If txtVF = 0 Or txtVF > 1 Then
      lblEinstein.Visible = True
   Else
      lblEinstein.Visible = False
   End If
   
   DoChanges = True
End Sub
Attribute VB_Name = "frmCopyScale"
Attribute VB_Base = "0{442BD38F-0D70-4E9B-A5BD-07900EFA421E}{DAA95248-8BD8-4D54-A1A8-99CAF67BF60B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Dim NoTextSelect As Boolean
Dim SaveCIca As Long
Dim SaveCIpa As Long

Private Sub UserForm_Initialize()
   Dim ScaleFactor As Single
   
   If [CopyScaleFactor].Value > 100 Then  'signal for "Make GIF..."
      Me.Caption = "Choose Size and Colors for GIF File"
      [CopyScaleFactor].Value = [CopyScaleFactor].Value - 100
   Else
      Me.Caption = "Choose Size and Colors for Clipboard Copy"
   End If
   
   ScaleFactor = [CopyScaleFactor]
   Select Case ScaleFactor
      Case 1.5
         Me.opt150.Value = True
         Me.opt150.SetFocus
         Me.txtScale.Text = Format(1.5, "0.00")  'internationally aware
      Case 1.25
         Me.opt125.Value = True
         Me.opt125.SetFocus
         Me.txtScale.Text = Format(1.25, "0.00")
      Case 1
         Me.opt100.Value = True
         Me.opt100.SetFocus
         Me.txtScale.Text = Format(1, "0.00")
      Case 0.75
         Me.opt075.Value = True
         Me.opt075.SetFocus
         Me.txtScale.Text = Format(0.75, "0.00")
      Case 0.5
         Me.opt050.Value = True
         Me.opt050.SetFocus
         Me.txtScale.Text = Format(0.5, "0.00")
      Case Else
         NoTextSelect = True
         Me.optCustom.Value = True
         Me.txtScale.Text = CStr(ScaleFactor)
         NoTextSelect = False
   End Select
   If Application.International(xlDecimalSeparator) = "," Then
      Me.opt150.Caption = "1,50"
      Me.opt125.Caption = "1,25"
      Me.opt100.Caption = "1,00"
      Me.opt075.Caption = "0,75"
      Me.opt050.Caption = "0,50"
      Me.Label1.Caption = "(Min 0,2 - Max 2,0)"
   End If
   
   Dim Fillca As Long
   Dim Fillpa As Long
   With ActiveSheet.ChartObjects(1).Chart
      SaveCIca = .ChartArea.Interior.ColorIndex
      SaveCIpa = .PlotArea.Interior.ColorIndex
      Fillca = .ChartArea.Fill.Type
      Fillpa = .PlotArea.Fill.Type
   End With
   If (SaveCIca = 2 Or SaveCIca = -4105) And _
      (SaveCIpa = 2 Or SaveCIpa = -4105) Or _
      Fillca <> msoFillSolid Or _
      Fillpa <> msoFillSolid Then
      'Chart is already all white (or has non-solid color fill), disable color choice options.
      Me.Frame2.Enabled = False
      Me.optExisting.Enabled = False
      Me.optWhite.Enabled = False
   Else
      'Allow choice, fires click event.
      If [CopyFillWhite] Then
         Me.optWhite.Value = True
      Else
         Me.optExisting.Value = True
      End If
   End If
   'Activate the chart so user can see what the Copy/GIF will
   'look like, without the worksheet level buttons and text.
   ActiveSheet.ChartObjects(1).Activate
End Sub

Private Sub optExisting_Click()
   With ActiveSheet.ChartObjects(1).Chart
      .ChartArea.Interior.ColorIndex = SaveCIca
      .PlotArea.Interior.ColorIndex = SaveCIpa
   End With
End Sub

Private Sub optWhite_Click()
   With ActiveSheet.ChartObjects(1).Chart
      .ChartArea.Interior.ColorIndex = 2  'white
      .PlotArea.Interior.ColorIndex = 2
   End With
End Sub

Private Sub opt150_Click()
   Me.txtScale.Text = Format(1.5, "0.00")
End Sub

Private Sub opt125_Click()
   Me.txtScale.Text = Format(1.25, "0.00")
End Sub

Private Sub opt100_Click()
   Me.txtScale.Text = Format(1, "0.00")
End Sub

Private Sub opt075_Click()
   Me.txtScale.Text = Format(0.75, "0.00")
End Sub

Private Sub opt050_Click()
   Me.txtScale.Text = Format(0.5, "0.00")
End Sub

Private Sub optCustom_Click()
   Me.txtScale.SetFocus
   If Not NoTextSelect Then
      Me.txtScale.SelStart = 0
      Me.txtScale.SelLength = 99
   End If
End Sub

Private Sub txtScale_Change()
   Dim NewScale As String
   NewScale = Me.txtScale.Text
   If NewScale <> Format(1.5, "0.00") And _
      NewScale <> Format(1.25, "0.00") And _
      NewScale <> Format(1, "0.00") And _
      NewScale <> Format(0.75, "0.00") And _
      NewScale <> Format(0.5, "0.00") Then
      NoTextSelect = True
      Me.optCustom.Value = True
      NoTextSelect = False
   End If
End Sub

Private Sub btnOK_Click()
   Dim ScaleFactor As Single
   On Error Resume Next
   ScaleFactor = CSng(Me.txtScale.Text)
   If Err.Number > 0 Or ScaleFactor < 0.2 Or ScaleFactor > 2 Then
      Me.txtScale.SetFocus
      Me.txtScale.SelStart = 0
      Me.txtScale.SelLength = 99
      MsgBox "Invalid scale factor", vbExclamation, "Not Valid"
      Exit Sub
   End If
   [CopyScaleFactor].Value = ScaleFactor
   If Me.Frame2.Enabled Then [CopyFillWhite].Value = Me.optWhite.Value
   Unload Me
End Sub

Private Sub btnCancel_Click()
   [CopyScaleFactor].Value = -[CopyScaleFactor].Value  'signal to exit
   Unload Me
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
   If CloseMode <> 1 Then [CopyScaleFactor].Value = -[CopyScaleFactor].Value 'signal to exit
End Sub
Attribute VB_Name = "frmCustomSnaps"
Attribute VB_Base = "0{D497B885-70C5-4905-B671-F80CDF11D67C}{EC1FDF1A-1E4F-4D24-8B8C-0D48796D218E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text  ' "AAA" = "aaa"
Option Explicit

Private Sub UserForm_Initialize()
   With Sheets("Custom")
      btnSnap1.Caption = .Range("R1").Value
      chkSnap1Hide.Value = .Range("T1").Value
      txtSnap1.Text = .Shapes("boxSnap1").TextFrame.Characters.Text
      btnSnap1color.BackColor = .Shapes("boxSnap1").TextFrame.Characters.Font.Color
      lblSnap1.ForeColor = .Shapes("boxSnap1").TextFrame.Characters.Font.Color

      btnSnap2.Caption = .Range("V1").Value
      chkSnap2Hide.Value = .Range("X1").Value
      txtSnap2.Text = .Shapes("boxSnap2").TextFrame.Characters.Text
      btnSnap2color.BackColor = .Shapes("boxSnap2").TextFrame.Characters.Font.Color
      lblSnap2.ForeColor = .Shapes("boxSnap2").TextFrame.Characters.Font.Color

      btnSnap3.Caption = .Range("Z1").Value
      chkSnap3Hide.Value = .Range("AB1").Value
      txtSnap3.Text = .Shapes("boxSnap3").TextFrame.Characters.Text
      btnSnap3color.BackColor = .Shapes("boxSnap3").TextFrame.Characters.Font.Color
      lblSnap3.ForeColor = .Shapes("boxSnap3").TextFrame.Characters.Font.Color

      btnSnap4.Caption = .Range("AD1").Value
      chkSnap4Hide.Value = .Range("AF1").Value
      txtSnap4.Text = .Shapes("boxSnap4").TextFrame.Characters.Text
      btnSnap4color.BackColor = .Shapes("boxSnap4").TextFrame.Characters.Font.Color
      lblSnap4.ForeColor = .Shapes("boxSnap4").TextFrame.Characters.Font.Color
   End With
   
   'For any existing snapshots, make visible the Description box and Hide box.
   If btnSnap1.Caption = "Erase Snapshot" Then
      txtSnap1.Visible = True
      chkSnap1Hide.Visible = True
      If Not chkSnap1Hide Then btnSnap1color.Visible = True
   End If
   If btnSnap2.Caption = "Erase Snapshot" Then
      txtSnap2.Visible = True
      chkSnap2Hide.Visible = True
      If Not chkSnap2Hide Then btnSnap2color.Visible = True
   End If
   If btnSnap3.Caption = "Erase Snapshot" Then
      txtSnap3.Visible = True
      chkSnap3Hide.Visible = True
      If Not chkSnap3Hide Then btnSnap3color.Visible = True
   End If
   If btnSnap4.Caption = "Erase Snapshot" Then
      txtSnap4.Visible = True
      chkSnap4Hide.Visible = True
      If Not chkSnap4Hide Then btnSnap4color.Visible = True
   End If
   
   'Recall combo box entries.
   cboRecall.List = Array("Snap 1", "Snap 2", "Snap 3", "Snap 4")
   
   'If no secondary trace currently shown, disable "Take Snapshot" 3/4
   'and do not allow external file recall to Snaps 3/4.
   If Sheets("Custom").DropDowns("fcboY2axis").ListIndex = 1 Then  '(none)
      btnSnap3.Enabled = False
      lblSnap3.Enabled = False
      btnSnap4.Enabled = False
      lblSnap4.Enabled = False
      lblNoSnap34.Visible = True
      cboRecall.List = Array("Snap 1", "Snap 2")
   End If
   
   Me.StartUpPosition = 0
   Me.Top = Application.Top + Application.Height - Me.Height - 10
   Me.Left = Application.Left + Application.Width - Me.Width - 10
End Sub

Private Sub btnSnap1_Click()
   Dim wsf As WorksheetFunction
   Set wsf = WorksheetFunction
   With Sheets("Custom")
      If btnSnap1.Caption = "Take Snapshot" Then
         'Transfer current Primary range to the snap and backup ranges.
         Range(.[R2], .[R2].Offset([TCcnt] - 1)).Value = [CustomX].Value
         Range(.[S2], .[S2].Offset([TCcnt] - 1)).Value = [CustomY].Value
         Range(.[T2], .[T2].Offset([TCcnt] - 1)).Value = [CustomX].Value
         Range(.[U2], .[U2].Offset([TCcnt] - 1)).Value = [CustomYorig].Value
         [CustomSnapCnt].Value = [TCcnt].Value
         
         .Columns("R").NumberFormat = [CustomX].NumberFormat
         .Columns("S").NumberFormat = [CustomY].NumberFormat
         .Columns("T").NumberFormat = [CustomX].NumberFormat
         .Columns("U").NumberFormat = [CustomYorig].NumberFormat
         
         With .ChartObjects(1).Chart
            'Set series name for use in legend box.
            On Error Resume Next  'in case scales locked in a way to hide entire series
            .SeriesCollection(2).Name = .SeriesCollection(1).Name
            On Error GoTo 0
            txtSnap1.Text = .Axes(xlValue).AxisTitle.Caption & "  (left scale)"
         End With
         SyncDotsWeights
         
         txtSnap1.Visible = True
         .Shapes("boxSnap1").TextFrame.Characters.Text = txtSnap1.Text
         .Shapes("boxSnap1").Visible = True
         chkSnap1Hide.Value = False
         chkSnap1Hide.Visible = True
         txtSnap1.SetFocus
         txtSnap1.SelStart = 0
         txtSnap1.SelLength = 99
         
         btnSnap1.Caption = "Erase Snapshot"
         btnSnap1color.Visible = True
         
      Else  '"Erase Snapshot"
         'Reset series name just to avoid confusion when debugging.
         On Error Resume Next  'in case series hidden when erased
         .ChartObjects(1).Chart.SeriesCollection(2).Name = "Snapshot 1"
         On Error GoTo 0
         'Clear all snapshot and backup points.
         .Range("R2:U65536").ClearContents
         [CustomSnapCnt].Value = 1  'not zero, used for chart series ranges
         
         btnSnap1.Caption = "Take Snapshot"
         txtSnap1.Visible = False
         chkSnap1Hide.Visible = False
         chkSnap1Hide.Value = False
         btnSnap1color.Visible = False
         
         .Shapes("boxSnap1").TextFrame.Characters.Text = " "
         .Shapes("boxSnap1").Visible = False
      End If
      If .ChartObjects(1).Chart.HasLegend Then RebuildLegend
   End With
End Sub

Private Sub btnSnap2_Click()
   Dim wsf As WorksheetFunction
   Set wsf = WorksheetFunction
   With Sheets("Custom")
      If btnSnap2.Caption = "Take Snapshot" Then
         'Transfer current Primary range to the snap and backup ranges.
         Range(.[V2], .[V2].Offset([TCcnt] - 1)).Value = [CustomX].Value
         Range(.[w2], .[w2].Offset([TCcnt] - 1)).Value = [CustomY].Value
         Range(.[X2], .[X2].Offset([TCcnt] - 1)).Value = [CustomX].Value
         Range(.[Y2], .[Y2].Offset([TCcnt] - 1)).Value = [CustomYorig].Value
         [CustomSnap2Cnt].Value = [TCcnt].Value
         
         .Columns("V").NumberFormat = [CustomX].NumberFormat
         .Columns("W").NumberFormat = [CustomY].NumberFormat
         .Columns("X").NumberFormat = [CustomX].NumberFormat
         .Columns("Y").NumberFormat = [CustomYorig].NumberFormat
         
         With .ChartObjects(1).Chart
            'Set series name for use in legend box.
            On Error Resume Next  'in case scales locked in a way to hide entire series
            .SeriesCollection(3).Name = .SeriesCollection(1).Name
            On Error GoTo 0
            txtSnap2.Text = .Axes(xlValue).AxisTitle.Caption & "  (left scale)"
         End With
         SyncDotsWeights
         
         txtSnap2.Visible = True
         .Shapes("boxSnap2").TextFrame.Characters.Text = txtSnap2.Text
         .Shapes("boxSnap2").Visible = True
         chkSnap2Hide.Value = False
         chkSnap2Hide.Visible = True
         txtSnap2.SetFocus
         txtSnap2.SelStart = 0
         txtSnap2.SelLength = 99
         
         btnSnap2.Caption = "Erase Snapshot"
         btnSnap2color.Visible = True
         
      Else  '"Erase Snapshot"
         'Reset series name just to avoid confusion when debugging.
         On Error Resume Next  'in case series hidden when erased
         .ChartObjects(1).Chart.SeriesCollection(3).Name = "Snapshot 2"
         On Error GoTo 0
         'Clear all snapshot and backup points.
         .Range("V2:Y65536").ClearContents
         [CustomSnap2Cnt].Value = 1  'not zero, used for chart series ranges
         
         btnSnap2.Caption = "Take Snapshot"
         txtSnap2.Visible = False
         chkSnap2Hide.Visible = False
         chkSnap2Hide.Value = False
         btnSnap2color.Visible = False
         
         .Shapes("boxSnap2").TextFrame.Characters.Text = " "
         .Shapes("boxSnap2").Visible = False
      End If
      If .ChartObjects(1).Chart.HasLegend Then RebuildLegend
   End With
End Sub

Private Sub btnSnap3_Click()
   Dim wsf As WorksheetFunction
   Set wsf = WorksheetFunction
   With Sheets("Custom")
      If btnSnap3.Caption = "Take Snapshot" Then
         'Transfer current Secondary range to the snap and backup ranges.
         Range(.[Z2], .[Z2].Offset([TCcnt] - 1)).Value = [CustomX].Value
         Range(.[AA2], .[AA2].Offset([TCcnt] - 1)).Value = [CustomY2].Value
         Range(.[AB2], .[AB2].Offset([TCcnt] - 1)).Value = [CustomX].Value
         Range(.[AC2], .[AC2].Offset([TCcnt] - 1)).Value = [CustomY2orig].Value
         [CustomSnap3Cnt].Value = [TCcnt].Value
         
         .Columns("Z").NumberFormat = [CustomX].NumberFormat
         .Columns("AA").NumberFormat = [CustomY2].NumberFormat
         .Columns("AB").NumberFormat = [CustomX].NumberFormat
         .Columns("AC").NumberFormat = [CustomY2orig].NumberFormat
         
         With .ChartObjects(1).Chart
            'Set series name for use in legend box.
            On Error Resume Next  'in case scales locked in a way to hide entire series
            .SeriesCollection(5).Name = .SeriesCollection(4).Name
            On Error GoTo 0
            txtSnap3.Text = .Axes(xlValue, xlSecondary).AxisTitle.Caption & "  (right scale)"
         End With
         SyncDotsWeights
         
         txtSnap3.Visible = True
         .Shapes("boxSnap3").TextFrame.Characters.Text = txtSnap3.Text
         .Shapes("boxSnap3").Visible = True
         chkSnap3Hide.Value = False
         chkSnap3Hide.Visible = True
         txtSnap3.SetFocus
         txtSnap3.SelStart = 0
         txtSnap3.SelLength = 99
         
         btnSnap3.Caption = "Erase Snapshot"
         btnSnap3color.Visible = True
         
      Else  '"Erase Snapshot"
         'Reset series name just to avoid confusion when debugging.
         On Error Resume Next  'in case series hidden when erased
         .ChartObjects(1).Chart.SeriesCollection(5).Name = "Snapshot 3"
         On Error GoTo 0
         'Clear all snapshot and backup points.
         .Range("Z2:AC65536").ClearContents
         [CustomSnap3Cnt].Value = 1  'not zero, used for chart series ranges
         
         btnSnap3.Caption = "Take Snapshot"
         txtSnap3.Visible = False
         chkSnap3Hide.Visible = False
         chkSnap3Hide.Value = False
         btnSnap3color.Visible = False
         
         .Shapes("boxSnap3").TextFrame.Characters.Text = " "
         .Shapes("boxSnap3").Visible = False
      End If
      If .ChartObjects(1).Chart.HasLegend Then RebuildLegend
   End With
End Sub

Private Sub btnSnap4_Click()
   Dim wsf As WorksheetFunction
   Set wsf = WorksheetFunction
   With Sheets("Custom")
      If btnSnap4.Caption = "Take Snapshot" Then
         'Transfer current Secondary range to the snap and backup ranges.
         Range(.[AD2], .[AD2].Offset([TCcnt] - 1)).Value = [CustomX].Value
         Range(.[AE2], .[AE2].Offset([TCcnt] - 1)).Value = [CustomY2].Value
         Range(.[AF2], .[AF2].Offset([TCcnt] - 1)).Value = [CustomX].Value
         Range(.[AG2], .[AG2].Offset([TCcnt] - 1)).Value = [CustomY2orig].Value
         [CustomSnap4Cnt].Value = [TCcnt].Value
         
         .Columns("AD").NumberFormat = [CustomX].NumberFormat
         .Columns("AE").NumberFormat = [CustomY2].NumberFormat
         .Columns("AF").NumberFormat = [CustomX].NumberFormat
         .Columns("AG").NumberFormat = [CustomY2orig].NumberFormat
         
         With .ChartObjects(1).Chart
            'Set series name for use in legend box.
            On Error Resume Next  'in case scales locked in a way to hide entire series
            .SeriesCollection(6).Name = .SeriesCollection(4).Name
            On Error GoTo 0
            txtSnap4.Text = .Axes(xlValue, xlSecondary).AxisTitle.Caption & "  (right scale)"
         End With
         SyncDotsWeights
         
         txtSnap4.Visible = True
         .Shapes("boxSnap4").TextFrame.Characters.Text = txtSnap4.Text
         .Shapes("boxSnap4").Visible = True
         chkSnap4Hide.Value = False
         chkSnap4Hide.Visible = True
         txtSnap4.SetFocus
         txtSnap4.SelStart = 0
         txtSnap4.SelLength = 99
         
         btnSnap4.Caption = "Erase Snapshot"
         btnSnap4color.Visible = True
         
      Else  '"Erase Snapshot"
         'Reset series name just to avoid confusion when debugging.
         On Error Resume Next  'in case series hidden when erased
         .ChartObjects(1).Chart.SeriesCollection(6).Name = "Snapshot 4"
         On Error GoTo 0
         'Clear all snapshot and backup points.
         .Range("AD2:AG65536").ClearContents
         [CustomSnap4Cnt].Value = 1  'not zero, used for chart series ranges
         
         btnSnap4.Caption = "Take Snapshot"
         txtSnap4.Visible = False
         chkSnap4Hide.Visible = False
         chkSnap4Hide.Value = False
         btnSnap4color.Visible = False
         
         .Shapes("boxSnap4").TextFrame.Characters.Text = " "
         .Shapes("boxSnap4").Visible = False
      End If
      If .ChartObjects(1).Chart.HasLegend Then RebuildLegend
   End With
End Sub

Private Sub btnSave_Click()
   Dim PrevPath As String
   Dim FileToSaveAs As Variant
   Dim Source As String, Title As String, Envir As String, Notes As String
   Dim PFH As PFHeaderBlock
   Dim PFD As PFDataBlock
   Dim PFC As PFCustomData
   Dim C As Range, sngPt As Single
   Dim wsf As WorksheetFunction
   Set wsf = WorksheetFunction
   
   On Error Resume Next  'Try to pre-set path, but don't fail if not valid
   PrevPath = CurDir
   ChDrive [DirSnapshot].Value
   ChDir [DirSnapshot].Value
   FileToSaveAs = Application.GetSaveAsFilename( _
                  FnOnly([CurFname]), "Custom Chart Trace (*.pfc),*.pfc", , "Save Primary Trace As ...")
   AppActivate "Snapshot Control", False  'reset focus
   DoEvents
   If FileToSaveAs = False Then
      ChDrive PrevPath
      ChDir PrevPath
      Exit Sub
   End If
   'Save user-specified path for next time, then reset to previous (may not have changed).
   [DirSnapshot].Value = Left(FileToSaveAs, MyInStrRev(CStr(FileToSaveAs), "\") - 1)
   ChDrive PrevPath
   ChDir PrevPath
   On Error GoTo 0
   
   If Len(Dir(FileToSaveAs)) > 0 Then Kill FileToSaveAs  'else LOF does not change
   Open FileToSaveAs For Binary Access Write As #1
   Source = "MultiNEC v. 2"  'allow exchange with MultiNEC traces
   Title = "Created from AIM_Charts"
   Envir = ""
   Notes = [CustomYtitle].Value & "   " & Dir(FileToSaveAs)
   PFH.Version = 16
   PFH.SourceLen = Len(Source)
   PFH.TitleLen = Len(Title)
   PFH.EnvirLen = Len(Envir)
   PFH.NotesLen = Len(Notes)
   PFH.HeaderLen = 8 + PFH.SourceLen + PFH.TitleLen + PFH.EnvirLen + PFH.NotesLen
   Put #1, , PFH
   Put #1, , Source
   Put #1, , Title
   Put #1, , Envir
   Put #1, , Notes
   
   PFC.NumberFormatX = [TCFreq].Offset(1, 0).NumberFormat
   PFC.NumberFormatY = [TCFreq].Offset(1, [CustomYoff]).NumberFormat
   PFC.NumPoints = [TCcnt].Value
   PFD.BlockType = 130  'not a standard type
   PFD.BlockLen = 3 + Len(PFC) + (8 * PFC.NumPoints)
   Put #1, , PFD
   Put #1, , PFC
   For Each C In [CustomX]
      sngPt = CSng(C.Value)
      Put #1, , sngPt
   Next C
   For Each C In [CustomYorig]
      sngPt = CSng(C.Value)
      Put #1, , sngPt
   Next C
   
   MsgBox "Trace saved in file '" & FileToSaveAs & "'.", _
          vbOKOnly, "Trace Saved"
   Close #1
End Sub

Private Sub btnRecall_Click()
   Dim PrevPath As String
   Dim FileToOpen As Variant
   Dim Source As String, Title As String, Envir As String, Notes As String
   Dim PFH As PFHeaderBlock
   Dim PFD As PFDataBlock
   Dim PFC As PFCustomData
   Dim DataPoints() As Single
   Dim pt As Integer
   Dim rngXchart As Range, rngXbackup As Range
   Dim rngYchart As Range, rngYbackup As Range
   Dim sc As Integer
   
   On Error Resume Next  'Try to pre-set path, but don't fail if not valid
   PrevPath = CurDir
   ChDrive [DirSnapshot].Value
   ChDir [DirSnapshot].Value
   FileToOpen = Application.GetOpenFilename( _
                "Custom Chart Trace (*.pfc),*.pfc", , _
                "Recall Trace to " & cboRecall.Text & " Position")
   AppActivate "Snapshot Control", False  'reset focus
   DoEvents
   If FileToOpen = False Then
      ChDrive PrevPath
      ChDir PrevPath
      Exit Sub
   End If
   'Save user-specified path for next time, then reset to previous (may not have changed).
   [DirSnapshot].Value = Left(FileToOpen, MyInStrRev(CStr(FileToOpen), "\") - 1)
   ChDrive PrevPath
   ChDir PrevPath
   On Error GoTo 0
   
   With Sheets("Custom")
      Open FileToOpen For Binary Access Read As #1
      Get #1, , PFH
      On Error Resume Next
      Source = String(PFH.SourceLen, " ")
      Get #1, , Source
      If Left(Source, 8) <> "MultiNEC" Then Err.Number = 1
      If Err.Number > 0 Then
         MsgBox "File" & vbLf & FileToOpen & vbLf & _
                "is not a recognized Custom Chart trace file.  Nothing recalled.", _
                vbExclamation, "Invalid File"
         Close #1
         Exit Sub
      End If
      Title = String(PFH.TitleLen, " ")
      Envir = String(PFH.EnvirLen, " ")
      Notes = String(PFH.NotesLen, " ")
      Get #1, , Title
      Get #1, , Envir
      Get #1, , Notes
      Seek #1, 1 + PFH.HeaderLen
      Select Case cboRecall.Text
         Case "Snap 1"
            Set rngXchart = .[R2]
            Set rngYchart = .[S2]
            Set rngXbackup = .[T2]
            Set rngYbackup = .[U2]
            sc = 2
         Case "Snap 2"
            Set rngXchart = .[V2]
            Set rngYchart = .[w2]
            Set rngXbackup = .[X2]
            Set rngYbackup = .[Y2]
            sc = 3
         Case "Snap 3"
            Set rngXchart = .[Z2]
            Set rngYchart = .[AA2]
            Set rngXbackup = .[AB2]
            Set rngYbackup = .[AC2]
            sc = 5
         Case Else
            Set rngXchart = .[AD2]
            Set rngYchart = .[AE2]
            Set rngXbackup = .[AF2]
            Set rngYbackup = .[AG2]
            sc = 6
      End Select
      
      Get #1, , PFD
      If PFD.BlockType <> 130 Then
         MsgBox "File" & vbLf & FileToOpen & vbLf & _
                "is not a recognized Custom Chart trace file.  Nothing recalled.", _
                vbExclamation, "Invalid File"
         Close #1
         Exit Sub
      End If
      On Error GoTo 0
      Application.ScreenUpdating = False
      Application.Calculation = xlCalculationManual
      
      Get #1, , PFC
      ReDim DataPoints(1 To PFC.NumPoints)
      Get #1, , DataPoints
      For pt = 1 To PFC.NumPoints
         rngXchart.Cells(pt).Value = DataPoints(pt)
         rngXbackup.Cells(pt).Value = DataPoints(pt)
      Next pt
      Get #1, , DataPoints
      For pt = 1 To PFC.NumPoints
         '''rngYchart.Cells(pt).Value = DataPoints(pt)
         rngYbackup.Cells(pt).Value = DataPoints(pt)
      Next pt
      Close #1
      
      'Transfer values for plotting.
      Dim sht As Worksheet
      Set sht = ActiveWorkbook.ActiveSheet
      Dim rngFrom As Range, rngTo As Range
      
      Set rngFrom = sht.Range(rngYbackup, rngYbackup.Offset(PFC.NumPoints - 1))
      Set rngTo = rngFrom.Offset(, -2)
      TransferYrange rngFrom, rngTo
   
      Select Case cboRecall.Value
         Case "Snap 1"
            [CustomSnapCnt].Value = PFC.NumPoints
            .Columns("R").NumberFormat = Trim(PFC.NumberFormatX)
            .Columns("S").NumberFormat = Trim(PFC.NumberFormatY)
            .Columns("T").NumberFormat = Trim(PFC.NumberFormatX)
            .Columns("U").NumberFormat = Trim(PFC.NumberFormatY)
            txtSnap1.Text = Notes
            txtSnap1.Visible = True
            .Shapes("boxSnap1").TextFrame.Characters.Text = txtSnap1.Text
            .Shapes("boxSnap1").Visible = True
            chkSnap1Hide.Value = False
            chkSnap1Hide.Visible = True
            btnSnap1.Caption = "Erase Snapshot"
            
         Case "Snap 2"
            [CustomSnap2Cnt].Value = PFC.NumPoints
            .Columns("V").NumberFormat = Trim(PFC.NumberFormatX)
            .Columns("W").NumberFormat = Trim(PFC.NumberFormatY)
            .Columns("X").NumberFormat = Trim(PFC.NumberFormatX)
            .Columns("Y").NumberFormat = Trim(PFC.NumberFormatY)
            txtSnap2.Text = Notes
            txtSnap2.Visible = True
            .Shapes("boxSnap2").TextFrame.Characters.Text = txtSnap2.Text
            .Shapes("boxSnap2").Visible = True
            chkSnap2Hide.Value = False
            chkSnap2Hide.Visible = True
            btnSnap2.Caption = "Erase Snapshot"
            
         Case "Snap 3"
            [CustomSnap3Cnt].Value = PFC.NumPoints
            .Columns("Z").NumberFormat = Trim(PFC.NumberFormatX)
            .Columns("AA").NumberFormat = Trim(PFC.NumberFormatY)
            .Columns("AB").NumberFormat = Trim(PFC.NumberFormatX)
            .Columns("AC").NumberFormat = Trim(PFC.NumberFormatY)
            txtSnap3.Text = Notes
            txtSnap3.Visible = True
            .Shapes("boxSnap3").TextFrame.Characters.Text = txtSnap3.Text
            .Shapes("boxSnap3").Visible = True
            chkSnap3Hide.Value = False
            chkSnap3Hide.Visible = True
            btnSnap3.Caption = "Erase Snapshot"
            
         Case Else
            [CustomSnap4Cnt].Value = PFC.NumPoints
            .Columns("AD").NumberFormat = Trim(PFC.NumberFormatX)
            .Columns("AE").NumberFormat = Trim(PFC.NumberFormatY)
            .Columns("AF").NumberFormat = Trim(PFC.NumberFormatX)
            .Columns("AG").NumberFormat = Trim(PFC.NumberFormatY)
            txtSnap4.Text = Notes
            txtSnap4.Visible = True
            .Shapes("boxSnap4").TextFrame.Characters.Text = txtSnap4.Text
            .Shapes("boxSnap4").Visible = True
            chkSnap4Hide.Value = False
            chkSnap4Hide.Visible = True
            btnSnap4.Caption = "Erase Snapshot"
      End Select
      Application.ScreenUpdating = True
      Application.Calculation = xlCalculationAutomatic
      
      'Set series name for use in legend box.
      On Error Resume Next  'in case scales locked in a way to hide entire series
      .ChartObjects(1).Chart.SeriesCollection(sc).Name = "Recalled"
      On Error GoTo 0
      SyncDotsWeights
      If .ChartObjects(1).Chart.HasLegend Then RebuildLegend
   End With
End Sub

Private Sub chkSnap1Hide_Change()
   If Not chkSnap1Hide.Visible Then Exit Sub  'avoid any action on "Erase Snapshot"
   With Sheets("Custom")
      If chkSnap1Hide Then
         'Hide trace by clearing Y values for chart series range, but
         'don't change the count or the backup copy.
         [CustomSnapY].ClearContents
         .Shapes("boxSnap1").Visible = False
         btnSnap1color.Visible = False
      Else
         'Show trace by copying data from backup into chart series range.
         TransferYrange [CustomSnapY].Offset(, 2), [CustomSnapY]
         SyncDotsWeights
         .Shapes("boxSnap1").Visible = True
         btnSnap1color.Visible = True
      End If
      If .ChartObjects(1).Chart.HasLegend Then RebuildLegend
   End With
End Sub

Private Sub chkSnap2Hide_Change()
   If Not chkSnap2Hide.Visible Then Exit Sub  'avoid any action on "Erase Snapshot"
   With Sheets("Custom")
      If chkSnap2Hide Then
         'Hide trace by clearing Y values for chart series range, but
         'don't change the count or the backup copy.
         [CustomSnap2Y].ClearContents
         .Shapes("boxSnap2").Visible = False
         btnSnap2color.Visible = False
      Else
         'Show trace by copying data from backup into chart series range.
         TransferYrange [CustomSnap2Y].Offset(, 2), [CustomSnap2Y]
         SyncDotsWeights
         .Shapes("boxSnap2").Visible = True
         btnSnap2color.Visible = True
      End If
      If .ChartObjects(1).Chart.HasLegend Then RebuildLegend
   End With
End Sub

Private Sub chkSnap3Hide_Change()
   If Not chkSnap3Hide.Visible Then Exit Sub  'avoid any action on "Erase Snapshot"
   With Sheets("Custom")
      If chkSnap3Hide Then
         'Hide trace by clearing Y values for chart series range, but
         'don't change the count or the backup copy.
         [CustomSnap3Y].ClearContents
         .Shapes("boxSnap3").Visible = False
         btnSnap3color.Visible = False
      Else
         'Show trace by copying data from backup into chart series range.
         TransferYrange [CustomSnap3Y].Offset(, 2), [CustomSnap3Y], xlSecondary
         SyncDotsWeights
         .Shapes("boxSnap3").Visible = True
         btnSnap3color.Visible = True
      End If
      If .ChartObjects(1).Chart.HasLegend Then RebuildLegend
   End With
End Sub

Private Sub chkSnap4Hide_Change()
   If Not chkSnap4Hide.Visible Then Exit Sub  'avoid any action on "Erase Snapshot"
   With Sheets("Custom")
      If chkSnap4Hide Then
         'Hide trace by clearing Y values for chart series range, but
         'don't change the count or the backup copy.
         [CustomSnap4Y].ClearContents
         .Shapes("boxSnap4").Visible = False
         btnSnap4color.Visible = False
      Else
         'Show trace by copying data from backup into chart series range.
         TransferYrange [CustomSnap4Y].Offset(, 2), [CustomSnap4Y], xlSecondary
         SyncDotsWeights
         .Shapes("boxSnap4").Visible = True
         btnSnap4color.Visible = True
      End If
      If .ChartObjects(1).Chart.HasLegend Then RebuildLegend
   End With
End Sub

Private Sub btnSnap1color_Click()
   Dim CI As Long
   Dim vResponse As Variant
   
   With ActiveSheet
      CI = .Shapes("boxSnap1").TextFrame.Characters.Font.ColorIndex
      .Range("D4").Activate
      vResponse = Application.Dialogs(xlDialogPatterns).Show(xlSolid, CI, CI)
      AppActivate Me.Caption
      If vResponse = False Then Exit Sub  'Cancel pressed
      CI = .Range("D4").Interior.ColorIndex
      If CI = xlNone Then Exit Sub  '"No Color" - invalid choice
      .Shapes("boxSnap1").TextFrame.Characters.Font.ColorIndex = CI
      btnSnap1color.BackColor = .Range("D4").Interior.Color
      lblSnap1.ForeColor = .Range("D4").Interior.Color
      On Error Resume Next  'in case series not visible for any reason
      With .ChartObjects(1).Chart.SeriesCollection(2)  'Snap1
         .Border.ColorIndex = CI
         If .MarkerStyle <> xlNone Then .MarkerBackgroundColorIndex = CI
      End With
   End With
End Sub

Private Sub btnSnap2color_Click()
   Dim CI As Long
   Dim vResponse As Variant
   
   With ActiveSheet
      CI = .Shapes("boxSnap2").TextFrame.Characters.Font.ColorIndex
      .Range("D4").Activate
      vResponse = Application.Dialogs(xlDialogPatterns).Show(xlSolid, CI, CI)
      AppActivate Me.Caption
      If vResponse = False Then Exit Sub  'Cancel pressed
      CI = .Range("D4").Interior.ColorIndex
      If CI = xlNone Then Exit Sub  '"No Color" - invalid choice
      .Shapes("boxSnap2").TextFrame.Characters.Font.ColorIndex = CI
      btnSnap2color.BackColor = .Range("D4").Interior.Color
      lblSnap2.ForeColor = .Range("D4").Interior.Color
      On Error Resume Next  'in case series not visible for any reason
      With .ChartObjects(1).Chart.SeriesCollection(3)  'Snap2
         .Border.ColorIndex = CI
         If .MarkerStyle <> xlNone Then .MarkerBackgroundColorIndex = CI
      End With
   End With
End Sub

Private Sub btnSnap3color_Click()
   Dim CI As Long
   Dim vResponse As Variant
   
   With ActiveSheet
      CI = .Shapes("boxSnap3").TextFrame.Characters.Font.ColorIndex
      .Range("D4").Activate
      vResponse = Application.Dialogs(xlDialogPatterns).Show(xlSolid, CI, CI)
      AppActivate Me.Caption
      If vResponse = False Then Exit Sub  'Cancel pressed
      CI = .Range("D4").Interior.ColorIndex
      If CI = xlNone Then Exit Sub  '"No Color" - invalid choice
      .Shapes("boxSnap3").TextFrame.Characters.Font.ColorIndex = CI
      btnSnap3color.BackColor = .Range("D4").Interior.Color
      lblSnap3.ForeColor = .Range("D4").Interior.Color
      On Error Resume Next  'in case series not visible for any reason
      With .ChartObjects(1).Chart.SeriesCollection(5)  'Snap3
         .Border.ColorIndex = CI
         If .MarkerStyle <> xlNone Then .MarkerBackgroundColorIndex = CI
      End With
   End With
End Sub

Private Sub btnSnap4color_Click()
   Dim CI As Long
   Dim vResponse As Variant
   
   With ActiveSheet
      CI = .Shapes("boxSnap4").TextFrame.Characters.Font.ColorIndex
      .Range("D4").Activate
      vResponse = Application.Dialogs(xlDialogPatterns).Show(xlSolid, CI, CI)
      AppActivate Me.Caption
      If vResponse = False Then Exit Sub  'Cancel pressed
      CI = .Range("D4").Interior.ColorIndex
      If CI = xlNone Then Exit Sub  '"No Color" - invalid choice
      .Shapes("boxSnap4").TextFrame.Characters.Font.ColorIndex = CI
      btnSnap4color.BackColor = .Range("D4").Interior.Color
      lblSnap4.ForeColor = .Range("D4").Interior.Color
      On Error Resume Next  'in case series not visible for any reason
      With .ChartObjects(1).Chart.SeriesCollection(6)  'Snap4
         .Border.ColorIndex = CI
         If .MarkerStyle <> xlNone Then .MarkerBackgroundColorIndex = CI
      End With
   End With
End Sub

Private Sub btnOK_Click()
   Unload Me
End Sub

Private Sub btnCancel_Click()
   'Empty caption, size 0 x 0, Cancel=True.
   'Just serves as a vehicle for the Esc key.
   Unload Me
End Sub

Private Sub UserForm_Terminate()
   With Sheets("Custom")
      .Range("R1").Value = btnSnap1.Caption
      .Range("T1").Value = chkSnap1Hide.Value
      If btnSnap1.Caption = "Erase Snapshot" Then
         'Snapshot is present.
         If txtSnap1.Text = "" Then
            .Shapes("boxSnap1").TextFrame.Characters.Text = "Snapshot 1"   'cleared by user, show this
         Else
            .Shapes("boxSnap1").TextFrame.Characters.Text = txtSnap1.Text  'set by user, show text from box
         End If
      End If

      .Range("V1").Value = btnSnap2.Caption
      .Range("X1").Value = chkSnap2Hide.Value
      If btnSnap2.Caption = "Erase Snapshot" Then
         'Snapshot is present.
         If txtSnap2.Text = "" Then
            .Shapes("boxSnap2").TextFrame.Characters.Text = "Snapshot 2"   'cleared by user, show this
         Else
            .Shapes("boxSnap2").TextFrame.Characters.Text = txtSnap2.Text  'set by user, show text from box
         End If
      End If

      .Range("Z1").Value = btnSnap3.Caption
      .Range("AB1").Value = chkSnap3Hide.Value
      If btnSnap3.Caption = "Erase Snapshot" Then
         'Snapshot is present.
         If txtSnap3.Text = "" Then
            .Shapes("boxSnap3").TextFrame.Characters.Text = "Snapshot 3"   'cleared by user, show this
         Else
            .Shapes("boxSnap3").TextFrame.Characters.Text = txtSnap3.Text  'set by user, show text from box
         End If
      End If

      .Range("AD1").Value = btnSnap4.Caption
      .Range("AF1").Value = chkSnap4Hide.Value
      If btnSnap4.Caption = "Erase Snapshot" Then
         'Snapshot is present.
         If txtSnap4.Text = "" Then
            .Shapes("boxSnap4").TextFrame.Characters.Text = "Snapshot 4"   'cleared by user, show this
         Else
            .Shapes("boxSnap4").TextFrame.Characters.Text = txtSnap4.Text  'set by user, show text from box
         End If
      End If
   End With
End Sub
Attribute VB_Name = "frmCustomTraces"
Attribute VB_Base = "0{FEE2722B-3487-4B2F-B105-49262D27034B}{C4B9F523-2309-4C66-9AEA-BDE2027CB440}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim DoChanges As Boolean

Private Sub UserForm_Initialize()
   cboYaxis.List = Sheets("Custom").DropDowns("fcboYaxis").List
   cboYaxis.ListIndex = Sheets("Custom").DropDowns("fcboYaxis").ListIndex - 1
   
   cboY2axis.List = Sheets("Custom").DropDowns("fcboY2axis").List
   cboY2axis.ListIndex = Sheets("Custom").DropDowns("fcboY2axis").ListIndex - 1
   
   DoChanges = True
End Sub

Private Sub cboYaxis_Change()
   If Not DoChanges Then Exit Sub
   
   Sheets("Custom").DropDowns("fcboYaxis").ListIndex = cboYaxis.ListIndex + 1
   fcboYaxis_Change  'also transfers Y range
   
   cboY2axis.SetFocus
   cboY2axis.SelStart = 0
End Sub

Private Sub cboY2axis_Change()
   If Not DoChanges Then Exit Sub
   
   Sheets("Custom").DropDowns("fcboY2axis").ListIndex = cboY2axis.ListIndex + 1
   fcboY2axis_Change  'also transfers Y range
   
   cboYaxis.SetFocus
   cboYaxis.SelStart = 0
End Sub
Attribute VB_Name = "frmGenData"
Attribute VB_Base = "0{F1A967B7-921E-4391-A429-25EAB7BB42C2}{7BAD3F8C-1D1C-4380-B1BC-B450C4FEBCE4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text  ' "AAA" = "aaa"
Option Explicit

Dim Fstart As Double, Fstop As Double, Fstep As Double
Dim NumPoints As Long
  
Dim vZohf As Variant, vVFhf As Variant, vK1 As Variant, vK2 As Variant, vK0 As Variant
Dim LI As Long

Dim StayOpen As Boolean

Private Sub UserForm_Initialize()
   
   mPage.Value = 0  'must set, used by CalcNumPoints
   txt1Fstart = CStr([GenF1start])
   txt1Fstop = CStr([GenF1stop])
   txt1Fstep = CStr([GenF1step])
   txt1Rs = CStr([Gen1Rs])
   txt1Xs = CStr([Gen1Xs])
   
   mPage.Value = 1
   txt2Fstart = CStr([GenF2start])
   txt2Fstop = CStr([GenF2stop])
   txt2Fstep = CStr([GenF2step])
   txt2Rs = CStr([Gen2Rs])
   txt2Ls = CStr([Gen2Ls])
   
   mPage.Value = 2
   txt3Fstart = CStr([GenF3start])
   txt3Fstop = CStr([GenF3stop])
   txt3Fstep = CStr([GenF3step])
   txt3Rp = CStr([Gen3Rp])
   txt3Cp = CStr([Gen3Cp])
   
   mPage.Value = 3
   txt4Fstart = CStr([GenF4start])
   txt4Fstop = CStr([GenF4stop])
   txt4Fstep = CStr([GenF4step])
   txt4Rs = CStr([Gen4Rs])
   txt4Ls = CStr([Gen4Ls])
   txt4Cp = CStr([Gen4Cp])
   CalcFs
   
   mPage.Value = 4
   txt5Fstart = CStr([GenF5start])
   txt5Fstop = CStr([GenF5stop])
   txt5Fstep = CStr([GenF5step])
   txt5Rs = CStr([Gen5Rs])
   txt5Ls = CStr([Gen5Ls])
   txt5Cs = CStr([Gen5Cs])
   txt5Cp = CStr([Gen5Cp])
   CalcFsFp
   
   mPage.Value = 5
   txt6Fstart = CStr([GenF6start])
   txt6Fstop = CStr([GenF6stop])
   txt6Fstep = CStr([GenF6step])
   
   mPage.Value = 6
   txt7Fstart = CStr([GenF7start])
   txt7Fstop = CStr([GenF7stop])
   txt7Fstep = CStr([GenF7step])
   
   mPage.Value = [GenmPage]

   '>>> WARNING <<<     >>> WARNING <<<     >>> WARNING <<<
   'If new specs are added, thus increasing the UBound of all these variant arrays,
   'make a corresponding change in proc ReadData section /Zplots "TL Parms" type file/.
   '
   'Also:  These arrays are duplicated in frmAddSubTL.  Coordinate any changes.
   '>>> WARNING <<<     >>> WARNING <<<     >>> WARNING <<<
              
   'UPDATE Sep/Oct/Nov 2010:
   'Use Chipman/Johnson method to compute RLGC and hence Zo and Gamma at Freq.
   '    See Owen Duffy, http://vk1od.net/transmissionline/concept/mptl.htm
   '    See Johnson, "High Speed Signal Propagation", section 3.1, equations 3.3 and 3.4.
   'Include correction for internal inductance.
   'Include correction for DC resistance.
   'Compute corrected VF at Freq from Gamma.

   cboLineTypes.List = Array( _
         "Andrew Braided CNT-100", "Andrew Braided CNT-195", "Andrew Braided CNT-240", "Andrew Braided CNT-300", "Andrew Braided CNT-400", "Andrew Braided CNT-600", "Andrew Heliax  LDF4-50A", "Andrew Heliax  LDF5-50A", "Andrew Heliax  LDF6-50", "Belden 8215    (RG-6A/U)", "Belden 7915A   (RG-6/HDTV)", "Belden 9116    (RG-6/CATV)", "Belden 8237    (RG-8/U)", "Belden 9251    (RG-8/U)", "Belden 9913    (RG-8/U)", "Belden 9913F7 (RG-8/U)", "Belden 9914    (RG-8/U)", "Belden 9258    (RG-8X)", "Belden 8213    (RG-11/U)", "Belden 8238    (RG-11/U)", _
         "Belden 8261    (RG-11A/U)", "Belden 9212    (RG-11/U)", "Belden 8219    (RG-58A/U)", "Belden 8240    (RG-58A/U)", "Belden 8259    (RG-58A/U)", "Belden 8262    (RG-58C/U)", "Belden 9201    (RG-58/U)", "Belden 8212    (RG-59/U)", "Belden 8241    (RG-59/U)", "Belden 8263    (RG-59B/U)", "Belden 9269    (RG-62A/U)", "Belden 9857    (RG-63/U)", "Belden 83242  (RG-142B/U)", "Belden 7805    (RG-174/U)", "Belden 8216    (RG-174/U)", "Belden 83265  (RG-178B/U)", "Belden 83269  (RG-188A/U)", "Belden 8267    (RG-213/U)", "Belden 8268    (RG-214/U)", "Belden 84303   (RG-303/U)", _
         "Belden 84316   (RG-316/U)", "CommScope 2427K   (RG-8)", "CommScope 3227     (RG-8)", "Davis RF Bury-Flex", "Radioware RG-6", "Radioware RG-8X", "Radioware RG-11", "Radioware RG-58", "Radioware RG-174", "Radioware RG-213", "Radioware RF-9913", "Radioware RF-9914F", "Tandy Cable RG-8X", "Tandy Cable RG-58", "Tandy Cable RG-59", "Times  LMR-100A", "Times  LMR-195", "Times  LMR-200", "Times  LMR-240", "Times  LMR-240-UF", _
         "Times  LMR-240-75", "Times  LMR-300", "Times  LMR-400", "Times  LMR-400-UF", "Times  LMR-400-75", "Times  LMR-500", "Times  LMR-600", "Times  LMR-600-UF", "Times  LMR-600-75", "Times  LMR-900", "Times  LMR-1200", "Times  LMR-1700", "Wireman CQ102     (RG-8)", "Wireman CQ106     (RG-8)", "Wireman CQ1000   (RG-8)", "Wireman CQ116     (RG-8X)", "Wireman CQ117     (RG-8X)", "Wireman CQ118     (RG-8X)", "Wireman CQ124     (RG-58)", "Wireman CQ129FF (RG-58)", _
         "Wireman CQ113     (RG-213)", "Wireman CQ142A   (RG-217)", "UTP Category 3", "UTP Category 5E", "UTP Category 6", "STP-A 150 ohm", "Wireman 551 Ladder Line", "Wireman 552 Ladder Line", "Wireman 553 Ladder Line", "Wireman 554 Ladder Line", "Wireman 551 LL (ice/snow)", "Wireman 552 LL (ice/snow)", "Wireman 553 LL (ice/snow)", "Wireman 554 LL (ice/snow)", "Generic 300 ohm Tubular", "Generic 450 ohm Window", "Generic 600 ohm Open", "Ideal (lossless) 50 ohm", "Ideal (lossless) 75 ohm", "User spec: Set parms below")

   vZohf = Array( _
         50, 50, 50, 50, 50, 50, 50, 50, 50, 75, 75, 75, 52, 52, 50, 52, 50, 50, 75, 75, _
         75, 76, 53.5, 51.5, 50, 50, 52, 75, 75, 75, 90, 125, 50, 50, 50, 50, 50, 50, 50, 50, _
         50, 50, 50, 50, 75, 50, 75, 50, 50, 50, 50, 50, 50, 50, 75, 50, 50, 50, 50, 50, _
         75, 50, 50, 50, 75, 50, 50, 50, 75, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 52, _
         50, 50, 100, 100, 100, 150, 400, 380, 395, 360, 390, 365, 380, 350, 300, 450, 600, 50, 75, 999)
   vZohf(UBound(vZohf)) = [UserZo]

   vVFhf = Array( _
         0.66, 0.8, 0.83, 0.83, 0.85, 0.87, 0.88, 0.89, 0.89, 0.66, 0.83, 0.83, 0.66, 0.66, 0.84, 0.85, 0.82, 0.82, 0.84, 0.66, _
         0.66, 0.66, 0.73, 0.66, 0.66, 0.66, 0.66, 0.78, 0.66, 0.66, 0.84, 0.84, 0.7, 0.66, 0.66, 0.695, 0.695, 0.66, 0.66, 0.7, _
         0.695, 0.84, 0.84, 0.82, 0.82, 0.78, 0.78, 0.66, 0.66, 0.66, 0.84, 0.83, 0.78, 0.66, 0.66, 0.66, 0.76, 0.83, 0.84, 0.84, _
         0.84, 0.85, 0.85, 0.85, 0.85, 0.86, 0.87, 0.87, 0.87, 0.87, 0.88, 0.89, 0.84, 0.82, 0.85, 0.78, 0.72, 0.8, 0.66, 0.78, _
         0.66, 0.66, 0.61, 0.61, 0.61, 0.61, 0.902, 0.918, 0.902, 0.93, 0.864, 0.883, 0.869, 0.887, 0.8, 0.91, 0.92, 0.66, 0.66, 999)
   vVFhf(UBound(vVFhf)) = [UserVF]

   vK0 = Array( _
         0.352647, 0.108574, 0.062452, 0.039521, 0.026753, 0.015027, 0.008946, 0.005906, 0.003561, 0.375388, 0.063697, 0.615093, 0.025891, 0.025891, 0.402115, 0.02422, 0.019978, 0.066013, 0.190155, 0.042271, _
         0.042271, 0.041715, 0.104718, 0.118904, 0.12942, 0.12942, 0.129453, 0.603418, 0.594885, 0.594885, 0.212804, 0.147313, 0.187615, 0.35699, 2.156088, 3.098352, 0.865983, 0.256179, 0.020846, 0.178929, _
         1.189647, 0.020151, 0.020151, 0.025189, 0.063697, 0.466609, 0.178674, 0.12942, 2.108132, 0.025189, 0.186127, 0.298145, 0.069487, 0.138974, 0.19109, 0.786073, 0.108574, 0.089117, 0.061583, 0.070964, _
         0.08101, 0.03761, 0.026405, 0.023626, 0.024031, 0.018154, 0.015027, 0.014158, 0.014998, 0.009468, 0.005993, 0.004169, 0.023452, 0.025623, 0.025189, 0.066013, 0.066013, 0.063407, 0.255365, 0.126112, _
         1.104626, 0.024494, 0.247548, 0.247548, 0.247548, 0.101335, 0.249956, 0.355771, 0.077708, 0.149143, 0.256365, 0.370392, 0.080775, 0.153404, 0.021715, 0.009651, 0.003619, 0#, 0#, 0)
   vK0(UBound(vK0)) = [UserK0]

   vK1 = Array( _
         0.691672, 0.363325, 0.260761, 0.201307, 0.131386, 0.082774, 0.064142, 0.034825, 0.022861, 0.24666, 0.195292, 0.196584, 0.185562, 0.185562, 0.129373, 0.158114, 0.13942, 0.288776, 0.113867, 0.199492, _
         0.199492, 0.198907, 0.398776, 0.321239, 0.436326, 0.403833, 0.32071, 0.280797, 0.319915, 0.319915, 0.27102, 0.149965, 0.353181, 0.690569, 0.777862, 1.448062, 0.856815, 0.154587, 0.163915, 0.338634, _
         0.800401, 0.136083, 0.123024, 0.154616, 0.196827, 0.316133, 0.130375, 0.403626, 0.86802, 0.199693, 0.123263, 0.140867, 0.316119, 0.378678, 0.300255, 0.709385, 0.358541, 0.326439, 0.239481, 0.293214, _
         0.232188, 0.196637, 0.124805, 0.147204, 0.112936, 0.094339, 0.072828, 0.093622, 0.07023, 0.055074, 0.038836, 0.02222, 0.131438, 0.164155, 0.131439, 0.242334, 0.327886, 0.23948, 0.482485, 0.473162, _
         0.120013, 0.152518, 0.683349, 0.612538, 0.591814, 0.326196, 0.044559, 0.041126, 0.078862, 0.04364, 0.045702, 0.042816, 0.081975, 0.044887, 0.09224, 0.022439, 0.019219, 0#, 0#, 0)
   vK1(UBound(vK1)) = [UserK1]

   vK2 = Array( _
         0.001106, 0.000299, 0#, 0#, 0#, 0.000059, 0.000193, 0.000153, 0.000131, 0.002253, 0.000071, 0.00019, 0.001357, 0.001357, 0.000223, 0#, 0#, 0.002125, 0.001554, 0.00072, _
         0.00072, 0.000803, 0.005265, 0.004695, 0.009218, 0.008761, 0.004718, 0.002069, 0.001754, 0.001754, 0.000073, 0.000989, 0.001996, 0.001356, 0.008695, 0#, 0.001408, 0.003135, 0.002752, 0.003147, _
         0.003536, 0.001562, 0.00046, 0#, 0.000257, 0.003738, 0.001802, 0.008667, 0.002986, 0.002006, 0.000541, 0.000557, 0.002984, 0.003754, 0.000076, 0.001766, 0.000424, 0.000172, 0.000447, 0.000307, _
         0.00026, 0.000181, 0.000187, 0.000315, 0.000374, 0.000332, 0.000353, 0.000237, 0.00026, 0.000065, 0.000143, 0.000275, 0#, 0#, 0#, 0.003309, 0.001195, 0.001934, 0.000295, 0#, _
         0.001291, 0.000171, 0.083457, 0.006121, 0.00036, 0.006211, 0.0012, 0.001, 0.0009, 0.0017, 0.086984, 0.077033, 0.069739, 0.092957, 0.001089, 0.000459, 0.00009, 0#, 0#, 0)
   vK2(UBound(vK2)) = [UserK2]
   
   LI = [TLTypeLI]  'common value used by Add/Subt TL, Gen TL Parms, Gen TL FF
   cboLineTypes.ListIndex = LI  'sets txtZo/VF/K0/K1/K2
   
   txtLen.Value = CStr([TLLen])
   cboLenUnits.List = Array("Feet", "Meters", "Inches", "Millimeters")
   cboLenUnits.Value = [TLUnits]
   
   cboFFLineTypes.List = cboLineTypes.List
   cboFFLineTypes.ListIndex = LI  'sets txtFFZo/FFVF/FFK0/FFK1/FFK2
   
   cboFFLenUnits.List = Array("Feet", "Meters", "Inches", "Millimeters", "Degrees", "Wavelengths")
   cboFFLenUnits.Value = [GenFFUnits]
   
   txtFFFreq = CStr([GenFFFreq])
   cboZIE1.List = Array("At Input - Real & Imag.", "At Input - Mag. & Phase", _
                        "At Load - Real & Imag.", "At Load - Mag. & Phase")
   cboZIE2.List = cboZIE1.List
   cboZIE1.ListIndex = [GenFFZIE1LI]
   cboZIE2.ListIndex = [GenFFZIE2LI]
   If [GenFFoptZIE] = 1 Then
      optZandI = True
   ElseIf [GenFFoptZIE] = 2 Then
      optZandE = True
   Else
      optEandI = True
   End If
   If Len([GenFFPin]) > 0 Then txtPin = CStr([GenFFPin])
   txtZIE1a = CStr([GenFFZIE1a])
   txtZIE1b = CStr([GenFFZIE1b])
   txtZIE2a = CStr([GenFFZIE2a])
   txtZIE2b = CStr([GenFFZIE2b])
   
   Me.StartUpPosition = 0
   Me.Top = Application.Top + 5   'Application.Top + Application.Height - Me.Height - 10
   Me.Left = Application.Left + Application.Width - Me.Width - 5
   If ActiveSheet.Name = "Custom" Then
      If Me.Top > 245 Then Me.Top = 245
      If Me.Left > 570 Then Me.Left = 570
   Else  'Smith or Data
      If Me.Top > 190 Then Me.Top = 190
      If Me.Left > 445 Then Me.Left = 445
      btnScalesGen.Visible = False  'no scales or trace selection with Smith sheet
      btnTracesGen.Visible = False
   End If
   
   If mPage.Value < 6 Then  'not TL FF, shrink form
      fraZIE.Visible = False
      btnOK.Top = 258
      btnCancel.Top = 258
      btnApply.Top = 258
      btnScalesGen.Top = 256
      btnTracesGen.Top = 270
      btnSnapshotsGen.Top = 270
      Me.Height = 315
   Else
      fraZIE.Visible = True
      btnOK.Top = 414
      btnCancel.Top = 414
      btnApply.Top = 414
      btnScalesGen.Top = 412
      btnTracesGen.Top = 426
      btnSnapshotsGen.Top = 426
      Me.Height = 471
   End If
End Sub

Private Sub mPage_Change()
   If mPage.Value < 6 Then  'not TL FF, shrink form
      fraZIE.Visible = False
      btnOK.Top = 258
      btnCancel.Top = 258
      btnApply.Top = 258
      btnScalesGen.Top = 256
      btnTracesGen.Top = 270
      btnSnapshotsGen.Top = 270
      Me.Height = 315
   Else
      fraZIE.Visible = True
      btnOK.Top = 414
      btnCancel.Top = 414
      btnApply.Top = 414
      btnScalesGen.Top = 412
      btnTracesGen.Top = 426
      btnSnapshotsGen.Top = 426
      Me.Height = 471
   End If
End Sub

Private Sub cboLineTypes_Change()
   If cboLineTypes.ListIndex = -1 Then
      MsgBox "Make a selection from the drop down list of available choices.", _
             vbExclamation, "Selection Required for Line Type"
   Else
      LI = cboLineTypes.ListIndex
      txtZo.Value = CStr(vZohf(LI))  'use Cstr to be regionally aware
      txtVF.Value = CStr(vVFhf(LI))
      txtK0.Value = Format(vK0(LI), "0.000000")
      txtK1.Value = Format(vK1(LI), "0.000000")  'use Format for consistent decimals
      txtK2.Value = Format(vK2(LI), "0.000000")
   End If
   On Error Resume Next
   txtZo.SetFocus
   
'''   If txtLen.Value <> "" Then btnApply_Click   'for test and debug only
   
End Sub

Private Sub cboFFLineTypes_Change()
   If cboFFLineTypes.ListIndex = -1 Then
      MsgBox "Make a selection from the drop down list of available choices.", _
             vbExclamation, "Selection Required for Line Type"
   Else
      LI = cboFFLineTypes.ListIndex
      txtFFZo.Value = CStr(vZohf(LI))  'use Cstr to be regionally aware
      txtFFVF.Value = CStr(vVFhf(LI))
      txtFFK0.Value = Format(vK0(LI), "0.000000")
      txtFFK1.Value = Format(vK1(LI), "0.000000")  'use Format for consistent decimals
      txtFFK2.Value = Format(vK2(LI), "0.000000")
   End If
   On Error Resume Next
   txtFFZo.SetFocus
End Sub

Private Sub cboZIE1_Change()
   If cboZIE1.ListIndex = 0 Or cboZIE1.ListIndex = 2 Then  'Real & Imag.
      lblZIE1a.Caption = lblZIE1.Caption & " real"
      lblZIE1b.Caption = lblZIE1.Caption & " imag."
   Else  'Mag. & Phase
      lblZIE1a.Caption = lblZIE1.Caption & " mag."
      lblZIE1b.Caption = lblZIE1.Caption & " phase"
   End If
   If lblZIE1a.Caption = "Z real" Then lblZIE1a.Caption = "R"
   If lblZIE1b.Caption = "Z imag." Then lblZIE1b.Caption = "X"
   If lblZIE1b.Caption = "Z phase" Then lblZIE1b.Caption = "Z angle"
   On Error Resume Next
   txtZIE1a.SetFocus
End Sub

Private Sub cboZIE2_Change()
   If cboZIE2.ListIndex = 0 Or cboZIE2.ListIndex = 2 Then  'Real & Imag.
      lblZIE2a.Caption = lblZIE2.Caption & " real"
      lblZIE2b.Caption = lblZIE2.Caption & " imag."
   Else  'Mag. & Phase
      lblZIE2a.Caption = lblZIE2.Caption & " mag."
      lblZIE2b.Caption = lblZIE2.Caption & " phase"
   End If
   On Error Resume Next
   txtZIE2a.SetFocus
End Sub

Private Sub optZandI_Click()
   lblZIE1.Caption = "Z"
   lblZIE2.Caption = "I"
   cboZIE1_Change  'to reset input box labels
   cboZIE2_Change
End Sub

Private Sub optZandE_Click()
   lblZIE1.Caption = "Z"
   lblZIE2.Caption = "E"
   cboZIE1_Change  'to reset input box labels
   cboZIE2_Change
End Sub

Private Sub optEandI_Click()
   lblZIE1.Caption = "E"
   lblZIE2.Caption = "I"
   cboZIE1_Change  'to reset input box labels
   cboZIE2_Change
End Sub

Private Sub HighLight(boxName As String)
   Me.Controls(boxName).SetFocus
   Me.Controls(boxName).SelStart = 0
   Me.Controls(boxName).SelLength = 99
End Sub

Private Sub btnOK_Click()
   Dim Freq As Double, Rs As Double, Xs As Double
   Dim Rp As Double, Xp As Double, Rs2 As Double, Xp2 As Double
   Dim Ls As Double, Cp As Double, Cs As Double
   Dim txtFstep As String
   Dim ChkVal1 As Double, ChkVal2 As Double, ChkVal3 As Double, ChkVal4 As Double
   Dim LoopCnt As Long
   Dim FileToOpen As String
   Dim mPval As Long
   Dim FreqLen As String
   
   mPval = mPage.Value
   If mPval <> 6 Then
      FreqLen = "frequency"
   Else
      FreqLen = "length"
   End If
   CalcNumPoints  'make sure NumPoints is set for *this* mPage
   
   On Error Resume Next
   
   Fstart = CDbl(Me.Controls("txt" & mPval + 1 & "Fstart"))  'eg "txt1Fstart"
   If Err.Number > 0 Then
      HighLight "txt" & mPval + 1 & "Fstart"
      MsgBox "Invalid Start " & FreqLen & ".", vbOKOnly, "Invalid entry"
      Exit Sub
   End If
   Fstop = CDbl(Me.Controls("txt" & mPval + 1 & "Fstop"))
   If Err.Number > 0 Then
      HighLight "txt" & mPval + 1 & "Fstop"
      MsgBox "Invalid Stop " & FreqLen & ".", vbOKOnly, "Invalid entry"
      Exit Sub
   End If
   
   Dim Exponential As Boolean
   Dim ExpStart As Double
   Dim ExpStop As Double
   Dim ExpStep As Double

   txtFstep = Me.Controls("txt" & mPval + 1 & "Fstep")
   Exponential = False
   If txtFstep = "1p" Or txtFstep = "1e" Then
      Fstop = Fstart
   End If
   If Right(txtFstep, 1) = "p" Then
      Fstep = (Fstop - Fstart) / (CDbl(Left(txtFstep, Len(txtFstep) - 1)) - 1)
   ElseIf Right(txtFstep, 1) = "e" Then
      Exponential = True
      ExpStart = Application.Log10(Fstart)
      ExpStep = (Application.Log10(Fstop) - ExpStart) / (NumPoints - 1)
      Fstep = 1  'not used
   ElseIf Right(txtFstep, 1) = "%" Then
      'Convert '%' entry to equivalent 'p'.
      txtFstep = CStr(CLng(100 / Left(txtFstep, Len(txtFstep) - 1)) + 1) & "p"
      Me.Controls("txt" & mPval + 1 & "Fstep") = txtFstep
      Fstep = (Fstop - Fstart) / (CDbl(Left(txtFstep, Len(txtFstep) - 1)) - 1)
   Else
      Fstep = CDbl(txtFstep)
   End If
   If Fstop = Fstart Then
      Fstep = 1
      ExpStep = 1
      Err.Clear
   End If
   If Err.Number > 0 Then
      HighLight "txt" & mPval + 1 & "Fstep"
      MsgBox "Invalid " & FreqLen & " Step.", vbOKOnly, "Invalid entry"
      Exit Sub
   End If
   
   If Fstop < Fstart Then
      HighLight "txt" & mPval + 1 & "Fstop"
      MsgBox "Stop " & FreqLen & " must be >= Start " & FreqLen & ".", vbOKOnly, "Invalid entry"
      Exit Sub
   End If
   If Fstart < 0 Or (mPval <> 6 And Fstart = 0) Or Fstop <= 0 Or Fstep <= 0 Then
      HighLight "txt" & mPval + 1 & "Fstep"
      MsgBox "Negative or zero " & FreqLen & " Start/Stop/Step not allowed.", vbOKOnly, "Invalid entry"
      Exit Sub
   End If
   If NumPoints > 10001 Then
      If MsgBox("This step size will result in " & NumPoints & " frequencies." & vbLf & _
                "Do you wish to continue?", vbYesNo, "Step size?") = vbNo Then
         HighLight "txt" & mPval + 1 & "Fstep"
         Exit Sub
      End If
   End If
   
   ChkVal3 = 0
   ChkVal4 = 0
   Select Case mPval + 1
      Case 1  'RsXs
         ChkVal1 = CDbl(txt1Rs)
         If Err.Number > 0 Then
            HighLight "txt1Rs"
            MsgBox "Invalid resistance value.", vbOKOnly, "Invalid entry"
            Exit Sub
         End If
         ChkVal2 = CDbl(txt1Xs)
         If Err.Number > 0 Then
            HighLight "txt1Xs"
            MsgBox "Invalid reactance value.", vbOKOnly, "Invalid entry"
            Exit Sub
         End If
         ChkVal2 = 0  'negative okay for Xs
         
      Case 2  'RsLs
         ChkVal1 = CDbl(txt2Rs)
         If Err.Number > 0 Then
            HighLight "txt2Rs"
            MsgBox "Invalid resistance value.", vbOKOnly, "Invalid entry"
            Exit Sub
         End If
         ChkVal2 = CDbl(txt2Ls)
         If Err.Number > 0 Then
            HighLight "txt2Ls"
            MsgBox "Invalid inductance value.", vbOKOnly, "Invalid entry"
            Exit Sub
         End If
         
      Case 3  'RpCp
         ChkVal1 = CDbl(txt3Rp)
         If Err.Number > 0 Then
            HighLight "txt3Rp"
            MsgBox "Invalid resistance value.", vbOKOnly, "Invalid entry"
            Exit Sub
         End If
         ChkVal2 = CDbl(txt3Cp)
         If Err.Number > 0 Then
            HighLight "txt3Cp"
            MsgBox "Invalid capacitance value.", vbOKOnly, "Invalid entry"
            Exit Sub
         End If
         
      Case 4  'Trap - RsLsCp
         ChkVal1 = CDbl(txt4Rs)
         If Err.Number > 0 Then
            HighLight "txt4Rs"
            MsgBox "Invalid resistance value.", vbOKOnly, "Invalid entry"
            Exit Sub
         End If
         ChkVal2 = CDbl(txt4Ls)
         If Err.Number > 0 Then
            HighLight "txt4Ls"
            MsgBox "Invalid inductance value.", vbOKOnly, "Invalid entry"
            Exit Sub
         End If
         ChkVal3 = CDbl(txt4Cp)
         If Err.Number > 0 Then
            HighLight "txt4Cp"
            MsgBox "Invalid capacitance value.", vbOKOnly, "Invalid entry"
            Exit Sub
         End If
         
      Case 5  'Crystal - RsLsCsCp
         ChkVal1 = CDbl(txt5Rs)
         If Err.Number > 0 Then
            HighLight "txt5Rs"
            MsgBox "Invalid resistance value.", vbOKOnly, "Invalid entry"
            Exit Sub
         End If
         ChkVal2 = CDbl(txt5Ls)
         If Err.Number > 0 Then
            HighLight "txt5Ls"
            MsgBox "Invalid inductance value.", vbOKOnly, "Invalid entry"
            Exit Sub
         End If
         ChkVal3 = CDbl(txt5Cs)
         If Err.Number > 0 Then
            HighLight "txt5Cs"
            MsgBox "Invalid capacitance value.", vbOKOnly, "Invalid entry"
            Exit Sub
         End If
         ChkVal4 = CDbl(txt5Cp)
         If Err.Number > 0 Then
            HighLight "txt5Cp"
            MsgBox "Invalid capacitance value.", vbOKOnly, "Invalid entry"
            Exit Sub
         End If
         
      Case 6  'TL Parms
         'Check parms, save if user spec.
         If Not IsNumeric(txtZo) Then
            HighLight "txtZo"
            MsgBox "Zo must be a numeric value greater than 0.", _
                   vbExclamation, "Invalid User Setting"
            Exit Sub
         End If
         If txtZo <= 0 Then
            HighLight "txtZo"
            MsgBox "Zo must be a numeric value greater than 0.", _
                   vbExclamation, "Invalid User Setting"
            Exit Sub
         End If
         If Not IsNumeric(txtVF) Then
            HighLight "txtVF"
            MsgBox "VF must be a numeric value > 0 and <= 1.", _
                   vbExclamation, "Invalid User Setting"
            Exit Sub
         End If
         If txtVF <= 0 Or txtVF > 1 Then
            HighLight "txtVF"
            MsgBox "VF must be a numeric value > 0 and <= 1.", _
                   vbExclamation, "Invalid User Setting"
            Exit Sub
         End If
         If Not IsNumeric(txtK0) Then
            HighLight "txtK0"
            MsgBox "K0 must be a numeric value.", _
                   vbExclamation, "Invalid User Setting"
            Exit Sub
         End If
         If Not IsNumeric(txtK1) Then
            HighLight "txtK1"
            MsgBox "K1 must be a numeric value.", _
                   vbExclamation, "Invalid User Setting"
            Exit Sub
         End If
         If Not IsNumeric(txtK2) Then
            HighLight "txtK2"
            MsgBox "K2 must be a numeric value.", _
                   vbExclamation, "Invalid User Setting"
            Exit Sub
         End If
         'Allow (temporary) override of mfg specs.
         vZohf(LI) = CDbl(txtZo.Value)
         vVFhf(LI) = CDbl(txtVF.Value)
         vK0(LI) = CDbl(txtK0.Value)
         vK1(LI) = CDbl(txtK1.Value)
         vK2(LI) = CDbl(txtK2.Value)
         'Save if user spec.
         If LI = UBound(vZohf) Then
            [UserZo].Value = CDbl(txtZo.Value)
            [UserVF].Value = CDbl(txtVF.Value)
            [UserK0].Value = CDbl(txtK0.Value)
            [UserK1].Value = CDbl(txtK1.Value)
            [UserK2].Value = CDbl(txtK2.Value)
         End If
   
         'Validity checks for length and units.
         If Not IsNumeric(txtLen) Then
            HighLight "txtLen"
            MsgBox "Length must be a numeric value greater than 0.", _
                   vbExclamation, "Invalid Length"
            Exit Sub
         End If
         If CDbl(txtLen) < 0 Then
            HighLight "txtLen"
            MsgBox "Length must be a numeric value greater than 0.", _
                   vbExclamation, "Invalid Length"
            Exit Sub
         End If
         If cboLenUnits.ListIndex = -1 Then
            HighLight "cboLenUnits"
            MsgBox "Make a selection from the drop down list of available choices.", _
                   vbExclamation, "Selection Required for Units"
            Exit Sub
         End If
   
         'All OK, save.
         [TLTypeLI].Value = LI
         [TLLen].Value = CDbl(txtLen.Value)
         [TLUnits].Value = cboLenUnits.Value
         
         ChkVal1 = 0
         ChkVal2 = 0
         
      Case 7  'TL FF
         'Check parms, save if user spec.
         If Not IsNumeric(txtFFZo) Then
            HighLight "txtFFZo"
            MsgBox "Zo must be a numeric value greater than 0.", _
                   vbExclamation, "Invalid User Setting"
            Exit Sub
         End If
         If txtFFZo <= 0 Then
            HighLight "txtFFZo"
            MsgBox "Zo must be a numeric value greater than 0.", _
                   vbExclamation, "Invalid User Setting"
            Exit Sub
         End If
         If Not IsNumeric(txtFFVF) Then
            HighLight "txtFFVF"
            MsgBox "VF must be a numeric value > 0 and <= 1.", _
                   vbExclamation, "Invalid User Setting"
            Exit Sub
         End If
         If txtFFVF <= 0 Or txtFFVF > 1 Then
            HighLight "txtFFVF"
            MsgBox "VF must be a numeric value > 0 and <= 1.", _
                   vbExclamation, "Invalid User Setting"
            Exit Sub
         End If
         If Not IsNumeric(txtFFK0) Then
            HighLight "txtFFK0"
            MsgBox "K0 must be a numeric value.", _
                   vbExclamation, "Invalid User Setting"
            Exit Sub
         End If
         If Not IsNumeric(txtFFK1) Then
            HighLight "txtFFK1"
            MsgBox "K1 must be a numeric value.", _
                   vbExclamation, "Invalid User Setting"
            Exit Sub
         End If
         If Not IsNumeric(txtFFK2) Then
            HighLight "txtFFK2"
            MsgBox "K2 must be a numeric value.", _
                   vbExclamation, "Invalid User Setting"
            Exit Sub
         End If
         'Allow (temporary) override of mfg specs.
         vZohf(LI) = CDbl(txtFFZo.Value)
         vVFhf(LI) = CDbl(txtFFVF.Value)
         vK0(LI) = CDbl(txtFFK0.Value)
         vK1(LI) = CDbl(txtFFK1.Value)
         vK2(LI) = CDbl(txtFFK2.Value)
         'Save if user spec.
         If LI = UBound(vZohf) Then
            [UserZo].Value = CDbl(txtFFZo.Value)
            [UserVF].Value = CDbl(txtFFVF.Value)
            [UserK0].Value = CDbl(txtFFK0.Value)
            [UserK1].Value = CDbl(txtFFK1.Value)
            [UserK2].Value = CDbl(txtFFK2.Value)
         End If
   
         'Validity checks for FF Freq and Length units.
         If Not IsNumeric(txtFFFreq) Then
            HighLight "txtFFFreq"
            MsgBox "Frequency must be a numeric value greater than 0.", _
                   vbExclamation, "Invalid Length"
            Exit Sub
         End If
         If CDbl(txtFFFreq) < 0 Then
            HighLight "txtFFFreq"
            MsgBox "Frequency must be a numeric value greater than 0.", _
                   vbExclamation, "Invalid Length"
            Exit Sub
         End If
         If cboFFLenUnits.ListIndex = -1 Then
            HighLight "cboFFLenUnits"
            MsgBox "Make a selection from the drop down list of available choices.", _
                   vbExclamation, "Selection Required for Units"
            Exit Sub
         End If
         
         'Group check for ZIE entries.
         Dim DummyZIE As Double
         DummyZIE = CDbl(txtZIE1a)
         DummyZIE = CDbl(txtZIE1b)
         DummyZIE = CDbl(txtZIE2a)
         DummyZIE = CDbl(txtZIE2b)
         If Len(txtPin) > 0 Then
            DummyZIE = CDbl(txtPin)
            If DummyZIE = 0 Then txtPin = ""  'clear a 0 entry
            If DummyZIE < 0 Then Err.Number = 1  'if set, Pin must be > 0
         End If
         If Err.Number <> 0 Then
            MsgBox "Invalid entry for one or more ZIE fields.", _
                   vbExclamation, "Invalid Entry"
            Exit Sub
         End If
   
         'All OK, save LI.
         [TLTypeLI].Value = LI
         
         ChkVal1 = 0
         ChkVal2 = 0
   End Select
   If ChkVal1 < 0 Or ChkVal2 < 0 Or ChkVal3 < 0 Or ChkVal4 < 0 Then
      If MsgBox("You have entered a negative value for one" & vbLf & _
                "or more components.  Use with caution." & vbLf & vbLf & _
                "Do you wish to continue?", vbYesNo + vbExclamation + vbDefaultButton2, _
                "Negative component value?") = vbNo Then Exit Sub
   End If
   On Error GoTo 0
   
   If (mPval + 1) < 6 Then
      FileToOpen = ThisWorkbook.Path & "\$Zplots GenData$.csv"
      Open FileToOpen For Output As #1
      Write #1, "Zplots Generic Data"
      Write #1, "Freq(MHz)", "Rs", "Xs"
   ElseIf (mPval + 1) = 6 Then  'TL Parms
      FileToOpen = ThisWorkbook.Path & "\$TL Parms Generated$.csv"
      Open FileToOpen For Output As #1
      Write #1, "Transmission Line Parameters Generated by Zplots"
      Write #1, "Line Type: " & IIf(LI = UBound(vZohf), "User Specified", cboLineTypes.Value)
      Write #1, "Nom. Zo: " & txtZo.Value & "     Nom. VF: " & txtVF.Value & _
                "     K0: " & txtK0.Value & "     K1: " & txtK1.Value & "     K2: " & txtK2.Value & _
                "     Length: " & txtLen.Value & " " & cboLenUnits.Value
      Write #1,  'this row empty for generated TL Parms
      Write #1, "Freq(MHz)", "|Zo|", "Ro", "Xo", "VF", _
                "Loss(dB)", "Loss/100ft", "Loss/100m", "|S21|(dB)", _
                "DistR(ft)", "DistL(ft)", "DistG(ft)", "DistC(ft)", _
                "DistR(m)", "DistL(m)", "DistG(m)", "DistC(m)", "Delay(ns)"
   Else  'TL FF
      Dim LenUnitsShort As String
      Select Case cboFFLenUnits
         Case "Feet"
            LenUnitsShort = "ft"
         Case "Meters"
            LenUnitsShort = "m"
         Case "Inches"
            LenUnitsShort = "in"
         Case "Millimeters"
            LenUnitsShort = "mm"
         Case "Wavelengths"
            LenUnitsShort = "WL"
         Case "Degrees"
            LenUnitsShort = "deg"
      End Select
      FileToOpen = ThisWorkbook.Path & "\$T-Line at Fixed Freq$.csv"
      Open FileToOpen For Output As #1
      Write #1, "Fixed Frequency Transmission Line"
      Write #1, "Line Type: " & IIf(LI = UBound(vZohf), "User Specified", cboLineTypes.Value), _
                , , , "Frequency = " & txtFFFreq & " MHz"
      Write #1, "Length is >>> Distance from Input <<<", , , , LenUnitsShort
      Write #1,
      Write #1, "Length (" & LenUnitsShort & ")", "SWR", "Rs", "Xs", "Zmag", "Theta", _
                "Rho", "RL", "Phase", "%RPwr", _
                "E-mag", "E-phase", "I-mag", "I-phase", _
                "Power", "Pwr Loss", "True SWR", _
                "RhoRe", "RhoIm"
   End If
   
   Select Case mPval + 1
      '================================  RsXs  ===========================================
      Case 1  'RsXs
         Rs = CDbl(txt1Rs)
         Xs = CDbl(txt1Xs)
         LoopCnt = 0
         Do
            If Exponential Then
               Freq = 10 ^ (ExpStart + ExpStep * LoopCnt)
            Else
               Freq = Fstart + (Fstep * LoopCnt)
            End If
            If Freq > (Fstop + 0.000000000001) Then Exit Do
            Write #1, Application.Round(Freq, 6), Rs, Xs
            LoopCnt = LoopCnt + 1
         Loop
         [GenF1start].Value = Fstart
         [GenF1stop].Value = Fstop
         If Right(txtFstep, 1) = "p" Or Right(txtFstep, 1) = "e" Then
            [GenF1step].Value = txtFstep  'save as string
         Else
            [GenF1step].Value = Fstep     'save as Double to be regionally independent
         End If
         [Gen1Rs].Value = Rs
         [Gen1Xs].Value = Xs
         
      '================================  RsLs  ===========================================
      Case 2  'RsLs
         Rs = CDbl(txt2Rs)
         Ls = CDbl(txt2Ls)
         LoopCnt = 0
         Do
            If Exponential Then
               Freq = 10 ^ (ExpStart + ExpStep * LoopCnt)
            Else
               Freq = Fstart + (Fstep * LoopCnt)
            End If
            If Freq > (Fstop + 0.000000000001) Then Exit Do
            Xs = TWOPI * Freq * Ls
            Write #1, Application.Round(Freq, 6), Rs, Xs
            LoopCnt = LoopCnt + 1
         Loop
         [GenF2start].Value = Fstart
         [GenF2stop].Value = Fstop
         If Right(txtFstep, 1) = "p" Or Right(txtFstep, 1) = "e" Then
            [GenF2step].Value = txtFstep  'save as string
         Else
            [GenF2step].Value = Fstep     'save as Double to be regionally independent
         End If
         [Gen2Rs].Value = Rs
         [Gen2Ls].Value = Ls
         
      '================================  RpCp  ===========================================
      Case 3  'RpCp
         Rp = CDbl(txt3Rp)
         Cp = CDbl(txt3Cp)
         LoopCnt = 0
         Do
            If Exponential Then
               Freq = 10 ^ (ExpStart + ExpStep * LoopCnt)
            Else
               Freq = Fstart + (Fstep * LoopCnt)
            End If
            If Freq > (Fstop + 0.000000000001) Then Exit Do
            Xp = -1000000 / (TWOPI * Freq * Cp)
            Rs = (Rp * Xp ^ 2) / (Rp ^ 2 + Xp ^ 2)
            Xs = (Rp ^ 2 * Xp) / (Rp ^ 2 + Xp ^ 2)
            Write #1, Application.Round(Freq, 6), Rs, Xs
            LoopCnt = LoopCnt + 1
         Loop
         [GenF3start].Value = Fstart
         [GenF3stop].Value = Fstop
         If Right(txtFstep, 1) = "p" Or Right(txtFstep, 1) = "e" Then
            [GenF3step].Value = txtFstep  'save as string
         Else
            [GenF3step].Value = Fstep     'save as Double to be regionally independent
         End If
         [Gen3Rp].Value = Rp
         [Gen3Cp].Value = Cp
         
      '================================  Trap  ===========================================
      Case 4  'Trap
         Rs = CDbl(txt4Rs)
         Ls = CDbl(txt4Ls)
         Cp = CDbl(txt4Cp)
         LoopCnt = 0
         Do
            If Exponential Then
               Freq = 10 ^ (ExpStart + ExpStep * LoopCnt)
            Else
               Freq = Fstart + (Fstep * LoopCnt)
            End If
            If Freq > (Fstop + 0.000000000001) Then Exit Do
            Xs = TWOPI * Freq * Ls  'series L
            'Equiv parallel form for R and L combo.
            Rp = (Rs ^ 2 + Xs ^ 2) / Rs
            Xp = (Rs ^ 2 + Xs ^ 2) / Xs
            'Combine parallel L and C reactance values.
            Xp2 = -1000000 / (TWOPI * Freq * Cp)  'parallel C
            Xp = (Xp * Xp2) / (Xp + Xp2)
            'Convert to series form.
            Rs2 = (Rp * Xp ^ 2) / (Rp ^ 2 + Xp ^ 2)
            Xs = (Rp ^ 2 * Xp) / (Rp ^ 2 + Xp ^ 2)
            Write #1, Application.Round(Freq, 6), Rs2, Xs
            LoopCnt = LoopCnt + 1
         Loop
         [GenF4start].Value = Fstart
         [GenF4stop].Value = Fstop
         If Right(txtFstep, 1) = "p" Or Right(txtFstep, 1) = "e" Then
            [GenF4step].Value = txtFstep  'save as string
         Else
            [GenF4step].Value = Fstep     'save as Double to be regionally independent
         End If
         [Gen4Rs].Value = Rs
         [Gen4Ls].Value = Ls
         [Gen4Cp].Value = Cp
         
      '================================  Crystal  ===========================================
      Case 5  'Crystal
         Rs = CDbl(txt5Rs)
         Ls = CDbl(txt5Ls)
         Cs = CDbl(txt5Cs)
         Cp = CDbl(txt5Cp)
         LoopCnt = 0
         Do
            If Exponential Then
               Freq = 10 ^ (ExpStart + ExpStep * LoopCnt)
            Else
               Freq = Fstart + (Fstep * LoopCnt)
            End If
            If Freq > (Fstop + 0.000000000001) Then Exit Do
            Xs = TWOPI * Freq * Ls  'series L
            Xs = Xs + (-1000000 / (TWOPI * Freq * Cs))  'plus series C
            'Equiv parallel form for series RLC.
            Rp = (Rs ^ 2 + Xs ^ 2) / Rs
            Xp = (Rs ^ 2 + Xs ^ 2) / Xs
            'Combine parallel reactance values.
            Xp2 = -1000000 / (TWOPI * Freq * Cp)  'parallel C
            Xp = (Xp * Xp2) / (Xp + Xp2)
            'Convert to series form.
            Rs2 = (Rp * Xp ^ 2) / (Rp ^ 2 + Xp ^ 2)
            Xs = (Rp ^ 2 * Xp) / (Rp ^ 2 + Xp ^ 2)
            Write #1, Application.Round(Freq, 6), Rs2, Xs
            LoopCnt = LoopCnt + 1
         Loop
         [GenF5start].Value = Fstart
         [GenF5stop].Value = Fstop
         If Right(txtFstep, 1) = "p" Or Right(txtFstep, 1) = "e" Then
            [GenF5step].Value = txtFstep  'save as string
         Else
            [GenF5step].Value = Fstep     'save as Double to be regionally independent
         End If
         [Gen5Rs].Value = Rs
         [Gen5Ls].Value = Ls
         [Gen5Cs].Value = Cs
         [Gen5Cp].Value = Cp
         
      '================================  TL Parms  ===========================================
      Case 6  'TL Parms
         Dim LenFt As Double
         Dim Zohf As Double
         Dim VFhf As Double
         Dim K0 As Double
         Dim K1 As Double
         Dim K2 As Double
         
         Dim Rdc As Double, Rhf As Double, Lhf As Double, Ghf As Double, Chf As Double
         Dim w As Double
         Dim Zint As ReIm
         Dim RjwL As ReIm
         Dim GjwC As ReIm
         Dim Zo As ReIm
         Dim Gamma As ReIm
         Dim VF As Double
         Dim ML100ft As Double
         Dim Loss As Double
         Dim DistR As Double
         Dim DistL As Double
         Dim DistG As Double
         Dim DistC As Double
         Dim Delay As Double
         Dim GamRe As Double
         Dim GamIm As Double
         Dim Sinh_gL As ReIm
         Dim Cosh_gL As ReIm
         Dim Ds As ReIm
         Dim RefR As Double
         Dim S21dB As Double

         Select Case cboLenUnits
            Case "Feet"
               LenFt = CDbl(txtLen)
            Case "Meters"
               LenFt = CDbl(txtLen) / 0.3048
            Case "Inches"
               LenFt = CDbl(txtLen) / 12
            Case "Millimeters"
               LenFt = CDbl(txtLen) / 304.8
         End Select
         Zohf = vZohf(LI)
         VFhf = vVFhf(LI)
         K0 = vK0(LI)
         K1 = vK1(LI)
         K2 = vK2(LI)
         RefR = 50  'standard S21 reference
         
         LoopCnt = 0
         Do
            If Exponential Then
               Freq = 10 ^ (ExpStart + ExpStep * LoopCnt)
            Else
               Freq = Fstart + (Fstep * LoopCnt)
            End If
            If Freq > (Fstop + 0.000000000001) Then Exit Do
            
            Rdc = 2 * (K0 / 100 / NEPER) * Zohf              'Ohms/ft  (note K0 is dB/100ft)
            Rhf = 2 * (K1 / 100 / NEPER * Sqr(Freq)) * Zohf  'Ohms/ft  (note K1 is dB/100ft)
            Lhf = Zohf / (SLfps * VFhf)                      'Henries/ft
            Ghf = 2 * (K2 / 100 / NEPER * Freq) / Zohf       'Siemens/ft  (note K2 is dB/100ft)
            Chf = 1 / (Zohf * SLfps * VFhf)                  'Farads/ft
            w = TWOPI * Freq * 1000000                       'omega
            
            Zint = IMSQRT(IMSUM(COMPLEX(Rdc ^ 2, 0), _
                          IMPOWER(COMPLEX(Rhf, Rhf), 2)))    'internal impedance, Rdc+Rhf+Li
            ''''<<< SIMPLE (Zhang) >>>
            '''Zint = IMSUM(COMPLEX(Rdc), COMPLEX(Rhf, Rhf))
            RjwL = IMSUM(Zint, COMPLEX(0, w * Lhf))          'Rdc+Rhf, Li+Lhf (Le)
            GjwC = COMPLEX(Ghf, w * Chf)
            Zo = IMSQRT(IMDIV(RjwL, GjwC))
            Gamma = IMSQRT(IMPRODUCT(RjwL, GjwC))
            VF = w / (SLfps * Gamma.Im)                      'corrected VF
            ML100ft = Gamma.Re * NEPER * 100                 'loss over 100 ft, dB
            Loss = ML100ft / 100 * LenFt
            Delay = LenFt / (SLfps * VF) * 1000000000#       'ns (at corrected VF)
            
            DistR = RjwL.Re * 1000                     'mOhms/ft, Rdc+Rhf
            DistL = RjwL.Im / w * 1000000000#          'nH/ft, Li+Le
            ''''<<< Li ONLY >>>
            '''DistL = Zint.Im / w * 1000000000#
            DistG = GjwC.Re * 1000000#                 'uS/ft
            DistC = GjwC.Im / w * 1000000000000#       'pF/ft
            DistC = Application.Round(DistC, 10)       'should be constant, avoid small deltas
   
            '|S21| (dB) per LenFt
            With Application
               GamRe = Gamma.Re * LenFt
               GamIm = Gamma.Im * LenFt
               Sinh_gL = COMPLEX(Cos(GamIm) * .Sinh(GamRe), Sin(GamIm) * .Cosh(GamRe))
               Cosh_gL = COMPLEX(Cos(GamIm) * .Cosh(GamRe), Sin(GamIm) * .Sinh(GamRe))
               Ds = IMSUM(IMPRODUCT(IMPRODUCT(COMPLEX(2 * RefR, 0), Zo), Cosh_gL), _
                          IMPRODUCT(IMSUM(COMPLEX(RefR ^ 2, 0), IMPRODUCT(Zo, Zo)), Sinh_gL))
               S21dB = -20 * .Log10(IMABS(IMDIV(IMPRODUCT(COMPLEX(2 * RefR, 0), Zo), Ds)))
            End With
   
            Write #1, Freq, IMABS(Zo), Zo.Re, Zo.Im, VF, _
                      Loss, ML100ft, ML100ft / 0.3048, S21dB, _
                      DistR, DistL, DistG, DistC, _
                      DistR / 0.3048, DistL / 0.3048, DistG / 0.3048, DistC / 0.3048, _
                      Delay
                      
            LoopCnt = LoopCnt + 1
         Loop
         [GenF6start].Value = Fstart
         [GenF6stop].Value = Fstop
         If Right(txtFstep, 1) = "p" Or Right(txtFstep, 1) = "e" Then
            [GenF6step].Value = txtFstep  'save as string
         Else
            [GenF6step].Value = Fstep     'save as Double to be regionally independent
         End If
         
      '================================  TL FF  ===========================================
      Case 7  'TL FF
         Dim vTLParms As Variant
         Dim Alpha1ft As Double
         Dim Beta1ft As Double
         Dim AlphaL As Double
         Dim BetaL As Double
         Dim RevSinh_gL As ReIm
         Dim RevCosh_gL As ReIm
           
         Dim Lstart As Double, Lstop As Double, Lstep As Double
         Dim Length As Double
         Dim LenMult As Double
         
         Dim Zload As ReIm
         Dim Zin As ReIm
         Dim Eload As ReIm
         Dim Ein As ReIm
         Dim Iload As ReIm
         Dim Iin As ReIm
         Dim Iin_mag As Double
         Dim Iin_phase As Double
         Dim ComplexRefR As ReIm
         Dim Rho As ReIm
         Dim RhoMag As Double
         Dim SWR As Double
         Dim TrueSWR As Double
         Dim Pload As Double
         Dim Pin As Double
         Dim PwrLoss As Double
 
         'Set T-Line characteristics.
         Freq = CDbl(txtFFFreq)
         
         Zohf = vZohf(LI)
         VFhf = vVFhf(LI)
         K0 = vK0(LI)
         K1 = vK1(LI)
         K2 = vK2(LI)
         
         'For a 1 foot length, get Zo (true Zo at Freq), VF (true VF at Freq),
         'and Loss (dB per 1 ft).
         vTLParms = GetTLParms(Freq, 1, Zohf, VFhf, K1, K2, K0)
         Zo.Re = vTLParms(1, 1)
         Zo.Im = vTLParms(2, 1)
         VF = vTLParms(3, 1)    'corrected VF
         Loss = vTLParms(4, 1)  'matched loss over 1 ft, dB
'''Zo.Re = 75
'''Zo.Im = 0
'''VF = 0.83
'''Loss = 0.4 / 100
   
         'Propagation constant, real and imaginary components of GammaL, for 1 foot.
         Alpha1ft = Loss / NEPER
         Beta1ft = (TWOPI * Freq) / (SL * VF)
         
         'Set length multiplier to convert to Feet.
         Select Case cboFFLenUnits
            Case "Feet"
               LenMult = 1
            Case "Meters"
               LenMult = 1 / 0.3048
            Case "Inches"
               LenMult = 1 / 12
            Case "Millimeters"
               LenMult = 1 / 304.8
            Case "Wavelengths"
               LenMult = 1 * SL * VF / Freq  'using corrected VF
            Case "Degrees"
               LenMult = 1 / 360 * SL * VF / Freq  'using corrected VF
         End Select
   
         'Calculate conditions at input.
         'Zin = Zo * (Zload * Cosh_gL + Zo * Sinh_gL) / (Zo * Cosh_gL + Zload * Sinh_gL)
         'Ein = Eload * (Cosh_gL + Zo/Zload * Sinh_gL)    [Chipman Problem 7.38]
         ' or = Eload * Cosh_gL + Iload*Zo * Sinh_gL      [Terman eq. 45]
         'Iin = Iload * (Cosh_gL + Zload/Zo * Sinh_gL)    [Chipman Problem 7.38]
         ' or = Iload * Cosh_gL + Eload/Zo * Sinh_gL      [Terman eq. 45]
         LenFt = Fstop * LenMult  'Fstop (aka Lstop) was set by CalcNumPoints
         AlphaL = Alpha1ft * LenFt
         BetaL = Beta1ft * LenFt
         With Application.WorksheetFunction
            Sinh_gL = COMPLEX(Cos(BetaL) * .Sinh(AlphaL), Sin(BetaL) * .Cosh(AlphaL))
            Cosh_gL = COMPLEX(Cos(BetaL) * .Cosh(AlphaL), Sin(BetaL) * .Sinh(AlphaL))
            RevSinh_gL = COMPLEX(Cos(-BetaL) * .Sinh(-AlphaL), Sin(-BetaL) * .Cosh(-AlphaL))
            RevCosh_gL = COMPLEX(Cos(-BetaL) * .Cosh(-AlphaL), Sin(-BetaL) * .Sinh(-AlphaL))
         End With
   
         If optZandI Then
            Select Case cboZIE1.ListIndex
               Case 0  'At Input - Real & Imag.
                  Zin.Re = CDbl(txtZIE1a)
                  Zin.Im = CDbl(txtZIE1b)
               Case 1  'At Input - Mag. & Angle
                  Zin.Re = CDbl(txtZIE1a) * Cos(CDbl(txtZIE1b) * DEG2RAD)
                  Zin.Im = CDbl(txtZIE1a) * Sin(CDbl(txtZIE1b) * DEG2RAD)
               Case 2  'At Load - Real & Imag.
                  Zload.Re = CDbl(txtZIE1a)
                  Zload.Im = CDbl(txtZIE1b)
               Case 3  'At Load - Mag. & Angle
                  Zload.Re = CDbl(txtZIE1a) * Cos(CDbl(txtZIE1b) * DEG2RAD)
                  Zload.Im = CDbl(txtZIE1a) * Sin(CDbl(txtZIE1b) * DEG2RAD)
            End Select
            If cboZIE1.ListIndex <= 1 Then
               'May be needed below.
               Zload = IMPRODUCT(Zo, IMDIV(IMSUM(IMPRODUCT(Zin, RevCosh_gL), _
                                               IMPRODUCT(Zo, RevSinh_gL)), _
                                         IMSUM(IMPRODUCT(Zo, RevCosh_gL), _
                                               IMPRODUCT(Zin, RevSinh_gL))))
            Else
               Zin = IMPRODUCT(Zo, IMDIV(IMSUM(IMPRODUCT(Zload, Cosh_gL), _
                                               IMPRODUCT(Zo, Sinh_gL)), _
                                         IMSUM(IMPRODUCT(Zo, Cosh_gL), _
                                               IMPRODUCT(Zload, Sinh_gL))))
            End If
            Select Case cboZIE2.ListIndex
               Case 0  'At Input - Real & Imag.
                  Iin.Re = CDbl(txtZIE2a)
                  Iin.Im = CDbl(txtZIE2b)
               Case 1  'At Input - Mag. & Angle
                  Iin.Re = CDbl(txtZIE2a) * Cos(CDbl(txtZIE2b) * DEG2RAD)
                  Iin.Im = CDbl(txtZIE2a) * Sin(CDbl(txtZIE2b) * DEG2RAD)
               Case 2  'At Load - Real & Imag.
                  Iload.Re = CDbl(txtZIE2a)
                  Iload.Im = CDbl(txtZIE2b)
                  Iin = IMPRODUCT(Iload, IMSUM(Cosh_gL, IMPRODUCT(IMDIV(Zload, Zo), Sinh_gL)))
               Case 3  'At Load - Mag. & Angle
                  Iload.Re = CDbl(txtZIE2a) * Cos(CDbl(txtZIE2b) * DEG2RAD)
                  Iload.Im = CDbl(txtZIE2a) * Sin(CDbl(txtZIE2b) * DEG2RAD)
                  Iin = IMPRODUCT(Iload, IMSUM(Cosh_gL, IMPRODUCT(IMDIV(Zload, Zo), Sinh_gL)))
            End Select
            Ein = IMPRODUCT(Iin, Zin)
            
         ElseIf optZandE Then
            Select Case cboZIE1.ListIndex
               Case 0  'At Input - Real & Imag.
                  Zin.Re = CDbl(txtZIE1a)
                  Zin.Im = CDbl(txtZIE1b)
               Case 1  'At Input - Mag. & Angle
                  Zin.Re = CDbl(txtZIE1a) * Cos(CDbl(txtZIE1b) * DEG2RAD)
                  Zin.Im = CDbl(txtZIE1a) * Sin(CDbl(txtZIE1b) * DEG2RAD)
               Case 2  'At Load - Real & Imag.
                  Zload.Re = CDbl(txtZIE1a)
                  Zload.Im = CDbl(txtZIE1b)
               Case 3  'At Load - Mag. & Angle
                  Zload.Re = CDbl(txtZIE1a) * Cos(CDbl(txtZIE1b) * DEG2RAD)
                  Zload.Im = CDbl(txtZIE1a) * Sin(CDbl(txtZIE1b) * DEG2RAD)
            End Select
            If cboZIE1.ListIndex <= 1 Then
               'May be needed below.
               Zload = IMPRODUCT(Zo, IMDIV(IMSUM(IMPRODUCT(Zin, RevCosh_gL), _
                                               IMPRODUCT(Zo, RevSinh_gL)), _
                                         IMSUM(IMPRODUCT(Zo, RevCosh_gL), _
                                               IMPRODUCT(Zin, RevSinh_gL))))
            Else
               Zin = IMPRODUCT(Zo, IMDIV(IMSUM(IMPRODUCT(Zload, Cosh_gL), _
                                               IMPRODUCT(Zo, Sinh_gL)), _
                                         IMSUM(IMPRODUCT(Zo, Cosh_gL), _
                                               IMPRODUCT(Zload, Sinh_gL))))
            End If
            Select Case cboZIE2.ListIndex
               Case 0  'At Input - Real & Imag.
                  Ein.Re = CDbl(txtZIE2a)
                  Ein.Im = CDbl(txtZIE2b)
               Case 1  'At Input - Mag. & Angle
                  Ein.Re = CDbl(txtZIE2a) * Cos(CDbl(txtZIE2b) * DEG2RAD)
                  Ein.Im = CDbl(txtZIE2a) * Sin(CDbl(txtZIE2b) * DEG2RAD)
               Case 2  'At Load - Real & Imag.
                  Eload.Re = CDbl(txtZIE2a)
                  Eload.Im = CDbl(txtZIE2b)
                  Ein = IMPRODUCT(Eload, IMSUM(Cosh_gL, IMPRODUCT(IMDIV(Zo, Zload), Sinh_gL)))
               Case 3  'At Load - Mag. & Angle
                  Eload.Re = CDbl(txtZIE2a) * Cos(CDbl(txtZIE2b) * DEG2RAD)
                  Eload.Im = CDbl(txtZIE2a) * Sin(CDbl(txtZIE2b) * DEG2RAD)
                  Ein = IMPRODUCT(Eload, IMSUM(Cosh_gL, IMPRODUCT(IMDIV(Zo, Zload), Sinh_gL)))
            End Select
            Iin = IMDIV(Ein, Zin)
            
         Else  'E and I
            Select Case cboZIE1.ListIndex
               Case 0  'At Input - Real & Imag.
                  Ein.Re = CDbl(txtZIE1a)
                  Ein.Im = CDbl(txtZIE1b)
               Case 1  'At Input - Mag. & Angle
                  Ein.Re = CDbl(txtZIE1a) * Cos(CDbl(txtZIE1b) * DEG2RAD)
                  Ein.Im = CDbl(txtZIE1a) * Sin(CDbl(txtZIE1b) * DEG2RAD)
               Case 2  'At Load - Real & Imag.
                  Eload.Re = CDbl(txtZIE1a)
                  Eload.Im = CDbl(txtZIE1b)
               Case 3  'At Load - Mag. & Angle
                  Eload.Re = CDbl(txtZIE1a) * Cos(CDbl(txtZIE1b) * DEG2RAD)
                  Eload.Im = CDbl(txtZIE1a) * Sin(CDbl(txtZIE1b) * DEG2RAD)
            End Select
            Select Case cboZIE2.ListIndex
               Case 0  'At Input - Real & Imag.
                  Iin.Re = CDbl(txtZIE2a)
                  Iin.Im = CDbl(txtZIE2b)
               Case 1  'At Input - Mag. & Angle
                  Iin.Re = CDbl(txtZIE2a) * Cos(CDbl(txtZIE2b) * DEG2RAD)
                  Iin.Im = CDbl(txtZIE2a) * Sin(CDbl(txtZIE2b) * DEG2RAD)
               Case 2  'At Load - Real & Imag.
                  Iload.Re = CDbl(txtZIE2a)
                  Iload.Im = CDbl(txtZIE2b)
               Case 3  'At Load - Mag. & Angle
                  Iload.Re = CDbl(txtZIE2a) * Cos(CDbl(txtZIE2b) * DEG2RAD)
                  Iload.Im = CDbl(txtZIE2a) * Sin(CDbl(txtZIE2b) * DEG2RAD)
            End Select
            If cboZIE1.ListIndex <= 1 And cboZIE2.ListIndex <= 1 Then
               'Ein and Iin entered directly, okay
            ElseIf cboZIE1.ListIndex >= 2 And cboZIE2.ListIndex >= 2 Then
               Ein = IMSUM(IMPRODUCT(Eload, Cosh_gL), IMPRODUCT(IMPRODUCT(Iload, Zo), Sinh_gL))
               Iin = IMSUM(IMPRODUCT(Iload, Cosh_gL), IMPRODUCT(IMDIV(Eload, Zo), Sinh_gL))
            Else
               MsgBox "When entering E and I, both must be specified" & vbLf & _
                      "either at the input or the load end of the line.", _
                      vbExclamation, "Unsupported Combination"
               Close #1
               Exit Sub
            End If
            Zin = IMDIV(Ein, Iin)
         End If
         
'''         'Valid at input?
'''         If Zin.Re <= 0 Then
'''            MsgBox "This ZIE combination will result in a negative" & vbLf & _
'''                   "resistance value at the input end of the line.", _
'''                   vbExclamation, "Invalid Combination"
'''            Close #1
'''            Exit Sub
'''         End If
   
         'If input power is not specified, derive Pin from I and Z.
         'If specified, use value to set new Iin_mag while maintaining existing Iin_phase.
         'Since Iin changes, Ein has to change as well.  Ein_phase will not change.
         If Len(txtPin) = 0 Then
            Pin = IMABS(Iin) ^ 2 * Zin.Re
         Else
            Pin = CDbl(txtPin)
            Iin_phase = IMARGUMENT(Iin)  'existing phase, radians
            Iin_mag = Sqr(Pin / Zin.Re)  'new mag
            Iin.Re = Iin_mag * Cos(Iin_phase)
            Iin.Im = Iin_mag * Sin(Iin_phase)
            Ein = IMPRODUCT(Iin, Zin)
         End If
   
         'Reference R for Rho
         If IsEmpty(Range("RefZo")) Then Range("RefZo").Value = 50
         ComplexRefR.Re = Range("RefZo").Value
         ComplexRefR.Im = 0
       
         'Write a file record for each length step >>> FROM INPUT TO LOAD <<<.
         'For length of 0-100% (to compare unequal length lines)
         'set Lstep = Lstop / 100, set LenUnitsShort = "%", Write LoopCnt ...
         '(For 0.5% steps, set Lstep = Lstop / 100 / 2, Write LoopCnt/2 ...)
         LoopCnt = 0
         On Error Resume Next  'don't fail if invalid ZIE not caught above
         Do
            'Note Fstart = Lstart, Fstop = Lstop, Fstep = Lstep
            If Exponential Then
               Length = 10 ^ (ExpStart + ExpStep * LoopCnt)
            Else
               Length = Fstart + (Fstep * LoopCnt)
            End If
            If Length > (Fstop + 0.000000000001) Then Exit Do
            
            LenFt = Length * -LenMult  '<<< NOTE REVERSE DIRECTION, INPUT TO LOAD
            AlphaL = Alpha1ft * LenFt
            BetaL = Beta1ft * LenFt
            With Application.WorksheetFunction
               Sinh_gL = COMPLEX(Cos(BetaL) * .Sinh(AlphaL), Sin(BetaL) * .Cosh(AlphaL))
               Cosh_gL = COMPLEX(Cos(BetaL) * .Cosh(AlphaL), Sin(BetaL) * .Sinh(AlphaL))
            End With
            
            Zload = IMPRODUCT(Zo, IMDIV(IMSUM(IMPRODUCT(Zin, Cosh_gL), _
                                            IMPRODUCT(Zo, Sinh_gL)), _
                                      IMSUM(IMPRODUCT(Zo, Cosh_gL), _
                                            IMPRODUCT(Zin, Sinh_gL))))
            
            Eload = IMSUM(IMPRODUCT(Ein, Cosh_gL), IMPRODUCT(IMPRODUCT(Iin, Zo), Sinh_gL))
      
            Iload = IMSUM(IMPRODUCT(Iin, Cosh_gL), IMPRODUCT(IMDIV(Ein, Zo), Sinh_gL))
      
            'True Rho and SWR.
            Rho = IMDIV(IMSUB(Zload, Zo), IMSUM(Zload, Zo))  '(Z - Zo) / (Z + Zo)
            RhoMag = IMABS(Rho)
            If RhoMag < 0.980197824 Then
               TrueSWR = (1 + RhoMag) / (1 - RhoMag)
            Else
               TrueSWR = 99.999
            End If
      
            'Rho(RefR) and SWR (and RL, Phase, %ReflPwr below)
            Rho = IMDIV(IMSUB(Zload, ComplexRefR), IMSUM(Zload, ComplexRefR))  '(Z - RefR) / (Z + RefR)
            RhoMag = IMABS(Rho) + 1E-99  'avoid Log10(0) error computing RL
            If RhoMag < 0.980197824 Then
               SWR = (1 + RhoMag) / (1 - RhoMag)
            Else
               SWR = 99.999
            End If
            
            Pload = IMABS(Iload) ^ 2 * Zload.Re
            If Pload > 0 Then
               PwrLoss = 10 * Application.Log10(Pin / Pload)
            Else
               PwrLoss = 999.99
            End If
            
            'Write #1, LoopCnt, ...   '<<< use this for 0-100%
            Write #1, Length, SWR, Zload.Re, Zload.Im, IMABS(Zload), IMARGUMENTdeg(Zload), _
                      RhoMag, 20 * Application.Log10(RhoMag), IMARGUMENTdeg(Rho), RhoMag ^ 2 * 100, _
                      IMABS(Eload), IMARGUMENTdeg(Eload), IMABS(Iload), IMARGUMENTdeg(Iload), _
                      Pload, PwrLoss, TrueSWR, _
                      IMREAL(Rho), IMAGINARY(Rho)
'''            Write #1, Length, SWR, Zload.Re, Zload.Im, IMABS(Zload), IMARGUMENTdeg(Zload), _
'''                      RhoMag, 20 * Application.Log10(RhoMag), IMARGUMENTdeg(Rho), RhoMag ^ 2 * 100, _
'''                      IMABS(Eload), IMARGUMENTdeg(Eload), Eload.Re, Eload.Im, _
'''                      Pload, PwrLoss, TrueSWR, _
'''                      IMREAL(Rho), IMAGINARY(Rho)
                      
            LoopCnt = LoopCnt + 1
         Loop
         On Error GoTo 0
         [GenF7start].Value = Fstart
         [GenF7stop].Value = Fstop
         If Right(txtFstep, 1) = "p" Or Right(txtFstep, 1) = "e" Then
            [GenF7step].Value = txtFstep  'save as string
         Else
            [GenF7step].Value = Fstep     'save as Double to be regionally independent
         End If
         [GenFFUnits].Value = cboFFLenUnits
         [GenFFFreq].Value = Freq
         [GenFFZIE1LI].Value = cboZIE1.ListIndex
         [GenFFZIE2LI].Value = cboZIE2.ListIndex
         If optZandI Then
            [GenFFoptZIE].Value = 1
         ElseIf optZandE Then
            [GenFFoptZIE].Value = 2
         Else
            [GenFFoptZIE].Value = 3
         End If
         If Len(txtPin) > 0 Then
            [GenFFPin].Value = Pin
         Else
            [GenFFPin].ClearContents
         End If
         [GenFFZIE1a].Value = CDbl(txtZIE1a)
         [GenFFZIE1b].Value = CDbl(txtZIE1b)
         [GenFFZIE2a].Value = CDbl(txtZIE2a)
         [GenFFZIE2b].Value = CDbl(txtZIE2b)
      
   End Select
   [GenmPage].Value = mPage.Value
   Close #1
   
   'Load the generated file.
   ReadData FileToOpen
   
   If Not StayOpen Then Unload Me
End Sub

Private Sub btnApply_Click()
   StayOpen = True
   btnOK_Click
   StayOpen = False
End Sub

Private Sub txt1Fstart_Change()
   CalcNumPoints
End Sub

Private Sub txt1Fstop_Change()
   CalcNumPoints
End Sub

Private Sub txt1Fstep_Change()
   CalcNumPoints
End Sub

Private Sub txt2Fstart_Change()
   CalcNumPoints
End Sub

Private Sub txt2Fstop_Change()
   CalcNumPoints
End Sub

Private Sub txt2Fstep_Change()
   CalcNumPoints
End Sub

Private Sub txt3Fstart_Change()
   CalcNumPoints
End Sub

Private Sub txt3Fstop_Change()
   CalcNumPoints
End Sub

Private Sub txt3Fstep_Change()
   CalcNumPoints
End Sub

Private Sub txt4Fstart_Change()
   CalcNumPoints
End Sub

Private Sub txt4Fstop_Change()
   CalcNumPoints
End Sub

Private Sub txt4Fstep_Change()
   CalcNumPoints
End Sub

Private Sub txt5Fstart_Change()
   CalcNumPoints
End Sub

Private Sub txt5Fstop_Change()
   CalcNumPoints
End Sub

Private Sub txt5Fstep_Change()
   CalcNumPoints
End Sub

Private Sub txt6Fstart_Change()
   CalcNumPoints
End Sub

Private Sub txt6Fstop_Change()
   CalcNumPoints
End Sub

Private Sub txt6Fstep_Change()
   CalcNumPoints
End Sub

Private Sub txt7Fstart_Change()
   CalcNumPoints
End Sub

Private Sub txt7Fstop_Change()
   CalcNumPoints
End Sub

Private Sub txt7Fstep_Change()
   CalcNumPoints
End Sub

Private Sub CalcNumPoints()
   Dim txtFstep As String, txtNumPoints As String
   On Error Resume Next
   Fstart = CDbl(Me.Controls("txt" & mPage.Value + 1 & "Fstart"))
   Fstop = CDbl(Me.Controls("txt" & mPage.Value + 1 & "Fstop"))
   txtFstep = Me.Controls("txt" & mPage.Value + 1 & "Fstep")
   If Fstop = Fstart Then
      txtNumPoints = "1"
   ElseIf Right(txtFstep, 1) = "p" Or Right(txtFstep, 1) = "e" Then
      'Show number of points as entered.
      txtNumPoints = Left(txtFstep, Len(txtFstep) - 1)
   ElseIf Right(txtFstep, 1) = "%" Then
      'Convert percentage to number of points.
      txtNumPoints = CStr(CLng(100 / Left(txtFstep, Len(txtFstep) - 1)) + 1)
   Else
      'Calculate from start/stop/step.
      Fstep = Application.Round(CDbl(txtFstep), 6)  'allow 1 Hz granularity
      txtNumPoints = CLng((Fstop - Fstart) / Fstep + 1)
   End If
   'Show "?" if any errors.
   If Err.Number > 0 Then
      txtNumPoints = "?"
   Else
      NumPoints = CLng(txtNumPoints)
   End If
   Me.Controls("txt" & mPage.Value + 1 & "NumPoints") = txtNumPoints
End Sub

Private Sub txt4Ls_Change()
   CalcFs
End Sub

Private Sub txt4Cp_Change()
   CalcFs
End Sub

Private Sub txt5Ls_Change()
   CalcFsFp
End Sub

Private Sub txt5Cs_Change()
   CalcFsFp
End Sub

Private Sub txt5Cp_Change()
   CalcFsFp
End Sub

Private Sub CalcFs()
   Dim Ls As Double, Cp As Double
   Dim Fs As Double
   On Error Resume Next
   Ls = CDbl(txt4Ls)
   Cp = CDbl(txt4Cp)
   If Err.Number > 0 Then Exit Sub
   Fs = 1000 / (TWOPI * Sqr(Ls * Cp))
   lbl4Fs.Caption = "Fres:  " & Format(Fs, "0.000") & "  MHz"
End Sub

Private Sub CalcFsFp()
   Dim Ls As Double, Cs As Double, Cp As Double
   Dim Fs As Double, Fp As Double
   On Error Resume Next
   Ls = CDbl(txt5Ls)
   Cs = CDbl(txt5Cs)
   Cp = CDbl(txt5Cp)
   If Err.Number > 0 Then Exit Sub
   Fs = 1000000000 / (TWOPI * Sqr(Ls * Cs))
   Fp = Fs * Sqr(1 + Cs / Cp)
   lbl5Fs.Caption = "Fs:  " & Format(Fs, "0 000 000") & "  Hz"
   lbl5Fp.Caption = "Fp:  " & Format(Fp, "0 000 000") & "  Hz"
End Sub

Private Sub btnCancel_Click()
   Unload Me
End Sub

Private Sub btnScalesGen_Click()
   fbtnScales_Custom_Click
End Sub

Private Sub btnSnapshotsGen_Click()
   fbtnSnapshot_Custom_Click
End Sub

Private Sub btnTracesGen_Click()
   frmCustomTraces.Show
End Sub
Attribute VB_Name = "frmLegend"
Attribute VB_Base = "0{D6275926-571C-4F63-9934-CF859C2877EA}{8904B7DC-2A2E-4A65-AA0D-195F3A20FBC5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim Sname As String
Dim Snames(1 To 6) As String
Dim Snumbers(1 To 6) As Integer
Dim SnCnt As Integer

Private Sub UserForm_Initialize()
   Dim i As Integer
   Dim ShrinkBy As Single
   
   With ActiveSheet.ChartObjects(1).Chart
      'Make list of currently used series names.
      On Error Resume Next  'in case scales locked in a way to hide entire series
      If ActiveSheet.Name = "Custom" Then
         SnCnt = 1
         Snames(1) = .SeriesCollection(1).Name  'Primary
         Snumbers(1) = 1
         If ActiveSheet.Shapes("boxSnap1").Visible Then
            SnCnt = SnCnt + 1
            Snames(SnCnt) = .SeriesCollection(2).Name
            Snumbers(SnCnt) = 2
         End If
         If ActiveSheet.Shapes("boxSnap2").Visible Then
            SnCnt = SnCnt + 1
            Snames(SnCnt) = .SeriesCollection(3).Name
            Snumbers(SnCnt) = 3
         End If
         If ActiveSheet.DropDowns("fcboY2axis").ListIndex > 1 Then  'Secondary
            SnCnt = SnCnt + 1
            Snames(SnCnt) = .SeriesCollection(4).Name
            Snumbers(SnCnt) = 4
         End If
         If ActiveSheet.Shapes("boxSnap3").Visible Then
            SnCnt = SnCnt + 1
            Snames(SnCnt) = .SeriesCollection(5).Name
            Snumbers(SnCnt) = 5
         End If
         If ActiveSheet.Shapes("boxSnap4").Visible Then
            SnCnt = SnCnt + 1
            Snames(SnCnt) = .SeriesCollection(6).Name
            Snumbers(SnCnt) = 6
         End If
      Else  'Smith
         SnCnt = 1
         Snames(1) = .SeriesCollection(18).Name
         Snumbers(1) = 18
         If ActiveSheet.Shapes("boxSnap1").Visible Then
            SnCnt = SnCnt + 1
            Snames(SnCnt) = .SeriesCollection(19).Name
            Snumbers(SnCnt) = 19
         End If
         If ActiveSheet.Shapes("boxSnap2").Visible Then
            SnCnt = SnCnt + 1
            Snames(SnCnt) = .SeriesCollection(20).Name
            Snumbers(SnCnt) = 20
         End If
         If ActiveSheet.Shapes("boxSnap3").Visible Then
            SnCnt = SnCnt + 1
            Snames(SnCnt) = .SeriesCollection(21).Name
            Snumbers(SnCnt) = 21
         End If
         If ActiveSheet.Shapes("boxSnap4").Visible Then
            SnCnt = SnCnt + 1
            Snames(SnCnt) = .SeriesCollection(22).Name
            Snumbers(SnCnt) = 22
         End If
      End If
      On Error GoTo 0
      
      'Text boxes on form.
      For i = 1 To 6
         If Snumbers(i) > 0 Then
            Me.Controls("txtName" & i).Text = Snames(i)
         Else
            Me.Controls("txtName" & i).Visible = False
         End If
      Next i
      Me.txtName1.SelStart = 0
      Me.txtName1.SelLength = 99
      
      'Shrink the form per unused text boxes.
      ShrinkBy = (6 - SnCnt) * 24
      Me.fraText.Height = Me.fraText.Height - ShrinkBy
      Me.btnOK.Top = Me.btnOK.Top - ShrinkBy
      Me.btnDelete.Top = Me.btnDelete.Top - ShrinkBy
      Me.btnCancel.Top = Me.btnCancel.Top - ShrinkBy
      Me.lblInfo.Top = Me.lblInfo.Top - ShrinkBy
      frmLegend.Height = frmLegend.Height - ShrinkBy
      
      'Possibly disable, but do not hide, the 'Delete Legend' button
      'so the user knows this button will be available.
      Me.btnDelete.Enabled = .HasLegend
   End With
End Sub

Private Sub btnOK_Click()
   Dim PrevPALeft As Single, PrevPAWidth As Single
   Dim LegendLeft As Single, LegendTop As Single
   Dim i As Integer
   
   Application.ScreenUpdating = False
   With ActiveSheet.ChartObjects(1).Chart
      PrevPALeft = .PlotArea.Left
      PrevPAWidth = .PlotArea.Width
      
      'Build new legend, always starting from scratch so the code below
      'can remove 'gridline' legend entries and unused snapshot entries.
      If .HasLegend Then
         LegendLeft = .Legend.Left
         LegendTop = .Legend.Top
         .HasLegend = False  'always start fresh
      End If
      
      .HasLegend = True   'defaults to position right
      With .Legend
         If ActiveSheet.Name = "Custom" Then
            'NOTE:  Since the Custom chart uses both Primary and Secondary axes,
            'the order of the legend entries does not exactly match the order
            'of the chart series.
            ' S#             L#
            '  1  Primary     1
            '  2  Snap1       2
            '  3  Snap2       3
            '  4  Secondary   6
            '  5  Snap3       7
            '  6  Snap4       8
            '  7  ZeroLine    9
            '  8  RefLineP1   4
            '  9  RefLineP2   5
            ' 10  RefLineS1  10
            ' 11  RefLineS2  11
            .LegendEntries(11).Delete  'RefLineS2
            .LegendEntries(10).Delete  'RefLineS1
            .LegendEntries(9).Delete   'ZeroLine
            If Not ActiveSheet.Shapes("boxSnap4").Visible Then .LegendEntries(8).Delete
            If Not ActiveSheet.Shapes("boxSnap3").Visible Then .LegendEntries(7).Delete
            If ActiveSheet.DropDowns("fcboY2axis").ListIndex = 1 Then .LegendEntries(6).Delete
            .LegendEntries(5).Delete   'RefLineP2
            .LegendEntries(4).Delete   'RefLineP1
            If Not ActiveSheet.Shapes("boxSnap2").Visible Then .LegendEntries(3).Delete
            If Not ActiveSheet.Shapes("boxSnap1").Visible Then .LegendEntries(2).Delete
         Else  'Smith
            Do Until .LegendEntries.Count = 7
               .LegendEntries(1).Delete  'grid lines
            Loop
           .LegendEntries(7).Delete  'Marker2
           .LegendEntries(6).Delete  'Marker1
            If Not ActiveSheet.Shapes("boxSnap4").Visible Then .LegendEntries(5).Delete
            If Not ActiveSheet.Shapes("boxSnap3").Visible Then .LegendEntries(4).Delete
            If Not ActiveSheet.Shapes("boxSnap2").Visible Then .LegendEntries(3).Delete
            If Not ActiveSheet.Shapes("boxSnap1").Visible Then .LegendEntries(2).Delete
         End If
         
         'Apply (possibly) new series names per text box entries.
         On Error Resume Next  'in case scales locked in a way to hide entire series
         For i = 1 To SnCnt
            If Me.Controls("txtName" & i).Text <> "" Then
               ActiveSheet.ChartObjects(1).Chart.SeriesCollection(Snumbers(i)).Name = Me.Controls("txtName" & i).Text
            End If
         Next i
         On Error GoTo 0
         
         'Format legend box.
         '''.Shadow = True  'too busy
         .Font.Name = "Arial"
         .Font.FontStyle = "Bold"
         .Font.Size = 8
         .AutoScaleFont = False
         If Val(Application.Version) >= 12 Then
            'Required for XL2007.  Go figure.
            Application.ScreenUpdating = True
            .Interior.ColorIndex = 2
            .Border.Weight = xlHairline
            Application.ScreenUpdating = False
         End If
      End With  'With .Legend
      
      'If a legend was already present put the new one in the same place, user likely
      'changed text of one or more entries.  If new, place at center in top half.
      If LegendLeft > 0 Then
         .Legend.Left = LegendLeft
         .Legend.Top = LegendTop
      Else
         .Legend.Left = (.ChartArea.Width - .Legend.Width) / 2
         .Legend.Top = .PlotArea.Top + .PlotArea.Height * 0.25  'approximation
      End If
      
      'Restore original plot area size.
      .PlotArea.Left = PrevPALeft
      .PlotArea.Width = PrevPAWidth
      'Under XL2000 (and maybe above), must SET the width
      'to a value less than the desired READ width.
      Dim NextTry As Single
      NextTry = PrevPAWidth
      Do While .PlotArea.Width > PrevPAWidth
         NextTry = NextTry - 1
         .PlotArea.Width = NextTry
      Loop
      
      'Restore AutoSize property to all chart-level text boxes.
      'For Custom sheet, reset Markers (shapes) if necessary.
      '(Markers on Smith are regular chart series, repositioned automatically.)
      'Reset txtSmithZo.left, is not put back quite right by Excel after manual PA resize.
      If ActiveSheet.Name = "Custom" Then
         .Shapes("Marker1Text").TextFrame.AutoSize = True
         .Shapes("Marker2Text").TextFrame.AutoSize = True
         If [MarkFreqIndex].Value <> -1 Then PositionMarkers "Marker1", CLng([MarkFreqIndex])
         If [Mark2FreqIndex].Value <> -1 Then PositionMarkers "Marker2", CLng([Mark2FreqIndex])
      Else  'Smith
         .Shapes("txtSmithZo").TextFrame.AutoSize = True
         .Shapes("txtSmithZo").Left = 5.25
      End If
   End With  'With ActiveSheet.ChartObjects(1).Chart
      
   Unload Me
   
   'Instructions to user.
   Application.ScreenUpdating = True
   If [ShowLegendMsg] Then
      MsgBox "After you clear this message, drag and/or" & vbLf & _
             "change the shape of the legend as desired." & vbLf & _
             "When done click anywhere outside the chart." & vbLf & vbLf & _
             "This message will not appear again.", , _
             "To move the legend ..."
      [ShowLegendMsg].Value = False
   End If
End Sub

Private Sub btnDelete_Click()
   Dim NewName As String
   
   ActiveSheet.ChartObjects(1).Chart.HasLegend = False
   
   'Reset all series names to defaults in case changed by user when legend was built.
   With ActiveSheet.ChartObjects(1).Chart
      On Error Resume Next  'can't set name if series not visible
      If ActiveSheet.Name = "Custom" Then
         NewName = [CustomTitles].Offset([CustomYoff])
         Select Case [WhichS2P]
            Case ""
               'No-op, not s2p data, no prefix.
            Case " (S11)"
               NewName = "S11 " & NewName
            Case " (S21)"
               NewName = "S21 " & NewName
            Case " (S12)"
               NewName = "S12 " & NewName
            Case " (S22)"
               NewName = "S22 " & NewName
            Case " (S11/S21)"
               NewName = "S11 " & NewName  'left scale
            Case " (S22/S12)"
               NewName = "S22 " & NewName  'left scale
         End Select
         .SeriesCollection(1).Name = NewName
         .SeriesCollection(2).Name = "Snapshot 1"
         .SeriesCollection(3).Name = "Snapshot 2"
         If [WhichS2P] = " (S11/S21)" Or [WhichS2P] = " (S22/S12)" Then  'Mode RT1/2
            NewName = [CustomTitles].Offset([CustomY2off] - 16)  'from RT1/2 range, M20:M23
         Else
            NewName = [CustomTitles].Offset([CustomY2off])       'from normal range, M2:M18/5
         End If
         Select Case [WhichS2P]
            Case ""
               'No-op, not s2p data, no prefix.
            Case " (S11)"
               NewName = "S11 " & NewName
            Case " (S21)"
               NewName = "S21 " & NewName
            Case " (S12)"
               NewName = "S12 " & NewName
            Case " (S22)"
               NewName = "S22 " & NewName
            Case " (S11/S21)"
               NewName = "S21 " & NewName  'right scale
            Case " (S22/S12)"
               NewName = "S12 " & NewName  'right scale
         End Select
         .SeriesCollection(4).Name = NewName
         .SeriesCollection(5).Name = "Snapshot 3"
         .SeriesCollection(6).Name = "Snapshot 4"
      Else  'Smith
         .SeriesCollection(18).Name = "Gamma"
         .SeriesCollection(19).Name = "Snapshot 1"
         .SeriesCollection(20).Name = "Snapshot 2"
         .SeriesCollection(21).Name = "Snapshot 3"
         .SeriesCollection(22).Name = "Snapshot 4"
      End If
      On Error GoTo 0
   End With
   
   Unload Me
End Sub

Private Sub btnCancel_Click()
   Unload Me
End Sub


Attribute VB_Name = "frmMeasureTL"
Attribute VB_Base = "0{7757BF8D-E6C7-4210-9F88-CA46B593852B}{3E4B30DC-B8F1-4740-8847-1175CF40BA10}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text  ' "AAA" = "aaa"
Option Explicit

Dim DP As Boolean  'Debug.Print control

Private Sub UserForm_Initialize()
   grpLenTerm.Top = 6  'not yet visible
   grpGetInfo.Top = 6  'not yet visible
   grpProcess.Top = 6  'not yet visible
   Me.Height = 227
   
   chkS2P.Value = [TLMeasS2P]
End Sub

Private Sub chkS2P_Change()  'in grpPreparation
   'Change layout of next frame as necessary.
   If chkS2P Then
      grpLenTerm.Caption = "Length"
      grpTermination.Visible = False
   Else
      grpLenTerm.Caption = "Length and Terminations"
      grpTermination.Visible = True
   End If
End Sub

Private Sub btnNo_Click()  'in grpPreparation
   Unload Me
End Sub

Private Sub btnYes_Click()  'in grpPreparation
   'Hide grpPreparation, show grpLenTerm.
   grpPreparation.Visible = False
   grpLenTerm.Visible = True
   
   'Initialize grpLenTerm fields.
   txtLen.Value = CStr([TLMeasLen])
   txtLen.SetFocus
   txtLen.SelStart = 99
   cboLenUnits.List = Array("Feet", "Meters", "Inches", "Millimeters")
   cboLenUnits.Value = [TLMeasUnits]
   optHiLo.Value = [TLMeasHiLo]  'not visible if s2p
   optOcSc.Value = Not [TLMeasHiLo]
End Sub

Private Sub btnCancel_Click()  'in grpLenTerm
   Unload Me
End Sub

Private Sub btnOK1_Click()  'in grpLenTerm
   Dim L1L2 As Boolean  'as opposed to s2p
   
   Dim M1Fname As String
   Dim M2Fname As String
   Dim L1Fname As String
   
   Dim vRXM1 As Variant  'measured line input values
   Dim vRXM2 As Variant
   Dim vRXL1 As Variant  'measured load values (if not OcSc)
   Dim vRXL2 As Variant
   Dim vFreq As Variant
   Dim vPhase As Variant
   Dim vRXS11 As Variant
   Dim vRhoRe As Variant
   Dim vRhoIm As Variant
   Dim vTLmag As Variant
   Dim vTLangle As Variant
   Dim vTLdB As Variant
   Dim PartWL As Double
   Dim RefR As Double
   Dim TC As Long
   Dim MaxTC As Long
   Dim NumQtrs As Long
   Dim FprevQtr As Double
   Dim LenFt As Double
   
   Dim Zo() As ReIm
   Dim GammaL() As ReIm
   Dim VF() As Double
   Dim Loss() As Double
   Dim DistR() As Double
   Dim DistL() As Double
   Dim DistG() As Double
   Dim DistC() As Double
   Dim S21dB() As Double
   Dim Delay() As Double
   
   Dim sInput As Variant
   Dim WrongSep As String
   Dim Gtemp As ReIm
   Dim GmultZ As ReIm
   Dim GdivZ As ReIm
   Dim w As Double
   
   Dim Freq As Double
   Dim VFEst As Double
   Dim Beta0 As Double
   Dim BetaEst As Double
   Dim Beta As Double
   Dim Nhalfs As Double
   Dim VFcor As Double
   
   'Validity checks for length and units.
   If Application.International(xlDecimalSeparator) = "," Then WrongSep = "." Else WrongSep = ","
   On Error Resume Next
   Dim LenVal As Double
   LenVal = CDbl(txtLen.Text)
   If LenVal <= 0 Then Err.Number = 1
   If InStr(txtLen.Text, WrongSep) > 0 Then Err.Number = 1
   If Err.Number <> 0 Then
      HighLight "txtLen"
      MsgBox "Invalid Length.", , "Invalid"
      Exit Sub
   End If
   If cboLenUnits.ListIndex = -1 Then
      HighLight "cboLenUnits"
      MsgBox "Make a selection from the drop down list of available choices.", _
             vbExclamation, "Selection Required for Units"
      Exit Sub
   End If
   'Save for next time.
   [TLMeasLen].Value = LenVal
   [TLMeasUnits].Value = cboLenUnits.Value
   [TLMeasHiLo].Value = optHiLo.Value
   [TLMeasS2P].Value = chkS2P.Value
   'Convert to feet if necessary.
   Select Case cboLenUnits
      Case "Feet"
         LenFt = LenVal
      Case "Meters"
         LenFt = LenVal / 0.3048
      Case "Inches"
         LenFt = LenVal / 12
      Case "Millimeters"
         LenFt = LenVal / 304.8
   End Select
   On Error GoTo 0
   
   'Hide grpLenTerm, show grpGetInfo.
   grpLenTerm.Visible = False
   grpGetInfo.Visible = True
   
   L1L2 = Not chkS2P  'Checkbox "Optional: Use a single s2p ..." not checked
   
   With Sheets("Data")
      If L1L2 Then
         'Get Line input with Hi/Lo (or OcSc) termination (vRXM1/2).
ReadM1:
         If optHiLo Then
            ReadData , , , "Line input with High Resistance termination"  'sets [CurFname] and [TCCnt]
         Else  'OcSc
            ReadData , , , "Line input with Open Circuit termination"
         End If
         If ReadDataCanceled Then  'global variable set by ReadData proc
            Unload Me
            Exit Sub
         End If
         M1Fname = [CurFname]
         MaxTC = [TCcnt]
         vFreq = .Range("TCFreq").Offset(1).Resize(MaxTC, 1)
         vRXM1 = .Range("Rs").Offset(1, 0).Resize(MaxTC, 2)
         vPhase = .Range("Phase").Offset(1).Resize(MaxTC, 1)  'S11 phase, used to get VFEst
         PartWL = 0.25  'repeat interval for S11 phase
ReadM2:
         If optHiLo Then
            ReadData , , , "Line input with Low Resistance termination"  'sets [CurFname] and [TCCnt]
         Else  'OcSc
            ReadData , , , "Line input with Short Circuit termination"
         End If
         If ReadDataCanceled Then  'global variable set by ReadData proc
            Unload Me
            Exit Sub
         End If
         If [CurFname] = M1Fname Then  'same file read twice
            MsgBox "You have loaded the same file twice." & vbLf & _
                   "Try again.", _
                   vbExclamation, "Wrong File"
            GoTo ReadM2
         End If
         If [TCcnt] <> MaxTC Then
            MsgBox "Files do not have the same number of data points, process terminated.", _
                   vbExclamation, "Mismatched Files"
            Unload Me
            Exit Sub
         End If
         M2Fname = [CurFname]  'used in "$TL Parms Measured$.csv" file header
         vRXM2 = .Range("Rs").Offset(1, 0).Resize(MaxTC, 2)
         
         'Fix miniVNA/Pro screw-up if necessary, set first = second.
         If .Range("A2") = "VNA1 / miniVNA / miniVNA PRO" Then
            vFreq(1, 1) = vFreq(2, 1)
            vRXM1(1, 1) = vRXM1(2, 1)
            vRXM1(1, 2) = vRXM1(2, 2)
            vRXM2(1, 1) = vRXM2(2, 1)
            vRXM2(1, 2) = vRXM2(2, 2)
            vPhase(1, 1) = vPhase(2, 1)
         End If
         
         'If not OcSc get Hi/Lo termination R/X data.
         If Not optOcSc Then
ReadL1:
            ReadData , , , "High Resistance termination R/X values"
            L1Fname = [CurFname]
            If ReadDataCanceled Then  'global variable set by ReadData proc
               Unload Me
               Exit Sub
            End If
            vRXL1 = .Range("Rs").Offset(1, 0).Resize(MaxTC, 2)
ReadL2:
            ReadData , , , "Low Resistance termination R/X values"
            If ReadDataCanceled Then  'global variable set by ReadData proc
               Unload Me
               Exit Sub
            End If
            If [CurFname] = L1Fname Then  'same file read twice
               MsgBox "You have loaded the same file twice." & vbLf & _
                      "Try again.", _
                      vbExclamation, "Wrong File"
               GoTo ReadL2
            End If
            If [TCcnt] <> MaxTC Then
               MsgBox "Files do not have the same number of data points, process terminated.", _
                      vbExclamation, "Mismatched Files"
               Unload Me
               Exit Sub
            End If
            vRXL2 = .Range("Rs").Offset(1, 0).Resize(MaxTC, 2)
            
            'Fix miniVNA/Pro screw-up if necessary, set first = second.
            If .Range("A2") = "VNA1 / miniVNA / miniVNA PRO" Then
               vRXL1(1, 1) = vRXL1(2, 1)
               vRXL1(1, 2) = vRXL1(2, 2)
               vRXL2(1, 1) = vRXL2(2, 1)
               vRXL2(1, 2) = vRXL2(2, 2)
            End If
         End If
         
      Else
         'For s2p files, be sure that the Reflection data is retrieved
         'then get S11 and S21 data.
         If [FormWhichS2P] <> " (S11/S21)" And [FormWhichS2P] <> " (S22/S12)" Then
            [FormWhichS2P].Value = " (S11/S21)"
         End If
         ReadData , , , "S2P File"  'sets [CurFname] and [TCCnt]
         If ReadDataCanceled Then  'global variable set by ReadData proc
            Unload Me
            Exit Sub
         End If
         MaxTC = [TCcnt]
         
         'Save Freq and S11 R/X.
         vFreq = .Range("TCFreq").Offset(1).Resize(MaxTC, 1)
         vRXS11 = .Range("Rs").Offset(1).Resize(MaxTC, 2)
         
         'Save data needed to get complex S11 and complex S21 from the S2P file.
         'Also save TLdB (S21 dB) loss data for comparison with Re(Gamma) loss.
         vRhoRe = .Range("RhoRe").Offset(1).Resize(MaxTC, 1)
         vRhoIm = .Range("RhoIm").Offset(1).Resize(MaxTC, 1)
         vTLmag = .Range("TLmag").Offset(1).Resize(MaxTC, 1)
         vTLangle = .Range("TLangle").Offset(1).Resize(MaxTC, 1)
         vTLdB = .Range("TLdB").Offset(1).Resize(MaxTC, 1)
         
         'Validity check for zero-filled S11(S22) or S21(S12) columns.
         If vRhoRe(1, 1) = "" Then vRhoRe(1, 1) = 0  'in case empty, avoid error on .Average
         If vTLmag(1, 1) = "" Then vTLmag(1, 1) = 0
         If Application.Average(vRhoRe) = 0 Or Application.Average(vTLmag) = 0 Then
            MsgBox "File " & [CurFname] & vbLf & _
                   "is missing either Reflection or Transmission data.", _
                   vbExclamation, "Missing Data"
            Unload Me
            Exit Sub
         End If
         
         'Fix miniVNA/Pro screw-up if necessary, set first = second.
         If .Range("A2") = "VNA1 / miniVNA / miniVNA PRO" Then
            vFreq(1, 1) = vFreq(2, 1)
            vRXS11(1, 1) = vRXS11(2, 1)
            vRXS11(1, 2) = vRXS11(2, 2)
            vRhoRe(1, 1) = vRhoRe(2, 1)
            vRhoIm(1, 1) = vRhoIm(2, 1)
            vTLmag(1, 1) = vTLmag(2, 1)
            vTLangle(1, 1) = vTLangle(2, 1)
            vTLdB(1, 1) = vTLdB(2, 1)
         End If
         
         'NOTE: For s2p files, S11 Phase is not a reliable indicator of wavelength.
         'Use S21 Phase instead, captured above as vTLangle.  In that case
         'the repeat interval is 0.5 wavelengths rather than 0.25 wavelengths.
         vPhase = vTLangle  'used to get VFEst
         PartWL = 0.5  'repeat interval for S21 phase
      End If
   End With  'With Sheets("Data")
      
   'Reset focus after Open dialogs.
   AppActivate "Measure Transmission Line Parameters", False
   Me.Repaint
   DoEvents
   
   'Don't try to process unsigned original miniVNA data, complete garbage.
   If Sheets("Custom").Shapes("grpSignX").Visible = True Then
      MsgBox "The Measure TL Parameters function cannot be used" & vbLf & _
             "with data files produced by the original miniVNA.", _
             vbOKOnly, "Unsuitable Data"
      Unload Me
      Exit Sub
   End If
   
   'Don't try to process "smoothed" AIM data.
   If InStr(Sheets("Data").Range("A3"), "smooth") > 0 Then
      MsgBox "The Measure TL Parameters function cannot be used" & vbLf & _
             "with ""smoothed"" AIM data.  Using the AIM control" & vbLf & _
             "program, select Setup > Smoothing > Smoothing OFF" & vbLf & _
             "and repeat the scans.", _
             vbOKOnly, "Unsuitable Data"
      Unload Me
      Exit Sub
   End If
      
   'Make sure user did not load a type 'T' file by mistake.
   If Sheets("Custom").ChartObjects(2).Visible = False Then  'miniSmith not visible
      MsgBox "File " & [CurFname] & vbLf & _
             "does not contain any Reflection data.", _
             vbExclamation, "Missing Data"
      Unload Me
      Exit Sub
   End If
   
   'Ensure minimum number of data points.
   If MaxTC < 4 Then
      MsgBox "The Measure TL Parameters function cannot be used" & vbLf & _
             "with data files containing less than four points.", _
             vbOKOnly, "Unsuitable Data"
      Unload Me
      Exit Sub
   End If
   
   'Done getting data files.  Hide grpGetInfo, show grpProcess.
   grpGetInfo.Visible = False
   grpProcess.Visible = True
   Me.Repaint
   DoEvents

   'Find quarter-wave (half-wave) points, Phase sign changes.
   'Compute average of estimated VF for each quarter (half) wave delta, used below.
   '>>> WARNING:  Don't try to calculate VFEst from logarithmic data. <<<
   VFEst = 0
   NumQtrs = 0
   If Abs((vFreq(MaxTC - 1, 1) - vFreq(MaxTC - 2, 1)) - _
          (vFreq(MaxTC, 1) - vFreq(MaxTC - 1, 1))) < 0.00001 Then
      'Step sizes within 10 Hz, assume linear frequencies.
      For TC = 1 To MaxTC - 1
         If Sgn(vPhase(TC + 1, 1)) <> Sgn(vPhase(TC, 1)) Then  'found Phase sign change
            NumQtrs = NumQtrs + 1
            If NumQtrs >= 2 Then
               'Compute (running total) estimated VF.
               VFEst = VFEst + _
                       LenFt * (vFreq(TC, 1) - FprevQtr) / (PartWL * SL)
            End If
            FprevQtr = vFreq(TC, 1)
         End If
      Next TC
   Else
      NumQtrs = -1  'signal used for InputBox prompt below
   End If
   If NumQtrs >= 2 Then
      'Average from running totals.
      VFEst = VFEst / (NumQtrs - 1)
   Else
      'Only 1 (or none) Phase sign changes found, or logarithmic steps.  Ask user for VFEst.
      On Error Resume Next
      sInput = CStr(0.66)
      Do
         sInput = InputBox( _
               "Because of the " & _
               IIf(NumQtrs = -1, "logarithmic frequency steps, ", "limited range of data, ") & _
               "Zplots does not have enough information " & _
               "to estimate the Velocity Factor." & vbLf & vbLf & _
               "Enter estimated VF, " & Format(0.5, "0.0") & " to " & Format(1, "0.0") & ".", _
               "Estimated VF ?", sInput)
         If sInput = "" Then  'Cancel pressed from InputBox
            Unload Me
            Exit Sub
         End If
         Err.Clear
         VFEst = CDbl(sInput)
         If VFEst < 0.5 Or VFEst > 1 Then Err.Number = 1
         If InStr(sInput, WrongSep) > 0 Then Err.Number = 1
         If Err.Number <> 0 Then
            MsgBox "Invalid VF.", , "Invalid"
         Else
            Exit Do  'valid response
         End If
      Loop
      On Error GoTo 0
      Me.Repaint  'fill hole left by InputBox
      DoEvents
   End If
   
   'Now calculate the following items for each frequency.
   ReDim Zo(1 To MaxTC)
   ReDim GammaL(1 To MaxTC)
   ReDim Loss(1 To MaxTC)
   ReDim VF(1 To MaxTC)
   ReDim DistR(1 To MaxTC)
   ReDim DistL(1 To MaxTC)
   ReDim DistG(1 To MaxTC)
   ReDim DistC(1 To MaxTC)
   ReDim Delay(1 To MaxTC)
   ReDim S21dB(1 To MaxTC)
   
   Dim ZM1 As ReIm    'measured data with termination 1
   Dim ZM2 As ReIm    'measured data with termination 2
   Dim ZL1 As ReIm    'termination 1 (if not OcSc)
   Dim ZL2 As ReIm    'termination 2     "
   Dim Term1 As ReIm  'various terms
   Dim Term2 As ReIm  '  in
   Dim Term3 As ReIm  '    Weller
   Dim Term4 As ReIm  '      Zo formula
   Dim S11 As ReIm    'used in
   Dim S21 As ReIm    '  Tom Baier Zo formula
   RefR = 50          'standard S21 reference
   
   lblCalc1.Visible = True
   Me.Repaint
   DoEvents
      
   'Loop through all frequencies, calculate Zo.
   If L1L2 Then
      If optHiLo Then
         'For Hi/Lo termination data, calculate Zo using Weller formula.
         '  Zo = Sqrt(((ZL2-ZM2)*ZL1*ZM1 - (ZL1-ZM1)*ZL2*ZM2) / ((ZL2-ZM2) - (ZL1-ZM1)))
         For TC = 1 To MaxTC
            ZM1.Re = vRXM1(TC, 1)
            ZM1.Im = vRXM1(TC, 2)
            ZM2.Re = vRXM2(TC, 1)
            ZM2.Im = vRXM2(TC, 2)
            ZL1.Re = vRXL1(TC, 1)
            ZL1.Im = vRXL1(TC, 2)
            ZL2.Re = vRXL2(TC, 1)
            ZL2.Im = vRXL2(TC, 2)
            Term1 = IMSUB(ZL2, ZM2)
            Term2 = IMPRODUCT(ZL1, ZM1)
            Term3 = IMSUB(ZL1, ZM1)
            Term4 = IMPRODUCT(ZL2, ZM2)
            
            Zo(TC) = IMSQRT( _
                        IMDIV( _
                           IMSUB(IMPRODUCT(Term1, Term2), IMPRODUCT(Term3, Term4)), _
                           IMSUB(Term1, Term3)))
         Next TC
      Else
         'For Oc/Sc data, calculate Zo using Chipman method.
         '  Zo = Sqrt(Zoc*Zsc)
         For TC = 1 To MaxTC
            ZM1.Re = vRXM1(TC, 1)
            ZM1.Im = vRXM1(TC, 2)
            ZM2.Re = vRXM2(TC, 1)
            ZM2.Im = vRXM2(TC, 2)
            
            Zo(TC) = IMSQRT(IMPRODUCT(ZM1, ZM2))
         Next TC
      End If
   Else
      'For s2p data, calculate Zo from S11/S21 using Tom Baier formula.
      '  Zo = 50 * SQRT((s11+s21+1)*(s11-s21+1) / ((s11+s21-1)*(s11-s21-1)))
      For TC = 1 To MaxTC
         'First get complex S11 and complex S21.
         S11.Re = vRhoRe(TC, 1)
         S11.Im = vRhoIm(TC, 1)
         S21.Re = vTLmag(TC, 1) * Cos(vTLangle(TC, 1) * DEG2RAD)
         S21.Im = vTLmag(TC, 1) * Sin(vTLangle(TC, 1) * DEG2RAD)
         
         'Calculate Zo.
         Zo(TC) = IMPRODUCT(COMPLEX(RefR, 0), _
                     IMSQRT(IMDIV(IMPRODUCT(IMSUM(COMPLEX(S11.Re + 1, S11.Im), S21), _
                                            IMSUB(COMPLEX(S11.Re + 1, S11.Im), S21)), _
                                  IMPRODUCT(IMSUM(COMPLEX(S11.Re - 1, S11.Im), S21), _
                                            IMSUB(COMPLEX(S11.Re - 1, S11.Im), S21)))))
      Next TC
   End If
   
   'Loop through all frequencies, calculate GammaL using Weller formula.
   '  tanh(GammaL) = Zo * (Zload - Zin) / (Zload * Zin - Zo^2)
   'For L1/L2 data, use L2 (or Sc) for Zload and M2 R/X for Zin.
   'For s2p data, use RefR+j0 (typically 50+j0) for Zload and S11 R/X for Zin.
   'Note for s2p data that loss is calculated from GammaL, *NOT* by
   'using the S21 dB data.  This produces results consistent with L1/L2
   'data and avoids the "ripples" or "waves" seen with non-50 ohm lines.
   Dim Zload As ReIm
   Dim Zin As ReIm
   For TC = 1 To MaxTC
      If L1L2 Then
         If optHiLo Then
            Zload.Re = vRXL2(TC, 1)
            Zload.Im = vRXL2(TC, 2)
         Else
            Zload.Re = 0  'Sc
            Zload.Im = 0
         End If
         Zin.Re = vRXM2(TC, 1)
         Zin.Im = vRXM2(TC, 2)
      Else
         Zload.Re = RefR
         Zload.Im = 0
         Zin.Re = vRXS11(TC, 1)
         Zin.Im = vRXS11(TC, 2)
      End If
      
      GammaL(TC) = IMATANH( _
                      IMPRODUCT(Zo(TC), _
                             IMDIV(IMSUB(Zload, Zin), _
                                   IMSUB(IMPRODUCT(Zload, Zin), _
                                         IMPRODUCT(Zo(TC), Zo(TC))))))
      
''''*********  Test of Chipman for GammaL
'''ZM1.Re = vRXM1(TC, 1)  'Zoc
'''ZM1.Im = vRXM1(TC, 2)
'''ZM2.Re = vRXM2(TC, 1)  'Zsc
'''ZM2.Im = vRXM2(TC, 2)
'''GammaL(TC) = IMATANH(IMSQRT(IMDIV(ZM2, ZM1)))
''''*********
      'Loss from alpha term.
      Loss(TC) = GammaL(TC).Re * NEPER
      
      'VF from beta term.
      'Algorithm for resolving phase ambiguity by Witt, ACV6, pg 184 (TLMEAS sheet).
      Freq = vFreq(TC, 1)
      Beta0 = GammaL(TC).Im / LenFt                'for Nhalfs=0
      BetaEst = (TWOPI * Freq) / (SL * VFEst)      'using estimated VF
      Nhalfs = Application.Round((LenFt / ONEPI) * (BetaEst - Beta0), 0)
      Beta = Beta0 + (Nhalfs * ONEPI / LenFt)      'corrected Beta
      VF(TC) = (TWOPI * Freq) / (SL * Beta)        'corrected VF
      
      VFEst = VF(TC)        'better estimate for next frequency
      GammaL(TC).Im = Beta  'save corrected Beta for use in calculating DistR/L/G/C below
   Next TC
   
   'Check for inadvertent swapping of M1/M2 (or L1/L2) input files.
   If L1L2 Then  'not s2p data
      If Application.Max(VF) > 2 Or Application.Min(VF) < 0 Then
         If optHiLo Then
            MsgBox "It appears you may have swapped the High Resistance" & vbLf & _
                   "and Low Resistance files.  Results may not be valid.", _
                   vbExclamation, "Files Swapped?"
         Else
            MsgBox "It appears you may have swapped the Open Circuit" & vbLf & _
                   "and Short Circuit files.  Results may not be valid.", _
                   vbExclamation, "Files Swapped?"
         End If
         Me.Repaint  'fill hole left by MsgBox
         DoEvents
      End If
   End If
   
   'Calculate DistR/L/G/C.  Algorithm described at:
   'http://na.tm.agilent.com/plts/help/WebHelp/Analyzing/Analyzing_Transmission_Line_Parameters.html
   'See section "Extracting Fitted RLCG Parameters from S-Parameters" equations 7-10.
   'Also calculate Delay(ns).
   For TC = 1 To MaxTC
      w = TWOPI * vFreq(TC, 1) * 1000000#  'omega
      Gtemp.Re = GammaL(TC).Re / LenFt
      Gtemp.Im = GammaL(TC).Im  'Beta term already corrected to /ft
      GmultZ = IMPRODUCT(Gtemp, Zo(TC))
      GdivZ = IMDIV(Gtemp, Zo(TC))
      DistR(TC) = GmultZ.Re * 1000               'mOhms/ft
      DistL(TC) = GmultZ.Im / w * 1000000000#    'nH/ft
      DistG(TC) = GdivZ.Re * 1000000#            'uS/ft
      DistC(TC) = GdivZ.Im / w * 1000000000000#  'pF/ft
      
      Delay(TC) = LenFt / (SLfps * VF(TC)) * 1000000000#  'ns
   Next TC
   
   'Calculate/transfer S21dB loss to compare with Re(Gamma) loss.
   Dim GamRe As Double
   Dim GamIm As Double
   Dim Sinh_gL As ReIm
   Dim Cosh_gL As ReIm
   Dim Ds As ReIm
   If L1L2 Then
      'Calculate.
      With Application
         For TC = 1 To MaxTC
            GamRe = GammaL(TC).Re
            GamIm = GammaL(TC).Im * LenFt  'Beta term was set to /ft for R/L/G/C calcs above
            Sinh_gL = COMPLEX(Cos(GamIm) * .Sinh(GamRe), Sin(GamIm) * .Cosh(GamRe))
            Cosh_gL = COMPLEX(Cos(GamIm) * .Cosh(GamRe), Sin(GamIm) * .Sinh(GamRe))
            Ds = IMSUM(IMPRODUCT(IMPRODUCT(COMPLEX(2 * RefR, 0), Zo(TC)), Cosh_gL), _
                       IMPRODUCT(IMSUM(COMPLEX(RefR ^ 2, 0), IMPRODUCT(Zo(TC), Zo(TC))), Sinh_gL))
            S21dB(TC) = -20 * .Log10(IMABS(IMDIV(IMPRODUCT(COMPLEX(2 * RefR, 0), Zo(TC)), Ds)))
         Next TC
      End With
   Else
      'Use S21 data from s2p file.
      For TC = 1 To MaxTC
         S21dB(TC) = -vTLdB(TC, 1)
      Next TC
   End If
   
   '==================   End of "per each frequency" calculations   ==================
   
   'Now derive "electrical characteristic" parameters ZoNom, VFNom, K0/K1/K2.
   'Do K0/K1/K2 first since they are not sensitive to ZoNom (none) or VFNom (slightly).
   
   Dim ZoNom As Double
   Dim VFnom As Double
   Dim LenFtNom As Double
   Dim K0 As Double
   Dim K1 As Double
   Dim K2 As Double
   lblCalc2.Visible = True
   Me.Repaint
   DoEvents
   
   'Need to convert loss values to per 100 ft.
   Dim Loss100() As Double
   ReDim Loss100(1 To MaxTC, 1 To 1)
   
   For TC = 1 To MaxTC
      Loss100(TC, 1) = Loss(TC) / LenFt * 100  'to dB/100ft for K0/K1/K2 calculations
   Next TC
   
   'Use Nelder Mead to find the minimum *relative* SSE of the Re(Gamma) loss.
   'Re(Gamma) does not depend *at all* on ZoNom so just use average.  For VFNom,
   'start by using the VF at the highest frequency, which as of now is the closest
   'known to the final (yet to be determined) VFNom.
   
   ZoNom = 0
   For TC = 1 To MaxTC
      ZoNom = ZoNom + Zo(TC).Re
   Next TC
   ZoNom = ZoNom / CDbl(MaxTC)  'initial setting, simple average of all Zo.Re values
   
   VFnom = VF(MaxTC)  'initial setting, VF at highest frequency

DP = False
If DP Then Debug.Print "================================================"
If DP Then Debug.Print "Before first Nelder Mead"
If DP Then Debug.Print Format(ZoNom, "0.00"); Spc(3); Format(VFnom, "0.0000")

   'Set initial K0/K1/K2 values the same way as in Cable Specs sheet, TopLoss100 / Sqr(TopFreq).
   Dim StartParms() As Double
   Dim ResultParms As Variant
   ReDim StartParms(1 To 3)
   
   StartParms(1) = 0  'K0
   StartParms(2) = Loss100(MaxTC, 1) / Sqr(vFreq(MaxTC, 1))  'K1
   StartParms(3) = 0  'K2
   
   ResultParms = NelderMead(StartParms, vFreq, Loss100, ZoNom, VFnom)
   K0 = ResultParms(1)
   K1 = ResultParms(2)
   K2 = ResultParms(3)
If DP Then Debug.Print "After first Nelder Mead"
If DP Then Debug.Print Format(ZoNom, "0.00"); Spc(3); Format(VFnom, "0.0000"); Spc(3); _
                       Format(K0, "0.000000"); Spc(3); Format(K1, "0.000000"); _
                                               Spc(3); Format(K2, "0.000000")
   If Application.Max(K0, K1, K2) > 10 Or _
      Application.Min(K0, K1, K2) < -10 Or _
      Application.Max(K0, K1, K2) < 0 Then
      'Garbage, reset.
      K0 = 0
      K1 = Loss100(MaxTC, 1) / Sqr(vFreq(MaxTC, 1))
      K2 = 0
   End If
   
   'Next use GoalSeek to get VFNom based on calculated VF value at the highest
   'frequency.  To start, for ZoNom just use the average of all the Zo.Re values,
   'as above.  Note that VF from Gamma is not very sensitive to gross changes in Zohf.
   
   With Sheets("Data")
      'Cells AF48-AF54 are input to the GetTLParms function.  See module TlineFunctions.
      Application.Calculation = xlCalculationManual
      If Application.MaxChange > 0.000001 Then Application.MaxChange = 0.000001  'insure enough precision
      .Range("AF48").Value = vFreq(MaxTC, 1)
      .Range("AF49").Value = LenFt
      .Range("AF50").Value = ZoNom
      .Range("AF51").Value = VFnom
      .Range("AF52").Value = K1
      .Range("AF53").Value = K2
      .Range("AF54").Value = K0
      Application.Calculation = xlCalculationAutomatic
      
      'Cells AF57-AF60 are the returned values from GetTLParms:
      '   Zo.Re, Zo.Im, VF corrected, Loss (dB/LenFt)
      .Range("AF59").GoalSeek _
                     Goal:=VF(MaxTC), _
                     ChangingCell:=.Range("AF51")  'changing VFNom
      VFnom = .Range("AF51")  'refined value
      If VFnom < 0.5 Or VFnom > 1 Then VFnom = VFEst   'avoid garbage
   End With
   
   'Now use GoalSeek to get ZoNom.  Target the first available odd 8th wave point.
   Dim F8th As Double
   Dim OffsetF8th As Long
   
   F8th = (0.125 * VFnom * SL) / LenFt
   Do While vFreq(1, 1) > F8th
      F8th = F8th + (0.25 * VFnom * SL) / LenFt
   Loop
If DP Then Debug.Print "F8th = " & Format(F8th, "0.000") & " MHz"
   
   With Sheets("Data")
      '''OffsetF8th = Application.Match(F8th, .Range("TCFreq").Offset(1, 0).Resize(MaxTC), 1)
      OffsetF8th = Application.Match(F8th, vFreq, 1)
      .Range("AF48").Value = vFreq(OffsetF8th, 1)
      .Range("AF57").GoalSeek _
                     Goal:=Zo(OffsetF8th).Re, _
                     ChangingCell:=.Range("AF50")  'changing ZoNom
      ZoNom = .Range("AF50")  'refined value
   End With
   
   'Now iterate through all the parms again to get refined values.
   'First use refined value for VFNom to get refined K0/K1/K2.
   lblCalc3.Visible = True
   Me.Repaint
   DoEvents
   
   'Use Nelder Mead to adjust K0/K1/K2 for minimum relative SSE.
   'Note initial parm values are results from previous call.
   StartParms(1) = K0
   StartParms(2) = K1
   StartParms(3) = K2
   ResultParms = NelderMead(StartParms, vFreq, Loss100, ZoNom, VFnom)
   K0 = ResultParms(1)
   K1 = ResultParms(2)
   K2 = ResultParms(3)
If DP Then Debug.Print "After second Nelder Mead"
If DP Then Debug.Print Format(ZoNom, "0.00"); Spc(3); Format(VFnom, "0.0000"); Spc(3); _
                       Format(K0, "0.000000"); Spc(3); Format(K1, "0.000000"); _
                                               Spc(3); Format(K2, "0.000000")
   If Application.Max(K0, K1, K2) > 10 Or _
      Application.Min(K0, K1, K2) < -10 Or _
      Application.Max(K0, K1, K2) < 0 Then
      'Garbage, reset.
      K0 = 0
      K1 = Loss100(MaxTC, 1) / Sqr(vFreq(MaxTC, 1))
      K2 = 0
   End If
   
   'Refined values for ZoNom and K0/K1/K2 to get refined VFNom.
   With Sheets("Data")
      Application.Calculation = xlCalculationManual
      .Range("AF48").Value = vFreq(MaxTC, 1)
      .Range("AF49").Value = LenFt
      .Range("AF50").Value = ZoNom
      .Range("AF51").Value = VFnom
      .Range("AF52").Value = K1
      .Range("AF53").Value = K2
      .Range("AF54").Value = K0
      Application.Calculation = xlCalculationAutomatic
      .Range("AF59").GoalSeek _
                     Goal:=VF(MaxTC), _
                     ChangingCell:=.Range("AF51")  'changing VFNom
      VFnom = .Range("AF51")  'refined value
      If VFnom < 0.5 Or VFnom > 1 Then VFnom = VFEst   'avoid garbage
   End With
   
   'Refined value for VFnom (now in "AF51") to get refined ZoNom.
   With Sheets("Data")
      .Range("AF48").Value = vFreq(OffsetF8th, 1)
      .Range("AF57").GoalSeek _
                     Goal:=Zo(OffsetF8th).Re, _
                     ChangingCell:=.Range("AF50")  'changing ZoNom
      ZoNom = .Range("AF50")  'refined value
   End With
If DP Then Debug.Print "After second VF and Zo GoalSeeks"
If DP Then Debug.Print Format(ZoNom, "0.00"); Spc(3); Format(VFnom, "0.0000"); Spc(3); _
                       Format(K0, "0.000000"); Spc(3); Format(K1, "0.000000"); _
                                               Spc(3); Format(K2, "0.000000")
   
   'Last step, round parameters to desired precision.
   ZoNom = Application.Round(ZoNom, IIf(ZoNom < 100, 2, 1))
   VFnom = Application.Round(VFnom, 4)
   K0 = Application.Round(K0, 6)
   K1 = Application.Round(K1, 6)
   K2 = Application.Round(K2, 6)
   
   'Create "TL Parms" temporary file.
   'Adjust spacing between columns in ParmsA/B/C as close as possible with proportional fonts.
   Dim FileToOpen As String
   Dim ParmsA As String
   Dim ParmsB As String
   Dim ParmsC As String
   Dim Wmax As Single
   Dim i As Long
   
   With Sheets("Custom").Shapes("boxTLParmsInfo")
      .TextFrame.Characters.Text = "Parms derived from measurements:"
      Wmax = .Width + 1.5  '1 space is .Width = 3
      
      ParmsA = "Zo(nom.): " & Format(ZoNom, IIf(ZoNom < 100, "0.00", "0.0"))
      For i = 3 To 25
         .TextFrame.Characters.Text = ParmsA & Space(i) & "Kx: 0.000000"
         If .Width > Wmax Then
            i = i - 1
            Exit For
         End If
      Next i
      ParmsA = ParmsA & Space(i) & "K0: " & Format(K0, "0.000000")
      
      ParmsB = "VF(nom.): " & Format(VFnom, "0.0000")
      For i = 3 To 25
         .TextFrame.Characters.Text = ParmsB & Space(i) & "Kx: 0.000000"
         If .Width > Wmax Then
            i = i - 1
            Exit For
         End If
      Next i
      ParmsB = ParmsB & Space(i) & "K1: " & Format(K1, "0.000000")
      
      Select Case cboLenUnits
         Case "Feet"
            ParmsC = "Len(ft): " & CStr(LenVal)
         Case "Meters"
            ParmsC = "Len(m): " & CStr(LenVal)
         Case "Inches"
            ParmsC = "Len(in): " & CStr(LenVal)
         Case "Millimeters"
            ParmsC = "Len(mm): " & CStr(LenVal)
      End Select
      For i = 3 To 25
         .TextFrame.Characters.Text = ParmsC & Space(i) & "Kx: 0.000000"
         If .Width > Wmax Then
            i = i - 1
            Exit For
         End If
      Next i
      ParmsC = ParmsC & Space(i) & "K2: " & Format(K2, "0.000000")
   End With

   FileToOpen = ThisWorkbook.Path & "\$TL Parms Measured$.csv"
   Open FileToOpen For Output As #1
   Write #1, "Transmission Line Parameters Measured by Zplots"
   If L1L2 Then
      Write #1, "Files:  " & M1Fname & "   /   " & M2Fname
   Else
      Write #1, "Files:  " & [CurFname] & "   /   " & [CurFname]
   End If
   Write #1, "Derived from measurements:   " & _
             ParmsA & "     " & ParmsB & "     " & ParmsC
   Write #1, , , , ZoNom, VFnom, K1, K2, LenVal, cboLenUnits, _
             ParmsA, ParmsB, ParmsC, K0
   Write #1, "Freq(MHz)", "|Zo|", "Ro", "Xo", "VF", _
             "Loss(dB)", "Loss/100ft", "Loss/100m", "|S21|(dB)", _
             "DistR(ft)", "DistL(ft)", "DistG(ft)", "DistC(ft)", _
             "DistR(m)", "DistL(m)", "DistG(m)", "DistC(m)", "Delay(ns)"
   For TC = 1 To MaxTC
      Write #1, vFreq(TC, 1), IMABS(Zo(TC)), Zo(TC).Re, Zo(TC).Im, VF(TC), _
                Loss(TC), Loss(TC) / LenFt * 100, _
                               Loss(TC) / (LenFt * 0.3048) * 100, S21dB(TC), _
                DistR(TC), DistL(TC), DistG(TC), DistC(TC), _
                DistR(TC) / 0.3048, DistL(TC) / 0.3048, DistG(TC) / 0.3048, DistC(TC) / 0.3048, _
                Delay(TC)
   Next TC
   Close #1
   
   'Load the temporary file.
   ReadData FileToOpen
   
   Unload Me

   'Garbage results?
   If VFnom > 1 Or VFnom < 0.2 Or ZoNom <= 0 Or Loss(1) = 180 Then
      MsgBox "Results not valid.  Possible measurement errors" & vbLf & _
             "and/or incorrect length specification.", vbExclamation, "Invalid Results"
   End If
End Sub

'From "Option Pricing Models and Volatility Using Excel-VBA"
'by Fabrice Douglas Rouah, Gregory Vainberg
'See http://media.wiley.com/product_data/excerpt/43/04717946/0471794643.pdf

Private Function NelderMead(StartParms() As Double, _
                            vFreq As Variant, _
                            Loss100() As Double, _
                            Zohf As Double, _
                            VFhf As Double) As Variant
                            
   'Note that {VFreq,Loss100,Zohf,VFhf} are just passed through to CalcSSE function.
   
   Dim Simplex As Variant
   Dim X1() As Double, Xn() As Double
   Dim Xw() As Double, Xbar() As Double
   Dim Xr() As Double, Xe() As Double
   Dim Xc() As Double, Xcc() As Double
   Dim NewPoint As Variant
   Dim PassParms() As Double

   Dim F1 As Double, Fn As Double
   Dim Fw As Double
   Dim Fr As Double, Fe As Double
   Dim Fc As Double, Fcc As Double
   Dim NewF As Double
   Dim Shrink As Boolean
   
   Dim MaxIterations As Double
   Dim Tolerance As Double
   Dim Rho As Double, Xi As Double
   Dim Gam As Double, Sigma As Double
   Dim n As Long
   Dim i As Long, j As Long
   Dim Iter As Long
   
   MaxIterations = 1000
   Tolerance = 0.00000001
   Rho = 1
   Xi = 2
   Gam = 0.5
   Sigma = 0.5
   
   n = UBound(StartParms, 1)
   
   ReDim Simplex(1 To n + 1, 1 To n + 1)
   ReDim X1(1 To n), Xn(1 To n)
   ReDim Xw(1 To n), Xbar(1 To n)
   ReDim Xr(1 To n), Xe(1 To n)
   ReDim Xc(1 To n), Xcc(1 To n)
   ReDim NewPoint(1 To n)
   ReDim PassParms(1 To n)
   
   'Create initial Simplex.
   For i = 1 To n
      Simplex(1, i + 1) = StartParms(i)
   Next i
   Simplex(1, 1) = CalcSSE(StartParms, vFreq, Loss100, Zohf, VFhf)
   
   For j = 1 To n
      For i = 1 To n
         If (i = j) Then
            If (StartParms(i) = 0) Then
               Simplex(j + 1, i + 1) = 0.05
            Else
               Simplex(j + 1, i + 1) = StartParms(i) * 1.05
            End If
         Else
            Simplex(j + 1, i + 1) = StartParms(i)
         End If
         PassParms(i) = Simplex(j + 1, i + 1)
      Next i
      Simplex(j + 1, 1) = CalcSSE(PassParms, vFreq, Loss100, Zohf, VFhf)
   Next j
   
   'Crawl.
   For Iter = 1 To MaxIterations
      Simplex = BubSortRows(Simplex)  'best vertex row 1, worst vertex row n+1
If DP Then Debug.Print Format(Iter, "000"); Spc(3); Format(Simplex(1, 1), "0.00000000"); _
            "/"; Format(Simplex(n + 1, 1), "0.00000000"); _
            Spc(3); Format(Simplex(1, 2), "0.000000"); _
            Spc(3); Format(Simplex(1, 3), "0.000000"); _
            Spc(3); Format(Simplex(1, 4), "0.000000")     '; _
            '''Spc(3); Format(MaxError, "0.0000")
      If (Abs(Simplex(1, 1) - Simplex(n + 1, 1)) < Tolerance) Then
         'Converged to Tolerance criteria, done.
If DP Then Debug.Print "Iterations=" & Iter
         Exit For
      End If
      
      F1 = Simplex(1, 1)  'best vertex
      For i = 1 To n
         X1(i) = Simplex(1, i + 1)
      Next i
      Fn = Simplex(n, 1)  'second worst vertex
      For i = 1 To n
         Xn(i) = Simplex(n, i + 1)
      Next i
      Fw = Simplex(n + 1, 1)  'worst vertex
      For i = 1 To n
         Xw(i) = Simplex(n + 1, i + 1)
      Next i
      For i = 1 To n  'find centroid
         Xbar(i) = 0
         For j = 1 To n
            Xbar(i) = Xbar(i) + Simplex(j, i + 1)
         Next j
         Xbar(i) = Xbar(i) / CDbl(n)
      Next i
      For i = 1 To n
         Xr(i) = Xbar(i) + Rho * (Xbar(i) - Xw(i))
      Next i
      Fr = CalcSSE(Xr, vFreq, Loss100, Zohf, VFhf)  'reflection point
      
      Shrink = False
      If ((Fr >= F1) And (Fr < Fn)) Then
         NewPoint = Xr
         NewF = Fr
      ElseIf (Fr < F1) Then
         For i = 1 To n
            Xe(i) = Xbar(i) + Xi * (Xr(i) - Xbar(i))
         Next i
         Fe = CalcSSE(Xe, vFreq, Loss100, Zohf, VFhf)  'expansion point
         If (Fe < Fr) Then
            NewPoint = Xe
            NewF = Fe
         Else
            NewPoint = Xr
            NewF = Fr
         End If
      ElseIf (Fr >= Fn) Then
         If ((Fr >= Fn) And (Fr < Fw)) Then
            For i = 1 To n
               Xc(i) = Xbar(i) + Gam * (Xr(i) - Xbar(i))
            Next i
            Fc = CalcSSE(Xc, vFreq, Loss100, Zohf, VFhf)  'outside contraction point
            If (Fc <= Fr) Then
               NewPoint = Xc
               NewF = Fc
            Else
               Shrink = True
            End If
         Else
            For i = 1 To n
               Xcc(i) = Xbar(i) - Gam * (Xbar(i) - Xw(i))
            Next i
            Fcc = CalcSSE(Xcc, vFreq, Loss100, Zohf, VFhf)  'inside contraction point
            If (Fcc < Fw) Then
               NewPoint = Xcc
               NewF = Fcc
            Else
               Shrink = True
            End If
         End If
      End If
      
      If (Shrink) Then
         For j = 2 To n + 1
            'Update v2.3:  Corrected final term to be X1(i) not X1(1).
            For i = 1 To n
               Simplex(j, i + 1) = X1(i) + Sigma * (Simplex(j, i + 1) - X1(i))
               PassParms(i) = Simplex(j, i + 1)
            Next i
            Simplex(j, 1) = CalcSSE(PassParms, vFreq, Loss100, Zohf, VFhf)
         Next j
      Else
         For i = 1 To n
            Simplex(n + 1, i + 1) = NewPoint(i)
         Next i
         Simplex(n + 1, 1) = NewF
      End If
   Next Iter
   
   If (Iter = MaxIterations + 1) Then
      MsgBox "Maximum Iteration (" & MaxIterations & ") exceeded."
      NelderMead = StartParms
   Else
      Simplex = BubSortRows(Simplex)
      For j = 2 To n + 1
         PassParms(j - 1) = Simplex(1, j)
      Next j
      NelderMead = PassParms
   End If
End Function

Private Function BubSortRows(Simplex As Variant) As Variant
   Dim Sorted As Variant
   Dim Temp() As Double
   Dim NumRows As Long
   Dim NumCols As Long
   Dim i As Long
   Dim j As Long
   Dim k As Long
   
   Sorted = Simplex
   NumRows = UBound(Sorted, 1)
   NumCols = UBound(Sorted, 2)
   ReDim Temp(1 To NumCols)
   
   For i = NumRows - 1 To 1 Step -1
      For j = 1 To i
         If (Sorted(j, 1) > Sorted(j + 1, 1)) Then
            For k = 1 To NumCols
               Temp(k) = Sorted(j + 1, k)
               Sorted(j + 1, k) = Sorted(j, k)
               Sorted(j, k) = Temp(k)
            Next k
         End If
      Next j
   Next i
   
   BubSortRows = Sorted
End Function

'Function invoked by NelderMead function.
'Each call passes a new Parms (K0,K1,K2) combination.

Private Function CalcSSE(Parms() As Double, _
                         vFreq As Variant, _
                         Loss100() As Double, _
                         Zohf As Double, _
                         VFhf As Double) As Double
   Dim K0 As Double
   Dim K1 As Double
   Dim K2 As Double
   K0 = Parms(1)
   K1 = Parms(2)
   K2 = Parms(3)
   
   'Do not allow negative K0/K1.
   If K0 < 0 Or K1 < 0 Then
      CalcSSE = 1E+38
      Exit Function
   End If

   Dim Freq As Double
   Dim FuncVal As Double
   Dim RelDif As Double
   Dim SumSq As Double
   Dim j As Long
   Dim NumFreqs As Long
   Dim StepSize As Long
   
   Dim Rdc As Double, Rhf As Double, Lhf As Double, Ghf As Double, Chf As Double
   Dim w As Double
   Dim Zint As ReIm
   Dim RjwL As ReIm
   Dim GjwC As ReIm
   Dim Zo As ReIm
   Dim Gamma As ReIm
   Dim ZtRI As ReIm
   Dim GammaLpos As ReIm
   Dim GammaLneg As ReIm
   Dim TermA As ReIm
   Dim TermB As ReIm
   Dim S21 As ReIm
   
   NumFreqs = UBound(vFreq, 1)
   'Update v2.3:  Use 500 samples instead of 40.
   StepSize = NumFreqs / 500  '500 samples
   If StepSize = 0 Then StepSize = 1
   '''StepSize = 1  'for test and debug
   SumSq = 0

   For j = 1 To NumFreqs Step StepSize
      Freq = vFreq(j, 1)
      Rdc = 2 * (K0 / 100 / NEPER) * Zohf              'Ohms/ft  (note K0 is dB/100ft)
      Rhf = 2 * (K1 / 100 / NEPER * Sqr(Freq)) * Zohf  'Ohms/ft  (note K1 is dB/100ft)
      Lhf = Zohf / (SLfps * VFhf)                      'Henries/ft
      Ghf = 2 * (K2 / 100 / NEPER * Freq) / Zohf       'Siemens/ft  (note K2 is dB/100ft)
      Chf = 1 / (Zohf * SLfps * VFhf)                  'Farads/ft
      w = TWOPI * Freq * 1000000                       'omega
               
      Zint = IMSQRT(IMSUM(COMPLEX(Rdc ^ 2, 0), _
                    IMPOWER(COMPLEX(Rhf, Rhf), 2)))    'internal impedance, Rdc+Rhf+Li
      RjwL = IMSUM(Zint, COMPLEX(0, w * Lhf))          'Rdc+Rhf, Li+Lhf (Le)
      GjwC = COMPLEX(Ghf, w * Chf)
      Zo = IMSQRT(IMDIV(RjwL, GjwC))
      Gamma = IMSQRT(IMPRODUCT(RjwL, GjwC))
      FuncVal = Gamma.Re * NEPER * 100                 'Loss over 100 ft, dB
      RelDif = Loss100(j, 1) / FuncVal - 1
      SumSq = SumSq + RelDif ^ 2
   Next j
   
   CalcSSE = SumSq
End Function

Private Sub HighLight(boxName As String)
   Me.Controls(boxName).SetFocus
   Me.Controls(boxName).SelStart = 0
   Me.Controls(boxName).SelLength = 99
End Sub
Attribute VB_Name = "frmSmithSnaps"
Attribute VB_Base = "0{0E66A7FD-89D8-43FF-AF90-B65B7110C73B}{9EEF942A-D83B-4587-8B49-007D3A074ED3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Compare Text  ' "AAA" = "aaa"
Option Explicit

Private Sub UserForm_Initialize()
   With Sheets("Smith")
      btnSnap1.Caption = .Range("O3").Value
      chkSnap1Hide.Value = .Range("O4").Value
      txtSnap1.Text = .Shapes("boxSnap1").TextFrame.Characters.Text
      btnSnap1color.BackColor = .Shapes("boxSnap1").TextFrame.Characters.Font.Color
      lblSnap1.ForeColor = .Shapes("boxSnap1").TextFrame.Characters.Font.Color
      
      btnSnap2.Caption = .Range("V3").Value
      chkSnap2Hide.Value = .Range("V4").Value
      txtSnap2.Text = .Shapes("boxSnap2").TextFrame.Characters.Text
      btnSnap2color.BackColor = .Shapes("boxSnap2").TextFrame.Characters.Font.Color
      lblSnap2.ForeColor = .Shapes("boxSnap2").TextFrame.Characters.Font.Color
      
      btnSnap3.Caption = .Range("AC3").Value
      chkSnap3Hide.Value = .Range("AC4").Value
      txtSnap3.Text = .Shapes("boxSnap3").TextFrame.Characters.Text
      btnSnap3color.BackColor = .Shapes("boxSnap3").TextFrame.Characters.Font.Color
      lblSnap3.ForeColor = .Shapes("boxSnap3").TextFrame.Characters.Font.Color
      
      btnSnap4.Caption = .Range("AJ3").Value
      chkSnap4Hide.Value = .Range("AJ4").Value
      txtSnap4.Text = .Shapes("boxSnap4").TextFrame.Characters.Text
      btnSnap4color.BackColor = .Shapes("boxSnap4").TextFrame.Characters.Font.Color
      lblSnap4.ForeColor = .Shapes("boxSnap4").TextFrame.Characters.Font.Color
   End With
   
   'For any existing snapshots, make visible the Description box and Hide box.
   If btnSnap1.Caption = "Erase Snapshot" Then
      txtSnap1.Visible = True
      chkSnap1Hide.Visible = True
      If Not chkSnap1Hide Then btnSnap1color.Visible = True
   End If
   If btnSnap2.Caption = "Erase Snapshot" Then
      txtSnap2.Visible = True
      chkSnap2Hide.Visible = True
      If Not chkSnap2Hide Then btnSnap2color.Visible = True
   End If
   If btnSnap3.Caption = "Erase Snapshot" Then
      txtSnap3.Visible = True
      chkSnap3Hide.Visible = True
      If Not chkSnap3Hide Then btnSnap3color.Visible = True
   End If
   If btnSnap4.Caption = "Erase Snapshot" Then
      txtSnap4.Visible = True
      chkSnap4Hide.Visible = True
      If Not chkSnap4Hide Then btnSnap4color.Visible = True
   End If
   
   'Recall combo box entries.
   cboRecall.List = Array("Snap 1", "Snap 2", "Snap 3", "Snap 4")
   
   Me.StartUpPosition = 0
   Me.Top = Application.Top + Application.Height - Me.Height - 10
   Me.Left = Application.Left + Application.Width - Me.Width - 10
End Sub

Private Sub btnSnap1_Click()
   With Sheets("Smith")
      If btnSnap1.Caption = "Take Snapshot" Then
         'Transfer whatever is the current series range to the snap and backup ranges.
         Range(.[M2], .[M2].Offset([TCcnt] - 1)).Value = [SmithX].Value  'chart series range
         Range(.[N2], .[N2].Offset([TCcnt] - 1)).Value = [SmithY].Value
         Range(.[P2], .[P2].Offset([TCcnt] - 1)).Value = [SmithX].Value  'hide/show backup range
         Range(.[Q2], .[Q2].Offset([TCcnt] - 1)).Value = [SmithY].Value
         [SmithSnapCnt].Value = [TCcnt].Value
         .Range("O5").Value = [Refzo].Value
         'Set series name for use in legend, in case never reset below.
         .ChartObjects(1).Chart.SeriesCollection(19).Name = "Snapshot 1"
         SyncDotsWeights
         
         txtSnap1.Text = "File: " & [CurFname] & "   Zo: " & [Refzo]
         txtSnap1.Visible = True
         .Shapes("boxSnap1").TextFrame.Characters.Text = txtSnap1.Text
         .Shapes("boxSnap1").Visible = True
         chkSnap1Hide.Value = False
         chkSnap1Hide.Visible = True
         txtSnap1.SetFocus
         txtSnap1.SelStart = 0
         txtSnap1.SelLength = 99
         
         btnSnap1.Caption = "Erase Snapshot"
         btnSnap1color.Visible = True
         
      Else  '"Erase Snapshot"
         'Reset series name just to avoid confusion when debugging.
         On Error Resume Next  'in case series hidden when erased
         .ChartObjects(1).Chart.SeriesCollection(19).Name = "Snapshot 1"
         On Error GoTo 0
         'Clear all snapshot and backup points.
         .Range("M2:N65536").ClearContents
         .Range("P2:S65536").ClearContents
         [SmithSnapCnt].Value = 1  'not zero, used for chart series ranges
         
         btnSnap1.Caption = "Take Snapshot"
         txtSnap1.Visible = False
         chkSnap1Hide.Visible = False
         chkSnap1Hide.Value = False
         btnSnap1color.Visible = False
         
         .Shapes("boxSnap1").TextFrame.Characters.Text = " "
         .Shapes("boxSnap1").Visible = False
      End If
      If .ChartObjects(1).Chart.HasLegend Then RebuildLegend
   End With
End Sub

Private Sub btnSnap2_Click()
   With Sheets("Smith")
      If btnSnap2.Caption = "Take Snapshot" Then
         'Transfer whatever is the current series range to the snap and backup ranges.
         Range(.[T2], .[T2].Offset([TCcnt] - 1)).Value = [SmithX].Value  'chart series range
         Range(.[U2], .[U2].Offset([TCcnt] - 1)).Value = [SmithY].Value
         Range(.[w2], .[w2].Offset([TCcnt] - 1)).Value = [SmithX].Value  'hide/show backup range
         Range(.[X2], .[X2].Offset([TCcnt] - 1)).Value = [SmithY].Value
         [SmithSnap2Cnt].Value = [TCcnt].Value
         .Range("V5").Value = [Refzo].Value
         'Set series name for use in legend, in case never reset below.
         .ChartObjects(1).Chart.SeriesCollection(20).Name = "Snapshot 2"
         SyncDotsWeights
         
         txtSnap2.Text = "File: " & [CurFname] & "   Zo: " & [Refzo]
         txtSnap2.Visible = True
         .Shapes("boxSnap2").TextFrame.Characters.Text = txtSnap2.Text
         .Shapes("boxSnap2").Visible = True
         chkSnap2Hide.Value = False
         chkSnap2Hide.Visible = True
         txtSnap2.SetFocus
         txtSnap2.SelStart = 0
         txtSnap2.SelLength = 99
         
         btnSnap2.Caption = "Erase Snapshot"
         btnSnap2color.Visible = True
         
      Else  '"Erase Snapshot"
         'Reset series name just to avoid confusion when debugging.
         On Error Resume Next  'in case series hidden when erased
         .ChartObjects(1).Chart.SeriesCollection(20).Name = "Snapshot 2"
         On Error GoTo 0
         'Clear all snapshot and backup points.
         .Range("T2:U65536").ClearContents
         .Range("W2:Z65536").ClearContents
         [SmithSnap2Cnt].Value = 1  'not zero, used for chart series ranges
         
         btnSnap2.Caption = "Take Snapshot"
         txtSnap2.Visible = False
         chkSnap2Hide.Visible = False
         chkSnap2Hide.Value = False
         btnSnap2color.Visible = False
         
         .Shapes("boxSnap2").TextFrame.Characters.Text = " "
         .Shapes("boxSnap2").Visible = False
      End If
      If .ChartObjects(1).Chart.HasLegend Then RebuildLegend
   End With
End Sub

Private Sub btnSnap3_Click()
   With Sheets("Smith")
      If btnSnap3.Caption = "Take Snapshot" Then
         'Transfer whatever is the current series range to the snap and backup ranges.
         Range(.[AA2], .[AA2].Offset([TCcnt] - 1)).Value = [SmithX].Value  'chart series range
         Range(.[AB2], .[AB2].Offset([TCcnt] - 1)).Value = [SmithY].Value
         Range(.[AD2], .[AD2].Offset([TCcnt] - 1)).Value = [SmithX].Value  'hide/show backup range
         Range(.[AE2], .[AE2].Offset([TCcnt] - 1)).Value = [SmithY].Value
         [SmithSnap3Cnt].Value = [TCcnt].Value
         .Range("AC5").Value = [Refzo].Value
         'Set series name for use in legend, in case never reset below.
         .ChartObjects(1).Chart.SeriesCollection(21).Name = "Snapshot 3"
         SyncDotsWeights
         
         txtSnap3.Text = "File: " & [CurFname] & "   Zo: " & [Refzo]
         txtSnap3.Visible = True
         .Shapes("boxSnap3").TextFrame.Characters.Text = txtSnap3.Text
         .Shapes("boxSnap3").Visible = True
         chkSnap3Hide.Value = False
         chkSnap3Hide.Visible = True
         txtSnap3.SetFocus
         txtSnap3.SelStart = 0
         txtSnap3.SelLength = 99
         
         btnSnap3.Caption = "Erase Snapshot"
         btnSnap3color.Visible = True
         
      Else  '"Erase Snapshot"
         'Reset series name just to avoid confusion when debugging.
         On Error Resume Next  'in case series hidden when erased
         .ChartObjects(1).Chart.SeriesCollection(21).Name = "Snapshot 3"
         On Error GoTo 0
         'Clear all snapshot and backup points.
         .Range("AA2:AB65536").ClearContents
         .Range("AD2:AG65536").ClearContents
         [SmithSnap3Cnt].Value = 1  'not zero, used for chart series ranges
         
         btnSnap3.Caption = "Take Snapshot"
         txtSnap3.Visible = False
         chkSnap3Hide.Visible = False
         chkSnap3Hide.Value = False
         btnSnap3color.Visible = False
         
         .Shapes("boxSnap3").TextFrame.Characters.Text = " "
         .Shapes("boxSnap3").Visible = False
      End If
      If .ChartObjects(1).Chart.HasLegend Then RebuildLegend
   End With
End Sub

Private Sub btnSnap4_Click()
   With Sheets("Smith")
      If btnSnap4.Caption = "Take Snapshot" Then
         'Transfer whatever is the current series range to the snap and backup ranges.
         Range(.[AH2], .[AH2].Offset([TCcnt] - 1)).Value = [SmithX].Value  'chart series range
         Range(.[AI2], .[AI2].Offset([TCcnt] - 1)).Value = [SmithY].Value
         Range(.[AK2], .[AK2].Offset([TCcnt] - 1)).Value = [SmithX].Value  'hide/show backup range
         Range(.[AL2], .[AL2].Offset([TCcnt] - 1)).Value = [SmithY].Value
         [SmithSnap4Cnt].Value = [TCcnt].Value
         .Range("AJ5").Value = [Refzo].Value
         'Set series name for use in legend, in case never reset below.
         .ChartObjects(1).Chart.SeriesCollection(22).Name = "Snapshot 4"
         SyncDotsWeights
         
         txtSnap4.Text = "File: " & [CurFname] & "   Zo: " & [Refzo]
         txtSnap4.Visible = True
         .Shapes("boxSnap4").TextFrame.Characters.Text = txtSnap4.Text
         .Shapes("boxSnap4").Visible = True
         chkSnap4Hide.Value = False
         chkSnap4Hide.Visible = True
         txtSnap4.SetFocus
         txtSnap4.SelStart = 0
         txtSnap4.SelLength = 99
         
         btnSnap4.Caption = "Erase Snapshot"
         btnSnap4color.Visible = True
         
      Else  '"Erase Snapshot"
         'Reset series name just to avoid confusion when debugging.
         On Error Resume Next  'in case series hidden when erased
         .ChartObjects(1).Chart.SeriesCollection(22).Name = "Snapshot 4"
         On Error GoTo 0
         'Clear all snapshot and backup points.
         .Range("AH2:AI65536").ClearContents
         .Range("AK2:AN65536").ClearContents
         [SmithSnap4Cnt].Value = 1  'not zero, used for chart series ranges
         
         btnSnap4.Caption = "Take Snapshot"
         txtSnap4.Visible = False
         chkSnap4Hide.Visible = False
         chkSnap4Hide.Value = False
         btnSnap4color.Visible = False
         
         .Shapes("boxSnap4").TextFrame.Characters.Text = " "
         .Shapes("boxSnap4").Visible = False
      End If
      If .ChartObjects(1).Chart.HasLegend Then RebuildLegend
   End With
End Sub

Private Sub btnSave_Click()
   Dim PrevPath As String
   Dim FileToSaveAs As Variant
   Dim Source As String, Title As String, Envir As String, Notes As String
   Dim PFH As PFHeaderBlock
   Dim PFD As PFDataBlock
   Dim PFS As PFSmithData
   Dim C As Range, sngPt As Single
   
   On Error Resume Next  'Try to pre-set path, but don't fail if not valid
   PrevPath = CurDir
   ChDrive [DirSnapshot].Value
   ChDir [DirSnapshot].Value
   FileToSaveAs = Application.GetSaveAsFilename( _
                  FnOnly([CurFname]), "Smith Chart Trace (*.pfs),*.pfs", , "Save Primary Trace As ...")
   AppActivate "Snapshot Control", False  'reset focus
   DoEvents
   If FileToSaveAs = False Then
      ChDrive PrevPath
      ChDir PrevPath
      Exit Sub
   End If
   'Save user-specified path for next time, then reset to previous (may not have changed).
   [DirSnapshot].Value = Left(FileToSaveAs, MyInStrRev(CStr(FileToSaveAs), "\") - 1)
   ChDrive PrevPath
   ChDir PrevPath
   On Error GoTo 0
   
   If Len(Dir(FileToSaveAs)) > 0 Then Kill FileToSaveAs  'else LOF does not change
   Open FileToSaveAs For Binary Access Write As #1
   Source = "MultiNEC v. 2"  'allow exchange with MultiNEC traces
   Title = "Created from AIM_Charts"
   Envir = ""
   Notes = Dir(FileToSaveAs)  'just use .pfs file name as comment
   PFH.Version = 16
   PFH.SourceLen = Len(Source)
   PFH.TitleLen = Len(Title)
   PFH.EnvirLen = Len(Envir)
   PFH.NotesLen = Len(Notes)
   PFH.HeaderLen = 8 + PFH.SourceLen + PFH.TitleLen + PFH.EnvirLen + PFH.NotesLen
   Put #1, , PFH
   Put #1, , Source
   Put #1, , Title
   Put #1, , Envir
   Put #1, , Notes
   
   PFS.NumPoints = [TCcnt]
   PFD.BlockType = 131  'not a standard type
   PFD.BlockLen = 3 + Len(PFS) + (16 * PFS.NumPoints)
   Put #1, , PFD
   Put #1, , PFS
   For Each C In [SmithX]
      sngPt = CSng(C.Value)
      Put #1, , sngPt
   Next C
   For Each C In [SmithY]
      sngPt = CSng(C.Value)
      Put #1, , sngPt
   Next C
   'Save corresponding R and X, used only by MultiNEC
   For Each C In Range([Rs].Offset(1), [Rs].Offset([TCcnt]))
      sngPt = CSng(C.Value)
      Put #1, , sngPt
   Next C
   For Each C In Range([Xs].Offset(1), [Xs].Offset([TCcnt]))
      sngPt = CSng(C.Value)
      Put #1, , sngPt
   Next C
   
   MsgBox "Trace saved in file '" & FileToSaveAs & "'.", _
          vbOKOnly, "Trace Saved"
   Close #1
End Sub

Private Sub btnRecall_Click()
   Dim PrevPath As String
   Dim FileToOpen As Variant
   Dim Source As String, Title As String, Envir As String, Notes As String
   Dim PFH As PFHeaderBlock
   Dim PFD As PFDataBlock
   Dim PFS As PFSmithData
   Dim DataPoints() As Single
   Dim pt As Integer
   Dim rngXchart As Range, rngXbackup As Range
   Dim rngYchart As Range, rngYbackup As Range
   Dim rngSaveResR As Range, rngSaveResX As Range
   Dim sc As Integer
   
   On Error Resume Next  'Try to pre-set path, but don't fail if not valid
   PrevPath = CurDir
   ChDrive [DirSnapshot].Value
   ChDir [DirSnapshot].Value
   FileToOpen = Application.GetOpenFilename( _
                "Smith Chart Trace (*.pfs),*.pfs", , _
                "Recall Trace to " & cboRecall.Text & " Position")
   AppActivate "Snapshot Control", False  'reset focus
   DoEvents
   If FileToOpen = False Then
      ChDrive PrevPath
      ChDir PrevPath
      Exit Sub
   End If
   'Save user-specified path for next time, then reset to previous (may not have changed).
   [DirSnapshot].Value = Left(FileToOpen, MyInStrRev(CStr(FileToOpen), "\") - 1)
   ChDrive PrevPath
   ChDir PrevPath
   On Error GoTo 0
   
   With Sheets("Smith")
      Open FileToOpen For Binary Access Read As #1
      Get #1, , PFH
      On Error Resume Next
      Source = String(PFH.SourceLen, " ")
      Get #1, , Source
      If Left(Source, 8) <> "MultiNEC" Then Err.Number = 1
      If Err.Number > 0 Then
         MsgBox "File" & vbLf & FileToOpen & vbLf & _
                "is not a recognized Smith Chart trace file.  Nothing recalled.", _
                vbExclamation, "Invalid File"
         Close #1
         Exit Sub
      End If
      Title = String(PFH.TitleLen, " ")
      Envir = String(PFH.EnvirLen, " ")
      Notes = String(PFH.NotesLen, " ")
      Get #1, , Title
      Get #1, , Envir
      Get #1, , Notes
      Seek #1, 1 + PFH.HeaderLen
      Select Case cboRecall.Text
         Case "Snap 1"
            Set rngXchart = .[M2]
            Set rngYchart = .[N2]
            Set rngXbackup = .[P2]
            Set rngYbackup = .[Q2]
            sc = 19
         Case "Snap 2"
            Set rngXchart = .[T2]
            Set rngYchart = .[U2]
            Set rngXbackup = .[w2]
            Set rngYbackup = .[X2]
            sc = 20
         Case "Snap 3"
            Set rngXchart = .[AA2]
            Set rngYchart = .[AB2]
            Set rngXbackup = .[AD2]
            Set rngYbackup = .[AE2]
            sc = 21
         Case Else
            Set rngXchart = .[AH2]
            Set rngYchart = .[AI2]
            Set rngXbackup = .[AK2]
            Set rngYbackup = .[AL2]
            sc = 22
      End Select
      
      Get #1, , PFD
      If PFD.BlockType <> 131 Then
         MsgBox "File" & vbLf & FileToOpen & vbLf & _
                "is not a recognized Smith Chart trace file.  Nothing recalled.", _
                vbExclamation, "Invalid File"
         Close #1
         Exit Sub
      End If
      On Error GoTo 0
      Application.ScreenUpdating = False
      Application.Calculation = xlCalculationManual
      
      Get #1, , PFS
      ReDim DataPoints(1 To PFS.NumPoints)
      Get #1, , DataPoints  'SmithX points
      For pt = 1 To PFS.NumPoints
         rngXchart.Cells(pt).Value = DataPoints(pt)
         rngXbackup.Cells(pt).Value = DataPoints(pt)
      Next pt
      Get #1, , DataPoints  'SmithY points
      For pt = 1 To PFS.NumPoints
         rngYchart.Cells(pt).Value = DataPoints(pt)
         rngYbackup.Cells(pt).Value = DataPoints(pt)
      Next pt
      Close #1
   
      Select Case cboRecall.Value
         Case "Snap 1"
            [SmithSnapCnt].Value = PFS.NumPoints
            txtSnap1.Text = Notes
            txtSnap1.Visible = True
            .Shapes("boxSnap1").TextFrame.Characters.Text = txtSnap1.Text
            .Shapes("boxSnap1").Visible = True
            chkSnap1Hide.Value = False
            chkSnap1Hide.Visible = True
            btnSnap1.Caption = "Erase Snapshot"
            
         Case "Snap 2"
            [SmithSnap2Cnt].Value = PFS.NumPoints
            txtSnap2.Text = Notes
            txtSnap2.Visible = True
            .Shapes("boxSnap2").TextFrame.Characters.Text = txtSnap2.Text
            .Shapes("boxSnap2").Visible = True
            chkSnap2Hide.Value = False
            chkSnap2Hide.Visible = True
            btnSnap2.Caption = "Erase Snapshot"
            
         Case "Snap 3"
            [SmithSnap3Cnt].Value = PFS.NumPoints
            txtSnap3.Text = Notes
            txtSnap3.Visible = True
            .Shapes("boxSnap3").TextFrame.Characters.Text = txtSnap3.Text
            .Shapes("boxSnap3").Visible = True
            chkSnap3Hide.Value = False
            chkSnap3Hide.Visible = True
            btnSnap3.Caption = "Erase Snapshot"
            
         Case Else
            [SmithSnap4Cnt].Value = PFS.NumPoints
            txtSnap4.Text = Notes
            txtSnap4.Visible = True
            .Shapes("boxSnap4").TextFrame.Characters.Text = txtSnap4.Text
            .Shapes("boxSnap4").Visible = True
            chkSnap4Hide.Value = False
            chkSnap4Hide.Visible = True
            btnSnap4.Caption = "Erase Snapshot"
      End Select
      Application.ScreenUpdating = True
      Application.Calculation = xlCalculationAutomatic
      
      SyncDotsWeights
      If .ChartObjects(1).Chart.HasLegend Then RebuildLegend
   End With
End Sub

Private Sub chkSnap1Hide_Change()
   If Not chkSnap1Hide.Visible Then Exit Sub  'avoid any action on "Erase Snapshot"
   With Sheets("Smith")
      If chkSnap1Hide Then
         'Hide trace by clearing Y values for chart series range, but
         'don't change the count or the backup copy.
         [SmithSnapY].ClearContents
         .Shapes("boxSnap1").Visible = False
         btnSnap1color.Visible = False
      Else
         'Show trace by copying data from backup into chart series range.
         '===>>> Note that the offset to the backup range <<<===
         '===>>> is +3, not +2 like on the Custom sheet.  <<<===
         [SmithSnapY].Value = [SmithSnapY].Offset(, 3).Value
         SyncDotsWeights
         .Shapes("boxSnap1").Visible = True
         btnSnap1color.Visible = True
      End If
      If .ChartObjects(1).Chart.HasLegend Then RebuildLegend
   End With
End Sub

Private Sub chkSnap2Hide_Change()
   If Not chkSnap2Hide.Visible Then Exit Sub  'avoid any action on "Erase Snapshot"
   With Sheets("Smith")
      If chkSnap2Hide Then
         'Hide trace by clearing Y values for chart series range, but
         'don't change the count or the backup copy.
         [SmithSnap2Y].ClearContents
         .Shapes("boxSnap2").Visible = False
         btnSnap2color.Visible = False
      Else
         'Show trace by copying data from backup into chart series range.
         '===>>> Note that the offset to the backup range <<<===
         '===>>> is +3, not +2 like on the Custom sheet.  <<<===
         [SmithSnap2Y].Value = [SmithSnap2Y].Offset(, 3).Value
         SyncDotsWeights
         .Shapes("boxSnap2").Visible = True
         btnSnap2color.Visible = True
      End If
      If .ChartObjects(1).Chart.HasLegend Then RebuildLegend
   End With
End Sub

Private Sub chkSnap3Hide_Change()
   If Not chkSnap3Hide.Visible Then Exit Sub  'avoid any action on "Erase Snapshot"
   With Sheets("Smith")
      If chkSnap3Hide Then
         'Hide trace by clearing Y values for chart series range, but
         'don't change the count or the backup copy.
         [SmithSnap3Y].ClearContents
         .Shapes("boxSnap3").Visible = False
         btnSnap3color.Visible = False
      Else
         'Show trace by copying data from backup into chart series range.
         '===>>> Note that the offset to the backup range <<<===
         '===>>> is +3, not +2 like on the Custom sheet.  <<<===
         [SmithSnap3Y].Value = [SmithSnap3Y].Offset(, 3).Value
         SyncDotsWeights
         .Shapes("boxSnap3").Visible = True
         btnSnap3color.Visible = True
      End If
      If .ChartObjects(1).Chart.HasLegend Then RebuildLegend
   End With
End Sub

Private Sub chkSnap4Hide_Change()
   If Not chkSnap4Hide.Visible Then Exit Sub  'avoid any action on "Erase Snapshot"
   With Sheets("Smith")
      If chkSnap4Hide Then
         'Hide trace by clearing Y values for chart series range, but
         'don't change the count or the backup copy.
         [SmithSnap4Y].ClearContents
         .Shapes("boxSnap4").Visible = False
         btnSnap4color.Visible = False
      Else
         'Show trace by copying data from backup into chart series range.
         '===>>> Note that the offset to the backup range <<<===
         '===>>> is +3, not +2 like on the Custom sheet.  <<<===
         [SmithSnap4Y].Value = [SmithSnap4Y].Offset(, 3).Value
         SyncDotsWeights
         .Shapes("boxSnap4").Visible = True
         btnSnap4color.Visible = True
      End If
      If .ChartObjects(1).Chart.HasLegend Then RebuildLegend
   End With
End Sub

Private Sub btnSnap1color_Click()
   Dim CI As Long
   Dim vResponse As Variant
   
   With ActiveSheet
      CI = .Shapes("boxSnap1").TextFrame.Characters.Font.ColorIndex
      .Range("D4").Activate
      vResponse = Application.Dialogs(xlDialogPatterns).Show(xlSolid, CI, CI)
      AppActivate Me.Caption
      If vResponse = False Then Exit Sub  'Cancel pressed
      CI = .Range("D4").Interior.ColorIndex
      If CI = xlNone Then Exit Sub  '"No Color" - invalid choice
      .Shapes("boxSnap1").TextFrame.Characters.Font.ColorIndex = CI
      btnSnap1color.BackColor = .Range("D4").Interior.Color
      lblSnap1.ForeColor = .Range("D4").Interior.Color
   End With
   On Error Resume Next  'in case series not visible for any reason, or user cleared line/marker
   With Sheets("Smith").ChartObjects(1).Chart.SeriesCollection(19)  'Snap1
      .Border.ColorIndex = CI
      If .MarkerStyle <> xlNone Then .MarkerBackgroundColorIndex = CI
   End With
   With Sheets("Custom").ChartObjects(2).Chart.SeriesCollection(19)  'Snap1
      .Border.ColorIndex = CI
      If .MarkerStyle <> xlNone Then .MarkerBackgroundColorIndex = CI
   End With
End Sub

Private Sub btnSnap2color_Click()
   Dim CI As Long
   Dim vResponse As Variant
   
   With ActiveSheet
      CI = .Shapes("boxSnap2").TextFrame.Characters.Font.ColorIndex
      .Range("D4").Activate
      vResponse = Application.Dialogs(xlDialogPatterns).Show(xlSolid, CI, CI)
      AppActivate Me.Caption
      If vResponse = False Then Exit Sub  'Cancel pressed
      CI = .Range("D4").Interior.ColorIndex
      If CI = xlNone Then Exit Sub  '"No Color" - invalid choice
      .Shapes("boxSnap2").TextFrame.Characters.Font.ColorIndex = CI
      btnSnap2color.BackColor = .Range("D4").Interior.Color
      lblSnap2.ForeColor = .Range("D4").Interior.Color
   End With
   On Error Resume Next  'in case series not visible for any reason, or user cleared line/marker
   With Sheets("Smith").ChartObjects(1).Chart.SeriesCollection(20)  'Snap2
      .Border.ColorIndex = CI
      If .MarkerStyle <> xlNone Then .MarkerBackgroundColorIndex = CI
   End With
   With Sheets("Custom").ChartObjects(2).Chart.SeriesCollection(20)  'Snap2
      .Border.ColorIndex = CI
      If .MarkerStyle <> xlNone Then .MarkerBackgroundColorIndex = CI
   End With
End Sub

Private Sub btnSnap3color_Click()
   Dim CI As Long
   Dim vResponse As Variant
   
   With ActiveSheet
      CI = .Shapes("boxSnap3").TextFrame.Characters.Font.ColorIndex
      .Range("D4").Activate
      vResponse = Application.Dialogs(xlDialogPatterns).Show(xlSolid, CI, CI)
      AppActivate Me.Caption
      If vResponse = False Then Exit Sub  'Cancel pressed
      CI = .Range("D4").Interior.ColorIndex
      If CI = xlNone Then Exit Sub  '"No Color" - invalid choice
      .Shapes("boxSnap3").TextFrame.Characters.Font.ColorIndex = CI
      btnSnap3color.BackColor = .Range("D4").Interior.Color
      lblSnap3.ForeColor = .Range("D4").Interior.Color
   End With
   On Error Resume Next  'in case series not visible for any reason, or user cleared line/marker
   With Sheets("Smith").ChartObjects(1).Chart.SeriesCollection(21)  'Snap3
      .Border.ColorIndex = CI
      If .MarkerStyle <> xlNone Then .MarkerBackgroundColorIndex = CI
   End With
   With Sheets("Custom").ChartObjects(2).Chart.SeriesCollection(21)  'Snap3
      .Border.ColorIndex = CI
      If .MarkerStyle <> xlNone Then .MarkerBackgroundColorIndex = CI
   End With
End Sub

Private Sub btnSnap4color_Click()
   Dim CI As Long
   Dim vResponse As Variant
   
   With ActiveSheet
      CI = .Shapes("boxSnap4").TextFrame.Characters.Font.ColorIndex
      .Range("D4").Activate
      vResponse = Application.Dialogs(xlDialogPatterns).Show(xlSolid, CI, CI)
      AppActivate Me.Caption
      If vResponse = False Then Exit Sub  'Cancel pressed
      CI = .Range("D4").Interior.ColorIndex
      If CI = xlNone Then Exit Sub  '"No Color" - invalid choice
      .Shapes("boxSnap4").TextFrame.Characters.Font.ColorIndex = CI
      btnSnap4color.BackColor = .Range("D4").Interior.Color
      lblSnap4.ForeColor = .Range("D4").Interior.Color
   End With
   On Error Resume Next  'in case series not visible for any reason, or user cleared line/marker
   With Sheets("Smith").ChartObjects(1).Chart.SeriesCollection(22)  'Snap4
      .Border.ColorIndex = CI
      If .MarkerStyle <> xlNone Then .MarkerBackgroundColorIndex = CI
   End With
   With Sheets("Custom").ChartObjects(2).Chart.SeriesCollection(22)  'Snap4
      .Border.ColorIndex = CI
      If .MarkerStyle <> xlNone Then .MarkerBackgroundColorIndex = CI
   End With
End Sub

Private Sub btnOK_Click()
   Unload Me
End Sub

Private Sub btnCancel_Click()
   'Empty caption, size 0 x 0, Cancel=True.
   'Just serves as a vehicle for the Esc key.
   Unload Me
End Sub

Private Sub UserForm_Terminate()
   With Sheets("Smith")
      .Range("O3").Value = btnSnap1.Caption
      .Range("O4").Value = chkSnap1Hide.Value
      If btnSnap1.Caption = "Erase Snapshot" Then
         'Snapshot is present.
         If txtSnap1.Text = "" Then
            .Shapes("boxSnap1").TextFrame.Characters.Text = "Snapshot 1"   'cleared by user, show this
         Else
            .Shapes("boxSnap1").TextFrame.Characters.Text = txtSnap1.Text  'set by user, show text from box
         End If
      End If
      
      .Range("V3").Value = btnSnap2.Caption
      .Range("V4").Value = chkSnap2Hide.Value
      If btnSnap2.Caption = "Erase Snapshot" Then
         'Snapshot is present.
         If txtSnap2.Text = "" Then
            .Shapes("boxSnap2").TextFrame.Characters.Text = "Snapshot 2"   'cleared by user, show this
         Else
            .Shapes("boxSnap2").TextFrame.Characters.Text = txtSnap2.Text  'set by user, show text from box
         End If
      End If
      
      .Range("AC3").Value = btnSnap3.Caption
      .Range("AC4").Value = chkSnap3Hide.Value
      If btnSnap3.Caption = "Erase Snapshot" Then
         'Snapshot is present.
         If txtSnap3.Text = "" Then
            .Shapes("boxSnap3").TextFrame.Characters.Text = "Snapshot 3"   'cleared by user, show this
         Else
            .Shapes("boxSnap3").TextFrame.Characters.Text = txtSnap3.Text  'set by user, show text from box
         End If
      End If
      
      .Range("AJ3").Value = btnSnap4.Caption
      .Range("AJ4").Value = chkSnap4Hide.Value
      If btnSnap4.Caption = "Erase Snapshot" Then
         'Snapshot is present.
         If txtSnap4.Text = "" Then
            .Shapes("boxSnap4").TextFrame.Characters.Text = "Snapshot 4"   'cleared by user, show this
         Else
            .Shapes("boxSnap4").TextFrame.Characters.Text = txtSnap4.Text  'set by user, show text from box
         End If
      End If
   End With
End Sub
Attribute VB_Name = "frmTitles"
Attribute VB_Base = "0{22C334A7-E33B-4E67-8716-0701D250BB02}{094C65C4-136E-4247-A973-A9C5E2E8ABE3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub UserForm_Initialize()
   Me.chkMainDefault.Value = ActiveSheet.Range("M30").Value
   Me.chkXaxisDefault.Value = ActiveSheet.Range("M31").Value
   Me.chkYaxisDefault.Value = ActiveSheet.Range("M32").Value
   Me.chkY2axisDefault.Value = ActiveSheet.Range("M33").Value
   Me.txtMain.Text = [CustomMtitle].Value
   Me.txtXaxis.Text = [CustomXtitle].Value
   Me.txtYaxis.Text = [CustomYtitle].Value
   Me.txtY2axis.Text = [CustomY2title].Value
   Me.txtMain.Enabled = Not Me.chkMainDefault.Value
   Me.txtXaxis.Enabled = Not Me.chkXaxisDefault.Value
   Me.txtYaxis.Enabled = Not Me.chkYaxisDefault.Value
   Me.txtY2axis.Enabled = Not Me.chkY2axisDefault.Value
   If [CustomY2off].Value = 99 Then  'no secondary axis
      Me.Frame4.Enabled = False
      Me.chkY2axisDefault.Enabled = False
      Me.txtY2axis.Enabled = False
      Me.txtY2axis.Text = ""
   End If
End Sub

Private Sub chkMainDefault_Change()
   Me.txtMain.Enabled = Not Me.chkMainDefault.Value
   If Me.txtMain.Enabled Then
      Me.txtMain.SetFocus
      Me.txtMain.SelStart = 0
      Me.txtMain.SelLength = 99
   End If
End Sub

Private Sub chkXaxisDefault_Change()
   Me.txtXaxis.Enabled = Not Me.chkXaxisDefault.Value
   If Me.txtXaxis.Enabled Then
      Me.txtXaxis.SetFocus
      Me.txtXaxis.SelStart = 0
      Me.txtXaxis.SelLength = 99
   End If
End Sub

Private Sub chkYaxisDefault_Change()
   Me.txtYaxis.Enabled = Not Me.chkYaxisDefault.Value
   If Me.txtYaxis.Enabled Then
      Me.txtYaxis.SetFocus
      Me.txtYaxis.SelStart = 0
      Me.txtYaxis.SelLength = 99
   End If
End Sub

Private Sub chkY2axisDefault_Change()
   Me.txtY2axis.Enabled = Not Me.chkY2axisDefault.Value
   If Me.txtY2axis.Enabled Then
      Me.txtY2axis.SetFocus
      Me.txtY2axis.SelStart = 0
      Me.txtY2axis.SelLength = 99
   End If
End Sub

Private Sub btnOK_Click()
   
   'X axis title
   ActiveSheet.Range("M31").Value = Me.chkXaxisDefault.Value
   If Me.chkXaxisDefault.Value Then
      If Range("TCFreq") = "Freq (MHz)" Then  'not FF mode
         [CustomXtitle].Value = "Frequency (MHz)"
      Else
         [CustomXtitle].Value = "Line " & Range("TCFreq") & " - Distance from Input"
      End If
   Else
      If Me.txtXaxis.Text = "" Then Me.txtXaxis.Text = " "  'avoid clearing title
      [CustomXtitle].Value = Me.txtXaxis.Text
   End If
   With ActiveSheet.ChartObjects(1).Chart.Axes(xlCategory, xlPrimary)
      .HasTitle = True  'in case cleared by user
      .AxisTitle.Text = [CustomXtitle].Value
   End With
   
   'Y axis (left) title
   ActiveSheet.Range("M32").Value = Me.chkYaxisDefault.Value
   If Me.chkYaxisDefault.Value Then
      [CustomYtitle].Value = [CustomTitles].Offset([CustomYoff].Value).Value
   Else
      If Me.txtYaxis.Text = "" Then Me.txtYaxis.Text = " "  'avoid clearing title
      [CustomYtitle].Value = Me.txtYaxis.Text
   End If
   With ActiveSheet.ChartObjects(1).Chart.Axes(xlValue, xlPrimary)
      .HasTitle = True  'in case cleared by user
      .AxisTitle.Text = [CustomYtitle].Value
   End With
   
   'Y axis (right) title
   If [CustomY2off].Value <> 99 Then
      ActiveSheet.Range("M33").Value = Me.chkY2axisDefault.Value
      If Me.chkY2axisDefault.Value Then
         [CustomY2title].Value = [CustomTitles].Offset([CustomY2off].Value).Value
      Else
         If Me.txtY2axis.Text = "" Then Me.txtY2axis.Text = " "  'avoid clearing title
         [CustomY2title].Value = Me.txtY2axis.Text
      End If
      With ActiveSheet.ChartObjects(1).Chart.Axes(xlValue, xlSecondary)
         .HasTitle = True  'in case cleared by user
         .AxisTitle.Text = [CustomY2title].Value
      End With
   End If
   
   'Main title.
   ActiveSheet.Range("M30").Value = Me.chkMainDefault.Value
   If Me.chkMainDefault.Value Then
      If Range("TCFreq") = "Freq (MHz)" Then  'not FF mode
         If [CustomY2off] = 99 Then  'no secondary trace
            [CustomMtitle].Value = [CustomYtitle] & "    vs    " & [CustomXtitle]
         Else
            [CustomMtitle].Value = [CustomYtitle] & "  &  " & [CustomY2title] & "    vs    " & [CustomXtitle]
         End If
      Else  'FF mode, do not include X axis title in Main title
         If [CustomY2off] = 99 Then  'no secondary trace
            [CustomMtitle].Value = [CustomYtitle]
         Else
            [CustomMtitle].Value = [CustomYtitle] & "  &  " & [CustomY2title]
         End If
      End If
      [CustomMtitle].Value = Application.Substitute([CustomMtitle], " (MHz)", "")
      [CustomMtitle].Value = Application.Substitute([CustomMtitle], " (deg)", "")
      [CustomMtitle].Value = Application.Substitute([CustomMtitle], " (dB)", "")
      [CustomMtitle].Value = Application.Substitute([CustomMtitle], " (|fffd|H)", "")
      [CustomMtitle].Value = Application.Substitute([CustomMtitle], " (pF)", "")
      [CustomMtitle].Value = Application.Substitute([CustomMtitle], " (ft)", "")
      [CustomMtitle].Value = Application.Substitute([CustomMtitle], " (m)", "")
      [CustomMtitle].Value = Application.Substitute([CustomMtitle], " (V)", "")
      [CustomMtitle].Value = Application.Substitute([CustomMtitle], " (A)", "")
      [CustomMtitle].Value = Application.Substitute([CustomMtitle], " (W)", "")
   Else
      If Me.txtMain.Text = "" Then Me.txtMain.Text = " "  'avoid clearing title
      [CustomMtitle].Value = Me.txtMain.Text
   End If
   With ActiveSheet.ChartObjects(1).Chart
      .HasTitle = True  'in case cleared by user
      .ChartTitle.Text = [CustomMtitle].Value
   End With
   
   'Possibly show "Title(s) Locked" reminder.
   If chkXaxisDefault And chkYaxisDefault And chkY2axisDefault And chkMainDefault Then
      Sheets("Custom").Shapes("boxTitles").Visible = False
   Else
      Sheets("Custom").Shapes("boxTitles").Visible = True
   End If
   
   Unload Me
End Sub

Private Sub btnCancel_Click()
   Unload Me
End Sub
Attribute VB_Name = "frmWhichS2P"
Attribute VB_Base = "0{D5FBD46B-B950-4936-9DEF-B64611999A1F}{B916D5F1-026C-4C89-BEDC-987951880E0B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub UserForm_Initialize()
   Dim ctl As Control
   'Set default choice based on last use of this form.
   For Each ctl In Me.Controls
      If ctl.Tag <> "" Then
         If ctl.Tag = ThisWorkbook.Sheets("Data").Range("FormWhichS2P").Value Then
            ctl.Value = True
            ctl.SetFocus
            Exit For
         End If
      End If
   Next ctl
End Sub

Sub btnOK_Click()
   Unload Me
End Sub

Private Sub UserForm_Terminate()
   Dim ctl As Control
   'Set [WhichS2P] for use by caller, proc ReadData.
   'Also set [FormWhichS2P] for use next time this form is shown.
   For Each ctl In Me.Controls
      If ctl.Tag <> "" Then
         If ctl.Value = True Then
            ThisWorkbook.Sheets("Data").Range("WhichS2P").Value = ctl.Tag
            ThisWorkbook.Sheets("Data").Range("FormWhichS2P").Value = ctl.Tag
            Exit For
         End If
      End If
   Next ctl
End Sub
Attribute VB_Name = "frmXYMinMax"
Attribute VB_Base = "0{050F90EC-53E4-4506-9F08-D8E1BD9514CD}{EEAE9E27-36FC-4873-8AA2-326E7D1C9953}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub UserForm_Initialize()
   Dim Ctrl As Control
   
   If Val(Application.Version) > 11 Then  'XL2007
      'No restiction on Log Min/Max for XL2007.  Remove third sentence of prompt.
      Label10.Caption = Left(Label10.Caption, 128)
   End If
   
   With Sheets("Custom").ChartObjects(1).Chart
      With .Axes(xlCategory)
         If (Not [CustomXScaleAllowReset].Value) Or _
            (Not .MajorUnitIsAuto) Then
            If Not .MinimumScaleIsAuto Then txtXmin = CStr(.MinimumScale)
            If Not .MaximumScaleIsAuto Then txtXmax = CStr(.MaximumScale)
            If Not .MajorUnitIsAuto Then txtXgrid = CStr(.MajorUnit)
         End If
         '''If .ScaleType = xlLogarithmic Then chkLogX = True
      End With
      'XL2007: ScaleType property cannot be used on Category axis if
      'the chart has a secondary Value axis.  Use alternate method to
      'determine if existing Category scale is Log or Linear.
      If .Axes(xlCategory).CrossesAt > 0 Then chkLogX = True
      
      With .Axes(xlValue, xlPrimary)
         If Not .MinimumScaleIsAuto Then txtYmin = CStr(.MinimumScale)
         If Not .MaximumScaleIsAuto Then txtYmax = CStr(.MaximumScale)
         If Not .MajorUnitIsAuto Then txtYgrid = CStr(.MajorUnit)
         If .ScaleType = xlLogarithmic Then chkLogY = True
      End With
      
      With .Axes(xlValue, xlSecondary)
         If [CustomY2off].Value = 99 And _
               .MinimumScaleIsAuto And _
               .MaximumScaleIsAuto And _
               .MajorUnitIsAuto And _
               .ScaleType <> xlLogarithmic Then
            Me.Frame3.Enabled = False
            Me.txtY2min.Enabled = False
            Me.txtY2max.Enabled = False
            Me.txtY2grid.Enabled = False
            Me.btnClearY2.Enabled = False
            Me.Label12.Enabled = False
            Me.Label13.Enabled = False
            Me.Label15.Enabled = False
            Me.chkLogY2.Enabled = False
         Else
            If Not .MinimumScaleIsAuto Then txtY2min = CStr(.MinimumScale)
            If Not .MaximumScaleIsAuto Then txtY2max = CStr(.MaximumScale)
            If Not .MajorUnitIsAuto Then txtY2grid = CStr(.MajorUnit)
            If .ScaleType = xlLogarithmic Then chkLogY2 = True
         End If
      End With
   End With
   
   txtXmin.SelStart = 0
   txtXmin.SelLength = 99
End Sub

Private Sub btnClearX_Click()
   txtXmin = ""
   txtXmax = ""
   txtXgrid = ""
   chkLogX = False
End Sub

Private Sub btnClearY_Click()
   txtYmin = ""
   txtYmax = ""
   txtYgrid = ""
   chkLogY = False
End Sub

Private Sub btnClearY2_Click()
   txtY2min = ""
   txtY2max = ""
   txtY2grid = ""
   chkLogY2 = False
End Sub

Private Sub btnResetAll_Click()
btnClearX_Click
btnClearY_Click
btnClearY2_Click
ChangeScales
Unload Me
End Sub

Private Sub btnOK_Click()
   If ChangeScales Then Unload Me
End Sub

Private Sub btnApply_Click()
   ChangeScales
End Sub

Private Sub btnCancel_Click()
   Unload Me
End Sub

Private Sub HighLight(boxName As String)
   Me.Controls(boxName).SetFocus
   Me.Controls(boxName).SelStart = 0
   Me.Controls(boxName).SelLength = 99
End Sub

Private Function ChangeScales() As Boolean
   Dim strTemp As String

   'Error checking on form input fields.
   'X scale.
   If Len(txtXmin) > 0 Then
      If Not IsNumeric(txtXmin) Then
         HighLight "txtXmin"
         MsgBox "Entry must be a valid number or an empty field.", vbExclamation, "Invalid Entry"
         ChangeScales = False
         Exit Function
      End If
      If CDbl(txtXmin) < 0 Then
         HighLight "txtXmin"
         MsgBox "Negative frequencies not allowed.", vbExclamation, "Invalid Entry"
         ChangeScales = False
         Exit Function
      End If
      If chkLogX And CDbl(txtXmin) <= 0 Then
         HighLight "txtXmin"
         MsgBox "Value must be greater than 0 for logarithmic scales.", vbExclamation, "Invalid Entry"
         ChangeScales = False
         Exit Function
      End If
   End If
   If Len(txtXmax) > 0 Then
      If Not IsNumeric(txtXmax) Then
         HighLight "txtXmax"
         MsgBox "Entry must be a valid number or an empty field.", vbExclamation, "Invalid Entry"
         ChangeScales = False
         Exit Function
      End If
      If CDbl(txtXmax) < 0 Then
         HighLight "txtXmax"
         MsgBox "Negative frequencies not allowed.", vbExclamation, "Invalid Entry"
         ChangeScales = False
         Exit Function
      End If
      If chkLogX And CDbl(txtXmax) <= 0 Then
         HighLight "txtXmax"
         MsgBox "Value must be greater than 0 for logarithmic scales.", vbExclamation, "Invalid Entry"
         ChangeScales = False
         Exit Function
      End If
   End If
   If Len(txtXgrid) > 0 Then
      If Not IsNumeric(txtXgrid) Then
         HighLight "txtXgrid"
         MsgBox "Entry must be a valid number or an empty field.", vbExclamation, "Invalid Entry"
         ChangeScales = False
         Exit Function
      End If
      If CDbl(txtXgrid) <= 0 Then
         HighLight "txtXgrid"
         MsgBox "Negative or zero spacing invalid.", vbExclamation, "Invalid Entry"
         ChangeScales = False
         Exit Function
      End If
   End If
   
   'Y (left) scale.
   If Len(txtYmin) > 0 Then
      If Not IsNumeric(txtYmin) Then
         HighLight "txtYmin"
         MsgBox "Entry must be a valid number or an empty field.", vbExclamation, "Invalid Entry"
         ChangeScales = False
         Exit Function
      End If
      If chkLogY And CDbl(txtYmin) <= 0 Then
         HighLight "txtYmin"
         MsgBox "Value must be greater than 0 for logarithmic scales.", vbExclamation, "Invalid Entry"
         ChangeScales = False
         Exit Function
      End If
   End If
   If Len(txtYmax) > 0 Then
      If Not IsNumeric(txtYmax) Then
         HighLight "txtYmax"
         MsgBox "Entry must be a valid number or an empty field.", vbExclamation, "Invalid Entry"
         ChangeScales = False
         Exit Function
      End If
      If chkLogY And CDbl(txtYmax) <= 0 Then
         HighLight "txtYmax"
         MsgBox "Value must be greater than 0 for logarithmic scales.", vbExclamation, "Invalid Entry"
         ChangeScales = False
         Exit Function
      End If
   End If
   If Len(txtYgrid) > 0 Then
      If Not IsNumeric(txtYgrid) Then
         HighLight "txtYgrid"
         MsgBox "Entry must be a valid number or an empty field.", vbExclamation, "Invalid Entry"
         ChangeScales = False
         Exit Function
      End If
      If CDbl(txtYgrid) <= 0 Then
         HighLight "txtYgrid"
         MsgBox "Negative or zero spacing invalid.", vbExclamation, "Invalid Entry"
         ChangeScales = False
         Exit Function
      End If
   End If
   
   'Y (right) scale.
   If Len(txtY2min) > 0 Then
      If Not IsNumeric(txtY2min) Then
         HighLight "txtY2min"
         MsgBox "Entry must be a valid number or an empty field.", vbExclamation, "Invalid Entry"
         ChangeScales = False
         Exit Function
      End If
      If chkLogY2 And CDbl(txtY2min) <= 0 Then
         HighLight "txtY2min"
         MsgBox "Value must be greater than 0 for logarithmic scales.", vbExclamation, "Invalid Entry"
         ChangeScales = False
         Exit Function
      End If
   End If
   If Len(txtY2max) > 0 Then
      If Not IsNumeric(txtY2max) Then
         HighLight "txtY2max"
         MsgBox "Entry must be a valid number or an empty field.", vbExclamation, "Invalid Entry"
         ChangeScales = False
         Exit Function
      End If
      If chkLogY2 And CDbl(txtY2max) <= 0 Then
         HighLight "txtY2max"
         MsgBox "Value must be greater than 0 for logarithmic scales.", vbExclamation, "Invalid Entry"
         ChangeScales = False
         Exit Function
      End If
   End If
   If Len(txtY2grid) > 0 Then
      If Not IsNumeric(txtY2grid) Then
         HighLight "txtY2grid"
         MsgBox "Entry must be a valid number or an empty field.", vbExclamation, "Invalid Entry"
         ChangeScales = False
         Exit Function
      End If
      If CDbl(txtY2grid) <= 0 Then
         HighLight "txtY2grid"
         MsgBox "Negative or zero spacing invalid.", vbExclamation, "Invalid Entry"
         ChangeScales = False
         Exit Function
      End If
   End If
   
   'Valid min/max, compare if both present.
   If Len(txtXmin) > 0 And Len(txtXmax) > 0 Then
      'Make sure max > min.
      If CDbl(txtXmin) = CDbl(txtXmax) Then
         HighLight "txtXmax"
         MsgBox "Max must be greater than min.", vbExclamation, "Invalid Entry"
         ChangeScales = False
         Exit Function
      End If
      If CDbl(txtXmin) > CDbl(txtXmax) Then
         'Min > max.  Don't bug user, just swap.
         strTemp = txtXmin
         txtXmin = txtXmax
         txtXmax = strTemp
      End If
   End If
   If Len(txtYmin) > 0 And Len(txtYmax) > 0 Then
      'Make sure max > min.
      If CDbl(txtYmin) = CDbl(txtYmax) Then
         HighLight "txtYmax"
         MsgBox "Max must be greater than min.", vbExclamation, "Invalid Entry"
         ChangeScales = False
         Exit Function
      End If
      If CDbl(txtYmin) > CDbl(txtYmax) Then
         'Min > max.  Don't bug user, just swap.
         strTemp = txtYmin
         txtYmin = txtYmax
         txtYmax = strTemp
      End If
   End If
   If Len(txtY2min) > 0 And Len(txtY2max) > 0 Then
      'Make sure max > min.
      If CDbl(txtY2min) = CDbl(txtY2max) Then
         HighLight "txtY2max"
         MsgBox "Max must be greater than min.", vbExclamation, "Invalid Entry"
         ChangeScales = False
         Exit Function
      End If
      If CDbl(txtY2min) > CDbl(txtY2max) Then
         'Min > max.  Don't bug user, just swap.
         strTemp = txtY2min
         txtY2min = txtY2max
         txtY2max = strTemp
      End If
   End If
   
   'Set scales.
   
   With Sheets("Custom").ChartObjects(1).Chart
      With .Axes(xlCategory)
         'Set Log/Lin first so that Excel will not reset min/max if the scale was
         'log but is now being changed back to linear.  Be careful that the crosses
         'at value is already a positive number before trying to set to log and is not
         'changed to a negative number before the scale is set to linear.
         [CustomXScaleAllowReset].Value = True  'default, may be changed below
         If chkLogX Then
            If .MinimumScale <= 0 Then .MinimumScaleIsAuto = True
            If .MaximumScale <= 0 Then .MaximumScaleIsAuto = True
            .CrossesAt = 1E-99  'a very small but positive number
            If Val(Application.Version) < 12 Then  'not XL2007
               .ScaleType = xlLogarithmic
            Else
               With ActiveSheet.ChartObjects(1).Chart
                  .SetElement 375 'msoElementPrimaryCategoryAxisLogScale    '=xlLogarithmic
                  .SetElement 379 'msoElementSecondaryCategoryAxisLogScale  'uses defaults
                  .SetElement 358 'msoElementSecondaryCategoryAxisNone      'uses primary
               End With
            End If
            .HasMinorGridlines = True
         Else
            .HasMinorGridlines = False
            If Val(Application.Version) < 12 Then  'not XL2007
              .ScaleType = xlLinear
            Else
               With ActiveSheet.ChartObjects(1).Chart
                  .SetElement 349 'msoElementPrimaryCategoryAxisShow    '=xlLinear
                  .SetElement 359 'msoElementSecondaryCategoryAxisShow  'uses defaults
                  .SetElement 358 'msoElementSecondaryCategoryAxisNone  'uses primary
               End With
            End If
            .CrossesAt = -1E+99  'a negative number likely to be lower than any data
         End If
         If Len(txtXmin) = 0 Then
            .MinimumScaleIsAuto = True
         Else
            .MinimumScale = CDbl(txtXmin)
            [CustomXScaleAllowReset].Value = False
         End If
         If Len(txtXmax) = 0 Then
            .MaximumScaleIsAuto = True
         Else
            .MaximumScale = CDbl(txtXmax)
            [CustomXScaleAllowReset].Value = False
         End If
         If Len(txtXgrid) = 0 Then
            .MajorUnitIsAuto = True
         Else
            .MajorUnit = CDbl(txtXgrid)
         End If
         If [CustomXScaleAllowReset] Then  'not locked by user
            'Set Min/Max X scale freqs to values previously set by ReadData proc.
            If .CrossesAt < 0 Then  'xlLinear
               .MinimumScale = [MinXscale]
            Else  'xlLogarithmic
               'Log Freq scale, be careful not to set Min to 0.
               If [MinXscale] = 0 Then
                  .MinimumScaleIsAuto = True
               Else
                  .MinimumScale = [MinXscale]
               End If
            End If
            .MaximumScale = [MaxXscale]
            'Freq scale now at full range, hide the "Full Range" button (may not have been up).
            Sheets("Custom").Shapes("fbtnFullRange").Visible = False
         Else
            'Freq scale now NOT at full range, (possibly) show the "Full Range" button.
            If .MinimumScale > [MinXscale] Or _
               .MaximumScale < [MaxXscale] Then
               Sheets("Custom").Shapes("fbtnFullRange").Visible = True
            Else
               Sheets("Custom").Shapes("fbtnFullRange").Visible = False
            End If
         End If
   
         'Re-do Min/Max/Avg.
         TransferYrange [CustomYorig], [CustomY]  '[CustomY] is the plotted range
         If [CustomY2off].Value <> 99 Then
            TransferYrange [CustomY2orig], [CustomY2], xlSecondary
         End If
      End With
      
      With .Axes(xlValue, xlPrimary)
         If chkLogY Then
            If .MinimumScale <= 0 Then .MinimumScaleIsAuto = True
            If .MaximumScale <= 0 Then .MaximumScaleIsAuto = True
            .CrossesAt = 1E-99
            .ScaleType = xlLogarithmic
            .HasMinorGridlines = True
         Else
            .ScaleType = xlLinear
            .CrossesAt = -1E+99
            .HasMinorGridlines = False
         End If
         If Len(txtYmin) = 0 Then
            .MinimumScaleIsAuto = True
         Else
            .MinimumScale = CDbl(txtYmin)
         End If
         If Len(txtYmax) = 0 Then
            .MaximumScaleIsAuto = True
         Else
            .MaximumScale = CDbl(txtYmax)
         End If
         If Len(txtYgrid) = 0 Then
            .MajorUnitIsAuto = True
         Else
            .MajorUnit = CDbl(txtYgrid)
         End If
      End With
      
      With .Axes(xlValue, xlSecondary)
         If chkLogY2 Then
            If .MinimumScale <= 0 Then .MinimumScaleIsAuto = True
            If .MaximumScale <= 0 Then .MaximumScaleIsAuto = True
            .CrossesAt = 1E-99
            .ScaleType = xlLogarithmic
         Else
            .ScaleType = xlLinear
            .CrossesAt = -1E+99
         End If
         If Len(txtY2min) = 0 Then
            .MinimumScaleIsAuto = True
         Else
            .MinimumScale = CDbl(txtY2min)
         End If
         If Len(txtY2max) = 0 Then
            .MaximumScaleIsAuto = True
         Else
            .MaximumScale = CDbl(txtY2max)
         End If
         If Len(txtY2grid) = 0 Then
            .MajorUnitIsAuto = True
         Else
            .MajorUnit = CDbl(txtY2grid)
         End If
      End With
   End With
   
   'Hide/show "Scale(s) Locked" label.
   If Len(txtXmin) > 0 Or Len(txtXmax) > 0 Or Len(txtXgrid) > 0 Or _
      Len(txtYmin) > 0 Or Len(txtYmax) > 0 Or Len(txtYgrid) > 0 Or _
      Len(txtY2min) > 0 Or Len(txtY2max) > 0 Or Len(txtY2grid) > 0 Then
      Sheets("Custom").Shapes("boxScales").Visible = True
   Else
      Sheets("Custom").Shapes("boxScales").Visible = False
   End If
   
   'Re-transfer values for plotting to allow for new clipping limits, if any.
   'Applies to Primary, any currently visible Snapshots, and Secondary if present.
   '>>>Update v1.5: Y data is no longer clipped at upper and lower
   'scale limits.  Too confusing when hovering over plot points as
   'whether data was clipped or was actually at the scale limit.
   
'''   'Primary.
'''   TransferYrange [CustomYorig], [CustomY]
'''
'''   'Snapshots, if visible.
'''   If Not IsEmpty(ActiveSheet.[S2]) Then TransferYrange [CustomSnapY].Offset(, 2), [CustomSnapY]
'''   If Not IsEmpty(ActiveSheet.[W2]) Then TransferYrange [CustomSnap2Y].Offset(, 2), [CustomSnap2Y]
'''   If Not IsEmpty(ActiveSheet.[AA2]) Then TransferYrange [CustomSnap3Y].Offset(, 2), [CustomSnap3Y]
'''   If Not IsEmpty(ActiveSheet.[AE2]) Then TransferYrange [CustomSnap4Y].Offset(, 2), [CustomSnap4Y]
'''
'''   'Secondary, if present.
'''   If [CustomY2off].Value <> 99 Then TransferYrange [CustomY2orig], [CustomY2], xlSecondary
   
   'If Markers are up, reset position since Marker .Left is dependent on
   'PlotArea.InsideLeft and .InsideWidth which may change with new scaling.
   If [MarkFreqIndex].Value <> -1 Then
      PositionMarkers "Marker1", CLng([MarkFreqIndex])
   End If
   If [Mark2FreqIndex].Value <> -1 Then
      PositionMarkers "Marker2", CLng([Mark2FreqIndex])
   End If
      
   ChangeScales = True
End Function
Attribute VB_Name = "xxDebugging"
Option Explicit
Option Private Module

'Unhide/Hide Custom sheet columns.  For debugging and development use.
'===> Also see Worksheet_SelectionChange event proc to allow cell selection.
Sub UnhideCustom()
   Sheets("Custom").Activate
   ActiveWindow.DisplayHeadings = True
   Columns("M:AI").EntireColumn.Hidden = False
   ActiveSheet.ChartObjects(2).Visible = False
   ActiveSheet.Shapes("boxLoadedFile").Visible = False
End Sub

Sub HideCustom()
   Sheets("Custom").Activate
   ActiveWindow.DisplayHeadings = False
   Columns("M:AI").EntireColumn.Hidden = True
   ActiveSheet.ChartObjects(2).Visible = True
   ActiveSheet.Shapes("boxLoadedFile").Visible = True
End Sub

'''Sub CopyChart()
'''   With ActiveSheet.ChartObjects(1)
'''      .RoundedCorners = False
'''      .Chart.CopyPicture Appearance:=xlScreen, Size:=xlScreen, Format:=xlBitmap
'''      .RoundedCorners = True
'''   End With
'''End Sub
'''
'''Sub Chart2Gif()
'''   'Available filters are found at
'''   'HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Shared Tools\Graphics Filters\Export
'''   With ActiveSheet.ChartObjects(1)
'''      '''.RoundedCorners = False
'''      .Chart.Export "C:\My Documents\test.gif", "GIF", False
'''      '.Chart.Export "C:\My Documents\test.jpg", "JPEG", True
'''      '.Chart.Export "C:\My Documents\test.png", "PNG", True
'''      '''.RoundedCorners = True
'''   End With
'''End Sub
'''
'''Public Sub CleanNames()
'''   Dim nm As Name
'''   For Each nm In ActiveWorkbook.Names
'''      '''If InStr(nm.RefersTo, "#REF") > 0 Then nm.Delete
'''      If InStr(nm.RefersTo, "SmithSelect") > 0 Then Debug.Print nm.Name
'''   Next nm
'''End Sub

'''Public Sub ListShapes()
'''   Dim sh As Shape
'''   Dim sht As Worksheet
'''   Debug.Print "1=AutoShape, 3=Chart, 8=FormControl, 12=OLEControlObject, 17=TextBox"
'''   For Each sht In ThisWorkbook.Worksheets
'''      Debug.Print "***" & sht.Name
'''      For Each sh In sht.Shapes
'''         Debug.Print sh.Name; Tab(20); sh.Type
''''''         For Each sh In ActiveSheet.Shapes
''''''            sh.Placement = xlFreeFloating
''''''            Debug.Print sh.Name; Tab(20); sh.Type;
''''''            If InStr(sh.Name, "Fmark") > 0 Then
''''''               Debug.Print "*** no move"
''''''            Else
''''''               'okay to move
''''''               Debug.Print ""
''''''               sh.Left = sh.Left + 1
''''''            End If
''''''            If sh.Type = 12 And Left(sh.Name, 3) = "lbl" Then
''''''               Debug.Print sh.Name '''& "   " & sh.Type
''''''            End If
''''''         Next sh
'''      Next sh
'''   Next sht
'''End Sub

'''Public Sub SetLeftTop() ' & Suffix
'''   Dim Suffix As String
'''   Suffix = "Custom"
'''   With ActiveSheet
'''   '   .Shapes("fbtn" & Suffix).left = .Shapes("btn" & Suffix).left
'''   '   .Shapes("fbtn" & Suffix).Top = .Shapes("btn" & Suffix).Top
'''   '  .Shapes("fbtn" & Suffix).Width = .Shapes("btn" & Suffix).Width
'''   '  .Shapes("fbtn" & Suffix).Height = .Shapes("btn" & Suffix).Height
'''      .Shapes("btn" & Suffix).Delete
'''   End With
'''End Sub

'''Public Sub FindLabels()
'''   Dim sc As Series
'''   Dim pt As Point
'''   Dim dl As DataLabel
'''   Dim j As Integer
'''   On Error Resume Next  'for invisible series like snapshots
'''   With Sheets("Smith").ChartObjects(1).Chart
'''      For Each sc In .SeriesCollection
'''         'Debug.Print sc.Name, sc.HasDataLabels, sc.DataLabels.Count, sc.Points.Count
'''         For j = 1 To sc.Points.Count
'''            If sc.Points(j).HasDataLabel Then _
'''               Debug.Print ".SeriesCollection(""" & sc.Name & """).Point(" & j & _
'''                           ").DataLabel.Text = """ & sc.Points(j).DataLabel.Text & """"
'''               'Debug.Print sc.Name, j, sc.Points(j).DataLabel.Text
'''         Next j
''''         For Each pt In sc.Points
''''            If pt.HasDataLabel Then Debug.Print sc.Name, pt.DataLabel.Text
''''         Next pt
'''      Next sc
'''   End With
'''End Sub

' InQuest injected base64 decoded content
' ZrH+

INQUEST-PP=macro
