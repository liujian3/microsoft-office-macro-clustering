Attribute VB_Name = "CommMdlA"
'=======================================================
' SSS_STAT Ver3.6 : |fffd||fffd||fffd||283||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd|
'
' 2007.2.7 LSQ (mdf from other seihins)
'=======================================================
Option Explicit

Public Const GBKNAME_VBACM As String = "VBACOM.xla"
Public Const GBKNAME_VBA07 As String = "VBACOM.xla"

'2007.02.07 Copied from commMdl in SRKMAIN.xls
'07.2.7 mdf
Function getExcelVerNo() As Integer
    getExcelVerNo = CInt(Application.Run(GBKNAME_VBACM & "!getExcelVerNo"))
End Function
'
'
'|fffd|}|fffd||308||292|u|fffd||183|T|fffd|C|fffd|Y
'
Sub Comm_setChartPosSize(ByVal chartObj As ChartObject, ByVal outGrp As Range, _
    Optional ByVal rowNum As Integer = 0, Optional ByVal colNum As Integer = 0)
    Call Application.Run(GBKNAME_VBACM & "!setChartPosSize", _
                         chartObj, outGrp, rowNum, colNum)
End Sub
'
'cut data linkage
'
'07.1.31 LSQ
Sub Comm_CutDataLink(ByVal bkObj As Workbook, ByVal bkName As String)
    Dim verNo As Integer
    verNo = getExcelVerNo()
    
    If verNo >= 12 Then
        Application.Run GBKNAME_VBA07 & "!Vba07_cutLink", bkObj, bkName
    End If
End Sub
'
Sub Comm_SetDataLabel(ByVal ser As Series, ByVal namerge As Range, _
                 Optional ByVal fontsize As Integer = 10, _
                 Optional ByVal charcnt As Integer = 32)
    Call Application.Run(GBKNAME_VBACM & "!SetDataLabel", _
                         ser, namerge, fontsize, charcnt)
End Sub

Function Comm_SetDict(ByVal strpara As String) As Object
    Set Comm_SetDict = Application.Run(GBKNAME_VBACM & "!SetDict", strpara)
End Function

Function Comm_GetTmplGrp(ByVal outRge As Range, ByVal strBkName As String, _
                    ByVal strShtName As String, ByVal strGrpName As String) As Chart
    Set Comm_GetTmplGrp = Application.Run(GBKNAME_VBACM & "!GetTmplGrp", outRge, _
                     strBkName, strShtName, strGrpName)
End Function

Function Comm_toXlRCstr(inputFormula As String) As String
    Comm_toXlRCstr = Application.Run(GBKNAME_VBACM & "!toXlRCstr", inputFormula)
End Function

Function Comm_toXlA1str(inputFormula As String) As String
    Comm_toXlA1str = Application.Run(GBKNAME_VBACM & "!toXlA1str", inputFormula)
End Function

Sub Comm_adjustMinMax(ByRef minV As Double, ByRef maxV As Double)
    Call Application.Run(GBKNAME_VBACM & "!adjustMinMax", minV, maxV)
End Sub

Sub Comm_MatchWorkbookFont()
    Call Application.Run(GBKNAME_VBACM & "!MatchWorkbookFont")
End Sub

Sub Comm_SetTicks(ByVal cht As Chart, ByVal strTicks As String)
    Call Application.Run(GBKNAME_VBACM & "!SetTicks", cht, strTicks)
End Sub

Sub Comm_DrawCEGGrp(ByVal strWrkSht As String, ByVal strGrpOut As String, _
                ByVal strGrpData As String, ByVal strpara As String)
    Call Application.Run(GBKNAME_VBACM & "!DrawCEGGrp", strWrkSht, strGrpOut, strGrpData, "GrpType=1&" & strpara)
End Sub

Sub Comm_DrawObiGrp(ByVal strWrkSht As String, ByVal strGrpOut As String, _
                ByVal strGrpData As String, ByVal strpara As String)
    Call Application.Run(GBKNAME_VBACM & "!DrawObiGrp", strWrkSht, strGrpOut, strGrpData, strpara)
End Sub

'2007.02.13 copyied from commMdl in SRKMAIN.xls
'07.2.7 LSQ add
Function WorkBookOpen_SetOpenNum(ByVal xlaFName As String) As Workbook
    Dim bkObj As Workbook
    
    Set bkObj = WorkBookOpen(xlaFName)
    If Not (bkObj Is Nothing) Then
        Application.Run (xlaFName & "!CallNum_AddOne")
    End If
    
    Set WorkBookOpen_SetOpenNum = bkObj
End Function

'2007.02.13 copyied from commMdl in SRKMAIN.xls
'07.2.7 LSQ add
Sub WorkBookClose_OnOpenNum(ByVal xlaFName As String)
    Dim cnt As Integer
    cnt = Application.Run(xlaFName & "!CallNum_DecOne")
    If cnt <= 0 Then
        Call WorkBookClose(xlaFName)
    End If
End Sub
'=== EOF ===
Attribute VB_Name = "GouseiMdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|vVer2.0 : |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
' |fffd||c42c| : Aug 2003, PYJ, LSQ
'
'=================================================
Option Explicit

Dim f_bGraph As Boolean

Sub Do_Gousei_VBA()
Attribute Do_Gousei_VBA.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bRtn As Boolean
    Dim nForcNum As Integer, nYSmpNum As Integer, n As Integer
    Dim sht As Worksheet
    
    'bRtn = GetDlgInp(YSK_GS)
    'If Not bRtn Then Exit Sub
    
    nYSmpNum = g_aDialog.rgeInp.Rows.Count - 1
    If g_aDialog.RgeX Is Nothing Then
        If g_aDialog.nTimeStyle = 1 Then
            nForcNum = 24
        ElseIf g_aDialog.nTimeStyle = 2 Then
            nForcNum = 8
        Else
            nForcNum = 40
        End If
    Else
        nForcNum = g_aDialog.RgeX.Rows.Count - 1 - nYSmpNum
    End If
    If nForcNum = 0 Or _
        (nYSmpNum >= g_aDialog.dlgGs.nLmtSmp2 And _
         ((g_aDialog.nTimeStyle = 1 And nForcNum > 24) Or _
          (g_aDialog.nTimeStyle = 2 And nForcNum > 8))) Then 'EPA|fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||a347|; Sep 26, 2003  PYJ
        MsgBox "|fffd|w|fffd||80b3||fffd||a0bd||fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||257|\|fffd||fffd||fffd|l|fffd||fffd||fffd||752||80b3||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
        Exit Sub
    End If
    
    '|fffd|b|fffd||fffd||6f8||fffd||fffd||442||fffd||fffd||102||44f|o|fffd||fffd|
    Call changeToYSKDir
    
    '|fffd||fffd||290||602||fffd||582||fffd||fffd||794||fffd|
    Application.ScreenUpdating = False
    Set sht = g_aDialog.rgeOutBgn.Worksheet
    n = g_aDialog.rgeOutBgn.Column
    sht.Columns(nTo26Str(n) & ":" & nTo26Str(n + 15)).ColumnWidth = 10
    
    'Calculate and output
    f_bGraph = g_aDialog.bGraph
    g_aDialog.bGraph = False
    bRtn = GouseiCalc(nYSmpNum, nForcNum)
    
    'Column width
    If bRtn Then
        Application.ScreenUpdating = True
        g_aDialog.rgeOutBgn.Worksheet.Activate
        ActiveWindow.DisplayGridlines = False
        g_aDialog.rgeOutBgn.Select
        'MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|I|fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B"
    End If
    
    Application.CutCopyMode = False
End Sub

Private Function GouseiCalc(ByVal nYSmpNum As Integer, ByVal nForcNum As Integer) As Boolean
    Dim rgeKJidouTmp As Range
    Dim rgeTmpOutbgn As Range, rgeTmpEpaKJidou As Range, rgeTmpKeikou As Range, rgeTmpYouin As Range    'output begin cell in temperary worksheet
    Dim rgeOutBgn As Range, rgeEpaKJidou As Range, rgeKeikou As Range, rgeYouin As Range                'output begin cell in output worksheet
    Dim bS As Boolean                         'bS: True--|fffd|v|fffd||fffd||fffd|v|fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd|; False--|fffd|v|fffd||fffd||fffd|v|fffd|Z|fffd||fffd||fffd||202||fffd|
    Dim nXItem As Integer                     '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30c||90||fffd|
    Dim bRtn As Boolean, bGraphTmp As Boolean
    Dim nRtn As Integer
    
    GouseiCalc = False
    If nYSmpNum < g_aDialog.dlgGs.nMinSmpLmt Or nYSmpNum > g_aDialog.dlgGs.nMaxSmpLmt Then
        MsgBox "|fffd|i" & g_aDialog.dlgGs.nMinSmpLmt & "|fffd|`" & g_aDialog.dlgGs.nMaxSmpLmt & "|fffd|j" & "|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||342||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|B"
        Exit Function
    End If
    Set rgeOutBgn = g_aDialog.rgeOutBgn
    rgeOutBgn = "[|fffd|\|fffd||fffd||fffd||fffd||fffd|f|fffd||fffd||fffd||fffd|]"
    rgeOutBgn.Font.Bold = True
    Set rgeTmpOutbgn = getTempSheet(1).Range("A1")
    
    '|fffd||fffd||fffd|d|fffd||693||fffd||fffd||fffd||fffd||3d6|@/EPA|fffd|@
    Set rgeEpaKJidou = rgeOutBgn.Offset(2, 0).Range("A1")
    Set rgeTmpEpaKJidou = rgeTmpOutbgn
    Set rgeKJidouTmp = rgeTmpOutbgn.Offset(5000, 0).Range("A1") '2005.7 PYJ  old:500
    nRtn = GouseiKJidouEpa(rgeEpaKJidou, rgeTmpEpaKJidou, rgeKJidouTmp, nYSmpNum, nForcNum)
    If nRtn = 0 Then Exit Function
    
    '|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|
    Set rgeTmpKeikou = rgeTmpOutbgn.Offset(1000, 0).Range("A1") '2005.7 PYJ  old:100
    Set rgeKeikou = rgeEpaKJidou.Offset(nRtn + 1, 0).Range("A1")
    nRtn = GouseiKeikou(rgeKeikou, rgeTmpKeikou, rgeTmpEpaKJidou, nYSmpNum, nForcNum)
    If nRtn = 0 Then Exit Function
    
    '|fffd||fffd||fffd||295||fffd||fffd||3c1|E|fffd||fffd||fffd|d|fffd||693||fffd||fffd||fffd||fffd||3d6|@ result and chart
    If nYSmpNum >= g_aDialog.dlgGs.nLmtSmp1 And nYSmpNum < g_aDialog.dlgGs.nLmtSmp2 Then
        Call MbKjSyusei(rgeKJidouTmp, rgeEpaKJidou, rgeKeikou, nYSmpNum, nForcNum)
        If f_bGraph Then
            Call KJidouChart(rgeEpaKJidou.Offset(1, 0).Range("A1:D" & nYSmpNum + 1), rgeEpaKJidou.Offset(1, 6).Range("A1"), True)
            Call COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t(rgeEpaKJidou.Offset(33, 6), rgeEpaKJidou.Offset(33, 7).Resize(13, 1), rgeEpaKJidou.Offset(33, 8).Resize(13, 1), "|fffd||fffd||fffd||28e|w|fffd||fffd|(S)", "")
        End If
    End If
    
    '|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|
    If nYSmpNum < g_aDialog.dlgGs.nLmtSmp1 Then bS = False Else bS = True
    If g_aDialog.RgeX Is Nothing Then nXItem = 0 Else nXItem = g_aDialog.RgeX.Columns.Count '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||33a||fffd||7f0|
    Call ArrangeInDataYouin(rgeTmpEpaKJidou, rgeKJidouTmp, rgeKeikou, nYSmpNum, nForcNum, bS, nXItem)
    'Set rgeTmpYouin = rgeTmpOutbgn.Offset(3000, 0).Range("A1")  '2005.7 PYJ  old:300
    'Set g_aDialog.rgeOutBgn = rgeTmpYouin
    'bRtn = doYouin_VBA
    'If Not bRtn Then Exit Function
    'Set rgeYouin = rgeKeikou.Offset(nRtn + 1, 0).Range("A1")
    'rgeYouin.Worksheet.Activate
    'Call CopyResultYouin(rgeTmpYouin, rgeYouin, rgeTmpEpaKJidou, nYSmpNum, nForcNum, bS, nXItem)
    
    Set g_aDialog.rgeOutBgn = rgeKeikou.Offset(nRtn + 1, 0).Range("A1")
    GouseiCalc = True
End Function

'|fffd||fffd||fffd|d|fffd||693||fffd||fffd||fffd||fffd||3d6|@/EPA|fffd|@
Private Function GouseiKJidouEpa(ByVal rgeEpaKJidou As Range, ByVal rgeTmpEpaKJidou As Range, _
        ByVal rgeKJidouTmp As Range, ByVal nYSmpNum As Integer, ByVal nForcNum As Integer)
    Dim rgeInpTmp As Range
    Dim bRtn As Boolean
    Dim nRtn As Integer, r1 As Integer
    
    GouseiKJidouEpa = 0
    Set g_aDialog.rgeOutBgn = rgeTmpEpaKJidou
    If nYSmpNum < g_aDialog.dlgGs.nLmtSmp1 Then         '|fffd||fffd||fffd|d|fffd||693||fffd||fffd||fffd||fffd||3d6|@
        bRtn = doKJidou_VBA
        If Not bRtn Then Exit Function
        nRtn = CopyResultKJidou(rgeTmpEpaKJidou, rgeEpaKJidou, nYSmpNum)
        If f_bGraph Then
            r1 = KJidouChart(rgeEpaKJidou.Offset(1, 0).Range("A1:D" & nYSmpNum + 1), rgeEpaKJidou.Offset(1, 4).Range("A1"), True)
        End If
        If nRtn < r1 + 1 Then nRtn = r1 + 1
    ElseIf nYSmpNum >= g_aDialog.dlgGs.nLmtSmp2 Then    'EPA
        bRtn = doEPA_VBA
        If Not bRtn Then Exit Function
        nRtn = CopyResultEPA(rgeTmpEpaKJidou, rgeEpaKJidou, nYSmpNum, nForcNum / 2)
    Else    '24--35                                     '|fffd||fffd||fffd||295||fffd||fffd||3c1|E|fffd||fffd||fffd|d|fffd||693||fffd||fffd||fffd||fffd||3d6|@
        Call MbHeikin_VBA(g_aDialog.rgeInp, rgeKJidouTmp, nYSmpNum, nForcNum)  'data transformation
        Set rgeInpTmp = g_aDialog.rgeInp
        Set g_aDialog.rgeInp = rgeKJidouTmp.Range("C1:C" & nYSmpNum + 1)
        '2016.02.19 added
        g_aDialog.dlgEma.nSmpNum = 3
        'end add
        bRtn = doKJidou_VBA
        If Not bRtn Then Exit Function
        nRtn = CopyResultKJidou(rgeTmpEpaKJidou, rgeEpaKJidou, nYSmpNum)
        nRtn = nRtn + nForcNum
        If f_bGraph And nRtn < 32 Then nRtn = 32
        'Call MbKjSyusei(rgeTmpEpaKJidou, rgeEpaKJidou, rgeInp, g_aDialog.rgeInp, nYSmpNum, nForcNum)
        Set g_aDialog.rgeInp = rgeInpTmp
    End If
    GouseiKJidouEpa = nRtn
End Function

'|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|
Private Function GouseiKeikou(ByVal rgeKeikou As Range, ByVal rgeTmpKeikou As Range, _
        ByVal rgeTmpEpaKJidou As Range, ByVal nYSmpNum As Integer, ByVal nForcNum As Integer)
    Dim rgeInpTmp As Range
    Dim bRtn As Boolean
    Dim nRtn As Integer
    
    GouseiKeikou = 0
    g_aDialog.dlgKk.nProdict = nForcNum
    Set rgeInpTmp = g_aDialog.rgeInp
    If nYSmpNum < g_aDialog.dlgGs.nLmtSmp1 Then
        Set g_aDialog.rgeInp = rgeTmpEpaKJidou.Range("D1:D" & nYSmpNum + 1)
    ElseIf nYSmpNum >= g_aDialog.dlgGs.nLmtSmp2 Then
        Set g_aDialog.rgeInp = rgeTmpEpaKJidou.Range("E1:E" & nYSmpNum + 1)
    Else
        Set g_aDialog.rgeInp = rgeTmpEpaKJidou.Range("D1:D" & nYSmpNum + 1)
    End If
    Set g_aDialog.rgeOutBgn = rgeTmpKeikou
    bRtn = doKeikou_VBA
    If Not bRtn Then Exit Function
    nRtn = CopyResultKeikou(rgeTmpKeikou, rgeKeikou, nYSmpNum, nForcNum)
    Set g_aDialog.rgeInp = rgeInpTmp
    GouseiKeikou = nRtn
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd|d|fffd||693||fffd||fffd||fffd||fffd||3d6|@     nMonthNum=24--35     data transformation
Private Function MbHeikin_VBA(ByVal rgeIn As Range, ByVal rgeDataTo As Range, ByVal nMonthNum As Integer, ByVal nForcNum As Integer)
    Dim heikingoukei As Double, heikin As Double, dAvg1 As Double
    Dim rgeTmp As Range, rge As Range, rgeDataToTmp As Range
    Dim i As Integer
    
    'Data  copy
    rgeIn.Copy rgeDataTo.Range("A1")
    'Data |fffd||310||fffd||fffd||fffd|
    Set rgeDataToTmp = rgeDataTo.Offset(1, 0)
    Set rgeTmp = rgeDataTo.Offset(1000, 0)  '2005.7 PYJ  old:100
    rgeDataToTmp.Range("A1:A12").Copy rgeTmp.Range("A1")
    rgeDataToTmp.Range("A13:A24").Copy rgeTmp.Range("B1")
    '2016.02.19 mdf:
    'rgeDataToTmp.Range("A25:A" & nMonthNum).Copy rgeTmp.Range("C1")
    If nMonthNum > 25 Then
        rgeDataToTmp.Range("A25:A" & nMonthNum).Copy rgeTmp.Range("C1")
    Else
        rgeTmp.Range("C1").Resize(12, 1).ClearContents
    End If
    'end mdf
    
    rgeDataToTmp.Worksheet.Activate
    heikingoukei = 0#
    
    Set rge = rgeTmp.Range("A1:C1")
    For i = 1 To 12
        'rgeTmp(i, 4) = WorksheetFunction.Sum(rge)      '|fffd|e|fffd||fffd||fffd||30d||fffd||fffd|v
        dAvg1 = Application.Average(rge)                '|fffd|e|fffd||fffd||fffd||315||fffd||fffd||fffd|
        rgeTmp(i, 5) = dAvg1
        heikingoukei = heikingoukei + dAvg1             '|fffd||fffd||fffd||3c2||30d||fffd||fffd|v
        Set rge = rge.Offset(1, 0)
    Next i
    
    heikin = heikingoukei / 12 '|fffd|N|fffd||fffd||fffd||fffd|
    
    '|fffd||fffd||fffd|F|fffd|e|fffd||fffd||fffd||315||fffd||fffd||3c2||fffd|N|fffd||fffd||fffd||3c2||14a||fffd||fffd||fffd|
    For i = 1 To 12
        rgeTmp(i, 6) = rgeTmp(i, 5) / heikin
    Next i
    
    's|fffd||33a|_|fffd||fffd|
    rgeTmp.Range("F1:F12").Copy rgeDataToTmp.Range("B1:B48")
    
    '2012.09.26 added
    If nForcNum + nMonthNum > 48 Then
        For i = 1 To (nForcNum + nMonthNum - 48)
            rgeDataToTmp.Range("B" & 48 + i) = rgeTmp.Range("F" & i)
        Next i
    End If
    'end add
    
    'TCI|fffd||30c|v|fffd|Z
    For i = 1 To nMonthNum
        rgeDataToTmp(i, 3) = rgeDataToTmp(i, 1) / rgeDataToTmp(i, 2)
    Next i
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd|d|fffd||693||fffd||fffd||fffd||fffd||3d6|@     nMonthNum=24--35     result transformation
Private Function MbKjSyusei(ByVal rgeKJidouTmp As Range, ByVal rgeEpaKJidou As Range, _
        ByVal rgeKeikou As Range, ByVal nMonthNum As Integer, ByVal nForcNum As Integer)
    Dim rge1 As Range
    Dim i As Integer
    rgeEpaKJidou.Range("D2:D" & nMonthNum + 2).Copy rgeEpaKJidou.Range("F2")    '6->8
    rgeEpaKJidou.Range("B2:C" & nMonthNum + 2).Copy rgeEpaKJidou.Range("C2")    '4,5->5,6
    g_aDialog.rgeInp.Copy rgeEpaKJidou.Range("B2")
    rgeKeikou.Offset(7, 0).Range("A1:A" & nMonthNum + nForcNum + 1).Copy rgeEpaKJidou.Range("A2")
    rgeKJidouTmp.Range("B1:B" & nMonthNum + nForcNum + 1).Copy rgeEpaKJidou.Range("E2")
    rgeEpaKJidou.Range("H34") = "|fffd||fffd|"
    rgeEpaKJidou.Range("I34") = "|fffd||fffd||fffd||28e|w|fffd||fffd|"
    For i = 1 To 12
        rgeEpaKJidou.Range("H" & 34 + i) = i
    Next i
    rgeKJidouTmp.Range("B2:B13").Copy rgeEpaKJidou.Range("I35")
    rgeEpaKJidou(1, 1) = "|fffd||fffd||fffd||295||fffd||fffd||3c1|E|fffd||fffd||fffd|d|fffd||693||fffd||fffd||fffd||fffd||3d6|@"
    rgeEpaKJidou(2, 2) = "TCSI"
    rgeEpaKJidou(2, 3) = "TCI"
    rgeEpaKJidou(2, 5) = "S"

    '|fffd|r|fffd||fffd|
    Set rge1 = rgeEpaKJidou.Range("A2:F" & nMonthNum + nForcNum + 2)
    Call BorderFrame(rge1, xlMedium, xlHairline, 2, 2, 0)
    Call BorderLine(rge1.Rows(1), xlBottom, xlContinuous, xlThin)
    Call BorderLine(rge1.Columns(1), xlRight, xlContinuous, xlThin)
    rge1.Columns("B:F").NumberFormat = "0.00"
End Function

'|fffd||fffd||fffd|d|fffd||693||fffd||fffd||fffd||fffd||3d6|@|fffd||fffd||fffd||295||6d1||fffd|
'return row number used
Private Function CopyResultKJidou(ByVal rgeFrom As Range, ByVal rgeTo As Range, ByVal nYSmpNum As Integer) As Integer
    Dim rgeChart As Range, rgeToTmp As Range
    Dim nRtn As Integer, nGrpRowNum As Integer
    
    rgeTo.Worksheet.Activate
    Application.ScreenUpdating = False  '?????????????
    rgeTo(1, 1) = "|fffd||fffd||fffd|d|fffd||693||fffd|"
    rgeTo(2, 1) = "|fffd||fffd||fffd||fffd|"
    rgeTo(2, 2) = "TCSI"
    rgeTo(2, 3) = "TC"
    rgeTo(2, 4) = "I"
                      
    'numData|fffd|f|fffd|[|fffd|^
    rgeFrom.Range("A2:D" & (nYSmpNum + 1)).Copy rgeTo.Offset(2, 0).Range("A1")
    'TC|fffd||fffd|copy
    rgeFrom.Range("C1:C" & (nYSmpNum + 1)).Copy rgeFrom.Offset(0, 3).Range("A1")
    
    '|fffd|r|fffd||fffd|
    Call BorderFrame(rgeTo(1, 1), xlMedium, xlThin, 0, 0)
    Set rgeToTmp = rgeTo.Offset(1, 0).Range("A1:D" & (nYSmpNum + 1))
    Call BorderFrame(rgeToTmp, xlMedium, xlHairline, 2, 2, 0)
    Call BorderLine(rgeToTmp.Rows(1), xlBottom, xlContinuous, xlThin)
    Call BorderLine(rgeToTmp.Columns(1), xlRight, xlContinuous, xlThin)
    rgeToTmp.Columns("B:D").NumberFormat = "0.00"
        
    CopyResultKJidou = nYSmpNum + 2
End Function

'EPA|fffd|@|fffd||fffd||fffd||295||6d1||fffd|
'return row number used
Private Function CopyResultEPA(ByVal rgeFrom As Range, ByVal rgeTo As Range, _
        ByVal nYSmpNum As Integer, ByVal nForcNum As Integer) As Integer
    Dim nGrpRowNum As Integer
    Dim rgeToTmp As Range
    
    Application.ScreenUpdating = False
    rgeTo(1, 1) = "EPA"
   
    rgeFrom.Range("A1:G" & (nYSmpNum + nForcNum + 1)).Copy rgeTo(2, 1)
    '|fffd|r|fffd||fffd|
    Call BorderFrame(rgeTo(1, 1), xlMedium, xlThin, 0, 0)
    Set rgeToTmp = rgeTo.Offset(1, 0).Range("A1:G" & (nYSmpNum + nForcNum + 1))
    Call BorderFrame(rgeToTmp, xlMedium, xlHairline, 2, 2, 0)
    Call BorderLine(rgeToTmp.Rows(1), xlBottom, xlContinuous, xlThin)
    Call BorderLine(rgeToTmp.Columns(1), xlRight, xlContinuous, xlThin)
    rgeToTmp.Columns("B:G").NumberFormat = "0.00"
    
    '|fffd|O|fffd||fffd||fffd|t
    If f_bGraph Then
        nGrpRowNum = EpaGraph(rgeToTmp.Range("A1"), rgeToTmp.Range("A1").Offset(0, 7), nYSmpNum, 0)
    End If
    
    CopyResultEPA = Application.max(nGrpRowNum, nYSmpNum + nForcNum + 1) + 1
End Function

'|fffd|X|fffd||fffd||fffd||fffd||fffd||34c||fffd||fffd||295||6d1||fffd|
'return row number used
Private Function CopyResultKeikou(ByVal rgeFrom As Range, ByVal rgeTo As Range, _
        ByVal nYSmpNum As Integer, ByVal nForcNum As Integer) As Integer
    Dim strFunName
    Dim rge As Range, rge1 As Range, rge2 As Range
    Dim dKeisuMax As Double, dKeiVal As Double
    Dim i As Integer, n As Integer, nGrpRowNum As Integer
    
    Application.ScreenUpdating = False
    If rgeFrom.Range("B18").Value = Empty Then                                  '???????????
        rgeFrom.Worksheet.Rows(rgeFrom.Range("B19").Row).Insert Shift:=xlDown
    End If
    strFunName = Array("-", "|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|[|fffd|g", "|fffd||fffd||fffd|R|fffd||390||fffd|", "|fffd|w|fffd||fffd|", "|fffd||fffd||fffd|W|fffd|X|fffd|e|fffd|B|fffd|b|fffd|N", "|fffd|S|fffd||fffd||fffd|y|fffd||fffd||fffd|c")   'Sep 26, 2003  PYJ
    If g_aDialog.dlgGs.nKkMethod = 1 Then       '|fffd||fffd||fffd||fffd|W|fffd||fffd|
        Set rge1 = rgeFrom.Range("C13")
        dKeisuMax = Val(rge1): n = 1
        For i = 2 To 6
            dKeiVal = Val(rge1(1, i))
            If dKeiVal > dKeisuMax Then n = i: dKeisuMax = dKeiVal
        Next i
        Set rge1 = rge1.Offset(-4, n - 1)
    Else                '|fffd|b|fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||30f|o|fffd||34f||fffd| : |fffd|w|fffd||fffd|(3)|fffd|A|fffd||fffd||fffd||fffd|(4)|fffd|A|fffd||fffd||fffd|[|fffd|g(5)|fffd|A|fffd||fffd||fffd|W|fffd|X(6)|fffd|A|fffd|S|fffd||fffd||fffd|s(7)|fffd|A|fffd||fffd||fffd|R|fffd||390||fffd|(8)
        Set rge = rgeFrom.Range("C9").Range("A1:F1")
        Set rge1 = rge.Find(strFunName(g_aDialog.dlgGs.nKkMethod - 1))
        If rge1 Is Nothing Then
            MsgBox "|fffd|w|fffd||80b3||fffd||a0bd||fffd||590||fffd||fffd||142||34c|v|fffd|Z|fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||702||fffd||fffd||fffd|"
            Exit Function
        End If
    End If
   
    rgeTo(1, 1) = "|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|"
    
    '---|fffd||590||fffd||fffd||fffd||fffd|A|fffd|W|fffd||fffd||fffd|C|fffd||fffd||fffd||fffd|W|fffd||fffd|
    rgeTo(2, 1) = "[|fffd||fffd||fffd||30c|W|fffd||fffd||fffd||190||fffd||fffd|x]"
    rgeFrom.Range("A9:B13").Copy rgeTo.Range("A3") 'Offset(2, 0)
    rge1.Range("A1:A5").Copy rgeTo.Range("C3") 'Offset(2, 2)
 
    Set rge2 = rgeTo.Offset(7, 0)
    '---|fffd||fffd||fffd||fffd|, TC|fffd|l (EPA|fffd||30c||fffd||fffd||282||fffd||fffd||fffd|)---
    g_aDialog.rgeInp.Copy rge2.Range("B1")
    
    '---|fffd||fffd||fffd||fffd|W|fffd||fffd| MAX|fffd||30a||590||fffd||fffd||fffd||303|f|fffd|[|fffd|^ ---
    Set rge1 = rge1.Offset(39, 0).Range("A1:A" & nYSmpNum + nForcNum + 1)
    rge1.Copy rge2.Range("C1")
    rge2.Range("C1").Range("A1:A" & nYSmpNum + nForcNum + 1).Interior.Pattern = xlNone
    Set rge1 = rge1.Offset(0, rgeFrom.Column - rge1.Column)
    rge1.Copy rge2.Range("A1")
    
    '|fffd|r|fffd||fffd|
    Call BorderFrame(rgeTo(1, 1), xlMedium, xlThin, 0, 0)
    Call BorderFrame(rgeTo.Range("A2:C7"), xlMedium, xlThin, 0, 0)
    Set rge1 = rgeTo.Offset(7, 0).Range("A1:C" & nYSmpNum + nForcNum + 1)
    Call BorderFrame(rge1, xlMedium, xlHairline, 2, 2)
    Call BorderLine(rge1.Rows(1), xlBottom, xlContinuous, xlThin)
    Call BorderLine(rge1.Columns(1), xlRight, xlContinuous, xlThin)
    rgeTo.Range("C4:C6").NumberFormat = "0.00"
    rgeTo.Range("C8").NumberFormat = "0.0000"
    rge1.Columns("B:C").NumberFormat = "0.00"
    
    '|fffd|O|fffd||fffd||fffd|t
    If f_bGraph Then
        nGrpRowNum = COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t(rge1.Offset(0, 4), rge1.Columns("A"), rge1.Columns("B:C"), _
            "|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|r|fffd|O|fffd||fffd||fffd|t", "|fffd||fffd||fffd||fffd|")
    End If
    
    CopyResultKeikou = forcIIf(nGrpRowNum > nYSmpNum + nForcNum + 1, nGrpRowNum, nYSmpNum + nForcNum + 1) + 8

End Function

'|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|Data |fffd||310||fffd||fffd||fffd|
'rgeKeikou|fffd|X|fffd||fffd||fffd||fffd||fffd||34c||fffd||fffd||fffd|
Private Function ArrangeInDataYouin(ByVal rgeTmpEpaKJidou As Range, ByVal rgeKJidouTmp As Range, ByVal rgeKeikou As Range, _
        ByVal nYSmpNum As Integer, ByVal nForcNum As Integer, ByVal bS As Boolean, ByVal nXItem As Integer)
    Dim rgeTmp As Range
    Dim nS As Integer
    
    'S|fffd||33a||fffd||7f0|
    If nYSmpNum >= g_aDialog.dlgGs.nLmtSmp2 Then
        rgeTmpEpaKJidou.Range("F1:F" & nYSmpNum + nForcNum + 1).Copy rgeTmpEpaKJidou.Range("I1")
        rgeTmpEpaKJidou.Range("I1")(nYSmpNum + 2, 1).Resize(nForcNum / 2, 1).Copy rgeTmpEpaKJidou.Range("I1")(nYSmpNum + nForcNum / 2 + 2, 1)
    ElseIf nYSmpNum >= g_aDialog.dlgGs.nLmtSmp1 And nYSmpNum < g_aDialog.dlgGs.nLmtSmp2 Then
        rgeKJidouTmp.Range("B1:B" & nYSmpNum + nForcNum + 1).Copy rgeTmpEpaKJidou.Range("I1")
        rgeTmpEpaKJidou.Range("I1")(nYSmpNum + 2, 1).Resize(nForcNum / 2, 1).Copy rgeTmpEpaKJidou.Range("I1")(nYSmpNum + nForcNum / 2 + 2, 1)
    End If
  
    'T|fffd||33a||fffd||7f0|
    rgeKeikou.Range("C8:C" & nYSmpNum + nForcNum + 9).Copy rgeTmpEpaKJidou.Range("H1")
    
    If Not (g_aDialog.RgeX Is Nothing) Then
        Set rgeTmp = rgeTmpEpaKJidou.Range(forcIIf(bS, "J1", "I1"))
        g_aDialog.RgeX.Copy rgeTmp
    End If
    
    '|fffd||693|I|fffd||3d0||fffd||fffd||348||fffd|   'not changed, but Dependent and Predictor must be on the same sheet
    If nYSmpNum >= g_aDialog.dlgGs.nLmtSmp1 And nYSmpNum < g_aDialog.dlgGs.nLmtSmp2 Then
        rgeKJidouTmp.Range("B1:B" & nYSmpNum + 1).Copy rgeTmpEpaKJidou.Range("C1")
    End If
    Set g_aDialog.rgeInp = rgeTmpEpaKJidou.Range("C1:C" & nYSmpNum + 1)
   
    '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||348||fffd|
    nS = forcIIf(bS, 1, 0)
    Set g_aDialog.RgeX = rgeTmpEpaKJidou.Offset(0, 7).Range("A1:" & nTo26Str(nXItem + 1 + nS) & nForcNum + nYSmpNum + 1)
End Function

'|fffd|v|fffd||fffd||fffd||fffd||fffd||34c||fffd||fffd||295||6d1||fffd|
Private Function CopyResultYouin(ByVal rgeFrom As Range, ByVal rgeTo As Range, ByVal rgeTmpEpaKJidou As Range, _
        ByVal nYSmpNum As Integer, ByVal nForcNum As Integer, ByVal bS As Boolean, ByVal nXItem As Integer)
    Dim rs As Integer, r1 As Integer, nGrpRowNum As Integer
    Dim rge1 As Range, rgeToTmp As Range, rgeFromTmp As Range
    
    Application.ScreenUpdating = False
    rgeTo(1, 1) = "|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|"
    
    '---|fffd||fffd||fffd||fffd|W|fffd||fffd|---
    rs = forcIIf(bS, 1, 0)
    r1 = 7 + nXItem + rs
    rgeFrom.Range("A" & r1 & ":B" & r1).Copy rgeTo.Offset(1, 0).Range("A1")
           
    '---|fffd||fffd||fffd||30c|W|fffd||fffd||fffd||190||fffd||fffd|x---
    r1 = 4 + nXItem + rs
    rgeTo(3, 1) = rgeFrom(1, 1)
    rgeFrom.Range("A2:C" & r1).Copy rgeTo.Offset(3, 0).Range("A1")
    rgeTo(5, 1) = "T"
    If bS Then rgeTo(6, 1) = "S"        'If Trim(rgeTo(6, 1)) <> "|fffd||8414||fffd||fffd|"
    '|fffd|r|fffd||fffd|
    Call BorderFrame(rgeTo(1, 1), xlMedium, xlThin, 0, 0)
    Call BorderFrame(rgeTo.Range("A2:D2"), xlMedium, xlHairline, 0, 2)
    rgeTo.Range("B2").NumberFormat = "0.0000"
    Call BorderLine(rgeTo.Range("A2"), xlRight, xlContinuous, xlThin)
    Call BorderFrame(rgeTo.Range("A3:D3"), xlMedium, xlThin, 0, 0)
    Set rge1 = rgeTo.Range("A4:D" & 7 + rs + nXItem)
    Call BorderFrame(rge1, xlMedium, xlHairline, 2, 2)
    Call BorderLine(rge1.Rows(1), xlTop, xlContinuous, xlThin)
    Call BorderLine(rge1.Rows(1), xlBottom, xlContinuous, xlThin)
    Call BorderLine(rge1.Columns(1), xlRight, xlContinuous, xlThin)
    rge1.Columns("B:C").NumberFormat = "0.00"
    
    '--- TCSI (EPA/|fffd||fffd||fffd|d|fffd||693||fffd||fffd||30c||fffd||fffd||282||fffd||fffd||fffd|)---
    Set rgeToTmp = rgeTo.Offset(7 + rs + nXItem, 0).Range("A1")
    rgeTmpEpaKJidou.Range("B1:B" & (nYSmpNum + nForcNum + 1)).Copy rgeToTmp.Range("B1")
    rgeToTmp(1, 2) = "TCSI"
           
    '---|fffd|\|fffd||fffd||fffd|l, |fffd|c|fffd||fffd|---
    Set rgeFromTmp = rgeFrom.Offset(19 + nXItem + rs, 0)
    rgeFromTmp.Range("A1:A" & (nYSmpNum + nForcNum + 1)).Copy rgeToTmp.Range("A1") '|fffd||fffd||fffd||fffd|
    rgeFromTmp.Range("C1:D" & nYSmpNum + nForcNum + 1).Copy rgeToTmp.Range("C1")
    
    '|fffd|r|fffd||fffd|
    Set rge1 = rgeToTmp.Range("A1:D" & nYSmpNum + nForcNum + 1)
    Call BorderFrame(rge1, xlMedium, xlHairline, 2, 2)
    Call BorderLine(rge1.Rows(1), xlBottom, xlContinuous, xlThin)
    Call BorderLine(rge1.Columns(1), xlRight, xlContinuous, xlThin)
    rge1.Columns("B:D").NumberFormat = "0.00"
    
    '|fffd|O|fffd||fffd||fffd|t
    If f_bGraph Then
        nGrpRowNum = COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t(rge1.Offset(0, 4), rge1.Columns("A"), rge1.Columns("B:C"), _
            "|fffd|\|fffd||fffd||fffd|O|fffd||fffd||fffd|t", "|fffd||fffd||fffd||fffd|")
    End If
    
    CopyResultYouin = Application.max(nGrpRowNum, nYSmpNum + nForcNum + 1) + r1
    
End Function

'=== EOF ===



Attribute VB_Name = "KJidouMdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: |fffd||fffd||fffd|d|fffd||693||fffd||fffd||fffd||fffd||3d6|@
'
' |fffd||c42c| : Aug 2003, PYJ
'=================================================
Option Explicit

#If Win64 Then
    #If VBA7 Then
        Declare PtrSafe Function ysk_KJidou_VBA Lib "MIST_E_64.dll" ( _
            ByVal nId As Long, _
            InBkName As String, InStName As String, _
            InRowBgn As Integer, InColBgn As Integer, _
            InRowEnd As Integer, InColEnd As Integer, _
            OutBkName As String, OutStName As String, _
            OutRow As Integer, OutCol As Integer, _
            circleVal As Integer, graphFlg As Integer, _
            directionFlg As Integer, dataFlg As Integer, _
            timeFlg As Integer, timeBgnYear As Integer, timeBgnMonth As Integer) As Integer
    #Else
        Declare Function ysk_KJidou_VBA Lib "MIST_E_64.dll" ( _
            ByVal nId As Long, _
            InBkName As String, InStName As String, _
            InRowBgn As Integer, InColBgn As Integer, _
            InRowEnd As Integer, InColEnd As Integer, _
            OutBkName As String, OutStName As String, _
            OutRow As Integer, OutCol As Integer, _
            circleVal As Integer, graphFlg As Integer, _
            directionFlg As Integer, dataFlg As Integer, _
            timeFlg As Integer, timeBgnYear As Integer, timeBgnMonth As Integer) As Integer
    #End If
#Else
    #If VBA7 Then
        Declare PtrSafe Function ysk_KJidou_VBA Lib "MIST_E.dll" ( _
            ByVal nId As Long, _
            InBkName As String, InStName As String, _
            InRowBgn As Integer, InColBgn As Integer, _
            InRowEnd As Integer, InColEnd As Integer, _
            OutBkName As String, OutStName As String, _
            OutRow As Integer, OutCol As Integer, _
            circleVal As Integer, graphFlg As Integer, _
            directionFlg As Integer, dataFlg As Integer, _
            timeFlg As Integer, timeBgnYear As Integer, timeBgnMonth As Integer) As Integer
    #Else
        Declare Function ysk_KJidou_VBA Lib "MIST_E.dll" ( _
            ByVal nId As Long, _
            InBkName As String, InStName As String, _
            InRowBgn As Integer, InColBgn As Integer, _
            InRowEnd As Integer, InColEnd As Integer, _
            OutBkName As String, OutStName As String, _
            OutRow As Integer, OutCol As Integer, _
            circleVal As Integer, graphFlg As Integer, _
            directionFlg As Integer, dataFlg As Integer, _
            timeFlg As Integer, timeBgnYear As Integer, timeBgnMonth As Integer) As Integer
    #End If
#End If

Sub IS_KJidou_VBA()
Attribute IS_KJidou_VBA.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bRtn As Boolean, bGraph As Boolean
    Dim nYSmpNum As Integer
    Dim rgeData As Range, rgeChartBgn As Range
    
    bRtn = GetDlgInp(YSK_EMA)
    If Not bRtn Then Exit Sub
    
    '|fffd|b|fffd||fffd||6f8||fffd||fffd||442||fffd||fffd||102||44f|o|fffd||fffd|
    Call changeToYSKDir
    
    bGraph = True 'g_aDialog.bGraph
    g_aDialog.bGraph = False
    bRtn = doKJidou_VBA()
        
    If bRtn And bGraph Then
        nYSmpNum = g_aDialog.rgeInp.Rows.Count - 1
        Set rgeData = g_aDialog.rgeOutBgn.Range("A1:D" & nYSmpNum + 1)
        Set rgeChartBgn = g_aDialog.rgeOutBgn.Offset(nYSmpNum + 2, 0)
        Call KJidouChart(rgeData, rgeChartBgn, False)
        g_aDialog.rgeOutBgn.Select
    End If
End Sub
    
Function doKJidou_VBA() As Boolean
Attribute doKJidou_VBA.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim rtn As Integer
    Dim r1 As Integer, c1 As Integer, r2 As Integer, c2 As Integer, ro As Integer, co As Integer
    Dim vInBkName As String, vInStName As String, vOutBkName As String, vOutStName As String
    Dim nId As Long
    
    r1 = g_aDialog.rgeInp.Row - 1: r2 = r1 + g_aDialog.rgeInp.Rows.Count - 1
    c1 = g_aDialog.rgeInp.Column - 1: c2 = c1 + g_aDialog.rgeInp.Columns.Count - 1
    ro = g_aDialog.rgeOutBgn.Row - 1: co = g_aDialog.rgeOutBgn.Column - 1
    
    vInBkName = g_aDialog.rgeInp.Worksheet.Parent.Name
    vInStName = g_aDialog.rgeInp.Worksheet.Name
    vOutBkName = g_aDialog.rgeOutBgn.Worksheet.Parent.Name
    vOutStName = g_aDialog.rgeOutBgn.Worksheet.Name
    
    If g_aDialog.nTimeStyle = 4 And g_aDialog.nMonth < 1 Then
        g_aDialog.nMonth = 1
    End If
    
    nId = IIf(isTrialVer, 0, 1)
    
    rtn = ysk_KJidou_VBA(nId, vInBkName, vInStName, r1, c1, r2, c2, _
        vOutBkName, vOutStName, ro, co, _
        g_aDialog.dlgEma.nSmpNum, _
        forcIIf(g_aDialog.bGraph, 2, 1), forcIIf(g_aDialog.bColData, 1, 2), forcIIf(g_aDialog.bTitle, 1, 2), _
        g_aDialog.nTimeStyle, g_aDialog.nYearBgn, g_aDialog.nMonth)
        
    If rtn = -100 Then
        MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
        doKJidou_VBA = False
        Exit Function
    End If
    
'        rtn = ysk_KJidou_VBA(vInBkName, vInStName, vInRowBgn, vInColBgn, _
'                      vInRowEnd, vInColEnd, vOutBkName, vOutStName, _
'                      vOutRow, vOutCol, vcircleVal, vgraphFlg, _
'                      vdiretFlg, vdataFlg, vtimeFlg, vbgnYear, vbgnMonth)
    Call Error_Display(rtn)             'added by SJY on 1997.7.17
    
    doKJidou_VBA = (rtn = 0)
End Function

'|fffd||fffd||fffd|d|fffd||693||fffd||fffd||fffd||fffd||3d6|@|fffd|O|fffd||fffd||fffd|t
'bGousei: True--called by |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|; False--called by |fffd||fffd||fffd|d|fffd||693||fffd||fffd||fffd||fffd||fffd|
Function KJidouChart(ByVal rgeData As Range, ByVal rgeChartBgn As Range, ByVal bGousei As Boolean) As Integer
Attribute KJidouChart.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim nRtn As Integer, nGrpRowNum As Integer, nDist As Integer
    
    nDist = forcIIf(bGousei, 10, 0)
    '---TCSI + TC---
    nRtn = COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t(rgeChartBgn, rgeData.Columns("A"), rgeData.Columns("B:C"), _
        "|fffd||fffd||fffd|d|fffd||693||fffd||fffd||fffd||fffd||3d6|@", "", , , , nDist)
    nGrpRowNum = nRtn + 1
    '---I---
    Set rgeChartBgn = rgeChartBgn.Offset(nRtn + 1, 0)
    nRtn = COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t(rgeChartBgn, rgeData.Columns("A"), rgeData.Columns("D"), _
        "|fffd||fffd||fffd|d|fffd||693||fffd||fffd||fffd||fffd||3d6|@", "", , , , nDist)
    nGrpRowNum = nGrpRowNum + nRtn
    KJidouChart = nGrpRowNum
End Function

'--- end of file ---

Attribute VB_Name = "KeikouMdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: |fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|
'
' |fffd||c42c| : Aug 2003, PYJ, LSQ, 2007.02 WZH
'=================================================
Option Explicit

#If Win64 Then
    #If VBA7 Then
        Declare PtrSafe Function ysk_Keikou_VBA Lib "MIST_B_64.dll" ( _
            ByVal nId As Long, _
            InBkName As String, InStName As String, InRowBgn As Integer, InColBgn As Integer, _
            InRowEnd As Integer, InColEnd As Integer, OutBkName As String, OutStName As String, _
            OutRow As Integer, OutCol As Integer, _
            yskDataNum As Integer, funcFlgArray() As Integer, _
            suiteiFlg As Integer, si As Integer, upperValueFlg As Integer, upperValue As Double, _
            graphFlg As Integer, directionFlg As Integer, dataFlg As Integer, _
            timeFlg As Integer, timeBgnYear As Integer, timeBgnMonth As Integer, _
            ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #Else
        Declare Function ysk_Keikou_VBA Lib "MIST_B_64.dll" ( _
            ByVal nId As Long, _
            InBkName As String, InStName As String, InRowBgn As Integer, InColBgn As Integer, _
            InRowEnd As Integer, InColEnd As Integer, OutBkName As String, OutStName As String, _
            OutRow As Integer, OutCol As Integer, _
            yskDataNum As Integer, funcFlgArray() As Integer, _
            suiteiFlg As Integer, si As Integer, upperValueFlg As Integer, upperValue As Double, _
            graphFlg As Integer, directionFlg As Integer, dataFlg As Integer, _
            timeFlg As Integer, timeBgnYear As Integer, timeBgnMonth As Integer, _
            ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #End If
#Else
    #If VBA7 Then
        Declare PtrSafe Function ysk_Keikou_VBA Lib "MIST_B.dll" ( _
            ByVal nId As Long, _
            InBkName As String, InStName As String, InRowBgn As Integer, InColBgn As Integer, _
            InRowEnd As Integer, InColEnd As Integer, OutBkName As String, OutStName As String, _
            OutRow As Integer, OutCol As Integer, _
            yskDataNum As Integer, funcFlgArray() As Integer, _
            suiteiFlg As Integer, si As Integer, upperValueFlg As Integer, upperValue As Double, _
            graphFlg As Integer, directionFlg As Integer, dataFlg As Integer, _
            timeFlg As Integer, timeBgnYear As Integer, timeBgnMonth As Integer, _
            ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #Else
        Declare Function ysk_Keikou_VBA Lib "MIST_B.dll" ( _
            ByVal nId As Long, _
            InBkName As String, InStName As String, InRowBgn As Integer, InColBgn As Integer, _
            InRowEnd As Integer, InColEnd As Integer, OutBkName As String, OutStName As String, _
            OutRow As Integer, OutCol As Integer, _
            yskDataNum As Integer, funcFlgArray() As Integer, _
            suiteiFlg As Integer, si As Integer, upperValueFlg As Integer, upperValue As Double, _
            graphFlg As Integer, directionFlg As Integer, dataFlg As Integer, _
            timeFlg As Integer, timeBgnYear As Integer, timeBgnMonth As Integer, _
            ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer
    #End If
#End If


Private Sub InsertInfo(ByVal outRgeBgn As Range)
    Dim i As Long, j As Long
    Dim rge As Range, rge2 As Range
    Dim outSht As Worksheet
    Dim info1 As Variant, info2 As Variant
    On Error Resume Next
    info1 = Array(Array(1, "|fffd||fffd||fffd||fffd|", "y = a * x + b"), _
                 Array(2, "|fffd||fffd||fffd||fffd|", "y = a * (1 / x) + b"), _
                 Array(3, "|fffd||fffd||fffd|[|fffd|g", "y = a * |fffd||fffd|x + b"), _
                 Array(4, "|fffd||fffd||fffd|R|fffd||390||fffd|", "y = a * Log(x) + b"), _
                 Array(5, "|fffd||5c2||fffd||fffd||fffd|", "y = a * x ^ b"), _
                 Array(6, "|fffd|w|fffd||fffd|", "y = a * b ^ x"), _
                 Array(7, "|fffd|C|fffd||fffd||fffd|w|fffd||fffd|", "y = k - a * b ^ x"), _
                 Array(8, "|fffd||fffd||fffd|W|fffd|X|fffd|e|fffd|B|fffd|b|fffd|N", "y = k / (1 + a * Exp(-bx))"), _
                 Array(9, "|fffd|S|fffd||fffd||fffd|y|fffd||fffd||fffd|c", "y = ka ^ (b ^ x)"), _
                 Array(10, "|fffd||fffd||fffd||fffd||fffd||590||fffd|", "y = a0 + a1 * x + a2 * x ^ 2 + a3 * x ^ 3 + |fffd|E|fffd|E|fffd|E"))
    info2 = Array(Array("|fffd||fffd||fffd||fffd|", "", ""), _
                Array("|fffd||fffd||fffd||fffd|", "", ""), _
                Array("|fffd||fffd||fffd|[|fffd|g", "", ""), _
                Array("|fffd||fffd||fffd|R|fffd||390||fffd|", "", ""), _
                Array("|fffd||5c2||fffd||fffd||fffd|", "", "Log(y) = b * Log(x) + Log(a)"), _
                Array("|fffd|w|fffd||fffd|", "", "Log(y) = Log(b) * x + Log(a)"), _
                Array("|fffd|C|fffd||fffd||fffd|w|fffd||fffd|", "", "Log(k - y) = Log(b) * x + Log(a)"), _
                Array("|fffd||fffd||fffd|W|fffd|X|fffd|e|fffd|B|fffd|b|fffd|N", "", "Log((k - y) / y) = -bx + Log(a)"), _
                Array("|fffd|S|fffd||fffd||fffd|y|fffd||fffd||fffd|c", "", "Log((Log(k)|fffd||Log(y))|fffd||fffd|Log(b)*x|fffd|{Log(Log(1/a))"))
    Set outSht = outRgeBgn.Worksheet
    Set rge = outSht.Columns(outRgeBgn.Column).Find("[|fffd||fffd||fffd||30c|W|fffd||fffd||fffd||190||fffd||fffd|x]")
    If Not rge Is Nothing Then
        Set rge2 = rge(12, 1)
        For i = 1 To 11
            outSht.Rows(rge2.Row + 1).Insert
        Next i
        Set rge2 = rge2(2, 1)
        rge2 = "|fffd|i|fffd|P|fffd||fffd||fffd||fffd||fffd||582||315||3cc|`|fffd|j |fffd|x|fffd||fffd||fffd|`|fffd|w|fffd|{|fffd|a"
        Set rge2 = rge2(2, 1)
        For i = 0 To 8
            For j = 0 To 2
                rge2(i + 1, j + 1) = info2(i)(j)
            Next j
        Next i
        Set rge = rge(2, 1)
        For i = 1 To 11
            outSht.Rows(rge.Row + 1).Insert
        Next i
        Set rge = rge(2, 1)
        For i = 0 To 9
            For j = 0 To 2
                rge(i + 1, j + 1) = info1(i)(j)
            Next j
        Next i
        rge(11, 3) = "|fffd||590||fffd||fffd||fffd|"
    End If
    On Error GoTo 0
End Sub

Sub IS_Keikou_VBA()
Attribute IS_Keikou_VBA.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bRtn As Boolean
    Dim rtn As Integer, n As Integer, nXSmpNum As Integer
    Dim r1 As Integer, c1 As Integer, r2 As Integer, c2 As Integer, ro As Integer, co As Integer
    
    bRtn = GetDlgInp(YSK_KK)
    If Not bRtn Then Exit Sub
    
    '|fffd|b|fffd||fffd||6f8||fffd||fffd||442||fffd||fffd||102||44f|o|fffd||fffd|
    Call changeToYSKDir
        
    bRtn = doKeikou_VBA()
    
    g_aDialog.bGraph = True
    
    If bRtn And g_aDialog.bGraph Then
        n = ActiveSheet.ChartObjects.Count
        nXSmpNum = g_aDialog.rgeInp.Rows.Count - 1 + g_aDialog.dlgKk.nProdict
        ActiveSheet.ChartObjects(n).Activate

        Call MdfChartKeikou(nXSmpNum)
        
        InsertInfo g_aDialog.rgeOutBgn
        g_aDialog.rgeOutBgn.Worksheet.Activate
        g_aDialog.rgeOutBgn.Select
    End If
End Sub

Function doKeikou_VBA() As Boolean
Attribute doKeikou_VBA.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim rtn As Integer
    Dim r1 As Integer, c1 As Integer, r2 As Integer, c2 As Integer, ro As Integer, co As Integer
    Dim vInBkName As String, vInStName As String, vOutBkName As String, vOutStName As String
    Dim VbaGrp(1 To 1) As VBAGRAPH
    Dim nExcelVer As Integer
    Dim nId As Long
    
    r1 = g_aDialog.rgeInp.Row - 1: r2 = r1 + g_aDialog.rgeInp.Rows.Count - 1
    c1 = g_aDialog.rgeInp.Column - 1: c2 = c1 + g_aDialog.rgeInp.Columns.Count - 1
    ro = g_aDialog.rgeOutBgn.Row - 1: co = g_aDialog.rgeOutBgn.Column - 1
    
    vInBkName = g_aDialog.rgeInp.Worksheet.Parent.Name
    vInStName = g_aDialog.rgeInp.Worksheet.Name
    vOutBkName = g_aDialog.rgeOutBgn.Worksheet.Parent.Name
    vOutStName = g_aDialog.rgeOutBgn.Worksheet.Name
    
    nExcelVer = getExcelVerNo()
    Call InitGrpAry(VbaGrp)
    
    nId = IIf(isTrialVer, 0, 1)
    
    rtn = ysk_Keikou_VBA(nId, vInBkName, vInStName, r1, c1, r2, c2, _
        vOutBkName, vOutStName, ro, co, _
        g_aDialog.dlgKk.nProdict, g_aDialog.dlgKk.nmFuncSel(), g_aDialog.dlgKk.nSuitei, 0, _
        g_aDialog.dlgKk.nUpLimitFlg, g_aDialog.dlgKk.dUpLimit, _
        forcIIf(g_aDialog.bGraph, 2, 1), forcIIf(g_aDialog.bColData, 1, 2), forcIIf(g_aDialog.bTitle, 1, 2), _
        g_aDialog.nTimeStyle, g_aDialog.nYearBgn, g_aDialog.nMonth, _
        nExcelVer, VbaGrp)
        
    If rtn = -100 Then
        MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
        doKeikou_VBA = False
        Exit Function
    End If
    
    If rtn = 0 And nExcelVer >= 12 And VbaGrp(1).type > 0 Then
        Call ConvToBSTR(VbaGrp(1))
        Application.Run GxlaBkGraph1 & "!DrawKeiKou", VbaGrp(1).sheetName, VbaGrp(1).grpOut, VbaGrp(1).grpData, VbaGrp(1).grpPara
    End If
    
'    rtn = ysk_Keikou_VBA(vYBkName, vYStName, vYRowBgn, vYColBgn, vYRowEnd, vYColEnd, _
'                    vOutBkName, vOutStName, vOutRow, vOutCol, _
'                    vyskDataNum, vfuncFlgArray(), _
'                    vsuiteiFlg, 0, vupperValueFlg, vupperValue, vgraphFlg, _
'                    vdiretFlg, vdataFlg, vtimeFlg, vbgnYear, vbgnMonth)                'changed by SJY on 1997.7.18

    'Call Error_Display(rtn)             'added by SJY on 1997.7.17
    
    doKeikou_VBA = (rtn = 0)
End Function

'--- end of file ---
Attribute VB_Name = "MdlBasicInfo"
'=======================================================
' SR2 for iSTAT_MKK Ver1.0
'
' 2011.9 WZH LSQ
'=======================================================

Option Private Module
Option Explicit

Type Srk1Para
    RgeInfo As String * 256
    OutSheet As String * 256
    RgeObj As String * 256
    RgeVar As String * 256
    RgeVarKind As String * 256
    RgeClass As String * 256
    RgeSmpName As String * 256
    RgeCateName As String * 256
    RgeYskData As String * 256          'only used for proceeding data
    RgeYskName As String * 256          'only used for proceeding data
    bExcept As Long
    bExcept_n0 As Long
    bYsk As Long                        'only used for proceeding data
    bExtraInfo As Long
    nVarSelMethod As Long
    bSmpName As Long
    bNum2Class As Long
    bCateName As Long
    bPointGrp As Long
End Type

Type Srk1Para_Extra
    bTimeLag As Long
    RgeTimeLag As String * 256          'only used for procedding data
    nTimeStyle As Long
    nYear As Long
    nMonth As Long
End Type

Private Const X_MAX As Integer = 30
Private Const CATE_MAX As Integer = 200

Private VbaGrp() As VBAGRAPH
Private m_varselect As String
Private m_bvarselected As Boolean
Private sr1tbl As Srk1Para
Private sr1Extra As Srk1Para_Extra

#If Win64 Then
    #If VBA7 Then
        Private Declare PtrSafe Function sr1_dlg Lib "MIST_A_64.dll" (ByVal nId As Long, sr1tbl As Srk1Para) As Integer
    #Else
        Private Declare Function sr1_dlg Lib "MIST_A_64.dll" (ByVal nId As Long, sr1tbl As Srk1Para) As Integer
    #End If
#Else
    #If VBA7 Then
        Private Declare PtrSafe Function sr1_dlg Lib "MIST_A.dll" (ByVal nId As Long, sr1tbl As Srk1Para) As Integer
    #Else
        Private Declare Function sr1_dlg Lib "MIST_A.dll" (ByVal nId As Long, sr1tbl As Srk1Para) As Integer
    #End If
#End If

Private Function CountUniqueValues(InputRange As Range) As Long
    Dim cl As Range, UniqueValues As New Collection
    Dim rowNum As Long, colNum As Long
    Dim i As Long, j As Long
    Dim vdata As Variant
    On Error Resume Next
    rowNum = InputRange.Rows.Count
    colNum = InputRange.Columns.Count
    vdata = InputRange.Value
    For i = 1 To rowNum
        For j = 1 To colNum
            UniqueValues.Add vdata(i, j), CStr(vdata(i, j))
        Next j
    Next i
    On Error GoTo 0
    CountUniqueValues = UniqueValues.Count
End Function

'RgeX : |fffd|K|fffd||fffd||fffd|l|fffd|w|fffd||fffd||348||fffd| (formatted)
'RgeCateNum : Item category number (0=numeric item)
'outBgn : category name output begin cell
'
'11.8.21 LSQ
Private Sub nu_makeCateName_forNumItem(ByVal ItemNum As Integer, ByVal RgeX As Range, ByVal RgeCateNum As Range, ByVal outBgn As Range)
    Dim i As Integer, j As Integer, cateN As Integer
    Dim x1 As Double, x2 As Double, dxHalf As Double
    
    If RgeX Is Nothing Or ItemNum < 1 Then Exit Sub    'no number item categorized
    
    For i = 1 To ItemNum
        cateN = RgeCateNum(1, i)
        If cateN = 0 Then
            cateN = RgeX(1, i)
            If cateN < 1 Then GoTo nextItem 'in fact = ERROR
            
            x1 = RgeX(2, i)
            x2 = RgeX(3, i)
            dxHalf = (x2 - x1) / 2
            
            outBgn(1, i) = "|fffd|`" & (x1 + dxHalf)
            For j = 2 To cateN - 1
                outBgn(j, i) = (x1 + dxHalf) & "|fffd|`" & (x2 + dxHalf)
                'next
                x1 = x1 + 2 * dxHalf
                x2 = x2 + 2 * dxHalf
            Next j
            outBgn(cateN, i) = (x2 - dxHalf) & "|fffd|`"
        End If
nextItem:
    Next i
        
End Sub

'2011.12.04 rewritten
Private Sub makeCateName_forNumItem(ByVal ItemNum As Integer, ByVal RgeX As Range, ByVal RgeCateNum As Range, ByVal outBgn As Range)
    Dim i As Integer, j As Integer, cateN As Integer
    Dim x1 As Double, x2 As Double, dxHalf As Double
    
    If RgeX Is Nothing Or ItemNum < 1 Then Exit Sub    'no number item categorized
    
    For i = 1 To ItemNum
        cateN = RgeCateNum(1, i)
        If cateN = 0 Then
            cateN = RgeX(1, i)
            If cateN < 1 Then GoTo nextItem 'in fact = ERROR
            
            x1 = RgeX(2, i)
            x2 = RgeX(3, i)
            
            outBgn(1, i) = "|fffd|`" & x1
            For j = 2 To cateN
                outBgn(j, i) = x1 & "|fffd|`" & x2
                'next
                x1 = RgeX(j + 1, i)
                x2 = RgeX(j + 2, i)
            Next j
        End If
nextItem:
    Next i
        
End Sub
'end rewritten

'11.8.21 LSQ mdf
Private Function handleSr1Data() As Worksheet
    Dim i As Long, j As Long, k As Long
    Dim RgeObj As Range, RgeVar As Range, rge As Range
    Dim RgeClass As Range, RgeVarKind As Range
    Dim RgeSmpName As Range, RgeCateName As Range
    Dim RgeYskData As Range, RgeYskName As Range
    Dim RgeTimeLag As Range
    Dim tmpSht As Worksheet
    Dim sr1obj As Variant, sr1var As Variant, sr1cate As Variant, sr1varkind As Variant, varkind() As Long
    Dim sr1VarSel As Variant
    Dim varTimeLag As Variant
    Dim cateNameRow As Long, varKindRow As Long, classRow As Long
    Dim CateNum As Long, smpNum As Long, ItemNum As Long, objSmpNum As Long
    Dim tmpv As Long, totalCateNum As Long
    Dim msgStr As String
    Dim bgnCelCateNm As Range
    
    On Error Resume Next
    Set RgeObj = Range(sr1tbl.RgeObj)
    Set RgeVar = Range(sr1tbl.RgeVar)
    Set RgeVarKind = Range(sr1tbl.RgeVarKind)
    
    '2012.10.22 added
    ItemNum = RgeVar.Columns.Count
    smpNum = RgeObj.Rows.Count
    
    If RgeVarKind Is Nothing Then
        Set tmpSht = SbkThis.Sheets("Temp")
        tmpSht.Cells.ClearContents
        Set rge = tmpSht.Range("B1")
        For i = 1 To ItemNum
            rge(1, i) = 0
        Next i
        Set RgeVarKind = rge.Resize(1, ItemNum)
    End If
    'end add
    
    If sr1tbl.bNum2Class = 1 Then
        Set RgeClass = Range(sr1tbl.RgeClass)
    End If
    If sr1tbl.bCateName = 1 Then
        Set RgeCateName = Range(sr1tbl.RgeCateName)
    End If
    If sr1tbl.bSmpName = 1 Then
        Set RgeSmpName = Range(sr1tbl.RgeSmpName)
    End If
    If sr1tbl.bYsk = 1 Then
        Set RgeYskData = Range(sr1tbl.RgeYskData)
        Set RgeYskName = Range(sr1tbl.RgeYskName)
    End If
    If sr1Extra.bTimeLag = 1 Then
        Set RgeTimeLag = Range(sr1Extra.RgeTimeLag)
    End If
    cateNameRow = RgeObj.Rows.Count
    If cateNameRow < RgeVar.Rows.Count Then
        cateNameRow = RgeVar.Rows.Count
    End If
    If cateNameRow < RgeSmpName.Rows.Count Then
        cateNameRow = RgeSmpName.Rows.Count
    End If
    cateNameRow = cateNameRow + 6
    sr1obj = RgeObj.Value
    sr1var = RgeVar.Value
    sr1varkind = RgeVarKind.Value
    CateNum = Application.WorksheetFunction.max(sr1varkind)
    If CateNum = 0 Then CateNum = 1
    classRow = cateNameRow + CateNum + 2
    
    ItemNum = RgeVar.Columns.Count
    smpNum = RgeObj.Rows.Count
    
    ReDim varkind(1 To 1, 1 To ItemNum)
    If ItemNum = 1 Then
        varkind(1, 1) = sr1varkind
    Else
        For i = 1 To ItemNum
            varkind(1, i) = sr1varkind(1, i)
        Next i
    End If
    
    If smpNum <> RgeVar.Rows.Count Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleSr1Data = Nothing
        Exit Function
    End If
    If ItemNum > X_MAX Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleSr1Data = Nothing
        Exit Function
    End If
    If sr1Extra.bTimeLag = 1 Then
        If RgeTimeLag Is Nothing Then
            MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        If RgeTimeLag.Columns.Count <> ItemNum Then
            MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        varTimeLag = RgeTimeLag.Value
        For i = 1 To ItemNum
            If varkind(1, i) = 0 Then
                j = Val(varTimeLag(1, i))
                If Abs(j) >= smpNum Then
                    MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Set handleSr1Data = Nothing
                    Exit Function
                Else
                    varTimeLag(1, i) = j
                End If
            Else
                If Not IsEmpty(RgeTimeLag(1, i)) Then
                    MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Set handleSr1Data = Nothing
                    Exit Function
                Else
                    varTimeLag(1, i) = 0
                End If
            End If
        Next i
    End If
    
    Set rge = RgeVar(2, 1).Resize(smpNum - 1, ItemNum)
    For i = 1 To ItemNum
        If varkind(1, i) > 0 Then
            If Application.WorksheetFunction.max(rge.Columns(i)) <> varkind(1, i) Then
                MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                Set handleSr1Data = Nothing
                Exit Function
            End If
            If sr1tbl.bExcept_n0 = 0 Then
                If CountUniqueValues(rge.Columns(i)) <> varkind(1, i) Then
                    MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||fffd|0|fffd||fffd||fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
                    Set handleSr1Data = Nothing
                    Exit Function
                End If
            End If
        End If
    Next i
    msgStr = ""
    If RgeObj Is Nothing Then
        msgStr = "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf RgeVar Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf RgeVarKind Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr1tbl.bNum2Class = 1 And RgeClass Is Nothing) Then
        msgStr = "|fffd||293|I|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr1tbl.bCateName = 1 And RgeCateName Is Nothing) Then
        msgStr = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr1tbl.bSmpName = 2 And RgeSmpName Is Nothing) Then
        msgStr = "|fffd||5368e||496||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    'ElseIf CateNum < 2 Then
    '    msgStr = "|fffd||fffd||fffd||343|f|fffd|[|fffd|^|fffd||355|s|fffd||fffd|"
    ElseIf RgeVar.Columns.Count <> RgeVarKind.Columns.Count Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf Not RgeCateName Is Nothing Then
        If (CateNum <> RgeCateName.Rows.Count Or RgeVar.Columns.Count <> RgeCateName.Columns.Count) Then
            msgStr = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        End If
    ElseIf sr1tbl.bYsk = 1 And RgeYskData Is Nothing Then
        msgStr = "|fffd||53683|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If

    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set handleSr1Data = Nothing
        Exit Function
    End If
    
    If m_varselect <> "0" Then
        sr1VarSel = Split(m_varselect, ",")
    Else
        ReDim sr1VarSel(0 To RgeVar.Columns.Count) As Long
        sr1VarSel(0) = RgeVar.Columns.Count
        For i = 1 To RgeVar.Columns.Count
            sr1VarSel(i) = i - 1
        Next i
    End If
    
    ItemNum = sr1VarSel(0)
    
    totalCateNum = 0
    If sr1tbl.bNum2Class = 1 Then
        If RgeClass.Rows.Count > 31 Then
            MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: 1|fffd||fffd||fffd||fffd||fffd||3d0||fffd|MAX30"
            Set handleSr1Data = Nothing
            Exit Function
        Else
            For i = 1 To ItemNum
                tmpv = RgeClass(1, sr1VarSel(i) + 1)
                totalCateNum = totalCateNum + tmpv
                If tmpv > 30 Then
                    MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: 1|fffd||fffd||fffd||fffd||fffd||3d0||fffd|MAX30"
                    Set handleSr1Data = Nothing
                    Exit Function
                End If
                'If varkind(1, sr1VarSel(i) + 1) = 0 And tmpv < 1 Then
                '    MsgBox "|fffd||fffd||fffd||28d||fffd||fffd||682||315||fffd||fffd||789||fffd||fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                '    Set handleSr1Data = Nothing
                '    Exit Function
                'End If
                If tmpv > CateNum Then CateNum = tmpv
            Next i
        End If
    End If
    
    For i = 1 To ItemNum
        tmpv = varkind(1, sr1VarSel(i) + 1)
        If tmpv < 0 Then
            MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        totalCateNum = totalCateNum + tmpv
    Next i
    
    If totalCateNum > CATE_MAX Then
        MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: |fffd||fffd||fffd|vMAX" & CATE_MAX
        Set handleSr1Data = Nothing
        Exit Function
    End If
    
    If sr1tbl.bExcept = 0 Then
        Set rge = RgeVar.Offset(1, 0).Resize(smpNum, ItemNum)
        For i = 1 To ItemNum
            k = sr1VarSel(i) + 1
            sr1var = rge.Columns(k).Value
            If WorksheetFunction.Count(sr1var) <> smpNum - 1 Then
                Set handleSr1Data = Nothing
                Exit Function
            End If
        Next i
    End If
    
    If sr1tbl.bYsk = 1 Then
        cateNameRow = cateNameRow + RgeYskData.Rows.Count
        smpNum = smpNum + RgeYskData.Rows.Count
    End If
    
    Set tmpSht = SbkThis.Sheets("Sr1Data") 'RgeVar.Worksheet.Parent.Sheets.Add
    tmpSht.Cells.ClearContents
    Set rge = tmpSht.Range("$B$1")
    If Not RgeSmpName Is Nothing Then
        RgeSmpName.Copy
        rge(2, 1).PasteSpecial xlValues
    Else
        For i = 1 To cateNameRow - 6 - 1
            rge(i + 1, 1) = i
        Next i
    End If
    
    For i = 1 To RgeVar.Rows.Count
        For j = 1 To ItemNum
            k = sr1VarSel(j) + 1
            If i > 1 And sr1Extra.bTimeLag = 1 Then
                If varTimeLag(1, k) >= 0 Then
                    If i - 1 <= varTimeLag(1, k) Then
                        rge(i, j + 2) = ""
                    Else
                        rge(i, j + 2) = RgeVar(i - varTimeLag(1, k), k)
                    End If
                Else
                    If i - 1 > smpNum + varTimeLag(1, k) Then
                        rge(i, j + 2) = ""
                    Else
                        rge(i, j + 2) = RgeVar(i - varTimeLag(1, k), k)
                    End If
                End If
            Else
                rge(i, j + 2) = RgeVar(i, k)
            End If
        Next j
    Next i
    tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)) = sr1obj
    
    If sr1tbl.bYsk = 1 Then
        If Not RgeYskName Is Nothing Then
            RgeYskName.Copy
            rge(RgeObj.Rows.Count + 1, 1).PasteSpecial xlValues
        Else
            For i = 1 To RgeYskData.Rows.Count
                rge(RgeObj.Rows.Count + i, 1) = i + smpNum
            Next i
        End If
        For i = 1 To RgeYskData.Rows.Count
            For j = 1 To ItemNum
                rge(RgeObj.Rows.Count + i, j + 2) = RgeYskData(i, sr1VarSel(j) + 1)
            Next j
        Next i
    End If
    
    sr1tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)).Address & vbNullChar
    sr1tbl.RgeVar = tmpSht.Range(rge(1, 3), rge(smpNum, ItemNum + 2)).Address & vbNullChar
        
    If Not RgeCateName Is Nothing Then
        CateNum = RgeCateName.Rows.Count
        sr1cate = RgeCateName.Value
        For i = 1 To ItemNum
            For j = 1 To CateNum
                If Trim(sr1cate(j, sr1VarSel(i) + 1)) = "" Then
                    rge(cateNameRow + j - 1, i) = "C-" & j
                Else
                    rge(cateNameRow + j - 1, i) = sr1cate(j, sr1VarSel(i) + 1)
                End If
            Next j
        Next i
    Else
        For i = 1 To ItemNum
            For j = 1 To CateNum
                rge(cateNameRow + j - 1, i) = "C-" & j
            Next j
        Next i
    End If
    sr1tbl.bCateName = 1
    sr1tbl.RgeCateName = tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, ItemNum)).Address & vbNullChar
    sr1tbl.RgeSmpName = tmpSht.Range(rge(2, 1), rge(RgeSmpName.Rows.Count + 1, 1)).Address & vbNullChar
    
    Set rge = tmpSht.Range(sr1tbl.RgeVar)
    smpNum = rge.Rows.Count
    objSmpNum = RgeObj.Rows.Count
    For i = rge.Rows.Count To 2 Step -1
        sr1var = rge.Rows(i).Value
        If Application.WorksheetFunction.Count(sr1var) <> rge.Columns.Count Or (i <= objSmpNum And Application.WorksheetFunction.Count(RgeObj(i, 1)) <> 1) Then
            If sr1tbl.bExcept = 1 Then
                tmpSht.Rows(i).Delete
                smpNum = smpNum - 1
                cateNameRow = cateNameRow - 1
                objSmpNum = objSmpNum - 1
            Else
                Set handleSr1Data = Nothing
                Exit Function
            End If
        End If
    Next i
    
    Set rge = tmpSht.Range("$B$1")
    
    'sr1tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)).Address & vbNullChar
    sr1tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(objSmpNum, 2)).Address & vbNullChar
    sr1tbl.RgeVar = tmpSht.Range(rge(1, 3), rge(smpNum, ItemNum + 2)).Address & vbNullChar
    sr1tbl.RgeCateName = tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, ItemNum)).Address & vbNullChar
    sr1tbl.RgeSmpName = tmpSht.Range(rge(2, 1), rge(smpNum, 1)).Address & vbNullChar
    
    tmpSht.Range(rge(2, 1), rge(smpNum, 1)).Copy SbkThis.Sheets("Sr1Data").Range("A2")
    For i = 1 To smpNum
        rge(i + 1, 1) = i
    Next i
    
    'Category Name Copy (Category Name for numeric item may be adjusted, if it is categorized)
    Set bgnCelCateNm = SbkThis.Sheets("Sr1Info").Range("B50")
    tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, ItemNum)).Copy bgnCelCateNm
    
    Call makeCateName_forNumItem(ItemNum, RgeClass, RgeVarKind, bgnCelCateNm)  '11.8.21 LSQ
    
    'Item Type
    For i = 1 To ItemNum
        rge(i + 1, ItemNum + 4) = varkind(1, sr1VarSel(i) + 1)
    Next i
    
    sr1tbl.RgeVarKind = rge(2, ItemNum + 4).Resize(ItemNum, 1).Address & vbNullChar
    
    'numeric item categorized (|fffd|K|fffd||fffd||fffd|l)
    If Not RgeClass Is Nothing Then
        For i = 1 To ItemNum
            RgeClass.Columns(sr1VarSel(i) + 1).Copy rge(classRow, i)
            rge(classRow, i) = CLng(RgeClass.Columns(sr1VarSel(i) + 1).Cells(1, 1))
        Next i
        sr1tbl.RgeClass = rge(classRow, 1).Resize(RgeClass.Rows.Count, ItemNum).Address & vbNullChar
    End If
    
    Set handleSr1Data = tmpSht
    On Error GoTo 0
End Function

Private Function checkSr1Data() As Boolean
    Dim RgeObj As Range, RgeVar As Range
    
    On Error Resume Next
    Set RgeObj = Range(sr1tbl.RgeObj)
    Set RgeVar = Range(sr1tbl.RgeVar)
    If RgeObj.Rows.Count > RgeVar.Rows.Count Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        checkSr1Data = False
        Exit Function
    End If
    checkSr1Data = True
End Function

Private Sub SaveBasicInfo(ByVal revisedCateNum As Variant, ByVal NewCates As Variant)
    Dim i As Long, j As Long
    Dim rge As Range, RgeObj As Range, RgeVar As Range, rgeKind As Range
    Set rge = SbkThis.Worksheets("Sr1Info").Range("A1")
    Set RgeObj = Range(toXlA1str(sr1tbl.RgeObj))
    Set RgeVar = Range(toXlA1str(sr1tbl.RgeVar))
    Set rgeKind = Range(toXlA1str(sr1tbl.RgeVarKind))
    rge.Offset(0, 1) = RgeObj(1, 1)
    rge.Offset(0, 2) = 1
    For i = 1 To RgeVar.Columns.Count
        rge.Offset(7, i) = RgeVar(1, i)
        rge.Offset(8, i + 40) = rgeKind(i, 1)
        rge.Offset(9, i + 40) = NewCates(i)
    Next i
    Set rge = SbkThis.Worksheets("Sr1Data").Range("A1")
    For i = 1 To RgeVar.Columns.Count
        rge.Offset(i, RgeVar.Columns.Count + 4) = revisedCateNum(i)
    Next i
End Sub

Sub IS_BASICINFO_VBA()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim tmpSht As Worksheet, outSht As Worksheet, outShtMid As Worksheet
    Dim RgeVar As Range, rge As Range
    Dim valvar As Variant
    Dim strvar As String
    Dim bExcept_n0 As Boolean
    Dim edtObj As EditBox
    Dim bOutMid As Boolean, strBkName As String, bkName As String
    Dim actSht As Worksheet
    Dim nId As Long
    
    'for Debug use (11.8.19 LSQ add)
#If 0 Then
    Call SbkInit
#End If

    On Error Resume Next
    
    Set actSht = ActiveSheet

    ReDim VbaGrp(0)
    
    m_varselect = getDefaultVarSelect(2)
    If bRangeChanged_Frm(2, frmBasicInfo.RgeVar.Text) Then m_varselect = "0"
redisp:
    m_bvarselected = False
    
    frmBasicInfo.bvarselected = m_bvarselected
    frmBasicInfo.varselect = m_varselect
    frmBasicInfo.Show
    If Not frmBasicInfo.bOK Then Exit Sub
    
    m_bvarselected = frmBasicInfo.bvarselected
    m_varselect = frmBasicInfo.varselect
    
    Call setDefaultAddress(2, getCurrentAddress_Frm(frmBasicInfo.RgeVar.Text))
    Call setDefaultVarSelect(2, m_varselect)
    
    sr1tbl.RgeObj = Trim(frmBasicInfo.RgeObj.Text) & vbNullChar
    sr1tbl.RgeVar = Trim(frmBasicInfo.RgeVar.Text) & vbNullChar
    sr1tbl.RgeVarKind = Trim(frmBasicInfo.RgeVarKind.Text) & vbNullChar
    sr1tbl.bExcept = IIf(frmBasicInfo.optExcept.Value = True, 1, 0)
    sr1tbl.nVarSelMethod = 1
    sr1tbl.bSmpName = 0
    sr1tbl.bYsk = 0
    'If sr1tbl.bYsk = 1 Then
    '    sr1tbl.RgeYskData = Trim(frmBasicInfo.RgeYskData) & vbNullChar
    '    sr1tbl.RgeYskName = Trim(frmBasicInfo.RgeYskName) & vbNullChar
    'End If
    sr1tbl.bExtraInfo = 0 'IIf(frmBasicInfo.optExtraInfoYes.Value = True, 1, 0)
    sr1tbl.bNum2Class = IIf(frmBasicInfo.chkNum2Cate.Value = True, 1, 0)
    If sr1tbl.bNum2Class = 1 Then
        sr1tbl.RgeClass = Trim(frmBasicInfo.RgeNumCate.Text) & vbNullChar
    End If
    'If sr1tbl.bSmpName = 1 Then
    '    sr1tbl.RgeSmpName = Trim(frmBasicInfo.RgeSmpName.Text) & vbNullChar
    'End If
    sr1tbl.bCateName = IIf(frmBasicInfo.chkCateName.Value = True, 1, 0)
    If sr1tbl.bCateName = 1 Then
        sr1tbl.RgeCateName = Trim(frmBasicInfo.RgeCateName.Text) & vbNullChar
    End If
    sr1tbl.bPointGrp = 0 'IIf(frmBasicInfo.chkOutGrp.Value = True, 1, 0)
    sr1tbl.bExcept_n0 = IIf(frmBasicInfo.optExcept_n0.Value = True, 1, 0)
    
#If 0 Then '11.12.2 LSQ mdf
    sr1Extra.bTimeLag = IIf(frmBasicInfo.chkTimeLag.Value = True, 1, 0)
    If sr1Extra.bTimeLag = 1 Then
        sr1Extra.RgeTimeLag = Trim(frmBasicInfo.RgeTimeLag.Text) & vbNullChar
    End If
#Else
    sr1Extra.bTimeLag = 0
    sr1Extra.RgeTimeLag = vbNullChar
#End If

    Set tmpSht = handleSr1Data
    
    If tmpSht Is Nothing Then
        GoTo redisp
    End If
    
    #If 0 Then
    'output sheet
    strBkName = "[" & ActiveWorkbook.Name & "]"
    '
    
    Set outSht = ActiveWorkbook.Worksheets.Add
    sr1tbl.OutSheet = strBkName & outSht.Name & "!R50C1"
    #End If
    
    'data sheet
    tmpSht.Activate
    
    Dim revisedCateNum() As Long, NewCates() As String
    Set RgeVar = Range(toXlA1str(sr1tbl.RgeVar))
    ReDim revisedCateNum(1 To RgeVar.Columns.Count + 1)
    ReDim NewCates(1 To RgeVar.Columns.Count + 1)
    Call Remove0Cate(sr1tbl.RgeVarKind, sr1tbl.RgeVar, sr1tbl.RgeCateName, sr1tbl.bExcept_n0 = 0, revisedCateNum, NewCates)
    
    If Not checkSr1Data Then
        GoTo redisp
    End If
    
    SaveBasicInfo revisedCateNum, NewCates
    
    bkName = "[" & SbkThis.Name & "]"
    sr1tbl.RgeInfo = bkName & "Sr1Info!R1C1" & vbNullChar
    sr1tbl.OutSheet = bkName & "Sr1Result!R1C1" & vbNullChar
    sr1tbl.RgeObj = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeObj) & vbNullChar
    sr1tbl.RgeVar = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeVar) & vbNullChar
    sr1tbl.RgeSmpName = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeSmpName) & vbNullChar
    sr1tbl.RgeCateName = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeCateName) & vbNullChar
    sr1tbl.RgeVarKind = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeVarKind) & vbNullChar
    sr1tbl.RgeClass = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeClass) & vbNullChar
    sr1tbl.OutSheet = Trim(sr1tbl.OutSheet) & vbNullChar
    
    SbkThis.Sheets("Sr1Result").Cells.Clear    'save calc results from DLL
    
    nId = IIf(isTrialVer, 0, 1)
    
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = sr1_dlg(nId, sr1tbl)  'do calc
    actSht.Activate
    
    If rtn = -100 Then
        MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
        Exit Sub
    End If
    
    If rtn = 0 Then 'do output
        Sr1_Output 1, actSht.Parent.Sheets.Add, sr1tbl.bPointGrp, True, True
    End If
    On Error GoTo 0
End Sub

Public Sub Sr1DrawDotPlot(ByVal strRgeClass As String, ByVal strRgeData As String, _
                                    ByVal strRgeOut As String, ByVal crossAt As Double)
    Application.Run GxlaBkGraph1 & "!DrawDotPlot_A", toXlA1str(strRgeClass), toXlA1str(strRgeData), _
                                            toXlA1str(strRgeOut), crossAt
End Sub
                          
'=== EOF ===



Attribute VB_Name = "MdlDebug"
'=======================================================
' Module for Debug
'
' 2011.8.19 LSQ
'=======================================================

Option Private Module
Option Explicit

Dim SbkTemplate As Workbook

Sub SbkInit()
    Set SbkTemplate = Workbooks.Add
    
    ThisWorkbook.Worksheets.Copy After:=SbkTemplate.Worksheets(1)
    
    Windows(SbkTemplate.Name).Visible = False
End Sub

Function SbkThis() As Workbook
    If SbkTemplate Is Nothing Then
        Set SbkThis = ThisWorkbook
    Else
        Set SbkThis = SbkTemplate
    End If
End Function

'=== EOF ===
Attribute VB_Name = "MdlExtSr1"
'=======================================================
' SR1 for iSTAT_YSK Ver1.0
'
' 2011.11 WZH
'=======================================================

Option Private Module
Option Explicit

Type Srk1Para
    RgeInfo As String * 256
    OutSheet As String * 256
    RgeObj As String * 256
    RgeVar As String * 256
    RgeVarKind As String * 256
    RgeClass As String * 256
    RgeSmpName As String * 256
    RgeCateName As String * 256
    RgeYskData As String * 256          'only used for proceeding data
    RgeYskName As String * 256          'only used for proceeding data
    bExcept As Long
    bExcept_n0 As Long
    bYsk As Long                        'only used for proceeding data
    bExtraInfo As Long
    nVarSelMethod As Long
    bSmpName As Long
    bNum2Class As Long
    bCateName As Long
    bPointGrp As Long
End Type

Type Srk1Para_Extra
    bTimeLag As Long
    RgeTimeLag As String * 256          'only used for procedding data
    nTimeStyle As Long
    nYear As Long
    nMonth As Long
End Type

Private Const X_MAX As Integer = 30
Private Const CATE_MAX As Integer = 200

Private VbaGrp() As VBAGRAPH
Private m_varselect As String
Private m_bvarselected As Boolean
Private sr1tbl As Srk1Para
Private sr1Extra As Srk1Para_Extra

#If Win64 Then
    #If VBA7 Then
        Private Declare PtrSafe Function sr1_dlg Lib "MIST_A_64.dll" (ByVal nId As Long, sr1tbl As Srk1Para) As Integer
    #Else
        Private Declare Function sr1_dlg Lib "MIST_A_64.dll" (ByVal nId As Long, sr1tbl As Srk1Para) As Integer
    #End If
#Else
    #If VBA7 Then
        Private Declare PtrSafe Function sr1_dlg Lib "MIST_A.dll" (ByVal nId As Long, sr1tbl As Srk1Para) As Integer
    #Else
        Private Declare Function sr1_dlg Lib "MIST_A.dll" (ByVal nId As Long, sr1tbl As Srk1Para) As Integer
    #End If
#End If

Private Function CountUniqueValues(InputRange As Range) As Long
    Dim cl As Range, UniqueValues As New Collection
    Dim rowNum As Long, colNum As Long
    Dim i As Long, j As Long
    Dim vdata As Variant
    On Error Resume Next
    rowNum = InputRange.Rows.Count
    colNum = InputRange.Columns.Count
    vdata = InputRange.Value
    For i = 1 To rowNum
        For j = 1 To colNum
            UniqueValues.Add vdata(i, j), CStr(vdata(i, j))
        Next j
    Next i
    On Error GoTo 0
    CountUniqueValues = UniqueValues.Count
End Function

'RgeX : |fffd|K|fffd||fffd||fffd|l|fffd|w|fffd||fffd||348||fffd| (formatted)
'RgeCateNum : Item category number (0=numeric item)
'outBgn : category name output begin cell
'
'11.8.21 LSQ
Private Sub nu_makeCateName_forNumItem(ByVal ItemNum As Integer, ByVal RgeX As Range, ByVal RgeCateNum As Range, ByVal outBgn As Range)
    Dim i As Integer, j As Integer, cateN As Integer
    Dim x1 As Double, x2 As Double, dxHalf As Double
    
    If RgeX Is Nothing Or ItemNum < 1 Then Exit Sub    'no number item categorized
    
    For i = 1 To ItemNum
        cateN = RgeCateNum(1, i)
        If cateN = 0 Then
            cateN = RgeX(1, i)
            If cateN < 1 Then GoTo nextItem 'in fact = ERROR
            
            x1 = RgeX(2, i)
            x2 = RgeX(3, i)
            dxHalf = (x2 - x1) / 2
            
            outBgn(1, i) = "|fffd|`" & (x1 + dxHalf)
            For j = 2 To cateN - 1
                outBgn(j, i) = (x1 + dxHalf) & "|fffd|`" & (x2 + dxHalf)
                'next
                x1 = x1 + 2 * dxHalf
                x2 = x2 + 2 * dxHalf
            Next j
            outBgn(cateN, i) = (x2 - dxHalf) & "|fffd|`"
        End If
nextItem:
    Next i
        
End Sub

'2011.12.04 rewritten
Private Sub makeCateName_forNumItem(ByVal ItemNum As Integer, ByVal RgeX As Range, ByVal RgeCateNum As Range, ByVal outBgn As Range)
    Dim i As Integer, j As Integer, k As Integer, cateN As Integer
    Dim x1 As Double, x2 As Double, dxHalf As Double
    Dim sr1VarSel As Variant
    Dim nItemNum As Long
    
    If RgeX Is Nothing Or ItemNum < 1 Then Exit Sub    'no number item categorized
    
    If m_varselect <> "0" Then
        sr1VarSel = Split(m_varselect, ",")
    Else
        ReDim sr1VarSel(0 To ItemNum) As Long
        sr1VarSel(0) = ItemNum
        For i = 1 To ItemNum
            sr1VarSel(i) = i - 1
        Next i
    End If
    
    nItemNum = sr1VarSel(0)
    
    For i = 1 To nItemNum
        j = sr1VarSel(i) + 1
        cateN = RgeCateNum(1, j)
        If cateN = 0 Then
            cateN = RgeX(1, j)
            If cateN < 1 Then GoTo nextItem 'in fact = ERROR
            
            x1 = RgeX(2, j)
            x2 = RgeX(3, j)
            
            outBgn(1, i) = "|fffd|`" & x1
            For k = 2 To cateN
                outBgn(k, i) = x1 & "|fffd|`" & x2
                'next
                x1 = RgeX(k + 1, j)
                x2 = RgeX(k + 2, j)
            Next k
        End If
nextItem:
    Next i
        
End Sub
'end rewritten

Private Function next_Year_Month(ByVal nTimeStyle As Long, ByRef year As Long, ByRef month As Long) As Boolean
    next_Year_Month = False
    If nTimeStyle = 1 Then
        month = month + 1
    ElseIf nTimeStyle = 2 Then
        month = month + 3
    ElseIf nTimeStyle = 3 Then
        month = month + 12
    ElseIf nTimeStyle = 4 Then
        month = month + 1
    End If
    If month > 12 And nTimeStyle < 4 Or nTimeStyle = 3 Then
        month = month - 12
        year = year + 1
        next_Year_Month = True
    End If
End Function

Private Function handleSr1Data() As Worksheet
    Dim i As Long, j As Long, k As Long
    Dim RgeObj As Range, RgeVar As Range, rge As Range
    Dim RgeClass As Range, RgeVarKind As Range
    Dim RgeSmpName As Range, RgeCateName As Range
    Dim RgeYskData As Range, RgeYskName As Range
    Dim RgeTimeLag As Range
    Dim tmpSht As Worksheet
    Dim sr1obj As Variant, sr1var As Variant, sr1cate As Variant, sr1varkind As Variant, varkind() As Long
    Dim sr1VarSel As Variant
    Dim varTimeLag As Variant
    Dim cateNameRow As Long, varKindRow As Long, classRow As Long
    Dim CateNum As Long, smpNum As Long, ItemNum As Long, objSmpNum As Long
    Dim tmpv As Long, totalCateNum As Long
    Dim msgStr As String
    Dim bgnCelCateNm As Range
    Dim nYear As Long, nMonth As Long
    Dim strTime As String
    
    On Error Resume Next
    Set RgeObj = Range(sr1tbl.RgeObj)
    Set RgeVar = Range(sr1tbl.RgeVar)
    Set RgeVarKind = Range(sr1tbl.RgeVarKind)
    
    '2012.10.22 added
    ItemNum = RgeVar.Columns.Count
    smpNum = RgeObj.Rows.Count
    
    If RgeVarKind Is Nothing Then
        Set tmpSht = SbkThis.Sheets("Temp")
        tmpSht.Cells.ClearContents
        Set rge = tmpSht.Range("B1")
        For i = 1 To ItemNum
            rge(1, i) = 0
        Next i
        Set RgeVarKind = rge.Resize(1, ItemNum)
    End If
    'end add
    
    If sr1tbl.bNum2Class = 1 Then
        Set RgeClass = Range(sr1tbl.RgeClass)
    End If
    If sr1tbl.bCateName = 1 Then
        Set RgeCateName = Range(sr1tbl.RgeCateName)
    End If
    If sr1tbl.bYsk = 1 Then
        Set RgeYskData = Range(sr1tbl.RgeYskData)
    End If
    If sr1Extra.bTimeLag = 1 Then
        Set RgeTimeLag = Range(sr1Extra.RgeTimeLag)
    End If
    cateNameRow = RgeObj.Rows.Count
    If cateNameRow < RgeVar.Rows.Count Then
        cateNameRow = RgeVar.Rows.Count
    End If
    If cateNameRow < RgeSmpName.Rows.Count Then
        cateNameRow = RgeSmpName.Rows.Count
    End If
    cateNameRow = cateNameRow + 6
    sr1obj = RgeObj.Value
    sr1var = RgeVar.Value
    sr1varkind = RgeVarKind.Value
    CateNum = Application.WorksheetFunction.max(sr1varkind)
    If CateNum = 0 Then CateNum = 1
    classRow = cateNameRow + CateNum + 2
    
    ItemNum = RgeVar.Columns.Count
    smpNum = RgeObj.Rows.Count
    
    ReDim varkind(1 To 1, 1 To ItemNum)
    If ItemNum = 1 Then
        varkind(1, 1) = sr1varkind
    Else
        For i = 1 To ItemNum
            varkind(1, i) = sr1varkind(1, i)
        Next i
    End If
    
    If smpNum <> RgeVar.Rows.Count Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleSr1Data = Nothing
        Exit Function
    End If
    If ItemNum > X_MAX Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleSr1Data = Nothing
        Exit Function
    End If
    If sr1Extra.bTimeLag = 1 Then
        If RgeTimeLag Is Nothing Then
            MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        If RgeTimeLag.Columns.Count <> ItemNum Then
            MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        varTimeLag = RgeTimeLag.Value
        For i = 1 To ItemNum
            If varkind(1, i) = 0 Then
                j = Val(varTimeLag(1, i))
                If Abs(j) >= smpNum Then
                    MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Set handleSr1Data = Nothing
                    Exit Function
                Else
                    varTimeLag(1, i) = j
                End If
            Else
                If Not IsEmpty(RgeTimeLag(1, i)) Then
                    MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Set handleSr1Data = Nothing
                    Exit Function
                Else
                    varTimeLag(1, i) = 0
                End If
            End If
        Next i
    End If
    
    If sr1Extra.nTimeStyle <> 4 Then
        If sr1Extra.nYear < 1900 Or sr1Extra.nYear > 3000 Then
            MsgBox "Invalid year!"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        If sr1Extra.nTimeStyle <> 3 Then
            If sr1Extra.nMonth < 1 Or sr1Extra.nMonth > 12 Then
                MsgBox "Invalid month!"
                Set handleSr1Data = Nothing
                Exit Function
            End If
        End If
    End If
    
    Set rge = RgeVar(2, 1).Resize(smpNum - 1, ItemNum)
    For i = 1 To ItemNum
        If varkind(1, i) > 0 Then
            If Application.WorksheetFunction.max(rge.Columns(i)) <> varkind(1, i) Then
                MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                Set handleSr1Data = Nothing
                Exit Function
            End If
            If sr1tbl.bExcept_n0 = 0 Then
                If CountUniqueValues(rge.Columns(i)) <> varkind(1, i) Then
                    MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||fffd|0|fffd||fffd||fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
                    Set handleSr1Data = Nothing
                    Exit Function
                End If
            End If
        End If
    Next i
    
    msgStr = ""
    If RgeObj Is Nothing Then
        msgStr = "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf RgeVar Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf RgeVarKind Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr1tbl.bNum2Class = 1 And RgeClass Is Nothing) Then
        msgStr = "|fffd||293|I|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr1tbl.bCateName = 1 And RgeCateName Is Nothing) Then
        msgStr = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr1tbl.bSmpName = 2 And RgeSmpName Is Nothing) Then
        msgStr = "|fffd||5368e||496||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    'ElseIf CateNum < 2 Then
    '    msgStr = "|fffd||fffd||fffd||343|f|fffd|[|fffd|^|fffd||355|s|fffd||fffd|"
    ElseIf RgeVar.Columns.Count <> RgeVarKind.Columns.Count Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf Not RgeCateName Is Nothing Then
        If (CateNum <> RgeCateName.Rows.Count Or RgeVar.Columns.Count <> RgeCateName.Columns.Count) Then
            msgStr = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        End If
    ElseIf sr1tbl.bYsk = 1 And RgeYskData Is Nothing Then
        msgStr = "|fffd||53683|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If

    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set handleSr1Data = Nothing
        Exit Function
    End If
    
    If m_varselect <> "0" Then
        sr1VarSel = Split(m_varselect, ",")
    Else
        ReDim sr1VarSel(0 To RgeVar.Columns.Count) As Long
        sr1VarSel(0) = RgeVar.Columns.Count
        For i = 1 To RgeVar.Columns.Count
            sr1VarSel(i) = i - 1
        Next i
    End If
    
    ItemNum = sr1VarSel(0)
    
    totalCateNum = 0
    If sr1tbl.bNum2Class = 1 Then
        If RgeClass.Rows.Count > 31 Then
            MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: 1|fffd||fffd||fffd||fffd||fffd||3d0||fffd|MAX30"
            Set handleSr1Data = Nothing
            Exit Function
        Else
            For i = 1 To ItemNum
                tmpv = RgeClass(1, sr1VarSel(i) + 1)
                totalCateNum = totalCateNum + tmpv
                If tmpv > 30 Then
                    MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: 1|fffd||fffd||fffd||fffd||fffd||3d0||fffd|MAX30"
                    Set handleSr1Data = Nothing
                    Exit Function
                End If
                'If varkind(1, sr1VarSel(i) + 1) = 0 And tmpv < 1 Then
                '    MsgBox "|fffd||fffd||fffd||28d||fffd||fffd||682||315||fffd||fffd||789||fffd||fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                '    Set handleSr1Data = Nothing
                '    Exit Function
                'End If
                If tmpv > CateNum Then CateNum = tmpv
            Next i
        End If
    End If
    
    For i = 1 To ItemNum
        tmpv = varkind(1, sr1VarSel(i) + 1)
        If tmpv < 0 Then
            MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        totalCateNum = totalCateNum + tmpv
    Next i
    
    If totalCateNum > CATE_MAX Then
        MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: |fffd||fffd||fffd|vMAX" & CATE_MAX
        Set handleSr1Data = Nothing
        Exit Function
    End If
    
    If sr1tbl.bExcept = 0 Then
        Set rge = RgeVar.Offset(1, 0).Resize(smpNum, ItemNum)
        For i = 1 To ItemNum
            k = sr1VarSel(i) + 1
            sr1var = rge.Columns(k).Value
            If WorksheetFunction.Count(sr1var) <> smpNum - 1 Then
                Set handleSr1Data = Nothing
                Exit Function
            End If
        Next i
    End If
    
    If sr1tbl.bYsk = 1 Then '12.8.27 LSQ mdf
        Dim tmpi As Long
        tmpi = RgeYskData.Rows.Count
        
        cateNameRow = cateNameRow + tmpi
        smpNum = smpNum + tmpi
        classRow = classRow + tmpi
    End If
    
    Set tmpSht = SbkThis.Sheets("Sr1Data") 'RgeVar.Worksheet.Parent.Sheets.Add
    tmpSht.Cells.ClearContents
    Set rge = tmpSht.Range("$B$1")
    nYear = sr1Extra.nYear
    nMonth = sr1Extra.nMonth
    
    For i = 1 To smpNum 'cateNameRow - 6 - 1
        If sr1Extra.nTimeStyle = 4 Then
            rge(i + 1, 1) = i
        ElseIf sr1Extra.nTimeStyle = 3 Then
            rge(i + 1, 1) = nYear + i - 1
        Else
            If i = 1 Then
                rge(i + 1, 1) = nYear & " " & nMonth
            Else
                If next_Year_Month(sr1Extra.nTimeStyle, nYear, nMonth) Then
                    rge(i + 1, 1) = nYear & " " & nMonth
                Else
                    rge(i + 1, 1) = nMonth
                End If
            End If
        End If
    Next i
    
    For i = 1 To RgeVar.Rows.Count
        For j = 1 To ItemNum
            k = sr1VarSel(j) + 1
            If i > 1 And sr1Extra.bTimeLag = 1 Then
                If varTimeLag(1, k) >= 0 Then
                    If i - 1 <= varTimeLag(1, k) Then
                        rge(i, j + 2) = ""
                    Else
                        rge(i, j + 2) = RgeVar(i - varTimeLag(1, k), k)
                    End If
                Else
                    If i - 1 > smpNum + varTimeLag(1, k) Then
                        rge(i, j + 2) = ""
                    Else
                        rge(i, j + 2) = RgeVar(i - varTimeLag(1, k), k)
                    End If
                End If
            Else
                rge(i, j + 2) = RgeVar(i, k)
            End If
        Next j
    Next i
    tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)) = sr1obj
    
    If sr1tbl.bYsk = 1 Then
        For i = 1 To RgeYskData.Rows.Count
            For j = 1 To ItemNum
                rge(RgeObj.Rows.Count + i, j + 2) = RgeYskData(i, sr1VarSel(j) + 1)
            Next j
        Next i
    End If
    
    sr1tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)).Address & vbNullChar
    sr1tbl.RgeVar = tmpSht.Range(rge(1, 3), rge(smpNum, ItemNum + 2)).Address & vbNullChar
        
    If Not RgeCateName Is Nothing Then
        CateNum = RgeCateName.Rows.Count
        sr1cate = RgeCateName.Value
        For i = 1 To ItemNum
            For j = 1 To CateNum
                If Trim(sr1cate(j, sr1VarSel(i) + 1)) = "" Then
                    rge(cateNameRow + j - 1, i) = "C-" & j
                Else
                    rge(cateNameRow + j - 1, i) = sr1cate(j, sr1VarSel(i) + 1)
                End If
            Next j
        Next i
    Else
        For i = 1 To ItemNum
            For j = 1 To CateNum
                rge(cateNameRow + j - 1, i) = "C-" & j
            Next j
        Next i
    End If
    sr1tbl.bCateName = 1
    sr1tbl.RgeCateName = tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, ItemNum)).Address & vbNullChar
    sr1tbl.RgeSmpName = tmpSht.Range(rge(2, 1), rge(RgeSmpName.Rows.Count + 1, 1)).Address & vbNullChar
    
    Set rge = tmpSht.Range(sr1tbl.RgeVar)
    smpNum = rge.Rows.Count
    objSmpNum = RgeObj.Rows.Count
    For i = rge.Rows.Count To 2 Step -1
        sr1var = rge.Rows(i).Value
        If Application.WorksheetFunction.Count(sr1var) <> rge.Columns.Count Or (i <= objSmpNum And Application.WorksheetFunction.Count(RgeObj(i, 1)) <> 1) Then
            If sr1tbl.bExcept = 1 Then
                tmpSht.Rows(i).Delete
                smpNum = smpNum - 1
                cateNameRow = cateNameRow - 1
                objSmpNum = objSmpNum - 1
            Else
                Set handleSr1Data = Nothing
                Exit Function
            End If
        End If
    Next i
    
    Set rge = tmpSht.Range("$B$1")
    
    'sr1tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)).Address & vbNullChar
    sr1tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(objSmpNum, 2)).Address & vbNullChar
    sr1tbl.RgeVar = tmpSht.Range(rge(1, 3), rge(smpNum, ItemNum + 2)).Address & vbNullChar
    sr1tbl.RgeCateName = tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, ItemNum)).Address & vbNullChar
    sr1tbl.RgeSmpName = tmpSht.Range(rge(2, 1), rge(smpNum, 1)).Address & vbNullChar
    
    tmpSht.Range(rge(2, 1), rge(smpNum, 1)).Copy SbkThis.Sheets("Sr1Data").Range("A2")
    For i = 1 To smpNum
        rge(i + 1, 1) = i
    Next i
    
    'Category Name Copy (Category Name for numeric item may be adjusted, if it is categorized)
    Set bgnCelCateNm = SbkThis.Sheets("Sr1Info").Range("B50")
    tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, ItemNum)).Copy bgnCelCateNm
    
    Call makeCateName_forNumItem(ItemNum, RgeClass, RgeVarKind, bgnCelCateNm)  '11.8.21 LSQ
    
    'Item Type
    For i = 1 To ItemNum
        rge(i + 1, ItemNum + 4) = varkind(1, sr1VarSel(i) + 1)
    Next i
    
    sr1tbl.RgeVarKind = rge(2, ItemNum + 4).Resize(ItemNum, 1).Address & vbNullChar
    
    'numeric item categorized (|fffd|K|fffd||fffd||fffd|l)
    If Not RgeClass Is Nothing Then
        For i = 1 To ItemNum
            RgeClass.Columns(sr1VarSel(i) + 1).Copy rge(classRow, i)
            rge(classRow, i) = CLng(RgeClass.Columns(sr1VarSel(i) + 1).Cells(1, 1))
        Next i
        sr1tbl.RgeClass = rge(classRow, 1).Resize(RgeClass.Rows.Count, ItemNum).Address & vbNullChar
    End If
    
    Set handleSr1Data = tmpSht
    On Error GoTo 0
End Function

Private Function checkSr1Data() As Boolean
    Dim RgeObj As Range, RgeVar As Range
    
    On Error Resume Next
    Set RgeObj = Range(sr1tbl.RgeObj)
    Set RgeVar = Range(sr1tbl.RgeVar)
    If RgeObj.Rows.Count > RgeVar.Rows.Count Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        checkSr1Data = False
        Exit Function
    End If
    checkSr1Data = True
End Function

Private Sub SaveBasicInfo(ByVal revisedCateNum As Variant, ByVal NewCates As Variant)
    Dim i As Long, j As Long
    Dim rge As Range, RgeObj As Range, RgeVar As Range, rgeKind As Range
    Set rge = SbkThis.Worksheets("Sr1Info").Range("A1")
    Set RgeObj = Range(toXlA1str(sr1tbl.RgeObj))
    Set RgeVar = Range(toXlA1str(sr1tbl.RgeVar))
    Set rgeKind = Range(toXlA1str(sr1tbl.RgeVarKind))
    rge.Offset(0, 1) = RgeObj(1, 1)
    rge.Offset(0, 2) = 1
    For i = 1 To RgeVar.Columns.Count
        rge.Offset(7, i) = RgeVar(1, i)
        rge.Offset(8, i + 40) = rgeKind(i, 1)
        rge.Offset(9, i + 40) = NewCates(i)
    Next i
    Set rge = SbkThis.Worksheets("Sr1Data").Range("A1")
    For i = 1 To RgeVar.Columns.Count
        rge.Offset(i, RgeVar.Columns.Count + 4) = revisedCateNum(i)
    Next i
End Sub

Sub IS_YSKSR1_VBA()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim tmpSht As Worksheet, outSht As Worksheet, outShtMid As Worksheet
    Dim RgeVar As Range, rge As Range
    Dim valvar As Variant
    Dim strvar As String
    Dim bExcept_n0 As Boolean
    Dim edtObj As EditBox
    Dim bOutMid As Boolean, strBkName As String, bkName As String
    Dim actSht As Worksheet
    Dim nId As Long
    
    'for Debug use (11.8.19 LSQ add)
#If 0 Then
    Call SbkInit
#End If

    On Error Resume Next
    
    Set actSht = ActiveSheet

    ReDim VbaGrp(0)
    
    m_varselect = getDefaultVarSelect(5)
    If bRangeChanged_Frm(5, frmExtSr1.RgeVar.Text) Then m_varselect = "0"
redisp:
    m_bvarselected = False
    
    frmExtSr1.bvarselected = m_bvarselected
    frmExtSr1.varselect = m_varselect
    frmExtSr1.Show
    If Not frmExtSr1.bOK Then Exit Sub
    
    m_bvarselected = frmExtSr1.bvarselected
    m_varselect = frmExtSr1.varselect
    
    Call setDefaultAddress(5, getCurrentAddress_Frm(frmExtSr1.RgeVar.Text))
    Call setDefaultVarSelect(5, m_varselect)
    
    sr1tbl.RgeObj = Trim(frmExtSr1.RgeObj.Text) & vbNullChar
    sr1tbl.RgeVar = Trim(frmExtSr1.RgeVar.Text) & vbNullChar
    sr1tbl.RgeVarKind = Trim(frmExtSr1.RgeVarKind.Text) & vbNullChar
    sr1tbl.bExcept = IIf(frmExtSr1.optExcept.Value = True, 1, 0)
    sr1tbl.nVarSelMethod = IIf(frmExtSr1.optVarNone.Value = True, 1, 2)
    sr1tbl.bSmpName = 0
    sr1tbl.bYsk = IIf(frmExtSr1.chkYsk.Value = True, 1, 0)
    If sr1tbl.bYsk = 1 Then
        sr1tbl.RgeYskData = Trim(frmExtSr1.RgeYskData) & vbNullChar
    End If
    sr1tbl.bExtraInfo = IIf(frmExtSr1.optExtraInfoYes.Value = True, 1, 0)
    sr1tbl.bNum2Class = IIf(frmExtSr1.chkNum2Cate.Value = True, 1, 0)
    If sr1tbl.bNum2Class = 1 Then
        sr1tbl.RgeClass = Trim(frmExtSr1.RgeNumCate.Text) & vbNullChar
    End If
    'If sr1tbl.bSmpName = 1 Then
    '    sr1tbl.RgeSmpName = Trim(frmBasicInfo.RgeSmpName.Text) & vbNullChar
    'End If
    sr1tbl.bCateName = IIf(frmExtSr1.chkCateName.Value = True, 1, 0)
    If sr1tbl.bCateName = 1 Then
        sr1tbl.RgeCateName = Trim(frmExtSr1.RgeCateName.Text) & vbNullChar
    End If
    sr1tbl.bPointGrp = 1 'IIf(frmBasicInfo.chkOutGrp.Value = True, 1, 0)
    sr1tbl.bExcept_n0 = IIf(frmExtSr1.optExcept_n0.Value = True, 1, 0)
    sr1Extra.bTimeLag = IIf(frmExtSr1.chkTimeLag.Value = True, 1, 0)
    If sr1Extra.bTimeLag = 1 Then
        sr1Extra.RgeTimeLag = Trim(frmExtSr1.RgeTimeLag.Text) & vbNullChar
    End If
    sr1Extra.nTimeStyle = IIf(frmExtSr1.optMonth.Value = True, 1, _
                        IIf(frmExtSr1.optQuarter.Value = True, 2, _
                        IIf(frmExtSr1.optYear.Value = True, 3, 4)))
    sr1Extra.nYear = Val(frmExtSr1.txtYear.Text)
    sr1Extra.nMonth = Val(frmExtSr1.txtMonth.Text)
    
    Set tmpSht = handleSr1Data
    
    If tmpSht Is Nothing Then
        GoTo redisp
    End If
    
    #If 0 Then
    'output sheet
    strBkName = "[" & ActiveWorkbook.Name & "]"
    '
    
    Set outSht = ActiveWorkbook.Worksheets.Add
    sr1tbl.OutSheet = strBkName & outSht.Name & "!R50C1"
    #End If
    
    'data sheet
    tmpSht.Activate
    
    Dim revisedCateNum() As Long, NewCates() As String
    Set RgeVar = Range(toXlA1str(sr1tbl.RgeVar))
    ReDim revisedCateNum(1 To RgeVar.Columns.Count + 1)
    ReDim NewCates(1 To RgeVar.Columns.Count + 1)
    Call Remove0Cate(sr1tbl.RgeVarKind, sr1tbl.RgeVar, sr1tbl.RgeCateName, sr1tbl.bExcept_n0 = 0, revisedCateNum, NewCates)
    
    If Not checkSr1Data Then
        GoTo redisp
    End If
    
    SaveBasicInfo revisedCateNum, NewCates
    
    bkName = "[" & SbkThis.Name & "]"
    sr1tbl.RgeInfo = bkName & "Sr1Info!R1C1" & vbNullChar
    sr1tbl.OutSheet = bkName & "Sr1Result!R1C1" & vbNullChar
    sr1tbl.RgeObj = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeObj) & vbNullChar
    sr1tbl.RgeVar = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeVar) & vbNullChar
    sr1tbl.RgeSmpName = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeSmpName) & vbNullChar
    sr1tbl.RgeCateName = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeCateName) & vbNullChar
    sr1tbl.RgeVarKind = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeVarKind) & vbNullChar
    sr1tbl.RgeClass = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeClass) & vbNullChar
    sr1tbl.OutSheet = Trim(sr1tbl.OutSheet) & vbNullChar
    
    SbkThis.Sheets("Sr1Result").Cells.Clear    'save calc results from DLL
    
    nId = IIf(isTrialVer, 0, 1)
    
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    rtn = sr1_dlg(nId, sr1tbl)  'do calc
    actSht.Activate
    
    If rtn = -100 Then
        MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
        Exit Sub
    End If
    
    If rtn = 0 Then 'do output
        Sr1_Output 2, actSht.Parent.Sheets.Add, sr1tbl.bPointGrp, True, True
    End If
    On Error GoTo 0
End Sub

Public Sub Sr1DrawDotPlot(ByVal strRgeClass As String, ByVal strRgeData As String, _
                                    ByVal strRgeOut As String, ByVal crossAt As Double)
    Application.Run GxlaBkGraph1 & "!DrawDotPlot_A", toXlA1str(strRgeClass), toXlA1str(strRgeData), _
                                            toXlA1str(strRgeOut), crossAt
End Sub
                          
'=== EOF ===



Attribute VB_Name = "MdlForecast"
'=======================================================
' SR1 for iSTAT_YSK Ver1.0
'
' 2011.11 WZH
'=======================================================

Option Private Module
Option Explicit

Type Srk1Para
    RgeInfo As String * 256
    OutSheet As String * 256
    RgeObj As String * 256
    RgeVar As String * 256
    RgeVarKind As String * 256
    RgeClass As String * 256
    RgeSmpName As String * 256
    RgeCateName As String * 256
    RgeYskData As String * 256          'only used for proceeding data
    RgeYskName As String * 256          'only used for proceeding data
    bExcept As Long
    bExcept_n0 As Long
    bYsk As Long                        'only used for proceeding data
    bExtraInfo As Long
    nVarSelMethod As Long
    bSmpName As Long
    bNum2Class As Long
    bCateName As Long
    bPointGrp As Long
End Type

Type Srk1Para_Extra
    bTimeLag As Long
    RgeTimeLag As String * 256          'only used for procedding data
    nTimeStyle As Long
    nYear As Long
    nMonth As Long
    nTrend As Long
    bHasVarData As Boolean
End Type

Private Const X_MAX As Integer = 30
Private Const CATE_MAX As Integer = 200

Private VbaGrp() As VBAGRAPH
Private m_varselect As String
Private m_bvarselected As Boolean
Private sr1tbl As Srk1Para
Private sr1Extra As Srk1Para_Extra

#If Win64 Then
    #If VBA7 Then
        Private Declare PtrSafe Function sr1_dlg Lib "MIST_A_64.dll" (ByVal nId As Long, sr1tbl As Srk1Para) As Integer
    #Else
        Private Declare Function sr1_dlg Lib "MIST_A_64.dll" (ByVal nId As Long, sr1tbl As Srk1Para) As Integer
    #End If
#Else
    #If VBA7 Then
        Private Declare PtrSafe Function sr1_dlg Lib "MIST_A.dll" (ByVal nId As Long, sr1tbl As Srk1Para) As Integer
    #Else
        Private Declare Function sr1_dlg Lib "MIST_A.dll" (ByVal nId As Long, sr1tbl As Srk1Para) As Integer
    #End If
#End If

Private Function CountUniqueValues(InputRange As Range) As Long
    Dim cl As Range, UniqueValues As New Collection
    Dim rowNum As Long, colNum As Long
    Dim i As Long, j As Long
    Dim vdata As Variant
    On Error Resume Next
    rowNum = InputRange.Rows.Count
    colNum = InputRange.Columns.Count
    vdata = InputRange.Value
    For i = 1 To rowNum
        For j = 1 To colNum
            UniqueValues.Add vdata(i, j), CStr(vdata(i, j))
        Next j
    Next i
    On Error GoTo 0
    CountUniqueValues = UniqueValues.Count
End Function

'RgeX : |fffd|K|fffd||fffd||fffd|l|fffd|w|fffd||fffd||348||fffd| (formatted)
'RgeCateNum : Item category number (0=numeric item)
'outBgn : category name output begin cell
'
'11.8.21 LSQ
Private Sub nu_makeCateName_forNumItem(ByVal ItemNum As Integer, ByVal RgeX As Range, ByVal RgeCateNum As Range, ByVal outBgn As Range)
    Dim i As Integer, j As Integer, cateN As Integer
    Dim x1 As Double, x2 As Double, dxHalf As Double
    
    If RgeX Is Nothing Or ItemNum < 1 Then Exit Sub    'no number item categorized
    
    For i = 1 To ItemNum
        cateN = RgeCateNum(1, i)
        If cateN = 0 Then
            cateN = RgeX(1, i)
            If cateN < 1 Then GoTo nextItem 'in fact = ERROR
            
            x1 = RgeX(2, i)
            x2 = RgeX(3, i)
            dxHalf = (x2 - x1) / 2
            
            outBgn(1, i) = "|fffd|`" & (x1 + dxHalf)
            For j = 2 To cateN - 1
                outBgn(j, i) = (x1 + dxHalf) & "|fffd|`" & (x2 + dxHalf)
                'next
                x1 = x1 + 2 * dxHalf
                x2 = x2 + 2 * dxHalf
            Next j
            outBgn(cateN, i) = (x2 - dxHalf) & "|fffd|`"
        End If
nextItem:
    Next i
        
End Sub

'2011.12.04 rewritten
Private Sub makeCateName_forNumItem(ByVal ItemNum As Integer, ByVal RgeX As Range, ByVal RgeCateNum As Range, ByVal outBgn As Range)
    Dim i As Integer, j As Integer, cateN As Integer
    Dim x1 As Double, x2 As Double, dxHalf As Double
    
    If RgeX Is Nothing Or ItemNum < 1 Then Exit Sub    'no number item categorized
    
    For i = 3 To ItemNum                            'skip T and S
        cateN = RgeCateNum(1, i)
        If cateN = 0 Then
            cateN = RgeX(1, i)
            If cateN < 1 Then GoTo nextItem 'in fact = ERROR
            
            x1 = RgeX(2, i)
            x2 = RgeX(3, i)
            
            outBgn(1, i) = "|fffd|`" & x1
            For j = 2 To cateN
                outBgn(j, i) = x1 & "|fffd|`" & x2
                'next
                x1 = RgeX(j + 1, i)
                x2 = RgeX(j + 2, i)
            Next j
        End If
nextItem:
    Next i
        
End Sub
'end rewritten

Private Function next_Year_Month(ByVal nTimeStyle As Long, ByRef year As Long, ByRef month As Long) As Boolean
    next_Year_Month = False
    If nTimeStyle = 1 Then
        month = month + 1
    ElseIf nTimeStyle = 2 Then
        month = month + 3
    ElseIf nTimeStyle = 3 Then
        month = month + 12
    ElseIf nTimeStyle = 4 Then
        month = month + 1
    End If
    If month > 12 And nTimeStyle < 4 Or nTimeStyle = 3 Then
        month = month - 12
        year = year + 1
        next_Year_Month = True
    End If
End Function

Private Function previous_Year_Month(ByVal nTimeStyle As Long, ByRef year As Long, ByRef month As Long) As Boolean
    previous_Year_Month = False
    If nTimeStyle = 1 Then
        month = month - 1
    ElseIf nTimeStyle = 2 Then
        month = month - 3
    ElseIf nTimeStyle = 3 Then
        month = month - 12
    ElseIf nTimeStyle = 4 Then
        month = month - 1
    End If
    If month < 1 And nTimeStyle < 4 Or nTimeStyle = 3 Then
        month = month + 12
        year = year - 1
        previous_Year_Month = True
    End If
End Function

Private Function dummyVarData(ByRef strmsg As String) As Boolean
    Dim i As Long, j As Long, k As Long
    Dim RgeObj As Range, RgeVar As Range, rge As Range
    Dim RgeClass As Range, RgeVarKind As Range
    Dim RgeSmpName As Range, RgeCateName As Range
    Dim RgeYskData As Range, RgeYskName As Range
    Dim RgeTimeLag As Range
    Dim tmpSht As Worksheet
    Dim CateNum As Long, smpNum As Long, ItemNum As Long, colNum As Long
    Dim forcNum As Long
    Dim sr1VarSel As Variant
    Dim tmpstr As String
    Dim bHasDataVar As Boolean
    dummyVarData = False
    On Error Resume Next
    
    Set RgeObj = Range(sr1tbl.RgeObj)
    Set RgeVar = Range(sr1tbl.RgeVar)
    If RgeVar Is Nothing Then
        smpNum = RgeObj.Rows.Count
        ItemNum = 0
    Else
        smpNum = RgeVar.Rows.Count
        ItemNum = RgeVar.Columns.Count
    End If
    colNum = ItemNum
    bHasDataVar = IIf(ItemNum = 0, False, True)
    sr1Extra.bHasVarData = bHasDataVar
    Set tmpSht = SbkThis.Sheets("Temp")
    tmpSht.Cells.ClearContents
    
    If ItemNum > 0 Then
        If m_varselect <> "0" Then
            sr1VarSel = Split(m_varselect, ",")
        Else
            ReDim sr1VarSel(0 To ItemNum) As Long
            sr1VarSel(0) = ItemNum
            For i = 1 To ItemNum
                sr1VarSel(i) = i - 1
            Next i
        End If
        ItemNum = sr1VarSel(0)
    End If
    
    Set rge = tmpSht.Range("B1")
    If sr1Extra.nTimeStyle = 1 Then
        forcNum = 24
    ElseIf sr1Extra.nTimeStyle = 2 Then
        forcNum = 8
    Else
        forcNum = 40
    End If
    rge = "T"
    rge(1, 2) = "S"
    For i = 2 To smpNum + forcNum
        rge(i, 1) = Rnd()
        rge(i, 2) = Rnd()
    Next i
    For i = 1 To ItemNum
        RgeVar.Columns(sr1VarSel(i) + 1).Copy 'rge(1, 2 + i)
        rge(1, 2 + i).PasteSpecial xlPasteValues
    Next i
    ItemNum = ItemNum + 2
    sr1tbl.RgeVar = tmpSht.Name & "!" & rge.Resize(smpNum, ItemNum).Address & vbNullChar
    
    If sr1tbl.bYsk = 1 Then
        If bHasDataVar Then
            Set RgeYskData = Range(sr1tbl.RgeYskData)
            If Not RgeYskData Is Nothing Then
                If RgeYskData.Columns.Count <> colNum Then
                    strmsg = "|fffd||53683|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Exit Function
                End If
                
                For i = 1 To RgeYskData.Rows.Count
                    rge(smpNum + i, 1) = Rnd()
                    rge(smpNum + i, 2) = Rnd()
                Next i
                'RgeYskData.Copy 'rge(smpNum + 1, 3)
                'rge(smpNum + 1, 3).PasteSpecial xlPasteValues
                For i = 1 To sr1VarSel(0)
                    RgeYskData.Columns(sr1VarSel(i) + 1).Copy
                    rge(smpNum + 1, 2 + i).PasteSpecial xlPasteValues
                Next i
                sr1tbl.RgeYskData = tmpSht.Name & "!" & rge(smpNum + 1, 1).Resize(RgeYskData.Rows.Count, ItemNum).Address & vbNullChar
            End If
        Else
            sr1tbl.bYsk = False
        End If
    End If
    
    Set rge = rge(1, ItemNum + 1)
    Set RgeVarKind = Range(sr1tbl.RgeVarKind)
    If RgeVarKind Is Nothing Then
        rge(1, 1) = 0
        rge(1, 2) = 0
        For i = 1 To ItemNum - 2
            rge(1, i + 2) = 0
        Next i
        sr1tbl.RgeVarKind = tmpSht.Name & "!" & rge.Resize(1, ItemNum).Address & vbNullChar
    Else
        If RgeVarKind.Columns.Count <> colNum Then
            strmsg = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Exit Function
        End If
        rge(1, 1) = 0
        rge(1, 2) = 0
        'RgeVarKind.Copy 'rge(1, 3)
        'rge(1, 3).PasteSpecial xlPasteValues
        For i = 1 To sr1VarSel(0)
            RgeVarKind.Columns(sr1VarSel(i) + 1).Copy
            rge(1, 2 + i).PasteSpecial xlPasteValues
        Next i
        sr1tbl.RgeVarKind = tmpSht.Name & "!" & rge.Resize(RgeVarKind.Rows.Count, ItemNum).Address & vbNullChar
    End If
    Set rge = rge(1, ItemNum + 1)
    If sr1tbl.bCateName Then
        If bHasDataVar Then
            Set RgeCateName = Range(sr1tbl.RgeCateName)
            If Not RgeCateName Is Nothing Then
                If RgeCateName.Columns.Count <> colNum Then
                    strmsg = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Exit Function
                End If
                'RgeCateName.Copy 'rge(1, 3)
                'rge(1, 3).PasteSpecial xlPasteValues
                For i = 1 To sr1VarSel(0)
                    RgeCateName.Columns(sr1VarSel(i) + 1).Copy
                    rge(1, 2 + i).PasteSpecial xlPasteValues
                Next i
                sr1tbl.RgeCateName = tmpSht.Name & "!" & rge.Resize(RgeCateName.Rows.Count, ItemNum).Address & vbNullChar
            End If
        Else
            sr1tbl.bCateName = False
        End If
    End If
    Set rge = rge(1, ItemNum + 1)
    If sr1tbl.bNum2Class Then
        If bHasDataVar Then
            rge(1, 1) = 1
            rge(1, 2) = 1
            rge(2, 1) = ""
            rge(2, 2) = ""
            Set RgeClass = Range(sr1tbl.RgeClass)
            If Not RgeClass Is Nothing Then
                If RgeClass.Columns.Count <> colNum Then
                    strmsg = "|fffd||fffd||fffd||28d||fffd||fffd||682||315||fffd||fffd||789||fffd||fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Exit Function
                End If
                'RgeClass.Copy 'rge(1, 3)
                'rge(1, 3).PasteSpecial xlPasteValues
                For i = 1 To sr1VarSel(0)
                    RgeClass.Columns(sr1VarSel(i) + 1).Copy
                    rge(1, 2 + i).PasteSpecial xlPasteValues
                Next i
                sr1tbl.RgeClass = tmpSht.Name & "!" & rge.Resize(RgeClass.Rows.Count, ItemNum).Address & vbNullChar
            End If
        Else
            sr1tbl.bNum2Class = False
        End If
    End If
    Set rge = rge(1, ItemNum + 1)
    If sr1Extra.bTimeLag Then
        If bHasDataVar Then
            Set RgeTimeLag = Range(sr1Extra.RgeTimeLag)
            If Not RgeTimeLag Is Nothing Then
                If RgeTimeLag.Columns.Count <> colNum Then
                    strmsg = "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Exit Function
                End If
                'RgeTimeLag.Copy 'rge(1, 3)
                'rge(1, 3).PasteSpecial xlPasteValues
                For i = 1 To sr1VarSel(0)
                    RgeTimeLag.Columns(sr1VarSel(i) + 1).Copy
                    rge(1, 2 + i).PasteSpecial xlPasteValues
                Next i
                rge(1, 1) = ""
                rge(1, 2) = ""
                sr1Extra.RgeTimeLag = tmpSht.Name & "!" & rge.Resize(RgeTimeLag.Rows.Count, ItemNum).Address & vbNullChar
            End If
        Else
            sr1Extra.bTimeLag = False
        End If
    End If
    'If m_varselect <> "0" Then
    '    sr1VarSel = Split(m_varselect, ",")
    '    m_varselect = CStr(CLng(sr1VarSel(0)) + 2)
    '    m_varselect = m_varselect & ",0,1"
    '    For i = 1 To sr1VarSel(0)
    '        m_varselect = m_varselect & "," & (sr1VarSel(i) + 2)
    '    Next i
    'End If
    m_varselect = "0"
    dummyVarData = True
    On Error GoTo 0
End Function

Private Function handleSr1Data() As Worksheet
    Dim i As Long, j As Long, k As Long
    Dim RgeObj As Range, RgeVar As Range, rge As Range
    Dim RgeClass As Range, RgeVarKind As Range
    Dim RgeSmpName As Range, RgeCateName As Range
    Dim RgeYskData As Range, RgeYskName As Range
    Dim RgeTimeLag As Range
    Dim tmpSht As Worksheet, tmpSht2 As Worksheet
    Dim sr1obj As Variant, sr1var As Variant, sr1cate As Variant, varkind As Variant
    Dim sr1VarSel As Variant
    Dim varTimeLag As Variant
    Dim cateNameRow As Long, varKindRow As Long, classRow As Long
    Dim CateNum As Long, smpNum As Long, ItemNum As Long, objSmpNum As Long
    Dim forcNum As Long
    Dim tmpv As Long, totalCateNum As Long
    Dim msgStr As String
    Dim bgnCelCateNm As Range
    Dim nYear As Long, nMonth As Long
    Dim strTime As String
    Dim bSameTimeLag As Boolean, timelagoff As Long, nBkYear As Long, nBkMonth As Long
    
    On Error Resume Next
    Set tmpSht = SbkThis.Sheets("Temp")
    If Not dummyVarData(msgStr) Then
        MsgBox msgStr
        Set handleSr1Data = Nothing
        Exit Function
    End If
    Set RgeObj = Range(sr1tbl.RgeObj)
    Set RgeVar = tmpSht.Range(sr1tbl.RgeVar)
    Set RgeVarKind = tmpSht.Range(sr1tbl.RgeVarKind)
    If sr1tbl.bNum2Class = 1 Then
        Set RgeClass = tmpSht.Range(sr1tbl.RgeClass)
    End If
    If sr1tbl.bCateName = 1 Then
        Set RgeCateName = tmpSht.Range(sr1tbl.RgeCateName)
    End If
    If sr1tbl.bYsk = 1 Then
        Set RgeYskData = tmpSht.Range(sr1tbl.RgeYskData)
    End If
    If sr1Extra.bTimeLag = 1 Then
        Set RgeTimeLag = tmpSht.Range(sr1Extra.RgeTimeLag)
    End If
    cateNameRow = RgeObj.Rows.Count
    If cateNameRow < RgeVar.Rows.Count Then
        cateNameRow = RgeVar.Rows.Count
    End If
    If cateNameRow < RgeSmpName.Rows.Count Then
        cateNameRow = RgeSmpName.Rows.Count
    End If
    cateNameRow = cateNameRow + 1000 + 6
    sr1obj = RgeObj.Value
    sr1var = RgeVar.Value
    varkind = RgeVarKind.Value
    CateNum = Application.WorksheetFunction.max(varkind)
    If CateNum = 0 Then CateNum = 1
    classRow = cateNameRow + CateNum + 2
    
    ItemNum = RgeVar.Columns.Count
    smpNum = RgeObj.Rows.Count
    If smpNum <> RgeVar.Rows.Count Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleSr1Data = Nothing
        Exit Function
    End If
    If ItemNum > X_MAX Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        Set handleSr1Data = Nothing
        Exit Function
    End If
    If sr1Extra.bTimeLag = 1 Then
        If RgeTimeLag Is Nothing Then
            MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        If RgeTimeLag.Columns.Count <> ItemNum Then
            MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        varTimeLag = RgeTimeLag.Value
        For i = 1 To ItemNum
            If varkind(1, i) = 0 Then
                j = Val(varTimeLag(1, i))
                If Abs(j) >= smpNum Then
                    MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Set handleSr1Data = Nothing
                    Exit Function
                Else
                    varTimeLag(1, i) = j
                End If
            Else
            #If 0 Then
                If Not IsEmpty(RgeTimeLag(1, i)) Then
                    MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Set handleSr1Data = Nothing
                    Exit Function
                Else
                    varTimeLag(1, i) = 0
                End If
            #Else
                j = Val(varTimeLag(1, i))
                If Abs(j) >= smpNum Then
                    MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Set handleSr1Data = Nothing
                    Exit Function
                Else
                    varTimeLag(1, i) = j
                End If
            #End If
            End If
        Next i
    End If
    
    If sr1Extra.nTimeStyle <> 4 Then
        If sr1Extra.nYear < 1900 Or sr1Extra.nYear > 2100 Then
            MsgBox "Invalid year!"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        If sr1Extra.nTimeStyle <> 3 Then
            If sr1Extra.nMonth < 1 Or sr1Extra.nMonth > 12 Then
                MsgBox "Invalid month!"
                Set handleSr1Data = Nothing
                Exit Function
            End If
        End If
    End If
    
    Set rge = RgeVar(2, 1).Resize(smpNum - 1, ItemNum)
    For i = 1 To ItemNum
        If varkind(1, i) > 0 Then
            If Application.WorksheetFunction.max(rge.Columns(i)) <> varkind(1, i) Then
                MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                Set handleSr1Data = Nothing
                Exit Function
            End If
            If sr1tbl.bExcept_n0 = 0 Then
                If CountUniqueValues(rge.Columns(i)) <> varkind(1, i) Then
                    MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||fffd|0|fffd||fffd||fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
                    Set handleSr1Data = Nothing
                    Exit Function
                End If
            End If
        End If
    Next i
    
    msgStr = ""
    If RgeObj Is Nothing Then
        msgStr = "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf RgeVar Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf RgeVarKind Is Nothing Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr1tbl.bNum2Class = 1 And RgeClass Is Nothing) Then
        msgStr = "|fffd||293|I|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr1tbl.bCateName = 1 And RgeCateName Is Nothing) Then
        msgStr = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf (sr1tbl.bSmpName = 2 And RgeSmpName Is Nothing) Then
        msgStr = "|fffd||5368e||496||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    'ElseIf CateNum < 2 Then
    '    msgStr = "|fffd||fffd||fffd||343|f|fffd|[|fffd|^|fffd||355|s|fffd||fffd|"
    ElseIf RgeVar.Columns.Count <> RgeVarKind.Columns.Count Then
        msgStr = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    ElseIf Not RgeCateName Is Nothing Then
        If (CateNum <> RgeCateName.Rows.Count Or RgeVar.Columns.Count <> RgeCateName.Columns.Count) Then
            msgStr = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        End If
    ElseIf sr1tbl.bYsk = 1 And RgeYskData Is Nothing Then
        msgStr = "|fffd||53683|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
    End If

    '
    If msgStr <> "" Then
        MsgBox msgStr
        Set handleSr1Data = Nothing
        Exit Function
    End If
    
    If m_varselect <> "0" Then
        sr1VarSel = Split(m_varselect, ",")
    Else
        ReDim sr1VarSel(0 To RgeVar.Columns.Count) As Long
        sr1VarSel(0) = RgeVar.Columns.Count
        For i = 1 To RgeVar.Columns.Count
            sr1VarSel(i) = i - 1
        Next i
    End If
    
    ItemNum = sr1VarSel(0)
    
    totalCateNum = 0
    If sr1tbl.bNum2Class = 1 Then
        If RgeClass.Rows.Count > 31 Then
            MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: 1|fffd||fffd||fffd||fffd||fffd||3d0||fffd|MAX30"
            Set handleSr1Data = Nothing
            Exit Function
        Else
            For i = 1 To ItemNum
                tmpv = RgeClass(1, sr1VarSel(i) + 1)
                totalCateNum = totalCateNum + tmpv
                If tmpv > 30 Then
                    MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: 1|fffd||fffd||fffd||fffd||fffd||3d0||fffd|MAX30"
                    Set handleSr1Data = Nothing
                    Exit Function
                End If
                If varkind(1, sr1VarSel(i) + 1) = 0 And tmpv < 1 Then
                    MsgBox "|fffd||fffd||fffd||28d||fffd||fffd||682||315||fffd||fffd||789||fffd||fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
                    Set handleSr1Data = Nothing
                    Exit Function
                End If
                If tmpv > CateNum Then CateNum = tmpv
            Next i
        End If
    End If
    
    For i = 1 To ItemNum
        tmpv = varkind(1, sr1VarSel(i) + 1)
        If tmpv < 0 Then
            MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30e||fffd||282||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
            Set handleSr1Data = Nothing
            Exit Function
        End If
        totalCateNum = totalCateNum + tmpv
    Next i
    
    If totalCateNum > CATE_MAX Then
        MsgBox "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd|: |fffd||fffd||fffd|vMAX" & CATE_MAX
        Set handleSr1Data = Nothing
        Exit Function
    End If
    
    If sr1tbl.bExcept = 0 Then
        Set rge = RgeVar.Offset(1, 0).Resize(smpNum, ItemNum)
        For i = 1 To ItemNum
            k = sr1VarSel(i) + 1
            sr1var = rge.Columns(k).Value
            If WorksheetFunction.Count(sr1var) <> smpNum - 1 Then
                Set handleSr1Data = Nothing
                Exit Function
            End If
        Next i
    End If
    
    If sr1tbl.bYsk = 1 Then
        cateNameRow = cateNameRow + RgeYskData.Rows.Count
        smpNum = smpNum + RgeYskData.Rows.Count
    End If
    
    Set tmpSht = SbkThis.Sheets("Sr1Data") 'RgeVar.Worksheet.Parent.Sheets.Add
    tmpSht.Cells.ClearContents
    Set rge = tmpSht.Range("$B$1")
    nYear = sr1Extra.nYear
    nMonth = sr1Extra.nMonth
    
    forcNum = 0
    If sr1Extra.nTimeStyle = 1 Then
        forcNum = 24
    ElseIf sr1Extra.nTimeStyle = 2 Then
        forcNum = 8
    Else
        forcNum = 40
    End If
    bSameTimeLag = True
    timelagoff = varTimeLag(1, 1)
    For i = 1 To ItemNum
        'If varTimeLag(1, i) <> varTimeLag(1, i + 1) Then
        '    bSameTimeLag = False
        '    Exit For
        'End If
        If varTimeLag(1, i) > timelagoff Then timelagoff = varTimeLag(1, i)
    Next i
    If sr1Extra.bTimeLag = 1 And bSameTimeLag Then
        nBkMonth = nMonth
        nBkYear = nYear
        If timelagoff > 0 Then
            For i = 1 To timelagoff
                Call next_Year_Month(sr1Extra.nTimeStyle, nYear, nMonth)
            Next i
            sr1Extra.nYear = nYear
            sr1Extra.nMonth = nMonth
            nYear = nBkYear
            nMonth = nBkMonth
        'Else
        '    For i = 1 To Abs(timelagoff)
        '        Call previous_Year_Month(sr1Extra.nTimeStyle, nYear, nMonth)
        '    Next i
        End If
    End If
    For i = 1 To smpNum + forcNum 'cateNameRow - 6 - 1
        If sr1Extra.nTimeStyle = 4 Then
            rge(i + 1, 1) = i
        ElseIf sr1Extra.nTimeStyle = 3 Then
            rge(i + 1, 1) = nYear + i - 1
        Else
            If i = 1 Then
                rge(i + 1, 1) = nYear & " " & nMonth
            Else
                If next_Year_Month(sr1Extra.nTimeStyle, nYear, nMonth) Then
                    rge(i + 1, 1) = nYear & " " & nMonth
                Else
                    rge(i + 1, 1) = nMonth
                End If
            End If
        End If
    Next i
    
    For i = 1 To RgeVar.Rows.Count
        For j = 1 To ItemNum
            k = sr1VarSel(j) + 1
            If i > 1 And sr1Extra.bTimeLag = 1 Then
                If varTimeLag(1, k) >= 0 Then
                    If i - 1 <= varTimeLag(1, k) Then
                        rge(i, j + 2) = ""
                    Else
                        rge(i, j + 2) = RgeVar(i - varTimeLag(1, k), k)
                    End If
                Else
                    If i - 1 > smpNum + varTimeLag(1, k) Then
                        rge(i, j + 2) = ""
                    Else
                        rge(i, j + 2) = RgeVar(i - varTimeLag(1, k), k)
                    End If
                End If
            Else
                rge(i, j + 2) = RgeVar(i, k)
            End If
        Next j
    Next i
    tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)) = sr1obj
    
    If sr1tbl.bYsk = 1 Then
        For i = 1 To RgeYskData.Rows.Count
            For j = 1 To ItemNum
                rge(RgeObj.Rows.Count + i, j + 2) = RgeYskData(i, sr1VarSel(j) + 1)
            Next j
        Next i
    End If
    
    sr1tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)).Address & vbNullChar
    sr1tbl.RgeVar = tmpSht.Range(rge(1, 3), rge(smpNum, ItemNum + 2)).Address & vbNullChar
        
    If Not RgeCateName Is Nothing Then
        CateNum = RgeCateName.Rows.Count
        sr1cate = RgeCateName.Value
        For i = 1 To ItemNum
            For j = 1 To CateNum
                If Trim(sr1cate(j, sr1VarSel(i) + 1)) = "" Then
                    If i < 3 Then
                        rge(cateNameRow + j - 1, i) = "*"
                    Else
                        rge(cateNameRow + j - 1, i) = "C-" & j
                    End If
                Else
                    rge(cateNameRow + j - 1, i) = sr1cate(j, sr1VarSel(i) + 1)
                End If
            Next j
        Next i
    Else
        For i = 1 To ItemNum
            For j = 1 To CateNum
                If i < 3 Then
                    rge(cateNameRow + j - 1, i) = "*"
                Else
                    rge(cateNameRow + j - 1, i) = "C-" & j
                End If
            Next j
        Next i
    End If
    sr1tbl.bCateName = 1
    sr1tbl.RgeCateName = tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, ItemNum)).Address & vbNullChar
    sr1tbl.RgeSmpName = tmpSht.Range(rge(2, 1), rge(RgeSmpName.Rows.Count + 1, 1)).Address & vbNullChar
    
    Set rge = tmpSht.Range(sr1tbl.RgeVar)
    smpNum = rge.Rows.Count
    objSmpNum = RgeObj.Rows.Count
    Set tmpSht2 = getTempSheet(2)
    If sr1Extra.bHasVarData Then
        tmpSht2.Range("A1") = smpNum
        For i = rge.Rows.Count To 2 Step -1
            sr1var = rge.Rows(i).Value
            tmpSht2.Cells(i, 1) = 1
            tmpSht2.Cells(i, 2) = tmpSht.Cells(i, 2)
            If Application.WorksheetFunction.Count(sr1var) <> rge.Columns.Count Then
                If sr1tbl.bExcept = 1 Then
                    tmpSht2.Cells(i, 1) = 0
                    If i = 2 And (sr1Extra.nTimeStyle = 1 Or sr1Extra.nTimeStyle = 2) Then
                        tmpSht.Cells(i + 1, 2) = sr1Extra.nYear & " " & tmpSht.Cells(i + 1, 2)
                    End If
                    tmpSht.Rows(i).Delete
                    smpNum = smpNum - 1
                    cateNameRow = cateNameRow - 1
                    objSmpNum = objSmpNum - 1
                Else
                    Set handleSr1Data = Nothing
                    Exit Function
                End If
            End If
        Next i
    Else
        tmpSht2.Range("A1") = smpNum + forcNum
        For i = 1 To smpNum + forcNum
            tmpSht2.Cells(i, 1) = 1
            tmpSht2.Cells(i, 2) = tmpSht.Cells(i, 2)
        Next i
    End If
    Set rge = tmpSht.Range("$B$1")
    
    'sr1tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(RgeObj.Rows.Count, 2)).Address & vbNullChar
    sr1tbl.RgeObj = tmpSht.Range(rge(1, 2), rge(objSmpNum, 2)).Address & vbNullChar
    sr1tbl.RgeVar = tmpSht.Range(rge(1, 3), rge(smpNum, ItemNum + 2)).Address & vbNullChar
    sr1tbl.RgeCateName = tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, ItemNum)).Address & vbNullChar
    sr1tbl.RgeSmpName = tmpSht.Range(rge(2, 1), rge(smpNum + forcNum, 1)).Address & vbNullChar
    
    tmpSht.Range(rge(2, 1), rge(smpNum + forcNum, 1)).Copy SbkThis.Sheets("Sr1Data").Range("A2")
    For i = 1 To smpNum + forcNum
        rge(i + 1, 1) = i
    Next i
    
    'Category Name Copy (Category Name for numeric item may be adjusted, if it is categorized)
    Set bgnCelCateNm = SbkThis.Sheets("Sr1Info").Range("B50")
    tmpSht.Range(rge(cateNameRow, 1), rge(CateNum + cateNameRow - 1, ItemNum)).Copy bgnCelCateNm
    
    Call makeCateName_forNumItem(ItemNum, RgeClass, RgeVarKind, bgnCelCateNm)  '11.8.21 LSQ
    
    'Item Type
    For i = 1 To ItemNum
        rge(i + 1, ItemNum + 4) = varkind(1, sr1VarSel(i) + 1)
    Next i
    
    sr1tbl.RgeVarKind = rge(2, ItemNum + 4).Resize(ItemNum, 1).Address & vbNullChar
    
    'numeric item categorized (|fffd|K|fffd||fffd||fffd|l)
    If Not RgeClass Is Nothing Then
        For i = 1 To ItemNum
            RgeClass.Columns(sr1VarSel(i) + 1).Copy rge(classRow, i)
        Next i
        sr1tbl.RgeClass = rge(classRow, 1).Resize(RgeClass.Rows.Count, ItemNum).Address & vbNullChar
    End If
    
    Set handleSr1Data = tmpSht
    On Error GoTo 0
End Function

Private Function checkSr1Data() As Boolean
    Dim RgeObj As Range, RgeVar As Range
    
    On Error Resume Next
    Set RgeObj = Range(sr1tbl.RgeObj)
    Set RgeVar = Range(sr1tbl.RgeVar)
    If RgeObj.Rows.Count > RgeVar.Rows.Count Then
        MsgBox "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd|"
        checkSr1Data = False
        Exit Function
    End If
    checkSr1Data = True
End Function

Private Sub SaveBasicInfo(ByVal revisedCateNum As Variant, ByVal NewCates As Variant, Optional ByVal flg As Long = 1)
    Dim i As Long, j As Long
    Dim rge As Range, RgeObj As Range, RgeVar As Range, rgeKind As Range
    Dim tmpstr As String
    Set rge = SbkThis.Worksheets("Sr1Info").Range("A1")
    Set RgeObj = Range(toXlA1str(sr1tbl.RgeObj))
    Set RgeVar = Range(toXlA1str(sr1tbl.RgeVar))
    Set rgeKind = Range(toXlA1str(sr1tbl.RgeVarKind))
    rge.Offset(0, 1) = RgeObj(1, 1)
    rge.Offset(0, 2) = 1
    For i = 1 To RgeVar.Columns.Count
        rge.Offset(7, i) = RgeVar(1, i)
        If flg = 1 Then
            rge.Offset(8, i + 40) = rgeKind(i, 1)
            rge.Offset(9, i + 40) = NewCates(i)
        Else
            rge.Offset(8, i + 40) = rge.Offset(8, i + 41)
            rge.Offset(9, i + 40) = rge.Offset(9, i + 41)
        End If
    Next i
    Set rge = SbkThis.Worksheets("Sr1Data").Range("A1")
    For i = 1 To RgeVar.Columns.Count
        If flg = 1 Then
            rge.Offset(i, RgeVar.Columns.Count + 4) = revisedCateNum(i)
        End If
    Next i
End Sub

'"|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Private Function GetGsDlgInp(ByVal bHasRgeX As Boolean, ByVal rgeOut As Range) As Boolean
    Dim tmp1, tmp2, rgeTmp As Range, i As Integer
    Dim smpNum
    
    GetGsDlgInp = False

    '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||348||fffd|
    
    Set g_aDialog.rgeInp = Range(Comm_toXlA1str(sr1tbl.RgeObj))
    If Not bHasRgeX Then
        Set g_aDialog.RgeX = Nothing
    Else
        Set g_aDialog.RgeX = Range(Comm_toXlA1str(sr1tbl.RgeVar))
    End If
    Set g_aDialog.rgeOutBgn = rgeOut
    
    g_aDialog.bColData = True
    g_aDialog.bTitle = True
    
    '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||311|I|fffd||fffd|
    g_aDialog.bXSel = False
    
    g_aDialog.dlgGs.nMinSmpLmt = 5
    g_aDialog.nTimeStyle = sr1Extra.nTimeStyle
    g_aDialog.nYearBgn = sr1Extra.nYear
    g_aDialog.nMonth = sr1Extra.nMonth
    
    If g_aDialog.nTimeStyle = 1 Then            '|fffd||fffd||fffd||fffd|
        g_aDialog.dlgGs.nMaxSmpLmt = 500 '2005.7 PYJ  old:48
        g_aDialog.dlgGs.nLmtSmp1 = 24
        g_aDialog.dlgGs.nLmtSmp2 = 36
    ElseIf g_aDialog.nTimeStyle = 2 Then        '|fffd|l|fffd||fffd||fffd||fffd|
        g_aDialog.dlgGs.nMaxSmpLmt = 500 '2005.7 PYJ  old:16
        g_aDialog.dlgGs.nLmtSmp1 = 12
        g_aDialog.dlgGs.nLmtSmp2 = 12
    ElseIf g_aDialog.nTimeStyle = 3 Then        '|fffd|N|fffd||fffd|
        g_aDialog.dlgGs.nMaxSmpLmt = 500 '2005.7 PYJ  old:20
        g_aDialog.dlgGs.nLmtSmp1 = 501   '2005.7 PYJ  old:21
        g_aDialog.dlgGs.nLmtSmp2 = 501   '2005.7 PYJ  old:21
    Else
        g_aDialog.dlgGs.nMaxSmpLmt = 500
        g_aDialog.dlgGs.nLmtSmp1 = 501
        g_aDialog.dlgGs.nLmtSmp2 = 501
        g_aDialog.nYearBgn = sr1Extra.nMonth
        g_aDialog.nTimeStyle = 3
    End If
    
    '|fffd||fffd||fffd|d|fffd||693||fffd|-------------------------------
    '2013.11.25 LSQ mdf :
    '   |fffd||fffd||fffd||fffd| & [24, 36)|fffd|f|fffd|[|fffd|^ -> 12 term |fffd||fffd||fffd|d|fffd||693||fffd|; see ISTAT_2011_2012_2013.xls ! MYSK ! No.2, No.4
    '   Else 3 term |fffd||fffd||fffd|d|fffd||693||fffd|
    smpNum = g_aDialog.rgeInp.Count - 1
    If g_aDialog.nTimeStyle = 1 And (smpNum >= 24 And smpNum < 36) Then
        g_aDialog.dlgEma.nSmpNum = 12
    Else
        g_aDialog.dlgEma.nSmpNum = 3
    End If
    
    
    'EPA-------------------------------------
    g_aDialog.dlgEpa.nMod = 1
    
    '|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|--------------------------------
    g_aDialog.dlgGs.nKkMethod = sr1Extra.nTrend
    'g_aDialog.dlgKk.nSi = 1
    g_aDialog.dlgKk.nSuitei = 1      '|fffd||fffd||510||fffd||fffd||fffd|
    g_aDialog.dlgKk.nUpLimitFlg = 1  '|fffd||fffd||fffd||fffd|l
    g_aDialog.dlgKk.dUpLimit = 1
    '|fffd||590||fffd||fffd||fffd||fffd|w|fffd||fffd|
    For i = 1 To g_nKkFunNum
        g_aDialog.dlgKk.nmFuncSel(i) = 0
    Next i
    g_aDialog.dlgKk.nmFuncSel(1) = 1 '|fffd||fffd||fffd||fffd|
    g_aDialog.dlgKk.nmFuncSel(3) = 1 '|fffd||fffd||fffd|[|fffd|g
    g_aDialog.dlgKk.nmFuncSel(4) = 1 '|fffd||390||fffd|
    g_aDialog.dlgKk.nmFuncSel(6) = 1 '|fffd|w|fffd||fffd|
    g_aDialog.dlgKk.nmFuncSel(8) = 1 '|fffd||fffd||fffd|W|fffd|X|fffd|e|fffd|B|fffd|b|fffd|N
    g_aDialog.dlgKk.nmFuncSel(9) = 1 '|fffd|S|fffd||fffd||fffd|x|fffd||fffd||fffd|c
    
    '|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|----------------------
    g_aDialog.dlgJkk.nMethod = 1      '|fffd||3d0||fffd||fffd|I|fffd||fffd|@
    g_aDialog.dlgJkk.nSuitei = 1      '|fffd||fffd||510||fffd||fffd||fffd|
    g_aDialog.dlgJkk.bTimeLag = False '|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd|l
    g_aDialog.dlgJkk.bTesuk = False
    '|fffd|e|fffd|l
    g_aDialog.dlgJkk.F_in = 2#
    g_aDialog.dlgJkk.F_out = 2#
    g_aDialog.bGraph = True
    
    GetGsDlgInp = True
End Function

Sub IS_Gousei_VBA()
    Dim i As Integer
    Dim rtn As Integer
    Dim dlg As DialogSheet
    Dim tmpSht As Worksheet, outSht As Worksheet, outShtMid As Worksheet
    Dim RgeVar As Range, rge As Range
    Dim valvar As Variant
    Dim strvar As String
    Dim bExcept_n0 As Boolean
    Dim edtObj As EditBox
    Dim bOutMid As Boolean, strBkName As String, bkName As String
    Dim actSht As Worksheet
    Dim bHasRgeX As Boolean
    Dim nId As Long
    Dim flg As Long
    
    'for Debug use (11.8.19 LSQ add)
#If 0 Then
    Call SbkInit
#End If

    On Error Resume Next
    
    Set actSht = ActiveSheet

    ReDim VbaGrp(0)
    
    m_varselect = getDefaultVarSelect(6)
    If bRangeChanged_Frm(6, frmForecast.RgeVar.Text) Then m_varselect = "0"
redisp:
    m_bvarselected = False
    Set outSht = Nothing
    frmForecast.bvarselected = m_bvarselected
    frmForecast.varselect = m_varselect
    frmForecast.Show
    If Not frmForecast.bOK Then Exit Sub
    
    m_bvarselected = frmForecast.bvarselected
    m_varselect = frmForecast.varselect
    
    Call setDefaultAddress(6, getCurrentAddress_Frm(frmForecast.RgeVar.Text))
    Call setDefaultVarSelect(6, m_varselect)
    
    sr1tbl.RgeObj = Trim(frmForecast.RgeObj.Text) & vbNullChar
    Set rge = Range(sr1tbl.RgeObj)
    If Not rge Is Nothing Then
        Set outSht = rge.Worksheet.Parent.Sheets.Add
    End If
    
    sr1tbl.RgeVar = Trim(frmForecast.RgeVar.Text) & vbNullChar
    Set rge = Range(sr1tbl.RgeVar)
    If rge Is Nothing Then
        bHasRgeX = False
    Else
        bHasRgeX = True
    End If
    Set rge = Nothing
    
    sr1tbl.RgeVarKind = Trim(frmForecast.RgeVarKind.Text) & vbNullChar
    sr1tbl.bExcept = IIf(frmForecast.optExcept.Value = True, 1, 0)
    sr1tbl.nVarSelMethod = IIf(frmForecast.optVarNone.Value = True, 1, 2)
    sr1tbl.bSmpName = 0
    sr1tbl.bYsk = IIf(frmForecast.chkYsk.Value = True, 1, 0)
    If sr1tbl.bYsk = 1 Then
        sr1tbl.RgeYskData = Trim(frmForecast.RgeYskData) & vbNullChar
    End If
    sr1tbl.bExtraInfo = IIf(frmForecast.optExtraInfoYes.Value = True, 1, 0)
    sr1tbl.bNum2Class = IIf(frmForecast.chkNum2Cate.Value = True, 1, 0)
    If sr1tbl.bNum2Class = 1 Then
        sr1tbl.RgeClass = Trim(frmForecast.RgeNumCate.Text) & vbNullChar
    Else
        sr1tbl.RgeClass = ""
    End If
    'If sr1tbl.bSmpName = 1 Then
    '    sr1tbl.RgeSmpName = Trim(frmBasicInfo.RgeSmpName.Text) & vbNullChar
    'End If
    sr1tbl.bCateName = IIf(frmForecast.chkCateName.Value = True, 1, 0)
    If sr1tbl.bCateName = 1 Then
        sr1tbl.RgeCateName = Trim(frmForecast.RgeCateName.Text) & vbNullChar
    End If
    sr1tbl.bPointGrp = 1 'IIf(frmBasicInfo.chkOutGrp.Value = True, 1, 0)
    sr1tbl.bExcept_n0 = IIf(frmForecast.optExcept_n0.Value = True, 1, 0)
    sr1Extra.bTimeLag = IIf(frmForecast.chkTimeLag.Value = True, 1, 0)
    If sr1Extra.bTimeLag = 1 Then
        sr1Extra.RgeTimeLag = Trim(frmForecast.RgeTimeLag.Text) & vbNullChar
    End If
    sr1Extra.nTimeStyle = IIf(frmForecast.optMonth.Value = True, 1, _
                        IIf(frmForecast.optQuarter.Value = True, 2, _
                        IIf(frmForecast.optYear.Value = True, 3, 4)))
    sr1Extra.nYear = Val(frmForecast.txtYear.Text)
    sr1Extra.nMonth = Val(frmForecast.txtMonth.Text)
    sr1Extra.nTrend = IIf(frmForecast.optTrend1.Value = True, 1, _
                    IIf(frmForecast.optTrend2.Value = True, 2, _
                    IIf(frmForecast.optTrend3.Value = True, 3, _
                    IIf(frmForecast.optTrend4.Value = True, 4, _
                    IIf(frmForecast.optTrend5.Value = True, 5, _
                    IIf(frmForecast.optTrend6.Value = True, 6, 7))))))
                    
    Set tmpSht = handleSr1Data
    
    If tmpSht Is Nothing Then
        GoTo redisp
    End If
    
    #If 0 Then
    'output sheet
    strBkName = "[" & ActiveWorkbook.Name & "]"
    '
    
    Set outSht = ActiveWorkbook.Worksheets.Add
    sr1tbl.OutSheet = strBkName & outSht.Name & "!R50C1"
    #End If
    
    'data sheet
    tmpSht.Activate
    
    Dim revisedCateNum() As Long, NewCates() As String
    Set RgeVar = Range(toXlA1str(sr1tbl.RgeVar))
    ReDim revisedCateNum(1 To RgeVar.Columns.Count + 1)
    ReDim NewCates(1 To RgeVar.Columns.Count + 1)
    Call Remove0Cate(sr1tbl.RgeVarKind, sr1tbl.RgeVar, sr1tbl.RgeCateName, sr1tbl.bExcept_n0 = 0, revisedCateNum, NewCates)
    
    If Not checkSr1Data Then
        GoTo redisp
    End If
    
    SaveBasicInfo revisedCateNum, NewCates
    
    bkName = "[" & SbkThis.Name & "]"
    sr1tbl.RgeInfo = bkName & "Sr1Info!R1C1" & vbNullChar
    sr1tbl.OutSheet = bkName & "Sr1Result!R1C1" & vbNullChar
    sr1tbl.RgeObj = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeObj) & vbNullChar
    sr1tbl.RgeVar = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeVar) & vbNullChar
    sr1tbl.RgeSmpName = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeSmpName) & vbNullChar
    sr1tbl.RgeCateName = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeCateName) & vbNullChar
    sr1tbl.RgeVarKind = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeVarKind) & vbNullChar
    sr1tbl.RgeClass = bkName & "Sr1Data!" & Comm_toXlRCstr(sr1tbl.RgeClass) & vbNullChar
    sr1tbl.OutSheet = Trim(sr1tbl.OutSheet) & vbNullChar
    
    SbkThis.Sheets("Sr1Result").Cells.Clear    'save calc results from DLL
    
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    
    GetGsDlgInp False, outSht.Range("B2")
    Call Do_Gousei_VBA
    
    Set RgeVar = Range(Comm_toXlA1str(sr1tbl.RgeVar))
    If g_aDialog.rgeInp.Rows.Count - 1 < g_aDialog.dlgGs.nLmtSmp1 Then
        g_aDialog.RgeX.Copy RgeVar.Range("B1")
        Set rge = RgeVar.Range("B1").Resize(RgeVar.Rows.Count, RgeVar.Columns.Count - 1)
        sr1tbl.RgeVar = bkName & "Sr1Data!" & Comm_toXlRCstr(rge.Address) & vbNullChar
        Set rge = Range(Comm_toXlA1str(sr1tbl.RgeVarKind))
        Set rge = rge.Range("A2").Resize(rge.Rows.Count - 1, rge.Columns.Count)
        sr1tbl.RgeVarKind = bkName & "Sr1Data!" & Comm_toXlRCstr(rge.Address) & vbNullChar
        Set rge = Range(Comm_toXlA1str(sr1tbl.RgeCateName))
        Set rge = rge.Range("B1").Resize(rge.Rows.Count, rge.Columns.Count - 1)
        sr1tbl.RgeCateName = bkName & "Sr1Data!" & Comm_toXlRCstr(rge.Address) & vbNullChar
        Set rge = ThisWorkbook.Worksheets("Sr1Info").Range("C50").Resize(rge.Rows.Count, rge.Columns.Count)
        rge.Copy ThisWorkbook.Worksheets("Sr1Info").Range("B50")
        If sr1tbl.bNum2Class Then
            Set rge = Range(Comm_toXlA1str(sr1tbl.RgeClass))
            Set rge = rge.Range("B1").Resize(rge.Rows.Count, rge.Columns.Count - 1)
            sr1tbl.RgeClass = bkName & "Sr1Data!" & Comm_toXlRCstr(rge.Address) & vbNullChar
        End If
        flg = 1
    Else
        g_aDialog.RgeX.Copy RgeVar.Range("A1")
        RgeVar.Range("B1") = " S"
        flg = 2
    End If
    
    If RgeVar.Columns.Count = 2 Then
        If g_aDialog.rgeInp.Rows.Count - 1 < g_aDialog.dlgGs.nLmtSmp1 Then
            '2016.02.16 mdf:
            'Set RgeVar = RgeVar.Range("A1").Resize(g_aDialog.RgeX.Rows.Count, 1)
            Set RgeVar = RgeVar.Range("B1").Resize(g_aDialog.RgeX.Rows.Count, 1)
            'end mdf
        Else
            Set RgeVar = RgeVar.Range("A1").Resize(g_aDialog.RgeX.Rows.Count, 2)
        End If
        sr1tbl.RgeVar = bkName & "Sr1Data!" & Comm_toXlRCstr(RgeVar.Address) & vbNullChar
    End If
    
        'Set rge = Range(toXlA1str(sr1tbl.RgeClass))
        'rge(2, 1) = WorksheetFunction.max(RgeVar.Columns(1)) + 1
        'rge(2, 2) = WorksheetFunction.max(RgeVar.Columns(2)) + 1
        
    If flg = 1 Then
        SaveBasicInfo revisedCateNum, NewCates, 2
    End If
    
    Call changeToSSDir
    ActiveWorkbook.ActiveSheet.Select
    
    nId = IIf(isTrialVer, 0, 1)
    
    rtn = sr1_dlg(nId, sr1tbl)  'do calc
    actSht.Activate
    
    If rtn = -100 Then
        MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
        Exit Sub
    End If
    
    If rtn = 0 Then 'do output
        Sr1_Output 3, outSht, sr1tbl.bPointGrp, True, True, g_aDialog.rgeOutBgn
        outSht.Activate
        
        With ActiveWindow
            .ScrollRow = 1
        End With
        Cells(1, 1).Select
    End If
    On Error GoTo 0
End Sub

Public Sub Sr1DrawDotPlot(ByVal strRgeClass As String, ByVal strRgeData As String, _
                                    ByVal strRgeOut As String, ByVal crossAt As Double)
    Application.Run GxlaBkGraph1 & "!DrawDotPlot_A", toXlA1str(strRgeClass), toXlA1str(strRgeData), _
                                            toXlA1str(strRgeOut), crossAt
End Sub
                          
'=== EOF ===



Attribute VB_Name = "MdlTable"
Option Explicit
'Option Private Module

Public Const MAX_GNUM As Integer = 10
Public Const MAX_XNUM As Integer = 30

Public Const SHT_INF As String = "Sr2Info"
Public Const SHT_TMP As String = "TemplateTable"
Public Const SHT_RST As String = "Sr2Result"

Public Const INF_BGN As String = "A1"

Public Const TBLID_GCRS As Integer = 1
Public Const TBLID_XCRS As Integer = 2
Public Const TBLID_CRAM As Integer = 3
Public Const TBLID_CORR As Integer = 4
Public Const TBLID_EIGEN As Integer = 5
Public Const TBLID_MODEL As Integer = 6
Public Const TBLID_NUMCATE As Integer = 7
Public Const TBLID_EXTRAINFO As Integer = 8
Public Const TBLID_SMPSCORE As Integer = 9
Public Const TBLID_NTABLE As Integer = 10
Public Const TBLID_HTABLE As Integer = 11
Public Const TBLID_VTABLE As Integer = 12
Public Const TBLID_BARY As Integer = 13
Public Const TBLID_ASR As Integer = 14
Public Const TBLID_ATARI_CMB1 As Integer = 15
Public Const TBLID_ATARI_CMB2 As Integer = 16
Public Const TBLID_ATARI_CMB3 As Integer = 17
Public Const TBLID_ATARI_CMB3_ITM As Integer = 18
Public Const TBLID_ATARI_CMB3_AXIS As Integer = 19
Public Const TBLID_ATARI_CMB3_CATE As Integer = 20

#If 0 Then '11.8.20 LSQ moved out
Public Const TMPRGE_GCRS As String = "B2:O9"
Public Const TMPRGE_XCRS As String = "B11:G17"
Public Const TMPRGE_CRAM As String = "B19:E35" 'old: "B19:E32", 11.8.20 LSQ mdf
Public Const TMPRGE_CORR As String = "B34:D44"
Public Const TMPRGE_EIGEN As String = "B46:F50"
Public Const TMPRGE_MODEL As String = "B57:G63"
Public Const TMPRGE_NUMCATE As String = "B65:I69"
Public Const TMPRGE_EXTRAINFO As String = "B71:J76"
Public Const TMPRGE_SMPSCORE As String = "B78:I85"
Public Const TMPRGE_BARY As String = "B87:I91"
Public Const TMPRGE_NTABLE As String = "B95:G101"
Public Const TMPRGE_HTABLE As String = "B103:G109"
Public Const TMPRGE_VTABLE As String = "B111:G117"
Public Const TMPRGE_ASR As String = "B122:E132"
Public Const TMPRGE_ATARI_CMB1 As String = "B140:D143"
Public Const TMPRGE_ATARI_CMB2 As String = "B145:T149"
Public Const TMPRGE_ATARI_CMB3 As String = "B151:J157"  '11.8.19 LSQ mdf, old : "B151:H158"
#End If

Public Const TMP_INUM As Integer = 2 'template table's item number
Public Const TMP_CNUM As Integer = 2 'template table's category number
Public Const TMP_CNUM_ATARI As Integer = 3  '11.8.19 LSQ add; |fffd|c|fffd||fffd||fffd||fffd||fffd|r|fffd||fffd|Wrong, if use 2, when realCateNum > 2
Public Const TMP_GNUM As Integer = 3 'template table's group number
Public Const TMP_ANUM As Integer = 2 'template table's axis number

Public Const ROWNUM_CRAM As Integer = 4   '11.8.20 LSQ add

Type Category
    id As Integer
    Code As String
    Name As String
End Type

Type Sr2_Item
    id As Integer
    kind As Integer
    Name As String
    CateNum As Integer
    NumCate As Integer
    Cate() As Category
End Type

Type Sr2_Grp
    bShowGrp As Boolean
    nXAxis As Integer
    nYAxis As Integer
    bSmpName As Boolean
    bCateName As Boolean
End Type

Type BasInfo
    nFuncId As Long
    ObjVarName As String
    nGrp As Integer
    nSmpNum As Integer
    nVarSmpNum As Integer
    nItm As Integer     'total item number (category + numeric)
    nItmCat As Integer  'cate item number
    nItmNum As Integer  'numeric item number
    aryCate(1 To MAX_XNUM) As Integer
    nTotalCateNum As Integer
    items() As Sr2_Item
    bNumCate As Boolean
    bExtraInfo As Boolean
    nVarMethod As Integer
    sr2Grp As Sr2_Grp
End Type

Function ReadInfo() As BasInfo
    
    Dim info As BasInfo
    Dim rge As Range
    Dim i As Integer, j As Integer
    Dim cat As Integer
    Dim realNItm As Integer
    
    Set rge = SbkThis.Worksheets(SHT_INF).Range(INF_BGN)
    
    With info
        .nFuncId = rge.Offset(0, 2)
        .ObjVarName = rge.Offset(0, 1)
        .nGrp = rge.Offset(1, 1)
        .nSmpNum = rge.Offset(3, 1)
        .nVarSmpNum = rge.Offset(3, 2)
        .nItm = rge.Offset(6, 1)
        .bNumCate = IIf(rge.Offset(13, 1) = 1, True, False)
        .bExtraInfo = IIf(rge.Offset(12, 1) = 1, True, False)
        .nVarMethod = rge.Offset(11, 1)
        
        ReDim .items(1 To .nItm)
        realNItm = 0
        .nTotalCateNum = 0
        For i = 1 To .nItm
            cat = rge.Offset(8, i)
            .items(i).id = i
            .items(i).Name = rge.Offset(7, i)
            If cat > 0 Then
                realNItm = realNItm + 1
                .aryCate(realNItm) = cat
                .nTotalCateNum = .nTotalCateNum + cat
                .items(i).CateNum = cat
                .items(i).kind = 2
                ReDim .items(i).Cate(1 To cat)
                For j = 1 To cat
                    .items(i).Cate(j).id = j
                    .items(i).Cate(j).Name = rge.Offset(48 + j, i)
                Next j
            Else
                .nTotalCateNum = .nTotalCateNum + 1
                .items(i).CateNum = 1
                .items(i).kind = 3
                If (.bNumCate) Then
                    .items(i).NumCate = rge.Offset(17, i)
                    ReDim .items(i).Cate(1 To .items(i).NumCate)
                    For j = 1 To .items(i).NumCate
                        .items(i).Cate(j).id = j
                        .items(i).Cate(j).Code = rge.Offset(17 + j, i)
                        .items(i).Cate(j).Name = rge.Offset(48 + j, i)
                    Next j
                Else
                    .items(i).NumCate = 1
                    ReDim .items(i).Cate(1 To 1)
                    .items(i).Cate(1).id = 1
                    .items(i).Cate(1).Code = 1
                    .items(i).Cate(1).Name = rge.Offset(49, i)
                End If
            End If
        Next i
        
        .nItmCat = realNItm
        .nItmNum = .nItm - .nItmCat
    End With
    
    ReadInfo = info
    
End Function

Sub Test()
    
    Dim dataInfo As BasInfo
    Dim rge As Range
    
    dataInfo = ReadInfo()
    
    Set rge = Worksheets("Out").Range("A1:Z100")
    rge.Clear
    
    Set rge = MakeGCRS(Worksheets("Out").Range("C3"), dataInfo)
    Set rge = MakeXCRS(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
    Set rge = MakeCRAM(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
    Set rge = MakeCORR(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
    
    rge.Worksheet.Activate
    
End Sub

Sub Sr2_Output(ByVal oSheet As Worksheet, _
               ByVal bShowGrp As Boolean, ByVal nXAxis As Integer, ByVal nYAxis As Integer, ByVal bSmpName As Boolean, ByVal bCateName As Boolean)
    
    Dim dataInfo As BasInfo
    Dim rge As Range, grpRge As Range, bgnCel As Range
    
    dataInfo = ReadInfo()
    
    dataInfo.sr2Grp.bShowGrp = bShowGrp
    dataInfo.sr2Grp.nXAxis = nXAxis
    dataInfo.sr2Grp.nYAxis = nYAxis
    dataInfo.sr2Grp.bSmpName = bSmpName
    dataInfo.sr2Grp.bCateName = bCateName
    
    Set bgnCel = oSheet.Range("B1") 'begin output position
    Set rge = bgnCel
    
    If dataInfo.nItmCat > 0 Then
        Set rge = MakeGCRS(rge, dataInfo)
        Set rge = MakeXCRS(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        Set rge = MakeCRAM(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        Set rge = rge.Offset(rge.Rows.Count + 1, 0)
    End If
    If dataInfo.nItmNum > 0 Then
        Set rge = MakeCORR(rge.Range("A1"), dataInfo)
    Else
        Set rge = rge.Range("A1")
    End If
    If dataInfo.nVarMethod = 2 Then
        Set rge = MakeEIGEN(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        Set rge = MakeMODEL(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        If dataInfo.bNumCate Then
            Set rge = MakeNumCate(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        End If
        If dataInfo.bExtraInfo Then
            Set rge = MakeExtraInfo(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        End If
        Set grpRge = rge
        Set rge = MakeSmpScore(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        Set rge = MakeBARY(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        If dataInfo.sr2Grp.bShowGrp Then
            If dataInfo.nGrp > 2 Then
                DrawSr2TenGrp grpRge.Offset(grpRge.Rows.Count + 4, dataInfo.nGrp * 2 + 4), dataInfo
            'ElseIf dataInfo.nGrp = 2 Then
            '    DrawSr2DotPlot grpRge.Offset(grpRge.Rows.Count + 4, dataInfo.nGrp * 2 + 4), dataInfo
            End If
        End If
        Set rge = MakeNTABLE(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        Set rge = MakeHTABLE(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        Set rge = MakeVTABLE(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        Set rge = MakeASR(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
    Else
        Set rge = MakeATARICMB1(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        Set rge = MakeATARICMB2(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        Set rge = MakeATARICMB3(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
    
    End If
    rge.Worksheet.Activate
    
    With ActiveWindow
        .ScrollRow = bgnCel.Row
        .DisplayGridlines = False
    End With
    bgnCel.Select
    
End Sub

'
'|fffd|Q|fffd||28f|W|fffd|v|fffd|\
'
Function MakeGCRS(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, l As Integer
    Dim rge As Range
    
    If dataInfo.nItmCat < 1 Then
        Set MakeGCRS = outBgn
        Exit Function
    End If
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_GCRS)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_GCRS, rge, dataInfo.nItmCat)
    Set rge = AdjustTableByCat(TBLID_GCRS, rge, dataInfo.aryCate, dataInfo.nItmCat)
    Set rge = AdjustTableByGrp(TBLID_GCRS, rge, dataInfo.nGrp)
        
    l = 5
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            rge(l, 1) = dataInfo.items(i).Name
            For j = 1 To dataInfo.items(i).CateNum
                rge(l, 2) = dataInfo.items(i).Cate(j).Name
                l = l + 1
            Next j
        End If
    Next i
    
    For i = 1 To dataInfo.nGrp
        rge(3, i + 3) = "|fffd|Q" & i
        rge(3, i + 4 + dataInfo.nGrp) = "|fffd|Q" & i
        rge(3, i + 5 + 2 * dataInfo.nGrp) = "|fffd|Q" & i
    Next i
    
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|Q|fffd||28f|W|fffd|v|fffd|\")
    rge(2, 1).Resize(l - 5 + 1, dataInfo.nGrp + 1).Copy
    outBgn(4, 3).PasteSpecial xlPasteValues
    
    For i = 1 To l - 5 + 1
        outBgn(i + 3, 3 + dataInfo.nGrp + 1) = 1
        For j = 1 To dataInfo.nGrp
            outBgn(i + 3, 3 + dataInfo.nGrp + 1 + j) = outBgn(i + 3, 3 + j) / outBgn(i + 3, 3)
        Next j
        For j = 1 To dataInfo.nGrp + 1
            outBgn(i + 3, 3 + 2 * (dataInfo.nGrp + 1) + j - 1) = outBgn(i + 3, 3 + j - 1) / outBgn(4, 3 + j - 1)
        Next j
    Next i
    
    Application.CutCopyMode = False
    
    Set MakeGCRS = outBgn
    
End Function
'
'|fffd|N|fffd||fffd||fffd|X|fffd|W|fffd|v|fffd|\
'
Function MakeXCRS(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    Dim rge As Range
    
    If dataInfo.nItmCat < 1 Then
        Set MakeXCRS = outBgn
        Exit Function
    End If
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_XCRS)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_XCRS, rge, dataInfo.nItmCat)
    Set rge = AdjustTableByCat(TBLID_XCRS, rge, dataInfo.aryCate, dataInfo.nItmCat)
    
    Application.CutCopyMode = False
    
    l = 4
    k = 3
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            rge(l, 1) = dataInfo.items(i).Name
            rge(2, k) = dataInfo.items(i).Name
            For j = 1 To dataInfo.items(i).CateNum
                rge(l, 2) = dataInfo.items(i).Cate(j).Name
                rge(3, k) = dataInfo.items(i).Cate(j).Name
                l = l + 1
                k = k + 1
            Next j
        End If
    Next i
    
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|N|fffd||fffd||fffd|X|fffd|W|fffd|v|fffd|\")
    rge(2, 1).Resize(l - 5 + 1, l - 5 + 1).Copy
    outBgn(4, 3).PasteSpecial xlPasteValues
    
    Set MakeXCRS = outBgn
    
End Function
'
'|fffd|N|fffd||fffd||fffd||fffd||fffd|[|fffd||fffd||fffd||318|A|fffd||58c|W|fffd||fffd|
'11.8.20 LSQ mdf : add "|fffd|J|fffd|C|fffd||fffd||fffd||fffd|l"
Function MakeCRAM(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, k As Integer, l As Integer, ct As Integer
    Dim rge As Range
    
    If dataInfo.nItmCat < 1 Then
        Set MakeCRAM = outBgn
        Exit Function
    End If
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_CRAM)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_CRAM, rge, dataInfo.nItmCat + 1)
    
    Application.CutCopyMode = False
    
    rge(2, 1) = "|fffd||fffd||fffd||fffd| " & dataInfo.nSmpNum
    l = ROWNUM_CRAM + 6
    k = 2
    
    '|fffd||693|I|fffd||3d0||fffd|
    rge(l, 1) = dataInfo.ObjVarName
    rge(ROWNUM_CRAM + 5, k) = dataInfo.ObjVarName
    l = l + ROWNUM_CRAM
    k = k + 1
    
    ct = 0
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            rge(l, 1) = dataInfo.items(i).Name
            rge(ROWNUM_CRAM + 5, k) = dataInfo.items(i).Name
            
            ct = ct + 1
            l = l + ROWNUM_CRAM
            k = k + 1
        End If
    Next i
    ct = ct + 1
    
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|N|fffd||fffd||fffd||fffd||fffd|[|fffd||fffd||fffd||318|A|fffd||58c|W|fffd||fffd|")
    rge(2, 1).Resize(ct * ROWNUM_CRAM, ct).Copy
    outBgn(ROWNUM_CRAM + 6, 2).PasteSpecial xlPasteValues

    Set MakeCRAM = outBgn
    
End Function
'
'|fffd||fffd||fffd||594||fffd|
'
Function MakeCORR(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    Dim rge As Range
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_CORR)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_CORR, rge, dataInfo.nItmNum)
    
    Application.CutCopyMode = False
    
    rge(2, 1) = "|fffd||fffd||fffd||fffd| " & dataInfo.nSmpNum
    l = 8
    k = 2
    rge(9, 1) = dataInfo.ObjVarName
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 3 Then
            rge(8, k) = dataInfo.items(i).Name
            k = k + 1
        End If
    Next i
    
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||fffd||fffd||594||fffd|")
    rge(2, 1).Resize(3, k - 2).Copy
    outBgn(9, 2).PasteSpecial xlPasteValues
    
    Set MakeCORR = outBgn
    
End Function

Function MakeEIGEN(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    Dim rge As Range
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_EIGEN)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    l = 0
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            l = l + dataInfo.items(i).CateNum - 1
        Else
            l = l + 1
        End If
    Next i
    Set rge = AdjustTableByItm(TBLID_EIGEN, rge, l)
    Set rge = AdjustTableByGrp(TBLID_EIGEN, rge, dataInfo.nGrp)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    For i = 1 To dataInfo.nGrp - 1
        outBgn(2, 2 + i) = "|fffd||fffd|" & i
    Next i
    For i = 1 To l - 1
        outBgn(4 + i, 1) = ""
    Next i
    l = 1
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            For j = 1 To dataInfo.items(i).CateNum - 1
                outBgn(3 + l, 2) = dataInfo.items(i).Name & "-" & dataInfo.items(i).Cate(j).Name
                l = l + 1
            Next j
        ElseIf dataInfo.items(i).kind = 3 Then
            outBgn(3 + l, 2) = dataInfo.items(i).Name       ' & "-" & dataInfo.items(i).Cate(1).Name
            l = l + 1
        End If
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||157|L|fffd|x|fffd|N|fffd|g|fffd||fffd|")
    rge(3, 2).Resize(l, dataInfo.nGrp - 1).Copy
    outBgn(3, 3).PasteSpecial xlPasteValues
    
    Set MakeEIGEN = outBgn
    
End Function

Function MakeMODEL(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    Dim rge As Range
    Dim aryCate(1 To MAX_XNUM) As Integer
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_MODEL)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_MODEL, rge, dataInfo.nItm)
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            aryCate(i) = dataInfo.items(i).CateNum
        ElseIf dataInfo.items(i).kind = 3 Then
            If dataInfo.bNumCate Then
                aryCate(i) = dataInfo.items(i).NumCate
            Else
                aryCate(i) = 1
            End If
        End If
    Next i
    Set rge = AdjustTableByCat(TBLID_MODEL, rge, aryCate, dataInfo.nItm)
    Set rge = AdjustTableByGrp(TBLID_MODEL, rge, dataInfo.nGrp - 1)
    
    Application.CutCopyMode = False
    
    rge(2, 4) = "|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd|X|fffd|R|fffd|A"
    For i = 1 To dataInfo.nGrp - 1
        rge(3, 3 + i) = i & "|fffd||fffd|"
    Next i
    
    l = 4
    For i = 1 To dataInfo.nItm
        rge(l, 1) = dataInfo.items(i).Name
        If dataInfo.items(i).kind = 2 Then
            For j = 1 To dataInfo.items(i).CateNum
                rge(l, 2) = dataInfo.items(i).Cate(j).Name
                l = l + 1
            Next j
        Else
            For j = 1 To dataInfo.items(i).NumCate
                rge(l, 2) = dataInfo.items(i).Cate(j).Name
                l = l + 1
            Next j
        End If
        'l = l + IIf(dataInfo.items(i).kind = 2, dataInfo.items(i).CateNum, dataInfo.items(i).NumCate)
    Next i
    
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||fffd||fffd|f|fffd||fffd||fffd||fffd|")
    rge(3, 1).Resize(l - 4, dataInfo.nGrp).Copy
    outBgn(4, 3).PasteSpecial xlPasteValues

    DrawSr2CateScore outBgn(2, dataInfo.nGrp + 5), outBgn(3, 1).Resize(l - 3, dataInfo.nGrp + 2), dataInfo
    
    If outBgn.Rows.Count < 17 Then
        Set outBgn = outBgn(1, 1).Resize(17, outBgn.Columns.Count)
    End If
    
    Set MakeMODEL = outBgn
    
End Function

Function MakeNumCate(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    Dim rge As Range, rtnRge As Range
    
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 3 Then
            Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_NUMCATE)
            rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
            
            Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
            Set rge = AdjustTableByItm(TBLID_NUMCATE, rge, dataInfo.items(i).NumCate)
            Set rge = AdjustTableByGrp(TBLID_NUMCATE, rge, dataInfo.nGrp - 1)
            Set outBgn = rge
            'If rtnRge Is Nothing Then Set rtnRge = outBgn
            outBgn(1, 1) = dataInfo.items(i).Name & "|fffd||303|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd|X|fffd|R|fffd|A"
            For j = 1 To dataInfo.nGrp - 1
                outBgn(2, 5 + j) = "|fffd||fffd|" & j
            Next j
            Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
            Set rge = rge.Find("NumCateScore" & i)
            rge(2, 1).Resize(dataInfo.items(i).NumCate + 1, dataInfo.nGrp + 4).Copy
            outBgn(3, 1).PasteSpecial xlPasteValues
            Set outBgn = outBgn(3 + dataInfo.items(i).NumCate + 2, 1)
            
            Application.CutCopyMode = False
            
        End If
    Next i
    Set MakeNumCate = outBgn.Offset(-1, 0)
End Function

Function MakeExtraInfo(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    Dim rge As Range
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_EXTRAINFO)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_EXTRAINFO, rge, dataInfo.nItm)
    Set rge = AdjustTableByGrp(TBLID_EXTRAINFO, rge, dataInfo.nGrp)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    For j = 1 To dataInfo.nGrp - 1
        outBgn(3, 2 + j) = "|fffd||fffd||fffd||594||43b2|" & j
    Next j
    For i = 1 To dataInfo.nItm
        outBgn(4 + i, 1) = dataInfo.items(i).Name
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||1c9||fffd||fffd||fffd||fffd||30c||fffd||fffd||fffd|")
    rge(3, 1).Resize(dataInfo.nItm + 1, 8).Copy
    outBgn(4, 2).PasteSpecial xlPasteValues

    Application.CutCopyMode = False
    
    Set MakeExtraInfo = outBgn
End Function

Function MakeSmpScore(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, k As Integer, l As Integer
    Dim rge As Range
    Dim ctNew(1) As Integer
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SMPSCORE)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    'Set rge = AdjustTableByItm(TBLID_SMPSCORE, rge, dataInfo.nVarSmpNum)
    ctNew(1) = dataInfo.nVarSmpNum
    Set rge = AdjustTableByCat(TBLID_SMPSCORE, rge, ctNew, 1)
    Set rge = AdjustTableByGrp(TBLID_SMPSCORE, rge, dataInfo.nGrp)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    For j = 1 To dataInfo.nGrp
        If dataInfo.nGrp > 2 Then
            If j < dataInfo.nGrp Then
                outBgn(4, 1 + j) = j & "|fffd||fffd|"
            End If
        ElseIf dataInfo.nGrp = 2 Then
            outBgn(4, 2) = "|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A"
        End If
        outBgn(4, dataInfo.nGrp + j) = "|fffd|Q" & j & "|fffd||30b||fffd||fffd||fffd|"
    Next j
    For i = 1 To dataInfo.nVarSmpNum
        outBgn(4 + i, 1) = SbkThis.Sheets("Sr2Data").Cells(i + 1, 1)
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|\")
    rge(3, 2).Resize(dataInfo.nVarSmpNum + 2, 2 * dataInfo.nGrp + 1).Copy
    outBgn(5, 2).PasteSpecial xlPasteValues

    Application.CutCopyMode = False
    
    Set MakeSmpScore = outBgn
End Function

Function MakeBARY(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, l As Integer
    Dim rge As Range, outRge As Range

    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_BARY)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)

    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByGrp(TBLID_BARY, rge, dataInfo.nGrp)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    For i = 1 To dataInfo.nGrp
        If i < dataInfo.nGrp Then
            outBgn(2, i + 1) = i & "|fffd||fffd|"
        End If
        outBgn(2 + i, 1) = "|fffd|Q" & i
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|d|fffd|S|fffd||fffd||fffd|W")
    rge(3, 2).Resize(dataInfo.nGrp, dataInfo.nGrp - 1).Copy
    outBgn(3, 2).PasteSpecial xlPasteValues
    
    Application.CutCopyMode = False
    
    Set MakeBARY = outBgn
End Function

Function MakeNTABLE(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, l As Integer
    Dim rge As Range
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_NTABLE)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByGrp(TBLID_NTABLE, rge, dataInfo.nGrp)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    For j = 1 To dataInfo.nGrp
        outBgn(3, 3 + j) = j
        outBgn(4 + j, 2) = j
    Next j
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("n|fffd|\")
    rge(4, 3).Resize(dataInfo.nGrp + 1, dataInfo.nGrp + 1).Copy
    outBgn(4, 3).PasteSpecial xlPasteValues

    Application.CutCopyMode = False
    
    Set MakeNTABLE = outBgn
End Function

Function MakeHTABLE(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, l As Integer
    Dim rge As Range
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_HTABLE)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByGrp(TBLID_HTABLE, rge, dataInfo.nGrp)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    For j = 1 To dataInfo.nGrp
        outBgn(3, 3 + j) = j
        outBgn(4 + j, 2) = j
    Next j
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("n|fffd|\")
    rge(4, 3).Resize(dataInfo.nGrp + 1, dataInfo.nGrp + 1).Copy
    outBgn(4, 3).PasteSpecial xlPasteValues
    
    Application.CutCopyMode = False
    
    For i = 1 To dataInfo.nGrp + 1
        For j = 1 To dataInfo.nGrp
            If outBgn(3 + i, 3) > 0 Then
                outBgn(3 + i, 3 + j) = 100 * outBgn(3 + i, 3 + j) / outBgn(3 + i, 3)
            Else
                outBgn(3 + i, 3 + j) = "-"
            End If
        Next j
        If outBgn(3 + i, 3) > 0 Then
            outBgn(3 + i, 3) = 100
        Else
            outBgn(3 + i, 3) = "-"
        End If
    Next i
    Set MakeHTABLE = outBgn
End Function

Function MakeVTABLE(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, l As Integer
    Dim rge As Range
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_VTABLE)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByGrp(TBLID_VTABLE, rge, dataInfo.nGrp)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    For j = 1 To dataInfo.nGrp
        outBgn(3, 3 + j) = j
        outBgn(4 + j, 2) = j
    Next j
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("n|fffd|\")
    rge(4, 3).Resize(dataInfo.nGrp + 1, dataInfo.nGrp + 1).Copy
    outBgn(4, 3).PasteSpecial xlPasteValues
    
    Application.CutCopyMode = False
    
    For i = 1 To dataInfo.nGrp
        For j = 1 To dataInfo.nGrp + 1
            If outBgn(4, 2 + j) > 0 Then
                outBgn(4 + i, 2 + j) = 100 * outBgn(4 + i, 2 + j) / outBgn(4, 2 + j)
            Else
                outBgn(4 + i, 2 + j) = "-"
            End If
        Next j
    Next i
    For i = 1 To dataInfo.nGrp + 1
        If outBgn(4, 2 + i) > 0 Then
            outBgn(4, 2 + i) = 100
        Else
            outBgn(4, 2 + i) = "-"
        End If
    Next i
    Set MakeVTABLE = outBgn
End Function

Function MakeASR(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, l As Integer
    Dim rge As Range, outRge As Range
    
    For i = 1 To dataInfo.nGrp - 1
        Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_ASR)
        rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)

        Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
        Set rge = AdjustTableByGrp(TBLID_ASR, rge, dataInfo.nGrp)
        
        Application.CutCopyMode = False
    
        Set outRge = rge
        If i = 1 Then Set MakeASR = outRge
        outRge(1, 1) = i & "|fffd||fffd|"
        For j = 1 To dataInfo.nGrp
            outRge(3 + j, 1) = "|fffd|Q" & j
        Next j
        Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
        Set rge = rge.Find("ASR" & i)
        rge(4, 2).Resize(dataInfo.nGrp + 5, 3).Copy
        outRge(4, 2).PasteSpecial xlPasteValues
        
        Application.CutCopyMode = False
    
        Set outBgn = outBgn(1, 6)
    Next i
    'Set MakeASR = outBgn
End Function

Function MakeATARICMB1(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, l As Integer
    Dim rge As Range
    Dim ctNew(1) As Variant

    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_ATARI_CMB1)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    ctNew(1) = dataInfo.nItm
    Set rge = AdjustTableByCat(TBLID_ATARI_CMB1, rge, ctNew, 1)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    outBgn(2, 2) = dataInfo.ObjVarName
    outBgn(2, 3) = dataInfo.nGrp
    For i = 1 To dataInfo.nItm
        outBgn(2 + i, 1) = "|fffd|A|fffd|C|fffd|e|fffd||fffd|" & i
        outBgn(2 + i, 2) = dataInfo.items(i).Name
        outBgn(2 + i, 3) = IIf(dataInfo.items(i).kind = 2, dataInfo.items(i).CateNum, 0)
    Next i
    Set MakeATARICMB1 = outBgn
End Function

Function MakeATARICMB2(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, l As Integer
    Dim rge As Range
    Dim ctNew(1) As Variant

    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_ATARI_CMB2)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    ctNew(1) = WorksheetFunction.Power(2, dataInfo.nItm) - 1
    Set rge = AdjustTableByCat(TBLID_ATARI_CMB2, rge, ctNew, 1)
    Set rge = AdjustTableByGrp(TBLID_ATARI_CMB2, rge, dataInfo.nGrp)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    For i = 1 To dataInfo.nGrp - 1
        outBgn(2, i + 3) = "|fffd||fffd||fffd||594||fffd|" & i
        outBgn(2, i + dataInfo.nGrp + 8) = "|fffd||fffd||fffd||594||fffd|" & i
        outBgn(3, i + 3) = "|fffd||fffd|2_" & i
        outBgn(3, i + dataInfo.nGrp + 8) = "|fffd||fffd|2_" & i
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||fffd||fffd|v|fffd||fffd|-ATARI")
    rge(3, 1).Resize(ctNew(1), dataInfo.nGrp + 8).Copy
    outBgn(4, 1).PasteSpecial xlPasteValues
    
    Application.CutCopyMode = False
    
    For i = 1 To ctNew(1)
        For j = 1 To dataInfo.nGrp + 5
            outBgn(3 + i, j + dataInfo.nGrp + 8) = WorksheetFunction.Rank(outBgn(3 + i, 3 + j), outBgn(4, 3 + j).Resize(ctNew(1), 1), IIf(j < dataInfo.nGrp, 0, 1))
        Next j
    Next i
    Set MakeATARICMB2 = outBgn
End Function

Function MakeATARICMB3(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Integer, j As Integer, l As Integer
    Dim rge As Range
    Dim ctNew() As Variant

    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_ATARI_CMB3)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    l = WorksheetFunction.Power(2, dataInfo.nItm) - 1
    Set rge = AdjustTableByItm(TBLID_ATARI_CMB3, rge, l)
    Set rge = AdjustTableByItm(TBLID_ATARI_CMB3_ITM, rge, dataInfo.nItm)
    ReDim ctNew(1 To l)
    For i = 1 To l
        ctNew(i) = dataInfo.nGrp - 1
    Next i
    Set rge = AdjustTableByCat(TBLID_ATARI_CMB3, rge, ctNew, l)
    ReDim ctNew(1 To dataInfo.nItm)
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            ctNew(i) = dataInfo.items(i).CateNum
        ElseIf dataInfo.items(i).kind = 3 Then
            If dataInfo.bNumCate Then
                ctNew(i) = dataInfo.items(i).NumCate
            Else
                ctNew(i) = 1
            End If
        End If
    Next i
    Set rge = AdjustTableByCat(TBLID_ATARI_CMB3_CATE, rge, ctNew, dataInfo.nItm)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    l = 4
    For i = 1 To dataInfo.nItm
        outBgn(2, l) = dataInfo.items(i).Name
        If dataInfo.items(i).kind = 2 Then
            For j = 1 To dataInfo.items(i).CateNum
                outBgn(3, l) = dataInfo.items(i).Cate(j).Name
                l = l + 1
            Next j
        Else
            If dataInfo.bNumCate Then
                For j = 1 To dataInfo.items(i).NumCate
                    outBgn(3, l) = dataInfo.items(i).Cate(j).Name
                    l = l + 1
                Next j
            Else
                outBgn(3, l) = dataInfo.items(i).Cate(1).Name
                l = l + 1
            End If
        End If
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd|X|fffd|R|fffd|A-ATARI")
    l = WorksheetFunction.Power(2, dataInfo.nItm) - 1
    rge(3, 1).Resize(l * (dataInfo.nGrp - 1), 100).Copy
    outBgn(4, 1).PasteSpecial xlPasteValues
    
    Application.CutCopyMode = False
    
    Set MakeATARICMB3 = outBgn
End Function

Sub DrawSr2TenGrp(ByVal oRge As Range, dataInfo As BasInfo)
    Dim i As Integer
    Dim xAxis As Integer, yAxis As Integer, SmpName As Integer
    Dim rge As Range, clsRge As Range
    Dim bPredict As Boolean
    
    bPredict = IIf(dataInfo.nSmpNum < dataInfo.nVarSmpNum, True, False)
    xAxis = dataInfo.sr2Grp.nXAxis
    yAxis = dataInfo.sr2Grp.nYAxis
    SmpName = IIf(dataInfo.sr2Grp.bSmpName, 1, 0)
    SbkThis.Sheets("Sr2Data").Range("A2").Resize(dataInfo.nVarSmpNum, 1).Copy
    oRge.Worksheet.Activate
    oRge(2, 1).PasteSpecial xlPasteValues
    For i = 1 To dataInfo.nGrp
        oRge(i + dataInfo.nVarSmpNum + 1, 1) = "|fffd|Q" & i
    Next i
    oRge(1, 2) = xAxis & "|fffd||fffd|"
    oRge(1, 3) = yAxis & "|fffd||fffd|"
    oRge(1, 4) = "|fffd|Q"
    Set oRge = oRge.Offset(1, 0)
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|\")
    rge(3, 1 + xAxis).Resize(dataInfo.nVarSmpNum, 1).Copy
    oRge(1, 2).PasteSpecial xlPasteValues
    rge(3, 1 + yAxis).Resize(dataInfo.nVarSmpNum, 1).Copy
    oRge(1, 3).PasteSpecial xlPasteValues
    rge(3, 2 + 2 * dataInfo.nGrp - 1).Resize(dataInfo.nVarSmpNum, 1).Copy
    oRge(1, 4).PasteSpecial xlPasteValues
    For i = 1 To dataInfo.nVarSmpNum
        If Not IsNumeric(oRge(i, 4)) Then
            oRge(i, 4) = dataInfo.nGrp + 1
        End If
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|d|fffd|S|fffd||fffd||fffd|W")
    rge(3, 1 + xAxis).Resize(dataInfo.nGrp, 1).Copy
    oRge(dataInfo.nVarSmpNum + 1, 2).PasteSpecial xlPasteValues
    rge(3, 1 + yAxis).Resize(dataInfo.nGrp, 1).Copy
    oRge(dataInfo.nVarSmpNum + 1, 3).PasteSpecial xlPasteValues
    
    Application.CutCopyMode = False
    
    For i = 1 To dataInfo.nGrp
        oRge(dataInfo.nVarSmpNum + i, 4) = dataInfo.nGrp + IIf(bPredict, 2, 1)
    Next i
    Application.Run "Sr2Graph.xla!drawTenGrp", Comm_toXlRCstr(oRge(0, 3).Resize(dataInfo.nVarSmpNum + 1 + dataInfo.nGrp, 1).Address), _
                    Comm_toXlRCstr(oRge(0, 2).Resize(dataInfo.nVarSmpNum + 1 + dataInfo.nGrp, 1).Address), _
                    Comm_toXlRCstr(oRge(0, 4).Resize(dataInfo.nVarSmpNum + 1 + dataInfo.nGrp, 1).Address), _
                    Comm_toXlRCstr(oRge(0, 1).Address), _
                    Comm_toXlRCstr(oRge(1, 1).Resize(dataInfo.nVarSmpNum + 1 + dataInfo.nGrp, 1).Address), _
                    "Marker=0&Width=9&Height=25&HasLegend=1&SmpName=" & SmpName & "&ChartTitle=|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|_|fffd|O|fffd||fffd||fffd|t"
    If bPredict Then
        oRge(1, dataInfo.nGrp + 3) = "|fffd|\|fffd||fffd|"
        oRge(1, dataInfo.nGrp + 4) = "|fffd|d|fffd|S|fffd||fffd||fffd|W"
    Else
        oRge(1, dataInfo.nGrp + 3) = "|fffd|d|fffd|S|fffd||fffd||fffd|W"
    End If
End Sub

Sub DrawSr2DotPlot(ByVal oRge As Range, dataInfo As BasInfo)
    Dim i As Integer
    Dim xAxis As Integer, yAxis As Integer, SmpName As Integer
    Dim rge As Range, clsRge As Range
    Dim bPredict As Boolean
    
    Application.Run "Sr2Graph.xla!drawDotPlot_A", _
                    (oRge(1, -2).Resize(dataInfo.nVarSmpNum + 1, 1).Address), _
                    (oRge(1, -6).Resize(dataInfo.nVarSmpNum + 1, 1).Address), _
                    (oRge(0, 0).Address), 0
End Sub

Sub DrawSr2CateScore(ByVal oRge As Range, ByVal dataRge As Range, dataInfo As BasInfo)
    Dim i As Integer
    Dim tmpstr As String
    Dim xAxis As Integer, yAxis As Integer, NameDisp As Integer
    Dim tmpRge As Range
    xAxis = dataInfo.sr2Grp.nXAxis
    yAxis = dataInfo.sr2Grp.nYAxis
    NameDisp = IIf(dataInfo.sr2Grp.bCateName, 1, 0)
    tmpstr = vbNullString
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            tmpstr = tmpstr & "," & dataInfo.items(i).CateNum
        Else
            If dataInfo.bNumCate Then
                tmpstr = tmpstr & "," & dataInfo.items(i).NumCate
            Else
                tmpstr = tmpstr & "," & 1
            End If
        End If
    Next i
    tmpstr = Mid(tmpstr, 2)
    Set tmpRge = dataRge(1, 2).Resize(dataRge.Rows.Count, dataRge.Columns.Count - 1)
    For i = 1 To dataInfo.nGrp - 1
        Application.Run "Sr2Graph.xla!DrawSr2CateScore1", oRge.Worksheet.Name, _
                        Comm_toXlRCstr(oRge.Address), _
                        Comm_toXlRCstr(tmpRge.Columns(2 + i).Address), _
                        "XRge=" & Comm_toXlRCstr(tmpRge.Columns(1).Address) & _
                        "&AxesNo=" & i & "&Rows=16&Cols=8&Cates=" & tmpstr & "&GrpType=2"
        Set oRge = oRge.Offset(0, 9)
    Next i
    If dataInfo.nGrp > 2 Then
        tmpRge(1, 2 + xAxis).Resize(tmpRge.Rows.Count, 1).Copy oRge
        tmpRge(1, 2 + yAxis).Resize(tmpRge.Rows.Count, 1).Copy oRge(1, 2)
        Application.Run "Sr2Graph.xla!DrawSr2CateScore2", oRge.Worksheet.Name, _
                    Comm_toXlRCstr(oRge.Address), _
                    Comm_toXlRCstr(oRge.Resize(dataRge.Rows.Count, 2).Address), _
                    "NameRange=" & Comm_toXlRCstr(dataRge.Columns(1).Address) & _
                    "&Cor=0.000&NameDisp=" & NameDisp & "&AxisXName=" & xAxis & " Axis&AxisYName=" & yAxis & " Axis&Rows=17&Cols=8&GrpType=2"
    End If
End Sub

Function AdjustTableByItm(tblId As Integer, ByVal tblRge As Range, xNew As Integer) As Range
    
    Dim rowCnt As Integer, colCnt As Integer, rowCntNew As Integer, colCntNew As Integer
    Dim dx As Integer, cnt As Integer
    Dim tmpRge As Range
    Dim height As Integer, tmpi As Integer
    
    rowCnt = tblRge.Rows.Count
    colCnt = tblRge.Columns.Count
    dx = xNew - TMP_INUM
    
    Select Case tblId
    
        Case TBLID_GCRS
            
            height = TMP_CNUM
            
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 1).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tblRge.Rows(rowCntNew + 1).Resize(Abs(cnt), colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_XCRS
            
            height = TMP_CNUM
            
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt + cnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 1).Resize(height, colCnt), dx)
                Call doInsRowCol(False, tblRge.Columns(colCnt - 1).Resize(rowCntNew, height), dx)
            ElseIf dx < 0 Then
                tblRge.Rows(rowCntNew + 1).Resize(Abs(cnt), colCnt).Delete Shift:=xlUp
                tblRge.Columns(colCntNew + 1).Resize(rowCntNew, Abs(cnt)).Delete Shift:=xlToLeft
            End If
            
        Case TBLID_CRAM
            
            height = ROWNUM_CRAM 'old: 3, 11.8.20 LSQ mdf
            
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = IIf(dx > 0, xNew + 1, 4)
            
            'table without legend
            tmpi = ROWNUM_CRAM + 4
            rowCnt = rowCnt - tmpi
            colCnt = colCnt - 1
            
            Set tmpRge = tblRge.Offset(tmpi, 0).Resize(rowCnt, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(True, tmpRge.Rows(rowCnt - ROWNUM_CRAM + 1).Resize(height, colCnt), dx)
                Call doInsRowCol(False, tmpRge.Resize(rowCnt + cnt, colCnt).Columns(colCnt - 1), dx)
            ElseIf dx < 0 Then
                tmpRge.Rows(2).Resize(height, colCnt).Delete Shift:=xlUp
                tmpRge.Columns(2).Resize(rowCnt, 1).Delete Shift:=xlToLeft
            End If
            
        Case TBLID_CORR
            
            rowCntNew = rowCnt
            colCntNew = colCnt + dx
            
            Set tmpRge = tblRge.Offset(7, 0).Resize(rowCnt - 7, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(False, tmpRge.Columns(2), dx)
            ElseIf dx < 0 Then
                tmpRge.Columns(2).Delete Shift:=xlToLeft
            End If
            
        Case TBLID_EIGEN
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            Set tmpRge = tblRge.Offset(0, 0).Resize(rowCnt, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(True, tmpRge.Rows(rowCnt - 1).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tmpRge.Rows(2).Resize(height, colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_MODEL
            
            height = TMP_CNUM
            
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            
            Set tmpRge = tblRge.Offset(0, 0).Resize(rowCnt, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(True, tmpRge.Rows(rowCnt - 2).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tmpRge.Rows(2).Resize(height, colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_NUMCATE
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            Set tmpRge = tblRge.Offset(0, 0).Resize(rowCnt, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(True, tmpRge.Rows(rowCnt - 1).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tmpRge.Rows(2).Resize(height, colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_EXTRAINFO
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            Set tmpRge = tblRge.Offset(0, 0).Resize(rowCnt, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(True, tmpRge.Rows(rowCnt - 1).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tmpRge.Rows(2).Resize(height, colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_SMPSCORE
            #If 0 Then
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            Set tmpRge = tblRge.Offset(0, 0).Resize(rowCnt, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(True, tmpRge.Rows(rowCnt - 3).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tmpRge.Rows(5).Resize(height, colCnt).Delete Shift:=xlUp
            End If
            #Else
                
            #End If
            
        Case TBLID_ATARI_CMB3
            
            height = TMP_CNUM
            
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 3).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tblRge.Rows(rowCntNew + 1).Resize(Abs(cnt), colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_ATARI_CMB3_ITM
            
            height = TMP_CNUM_ATARI 'TMP_CNUM
            
            cnt = height * dx
            rowCntNew = rowCnt
            colCntNew = colCnt + cnt
            
            If dx > 0 Then
                Call doInsRowCol(False, tblRge.Columns(colCnt - TMP_CNUM_ATARI + 1).Resize(rowCntNew, height), dx)
            ElseIf dx < 0 Then
                tblRge.Columns(colCntNew + 1).Resize(rowCntNew, Abs(cnt)).Delete Shift:=xlToLeft
            End If
            
        Case Else
            
            rowCntNew = rowCnt
            colCntNew = colCnt
            
    End Select
    
    Set AdjustTableByItm = tblRge.Resize(rowCntNew, colCntNew)
    
End Function

Function AdjustTableByCat(tblId As Integer, ByVal tblRge As Range, ctNew As Variant, cnt As Integer) As Range
    
    Dim rowCnt As Integer, colCnt As Integer, rowCntNew As Integer, colCntNew As Integer
    Dim vPos() As Integer, vChg() As Integer
    Dim chg As Integer
    Dim change As Integer
    Dim i As Integer
    
    rowCnt = tblRge.Rows.Count
    colCnt = tblRge.Columns.Count
    ReDim vPos(1 To cnt)
    ReDim vChg(1 To cnt)
    
    Select Case tblId
    
        Case TBLID_GCRS
            
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 6, 5) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_XCRS
                        
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 4, 3) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt + change
            
            Set tblRge = tblRge.Offset(1, 0).Resize(rowCnt - 1, colCnt)
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            Set tblRge = tblRge.Resize(rowCntNew - 1, colCnt)
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            Set tblRge = tblRge.Offset(-1, 0)
            
        Case TBLID_MODEL
            
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 5, 4) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_SMPSCORE
            
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 6, 5) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_ATARI_CMB1
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 4, 3) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_ATARI_CMB2
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 5, 4) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_ATARI_CMB3
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 5, 4) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_ATARI_CMB3_CATE
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM_ATARI
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 5, 4) + TMP_CNUM_ATARI * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case Else
            
            rowCntNew = rowCnt
            colCntNew = colCnt
            
    End Select
    
    Set AdjustTableByCat = tblRge.Resize(rowCntNew, colCntNew)
    
End Function

Function AdjustTableByGrp(tblId As Integer, ByVal tblRge As Range, gNew As Integer) As Range
    
    Dim rowCnt As Integer, colCnt As Integer, rowCntNew As Integer, colCntNew As Integer
    Dim vPos(1 To 3) As Integer, vChg(1 To 3) As Integer
    Dim dg As Integer
    Dim i As Integer
    
    rowCnt = tblRge.Rows.Count
    colCnt = tblRge.Columns.Count
    dg = gNew - TMP_GNUM
    
    Select Case tblId
    
        Case TBLID_GCRS
            
            rowCntNew = rowCnt
            colCntNew = colCnt + 3 * dg
            
            vChg(1) = dg
            vChg(2) = dg
            vChg(3) = dg
            
            vPos(1) = 4: If dg > 0 Then vPos(1) = 4 + TMP_GNUM - 1
            vPos(2) = vPos(1) + TMP_GNUM + 1
            vPos(3) = vPos(2) + TMP_GNUM + 1
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_MODEL
            
            rowCntNew = rowCnt
            colCntNew = colCnt + dg
            
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 4: If dg > 0 Then vPos(1) = 4 + TMP_GNUM - 1
            vPos(2) = vPos(1) + TMP_GNUM + 1
            vPos(3) = vPos(2) + TMP_GNUM + 1
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_NUMCATE
            
            rowCntNew = rowCnt
            colCntNew = colCnt + dg
            
            vChg(1) = dg
            vChg(2) = dg
            vChg(3) = dg
            
            vPos(1) = 6: If dg > 0 Then vPos(1) = 6 + TMP_GNUM - 1
            vPos(2) = vPos(1) + TMP_GNUM + 1
            vPos(3) = vPos(2) + TMP_GNUM + 1
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_EXTRAINFO
            
            rowCntNew = rowCnt
            colCntNew = colCnt + dg
            
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 3: If dg > 0 Then vPos(1) = 3 + TMP_GNUM - 1
            vPos(2) = vPos(1) + TMP_GNUM + 1
            vPos(3) = vPos(2) + TMP_GNUM + 1
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_SMPSCORE
            
            rowCntNew = rowCnt
            colCntNew = colCnt + 2 * dg
            
            vChg(1) = dg
            vChg(2) = dg
            vChg(3) = 0
            
            vPos(1) = 2: If dg > 0 Then vPos(1) = 1 + TMP_GNUM - 1
            vPos(2) = vPos(1) + TMP_GNUM
            vPos(3) = vPos(2) + TMP_GNUM + 1
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_NTABLE, TBLID_HTABLE, TBLID_VTABLE
            rowCntNew = rowCnt + dg
            colCntNew = colCnt + dg
            
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 5: If dg > 0 Then vPos(1) = 4 + TMP_GNUM - 1
            vPos(2) = 0
            vPos(3) = 0
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 6: If dg > 0 Then vPos(1) = 5 + TMP_GNUM - 1
            vPos(2) = 0
            vPos(3) = 0
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_EIGEN
            rowCntNew = rowCnt
            colCntNew = colCnt + dg - 1
            vChg(1) = dg - 1
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 4: If dg > 0 Then vPos(1) = 4 + TMP_GNUM - 1
            vPos(2) = 0
            vPos(3) = 0
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
        
        Case TBLID_ASR
            rowCntNew = rowCnt + dg
            colCntNew = colCnt
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 5: If dg > 0 Then vPos(1) = 5 + TMP_GNUM - 1
            vPos(2) = 0
            vPos(3) = 0
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_BARY
            rowCntNew = rowCnt + dg
            colCntNew = colCnt + dg
            
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 2: If dg > 0 Then vPos(1) = 1 + TMP_GNUM - 1
            vPos(2) = 0
            vPos(3) = 0
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 3: If dg > 0 Then vPos(1) = 3 + TMP_GNUM - 1
            vPos(2) = 0
            vPos(3) = 0
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_ATARI_CMB2
            rowCntNew = rowCnt
            colCntNew = colCnt + 2 * dg
            vChg(1) = dg
            vChg(2) = dg
            vChg(3) = 0
            
            vPos(1) = 5: If dg > 0 Then vPos(1) = 4 + TMP_GNUM - 1
            vPos(2) = vPos(1) + TMP_GNUM + 5
            vPos(3) = 0
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case Else
            
            rowCntNew = rowCnt
            colCntNew = colCnt
            
    End Select
    
    Set AdjustTableByGrp = tblRge.Resize(rowCntNew, colCntNew)
    
End Function

'
'adjust rows or columns
'11.8.14 LSQ
'
Private Sub doInsRowCol(ByVal bRow As Boolean, ByVal rge As Range, ByVal cnt As Integer)
    
    Dim rowCnt As Long, colCnt As Long
    
    rowCnt = rge.Rows.Count
    colCnt = rge.Columns.Count
    
    rge.Copy
    
    If bRow Then
        rge.Offset(rowCnt, 0).Resize(rowCnt * cnt, colCnt).Insert Shift:=xlDown
    Else
        rge.Offset(0, colCnt).Resize(rowCnt, colCnt * cnt).Insert Shift:=xlToRight
    End If
    
    Application.CutCopyMode = False
    
End Sub

Function AdjustRows(ByVal rge As Range, vPos As Variant, vChg As Variant) As Range
    
    Set AdjustRows = AdjustRowCol(True, rge, vPos, vChg)
    
End Function

Function AdjustCols(ByVal rge As Range, vPos As Variant, vChg As Variant) As Range
    
    Set AdjustCols = AdjustRowCol(False, rge, vPos, vChg)
    
End Function
'
'Insert or Delete rows or columns
'Used mainly in category adjustment
'
'bRow : True = Row operation, False = Column operation
'
Private Function AdjustRowCol(ByVal bRow As Boolean, ByVal rge As Range, vPos As Variant, vChg As Variant) As Range
    
    Dim rowNum As Integer, colNum As Integer, rowNumNew As Integer, colNumNew As Integer
    Dim strAddr As String
    Dim pos As Integer, chg As Integer
    Dim change As Integer
    Dim i As Integer
    
    strAddr = rge.Range("A1").Address
    rowNum = rge.Rows.Count
    colNum = rge.Columns.Count
    change = 0
    
    For i = UBound(vPos) To LBound(vPos) Step -1
        pos = vPos(i)
        chg = vChg(i)
        change = change + chg
        
        If bRow Then
            If chg > 0 Then
                rge.Rows(pos).Resize(chg, colNum).Insert Shift:=xlDown
            ElseIf chg < 0 Then
                rge.Rows(pos).Resize(-chg, colNum).Delete Shift:=xlUp
                If Abs(chg) = 1 Then
                    rge.Rows(pos).Resize(1, colNum).Borders(xlEdgeTop).Weight = xlThin
                End If
            End If
        Else
            If chg > 0 Then
                rge.Columns(pos).Resize(rowNum, chg).Insert Shift:=xlToRight
            ElseIf chg < 0 Then
                rge.Columns(pos).Resize(rowNum, -chg).Delete Shift:=xlToLeft
                If Abs(chg) = 1 Then
                    rge.Columns(pos).Resize(rowNum, 1).Borders(xlEdgeLeft).Weight = xlThin
                End If
            End If
        End If
    Next i
    
    If bRow Then
        rowNumNew = rowNum + change
        colNumNew = colNum
    Else
        rowNumNew = rowNum
        colNumNew = colNum + change
    End If
    
    Set AdjustRowCol = rge.Worksheet.Range(strAddr).Resize(rowNumNew, colNumNew)
    
End Function
Attribute VB_Name = "MdlTableA"
'=======================================================
' Sub of make table
'
' 2011.8 LSQ
'=======================================================
Option Explicit
Option Private Module

Function TMPRGE_GCRS() As String
    TMPRGE_GCRS = findAddr_TBL(TBLID_GCRS)
End Function

Function TMPRGE_XCRS() As String
    TMPRGE_XCRS = findAddr_TBL(TBLID_XCRS)
End Function

Function TMPRGE_CRAM() As String
    TMPRGE_CRAM = findAddr_TBL(TBLID_CRAM)
End Function

Function TMPRGE_CORR() As String
    TMPRGE_CORR = findAddr_TBL(TBLID_CORR)
End Function

Function TMPRGE_EIGEN() As String
    TMPRGE_EIGEN = findAddr_TBL(TBLID_EIGEN)
End Function

Function TMPRGE_MODEL() As String
    TMPRGE_MODEL = findAddr_TBL(TBLID_MODEL)
End Function

Function TMPRGE_NUMCATE() As String
    TMPRGE_NUMCATE = findAddr_TBL(TBLID_NUMCATE)
End Function

Function TMPRGE_EXTRAINFO() As String
    TMPRGE_EXTRAINFO = findAddr_TBL(TBLID_EXTRAINFO)
End Function

Function TMPRGE_SMPSCORE() As String
    TMPRGE_SMPSCORE = findAddr_TBL(TBLID_SMPSCORE)
End Function

Function TMPRGE_BARY() As String
    TMPRGE_BARY = findAddr_TBL(TBLID_BARY)
End Function

Function TMPRGE_NTABLE() As String
    TMPRGE_NTABLE = findAddr_TBL(TBLID_NTABLE)
End Function

Function TMPRGE_HTABLE() As String
    TMPRGE_HTABLE = findAddr_TBL(TBLID_HTABLE)
End Function

Function TMPRGE_VTABLE() As String
    TMPRGE_VTABLE = findAddr_TBL(TBLID_VTABLE)
End Function

Function TMPRGE_ASR() As String
    TMPRGE_ASR = findAddr_TBL(TBLID_ASR)
End Function

Function TMPRGE_ATARI_CMB1() As String
    TMPRGE_ATARI_CMB1 = findAddr_TBL(TBLID_ATARI_CMB1)
End Function

Function TMPRGE_ATARI_CMB2() As String
    TMPRGE_ATARI_CMB2 = findAddr_TBL(TBLID_ATARI_CMB2)
End Function

Function TMPRGE_ATARI_CMB3() As String
    TMPRGE_ATARI_CMB3 = findAddr_TBL(TBLID_ATARI_CMB3)
End Function

Private Function findAddr_TBL(ByVal tblId As Integer) As String
    Dim sht As Worksheet, nmStr As String
    Dim rge As Range
    
    Set sht = SbkThis.Worksheets("TemplateTable")
    nmStr = strStDefName(tblId)
    Set rge = getRange_FromStDefName(sht, nmStr)
    
    findAddr_TBL = ""
    If rge Is Nothing = False Then
        findAddr_TBL = rge.Address
    End If
End Function

Private Function strStDefName(ByVal tblId As String) As String
    strStDefName = ""
    Select Case tblId
        Case TBLID_GCRS: strStDefName = "NMTBL1_GCRS"
        Case TBLID_XCRS: strStDefName = "NMTBL2_XCRS"
        Case TBLID_CRAM: strStDefName = "NMTBL3_CRAM"
        Case TBLID_CORR: strStDefName = "NMTBL4_CORR"
        Case TBLID_EIGEN: strStDefName = "NMTBL5_EIGEN"
        Case TBLID_MODEL: strStDefName = "NMTBL6_MODEL"
        Case TBLID_NUMCATE: strStDefName = "NMTBL7_NUMCATE"
        Case TBLID_EXTRAINFO: strStDefName = "NMTBL8_EXTRAINFO"
        Case TBLID_SMPSCORE: strStDefName = "NMTBL9_SMPSCORE"
        Case TBLID_BARY: strStDefName = "NMTBL10_BARY"
        Case TBLID_NTABLE: strStDefName = "NMTBL11_NTABLE"
        Case TBLID_HTABLE: strStDefName = "NMTBL12_HTABLE"
        Case TBLID_VTABLE: strStDefName = "NMTBL13_VTABLE"
        Case TBLID_ASR: strStDefName = "NMTBL14_ASR"
        Case TBLID_ATARI_CMB1: strStDefName = "NMTBL15_ATARI_CMB1"
        Case TBLID_ATARI_CMB2: strStDefName = "NMTBL16_ATARI_CMB2"
        Case TBLID_ATARI_CMB3: strStDefName = "NMTBL17_ATARI_CMB3"
    End Select

End Function
'
'|fffd|V|fffd|[|fffd|g|fffd||303|Z|fffd||fffd||fffd||348||342||30b||fffd||fffd||fffd|
'11.8.20 LSQ mdf from subdsn.xls
'
Private Function getRange_FromStDefName(ByVal stObj As Worksheet, stDefName As String) As Range
    Dim RgeObj As Range
    
    On Error Resume Next
    
    Set RgeObj = stObj.Range(stObj.Names(stDefName))
    If Err.Number <> 0 Then     'ERROR
        Set RgeObj = Nothing
        Err.Clear
    End If
    
    Set getRange_FromStDefName = RgeObj
    
    On Error GoTo 0

End Function


'=== EOF ===
Attribute VB_Name = "MdlTableSr1"
Option Explicit
Option Private Module

Const MAX_XNUM As Long = 30

Const SHT_INF As String = "Sr1Info"
Const SHT_TMP As String = "TemplateTableSr1"
Const SHT_RST As String = "Sr1Result"

Const INF_BGN As String = "A1"

Public Const TBLID_SR1_CATEAVG As Integer = 1
Public Const TBLID_SR1_OBJECTIVECORR As Integer = 2
Public Const TBLID_SR1_CROSSTABLE As Integer = 3
Public Const TBLID_SR1_CATECORR As Integer = 4
Public Const TBLID_SR1_ACCURACY As Integer = 5
Public Const TBLID_SR1_AOV As Integer = 6
Public Const TBLID_SR1_CATESCORE As Integer = 7
Public Const TBLID_SR1_CRAM As Integer = 8
Public Const TBLID_SR1_ITEMCORR As Integer = 9
Public Const TBLID_SR1_OBJECTIVEITEM As Integer = 10
Public Const TBLID_SR1_SMPSCORE As Integer = 11
Public Const TBLID_SR1_EXTRAINFO As Integer = 12
Public Const TBLID_SR1_CATEITEMINFO1 As Integer = 13
Public Const TBLID_SR1_CATEITEMINFO2 As Integer = 14
Public Const TBLID_SR1_NUMITEMINFO As Integer = 15
Public Const TBLID_SR1_CATEITEMCORR_TITLE As Integer = 16
Public Const TBLID_SR1_CATEITEMCORR_STAT As Integer = 17
Public Const TBLID_SR1_CATEITEMCORR_PVAL As Integer = 18
Public Const TBLID_SR1_CATEITEMCORR_JUDGE As Integer = 19
Public Const TBLID_SR1_CATENUMCORR_TITLE As Integer = 20
Public Const TBLID_SR1_CATENUMCORR_STAT As Integer = 21
Public Const TBLID_SR1_CATENUMCORR_PVAL As Integer = 22
Public Const TBLID_SR1_CATENUMCORR_JUDGE As Integer = 23
Public Const TBLID_SR1_NUMITEMCORR_TITLE As Integer = 24
Public Const TBLID_SR1_NUMITEMCORR_STAT As Integer = 25
Public Const TBLID_SR1_NUMITEMCORR_PVAL As Integer = 26
Public Const TBLID_SR1_NUMITEMCORR_JUDGE As Integer = 27
Public Const TBLID_SR1_ITEMSCORE As Integer = 28
Public Const TBLID_SR1_CORR As Integer = 29

Public Const TBLID_SR1_ATARI_CMB1 As Integer = 30
Public Const TBLID_SR1_ATARI_CMB2 As Integer = 31
Public Const TBLID_SR1_ATARI_CMB3 As Integer = 32
Public Const TBLID_SR1_ATARI_CMB3_ITM As Integer = 33
Public Const TBLID_SR1_ATARI_CMB3_AXIS As Integer = 34
Public Const TBLID_SR1_ATARI_CMB3_CATE As Integer = 35

Const TMP_INUM As Integer = 2 'template table's item number
Const TMP_CNUM As Integer = 2 'template table's category number
Const TMP_CNUM_ATARI As Integer = 3  '11.8.19 LSQ add; |fffd|c|fffd||fffd||fffd||fffd||fffd|r|fffd||fffd|Wrong, if use 2, when realCateNum > 2
Const TMP_GNUM As Integer = 3 'template table's group number
Const TMP_ANUM As Integer = 2 'template table's axis number

Const ROWNUM_CRAM As Integer = 4   '11.8.20 LSQ add

Type Category
    id As Long
    Code As String
    Name As String
End Type

Type Sr1_Item
    id As Long
    kind As Long
    Name As String
    CateNum As Long
    NumCate As Long
    Cate() As Category
    NewCates As Variant
    NewCateNum As Long
End Type

Type Sr1_Grp
    bShowGrp As Boolean
    nXAxis As Long
    nYAxis As Long
    bSmpName As Boolean
    bCateName As Boolean
End Type

Type BasInfo
    nFuncId As Long
    ObjVarName As String
    nGrp As Long
    nSmpNum As Long
    nVarSmpNum As Long
    nItm As Long     'total item number (category + numeric)
    nItmCat As Long  'cate item number
    nItmNum As Long  'numeric item number
    aryCate(1 To MAX_XNUM) As Long
    nTotalCateNum As Integer
    items() As Sr1_Item
    bNumCate As Boolean
    bExtraInfo As Boolean
    nVarMethod As Long
    sr1Grp As Sr1_Grp
End Type

Function ReadInfo() As BasInfo
    
    Dim info As BasInfo
    Dim rge As Range
    Dim i As Long, j As Long
    Dim cat As Long
    Dim realNItm As Long
    
    Set rge = SbkThis.Worksheets(SHT_INF).Range(INF_BGN)
    
    With info
        .nFuncId = rge.Offset(0, 2)
        .ObjVarName = rge.Offset(0, 1)
        .nGrp = rge.Offset(1, 1)
        .nSmpNum = rge.Offset(3, 1)
        .nVarSmpNum = rge.Offset(3, 2)
        .nItm = rge.Offset(6, 1)
        .bNumCate = IIf(rge.Offset(13, 1) = 1, True, False)
        .bExtraInfo = IIf(rge.Offset(12, 1) = 1, True, False)
        .nVarMethod = rge.Offset(11, 1)
        
        ReDim .items(1 To .nItm)
        realNItm = 0
        .nTotalCateNum = 0
        For i = 1 To .nItm
            cat = rge.Offset(8, i + 40)
            .items(i).NewCates = Split(rge.Offset(9, i + 40), ",")
            .items(i).NewCateNum = UBound(.items(i).NewCates) + 1
            .items(i).id = i
            .items(i).Name = rge.Offset(7, i)
            If cat > 0 Then
                realNItm = realNItm + 1
                .aryCate(realNItm) = cat
                .nTotalCateNum = .nTotalCateNum + cat
                .items(i).CateNum = cat
                .items(i).kind = 2
                ReDim .items(i).Cate(1 To cat)
                For j = 1 To cat
                    .items(i).Cate(j).id = j
                    .items(i).Cate(j).Name = rge.Offset(48 + j, i)
                Next j
            Else
                .nTotalCateNum = .nTotalCateNum + 1
                .items(i).CateNum = 1
                .items(i).kind = 3
                If (.bNumCate) Then
                    .items(i).NumCate = rge.Offset(17, i)
                    ReDim .items(i).Cate(1 To .items(i).NumCate)
                    For j = 1 To .items(i).NumCate
                        .items(i).Cate(j).id = j
                        .items(i).Cate(j).Code = rge.Offset(17 + j, i)
                        .items(i).Cate(j).Name = rge.Offset(48 + j, i)
                    Next j
                Else
                    .items(i).NumCate = 1
                    ReDim .items(i).Cate(1 To 1)
                    .items(i).Cate(1).id = 1
                    .items(i).Cate(1).Code = 1
                    .items(i).Cate(1).Name = rge.Offset(49, i)
                End If
            End If
        Next i
        
        .nItmCat = realNItm
        .nItmNum = .nItm - .nItmCat
    End With
    
    ReadInfo = info
    
End Function

Sub Sr1_Output(ByVal kind As Long, ByVal oSheet As Worksheet, _
               ByVal bShowGrp As Boolean, ByVal bSmpName As Boolean, ByVal bCateName As Boolean, Optional ByVal outRge As Range = Nothing)
    
    Dim dataInfo As BasInfo
    Dim rge As Range, grpRge As Range, bgnCel As Range
    Dim rge1 As Range
    dataInfo = ReadInfo()
    
    dataInfo.sr1Grp.bShowGrp = bShowGrp
    dataInfo.sr1Grp.bSmpName = bSmpName
    dataInfo.sr1Grp.bCateName = bCateName
    
    If outRge Is Nothing Then
        Set bgnCel = oSheet.Range("B1") 'begin output position
    Else
        Set bgnCel = outRge
    End If
    
    Set rge = bgnCel
    
    If kind = 1 Then
        Set rge = MakeCateItemInfo(rge, dataInfo)
        Set rge = MakeNumItemInfo(rge.Offset(rge.Rows.Count + 1, 0), dataInfo)
        rge(1, 1) = "|fffd||293|I|fffd|f|fffd|[|fffd|^|fffd||30a||fffd|{|fffd|W|fffd|v"
        If dataInfo.nItmCat > 0 Or dataInfo.bNumCate Then
            Set rge = MakeCateAvg(rge.Offset(rge.Rows.Count + 1, 0), dataInfo)
            rge(2, 1) = "|fffd||fffd||fffd||696||fffd|"
        End If
        Set rge = MakeObjectiveCorr(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        rge(1, 1) = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||196||693|I|fffd||3d0||fffd||fffd||182||30a||58c|W"
        rge(2, 1) = "|fffd||fffd||fffd||696||fffd|"
        If dataInfo.nItmNum > 0 Then
            Set rge = MakeTimeSeriesCorr(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        End If
        If dataInfo.nItmCat > 0 Then
            Set rge = MakeCrossTable(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            rge(1, 1) = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd|i|fffd||fffd||fffd|I|fffd|f|fffd|[|fffd|^|fffd|j|fffd||fffd||fffd||742||303|N|fffd||fffd||fffd|X|fffd|W|fffd|v|fffd|\"
            rge(2, 1) = "|fffd||fffd||fffd||696||fffd|"
        End If
        If dataInfo.nItmCat > 0 Or dataInfo.bNumCate Then
            Set rge = MakeCateCorr(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            rge(1, 1) = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd|i1,0|fffd|f|fffd|[|fffd|^|fffd|j|fffd||fffd||fffd||742||312|P|fffd||fffd||fffd||58c|W|fffd||fffd|"
            rge(2, 1) = "|fffd||fffd||fffd||696||fffd|"
        End If
        Set rge = MakeCateItemCorr(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        rge(1, 1) = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd|i|fffd||fffd||fffd|I|fffd|f|fffd|[|fffd|^|fffd|j|fffd||fffd||fffd||742||311||fffd||fffd||58c|W|fffd||fffd|"
        rge(2, 1) = "|fffd|N|fffd||fffd||fffd||fffd||fffd|[|fffd||fffd||fffd|A|fffd||58c|W|fffd||fffd|"
        Set rge = MakeCateNumCorr(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        rge(1, 1) = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd|i|fffd||fffd||fffd|I|fffd|f|fffd|[|fffd|^|fffd||197||293|I|fffd|f|fffd|[|fffd|^|fffd|j|fffd||fffd||fffd||742||311||fffd||fffd||58c|W|fffd||fffd|"
        Set rge = MakeNumItemCorr(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        rge(1, 1) = "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd|i|fffd||293|I|fffd|f|fffd|[|fffd|^|fffd|j|fffd||fffd||fffd||742||311||fffd||fffd||58c|W|fffd||fffd|"
        rge(2, 1) = "|fffd|P|fffd||fffd||fffd||58c|W|fffd||fffd|"
    ElseIf kind = 2 Then
        If dataInfo.nVarMethod = 2 Then
            Set rge = MakeItemScore(rge, dataInfo)
            Set rge = MakeCateScore(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeAccuracy(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeAOV(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            If dataInfo.bExtraInfo Then
                Set rge = MakeExtraInfo(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            End If
            Set rge = MakeSmpScore(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            If dataInfo.sr1Grp.bShowGrp Then
                Set grpRge = rge(2, 1).Resize(rge.Rows.Count - 1, rge.Columns.Count)
                'DrawSr1LogGrp grpRge.Offset(1, 7), grpRge.Offset(2, 3), dataInfo
                Sr1Chart grpRge, grpRge.Offset(1, 7), True, dataInfo
            End If
        Else
            Set rge = MakeATARICMB1(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeATARICMB2(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeATARICMB3(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        End If
    ElseIf kind = 3 Then
        If dataInfo.nVarMethod = 2 Then
            Set rge = MakeItemScore(rge, dataInfo)
            Set rge = MakeCateScore(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeAccuracy(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeAOV(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            If dataInfo.bExtraInfo Then
                Set rge = MakeExtraInfo(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            End If
            Set rge = MakeSmpScore(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            If dataInfo.sr1Grp.bShowGrp Then
                Set grpRge = rge(2, 1).Resize(rge.Rows.Count - 1, rge.Columns.Count)
                'DrawSr1LogGrp grpRge.Offset(1, 7), grpRge.Offset(2, 3), dataInfo
                Sr1Chart grpRge, grpRge.Offset(1, 7), True, dataInfo
            End If
        Else
            Set rge = MakeATARICMB1(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeATARICMB2(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
            Set rge = MakeATARICMB3(rge.Offset(rge.Rows.Count + 1, 0).Range("A1"), dataInfo)
        End If
    End If
    rge.Worksheet.Activate
    
    With ActiveWindow
        .ScrollRow = bgnCel.Row
        .DisplayGridlines = False
    End With
    bgnCel.Select
    
End Sub

'
Function Sr1Chart(ByVal rgeData As Range, ByVal rgeChartBgn As Range, ByVal bMonthly As Boolean, dataInfo As BasInfo) As Long
    Dim nRtn As Long, nGrpRowNum As Long, nDist As Long
    Dim maxVal As Double
    Dim ser As Series
    Dim cht As Chart
    Dim rge As Range
    nDist = forcIIf(bMonthly, 10, 0)
    nRtn = COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t(rgeChartBgn, rgeData.Columns("A"), Union(rgeData.Columns("B").Resize(dataInfo.nSmpNum + 1, 1), rgeData.Columns("C")), _
           "", "", , , , nDist, , cht)
    If Not cht Is Nothing Then
        With cht.Axes(xlCategory)
            .CrossesAt = 1
            .TickLabelSpacing = 1
            .TickMarkSpacing = 1
            .AxisBetweenCategories = False
            .ReversePlotOrder = False
            .TickLabels.Orientation = 45
        End With
        If dataInfo.nSmpNum < dataInfo.nVarSmpNum Then
            Set rge = rgeData.Columns(2).Range("A2")
            Set rge = rge.Resize(dataInfo.nSmpNum, 2)
            maxVal = CDbl(Application.max(rge))
            Set ser = cht.SeriesCollection.NewSeries
            ser.Border.ColorIndex = 1
            ser.Border.Weight = xlThin
            ser.ChartType = xlXYScatterLinesNoMarkers
            ser.XValues = "={" & dataInfo.nSmpNum + 1 & "," & dataInfo.nSmpNum + 1 & "}"
            ser.Values = "={0," & CStr(maxVal) & "}"
            cht.Legend.LegendEntries(3).Delete
        End If
    End If
    nGrpRowNum = nRtn + 1
    Sr1Chart = nGrpRowNum
End Function

'
'|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||3d2|l|fffd|\
'
Function MakeCateAvg(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, k As Long, l As Long
    Dim rge As Range
    Dim aryCate(1 To MAX_XNUM) As Long
    Dim v As Variant
    
    If dataInfo.nItmCat < 1 And Not dataInfo.bNumCate Then
        Set MakeCateAvg = outBgn
        Exit Function
    End If
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATEAVG)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    If dataInfo.bNumCate Then
        Set rge = AdjustTableByItm(TBLID_SR1_CATEAVG, rge, dataInfo.nItm)
        For i = 1 To dataInfo.nItm
            If dataInfo.items(i).kind = 2 Then
                aryCate(i) = dataInfo.items(i).CateNum
            ElseIf dataInfo.items(i).kind = 3 Then
                If dataInfo.bNumCate Then
                    aryCate(i) = dataInfo.items(i).NumCate
                Else
                    aryCate(i) = 1
                End If
            End If
        Next i
        Set rge = AdjustTableByCat(TBLID_SR1_CATEAVG, rge, aryCate, dataInfo.nItm)
        l = 4
        For i = 1 To dataInfo.nItm
            'If dataInfo.items(i).kind = 2 Then
                rge(l, 1) = dataInfo.items(i).Name
                For j = 1 To aryCate(i)
                    rge(l, 2) = dataInfo.items(i).Cate(j).Name
                    l = l + 1
                Next j
            'End If
        Next i
    Else
        Set rge = AdjustTableByItm(TBLID_SR1_CATEAVG, rge, dataInfo.nItmCat)
        Set rge = AdjustTableByCat(TBLID_SR1_CATEAVG, rge, dataInfo.aryCate, dataInfo.nItmCat)
        l = 4
        For i = 1 To dataInfo.nItm
            If dataInfo.items(i).kind = 2 Then
                rge(l, 1) = dataInfo.items(i).Name
                For j = 1 To dataInfo.items(i).CateNum
                    rge(l, 2) = dataInfo.items(i).Cate(j).Name
                    l = l + 1
                Next j
            End If
        Next i
    End If
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||fffd||fffd||3d2|l|fffd|\")
    #If 0 Then
    rge(2, 1).Resize(l - 4 + 1, 3).Copy
    outBgn(3, 3).PasteSpecial xlPasteValues
    Application.CutCopyMode = False
    #Else
        outBgn(3, 3) = rge(2, 1)
        outBgn(3, 4) = rge(2, 2)
        outBgn(3, 5) = rge(2, 3)
        l = 4
        If dataInfo.bNumCate Then
            For i = 1 To dataInfo.nItm
                If dataInfo.items(i).kind = 2 Then
                    l = l + dataInfo.items(i).NewCateNum
                ElseIf dataInfo.items(i).kind = 3 Then
                    If dataInfo.bNumCate Then
                        l = l + dataInfo.items(i).NumCate
                    Else
                        l = l + 1
                    End If
                End If
            Next i
        Else
            For i = 1 To dataInfo.nItm
                If dataInfo.items(i).kind = 2 Then
                    l = l + dataInfo.items(i).NewCateNum
                End If
            Next i
        End If
        v = rge(2, 1).Resize(l - 4 + 1, 3).Value
        l = 1
        k = 1
        For i = 1 To dataInfo.nItm
            If dataInfo.items(i).kind = 2 Then
                For j = 1 To dataInfo.items(i).CateNum
                    outBgn(2 + l + j, 3) = 0 '"|fffd|G|fffd||fffd||fffd|["
                    outBgn(2 + l + j, 4) = 0 '"|fffd|G|fffd||fffd||fffd|["
                    outBgn(2 + l + j, 5) = "|fffd|G|fffd||fffd||fffd|["
                Next j
                For j = 1 To dataInfo.items(i).NewCateNum
                    outBgn(2 + l + dataInfo.items(i).NewCates(j - 1), 3) = v(k + j, 1)
                    outBgn(2 + l + dataInfo.items(i).NewCates(j - 1), 4) = v(k + j, 2)
                    outBgn(2 + l + dataInfo.items(i).NewCates(j - 1), 5) = v(k + j, 3)
                Next j
                l = l + dataInfo.items(i).CateNum
                k = k + dataInfo.items(i).NewCateNum
            ElseIf dataInfo.bNumCate Then
                For j = 1 To dataInfo.items(i).NumCate
                    outBgn(2 + l + j, 3) = v(k + j, 1)
                    outBgn(2 + l + j, 4) = v(k + j, 2)
                    outBgn(2 + l + j, 5) = v(k + j, 3)
                Next j
                l = l + dataInfo.items(i).NumCate
                k = k + dataInfo.items(i).NumCate
            End If
        Next i
    #End If
    
    Set MakeCateAvg = outBgn
    
End Function

Function MakeObjectiveCorr(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, k As Long, l As Long
    Dim rge As Range
    Dim aryData(1) As Long
    
    'If dataInfo.nItmCat < 1 And Not dataInfo.bNumCate Then
    '    Set MakeObjectiveCorr = outBgn
    '    Exit Function
    'End If
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_OBJECTIVECORR)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    aryData(1) = dataInfo.nItm
    Set rge = AdjustTableByCat(TBLID_SR1_OBJECTIVECORR, rge, aryData, 1)
    
    Application.CutCopyMode = False
    Set outBgn = rge
    l = 3
    For i = 1 To dataInfo.nItm
        rge(l, 1) = dataInfo.items(i).Name
        If dataInfo.items(i).kind = 2 Then
            rge(l, 2) = "|fffd||fffd||fffd||594||fffd|"
        Else
            rge(l, 2) = "|fffd|P|fffd||fffd||fffd||58c|W|fffd||fffd|"
        End If
        l = l + 1
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||693|I|fffd||3d0||fffd||fffd||182||311||fffd||fffd||fffd|")
    rge(2, 1).Resize(dataInfo.nItm, 3).Copy
    outBgn(3, 3).PasteSpecial xlPasteValues
    outBgn(2, 3) = "|fffd||fffd||fffd||fffd|"
    
    Application.CutCopyMode = False
        
    Set MakeObjectiveCorr = outBgn
End Function
'
'|fffd|N|fffd||fffd||fffd|X|fffd|W|fffd|v|fffd|\
'
#If 0 Then
Function MakeCrossTable(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, k As Long, l As Long
    Dim ii As Long, jj As Long, kk As Long, ll As Long
    Dim rge As Range
    Dim aryCate(1 To MAX_XNUM) As Integer
    Dim itmCnt As Long
    Dim v As Variant
    If dataInfo.nItmCat < 1 Then
        Set MakeCrossTable = outBgn
        Exit Function
    End If
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CROSSTABLE)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    itmCnt = 1
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            aryCate(itmCnt) = dataInfo.items(i).CateNum
            itmCnt = itmCnt + 1
        End If
    Next i
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_SR1_CROSSTABLE, rge, itmCnt - 1) 'dataInfo.nItmCat)
    Set rge = AdjustTableByCat(TBLID_SR1_CROSSTABLE, rge, aryCate, itmCnt - 1) 'dataInfo.aryCate, dataInfo.nItmCat)

    Application.CutCopyMode = False
    
    l = 4
    k = 3
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            rge(l, 1) = dataInfo.items(i).Name
            rge(2, k) = dataInfo.items(i).Name
            For j = 1 To dataInfo.items(i).CateNum
                rge(l, 2) = dataInfo.items(i).Cate(j).Name
                rge(3, k) = dataInfo.items(i).Cate(j).Name
                l = l + 1
                k = k + 1
            Next j
        End If
    Next i
    
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|N|fffd||fffd||fffd|X|fffd|W|fffd|v|fffd|\")
    #If 0 Then
    rge(2, 1).Resize(l - 5 + 1, l - 5 + 1).Copy
    outBgn(4, 3).PasteSpecial xlPasteValues
    Application.CutCopyMode = False
    #Else
    l = 4
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            l = l + dataInfo.items(i).NewCateNum
        End If
    Next i
    k = l
    v = rge(2, 1).Resize(l - 5 + 1, l - 5 + 1).Value
    l = 2
    k = 3
    ll = 1
    kk = 1
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            For ii = 1 To dataInfo.items(i).CateNum
                ll = 1
                l = 2
                For j = 1 To dataInfo.nItm
                    If dataInfo.items(j).kind = 2 Then
                        For jj = 1 To dataInfo.items(j).CateNum
                            If i <> j Or (i = j And ii = jj) Then
                                outBgn(k + ii, l + jj) = "|fffd|G|fffd||fffd||fffd|["
                            End If
                        Next jj
                        l = l + dataInfo.items(j).CateNum
                    End If
                Next j
                kk = kk + 1
            Next ii
            k = k + dataInfo.items(i).CateNum
        End If
    Next i
    l = 2
    k = 3
    ll = 1
    kk = 1
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            For ii = 1 To dataInfo.items(i).NewCateNum
                ll = 1
                l = 2
                For j = 1 To dataInfo.nItm
                    If dataInfo.items(j).kind = 2 Then
                        For jj = 1 To dataInfo.items(j).NewCateNum
                            outBgn(k + dataInfo.items(i).NewCates(ii - 1), l + dataInfo.items(j).NewCates(jj - 1)) = v(kk, ll)
                            ll = ll + 1
                        Next jj
                        l = l + dataInfo.items(j).CateNum
                    End If
                Next j
                kk = kk + 1
            Next ii
            k = k + dataInfo.items(i).CateNum
        End If
    Next i
    #End If
    Set MakeCrossTable = outBgn
    
End Function
#Else
Function MakeCrossTable(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, k As Long, l As Long
    Dim ii As Long, jj As Long, kk As Long, ll As Long
    Dim rge As Range
    Dim aryCate(1 To MAX_XNUM) As Integer
    Dim itmCnt As Long
    Dim v As Variant
    If dataInfo.nItmCat < 1 Then
        Set MakeCrossTable = outBgn
        Exit Function
    End If
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CROSSTABLE)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    itmCnt = 1
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            aryCate(itmCnt) = dataInfo.items(i).CateNum
            itmCnt = itmCnt + 1
        ElseIf dataInfo.items(i).kind = 3 And dataInfo.bNumCate Then
            aryCate(itmCnt) = dataInfo.items(i).NumCate
            itmCnt = itmCnt + 1
        End If
    Next i
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_SR1_CROSSTABLE, rge, itmCnt - 1) 'dataInfo.nItmCat)
    Set rge = AdjustTableByCat(TBLID_SR1_CROSSTABLE, rge, aryCate, itmCnt - 1) 'dataInfo.aryCate, dataInfo.nItmCat)
    
    Application.CutCopyMode = False
    
    l = 4
    k = 3
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            rge(l, 1) = dataInfo.items(i).Name
            rge(2, k) = dataInfo.items(i).Name
            For j = 1 To dataInfo.items(i).CateNum
                rge(l, 2) = dataInfo.items(i).Cate(j).Name
                rge(3, k) = dataInfo.items(i).Cate(j).Name
                l = l + 1
                k = k + 1
            Next j
        ElseIf dataInfo.items(i).kind = 3 And dataInfo.bNumCate Then
            rge(l, 1) = dataInfo.items(i).Name
            rge(2, k) = dataInfo.items(i).Name
            For j = 1 To dataInfo.items(i).NumCate
                rge(l, 2) = dataInfo.items(i).Cate(j).Name
                rge(3, k) = dataInfo.items(i).Cate(j).Name
                l = l + 1
                k = k + 1
            Next j
        End If
    Next i
    
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|N|fffd||fffd||fffd|X|fffd|W|fffd|v|fffd|\")
    #If 0 Then
    rge(2, 1).Resize(l - 5 + 1, l - 5 + 1).Copy
    outBgn(4, 3).PasteSpecial xlPasteValues
    Application.CutCopyMode = False
    #Else
    l = 4
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            l = l + dataInfo.items(i).NewCateNum
        ElseIf dataInfo.items(i).kind = 3 And dataInfo.bNumCate Then
            l = l + dataInfo.items(i).NumCate
        End If
    Next i
    k = l
    v = rge(2, 1).Resize(l - 5 + 1, l - 5 + 1).Value
    l = 2
    k = 3
    ll = 1
    kk = 1
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            For ii = 1 To dataInfo.items(i).CateNum
                ll = 1
                l = 2
                For j = 1 To dataInfo.nItm
                    If dataInfo.items(j).kind = 2 Then
                        For jj = 1 To dataInfo.items(j).CateNum
                            If i <> j Or (i = j And ii = jj) Then
                                outBgn(k + ii, l + jj) = 0 '"|fffd|G|fffd||fffd||fffd|["
                            End If
                        Next jj
                        l = l + dataInfo.items(j).CateNum
                    ElseIf dataInfo.bNumCate Then
                        For jj = 1 To dataInfo.items(j).NumCate
                            If i <> j Or (i = j And ii = jj) Then
                                outBgn(k + ii, l + jj) = 0 '"|fffd|G|fffd||fffd||fffd|["
                            End If
                        Next jj
                        l = l + dataInfo.items(j).NumCate
                    End If
                Next j
                kk = kk + 1
            Next ii
            k = k + dataInfo.items(i).CateNum
        ElseIf dataInfo.bNumCate Then
            For ii = 1 To dataInfo.items(i).NumCate
                ll = 1
                l = 2
                For j = 1 To dataInfo.nItm
                    If dataInfo.items(j).kind = 2 Then
                        For jj = 1 To dataInfo.items(j).CateNum
                            If i <> j Or (i = j And ii = jj) Then
                                outBgn(k + ii, l + jj) = 0 '"|fffd|G|fffd||fffd||fffd|["
                            End If
                        Next jj
                        l = l + dataInfo.items(j).CateNum
                    ElseIf dataInfo.bNumCate Then
                        For jj = 1 To dataInfo.items(j).NumCate
                            If i <> j Or (i = j And ii = jj) Then
                                outBgn(k + ii, l + jj) = 0 '"|fffd|G|fffd||fffd||fffd|["
                            End If
                        Next jj
                        l = l + dataInfo.items(j).NumCate
                    End If
                Next j
                kk = kk + 1
            Next ii
            k = k + dataInfo.items(i).NumCate
        End If
    Next i
    l = 2
    k = 3
    ll = 1
    kk = 1
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            For ii = 1 To dataInfo.items(i).NewCateNum
                ll = 1
                l = 2
                For j = 1 To dataInfo.nItm
                    If dataInfo.items(j).kind = 2 Then
                        For jj = 1 To dataInfo.items(j).NewCateNum
                            outBgn(k + dataInfo.items(i).NewCates(ii - 1), l + dataInfo.items(j).NewCates(jj - 1)) = v(kk, ll)
                            ll = ll + 1
                        Next jj
                        l = l + dataInfo.items(j).CateNum
                    ElseIf dataInfo.bNumCate Then
                        For jj = 1 To dataInfo.items(j).NumCate
                            outBgn(k + dataInfo.items(i).NewCates(ii - 1), l + jj) = v(kk, ll)
                            ll = ll + 1
                        Next jj
                        l = l + dataInfo.items(j).NumCate
                    End If
                Next j
                kk = kk + 1
            Next ii
            k = k + dataInfo.items(i).CateNum
        ElseIf dataInfo.bNumCate Then
            For ii = 1 To dataInfo.items(i).NumCate
                ll = 1
                l = 2
                For j = 1 To dataInfo.nItm
                    If dataInfo.items(j).kind = 2 Then
                        For jj = 1 To dataInfo.items(j).NewCateNum
                            outBgn(k + ii, l + dataInfo.items(j).NewCates(jj - 1)) = v(kk, ll)
                            ll = ll + 1
                        Next jj
                        l = l + dataInfo.items(j).CateNum
                    ElseIf dataInfo.bNumCate Then
                        For jj = 1 To dataInfo.items(j).NumCate
                            outBgn(k + ii, l + jj) = v(kk, ll)
                            ll = ll + 1
                        Next jj
                        l = l + dataInfo.items(j).NumCate
                    End If
                Next j
                kk = kk + 1
            Next ii
            k = k + dataInfo.items(i).NumCate
        End If
    Next i
    #End If
    Set MakeCrossTable = outBgn
    
End Function
#End If

Function MakeCateCorr(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, k As Long, l As Long
    Dim ii As Long, jj As Long, kk As Long, ll As Long
    Dim rge As Range
    Dim aryCate(1 To MAX_XNUM) As Long
    Dim v As Variant
    
    If dataInfo.nItmCat < 1 And Not dataInfo.bNumCate Then
        Set MakeCateCorr = outBgn
        Exit Function
    End If
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATECORR)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_SR1_CATECORR, rge, dataInfo.nItm)
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            aryCate(i) = dataInfo.items(i).CateNum
        ElseIf dataInfo.items(i).kind = 3 Then
            If dataInfo.bNumCate Then
                aryCate(i) = dataInfo.items(i).NumCate
            Else
                aryCate(i) = 1
            End If
        End If
    Next i
    Set rge = AdjustTableByCat(TBLID_SR1_CATECORR, rge, aryCate, dataInfo.nItm)
    
    Application.CutCopyMode = False
    
    l = 4
    k = 3
    For i = 1 To dataInfo.nItm
        rge(l, 1) = dataInfo.items(i).Name
        rge(2, k) = dataInfo.items(i).Name
        For j = 1 To aryCate(i)
            rge(l, 2) = dataInfo.items(i).Cate(j).Name
            rge(3, k) = dataInfo.items(i).Cate(j).Name
            l = l + 1
            k = k + 1
        Next j
    Next i
    
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd||502||312|P|fffd||fffd||fffd||58c|W|fffd||fffd|")
#If 0 Then
    rge(2, 1).Resize(l - 5 + 1, l - 5 + 1).Copy
    outBgn(4, 3).PasteSpecial xlPasteValues
#Else
    For i = 1 To l - 4
        For j = 1 To l - 4
            outBgn(3 + i, 2 + j) = "|fffd|G|fffd||fffd||fffd|["
        Next j
    Next i
    l = 4
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            l = l + dataInfo.items(i).NewCateNum
        ElseIf dataInfo.items(i).kind = 3 Then
            If dataInfo.bNumCate Then
                l = l + dataInfo.items(i).NumCate
            Else
                l = l + 1
            End If
        End If
    Next i
    k = l
    v = rge(2, 1).Resize(l - 5 + 1, l - 5 + 1).Value
    l = 2
    k = 3
    ll = 1
    kk = 1
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            For ii = 1 To dataInfo.items(i).NewCateNum
                ll = 1
                l = 2
                For j = 1 To dataInfo.nItm
                    If dataInfo.items(j).kind = 2 Then
                        For jj = 1 To dataInfo.items(j).NewCateNum
                            outBgn(k + dataInfo.items(i).NewCates(ii - 1), l + dataInfo.items(j).NewCates(jj - 1)) = v(kk, ll)
                            ll = ll + 1
                        Next jj
                        l = l + dataInfo.items(j).CateNum
                    ElseIf dataInfo.bNumCate Then
                        For jj = 1 To dataInfo.items(j).NumCate
                            outBgn(k + dataInfo.items(i).NewCates(ii - 1), l + jj) = v(kk, ll)
                            ll = ll + 1
                        Next jj
                        l = l + dataInfo.items(j).NumCate
                    Else
                        outBgn(k + dataInfo.items(i).NewCates(ii - 1), l + 1) = v(kk, ll)
                        l = l + 1
                    End If
                Next j
                kk = kk + 1
            Next ii
            k = k + dataInfo.items(i).CateNum
        ElseIf dataInfo.bNumCate Then
            For ii = 1 To dataInfo.items(i).NumCate
                ll = 1
                l = 2
                For j = 1 To dataInfo.nItm
                    If dataInfo.items(j).kind = 2 Then
                        For jj = 1 To dataInfo.items(j).NewCateNum
                            outBgn(k + ii, l + dataInfo.items(j).NewCates(jj - 1)) = v(kk, ll)
                            ll = ll + 1
                        Next jj
                        l = l + dataInfo.items(j).CateNum
                    ElseIf dataInfo.bNumCate Then
                        For jj = 1 To dataInfo.items(j).NumCate
                            outBgn(k + ii, l + jj) = v(kk, ll)
                            ll = ll + 1
                        Next jj
                        l = l + dataInfo.items(j).NumCate
                    Else
                        outBgn(k + ii, l + 1) = v(kk, ll)
                        l = l + 1
                    End If
                Next j
                kk = kk + 1
            Next ii
            k = k + dataInfo.items(i).NumCate
        Else
            ll = 1
            l = 2
            For j = 1 To dataInfo.nItm
                If dataInfo.items(j).kind = 2 Then
                    For jj = 1 To dataInfo.items(j).NewCateNum
                        outBgn(k + 1, l + dataInfo.items(j).NewCates(jj - 1)) = v(kk, ll)
                        ll = ll + 1
                    Next jj
                    l = l + dataInfo.items(j).CateNum
                ElseIf dataInfo.bNumCate Then
                    For jj = 1 To dataInfo.items(j).NumCate
                        outBgn(k + 1, l + jj) = v(kk, ll)
                        ll = ll + 1
                    Next jj
                    l = l + dataInfo.items(j).NumCate
                Else
                    outBgn(k + 1, l + 1) = v(kk, ll)
                    l = l + 1
                End If
            Next j
            kk = kk + 1
            k = k + 1
        End If
    Next i
#End If
    Set MakeCateCorr = outBgn
    
End Function
'
'|fffd|N|fffd||fffd||fffd||fffd||fffd|[|fffd||fffd||fffd||318|A|fffd||58c|W|fffd||fffd|
'11.8.20 LSQ mdf : add "|fffd|J|fffd|C|fffd||fffd||fffd||fffd|l"
Function MakeCRAM(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, k As Long, l As Long, ct As Long
    Dim rge As Range
    
    If dataInfo.nItmCat < 1 Then
        Set MakeCRAM = outBgn
        Exit Function
    End If
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CRAM)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    j = 0
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            j = j + 1
        ElseIf dataInfo.bNumCate Then
            j = j + 1
        End If
    Next i
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_SR1_CRAM, rge, j)
    
    Application.CutCopyMode = False
    
    rge(2, 1) = "|fffd||fffd||fffd||fffd| " & dataInfo.nSmpNum
    l = ROWNUM_CRAM + 6
    k = 2
    
    '|fffd||693|I|fffd||3d0||fffd|

    ct = 0
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Or dataInfo.bNumCate Then
            rge(l, 1) = dataInfo.items(i).Name
            rge(ROWNUM_CRAM + 5, k) = dataInfo.items(i).Name
            
            ct = ct + 1
            l = l + ROWNUM_CRAM
            k = k + 1
        End If
    Next i
    
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||502||318|A|fffd||58c|W|fffd||fffd|")
    rge(2, 1).Resize(ct * ROWNUM_CRAM, ct).Copy
    outBgn(ROWNUM_CRAM + 6, 2).PasteSpecial xlPasteValues

    Set MakeCRAM = outBgn
    
End Function
'
'|fffd||fffd||fffd||594||fffd|
'
Function MakeCORR(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, k As Long, l As Long
    Dim rge As Range
    
    Exit Function
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_CORR)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_SR1_CORR, rge, dataInfo.nItmNum)
    
    Application.CutCopyMode = False
    
    rge(2, 1) = "|fffd||fffd||fffd||fffd| " & dataInfo.nSmpNum
    l = 8
    k = 2
    rge(9, 1) = dataInfo.ObjVarName
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 3 Then
            rge(8, k) = dataInfo.items(i).Name
            k = k + 1
        End If
    Next i
    
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||fffd||fffd||594||fffd|")
    rge(2, 1).Resize(3, k - 2).Copy
    outBgn(9, 2).PasteSpecial xlPasteValues
    
    Set MakeCORR = outBgn
    
End Function

Function MakeCateItemCorr(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, k As Long, l As Integer, ll As Long
    Dim ct As Long
    Dim rge As Range, rgeData As Range, rgeOut As Range
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATEITEMCORR_TITLE)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    If dataInfo.nItmCat > 0 Or dataInfo.bNumCate Then
        ct = 0
        For i = 1 To dataInfo.nItm
            If dataInfo.items(i).kind = 2 Then
                ct = ct + 1
            ElseIf dataInfo.bNumCate Then
                ct = ct + 1
            End If
        Next i
        Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATEITEMCORR_STAT)
        rge.Copy outBgn(2, 1).Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
        outBgn(4, 1) = "|fffd||fffd||fffd||696||fffd|"
        Set rge = outBgn(2, 1).Resize(rge.Rows.Count, rge.Columns.Count)
        Set rge = AdjustTableByItm(TBLID_SR1_CATEITEMCORR_STAT, rge, ct)
        rge(2, 2) = dataInfo.nSmpNum
        Set rgeOut = rge.Offset(rge.Rows.Count + 1, 0)
        Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATEITEMCORR_PVAL)
        rge.Copy rgeOut.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
        rgeOut(2, 1) = "|fffd||fffd||fffd||696||fffd|"
        Set rge = rgeOut.Resize(rge.Rows.Count, rge.Columns.Count)
        Set rge = AdjustTableByItm(TBLID_SR1_CATEITEMCORR_PVAL, rge, ct)
        Set rgeOut = rge.Offset(rge.Rows.Count + 1, 0)
        Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATEITEMCORR_JUDGE)
        rge.Copy rgeOut.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
        rgeOut(1, 1) = "|fffd|J|fffd|C|fffd||fffd||631f||fffd||fffd||242||fffd||953b||fffd||fffd|"
        rgeOut(2, 1) = "|fffd||fffd||fffd||696||fffd|"
        Set rge = rgeOut.Resize(rge.Rows.Count, rge.Columns.Count)
        Set rge = AdjustTableByItm(TBLID_SR1_CATEITEMCORR_JUDGE, rge, ct)
        Set rgeData = SbkThis.Worksheets(SHT_RST).Columns("B")
        Set rgeData = rgeData.Find("|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||502||318|A|fffd||58c|W|fffd||fffd|")
        l = 1
        k = 0
        For i = 1 To dataInfo.nItm
            If dataInfo.items(i).kind = 2 Or dataInfo.bNumCate Then
                ll = 1
                For j = 1 To dataInfo.nItm
                    If dataInfo.items(j).kind = 2 Or dataInfo.bNumCate Then
                        If i = j Then
                            outBgn(4, 1 + ll) = dataInfo.items(j).Name
                            outBgn(4 + ct + 3, 1 + ll) = dataInfo.items(j).Name
                            outBgn(4 + 2 * (ct + 3), 1 + ll) = dataInfo.items(j).Name
                            outBgn(4 + l, 1) = dataInfo.items(i).Name
                            outBgn(4 + l + ct + 3, 1) = dataInfo.items(i).Name
                            outBgn(4 + l + 2 * (ct + 3), 1) = dataInfo.items(i).Name
                            outBgn(4 + l, 1 + ll) = "-"
                            outBgn(4 + l + ct + 3, 1 + ll) = "-"
                            outBgn(4 + l + 2 * (ct + 3), 1 + ll) = "-"
                        Else
                            outBgn(4 + l, 1 + ll) = rgeData(k + 3, ll)
                            outBgn(4 + l + ct + 3, 1 + ll) = rgeData(k + 4, ll)
                            outBgn(4 + l + 2 * (ct + 3), 1 + ll) = rgeData(k + 5, ll)
                        End If
                        ll = ll + 1
                    End If
                Next j
                l = l + 1
                k = k + ROWNUM_CRAM
            End If
        Next i
        Set MakeCateItemCorr = outBgn(1, 1).Resize(4 + l + 2 * (ct + 3) - 1, 1 + ll) 'rge
    Else
        outBgn(2, 1) = "|fffd|Y|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||202||fffd|"
        Set MakeCateItemCorr = outBgn(1, 1).Resize(2, 1)
    End If
End Function

Function MakeCateNumCorr(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, k As Long, l As Long, ll As Long
    Dim ct As Long
    Dim rge As Range, rgeData As Range, rgeOut As Range
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATENUMCORR_TITLE)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    If dataInfo.nItmNum > 0 And dataInfo.nItmCat > 0 Then
        Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATENUMCORR_STAT)
        rge.Copy outBgn(2, 1).Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
        outBgn(4, 1) = "|fffd||fffd||fffd||696||fffd|"
        Set rge = outBgn(2, 1).Resize(rge.Rows.Count, rge.Columns.Count)
        Set rge = AdjustTableByItm(TBLID_SR1_CATENUMCORR_STAT, rge, dataInfo.nItmCat)
        Set rge = AdjustTableByGrp(TBLID_SR1_CATENUMCORR_STAT, rge, dataInfo.nItmNum)
        rge(2, 2) = dataInfo.nSmpNum
        Set rgeOut = rge.Offset(rge.Rows.Count + 1, 0).Range("A1")
        Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATENUMCORR_PVAL)
        rge.Copy rgeOut.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
        rgeOut(2, 1) = "|fffd||fffd||fffd||696||fffd|"
        Set rge = rgeOut.Resize(rge.Rows.Count, rge.Columns.Count)
        Set rge = AdjustTableByItm(TBLID_SR1_CATENUMCORR_PVAL, rge, dataInfo.nItmCat)
        Set rge = AdjustTableByGrp(TBLID_SR1_CATENUMCORR_STAT, rge, dataInfo.nItmNum)
        Set rgeOut = rge.Offset(rge.Rows.Count + 1, 0).Range("A1")
        Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATENUMCORR_JUDGE)
        rge.Copy rgeOut.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
        rgeOut(1, 1) = "F|fffd||fffd||fffd||fffd||242||fffd||953b||fffd||fffd|"
        rgeOut(2, 1) = "|fffd||fffd||fffd||696||fffd|"
        Set rge = rgeOut.Resize(rge.Rows.Count, rge.Columns.Count)
        Set rge = AdjustTableByItm(TBLID_SR1_CATENUMCORR_JUDGE, rge, dataInfo.nItmCat)
        Set rge = AdjustTableByGrp(TBLID_SR1_CATENUMCORR_STAT, rge, dataInfo.nItmNum)
        Set rgeData = SbkThis.Worksheets(SHT_RST).Columns("B")
        Set rgeData = rgeData.Find("|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd|i|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd|f|fffd|[|fffd|^|fffd||190||fffd||fffd||283|f|fffd|[|fffd|^|fffd|j|fffd||fffd||fffd||742||311||fffd||fffd||58c|W|fffd||fffd|")
        'rgeData(2, 1).Resize(ct * ROWNUM_CRAM, ct).Copy
        l = 1
        k = 0
        ct = dataInfo.nItmCat
        For i = 1 To dataInfo.nItm
            If dataInfo.items(i).kind = 2 Then
                ll = 1
                For j = 1 To dataInfo.nItm
                    If dataInfo.items(j).kind = 3 Then
                        outBgn(4, 1 + ll) = dataInfo.items(j).Name
                        outBgn(4 + ct + 3, 1 + ll) = dataInfo.items(j).Name
                        outBgn(4 + 2 * (ct + 3), 1 + ll) = dataInfo.items(j).Name
                        outBgn(4 + l, 1) = dataInfo.items(i).Name
                        outBgn(4 + l + ct + 3, 1) = dataInfo.items(i).Name
                        outBgn(4 + l + 2 * (ct + 3), 1) = dataInfo.items(i).Name
                        outBgn(4 + l, 1 + ll) = rgeData(k + 3, ll)
                        outBgn(4 + l + ct + 3, 1 + ll) = rgeData(k + 4, ll)
                        outBgn(4 + l + 2 * (ct + 3), 1 + ll) = rgeData(k + 5, ll)
                        ll = ll + 1
                    End If
                Next j
                l = l + 1
                k = k + ROWNUM_CRAM
            End If
        Next i
        Set MakeCateNumCorr = outBgn(1, 1).Resize(4 + l + 2 * (ct + 3) - 1, 1 + ll) 'rge
    Else
        outBgn(2, 1) = "|fffd||fffd||fffd||58c|W|fffd||fffd|"
        outBgn(3, 1) = "|fffd|Y|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||202||fffd|"
        Set MakeCateNumCorr = outBgn(1, 1).Resize(3, 1)
    End If
End Function

Function MakeNumItemCorr(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, k As Long, l As Long, ll As Long
    Dim ct As Long
    Dim rge As Range, rgeData As Range, rgeOut As Range
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_NUMITEMCORR_TITLE)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    If dataInfo.nItmNum > 1 Then
        Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_NUMITEMCORR_STAT)
        rge.Copy outBgn(2, 1).Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
        outBgn(4, 1) = "|fffd||fffd||fffd||696||fffd|"
        Set rge = outBgn(2, 1).Resize(rge.Rows.Count, rge.Columns.Count)
        Set rge = AdjustTableByItm(TBLID_SR1_NUMITEMCORR_STAT, rge, dataInfo.nItmNum)
        Set rge = AdjustTableByGrp(TBLID_SR1_NUMITEMCORR_STAT, rge, dataInfo.nItmNum)
        rge(2, 2) = dataInfo.nSmpNum
        Set rgeOut = rge.Offset(rge.Rows.Count + 1, 0).Range("A1")
        Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_NUMITEMCORR_PVAL)
        rge.Copy rgeOut.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
        rgeOut(2, 1) = "|fffd||fffd||fffd||696||fffd|"
        Set rge = rgeOut.Resize(rge.Rows.Count, rge.Columns.Count)
        Set rge = AdjustTableByItm(TBLID_SR1_NUMITEMCORR_PVAL, rge, dataInfo.nItmNum)
        Set rge = AdjustTableByGrp(TBLID_SR1_NUMITEMCORR_STAT, rge, dataInfo.nItmNum)
        Set rgeOut = rge.Offset(rge.Rows.Count + 1, 0).Range("A1")
        Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_NUMITEMCORR_JUDGE)
        rge.Copy rgeOut.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
        rgeOut(1, 1) = "|fffd||fffd||fffd||fffd||fffd||582||30c||fffd||fffd||fffd||242||fffd||953b||fffd||fffd|"
        rgeOut(2, 1) = "|fffd||fffd||fffd||696||fffd|"
        Set rge = rgeOut.Resize(rge.Rows.Count, rge.Columns.Count)
        Set rge = AdjustTableByItm(TBLID_SR1_NUMITEMCORR_JUDGE, rge, dataInfo.nItmNum)
        Set rge = AdjustTableByGrp(TBLID_SR1_NUMITEMCORR_STAT, rge, dataInfo.nItmNum)
        Set rgeData = SbkThis.Worksheets(SHT_RST).Columns("B")
        Set rgeData = rgeData.Find("|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd|i|fffd||fffd||fffd||283|f|fffd|[|fffd|^|fffd|j|fffd||fffd||fffd||742||311||fffd||fffd||58c|W|fffd||fffd|")
        l = 1
        k = 0
        ct = dataInfo.nItmNum
        For i = 1 To dataInfo.nItm
            If dataInfo.items(i).kind = 3 Then
                ll = 1
                For j = 1 To dataInfo.nItm
                    If dataInfo.items(j).kind = 3 Then
                        If i = j Then
                            outBgn(4 + l, 1 + ll) = "-"
                            outBgn(4 + l + ct + 3, 1 + ll) = "-"
                            outBgn(4 + l + 2 * (ct + 3), 1 + ll) = "-"
                        Else
                            outBgn(4, 1 + ll) = dataInfo.items(j).Name
                            outBgn(4 + ct + 3, 1 + ll) = dataInfo.items(j).Name
                            outBgn(4 + 2 * (ct + 3), 1 + ll) = dataInfo.items(j).Name
                            outBgn(4 + l, 1) = dataInfo.items(i).Name
                            outBgn(4 + l + ct + 3, 1) = dataInfo.items(i).Name
                            outBgn(4 + l + 2 * (ct + 3), 1) = dataInfo.items(i).Name
                            outBgn(4 + l, 1 + ll) = rgeData(k + 3, ll)
                            outBgn(4 + l + ct + 3, 1 + ll) = rgeData(k + 4, ll)
                            outBgn(4 + l + 2 * (ct + 3), 1 + ll) = rgeData(k + 5, ll)
                        End If
                        ll = ll + 1
                    End If
                Next j
                l = l + 1
                k = k + ROWNUM_CRAM
            End If
        Next i
        Set MakeNumItemCorr = outBgn(1, 1).Resize(4 + l + 2 * (ct + 3) - 1, 1 + ll) 'rge
    Else
        outBgn(2, 1) = "|fffd|P|fffd||fffd||fffd||58c|W|fffd||fffd|"
        outBgn(3, 1) = "|fffd|Y|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||202||fffd|"
        Set MakeNumItemCorr = outBgn(1, 1).Resize(3, 1)
    End If
End Function

Function MakeItemScore(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, k As Long, l As Long
    Dim rge As Range
    Dim v As Variant
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_ITEMSCORE)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    l = 1
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            l = l + dataInfo.items(i).NewCateNum - 1
        Else
            l = l + 1
        End If
    Next i
        
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_SR1_ITEMSCORE, rge, l)
    
    Set outBgn = rge
    
    k = 3
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            For j = 1 To dataInfo.items(i).NewCateNum - 1
                outBgn(k, 1) = dataInfo.items(i).Cate(dataInfo.items(i).NewCates(j - 1)).Name
                k = k + 1
            Next j
        Else
            outBgn(k, 1) = dataInfo.items(i).Name
            k = k + 1
        End If
    Next i
    
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd|X|fffd|R|fffd|A")
    #If 1 Then
    rge(2, 1).Resize(l, 2).Copy
    outBgn(3, 2).PasteSpecial xlPasteValues
    'If dataInfo.nFuncId = 3 And dataInfo.nSmpNum < g_aDialog.dlgGs.nLmtSmp1 Then
    '    outBgn.Worksheet.Rows(outBgn.Row + 3).Delete
    'End If
    #Else
    l = 1
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            l = l + dataInfo.items(i).NewCateNum - 1
        Else
            l = l + 1
        End If
    Next i
    v = rge(2, 1).Resize(l, 2).Value
    k = 2
    l = 1
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            For j = 1 To dataInfo.items(i).NewCateNum - 1
                outBgn(k + dataInfo.items(i).NewCates(j - 1), 2) = v(l, 1)
                outBgn(k + dataInfo.items(i).NewCates(j - 1), 3) = v(l, 2)
                k = k + 1
                l = l + 1
            Next j
        Else
            outBgn(k, 2) = v(l, 1)
            outBgn(k, 3) = v(l, 2)
            k = k + 1
            l = l + 1
        End If
    Next i
    outBgn(k, 2) = v(l, 1)
    outBgn(k, 3) = v(l, 2)
    #End If
    Set MakeItemScore = outBgn
End Function

Function MakeCateScore(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, k As Long, l As Long
    Dim rge As Range
    Dim aryCate(1 To MAX_XNUM) As Long
    Dim v As Variant
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATESCORE)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_SR1_CATESCORE, rge, dataInfo.nItm)
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            aryCate(i) = dataInfo.items(i).CateNum
        ElseIf dataInfo.items(i).kind = 3 Then
            If dataInfo.bNumCate Then
                aryCate(i) = dataInfo.items(i).NumCate
            Else
                aryCate(i) = 1
            End If
        End If
    Next i
    Set rge = AdjustTableByCat(TBLID_SR1_CATESCORE, rge, aryCate, dataInfo.nItm)
    
    Application.CutCopyMode = False
    
    l = 3
    For i = 1 To dataInfo.nItm
        rge(l, 1) = dataInfo.items(i).Name
        If dataInfo.items(i).kind = 2 Then
            For j = 1 To dataInfo.items(i).CateNum
                rge(l, 2) = dataInfo.items(i).Cate(j).Name
                l = l + 1
            Next j
        Else
            If dataInfo.bNumCate Then
                For j = 1 To dataInfo.items(i).NumCate
                    rge(l, 2) = dataInfo.items(i).Cate(j).Name
                    l = l + 1
                Next j
            Else
                rge(l, 2) = dataInfo.items(i).Cate(1).Name
                l = l + 1
            End If
        End If
        'l = l + IIf(dataInfo.items(i).kind = 2, dataInfo.items(i).CateNum, dataInfo.items(i).NumCate)
    Next i
    
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||fffd||fffd|f|fffd||fffd||fffd||fffd|")
    #If 0 Then
    rge(3, 1).Resize(l - 2, 3).Copy
    outBgn(3, 3).PasteSpecial xlPasteValues

    'If dataInfo.nFuncId = 3 And dataInfo.nSmpNum < g_aDialog.dlgGs.nLmtSmp1 Then
    '    outBgn.Worksheet.Rows(outBgn.Row + 3).Delete
    '    l = l - 1
    'End If
    #Else
    l = 3
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            l = l + dataInfo.items(i).NewCateNum
        Else
            If dataInfo.bNumCate Then
                l = l + dataInfo.items(i).NumCate
            Else
                l = l + 1
            End If
        End If
    Next i
    v = rge(3, 1).Resize(l - 2, 3).Value
    l = 3
    k = 1
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            For j = 1 To dataInfo.items(i).CateNum
                outBgn(l - 1 + j, 3) = "|fffd|G|fffd||fffd||fffd|["
                outBgn(l - 1 + j, 4) = "|fffd|G|fffd||fffd||fffd|["
                outBgn(l - 1 + j, 5) = "|fffd|G|fffd||fffd||fffd|["
            Next j
            For j = 1 To dataInfo.items(i).NewCateNum
                outBgn(l - 1 + dataInfo.items(i).NewCates(j - 1), 3) = v(k, 1)
                outBgn(l - 1 + dataInfo.items(i).NewCates(j - 1), 4) = v(k, 2)
                outBgn(l - 1 + dataInfo.items(i).NewCates(j - 1), 5) = v(k, 3)
                k = k + 1
            Next j
            l = l + dataInfo.items(i).CateNum
        Else
            If dataInfo.bNumCate Then
                For j = 1 To dataInfo.items(i).NumCate
                    outBgn(l - 1 + j, 3) = "|fffd|G|fffd||fffd||fffd|["
                    outBgn(l - 1 + j, 4) = "|fffd|G|fffd||fffd||fffd|["
                    outBgn(l - 1 + j, 5) = "|fffd|G|fffd||fffd||fffd|["
                Next j
                For j = 1 To dataInfo.items(i).NumCate
                    outBgn(l - 1 + j, 3) = v(k, 1)
                    outBgn(l - 1 + j, 4) = v(k, 2)
                    outBgn(l - 1 + j, 5) = v(k, 3)
                    k = k + 1
                Next j
                l = l + dataInfo.items(i).NumCate
            Else
                'outBgn(l, 3) = "|fffd|G|fffd||fffd||fffd|["
                'outBgn(l, 4) = "|fffd|G|fffd||fffd||fffd|["
                'outBgn(l, 5) = "|fffd|G|fffd||fffd||fffd|["
                outBgn(l, 3) = v(k, 1)
                outBgn(l, 4) = v(k, 2)
                outBgn(l, 5) = v(k, 3)
                l = l + 1
                k = k + 1
            End If
        End If
    Next i
    outBgn(l, 3) = v(k, 1)
    outBgn(l, 4) = v(k, 2)
    #End If
    
    DrawSr1CateScore outBgn(2, 8), outBgn(3, 1).Resize(l - 3, 3), dataInfo
    
    If outBgn.Rows.Count < 17 Then
        Set outBgn = outBgn(1, 1).Resize(17, outBgn.Columns.Count)
    End If
    
    Set MakeCateScore = outBgn
    
End Function

Function MakeSmpScore(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, k As Long, l As Long
    Dim rge As Range
    Dim ctNew(1) As Long
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_SMPSCORE)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    ctNew(1) = dataInfo.nVarSmpNum
    Set rge = AdjustTableByCat(TBLID_SR1_SMPSCORE, rge, ctNew, 1)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge

    For i = 1 To dataInfo.nVarSmpNum
        outBgn(2 + i, 1) = SbkThis.Sheets("Sr1Data").Cells(i + 1, 1)
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd|X|fffd|R|fffd|A|fffd|\")
    rge(3, 2).Resize(dataInfo.nVarSmpNum, 4).Copy
    outBgn(3, 2).PasteSpecial xlPasteValues
    outBgn(1, 1) = "|fffd|\|fffd||fffd||fffd|\"
    outBgn(2, 1) = "|fffd||fffd||fffd||fffd|"
    outBgn(2, 3) = "|fffd|\|fffd||fffd||fffd|l"
    Application.CutCopyMode = False
    
    Set MakeSmpScore = outBgn
End Function

Function MakeObjectiveItem(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, l As Long
    Dim rge As Range
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_OBJECTIVEITEM)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_SR1_OBJECTIVEITEM, rge, dataInfo.nItm)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    
    For i = 1 To dataInfo.nItm
        outBgn(2 + i, 1) = dataInfo.items(i).Name
    Next i
    
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||fffd||fffd||fffd||fffd|W|fffd|E|fffd||693|I|fffd||3d0||fffd||fffd||183|A|fffd|C|fffd|e|fffd||fffd||fffd||311||fffd||fffd||58c|W|fffd||fffd|")
    rge(2, 2).Resize(dataInfo.nItm, 6).Copy
    outBgn(3, 2).PasteSpecial xlPasteValues

    Application.CutCopyMode = False
    
    For i = 1 To dataInfo.nItm
        If IsNumeric(outBgn(2 + i, 2)) Then
            outBgn(2 + i, 3) = WorksheetFunction.Rank(outBgn(2 + i, 2), outBgn(3, 2).Resize(dataInfo.nItm, 1)) & "|fffd||fffd|"
        End If
        outBgn(2 + i, 5) = WorksheetFunction.Rank(outBgn(2 + i, 4), outBgn(3, 4).Resize(dataInfo.nItm, 1)) & "|fffd||fffd|"
        outBgn(2 + i, 7) = WorksheetFunction.Rank(outBgn(2 + i, 6), outBgn(3, 6).Resize(dataInfo.nItm, 1)) & "|fffd||fffd|"
    Next i
    Set MakeObjectiveItem = outBgn
End Function

Function MakeItemCorr(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, l As Long
    Dim rge As Range
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_ITEMCORR)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_SR1_ITEMCORR, rge, dataInfo.nItm)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    
    For i = 1 To dataInfo.nItm
        outBgn(2, i + 2) = dataInfo.items(i).Name
        outBgn(3 + (i - 1) * 3, 1) = dataInfo.items(i).Name
    Next i
    
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||511||fffd||fffd||742||312|P|fffd||fffd||fffd||58c|W|fffd||fffd|")
    rge(2, 1).Resize(dataInfo.nItm * 3, dataInfo.nItm).Copy
    outBgn(3, 3).PasteSpecial xlPasteValues
    
    Application.CutCopyMode = False
    
    For i = 1 To dataInfo.nItm
        outBgn(3 + (i - 1) * 3, 2 + i).NumberFormatLocal = "0"
    Next i
    
    Set MakeItemCorr = outBgn
End Function

Function MakeAccuracy(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, l As Long
    Dim rge As Range
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_ACCURACY)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set outBgn = rge
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||fffd||fffd||350||fffd||fffd|x")
    rge(2, 1).Resize(5, 1).Copy
    outBgn(2, 2).PasteSpecial xlPasteValues
    Application.CutCopyMode = False
    
    Set MakeAccuracy = outBgn
End Function

Function MakeAOV(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, l As Long
    Dim rge As Range
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_AOV)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_SR1_AOV, rge, dataInfo.nItm)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    
    For i = 1 To dataInfo.nItm
        outBgn(3 + i, 1) = dataInfo.items(i).Name
    Next i
    
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||fffd||fffd|U|fffd||fffd||fffd||355|\")
    rge(2, 1).Resize(dataInfo.nItm + 3, 6).Copy
    outBgn(3, 2).PasteSpecial xlPasteValues

    'If dataInfo.nFuncId = 3 And dataInfo.nSmpNum < g_aDialog.dlgGs.nLmtSmp1 Then
    '    outBgn.Worksheet.Rows(outBgn.Row + 4).Delete
    'End If
    
    Application.CutCopyMode = False
    
    Set MakeAOV = outBgn
End Function

Function MakeCateItemInfo1(ByVal itemNo As Long, ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, l As Long
    Dim rge As Range
    Dim v As Variant
    Dim NewCateNum As Long
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATEITEMINFO1)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_SR1_CATEITEMINFO1, rge, dataInfo.items(itemNo).CateNum)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    outBgn(1, 1) = dataInfo.items(itemNo).Name
    For i = 1 To dataInfo.items(itemNo).CateNum
        outBgn(1, 2 + i) = dataInfo.items(itemNo).Cate(i).Name
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("CateItemInfo" & itemNo)
    'rge(2, 1).Resize(2, dataInfo.items(itemNo).CateNum + 1).Copy
    'outBgn(2, 3).PasteSpecial xlPasteValues
    
    'Application.CutCopyMode = False
    v = rge(2, 1).Resize(2, dataInfo.items(itemNo).CateNum + 1).Value
    For i = 1 To dataInfo.items(itemNo).CateNum
        outBgn(2, 2 + i) = 0
        outBgn(3, 2 + i) = 0
    Next i
    NewCateNum = dataInfo.items(itemNo).NewCateNum
    For i = 1 To NewCateNum
        outBgn(2, 2 + dataInfo.items(itemNo).NewCates(i - 1)) = v(1, i)
        outBgn(3, 2 + dataInfo.items(itemNo).NewCates(i - 1)) = v(2, i)
    Next i
    outBgn(2, 2 + dataInfo.items(itemNo).CateNum + 1) = v(1, 1 + NewCateNum)
    outBgn(3, 2 + dataInfo.items(itemNo).CateNum + 1) = v(2, 1 + NewCateNum)
    
    Set MakeCateItemInfo1 = outBgn
End Function

Function MakeCateItemInfo2(ByVal itemNo As Long, ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, l As Long
    Dim rge As Range

    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_CATEITEMINFO2)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_SR1_CATEITEMINFO2, rge, dataInfo.items(itemNo).NumCate)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    outBgn(1, 1) = dataInfo.items(itemNo).Name
    For i = 1 To dataInfo.items(itemNo).NumCate
        outBgn(1, 2 + i) = dataInfo.items(itemNo).Cate(i).Code
        outBgn(2, 2 + i) = dataInfo.items(itemNo).Cate(i).Name
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("CateItemInfo" & itemNo)
    rge(2, 1).Resize(2, dataInfo.items(itemNo).NumCate + 1).Copy
    outBgn(3, 3).PasteSpecial xlPasteValues
    
    Application.CutCopyMode = False
    
    Set MakeCateItemInfo2 = outBgn
End Function

Function MakeCateItemInfo(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, l As Long
    Dim rge As Range, rgeOut As Range
    
    outBgn(1, 1) = "|fffd||fffd||fffd|I|fffd|f|fffd|[|fffd|^|fffd||30a||fffd|{|fffd|W|fffd|v"
    outBgn(1, 1).Font.Bold = True
    If dataInfo.nItmCat > 0 Or dataInfo.bNumCate Then
        Set rge = outBgn(1, 1)
        For i = 1 To dataInfo.nItm
            If dataInfo.items(i).kind = 2 Then
                Set rgeOut = rge.Offset(rge.Rows.Count + 1, 0)
                Set rge = MakeCateItemInfo1(i, rgeOut, dataInfo)
            ElseIf dataInfo.bNumCate Then
                Set rgeOut = rge.Offset(rge.Rows.Count + 1, 0)
                Set rge = MakeCateItemInfo2(i, rgeOut, dataInfo)
            End If
        Next i
        
        Set MakeCateItemInfo = rge
    Else
        outBgn(2, 1) = "|fffd|Y|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||202||fffd|"
        Set MakeCateItemInfo = outBgn(1, 1).Resize(2, 1)
    End If
End Function

Function MakeNumItemInfo(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, l As Long
    Dim rge As Range

    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_NUMITEMINFO)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = AdjustTableByItm(TBLID_SR1_NUMITEMINFO, rge, dataInfo.nItmNum + 1)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge

    outBgn(2, 2) = dataInfo.ObjVarName
    j = 1
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 3 Then
            outBgn(2, 2 + j) = dataInfo.items(i).Name
            j = j + 1
        End If
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||fffd||fffd||283|f|fffd|[|fffd|^|fffd||30a||fffd|{|fffd|W|fffd|v")
    rge(2, 1).Resize(19, dataInfo.nItmNum + 1).Copy
    outBgn(3, 2).PasteSpecial xlPasteValues
    
    Application.CutCopyMode = False
    
    Set MakeNumItemInfo = outBgn
End Function

Function MakeExtraInfo(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, l As Long
    Dim rge As Range
    Dim ctNew(1) As Variant

    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_EXTRAINFO)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    ctNew(1) = dataInfo.nItm
    Set rge = AdjustTableByItm(TBLID_SR1_EXTRAINFO, rge, dataInfo.nItm)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge

    For i = 1 To dataInfo.nItm
        outBgn(2 + i, 1) = dataInfo.items(i).Name
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||1c9||fffd||fffd||fffd||fffd||30c||fffd||fffd||fffd|")
    rge(2, 2).Resize(ctNew(1), 6).Copy
    outBgn(3, 2).PasteSpecial xlPasteValues
    
    Application.CutCopyMode = False
    
    Set MakeExtraInfo = outBgn
End Function

Function MakeATARICMB1(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, l As Long
    Dim rge As Range
    Dim ctNew(1) As Variant

    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_ATARI_CMB1)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    ctNew(1) = dataInfo.nItm
    Set rge = AdjustTableByCat(TBLID_SR1_ATARI_CMB1, rge, ctNew, 1)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    outBgn(2, 2) = dataInfo.ObjVarName
    outBgn(2, 3) = ""
    For i = 1 To dataInfo.nItm
        outBgn(2 + i, 1) = "|fffd|A|fffd|C|fffd|e|fffd||fffd|" & i
        outBgn(2 + i, 2) = dataInfo.items(i).Name
        outBgn(2 + i, 3) = IIf(dataInfo.items(i).kind = 2, dataInfo.items(i).CateNum, 0)
    Next i
    Set MakeATARICMB1 = outBgn
End Function

Function MakeATARICMB2(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, l As Long
    Dim rge As Range
    Dim ctNew(1) As Variant

    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_ATARI_CMB2)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    ctNew(1) = WorksheetFunction.Power(2, dataInfo.nItm) - 1
    Set rge = AdjustTableByCat(TBLID_SR1_ATARI_CMB2, rge, ctNew, 1)
    Set rge = AdjustTableByItm(TBLID_SR1_ATARI_CMB2, rge, dataInfo.nItm)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge

    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd||fffd||fffd|v|fffd||fffd|-ATARI")
    rge(3, 1).Resize(ctNew(1), 18).Copy
    outBgn(2, 1).PasteSpecial xlPasteValues
    
    Application.CutCopyMode = False
    
    Set MakeATARICMB2 = outBgn
End Function

Function MakeATARICMB3(ByVal outBgn As Range, dataInfo As BasInfo, Optional ByVal flg As Long = 2) As Range
    Dim i As Long, j As Long, l As Long, m As Long, n As Long
    Dim rge As Range
    Dim ctNew() As Variant
    Dim v As Variant
    Dim ii As Long, jj As Long, ll As Long
    
    Set rge = SbkThis.Worksheets(SHT_TMP).Range(TMPRGE_SR1_ATARI_CMB3)
    rge.Copy outBgn.Range("A1").Resize(rge.Rows.Count, rge.Columns.Count)
    Set rge = outBgn.Resize(rge.Rows.Count, rge.Columns.Count)
    l = WorksheetFunction.Power(2, dataInfo.nItm) - 1
    ReDim ctNew(1 To 1)
    ctNew(1) = l
    'Set rge = AdjustTableByItm(TBLID_SR1_ATARI_CMB3, rge, l)
    Set rge = AdjustTableByCat(TBLID_SR1_ATARI_CMB3, rge, ctNew, 1)
    Set rge = AdjustTableByItm(TBLID_SR1_ATARI_CMB3_ITM, rge, dataInfo.nItm)

    ReDim ctNew(1 To dataInfo.nItm)
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            If flg = 2 Then
                ctNew(i) = dataInfo.items(i).NewCateNum
            Else
                ctNew(i) = dataInfo.items(i).CateNum
            End If
        ElseIf dataInfo.items(i).kind = 3 Then
            If dataInfo.bNumCate Then
                ctNew(i) = dataInfo.items(i).NumCate
            Else
                ctNew(i) = 1
            End If
        End If
    Next i
    Set rge = AdjustTableByCat(TBLID_SR1_ATARI_CMB3_CATE, rge, ctNew, dataInfo.nItm)
    
    Application.CutCopyMode = False
    
    Set outBgn = rge
    l = 5
    For i = 1 To dataInfo.nItm
        outBgn(2, l) = dataInfo.items(i).Name
        If dataInfo.items(i).kind = 2 Then
            If flg = 2 Then
                For j = 1 To dataInfo.items(i).NewCateNum
                    outBgn(3, l) = dataInfo.items(i).Cate(dataInfo.items(i).NewCates(j - 1)).Name
                    l = l + 1
                Next j
            Else
                For j = 1 To dataInfo.items(i).CateNum
                    outBgn(3, l) = dataInfo.items(i).Cate(j).Name
                    l = l + 1
                Next j
            End If
        Else
            If dataInfo.bNumCate Then
                For j = 1 To dataInfo.items(i).NumCate
                    outBgn(3, l) = dataInfo.items(i).Cate(j).Name
                    l = l + 1
                Next j
            Else
                outBgn(3, l) = dataInfo.items(i).Cate(1).Name
                l = l + 1
            End If
        End If
    Next i
    Set rge = SbkThis.Worksheets(SHT_RST).Columns("B")
    Set rge = rge.Find("|fffd|J|fffd|e|fffd|S|fffd||fffd||fffd|[|fffd|X|fffd|R|fffd|A-ATARI")
    l = WorksheetFunction.Power(2, dataInfo.nItm) - 1
    rge(3, 1).Resize(l, 100).Copy
    outBgn(4, 1).PasteSpecial xlPasteValues

    Application.CutCopyMode = False
    
    Set MakeATARICMB3 = outBgn
End Function

Sub DrawSr1CateScore(ByVal oRge As Range, ByVal dataRge As Range, dataInfo As BasInfo)
    Dim i As Long
    Dim tmpstr As String
    Dim xAxis As Long, yAxis As Long, NameDisp As Long
    Dim tmpRge As Range
    NameDisp = IIf(dataInfo.sr1Grp.bCateName, 1, 0)
    tmpstr = vbNullString
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 2 Then
            tmpstr = tmpstr & "," & dataInfo.items(i).CateNum
        Else
            If dataInfo.bNumCate Then
                tmpstr = tmpstr & "," & dataInfo.items(i).NumCate
            Else
                tmpstr = tmpstr & "," & 1
            End If
        End If
    Next i
    tmpstr = Mid(tmpstr, 2)
    Set tmpRge = dataRge(1, 2).Resize(dataRge.Rows.Count, dataRge.Columns.Count - 1)
    Application.Run GxlaBkGraph2 & "!DrawSr2CateScore1", oRge.Worksheet.Name, _
                        Comm_toXlRCstr(oRge.Address), _
                        Comm_toXlRCstr(tmpRge.Columns(3).Address), _
                        "XRge=" & Comm_toXlRCstr(tmpRge.Columns(1).Address) & _
                        "&AxesNo=" & 1 & "&Rows=16&Cols=8&Cates=" & tmpstr & "&GrpType=1"
    Set oRge = oRge.Offset(0, 9)
End Sub

Sub DrawSr1LogGrp(ByVal oRge As Range, ByVal dataRge As Range, dataInfo As BasInfo)
    Dim i As Long
    Dim tmpstr As String
    Dim xAxis As Long, yAxis As Long, NameDisp As Long
    Dim tmpRge As Range
    Set tmpRge = dataRge(1, 1).Resize(dataInfo.nSmpNum, 1)
    Application.Run GxlaBkGraph2 & "!DrawSr1LogGrp", oRge.Worksheet.Name, _
                        Comm_toXlRCstr(oRge.Range("A1").Address), _
                        Comm_toXlRCstr(tmpRge.Address), _
                        "SmpNum=" & dataInfo.nSmpNum
    Set oRge = oRge.Offset(0, 9)
End Sub

Private Function AdjustTableByItm(tblId As Long, ByVal tblRge As Range, xNew As Long) As Range
    
    Dim rowCnt As Long, colCnt As Long, rowCntNew As Long, colCntNew As Long
    Dim dx As Long, cnt As Long
    Dim tmpRge As Range
    Dim height As Long, tmpi As Long
    Dim i As Long
    
    rowCnt = tblRge.Rows.Count
    colCnt = tblRge.Columns.Count
    dx = xNew - TMP_INUM
    
    Select Case tblId
    
        Case TBLID_SR1_CATEAVG
            
            height = TMP_CNUM
            
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 1).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tblRge.Rows(rowCntNew + 1).Resize(Abs(cnt), colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_SR1_CROSSTABLE, TBLID_SR1_CATECORR
            
            height = TMP_CNUM
            
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt + cnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 1).Resize(height, colCnt), dx)
                Call doInsRowCol(False, tblRge.Columns(colCnt - 1).Resize(rowCntNew, height), dx)
            ElseIf dx < 0 Then
                tblRge.Rows(rowCntNew).Resize(Abs(cnt), colCnt).Delete Shift:=xlUp
                tblRge.Columns(colCntNew).Resize(rowCntNew, Abs(cnt)).Delete Shift:=xlToLeft
            End If
            
        Case TBLID_SR1_CRAM
            
            height = ROWNUM_CRAM 'old: 3, 11.8.20 LSQ mdf
            
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = IIf(dx > 0, xNew + 1, 4)
            
            'table without legend
            tmpi = ROWNUM_CRAM + 4
            rowCnt = rowCnt - tmpi
            colCnt = colCnt - 1
            
            Set tmpRge = tblRge.Offset(tmpi, 0).Resize(rowCnt, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(True, tmpRge.Rows(rowCnt - ROWNUM_CRAM + 1).Resize(height, colCnt), dx)
                Call doInsRowCol(False, tmpRge.Resize(rowCnt + cnt, colCnt).Columns(colCnt - 1), dx)
            ElseIf dx < 0 Then
                tmpRge.Rows(2).Resize(height, colCnt).Delete Shift:=xlUp
                tmpRge.Columns(2).Resize(rowCnt, 1).Delete Shift:=xlToLeft
            End If
            
        Case TBLID_SR1_OBJECTIVEITEM
            
            cnt = dx
            rowCntNew = rowCnt + dx
            colCntNew = colCnt
            If dx > 0 Then
                For i = 1 To dx
                    tblRge.Rows(rowCnt).Resize(1, colCnt).Insert Shift:=xlDown
                Next i
            ElseIf dx < 0 Then
                tblRge.Rows(rowCntNew + 1).Resize(Abs(cnt), colCnt).Delete Shift:=xlUp
            End If
        
        Case TBLID_SR1_ITEMCORR
            
            height = 3
            
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt + dx
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 2).Resize(height, colCnt), dx)
                Call doInsRowCol(False, tblRge.Columns(colCnt - 1).Resize(rowCntNew, 1), dx)
            ElseIf dx < 0 Then
                tblRge.Rows(rowCntNew + 1).Resize(Abs(cnt), colCnt).Delete Shift:=xlUp
                tblRge.Columns(colCntNew + 1).Resize(rowCntNew, Abs(cnt)).Delete Shift:=xlToLeft
            End If

        Case TBLID_SR1_AOV
            
            height = 1
            cnt = dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 2).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tblRge.Rows(5).Resize(Abs(cnt), colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_SR1_CORR
            
            rowCntNew = rowCnt
            colCntNew = colCnt + dx
            
            Set tmpRge = tblRge.Offset(7, 0).Resize(rowCnt - 7, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(False, tmpRge.Columns(2), dx)
            ElseIf dx < 0 Then
                tmpRge.Columns(2).Delete Shift:=xlToLeft
            End If
            
        Case TBLID_EIGEN
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            Set tmpRge = tblRge.Offset(0, 0).Resize(rowCnt, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(True, tmpRge.Rows(rowCnt - 1).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tmpRge.Rows(2).Resize(height, colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_SR1_CATESCORE
            
            height = TMP_CNUM
            
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 2).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tblRge.Rows(rowCntNew).Resize(Abs(cnt), colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_SR1_ITEMSCORE
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 1), dx, False)
            ElseIf dx < 0 Then
                tblRge.Rows(rowCnt - 1).Delete Shift:=xlUp
            End If
            
        Case TBLID_NUMCATE
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            Set tmpRge = tblRge.Offset(0, 0).Resize(rowCnt, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(True, tmpRge.Rows(rowCnt - 1).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tmpRge.Rows(2).Resize(height, colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_EXTRAINFO
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            Set tmpRge = tblRge.Offset(0, 0).Resize(rowCnt, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(True, tmpRge.Rows(rowCnt - 1).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tmpRge.Rows(2).Resize(height, colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_SR1_CATEITEMINFO1
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt
            colCntNew = colCnt + cnt
            
            If dx > 0 Then
                Call doInsRowCol(False, tblRge.Columns(3), dx)
            ElseIf dx < 0 Then
                tblRge.Columns(2).Delete Shift:=xlToLeft
            End If
        
        Case TBLID_SR1_CATEITEMINFO2
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt
            colCntNew = colCnt + cnt
            
            If dx > 0 Then
                Call doInsRowCol(False, tblRge.Columns(3), dx)
            ElseIf dx < 0 Then
                tblRge.Columns(3).Delete Shift:=xlToLeft
            End If
           
        Case TBLID_SR1_NUMITEMINFO
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt
            colCntNew = colCnt + cnt
            
            If dx > 0 Then
                Call doInsRowCol(False, tblRge.Columns(2), dx, False)
            ElseIf dx < 0 Then
                tblRge.Columns(2).Delete Shift:=xlToLeft
            End If
            
        Case TBLID_SR1_OBJECTIVECORR
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            Set tmpRge = tblRge.Offset(0, 0).Resize(rowCnt, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(True, tmpRge.Rows(rowCnt - 1).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tmpRge.Rows(3).Resize(height, colCnt).Delete Shift:=xlUp
            End If
        
        Case TBLID_SR1_EXTRAINFO
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            Set tmpRge = tblRge.Offset(0, 0).Resize(rowCnt, colCnt)
            
            If dx > 0 Then
                Call doInsRowCol(True, tmpRge.Rows(rowCnt - 1).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tmpRge.Rows(2).Resize(height, colCnt).Delete Shift:=xlUp
            End If
        
        Case TBLID_SR1_CATEITEMCORR_STAT
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt + cnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 1).Resize(height, colCnt), dx, False)
                Call doInsRowCol(False, tblRge.Columns(2), dx, False)
            ElseIf dx < 0 Then
                tblRge.Rows(4).Resize(height, colCnt).Delete Shift:=xlUp
                tblRge.Columns(2).Delete Shift:=xlToLeft
            End If
            
        Case TBLID_SR1_CATEITEMCORR_PVAL
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt + cnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 1).Resize(height, colCnt), dx, False)
                Call doInsRowCol(False, tblRge.Columns(2), dx, False)
            ElseIf dx < 0 Then
                tblRge.Rows(3).Resize(height, colCnt).Delete Shift:=xlUp
                tblRge.Columns(2).Delete Shift:=xlToLeft
            End If
            
        Case TBLID_SR1_CATEITEMCORR_JUDGE
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt + cnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 1).Resize(height, colCnt), dx, False)
                Call doInsRowCol(False, tblRge.Columns(2), dx, False)
            ElseIf dx < 0 Then
                tblRge.Rows(3).Resize(height, colCnt).Delete Shift:=xlUp
                tblRge.Columns(2).Delete Shift:=xlToLeft
            End If
            
        Case TBLID_SR1_CATENUMCORR_STAT, TBLID_SR1_CATENUMCORR_PVAL, TBLID_SR1_CATENUMCORR_JUDGE
            dx = xNew - 1
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 1).Resize(height, colCnt), dx, False)
            ElseIf dx < 0 Then
                tblRge.Rows(2).Resize(height, colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_SR1_NUMITEMCORR_STAT, TBLID_SR1_NUMITEMCORR_PVAL, TBLID_SR1_NUMITEMCORR_JUDGE
            dx = xNew - 1
            height = 1
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 1).Resize(height, colCnt), dx, False)
            ElseIf dx < 0 Then
                tblRge.Rows(2).Resize(height, colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_SR1_ATARI_CMB2
            rowCntNew = rowCnt
            colCntNew = colCnt + dx
            
            
            If dx > 0 Then
                Call doInsRowCol(False, tblRge.Columns(10), dx, False)
            ElseIf dx < 0 Then
                tblRge(1, 11) = tblRge(1, 10)
                tblRge.Columns(10).Delete Shift:=xlToLeft
            End If
            
        Case TBLID_SR1_ATARI_CMB3
            
            height = 1
            
            cnt = height * dx
            rowCntNew = rowCnt + cnt
            colCntNew = colCnt
            
            If dx > 0 Then
                Call doInsRowCol(True, tblRge.Rows(rowCnt - 2).Resize(height, colCnt), dx)
            ElseIf dx < 0 Then
                tblRge.Rows(rowCntNew + 1).Resize(Abs(cnt), colCnt).Delete Shift:=xlUp
            End If
            
        Case TBLID_SR1_ATARI_CMB3_ITM
            
            height = TMP_CNUM_ATARI 'TMP_CNUM
            
            cnt = height * dx
            rowCntNew = rowCnt
            colCntNew = colCnt + cnt
            
            If dx > 0 Then
                Call doInsRowCol(False, tblRge.Columns(colCnt - TMP_CNUM_ATARI + 1).Resize(rowCntNew, height), dx)
            ElseIf dx < 0 Then
                tblRge.Columns(colCntNew).Resize(rowCntNew, Abs(cnt)).Delete Shift:=xlToLeft
            End If
            
        Case Else
            
            rowCntNew = rowCnt
            colCntNew = colCnt
            
    End Select
    
    Set AdjustTableByItm = tblRge.Resize(rowCntNew, colCntNew)
    
End Function

Private Function AdjustTableByCat(tblId As Long, ByVal tblRge As Range, ctNew As Variant, cnt As Long) As Range
    
    Dim rowCnt As Long, colCnt As Long, rowCntNew As Long, colCntNew As Long
    Dim vPos() As Long, vChg() As Long
    Dim chg As Long
    Dim change As Long
    Dim i As Long
    
    rowCnt = tblRge.Rows.Count
    colCnt = tblRge.Columns.Count
    ReDim vPos(1 To cnt)
    ReDim vChg(1 To cnt)
    
    Select Case tblId
    
        Case TBLID_SR1_CATEAVG
            
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 5, 4) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_SR1_CROSSTABLE, TBLID_SR1_CATECORR
                        
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 4, 3) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt + change
            
            Set tblRge = tblRge.Offset(1, 0).Resize(rowCnt - 1, colCnt)
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            Set tblRge = tblRge.Resize(rowCntNew - 1, colCnt)
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            Set tblRge = tblRge.Offset(-1, 0)
            
        Case TBLID_SR1_CATESCORE
            
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 4, 3) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_SR1_SMPSCORE
            
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 4, 3) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_SR1_ATARI_CMB1
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 4, 3) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_SR1_ATARI_CMB2
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 3, 2) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_SR1_ATARI_CMB3
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 5, 4) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_SR1_ATARI_CMB3_CATE
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM_ATARI
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 6, 5) + TMP_CNUM_ATARI * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_SR1_OBJECTIVECORR
            For i = 1 To cnt
                chg = ctNew(i) - TMP_CNUM
                change = change + chg
                vChg(i) = chg
                vPos(i) = IIf(chg > 0, 4, 3) + TMP_CNUM * (i - 1)
            Next i
            
            rowCntNew = rowCnt + change
            colCntNew = colCnt
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
        Case Else
            
            rowCntNew = rowCnt
            colCntNew = colCnt
            
    End Select
    
    Set AdjustTableByCat = tblRge.Resize(rowCntNew, colCntNew)
    
End Function

Function AdjustTableByGrp(tblId As Long, ByVal tblRge As Range, gNew As Long) As Range
    
    Dim rowCnt As Long, colCnt As Long, rowCntNew As Long, colCntNew As Long
    Dim vPos(1 To 3) As Long, vChg(1 To 3) As Long
    Dim dg As Long
    Dim i As Long
    
    rowCnt = tblRge.Rows.Count
    colCnt = tblRge.Columns.Count
    dg = gNew - TMP_GNUM
    
    Select Case tblId
    
        Case TBLID_SR1_CATEAVG
            
            rowCntNew = rowCnt
            colCntNew = colCnt + 3 * dg
            
            vChg(1) = dg
            vChg(2) = dg
            vChg(3) = dg
            
            vPos(1) = 4: If dg > 0 Then vPos(1) = 4 + TMP_GNUM - 1
            vPos(2) = vPos(1) + TMP_GNUM + 1
            vPos(3) = vPos(2) + TMP_GNUM + 1
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_MODEL
            
            rowCntNew = rowCnt
            colCntNew = colCnt + dg
            
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 4: If dg > 0 Then vPos(1) = 4 + TMP_GNUM - 1
            vPos(2) = vPos(1) + TMP_GNUM + 1
            vPos(3) = vPos(2) + TMP_GNUM + 1
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_NUMCATE
            
            rowCntNew = rowCnt
            colCntNew = colCnt + dg
            
            vChg(1) = dg
            vChg(2) = dg
            vChg(3) = dg
            
            vPos(1) = 6: If dg > 0 Then vPos(1) = 6 + TMP_GNUM - 1
            vPos(2) = vPos(1) + TMP_GNUM + 1
            vPos(3) = vPos(2) + TMP_GNUM + 1
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_EXTRAINFO
            
            rowCntNew = rowCnt
            colCntNew = colCnt + dg
            
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 3: If dg > 0 Then vPos(1) = 3 + TMP_GNUM - 1
            vPos(2) = vPos(1) + TMP_GNUM + 1
            vPos(3) = vPos(2) + TMP_GNUM + 1
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_SMPSCORE
            
            rowCntNew = rowCnt
            colCntNew = colCnt + 2 * dg
            
            vChg(1) = dg
            vChg(2) = dg
            vChg(3) = 0
            
            vPos(1) = 2: If dg > 0 Then vPos(1) = 1 + TMP_GNUM - 1
            vPos(2) = vPos(1) + TMP_GNUM
            vPos(3) = vPos(2) + TMP_GNUM + 1
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_NTABLE, TBLID_HTABLE, TBLID_VTABLE
            rowCntNew = rowCnt + dg
            colCntNew = colCnt + dg
            
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 5: If dg > 0 Then vPos(1) = 4 + TMP_GNUM - 1
            vPos(2) = 0
            vPos(3) = 0
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 6: If dg > 0 Then vPos(1) = 5 + TMP_GNUM - 1
            vPos(2) = 0
            vPos(3) = 0
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_EIGEN
            rowCntNew = rowCnt
            colCntNew = colCnt + dg - 1
            vChg(1) = dg - 1
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 4: If dg > 0 Then vPos(1) = 4 + TMP_GNUM - 1
            vPos(2) = 0
            vPos(3) = 0
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
        
        Case TBLID_ASR
            rowCntNew = rowCnt + dg
            colCntNew = colCnt
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 5: If dg > 0 Then vPos(1) = 5 + TMP_GNUM - 1
            vPos(2) = 0
            vPos(3) = 0
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_BARY
            rowCntNew = rowCnt + dg
            colCntNew = colCnt + dg
            
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 2: If dg > 0 Then vPos(1) = 1 + TMP_GNUM - 1
            vPos(2) = 0
            vPos(3) = 0
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
            vChg(1) = dg
            vChg(2) = 0
            vChg(3) = 0
            
            vPos(1) = 3: If dg > 0 Then vPos(1) = 3 + TMP_GNUM - 1
            vPos(2) = 0
            vPos(3) = 0
            
            Set tblRge = AdjustRows(tblRge, vPos, vChg)
            
        Case TBLID_ATARI_CMB2
            rowCntNew = rowCnt
            colCntNew = colCnt + 2 * dg
            vChg(1) = dg
            vChg(2) = dg
            vChg(3) = 0
            
            vPos(1) = 5: If dg > 0 Then vPos(1) = 4 + TMP_GNUM - 1
            vPos(2) = vPos(1) + TMP_GNUM + 5
            vPos(3) = 0
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_SR1_CATENUMCORR_STAT, TBLID_SR1_CATENUMCORR_PVAL, TBLID_SR1_CATENUMCORR_JUDGE
            
            dg = gNew - 1
            rowCntNew = rowCnt
            colCntNew = colCnt + dg
            
            vChg(1) = dg
            vChg(2) = dg
            vChg(3) = dg
            
            vPos(1) = 2: If dg > 0 Then vPos(1) = 2
            vPos(2) = vPos(1) + 1
            vPos(3) = vPos(2) + 1
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case TBLID_SR1_NUMITEMCORR_STAT, TBLID_SR1_NUMITEMCORR_PVAL, TBLID_SR1_NUMITEMCORR_JUDGE
            
            dg = gNew - 1
            rowCntNew = rowCnt
            colCntNew = colCnt + dg
            
            vChg(1) = dg
            vChg(2) = dg
            vChg(3) = dg
            
            vPos(1) = 2: If dg > 0 Then vPos(1) = 2
            vPos(2) = vPos(1) + 1
            vPos(3) = vPos(2) + 1
            
            Set tblRge = AdjustCols(tblRge, vPos, vChg)
            
        Case Else
            
            rowCntNew = rowCnt
            colCntNew = colCnt
            
    End Select
    
    Set AdjustTableByGrp = tblRge.Resize(rowCntNew, colCntNew)
    
End Function

'
'adjust rows or columns
'11.8.14 LSQ
'
Private Sub doInsRowCol(ByVal bRow As Boolean, ByVal rge As Range, ByVal cnt As Long, Optional ByVal bCopy As Boolean = True)
    
    Dim rowCnt As Long, colCnt As Long
    
    rowCnt = rge.Rows.Count
    colCnt = rge.Columns.Count
    
    If bCopy Then rge.Copy
    
    If bRow Then
        rge.Offset(rowCnt, 0).Resize(rowCnt * cnt, colCnt).Insert Shift:=xlDown
    Else
        rge.Offset(0, colCnt).Resize(rowCnt, colCnt * cnt).Insert Shift:=xlToRight
    End If
    
    Application.CutCopyMode = False
    
End Sub

Function AdjustRows(ByVal rge As Range, vPos As Variant, vChg As Variant) As Range
    
    Set AdjustRows = AdjustRowCol(True, rge, vPos, vChg)
    
End Function

Function AdjustCols(ByVal rge As Range, vPos As Variant, vChg As Variant) As Range
    
    Set AdjustCols = AdjustRowCol(False, rge, vPos, vChg)
    
End Function
'
'Insert or Delete rows or columns
'Used mainly in category adjustment
'
'bRow : True = Row operation, False = Column operation
'
Private Function AdjustRowCol(ByVal bRow As Boolean, ByVal rge As Range, vPos As Variant, vChg As Variant) As Range
    
    Dim rowNum As Long, colNum As Long, rowNumNew As Long, colNumNew As Long
    Dim strAddr As String
    Dim pos As Long, chg As Long
    Dim change As Long
    Dim i As Long
    
    strAddr = rge.Range("A1").Address
    rowNum = rge.Rows.Count
    colNum = rge.Columns.Count
    change = 0
    
    For i = UBound(vPos) To LBound(vPos) Step -1
        pos = vPos(i)
        chg = vChg(i)
        change = change + chg
        
        If bRow Then
            If chg > 0 Then
                rge.Rows(pos).Resize(chg, colNum).Insert Shift:=xlDown
            ElseIf chg < 0 Then
                rge.Rows(pos).Resize(-chg, colNum).Delete Shift:=xlUp
                If Abs(chg) = 1 Then
                    rge.Rows(pos).Resize(1, colNum).Borders(xlEdgeTop).Weight = xlThin
                End If
            End If
        Else
            If chg > 0 Then
                rge.Columns(pos).Resize(rowNum, chg).Insert Shift:=xlToRight
            ElseIf chg < 0 Then
                rge.Columns(pos).Resize(rowNum, -chg).Delete Shift:=xlToLeft
                If Abs(chg) = 1 Then
                    rge.Columns(pos).Resize(rowNum, 1).Borders(xlEdgeLeft).Weight = xlThin
                End If
            End If
        End If
    Next i
    
    If bRow Then
        rowNumNew = rowNum + change
        colNumNew = colNum
    Else
        rowNumNew = rowNum
        colNumNew = colNum + change
    End If
    
    Set AdjustRowCol = rge.Worksheet.Range(strAddr).Resize(rowNumNew, colNumNew)
    
End Function

Function MakeTimeSeriesCorr(ByVal outBgn As Range, dataInfo As BasInfo) As Range
    Dim i As Long, j As Long, k As Long, l As Long
    Dim rge1 As Range, rge2 As Range
    Dim a As Double, b As Double
    Dim data1() As Double, data2() As Double
    Dim v1 As Variant, v2 As Variant
    ReDim data1(1 To dataInfo.nSmpNum)
    ReDim data2(1 To dataInfo.nSmpNum)
    outBgn = "|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||fffd|"
    outBgn(1, 2) = "|fffd||fffd||fffd|"
    outBgn(1, 3) = "|fffd||fffd||fffd||fffd|"
    Set rge1 = ThisWorkbook.Worksheets("Sr1Data").Range("B2").Resize(dataInfo.nSmpNum, 1)
    v1 = rge1.Value
    Set rge2 = ThisWorkbook.Worksheets("Sr1Data").Cells(2, 3).Resize(dataInfo.nSmpNum, 1)
    v2 = rge2.Value
    For i = 1 To dataInfo.nSmpNum
        data2(i) = v2(i, 1)
    Next i
    a = WorksheetFunction.Slope(rge2, rge1)
    b = WorksheetFunction.Intercept(rge2, rge1)
    For i = 1 To dataInfo.nSmpNum
        data1(i) = data2(i) - (a * i + b)
    Next i
    
    l = 2
    For i = 1 To dataInfo.nItm
        If dataInfo.items(i).kind = 3 Then
            Set rge2 = ThisWorkbook.Worksheets("Sr1Data").Cells(2, i + 3).Resize(dataInfo.nSmpNum, 1)
            v2 = rge2.Value
            For j = 1 To dataInfo.nSmpNum
                data2(j) = v2(j, 1)
            Next j
            a = WorksheetFunction.Slope(v2, v1)
            b = WorksheetFunction.Intercept(v2, v1)
            For j = 1 To dataInfo.nSmpNum
                data2(j) = data2(j) - (a * j + b)
            Next j
            a = WorksheetFunction.Correl(data1, data2)
            outBgn(l, 1) = dataInfo.items(i).Name
            outBgn(l, 2) = "|fffd||fffd||fffd|n|fffd||5128a||fffd|"
            outBgn(l, 3) = a
            outBgn(l, 3).NumberFormat = "0.000"
            l = l + 1
        End If
    Next i
    Erase data1
    Erase data2
    Call SetRangeBorder(outBgn.Resize(l - 1, 3), xlThin, xlThin, xlThin, xlThin, xlThin, xlThin)
    Set MakeTimeSeriesCorr = outBgn.Resize(l - 1, 3)
End Function
Attribute VB_Name = "MdlTableSr1A"
'=======================================================
' Sub of make table
'
' 2011.8 LSQ
'=======================================================
Option Explicit
Option Private Module

Function TMPRGE_SR1_CATEAVG() As String
    TMPRGE_SR1_CATEAVG = findAddr_TBL(TBLID_SR1_CATEAVG)
End Function

Function TMPRGE_SR1_OBJECTIVECORR() As String
    TMPRGE_SR1_OBJECTIVECORR = findAddr_TBL(TBLID_SR1_OBJECTIVECORR)
End Function

Function TMPRGE_SR1_CROSSTABLE() As String
    TMPRGE_SR1_CROSSTABLE = findAddr_TBL(TBLID_SR1_CROSSTABLE)
End Function

Function TMPRGE_SR1_CATECORR() As String
    TMPRGE_SR1_CATECORR = findAddr_TBL(TBLID_SR1_CATECORR)
End Function

Function TMPRGE_SR1_ACCURACY() As String
    TMPRGE_SR1_ACCURACY = findAddr_TBL(TBLID_SR1_ACCURACY)
End Function

Function TMPRGE_SR1_AOV() As String
    TMPRGE_SR1_AOV = findAddr_TBL(TBLID_SR1_AOV)
End Function

Function TMPRGE_SR1_CATESCORE() As String
    TMPRGE_SR1_CATESCORE = findAddr_TBL(TBLID_SR1_CATESCORE)
End Function

Function TMPRGE_SR1_CRAM() As String
    TMPRGE_SR1_CRAM = findAddr_TBL(TBLID_SR1_CRAM)
End Function

Function TMPRGE_SR1_ITEMCORR() As String
    TMPRGE_SR1_ITEMCORR = findAddr_TBL(TBLID_SR1_ITEMCORR)
End Function

Function TMPRGE_SR1_OBJECTIVEITEM() As String
    TMPRGE_SR1_OBJECTIVEITEM = findAddr_TBL(TBLID_SR1_OBJECTIVEITEM)
End Function

Function TMPRGE_SR1_SMPSCORE() As String
    TMPRGE_SR1_SMPSCORE = findAddr_TBL(TBLID_SR1_SMPSCORE)
End Function

Function TMPRGE_SR1_EXTRAINFO() As String
    TMPRGE_SR1_EXTRAINFO = findAddr_TBL(TBLID_SR1_EXTRAINFO)
End Function

Function TMPRGE_SR1_CATEITEMINFO1() As String
    TMPRGE_SR1_CATEITEMINFO1 = findAddr_TBL(TBLID_SR1_CATEITEMINFO1)
End Function

Function TMPRGE_SR1_CATEITEMINFO2() As String
    TMPRGE_SR1_CATEITEMINFO2 = findAddr_TBL(TBLID_SR1_CATEITEMINFO2)
End Function

Function TMPRGE_SR1_NUMITEMINFO() As String
    TMPRGE_SR1_NUMITEMINFO = findAddr_TBL(TBLID_SR1_NUMITEMINFO)
End Function

Function TMPRGE_SR1_CATEITEMCORR_TITLE() As String
    TMPRGE_SR1_CATEITEMCORR_TITLE = findAddr_TBL(TBLID_SR1_CATEITEMCORR_TITLE)
End Function

Function TMPRGE_SR1_CATEITEMCORR_STAT() As String
    TMPRGE_SR1_CATEITEMCORR_STAT = findAddr_TBL(TBLID_SR1_CATEITEMCORR_STAT)
End Function

Function TMPRGE_SR1_CATEITEMCORR_PVAL() As String
    TMPRGE_SR1_CATEITEMCORR_PVAL = findAddr_TBL(TBLID_SR1_CATEITEMCORR_PVAL)
End Function

Function TMPRGE_SR1_CATEITEMCORR_JUDGE() As String
    TMPRGE_SR1_CATEITEMCORR_JUDGE = findAddr_TBL(TBLID_SR1_CATEITEMCORR_JUDGE)
End Function

Function TMPRGE_SR1_CATENUMCORR_TITLE() As String
    TMPRGE_SR1_CATENUMCORR_TITLE = findAddr_TBL(TBLID_SR1_CATENUMCORR_TITLE)
End Function

Function TMPRGE_SR1_CATENUMCORR_STAT() As String
    TMPRGE_SR1_CATENUMCORR_STAT = findAddr_TBL(TBLID_SR1_CATENUMCORR_STAT)
End Function

Function TMPRGE_SR1_CATENUMCORR_PVAL() As String
    TMPRGE_SR1_CATENUMCORR_PVAL = findAddr_TBL(TBLID_SR1_CATENUMCORR_PVAL)
End Function

Function TMPRGE_SR1_CATENUMCORR_JUDGE() As String
    TMPRGE_SR1_CATENUMCORR_JUDGE = findAddr_TBL(TBLID_SR1_CATENUMCORR_JUDGE)
End Function

Function TMPRGE_SR1_NUMITEMCORR_TITLE() As String
    TMPRGE_SR1_NUMITEMCORR_TITLE = findAddr_TBL(TBLID_SR1_NUMITEMCORR_TITLE)
End Function

Function TMPRGE_SR1_NUMITEMCORR_STAT() As String
    TMPRGE_SR1_NUMITEMCORR_STAT = findAddr_TBL(TBLID_SR1_NUMITEMCORR_STAT)
End Function

Function TMPRGE_SR1_NUMITEMCORR_PVAL() As String
    TMPRGE_SR1_NUMITEMCORR_PVAL = findAddr_TBL(TBLID_SR1_NUMITEMCORR_PVAL)
End Function

Function TMPRGE_SR1_NUMITEMCORR_JUDGE() As String
    TMPRGE_SR1_NUMITEMCORR_JUDGE = findAddr_TBL(TBLID_SR1_NUMITEMCORR_JUDGE)
End Function

Function TMPRGE_SR1_ITEMSCORE() As String
    TMPRGE_SR1_ITEMSCORE = findAddr_TBL(TBLID_SR1_ITEMSCORE)
End Function

Function TMPRGE_SR1_ATARI_CMB1() As String
    TMPRGE_SR1_ATARI_CMB1 = findAddr_TBL(TBLID_SR1_ATARI_CMB1)
End Function

Function TMPRGE_SR1_ATARI_CMB2() As String
    TMPRGE_SR1_ATARI_CMB2 = findAddr_TBL(TBLID_SR1_ATARI_CMB2)
End Function

Function TMPRGE_SR1_ATARI_CMB3() As String
    TMPRGE_SR1_ATARI_CMB3 = findAddr_TBL(TBLID_SR1_ATARI_CMB3)
End Function

Private Function findAddr_TBL(ByVal tblId As Integer) As String
    Dim sht As Worksheet, nmStr As String
    Dim rge As Range
    
    Set sht = SbkThis.Worksheets("TemplateTableSr1")
    nmStr = strStDefName(tblId)
    Set rge = getRange_FromStDefName(sht, nmStr)
    
    findAddr_TBL = ""
    If rge Is Nothing = False Then
        findAddr_TBL = rge.Address
    End If
End Function

Private Function strStDefName(ByVal tblId As String) As String
    strStDefName = ""
    Select Case tblId
        Case TBLID_SR1_CATEAVG: strStDefName = "SR1_CATEAVG"
        Case TBLID_SR1_OBJECTIVECORR: strStDefName = "SR1_OBJECTIVECORR"
        Case TBLID_SR1_CROSSTABLE: strStDefName = "SR1_CROSSTABLE"
        Case TBLID_SR1_CATECORR: strStDefName = "SR1_CATECORR"
        Case TBLID_SR1_ACCURACY: strStDefName = "SR1_ACCURACY"
        Case TBLID_SR1_AOV: strStDefName = "SR1_AOV"
        Case TBLID_SR1_CATESCORE: strStDefName = "SR1_CATESCORE"
        Case TBLID_SR1_CRAM: strStDefName = "SR1_CRAM"
        Case TBLID_SR1_ITEMCORR: strStDefName = "SR1_ITEMCORR"
        Case TBLID_SR1_OBJECTIVECORR: strStDefName = "SR1_OBJECTIVECORR"
        Case TBLID_SR1_OBJECTIVEITEM: strStDefName = "SR1_OBJECTIVEITEM"
        Case TBLID_SR1_SMPSCORE: strStDefName = "SR1_SAMSCORE"
        Case TBLID_SR1_EXTRAINFO: strStDefName = "SR1_EXTRAINFO"
        Case TBLID_SR1_CATEITEMINFO1: strStDefName = "SR1_CATEITEMINFO1"
        Case TBLID_SR1_CATEITEMINFO2: strStDefName = "SR1_CATEITEMINFO2"
        Case TBLID_SR1_NUMITEMINFO: strStDefName = "SR1_NUMITEMINFO"
        Case TBLID_SR1_CATEITEMCORR_TITLE: strStDefName = "SR1_CATEITEMCORR_TITLE"
        Case TBLID_SR1_CATEITEMCORR_STAT: strStDefName = "SR1_CATEITEMCORR_STAT"
        Case TBLID_SR1_CATEITEMCORR_PVAL: strStDefName = "SR1_CATEITEMCORR_PVAL"
        Case TBLID_SR1_CATEITEMCORR_JUDGE: strStDefName = "SR1_CATEITEMCORR_JUDGE"
        Case TBLID_SR1_CATENUMCORR_TITLE: strStDefName = "SR1_CATENUMCORR_TITLE"
        Case TBLID_SR1_CATENUMCORR_STAT: strStDefName = "SR1_CATENUMCORR_STAT"
        Case TBLID_SR1_CATENUMCORR_PVAL: strStDefName = "SR1_CATENUMCORR_PVAL"
        Case TBLID_SR1_CATENUMCORR_JUDGE: strStDefName = "SR1_CATENUMCORR_JUDGE"
        Case TBLID_SR1_NUMITEMCORR_TITLE: strStDefName = "SR1_NUMITEMCORR_TITLE"
        Case TBLID_SR1_NUMITEMCORR_STAT: strStDefName = "SR1_NUMITEMCORR_STAT"
        Case TBLID_SR1_NUMITEMCORR_PVAL: strStDefName = "SR1_NUMITEMCORR_PVAL"
        Case TBLID_SR1_NUMITEMCORR_JUDGE: strStDefName = "SR1_NUMITEMCORR_JUDGE"
        Case TBLID_SR1_ITEMSCORE: strStDefName = "SR1_ITEMSCORE"
        Case TBLID_SR1_ATARI_CMB1: strStDefName = "SR1_ATARI_CMB1"
        Case TBLID_SR1_ATARI_CMB2: strStDefName = "SR1_ATARI_CMB2"
        Case TBLID_SR1_ATARI_CMB3: strStDefName = "SR1_ATARI_CMB3"
    End Select

End Function
'
'|fffd|V|fffd|[|fffd|g|fffd||303|Z|fffd||fffd||fffd||348||342||30b||fffd||fffd||fffd|
'11.8.20 LSQ mdf from subdsn.xls
'
Private Function getRange_FromStDefName(ByVal stObj As Worksheet, stDefName As String) As Range
    Dim RgeObj As Range
    
    On Error Resume Next
    
    Set RgeObj = stObj.Range(stObj.Names(stDefName))
    If Err.Number <> 0 Then     'ERROR
        Set RgeObj = Nothing
        Err.Clear
    End If
    
    Set getRange_FromStDefName = RgeObj
    
    On Error GoTo 0

End Function


'=== EOF ===
Attribute VB_Name = "MonthlyModelMdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: |fffd||fffd||fffd||295||fffd||fffd||3d6|@
'=================================================
Option Explicit

#If Win64 Then
    #If VBA7 Then
        Declare PtrSafe Function ysk_MonthlyModel_VBA Lib "MIST_B_64.dll" (ByVal nId As Long) As Integer
    #Else
        Declare Function ysk_MonthlyModel_VBA Lib "MIST_B_64.dll" (ByVal nId As Long) As Integer
    #End If
#Else
    #If VBA7 Then
        Declare PtrSafe Function ysk_MonthlyModel_VBA Lib "MIST_B.dll" (ByVal nId As Long) As Integer
    #Else
        Declare Function ysk_MonthlyModel_VBA Lib "MIST_B.dll" (ByVal nId As Long) As Integer
    #End If
#End If

Private Function next_Year_Month(ByVal nTimeStyle As Long, ByRef year As Long, ByRef month As Long) As Boolean
    next_Year_Month = False
    If nTimeStyle = 1 Then
        month = month + 1
    ElseIf nTimeStyle = 2 Then
        month = month + 3
    ElseIf nTimeStyle = 3 Then
        month = month + 12
    ElseIf nTimeStyle = 4 Then
        month = month + 1
    End If
    If month > 12 And nTimeStyle < 4 Or nTimeStyle = 3 Then
        month = month - 12
        year = year + 1
        next_Year_Month = True
    End If
End Function

Private Function GetMonth(ByVal nTimeStyle As Long, ByVal monthinx As Long) As Long
    If nTimeStyle = 1 Then
        GetMonth = monthinx
    ElseIf nTimeStyle = 2 Then
        GetMonth = WorksheetFunction.Ceiling(monthinx / 3, 1)
    End If
End Function

Function DoMonthlyModel(ByRef rgeGrp1 As Range, ByRef rgeGrp2 As Range) As Long
    Dim rge As Range, rgeOut As Range
    Dim colNum As Long
    Dim i As Long, j As Long, k As Long
    Dim sum As Double, ave As Double, n As Long
    Dim cycle As Long
    Dim nYearInx As Long, nMonthInx As Long
    Dim title As Variant
    
    Set rge = g_aDialog.rgeInp
    title = rge(1, 1)
    If g_aDialog.bTitle Then
        Set rge = rge(2, 1).Resize(rge.Rows.Count - 1, rge.Columns.Count)
    End If
    Set rgeOut = g_aDialog.rgeOutBgn
    If g_aDialog.nTimeStyle = 1 Then
        cycle = 12
    ElseIf g_aDialog.nTimeStyle = 2 Then
        cycle = 4
    ElseIf g_aDialog.nTimeStyle = 3 Then
        cycle = rge.Rows.Count
    Else
        cycle = rge.Rows.Count
    End If
    colNum = WorksheetFunction.Ceiling(rge.Rows.Count / cycle, 1)

    rgeOut(1, 1) = "|fffd||fffd|"
    For i = 1 To colNum
        rgeOut(1, i + 1) = g_aDialog.nYearBgn + i - 1
    Next i
    rgeOut(1, colNum + 2) = "|fffd||fffd||fffd||295||fffd||fffd||fffd|"
    rgeOut(1, colNum + 3) = "|fffd||fffd||fffd||28e|w|fffd||fffd|"
    Call SetRangeBorder(rgeOut(1, 1).Resize(1, colNum + 3), xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(rgeOut(2, 1).Resize(cycle, colNum + 3), xlThin, xlThin, xlThin, xlThin, xlThin)
    nYearInx = 1
    nMonthInx = IIf(g_aDialog.nTimeStyle = 1 Or g_aDialog.nTimeStyle = 2, g_aDialog.nMonth, 1)
    For i = 1 To cycle
        If g_aDialog.nTimeStyle = 1 Or g_aDialog.nTimeStyle = 2 Then
            rgeOut(i + 1, 1) = nMonthInx
            Call next_Year_Month(g_aDialog.nTimeStyle, nYearInx, nMonthInx)
        Else
            rgeOut(i + 1, 1) = i
        End If
    Next i
    rgeOut(2, 1).Resize(cycle, 1).Sort rgeOut(2, 1)
    nYearInx = 1
    nMonthInx = IIf(g_aDialog.nTimeStyle = 1 Or g_aDialog.nTimeStyle = 2, g_aDialog.nMonth, 1)
    For i = 1 To rge.Rows.Count
        rgeOut(GetMonth(g_aDialog.nTimeStyle, nMonthInx) + 1, nYearInx + 1) = rge(i, 1)
        Call next_Year_Month(g_aDialog.nTimeStyle, nYearInx, nMonthInx)
    Next i
    sum = 0
    For i = 1 To cycle
        ave = WorksheetFunction.Average(rgeOut(i + 1, 2).Resize(1, colNum))
        sum = sum + ave
        rgeOut(i + 1, colNum + 2) = ave
    Next i
    ave = sum / cycle
    rgeOut(cycle + 2, colNum + 1) = "|fffd|S|fffd||315||fffd||fffd||fffd|"
    rgeOut(cycle + 2, colNum + 2) = ave
    Call SetRangeBorder(rgeOut(cycle + 2, colNum + 1).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlThin)
    For i = 1 To cycle
        rgeOut(i + 1, colNum + 3) = rgeOut(i + 1, colNum + 2) / ave
    Next i
    nYearInx = 1
    nMonthInx = IIf(g_aDialog.nTimeStyle = 1 Or g_aDialog.nTimeStyle = 2, g_aDialog.nMonth, 1)
    rgeOut(1, 5 + colNum) = "|fffd|N"
    rgeOut(1, 6 + colNum) = "|fffd||fffd|"
    rgeOut(1, 7 + colNum) = title
    rgeOut(1, 8 + colNum) = "S"
    rgeOut(1, 9 + colNum) = "TCI"
    Call SetRangeBorder(rgeOut(1, 5 + colNum).Resize(1, 5), xlThin, xlThin, xlThin, xlThin, xlThin)
    Call SetRangeBorder(rgeOut(2, 5 + colNum).Resize(rge.Rows.Count, 5), xlThin, xlThin, xlThin, xlThin, xlThin)
    
    rgeOut(2, 5 + colNum) = g_aDialog.nYearBgn
    rgeOut(2, 11 + colNum) = g_aDialog.nYearBgn & " " & nMonthInx
    For i = 1 To rge.Rows.Count
        rgeOut(i + 1, 6 + colNum) = nMonthInx
        rgeOut(i + 1, 7 + colNum) = rge(i, 1)
        rgeOut(i + 1, 8 + colNum) = rgeOut(GetMonth(g_aDialog.nTimeStyle, nMonthInx) + 1, colNum + 3)
        rgeOut(i + 1, 9 + colNum) = Val(rge(i, 1)) / rgeOut(GetMonth(g_aDialog.nTimeStyle, nMonthInx) + 1, colNum + 3)
        If next_Year_Month(g_aDialog.nTimeStyle, nYearInx, nMonthInx) Then
            If i < rge.Rows.Count Then
                rgeOut(i + 2, 5 + colNum) = g_aDialog.nYearBgn + nYearInx - 1
                rgeOut(i + 2, 11 + colNum) = g_aDialog.nYearBgn + nYearInx - 1 & " " & nMonthInx
            End If
            Call SetRangeBorder(rgeOut(i + 1, 5 + colNum).Resize(1, 5), xlThin, xlNone, xlThin, xlThin, xlThin)
        Else
            If i < rge.Rows.Count Then rgeOut(i + 2, 11 + colNum) = nMonthInx
        End If
    Next i
    Set rgeGrp1 = rgeOut(1, 1).Resize(cycle + 1, colNum + 3)
    Set rgeGrp2 = rgeOut(1, 5 + colNum).Resize(rge.Rows.Count + 1, 7)
    DoMonthlyModel = cycle
End Function

Sub IS_MonthlyModel_VBA()
    Dim bRtn As Boolean, bGraph As Boolean
    Dim nYSmpNum As Integer
    Dim rgeData1 As Range, rgeData2 As Range, rgeChartBgn As Range
    Dim nId As Long
    Dim rtn As Integer
    
    bRtn = GetDlgInp(YSK_MM)
    If Not bRtn Then Exit Sub
    
    Call changeToYSKDir
    
    nId = IIf(isTrialVer, 0, 1)
    
    rtn = ysk_MonthlyModel_VBA(nId)
    
    If rtn = -100 Then
        MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
        Exit Sub
    End If
    
    bGraph = True 'g_aDialog.bGraph
    g_aDialog.bGraph = False
    nYSmpNum = DoMonthlyModel(rgeData1, rgeData2)
        
    If nYSmpNum > 0 And bGraph Then
        Set rgeChartBgn = g_aDialog.rgeOutBgn.Offset(nYSmpNum + 3, 0)
        Call MonthlyModelChart(rgeData1, rgeChartBgn, True)
        Set rgeChartBgn = rgeData2(rgeData2.Rows.Count + 2, 1)
        Call MonthlyModelChart(rgeData2, rgeChartBgn, False)
        g_aDialog.rgeOutBgn.Select
    End If
End Sub
    
'|fffd||fffd||fffd||295||fffd||fffd||3d6|@|fffd|O|fffd||fffd||fffd|t
Function MonthlyModelChart(ByVal rgeData As Range, ByVal rgeChartBgn As Range, ByVal bMonthly As Boolean) As Integer
    Dim nRtn As Integer, nGrpRowNum As Integer, nDist As Integer
    Dim colNum As Long
    
    nDist = forcIIf(bMonthly, 10, 0)
    If bMonthly Then
        colNum = rgeData.Columns.Count
        nRtn = COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t(rgeChartBgn, rgeData.Columns("A"), rgeData.Columns(colNum), _
            "|fffd||fffd||fffd||28e|w|fffd||fffd|(S)", "", , , , nDist, "HasLegend=0&ColNum=" & IIf(colNum < 6, 6, IIf(colNum > 8, 8, colNum)))
    Else
        nRtn = COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t(rgeChartBgn, rgeData.Columns("G"), Union(rgeData.Columns("C"), rgeData.Columns("E")), _
            "", "", , , , nDist)
    End If
    nGrpRowNum = nRtn + 1
    MonthlyModelChart = nGrpRowNum
End Function

'--- end of file ---

Attribute VB_Name = "PDF_EXE"
Option Explicit
'
' |fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||58c|W|fffd||fffd|Windows API|fffd||fffd||933e||fffd||fffd||fffd||fffd|
'
'|fffd||fffd||fffd||30d||14c||fffd||fffd||fffd||fffd|DebugTxt|fffd||fffd||fffd||82||fffd|

Private Const HKEY_CLASSES_ROOT = &H80000000
Private Const HKEY_CURRENT_USER = &H80000001
Private Const HKEY_LOCAL_MACHINE = &H80000002
Private Const HKEY_USERS = &H80000003
Private Const ERROR_SUCCESS = 0&
Private Const ERROR_NO_MORE_ITEMS = 259&

Private Const REG_SZ = 1
Private Const REG_BINARY = 3
Private Const REG_DWORD = 4


'Private Const HKEY_LOCAL_MACHINE = &H80000002
'Private Const HKEY_CLASSES_ROOT = &H80000000
'Private Const REG_SZ = 1

Private Const STANDARD_RIGHTS_ALL = &H1F0000
Private Const KEY_QUERY_VALUE = &H1
Private Const KEY_ENUMERATE_SUB_KEYS = &H8
Private Const KEY_NOTIFY = &H10
Private Const SYNCHRONIZE = &H100000

Private Const READ_CONTROL = &H20000
Private Const STANDARD_RIGHTS_READ = (READ_CONTROL)

Private Const KEY_READ = ((STANDARD_RIGHTS_READ Or KEY_QUERY_VALUE Or KEY_ENUMERATE_SUB_KEYS Or KEY_NOTIFY) And (Not SYNCHRONIZE))
Private Const KEY_EXECUTE = (KEY_READ)

'---------
Private Const KEY_SET_VALUE = &H2
Private Const KEY_CREATE_SUB_KEY = &H4
'Public Const KEY_ENUMERATE_SUB_KEYS = &H8
'Public Const KEY_NOTIFY = &H10
Private Const KEY_CREATE_LINK = &H20
'Public Const SYNCHRONIZE = &H100000
Private Const KEY_ALL_ACCESS = ((STANDARD_RIGHTS_ALL Or KEY_QUERY_VALUE Or KEY_SET_VALUE Or KEY_CREATE_SUB_KEY Or KEY_ENUMERATE_SUB_KEYS Or KEY_NOTIFY Or KEY_CREATE_LINK) And (Not SYNCHRONIZE))

Private Const REG_OPTION_VOLATILE = 1            ' Key is not preserved when system is rebooted
Private Const REG_OPTION_NON_VOLATILE = 0        ' Key is preserved when system is rebooted

Type SECURITY_ATTRIBUTES
        nLength As Long
        lpSecurityDescriptor As Long
        bInheritHandle As Boolean
End Type
'-------

#If VBA7 Then
    Private Declare PtrSafe Function RegCloseKey Lib "advapi32.dll" (ByVal hkey As LongPtr) As Long
    Private Declare PtrSafe Function RegCreateKey Lib "advapi32.dll" Alias "RegCreateKeyA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, phkResult As LongPtr) As Long
    Private Declare PtrSafe Function RegOpenKey Lib "advapi32.dll" Alias "RegOpenKeyA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, phkResult As Long) As Long
    Private Declare PtrSafe Function RegQueryValue Lib "advapi32.dll" Alias "RegQueryValueA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, ByVal lpValue As String, lpcbValue As Long) As Long
    Private Declare PtrSafe Function RegSetValue Lib "advapi32.dll" Alias "RegSetValueA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, ByVal dwType As Long, ByVal lpData As String, ByVal cbData As Long) As Long
    Private Declare PtrSafe Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hkey As LongPtr, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, lpData As Any, lpcbData As Long) As Long          ' Note that if you declare the lpData parameter as String, you must pass it By Value.
    Private Declare PtrSafe Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As LongPtr) As Long
    Private Declare PtrSafe Function RegDeleteKey Lib "advapi32.dll" Alias "RegDeleteKeyA" (ByVal hkey As LongPtr, ByVal lpSubKey As String) As Long
    Private Declare PtrSafe Function RegDeleteValue Lib "advapi32.dll" Alias "RegDeleteValueA" (ByVal hkey As LongPtr, ByVal lpValueName As String) As Long
    
    'Private Declare Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions As Long, ByVal samDesired As Long, lpSecurityAttributes As SECURITY_ATTRIBUTES, phkResult As Long, lpdwDisposition As Long) As Long
    Private Declare PtrSafe Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" (ByVal hkey As LongPtr, ByVal lpSubKey As String, ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions As Long, ByVal samDesired As Long, lpSecurityAttributes As Long, phkResult As LongPtr, lpdwDisposition As Long) As Long
    
    '2006.5.25 added wzh for missed definition of OSRegSetValueEx
    Private Declare PtrSafe Function OSRegSetValueEx Lib "advapi32.dll" Alias _
           "RegSetValueExA" (ByVal hkey As LongPtr, ByVal lpValueName As String, _
           ByVal Reserved As Long, ByVal dwType As Long, lpData As Any, ByVal _
           cbData As Long) As Long
    '
    
    '--------------
    Private Declare PtrSafe Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
    Private Declare PtrSafe Function WritePrivateProfileString Lib "kernel32" Alias "WritePrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpString As Any, ByVal lpFileName As String) As Long
    Private Declare PtrSafe Function CopyFile Lib "kernel32" Alias "CopyFileA" (ByVal lpExistingFileName As String, ByVal lpNewFileName As String, ByVal bFailIfExists As Long) As Long
#Else
    Private Declare Function RegCloseKey Lib "advapi32.dll" (ByVal hkey As Long) As Long
    Private Declare Function RegCreateKey Lib "advapi32.dll" Alias "RegCreateKeyA" (ByVal hkey As Long, ByVal lpSubKey As String, phkResult As Long) As Long
    Private Declare Function RegOpenKey Lib "advapi32.dll" Alias "RegOpenKeyA" (ByVal hkey As Long, ByVal lpSubKey As String, phkResult As Long) As Long
    Private Declare Function RegQueryValue Lib "advapi32.dll" Alias "RegQueryValueA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal lpValue As String, lpcbValue As Long) As Long
    Private Declare Function RegSetValue Lib "advapi32.dll" Alias "RegSetValueA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal dwType As Long, ByVal lpData As String, ByVal cbData As Long) As Long
    Private Declare Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hkey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, lpData As Any, lpcbData As Long) As Long         ' Note that if you declare the lpData parameter as String, you must pass it By Value.
    Private Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As Long) As Long
    Private Declare Function RegDeleteKey Lib "advapi32.dll" Alias "RegDeleteKeyA" (ByVal hkey As Long, ByVal lpSubKey As String) As Long
    Private Declare Function RegDeleteValue Lib "advapi32.dll" Alias "RegDeleteValueA" (ByVal hkey As Long, ByVal lpValueName As String) As Long
    
    'Private Declare Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions As Long, ByVal samDesired As Long, lpSecurityAttributes As SECURITY_ATTRIBUTES, phkResult As Long, lpdwDisposition As Long) As Long
    Private Declare Function RegCreateKeyEx Lib "advapi32.dll" Alias "RegCreateKeyExA" (ByVal hkey As Long, ByVal lpSubKey As String, ByVal Reserved As Long, ByVal lpClass As String, ByVal dwOptions As Long, ByVal samDesired As Long, lpSecurityAttributes As Long, phkResult As Long, lpdwDisposition As Long) As Long
    
    '2006.5.25 added wzh for missed definition of OSRegSetValueEx
    Private Declare Function OSRegSetValueEx Lib "advapi32.dll" Alias _
           "RegSetValueExA" (ByVal hkey As Long, ByVal lpValueName As String, _
           ByVal Reserved As Long, ByVal dwType As Long, lpData As Any, ByVal _
           cbData As Long) As Long
    '
    
    '--------------
    Private Declare Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
    Private Declare Function WritePrivateProfileString Lib "kernel32" Alias "WritePrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpString As Any, ByVal lpFileName As String) As Long
    Private Declare Function CopyFile Lib "kernel32" Alias "CopyFileA" (ByVal lpExistingFileName As String, ByVal lpNewFileName As String, ByVal bFailIfExists As Long) As Long
#End If

Sub tetetet()
Attribute tetetet.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim iRet As Integer
    Dim sTemp As String
    

    iRet = iExt_App_Search(".pdf", 1, sTemp)
    MsgBox sTemp

    iRet = iExt_App_Search(".pdf", 2, sTemp)
    MsgBox sTemp
End Sub


Function iExt_App_Search(sExt_str As String, iMode As Integer, ByRef sPrg_path As String) As Integer
Attribute iExt_App_Search.VB_ProcData.VB_Invoke_Func = " \n14"
'----------------------------------------
'|fffd|g|fffd||fffd||fffd|q|fffd||fffd||fffd||fffd|N|fffd||fffd||fffd||fffd||fffd||fffd|A|fffd|v|fffd||fffd||fffd||303|p|fffd|X|fffd||12c82||5c2||fffd|
'sPrg_path|fffd||243|p|fffd|X|fffd||292|u|fffd||fffd||fffd|i|fffd|[|fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd|
'|fffd|@sExt_str       |fffd||fffd||fffd||5c2||fffd||fffd||fffd||fffd|g|fffd||fffd||fffd|q(|fffd|s|fffd||fffd||fffd|I|fffd|h|fffd|t|fffd||fffd|)|fffd|@|fffd|y|fffd||fffd|z|fffd|@".PDF"
'  iMode          |fffd|f|fffd|[|fffd|^|fffd||64fe||fffd||fffd||fffd|[|fffd|h
'       1:|fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||303|t|fffd||fffd||fffd|p|fffd|X|fffd||302||741|@|fffd|y|fffd||fffd|z|fffd|@|fffd|u"c:\acrobat\reader.exe"|fffd|v
'       2:|fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||308||fffd||fffd||fffd||fffd||fffd||fffd|S|fffd||fffd|  |fffd|y|fffd||fffd|z|fffd|@|fffd|u"c:\acrobat\reader.exe""%1"|fffd|v
'|fffd|@sPrg_path      |fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd|t|fffd||fffd||fffd|p|fffd|X|fffd||30a|i|fffd|[|fffd|G|fffd||fffd||fffd|A|fffd|@|fffd|y|fffd||fffd|z|fffd|@"c:\acrobat\reader.exe"
'|fffd||7c2||fffd|l
'  |fffd||fffd||fffd||fffd|I|fffd||fffd||fffd|F 1
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-1|fffd|i|fffd|w|fffd||80b3||fffd||a0bd||fffd|L|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd|j
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-2|fffd|i|fffd|w|fffd||80b3||fffd||a0bd||fffd|A|fffd|v|fffd||fffd||fffd|P|fffd|[|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd|j
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-3|fffd|i|fffd||fffd||fffd|[|fffd|h|fffd||fffd|1,2|fffd||20a|O|fffd||fffd||fffd|w|fffd||80b3||fffd||a0bd||fffd|j
'--------------------------

    Dim iRet1 As Integer
    Dim sReg_Path As String
    Dim sApp_Path As String
    Dim sKey1  As String
    Dim sTemp1 As String
    Dim sTemp2 As String
    Dim sTemp3 As String
    Dim iLengs As Integer
    Dim iCnt1 As Integer
    Dim iEndCnt As Integer

    sKey1 = "\shell\open\command"
    
    '|fffd||fffd||fffd|}|fffd||302||60a4||fffd||203|A|fffd|v|fffd||fffd||fffd||302||182||fffd|
    sTemp1 = sExt_str & sKey1
    iRet1 = iGet_reg_string(1, sTemp1, "", sApp_Path) '|fffd|g|fffd||fffd||fffd|q|fffd||fffd||fffd||70cc||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd|L|fffd|[|fffd||fffd||fffd||64fe|
    If (iRet1 <> 1) Then
        '|fffd|s|fffd|V|fffd||1c2||fffd||fffd|A|fffd|v|fffd||fffd||fffd||302||182||fffd|
        iRet1 = iGet_reg_string(1, sExt_str, "", sReg_Path) '|fffd|g|fffd||fffd||fffd|q|fffd||fffd||fffd||70cc||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd|L|fffd|[|fffd||fffd||fffd||64fe|
        If (iRet1 <> 1) Then
            iExt_App_Search = -1
            Exit Function
        End If
    
        sTemp1 = sReg_Path & sKey1
        iRet1 = iGet_reg_string(1, sTemp1, "", sApp_Path) '|fffd|g|fffd||fffd||fffd|q|fffd||fffd||fffd||70cc||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd|L|fffd|[|fffd||fffd||fffd||64fe|
        If (iRet1 <> 1) Then
            iExt_App_Search = -2
            Exit Function
        End If
    End If
    
    
    Select Case iMode
        Case 1 '|fffd|t|fffd||fffd||fffd|p|fffd|X|fffd||302||742||fffd||502||fffd|
            iLengs = Len(sApp_Path)
            sTemp1 = Mid(sApp_Path, 1, 1)
            iEndCnt = 0
            If (sTemp1 = Chr$(34)) Then
                '|fffd||14f||fffd||fffd||315||fffd||fffd||fffd||fffd||42a81|u"|fffd|v|fffd||302||182||fffd||fffd||34f|I|fffd||fffd||fffd||301|u"|fffd|v|fffd||292|u|fffd||702||14e||64fe|
                For iCnt1 = 2 To iLengs
                    sTemp2 = Mid(sApp_Path, iCnt1, 1)
                    If (sTemp2 = Chr$(34)) Then
                        iEndCnt = iCnt1
                        Exit For
                    End If
                Next iCnt1
                sTemp3 = Mid(sApp_Path, 1, iEndCnt)
            Else
                '|fffd||14f||fffd||fffd||315||fffd||fffd||fffd||fffd||42a81|u"|fffd|v|fffd||20a|O|fffd||302||182||fffd||fffd||341|u%|fffd|v|fffd||30e||fffd|O|fffd||292|u|fffd||702||14e||64fe|
                For iCnt1 = 1 To iLengs
                    sTemp2 = Mid(sApp_Path, iCnt1, 1)
                    If (sTemp2 = "%") Then
                        iEndCnt = iCnt1
                        Exit For
                    End If
                Next iCnt1
                sTemp3 = Mid(sApp_Path, 1, iEndCnt - 1)
            End If
            sPrg_path = sTemp3
            iExt_App_Search = 1
    
        Case 2 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||311|S|fffd||102||fffd||502||fffd|
            sPrg_path = sApp_Path
            iExt_App_Search = 1
        Case Else
            sPrg_path = ""
            iExt_App_Search = -3
    End Select
    
End Function


'--------------
Function iSet_reg_string(iRegMode As Integer, sRegPATH As String, sRegItem As String, sItemStr As String)
Attribute iSet_reg_string.VB_ProcData.VB_Invoke_Func = " \n14"
'--------------------------
'|fffd||fffd||fffd||442||302||fffd||fffd||fffd||6bc||7bd||fffd||60f||fffd||fffd||fffd||752||80b7||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd|F
'|fffd|@iRegMode:1|fffd|`4|fffd||310||fffd||fffd||fffd|
'   1:HKEY_CLASSES_ROOT
'   2:HKEY_CURRENT_USER
'   3:HKEY_LOCAL_MACHINE
'   4:HKEY_USERS
'|fffd|@sRegPath:|6bc||7bd||fffd||fffd| |fffd||7fd||fffd||fffd||fffd||fffd||fffd||fffd|
'  sRegItem:|6bc||7bd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||217||fffd||fffd||fffd|)
'  sItemStr:|6bc||7bd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||7c2||fffd|l|fffd|F
'  |fffd||fffd||fffd||fffd|I|fffd||fffd||fffd|F1
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-1(|6bc||7bd||fffd||fffd||4f0||fffd||782||310||752||80aa||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|F1|fffd|`4|fffd||20a|O)
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-2(|6bc||7bd||fffd||637||fffd||fffd||313|o|fffd|^|fffd||fffd||fffd|s)
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-3(|fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||313|o|fffd|^|fffd||fffd||fffd|s)
'--------------------------
    Dim CurForm As Object
    Dim AppName As String
    Dim Entry As String
   
    Dim Index As Integer
    Dim Value As String
    Dim KeyValue As String
    #If VBA7 Then
    Dim keyhandle As LongPtr
    #Else
    Dim keyhandle As Long
    #End If
    Dim Ret As Long
    Dim KeyValueLength As Long
    Dim sKeyTemp As String
    Dim bRet As Boolean '
    Dim Ret2 As Long
        
     
    ' |fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||c2bc2||fffd||302||24f|\|fffd||fffd||fffd||203|X|fffd|y|fffd|[|fffd|X|fffd||fffd||fffd||182||fffd||fffd||115||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||181|A|fffd||fffd||295||6cc||fffd||153d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    '
    Value = Space(512)
    '
    ' |fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||211|O|fffd||303|T|fffd|C|fffd|Y|fffd||188||292|u|fffd||30f||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|
    '
   
    KeyValue = Space(512)
    KeyValueLength = Len(KeyValue)
    
    '|fffd||fffd||fffd|[|fffd|h|fffd||242||fffd||fffd||fffd||115||3c2||fffd||fffd|
    
    '|fffd||fffd||fffd||456||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If (sRegItem = "") Then
        Select Case iRegMode
            Case 1
                Ret = RegCreateKey(HKEY_CLASSES_ROOT, sRegPATH, keyhandle)
            Case 2
                Ret = RegCreateKey(HKEY_CURRENT_USER, sRegPATH, keyhandle)
            Case 3
                Ret = RegCreateKey(HKEY_LOCAL_MACHINE, sRegPATH, keyhandle)
            Case 4
                Ret = RegCreateKey(HKEY_USERS, sRegPATH, keyhandle)
            Case Else
                iSet_reg_string = -1
                Exit Function
        End Select
    
    '|fffd||fffd||fffd||456||fffd||fffd||fffd||fffd||fffd||fffd||939e|
    Else
        Select Case iRegMode
            Case 1
                Ret = RegCreateKeyEx(HKEY_CLASSES_ROOT, sRegPATH, 0&, "", REG_OPTION_VOLATILE, KEY_ALL_ACCESS, 0&, keyhandle, Ret2)
            Case 2
                Ret = RegCreateKeyEx(HKEY_CURRENT_USER, sRegPATH, 0&, "", REG_OPTION_VOLATILE, KEY_ALL_ACCESS, 0&, keyhandle, Ret2)
            Case 3
                Ret = RegCreateKeyEx(HKEY_LOCAL_MACHINE, sRegPATH, 0&, "", REG_OPTION_VOLATILE, KEY_ALL_ACCESS, 0&, keyhandle, Ret2)
            Case 4
                Ret = RegCreateKeyEx(HKEY_USERS, sRegPATH, 0&, "", REG_OPTION_VOLATILE, KEY_ALL_ACCESS, 0&, keyhandle, Ret2)
            Case Else
                iSet_reg_string = -1
                Exit Function
        End Select
    End If
    
    If Ret <> 0 Then
        iSet_reg_string = -2
        Exit Function
    End If
    
    '|fffd||fffd||fffd||456||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If (sRegItem = "") Then
        'Ret = RegSetValue(KeyHandle, "", REG_SZ, sItemStr, Len(sItemStr) + 1)
        
        If (sItemStr = "") Then
            Select Case iRegMode
                Case 1
                    Ret = RegDeleteKey(HKEY_CLASSES_ROOT, sRegPATH)
                Case 2
                    Ret = RegDeleteKey(HKEY_CURRENT_USER, sRegPATH)
                Case 3
                    Ret = RegDeleteKey(HKEY_LOCAL_MACHINE, sRegPATH)
                Case 4
                    Ret = RegDeleteKey(HKEY_USERS, sRegPATH)
                Case Else
                    iSet_reg_string = -1
                    Exit Function
            End Select
        Else
            Ret = RegSetValue(keyhandle, "", REG_SZ, sItemStr, Len(sItemStr) + 1)
        End If
        
        'Ret = RegSetValue(KeyHandle, "", REG_SZ, sItemStr, Len(sItemStr) + 1)
        If (Ret <> 0) Then
            iSet_reg_string = -3
        Else
            iSet_reg_string = 1
        End If
     
    '|fffd||fffd||fffd||456||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Else
        
        'Ret = OSRegSetValueEx(KeyHandle, sRegItem, 0&, REG_SZ, ByVal sItemStr, Len(sItemStr) + 1)
        If (sItemStr = "") Then
            Ret = RegDeleteValue(keyhandle, sRegItem)
        Else
            'Ret = OSRegSetValueEx(KeyHandle, sRegItem, 0&, REG_SZ, ByVal sItemStr, Len(sItemStr) + 1)
            Ret = OSRegSetValueEx(keyhandle, sRegItem, 0&, REG_SZ, ByVal sItemStr, LenB(sItemStr) + 1)
        End If
        
        If (Ret <> 0) Then
            iSet_reg_string = -3
        Else
            iSet_reg_string = 1
        End If
    End If
    RegCloseKey (keyhandle)
End Function

Private Function iGet_reg_string(iRegMode As Integer, sRegPATH As String, sRegItem As String, ByRef sRegItemStr As String) As Integer
'--------------------------
'|fffd||fffd||fffd||442||302||fffd||fffd||fffd||6bc||7bd||fffd||60f||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd|F
'|fffd|@iRegMode:1|fffd|`4|fffd||310||fffd||fffd||fffd|
'   1:HKEY_CLASSES_ROOT
'   2:HKEY_CURRENT_USER
'   3:HKEY_LOCAL_MACHINE
'   4:HKEY_USERS
'|fffd|@sRegPath:|6bc||7bd||fffd||fffd| |fffd||7fd||fffd||fffd||fffd||fffd||fffd||fffd|
'  sRegItem:|6bc||7bd||fffd||fffd| |fffd||fffd||fffd||455||fffd||fffd||fffd||fffd||fffd|(|fffd||217||fffd||fffd||fffd|)
'|fffd||7c2||fffd|l|fffd|F
'  |fffd||fffd||fffd||fffd|I|fffd||fffd||fffd|F 1
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-1|fffd|i|6bc||7bd||fffd||603||fffd||fffd|[|fffd|h|fffd||fffd||fffd||642||202||fffd|j
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-2|fffd|i|fffd|w|fffd||80b3||fffd||a0bd||fffd|L|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd|j
'  |fffd||64f||fffd|I|fffd||fffd||fffd|F-3|fffd|i|fffd|w|fffd||80b3||fffd||a0bd||fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|j
'--------------------------
    Dim CurForm As Object
    Dim AppName As String
    Dim Entry As String
   
    Dim Index As Integer
    Dim Value As String
    'Dim KeyName As String
    Dim KeyValue As String
    #If VBA7 Then
    Dim keyhandle As LongPtr
    #Else
    Dim keyhandle As Long
    #End If
    Dim Ret As Long
    Dim KeyValueLength As Long
    Dim sKeyTemp As String
    Dim bRet As Boolean '
    ' |fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||c2bc2||fffd||302||24f|\|fffd||fffd||fffd||203|X|fffd|y|fffd|[|fffd|X|fffd||fffd||fffd||182||fffd||fffd||115||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd||fffd||181|A|fffd||fffd||295||6cc||fffd||153d||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    '
    Value = Space(512)
    '
    ' |fffd||fffd||fffd|W|fffd|X|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||211|O|fffd||303|T|fffd|C|fffd|Y|fffd||188||292|u|fffd||30f||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|
    '
   
    KeyValue = Space(512)
    KeyValueLength = Len(KeyValue)
    
    '|fffd||fffd||fffd|[|fffd|h|fffd||242||fffd||fffd||fffd||115||3c2||fffd||fffd|
    Select Case iRegMode
        Case 1
            Ret = RegOpenKeyEx(HKEY_CLASSES_ROOT, sRegPATH, 0&, KEY_EXECUTE, keyhandle)
        Case 2
            Ret = RegOpenKeyEx(HKEY_CURRENT_USER, sRegPATH, 0&, KEY_EXECUTE, keyhandle)
        Case 3
            Ret = RegOpenKeyEx(HKEY_LOCAL_MACHINE, sRegPATH, 0&, KEY_EXECUTE, keyhandle)
        Case 4
            Ret = RegOpenKeyEx(HKEY_USERS, sRegPATH, 0&, KEY_EXECUTE, keyhandle)
        Case Else
            sRegItemStr = ""
            iGet_reg_string = -1
            Exit Function
    End Select
    
    If Ret <> 0 Then
        sRegItemStr = ""
        iGet_reg_string = -2
        Exit Function
    End If

    
    sKeyTemp = sRegItem '|fffd|n|fffd||fffd||fffd||a0bd||fffd|A|fffd|C|fffd|e|fffd||fffd||fffd||fffd||fffd||fffd||752||80b7||fffd||fffd|
    bRet = RegQueryStringValue(keyhandle, sKeyTemp, Value)
    
    If bRet = False Then
        Ret = RegCloseKey(keyhandle)
        sRegItemStr = ""
        iGet_reg_string = -3
        Exit Function
    End If

    Ret = RegCloseKey(keyhandle)
    'Value = Trim(Left(KeyValue, KeyValueLength))
    iGet_reg_string = 1
    sRegItemStr = Value
End Function


Private Function iSet_Ini_String(sIniFileName As String, sSectionName As String, sKeyName As String, sKeyStr As String) As Integer
'--------------------------
'INI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||243|f|fffd|[|fffd|^|fffd||fffd||752||80b7||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd|F
'|fffd|@sIniFileName:|fffd||fffd||fffd||fffd||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||7fd||fffd|t|fffd||fffd||fffd|j
'|fffd|@sSectionName:|fffd|Z|fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|
'  sKeyName:    |fffd|L|fffd|[|fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|
'  sKeyStr:     |fffd|L|fffd|[|fffd||fffd||fffd|e|fffd||315||fffd||fffd||fffd||fffd||fffd|
'|fffd||7c2||fffd|l|fffd|F
'  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||750||fffd||fffd||fffd||fffd||30f||a347||fffd|F1
'  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||74e||fffd||fffd|s|fffd||30f||a347||fffd|F-1
'--------------------------
    Dim lRet As Long
        
    lRet = WritePrivateProfileString(ByVal sSectionName, ByVal sKeyName, ByVal sKeyStr, ByVal sIniFileName)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||743|f|fffd|[|fffd|^|fffd||30a|m|fffd|F
    If (lRet = 0) Then
        iSet_Ini_String = -1
        Exit Function
    End If
    iSet_Ini_String = 1
End Function



Private Function iGet_Ini_String(sIniFileName As String, sSectionName As String, sKeyName As String, ByRef sKeyStr As String) As Integer
'--------------------------
'INI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||243|f|fffd|[|fffd|^|fffd||fffd||752||80b7||fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd|F
'|fffd|@sIniFileName:|fffd||fffd||fffd||fffd||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||7fd||fffd|t|fffd||fffd||fffd|j
'|fffd|@sSectionName:|fffd|Z|fffd|N|fffd|V|fffd||fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|
'  sKeyName:    |fffd|L|fffd|[|fffd||fffd||fffd||315||fffd||fffd||fffd||fffd||fffd|
'|fffd|@sKeyStr:     |fffd|L|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||30a|i|fffd|[|fffd||a3ca|
'|fffd||7c2||fffd|l|fffd|F
'|fffd|@sKeyStr:     |fffd||1cd||fffd||fffd||42f95||fffd||fffd||fffd||fffd||fffd|
'  |fffd||1cd||fffd||fffd||750||fffd||fffd||fffd||fffd||30f||a347||fffd|F1
'  |fffd||1cd||fffd||fffd||74e||fffd||fffd|s|fffd||30f||a347||fffd|F-1(|fffd|Y|fffd||fffd||fffd||fffd||fffd||fffd|L|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
'  |fffd||1cd||fffd||fffd||74e||fffd||fffd|s|fffd||30f||a347||fffd|F-2(|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||58c|W|fffd||303|G|fffd||fffd||fffd|[|fffd|j
'--------------------------
Dim iRet As Long
Dim sGetBuffer As String
Dim sTemp1 As String
    On Error GoTo ERR_OUT
    
    sGetBuffer$ = String(512, 0)   '|fffd|f|fffd|[|fffd|^|fffd||30f||fffd||fffd||fffd||fffd||fffd|
    iRet = GetPrivateProfileString(ByVal sSectionName, ByVal sKeyName, ByVal "0000000000", sGetBuffer, CInt(512), ByVal sIniFileName)
    sTemp1 = Left$(sGetBuffer, InStr(sGetBuffer, Chr(0)) - 1)
    If (sTemp1 = "0000000000") Then
        sKeyStr = ""
        iGet_Ini_String = -1
    Else
        sKeyStr = sTemp1
        iGet_Ini_String = 1
    End If
    Exit Function
    
ERR_OUT:
    iGet_Ini_String = -1
    sKeyStr = ""

End Function

#If VBA7 Then
Private Function RegQueryStringValue(ByVal hkey As LongPtr, ByVal strValueName As String, strData As String) As Boolean
'--------------------------------------------------------------
' FUNCTION: RegQueryStringValue
'
' |fffd|o|fffd|^|fffd||fffd||fffd||fffd||fffd||141|A|fffd||fffd||fffd||fffd||316||fffd||fffd|O (strValueName = name)
' |fffd||702||fffd||fffd||356||fffd||fffd|O|fffd||302||202||fffd| (strValueName = "") |fffd|l|fffd||315||fffd||fffd||fffd||fffd||fffd|
' |fffd||7b0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd||85bc||fffd||312|l|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||90aa||fffd|A|fffd||fffd||fffd||fffd|
' |fffd||7b0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||142||342||202||fffd||fffd||a347||fffd||341|A|fffd||fffd||fffd||30a||590||fffd||fffd||30f||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd|B
'
' |fffd||7c2||fffd|l: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||fffd| True|fffd|A|fffd||fffd||fffd||fffd||20a|O|fffd||30f||a347||fffd||fffd| False |fffd||fffd||fffd||502||fffd||fffd||fffd||702||fffd||fffd|B
'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||341|A|fffd||fffd||fffd||fffd||fffd||fffd|^|fffd||fffd||fffd||7b0||fffd||fffd|l|fffd||fffd| strData |fffd||fffd||fffd||752||80b3||fffd||fffd||702||fffd||fffd|B
'--------------------------------------------------------------
    Dim lResult As Long
    Dim lValueType As Long
    Dim strBuf As String
    Dim lDataBufSize As Long
    
    RegQueryStringValue = False
    On Error GoTo 0
    ' |fffd||fffd||fffd||fffd|/|fffd||7b0||fffd||fffd||30e||fffd||782||fffd||fffd||64fe||fffd||fffd||fffd||702||fffd||fffd|B
    lResult = RegQueryValueEx(hkey, strValueName, 0&, lValueType, ByVal 0&, lDataBufSize)
    If lResult = ERROR_SUCCESS Then
        If lValueType = REG_SZ Then
            strBuf = String(lDataBufSize, " ")
            lResult = RegQueryValueEx(hkey, strValueName, 0&, 0&, ByVal strBuf, lDataBufSize)
            If lResult = ERROR_SUCCESS Then
                RegQueryStringValue = True
                strData = StripTerminator(strBuf)
            End If
        End If
    End If
End Function
#Else
Private Function RegQueryStringValue(ByVal hkey As Long, ByVal strValueName As String, strData As String) As Boolean
'--------------------------------------------------------------
' FUNCTION: RegQueryStringValue
'
' |fffd|o|fffd|^|fffd||fffd||fffd||fffd||fffd||141|A|fffd||fffd||fffd||fffd||316||fffd||fffd|O (strValueName = name)
' |fffd||702||fffd||fffd||356||fffd||fffd|O|fffd||302||202||fffd| (strValueName = "") |fffd|l|fffd||315||fffd||fffd||fffd||fffd||fffd|
' |fffd||7b0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd||85bc||fffd||312|l|fffd||fffd||fffd||fffd||fffd||742||fffd||fffd||90aa||fffd|A|fffd||fffd||fffd||fffd|
' |fffd||7b0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||142||342||202||fffd||fffd||a347||fffd||341|A|fffd||fffd||fffd||30a||590||fffd||fffd||30f||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd|s|fffd||fffd||fffd||702||fffd||fffd|B
'
' |fffd||7c2||fffd|l: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||fffd| True|fffd|A|fffd||fffd||fffd||fffd||20a|O|fffd||30f||a347||fffd||fffd| False |fffd||fffd||fffd||502||fffd||fffd||fffd||702||fffd||fffd|B
'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||242||341|A|fffd||fffd||fffd||fffd||fffd||fffd|^|fffd||fffd||fffd||7b0||fffd||fffd|l|fffd||fffd| strData |fffd||fffd||fffd||752||80b3||fffd||fffd||702||fffd||fffd|B
'--------------------------------------------------------------
    Dim lResult As Long
    Dim lValueType As Long
    Dim strBuf As String
    Dim lDataBufSize As Long
    
    RegQueryStringValue = False
    On Error GoTo 0
    ' |fffd||fffd||fffd||fffd|/|fffd||7b0||fffd||fffd||30e||fffd||782||fffd||fffd||64fe||fffd||fffd||fffd||702||fffd||fffd|B
    lResult = RegQueryValueEx(hkey, strValueName, 0&, lValueType, ByVal 0&, lDataBufSize)
    If lResult = ERROR_SUCCESS Then
        If lValueType = REG_SZ Then
            strBuf = String(lDataBufSize, " ")
            lResult = RegQueryValueEx(hkey, strValueName, 0&, 0&, ByVal strBuf, lDataBufSize)
            If lResult = ERROR_SUCCESS Then
                RegQueryStringValue = True
                strData = StripTerminator(strBuf)
            End If
        End If
    End If
End Function
#End If

Private Function StripTerminator(ByVal strString As String) As String
'-----------------------------------------------------------
' FUNCTION: StripTerminator
'
' |fffd||fffd||fffd||fffd||fffd||fffd||316||fffd||fffd||fffd||fffd||fffd||fffd||7576||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||315||fffd||fffd||fffd||fffd||fffd||fffd||d3dc||fffd||fffd||fffd||101|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||502||fffd||fffd||702||fffd||fffd|B
' |fffd||fffd||fffd| Windows API |fffd||102||44f|o|fffd||fffd||fffd||155||502||fffd||fffd||a0bd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||38f||6c2||24e|g|fffd|p|fffd||fffd||fffd||702||fffd||fffd|B
'
' |fffd||fffd||fffd||348||fffd||fffd||fffd|: [strString] - |fffd|I|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||d3dc||fffd||fffd||fffd||9576||fffd||fffd||fffd||fffd|
'
' |fffd||7c2||fffd|l: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||7576||fffd||fffd||fffd||fffd||fffd||fffd| 0 |fffd||315||fffd||fffd||fffd||fffd||fffd||fffd||d3dc||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'-----------------------------------------------------------
    Dim intZeroPos As Integer

    intZeroPos = InStrT(strString, Chr$(0))
    If intZeroPos > 0 Then
        StripTerminator = Left$(strString, intZeroPos - 1)
    Else
        StripTerminator = strString
    End If
End Function

Private Function InStrT(arg1, arg2, Optional arg3, Optional arg4)
    If IsMissing(arg4) Then
        If IsMissing(arg3) Then
            InStrT = InStr(1, UCase(arg1), UCase(arg2), 0)
        Else
            InStrT = InStr(arg1, UCase(arg2), UCase(arg3), 0)
        End If
    Else
        If arg4 = 0 Then
            InStrT = InStr(arg1, arg2, arg3, 0)
        Else
            InStrT = InStr(arg1, UCase(arg2), UCase(arg3), 0)
        End If
    End If
End Function

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "SokanBSMdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: |fffd||fffd||fffd||595||fffd||fffd||fffd|
'
' |fffd||c42c| : Aug 2003, PYJ, LSQ
'=================================================
Option Explicit

Type Corr_Rtn
    nSmpNum As Long
    dblVal As Double
End Type

#If Win64 Then
    #If VBA7 Then
        Declare PtrSafe Function ysk_SokanBS_VBA Lib "MIST_C_64.dll" ( _
            ByVal nId As Long, _
            InBkName As String, InStName As String, _
            InRowBgn As Integer, InColBgn As Integer, _
            InRowEnd As Integer, InColEnd As Integer, _
            OutBkName As String, OutStName As String, _
            OutRow As Integer, OutCol As Integer, _
            kenteiFlg As Integer, compareVal As Double, timeLagVal As Integer, _
            directionFlg As Integer, dataFlg As Integer) As Integer
    #Else
        Declare Function ysk_SokanBS_VBA Lib "MIST_C_64.dll" ( _
            ByVal nId As Long, _
            InBkName As String, InStName As String, _
            InRowBgn As Integer, InColBgn As Integer, _
            InRowEnd As Integer, InColEnd As Integer, _
            OutBkName As String, OutStName As String, _
            OutRow As Integer, OutCol As Integer, _
            kenteiFlg As Integer, compareVal As Double, timeLagVal As Integer, _
            directionFlg As Integer, dataFlg As Integer) As Integer
    #End If
#Else
    #If VBA7 Then
        Declare PtrSafe Function ysk_SokanBS_VBA Lib "MIST_C.dll" ( _
            ByVal nId As Long, _
            InBkName As String, InStName As String, _
            InRowBgn As Integer, InColBgn As Integer, _
            InRowEnd As Integer, InColEnd As Integer, _
            OutBkName As String, OutStName As String, _
            OutRow As Integer, OutCol As Integer, _
            kenteiFlg As Integer, compareVal As Double, timeLagVal As Integer, _
            directionFlg As Integer, dataFlg As Integer) As Integer
    #Else
        Declare Function ysk_SokanBS_VBA Lib "MIST_C.dll" ( _
            ByVal nId As Long, _
            InBkName As String, InStName As String, _
            InRowBgn As Integer, InColBgn As Integer, _
            InRowEnd As Integer, InColEnd As Integer, _
            OutBkName As String, OutStName As String, _
            OutRow As Integer, OutCol As Integer, _
            kenteiFlg As Integer, compareVal As Double, timeLagVal As Integer, _
            directionFlg As Integer, dataFlg As Integer) As Integer
    #End If
#End If


Private Function Calc_Corr(rtnVal As Corr_Rtn, ByVal strBkName As String, ByVal strShtName As String, _
                           ByVal r1 As Long, ByVal c1 As Long, ByVal r2 As Long, ByVal c2 As Long, _
                           ByVal bPlusTimeLag As Boolean, ByVal timelag As Long) As Double
    Dim rge1 As Range, rge2 As Range
    Dim vy() As Double, v1() As Double, v2() As Double
    Dim i As Long, j As Long
    Dim smpNum As Long
    Dim d1 As Double, d2 As Double, dd As Double
    smpNum = r2 - r1 - timelag
    If bPlusTimeLag Then
        Set rge1 = Workbooks(strBkName).Worksheets(strShtName).Cells(r1 + 2 + timelag, c1 + 1).Resize(smpNum, 1)
        Set rge2 = Workbooks(strBkName).Worksheets(strShtName).Cells(r1 + 2, c2 + 1).Resize(smpNum, 1)
    Else
        Set rge1 = Workbooks(strBkName).Worksheets(strShtName).Cells(r1 + 2, c1 + 1).Resize(smpNum, 1)
        Set rge2 = Workbooks(strBkName).Worksheets(strShtName).Cells(r1 + 2 + timelag, c2 + 1).Resize(smpNum, 1)
    End If
    ReDim vy(1 To smpNum)
    ReDim v1(1 To smpNum)
    ReDim v2(1 To smpNum)
    For i = 1 To smpNum
        v1(i) = rge1(i, 1)
        vy(i) = i
    Next i
    d1 = WorksheetFunction.Slope(v1, vy)
    d2 = WorksheetFunction.Intercept(v1, vy)
    For i = 1 To smpNum
        v1(i) = v1(i) - (vy(i) * d1 + d2)
    Next i
    For i = 1 To smpNum
        v2(i) = rge2(i, 1)
        vy(i) = i
    Next i
    d1 = WorksheetFunction.Slope(v2, vy)
    d2 = WorksheetFunction.Intercept(v2, vy)
    For i = 1 To smpNum
        v2(i) = v2(i) - (vy(i) * d1 + d2)
    Next i
    dd = WorksheetFunction.Correl(v1, v2)
    rtnVal.nSmpNum = smpNum
    rtnVal.dblVal = dd
End Function

Sub IS_SknTimeLag_VBA()
Attribute IS_SknTimeLag_VBA.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bRtn As Boolean
    Dim rtn As Integer
    Dim r1 As Integer, c1 As Integer, r2 As Integer, c2 As Integer, ro As Integer, co As Integer, co2 As Integer
    Dim vInBkName As String, vInStName As String, vOutBkName As String, vOutStName As String
    Dim i As Long, j As Long
    Dim actSht As Worksheet
    Dim inpSht As Worksheet, outSht As Worksheet
    Dim nId As Long
    Dim rtnVal As Corr_Rtn
    
    bRtn = GetDlgInp(YSK_SKN)
    If Not bRtn Then Exit Sub
    
    '|fffd|b|fffd||fffd||6f8||fffd||fffd||442||fffd||fffd||102||44f|o|fffd||fffd|
    Call changeToYSKDir
    
    r1 = g_aDialog.rgeInp.Row - 1: r2 = r1 + g_aDialog.rgeInp.Rows.Count - 1
    c1 = g_aDialog.rgeInp.Column - 1: c2 = c1 + g_aDialog.RgeX.Columns.Count
    ro = g_aDialog.rgeOutBgn.Row: co = g_aDialog.rgeOutBgn.Column
    
    vInBkName = g_aDialog.rgeInp.Worksheet.Parent.Name
    vInStName = g_aDialog.rgeInp.Worksheet.Name
    vOutBkName = g_aDialog.rgeOutBgn.Worksheet.Parent.Name
    vOutStName = g_aDialog.rgeOutBgn.Worksheet.Name
    
    Set actSht = ActiveSheet
    nId = IIf(isTrialVer, 0, 1)
    
    If g_aDialog.dlgSkn.nTimeLag = 0 Then
            rtn = ysk_SokanBS_VBA(nId, vInBkName, vInStName, r1, c1, r2, c2, _
                vOutBkName, vOutStName, ro - 1, co - 1, _
                g_aDialog.dlgSkn.nJudge, g_aDialog.dlgSkn.dCompVal, g_aDialog.dlgSkn.nTimeLag, _
                forcIIf(g_aDialog.bColData, 1, 2), forcIIf(g_aDialog.bTitle, 1, 2))
                
            If rtn = -100 Then
                MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
                Exit Sub
            End If
    
        '    rtn = ysk_SokanBS_VBA(vInBkName, vInStName, vInRowBgn, vInColBgn, _
        '                      vInRowEnd, vInColEnd, vOutBkName, vOutStName, _
        '                      vOutRow, vOutCol, vkenteiFlg, vcompVal, vtmLgVal, vdiretFlg, vdataFlg)
            Call Error_Display(rtn)             'added by SJY on 1997.7.17
    Else
        Set inpSht = ThisWorkbook.Sheets("Temp1")
        Set outSht = Workbooks(vOutBkName).Sheets(vOutStName)
        For i = 1 To c2 - c1
            ThisWorkbook.Sheets("Temp1").Cells.Clear
            rtn = ysk_SokanBS_VBA(nId, vInBkName, vInStName, r1, c1, r2, c1 + i, _
                ThisWorkbook.Name, "Temp1", 1, 1, _
                g_aDialog.dlgSkn.nJudge, g_aDialog.dlgSkn.dCompVal, g_aDialog.dlgSkn.nTimeLag, _
                forcIIf(g_aDialog.bColData, 1, 2), forcIIf(g_aDialog.bTitle, 1, 2))
                
            If rtn = -100 Then
                MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
                Exit Sub
            End If
                
        '    rtn = ysk_SokanBS_VBA(vInBkName, vInStName, vInRowBgn, vInColBgn, _
        '                      vInRowEnd, vInColEnd, vOutBkName, vOutStName, _
        '                      vOutRow, vOutCol, vkenteiFlg, vcompVal, vtmLgVal, vdiretFlg, vdataFlg)
            Call Error_Display(rtn)             'added by SJY on 1997.7.17
            '
            If rtn = 0 Then
                If i = 1 Then
                    outSht.Cells(ro, co) = "|fffd||fffd||fffd||58c|W|fffd||fffd|"
                    outSht.Cells(ro, co).Font.Bold = True
                    inpSht.Cells(2, 2).Resize(Abs(g_aDialog.dlgSkn.nTimeLag) + 3, 4).Copy outSht.Cells(ro + 1, co)
                    If g_aDialog.dlgSkn.nJudge = 1 Then
                        outSht.Cells(ro + 1, co) = "|fffd||fffd||fffd||fffd||fffd||582||30c||fffd||fffd||fffd|"
                    Else
                        outSht.Cells(ro + 1, co) = "|fffd||a44a||fffd||58c|W|fffd||fffd||fffd||30c||fffd||fffd||fffd|"
                    End If
                    outSht.Cells(ro + 1, co).Font.Bold = False
                    outSht.Cells(ro + 1, co + 2) = g_aDialog.rgeInp(1, i + 1)
                    outSht.Cells(ro + 2, co + 3) = "|fffd||fffd||fffd||fffd|"
                    Call SetRangeBorder(outSht.Cells(ro + 1, co + 2).Resize(1, 2), xlThin, xlThin, xlThin, xlThin)
                    Call SetRangeBorder(outSht.Cells(ro + 2, co + 2).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
                    Call SetRangeBorder(outSht.Cells(ro + 3, co + 2).Resize(Abs(g_aDialog.dlgSkn.nTimeLag) + 1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
                    co2 = co
                    For j = 0 To Abs(g_aDialog.dlgSkn.nTimeLag)
                        Calc_Corr rtnVal, vInBkName, vInStName, r1, c1, r2, c1 + i, g_aDialog.dlgSkn.nTimeLag > 0, j
                        If j = 0 Then
                            outSht.Cells(ro + Abs(g_aDialog.dlgSkn.nTimeLag) + 5 + j, co2) = "|fffd||fffd||fffd|n|fffd||fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||fffd||fffd||58c|W|fffd||fffd|"
                            outSht.Cells(ro + Abs(g_aDialog.dlgSkn.nTimeLag) + 6 + j, co2) = "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O"
                            outSht.Cells(ro + Abs(g_aDialog.dlgSkn.nTimeLag) + 6 + j, co2 + 1) = "|fffd||fffd||fffd||fffd|"
                            outSht.Cells(ro + Abs(g_aDialog.dlgSkn.nTimeLag) + 6 + j, co2 + 2) = outSht.Cells(ro + 1, co + 2)
                        End If
                        outSht.Cells(ro + Abs(g_aDialog.dlgSkn.nTimeLag) + 7 + j, co2) = j
                        outSht.Cells(ro + Abs(g_aDialog.dlgSkn.nTimeLag) + 7 + j, co2 + 1) = rtnVal.nSmpNum
                        outSht.Cells(ro + Abs(g_aDialog.dlgSkn.nTimeLag) + 7 + j, co2 + 2) = rtnVal.dblVal
                    Next j
                    If g_aDialog.dlgSkn.nTimeLag <> 0 Then
                        Call SetRangeBorder(outSht.Cells(ro + Abs(g_aDialog.dlgSkn.nTimeLag) + 6, co2).Resize(1, 3), xlThin, xlThin, xlThin, xlThin, xlThin)
                        Call SetRangeBorder(outSht.Cells(ro + Abs(g_aDialog.dlgSkn.nTimeLag) + 7, co2).Resize(Abs(g_aDialog.dlgSkn.nTimeLag) + 1, 3), xlThin, xlThin, xlThin, xlThin, xlThin)
                    End If
                    co = co + 4
                    co2 = co2 + 3
                Else
                    inpSht.Cells(2, 4).Resize(Abs(g_aDialog.dlgSkn.nTimeLag) + 3, 2).Copy outSht.Cells(ro + 1, co)
                    outSht.Cells(ro + 1, co) = g_aDialog.rgeInp(1, i + 1)
                    outSht.Cells(ro + 2, co + 1) = "|fffd||fffd||fffd||fffd|"
                    Call SetRangeBorder(outSht.Cells(ro + 1, co).Resize(1, 2), xlThin, xlThin, xlThin, xlThin)
                    Call SetRangeBorder(outSht.Cells(ro + 2, co).Resize(1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
                    Call SetRangeBorder(outSht.Cells(ro + 3, co).Resize(Abs(g_aDialog.dlgSkn.nTimeLag) + 1, 2), xlThin, xlThin, xlThin, xlThin, xlHairline)
                    outSht.Cells(ro + Abs(g_aDialog.dlgSkn.nTimeLag) + 6, co2) = outSht.Cells(ro + 1, co)
                    For j = 0 To Abs(g_aDialog.dlgSkn.nTimeLag)
                        Calc_Corr rtnVal, vInBkName, vInStName, r1, c1, r2, c1 + i, g_aDialog.dlgSkn.nTimeLag > 0, j
                        outSht.Cells(ro + Abs(g_aDialog.dlgSkn.nTimeLag) + 7 + j, co2) = rtnVal.dblVal
                    Next j
                    If g_aDialog.dlgSkn.nTimeLag <> 0 Then
                        Call SetRangeBorder(outSht.Cells(ro + Abs(g_aDialog.dlgSkn.nTimeLag) + 6, co2), xlThin, xlThin, xlThin, xlThin, xlThin)
                        Call SetRangeBorder(outSht.Cells(ro + Abs(g_aDialog.dlgSkn.nTimeLag) + 7, co2).Resize(Abs(g_aDialog.dlgSkn.nTimeLag) + 1, 1), xlThin, xlThin, xlThin, xlThin, xlThin)
                    End If
                    co = co + 2
                    co2 = co2 + 1
                End If
                
                actSht.Activate
            Else
                Exit For
            End If
        Next i
    End If
    If rtn = 0 Then
        g_aDialog.rgeOutBgn.Worksheet.Activate
        g_aDialog.rgeOutBgn(1, 1).Select
        setSheetWakusen (False)
    End If
End Sub

'--- end of file ---


Attribute VB_Name = "TenGrp1Mdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: |fffd|U|fffd|z|fffd|}1
'
'Sep 2003, PYJ
'=================================================
Option Explicit

#If Win64 Then
    #If VBA7 Then
        Declare PtrSafe Function TenGrp1_ExtCall Lib "MIST_D_64.dll" (ByVal nId As Long, aTenGraph As TYTenGraph1, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer '2007.1.13 PYJ  old:
    #Else
        Declare Function TenGrp1_ExtCall Lib "MIST_D_64.dll" (ByVal nId As Long, aTenGraph As TYTenGraph1, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer '2007.1.13 PYJ  old:
    #End If
#Else
    #If VBA7 Then
        Declare PtrSafe Function TenGrp1_ExtCall Lib "MIST_D.dll" (ByVal nId As Long, aTenGraph As TYTenGraph1, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer '2007.1.13 PYJ  old:
    #Else
        Declare Function TenGrp1_ExtCall Lib "MIST_D.dll" (ByVal nId As Long, aTenGraph As TYTenGraph1, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer '2007.1.13 PYJ  old:
    #End If
#End If

Sub IS_SokanZu1_VBA()
Attribute IS_SokanZu1_VBA.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bRtn As Boolean
    Dim rtn
    Dim aDlgSht As DialogSheet
    Dim aTenGraph As TYTenGraph1
    Dim grp(1 To 1) As VBAGRAPH '2007.1.13 PYJ
    Dim nExcelVer As Integer
    Dim nId As Long
    
    Set aDlgSht = ThisWorkbook.DialogSheets("|fffd|U|fffd|z|fffd|}1Dlg")
    
    Do
        bRtn = aDlgSht.Show
        If Not bRtn Then Exit Do    'Cancel
        
        bRtn = GetSknzu1DlgInp(aDlgSht, aTenGraph)
    Loop Until bRtn
    
    If bRtn Then
        aTenGraph.startShtName = ActiveSheet.Name
'H15.11.3 LSQ cmt
'        aTenGraph.tateDataRge = FormulaA1_R1C1(aTenGraph.tateDataRge)
'        aTenGraph.yokoDataRge = FormulaA1_R1C1(aTenGraph.yokoDataRge)
'        aTenGraph.nameRge = FormulaA1_R1C1(aTenGraph.nameRge)
'        aTenGraph.outRge = FormulaA1_R1C1(aTenGraph.outRge)
        
        Call changeToYSKDir
        '2005.1.13 PYJ
        Call InitGrpAry(grp)
        nExcelVer = 12 'getExcelVerNo()
        nId = IIf(isTrialVer, 0, 1)
        rtn = TenGrp1_ExtCall(nId, aTenGraph, nExcelVer, grp)
        If rtn = 0 And nExcelVer >= 12 And grp(1).type <> 0 Then
            Call ConvToBSTR(grp(1))
            Application.Run GxlaBkGraph1 & "!TenGrp1", grp(1).sheetName, grp(1).grpOut, grp(1).grpData, grp(1).grpPara, _
                (aTenGraph.flgSkn = 1), (aTenGraph.flgName = 1), aTenGraph.mjNum, aTenGraph.ftSize
        End If
        If rtn = -100 Then
            MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
            Exit Sub
        End If
        'old:
        'rtn = TenGrp1_ExtCall(aTenGraph)
        Call Error_Display(rtn)
    End If
End Sub

'H15.11.3 LSQ mdf : ReferenceStyle:=xlR1C1 added
Private Function GetSknzu1DlgInp(ByVal aDlgSht As DialogSheet, aTenGraph As TYTenGraph1) As Boolean
    Dim strTmp As String
    Dim rgeTmp As Range, rgeTmp1 As Range
    Dim bRtn As Boolean
    
    GetSknzu1DlgInp = False
    
    '|fffd|^|fffd|e|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||34e|w|fffd||fffd|
    strTmp = aDlgSht.EditBoxes("editY").Text
    If GetInputRange(strTmp, rgeTmp) = False Then
        MsgBox "|fffd|^|fffd|e|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
        Exit Function
    End If
    aTenGraph.tateDataRge = "[" & rgeTmp.Worksheet.Parent.Name & "]" & rgeTmp.Worksheet.Name & "!" & rgeTmp.Address(ReferenceStyle:=xlR1C1)
    
    '|fffd||fffd||fffd|R|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||34e|w|fffd||fffd|
    strTmp = aDlgSht.EditBoxes("editX").Text
    If GetInputRange(strTmp, rgeTmp) = False Then
        MsgBox "|fffd||fffd||fffd|R|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
        Exit Function
    End If
    aTenGraph.yokoDataRge = "[" & rgeTmp.Worksheet.Parent.Name & "]" & rgeTmp.Worksheet.Name & "!" & rgeTmp.Address(ReferenceStyle:=xlR1C1)
    
    '|fffd||91||316||fffd||fffd||315|\|fffd||fffd|
    If aDlgSht.CheckBoxes("chk1") = xlOn Then
        aTenGraph.flgName = 1      'Yes
        bRtn = GetNameInfo(aDlgSht, aTenGraph)
        If Not bRtn Then Exit Function
    Else
        aTenGraph.flgName = 2   'No
    End If
    '|fffd|t|fffd|H|fffd||fffd||fffd|g
    aTenGraph.ftSize = Val(aDlgSht.EditBoxes("editFontSize").Text)
    
    '|fffd|P|fffd||fffd||fffd||58c|W|fffd||fffd|
    If aDlgSht.OptionButtons("optSkn1") = xlOn Then aTenGraph.flgSkn = 2 Else aTenGraph.flgSkn = 1
    
    '|fffd|f|fffd|[|fffd|^|fffd|n|fffd||fffd||30c||fffd||fffd||fffd|
    'If aDlgSht.OptionButtons("optDiret1") = xlOn Then aTenGraph.flgDir = 1 Else aTenGraph.flgDir = 2
    aTenGraph.flgDir = 1
    
    '1|fffd|s|fffd||fffd||682||30d||fffd||fffd||68e||fffd||fffd|
    'If aDlgSht.OptionButtons("optData1") = xlOn Then aTenGraph.flgTitle = 1 Else aTenGraph.flgTitle = 2
    aTenGraph.flgTitle = 1
    
    '|fffd||fffd||fffd|l|fffd||20a|O|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|
    If aDlgSht.OptionButtons("optSkip") = xlOn Then aTenGraph.flgNotData = 1 Else aTenGraph.flgNotData = 2
    
    '|fffd||fffd||fffd||28f|o|fffd||354||348||fffd|
    Set rgeTmp1 = GetOutputRgeBgn(aDlgSht, rgeTmp)
    If Not (rgeTmp1 Is Nothing) Then
        aTenGraph.outRge = "[" & rgeTmp1.Worksheet.Parent.Name & "]" & rgeTmp1.Worksheet.Name & "!" & rgeTmp1.Address(ReferenceStyle:=xlR1C1)
        GetSknzu1DlgInp = True
    End If
End Function

'|fffd||91||316||fffd||fffd||315|\|fffd||fffd|
Private Function GetNameInfo(ByVal aDlgSht As DialogSheet, aTenGraph As TYTenGraph1) As Boolean
    Dim strTmp As String
    Dim rgeTmp As Range
    Dim tmp1
    Dim nTmp1 As Integer
    
    GetNameInfo = False
    
    '|fffd||fffd||fffd||314||348||fffd|
    strTmp = aDlgSht.EditBoxes("editName").Text
    If GetInputRange(strTmp, rgeTmp) = False Then
        MsgBox "|fffd||91||316||fffd||fffd||316||fffd||fffd||314||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
        Exit Function
    End If
    aTenGraph.namerge = "[" & rgeTmp.Worksheet.Parent.Name & "]" & rgeTmp.Worksheet.Name & "!" & rgeTmp.Address(ReferenceStyle:=xlR1C1)
    
    '|fffd||fffd||fffd||fffd||fffd||fffd|
    tmp1 = aDlgSht.EditBoxes("editMjNum").Text: nTmp1 = Val(tmp1)
    If Not IsNumeric(tmp1) Or nTmp1 < 1 Or nTmp1 > 50 Then
        MsgBox "|fffd||91||316||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
        Exit Function
    End If
    aTenGraph.mjNum = nTmp1

    GetNameInfo = True
End Function

'=== EOF ===

Attribute VB_Name = "TenGrp2Mdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: |fffd|U|fffd|z|fffd|}2
'
'Sep 2003, PYJ
'=================================================
Option Explicit

#If Win64 Then
    #If VBA7 Then
        Declare PtrSafe Function TenGrp2_ExtCall Lib "MIST_D_64.dll" (ByVal nId As Long, aTenGraph2 As TYTenGraph2, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer '2007.1.13 PYJ  old:
    #Else
        Declare Function TenGrp2_ExtCall Lib "MIST_D_64.dll" (ByVal nId As Long, aTenGraph2 As TYTenGraph2, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer '2007.1.13 PYJ  old:
    #End If
#Else
    #If VBA7 Then
        Declare PtrSafe Function TenGrp2_ExtCall Lib "MIST_D.dll" (ByVal nId As Long, aTenGraph2 As TYTenGraph2, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer '2007.1.13 PYJ  old:
    #Else
        Declare Function TenGrp2_ExtCall Lib "MIST_D.dll" (ByVal nId As Long, aTenGraph2 As TYTenGraph2, ByVal nExcelVer As Long, grp() As VBAGRAPH) As Integer '2007.1.13 PYJ  old:
    #End If
#End If

Sub SokanZu2_VBA()
Attribute SokanZu2_VBA.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bRtn As Boolean
    Dim rtn
    Dim aDlgSht As DialogSheet
    Dim aTenGraph As TYTenGraph2
    Dim grp(1 To 1) As VBAGRAPH '2007.1.13 PYJ
    Dim nExcelVer As Integer
    Dim nId As Long
    
    Set aDlgSht = ThisWorkbook.DialogSheets("|fffd|U|fffd|z|fffd|}2Dlg")
    aDlgSht.GroupBoxes("grpMtd").Visible = False
    
    Do
        bRtn = aDlgSht.Show
        If Not bRtn Then Exit Do    'Cancel
        
        bRtn = GetSknzu2DlgInp(aDlgSht, aTenGraph)
    Loop Until bRtn
    
    If bRtn Then
        aTenGraph.startShtName = ActiveSheet.Name
'H15.11.3 LSQ cmt : add ReferenceStyle:=xlR1C1
'
'        aTenGraph.dataRge = FormulaA1_R1C1(aTenGraph.dataRge)
'        aTenGraph.tateDataRge = FormulaA1_R1C1(aTenGraph.tateDataRge)
'        aTenGraph.yokoDataRge = FormulaA1_R1C1(aTenGraph.yokoDataRge)
'        aTenGraph.outRge = FormulaA1_R1C1(aTenGraph.outRge)
        
        Call changeToYSKDir
        '2005.1.13 PYJ
        Call InitGrpAry(grp)
        nExcelVer = getExcelVerNo()
        nId = IIf(isTrialVer, 0, 1)
        
        rtn = TenGrp2_ExtCall(nId, aTenGraph, nExcelVer, grp)
        If rtn = -100 Then
            MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
            Exit Sub
        End If
        If rtn = 0 And nExcelVer >= 12 And grp(1).type > 0 Then
            Call ConvToBSTR(grp(1))
            Application.Run GxlaBkGraph1 & "!TenGrp2", grp(1).sheetName, grp(1).grpOut, grp(1).grpData, grp(1).type, _
                aTenGraph.flgKan, aTenGraph.wakuRow, aTenGraph.wakuCol
        End If
        'old:
        'rtn = TenGrp2_ExtCall(aTenGraph)
        Call Error_Display(rtn)
    End If
End Sub

Private Function GetSknzu2DlgInp(ByVal aDlgSht As DialogSheet, aTenGraph As TYTenGraph2) As Boolean
    Dim strTmp As String
    Dim rgeTmp As Range, rgeTmp1 As Range
    Dim bRtn As Boolean
    
    GetSknzu2DlgInp = False
    
    '|fffd|f|fffd|[|fffd|^|fffd||348||34e|w|fffd||fffd|
    Set rgeTmp = GetDataInRange(aDlgSht, aTenGraph)
    If rgeTmp Is Nothing Then Exit Function
    
    '|fffd||fffd||fffd||582||30f|o|fffd||fffd|
    If aDlgSht.CheckBoxes("chk1") = xlOn Then aTenGraph.flgSkn = 1 Else aTenGraph.flgSkn = 2    '|fffd|P|fffd||fffd||fffd||58c|W|fffd||fffd|
    If aDlgSht.CheckBoxes("chk2") = xlOn Then aTenGraph.flgMark = 1 Else aTenGraph.flgMark = 2  '|fffd||fffd||fffd||fffd|}|fffd|[|fffd|N
    If aDlgSht.CheckBoxes("chk3") = xlOn Then aTenGraph.flgPval = 1 Else aTenGraph.flgPval = 2  '|fffd|o|fffd|l
    If aDlgSht.CheckBoxes("chk4") = xlOn Then aTenGraph.flgKK = 1 Else aTenGraph.flgKK = 2      '|fffd||fffd||fffd||fffd||fffd||fffd|A
    
    '|fffd|\|fffd||fffd||fffd|`|fffd||fffd|
    bRtn = GetRespForm(aDlgSht, aTenGraph)
    If Not bRtn Then Exit Function
    
    '|fffd|f|fffd|[|fffd|^|fffd|n|fffd||fffd||30c||fffd||fffd||fffd|
    'If aDlgSht.OptionButtons("optDiret1") = xlOn Then aTenGraph.flgDir = 1 Else aTenGraph.flgDir = 2
    aTenGraph.flgDir = 1
    
    '1|fffd|s|fffd||fffd||682||30d||fffd||fffd||68e||fffd||fffd|
    'If aDlgSht.OptionButtons("optData1") = xlOn Then aTenGraph.flgTitle = 1 Else aTenGraph.flgTitle = 2
    aTenGraph.flgTitle = 1
    
    '|fffd||fffd||fffd|l|fffd||20a|O|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|
    If aDlgSht.OptionButtons("optSkip") = xlOn Then aTenGraph.flgNotData = 1 Else aTenGraph.flgNotData = 2
    
    '|fffd||fffd||fffd||28f|o|fffd||354||348||fffd|
    Set rgeTmp1 = GetOutputRgeBgn(aDlgSht, rgeTmp)
    If Not (rgeTmp1 Is Nothing) Then
        aTenGraph.outRge = "[" & rgeTmp1.Worksheet.Parent.Name & "]" & rgeTmp1.Worksheet.Name & "!" & rgeTmp1.Address(ReferenceStyle:=xlR1C1)
        GetSknzu2DlgInp = True
    End If
End Function

'|fffd|f|fffd|[|fffd|^|fffd||348||34e|w|fffd||fffd|
Private Function GetDataInRange(ByVal aDlgSht As DialogSheet, aTenGraph As TYTenGraph2) As Range
    Dim strTmp As String
    Dim rgeTmp As Range, rgeTmp1 As Range

    Set GetDataInRange = Nothing
    If aDlgSht.OptionButtons("optMtd1") = xlOn Then     'Matrix
        aTenGraph.flgDataType = 1
        strTmp = aDlgSht.EditBoxes("editRge").Text
        If GetInputRange(strTmp, rgeTmp) = False Then
            MsgBox "|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||354||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
            Exit Function
        End If
        aTenGraph.dataRge = "[" & rgeTmp.Worksheet.Parent.Name & "]" & rgeTmp.Worksheet.Name & "!" & rgeTmp.Address(ReferenceStyle:=xlR1C1)
        Set GetDataInRange = rgeTmp
    Else                                                'Group
        '|fffd|Q|fffd||283|^|fffd|e|fffd||348||34e|w|fffd||fffd|
        strTmp = aDlgSht.EditBoxes("editY").Text
        If GetInputRange(strTmp, rgeTmp) = False Then
            MsgBox "|fffd|Q|fffd||283|^|fffd|e|fffd||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
            Exit Function
        End If
        aTenGraph.tateDataRge = "[" & rgeTmp.Worksheet.Parent.Name & "]" & rgeTmp.Worksheet.Name & "!" & rgeTmp.Address(ReferenceStyle:=xlR1C1)
    
        '|fffd|Q|fffd||283||fffd||fffd|R|fffd||348||34e|w|fffd||fffd|
        strTmp = aDlgSht.EditBoxes("editX").Text
        If GetInputRange(strTmp, rgeTmp) = False Then
            MsgBox "|fffd|Q|fffd||283||fffd||fffd|R|fffd||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
            Exit Function
        End If
        aTenGraph.yokoDataRge = "[" & rgeTmp.Worksheet.Parent.Name & "]" & rgeTmp.Worksheet.Name & "!" & rgeTmp.Address(ReferenceStyle:=xlR1C1)
        Set GetDataInRange = rgeTmp
    End If
End Function

'|fffd|\|fffd||fffd||fffd|`|fffd||fffd|
Private Function GetRespForm(ByVal aDlgSht As DialogSheet, aTenGraph As TYTenGraph2) As Boolean
    Dim strTmp As String
    Dim rgeTmp As Range
    Dim tmp1
    Dim nTmp1 As Integer
    
    GetRespForm = False
    
    '|fffd|g|fffd|c
    tmp1 = aDlgSht.EditBoxes("editRow").Text: nTmp1 = Val(tmp1)
    If Not IsNumeric(tmp1) Or nTmp1 < 1 Then
        'MsgBox "|fffd|\|fffd||fffd||fffd|`|fffd||fffd||fffd|g|fffd|c|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
        'Exit Function
        nTmp1 = 8
    End If
    aTenGraph.wakuRow = nTmp1

    '|fffd|g|fffd||fffd|
    tmp1 = aDlgSht.EditBoxes("editCol").Text: nTmp1 = Val(tmp1)
    If Not IsNumeric(tmp1) Or nTmp1 < 1 Or nTmp1 > 255 Then
        'MsgBox "|fffd|\|fffd||fffd||fffd|`|fffd||fffd||fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
        'Exit Function
        nTmp1 = 4
    End If
    aTenGraph.wakuCol = nTmp1

    '|fffd|g|fffd||fffd|
    If aDlgSht.OptionButtons("optKan1") = xlOn Then aTenGraph.flgKan = 2 Else aTenGraph.flgKan = 1
    
    GetRespForm = True
End Function

'=== EOF ===

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "YouinMdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: |fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|
'
' |fffd||c42c| : 1996/1/19 -- 1996/2/26 wxl,lsq
'
' |fffd|C|fffd||fffd| : 02.7.10 LSQ
' |fffd|C|fffd||fffd| : Aug 2003, PYJ
'=================================================
Option Explicit

#If Win64 Then
    #If VBA7 Then
        Declare PtrSafe Function ysk_Youin_VBA Lib "MIST_F_64.dll" ( _
            ByVal nId As Long, _
            YBkName As String, YStName As String, YRowBgn As Integer, YColBgn As Integer, YRowEnd As Integer, YColEnd As Integer, _
            XBkName As String, XStName As String, XRowBgn As Integer, XColBgn As Integer, XRowEnd As Integer, XColEnd As Integer, _
            XSelectFlg As Integer, OutBkName As String, OutStName As String, OutRow As Integer, OutCol As Integer, _
            methodFlg As Integer, suiteiFlg As Integer, timelagFlg As Integer, Fin As Double, Fout As Double, _
            graphFlg As Integer, directionFlg As Integer, dataFlg As Integer, _
            timeFlg As Integer, timeBgnYear As Integer, timeBgnMonth As Integer, _
            tesuk As Integer) As Integer
    #Else
        Declare Function ysk_Youin_VBA Lib "MIST_F_64.dll" ( _
            ByVal nId As Long, _
            YBkName As String, YStName As String, YRowBgn As Integer, YColBgn As Integer, YRowEnd As Integer, YColEnd As Integer, _
            XBkName As String, XStName As String, XRowBgn As Integer, XColBgn As Integer, XRowEnd As Integer, XColEnd As Integer, _
            XSelectFlg As Integer, OutBkName As String, OutStName As String, OutRow As Integer, OutCol As Integer, _
            methodFlg As Integer, suiteiFlg As Integer, timelagFlg As Integer, Fin As Double, Fout As Double, _
            graphFlg As Integer, directionFlg As Integer, dataFlg As Integer, _
            timeFlg As Integer, timeBgnYear As Integer, timeBgnMonth As Integer, _
            tesuk As Integer) As Integer
    #End If
#Else
    #If VBA7 Then
        Declare PtrSafe Function ysk_Youin_VBA Lib "MIST_F.dll" ( _
            ByVal nId As Long, _
            YBkName As String, YStName As String, YRowBgn As Integer, YColBgn As Integer, YRowEnd As Integer, YColEnd As Integer, _
            XBkName As String, XStName As String, XRowBgn As Integer, XColBgn As Integer, XRowEnd As Integer, XColEnd As Integer, _
            XSelectFlg As Integer, OutBkName As String, OutStName As String, OutRow As Integer, OutCol As Integer, _
            methodFlg As Integer, suiteiFlg As Integer, timelagFlg As Integer, Fin As Double, Fout As Double, _
            graphFlg As Integer, directionFlg As Integer, dataFlg As Integer, _
            timeFlg As Integer, timeBgnYear As Integer, timeBgnMonth As Integer, _
            tesuk As Integer) As Integer
    #Else
        Declare Function ysk_Youin_VBA Lib "MIST_F.dll" ( _
            ByVal nId As Long, _
            YBkName As String, YStName As String, YRowBgn As Integer, YColBgn As Integer, YRowEnd As Integer, YColEnd As Integer, _
            XBkName As String, XStName As String, XRowBgn As Integer, XColBgn As Integer, XRowEnd As Integer, XColEnd As Integer, _
            XSelectFlg As Integer, OutBkName As String, OutStName As String, OutRow As Integer, OutCol As Integer, _
            methodFlg As Integer, suiteiFlg As Integer, timelagFlg As Integer, Fin As Double, Fout As Double, _
            graphFlg As Integer, directionFlg As Integer, dataFlg As Integer, _
            timeFlg As Integer, timeBgnYear As Integer, timeBgnMonth As Integer, _
            tesuk As Integer) As Integer
    #End If
#End If

Dim f_nCharRow As Integer   '1 based output position of chart got from C function ysk_Youin_VBA, Oct 2003, PYJ

Sub Youin_VBA()
Attribute Youin_VBA.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bRtn As Boolean, bGraph As Boolean
    Dim nXSmpNum As Integer ', nXItem As Integer    'cmt Oct 2003, PYJ
    Dim rgeData As Range, rgeChartBgn As Range, rgeData1 As Range
    Dim r As Integer            'Oct 2003, PYJ
    
    bRtn = GetDlgInp(YSK_JKK)
    If Not bRtn Then Exit Sub
    
    '|fffd|b|fffd||fffd||6f8||fffd||fffd||442||fffd||fffd||102||44f|o|fffd||fffd|
    Call changeToYSKDir
    
    bGraph = g_aDialog.bGraph
    g_aDialog.bGraph = False
    bRtn = doYouin_VBA()
    
    If bRtn And bGraph Then
        r = g_aDialog.rgeOutBgn.Row
        'nXItem = g_aDialog.rgeX.Columns.Count  'cmt Oct 2003, PYJ
        nXSmpNum = g_aDialog.RgeX.Rows.Count - 1
        
        Set rgeChartBgn = g_aDialog.rgeOutBgn.Offset(f_nCharRow - r, 0)                     'Oct 2003, PYJ
        Set rgeData = rgeChartBgn.Offset(-(nXSmpNum + 2), 0).Range("A1:E" & nXSmpNum + 1)   'mdf Oct 2003, PYJ
        Set rgeData1 = rgeData.Columns(forcIIf(g_aDialog.dlgJkk.nSuitei = 1 Or g_aDialog.dlgJkk.bTesuk, "B:C", "B:E"))
        
        Call COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t(rgeChartBgn, _
            rgeData.Columns("A"), _
            rgeData1, _
            "|fffd|\|fffd||fffd||fffd|O|fffd||fffd||fffd|t", "|fffd||fffd||fffd||fffd|", , , , 0)  'mdf Oct 2003, PYJ
        g_aDialog.rgeOutBgn.Select
    End If
End Sub
    
Function doYouin_VBA() As Boolean
Attribute doYouin_VBA.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim rtn As Integer
    Dim ry1 As Integer, cy1 As Integer, ry2 As Integer, cy2 As Integer, ro As Integer, co As Integer
    Dim rx1 As Integer, cx1 As Integer, rx2 As Integer, cx2 As Integer
    Dim nXSel As Integer, nTimeLag As Integer, nGraph As Integer, nColData As Integer, nTitle As Integer, nTesuk As Integer
    Dim vYBkName As String, vYStName As String, vXBkName As String, vXStName As String
    Dim vOutBkName As String, vOutStName As String
    Dim nId As Long
    
    ry1 = g_aDialog.rgeInp.Row - 1: ry2 = ry1 + g_aDialog.rgeInp.Rows.Count - 1
    cy1 = g_aDialog.rgeInp.Column - 1: cy2 = cy1 + g_aDialog.rgeInp.Columns.Count - 1
    rx1 = g_aDialog.RgeX.Row - 1: rx2 = rx1 + g_aDialog.RgeX.Rows.Count - 1
    cx1 = g_aDialog.RgeX.Column - 1: cx2 = cx1 + g_aDialog.RgeX.Columns.Count - 1
    ro = g_aDialog.rgeOutBgn.Row - 1: co = g_aDialog.rgeOutBgn.Column - 1
    
    nXSel = forcIIf(g_aDialog.bXSel, 2, 1)
    nTimeLag = forcIIf(g_aDialog.dlgJkk.bTimeLag, 2, 1)
    nGraph = forcIIf(g_aDialog.bGraph, 2, 1)
    nColData = forcIIf(g_aDialog.bColData, 1, 2)
    nTitle = forcIIf(g_aDialog.bTitle, 1, 2)
    nTesuk = forcIIf(g_aDialog.dlgJkk.bTesuk, 2, 1)
    
    vYBkName = g_aDialog.rgeInp.Worksheet.Parent.Name
    vYStName = g_aDialog.rgeInp.Worksheet.Name
    vXBkName = g_aDialog.RgeX.Worksheet.Parent.Name
    vXStName = g_aDialog.RgeX.Worksheet.Name
    vOutBkName = g_aDialog.rgeOutBgn.Worksheet.Parent.Name
    vOutStName = g_aDialog.rgeOutBgn.Worksheet.Name
    
    nId = IIf(isTrialVer, 0, 1)
    
    rtn = ysk_Youin_VBA(nId, vYBkName, vYStName, ry1, cy1, ry2, cy2, _
        vXBkName, vXStName, rx1, cx1, rx2, cx2, _
        nXSel, vOutBkName, vOutStName, ro, co, _
        g_aDialog.dlgJkk.nMethod, g_aDialog.dlgJkk.nSuitei, nTimeLag, _
        g_aDialog.dlgJkk.F_in, g_aDialog.dlgJkk.F_out, _
        nGraph, nColData, nTitle, _
        g_aDialog.nTimeStyle, g_aDialog.nYearBgn, g_aDialog.nMonth, _
        nTesuk)
        
    If rtn = -100 Then
        MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
        doYouin_VBA = False
        Exit Function
    End If
    
    f_nCharRow = ro + 1 + 1     'Oct 2003, PYJ
        'ro: 0 based row no. next to the last data line brought back by ysk_Youin_VBA

'        rtn = ysk_Youin_VBA(vYBkName, vYStName, vYRowBgn, vYColBgn, _
'                    vYRowEnd, vYColEnd, vXBkName, vXStName, _
'                    vXRowBgn, vXColBgn, vXRowEnd, vXColEnd, _
'                    vXseltFlg, vOutBkName, vOutStName, vOutRow, vOutCol, _
'                    vmethodFlg, vsuiteiFlg, vtimelagFlg, vFin, vFout, vgraphFlg, _
'                    vdiretFlg, vdataFlg, vtimeFlg, vbgnYear, vbgnMonth)
    Call Error_Display(rtn)             'added by SJY on 1997.7.17

    doYouin_VBA = (rtn = 0)
    
End Function

'--- end of file ---
Attribute VB_Name = "comm95"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: commMdl for Excel95
'
' |fffd||c42c| : 2003.9 LSQ
'
'=================================================
Option Explicit

'Draw one border line of the given range
'nBordersIndex: -4160--xlTop; -4107--xlBottom; -4131--xlLeft; -4152--xlRight; 12--xlInsideHorizontal; 11--xlInsideVertical
'nLineStyle: xlContinuous/xlNone/xlDot/xlDash
'nBorderWeight: xlThick/xlMedium/xlThin/xlHairline
Function BorderLine95(ByVal rge As Range, nBordersIndex As Integer, nLineStyle As Integer, nBorderWeight As Integer)
Attribute BorderLine95.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim rgeTmp As Range, rgeTmp1 As Range
    Dim r As Integer, c As Integer
    
    r = rge.Rows.Count()
    c = rge.Columns.Count()
    
    If nBordersIndex = xlTop Then
        Set rgeTmp = rge.Rows(1)
        rgeTmp.Borders(xlTop).LineStyle = xlNone
        If rgeTmp.Row() > 1 Then
            Set rgeTmp1 = rgeTmp.Offset(-1, 0)
            rgeTmp1.Borders(xlBottom).LineStyle = xlNone
        End If
    ElseIf nBordersIndex = xlBottom Then
        Set rgeTmp = rge.Rows(r)
        rgeTmp.Borders(xlBottom).LineStyle = xlNone
        Set rgeTmp1 = rgeTmp.Offset(1, 0)
        rgeTmp1.Borders(xlTop).LineStyle = xlNone
    ElseIf nBordersIndex = xlLeft Then
        Set rgeTmp = rge.Columns(1)
        rgeTmp.Borders(xlLeft).LineStyle = xlNone
        If rgeTmp.Column() > 1 Then
            Set rgeTmp1 = rgeTmp.Offset(0, -1)
            rgeTmp1.Borders(xlRight).LineStyle = xlNone
        End If
    ElseIf nBordersIndex = xlRight Then
        Set rgeTmp = rge.Columns(c)
        rgeTmp.Borders(xlRight).LineStyle = xlNone
        Set rgeTmp1 = rgeTmp.Offset(0, 1)
        rgeTmp1.Borders(xlLeft).LineStyle = xlNone
    ElseIf nBordersIndex = 12 Then      'xlInsideHorizontal
        If r > 1 Then r = r - 1
        Set rgeTmp = rge.Rows("1:" & r)
        rgeTmp.Borders(xlBottom).LineStyle = xlNone
        nBordersIndex = xlBottom
        Set rgeTmp1 = rgeTmp.Offset(1, 0)
        rgeTmp1.Borders(xlTop).LineStyle = xlNone
    ElseIf nBordersIndex = 11 Then      'xlInsideVertical
        If c > 1 Then c = c - 1
        Set rgeTmp = rge.Columns("A:" & nTo26Str(c))
        nBordersIndex = xlRight
        rgeTmp.Borders(xlRight).LineStyle = xlNone
        Set rgeTmp1 = rgeTmp.Offset(0, 1)
        rgeTmp1.Borders(xlLeft).LineStyle = xlNone
    Else        'unknown
        Set rgeTmp = rge
    End If
        
    With rgeTmp.Borders(nBordersIndex)
        If nLineStyle <> xlContinuous Then .LineStyle = nLineStyle
        If nLineStyle <> xlNone Then .Weight = nBorderWeight
        .ColorIndex = xlAutomatic
    End With
End Function

'nInsideHor, nInsideVer: 0--None; 1--Only first row/column; >=2--All rows/columns
'nWrapRowNo: >0--the No. of the row in which the text will be wraped; 0--none
'Function BorderFrame(rgeObj As Range, nOutsideWgt As XlBorderWeight, nInsideWgt As XlBorderWeight      'for 2000
Function BorderFrame95(ByVal RgeObj As Range, nOutsideWgt As Integer, nInsideWgt As Integer, _
        ByVal nInsideHor As Integer, ByVal nInsideVer As Integer, Optional ByVal nWrapRowNo)
Attribute BorderFrame95.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim nRowNum As Long, nColNum As Integer
    Dim rge1 As Range
    
    If UCase(TypeName(nWrapRowNo)) = "ERROR" Then nWrapRowNo = 0
    nRowNum = RgeObj.Rows.Count
    nColNum = RgeObj.Columns.Count
    
    If nColNum > 1 And nInsideVer > 0 Then
        If nInsideVer = 1 Then
            Set rge1 = RgeObj.Columns(1)
            Call BorderLine95(rge1, xlRight, xlContinuous, nInsideWgt)
        Else
            Call BorderLine95(RgeObj, 11, xlContinuous, nInsideWgt)
        End If
    End If
    
    If nRowNum > 1 And nInsideHor > 0 Then
        If nInsideHor = 1 Then
            Set rge1 = RgeObj.Rows(1)
            Call BorderLine95(rge1, xlBottom, xlContinuous, nInsideWgt)
        Else
            Call BorderLine95(RgeObj, 12, xlContinuous, nInsideWgt)
        End If
    End If
    
    Call BorderLine95(RgeObj, xlTop, xlContinuous, nOutsideWgt)
    Call BorderLine95(RgeObj, xlBottom, xlContinuous, nOutsideWgt)
    Call BorderLine95(RgeObj, xlLeft, xlContinuous, nOutsideWgt)
    Call BorderLine95(RgeObj, xlRight, xlContinuous, nOutsideWgt)
    
    If nWrapRowNo > 0 Then
        Set rge1 = RgeObj.Rows(nWrapRowNo)
        rge1.VerticalAlignment = xlTop
        rge1.WrapText = True
    End If
End Function

'=== EOF ===
Attribute VB_Name = "comm97_"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: commMdl for Excel97 or later
'
' |fffd||c42c| : 2003.9 LSQ
'
'=================================================
Option Explicit

'Draw one border line of the given range
'nBordersIndex: xlEdgeTop/xlEdgeBottom/xlEdgeLeft/xlEdgeRight/xlInsideHorizontal/xlInsideVertical
'nLineStyle: xlContinuous/xlNone/xlDot/xlDash
'nBorderWeight: xlThick/xlMedium/xlThin/xlHairline
'
Function BorderLine97(ByVal rge As Range, nBordersIndex As Integer, nLineStyle As Integer, nBorderWeight As Integer)
Attribute BorderLine97.VB_ProcData.VB_Invoke_Func = " \n14"
    With rge.Borders(nBordersIndex)
        .LineStyle = nLineStyle
        If nLineStyle <> xlNone Then .Weight = nBorderWeight
        .ColorIndex = xlAutomatic
    End With
End Function

'nInsideHor, nInsideVer: 0--None; 1--Only first row/column; >=2--All rows/columns
'nWrapRowNo: >0--the No. of the row in which the text will be wraped; 0--none
'Function BorderFrame(rgeObj As Range, nOutsideWgt As XlBorderWeight, nInsideWgt As XlBorderWeight      'for 2000
'
Function BorderFrame97(ByVal RgeObj As Range, nOutsideWgt As Integer, nInsideWgt As Integer, _
        ByVal nInsideHor As Integer, ByVal nInsideVer As Integer, Optional ByVal nWrapRowNo)
Attribute BorderFrame97.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim nRowNum As Long, nColNum As Integer
    Dim rge1 As Range
    
    If UCase(TypeName(nWrapRowNo)) = "ERROR" Then nWrapRowNo = 0
    
    nRowNum = RgeObj.Rows.Count
    nColNum = RgeObj.Columns.Count
    
    RgeObj.BorderAround xlContinuous, nOutsideWgt
    
    If nColNum > 1 And nInsideVer > 0 Then
        If nInsideVer = 1 Then
            Set rge1 = RgeObj.Columns(1)
            Call BorderLine(rge1, xlRight, xlContinuous, nInsideWgt)       'xlEdgeRight
        Else
            Call BorderLine97(RgeObj, 11, xlContinuous, nInsideWgt)     'xlInsideVertical
        End If
    End If
    
    If nRowNum > 1 And nInsideHor > 0 Then
        If nInsideHor = 1 Then
            Set rge1 = RgeObj.Rows(1)
            Call BorderLine97(rge1, xlBottom, xlContinuous, nInsideWgt)        'xlEdgeBottom
        Else
            Call BorderLine97(RgeObj, 12, xlContinuous, nInsideWgt)     'xlInsideHorizontal
        End If
    End If
    If nWrapRowNo > 0 Then
        Set rge1 = RgeObj.Rows(nWrapRowNo)
        rge1.VerticalAlignment = xlTop
        rge1.WrapText = True
    End If
End Function

'=== EOF ===
Attribute VB_Name = "commAllVer"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: commMdl for Excel all version
'
' |fffd||c42c| : Oct 2003, PYJ
'
'=================================================
Option Explicit

Function IsVer95() As Boolean
Attribute IsVer95.VB_ProcData.VB_Invoke_Func = " \n14"
    If Val(Application.Version) < 8 Then    'Excel 95
        IsVer95 = True
    Else
        IsVer95 = False
    End If
End Function

'nBordersIndex: -4160--xlTop; -4107--xlBottom; -4131--xlLeft; -4152--xlRight; 12--xlInsideHorizontal; 11--xlInsideVertical
Function BorderLine(ByVal rge As Range, nBordersIndex As Integer, nLineStyle As Integer, nBorderWeight As Integer)
Attribute BorderLine.VB_ProcData.VB_Invoke_Func = " \n14"
    If IsVer95() Then    'Excel 95
        Call BorderLine95(rge, nBordersIndex, nLineStyle, nBorderWeight)
    Else    '97-
        If nBordersIndex = xlTop Then
            nBordersIndex = 8           'xlEdgeTop
        ElseIf nBordersIndex = xlBottom Then
            nBordersIndex = 9           'xlEdgeBottom
        ElseIf nBordersIndex = xlLeft Then
            nBordersIndex = 7           'xlEdgeLeft
        ElseIf nBordersIndex = xlRight Then
            nBordersIndex = 10          'xlEdgeRight
        End If
        '11--xlInsideVertical; 12--xlInsideHorizontal are the same
        Call BorderLine97(rge, nBordersIndex, nLineStyle, nBorderWeight)
    End If
End Function

Function BorderFrame(ByVal RgeObj As Range, nOutsideWgt As Integer, nInsideWgt As Integer, _
        ByVal nInsideHor As Integer, ByVal nInsideVer As Integer, Optional ByVal nWrapRowNo)
Attribute BorderFrame.VB_ProcData.VB_Invoke_Func = " \n14"
    If IsVer95() Then    'Excel 95
        Call BorderFrame95(RgeObj, nOutsideWgt, nInsideWgt, nInsideHor, nInsideVer, nWrapRowNo)
    Else    '97-
        Call BorderFrame97(RgeObj, nOutsideWgt, nInsideWgt, nInsideHor, nInsideVer, nWrapRowNo)
    End If
End Function

'modify |fffd|X|fffd||fffd||fffd||fffd||fffd||fffd| chart
Sub MdfChartKeikou(ByVal nXSmpNum As Integer)
Attribute MdfChartKeikou.VB_ProcData.VB_Invoke_Func = " \n14"
    If IsVer95() Then    'Excel 95
        ActiveChart.Axes(xlCategory).Select
        With Selection
            .MinorTickMark = xlInside
            .TickLabelSpacing = Int(nXSmpNum / 6 + 0.999)
            .TickMarkSpacing = .TickLabelSpacing
        End With
    Else    '97-
        Call CharNoAutoFont
        ActiveChart.Axes(xlCategory).TickMarkSpacing = ActiveChart.Axes(xlCategory).TickLabelSpacing
    End If
End Sub

'common chart Font |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| & Ticks
Sub SetCommChart(ByVal strGrpName As String, ByVal num As Integer)
Attribute SetCommChart.VB_ProcData.VB_Invoke_Func = " \n14"
    ActiveSheet.ChartObjects(strGrpName).Activate
    If Not IsVer95() Then    'Excel 97 -
        Call CharNoAutoFont
    End If
    ActiveChart.PlotArea.Interior.ColorIndex = xlNone
    ActiveChart.Axes(xlCategory).Select
    With Selection
        .CrossesAt = 1
        If IsVer95() Then .TickLabelSpacing = Int(num / 6 + 0.999)
        '.TickMarkSpacing = .TickLabelSpacing
        .AxisBetweenCategories = False
        .ReversePlotOrder = False
    End With
End Sub

'
'H12.12.7 LSQ (copied from TK2!commMdl)
'
Sub SortByCol(ByVal zenRge, bDsnt As Boolean)
Attribute SortByCol.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bgnCel As Range
    Dim orderVal As Integer
    
    Set bgnCel = zenRge.Offset(0, 0).Range("A2")
    If bDsnt Then orderVal = xlDescending Else orderVal = xlAscending
    
    If IsVer95() Then    'Excel 95
        zenRge.Sort Key1:=bgnCel, Order1:=orderVal, Header:=xlGuess, _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
    Else    '97-
        zenRge.Sort Key1:=bgnCel, Order1:=orderVal, Header:=xlGuess, _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, SortMethod:=1 'xlPinYin
    End If
End Sub
'
'H13.2.1 LSQ (from TK3!commMdl)
'
Sub SortByCol_data(ByVal dataRge, ByVal orderCol As Integer, ByVal bDsnt As Boolean)
Attribute SortByCol_data.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bgnCel As Range
    Dim orderVal As Integer
    
    If orderCol <= 0 Then Exit Sub
    
    Set bgnCel = dataRge(1, orderCol)
    If bDsnt Then orderVal = xlDescending Else orderVal = xlAscending
    
    If IsVer95() Then    'Excel 95
        dataRge.Sort Key1:=bgnCel, Order1:=orderVal, Header:=xlNo, _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
    Else    '97-
        dataRge.Sort Key1:=bgnCel, Order1:=orderVal, Header:=xlNo, _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, SortMethod:=1 'xlPinYin
    End If
End Sub
'
'|fffd|Q|fffd||fffd||242||fffd||fffd|\|fffd|[|fffd|g
'
'H13.2.8 LSQ
Sub SortBy2Col_data(ByVal dataRge, ByVal colA As Integer, ByVal bDsntA As Boolean, _
    ByVal colB As Integer, ByVal bDsntB As Boolean)
Attribute SortBy2Col_data.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim celA As Range, celB As Range
    Dim orderValA As Integer, orderValB As Integer
    
    If colA <= 0 Or colB <= 0 Then Exit Sub
    
    Set celA = dataRge(1, colA)
    Set celB = dataRge(1, colB)
    
    If bDsntA Then orderValA = xlDescending Else orderValA = xlAscending
    If bDsntB Then orderValB = xlDescending Else orderValB = xlAscending
    
    If IsVer95() < 8 Then    'Excel 95
        dataRge.Sort Key1:=celA, Order1:=orderValA, Key2:=celB, order2:=orderValB, _
            Header:=xlNo, _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
    Else    '97-
        dataRge.Sort Key1:=celA, Order1:=orderValA, Key2:=celB, order2:=orderValB, _
            Header:=xlNo, _
            OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, SortMethod:=1 'xlPinYin
    End If
End Sub
'
'moved from "fsubxx.XLS" 07.1.13 LSQ
'
Function CharNoAutoFont()
    ActiveChart.ChartArea.AutoScaleFont = False
End Function

'===EOF===
Attribute VB_Name = "commCheck"
'=======================================================
' |fffd|uSSS|fffd|\|fffd||fffd||fffd|vVer2.5 : Check Update User
'
' 2007.1 LSQ
'=======================================================
Option Explicit
Option Private Module

Public GVerMsg As String

Const csTKVer6_INI_Sect As String = "iSTAT"           '|fffd||fffd||fffd||fffd|INI-Section|fffd||fffd|
Const csTKVer6_INI_Key  As String = "VerMsg"          '|fffd||fffd||fffd||fffd|INI-Key|fffd||fffd|
Const MSG_NO_INIFILE As String = "|fffd||fffd||fffd||fffd||fffd||752||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd| " & vbCrLf & _
                                GName_Prog & "|fffd||fffd||fffd||103|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"
         
#If VBA7 Then
    Private Declare PtrSafe Function GetIniKey Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
#Else
    Private Declare Function GetIniKey Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
#End If

'
'return TRUE OK else Illegal user
'
Function UpdateUserCheck() As Boolean
    Dim sInI_Path As String
    Dim iRet As Integer
    
    sInI_Path = getPathName()
    iRet = SubUserCheck(sInI_Path)
    
    If iRet > 0 Then    'OK
        UpdateUserCheck = True
    Else                'FAILED
        MsgBox MSG_NO_INIFILE
        UpdateUserCheck = False
    End If
    
End Function
'
'return the length of the KEY VALUE
'
Private Function SubUserCheck(ByVal IniPath As String) As Long
    Dim tmpstr As String
    tmpstr = Space$(1024)
    SubUserCheck = GetIniKey(csTKVer6_INI_Sect, _
                      csTKVer6_INI_Key, _
                      "", tmpstr, 1024, _
                      IniPath & "\" & "MIST01.ini")
    '
    GVerMsg = tmpstr
End Function

'=== EOF ===


Attribute VB_Name = "commChk"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: |fffd||fffd||fffd||28a||590||fffd|
'
'03.8 LSQ
'=================================================
Option Explicit

'
'|fffd|u|fffd|b|fffd|N|fffd||311||fffd||fffd||742||fffd||fffd||1c2||fffd||fffd||fffd||fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N|fffd||fffd||fffd||fffd|
'
Function isBookExist(ByVal bkName As String) As Boolean
Attribute isBookExist.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bk As Workbook
    
    isBookExist = False
    
    If Workbooks.Count = 0 Then Exit Function
    
    For Each bk In Workbooks
        If UCase(Trim(bkName)) = UCase(Trim(bk.Name)) Then
            isBookExist = True
            Exit Function
        End If
    Next
    
End Function
'
Function isCellEmpty(ByVal theCell As Range) As Boolean
Attribute isCellEmpty.VB_ProcData.VB_Invoke_Func = " \n14"
    isCellEmpty = (theCell = Empty)
End Function
'
Function isCellNotEmpty(ByVal theCell As Range) As Boolean
Attribute isCellNotEmpty.VB_ProcData.VB_Invoke_Func = " \n14"
    isCellNotEmpty = (theCell <> Empty)
End Function

'=== EOF ===

Attribute VB_Name = "commConst"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: The Global Constants Definition
'
'2007.1 LSQ
'=================================================
Option Explicit

'--- menu name ---
Public Const menuName_Ysk As String = "|fffd|}|fffd||fffd||fffd|`|fffd|\|fffd||fffd|"
Public Const GName_Prog As String = "|fffd|}|fffd||fffd||fffd|`|fffd|\|fffd||fffd| Ver1.0"
Public Const RibbonMenu As String = "MIST_Ribbon.xlam"

'--- book name ---
Public Const GxlaBkGraph1 As String = "MIST_GrpA.xla"
Public Const GxlaBkGraph2 As String = "MIST_GrpB.xla"
Public Const GxlaBkDllR As String = "MIST_DLLR.xla"

'--- workSheet name ---
Public Const G_StName_Info As String = "Info"
'
'--- method name ---
Public Const YSK_SKN As Integer = 1     '|fffd||fffd||fffd||595||fffd||fffd||fffd|
Public Const YSK_SKNZU_A As Integer = 2 '|fffd|U|fffd|z|fffd|}(|fffd||fffd||fffd||315|t|fffd||fffd||fffd|_|fffd|O|fffd||fffd||fffd|t)
Public Const YSK_SKNZU_B As Integer = 3 '|fffd|U|fffd|z|fffd|}(|fffd|_|fffd|O|fffd||fffd||fffd|t)
Public Const YSK_EMA As Integer = 4     '|fffd||fffd||fffd|d|fffd||693||fffd||fffd||fffd||fffd||3d6|@
Public Const YSK_EPA As Integer = 5     'EPA|fffd|@
Public Const YSK_KK As Integer = 6      '|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|
Public Const YSK_JKK As Integer = 7     '|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|
Public Const YSK_GS As Integer = 8      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const YSK_MM As Integer = 9      '|fffd||fffd||fffd||295||fffd||fffd||3d6|@

'--- graph name ---
Public Const GRAPH_NAME_YSKM As String = "YSK_M"
Public Const GRAPH_NAME_EPA1 As String = "EPA_TCSI_TC"
Public Const GRAPH_NAME_EPA2 As String = "EPA_S"
Public Const GRAPH_NAME_EPA3 As String = "EPA_I"
Public Const GRAPH_NAME_KEIKOU As String = "KEIKOU"
Public Const GRAPH_NAME_YOUIN As String = "YOUIN"
Public Const GRAPH_NAME_YSKY As String = "YSK_Y"
Public Const GRAPH_NAME_YSKY_A As String = "YSK_Y_A"
Public Const GRAPH_NAME_SUM As String = "SUM_G"


Public Const YSK_USB_VERSION As Boolean = True                     'for USB version, set this constant to TRUE
'=== EOF ===
Attribute VB_Name = "commDir"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: |fffd||fffd||fffd||28a||590||fffd|
'
'03.8 LSQ
'=================================================
Option Explicit
'
Sub changeToYSKDir()
Attribute changeToYSKDir.VB_ProcData.VB_Invoke_Func = " \n14"
    Call changeToPath(getPathName())
End Sub
'
Sub changeToCurDir()
Attribute changeToCurDir.VB_ProcData.VB_Invoke_Func = " \n14"
    Call changeToPath(CurDir())
End Sub
'
Sub changeToDefaultDir()
Attribute changeToDefaultDir.VB_ProcData.VB_Invoke_Func = " \n14"
    changeToPath (Application.DefaultFilePath)
End Sub
'
Sub changeToPath(ByVal pathName As String)
Attribute changeToPath.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim driveName As String
        
    If Trim(pathName) = "" Then Exit Sub 'NullString
        
    driveName = Left(pathName, 1)
    If driveName <> "\" Then
        ChDrive driveName
    End If
    ChDir pathName
End Sub
'
'=== EOF ===
Attribute VB_Name = "commDlg"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: DialogBox
'
'03.8 LSQ, PYJ
'=================================================
Option Explicit

Dim f_aDlgSht As DialogSheet
Const YI_MAX_X_NV As Integer = 200      '|fffd|d|fffd||fffd|A|fffd||fffd||fffd||350||fffd||fffd||fffd||fffd||3d0||fffd||fffd||90||fffd||fffd||fffd||fffd|

'dlgID : see YSK_*
'
Private Function getDlgObj(ByVal dlgID As Integer) As DialogSheet
    Dim dlgNameStr As String
    
    Select Case dlgID
        Case YSK_SKN:       dlgNameStr = "|fffd||fffd||fffd||595||fffd||fffd||fffd|Dlg"
        Case YSK_SKNZU_A:   dlgNameStr = "|fffd|U|fffd|z|fffd|}ADlg"
        Case YSK_SKNZU_B:   dlgNameStr = "|fffd|U|fffd|z|fffd|}BDlg"
        Case YSK_EMA:       dlgNameStr = "|fffd||fffd||fffd|d|fffd||693||fffd|Dlg"
        Case YSK_EPA:       dlgNameStr = "EPADlg"
        Case YSK_KK:        dlgNameStr = "|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
        Case YSK_JKK:       dlgNameStr = "|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
        Case YSK_GS:        dlgNameStr = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
        Case YSK_MM:        dlgNameStr = "MonthlyModelDlg"
        Case Else:          dlgNameStr = ""
    End Select
    
    If dlgNameStr = "" Then
        Set getDlgObj = Nothing
    Else
        Set getDlgObj = ThisWorkbook.DialogSheets(dlgNameStr)
    End If
End Function

Function GetDlgInp(nDlgId As Integer) As Boolean
Attribute GetDlgInp.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bRtn As Boolean
    
    Set f_aDlgSht = getDlgObj(nDlgId)
    If f_aDlgSht Is Nothing Then
        GetDlgInp = False
        Exit Function
    End If
    
    Application.ScreenUpdating = True
    If nDlgId = YSK_JKK Or nDlgId = YSK_GS Then    'H15.9.25 LSQ
        f_aDlgSht.GroupBoxes("grpXSel").Visible = False
    End If
    Do
    
        bRtn = f_aDlgSht.Show
        If Not bRtn Then Exit Do    'Cancel
        
        bRtn = GetCommDlgInp(nDlgId)
        If bRtn Then bRtn = GetOtherInp(nDlgId)
        
    Loop Until bRtn
    Application.ScreenUpdating = False
    
    'check if there is non data
    If bRtn And g_aDialog.bStopNonData Then
        bRtn = CheckIfAllData(g_aDialog.rgeInp, g_aDialog.bTitle, g_aDialog.bColData)
        If bRtn And (nDlgId = YSK_JKK Or nDlgId = YSK_GS Or nDlgId = YSK_SKN) And Not (g_aDialog.RgeX Is Nothing) Then
            bRtn = CheckIfAllData(g_aDialog.RgeX, g_aDialog.bTitle, g_aDialog.bColData)
        End If
        If Not bRtn Then MsgBox "|fffd||fffd||fffd|l|fffd||20a|O|fffd||303|f|fffd|[|fffd|^, |fffd||fffd||fffd|~"
    End If
    
    'copy data to a temp sheet
    If bRtn Then
        If (nDlgId = YSK_JKK Or nDlgId = YSK_GS Or nDlgId = YSK_SKN) And Not (g_aDialog.RgeX Is Nothing) Then
            bRtn = moveData_YX(g_aDialog.rgeInp, g_aDialog.RgeX, g_aDialog.bColData, g_aDialog.bTitle, g_aDialog.bXSel, g_aDialog.dlgJkk.bTimeLag)
            'H15.9.27 LSQ
            'bRtn = moveData_YX(g_aDialog.rgeInp, g_aDialog.rgeX, g_aDialog.bColData, g_aDialog.bTitle, g_aDialog.bXSel)
        Else
            Set g_aDialog.rgeInp = moveData(g_aDialog.rgeInp, "Y", g_aDialog.bColData, g_aDialog.bTitle, False, getTempSheet().Range("A1"))
        End If
    End If
    If bRtn Then
        g_aDialog.bColData = True
        g_aDialog.bTitle = True
        g_aDialog.bXSel = False
        g_aDialog.dlgJkk.bTimeLag = False       'Sep 2003, PYJ
    End If
    
    GetDlgInp = bRtn
End Function

'check if all cells in the range are numeric data except the first title row
Private Function CheckIfAllData(ByVal rgeData As Range, ByVal bTitle As Boolean, ByVal bColData As Boolean) As Boolean
    Dim r As Integer, c As Integer, n As Integer
    Dim sht As Worksheet
    Dim rgeDataTmp As Range
    
    Set sht = ActiveSheet
    rgeData.Worksheet.Activate
    r = rgeData.Rows.Count
    c = rgeData.Columns.Count
    '
    If bColData Then
        Set rgeDataTmp = rgeData.Range(Cells(2, 1), Cells(r, c))
        r = r - 1
    Else
        Set rgeDataTmp = rgeData.Range(Cells(1, 2), Cells(r, c))
        c = c - 1
    End If
    n = Application.Count(rgeDataTmp)
    
    CheckIfAllData = forcIIf(n = r * c, True, False)
    
    sht.Activate
End Function

Private Function GetCommDlgInp(nDlgId As Integer) As Boolean
    Dim strTmp As String, rgeTmp As Range, i As Integer
    Dim tmp1, tmp2
    
    On Error Resume Next
    
    'error is cleared automatically after statement "On Error Resume Next"
    
    GetCommDlgInp = False
    
    '|fffd||693|I|fffd||3d0||fffd||fffd||348||fffd| or |fffd||fffd||fffd||354||348||fffd|1
    strTmp = f_aDlgSht.EditBoxes("editY").Text
    If GetInputRange(strTmp, rgeTmp) = False Then
        MsgBox "|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||354||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
        'MsgBox "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|B"
        Exit Function
    End If
    Set g_aDialog.rgeInp = rgeTmp
    
    '|fffd|f|fffd|[|fffd|^|fffd|n|fffd||fffd||30c||fffd||fffd||fffd|
    g_aDialog.bColData = True '(f_aDlgSht.OptionButtons("optDiret1") = xlOn)
    
    '1|fffd|s|fffd||fffd||682||30d||fffd||fffd||68e||fffd||fffd|
    g_aDialog.bTitle = True '(f_aDlgSht.OptionButtons("optData1") = xlOn)
    
    '|fffd||fffd||fffd|l|fffd||20a|O|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|
    g_aDialog.bStopNonData = False
    g_aDialog.bStopNonData = (f_aDlgSht.OptionButtons("optStop") = xlOn)
    
    
    If nDlgId = YSK_SKN Then GetCommDlgInp = True: Exit Function        '|fffd||fffd||fffd||595||fffd||fffd||fffd|

    '|fffd|O|fffd||fffd||fffd|t|fffd|\|fffd||fffd|
    g_aDialog.bGraph = False
    If f_aDlgSht.OptionButtons("optGrp2") = xlOn Then g_aDialog.bGraph = True
    
    '|fffd||fffd||fffd||fffd||fffd|`|fffd||fffd|
    g_aDialog.nTimeStyle = 0
    For i = 1 To 4
        If f_aDlgSht.OptionButtons("optTime" & i) = xlOn Then
            g_aDialog.nTimeStyle = i
            Exit For
        End If
    Next
    
    '|fffd|J|fffd|n|fffd|N|fffd||fffd|
    tmp1 = f_aDlgSht.EditBoxes("editYear").Text
    tmp2 = f_aDlgSht.EditBoxes("editMonth").Text
    g_aDialog.nYearBgn = Val(tmp1)
    g_aDialog.nMonth = Val(tmp2)
    If g_aDialog.nTimeStyle = 1 Or g_aDialog.nTimeStyle = 2 Or g_aDialog.nTimeStyle = 3 Then
        If Not IsNumeric(tmp1) Or g_aDialog.nYearBgn < 1900 Or g_aDialog.nYearBgn > 2100 Then
            MsgBox "|fffd|J|fffd|n|fffd||fffd||fffd||fffd||fffd||314|N|fffd||fffd||fffd||fffd||342||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|B|fffd|i1900|fffd|N|fffd|`2100|fffd|N|fffd|j"
            Exit Function
        End If
        If g_aDialog.nTimeStyle = 1 Or g_aDialog.nTimeStyle = 2 Then            '|fffd||fffd||fffd||fffd|
            If Not IsNumeric(tmp2) Or g_aDialog.nMonth < 1 Or g_aDialog.nMonth > 12 Then
                MsgBox "|fffd|J|fffd|n|fffd||fffd||fffd||fffd||fffd||30c||fffd||fffd||fffd||fffd||fffd||342||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|B|fffd|i|fffd|P|fffd|`|fffd|P|fffd|Q|fffd|j"
                Exit Function
            End If
        'ElseIf g_aDialog.nTimeStyle = 2 Then        '|fffd|l|fffd||fffd||fffd||fffd|
        '    If Not IsNumeric(tmp2) Or g_aDialog.nMonth < 1 Or g_aDialog.nMonth > 12 Then
        '        MsgBox "|fffd|J|fffd|n|fffd||fffd||fffd||fffd||fffd||30a||fffd||fffd||fffd||fffd||fffd||342||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|B|fffd|i|fffd|P|fffd|`|fffd|S|fffd|j"
        '        Exit Function
        '    End If
        End If
    End If
    
    GetCommDlgInp = True
    On Error GoTo 0
End Function

Private Function GetOtherInp(nDlgId As Integer) As Boolean
    Dim nTmp1 As Integer, nTmp2 As Integer, tmp1, tmp2
    Dim i As Integer, bRtn As Boolean
    Dim dTmp As Double
    
    GetOtherInp = False
    On Error Resume Next
    
    'error is cleared automatically after statement "On Error Resume Next"
    
    Select Case nDlgId
        Case YSK_SKN:                                            '|fffd||fffd||fffd||595||fffd||fffd||fffd|Dlg"
            g_aDialog.dlgSkn.nJudge = forcIIf(f_aDlgSht.OptionButtons("optKentei1") = xlOn, 1, 2)
            tmp1 = f_aDlgSht.EditBoxes("editCompVal").Text
            tmp2 = f_aDlgSht.EditBoxes("editTimeLag").Text
            dTmp = Val(tmp1): nTmp2 = Val(tmp2)
            If (g_aDialog.dlgSkn.nJudge = 2 And (Not IsNumeric(tmp1) Or dTmp <= -1 Or dTmp >= 1)) Then
                MsgBox "|fffd||fffd|r|fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
                Exit Function
            End If
            If Not IsNumeric(tmp2) Or nTmp2 < -30 Or nTmp2 > 30 Then
                If Trim(tmp2) = "" Then
                    nTmp2 = 0
                Else
                    MsgBox "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
                    Exit Function
                End If
            End If
            g_aDialog.dlgSkn.dCompVal = dTmp: g_aDialog.dlgSkn.nTimeLag = nTmp2
            bRtn = GetSknDlgInp()
            If Not bRtn Then Exit Function
        'Case YSK_SKNZU_A:   '"|fffd|U|fffd|z|fffd|}ADlg"
        'Case YSK_SKNZU_B:   '"|fffd|U|fffd|z|fffd|}BDlg"
        Case YSK_EMA:                                            '"|fffd||fffd||fffd|d|fffd||693||fffd|Dlg"
            tmp1 = f_aDlgSht.EditBoxes("editCir").Text: nTmp1 = Val(tmp1)
            If Not IsNumeric(tmp1) Or nTmp1 < 3 Or nTmp1 > 31 Then
                MsgBox "|fffd|T|fffd|C|fffd|N|fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
                Exit Function
            End If
            g_aDialog.dlgEma.nSmpNum = nTmp1
        Case YSK_EPA:                                            '"EPADlg"
            For i = 1 To 3
                If f_aDlgSht.OptionButtons("optMod" & i) = xlOn Then
                    g_aDialog.dlgEpa.nMod = i
                    Exit For
                End If
            Next i
        Case YSK_KK:                                             '"|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
            bRtn = GetKkDlgInp()
            If Not bRtn Then Exit Function
        Case YSK_JKK:                                            '"|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
            bRtn = GetJkkDlgInp()
            If Not bRtn Then Exit Function
        Case YSK_MM:

        Case Else 'YSK_GS:  '"|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
            bRtn = GetGsDlgInp()
            If Not bRtn Then Exit Function
    End Select

    Set g_aDialog.rgeOutBgn = GetOutputRgeBgn(f_aDlgSht, g_aDialog.rgeInp)
    If Not (g_aDialog.rgeOutBgn Is Nothing) Then GetOtherInp = True
    'GetOtherInp = GetOutputRgeBgn()    'H15.9.26 LSQ cmt
    On Error GoTo 0
End Function

'|fffd||fffd||fffd||28f|o|fffd||354||348||fffd|
'return Nothing on error
Function GetOutputRgeBgn(ByVal aDlgSht As DialogSheet, ByVal rgeDataIn As Range) As Range
Attribute GetOutputRgeBgn.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim strTmp As String, rgeTmp As Range
    Dim shtTmp As Worksheet
    
    Set GetOutputRgeBgn = Nothing
    If aDlgSht.OptionButtons("optOut2") = xlOn Then
        strTmp = aDlgSht.EditBoxes("editOutput").Text
        If GetInputRange(strTmp, rgeTmp) = False Then
            MsgBox "|fffd|f|fffd|[|fffd|^|fffd|o|fffd||354||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
            Exit Function
        End If
        Set GetOutputRgeBgn = rgeTmp
    Else
        Set shtTmp = rgeDataIn.Worksheet.Parent.Worksheets.Add
        Set rgeTmp = shtTmp.Range("B2")
        Set GetOutputRgeBgn = rgeTmp
        rgeDataIn.Worksheet.Activate
    End If
End Function

'"|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
Private Function GetKkDlgInp() As Boolean
    Dim tmp1, nTmp1 As Integer, i As Integer
    
    GetKkDlgInp = False
    '|fffd|\|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd|
    tmp1 = f_aDlgSht.EditBoxes("edityskData").Text
    nTmp1 = Val(tmp1)
    If Not IsNumeric(tmp1) Or nTmp1 < 1 Then
        MsgBox "|fffd|\|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
        Exit Function
    End If
    g_aDialog.dlgKk.nProdict = nTmp1
    
    '|fffd||fffd||fffd||fffd|l
    For i = 1 To 3
        If f_aDlgSht.OptionButtons("optUpper" & i) = xlOn Then
            g_aDialog.dlgKk.nUpLimitFlg = i
            Exit For
        End If
    Next i
    If g_aDialog.dlgKk.nUpLimitFlg = 3 Then
        tmp1 = f_aDlgSht.EditBoxes("editUpper").Text
        If Not IsNumeric(tmp1) Then         'Oct 7 2003, PYJ
            MsgBox "|fffd||fffd||fffd||fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
            Exit Function
        End If
        g_aDialog.dlgKk.dUpLimit = Val(tmp1)
    End If
    
    'g_aDialog.dlgKk.nSi = 0
    
    '|fffd||fffd||510||fffd||fffd||fffd|
    For i = 1 To 3
        If f_aDlgSht.OptionButtons("optSui" & i) = xlOn Then
            g_aDialog.dlgKk.nSuitei = i
            Exit For
        End If
    Next i
    
    '|fffd||590||fffd||fffd||fffd||fffd|w|fffd||fffd|
    For i = 1 To g_nKkFunNum
        If i = 14 Then
            g_aDialog.dlgKk.nmFuncSel(i) = 0
        Else
            If f_aDlgSht.CheckBoxes("chk" & i) = xlOn Then
                g_aDialog.dlgKk.nmFuncSel(i) = 1
            Else
                g_aDialog.dlgKk.nmFuncSel(i) = 0
            End If
        End If
    Next i
    
    GetKkDlgInp = True
End Function

'"|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
Private Function GetJkkDlgInp() As Boolean
    Dim tmp1, tmp2, rgeTmp As Range, i As Integer
    
    GetJkkDlgInp = False

    '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||348||fffd|
    tmp1 = f_aDlgSht.EditBoxes("editX").Text
    If GetInputRange(tmp1, rgeTmp) = False Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
        Exit Function
    End If
    Set g_aDialog.RgeX = rgeTmp
    
    '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||311|I|fffd||fffd|
    g_aDialog.bXSel = (f_aDlgSht.OptionButtons("optXslt2") = xlOn)
    
    '|fffd||fffd||510||fffd||fffd||fffd|
    For i = 1 To 3
        If f_aDlgSht.OptionButtons("optSui" & i) = xlOn Then
            g_aDialog.dlgJkk.nSuitei = i
            Exit For
        End If
    Next i
    
    '|fffd||3d0||fffd||fffd|I|fffd||fffd|@
    For i = 1 To 5
        If f_aDlgSht.OptionButtons("optMet" & i) = xlOn Then
            g_aDialog.dlgJkk.nMethod = i
            Exit For
        End If
    Next
    If g_aDialog.dlgJkk.nMethod = 5 Then g_aDialog.bGraph = False   '|fffd||fffd||fffd||fffd||fffd||fffd|@|fffd|O|fffd||fffd||fffd|t|fffd|\|fffd||fffd||fffd||fffd||fffd||202||fffd|
    
    '|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd|l
    g_aDialog.dlgJkk.bTimeLag = (f_aDlgSht.OptionButtons("optLag1") = xlOff)
    
    '|fffd||8414||fffd||fffd||fffd|O|fffd||30f|d|fffd||fffd|A
    g_aDialog.dlgJkk.bTesuk = (f_aDlgSht.OptionButtons("optTesukYes") = xlOn)
    
    '|fffd|e|fffd|l
    tmp1 = f_aDlgSht.EditBoxes("editFin").Text
    tmp2 = f_aDlgSht.EditBoxes("editFout").Text
    If Not IsNumeric(tmp1) Or Not IsNumeric(tmp2) Then
        MsgBox "|fffd|e|fffd|l|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|B"
        Exit Function
    End If
    g_aDialog.dlgJkk.F_in = Val(tmp1)
    g_aDialog.dlgJkk.F_out = Val(tmp2)
    
    GetJkkDlgInp = True
End Function

'"|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Dlg"
Private Function GetGsDlgInp() As Boolean
    Dim tmp1, tmp2, rgeTmp As Range, i As Integer
    
    GetGsDlgInp = False

    '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||348||fffd|
    tmp1 = f_aDlgSht.EditBoxes("editX").Text
    If GetInputRange(tmp1, rgeTmp) = False Then
        Set g_aDialog.RgeX = Nothing
    Else
        Set g_aDialog.RgeX = rgeTmp
    End If
    
    '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||311|I|fffd||fffd|
    g_aDialog.bXSel = (f_aDlgSht.OptionButtons("optXslt2") = xlOn)
    
    g_aDialog.dlgGs.nMinSmpLmt = 5
    If g_aDialog.nTimeStyle = 1 Then            '|fffd||fffd||fffd||fffd|
        g_aDialog.dlgGs.nMaxSmpLmt = 500 '2005.7 PYJ  old:48
        g_aDialog.dlgGs.nLmtSmp1 = 24
        g_aDialog.dlgGs.nLmtSmp2 = 36
    ElseIf g_aDialog.nTimeStyle = 2 Then        '|fffd|l|fffd||fffd||fffd||fffd|
        g_aDialog.dlgGs.nMaxSmpLmt = 500 '2005.7 PYJ  old:16
        g_aDialog.dlgGs.nLmtSmp1 = 12
        g_aDialog.dlgGs.nLmtSmp2 = 12
    ElseIf g_aDialog.nTimeStyle = 3 Then        '|fffd|N|fffd||fffd|
        g_aDialog.dlgGs.nMaxSmpLmt = 500 '2005.7 PYJ  old:20
        g_aDialog.dlgGs.nLmtSmp1 = 501   '2005.7 PYJ  old:21
        g_aDialog.dlgGs.nLmtSmp2 = 501   '2005.7 PYJ  old:21
    End If
    
    '|fffd||fffd||fffd|d|fffd||693||fffd|-------------------------------
    g_aDialog.dlgEma.nSmpNum = 3
    
    'EPA-------------------------------------
    g_aDialog.dlgEpa.nMod = 1
    
    '|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|--------------------------------
    For i = 1 To 7
        If f_aDlgSht.OptionButtons("optKK" & i) = xlOn Then
            g_aDialog.dlgGs.nKkMethod = i
            Exit For
        End If
    Next
    'g_aDialog.dlgKk.nSi = 1
    g_aDialog.dlgKk.nSuitei = 1      '|fffd||fffd||510||fffd||fffd||fffd|
    g_aDialog.dlgKk.nUpLimitFlg = 1  '|fffd||fffd||fffd||fffd|l
    g_aDialog.dlgKk.dUpLimit = 1
    '|fffd||590||fffd||fffd||fffd||fffd|w|fffd||fffd|
    For i = 1 To g_nKkFunNum
        g_aDialog.dlgKk.nmFuncSel(i) = 0
    Next i
    g_aDialog.dlgKk.nmFuncSel(1) = 1 '|fffd||fffd||fffd||fffd|
    g_aDialog.dlgKk.nmFuncSel(3) = 1 '|fffd||fffd||fffd|[|fffd|g
    g_aDialog.dlgKk.nmFuncSel(4) = 1 '|fffd||390||fffd|
    g_aDialog.dlgKk.nmFuncSel(6) = 1 '|fffd|w|fffd||fffd|
    g_aDialog.dlgKk.nmFuncSel(8) = 1 '|fffd||fffd||fffd|W|fffd|X|fffd|e|fffd|B|fffd|b|fffd|N
    g_aDialog.dlgKk.nmFuncSel(9) = 1 '|fffd|S|fffd||fffd||fffd|x|fffd||fffd||fffd|c
    
    '|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|----------------------
    g_aDialog.dlgJkk.nMethod = 1      '|fffd||3d0||fffd||fffd|I|fffd||fffd|@
    g_aDialog.dlgJkk.nSuitei = 1      '|fffd||fffd||510||fffd||fffd||fffd|
    g_aDialog.dlgJkk.bTimeLag = False '|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd|l
    g_aDialog.dlgJkk.bTesuk = False
    '|fffd|e|fffd|l
    g_aDialog.dlgJkk.F_in = 2#
    g_aDialog.dlgJkk.F_out = 2#
    
    GetGsDlgInp = True
End Function

'get the range from a dialog box input range string
'strRge: "[toukeidt.xls]temp!$A$1:$B$2" or "temp!$A$1:$B$2"
Function GetInputRange(ByVal strRge As String, ByRef rgeRtn As Range) As Boolean
Attribute GetInputRange.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim str1 As String, pos As Integer
    Dim wbk As Workbook, sht As Worksheet
    
    'get the workbook
    pos = InStr(strRge, "]")
    If pos > 2 Then
        str1 = Mid(strRge, 2, pos - 2)
        Set wbk = Workbooks(str1)
    Else
        Set wbk = ActiveWorkbook
    End If
    
    'get the worksheet
    strRge = Mid(strRge, pos + 1)
    pos = InStr(strRge, "!")
    If pos > 1 Then
        str1 = Mid(strRge, 1, pos - 1)
        Set sht = wbk.Worksheets(str1)
    Else
        Set sht = wbk.ActiveSheet
    End If
    
    'get the range
    str1 = Trim(Mid(strRge, pos + 1))
    If str1 = Empty Or str1 = "" Then
        GetInputRange = False
        Exit Function
    End If
    
    Set rgeRtn = sht.Range(FormulaA1_R1C1(str1, True))     'Sep 2003, PYJ
    
    GetInputRange = True
End Function

'copied from SSMCTHR1
'Aug 2003, PYJ
Sub setSmpNo(ByVal num As Long, ByVal toBgn As Range)
Attribute setSmpNo.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim ct
    Dim toBgnTmp As Range
    
    Set toBgnTmp = toBgn.Range("A1")
    For ct = 1 To num
        toBgnTmp = ct
        'next
        Set toBgnTmp = toBgnTmp.Offset(1, 0)
    Next ct

End Sub

'copied and mdf from SSMCTHR1
'Aug 2003, PYJ
Private Function moveData_YX(yRge As Range, xRge As Range, bColData As Boolean, bTitle As Boolean, bXSel As Boolean, bTimeLag As Boolean) As Boolean
    Dim dtStObj As Worksheet, tmpCel As Range, tmpRge As Range
    Dim yDBgn As Range, xDBgn As Range
    Dim xSmpNum As Integer, xItemNum As Integer, ySmpNum As Integer, smpNum As Integer, noDataNum As Integer
    moveData_YX = False
    '|fffd|f|fffd|[|fffd|^|fffd||fffd| TempSheet|fffd||590||fffd||fffd||fffd|
If False Then 'DEBUG
    Set dtStObj = Workbooks.Add.Worksheets(1)
Else
    Set dtStObj = getTempSheet()
End If
    Set tmpCel = dtStObj.Range("B1")
    Set yRge = moveData_Y(yRge, "Y", bColData, bTitle, False, tmpCel)
    Set xRge = moveData_X(xRge, "X", bColData, bTitle, bXSel, tmpCel.Offset(0, 1))
    If xRge.Rows.Count < 3 Then MsgBox "Lack of samples": Exit Function
    If bTimeLag Then Set xRge = MoveDataTimeLag(xRge)       'Sep 2003, PYJ
    
    ySmpNum = yRge.Rows.Count - 1
    xSmpNum = xRge.Rows.Count - 1
    xItemNum = xRge.Columns.Count
    Set yDBgn = yRge(2, 1)
    Set xDBgn = xRge(2, 1)
    
    If ySmpNum > xSmpNum Then ySmpNum = xSmpNum
    smpNum = xSmpNum
    
    If smpNum < 3 Then MsgBox "Lack of samples": Exit Function
    If xItemNum < 1 Or xItemNum > YI_MAX_X_NV Then MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||30c||90||fffd||fffd||fffd||fffd||348||348||20a|O|fffd||142||fffd|": Exit Function
    
    xRge.Worksheet.Activate
    
    'delete no data & numbering and sort by Y --- bgn ---
    noDataNum = clearNoData(yDBgn, 1, xDBgn, xItemNum, smpNum)
    
    Set tmpCel = dtStObj.Range("A2")
    Call setSmpNo(smpNum, tmpCel)
    '
    tmpCel.Worksheet.Activate
    Set tmpRge = tmpCel.Range(Cells(1, 1), Cells(smpNum, 1 + xItemNum + 1))
    Call SortByCol_data(tmpRge, 2, False)   'sort by Y

    ySmpNum = Application.Count(yDBgn.Range("A1:A" & smpNum))
    xSmpNum = Application.Count(xDBgn.Range("A1:A" & smpNum))
    If ySmpNum > xSmpNum Then ySmpNum = xSmpNum
    
    Set tmpRge = tmpCel.Range(Cells(1, 1), Cells(ySmpNum, 1 + xItemNum + 1))
    Call SortByCol_data(tmpRge, 1, False)   'sort by SmpNo
    
    If ySmpNum < smpNum Then
        Set tmpRge = tmpCel.Range(Cells(ySmpNum + 1, 1), Cells(smpNum, 1 + xItemNum + 1))
        Call SortByCol_data(tmpRge, 3, False)   'sort by 1st col of X data, so that blanks will get to bottom
    End If
    If ySmpNum < xSmpNum Then
        Set tmpRge = tmpCel.Range(Cells(ySmpNum + 1, 1), Cells(xSmpNum, 1 + xItemNum + 1))
        Call SortByCol_data(tmpRge, 1, False)   'sort by SmpNo
    End If
    
    Set yRge = yRge.Range("A1:A" & ySmpNum + 1)
    Set xRge = xRge.Range(Cells(1, 1), Cells(xSmpNum + 1, xItemNum))
    moveData_YX = True
End Function

'Sep 2003, PYJ
Private Function MoveDataTimeLag(ByVal RgeX As Range) As Range
    Dim RgeTimeLag As Range, rge1 As Range
    Dim nItem As Integer, nSmp As Integer
    Dim i As Integer, nMinTimeLag As Integer, nTimeLag As Integer
    
    nItem = RgeX.Columns.Count
    nSmp = RgeX.Rows.Count
    nMinTimeLag = nSmp
    Set RgeTimeLag = RgeX.Range("A2")
    Set rge1 = RgeX.Range("A3:A" & nSmp)
    For i = 1 To nItem
        nTimeLag = Val(RgeTimeLag(1, 1))
        If nTimeLag < nMinTimeLag Then nMinTimeLag = nTimeLag
        rge1.Copy rge1.Offset(nTimeLag - 1, 0)
        If nTimeLag > 0 Then
            RgeTimeLag.Range("A1:A" & nTimeLag) = ""
        End If
        Set RgeTimeLag = RgeTimeLag.Offset(0, 1)
        Set rge1 = rge1.Offset(0, 1)
    Next i
    Set MoveDataTimeLag = RgeX.Range("A1:" & nTo26Str(nItem) & nSmp - 1 + nMinTimeLag)
End Function

Private Function GetSknDlgInp() As Boolean
    Dim tmp1, tmp2, rgeTmp As Range, i As Integer
    
    GetSknDlgInp = False

    '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||348||fffd|
    tmp1 = f_aDlgSht.EditBoxes("editX").Text
    If GetInputRange(tmp1, rgeTmp) = False Then
        MsgBox "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||348||342||fffd||fffd|w|fffd||80b5||fffd||102||fffd||fffd||702||fffd||fffd||fffd|B"
        Exit Function
    End If
    Set g_aDialog.RgeX = rgeTmp
    
    GetSknDlgInp = True
End Function

'=== EOF ===
Attribute VB_Name = "commMdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: |fffd||fffd||fffd||28a||590||fffd|
'
'02.7.10 LSQ mdf
'=================================================
Option Explicit

Sub changeToSSDir()
    Dim pathName As String, driveName As String
        
    pathName = getPathName()
    driveName = Left(pathName, 1)
    If driveName <> "\" Then
        ChDrive driveName
    End If
    ChDir pathName
End Sub
'
'|fffd|N|fffd||fffd|path|fffd||fffd||fffd||302||fffd||fffd||64fe||fffd||fffd||fffd||fffd|: |fffd||14c||fffd||242||fffd|"\"|fffd|}|fffd|[|fffd|N|fffd||fffd||fffd||202||fffd||fffd|B
'
Function getPathName() As String
Attribute getPathName.VB_ProcData.VB_Invoke_Func = " \n14"
    getPathName = ThisWorkbook.Path
End Function

Function getRangeInfo(ByVal rgestr As String, bkName As String, stName As String, ceName As String) As Boolean
    Dim wkstr As String, posBk As Long, posSt As Long, pos As Long
    Dim RgeObj As Range
    
    On Error Resume Next
    
    Set RgeObj = Range(rgestr)
    ceName = RgeObj.Address
    stName = RgeObj.Worksheet.Name
    bkName = RgeObj.Worksheet.Parent.Name
        
    getRangeInfo = IIf(Err.Number <> 0, False, True)
    
    On Error GoTo 0
    
'--- the following are not used ---
'07.1.29 LSQ
#If False Then
    '|fffd||7af||fffd||fffd||fffd||fffd||30e||64fe|
    wkstr = rgestr
    
    bkName = ActiveWorkbook.Name    'default
    pos = InStr(wkstr, "]")
    
#If True Then  '07.1.29; 05.12.17
    If pos > 2 Then 'point to other book
        bkName = Mid(wkstr, 2, pos - 2)
    End If
#Else
    If pos > 2 Then 'point to other book
        MsgBox "|fffd||283|u|fffd|b|fffd|N|fffd||314||348||342||34e|w|fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
        getRangeInfo = False
        Exit Function
    End If
#End If

    '|fffd|-|116||fffd||fffd||30e||64fe|
    wkstr = Mid(wkstr, pos + 1)
    
    stName = ActiveSheet.Name   'default
    pos = InStr(wkstr, "!")
    If pos > 1 Then stName = Mid(wkstr, 1, pos - 1)
    
    '|fffd||654||348||342||30e||64fe|
    ceName = Trim(Mid(wkstr, pos + 1))
    
    If ceName = Empty Or ceName = "" Then
        MsgBox MSG_ERR_DATARAGE
        getRangeInfo = False
        Exit Function
    End If
    
    If Application.ReferenceStyle = xlR1C1 Then     '|fffd|Q|fffd||18c|`|fffd||fffd||fffd||314||fffd||fffd||fffd| and R1C1|fffd||fffd|A1
        ceName = Application.ConvertFormula(Formula:=ceName, _
            fromReferenceStyle:=xlR1C1, _
            toReferenceStyle:=xlA1)
    End If
    
    getRangeInfo = True
#End If

End Function
'
'
Sub setZoom()
Attribute setZoom.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim flg
    flg = getResolutionFlag()
    If flg < 3 Then ActiveWindow.Zoom = 75 Else ActiveWindow.Zoom = 100
End Sub
'
'1=screen display true
'2=screen display false
'0=not specified
'
'H14.7.9 LSQ
Sub Msgbox_ScrnOption(ByVal msgStr As String, Optional ByVal flgScrn)
Attribute Msgbox_ScrnOption.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim savScrn As Boolean
    
    If UCase(TypeName(flgScrn)) = "ERROR" Then flgScrn = 1
    savScrn = Application.ScreenUpdating
    
    If flgScrn = 1 Then Application.ScreenUpdating = True
    If flgScrn = 2 Then Application.ScreenUpdating = False
    
    MsgBox msgStr
    
    Application.ScreenUpdating = savScrn
    
End Sub

Function nTo26Str(ByVal n As Integer) As String
Attribute nTo26Str.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim a1 As Integer, a2 As Integer
    
    nTo26Str = ""
    If Not (n >= 1 And n <= 256) Then Exit Function 'ERROR
    n = n - 1   '0 to 255
    
    a1 = Int(n / 26)    'Mar 2003, PYJ  Old:WorksheetFunction.Floor(n / 26, 1)
    a2 = n Mod 26
    
    If a1 > 0 Then
        nTo26Str = nTo26Str & Chr(Asc("A") + a1 - 1)
    End If
    nTo26Str = nTo26Str & Chr(Asc("A") + a2)
    
End Function
'
'
'transfer formula string from A1 format to R1C1 format or vise verse
'return the formula string
'
'bOutA1: True--Get A1 format; False--Get R1C1 format
'Sep 2003, PYJ
Function FormulaA1_R1C1(ByVal strFormulaIn As String, Optional ByVal bOutA1) As String
Attribute FormulaA1_R1C1.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim nStyleFrom As Integer, nStyleTo As Integer
    Dim bErr As Boolean
    
    If UCase(TypeName(bOutA1)) = "ERROR" Then bOutA1 = False
    
    If bOutA1 Then
        nStyleFrom = xlR1C1
        nStyleTo = xlA1
    Else
        nStyleFrom = xlA1
        nStyleTo = xlR1C1
    End If
    '
    On Error Resume Next
    
    FormulaA1_R1C1 = Application.ConvertFormula( _
                Formula:=strFormulaIn, _
                fromReferenceStyle:=nStyleFrom, _
                toReferenceStyle:=nStyleTo)
    
    If Err <> 0 Then    'Oct 2003, PYJ  old:bErr
        'for all version; Err.Number <> 0 & Err.Clear can not be used in Excel 95
        'Err can be cleared afterstatement "On Error GoTo 0"
        FormulaA1_R1C1 = strFormulaIn
    End If
    
    On Error GoTo 0
    
End Function
'
Sub adjustMinMax(ByRef minV As Double, ByRef maxV As Double)
Attribute adjustMinMax.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim keta As Integer
    Dim tmpd As Double, min As Double, max As Double
    
    tmpd = (maxV - minV) / 20
    keta = decNumKeta(maxV - minV)
    max = maxV + tmpd
    min = minV - tmpd
    maxV = Application.Round(max, keta)
    minV = Application.Round(min, keta)
End Sub

Private Function decNumKeta(ByVal diff As Double) As Integer
    diff = Abs(diff)
    
    If (diff >= 10) Then decNumKeta = 0: Exit Function
    If (diff >= 1) Then decNumKeta = 1: Exit Function
    If (diff >= 0.1) Then decNumKeta = 2: Exit Function
    If (diff >= 0.01) Then decNumKeta = 3: Exit Function
    If (diff >= 0.001) Then decNumKeta = 4: Exit Function
    decNumKeta = 5
    
End Function
'
Function forcIIf(ByVal bCond As Boolean, ByVal valForTrue, ByVal valForFalse)
Attribute forcIIf.VB_ProcData.VB_Invoke_Func = " \n14"
    If bCond Then
        forcIIf = valForTrue
    Else
        forcIIf = valForFalse
    End If
   
End Function
'
'nWidth: chart width, if nWidth=0 used the width of rgeChart
'nRowNum: row number the chart will occupied, if nRowNum=0 the row number of rgeChart will be used
'nXDist: the distance between chart and rgeChart left edge
'return row number used
'
'H15.10.1 LSQ mdf
Function COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t(ByVal rgeChart As Range, ByVal rgeCate As Range, ByVal rgeData As Range, _
        ByVal strTitle As String, ByVal strXTitle As String, Optional ByVal strGrpName, _
        Optional ByVal nWidth, Optional ByVal nRowNum, _
        Optional ByVal nXDist, Optional ByVal strpara, Optional ByRef cht As Chart) As Integer
Attribute COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim dXPos As Double, dYPos As Double, dHeight As Double
    Dim dMinVal As Double, dMaxVal As Double
    Dim num As Integer
    Dim tmpRge As Range
    Dim bHasLegend As Boolean
    Dim dict As Object
    Dim nColNum As Long
    
    If UCase(TypeName(strGrpName)) = "ERROR" Then strGrpName = ""
    If UCase(TypeName(nWidth)) = "ERROR" Then nWidth = 400
    If UCase(TypeName(nRowNum)) = "ERROR" Then nRowNum = 15
    If UCase(TypeName(nXDist)) = "ERROR" Then nXDist = 10
    If UCase(TypeName(strpara)) = "ERROR" Then strpara = "HasLegend=1&ColNum=0"
    Set dict = Comm_SetDict(strpara)
    bHasLegend = IIf(dict("HasLegend") = 1, True, False)
    nColNum = dict("ColNum")
    Set dict = Nothing
    rgeChart.Worksheet.Activate
    dXPos = rgeChart.Left + nXDist
    dYPos = rgeChart.Top
    If nWidth = 0 Then nWidth = rgeChart.Width
    If nRowNum = 0 Then nRowNum = rgeChart.Rows.Count
    dHeight = rgeChart.Range("A1:A" & nRowNum).height
    
    '|fffd|O|fffd||fffd||fffd|t|fffd||1c9||fffd|
    ActiveSheet.ChartObjects.Add(dXPos, dYPos, nWidth, dHeight).Select
       
    ActiveChart.ChartWizard Source:=Union(rgeCate, rgeData), Gallery _
        :=xlLine, Format:=2, PlotBy:=xlColumns, CategoryLabels:=1, _
        SeriesLabels:=1, HasLegend:=IIf(bHasLegend, 1, 0), title:=strTitle, _
        CategoryTitle:=strXTitle, ValueTitle:="", ExtraTitle:=""
    For num = 1 To rgeData.Areas.Count
        Set tmpRge = rgeData.Areas(num)
        ActiveChart.SeriesCollection(num).Name = "='" & rgeData.Worksheet.Name & "'!" & Comm_toXlRCstr(tmpRge(1, 1).Address)
        Set tmpRge = tmpRge(2, 1).Resize(tmpRge.Rows.Count - 1, 1)
        ActiveChart.SeriesCollection(num).Values = "='" & rgeData.Worksheet.Name & "'!" & Comm_toXlRCstr(tmpRge.Address)
        ActiveChart.SeriesCollection(num).XValues = "='" & rgeCate.Worksheet.Name & "'!" & Comm_toXlRCstr(rgeCate.Range("A2").Resize(rgeCate.Rows.Count - 1, 1).Address)
    Next num
    
    If nColNum <> 0 Then Call Comm_setChartPosSize(ActiveChart.Parent, rgeChart, nRowNum, nColNum)
    
    '|fffd|O|fffd||fffd||fffd|t|fffd||fffd||fffd||fffd|t|fffd||fffd|
    num = ActiveSheet.ChartObjects.Count
    If Trim(strGrpName) <> "" Then
        ActiveSheet.ChartObjects(num).Name = strGrpName
    Else
        strGrpName = ActiveSheet.ChartObjects(num).Name
    End If
    
    '|fffd|I|fffd|[|fffd|v|fffd|V|fffd||fffd||fffd||fffd||fffd||752||fffd|
    num = rgeCate.Rows.Count - 1
    Call SetCommChart(strGrpName, num)     'Oct 2003, PYJ  old:
    
    '|fffd|w|fffd||fffd||fffd||fffd||fffd|x|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Selection.TickLabels.Orientation = xlHorizontal
    ActiveChart.Axes(xlCategory).Select
    With Selection
        .MajorTickMark = xlInside
        .MinorTickMark = xlInside
        .TickLabelPosition = xlNextToAxis
    End With
    
    '|fffd||fffd||fffd||fffd|max & min|fffd||752||fffd|
    dMaxVal = Application.max(rgeData)
    dMinVal = Application.min(rgeData)
    Call adjustMinMax(dMinVal, dMaxVal)
    ActiveChart.Axes(xlValue).Select
    With ActiveChart.Axes(xlValue)
        .MinimumScale = dMinVal
        .MaximumScale = dMaxVal
        '.MinimumScaleIsAuto = True
        '.MaximumScaleIsAuto = True
        .MinorUnitIsAuto = True
        .MajorUnitIsAuto = True
        .Crosses = xlAutomatic
        .ReversePlotOrder = False
        .ScaleType = False
    End With
    
    '|fffd||690||fffd||fffd||fffd||fffd||fffd||310||752||fffd|
    With ActiveChart.Axes(xlCategory)
        .HasMajorGridlines = False
        .HasMinorGridlines = False
    End With
    With ActiveChart.Axes(xlValue)
        .HasMajorGridlines = True
        .HasMinorGridlines = False
    End With
    ActiveChart.Axes(xlValue).MajorGridlines.Select
    With Selection.Border
        .ColorIndex = 1
        .Weight = xlHairline
        .LineStyle = xlDot
    End With
    
    '|fffd||fffd||516||682||310||fffd||fffd||fffd||fffd||fffd||fffd||fffd||381|A|fffd||502||242||fffd||fffd||fffd|
    num = ActiveChart.SeriesCollection.Count
    If num >= 2 Then
        ActiveChart.SeriesCollection(2).Select
        With Selection.Border
            .ColorIndex = 3
            .Weight = xlThin
            .LineStyle = xlContinuous
        End With
    End If
    ActiveChart.Axes(xlCategory).TickMarkSpacing = ActiveChart.Axes(xlCategory).TickLabelSpacing
    
    Set cht = ActiveChart
    
    '|fffd|J|fffd|[|fffd|\|fffd||fffd||fffd||308||292|u
    rgeChart.Worksheet.Activate
    rgeChart.Range("A1").Select
    COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t = nRowNum
End Function

'--- mdf from SRKMain.xla --- Begin --- 07.1.13

Function WorkBookOpen(ByVal fName As String, Optional ByVal bReadOnly As Boolean = True) As Workbook
    Dim bkObj As Workbook
    On Error Resume Next
    'Check
    If isBookExist(fName) Then
        Set WorkBookOpen = Workbooks(fName)
        Exit Function
    End If
    
    Set bkObj = Nothing
    
    Application.ScreenUpdating = False
    
    Call changeToSSDir
    
    Workbooks.Open Filename:=fName, updatelinks:=1, ReadOnly:=bReadOnly
    
    Application.ScreenUpdating = True
    
    Set bkObj = Workbooks(fName)
    If bkObj Is Nothing Then
        MsgBox MSG_CANTOPEN_FILE(fName)
        Exit Function
    End If
    
    Set WorkBookOpen = bkObj
    On Error GoTo 0
End Function

Sub WorkBookClose(ByVal fName As String)
    Application.DisplayAlerts = False
    
    Workbooks(fName).Close savechanges:=False
    
    Application.DisplayAlerts = True
End Sub

Function MSG_CANTOPEN_FILE(ByVal fName As String) As String
    MSG_CANTOPEN_FILE = fName & "|fffd|I|fffd|[|fffd|v|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
End Function

Function toXlA1str(inputFormula As String) As String
    On Error Resume Next
    
    toXlA1str = Application.ConvertFormula( _
                Formula:=inputFormula, _
                fromReferenceStyle:=xlR1C1, _
                toReferenceStyle:=xlA1)
    
    If Err.Number <> 0 Then
        toXlA1str = inputFormula
        Err.Clear
    End If
    
    On Error GoTo 0
End Function

'=== EOF ===

Attribute VB_Name = "commMove"
'=================================================
'|fffd|u|fffd||fffd||fffd||3d7||281|vVBA|fffd||302||754||fffd| : |fffd||fffd||fffd||283||fffd||fffd|W|fffd||fffd||fffd|[|fffd||fffd|
'
' 2002.1 by LSQ
'copied from SSSMCTHR1
'=================================================
Option Explicit

Const STNAME_WORK As String = "Temp"
'
Function getTempSheet(Optional ByVal no) As Worksheet
Attribute getTempSheet.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim stObj As Worksheet
    
    If UCase(TypeName(no)) = "ERROR" Then no = 0
    
    If no <= 0 Then
        Set stObj = ThisWorkbook.Worksheets(STNAME_WORK)
    Else
        Set stObj = ThisWorkbook.Worksheets(STNAME_WORK & no)
    End If
    
    stObj.Cells.Clear   'stObj.Cells.Delete Shift:=xlUp
    
    Set getTempSheet = stObj
End Function
'
Function isDataType(ByVal thisCell As Range) As Boolean
Attribute isDataType.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim tname As String
    
    tname = UCase(TypeName(thisCell.Value))
    If tname = "DOUBLE" Or tname = "INTEGER" Then
        isDataType = True
    Else
        isDataType = False
    End If
End Function
'
'H14.11.15 LSQ add
Function isSelFlag(ByVal theVal As Variant) As Boolean
Attribute isSelFlag.VB_ProcData.VB_Invoke_Func = " \n14"
    If Val(theVal) <> 0 Then
        isSelFlag = True
    Else
        isSelFlag = False
    End If
    
End Function

'
'bTitleExt : if TRUE  -- |fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(if bTitle=TRUE) else |fffd||202||fffd||fffd|B
'            if FALSE -- |fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd|K|fffd||fffd||fffd||202||fffd||fffd|B
'
'H14.1.7 LSQ
Private Function getDataRange_Comm(ByVal RgeObj As Range, _
    ByVal bCol As Boolean, ByVal bTitle As Boolean, ByVal bXSel As Boolean, _
    Optional ByVal bTitleExt) As Range
    
    Dim ct
    Dim bgnCel As Range, xSelRge As Range, tmpRge As Range
    Dim rwNum As Long, clNum As Integer
    Dim svStObj As Worksheet
    
    If UCase(TypeName(bTitleExt)) = "ERROR" Then bTitleExt = False
    
    rwNum = RgeObj.Rows.Count
    clNum = RgeObj.Columns.Count
    Set bgnCel = RgeObj.Offset(0, 0).Range("A1")
    Set svStObj = ActiveSheet
    
    If bCol Then
        If bTitle Then
            rwNum = rwNum - 1
            Set bgnCel = bgnCel.Offset(1, 0)
        End If
        '
        If bTitleExt Then
            clNum = clNum - 1
            Set bgnCel = bgnCel.Offset(0, 1)
        End If
        '
        If bXSel Then
            rwNum = rwNum - 1
            Set bgnCel = bgnCel.Offset(1, 0)
        End If
    Else
        If bTitle Then
            clNum = clNum - 1
            Set bgnCel = bgnCel.Offset(0, 1)
        End If
        '
        If bTitleExt Then
            rwNum = rwNum - 1
            Set bgnCel = bgnCel.Offset(1, 0)
        End If
        '
        If bXSel Then
            clNum = clNum - 1
            Set bgnCel = bgnCel.Offset(0, 1)
        End If
    End If
    
    RgeObj.Worksheet.Activate
    
    Set getDataRange_Comm = Nothing 'Init
    If rwNum > 0 And clNum > 0 Then
        If bXSel = False Then
            Set getDataRange_Comm = bgnCel.Offset(0, 0).Range(Cells(1, 1), Cells(rwNum, clNum))
        Else
            If bCol Then
                Set xSelRge = bgnCel.Offset(-1, 0).Range(Cells(1, 1), Cells(1, clNum))
                Set tmpRge = bgnCel.Offset(0, 0).Range(Cells(1, 1), Cells(rwNum, 1))
            Else
                Set xSelRge = bgnCel.Offset(0, -1).Range(Cells(1, 1), Cells(rwNum, 1))
                Set tmpRge = bgnCel.Offset(0, 0).Range(Cells(1, 1), Cells(1, clNum))
            End If
            '
            For ct = 1 To forcIIf(bCol, clNum, rwNum)
                If isSelFlag(xSelRge(ct)) Then
                    If getDataRange_Comm Is Nothing Then
                        Set getDataRange_Comm = tmpRge
                    Else
                        Set getDataRange_Comm = Union(getDataRange_Comm, tmpRge)
                    End If
                End If
                
                'next
                If bCol Then Set tmpRge = tmpRge.Offset(0, 1) Else Set tmpRge = tmpRge.Offset(1, 0)
            Next ct
        End If
    End If
    
    svStObj.Activate

End Function
'
'H12.11.14 LSQ
Function getDataRange(RgeObj As Range, bOptCol As Boolean, bTitle As Boolean, bXSel As Boolean) As Range
Attribute getDataRange.VB_ProcData.VB_Invoke_Func = " \n14"
    Set getDataRange = getDataRange_Comm(RgeObj, bOptCol, bTitle, bXSel)
End Function
'
'H12.11.14 LSQ
Function getDataRange_SmpTitle(RgeObj As Range, bOptCol As Boolean, bTitle As Boolean, bSmpTitle As Boolean, bXSel As Boolean) As Range
Attribute getDataRange_SmpTitle.VB_ProcData.VB_Invoke_Func = " \n14"
    Set getDataRange_SmpTitle = getDataRange_Comm(RgeObj, bOptCol, bTitle, bXSel, bSmpTitle)
End Function
'
'H12.11.14 LSQ
'
Sub getSmpNum_ItemNum_FromRge(RgeObj As Range, bCol As Boolean, bTitle As Boolean, bTitleExt As Boolean, _
    ByRef smpNum As Variant, ByRef ItemNum As Variant)
Attribute getSmpNum_ItemNum_FromRge.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim rwNum As Long, clNum As Integer

    rwNum = RgeObj.Rows.Count
    clNum = RgeObj.Columns.Count
    
    If bCol Then   '|fffd||fffd||fffd||fffd||fffd|
        ItemNum = clNum
        smpNum = rwNum
    Else
        ItemNum = rwNum
        smpNum = clNum
    End If

    If bTitle Then
        smpNum = smpNum - 1
        '
        If bTitleExt Then
            ItemNum = ItemNum - 1
        End If
    End If
    
End Sub

'
'H12.11.2 LSQ
'
Function getTitleName(RgeObj As Range, bOptCol As Boolean, bTitle As Boolean, ct As Integer) As String
Attribute getTitleName.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bgnCel As Range
    
    If ct <= 0 Then ct = 1
    
    Set bgnCel = RgeObj.Offset(0, 0).Range("A1")
    If bTitle Then
        If bOptCol Then
            getTitleName = bgnCel.Offset(0, ct - 1).Text
        Else
            getTitleName = bgnCel.Offset(ct - 1, 0).Text
        End If
    Else
        getTitleName = "Item" & ct
    End If
End Function
'
'H14.1.11 LSQ
'
Function getTitleRange(RgeObj As Range, bOptCol As Boolean) As Range
Attribute getTitleRange.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim rwNum As Long, clNum As Integer
    Dim svStObj As Worksheet
    
    rwNum = RgeObj.Rows.Count
    clNum = RgeObj.Columns.Count
    
    Set svStObj = ActiveSheet
    
    RgeObj.Worksheet.Activate
    If bOptCol Then
        Set getTitleRange = RgeObj.Offset(0, 0).Range(Cells(1, 1), Cells(1, clNum))
    Else
        Set getTitleRange = RgeObj.Offset(0, 0).Range(Cells(1, 1), Cells(rwNum, 1))
    End If
    
    svStObj.Activate
End Function
'
'H14.1.17 LSQ
Function getXSelRange(ByVal RgeObj As Range, ByVal bOptCol As Boolean, ByVal bTitle As Boolean) As Range
Attribute getXSelRange.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim tmpRge As Range
    If bOptCol Then
        If bTitle Then Set tmpRge = RgeObj.Offset(1, 0) Else Set tmpRge = RgeObj
    Else
        If bTitle Then Set tmpRge = RgeObj.Offset(0, 1) Else Set tmpRge = RgeObj
    End If
    
    Set getXSelRange = getTitleRange(tmpRge, bOptCol)
End Function
'
'For X variable
'|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd|A|fffd|^|fffd|C|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd||691|I|fffd||fffd||fffd||3c2||742||303|f|fffd|[|fffd|^|fffd||590||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B
'
'return : the new range
'
'NOTE : Paste:=xlValues (old : xlValue, formula data copy REF# error)
'
'H14.1.17 by LSQ
'
Function moveData_X(RgeObj As Range, basItemName As String, bCol As Boolean, bTitle As Boolean, _
    bXSel As Boolean, outBgn As Range) As Range
Attribute moveData_X.VB_ProcData.VB_Invoke_Func = " \n14"
    
    Dim ct As Integer
    Dim smpNum As Long, ItemNum As Integer, itemNo As Integer
    Dim toBgn As Range, c As Range
    Dim itemNmRge As Range, xSelRge As Range, tmpRge As Range
    Dim svStObj As Worksheet
    Set svStObj = ActiveSheet
    
    'set
    Set itemNmRge = getTitleRange(RgeObj, bCol)
    Set xSelRge = getXSelRange(RgeObj, bCol, bTitle)
    
    'Item Name
    If bTitle Then
        Set toBgn = outBgn
        For ct = 1 To itemNmRge.Count
            If (bXSel = False) Or (bXSel And isSelFlag(xSelRge(ct))) Then
                toBgn = itemNmRge(ct)
                'next
                Set toBgn = toBgn.Offset(0, 1)
            End If
        Next ct
    Else
        Set toBgn = outBgn
        itemNo = 1
        For ct = 1 To itemNmRge.Count
            If (bXSel = False) Or (bXSel And isSelFlag(xSelRge(ct))) Then
                toBgn = basItemName & itemNo
                'next
                Set toBgn = toBgn.Offset(0, 1)
            End If
            itemNo = itemNo + 1
        Next ct
        '
        'special
        If itemNmRge.Count = 1 Then
            outBgn = basItemName 'Numbering |fffd||fffd||fffd||202||fffd|
        End If
    End If
    
    'Data set
    Set toBgn = outBgn.Offset(1, 0)
    
    Set tmpRge = getDataRange_SmpTitle(RgeObj, bCol, bTitle, False, bXSel)
    If tmpRge Is Nothing Then
        Set moveData_X = Nothing
        Exit Function
    End If
    '
    tmpRge.Copy
    toBgn.Worksheet.Activate
    toBgn.Select
    If bCol Then
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    Else
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
    End If
    'H14.11.27 LSQ moved
    Set tmpRge = Selection  'H14.11.12 LSQ add
    smpNum = tmpRge.Rows.Count
    ItemNum = tmpRge.Columns.Count
    
    Application.CutCopyMode = False
    
    'return
    Set moveData_X = outBgn.Range(Cells(1, 1), Cells(smpNum + 1, ItemNum))
    
    svStObj.Activate

End Function
'
'For Y variable
'|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||fffd|A|fffd|^|fffd|C|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd||691|I|fffd||fffd||fffd||3c2||742||303|f|fffd|[|fffd|^|fffd||590||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B
'
'bHasSelRow :     X Select Row Ari/Nasi
'bSelRowValid :   if bHasSelRow = Ari, the Select Row Valid or Invalid; if bHasSelRow = Nasi, not used.
'
'return : the new range
'
'NOTE : Paste:=xlValues (old : xlValue, formula data copy REF# error)
'
'H14.2.25 by LSQ
'
Function moveData_Y(RgeObj As Range, basItemName As String, bCol As Boolean, bTitle As Boolean, _
    bHasSelRow As Boolean, outBgn As Range, Optional bSelRowValid) As Range
Attribute moveData_Y.VB_ProcData.VB_Invoke_Func = " \n14"
    
    Dim ct As Integer, rwNum, clNum, tmpi As Integer
    Dim smpNum As Long, ItemNum As Integer, itemNo As Integer
    Dim toBgn As Range, c As Range
    Dim itemNmRge As Range, xSelRge As Range, tmpRge As Range
    Dim svStObj As Worksheet
    Set svStObj = ActiveSheet
    
    If UCase(TypeName(bSelRowValid)) = "ERROR" Then bSelRowValid = False
    
    'set
    Set itemNmRge = getTitleRange(RgeObj, bCol)
    Set xSelRge = getXSelRange(RgeObj, bCol, bTitle)
    
    'Item Name
    If bTitle Then
        Set toBgn = outBgn
        For ct = 1 To itemNmRge.Count
            If (bHasSelRow = False) Or (bSelRowValid = False) Or (bSelRowValid And isSelFlag(xSelRge(ct))) Then
                toBgn = itemNmRge(ct)
                'next
                Set toBgn = toBgn.Offset(0, 1)
            End If
        Next ct
    Else
        Set toBgn = outBgn
        itemNo = 1
        For ct = 1 To itemNmRge.Count
            If (bHasSelRow = False) Or (bSelRowValid = False) Or (bSelRowValid And isSelFlag(xSelRge(ct))) Then
                toBgn = basItemName & itemNo
                'next
                Set toBgn = toBgn.Offset(0, 1)
            End If
            itemNo = itemNo + 1
        Next ct
        '
        'special
        If itemNmRge.Count = 1 Then
            outBgn = basItemName 'Numbering |fffd||fffd||fffd||202||fffd|
        End If
    End If
    
    'Data set
    Set toBgn = outBgn.Offset(1, 0)
    
    If (bHasSelRow And bSelRowValid = False) Then
        RgeObj.Worksheet.Activate
        
        rwNum = RgeObj.Rows.Count
        clNum = RgeObj.Columns.Count
        tmpi = forcIIf(bTitle, 2, 1)
        If bCol Then
            rwNum = rwNum - tmpi
            If rwNum > 0 Then
                Set tmpRge = RgeObj.Offset(tmpi, 0).Range(Cells(1, 1), Cells(rwNum, clNum))
            End If
        Else
            clNum = clNum - tmpi
            If clNum > 0 Then
                Set tmpRge = RgeObj.Offset(0, tmpi).Range(Cells(1, 1), Cells(rwNum, clNum))
            End If
        End If
    Else
        Set tmpRge = getDataRange_SmpTitle(RgeObj, bCol, bTitle, False, bHasSelRow)
    End If
    
    If tmpRge Is Nothing Then
        Set moveData_Y = Nothing
        Exit Function
    End If
    '
    tmpRge.Worksheet.Activate
    tmpRge.Copy
    toBgn.Worksheet.Activate
    toBgn.Select
    If bCol Then
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    Else
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
    End If
    'H14.11.27 LSQ moved
    Set tmpRge = Selection  'H14.11.12 LSQ add
    smpNum = tmpRge.Rows.Count
    ItemNum = tmpRge.Columns.Count
    
    Application.CutCopyMode = False
    
    'return
    Set moveData_Y = outBgn.Range(Cells(1, 1), Cells(smpNum + 1, ItemNum))
    
    svStObj.Activate

End Function
'
'return no data number
'02.2.25 LSQ
'
Function clearNoData(ByVal yDataBgn As Range, ByVal yNum As Integer, ByVal xDataBgn As Range, ByVal xNum As Integer, _
    ByVal smpNum As Variant)
Attribute clearNoData.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim i, ct
    Dim yRge As Range, xRge As Range
    
    yDataBgn.Worksheet.Activate
    Set yRge = yDataBgn.Range(Cells(1, 1), Cells(1, yNum))
    
    xDataBgn.Worksheet.Activate
    Set xRge = xDataBgn.Range(Cells(1, 1), Cells(1, xNum))
    
    ct = 0
    For i = 0 To (smpNum - 1)
        If Application.Count(xRge.Offset(i, 0)) <> xNum Then
            yRge.Offset(i, 0) = ""
            xRge.Offset(i, 0) = ""
            ct = ct + 1
        End If
    Next i
    
    clearNoData = ct
    
End Function
'
'|fffd||fffd||fffd||fffd||fffd|/|fffd|s|fffd||fffd||fffd||fffd||fffd||303|f|fffd|[|fffd|^; |fffd|^|fffd|C|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd|A|fffd||202||fffd||fffd||303|f|fffd|[|fffd|^|fffd||fffd|
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||83|^|fffd|C|fffd|g|fffd||fffd||fffd||fffd||fffd||fffd||303|f|fffd|[|fffd|^|fffd||590||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B
'
'return : the new range
'copied from SSSMCTH2, Aug 2003, PYJ
Function moveData(RgeObj As Range, basItemName As String, bCol As Boolean, bTitle As Boolean, _
    bXSel As Boolean, outBgn As Range) As Range
Attribute moveData.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim ct As Integer, smpNum As Long, ItemNum As Integer
    Dim toBgn As Range, tmpRge As Range, c As Range
    Dim svStObj As Worksheet
    Set svStObj = ActiveSheet
    
    Set toBgn = outBgn
    
    'Title set
    Set tmpRge = getTitleRange(RgeObj, bCol)
    
    If bTitle Then
        For Each c In tmpRge
            toBgn = c
            Set toBgn = toBgn.Offset(0, 1)
        Next c
    Else
        If tmpRge.Count = 1 Then
            toBgn = basItemName 'Numbering |fffd||fffd||fffd||202||fffd|
        Else
            For ct = 1 To tmpRge.Count
                toBgn = basItemName & ct
                Set toBgn = toBgn.Offset(0, 1)
            Next ct
        End If
    End If
    
    'Data set
    Set toBgn = outBgn.Offset(1, 0)
    
    Set tmpRge = getDataRange(RgeObj, bCol, bTitle, bXSel)
    tmpRge.Copy
    toBgn.Worksheet.Activate
    toBgn.Select
    If bCol Then
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    Else
        Selection.PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=True
    End If
    'H14.11.27 LSQ moved
    Set tmpRge = Selection  'H14.11.12 LSQ add
    smpNum = tmpRge.Rows.Count
    ItemNum = tmpRge.Columns.Count
    
    Application.CutCopyMode = False
    
    Set moveData = outBgn.Range(Cells(1, 1), Cells(smpNum + 1, ItemNum))
    
    svStObj.Activate

End Function
'
'H13.3.29 LSQ : for Mac2001
'
Function Power(a As Variant, n As Integer) As Double
Attribute Power.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim i As Integer
    
    Power = 1#
    For i = 1 To n
        Power = Power * a
    Next i
    
End Function
'
Function SpaceAri(ByVal x As Range) As Boolean
Attribute SpaceAri.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim i As Integer, j As Integer
    Dim smpNum As Integer, ItemNum As Integer
    
    smpNum = x.Rows.Count
    ItemNum = x.Columns.Count
    SpaceAri = False
    For i = 1 To smpNum
        For j = 1 To ItemNum
            If IsEmpty(x.Offset(0, 0).Cells(i, j)) Then
                SpaceAri = True
                Exit Function
            End If
        Next j
    Next i
End Function

Function TotalNumericData(ByVal x As Range) As Long
Attribute TotalNumericData.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim n As Long
    n = Application.Count(x)
    TotalNumericData = n
End Function
'
'H14.11.12 LSQ add
Function HasNoData(ByVal x As Range) As Boolean
Attribute HasNoData.VB_ProcData.VB_Invoke_Func = " \n14"
    HasNoData = False
    If x Is Nothing Then Exit Function
    
    If Application.Count(x) <> x.Rows.Count * x.Columns.Count Then
        HasNoData = True
    End If
    
End Function

Function CheckEmptyData(x As Range) As Long
Attribute CheckEmptyData.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim nData As Long, tmpCel As Range, ci As Long, ct As Long
    Dim smpNum As Long, ItemNum As Integer
    
    ItemNum = x.Columns.Count
    smpNum = x.Rows.Count
    
    For ci = 1 To ItemNum
        nData = 0
        For ct = 2 To smpNum
            Set tmpCel = x(ct, ci)
            If Not IsEmpty(tmpCel) Then
                nData = nData + 1
             End If
        Next ct
        If nData < 3 Then
            CheckEmptyData = nData
            Exit Function
        End If
    Next ci
    '
    CheckEmptyData = nData
End Function

'=== EOF ===

Attribute VB_Name = "commStruc"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: |fffd||fffd||fffd||28d|\|fffd||fffd||fffd||fffd|
'
'Aug 2003, PYJ
'=================================================
Option Explicit

'|fffd|X|fffd||fffd||fffd||fffd||fffd||34a||590||fffd||fffd||fffd||fffd|w|fffd||fffd||310||fffd|
Public Const g_nKkFunNum As Integer = 15

'|fffd||fffd||fffd||595||fffd||fffd||fffd|
Type DEFDlgSkn
    nJudge As Integer       '|fffd||fffd||fffd||fffd|: 1--|fffd||fffd||fffd||fffd||fffd||582||30c||fffd||fffd||fffd|; 2--|fffd||a44a||fffd||58c|W|fffd||fffd||fffd||30c||fffd||fffd||fffd|
    dCompVal As Double      '|fffd||fffd|r|fffd|l(0|fffd|`1)
    nTimeLag As Integer     '|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd|l
End Type

'|fffd||fffd||fffd|d|fffd||693||fffd|
Type DEFDlgEma
    nSmpNum As Integer
End Type

'EPA
Type DEFDlgEpa
    nMod As Integer         '|fffd||fffd||fffd|f|fffd||fffd|: 1--|fffd||fffd||fffd||fffd|; 2--|fffd||fffd|@; 3--|fffd||fffd||fffd|@
End Type

'|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|
Type DEFDlgKk
    nProdict As Integer                 '|fffd|\|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd|
    nUpLimitFlg As Integer              '|fffd||fffd||fffd||fffd|l: 1--|fffd||fffd||fffd||fffd||fffd|P; 2--|fffd||fffd||fffd||fffd||fffd|Q; 3--|fffd||fffd||fffd||fffd|
    dUpLimit As Double
    'nSi As Integer
    nSuitei As Integer                  '|fffd||fffd||510||fffd||fffd||fffd||190|M|fffd||fffd||fffd|x: 1--|fffd||202||fffd|; 2--95|fffd||fffd|; 3--99|fffd||fffd|
    nmFuncSel(1 To g_nKkFunNum) As Integer          '|fffd||590||fffd||fffd||fffd||fffd||311|I|fffd||fffd||fffd|i|fffd|U|fffd||fffd||fffd||702||151|I|fffd||fffd||fffd||81|j: 1--Selected; 0--not
End Type

'|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|
Type DEFDlgJkk
    nSuitei As Integer      '|fffd||fffd||510||fffd||fffd||fffd||190|M|fffd||fffd||fffd|x: 1--|fffd||202||fffd|; 2--95|fffd||fffd|; 3--99|fffd||fffd|
    nMethod As Integer      '|fffd||3d0||fffd||fffd|I|fffd||fffd|@
    bTimeLag As Boolean     '|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd|l: False--|fffd|w|fffd||fffd||202||fffd|; True--|fffd|P|fffd|s|fffd|i|fffd||fffd|j|fffd||fffd|
    bTesuk As Boolean       '|fffd||8414||fffd||fffd||fffd|O|fffd||30f|d|fffd||fffd|A
    F_in As Double
    F_out As Double
End Type

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Type DEFDlgGs
    nKkMethod As Integer    '|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|
    nMinSmpLmt As Integer   ' = 5
    nMaxSmpLmt As Integer   '|fffd||fffd||fffd||fffd|--48; |fffd|l|fffd||fffd||fffd||fffd|--16; |fffd|N|fffd||fffd|--10
    nLmtSmp1 As Integer     '|fffd||fffd||fffd||fffd|--24; |fffd|l|fffd||fffd||fffd||fffd|--12; |fffd|N|fffd||fffd|--10
    nLmtSmp2 As Integer     '|fffd||fffd||fffd||fffd|--36; |fffd|l|fffd||fffd||fffd||fffd|--12; |fffd|N|fffd||fffd|--10
End Type

Type DEFDialog
    '|fffd||fffd||fffd||282||30e|w|fffd||fffd||fffd||fffd|e
    rgeInp As Range         '|fffd|f|fffd|[|fffd|^|fffd||348||fffd|
    rgeOutBgn As Range
    
    RgeX As Range           '|fffd||fffd||fffd||fffd||fffd||3d0||fffd|, for |fffd|v|fffd||fffd||fffd||fffd||fffd||fffd| and |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| only
    bXSel As Boolean        '|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||311|I|fffd||fffd|: True--|fffd||fffd||fffd||fffd|; False--|fffd||202||fffd|, for |fffd|v|fffd||fffd||fffd||fffd||fffd||fffd| and |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| only
    
    bColData As Boolean     '|fffd|f|fffd|[|fffd|^|fffd|n|fffd||fffd||30c||fffd||fffd||fffd|: True--|fffd||fffd||fffd||fffd||fffd|; False--|fffd|s|fffd||fffd||fffd||fffd|
    bTitle As Boolean       '1|fffd|s|fffd|i|fffd||fffd|j|fffd||682||303|f|fffd|[|fffd|^|fffd||fffd||fffd|: True--|fffd|f|fffd|[|fffd|^|fffd||fffd||fffd|x|fffd||fffd|; False--|fffd|f|fffd|[|fffd|^

    bStopNonData As Boolean '|fffd||fffd||fffd|l|fffd||20a|O|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd|: True--|fffd||fffd||fffd|~; False--|fffd||fffd||fffd|O|fffd||fffd||fffd||111||fffd||fffd|s; for |fffd|X|fffd||fffd||fffd||fffd||fffd||fffd| only now
    
    'not for |fffd||fffd||fffd||595||fffd||fffd||fffd|/|fffd|U|fffd|z|fffd|}
    bGraph As Boolean
    nTimeStyle As Integer   '|fffd||fffd||fffd||fffd||fffd|\|fffd||fffd|: 1--|fffd||fffd||fffd||fffd|; 2--|fffd|l|fffd||fffd||fffd||fffd|; 3--|fffd|N|fffd||fffd|; 4--No.
    nYearBgn As Integer
    nMonth As Integer
    
    dlgSkn As DEFDlgSkn     '|fffd||fffd||fffd||595||fffd||fffd||fffd|Dlg
    dlgEma As DEFDlgEma     '|fffd||fffd||fffd|d|fffd||693||fffd|Dlg
    dlgEpa As DEFDlgEpa     'EPADlg
    dlgKk As DEFDlgKk       '|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|Dlg
    dlgJkk As DEFDlgJkk     '|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|Dlg
    dlgGs As DEFDlgGs       '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Dlg
End Type
'
'H15.9.25 LSQ : used to call DLL
'
Type TYTenGraph1
    startShtName As String

    tateDataRge As String
    yokoDataRge As String
    outRge As String
    namerge As String
    
    flgName As Integer      '1=Yes 2=No
    mjNum As Integer        '
    ftSize As Integer       '
    
    flgSkn As Integer       '1=Yes 2=No
    
    flgDir As Integer       '1=Col 2=Row
    flgNotData As Integer   '1=Skip 2=Stop
    flgTitle As Integer     '1=Title 2=Data
End Type
'
'
'H15.9.25 LSQ : used to call DLL
'
Type TYTenGraph2
    startShtName As String
    
    dataRge As String
    tateDataRge As String
    yokoDataRge As String
    outRge As String
    
    flgDataType As Integer  '1=Matrix 2=Group
    flgSkn As Integer       '1=Yes 2=No
    flgMark As Integer      '1=Yes 2=No
    flgPval As Integer      '1=Yes 2=No
    flgKK As Integer        '1=Yes 2=No
    
    wakuRow As Integer
    wakuCol As Integer
    flgKan As Integer       '1=Yes 2=No
    
    flgDir As Integer       '1=Col 2=Row
    flgNotData As Integer   '1=Skip 2=Stop
    flgTitle As Integer     '1=Title 2=Data

End Type


Public g_aDialog As DEFDialog

'=== EOF ===
Attribute VB_Name = "dateChk"
'
Option Private Module
Option Explicit

#If VBA7 Then
    Declare PtrSafe Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
#Else
    Declare Function GetPrivateProfileString Lib "kernel32" Alias "GetPrivateProfileStringA" (ByVal lpApplicationName As String, ByVal lpKeyName As Any, ByVal lpDefault As String, ByVal lpReturnedString As String, ByVal nSize As Long, ByVal lpFileName As String) As Long
#End If

Const MSG_CHK_001 As String = "ISTAT.INI|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|B" & vbCrLf & GName_Prog & "|fffd||fffd||fffd||103|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B"

'******************************************
'* |fffd||1bc||fffd||5f2||fffd||781|@|327||fffd||fffd|(ISTAT.INI)|fffd||fffd||fffd||fffd|
'* EXCEL|fffd|\|fffd||fffd||fffd||313||fffd||fffd|t|fffd||fffd||fffd|`|fffd|F|fffd|b|fffd|N|fffd||fffd||fffd|A|fffd||fffd||fffd|t|fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd|
'* EXCEL|fffd||fffd||fffd|N|fffd||fffd||fffd||fffd||fffd||fffd||fffd||202||fffd|
'******************************************
Function user_date_chk() As Boolean
    Dim sIniStr$
    Dim sDate1$
    Dim sDate2$
    Dim ddd As Double
    Dim iRet As Integer
    Dim vDate1, vDate2 As Variant
    Dim sTemp1, sTemp2 As String
    
    sTemp1 = Chr(13)
    sIniStr = getTaikouIniStr()     'ISTAT.INI|fffd||fffd||fffd||fffd||fffd||fffd|t|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||1c2||74f|o|fffd||fffd|
    
    user_date_chk = False 'init
    
    iRet = StringDecode(sIniStr, sDate1) '|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||256||7c2||fffd|
    If (iRet <> True) Then
        MsgBox MSG_CHK_001
        Exit Function
    End If
    
    'iRet = StringEncode(sDate1, sTemp2)
    
    'sDate1 = "1996/10/27"
    If (sDate1 <> "0000/00/00") Then
        If (IsDate(sDate1) = False) Then
            MsgBox MSG_CHK_001
            Exit Function
        End If
    
        vDate1 = CDate(sDate1)
        vDate2 = Date
        If (vDate1 < vDate2) Then
            MsgBox "" & GName_Prog & "|fffd||30e||fffd||fffd|p|fffd||fffd||fffd||fffd|[" & sDate1 & "]|fffd||fffd||fffd||7c2||fffd||fffd||702||fffd||fffd||fffd||fffd|B" & sTemp1 & _
            "|fffd||fffd||fffd||fffd||fffd||fffd||403|A|fffd|C|fffd|X|fffd|^|fffd|b|fffd|g|fffd|u|fffd|\|fffd|t|fffd|g|fffd|E|fffd|G|fffd|A|fffd|T|fffd|||fffd|[|fffd|g|fffd|S|fffd||fffd||fffd|v|fffd||702||142||fffd||fffd|A|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B" & sTemp1 & _
            "|fffd|d|fffd|b|fffd|@03-3315-7637"
            Exit Function
        End If
    End If
    
    user_date_chk = True 'init
End Function


'******************************************
'* |fffd||1bc||fffd||5f2||fffd||781|@|327||fffd||fffd|(ISTAT.INI)|fffd||fffd||fffd||fffd|
'* |fffd|A|fffd|v|fffd||fffd||fffd|P|fffd|[|fffd|V|fffd||fffd||fffd||fffd||fffd||302||fffd||fffd||fffd|f|fffd|B|fffd||fffd||fffd|N|fffd|g|fffd||fffd||fffd||fffd||fffd||64fe||fffd||fffd||fffd||fffd|B
'******************************************
Function getTaikouIniStr() As String
    Dim sGetBuffer$
    Dim lRet As Long
    Dim iRet As Long
    Dim sTemp1$
    Dim sIniFileName As String
    sGetBuffer$ = String$(300, 0)   '|fffd|f|fffd|[|fffd|^|fffd||30f||fffd||fffd||fffd||fffd||fffd|

    sGetBuffer$ = getPathName() & "\"   'old = gsPrgPath
    sIniFileName$ = sGetBuffer$ & "ISTAT.INI"
    iRet = 0
    
    sGetBuffer$ = String$(256, 0)   '|fffd|f|fffd|[|fffd|^|fffd||30f||fffd||fffd||fffd||fffd||fffd|
    iRet = GetPrivateProfileString(ByVal "Excel", ByVal "MyDate", ByVal "0000000000", sGetBuffer$, CInt(256), ByVal sIniFileName$)
    sTemp1 = Left$(sGetBuffer$, InStr(sGetBuffer$, Chr(0)) - 1)
    If (sTemp1 = "0000000000") Then
        '11.12.2 LSQ cmt
        'MsgBox MSG_CHK_001
        'End
    End If
    
    getTaikouIniStr = sTemp1
End Function

Function StringDecode(ByVal sInpStr As String, sOutStr As String) As Integer
'sInpStr :|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||9576||fffd||fffd||fffd||fffd|
'sOutStr :|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||9576||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1c2||fffd||fffd||fffd|sOutStr|fffd||255||502||fffd|
    Dim iLengs, iCnt1, iMojiCode0, iMojiCode1, iMojiCode2 As Integer
    Dim vKanjiCode  'As Integer
    Dim iKanjiFlg As Integer
    Dim sMoji, sTempStr As String
    Dim iKanji As Integer
    Dim dTemp1 As Double
    On Error GoTo ErrorHandler:
    sOutStr = ""
    iLengs = Len(sInpStr)
    '|fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd||fffd|16|fffd|i|fffd||315||fffd||fffd||fffd||fffd||fffd||255||3ca||fffd||fffd||fffd||fffd||fffd|sTempStr|fffd||24a|i|fffd|[
    iKanjiFlg = 0   '|fffd||fffd||fffd||fffd||fffd|t|fffd||fffd||fffd|O|fffd||30f||fffd||fffd||fffd||fffd||fffd|
    For iCnt1 = 1 To iLengs Step 2
        sMoji = Mid$(sInpStr, iCnt1, 1)         '|fffd|P|fffd||fffd||fffd||fffd||fffd||c2||8e||fffd||fffd|o|fffd||fffd|
        
        '|fffd||fffd||fffd||fffd||fffd||fffd||312|l|fffd||303|`|fffd|F|fffd|b|fffd|N
        If ((Asc(sMoji) < &H3F) Or (Asc(sMoji) > &H4F)) Then
            StringDecode = False
            Exit Function
        End If
        iMojiCode1 = Asc(sMoji) - &H40
        sMoji = Mid$(sInpStr, iCnt1 + 1, 1)
        
        '|fffd||fffd||fffd||fffd||fffd||fffd||312|l|fffd||303|`|fffd|F|fffd|b|fffd|N
        If ((Asc(sMoji) < &H3F) Or (Asc(sMoji) > &H4F)) Then
            StringDecode = False
            Exit Function
        End If
        iMojiCode2 = Asc(sMoji) - &H40
        iMojiCode0 = iMojiCode1 * 16 + iMojiCode2
        
        '|fffd||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd||fffd|P|fffd|o|fffd|C|fffd|g|fffd||314||fffd||fffd||fffd|
        If (iMojiCode0 >= &H81 And iMojiCode0 <= &H9F) Or (iMojiCode0 >= &HE0 And iMojiCode0 <= &HFC) Then
            If iKanjiFlg = 0 Then   '|fffd||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd|P|fffd|o|fffd|C|fffd|g|fffd||fffd|
                iKanjiFlg = 1
                vKanjiCode = iMojiCode0 * 256
            Else                    '|fffd||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd|Q|fffd|o|fffd|C|fffd|g|fffd||fffd|
                vKanjiCode = vKanjiCode + iMojiCode0
                'sTempStr = "&H" + Hex$(vKanjiCode)
                dTemp1 = CDbl(vKanjiCode)
                If (dTemp1 > 32767) Then
                    iKanji = CInt(dTemp1 - 65536)
                Else
                    iKanji = CInt(dTemp1)
                End If
                'sOutStr = sOutStr + Chr$(Val(sTempStr))
                sOutStr = sOutStr + Chr$(iKanji)
                iKanjiFlg = 0
            End If
        Else
            If iKanjiFlg = 0 Then   'ASC|fffd|R|fffd|[|fffd|h
                sOutStr = sOutStr + Chr$(iMojiCode0)
            Else                    '|fffd||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd|Q|fffd|o|fffd|C|fffd|g|fffd||fffd|
                vKanjiCode = vKanjiCode + iMojiCode0
                'sTempStr = "&H" + Hex$(vKanjiCode)
                dTemp1 = CDbl(vKanjiCode)
                If (dTemp1 > 32767) Then
                    iKanji = CInt(dTemp1 - 65536)
                Else
                    iKanji = CInt(dTemp1)
                End If
                'sOutStr = sOutStr + Chr$(Val(sTempStr))
                sOutStr = sOutStr + Chr$(iKanji)
                iKanjiFlg = 0
            End If
        End If
    Next iCnt1
    StringDecode = True
    Exit Function
ErrorHandler:
    StringDecode = False
    Exit Function
End Function

Function StringEncode(ByVal sInpStr As String, sOutStr As String) As Integer
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| sOutStr|fffd||255||502||fffd|
'sInpStr :|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||102||202||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'sOutStr :|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim iLengs, iCnt1, iMojiCode As Integer
    Dim sMoji, sTempStr As String
    
    sOutStr = ""
    sTempStr = ""
    iLengs = Len(sInpStr)
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||315||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd||fffd|16|fffd|i|fffd||315||fffd||fffd||fffd||fffd||fffd||255||3ca||fffd||fffd||fffd||fffd||fffd|sTempStr|fffd||24a|i|fffd|[
    For iCnt1 = 1 To iLengs Step 1
        sMoji = Mid$(sInpStr, iCnt1, 1)
        iMojiCode = Asc(sMoji)
        sTempStr = sTempStr + Hex$(iMojiCode)
    Next iCnt1
  
    '|fffd||fffd||fffd||fffd||fffd|R|fffd|[|fffd|h|fffd||fffd||fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|B
    iLengs = Len(sTempStr)
    For iCnt1 = 1 To iLengs Step 1
        sMoji = Mid$(sTempStr, iCnt1, 1)    '|fffd|l|fffd||fffd||fffd||fffd||fffd||c2||8e||fffd||fffd|o|fffd||fffd|
        Select Case sMoji
            Case "A"
                iMojiCode = 10 + &H40
            Case "B"
                iMojiCode = 11 + &H40
            Case "C"
                iMojiCode = 12 + &H40
            Case "D"
                iMojiCode = 13 + &H40
            Case "E"
                iMojiCode = 14 + &H40
            Case "F"
                iMojiCode = 15 + &H40
            Case Else   '0-9|fffd||310||fffd||fffd||fffd||fffd||30e||fffd|
                iMojiCode = Val(sMoji) + &H40       '|fffd|o|fffd||102||fffd||fffd||fffd||fffd||fffd||fffd|l|fffd||fffd|40|fffd||fffd||fffd||fffd|
        End Select
        sOutStr = sOutStr + Chr$(iMojiCode) '|fffd|X|fffd||243|L|fffd||fffd||fffd||fffd||fffd|N|fffd|^|fffd||255||3ca||fffd|
    Next iCnt1

End Function

Function isTrialVer() As Boolean
    Dim sIniStr$
    Dim sDate1$
    Dim sDate2$
    Dim ddd As Double
    Dim iRet As Integer
    Dim vDate1, vDate2 As Variant
    Dim sTemp1, sTemp2 As String
    
    If YSK_USB_VERSION = False Then
'**********************************
    isTrialVer = True
    Exit Function
'**********************************
    End If
    
    'init
    isTrialVer = False
    sTemp1 = Chr(13)
    
    sIniStr = getTaikouIniStr()     'ISTAT.INI|fffd||fffd||fffd||fffd||fffd||fffd|t|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||1c2||74f|o|fffd||fffd|
    
    If sIniStr = "" Then
        Exit Function
    End If
    
    iRet = StringDecode(sIniStr, sDate1) '|fffd||cd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||256||7c2||fffd|
    If (iRet <> True) Then
        Exit Function
    End If
    
    'iRet = StringEncode(sDate1, sTemp2)
    
    'sDate1 = "1996/10/27"
    If (sDate1 <> "0000/00/00") Then
        isTrialVer = True
        Exit Function
    End If
    
    'return error free
    isTrialVer = False

End Function
'=== EOF ===

Attribute VB_Name = "dispMdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: Error Display
'
'1997.7.17 by SJY
'2002.7.10 LSQ mdf
'=================================================
Option Explicit

Sub Error_Display(no)
Attribute Error_Display.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim b_code As Integer
    Dim msgStr As String
    
    If no = 0 Then Exit Sub
    
    b_code = no - (CInt(no / 100)) * 100
    Select Case b_code
        Case 1
            msgStr = "[ERROR:" & no & "]" & "|fffd|G|fffd||fffd||fffd|[|fffd||142||fffd||fffd|I"
        Case 2
            msgStr = "[ERROR:" & no & "]" & "|fffd|f|fffd|[|fffd|^|fffd||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 3
            msgStr = "[ERROR:" & no & "]" & "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 4
            msgStr = "[ERROR:" & no & "]" & "|fffd||693|I|fffd||3d0||fffd||fffd||314||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 5
            msgStr = "[ERROR:" & no & "]" & "|fffd|o|fffd||354||348||342||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 6
            msgStr = "[ERROR:" & no & "]" & "|fffd|w|fffd||fffd|f|fffd|[|fffd|^|fffd||348||342||255|s|fffd||fffd||fffd|t|fffd|H|fffd|[|fffd|}|fffd|b|fffd|g|fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 7
            msgStr = "[ERROR:" & no & "]" & "|fffd|w|fffd||fffd||142||fffd||fffd||9340||fffd||690||fffd||fffd||341|A|fffd|R|fffd|O|fffd||fffd||fffd||688||213||fffd||fffd||142||fffd||fffd|I"
        Case 8
            msgStr = "[ERROR:" & no & "]" & "|fffd|w|fffd||80b7||fffd||9340||fffd||690||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|I"
        Case 9
            msgStr = "[ERROR:" & no & "]" & "|fffd|w|fffd||fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 10
            msgStr = "[ERROR:" & no & "]" & "|fffd|w|fffd||fffd|T|fffd||fffd||fffd|v|fffd||fffd||fffd||fffd||fffd|i|fffd||fffd||fffd||fffd||fffd||fffd||fffd|j|fffd||fffd||fffd|s|fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd|I"
        Case 11
            msgStr = "[ERROR:" & no & "]" & "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 12
            msgStr = "[ERROR:" & no & "]" & "|fffd||fffd|r|fffd|l|fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 13
            msgStr = "[ERROR:" & no & "]" & "|fffd||590||fffd||fffd||fffd||fffd||310||fffd||fffd||341|A|fffd|U|fffd||209||fffd||fffd||142||fffd||fffd|I"
        Case 14
            msgStr = "[ERROR:" & no & "]" & "|fffd||590||fffd||fffd||fffd||fffd||34e|w|fffd||80b3||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd|I"
        Case 15
            msgStr = "[ERROR:" & no & "]" & "|fffd||fffd||fffd||fffd|l|fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 16
            msgStr = "[ERROR:" & no & "]" & "|fffd|T|fffd|C|fffd|N|fffd||fffd||fffd||fffd||fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 17
            msgStr = "[ERROR:" & no & "]" & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 18
            msgStr = "[ERROR:" & no & "]" & "|fffd||fffd||fffd||fffd||fffd||3d0||fffd||fffd||310||fffd||fffd||341|A|fffd|Q|fffd|O|fffd||209||fffd||fffd||142||fffd||fffd|I"
        Case 19
            msgStr = "[ERROR:" & no & "]" & "|fffd|v|fffd|Z|fffd|p|fffd|s|fffd||42a8d||fffd||fffd||702||fffd||fffd||fffd|I"
        Case 20
            msgStr = "[ERROR:" & no & "]" & "|fffd||3d0||fffd||fffd||fffd||fffd||742||151||fffd||fffd||582||30d||fffd||fffd||fffd||fffd||fffd||fffd||682||fffd||fffd||fffd||fffd||fffd|A|fffd||fffd||fffd||30e||fffd|@|fffd||142||349||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|I"
        Case 21
            msgStr = "[ERROR:" & no & "]" & "F-in |fffd||fffd| F-out|fffd||fffd||83ec||fffd||fffd||fffd||fffd||fffd|I"
        Case 22
            msgStr = "[ERROR:" & no & "]" & "F-in |fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 23
            msgStr = "[ERROR:" & no & "]" & "F-out |fffd||30e|w|fffd||fffd||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
        Case 24
            msgStr = "[ERROR:" & no & "]" & "F-in |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|I"
        Case 25
            msgStr = "[ERROR:" & no & "]" & "F-out |fffd||fffd||50ab||fffd||fffd||fffd||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|I"
        Case 26
            msgStr = "[ERROR:" & no & "]" & "|fffd||fffd||835e||fffd||795||3d0||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd|I"
        Case 27
            msgStr = "[ERROR:" & no & "]" & "|fffd|[|fffd||fffd||fffd||702||fffd||fffd||355||fffd||fffd||303|f|fffd|[|fffd|^|fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B|fffd||fffd||fffd|@|fffd||fffd||fffd|f|fffd||fffd||fffd||fffd||fffd|g|fffd|p|fffd||fffd||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|I"
        Case 28
            msgStr = "[ERROR:" & no & "]" & "|fffd|v|fffd|Z|fffd||fffd||fffd||243|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|I"
        Case 29
            msgStr = "[ERROR:" & no & "]" & "|fffd|w|fffd||80b5||fffd||fffd||fffd||fffd||fffd||308||a554||fffd||24c|v|fffd|Z|fffd||fffd||fffd||243|G|fffd||fffd||fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|I"
        Case 30
            msgStr = "[ERROR:" & no & "]" & "|fffd|\|fffd||fffd||fffd|f|fffd|[|fffd|^|fffd||fffd||fffd||30e|w|fffd||fffd||fffd||fffd|i|fffd|O|fffd|`|fffd|Q|fffd|O|fffd|O|fffd|j|fffd||213||fffd||fffd||250||752||80b5||fffd||109||fffd||fffd||fffd||fffd||fffd||fffd|I"
        Case 31
            msgStr = "[ERROR:" & no & "]" & "|fffd|J|fffd|n|fffd|N|fffd||fffd||fffd||313||fffd||fffd||342||24c||fffd||80aa||fffd||fffd||fffd||fffd||702||fffd||fffd|I"
    End Select
    '
    Msgbox_ScrnOption msgStr
    '
End Sub
'
Function MSG_CANTOPEN_FILE(ByVal fName As String) As String
Attribute MSG_CANTOPEN_FILE.VB_ProcData.VB_Invoke_Func = " \n14"
    MSG_CANTOPEN_FILE = fName & "|fffd|I|fffd|[|fffd|v|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B"
End Function
'
'---------------------------------------
'Message|fffd||315|\|fffd||fffd||fffd|G
'---------------------------------------
Sub DispMsg(ByVal msg As String, Optional ByVal bEcho)
Attribute DispMsg.VB_ProcData.VB_Invoke_Func = " \n14"
    If UCase(TypeName(bEcho)) = "ERROR" Then bEcho = True
    
    Application.ScreenUpdating = bEcho
    MsgBox msg, , GName_Prog
    
End Sub
'
'|fffd|V|fffd|[|fffd|g|fffd||318|g|fffd||fffd||fffd||315|`|fffd||fffd|
'
Sub setSheetWakusen(ByVal bOnOff As Boolean)
Attribute setSheetWakusen.VB_ProcData.VB_Invoke_Func = " \n14"
    ActiveWindow.DisplayGridlines = bOnOff
End Sub

'=== EOF ===

Attribute VB_Name = "epaMdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: EPA|fffd|@ (DLL|fffd|g|fffd|p)
'
' |fffd||c42c| : Aug 2003, PYJ, LSQ
'=================================================
Option Explicit
'
#If Win64 Then
    #If VBA7 Then
        Declare PtrSafe Function ysk_EPA_VBA Lib "MIST_E_64.dll" ( _
            ByVal nId As Long, _
            InBkName As String, InStName As String, _
            InRowBgn As Integer, InColBgn As Integer, _
            InRowEnd As Integer, InColEnd As Integer, _
            OutBkName As String, OutStName As String, _
            OutRow As Integer, OutCol As Integer, _
            bgnYear As Integer, bgnMonth As Integer, _
            circleFlg As Integer, modelFlg As Integer, graphFlg As Integer, _
            directionFlg As Integer, dataFlg As Integer) As Integer
    #Else
        Declare Function ysk_EPA_VBA Lib "MIST_E_64.dll" ( _
            ByVal nId As Long, _
            InBkName As String, InStName As String, _
            InRowBgn As Integer, InColBgn As Integer, _
            InRowEnd As Integer, InColEnd As Integer, _
            OutBkName As String, OutStName As String, _
            OutRow As Integer, OutCol As Integer, _
            bgnYear As Integer, bgnMonth As Integer, _
            circleFlg As Integer, modelFlg As Integer, graphFlg As Integer, _
            directionFlg As Integer, dataFlg As Integer) As Integer
    #End If
#Else
    #If VBA7 Then
        Declare PtrSafe Function ysk_EPA_VBA Lib "MIST_E.dll" ( _
            ByVal nId As Long, _
            InBkName As String, InStName As String, _
            InRowBgn As Integer, InColBgn As Integer, _
            InRowEnd As Integer, InColEnd As Integer, _
            OutBkName As String, OutStName As String, _
            OutRow As Integer, OutCol As Integer, _
            bgnYear As Integer, bgnMonth As Integer, _
            circleFlg As Integer, modelFlg As Integer, graphFlg As Integer, _
            directionFlg As Integer, dataFlg As Integer) As Integer
    #Else
        Declare Function ysk_EPA_VBA Lib "MIST_E.dll" ( _
            ByVal nId As Long, _
            InBkName As String, InStName As String, _
            InRowBgn As Integer, InColBgn As Integer, _
            InRowEnd As Integer, InColEnd As Integer, _
            OutBkName As String, OutStName As String, _
            OutRow As Integer, OutCol As Integer, _
            bgnYear As Integer, bgnMonth As Integer, _
            circleFlg As Integer, modelFlg As Integer, graphFlg As Integer, _
            directionFlg As Integer, dataFlg As Integer) As Integer
    #End If
#End If

Sub IS_EPA_VBA()
Attribute IS_EPA_VBA.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim bRtn As Boolean, bGraph As Boolean
    Dim nForcNum As Integer, nYSmpNum As Integer
    
    bRtn = GetDlgInp(YSK_EPA)
    If Not bRtn Then Exit Sub
    
    '|fffd|b|fffd||fffd||6f8||fffd||fffd||442||fffd||fffd||102||44f|o|fffd||fffd|
    Call changeToYSKDir
    
    nYSmpNum = g_aDialog.rgeInp.Rows.Count - 1
    nForcNum = forcIIf(g_aDialog.nTimeStyle = 1, 12, 4)
    bGraph = True ' g_aDialog.bGraph
    g_aDialog.bGraph = False
    
    bRtn = doEPA_VBA()
    
    If bRtn And bGraph Then
        Call EpaGraph(g_aDialog.rgeOutBgn, g_aDialog.rgeOutBgn.Offset(0, 7), nYSmpNum, 0)
    End If
    
    g_aDialog.rgeOutBgn.Worksheet.Activate
    ActiveWindow.DisplayGridlines = False
    g_aDialog.rgeOutBgn.Select
End Sub

Function doEPA_VBA() As Boolean
Attribute doEPA_VBA.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim rtn As Integer
    Dim r1 As Integer, c1 As Integer, r2 As Integer, c2 As Integer, ro As Integer, co As Integer
    Dim vInBkName As String, vInStName As String, vOutBkName As String, vOutStName As String
    Dim nId As Long
    
    r1 = g_aDialog.rgeInp.Row - 1: r2 = r1 + g_aDialog.rgeInp.Rows.Count - 1
    c1 = g_aDialog.rgeInp.Column - 1: c2 = c1 + g_aDialog.rgeInp.Columns.Count - 1
    ro = g_aDialog.rgeOutBgn.Row - 1: co = g_aDialog.rgeOutBgn.Column - 1
    
    vInBkName = g_aDialog.rgeInp.Worksheet.Parent.Name
    vInStName = g_aDialog.rgeInp.Worksheet.Name
    vOutBkName = g_aDialog.rgeOutBgn.Worksheet.Parent.Name
    vOutStName = g_aDialog.rgeOutBgn.Worksheet.Name
    
    nId = IIf(isTrialVer, 0, 1)
    
    rtn = ysk_EPA_VBA(nId, vInBkName, vInStName, r1, c1, r2, c2, _
        vOutBkName, vOutStName, ro, co, _
        g_aDialog.nYearBgn, g_aDialog.nMonth, g_aDialog.nTimeStyle, g_aDialog.dlgEpa.nMod, _
        forcIIf(g_aDialog.bGraph, 2, 1), forcIIf(g_aDialog.bColData, 1, 2), forcIIf(g_aDialog.bTitle, 1, 2))
    
    If rtn = -100 Then
        MsgBox "|fffd|\|fffd|t|fffd|g|fffd|E|fffd|F|fffd|A|fffd||fffd||fffd|s|fffd||fffd||fffd|R|fffd|s|fffd|[|fffd||202||302||141|A|fffd||fffd||fffd|s|fffd||fffd||fffd||142||fffd||fffd||702||fffd||fffd||fffd|B", vbCritical Or vbOKOnly
        doEPA_VBA = False
        Exit Function
    End If
    
'    rtn = ysk_EPA_VBA(vInBkName, vInStName, vInRowBgn, vInColBgn, _
'                      vInRowEnd, vInColEnd, vOutBkName, vOutStName, _
'                      vOutRow, vOutCol, vbgnYear, vbgnMonth, _
'                      vcircleFlg, vmodelFlg, 1, vdiretFlg, vdataFlg)
    
    Call Error_Display(rtn)
    
    doEPA_VBA = (rtn = 0)
End Function
                      
'|fffd|O|fffd||fffd||fffd|t
'Sep 2003, PYJ
'return row number used
Function EpaGraph(ByVal rgeDataBgn As Range, ByVal rgeOutBgn As Range, _
        ByVal nYSmpNum As Integer, ByVal nForcNum As Integer) As Integer
Attribute EpaGraph.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim rgeChart As Range, rgeCate As Range, rgeData As Range
    Dim rgeTmp As Range
    Dim nRtn As Integer
    Dim i As Long
    
    rgeOutBgn.Worksheet.Activate

'|fffd|d|fffd|o|fffd|`
'---TCSI + TC---
    Set rgeChart = rgeOutBgn.Range("A1:I15")
    Set rgeTmp = rgeDataBgn.Range("I1:I" & nYSmpNum + nForcNum + 1)
    For i = 1 To rgeTmp.Rows.Count
        rgeTmp(i, 1) = rgeDataBgn.Range("A1:A" & nYSmpNum + nForcNum + 1)(i, 1) & " " & rgeDataBgn.Range("B1:B" & nYSmpNum + nForcNum + 1)(i, 1)
    Next i
    
    nRtn = COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t(rgeChart, _
        rgeDataBgn.Range("I1:I" & nYSmpNum + 1), _
        Union(rgeDataBgn.Range("C1:C" & nYSmpNum + 1), rgeDataBgn.Range("E1:E" & nYSmpNum + 1)), _
        "|fffd|d|fffd|o|fffd|`|fffd|@", "")
'---S---
    Set rgeChart = rgeChart.Offset(nRtn + 1, 0)
    nRtn = COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t(rgeChart, _
        rgeDataBgn.Range("I1:I" & nYSmpNum + nForcNum + 1), _
        rgeDataBgn.Range("F1:F" & nYSmpNum + nForcNum + 1), _
        "|fffd|d|fffd|o|fffd|`|fffd|@", "")
'---I---
    Set rgeChart = rgeChart.Offset(nRtn + 1, 0)
    Call COMM_draw|fffd||710||fffd||fffd|O|fffd||fffd||fffd|t( _
        rgeChart, _
        rgeDataBgn.Range("I1:I" & nYSmpNum + 1), _
        rgeDataBgn.Range("G1:G" & nYSmpNum + 1), _
        "|fffd|d|fffd|o|fffd|`|fffd|@", "")
    EpaGraph = 47
End Function
'--- end of file ---
Attribute VB_Name = "frmAboutMe"
Attribute VB_Base = "0{27721D20-E9C1-440D-BF88-1076F436CF49}{81AA0854-57E0-4E5C-B1F8-95E00EC3CAA8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False




'=== BOF ===

Private Sub cmdOK_Click()
    frmAboutMe.Hide
End Sub

Private Sub Label14_Click()
    Dim Link As String
    Link = Label14.Caption
    On Error GoTo NoCanDo
    ActiveWorkbook.FollowHyperlink Address:=Link, NewWindow:=True
    Unload Me
    Exit Sub
NoCanDo:
    MsgBox "Cannot open " & Link
End Sub

'=== EOF===
Private Sub Label9_Click()

End Sub
Attribute VB_Name = "frmBasicInfo"
Attribute VB_Base = "0{D78B2B6C-3C02-43E8-A7CF-2F0E290252BD}{89A2C1FC-F554-4276-BE43-EBB3928037EE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Option Explicit
Private m_varselect As String
Private m_bvarselected As Boolean
Private m_bOK As Boolean

'Object variable to trigger application events
Private WithEvents XLApp As Excel.Application
Attribute XLApp.VB_VarHelpID = -1
#If VBA7 Then
    Dim mXLHwnd As LongPtr    'Excel's window handle
    Dim mhwndForm As LongPtr  'The userform's window handle
    Private Declare PtrSafe Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
    #If Win64 Then
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" Alias "SetWindowLongPtrA" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #Else
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #End If
    Private Declare PtrSafe Function SetForegroundWindow Lib "user32" (ByVal hwnd As LongPtr) As Long
#Else
    Dim mXLHwnd As Long    'Excel's window handle
    Dim mhwndForm As Long  'The userform's window handle
    Private Declare Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Private Declare Function SetWindowLongA Lib "user32" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
    Private Declare Function SetForegroundWindow Lib "user32" (ByVal hwnd As Long) As Long
#End If

Const GWL_HWNDPARENT As Long = -8

Public Property Get bOK() As Boolean
    bOK = m_bOK
End Property

Public Property Let bOK(ByVal vNewValue As Boolean)
    m_bOK = vNewValue
End Property

Private Sub cateSelect_Click()
    m_bvarselected = True
    If m_bvarselected Then
        m_varselect = GetVarSel_Frm(Me, "RgeVar", "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|", "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|", , m_varselect)
    End If
    RgeObj.SetFocus
    DoEvents
End Sub

Private Sub chkCateName_Click()
    RgeCateName.Enabled = chkCateName.Value
    If RgeCateName.Enabled Then
        RgeCateName.SetFocus
    End If
End Sub

Private Sub chkNum2Cate_Click()
    RgeNumCate.Enabled = chkNum2Cate.Value
    If RgeNumCate.Enabled Then
        RgeNumCate.SetFocus
    End If
End Sub

#If 0 Then  '11.12.2 LSQ cmt
Private Sub chkTimeLag_Click()
    RgeTimeLag.Enabled = chkTimeLag.Value
    If RgeTimeLag.Enabled Then
        RgeTimeLag.SetFocus
    End If
End Sub
#End If

Private Sub cmdCancel_Click()
    m_bOK = False
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    m_bOK = True
    Me.Hide
End Sub

Private Sub RefEdit1_BeforeDragOver(Cancel As Boolean, ByVal Data As MSForms.DataObject, ByVal x As stdole.OLE_XPOS_CONTAINER, ByVal y As stdole.OLE_YPOS_CONTAINER, ByVal DragState As MSForms.fmDragState, Effect As MSForms.fmDropEffect, ByVal Shift As Integer)

End Sub

Private Sub RgeVar_Change()
    If bRangeChanged_Frm(2, frmBasicInfo.RgeVar.Text) Then m_varselect = "0"
    m_bvarselected = False
End Sub

Public Property Get varselect() As String
    varselect = m_varselect
End Property

Public Property Let varselect(ByVal vNewValue As String)
    m_varselect = vNewValue
End Property

Public Property Get bvarselected() As Boolean
    bvarselected = m_bvarselected
End Property

Public Property Let bvarselected(ByVal vNewValue As Boolean)
    m_bvarselected = vNewValue
End Property

Private Sub UserForm_Activate()
    m_bOK = False
    RgeObj.SetFocus
End Sub

Private Sub UserForm_Initialize()
    If Val(Application.Version) >= 15 Then        'Only makes sense on Excel 2013 and up
        Set XLApp = Application
        mhwndForm = FindWindowA("ThunderDFrame", Caption)
    End If
End Sub

Private Sub XLApp_WindowActivate(ByVal Wb As Workbook, ByVal Wn As Window)
    If Val(Application.Version) >= 15 And mhwndForm <> 0 Then  'Basear o form na janela ativa do Excel.
        mXLHwnd = Application.hwnd    'Always get because in Excel 15 SDI each wb has its window with different handle.
        SetWindowLongA mhwndForm, GWL_HWNDPARENT, mXLHwnd
        SetForegroundWindow mhwndForm
    End If
End Sub

Private Sub XLApp_WorkbookBeforeClose(ByVal Wb As Workbook, Cancel As Boolean)
    SetWindowLongA mhwndForm, GWL_HWNDPARENT, 0&
End Sub
Attribute VB_Name = "frmExtSr1"
Attribute VB_Base = "0{62687BDA-3C62-41F9-A56B-4F290D762899}{BA9D8312-91A0-4E20-B1C0-C00393D88F90}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private m_varselect As String
Private m_bvarselected As Boolean
Private m_bOK As Boolean

'Object variable to trigger application events
Private WithEvents XLApp As Excel.Application
Attribute XLApp.VB_VarHelpID = -1
#If VBA7 Then
    Dim mXLHwnd As LongPtr    'Excel's window handle
    Dim mhwndForm As LongPtr  'The userform's window handle
    Private Declare PtrSafe Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
    #If Win64 Then
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" Alias "SetWindowLongPtrA" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #Else
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #End If
    Private Declare PtrSafe Function SetForegroundWindow Lib "user32" (ByVal hwnd As LongPtr) As Long
#Else
    Dim mXLHwnd As Long    'Excel's window handle
    Dim mhwndForm As Long  'The userform's window handle
    Private Declare Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Private Declare Function SetWindowLongA Lib "user32" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
    Private Declare Function SetForegroundWindow Lib "user32" (ByVal hwnd As Long) As Long
#End If

Const GWL_HWNDPARENT As Long = -8

Public Property Get bOK() As Boolean
    bOK = m_bOK
End Property

Public Property Let bOK(ByVal vNewValue As Boolean)
    m_bOK = vNewValue
End Property

Private Sub cateSelect_Click()
    m_bvarselected = True
    If m_bvarselected Then
        m_varselect = GetVarSel_Frm(Me, "RgeVar", "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|", "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|", , m_varselect)
    End If
    RgeObj.SetFocus
    DoEvents
End Sub

Private Sub chkCateName_Click()
    RgeCateName.Enabled = chkCateName.Value
    If RgeCateName.Enabled Then
        RgeCateName.SetFocus
    End If
End Sub

Private Sub chkNum2Cate_Click()
    RgeNumCate.Enabled = chkNum2Cate.Value
    If RgeNumCate.Enabled Then
        RgeNumCate.SetFocus
    End If
End Sub

Private Sub chkTimeLag_Click()
    RgeTimeLag.Enabled = chkTimeLag.Value
    If RgeTimeLag.Enabled Then
        RgeTimeLag.SetFocus
    End If
End Sub

Private Sub chkYsk_Click()
    RgeYskData.Enabled = chkYsk.Value
    If RgeYskData.Enabled Then
        RgeYskData.SetFocus
    End If
End Sub

Private Sub cmdCancel_Click()
    m_bOK = False
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    m_bOK = True
    Me.Hide
End Sub

Private Sub optExtraInfoNo_Click()

End Sub

Private Sub RgeVar_Change()
    If bRangeChanged_Frm(5, frmExtSr1.RgeVar.Text) Then m_varselect = "0"
    m_bvarselected = False
End Sub

Public Property Get varselect() As String
    varselect = m_varselect
End Property

Public Property Let varselect(ByVal vNewValue As String)
    m_varselect = vNewValue
End Property

Public Property Get bvarselected() As Boolean
    bvarselected = m_bvarselected
End Property

Public Property Let bvarselected(ByVal vNewValue As Boolean)
    m_bvarselected = vNewValue
End Property

Private Sub TextBox1_Change()

End Sub

Private Sub UserForm_Activate()
    m_bOK = False
    RgeObj.SetFocus
End Sub

Private Sub UserForm_Initialize()
    If Val(Application.Version) >= 15 Then        'Only makes sense on Excel 2013 and up
        Set XLApp = Application
        mhwndForm = FindWindowA("ThunderDFrame", Caption)
    End If
End Sub

Private Sub XLApp_WindowActivate(ByVal Wb As Workbook, ByVal Wn As Window)
    If Val(Application.Version) >= 15 And mhwndForm <> 0 Then  'Basear o form na janela ativa do Excel.
        mXLHwnd = Application.hwnd    'Always get because in Excel 15 SDI each wb has its window with different handle.
        SetWindowLongA mhwndForm, GWL_HWNDPARENT, mXLHwnd
        SetForegroundWindow mhwndForm
    End If
End Sub

Private Sub XLApp_WorkbookBeforeClose(ByVal Wb As Workbook, Cancel As Boolean)
    SetWindowLongA mhwndForm, GWL_HWNDPARENT, 0&
End Sub

Attribute VB_Name = "frmForecast"
Attribute VB_Base = "0{F2955EF1-970A-4D55-8A52-54FB3446B032}{2E99ED8B-45BB-429F-BD25-9141046F501F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private m_varselect As String
Private m_bvarselected As Boolean
Private m_bOK As Boolean

'Object variable to trigger application events
Private WithEvents XLApp As Excel.Application
Attribute XLApp.VB_VarHelpID = -1
#If VBA7 Then
    Dim mXLHwnd As LongPtr    'Excel's window handle
    Dim mhwndForm As LongPtr  'The userform's window handle
    Private Declare PtrSafe Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
    #If Win64 Then
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" Alias "SetWindowLongPtrA" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #Else
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #End If
    Private Declare PtrSafe Function SetForegroundWindow Lib "user32" (ByVal hwnd As LongPtr) As Long
#Else
    Dim mXLHwnd As Long    'Excel's window handle
    Dim mhwndForm As Long  'The userform's window handle
    Private Declare Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Private Declare Function SetWindowLongA Lib "user32" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
    Private Declare Function SetForegroundWindow Lib "user32" (ByVal hwnd As Long) As Long
#End If

Const GWL_HWNDPARENT As Long = -8

Public Property Get bOK() As Boolean
    bOK = m_bOK
End Property

Public Property Let bOK(ByVal vNewValue As Boolean)
    m_bOK = vNewValue
End Property

Private Sub cateSelect_Click()
    m_bvarselected = True
    If m_bvarselected Then
        m_varselect = GetVarSel_Frm(Me, "RgeVar", "|fffd||d3dc||fffd||fffd||fffd||fffd||3d0||fffd|", "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd||3d0||fffd|", , m_varselect)
    End If
    RgeObj.SetFocus
    DoEvents
End Sub

Private Sub chkCateName_Click()
    RgeCateName.Enabled = chkCateName.Value
    If RgeCateName.Enabled Then
        RgeCateName.SetFocus
    End If
End Sub

Private Sub chkNum2Cate_Click()
    RgeNumCate.Enabled = chkNum2Cate.Value
    If RgeNumCate.Enabled Then
        RgeNumCate.SetFocus
    End If
End Sub

Private Sub chkTimeLag_Click()
    RgeTimeLag.Enabled = chkTimeLag.Value
    If RgeTimeLag.Enabled Then
        RgeTimeLag.SetFocus
    End If
End Sub

Private Sub chkYsk_Click()
    RgeYskData.Enabled = chkYsk.Value
    If RgeYskData.Enabled Then
        RgeYskData.SetFocus
    End If
End Sub

Private Sub cmdCancel_Click()
    m_bOK = False
    Me.Hide
End Sub

Private Sub cmdOK_Click()
    m_bOK = True
    Me.Hide
End Sub

Private Sub RgeVar_Change()
    If bRangeChanged_Frm(6, frmForecast.RgeVar.Text) Then m_varselect = "0"
    m_bvarselected = False
End Sub

Public Property Get varselect() As String
    varselect = m_varselect
End Property

Public Property Let varselect(ByVal vNewValue As String)
    m_varselect = vNewValue
End Property

Public Property Get bvarselected() As Boolean
    bvarselected = m_bvarselected
End Property

Public Property Let bvarselected(ByVal vNewValue As Boolean)
    m_bvarselected = vNewValue
End Property

Private Sub TextBox1_Change()

End Sub

Private Sub UserForm_Activate()
    m_bOK = False
    RgeObj.SetFocus
End Sub

Private Sub UserForm_Initialize()
    If Val(Application.Version) >= 15 Then        'Only makes sense on Excel 2013 and up
        Set XLApp = Application
        mhwndForm = FindWindowA("ThunderDFrame", Caption)
    End If
End Sub

Private Sub XLApp_WindowActivate(ByVal Wb As Workbook, ByVal Wn As Window)
    If Val(Application.Version) >= 15 And mhwndForm <> 0 Then  'Basear o form na janela ativa do Excel.
        mXLHwnd = Application.hwnd    'Always get because in Excel 15 SDI each wb has its window with different handle.
        SetWindowLongA mhwndForm, GWL_HWNDPARENT, mXLHwnd
        SetForegroundWindow mhwndForm
    End If
End Sub

Private Sub XLApp_WorkbookBeforeClose(ByVal Wb As Workbook, Cancel As Boolean)
    SetWindowLongA mhwndForm, GWL_HWNDPARENT, 0&
End Sub


Attribute VB_Name = "frmVarSel"
Attribute VB_Base = "0{12AE540D-EEDE-487B-BACE-59055AFD72F9}{7050D94E-7563-4C6A-835D-8A528DDFCE92}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'=======================================================
' Variable Selection
'
' 2008.06 WZH
'=======================================================
Option Explicit

Private m_Variables As String
Private m_Dict
Private m_DictUnsel
Private m_bIsOK As Boolean
Private m_VarList() As Long


'Object variable to trigger application events
Private WithEvents XLApp As Excel.Application
Attribute XLApp.VB_VarHelpID = -1
#If VBA7 Then
    Dim mXLHwnd As LongPtr    'Excel's window handle
    Dim mhwndForm As LongPtr  'The userform's window handle
    Private Declare PtrSafe Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As LongPtr
    #If Win64 Then
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" Alias "SetWindowLongPtrA" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #Else
        Private Declare PtrSafe Function SetWindowLongA Lib "user32" (ByVal hwnd As LongPtr, ByVal nIndex As Long, ByVal dwNewLong As LongPtr) As LongPtr
    #End If
    Private Declare PtrSafe Function SetForegroundWindow Lib "user32" (ByVal hwnd As LongPtr) As Long
#Else
    Dim mXLHwnd As Long    'Excel's window handle
    Dim mhwndForm As Long  'The userform's window handle
    Private Declare Function FindWindowA Lib "user32" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
    Private Declare Function SetWindowLongA Lib "user32" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
    Private Declare Function SetForegroundWindow Lib "user32" (ByVal hwnd As Long) As Long
#End If

Const GWL_HWNDPARENT As Long = -8

Private Function GetListInx(ByVal strText As String, lb As MSForms.ListBox) As Long
    Dim i As Long, loc As Long
    Dim tmpInx As Long, nInx As Long
    If lb.ListCount = 0 Then
        GetListInx = 0
        Exit Function
    End If
    nInx = CInt(m_Dict(strText))
    loc = lb.ListCount
    For i = 0 To lb.ListCount - 1
        tmpInx = CInt(m_Dict(lb.List(i)))
        If nInx < tmpInx Then
            loc = i
            Exit For
        End If
    Next i
    GetListInx = loc
End Function

Public Property Get bIsOk() As Boolean
    bIsOk = m_bIsOK
End Property

Public Property Get VarSelected() As String
    Dim i As Long, j As Long
    j = 0
    For i = 0 To lbSelected.ListCount - 1
        'm_VarList(m_Dict(lbSelected.List(i))) = i
        m_VarList(j) = m_Dict(lbSelected.List(i))
        j = j + 1
    Next i
    For i = 0 To lbUnselected.ListCount - 1
        'm_VarList(m_Dict(lbUnselected.List(i))) = lbSelected.ListCount + i
        m_VarList(j) = m_Dict(lbUnselected.List(i))
        j = j + 1
    Next i
    VarSelected = lbSelected.ListCount
    For i = LBound(m_VarList) To UBound(m_VarList)
        VarSelected = VarSelected & "," & m_VarList(i)
    Next i
End Property

Public Property Let Variables(ByVal vNewValue As String)
    Dim i As Long
    Dim varList As Variant
    m_bIsOK = False
    m_Variables = vNewValue
    varList = Split(m_Variables, ",")
    lbSelected.Clear
    lbUnselected.Clear
    Set m_Dict = Nothing
    Set m_Dict = New Collection
    ReDim m_VarList(LBound(varList) To UBound(varList))
    For i = LBound(varList) To UBound(varList)
        'lbSelected.AddItem varList(i)
        'm_Dict.Add varList(i), i
        m_Dict.Add i, varList(i)
        m_VarList(i) = i
    Next i
End Property

Public Sub InitVarSelected(ByVal strVarSelected As String)
    Dim var As Variant
    Dim n As Long, sn As Long, un As Long, i As Long
    Dim vs As Variant
    var = Split(m_Variables, ",")
    lbSelected.Clear
    lbUnselected.Clear
    If strVarSelected = "0" Then
        For i = LBound(var) To UBound(var)
            lbSelected.AddItem var(i)
        Next i
    Else
        vs = Split(strVarSelected, ",")
        n = UBound(vs)
        sn = Val(vs(0))
        un = n - sn
        For i = 1 To sn
            lbSelected.AddItem var(vs(i))
        Next i
        For i = 1 To un
            lbUnselected.AddItem var(vs(i + sn))
        Next i
    End If
End Sub

Private Sub btnAdd_Click()
    Dim i As Long
    If lbUnselected.ListCount = 0 Then Exit Sub
    For i = lbUnselected.ListCount - 1 To 0 Step -1
        If lbUnselected.Selected(i) Then
            lbSelected.AddItem lbUnselected.List(i), GetListInx(lbUnselected.List(i), lbSelected)
            lbUnselected.RemoveItem i
        End If
    Next i
End Sub

Private Sub btnCancel_Click()
    m_bIsOK = False
    Me.Hide
End Sub

Private Sub btnOK_Click()
    m_bIsOK = True
    Me.Hide
End Sub

Private Sub UserForm_Initialize()
    Set m_Dict = New Collection 'CreateObject("Scripting.Dictionary")
    Set m_DictUnsel = New Collection 'CreateObject("Scripting.Dictionary")
    m_bIsOK = False
    
    '11.7.5 LSQ (static text NG in MAC)
    btnAdd.Caption = "|fffd||fffd|"
    btnRemove.Caption = "|fffd||fffd|"
    
    If Val(Application.Version) >= 15 Then        'Only makes sense on Excel 2013 and up
        Set XLApp = Application
        mhwndForm = FindWindowA("ThunderDFrame", Caption)
    End If
End Sub

Private Sub UserForm_Terminate()
    Set m_Dict = Nothing
    Set m_DictUnsel = Nothing
    m_bIsOK = False
End Sub

Private Sub btnRemove_Click()
    Dim i As Long
    Dim strText As String
    If lbSelected.ListCount = 0 Then Exit Sub
    For i = lbSelected.ListCount - 1 To 0 Step -1
        If lbSelected.Selected(i) Then
            strText = lbSelected.List(i)
            lbUnselected.AddItem strText, GetListInx(strText, lbUnselected)
            lbSelected.RemoveItem i
        End If
    Next i
End Sub

Private Sub XLApp_WindowActivate(ByVal Wb As Workbook, ByVal Wn As Window)
    If Val(Application.Version) >= 15 And mhwndForm <> 0 Then  'Basear o form na janela ativa do Excel.
        mXLHwnd = Application.hwnd    'Always get because in Excel 15 SDI each wb has its window with different handle.
        SetWindowLongA mhwndForm, GWL_HWNDPARENT, mXLHwnd
        SetForegroundWindow mhwndForm
    End If
End Sub

Private Sub XLApp_WorkbookBeforeClose(ByVal Wb As Workbook, Cancel As Boolean)
    SetWindowLongA mhwndForm, GWL_HWNDPARENT, 0&
End Sub
Attribute VB_Name = "helpMdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|vVer2.5 : |fffd|w|fffd||fffd||fffd|v
'
' |fffd||c42c| : 2007.1 LSQ
'
'=================================================
Option Explicit
Option Private Module

Sub fHelp_ISTATYSK()
    Dim textMsg As String
    
    textMsg = GVerMsg
    
    If UCase(Left(textMsg, 5)) = "DUMMY" Then   'default = blank
        textMsg = ""
    End If

    frmAboutMe.lblVerMsg.Caption = textMsg
    frmAboutMe.Show

End Sub

'***********************
Function sTAHEN_Path() As String
    sTAHEN_Path = getPathName() & "\"
End Function

Function iFile_Check(sFileName As String) As Integer
'*************************
'|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||311||fffd||fffd||742||12c82||5c2||fffd|
'|fffd||fffd||fffd||742||fffd||fffd||fffd||182||fffd|=1
'|fffd||fffd||fffd||742||fffd||fffd||202||fffd||fffd||182||fffd|=0
'*************************
    Dim iRet
    Dim vTemp As Variant
    iRet = 0
    On Error Resume Next
    vTemp = FileDateTime(sFileName)
    If (vTemp = "") Then '|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||202||fffd||fffd||fffd||fffd||fffd||fffd||182||fffd|
        iRet = 0
    Else
        If (vTemp <> "") Then
            iRet = 1
        End If
    End If
    iFile_Check = iRet
End Function

'
Sub helpComm()
    Application.Help getPathName + "\" + "sss_forc.hlp", "1"
End Sub
'
Sub setHelpToDlgBtn()
    Exit Sub
    
    '--- not used "Help Button" ---
    ThisWorkbook.DialogSheets("|fffd||fffd||fffd||595||fffd||fffd||fffd|Dlg").Buttons("btnHelp").OnAction = "helpComm"
    ThisWorkbook.DialogSheets("|fffd|U|fffd|z|fffd|}1Dlg").Buttons("btnHelp").OnAction = "helpComm"
    ThisWorkbook.DialogSheets("|fffd|U|fffd|z|fffd|}2Dlg").Buttons("btnHelp").OnAction = "helpComm"
    ThisWorkbook.DialogSheets("|fffd||fffd||fffd|d|fffd||693||fffd|Dlg").Buttons("btnHelp").OnAction = "helpComm"
    ThisWorkbook.DialogSheets("EPADlg").Buttons("btnHelp").OnAction = "helpComm"
    ThisWorkbook.DialogSheets("|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|Dlg").Buttons("btnHelp").OnAction = "helpComm"
    ThisWorkbook.DialogSheets("|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|Dlg").Buttons("btnHelp").OnAction = "helpComm"
    ThisWorkbook.DialogSheets("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|Dlg").Buttons("btnHelp").OnAction = "helpComm"
    
End Sub

Sub fOnlineManual_iSTAT_ISTATYSK()
    Call Comm_LoadPdf("MIST_HLP.PDF", "|fffd|I|fffd||fffd||fffd||fffd||fffd|C|fffd||fffd||fffd|w|fffd||fffd||fffd|v|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|")
End Sub

Sub fExplain_iSTAT_ISTATYSK()
    Call Comm_LoadPdf("MIST_DOC.PDF", "|fffd||fffd||fffd||fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||fffd||fffd||fffd||fffd||82||fffd||fffd||fffd||702||fffd||fffd||fffd|")
End Sub

Private Sub Comm_LoadPdf(ByVal fName As String, ByVal errMsg As String)
    Dim sPDF_Path As String
    Dim sTemp As String
    Dim vRet As Variant
    Dim iLen As Integer
    Dim sTemp2 As String
    Dim sTemp1 As String
    Dim iRet As Integer
    
    sTemp = ""
    sTemp2 = sTAHEN_Path()
    iRet = iExt_App_Search(".pdf", 1, sTemp)
    If (sTemp = "") Then
        MsgBox "PDF|fffd|{|fffd||fffd||fffd|p|fffd|\|fffd|t|fffd|g|fffd||fffd||fffd|C|fffd||fffd||fffd|X|fffd|g|fffd|[|fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||702||fffd||fffd||fffd|"
        Exit Sub
    Else
        sPDF_Path = sTemp
        sTemp1 = sTemp2 & fName
    '---------------------------------------------------------------------
        iRet = iFile_Check(sTemp1)
        If (iRet = 1) Then
           ' -----2007/09/03 |fffd|\|fffd|t|fffd|g|fffd||302||fffd||fffd||fffd|p|fffd|X|fffd||fffd||fffd||243|X|fffd|y|fffd|[|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd||fffd||102||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|s|fffd||fffd||fffd||fffd|--------
           'sTemp = sPDF_Path & " " & sTemp2 & fName
            sTemp = sPDF_Path & " " & Chr(34) & sTemp2 & fName & Chr(34)
           '-----------------------------------------------------------------------------
            vRet = Shell(sTemp, 4)
        Else
            MsgBox errMsg, vbExclamation + vbOKOnly, GName_Prog
        End If
    End If
End Sub

'=== EOF ===

Attribute VB_Name = "mdlCallMe"
'=======================================================
' Variable Selection
'
' 2008.06 WZH
'=======================================================
Option Explicit

Function getDefaultAddress(ByVal flgType As Long) As String
    Dim tmpRge As Range
    Set tmpRge = SbkThis.Worksheets("TempVarSelect").Range("B2")
    If flgType > 0 Then
        getDefaultAddress = tmpRge(flgType, 2)
    Else
        getDefaultAddress = ""
    End If
End Function

Function getDefaultVarSelect(ByVal flgType As Long) As String
    Dim tmpRge As Range
    Set tmpRge = SbkThis.Worksheets("TempVarSelect").Range("B2")
    If flgType > 0 Then
        getDefaultVarSelect = tmpRge(flgType, 3)
    Else
        getDefaultVarSelect = ""
    End If
    If getDefaultVarSelect = vbNullString Then getDefaultVarSelect = "0"
End Function

Sub setDefaultAddress(ByVal flgType As Long, ByVal strVarAddr As String)
    Dim tmpRge As Range
    Set tmpRge = SbkThis.Worksheets("TempVarSelect").Range("B2")
    If flgType > 0 Then
        tmpRge(flgType, 2) = strVarAddr
    End If
End Sub

Sub setDefaultVarSelect(ByVal flgType As Long, ByVal strVarSelect As String)
    Dim tmpRge As Range
    Set tmpRge = SbkThis.Worksheets("TempVarSelect").Range("B2")
    If flgType > 0 Then
        tmpRge(flgType, 3) = strVarSelect
    End If
End Sub

Function getCurrentAddress(ByVal dlg As DialogSheet, ByVal strVarRge As String) As String
    Dim RgeVar As Range
    On Error Resume Next
    Set RgeVar = Range(dlg.EditBoxes(strVarRge).Text)
    If Err.Number <> 0 Then
        On Error GoTo 0
        getCurrentAddress = ""
    Else
        getCurrentAddress = "[" & RgeVar.Worksheet.Parent.Name & "]" & RgeVar.Worksheet.Name & "!" & RgeVar.AddressLocal
    End If
    On Error GoTo 0
End Function

Function bRangeChanged(ByVal flgType As Long, ByVal dlg As DialogSheet, ByVal strVarRge As String) As Boolean
    Dim oldAddress As String
    oldAddress = getDefaultAddress(flgType)
    bRangeChanged = Not (oldAddress = getCurrentAddress(dlg, strVarRge))
End Function

Function getCurrentAddress_Frm(ByVal strRangeAddress As String) As String
    Dim RgeVar As Range
    On Error Resume Next
    Set RgeVar = Range(strRangeAddress)
    If Err.Number <> 0 Then
        On Error GoTo 0
        getCurrentAddress_Frm = ""
    Else
        getCurrentAddress_Frm = "[" & RgeVar.Worksheet.Parent.Name & "]" & RgeVar.Worksheet.Name & "!" & RgeVar.AddressLocal
    End If
    On Error GoTo 0
End Function

Function bRangeChanged_Frm(ByVal flgType As Long, ByVal strRangeAddress As String) As Boolean
    Dim oldAddress As String
    oldAddress = getDefaultAddress(flgType)
    bRangeChanged_Frm = Not (oldAddress = getCurrentAddress_Frm(strRangeAddress))
End Function

'Set a dictionary for parameters string whick is divided by '&', e.g. 'GrpType=2&FontSize=10'
Function SetDict(ByVal strpara As String) As Object
    Dim arys() As String, subarys() As String
    Dim s As String
    Dim i As Integer, j As Integer
    Dim dict As Collection
    Set SetDict = Nothing
    On Error Resume Next
    arys = Split(strpara, "&")
    Set dict = New Collection
    For i = 0 To UBound(arys)
        subarys = Split(arys(i), "=")
        dict.Add subarys(1), subarys(0)
    Next i
    Set SetDict = dict
ExitIt:
    Set dict = Nothing
    On Error GoTo 0
End Function

Function varselect(ByVal strVarList As String, Optional ByVal strSelected As String = "0") As String
    Dim rtnStr As String
    Application.ScreenUpdating = True
    If Trim(strVarList) = vbNullString Then
        varselect = "ERROR"
        Exit Function
    End If
    frmVarSel.Variables = strVarList
    frmVarSel.InitVarSelected strSelected
    frmVarSel.Show
    If frmVarSel.bIsOk Then
        rtnStr = frmVarSel.VarSelected
    Else
        rtnStr = strSelected '"0"
    End If
    DoEvents
    Unload frmVarSel
    varselect = rtnStr
End Function

Function GetVarSel(ByVal dlg As DialogSheet, ByVal strVarRge As String, _
                                 Optional ByVal strlabel1 As String = "|fffd||d3dc||fffd||fffd||fffd||fffd|A|fffd|C|fffd|e|fffd||fffd|", _
                                 Optional ByVal strLabel2 As String = "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd|A|fffd|C|fffd|e|fffd||fffd|", _
                                 Optional ByVal strSelected As String = "0") As String
    Dim i As Integer
    Dim rtn As Integer
    Dim RgeVar As Range
    Dim valvar As Variant
    Dim strVarSelect As String
    Dim saveLabel1 As String, saveLabel2 As String
    strVarSelect = vbNullString
    On Error GoTo err_handler
    If Trim(strSelected) = vbNullString Then
        strSelected = "0"
    End If
    saveLabel1 = frmVarSel.Label1.Caption
    saveLabel2 = frmVarSel.Label2.Caption
    frmVarSel.Label1.Caption = strlabel1
    frmVarSel.Label2.Caption = strLabel2
    Set RgeVar = Range(dlg.EditBoxes(strVarRge).Text)
    valvar = RgeVar.Value
    For i = 1 To RgeVar.Columns.Count
        strVarSelect = strVarSelect & "," & valvar(1, i)
    Next i
    strVarSelect = varselect(Mid(strVarSelect, 2), strSelected)
exit_function:
    frmVarSel.Label1.Caption = saveLabel1
    frmVarSel.Label2.Caption = saveLabel2
    GetVarSel = strVarSelect
    On Error GoTo 0
    Exit Function
err_handler:
    strVarSelect = "0"
    Resume exit_function
End Function

Function GetVarSel_Frm(ByVal dlg As UserForm, ByVal strVarRge As String, _
                                 Optional ByVal strlabel1 As String = "|fffd||d3dc||fffd||fffd||fffd||fffd|A|fffd|C|fffd|e|fffd||fffd|", _
                                 Optional ByVal strLabel2 As String = "|fffd|I|fffd||fffd||fffd||fffd||fffd||a0bd||fffd|A|fffd|C|fffd|e|fffd||fffd|", _
                                 Optional ByVal bFirstColTitle As Boolean = False, _
                                 Optional ByVal strSelected As String = "0") As String
    Dim i As Long
    Dim rtn As Integer
    Dim ItemNum As Long, smpNum As Long
    Dim RgeVar As Range
    Dim valvar As Variant
    Dim strVarSelect As String
    Dim saveLabel1 As String, saveLabel2 As String
    strVarSelect = vbNullString
    On Error GoTo err_handler
    If Trim(strSelected) = vbNullString Then
        strSelected = "0"
    End If
    saveLabel1 = frmVarSel.Label1.Caption
    saveLabel2 = frmVarSel.Label2.Caption
    frmVarSel.Label1.Caption = strlabel1
    frmVarSel.Label2.Caption = strLabel2
    Set RgeVar = Range(dlg.Controls(strVarRge).Text)
    ItemNum = RgeVar.Columns.Count
    smpNum = RgeVar.Rows.Count
    If bFirstColTitle Then
        ItemNum = ItemNum - 1
        Set RgeVar = RgeVar.Range("B1").Resize(smpNum, ItemNum)
    End If
    valvar = RgeVar.Value
    For i = 1 To RgeVar.Columns.Count
        strVarSelect = strVarSelect & "," & valvar(1, i)
    Next i
    strVarSelect = varselect(Mid(strVarSelect, 2), strSelected)
exit_function:
    frmVarSel.Label1.Caption = saveLabel1
    frmVarSel.Label2.Caption = saveLabel2
    GetVarSel_Frm = strVarSelect
    On Error GoTo 0
    Exit Function
err_handler:
    strVarSelect = "0"
    Resume exit_function
End Function

Function nu_toXlRCstr(inputFormula As String) As String
    On Error Resume Next
    
    nu_toXlRCstr = Application.ConvertFormula( _
                Formula:=inputFormula, _
                fromReferenceStyle:=xlA1, _
                toReferenceStyle:=xlR1C1)
    
    If Err.Number <> 0 Then
        nu_toXlRCstr = inputFormula
        Err.Clear
    End If
    
    On Error GoTo 0
End Function

Function nu_toXlA1str(inputFormula As String) As String
    On Error Resume Next
    
    nu_toXlA1str = Application.ConvertFormula( _
                Formula:=inputFormula, _
                fromReferenceStyle:=xlR1C1, _
                toReferenceStyle:=xlA1)
    
    If Err.Number <> 0 Then
        nu_toXlA1str = inputFormula
        Err.Clear
    End If
    
    On Error GoTo 0
End Function

Function VarRows(ByVal strData As String, ByVal strCriteria As String) As Integer
    Dim rngData As Range, rngCriteria As Range
    Dim rtnRows As Integer
    Set rngData = Range(toXlA1str(strData))
    Set rngCriteria = Range(toXlA1str(strCriteria))
    rngData.AdvancedFilter Action:=xlFilterInPlace, criteriarange:=rngCriteria, unique:=True
    rtnRows = rngData.Columns(2).SpecialCells(xlCellTypeVisible).Count - 1
    rngData.Worksheet.ShowAllData
    VarRows = rtnRows
End Function

Function ArrangeXRange(ByVal xRange As Range, ByVal varselect As String) As Range
    Dim ItemNum As Long, smpNum As Long, i As Long
    Dim tmpRge As Range
    Dim stObj As Worksheet
    Dim v As Variant
    Set tmpRge = xRange.Range("A1")
    Set stObj = xRange.Worksheet
    If varselect <> "0" Then
        v = Split(varselect, ",")
        ItemNum = v(0)
        smpNum = xRange.Rows.Count
        For i = 1 To ItemNum
            tmpRge.Range(stObj.Cells(1, i), stObj.Cells(smpNum, i)) = xRange.Columns(Val(v(i)) + 1).Value
        Next i
        Set ArrangeXRange = tmpRge.Resize(smpNum, ItemNum)
    Else
        Set ArrangeXRange = xRange
    End If
End Function
'===== EOF =====
Attribute VB_Name = "mdlCommon"
'=======================================================
Option Private Module
Option Explicit

Private Function CollectionSort(ByRef oCollection As Collection, Optional bSortAscending As Boolean = True) As Long
    Dim lSort1 As Long, lSort2 As Long
    Dim vTempItem1 As Variant, vTempItem2 As Variant, bSwap As Boolean
    
    On Error GoTo ErrFailed
    For lSort1 = 1 To oCollection.Count - 1
        For lSort2 = lSort1 + 1 To oCollection.Count
            If bSortAscending Then
                If oCollection(lSort1) > oCollection(lSort2) Then
                    bSwap = True
                Else
                    bSwap = False
                End If
            Else
                If oCollection(lSort1) < oCollection(lSort2) Then
                    bSwap = True
                Else
                    bSwap = False
                End If
            End If
            If bSwap Then
                'Store the items
                If VarType(oCollection(lSort1)) = vbObject Then
                    Set vTempItem1 = oCollection(lSort1)
                Else
                    vTempItem1 = oCollection(lSort1)
                End If
                
                If VarType(oCollection(lSort2)) = vbObject Then
                    Set vTempItem2 = oCollection(lSort2)
                Else
                    vTempItem2 = oCollection(lSort2)
                End If
                
                'Swap the items over
                oCollection.Add vTempItem1, , lSort2
                oCollection.Add vTempItem2, , lSort1
                'Delete the original items
                oCollection.Remove lSort1 + 1
                oCollection.Remove lSort2 + 1
            End If
        Next
    Next
    Exit Function

ErrFailed:
    CollectionSort = Err.Number
    On Error GoTo 0
End Function

Function Remove0Cate(ByVal RgeVarKind As String, rgeDataIn As String, rgeCateIn As String, ByVal bStop_n0 As Boolean, Optional ByRef rtnVal As Variant, Optional ByRef NewCates As Variant) As Integer
    Dim i As Long, j As Long, k As Long
    Dim ItmNum As Long, smpNum As Long, CateNum As Long
    Dim strCate As String
    Dim rgeData As Range, rgeCate As Range, rgeKind As Range
    Dim varData As Variant, Cate As Variant
    Dim cateCol As Collection
    Dim tmpstr As String
    On Error Resume Next
    Set rgeData = Range(toXlA1str(rgeDataIn))
    Set rgeCate = Range(toXlA1str(rgeCateIn))
    Set rgeKind = Range(toXlA1str(RgeVarKind))
    
    varData = rgeData.Value
    Cate = rgeCate.Value
    ItmNum = rgeData.Columns.Count
    smpNum = rgeData.Rows.Count - 1
    CateNum = rgeCate.Rows.Count
    For i = 1 To ItmNum
        If rgeKind(i, 1) > 0 Then
            Set cateCol = New Collection
            For j = 1 To smpNum
                strCate = CStr(varData(j + 1, i))
                If cateCol.Item(strCate) = 0 Then
                    cateCol.Add varData(j + 1, i), strCate
                End If
            Next j
            CollectionSort cateCol, True
            For j = 1 To smpNum
                strCate = CStr(varData(j + 1, i))
                For k = 1 To cateCol.Count
                    If varData(j + 1, i) = cateCol(k) Then
                        varData(j + 1, i) = k
                        Exit For
                    End If
                Next k
            Next j
            If CateNum >= cateCol.Count Then
                For k = 1 To cateCol.Count
                    Cate(k, i) = Cate(cateCol(k), i)
                Next k
            End If
            If Not IsMissing(rtnVal) Then
                rtnVal(i) = cateCol.Count
            End If
            If Not IsMissing(NewCates) Then
                tmpstr = ""
                For k = 1 To cateCol.Count
                    tmpstr = tmpstr & "," & cateCol(k)
                Next k
                NewCates(i) = Mid(tmpstr, 2)
            End If
            Set cateCol = Nothing
        End If
    Next i
    rgeData.Value = varData
    rgeCate.Value = Cate
    Set cateCol = Nothing
    Remove0Cate = 0
    On Error GoTo 0
End Function

Sub SetRangeBorder(ByVal rge As Range, _
                    ByVal leftWgt As XlBorderWeight, _
                    ByVal topWgt As XlBorderWeight, _
                    ByVal rightWgt As XlBorderWeight, _
                    ByVal bottomWgt As XlBorderWeight, _
                    Optional ByVal insideV As XlBorderWeight = xlNone, _
                    Optional ByVal insideH As XlBorderWeight = xlNone)
                                    
    rge.Borders(xlDiagonalDown).LineStyle = xlNone
    rge.Borders(xlDiagonalUp).LineStyle = xlNone
    With rge.Borders(xlEdgeLeft)
        If leftWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = leftWgt
            .ColorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlEdgeTop)
        If topWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = topWgt
            .ColorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlEdgeBottom)
        If bottomWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = bottomWgt
            .ColorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlEdgeRight)
        If rightWgt <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = rightWgt
            .ColorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlInsideVertical)
        If insideV <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = insideV
            .ColorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
    With rge.Borders(xlInsideHorizontal)
        If insideH <> xlNone Then
            .LineStyle = xlContinuous
            .Weight = insideH
            .ColorIndex = 1
        Else
            .LineStyle = xlNone
        End If
    End With
End Sub
'=== EOF ===
Attribute VB_Name = "mdlVbaGrp"
'=======================================================
' Common interface for getting graphic data from C
'
' 2007.02 WZH
'=======================================================
Option Explicit

Private Const BUF_SIZE As Integer = 256
Public Const maxGrpNum As Integer = 255

Type VBAGRAPH
    no As Long
    type As Long                    'Graphic type based on each method; 0 is for no graphic
    sheetName As String             'worksheet name of data and output; must set
    grpData As String               'graphic data source              ; must set
    grpOut As String                'graphic output range             ; must set
    grpPara As String               'parameters for drawing a graphic, the division is '&'
End Type

'change a string returned by C to a basic string(BSTR)
Private Function CtoBSTR(ByVal strAnsi As String) As String
    Dim tmpstr As String
    On Error Resume Next
    tmpstr = StrConv(Trim(strAnsi), vbUnicode)
    If tmpstr <> vbNullString Then
        tmpstr = (Mid(tmpstr, 1, InStr(1, tmpstr, Chr(0)) - 1))
    End If
    CtoBSTR = IIf(Err.Number <> 0, vbNullString, tmpstr)
    On Error GoTo 0
End Function

'initialize graphic array
Function InitGrpAry(grp() As VBAGRAPH) As Boolean
    Dim dimen As Long
    Dim i As Long
    On Error Resume Next
    dimen = UBound(grp)
    For i = 1 To dimen
        grp(i).no = 0
        grp(i).type = 0
        grp(i).sheetName = Space(BUF_SIZE)
        grp(i).grpData = Space(BUF_SIZE)
        grp(i).grpOut = Space(BUF_SIZE)
        grp(i).grpPara = Space(BUF_SIZE)
    Next i
    InitGrpAry = IIf(Err.Number = 0, True, False)
    On Error GoTo 0
End Function

'convert all C strings to Basic strings
Function ConvToBSTR(grp As VBAGRAPH) As Boolean
    On Error Resume Next
    grp.sheetName = CtoBSTR(grp.sheetName)
    grp.grpData = CtoBSTR(grp.grpData)
    grp.grpOut = CtoBSTR(grp.grpOut)
    grp.grpPara = CtoBSTR(grp.grpPara)
    ConvToBSTR = grp.sheetName <> vbNullString _
             And grp.grpData <> vbNullString _
             And grp.grpOut <> vbNullString
    On Error GoTo 0
End Function

'=== EOF ===
Attribute VB_Name = "menuBarMdl"
'===================================================
' SSS|fffd|\|fffd||fffd|Ver2.5 : |fffd||fffd||fffd|j|fffd||fffd||fffd|[ System (CommandBar)
'
' 2007.1.13 LSQ
'===================================================
Option Explicit
Option Private Module

Public Const BARNAME_ISTATYSK As String = GName_Prog
Public Const BARNAME_ISTATYSK_ICON As String = "MYSK1_ICONBAR"
'NOTE : ICONBAR not yet used; 07.1.13 LSQ (Just same as in TKVer6)

Sub make_MenuBar()
    Dim menuBar As CommandBar           'menu bar
    Dim popMenu As CommandBarControl    'menu
    Dim submn As CommandBarControl      'sub menu
    Dim submnA As CommandBarControl     'sub menu
    Dim iconMenuName As String

    'delete old one if any
    Call delete_MenuBar(BARNAME_ISTATYSK)

    Set menuBar = CommandBars.Add(Name:=BARNAME_ISTATYSK)  ', Temporary:=True', MenuBar:=True)
    menuBar.Position = msoBarTop
    
    '---|fffd||fffd||fffd||595||fffd||fffd||fffd|---
    Set popMenu = makePopMenu(menuBar, "|fffd||fffd|{|fffd||fffd||fffd|", "|fffd||fffd|{|fffd||fffd||341|E|fffd||fffd||fffd||590|}")
    popMenu.BeginGroup = True
    Call addItemToPopMenu(popMenu, "IS_BASICINFO_VBA", "|fffd||fffd|{|fffd||fffd||fffd|v|fffd||281|E|fffd||fffd||fffd||58c|W|fffd||fffd|")
    Call addItemToPopMenu(popMenu, "IS_SokanZu1_VBA", "|fffd||fffd||fffd||590|}")
    Call addItemToPopMenu(popMenu, "IS_SknTimeLag_VBA", "|fffd|^|fffd|C|fffd||fffd||fffd||fffd||fffd|O|fffd||fffd||fffd||fffd|")   '11.12.2 LSQ added
    '
    'Call addItemToPopMenu(popMenu, "SokanZu2_VBA", "|fffd|U|fffd|z|fffd|}(|fffd|_|fffd|O|fffd||fffd||fffd|t)")
    '---|fffd||693||fffd||fffd||fffd||fffd||3d5||fffd||fffd||fffd|---
    Set popMenu = makePopMenu(menuBar, "TCSI|fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|d|fffd||693||fffd||fffd||fffd||fffd||3d6|@|fffd|EEPA|fffd|@")
    popMenu.BeginGroup = True
    Call addItemToPopMenu(popMenu, "IS_KJidou_VBA", "|fffd||fffd||fffd|d|fffd||693||fffd||fffd||fffd||fffd||3d6|@")
    Call addItemToPopMenu(popMenu, "IS_MonthlyModel_VBA", "|fffd||fffd||fffd||295||fffd||fffd||3d6|@")
    Call addItemToPopMenu(popMenu, "IS_EPA_VBA", "EPA|fffd|@")
    '---|fffd||fffd|A|fffd||fffd||fffd||fffd|---
    Set popMenu = makePopMenu(menuBar, "|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd|X|fffd||fffd||fffd||fffd||fffd||fffd|")
    popMenu.BeginGroup = True
    Call addItemToPopMenu(popMenu, "IS_Keikou_VBA", "|fffd|g|fffd||fffd||fffd||fffd||fffd|h|fffd|\|fffd||fffd|")
    '---|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|---
    Set popMenu = makePopMenu(menuBar, "|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd|")
    popMenu.BeginGroup = True
    'Call addItemToPopMenu(popMenu, "Youin_VBA", "|fffd|v|fffd||fffd||fffd||fffd||fffd||fffd| (|fffd|d|fffd||fffd|A|fffd||fffd||fffd||fffd|)")
    Call addItemToPopMenu(popMenu, "IS_YSKSR1_VBA", "|fffd|d|fffd||fffd|A|fffd|1|fffd||7a5||fffd|g|fffd||fffd||fffd|^1|fffd||fffd|")
    Call addItemToPopMenu(popMenu, "IS_Gousei_VBA", "|fffd|\|fffd||fffd||fffd||fffd||fffd|f|fffd||fffd||fffd||fffd|")
    '---|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|---
    'Set popMenu = makePopMenu(menuBar, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    'popMenu.BeginGroup = True
    'Call addItemToPopMenu(popMenu, "Gousei_VBA", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    
    '---|fffd|u|fffd|I|fffd||fffd||fffd|v|fffd||202||fffd| ---
    Set popMenu = makePopMenu(menuBar, "|fffd|}|fffd|j|fffd||fffd||fffd|A|fffd||fffd|/|fffd|I|fffd||fffd|", "|fffd|w|fffd||fffd||fffd|v|fffd|E|fffd|I|fffd||fffd|")
    popMenu.BeginGroup = True
    Call addItemToPopMenu(popMenu, "fOnlineManual_iSTAT_ISTATYSK", "|fffd|}|fffd|j|fffd||fffd||fffd|A|fffd||fffd|") '|fffd|y|fffd||fffd||fffd||355||481|z
    Call addItemToPopMenu(popMenu, "fExplain_iSTAT_ISTATYSK", "|fffd||fffd||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "fHelp_ISTATYSK", "|fffd||fffd||fffd||303|\|fffd|t|fffd|g|fffd||242||82||fffd||fffd||fffd|")
    Call addItemToPopMenu(popMenu, "fExit_ISTATYSK", GName_Prog & "|fffd||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||fffd|", True)

    'display menubar
    menuBar.Visible = True
End Sub
'
Private Function makePopMenu(mnBar As CommandBar, ByVal capName As String, _
    Optional ByVal toolTipStr As String = "") As CommandBarControl
    Set makePopMenu = mnBar.Controls.Add(type:=msoControlPopup)
    makePopMenu.Caption = capName
    makePopMenu.TooltipText = toolTipStr
End Function
'
Private Sub addItemToPopMenu(ByVal popMenu As CommandBarControl, _
    ByVal macroName As String, ByVal capName As String, _
    Optional ByVal bSeper As Boolean = False, _
    Optional ByVal iconMenuName As String = "", _
    Optional ByVal iconBtnName As String = "")
    Dim barBtn As CommandBarButton
    '
    Dim iconBar As CommandBar
    Dim iconMenu As CommandBarPopup
    Dim iconBtn As CommandBarButton
    
    'Buttons
    Set barBtn = popMenu.Controls.Add(type:=msoControlButton)
    barBtn.OnAction = macroName
    barBtn.Caption = capName
    'If faceIdNum <> 0 Then barBtn.FaceId = faceIdNum 'not used
    If bSeper Then barBtn.BeginGroup = True
    
    'Icon Attached
    If iconMenuName <> "" And iconBtnName <> "" Then
        Set iconBar = CommandBars(BARNAME_ISTATYSK_ICON)
        Set iconMenu = iconBar.Controls(iconMenuName) 'example, IconForGraph
        Set iconBtn = iconMenu.Controls(iconBtnName)
        iconBtn.CopyFace
        barBtn.PasteFace
    End If
    
End Sub
'
'|fffd||fffd||fffd|j|fffd||fffd||fffd|[Bar|fffd||30d||d3dc||fffd|B
'
Sub delete_MenuBar(ByVal barName As String)
    If isMenuBarExist(barName) = True Then
        CommandBars(barName).Delete
    End If
End Sub
'
Private Function isMenuBarExist(ByVal barName As String) As Boolean
    Dim b As CommandBar
    
    isMenuBarExist = False
    
    For Each b In CommandBars
        If UCase(b.Name) = UCase(barName) Then
            isMenuBarExist = True
            Exit Function
        End If
    Next b

End Function
'
'display or hide menuBar
'
Sub NU_disp_MenuBar(ByVal bDisp As Boolean)
    If isMenuBarExist(BARNAME_ISTATYSK) = True Then
        CommandBars(BARNAME_ISTATYSK).Visible = bDisp
    End If
End Sub

'=== EOF ===


Attribute VB_Name = "menuBarRB"
'
'Ribbon Interface
'
Option Explicit

Sub IS_BASICINFO_VBA_RB(control As Object)
    Call IS_BASICINFO_VBA
End Sub

Sub IS_SokanZu1_VBA_RB(control As Object)
    Call IS_SokanZu1_VBA
End Sub

Sub IS_SknTimeLag_VBA_RB(control As Object)
    Call IS_SknTimeLag_VBA
End Sub

Sub IS_KJidou_VBA_RB(control As Object)
    Call IS_KJidou_VBA
End Sub

Sub IS_MonthlyModel_VBA_RB(control As Object)
    Call IS_MonthlyModel_VBA
End Sub

Sub IS_EPA_VBA_RB(control As Object)
    Call IS_EPA_VBA
End Sub

Sub IS_Keikou_VBA_RB(control As Object)
    Call IS_Keikou_VBA
End Sub

Sub IS_YSKSR1_VBA_RB(control As Object)
    Call IS_YSKSR1_VBA
End Sub

Sub IS_Gousei_VBA_RB(control As Object)
    Call IS_Gousei_VBA
End Sub

Sub fOnlineManual_iSTAT_ISTATYSK_RB(control As Object)
    Call fOnlineManual_iSTAT_ISTATYSK
End Sub

Sub fExplain_iSTAT_ISTATYSK_RB(control As Object)
    Call fExplain_iSTAT_ISTATYSK
End Sub

Sub fHelp_ISTATYSK_RB(control As Object)
    Call fHelp_ISTATYSK
End Sub

Sub fExit_ISTATYSK_RB(control As Object)
    Call fExit_ISTATYSK
End Sub


'==== EOF ====





Attribute VB_Name = "startEndMdl"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: Start and End
'
' Ver1.0|fffd||c42c| : 1996.2.23 -- 1996.5.7  by LSQ
' Ver2.0|fffd||c42c| : 2003.8.25 -- 2003.9 by LSQ
' Ver2.5|fffd||c42c| : 2007.1.13 by LSQ
'=================================================
Option Explicit
'
Sub Auto_Open()
Attribute Auto_Open.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim nbk As Integer
    Dim iconBar As CommandBar
    Dim rtn As Long
    
    'Excel|fffd||30a||8b||fffd||fffd||6d1||fffd| & |fffd|\|fffd||fffd||fffd|I|fffd|v|fffd|V|fffd||fffd||fffd||fffd||fffd||310||752||fffd|
    Call Environment_SAVE
    
'11.12.2 LSQ cmt : not used
'    'Help Macro Setting to Dialogbox Button; H15.11.3 LSQ
'    Call setHelpToDlgBtn
    
    '|fffd||fffd||fffd|t|fffd||fffd|check
    If user_date_chk() = False Then 'Check ISTAT.INI
        Call fExit_ISTATYSK
    End If
    
    If UpdateUserCheck() = False Then 'Check MYSK01.ini
        Call fExit_ISTATYSK
    End If
    
    '|fffd|V|fffd|[|fffd|g|fffd||315|\|fffd||fffd||fffd||602||fffd||582||fffd|OFF
    Application.ScreenUpdating = False
    
    Call changeToYSKDir
    nbk = Workbooks.Count
    If (nbk = 0) Then
        Workbooks.Add
    End If
    
    Call WorkBookOpen_SetOpenNum(GBKNAME_VBACM) 'firstly open COMMON file
    
    Call WorkBookOpen(GxlaBkGraph1)
    Call WorkBookOpen(GxlaBkGraph2)
    
    If Not YSK_USB_VERSION Then
        Call WorkBookOpen(GxlaBkDllR, False)
        CheckTrial
        rtn = GetRgeInfo
        If rtn = -1 Then
            'MsgBox "This trial application is expired, and it will exit.", vbOKOnly
            MsgBox "|fffd||fffd||fffd|p|fffd||fffd||fffd||502||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd||fffd||fffd|B|fffd|v|fffd||fffd||fffd|O|fffd||fffd||fffd||fffd||fffd||fffd||fffd|I|fffd||fffd||fffd||fffd||fffd||702||fffd||fffd|B", vbOKOnly, "|fffd||fffd||fffd||fffd||fffd||143|\|fffd|t|fffd|g|fffd||242||82||fffd||fffd||fffd|"
            Call fExit_ISTATYSK
        ElseIf rtn = -2 Then
            Call fExit_ISTATYSK
        End If
    End If
    
   ' If getExcelVerNo() >= 12 Then
   '     Call WorkBookOpen_SetOpenNum(GBKNAME_VBA07)
   ' End If
    
    'Menu Bar |fffd||fffd||fffd||fffd|
    Set iconBar = CommandBars(BARNAME_ISTATYSK_ICON)
    '
    If getExcelVerNo() < 12 Then
        iconBar.Visible = False
        Call make_MenuBar
        iconBar.Delete
    Else
        iconBar.Delete
        WorkBookOpen (RibbonMenu)
    End If
End Sub
'
Sub Auto_Close()
    Call fExit_ISTATYSK
End Sub
'
'
Sub fExit_ISTATYSK()
Attribute fExit_ISTATYSK.VB_ProcData.VB_Invoke_Func = " \n14"
    On Error Resume Next
    
    Application.CutCopyMode = xlCopy
    
    '|fffd||fffd||fffd|j|fffd||fffd||fffd|[|fffd||d3dc|
    Call delete_MenuBar(BARNAME_ISTATYSK)
    Call delete_MenuBar(BARNAME_ISTATYSK_ICON)
    
    '|fffd|u|fffd|b|fffd|N|fffd||303|N|fffd||fffd||fffd|[|fffd|Y
    Call WorkBookClose(GxlaBkGraph1)
    Call WorkBookClose(GxlaBkGraph2)
    
    If Not YSK_USB_VERSION Then
        Call WorkBookClose(GxlaBkDllR)
    End If
    
    If getExcelVerNo() >= 12 Then
    '    Call WorkBookClose_OnOpenNum(GBKNAME_VBA07)
        Call WorkBookClose(RibbonMenu)
    End If

    Call WorkBookClose_OnOpenNum(GBKNAME_VBACM) 'at last close COMMON file
    
    Application.ScreenUpdating = True '|fffd||fffd||295|\|fffd||fffd|ON
    Application.DisplayAlerts = True '|fffd||6d1||fffd||fffd||4e989||fffd|
    
    'Excel|fffd||30a||8b||fffd||fffd||fffd|
    Call Environment_RECV
    
    On Error GoTo 0

    '|fffd|{|fffd|t|fffd|@|fffd|C|fffd||fffd||fffd||303|N|fffd||fffd||fffd|[|fffd|Y
    ThisWorkbook.Close savechanges:=False

End Sub
'
Private Sub Environment_SAVE()
    Environment_Sub (True)
End Sub
'
Private Sub Environment_RECV()
    Environment_Sub (False)
End Sub
'
'save & recovery
'
Private Sub Environment_Sub(ByVal bSave As Boolean)
    Dim i As Integer, barNum As Integer, tmpstr As String, tmpCel As Range
    Dim savBgn As Range
    Set savBgn = ThisWorkbook.Worksheets(G_StName_Info).Range("I3")
    '
    Application.ScreenUpdating = False
    
    If bSave Then   'save and setting
'        savBgn(1, 1) = Application.DisplayFormulaBar
'        savBgn(2, 1) = Application.DisplayStatusBar
        savBgn(3, 1) = Application.ReferenceStyle
        savBgn(4, 1) = Application.DefaultFilePath
        
        savBgn(5, 1) = Application.StandardFont
        savBgn(6, 1) = Application.StandardFontSize
        
'        Application.DisplayFormulaBar = False
'        Application.DisplayStatusBar = False
        'Application.ReferenceStyle = xlR1C1
        
        '2015.05.19 cmt:
        'Application.StandardFont = "|fffd|l|fffd|r |fffd||fffd||fffd||fffd|"
        'Application.StandardFontSize = "12"
        'end cmt
        
'        barNum = Toolbars.Count
'        savBgn(10, 1) = barNum
'
'        For i = 1 To barNum
'            savBgn(i + 10, 1) = Toolbars(i).Visible: Toolbars(i).Visible = False
'        Next
    Else    'recovery
'        Set tmpCel = savBgn(1, 1)
'        If isCellNotEmpty(tmpCel) Then
'            Application.DisplayFormulaBar = tmpCel
'        End If
'
'        Set tmpCel = savBgn(2, 1)
'        If isCellNotEmpty(tmpCel) Then
'            Application.DisplayStatusBar = tmpCel
'        End If
        
        Set tmpCel = savBgn(3, 1)
        If isCellNotEmpty(tmpCel) Then
            Application.ReferenceStyle = tmpCel
        End If
        
        tmpstr = CStr(savBgn(4, 1))
        If Trim(tmpstr) <> "" Then
            Application.DefaultFilePath = savBgn(4, 1)
        End If
        
        '2015.05.19 cmt:
        'Set tmpCel = savBgn(5, 1)
        'If isCellNotEmpty(tmpCel) Then
        '    Application.StandardFont = tmpCel
        'End If
        '
        'Set tmpCel = savBgn(6, 1)
        'If isCellNotEmpty(tmpCel) Then
        '    Application.StandardFontSize = tmpCel
        'End If
        'end cmt
        
'        barNum = Val(savBgn(10, 1))
'
'        For i = 1 To barNum
'            Toolbars(i).Visible = savBgn(i + 10, 1)
'        Next
    End If
    
End Sub

 Sub CheckTrial()
    Dim nRtn As Long
    nRtn = Application.Run(GxlaBkDllR & "!CheckRegInfo", "112", "M", 30, -1)
    ThisWorkbook.Worksheets(G_StName_Info).Range("A1") = nRtn
End Sub

Function GetRgeInfo() As Long
    GetRgeInfo = CLng(ThisWorkbook.Worksheets(G_StName_Info).Range("A1"))
End Function

'===== end of file =====
Attribute VB_Name = "win32API"
'=================================================
'|fffd|uSSS|fffd|\|fffd||fffd||fffd|v: Windows API|fffd||590||fffd||fffd||30c||102||44f|o|fffd||fffd|
'
' |fffd||c42c| : 1996.2.23 LSQ
'=================================================
Option Private Module
Option Explicit

'
'|fffd||11713|x|fffd||30e||64fe|
'
#If VBA7 Then
    Declare PtrSafe Function GetSystemMetrics Lib "user32" (ByVal flag As Integer) As Integer
#Else
    Declare Function GetSystemMetrics Lib "user32" (ByVal flag As Integer) As Integer
#End If

Const SM_CXSCREEN As Integer = 0
Const SM_CYSCREEN As Integer = 1

Function getResolutionFlag()
    Dim xdot, ydot
    
    xdot = GetSystemMetrics(SM_CXSCREEN)
    ydot = GetSystemMetrics(SM_CYSCREEN)
    If xdot < 800 Then getResolutionFlag = 1: Exit Function '640|fffd|~480
    If xdot < 1024 Then getResolutionFlag = 2: Exit Function '800|fffd|~600
    If xdot < 1280 Then getResolutionFlag = 3: Exit Function '1024|fffd|~768
    
    getResolutionFlag = 4: Exit Function '1280|fffd|~1024
End Function

'--- end of file ---


INQUEST-PP=macro
