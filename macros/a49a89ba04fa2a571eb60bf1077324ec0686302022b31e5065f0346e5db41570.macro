Attribute VB_Name = "List1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CB_CheckOrder, 3, 0, MSForms, CommandButton"
Attribute VB_Control = "CB_Print, 4, 1, MSForms, CommandButton"
Attribute VB_Control = "CB_Send, 5, 2, MSForms, CommandButton"
' Important: the constant section must be repeated in each
' sheet because it's not possible to declare them as public

Option Explicit
' Constants declarations

Const OrderSheetName         As String = "Personalised Order"            ' Order WorkSheet name
Const AddressesSheetName     As String = "Customer Delivery addresses"     ' Delivery Addresses WorkSheet name

Const PosCusCode    As String = "B4"                        ' Customer Code Cell
Const PosCusName    As String = "B6"                        ' Customer Name Cell
Const PosProduct    As String = "B9"                        ' Product Name Cell
Const PosDelivery   As String = "B11"                       ' Delivery Type Cell
Const PosPeriodicity    As String = "G11"                   ' Periodicity Cell
Const PosPayment        As String = "B13"                   ' Payment Type Cell
Const PosCapacity       As String = "G6"                    ' Capacity Cell
Const PosICO            As String = "G4"                    ' ICO code Cell
Const LenICO            As Integer = 8                      ' Legal length of ICO
Const PosTotalVoucherQty    As String = "L19"               ' Total vou num
Const LenEmployeeNumber     As Integer = 12                 ' Maximum employee number length
Const LenEmployeeName       As Integer = 40                 ' Maximum employee name length
Const PosFirstUnitQty       As String = "C26"               ' First order line unit qty
Const PosFirstFV1           As String = "D26"               ' First order line unit qty
Const PosFirstQty1          As String = "E26"               ' First order line unit qty
Const PosFirstEmployeeName  As String = "A26"               ' First employee name
Const PosContactEmail       As String = "F19"               ' Contact email
Const StrOrderEmailAddress  As String = "Objednavky-cz@edenred.com" '"ASCZ-objednavky@accorservices.com"
Const intFirstDetailRow As Integer = 26                     ' First order details line
Const strEmployeeNameColumn As String = "B"
Const strEmployeeNumberColumn As String = "A"
Const strUnitQtyColumn As String = "C"
' Modified EPE 01/07/2003: moved from AA to AH
Const strProductRefColumn As String = "AH"
' End EPE 01/07/2003
Const strMinFVRefColumn As String = "AE"
Const strMaxFVRefColumn As String = "AF"
Const intNbFV     As Integer = 5                            ' Max number of FV per envelope

' Added EPE 01/07/2003 for non-nullable address fields control
Const strAddressCodeColumn As String = "N"
Const strDeliveryNameColumn As String = "O"
Const strDeliveryStreetColumn As String = "P"
Const strDeliveryTownColumn As String = "Q"
Const strDeliveryZIPColumn As String = "R"
Const strDeliveryReceiverColumn As String = "T"
Const strDeliveryReceiverPhoneColumn As String = "U"
' End EPE 01/07/2003

' Messages
Const ErrMsgCusCode As String = "Neplatn|fffd| k|fffd|d klienta. Pros|fffd|m, zm|fffd|nte ho"
Const ErrMsgCusName As String = "Pros|fffd|m, specifikujte n|fffd|zev spole|fffd|nosti"
Const ErrMsgICO As String = "Neplatn|fffd| I|fffd|O"
Const ErrMsgFirstDetails As String = "Mus|fffd|te vyplnit minim|fffd|ln|fffd| jednu |fffd||fffd|dku."
Const ErrMsgMissingName As String = "Mus|fffd|te specifikovat jm|fffd|no nebo |fffd||fffd|slo ka|fffd|d|fffd|ho zam|fffd|stnance."
Const ErrMsgFVBoundaries As String = "Udan|fffd| nomin|fffd|ln|fffd| hodnota neexistuje"
Const ErrMsgFVUnicity As String = "Udan|fffd| nomin|fffd|ln|fffd| hodnota je ji|fffd| jednou zapsan|fffd| v t|fffd|to |fffd||fffd|dce"
Const ErrMsgBadEmailStructure As String = "Neplatn|fffd| e-mailov|fffd| adresa"
' Added EPE 01/07/2003
Const ErrMsgMandatoryAddressField As String = "Dopl|fffd|te pros|fffd|m povinn|fffd| |fffd|daje o dodac|fffd| adrese "
' End EPE 01/07/2003
Const MsgOK As String = "Objedn|fffd|vka zkontrolov|fffd|na. M|fffd||fffd|ete odeslat."
Const MsgWarningVouQtyTR As String = "Upozorn|fffd|n|fffd|! Objednan|fffd| mno|fffd|stv|fffd| pouk|fffd|zek nekoresponduje s po|fffd|tem va|fffd|ich zam|fffd|stnanc|fffd|"
Const ErrMsgEmptyRow As String = "Mezi jednotlivymi zam|fffd|stnanci se nach|fffd|zej|fffd| pr|fffd|zdn|fffd| |fffd||fffd|dky " & vbCrLf & "dopl|fffd|te je pros|fffd|m nebo odstra|fffd|te."
Const ErrMsgZero As String = "Tato hodnota nem|fffd||fffd|e b|fffd|t rovna 0"
Const ErrMsgNegativeNumber As String = "Tato hodnota nem|fffd||fffd|e b|fffd|t z|fffd|porn|fffd|"
Const ErrMsgMissingNominalValue As String = "Pro ka|fffd|d|fffd| mno|fffd|stv|fffd| uve|fffd|te pros|fffd|m i nomin|fffd|ln|fffd| hodnotu stravenek"
Const ErrMsgMissingVoucherCount As String = "Pro ka|fffd|dou nomin|fffd|ln|fffd| hodnotu stravenek uve|fffd|te pros|fffd|m i mno|fffd|stv|fffd|"
Const ErrMsgEmptyCell As String = "Tato hodnota nem|fffd||fffd|e b|fffd|t pr|fffd|zdn|fffd|"

'========================================================================
'
'  Copyright 2003 Accor Services
'
'  Project       : Accor Services CZ Production
'  Version        : 2.0
'  Customer Excel interface for Ordering
'
'  File          : GVA_CZP_PDV_0132
'  Developer     : Emmanuel Petit
'  Date         : 2003. 02. 07.
'  Function       : ActivateButton
'  Description    : Set the Enabled property of CB_Summary and CB_Send to bEnabled value
'
'
'========================================================================

Public Sub ActivateButtons(bEnabled As Boolean)

    CB_Print.Enabled = bEnabled
    CB_Send.Enabled = bEnabled

End Sub

Private Sub CB_CheckOrder_Click()
'========================================================================
'
'  Copyright 2003 Accor Services
'
'  Project       : Accor Services CZ Production
'  Version        : 3.5
'  Customer Excel interface for Ordering
'
'  File          : GVA_CZP_PDV_0132
'  Developer     : Emmanuel Petit
'  Date         : 2003. 02. 07.
'  Function       : CheckOrder
'  Description    : This macro verifies that mandatory fields are filled in properly
'
'  Modifs:
'    V. 2.1: customer name not mandatory and summary generation included in this function
'           FV unicity testing + ordered qty test for TR
'    V. 2.2: no more summary, button activation, test for email address structure. first detail row amount test redone without calculated columns
'    V. 2.3: correction of the e-mail structure control (C|fffd|dric Fellous)
'    V. 2.7: control that delivery name, street, town, zip, receiver and phone are not null
'    V. 3.5: J.Melka 12.3.2010 Completely changed to one loop cycle and remove duplicate code
'========================================================================
    ' Variables declaration
    
    Dim strCurrentProductCell As String
    Dim intMinFV, intMaxFV As Integer
    Dim intRefLine As Long 'Integer
    Dim strProduct As String

    ' initialization
    intRefLine = 1
    strProduct = Worksheets(OrderSheetName).Range(PosProduct).Value
    ' search of product line number
    strCurrentProductCell = strProductRefColumn & intRefLine
    While Not (Worksheets(OrderSheetName).Range(strCurrentProductCell).Value = strProduct)
    ' next line
        intRefLine = intRefLine + 1
        strCurrentProductCell = strProductRefColumn & intRefLine
    Wend
    
    intMinFV = Worksheets(OrderSheetName).Range(strMinFVRefColumn & intRefLine).Value
    intMaxFV = Worksheets(OrderSheetName).Range(strMaxFVRefColumn & intRefLine).Value
    
    ' Customer Code control
    
    If IsNumeric(Worksheets(OrderSheetName).Range(PosCusCode).Value) Then
        If Worksheets(OrderSheetName).Range(PosCusCode).Value <= 0 Then
            MsgBox (ErrMsgCusCode)
            Call ActivateButtons(False)
            Worksheets(OrderSheetName).Range(PosCusCode).Activate
            Exit Sub
        End If
    Else
        MsgBox (ErrMsgCusCode)
        Call ActivateButtons(False)
        Worksheets(OrderSheetName).Range(PosCusCode).Activate
        Exit Sub
    End If
    
    'Employee count
    If Not IsNumeric(Worksheets(OrderSheetName).Range(PosCapacity).Value) Then
        MsgBox "Nespr|fffd|vn|fffd| vypln|fffd|n|fffd| po|fffd|et zam|fffd|stnanc|fffd| !  "
        Call ActivateButtons(False)
        Worksheets(OrderSheetName).Range(PosCapacity).Activate
        Exit Sub
    End If
    
    ' ICO control
    If Not (IsNumeric(Worksheets(OrderSheetName).Range(PosICO).Value) And (Worksheets(OrderSheetName).Range(PosICO).Value > 0)) Then
        MsgBox (ErrMsgICO)
        Call ActivateButtons(False)
        Worksheets(OrderSheetName).Range(PosICO).Activate
        Exit Sub
    Else ' Fill with leading zeroes
        Worksheets(OrderSheetName).Range(PosICO).Value = Right("00000000" & Worksheets(OrderSheetName).Range(PosICO).Value, LenICO)
    End If
    
    ' Check first detail row amount
    
    If Not ((Worksheets(OrderSheetName).Range(PosFirstUnitQty).Value > 0) And (Worksheets(OrderSheetName).Range(PosFirstFV1).Value > 0) And (Worksheets(OrderSheetName).Range(PosFirstQty1).Value >= 0)) Then
        MsgBox (ErrMsgFirstDetails)
        Call ActivateButtons(False)
        Worksheets(OrderSheetName).Range(PosFirstUnitQty).Activate
        Exit Sub
    End If
     
    ' Check email address structure
    
    Dim strEmail As String                  ' To store contact email
    Dim intAtSymbolPosition As Integer      ' Position of "@" symbol in address
    Dim intDotSymbolPosition As Integer     ' Position of "." symbol in address
    Dim bGoodEmailStructure As Boolean      ' to store result of test
    ' Read address
    
    strEmail = Worksheets(OrderSheetName).Range(PosContactEmail).Value
    bGoodEmailStructure = True
    ' Check if an address was specified
    If Len(strEmail) > 0 Then
        'We must test its structure
        ' Get position of "@" charaacter
        intAtSymbolPosition = InStr(1, strEmail, "@")
        If intAtSymbolPosition >= 2 Then
        ' good till then, we now search for a "." (which has to be after the "@")
            intDotSymbolPosition = InStr(intAtSymbolPosition, strEmail, ".")
            If intDotSymbolPosition > 0 Then
                bGoodEmailStructure = True
            Else
                bGoodEmailStructure = False
            End If
        Else
            bGoodEmailStructure = False
        End If
    End If
    ' If structure is bad
    If Not bGoodEmailStructure Then
        MsgBox (ErrMsgBadEmailStructure)
        Call ActivateButtons(False)
        Worksheets(OrderSheetName).Range(PosContactEmail).Activate
        Exit Sub
    End If

    ' Validate envelope number and empty rows
    On Error Resume Next

    Dim intCurrentRow As Integer
    Dim intCurrentColumn As Integer
    Dim intEndRow As Integer
    Dim intEndColumn As Integer
    Dim varValue As Variant 'Actual value in cell
    Dim intActualEmptyRow As Integer

    
    Dim arrFV ' Used to store the FVs on 1 row for unicity control
    Dim strFV As String '
    Dim intFVindex1 As Integer
    Dim intFVindex2 As Integer
    
    'Application.Volatile
    
    ' initialization
    intCurrentRow = 26
    intCurrentColumn = 1
    intEndRow = ActiveSheet.UsedRange.Rows.Count
    intEndColumn = 21
    intActualEmptyRow = 0
    
    arrFV = Array()
    strFV = ""
    intFVindex1 = 0
    intFVindex2 = 0
    
    Worksheets(OrderSheetName).Select
    
    While Not (intCurrentRow > intEndRow) ' For every Row
        While Not (intCurrentColumn > intEndColumn) ' For every Column
            varValue = Cells(intCurrentRow, intCurrentColumn) 'Actual value in cell
            If intCurrentColumn < 15 Then Cells(intCurrentRow, intCurrentColumn).Select ' Select cell
            If Application.CountA(Rows(intCurrentRow)) = 0 Then ' Empty rows control
                For intActualEmptyRow = intCurrentRow To intEndRow
                    If Not Application.CountA(Rows(intActualEmptyRow)) = 0 Then
                        Err.Raise 1, , ErrMsgEmptyRow & vbCrLf & "Dal|fffd||fffd| nalezen|fffd| hodnoty jsou na |fffd||fffd|dku " & intActualEmptyRow
                        Exit For
                    End If
                Next
                If (intActualEmptyRow > intEndRow) Then
                    intCurrentColumn = intEndColumn
                    intCurrentRow = intEndRow
                End If
                
            Else
                Select Case intCurrentColumn
                    Case 1 'Employee number
                    
                    Case 2 'Employee name
                        If Not ((Len(Trim(varValue)) > 0) Or (Cells(intCurrentRow, intCurrentColumn - 1) > 0)) Then ' Must be employee name or number
                            Err.Raise 1, , ErrMsgMissingName
                        End If
                    Case 3 'Envelope number
                        If varValue > 0 Then
                           If Not Cells(intCurrentRow, intCurrentColumn + 1) > 0 Then
                                Err.Raise 1, , ErrMsgMissingNominalValue
                           End If
                        Else
                            If IsEmpty(varValue) Then Err.Raise 1, , ErrMsgEmptyCell
                            
                            ' Zero value control
                            If varValue = "0" Then Err.Raise 1, , ErrMsgZero
                            
                            ' Minus value control
                            If varValue < 0 Then Err.Raise 1, , ErrMsgNegativeNumber
                        End If
                        
                    Case 4, 6, 8, 10, 12 'Nominal Value
                        
                        ' Zero value control
                        If varValue = "0" Then Err.Raise 1, , ErrMsgZero
                        
                        If (varValue > 0) Then
                            ' FV boundaries control
                            If (varValue < intMinFV) Or (varValue > intMaxFV) Then
                                Err.Raise 1, , ErrMsgFVBoundaries
                            End If
                            
                            'Check values unicity
                            If strFV = "" Then
                                strFV = CStr(varValue)
                            Else
                                strFV = strFV & "," & varValue
                                arrFV = Split(strFV, ",")
                                For intFVindex1 = LBound(arrFV) To UBound(arrFV)
                                    If arrFV(intFVindex1) > 0 Then ' Test only non null values
                                        For intFVindex2 = LBound(arrFV) To UBound(arrFV)
                                            If (arrFV(intFVindex2) > 0) And (intFVindex2 <> intFVindex1) And (arrFV(intFVindex2) = arrFV(intFVindex1)) Then ' compare only different item and non nulls
                                                Err.Raise 1, , ErrMsgFVUnicity ' If double found, exit loop
                                                Exit For
                                            End If
                                        Next
                                    End If
                                Next
                            End If
                        Else
                            ' Voucher Count without Nominal value
                            If Cells(intCurrentRow, intCurrentColumn + 1) > 0 Then
                                Err.Raise 1, , ErrMsgMissingNominalValue
                            End If
                        End If
                        
                    Case 5, 7, 9, 11, 13 ' Voucher Count
                         
                        If Not varValue > 0 Then
                            ' Nominal value without Voucher Count
                            If Not varValue = "0" Then
                                If Cells(intCurrentRow, intCurrentColumn - 1) > 0 Then
                                    Err.Raise 1, , ErrMsgMissingVoucherCount
                                End If
                            End If
                        End If

                    Case 14 'Address code
                    
                    Case 15, 16, 17, 18, 20, 21
                        If Not Len(varValue) > 0 Then
                            Err.Raise 1, , ErrMsgMandatoryAddressField
                        End If
                    Case Else
                    
                End Select
            
            End If
            
            If Err.Number <> 0 Then
                Call ActivateButtons(False) ' Disable buttons
                MsgBox Err.Description, vbCritical
                Exit Sub
            End If
            intCurrentColumn = intCurrentColumn + 1 'Next column
        Wend
        strFV = ""
        intCurrentColumn = 1 ' Every row from first column
        intCurrentRow = intCurrentRow + 1 'Next row
    Wend
    Cells(1, 1).Select

    ' Test CZ: If the product is TR, there will be a control that difference between total number of tickets and number of employees*periodicity*20 is in absolute lower than 20%.
    ' Product TR is placed on first line of ref table
    If Worksheets(OrderSheetName).Range(PosProduct).Value = Worksheets(OrderSheetName).Range(strProductRefColumn & "1").Value Then
    
        'Dim intTheoVouTR As Integer
        Dim intTheoVouTR As Long        'PAT 20050607
        'Dim intOrderedVouQty As Integer
        Dim intOrderedVouQty As Long    'PAT 20050307
        ' Calculates theoratical voucher number
        intTheoVouTR = 20 * Worksheets(OrderSheetName).Range(PosPeriodicity).Value * Worksheets(OrderSheetName).Range(PosCapacity).Value
        intOrderedVouQty = Worksheets(OrderSheetName).Range(PosTotalVoucherQty).Value
        If (intTheoVouTR > 0) And (((intTheoVouTR / intOrderedVouQty) < 0.8) Or ((intTheoVouTR / intOrderedVouQty) > 1.2)) Then
            MsgBox MsgWarningVouQtyTR
        End If
        
    End If

    'JFL 2007-05-15
    'Dim LL_Row      As Long
    'Dim LS_Sheet   As String
    '
    '    LS_Sheet = "Accor Services Order"       'sheet name with data
    '    LL_Row = Select_end_row(LS_Sheet)       'ending row
    '    LL_Row = LL_Row + 10                    'end row...
    '    With Worksheets(LS_Sheet)
    '        Range("A" & LL_Row).Value = " "    'value of last row for MS Access
    '        Range("B" & LL_Row).Value = " "    'value of last row for MS Access
    '    End With


    ' All controls are OK

    MsgBox MsgOK


    ' Enable buttons
    Call ActivateButtons(True)

End Sub




Private Sub CB_Print_Click()

ActiveWindow.SelectedSheets.PrintOut Copies:=1, Collate:=True


End Sub


'========================================================================
'
'  Copyright 2003 Accor Services
'
'  Project       : Accor Services CZ Production
'  Version        : 2.0
'  Customer Excel interface for Ordering
'
'  File          : GVA_CZP_PDV_0132
'  Developer     : Emmanuel Petit
'  Date         : 2003. 02. 07.
'  Function       : CB_Send_Click
'  Description    : This macro builds a string describing the order and open the customer
'                   mail application with recipients, ,subjects and attachment
'
'
'========================================================================
Private Sub CB_Send_Click()

Dim StrSubject As String        ' Used to build the subject with format "Order " & cus_code & " " & product & " " & current date

StrSubject = "Order " & Worksheets(OrderSheetName).Range(PosCusCode).Value
StrSubject = StrSubject & " " & Worksheets(OrderSheetName).Range(PosProduct).Value
StrSubject = StrSubject & " " & Format(Now(), "dd/MM/yyyy")


Application.Dialogs(xlDialogSendMail).Show StrOrderEmailAddress, StrSubject


End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub


Attribute VB_Name = "List2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CB_AddressesUpdate, 2, 0, MSForms, CommandButton"
' Important: the constant section must be repeated in each
' sheet because it's not possible to declare them as public


' Constants declarations

Const OrderSheetName         As String = "Personalised Order"            ' Order WorkSheet name
Const AddressesSheetName     As String = "Customer Delivery addresses"       ' Delivery Addresses WorkSheet name

Const intFirstDetailRow As Integer = 26                     ' First order details line
Const intFirstAddressRow As Integer = 5                     ' First delivery address line

Const strUnitQtyColumn As String = "C"
Const strAddressCodeColumn As String = "N"
Const strDeliveryNameColumn As String = "O"
Const strDeliveryStreetColumn As String = "P"
Const strDeliveryTownColumn As String = "Q"
Const strDeliveryZIPColumn As String = "R"
Const strDeliveryReferenceColumn As String = "S"
Const strDeliveryReceiverColumn As String = "T"
Const strDeliveryReceiverPhoneColumn As String = "U"
Const strDistributionNameColumn As String = "V"
Const strDistributionStreetColumn As String = "W"
Const strDistributionTownColumn As String = "X"
Const strDistributionZipColumn As String = "Y"
Const strDistributionReferenceColumn As String = "Z"
Const strDistributionReceiverColumn As String = "AA"


' Messages
Const ErrMsgMandatoryAddressField As String = "Je nutno vyplnit povinne policko u dodaci adresy"
Const ErrMsgAddressCodeNotFound As String = "Zadany kod dodaci adresy neni na seznamu: "



Private Sub CB_AddressesUpdate_Click()
'========================================================================
'
'  Copyright 2003 Accor Services
'
'  Project        : Accor Services CZ Production
'  Version        : 1.0
'  Customer Excel interface for Ordering
'
'  File           : GVA_CZP_PDV_0132
'  Developer      : C|fffd|dric Fellous
'  Date           : 2003. 10. 07.
'  Function       : AddressesUpdate
'  Description    : This macro fills the addresses for each employee line on the main sheet
'
'  Modifs:
'
'
'========================================================================
' Variables declaration
Dim intOrderLineNum As Integer                 ' Integer to loop on rows in Order sheet
Dim intAddressLineNum As Integer               ' Integer to loop on rows in Addresses sheet
Dim bAddressFound As Boolean


Dim strCurrentAddressCodePos            As String
Dim strCurrentDeliveryNamePos           As String
Dim strCurrentDeliveryStreetPos         As String
Dim strCurrentDeliveryTownPos           As String
Dim strCurrentDeliveryZIPPos            As String
Dim strCurrentDeliveryReceiverPos       As String
Dim strCurrentDeliveryReceiverPhonePos  As String
Dim message                             As String
    
    
' Mandatory address fields control: control of all mandatory fields on all delivery addresses
    intAddressLineNum = intFirstAddressRow
    strCurrentAddressCodePos = strAddressCodeColumn & intAddressLineNum
    While Worksheets(AddressesSheetName).Range(strCurrentAddressCodePos).Value > 0
        strCurrentDeliveryNamePos = strDeliveryNameColumn & intAddressLineNum
        strCurrentDeliveryStreetPos = strDeliveryStreetColumn & intAddressLineNum
        strCurrentDeliveryTownPos = strDeliveryTownColumn & intAddressLineNum
        strCurrentDeliveryZIPPos = strDeliveryZIPColumn & intAddressLineNum
        strCurrentDeliveryReceiverPos = strDeliveryReceiverColumn & intAddressLineNum
        strCurrentDeliveryReceiverPhonePos = strDeliveryReceiverPhoneColumn & intAddressLineNum
        
        If Not Len(Worksheets(AddressesSheetName).Range(strCurrentDeliveryNamePos).Value) > 0 Then
            MsgBox (ErrMsgMandatoryAddressField)
            Call Worksheets(OrderSheetName).ActivateButtons(False)
            Worksheets(AddressesSheetName).Range(strCurrentDeliveryNamePos).Activate
            Exit Sub
        End If
        
        If Not Len(Worksheets(AddressesSheetName).Range(strCurrentDeliveryStreetPos).Value) > 0 Then
            MsgBox (ErrMsgMandatoryAddressField)
            Call Worksheets(OrderSheetName).ActivateButtons(False)
            Worksheets(AddressesSheetName).Range(strCurrentDeliveryStreetPos).Activate
            Exit Sub
        End If

        If Not Len(Worksheets(AddressesSheetName).Range(strCurrentDeliveryTownPos).Value) > 0 Then
            MsgBox (ErrMsgMandatoryAddressField)
            Call Worksheets(OrderSheetName).ActivateButtons(False)
            Worksheets(AddressesSheetName).Range(strCurrentDeliveryTownPos).Activate
            Exit Sub
        End If

        If Not Len(Worksheets(AddressesSheetName).Range(strCurrentDeliveryZIPPos).Value) > 0 Then
            MsgBox (ErrMsgMandatoryAddressField)
            Call Worksheets(OrderSheetName).ActivateButtons(False)
            Worksheets(AddressesSheetName).Range(strCurrentDeliveryZIPPos).Activate
            Exit Sub
        End If

        If Not Len(Worksheets(AddressesSheetName).Range(strCurrentDeliveryReceiverPos).Value) > 0 Then
            MsgBox (ErrMsgMandatoryAddressField)
            Call Worksheets(OrderSheetName).ActivateButtons(False)
            Worksheets(AddressesSheetName).Range(strCurrentDeliveryReceiverPos).Activate
            Exit Sub
        End If

        If Not Len(Worksheets(AddressesSheetName).Range(strCurrentDeliveryReceiverPhonePos).Value) > 0 Then
            MsgBox (ErrMsgMandatoryAddressField)
            Call Worksheets(OrderSheetName).ActivateButtons(False)
            Worksheets(AddressesSheetName).Range(strCurrentDeliveryReceiverPhonePos).Activate
            Exit Sub
        End If
        
        ' next line
        intAddressLineNum = intAddressLineNum + 1
        strCurrentAddressCodePos = strAddressCodeColumn & intAddressLineNum
    Wend


' Addresses update in the main sheet, according to Address Code

    intOrderLineNum = intFirstDetailRow
    strCurrentAddressCodePos = strAddressCodeColumn & intOrderLineNum
    bAddressFound = True

    While Worksheets(OrderSheetName).Range(strUnitQtyColumn & intOrderLineNum).Value > 0 And bAddressFound = True

        'Find the right address line in the addresses sheet
        intAddressLineNum = intFirstAddressRow
        bAddressFound = False
        
        While Worksheets(AddressesSheetName).Range(strAddressCodeColumn & intAddressLineNum).Value > 0 And bAddressFound = False
            'If the codes are the same, the address was found, if not, we go to next line
            If Worksheets(OrderSheetName).Range(strCurrentAddressCodePos).Value = Worksheets(AddressesSheetName).Range(strAddressCodeColumn & intAddressLineNum).Value Then
                bAddressFound = True
            Else
                intAddressLineNum = intAddressLineNum + 1
            End If
        Wend
        
        If bAddressFound = True Then
          'If the address was found, copy of the addresses fields from one sheet to the other
            Worksheets(OrderSheetName).Range(strDeliveryNameColumn & intOrderLineNum).Value = Worksheets(AddressesSheetName).Range(strDeliveryNameColumn & intAddressLineNum).Value
            Worksheets(OrderSheetName).Range(strDeliveryStreetColumn & intOrderLineNum).Value = Worksheets(AddressesSheetName).Range(strDeliveryStreetColumn & intAddressLineNum).Value
            Worksheets(OrderSheetName).Range(strDeliveryTownColumn & intOrderLineNum).Value = Worksheets(AddressesSheetName).Range(strDeliveryTownColumn & intAddressLineNum).Value
            Worksheets(OrderSheetName).Range(strDeliveryZIPColumn & intOrderLineNum).Value = Worksheets(AddressesSheetName).Range(strDeliveryZIPColumn & intAddressLineNum).Value
            Worksheets(OrderSheetName).Range(strDeliveryReferenceColumn & intOrderLineNum).Value = Worksheets(AddressesSheetName).Range(strDeliveryReferenceColumn & intAddressLineNum).Value
            Worksheets(OrderSheetName).Range(strDeliveryReceiverColumn & intOrderLineNum).Value = Worksheets(AddressesSheetName).Range(strDeliveryReceiverColumn & intAddressLineNum).Value
            Worksheets(OrderSheetName).Range(strDeliveryReceiverPhoneColumn & intOrderLineNum).Value = Worksheets(AddressesSheetName).Range(strDeliveryReceiverPhoneColumn & intAddressLineNum).Value
            Worksheets(OrderSheetName).Range(strDistributionNameColumn & intOrderLineNum).Value = Worksheets(AddressesSheetName).Range(strDistributionNameColumn & intAddressLineNum).Value
            Worksheets(OrderSheetName).Range(strDistributionStreetColumn & intOrderLineNum).Value = Worksheets(AddressesSheetName).Range(strDistributionStreetColumn & intAddressLineNum).Value
            Worksheets(OrderSheetName).Range(strDistributionTownColumn & intOrderLineNum).Value = Worksheets(AddressesSheetName).Range(strDistributionTownColumn & intAddressLineNum).Value
            Worksheets(OrderSheetName).Range(strDistributionZipColumn & intOrderLineNum).Value = Worksheets(AddressesSheetName).Range(strDistributionZipColumn & intAddressLineNum).Value
            Worksheets(OrderSheetName).Range(strDistributionReferenceColumn & intOrderLineNum).Value = Worksheets(AddressesSheetName).Range(strDistributionReferenceColumn & intAddressLineNum).Value
            Worksheets(OrderSheetName).Range(strDistributionReceiverColumn & intOrderLineNum).Value = Worksheets(AddressesSheetName).Range(strDistributionReceiverColumn & intAddressLineNum).Value
        Else
          'If the address was not found, error message
            MsgBox (ErrMsgAddressCodeNotFound & Worksheets(OrderSheetName).Range(strCurrentAddressCodePos).Value)
            Call Worksheets(OrderSheetName).ActivateButtons(False)
            Worksheets(OrderSheetName).Activate
            Worksheets(OrderSheetName).Range(strCurrentAddressCodePos).Activate
        End If


        ' next line
        intOrderLineNum = intOrderLineNum + 1
        strCurrentAddressCodePos = strAddressCodeColumn & intOrderLineNum
    Wend

    message = "Adres vypln|fffd|no : " & (intOrderLineNum - 26)
    MsgBox message


End Sub

Attribute VB_Name = "MO_ASCZ"

Public Function Select_end_row(PS_sheet As String)

Dim LS_result1              As String
Dim LS_result2              As String
Dim LS_first_cell           As String
Dim LS_next_cell            As String
Dim LS_column               As String
Dim LI_row                  As String


'Where started
LS_first_cell = "C26"


'result1
    If Sheets(PS_sheet).Range(LS_first_cell) <> "" Then
        LS_next_cell = Range(LS_first_cell).Column & (Range(LS_first_cell).Row + 1)
            
            LS_column = Right(Range(LS_first_cell).Address, Len(Range(LS_first_cell).Address) - InStr(Range(LS_first_cell).Address, "$"))
            
            LI_row = Right(LS_column, Len(LS_column) - InStr(LS_column, "$"))
            LI_row = LI_row + 1         ' + next row
            LS_column = Left(LS_column, InStr(LS_column, "$") - 1)
            
            LS_next_cell = LS_column & LI_row
            If Range(LS_first_cell).Value <> "" And Range(LS_next_cell).Value = "" Then
                LS_result1 = Range(LS_first_cell).Row
            Else
                Sheets(PS_sheet).Activate
                Range(LS_first_cell).Select
                Selection.End(xlDown).Select
                LS_result1 = Selection.Row
            End If
    Else
            LS_result1 = 26
    End If

        Select_end_row = LS_result1

End Function


Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Workbook_Open()

'JFL 2007-05-16

Worksheets("Personalised Order").Activate

Worksheets("Personalised Order").CB_Print.Enabled = False
Worksheets("Personalised Order").CB_Send.Enabled = False

End Sub




INQUEST-PP=macro
