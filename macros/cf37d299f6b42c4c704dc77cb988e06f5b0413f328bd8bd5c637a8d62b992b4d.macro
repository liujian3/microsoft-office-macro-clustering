Attribute VB_Name = "Barcode"
'********************************************************************************************
'* Creation & checking barcode
'* Functions and subroutines:
'*
'*    Public Function BarCodeValue$(Constr_barcode)
'*    Public Function BarCodeFontString$(Constr_barcode)
'*
'********************************************************************************************


Public Function BarCodeValue$(Constr_barcode)
'   this function calculates the checkdigit and eventually adds a zero _
    in order to keep the total number of digits as pair.
    
    Uneven% = 0
    Even% = 0
    If (Len(Constr_barcode) Mod 2) = 0 Then 'even number of digits
        Constr_barcode = Constr_barcode & "0"
    End If
    l% = Len(Constr_barcode)
    For i = 1 To l% Step 2
        Uneven% = Uneven% + Val(Mid$(Constr_barcode, i, 1))
    Next i
    For i = 2 To l% - 1 Step 2
        Even% = Even% + Val(Mid$(Constr_barcode, i, 1))
    Next i
    BarCodeValue$ = Constr_barcode & (10 - ((Uneven% * 3 + Even%) Mod 10)) Mod 10
End Function

Public Function BarCodeFontString$(Constr_barcode)
'Convert the calculated number to a string for the barcodefont _
   2of5interleaved requires an even number of digits _
   Each pair of digits (from 00 to 99) is then translated to 1 ASCII character _
   by adding 35 to the digits value. _
   !!! the digitpairvalues 92 thru 99 have to be replaced with ... !!!
         BarCodeFontString$ = "!"
         For q = 1 To Len(Constr_barcode) - 1 Step 2
            BCDigitPair = Val(Mid$(Constr_barcode, q, 1)) * 10 + Val(Mid$(Constr_barcode, q + 1, 1))
            Select Case BCDigitPair
                Case 92
                    BarCodeFontString$ = BarCodeFontString$ + Chr(196)
                Case 93
                    BarCodeFontString$ = BarCodeFontString$ + Chr(197)
                Case 94
                    BarCodeFontString$ = BarCodeFontString$ + Chr(199)
                Case 95
                    BarCodeFontString$ = BarCodeFontString$ + Chr(201)
                Case 96
                    BarCodeFontString$ = BarCodeFontString$ + Chr(209)
                Case 97
                    BarCodeFontString$ = BarCodeFontString$ + Chr(214)
                Case 98
                    BarCodeFontString$ = BarCodeFontString$ + Chr(220)
                Case 99
                    BarCodeFontString$ = BarCodeFontString$ + Chr(225)
                Case Else
                    BarCodeFontString$ = BarCodeFontString$ + Chr(BCDigitPair + 35)
            End Select
        Next q
        
'       The next line should be set to comment if used in MSExcel for mailmerge with MSWord. _
        The MSWord-mailmerge with an MSExcelWorksheet concatenates all fields following a _
        field whose contents end with a double quote.
        
        BarCodeFontString$ = BarCodeFontString$ + Chr(34)
End Function


Attribute VB_Name = "Checkings"
'*************************************************************************************************
'*
'* Functions and subroutines
'*
'*    Public Function Pos(SubStr As String, Str As String) As Integer
'*    Public Function IntToStr(IGetal As Integer, Length As Integer, Opvulkar As String) As String
'*    Public Sub ExitRealNumberField()
'*    Public Sub ExitIntNumberField()
'*    Public Function CheckCompte(SCpt As String) As Boolean
'*    Public Function ConstrCompte(SCpt As String) As String
'*    Public Sub ExitRekNumField()
'*
'*************************************************************************************************

Dim SelectedFormFieldName As String

Public Function Pos(SubStr As String, Str As String) As Integer
   Dim j As Integer
   j = 0
   Do
      j = j + 1
   Loop Until (Mid(Str, j, 1) = SubStr) Or (j = Len(Str) + 1)
   If (j = Len(Str)) Then
      Pos = 0
   End If
   If (j <= Len(Str)) Then
      Pos = j
   End If
End Function

Public Function IntToStr(IGetal As Integer, Length As Integer, Opvulkar As String) As String
   Dim s As String
   s = IGetal
   Do While Len(s) < Length
      If (l < 0) Then
         s = Mid(s, 1, 1) + Opvulkar + Mid(s, 2, Len(s) - 1)
      Else
         s = Opvulkar + s
      End If
   Loop
   IntToStr = s
End Function

Public Function LongToStr(IGetal As Long, Length As Integer, Opvulkar As String) As String
   Dim s As String
   s = IGetal
   Do While Len(s) < Length
      If (l < 0) Then
         s = Mid(s, 1, 1) + Opvulkar + Mid(s, 2, Len(s) - 1)
      Else
         s = Opvulkar + s
      End If
   Loop
   LongToStr = s
End Function


Public Sub Register()
   Dim DocFormField As FormField
   For Each DocFormField In ActiveDocument.FormFields
      If (Mid(UCase(DocFormField.NAME), 1, 8) = "TXTREKNR") Then
         DocFormField.ExitMacro = "ExitRekNrField"
      End If
      If (Mid(UCase(DocFormField.NAME), 1, 6) = "NBRINT") Then
         DocFormField.ExitMacro = "ExitIntNumberField"
      End If
      If (Mid(UCase(DocFormField.NAME), 1, 7) = "NBRREAL") Then
         DocFormField.ExitMacro = "ExitRealNumberField"
      End If
   Next
End Sub

Public Sub EntryRealNumberField()
   SelectedFormFieldName = Selection.Bookmarks(1).NAME
   ActiveDocument.FormFields(SelectedFormFieldName).Select
End Sub

Public Sub ExitRealNumberField()
   Dim BrolStr As String
   Dim p As Integer
   SelectedFormFieldName = Selection.Bookmarks(1).NAME
   If (Len(ActiveDocument.FormFields(SelectedFormFieldName).Result) = 0) Then
      ActiveDocument.FormFields(SelectedFormFieldName).Result = "0,00"
   Else
      BrolStr = ActiveDocument.FormFields(SelectedFormFieldName).Result
   End If
End Sub

Public Sub EntryIntNumberField()
   SelectedFormFieldName = Selection.Bookmarks(1).NAME
   ActiveDocument.FormFields(SelectedFormFieldName).Select
End Sub

Public Sub ExitIntNumberField()
   SelectedFormFieldName = Selection.Bookmarks(1).NAME
   If (Len(ActiveDocument.FormFields(SelectedFormFieldName).Result) = 0) Then
      ActiveDocument.FormFields(SelectedFormFieldName).Result = "0"
   End If
End Sub

Public Function CheckCompte(SCpt As String) As Boolean
    'Gestion des erreurs
    On Error GoTo Checkcompte_Err
    'D|fffd|claration des variables
    Dim DblResult As Double
    Dim IntModResult As Integer
    'V|fffd|rification de la longueur de la chaine de caract|fffd|res
    If Len(SCpt) > 14 Or Len(SCpt) < 12 Then
        CheckCompte = False
        Exit Function
    Else
        'Si la longueur de la chaine est de 14 ou de 13
        If (Len(SCpt) = 14) Or (Len(SCpt) = 13) Then
            'V|fffd|rification de la validit|fffd| des sous-chaines
            If Not IsNumeric(Mid(SCpt, 1, 3)) Or Not IsNumeric(Mid(SCpt, 5, 7)) Then
                CheckCompte = False
                Exit Function
            End If
            'Cr|fffd|ation du nombre
            ' si Scpt = 001-4569804-45 alors
            ' DblResult = "001" & "4569804" => 14569804
            DblResult = CDbl(Mid(SCpt, 1, 3) & Mid(SCpt, 5, 7))
            'Calcul du reste de la division
            IntModResult = DblResult - Int(DblResult / 97) * 97
            '
            'Adaptation du module pour respecter la convention interbancaire.
            '
            If IntModResult = 0 Then IntModResult = 97
            'V|fffd|rification du r|fffd|sultat
            ' si Scpt = 001-4569804-45
            ' et que IntModResult = 45 alors OK
            If IntModResult = CInt(Right(SCpt, 2)) Then
                CheckCompte = True
            Else
                CheckCompte = False
            End If
        Else
            'Si la longueur de la chaine est de 14
            If Len(SCpt) = 12 Then
            'V|fffd|rification de la validit|fffd| du nombre
                If Not IsNumeric(Mid(SCpt, 1, 10)) Then
                    CheckCompte = False
                    Exit Function
                End If
                'Cr|fffd|ation du nombre
                ' si Scpt = 001456980445 alors
                ' DblResult = "0014569804" => 14569804
                DblResult = Mid(SCpt, 1, 10)
                'Calcul du reste de la division
                IntModResult = DblResult - Int(DblResult / 97) * 97
                '
                'Adaptation du module pour respecter la convention interbancaire.
                '
                If IntModResult = 0 Then IntModResult = 97
                'V|fffd|rification du r|fffd|sultat
                ' si Scpt = 001-4569804-45
                ' et que IntModResult = 45 alors OK
                If IntModResult = CLng(Right(SCpt, 2)) Then
                    CheckCompte = True
                Else
                    CheckCompte = False
                End If
            Else
                CheckCompte = False
                Exit Function
            End If
        End If
    End If
'********************************************************************************
'* Ne pas oublier de provoquer la sortie de la fonction pour ne
'* pas executer le code d'erreur
'********************************************************************************
Exit Function

'Gestion des erreurs
Checkcompte_Err:
    CheckCompte = False
End Function

Public Function ConstrCompte(SCpt As String) As String
    If Len(SCpt) = 12 Then
        ConstrCompte = (Mid(SCpt, 1, 3) & "-" & Mid(SCpt, 4, 7) & "-" & Mid(SCpt, 11, 2))
    End If
    If Len(SCpt) = 13 Then
        ConstrCompte = (Mid(SCpt, 1, 3) & "-" & Mid(SCpt, 5, 7) & "-" & Mid(SCpt, 12, 2))
    End If
    If Len(SCpt) = 14 Then
        ConstrCompte = (Mid(SCpt, 1, 3) & "-" & Mid(SCpt, 5, 7) & "-" & Mid(SCpt, 13, 2))
    End If
End Function

Public Sub EntryRekNumField()
   SelectedFormFieldName = Selection.Bookmarks(1).NAME
   ActiveDocument.FormFields(SelectedFormFieldName).Select
End Sub

Public Sub ExitRekNrField()
   Dim SelectedFormFieldName As String
   Dim a As Boolean
   SelectedFormFieldName = Selection.Bookmarks(1).NAME
   If (Len(ActiveDocument.FormFields(SelectedFormFieldName).Result) <> 0) Then
      If Not CheckCompte(ActiveDocument.FormFields(SelectedFormFieldName).Result) Then
         a = ForcePrint(531, NotAllowed)
         ActiveDocument.FormFields(SelectedFormFieldName).Select
         Exit Sub
      Else
         ActiveDocument.FormFields(SelectedFormFieldName).Result = ConstrCompte(ActiveDocument.FormFields(SelectedFormFieldName).Result)
      End If
   End If
End Sub


Attribute VB_Name = "Cls_Doc_FORIDE"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'**********************************************************************************
'** Objet : Recherche des donn|fffd|es de l'agence et du client.
'** =======
'** La DLL FORIDE retourne les donn|fffd|es de l'agence et de l'utilisateur.
'** Cette DLL est pr|fffd|sente sur les PC qui ont PACIFIC.
'** La propri|fffd|t|fffd| FOTISIDENT retourne les donn|fffd|es de l'agence.
'** La propri|fffd|t|fffd| BRANCHUSER retourne les donn|fffd|es de l'utilisateur.
'**
'** Date de cr|fffd|ation : 02/12/2002      Par : Gr|fffd|gory Van Campe End User Automation.
'** ==================                 =====
'** Date de modification : 29/09/2003  Par : Gr|fffd|gory Van Campe End User Automation.
'** ======================             =====
'** But de la modification :
'** ========================
'**    Remplacer la r|fffd|f|fffd|rence |fffd| la DLL FORIDE par la d|fffd|claration d'un objet afin
'**    de permettre au programme de fonctionner sur les PCs qui n'ont pas la
'**    DLL FORIDE (Ex : PC FOCUS sans PACIFIC).
'**
'** Date de modification : 20/05/2010  Par : Luc Wullus
'** ======================             =====
'** But de la modification :
'** ========================
'**   - XML vervangen door Foride voor gegevens klant.
'**   - Variabelen NAME, ADRE, CITE aangemaakt voor gegevens kantoor in Engelstalige
'**     documenten en dit aan de hand van de postcode
'**     (onderscheid Vlaamse - Franstalige gemeenten).
'**********************************************************************************

Private Function NAME(MyObjInfoAgence As Object) As String
   Dim ZipStr As String, Zip1Str As String, Zip2Str As String
   Dim NamNStr As String, NamFStr As String
   ZipStr = MyObjInfoAgence.ZIP
   Zip1Str = Mid(Trim(ZipStr), 1, 1)
   Select Case Zip1Str
      Case "1"
         Zip2Str = Mid(Trim(ZipStr), 1, 2)
         Select Case Zip2Str
            Case "10", "11", "12", "13", "14"
               NAME = MyObjInfoAgence.NAMF
               If (Trim(NAME) = "") Then NAME = MyObjInfoAgence.NAMN
            Case "15", "16", "17", "18", "19"
               NAME = MyObjInfoAgence.NAMN
               If (Trim(NAME) = "") Then NAME = MyObjInfoAgence.NAMF
         End Select
      Case "2", "3", "8", "9"
         NAME = MyObjInfoAgence.NAMN
         If (Trim(NAME) = "") Then NAME = MyObjInfoAgence.NAMF
      Case "4", "5", "6", "7"
         NAME = MyObjInfoAgence.NAMF
         If (Trim(NAME) = "") Then NAME = MyObjInfoAgence.NAMN
   End Select
End Function

Private Function ADRE(MyObjInfoAgence As Object) As String
   Dim ZipStr As String, Zip1Str As String, Zip2Str As String
   Dim ADRNStr As String, ADRFStr As String
   ZipStr = MyObjInfoAgence.ZIP
   Zip1Str = Mid(Trim(ZipStr), 1, 1)
   Select Case Zip1Str
      Case "1"
         Zip2Str = Mid(Trim(ZipStr), 1, 2)
         Select Case Zip2Str
            Case "10", "11", "12", "13", "14"
               ADRE = MyObjInfoAgence.ADRF
               If (Trim(ADRE) = "") Then ADRE = MyObjInfoAgence.ADRN
            Case "15", "16", "17", "18", "19"
               ADRE = MyObjInfoAgence.ADRN
               If (Trim(ADRE) = "") Then ADRE = MyObjInfoAgence.ADRF
         End Select
      Case "2", "3", "8", "9"
         ADRE = MyObjInfoAgence.ADRN
         If (Trim(ADRE) = "") Then ADRE = MyObjInfoAgence.ADRF
      Case "4", "5", "6", "7"
         ADRE = MyObjInfoAgence.ADRF
         If (Trim(ADRE) = "") Then ADRE = MyObjInfoAgence.ADRN
   End Select
End Function

Private Function CITE(MyObjInfoAgence As Object) As String
   Dim ZipStr As String, Zip1Str As String, Zip2Str As String
   Dim CITNStr As String, CITFStr As String
   ZipStr = MyObjInfoAgence.ZIP
   Zip1Str = Mid(Trim(ZipStr), 1, 1)
   Select Case Zip1Str
      Case "1"
         Zip2Str = Mid(Trim(ZipStr), 1, 2)
         Select Case Zip2Str
            Case "10", "11", "12", "13", "14"
               CITE = MyObjInfoAgence.CITF
               If (Trim(CITE) = "") Then CITE = MyObjInfoAgence.CITN
            Case "15", "16", "17", "18", "19"
               CITE = MyObjInfoAgence.CITN
               If (Trim(CITE) = "") Then CITE = MyObjInfoAgence.CITF
         End Select
      Case "2", "3", "8", "9"
         CITE = MyObjInfoAgence.CITN
         If (Trim(CITE) = "") Then CITE = MyObjInfoAgence.CITF
      Case "4", "5", "6", "7"
         CITE = MyObjInfoAgence.CITF
         If (Trim(CITE) = "") Then CITE = MyObjInfoAgence.CITN
   End Select
End Function


Public Property Get InfoAgence(ByVal SInfo As String) As String
'// This procedure has been remediated by User Productivity Services
'// Date: 2013-06-07 10:19
'// Details:
'@@110+-110@@
'<     Application.FileSearch.FileName = "Foride.txt"
'> '    Application.FileSearch.FileName = "Foride.txt"
'@@111+-111@@
'<     Application.FileSearch.LookIn = "V:\DS_Tools\Data"
'> '    Application.FileSearch.LookIn = "V:\DS_Tools\Data"
'@@112+-112@@
'<     Application.FileSearch.Execute
'> '    Application.FileSearch.Execute
'@@113+-113@@
'<     If (Application.FileSearch.FoundFiles.count = 0) Then GoTo RealAgency
'> '    If (Application.FileSearch.FoundFiles.count = 0) Then GoTo RealAgency
'@@115--0@@
'> TestAgency:
'@@0++115,119@@
'>     App_SearchFileName = "Foride.txt"
'>     App_SearchLookIn = "V:\DS_Tools\Data"
'>     App_SearchExecute
'>     If (App_SearchFoundFiles.count = 0) Then GoTo RealAgency
'> TestAgency:
    '*********************************************
    '* Recherche des informations de l'agence
    '*********************************************

'    Application.FileSearch.FileName = "Foride.txt"
'    Application.FileSearch.LookIn = "V:\DS_Tools\Data"
'    Application.FileSearch.Execute
'    If (Application.FileSearch.FoundFiles.count = 0) Then GoTo RealAgency
    
    App_SearchFileName = "Foride.txt"
    App_SearchLookIn = "V:\DS_Tools\Data"
    App_SearchExecute
    If (App_SearchFoundFiles.count = 0) Then GoTo RealAgency
TestAgency:
     
     Select Case UCase(SInfo)
        Case "BKA"
            InfoAgence = "012345"
        Case "NAMF"
            InfoAgence = "Tour Astro"
        Case "NAMN"
            InfoAgence = "Astrotoren"
        Case "NAMD"
            InfoAgence = "Astroturm"
         Case "NAME"
            InfoAgence = "Astrotower"
        Case "ADRN"
            InfoAgence = "Sterrenkundelaan 14"
        Case "ADRF"
            InfoAgence = "Avenu de l'astronomie 14"
        Case "ADRD"
            InfoAgence = "Sternkundeallee 14"
         Case "ADRE"
            InfoAgence = "Astronomy Avenue"
        Case "CITN"
            InfoAgence = "Brussel"
        Case "CITF"
            InfoAgence = "Bruxelles"
        Case "CITD"
            InfoAgence = "Br|fffd|ssel"
         Case "CITE"
            InfoAgence = "Brussels"
        Case "ZIP"
            InfoAgence = "1210"
        Case "TEL"
            InfoAgence = "02/228.14.53"
        Case "FAX"
            InfoAgence = "02/565.81.44"
        Case "MANAGER"
            InfoAgence = "Stassyns Sonja"
        Case "CDNU"
            InfoAgence = ""
        Case "IC"
            InfoAgence = ""
        Case "ENV"
            InfoAgence = ""
        Case "Scope"
            InfoAgence = ""
        Case "SERVER"
            InfoAgence = ""
        Case "KNCI"
            InfoAgence = "KNCI"
        Case "HLPH"
            InfoAgence = ""
        Case "DIRB"
            InfoAgence = ""
        Case "TND"
            InfoAgence = ""
        Case "ELDO"
            InfoAgence = ""
        Case "ACCO"
            InfoAgence = ""
        Case "SPBE"
            InfoAgence = ""
        Case "TEST"
            InfoAgence = ""
        Case "IMS"
            InfoAgence = ""
        Case Else
            InfoAgence = ""
    End Select
    Exit Property
    
RealAgency:

    On Error GoTo err_InfoAgence
    
    Dim MyObjInfoAgence As Object
    Set MyObjInfoAgence = CreateObject("FotisIdent.FotisIdent.1")
   
    Select Case UCase(SInfo)
        Case "BKA"
            InfoAgence = MyObjInfoAgence.BKA
        Case "NAMF"
            InfoAgence = MyObjInfoAgence.NAMF
        Case "NAMN"
            InfoAgence = MyObjInfoAgence.NAMN
        Case "NAMD"
            InfoAgence = MyObjInfoAgence.NAMD
        Case "NAME"
            InfoAgence = NAME(MyObjInfoAgence)
        Case "ADRN"
            InfoAgence = MyObjInfoAgence.ADRN
        Case "ADRF"
            InfoAgence = MyObjInfoAgence.ADRF
        Case "ADRD"
            InfoAgence = MyObjInfoAgence.ADRD
        Case "ADRE"
            InfoAgence = ADRE(MyObjInfoAgence)
        Case "CITN"
            InfoAgence = MyObjInfoAgence.CITN
        Case "CITF"
            InfoAgence = MyObjInfoAgence.CITF
        Case "CITD"
            InfoAgence = MyObjInfoAgence.CITD
        Case "CITE"
            InfoAgence = CITE(MyObjInfoAgence)
        Case "ZIP"
            InfoAgence = MyObjInfoAgence.ZIP
        Case "TEL"
            InfoAgence = MyObjInfoAgence.TEL
        Case "FAX"
            InfoAgence = MyObjInfoAgence.FAX
        Case "MANAGER"
            InfoAgence = MyObjInfoAgence.MANAGER
        Case "CDNU"
            InfoAgence = MyObjInfoAgence.CDNU
        Case "IC"
            InfoAgence = MyObjInfoAgence.IC
        Case "ENV"
            InfoAgence = MyObjInfoAgence.ENV
        Case "Scope"
            InfoAgence = MyObjInfoAgence.Scope
        Case "SERVER"
            InfoAgence = MyObjInfoAgence.SERVER
        Case "KNCI"
            InfoAgence = MyObjInfoAgence.KNCI
        Case "HLPH"
            InfoAgence = MyObjInfoAgence.HLPH
        Case "DIRB"
            InfoAgence = MyObjInfoAgence.DIRB
        Case "TND"
            InfoAgence = MyObjInfoAgence.TND
        Case "ELDO"
            InfoAgence = MyObjInfoAgence.ELDO
        Case "ACCO"
            InfoAgence = MyObjInfoAgence.ACCO
        Case "SPBE"
            InfoAgence = MyObjInfoAgence.SPBE
        Case "TEST"
            InfoAgence = MyObjInfoAgence.TEST
        Case "IMS"
            InfoAgence = MyObjInfoAgence.IMS
        Case Else
            InfoAgence = ""
    End Select
    
    Set MyObjInfoAgence = Nothing
    Exit Property
    
err_InfoAgence:
    InfoAgence = ""
End Property

Public Property Get InfoUser(ByVal SInfoUsr As String) As String
'// This procedure has been remediated by User Productivity Services
'// Date: 2013-06-07 10:19
'// Details:
'@@299+-299@@
'< Application.FileSearch.FileName = "Foride.txt"
'> 'Application.FileSearch.FileName = "Foride.txt"
'@@300+-300@@
'<     Application.FileSearch.LookIn = "V:\DS_Tools\Data"
'> '    Application.FileSearch.LookIn = "V:\DS_Tools\Data"
'@@301+-301@@
'<     Application.FileSearch.Execute
'> '    Application.FileSearch.Execute
'@@302+-302@@
'<     If (Application.FileSearch.FoundFiles.count = 0) Then GoTo RealAgency
'> '    If (Application.FileSearch.FoundFiles.count = 0) Then GoTo RealAgency
'@@304--0@@
'> TestAgency:
'@@0++304,308@@
'>     App_SearchFileName = "Foride.txt"
'>     App_SearchLookIn = "V:\DS_Tools\Data"
'>     App_SearchExecute
'>     If (App_SearchFoundFiles.count = 0) Then GoTo RealAgency
'> TestAgency:
    '*********************************************
    '* Recherche des informations de l'agence
    '*********************************************
    
   
'Application.FileSearch.FileName = "Foride.txt"
'    Application.FileSearch.LookIn = "V:\DS_Tools\Data"
'    Application.FileSearch.Execute
'    If (Application.FileSearch.FoundFiles.count = 0) Then GoTo RealAgency

    App_SearchFileName = "Foride.txt"
    App_SearchLookIn = "V:\DS_Tools\Data"
    App_SearchExecute
    If (App_SearchFoundFiles.count = 0) Then GoTo RealAgency
TestAgency:

    Select Case UCase(SInfoUsr)
        Case "CURRENTUSER"
            InfoUser = "INT\u79685"
        Case "USERLANGUAGE"
            InfoUser = "Nederlands"
        Case "USERNAME"
            InfoUser = "Wullus Luc"
        Case "CURRENTUSERS"
            InfoUser = ""
        Case "AllUSERS"
            InfoUser = ""
        Case Else
            InfoUser = ""
    End Select
    
    Exit Property


RealAgency:

    On Error GoTo err_InfoUser
    
    Dim MyObjInfoUser As Object
    Set MyObjInfoUser = CreateObject("BranchUser.BranchUser.1")
    
    Select Case UCase(SInfoUsr)
        Case "CURRENTUSER"
            InfoUser = MyObjInfoUser.CurrentUser
        Case "USERLANGUAGE"
            InfoUser = MyObjInfoUser.UserLanguage
        Case "USERNAME"
            InfoUser = MyObjInfoUser.UserName
        Case "CURRENTUSERS"
            InfoUser = MyObjInfoUser.CurrentUsers
        Case "AllUSERS"
            InfoUser = MyObjInfoUser.AllUsers
        Case Else
            InfoUser = ""
    End Select
    
    Set MyObjInfoUser = Nothing
    Exit Property
    
err_InfoUser:
    InfoUser = ""
End Property


Public Property Get InfoClient(ByVal SInfoCli As String) As String
'// This procedure has been remediated by User Productivity Services
'// Date: 2013-06-07 10:19
'// Details:
'@@386+-386@@
'<    Application.FileSearch.FileName = "Foride.txt"
'> '   Application.FileSearch.FileName = "Foride.txt"
'@@387+-387@@
'<    Application.FileSearch.LookIn = "V:\DS_Tools\Data"
'> '   Application.FileSearch.LookIn = "V:\DS_Tools\Data"
'@@388+-388@@
'<    Application.FileSearch.Execute
'> '   Application.FileSearch.Execute
'@@389+-389@@
'<    If (Application.FileSearch.FoundFiles.count = 0) Then GoTo RealAgency
'> '   If (Application.FileSearch.FoundFiles.count = 0) Then GoTo RealAgency
'@@391--0@@
'> TestAgency:
'@@0++391,395@@
'>     App_SearchFileName = "Foride.txt"
'>     App_SearchLookIn = "V:\DS_Tools\Data"
'>     App_SearchExecute
'>     If (App_SearchFoundFiles.count = 0) Then GoTo RealAgency
'> TestAgency:
   '*********************************************
   '* Opzoeking informatie van de klant
   '*********************************************
   
'   Application.FileSearch.FileName = "Foride.txt"
'   Application.FileSearch.LookIn = "V:\DS_Tools\Data"
'   Application.FileSearch.Execute
'   If (Application.FileSearch.FoundFiles.count = 0) Then GoTo RealAgency

    App_SearchFileName = "Foride.txt"
    App_SearchLookIn = "V:\DS_Tools\Data"
    App_SearchExecute
    If (App_SearchFoundFiles.count = 0) Then GoTo RealAgency
TestAgency:

   Select Case UCase(SInfoCli)
      Case "ACNTYPTIT1"
         InfoClient = "ACNTYPTIT1"
      Case "ADR_11"
         InfoClient = "ADR_11"
      Case "ADR_21"
         InfoClient = "ADR_21"
      Case "ADR_ID_11"
         InfoClient = "ADR_ID_11"
      Case "ADR_ID_21"
         InfoClient = "ADR_ID_21"
      Case "ADR_ID1"
         InfoClient = "ADR_ID1"
      Case "ADR1"
         InfoClient = "ADR1"
      Case "ADRBOX_11"
         InfoClient = "ADRBOX_11"
      Case "ADRBOX_21"
         InfoClient = "ADRBOX_21"
      Case "ADRBOX1"
         InfoClient = "ADRBOX1"
      Case "ADRNBR_11"
         InfoClient = "ADRNBR_11"
      Case "ADRNBR_21"
         InfoClient = "ADRNBR_21"
      Case "ADRNBR1"
         InfoClient = "ADRNBR1"
      Case "ADRPFX_11"
         InfoClient = "ADRPFX_11"
      Case "ADRPFX_21"
         InfoClient = "ADRPFX_21"
      Case "ADRPFX1"
         InfoClient = "ADRPFX1"
      Case "ADRSTR_11"
         InfoClient = "ADRSTR_11"
      Case "ADRSTR_21"
         InfoClient = "ADRSTR_21"
      Case "ADRSTR1"
         InfoClient = "ADRSTR1"
      Case "AGE1"
         InfoClient = "AGE1"
      Case "ASL1"
         InfoClient = "ASL1"
      Case "ASLCAT1"
         InfoClient = "ASLCAT1"
      Case "BIRDAT1"
         InfoClient = "29/03/1961"
      Case "BIRDAT2"
         InfoClient = "30/04/1962"
      Case "BIRPLA1"
         InfoClient = "BIRPLA1"
      Case "BIRPLA2"
         InfoClient = "BIRPLA2"
      Case "BUC_ID1"
         InfoClient = "BUC_ID1"
      Case "BUC_IDLAB1"
         InfoClient = "BUC_IDLAB1"
      Case "CDB_ID1"
         InfoClient = "CDB_ID1"
      Case "CDB_ID2"
         InfoClient = "CDB_ID2"
      Case "CIV1"
         InfoClient = "CIV1"
      Case "CLITYP1"
         InfoClient = "CLITYP1"
      Case "CRDVLDDAT1"
         InfoClient = "CRDVLDDAT1"
      Case "ID_DAT1"
         InfoClient = "02/01/2010"
      Case "CREDAT1"
         InfoClient = "05/07/1997"
      Case "DIEDAT1"
         InfoClient = "06/08/1998"
      Case "EMA_11"
         InfoClient = "EMA_11"
      Case "EMA_21"
         InfoClient = "EMA_21"
      Case "FAX_11"
         InfoClient = "FAX_11"
      Case "FAX_21"
         InfoClient = "FAX_21"
      Case "FAX1"
         InfoClient = "FAX1"
      Case "FSTNAM1"
         InfoClient = "FSTNAM1"
      Case "FSTNAM2"
         InfoClient = "FSTNAM2"
      Case "GSM1"
         InfoClient = "GSM1"
      Case "HOMBAN1"
         InfoClient = "HOMBAN1"
      Case "IDTCRD1"
         InfoClient = "IDTCRD1"
      Case "ID_NBR1"
         InfoClient = "ID_NBR1"
      Case "ININAM1"
         InfoClient = "ININAM1"
      Case "JUR1"
         InfoClient = "JUR1"
      Case "JURCAP1"
         InfoClient = "JURCAP1"
      Case "JURCLA1"
         InfoClient = "JURCLA1"
      Case "JURFRM1"
         InfoClient = "JURFRM1"
      Case "JURNAM1"
         InfoClient = "JURNAM1"
      Case "JURNAMSHO1"
         InfoClient = "JURNAMSHO1"
      Case "JURSIT1"
         InfoClient = "JURSIT1"
      Case "JURSTA1"
         InfoClient = "JURSTA1"
      Case "LAN1"
         InfoClient = "LAN1"
      Case "LANCLI1"
         InfoClient = "LANCLI1"
      Case "LOC_11"
         InfoClient = "LOC_11"
      Case "LOC_21"
         InfoClient = "LOC_21"
      Case "LOC1"
         InfoClient = "LOC1"
      Case "NAM1"
         InfoClient = "NAM1"
      Case "NAM2"
         InfoClient = "NAM2"
      Case "NAT_11"
         InfoClient = "NAT_11"
      Case "NAT_21"
         InfoClient = "NAT_21"
      Case "NAT1"
         InfoClient = "NAT1"
      Case "NTT1"
         InfoClient = "NTT1"
      Case "NXTNAM1"
         InfoClient = "NXTNAM1"
      Case "SEX1"
         InfoClient = "SEX1"
      Case "SEX2"
         InfoClient = "SEX2"
      Case "TEL_11"
         InfoClient = "TEL_11"
      Case "TEL_21"
         InfoClient = "TEL_21"
      Case "TEL1"
         InfoClient = "TEL1"
      Case "TEL2"
         InfoClient = "TEL2"
      Case "TIT1"
         InfoClient = "TIT1"
      Case "TITDSC"
         InfoClient = "TITDSC"
      Case "USENAM1"
         InfoClient = "USENAM1"
      Case "VAT1"
         InfoClient = "VAT1"
      Case "ZIP_11"
         InfoClient = "ZIP_11"
      Case "ZIP_21"
         InfoClient = "ZIP_21"
      Case "ZIP1"
         InfoClient = "ZIP1"
      Case Else
         InfoClient = ""
   End Select
   
   Exit Property


RealAgency:

   On Error GoTo err_InfoClient
   
   Dim MyObjInfoClient As Object
   Set MyObjInfoClient = CreateObject("CliData.CliData.1")
   
   Select Case UCase(SInfoCli)
      Case "ACNTYPTIT1"
         InfoClient = MyObjInfoClient.ACNTYPTIT1("1")
      Case "ADR_11"
         InfoClient = MyObjInfoClient.ADR_11("1")
      Case "ADR_21"
         InfoClient = MyObjInfoClient.ADR_21("1")
      Case "ADR_ID_11"
         InfoClient = MyObjInfoClient.ADR_ID_11("1")
      Case "ADR_ID_21"
         InfoClient = MyObjInfoClient.ADR_ID_21("1")
      Case "ADR_ID1"
         InfoClient = MyObjInfoClient.ADR_ID1("1")
      Case "ADR1"
         InfoClient = MyObjInfoClient.ADR1("1")
      Case "ADRBOX_11"
         InfoClient = MyObjInfoClient.ADRBOX_11("1")
      Case "ADRBOX_21"
         InfoClient = MyObjInfoClient.ADRBOX_21("1")
      Case "ADRBOX1"
         InfoClient = MyObjInfoClient.ADRBOX1("1")
      Case "ADRNBR_11"
         InfoClient = MyObjInfoClient.ADRNBR_11("1")
      Case "ADRNBR_21"
         InfoClient = MyObjInfoClient.ADRNBR_21("1")
      Case "ADRNBR1"
         InfoClient = MyObjInfoClient.ADRNBR1("1")
      Case "ADRPFX_11"
         InfoClient = MyObjInfoClient.ADRPFX_11("1")
      Case "ADRPFX_21"
         InfoClient = MyObjInfoClient.ADRPFX_21("1")
      Case "ADRPFX1"
         InfoClient = MyObjInfoClient.ADRPFX1("1")
      Case "ADRSTR_11"
         InfoClient = MyObjInfoClient.ADRSTR_11("1")
      Case "ADRSTR_21"
         InfoClient = MyObjInfoClient.ADRSTR_21("1")
      Case "ADRSTR1"
         InfoClient = MyObjInfoClient.ADRSTR1("1")
      Case "AGE1"
         InfoClient = MyObjInfoClient.AGE1("1")
      Case "ASL1"
         InfoClient = MyObjInfoClient.ASL1("1")
      Case "ASLCAT1"
         InfoClient = MyObjInfoClient.ASLCAT1("1")
      Case "BIRDAT1"
         InfoClient = MyObjInfoClient.BIRDAT1("1")
      Case "BIRDAT2"
         InfoClient = MyObjInfoClient.BIRDAT2("1")
      Case "BIRPLA1"
         InfoClient = MyObjInfoClient.BIRPLA1("1")
      Case "BIRPLA2"
         InfoClient = MyObjInfoClient.BIRPLA2("1")
      Case "BUC_ID1"
         InfoClient = MyObjInfoClient.BUC_ID1("1")
      Case "BUC_IDLAB1"
         InfoClient = MyObjInfoClient.BUC_IDLAB1("1")
      Case "CDB_ID1"
         InfoClient = MyObjInfoClient.CDB_ID1("1")
      Case "CDB_ID2"
         InfoClient = MyObjInfoClient.CDB_ID2("1")
      Case "CIV1"
         InfoClient = MyObjInfoClient.CIV1("1")
      Case "CLITYP1"
         InfoClient = MyObjInfoClient.CLITYP1("1")
      Case "CRDVLDDAT1"
         InfoClient = MyObjInfoClient.CRDVLDDAT1("1")
      Case "ID_DAT1"
         InfoClient = MyObjInfoClient.ID_DAT1("1")
      Case "CREDAT1"
         InfoClient = MyObjInfoClient.CREDAT1("1")
      Case "DIEDAT1"
         InfoClient = MyObjInfoClient.DIEDAT1("1")
      Case "EMA_11"
         InfoClient = MyObjInfoClient.EMA_11("1")
      Case "EMA_21"
         InfoClient = MyObjInfoClient.EMA_21("1")
      Case "FAX_11"
         InfoClient = MyObjInfoClient.FAX_11("1")
      Case "FAX_21"
         InfoClient = MyObjInfoClient.FAX_21("1")
      Case "FAX1"
         InfoClient = MyObjInfoClient.FAX1("1")
      Case "FSTNAM1"
         InfoClient = MyObjInfoClient.FSTNAM1("1")
      Case "FSTNAM2"
         InfoClient = MyObjInfoClient.FSTNAM2("1")
      Case "GSM1"
         InfoClient = MyObjInfoClient.GSM1("1")
      Case "HOMBAN1"
         InfoClient = MyObjInfoClient.HOMBAN1("1")
      Case "IDTCRD1"
         InfoClient = MyObjInfoClient.IDTCRD1("1")
      Case "ID_NBR1"
         InfoClient = MyObjInfoClient.ID_NBR1("1")
      Case "ININAM1"
         InfoClient = MyObjInfoClient.ININAM1("1")
      Case "JUR1"
         InfoClient = MyObjInfoClient.JUR1("1")
      Case "JURCAP1"
         InfoClient = MyObjInfoClient.JURCAP1("1")
      Case "JURCLA1"
         InfoClient = MyObjInfoClient.JURCLA1("1")
      Case "JURFRM1"
         InfoClient = MyObjInfoClient.JURFRM1("1")
      Case "JURNAM1"
         InfoClient = MyObjInfoClient.JURNAM1("1")
      Case "JURNAMSHO1"
         InfoClient = MyObjInfoClient.JURNAMSHO1("1")
      Case "JURSIT1"
         InfoClient = MyObjInfoClient.JURSIT1("1")
      Case "JURSTA1"
         InfoClient = MyObjInfoClient.JURSTA1("1")
      Case "LAN1"
         InfoClient = MyObjInfoClient.LAN1("1")
      Case "LANCLI1"
         InfoClient = MyObjInfoClient.LANCLI1("1")
      Case "LOC_11"
         InfoClient = MyObjInfoClient.LOC_11("1")
      Case "LOC_21"
         InfoClient = MyObjInfoClient.LOC_21("1")
      Case "LOC1"
         InfoClient = MyObjInfoClient.LOC1("1")
      Case "NAM1"
         InfoClient = MyObjInfoClient.NAM1("1")
      Case "NAM2"
         InfoClient = MyObjInfoClient.NAM2("1")
      Case "NAT_11"
         InfoClient = MyObjInfoClient.NAT_11("1")
      Case "NAT_21"
         InfoClient = MyObjInfoClient.NAT_21("1")
      Case "NAT1"
         InfoClient = MyObjInfoClient.NAT1("1")
      Case "NTT1"
         InfoClient = MyObjInfoClient.NTT1("1")
      Case "NXTNAM1"
         InfoClient = MyObjInfoClient.NXTNAM1("1")
      Case "SEX1"
         InfoClient = MyObjInfoClient.SEX1("1")
      Case "SEX2"
         InfoClient = MyObjInfoClient.SEX2("1")
      Case "TEL_11"
         InfoClient = MyObjInfoClient.TEL_11("1")
      Case "TEL_21"
         InfoClient = MyObjInfoClient.TEL_21("1")
      Case "TEL1"
         InfoClient = MyObjInfoClient.TEL1("1")
      Case "TEL2"
         InfoClient = MyObjInfoClient.TEL2("1")
      Case "TIT1"
         InfoClient = MyObjInfoClient.TIT1("1")
      Case "TITDSC"
         InfoClient = MyObjInfoClient.TITDSC("1")
      Case "USENAM1"
         InfoClient = MyObjInfoClient.USENAM1("1")
      Case "VAT1"
         InfoClient = MyObjInfoClient.VAT1("1")
      Case "ZIP_11"
         InfoClient = MyObjInfoClient.ZIP_11("1")
      Case "ZIP_21"
         InfoClient = MyObjInfoClient.ZIP_21("1")
      Case "ZIP1"
         InfoClient = MyObjInfoClient.ZIP1("1")
      Case Else
         InfoClient = ""
   End Select
   
   Set MyObjInfoClient = Nothing
   Exit Property
    
err_InfoClient:
   InfoClient = ""
End Property

Attribute VB_Name = "DocServerRemediation"
Option Explicit

' Constants
' =============================================================================

Private Const MODULE_NAME As String = "DocServerRemediation"
Public Const DOCSERVER_COMMAND_BAR_NAME As String = "DocServer"
Public Const DOCUMENT_PASSWORD As String = "eds"
' Public procedures
' =============================================================================

Public Function HideAllMacroButtons() _
        As Variant

    On Error GoTo EXIT_FUNCTION_ERROR
    
    HideAllMacroButtons = MacroButtonsShowHideAll(False)
    
    Exit Function
EXIT_FUNCTION_ERROR:
    Const PROC_NAME As String = MODULE_NAME & ".HideAllMacroButtons"
    Dim errDescr As String
    errDescr = "Runtime error in {" & PROC_NAME & "}"
    errDescr = errDescr & vbCrLf & vbCrLf & Err.Number & " -> " & Err.Description
    Call Err.Raise( _
            vbObjectError + 512, _
            PROC_NAME, _
            errDescr)
End Function

Public Function ShowAllMacroButtons() _
        As Variant

    On Error GoTo EXIT_FUNCTION_ERROR
    
    ShowAllMacroButtons = MacroButtonsShowHideAll(True)
    
    Exit Function
EXIT_FUNCTION_ERROR:
    Const PROC_NAME As String = MODULE_NAME & ".ShowAllMacroButtons"
    Dim errDescr As String
    errDescr = "Runtime error in {" & PROC_NAME & "}"
    errDescr = errDescr & vbCrLf & vbCrLf & Err.Number & " -> " & Err.Description
    Call Err.Raise( _
            vbObjectError + 512, _
            PROC_NAME, _
            errDescr)
End Function

Public Function CommandBarExists( _
        ByVal inCommandbarname As String) _
        As Boolean
    
    Dim idx As Long
    On Error GoTo EXIT_FUNCTION_ERROR
    
    CommandBarExists = False
    idx = 1
    Do While idx <= Application.CommandBars.count And Not CommandBarExists
        If StrComp(Application.CommandBars(idx).NAME, inCommandbarname, vbTextCompare) = 0 Then
            CommandBarExists = True
        End If
        idx = idx + 1
    Loop

    Exit Function
EXIT_FUNCTION_ERROR:
    Const PROC_NAME As String = MODULE_NAME & ".ShowAllMacroButtons"
    Dim errDescr As String
    errDescr = "Runtime error in {" & PROC_NAME & "}"
    errDescr = errDescr & vbCrLf & vbCrLf & Err.Number & " -> " & Err.Description
    Call Err.Raise( _
            vbObjectError + 512, _
            PROC_NAME, _
            errDescr)
End Function

Public Function CreateDocServerCommandBar() _
        As Office.CommandBar
        
    Dim newCmdBar As Office.CommandBar
    On Error GoTo EXIT_FUNCTION_ERROR

    Set newCmdBar = Application.CommandBars.Add(DOCSERVER_COMMAND_BAR_NAME, msoBarPopup, False, True)
    With newCmdBar
        With .Controls.Add(msoControlButton)
            .caption = "Get Pacific Info"
            .OnAction = "ThisDocument.GetPacificInfo"
        End With
        With .Controls.Add(msoControlButton)
            .caption = "Print..."
            .OnAction = "ThisDocument.FilePrint"
        End With
    End With

    Set CreateDocServerCommandBar = newCmdBar

    Exit Function
EXIT_FUNCTION_ERROR:
    Const PROC_NAME As String = MODULE_NAME & ".CreateDocServerCommandBar"
    Dim errDescr As String
    errDescr = "Runtime error in {" & PROC_NAME & "}"
    errDescr = errDescr & vbCrLf & vbCrLf & Err.Number & " -> " & Err.Description
    Call Err.Raise( _
            vbObjectError + 512, _
            PROC_NAME, _
            errDescr)
End Function

Public Function AddShortCutKey(ByVal sMacroName As String, ByRef oKey As Word.WdKey) As Variant

    Dim keyCd As Long
    Dim keyBndg As Word.KeyBinding
    Dim cmd As String
 
 On Error GoTo EXIT_FUNCTION_ERROR
   
   If ActiveDocument.ProtectionType <> wdNoProtection Then

        '// Unprotect the document (if needed)
        Call ActiveDocument.Unprotect(DOCUMENT_PASSWORD)
    End If

    If ActiveDocument.ProtectionType = wdNoProtection Then

        Application.CustomizationContext = ThisDocument
        
        keyCd = Application.BuildKeyCode(wdKeyAlt, oKey)
        
        Set keyBndg = Application.FindKey(keyCd)
        
        cmd = sMacroName
        
        If keyBndg Is Nothing Then
        
            Set keyBndg = Application.KeyBindings.Add(Word.WdKeyCategory.wdKeyCategoryMacro, cmd, keyCd)
            
    '        Debug.Print cmd, keyBndg.Command
            
        ElseIf StrComp(keyBndg.Command, cmd, VbCompareMethod.vbTextCompare) <> 0 Then
            
            Set keyBndg = Application.KeyBindings.Add(Word.WdKeyCategory.wdKeyCategoryMacro, cmd, keyCd)
            
    '        Debug.Print cmd, keyBndg.Command
        
        End If
        
         Call ActiveDocument.Protect(wdAllowOnlyFormFields, True, DOCUMENT_PASSWORD)
         
    End If
    
  Exit Function
  
EXIT_FUNCTION_ERROR:

    If ActiveDocument.ProtectionType = wdNoProtection Then
        Call ActiveDocument.Protect(wdAllowOnlyFormFields, True, DOCUMENT_PASSWORD)
    End If

    Const PROC_NAME As String = MODULE_NAME & ".AddShortCutKey"
    Dim errDescr As String
    errDescr = "Runtime error in {" & PROC_NAME & "}"
    errDescr = errDescr & vbCrLf & vbCrLf & Err.Number & " -> " & Err.Description
    Call Err.Raise( _
            vbObjectError + 512, _
            PROC_NAME, _
            errDescr)
End Function
' Private procedures
' =============================================================================

Private Function MacroButtonsShowHideAll( _
        ByVal inVisible As Boolean) _
        As Variant

    Dim frameIdx As Long
    Dim fieldIdx As Long
    Dim found As Boolean
    Dim count As Long
    On Error GoTo EXIT_FUNCTION_ERROR

    If ActiveDocument Is Nothing Then
        Exit Function
    End If

    Application.ScreenUpdating = False
    frameIdx = 1
    Do While frameIdx <= ActiveDocument.Frames.count
        With ActiveDocument.Frames(frameIdx)
            If .Range.Fields.count > 0 Then
                fieldIdx = 1
                found = False
                Do While fieldIdx <= .Range.Fields.count And Not found
                    If .Range.Fields(fieldIdx).Type = wdFieldMacroButton Then
                        count = count + 1
                        Call MacroButtonShowHideSingle(ActiveDocument.Frames(frameIdx), inVisible, count)
                        found = True
                    End If
                    fieldIdx = fieldIdx + 1
                Loop
            End If
        End With
        frameIdx = frameIdx + 1
    Loop
    Application.ScreenUpdating = True

    Exit Function
EXIT_FUNCTION_ERROR:
    Const PROC_NAME As String = MODULE_NAME & ".MacroButtonsShowHideAll"
    Dim errDescr As String
    errDescr = "Runtime error in {" & PROC_NAME & "}"
    errDescr = errDescr & vbCrLf & vbCrLf & Err.Number & " -> " & Err.Description
    Call Err.Raise( _
            vbObjectError + 512, _
            PROC_NAME, _
            errDescr)
End Function

Private Function MacroButtonShowHideSingle( _
        ByRef inFrameObj As Word.Frame, _
        ByVal inVisible As Boolean, _
        ByVal inCount As Long) _
        As Variant

    On Error GoTo EXIT_FUNCTION_ERROR
    
    If ActiveDocument.ProtectionType <> wdNoProtection Then

'// Unprotect the document (if needed)
        Call ActiveDocument.Unprotect(DOCUMENT_PASSWORD)
    End If

    If ActiveDocument.ProtectionType = wdNoProtection Then

        With inFrameObj
            If inVisible Then
                
'                .Width = 80
'                .Height = 20
'                .HorizontalPosition = 50 + (inCount - 1) * 95
'                .VerticalPosition = 40
                
                
                .Borders(wdBorderLeft).LineStyle = wdLineStyleSingle
                .Borders(wdBorderRight).LineStyle = wdLineStyleSingle
                .Borders(wdBorderTop).LineStyle = wdLineStyleSingle
                .Borders(wdBorderBottom).LineStyle = wdLineStyleSingle
                .Borders.Shadow = False
                .Shading.ForegroundPatternColor = 12632256 '14211288
                .Range.Font.ColorIndex = wdAuto
            Else
'                .Width = 0.05
'                .Height = 0.05
'                .HorizontalPosition = 0
'                .VerticalPosition = 0

                .Borders(wdBorderLeft).LineStyle = wdLineStyleNone
                .Borders(wdBorderRight).LineStyle = wdLineStyleNone
                .Borders(wdBorderTop).LineStyle = wdLineStyleNone
                .Borders(wdBorderBottom).LineStyle = wdLineStyleNone
                .Borders.Shadow = False
                .Shading.ForegroundPatternColor = 16777215
                .Range.Font.ColorIndex = wdWhite
            End If
        End With

'// Protect the document back.
        Call ActiveDocument.Protect(wdAllowOnlyFormFields, True, DOCUMENT_PASSWORD)
    End If
    
    Exit Function
EXIT_FUNCTION_ERROR:
    Const PROC_NAME As String = MODULE_NAME & ".MacroButtonShowHideSingle"
    Dim errDescr As String
    errDescr = "Runtime error in {" & PROC_NAME & "}"
    errDescr = errDescr & vbCrLf & vbCrLf & Err.Number & " -> " & Err.Description
    Call Err.Raise( _
            vbObjectError + 512, _
            PROC_NAME, _
            errDescr)
End Function

'Private Sub ToggleFrameVisibility( _
'        ByVal inMacroButtonCode As String, _
'        ByVal inOn As Boolean)
'
''//
''// Makes the nth frame of the active document visible (inOn = True)
''// or not (inOn = False).
''//
''// Frames indices range from 1 to N.
''//
'
'    Const DOCUMENT_PASSWORD As String = "eds"
'    Dim frObj As Word.Frame
'    Dim borderLineStyle As WdLineStyle
'    Dim shadingFgPatternColor As Long
'    Dim rangeFontColorIndex As WdColorIndex
'    On Error GoTo EXIT_SUB_ERROR
'
''// Find the right frame.
'    Set frObj = FindFrameByMacroButtonCode(inMacroButtonCode)
'    If frObj Is Nothing Then
'        Exit Sub
'    End If
'
'    If ActiveDocument.ProtectionType <> wdNoProtection Then
'
''// Unprotect the document (if needed)
'        Call ActiveDocument.Unprotect(DOCUMENT_PASSWORD)
'    End If
'
''// Set border attributes.
'    borderLineStyle = wdLineStyleNone
'    If inOn Then
'        borderLineStyle = wdLineStyleSingle
'    End If
'
''// Set background attributes.
'    shadingFgPatternColor = 16777215
'    If inOn Then
'        shadingFgPatternColor = 14211288
'    End If
'
''// Set foreground attributes.
'    rangeFontColorIndex = wdWhite
'    If inOn Then
'        rangeFontColorIndex = wdAuto
'    End If
'
'    With frObj
'
''// Apply formatting attributes.
'        .Borders(wdBorderLeft).LineStyle = borderLineStyle
'        .Borders(wdBorderRight).LineStyle = borderLineStyle
'        .Borders(wdBorderTop).LineStyle = borderLineStyle
'        .Borders(wdBorderBottom).LineStyle = borderLineStyle
'        .Borders.Shadow = False
'        With .Shading
'            .ForegroundPatternColor = shadingFgPatternColor
'        End With
'        .Range.Font.ColorIndex = rangeFontColorIndex
'    End With
'
'    If ActiveDocument.ProtectionType = wdNoProtection Then
'
''// Protect the document back.
'        Call ActiveDocument.Protect(wdAllowOnlyFormFields, True, DOCUMENT_PASSWORD)
'    End If
'
'    Set frObj = Nothing
'
'    Exit Sub
'EXIT_SUB_ERROR:
'    Dim errSrc As String
'    Dim errDescr As String
'    errSrc = MODULE_NAME & ".ToggleFrameVisibility"
'    errDescr = "Runtime error in {" & MODULE_NAME & ".ToggleFrameVisibility}"
'    errDescr = errDescr & vbCrLf & vbCrLf & Err.Number & " -> " & Err.Description
'    Call Err.Raise( _
'            vbObjectError + 512, _
'            errSrc, _
'            errDescr)
'End Sub

'Public Function FindFrameByMacroButtonCode( _
'        ByVal inMacroButtonName As String) _
'        As Word.Frame
'
'    Dim found As Boolean
'    Dim frIdx As Long
'    Dim fldObj As Word.Field
'    Dim fldIdx As Long
'    On Error GoTo EXIT_FUNCTION_ERROR
'
'    If ActiveDocument Is Nothing Then
'        Exit Function
'    End If
'
'    inMacroButtonName = Trim$(inMacroButtonName)
'
'    found = False
'    frIdx = 1
'    Do While frIdx <= ActiveDocument.Frames.Count And Not found
'        With ActiveDocument.Frames(frIdx)
'            If .Range.Fields.Count > 0 Then
'                fldIdx = 1
'                Do While fldIdx <= .Range.Fields.Count And Not found
'                    With .Range.Fields(fldIdx)
'                        If StrComp(Trim$(.Code), inMacroButtonName, vbTextCompare) = 0 Then
'                            Set FindFrameByMacroButtonCode = ActiveDocument.Frames(frIdx)
'                            found = True
'                        End If
'                    End With
'                    fldIdx = fldIdx + 1
'                Loop
'            End If
'        End With
'        frIdx = frIdx + 1
'    Loop
'
'    Exit Function
'EXIT_FUNCTION_ERROR:
'    Dim errSrc As String
'    Dim errDescr As String
'    errSrc = MODULE_NAME & ".FindFrameByMacroButtonCode"
'    errDescr = "Runtime error in {" & MODULE_NAME & ".FindFrameByMacroButtonCode}"
'    errDescr = errDescr & vbCrLf & vbCrLf & Err.Number & " -> " & Err.Description
'    Call Err.Raise( _
'            vbObjectError + 512, _
'            errSrc, _
'            errDescr)
'End Function

Attribute VB_Name = "ForcePrinting"
' Bij ForcePrint kan men nu een (optionele) parameter toekennen.
' Indien men wel een parameter toekent kan men voor de klassieke tekst
' nog een bijkomende tekst toevoegen.
'
' Aangepast op 24/03/2009 door Luc Wullus
'
'
' Aangepast op 11/08/2009 door Luc Wullus
'
' Aangepast op 04/02/2010 door Luc Wullus
'
' Aangepast op 10/05/2010 door Luc Wullus
'
' Codes bijgevoegd 10/10/2011 door Luc Wullus
'
Option Base 0
Public SelectedFormFieldName As String
Public ForceringPrint As Boolean
Public DefText As Integer
Public Allowed As Boolean
Public NotAllowed As Boolean
Public BtnClicked As Boolean
Public Veld(999) As Boolean
Public NoMsg As Integer

Public Sub Register()
   Dim k As Integer
   For k = 0 To 999
      Veld(k) = False
   Next k
End Sub

Public Sub Init()
'// This procedure has been remediated by User Productivity Services
'// Date: 2013-06-07 10:19
'// Details:
'@@40--0@@
'>    SelectedFormFieldName = Selection.Bookmarks(1).NAME
'@@0++40,41@@
'> If Selection.Bookmarks.Count > 0 Then
'>    SelectedFormFieldName = Selection.Bookmarks(1).NAME
'@@49--0@@
'> End Sub
'@@0++49,50@@
'> End If
'> End Sub
   ForceringPrint = False
   DefText = 32767
   NoMsg = 32766
   Allowed = True
   NotAllowed = False
   BtnClicked = False
If Selection.Bookmarks.count > 0 Then
   SelectedFormFieldName = Selection.Bookmarks(1).NAME
   If (UCase(Mid(SelectedFormFieldName, 1, 4)) = "IBAN") Then
      Call IBAN.CheckFilledIBAN(SelectedFormFieldName)
   End If
   If (UCase(Mid(SelectedFormFieldName, 1, 4)) = "BBAN") Then
      Call IBAN.CheckFilledBBAN(SelectedFormFieldName)
   End If
   ActiveDocument.FormFields(SelectedFormFieldName).Select
End If
End Sub

Public Function PrintBlanco() As Boolean
   Dim Result As Integer
   If Not Veld(0) Then
      Result = MsgBox("Certaines zones (obligatoires) ne sont pas remplies." & vbCrLf & _
                      "Voulez-vous imprimer malgr|fffd| tout ?", _
                      vbYesNo + vbDefaultButton2 + vbExclamation)
      If (Result = vbYes) Then
         Veld(0) = True
      End If
   End If
   PrintBlanco = Veld(0)
End Function

Public Function ForcePrint(Optional x As Integer = 0, Optional Force As Boolean = False, Optional MsgText As String) As Boolean
   Dim Msg1 As String
   Dim Msg2 As String
   Dim Result As Integer
   Dim aa As Integer
   SelectedFormFieldName = Selection.Bookmarks(1).NAME
   ActiveDocument.FormFields(SelectedFormFieldName).Select
   ForcePrint = True
   aa = ActiveDocument.Bookmarks(SelectedFormFieldName).Range.BookmarkID
'   If Not (ForceringPrint And Force) And Not Veld(aa) Then
   If Not Veld(aa) Then
      Msg1 = ""
      Msg2 = ""
      Select Case x
         Case -2
            Msg1 = "Le total des int|fffd|r|fffd|ts est plus grand que 100 %." & vbCrLf & _
                   "Voulez-vous continuer malgr|fffd| tout ?"
         Case -1
            Msg1 = "Le total des int|fffd|r|fffd|ts est plus petit que 100 %." & vbCrLf & _
                   "Voulez-vous continuer malgr|fffd| tout ?"
         Case 0
            Msg2 = "Certaines zones obligatoires ne sont pas remplies." & vbCrLf & _
                   "Voulez-vous continuer malgr|fffd| tout ?"
         Case 32767
            Msg1 = MsgText & vbCrLf & vbCrLf
            Msg2 = "Voulez-vous continuer malgr|fffd| tout ?"
         Case 32766
            ForcePrint = False
            Exit Function
         Case Else
            Msg1 = DisplayMessage(x, 1) & vbCrLf & vbCrLf
            Msg2 = "Voulez-vous continuer malgr|fffd| tout ?"
      End Select
      If Force Then
         Result = MsgBox(Msg1 & Msg2, vbYesNo + vbDefaultButton2 + vbExclamation)
         If (Result = vbYes) Then
            ForcePrint = True
            ForceringPrint = True
            SelectedFormFieldName = Selection.Bookmarks(1).NAME
            ActiveDocument.FormFields(SelectedFormFieldName).Select
            aa = ActiveDocument.Bookmarks(SelectedFormFieldName).Range.BookmarkID
            Veld(aa) = ForcePrint
         Else
            ForcePrint = False
            SelectedFormFieldName = Selection.Bookmarks(1).NAME
            ActiveDocument.FormFields(SelectedFormFieldName).Select
            aa = ActiveDocument.Bookmarks(SelectedFormFieldName).Range.BookmarkID
            Veld(aa) = ForcePrint
         End If
      Else
         Result = MsgBox(Msg1, vbOKOnly)
         ForcePrint = False
         ForceringPrint = True
         SelectedFormFieldName = Selection.Bookmarks(1).NAME
         ActiveDocument.FormFields(SelectedFormFieldName).Select
         aa = ActiveDocument.Bookmarks(SelectedFormFieldName).Range.BookmarkID
         Veld(aa) = ForcePrint
      End If
   End If
   SelectedFormFieldName = Selection.Bookmarks(1).NAME
   ActiveDocument.FormFields(SelectedFormFieldName).Select
End Function


Public Function DisplayMessage(NumMessage As Integer, Optional y As Integer = 0) As String
   Select Case NumMessage
      Case 1
         DisplayMessage = "Le nom de l'agence n'est pas compl|fffd|t|fffd|."
      Case 2
         DisplayMessage = "Le nom n'est pas compl|fffd|t|fffd|."
      Case 3
         DisplayMessage = "La localit|fffd| n'est pas compl|fffd|t|fffd|e."
      Case 4
         DisplayMessage = "Le code postal n'est pas compl|fffd|t|fffd|."
      Case 5
         DisplayMessage = "Le N|fffd| de compte n'est pas compl|fffd|t|fffd|."
      Case 6
         DisplayMessage = "Le pr|fffd|nom n'est pas compl|fffd|t|fffd|."
      Case 7
         DisplayMessage = "Le nom de la rue n'est pas compl|fffd|t|fffd|."
      Case 8
         DisplayMessage = "Le N|fffd| de la maison n'est pas compl|fffd|t|fffd|."
      Case 9
         DisplayMessage = "Le montant n'est pas compl|fffd|t|fffd|."
      Case 91
         DisplayMessage = "Le pourcentage n'est pas compl|fffd|t|fffd|."
      Case 92
         DisplayMessage = "Le nombre ou le pourcentage n'est pas compl|fffd|t|fffd|."
      Case 93
         DisplayMessage = "La quantit|fffd|e n'est pas compl|fffd|t|fffd|e."
      Case 10
         DisplayMessage = "La date n'est pas compl|fffd|t|fffd|e."
      Case 11
         DisplayMessage = "SFI ou RFG n'est pas coch|fffd|."
      Case 12
         DisplayMessage = "Monsieur, Madame ou Mademoiselle n'est pas coch|fffd|."
      Case 121
         DisplayMessage = "Monsieur ou Madame n'est pas coch|fffd|."
      Case 13
         DisplayMessage = "Veuillez cocher si vous |fffd|tes PFB ou pas."
      Case 14
         DisplayMessage = "La date de naissance n'est pas compl|fffd|t|fffd|e."
      Case 15
         DisplayMessage = "Le lieu de naissance n'est pas compl|fffd|t|fffd|."
      Case 16
         DisplayMessage = "Le N|fffd| de contrat / r|fffd|f|fffd|rence n'est pas compl|fffd|t|fffd|."
      Case 161
         DisplayMessage = "Le N|fffd| de contrat n'est pas compl|fffd|t|fffd|."
      Case 162
         DisplayMessage = "Faute dans le N|fffd| de contrat."
      Case 163
         DisplayMessage = "Le N|fffd| de r|fffd|f|fffd|rence n'est pas compl|fffd|t|fffd|."
      Case 165
         DisplayMessage = "Le N|fffd| de cr|fffd|dit n'est pas compl|fffd|t|fffd|."
      Case 166
         DisplayMessage = "Faute dans le N|fffd| de cr|fffd|dit."
      Case 167
         DisplayMessage = "Le N|fffd| de dossier n'est pas compl|fffd|t|fffd|."
      Case 169
         DisplayMessage = "Le N|fffd| du coffre n'est pas compl|fffd|t|fffd|."
      Case 17
         DisplayMessage = "Le motif du remboursement n'est pas coch|fffd|."
      Case 18
         DisplayMessage = "Le lieu o|fffd| le document a |fffd|t|fffd| compl|fffd|t|fffd| n'est pas mentionn|fffd|."
      Case 19
         DisplayMessage = "Le motif 'cessation d'activit|fffd|' ne peut se faire qu'avec un S.F.I."
      Case 20
         DisplayMessage = "Le N|fffd| BUC de l'agence n'est pas compl|fffd|t|fffd|."
      Case 201
         DisplayMessage = "L'index de transmission n'est pas compl|fffd|t|fffd|."
      Case 202
         DisplayMessage = "L'adresse de l'agence n'est pas compl|fffd|t|fffd|."
      Case 203
         DisplayMessage = "Le code postal de l'agence n'est pas compl|fffd|t|fffd|."
      Case 204
         DisplayMessage = "La lieu de l'agence n'est pas compl|fffd|t|fffd|e."
      Case 21
         DisplayMessage = "Le N|fffd| de t|fffd|l|fffd|phone de l'agence n'est pas compl|fffd|t|fffd|."
      Case 22
         DisplayMessage = "La d|fffd|nomination n'est pas compl|fffd|t|fffd|e."
      Case 23
         DisplayMessage = "La forme juridique n'est pas compl|fffd|t|fffd|e."
      Case 231
         DisplayMessage = "Le nom juridique n'est pas compl|fffd|t|fffd|."
      Case 24
         DisplayMessage = "La modification d|fffd|sir|fffd|e n'est pas coch|fffd|e."
      Case 25
         DisplayMessage = "Le type de couverture n'est pas coch|fffd|."
      Case 26
         DisplayMessage = "Le type de s|fffd|ret|fffd| n'est pas coch|fffd|."
      Case 27
         DisplayMessage = "Aucun choix n'est coch|fffd|."
      Case 28
         DisplayMessage = "Le N|fffd| de t|fffd|l|fffd|phone n'est pas compl|fffd|t|fffd|."
      Case 29
         DisplayMessage = "Le N|fffd| de TVA n'est pas compl|fffd|t|fffd|."
      Case 291
         DisplayMessage = "Le RPM n'est pas compl|fffd|t|fffd|."
      Case 30
         DisplayMessage = "Le N|fffd| de police n'est pas compl|fffd|t|fffd|."
      Case 301
         DisplayMessage = "Faute dans le N|fffd| de police."
      Case 31
         DisplayMessage = "Le N|fffd| de sinistre n'est pas compl|fffd|t|fffd|."
      Case 32
         DisplayMessage = "Le N|fffd| de carte d'identit|fffd| n'est pas compl|fffd|t|fffd|."
      Case 321
         DisplayMessage = "La date de validit|fffd| de la carte d'identit|fffd| n'est pas compl|fffd|t|fffd|e."
      Case 33
         DisplayMessage = "La date de d|fffd|c|fffd|s n'est pas compl|fffd|t|fffd|."
      Case 34
         DisplayMessage = "Le N|fffd| de Fax de l'agence n'est pas compl|fffd|t|fffd|."
      Case 341
         DisplayMessage = "L'adresse e-mail de l'agence n'est pas compl|fffd|t|fffd|."
      Case 35
         DisplayMessage = "Le N|fffd| de Fax n'est pas compl|fffd|t|fffd|."
      Case 36
         DisplayMessage = "L'heure n'est pas compl|fffd|t|fffd|e."
      Case 37
         DisplayMessage = "L'adresse n'est pas compl|fffd|t|fffd|e."
      Case 38
         DisplayMessage = "Le N|fffd| PSP n'est pas compl|fffd|t|fffd|."
      Case 39
         DisplayMessage = "Le num|fffd|ro n'est pas compl|fffd|t|fffd|."
      Case 40
         DisplayMessage = "Aucun choix n'est coch|fffd|."
      Case 41
         DisplayMessage = "Aucun nom n'est compl|fffd|t|fffd|."
      Case 42
         DisplayMessage = "Aucun pr|fffd|nom n'est compl|fffd|t|fffd|."
      Case 43
         DisplayMessage = "Plus d'un choix est coch|fffd|."
      Case 44
         DisplayMessage = "Aucune langue n'est compl|fffd|t|fffd|e."
      Case 45
         DisplayMessage = "Plus d'une langue est coch|fffd|."
      Case 46
         DisplayMessage = "Ou bien 'oui' ou bien 'non' doit |fffd|tre coch|fffd|."
      Case 47
         DisplayMessage = "Vous ne pouvez pas cocher 'oui' et 'non' en m|fffd|me temps."
      Case 48
         DisplayMessage = "Le N|fffd| de la carte n'est pas compl|fffd|t|fffd|."
      Case 49
         DisplayMessage = "La date |fffd| laquelle le document a |fffd|t|fffd| compl|fffd|t|fffd| n'est pas mentionn|fffd|e."
      Case 50
         DisplayMessage = "Cette zone n'est pas compl|fffd|t|fffd|e."
'      Case 51
'         DisplayMessage = "REMARQUE IMPORTANTE" & vbCrLf & vbCrLf & _
         "CE DOCUMENT EST ADAPTE DANS LE CADRE DE IBAN." & vbCrLf & _
         "IL SUFFIT D'INTRODUIRE UN NUMERO DE COMPTE EN BBAN OU EN IBAN." & vbCrLf & _
         "EN AVANCANT AVEC LE TAB LE NUMERO MANQUANT SERA CONVERTI AUTOMATIQUEMENT."
      Case 52
         DisplayMessage = "Vous devez encoder un N|fffd| de compte en format IBAN "
      Case 521
         DisplayMessage = "Le N|fffd| de compte IBAN n'est pas compl|fffd|t|fffd|."
      Case 522
         DisplayMessage = "Faute dans le N|fffd| de compte IBAN !"
      Case 523
         DisplayMessage = "Faute dans le N|fffd| de compte BBAN !"
      Case 53
         DisplayMessage = "Faute dans le N|fffd| de compte/contrat !"
      Case 531
         DisplayMessage = "Faute dans le N|fffd| de compte !"
      Case 532
         DisplayMessage = "Faute dans le N|fffd| de contrat !"
      Case 54
         DisplayMessage = "Cette combinaison de choix coch|fffd|s n'est pas possible."
      Case 55
         DisplayMessage = "Le type n'est pas compl|fffd|t|fffd|."
      Case 56
         DisplayMessage = "Le pays n'est pas compl|fffd|t|fffd|."
   End Select
   If (y = 0) Then
      MsgBox DisplayMessage
   End If
End Function

Attribute VB_Name = "IBAN"
Const invalidBBANMessage As String = "Faute dans le n|fffd| de compte BBAN."
Const invalidIBANMessage As String = "Faute dans le n|fffd| de compte IBAN."
Const BBANIBANMismatchMessage As String = "Les num|fffd|ros BBAN et IBAN ne correspondent pas."
Const emptyBBANMessage As String = "Un champ pour le n|fffd|de compte BBAN n'est pas rempli."
Const emptyIBANMessage As String = "Un champ pour le n|fffd|de compte IBAN n'est pas rempli."
    
Const cst111 = "111400"
Const cst98 = 98
Const cstBE = "BE"
    
Dim hasDefaulted As Boolean
Dim defaultedFormField As FormField

Dim printValidationFailed As Boolean
Dim defaultedPrintFormField As FormField
Dim printValidationErrorMessage As String
    
    
Private Sub InitializeMessages()
'    invalidBBANMessage = "Faute dans le n|fffd| de compte BBAN."
'    invalidIBANMessage = "Faute dans le n|fffd| de compte IBAN."
'    BBANIBANMismatchMessage = "Les num|fffd|ros BBAN et IBAN ne correspond pas."
'     emptyBBANMessage = "Un champ pour le n|fffd|de compte BBAN n'est pas rempli."
'    emptyIBANMessage = "Un champ pour le n|fffd|de compte IBAN n'est pas rempli."
End Sub

Private Sub InitializeDatamembers()

    hasDefaulted = False
    Set defaultedFormField = Nothing
    
    printValidationFailed = False
    Set defaultedPrintFormField = Nothing

End Sub


Public Sub Register()

    InitializeDatamembers
    
'    InitializeMessages
    
    Dim documentFormField As FormField
    Dim formFieldName As String
    
    For Each documentFormField In ActiveDocument.FormFields
    
        documentFormField.EntryMacro = "onEntryFormfieldMacro"
        
        formFieldName = documentFormField.NAME
        
        If Mid(formFieldName, 1, 4) = "IBAN" Then
            
            If (formFieldExists("BBAN" & Mid(formFieldName, 5))) Then
            
                documentFormField.ExitMacro = "validateGroupedIBANOutMacro"
            Else
            
                documentFormField.ExitMacro = "validateSingleIBANOutMacro"
            End If
            
        ElseIf Mid(formFieldName, 1, 4) = "BBAN" Then
        
            If (formFieldExists("IBAN" & Mid(formFieldName, 5))) Then
            
                documentFormField.ExitMacro = "validateGroupedBBANOutMacro"
            Else
            
                documentFormField.ExitMacro = "validateSingleBBANOutMacro"
            End If
            
        End If
        
    Next

End Sub


Public Sub onEntryFormfieldMacro()

    If hasDefaulted Then
    
        hasDefaulted = False
        defaultedFormField.Select
    End If
    
End Sub


Public Sub validateSingleBBANOutMacro()

    validateBBANFormFieldOperation ActiveDocument.FormFields(Selection.Bookmarks(1).NAME)

End Sub


Public Sub validateSingleIBANOutMacro()

    validateIBANFormFieldOperation ActiveDocument.FormFields(Selection.Bookmarks(1).NAME)

End Sub


Public Sub validateGroupedBBANOutMacro()

    Dim selectedBBANFormFieldName As String
    Dim matchingIBANFormfieldName As String
    
    selectedBBANFormFieldName = "BBAN" & Mid(Selection.Bookmarks(1).NAME, 5)
    matchingIBANFormfieldName = "IBAN" & Mid(selectedBBANFormFieldName, 5)
    
    onBBANOutOperation ActiveDocument.FormFields(selectedBBANFormFieldName), ActiveDocument.FormFields(matchingIBANFormfieldName)
    
End Sub


Public Sub validateGroupedIBANOutMacro()

    Dim selectedIBANFormFieldName As String
    Dim matchingBBANFormfieldName As String
    
    selectedIBANFormFieldName = "IBAN" & Mid(Selection.Bookmarks(1).NAME, 5)
    matchingBBANFormfieldName = "BBAN" & Mid(selectedIBANFormFieldName, 5)
    
    onIBANOutOperation ActiveDocument.FormFields(matchingBBANFormfieldName), ActiveDocument.FormFields(selectedIBANFormFieldName)
    
End Sub


Public Function printValidation() As Boolean
        
    printValidation = True
    printValidationFailed = False
    printValidationErrorMessage = ""
    
    Dim documentFormField As FormField
    Dim BBANFormField As FormField
    Dim IBANFormField As FormField
    
    Dim BBANEmpty, IBANEmpty As Boolean
    
    Dim matchingFormfieldName As String
    
    For Each documentFormField In ActiveDocument.FormFields
       
        formFieldName = documentFormField.NAME
        
        If (isBBANFormField(documentFormField)) Then
        
            matchingFormfieldName = "IBAN" & Mid(formFieldName, 5)
            Set BBANFormField = documentFormField
            Set IBANFormField = getFormField(matchingFormfieldName)
            
        ElseIf (isIBANFormField(documentFormField)) Then
        
            matchingFormfieldName = "BBAN" & Mid(formFieldName, 5)
            Set BBANFormField = getFormField(matchingFormfieldName)
            Set IBANFormField = documentFormField
            
        Else
            GoTo EndOfForEach
        End If
        
        If (BBANFormField Is Nothing) Then
            
            If (Not printValidateSingleIBANFormFieldOperation(IBANFormField)) Then
                    
                printValidation = False
                Exit Function
            End If
            
        ElseIf (IBANFormField Is Nothing) Then
        
            If (Not printValidateSingleBBANFormFieldOperation(BBANFormField)) Then
                
                printValidation = False
                Exit Function
            End If
            
        Else
            BBANEmpty = isFormFieldEmpty(BBANFormField)
            IBANEmpty = isFormFieldEmpty(IBANFormField)
            
            If (BBANEmpty And Not (IBANEmpty)) Then
                                
                If (Not printValidateSingleIBANFormFieldOperation(IBANFormField)) Then
                    
                    printValidation = False
                    Exit Function
                Else
                
                    BBANFormField.Result = extractBBAN_12FromIBAN_19(IBANFormField.Result)
                End If
                
            ElseIf (Not (BBANEmpty) And IBANEmpty) Then
            
                If (Not printValidateSingleBBANFormFieldOperation(BBANFormField)) Then
                    
                    printValidation = False
                    Exit Function
                Else
                
                    IBANFormField.Result = calculateIBAN(BBANFormField.Result)
                End If
            
            ElseIf (Not BBANEmpty And Not IBANEmpty) Then
            
                If (Not printValidateSingleBBANFormFieldOperation(BBANFormField) Or Not printValidateSingleIBANFormFieldOperation(IBANFormField)) Then
                    
                    printValidation = False
                    Exit Function
                ElseIf (Not doBBANAndIBANMatch(BBANFormField.Result, IBANFormField.Result)) Then
                                           
                        MsgBox BBANIBANMismatchMessage
                        ActiveDocument.FormFields(documentFormField.NAME).Select
                        printValidation = False
                        Exit Function
                End If
               
            Else
                checkPrintValidationErrorMsg (emptyBBANMessage)
                checkPrintValidationFailed documentFormField
            End If
            
        End If
        
EndOfForEach:
        
    Next
        
    If printValidationFailed Then
        
        printValidation = ForcePrint
        
        If (Not printValidation) Then
        
            MsgBox printValidationErrorMessage
            defaultedPrintFormField.Select
            
        End If
                
    End If
    
End Function

Private Sub checkPrintValidationFailed(documentFormField As FormField)

    If (printValidationFailed = False) Then
                    
        printValidationFailed = True
        Set defaultedPrintFormField = documentFormField
    End If
    
End Sub

Private Sub checkPrintValidationErrorMsg(ByVal msg As String)

    If (printValidationErrorMessage = "") Then printValidationErrorMessage = msg
    
End Sub


' --------------------------------------------------------------------------------------------
' GENERIC DOCUMENT FUNCTIONS
' --------------------------------------------------------------------------------------------


' operatie om BBAN FormField te valideren voor het printen
Public Function printValidateSingleBBANFormFieldOperation(documentFormField As FormField) As Boolean

    If (Not isFormFieldEmpty(documentFormField)) Then
        If Not IBAN.isValidBBANFormfield(documentFormField) Then
            MsgBox invalidBBANMessage
            documentFormField.Select
            printValidateSingleBBANFormFieldOperation = False
        Else
            documentFormField.Result = checkAndParseToBBAN_14(documentFormField.Result)
            printValidateSingleBBANFormFieldOperation = True
        End If
    Else
        checkPrintValidationFailed documentFormField
        checkPrintValidationErrorMsg emptyBBANMessage
        printValidateSingleBBANFormFieldOperation = True
    End If
   
End Function

' operatie om single IBAN FormField te valideren voor het printen
Public Function printValidateSingleIBANFormFieldOperation(documentFormField As FormField) As Boolean

    If (Not isFormFieldEmpty(documentFormField)) Then
        If Not IBAN.isValidIBANFormfield(documentFormField) Then
            MsgBox invalidIBANMessage
            documentFormField.Select
            printValidateSingleIBANFormFieldOperation = False
        Else
            documentFormField.Result = checkAndParseToIBAN_19(documentFormField.Result)
            printValidateSingleIBANFormFieldOperation = True
        End If
    Else
        checkPrintValidationFailed documentFormField
        checkPrintValidationErrorMsg emptyIBANMessage
        printValidateSingleIBANFormFieldOperation = True
    End If

End Function


' operatie om een BBAN FormField te valideren
Public Sub validateBBANFormFieldOperation(BBANFormField As FormField)

    If Len(BBANFormField.Result) > 0 Then
        If Not IBAN.isValidBBANFormfield(BBANFormField) Then
            ' Het opgegeven rekeningnummer voor de BBAN is niet geldig.
            MsgBox invalidBBANMessage
            setFocusOnFormfield ActiveDocument.FormFields(BBANFormField.NAME)
        Else
            BBANFormField.Result = checkAndParseToBBAN_14(BBANFormField.Result)
        End If
    End If
    
End Sub


' operatie om een IBAN FormField te valideren
Public Sub validateIBANFormFieldOperation(IBANFormField As FormField)
    
    If Len(IBANFormField.Result) > 0 Then
        If Not IBAN.isValidIBANFormfield(IBANFormField) Then
            ' Het opgegeven rekeningnummer voor de IBAN is niet geldig.
            MsgBox invalidIBANMessage
            setFocusOnFormfield ActiveDocument.FormFields(IBANFormField.NAME)
        Else
            IBANFormField.Result = checkAndParseToIBAN_19(IBANFormField.Result)
        End If
    End If
    
End Sub


' operatie die opgeroepen dient te worden in de exit macro van een BBAN veld in combinatie met een IBAN veld
Public Sub onBBANOutOperation(BBANFormField As FormField, IBANFormField As FormField)
    
    Dim returnValue As Integer
    
    returnValue = IBAN.CalculateBBANOUT(BBANFormField, IBANFormField)
    
    Select Case returnValue
        Case 0:
            ' operatie is correct verlopen
        Case 1:
            ' het opgegeven rekeningnummer voor de BBAN is niet geldig
            MsgBox invalidBBANMessage
            setFocusOnFormfield ActiveDocument.FormFields(BBANFormField.NAME)
    End Select

End Sub


' operatie die opgeroepen dient te worden in de exit macro van een IBAN veld in combinatie met een BBAN veld
Public Sub onIBANOutOperation(BBANFormField As FormField, IBANFormField As FormField)

    Dim returnValue As Integer
    
    returnValue = IBAN.CalculateIBANOUT(BBANFormField, IBANFormField)
    
    Select Case returnValue
        Case 0:
            ' operatie is correct verlopen
        Case 1:
            ' de opgegeven rekeningnummers voor BBAN en IBAN komen niet overeen
            MsgBox BBANIBANMismatchMessage
        Case 2:
            ' het opgegeven rekeningnummer voor de IBAN is niet geldig
            MsgBox invalidIBANMessage
            setFocusOnFormfield ActiveDocument.FormFields(IBANFormField.NAME)
    End Select
    
End Sub
    
    
' ---------------------------------------------------------------------------------------------------------
' PUBLIC FUNCTIONS
' ---------------------------------------------------------------------------------------------------------


Public Function isValidIBANFormfield(IBANFormField As FormField) As Boolean

    isValidIBANFormfield = isValidIBAN(IBANFormField.Result)

End Function


Public Function isValidBBANFormfield(BBANFormField As FormField) As Boolean

    isValidBBANFormfield = isValidBBAN(BBANFormField.Result)

End Function


' sub to be called in the exit macro of a BBAN Formfield. Validates the BBAN and generates the IBAN if possible.
' parameters to be given are the BBAN FormField and IBAN FormField to be checked and validated
' return values: 0 -> OK, 1 -> BBAN value is not valid
Public Function CalculateBBANOUT(BBANFormField As FormField, IBANFormField As FormField) As Integer
    
    CalculateBBANOUT = 0
    
    Dim BBAN As String
    Dim IBANString As String
    Dim CalculatedIBAN As String
    
    BBAN = BBANFormField.Result
    IBANString = IBANFormField.Result
    
    If Len(BBAN) = 0 Then Exit Function
    
    If IBAN.doBBANAndIBANMatch(BBAN, IBANString) Then
        BBANFormField.Result = checkAndParseToBBAN_14(BBAN)
        IBANFormField.Result = checkAndParseToIBAN_19(IBANString)
        Exit Function
    End If
    
    If Not IBAN.isValidBBAN(BBAN) Then
        CalculateBBANOUT = 1
        Exit Function
    End If
    
    BBANFormField.Result = checkAndParseToBBAN_14(BBAN)
    
    If Len(IBANString) > 0 Then Exit Function
    
    IBANFormField.Result = IBAN.calculateIBAN(BBAN)
   
End Function


' sub to be called in the exit macro of a IBAN Formfield. Validates the IBAN and generates the BBAN if necessary.
' parameters to be given are the BBAN FormField and IBAN FormField to be checked and validated
' return values 0 -> OK, 1 -> BBAN and IBAN do not match, 2 -> IBAN is not valid
Public Function CalculateIBANOUT(BBANFormField As FormField, IBANFormField As FormField) As Integer
    
    CalculateIBANOUT = 0
    
    Dim BBAN As String
    Dim IBANString As String
    Dim IBAN_19 As String
    
    BBAN = BBANFormField.Result
    IBANString = IBANFormField.Result
    
    If Len(IBANString) = 0 And Len(BBAN) = 0 Then Exit Function
    
    If Len(IBANString) > 0 Then
        If isValidIBAN(IBANString) Then
            IBAN_19 = checkAndParseToIBAN_19(IBANString)
            If Len(BBAN) > 0 And IBAN_19 <> calculateIBAN(BBAN) Then CalculateIBANOUT = 1
        Else
            CalculateIBANOUT = 2
        End If
    Else
        If isValidBBAN(BBAN) Then
            IBANFormField.Result = calculateIBAN(BBANFormField.Result)
        End If
    End If
    
    If Len(IBAN_19) > 0 Then
        IBANFormField.Result = IBAN_19
        If Len(BBAN) = 0 Then BBANFormField.Result = extractBBAN_12FromIBAN_19(IBAN_19)
    End If
    
End Function


' calculates the IBAN for a given BBAN
' Valid formats for the BBAN are "XXX-XXXXXXX-XX" or "XXXXXXXXXXXX" where X being a digit
' return value is an empty String on failure or an IBAN in the following format "BEXX XXXX XXXX XXXX"
Public Function calculateIBAN(BBANString As String) As String

    On Error GoTo calculateIban_Err
    
    Dim BBAN_12 As String
    
    BBAN_12 = checkAndParseToBBAN_12(BBANString)
    If BBAN_12 = "" Then GoTo calculateIban_Err
    
    Dim IBANCheckDigit As Integer
'    IBANCheckDigit = calculateIBANCheckDigit(BBAN_12)
'
'    calculateIBAN = cstBE & IBANCheckDigit & " " & Mid(BBAN_12, 1, 4) & " " & Mid(BBAN_12, 5, 4) & " " & Mid(BBAN_12, 9, 4)

    Dim IBANCheckDigitStr As String
   
    IBANCheckDigit = calculateIBANCheckDigit(BBAN_12)
    If IBANCheckDigit < 10 Then
       IBANCheckDigitStr = "0" & IBANCheckDigit
    Else
       IBANCheckDigitStr = IBANCheckDigit
    End If
    
    calculateIBAN = cstBE & IBANCheckDigitStr & " " & Mid(BBAN_12, 1, 4) & " " & Mid(BBAN_12, 5, 4) & " " & Mid(BBAN_12, 9, 4)
'
    Exit Function

calculateIban_Err:
    calculateIBAN = ""
    
End Function


' checks if given IBAN is valid.
' Valid formats are "BEXX XXXX XXXX XXXX" or "BEXXXXXXXXXXXXXX" with X being a digit
Public Function isValidIBAN(IBAN As String) As Boolean

    On Error GoTo isValidIBAN_Err

    Dim BBAN As String
    Dim CalculatedIBAN As String
    Dim IBAN_19 As String

    IBAN_19 = checkAndParseToIBAN_19(IBAN)
    If IBAN_19 = "" Then GoTo isValidIBAN_Err
    
    BBAN = Mid(IBAN_19, 6, 4) & Mid(IBAN_19, 11, 4) & Mid(IBAN_19, 16, 4)
    If Not isValidBBAN(BBAN) Then GoTo isValidIBAN_Err

    CalculatedIBAN = calculateIBAN(BBAN)
    If CalculatedIBAN = "" Then GoTo isValidIBAN_Err
    
    If UCase(CalculatedIBAN) = UCase(IBAN_19) Then
        isValidIBAN = True
    Else: GoTo isValidIBAN_Err
    End If
    
    Exit Function

isValidIBAN_Err:
    isValidIBAN = False
    
End Function


' checks if given BBAN is valid.
' Valid formats are "XXX-XXXXXXX-XX" or "XXXXXXXXXXXX" with X being a digit
Public Function isValidBBAN(BBAN As String) As Boolean

    On Error GoTo isValidBBAN_Err

    Dim BBAN_12 As String
    Dim BBAN_10 As String
    
    BBAN_12 = checkAndParseToBBAN_12(BBAN)
    If BBAN_12 = "" Then GoTo isValidBBAN_Err

    BBAN_10 = Mid(BBAN_12, 1, 10)

    If calculateBBANCheckDigit(BBAN_10) = CInt(Right(BBAN, 2)) Then
        isValidBBAN = True
    Else
        isValidBBAN = False
    End If

    Exit Function

isValidBBAN_Err:
    isValidBBAN = False
    
End Function


' checks if given BBAN and IBAN are valid and match.
' Valid formats for the BBAN are "XXX-XXXXXXX-XX" or "XXXXXXXXXXXX" with X being a digit
' Valid formats for the IBAN are "BEXX XXXX XXXX XXXX" or "BEXXXXXXXXXXXXXX" with X being a digit
Public Function doBBANAndIBANMatch(BBAN As String, IBAN As String) As Boolean

    If Not isValidBBAN(BBAN) Then GoTo doBBANAndIBANMatch_Err
    If Not isValidIBAN(IBAN) Then GoTo doBBANAndIBANMatch_Err
    
    Dim CalculatedIBAN As String
    CalculatedIBAN = calculateIBAN(BBAN)
    Dim ParsedIBAN As String
    ParsedIBAN = checkAndParseToIBAN_19(IBAN)
    
    If (ParsedIBAN = CalculatedIBAN) Then
        doBBANAndIBANMatch = True
        Exit Function
    End If
    
    
doBBANAndIBANMatch_Err:
    doBBANAndIBANMatch = False
    
End Function


' ---------------------------------------------------------------------------------------------------------
' PRIVATE FUNCTIONS
' ---------------------------------------------------------------------------------------------------------


Private Function isNumericBBAN_12(ByVal BBAN_12 As String) As Boolean

    isNumericBBAN_12 = IsNumeric(Mid(BBAN_12, 1, 10))

End Function


Private Function isNumericBBAN_14(ByVal BBAN_14 As String) As Boolean

    isNumericBBAN_14 = IsNumeric(Mid(BBAN_14, 1, 3)) And IsNumeric(Mid(BBAN_14, 5, 7)) And IsNumeric(Mid(BBAN_14, 13, 2))
    
End Function


Private Function isNumericIBAN_16(ByVal IBAN_16 As String) As Boolean

    isNumericIBAN_16 = IsNumeric(Mid(IBAN_16, 3))
    
End Function


Private Function isNumericIBAN_19(ByVal IBAN_19 As String) As Boolean

    isNumericIBAN_19 = IsNumeric(Mid(IBAN_19, 3, 2)) And IsNumeric(Mid(IBAN_19, 6, 4)) And IsNumeric(Mid(IBAN_19, 11, 4)) And IsNumeric(Mid(IBAN_19, 16, 4))
    
End Function


Private Function extractBBAN_12FromIBAN_19(IBAN_19 As String) As String

    extractBBAN_12FromIBAN_19 = Mid(IBAN_19, 6, 3) & "-" & Mid(IBAN_19, 9, 1) & Mid(IBAN_19, 11, 3) _
            & Mid(IBAN_19, 14, 1) & Mid(IBAN_19, 16, 2) & "-" & Mid(IBAN_19, 18, 2)
            
End Function


Private Function checkAndParseToBBAN_12(BBANString As String) As String

    On Error GoTo input_error

    Select Case Len(BBANString)
        Case 12:
            If Not isNumericBBAN_12(BBANString) Then GoTo input_error
            checkAndParseToBBAN_12 = BBANString
        Case 14:
            If Not isNumericBBAN_14(BBANString) Then GoTo input_error
            checkAndParseToBBAN_12 = Mid(BBANString, 1, 3) & Mid(BBANString, 5, 7) & Mid(BBANString, 13, 2)
        Case Else:
            GoTo input_error
    End Select
    
    Exit Function
    
input_error:
    checkAndParseToBBAN_12 = ""
        
End Function


Private Function checkAndParseToBBAN_14(BBANString As String) As String

    On Error GoTo input_error

    Select Case Len(BBANString)
        Case 12:
            If Not isNumericBBAN_12(BBANString) Then GoTo input_error
            checkAndParseToBBAN_14 = Mid(BBANString, 1, 3) & "-" & Mid(BBANString, 4, 7) & "-" & Mid(BBANString, 11, 2)
        Case 14:
            If Not isNumericBBAN_14(BBANString) Then GoTo input_error
            checkAndParseToBBAN_14 = BBANString
        Case Else:
            GoTo input_error
    End Select
    
    Exit Function
    
input_error:
    checkAndParseToBBAN_14 = ""
        
End Function


Private Function checkAndParseToIBAN_19(IBAN As String) As String

    On Error GoTo checkAndParseToIBAN_19_error

    If UCase(Left(IBAN, 2)) <> "BE" Then GoTo checkAndParseToIBAN_19_error

    Select Case Len(IBAN)
        Case 16:
            If Not isNumericIBAN_16(IBAN) Then GoTo checkAndParseToIBAN_19_error
            checkAndParseToIBAN_19 = UCase(Mid(IBAN, 1, 4)) & " " & Mid(IBAN, 5, 4) & " " & Mid(IBAN, 9, 4) & " " & Mid(IBAN, 13, 4)
        Case 19:
            If Not isNumericIBAN_19(IBAN) Then GoTo checkAndParseToIBAN_19_error
            checkAndParseToIBAN_19 = UCase(IBAN)
        Case Else:
            GoTo checkAndParseToIBAN_19_error
    End Select
    
    Exit Function
    
checkAndParseToIBAN_19_error:
    checkAndParseToIBAN_19 = ""
        
End Function


Private Function calculateBBANCheckDigit(ByVal BBAN_10) As Integer

    Dim DblResult As Double
    
    DblResult = CDbl(BBAN_10)
    IntModResult = DblResult - Int(DblResult / 97) * 97
    If IntModResult = 0 Then IntModResult = 97
    
    calculateBBANCheckDigit = IntModResult

End Function


Private Function calculateIBANCheckDigit(ByVal BBAN_12) As Integer

    Dim Result As Double
    Dim ModResult As Integer
    
    Result = CDbl(Mid(BBAN_12, 11, 2) & Mid(BBAN_12, 11, 2) & cst111)
    ModResult = Result - Int(Result / 97) * 97
    
    calculateIBANCheckDigit = cst98 - ModResult

End Function


' ---------------------------------------------------------------------------------------------------------
' UTILITY FUNCTIONS
' ---------------------------------------------------------------------------------------------------------

Private Function formFieldExists(formFieldName As String) As Boolean

    Dim documentFormField As FormField
    
    For Each documentFormField In ActiveDocument.FormFields
    
        If (documentFormField.NAME = formFieldName) Then
        
            formFieldExists = True
            Exit Function
            
        End If
        
    Next
    
    formFieldExists = False
    
End Function


Private Function getFormField(formFieldName As String) As FormField

    If (formFieldExists(formFieldName)) Then
        Set getFormField = ActiveDocument.FormFields(formFieldName)
    End If
    
End Function


Private Sub setFocusOnFormfield(documentFormField As FormField)

    hasDefaulted = True
    Set defaultedFormField = documentFormField
    
End Sub


Private Function isBBANFormField(ByVal documentFormField As FormField) As Boolean
    
    isBBANFormField = (Mid(documentFormField.NAME, 1, 4) = "BBAN")

End Function


Private Function isIBANFormField(ByVal documentFormField As FormField) As Boolean
    
    isIBANFormField = (Mid(documentFormField.NAME, 1, 4) = "IBAN")

End Function


Private Function isFormFieldEmpty(documentFormField As FormField) As Boolean

    If (documentFormField Is Nothing) Then
    
        isFormFieldEmpty = True
        
    ElseIf (Len(documentFormField.Result) > 0) Then
    
        isFormFieldEmpty = False
        
    Else
    
        isFormFieldEmpty = True
        
    End If

End Function

Public Function IBANCheckCompte(IBANRekNrStr As String) As Boolean
   Dim CD As Double
   Dim reknr1 As Double
   Dim RekNrCD As Double
   Dim RekNrCDStr As String
   Dim IBANCD As Double
   Dim IBANRekNr1 As Double
   Dim IBANRekNrCD As Double
   Dim Result As Double
   On Error GoTo IBANCheckCompte_Err
   IBANRekNrStr = UCase(IBANRekNrStr)
   If (Mid(IBANRekNrStr, 1, 2) <> "BE") Then GoTo IBANCheckCompte_Err
   If (Len(IBANRekNrStr) < 16) Or (Len(IBANRekNrStr) > 19) Then GoTo IBANCheckCompte_Err
   If (Len(IBANRekNrStr) = 17) Or (Len(IBANRekNrStr) = 18) Then GoTo IBANCheckCompte_Err
   If (Len(IBANRekNrStr) = 19) Then
      IBANRekNrStr = Mid(IBANRekNrStr, 1, 4) & Mid(IBANRekNrStr, 6, 4) & Mid(IBANRekNrStr, 11, 4) & Mid(IBANRekNrStr, 16, 4)
   End If
   If (Len(IBANRekNrStr) = 16) Then
      IBANRekNr1 = CDbl(Mid(IBANRekNrStr, 5, 12))
      IBANRekNrCD = CDbl(Mid(IBANRekNrStr, 3, 2))
      reknr1 = CDbl(Mid(IBANRekNrStr, 5, 10))
      RekNrCD = CDbl(Mid(IBANRekNrStr, 15, 2))
      CD = reknr1 - Int(reknr1 / 97) * 97
      If (CD = 0) Then CD = 97
      If (CD <> RekNrCD) Then GoTo IBANCheckCompte_Err
      If (RekNrCD < 10) Then
         RekNrCDStr = "0" & Trim(Str(RekNrCD))
      Else
         RekNrCDStr = Trim(Str(RekNrCD))
      End If
      Result = CDbl(RekNrCDStr & RekNrCDStr & "111400")
      IBANCD = 98 - (Result - Int(Result / 97) * 97)
      If (IBANCD <> IBANRekNrCD) Then GoTo IBANCheckCompte_Err
   End If
   IBANCheckCompte = True
   GoTo IBANCheckCompte_OK
IBANCheckCompte_Err:
   IBANCheckCompte = False
IBANCheckCompte_OK:
End Function

Public Function IBANConstrCompte(IBANRekNrStr As String) As String
   IBANRekNrStr = UCase(IBANRekNrStr)
   If (Len(IBANRekNrStr) = 16) Then
      IBANConstrCompte = Mid(IBANRekNrStr, 1, 4) & " " & Mid(IBANRekNrStr, 5, 4) & " " & Mid(IBANRekNrStr, 9, 4) & " " & Mid(IBANRekNrStr, 13, 4)
   End If
   If (Len(IBANRekNrStr) = 19) Then
      IBANConstrCompte = Mid(IBANRekNrStr, 1, 4) & " " & Mid(IBANRekNrStr, 6, 4) & " " & Mid(IBANRekNrStr, 11, 4) & " " & Mid(IBANRekNrStr, 16, 4)
   End If
End Function

Public Sub ExitIBANRekNumberField()
   Dim SelectedFormFieldName As String
   SelectedFormFieldName = Selection.Bookmarks(1).NAME
   If (Len(ActiveDocument.FormFields(SelectedFormFieldName).Result) <> 0) Then
      If Not IBANCheckCompte(ActiveDocument.FormFields(SelectedFormFieldName).Result) Then
         MsgBox invalidIBANMessage
         setFocusOnFormfield ActiveDocument.FormFields(SelectedFormFieldName)
         Exit Sub
      Else
         ActiveDocument.FormFields(SelectedFormFieldName).Result = IBANConstrCompte(ActiveDocument.FormFields(SelectedFormFieldName).Result)
      End If
   End If
End Sub

Public Function BBANCheckCompte(BBANRekNrStr As String) As Boolean
    On Error GoTo BBANCheckcompte_Err
    Dim DblResult As Double
    Dim IntModResult As Integer
    'V|fffd|rification de la longueur de la chaine de caract|fffd|res
    If Len(BBANRekNrStr) > 14 Or Len(BBANRekNrStr) < 12 Then
        BBANCheckCompte = False
        Exit Function
    Else
        'Si la longueur de la chaine est de 14 ou de 13
        If (Len(BBANRekNrStr) = 14) Or (Len(BBANRekNrStr) = 13) Then
            'V|fffd|rification de la validit|fffd| des sous-chaines
            If Not IsNumeric(Mid(BBANRekNrStr, 1, 3)) Or Not IsNumeric(Mid(BBANRekNrStr, 5, 7)) Then
                BBANCheckCompte = False
                Exit Function
            End If
            'Cr|fffd|ation du nombre
            ' si BBANRekNrStr = 001-4569804-45 alors
            ' DblResult = "001" & "4569804" => 14569804
            DblResult = CDbl(Mid(BBANRekNrStr, 1, 3) & Mid(BBANRekNrStr, 5, 7))
            'Calcul du reste de la division
            IntModResult = DblResult - Int(DblResult / 97) * 97
            '
            'Adaptation du module pour respecter la convention interbancaire.
            '
            If IntModResult = 0 Then IntModResult = 97
            'V|fffd|rification du r|fffd|sultat
            ' si BBANRekNrStr = 001-4569804-45
            ' et que IntModResult = 45 alors OK
            If IntModResult = CInt(Right(BBANRekNrStr, 2)) Then
                BBANCheckCompte = True
            Else
                BBANCheckCompte = False
            End If
        Else
            'Si la longueur de la chaine est de 14
            If Len(BBANRekNrStr) = 12 Then
            'V|fffd|rification de la validit|fffd| du nombre
                If Not IsNumeric(Mid(BBANRekNrStr, 1, 10)) Then
                    BBANCheckCompte = False
                    Exit Function
                End If
                'Cr|fffd|ation du nombre
                ' si BBANRekNrStr = 001456980445 alors
                ' DblResult = "0014569804" => 14569804
                DblResult = Mid(BBANRekNrStr, 1, 10)
                'Calcul du reste de la division
                IntModResult = DblResult - Int(DblResult / 97) * 97
                '
                'Adaptation du module pour respecter la convention interbancaire.
                '
                If IntModResult = 0 Then IntModResult = 97
                'V|fffd|rification du r|fffd|sultat
                ' si BBANRekNrStr = 001-4569804-45
                ' et que IntModResult = 45 alors OK
                If IntModResult = CLng(Right(BBANRekNrStr, 2)) Then
                    BBANCheckCompte = True
                Else
                    BBANCheckCompte = False
                End If
            Else
                BBANCheckCompte = False
                Exit Function
            End If
        End If
    End If
'********************************************************************************
'* Ne pas oublier de provoquer la sortie de la fonction pour ne
'* pas executer le code d'erreur
'********************************************************************************
Exit Function

'Gestion des erreurs
BBANCheckcompte_Err:
    BBANCheckCompte = False
End Function

Public Function BBANConstrCompte(BBANRekNrStr As String) As String
    If Len(BBANRekNrStr) = 12 Then
        BBANConstrCompte = (Mid(BBANRekNrStr, 1, 3) & "-" & Mid(BBANRekNrStr, 4, 7) & "-" & Mid(BBANRekNrStr, 11, 2))
    End If
    If Len(BBANRekNrStr) = 13 Then
        BBANConstrCompte = (Mid(BBANRekNrStr, 1, 3) & "-" & Mid(BBANRekNrStr, 5, 7) & "-" & Mid(BBANRekNrStr, 12, 2))
    End If
    If Len(BBANRekNrStr) = 14 Then
        BBANConstrCompte = (Mid(BBANRekNrStr, 1, 3) & "-" & Mid(BBANRekNrStr, 5, 7) & "-" & Mid(BBANRekNrStr, 13, 2))
    End If
End Function

Public Sub CheckFilledIBAN(RekNr As String)
   Dim a As Integer
   a = IBAN.CalculateIBANOUT(ActiveDocument.FormFields("IBAN" & Mid(RekNr, 5)), ActiveDocument.FormFields("BBAN" & Mid(RekNr, 5)))
   If Len(ActiveDocument.FormFields(RekNr).Result) <> 0 Then
      If Not IBANCheckCompte(ActiveDocument.FormFields(RekNr).Result) Then
         ActiveDocument.FormFields(RekNr).Select
         If (ForcePrint(522, NotAllowed) = BtnClicked) Then Stop
      Else
         ActiveDocument.FormFields(RekNr).Result = IBANConstrCompte(ActiveDocument.FormFields(RekNr).Result)
      End If
   End If
End Sub

Public Sub CheckFilledBBAN(RekNr As String)
   Dim a As Integer
   a = IBAN.CalculateBBANOUT(ActiveDocument.FormFields("BBAN" & Mid(RekNr, 5)), ActiveDocument.FormFields("IBAN" & Mid(RekNr, 5)))
   If Len(ActiveDocument.FormFields(RekNr).Result) <> 0 Then
      If Not BBANCheckCompte(ActiveDocument.FormFields(RekNr).Result) Then
         ActiveDocument.FormFields(RekNr).Select
         If (ForcePrint(523, NotAllowed) = BtnClicked) Then Stop
      Else
         ActiveDocument.FormFields(RekNr).Result = BBANConstrCompte(ActiveDocument.FormFields(RekNr).Result)
      End If
   End If
End Sub

Attribute VB_Name = "OfficeConverter"
Option Explicit
Public App_SearchLookIn As String
Public App_SearchFileName As String
Public App_SearchSearchSubFolders As Boolean
Public App_SearchFoundFiles As Collection
Public Sub App_SearchNewSearch()
'LookIn is not reset
    App_SearchFileName = ""
    App_SearchSearchSubFolders = False
End Sub
Public Function App_SearchExecute() As Long
Dim fso As Scripting.FileSystemObject
Dim searchFolder As Scripting.Folder
Dim currentFile As Scripting.File
    Set App_SearchFoundFiles = New Collection
    On Error Resume Next
    Set fso = New Scripting.FileSystemObject
    Set searchFolder = fso.GetFolder(App_SearchLookIn)
    'get all files in search folder
    App_SearchFileName = UCase(App_SearchFileName)
    For Each currentFile In searchFolder.Files
     If App_SearchFileName <> "" Then
       If UCase(currentFile.NAME) Like App_SearchFileName = True Then
        App_SearchFoundFiles.Add currentFile.Path
       End If
     Else
      App_SearchFoundFiles.Add currentFile.Path
     End If
    Next
    On Error GoTo 0
    If Not searchFolder Is Nothing Then
      If App_SearchSearchSubFolders = True Then
        App_SubFolderSearch searchFolder
      End If
    End If
    Set fso = Nothing
    App_SearchExecute = App_SearchFoundFiles.count
End Function
'Recursively search all subfolders
Private Sub App_SubFolderSearch(currentFolder As Scripting.Folder)
Dim curSubFolder As Scripting.Folder
Dim curFile As Scripting.File
    For Each curSubFolder In currentFolder.SubFolders
    On Error GoTo NextFolder
      For Each curFile In curSubFolder.Files
       If App_SearchFileName <> "" Then
        If curFile.NAME Like App_SearchFileName = True Then
           App_SearchFoundFiles.Add curFile.Path
        End If
       Else
         App_SearchFoundFiles.Add curFile.Path
       End If
     Next
     App_SubFolderSearch curSubFolder
NextFolder:    Next
 End Sub
Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
'// This module has been remediated by User Productivity Services
'// Date: 2013-06-07 10:19
'// Details:
'@@0++1,2@@
'>
'>



Private Sub Document_Open()
'// This procedure has been remediated by User Productivity Services
'// Date: 2013-06-07 10:19
'// Details:
'@@11--0@@
'>
'@@0++11,31@@
'>
'> '// Allow running macro buttons by clicking once.
'>     Options.ButtonFieldClicks = 1
'>
'> '// Make sure an ActiveDocumpent exists.
'>     If Application.Documents.count = 1 Then
'>         Call Application.Documents(1).Activate
'>     Else
'>         i = 1
'>         Do While i <= Application.Documents.count
'>             If StrComp(Left$(Application.Documents(i).Path, 7), "http://", vbTextCompare) = 0 Then
'>                 Call Application.Documents(i).Activate
'>             End If
'>         i = i + 1
'>         Loop
'>     End If
'>
'> '// Make sure the 1st field is active.
'>     If ActiveDocument.FormFields.count > 0 Then
'>         Call ActiveDocument.FormFields(1).Select
'>     End If
'@@65+-65@@
'< '  Activatie MyToolBar
'> ''  Activatie MyToolBar
'@@66+-66@@
'<    MyToolBar.StartUpPosition = 0
'> '   MyToolBar.StartUpPosition = 0
'@@67+-67@@
'<    MyToolBar.Top = ActiveDocument.ActiveWindow.Top + 2
'> '   MyToolBar.Top = ActiveDocument.ActiveWindow.Top + 2
'@@68+-68@@
'<    MyToolBar.Left = ActiveDocument.ActiveWindow.Left + 2
'> '   MyToolBar.Left = ActiveDocument.ActiveWindow.Left + 2
'@@69+-69@@
'<    MyToolBar.Show (vbModeless)
'> '   MyToolBar.Show (vbModeless)

'// Allow running macro buttons by clicking once.
    Options.ButtonFieldClicks = 1

'// Make sure an ActiveDocumpent exists.
    If Application.Documents.count = 1 Then
        Call Application.Documents(1).Activate
    Else
        i = 1
        Do While i <= Application.Documents.count
            If StrComp(Left$(Application.Documents(i).Path, 7), "http://", vbTextCompare) = 0 Then
                Call Application.Documents(i).Activate
            End If
        i = i + 1
        Loop
    End If

'// Make sure the 1st field is active.
    If ActiveDocument.FormFields.count > 0 Then
        Call ActiveDocument.FormFields(1).Select
    End If
   ForcePrinting.Register
   Checkings.Register
   IBAN.Register

   On Error Resume Next

   ActiveDocument.FormFields("TxtDatumOpmaak").Result = Date

 '  ActiveDocument.FormFields("TxtDatumOpmaak1").Result = Date
 '  ActiveDocument.FormFields("TxtDatumOpmaak2").Result = Date

'  Initialisatie van de actieve window
   ActiveDocument.ActiveWindow.DisplayHorizontalScrollBar = True
   ActiveDocument.ActiveWindow.DisplayVerticalScrollBar = True
   ActiveDocument.ActiveWindow.DisplayLeftScrollBar = True
   ActiveDocument.ActiveWindow.DisplayVerticalRuler = True
   ActiveDocument.ActiveWindow.DisplayRightRuler = True
   ActiveDocument.ActiveWindow.View.ShowBookmarks = False

'  De-activatie van toolbars en menu-bar bij het opstarten van de applicatie
   ActiveDocument.CommandBars("Standaard").Enabled = False
   ActiveDocument.CommandBars("Formatting").Enabled = False
   ActiveDocument.CommandBars("Visual Basic").Enabled = False
   ActiveDocument.CommandBars("Forms").Enabled = False
   ActiveDocument.CommandBars("Standaard Buttons").Enabled = False
   ActiveDocument.CommandBars("Address Bar").Enabled = False
   ActiveDocument.CommandBars("Link").Enabled = False
   ActiveDocument.CommandBars("Print Utilities").Enabled = False
   ActiveDocument.CommandBars("End-User Template Tool").Enabled = False
   
'  Activatie van de iconen voor DocServer
   ActiveDocument.CommandBars("DocServer").Enabled = True
   ActiveDocument.CommandBars("Standaard").Visible = True
   ActiveDocument.CommandBars("Standaard").Position = 1
''  Activatie MyToolBar
'   MyToolBar.StartUpPosition = 0
'   MyToolBar.Top = ActiveDocument.ActiveWindow.Top + 2
'   MyToolBar.Left = ActiveDocument.ActiveWindow.Left + 2
'   MyToolBar.Show (vbModeless)
'Call AddShortCutKey("ThisDocument.FilePrint", wdKeyP)
'Call AddShortCutKey("ThisDocument.GetPacificInfo", wdKeyG)
End Sub

Public Sub GetPacificInfo()
      '*************************************************************
    '* Recherche des informations de l'agence et de l'utilisateur
    '*************************************************************
    Dim MyFortisKantoor As New Cls_Doc_FORIDE
    ActiveDocument.FormFields("TxtPlaatsOpmaak").Result = MyFortisKantoor.InfoAgence("CITF")
    'ActiveDocument.FormFields("TxtPlaatsOpmaak2").Result = MyFortisKantoor.InfoAgence("CITN")
    ActiveDocument.FormFields("TxtNamf").Result = MyFortisKantoor.InfoAgence("NAMF")
    'ActiveDocument.FormFields("TxtNamN2").Result = MyFortisKantoor.InfoAgence("NAMN")
    ActiveDocument.FormFields("TxtBuc_ID").Result = MyFortisKantoor.InfoAgence("BKA")
    ActiveDocument.FormFields("TxtTel").Result = MyFortisKantoor.InfoAgence("TEL")
    ActiveDocument.FormFields("TxtUserName").Result = MyFortisKantoor.InfoUser("UserName")
    ActiveDocument.FormFields("TxtUserName1").Result = MyFortisKantoor.InfoUser("UserName")
    '*********************************************
    '* Recherche des donn|fffd|es du client
    '*********************************************
 '   If Len(MyFortisKantoor.InfoClient("jurnam1")) = 0 Then
 '       ActiveDocument.FormFields("TxtNam1").Result = MyFortisKantoor.InfoClient("nam1") + " " + MyFortisKantoor.InfoClient("fstnam1")
 '   Else
 '       ActiveDocument.FormFields("TxtNam1").Result = MyFortisKantoor.InfoClient("jurnam1")
 '   End If
 '   ActiveDocument.FormFields("Txtcdb_id1").Result = MyFortisKantoor.InfoClient("cdb_id1")
 '   ActiveDocument.FormFields("Txtadrstr1").Result = MyFortisKantoor.InfoClient("adrstr1")
 '   ActiveDocument.FormFields("Txtadrnbr1").Result = MyFortisKantoor.InfoClient("adrnbr1")
 '   ActiveDocument.FormFields("Txtadrbox1").Result = MyFortisKantoor.InfoClient("adrbox1")
 '   ActiveDocument.FormFields("Txtzip1").Result = MyFortisKantoor.InfoClient("zip1")
 '   ActiveDocument.FormFields("Txtloc1").Result = MyFortisKantoor.InfoClient("loc1")
 '   ActiveDocument.FormFields("Txtnam2").Result = MyFortisKantoor.InfoClient("nam2") + " " + MyFortisKantoor.InfoClient("fstnam2")
    Set MyFortisKantoor = Nothing
End Sub

Sub FilePrintDefault()
   FilePrint
End Sub

Private Sub Cmd_Print_Click()
   FilePrint
End Sub

Sub FilePrint()
'// This procedure has been remediated by User Productivity Services
'// Date: 2013-06-07 10:19
'// Details:
'@@381+-381@@
'<     MyToolBar.CommonDialog1.CancelError = True
'> '    MyToolBar.CommonDialog1.CancelError = True
'@@384+-384@@
'<     MyToolBar.CommonDialog1.Flags = &H4 Xor &H80000
'> '    MyToolBar.CommonDialog1.Flags = &H4 Xor &H80000
'@@386+-386@@
'<     MyToolBar.CommonDialog1.Copies = 3
'> '    MyToolBar.CommonDialog1.Copies = 3
'@@387+-387@@
'<     MyToolBar.CommonDialog1.CancelError = True
'> '    MyToolBar.CommonDialog1.CancelError = True
'@@390+-390@@
'<     MyToolBar.CommonDialog1.ShowPrinter
'> '    MyToolBar.CommonDialog1.ShowPrinter
'@@392+-392@@
'<     BeginPage = MyToolBar.CommonDialog1.FromPage
'> '    BeginPage = MyToolBar.CommonDialog1.FromPage
'@@393+-393@@
'<     EndPage = MyToolBar.CommonDialog1.ToPage
'> '    EndPage = MyToolBar.CommonDialog1.ToPage
'@@394+-394@@
'<     NumCopies = MyToolBar.CommonDialog1.Copies
'> '    NumCopies = MyToolBar.CommonDialog1.Copies
'@@395,397--0@@
'>     For i = 1 To NumCopies
'<         Application.PrintOut
'<     Next i
'@@0++395,407@@
'> '// Hide the macro buttons.
'>     Call DocServerRemediation.HideAllMacroButtons
'>
'> '// Use the internal Dialog object to display the Print window.
'>     With Application.Dialogs(wdDialogFilePrint)
'>         .NumCopies = 3
'>         Call .Show
'>         NumCopies = .NumCopies
'>     End With
'>
'> '// Show the macro buttons.
'>     Call DocServerRemediation.ShowAllMacroButtons
'>

   ForcePrinting.Init
   Dim Tekst As String
'
' FilePrint Macro
' Controls and Prints the active document
  

   If Len(ActiveDocument.FormFields("Txtnamf").Result) = 0 Then
       ActiveDocument.FormFields("Txtnamf").Select
       If (ForcePrint(1, Allowed) = BtnClicked) Then Exit Sub
   End If
   
   If Len(ActiveDocument.FormFields("TxtBuc_Id").Result) = 0 Then
      ActiveDocument.FormFields("TxtBuc_Id").Select
      If (ForcePrint(20, Allowed, Tekst) = BtnClicked) Then Exit Sub
   End If
   If Len(ActiveDocument.FormFields("TxtBuc_Id").Result) = 0 Then
       ActiveDocument.FormFields("TxtBuc_Id").Select
       Tekst = "Vous devez encoder le N|fffd| BUC de l'agence "
       If (ForcePrint(20, Allowed) = BtnClicked) Then Exit Sub
   End If
   
   If Len(ActiveDocument.FormFields("TxtTel").Result) = 0 Then
       ActiveDocument.FormFields("TxtTel").Select
       If (ForcePrint(21, Allowed) = BtnClicked) Then Exit Sub
   End If
   
   
   If Len(ActiveDocument.FormFields("TxtUsername").Result) = 0 Then
       ActiveDocument.FormFields("TxtUsername").Select
       If (ForcePrint(2, Allowed) = BtnClicked) Then Exit Sub
   End If

   

 '  If (ActiveDocument.FormFields("ChkHuurder1").CheckBox.Value = False And _
 '  ActiveDocument.FormFields("ChkHuurder2").CheckBox.Value = False) Or _
 '  (ActiveDocument.FormFields("ChkHuurder1").CheckBox.Value = True And _
 '  ActiveDocument.FormFields("ChkHuurder2").CheckBox.Value = True) Then
 '      ActiveDocument.FormFields("ChkHuurder1").Select
 '      Tekst = "Veuillez cocher un choix pour le locataire"
 '      If (ForcePrint(DefText, Allowed, Tekst) = BtnClicked) Then Exit Sub
 '  End If
   
   If Len(ActiveDocument.FormFields("TxtRP1").Result) = 0 Then
       ActiveDocument.FormFields("TxtRP1").Select
       If (ForcePrint(2, Allowed) = BtnClicked) Then Exit Sub
   End If
   
  ' ActiveDocument.FormFields("TxtRP1a").Result = ActiveDocument.FormFields("TxtRP1").Result
  ' 'ActiveDocument.FormFields("TxtRP1b").Result = ActiveDocument.FormFields("TxtRP1").Result
  ' ActiveDocument.FormFields("TxtRP1c").Result = ActiveDocument.FormFields("TxtRP1").Result
  ' ActiveDocument.FormFields("TxtRP1d").Result = ActiveDocument.FormFields("TxtRP1").Result
  ' ActiveDocument.FormFields("TxtRP1f").Result = ActiveDocument.FormFields("TxtRP1").Result
  
   If Len(ActiveDocument.FormFields("TxtAdrRP1").Result) = 0 Then
       ActiveDocument.FormFields("TxtAdrRP1").Select
       If (ForcePrint(37, Allowed) = BtnClicked) Then Exit Sub
   End If
   
   If Len(ActiveDocument.FormFields("Txtnam1").Result) = 0 Then
       ActiveDocument.FormFields("Txtnam1").Select
       If (ForcePrint(2, Allowed) = BtnClicked) Then Exit Sub
   End If
   
   If Len(ActiveDocument.FormFields("TxtAdr1").Result) = 0 Then
       ActiveDocument.FormFields("TxtAdr1").Select
       If (ForcePrint(37, Allowed) = BtnClicked) Then Exit Sub
   End If
   
   
   'ActiveDocument.FormFields("Txtnam1a").Result = ActiveDocument.FormFields("Txtnam1").Result
   'ActiveDocument.FormFields("Txtnam1b").Result = ActiveDocument.FormFields("Txtnam1").Result
   'ActiveDocument.FormFields("Txtnam1c").Result = ActiveDocument.FormFields("Txtnam1").Result

   If Len(ActiveDocument.FormFields("TxtRP2").Result) = 0 Then
       ActiveDocument.FormFields("TxtRP2").Select
       If (ForcePrint(2, Allowed) = BtnClicked) Then Exit Sub
   End If
   
  ' ActiveDocument.FormFields("TxtRP2a").Result = ActiveDocument.FormFields("TxtRP2").Result
  ' ActiveDocument.FormFields("TxtRP2c").Result = ActiveDocument.FormFields("TxtRP2").Result
  ' ActiveDocument.FormFields("TxtRP2d").Result = ActiveDocument.FormFields("TxtRP2").Result
  ' ActiveDocument.FormFields("TxtRP2e").Result = ActiveDocument.FormFields("TxtRP2").Result
  ' ActiveDocument.FormFields("TxtRP2f").Result = ActiveDocument.FormFields("TxtRP2").Result
   
   If Len(ActiveDocument.FormFields("TxtAdrRP2").Result) = 0 Then
       ActiveDocument.FormFields("TxtAdrRP2").Select
       If (ForcePrint(37, Allowed) = BtnClicked) Then Exit Sub
   End If
   
   If Len(ActiveDocument.FormFields("Txtnam2").Result) = 0 Then
       ActiveDocument.FormFields("Txtnam2").Select
       If (ForcePrint(2, Allowed) = BtnClicked) Then Exit Sub
   End If
   
   If Len(ActiveDocument.FormFields("TxtAdr2").Result) = 0 Then
       ActiveDocument.FormFields("TxtAdr2").Select
       If (ForcePrint(37, Allowed) = BtnClicked) Then Exit Sub
   End If
   
  ' 'ActiveDocument.FormFields("Txtnam2a").Result = ActiveDocument.FormFields("Txtnam2").Result
  ' 'ActiveDocument.FormFields("Txtnam2b").Result = ActiveDocument.FormFields("Txtnam2").Result
  ' 'ActiveDocument.FormFields("Txtnam2c").Result = ActiveDocument.FormFields("Txtnam2").Result
  ' ActiveDocument.FormFields("Txtnam2d").Result = ActiveDocument.FormFields("Txtnam2").Result
  ' 'ActiveDocument.FormFields("Txtnam2e").Result = ActiveDocument.FormFields("Txtnam2").Result
   
   If Len(ActiveDocument.FormFields("TxtUserName").Result) = 0 Then
       ActiveDocument.FormFields("TxtUserName").Select
       If (ForcePrint(2, Allowed) = BtnClicked) Then Exit Sub
   End If
   
   ActiveDocument.FormFields("TxtUserName1").Result = ActiveDocument.FormFields("TxtUserName").Result
 
   If ((Len(ActiveDocument.FormFields("IBANTxtreknr1").Result) = 0)) Then
       ActiveDocument.FormFields("IBANTxtreknr1").Select
       If (ForcePrint(52, Allowed) = BtnClicked) Then Exit Sub
      Else
       '    If Not checkCompte(ActiveDocument.FormFields("Txtreknr1").Result) Then
       '        Beep
       '        MsgBox "Fout in het rekeningnummer !", vbExclamation
       '        ActiveDocument.FormFields("Txtreknr1").Select
       '        Exit Sub
       '    Else
       '        ActiveDocument.FormFields("Txtreknr1").Result = _
       '        ConstrCompte(ActiveDocument.FormFields("Txtreknr1").Result)
       '    End If
   End If
   

     
   If Len(ActiveDocument.FormFields("Txt10").Result) = 0 Then
       ActiveDocument.FormFields("Txt10").Select
       If (ForcePrint(50, Allowed) = BtnClicked) Then Exit Sub
   End If

   If Len(ActiveDocument.FormFields("Txt13").Result) = 0 Then
       ActiveDocument.FormFields("Txt13").Select
       If (ForcePrint(50, Allowed) = BtnClicked) Then Exit Sub
   End If
   
   
   If Len(ActiveDocument.FormFields("TxtPlaatsOpmaak").Result) = 0 Then
       ActiveDocument.FormFields("TxtPlaatsOpmaak").Select
       If (ForcePrint(18, Allowed) = BtnClicked) Then Exit Sub
   End If
   If Len(ActiveDocument.FormFields("TxtDatumOpmaak").Result) = 0 Then
       ActiveDocument.FormFields("TxtDatumOpmaak").Select
       If (ForcePrint(49, Allowed) = BtnClicked) Then Exit Sub
   End If
  
   

line1:

  
   
'   opmaak barcode
'    Dim Constr_barcode As String, PRE As String, BUC As String, TOEV As String
'    PRE = "081100"
'    BUC = ActiveDocument.FormFields("TxtBuc_id1").Result
'    'KLUIS = ActiveDocument.FormFields("txtKluisnr1").Result
'    TOEV = "0"
'    Constr_barcode = PRE & BUC & KLUIS & TOEV
'    Constr_barcode = BarCodeValue$(Constr_barcode)
'    Constr_barcode = BarCodeFontString$(Constr_barcode)
'    ActiveDocument.FormFields("TxtBarcode").Result = Constr_barcode
    
    Dim BeginPage, EndPage, NumCopies, i
    ' Set Cancel to True
'    MyToolBar.CommonDialog1.CancelError = True
    On Error GoTo ErrHandler
    ' Desable the print to file and the from to page option
'    MyToolBar.CommonDialog1.Flags = &H4 Xor &H80000
    ' Set Cancel to True
'    MyToolBar.CommonDialog1.Copies = 3
'    MyToolBar.CommonDialog1.CancelError = True
    On Error GoTo ErrHandler
    ' Display the Print dialog box
'    MyToolBar.CommonDialog1.ShowPrinter
    ' Get user-selected values from the dialog box
'    BeginPage = MyToolBar.CommonDialog1.FromPage
'    EndPage = MyToolBar.CommonDialog1.ToPage
'    NumCopies = MyToolBar.CommonDialog1.Copies
'// Hide the macro buttons.
    Call DocServerRemediation.HideAllMacroButtons

'// Use the internal Dialog object to display the Print window.
    With Application.Dialogs(wdDialogFilePrint)
        .NumCopies = 1
        Call .Show
        NumCopies = .NumCopies
    End With
    
'// Show the macro buttons.
    Call DocServerRemediation.ShowAllMacroButtons

   Exit Sub
ErrHandler:
   Exit Sub
      ' User pressed the Cancel button
End Sub

Private Sub Cmd_Exit_Click()
'  Oproepen Document_Close hierna bij klikken op "Exit" of "Close Window Icoon"
'  Oproepen van ActiveDocument.Close is niet de juiste methode want menu-bar en toolbars worden niet teruggezet.
   Document_Close
End Sub

Private Sub Document_Close()
'// This procedure has been remediated by User Productivity Services
'// Date: 2013-06-07 10:19
'// Details:
'
   On Error Resume Next
   
'  Activatie van menu-bar en toolbars bij verlaten applicatie
   ActiveDocument.CommandBars("Standaard").Enabled = True
   ActiveDocument.CommandBars("Formatting").Enabled = True
   ActiveDocument.CommandBars("Visual Basic").Enabled = True
   ActiveDocument.CommandBars("Forms").Enabled = True
   ActiveDocument.CommandBars("Standaard Buttons").Enabled = True
   ActiveDocument.CommandBars("Address Bar").Enabled = True
   ActiveDocument.CommandBars("Link").Enabled = True
   ActiveDocument.CommandBars("Print Utilities").Enabled = True
   ActiveDocument.CommandBars("End-User Template Tool").Enabled = True
   
   ActiveDocument.CommandBars("Standaard").Visible = True
   ActiveDocument.CommandBars("Formatting").Visible = True
   ActiveDocument.CommandBars("Visual Basic").Visible = True
   
   ActiveDocument.CommandBars("Standaard").Position = 1
   ActiveDocument.CommandBars("Formatting").Position = 1
   ActiveDocument.CommandBars("Visual Basic").Position = 1
   ActiveDocument.CommandBars("Forms").Position = 1
   ActiveDocument.CommandBars("Standaard Buttons").Position = 1
   ActiveDocument.CommandBars("Address Bar").Position = 1
   ActiveDocument.CommandBars("Link").Position = 1
   ActiveDocument.CommandBars("Print Utilities").Position = 1
   ActiveDocument.CommandBars("End-User Template Tool").Position = 1
   
'  De-activatie van de iconen voor DocServer
   ActiveDocument.CommandBars("Standaard").Visible = False
   ActiveDocument.CommandBars("DocServer").Enabled = False
   
   ActiveDocument.Saved = True
End Sub

Public Sub nam()
 If Len(ActiveDocument.FormFields("TxtRP1").Result) <> 0 Then
    ActiveDocument.FormFields("TxtRP1a").Result = ActiveDocument.FormFields("TxtRP1").Result
    ActiveDocument.FormFields("TxtRP1b").Result = ActiveDocument.FormFields("TxtRP1").Result
    ActiveDocument.FormFields("TxtRP1c").Result = ActiveDocument.FormFields("TxtRP1").Result
    ActiveDocument.FormFields("TxtRP1d").Result = ActiveDocument.FormFields("TxtRP1").Result
    ActiveDocument.FormFields("TxtRP1f").Result = ActiveDocument.FormFields("TxtRP1").Result
 End If
 If Len(ActiveDocument.FormFields("TxtRP2").Result) <> 0 Then
    ActiveDocument.FormFields("TxtRP2a").Result = ActiveDocument.FormFields("TxtRP2").Result
    ActiveDocument.FormFields("TxtRP2c").Result = ActiveDocument.FormFields("TxtRP2").Result
    ActiveDocument.FormFields("TxtRP2d").Result = ActiveDocument.FormFields("TxtRP2").Result
    ActiveDocument.FormFields("TxtRP2e").Result = ActiveDocument.FormFields("TxtRP2").Result
    ActiveDocument.FormFields("TxtRP2f").Result = ActiveDocument.FormFields("TxtRP2").Result
 End If
 If Len(ActiveDocument.FormFields("Txtnam1").Result) <> 0 Then
    'ActiveDocument.FormFields("Txtnam1a").Result = ActiveDocument.FormFields("Txtnam1").Result
    'ActiveDocument.FormFields("Txtnam1b").Result = ActiveDocument.FormFields("Txtnam1").Result
    'ActiveDocument.FormFields("Txtnam1c").Result = ActiveDocument.FormFields("Txtnam1").Result
 End If
 If Len(ActiveDocument.FormFields("Txtnam2").Result) <> 0 Then
    'ActiveDocument.FormFields("Txtnam2a").Result = ActiveDocument.FormFields("Txtnam2").Result
    'ActiveDocument.FormFields("Txtnam2b").Result = ActiveDocument.FormFields("Txtnam2").Result
    'ActiveDocument.FormFields("Txtnam2c").Result = ActiveDocument.FormFields("Txtnam2").Result
    'ActiveDocument.FormFields("Txtnam2d").Result = ActiveDocument.FormFields("Txtnam2").Result
    'ActiveDocument.FormFields("Txtnam2e").Result = ActiveDocument.FormFields("Txtnam2").Result
 End If
 If Len(ActiveDocument.FormFields("TxtUserName").Result) <> 0 Then
    ActiveDocument.FormFields("TxtUserName1").Result = ActiveDocument.FormFields("TxtUserName").Result
 End If
  
End Sub

' InQuest injected base64 decoded content
' 2+&j
' abzW
' @4(^r@
' @4(^r@

INQUEST-PP=macro
