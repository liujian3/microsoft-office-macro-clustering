Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_BeforeClose(Cancel As Boolean)
    ThisWorkbook.Saved = True
End Sub
Attribute VB_Name = "md_Actions"
Public Enum Actions
    Navigation = 1101
    ExcelExplorer = 1102
    MaxWorkSpace = 1103
    EnableKTERuler = 110401
    KTERulerSetting = 110402
    TackSnap = 110501
    ShowColumn = 1106
    ShowSheet = 1107
    InteractiveVisiblity = 110801
    ToggleSettings = 110802
    SetScrollArea = 110803
    HideInactivateSheets = 110804
    HideInactivateWindows = 110805
    UnhideAllRanges = 110806
    UnhideAllWorkSheets = 110807
    UnhideAllWindows = 110808
    FormulaBarEx = 1109
    MergeSameCell = 120101
    UnMergeSameCell = 120102
    spbFlipHorizontalCells = 120103
    FlipHorizontalCellsFormat = 12010301
    FlipHorizontalCells = 12010302
    spbFlipVerticalCells = 120104
    FlipVerticalCellsFormat = 12010401
    FlipVerticalCells = 12010402
    ConvertingCrossTab = 120105
    ConvertingCrossTabOneToTwo = 12010501
    TransformVerticalRange = 120106
    SwapRanges = 120107
    SortRandomize = 120108
    SortRandomizeSelect = 12010801
    spbPasteVisibleRange = 120109
    PasteVisibleRangeAll = 12010901
    PasteVisibleRangeValues = 12010902
    CompareCells = 1202
    CompareRanges = 130112
    CompareRangesByCell = 13011201
    DuplicateEntries = 120301
    LimitInput = 120302
    ClearDataValidation = 120303
    CopyMultipleRanges = 1204
    ForceValues = 120501
    ConvertFormulaToText = 120502
    ConvertTextToFormula = 120503
    DateFormatConverter = 120504
    TimeConvert = 12050501
    TimeToHours = 12050502
    TimeToMinutes = 12050503
    TimeToSeconds = 12050504
    CurrencyConversion = 120506
    UnitConversion = 120507
    NumberSystemsConversion = 120513
    ConvertSpelling = 120508
    ConvertRoman = 120509
    ChangeSign = 120510
    CombineRows = 120511
    ConvertNumberToOrdinal = 120512
    DisplayedToActual = 1206
    Round = 1207
    CombineColumnsorRows = 1208
    RangeHelper = 130101
    SelectIntervalRowsCols = 130102
    SelectMergedCell = 130103
    spbSelectCell = 130104
    SelectLastCellByLastOne = 13010401
    SelectLastCellByLastRow = 13010402
    SelectLastCellByLastColumn = 13010403
    SelectMaxMin = 130105
    SelectCellsWithErrorValue = 130106
    SelectCellsWithNonLocked = 130107
    SelectCellsWithNonBlank = 130108
    SelectSpecificCells = 130109
    SelectFormat = 130110
    SelectDuplicate = 130111
    InsertTitlesRows = 130201
    InsertBlackRowsCols = 130202
    RangeRandomize = 130203
    InsertSequenceNumber = 130204
    FindMissingSequence = 130205
    FillCustomLists = 130206
    ListCombinations = 130207
    galInsertBullet = 130214
    InsertBulletOptions = 13021401
    galInsertNumbering = 130215
    DatePicker = 130208
    FillBlankRange = 130209
    BatchInsertCheckBox = 130210
    BatchInsertOptionButton = 130211
    InsertPictures = 130216
    InsertWatermark = 130212
    InsertAutoText = 130213
    spbDelBlankRows = 130301
    DelBlankRowsInSelRange = 13030101
    DelBlankRowsInActSheet = 13030102
    DelBlankRowsInSelSheets = 13030103
    DelBlankRowsInAllSheets = 13030104
    DeleteRowsCols = 130302
    DeleteWatermark = 130303
    DeleteTools = 130304
    DeleteWebControl = 130305
    BatchDeleteCheckBox = 130306
    BatchDeleteOptionButton = 130307
    RemoveAllMacros = 130308
    BatchRemoveAllMacros = 130309
    AddText = 130401
    ExtractText = 130402
    ExtractMail = 130403
    RemoveSpaces = 130404
    RemoveLeadZero = 130413
    RemoveByPosition = 130405
    DeleteCharacters = 130406
    SubscriptNumbers = 130407
    ChangeCase = 130408
    REVERSETEXT = 130409
    ReplaceCharacters = 130410
    SplitName = 130411
    SplitCells = 130412
    AlternateRowShading = 130501
    SupperSubscript = 130502
    ApplyDateFormatting = 130503
    CopyFormatting = 130504
    ClearAllCellFormat = 130505
    AdjustRowCol = 130506
    ConvertHyperlinks = 130601
    FindLink = 130602
    spbDelHyperLinks = 130603
    DelHyperLinksInSelRange = 13060301
    DelHyperLinksInActSheet = 13060302
    DelHyperLinksInSelSheets = 13060303
    DelHyperLinksInAllSheets = 13060304
    KutoolsCalculator = 130701
    MathWithoutFormulas = 130702
    CommentShape = 130703
    CreateCommentList = 130704
    FormatComment = 130705
    FindReplaceCommentText = 130706
    RemoveAddComment = 130707
    ConvertComment = 130708
    spbAutoFitComment = 130709
    AutoFitCommentInActSheet = 13070901
    AutoFitCommentInInAllSheets = 13070902
    spbResetComment = 130710
    ResetCommentInActSheet = 13071001
    ResetCommentInAllSheets = 13071002
    SuperFind = 1308
    FuzzyMatch = 1309
    KTEFunctions = 1401
    FormulaHelper = 140201
    ExactFormulaCopy = 1403
    ConvertFormulaReferences = 1404
    ReplaceRangeNames = 140501
    ShowHideRangeName = 140502
    ErrorConditionWizard = 140503
    FillSheetRef = 140504
    Precedent = 140505
    Dependent = 140506
    DependentAndPrecedent = 140507
    SplitWorkbooks = 210101
    BatchConversion = 210102
    InsertWorkbook = 210103
    OpenFolder = 210104
    CopyFolder = 210105
    OpenFilesNextTime = 210106
    SynchronizeSheets = 210201
    SortSheets = 210202
    FreezePanesWorksheet = 210203
    UnfreezePanesWorksheet = 210204
    BatchRenameSheets = 210205
    CreateContentsSheet = 210206
    BatchNewOrCopySheets = 210207
    CustomizeWorkbook = 210208
    PerpetualCalendar = 210209
    SplitData = 210210
    MergeTables = 2109
    DelBlankSheets = 210211
    DelHideSheets = 210212
    DelInactiveSheets = 210213
    ConsolidataWorkSheets = 2103
    ShowDesign = 2104
    ExportRangetoFile = 210501
    ExportRangeasGraphic = 210502
    ExportChart = 210503
    ImportPictrue1 = 210504
    ImportPictrue2 = 210505
    InsertFileatCursor = 210506
    FilenameList = 210507
    CreateFolder = 210508
    BatchPrintingWizard = 210601
    PrintMultipleSelectionWizard = 210602
    CopyPageSetup = 210603
    DataPageOperation = 210604
    PrintFirstPage = 210605
    ReversePrint = 210606
    CustomPrint = 210609
    InsertPageBreak = 210607
    AddBorderToEachPage = 210608
    PrintColumns = 2107
    PrintCurrentPage = 2108
    CellEncode = 2201
    CellDecode = 2202
    BatchProtect = 2203
    BatchUnProtect = 2204
    MailsCreateLists = 2501
    MailsSend = 2502
    MailsOptions = 2503
    AdvancedSort = 2301
    SuperFilter = 2302
    BackgroundColor = 2303
    FilterBold = 230401
    FilterStrikethrough = 230402
    btnFilterItalic = 230403
    btnFilterComment = 230404
    btnFilterFormula = 2304005
    btnFilterMerge = 230406
    btnQuickFilter = 230407
    LockSelection = 3101
    UnlockSelection = 3102
    HighlightLockedRange = 3103
    HideSelection = 3104
    UnhideSelection = 3105
    HighlightHideSelection = 3106
    HighlightFormulaRange = 3201
    HighlightNamesRange = 3202
    ShowZero = 3203
    ShowFormulas = 3204
    ShowHeaders = 3205
    DesignSettings = 3401
    DesignClose = 3402
    RerunLastCommand = 1501
    LanguageCustommize = 160101
    SettingCenterKte = 160102
    RegisterKte = 160103
    CheckUpdates = 160106
    GetHelp = 160104
    AboutKte = 160105
End Enum

Function CallKutoolsAction(ByVal Action As Actions) As Boolean
    CallKutoolsAction = Application.COMAddIns(gAppProgIDName).Object.CallActions(Action)
End Function

Attribute VB_Name = "md_KTEAction"
'*******************************************************
'*|Copy Right : www.ExtendOffice.com, 2008-2019
'*|Copy Right : www.ExtendOffice.com, 2008-2019
'*|Copy Right : www.ExtendOffice.com, 2008-2019
'*|Copy Right : www.ExtendOffice.com, 2008-2019
'*******************************************************
Option Explicit
#If Win64 And VBA7 Then
    Function FunctionIsAvailable(Rg As Object, Fun As Long, Optional ShowMsg As Boolean = False, Optional Parent As LongPtr) As Boolean
        FunctionIsAvailable = Application.COMAddIns(gAppProgIDName).Object.FunctionIsAvailable(Rg, Fun, ShowMsg, Parent)
    End Function
    
    Function FormulaMsgbox(FHwnd As LongPtr) As Integer
        FormulaMsgbox = Application.COMAddIns(gAppProgIDName).Object.FormulaMsgbox(FHwnd)
    End Function
    
    Function ShowFormulaPrompt(FHwnd As LongPtr, Title As String) As Integer
        ShowFormulaPrompt = Application.COMAddIns(gAppProgIDName).Object.ShowFormulaPrompt(FHwnd, Title)
    End Function
    
    Function ShowUnundoPrompt(FHwnd As LongPtr, WbName1 As String, WbName2 As String, Title As String) As Integer
        ShowUnundoPrompt = Application.COMAddIns(gAppProgIDName).Object.ShowUnundoPrompt(FHwnd, WbName1, WbName2, Title)
    End Function
    
    Function ShowUnmergeCellsPrompt(FHwnd As LongPtr, Title As String) As Integer
        ShowUnmergeCellsPrompt = Application.COMAddIns(gAppProgIDName).Object.ShowUnmergeCellsPrompt(FHwnd, Title)
    End Function
    
    Function ShowMergeCellsPrompt(FHwnd As LongPtr, Title As String) As Integer
        ShowMergeCellsPrompt = Application.COMAddIns(gAppProgIDName).Object.ShowMergeCellsPrompt(FHwnd, Title)
    End Function
    
    Function GetFolder(FHwnd As LongPtr, ADefFolder As String) As Variant
        Dim xCacel As Boolean
        Dim xFolder As String
        xCacel = True
        If Application.COMAddIns(gAppProgIDName).Object.GetFolder(FHwnd, ADefFolder, xFolder) Then
            GetFolder = xFolder
        Else
            GetFolder = xCacel
        End If
    End Function
#Else
    Function FunctionIsAvailable(Rg As Object, Fun As Long, Optional ShowMsg As Boolean = False, Optional Parent As Long) As Boolean
        FunctionIsAvailable = Application.COMAddIns(gAppProgIDName).Object.FunctionIsAvailable(Rg, Fun, ShowMsg, Parent)
    End Function
    
    Function FormulaMsgbox(FHwnd As Long) As Integer
        FormulaMsgbox = Application.COMAddIns(gAppProgIDName).Object.FormulaMsgbox(FHwnd)
    End Function
    
    Function ShowFormulaPrompt(FHwnd As Long, Title As String) As Integer
        ShowFormulaPrompt = Application.COMAddIns(gAppProgIDName).Object.ShowFormulaPrompt(FHwnd, Title)
    End Function
    
    Function ShowUnundoPrompt(FHwnd As Long, WbName1 As String, WbName2 As String, Title As String) As Integer
        ShowUnundoPrompt = Application.COMAddIns(gAppProgIDName).Object.ShowUnundoPrompt(FHwnd, WbName1, WbName2, Title)
    End Function
    
    Function ShowUnmergeCellsPrompt(FHwnd As Long, Title As String) As Integer
        ShowUnmergeCellsPrompt = Application.COMAddIns(gAppProgIDName).Object.ShowUnmergeCellsPrompt(FHwnd, Title)
    End Function
    
    Function ShowMergeCellsPrompt(FHwnd As Long, Title As String) As Integer
        ShowMergeCellsPrompt = Application.COMAddIns(gAppProgIDName).Object.ShowMergeCellsPrompt(FHwnd, Title)
    End Function
    
    Function GetFolder(FHwnd As Long, ADefFolder As String) As Variant
        Dim xCacel As Boolean
        Dim xFolder As String
        xCacel = True
        If Application.COMAddIns(gAppProgIDName).Object.GetFolder(FHwnd, ADefFolder, xFolder) Then
            GetFolder = xFolder
        Else
            GetFolder = xCacel
        End If
    End Function
#End If

Function SaveToCsv(ByVal FWorbook As String, FFileName As String, FOpen As Boolean) As Boolean
    Dim xAccess As Boolean
    Dim xBook As Workbook
    xAccess = False
    On Error GoTo LExit
    Set xBook = Application.Workbooks.Item(FWorbook)
    xBook.SaveAs FFileName, xlCSV, , , , , , , , , , True
    xBook.Close False
    Set xBook = Nothing
    'If FOpen Then
    '    Application.Workbooks.Open FFileName, , , , , , , , , , , , , True
    'End If
    xAccess = True
LExit:
    SaveToCsv = xAccess
End Function

Sub FormulaToValue(pWorkRange As Range)
    On Error Resume Next
    Dim xRg As Range
    Dim xSubXrg As Range
    Set xRg = Application.Intersect(pWorkRange, pWorkRange.SpecialCells(xlCellTypeFormulas))
    For Each xSubXrg In xRg
        xSubXrg.Value = xSubXrg.Value
    Next
End Sub

Sub CreateContentSheetButtons(SheetName As String, SheetCodeName As String, MaxColCount As Integer)
    On Error Resume Next
    Dim Count As Integer
    Dim CurColumn As Integer
    Dim CurRow As Integer
    Dim Btn As Button
    Dim sht As Object
    Count = 0
    CurColumn = 1
    CurRow = 1
    On Error Resume Next
    For Each sht In ActiveWorkbook.Sheets
        If (sht.Visible = xlSheetVisible) And _
           (sht.Name <> SheetName) Then
            Set Btn = ActiveSheet.Buttons.Add(1, 1, 1, 1)
            Count = Count + 1
            Btn.Name = "GoToButton" & Count
            Btn.Left = 10 + ((CurColumn - 1) * 125)
            Btn.Top = CurRow * 32
            Btn.Width = 85
            Btn.Height = 26
            Btn.OnAction = "'" & ActiveWorkbook.Name & "'!" & SheetCodeName & ".GoToButton" & Count & "_Click"
            Btn.Text = sht.Name
            CurColumn = CurColumn + 1
            If CurColumn > MaxColCount Then
                CurColumn = 1
                CurRow = CurRow + 1
            End If
        End If
    Next sht
    'Call Application.COMAddIns(gAppProgIDName).Object.CreateContentSheetButtons(SheetName, SheetCodeName, MaxColCount)
End Sub

Function MathWithoutFormulaGetOperand(pText As String)
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.MathWithoutFormulaGetOperand(pText, ThisWorkbook)
End Function

Function ForceValues(pWorkRange As Range)
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.ForceValues(ThisWorkbook, pWorkRange)
End Function

Function DelTheSaveSheet(pWorkbook As Workbook, pSheetName As String)
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.DelTheSaveSheet(pWorkbook, pSheetName)
End Function

Function SaveLicense(pName As String, pKey As String)
    On Error Resume Next
    Application.COMAddIns(gAppProgIDName).Object.SaveLicense pName, pKey
End Function

Function RefreshRibbon()
    On Error Resume Next
    Application.COMAddIns(gAppProgIDName).Object.RefreshRibbon
End Function

Function RefreshExplorer()
    On Error Resume Next
    Application.COMAddIns(gAppProgIDName).Object.RefreshExplorer
End Function

Function InvalidateRibbon(pRibbon As IRibbonUI)
    On Error Resume Next
   pRibbon.Invalidate
End Function

Function RunDelphiUtility(pControlId As String)
    On Error Resume Next
    Application.COMAddIns("DeTong.KTELoader").Object.RunDelphiUtility pControlId
End Function

Function HideAutoFilter()
    Application.ActiveSheet.UsedRange.AutoFilter
End Function

Function ReplaceActiveCell(What, Replacement, LookAt, SearchOrder, MatchCase) As Long
    Dim Rg As Range
    Set Rg = ActiveCell.Find(What, , xlFormulas, LookAt, SearchOrder, xlNext, MatchCase, , False)
    If Rg Is Nothing Then
        ReplaceActiveCell = 0
    Else
        Application.DisplayAlerts = False
        Call ActiveCell.Replace(What, Replacement, LookAt, SearchOrder, MatchCase, , False, False)
        Application.DisplayAlerts = True
        Set Rg = ActiveCell.Find(What, , xlFormulas, LookAt, SearchOrder, xlNext, MatchCase, , False)
        If Rg Is Nothing Then
            On Error Resume Next
            Cells.FindNext(ActiveCell).Activate
            ReplaceActiveCell = 1
        Else
            ReplaceActiveCell = 2
        End If
    End If
End Function

Sub ChangeNameComment(xName As Name)
    xName.Comment = ""
End Sub

Sub ShowPlyBar()
    With Application.CommandBars
        '.FindControl(, 946).Visible = False
        '.FindControl(, 1968).Visible = False
        .Item("Ply").ShowPopup
        '.FindControl(, 946).Visible = True
        '.FindControl(, 1968).Visible = True
    End With
End Sub

Function ShowFunctionWizard() As Boolean
    On Error GoTo LExit
    ShowFunctionWizard = Application.Dialogs(xlDialogFunctionWizard).Show
    Exit Function
LExit:
    ShowFunctionWizard = False
End Function

Function GetHiddenSheets(FName As String) As Variant
    Dim xBook As Workbook
    Dim xList() As String
    Dim I As Long, K As Long
    On Error Resume Next
    Set xBook = Application.Workbooks.Item(FName)
    If Not (xBook Is Nothing) Then
        For I = 1 To xBook.Sheets.Count
            If xBook.Sheets(I).Visible <> xlSheetVisible Then
                ReDim Preserve xList(K)
                xList(K) = xBook.Sheets(I).Name
                K = K + 1
            End If
        Next
    End If
    GetHiddenSheets = xList
End Function

Attribute VB_Name = "md_KTEUndo"
'*******************************************************
'*|Copy Right : www.ExtendOffice.com, 2008-2019
'*|Copy Right : www.ExtendOffice.com, 2008-2019
'*|Copy Right : www.ExtendOffice.com, 2008-2019
'*|Copy Right : www.ExtendOffice.com, 2008-2019
'*******************************************************

Option Explicit

'---Undo Main---
Function SaveBookUndoInfo(NameWb As String, NameSht As Variant, NameAS As String, Optional AddShtName As String = "")
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.SaveBookUndoInfo(NameWb, NameSht, NameAS, AddShtName)
End Function

Function RetoreBookUndoInfo()
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.RetoreBookUndoInfo
End Function

Function SaveBooksUndoInfo(NameWb1 As String, NameSht1 As String, NameWb2 As String, NameSht2 As String, NameAS As String)
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.SaveBooksUndoInfo(NameWb1, NameSht1, NameWb2, NameSht2, NameAS)
End Function

Function RetoreBooksUndoInfo()
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.RetoreBooksUndoInfo
End Function
'---Undo Main End---

'---Alternate Row Shading---
Function SaveAlternateRowShading(pSelectRange As Range, pNeedRemoveCondition As Boolean, pFormual As String)
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.SaveAlternateRowShading(pSelectRange, ThisWorkbook, pNeedRemoveCondition, pFormual)
End Function

Function UndoAlternateRowShading()
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.UndoAlternateRowShading
End Function
'---Alternate Row Shading End---

'---Delete---
Function SaveDeleteInfo(pWorkbook As String, pWorkPath As String)
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.SaveDeleteInfo(pWorkbook, pWorkPath)
    'Call Application.COMAddIns(gAppProgIDName).Object.SaveDeleteInfoTemp(pWorkbook, pWorkPath)
End Function

Function UndoDeleteInfo()
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.UndoDeleteInfo
'    Call Application.COMAddIns(gAppProgIDName).Object.UndoDeleteInfoTemp
End Function

Function SaveDeleteSheet(xSheetObject As Object, Optional xSName As String = "")
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.SaveDeleteSheet(xSheetObject, xSName, xSheetObject.Parent)
End Function

Function UndoDeleteSheet()
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.UndoDeleteSheet
End Function

Function DeleteWebControl()
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.DeleteWebControl
End Function
'---Delete End---

'---ErrorCondition---
Function SaveErrorCondition(pWorkRange As Range, pWorksheet As Worksheet, pSelect As String)
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.SaveErrorCondition(pWorkRange, pWorksheet, ThisWorkbook, pSelect)
End Function

Sub UndoErrorCondition()
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.UndoErrorCondition
End Sub
'---ErrorCondition End---

'---SupperSubSript---
Function SaveSupperSubScript(pCell As Range)
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.SaveSupperSubScript(pCell, ThisWorkbook)
End Function

Function UndoSupperSubScript()
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.UndoSupperSubScript
End Function
'---SupperSubSript End---

'---Visibility---
Function SaveScrollArea(pRange As Range)
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.SaveScrollArea(pRange)
End Function

Function UndoScrollArea()
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.UndoScrollArea
End Function

Function SaveRangeVisibility(pRowsRange As Range, pColsRange As Range, pVisibility As Boolean)
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.SaveRangeVisibility(pRowsRange, pColsRange, pVisibility)
End Function

Function UndoRangeVisibility()
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.UndoRangeVisibility
End Function

Function SaveSheetsVisibility(pSheets As Variant, pVisibility As Integer)
    On Error Resume Next
    Dim xIndex As Integer
    Dim I As Integer
    Dim WinNameList() As String
    xIndex = 0
    For I = 0 To UBound(pSheets)
        If Not (pSheets(I) Is Nothing) Then
            ReDim Preserve WinNameList(xIndex)
            WinNameList(xIndex) = pSheets(I).Name
            xIndex = xIndex + 1
        End If
    Next I
    Call Application.COMAddIns(gAppProgIDName).Object.SaveSheetsVisibility(pSheets(0).Parent, WinNameList(), pVisibility)
End Function

Function UndoSheetsVisibility()
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.UndoSheetsVisibility
End Function

Function SaveWindowVisibility(pWindows() As Window, pVisibility As Boolean)
    On Error Resume Next
    Dim xIndex As Integer
    Dim WinNameList() As String
    Dim I As Integer
    xIndex = 0
    For I = 0 To UBound(pWindows)
        If Not (pWindows(I) Is Nothing) Then
            ReDim Preserve WinNameList(xIndex)
            WinNameList(xIndex) = pWindows(I).Caption
            xIndex = xIndex + 1
        End If
    Next I
    Call Application.COMAddIns(gAppProgIDName).Object.SaveWindowVisibility(WinNameList(), pVisibility)
End Function

Function UndoWindowVisibility()
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.UndoWindowVisibility
End Function
'---Visibility End---

'---Swap Ranges---
Function DoSwapRangesAndSaveBackup(pUndoDescription As String, pRowsCount As Long, pColsCount As Long, pBook1Name As String, pBook2Name As String, pSheet1Name As String, pSheet2Name As String, pAddress1 As String, pAddress2 As String)
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.DoSwapRangesAndSaveBackup(pUndoDescription, pRowsCount, pColsCount, pBook1Name, pBook2Name, pSheet1Name, pSheet2Name, pAddress1, pAddress2, ThisWorkbook)
End Function

Function UndoSwapRanges()
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.UndoSwapRanges
End Function
'---Swap Ranges End---

'---Radom Range---
Function SaveRadomRangeUtility(pSelectRange As Range)
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.SaveRadomRangeUtility(pSelectRange, ThisWorkbook)
End Function

Function UndoRandomRangeUtility()
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.UndoRandomRangeUtility
End Function
'---Radom Range End---

'---Batch New Or Copy Sheets---
Function SaveBatchNewOrCopySheets(pWorkbook As Workbook, pWorksheets() As Worksheet)
    On Error Resume Next
    Dim xIndex As Integer
    xIndex = 0
    Dim I As Integer
    For I = 0 To UBound(pWorksheets)
        If Not (pWorksheets(I) Is Nothing) Then
            ReDim Preserve WorksheetsName(xIndex)
            Set WorksheetsName(xIndex) = pWorksheets(I).Name
            xIndex = xIndex + 1
        End If
    Next I
    Call Application.COMAddIns(gAppProgIDName).Object.UndoBatchNewOrCopySheets(pWorkbook, WorksheetsName)
End Function

Function UndoBatchNewOrCopySheets()
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.UndoBatchNewOrCopySheets
End Function
'---Batch New Or Copy Sheets End---

'----Sort Worksheets---
Function SaveSortWorksheets(pWorkbook As Workbook, pWorksheetsName() As String)
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.SaveSortWorksheets(pWorkbook, pWorksheetsName)
End Function

Function UndoSortSheets()
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.UndoSortWorksheets
End Function
'----Sort Worksheets End---

'----Force Values---
Function SaveForceValues(pRange As Range, pSelectRange As Range)
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.SaveForceValues(pRange, pSelectRange, ThisWorkbook)
End Function

Function UndoForceValues()
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.UndoForceValues
End Function
'----Force Values End---

Function UndoCellAllPaste()
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.UndoCellAllPaste
End Function

'----Range Info---
Function SaveFilterRangeInfo(pRange As Range)
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.SaveRangeInfo(pRange, Selection, ThisWorkbook)
End Function

Function UndoFilterRangeInfo()
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.UndoRangeInfo
End Function

Function SaveRangeInfo(pRange As Range)
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.SaveRangeInfo(pRange, Selection, ThisWorkbook)
End Function

Function UndoRangeInfo()
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.UndoRangeInfo
End Function

Function SaveMultiRangeInfo(pRange As Range, pSelectRange As Range)
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.SaveMultiRangeInfo(pRange, pSelectRange, ThisWorkbook)
End Function
'----Range Info End---

'---Batch Rename Sheets---
Function SaveBatchRenameSheets(pWorkbook As Workbook, pWorksheets() As Worksheet, pWorksheetsName() As String)
    On Error Resume Next
    Dim xIndex As Integer, I As Integer
    Dim OldSheetsNames() As String
    Dim NewSheetsNames() As String
    xIndex = 0
    For I = 0 To UBound(pWorksheets)
        If Not (pWorksheets(I) Is Nothing) Then
            ReDim Preserve OldSheetsNames(xIndex)
            ReDim Preserve NewSheetsNames(xIndex)
            OldSheetsNames(xIndex) = pWorksheetsName(I)
            NewSheetsNames(xIndex) = pWorksheets(I).Name
            xIndex = xIndex + 1
        End If
    Next
    ReDim Preserve NewSheetsNames(xIndex)
    NewSheetsNames(xIndex) = pWorksheetsName(UBound(pWorksheetsName))
    Call Application.COMAddIns(gAppProgIDName).Object.SaveBatchRenameSheets(pWorkbook, OldSheetsNames, NewSheetsNames)
End Function

Function UndoBatchRenameSheets()
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.UndoBatchRenameSheets
End Function
'---Batch Rename Sheets End---

'---Hyperlinks Address---
Function SaveHyperlinksAddess(pRange As Range, pSelectRange As Range, xClearHyperlinks As Boolean)
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.SaveHyperlinksAddess(pRange, pSelectRange, ThisWorkbook, xClearHyperlinks)
End Function

Function UndoHyperlinksAddess()
    On Error Resume Next
    Call Application.COMAddIns(gAppProgIDName).Object.UndoHyperlinksAddess '(pRange, pSelectRange, ThisWorkbook, xClearHyperlinks)
End Function
'---Hyperlinks Address End---
Attribute VB_Name = "md_Pubilc"
'*******************************************************
'*|Copy Right : www.ExtendOffice.com, 2008-2019
'*|Copy Right : www.ExtendOffice.com, 2008-2019
'*|Copy Right : www.ExtendOffice.com, 2008-2019
'*|Copy Right : www.ExtendOffice.com, 2008-2019
'*******************************************************
Option Explicit

Public Const gAppProgIDName As String = "DeTong.KTELoader"



Attribute VB_Name = "md_UDF"
'*******************************************************
'*|Copy Right : www.ExtendOffice.com, 2008-2019
'*|Copy Right : www.ExtendOffice.com, 2008-2019
'*|Copy Right : www.ExtendOffice.com, 2008-2019
'*|Copy Right : www.ExtendOffice.com, 2008-2019
'*******************************************************

Option Explicit
'|fffd||fffd||221||5b8||fffd||fffd||5b5||fffd||fffd||fffd||375||135||fffd||52a||fffd||fffd|
Private Function GetSpecialCells(Rg As Range, Values As Integer) As Range

    Dim xCRetRg As Range
    Dim xFRetRg As Range
    
    On Error Resume Next
    Set xCRetRg = Rg.SpecialCells(xlCellTypeConstants, Values)
    Set xFRetRg = Rg.SpecialCells(xlCellTypeFormulas, Values)
    
    If (xCRetRg Is Nothing) And (xFRetRg Is Nothing) Then
       Set GetSpecialCells = Nothing
    ElseIf (xCRetRg Is Nothing) Then
        Set GetSpecialCells = xFRetRg
    ElseIf (xFRetRg Is Nothing) Then
        Set GetSpecialCells = xCRetRg
    Else
        Set GetSpecialCells = Application.Union(xCRetRg, xFRetRg)
    End If
    
End Function

Function REVERSETEXT(txt As String, Optional separator_char As String = "") As String
Attribute REVERSETEXT.VB_Description = "|fffd||fffd||fffd||778||fffd||fffd||fffd||fffd||137||5b8||edfd||2bd||fffd||fffd||fffd||fffd||5ea||fffd||131||fffd|."
Attribute REVERSETEXT.VB_HelpID = 102
Attribute REVERSETEXT.VB_ProcData.VB_Invoke_Func = " \n20"
    Dim I As Long
    Dim xVar As Variant
    Application.Volatile
    If separator_char = "" Then
        For I = Len(txt) To 1 Step -1
            REVERSETEXT = REVERSETEXT & VBA.Mid(txt, I, 1)
        Next
    Else
        xVar = VBA.Split(txt, separator_char)
        For I = UBound(xVar) To 0 Step -1
            If I = UBound(xVar) Then
                REVERSETEXT = xVar(I)
            Else
                REVERSETEXT = REVERSETEXT & separator_char & xVar(I)
            End If
        Next
    End If
End Function

Function EXTRACTNUMBERS(txt As String, Optional n As Boolean = False) As Variant
Attribute EXTRACTNUMBERS.VB_Description = "|fffd||4f8||fffd||fffd||fffd||fffd||fffd||fffd||131||fffd||fffd||fffd||fffd||fffd||221||fffd||fffd||fffd||fffd|"
Attribute EXTRACTNUMBERS.VB_HelpID = 102
Attribute EXTRACTNUMBERS.VB_ProcData.VB_Invoke_Func = " \n20"
    Application.Volatile
    EXTRACTNUMBERS = Application.COMAddIns(gAppProgIDName).Object.EXTRACTNUMBERS(txt)
    If n Then
        If Not EXTRACTNUMBERS = "" Then EXTRACTNUMBERS = Val(EXTRACTNUMBERS)
    End If
End Function

Function COUNTSHADES(reference As Range) As Long
Attribute COUNTSHADES.VB_Description = "|221||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||26b||fffd||135||fffd||52a||fffd||fffd||fffd||fffd||fffd|. |fffd||2fa||fffd||fffd||fffd||fffd||fffd||5a7||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2bd|."
Attribute COUNTSHADES.VB_HelpID = 102
Attribute COUNTSHADES.VB_ProcData.VB_Invoke_Func = " \n20"
    Dim Rg As Range
    Application.Volatile
    For Each Rg In reference
        If Rg.Interior.ColorIndex <> xlColorIndexNone Then
            COUNTSHADES = COUNTSHADES + 1
        End If
    Next
End Function

Function COUNTBYFONTBOLD(reference As Range) As Long
Attribute COUNTBYFONTBOLD.VB_Description = "|221||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3aa||fffd||fffd||fffd||fffd||135||fffd||52a||fffd||fffd||fffd||fffd||fffd|. |fffd||2fa||fffd||fffd||fffd||fffd||fffd||5a7||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2bd|."
Attribute COUNTBYFONTBOLD.VB_HelpID = 102
Attribute COUNTBYFONTBOLD.VB_ProcData.VB_Invoke_Func = " \n20"
    Dim Rg As Range
    Application.Volatile
    For Each Rg In reference
        If Rg.Font.Bold Then _
            COUNTBYFONTBOLD = COUNTBYFONTBOLD + 1
    Next
End Function

Function SUMBYFONTBOLD(reference As Range) As Double
Attribute SUMBYFONTBOLD.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3aa||fffd||fffd||fffd||fffd||135||fffd||52a||fffd||fffd||fffd||fffd||fffd||5b5||fffd||13a||fffd|. |fffd||2fa||fffd||fffd||fffd||fffd||fffd||5a7||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2bd|."
Attribute SUMBYFONTBOLD.VB_HelpID = 102
Attribute SUMBYFONTBOLD.VB_ProcData.VB_Invoke_Func = " \n20"
    Dim Rg As Range, URg As Range
    Application.Volatile
    On Error Resume Next
    Set URg = Application.Intersect(reference.Parent.UsedRange, reference)
    If Not URg Is Nothing Then
        For Each Rg In URg
            If Rg.Font.Bold Then _
                SUMBYFONTBOLD = SUMBYFONTBOLD + Application.WorksheetFunction.Sum(Rg)
        Next
    End If
End Function

Function COUNTBYCELLCOLOR(reference As Range, color_index_nr) As Long
Attribute COUNTBYCELLCOLOR.VB_Description = "|221||fffd||fffd||fffd||fffd||fffd||fffd||fffd||6b0||fffd||fffd||fffd||fffd||636||fffd||fffd||fffd||fffd||26b||fffd||135||fffd||52a||fffd||fffd||fffd||fffd||fffd|. |fffd||2fa||fffd||fffd||fffd||fffd||fffd||5a7||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2bd|."
Attribute COUNTBYCELLCOLOR.VB_HelpID = 102
Attribute COUNTBYCELLCOLOR.VB_ProcData.VB_Invoke_Func = " \n20"
    Dim Rg As Range
    Dim ClIndex As Long
    Application.Volatile
    If TypeName(color_index_nr) = "Range" Then
        ClIndex = color_index_nr.Range("A1").Interior.Color
        For Each Rg In reference
            If Rg.Interior.Color = ClIndex Then
                COUNTBYCELLCOLOR = COUNTBYCELLCOLOR + 1
            End If
        Next
    Else
        If VBA.IsNumeric(color_index_nr) Then
            ClIndex = Val(color_index_nr)
            For Each Rg In reference
                If Rg.Interior.ColorIndex = ClIndex Then
                    COUNTBYCELLCOLOR = COUNTBYCELLCOLOR + 1
                End If
            Next
        Else
            COUNTBYCELLCOLOR = CVErr(xlErrValue)
        End If
    End If
End Function

Function COUNTBYFONTCOLOR(reference As Range, color_index_nr) As Long
Attribute COUNTBYFONTCOLOR.VB_Description = "|221||fffd||fffd||fffd||fffd||fffd||fffd||fffd||6b0||fffd||fffd||fffd||fffd||636||fffd||fffd||fffd||fffd||fffd||fffd||fffd||26b||fffd||135||fffd||52a||fffd||fffd||fffd||fffd||fffd|. |fffd||2fa||fffd||fffd||fffd||fffd||fffd||5a7||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2bd|."
Attribute COUNTBYFONTCOLOR.VB_HelpID = 102
Attribute COUNTBYFONTCOLOR.VB_ProcData.VB_Invoke_Func = " \n20"
    Dim Rg As Range
    Dim ClIndex As Long
    Application.Volatile
    If TypeName(color_index_nr) = "Range" Then
        ClIndex = color_index_nr.Range("A1").Font.Color
        For Each Rg In reference
            If Rg.Font.Color = ClIndex Then
                COUNTBYFONTCOLOR = COUNTBYFONTCOLOR + 1
            End If
        Next
    Else
        If VBA.IsNumeric(color_index_nr) Then
            ClIndex = Val(color_index_nr)
            For Each Rg In reference
                If Rg.Font.ColorIndex = ClIndex Then
                    COUNTBYFONTCOLOR = COUNTBYFONTCOLOR + 1
                End If
            Next
        Else
            COUNTBYFONTCOLOR = CVErr(xlErrValue)
        End If
    End If
End Function

Function COUNTCHAR(within_text As String, find_text As String) As Long
Attribute COUNTCHAR.VB_Description = "|221||fffd||fffd||4bb||fffd||fffd||fffd||5b7||fffd||fffd||fffd||fffd||fffd||4bb||fffd||fffd||fffd||131||fffd||fffd||433||fffd||fffd||5b5||134||fffd||fffd||fffd|. |fffd||2fa||fffd||fffd||fffd||fffd||fffd||421||434||fffd||fffd||fffd||fffd|."
Attribute COUNTCHAR.VB_HelpID = 102
Attribute COUNTCHAR.VB_ProcData.VB_Invoke_Func = " \n20"
    Application.Volatile
    COUNTCHAR = Len(within_text) - Len(Replace(within_text, find_text, ""))
End Function

Function SUMBYFONTCOLOR(reference As Range, color_index_nr) As Double
Attribute SUMBYFONTCOLOR.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||6b0||fffd||fffd||fffd||fffd||636||fffd||fffd||fffd||fffd||fffd||fffd||fffd||26b||fffd||135||fffd||52a||fffd||fffd||fffd||fffd||fffd||5b5||fffd||13a||fffd|. |fffd||2fa||fffd||fffd||fffd||fffd||fffd||5a7||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2bd|."
Attribute SUMBYFONTCOLOR.VB_HelpID = 102
Attribute SUMBYFONTCOLOR.VB_ProcData.VB_Invoke_Func = " \n20"
    Dim Rg As Range, URg As Range
    Dim ClIndex As Long
    Application.Volatile
    On Error Resume Next
    Set URg = Application.Intersect(reference.Parent.UsedRange, reference)
    If Not URg Is Nothing Then
        If TypeName(color_index_nr) = "Range" Then
            ClIndex = color_index_nr.Range("A1").Font.Color
            For Each Rg In URg
                If Rg.Font.Color = ClIndex Then
                    SUMBYFONTCOLOR = SUMBYFONTCOLOR + Application.WorksheetFunction.Sum(Rg)
                End If
            Next
        Else
            If VBA.IsNumeric(color_index_nr) Then
                ClIndex = Val(color_index_nr)
                For Each Rg In URg
                    If Rg.Font.ColorIndex = ClIndex Then
                        SUMBYFONTCOLOR = SUMBYFONTCOLOR + Application.WorksheetFunction.Sum(Rg)
                    End If
                Next
            Else
                SUMBYFONTCOLOR = CVErr(xlErrValue)
            End If
        End If
    End If
End Function

Function SUMBYCELLCOLOR(reference As Range, color_index_nr) As Double
Attribute SUMBYCELLCOLOR.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||6b0||fffd||fffd||fffd||fffd||636||fffd||fffd||fffd||fffd||26b||fffd||135||fffd||52a||fffd||fffd||fffd||fffd||fffd||5b5||fffd||13a||fffd|. |fffd||2fa||fffd||fffd||fffd||fffd||fffd||5a7||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||2bd|."
Attribute SUMBYCELLCOLOR.VB_HelpID = 102
Attribute SUMBYCELLCOLOR.VB_ProcData.VB_Invoke_Func = " \n20"
    Dim Rg As Range, URg As Range
    Dim ClIndex As Long
    Application.Volatile
    On Error Resume Next
    Set URg = Application.Intersect(reference.Parent.UsedRange, reference)
    If Not URg Is Nothing Then
        If TypeName(color_index_nr) = "Range" Then
            ClIndex = color_index_nr.Range("A1").Interior.Color
            For Each Rg In URg
                If Rg.Interior.Color = ClIndex Then
                    SUMBYCELLCOLOR = SUMBYCELLCOLOR + Application.WorksheetFunction.Sum(Rg)
                End If
            Next
        Else
            If VBA.IsNumeric(color_index_nr) Then
                ClIndex = Val(color_index_nr)
                For Each Rg In URg
                    If Rg.Interior.ColorIndex = ClIndex Then
                        SUMBYCELLCOLOR = SUMBYCELLCOLOR + Application.WorksheetFunction.Sum(Rg)
                    End If
                Next
            Else
                SUMBYCELLCOLOR = CVErr(xlErrValue)
            End If
        End If
    End If
End Function

Function TIME2HOURS(TimeData As Variant) As Variant
Attribute TIME2HOURS.VB_Description = "|fffd||fffd| HH:MM:SS |fffd||fffd||2bd||fffd||fffd||2b1||fffd||fffd||fffd||fffd||fffd||fffd||131||fffd||5ea||fffd||fffd||3aa||fffd||fffd||421||fffd||fffd||fffd||fffd||2bd||fffd||fffd||421||2b1|."
Attribute TIME2HOURS.VB_HelpID = 102
Attribute TIME2HOURS.VB_ProcData.VB_Invoke_Func = " \n20"
'    Dim xTxt As String
    Dim xVar As Variant
    Application.Volatile
'    If TypeName(TimeData) = "Range" Then
'        xTxt = TimeData.Range("A1").Text
'    Else
'        xTxt = VBA.CStr(TimeData)
'    End If
    On Error Resume Next
    xVar = Application.COMAddIns(gAppProgIDName).Object.TIME2HOURS(TimeData)
    If (Err <> 0) Or (VBA.TypeName(xVar) = "String") Then
        TIME2HOURS = CVErr(2036)
    Else
        TIME2HOURS = xVar
    End If
End Function

Function TIME2MINUTES(TimeData As Variant) As Variant
Attribute TIME2MINUTES.VB_Description = "|fffd||fffd| HH:MM:SS |fffd||fffd||2bd||fffd||fffd||2b1||fffd||fffd||fffd||fffd||fffd||fffd||131||fffd||5ea||fffd||fffd||3aa||fffd||fffd||421||fffd||fffd||fffd||fffd||2bd||fffd||137||fffd||fffd||fffd|."
Attribute TIME2MINUTES.VB_HelpID = 102
Attribute TIME2MINUTES.VB_ProcData.VB_Invoke_Func = " \n20"
'    Dim xTxt As String
    Dim xVar As Variant
    Application.Volatile
'    If TypeName(TimeData) = "Range" Then
'        xTxt = TimeData.Range("A1").Text
'    Else
'        xTxt = VBA.CStr(TimeData)
'    End If
    On Error Resume Next
    xVar = Application.COMAddIns(gAppProgIDName).Object.TIME2MINUTES(TimeData)
    If (Err <> 0) Or (VBA.TypeName(xVar) = "String") Then
        TIME2MINUTES = CVErr(2036)
    Else
        TIME2MINUTES = xVar
    End If
End Function

Function TIME2SECONDS(TimeData As Variant) As Variant
Attribute TIME2SECONDS.VB_Description = "|fffd||fffd| HH:MM:SS |fffd||fffd||2bd||fffd||fffd||2b1||fffd||fffd||fffd||fffd||fffd||fffd||131||fffd||5ea||fffd||fffd||3aa||fffd||fffd||fffd||fffd|."
Attribute TIME2SECONDS.VB_HelpID = 102
Attribute TIME2SECONDS.VB_ProcData.VB_Invoke_Func = " \n20"
'    Dim xTxt As String
    Dim xVar As Variant
'    Application.Volatile
'    If TypeName(TimeData) = "Range" Then
'        xTxt = TimeData.Range("A1").Text
'    Else
'        xTxt = VBA.CStr(TimeData)
'    End If
    On Error Resume Next
    xVar = Application.COMAddIns(gAppProgIDName).Object.TIME2SECONDS(TimeData)
    If (Err <> 0) Or (VBA.TypeName(xVar) = "String") Then
        TIME2SECONDS = CVErr(2036)
    Else
        TIME2SECONDS = xVar
    End If
End Function

Function SUMVISIBLE(reference As Range) As Variant
Attribute SUMVISIBLE.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||6bf||27c||fffd||fffd||fffd||52a||fffd||fffd||fffd||fffd||fffd||5b5||fffd||13a||fffd|."
Attribute SUMVISIBLE.VB_HelpID = 102
Attribute SUMVISIBLE.VB_ProcData.VB_Invoke_Func = " \n20"
    Dim Rg As Range
    On Error Resume Next
    Application.Volatile
    Set Rg = GetVisibleRange(reference)
    If Not Rg Is Nothing Then
        SUMVISIBLE = Application.WorksheetFunction.Sum(Rg) 'Application.Evaluate("SUM(" & Rg.Address & ")")
    Else
        SUMVISIBLE = 0
    End If
End Function

Function COUNTVISIBLE(reference As Range) As Long
Attribute COUNTVISIBLE.VB_Description = "|221||fffd||fffd||fffd||fffd||fffd||fffd||fffd||6bf||27c||fffd||fffd||fffd||52a||fffd||fffd||138||fffd||fffd||fffd|."
Attribute COUNTVISIBLE.VB_HelpID = 102
Attribute COUNTVISIBLE.VB_ProcData.VB_Invoke_Func = " \n20"
    Dim xCell As Range
    Dim xCount As Long
    On Error Resume Next
    Application.Volatile
    For Each xCell In reference
        If (xCell.EntireRow.Hidden = False) And _
           (xCell.EntireColumn.Hidden = False) Then
            xCount = xCount + 1
        End If
    Next
    COUNTVISIBLE = xCount
End Function

Function AVERAGEVISIBLE(reference As Range) As Variant
Attribute AVERAGEVISIBLE.VB_Description = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||6bf||27c||fffd||fffd||fffd||52a||fffd||fffd||fffd||fffd||fffd||fffd||fffd||1bd||fffd||fffd||5b5|"
Attribute AVERAGEVISIBLE.VB_HelpID = 102
Attribute AVERAGEVISIBLE.VB_ProcData.VB_Invoke_Func = " \n20"
    Dim Rg As Range
    On Error Resume Next
    Application.Volatile
    Set Rg = GetVisibleRange(reference)
    If Not Rg Is Nothing Then
        AVERAGEVISIBLE = Application.WorksheetFunction.Average(Rg) 'Application.Evaluate("AVERAGE(" & Rg.Address & ")")
    Else
        AVERAGEVISIBLE = CVErr(xlErrDiv0)
    End If
End Function

Private Function GetVisibleRange(Rg As Range) As Range
    Dim xOutRg As Range
    Dim xRg As Range
    Dim xCell As Range
    On Error Resume Next
    Set xRg = Application.Intersect(Rg, Rg.Worksheet.UsedRange)
    If Not (xRg Is Nothing) Then
        For Each xCell In xRg
            If (xCell.EntireRow.Hidden = False) And _
               (xCell.EntireColumn.Hidden = False) Then
                If xOutRg Is Nothing Then
                    Set xOutRg = xCell
                Else
                    Set xOutRg = Application.Union(xCell, xOutRg)
                End If
            End If
        Next
    End If
    Set GetVisibleRange = xOutRg
End Function


' InQuest injected base64 decoded content
' pejy
' ,"p%
' '"p%
' *ey'
' zYl>
' aZ+a
' *'Z,
' RwhE

INQUEST-PP=macro
