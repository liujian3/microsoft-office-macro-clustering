Attribute VB_Name = "Module1"

Option Explicit
Dim iTargetRow As Integer

' column index numbers for Data Validation sheet
Const ColDVClientId = 1
Const ColDVClientSubId = 2
Const ColDVClientSortName = 3
Const ColDVClientFederalId = 4
Const ColDVClientType = 5
Const ColDVClientAppendedId = 6
Const ColDVClientMessage = 7

' names for various worksheets
Const SheetNameCommon = "Common Field Definitions"
Const SheetNameIndiv = "Client Data INDIV"
Const SheetNameCorp = "Client Data CORP"
Const SheetNamePart = "Client Data PART"
Const SheetNameFid = "Client Data FID"
Const SheetNameEmpplan = "Client Data EMP PLAN"
Const SheetNameNonprofit = "Client Data NON PROFIT"
Const SheetNameSole = "Client Data SOLE PROPRIETORSHIP"
Const SheetNameOther = "Client Data OTHER"
Const SheetNameDatavalidation = "Data Validation"
Const SheetNameDuplicatesbyid = "Duplicates by ID"
Const SheetNameDuplicatesbyname = "Duplicates by Name"
Const SheetNameDuplicatesbyfedid = "Duplicates by FedID"

' column names for federal id which vary by entity
Const ColumnNameFedidIndiv = "Client Social Security Number"
Const ColumnNameFedidCorp = "Federal ID"
Const ColumnNameFedidPart = "Federal ID"
Const ColumnNameFedidFid = "Fiduciary Federal ID"
Const ColumnNameFedidEmpplan = "Sponsor or Employer Federal ID"
Const ColumnNameFedidNonprofit = "Federal ID"
Const ColumnNameFedidSole = "Federal ID"
Const ColumnNameFedidOther = "Federal ID"

' column names for first name by entity
Const ColumnNameTPFirstIndiv = "First Name"
Const ColumnNameTPFirstCorp = "Company Name Line 1"
Const ColumnNameTPFirstPart = "Company Name Line 1"
Const ColumnNameTPFirstFid = "Estate or trust name 1"
Const ColumnNameTPFirstEmpplan = "Sponsor or Employer Name 1"
Const ColumnNameTPFirstNonprofit = "Organization name line 1"
Const ColumnNameTPFirstSole = "Company Name Line 1"
Const ColumnNameTPFirstOther = "Name Line 1"

' column names for last name by entity
Const ColumnNameTPLastIndiv = "Last Name"
Const ColumnNameTPLastCorp = "N/A"
Const ColumnNameTPLastPart = "N/A"
Const ColumnNameTPLastFid = "N/A"
Const ColumnNameTPLastEmpplan = "N/A"
Const ColumnNameTPLastNonprofit = "N/A"
Const ColumnNameTPLastSole = "N/A"
Const ColumnNameTPLastOther = "N/A"

' column names for middle name by entity
Const ColumnNameTPMiddleIndiv = "Middle Initial"
Const ColumnNameTPMiddleCorp = "N/A"
Const ColumnNameTPMiddlePart = "N/A"
Const ColumnNameTPMiddleFid = "N/A"
Const ColumnNameTPMiddleEmpplan = "N/A"
Const ColumnNameTPMiddleNonprofit = "N/A"
Const ColumnNameTPMiddleSole = "N/A"
Const ColumnNameTPMiddleOther = "N/A"

' column names for first name by entity
Const ColumnNameSPFirstIndiv = "Spouse First Name"
Const ColumnNameSPFirstCorp = "N/A"
Const ColumnNameSPFirstPart = "N/A"
Const ColumnNameSPFirstFid = "N/A"
Const ColumnNameSPFirstEmpplan = "N/A"
Const ColumnNameSPFirstNonprofit = "N/A"
Const ColumnNameSPFirstSole = "N/A"
Const ColumnNameSPFirstOther = "N/A"

' column names for last name by entity
Const ColumnNameSPLastIndiv = "Spouse Last Name"
Const ColumnNameSPLastCorp = "N/A"
Const ColumnNameSPLastPart = "N/A"
Const ColumnNameSPLastFid = "N/A"
Const ColumnNameSPLastEmpplan = "N/A"
Const ColumnNameSPLastNonprofit = "N/A"
Const ColumnNameSPLastSole = "N/A"
Const ColumnNameSPLastOther = "N/A"

' column names for middle name by entity
Const ColumnNameSPMiddleIndiv = "Spouse Middle Name"
Const ColumnNameSPMiddleCorp = "N/A"
Const ColumnNameSPMiddlePart = "N/A"
Const ColumnNameSPMiddleFid = "N/A"
Const ColumnNameSPMiddleEmpplan = "N/A"
Const ColumnNameSPMiddleNonprofit = "N/A"
Const ColumnNameSPMiddleSole = "N/A"
Const ColumnNameSPMiddleOther = "N/A"

' various setting strings used
' columns on the Data Validation and duplicate analysis sheets that need to be auto-fit when the sheet has been populated
Const SettingAutofit = "A:G"
' column range that needs to be cleared on the Data Validation and duplicate analysis sheets before populating
Const SettingClear1 = "A2"
Const SettingClear2 = "G1048576"

Public Sub GatherValidation()
    ' clear the target area
    Dim MyWorksheet As Worksheet
    Set MyWorksheet = ThisWorkbook.Worksheets(SheetNameDatavalidation)
    MyWorksheet.Range(SettingClear1, SettingClear2).Clear
    
    ' as we copy data, we also need to sum the number of field length errors found
    Dim iErrors As Integer
    
    ' gather the "source" data
    '   and combine onto the Data Validation sheet
    '   generally, the column names for all entity types is the same,
    '   except for the federal id, which varies by entity so we need
    '   to provide that column name identifier so it can be located
    ' note:  each call to the CopyToValidation function will return the number of field length errors encountered
    '   so we need to add them up
    iTargetRow = 1
    iErrors = 0
    iErrors = iErrors + CopyToValidation(SheetNameIndiv, ColumnNameFedidIndiv, ColumnNameTPFirstIndiv, ColumnNameTPMiddleIndiv, ColumnNameTPLastIndiv, ColumnNameSPFirstIndiv, ColumnNameSPMiddleIndiv, ColumnNameSPLastIndiv)
    iErrors = iErrors + CopyToValidation(SheetNameCorp, ColumnNameFedidCorp, ColumnNameTPFirstCorp, ColumnNameTPMiddleCorp, ColumnNameTPLastCorp, ColumnNameSPFirstCorp, ColumnNameSPMiddleCorp, ColumnNameSPLastCorp)
    iErrors = iErrors + CopyToValidation(SheetNamePart, ColumnNameFedidPart, ColumnNameTPFirstPart, ColumnNameTPMiddlePart, ColumnNameTPLastPart, ColumnNameSPFirstPart, ColumnNameSPMiddlePart, ColumnNameSPLastPart)
    iErrors = iErrors + CopyToValidation(SheetNameFid, ColumnNameFedidFid, ColumnNameTPFirstFid, ColumnNameTPMiddleFid, ColumnNameTPLastFid, ColumnNameSPFirstFid, ColumnNameSPMiddleFid, ColumnNameSPLastFid)
    iErrors = iErrors + CopyToValidation(SheetNameEmpplan, ColumnNameFedidEmpplan, ColumnNameTPFirstEmpplan, ColumnNameTPMiddleEmpplan, ColumnNameTPLastEmpplan, ColumnNameSPFirstEmpplan, ColumnNameSPMiddleEmpplan, ColumnNameSPLastEmpplan)
    iErrors = iErrors + CopyToValidation(SheetNameNonprofit, ColumnNameFedidNonprofit, ColumnNameTPFirstNonprofit, ColumnNameTPMiddleNonprofit, ColumnNameTPLastNonprofit, ColumnNameSPFirstNonprofit, ColumnNameSPMiddleNonprofit, ColumnNameSPLastNonprofit)
    iErrors = iErrors + CopyToValidation(SheetNameSole, ColumnNameFedidSole, ColumnNameTPFirstSole, ColumnNameTPMiddleSole, ColumnNameTPLastSole, ColumnNameSPFirstSole, ColumnNameSPMiddleSole, ColumnNameSPLastSole)
    iErrors = iErrors + CopyToValidation(SheetNameOther, ColumnNameFedidOther, ColumnNameTPFirstOther, ColumnNameTPMiddleOther, ColumnNameTPLastOther, ColumnNameSPFirstOther, ColumnNameSPMiddleOther, ColumnNameSPLastOther)
    
    ' check duplicates by client id
    DuplicatesById
    ' check duplicates by name
    DuplicatesByName
    ' check duplicates by federal id
    DuplicatesByFedID
    ' done
    If iErrors = 0 Then
        MsgBox ("Completed")
    Else
        MsgBox ("Completed - field length errors encountered, please check Data Validation Messages column")
    End If
End Sub

' copy 6 columns of comparison data from entity sheet to data validation sheet
'   this is called with the name of the "source" (entity) sheet to copy from
' note that this function will also return the number of field length errors encountered
'   so we can report back to the user at the end of the validation process
Private Function CopyToValidation(sSourceSheetname As String, sFederalId As String, sTPFirst As String, sTPMiddle As String, sTPLast As String, sSPFirst As String, sSPMiddle As String, sSPLast As String) As Integer
    Dim MySourceWorksheet As Worksheet
    Dim MyTargetWorksheet As Worksheet
    Dim iSourceRow As Integer
    Dim sCheckMessage As String
    Dim iTotalErrors As Integer
    
    Set MySourceWorksheet = ThisWorkbook.Worksheets(sSourceSheetname)
    Set MyTargetWorksheet = ThisWorkbook.Worksheets(SheetNameDatavalidation)
    
    ' find the source sheet column indexes for any columns that will be copied or checked
    Dim iColSourceClientId As Integer:          iColSourceClientId = GetColumnByDescription(MySourceWorksheet, "Client ID")
    Dim iColSourceClientSubId As Integer:       iColSourceClientSubId = GetColumnByDescription(MySourceWorksheet, "Client Sub-ID")
    Dim iColSourceClientSortName As Integer:    iColSourceClientSortName = GetColumnByDescription(MySourceWorksheet, "Sort Name")
    Dim iColSourceClientFederalId As Integer:   iColSourceClientFederalId = GetColumnByDescription(MySourceWorksheet, sFederalId)
    Dim iColSourceClientTPFirst As Integer:     iColSourceClientTPFirst = GetColumnByDescription(MySourceWorksheet, sTPFirst)
    Dim iColSourceClientTPMiddle As Integer:    iColSourceClientTPMiddle = GetColumnByDescription(MySourceWorksheet, sTPMiddle)
    Dim iColSourceClientTPLast As Integer:      iColSourceClientTPLast = GetColumnByDescription(MySourceWorksheet, sTPLast)
    Dim iColSourceClientSPFirst As Integer:     iColSourceClientSPFirst = GetColumnByDescription(MySourceWorksheet, sSPFirst)
    Dim iColSourceClientSPMiddle As Integer:    iColSourceClientSPMiddle = GetColumnByDescription(MySourceWorksheet, sSPMiddle)
    Dim iColSourceClientSPLast As Integer:      iColSourceClientSPLast = GetColumnByDescription(MySourceWorksheet, sSPLast)
    
    ' start gathering data at source row 2
    iSourceRow = 2
    Do While MySourceWorksheet.Cells(iSourceRow, 3).Value <> ""
        ' copy to data analysis sheet
        iTargetRow = iTargetRow + 1
        ' client ID
        If iColSourceClientId > 0 Then
            MyTargetWorksheet.Cells(iTargetRow, ColDVClientId) = "'" & MySourceWorksheet.Cells(iSourceRow, iColSourceClientId)
        End If
        ' client sub-ID
        If iColSourceClientSubId > 0 Then
            MyTargetWorksheet.Cells(iTargetRow, ColDVClientSubId) = "'" & MySourceWorksheet.Cells(iSourceRow, iColSourceClientSubId)
        End If
        ' Sort Name
        If iColSourceClientSortName > 0 Then
            MyTargetWorksheet.Cells(iTargetRow, ColDVClientSortName) = MySourceWorksheet.Cells(iSourceRow, iColSourceClientSortName)
        End If
        ' Client Federal ID
        If iColSourceClientFederalId > 0 Then
            MyTargetWorksheet.Cells(iTargetRow, ColDVClientFederalId) = MySourceWorksheet.Cells(iSourceRow, iColSourceClientFederalId)
        End If
        ' Client Type
        MyTargetWorksheet.Cells(iTargetRow, ColDVClientType) = sSourceSheetname
        ' Appended ID
        MyTargetWorksheet.Cells(iTargetRow, ColDVClientAppendedId) = "'" & MyTargetWorksheet.Cells(iTargetRow, ColDVClientId) & IIf(MyTargetWorksheet.Cells(iTargetRow, ColDVClientSubId) <> "", "." & MyTargetWorksheet.Cells(iTargetRow, ColDVClientSubId).Value, "")
        
        ' check input value field lengths for this record
        ' if any exceed the max, we will flag the record on the Data Validation sheet
        sCheckMessage = CheckFieldLength(sSourceSheetname, iSourceRow)
        If sCheckMessage <> "OK" Then
            MyTargetWorksheet.Cells(iTargetRow, ColDVClientMessage) = sCheckMessage
            iTotalErrors = iTotalErrors + 1
        End If
        
        ' move to next input/source row
        iSourceRow = iSourceRow + 1
    Loop
    ' return the total number of field length errors encountered
    CopyToValidation = iTotalErrors
End Function

' get the column number that contains the specified column description
' returns a 0 if no column found
Private Function GetColumnByDescription(w As Worksheet, d As String) As Integer
    Dim iValue As Integer
    Dim c As Range
    iValue = 0
    With w.Range("a1:xfd1")
        Set c = .Find(d, LookIn:=xlValues)
        If Not c Is Nothing Then
            iValue = c.Column
        End If
    End With
    GetColumnByDescription = iValue
End Function

Public Sub DuplicatesById()
    ' in order to get the duplicates, we need to sort the Data validation by ID
    Dim MySourceWorksheet As Worksheet
    Dim MyTargetWorksheet As Worksheet
    Dim iRowCount As Integer
    Dim iColCount As Integer

    Set MySourceWorksheet = ThisWorkbook.Worksheets(SheetNameDatavalidation)
    Set MyTargetWorksheet = ThisWorkbook.Worksheets(SheetNameDuplicatesbyid)

    ' find the first blank row in the Data Validation sheet
    iRowCount = 2
    Do While MySourceWorksheet.Cells(iRowCount, ColDVClientId) <> ""
        iRowCount = iRowCount + 1
    Loop

    'sort the active data range on column A/B (the client ID)
    MySourceWorksheet.Sort.SortFields.Clear
    'add column A as a sort field
    MySourceWorksheet.Sort.SortFields.Add _
        Key:=Range(Cells(1, ColDVClientId), Cells(iRowCount - 1, ColDVClientId)), _
        SortOn:=xlSortOnValues, _
        Order:=xlAscending, _
        DataOption:=xlSortNormal
    'add column B as a sort field
    MySourceWorksheet.Sort.SortFields.Add _
        Key:=Range(Cells(1, ColDVClientSubId), Cells(iRowCount - 1, ColDVClientSubId)), _
        SortOn:=xlSortOnValues, _
        Order:=xlAscending, _
        DataOption:=xlSortNormal
    'sort data in the active range
    With MySourceWorksheet.Sort
        .SetRange Range(Cells(1, ColDVClientId), Cells(iRowCount - 1, ColDVClientMessage))
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
    'clear out the target worksheet
    MyTargetWorksheet.Range(SettingClear1, SettingClear2).Clear

    Dim sClientID1 As String
    sClientID1 = ""
    Dim sClientID2 As String
    sClientID2 = ""
    Dim bOutputFirst As Boolean
    bOutputFirst = True
    
    ' start looking on row 2
    iRowCount = 2
    ' start output on row 2
    iTargetRow = 2
    
    'go down the rows looking for duplicates
    Do While MySourceWorksheet.Cells(iRowCount, ColDVClientId) <> ""
        If MySourceWorksheet.Cells(iRowCount, ColDVClientId) = sClientID1 _
            And MySourceWorksheet.Cells(iRowCount, ColDVClientSubId) = sClientID2 Then
            'MsgBox (sClientID1 & "." & sClientID2 & " is a duplicate")
            
            ' we have a duplicate, copy to output sheet
            If bOutputFirst Then
                For iColCount = ColDVClientId To ColDVClientAppendedId
                    MyTargetWorksheet.Cells(iTargetRow, iColCount) = "'" & MySourceWorksheet.Cells(iRowCount - 1, iColCount)
                Next
                iTargetRow = iTargetRow + 1
                bOutputFirst = False
            End If
            
            For iColCount = ColDVClientId To ColDVClientAppendedId
                MyTargetWorksheet.Cells(iTargetRow, iColCount) = "'" & MySourceWorksheet.Cells(iRowCount, iColCount)
            Next
            iTargetRow = iTargetRow + 1
        
        End If
        
        ' if client id has changed, then we want to re-trigger the output of the first duplicate row
        If MySourceWorksheet.Cells(iRowCount, ColDVClientId) <> sClientID1 _
            Or MySourceWorksheet.Cells(iRowCount, ColDVClientSubId) <> sClientID2 Then
            bOutputFirst = True
        End If
        
        ' retrieve value from next row
        sClientID1 = MySourceWorksheet.Cells(iRowCount, ColDVClientId)
        sClientID2 = MySourceWorksheet.Cells(iRowCount, ColDVClientSubId)
        
        iRowCount = iRowCount + 1
    Loop
    
    'autosize the columns
    MyTargetWorksheet.Columns(SettingAutofit).AutoFit
    
End Sub

Public Sub DuplicatesByName()
    ' in order to get the duplicates, we need to sort the Data validation by Name
    Dim MySourceWorksheet As Worksheet
    Dim MyTargetWorksheet As Worksheet
    Dim iRowCount As Integer
    Dim iColCount As Integer

    Set MySourceWorksheet = ThisWorkbook.Worksheets(SheetNameDatavalidation)

    ' find the first blank row in the Data Validation sheet
    iRowCount = 2
    Do While MySourceWorksheet.Cells(iRowCount, ColDVClientId) <> ""
        iRowCount = iRowCount + 1
    Loop

    'sort the active data range on column C (the client name)
    MySourceWorksheet.Sort.SortFields.Clear
    'add column C as a sort field
    MySourceWorksheet.Sort.SortFields.Add _
        Key:=Range(Cells(1, ColDVClientSortName), Cells(iRowCount - 1, ColDVClientSortName)), _
        SortOn:=xlSortOnValues, _
        Order:=xlAscending, _
        DataOption:=xlSortNormal
    'sort data in the active range
    With MySourceWorksheet.Sort
        .SetRange Range(Cells(1, ColDVClientId), Cells(iRowCount - 1, ColDVClientMessage))
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
    'clear out the target worksheet
    Set MyTargetWorksheet = ThisWorkbook.Worksheets(SheetNameDuplicatesbyname)
    MyTargetWorksheet.Range(SettingClear1, SettingClear2).Clear

    'go down the rows looking for duplicates
    Dim sName1 As String
    sName1 = ""
    Dim bOutputFirst As Boolean
    bOutputFirst = True
    
    iRowCount = 2
    iTargetRow = 2
    
    Do While MySourceWorksheet.Cells(iRowCount, ColDVClientId) <> ""
        If UCase(MySourceWorksheet.Cells(iRowCount, ColDVClientSortName)) = UCase(sName1) Then
            ' we have a duplicate, copy to output sheet
            'MsgBox (sName1 & " is a duplicate")
            If bOutputFirst Then
                For iColCount = ColDVClientId To ColDVClientAppendedId
                    MyTargetWorksheet.Cells(iTargetRow, iColCount) = "'" & MySourceWorksheet.Cells(iRowCount - 1, iColCount)
                Next
                iTargetRow = iTargetRow + 1
                bOutputFirst = False
            End If
            
            For iColCount = ColDVClientId To ColDVClientAppendedId
                MyTargetWorksheet.Cells(iTargetRow, iColCount) = "'" & MySourceWorksheet.Cells(iRowCount, iColCount)
            Next
            iTargetRow = iTargetRow + 1
        
        End If
        
        ' if name has changed, then we want to re-trigger the output of the first duplicate row
        If sName1 <> MySourceWorksheet.Cells(iRowCount, ColDVClientSortName) Then
            bOutputFirst = True
        End If
        
        sName1 = MySourceWorksheet.Cells(iRowCount, ColDVClientSortName)
        iRowCount = iRowCount + 1
    
    Loop

    'autosize the columns
    MyTargetWorksheet.Columns(SettingAutofit).AutoFit

End Sub


Public Sub DuplicatesByFedID()
    ' in order to get the duplicates, we need to sort the Data validation by Name
    Dim MySourceWorksheet As Worksheet
    Dim MyTargetWorksheet As Worksheet
    Dim iRowCount As Integer
    Dim iColCount As Integer

    Set MySourceWorksheet = ThisWorkbook.Worksheets(SheetNameDatavalidation)
    Set MyTargetWorksheet = ThisWorkbook.Worksheets(SheetNameDuplicatesbyfedid)

    ' find the first blank row in the Data Validation sheet
    iRowCount = 2
    Do While MySourceWorksheet.Cells(iRowCount, ColDVClientId) <> ""
        iRowCount = iRowCount + 1
    Loop

    'sort the active data range on column D (the fed id)
    MySourceWorksheet.Sort.SortFields.Clear
    'add column D as a sort field
    MySourceWorksheet.Sort.SortFields.Add _
        Key:=Range(Cells(1, ColDVClientFederalId), Cells(iRowCount - 1, ColDVClientFederalId)), _
        SortOn:=xlSortOnValues, _
        Order:=xlAscending, _
        DataOption:=xlSortNormal
    'sort data in the active range
    With MySourceWorksheet.Sort
        .SetRange Range(Cells(1, ColDVClientId), Cells(iRowCount - 1, ColDVClientMessage))
        .Header = xlYes
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With
    
    'clear out the target worksheet
    MyTargetWorksheet.Range(SettingClear1, SettingClear2).Clear

    'go down the rows looking for duplicates
    Dim sFedId1 As String
    sFedId1 = ""
    Dim bOutputFirst As Boolean
    bOutputFirst = True
    
    iRowCount = 2
    iTargetRow = 2
    
    Do While MySourceWorksheet.Cells(iRowCount, ColDVClientId) <> ""
        If MySourceWorksheet.Cells(iRowCount, ColDVClientFederalId) <> "" _
            And MySourceWorksheet.Cells(iRowCount, ColDVClientFederalId) = sFedId1 Then
            ' we have a duplicate, copy to output sheet
            'MsgBox (sFedId1 & " is a duplicate")
            
            If bOutputFirst Then
                For iColCount = ColDVClientId To ColDVClientAppendedId
                    MyTargetWorksheet.Cells(iTargetRow, iColCount) = "'" & MySourceWorksheet.Cells(iRowCount - 1, iColCount)
                Next
                iTargetRow = iTargetRow + 1
                bOutputFirst = False
            End If
            
            For iColCount = ColDVClientId To ColDVClientAppendedId
                MyTargetWorksheet.Cells(iTargetRow, iColCount) = "'" & MySourceWorksheet.Cells(iRowCount, iColCount)
            Next
            iTargetRow = iTargetRow + 1
        
        End If
        
        ' if Fed Id has changed, then we want to re-trigger the output of the first duplicate row
        If sFedId1 <> MySourceWorksheet.Cells(iRowCount, ColDVClientFederalId) Then
            bOutputFirst = True
        End If
        
        sFedId1 = MySourceWorksheet.Cells(iRowCount, ColDVClientFederalId)
        
        iRowCount = iRowCount + 1
    Loop

    'autosize the columns
    MyTargetWorksheet.Columns(SettingAutofit).AutoFit

End Sub

' delete empty columns on the Individual Data input sheet
Sub DeleteColumnsIndiv()
    DeleteEmptyColumns SheetNameIndiv, "BEGIN_INDIV"
End Sub
Sub ResetColumnsIndiv()
    ResetColumns SheetNameIndiv, "BEGIN_INDIV"
End Sub

Sub DeleteColumnsCorp()
    DeleteEmptyColumns SheetNameCorp, "BEGIN_CORP"
End Sub
Sub ResetColumnsCorp()
    ResetColumns SheetNameCorp, "BEGIN_CORP"
End Sub

Sub DeleteColumnsPart()
    DeleteEmptyColumns SheetNamePart, "BEGIN_PART"
End Sub
Sub ResetColumnsPart()
    ResetColumns SheetNamePart, "BEGIN_PART"
End Sub

Sub DeleteColumnsFid()
    DeleteEmptyColumns SheetNameFid, "BEGIN_FID"
End Sub
Sub ResetColumnsFid()
    ResetColumns SheetNameFid, "BEGIN_FID"
End Sub

Sub DeleteColumnsEmpplan()
    DeleteEmptyColumns SheetNameEmpplan, "BEGIN_EMP"
End Sub
Sub ResetColumnsEmpplan()
    ResetColumns SheetNameEmpplan, "BEGIN_EMP"
End Sub

Sub DeleteColumnsNonprofit()
    DeleteEmptyColumns SheetNameNonprofit, "BEGIN_NONPROFIT"
End Sub
Sub ResetColumnsNonprofit()
    ResetColumns SheetNameNonprofit, "BEGIN_NONPROFIT"
End Sub

Sub DeleteColumnsSole()
    DeleteEmptyColumns SheetNameSole, "BEGIN_SOLE"
End Sub
Sub ResetColumnsSole()
    ResetColumns SheetNameSole, "BEGIN_SOLE"
End Sub

Sub DeleteColumnsOther()
    DeleteEmptyColumns SheetNameOther, "BEGIN_OTHER"
End Sub
Sub ResetColumnsOther()
    ResetColumns SheetNameOther, "BEGIN_OTHER"
End Sub

' delete all empty columns on a sheet
Private Sub DeleteEmptyColumns(sSheetname As String, sBeginrange As String)
    Dim okans As VbMsgBoxResult
    okans = MsgBox("Remove empty columns for '" & sSheetname & "'?", vbYesNo + vbDefaultButton2, "Confirm")
    If okans = vbYes Then
        Dim wrk As Worksheet
        Set wrk = ThisWorkbook.Worksheets(sSheetname)
        Dim iColumn As Integer
        For iColumn = 64 To 1 Step -1
            If Application.WorksheetFunction.CountA(Range(wrk.Cells(2, iColumn), wrk.Cells(1048576, iColumn))) < 1 Then
                wrk.Columns(iColumn).EntireColumn.Delete
            End If
        Next iColumn
    End If
End Sub

' reset all columns on a sheet
Private Sub ResetColumns(sSheetname As String, sBeginrange As String)
    Dim okans As VbMsgBoxResult
    okans = MsgBox("Reset columns for '" & sSheetname & "'?", vbYesNo + vbDefaultButton2, "Confirm")
    If okans <> vbYes Then
        Exit Sub
    End If
    
    Dim sColname As String
    
    ' the "target" worksheet that we will be resetting
    Dim w As Worksheet
    Set w = Worksheets(sSheetname)
    
    ' the sBeginrange contains a list of column reset info for this entity type
    Dim MyCell As Range
    Set MyCell = Range(sBeginrange)
    If MyCell Is Nothing Then
        MsgBox ("Error - range '" & sBeginrange & "' not found")
        Exit Sub
    End If
    ' start at the first row after the range name
    Set MyCell = MyCell.Offset(1, 0)
    ' loop through rows until we hit an empty row
    Do While MyCell.Value <> ""
        sColname = MyCell.Offset(0, -4)
        If w.Cells(1, MyCell.Value) <> sColname Then
            ' insert column at specified column
            Range(w.Cells(1, MyCell.Value), w.Cells(1, MyCell.Value)).EntireColumn.Insert
            ' set the label in first row
            Range(w.Cells(1, MyCell.Value), w.Cells(1, MyCell.Value)).Value = sColname
            ' set background color based on if it is required or not
            With Range(w.Cells(1, MyCell.Value), w.Cells(1, MyCell.Value)).Interior
                .Pattern = xlSolid
                .PatternColorIndex = xlAutomatic
                ' required cell color = 9737946
                ' optional cell color = 15849925
                .Color = IIf(MyCell.Offset(0, 1).Value = "Required", 9737946, 15849925)
                .TintAndShade = 0
                .PatternTintAndShade = 0
            End With
            Range(w.Cells(1, MyCell.Value), w.Cells(1, MyCell.Value)).ColumnWidth = MyCell.Offset(0, 2).Value
        End If
        Set MyCell = MyCell.Offset(1, 0)
    Loop
End Sub

' check input field lengths for one row of data
Private Function CheckFieldLength(sSheetname As String, iRowNumber As Integer) As String
    Dim sColname As String
    Dim iMaxwidth As Integer
    Dim iColindex As Integer
    
    ' default return message
    CheckFieldLength = "OK"
    
    ' the "target" worksheet that we will be resetting
    Dim w As Worksheet
    Set w = Worksheets(sSheetname)
    
    ' based on the sheet name (entity type) provided, we'll get a list of columns to be checked for length
    Dim sBeginrange As String
    Select Case sSheetname
    Case SheetNameIndiv:        sBeginrange = "BEGIN_INDIV"
    Case SheetNameCorp:         sBeginrange = "BEGIN_CORP"
    Case SheetNamePart:         sBeginrange = "BEGIN_PART"
    Case SheetNameFid:          sBeginrange = "BEGIN_FID"
    Case SheetNameEmpplan:      sBeginrange = "BEGIN_EMP"
    Case SheetNameNonprofit:    sBeginrange = "BEGIN_NONPROFIT"
    Case SheetNameSole:         sBeginrange = "BEGIN_SOLE"
    Case SheetNameOther:        sBeginrange = "BEGIN_OTHER"
    End Select
    
    ' the sBeginrange contains a list of column width info for this entity type
    ' bail out if we are unable to find it
    Dim MyCell As Range
    Set MyCell = Range(sBeginrange)
    If MyCell Is Nothing Then
        MsgBox ("Error - range '" & sBeginrange & "' not found")
        Exit Function
    End If
    
    ' start at the first row after the range name
    Set MyCell = MyCell.Offset(1, 0)
    ' loop through rows until we hit an empty row
    Do While MyCell.Value <> ""
        ' only check field length if it is specified
        iMaxwidth = MyCell.Offset(0, 3).Value
        If iMaxwidth > 0 Then
            ' field length is specified, get the column name
            sColname = MyCell.Offset(0, -4)
            ' see if this column exists on the source data sheet
            iColindex = GetColumnByDescription(w, sColname)
            If iColindex > 0 Then
                If Len(w.Cells(iRowNumber, iColindex).Value) > iMaxwidth Then
                    CheckFieldLength = "Field length exceeded, [" & sColname & "]"
                End If
            End If
        End If
        ' next row
        Set MyCell = MyCell.Offset(1, 0)
    Loop
End Function

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' ^v'D
' ^v'M

INQUEST-PP=macro
