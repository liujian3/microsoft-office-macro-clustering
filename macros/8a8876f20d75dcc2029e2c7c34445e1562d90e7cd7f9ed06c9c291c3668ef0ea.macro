Attribute VB_Name = "DIAMANT_SYSTEM_GENERATED"
'**************************************************
'   Systemgeneriertes Modul - Bitte nicht |fffd|ndern!
'   System generated Module - Do not change!
'**************************************************
Option Explicit

Private MyUdf As Object
Private DiaReadStoredValue As Boolean
Private DiaValueStorage As Object
Private DiaWorkbook     As Workbook

'Abfrage der Modulversion
Public Function DiaModuleVersion() As String
    DiaModuleVersion = "4.1.0.1"
End Function

'Wird direkt nach dem WorkbookOpen Event aufgerufen
Sub Auto_Open()
    If (Not ActiveWindow Is Nothing) Then
        If (ActiveWindow.Visible) Then
            Set DiaWorkbook = ActiveWorkbook
            ResetDiaStorage
            SetReadStoredValue   'Alle aktuellen Werte lesen und merken
        End If
    End If
End Sub

'Das interne Dictionary komplett zur|fffd|cksetzen
Public Sub ResetDiaStorage()
    Set DiaValueStorage = Nothing
End Sub

'Umschalten auf 'Sofort Aktualisieren'
Public Sub ResetReadStoredValue()
    DiaReadStoredValue = False
End Sub

'Umschalten auf 'Nicht sofort Aktualisieren' (Werte merken ...)
Public Sub SetReadStoredValue()
    'Debug.Print "SetReadStoredValue"
    DiaReadStoredValue = True
    Set DiaValueStorage = Nothing
    MemorizeDiaFormulaWorkbookResults
End Sub

Public Sub SetReadStoredWorksheetValue()
    'Debug.Print "SetReadStoredWorksheetValue"
    DiaReadStoredValue = True
    MemorizeDiaFormulaCurrentWorksheetResults
End Sub

'Abfrage des Status 'sofort Aktualisieren'
Public Function DiaStatusReadStoredValue() As Boolean
    'Debug.Print "DiaStatusReadStoredValue"
    DiaStatusReadStoredValue = DiaReadStoredValue
End Function

'---------------------------
'Diamant-Funktionen  (UDFs)
'---------------------------

Public Sub RegisterCallback(callback As Object)
    'Debug.Print "RegisterCallback"
    Set MyUdf = callback
    DiaReadStoredValue = True
End Sub

Public Function DiamantObjekt(Mandant As String, ObjektID As String, Schl|fffd|ssel As String, Feld As String, Drilldown As Boolean) As String
Attribute DiamantObjekt.VB_Description = "Mit dieser Formel werden Informationen |fffd|ber Objekte aus der Finanzbuchhaltung gelesen."
Attribute DiamantObjekt.VB_ProcData.VB_Invoke_Func = " \n19"
    If (DiaReadStoredValue) Then
        DiamantObjekt = StoredDiaValue(Application.ThisCell.Formula, Application.ThisCell.Worksheet.Name)
    Else
        DiamantObjekt = MyUdf.DiamantObjekt(Mandant, ObjektID, Schl|fffd|ssel, Feld, Drilldown)
    End If
End Function

Public Function DiamantFiWertLesen(Werteart As String, Vorzeichen As String, Mandant As String, GE As String, GE_bis As String, GF As String, GF_bis As String, PA As String, WJ As String, Periode As String, Periode_bis As String, Kontoklasse As String, Konto As String, Konto_bis As String, Rechtskreis As String, W|fffd|hrung As String, UrMandant As String, VerbUnternehmen As String, VerbUnternehmen_bis As String, Bewegungsart As String, Drilldown As Boolean) As Variant
Attribute DiamantFiWertLesen.VB_Description = "Mit dieser Formel werden Werte aus der Finanzbuchhaltung gelesen."
Attribute DiamantFiWertLesen.VB_ProcData.VB_Invoke_Func = " \n19"
    If (DiaReadStoredValue) Then
        DiamantFiWertLesen = StoredDiaValue(Application.ThisCell.Formula, Application.ThisCell.Worksheet.Name)
    Else
        DiamantFiWertLesen = MyUdf.DiamantFiWertLesen(Werteart, Vorzeichen, Mandant, GE, GE_bis, GF, GF_bis, PA, WJ, Periode, Periode_bis, Kontoklasse, Konto, Konto_bis, Rechtskreis, W|fffd|hrung, UrMandant, VerbUnternehmen, VerbUnternehmen_bis, Bewegungsart, Drilldown)
    End If
End Function

Public Function DiamantKoWertLesen(Werteart As String, Vorzeichen As String, Mandant As String, GE As String, GE_bis As String, GF As String, GF_bis As String, PA As String, WJ As String, Periode As String, Periode_bis As String, KSt_Sel As String, KSt As String, KSt_bis As String, KTr_Sel As String, KTr As String, KTr_bis As String, Prj_Sel As String, Prj As String, Prj_bis As String, KA_Sel As String, KA As String, KA_bis As String, KostChar As String, MGr As String, MGr_bis As String, Verrech_Obj_Typ As String, Verrech_Obj_Sel As String, Verrech_Obj As String, Verrech_Obj_bis As String, UrMandant As String, Drilldown As Boolean) As Variant
Attribute DiamantKoWertLesen.VB_Description = "Mit dieser Formel werden Werte und Mengen aus der Kostenrechnung gelesen."
Attribute DiamantKoWertLesen.VB_ProcData.VB_Invoke_Func = " \n19"
    If (DiaReadStoredValue) Then
        DiamantKoWertLesen = StoredDiaValue(Application.ThisCell.Formula, Application.ThisCell.Worksheet.Name)
    Else
        DiamantKoWertLesen = MyUdf.DiamantKoWertLesen(Werteart, Vorzeichen, Mandant, GE, GE_bis, GF, GF_bis, PA, WJ, Periode, Periode_bis, KSt_Sel, KSt, KSt_bis, KTr_Sel, KTr, KTr_bis, Prj_Sel, Prj, Prj_bis, KA_Sel, KA, KA_bis, KostChar, MGr, MGr_bis, Verrech_Obj_Typ, Verrech_Obj_Sel, Verrech_Obj, Verrech_Obj_bis, UrMandant, Drilldown)
    End If
End Function

Public Function DiamantFiWertSchreiben(Werteart As String, Wert As String, Vorzeichen As String, Mandant As String, Gesch|fffd|ftseinheit As String, Gesch|fffd|ftsfeld As String, Planalternative As String, WJ As String, Periode As String, Konto As String, Drilldown As Boolean) As Variant
Attribute DiamantFiWertSchreiben.VB_Description = "Mit dieser Formel werden Werte in die Finanzbuchhaltung geschrieben."
Attribute DiamantFiWertSchreiben.VB_ProcData.VB_Invoke_Func = " \n19"
    If (DiaReadStoredValue) Then
        DiamantFiWertSchreiben = ValueForWriting(Wert, Vorzeichen)
    Else
        DiamantFiWertSchreiben = MyUdf.DiamantFiWertSchreiben(Werteart, Wert, Vorzeichen, Mandant, Gesch|fffd|ftseinheit, Gesch|fffd|ftsfeld, Planalternative, WJ, Periode, Konto, Drilldown)
    End If
End Function

Public Function DiamantKoWertSchreiben(Werteart As String, Wert As String, Vorzeichen As String, Mandant As String, Gesch|fffd|ftseinheit As String, Gesch|fffd|ftsfeld As String, Planalternative As String, WJ As String, Periode As String, Kostenstelle As String, Kostentr|fffd|ger As String, Projekt As String, Kostenart As String, Kostencharakter As String, Ma|fffd|gr|fffd||fffd|e As String, Verrechnungsobjekt_Typ As String, Verrechnungsobjekt As String, Drilldown As Boolean) As Variant
Attribute DiamantKoWertSchreiben.VB_Description = "Mit dieser Formel werden Werte und Mengen in die Kostenrechnung geschrieben."
Attribute DiamantKoWertSchreiben.VB_ProcData.VB_Invoke_Func = " \n19"
    If (DiaReadStoredValue) Then
        DiamantKoWertSchreiben = ValueForWriting(Wert, Vorzeichen)
    Else
        DiamantKoWertSchreiben = MyUdf.DiamantKoWertSchreiben(Werteart, Wert, Vorzeichen, Mandant, Gesch|fffd|ftseinheit, Gesch|fffd|ftsfeld, Planalternative, WJ, Periode, Kostenstelle, Kostentr|fffd|ger, Projekt, Kostenart, Kostencharakter, Ma|fffd|gr|fffd||fffd|e, Verrechnungsobjekt_Typ, Verrechnungsobjekt, Drilldown)
    End If
End Function


'-------------------------------------------------------------
' F|fffd|r jede lesende Diamant-Funktion ein 'Dictionary' anlegen:
'-------------------------------------------------------------
Private Sub InitDiaValueStorageForSheet(ByVal SheetName As String)

    Dim NewDic As Object
    Dim DicKey As String

    ' wenn nicht |fffd|ber Auto_Open angelegt wurde -> nachholen
    If (DiaWorkbook Is Nothing) Then
        Set DiaWorkbook = ActiveWorkbook
    End If

    If (Not DiaValueStorage Is Nothing) Then

        'F|fffd|r jede DiamantFunktion ein Dictionary anlegen und als Element in das Haupt-Dictionary einf|fffd|gen

        'DiamantObjekt
        Set NewDic = CreateObject("Scripting.Dictionary")
        DicKey = SheetName & "DiamantObjekt"
        If (DiaValueStorage.Exists(DicKey)) Then
            DiaValueStorage.Remove (DicKey)
        End If
        DiaValueStorage.Add DicKey, NewDic

        'DiamantKoWertLesen
        Set NewDic = CreateObject("Scripting.Dictionary")
        DicKey = SheetName & "DiamantKoWertLesen"
        If (DiaValueStorage.Exists(DicKey)) Then
            DiaValueStorage.Remove (DicKey)
        End If
        DiaValueStorage.Add DicKey, NewDic

        'DiamantFiWertLesen
        Set NewDic = CreateObject("Scripting.Dictionary")
        DicKey = SheetName & "DiamantFiWertLesen"
        If (DiaValueStorage.Exists(DicKey)) Then
            DiaValueStorage.Remove (DicKey)
        End If
        DiaValueStorage.Add DicKey, NewDic

    End If

End Sub

'-----------------------------------------------------------------------
' Interne Funktionen/Prozeduren zum Merken und wieder Abrufen der Werte
'-----------------------------------------------------------------------

'Wert zu dieser Formel in den gemerkten Werten suchen und bei Erfolg zur|fffd|ckgeben
Private Function StoredDiaValue(ByVal DiaFormula As String, ByVal SheetName As String) As Variant

    Dim DiaFuncName As String
    Dim MajorKey    As String
    Dim MinorKey    As String
    Dim CurrentDic  As Object
    Dim ValueFound  As Boolean

    ValueFound = False

    If (Not DiaValueStorage Is Nothing) Then
        GetDiaFormulaNameKey DiaFormula, SheetName, DiaFuncName, MinorKey
        If (Len(DiaFuncName) > 0 And Len(MinorKey) > 0) Then
            'passendes 'Dictionary' suchen
            MajorKey = SheetName & DiaFuncName
            If (DiaValueStorage.Exists(MajorKey)) Then
                Set CurrentDic = DiaValueStorage.Item(MajorKey)
                'und darin nach dem passenden Schl|fffd|ssel
                If ((Not CurrentDic Is Nothing) And (CurrentDic.Count > 0)) Then
                    If CurrentDic.Exists(MinorKey) Then
                        ValueFound = True
                        StoredDiaValue = CurrentDic.Item(MinorKey)
                        'Debug.Print MinorKey & " -> " & StoredDiaValue
                    End If
                End If
            End If
        End If
    End If

    'Wenn nichts gefunden wurde, 3 Punkte anzeigen
    If ValueFound = False Then
        StoredDiaValue = "..."
    End If

End Function

'Werte aller Diamantfunktionen sammeln und merken
Private Sub MemorizeDiaFormulaWorkbookResults()
    'Calc-Status merken und Berechnung tempor|fffd|r abschalten
    Dim OrigCalcultionStatus As XlCalculation
    OrigCalcultionStatus = Application.Calculation
    Application.Calculation = xlCalculationManual

    'Haupt-Wertcontainer initialisieren
    Set DiaValueStorage = CreateObject("Scripting.Dictionary")

    Dim WSheet As Worksheet
    For Each WSheet In Worksheets
        'Debug.Assert WSheet.Name
        MemorizeDiaFormulaWorksheetResults WSheet
    Next

    'Calc-Status zur|fffd|cksetzen
    Application.Calculation = OrigCalcultionStatus
End Sub

'Werte aller Diamantfunktionen sammeln und merken
Private Sub MemorizeDiaFormulaCurrentWorksheetResults()
    'Calc-Status merken und Berechnung tempor|fffd|r abschalten
    Dim OrigCalcultionStatus As XlCalculation
    OrigCalcultionStatus = Application.Calculation
    Application.Calculation = xlCalculationManual

    MemorizeDiaFormulaWorksheetResults ActiveSheet

    'Calc-Status zur|fffd|cksetzen
    Application.Calculation = OrigCalcultionStatus
End Sub

'Werte aller Diamantfunktionen sammeln und merken
Private Sub MemorizeDiaFormulaWorksheetResults(WSheet As Worksheet)

    'die Wertcontainer f|fffd|r dieser Arbeitsblatt initialisieren
    Dim SheetName As String
    SheetName = WSheet.Name
    InitDiaValueStorageForSheet (SheetName)

    'Formelzellen dieses Arbeitsblattes |fffd|ber die Methode SpecialCells ermitteln
    Dim FormulaCells As Range
    Dim FormulaCell  As Range
    On Error Resume Next
    Err.Number = 0
    Set FormulaCells = WSheet.Cells.SpecialCells(xlCellTypeFormulas)

    'wenn die Methode SpecialCells fehlschl|fffd|gt (z.B. bei gesch|fffd|tztem Arbeitsblatt),
    'm|fffd|ssen die Formelzellen anders ermittelt werden - Achtung ist langsamer
    If Err.Number <> 0 Then
        For Each FormulaCell In WSheet.UsedRange.Cells
            If FormulaCell.HasFormula Then
                AddFormulaValue FormulaCell, SheetName
            End If
        Next FormulaCell

    'wenn Formelzellen gefunden wurden, dann einzeln durchgehen
    ElseIf (Not FormulaCells Is Nothing) Then
        Dim Count As Long
        Count = FormulaCells.Count
        If (Count > 0) Then
            For Each FormulaCell In FormulaCells
                AddFormulaValue FormulaCell, SheetName
            Next
         End If
    End If

End Sub


'Pr|fffd|ft ob die gegebene Zelle eine lesende Diamantformel enth|fffd|lt und speichert das Ergebnis
Private Sub AddFormulaValue(FormulaCell As Range, SheetName As String)
    Dim Formula     As String
    Dim DiaFuncName As String
    Dim MinorKey    As String

    'falls es sich um eine Diamantformel handelt, Funktionsname und Argumente (->MinorKey) ermitteln
    Formula = FormulaCell.Formula
    GetDiaFormulaNameKey Formula, SheetName, DiaFuncName, MinorKey
    If (Len(DiaFuncName) > 0 And Len(MinorKey) > 0) Then
        'und Wert der Zelle merken
        Dim MajorKey   As String
        Dim CurrentDic As Object
        MajorKey = SheetName & DiaFuncName
        Set CurrentDic = DiaValueStorage.Item(MajorKey)
        CurrentDic.Item(MinorKey) = FormulaCell.Value
    End If
End Sub

'Sucht in der |fffd|bergebenen Formel nach Namen und Parametern einer lesenden Diamant-Funktion
Private Sub GetDiaFormulaNameKey(ByVal FormulaStr As String, ByVal SheetName As String, ByRef DiaFName As String, ByRef DiaFKey As String)

    'Ausgabewerte zur|fffd|cksetzen
    DiaFName = ""
    DiaFKey = ""

    If Len(FormulaStr) > 0 Then
    'Nach Namen und Parametern einer lesenden Diamant-Funktion suchen
        Dim FirstPossibleStartPositionDiaFKey As Integer
        Dim FirstPossibleStartPositionDiaArgs As Integer

        FirstPossibleStartPositionDiaFKey = 2
        FirstPossibleStartPositionDiaArgs = 8

        FormulaStr = LTrim(Mid(FormulaStr, FirstPossibleStartPositionDiaFKey, Len(FormulaStr) - 1))

        If (Left(FormulaStr, 7) = "Diamant") Then

            If (InStr(FirstPossibleStartPositionDiaArgs, FormulaStr, "Schreiben") <= 0) Then
                'lesende Diamant-Funktion gefunden
                Dim DiaFArgsStart
                DiaFArgsStart = InStr(FirstPossibleStartPositionDiaArgs, FormulaStr, "(")
                If (DiaFArgsStart > 0) Then
                    DiaFName = Left(FormulaStr, DiaFArgsStart - 1)
                    DiaFKey = Mid(FormulaStr, DiaFArgsStart, Len(FormulaStr) - (DiaFArgsStart - 1))
                    DiaFKey = ResolveArgs(SheetName, DiaFKey)
                End If
            End If
        End If
    End If

End Sub

'F|fffd|r schreibende Funktionen:
'Gibt den in Param1 |fffd|bergebenen Wert abh|fffd|ngig von Param2 mit oder ohne Vorzeichenwechsel zur|fffd|ck
Private Function ValueForWriting(ValueParam As String, SignParam As String) As Variant

    SignParam = LTrim(SignParam)

    'Wert in Zahl umwandeln, damit sie korrekt dargestellt wird
    'und damit mit ihr gerechnet werden kann
    SignParam = LTrim(SignParam)
    Dim ValueParamDouble As Double
    On Error Resume Next
    ValueParamDouble = CDbl(ValueParam)
    If Err.Number <> 0 Then
        If (Len(ValueParam) > 0 And Len(SignParam) > 0 And Left(SignParam, 1) = "-") Then
            ValueForWriting = ValueParam * (-1)
        Else
            ValueForWriting = ValueParam
        End If
    Else
        If (Len(ValueParam) > 0 And Len(SignParam) > 0 And Left(SignParam, 1) = "-") Then
            ValueForWriting = ValueParamDouble * (-1)
        Else
            ValueForWriting = ValueParamDouble
        End If
    End If
    On Error GoTo 0
End Function

'l|fffd|st die Zellreferenzen innerhalb der Parameterliste auf
Private Function ResolveArgs(ByVal SheetName As String, Formula As String) As String

    Dim ArgList As Variant
    Dim Arg     As Variant
    Dim Counter As Long

    Dim FoundBraces As Boolean
    FoundBraces = False

    If (Left(Formula, 1) = "(") Then
        FoundBraces = True
        Formula = Mid(Formula, 2, Len(Formula) - 2)
    End If

    ArgList = Split(Formula, ",")

    Dim Item  As Integer
    Item = 0

    For Each Arg In ArgList
        If (Len(Arg) > 0) Then
            ArgList(Item) = GetCellValue(SheetName, Arg)
        End If
        Item = Item + 1
    Next Arg

    Formula = Join(ArgList, ",")

    If (FoundBraces) Then
        Formula = "(" & Formula & ")"
    End If

    ResolveArgs = Formula

End Function

'ersetzt eine Zellreferenz gegen den absoluten Wert
Private Function GetCellValue(ByVal SheetName As String, Arg As Variant) As Variant

    GetCellValue = Arg

    Dim CurrentWorksheetName As String
    CurrentWorksheetName = SheetName

    If Not (InStr(1, Arg, Chr(34)) > 0) Then
        If Not IsNumeric(Arg) Then
            On Error Resume Next

            If (InStr(1, Arg, "!") > 0) Then
                CurrentWorksheetName = Left(Arg, InStr(1, Arg, "!") - 1)
            End If

            On Error GoTo fehlerAusgabe
            GetCellValue = DiaWorkbook.Worksheets(CurrentWorksheetName).Range(Arg).Value2

            If Err.Number = 0 Then
                GetCellValue = Chr(34) & GetCellValue & Chr(34)
            End If
        End If
    End If

Exit Function

fehlerAusgabe:
'Debug.Print "Arg: " & Arg
End Function

Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Tabelle5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
