Attribute VB_Name = "Module1"
Sub Reset_All()

' Call top level reset sub routine

Reset_Top

' Reset TRL ranges

For j = 1 To 9

' Assign row numbers to be reset

Cells(8, 27).Value = j

Call ResetLevels

Next j

' Clear comments field
Cells(56, 3).Value = ""
Cells(99, 3).Value = ""
Cells(147, 3).Value = ""
Cells(208, 3).Value = ""
Cells(274, 3).Value = ""
Cells(339, 3).Value = ""
Cells(384, 3).Value = ""
Cells(421, 3).Value = ""
Cells(449, 3).Value = ""

' Reset default % Complete value by setting spinner to 0

Cells(7, 22).Value = 0

End Sub
Sub Reset_Top()

' Clear radio buttons by not selecting any of them
Cells(16, 21).Value = 0
' Clear Top Level comments field
Cells(29, 3).Value = ""

End Sub

' Each of the following reset subroutines works in the same way.
' First, the applicable range of rows is defined.
' Next, the following actions occur in a called subroutine:
'    The slider is reset by assigning its linked cell the value 0
'    The check box is turned off
'    The cells tracking the last value for slider and check box are reset
' Then we go to the next row
' When all rows in the level are done, the "Comments" field is cleared

Sub Reset_Level1()

Cells(8, 27).Value = 1

Call ResetLevels

' Clear comments field
Cells(56, 3).Value = ""

End Sub
Sub Reset_Level2()

Cells(8, 27).Value = 2

Call ResetLevels

' Clear comments field
Cells(99, 3).Value = ""

End Sub
Sub Reset_Level3()

Cells(8, 27).Value = 3

Call ResetLevels

' Clear comments field
Cells(147, 3).Value = ""

End Sub
Sub Reset_Level4()

Cells(8, 27).Value = 4

Call ResetLevels

' Clear comments field
Cells(208, 3).Value = ""

End Sub
Sub Reset_Level5()

Cells(8, 27).Value = 5

Call ResetLevels

' Clear comments field
Cells(274, 3).Value = ""

End Sub
Sub Reset_Level6()

Cells(8, 27).Value = 6

Call ResetLevels

' Clear comments field
Cells(339, 3).Value = ""

End Sub
Sub Reset_Level7()

Cells(8, 27).Value = 7

Call ResetLevels

' Clear comments field
Cells(384, 3).Value = ""

End Sub
Sub Reset_Level8()

Cells(8, 27).Value = 8

Call ResetLevels

' Clear comments field
Cells(421, 3).Value = ""

End Sub
Sub Reset_Level9()

Cells(8, 27).Value = 9

Call ResetLevels

' Clear comments field
Cells(449, 3).Value = ""

End Sub
Sub ResetLevels()

For Each i In Range(Cells(9, 26).Value)

' Reset sliders to 0 and turn off check boxes
Cells(i, 6).Value = 0
Cells(i, 21).Value = False
' Reset cells that track last values
Cells(i, 29).Value = 0
Cells(i, 30).Value = False

Next i

End Sub
Sub Set_All()

' This routine turns on all check boxes and sliders
' to aid in testing and troubleshooting the worksheet

' Set top level view
Cells(16, 21).Value = 1

For j = 1 To 9

' Assign row numbers to be set

Cells(8, 27).Value = j

For Each i In Range(Cells(9, 26).Value)

' Set sliders to 100 and turn on check boxes
Cells(i, 6).Value = 100
Cells(i, 21).Value = True
' Reset cells that track last values
Cells(i, 29).Value = 100
Cells(i, 30).Value = True

Next i
Next j

End Sub
Attribute VB_Name = "Module2"
Sub ChgD1()

' This subroutine is activated by clicking on any slider
' in the TRL 1 section to change the % Complete value.

' All other TRL ranges call the same subroutine.

' Initialize the flag value

FoundFlag = False

For Each i In Range("RowNum1")

' Call the subroutine that finds the cell that corresponds
' to a changing slider.

Call SliderMove(i, FoundFlag)

If FoundFlag = True Then

'Since we found the changed cell, we exit the loop.

Exit For
End If

' Otherwise, we continue to look for a changed value.

Next i

End Sub
Sub ChgD2()

FoundFlag = False

For Each i In Range("RowNum2")
Call SliderMove(i, FoundFlag)
If FoundFlag = True Then
Exit For
End If
Next i

End Sub
Sub ChgD3()

FoundFlag = False

For Each i In Range("RowNum3")
Call SliderMove(i, FoundFlag)
If FoundFlag = True Then
Exit For
End If
Next i

End Sub
Sub ChgD4()

FoundFlag = False

For Each i In Range("RowNum4")
Call SliderMove(i, FoundFlag)
If FoundFlag = True Then
Exit For
End If
Next i

End Sub
Sub ChgD5()

FoundFlag = False

For Each i In Range("RowNum5")
Call SliderMove(i, FoundFlag)
If FoundFlag = True Then
Exit For
End If
Next i

End Sub
Sub ChgD6()

FoundFlag = False

For Each i In Range("RowNum6")
Call SliderMove(i, FoundFlag)
If FoundFlag = True Then
Exit For
End If
Next i

End Sub
Sub ChgD7()

FoundFlag = False

For Each i In Range("RowNum7")
Call SliderMove(i, FoundFlag)
If FoundFlag = True Then
Exit For
End If
Next i

End Sub
Sub ChgD8()

FoundFlag = False

For Each i In Range("RowNum8")
Call SliderMove(i, FoundFlag)
If FoundFlag = True Then
Exit For
End If
Next i

End Sub
Sub ChgD9()

FoundFlag = False

For Each i In Range("RowNum9")
Call SliderMove(i, FoundFlag)
If FoundFlag = True Then
Exit For
End If
Next i

End Sub
Sub SliderMove(i, FoundFlag)

If Cells(i, 6).Value <> Cells(i, 29).Value Then

' It then checks to see whether the new
' value is less than the default % Complete value.
' If it is, the check box in the same row is turned off.

If Cells(i, 6).Value < Cells(8, 22).Value Then
Cells(i, 21).Value = False
Else:

' If the slider value is not less than the default,
' the check box is turned on.

Cells(i, 21).Value = True
End If

' The cells tracking the last value of slider and check box
' are then reset to their current values.

Cells(i, 29).Value = Cells(i, 6).Value
Cells(i, 30).Value = Cells(i, 21).Value

'Since we found the changed cell, we set the flag to exit the loop.

FoundFlag = True

End If

End Sub
Sub SetD1()

' This subroutine is activated by clicking on any check box to turn it on or off.

FoundFlag = False

For Each i In Range("RowNum1")

' This subroutine looks for a changed check box.

Call Box_Chk(i, FoundFlag)

If FoundFlag = True Then

'Since we found the changed cell, we exit the loop.

Exit For
End If

' Otherwise, we continue to look for a changed value.

Next i

' All of the other TRL ranges work the same.

End Sub
Sub SetD2()

FoundFlag = False

For Each i In Range("RowNum2")
Call Box_Chk(i, FoundFlag)
If FoundFlag = True Then
Exit For
End If

Next i

End Sub
Sub SetD3()
FoundFlag = False

For Each i In Range("RowNum3")
Call Box_Chk(i, FoundFlag)
If FoundFlag = True Then
Exit For
End If

Next i

End Sub
Sub SetD4()

FoundFlag = False

For Each i In Range("RowNum4")
Call Box_Chk(i, FoundFlag)
If FoundFlag = True Then
Exit For
End If

Next i

End Sub
Sub SetD5()

FoundFlag = False

For Each i In Range("RowNum5")
Call Box_Chk(i, FoundFlag)
If FoundFlag = True Then
Exit For
End If

Next i

End Sub
Sub SetD6()

FoundFlag = False

For Each i In Range("RowNum6")
Call Box_Chk(i, FoundFlag)
If FoundFlag = True Then
Exit For
End If

Next i

End Sub
Sub SetD7()

FoundFlag = False

For Each i In Range("RowNum7")
Call Box_Chk(i, FoundFlag)
If FoundFlag = True Then
Exit For
End If

Next i

End Sub
Sub SetD8()

FoundFlag = False

For Each i In Range("RowNum8")
Call Box_Chk(i, FoundFlag)
If FoundFlag = True Then
Exit For
End If

Next i

End Sub
Sub SetD9()

FoundFlag = False

For Each i In Range("RowNum9")
Call Box_Chk(i, FoundFlag)
If FoundFlag = True Then
Exit For
End If

Next i

End Sub
Sub Box_Chk(i, FoundFlag)

If Cells(i, 21).Value <> Cells(i, 30).Value Then

' If the box was previously checked and is now no longer
' checked (current value in linked cell is "FALSE"), the
' slider in the same row is set to 0.

If Cells(i, 21).Value = False Then
Cells(i, 6).Value = 0

Else:

' If the box was previously unchecked and is now
' checked (current value in linked cell is "TRUE"), the
' slider in the same row is set to 100.

Cells(i, 6).Value = 100
End If

' The cells tracking the last value of slider and check box
' are then reset to their current values

Cells(i, 29).Value = Cells(i, 6).Value
Cells(i, 30).Value = Cells(i, 21).Value

'Since we found the changed cell, we set the flag to exit the loop.

FoundFlag = True

End If

End Sub
Sub TRLChgDefault()

' This subroutine is activated by clicking on the spinner that changes the % Complete default value.

For Each j In Range("RowNum1")

' Pass the j parameter (Row number) to the subroutine that does the work

Chg_Def (j)

' Go to next row in TRL 1

Next j

'Each of the other TRL ranges works the same way

For Each j In Range("RowNum2")
Chg_Def (j)
Next j

For Each j In Range("RowNum3")
Chg_Def (j)
Next j

For Each j In Range("RowNum4")
Chg_Def (j)
Next j

For Each j In Range("RowNum5")
Chg_Def (j)
Next j

For Each j In Range("RowNum6")
Chg_Def (j)
Next j

For Each j In Range("RowNum7")
Chg_Def (j)
Next j

For Each j In Range("RowNum8")
Chg_Def (j)
Next j

For Each j In Range("RowNum9")
Chg_Def (j)
Next j


End Sub
Sub Chg_Def(j)
' Having changed the default % Complete value, we need to make
' sure that each check box checked to show that the question is
' finished enough to count in the TRL calculation is still valid.

If Cells(j, 6).Value > 0 Then

' Don't do anything if the slider value is 0.

If Cells(j, 6).Value < Cells(8, 22).Value Then

' If the slider value is less than the new default value
' Set the corresponding check box to "Off" by assigning
' the value "FALSE" to its corresponding cell.

Cells(j, 21).Value = False

' The cell tracking the last value of the check box
' is then reset to the current value

Cells(j, 30).Value = Cells(j, 21).Value

Else:

' Otherwise we set the corresponding value to "TRUE,"
' turning on the check box

Cells(j, 21).Value = True

' The cell tracking the last value of the check box
' is then reset to the current value

Cells(j, 30).Value = Cells(j, 21).Value

End If

End If

End Sub
Attribute VB_Name = "Module3"
Sub Hide_MFG()
' This macro hides all the rows that are marked with an M, showing
' that they are part of the MRL computation.

' Hiding these rows also removes them from the TRL calculation

' First, the sliders and check boxes are moved out of the way.
' This keeps them from piling up on top of one another in the
' active portion of the worksheet.

For k = 1 To 9
' First we check to see whether the rows for TRL 1 - 3
' were already hidden by assuming completion of these TRLs.
' If so, we skip to the next level.

    If k = 1 And Cells(34, 20).Value = True Then
    ElseIf k = 2 And Cells(61, 20).Value = True Then
    ElseIf k = 3 And Cells(104, 20).Value = True Then
    Else
' Setting this value will force the corresponding range
' values into cell(9,26)
      Cells(8, 27).Value = k
    
For Each i In Range(Cells(9, 26).Value)

' If a row has been hidden by the Hide_HW or Hide_SW
' macro, we don't want to move sliders and check boxes again.

If Cells(4, 21).Value = 1 And Cells(i, 3).Value = "S" Then
' Do nothing

ElseIf Cells(4, 21).Value = 2 And Cells(i, 3).Value = "H" Then
' Do nothing

ElseIf Cells(i, 4).Value = "M" Then
    ActiveSheet.Shapes(Cells(i, 32).Value).IncrementLeft 660
    ActiveSheet.Shapes(Cells(i, 33).Value).IncrementLeft 660
End If
Next i

' Then each row labeled with an "M" is hidden.

For Each j In Range(Cells(9, 26).Value)

If Cells(j, 4).Value = "M" Then

' The Hidden flag is set. If it was previously set,
' resetting it to the same value doesn't matter.

Rows(j).EntireRow.Hidden = True
End If
Next j

End If

Next k

Cells(1, 1).Select

End Sub

Sub Hide_Prog()
'
' This macro hides all the rows that are marked with a P, showing
' that they are part of the PRL computation.

' Hiding these rows also removes them from the TRL calculation

' First, the sliders and check boxes are moved out of the way.
' This keeps them from piling up on top of one another in the
' active portion of the worksheet.

For k = 1 To 9
' First we check to see whether the rows for TRL 1 - 3
' were already hidden by assuming completion of these TRLs.
' If so, we skip to the next level.

    If k = 1 And Cells(34, 20).Value = True Then
    ElseIf k = 2 And Cells(61, 20).Value = True Then
    ElseIf k = 3 And Cells(104, 20).Value = True Then
    Else
' Setting this value will force the corresponding range
' values into cell(9,26)
      Cells(8, 27).Value = k
    
For Each i In Range(Cells(9, 26).Value)

' If a row has been hidden by the Hide_HW or Hide_SW
' macro, we don't want to move sliders and check boxes again.

If Cells(4, 21).Value = 1 And Cells(i, 3).Value = "S" Then
' Do nothing

ElseIf Cells(4, 21).Value = 2 And Cells(i, 3).Value = "H" Then
' Do nothing

ElseIf Cells(i, 4).Value = "P" Then
    ActiveSheet.Shapes(Cells(i, 32).Value).IncrementLeft 660
    ActiveSheet.Shapes(Cells(i, 33).Value).IncrementLeft 660
End If
Next i

' Then each row labeled with an "P" is hidden.

For Each j In Range(Cells(9, 26).Value)

If Cells(j, 4).Value = "P" Then

' The Hidden flag is set. If it was previously set,
' resetting it to the same value doesn't matter.

Rows(j).EntireRow.Hidden = True
End If

Next j

End If

Next k

Cells(1, 1).Select

End Sub
Sub UnHide_MFG()

' The Unhide routines work the opposite way.
' First we reveal the appropriate hidden rows
' then we move the sliders and check boxes back into position.

For k = 1 To 9
' First we check to see whether the rows for TRL 1 - 3
' were already hidden by assuming completion of these TRLs.
' If so, we skip to the next level.

    If k = 1 And Cells(34, 20).Value = True Then
    ElseIf k = 2 And Cells(61, 20).Value = True Then
    ElseIf k = 3 And Cells(104, 20).Value = True Then
    Else
' Setting this value will force the corresponding range
' values into cell(9,26)
      Cells(8, 27).Value = k
    
For Each i In Range(Cells(9, 26).Value)
' If a row has been hidden by the Hide_HW or Hide_SW
' macro, we don't want to unhide it here.

If Cells(4, 21).Value = 1 And Cells(i, 3).Value = "S" Then
' Do nothing

ElseIf Cells(4, 21).Value = 2 And Cells(i, 3).Value = "H" Then
' Do nothing

ElseIf Cells(i, 4).Value = "M" Then
Rows(i).EntireRow.Hidden = False
End If
Next i

For Each j In Range(Cells(9, 26).Value)

If Cells(4, 21).Value = 1 And Cells(j, 3).Value = "S" Then
' Do nothing

ElseIf Cells(4, 21).Value = 2 And Cells(j, 3).Value = "H" Then
' Do nothing

ElseIf Cells(j, 4).Value = "M" Then
    ActiveSheet.Shapes(Cells(j, 32).Value).IncrementLeft -660
    ActiveSheet.Shapes(Cells(j, 33).Value).IncrementLeft -660
End If
Next j

End If

Next k

Cells(1, 1).Select

End Sub
Sub UnHide_Prog()

' The Unhide routines work the opposite way.
' First we reveal the appropriate hidden rows
' then we move the sliders and check boxes back into position.

For k = 1 To 9
' First we check to see whether the rows for TRL 1 - 3
' were already hidden by assuming completion of these TRLs.
' If so, we skip to the next level.

    If k = 1 And Cells(34, 20).Value = True Then
    ElseIf k = 2 And Cells(61, 20).Value = True Then
    ElseIf k = 3 And Cells(104, 20).Value = True Then
    Else
' Setting this value will force the corresponding range
' values into cell(9,26)
      Cells(8, 27).Value = k
    
For Each i In Range(Cells(9, 26).Value)
' If a row has been hidden by the Hide_HW or Hide_SW
' macro, we don't want to unhide it here.

If Cells(4, 21).Value = 1 And Cells(i, 3).Value = "S" Then
' Do nothing

ElseIf Cells(4, 21).Value = 2 And Cells(i, 3).Value = "H" Then
' Do nothing

ElseIf Cells(i, 4).Value = "P" Then
Rows(i).EntireRow.Hidden = False
End If
Next i

For Each j In Range(Cells(9, 26).Value)

If Cells(4, 21).Value = 1 And Cells(j, 3).Value = "S" Then
' Do nothing

ElseIf Cells(4, 21).Value = 2 And Cells(j, 3).Value = "H" Then
' Do nothing

ElseIf Cells(j, 4).Value = "P" Then
    ActiveSheet.Shapes(Cells(j, 32).Value).IncrementLeft -660
    ActiveSheet.Shapes(Cells(j, 33).Value).IncrementLeft -660
End If
Next j

End If

Next k

Cells(1, 1).Select

End Sub
Sub Hide_Blank()

' This macro hides all the rows that are not marked
' with an M, P, or T when the hide check box is clicked,
' and reveals them when it is unclicked.
For k = 1 To 9
' First we check to see whether the rows for TRL 1 - 3
' were already hidden by assuming completion of these TRLs.
' If so, we skip to the next level.

    If k = 1 And Cells(34, 20).Value = True Then
    ElseIf k = 2 And Cells(61, 20).Value = True Then
    ElseIf k = 3 And Cells(104, 20).Value = True Then
    Else
' Setting this value will force the corresponding range
' values into cell(9,26)
      Cells(8, 27).Value = k
    
If Cells(6, 23).Value = True Then
For Each i In Range(Cells(9, 26).Value)

' If a row has been hidden by the Hide_HW or Hide_SW
' macro, we don't want to move sliders and check boxes again.

If Cells(4, 21).Value = 1 And Cells(i, 3).Value = "S" Then
' Do nothing
ElseIf Cells(4, 21).Value = 2 And Cells(i, 3).Value = "H" Then
' Do nothing
ElseIf Cells(i, 4).Value = "" Then
' If it's a blank line, we move the sliders and check boxes
    ActiveSheet.Shapes(Cells(i, 32).Value).IncrementLeft 660
    ActiveSheet.Shapes(Cells(i, 33).Value).IncrementLeft 660
' End of if statement that checks for HW and SW hidden rows
End If
Next i

For Each j In Range(Cells(9, 26).Value)
' We set the hide row flag for all blank lines
If Cells(j, 4).Value = "" Then
Rows(j).EntireRow.Hidden = True
End If
Next j

Else
' This statement goes with the if statement that checks whether to
' hide or unhide the blank rows. Else means unhide.
For Each i In Range(Cells(9, 26).Value)

' If a row has been hidden by the Hide_HW or Hide_SW
' macro, we don't want to unhide it here.

If Cells(4, 21).Value = 1 And Cells(i, 3).Value = "S" Then
' Do nothing
ElseIf Cells(4, 21).Value = 2 And Cells(i, 3).Value = "H" Then
' Do nothing
ElseIf Cells(i, 4).Value = "" Then
' We unhide blank rows by setting flag
Rows(i).EntireRow.Hidden = False
End If
Next i

For Each j In Range(Cells(9, 26).Value)

' If a row has been hidden by the Hide_HW or Hide_SW
' macro, we don't want to move sliders and check boxes again.

If Cells(4, 21).Value = 1 And Cells(j, 3).Value = "S" Then
' Do nothing
ElseIf Cells(4, 21).Value = 2 And Cells(j, 3).Value = "H" Then
' Do nothing
ElseIf Cells(j, 4).Value = "" Then
' Move sliders and check boxes back to where they belong
    ActiveSheet.Shapes(Cells(j, 32).Value).IncrementLeft -660
    ActiveSheet.Shapes(Cells(j, 33).Value).IncrementLeft -660
End If
Next j
' End of if statement that checks whether to hide or unhide rows
End If
' End of if statement that checks whether rows were hidden by assuming completion
    End If

Next k

' Move cursor to top of sheet
Cells(1, 1).Select

End Sub
Sub Hide_SW()
' This macro hides all the rows that are marked with an S, showing
' that they are used only for a Software TRL computation.

' Hiding these rows also removes them from the TRL calculation

' Before hiding the Software questions, we check to see whether
' the Hardware questions are hidden. If they are, we bring
' them back before we hide the Software rows. This keeps the
' UnHide routines from moving the check boxes and sliders twice,
' which really messes up the display. (I found that out the hard way)

If Cells(4, 25).Value = 2 Then

UnHide_HW

End If

For k = 1 To 9
' First we check to see whether the rows for TRL 1 - 3
' were already hidden by assuming completion of these TRLs.
' If so, we skip to the next level.

    If k = 1 And Cells(34, 20).Value = True Then
    ElseIf k = 2 And Cells(61, 20).Value = True Then
    ElseIf k = 3 And Cells(104, 20).Value = True Then
    Else
' Setting this value will force the corresponding range
' values into cell(9,26)
      Cells(8, 27).Value = k

For Each i In Range(Cells(9, 26).Value)

' If a row has been hidden by the Hide_Mfg, Hide_Blank, or Hide_Prog
' macro, we don't want to move sliders and check boxes again.

If Cells(5, 21).Value = 2 And Cells(i, 4).Value = "M" Then
' Do nothing

ElseIf Cells(6, 23).Value = True And Cells(i, 4).Value = "" Then
' Do nothing

ElseIf Cells(6, 21).Value = 2 And Cells(i, 4).Value = "P" Then
' Do nothing

' First, the sliders and check boxes are moved out of the way.
' This keeps them from piling up on top of one another in the
' active portion of the worksheet.

ElseIf Cells(i, 3).Value = "S" Then
    ActiveSheet.Shapes(Cells(i, 32).Value).IncrementLeft 660
    ActiveSheet.Shapes(Cells(i, 33).Value).IncrementLeft 660
End If
Next i

' Then each row labeled with an "S" is hidden.
' Since we're just setting the "Hidden" flag, it doesn't
' really matter if the row was already hidden, so we don't
' waste time checking.

For Each j In Range(Cells(9, 26).Value)
If Cells(j, 3).Value = "S" Then
Rows(j).EntireRow.Hidden = True
End If
Next j

End If
' End of if statement that checks whether rows were hidden by assuming completion

Next k

' Set previous value of HW/SW/Both flag
Cells(4, 25).Value = Cells(4, 21).Value

'Move cursor to top of sheet
Cells(1, 1).Select

End Sub

Sub Hide_HW()
'
' This macro hides all the rows that are marked with a H, showing
' that they are used only for a Hardware TRL computation.

' Hiding these rows also removes them from the TRL calculation

' Before hiding the Hardware questions, we check to see whether
' the Software questions are hidden. If they are, we bring
' them back before we hide the Hardware rows. This keeps the
' UnHide routines from moving the check boxes and sliders twice,
' which really messes up the display. (I found that out the hard way)

If Cells(4, 25).Value = 1 Then

UnHide_SW

End If

For k = 1 To 9
' First we check to see whether the rows for TRL 1 - 3
' were already hidden by assuming completion of these TRLs.
' If so, we skip to the next level.

    If k = 1 And Cells(34, 20).Value = True Then
    ElseIf k = 2 And Cells(61, 20).Value = True Then
    ElseIf k = 3 And Cells(104, 20).Value = True Then
    Else
' Setting this value will force the corresponding range
' values into cell(9,26)
      Cells(8, 27).Value = k

For Each i In Range(Cells(9, 26).Value)

' If a row has been hidden by the Hide_Blank, Hide_Mfg or Hide_Prog
' macro, we don't want to move sliders and check boxes again.

If Cells(5, 21).Value = 2 And Cells(i, 4).Value = "M" Then
' Do nothing

ElseIf Cells(6, 23).Value = True And Cells(i, 4).Value = "" Then
' Do nothing

ElseIf Cells(6, 21).Value = 2 And Cells(i, 4).Value = "P" Then
' Do nothing

' First, the sliders and check boxes are moved out of the way.
' This keeps them from piling up on top of one another in the
' active portion of the worksheet.

ElseIf Cells(i, 3).Value = "H" Then
    ActiveSheet.Shapes(Cells(i, 32).Value).IncrementLeft 660
    ActiveSheet.Shapes(Cells(i, 33).Value).IncrementLeft 660
End If
Next i

'Then each row labeled with an "H" is hidden.

For Each j In Range(Cells(9, 26).Value)
If Cells(j, 3).Value = "H" Then
Rows(j).EntireRow.Hidden = True
End If
Next j

End If
' End of if statement that checks whether rows were hidden by assuming completion

Next k

' Set previous value of HW/SW/Both flag
Cells(4, 25).Value = Cells(4, 21).Value

Cells(1, 1).Select

End Sub
Sub UnHide_SW()

For k = 1 To 9
' First we check to see whether the rows for TRL 1 - 3
' were hidden by assuming completion of these TRLs.
' If so, we skip to the next level.

    If k = 1 And Cells(34, 20).Value = True Then
    ElseIf k = 2 And Cells(61, 20).Value = True Then
    ElseIf k = 3 And Cells(104, 20).Value = True Then
    Else
' Setting this value will force the corresponding range
' values into cell(9,26)
      Cells(8, 27).Value = k

' The Unhide routines work the opposite way.
' First we reveal the appropriate hidden rows
' then we move the sliders and check boxes back into position.

For Each i In Range(Cells(9, 26).Value)
' If a row has been hidden by the Hide_Mfg or Hide_Prog
' macro, we don't want to unhide it here.

If Cells(5, 21).Value = 2 And Cells(i, 4).Value = "M" Then
' Do nothing

ElseIf Cells(6, 21).Value = 2 And Cells(i, 4).Value = "P" Then
' Do nothing

ElseIf Cells(6, 23).Value = True And Cells(i, 4).Value = "" Then
' Do nothing

ElseIf Cells(i, 3).Value = "S" Then
Rows(i).EntireRow.Hidden = False
End If
Next i

For Each j In Range(Cells(9, 26).Value)
' If a row has been hidden by the Hide_Mfg or Hide_Prog
' macro, we don't want to move sliders and check boxes.

If Cells(5, 21).Value = 2 And Cells(j, 4).Value = "M" Then
' Do nothing

ElseIf Cells(6, 21).Value = 2 And Cells(j, 4).Value = "P" Then
' Do nothing

ElseIf Cells(6, 23).Value = True And Cells(j, 4).Value = "" Then
' Do nothing

ElseIf Cells(j, 3).Value = "S" Then
    ActiveSheet.Shapes(Cells(j, 32).Value).IncrementLeft -660
    ActiveSheet.Shapes(Cells(j, 33).Value).IncrementLeft -660
End If
Next j

End If
' End of if statement that checks whether rows were hidden by assuming completion

Next k

End Sub
Sub UnHide_HW()

' If we're calling this subroutine from the "Both"
' button, we need to unhide either the hardware or the
' software rows. First we check to see whether we have
' to reveal the software rows.

If Cells(4, 25).Value = 1 Then

UnHide_SW

ElseIf Cells(4, 25).Value = 2 Then
' This means we need to reveal the hardware rows

For k = 1 To 9
' We check to see whether the rows for TRL 1 - 3
' were already hidden by assuming completion of these TRLs.
' If so, we skip to the next level.

    If k = 1 And Cells(34, 20).Value = True Then
    ElseIf k = 2 And Cells(61, 20).Value = True Then
    ElseIf k = 3 And Cells(104, 20).Value = True Then
    Else
' Setting this value will force the corresponding range
' values into cell(9,26)
      Cells(8, 27).Value = k

' The Unhide routines work the opposite way.
' First we reveal the appropriate hidden rows
' then we move the sliders and check boxes back into position.

For Each i In Range(Cells(9, 26).Value)
' If a row has been hidden by the Hide_Mfg or Hide_Prog
' macro, we don't want to unhide it here.

If Cells(5, 21).Value = 2 And Cells(i, 4).Value = "M" Then
' Do nothing

ElseIf Cells(6, 21).Value = 2 And Cells(i, 4).Value = "P" Then
' Do nothing

' We also don't want to mess with rows hidden by the Hide_Blank macro
ElseIf Cells(6, 23).Value = True And Cells(i, 4).Value = "" Then
' Do nothing

ElseIf Cells(i, 3).Value = "H" Then
Rows(i).EntireRow.Hidden = False
End If
Next i

For Each j In Range(Cells(9, 26).Value)
' If a row has been hidden by the Hide_Mfg, Hide_Prog, or Hide_Blank
' macro, we don't want to move sliders and check boxes.

If Cells(5, 21).Value = 2 And Cells(j, 4).Value = "M" Then
' Do nothing

ElseIf Cells(6, 21).Value = 2 And Cells(j, 4).Value = "P" Then
' Do nothing

ElseIf Cells(6, 23).Value = True And Cells(j, 4).Value = "" Then
' Do nothing

ElseIf Cells(j, 3).Value = "H" Then
    ActiveSheet.Shapes(Cells(j, 32).Value).IncrementLeft -660
    ActiveSheet.Shapes(Cells(j, 33).Value).IncrementLeft -660
End If
Next j

End If
' End of if statement that checks whether rows were hidden by assuming completion

' Go to next TRL range
Next k

End If

' Set previous value of HW/SW/Both flag
Cells(4, 25).Value = Cells(4, 21).Value

Cells(1, 1).Select

End Sub

Sub Hide_MFG2()
 
 ' This subroutine hides the MRL rows by calling the another subroutine. It works from the
 ' Title worksheet by first going to the Calculator sheet, then calling the hide routine.
 
 Sheets("TRL Calculator").Select
   Hide_MFG
 Sheets("Summary").Select
 
End Sub
 

Sub UnHide_MFG2()
 
' This subroutine unhides the MRL rows by calling the another subroutine. It works from the
' Title worksheet by first going to the Calculator sheet, then calling the unhide routine.
 
Sheets("TRL Calculator").Select
   UnHide_MFG
 Sheets("Summary").Select
 
End Sub
Sub Hide_Prog2()
 
 ' This subroutine hides the PRL rows by calling the another subroutine. It works from the
 ' Title worksheet by first going to the Calculator sheet, then calling the hide routine.
 
Sheets("TRL Calculator").Select
   Hide_Prog
 Sheets("Summary").Select
 
End Sub
Sub UnHide_Prog2()
 
 ' This subroutine unhides the PRL rows by calling the another subroutine. It works from the
 ' Title worksheet by first going to the Calculator sheet, then calling the unhide routine.
 
Sheets("TRL Calculator").Select
   UnHide_Prog
 Sheets("Summary").Select
 
End Sub

Sub Hide_HW2()

Sheets("TRL Calculator").Select
   Hide_HW
 Sheets("Summary").Select
 
End Sub
Sub Hide_SW2()

Sheets("TRL Calculator").Select
   Hide_SW
 Sheets("Summary").Select
 
End Sub
Sub UnHideHW2()

Sheets("TRL Calculator").Select
   UnHide_HW
 Sheets("Summary").Select
 
End Sub
Attribute VB_Name = "Module4"
Sub Assume1()

Cells(8, 27).Value = 1

If Cells(34, 20).Value = False Then
    Call Unassume
Else
    Call Assume
End If

' Move cursor to top of section
Cells(33, 1).Select

End Sub
Sub Assume2()

Cells(8, 27).Value = 2

If Cells(61, 20).Value = False Then
    Call Unassume
Else
    Call Assume
End If

' Move cursor to top of section
    Cells(60, 1).Select

End Sub

Sub Assume3()

Cells(8, 27).Value = 3

If Cells(104, 20).Value = False Then
    Call Unassume
Else
    Call Assume
End If
    
' Move cursor to top of section
    Cells(103, 1).Select

End Sub
Sub Assume()

For Each i In Range(Cells(9, 26).Value)

' If a row has been hidden by the Hide_HW or Hide_SW
' macro, we don't want to move sliders and check boxes again.
If Cells(4, 21).Value = 1 And Cells(i, 3).Value = "S" Then
' Do nothing
ElseIf Cells(4, 21).Value = 2 And Cells(i, 3).Value = "H" Then
' Do nothing

' If a row has been hidden by the Hide_Mfg or Hide_Programmatics
' macro, we don't want to move sliders and check boxes again.
ElseIf Cells(5, 21).Value = 2 And Cells(i, 4).Value = "M" Then
' Do nothing
ElseIf Cells(6, 21).Value = 2 And Cells(i, 4).Value = "P" Then
' Do nothing

' If a row has been hidden by the Hide Blank Lines
' macro, we don't want to move sliders and check boxes again.
ElseIf Cells(6, 23).Value = True And Cells(i, 4).Value = "" Then
' Do nothing

Else
' Get sliders and check boxes out of the way
    ActiveSheet.Shapes(Cells(i, 32).Value).IncrementLeft 660
    ActiveSheet.Shapes(Cells(i, 33).Value).IncrementLeft 660
End If
Next i

For Each j In Range(Cells(9, 26).Value)

' The Hidden flag is set. If it was previously set,
' resetting it to the same value doesn't matter.

Rows(j).EntireRow.Hidden = True

Next j

' We then unhide the row that tells what's going on

If Cells(8, 27).Value = 3 Then
    Rows(106).EntireRow.Hidden = False
ElseIf Cells(8, 27).Value = 2 Then
    Rows(63).EntireRow.Hidden = False
ElseIf Cells(8, 27).Value = 1 Then
    Rows(36).EntireRow.Hidden = False
End If

End Sub
Sub Unassume()

For Each i In Range(Cells(9, 26).Value)

' If a row has been hidden by the Hide_HW or Hide_SW
' macro, we don't want to move sliders and check boxes again
' and we'll let it stay hidden.
If Cells(4, 21).Value = 1 And Cells(i, 3).Value = "S" Then
' Do nothing
ElseIf Cells(4, 21).Value = 2 And Cells(i, 3).Value = "H" Then
' Do nothing

' If a row has been hidden by the Hide_Mfg or Hide_Programmatics
' macro, we don't want to move sliders and check boxes again.
ElseIf Cells(5, 21).Value = 2 And Cells(i, 4).Value = "M" Then
' Do nothing

ElseIf Cells(6, 21).Value = 2 And Cells(i, 4).Value = "P" Then
' Do nothing

' If a row has been hidden by the Hide Blank Lines
' macro, we don't want to move sliders and check boxes again.
ElseIf Cells(6, 23).Value = True And Cells(i, 4).Value = "" Then
' Do nothing

Else
' Unhide the row
    Rows(i).EntireRow.Hidden = False
' Move the sliders and check boxes back
    ActiveSheet.Shapes(Cells(i, 32).Value).IncrementLeft -660
    ActiveSheet.Shapes(Cells(i, 33).Value).IncrementLeft -660
End If
Next i

' We then hide the row that says "We assumed."
If Cells(8, 27).Value = 3 Then
    Rows(106).EntireRow.Hidden = True
ElseIf Cells(8, 27).Value = 2 Then
    Rows(63).EntireRow.Hidden = True
ElseIf Cells(8, 27).Value = 1 Then
    Rows(36).EntireRow.Hidden = True
End If


End Sub


Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
