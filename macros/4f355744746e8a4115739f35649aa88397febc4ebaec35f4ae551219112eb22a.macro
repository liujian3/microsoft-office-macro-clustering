Attribute VB_Name = "DieseArbeitsmappe"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "GG_Modul"
DefInt A-Z


'// API-Functionen
Private Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As Long) As Long
Private Declare Function RegQueryValueEx Lib "advapi32" Alias "RegQueryValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, ByRef lpType As Long, ByVal szData As String, ByRef lpcbData As Long) As Long
Private Declare Function RegCloseKey Lib "advapi32.dll" (ByVal hKey As Long) As Long

Private Declare Function FindWindow Lib "user32" Alias "FindWindowA" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long

Private Declare Function LoadLibrary Lib "kernel32" Alias "LoadLibraryA" (ByVal lpLibFileName As String) As Long
Private Declare Function FreeLibrary Lib "kernel32" (ByVal hLibModule As Long) As Long

'Registry Specific Access Rights
Private Const KEY_QUERY_VALUE = &H1
Private Const KEY_SET_VALUE = &H2
Private Const KEY_CREATE_SUB_KEY = &H4
Private Const KEY_ENUMERATE_SUB_KEYS = &H8
Private Const KEY_NOTIFY = &H10
Private Const KEY_CREATE_LINK = &H20
Private Const KEY_ALL_ACCESS = &H3F

'Registry Constants
Private Const HKEY_CLASSES_ROOT = &H80000000
Private Const HKEY_CURRENT_USER = &H80000001
Private Const HKEY_LOCAL_MACHINE = &H80000002
Private Const HKEY_USERS = &H80000003

Private Const ERROR_SUCCESS = 0&
'//

Private Auftragsname As String
Private Library_handle As Long

'
' Interface deklaratioen zur Verwendung der OLI-DLL mit Visual Basic
'
'
' Deklaration der DLL-Funktionalit|fffd|t
'
' Kleiner Fallstrick im Visual Basic:
' wird das Programm im VB Entwickelt, mu|fffd| die dll im Pfad der Deklarations stehen!
' steht in der Deklaration KEIN Pfad, wird sie nur im /winnt bzw. /winnt/system32 Verzeichnis
' gefunden.
' Wenn die .EXE-Datei gestartet wird, wird zuerst im gleichen Verzeichnis gesucht, in dem sich auch
' die .EXE-Datei befindet, und dann im /winnt bzw. /winnt/system32 Verzeichnis
'
' Zusatzinfo: Wenn die DLL nicht gefunden wird, sollten Sie Ihre Environmentvariable PATH |fffd|berpr|fffd|fen.
'
'-----------------------------------------------------------------------------*/
'  oli_dllversion      Gibt Versionsstring der OLI-Schnittstelle aus          */
'-----------------------------------------------------------------------------*/

'long VBASIC oli_dllversion (void);
Private Declare Function OliDllVersion Lib "ggolibr.dll" Alias "oli_dllversion" () As Long

'-----------------------------------------------------------------------------*/
'  oli_client_start    Starten der Verbindung zum Server                      */
'-----------------------------------------------------------------------------*/
'int VBASIC oli_client_start(char * auftragsname, HWND cClientWnd);
Private Declare Function OliClientStart Lib "ggolibr.dll" Alias "oli_client_start" (ByVal Name As String) As Long

'-----------------------------------------------------------------------------*/
'  oli_set_clienthwnd  |fffd|bermitteln des Client-Windowhandles an Geograf        */
'-----------------------------------------------------------------------------*/
'void VBASIC oli_set_clienthwnd (HWND hClientWnd)
Private Declare Sub OliSetClienthwnd Lib "ggolibr.dll" Alias "oli_set_clienthwnd" (ByVal Windowhandle As Long)

'-----------------------------------------------------------------------------*/
' oli_client_end   Beenden der Verbindung zum Server                          */
'-----------------------------------------------------------------------------*/
'void VBASIC oli_client_end(void);
Private Declare Sub OliClientEnd Lib "ggolibr.dll" Alias "oli_client_end" ()

'-----------------------------------------------------------------------------*/
' oli_use_network  Setzt fest, ob der Server auf einem  Netzwerkrechner       */
'                  l|fffd|uft und wie dessen Name ist                              */
'                                                                             */
'                  Falls diese Funktion nicht benutzt wird, l|fffd|uft der         */
'                  Server auf dem gleichen Rechner wie der Client             */
'-----------------------------------------------------------------------------*/
'void VBASIC oli_use_network(int use, char* server_name);
Private Declare Sub OliUseNetwork Lib "ggolibr.dll" Alias "oli_use_network" (ByVal Use As Long, ByVal ServerName As String)

'-----------------------------------------------------------------------------*/
'  oli_set_timeout Setzt den Timeout des Client Mailslots                     */
'-----------------------------------------------------------------------------*/
'int VBASIC oli_set_timeout(int t);
Private Declare Function OliSetTimeout Lib "ggolibr.dll" Alias " oli_set_timeout" (ByVal TimeOut As Long) As Long

'-----------------------------------------------------------------------------*/
'  oli_test_verbindung Testet die Verbindung zum Server                       */
'  return : 0 == verbindung OK   sonst Verbindung nicht vorhanden             */
'-----------------------------------------------------------------------------*/
'int VBASIC oli_test_verbindung();
Private Declare Function OliTestVerbindung Lib "ggolibr.dll" Alias "oli_test_verbindung" () As Long

'-----------------------------------------------------------------------------*/
'  oli_send  sendet ein oli_data_t "Objekt"                                   */
'            zum Master und wartet auf seine Antwort                          */
'            Die Antwort wird in die olo_data_t Liste eingetragen             */
'  return :                                                                   */
'-----------------------------------------------------------------------------*/
'int VBASIC oli_send(oli_data_t obj);
Private Declare Function OliSend Lib "ggolibr.dll" Alias "oli_send" (ByVal Object As Long) As Long

'-----------------------------------------------------------------------------*/
' Bringt das GEOgraf Fenster in den Vordergrund                               */
'-----------------------------------------------------------------------------*/
'void VBASIC oli_set_foreground (void);
Private Declare Sub OliSetForeground Lib "ggolibr.dll" Alias "oli_set_foreground" ()

'-----------------------------------------------------------------------------*/
' Erzeugen eines neuen Objektes                                               */
'-----------------------------------------------------------------------------*/
'oli_data_t VBASIC oli_alloc_object(void);
Private Declare Function OliAllocObject Lib "ggolibr.dll" Alias "oli_alloc_object" () As Long

'-----------------------------------------------------------------------------*/
' Freigeben eines Objektes                                                    */
'-----------------------------------------------------------------------------*/
'int VBASIC oli_free_object(oli_data_t obj);
Private Declare Function OliFreeObject Lib "ggolibr.dll" Alias "oli_free_object" (ByVal Object As Long) As Long

'-----------------------------------------------------------------------------*/
' Attribut an ein Objekt anf|fffd|gen                                              */
'-----------------------------------------------------------------------------*/
'void VBASIC oli_append_attr(oli_data_t obj, char *name, char *value);
Private Declare Sub OliAppendAttr Lib "ggolibr.dll" Alias "oli_append_attr" (ByVal Object As Long, ByVal Name As String, ByVal Value As String)

'-----------------------------------------------------------------------------*/
' Speicher, der an ein Objekt gebunden ist, allozieren                        */
'-----------------------------------------------------------------------------*/
'void* VBASIC oli_alloc_memory(oli_data_t obj, unsigned len);
Private Declare Function OliAllocMemory Lib "ggolibr.dll" Alias "oli_alloc_memory" (ByVal Object As Long, Laenge As Long) As Long

'-----------------------------------------------------------------------------*/
' Liefert, ein Attribut eines Objektes, max Stringl|fffd|nge vorgegeben            */
'-----------------------------------------------------------------------------*/
'long VBASIC oli_value2(oli_data_t obj, char *name, char *Daten, long nSize);
Private Declare Function OliValue2 Lib "ggolibr.dll" Alias "oli_value2" (ByVal Object As Long, ByVal Name As String, ByVal Daten As String, ByVal Size As Long) As Long

Public Sub GG_Get_Obj_Single_F|fffd|che()
    Dim Auftragsname As String
    Dim Packet As Long
    Dim Requeststring As String * 20
    Dim Old_State As Long
    Dim GG_Path As String
    Dim Lib As String
    
    Call Get_Key_Value(HKEY_LOCAL_MACHINE, "Software\HHK Datentechnik\GeoGraf", "Path", GG_Path, "C:\GG\Prog\bin40")
    
    Auftragsname = "CADDB"
    Lib = Path_Backshlash(GG_Path) + "ggolibr.dll"
    Library_handle = LoadLibrary(Lib)
    
    Old_State = Workbooks.Application.WindowState
    Workbooks.Application.WindowState = xlMinimized
    
    Call ConnectToAuftrag(Auftragsname)

    Requeststring = ""
    Packet = OliAllocObject()
    Call OliAppendAttr(Packet, "SELECT", "GEOOBJ")
    Call OliAppendAttr(Packet, "USERINFO", "eine Strassenfl|fffd|che ausw|fffd|hlen")
    Call OliAppendAttr(Packet, "RECNUMMER", "")

    Requeststring = ""
    Call OliAppendAttr(Packet, "X", Requeststring)
    Call OliAppendAttr(Packet, "Y", Requeststring)
    Call OliAppendAttr(Packet, "NAME", Requeststring)
    Call OliAppendAttr(Packet, "ART", Requeststring)
    Call OliAppendAttr(Packet, "EBENE", Requeststring)
    Call OliAppendAttr(Packet, "FLAECHE", Requeststring)
    
    OliSetForeground
    If SendOliMessage(Packet, 1) = 0 Then
    
        s$ = GetSingleValue(Packet, "RECNUMMER")
        s$ = GetSingleValue(Packet, "X")
        s$ = GetSingleValue(Packet, "Y")
        s$ = GetSingleValue(Packet, "NAME")
        s$ = GetSingleValue(Packet, "ART")
        s$ = GetSingleValue(Packet, "EBENE")
        Workbooks.Application.ActiveCell = Round(GetSingleValue(Packet, "FLAECHE"), 2)
        
    End If
    OliFreeObject (Packet)
    Workbooks.Application.WindowState = Old_State
    
    Call Disconnect
    If Library_handle <> False Then FreeLibrary (Library_handle)
End Sub

Public Sub GG_Get_Obj_Multi_F|fffd|che()
    Dim Auftragsname As String
    Dim Packet As Long
    Dim Requeststring As String * 20
    Dim Old_State As Long
    Dim GG_Path As String
    Dim Lib As String
    Dim Fl|fffd|che As Double
    
    Call Get_Key_Value(HKEY_LOCAL_MACHINE, "Software\HHK Datentechnik\GeoGraf", "Path", GG_Path, "C:\GG\Prog\bin40")
    
    Auftragsname = "CADDB"
    Lib = Path_Backshlash(GG_Path) + "ggolibr.dll"
    Library_handle = LoadLibrary(Lib)
    
    Old_State = Workbooks.Application.WindowState
    Workbooks.Application.WindowState = xlMinimized
    
    Call ConnectToAuftrag(Auftragsname)

neue_Fl|fffd|che:
    Requeststring = ""
    Packet = OliAllocObject()
    Call OliAppendAttr(Packet, "SELECT", "GEOOBJ")
    Call OliAppendAttr(Packet, "USERINFO", "eine Teil-Strassenfl|fffd|che ausw|fffd|hlen")
    Call OliAppendAttr(Packet, "RECNUMMER", "")

    Requeststring = ""
    Call OliAppendAttr(Packet, "X", Requeststring)
    Call OliAppendAttr(Packet, "Y", Requeststring)
    Call OliAppendAttr(Packet, "NAME", Requeststring)
    Call OliAppendAttr(Packet, "ART", Requeststring)
    Call OliAppendAttr(Packet, "EBENE", Requeststring)
    Call OliAppendAttr(Packet, "FLAECHE", Requeststring)
   
    OliSetForeground
    If SendOliMessage(Packet, 1) = 0 Then
    
        s$ = GetSingleValue(Packet, "RECNUMMER")
        s$ = GetSingleValue(Packet, "X")
        s$ = GetSingleValue(Packet, "Y")
        s$ = GetSingleValue(Packet, "NAME")
        s$ = GetSingleValue(Packet, "ART")
        s$ = GetSingleValue(Packet, "EBENE")
        Fl|fffd|che = Fl|fffd|che + Val(GetSingleValue(Packet, "FLAECHE"))
    
        OliFreeObject (Packet)
        GoTo neue_Fl|fffd|che
    End If
    OliFreeObject (Packet)
    Workbooks.Application.WindowState = Old_State
    
    Workbooks.Application.ActiveCell = Round(Fl|fffd|che, 2)
    
    Call Disconnect
    If Library_handle <> False Then FreeLibrary (Library_handle)
End Sub

Public Sub GG_Get_Lin_Single_L|fffd|nge()
    Dim Auftragsname As String
    Dim Packet As Long
    Dim Requeststring As String * 20
    Dim Old_State As Long
    Dim GG_Path As String
    Dim Lib As String
    Dim X1 As Double
    Dim Y1 As Double
    Dim X2 As Double
    Dim Y2 As Double
    Dim L|fffd|nge As Double
    
    Call Get_Key_Value(HKEY_LOCAL_MACHINE, "Software\HHK Datentechnik\GeoGraf", "Path", GG_Path, "C:\GG\Prog\bin40")
    
    Auftragsname = "CADDB"
    Lib = Path_Backshlash(GG_Path) + "ggolibr.dll"
    Library_handle = LoadLibrary(Lib)
    
    Old_State = Workbooks.Application.WindowState
    Workbooks.Application.WindowState = xlMinimized
    
    Call ConnectToAuftrag(Auftragsname)

    Requeststring = ""
    Packet = OliAllocObject()
    Call OliAppendAttr(Packet, "SELECT", "GEOLIN")
    Call OliAppendAttr(Packet, "USERINFO", "eine Strassen-Linie ausw|fffd|hlen")
    Call OliAppendAttr(Packet, "RECNUMMER", "")
    
    Requeststring = ""
    Call OliAppendAttr(Packet, "LDOTA", Requeststring)
    Call OliAppendAttr(Packet, "LDOTE", Requeststring)
    Call OliAppendAttr(Packet, "ART", Requeststring)
    Call OliAppendAttr(Packet, "EBENE", Requeststring)
        
    OliSetForeground
    
    If SendOliMessage(Packet, 1) = 0 Then
    
        s$ = GetSingleValue(Packet, "RECNUMMER")
        Link1$ = GetSingleValue(Packet, "LDOTA")
        Link2$ = GetSingleValue(Packet, "LDOTE")
        s$ = GetSingleValue(Packet, "ART")
        s$ = GetSingleValue(Packet, "EBENE")
        
        OliFreeObject (Packet)
        
        '// lese Punkt 1
        Packet = OliAllocObject()
        Call OliAppendAttr(Packet, "READ", "GEODOT")
        Call OliAppendAttr(Packet, "RECNUMMER", Link1$)
        
        Requeststring = ""
        Call OliAppendAttr(Packet, "PUNKTNUMMER", Requeststring)
        Call OliAppendAttr(Packet, "X", Requeststring)
        Call OliAppendAttr(Packet, "Y", Requeststring)
        If SendOliMessage(Packet, 1) = 0 Then
            s$ = GetSingleValue(Packet, "PUNKTNUMMER")
            X1 = Val(GetSingleValue(Packet, "X"))
            Y1 = Val(GetSingleValue(Packet, "Y"))
        End If
        OliFreeObject (Packet)
        '//
        
        '// lese Punkt 2
        Packet = OliAllocObject()
        Call OliAppendAttr(Packet, "READ", "GEODOT")
        Call OliAppendAttr(Packet, "RECNUMMER", Link2$)
        
        Requeststring = ""
        Call OliAppendAttr(Packet, "PUNKTNUMMER", Requeststring)
        Call OliAppendAttr(Packet, "X", Requeststring)
        Call OliAppendAttr(Packet, "Y", Requeststring)
        If SendOliMessage(Packet, 1) = 0 Then
            s$ = GetSingleValue(Packet, "PUNKTNUMMER")
            X2 = Val(GetSingleValue(Packet, "X"))
            Y2 = Val(GetSingleValue(Packet, "Y"))
        End If
        '//
        L|fffd|nge = Strecke(X1, Y1, X2, Y2)
    End If
    OliFreeObject (Packet)
    
    Workbooks.Application.ActiveCell = Round(L|fffd|nge, 3)
    Workbooks.Application.WindowState = Old_State
    
    Call Disconnect
    If Library_handle <> False Then FreeLibrary (Library_handle)
End Sub

Public Sub GG_Get_Lin_Multi_L|fffd|nge()
    Dim Auftragsname As String
    Dim Packet As Long
    Dim Requeststring As String * 20
    Dim Old_State As Long
    Dim GG_Path As String
    Dim Lib As String
    Dim X1 As Double
    Dim Y1 As Double
    Dim X2 As Double
    Dim Y2 As Double
    Dim L|fffd|nge As Double
    
    Call Get_Key_Value(HKEY_LOCAL_MACHINE, "Software\HHK Datentechnik\GeoGraf", "Path", GG_Path, "C:\GG\Prog\bin40")
    
    Auftragsname = "CADDB"
    Lib = Path_Backshlash(GG_Path) + "ggolibr.dll"
    Library_handle = LoadLibrary(Lib)
    
    Old_State = Workbooks.Application.WindowState
    Workbooks.Application.WindowState = xlMinimized
    
    Call ConnectToAuftrag(Auftragsname)

neuer_Durchgang:
    Requeststring = ""
    Packet = OliAllocObject()
    Call OliAppendAttr(Packet, "SELECT", "GEOLIN")
    Call OliAppendAttr(Packet, "USERINFO", "eine Strassen-Linie ausw|fffd|hlen")
    Call OliAppendAttr(Packet, "RECNUMMER", "")
    
    Requeststring = ""
    Call OliAppendAttr(Packet, "LDOTA", Requeststring)
    Call OliAppendAttr(Packet, "LDOTE", Requeststring)
    Call OliAppendAttr(Packet, "ART", Requeststring)
    Call OliAppendAttr(Packet, "EBENE", Requeststring)
        
    OliSetForeground
    
    If SendOliMessage(Packet, 1) = 0 Then
    
        s$ = GetSingleValue(Packet, "RECNUMMER")
        Link1$ = GetSingleValue(Packet, "LDOTA")
        Link2$ = GetSingleValue(Packet, "LDOTE")
        s$ = GetSingleValue(Packet, "ART")
        s$ = GetSingleValue(Packet, "EBENE")
        
        OliFreeObject (Packet)
        
        '// lese Punkt 1
        Packet = OliAllocObject()
        Call OliAppendAttr(Packet, "READ", "GEODOT")
        Call OliAppendAttr(Packet, "RECNUMMER", Link1$)
        
        Requeststring = ""
        Call OliAppendAttr(Packet, "PUNKTNUMMER", Requeststring)
        Call OliAppendAttr(Packet, "X", Requeststring)
        Call OliAppendAttr(Packet, "Y", Requeststring)
        If SendOliMessage(Packet, 1) = 0 Then
            s$ = GetSingleValue(Packet, "PUNKTNUMMER")
            X1 = Val(GetSingleValue(Packet, "X"))
            Y1 = Val(GetSingleValue(Packet, "Y"))
        End If
        OliFreeObject (Packet)
        '//
        
        '// lese Punkt 2
        Packet = OliAllocObject()
        Call OliAppendAttr(Packet, "READ", "GEODOT")
        Call OliAppendAttr(Packet, "RECNUMMER", Link2$)
        
        Requeststring = ""
        Call OliAppendAttr(Packet, "PUNKTNUMMER", Requeststring)
        Call OliAppendAttr(Packet, "X", Requeststring)
        Call OliAppendAttr(Packet, "Y", Requeststring)
        If SendOliMessage(Packet, 1) = 0 Then
            s$ = GetSingleValue(Packet, "PUNKTNUMMER")
            X2 = Val(GetSingleValue(Packet, "X"))
            Y2 = Val(GetSingleValue(Packet, "Y"))
        End If
        '//
        OliFreeObject (Packet)
        L|fffd|nge = L|fffd|nge + Strecke(X1, Y1, X2, Y2)
        GoTo neuer_Durchgang
    End If
    OliFreeObject (Packet)
    
    Workbooks.Application.ActiveCell = Round(L|fffd|nge, 3)
    Workbooks.Application.WindowState = Old_State
    
    Call Disconnect
    If Library_handle <> False Then FreeLibrary (Library_handle)
End Sub

Public Sub GG_Get_Knoten()
    Dim Auftragsname As String
    Dim Packet As Long
    Dim Requeststring As String * 20
    Dim Old_State As Long
    Dim GG_Path As String
    Dim Lib As String
    Dim X1 As Double
    Dim Y1 As Double
    Dim X2 As Double
    Dim Y2 As Double
    Dim L|fffd|nge As Double
    
    Call Get_Key_Value(HKEY_LOCAL_MACHINE, "Software\HHK Datentechnik\GeoGraf", "Path", GG_Path, "C:\GG\Prog\bin40")
    
    Auftragsname = "CADDB"
    Lib = Path_Backshlash(GG_Path) + "ggolibr.dll"
    Library_handle = LoadLibrary(Lib)
    
    Old_State = Workbooks.Application.WindowState
    Workbooks.Application.WindowState = xlMinimized
    
    Call ConnectToAuftrag(Auftragsname)

neuer_Durchgang:
    Requeststring = ""
    Packet = OliAllocObject()
    Call OliAppendAttr(Packet, "SELECT", "GEODOT")
    Call OliAppendAttr(Packet, "USERINFO", "Anfangs-Knoten ausw|fffd|hlen")
    Call OliAppendAttr(Packet, "RECNUMMER", "")
    
    Requeststring = ""
    Call OliAppendAttr(Packet, "PUNKTNUMMER", Requeststring)
    Call OliAppendAttr(Packet, "ART", Requeststring)
    Call OliAppendAttr(Packet, "EBENE", Requeststring)
        
    OliSetForeground
    
    If SendOliMessage(Packet, 1) = 0 Then
    
        s$ = GetSingleValue(Packet, "RECNUMMER")
        PKT1$ = Trim$(GetSingleValue(Packet, "PUNKTNUMMER"))
        s$ = GetSingleValue(Packet, "ART")
        s$ = GetSingleValue(Packet, "EBENE")
        
        OliFreeObject (Packet)
        
        '// lese Knoten 2
        Requeststring = ""
        Packet = OliAllocObject()
        Call OliAppendAttr(Packet, "SELECT", "GEODOT")
        Call OliAppendAttr(Packet, "USERINFO", "End-Knoten ausw|fffd|hlen")
        Call OliAppendAttr(Packet, "RECNUMMER", "")
    
        Requeststring = ""
        Call OliAppendAttr(Packet, "PUNKTNUMMER", Requeststring)
        Call OliAppendAttr(Packet, "ART", Requeststring)
        Call OliAppendAttr(Packet, "EBENE", Requeststring)
        
        OliSetForeground
    
        If SendOliMessage(Packet, 1) = 0 Then
    
            s$ = GetSingleValue(Packet, "RECNUMMER")
            PKT2$ = Trim$(GetSingleValue(Packet, "PUNKTNUMMER"))
            s$ = GetSingleValue(Packet, "ART")
            s$ = GetSingleValue(Packet, "EBENE")
        
            OliFreeObject (Packet)
        Else
            OliFreeObject (Packet)
            GoTo Ende
        End If
        '//
    Else
        OliFreeObject (Packet)
        GoTo Ende
    End If
    
    Workbooks.Application.ActiveCell = PKT1$ + " _ " + PKT2$

Ende:
    Workbooks.Application.WindowState = Old_State
    
    Call Disconnect
    If Library_handle <> False Then FreeLibrary (Library_handle)
End Sub

Private Function ConnectToAuftrag(ByVal Auftragsname As String) As Long
Dim Version As Long
Dim Windowhandle As Long
Dim WindowTitle As String

'Windowhandle = FindWindow(vbNullString, MainDialog.Caption + Chr$(0))
ConnectToAuftrag = OliClientStart(Auftragsname)
a = 0
'OliSetClienthwnd (Windowhandle)

'If ConnectToAuftrag Then
 ' MainDialog.Auftrag = "Bitte GEOgraf Auftrag ausw|fffd|hlen"
'Else
 ' MainDialog.Auftrag = Auftragsname
'End If
DllVersion_$ = OliDllVersion()
End Function

Private Sub Disconnect()
    OliClientEnd
End Sub

Private Function SendOliMessage(ByVal Packet As Long, ByVal Typ As Long) As Long
Dim Status As Long

Status = OliSend(Packet)

SendOliMessage = Status
End Function

Private Function GetSingleValue(ByVal Packet As Long, ByVal Name As String) As String
    Dim SingleValue As String * 100

    SingleValue = ""
    Call OliValue2(Packet, Name, SingleValue, Len(SingleValue))
    GetSingleValue = Bstr2cstr(SingleValue)
End Function

Private Function Bstr2cstr(ByRef st As String) As String
    Dim found As Long

    found = InStr(st, Chr(0))
    If found >= 1 Then
        st = Left(st, found - 1)
    End If
    
    Bstr2cstr = st
End Function

Private Function Round(v As Variant, ByRef D As Integer) As String
   If D <= 0 Then
      f$ = "0"
   Else
      f$ = "0." + String(D, "0")
   End If
    If VarType(v) = vbString Then
        i# = Val(v)
    Else
        i# = v
    End If
    Tmp$ = Format(i#, f$)
    Round = Replace(Tmp$, ",", ".")
End Function

Private Function Get_Key_Value(KeyRoot As Long, KeyName As String, ValueName As String, ByRef KeyVal As String, Optional Vorgabe As String) As Boolean
    Dim i As Long                                  ' Loop Counter
    Dim rc As Long                               ' Return Code
    Dim hKey As Long                          ' Handle To An Open Registry Key
    Dim hDepth As Long                      '
    Dim KeyValType As Long              'Data Type Of A Registry Key
    '------------------------------------------------------------
  
     'KEY_ALL_ACCESS
    rc = RegOpenKeyEx(KeyRoot, KeyName, 0, KEY_QUERY_VALUE, hKey)  ' Open Registry Key
    
    If (rc <> ERROR_SUCCESS) Then GoTo GetKeyError          ' Handle Error...
    
    KeyVal = Space$(1024)                             ' Allocate Variable Space
    '------------------------------------------------------------
    ' Retrieve Registry Key Value...
    '------------------------------------------------------------
    rc = RegQueryValueEx(hKey, ValueName, 0, KeyValType, KeyVal, Len(KeyVal))   ' Get Key Value
                        
    If (rc <> ERROR_SUCCESS) Then GoTo GetKeyError          ' Handle Errors
    
    KeyVal = RTrim$(KeyVal)
    pos = InStr(KeyVal, Chr$(0))
    If pos > 0 Then
        If pos > 1 Then
            KeyVal = Left$(KeyVal, pos - 1)
        Else
            KeyVal = ""
        End If
    End If
    
    Get_Key_Value = True                                ' Return Success
    rc = RegCloseKey(hKey)                              ' Close Registry Key
    Exit Function                                               ' Exit
    
GetKeyError:                                                   ' Cleanup After An Error Has Occured...
    Get_Key_Value = False
    If rc = 2 Then KeyVal = Vorgabe
    rc = RegCloseKey(hKey)                              ' Close Registry Key
End Function

Private Function Path_Backshlash(ByVal s$) As String
   Tmp$ = s$
   If Right$(Tmp$, 1) <> "\" Then Tmp$ = Tmp$ + "\"
   Path_Backshlash$ = Tmp$
End Function

Private Function Strecke(ByVal X1 As Double, ByVal Y1 As Double, ByVal X2 As Double, ByVal Y2 As Double) As Single
    Strecke = Sqr((X2 - X1) ^ 2 + (Y2 - Y1) ^ 2)
End Function

Attribute VB_Name = "Tabelle4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
