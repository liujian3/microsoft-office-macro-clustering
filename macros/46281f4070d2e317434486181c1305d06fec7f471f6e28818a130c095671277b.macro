Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "0{00020906-0000-0000-C000-000000000046}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Option Explicit

Private Sub Document_New()

   Load frmRetrieveData
   frmRetrieveData.Show

End Sub
Attribute VB_Name = "frmRetrieveData"
Attribute VB_Base = "0{FE01868F-8E35-11D3-B781-00105A98FD68}{FE018640-8E35-11D3-B781-00105A98FD68}"
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
   
Dim appAccess As Access.Application
Dim cbo As ComboBox
Dim ctl As ComboBox
Dim dbe As DAO.DBEngine
Dim dbs As Database
Dim fso As FileSystemObject
Dim intItem As Integer
Dim intAnother As Integer
Dim intColumn As Integer
Dim intCount As Integer
Dim intIndex As Integer
Dim intRow As Integer
Dim intRows As Integer
Dim intSaveNameFail As String
Dim lngCount As Long
Dim lngRow As Long
Dim lngTableRows As Long
Dim lst As ListBox
Dim prps As Object
Dim rst As Recordset
Dim strAccessDir As String
Dim strAddress As String
Dim strCountry As String
Dim strDBName As String
Dim strDocsPath As String
Dim strDocType As String
Dim strJobTitle As String
Dim strLongDate As String
Dim strName As String
Dim strSaveName As String
Dim strSaveNamePath As String
Dim strShortDate As String
Dim strTemplatePath As String
Dim strTest As String
Dim strTestFile As String
Dim strWordTemplate As String
Dim varContactArray As Variant
Dim wks As Workspace


Private Sub UserForm_Initialize()

   Call FillContactsList
   
End Sub
   
Private Sub cmdCancel_Click()

   Unload frmRetrieveData
   
End Sub

Private Sub cmdFillLists_Click()
'Written by Helen Feddema 10-28-99
'Last modified 10-28-99

On Error GoTo ErrorHandler

   Call FillContactsList
   
ErrorHandlerExit:
   Exit Sub

ErrorHandler:
   MsgBox "Error No: " & Err.Number & "; Description: " & Err.Description
   Resume ErrorHandlerExit

End Sub

Function FillContactsList()
'Written by Helen Feddema 10-28-99
'Last modified 10-29-99

On Error GoTo ErrorHandler

   'Pick up path to Access database directory from Access SysCmd function
   Set appAccess = CreateObject("Access.Application")
   strAccessDir = appAccess.SysCmd(acSysCmdAccessDir)
   strDBName = strAccessDir & "Retrieving Data.mdb"
   'MsgBox "DBName: " & strDBName
   
   'The line below is needed for Access 97; comment it out for
   'Access 2000
   appAccess.Quit

   'Set up reference to Access database (Access 97)
   Set dbe = CreateObject("DAO.DBEngine.35")
   
   'Set up reference to Access database (Access 2000)
   'Use either one of the next two lines
   'Set dbe = CreateObject("DAO.DBEngine.36")
   'Set dbe = appAccess.DBEngine
   
   Set wks = dbe.Workspaces(0)
   Set dbs = wks.OpenDatabase(strDBName)

   Set rst = dbs.OpenRecordset("qryMergeContacts")
   rst.MoveLast
   rst.MoveFirst
   lngCount = rst.RecordCount
   Debug.Print "Number of items in table: " & lngCount
   lngCount = rst.RecordCount - 1
   varContactArray = rst.GetRows(lngCount)
   rst.Close
   dbs.Close
   wks.Close

   'Leaving the width blank for the 2nd column makes it just the right size to display its data
   Set cbo = cboContacts
   cbo.ColumnWidths = _
      "0 pt; ; 0 pt; 0 pt; 0 pt; 0 pt; 0 pt; 0 pt; 0 pt; 0 pt; 0 pt; 0 pt"
   cbo.Width = 150
   cbo.Column() = varContactArray
   
   Set lst = lstContacts
   lst.ColumnWidths = _
      "0 pt; ; 0 pt; 0 pt; 0 pt; 0 pt; 0 pt; 0 pt; 0 pt; 0 pt; 0 pt; 0 pt"
   lst.Width = 150
   lst.Column() = varContactArray
   
ErrorHandlerExit:
   Exit Function

ErrorHandler:
   MsgBox "Error No: " & Err.Number & "; Description: " & Err.Description
   Resume ErrorHandlerExit

End Function

Private Sub cmdSingleLetter_Click()
'Written by Helen Feddema 10-28-99
'Last modified 10-29-99

On Error GoTo ErrorHandler

   Set cbo = cboContacts
   strLongDate = Format(Date, "mmmm d, yyyy")
   strShortDate = Format(Date, "m-d-yyyy")
   strDocsPath = Application.System.PrivateProfileString("", _
      "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders", _
      "Personal") & "\"
   
   'Check for required address information
   If Nz(cbo.Column(5)) = "" Then
      MsgBox "Can't send letter -- no street address!"
      Exit Sub
   End If
   
   If Nz(cbo.Column(6)) = "" Then
      MsgBox "Can't send letter -- no city!"
      Exit Sub
   End If
   
   If Nz(cbo.Column(8)) = "" Then
      MsgBox "Can't send letter -- no postal code!"
      Exit Sub
   End If

   strName = Nz(cbo.Column(2)) & _
      " " & Nz(cbo.Column(3))
   strJobTitle = Nz(cbo.Column(11))
   If strJobTitle <> "" Then
      strName = strName & vbCrLf & strJobTitle
   End If
   strAddress = Nz(cbo.Column(5)) & vbCrLf & _
      Nz(cbo.Column(6)) & ", " & Nz(cbo.Column(7)) _
      & "  " & Nz(cbo.Column(8))
   Debug.Print "Address: " & strAddress
   strCountry = Nz(cbo.Column(9))
   If strCountry <> "USA" Then
      strAddress = strAddress & vbCrLf & strCountry
   End If
   
   'Open a new letter based on the selected template
   'Application.Documents.Add strWordTemplate
   
   'Write information to Word custom document properties
   Set prps = Application.ActiveDocument.CustomDocumentProperties
   prps.Item("Name").Value = strName
   On Error Resume Next
   prps.Item("Salutation").Value = Nz(cbo.Column(4))
   prps.Item("CompanyName").Value = Nz(cbo.Column(10))
   prps.Item("Address").Value = strAddress
   prps.Item("TodayDate").Value = strLongDate
   
   'Check for existence of previously saved letter in documents folder,
   'and append an incremented number to save name if found
   strDocType = Application.ActiveDocument.BuiltInDocumentProperties(2)
   strSaveName = strDocType & " to " & _
      cbo.Column(2) & " " & cbo.Column(3)
   strSaveName = strSaveName & " on " & strShortDate & ".doc"
   intAnother = 2
   intSaveNameFail = True
   Do While intSaveNameFail
      strSaveNamePath = strDocsPath & strSaveName
      Debug.Print "Proposed save name and path: " _
         & vbCrLf & strSaveNamePath
      strTestFile = Nz(Dir(strSaveNamePath))
      Debug.Print "Test file: " & strTestFile
      If strTestFile = strSaveName Then
         Debug.Print "Save name already used: " & strSaveName
         
         'Create new save name with incremented number
         intSaveNameFail = True
         strSaveName = strDocType & " " & CStr(intAnother) & " to " & _
            cbo.Column(2) & " " & cbo.Column(3)
         strSaveName = strSaveName & " on " & strShortDate & ".doc"
         strSaveNamePath = strDocsPath & strSaveName
         Debug.Print "New save name and path: " _
            & vbCrLf & strSaveNamePath
         intAnother = intAnother + 1
      Else
         Debug.Print "Save name not used: " & strSaveName
         intSaveNameFail = False
      End If
   Loop
   
   Unload frmRetrieveData
   
   'Update fields in Word document and activate it
   With Application
      .Selection.WholeStory
      .Selection.Fields.Update
      .Selection.HomeKey Unit:=6
      .ActiveDocument.SaveAs strSaveName
   End With
   
ErrorHandlerExit:
   Exit Sub

ErrorHandler:
   MsgBox "Error No: " & Err.Number & "; Description: " & Err.Description
   Resume ErrorHandlerExit

End Sub

Private Sub cmdMultipleLetters_Click()
'Written by Helen Feddema 10-28-99
'Last modified 10-29-99

On Error GoTo ErrorHandler

   Set lst = lstContacts
   strWordTemplate = "Contact Letter.dot"
   strLongDate = Format(Date, "mmmm d, yyyy")
   strShortDate = Format(Date, "m-d-yyyy")
   
   'Office 97 version
   strDocsPath = Application.System.PrivateProfileString("", _
      "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders", _
      "Personal") & "\"
   
   'Office 2000 version (this should work in Office 97, but it appears to be
   'unreliable there; it is relable in Office 2000)
   'strDocsPath = _
      Application.Options.DefaultFilePath(wdDocumentsPath) & "\"
   Debug.Print "Docs path: " & strDocsPath
   
   'Office 97 version
   strTemplatePath = Application.System.PrivateProfileString("", _
      "HKEY_CURRENT_USER\Software\Microsoft\Office\8.0\Common\FileNew\LocalTemplates", _
      "") & "\"
   
   'Office 2000 version (this should work in Office 97, but it appears to be
   'unreliable there; it is relable in Office 2000)
   'strTemplatePath = _
      Application.Options.DefaultFilePath(wdUserTemplatesPath) & "\"
   Debug.Print "Template path: " & strTemplatePath
   
   strWordTemplate = strTemplatePath & strWordTemplate
   Debug.Print "Template: " & strWordTemplate
   
   intRows = lst.ListCount - 1
   
   For intItem = 1 To intRows
      If lst.Selected(intItem) = True Then
         'Check for required address information
         strTest = Nz(lst.Column(5, intItem))
         Debug.Print "Street address: " & strTest
         If strTest = "" Then
            MsgBox "Can't send letter -- no street address!"
            Exit Sub
         End If
         
         strTest = Nz(lst.Column(6, intItem))
         Debug.Print "City: " & strTest
         If strTest = "" Then
            MsgBox "Can't send letter -- no city!"
            Exit Sub
         End If
         
         strTest = Nz(lst.Column(8, intItem))
         Debug.Print "Postal code: " & strTest
         If strTest = "" Then
            MsgBox "Can't send letter -- no postal code!"
            Exit Sub
         End If
      
         strName = Nz(lst.Column(2, intItem)) & _
            " " & Nz(lst.Column(3, intItem))
         Debug.Print "Name: " & strName
         strJobTitle = Nz(lst.Column(11, intItem))
         If strJobTitle <> "" Then
            strName = strName & vbCrLf & strJobTitle
         End If
         strAddress = Nz(lst.Column(5, intItem)) & vbCrLf & _
            Nz(lst.Column(6, intItem)) & ", " & _
            Nz(lst.Column(7, intItem)) & _
            "  " & Nz(lst.Column(8, intItem))
         Debug.Print "Address: " & strAddress
         strCountry = Nz(lst.Column(9, intItem))
         If strCountry <> "USA" Then
            strAddress = strAddress & vbCrLf & strCountry
         End If
         
         'Open a new letter based on the selected template
         'Using the single letter template for the letters, since the
         'current template opens the UserForm
         Application.Documents.Add strWordTemplate
         
         'Write information to Word custom document properties
         Set prps = Application.ActiveDocument.CustomDocumentProperties
         prps.Item("Name").Value = strName
         On Error Resume Next
         prps.Item("Salutation").Value = Nz(lst.Column(4, intItem))
         prps.Item("CompanyName").Value = Nz(lst.Column(10, intItem))
         prps.Item("Address").Value = strAddress
         prps.Item("TodayDate").Value = strLongDate
         
         'Check for existence of previously saved letter in documents folder,
         'and append an incremented number to save name if found
         strDocType = Application.ActiveDocument.BuiltInDocumentProperties(2)
         strSaveName = strDocType & " to " & _
            lst.Column(2, intItem) & " " & lst.Column(3, intItem)
         strSaveName = strSaveName & " on " & strShortDate & ".doc"
         intAnother = 2
         intSaveNameFail = True
         Do While intSaveNameFail
            strSaveNamePath = strDocsPath & strSaveName
            Debug.Print "Proposed save name and path: " _
               & vbCrLf & strSaveNamePath
            strTestFile = Nz(Dir(strSaveNamePath))
            Debug.Print "Test file: " & strTestFile
            If strTestFile = strSaveName Then
               Debug.Print "Save name already used: " & strSaveName
               
               'Create new save name with incremented number
               intSaveNameFail = True
               strSaveName = strDocType & " " & CStr(intAnother) & " to " & _
                  lst.Column(2, intAnother) & " " & lst.Column(3, intAnother)
               strSaveName = strSaveName & " on " & strShortDate & ".doc"
               strSaveNamePath = strDocsPath & strSaveName
               Debug.Print "New save name and path: " _
                  & vbCrLf & strSaveNamePath
               intAnother = intAnother + 1
            Else
               Debug.Print "Save name not used: " & strSaveName
               intSaveNameFail = False
            End If
         Loop
         
         'Update fields in Word document and save it
         With Application
            .Selection.WholeStory
            .Selection.Fields.Update
            .Selection.HomeKey Unit:=6
            .ActiveDocument.SaveAs strSaveName
         End With
      End If
   Next intItem
   
   Unload frmRetrieveData
   
ErrorHandlerExit:
   Exit Sub

ErrorHandler:
   MsgBox "Error No: " & Err.Number & "; Description: " & Err.Description
   Resume ErrorHandlerExit

End Sub




INQUEST-PP=macro
