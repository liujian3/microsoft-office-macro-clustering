Attribute VB_Name = "SaveToModule"

Sub SaveTo(vcmdRunReport As String)

If Sheets("Param").Range("ErrorCheckOn") = "True" Then
    On Error GoTo errHandle
End If
If Environ("RUNREPORTVAR") = "RunReport" Then
    On Error GoTo errHandle
End If

    Application.DisplayAlerts = False
    Dim WorkbookSaveToPath As String
    Dim DayOfMonthString As String
    Dim MonthOfYearString As String
    Dim DataAsOfDt As Date
    Dim MonthFolder As String
    Dim YearFolder As String
    Dim WorkbookSaveAs As String
    Dim Directory As String
    Dim NewDirectory
    Dim SaveIntoDateFolder As String
    Dim FilePath As String
    Dim FileSaveName As String
    Dim FileSaveNameUniqueElement As String

    SaveIntoDateFolder = Sheets("Param").Range("SaveIntoDateFolder")
    WorkbookSaveAs = Replace(Sheets("Param").Range("ExcelFileName"), " ", "") 'Left(ActiveWorkbook.Name, Len(ActiveWorkbook.Name) - 4)

    DataAsOfDt = Date


    'Following gets rid of trailing spaces which can cause problems -jt
    WorkbookSaveToPath = RTrim(Sheets("Param").Range("WorkBookSaveToPath"))
    'Following makes sure path ends in '\'
    If Right(WorkbookSaveToPath, 1) <> "\" Then WorkbookSaveToPath = WorkbookSaveToPath + "\"
    WorkbookSaveToPath = UCase(WorkbookSaveToPath)
    If Environ("REPORTING_FILESERVER_NAME") <> "" Then
        WorkbookSaveToPath = Replace(WorkbookSaveToPath, "\\CALCSCSDS01\SMTMG\ANALYTICS", UCase(Environ("REPORTING_FILESERVER_NAME")))
        WorkbookSaveToPath = Replace(WorkbookSaveToPath, "\\WKCMA042PAP\SMTMG\ANALYTICS", UCase(Environ("REPORTING_FILESERVER_NAME")))
    End If

    WorkbookSaveAs = Replace(Sheets("Param").Range("ExcelFileName"), " ", "") & "_" 'Left(ActiveWorkbook.Name, Len(ActiveWorkbook.Name) - 4)

    If (Day(DataAsOfDt)) < 10 Then
        DayOfMonthString = "0" & Day(DataAsOfDt)
    Else
        DayOfMonthString = Day(DataAsOfDt)
    End If

    If (Month(DataAsOfDt)) < 10 Then
        MonthOfYearString = "0" & Month(DataAsOfDt)
    Else
        MonthOfYearString = Month(DataAsOfDt)
    End If

    YearFolder = Year(DataAsOfDt)

    If (Month(DataAsOfDt)) < 10 Then
        MonthFolder = "0" & Month(DataAsOfDt)
    Else
        MonthFolder = Month(DataAsOfDt)
    End If

    If SaveIntoDateFolder = "YES" Then
        Directory = WorkbookSaveToPath & YearFolder & "-" & MonthFolder & "\"
    Else
        Directory = WorkbookSaveToPath
    End If

    FileSaveNameUniqueElement = ""
    If Environ("SAVE_PATH_WITH_RANDOM") = "Y" Then
        Randomize
        FileSaveNameUniqueElement = "_" + CStr(Round(99999999999# * Rnd, 0))
    End If

    If SaveIntoDateFolder = "YES" Then
        FilePath = WorkbookSaveToPath & YearFolder & "-" & MonthFolder
        FileSaveName = WorkbookSaveAs & Year(DataAsOfDt) & MonthOfYearString & DayOfMonthString & FileSaveNameUniqueElement & ".xlsm"

        WorkbookSaveToPath = WorkbookSaveToPath & YearFolder & "-" & MonthFolder & "\" & WorkbookSaveAs & Year(DataAsOfDt) & MonthOfYearString & DayOfMonthString & FileSaveNameUniqueElement & ".xlsm"
    Else
        FilePath = WorkbookSaveToPath
        FileSaveName = WorkbookSaveAs & Year(DataAsOfDt) & MonthOfYearString & DayOfMonthString & FileSaveNameUniqueElement & ".xlsm"

        WorkbookSaveToPath = WorkbookSaveToPath & WorkbookSaveAs & Year(DataAsOfDt) & MonthOfYearString & DayOfMonthString & FileSaveNameUniqueElement & ".xlsm"
    End If

    'MsgBox (Directory & " " & WorkbookSaveToPath)

    Sheets("Param").Visible = False

    Dim fs
    Set fs = CreateObject("Scripting.FileSystemObject")

    If fs.FolderExists(Directory) Then
    Else
        MkDir Directory
    End If

    Dim cnn1 As New ADODB.Connection
    Dim rs As New ADODB.Recordset
    Dim StrSql As String
    Dim ExcelType As String
    Dim strConn As String

    If Environ("PROCESSSERVERNAME") <> "" Then
        strConn = "driver={SQL Server Native Client 11.0};server=" & Environ("PROCESSSERVERNAME") & ";Trusted_Connection=Yes;database=" & Environ("PROCESSDBNAME")
    Else
        strConn = "driver={SQL Server Native Client 11.0};server=MtgME,15001;Trusted_Connection=Yes;database=WSGA"
    End If

    cnn1.ConnectionTimeout = 200
    cnn1.CommandTimeout = 300
    cnn1.Open strConn

    If Environ("RUNREPORTVAR") = "RunReport" Then
        StrSql = "SELECT Excel2003 FROM dbo.WSGA_sys_Process_Info Where Process_ID = " & CInt(Environ("PROCESS_ID"))
    Else
        StrSql = "SELECT Excel2003 FROM dbo.WSGA_sys_Process_Info Where Process_ID = " & Sheets("Param").Range("PrintProcessID")
    End If
    
    On Error Resume Next
    rs.Open StrSql, cnn1, adOpenForwardOnly, adLockReadOnly
    If Err.Number <> 0 Then
        Err.Clear
        ExcelType = "2007"
    ElseIf rs.EOF Then
        ExcelType = "2007"
    Else
        rs.MoveFirst
        If rs!Excel2003 Is Nothing Then
            ExcelType = "2007"
        ElseIf rs!Excel2003 = "Y" Then
            ExcelType = "2003"
        Else
            ExcelType = "2007"
        End If
    End If
    
    rs.Close
    If Err.Number <> 0 Then
        Err.Clear
    End If
    
    cnn1.Close
    Set rs = Nothing
    Set cnn1 = Nothing
    
    On Error GoTo 0
    If Sheets("Param").Range("ErrorCheckOn") = "True" Then
        On Error GoTo errHandle
    End If
    If Environ("RUNREPORTVAR") = "RunReport" Then
        On Error GoTo errHandle
    End If

    If ExcelType = "2003" Then
        WorkbookSaveToPath = Left(WorkbookSaveToPath, Len(WorkbookSaveToPath) - 1)
        FileSaveName = Left(FileSaveName, Len(FileSaveName) - 1)

        ActiveWorkbook.SaveAs Filename:=WorkbookSaveToPath, FileFormat _
           :=56, Password:="", WriteResPassword:="", ReadOnlyRecommended:= _
           True, CreateBackup:=False
    Else
        ActiveWorkbook.SaveAs Filename:=WorkbookSaveToPath, FileFormat _
            :=xlOpenXMLWorkbookMacroEnabled, Password:="", WriteResPassword:="", ReadOnlyRecommended:= _
            True, CreateBackup:=False
    End If
    

    Dim strMessage As String
    Dim LogFile  As String
    Dim FileNum As Integer

    If Environ("RUNREPORTVAR") = "RunReport" Then

        strmessge = "Starting: StorePathInSQL " & FilePath & " " & FileSaveName

        LogFile = Environ("FILEPATH") & "\" & Environ("LogName") & ".log"


        FileNum = FreeFile
        Open LogFile For Append As #FileNum
        Print #FileNum, strmessge

        SaveToModule.StorePathInSQL FilePath, FileSaveName

        strmessge = "Finished: StorePathInSQL " & FilePath & " " & FileSaveName
        Print #FileNum, strmessge
        Close #FileNum
   End If


'MsgBox "cmdRunReport is " & vcmdRunReport
    If Replace(Environ("RUNREPORTVAR"), """", "") = "RunReport" Then
        Dim wBook As Workbook

        For Each wBook In Workbooks
                wBook.Saved = True
         Next wBook

        Application.Quit
        ActiveWorkbook.Close 0
    End If
Application.DisplayAlerts = True

exitHere:
     Exit Sub
errHandle:
     Select Case Err.Number

        Case Else
ReportError:
            Dim ErrMessage As String
            ErrMessage = "Error:" & Err.Number & vbNewLine & Err.Description & vbNewLine & Now()
            strProcedureName = "SaveToModule"
            blnError = True
            Err.Clear
            modErrorHandler.ErrHandler ErrMessage, "SaveToModule"

     End Select

End Sub

Public Sub StorePathInSQL(FilePath As String, FileSaveName As String)

Dim cnn1 As New ADODB.Connection
Dim rs As New ADODB.Recordset
Dim SSN As String
Dim ConnectString As String

    If Environ("PROCESSSERVERNAME") <> "" Then
        ConnectString = "driver={SQL Server Native Client 11.0};server=" & Environ("PROCESSSERVERNAME") & ";Trusted_Connection=Yes;database=" & Environ("PROCESSDBNAME")
    Else
        ConnectString = "driver={SQL Server Native Client 11.0};server=MtgME,15001;Trusted_Connection=Yes;database=WSGA"
    End If

Dim Cmmd As ADODB.Command
Dim Param As ADODB.Parameter


cnn1.ConnectionTimeout = 200
cnn1.Open ConnectString

Set Cmmd = New ADODB.Command
Cmmd.ActiveConnection = cnn1
Cmmd.CommandType = adCmdStoredProc
Cmmd.CommandText = "dbo.sp_WSGA_sys_Process_File_Crt_ins"

Set Param = Cmmd.CreateParameter("Version", adInteger, adParamInput)
Cmmd.Parameters.Append Param
Cmmd.Parameters("Version").Value = 1

Set Param = Cmmd.CreateParameter("Process_ID", adInteger, adParamInput)
Cmmd.Parameters.Append Param
Cmmd.Parameters("Process_ID").Value = CInt(Environ("PROCESS_ID"))

Set Param = Cmmd.CreateParameter("File_Path", adVarChar, adParamInput, 1000)
Cmmd.Parameters.Append Param
Cmmd.Parameters("File_Path").Value = FilePath

Set Param = Cmmd.CreateParameter("File_Name", adVarChar, adParamInput, 100)
Cmmd.Parameters.Append Param
Cmmd.Parameters("File_Name").Value = FileSaveName

Set Param = Cmmd.CreateParameter("UpdateBy", adVarChar, adParamInput, 100)
Cmmd.Parameters.Append Param
Cmmd.Parameters("UpdateBy").Value = Environ("JOBTITLE")

Cmmd.Execute


' Close the connections and clean up.
Set Cmmd = Nothing
cnn1.Close
Set cnn1 = Nothing
Set rs = Nothing
Set cnnConn = Nothing

End Sub


Public Sub ReportDefs()

    On Error Resume Next
    Dim V As String
    V = Sheets("Param").Range("ReportDefs").Value
    If Err <> 0 Then
        Exit Sub
    End If
    
    On Error GoTo 0

    If ActiveWorkbook.Sheets("Param").Range("ReportDefs") <> "True" Then
        Exit Sub
    End If

    Dim X As Integer, Y As Integer
    Dim Pvts As Integer, P As Integer
    Dim Flds As Integer, F As Integer
    Dim strFlds As String
    
    strFlds = ""
    X = ActiveWorkbook.Sheets.Count
    
'   PIVOT TABLES
    For Y = 1 To X
        If Sheets(Y).Visible = True And Sheets(Y).Name <> "TOC" Then
            Pvts = Sheets(Y).PivotTables.Count
            For P = 1 To Pvts
                Flds = Sheets(Y).PivotTables(P).PivotFields.Count
                
                For F = 1 To Flds
                    If strFlds <> "" Then
                        strFlds = strFlds & ","
                    End If
                    strFlds = strFlds & Sheets(Y).PivotTables(P).PivotFields(F).Name
'                    If F <> Flds Then
'                        strFlds = strFlds & ","
'                    End If
                Next F
                
                Flds = Sheets(Y).PivotTables(P).PivotFormulas.Count
                
                For F = 1 To Flds
                    If strFlds <> "" Then
                        strFlds = strFlds & ","
                    End If
                    strFlds = strFlds & Sheets(Y).PivotTables(P).PivotFormulas(F).Name
'                    If F <> Flds Then
'                        strFlds = strFlds & ","
'                    End If
                Next F
            Next P
        End If
    Next Y

'    Debug.Print strFlds

'   FLAT TABLES
    Dim tbl As ListObject
    Dim ws As Worksheet
    Dim i, j As Single
    
    For Each ws In Worksheets
        For Each tbl In ws.ListObjects
            Debug.Print tbl.Name
            For j = 1 To tbl.Range.Columns.Count
                Debug.Print tbl.Range.Cells(1, j)
                strFlds = strFlds & "," & tbl.Range.Cells(1, j)
            Next j
        Next tbl
    Next ws

    Dim strSheet As String
    strSheet = Application.ActiveSheet.Name

    Dim sht As Worksheet
    On Error Resume Next
    Set sht = ActiveWorkbook.Sheets("Report Definitions")
    On Error GoTo 0
    If Not sht Is Nothing Then
        Application.DisplayAlerts = False
        sht.Delete
        Application.DisplayAlerts = True
    End If
   

    Sheets.Add After:=Sheets(Sheets.Count)
    Sheets(Sheets.Count).Select
    Sheets(Sheets.Count).Name = "Report Definitions"
    Sheets("Report Definitions").Select

    Range("A1").Select
    ActiveCell.FormulaR1C1 = "Report Definitions"
    With Selection.Font
        .Name = "Arial"
        .Size = 14
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontNone
        Selection.WrapText = False
    End With
    Range("A1:E1").Select
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ThemeColor = 4
        .TintAndShade = 0
        .Weight = xlThick
    End With
    
    Dim strCall As String
    strCall = "sp_ReportFieldDefs @FldList ='" & strFlds & "'"
    modCreateFlatReport.CreateFlatReport strCall, "A4", "True", "ReportDef"
    Range("A1").Select
    ActiveCell.FormulaR1C1 = "Report Definitions"
    
    Dim RngAddr As String
    RngAddr = Range("ReportDef").Address
    
    ActiveSheet.ListObjects.Add(xlSrcRange, Range(RngAddr), , xlYes).Name = _
        "Table_ReportDef"
    ActiveSheet.ListObjects("Table_ReportDef").TableStyle = "TableStyleMedium2"
    Columns("A:A").Select
    Selection.ColumnWidth = 41.57
    Columns("B:B").Select
    Selection.ColumnWidth = 125.86
    Columns("A:A").Select
    Range("Table_ReportDef[[#Headers],[Label]]").Activate
    With Selection
        .HorizontalAlignment = xlGeneral
        .VerticalAlignment = xlTop
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    Columns("B:B").Select
    Range("Table_ReportDef[[#Headers],[Definition]]").Activate
    With Selection
        .HorizontalAlignment = xlGeneral
        .VerticalAlignment = xlTop
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    Range("A1").WrapText = False
    Range("A2").Select


End Sub

Function ReturnProcessID() As Integer
    
    '*************************************************************************************
    ' START Create Variables
    '*************************************************************************************
    
    Dim rs As New ADODB.Recordset
    Dim cmd As New ADODB.Command
    Dim cnn1 As ADODB.Connection
    Dim prm As ADODB.Parameter
    Dim strConn As String
    Dim sSQL  As String
    
    On Error Resume Next
    Dim V As Integer
    V = Sheets("Param").Range("PrintProcessID").Value
    If Err <> 0 Then
        V = 0
    End If
    
    On Error GoTo 0
    
    If Environ("PROCESS_ID") <> "" Then
        ReturnProcessID = Environ("PROCESS_ID")
    ElseIf V <> 0 Then
        ReturnProcessID = V
    Else
        strConn = "driver={SQL Server Native Client 11.0};server=" & Sheets("Param").Range("SQLServerName").Value & ";Trusted_Connection=Yes;database=WSGA"
    
        Set cnn1 = New ADODB.Connection
        cnn1.ConnectionTimeout = 200
        cnn1.CommandTimeout = 300
        cnn1.Open strConn
        
        Dim sThisTemplateName As String
        Dim iTemplateNameUnderscoreIndex As Byte
        Dim iTemplateNameDotIndex As Byte
        Dim sTemplateNameStub As String
        iTemplateNameUnderscoreIndex = InStrRev(ThisWorkbook.Name, "_")
        iTemplateNameDotIndex = InStr(1, ThisWorkbook.Name, ".")
        sTemplateNameStub = Left(ThisWorkbook.Name, iTemplateNameDotIndex - 5)
        sSQL = "SELECT Process_ID FROM WSGA.dbo.sys_Process_def WHERE File_Path_Cmd LIKE '%" & sTemplateNameStub & "%" & Chr(39)
        rs.Open sSQL, cnn1, adOpenForwardOnly, adLockReadOnly
        If Not rs.EOF Then
            rs.MoveFirst
            ReturnProcessID = rs!process_id
        Else
            ReturnProcessID = 1000
        End If
        rs.Close
        Set rs = Nothing
    End If

    
    Set cmd = Nothing
    Set cnn1 = Nothing

End Function

Public Sub ReportEnhancements()

    On Error Resume Next
    Dim V As String
    V = Sheets("Param").Range("ShowEnhancementHx").Value
    If Err <> 0 Then
        Exit Sub
    End If
    
    On Error GoTo 0
    
    If ActiveWorkbook.Sheets("Param").Range("ShowEnhancementHx").Value <> True Then
        Exit Sub
    End If

    Dim X As Integer, Y As Integer
    Dim Pvts As Integer, P As Integer
    Dim Flds As Integer, F As Integer
    Dim strFlds As String
    

    Dim strSheet As String
    strSheet = Application.ActiveSheet.Name

    Dim sht As Worksheet
    On Error Resume Next
    Set sht = ActiveWorkbook.Sheets("Report Enhancements")
    On Error GoTo 0
    If Not sht Is Nothing Then
        Application.DisplayAlerts = False
        sht.Delete
        Application.DisplayAlerts = True
    End If

    Sheets.Add After:=Sheets(Sheets.Count)
    Sheets(Sheets.Count).Select
    Sheets(Sheets.Count).Name = "Report Enhancements"
    Sheets("Report Enhancements").Select

    Range("A1").Select
    ActiveCell.FormulaR1C1 = "Report Enhancements"
    With Selection.Font
        .Name = "Arial"
        .Size = 14
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontNone
    End With
    
    Dim PID As Integer
    PID = SaveToModule.ReturnProcessID()
    
    Dim strCall As String
    strCall = "sp_ReportEnhancementsHx @PID =" & PID
    modCreateFlatReport.CreateFlatReport strCall, "A4", "True", "ReportEnhance"
    Range("A1").Select
    ActiveCell.FormulaR1C1 = "Report Enhancements"
    
    Dim RngAddr As String
    RngAddr = Range("ReportEnhance").Address
    
    ActiveSheet.ListObjects.Add(xlSrcRange, Range(RngAddr), , xlYes).Name = _
        "Table_ReportEnhance"
    ActiveSheet.ListObjects("Table_ReportEnhance").TableStyle = "TableStyleMedium2"

    Columns("F:F").Select
    Selection.NumberFormat = "m/d/yyyy"
    Columns("B:F").Select
    Columns("B:F").EntireColumn.AutoFit
    Columns("A:A").Select
    Selection.ColumnWidth = 13.29
    Range("A3").Select
    Range(Selection, Selection.End(xlDown)).Select
    With Selection
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlBottom
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
    Range("A2").Select
End Sub
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboBox2, 17, 12, MSForms, ComboBox"
Attribute VB_Control = "ComboBox5, 6, 13, MSForms, ComboBox"
Attribute VB_Control = "ComboBox4, 5, 14, MSForms, ComboBox"
Attribute VB_Control = "ComboBox1, 2, 15, MSForms, ComboBox"
Attribute VB_Control = "CommandButton1, 1, 16, MSForms, CommandButton"

Private Sub ComboBox1_Change()
  '  Range("B5").Select
  '  Selection.Formula = ComboBox1.Value
End Sub

Private Sub ComboBox2_Change()
  '  Range("B4").Select
  '  Selection.Formula = ComboBox2.Value
End Sub

Private Sub ComboBox4_Change()
  '  Range("B6").Select
  '  Selection.Formula = ComboBox4.Value

End Sub

Private Sub ComboBox5_Change()
   ' Range("B7").Select
   ' Selection.Formula = ComboBox5.Value
End Sub

Public Sub CommandButton1_Click()
modRunGenerator.RunGenerator ("N")

DesignReport
        
If Sheets("Param").Range("SaveIntoNewFile").Value = "YES" Then
    SaveToModule.SaveTo (vcmdRunReport)
'    If blnError Then GoTo ReportError
End If



End Sub



Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "SheetTOC"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()
    ActiveWindow.ScrollRow = 1
End Sub
Attribute VB_Name = "SheetTOC1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()
    ActiveWindow.ScrollRow = 1
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Public vcmdRunReport As Variant
'Public blnError As Boolean, strProcedureName As String, strLogMessage As String, strStep As String, LogFileName As String

Private Sub Workbook_Open()


If Environ("RUNREPORTVAR") = "RunReport" Then

    Application.OnTime (Now + TimeValue("00:00:01")), "RefreshMe"
    Application.OnTime (Now + TimeValue("00:00:05")), "RunReportNow"
End If

End Sub



Attribute VB_Name = "c_Title"
Sub MainViews()
    Dim PT As PivotTable
    Dim LastRow As Long
    
    Sheets("MortgageConnect").Select

    Set PT = ActiveSheet.PivotTables("Pivot1")
    
    With PT.PivotFields("Metric_Num")
        .Orientation = xlRowField
        .Position = 1
    End With
    
    With PT.PivotFields("Metric_Name")
        .Orientation = xlRowField
        .Position = 2
    End With
    
    PT.AddDataField PT.PivotFields("Numerator"), "Sum of Numerator", xlSum
    With PT.PivotFields("Sum of Numerator")
        .Caption = "Numerator "
        .Function = xlSum
        .NumberFormat = "#,##0"
    End With
    
    PT.AddDataField PT.PivotFields("Denominator"), "Sum of Denominator", xlSum
    With PT.PivotFields("Sum of Denominator")
        .Caption = "Denominator "
        .Function = xlSum
        .NumberFormat = "#,##0"
    End With
    
    With PT.DataPivotField
        .Orientation = xlColumnField
        .Position = 1
    End With
    
    ' remove subtotal
    PT.PivotFields("Metric_Num"). _
        Subtotals = Array(False, False, False, False, False, False, False, False, False, False, _
        False, False)
    
    ' remove Grand Total
    PT.ColumnGrand = False
   
    Rows("5:5").EntireRow.Hidden = True
    Range("E6") = "Rate"
    Range("E7").FormulaR1C1 = "=If(RC[-1]<>"""",RC[-2]/RC[-1],"""")"
    Range("E7").NumberFormat = "0.00%"
    Range("E7").AutoFill Destination:=Range("E7:E13"), Type:=xlFillDefault
       
    With Range("E6:E13").Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Range("E6:E13").Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Range("E6:E13").Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Range("E6:E13").Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Range("E6:E13").Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Range("E6:E13").Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    Sheets("MortgageConnect").Select
    Range("A2").Select
    
End Sub


Attribute VB_Name = "modCreateFlatReport"
Sub CreateFlatReport(StoredProcName As String, Destination As String, vHeader As String, RangeName As String)
'*************************************************************************************
' START Create Variables
'*************************************************************************************
Dim cnn1 As New ADODB.Connection
Dim rs As New ADODB.Recordset
'Dim SSN As String
Dim ConnectString As String
'*************************************************************************************
' END Create Variables
'*************************************************************************************
If Sheets("Param").Range("ErrorCheckOn") = "True" Then
    On Error GoTo errHandle
End If
If Environ("RUNREPORTVAR") = "RunReport" Then
    On Error GoTo errHandle
End If


'*************************************************************************************
' START Create Flat Data Table
'*************************************************************************************
If Environ("REPORTINGSERVERNAME") <> "" Then

        cnn1.ConnectionString = "PROVIDER=SQLNCLI11;" & "DATA SOURCE=" & Environ("REPORTINGSERVERNAME") & ";Trusted_Connection=Yes;INITIAL CATALOG=" & Environ("REPORTINGDBNAME")
    Else
    If Sheets("Param").Range("SQLServerName").Value <> "SIMCRMSQL95B" And UCase(Sheets("Param").Range("SQLServerName").Value) <> "MtgME,15001" Then
        Dim DB As String
        
        If HasDatabaseNameRange() Then
            DB = Sheets("Param").Range("DatabaseName").Value
        Else
            DB = "WSGA"
        End If

            cnn1.ConnectionString = "PROVIDER=SQLNCLI11;DATA SOURCE=" & Sheets("Param").Range("SQLServerName").Value & ";Trusted_Connection=Yes;INITIAL CATALOG=" & DB
        Else
            cnn1.ConnectionString = "driver={SQL Server Native Client 11.0};server=MtgME,15001;Trusted_Connection=Yes;database=WSGA"
        End If
End If
        

cnn1.ConnectionTimeout = 200
cnn1.CommandTimeout = 0
cnn1.Open

'MsgBox "exec " & StoredProcName
StoredProcName = Replace(StoredProcName, "WSGA.dbo.", "dbo.")
rs.Open "exec " & StoredProcName, cnn1


With ActiveSheet.QueryTables.Add( _
        Connection:=rs, _
        Destination:=Range(Destination))
    .Name = RangeName
    .FieldNames = vHeader
    .RowNumbers = False
    .FillAdjacentFormulas = False
    .PreserveFormatting = True
    .RefreshOnFileOpen = False
    .BackgroundQuery = True
    .RefreshStyle = xlOverwriteCells
    .SavePassword = True
    .SaveData = True
    .AdjustColumnWidth = False
    .RefreshPeriod = 0
    .PreserveColumnInfo = True
    .Refresh BackgroundQuery:=False
End With

rs.Close
cnn1.Close
Set rs = Nothing
Set cnn1 = Nothing

'*************************************************************************************
' END Create Flat Data Table
'*************************************************************************************
ActiveSheet.Range("A1").Value = ActiveSheet.Range("A1").Value & Sheets("Param").Range("ReportTitle").Value

exitHere:
     Exit Sub
errHandle:
     Select Case Err.Number
    
        Case Else
            If Not IsEmpty(rs) Then Set rs = Nothing
            If Not IsEmpty(cnn1) Then Set cnn1 = Nothing
            Dim ErrMessage As String
            ErrMessage = "Error:" & Err.Number & vbNewLine & Err.Description & vbNewLine & Now()
            strProcedureName = "CreateFlatReport"
            blnError = True
            Err.Clear
            modErrorHandler.ErrHandler ErrMessage, "CreateFlatReport"

     End Select

End Sub


Attribute VB_Name = "modCreatePivot"
Sub CreatePivotReport(StoredProcName As String, Destination As String, RangeName As String)
'*************************************************************************************
' START Create Variables
'*************************************************************************************
Dim cnn1 As New ADODB.Connection
Dim rs As New ADODB.Recordset
Dim SSN As String
Dim ConnectString As String
'*************************************************************************************
' END Create Variables
'*************************************************************************************
If Sheets("Param").Range("ErrorCheckOn") = "True" Then
    On Error GoTo errHandle
End If
If Environ("RUNREPORTVAR") = "RunReport" Then
    On Error GoTo errHandle
End If

'*************************************************************************************
' START Create Pivot Table
'*************************************************************************************


If Environ("REPORTINGSERVERNAME") <> "" Then

        cnn1.ConnectionString = "PROVIDER=SQLNCLI11;" & "DATA SOURCE=" & Environ("REPORTINGSERVERNAME") & ";Trusted_Connection=Yes;INITIAL CATALOG=" & Environ("REPORTINGDBNAME")
    Else
    If Sheets("Param").Range("SQLServerName").Value <> "SIMCRMSQL95B" And UCase(Sheets("Param").Range("SQLServerName").Value) <> "MtgME,15001" Then
        Dim DB As String
        
        If HasDatabaseNameRange() Then
            DB = Sheets("Param").Range("DatabaseName").Value
        Else
            DB = "WSGA"
        End If

            cnn1.ConnectionString = "PROVIDER=SQLNCLI11;DATA SOURCE=" & Sheets("Param").Range("SQLServerName").Value & ";Trusted_Connection=Yes;INITIAL CATALOG=" & DB
        Else
            cnn1.ConnectionString = "driver={SQL Server Native Client 11.0};server=MtgME,15001;Trusted_Connection=Yes;database=WSGA"
        End If
End If
        
cnn1.ConnectionTimeout = 200
cnn1.CommandTimeout = 0
cnn1.Open

StoredProcName = Replace(StoredProcName, "WSGA.dbo.", "dbo.")
rs.Open "exec " & StoredProcName, cnn1

' Create a PivotTable cache and report.
Set objPivotCache = ActiveWorkbook.PivotCaches.Add( _
SourceType:=xlExternal)
Set objPivotCache.Recordset = rs
With objPivotCache
.CreatePivotTable TableDestination:=Range(Destination), TableName:=RangeName
End With
' Close the connections and clean up.
cnn1.Close
Set cnn1 = Nothing
Set rs = Nothing
Set cnnConn = Nothing
'*************************************************************************************
' END Create Pivot Table
'*************************************************************************************
ActiveSheet.Range("A1").Value = ActiveSheet.Range("A1").Value & Sheets("Param").Range("ReportTitle").Value

exitHere:
     Exit Sub
errHandle:
     Select Case Err.Number
    
        Case Else
ReportError:
            If Not IsEmpty(rs) Then Set rs = Nothing
            If Not IsEmpty(cnn1) Then Set cnn1 = Nothing
            If Not IsEmpty(cnnConn) Then Set cnnConn = Nothing
            Dim ErrMessage As String
            ErrMessage = "Error:" & Err.Number & vbNewLine & Err.Description & vbNewLine & Now()
            strProcedureName = "CreatePivot"
            blnError = True
            Err.Clear
            modErrorHandler.ErrHandler ErrMessage, "CreatePivot"
     End Select
End Sub

Public Function HasDatabaseNameRange() As Boolean
    
For Each Nm In ActiveWorkbook.Names
    If Nm.Name = "DatabaseName" Then
        HasDatabaseNameRange = True
        Exit Function
    End If
Next Nm

End Function

Attribute VB_Name = "modCreateWorkSheet"
Sub CreateNewWorksheet(vReportType, vDestinationSheet As String, vTemplateAlreadyCopied As String, vTabName As String)
'**********************************************************************************************
'START Create new worksheet from template
'**********************************************************************************************
'Dim vCnt As Integer
'Dim ws As Worksheet
If Sheets("Param").Range("ErrorCheckOn") = "True" Then
    On Error GoTo errHandle
End If
If Environ("RUNREPORTVAR") = "RunReport" Then
    On Error GoTo errHandle
End If

'vCnt = 0
'
'For Each ws In ActiveWorkbook.Worksheets
'    If Left(ws.Name, 8) = "Template" Then
'        vCnt = vCnt + 1
'    End If
'Next ws
'vCnt = vCnt + 1


    If vTemplateAlreadyCopied = "Y" Then
        Sheets(vTabName).Select
    ElseIf Sheets(vDestinationSheet).Visible = False Then
        Sheets(vDestinationSheet).Visible = True
        Sheets(vDestinationSheet).Copy Before:=Sheets(vDestinationSheet)
        Sheets(vDestinationSheet + " (2)").Select
        'vWkshtCnt = Sheets.Count
        Sheets(vDestinationSheet + " (2)").Name = vTabName ' vReportTabPart & vWkshtCnt - vCnt
        'Sheets("NewReport_" & vWkshtCnt - vCnt).Select
        Sheets(vTabName).Select
        Sheets(vDestinationSheet).Visible = False
    Else
        Sheets(vTabName).Select
    End If

'**********************************************************************************************
'END Create new worksheet from template
'**********************************************************************************************
exitHere:
     Exit Sub
errHandle:
     Select Case Err.Number
    
        Case Else
            Dim ErrMessage As String
            ErrMessage = "Error:" & Err.Number & vbNewLine & Err.Description & vbNewLine & Now()
            strProcedureName = "CreateWorkSheet"
            blnError = True
            Err.Clear
            modErrorHandler.ErrHandler ErrMessage, "CreateWorkSheet"
     End Select


End Sub

Attribute VB_Name = "modDeleteSheets"
Sub DeleteSheets()
Dim sht As Worksheet

'If Sheets("Param").Range("ErrorCheckOn") = "True" Then
'    On Error GoTo errHandle
'End If


Application.DisplayAlerts = False
    For Each sht In Sheets
      'MsgBox sht.Name
        If sht.Name <> "Param" And Left(sht.Name, 8) <> "Template" Then
        sht.Delete
        End If
    Next sht
Application.DisplayAlerts = True

exitHere:
     Exit Sub
errHandle:
     Select Case Err.Number
    
        Case Else
            Dim ErrMessage As String
            ErrMessage = "Error:" & Err.Number & vbNewLine & Err.Description & vbNewLine & Now()
            strProcedureName = "DeleteSheets"
            blnError = True
            Err.Clear
            modErrorHandler.ErrHandler ErrMessage, "DeleteSheets"
      End Select
End Sub

Attribute VB_Name = "modDesign"
Sub DesignReport()
If Sheets("Param").Range("ErrorCheckOn") = "True" Then
    On Error GoTo errHandle
End If
If Environ("RUNREPORTVAR") = "RunReport" Then
    On Error GoTo errHandle
End If
strStep = "Starting Report Design"

MainViews

If Sheets("Param").Range("ApplyStdFormat").Value = True Then
    RunStandardFormatModules
End If

Sheets("MortgageConnect").Range("A1") = "PostSale Title Vendor ScoreCard - MortgageConnect"
'Sheets("Summary").Range("A1") = "PostSale Title Vendor ScoreCard - MortgageConnect Summary"

exitHere:
     Exit Sub
errHandle:
     Select Case Err.Number
    
        Case Else
           Dim ErrMessage As String
            ErrMessage = "Error:" & Err.Number & vbNewLine & Err.Description & vbNewLine & Now()
            strProcedureName = "DesignReport"
            blnError = True
            Err.Clear
            modErrorHandler.ErrHandler ErrMessage, "DesignReport"

     End Select
End Sub

Public Sub RefreshMe()

Dim strFileName As String
Dim PR(20) As String
Dim intFileNum As Integer
Dim intCount As Integer
Dim strRecordData As String
Dim FileSpec As String
Dim VBbproj As Object
Set vbproj = ThisWorkbook.VBProject


strFileName = "C:\CALCSCTF01_WSGAnalytics\Production\Common\Automation\VBA\ModulesToImport.txt"

    If Not Dir(strFileName, vbDirectory) = vbNullString Then
        intFileNum = FreeFile
        intCount = 1
        Open strFileName For Input As #intFileNum
        Do Until EOF(intFileNum) Or intCount > 20
            Input #intFileNum, strRecordData
            PR(intCount) = strRecordData
            Debug.Print PR(intCount)
            
            On Error Resume Next
            vbproj.VBComponents(PR(intCount)).Name = CStr(PR(intCount) & "Old")
            If Err.Number <> 0 Then
                Err.Clear
            End If
            
            vbproj.VBComponents.Remove vbproj.VBComponents(CStr(PR(intCount) & "Old"))
            If Err.Number <> 0 Then
                Err.Clear
            End If
            On Error GoTo 0
            
            FileSpec = "C:\CALCSCTF01_WSGAnalytics\Production\Common\Automation\VBA\" & PR(intCount) & ".bas"
            vbproj.VBComponents.Import FileSpec
            
            intCount = intCount + 1
        Loop
        Close #intFileNum
        
        RefreshMe2
    
    End If
    
    
    
    
End Sub

Public Sub RefreshMe2()

Dim strFileName As String
Dim PR(20) As String
Dim intFileNum As Integer
Dim intCount As Integer
Dim strRecordData As String
Dim FileSpec As String
Dim VBbproj As Object
Set vbproj = ThisWorkbook.VBProject


strFileName = "C:\CALCSCTF01_WSGAnalytics\Production\Common\Automation\VBA\FormatModulesToImport.txt"

    If Not Dir(strFileName, vbDirectory) = vbNullString Then
        intFileNum = FreeFile
        intCount = 1
        Open strFileName For Input As #intFileNum
        Do Until EOF(intFileNum) Or intCount > 20
            Input #intFileNum, strRecordData
            PR(intCount) = strRecordData
            Debug.Print PR(intCount)
            
            On Error Resume Next
            vbproj.VBComponents(PR(intCount)).Name = CStr(PR(intCount) & "Old")
            If Err.Number <> 0 Then
                Err.Clear
            End If
            
            vbproj.VBComponents.Remove vbproj.VBComponents(CStr(PR(intCount) & "Old"))
            If Err.Number <> 0 Then
                Err.Clear
            End If
            On Error GoTo 0
            
            FileSpec = "C:\CALCSCTF01_WSGAnalytics\Production\Common\Automation\VBA\" & PR(intCount) & ".bas"
            vbproj.VBComponents.Import FileSpec
            
            intCount = intCount + 1
        Loop
        Close #intFileNum
    
    End If
End Sub


Public Sub RunReportNow()
Dim RUNREPORTVAR As String, FilePath As String
Dim REPORTINGSERVERNAME As String
Dim LogFile As String, LogFileName As String


FilePath = Replace(Environ("FILEPATH"), """", "")
LogFile = Replace(Environ("LogName"), """", "")
LogFileName = FilePath & "\" & LogFile & ".log"
Application.DisplayAlerts = False

RUNREPORTVAR = Replace(Environ("RUNREPORTVAR"), """", "")
REPORTINGSERVERNAME = Environ("REPORTINGSERVERNAME")

If RUNREPORTVAR = "RunReport" Then
        vcmdRunReport = "Y"
        Sheets("Param").Range("SQLServerName").Value = REPORTINGSERVERNAME
        
        On Error GoTo 0
        
        modRunGenerator.RunGenerator (cmdRunReport)
        
        DesignReport
'        If blnError Then GoTo ReportError
        
        If Sheets("Param").Range("SaveIntoNewFile").Value = "YES" Then
            SaveToModule.SaveTo (vcmdRunReport)
'            If blnError Then GoTo ReportError
        End If
End If
RUNREPORTVAR = ""

exitHere:
        Application.DisplayAlerts = True
     Exit Sub
           

errHandle:
     Select Case Err.Number
            'Nothing  -  this is to handle expected error numbers differently
        Case Else
ReportError:
            Dim ErrMessage As String
            ErrMessage = "Error:" & Err.Number & vbNewLine & Err.Description & vbNewLine & Now()
            strProcedureName = "ThisWorkbook"
            blnError = True
            Err.Clear
            modErrorHandler.ErrHandler ErrMessage, "ThisWorkbook"

     End Select

End Sub

Public Sub Reset()
    Sheets("Param").Visible = True
    DeleteSheets
End Sub
Attribute VB_Name = "modErrorHandler"
Public vcmdRunReport As Variant
Public blnError As Boolean, strProcedureName As String, strLogMessage As String, strStep As String, LogFileName As String


Public Sub ErrHandler(ErrString As String, ModName As String)
    
    Dim strMessage As String
    Dim LogFile  As String
    Dim FileNum As Integer
    
    strmessge = "Error:" & ErrString & vbNewLine & Now() & vbNewLine & ModName & vbNewLine
    
    If Environ("FILEPATH") <> "" Then
        LogFile = Environ("FILEPATH") & "\" & Environ("LogName") & ".log"
    Else
        LogFile = Sheets("Param").Range("WorkbookSaveToPath").Value & "\" & Sheets("Param").Range("ExcelFileName").Value & ".log"
    End If
    Debug.Print LogFile

    FileNum = FreeFile
    Open LogFile For Append As #FileNum
    Print #FileNum, "Excel Error"
    Print #FileNum, ErrString
    Print #FileNum, "Procedure- " & ModName
    Print #FileNum, strStep
    Close #FileNum
    
    Err.Clear
    
    Application.Quit
    ActiveWorkbook.Close 0
    
    
    
End Sub

Attribute VB_Name = "modRunGenerator"
Sub RunGenerator(vcmdRunReport As String)

    Doevents

If Sheets("Param").Range("ErrorCheckOn") = "True" Then
    On Error GoTo errHandle
End If
If Environ("RUNREPORTVAR") = "RunReport" Then
    On Error GoTo errHandle
End If

'*************************************************************************************
' START Delete Sheets
'*************************************************************************************
If Sheets("Param").Range("DeleteExistingTabsYN").Value = "YES" Then
    modDeleteSheets.DeleteSheets
    If blnError Then GoTo ReportError

End If
'*************************************************************************************
' END Delete Sheets
'*************************************************************************************

SetPrinterToPDFWriter

get_report_path

'*************************************************************************************
' START Call Report Creation Sub
'*************************************************************************************
Dim i As Integer
i = 1
While i <= Sheets("Param").Range("StoredProcCnt").Value

modCreateWorkSheet.CreateNewWorksheet Sheets("Param").Range("ReportType" + CStr(i)).Value, Sheets("Param").Range("DestinationSheet" + CStr(i)).Value, Sheets("Param").Range("TemplateAlreadyCopied" + CStr(i)).Value, Sheets("Param").Range("TabName" + CStr(i)).Value
If blnError Then GoTo ReportError

ActiveSheet.Range("A2").Value = "As of " & Format(Now(), "mm/dd/yyyy")
If Sheets("Param").Range("ReportType" + CStr(i)).Value = "Flat" Then
    modCreateFlatReport.CreateFlatReport Sheets("Param").Range("StoredProcName" + CStr(i)).Value, Sheets("Param").Range("Destination" + CStr(i)).Value, Sheets("Param").Range("Header" + CStr(i)).Value, Sheets("Param").Range("RangeName" + CStr(i)).Value
    If blnError Then GoTo ReportError
Else
    modCreatePivot.CreatePivotReport Sheets("Param").Range("StoredProcName" + CStr(i)).Value, Sheets("Param").Range("Destination" + CStr(i)).Value, Sheets("Param").Range("RangeName" + CStr(i)).Value
    If blnError Then GoTo ReportError
End If

i = i + 1
Wend
'MsgBox "Done With Report Loop"
'*************************************************************************************
' END Call Pivot Creation Sub
'*************************************************************************************


'*************************************************************************************
' START design pivot table
'*************************************************************************************

'*************************************************************************************
' END Save To Check
'*************************************************************************************
SaveToModule.ReportDefs
SaveToModule.ReportEnhancements

exitHere:
             
     Exit Sub

errHandle:
     Select Case Err.Number
    
        Case Else
ReportError:
            Dim ErrMessage As String
            ErrMessage = "Error:" & Err.Number & vbNewLine & Err.Description & vbNewLine & Now()
            strProcedureName = "RunGenerator"
            blnError = True
            Err.Clear
            modErrorHandler.ErrHandler ErrMessage, "Run Generator"
     End Select



End Sub


Public Sub SetPrinterToPDFWriter()

    Debug.Print Application.ActivePrinter

    Dim i As Integer
    For i = 0 To 10
    On Error Resume Next ' ignore printing errors
     
     Application.ActivePrinter = "PDF Writer on Ne" & Format$(i, "00") & ":"
       'Exit if we succeded
       If Err.Number = 0 Then
            Exit For
        Else
            Err.Clear
        End If
    Next i

    Debug.Print Application.ActivePrinter
    
End Sub

Public Sub RunReport()

On Error GoTo errHandle

Dim RUNREPORTVAR As String
Dim REPORTINGSERVERNAME As String

Application.DisplayAlerts = False

RUNREPORTVAR = Replace(Environ("RUNREPORTVAR"), """", "")
REPORTINGSERVERNAME = Environ("REPORTINGSERVERNAME")

If RUNREPORTVAR = "RunReport" Then
        vcmdRunReport = "Y"
        Sheets("Param").Range("SQLServerName").Value = REPORTINGSERVERNAME
        
        
        modRunGenerator.RunGenerator (cmdRunReport)
        
        DesignReport
'        If blnError Then GoTo ReportError
        
        If Sheets("Param").Range("SaveIntoNewFile").Value = "YES" Then
            SaveToModule.SaveTo (vcmdRunReport)
'            If blnError Then GoTo ReportError
        End If
End If
RUNREPORTVAR = ""

exitHere:
        Application.DisplayAlerts = True
     Exit Sub
           

errHandle:
     Select Case Err.Number
            'Nothing  -  this is to handle expected error numbers differently
        Case Else
ReportError:
            Dim ErrMessage As String
            ErrMessage = "Error:" & Err.Number & vbNewLine & Err.Description & vbNewLine & Now()
            strProcedureName = "ThisWorkbook"
            blnError = True
            Err.Clear
            modErrorHandler.ErrHandler ErrMessage, "ThisWorkbook"

     End Select

End Sub




' get_report_path() function
' Written by Christopher Mahan
' From September 1 to September 11 2017
' The purpose of this function is to fetch the function name from the WSGA database,
' from stored procedure sp_report_path_lookup


Sub get_report_path()


    Dim cnn1_path_lookup As New ADODB.Connection
    Dim rs_path_lookup As New ADODB.Recordset
    Dim StrSql_path_lookup As String
    Dim account_name_path_lookup As String
    Dim excel_signature_path_lookup As String
    Dim process_id_path_lookup As String
    Dim strConn_path_lookup As String
    Dim process_id As String
    Dim process_id_valid As Boolean

    On Error GoTo errHandle
    Application.DisplayAlerts = False

    process_id_valid = False
    
    'retrieve process id
    'process_id = Sheets("Param").Range("PrintProcessID").Value
    ' this uses the functino ReturnProcessID from SaveToModule
    process_id = SaveToModule.ReturnProcessID()

    ' check whether process id is valid
    If (process_id <> "") Then
        If (IsNumeric(process_id)) Then
            If Int(process_id) > 0 Then
                process_id_valid = True
            End If
        End If
    End If

    

    If (process_id_valid) Then
        process_id_path_lookup = Int(process_id)
        account_name_path_lookup = Environ$("username")


        If Environ("PROCESSSERVERNAME") <> "" Then
            strConn_path_lookup = "driver={SQL Server Native Client 11.0};server=" & Environ("PROCESSSERVERNAME") & ";Trusted_Connection=Yes;database=" & Environ("PROCESSDBNAME")
        Else
            strConn_path_lookup = "driver={SQL Server Native Client 11.0};server=MtgME,15001;Trusted_Connection=Yes;database=WSGA"
        End If



        excel_signature_path_lookup = "test_signature"

        cnn1_path_lookup.ConnectionTimeout = 200
        cnn1_path_lookup.CommandTimeout = 300
        cnn1_path_lookup.Open strConn_path_lookup

        StrSql_path_lookup = "exec sp_report_path_lookup"

        Dim cmd As ADODB.Command
        Dim Param As ADODB.Parameter
        
        Set cmd = New ADODB.Command
        cmd.ActiveConnection = cnn1_path_lookup
        cmd.CommandType = adCmdStoredProc
        cmd.CommandText = "sp_report_path_lookup"
        
        Set Param = cmd.CreateParameter("@PROCESS_ID", adInteger, adParamInput)
        cmd.Parameters.Append Param
        cmd.Parameters("@PROCESS_ID").Value = process_id_path_lookup
        
        Set Param = cmd.CreateParameter("@ACCOUNT_NAME", adChar, adParamInput, 1000)
        cmd.Parameters.Append Param
        cmd.Parameters("@ACCOUNT_NAME").Value = account_name_path_lookup
        
        Set Param = cmd.CreateParameter("@EXCEL_TEMPLATE_SIGNATURE", adChar, adParamInput, 1000)
        cmd.Parameters.Append Param
        cmd.Parameters("@EXCEL_TEMPLATE_SIGNATURE").Value = excel_signature_path_lookup
        
        Set param_report_id = cmd.CreateParameter("@REPORT_ID", adInteger, adParamOutput, adParamReturnValue)
        cmd.Parameters.Append param_report_id
        
        Set param_report_path_name = cmd.CreateParameter("@REPORT_PATH_NAME", adChar, adParamOutput, 1000, adParamReturnValue)
        cmd.Parameters.Append param_report_path_name
        
        
        Set param_report_save_path = cmd.CreateParameter("@REPORT_SAVE_PATH", adChar, adParamOutput, 1000, adParamReturnValue)
        cmd.Parameters.Append param_report_save_path

        cmd.Execute

        returned_report_id = param_report_id
        returned_report_path_name = param_report_path_name
        returned_report_save_path = RTrim(param_report_save_path)
        
        
        Set cmd = Nothing
        cnn1_path_lookup.Close
        Set cnn1_path_lookup = Nothing
        Set rs = Nothing
        Set cnnConn = Nothing
        
        'Debug.Print "returned_report_id " & returned_report_id
        'Debug.Print "r " & returned_report_path_name
        'Debug.Print "r " & returned_report_save_path

        If (returned_report_save_path <> "use WorkbookSaveToPath in param") Then
            Sheets("Param").Range("WorkbookSaveToPath").Value = returned_report_save_path
            Set fso = CreateObject("Scripting.FileSystemObject")
            'Debug.Print("Folder exists" & fso.FolderExists(returned_report_save_path))
            If Not fso.FolderExists(returned_report_save_path) Then
                fso.CreateFolder (returned_report_save_path)
            End If
        End If
    End If

exitHere:
    Application.DisplayAlerts = True
    Exit Sub

errHandle:
    Select Case Err.Number
        'Nothing  -  this is to handle expected error numbers differently
        Case Else
ReportError:
            Dim ErrMessage As String
            ErrMessage = "Error:" & Err.Number & vbNewLine & Err.Description & vbNewLine & Now()
            strProcedureName = "ThisWorkbook"
            blnError = True
            Err.Clear
            modErrorHandler.ErrHandler ErrMessage, "RunGenerator.get_report_path"
    End Select

End Sub
Attribute VB_Name = "modStdFormat_FlatTab"
Option Explicit

Sub AutoFitFlatFileRows(ColumnLetter)
'Set AutoFit for a column

    Columns(ColumnLetter).WrapText = True
    Columns(ColumnLetter).EntireRow.AutoFit
    Range("A1").WrapText = False
    
End Sub

Function HideFlatFileAutoFilter()
'This function hides the AutoFilter

    Range("A6").Select
    If Not ActiveSheet.AutoFilter Is Nothing Then
        Selection.AutoFilter
    End If
    
End Function

Function ShowFlatFileAutoFilter()
'This function shows the AutoFilter

    Range("A6").Select
    If Not ActiveSheet.AutoFilter Is Nothing Then
'       Selection.AutoFilter
    Else
        Selection.AutoFilter
    End If
End Function

Sub FormatFlatFileDataColumn(ColumnLabel, Format)
'This procedure format column data

    Dim iHeaderColumnNumber As Integer

    iHeaderColumnNumber = ReturnFlatFileColumnNumberFromHeaderName(ColumnLabel)
    Columns(iHeaderColumnNumber).NumberFormat = Format

End Sub

Function ReturnFlatFileColumnNumberFromHeaderName(ColumnLabel)
'This function returns the column number form header name

    Range("A3").Select
    
    On Error Resume Next
    
    Cells.Find(What:=ColumnLabel, After:=ActiveCell, LookIn:=xlFormulas, LookAt:=xlWhole, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False, SearchFormat:=False).Activate

    ReturnFlatFileColumnNumberFromHeaderName = ActiveCell.Column

End Function

Sub AddFlatFileListObject(SheetName)
'This procedure formats the grid

    Dim myWorksheetLists As ListObjects
    On Error Resume Next
    Range("A6").Select
    Set myWorksheetLists = Worksheets(SheetName).ListObjects.Add
    Range("A2").Select
    
End Sub

Sub CenterFlatFileSheet(SeedAddress)
'This procedure sets alignment to center at seed address

    With Range(SeedAddress).CurrentRegion
        .HorizontalAlignment = xlCenter
    End With
    
End Sub

Sub AddGridLinesToFlatFileSheet(SeedAddress)
'This procedure add grid lines at seed address

    With Range(SeedAddress).CurrentRegion.Borders
        .LineStyle = xlContinuous
        .Weight = xlThin
    End With
    
End Sub

Sub AddBordersToFlatFileSheet(Address)
'This procedure add borders at address
    
'   Range("A6:B20").Select
    Range(Address).Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    Range("A2").Select
End Sub


Sub RemoveUnusedRowColor(HeaderRow)
'This procedure removes unused row color

    Dim LastDataColumnNumber, LastSpreadsheetColumnNumber As Integer
    LastDataColumnNumber = Range("A" & HeaderRow).End(xlToRight).Column
    LastSpreadsheetColumnNumber = Cells(HeaderRow, LastDataColumnNumber + 1).End(xlToRight).Column

    Range(Cells(HeaderRow, LastDataColumnNumber + 1), Cells(HeaderRow, LastSpreadsheetColumnNumber)).Interior.ColorIndex = 0

End Sub


Private Sub FormatLoanLevelDataColumns()
'This procedure formats data columns

    Dim iHeaderColumnNumber As Integer
    
    iHeaderColumnNumber = ReturnColumnNumberFromHeaderName("HUDLetterDt")
    Columns(iHeaderColumnNumber).NumberFormat = "mm/dd/yyyy"

    iHeaderColumnNumber = ReturnColumnNumberFromHeaderName("HUDLetterRcvdDt")
    Columns(iHeaderColumnNumber).NumberFormat = "mm/dd/yyyy"

    iHeaderColumnNumber = ReturnColumnNumberFromHeaderName("SysEntryMonDt")
    Columns(iHeaderColumnNumber).NumberFormat = "mm/dd/yyyy"

    iHeaderColumnNumber = ReturnColumnNumberFromHeaderName("CalcLoss")
    Columns(iHeaderColumnNumber).NumberFormat = "$#,##0.00"

End Sub

Private Sub CenterColumns(StartRowNumber, ColumnHeadingName)
'This procedure centers columns

    Const START_ROW_NUMBER As Integer = 10
    Dim iHeaderColumnNumber As Integer
    
    iHeaderColumnNumber = ReturnColumnNumberFromHeaderName(ColumnHeadingName)

    Range(Cells(StartRowNumber, iHeaderColumnNumber), Cells(6000, iHeaderColumnNumber)).HorizontalAlignment = xlCenter

    iHeaderColumnNumber = ReturnColumnNumberFromHeaderName(ColumnHeadingName)
    Range(Cells(StartRowNumber, iHeaderColumnNumber), Cells(6000, iHeaderColumnNumber)).HorizontalAlignment = xlCenter
    
    iHeaderColumnNumber = ReturnColumnNumberFromHeaderName(ColumnHeadingName)
    Range(Cells(StartRowNumber, iHeaderColumnNumber), Cells(6000, iHeaderColumnNumber)).HorizontalAlignment = xlCenter

End Sub

Function ReturnColumnNumberFromHeaderName(HeaderName)
'This function returns column number header name

    Range("A3").Select
    
    On Error Resume Next
    
    Cells.Find(What:=HeaderName, After:=ActiveCell, LookIn:=xlFormulas, LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False, SearchFormat:=False).Activate

    ReturnColumnNumberFromHeaderName = ActiveCell.Column

End Function
Attribute VB_Name = "modStdFormat_Main"
Public RptTitle As String
Public RptDescr As String


Sub RunStandardFormatModules()
'This procedure is run from the Param sheet and placed at the end of all the macros which create the tabs.
    
    Application.ScreenUpdating = False
        GetReportName
        LoopAllWorksheets
        TabSpecificFormatting
'        HideParamSheet
            Sheets("Param").Visible = xlSheetHidden
        RenameAndHideOldTOC
        CopyNewTOC
        TOC_Hyperlinks
        FormatTOCHyperlinkGrid
        AddReportProducedOnDate
        AddReportDataAsOfDate
        DoTOCPageSetup
        PopulateTOC
        ActiveWorkbook.Sheets("TOC").Range("ReportType").WrapText = True
        ChangeTOC_A1
        CustomizeForOneReportSheet
        CreateEmailToHyperlink
    Application.ScreenUpdating = True

End Sub

Sub LoopAllWorksheets()

    Dim iSheetIndex As Integer
    Dim strProcedureName As String
    Dim blnError As Boolean
    Dim modErrorHandler
    Dim ws As Worksheet
    
    If ActiveWorkbook.Sheets("Param").Range("ErrorCheckOn") = "True" Then
'       On Error GoTo errHandle
    End If
    
    Application.StatusBar = False
    
    iSheetIndex = 1
    
    For Each ws In ActiveWorkbook.Worksheets
        If InStr(1, ws.Name, "Param") = 0 Then
            If InStr(1, ws.Name, "TOC") = 0 Then
                If InStr(1, LCase(ws.Name), "template") = 0 Then
                    If ws.Visible = xlSheetVisible Then
                        ws.Activate

                If Application.WorksheetFunction.CountA(ws.UsedRange.Cells) > 0 Then

                        'HideGridLines
                            ActiveWindow.DisplayGridlines = False
                        MakeWkshtRows3And4Blank
                        'CreateYesterdaysDateInA2
                            Dim dToday As Date
                            dToday = Format(Now, "mm/dd/yyyy")
                            dToday = dToday - 1
                            ActiveSheet.Range("A2").Value = "Data as of " & Format(dToday, "mm/dd/yyyy")
                            

                        Dim PID As Integer
                        PID = GetProcessID()

                        If PID <> 4248 Then
                            FormatPivots
                        End If

                        If PID <> 2317 And PID <> 4248 Then
                            FormatFlats
                        End If
                        

                        ActiveSheetPrintSetUpNew
                        NoTruncateTxt
                        FormatA1
                        TabTitle
                        A1BlueLine
                        GenericPageSetup
                        ActiveSheet.DisplayPageBreaks = False
                        ActiveWindow.ScrollRow = 1
                        ActiveWindow.ScrollColumn = 1
                        Range("A2").Select
                        
                        If ActiveSheet.PivotTables.Count > 0 Then
                            ActiveSheet.PivotTables(1).HasAutoFormat = False
                            ActiveSheet.PivotTables(1).HasAutoFormat = True
                        End If
                        
                        If ActiveSheet.ListObjects.Count > 0 Then
                            ActiveSheet.ListObjects(1).Range.Columns(1).AutoFit
                        End If
                        
                        Application.StatusBar = iSheetIndex & " " & ws.Name
                        iSheetIndex = iSheetIndex + 1
                End If
                    
                    End If
                End If
            End If
        End If
    Next ws
    
    ActiveWorkbook.Sheets(1).Activate
    Application.StatusBar = False

exitHere:
     Exit Sub
errHandle:
     Select Case Err.Number
    
        Case Else
ReportError:
            Dim ErrMessage As String
            ErrMessage = "Error:" & Err.Number & vbNewLine & Err.Description & vbNewLine & Now()
            strProcedureName = "LoopWorksheetsMain"
            blnError = True
            Err.Clear
            modErrorHandler.ErrHandler ErrMessage, "LoopWorksheetsMain"

     End Select

    Application.StatusBar = False
    Application.ScreenUpdating = True
    
End Sub

Sub MakeWkshtRows3And4Blank()
    Dim sCellA3, sCellA4, sCellA5 As String
    Dim iRow3, iRow4, iRow5 As Integer

    iRow3 = WorksheetFunction.CountA(Range("A3:Z3"))

    If iRow3 > 0 Then Rows(3).Insert Shift:=xlDown

    iRow4 = WorksheetFunction.CountA(Range("A4:Z4"))

    If iRow4 > 0 Then Rows(4).Insert Shift:=xlDown

    iRow5 = WorksheetFunction.CountA(Range("A5:Z15"))

    If iRow5 > 0 Then
        iRow5 = WorksheetFunction.CountA(Range("A5:Z5"))
        If iRow5 = 0 Then

            Do Until iRow5 > 0
                Rows(5).Delete Shift:=xlUp
                iRow5 = WorksheetFunction.CountA(Range("A5:Z5"))
            Loop
        End If
    End If

End Sub

Sub FormatA1()

    With Range("A1")
        With .Font
            .Name = "Arial"
            .Size = 15
            .Bold = True
            .ColorIndex = 3 'Red
        End With
    End With
    Range("A1").WrapText = False

End Sub

Sub TabTitle()
    Dim sNewA1Value, sReportTitle, sTabName As String

    sTabName = ActiveSheet.Name

    sNewA1Value = Trim(RptTitle) & " - " & Trim(sTabName)
    Range("A1") = sNewA1Value
'   Range("A1") = ReturnNoCamelCase(ReturnNoUnderScores(sNewA1Value))
'   Range("A1") = RemoveMultiSpaces(Range("A1"))
End Sub

Sub A1BlueLine()

    Range("A1:Z1").Borders(xlEdgeBottom).LineStyle = xlNone

    Dim Title As String
    Dim L As Integer
    Dim NeededWidth As Double
    Dim WidthSoFar As Double
    Dim X As Integer
    Dim TableName As String
    Dim TableLastCol As Integer
    
    Title = Range("A1").Text
    L = Len(Title)
    NeededWidth = L * 1.3
    
    WidthSoFar = 0
    For X = 1 To 25
        WidthSoFar = WidthSoFar + ActiveSheet.Cells(1, X).ColumnWidth
        If WidthSoFar >= NeededWidth Then
            Exit For
        End If
    Next X
    
    If ActiveSheet.PivotTables.Count > 0 Then
        TableName = ActiveSheet.PivotTables(1).Name
        TableLastCol = PivotLastCol(TableName)
    Else
        TableLastCol = FindLastColumn()
    End If
    
    If TableLastCol > X Then
        X = TableLastCol
    End If
    
    With Range(Cells(1, 1), Cells(1, X)).Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ThemeColor = 5
        .TintAndShade = 0
        .Weight = xlThick
    End With

End Sub

Public Function PivotLastCol(TN As String) As Integer

    Dim StartColumn As Integer
    Dim StartRow As Integer
    Dim NumCols As Integer
    Dim NumRows As Integer
    
    StartColumn = ActiveSheet.PivotTables(TN).TableRange2.Column
    StartRow = ActiveSheet.PivotTables(TN).TableRange2.Row
    NumCols = ActiveSheet.PivotTables(TN).TableRange2.Columns.Count
    NumRows = ActiveSheet.PivotTables(TN).TableRange2.Rows.Count
    
'    ActiveSheet.Range(Cells(StartRow + NumRows - 1, StartColumn), Cells(StartRow + NumRows - 1, StartColumn + NumCols - 1)).Select
    PivotLastCol = StartColumn + NumCols - 1
    
End Function

Public Function FindLastColumn() As Integer

Dim LastColumn As Integer

    If WorksheetFunction.CountA(Cells) > 0 Then
        LastColumn = Cells.Find(What:="*", After:=[A1], SearchOrder:=xlByColumns, SearchDirection:=xlPrevious).Column
        FindLastColumn = LastColumn
    End If

End Function

Sub GenericPageSetup()
    
    Dim cnn1 As New ADODB.Connection
    Dim rs As New ADODB.Recordset
    Dim StrSql As String, strConn As String
    Dim PB As String
    Dim PID As Integer
    PID = GetProcessID()
    
    If Environ("PROCESSSERVERNAME") <> "" Then
        strConn = "PROVIDER=SQLNCLI11;DATA SOURCE=" & Environ("PROCESSSERVERNAME") & ";Trusted_Connection=Yes;INITIAL CATALOG=" & Environ("PROCESSDBNAME")
    Else
        strConn = "PROVIDER=SQLNCLI11;DATA SOURCE=MtgME,15001;Trusted_Connection=Yes;INITIAL CATALOG=WSGA"
    End If

    cnn1.ConnectionTimeout = 200
    cnn1.CommandTimeout = 300
    cnn1.Open strConn

    StrSql = "select em.OwningTeam ,em.ProducedBy from mapReportingTeamEmails em JOIN dbo.WSGA_sys_Process_Info rp on rp.OwningTeam = em.OwningTeam WHERE rp.Process_ID = " & CStr(PID)
    rs.Open StrSql, cnn1, adOpenForwardOnly, adLockReadOnly
    If rs.EOF Then
        PB = "Claims Reporting && Analytics"
    Else
        rs.MoveFirst
        PB = IIf(rs!ProducedBy Is Nothing, "Claims Reporting && Analytics", rs!ProducedBy)
    End If
    
    rs.Close
    cnn1.Close
    Set rs = Nothing
    Set cnn1 = Nothing
    
    With ActiveSheet.PageSetup
        .BottomMargin = Application.InchesToPoints(1)
        .LeftFooter = "Bank of America:  Confidential" & vbLf & "Report Produced By:" & vbLf & PB
        .CenterFooter = "Printed On &D"
        .RightFooter = "&P of &N"
    End With
End Sub

Sub ActiveSheetPrintSetUpNew()

' This procedure sets up ActiveSheets

    Dim ActiveSheetName As String
    
    On Error Resume Next
    
    ActiveSheetName = ActiveSheet.Name

    For iRecordIndex = 1 To Sheets("Param").Range("PrintTabCount").Value
        If ActiveSheetName = Sheets("Param").Range("PrintTabName" + CStr(iRecordIndex)).Value Then Exit For
    Next iRecordIndex
              
        ' Orientation
        ActiveSheet.PageSetup.Orientation = ReturnPrintOrientationNum(Sheets("Param").Range("PrintOrientation" + CStr(iRecordIndex)).Value)
        
        ' Zoom
        If Sheets("Param").Range("PrintZoom" + CStr(iRecordIndex)).Value = False Then
            ActiveWindow.Zoom = False
        Else
            ActiveWindow.Zoom = Int(Sheets("Param").Range("PrintZoom" + CStr(iRecordIndex)).Value)
        End If

        ' Rows At Top
        If Sheets("Param").Range("PrintTopRows" + CStr(iRecordIndex)).Value = "" Then
            ActiveSheet.PageSetup.PrintTitleRows = False
        Else
            ActiveSheet.PageSetup.PrintTitleRows = Sheets("Param").Range("PrintTopRows" + CStr(iRecordIndex)).Value
        End If
      
        ' Columns At Left
        If Sheets("Param").Range("PrintLeftCols" + CStr(iRecordIndex)).Value = "" Then
            ActiveSheet.PageSetup.PrintTitleColumns = False
        Else
            ActiveSheet.PageSetup.PrintTitleColumns = Sheets("Param").Range("PrintLeftCols" + CStr(iRecordIndex)).Value
        End If
          
        
        ' Pages Wide
        If Sheets("Param").Range("PrintPagesWide" + CStr(iRecordIndex)).Value = False Then
            ActiveSheet.PageSetup.FitToPagesWide = False
        Else
            ActiveSheet.PageSetup.FitToPagesWide = _
                Sheets("Param").Range("PrintPagesWide" + CStr(iRecordIndex)).Value
        End If

        ' Pages Tall
        If Sheets("Param").Range("PrintPagesTall" + CStr(iRecordIndex)).Value = False Then
            ActiveSheet.PageSetup.FitToPagesTall = False
        Else
            ActiveSheet.PageSetup.FitToPagesTall = _
                Sheets("Param").Range("PrintPagesTall" + CStr(iRecordIndex)).Value
        End If
    
        
        ' Freeze Panes
        If Sheets("Param").Range("PrintFreezePanes" + CStr(iRecordIndex)).Value = True Then
            If ActiveSheet.PivotTables.Count = 1 Then
                FreezePivot
            Else
                If ActiveSheet.ListObjects.Count > 0 Then
                    FreezeFlat
                End If
            End If
        Else
            ActiveWindow.FreezePanes = False
        End If
        
        ' Standard Number Format with Commas
        If Sheets("Param").Range("PrintCommas" + CStr(iRecordIndex)).Value > 0 Then
            FormatWorksheetCommaCells
        End If
    
        ' Standard Number Format with Percent
        If Sheets("Param").Range("PrintPercent" + CStr(iRecordIndex)).Value = True Then
            FormatWorksheetPercentCells
        End If
        
        
End Sub

Sub FormatWorksheetCommaCells()
    WkshtCommaCells (Selection.SpecialCells(xlConstants, 23))
End Sub

Sub WkshtCommaCells(CurrRange As Range)

    Dim cell As Range
    For Each cell In CurrRange

        If cell.NumberFormat = "@" Then
            cell.NumberFormat = "#,##0"
        End If

        If cell.NumberFormat = "General" Then
            cell.NumberFormat = "#,##0"
        End If

        If cell.NumberFormat = "0" Then
            cell.NumberFormat = "#,##0"
        End If

        If cell.NumberFormat = "#,##0.0" Then
            cell.NumberFormat = "#,##0"
        End If

    Next cell
    
End Sub

Sub FormatWorksheetPercentCells()
    WkshtPercentCells (Selection.SpecialCells(xlConstants, 23))
End Sub

Sub WkshtPercentCells(CurrRange As Range)
    Dim cell As Range
    For Each cell In CurrRange

        If cell.NumberFormat = "0.00%" Then
            cell.NumberFormat = "0.0%"
        End If

        If cell.NumberFormat = "0%" Then
'           MsgBox cell
            cell.NumberFormat = "0.0%"
        End If

    Next cell
End Sub

Sub NoTruncateTxt()

    Dim iCurrentColumnNumber, iLastColumnNumber, iCurrentCollectionIndex As Integer

    Set cHiddenColumnLog = New Collection
    iLastColumnNumber = ActiveSheet.UsedRange.Columns.Count

    ' Log Hidden Columns
    For iCurrentColumnNumber = 1 To iLastColumnNumber
        If Columns(iCurrentColumnNumber).Hidden = True Then
            cHiddenColumnLog.Add iCurrentColumnNumber
        End If
    Next iCurrentColumnNumber

    ' Widen All Columns
    Range("A1").Font.Size = 2
    Cells.EntireColumn.AutoFit
    Range("A1").Font.Size = 15

    ' Restore Hidden Columns
    For iCurrentCollectionIndex = 1 To cHiddenColumnLog.Count
        Columns(cHiddenColumnLog(iCurrentCollectionIndex)).Hidden = True
    Next iCurrentCollectionIndex

    ' Account for Anomolies
    If ActiveSheet.Name = "TeamMappingRpt" Then Columns(1).ColumnWidth = 33

End Sub

Function ReturnPrintOrientationNum(StringValue)
    Select Case StringValue
        Case "xlPortrait"
            ReturnPrintOrientationNum = 1
        Case "xlLandscape"
            ReturnPrintOrientationNum = 2
    End Select
End Function


'' Freeze Panes
'Sub SetFreeze(RowAddressIn, ColumnAdressIn)
'    ActiveWindow.FreezePanes = False
'    Range(ReturnFreezeColumn(ColumnAdressIn) & ReturnFreezeRow(RowAddressIn)).Select
'    ActiveWindow.FreezePanes = True
'End Sub
'
'' Freeze Panes
'Function ReturnFreezeRow(RowAddressIn)
'    Dim iDollar1Index, iDollar2Index As Byte
'
'    iDollar1Index = InStr(1, RowAddressIn, "$")
'    iDollar2Index = InStr(iDollar1Index + 1, RowAddressIn, "$")
'
'    ReturnFreezeRow = Mid(RowAddressIn, iDollar2Index + 1) + 1
'End Function
'
'' Freeze Panes
'Function ReturnFreezeColumn(ColumnAddressIn)
'    Dim iDollar1Index, iDollar2Index As Byte
'    Dim sInitialColumnLetter, sNextColumnLetter As String
'
'    If ColumnAddressIn = "" Then
'        ReturnFreezeColumn = "A"
'    Else
'        iDollar1Index = InStr(1, ColumnAddressIn, "$")
'        iDollar2Index = InStr(iDollar1Index + 1, ColumnAddressIn, "$")
'        sInitialColumnLetter = Mid(ColumnAddressIn, iDollar2Index + 1)
'        sNextColumnLetter = Chr(Asc(sInitialColumnLetter) + 1)
'
'        ReturnFreezeColumn = sNextColumnLetter
'
'    End If
'
'End Function

Public Sub FreezePivot()

    Dim iDollar1Index, iDollar2Index, iColonIndex As Integer
    Dim sRestOfString, sInitialColumnLetter, sNextColumnLetter As String
    Dim FreezeCol As String, FreezeRow As String
    Dim PivotAddress As String
    Dim X As Integer
    
    X = ActiveSheet.PivotTables.Count
    PivotAddress = ActiveSheet.PivotTables(X).DataBodyRange.Address
    
    iDollar1Index = InStr(1, PivotAddress, "$")
    
    iDollar2Index = InStr(iDollar1Index + 1, PivotAddress, "$")
    iColonIndex = InStr(iDollar2Index + 1, PivotAddress, ":")
    sRestOfString = Mid(PivotAddress, iDollar2Index + 1)
    sInitialColumnLetter = Mid(PivotAddress, iDollar1Index + 1, iDollar2Index - iDollar1Index - 1)
    sNextColumnLetter = Mid(PivotAddress, iDollar2Index + 1, iColonIndex - iDollar2Index - 1)
    FreezeCol = Chr(Asc(sInitialColumnLetter))
    FreezeRow = sNextColumnLetter
        
    ActiveWindow.FreezePanes = False
    Range(FreezeCol & FreezeRow).Select
    ActiveWindow.FreezePanes = True
    
    ActiveSheet.PivotTables(1).HasAutoFormat = False
    ActiveSheet.PivotTables(1).HasAutoFormat = True
End Sub

Public Sub FreezeFlat()
    ActiveWindow.FreezePanes = False
    ActiveSheet.ListObjects(1).DataBodyRange.Select
    ActiveWindow.FreezePanes = True
    ActiveSheet.ListObjects(1).Range.Columns(1).AutoFit
End Sub

Function GetProcessID() As Integer
    
    If Environ("PROCESS_ID") = "" Then
        If Sheets("Param").Range("PrintProcessID").Value <> 0 Then
            GetProcessID = Sheets("Param").Range("PrintProcessID").Value
        Else
            GetProcessID = 1000
        End If
    Else
        GetProcessID = Environ("PROCESS_ID")
    End If

End Function


Sub PopulateTOC()
    
    Range("ReportDescription") = RptDescr
    Range("ReportTitle") = RptTitle
    Range("ReportType") = RptTitle
    
    Rows(Range("ReportDescription").Row).EntireRow.AutoFit

End Sub

Sub GetReportName()

    Dim Result As New ADODB.Recordset
    Dim cmd As New ADODB.Command
    Dim cnn1 As ADODB.Connection
    Dim strConn As String
    Dim sSQL  As String

    If Environ("PROCESSSERVERNAME") <> "" Then
        strConn = "driver={SQL Server Native Client 11.0};server=" & Environ("PROCESSSERVERNAME") & ";Trusted_Connection=Yes;database=" & Environ("PROCESSDBNAME")
    Else
        strConn = "driver={SQL Server Native Client 11.0};server=MtgME,15001;Trusted_Connection=Yes;database=WSGA"
    End If
    
    Set cnn1 = New ADODB.Connection
    cnn1.ConnectionTimeout = 200
    cnn1.CommandTimeout = 300
    cnn1.Open strConn
    
    Set cmd = New ADODB.Command
    
    cmd.CommandText = "SELECT Description, IsNull(ReportName,'Missing') FROM WSGA.dbo.WSGA_sys_Process_Info WHERE Process_ID = " & GetProcessID()
    
    cmd.CommandType = adCmdText
    cmd.ActiveConnection = cnn1
    
    On Error Resume Next
    Set Result = cmd.Execute
    
    If Err.Number <> 0 Then
        Err.Clear
        RptDescr = Sheets("Param").Range("ReportTitle").Value
        RptTitle = Sheets("Param").Range("ReportTitle").Value
        Result.Close
        cnn1.Close
        Set cmd = Nothing
        Set cnn1 = Nothing
        On Error GoTo 0
        Exit Sub
    End If
    
    On Error GoTo 0
    
    RptDescr = Result.Fields(0)
    RptTitle = Result.Fields(1)
    
    Result.Close
    cnn1.Close
    
'    Rows(Range("ReportDescription").Row).EntireRow.AutoFit

    Set cmd = Nothing
    Set cnn1 = Nothing

End Sub

Sub TOC_Hyperlinks()
' Currently Active Procedure
    Dim ws As Worksheet
    Dim sTabName, sA1, sSubAddress As String
    Dim iSheetIndex As Byte

    Sheets("TOC").Activate
    
    iSheetIndex = 0
        
    For Each ws In ActiveWorkbook.Sheets
        
        If ws.Visible = xlSheetVisible Then
            If ws.Name <> "TOC" Then
                
                sTabName = ws.Name
                sSubAddress = "'" & sTabName & "'!A2"
'               sA1 = ws.Range("A1")
                sA1 = sTabName

                ' Add Hyperlink To TOC using sA1 Value
                Sheets("TOC").Hyperlinks.Add Anchor:=Range("ReportNameAnchor").Offset(iSheetIndex, 0), Address:="", SubAddress:=sSubAddress, TextToDisplay:=sA1
                               
                ' Add Tab Description
                For X = 1 To Sheets("Param").Range("PrintTabCount").Value
                    If Sheets("Param").Range("PrintTabName" + CStr(X)).Value = ws.Name Then
                        Sheets("TOC").Range("ReportNameAnchor").Offset(iSheetIndex, 1) = vbLf & Sheets("Param").Range("PrintDesc" + CStr(X)).Value & vbLf
                        Exit For
                    End If
                Next X
                
                ' AutoFit Rows
                Rows(Sheets("TOC").Range("ReportNameAnchor").Offset(iSheetIndex, 1).Row).AutoFit
                
           
                ' Add Return Hyperlink To Reports
                Sheets(ws.Name).Activate

                If Columns(2).Hidden = False Then
                    ActiveSheet.Hyperlinks.Add Anchor:=Range("B2"), Address:="", SubAddress:="TOC" & "!A2", TextToDisplay:="Return To TOC"
                Else
                    ActiveSheet.Hyperlinks.Add Anchor:=Range("C2"), Address:="", SubAddress:="TOC" & "!A2", TextToDisplay:="Return To TOC"
                End If
                
                ' Return To TOC
                Sheets("TOC").Activate
                iSheetIndex = iSheetIndex + 1
            End If
        End If
    Next ws

    ' Return To TOC
    Sheets("TOC").Activate
   
    Range("A2").Select

End Sub

Public Sub FormatPivots()

    Dim PT As PivotTable
    
    For Each PT In ActiveSheet.PivotTables
        PT.ShowDrillIndicators = False
        
        PT.RowRange.Select
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        Selection.Borders(xlInsideVertical).LineStyle = xlNone
        With Selection.Borders(xlInsideHorizontal)
            .LineStyle = xlContinuous
            .ColorIndex = 0
            .TintAndShade = 0
            .Weight = xlThin
        End With
        
        If PT.ColumnFields.Count > 0 Then
            PT.ColumnRange.Select
            With Selection
                .HorizontalAlignment = xlCenter
                .VerticalAlignment = xlBottom
                .WrapText = False
                .Orientation = 0
                .AddIndent = False
                .IndentLevel = 0
                .ShrinkToFit = False
                .ReadingOrder = xlContext
                .MergeCells = False
            End With
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = xlContinuous
                .ColorIndex = 1
                .TintAndShade = 0
                .Weight = xlThin
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlContinuous
                .ColorIndex = 1
                .TintAndShade = 0
                .Weight = xlThin
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlContinuous
                .ColorIndex = 1
                .TintAndShade = 0
                .Weight = xlThin
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = xlContinuous
                .ColorIndex = 1
                .TintAndShade = 0
                .Weight = xlThin
            End With
        End If
        
        PT.DataBodyRange.Select
        Selection.HorizontalAlignment = xlCenter
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .ColorIndex = xlAutomatic
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .ColorIndex = xlAutomatic
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .ColorIndex = xlAutomatic
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .ColorIndex = xlAutomatic
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With Selection.Borders(xlInsideVertical)
            .LineStyle = xlContinuous
            .ColorIndex = xlAutomatic
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With Selection.Borders(xlInsideHorizontal)
            .LineStyle = xlContinuous
            .ThemeColor = 5
            .TintAndShade = 0
            .Weight = xlThin
        End With
        
        'Format Grand Total row with thick top and bottom borders
        Dim StartColumn As Integer
        Dim StartRow As Integer
        Dim NumCols As Integer
        Dim NumRows As Integer
        
        StartColumn = PT.TableRange2.Column
        StartRow = PT.TableRange2.Row
        NumCols = PT.TableRange2.Columns.Count
        NumRows = PT.TableRange2.Rows.Count

        Dim X As Integer, Y As Integer, A As Integer, B As Integer
        A = PT.RowFields.Count
        For B = 1 To A - 1
            X = PT.RowFields(B).PivotItems.Count
            For Y = 1 To X
                On Error Resume Next
                PT.RowFields(B).PivotItems(Y).LabelRange.Select
                If Err.Number <> 0 Then
                    Err.Clear
                    On Error GoTo 0
                    Exit For
                End If
                On Error GoTo 0
                Selection.Borders(xlDiagonalDown).LineStyle = xlNone
                Selection.Borders(xlDiagonalUp).LineStyle = xlNone
                With Selection.Borders(xlEdgeLeft)
                    .LineStyle = xlContinuous
                    .ColorIndex = 0
                    .TintAndShade = 0
                    .Weight = xlThin
                End With
                With Selection.Borders(xlEdgeTop)
                    .LineStyle = xlContinuous
                    .ColorIndex = 0
                    .TintAndShade = 0
                    .Weight = xlThin
                End With
                With Selection.Borders(xlEdgeBottom)
                    .LineStyle = xlContinuous
                    .ColorIndex = 0
                    .TintAndShade = 0
                    .Weight = xlThin
                End With
                With Selection.Borders(xlEdgeRight)
                    .LineStyle = xlContinuous
                    .ColorIndex = 0
                    .TintAndShade = 0
                    .Weight = xlThin
                End With
                Selection.Borders(xlInsideVertical).LineStyle = xlNone
                Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
            Next Y
        Next B
        
        If ActiveSheet.Range(Cells(StartRow + NumRows - 1, StartColumn), Cells(StartRow + NumRows - 1, StartColumn)) Like "*Grand Total*" Then
            ActiveSheet.Range(Cells(StartRow + NumRows - 1, StartColumn), Cells(StartRow + NumRows - 1, StartColumn + NumCols - 1)).Select
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = xlContinuous
                .ColorIndex = 0
                .TintAndShade = 0
                .Weight = xlThin
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = xlContinuous
                .ColorIndex = 0
                .TintAndShade = 0
                .Weight = xlMedium
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = xlContinuous
                .ColorIndex = 0
                .TintAndShade = 0
                .Weight = xlMedium
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = xlContinuous
                .ColorIndex = xlAutomatic
                .TintAndShade = 0
                .Weight = xlThin
            End With
        End If
    
    Next PT
End Sub

Public Sub FormatFlats()

    Dim X As Integer, ListCt As Integer
    Dim FlatName As String
    Dim WSName As String
    Dim myWorksheetLists As ListObjects
    
    For X = 1 To Sheets("Param").Range("StoredProcCnt").Value
        If Sheets("Param").Range("ReportType" + CStr(X)).Value = "Flat" And Sheets("Param").Range("TabName" + CStr(X)).Value = ActiveSheet.Name Then
            FlatName = Sheets("Param").Range("RangeName" + CStr(X)).Value
            WSName = ActiveSheet.Name
            
            On Error Resume Next
            Range(FlatName).Select
            Set myWorksheetLists = Worksheets(WSName).ListObjects.Add
            ListCt = ListCt + 1
            FormatFlatDateColumns (ListCt)
            ActiveSheet.ListObjects(ListCt).DataBodyRange.Select
            Selection.HorizontalAlignment = xlLeft
            ActiveSheet.ListObjects(ListCt).HeaderRowRange.Select
            Selection.HorizontalAlignment = xlCenter
        End If
    Next X
    
    
    
End Sub


Public Sub FormatFlatDateColumns(ListIndex As Integer)

    Dim X As Integer, Y As Integer
    
    X = ActiveSheet.ListObjects(ListIndex).ListColumns.Count
    For Y = 1 To X
        If ActiveSheet.ListObjects(ListIndex).ListColumns(Y).Name Like "*Dt" Or ActiveSheet.ListObjects(ListIndex).ListColumns(Y).Name Like "*Date" Then
            ActiveSheet.ListObjects(ListIndex).ListColumns(Y).Range.Select
            Selection.NumberFormat = "mm/dd/yyyy"
        End If
    Next Y
    
End Sub
Attribute VB_Name = "modStdFormat_PivotTab"
Sub PivotInterriorGridFormat(ColumnOrGridOrHeader, HeaderType, HeaderNameOrAddress, Optional OffsetRow = 0, Optional OffsetColumn = 0, Optional HorizontalAlignment, Optional NumberFormat, Optional GridWeight, Optional InsideHorizontalColorIndex)
    ' ColumnOrGridOrHeader = "C" (Column),"G" (Grid),"H" (Header)
    ' HeaderType = "A" (Address), "N" (Name)
    ' HeaderNameOrAddress Example: I6, Total
    
    On Error GoTo SKIP
    
    ' Select Anchor Cell
    CalculateHeaderRowAndColumn HeaderType, HeaderNameOrAddress, OffsetRow, OffsetColumn
    
    Select Case ColumnOrGridOrHeader
        Case "C"
            GridAddress = Range(Cells(HeaderRowNumber, HeaderColumnNumber), Cells(LastDataRowNumber, HeaderColumnNumber)).Address
        Case "G"
'           If Range(GridAddress).Column <> 1 Then
                GridAddress = Range(Cells(HeaderRowNumber, HeaderColumnNumber), Cells(LastDataRowNumber, LastDataColumnNumber)).Address
'           End If
        Case "H"
            GridAddress = Range(Cells(HeaderRowNumber, HeaderColumnNumber), Cells(HeaderRowNumber, HeaderColumnNumber)).Address
        Case Else
            
    End Select
    
  
    If Not IsMissing(HorizontalAlignment) Then
        Range(GridAddress).HorizontalAlignment = HorizontalAlignment
    End If
    
    If Not IsMissing(NumberFormat) Then
        Range(GridAddress).NumberFormat = NumberFormat
    End If
    
    If Not IsMissing(GridWeight) Then
        Range(GridAddress).Borders.Weight = GridWeight
    End If

    If Not IsMissing(InsideHorizontalColorIndex) Then
        Range(GridAddress).Borders(xlInsideHorizontal).ColorIndex = InsideHorizontalColorIndex
        Range(GridAddress).Borders(xlInsideVertical).ColorIndex = BorderLineColorIndex.Black
        Range(GridAddress).Borders(xlEdgeRight).ColorIndex = BorderLineColorIndex.Black
    End If

SKIP:
End Sub

Sub HidePivotCollapseButtons()
'This procedure hide collapse buttons

    On Error Resume Next
    Dim pv As PivotTable
'   MsgBox ActiveSheet.PivotTables.Count

    For Each pv In ActiveSheet.PivotTables
        ActiveSheet.pv.ShowDrillIndicators = False
    Next pv

End Sub


Sub CalculateGrandTotalRowAndColumnNumbers()
'This procedure calculate grand total columns and rows
        
    Range("D2").Select
    
    On Error Resume Next
    
    Cells.Find(What:="grand total", After:=ActiveCell, LookIn:=xlFormulas, LookAt:=xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False, SearchFormat:=False).Activate
    
    If ActiveCell <> "Grand Total" Then Exit Sub
    
    iGrandTotalRowNumber = ActiveCell.Row
    iGrandTotalColumnNumber = ActiveCell.Column
    
    If iGrandTotalColumnNumber < 12 Then

    End If
    
    sRowsToRepeat = "$1:$" & CStr(iGrandTotalRowNumber + 1)
    
    Range(ENDING_ADDRESS).Select

End Sub


Attribute VB_Name = "modStdFormat_TOC"
Option Explicit
Option Base 1

Public Const ENDING_ADDRESS As String = "A2"


Dim iLastPrintAreaRowNumber As Integer
Dim sListHeading, sReportType As String

Sub A_MyRefreshMe()

    RefreshMe

End Sub

Sub RenameAndHideOldTOC()
' This code needs to run before CopyNewTOC
    Dim sh As Worksheet
    For Each sh In ActiveWorkbook.Worksheets
        If InStr(1, LCase(sh.Name), "toc") > 0 Then
            If InStr(1, LCase(sh.CodeName), "toc") = 0 Then
                If LCase(sh.Name) = "toc" Then
                    sh.Name = "TOC OLD"
                    sh.Visible = xlSheetHidden
                End If
            End If
        End If
    Next sh

End Sub

Sub CopyNewTOC()
' This code needs to run after RenameAndHideOldTOC
    Dim sh As Worksheet
    For Each sh In ActiveWorkbook.Worksheets
        If InStr(1, LCase(sh.CodeName), "toc") > 0 Then
            sh.Visible = xlSheetVisible
            sh.Copy Before:=Sheets(1)
        ActiveSheet.Name = "TOC"
        Sheets("Template_NEW_TOC").Visible = False
            Exit For
        End If
    Next sh

End Sub

Sub AddReportProducedOnDate()
    Dim dToday As Date
    dToday = Format(Now, "mm/dd/yyyy")
    Range("ReportProducedOn") = dToday
End Sub

Sub AddReportDataAsOfDate()
    Dim dToday As Date
    dToday = Format(Now, "mm/dd/yyyy")
    Range("ReportDataAsOf") = dToday - 1
End Sub

Sub ChangeTOC_A1()

    ' Populate Variables sListHeading
    sListHeading = ""
    
    ' Paste TOC Heading
    If sListHeading = "" Then
'       Sheets("TOC").Range("A1") = TOC_HEADING & " - " & ReturnNoUnderScores(Range("ReportTitle"))
        Sheets("TOC").Range("A1") = Range("ReportTitle")
    Else
        Sheets("TOC").Range("A1") = Range("ReportTitle")
    End If
    
End Sub

Function ReturnNoUnderScores(Phrase)
    Dim sTemp As String
    sTemp = Replace(Phrase, "_", " ")
    ReturnNoUnderScores = sTemp
End Function

Function ReturnNoCamelCase(Phrase)
    Dim iCurrentIndex, iPhraseLength, iAsc1, iAsc2 As Byte
    Dim sChar1, sChar2, sTemp As String
    
    iPhraseLength = Len(Phrase)
    sTemp = ""
    
    For iCurrentIndex = 2 To iPhraseLength
        sChar1 = Mid(Phrase, iCurrentIndex - 1, 1)
        sChar2 = Mid(Phrase, iCurrentIndex, 1)
        iAsc1 = Asc(sChar1)
        iAsc2 = Asc(sChar2)
'       sTemp = sTemp & sChar1
        
        If iAsc1 < 97 And iAsc2 >= 97 Then
'           sTemp = sTemp & " " & iAsc1
            sTemp = sTemp & " " & sChar1
        Else
'           sTemp = sTemp & iAsc1
            sTemp = sTemp & sChar1
        End If
    
    Next iCurrentIndex
    
'   ReturnNoCamelCase = sTemp & iAsc2
    ReturnNoCamelCase = sTemp & sChar2

End Function

Function ReturnParsedWorkbookName()
    Dim iUnderscoreIndex, iDotIndex, iCombinedReportGenerator As Byte
    Dim sWorkbookName As String
    
    sWorkbookName = ActiveWorkbook.Name
    iCombinedReportGenerator = InStr(1, sWorkbookName, "CombinedReportGenerator")
    iUnderscoreIndex = InStr(1, sWorkbookName, "_")
    iDotIndex = InStr(1, sWorkbookName, ".")
    If iCombinedReportGenerator > 0 Then
        ReturnParsedWorkbookName = Left(sWorkbookName, iCombinedReportGenerator - 2)
    ElseIf iUnderscoreIndex > 0 Then
        ReturnParsedWorkbookName = Left(sWorkbookName, iUnderscoreIndex - 1)
    Else
        ReturnParsedWorkbookName = Left(sWorkbookName, iDotIndex - 1)
    End If
End Function

Sub FormatTOCSheet()
    
    Sheets("TOC").Activate
    DoTOCPageSetup
    
End Sub

Sub ShowMaxValue()
    MsgBox WorksheetFunction.Max(ActiveSheet.Cells)
'   MsgBox WorksheetFunction.Match(WorksheetFunction.Max(ActiveSheet.Cells), ActiveSheet.UsedRange, 0)
'   MsgBox WorksheetFunction.Find(ActiveSheet.Name, 1000)
End Sub


Sub DoTOCPageSetup()

    Dim cnn1 As New ADODB.Connection
    Dim rs As New ADODB.Recordset
    Dim StrSql As String, strConn As String
    Dim PB As String
    Dim PID As Integer
    PID = GetProcessID()
    
    If Environ("PROCESSSERVERNAME") <> "" Then
        strConn = "PROVIDER=SQLNCLI11;DATA SOURCE=" & Environ("PROCESSSERVERNAME") & ";Trusted_Connection=Yes;INITIAL CATALOG=" & Environ("PROCESSDBNAME")
    Else
        strConn = "PROVIDER=SQLNCLI11;DATA SOURCE=MtgME,15001;Trusted_Connection=Yes;INITIAL CATALOG=WSGA"
    End If

    cnn1.ConnectionTimeout = 200
    cnn1.CommandTimeout = 300
    cnn1.Open strConn

    StrSql = "select em.OwningTeam ,em.ProducedBy from mapReportingTeamEmails em JOIN WSGA_sys_Process_Info rp on rp.OwningTeam = em.OwningTeam WHERE rp.Process_ID = " & CStr(PID)
    rs.Open StrSql, cnn1, adOpenForwardOnly, adLockReadOnly
    If rs.EOF Then
        PB = "Claims Reporting && Analytics"
    Else
        rs.MoveFirst
        PB = IIf(rs!ProducedBy Is Nothing, "Claims Reporting && Analytics", rs!ProducedBy)
    End If
    
    rs.Close
    cnn1.Close
    Set rs = Nothing
    Set cnn1 = Nothing
    
    With ActiveSheet.PageSetup
        .PrintTitleRows = ""
        .PrintTitleColumns = ""
        .Zoom = False
        .FitToPagesWide = 1
        .FitToPagesTall = 1
        .Orientation = xlLandscape
        .PrintGridlines = False
        .LeftFooter = "Bank of America:  Confidential" & vbLf & "Report Produced By:" & vbLf & PB
        .CenterFooter = "Printed On &D"
        .RightFooter = "&P of &N"
    End With

    Range("A4:B4").Select
    With Selection.Font
        .Name = "Arial"
        .Size = 10
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontNone
    End With
    Columns("A:A").ColumnWidth = 19.57
    Range("A3").Select
End Sub


Sub Add_TOC_Hyperlinks()
' Currently Active Procedure
    Dim ws As Worksheet
    Dim sTabName, sA1, sSubAddress As String
    Dim iSheetIndex As Byte

    Sheets("TOC").Activate
    
    iSheetIndex = 0
        
    For Each ws In ActiveWorkbook.Sheets
        
        If ws.Visible = xlSheetVisible Then
            If ws.Name <> "TOC" Then
                
                sTabName = ws.Name
                sSubAddress = "'" & sTabName & "'!A2"
'               sA1 = ws.Range("A1")
                sA1 = sTabName

                ' Add Hyperlink To TOC using sA1 Value
                Sheets("TOC").Hyperlinks.Add Anchor:=Range("ReportNameAnchor").Offset(iSheetIndex, 0), Address:="", SubAddress:=sSubAddress, TextToDisplay:=sA1
                               
                ' Add Tab Description
                Sheets("TOC").Range("ReportNameAnchor").Offset(iSheetIndex, 1) = vbLf & P(iSheetIndex + 1).TabDescription & vbLf
                
                ' AutoFit Rows
                Rows(Sheets("TOC").Range("ReportNameAnchor").Offset(iSheetIndex, 1).Row).AutoFit
                
           
                ' Add Return Hyperlink To Reports
                Sheets(ws.Name).Activate

                If Columns(2).Hidden = False Then
                    ActiveSheet.Hyperlinks.Add Anchor:=Range("B2"), Address:="", SubAddress:="TOC" & "!A2", TextToDisplay:="Return To TOC"
                Else
                    ActiveSheet.Hyperlinks.Add Anchor:=Range("C2"), Address:="", SubAddress:="TOC" & "!A2", TextToDisplay:="Return To TOC"
                End If
                
                ' Return To TOC
                Sheets("TOC").Activate
                iSheetIndex = iSheetIndex + 1
            End If
        End If
    Next ws

    ' Return To TOC
    Sheets("TOC").Activate
   
    Range("A2").Select

End Sub

Sub FormatTOCHyperlinkGrid()
'   Dim Result As String
    Dim iFirstTOCRow, iLastTOCRow, iOffsetRow As Integer

    Sheets("TOC").Activate
    
    iFirstTOCRow = Range("ReportNameAnchor").Row
    iLastTOCRow = Sheets("TOC").Range("C500").End(xlUp).Row
    iOffsetRow = iLastTOCRow - Range("ReportNameAnchor").Row

    ' Remove Merge
    Range("ReportNameAnchor").Offset(0, -1).UnMerge

    ' Correct Single Entry Calculation
    If iOffsetRow < 0 Then iOffsetRow = 0
    
    ' Create Merge Cells
    Range(Range("ReportNameAnchor").Offset(0, -2), Range("ReportNameAnchor").Offset(iOffsetRow, -1)).Merge
    ' Add Borders
    Sheets("TOC").Range("A" & iFirstTOCRow & ":" & "D" & iFirstTOCRow).Select
    BorderOutline
'   Sheets("TOC").Range("E" & iFirstTOCRow & ":" & "E" & iLastTOCRow).Select
'   BorderOutline
    Sheets("TOC").Range("D" & iFirstTOCRow & ":" & "D" & iLastTOCRow).Select
    BorderOutline
    Sheets("TOC").Range("C" & iFirstTOCRow & ":" & "C" & iLastTOCRow).Select
    BorderOutline
    Sheets("TOC").Range("A" & iFirstTOCRow & ":" & "B" & iLastTOCRow).Select
    BorderOutline
    
    ' Add Dotted Inner Border
    Sheets("TOC").Range("C" & iFirstTOCRow & ":" & "D" & iLastTOCRow).Select
    BorderInnerLine
    Sheets("TOC").Range("A2").Select

End Sub

Sub CreateEmailToHyperlink()

    Dim sHyperlinkEmailAddress As String
    Dim PID As Integer
    PID = GetProcessID()
    
    Dim cnn1 As New ADODB.Connection
    Dim rs As New ADODB.Recordset
    Dim StrSql As String, strConn As String
    Dim EM As String, OWN As String
    
    If Environ("PROCESSSERVERNAME") <> "" Then
        strConn = "PROVIDER=SQLNCLI11;DATA SOURCE=" & Environ("PROCESSSERVERNAME") & ";Trusted_Connection=Yes;INITIAL CATALOG=" & Environ("PROCESSDBNAME")
    Else
        strConn = "PROVIDER=SQLNCLI11;DATA SOURCE=MtgME,15001;Trusted_Connection=Yes;INITIAL CATALOG=WSGA"
    End If

    cnn1.ConnectionTimeout = 200
    cnn1.CommandTimeout = 300
    cnn1.Open strConn

    StrSql = "select em.OwningTeam ,em.DG_Email from mapReportingTeamEmails em JOIN WSGA_sys_Process_Info rp on rp.OwningTeam = em.OwningTeam WHERE rp.Process_ID = " & CStr(PID)
    rs.Open StrSql, cnn1, adOpenForwardOnly, adLockReadOnly
    If rs.EOF Then
        EM = "dg.wsgadr@bankofamerica.com"
        OWN = "Reporting and Analytics"
    Else
        rs.MoveFirst
        EM = IIf(rs!DG_Email Is Nothing, "dg.wsgadr@bankofamerica.com", rs!DG_Email)
        OWN = IIf(rs!OwningTeam Is Nothing, "Reporting and Analytics", rs!OwningTeam)
    End If
    
    rs.Close
    cnn1.Close
    Set rs = Nothing
    Set cnn1 = Nothing
    
    sHyperlinkEmailAddress = "mailto: " & EM & "?subject=" & ReturnNoCamelCase(ReturnNoUnderScores(Range("ReportTitle")))
    ActiveSheet.Hyperlinks.Add Anchor:=Range("EmailTo"), Address:=sHyperlinkEmailAddress, SubAddress:="", TextToDisplay:=EM
    
    If OWN = "LSBO Reporting" Then
        Sheets("TOC").Range("A1") = "LSBO - " & Range("ReportTitle")
        Sheets("TOC").Range("B4") = "Claims Reporting & Analytics"
    ElseIf OWN = "SOAR Control Team" Then
        Sheets("TOC").Range("B4") = "SOAR Control Team"
    ElseIf OWN = "LARA" Then
        Sheets("TOC").Range("B4") = "LARA (Loan Administration Reporting & Analytics)"
    Else
        Sheets("TOC").Range("B4") = "Claims Reporting & Analytics"
    End If

End Sub

Sub BorderOutline()
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlMedium
    End With
    Selection.Borders(xlInsideVertical).LineStyle = xlNone
    Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
End Sub

Sub BorderInnerLine()
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlDash
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlHairline
    End With
End Sub

Sub PopulateReportType()
    Range("ReportType") = REPORT_TYPE
End Sub

Sub PopulateDescription()
    
        
'   On Error Resume Next
    Dim Result
    Dim cmd As New ADODB.Command
    Dim cnn1 As ADODB.Connection
    Dim prm As ADODB.Parameter
    Dim strConn As String
    Dim sSQL  As String

    If Environ("PROCESSSERVERNAME") <> "" Then
        strConn = "driver={SQL Server Native Client 11.0};server=" & Environ("PROCESSSERVERNAME") & ";Trusted_Connection=Yes;database=" & Environ("PROCESSDBNAME")
    Else
        strConn = "driver={SQL Server Native Client 11.0};server=MtgME,15001;Trusted_Connection=Yes;database=WSGA"
    End If
    
    Set cnn1 = New ADODB.Connection
    cnn1.ConnectionTimeout = 200
    cnn1.CommandTimeout = 300
    cnn1.Open strConn
    
    Set cmd = New ADODB.Command
    
    If Environ("PROCESS_ID") = "" Then
'       MsgBox "No Process ID"
        cmd.CommandText = "SELECT Description FROM WSGA.dbo.WSGA_sys_Process_Info WHERE Process_ID = " & SaveToModule.ReturnProcessID()
    Else
'       MsgBox Environ("PROCESS_ID")
        cmd.CommandText = "SELECT Description FROM WSGA.dbo.WSGA_sys_Process_Info WHERE Process_ID = " & Environ("PROCESS_ID")
    End If
    
'   cmd.CommandText = "SELECT Description FROM dbo.WSGA_sys_Process_Info WHERE ProcessID = ProcessID"
    cmd.CommandType = adCmdText
    cmd.ActiveConnection = cnn1

   '*************************************************************************************
    ' END Create Variables
    '*************************************************************************************

    '*************************************************************************************
    ' START Select Data From SQL Server
    '*************************************************************************************
    
    Result = cmd.Execute

    Range("ReportDescription") = Result.Item(0)
    cnn1.Close
    
    Rows(Range("ReportDescription").Row).EntireRow.AutoFit

    Set prm = Nothing
    Set cmd = Nothing
    Set cnn1 = Nothing

End Sub

Sub PopulateReportName()
    
    
'   On Error Resume Next
    Dim Result
    
    Dim cmd As New ADODB.Command
    Dim cnn1 As ADODB.Connection
    Dim prm As ADODB.Parameter
    Dim strConn As String
    Dim sSQL  As String

    If Environ("PROCESSSERVERNAME") <> "" Then
        strConn = "driver={SQL Server Native Client 11.0};server=" & Environ("PROCESSSERVERNAME") & ";Trusted_Connection=Yes;database=" & Environ("PROCESSDBNAME")
    Else
        strConn = "driver={SQL Server Native Client 11.0};server=MtgME,15001;Trusted_Connection=Yes;database=WSGA"
    End If
    
    Set cnn1 = New ADODB.Connection
    cnn1.ConnectionTimeout = 200
    cnn1.CommandTimeout = 300
    cnn1.Open strConn
    
    Set cmd = New ADODB.Command
    
    If Environ("PROCESS_ID") = "" Then
'       MsgBox "No Process ID"
        cmd.CommandText = "SELECT ReportName FROM WSGA.dbo.WSGA_sys_Process_Info WHERE Process_ID = " & SaveToModule.ReturnProcessID()
    Else
'       MsgBox Environ("PROCESS_ID")
        cmd.CommandText = "SELECT ReportName FROM WSGA.dbo.WSGA_sys_Process_Info WHERE Process_ID = " & Environ("PROCESS_ID")
    End If
    
    cmd.CommandType = adCmdText
    cmd.ActiveConnection = cnn1
    
    Result = cmd.Execute
    
    Range("ReportTitle") = Result.Item(0)
    cnn1.Close
    
    Rows(Range("ReportTitle").Row).EntireRow.AutoFit

    Set prm = Nothing
    Set cmd = Nothing
    Set cnn1 = Nothing

End Sub

Sub TestReturnProcessID()
    MsgBox ReturnProcessID
End Sub

'Function ReturnProcessID()
'
'    '*************************************************************************************
'    ' START Create Variables
'    '*************************************************************************************
'
''   On Error Resume Next
'    Dim Result
''   Dim ProcessID As Integer
'
'    Dim cmd As New ADODB.Command
'    Dim cnn1 As ADODB.Connection
'    Dim prm As ADODB.Parameter
'    Dim strConn As String
'    Dim sSQL  As String
'    Dim sThisTemplateName As String
'    Dim iTemplateNameUnderscoreIndex As Byte
'    Dim iTemplateNameDotIndex As Byte
'    Dim sTemplateNameStub As String
'
'    iTemplateNameUnderscoreIndex = InStrRev(ThisWorkbook.Name, "_")
'    iTemplateNameDotIndex = InStr(1, ThisWorkbook.Name, ".")
'
''   If iTemplateNameUnderscoreIndex = 0 Then
'        sTemplateNameStub = Left(ThisWorkbook.Name, iTemplateNameDotIndex - 5)
''   Else
''       sTemplateNameStub = Left(ThisWorkbook.Name, iTemplateNameUnderscoreIndex - 1)
''   End If
'
''MsgBox sTemplateNameStub
''Exit Function
''   sThisTemplateName = Left(ThisWorkbook.Name, Len(ThisWorkbook.Name) - 4)
''MsgBox sThisTemplateName
'    If Environ("PROCESSSERVERNAME") <> "" Then
'        strConn = "driver={SQL Server Native Client 11.0};" & _
'            "server=" & Environ("PROCESSSERVERNAME") & ";Trusted_Connection=Yes;database=" & Environ("PROCESSDBNAME")
'    Else
'        strConn = "driver={SQL Server Native Client 11.0};server=MtgME,15001;Trusted_Connection=Yes;database=WSGA"
'    End If
'
'    Set cnn1 = New ADODB.Connection
'    cnn1.ConnectionTimeout = 200
'    cnn1.CommandTimeout = 300
'    cnn1.Open strConn
'
'    Set cmd = New ADODB.Command
''   cmd.CommandText = "SELECT Description FROM dbo.WSGA_sys_ProcessGuide WHERE ProcessID = ProcessID"
''   cmd.CommandText = "SELECT Description FROM dbo.WSGA_sys_ProcessGuide WHERE ProcessID = " & Environ("PROCESS_ID")
''   cmd.CommandText = "SELECT ID FROM dbo.WSGA_sys_Process WHERE Name LIKE '" & sTemplateNameStub & "%" & Chr(39)
'    cmd.CommandText = "SELECT Process_ID FROM WSGA.dbo.sys_Process_def WHERE File_Path_Cmd LIKE '%" & sTemplateNameStub & "%" & Chr(39)
'    cmd.CommandType = adCmdText
'    cmd.ActiveConnection = cnn1
'
''   Set prm = cmd.CreateParameter("ProcessID", adInteger, adParamInput)
''   cmd.Parameters.Append prm
''   cmd.Parameters("ProcessID").Value = 333
'
'
'   '*************************************************************************************
'    ' END Create Variables
'    '*************************************************************************************
'
'    '*************************************************************************************
'    ' START Select Data From SQL Server
'    '*************************************************************************************
'
'    Result = cmd.Execute
''   MsgBox Result(0)
'    ReturnProcessID = Result(0)
''   cmd.Parameters("ProcessID").Value = "269"
''   cmd.Parameters("ProcessID").Value = PROCESS_ID
'
''   Set prm = cmd.CreateParameter("ProcessID", adLongVarChar, adParamInput)
''   cmd.Parameters("ProcessID").Value = 333
''   cmd.Parameters("ProcessID").Value = iProcessID
''   cmd.Parameters("ProcessID").Value = PROCESS_ID
''   cmd.Parameters("ProcessID").Value = Int(Environ("PROCESS_ID"))
'
''MsgBox Result(0)
'    ' Paste values for visibility
''   [B6] = Result.Item(0)
''   [B9] = [B9] & " - " & Result.Item(0)
''   [C7] = Result.Count
''   [C7] = Environ("PROCESS_ID")
''   [D8] = ProcessID
''   [D8] = cmd.Parameters("ProcessID").Value
'    cnn1.Close
'
'    Set prm = Nothing
'    Set cmd = Nothing
'    Set cnn1 = Nothing
'
'End Function

Sub ShowWorkbookName()
    
    MsgBox Left(ThisWorkbook.Name, Len(ThisWorkbook.Name) - 6)
End Sub

Sub CustomizeForOneReportSheet()
    Dim sh As Worksheet
    Dim iSheetCount As Byte
    Dim sSheetName As String
    
    iSheetCount = 0
    For Each sh In ActiveWorkbook.Worksheets
        
        If sh.Visible = xlSheetVisible Then
            If sh.Name <> "TOC" Then
                iSheetCount = iSheetCount + 1
                sSheetName = sh.Name
            End If
        End If
    
    Next sh

    If iSheetCount = 1 Then
        Sheets(sSheetName).Activate
        Range("A1") = Range("ReportTitle")
'       Range("A1") = ReturnNoCamelCase(ReturnNoUnderScores(Range("ReportTitle")))
        Sheets("TOC").Activate
'       Range("ReportNameAnchor") = ReturnNoCamelCase(ReturnNoUnderScores(sSheetName))
        Range("ReportNameAnchor") = sSheetName
        Range("ReportNameAnchor").Columns.EntireColumn.AutoFit
        Range("ReportNameAnchor").Offset(0, 1).InsertIndent 1
    End If
    
End Sub

Sub TestRemoveMultiSpaces()
    Dim sValue As String
    sValue = " x   y  z "
    MsgBox "w" & Trim(RemoveMultiSpaces(sValue)) & "r", , sValue
End Sub

Function RemoveMultiSpaces(Value)
    Dim iCurrentCharIndex, iLenIndex As Integer
    Dim sTemp, sPreviousChar, sCurrentChar As String
    
    iLenIndex = Len(Value)
    sTemp = Left(Value, 1)
    If Left(sTemp, 1) = " " Then sTemp = ""
    
    For iCurrentCharIndex = 2 To iLenIndex
        sCurrentChar = Mid(Value, iCurrentCharIndex, 1)
        sPreviousChar = Mid(Value, iCurrentCharIndex - 1, 1)
        If sPreviousChar = " " And sCurrentChar = " " Then
        Else
            sTemp = sTemp & sCurrentChar
        End If
    Next iCurrentCharIndex
        
    RemoveMultiSpaces = sTemp
        
End Function

Function ReturnModifiedA1(Value)
    Dim iLastDash As Byte
    iLastDash = InStrRev(Value, "-")
    ReturnModifiedA1 = Left(Value, iLastDash - 2)
End Function

'=HYPERLINK(|fffd|mailto:mike@someaddress.com, MrsPig@someaddress.com?subject=Email To DataPig|fffd|, |fffd|Send Email|fffd|)
Sub TestCreateHyperlink()
'Range("D4") = Hyperlink("mailto:mike@someaddress.com, MrsPig@someaddress.com?subject=Email To DataPig", "Send Email")
End Sub

Sub LogWorksheetsIntoList()
    Const REPORT_NAME_COLUMN_LETTER As String = "A"
    Const TAB_NAME_COLUMN_LETTER As String = "D"
    
    Dim iCurrentListRow, iLastListRow, iNextListRow, iSheetCount As Integer
    Dim sh As Worksheet
    Dim sReportName, sTabName As String
    
    iLastListRow = Sheets("Template_Sheet_Setup_List").Range("A6000").End(xlUp).Row
    iNextListRow = iLastListRow + 1
    iSheetCount = 0

'   Sheets("Template_Sheet_Setup_List").Range("A30") = Range("ReportTitle")
'   MsgBox iLastListRow

    For Each sh In ActiveWorkbook.Worksheets
        If sh.Name <> "TOC" Then
            If sh.Visible = xlSheetVisible Then
                Sheets("Template_Sheet_Setup_List").Range(REPORT_NAME_COLUMN_LETTER & iNextListRow + iSheetCount) = Range("ReportTitle")
                Sheets("Template_Sheet_Setup_List").Range(TAB_NAME_COLUMN_LETTER & iNextListRow + iSheetCount) = sh.Name
                iSheetCount = iSheetCount + 1
            End If
        End If
    Next sh

    Sheets("Template_Sheet_Setup_List").Visible = True
    Sheets("Template_Sheet_Setup_List").Activate

End Sub

Function DebugPrintVisibleSheetCount()
    Dim Quote As String
    Dim iSheetIndex As Byte
    Dim sh As Worksheet
    
    Quote = Chr(34)
    iSheetIndex = 0
    
    For Each sh In ActiveWorkbook.Worksheets
        If sh.Visible = xlSheetVisible Then
            If sh.Name <> "TOC" Then
                iSheetIndex = iSheetIndex + 1
                Debug.Print "TabName" & iSheetIndex & " = ", Quote; sh.Name; Quote
                Debug.Print "Orientation" & "   Zoom" & " FitToPagesWide" & " FitToPagesTall" & " PrintTitleRows"
                Debug.Print vbTab; sh.PageSetup.Orientation, sh.PageSetup.Zoom; vbTab; sh.PageSetup.FitToPagesWide, , sh.PageSetup.FitToPagesTall; vbTab; vbTab; sh.PageSetup.PrintTitleRows
                Debug.Print
            End If
        End If
    Next
    
    DebugPrintVisibleSheetCount = iSheetIndex

End Function
Attribute VB_Name = "modStdFormat_TabSpecific"

Sub TabSpecificFormatting()
'
'    Dim ActiveSheetName As String
'
'    On Error Resume Next
'
'    ActiveSheetName = ActiveSheet.Name
'
'
'' ================== CUSTOM CODE PER SHEET  =============================
'' =========================================================================
'        If ActiveSheetName = "FNMAStatusRpt" Then
'            ' Add Grid lines To Text Column
'           PivotInterriorGridFormat "C", "N", "RequestStatus", 1, , , , xlThin, BorderLineColorIndex.Black
'            ' Center Data And Add Pale Blue Grid lines To Numeric Area
'            PivotInterriorGridFormat "G", "N", "Current_Review_Stat", 2, , xlCenter, , xlThin, BorderLineColorIndex.PaleBlue
'            ' Center Headers
'            PivotInterriorGridFormat "C", "N", "Current_Review_Stat", 1, , xlCenter
'            ' Add Thick Lines To Total Rows
'            AddThickLinesToTotalRows "A"
''           CenterPivotTableColumns "H9"
''           HidePivotTableColumn "InProcessReasonDesc"
'        End If
'' =========================================================================
'
'' =========================================================================
'        If ActiveSheetName = "LoanLevel" Then
'            ' Add Grid lines To Text Column
'
'            AddFlatFileListObject "LoanLevel"
'            HideFlatFileAutoFilter
'            FormatFlatFileDataColumn "CalcLetterDt", "mm/dd/yyyy"
'            FormatFlatFileDataColumn "LetterDt", "mm/dd/yyyy"
'        End If
'' =========================================================================
'
End Sub

' InQuest injected base64 decoded content
' x	ky
' xZ+:w
' &j)S
' ^"p6
' "{"u
' 't*%
' '^>+
' 't*%
' *&n)
' A&j)@u
' y(^z
' '$.)

INQUEST-PP=macro
