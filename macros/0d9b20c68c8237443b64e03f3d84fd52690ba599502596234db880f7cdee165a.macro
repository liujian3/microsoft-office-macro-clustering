Attribute VB_Name = "ObbaFunctions"
' Obba for Excel
' Copyright 2013 Christian Fries
' http://www.obba.info

Option Explicit
Global gJBObjectBag As Object

Private Function getObjectBag() As Object
    If gJBObjectBag Is Nothing Then
        Set gJBObjectBag = CreateObject("Obba.Functions")
        Dim pathToLib As String
        pathToLib = ThisWorkbook.Path + "\lib"
'        gJBObjectBag.init Nothing, "Excel"
        gJBObjectBag.appendAllToClasspath pathToLib
        Dim showMenu As String
        showMenu = gJBObjectBag.getProperty("menu")
        If showMenu <> "hide" Then
            obCreateMenu
        End If
    End If
    Set getObjectBag = gJBObjectBag
End Function


Public Function obAddClasses(pathToClassFolder As String, Optional isPathRelative As Boolean) As String
    setCallerInfo
    
    Dim pathAbsolute As String
    pathAbsolute = pathToClassFolder
    
    If Not IsMissing(isPathRelative) Then
        If isPathRelative = True And getObjectBag().IsLocalServerRunning Then
            pathAbsolute = getAbsolutePath(pathToClassFolder)
        End If
    End If
    
    getObjectBag().appendToClasspath pathAbsolute

    obAddClasses = pathAbsolute
End Function

Public Function obAddJar(pathToJar As String, Optional isPathRelative As Boolean)
    setCallerInfo
    
    Dim pathAbsolute As String
    pathAbsolute = pathToJar
    
    If Not IsMissing(isPathRelative) Then
        If isPathRelative = True And getObjectBag().IsLocalServerRunning Then
            pathAbsolute = getAbsolutePath(pathToJar)
        End If
    End If
    
    getObjectBag().appendToClasspath pathAbsolute

    obAddJar = pathAbsolute
End Function

Public Function obAddAllJars(pathToLibFolder As String, Optional isPathRelative As Boolean)
    setCallerInfo
    
    Dim pathAbsolute As String
    pathAbsolute = pathToLibFolder
    
    If Not IsMissing(isPathRelative) Then
        If isPathRelative = True And getObjectBag().IsLocalServerRunning Then
            pathAbsolute = getAbsolutePath(pathToLibFolder)
        End If
    End If
    
    getObjectBag().appendAllToClasspath pathAbsolute

    obAddAllJars = pathAbsolute
End Function

Private Function getAbsolutePath(pathRelative As String)
    Dim pathAbsolute As String
    pathAbsolute = ActiveWorkbook.Path + "\" + pathRelative
    getAbsolutePath = pathAbsolute
End Function

Public Function obGetHandle(objectLabel As String) As String
    setCallerInfo
    
    obGetHandle = getObjectBag().getHandle(objectLabel)
End Function

Public Function obMake(objectLabel As String, className As Variant, Optional parameters1 As Variant, Optional parameters2 As Variant, Optional parameters3 As Variant, Optional parameters4 As Variant, Optional parameters5 As Variant, Optional parameters6 As Variant, Optional parameters7 As Variant, Optional parameters8 As Variant, Optional parameters9 As Variant, Optional parameters10 As Variant) As Variant
    On Error GoTo ExceptionHandler
    
    Dim displayAlertsRestore As Boolean
    displayAlertsRestore = Application.DisplayAlerts
    
    If VarType(objectLabel) = vbError Then
        obMake = objectLabel
        Exit Function
    End If
    
    If IsMissing(className) Then Err.Raise (xlErrNA)
    If IsEmpty(className) Then Err.Raise (xlErrNA)
    If VarType(className) = vbError Then
        obMake = className
        Exit Function
    End If
    
    If Not IsMissing(parameters1) And VarType(parameters1) = vbError Then
        obMake = parameters1
        Exit Function
    End If
        
    setCallerInfo
    
    Application.DisplayAlerts = False
    
    If CStr(className) = "int" Or CStr(className) = "byte" Or CStr(className) = "short" Or CStr(className) = "long" Or CStr(className) = "Integer" Then
        obMake = getObjectBag().makePrimitive(objectLabel, CStr(className), CDbl(parameters1))
    ElseIf CStr(className) = "int[]" Or CStr(className) = "byte[]" Or CStr(className) = "short[]" Or CStr(className) = "long[]" Or CStr(className) = "Integer[]" Then
        obMake = getObjectBag().makePrimitive(objectLabel, CStr(className), DoubleArray(parameters1))
    ElseIf CStr(className) = "int[][]" Or CStr(className) = "byte[][]" Or CStr(className) = "short[][]" Or CStr(className) = "long[][]" Or CStr(className) = "Integer[][]" Then
        obMake = getObjectBag().makePrimitive(objectLabel, CStr(className), DoubleMatrix(parameters1))
    ElseIf CStr(className) = "double" Or CStr(className) = "Double" Or CStr(className) = "float" Or CStr(className) = "Float" Or CStr(className) = "Date" Then
        obMake = getObjectBag().makePrimitive(objectLabel, CStr(className), CDbl(parameters1))
    ElseIf CStr(className) = "double[]" Or CStr(className) = "Double[]" Or CStr(className) = "float[]" Or CStr(className) = "Float[]" Or CStr(className) = "Date[]" Then
        obMake = getObjectBag().makePrimitive(objectLabel, CStr(className), DoubleArray(parameters1))
    ElseIf CStr(className) = "double[][]" Or CStr(className) = "Double[][]" Or CStr(className) = "float[][]" Or CStr(className) = "Float[][]" Or CStr(className) = "Date[][]" Then
        obMake = getObjectBag().makePrimitive(objectLabel, CStr(className), DoubleMatrix(parameters1))
    ElseIf CStr(className) = "boolean" Or CStr(className) = "Boolean" Then
        obMake = getObjectBag().makePrimitive(objectLabel, CStr(className), CDbl(parameters1))
    ElseIf CStr(className) = "boolean[]" Or CStr(className) = "Boolean[]" Then
        obMake = getObjectBag().makePrimitive(objectLabel, CStr(className), DoubleArray(parameters1))
    ElseIf CStr(className) = "boolean[][]" Or CStr(className) = "Boolean[][]" Then
        obMake = getObjectBag().makePrimitive(objectLabel, CStr(className), DoubleMatrix(parameters1))
    ElseIf CStr(className) = "char" Or CStr(className) = "String" Then
        obMake = getObjectBag().makePrimitive(objectLabel, CStr(className), CStr(parameters1))
    ElseIf CStr(className) = "char[]" Or CStr(className) = "String[]" Then
        obMake = getObjectBag().makePrimitive(objectLabel, CStr(className), StringArray(parameters1))
    ElseIf CStr(className) = "char[][]" Or CStr(className) = "String[][]" Then
        obMake = getObjectBag().makePrimitive(objectLabel, CStr(className), StringMatrix(parameters1))
    Else
        Dim argVector As Object
        Set argVector = getJointParameters(parameters1, parameters2, parameters3, parameters4, parameters5, parameters6, parameters7, parameters8, parameters9, parameters10)
        obMake = getObjectBag().makeObject(objectLabel, CStr(className), argVector)
    End If
    Application.DisplayAlerts = displayAlertsRestore
    Exit Function

ExceptionHandler:
    Application.DisplayAlerts = displayAlertsRestore
    Dim errorNumber As Long
    errorNumber = Err.Number
    
    If errorNumber > 0 Then
        obMake = CVErr(errorNumber + 1052)
    Else
        obMake = CVErr(xlErrValue)
    End If
End Function

Public Function obCall(resultLabel As String, objectLabel As Variant, methodName As Variant, Optional parameters1 As Variant, Optional parameters2 As Variant, Optional parameters3 As Variant, Optional parameters4 As Variant, Optional parameters5 As Variant, Optional parameters6 As Variant, Optional parameters7 As Variant, Optional parameters8 As Variant, Optional parameters9 As Variant, Optional parameters10 As Variant) As Variant
    On Error GoTo ExceptionHandler

    Dim displayAlertsRestore As Boolean
    displayAlertsRestore = Application.DisplayAlerts
    
    If IsMissing(objectLabel) Then Err.Raise (xlErrNA)
    If IsEmpty(objectLabel) Then Err.Raise (xlErrNA)
    If VarType(objectLabel) = vbError Then
        obCall = objectLabel
        Exit Function
    End If
    
    If IsMissing(methodName) Then Err.Raise (xlErrNA)
    If IsEmpty(methodName) Then Err.Raise (xlErrNA)
    If VarType(methodName) = vbError Then
        obCall = methodName
        Exit Function
    End If
    
    If (Not IsMissing(parameters1)) And IsEmpty(parameters1) Then Err.Raise (xlErrNA)
    If (Not IsMissing(parameters2)) And IsEmpty(parameters2) Then Err.Raise (xlErrNA)
    If (Not IsMissing(parameters3)) And IsEmpty(parameters3) Then Err.Raise (xlErrNA)
    If (Not IsMissing(parameters4)) And IsEmpty(parameters4) Then Err.Raise (xlErrNA)
    If (Not IsMissing(parameters5)) And IsEmpty(parameters5) Then Err.Raise (xlErrNA)
    If (Not IsMissing(parameters6)) And IsEmpty(parameters6) Then Err.Raise (xlErrNA)
    If (Not IsMissing(parameters7)) And IsEmpty(parameters7) Then Err.Raise (xlErrNA)
    If (Not IsMissing(parameters8)) And IsEmpty(parameters8) Then Err.Raise (xlErrNA)
    If (Not IsMissing(parameters9)) And IsEmpty(parameters9) Then Err.Raise (xlErrNA)
    If (Not IsMissing(parameters10)) And IsEmpty(parameters10) Then Err.Raise (xlErrNA)

    setCallerInfo
    
    Application.DisplayAlerts = False
    
    Dim argVector As Object
    Set argVector = getJointParameters(parameters1, parameters2, parameters3, parameters4, parameters5, parameters6, parameters7, parameters8, parameters9, parameters10)
    obCall = getObjectBag().callMethod(resultLabel, CStr(objectLabel), CStr(methodName), argVector)
    Application.DisplayAlerts = displayAlertsRestore
    Exit Function
    
ExceptionHandler:
    Application.DisplayAlerts = displayAlertsRestore
    Dim errorNumber As Long
    errorNumber = Err.Number
    
    If errorNumber > 0 Then
        obCall = CVErr(errorNumber + 1052)
    Else
        obCall = CVErr(xlErrValue)
    End If
End Function

Public Function obRun(resultLabel As String, objectLabel As Variant, methodName As Variant, Optional parameters1 As Variant, Optional parameters2 As Variant, Optional parameters3 As Variant, Optional parameters4 As Variant, Optional parameters5 As Variant, Optional parameters6 As Variant, Optional parameters7 As Variant, Optional parameters8 As Variant, Optional parameters9 As Variant, Optional parameters10 As Variant) As Variant
    On Error GoTo ExceptionHandler
    
    Dim displayAlertsRestore As Boolean
    displayAlertsRestore = Application.DisplayAlerts
    
    If IsMissing(objectLabel) Then Err.Raise (xlErrNA)
    If IsEmpty(objectLabel) Then Err.Raise (xlErrNA)
    If VarType(objectLabel) = vbError Then
        obRun = objectLabel
        Exit Function
    End If
    
    If IsMissing(methodName) Then Err.Raise (xlErrNA)
    If IsEmpty(methodName) Then Err.Raise (xlErrNA)
    If VarType(methodName) = vbError Then
        obRun = methodName
        Exit Function
    End If
    
    If (Not IsMissing(parameters1)) And IsEmpty(parameters1) Then Err.Raise (xlErrNA)
    If (Not IsMissing(parameters2)) And IsEmpty(parameters2) Then Err.Raise (xlErrNA)
    If (Not IsMissing(parameters3)) And IsEmpty(parameters3) Then Err.Raise (xlErrNA)
    If (Not IsMissing(parameters4)) And IsEmpty(parameters4) Then Err.Raise (xlErrNA)
    If (Not IsMissing(parameters5)) And IsEmpty(parameters5) Then Err.Raise (xlErrNA)
    If (Not IsMissing(parameters6)) And IsEmpty(parameters6) Then Err.Raise (xlErrNA)
    If (Not IsMissing(parameters7)) And IsEmpty(parameters7) Then Err.Raise (xlErrNA)
    If (Not IsMissing(parameters8)) And IsEmpty(parameters8) Then Err.Raise (xlErrNA)
    If (Not IsMissing(parameters9)) And IsEmpty(parameters9) Then Err.Raise (xlErrNA)
    If (Not IsMissing(parameters10)) And IsEmpty(parameters10) Then Err.Raise (xlErrNA)
    
    setCallerInfo
    
    Application.DisplayAlerts = False
    
    Dim argVector As Object
    Set argVector = getJointParameters(parameters1, parameters2, parameters3, parameters4, parameters5, parameters6, parameters7, parameters8, parameters9, parameters10)
    obRun = getObjectBag().runMethod(resultLabel, CStr(objectLabel), CStr(methodName), argVector)
    Application.DisplayAlerts = displayAlertsRestore
    Exit Function
    
ExceptionHandler:
    Application.DisplayAlerts = displayAlertsRestore
    Dim errorNumber As Long
    errorNumber = Err.Number
    
    If errorNumber > 0 Then
        obRun = CVErr(errorNumber + 1052)
    Else
        obRun = CVErr(xlErrValue)
    End If
End Function

Public Function obSync(parameters0 As Variant, Optional parameters1 As Variant, Optional parameters2 As Variant, Optional parameters3 As Variant, Optional parameters4 As Variant, Optional parameters5 As Variant, Optional parameters6 As Variant, Optional parameters7 As Variant, Optional parameters8 As Variant, Optional parameters9 As Variant, Optional parameters10 As Variant) As Variant
    setCallerInfo
    
    Dim displayAlertsRestore As Boolean
    displayAlertsRestore = Application.DisplayAlerts
    
'    On Error GoTo ExceptionHandler
    On Error Resume Next
    
    Application.DisplayAlerts = False
    
    Dim argVector As Object
    Set argVector = getJointParameters(parameters1, parameters2, parameters3, parameters4, parameters5, parameters6, parameters7, parameters8, parameters9, parameters10)
    getObjectBag().syncObjects argVector
    obSync = parameters0
    Application.DisplayAlerts = displayAlertsRestore
    Exit Function
    
ExceptionHandler:
    Application.DisplayAlerts = displayAlertsRestore
    Dim errorNumber As Long
    errorNumber = Err.Number
    
    If errorNumber > 0 Then
        obSync = CVErr(errorNumber + 1052)
    Else
        obSync = CVErr(xlErrValue)
    End If
End Function

Public Function obCast(objectLabel As String, className As String) As Variant
    
    If VarType(objectLabel) = vbError Then
        obCast = objectLabel
        Exit Function
    End If
    
    setCallerInfo
    
    obCast = getObjectBag().castObject(objectLabel, className)
End Function

Private Function getJointParameters(Optional parameters0 As Variant, Optional parameters1 As Variant, Optional parameters2 As Variant, Optional parameters3 As Variant, Optional parameters4 As Variant, Optional parameters5 As Variant, Optional parameters6 As Variant, Optional parameters7 As Variant, Optional parameters8 As Variant, Optional parameters9 As Variant, Optional parameters10 As Variant) As Object
    Dim argVector As Object
    
    Set argVector = getParameters(parameters0)
    If Not IsMissing(parameters1) Then argVector.appendValue getParameters(parameters1)
    If Not IsMissing(parameters2) Then argVector.appendValue getParameters(parameters2)
    If Not IsMissing(parameters3) Then argVector.appendValue getParameters(parameters3)
    If Not IsMissing(parameters4) Then argVector.appendValue getParameters(parameters4)
    If Not IsMissing(parameters5) Then argVector.appendValue getParameters(parameters5)
    If Not IsMissing(parameters6) Then argVector.appendValue getParameters(parameters6)
    If Not IsMissing(parameters7) Then argVector.appendValue getParameters(parameters7)
    If Not IsMissing(parameters8) Then argVector.appendValue getParameters(parameters8)
    If Not IsMissing(parameters9) Then argVector.appendValue getParameters(parameters9)
    If Not IsMissing(parameters10) Then argVector.appendValue getParameters(parameters10)
    
    Set getJointParameters = argVector
End Function

Private Function getParameters(Optional parameters As Variant) As Object
    Dim argVector As Object
    
    If IsMissing(parameters) Then
        Set argVector = getObjectBag().getDatatypeFactory().getStringVector()
        argVector.setSize 0
    Else
        If VarType(parameters) = vbError Then
            Err.Raise (CInt(parameters) - 1052)
            Exit Function
        ElseIf VarType(parameters) >= vbArray Or VarType(parameters) = vbObject Then
            Set argVector = StringArray(parameters)
        Else
            Set argVector = getObjectBag().getDatatypeFactory().getStringVector()
            argVector.setSize 1
            argVector.setValue 0, CStr(parameters)
        End If
    End If
    
    Set getParameters = argVector
End Function

Public Function obGet(objectLabel As Variant)
    On Error GoTo ExceptionHandler
    
    Dim displayAlertsRestore As Boolean
    displayAlertsRestore = Application.DisplayAlerts
    
    If VarType(objectLabel) = vbError Then
        obGet = objectLabel
        Exit Function
    End If
    
    setCallerInfo
    
    Application.DisplayAlerts = False
    
    Dim result As Object
    Dim resultType As String
    
    resultType = getObjectBag().getObjectType(CStr(objectLabel))
    Set result = getObjectBag().GetObject(CStr(objectLabel))
    
    Dim valueVector As Object
    Dim size As Integer
    
    Dim valueMatrix As Object
    Dim rows, cols As Integer
    Dim i, j As Integer
    
    resultType = ""
    If resultType = "java.lang.Double" Or resultType = "java.lang.Float" Then
'        Dim doubleValue As Double
'        doubleValue = result.getValue(0, 0)
        obGet = result.getValue(0, 0)
    ElseIf resultType = "[D" Or resultType = "[F" Or resultType = "[Ljava.lang.Double;" Then
'        Dim doubleVector As Object
'        Set doubleVector = getObjectBag().getDatatypeFactory().getDoubleVector()
'        doubleVector.Set result
        obGet = result.data
    ElseIf resultType = "[[D" Or resultType = "[[F" Or resultType = "[[Ljava.lang.Double;" Then
'        Set valueMatrix = getObjectBag().getDatatypeFactory().getDoubleMatrix()
'        valueMatrix.Set result
        
'        rows = valueMatrix.rows
'        cols = valueMatrix.cols
        
'        Dim DoubleMatrix() As Double
'        ReDim DoubleMatrix(0 To rows - 1, 0 To cols - 1) As Double
'        For i = 0 To rows - 1
'            For j = 0 To cols - 1
'                DoubleMatrix(i, j) = valueMatrix.getValue(i, j)
'            Next
'        Next
        obGet = result.GetData()
    ElseIf resultType = "java.lang.Integer" Then
        Dim integerValue As Long
        If resultType = "I" Or resultType = "S" Then
            integerValue = result
        Else
            integerValue = result.intValue
        End If
        obGet = integerValue
    ElseIf resultType = "[I" Or resultType = "[B" Or resultType = "[S" Or resultType = "[J" Or resultType = "[Ljava.lang.Integer;" Then
        Dim integerVector As Object
        Set integerVector = getObjectBag().getDatatypeFactory().getIntegerVector()
        integerVector.Set result
        obGet = integerVector.data
    ElseIf resultType = "[[I" Or resultType = "[[B" Or resultType = "[[S" Or resultType = "[[J" Or resultType = "[[Ljava.lang.Integer;" Then
        Set valueMatrix = getObjectBag().getDatatypeFactory().getIntegerMatrix()
        valueMatrix.Set result
        
        rows = valueMatrix.rows
        cols = valueMatrix.cols
        
        Dim IntegerMatrix() As Integer
        ReDim IntegerMatrix(0 To rows - 1, 0 To cols - 1) As Integer
        For i = 0 To rows - 1
            For j = 0 To cols - 1
                IntegerMatrix(i, j) = valueMatrix.getValue(i, j)
            Next
        Next
        obGet = IntegerMatrix
    ElseIf resultType = "java.lang.Boolean" Then
        Dim booleanValue As Boolean
        booleanValue = result.booleanValue
        obGet = booleanValue
    ElseIf resultType = "[Z" Or resultType = "[Ljava.lang.Boolean;" Then
        Dim booleanVector As Object
        Set booleanVector = getObjectBag().getDatatypeFactory().getBooleanVector()
        booleanVector.Set result
        obGet = booleanVector.data
    ElseIf resultType = "[[Z" Or resultType = "[[Ljava.lang.Boolean;" Then
        Set valueMatrix = getObjectBag().getDatatypeFactory().getBooleanMatrix()
        valueMatrix.Set result
        
        rows = valueMatrix.rows
        cols = valueMatrix.cols
        
        Dim BooleanMatrix() As Boolean
        ReDim BooleanMatrix(0 To rows - 1, 0 To cols - 1) As Boolean
        For i = 0 To rows - 1
            For j = 0 To cols - 1
                BooleanMatrix(i, j) = valueMatrix.getValue(i, j)
            Next
        Next
        obGet = BooleanMatrix
    ElseIf resultType = "[C" Or resultType = "[Ljava.lang.String;" Then
        Dim stringVector As Object
        Set stringVector = getObjectBag().getDatatypeFactory().getStringVector()
        stringVector.Set result
        obGet = stringVector.data
    ElseIf resultType = "[[C" Or resultType = "[[Ljava.lang.String;" Then
        Set valueMatrix = getObjectBag().getDatatypeFactory().getStringMatrix()
        valueMatrix.Set result
        
        rows = valueMatrix.rows
        cols = valueMatrix.cols
        
        Dim StringMatrix() As String
        ReDim StringMatrix(0 To rows - 1, 0 To cols - 1) As String
        For i = 0 To rows - 1
            For j = 0 To cols - 1
                StringMatrix(i, j) = valueMatrix.getValue(i, j)
            Next
        Next
        obGet = StringMatrix
    Else
        obGet = result.GetData()
    End If
    Application.DisplayAlerts = displayAlertsRestore
    Exit Function
    
ExceptionHandler:
    Application.DisplayAlerts = displayAlertsRestore
    Dim errorNumber As Long
    errorNumber = Err.Number
    
    If errorNumber > 0 Then
        obGet = CVErr(errorNumber + 1052)
    Else
        obGet = CVErr(xlErrValue)
    End If
End Function

Public Function obRelease(objectLabel As String) As String
    setCallerInfo
    
     obRelease = getObjectBag().releaseObject(objectLabel)
End Function

Public Function obReleaseDeferred(objectLabel As String) As String
    setCallerInfo
    
     obReleaseDeferred = getObjectBag().releaseObjectDeferred(objectLabel)
End Function

Public Function obLoad(fileName As String, Optional parameters1 As Variant, Optional parameters2 As Variant, Optional parameters3 As Variant, Optional parameters4 As Variant, Optional parameters5 As Variant, Optional parameters6 As Variant, Optional parameters7 As Variant, Optional parameters8 As Variant, Optional parameters9 As Variant, Optional parameters10 As Variant)
    setCallerInfo
    
    Dim argVector As Object
    Dim obLoadObjects2 As Object
    Set argVector = getJointParameters(parameters1, parameters2, parameters3, parameters4, parameters5, parameters6, parameters7, parameters8, parameters9, parameters10)
    obLoadObjects = getObjectBag().loadObjects(fileName, argVector).data
End Function

Public Function obSave(fileName As String, Optional parameters1 As Variant, Optional parameters2 As Variant, Optional parameters3 As Variant, Optional parameters4 As Variant, Optional parameters5 As Variant, Optional parameters6 As Variant, Optional parameters7 As Variant, Optional parameters8 As Variant, Optional parameters9 As Variant, Optional parameters10 As Variant) As String
    setCallerInfo
    
    Dim argVector As Object
    Set argVector = getJointParameters(parameters1, parameters2, parameters3, parameters4, parameters5, parameters6, parameters7, parameters8, parameters9, parameters10)
    obSaveObjects = getObjectBag().saveObjects(fileName, argVector)
End Function

Public Function obGetProperty(key As String) As String
    If key = "test.client.excel" Then
        obGetProperty = "OK"
    Else
        obGetProperty = getObjectBag().getProperty(key)
    End If
End Function

Public Function obSetProperty(key As String, value As String) As String
    obSetProperty = getObjectBag().setProperty(key, value)
End Function

Public Function obControlPanelSetVisible(visible As Boolean)
    setCallerInfo
    
    getObjectBag().setControlPanelVisible visible
   
    obControlPanelSetVisible = visible
End Function

Private Function StringArray(vector As Variant) As Object
    Dim datatypeFactory As Object
    Dim result As Object
    Dim isVector As Boolean
    Dim isRange As Boolean
    
    ' Create new StringVector
    Set datatypeFactory = getObjectBag().getDatatypeFactory()
    Set result = datatypeFactory.getStringVector()
    
    ' Set size
    Dim rows As Long
    Dim cols As Long
    If IsMissing(vector) Or IsEmpty(vector) Then
        rows = 0
        cols = 0
    ElseIf TypeOf vector Is Range Then
        isRange = True
        rows = vector.rows.Count
        cols = vector.columns.Count
    Else
        isRange = False
        rows = UBound(vector, 1) 'vector.rows.Count
BeginDetermineSize:
        On Error GoTo EndDetermineSize
        cols = 1
        isVector = True
        cols = UBound(vector, 2) 'vector.columns.Count
        isVector = False
EndDetermineSize:
        On Error GoTo 0
    End If
'    result.setSize (rows * cols)

    Dim valueArray() As String
    ReDim valueArray(0 To ((rows * cols) - 1))
    
    ' Copy data
    Dim row, col As Long
    Dim index As Long
    Dim value As Variant
    index = 0
    If isRange Then
        For row = 1 To rows
            For col = 1 To cols
                value = vector.Cells(row, col).value
                If VarType(value) = vbError Then Err.Raise (value)
'                result.setValue index, CStr(value)
                valueArray(index) = CStr(value)
                index = index + 1
            Next
        Next
    Else
        For row = 1 To rows
            If isVector Then
                    value = vector(row) '.Cells(row, col).value
                    If VarType(value) = vbError Then Err.Raise (value)
'                    result.setValue index, CStr(value)
                    valueArray(index) = CStr(value)
                    index = index + 1
            Else
                For col = 1 To cols
                    value = vector(row, col) '.Cells(row, col).value
                    If VarType(value) = vbError Then Err.Raise (value)
'                    result.setValue index, CStr(value)
                    valueArray(index) = CStr(value)
                    index = index + 1
                Next
            End If
        Next
    End If
    
    result.setFromArray valueArray
    
    Set StringArray = result
End Function

Private Function StringMatrix(vector As Variant) As Object
    Dim datatypeFactory As Object
    Dim result As Object
    Dim isRange As Boolean
    
    ' Create new DoubleVector
    Set datatypeFactory = getObjectBag().getDatatypeFactory()
    Set result = datatypeFactory.getStringMatrix()
    
    ' Set size
    Dim rows As Long
    Dim cols As Long
    If IsMissing(vector) Or IsEmpty(vector) Then
        rows = 0
        cols = 0
    ElseIf TypeOf vector Is Range Then
        isRange = True
        rows = vector.rows.Count
        cols = vector.columns.Count
    Else
        isRange = False
        rows = UBound(vector, 1) 'vector.rows.Count
        cols = UBound(vector, 2) 'vector.columns.Count
    End If
'    result.setSize rows, cols

    Dim valueArray() As String
    ReDim valueArray(0 To ((rows * cols) - 1))
    
    ' Copy data
    Dim row, col As Long
    Dim value As Variant
    Dim index As Long
    index = 0
    If isRange Then
        For row = 1 To rows
            For col = 1 To cols
                value = vector.Cells(row, col).value
                If VarType(value) = vbError Then Err.Raise (value)
'                result.setValue (row - 1), (col - 1), CStr(value)
                valueArray(index) = CStr(value)
                index = index + 1
            Next
        Next
    Else
        For row = 1 To rows
            For col = 1 To cols
                value = vector(row, col) '.Cells(row, col).value
                If VarType(value) = vbError Then Err.Raise (value)
'                result.setValue (row - 1), (col - 1), CStr(value)
                valueArray(index) = CStr(value)
                index = index + 1
            Next
        Next
    End If
    
    result.setFromArray rows, cols, valueArray
    
    Set StringMatrix = result
End Function


Private Function BooleanArray(vector As Variant) As Object
    Dim datatypeFactory As Object
    Dim result As Object
    
    ' Create new BooleanVector
    Set datatypeFactory = getObjectBag().getDatatypeFactory()
    Set result = datatypeFactory.getBooleanVector()
    
    ' Set size
    Dim rows As Long
    Dim cols As Long
    If IsMissing(vector) Or IsEmpty(vector) Then
        rows = 0
        cols = 0
    Else
        rows = vector.rows.Count
        cols = vector.columns.Count
    End If
    result.setSize (rows * cols)

    ' Copy data
    Dim row, col As Long
    Dim index As Long
    Dim value As Boolean
    index = 0
    For row = 1 To rows
        For col = 1 To cols
            value = vector.Cells(row, col).value
            result.setValue index, value
            index = index + 1
        Next
    Next

    Set BooleanArray = result
End Function

Private Function BooleanMatrix(vector As Variant) As Object
    Dim datatypeFactory As Object
    Dim result As Object
    
    ' Create new DoubleVector
    Set datatypeFactory = getObjectBag().getDatatypeFactory()
    Set result = datatypeFactory.getBooleanMatrix()
    
    ' Set size
    Dim rows As Long
    Dim cols As Long
    If IsMissing(vector) Or IsEmpty(vector) Then
        rows = 0
        cols = 0
    Else
        rows = vector.rows.Count
        cols = vector.columns.Count
    End If
    result.setSize rows, cols

    ' Copy data
    Dim row, col As Long
    Dim value As Boolean
    For row = 1 To rows
        For col = 1 To cols
            value = vector.Cells(row, col).value
            result.setValue (row - 1), (col - 1), value
        Next
    Next
    
    Set BooleanMatrix = result
End Function

Private Function ObjectArray(vector As Variant) As Object
    Dim datatypeFactory As Object
    Dim result As Object
        
    ' Create new ObjectVector
    Set datatypeFactory = getObjectBag().getDatatypeFactory()
    Set result = datatypeFactory.getObjectVector()
    
    ' Set size
    Dim rows As Long
    Dim cols As Long
    If IsMissing(vector) Or IsEmpty(vector) Then
        rows = 0
        cols = 0
    Else
        rows = vector.rows.Count
        cols = vector.columns.Count
    End If
    result.setSize (rows * cols)
        
    ' Copy data
    Dim row, col As Long
    Dim index As Long
    Dim value As Object
    index = 0
    For row = 1 To rows
        For col = 1 To cols
            value = vector.Cells(row, col).value
            result.setValue index, value
            index = index + 1
        Next
    Next
    
    Set ObjectArray = result
End Function

Private Function ObjectMatrix(vector As Variant) As Object
    Dim datatypeFactory As Object
    Dim result As Object
    
    ' Create new DoubleVector
    Set datatypeFactory = getObjectBag().getDatatypeFactory()
    Set result = datatypeFactory.getObjectMatrix()
    
    ' Set size
    Dim rows As Long
    Dim cols As Long
    If IsMissing(vector) Or IsEmpty(vector) Then
        rows = 0
        cols = 0
    Else
        rows = vector.rows.Count
        cols = vector.columns.Count
    End If
    result.setSize rows, cols

    ' Copy data
    Dim row, col As Long
    Dim value As Object
    For row = 1 To rows
        For col = 1 To cols
            value = vector.Cells(row, col).value
            result.setValue (row - 1), (col - 1), value
        Next
    Next
    
    Set ObjectMatrix = result
End Function
Private Function IntegerArray(vector As Variant) As Object
    Dim datatypeFactory As Object
    Dim result As Object
        
    ' Create new DoubleVector
    Set datatypeFactory = getObjectBag().getDatatypeFactory()
    Set result = datatypeFactory.getIntegerVector()
    
    ' Set size
    Dim rows As Long
    Dim cols As Long
    If IsMissing(vector) Or IsEmpty(vector) Then
        rows = 0
        cols = 0
    Else
        rows = vector.rows.Count
        cols = vector.columns.Count
    End If
    result.setSize (rows * cols)
        
    ' Copy data
    Dim row, col As Long
    Dim index As Long
    Dim value As Integer
    index = 0
    For row = 1 To rows
        For col = 1 To cols
            value = vector.Cells(row, col).value
            result.setValue index, value
            index = index + 1
        Next
    Next
    
    Set IntegerArray = result
End Function

Private Function IntegerMatrix(vector As Variant) As Object
    Dim datatypeFactory As Object
    Dim result As Object
    
    ' Create new DoubleVector
    Set datatypeFactory = getObjectBag().getDatatypeFactory()
    Set result = datatypeFactory.getIntegerMatrix()
    
    ' Set size
    Dim rows As Long
    Dim cols As Long
    If IsMissing(vector) Or IsEmpty(vector) Then
        rows = 0
        cols = 0
    Else
        rows = vector.rows.Count
        cols = vector.columns.Count
    End If
    result.setSize rows, cols

    ' Copy data
    Dim row, col As Long
    Dim value As Integer
    For row = 1 To rows
        For col = 1 To cols
            value = vector.Cells(row, col).value
            result.setValue (row - 1), (col - 1), value
        Next
    Next
    
    Set IntegerMatrix = result
End Function

Private Function DoubleArray(vector As Variant) As Object
    Dim datatypeFactory As Object
    Dim result As Object
    Dim isVector As Boolean
    Dim isRange As Boolean
        
    ' Create new DoubleVector
    Set datatypeFactory = getObjectBag().getDatatypeFactory()
    Set result = datatypeFactory.getDoubleVector()
    
    ' Set size
    Dim rows As Long
    Dim cols As Long
    If IsMissing(vector) Or IsEmpty(vector) Then
        rows = 0
        cols = 0
    ElseIf TypeOf vector Is Range Then
        isRange = True
        rows = vector.rows.Count
        cols = vector.columns.Count
    Else
        isRange = False
        rows = UBound(vector, 1) 'vector.rows.Count
BeginDetermineSize:
        On Error GoTo EndDetermineSize
        cols = 1
        isVector = True
        cols = UBound(vector, 2) 'vector.columns.Count
        isVector = False
EndDetermineSize:
        On Error GoTo 0
    End If
'    result.setSize (rows * cols)

    Dim valueArray() As Double
    ReDim valueArray(0 To ((rows * cols) - 1))
    
    ' Copy data
    Dim row, col As Long
    Dim index As Long
    Dim value As Variant
    index = 0
    If isRange Then
        For row = 1 To rows
            For col = 1 To cols
                value = vector.Cells(row, col).value
                If VarType(value) = vbError Then Err.Raise (value)
'                result.setValue index, CDbl(value)
                valueArray(index) = CDbl(value)
                index = index + 1
            Next
        Next
    Else
        For row = 1 To rows
            If isVector Then
                    value = vector(row) '.Cells(row, col).value
                    If VarType(value) = vbError Then Err.Raise (value)
'                    result.setValue index, CDbl(value)
                    valueArray(index) = CDbl(value)
                    index = index + 1
            Else
                For col = 1 To cols
                    value = vector(row, col) '.Cells(row, col).value
                    If VarType(value) = vbError Then Err.Raise (value)
'                    result.setValue index, CDbl(value)
                    valueArray(index) = CDbl(value)
                    index = index + 1
                Next
            End If
        Next
    End If
    
    result.setFromArray valueArray
    
    Set DoubleArray = result
End Function

Private Function DoubleMatrix(vector As Variant) As Object
    Dim datatypeFactory As Object
    Dim result As Object
    Dim isRange As Boolean
    
    ' Create new DoubleVector
    Set datatypeFactory = getObjectBag().getDatatypeFactory()
    Set result = datatypeFactory.getDoubleMatrix()
    
    ' Set size
    Dim rows As Long
    Dim cols As Long
    If IsMissing(vector) Or IsEmpty(vector) Then
        rows = 0
        cols = 0
    ElseIf TypeOf vector Is Range Then
        isRange = True
        rows = vector.rows.Count
        cols = vector.columns.Count
    Else
        isRange = False
        rows = UBound(vector, 1) 'vector.rows.Count
        cols = UBound(vector, 2) 'vector.columns.Count
    End If
'    result.setSize rows, cols
    
    Dim valueArray() As Double
    ReDim valueArray(0 To ((rows * cols) - 1))
    
    ' Copy data
    Dim row, col As Long
    Dim value As Variant
    Dim index As Long
    index = 0
    If isRange Then
        For row = 1 To rows
            For col = 1 To cols
                value = vector.Cells(row, col).value
                If VarType(value) = vbError Then Err.Raise (value)
'                result.setValue (row - 1), (col - 1), CDbl(value)
                valueArray(index) = CDbl(value)
                index = index + 1
            Next
        Next
    Else
        For row = 1 To rows
            For col = 1 To cols
                value = vector(row, col) '.Cells(row, col).value
                If VarType(value) = vbError Then Err.Raise (value)
'                result.setValue (row - 1), (col - 1), CDbl(value)
                valueArray(index) = CDbl(value)
                index = index + 1
            Next
        Next
    End If
    
    result.setFromArray rows, cols, valueArray

    Set DoubleMatrix = result
End Function

Private Sub Auto_Open()
End Sub

Private Sub Auto_Close()
    obDeleteCustomCommandBarControl "obbaMenu" ' Remove menus if it already exists
End Sub

Private Sub obCreateMenu()
    Dim obMenu As CommandBarControl
    Dim obSubMenu As CommandBarControl
    obDeleteCustomCommandBarControl "obbaMenu" ' Remove menus if it already exists
    Set obMenu = Application.CommandBars("Worksheet Menu Bar").Controls.Add(Type:=msoControlPopup)
    With obMenu
        .Caption = "&Obba"
        .Tag = "obbaMenu"
        .BeginGroup = True
    End With
    
    ' add a submenu
    With obMenu.Controls.Add(msoControlButton, 1, , , True)
        .Caption = "Show control panel"
        .Tag = "obbaShowCPanel"
        .OnAction = ThisWorkbook.Name & "!menuShowControlPanel"
        .Enabled = True
        .BeginGroup = False
    End With

    ' add a submenu
    With obMenu.Controls.Add(msoControlButton, 1, , , True)
        .Caption = "Hide control panel"
        .Tag = "obbaHideCPanel"
        .OnAction = ThisWorkbook.Name & "!menuHideControlPanel"
        .Enabled = True
        .BeginGroup = False
    End With

    ' add a submenu
    With obMenu.Controls.Add(msoControlButton, 1, , , True)
        .Caption = "Format cell: hide object handle number"
        .Tag = "obbaHideHandle"
        .OnAction = ThisWorkbook.Name & "!menuHideHandle"
        .Enabled = True
        .BeginGroup = True
    End With
End Sub


Private Sub obDeleteCustomCommandBarControl(CustomControlTag As String)
    On Error Resume Next
    Do
        Application.CommandBars.FindControl(, , CustomControlTag, False).Delete
    Loop Until Application.CommandBars.FindControl(, , CustomControlTag, False) Is Nothing
    On Error GoTo 0
End Sub

Sub menuShowControlPanel()
    getObjectBag().setControlPanelVisible True
End Sub

Sub menuHideControlPanel()
    getObjectBag().setControlPanelVisible False
End Sub

Sub menuHideHandle()
    Dim targetCell As Range
    For Each targetCell In Selection.Cells()
        targetCell.WrapText = True
        targetCell.RowHeight = targetCell.Font.size * 4 / 3
    Next
End Sub

Private Sub setCallerInfo()
    If TypeName(Application.Caller) = "Range" Then
        getObjectBag().setDebuggingInfo "ob:caller", CStr(Application.Caller.Worksheet.Name) & "!" & CStr(Application.Caller.Address)
    End If
    
    If TypeName(Application.Caller) = "String" Then
        getObjectBag().setDebuggingInfo "ob:caller", CStr(Application.Caller)
    End If
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
