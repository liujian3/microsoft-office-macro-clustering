Attribute VB_Name = "Accessibility"
'-------------------------------------------------------------------------------------------------------------------------------
'---- Routines used for Accessibility support in Default Workbook
'---- The Accessibility flag is read from the Registry (GUI setting)
'---- In Accessibiliy mode a new command bar is created, which supports the functions of the embedded Buttons Info and Filter
'-------------------------------------------------------------------------------------------------------------------------------

Private pAccMode As String

'----- Returns whether application runs in Accessibility mode
Public Property Get paccessibility() As Boolean
    If pAccMode = "" Then
       pAccMode = RegistryGet("General", "AccMode")
       If pAccMode <> "on" Then pAccMode = "off"
    End If
    If pAccMode = "on" Then paccessibility = True Else paccessibility = False
End Property


'----- Returns the CommandBar Menu which is used for Accessibility support
Private Property Get pMenu() As Object
   Dim l_control As CommandBarControl
   Set l_control = Application.CommandBars.FindControl(Tag:="DFWFilter")
   If l_control Is Nothing Then
       Set pMenu = Nothing
   Else
       Set pMenu = l_control.Parent
   End If
End Property

'----- Creates the CommandBar Menu
Sub create_menu()
    Dim ctrlpopup As CommandBarPopup
    Dim ctrlbutton As CommandBarButton
    Dim l_cb As CommandBar
    Dim l_name As String
            
    If Application.CommandBars.FindControl(Tag:="DFWFilter") Is Nothing Then
        Set l_cb = Application.CommandBars.Add(temporary:=True, Name:="Default Workbook")
        Set ctrlbutton = l_cb.Controls.Add(Type:=msoControlButton, temporary:=True)
         With ctrlbutton
            .Caption = "&Filter"
            .Style = msoButtonCaption
            .Tag = "DFWFilter"
        End With
        Set ctrlbutton = l_cb.Controls.Add(Type:=msoControlButton, temporary:=True)
        With ctrlbutton
          .Caption = "&Info"
          .Style = msoButtonCaption
          .Tag = "DFWInfo"
        End With
    End If
    reset_menu
    pMenu.Visible = True
End Sub
'----- Delete the CommandBar Menu
Sub delete_menu()
    Dim l_wb As Workbook
    Dim l_wb_exists As Boolean
    
    l_wb_exists = False
    If Not pMenu Is Nothing Then
' Delete only, when no Default Workbook is available anymore
      For Each l_wb In Application.Workbooks
         If l_wb.FullName <> ThisWorkbook.FullName Then
            If Not l_wb.Worksheets("Table") Is Nothing Then
              l_wb_exists = True
            End If
         End If
      Next l_wb
      If Not l_wb_exists Then
         pMenu.Delete
      End If
    End If
End Sub
'----- Show CommandBar Menu
Sub show_menu()
  If Not pMenu Is Nothing Then
     pMenu.Visible = True
   End If
End Sub
'----- Hide the CommandBar Menu
Sub hide_menu()
   If Not pMenu Is Nothing Then
     pMenu.Visible = False
   End If
End Sub
'----- Reset the CommandBar Menu (e.g. switch to another Workbook)
Sub reset_menu()
   If Not pMenu Is Nothing Then
      If Sheet2.Visible = False Or Sheet2.Shapes("Filter").Visible Then
        With pMenu.Controls("Filter")
           .State = msoButtonUp
           .Parameter = True
           .OnAction = "menu_filter_click"
        End With
      Else
        With pMenu.Controls("Filter")
           .State = msoButtonDown
           .Parameter = False
           .OnAction = "menu_filter_click"
        End With
      End If
      If Sheet2.Visible = False Or Sheet2.Shapes("Info").Visible Then
        With pMenu.Controls("Info")
           .State = msoButtonUp
           .Parameter = True
           .OnAction = "menu_info_click"
        End With
      Else
        With pMenu.Controls("Info")
           .State = msoButtonDown
           .Parameter = False
           .OnAction = "menu_info_click"
        End With
      End If
   End If
End Sub
'----- Action when executing Filter Button in CommandBarMenu
Sub menu_filter_click()
  If pMenu.Controls("Filter").Parameter = "True" Then
     Sheet2.filter_click
     With pMenu.Controls("Filter")
       .State = msoButtonDown
       .Parameter = "False"
   End With
  Else
     Sheet2.filterA_click
     With pMenu.Controls("Filter")
       .State = msoButtonUp
       .Parameter = "True"
   End With
  End If
    
End Sub
'----- Action when executing Info Button in CommandBarMenu
Sub menu_info_click()
  If pMenu.Controls("Info").Parameter = "True" Then
     Sheet2.Info_click
     With pMenu.Controls("Info")
       .State = msoButtonDown
       .Parameter = "False"
   End With
  Else
     Sheet2.InfoA_click
     With pMenu.Controls("Info")
       .State = msoButtonUp
       .Parameter = "True"
   End With
  End If
    
End Sub

Attribute VB_Name = "DefaultWorkbook"
Private pFilterVisible As Boolean
Private pInfoVisible As Boolean
Private pTableVisible As Boolean
Private Const cButtonDist As Integer = 15
'------------------------------------
'--- Setter Methods for ButtonStates
'------------------------------------
Public Sub SetTableVisible()
pTableVisible = True
End Sub
Public Sub SetTableInVisible()
pTableVisible = False
End Sub
Public Sub SetFilterVisible()
  pFilterVisible = True
End Sub
Public Sub SetFilterInvisible()
pFilterVisible = False
End Sub
Public Sub SetInfoVisible()
pInfoVisible = True
End Sub
Public Sub SetInfoInvisible()
pInfoVisible = False
End Sub

'--------------------------------------------------------
'--- Adjust Visibility and Position of Buttons depending on ButtonState
'---------------------------------------------------------
Public Sub AdjustButtons()
On Error Resume Next
Dim lsheet As Worksheet
' Adjust Filter Button
If pFilterVisible Then
  For Each lsheet In ThisWorkbook.Sheets()
    If lsheet.Range("C14").Value = "Filter" Then
         lsheet.Shapes("Filter").Visible = msoFalse
    End If
  Next lsheet
Else
  For Each lsheet In ThisWorkbook.Sheets()
    If lsheet.Range("C14").Value = "Filter" Then
        lsheet.Shapes("Filter").Visible = msoCTrue
    End If
  Next lsheet
End If
'Adjust FilterA Button
If pFilterVisible Then
  For Each lsheet In ThisWorkbook.Sheets()
    If lsheet.Range("C14").Value = "Filter" Then
       lsheet.Shapes("FilterA").Visible = msoCTrue
    End If
  Next lsheet
Else
  For Each lsheet In ThisWorkbook.Sheets()
    If lsheet.Range("C14").Value = "Filter" Then
       lsheet.Shapes("FilterA").Visible = msoFalse
    End If
  Next lsheet
End If
'Adjust InfoButton
  If pFilterVisible Then
    For Each lsheet In ThisWorkbook.Sheets()
      If lsheet.Range("F5").Value = "Information" Then
         lsheet.Shapes("Info").Left = lsheet.Shapes("FilterA").Left + lsheet.Shapes("FilterA").Width + cButtonDist
      End If
    Next lsheet
  Else
    For Each lsheet In ThisWorkbook.Sheets()
      If lsheet.Range("F5").Value = "Information" Then
         lsheet.Shapes("Info").Left = lsheet.Shapes("Filter").Left + lsheet.Shapes("Filter").Width + cButtonDist
      End If
    Next lsheet
  End If

If pInfoVisible Then
  For Each lsheet In ThisWorkbook.Sheets()
      If lsheet.Range("F5").Value = "Information" Then
           lsheet.Shapes("Info").Visible = msoFalse
      End If
   Next lsheet
Else
  For Each lsheet In ThisWorkbook.Sheets()
      If lsheet.Range("F5").Value = "Information" Then
          lsheet.Shapes("Info").Visible = msoCTrue
      End If
  Next lsheet
End If
'Adjust InfoAButton
If pInfoVisible Then
  If pFilterVisible Then
    For Each lsheet In ThisWorkbook.Sheets()
      If lsheet.Range("F5").Value = "Information" Then
          lsheet.Shapes("InfoA").Left = lsheet.Shapes("FilterA").Left + lsheet.Shapes("FilterA").Width + cButtonDist
      End If
     Next lsheet
  Else
     For Each lsheet In ThisWorkbook.Sheets()
      If lsheet.Range("F5").Value = "Information" Then
           lsheet.Shapes("InfoA").Left = lsheet.Shapes("Filter").Left + lsheet.Shapes("Filter").Width + cButtonDist
      End If
     Next lsheet
  End If
     For Each lsheet In ThisWorkbook.Sheets()
      If lsheet.Range("F5").Value = "Information" Then
         lsheet.Shapes("InfoA").Visible = msoCTrue
      End If
     Next lsheet
Else
     For Each lsheet In ThisWorkbook.Sheets()
      If lsheet.Range("F5").Value = "Information" Then
         lsheet.Shapes("InfoA").Visible = msoFalse
      End If
     Next lsheet
End If
'Adjust Chart
If pFilterVisible Then
    Sheet2.Shapes("Chart").Left = Sheet2.Shapes("FilterA").Left - Sheet2.Shapes("Chart").Width - cButtonDist
    Sheet3.Shapes("TableA").Left = Sheet3.Shapes("FilterA").Left - Sheet3.Shapes("TableA").Width - cButtonDist
Else
    Sheet2.Shapes("Chart").Left = Sheet2.Shapes("Filter").Left - Sheet2.Shapes("Chart").Width - cButtonDist
    Sheet3.Shapes("TableA").Left = Sheet3.Shapes("Filter").Left - Sheet3.Shapes("TableA").Width - cButtonDist
End If
End Sub

'--------------------------------------------------------
'--- Adjust Visibility of Filter Area (Columns) and Info Area (Rows) depending on State
'---------------------------------------------------------
Sub AdjustCells()
Dim lsheet As Worksheet
On Error Resume Next
If pFilterVisible Then
  For Each lsheet In ThisWorkbook.Sheets()
    If lsheet.Range("C14").Value = "Filter" Then
          lsheet.Range("C1:D1").Columns.Hidden = False
    End If
  Next lsheet
Else
  For Each lsheet In ThisWorkbook.Sheets()
    If lsheet.Range("C14").Value = "Filter" Then
          lsheet.Range("C1:D1").Columns.Hidden = True
     End If
  Next lsheet
End If
If pInfoVisible Then
  For Each lsheet In ThisWorkbook.Sheets()
    If lsheet.Range("C14").Value = "Filter" Then
        lsheet.Range("C5:D11").Rows.Hidden = False
     End If
  Next lsheet
Else
For Each lsheet In ThisWorkbook.Sheets()
    If lsheet.Range("C14").Value = "Filter" Then
         lsheet.Range("C5:D11").Rows.Hidden = True
     End If
  Next lsheet
End If
End Sub

'--------------------------------------------------------
'--- Adjust Visibility of Sheet (Table / Chart)
'---------------------------------------------------------
 Sub adjustSheets()
 On Error Resume Next
 If pTableVisible Then
   Sheet2.Visible = xlSheetVisible
   Sheet3.Visible = xlSheetHidden
   Sheet2.Activate
 Else
   Sheet3.Visible = xlSheetVisible
   Sheet2.Visible = xlSheetHidden
   Sheet3.Activate
 End If
 AdjustCells
 AdjustButtons
 End Sub

'--------------------------------------------------------
'--- Reformat the Filter Area with the correct stlyes
'---------------------------------------------------------
Sub setFilterStyle()
 Dim i As Integer
 Dim lRange As Range
 Dim lsheet As Worksheet
 
 On Error Resume Next
 i = 16
 
 'Calculate Filter-Area
 While Sheet2.Cells(i, 3) <> ""
    
    i = i + 1
 Wend
'Filter Area
 For Each lsheet In ThisWorkbook.Worksheets
  If lsheet.Range("C14").Value = "Filter" Then
    Set lRange = Range(lsheet.Cells(15, 3), lsheet.Cells(i - 1, 4))
    lRange.ClearFormats
    With lRange.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 47
    End With
    With lRange.Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 47
    End With
     With lRange.Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 47
    End With
    With lRange.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 47
    End With
     With lRange.Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 47
    End With
    With lRange.Borders(xlInsideVertical)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = 47
    End With
    lRange.Interior.ColorIndex = 2
  End If
 Next lsheet

' No more filter Area
For Each lsheet In ThisWorkbook.Worksheets
 If lsheet.Range("C14").Value = "Filter" Then
  'Calculate Filter-Area
    l_old = i
    While Sheet2.Cells(l_old, 3) = "" And l_old <= 200
        l_old = l_old + 1
     Wend
     Set lRange = Range(lsheet.Cells(i, 3), lsheet.Cells(l_old - 1, 4))
     lRange.ClearFormats
  End If
Next lsheet
 
End Sub

'--------------------------------------------------------
'--- Service Function to get the Name Object back
'---------------------------------------------------------
Private Function getName(i_name As String) As Name
   Dim l_name As Name
     For Each l_name In ThisWorkbook.Names
        If l_name.Name = i_name Then
            Set getName = l_name
        End If
     Next l_name
End Function

'--------------------------------------------------------
'--- Call-Back Macro: Executed on Refresh for each Table Item
'---------------------------------------------------------
Sub CallBack(ParamArray varname())
On Error Resume Next
Dim lColumn As Integer
Dim lRange2 As Range
Dim lGridTitle As String
Dim lName As Name


lGridTitle = "DF_" & varname(2)

' Get all columns count and clear if necessary
Set lName = getName(lGridTitle)
If Not lName Is Nothing Then
   Set lRange2 = lName.RefersToRange
   Set lRange2 = lRange2.Offset(-1, 0).Rows(1)
   If lRange2.Cells(1, 1).Value = "Table" Then
      lRange2.Cells(1, 1).ClearContents
      lRange2.ClearFormats
   End If
   lName.Delete
End If
' Save new position as Name
ThisWorkbook.Names.Add lGridTitle, "=" & varname(1).Worksheet.Name & "!" & varname(1).Address

' Set new Table Header
With varname(1).Offset(-1, 0).Rows(1)
    .Font.Size = 10
    .Font.FontStyle = "Bold"
    .Interior.ColorIndex = 51
    .Interior.Pattern = xlSolid
    .Interior.PatternColorIndex = xlAutomatic
    .Cells(1, 1) = "Table"
 End With
' Adjust styles of Filter Area
 Call setFilterStyle
 
' Adapt Title in Title Box
 Sheet2.Shapes("TextQueryTitle").DrawingObject.Text = Sheet2.Range("E1").Value
 Sheet3.Shapes("TextQueryTitle").DrawingObject.Text = Sheet2.Range("E1").Value

' Set Print Area in Table Worksheet (min Columns A - K)
 If (varname(1).Columns.Count + varname(1).Column > 13) Then
       lColumn = varname(1).Columns.Count + varname(1).Column
 Else
       lColumn = 13
 End If
 varname(1).Worksheet.PageSetup.PrintArea = Range(Cells(1, 1), Cells(varname(1).Rows.Count + varname(1).Row, lColumn)).Address
 varname(1).Worksheet.DisplayAutomaticPageBreaks = False
 
' Add Accessibility Features
  If Accessibility.paccessibility Then
      Accessibility.reset_menu
      Accessibility.show_menu
  End If

 End Sub




Attribute VB_Name = "Service"
'----- routines for registry management

Private Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" ( _
    ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, _
    ByVal samDesired As Long, phkResult As Long) As Long
Private Declare Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" ( _
    ByVal hKey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, _
    lpType As Long, lpData As Any, lpcbData As Long) As Long
    ' Note that if you declare the lpData parameter as String, you must pass it ByVal
Private Declare Function RegCloseKey Lib "advapi32.dll" (ByVal hKey As Long) As Long


Public Function RegistryGet(iSubKeyName As String, _
                            Optional iValueName As String, _
                            Optional iHiveLocalMachine As Boolean) As String
    Const KEY_QUERY_VALUE = &H1
    Dim lHive As Long
    Dim lKeyName As String * 60
    Dim lValName As String * 60
    Dim lRegKey As Long
    Dim lItemType As Long
    Dim lItemLength As Long
    Dim lItemBuffer As String * 255
    
    lKeyName = IIf(iHiveLocalMachine, "Software\", "Software\SAP\") & iSubKeyName & vbNullChar
    lHive = IIf(iHiveLocalMachine, &H80000002, &H80000001)   ' HKEY_LOCAL_MACHINE or HKEY_CURRENT_USER ?
    lValName = iValueName & vbNullChar
    If RegOpenKeyEx(lHive, lKeyName, 0, KEY_QUERY_VALUE, lRegKey) = 0 Then
        lItemType = 1
        lItemLength = 255
        Call RegQueryValueEx(lRegKey, lValName, 0, lItemType, ByVal lItemBuffer, lItemLength)
        If lItemLength > 0 Then RegistryGet = Left(lItemBuffer, lItemLength - 1)
        Call RegCloseKey(lRegKey)
    End If

End Function

Sub Adjust()

Sheet2.Shapes("Info").Width = Sheet2.Shapes("InfoA").Width
Sheet2.Shapes("Info").Height = Sheet2.Shapes("InfoA").Height
Sheet2.Shapes("Info").Top = Sheet2.Shapes("InfoA").Top
Sheet2.Shapes("Info").Left = Sheet2.Shapes("InfoA").Left
Sheet2.Shapes("Info").Visible = msoFalse
Sheet2.Shapes("Info").Visible = msoCTrue
Sheet3.Shapes("Info").Width = Sheet3.Shapes("InfoA").Width
Sheet3.Shapes("Info").Height = Sheet3.Shapes("InfoA").Height
Sheet3.Shapes("Info").Top = Sheet3.Shapes("InfoA").Top
Sheet3.Shapes("Info").Left = Sheet3.Shapes("InfoA").Left
Sheet3.Shapes("Info").Visible = msoFalse
Sheet3.Shapes("Info").Visible = msoCTrue
End Sub



Sub save_wb_invisible()
On Error Resume Next
Dim lWIndow As Window
 
For Each lWIndow In ThisWorkbook.Windows
 lWIndow.Caption = ""
lWIndow.Visible = False
Next
ThisWorkbook.Save
End Sub


Sub MakeReadyToXlsmFormat()
    Dim lShape As Shape
    Dim lFoundShape As Boolean
    lFoundShape = False
    For Each lShape In Sheet1.Shapes
        If lShape.Name = "BExRepositorySheet" Then
            lFoundShape = True
            Exit For
        End If
    Next lShape
    If lFoundShape = True Then
        lShape.TextFrame2.TextRange.Text = Sheet1.Scripts(1).ScriptText
    Else
        Set lShape = Sheet1.Shapes.AddShape(1, 5, 5, 5, 5)
        lShape.Name = "BExRepositorySheet"
        lShape.Visible = False
        lShape.TextFrame2.TextRange.Text = Sheet1.Scripts(1).ScriptText
    End If
    
       
    Call ThisWorkbook.SaveAs(, FileFormat:=52)
    
End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Sub Table_click()
If ActiveSheet.Name <> "Graph" Then
   MsgBox "Not possible with Sheet Drill"
Else
   If ActiveWorkbook.ProtectStructure = True Then
      MsgBox "Protected Workbook: This Option is not available"
   Else
     If (ActiveSheet.ProtectContents = True) Then
            MsgBox "Protected Worksheet: This Option is not availabe"
      Else
            Call DefaultWorkbook.SetTableVisible
            Call DefaultWorkbook.adjustSheets
      End If
   End If
 End If
End Sub
Sub filterA_click()
   If (ActiveSheet.ProtectContents = True) Then
            MsgBox "Protected Worksheet: This Option is not availabe"
   Else
     DefaultWorkbook.SetFilterInvisible
     DefaultWorkbook.AdjustCells
     DefaultWorkbook.AdjustButtons
   End If
End Sub
Sub filter_click()
   If (ActiveSheet.ProtectContents = True) Then
            MsgBox "Protected Worksheet: This Option is not availabe"
   Else
      DefaultWorkbook.SetFilterVisible
      DefaultWorkbook.AdjustCells
      DefaultWorkbook.AdjustButtons
   End If
End Sub

Sub Info_click()
   If (ActiveSheet.ProtectContents = True) Then
            MsgBox "Protected Worksheet: This Option is not availabe"
   Else
      DefaultWorkbook.SetInfoVisible
      DefaultWorkbook.AdjustCells
      DefaultWorkbook.AdjustButtons
   End If
End Sub
Sub InfoA_click()
   If (ActiveSheet.ProtectContents = True) Then
            MsgBox "Protected Worksheet: This Option is not availabe"
   Else
       DefaultWorkbook.SetInfoInvisible
       DefaultWorkbook.AdjustCells
       DefaultWorkbook.AdjustButtons
   End If
End Sub

Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Sub filterA_click()
      If (ActiveSheet.ProtectContents = True) Then
            MsgBox "Protected Worksheet: This Option is not availabe"
      Else
           DefaultWorkbook.SetFilterInvisible
           DefaultWorkbook.AdjustCells
           DefaultWorkbook.AdjustButtons
      End If
End Sub
Sub filter_click()
      If (ActiveSheet.ProtectContents = True) Then
            MsgBox "Protected Worksheet: This Option is not availabe"
      Else
           DefaultWorkbook.SetFilterVisible
           DefaultWorkbook.AdjustCells
           DefaultWorkbook.AdjustButtons
      End If
End Sub


Sub Info_click()
      If (ActiveSheet.ProtectContents = True) Then
            MsgBox "Protected Worksheet: This Option is not availabe"
      Else
        DefaultWorkbook.SetInfoVisible
        DefaultWorkbook.AdjustCells
        DefaultWorkbook.AdjustButtons
      End If
End Sub
Sub InfoA_click()
      If (ActiveSheet.ProtectContents = True) Then
            MsgBox "Protected Worksheet: This Option is not availabe"
      Else

             DefaultWorkbook.SetInfoInvisible
             DefaultWorkbook.AdjustCells
             DefaultWorkbook.AdjustButtons
      End If
End Sub
Sub Graph_click()
If ActiveSheet.Name <> "Table" Then
   MsgBox "Not possible with Sheet Drill"
Else
   If ActiveWorkbook.ProtectStructure = True Then
      MsgBox "Protected Workbook: This Option is not available"
   Else
      If (ActiveSheet.ProtectContents = True) Then
            MsgBox "Protected Worksheet: This Option is not availabe"
      Else
            DefaultWorkbook.SetTableInVisible
            DefaultWorkbook.adjustSheets
      End If
    End If
End If
End Sub

Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Sub filterA_click()
      If (ActiveSheet.ProtectContents = True) Then
            MsgBox "Protected Worksheet: This Option is not availabe"
      Else
           DefaultWorkbook.SetFilterInvisible
           DefaultWorkbook.AdjustCells
           DefaultWorkbook.AdjustButtons
      End If
End Sub
Sub filter_click()
      If (ActiveSheet.ProtectContents = True) Then
            MsgBox "Protected Worksheet: This Option is not availabe"
      Else
           DefaultWorkbook.SetFilterVisible
           DefaultWorkbook.AdjustCells
           DefaultWorkbook.AdjustButtons
      End If
End Sub


Sub Info_click()
      If (ActiveSheet.ProtectContents = True) Then
            MsgBox "Protected Worksheet: This Option is not availabe"
      Else
        DefaultWorkbook.SetInfoVisible
        DefaultWorkbook.AdjustCells
        DefaultWorkbook.AdjustButtons
      End If
End Sub
Sub InfoA_click()
      If (ActiveSheet.ProtectContents = True) Then
            MsgBox "Protected Worksheet: This Option is not availabe"
      Else

             DefaultWorkbook.SetInfoInvisible
             DefaultWorkbook.AdjustCells
             DefaultWorkbook.AdjustButtons
      End If
End Sub
Sub Graph_click()
If ActiveSheet.Name <> "Table" Then
   MsgBox "Not possible with Sheet Drill"
Else
   If ActiveWorkbook.ProtectStructure = True Then
      MsgBox "Protected Workbook: This Option is not available"
   Else
      If (ActiveSheet.ProtectContents = True) Then
            MsgBox "Protected Worksheet: This Option is not availabe"
      Else
            DefaultWorkbook.SetTableInVisible
            DefaultWorkbook.adjustSheets
      End If
    End If
End If
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Workbook_BeforeClose(Cancel As Boolean)
If Accessibility.paccessibility Then
     Accessibility.delete_menu
  End If
End Sub


Private Sub Workbook_Open()
  If Accessibility.paccessibility Then
     Accessibility.create_menu
     Accessibility.show_menu
  End If
End Sub


Private Sub Workbook_WindowActivate(ByVal Wn As Window)
    If Accessibility.paccessibility Then
         Accessibility.reset_menu
         Accessibility.show_menu
    End If
End Sub

Private Sub Workbook_WindowDeactivate(ByVal Wn As Window)
    If Accessibility.paccessibility Then
         Accessibility.hide_menu
    End If
End Sub



INQUEST-PP=macro
