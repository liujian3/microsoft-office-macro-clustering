Attribute VB_Name = "Formatting"
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Const firstFormRow = 13 'header row
Private Const firstFormCol = 3
Private Const lastBTcol = 35
Private Const lastFormCol = 9 'user defined col
Private Const numFormProp = 5 'includes the format itself
Private Const maxFormRows = 25 'include top and bottom row
Private Const bgBlack = 1
Private Const noBgnd As Integer = -4142
Private Const defCol As Integer = 0

Private Const rowSheetName = 9
Private Const colSheetName = 8

Private Const LastHeaderCol = 37
Private Const defReportTypeCol = 5
Private Const defTypeCol = 6
Private Const defTaskTypeCol = 10
Private Const defDetailsCol = 13
Private Const defUserDefinedCol = 0
Private Const defUserDefinedCol2 = 0
Private Const defEventTimeCol = 0


Dim reportTypeCol  As Integer
Dim typeCol As Integer
Dim taskTypeCol  As Integer
Dim detailsCol  As Integer
Dim userDefinedCol  As Integer
Dim userDefinedCol2  As Integer
Dim eventTimeCol  As Integer


Private Const baseCol = 9
Private Const baseRow = 13

Private Const LpcCol = 3
Private Const PidCol = 4


Private Type lineFormat
    vgColor As Long
    bgcolor As Long
    bold As Boolean
    italic As Boolean
    apply As Boolean
End Type

Private Type lineProperties
    reportType As String
    mType As String
    taskType As String
    lDetails As String
    userDefined As String
    userDefined2 As String ' Or conidtion
    userDefinedOperator As Boolean
End Type

Public Sub ApplyFormatToSheets()
    Dim wsAvailable As Boolean
    Dim sheetName As String
    
   
    If IsEmpty(Cells(rowSheetName, colSheetName)) Then
        'Format all
        applyFormatToAllSheet
    Else
        sheetName = Cells(rowSheetName, colSheetName).Value
        wsAvailable = checkWsName(sheetName)
        If wsAvailable = True Then
            'Format Sheet
            Worksheets(sheetName).Activate
            applyFormatToSheet
        End If
    End If
End Sub


Public Sub applyFormatToAllSheet()

Dim WS_Count As Integer
         Dim i As Integer

         WS_Count = ActiveWorkbook.Worksheets.Count

         For i = 1 To WS_Count
           
             ActiveWorkbook.Worksheets(i).Activate
             If ActiveWorkbook.Worksheets(i).Name <> "Links" Then
                applyFormatToSheet
             End If
            
         Next i

End Sub


Public Sub applyFormatToSheet()
Attribute applyFormatToSheet.VB_ProcData.VB_Invoke_Func = "m\n14"
    Dim Row As Integer
    Dim lastRow As Integer
    Dim shortStr As String
    Dim evTime As String
    Dim ampm As Integer

                   
    If ActiveSheet.Name <> "Links" Then
        ClearFormatSheet
        setFormatColumns
        lastRow = getLastRow
        For Row = 2 To lastRow
            applyLineFormat (Row)
        Next Row
        FormatCol (LpcCol)
        FormatCol (PidCol)
   End If
End Sub


Public Sub deleteAllSheets()

    Dim WS_Count As Integer
         Dim i As Integer

         WS_Count = ActiveWorkbook.Worksheets.Count
         Application.DisplayAlerts = False

         ActiveWorkbook.Worksheets(1).Select
         For i = 1 To WS_Count
                   
             If ActiveWorkbook.ActiveSheet.Name <> "Links" Then
                ActiveSheet.Delete
             Else
                Columns("A:A").Select
                Selection.ClearContents
                If ActiveWorkbook.Worksheets.Count > 1 Then
                  ActiveWorkbook.ActiveSheet.Next.Select
                End If
             End If
         Next i
         Application.DisplayAlerts = True


End Sub

'----------------------------------------------------------
' PRIVATE
'----------------------------------------------------------

Private Function getFormatCol(hdrColStr As String) As Integer
    
    Dim hdrCol As Integer
    Dim found As Boolean
    
    found = False
    hdrCol = 1
    While found = False And hdrCol <= LastHeaderCol
  
        If ActiveSheet.Cells(1, hdrCol).Value = hdrColStr Then
            found = True
        Else
            hdrCol = hdrCol + 1
        End If
    Wend
    getFormatCol = hdrCol
End Function

Private Sub setFormatColumns()
    
    'Set the proper columns to check
    reportTypeCol = getFormatCol(ThisWorkbook.Sheets("Links").Cells(firstFormRow, 4).Value)
    If reportTypeCol = LastHeaderCol Then
            reportTypeCol = defReportTypeCol
    End If
    typeCol = getFormatCol(ThisWorkbook.Sheets("Links").Cells(firstFormRow, 5).Value)
    If typeCol = LastHeaderCol Then
            typeCol = defTypeCol
    End If
    taskTypeCol = getFormatCol(ThisWorkbook.Sheets("Links").Cells(firstFormRow, 6).Value)
    If taskTypeCol = LastHeaderCol Then
            taskTypeCol = defTaskTypeCol
    End If
    detailsCol = getFormatCol(ThisWorkbook.Sheets("Links").Cells(firstFormRow, 7).Value)
    If detailsCol = LastHeaderCol Then
            detailsCol = defDetailsCol
    End If
    userDefinedCol = getFormatCol(ThisWorkbook.Sheets("Links").Cells(firstFormRow, 8).Value)
    If userDefinedCol > LastHeaderCol Then
            userDefinedCol = defUserDefinedCol
    End If
    userDefinedCol2 = getFormatCol(ThisWorkbook.Sheets("Links").Cells(firstFormRow, 9).Value)
    If userDefinedCol > LastHeaderCol Then
            userDefinedCol2 = defUserDefinedCol2
    End If
    eventTimeCol = getFormatCol("EVENT_TIME")
    If eventTimeCol = LastHeaderCol Then
            eventTimeCol = defEventTimeCol
    End If
End Sub


Private Sub ClearFormatSheet()
    Dim lRow As Integer
    Dim i As Integer
    
    lRow = getLastRow
  
    For i = 2 To lRow
        ActiveSheet.Cells(i, 1).EntireRow.Interior.ColorIndex = noBgnd
        ActiveSheet.Cells(i, 1).EntireRow.Font.bold = False
        ActiveSheet.Cells(i, 1).EntireRow.Font.italic = False
        ActiveSheet.Cells(i, 1).EntireRow.Font.Color = defCol
    Next i
   
    'Select first row blackbgnd, bold
    ActiveSheet.Rows("1:1").Select
    Selection.Font.bold = True
    With Selection.Font
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
        .bold = True
    End With
    With Selection.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
        .PatternTintAndShade = 0
        .ColorIndex = 1
    End With

    ActiveSheet.Range("A2").Select
 
End Sub


Private Sub applyLineFormat(Row As Integer)
  Dim line As lineProperties
  Dim format As lineFormat
  Dim actRow As Integer
  Dim udCol As Integer
  
 
  actRow = Row
  line.reportType = ActiveSheet.Cells(actRow, reportTypeCol).Value
  line.mType = ActiveSheet.Cells(actRow, typeCol).Value
  line.taskType = ActiveSheet.Cells(actRow, taskTypeCol).Value
  line.lDetails = ActiveSheet.Cells(actRow, detailsCol).Value
  If userDefinedCol > 0 Then
    line.userDefined = ActiveSheet.Cells(actRow, userDefinedCol).Value
  Else
    line.userDefined = ""
  End If
  If userDefinedCol2 > 0 Then
    line.userDefined2 = ActiveSheet.Cells(actRow, userDefinedCol2).Value
  Else
    line.userDefined2 = ""
  End If
  
  format.apply = False
  format = getLineFormat(line, userDefinedCol, userDefinedCol2)
  
  If format.apply = True Then
      ActiveSheet.Cells(actRow, 1).EntireRow.Font.Color = format.vgColor
      ActiveSheet.Cells(actRow, 1).EntireRow.Interior.ColorIndex = format.bgcolor
      ActiveSheet.Cells(actRow, 1).EntireRow.Font.bold = format.bold
      ActiveSheet.Cells(actRow, 1).EntireRow.Font.italic = format.italic
  End If
End Sub

Private Function getReporttypeCol()

End Function


'Call from sheet to get the format for a a line
'Input: the properties of the current line
Private Function getLineFormat(ByRef lineProp As lineProperties, userCol, userCol2) As lineFormat
    Dim fRow As Integer
    Dim fCol As Integer
    Dim lRow As Integer
    Dim lCol As Integer
    Dim found As Boolean
    Dim userCondFound As Boolean
    Dim userCond2Found As Boolean
    Dim userCondAv As Boolean
    Dim userCond2Av As Boolean
    Dim userCondAND As Boolean

    Dim ready As Boolean

    Dim Row As Integer
        
    fRow = firstFormRow
    fCol = firstFormCol
    lCol = firstFormCol + numFormProp
    lRow = getLastFormRow()
    found = True
    userCondFound = False
    
    Row = firstFormRow + 1
    ready = False
    
    While ready = False
        If IsEmpty(Cells(Row, firstFormCol)) = True Then
            found = False
        Else
            'Check conditions for first 4 columns AND function
            found = ((Cells(Row, firstFormCol + 1).Value = lineProp.reportType) Or IsEmpty(Cells(Row, firstFormCol + 1))) And _
                    ((Cells(Row, firstFormCol + 2).Value = lineProp.mType) Or IsEmpty(Cells(Row, firstFormCol + 2))) And _
                    ((Cells(Row, firstFormCol + 3).Value = lineProp.taskType) Or IsEmpty(Cells(Row, firstFormCol + 3))) And _
                    (InStr(lineProp.lDetails, Cells(Row, firstFormCol + 4).Value) > 0 Or IsEmpty(Cells(Row, firstFormCol + 4)))
            'Not all cells allowed empty
            found = found And Not (IsEmpty(Cells(Row, firstFormCol + 1)) And IsEmpty(Cells(Row, firstFormCol + 2)) And IsEmpty(Cells(Row, firstFormCol + 3)) And IsEmpty(Cells(Row, firstFormCol + 4)))
            
            'Check user defined, found if at least 1 is found
             userCondAv = userCol > 0 And Not IsEmpty(Cells(Row, firstFormCol + 5))
             userCondAv2 = userCol2 > 0 And Not IsEmpty(Cells(Row, firstFormCol + 6))
             userCondFound = userCondAv And InStr(lineProp.userDefined, Cells(Row, firstFormCol + 5).Value) > 0
             userCond2Found = userCondAv2 And InStr(lineProp.userDefined2, Cells(Row, firstFormCol + 6).Value) > 0
      
             If Cells(Row, firstFormCol + 7).Value = "AND" And userCondAv And userCondAv2 Then
             ' both user conditions required
                found = found And userCondFound And userCond2Found
             Else
                If (userCondAv Or userCondAv2) Then
                    found = found And (userCondFound Or userCond2Found)
                'Else no usercondition just first 4 columns
                End If
             End If
        End If
        If found = True Then
            ready = True
        Else
           Row = Row + 1
           ready = Cells(Row, firstFormCol).Interior.ColorIndex = bgBlack Or Row = lRow
        End If
     Wend
    
    If found = True Then
        getLineFormat.vgColor = Cells(Row, firstFormCol).Font.Color
        getLineFormat.bgcolor = Cells(Row, firstFormCol).Interior.ColorIndex
        getLineFormat.bold = Cells(Row, firstFormCol).Font.bold
        getLineFormat.italic = Cells(Row, firstFormCol).Font.italic
        getLineFormat.apply = True
    Else
        getLineFormat.apply = False
    End If

End Function


Private Function getLastFormRow() As Integer

    Dim Row As Integer
    Row = firstFormRow
    Do
        Row = Row + 1
    Loop While (Row < firstFormRow + maxFormRows And Cells(Row, firstFormCol).Interior.ColorIndex <> bgBlack)

    getLastFormRow = Row

End Function


Private Function getLastRow() As Integer
    getLastRow = ActiveSheet.Range("E65536").End(xlUp).Row
End Function


Private Function getUdCol() As Integer
    getUdCol = 0
    If IsNumeric(Cells(firstFormRow, lastFormCol).Value) Then
     If Cells(firstFormRow, lastFormCol).Value < lastBTcol Then
           getUdCol = Cells(firstFormRow, lastFormCol).Value
     End If
    End If
End Function


Private Function checkWsName(wsName As String) As Boolean
 
 Dim WS_Count As Integer
 Dim i As Integer
 Dim present As Boolean
 
 present = True
 WS_Count = Worksheets.Count
 i = 1
 
 Do
    present = ActiveWorkbook.Worksheets(i).Name = wsName
    i = i + 1
 Loop While present = False And i <= WS_Count
 
 checkWsName = present

End Function



Function CountUniqueValues(Column As Integer) As Long
    Dim InputRange As Range
    Dim cl As Range, UniqueValues As New Collection
    Dim lastRow As Long
    
    lastRow = ActiveSheet.Range("C65536").End(xlUp).Row
      On Error Resume Next 'ignore any errors
    For Each cl In ActiveSheet.Range(ActiveSheet.Cells(2, Column), ActiveSheet.Cells(lastRow, Column))
        
        If cl.Value > 0 Then
            UniqueValues.Add cl.Value, CStr(cl.Value)  'add the unique item
        End If
    Next cl

    On Error GoTo 0

    CountUniqueValues = UniqueValues.Count

End Function


Sub GetUniqueValues(ByRef UniqueValues As Collection, Column As Integer)

    Dim InputRange As Range
    Dim cl As Range ', UniqueValues As New Collection
    Dim lastRow As Long
    
    lastRow = ActiveSheet.Range("C65536").End(xlUp).Row
      On Error Resume Next 'ignore any errors
    For Each cl In ActiveSheet.Range(ActiveSheet.Cells(2, Column), ActiveSheet.Cells(lastRow, Column))
        
        If cl.Value > 0 Then
            UniqueValues.Add cl.Value, CStr(cl.Value)  'add the unique item
        End If
    Next cl

    On Error GoTo 0

    

End Sub
        
        
Sub FormatCol(Column As Integer)

    Dim UniqVal As Long
    Dim i As Integer
    Dim UniquePidValues As New Collection
    Dim lastRow As Long
    Dim apply As Boolean
     
     
    apply = applyColFormat(Column, 1)
     
    If apply = True Then
   
        lastRow = ActiveSheet.Range("C65536").End(xlUp).Row
        GetUniqueValues UniquePidValues, Column
        UniqVal = UniquePidValues.Count
    
        If UniqVal >= 1 Then
        
            For i = 1 To UniqVal
        
               Col = Chr(Column + 64)
               ActiveSheet.Range("A1:AL1").AutoFilter Field:=Column, Criteria1:=UniquePidValues.Item(i)
               ActiveSheet.Columns(Col & ":" & Col).Select
               ActiveSheet.Range(Selection, Selection.End(xlDown)).Select
               With Selection.Interior
                   .PatternColorIndex = xlAutomatic
                   .Color = getColorVal(Column, i)
                   .TintAndShade = 0
                   .PatternTintAndShade = 0
               End With
            Next i
         
            'Blanks
            ActiveSheet.Range("A1:AL1").AutoFilter Field:=Column, Criteria1:="="
            ActiveSheet.Columns(Col & ":" & Col).Select
            ActiveSheet.Range(Selection, Selection.End(xlDown)).Select
            With Selection.Interior
               .Pattern = xlNone
               .TintAndShade = 0
               .PatternTintAndShade = 0
            End With
            
           ActiveSheet.Range("A1:AL1").AutoFilter Field:=Column
           
           ActiveSheet.Rows("1:1").Select
           With Selection.Interior
                .Pattern = xlSolid
                .PatternColorIndex = xlAutomatic
                .ThemeColor = xlThemeColorLight1
                .TintAndShade = 0
                .PatternTintAndShade = 0
                .ColorIndex = 1
           End With
        End If
   End If
    
End Sub



Function getColorVal(Column As Integer, ColorInd As Integer) As Long
   
    getColorVal = ThisWorkbook.Sheets("Links").Cells(ColorInd + baseRow, Column + baseCol).Interior.Color
    
End Function

Function applyColFormat(Column As Integer, ColorInd As Integer) As Long
   
    applyColFormat = True
    If IsEmpty(ThisWorkbook.Sheets("Links").Cells(ColorInd + baseRow, Column + baseCol)) Then
        applyColFormat = False
    End If
End Function
    
 

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Const maxDuplicateSheets = 1

Private Sub Workbook_Open()
   XmlMessage.Hide
End Sub


Sub LoopThroughFiles()

    Dim strFile As String, strPath As String, fName As String
    Dim sheetName As String
    Dim dupSheet As Integer
    Dim allowSheet As Boolean
    'strPath = "D:\Project\T3IB\TestRun\BagTracesMsg\"
    'fName = "TEXT;" + strPath + strFile

    strPath = Application.ActiveWorkbook.Path & "\"
    strFile = Dir(strPath & "*.csv")

    While strFile <> ""
    
        sheetName = strFile
        dupSheet = wsAlreadyIn(sheetName)
        If dupSheet < maxDuplicateSheets Then
            allowSheet = True
        Else
            allowSheet = False
        End If
        If dupSheet > 0 Then
            sheetName = sheetName & "(" & dupSheet & ")"
        End If
    
        If allowSheet = True Then
            Worksheets.Add(After:=Worksheets(Worksheets.Count)).Name = sheetName
            '-> code upload the file to SQL Database
            'ImportCsvFile strFile, ActiveSheet.Cells(R, 1)
            fName = "TEXT;" + strPath + strFile
      
            Success = doFileQuery(fName, sheetName)
            format
        End If
        strFile = Dir
    Wend

    AddLinks
    
End Sub

Sub UpdateLinkJP()
    AddLinks
End Sub


'Check for duplicate sheetName
'If already in  return #of copies else return 0

Private Function wsAlreadyIn(wsName As String) As Integer
  Dim dup As Integer
  Dim sheetName As String
  Dim present As Boolean
  
  sheetName = wsName
  dup = 1
  present = True
  Do
    present = checkWsName(sheetName)
    If present Then
        sheetName = wsName & "(" & dup & ")"
        dup = dup + 1
    End If
  Loop While present = True And dup <= maxDuplicateSheets
  
  wsAlreadyIn = dup - 1
End Function

Private Function checkWsName(wsName As String) As Boolean
 
 Dim WS_Count As Integer
 Dim i As Integer
 Dim present As Boolean
 
 present = True
 WS_Count = Worksheets.Count
 i = 1
 
 Do
    present = ActiveWorkbook.Worksheets(i).Name = wsName
    i = i + 1
 Loop While present = False And i <= WS_Count
 
 checkWsName = present

End Function




' filename = CSV filename without directory (test.csv)
' outSheet = name of the worksheet in the current workbook
'            where the data should go, will start in A1
Function doFileQuery(filename As String, outSheet As String) As Boolean
    Dim connectionName As String
    connectionName = filename
    With Worksheets(outSheet).QueryTables.Add(Connection:=connectionName, Destination:=Worksheets(outSheet).Range("A1"))
        .Name = filename
        .FieldNames = True
        .RowNumbers = False
        .FillAdjacentFormulas = False
        .PreserveFormatting = True
        .RefreshOnFileOpen = False
        .RefreshStyle = xlOverwriteCells
        .SavePassword = False
        .SaveData = True
        .AdjustColumnWidth = True
        .RefreshPeriod = 0
        .TextFilePromptOnRefresh = False
        .TextFilePlatform = 437
        .TextFileStartRow = 1
        .TextFileParseType = xlDelimited
        .TextFileTextQualifier = xlTextQualifierDoubleQuote
        .TextFileConsecutiveDelimiter = False
        .TextFileTabDelimiter = False
        .TextFileSemicolonDelimiter = True
        .TextFileCommaDelimiter = False
        .TextFileSpaceDelimiter = False
        .Refresh BackgroundQuery:=False
    End With
End Function


Private Sub AddLinks()
            Dim wksLinks As Worksheet
            Dim wks As Worksheet
            Dim Row As Integer
            Set wksLinks = Worksheets("Links")
            wksLinks.Activate
            Columns("A:A").Select
            Selection.ClearContents
            Row = 1
            For Each wks In Worksheets
               ' Debug.Print wks.Name
                wks.Hyperlinks.Add wksLinks.Cells(Row, 1), "", wks.Name & "!A1", , wks.Name
                Row = Row + 1
            Next wks
        End Sub




Private Sub format()

    Dim lastRow As Long
    Dim i As Integer
    
    lastRow = ActiveSheet.Range("C65536").End(xlUp).Row
    If lastRow > 1 Then
    'non empty sheet
        Rows("1:1").Select
        Selection.Font.bold = True
        With Selection.Font
            .ThemeColor = xlThemeColorDark1
            .TintAndShade = 0
            .bold = True
        End With
        With Selection.Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .ThemeColor = xlThemeColorLight1
            .TintAndShade = 0
            .PatternTintAndShade = 0
            .ColorIndex = 1
        End With
        Selection.AutoFilter
        With ActiveWindow
            .SplitColumn = 0
            .SplitRow = 1
        End With
        ActiveWindow.FreezePanes = True
        Columns("A:A").Select
        Selection.EntireColumn.Hidden = True
        ' Selection.EntireColumn.AutoFit
        Range("A1").Select
        ActiveWindow.Zoom = 85
    End If
    
   ' For i = 2 To lastRow
    '    Cells(i, 39) = formatMsg(i, 38)
  '  Next
   ' Columns("AM:AM").Select
    Selection.EntireColumn.Hidden = True
 End Sub

Private Function formatMsg(Row As Integer, Col As Integer) As String

    Dim MsgFmt As String
    Dim remCr As String
    
    MsgFmt = Cells(Row, Col)
    If IsEmpty(Cells(Row, Col)) = False Then
        MsgFmt = Replace(Cells(Row, Col), "_CR_", Chr(13))
        'remCr = Replace(Cells(Row, Col), "_CR_", "")
        'remCr = Replace(remCr, Chr(10), "")
        'Cells(Row, Col) = Replace(remCr, " ", "")
    End If
    formatMsg = MsgFmt
   
End Function



Private Sub Workbook_SheetSelectionChange(ByVal Sh As Object, _
        ByVal Target As Excel.Range)
        
    Dim ShowTbox As Boolean
    
    ShowTbox = False
    If Sh.Name <> "Links" Then
        If Target.Column = 38 Or Target.Column = 2 Then
            'XmlMessage.Msg.Text = Cells(Target.Row, 13)
            XmlMessage.Msg.Text = formatMsg(Target.Row, 38)
            If Len(XmlMessage.Msg.Text) > 5 Then
                ShowTbox = True
            End If
        End If
    End If
    If ShowTbox = True Then
        XmlMessage.Show False
    Else
        XmlMessage.Hide
    End If

    'return focus to sheet
     AppActivate Application.Caption
End Sub


Sub formatPidCol()

    Dim lastRow As Long
    Dim totValues As Long
    Dim i As Integer
    Dim lRow As String
    Dim PidRange As Range
    
    'lastRow = ActiveSheet.Range("C65536").End(xlUp).Row
    'totValues = CountUniqueValues(ActiveSheet.Range(Cells(2,4),Cells(100,4))
    
    
    'PidRange = ActiveSheet.Range(Cells(2, 4), Cells(350, 4))
    'totValues = CountUniqueValues(4)
    
    FormatCol (4)

 End Sub
 
 

         
    

Attribute VB_Name = "XmlMessage"
Attribute VB_Base = "0{F34233B9-0195-4B92-B4DB-095A6E18E876}{E4D07454-06D8-4993-8507-FC2289A5D1D0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


INQUEST-PP=macro
