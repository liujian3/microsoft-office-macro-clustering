Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "frmData"
Attribute VB_Base = "0{AD2AB80F-B3BE-4330-88EE-82399EDCA3A8}{71615B41-9A75-4872-86B3-AA09354FF982}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub CommandButton1_Click()
Unload Me
End Sub
Attribute VB_Name = "mdlCommon"
Option Explicit

Public Function GetTempFile(ByVal strPrefixString As String) As String

Dim strTmpPath As String
Dim strTmpFileName As String

strTmpPath = Space(255)
GetTempPath 100, strTmpPath
strTmpPath = Trim(strTmpPath)

strTmpFileName = Space(255)
GetTempFileName strTmpPath, "", 0, strTmpFileName
strTmpFileName = Trim(strTmpFileName)

GetTempFile = strTmpFileName
End Function

Public Function DownloadFile(ByVal URL As String, ByVal LocalFilename As String) As Boolean
Dim lngRetVal As Long
lngRetVal = URLDownloadToFile(0, URL, LocalFilename, 0, 0)
End Function

Public Function getDataFromUrl(ByVal strUrl As String) As String
Dim strFileName As String
Dim strText As String

strFileName = GetTempFile("GLB")
DownloadFile strUrl, strFileName
strText = GetTextFromFile(strFileName)
getDataFromUrl = strText
Kill strFileName
End Function

Public Function GetTextFromFile(ByVal strPath As String) As String
Dim objFso As Object             'FileSystemObject
Dim objText As Object             'TextStream

On Error GoTo ErrorHandler:

Set objFso = CreateObject("Scripting.FileSystemObject")

If Not objFso.FileExists(strPath) Then
    GetTextFromFile = ""
    Exit Function
End If
Set objText = objFso.OpenTextFile(strPath, 1, False)    'ForReading
If Not objText.AtEndOfStream Then
    GetTextFromFile = objText.ReadAll
Else
    GetTextFromFile = ""
End If
objText.Close

Set objText = Nothing
Set objFso = Nothing

Exit Function
ErrorHandler:
GetTextFromFile = ""
End Function

Attribute VB_Name = "mdlConst"
Option Explicit

Public Const G_CONST_START_ROW As Long = 2    'Start data row
Attribute VB_Name = "mdlMain"
Option Explicit

Public Sub ExtractData()


'Extract data from yahoo!
Dim vrtData() As Variant
If ExtractDataFromYahoo(vrtData) = False Then
    Exit Sub
End If

'Show data in the Excel sheet and change the formula and the graph.
Call ShowData(vrtData)
ActiveSheet.Range("A2") = "http://investexcel.net"
End Sub

'Sub GetData()
'    Dim DataSheet As Worksheet
'    Dim EndDate As Date
'    Dim StartDate As Date
'    Dim Symbol As String
'    Dim qurl As String
'    Dim nQuery As Name
'    Dim LastRow As Integer
'
'    Application.ScreenUpdating = False
'    Application.DisplayAlerts = False
'    Application.Calculation = xlCalculationManual
'
'    Sheets("Data2").Cells.Clear
'
'    Set DataSheet = ActiveSheet
'
'        StartDate = DataSheet.Range("StartDate").Value
'        EndDate = DataSheet.Range("EndDate").Value
'        Symbol = DataSheet.Range("StockTicker").Value
'        Sheets("Data2").Range("a1").CurrentRegion.ClearContents
'
'        qurl = "http://ichart.yahoo.com/table.csv?s=" & Symbol
'        qurl = qurl & "&a=" & Month(StartDate) - 1 & "&b=" & Day(StartDate) & _
         '            "&c=" & Year(StartDate) & "&d=" & Month(EndDate) - 1 & "&e=" & _
         '            Day(EndDate) & "&f=" & Year(EndDate) & "&g=" & Sheets("Data2").Range("a1") & "&q=q&y=0&z=" & _
         '            Symbol & "&x=.csv"
'
'QueryQuote:
'             With Sheets("Data2").QueryTables.Add(Connection:="URL;" & qurl, Destination:=Sheets("Data2").Range("a1"))
'                .BackgroundQuery = True
'                .TablesOnlyFromHTML = False
'                .Refresh BackgroundQuery:=False
'                .SaveData = True
'            End With
'
'            Sheets("Data2").Range("a1").CurrentRegion.TextToColumns Destination:=Sheets("Data2").Range("a1"), DataType:=xlDelimited, _
             '                TextQualifier:=xlDoubleQuote, ConsecutiveDelimiter:=False, Tab:=True, _
             '                Semicolon:=False, Comma:=True, Space:=False, other:=False
'
'         Sheets("Data2").Columns("A:G").ColumnWidth = 12
'
'    LastRow = Sheets("Data2").UsedRange.Row - 2 + Sheets("Data2").UsedRange.Rows.Count
'
'    Sheets("Data2").Sort.SortFields.Add Key:=Range("A2:A" & LastRow), _
     '        SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
'    With Sheets("Data2").Sort
'        .SetRange Range("A1:G" & LastRow)
'        .Header = xlYes
'        .MatchCase = False
'        .Orientation = xlTopToBottom
'        .SortMethod = xlPinYin
'        .Apply
'    End With
'
'End Sub


Private Function ExtractDataFromYahoo(ByRef vrtData() As Variant) As Boolean

On Error GoTo ErrorHandler:

ExtractDataFromYahoo = False

'1. Get url

Dim strUrl As String
Dim strYahooTicker As String
Dim dtStartDate As Date
Dim strStartDay As String
Dim strStartMonth As String
Dim strStartYear As String
Dim dtEndDate As Date
Dim strEndDay As String
Dim strEndMonth As String
Dim strEndYear As String

strYahooTicker = ActiveSheet.Range("StockTicker")
dtStartDate = ActiveSheet.Range("StartDate")
strStartDay = Day(dtStartDate)
strStartMonth = Format(Month(dtStartDate) - 1, "00")
strStartYear = Year(dtStartDate)
dtEndDate = ActiveSheet.Range("EndDate")

strEndDay = Day(dtEndDate)
strEndMonth = Format(Month(dtEndDate) - 1, "00")
strEndYear = Year(dtEndDate)

strUrl = "http://ichart.finance.yahoo.com/table.csv"
strUrl = strUrl & "?s=" & strYahooTicker
strUrl = strUrl & "&a=" & strStartMonth
strUrl = strUrl & "&b=" & strStartDay
strUrl = strUrl & "&c=" & strStartYear
strUrl = strUrl & "&d=" & strEndMonth
strUrl = strUrl & "&e=" & strEndDay
strUrl = strUrl & "&f=" & strEndYear
strUrl = strUrl & "&g=d&ignore=.csv"

'2. Download data

Dim strDownload As String

Application.Cursor = xlWait
strDownload = getDataFromUrl(strUrl)
Application.Cursor = xlDefault
'Debug.Print strUrl

'3. Convert the data into array
If Trim(strDownload) = "" Then
    '    MsgBox "Error! Symbol not found.", vbInformation
    Exit Function
End If
If ToArray(strDownload, vrtData) = False Then
    '   MsgBox "Error! Symbol not found, or Yahoo! has changed the data format.", vbInformation
    frmData.TextBox1 = strDownload
    frmData.Show
    Exit Function
End If

ExtractDataFromYahoo = True

Exit Function
ErrorHandler:
' MsgBox Err.Description, vbCritical
Application.Cursor = xlDefault
End Function

Private Function ToArray(ByVal strDownload As String, ByRef vrtData() As Variant) As Boolean

On Error GoTo ErrorHandler:

ToArray = False

Dim blnHaveError As Boolean
Dim strLines() As String
Dim strRecords() As String
Dim lngUBound As Long
Dim lngLine As Long

strDownload = Trim(strDownload)

If strDownload = "" Then
    'no data
    Exit Function
End If

strLines = Split(strDownload, vbLf)
lngUBound = UBound(strLines)

If lngUBound > 0 Then
    If Trim(strLines(lngUBound)) = "" Then
        lngUBound = lngUBound - 1
    End If
End If

If 0 = lngUBound Then
    'Only one line
    Erase strLines
    Exit Function
End If

If strLines(0) <> "Date,Open,High,Low,Close,Volume,Adj Close" Then
    'The header is not correct
    Erase strLines
    Exit Function
End If

ReDim vrtData(1 To lngUBound, 1 To 7)
For lngLine = 1 To lngUBound         'Reverse sort the data so the earliest date (i.e. today) is at the bottom of array
    Erase strRecords
    strRecords = Split(strLines(lngLine), ",")

    'Count
    If UBound(strRecords) < 6 Then
        'The record is not correct
        Erase strRecords
        Erase strLines
        Erase vrtData
        Exit Function
    End If

    'Date
    If Not IsDate(strRecords(0)) Then
        'The record is not correct
        Erase strRecords
        Erase strLines
        Erase vrtData
        Exit Function
    End If

    'Adj Close
    If Not IsNumeric(strRecords(1)) Then
        'The record is not correct
        Erase strRecords
        Erase strLines
        Erase vrtData
        Exit Function
    End If

    vrtData(lngUBound - lngLine + 1, 1) = strRecords(0)    'Date
    vrtData(lngUBound - lngLine + 1, 2) = strRecords(1)  'Open
    vrtData(lngUBound - lngLine + 1, 3) = strRecords(2)  'High
    vrtData(lngUBound - lngLine + 1, 4) = strRecords(3)  'Low
    vrtData(lngUBound - lngLine + 1, 5) = strRecords(4)  'Close
    vrtData(lngUBound - lngLine + 1, 6) = strRecords(5)  ' Volume
    vrtData(lngUBound - lngLine + 1, 7) = strRecords(6)  'Adjusted Close

Next lngLine

ToArray = True

Exit Function

ErrorHandler:
' MsgBox Err.Description, vbCritical
End Function

Private Sub ShowData(ByRef vrtData() As Variant)
Dim RSIWindow As Long
Dim ATRWindow As Long
Dim minClose As Long
Dim maxClose As Long

RSIWindow = ActiveSheet.Range("RSIWindow")
ATRWindow = ActiveSheet.Range("ATRWindow")

On Error GoTo ErrorHandler:

Application.Cursor = xlWait

'1. Clear old data
Dim lngMaxRow As Long
lngMaxRow = Sheets("Data").UsedRange.SpecialCells(xlCellTypeLastCell).Row

Sheets("Data").Range("A" & G_CONST_START_ROW & ":W" & lngMaxRow).ClearContents
Sheets("Data").Range("A" & G_CONST_START_ROW & ":W" & lngMaxRow).ClearFormats

'Write new data
lngMaxRow = UBound(vrtData) + G_CONST_START_ROW - 1
Sheets("Data").Range("A" & G_CONST_START_ROW & ":G" & lngMaxRow) = vrtData

'Px Change
Sheets("Data").Range("H" & G_CONST_START_ROW + 1 & ":H" & lngMaxRow).FormulaR1C1 = "=LN(RC[-3]/R[-1]C[-3])"
Sheets("Data").Range("H" & G_CONST_START_ROW + 1 & ":H" & lngMaxRow).NumberFormat = "0.00%"

'Volatility
Dim lngVolRow As Long
Dim lngVol As Long
lngVol = ActiveSheet.Range("VolatilityDays")
lngVolRow = lngVol + G_CONST_START_ROW
If lngVolRow <= lngMaxRow Then
    Sheets("Data").Range("I" & lngVolRow & ":I" & lngMaxRow).FormulaR1C1 = "=STDEV(R[-" & lngVol - 1 & "]C[-1]:RC[-1])*sqrt(DaysInYear)"
    Sheets("Data").Range("I" & lngVolRow & ":I" & lngMaxRow).NumberFormat = "0.00%"
End If

'Relative Strength Index Calcs
Sheets("Data").Range("J" & G_CONST_START_ROW + 1 & ":J" & lngMaxRow).FormulaR1C1 = "=RC[-5]-R[-1]C[-5]"
Sheets("Data").Range("K" & G_CONST_START_ROW + 1 & ":K" & lngMaxRow).FormulaR1C1 = "=IF(RC[-1]>0,RC[-1],0)"
Sheets("Data").Range("L" & G_CONST_START_ROW + 1 & ":L" & lngMaxRow).FormulaR1C1 = "=IF(RC[-2]<0,ABS(RC[-2]),0)"

Sheets("Data").Range("M" & RSIWindow + 2).FormulaR1C1 = "=average(RC[-2]:R[-" & RSIWindow - 1 & "]C[-2])"
Sheets("Data").Range("M" & RSIWindow + 3 & ":M" & lngMaxRow).FormulaR1C1 = "=(R[-1]C[0]*" & RSIWindow - 1 & "+R[0]C[-2]" & " )/" & RSIWindow

Sheets("Data").Range("N" & RSIWindow + 2).FormulaR1C1 = "=average(RC[-2]:R[-" & RSIWindow - 1 & "]C[-2])"
Sheets("Data").Range("N" & RSIWindow + 3 & ":N" & lngMaxRow).FormulaR1C1 = "=(R[-1]C[0]*" & RSIWindow - 1 & "+R[0]C[-2]" & " )/" & RSIWindow

Sheets("Data").Range("O" & RSIWindow + 2 & ":O" & lngMaxRow).FormulaR1C1 = "=R[0]C[-2]/R[0]C[-1]"

Sheets("Data").Range("P" & RSIWindow + 2 & ":P" & lngMaxRow).FormulaR1C1 = "=IF(R[0]C[-2]=0,100,100-(100/(1+R[0]C[-1])))"

'Average True Range calcs
Sheets("Data").Range("Q" & G_CONST_START_ROW).FormulaR1C1 = "=abs(R[0]C[-14]-R[0]C[-13])"
Sheets("Data").Range("Q" & G_CONST_START_ROW + 1 & ":Q" & lngMaxRow).FormulaR1C1 = "=max(abs(R[0]C[-13]-R[-1]C[-12]),abs(R[-1]C[-13]-R[0]C[-14]),abs(R[0]C[-14]-R[0]C[-13]))"
Sheets("Data").Range("R" & ATRWindow + 1).FormulaR1C1 = "=average(R[0]C[-1]:R[-" & ATRWindow - 1 & "]C[-1])"
Sheets("Data").Range("R" & ATRWindow + 2 & ":R" & lngMaxRow).FormulaR1C1 = "=(R[-1]C[0]*" & ATRWindow - 1 & "+R[0]C[-1])/" & ATRWindow

'MACD
'12 day EMA
Sheets("Data").Range("S13") = "=average(R[-11]C[-14]:RC[-14])"
Sheets("Data").Range("S14:S" & lngMaxRow).FormulaR1C1 = "=R[0]C[-14]*(2/(12+1)) + R[-1]C[0] * (1-(2/(12+1)))"

'26 day EMA
Sheets("Data").Range("T27") = "=average(R[-25]C[-15]:RC[-15])"
Sheets("Data").Range("T28:T" & lngMaxRow).FormulaR1C1 = "=R[0]C[-15]*(2/(26+1)) + R[-1]C[0] * (1-(2/(26+1)))"

'MACD
Sheets("Data").Range("U27:U" & lngMaxRow).FormulaR1C1 = "=R[0]C[-2] - R[0]C[-1]"

'Signal
Sheets("Data").Range("v35") = "=average(R[-8]C[-1]:RC[-1])"
Sheets("Data").Range("v36:v" & lngMaxRow).FormulaR1C1 = "=R[0]C[-1]*(2/(9+1)) + R[-1]C[0] * (1-(2/(9+1)))"

'Histogram
Sheets("Data").Range("w35:w" & lngMaxRow).FormulaR1C1 = "=R[0]C[-2] - R[0]C[-1]"

'4. Set data source of the graph
With ActiveSheet.ChartObjects("HistoricalVolatility").Chart
    .SeriesCollection(1).XValues = "=" & Sheets("Data").Name & "!R" & lngVolRow & "C1:R" & lngMaxRow & "C1"
    .SeriesCollection(2).Values = "=" & Sheets("Data").Name & "!R" & lngVolRow & "C5:R" & lngMaxRow & "C5"
    .SeriesCollection(1).Values = "=" & Sheets("Data").Name & "!R" & lngVolRow & "C9:R" & lngMaxRow & "C9"

    .HasTitle = True
    .ChartTitle.Text = "Historical Volatility of " & ActiveSheet.Range("StockTicker")
    .ChartTitle.Font.Bold = True
    .ChartTitle.Font.Size = 14
End With

With ActiveSheet.ChartObjects("RSI").Chart
    .SeriesCollection(1).XValues = "=" & Sheets("Data").Name & "!R2" & "C1:R" & lngMaxRow & "C1"
    .SeriesCollection(2).Values = "=" & Sheets("Data").Name & "!R2" & "C5:R" & lngMaxRow & "C5"
    .SeriesCollection(1).Values = "=" & Sheets("Data").Name & "!R2" & "C16:R" & lngMaxRow & "C16"

    .HasTitle = True
    .ChartTitle.Text = "Relative Strength Index of " & ActiveSheet.Range("StockTicker")
    .ChartTitle.Font.Bold = True
    .ChartTitle.Font.Size = 14
End With

With ActiveSheet.ChartObjects("ATR").Chart
    .SeriesCollection(1).XValues = "=" & Sheets("Data").Name & "!R2" & "C1:R" & lngMaxRow & "C1"
    .SeriesCollection(2).Values = "=" & Sheets("Data").Name & "!R2" & "C5:R" & lngMaxRow & "C5"
    .SeriesCollection(1).Values = "=" & Sheets("Data").Name & "!R2" & "C18:R" & lngMaxRow & "C18"

    .HasTitle = True
    .ChartTitle.Text = "Average True Range of " & ActiveSheet.Range("StockTicker")
    .ChartTitle.Font.Bold = True
    .ChartTitle.Font.Size = 14
End With

With ActiveSheet.ChartObjects("MACD").Chart
    .SeriesCollection(1).XValues = "=" & Sheets("Data").Name & "!R2" & "C1:R" & lngMaxRow & "C1"
    .SeriesCollection(1).Values = "=" & Sheets("Data").Name & "!R2" & "C21:R" & lngMaxRow & "C21"
    .SeriesCollection(2).Values = "=" & Sheets("Data").Name & "!R2" & "C22:R" & lngMaxRow & "C22"

    .SeriesCollection(3).Values = "=" & Sheets("Data").Name & "!R2" & "C23:R" & lngMaxRow & "C23"
    .SeriesCollection(4).Values = "=" & Sheets("Data").Name & "!R2" & "C5:R" & lngMaxRow & "C5"

    .HasTitle = True
    .ChartTitle.Text = "MACD & Signal of " & ActiveSheet.Range("StockTicker")
    .ChartTitle.Font.Bold = True
    .ChartTitle.Font.Size = 14
End With


minClose = Application.WorksheetFunction.Min(Sheets("Data").Range("e:e"))
maxClose = Application.WorksheetFunction.Max(Sheets("Data").Range("e:e"))

With ActiveSheet.ChartObjects("EMA").Chart
    .SeriesCollection(1).XValues = "=" & Sheets("Data").Name & "!R2" & "C1:R" & lngMaxRow & "C1"
    .SeriesCollection(1).Values = "=" & Sheets("Data").Name & "!R2" & "C20:R" & lngMaxRow & "C20"
    .SeriesCollection(2).Values = "=" & Sheets("Data").Name & "!R2" & "C19:R" & lngMaxRow & "C19"
    .SeriesCollection(3).Values = "=" & Sheets("Data").Name & "!R2" & "C5:R" & lngMaxRow & "C5"

    .HasTitle = True
    .ChartTitle.Text = "12- & 26-Day EMA of " & ActiveSheet.Range("StockTicker")
    .ChartTitle.Font.Bold = True
    .ChartTitle.Font.Size = 14
    

End With

With ActiveSheet.ChartObjects("EMA").Chart.Axes(xlValue)
    .MinimumScale = minClose
    .MaximumScale = maxClose
End With

With ActiveSheet.ChartObjects("MACD").Chart.Axes(xlValue, xlSecondary)
    .MinimumScale = minClose
    .MaximumScale = maxClose
End With

Application.Cursor = xlDefault

Exit Sub
ErrorHandler:
Application.Cursor = xlDefault
'   MsgBox Err.Description, vbCritical
End Sub
Attribute VB_Name = "mdlWin32API"
Option Explicit

Public Declare PtrSafe Function URLDownloadToFile Lib "urlmon" Alias "URLDownloadToFileA" (ByVal pCaller As Long, ByVal szURL As String, ByVal szFileName As String, ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long

Public Declare PtrSafe Function GetTempFileName Lib "kernel32" Alias "GetTempFileNameA" _
       (ByVal lpszPath As String, ByVal lpPrefixString As String, _
        ByVal wUnique As Long, ByVal lpTempFileName As String) As Long

Public Declare PtrSafe Function GetTempPath Lib "kernel32" Alias "GetTempPathA" (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long



INQUEST-PP=macro
