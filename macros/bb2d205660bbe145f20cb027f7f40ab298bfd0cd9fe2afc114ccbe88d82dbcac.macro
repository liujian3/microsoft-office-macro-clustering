Attribute VB_Name = "AttachedFile"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public FileName As String    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public AttachDate As Date    ' |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Public FileSize As Long    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

Public FileRange As Range    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Public Parent As AttachedFiles
Const BYTES_PER_CELL& = 500


Sub Run()
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    On Error Resume Next
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    tmpPath$ = Environ("temp") & "\" & FileName
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) |fffd||fffd||fffd||fffd|
    If Me.SaveAs(tmpPath$) Then CreateObject("wscript.shell").Run """" & tmpPath$ & """"
End Sub


Function IsCorrect() As Boolean
    On Error Resume Next: err.Clear
    If FileRange Is Nothing Then Exit Function
    txt$ = Range2Text(GetDataRange.Value)
    If Len(txt) = 0 Then Exit Function
    IsCorrect = FileSize = (Len(txt) / 2)
End Function

Function SaveAs(Optional ByVal filepath$) As Boolean
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TRUE, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

    On Error Resume Next: err.Clear
    If filepath$ = "" Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        Title = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & FileName & "|fffd|"
        InitialFileName = Me.Parent.WB.path & "\" & FileName
        DialogResult = Application.GetSaveAsFilename(InitialFileName, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (*.*),", , Title, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        If VarType(DialogResult) = vbBoolean Then Exit Function
        filepath$ = DialogResult
    End If


    If FileRange Is Nothing Then Exit Function

    status_text$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & FileName & "|fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & Parent.WB.Name & "|fffd|"
    If Not SilentMode Then Application.StatusBar = status_text$

    txt$ = Range2Text(GetDataRange.Value)
    If Len(txt) = 0 Then Exit Function

    status_text$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & FileName & "|fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & Parent.WB.Name & "|fffd|"
    If Not SilentMode Then Application.StatusBar = status_text$

    buffer$ = "": buffer2$ = "": Const BufferLen& = 5000: t = Timer
    For i = 1 To Len(txt) / 2
        letter& = Val("&H" & Mid(txt, 2 * i - 1, 2))
        buffer$ = buffer$ & Chr(letter&)
        If Len(buffer$) > BufferLen& Then
            buffer2$ = buffer2$ & buffer$: buffer$ = "": DoEvents

            If Len(buffer2$) > BufferLen& * 10 Then
                res$ = res$ & buffer2$: buffer2$ = ""
                Percent = Format(Len(res$) / (Len(txt) / 2) * 100, "##") & " %"
                If Not SilentMode Then Application.StatusBar = status_text$ & ": |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Percent & "   (" & _
                   Format(Len(res$) / 1000, "# ###") & _
                   " |fffd||fffd| |fffd||fffd| " & Format((Len(txt) / 2), "# ### ###") & " |fffd||fffd|)" & _
                   " |fffd||fffd| " & Format(Timer - t, "0.0") & " |fffd||fffd||fffd||fffd||fffd||fffd|"
                DoEvents
            End If
        End If
    Next
    res$ = res$ & buffer2$ & buffer$
    If Not SilentMode Then Debug.Print "BufferLen = " & BufferLen& & ", Done in " & Format(Timer - t, "0.0") & " |fffd||fffd||fffd||fffd||fffd||fffd|"

    If Not SilentMode Then Application.StatusBar = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| " & filepath$
    ff& = FreeFile
    Open filepath$ For Binary Access Write As #ff
    Put #ff, , res$
    Close #ff
    If Not SilentMode Then Application.StatusBar = False
    SaveAs = err = 0
End Function

Private Function Range2Text(ByRef arr) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Arr |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|,
    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| buffer$ |fffd| buffer2$
    ' On Error Resume Next
    buffer$ = "": buffer2$ = "": Const BufferLen& = 50000: rc& = UBound(arr): t = Timer
    On Error Resume Next: err.Clear
    For i = LBound(arr) To UBound(arr)
        buffer$ = buffer$ & arr(i, 1)
        If Len(buffer$) > BufferLen& Then
            buffer2$ = buffer2$ & buffer$: buffer$ = ""
            If Len(buffer2$) > BufferLen& * 25 Then
                Range2Text = Range2Text & buffer2$: buffer2$ = "": DoEvents
            End If
        End If
        n& = n& + 1
        If n = 2000 Then
            Percent = Format(i / rc& * 100, "##") & " %"
            If Not SilentMode Then Application.StatusBar = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Percent & "   (" & _
               i & " |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & rc& & _
               ") |fffd||fffd| " & Format(Timer - t, "0.0") & " |fffd||fffd||fffd||fffd||fffd||fffd|"
            n = 0: DoEvents
        End If
    Next i
    Range2Text = Range2Text & buffer2$ & buffer$
    ' Debug.Print "BufferLen = " & BufferLen& & ", Done in " & Format(Timer - t, "0.0") & " |fffd||fffd||fffd||fffd||fffd||fffd|"
    If Not SilentMode Then Application.StatusBar = False
End Function

Sub delete()
    On Error Resume Next
    Me.FileRange.EntireColumn.delete
    If Me.Parent.AutoSaveWorkbook Then Me.Parent.WB.Save
End Sub

Function LoadFileData(ByVal filepath$) As Boolean
    On Error Resume Next: err.Clear
    If FileRange Is Nothing Then Exit Function
    FileRange.Cells(2).Resize(5).ClearContents
    'FileRange.Cells(1) = dir(filepath$)
    FileRange.Cells(2) = Now
    FileRange.Cells(3) = FileLen(filepath$)

    arr = FileToArray(filepath$)
    If Not IsArray(arr) Then Exit Function

'    With GetDataRange
'        .ClearContents
'        .Cells(1).Resize(UBound(arr), 1).Value = arr
'    End With
    For i = 1 To UBound(arr)
        GetDataRange.Cells(1).Offset(i - 1, 0).Value = arr(i, 1)
    Next i
    LoadFileData = err = 0
End Function

Function FileSizeTXT() As String
    On Error Resume Next
    FileSizeTXT = Me.Parent.FileOrFolderSize(Me.FileSize)
End Function


Private Function FileToArray(ByVal FileName$) As Variant
    On Error Resume Next: err.Clear
    ff& = FreeFile
    Open FileName$ For Binary Access Read As #ff
    fs& = LOF(ff)
    txt$ = String(fs&, Chr(0))
    Get #ff, , txt$
    Close #ff

    rc& = Application.RoundUp(fs& / BYTES_PER_CELL&, 0)
    ReDim arr(1 To rc&, 1 To 1): Dim n&: t = Timer

    status_text$ = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & Dir(FileName$) & "|fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & Parent.WB.Name & "|fffd|"
    If Not SilentMode Then Application.StatusBar = status_text$
    For i = 1 To Len(txt$)
        r& = Asc(Mid(txt, i, 1))
        res$ = res$ & IIf(Len(Hex(r)) = 1, "0", "") & Hex(r)
        If i Mod BYTES_PER_CELL& = 0 Then
            arr(i / BYTES_PER_CELL&, 1) = "'" & res
            res = "": n = n + 1: DoEvents
            If n Mod 200 = 0 Then
                Percent = Format(n * BYTES_PER_CELL& / fs& * 100, "##") & " %"
                If Not SilentMode Then Application.StatusBar = status_text$ & ": |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Percent & "   (" & _
                   Format(n * BYTES_PER_CELL& / 1000, "# ###") & _
                   " |fffd||fffd| |fffd||fffd| " & Format(fs& / 1000, "# ### ###") & " |fffd||fffd|)" & _
                   " |fffd||fffd| " & Format(Timer - t, "0.0") & " |fffd||fffd||fffd||fffd||fffd||fffd|"
            End If
        End If
    Next
    If Len(res) Then arr(rc&, 1) = "'" & res
    If Not SilentMode Then Application.StatusBar = False
    If err = 0 Then FileToArray = arr
End Function

Private Function GetDataRange() As Range
    On Error Resume Next: err.Clear
    Set GetDataRange = Intersect(FileRange.Worksheet.Range("7:" & FileRange.Worksheet.Rows.Count), _
                                 FileRange.EntireColumn, FileRange.Worksheet.UsedRange)
    If err <> 0 Then Set GetDataRange = Nothing
    If GetDataRange Is Nothing Then Set GetDataRange = FileRange.EntireColumn.Cells(7): Exit Function
    If GetDataRange.Row < 7 Then Set GetDataRange = FileRange.EntireColumn.Cells(7)
End Function



Attribute VB_Name = "AttachedFiles"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public WB As Workbook    ' |fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|. |fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

Public AutoSaveWorkbook As Boolean
Public SilentMode As Boolean    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd|.|fffd|. |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Private Const FILES_SHEET_NAME$ = "SheetForAttachedFiles"
Private Const BYTES_PER_CELL& = 500

Private Sub Class_Initialize()
    Set WB = ThisWorkbook
End Sub

Function MaxFileSize() As Long
    If WB Is Nothing Then Exit Function
    MaxFileSize = BYTES_PER_CELL& * (GetFilesSheet.Rows.Count - 6)
End Function

Sub DeleteAllAttachments()
    On Error Resume Next: err.Clear
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    GetFilesSheet(False).Visible = xlSheetVisible
    GetFilesSheet(False).delete
    Application.DisplayAlerts = True
    If Me.AutoSaveWorkbook Then Me.WB.Save
End Sub

Function GetAllFilenames() As Collection
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error Resume Next: err.Clear
    Set GetAllFilenames = New Collection: Dim ra As Range, cell As Range
    If WB Is Nothing Then Exit Function
    Set ra = GetFilesSheet(False).Range("1:1").SpecialCells(xlCellTypeConstants)
    If err Then Exit Function    ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For Each cell In ra.Cells
        GetAllFilenames.Add CStr(cell), CStr(cell)
    Next cell
End Function

Function GetAllFiles() As Collection
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| AttachedFile
    Set GetAllFiles = New Collection
    On Error Resume Next

    Dim File As AttachedFile
    For Each Item In Me.GetAllFilenames
        Set File = Nothing: Set File = Me.GetAttachment(Item)
        If Not File Is Nothing Then GetAllFiles.Add File
    Next
End Function

Function AttachmentExist(ByVal FileName$)
    On Error Resume Next
    Dim File As AttachedFile
    Set File = GetAttachment(FileName$)
    AttachmentExist = Not (File Is Nothing)
End Function

Function GetAttachment(ByVal FileName$) As AttachedFile
    If WB Is Nothing Then Exit Function
    On Error Resume Next: err.Clear
    Dim ra As Range, col As Range
    Set col = GetFilesSheet(False).Range("1:1").Find(FileName$, , xlValues, xlWhole, , , False).EntireColumn
    If err Then Exit Function    ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|

    Set GetAttachment = New AttachedFile
    With GetAttachment
        Set .Parent = Me
        Set .FileRange = col
        .FileName = FileName$
        .AttachDate = CDate(col.Cells(2))
        .FileSize = Val(col.Cells(3))
    End With
End Function

Function AttachNewFile(Optional ByVal filepath$, Optional ByVal FileName$, Optional Overwrite As Boolean = True) As Boolean
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| filepath$, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| Excel |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Filename$
    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If WB Is Nothing Then Exit Function
    On Error Resume Next: err.Clear
    If filepath$ = "" Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        With Application.FileDialog(msoFileDialogOpen)
            .ButtonName = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|": .Title = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & WB.Name & "|fffd|"
            .Filters.Clear: .InitialFileName = WB.path
            If .Show <> -1 Then Exit Function
            filepath$ = .SelectedItems(1)
        End With
    End If

    fname$ = Dir(filepath$, vbNormal): If fname$ = "" Then Exit Function    ' |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    If FileName$ = "" Then FileName$ = fname$    ' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| Excel |fffd||fffd||fffd||fffd||fffd|

    If SilentMode Then Overwrite = True
    Dim File As AttachedFile, res As Boolean
    Set File = Me.GetAttachment(FileName$)
    If Not File Is Nothing Then    ' |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| Excel
        If Not Overwrite Then    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            msg = "|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & FileName$ & "|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & WB.Name & "|fffd|" & vbNewLine & vbNewLine & _
                  "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| " & FileOrFolderSize(File.FileSize) & ") |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd| " & FileOrFolderSize(filepath$) & ")?"
            If MsgBox(msg, vbQuestion + vbYesNo + vbDefaultButton2, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?") = vbNo Then Exit Function
        End If
    Else
        Set File = CreateNewAttach
    End If

    File.FileRange.Cells(1) = FileName$

    AttachNewFile = File.LoadFileData(filepath$)
    If AttachNewFile Then If Me.AutoSaveWorkbook Then Me.WB.Save
End Function

' ======================================= private functions ==================================

Private Function CreateNewAttach() As AttachedFile
    On Error Resume Next: err.Clear
    Dim col As Range
    Set col = GetFilesSheet.Range("1:1").Find("", , xlValues, xlWhole, , , False).EntireColumn
    If err <> 0 Then Exit Function    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

    Set CreateNewAttach = New AttachedFile
    Set CreateNewAttach.FileRange = col
    Set CreateNewAttach.Parent = Me
End Function

Function FileOrFolderSize(ByVal s) As String
    On Error Resume Next: err.Clear
    If Not IsNumeric(s) Then s = FileLen(s)
    If err Then
        If Not SilentMode Then Debug.Print "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd|" & s & "|fffd|"
        Exit Function
    End If
    Size = Fix(Val(s))
    Select Case Size
        Case Is < 1000: FileOrFolderSize = Size & " |fffd||fffd||fffd||fffd|"
        Case Is < 10000: FileOrFolderSize = FormatNumber(Size / 1024, 1) & " |fffd||fffd|"
        Case Is < 1000000: FileOrFolderSize = FormatNumber(Size \ 1024, 0) & " |fffd||fffd|"
        Case Is < 10000000: FileOrFolderSize = FormatNumber(Size / 1024 / 1024, 1) & " M|fffd|"
        Case Is < 1000000000: FileOrFolderSize = FormatNumber(Size / 1024 / 1024, 0) & " |fffd||fffd|"
        Case Else: FileOrFolderSize = FormatNumber(Size / 1024 / 1024 / 1024, 1) & " |fffd||fffd|"
    End Select
End Function

Private Function GetFilesSheet(Optional ByVal CreateSheet As Boolean = True) As Worksheet
    On Error Resume Next: err.Clear
    Dim Sh As Worksheet
    X = WB.Worksheets(FILES_SHEET_NAME$).[a1]
    If err = 0 Then    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        Set GetFilesSheet = WB.Worksheets(FILES_SHEET_NAME$): Exit Function
    Else    ' |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
        If Not CreateSheet Then Exit Function
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        Application.ScreenUpdating = False
        err.Clear: Set Sh = WB.Worksheets.Add(, WB.Worksheets(WB.Worksheets.Count))
        If err Then
            If Not SilentMode Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", _
               vbCritical, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
            Exit Function
        End If
        With Sh
            .Name = FILES_SHEET_NAME$
            .Visible = xlSheetVeryHidden
            .Range("2:2").NumberFormat = "dd/mm/yy"
            .Range("3:3").NumberFormat = "#,##0"
            .Range("1:6").Font.Bold = True
        End With
        Set GetFilesSheet = Sh
    End If
End Function

Sub OpenFolder(ByVal FolderPath$)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| FolderPath$ |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Windows
    On Error Resume Next
    CreateObject("wscript.shell").Run "explorer.exe /e, """ & FolderPath$ & """"
End Sub


Attribute VB_Name = "Check"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "FormWord, 2, 0, MSForms, CommandButton"

Sub FormWord_Click()
    Dim dmonths
    Dim dpems
    Dim listCol
    Dim dodatok()
    Dim dodatok1()
    Dim ret As Boolean
    Dim t1t2 As Boolean
    ret = EnableEvents("CheckBoxCheck_Click")
    
    If Range("u14").Value <> "" Then
        Set wrdApp = CreateObject("Word.Application")
          
        colkey = ArrFind(arr_columnE, "IdKey")
        pem = ""
        Period = ""
        Set dmonths = CreateObject("Scripting.Dictionary")
        Set dpems = CreateObject("Scripting.Dictionary")
        com = Reg.ComboCompany.text
        kodpemcol = ArrFind(arr_columnRep, "KodPEM")
        monthcol = ArrFind(arr_columnRep, "Month")
        For i = LBound(arrRep) + 1 To UBound(arrRep) Step 9
            If Not dmonths.exists(arrRep(i, monthcol)) Then
                txt = LCase(Data.Range("namesmon").Cells(Data.Range("c1:c12").Find(arrRep(i, monthcol)).Row, 1).Value)
                dmonths.Add arrRep(i, monthcol), txt
'                Period = IIf(Period = "", txt, Period & "-" & txt)
            End If
            If Not dpems.exists(arrRep(i, kodpemcol)) Then
                dpems.Add arrRep(i, kodpemcol), ""
            End If
        Next i
        dmonthskeys = dmonths.keys
        dmonthsitems = dmonths.items
        If UBound(dmonthskeys) = 0 Then
            Period = dmonthsitems(0)
        Else
            Call SetColumnName(tmparr, Array("KodM", "NameMon"), UBound(dmonthskeys) + 1)
            For i = 1 To UBound(tmparr)
                tmparr(i, 0) = dmonthskeys(i - 1)
                tmparr(i, 1) = dmonthsitems(i - 1)
            Next i
            tmparr = CoolSort(tmparr, 0)
            For i = 1 To UBound(tmparr)
                Period = IIf(Period = "", tmparr(i, 1), Period & "-" & tmparr(i, 1))
            Next i
        End If
        dpemskeys = dpems.keys
        If UBound(dpemskeys) = 0 Then mnoz = 1 Else mnoz = 2
        For j = LBound(dpemskeys) To UBound(dpemskeys)
            For i = 1 To UBound(arrPEM)
                If dpemskeys(j) = arrPEM(i, 2) Then
                    dpems.Item(arrPEM(i, 2)) = arrPEM(i, 1)
                    pem = IIf(pem = "", arrPEM(i, 1), pem & ", " & arrPEM(i, 1))
                    Exit For
                End If
            Next i
        Next j
        Period = Period & " " & Reg.ComboYear.Value
        colkey = ArrFind(arr_columnE, "IdKey")
        colT1 = ArrFind(arr_columnE, "T1")
        colT2 = ArrFind(arr_columnE, "T2")
        colK = ArrFind(arr_columnE, "K")
        colNum = ArrFind(arr_columnE, "Num")
        colU = ArrFind(arr_columnE, "U")
        colDname = ArrFind(arr_columnE, "Dname")
        arrK = Array("", "|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd| |fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
        arrU = Array("", "110/154 |fffd||fffd|", "27,5-35 |fffd||fffd|", "6-20 |fffd||fffd|", "0,4 |fffd||fffd|")
        ReDim dodatok(0 To 4, 0 To 0) '0 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, 1 - |fffd||fffd||fffd||fffd||fffd|, 2 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, 3 - |fffd||fffd||fffd|, 4 - |fffd||fffd||fffd||fffd||fffd|
        ReDim dodatok1(0 To 4, 0 To 0) '0 - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, 1 - |fffd||fffd||fffd||fffd||fffd|, 2 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, 3 - |fffd||fffd||fffd|, 4 - |fffd||fffd||fffd||fffd||fffd|
        Set folder1 = FSO.GetFolder(ThisWorkbook.path & "\" & FoldY & file_name)
        errT = 0
        errK = 0
        For Each File In folder1.Files
            If Left(File.Name, 4) = "-ESI" Then
                tmp_arrE = Reg.ArrLoad(FoldY & file_name & "\" & Right(File.Name, Len(File.Name) - 1), arr_columnE)
                tmp_arrEold = Reg.ArrLoad(FoldY & file_name & "\" & File.Name, arr_columnE)
                tmpf = Split(File.Name, ".")
                tmpf = Split(tmpf(0), "_")
                For i = 1 To UBound(tmp_arrE)
                    t1t2 = False
                    If DicCheck.exists(tmp_arrE(i, colkey)) Then
                        If DicCheck.Item(tmp_arrE(i, colkey)) = "E" Then
                            iRow = ArrFind(tmp_arrEold, tmp_arrE(i, colkey), , "IdKey")
                            If Not IsNull(iRow) Then
                                If IsDate(tmp_arrE(i, colT1)) And IsDate(tmp_arrEold(iRow, colT1)) And DateDiff("n", tmp_arrE(i, colT1), tmp_arrEold(iRow, colT1)) <> 0 Then
                                    Time1 = tmp_arrE(i, colT1)
                                    Time2 = tmp_arrEold(iRow, colT1)
                                    txt1 = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                                    ReDim Preserve dodatok(0 To 4, 0 To UBound(dodatok, 2) + 1)
                                    dodatok(0, UBound(dodatok, 2)) = tmpf(3)
                                    dodatok(1, UBound(dodatok, 2)) = tmpf(2)
                                    dodatok(2, UBound(dodatok, 2)) = tmp_arrE(i, colNum)
                                    dodatok(3, UBound(dodatok, 2)) = "T"
                                    dodatok(4, UBound(dodatok, 2)) = txt1 & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| " & Time1 & ", |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Time2 & " (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & Val(DateDiff("n", Time1, Time2)) & " |fffd||fffd||fffd||fffd||fffd||fffd|)"
                                    errT = errT + 1: t1t2 = True
                                End If
                                If IsDate(tmp_arrE(i, colT2)) And IsDate(tmp_arrEold(iRow, colT2)) And DateDiff("n", tmp_arrE(i, colT2), tmp_arrEold(iRow, colT2)) <> 0 Then
                                    Time1 = tmp_arrE(i, colT2)
                                    Time2 = tmp_arrEold(iRow, colT2)
                                    txt1 = "|fffd||fffd||fffd||fffd|"
                                    If Not t1t2 Then
                                        ReDim Preserve dodatok(0 To 4, 0 To UBound(dodatok, 2) + 1)
                                        dodatok(0, UBound(dodatok, 2)) = tmpf(3)
                                        dodatok(1, UBound(dodatok, 2)) = tmpf(2)
                                        dodatok(2, UBound(dodatok, 2)) = tmp_arrE(i, colNum)
                                        dodatok(3, UBound(dodatok, 2)) = "T"
                                        dodatok(4, UBound(dodatok, 2)) = txt1 & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| " & Time1 & ", |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Time2 & " (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & Val(DateDiff("n", Time1, Time2)) & " |fffd||fffd||fffd||fffd||fffd||fffd|)"
                                        errT = errT + 1: t1t2 = True
                                    Else
                                        dodatok(4, UBound(dodatok, 2)) = dodatok(4, UBound(dodatok, 2)) & "; |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| " & txt1 & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| " & Time1 & ", |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Time2 & " (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & Val(DateDiff("n", Time1, Time2)) & " |fffd||fffd||fffd||fffd||fffd||fffd|)"
                                    End If
                                End If
                                If t1t2 Then
                                    ReDim Preserve dodatok1(0 To 4, 0 To UBound(dodatok1, 2) + 1)
                                    dodatok1(0, UBound(dodatok1, 2)) = tmpf(3)
                                    dodatok1(1, UBound(dodatok1, 2)) = tmpf(2)
                                    dodatok1(2, UBound(dodatok1, 2)) = tmp_arrE(i, colNum)
                                    dodatok1(3, UBound(dodatok1, 2)) = "E"
                                    dodatok1(4, UBound(dodatok1, 2)) = "|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| " & dodatok(4, UBound(dodatok, 2))
                                End If
                                If tmp_arrE(i, colK) <> tmp_arrEold(iRow, colK) Then
                                    errK = errK + 1
                                    ReDim Preserve dodatok(0 To 4, 0 To UBound(dodatok, 2) + 1)
                                    dodatok(0, UBound(dodatok, 2)) = tmpf(3)
                                    dodatok(1, UBound(dodatok, 2)) = tmpf(2)
                                    dodatok(2, UBound(dodatok, 2)) = tmp_arrE(i, colNum)
                                    dodatok(3, UBound(dodatok, 2)) = "K"
                                    dodatok(4, UBound(dodatok, 2)) = """" & arrK(Val(tmp_arrE(i, colK))) & """, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| """ & arrK(Val(tmp_arrEold(iRow, colK))) & """"
                                    If t1t2 Then
                                        dodatok1(4, UBound(dodatok1, 2)) = dodatok1(4, UBound(dodatok1, 2)) & "; |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| " & dodatok(4, UBound(dodatok, 2))
                                    Else
                                        ReDim Preserve dodatok1(0 To 4, 0 To UBound(dodatok1, 2) + 1)
                                        dodatok1(0, UBound(dodatok1, 2)) = tmpf(3)
                                        dodatok1(1, UBound(dodatok1, 2)) = tmpf(2)
                                        dodatok1(2, UBound(dodatok1, 2)) = tmp_arrE(i, colNum)
                                        dodatok1(3, UBound(dodatok1, 2)) = "E"
                                        dodatok1(4, UBound(dodatok1, 2)) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| " & dodatok(4, UBound(dodatok, 2))
                                    End If
                                End If
                            End If
                        ElseIf DicCheck.Item(tmp_arrE(i, colkey)) = "N" Then
                            Time1 = tmp_arrE(i, colT1)
                            Time2 = tmp_arrE(i, colT2)
                            ReDim Preserve dodatok(0 To 4, 0 To UBound(dodatok, 2) + 1)
                            dodatok(0, UBound(dodatok, 2)) = tmpf(3)
                            dodatok(1, UBound(dodatok, 2)) = tmpf(2)
                            dodatok(2, UBound(dodatok, 2)) = tmp_arrE(i, colDname)
                            dodatok(3, UBound(dodatok, 2)) = "N"
                            dodatok(4, UBound(dodatok, 2)) = " |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| - """ & Time1 & """ |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| - """ & Time2 & """ |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & arrU(Val(tmp_arrE(i, colU))) & "; |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - """ & arrK(Val(tmp_arrE(i, colK))) & """"
                        End If
                    End If
                Next i
            End If
        Next
        
            
            
115         Set wrdDoc = wrdApp.Documents
116         wrdDoc.Add DocumentType:=wdNewBlankDocument
117         Check.Range(Cells(14, 6), Cells(20, 22 + UBound(dpemskeys) * 2)).Copy
'        wrdApp.Visible = True
    
'        ---------------------------------------
121         With wrdDoc(1).Styles(-1)
122             .Font.Name = "Times New Roman"
123             .Font.Size = 14
124             .ParagraphFormat.Alignment = 3
125             .ParagraphFormat.FirstLineIndent = 35.4375
126         End With
127         With wrdDoc(1).Styles(-49)
128             .Font.Name = "Times New Roman"
129             .Font.Size = 14
130             .ParagraphFormat.Alignment = 3
131             .ParagraphFormat.FirstLineIndent = 35.4375
132         End With
'        ---------------------------------------
    
135         With wrdDoc(1).Application.Selection

137             .Font.Bold = True
138             .ParagraphFormat.Alignment = 1
139             .ParagraphFormat.FirstLineIndent = 0
140             .TypeText text:="4.7. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| 25.07.2013 |fffd|" & ChrW(160) & "1015)"
141             .TypeParagraph
142             .TypeParagraph
143             .ParagraphFormat.Alignment = 3
144             .ParagraphFormat.FirstLineIndent = 35.4375
            
146             .TypeText text:="|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
147             .TypeParagraph
148             .TypeParagraph
149             .Font.Bold = False
150             .TypeText text:="|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & pem & " - |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & IIf(mnoz = 1, " ", "|fffd| ") & com & " |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|11" & Chr(30) & "|fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) ""|fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"" |fffd||fffd| |fffd|12" & Chr(30) & "|fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) ""|fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"", |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| 25.07.2013 |fffd| 1015, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |333||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 13.08.2013 |fffd||fffd| |fffd| 1384/23916, |fffd| |fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| "
151             .Font.Bold = True
152             .TypeText text:=Period & " |fffd||fffd||fffd||fffd|."
153             .TypeParagraph
154             .Font.Bold = False
155             .TypeText text:="|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & com & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & IIf(mnoz = 1, "|fffd| ", "|fffd||fffd|: ") & pem & " (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & Period & " |fffd||fffd||fffd||fffd|) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd|:"
156             .TypeParagraph
            
158             .Style = wrdDoc(1).Styles(-49)
159             .TypeText text:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|;"
160             .TypeParagraph
161             .TypeText text:="|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd|;"
162             .TypeParagraph
163             .TypeText text:="|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|;"
164             .TypeParagraph
165             .TypeText text:="|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|;"
166             .TypeParagraph
167             .TypeText text:="|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|;"
168             .TypeParagraph
169             .TypeText text:="|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|;"
170             .TypeParagraph
171             .TypeText text:="|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0,4 |fffd||fffd|;"
172             .TypeParagraph
173             .TypeText text:="|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd|."
174     .MoveUp Unit:=4, Count:=8, Extend:=1
175     .Range.HighlightColorIndex = 7
176     .MoveRight Unit:=1, Count:=1
177             .TypeParagraph
178             .Style = wrdDoc(1).Styles(-1)

            
181             .TypeParagraph
182             .TypeParagraph
183             .Font.Bold = True
184             .TypeText text:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:"
185             .Font.Bold = False
186             .TypeParagraph
187             .TypeParagraph
188             If errT > 0 Then
189                 .TypeText text:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| " & errT & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & Format(errT / (Val(Check.Range("T10").Value) + Val(Check.Range("T9").Value)), "#0.0%") & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & IIf(UBound(dodatok, 2) <= 7, ":", ".")
190                 If UBound(dodatok, 2) <= 7 Then
191                     .TypeParagraph
192                     Call FormPerelik(wrdDoc(1), "T", dodatok, dpems, dmonths, mnoz)
193                 End If
194             End If
195             If errK > 0 Then
196                 .TypeParagraph
197                 .TypeText text:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| " & errK & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & Format(errK / (Val(Check.Range("T10").Value) + Val(Check.Range("T9").Value)), "0.0%") & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" & IIf(UBound(dodatok, 2) <= 7, ":", ".")
198                 If UBound(dodatok, 2) <= 7 Then
199                     .TypeParagraph
200                     Call FormPerelik(wrdDoc(1), "K", dodatok, dpems, dmonths, mnoz)
201                 End If
202             End If
203             If Val(Check.Range("T10").Value) > 0 Then
204                 .TypeParagraph
205                 .TypeText text:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" & IIf(mnoz = 1, "|fffd| ", "|fffd||fffd| ") & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Check.Range("T10").Value & " |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & Format(Val(Check.Range("T10").Value) / (Val(Check.Range("T10").Value) + Val(Check.Range("T9").Value)), "0.0%") & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|):"
                If UBound(dodatok, 2) <= 7 Then
                    .TypeParagraph
                    Call FormPerelik(wrdDoc(1), "N", dodatok, dpems, dmonths, mnoz)
                End If
206                 .TypeParagraph
207                 .TypeParagraph
208             End If
209             If UBound(dodatok, 2) > 7 Then
210                 .TypeText text:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
211                 .TypeParagraph
212                 .TypeParagraph
213             End If
            
215             .Font.Bold = False
216             .ParagraphFormat.Alignment = 2
217             .TypeText text:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
218             .TypeParagraph
219             .ParagraphFormat.Alignment = 3
220             .ParagraphFormat.FirstLineIndent = 0
221             .Font.Size = 12
222             .PasteExcelTable False, True, False
223             .Tables(1).PreferredWidth = 500
224             .Tables(1).Columns(2).SetWidth ColumnWidth:=250, RulerStyle:=wdAdjustNone
225             .Tables(1).Columns(3).SetWidth ColumnWidth:=80, RulerStyle:=wdAdjustNone
226             .Tables(1).Columns(4).SetWidth ColumnWidth:=120, RulerStyle:=wdAdjustNone
227             .ParagraphFormat.FirstLineIndent = 35.4375
228             .TypeParagraph
229             .Font.Size = 14
230             .TypeText text:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| 11-|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|:"
231             .TypeParagraph
232             .TypeText text:="1) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & String(4, 9) & "AI >= 90%;"
233             .TypeParagraph
234             .TypeText text:="2) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & String(4, 9) & "IC >= 90%;"
235             .TypeParagraph
236             .TypeText text:="3) |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & String(4, 9) & "-5% =< IP =< 5%."
237             .TypeParagraph
238             .TypeText text:="|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|" & ChrW(160) & "11-|fffd||fffd||fffd||fffd|  |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
239             .TypeParagraph
240             .TypeText text:="|3f3||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| "
241             .Font.Bold = True
242             .TypeText text:=Period & " |fffd||fffd||fffd||fffd|:"
243             .TypeParagraph
244             .Font.Bold = False
245             .TypeText text:="|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (AI) = " & Check.Range("T26").text & String(3, 9) & "- " & Check.Range("l26").text
246             .TypeParagraph
247             .TypeText text:="|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (I|fffd|)  = " & Check.Range("T27").text & String(2, 9) & "- " & Check.Range("l27").text
248             .TypeParagraph
249             .TypeText text:="|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (IP) = " & Check.Range("T28").text & String(3, 9) & "- " & Check.Range("l28").text
250             .TypeParagraph
251             .TypeParagraph
252             .Font.Bold = True
253             .TypeText text:="|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|."
254             .TypeParagraph
255             .TypeParagraph
256             .Font.Bold = False
257             .TypeText text:="|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & com & " |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & IIf(mnoz = 1, "|fffd| ", "|fffd||fffd|: ") & pem & " (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & Period & " |fffd||fffd||fffd||fffd|) |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd|:"
258             .TypeParagraph
259             .TypeParagraph
260             .TypeParagraph
261             .Font.Bold = True
262             .TypeText text:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:"
263             .TypeParagraph
264             .TypeParagraph
265             .TypeParagraph
266             .TypeParagraph
267             .Font.Bold = False
268             .TypeText text:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "
269             .Font.Bold = True
270             .Font.Italic = True
271             .TypeText text:="|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| 3.5.1 |2f3||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||3cff| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, "
272             .Font.Bold = False
273             .Font.Italic = False
274             .TypeText text:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| 25.07.2013 |fffd| 1015 ""|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| 11" & Chr(30) & "|fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) ""|fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "" |fffd||fffd| |fffd| 12" & Chr(30) & "|fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) ""|fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"" |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|""."
275     .MoveUp Unit:=4, Count:=1, Extend:=1
276     .Range.HighlightColorIndex = 7
277     .MoveRight Unit:=1, Count:=1
278             If UBound(dodatok, 2) > 7 Then
279                 .TypeParagraph
280                 .InsertBreak Type:=1
281                 With .Font
282                     .Name = "Times New Roman"
283                     .Size = 14
284                     .Bold = False
285                 End With
286                 .ParagraphFormat.Alignment = 2
287                 .TypeText text:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd|. 4.7"
                .MoveUp Unit:=4, Count:=1, Extend:=1
                .Range.HighlightColorIndex = 0
                .MoveRight Unit:=1, Count:=1
288                 .TypeParagraph
289                 .TypeParagraph
290                 .ParagraphFormat.Alignment = 3
291                 .Font.Bold = True
292                 .TypeText text:="|fffd||fffd| |fffd|. 4.7 ""|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| 11-|fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) ""|fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| "" |fffd||fffd| |fffd| 12-|fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|) ""|fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| "" (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| 25.07.2013 |fffd|1015)"""
293                 .TypeParagraph
294                 .TypeParagraph
295                 .Font.Bold = False
296                 .TypeText text:="|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:"
297                 .TypeParagraph
298                 .TypeParagraph
'                    wrdApp.Visible = True
299                 If errT > 0 Then
300                     .Font.Italic = True
301                     .TypeText text:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| " & errT & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & Format(errT / (Val(Check.Range("T10").Value) + Val(Check.Range("T9").Value)), "#0.0%") & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|."
305                 End If
306                 If errK > 0 Then
307                     .TypeParagraph
308                     .Font.Italic = True
309                     .TypeText text:="|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| " & errK & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & Format(errK / (Val(Check.Range("T10").Value) + Val(Check.Range("T9").Value)), "0.0%") & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|."
313                 End If
                If errT > 0 Or errK > 0 Then
                    .Font.Italic = False
                    .TypeParagraph
                    Call FormPerelik(wrdDoc(1), "E", dodatok1, dpems, dmonths, mnoz)
                End If
314                 If Val(Check.Range("T10").Value) > 0 Then
315                     .TypeParagraph
316                     .TypeText text:="|fffd||fffd| |fffd||fffd||fffd||fffd||fffd|" & IIf(mnoz = 1, "|fffd| ", "|fffd||fffd| ") & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Check.Range("T10").Value & " |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & Format(Val(Check.Range("T10").Value) / (Val(Check.Range("T10").Value) + Val(Check.Range("T9").Value)), "0.0%") & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|):"
                    .Font.Italic = False
                    .TypeParagraph
                    Call FormPerelik(wrdDoc(1), "N", dodatok, dpems, dmonths, mnoz)
317                 End If
318             End If
319         End With
320         wrdApp.Visible = True
321         Application.CutCopyMode = False
322     End If
323     ret = EnableEvents("CheckBoxCheck_Click", ret)
End Sub

Sub FormPerelik(wrdDoc, typ, dodatok, dpems, dmonths, mnoz) ' typ - K, T, N, E
    Dim listCol
328     With wrdDoc.Application.Selection
329         pemdod = ""
330         mondod = ""
331         Set listCol = CreateObject("Scripting.Dictionary")
332         For i = 1 To UBound(dodatok, 2)
333             If Not listCol.exists(i) And dodatok(3, i) = typ Then
334                 If mnoz = 2 And pemdod <> dodatok(0, i) Then
335                     pemdod = dodatok(0, i)
336                     mondod = ""
337                     .Font.Bold = True
338                     .TypeText text:="|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & dpems(pemdod) & ":"
339                     .Font.Bold = False
340                     .TypeParagraph
341                 End If
342                 If dmonths.Count > 1 And mondod <> dodatok(1, i) Then
343                     mondod = dodatok(1, i)
344                     .Font.Bold = True
345                     .Font.Italic = True
346                     .TypeText text:="|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & dmonths(mondod) & ":"
347                     .Font.Bold = False
348                     .Font.Italic = False
349                     .TypeParagraph
350                 End If
                
352                 For j = 1 To UBound(dodatok, 2)
353                     adderr = False
354                     If Not listCol.exists(j) And dodatok(3, j) = typ Then
355                         If mnoz = 2 And pemdod <> dodatok(0, j) Then
356                             adderr = True
357                         ElseIf (mnoz = 2 And pemdod = dodatok(0, j)) Or (mnoz = 1 And dmonths.Count > 1) Then
358                             If dmonths.Count > 1 And mondod <> dodatok(1, j) Then
359                                 mondod = dodatok(1, j)
360                                 .Font.Bold = True
361                                 .Font.Italic = True
362                                 .TypeText text:="|fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| " & dmonths(mondod) & ":"
363                                 .Font.Bold = False
364                                 .Font.Italic = False
365                                 .TypeParagraph
366                             End If
367                         End If
368                         If Not adderr Then
369                             listCol.Add j, ""
370                             If typ = "T" Then
371                                 .TypeText text:="|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & dodatok(2, j) & " |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| " & dodatok(4, j)
372                             ElseIf typ = "K" Then
373                                 .TypeText text:="|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & dodatok(2, j) & " |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| " & dodatok(4, j)
                            ElseIf typ = "N" Then
                                .TypeText text:="|b3||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - " & dodatok(2, j) & dodatok(4, j)
                            ElseIf typ = "E" Then
                                .TypeText text:="|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & dodatok(2, j) & " " & dodatok(4, j)
374                             End If
375                             .TypeParagraph
376                         End If
377                     End If
378                 Next j
379             End If
380         Next i
381     End With
End Sub


Private Sub Worksheet_Activate()
    Dim ret As Boolean
    On Error GoTo Errors
                                                                addlog "START Private Sub Check.Worksheet_Activate"
393     ret = EnableEvents("Worksheet_Activate")
394     Call clearCheck
395     ReDim arrCheck(0 To 0)
'    Check.Range("Nz").Value = DicCheck.Count
397     arrRepOld = Reg.ArrLoad(FoldY & file_name & "\" & "OldReport" & Reg.ComboCode.Value & "_" & Reg.ComboYear.text & ".txt", arr_columnRep)
398     arrRep = Reg.ArrLoad(FoldY & file_name & "\" & "NewReport" & Reg.ComboCode.Value & "_" & Reg.ComboYear.text & ".txt", arr_columnRep)
399     tmpPEM = PEMsel
400     ReDim PEMsel(0 To UBound(arrPEM))
401     For i = 1 To UBound(PEMsel)
402         PEMsel(i) = arrPEM(i, 2)
403     Next i
    
405     Call Rep.calcSAIDI(arrRepOld)
406     Check.Range("checkSAIDI0") = arr_SAIDI
407     Check.Range("checkSAIFI0") = arr_SAIFI
408     Check.Range("checkENS0") = arr_ENS
409     Check.Range("checkMAIFI0") = arr_MAIFI
410     Check.Range("checkNS0") = arr_NS
411     Check.Range("checkNM0") = arr_NM
412     Check.Range("checkZag01") = arr_info35110
413     Check.Range("checkZag02") = arr_info6
414     Check.Range("checkZag03") = arr_info04
415     ReDim arrCheck(1 To Check.Range("PiTab").Rows.Count + 2, 1 To 1)
416     Call Rep.calcSAIDI(arrRep)
417     Check.Range("checkSAIDI1") = arr_SAIDI
418     Check.Range("checkSAIFI1") = arr_SAIFI
419     Check.Range("checkENS1") = arr_ENS
420     Check.Range("checkMAIFI1") = arr_MAIFI
421     Check.Range("checkNS1") = arr_NS
422     Check.Range("checkNM1") = arr_NM
423     Check.Range("checkZag11") = arr_info35110
424     Check.Range("checkZag12") = arr_info6
425     Check.Range("checkZag13") = arr_info04
426     For j = 1 To UBound(arrCheck, 2)
427         For i = 1 To UBound(arrCheck) - 2
428             Check.Range("PiTab").Cells(i, j * 2 - 1).Value = Trim(arrCheck(i, j))
429         Next i
430         If Val(arrCheck(17, j)) = 0 Then
431             indIP = 0
432         Else
433             indIP = (arrCheck(17, j) - arrCheck(18, j)) / arrCheck(17, j)
434         End If
435         Check.Range("U28:AF28").Cells(1, j * 2 - 1).Value = indIP
436     Next j
437     PEMsel = tmpPEM
438     ret = EnableEvents("Worksheet_Activate", ret)
                                                                addlog "END Private Sub Check.Worksheet_Activate"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Public Sub clearCheck()
445     Check.Range("PiTab").ClearContents
446     Check.Range("U28:AF28").ClearContents
447     Check.Range("checkSAIDI0").ClearContents
448     Check.Range("checkSAIFI0").ClearContents
449     Check.Range("checkENS0").ClearContents
450     Check.Range("checkMAIFI0").ClearContents
451     Check.Range("checkZag01").ClearContents
452     Check.Range("checkZag02").ClearContents
453     Check.Range("checkZag03").ClearContents
454     Check.Range("checkNS0").ClearContents
455     Check.Range("checkNM0").ClearContents
456     Check.Range("checkSAIDI1").ClearContents
457     Check.Range("checkSAIFI1").ClearContents
458     Check.Range("checkENS1").ClearContents
459     Check.Range("checkMAIFI1").ClearContents
460     Check.Range("checkZag11").ClearContents
461     Check.Range("checkZag12").ClearContents
462     Check.Range("checkZag13").ClearContents
463     Check.Range("checkNS1").ClearContents
464     Check.Range("checkNM1").ClearContents
465 End Sub



Attribute VB_Name = "Data"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Change(ByVal Target As Range)
    ThisWorkbook.Saved = True '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
End Sub
Attribute VB_Name = "Er"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboCompany, 1, 0, MSForms, ComboBox"
Attribute VB_Control = "Label1, 2, 1, MSForms, Label"
Attribute VB_Control = "Label2, 3, 2, MSForms, Label"
Attribute VB_Control = "ComboCode, 4, 3, MSForms, ComboBox"
Attribute VB_Control = "Label4, 6, 5, MSForms, Label"
Attribute VB_Control = "ComboYear, 7, 6, MSForms, ComboBox"
Attribute VB_Control = "Label6, 9, 8, MSForms, Label"
Attribute VB_Control = "LabPEM, 10, 9, MSForms, Label"
Attribute VB_Control = "Label8, 15, 14, MSForms, Label"
Attribute VB_Control = "ComboSort, 16, 15, MSForms, ComboBox"
Attribute VB_Control = "OptionButton1, 17, 16, MSForms, OptionButton"
Attribute VB_Control = "OptionButton2, 18, 17, MSForms, OptionButton"
Dim arr_err()
Dim namef As String
Dim ErrNames()
Dim FoldY1 As String

Private Sub OptionButton1_Change()
7     If OptionButton1.Value = True Then
8         ord1 = 1
9         Call sortErr
10     End If
End Sub
Private Sub OptionButton2_Change()
13     If OptionButton2.Value = True Then
14         ord1 = 2
15         Call sortErr
16     End If
End Sub


Private Sub Worksheet_Activate()
    On Error GoTo Errors

                                        addlog "START er.Worksheet_Activate"
24     ErrNames = Array("|fffd| |fffd|/|fffd|", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|333||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "Numb", "Row")
25     Call SetColumnName(arr_err, ErrNames)
26     Me.Range("A2:" & Me.Range("A2").Cells(1).Offset(UBound(arr_err), UBound(ErrNames)).Address) = arr_err
                                        
                                                                     
29     If (Me.ComboCode.Value = "" Or ComboCode.Value <> Reg.ComboCode.Value) And Reg.ComboCode.Value <> "" And divisions.Count > 0 Then

31         If Reg.ComboCodePEM.text <> "" Then ReDim PEMsel3(0 To 1): PEMsel3(1) = Reg.ComboCodePEM.Value

    
34         firstacn = True
35         Me.ComboCode.Value = Reg.ComboCode.Value
36         Me.ComboCompany.Value = Reg.ComboCompany.Value
37         Me.ComboYear.Value = Reg.ComboYear.Value
38         firstacn = False
        
40         Call listPEM(1)
41         head1 = "B3"
42         ord1 = 1
43         FormPem.CheckCompany.Value = True
44         Call FormPem.ButtonOk_Click
45     ElseIf (ComboCode.Value = "" And Reg.ComboCode.Value = "") Or divisions.Count = 0 Then
46         Call listPEM
47         head1 = "B3"
48         ord1 = 1
49     Else
50         Call listPEM
51         For i = 0 To FormPem.ListBox1.ListCount - 1
52             For j = 1 To UBound(PEMsel3)
53                 If FormPem.ListBox1.List(i, 0) = PEMsel3(j) Then FormPem.ListBox1.Selected(i) = True
54             Next j
55         Next i
56         For i = 0 To FormPeriod.ListBox1.ListCount - 1
57             FormPeriod.ListBox1.Selected(i) = False
58         Next i
59         Call Er.FormEr
60         Call Er.sortErr
61     End If

                                        addlog "END er.Worksheet_Activate"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub



Private Sub LabPEM_Click()
71     tmp_rep = PEMsel3
72     FormPem.Show
End Sub



Private Sub ComboCode_Click() '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error GoTo Errors
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        
'    null
83     If Not NVal(ComboCompany.Value) = NVal(ComboCode.Value) And Not firstacn Then
                                            addlog "START Private Sub er.ComboCode_Click"
85         FormPem.CheckCompany.Value = False
86         ComboCompany.Value = ComboCode.Value
87         Call listPEM
88         Er.LabPEM.Caption = ""
89         Er.Range("a3:l" & 3 + Er.UsedRange.Rows.Count).ClearContents
90         If divisionsEr.Count > 0 Then
91             FormPem.CheckCompany.Value = True
92             Call FormPem.ButtonOk_Click
93         End If
      
                                            addlog "END Private Sub er.ComboCode_Click"
96     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Sub ComboYear_Click()
    On Error GoTo Errors
103     If FoldY <> "" Then FoldY1 = Er.ComboYear.Value & "\"
104     If Not firstacn Then
                                            addlog "START Private Sub er.ComboYear_Change"
        
107         Call listPEM
108         For i = 0 To FormPem.ListBox1.ListCount - 1
109             For j = 1 To UBound(PEMsel)
110                 If FormPem.ListBox1.List(i, 0) = PEMsel(j) Then FormPem.ListBox1.Selected(i) = True
111             Next j
112         Next i
113         Call FormPem.ButtonOk_Click
                                            addlog "END Private Sub er.ComboYear_Change"
115     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName) '        ret = EnableEvents("ComboCode_Click", ret)
End Sub


Private Sub ComboCompany_Click() '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error GoTo Errors
'
    'this.name
125     If Not NVal(ComboCompany.Value) = NVal(ComboCode.Value) And Not firstacn Then
                                            addlog "START Private Sub er.ComboCompany_Click"
127         FormPem.CheckCompany.Value = False
128         ComboCode.Value = ComboCompany.Value
129         Call listPEM
130         Er.LabPEM.Caption = ""
131         Er.Range("a3:l" & 3 + Er.UsedRange.Rows.Count).ClearContents
132         If divisionsEr.Count > 0 Then
133             FormPem.CheckCompany.Value = True
134             Call FormPem.ButtonOk_Click
135         End If
                                            addlog "END Private Sub er.ComboCompany_Click"
137     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub


Private Sub listPEM(Optional activ As Integer)
    On Error GoTo Errors
145     Set divisionsEr = CreateObject("Scripting.Dictionary")
    Dim arrDicItems
    Dim arrDicKeys
148     divisionsEr.RemoveAll
149     Call FormNamef
150     If Er.ComboCode.Value = Reg.ComboCode.Value And Er.ComboYear.Value = Reg.ComboYear.Value Then
'        divisionsEr = divisions
152         If divisions.Count > 0 Then
153             arrDicItems = divisions.items
154             arrDicKeys = divisions.keys
155             For i = 0 To divisions.Count - 1
156                 divisionsEr.Add arrDicKeys(i), arrDicItems(i)
157             Next i
158         End If
159     Else
160         arr_columnPEM = Array("KodCompany", "NamePEM", "KodPEM")
161         tmp_arr = Reg.ArrLoad(FoldY1 & namef & "\" & "PEM" & Er.ComboCode.Value & ".txt", arr_columnPEM)
162         colK = ArrFind(arr_columnPEM, "KodPEM")
163         colN = ArrFind(arr_columnPEM, "NamePEM")
164         For i = 1 To UBound(tmp_arr)
165             divisionsEr.Add tmp_arr(i, colK), tmp_arr(i, colN)
166         Next i
167         FormPem.TextBox1.Value = ""
                
169     End If

171     If activ > 0 And Reg.ComboCode.text <> "" Then
172         FormPem.CheckCompany.Caption = Data.Range("D1:D44").Cells(Data.Range("kods").Find(Reg.ComboCode.text).Row).Value
173     ElseIf activ = 0 And Er.ComboCode.text <> "" Then FormPem.CheckCompany.Caption = Data.Range("D1:D44").Cells(Data.Range("kods").Find(Er.ComboCode.text).Row).Value
174     End If
175     FormPem.ListBox1.Clear
176      If divisionsEr.Count > 0 Then
177         arrDicItems = divisionsEr.items
178         arrDicKeys = divisionsEr.keys
179         For i = 0 To divisionsEr.Count - 1
180             FormPem.ListBox1.AddItem ""
181             FormPem.ListBox1.List(i, 0) = arrDicKeys(i)
182             FormPem.ListBox1.List(i, 1) = arrDicItems(i)
183         Next i
184         If activ > 0 And Reg.ComboCodePEM.ListIndex >= 0 Then FormPem.ListBox1.Selected(Reg.ComboCodePEM.ListIndex) = True
185     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub


Private Sub FormNamef()
    On Error GoTo Errors
193     If FoldY <> "" Then FoldY1 = Er.ComboYear.Value & "\"
194     namef = "EI_" & Er.ComboYear.Value & "_" & Er.ComboCode.Value
195     Set folder1 = FSO.GetFolder(ThisWorkbook.path & "\" & FoldY1)
196     If Reg.CheckBoxCheck.Value Then
197         For Each File In folder1.Files
198             If Left(File.Name, 13) = namef And Mid(File.Name, Len(File.Name) - 4, 1) = "+" Then namef = Left(File.Name, Len(File.Name) - 4): Exit For
199         Next
200     Else
201         For Each File In folder1.Files
202             If Left(File.Name, 13) = namef And Not Mid(File.Name, Len(File.Name) - 4, 1) = "+" Then namef = Left(File.Name, Len(File.Name) - 4): Exit For
203         Next
204     End If
205     If FSO.FileExists(ThisWorkbook.path & "\" & FoldY1 & namef & ".rar") And Not FSO.FolderExists(ThisWorkbook.path & "\" & FoldY1 & namef) Then
206         Call Reg.UnpackBackup(FoldY1 & namef)
207     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Public Sub ListErr(listPEM, ComboCode, ComboYear, namef1, n, divis, Optional erform As Integer)
    On Error GoTo Errors
    'erform -|fffd||fffd||fffd| ER - 1
    Dim pi As New ProgressIndicator
    num24 = 0
    cus24 = 0
216     cName1 = ArrFind(arr_columnT, "Name1")
217     cName10 = ArrFind(arr_columnT, "Name10")
218     cTrm = ArrFind(arr_columnT, "Trm")
219     cN110 = ArrFind(arr_columnT, "N110")
220     cN = ArrFind(arr_columnI, "N")
221     cC = ArrFind(arr_columnI, "C")
222     cTr = ArrFind(arr_columnI, "Tr")
223     ArrM = Array("01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12")
224     If erform <> 0 Then
225         colMonth = ArrFind(ErrNames, "|333||fffd||fffd||fffd||fffd|")
226         colPEM = ArrFind(ErrNames, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
227         colNum = ArrFind(ErrNames, "|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|")
228         colDysp = ArrFind(ErrNames, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
229         colT1 = ArrFind(ErrNames, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
230         colDisc = ArrFind(ErrNames, "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
231         colRow = ArrFind(ErrNames, "Row")
232         colStat = ArrFind(ErrNames, "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
233         colComm = ArrFind(ErrNames, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
234         colTyp = ArrFind(ErrNames, "Numb")
235         colMesOrNot = ArrFind(ErrNames, "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
236         sncol = ArrFind(ErrNames, "|fffd| |fffd|/|fffd|")
237         Call SetColumnName(arr_err, ErrNames)
238         arr_err = Rank.TransposeArray(arr_err)
239         cRevTeh = ArrFind(arr_columnE, "RevTeh")
240         cError = ArrFind(arr_columnE, "Error")
241         cNum = ArrFind(arr_columnE, "Num")
242         cDname = ArrFind(arr_columnE, "Dname")
243         cT1 = ArrFind(arr_columnE, "T1")
244     End If
245     If FoldY <> "" Then FoldY2 = ComboYear & "\" Else FoldY2 = ""
        
247     If FSO.FileExists(ThisWorkbook.path & "\" & FoldY2 & namef1 & "\" & "I" & ComboYear + ".txt") Then
248         tmp_arrI = Reg.ArrLoad(FoldY2 & namef1 & "\" & "I" & ComboYear + ".txt", arr_columnI)
249     End If
250     tmp_nameT = namef1 & "\" & "T" & ComboCode & "_" & ComboYear
    
252     If n > 3 Then
253         pi.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|": pi.ShowPercents = True
254         pi.StartNewAction 0, 100, , , , n
255     End If
    
257     For i = LBound(listPEM) + erform To UBound(listPEM)
258         sumteh = 0
259         sumn = 0
        
261         If FSO.FileExists(ThisWorkbook.path & "\" & FoldY2 & tmp_nameT & "_" & listPEM(i) & ".txt") Then
262             Karr_I = -1
263             ncol = ArrFind(tmp_arrI, "KodPEM", 1)
264             For j = LBound(tmp_arrI) + 1 To UBound(tmp_arrI) Step 6
265                 If tmp_arrI(j, ncol) = listPEM(i) Then
266                     Karr_I = j - 1
                    Exit For
268                 End If
269             Next j
270             If Karr_I > -1 Then
271                 tmp_arrT = Reg.ArrLoad(FoldY2 & tmp_nameT & "_" & listPEM(i) & ".txt", arr_columnT)
'                ArrSum = Array()
273                 tmpUt = tmp_arrI(6 + Karr_I, ArrFind(arr_columnI, "LEP"))
274                 tmpmytree.RemoveAll
                Dim tmptree()
                Dim tmpnames()

'                numb = 0
279                 For j = LBound(tmp_arrT) + 1 To UBound(tmp_arrT)
280                     For m = cTrm To cN110
281                         sumteh = sumteh + Val(tmp_arrT(j, m))
282                         tmp_arrT(j, m) = Trim(tmp_arrT(j, m))
283                     Next m

285                     father = ""
286                     ReDim tmpnames(-1 To -1)
287                     For jj = cName1 To cName10
288                         If tmp_arrT(j, jj) <> "" And InStr(1, tmp_arrT(j, jj), " ") > 0 Then tmp_arrT(j, jj) = RemuvC(tmp_arrT(j, jj), 0)
289                         If tmp_arrT(j, jj) <> "" Then
290                             Ltmp_arrT = LCase(tmp_arrT(j, jj))
291                             If tmpmytree.exists(Ltmp_arrT) Then
292                                 If tmpmytree(Ltmp_arrT)(0) <> father And father <> "" Then
293                                     If erform <> 0 Then
294                                         ReDim Preserve arr_err(0 To UBound(arr_err), 0 To UBound(arr_err, 2) + 1)
295                                         arr_err(colPEM, UBound(arr_err, 2)) = listPEM(i) & "_" & divis(listPEM(i))
296                                         arr_err(colMesOrNot, UBound(arr_err, 2)) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
297                                         arr_err(colTyp, UBound(arr_err, 2)) = 3
298                                         arr_err(colNum, UBound(arr_err, 2)) = j
299                                         arr_err(colRow, UBound(arr_err, 2)) = jj
300                                         arr_err(colDysp, UBound(arr_err, 2)) = tmp_arrT(j, jj) & Chr(10) & "{" & j & "|" & jj & "}"
301                                         arr_err(colDisc, UBound(arr_err, 2)) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| (" & tmp_arrT(j, jj) & ") |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
302                                         arr_err(sncol, UBound(arr_err, 2)) = UBound(arr_err, 2)
303                                     End If
304                                     tmp_arrT(j, jj) = tmp_arrT(j, jj) & "{" & j & "|" & jj & "}"
                                    
306                                     ReDim tmptree(-2 To 11)
307                                     tmptree(-2) = tmp_arrT(j, jj)
308                                     tmptree(-1) = Mid(tmpUt, jj - cName1 + 1, 1)
309                                     tmptree(0) = father
310                                     tmpmytree.Add tmp_arrT(j, jj), tmptree
311                                 Else
312                                 End If
313                             Else
314                                 ReDim tmptree(-2 To 11)
315                                 tmptree(-2) = tmp_arrT(j, jj)
316                                 tmptree(-1) = Mid(tmpUt, jj - cName1 + 1, 1)
317                                 tmptree(0) = father
318                                 tmpmytree.Add Ltmp_arrT, tmptree
319                             End If
320                             If father = "" Then
321                                 tmpnames = Reg.addparent(tmpnames, Ltmp_arrT, True)
322                             Else
323                                 ReDim Preserve tmpnames(LBound(tmpnames) To UBound(tmpnames) + 1)
324                                 tmpnames(UBound(tmpnames)) = Ltmp_arrT
325                             End If
326                             father = Ltmp_arrT
327                         End If
328                     Next jj
329                     For m = 0 To UBound(tmpnames)
330                         tmptree = tmpmytree(tmpnames(m))
331                         For mm = cTrm To cN110
332                             If tmp_arrT(j, mm) <> "" Then
333                                 If erform <> 0 Then
334                                     If Not IsNumeric(tmp_arrT(j, mm)) Then
335                                         If Len(tmp_arrT(j, mm)) > 2 Then tmpMid = Mid(tmp_arrT(j, mm), 2, Len(tmp_arrT(j, mm)) - 2) Else tmpMid = tmp_arrT(j, mm)
336                                         If Not (Left(tmp_arrT(j, mm), 1) = "[" And Right(tmp_arrT(j, mm), 1) = "]" And IsNumeric(tmpMid) And (mm = cTrm Or mm = cTrm + 2)) Then
337                                             ReDim Preserve arr_err(0 To UBound(arr_err), 0 To UBound(arr_err, 2) + 1)
338                                             arr_err(colPEM, UBound(arr_err, 2)) = listPEM(i) & "_" & divis(listPEM(i))
339                                             arr_err(colMesOrNot, UBound(arr_err, 2)) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
340                                             arr_err(colTyp, UBound(arr_err, 2)) = 3
341                                             arr_err(colNum, UBound(arr_err, 2)) = j
342                                             arr_err(colRow, UBound(arr_err, 2)) = mm
343                                             arr_err(colDysp, UBound(arr_err, 2)) = tmpnames(m) & Chr(10) & "{" & j & "|" & mm & "}"
344                                             arr_err(colDisc, UBound(arr_err, 2)) = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| """ & tmpnames(m) & """ |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
345                                             arr_err(sncol, UBound(arr_err, 2)) = UBound(arr_err, 2)
346                                         End If
347                                     End If
348                                 End If
349                                 If Left(tmp_arrT(j, mm), 1) = "[" And mm < 15 Then
350                                     tmptree(mm - cTrm + 1 + 8) = "[" & (Val(Replace(tmptree(mm - cTrm + 1 + 8), "[", "")) + Val(Replace(tmp_arrT(j, mm), "[", ""))) & "]"
'345                                 ElseIf mm >= 15 Then
                                
353                                 Else
354                                     tmptree(mm - cTrm + 1) = Val(tmptree(mm - cTrm + 1)) + Val(tmp_arrT(j, mm))
355                                 End If
356                             End If
357                         Next mm
358                         tmpmytree(tmpnames(m)) = tmptree
359                     Next m
360                 Next j
                
                
                
364                 For j = Karr_I + 1 To Karr_I + 6
365                     If erform > 0 Then
366                         txtU = Array("0,4|fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "0,4|fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "6-20|fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "6-20|fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "27,5-35|fffd||fffd|", "110-154|fffd||fffd|")
367                         limitC = Array(10, 10, 1000, 1000, 10000, 100000)
368                         limitC2 = Array(0.01, 0.01, 1, 1, 10, 100)
369                         tmpTxt = ""
370                         txtComm = ""
371                         txtMes = ""
372                         If (Val(tmp_arrI(j, cN)) = 0 And Val(tmp_arrI(j, cC)) > 0) Then
373                             tmpTxt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & txtU(j - Karr_I - 1)
374                             txtMes = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
375                             RowU = Array(-7, -7, 11, 11, 11, 11)
376                             ColumnU = Array(-17, -16, -16, -15, -14, -13)
377                             GoTo SetErr
378                         End If
                        
380                         If (Val(tmp_arrI(j, cN)) > 0 And Val(tmp_arrI(j, cC)) = 0) Then
381                             tmpTxt = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & txtU(j - Karr_I - 1)
382                             txtMes = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
383                             RowU = Array(-15, -15, 13, 13, 13, 13)
384                             ColumnU = Array(-17, -16, -16, -15, -14, -13)
385                             GoTo SetErr
386                         End If
                        
388                         If Val(tmp_arrI(j, cC)) > (limitC(j - Karr_I - 1) * Val(tmp_arrI(j, cN)) * 12) Then
389                             tmpTxt = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & txtU(j - Karr_I - 1) & "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = " & Round(Val(tmp_arrI(j, cC)) / Val(tmp_arrI(j, cN)) / 12, 3) & " |fffd||fffd||fffd|.|fffd||fffd||fffd|*|fffd||fffd||fffd|)"
390                             txtMes = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
391                             RowU = Array(-7, -7, 11, 11, 11, 11)
392                             ColumnU = Array(-17, -16, -16, -15, -14, -13)
393                             txtComm = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
394                         End If
                        
396                         If Val(tmp_arrI(j, cC)) < (limitC2(j - Karr_I - 1) * Val(tmp_arrI(j, cN)) * 12) Then
397                             tmpTxt = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & txtU(j - Karr_I - 1) & "(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| = " & Round(Val(tmp_arrI(j, cC)) / Val(tmp_arrI(j, cN)) / 12, 3) & " |fffd||fffd||fffd|.|fffd||fffd||fffd|*|fffd||fffd||fffd|)"
398                             txtMes = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
399                             RowU = Array(-7, -7, 11, 11, 11, 11)
400                             ColumnU = Array(-17, -16, -16, -15, -14, -13)
401                             txtComm = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
402                         End If
403 SetErr:
404                         If Not tmpTxt = "" Then
405                             ReDim Preserve arr_err(0 To UBound(arr_err), 0 To UBound(arr_err, 2) + 1)
406                             arr_err(colPEM, UBound(arr_err, 2)) = listPEM(i) & "_" & divis(listPEM(i))
407                             arr_err(colStat, UBound(arr_err, 2)) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
408                             arr_err(colTyp, UBound(arr_err, 2)) = 3
409                             arr_err(colNum, UBound(arr_err, 2)) = ColumnU(j - Karr_I - 1)
410                             arr_err(colRow, UBound(arr_err, 2)) = RowU(j - Karr_I - 1)
411                             arr_err(colMesOrNot, UBound(arr_err, 2)) = txtMes
412                             arr_err(colDisc, UBound(arr_err, 2)) = tmpTxt
413                             arr_err(colComm, UBound(arr_err, 2)) = txtComm
414                             arr_err(sncol, UBound(arr_err, 2)) = UBound(arr_err, 2)
415                         End If
416                     End If
417                     For m = cN To cTr
418                         sumn = sumn + Val(tmp_arrI(j, m))
419                     Next m
420                 Next j
421                 If sumteh <> sumn And erform > 0 Then
422                     ReDim Preserve arr_err(0 To UBound(arr_err), 0 To UBound(arr_err, 2) + 1)
423                     arr_err(colPEM, UBound(arr_err, 2)) = listPEM(i) & "_" & divis(listPEM(i))
424                     arr_err(colStat, UBound(arr_err, 2)) = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
425                     arr_err(colTyp, UBound(arr_err, 2)) = 1
426                     arr_err(colMesOrNot, UBound(arr_err, 2)) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
427                     arr_err(colDisc, UBound(arr_err, 2)) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3cff| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3cff|"
428                     arr_err(sncol, UBound(arr_err, 2)) = UBound(arr_err, 2)
429                 End If



433                 For j = 0 To 11
434                     tmp_nameE = namef1 & "\" & "ESI" & ComboCode & "_" & ComboYear & "_" & ArrM(j) & "_" & listPEM(i) & ".txt"
435                     If FSO.FileExists(ThisWorkbook.path & "\" & FoldY2 & tmp_nameE) Then
436                         If n > 3 Then
437                             pi.SubAction "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & tmp_nameE & " ($index |fffd||fffd| $count)"
438                             pi.Line2 = "$time"
439                         End If
440                         tmp_arrE = Reg.ArrLoad(FoldY2 & CStr(tmp_nameE), arr_columnE)
441                         If erform = 0 Then
442                             Call Reg.FormSAIDI(tmp_arrE, tmp_arrI, IIf(sumteh = sumn, "", "01"), Karr_I, ComboCode, listPEM(i), ArrM(j), ComboYear, True)
443                         Else
444                             tmp_arrE = CoolSort(tmp_arrE, cNum, 1)
445                             For ii = LBound(tmp_arrE) + 1 To UBound(tmp_arrE)
446                                 Call Reg.revision(tmp_arrE, tmp_arrI, ii, 2, tmp_arrE(ii, cRevTeh), ArrM(j), Er.ComboYear.Value, Karr_I)
447                                 Call Reg.tehrevision(tmp_arrE, ii, tmpmytree, , 0, tmp_arrE(ii, cRevTeh), False)

                        cU = ArrFind(tmp_arrE, "K", 1)
                        If Val(tmp_arrE(ii, cU)) = 1 Or Val(tmp_arrE(ii, cU)) = 2 Or Val(tmp_arrE(ii, cU)) = 6 Then
                        cT1 = ArrFind(tmp_arrE, "T1", 1)
                        cT2 = ArrFind(tmp_arrE, "T2", 1)
                        If IsDate(tmp_arrE(ii, cT1)) And IsDate(tmp_arrE(ii, cT2)) Then

                        
                            diff = DateDiff("n", tmp_arrE(ii, cT1), tmp_arrE(ii, cT2))
                            If diff > 1440 Then
                                cN04m = ArrFind(tmp_arrE, "N04m", 1)
                                cN04s = ArrFind(tmp_arrE, "N04s", 1)
                                cN6m = ArrFind(tmp_arrE, "N6m", 1)
                                cN6s = ArrFind(tmp_arrE, "N6s", 1)
                                cN35 = ArrFind(tmp_arrE, "N35", 1)
                                cN110 = ArrFind(tmp_arrE, "N110", 1)
                                num24 = Val(num24) + 1
                                cus24 = Val(cus24) + Val(tmp_arrE(ii, cN04m)) + Val(tmp_arrE(ii, cN04s)) + Val(tmp_arrE(ii, cN6m)) + Val(tmp_arrE(ii, cN6s)) + Val(tmp_arrE(ii, cN35)) + Val(tmp_arrE(ii, cN110))
                            End If
                        End If
                        End If


448                                 If tmp_arrE(ii, cError) <> "" Then
449                                     ReDim Preserve arr_err(0 To UBound(arr_err), 0 To UBound(arr_err, 2) + 1)
450                                     arr_err(colMonth, UBound(arr_err, 2)) = ArrM(j)
451                                     arr_err(colNum, UBound(arr_err, 2)) = tmp_arrE(ii, cNum)
452                                     arr_err(colDysp, UBound(arr_err, 2)) = tmp_arrE(ii, cDname)
453                                     arr_err(colDisc, UBound(arr_err, 2)) = tmp_arrE(ii, cError)
454                                     arr_err(colT1, UBound(arr_err, 2)) = tmp_arrE(ii, cT1)
455                                     arr_err(colRow, UBound(arr_err, 2)) = ii + 25
456                                     arr_err(colPEM, UBound(arr_err, 2)) = listPEM(i) & "_" & divis(listPEM(i))
457                                     arr_err(colMesOrNot, UBound(arr_err, 2)) = IIf(tmp_arrE(ii, cRevTeh) = 1 Or tmp_arrE(ii, cRevTeh) = 2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
458                                     arr_err(colTyp, UBound(arr_err, 2)) = IIf(tmp_arrE(ii, cRevTeh) = 1 Or tmp_arrE(ii, cRevTeh) = 2, 2, 4)
459                                     arr_err(colStat, UBound(arr_err, 2)) = IIf(tmp_arrE(ii, cRevTeh) = 1 Or tmp_arrE(ii, cRevTeh) = 2, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
    '                                    If tmp_arrE(ii, cRevTeh) = 5 Then arr_err(colComm, UBound(arr_err, 2)) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd|), |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|.|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd|)"
461                                     arr_err(sncol, UBound(arr_err, 2)) = UBound(arr_err, 2)
462                                 End If
463                             Next ii
464                         End If
465                     End If
466                 Next j
467             End If
468         End If
469     Next i
470     If n > 3 Then pi.Hide
Er.Range("I1").Value = num24
Er.Range("J1").Value = cus24

    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub



Public Sub FormEr()
    On Error GoTo Errors
                                            addlog "START Public Sub Er.FormEr"
    Dim ret As Boolean
481     ret = EnableEvents("FormEr")



485     Er.Range("a3:l" & 3 + Er.UsedRange.Rows.Count).ClearContents

487     If FSO.FolderExists(ThisWorkbook.path & "\" & FoldY1 & namef) Then
488         n = 0
489         Set folder1 = FSO.GetFolder(ThisWorkbook.path & "\" & FoldY1 & namef)
490         For Each File In folder1.Files
491             tmpf = Split(File.Name, ".")
492             If Left(tmpf(0), 3) = "ESI" Then
493                 For i = 1 To UBound(PEMsel3)
494                     If Right(tmpf(0), 2) = PEMsel3(i) Then
495                         n = n + 1
496                     End If
497                 Next i
498             End If
499         Next
500         Call Er.ListErr(PEMsel3, Er.ComboCode.Value, Er.ComboYear.Value, namef, n, divisionsEr, 1)
501         arr_err = Rank.TransposeArray(arr_err)
502         If UBound(arr_err) = 0 Then MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"

504         Me.Range("A2:" & Me.Range("A2").Offset(UBound(arr_err), UBound(ErrNames)).Address) = arr_err
505         Me.Range("A3:" & Me.Range("A2").Offset(UBound(arr_err), UBound(ErrNames)).Address).WrapText = False
506         Me.Rows("3:" & UBound(arr_err) + 2).EntireRow.AutoFit
507         Me.Range("A3:" & Me.Range("A2").Offset(UBound(arr_err), UBound(ErrNames)).Address).WrapText = True
508     Else
                                            addlog ThisWorkbook.path & "\" & FoldY1 & namef & " - Folder Not Exists"
510         MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd|=" & Er.ComboYear.Value & "; |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|=""" & Er.ComboCompany.text & """)", , "|fffd||fffd||fffd||fffd||fffd|!"
511     End If
                                            addlog "END Public Sub Er.FormEr"
513     ret = EnableEvents("FormEr", ret)
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub


Public Sub sortErr()
    On Error GoTo Errors
521     Er.Range("B2:l" & 3 + Er.UsedRange.Rows.Count).Sort Key1:=Range(head1), Order1:=ord1, Header:=xlGuess, _
        OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, DataOption1:=xlSortNormal
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Sub ComboSort_Change()
    On Error GoTo Errors
'    Dim ret As Boolean
'    ret = EnableEvents("ComboSort_Change")
531     Select Case Er.ComboSort.ListIndex
        Case 0
533             head1 = "B3"
        Case 1
535             head1 = "K3"
        Case 2
537             head1 = "C3"
        Case 3
539             head1 = "D3"
        Case 4
541             head1 = "E3"
        Case 5
543             head1 = "F3"
544     End Select
545     Call sortErr
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
551     ThisWorkbook.Saved = True '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
End Sub


Public Function TransposeArray(arr)
    On Error GoTo Errors
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
   Dim tempArray()
559     ReDim tempArray(LBound(arr, 2) To UBound(arr, 2), LBound(arr, 1) To UBound(arr, 1))
560     For X = LBound(arr, 2) To UBound(arr, 2)
561         For Y = LBound(arr, 1) To UBound(arr, 1)
562             tempArray(X, Y) = arr(Y, X)
563         Next Y
564     Next X
565     TransposeArray = tempArray
    Exit Function
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Function

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    On Error GoTo Errors
572     If (Union(Target.Cells, Range("A3:J" & UBound(arr_err) + 3)).Address = Range("A3:J" & UBound(arr_err) + 3).Address) Then
                                            addlog "START Private Sub Er.BeforeDoubleClick"
574         Cancel = True
575         Reg.Select
        Dim ret As Boolean
577         ret = EnableEvents("Er.BeforeDoubleClick")
578         colName = ArrFind(ErrNames, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|") + 1
579         colMon = ArrFind(ErrNames, "|333||fffd||fffd||fffd||fffd|") + 1
580         colNumb = ArrFind(ErrNames, "Numb") + 1
        
582         arr_err = Me.Range("A2:" & Me.Range("A2").Offset(UBound(arr_err), UBound(ErrNames)).Address)
583         Data.Range("kod").Value = Er.ComboCode.Value
584         Data.Range("year").Value = Er.ComboYear.Value
585         If arr_err(Target.Row - 1, colNumb) <> 3 And arr_err(Target.Row - 1, colNumb) <> 1 Then
586             Data.Range("month").Value = Data.Range("namesmon").Cells(Val(arr_err(Target.Row - 1, colMon)), 1).Value
587         End If
588         Data.Range("pemkod").Value = Left(arr_err(Target.Row - 1, colName), 2)
589         file_name = namef
        
591         Inddbl = True
592         If Reg.ComboYear.Value <> Er.ComboYear.Value Then Reg.ComboYear.Value = Er.ComboYear.Value
593         If Reg.ComboCode.Value <> Er.ComboCode.Value Then
594             Reg.ComboCode.Value = Er.ComboCode.Value
595             Reg.ComboCompany.Value = Er.ComboCompany.Value
596             Call Reg.ArrLoadPEM(FoldY1 & file_name & "\" & "PEM" & CStr(Data.Range("kod").Value) & ".txt")
597             Reg.ComboCodePEM.Clear
                                                                    addlog "SetRangPEM(Reg.ComboPEM.Clear)"
599             Reg.ComboPEM.Clear
600             divisions.RemoveAll
            
602             colK = ArrFind(arr_columnPEM, "KodPEM")
603             colN = ArrFind(arr_columnPEM, "NamePEM")
604             arrPEM = CoolSort(arrPEM, 2)
605             For i = 1 To UBound(arrPEM)
606                 If Not divisions.exists(arrPEM(i, colK)) Then divisions.Add arrPEM(i, colK), arrPEM(i, colN)
607                 Reg.ComboCodePEM.AddItem arrPEM(i, colK)
608                 Reg.ComboPEM.AddItem arrPEM(i, colN)
609                 Reg.ComboPEM.List(Reg.ComboPEM.ListCount - 1, 1) = arrPEM(i, colK)
610             Next i
611         End If
'        indcod = Er.Range("F" & target.Row).Value
613         If Reg.ComboCodePEM.Value <> Data.Range("pemkod").Value Then Reg.ComboCodePEM.Value = Data.Range("pemkod").Value
614         If Reg.ComboPEM.text <> Data.Range("pemkod").Value Then Reg.ComboPEM.text = Right(arr_err(Target.Row - 1, colName), Len(arr_err(Target.Row - 1, colName)) - 3)
'        indmon = Er.Cells(9, target.column).Value
616         If Reg.ComboMonth.text <> Data.Range("month").Value Then Reg.ComboMonth.Value = arr_err(Target.Row - 1, colMon)
617         Inddbl = False
        
619         Call Reg.openArch
620         ret = EnableEvents("Er.BeforeDoubleClick", ret)
621         If arr_err(Target.Row - 1, colNumb) = 2 Or arr_err(Target.Row - 1, colNumb) = 4 Then
622             Reg.Range("C" & arr_err(Target.Row - 1, ArrFind(ErrNames, "Row") + 1)).Select
623         Else
624             Reg.Range("Ag26").Offset(arr_err(Target.Row - 1, ArrFind(ErrNames, "|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|") + 1) - 1, arr_err(Target.Row - 1, ArrFind(ErrNames, "Row") + 1) - 1).Select
625         End If
626         ret = EnableEvents("Er.BeforeDoubleClick", ret)
                                            addlog "END Private Sub Er.BeforeDoubleClick"
628     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
631 End Sub



Attribute VB_Name = "F_Progress"
Attribute VB_Base = "0{C5DCA009-14EA-4E75-95A7-3241D25B7A87}{B10D7ACD-0307-4F2B-AED1-23FFA12639C5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


'---------------------------------------------------------------------------------------
' Form      : F_Progress
' |fffd||fffd||fffd||fffd||fffd|     : EducatedFool  (|fffd||fffd||fffd||fffd||fffd|)                    |fffd||fffd||fffd||fffd|: 23.10.2011
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Excel, Word, CorelDRAW. |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: http://ExcelVBA.ru/payments
'---------------------------------------------------------------------------------------


Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If Not Me.Caption = "" Then Cancel = True
End Sub
Attribute VB_Name = "FormFind"
Attribute VB_Base = "0{BD43BEF2-3F75-444E-BDA5-809287491F5A}{E95F4781-A737-4E0C-83B8-D5EB84A46F7F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Dim TGroupIndex
Dim TGroupCount, iSelected As Integer
Dim TextChange, TGroupInT, arrTGroup_Seved, arrT04H_Seved, TextBox1_Changed As Boolean
Dim optselect As Boolean

Option Explicit

'##########Treeview Code##########
'Add this to your form's declaration section
'Public WithEvents mcTree As clsTreeView
Public WithEvents mcTree As clsTreeView
Attribute mcTree.VB_VarHelpID = -1
Private mbExit As Boolean    ' to exit a SpinButton event
'/##########Treeview Code##########

#If Mac Then
    Const mcPtPixel As Long = 1
#Else
    Const mcPtPixel As Single = 0.75
#End If


Private Sub Button_Cencel_Click()
                                addlog "END FormFind Show (Button_Cencel_Click)"
'    Unload Me
26     Me.Hide
End Sub


Private Sub Button_Cencel2_Click()
31     Call Button_Cencel_Click
End Sub

Private Sub Button_Select_Click()
    On Error GoTo Errors
    Dim data_str As String
    Dim i As Integer
    Dim GName As String
39     iSelected = 0
    
41     If Me.MultiPage1.Value = 0 Then
42         If Me.ListBox1.ListCount = 0 Then
43             MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbOKOnly, "|fffd||fffd||fffd||fffd||fffd|!!!"
            Exit Sub
45         ElseIf Me.ListBox1.ListCount = 1 Then
46             Me.TextBox1.text = Me.ListBox1.List(i, 0)
47             Me.TextBox2.text = Me.ListBox1.List(i, 0)
48         ElseIf Me.ListBox1.ListCount > 1 Then
49             For i = LBound(Me.ListBox1.List) To UBound(Me.ListBox1.List)
50                 If data_str = "" Then
51                     data_str = Me.ListBox1.List(i, 0)
52                 Else
53                     data_str = data_str & "; " & Me.ListBox1.List(i, 0)
54                 End If
55             Next i
            
57             If Not TGroupInT And Not Me.TextBox2.text = "" Then
58                 If IsNull(TGroupIndex) Then
59                     If MsgBox("|fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & Chr(13) & Chr(10) & """" & Me.TextBox2.text & """" & Chr(13) & Chr(10) & Chr(10) & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & Chr(13) & Chr(10) & data_str & Chr(13) & Chr(10) & Chr(10) & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo, "|fffd||fffd||fffd||fffd||fffd|") = vbYes Then
60                         arrTGroup = TransposeArray(arrTGroup)
61                         ReDim Preserve arrTGroup(LBound(arrTGroup) To UBound(arrTGroup), LBound(arrTGroup, 2) To UBound(arrTGroup, 2) + 1)
62                         arrTGroup = TransposeArray(arrTGroup)
63                         arrTGroup(UBound(arrTGroup), Coll_columnTGroup("Kod")) = Reg.ComboCode.text
64                         arrTGroup(UBound(arrTGroup), Coll_columnTGroup("KodPEM")) = Reg.ComboCodePEM.text
65                         arrTGroup(UBound(arrTGroup), Coll_columnTGroup("Name")) = Me.TextBox2.text
66                         arrTGroup(UBound(arrTGroup), Coll_columnTGroup("G0")) = data_str
67                         arrTGroup(UBound(arrTGroup), Coll_columnTGroup("Selected")) = "0"
68                         arrTGroup_Seved = False
69                     Else
                        Exit Sub
71                     End If
72                 Else
73                     For i = 0 To TGroupCount - 1
74                         If arrTGroup(TGroupIndex, Coll_columnTGroup("G" & i)) = data_str Then iSelected = i + 1: Exit For
75                     Next i
76                     If iSelected = 0 Then
77                         If MsgBox("|fffd| |fffd||fffd||fffd||fffd|: """ & Me.TextBox2.text & """ |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|'|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & Chr(13) & Chr(10) & Chr(10) & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|:" & Chr(13) & Chr(10) & data_str & Chr(13) & Chr(10) & Chr(10) & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo, "|fffd||fffd||fffd||fffd||fffd|") = vbYes Then
78                             arrTGroup(TGroupIndex, Coll_columnTGroup("G" & TGroupCount)) = data_str
79                             arrTGroup(TGroupIndex, Coll_columnTGroup("Selected")) = TGroupCount
80                             arrTGroup_Seved = False
81                         Else
                            Exit Sub
83                         End If
84                     ElseIf iSelected - 1 <> NVal(arrTGroup(TGroupIndex, Coll_columnTGroup("Selected"))) Then
85                         arrTGroup(TGroupIndex, Coll_columnTGroup("Selected")) = iSelected - 1
86                         arrTGroup_Seved = False
87                     End If
88                 End If
89             End If
90         End If
91         Application.ScreenUpdating = False
92         Application.EnableEvents = False
                                addlog "FormFind Button_Select_Click (EnableEvents = False)"
94         Reg.Range("G" & ActiveCell.Row).ClearContents
95         If Me.TextBox2.text = "" Then
96             Reg.Range("C" & ActiveCell.Row).Value = data_str
97             Reg.Range("J" & ActiveCell.Row).Value = ""
98         Else
99             Reg.Range("C" & ActiveCell.Row).Value = Me.TextBox2.text
100             Reg.Range("J" & ActiveCell.Row).Value = data_str
101         End If
102         Application.EnableEvents = True
                                addlog "FormFind Button_Select_Click (EnableEvents = True)"
104         ActiveCell.Value = ActiveCell.Value
105         Application.ScreenUpdating = True
106     Else
107         TGroupIndex = ArrFind(arrT04H, Me.TextBox3.text, , "Name")
108         If (Not IsNull(TGroupIndex)) Then
109             If Not arrT04H(TGroupIndex, Coll_columnT04H("Ntrm")) = Me.TextNLm.Value Then arrT04H(TGroupIndex, Coll_columnT04H("Ntrm")) = Me.TextNLm.Value: arrT04H_Seved = False
110             If Not arrT04H(TGroupIndex, Coll_columnT04H("N04m")) = Me.TextCLm.Value Then arrT04H(TGroupIndex, Coll_columnT04H("N04m")) = Me.TextCLm.Value: arrT04H_Seved = False
111             If Not arrT04H(TGroupIndex, Coll_columnT04H("Ntrs")) = Me.TextNLs.Value Then arrT04H(TGroupIndex, Coll_columnT04H("Ntrs")) = Me.TextNLs.Value: arrT04H_Seved = False
112             If Not arrT04H(TGroupIndex, Coll_columnT04H("N04s")) = Me.TextCLs.Value Then arrT04H(TGroupIndex, Coll_columnT04H("N04s")) = Me.TextCLs.Value: arrT04H_Seved = False
113         End If
114         Application.ScreenUpdating = False
115         Application.EnableEvents = False
                                addlog "FormFind Button_Select_Click (EnableEvents = False)"
117         Reg.Range("D" & ActiveCell.Row & ":F" & ActiveCell.Row).ClearContents
118         Reg.Range("G" & ActiveCell.Row).Value = "x"
119         Reg.Range("U" & ActiveCell.Row).Value = Me.TextNLm.Value
120         Reg.Range("V" & ActiveCell.Row).Value = Me.TextCLm.Value
121         Reg.Range("W" & ActiveCell.Row).Value = Me.TextNLs.Value
122         Reg.Range("X" & ActiveCell.Row).Value = Me.TextCLs.Value
123         Reg.Range("Y" & ActiveCell.Row).Value = Empty
124         Reg.Range("Z" & ActiveCell.Row).Value = Empty
125         Reg.Range("AA" & ActiveCell.Row).Value = Empty
126         Reg.Range("AB" & ActiveCell.Row).Value = Empty
127         Application.EnableEvents = True
                                addlog "FormFind Button_Select_Click (EnableEvents = True)"
129         Reg.Range("C" & ActiveCell.Row).Value = Me.TextBox3.text
130         Application.ScreenUpdating = True
131     End If
132     If Not arrTGroup_Seved Then
133         GName = "TGroup" & Reg.ComboCode.Value & "_" & Reg.ComboCodePEM.Value & ".txt"
134         Call Reg.ArrSave(arrTGroup, ThisWorkbook.path & "\" & FoldY & file_name, GName)
135         arrTGroup_Seved = True
136     End If
137     If Not arrT04H_Seved Then
138         GName = "T04H" & Reg.ComboCode.Value & "_" & Reg.ComboCodePEM.Value & ".txt"
139         Call Reg.ArrSave(arrT04H, ThisWorkbook.path & "\" & FoldY & file_name, GName)
140         arrT04H_Seved = True
141     End If
                                addlog "END FormFind Show (Button_Select_Click)"
'    Unload Me
144     Me.Hide
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub Button_Select2_Click()
150     Call Button_Select_Click
End Sub

Private Sub CheckBox1_Click()
    Dim cRoot As clsNode
    Dim cNode As clsNode
    Dim tmpComm As String
    
158     With mcTree
        Dim i As Double
        Dim trees()
161         trees = mytree.keys
        
163         .NodesClear
164         If CheckBox1 Then
165             For i = 0 To mytree.Count - 1
166                 If mytree(trees(i))(12) = "" Then tmpComm = CStr(mytree(trees(i))(-2)) Else tmpComm = CStr(mytree(trees(i))(12))
167                 If mytree(trees(i))(0) = "" Then
168                     Set cRoot = .AddRoot(CStr(trees(i)), tmpComm)
169                     cRoot.Expanded = False
170                 Else
171                     If Not cRoot.Key = trees(i) Then Set cRoot = .Nodes(mytree(trees(i))(0))
172                     Set cNode = cRoot.AddChild(CStr(trees(i)), tmpComm)
173                     cNode.Expanded = False
174                 End If
175             Next i
176         Else
177             For i = 0 To mytree.Count - 1
178                 If mytree(trees(i))(0) = "" Then
179                     Set cRoot = .AddRoot(CStr(trees(i)), CStr(mytree(trees(i))(-2)))
180                     cRoot.Expanded = False
181                 Else
182                     If Not cRoot.Key = trees(i) Then Set cRoot = .Nodes(mytree(trees(i))(0))
183                     Set cNode = cRoot.AddChild(CStr(trees(i)), CStr(mytree(trees(i))(-2)))
184                     cNode.Expanded = False
185                 End If
186             Next i
187         End If
        
        'create the node controls and display the tree
190         If cRoot Is Nothing Then Set cRoot = .AddRoot("", ""): .CheckBoxes = False
191         .Refresh
192     End With
193     TextBox1_Change
End Sub

Private Sub CommandButton1_Click()
197     Me.TextBox2.Value = Me.TextBox1.Value
End Sub

Private Sub ListBox1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim RagAddress As String
    On Error Resume Next
203     RegBack = Selection.Cells(1).Address
204     RagAddress = mytree(LCase(ListBox1.List(ListBox1.ListIndex, 0)))(10)
205     FormFind.Hide
206     Reg.Range(RagAddress).Activate
207     Reg.Image3.Top = Reg.Range(RagAddress).Top
208     Reg.Image3.Left = Reg.Range(RagAddress).Left - Reg.Image3.Width
209     Reg.Image3.Visible = True
                                addlog "END FormFind Show (ListBox1_DblClick)"
End Sub

Private Sub MultiPage1_Change()
214     If Me.MultiPage1.Value = 0 Then
215         Me.TextBox2.Value = Me.TextBox3.Value
216     Else
217         Me.TextBox3.Value = Me.TextBox2.Value
218     End If
End Sub

Private Sub TextBox1_Change()
    On Error GoTo Errors
    Dim tmp_Child As clsNode
    Dim arr_data() As String
    Dim d
    Dim txt As String
    
228     If TextBox1_Changed Then
229         If Not mcTree Is Nothing Then
230             mcTree.ExpandToLevel 0, False
231             For Each tmp_Child In mcTree.Nodes
232                 If tmp_Child.Checked Then tmp_Child.Checked = 0
233             Next
234         End If
        
236         Label6.BackColor = &HFFFFFF
237         Label6.Caption = ""
'        Me.TextBox1.Text = RemuvC(Me.TextBox1.Text, 2)
239         arr_data = Split(RemuvC(Me.TextBox1.text, 2), ";")
240         Me.TextBox1.text = Join(arr_data, "; ")
241         Me.ListBox1.Clear
242         If Not mcTree.Nodes Is Nothing And Me.TextBox1.text <> "" Then
243             For d = LBound(arr_data) To UBound(arr_data)
244                 If arr_data(d) = "" Then GoTo nextd
                
246                 If mytree.exists(LCase(arr_data(d))) Then
247                     Set mcTree.ActiveNode = mcTree.Nodes(mytree(LCase(arr_data(d)))(-2))
'                    mcTree.ActiveNode.Checked = -1
249                     Label6.BackColor = &HC0FFC0
250                     Label6.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: """ & mcTree.ActiveNode.Caption & """"

252                     mcTree.ExpandToLevel 0, False
253                     mcTree.ScrollToView mcTree.ActiveNode, -2 ' the -ve means will scroll won't change if the node is visible
254                     mcTree.NodeClick mcTree.ActiveNode.Control, mcTree.ActiveNode
255                     If mytree.exists(mcTree.ActiveNode.Key) Then Me.ListBox1.AddItem mytree(mcTree.ActiveNode.Key)(-2)
256                     mcTree.ActiveNode.Checked = -1
257                     GoTo nextd
258                 Else
259                     For Each tmp_Child In mcTree.Nodes
260                         If InStr(1, tmp_Child.Caption, arr_data(d), vbTextCompare) > 0 Then  'And Not optselect
261                             tmp_Child.Expanded = True
262                             If Not tmp_Child Is Nothing Then
263                                 Set mcTree.ActiveNode = tmp_Child
264                                 Label6.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: """ & tmp_Child.Caption & """"
    
266                                 mcTree.ExpandToLevel 0, False
267                                 mcTree.ScrollToView mcTree.ActiveNode, -2 ' the -ve means will scroll won't change if the node is visible
268                                 mcTree.NodeClick mcTree.ActiveNode.Control, mcTree.ActiveNode
269                             End If
270                             GoTo nextd
271                         End If
272                     Next
273                 End If
                

'                MsgBox """" & arr_data(d) & """ - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , "|fffd||fffd||fffd||fffd||fffd|"
277                 Label6.BackColor = &HC0C0FF
278                 Label6.Caption = """" & arr_data(d) & """ - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
279 nextd:
280             Next d
            
282         End If
        
284         mcTree.Refresh
285     End If
286     optselect = False
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub



Private Sub TextBox2_Change()
    On Error GoTo Errors
    Dim i As Integer
296     iSelected = 0
297     TGroupInT = False
298     If Me.TextBox2.Value = "" Then
299         Me.Label6.BackColor = &HFFFFFF
300         Me.Label6.Caption = ""
301     Else
302         If Me.TextBox2.Value <> RemuvC(Me.TextBox2.text, 0) And Me.TextBox1.Value <> Me.TextBox2.Value Then Me.TextBox2.Value = RemuvC(Me.TextBox2.text, 0)
        Dim tmp_Child As clsNode
'260         For Each tmp_Child In mcTree.Nodes
305             If mytree.exists(LCase(Me.TextBox2.Value)) Then 'If tmp_Child.Caption = Me.TextBox2.Value Then
306                 TGroupInT = True
307             Else
                Dim trees()
309                 trees = mytree.keys
                
311                 For i = 0 To mytree.Count - 1
312                     If mytree(trees(i))(12) = Me.TextBox2.Value Then
313                         TGroupInT = True
                        Exit For
315                     End If
316                 Next i
'263                 Me.TextBox1.Value = Me.TextBox2.Value
                
319             End If
'266         Next tmp_Child
        
322         TGroupIndex = ArrFind(arrTGroup, Me.TextBox2.Value, , "Name")
323         For i = 0 To 9
324             Me.Controls("OptionButton" & i + 1).Visible = False
325         Next i
326         If Not IsNull(TGroupIndex) And Not TGroupInT Then
327             TGroupCount = 0
328             For i = 0 To 9
329                 Me.Controls("OptionButton" & i + 1).Visible = (arrTGroup(TGroupIndex, Coll_columnTGroup("G" & i)) <> "")
330                 If arrTGroup(TGroupIndex, Coll_columnTGroup("G" & i)) <> "" Then TGroupCount = TGroupCount + 1
331                 If Me.TextBox1.Value <> "" And Me.TextBox1.Value = arrTGroup(TGroupIndex, Coll_columnTGroup("G" & i)) And iSelected = 0 Then iSelected = i + 1
332             Next i
            
334             If iSelected = 0 Then iSelected = NVal(arrTGroup(TGroupIndex, Coll_columnTGroup("Selected"))) + 1
            
336             If Me.Controls("OptionButton" & iSelected) Then
337                 Me.TextBox1.text = arrTGroup(TGroupIndex, Coll_columnTGroup("G" & iSelected - 1))
338             Else
339                 Me.Controls("OptionButton" & iSelected) = True
340             End If
341             If TGroupCount = 1 Then Me.Controls("OptionButton1").Visible = False
            
343             Me.Label6.BackColor = &HC0FFC0
344             Me.Label6.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: """ & Me.TextBox2.Value & """"
            ElseIf TGroupInT Then
                Me.TextBox1.Value = Me.TextBox2.Value
345         ElseIf Me.TextBox1.Value <> Me.TextBox2.Value Then
346             Me.TextBox1.Value = ""
347             Me.ListBox1.Clear
348             Me.Label6.BackColor = &HC0C0FF
349             Me.Label6.Caption = """" & Me.TextBox2.Value & """ - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
350         End If
351     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub TextBox3_Change()
    On Error GoTo Errors
358     TGroupIndex = ArrFind(arrT04H, Me.TextBox3.Value, , "Name")
359     If Not IsNull(TGroupIndex) Then
360         Me.TextBox7.Value = arrT04H(TGroupIndex, Coll_columnT04H("TName"))
361         If Not arrT04H(TGroupIndex, Coll_columnT04H("Ntrm")) = "" Then Me.TextNLm.Value = RemuvC(arrT04H(TGroupIndex, Coll_columnT04H("Ntrm")), 1)
362         Me.TextCLm.Value = arrT04H(TGroupIndex, Coll_columnT04H("N04m"))
363         If Not arrT04H(TGroupIndex, Coll_columnT04H("Ntrs")) = "" Then Me.TextNLs.Value = RemuvC(arrT04H(TGroupIndex, Coll_columnT04H("Ntrs")), 1)
364         Me.TextCLs.Value = arrT04H(TGroupIndex, Coll_columnT04H("N04s"))
365         Me.Label10.BackColor = &HC0FFC0
366         Me.Label10.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: """ & Me.TextBox3.Value & """"
367     Else
368         Me.TextBox7.Value = ""
369         Me.TextNLm.Value = ""
370         Me.TextCLm.Value = ""
371         Me.TextNLs.Value = ""
372         Me.TextCLs.Value = ""
373         Me.Label10.BackColor = &HC0C0FF
374         Me.Label10.Caption = """" & Me.TextBox3.Value & """ - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
375     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub TextBox2_Enter()
381     Me.ListBox2.Height = IIf(Me.ListBox2.ListCount * 10 + 4 = 4, 0, Me.ListBox2.ListCount * 10 + 4)
End Sub

Private Sub TextBox3_Enter()
385     Me.ListBox3.Height = IIf(Me.ListBox3.ListCount * 10 + 4 = 4, 0, Me.ListBox3.ListCount * 10 + 4)
End Sub

Private Sub TextBox2_Exit(ByVal Cancel As MSForms.ReturnBoolean)
389     Me.ListBox2.Height = 0
End Sub

Private Sub TextBox3_Exit(ByVal Cancel As MSForms.ReturnBoolean)
393     Me.ListBox3.Height = 0
End Sub

Private Sub ListBox2_Enter()
397     Me.ListBox2.Height = IIf(Me.ListBox2.ListCount * 10 + 4 = 4, 0, Me.ListBox2.ListCount * 10 + 4)
End Sub

Private Sub ListBox3_Enter()
401     Me.ListBox3.Height = IIf(Me.ListBox3.ListCount * 10 + 4 = 4, 0, Me.ListBox3.ListCount * 10 + 4)
End Sub

Private Sub ListBox2_Exit(ByVal Cancel As MSForms.ReturnBoolean)
405     Me.ListBox2.Height = 0
End Sub

Private Sub ListBox3_Exit(ByVal Cancel As MSForms.ReturnBoolean)
409     Me.ListBox3.Height = 0
End Sub

Private Sub TextBox2_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    On Error GoTo Errors
    Dim txt As String
415     txt = Left(Me.TextBox2.Value, Me.TextBox2.SelStart) & ChrW(KeyAscii) & Right(Me.TextBox2.Value, Len(Me.TextBox2.Value) - Me.TextBox2.SelStart - Me.TextBox2.SelLength)
416     Call SetList(txt, Me.ListBox2, arrTGroup, Coll_columnTGroup, True)
417     If Me.ListBox2.ListCount > 0 Then
418         If Me.TextBox2.Value & ChrW(KeyAscii) = Me.ListBox2.List(0) Then Me.TextBox1.Value = Me.ListBox2.List(0)
419     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub TextBox3_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
425     Call SetList(Me.TextBox3.Value & ChrW(KeyAscii), Me.ListBox3, arrT04H, Coll_columnT04H)
End Sub

Private Sub TextBox2_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    On Error GoTo Errors
430     If KeyCode = 40 Then
431         Call SetList(Me.TextBox2.Value, Me.ListBox2, arrTGroup, Coll_columnTGroup, True)
432         If Me.ListBox2.ListCount > 0 Then Me.ListBox2.Value = Me.ListBox2.List(0)
433     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub TextBox3_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    On Error GoTo Errors
440     If KeyCode = 40 Then
441         Call SetList(Me.TextBox3.Value, Me.ListBox3, arrT04H, Coll_columnT04H)
442         If Me.ListBox3.ListCount > 0 Then Me.ListBox3.Value = Me.ListBox3.List(0)
443     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub ListBox2_Change()
    On Error GoTo Errors
450     If TextChange Then
451         Me.TextBox2.Value = Me.ListBox2.Value
452         If Me.ListBox2.ListIndex > -1 Then
453             If Me.ListBox2.List(Me.ListBox2.ListIndex, 1) <> "" Then
454                 Me.TextBox1.Value = Me.ListBox2.List(Me.ListBox2.ListIndex, 1)
455             End If
456         End If
457     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub ListBox3_Change()
463     If TextChange Then Me.TextBox3.Value = Me.ListBox3.Value
End Sub

Private Sub ListBox2_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    On Error GoTo Errors
468     If KeyCode = 13 Or KeyCode = 9 Then '13=enter, 9 =tab
469         KeyCode = 0
470         Me.ListBox2.Height = 0
471         Me.TextBox2.Value = Me.ListBox2.Value
472         Me.Button_Select.SetFocus
473     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub ListBox3_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    On Error GoTo Errors
480     If KeyCode = 13 Or KeyCode = 9 Then
481         KeyCode = 0
482         Me.ListBox3.Height = 0
483         Me.TextBox3.Value = Me.ListBox3.Value
484         Me.Button_Select2.SetFocus
485     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub ListBox2_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
491     Me.TextBox1.SetFocus
492     Me.ListBox2.Height = 0
End Sub

Private Sub ListBox3_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
496     Me.TextBox7.SetFocus
497     Me.ListBox3.Height = 0
End Sub

Private Sub TextBox2_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    On Error GoTo Errors
502     If KeyCode = 8 Or KeyCode = 46 Then ' 8=backSpace, 46=del
        
504         Call SetList(Me.TextBox2.Value, Me.ListBox2, arrTGroup, Coll_columnTGroup, True)
505         If Me.ListBox2.ListCount > 0 Then
506             If Me.TextBox2.Value = Me.ListBox2.List(0) Then Me.TextBox1.Value = Me.ListBox2.List(0)
507         Else
508             Me.TextBox1.Value = ""
509         End If
510     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub TextBox3_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
516     If KeyCode = 8 Or KeyCode = 46 Then Call SetList(Me.TextBox3.Value, Me.ListBox3, arrT04H, Coll_columnT04H)
End Sub

Private Sub UserForm_Activate()
    On Error GoTo Errors
                                addlog "START FormFind Show(UserForm_Activate)"
    Dim tmp_arr()
    Dim tmp_data As String
    Dim arr_data() As String
    Dim U, i As Integer
                                
527     TextBox1_Changed = True
528     Me.ListBox2.Height = 0
529     Me.ListBox3.Height = 0
530     Me.ListBox4.Height = 0
531     Me.ListBox1.Clear
532     Me.ListBox2.Clear
533     Me.ListBox3.Clear
534     Me.ListBox4.Clear
535     TGroupIndex = Null
536     For i = 0 To 9
537         Me.Controls("OptionButton" & i + 1).Visible = False
538     Next i
    
540     tmp_arr = Reg.Range("D" & ActiveCell.Row & ":G" & ActiveCell.Row).Value
541     For i = LBound(tmp_arr, 2) To UBound(tmp_arr, 2)
542         If tmp_arr(1, i) <> "" Then U = i: Exit For
543     Next i
    
545     tmp_data = RemuvC(ActiveCell.Value, 2)
546     If tmp_data = "" Then
547         Me.MultiPage1.Value = 0
548     Else
549         arr_data = Split(tmp_data, ";")
550         If mytree.exists(LCase(arr_data(0))) Then
551             Me.MultiPage1.Value = 0
552         Else
553             Me.MultiPage1.Value = IIf(U = 4, 1, 0)
554         End If
555     End If
    
557     TGroupInT = False
558     arrTGroup_Seved = True
559     Me.TextBox2.Value = ""
560     Me.TextBox1.Value = ""
561     Me.TextBox3.Value = ""
562     Me.TextBox7.Value = ""
563     Me.TextNLm.Value = ""
564     Me.TextCLm.Value = ""
565     Me.TextNLs.Value = ""
566     Me.TextCLs.Value = ""
    
568     If Me.MultiPage1.Value = 0 Then
569         If Reg.Range("J" & ActiveCell.Row).Value = "" Then
570             Me.TextBox1.Value = NStr(Reg.Range("C" & ActiveCell.Row).Value)
571             If InStr(Me.TextBox1.Value, ";") = 0 Then Me.TextBox2.Value = Me.TextBox1.Value
572         Else
573             Me.TextBox2.Value = NStr(Reg.Range("C" & ActiveCell.Row).Value)
574             If Not Me.TextBox1.Value = NStr(Reg.Range("J" & ActiveCell.Row).Value) Then Me.TextBox1.Value = NStr(Reg.Range("J" & ActiveCell.Row).Value)
575         End If
576         Me.TextBox2.SetFocus
577     Else
578         Me.TextBox3.Value = NStr(Reg.Range("C" & ActiveCell.Row).Value)
579         TGroupIndex = ArrFind(arrT04H, Me.TextBox3.Value, , "Name")
580         If Not IsNull(TGroupIndex) Then
581             Me.TextBox7.Value = arrT04H(TGroupIndex, Coll_columnT04H("TName"))
582             Me.TextNLm.Value = arrT04H(TGroupIndex, Coll_columnT04H("Ntrm"))
583             Me.TextCLm.Value = arrT04H(TGroupIndex, Coll_columnT04H("N04m"))
584             Me.TextNLs.Value = arrT04H(TGroupIndex, Coll_columnT04H("Ntrs"))
585             Me.TextCLs.Value = arrT04H(TGroupIndex, Coll_columnT04H("N04s"))
586             Me.Label10.BackColor = &HC0FFC0
587             Me.Label10.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: """ & Me.TextBox3.Value & """"
588         Else
589             Me.Label10.BackColor = &HC0C0FF
590             Me.Label10.Caption = """" & Me.TextBox3.Value & """ - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
591         End If
592         Me.TextBox3.SetFocus
593     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub UserForm_Initialize()
    On Error GoTo Errors
                                addlog "START FormFind Show(UserForm_Initialize)"
    
602     FormFindShow = True
603     TextChange = True
    
    ' Hide the Image container
606     Me.frmImageBox.Visible = False
607     Me.frmImageBox.Enabled = False
    
609     Set mcTree = New clsTreeView
    
    Dim cRoot As clsNode
    'A node
    Dim cNode As clsNode
    'An extra variable should you need to remember a certain node
    Dim cExtraNode As clsNode
616     With mcTree
617         Set .TreeControl = Me.Tree
        'Set some properties
619         .CheckBoxes(bTriState:=True) = True
620         .RootButton = True
621         .LabelEdit = 0 'default is 0 can be edited (like LabelEditConstants tvwAutomatic/tvwManual)
622         .Indentation = 20 * 0.75 'defaults to 11.25
623         .NodeHeight = 16 * 0.75 'defaults to 12
624         .ShowLines = True
        'If your form has icons in an iconframe (called frmImageBox),
        'you could use icons for the expand and collapse buttons:
627         Call .ExpanderImage(Me.frmImageBox.Controls("XPMinus").Picture, Me.frmImageBox.Controls("XPPlus").Picture)
628         Call .CheckboxImage(Me.frmImageBox.Controls("meCheckboxFalse").Picture, Me.frmImageBox.Controls("meCheckboxTrue").Picture, Me.frmImageBox.Controls("meCheckboxNull").Picture)
629         Set .Images = Me.frmImageBox
        
        
        
        'The root of the tree
'        Dim first As Integer
        Dim i As Double
        
        Dim trees()
638         trees = mytree.keys
        
640         For i = 0 To mytree.Count - 1
641             If mytree(trees(i))(0) = "" Then
642                 Set cRoot = .AddRoot(CStr(trees(i)), CStr(mytree(trees(i))(-2)))
643                 cRoot.Expanded = False
644             Else
645                 If Not cRoot.Key = trees(i) Then Set cRoot = .Nodes(mytree(trees(i))(0))
646                 Set cNode = cRoot.AddChild(CStr(trees(i)), CStr(mytree(trees(i))(-2)))
647                 cNode.Expanded = False
648             End If
649         Next i
        
        'create the node controls and display the tree
652         If cRoot Is Nothing Then Set cRoot = .AddRoot("", ""): .CheckBoxes = False
653         .Refresh
654     End With

                                addlog "END FormFind Show(UserForm_Initialize)"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub mcTree_NodeCheck(cNode As clsNode)
    On Error GoTo Errors
    Dim tmp_Child As clsNode
    Dim tmp_selected As New Collection
    Dim tmp_selected2 As New Collection
    Dim tmp_select As Variant
    Dim tmp_txt As String

669     For Each tmp_Child In mcTree.RootNodes
670         If tmp_Child.Checked = -1 Then
671             tmp_selected.Add tmp_Child.Key, tmp_Child.Key
672         ElseIf tmp_Child.Checked = 1 Then
673             Set tmp_selected = selected_add(tmp_selected, tmp_Child)
674         End If
675     Next
676     Me.ListBox1.Clear
677     tmp_txt = ""
678     If Not tmp_selected Is Nothing Then
679         For Each tmp_select In tmp_selected
680             If mytree.exists(tmp_select) Then
681                 Me.ListBox1.AddItem mytree(tmp_select)(-2)
682             If tmp_txt = "" Then
683                 tmp_txt = mytree(tmp_select)(-2)
684             Else
685                 tmp_txt = tmp_txt & "; " & mytree(tmp_select)(-2)
686             End If
687             End If
688         Next
689     End If
    
691     If IsNull(TGroupIndex) And tmp_txt <> Me.TextBox2.Value And TGroupInT Then Me.TextBox2.Value = ""
692     If Me.TextBox1.text <> tmp_txt Then
693         TextBox1_Changed = False
694         Me.TextBox1.text = tmp_txt
695         TextBox1_Changed = True
696     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Function selected_add(tmp_selected As Collection, cNode As clsNode, Optional LastNode As Boolean = False)
    On Error GoTo Errors
    Dim tmp_Child As clsNode
    Dim isChild As Boolean
705     isChild = True
706     If Not cNode.ChildNodes Is Nothing Then
707         For Each tmp_Child In cNode.ChildNodes
708             If LastNode Then isChild = tmp_Child.ChildNodes Is Nothing
709             If tmp_Child.Checked = -1 And isChild Then
710                 tmp_selected.Add tmp_Child.Key, tmp_Child.Key
711             ElseIf cNode.Checked = 1 And Not LastNode Then
712                 Set tmp_selected = selected_add(tmp_selected, tmp_Child)
                'Exit Function
714             Else
715                 If LastNode Then Set tmp_selected = selected_add(tmp_selected, tmp_Child, True)
716             End If
717         Next
718     End If
719     Set selected_add = tmp_selected
    Exit Function
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Function



Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
727     If Not hidenn Then
728         Cancel = 1
729         Me.Hide
                                addlog "END FormFind Show (Button_Close_Click)"
731     Else
732         FormFindShow = False
733     End If
End Sub

Private Sub frTreeControl_Enter()
737     If Not mcTree Is Nothing Then
738         mcTree.EnterExit False
739     End If
    
End Sub

'This gets fired when a node is clicked
Private Sub mcTree_Click(cNode As clsNode)
745     If mytree.exists(cNode.Key) Then
746         If cNode.Key = LCase(cNode.Caption) Then
747             Me.Label18.Caption = mytree(cNode.Key)(12)
748         Else
749             Me.Label18.Caption = mytree(cNode.Key)(-2)
750         End If
751     Else
752         Me.Label18.Caption = ""
753     End If
End Sub

'This gets fired when a key is pressed down
Private Sub mcTree_KeyDown(cNode As clsNode, ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    On Error GoTo Errors
' PT demo
    Dim bMove As Boolean
    Dim sMsg As String
    Dim cSource As clsNode
    
764     Select Case KeyCode
    Case vbKeyUp, vbKeyDown, vbKeyLeft, vbKeyRight, _
         48 To 57, 96 To 105, vbKeyF2, 20, 93, _
         vbKeyPageUp, vbKeyPageDown, vbKeyHome, vbKeyEnd
        ' these keys are already trapped in clsTreeView for navigation, expand/collapse, edit mode

    Case vbKeyC, vbKeyC + 48
771         If Shift = 2 Then    ' Ctrl-X move
            ' code here to validate if user can copy this node
773             Set mcTree.MoveCopyNode(False) = mcTree.ActiveNode
774         End If

    Case vbKeyX, vbKeyX + 48
777         If Shift = 2 Then    ' Ctrl-X move
            ' code here to validate if user can move this node
779             Set mcTree.MoveCopyNode(True) = mcTree.ActiveNode
780         End If

    Case vbKeyV, vbKeyV + 48
783         If Shift = 2 Then    ' Ctrl-V paste
784             Set cSource = mcTree.MoveCopyNode(bMove)
785             If Not cSource Is Nothing Then
                ' code to validate if the stored 'MoveCopyNode' can be Moved or Copied to the selected node
787                 If bMove Then
788                     mcTree.Move cSource, mcTree.ActiveNode, bShowError:=True
789                 Else
790                     mcTree.Copy cSource, mcTree.ActiveNode, bShowError:=True
791                 End If

793                 mcTree.ActiveNode.Sort    ' assume user wants move/copy to locate as sorted
794                 mcTree.ActiveNode.Expanded = True    ' assume user wants to see the moved/copied node if behind a collapsed node
795                 mcTree.Refresh
796             End If
797         End If
    Case vbKeyDelete
799         sMsg = "Are you sure you want to delete node ''" & cNode.Caption & "'' and all it's child-nodes?" & vbCr & _
                        vbCr & "(press Ctrl-break now and click Debug to see this event code)"
801         If MsgBox(sMsg, vbOKCancel, Reg.Name) = vbOK Then
802             mcTree.NodeRemove cNode
803             mcTree.Refresh
804         End If
805     End Select
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub SetList(txt As String, ListBox, arr, coll, Optional treeFind As Boolean = False)
    On Error GoTo Errors
    Dim i As Integer
    
814     TextChange = False
815     ListBox.Clear
816     TextChange = True

818     TGroupIndex = Null
819     If UBound(arr) > 0 Then
820         For i = LBound(arr) + 1 To UBound(arr)
821             If arr(i, coll("Name")) = txt Then TGroupIndex = i
822             If InStr(LCase(arr(i, coll("Name"))), LCase(txt)) > 0 Then ListBox.AddItem arr(i, coll("Name"))
823             If ListBox.ListCount > 10 Then Exit For
824         Next i
825     End If
826     If ListBox.ListCount < 11 And treeFind Then
        Dim tmp_Child As clsNode
828         For Each tmp_Child In mcTree.Nodes
829             If InStr(LCase(tmp_Child.Caption), LCase(txt)) > 0 Then
830                 ListBox.AddItem tmp_Child.Caption
831                 ListBox.List(ListBox.ListCount - 1, 1) = mytree(tmp_Child.Key)(-2)
832             End If
833             If InStr(tmp_Child.Key, LCase(txt)) > 0 Then
834                 ListBox.AddItem mytree(tmp_Child.Key)(-2)
835                 ListBox.List(ListBox.ListCount - 1, 1) = mytree(tmp_Child.Key)(-2)
836             End If
837             If ListBox.ListCount > 10 Then Exit For
838         Next tmp_Child
839     End If
840     If ListBox.ListCount < 11 And treeFind Then
        Dim trees()
842         trees = mytree.keys
        
844         For i = 0 To mytree.Count - 1
845             If mytree(trees(i))(12) <> "" Then
846                 If InStr(LCase(mytree(trees(i))(12)), LCase(txt)) > 0 Then
847                     ListBox.AddItem mytree(trees(i))(12)
848                     ListBox.List(ListBox.ListCount - 1, 1) = mytree(trees(i))(-2)
849                     If ListBox.ListCount > 10 Then Exit For
850                 End If
851             End If
852         Next i
853     End If
854     ListBox.Height = IIf(ListBox.ListCount * 10 + 4 = 4, 0, ListBox.ListCount * 10 + 4)
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub OptionButton1_Change()
'    optselect = True
861     Me.TextBox1.text = arrTGroup(TGroupIndex, Coll_columnTGroup("G0"))
End Sub
Private Sub OptionButton2_Change()
'    optselect = True
865     Me.TextBox1.text = arrTGroup(TGroupIndex, Coll_columnTGroup("G1"))
End Sub
Private Sub OptionButton3_Change()
'    optselect = True
869     Me.TextBox1.text = arrTGroup(TGroupIndex, Coll_columnTGroup("G2"))
End Sub
Private Sub OptionButton4_Change()
'    optselect = True
873     Me.TextBox1.text = arrTGroup(TGroupIndex, Coll_columnTGroup("G3"))
End Sub
Private Sub OptionButton5_Change()
'    optselect = True
877     Me.TextBox1.text = arrTGroup(TGroupIndex, Coll_columnTGroup("G4"))
End Sub
Private Sub OptionButton6_Change()
'    optselect = True
881     Me.TextBox1.text = arrTGroup(TGroupIndex, Coll_columnTGroup("G5"))
End Sub
Private Sub OptionButton7_Change()
'    optselect = True
885     Me.TextBox1.text = arrTGroup(TGroupIndex, Coll_columnTGroup("G6"))
End Sub
Private Sub OptionButton8_Change()
'    optselect = True
889     Me.TextBox1.text = arrTGroup(TGroupIndex, Coll_columnTGroup("G7"))
End Sub
Private Sub OptionButton9_Change()
'    optselect = True
893     Me.TextBox1.text = arrTGroup(TGroupIndex, Coll_columnTGroup("G8"))
End Sub
Private Sub OptionButton10_Change()
'    optselect = True
897     Me.TextBox1.text = arrTGroup(TGroupIndex, Coll_columnTGroup("G9"))
End Sub


Function TransposeArray(arr)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim X, Y
    Dim tempArray() As String
905     ReDim tempArray(LBound(arr, 2) To UBound(arr, 2), LBound(arr, 1) To UBound(arr, 1))
906     For X = LBound(arr, 2) To UBound(arr, 2)
907         For Y = LBound(arr, 1) To UBound(arr, 1)
908             tempArray(X, Y) = arr(Y, X)
909         Next Y
910     Next X
911     TransposeArray = tempArray
End Function

Private Sub XPPlus_Click()

End Sub
Attribute VB_Name = "FormFindCheck"
Attribute VB_Base = "0{B8D75503-2DCE-4A80-92D5-9E54FB86BC70}{BC0A699A-4C78-4809-B41A-44BD21DA5F9B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Dim TGroupIndex
Dim TGroupCount, iSelected As Integer
Dim TextChange, TGroupInT, arrTGroup_Seved, arrT04H_Seved, TextBox1_Changed As Boolean
Dim optselect As Boolean

'Option Explicit

'##########Treeview Code##########
'Add this to your form's declaration section
'Public WithEvents mcTree As clsTreeView
Public WithEvents mcTree As clsTreeView
Attribute mcTree.VB_VarHelpID = -1
Private mbExit As Boolean    ' to exit a SpinButton event
'/##########Treeview Code##########

#If Mac Then
    Const mcPtPixel As Long = 1
#Else
    Const mcPtPixel As Single = 0.75
#End If


Private Sub Button_Cencel_Click()
                                addlog "END FormFind Show (Button_Cencel_Click)"
'    Unload Me
25     Me.Hide
End Sub




Private Sub Button_Select_Click()
'    On Error GoTo Errors
    Dim tmp_Child As clsNode
    Dim i As Integer
    Dim tmparr, tmparr1, SelectedCells

    Set SelectedCells = CreateObject("Scripting.Dictionary")
    tmparr = Reg.Range("C" & Selection.Row, "J" & Selection.Cells(Selection.Count).Row).Value
'    tmparr1 = Reg.Range("J" & Selection.Row, "J" & Selection.Cells(Selection.Count).Row).Value

    If Me.TextBox1.Value = "" Then
        Me.Hide
    Else
        If mytree.exists(LCase(Me.TextBox1.Value)) Then
            Set tmp_Child = mcTree.Nodes(LCase(Me.TextBox1.Value))
            For i = LBound(tmparr) To UBound(tmparr)
                If tmparr(i, 1) <> "" Then
                    If tmparr(i, 8) = "" Then
                        tmp = RemuvC(tmparr(i, 1), 3)
                        arrdysp = Split(tmp, ";")
                    Else
                        tmp = RemuvC(tmparr(i, 8), 3)
                        arrdysp = Split(tmp, ";")
                    End If
                    Call SetListChild(tmp_Child, arrdysp, i, tmparr(i, 5) <> "")
                End If
            Next i
        Else

        End If

    End If
    Me.Hide
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Sub SetListChild(father As clsNode, arrdysp, r As Integer, U04 As Boolean)
    Dim tmp_Child As clsNode
    Dim i As Integer
    For i = 0 To UBound(arrdysp)
        If U04 Then
            If InStr(1, LCase(arrdysp(i)), LCase(father.Caption)) > 0 Then
                Reg.Range("B" & Selection.Row + r - 1).Interior.ColorIndex = 6
                Exit Sub
            End If
        Else
            If LCase(arrdysp(i)) = LCase(father.Caption) Then
                Reg.Range("B" & Selection.Row + r - 1).Interior.ColorIndex = 6
                Exit Sub
            End If
        End If
    Next i
    
    If Not father.ChildNodes Is Nothing Then
        For Each tmp_Child In father.ChildNodes
            Call SetListChild(tmp_Child, arrdysp, r, U04)
        Next tmp_Child
    End If
End Sub


Private Sub CommandButton1_Click()
153     Me.TextBox2.Value = Me.TextBox1.Value
End Sub

Private Sub ListBox1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim RagAddress As String
    On Error Resume Next
159     RegBack = Selection.Cells(1).Address
160     RagAddress = mytree(LCase(ListBox1.List(ListBox1.ListIndex, 0)))(10)
161     FormFind.Hide
162     Reg.Range(RagAddress).Activate
163     Reg.Image3.Top = Reg.Range(RagAddress).Top
164     Reg.Image3.Left = Reg.Range(RagAddress).Left - Reg.Image3.Width
165     Reg.Image3.Visible = True
                                addlog "END FormFind Show (ListBox1_DblClick)"
End Sub



Private Sub TextBox1_Change()
    On Error GoTo Errors
    Dim tmp_Child As clsNode
    Dim arr_data() As String
    Dim d
    Dim txt As String
    
184     If TextBox1_Changed Then
185         If Not mcTree Is Nothing Then
186             mcTree.ExpandToLevel 0, False
187             For Each tmp_Child In mcTree.Nodes
188                 If tmp_Child.Checked Then tmp_Child.Checked = 0
189             Next
190         End If
        
192         Label6.BackColor = &HFFFFFF
193         Label6.Caption = ""
'        Me.TextBox1.Text = RemuvC(Me.TextBox1.Text, 2)
195         arr_data = Split(RemuvC(Me.TextBox1.text, 2), ";")
196         Me.TextBox1.text = Join(arr_data, "; ")
197         If Not mcTree.Nodes Is Nothing And Me.TextBox1.text <> "" Then
198             Me.ListBox1.Clear
199             For d = LBound(arr_data) To UBound(arr_data)
200                 If arr_data(d) = "" Then GoTo nextd
                
202                 If mytree.exists(LCase(arr_data(d))) Then
203                     Set mcTree.ActiveNode = mcTree.Nodes(mytree(LCase(arr_data(d)))(-2))
'                    mcTree.ActiveNode.Checked = -1
205                     Label6.BackColor = &HC0FFC0
206                     Label6.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|: """ & mcTree.ActiveNode.Caption & """"

208                     mcTree.ExpandToLevel 0, False
209                     mcTree.ScrollToView mcTree.ActiveNode, -2 ' the -ve means will scroll won't change if the node is visible
210                     mcTree.NodeClick mcTree.ActiveNode.Control, mcTree.ActiveNode
211                     Me.ListBox1.AddItem mcTree.ActiveNode.Caption
212                     mcTree.ActiveNode.Checked = -1
213                     GoTo nextd
214                 Else
215                     For Each tmp_Child In mcTree.Nodes
216                         If InStr(1, tmp_Child.Caption, arr_data(d), vbTextCompare) > 0 Then  'And Not optselect
217                             tmp_Child.Expanded = True
218                             If Not tmp_Child Is Nothing Then
219                                 Set mcTree.ActiveNode = tmp_Child
220                                 Label6.Caption = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: """ & tmp_Child.Caption & """"
    
222                                 mcTree.ExpandToLevel 0, False
223                                 mcTree.ScrollToView mcTree.ActiveNode, -2 ' the -ve means will scroll won't change if the node is visible
224                                 mcTree.NodeClick mcTree.ActiveNode.Control, mcTree.ActiveNode
225                             End If
226                             GoTo nextd
227                         End If
228                     Next
229                 End If
                

'                MsgBox """" & arr_data(d) & """ - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", , "|fffd||fffd||fffd||fffd||fffd|"
233                 Label6.BackColor = &HC0C0FF
234                 Label6.Caption = """" & arr_data(d) & """ - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
235 nextd:
236             Next d
            
238         End If
        
240         mcTree.Refresh
241     End If
242     optselect = False
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub



Private Sub TextBox2_Change()
    On Error GoTo Errors
    Dim i As Integer
252     iSelected = 0
254     If Me.TextBox2.Value = "" Then
255         Me.Label6.BackColor = &HFFFFFF
256         Me.Label6.Caption = ""
257     Else
258         If Me.TextBox2.Value <> RemuvC(Me.TextBox2.text, 0) And Me.TextBox1.Value <> Me.TextBox2.Value Then Me.TextBox2.Value = RemuvC(Me.TextBox2.text, 0)
        Dim tmp_Child As clsNode
260         For Each tmp_Child In mcTree.Nodes
261             If tmp_Child.Caption = Me.TextBox2.Value Then
262                 TGroupInT = True
263                 Me.TextBox1.Value = Me.TextBox2.Value
                Exit For
265             End If
266         Next tmp_Child
        



291         If Me.TextBox1.Value <> Me.TextBox2.Value Then
292             Me.TextBox1.Value = ""
293             Me.ListBox1.Clear
294             Me.Label6.BackColor = &HC0C0FF
295             Me.Label6.Caption = """" & Me.TextBox2.Value & """ - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
296         End If
297     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub



Private Sub TextBox2_Enter()
327     Me.ListBox2.Height = IIf(Me.ListBox2.ListCount * 10 + 4 = 4, 0, Me.ListBox2.ListCount * 10 + 4)
End Sub



Private Sub TextBox2_Exit(ByVal Cancel As MSForms.ReturnBoolean)
335     Me.ListBox2.Height = 0
End Sub


Private Sub ListBox2_Enter()
343     Me.ListBox2.Height = IIf(Me.ListBox2.ListCount * 10 + 4 = 4, 0, Me.ListBox2.ListCount * 10 + 4)
End Sub


Private Sub ListBox2_Exit(ByVal Cancel As MSForms.ReturnBoolean)
351     Me.ListBox2.Height = 0
End Sub



Private Sub TextBox2_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    On Error GoTo Errors
    Dim txt As String
361     txt = Left(Me.TextBox2.Value, Me.TextBox2.SelStart) & Right(Me.TextBox2.Value, Len(Me.TextBox2.Value) - Me.TextBox2.SelStart - Me.TextBox2.SelLength) & ChrW(KeyAscii)
362     Call SetList(txt, Me.ListBox2, True)
363     If Me.ListBox2.ListCount > 0 Then
364         If Me.TextBox2.Value & ChrW(KeyAscii) = Me.ListBox2.List(0) Then Me.TextBox1.Value = Me.ListBox2.List(0)
365     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub



Private Sub TextBox2_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    On Error GoTo Errors
376     If KeyCode = 40 Then
377         Call SetList(Me.TextBox2.Value, Me.ListBox2, True)
378         If Me.ListBox2.ListCount > 0 Then Me.ListBox2.Value = Me.ListBox2.List(0)
379     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub



Private Sub ListBox2_Change()
    On Error GoTo Errors
396     If TextChange Then
397         Me.TextBox2.Value = Me.ListBox2.Value
398         If Me.ListBox2.ListIndex > -1 Then
399             If Me.ListBox2.List(Me.ListBox2.ListIndex, 1) <> "" Then
400                 Me.TextBox1.Value = Me.ListBox2.List(Me.ListBox2.ListIndex, 1)
401             End If
402         End If
403     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub



Private Sub ListBox2_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    On Error GoTo Errors
414     If KeyCode = 13 Or KeyCode = 9 Then '13=enter, 9 =tab
415         KeyCode = 0
416         Me.ListBox2.Height = 0
417         Me.TextBox2.Value = Me.ListBox2.Value
418         Me.Button_Select.SetFocus
419     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub



Private Sub ListBox2_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
437     Me.TextBox1.SetFocus
438     Me.ListBox2.Height = 0
End Sub



Private Sub TextBox2_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    On Error GoTo Errors
448     If KeyCode = 8 Or KeyCode = 46 Then ' 8=backSpace, 46=del
        
450         Call SetList(Me.TextBox2.Value, Me.ListBox2, True)
451         If Me.ListBox2.ListCount > 0 Then
452             If Me.TextBox2.Value = Me.ListBox2.List(0) Then Me.TextBox1.Value = Me.ListBox2.List(0)
453         Else
454             Me.TextBox1.Value = ""
455         End If
456     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub




Private Sub UserForm_Activate()
    On Error GoTo Errors
                                addlog "START FormFind Show(UserForm_Activate)"
    Dim tmp_arr()
    Dim tmp_data As String
    Dim arr_data() As String
    Dim U, i As Integer
                                
474     TextBox1_Changed = True
475     Me.ListBox2.Height = 0
478     Me.ListBox1.Clear
479     Me.ListBox2.Clear

    
487     tmp_arr = Reg.Range("D" & ActiveCell.Row & ":G" & ActiveCell.Row).Value
488     For i = LBound(tmp_arr, 2) To UBound(tmp_arr, 2)
489         If tmp_arr(1, i) <> "" Then U = i: Exit For
490     Next i
    


506     Me.TextBox2.Value = ""
507     Me.TextBox1.Value = ""

   

'516         If Reg.Range("J" & ActiveCell.Row).Value = "" Then
'517             Me.TextBox1.Value = NStr(Reg.Range("C" & ActiveCell.Row).Value)
'518             If InStr(Me.TextBox1.Value, ";") = 0 Then Me.TextBox2.Value = Me.TextBox1.Value
'519         Else
'520             Me.TextBox2.Value = NStr(Reg.Range("C" & ActiveCell.Row).Value)
'521             If Not Me.TextBox1.Value = NStr(Reg.Range("J" & ActiveCell.Row).Value) Then Me.TextBox1.Value = NStr(Reg.Range("J" & ActiveCell.Row).Value)
'522         End If
523         Me.TextBox2.SetFocus

    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub UserForm_Initialize()
    On Error GoTo Errors
                                addlog "START FormFind Show(UserForm_Initialize)"
    
549     FormFindShow = True
550     TextChange = True
    
    ' Hide the Image container
553     Me.frmImageBox.Visible = False
554     Me.frmImageBox.Enabled = False
    
556     Set mcTree = New clsTreeView
    
    Dim cRoot As clsNode
    'A node
    Dim cNode As clsNode
    'An extra variable should you need to remember a certain node
    Dim cExtraNode As clsNode
563     With mcTree
564         Set .TreeControl = Me.Tree
        'Set some properties
566         .CheckBoxes(bTriState:=True) = True
567         .RootButton = True
568         .LabelEdit = 0 'default is 0 can be edited (like LabelEditConstants tvwAutomatic/tvwManual)
569         .Indentation = 20 * 0.75 'defaults to 11.25
570         .NodeHeight = 16 * 0.75 'defaults to 12
571         .ShowLines = True
        'If your form has icons in an iconframe (called frmImageBox),
        'you could use icons for the expand and collapse buttons:
574         Call .ExpanderImage(Me.frmImageBox.Controls("XPMinus").Picture, Me.frmImageBox.Controls("XPPlus").Picture)
575         Call .CheckboxImage(Me.frmImageBox.Controls("meCheckboxFalse").Picture, Me.frmImageBox.Controls("meCheckboxTrue").Picture, Me.frmImageBox.Controls("meCheckboxNull").Picture)
576         Set .Images = Me.frmImageBox
        
        
        
        'The root of the tree
'        Dim first As Integer
        Dim i As Double
        
        Dim trees()
585         trees = mytree.keys
        
587         For i = 0 To mytree.Count - 1
588             If mytree(trees(i))(0) = "" Then
589                 Set cRoot = .AddRoot(CStr(trees(i)), CStr(mytree(trees(i))(-2)))
590                 cRoot.Expanded = False
591             Else
592                 If Not cRoot.Key = trees(i) Then Set cRoot = .Nodes(mytree(trees(i))(0))
593                 Set cNode = cRoot.AddChild(CStr(trees(i)), CStr(mytree(trees(i))(-2)))
594                 cNode.Expanded = False
595             End If
596         Next i
        
        'create the node controls and display the tree
599         If cRoot Is Nothing Then Set cRoot = .AddRoot("", ""): .CheckBoxes = False
600         .Refresh
601     End With

                                addlog "END FormFind Show(UserForm_Initialize)"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub mcTree_NodeCheck(cNode As clsNode)
    On Error GoTo Errors
    Dim tmp_Child As clsNode
    Dim tmp_selected As New Collection
    Dim tmp_selected2 As New Collection
    Dim tmp_select As Variant
    Dim tmp_txt As String

616     For Each tmp_Child In mcTree.RootNodes
617         If tmp_Child.Checked = -1 Then
618             tmp_selected.Add tmp_Child.Caption, tmp_Child.Caption
619         ElseIf tmp_Child.Checked = 1 Then
620             Set tmp_selected = selected_add(tmp_selected, tmp_Child)
621         End If
622     Next
623     Me.ListBox1.Clear
624     tmp_txt = ""
625     If Not tmp_selected Is Nothing Then
626         For Each tmp_select In tmp_selected
627             Me.ListBox1.AddItem tmp_select
628             If tmp_txt = "" Then
629                 tmp_txt = tmp_select
630             Else
631                 tmp_txt = tmp_txt & "; " & tmp_select
632             End If
633         Next
634     End If
    
636     If IsNull(TGroupIndex) And tmp_txt <> Me.TextBox2.Value And TGroupInT Then Me.TextBox2.Value = ""
637     If Me.TextBox1.text <> tmp_txt Then
638         TextBox1_Changed = False
639         Me.TextBox1.text = tmp_txt
640         TextBox1_Changed = True
641     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Function selected_add(tmp_selected As Collection, cNode As clsNode, Optional LastNode As Boolean = False)
    On Error GoTo Errors
    Dim tmp_Child As clsNode
    Dim isChild As Boolean
650     isChild = True
651     If Not cNode.ChildNodes Is Nothing Then
652         For Each tmp_Child In cNode.ChildNodes
653             If LastNode Then isChild = tmp_Child.ChildNodes Is Nothing
654             If tmp_Child.Checked = -1 And isChild Then
655                 tmp_selected.Add tmp_Child.Caption, tmp_Child.Caption
656             ElseIf cNode.Checked = 1 And Not LastNode Then
657                 Set tmp_selected = selected_add(tmp_selected, tmp_Child)
                'Exit Function
659             Else
660                 If LastNode Then Set tmp_selected = selected_add(tmp_selected, tmp_Child, True)
661             End If
662         Next
663     End If
664     Set selected_add = tmp_selected
    Exit Function
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Function



Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
672     If Not hidenn Then
673         Cancel = 1
674         Me.Hide
                                addlog "END FormFind Show (Button_Close_Click)"
676     Else
677         FormFindShow = False
678     End If
End Sub

Private Sub frTreeControl_Enter()
682     If Not mcTree Is Nothing Then
683         mcTree.EnterExit False
684     End If
    
End Sub


'This gets fired when a key is pressed down
Private Sub mcTree_KeyDown(cNode As clsNode, ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    On Error GoTo Errors
' PT demo
    Dim bMove As Boolean
    Dim sMsg As String
    Dim cSource As clsNode
    
697     Select Case KeyCode
    Case vbKeyUp, vbKeyDown, vbKeyLeft, vbKeyRight, _
         48 To 57, 96 To 105, vbKeyF2, 20, 93, _
         vbKeyPageUp, vbKeyPageDown, vbKeyHome, vbKeyEnd
        ' these keys are already trapped in clsTreeView for navigation, expand/collapse, edit mode

    Case vbKeyC, vbKeyC + 48
704         If Shift = 2 Then    ' Ctrl-X move
            ' code here to validate if user can copy this node
706             Set mcTree.MoveCopyNode(False) = mcTree.ActiveNode
707         End If

    Case vbKeyX, vbKeyX + 48
710         If Shift = 2 Then    ' Ctrl-X move
            ' code here to validate if user can move this node
712             Set mcTree.MoveCopyNode(True) = mcTree.ActiveNode
713         End If

    Case vbKeyV, vbKeyV + 48
716         If Shift = 2 Then    ' Ctrl-V paste
717             Set cSource = mcTree.MoveCopyNode(bMove)
718             If Not cSource Is Nothing Then
                ' code to validate if the stored 'MoveCopyNode' can be Moved or Copied to the selected node
720                 If bMove Then
721                     mcTree.Move cSource, mcTree.ActiveNode, bShowError:=True
722                 Else
723                     mcTree.Copy cSource, mcTree.ActiveNode, bShowError:=True
724                 End If

726                 mcTree.ActiveNode.Sort    ' assume user wants move/copy to locate as sorted
727                 mcTree.ActiveNode.Expanded = True    ' assume user wants to see the moved/copied node if behind a collapsed node
728                 mcTree.Refresh
729             End If
730         End If
    Case vbKeyDelete
732         sMsg = "Are you sure you want to delete node ''" & cNode.Caption & "'' and all it's child-nodes?" & vbCr & _
                        vbCr & "(press Ctrl-break now and click Debug to see this event code)"
734         If MsgBox(sMsg, vbOKCancel, Reg.Name) = vbOK Then
735             mcTree.NodeRemove cNode
736             mcTree.Refresh
737         End If
738     End Select
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub SetList(txt As String, ListBox, Optional treeFind As Boolean = False)
    On Error GoTo Errors
    Dim i As Integer
    
747     TextChange = False
748     ListBox.Clear
749     TextChange = True

759     If ListBox.ListCount < 11 And treeFind Then
        Dim tmp_Child As clsNode
761         For Each tmp_Child In mcTree.Nodes
762             If InStr(LCase(tmp_Child.Caption), LCase(txt)) > 0 Then
763                 ListBox.AddItem tmp_Child.Caption
764                 ListBox.List(ListBox.ListCount - 1, 1) = tmp_Child.Caption
765             End If
766             If ListBox.ListCount > 10 Then Exit For
767         Next tmp_Child
768     End If
769     ListBox.Height = IIf(ListBox.ListCount * 10 + 4 = 4, 0, ListBox.ListCount * 10 + 4)
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub




Function TransposeArray(arr)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim X, Y
    Dim tempArray() As String
820     ReDim tempArray(LBound(arr, 2) To UBound(arr, 2), LBound(arr, 1) To UBound(arr, 1))
821     For X = LBound(arr, 2) To UBound(arr, 2)
822         For Y = LBound(arr, 1) To UBound(arr, 1)
823             tempArray(X, Y) = arr(Y, X)
824         Next Y
825     Next X
826     TransposeArray = tempArray
End Function
Attribute VB_Name = "FormPem"
Attribute VB_Base = "0{D0EF1C1C-63A8-4463-85E8-EBF823EE65DA}{295D7DBB-CD05-4CFE-A1ED-7302CE1E5194}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim changePem As Boolean
Dim capt As String
'Dim captform As Boolean


Public Sub ButtonOk_Click()
    On Error GoTo Errors
8     capt = ""
9     captform = False
10     ReDim tmp_PEM(0 To 0)
11     If CheckCompany.Value = True Then capt = CheckCompany.Caption: captform = True
12     For i = 0 To ListBox1.ListCount - 1
13         If ListBox1.Selected(i) = True Then
14             If captform = False Then capt = IIf(capt = "", ListBox1.List(i, 1), capt & ", " & ListBox1.List(i, 1))
15             ReDim Preserve tmp_PEM(0 To UBound(tmp_PEM) + 1)
16             tmp_PEM(UBound(tmp_PEM)) = ListBox1.List(i, 0)
17         End If
18     Next

20     Me.Hide
21     If ThisWorkbook.ActiveSheet.CodeName = "Rep" Then
22         Rep.LabPEM.Caption = capt
23         If InStr(1, capt, ",") = 0 And capt <> CheckCompany.Caption And capt <> "" Then
24             Rep.Range("i14").Value = capt & " (" & CheckCompany.Caption & ")"
25         ElseIf capt = CheckCompany.Caption And UBound(tmp_PEM) > 1 Then Rep.Range("i14").Value = capt
26         ElseIf UBound(tmp_PEM) = 1 Then
27             If ListBox1.List(0, 1) = CheckCompany.Caption Then Rep.Range("i14").Value = CheckCompany.Caption
28             If ListBox1.List(0, 1) <> CheckCompany.Caption Then Rep.Range("i14").Value = ListBox1.List(0, 1) & " (" & CheckCompany.Caption & ")"
29         Else
30             Rep.Range("i14").Value = ""
31         End If
32         PEMsel = tmp_PEM
33         Call Rep.SetRangReport
34         Call Rep.ArrloadCREP
35         Call Rep.SetRangCREP
36     ElseIf ThisWorkbook.ActiveSheet.CodeName = "Rank" Then
37         PEMsel2 = tmp_PEM
38         Rank.LabPEM.Caption = capt
39         If divisionsRank.Count > 0 Then
40             Call Rank.FormDyspIndexes
41             Call Rank.sortDysp
42         Else
43             Rank.Range("a3:j" & 3 + Rank.UsedRange.Rows.Count).ClearContents
44         End If
45     ElseIf ThisWorkbook.ActiveSheet.CodeName = "Er" Then
46         PEMsel3 = tmp_PEM
47         Er.LabPEM.Caption = capt
48         If divisionsEr.Count > 0 Then
49             Call Er.FormEr
50             Call Er.sortErr
51         Else
52             Er.Range("a3:l" & 3 + Er.UsedRange.Rows.Count).ClearContents
53         End If
54     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub ListBox1_Change()
    On Error GoTo Errors
61     capt = ""
62     If changePem = False Then
63         selcount = 0
64         For i = 0 To ListBox1.ListCount - 1
65             If ListBox1.Selected(i) = True Then
66                 selcount = selcount + 1
67                 capt = IIf(capt = "", ListBox1.List(i, 1), capt & ", " & ListBox1.List(i, 1))
68             End If
69         Next i
70         If ListBox1.ListCount > 0 Then
71             If selcount = ListBox1.ListCount Then
72                 changePem = True
73                 CheckCompany.Value = True
74                 capt = CheckCompany.Caption
75                 changePem = False
76             Else
77                 changePem = True
78                 CheckCompany.Value = False
'                capt = Replace(capt, CheckCompany.Caption, "")
80                 changePem = False
81             End If
82         End If
83         TextBox1.Value = capt
84     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub




Private Sub CheckCompany_Change()
    On Error GoTo Errors
94     If changePem = False Then
95         If CheckCompany.Value = True Then
96             changePem = True
97             For i = 0 To ListBox1.ListCount - 1
98                 ListBox1.Selected(i) = True
99             Next i
100             TextBox1.Value = CheckCompany.Caption
101             changePem = False
102         Else
103             changePem = True
104             For i = 0 To ListBox1.ListCount - 1
105                 ListBox1.Selected(i) = False
106             Next i
107             TextBox1.Value = ""
108             changePem = False
109         End If
110     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub


Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
117     Cancel = 1
118     FormPem.Hide
End Sub
Attribute VB_Name = "FormPeriod"
Attribute VB_Base = "0{FD6F7364-D1A4-441B-8AC8-8558F62438CD}{1DED1A2E-D157-4037-B2EB-B1D2D30264FE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim changePer As Boolean


Public Sub ButtonOk_Click()
    On Error GoTo Errors
6     ReDim tmp_M(0 To 0)
7     capt = ""
8     For Each Control In FormPeriod.Controls
9         If Control.Name = "CCheckBoxYear" And Control.Value = True Then
10             capt = Control.Caption
11             GoTo iii
12         Else
13             If Left(Control.Name, 5) = "Check" And Control.Value = True Then
14                 capt = IIf(capt = "", Control.Caption, capt & ", " & Control.Caption)
15             End If
16         End If
17     Next Control
    
19     For i = 0 To 2
20         If ListBox1.Selected(i) = True And CheckBox1.Value = True Then
            Exit For
22         ElseIf (ListBox1.Selected(i) = False And CheckBox1.Value = False) Then
23         Else: capt = IIf(capt = "", ListBox1.List(i, 0), capt & ", " & ListBox1.List(i, 0))
24         End If
25     Next i
    
27     For i = 3 To 5
28         If ListBox1.Selected(i) = True And CheckBox2.Value = True Then
            Exit For
30         ElseIf (ListBox1.Selected(i) = False And CheckBox2.Value = False) Then
31         Else: capt = IIf(capt = "", ListBox1.List(i, 0), capt & ", " & ListBox1.List(i, 0))
32         End If
33     Next i
    
35     For i = 6 To 8
36         If ListBox1.Selected(i) = True And CheckBox3.Value = True Then
            Exit For
38         ElseIf (ListBox1.Selected(i) = False And CheckBox3.Value = False) Then
39         Else: capt = IIf(capt = "", ListBox1.List(i, 0), capt & ", " & ListBox1.List(i, 0))
40         End If
41     Next i
    
43     For i = 9 To 11
44         If ListBox1.Selected(i) = True And CheckBox4.Value = True Then
            Exit For
46         ElseIf (ListBox1.Selected(i) = False And CheckBox4.Value = False) Then
47         Else: capt = IIf(capt = "", ListBox1.List(i, 0), capt & ", " & ListBox1.List(i, 0))
48         End If
49     Next i
    
51 iii:


54     For i = 0 To ListBox1.ListCount - 1
55         If ListBox1.Selected(i) = True Then
56             ReDim Preserve tmp_M(0 To UBound(tmp_M) + 1)
57             tmp_M(UBound(tmp_M)) = i
58         End If
59     Next
    
61     If capt = "" Then
62         MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|!", vbOKOnly, "|fffd||fffd||fffd||fffd||fffd|!!!"
        Exit Sub
64     End If
'    Rep.LabelPer.ControlTipText = capt

67     Me.Hide
    
69     If ThisWorkbook.ActiveSheet.CodeName = "Rep" Then
70         Msel = tmp_M
71         Rep.LabelPer.Caption = capt
72         If InStr(1, capt, ",") = 0 And capt <> CCheckBoxYear.Caption Then
73             Rep.Range("r9").Value = capt
74         Else
75             Rep.Range("r9").Value = ""
76         End If
77         If Not firstacn Then
78             Call Rep.SetRangReport
79             Call Rep.ArrloadCREP
80             Call Rep.SetRangCREP
81         End If
82     Else
83         Msel2 = tmp_M
84         Rank.LabelPer.Caption = capt
85         If divisionsRank.Count > 0 Then
86             Call Rank.FormDyspIndexes
87             Call Rank.sortDysp
88         End If
89     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub CheckBox1_Change()
95     If Not changePer Then
96         changePer = True
97         ListBox1.Selected(0) = CheckBox1.Value
98         ListBox1.Selected(1) = CheckBox1.Value
99         ListBox1.Selected(2) = CheckBox1.Value
100         CCheckBoxYear.Value = CheckBox1.Value And CheckBox2.Value And CheckBox3.Value And CheckBox4.Value
101         changePer = False
102     End If
End Sub
Private Sub CheckBox2_Change()
105     If Not changePer Then
106         changePer = True
107         ListBox1.Selected(3) = CheckBox2.Value
108         ListBox1.Selected(4) = CheckBox2.Value
109         ListBox1.Selected(5) = CheckBox2.Value
110         CCheckBoxYear.Value = CheckBox1.Value And CheckBox2.Value And CheckBox3.Value And CheckBox4.Value
111         changePer = False
112     End If
End Sub
Private Sub CheckBox3_Change()
115     If Not changePer Then
116         changePer = True
117         ListBox1.Selected(6) = CheckBox3.Value
118         ListBox1.Selected(7) = CheckBox3.Value
119         ListBox1.Selected(8) = CheckBox3.Value
120         CCheckBoxYear.Value = CheckBox1.Value And CheckBox2.Value And CheckBox3.Value And CheckBox4.Value
121         changePer = False
122     End If
End Sub
Private Sub CheckBox4_Change()
125     If Not changePer Then
126         changePer = True
127         ListBox1.Selected(9) = CheckBox4.Value
128         ListBox1.Selected(10) = CheckBox4.Value
129         ListBox1.Selected(11) = CheckBox4.Value
130         CCheckBoxYear.Value = CheckBox1.Value And CheckBox2.Value And CheckBox3.Value And CheckBox4.Value
131         changePer = False
132     End If
End Sub
Private Sub CCheckBoxYear_Change()
135     If Not changePer Then
136         CheckBox1.Value = CCheckBoxYear.Value
137         CheckBox2.Value = CheckBox1.Value
138         CheckBox3.Value = CheckBox1.Value
139         CheckBox4.Value = CheckBox1.Value
140     End If
End Sub



Private Sub ListBox1_Change()
146     If Not changePer Then
147         changePer = True
148         CheckBox1.Value = ListBox1.Selected(0) And ListBox1.Selected(1) And ListBox1.Selected(2)
149         CheckBox2.Value = ListBox1.Selected(3) And ListBox1.Selected(4) And ListBox1.Selected(5)
150         CheckBox3.Value = ListBox1.Selected(6) And ListBox1.Selected(7) And ListBox1.Selected(8)
151         CheckBox4.Value = ListBox1.Selected(9) And ListBox1.Selected(10) And ListBox1.Selected(11)
152         CCheckBoxYear.Value = CheckBox1.Value And CheckBox2.Value And CheckBox3.Value And CheckBox4.Value
153         changePer = False
154     End If


End Sub




Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
163     Cancel = 1
164     Call ButtonOk_Click
'    FormPeriod.Hide
End Sub
Attribute VB_Name = "FormUKls"
Attribute VB_Base = "0{24A40D59-276C-4DBC-8134-420548340335}{613A8A0F-7F7C-45A9-AAF6-C09423AA20D6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Public Sub CommandOk_Click()
    On Error GoTo Errors
6     ReDim tmp_indU(0 To 0)
7     ReDim tmp_indKls(0 To 0)
8     If ListBox1.Selected(0) Then ReDim Preserve tmp_indU(0 To 1): tmp_indU(1) = 9: capt1 = ListBox1.List(0): GoTo iii
9     For i = 3 To ListBox1.ListCount - 1
10         If ListBox1.Selected(i) Then
11             If i = 10 Then m = -1 Else m = i
12             If ((i = 6 Or i = 9) And ListBox1.Selected(m + 1)) Then
13             ElseIf ((i = 7 Or i = 10) And ListBox1.Selected(i - 1)) Then
14             Else
15                 ReDim Preserve tmp_indU(0 To UBound(tmp_indU) + 1)
16                 tmp_indU(UBound(tmp_indU)) = i - 2
17                 capt1 = IIf(capt1 = "", ListBox1.List(i), capt1 & "; " & ListBox1.List(i))
18             End If
19         End If
20     Next i
21 iii:
22     If (ListBox1.Selected(7) And Not ListBox1.Selected(6)) Or (ListBox1.Selected(10) And Not ListBox1.Selected(9)) Then
23         tmp_indU(0) = "c"
24     ElseIf (ListBox1.Selected(6) And Not ListBox1.Selected(7)) Or (ListBox1.Selected(9) And Not ListBox1.Selected(10)) Then
25         tmp_indU(0) = "m"
26     Else
27         tmp_indU(0) = "z"
28     End If
    
30     If ListBox2.Selected(0) Then ReDim Preserve tmp_indKls(0 To 1): tmp_indKls(1) = 7: capt2 = ListBox2.List(0): GoTo jjj
31     For i = 1 To ListBox2.ListCount - 1
32         If ListBox2.Selected(i) Then
33             ReDim Preserve tmp_indKls(0 To UBound(tmp_indKls) + 1)
34             tmp_indKls(UBound(tmp_indKls)) = i
35             capt2 = IIf(capt2 = "", ListBox2.List(i), capt2 & "; " & ListBox2.List(i))
36         End If
37     Next i
38 jjj:
39     If IsEmpty(capt1) Then
40         MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbOKOnly, "|fffd||fffd||fffd||fffd||fffd|!!!"
        Exit Sub
42     End If
43     If IsEmpty(capt2) Then
44         MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", vbOKOnly, "|fffd||fffd||fffd||fffd||fffd|!!!"
        Exit Sub
46     End If
    
48     FormUKls.Hide
    
50     If ThisWorkbook.ActiveSheet.CodeName = "Ind" Then
51         indexesU = tmp_indU
52         indexesKls = tmp_indKls
53         Ind.LabelU.Caption = capt1
54         Ind.LabelKls.Caption = capt2
55         Call Ind.formNames
56         Call Ind.setIndex
57     Else
58         indexesU2 = tmp_indU
59         indexesKls2 = tmp_indKls
60         Rank.LabelU.Caption = capt1
61         Rank.LabelKls.Caption = capt2
62         If divisionsRank.Count > 0 Then
63             Call Rank.FormDyspIndexes
64             Call Rank.sortDysp
65         End If
66     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub ListBox1_Change()
    On Error GoTo Errors
73     If changeUK = False Then
74         inde = ListBox1.ListIndex
75         Select Case inde
            Case 0
77                 changeUK = True
78                 For i = 1 To ListBox1.ListCount - 1
79                     ListBox1.Selected(i) = ListBox1.Selected(inde)
80                 Next i
81                 changeUK = False
            Case 1
83                 changeUK = True
84                 ListBox1.Selected(3) = ListBox1.Selected(inde)
85                 ListBox1.Selected(4) = ListBox1.Selected(inde)
86                 ListBox1.Selected(6) = ListBox1.Selected(inde)
87                 ListBox1.Selected(9) = ListBox1.Selected(inde)
88                 ListBox1.Selected(5) = ListBox1.Selected(inde) And ListBox1.Selected(7)
89                 ListBox1.Selected(8) = ListBox1.Selected(inde) And ListBox1.Selected(10)
                
91                 ListBox1.Selected(7) = (ListBox1.Selected(7) Or ListBox1.Selected(10)) And (ListBox1.Selected(inde) Or ListBox1.Selected(7))
92                 ListBox1.Selected(5) = ListBox1.Selected(inde) And ListBox1.Selected(7)
93                 ListBox1.Selected(10) = (ListBox1.Selected(7) Or ListBox1.Selected(10)) And (ListBox1.Selected(inde) Or ListBox1.Selected(10))
94                 ListBox1.Selected(8) = ListBox1.Selected(inde) And ListBox1.Selected(10)
95                 changeUK = False
            Case 2
97                 changeUK = True
98                 ListBox1.Selected(7) = ListBox1.Selected(inde)
99                 ListBox1.Selected(10) = ListBox1.Selected(inde)
                
101                 ListBox1.Selected(6) = (ListBox1.Selected(3) Or ListBox1.Selected(4) Or ListBox1.Selected(6) Or ListBox1.Selected(9)) And (ListBox1.Selected(inde) Or ListBox1.Selected(6))
102                 ListBox1.Selected(5) = ListBox1.Selected(inde) And ListBox1.Selected(6)
103                 ListBox1.Selected(9) = (ListBox1.Selected(3) Or ListBox1.Selected(4) Or ListBox1.Selected(6) Or ListBox1.Selected(9)) And (ListBox1.Selected(inde) Or ListBox1.Selected(9))
104                 ListBox1.Selected(8) = ListBox1.Selected(inde) And ListBox1.Selected(9)
105                 changeUK = False
            Case 3
107                 changeUK = True
108                 ListBox1.Selected(6) = ListBox1.Selected(6) Or (ListBox1.Selected(inde) And ListBox1.Selected(7))
109                 ListBox1.Selected(5) = ListBox1.Selected(6) And ListBox1.Selected(7)
110                 ListBox1.Selected(9) = ListBox1.Selected(9) Or (ListBox1.Selected(inde) And ListBox1.Selected(10))
111                 ListBox1.Selected(8) = ListBox1.Selected(9) And ListBox1.Selected(10)
                
113                 changeUK = False
            Case 4
115                 changeUK = True
116                 ListBox1.Selected(6) = ListBox1.Selected(6) Or (ListBox1.Selected(inde) And ListBox1.Selected(7))
117                 ListBox1.Selected(5) = ListBox1.Selected(6) And ListBox1.Selected(7)
118                 ListBox1.Selected(9) = ListBox1.Selected(9) Or (ListBox1.Selected(inde) And ListBox1.Selected(10))
119                 ListBox1.Selected(8) = ListBox1.Selected(9) And ListBox1.Selected(10)
                
121                 changeUK = False
                
            Case 5
124                 changeUK = True
125                 ListBox1.Selected(6) = ListBox1.Selected(inde)
126                 ListBox1.Selected(7) = ListBox1.Selected(inde)
                
128                 ListBox1.Selected(10) = ListBox1.Selected(9) Or (ListBox1.Selected(inde) And ListBox1.Selected(10))
129                 ListBox1.Selected(9) = ListBox1.Selected(10) Or (ListBox1.Selected(inde) And ListBox1.Selected(9))
130                 ListBox1.Selected(8) = ListBox1.Selected(9) And ListBox1.Selected(10)
                
132                 changeUK = False
            Case 6
134                 changeUK = True
135                 ListBox1.Selected(7) = (ListBox1.Selected(7) Or ListBox1.Selected(10)) And ListBox1.Selected(inde)
136                 ListBox1.Selected(5) = ListBox1.Selected(inde) And ListBox1.Selected(7)
137                 ListBox1.Selected(10) = ListBox1.Selected(10) Or (ListBox1.Selected(inde) And ListBox1.Selected(7))
138                 ListBox1.Selected(9) = ListBox1.Selected(9) Or (ListBox1.Selected(inde) And ListBox1.Selected(10))
139                 ListBox1.Selected(8) = ListBox1.Selected(9) And ListBox1.Selected(10)
140                 changeUK = False
            Case 7
142                 changeUK = True
143                 ListBox1.Selected(6) = (ListBox1.Selected(3) Or ListBox1.Selected(4) Or ListBox1.Selected(6) Or ListBox1.Selected(9)) And ListBox1.Selected(inde)
144                 ListBox1.Selected(5) = ListBox1.Selected(6) And ListBox1.Selected(inde)
145                 ListBox1.Selected(10) = ListBox1.Selected(10) Or (ListBox1.Selected(inde) And ListBox1.Selected(9))
146                 ListBox1.Selected(8) = ListBox1.Selected(9) And ListBox1.Selected(10)
147                 changeUK = False
                
            Case 8
150                 changeUK = True
151                 ListBox1.Selected(9) = ListBox1.Selected(inde)
152                 ListBox1.Selected(10) = ListBox1.Selected(inde)
                
154                 ListBox1.Selected(7) = ListBox1.Selected(6) Or (ListBox1.Selected(inde) And ListBox1.Selected(7))
155                 ListBox1.Selected(6) = ListBox1.Selected(7) Or (ListBox1.Selected(inde) And ListBox1.Selected(6))
156                 ListBox1.Selected(5) = ListBox1.Selected(6) And ListBox1.Selected(7)
                
158                 changeUK = False
            Case 9
160                 changeUK = True
161                 ListBox1.Selected(10) = (ListBox1.Selected(7) Or ListBox1.Selected(10)) And ListBox1.Selected(inde)
162                 ListBox1.Selected(8) = ListBox1.Selected(inde) And ListBox1.Selected(7)
163                 ListBox1.Selected(7) = ListBox1.Selected(7) Or (ListBox1.Selected(inde) And ListBox1.Selected(10))
164                 ListBox1.Selected(6) = ListBox1.Selected(6) Or (ListBox1.Selected(inde) And ListBox1.Selected(7))
165                 ListBox1.Selected(5) = ListBox1.Selected(6) And ListBox1.Selected(7)
166                 changeUK = False
            Case 10
168                 changeUK = True
169                 ListBox1.Selected(9) = (ListBox1.Selected(3) Or ListBox1.Selected(4) Or ListBox1.Selected(6) Or ListBox1.Selected(9)) And ListBox1.Selected(inde)
170                 ListBox1.Selected(8) = ListBox1.Selected(9) And ListBox1.Selected(inde)
171                 ListBox1.Selected(7) = ListBox1.Selected(7) Or (ListBox1.Selected(inde) And ListBox1.Selected(6))
172                 ListBox1.Selected(5) = ListBox1.Selected(6) And ListBox1.Selected(7)
173                 changeUK = False
                

176         End Select
        
178         If inde > 0 Then
179             changeUK = True
180             ListBox1.Selected(1) = ListBox1.Selected(3) And ListBox1.Selected(4) And ListBox1.Selected(6) And ListBox1.Selected(9)
181             ListBox1.Selected(2) = ListBox1.Selected(7) And ListBox1.Selected(10) ' And ((Not ListBox1.Selected(3) And Not ListBox1.Selected(4) And Not ListBox1.Selected(5) And Not ListBox1.Selected(8)) Or ListBox1.Selected(1))
182             tt = ListBox1.Selected(1)
183             For i = 2 To ListBox1.ListCount - 1
184                 tt = tt And ListBox1.Selected(i)
185             Next i
186             ListBox1.Selected(0) = tt
187             changeUK = False
188         End If
189     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub ListBox2_Change()
195     If Not changeUK Then
196         If ListBox2.ListIndex = 0 Then
197             changeUK = True
198             For i = 1 To ListBox2.ListCount - 1
199                 ListBox2.Selected(i) = ListBox2.Selected(0)
200             Next i
201             changeUK = False
202         End If
203         tt = ListBox2.Selected(1)
204         If ListBox2.ListIndex > 0 Then
205             For i = 2 To ListBox2.ListCount - 1
206                 tt = tt And ListBox2.Selected(i)
207             Next i
208             changeUK = True
209             ListBox2.Selected(0) = tt
210             changeUK = False
211         End If
212     End If
End Sub



Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
218     Call CommandOk_Click
219     Cancel = 1
'    FormUKls.Hide
End Sub
Attribute VB_Name = "Form_SelectDate"
Attribute VB_Base = "0{12D5EEAA-5CB3-481A-8403-8956A03DED1F}{E35A239B-1121-4FF9-83BE-A0B9AF08BA45}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim mozno As Boolean

Private Sub chb_Time_Click()
4     Me.Frame_time.Visible = Me.chb_Time.Value
End Sub

Private Sub UserForm_Initialize()
    On Error GoTo Errors
                                                        addlog "START Form_SelectDate Show"
10     Form_DateTime_Showed = True
11     Me.chb_Time.Value = True    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
12     Me.Frame_time.Visible = True
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Month
15     ComboBox_Month.AddItem "|473||fffd||fffd||fffd||fffd|"
16     ComboBox_Month.AddItem "|fffd||fffd||fffd||fffd||fffd|"
17     ComboBox_Month.AddItem "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
18     ComboBox_Month.AddItem "|fffd||fffd||fffd||fffd||fffd||fffd|"
19     ComboBox_Month.AddItem "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
20     ComboBox_Month.AddItem "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
21     ComboBox_Month.AddItem "|fffd||fffd||fffd||fffd||fffd||fffd|"
22     ComboBox_Month.AddItem "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
23     ComboBox_Month.AddItem "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
24     ComboBox_Month.AddItem "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
25     ComboBox_Month.AddItem "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
26     ComboBox_Month.AddItem "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"


    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TextBox_|fffd||fffd||fffd||fffd|
30     Set_TextBox_|fffd||fffd||fffd||fffd| (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TextBox_Year
32     Set_TextBox_Year (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Month |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
34     mozno = True
35     Set_M|fffd|nth (dt_1)
36     mozno = False



    Dim TimeNow_i As String
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Hour
42     For i = 0 To 23
43         If Len(Str(i)) = 2 Then TimeNow_i = "0" + Right(Str(i), 1) Else TimeNow_i = Right(Str(i), 2)
44         ComboBox_Hour.AddItem TimeNow_i
45     Next i
46     ComboBox_Hour.AddItem "00"

    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Minute |fffd| ComboBox_Second
49     For i = 0 To 59
50         If Len(Str(i)) = 2 Then TimeNow_i = "0" + Right(Str(i), 1) Else TimeNow_i = Right(Str(i), 2)
51         ComboBox_Minute.AddItem TimeNow_i
52         ComboBox_Second.AddItem TimeNow_i
53     Next i
54     ComboBox_Minute.AddItem "00"
55     ComboBox_Second.AddItem "00"


    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Label_Hour_Minute_Second
59     Set_Label_Hour_Minute_Second (dt_1)
60     mozno = True
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Hour
62     Set_ComboBox_Hour (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ScrollBar_Hour
64     Set_ScrollBar_Hour (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Minute
66     Set_ComboBox_Minute (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ScrollBar_Minute
68     Set_ScrollBar_Minute (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Second
70     Set_ComboBox_Second (dt_1)
71     mozno = False
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'    If CloseMode = 0 Then Cancel = 1
79     Form_DateTime_Showed = False
                                                        addlog "END Form_SelectDate Show(QueryClose)"
End Sub

Private Sub Cmd_Cancel_Click()
    On Error GoTo Errors
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
'    If IsDate(SelectedDate) Then SelectedDate = CStr(DateValue(dt_2))
'    dt_1 = ""
                                                        addlog "Form_SelectDate Show(Cmd_Cancel_Click)"
89     Unload Me
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub
Private Sub Cmd_Select_Click()
    On Error GoTo Errors
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
96     SelectedDate = CStr(DateValue(dt_1))
97     If Me.chb_Time.Value = False Then dt_1 = Format(dt_1, "dd.mm.yyyy")
98     dt_0 = CStr(dt_1)
                                                        addlog "Form_SelectDate Show(Cmd_Select_Click)"
100     Unload Me
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub


Private Sub Set_TextBox_|fffd||fffd||fffd||fffd|(MyDate As Date)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TextBox_|fffd||fffd||fffd||fffd|
108     TextBox_|fffd||fffd||fffd||fffd|.Value = Format(MyDate, "dd.mm.yyyy")
End Sub

Private Sub Set_TextBox_Year(MyDate As Date)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TextBox_Year
113     TextBox_Year.Value = Format(MyDate, "yyyy")
End Sub

Private Sub Set_M|fffd|nth(MyDate As Date)
    On Error GoTo Errors
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Month |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
119     MyYear = Year(MyDate)
120     MyMonth = Month(MyDate)
121     MyDay = Day(MyDate)

123     Label_Day.Caption = MyDay
124     Label_Month.Caption = MyMonth
125     Label_Year.Caption = MyYear

127     ComboBox_Month.ListIndex = MyMonth - 1

129     MyWeekDay = Weekday(DateSerial(MyYear, MyMonth, 1), vbMonday)
130     MyCountDay = Day(DateSerial(MyYear, MyMonth + 1, 1) - 1)

132     l_start = 2 - MyWeekDay
133     For i = 1 To 6
134         For j = 1 To 7

136             If l_start >= 1 And l_start <= MyCountDay Then
137                 Me.Controls("Cell_" & i & "_" & j).Caption = l_start
138             Else
139                 Me.Controls("Cell_" & i & "_" & j).Caption = ""
140             End If

142             If l_start = MyDay Then
143                 Set_On_Off CInt(i), CInt(j)
144             End If

146             l_start = l_start + 1

148         Next j, i

150         Cmd_Select.SetFocus
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub


Private Sub Set_Label_Hour_Minute_Second(MyDate As Date)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| Label_Hour_Minute_Second
158     Label_Hour.Caption = Format(MyDate, "hh")
159     Label_Minute.Caption = Format(MyDate, "nn")
160     Label_Second.Caption = Format(MyDate, "ss")
End Sub

Private Sub Set_ComboBox_Hour(MyDate As Date)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Hour
165     MyHour = Hour(MyDate)
166     ComboBox_Hour.ListIndex = MyHour
End Sub

Private Sub Set_ScrollBar_Hour(MyDate As Date)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ScrollBar_Hour
171     MyHour = Hour(MyDate)
172     ScrollBar_Hour.Value = MyHour
End Sub

Private Sub Set_ComboBox_Minute(MyDate As Date)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Minute
177     MyMinute = Minute(MyDate)
178     ComboBox_Minute.ListIndex = MyMinute
End Sub

Private Sub Set_ScrollBar_Minute(MyDate As Date)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ScrollBar_Minute
183     MyMinute = Minute(MyDate)
184     ScrollBar_Minute.Value = MyMinute
End Sub

Private Sub Set_ComboBox_Second(MyDate As Date)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Second
189     MySecond = Second(MyDate)
190     ComboBox_Second.ListIndex = MySecond
End Sub

Private Sub Cmd_|fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|_Click()
    On Error GoTo Errors
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
    'MyYear = Year(dt_1)
    'MyMonth = Month(dt_1)
    'MyDay = Day(dt_1)
199     MyHour = Hour(dt_1)
200     MyMinute = Minute(dt_1)
201     MySecond = Second(dt_1)

203     dt_1 = Date + TimeSerial(MyHour, MyMinute, MySecond)

    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TextBox_|fffd||fffd||fffd||fffd|
206     Set_TextBox_|fffd||fffd||fffd||fffd| (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TextBox_Year
208     Set_TextBox_Year (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Month |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
210     mozno = True
211     Set_M|fffd|nth (dt_1)
212     mozno = False
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub Cmd_|fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|_Click()
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
219     dt_1 = dt_1 - 1

    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TextBox_|fffd||fffd||fffd||fffd|
222     Set_TextBox_|fffd||fffd||fffd||fffd| (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TextBox_Year
224     Set_TextBox_Year (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Month |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
226     mozno = True
227     Set_M|fffd|nth (dt_1)
228     mozno = False
End Sub

Private Sub Cmd_|fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd|_Click()
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
233     dt_1 = dt_1 + 1

    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TextBox_|fffd||fffd||fffd||fffd|
236     Set_TextBox_|fffd||fffd||fffd||fffd| (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TextBox_Year
238     Set_TextBox_Year (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Month |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
240     mozno = True
241     Set_M|fffd|nth (dt_1)
242     mozno = False
End Sub


Private Sub Set_|fffd||fffd||fffd||fffd|(iRow As Integer, jCol As Integer)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

249     If Me.Controls("Cell_" & iRow & "_" & jCol).Caption = "" Then Exit Sub

251     MyYear = Year(dt_1)
252     MyMonth = Month(dt_1)
253     MyDay = CInt(Me.Controls("Cell_" & iRow & "_" & jCol).Caption)
254     MyHour = Hour(dt_1)
255     MyMinute = Minute(dt_1)
256     MySecond = Second(dt_1)

258     dt_1 = DateSerial(MyYear, MyMonth, MyDay) + TimeSerial(MyHour, MyMinute, MySecond)

    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TextBox_|fffd||fffd||fffd||fffd|
261     Set_TextBox_|fffd||fffd||fffd||fffd| (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TextBox_Year
263     Set_TextBox_Year (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Month |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
265     mozno = True
266     Set_M|fffd|nth (dt_1)
267     mozno = False
End Sub


Private Sub ComboBox_Month_Change()
272     If mozno Then Exit Sub

    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)

276     MyYear = Year(dt_1)
277     MyMonth = CInt(ComboBox_Month.ListIndex + 1)
278     MyDay = Day(dt_1)
279     MyCountDay = Day(DateSerial(MyYear, MyMonth + 1, 1) - 1)
280     If MyDay > MyCountDay Then MyDay = MyCountDay

282     MyHour = Hour(dt_1)
283     MyMinute = Minute(dt_1)
284     MySecond = Second(dt_1)

286     dt_1 = DateSerial(MyYear, MyMonth, MyDay) + TimeSerial(MyHour, MyMinute, MySecond)

    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TextBox_|fffd||fffd||fffd||fffd|
289     Set_TextBox_|fffd||fffd||fffd||fffd| (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TextBox_Year
291     Set_TextBox_Year (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Month |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
293     mozno = True
294     Set_M|fffd|nth (dt_1)
295     mozno = False
End Sub



Private Sub SpinButton_Year_SpinDown()
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| -1)

303     MyYear = Year(dt_1) - 1
304     MyMonth = Month(dt_1)
305     MyDay = Day(dt_1)
306     MyCountDay = Day(DateSerial(MyYear, MyMonth + 1, 1) - 1)
307     If MyDay > MyCountDay Then MyDay = MyCountDay

309     MyHour = Hour(dt_1)
310     MyMinute = Minute(dt_1)
311     MySecond = Second(dt_1)

313     dt_1 = DateSerial(MyYear, MyMonth, MyDay) + TimeSerial(MyHour, MyMinute, MySecond)

    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TextBox_|fffd||fffd||fffd||fffd|
316     Set_TextBox_|fffd||fffd||fffd||fffd| (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TextBox_Year
318     Set_TextBox_Year (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Month |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
320     mozno = True
321     Set_M|fffd|nth (dt_1)
322     mozno = False
End Sub

Private Sub SpinButton_Year_SpinUp()
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| +1)

328     MyYear = Year(dt_1) + 1
329     MyMonth = Month(dt_1)
330     MyDay = Day(dt_1)
331     MyCountDay = Day(DateSerial(MyYear, MyMonth + 1, 1) - 1)
332     If MyDay > MyCountDay Then MyDay = MyCountDay

334     MyHour = Hour(dt_1)
335     MyMinute = Minute(dt_1)
336     MySecond = Second(dt_1)

338     dt_1 = DateSerial(MyYear, MyMonth, MyDay) + TimeSerial(MyHour, MyMinute, MySecond)

    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TextBox_|fffd||fffd||fffd||fffd|
341     Set_TextBox_|fffd||fffd||fffd||fffd| (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| TextBox_Year
343     Set_TextBox_Year (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Month |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
345     mozno = True
346     Set_M|fffd|nth (dt_1)
347     mozno = False
End Sub

Private Sub Label_Hour_Click()
351     ComboBox_Hour.DropDown
352     ComboBox_Hour.SetFocus
End Sub

Private Sub Label_Minute_Click()
356     ComboBox_Minute.DropDown
357     ComboBox_Minute.SetFocus
End Sub

Private Sub Label_Second_Click()
361     ComboBox_Second.DropDown
362     ComboBox_Second.SetFocus
End Sub

Private Sub ComboBox_Hour_Change()
366     If mozno Then Exit Sub
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
368     MyYear = Year(dt_1)
369     MyMonth = Month(dt_1)
370     MyDay = Day(dt_1)
    'MyHour = Hour(dt_1)
372     MyMinute = Minute(dt_1)
373     MySecond = Second(dt_1)

375     dt_1 = DateSerial(MyYear, MyMonth, MyDay) + TimeSerial(ComboBox_Hour.Value, MyMinute, MySecond)

377     mozno = True
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Label_Hour_Minute_Second
379     Set_Label_Hour_Minute_Second (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Hour
381     Set_ComboBox_Hour (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ScrollBar_Hour
383     Set_ScrollBar_Hour (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Minute
385     Set_ComboBox_Minute (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ScrollBar_Minute
387     Set_ScrollBar_Minute (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Second
389     Set_ComboBox_Second (dt_1)
390     mozno = False
End Sub

Private Sub ComboBox_Minute_Change()
394     If mozno Then Exit Sub
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
396     MyYear = Year(dt_1)
397     MyMonth = Month(dt_1)
398     MyDay = Day(dt_1)
399     MyHour = Hour(dt_1)
    'MyMinute = Minute(dt_1)
401     MySecond = Second(dt_1)

403     dt_1 = DateSerial(MyYear, MyMonth, MyDay) + TimeSerial(MyHour, ComboBox_Minute.Value, MySecond)

405     mozno = True
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Label_Hour_Minute_Second
407     Set_Label_Hour_Minute_Second (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Hour
409     Set_ComboBox_Hour (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ScrollBar_Hour
411     Set_ScrollBar_Hour (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Minute
413     Set_ComboBox_Minute (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ScrollBar_Minute
415     Set_ScrollBar_Minute (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Second
417     Set_ComboBox_Second (dt_1)
418     mozno = False
End Sub

Private Sub ComboBox_Second_Change()
422     If mozno Then Exit Sub
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
424     MyYear = Year(dt_1)
425     MyMonth = Month(dt_1)
426     MyDay = Day(dt_1)
427     MyHour = Hour(dt_1)
428     MyMinute = Minute(dt_1)
    'MySecond = Second(dt_1)

431     dt_1 = DateSerial(MyYear, MyMonth, MyDay) + TimeSerial(MyHour, MyMinute, ComboBox_Second.Value)

433     mozno = True
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Label_Hour_Minute_Second
435     Set_Label_Hour_Minute_Second (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Hour
437     Set_ComboBox_Hour (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ScrollBar_Hour
439     Set_ScrollBar_Hour (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Minute
441     Set_ComboBox_Minute (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ScrollBar_Minute
443     Set_ScrollBar_Minute (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Second
445     Set_ComboBox_Second (dt_1)
446     mozno = False
End Sub

Private Sub ScrollBar_Hour_Change()
450     If mozno Then Exit Sub
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
452     MyYear = Year(dt_1)
453     MyMonth = Month(dt_1)
454     MyDay = Day(dt_1)
    'MyHour = Hour(dt_1)
456     MyMinute = Minute(dt_1)
457     MySecond = Second(dt_1)

    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
460     If ScrollBar_Hour.Value = 24 Then
461         mozno = True
462         ScrollBar_Hour.Value = 0
463         mozno = False
464     Else
465         If ScrollBar_Hour.Value = -1 Then
466             mozno = True
467             ScrollBar_Hour.Value = 23
468             mozno = False
469         End If
470     End If

472     dt_1 = DateSerial(MyYear, MyMonth, MyDay) + TimeSerial(ScrollBar_Hour.Value, MyMinute, MySecond)

474     mozno = True
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Label_Hour_Minute_Second
476     Set_Label_Hour_Minute_Second (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Hour
478     Set_ComboBox_Hour (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ScrollBar_Hour
480     Set_ScrollBar_Hour (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Minute
482     Set_ComboBox_Minute (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ScrollBar_Minute
484     Set_ScrollBar_Minute (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Second
486     Set_ComboBox_Second (dt_1)
487     mozno = False
End Sub

Private Sub ScrollBar_Minute_Change()
491     If mozno Then Exit Sub
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
493     MyYear = Year(dt_1)
494     MyMonth = Month(dt_1)
495     MyDay = Day(dt_1)
496     MyHour = Hour(dt_1)
    'MyMinute = Minute(dt_1)
498     MySecond = Second(dt_1)

    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
501     If ScrollBar_Minute.Value = 60 Then
502         mozno = True
503         ScrollBar_Minute.Value = 0
504         mozno = False
505     Else
506         If ScrollBar_Minute.Value = -1 Then
507             mozno = True
508             ScrollBar_Minute.Value = 59
509             mozno = False
510         End If
511     End If

513     dt_1 = DateSerial(MyYear, MyMonth, MyDay) + TimeSerial(MyHour, ScrollBar_Minute.Value, MySecond)

515     mozno = True
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Label_Hour_Minute_Second
517     Set_Label_Hour_Minute_Second (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Hour
519     Set_ComboBox_Hour (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ScrollBar_Hour
521     Set_ScrollBar_Hour (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Minute
523     Set_ComboBox_Minute (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ScrollBar_Minute
525     Set_ScrollBar_Minute (dt_1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ComboBox_Second
527     Set_ComboBox_Second (dt_1)
528     mozno = False
End Sub

Private Sub Cell_1_1_Click()
532     Set_|fffd||fffd||fffd||fffd| 1, 1
End Sub
Private Sub Cell_1_2_Click()
535     Set_|fffd||fffd||fffd||fffd| 1, 2
End Sub
Private Sub Cell_1_3_Click()
538     Set_|fffd||fffd||fffd||fffd| 1, 3
End Sub
Private Sub Cell_1_4_Click()
541     Set_|fffd||fffd||fffd||fffd| 1, 4
End Sub
Private Sub Cell_1_5_Click()
544     Set_|fffd||fffd||fffd||fffd| 1, 5
End Sub
Private Sub Cell_1_6_Click()
547     Set_|fffd||fffd||fffd||fffd| 1, 6
End Sub
Private Sub Cell_1_7_Click()
550     Set_|fffd||fffd||fffd||fffd| 1, 7
End Sub
Private Sub Cell_2_1_Click()
553     Set_|fffd||fffd||fffd||fffd| 2, 1
End Sub
Private Sub Cell_2_2_Click()
556     Set_|fffd||fffd||fffd||fffd| 2, 2
End Sub
Private Sub Cell_2_3_Click()
559     Set_|fffd||fffd||fffd||fffd| 2, 3
End Sub
Private Sub Cell_2_4_Click()
562     Set_|fffd||fffd||fffd||fffd| 2, 4
End Sub
Private Sub Cell_2_5_Click()
565     Set_|fffd||fffd||fffd||fffd| 2, 5
End Sub
Private Sub Cell_2_6_Click()
568     Set_|fffd||fffd||fffd||fffd| 2, 6
End Sub
Private Sub Cell_2_7_Click()
571     Set_|fffd||fffd||fffd||fffd| 2, 7
End Sub
Private Sub Cell_3_1_Click()
574     Set_|fffd||fffd||fffd||fffd| 3, 1
End Sub
Private Sub Cell_3_2_Click()
577     Set_|fffd||fffd||fffd||fffd| 3, 2
End Sub
Private Sub Cell_3_3_Click()
580     Set_|fffd||fffd||fffd||fffd| 3, 3
End Sub
Private Sub Cell_3_4_Click()
583     Set_|fffd||fffd||fffd||fffd| 3, 4
End Sub
Private Sub Cell_3_5_Click()
586     Set_|fffd||fffd||fffd||fffd| 3, 5
End Sub
Private Sub Cell_3_6_Click()
589     Set_|fffd||fffd||fffd||fffd| 3, 6
End Sub
Private Sub Cell_3_7_Click()
592     Set_|fffd||fffd||fffd||fffd| 3, 7
End Sub
Private Sub Cell_4_1_Click()
595     Set_|fffd||fffd||fffd||fffd| 4, 1
End Sub
Private Sub Cell_4_2_Click()
598     Set_|fffd||fffd||fffd||fffd| 4, 2
End Sub
Private Sub Cell_4_3_Click()
601     Set_|fffd||fffd||fffd||fffd| 4, 3
End Sub
Private Sub Cell_4_4_Click()
604     Set_|fffd||fffd||fffd||fffd| 4, 4
End Sub
Private Sub Cell_4_5_Click()
607     Set_|fffd||fffd||fffd||fffd| 4, 5
End Sub
Private Sub Cell_4_6_Click()
610     Set_|fffd||fffd||fffd||fffd| 4, 6
End Sub
Private Sub Cell_4_7_Click()
613     Set_|fffd||fffd||fffd||fffd| 4, 7
End Sub
Private Sub Cell_5_1_Click()
616     Set_|fffd||fffd||fffd||fffd| 5, 1
End Sub
Private Sub Cell_5_2_Click()
619     Set_|fffd||fffd||fffd||fffd| 5, 2
End Sub
Private Sub Cell_5_3_Click()
622     Set_|fffd||fffd||fffd||fffd| 5, 3
End Sub
Private Sub Cell_5_4_Click()
625     Set_|fffd||fffd||fffd||fffd| 5, 4
End Sub
Private Sub Cell_5_5_Click()
628     Set_|fffd||fffd||fffd||fffd| 5, 5
End Sub
Private Sub Cell_5_6_Click()
631     Set_|fffd||fffd||fffd||fffd| 5, 6
End Sub
Private Sub Cell_5_7_Click()
634     Set_|fffd||fffd||fffd||fffd| 5, 7
End Sub
Private Sub Cell_6_1_Click()
637     Set_|fffd||fffd||fffd||fffd| 6, 1
End Sub
Private Sub Cell_6_2_Click()
640     Set_|fffd||fffd||fffd||fffd| 6, 2
End Sub
Private Sub Cell_6_3_Click()
643     Set_|fffd||fffd||fffd||fffd| 6, 3
End Sub
Private Sub Cell_6_4_Click()
646     Set_|fffd||fffd||fffd||fffd| 6, 4
End Sub
Private Sub Cell_6_5_Click()
649     Set_|fffd||fffd||fffd||fffd| 6, 5
End Sub
Private Sub Cell_6_6_Click()
652     Set_|fffd||fffd||fffd||fffd| 6, 6
End Sub
Private Sub Cell_6_7_Click()
655     Set_|fffd||fffd||fffd||fffd| 6, 7
End Sub

Private Sub Set_On_Off(iRow As Integer, jCol As Integer)
    On Error GoTo Errors
660     If Me.Controls("Cell_" & iRow & "_" & jCol).Caption = "" Then Exit Sub

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
663     For i = 1 To 6
664         For j = 1 To 7
665             Me.Controls("Cell_" & i & "_" & j).BackColor = RGB(255, 255, 255)
666             Me.Controls("Cell_" & i & "_" & j).BorderColor = RGB(255, 255, 255)
667         Next j
668     Next i

    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
671     Me.Controls("Cell_" & iRow & "_" & jCol).BackColor = RGB(204, 255, 204)
672     Me.Controls("Cell_" & iRow & "_" & jCol).BorderColor = RGB(150, 150, 150)
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub
Attribute VB_Name = "Ind"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "ComboKind, 25, 0, MSForms, ComboBox"
Attribute VB_Control = "Label6, 24, 1, MSForms, Label"
Attribute VB_Control = "Label7, 34, 2, MSForms, Label"
Attribute VB_Control = "Label5, 20, 3, MSForms, Label"
Attribute VB_Control = "Label3, 7, 4, MSForms, Label"
Attribute VB_Control = "ComboCompany, 8, 5, MSForms, ComboBox"
Attribute VB_Control = "Label4, 9, 6, MSForms, Label"
Attribute VB_Control = "ComboCode, 10, 7, MSForms, ComboBox"
Attribute VB_Control = "Refresh, 33, 8, MSForms, CommandButton"
Attribute VB_Control = "Label1, 18, 9, MSForms, Label"
Attribute VB_Control = "Label2, 14, 10, MSForms, Label"
Attribute VB_Control = "ComboYear, 15, 11, MSForms, ComboBox"
Attribute VB_Control = "LabelU, 27, 12, MSForms, Label"
Attribute VB_Control = "LabelKls, 28, 13, MSForms, Label"
Attribute VB_Control = "Label8, 42, 20, MSForms, Label"
Attribute VB_Control = "OptionLong, 43, 21, MSForms, OptionButton"
Attribute VB_Control = "OptionShort, 47, 24, MSForms, OptionButton"
Attribute VB_Control = "OptionAll, 48, 25, MSForms, OptionButton"
Dim indexs()
Dim IndexNames()
Dim divisionsIND
Dim namef As String
Dim formind As Boolean
Dim FoldY1 As String
Dim tmpC() As String


Private Sub Refresh_Click()
                                            addlog "START Private Sub Ind.Refresh_Click"
    On Error GoTo Errors

                                            
15     Call SetColumnName(arrRep, arr_columnRep)

17     dKeys = divisionsIND.keys
    
19     If FSO.FolderExists(ThisWorkbook.path & "\" & FoldY1 & namef) Then
20         n = 0
21         Set folder1 = FSO.GetFolder(ThisWorkbook.path & "\" & FoldY1 & namef)
22         For Each File In folder1.Files
23             If Left(File.Name, 3) = "ESI" Then
24                 n = n + 1
25             End If
26         Next
27         Call Er.ListErr(dKeys, Ind.ComboCode.Value, Ind.ComboYear.Value, namef, n, divisionsIND)
28         Call Reg.ArrSave(arrRep, ThisWorkbook.path & "\" & FoldY1 & namef, "Report" & Ind.ComboCode.Value & "_" & Ind.ComboYear.text & ".txt")
29         Call Reg.CreateBackup(FoldY1 & namef)
30         For i = 1 To UBound(indexs)
31             For j = 2 To UBound(indexs, 2)
32                 indexs(i, j) = ""
33             Next j
34         Next i
35         Call setIndex
36     Else
                                            addlog ThisWorkbook.path & "\" & FoldY1 & namef & " - Folder Not Exists"
38         MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd|=" & Ind.ComboYear.Value & "; |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|=""" & Ind.ComboCompany.text & """)", , "|fffd||fffd||fffd||fffd||fffd|!"
39     End If
                                            addlog "END Private Sub Ind.Refresh_Click"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)

End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    On Error GoTo Errors
48     If ComboKind.Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|" Then
49         If (Union(Target.Cells, Range("H10:S" & UBound(indexs) + 9)).Address = Range("H10:S" & UBound(indexs) + 9).Address) Then
                                                addlog "START Private Sub Ind.BeforeDoubleClick"
51             Cancel = True
52             kodpemcol = ArrFind(arr_columnC, "KodPEM")
53             blockcol = ArrFind(arr_columnC, "Block")
'            monthcol = ArrFind(arr_columnRep, "Month")
55             setblock = IIf(Target.Cells(1).Value = "--", "1", "")
                                                
57             If (Union(Target.Cells, Range("H" & UBound(indexs) + 9, "S" & UBound(indexs) + 9)).Address = Range("H" & UBound(indexs) + 9, "S" & UBound(indexs) + 9).Address) Then
58                 For i = 1 To UBound(tmpC) Step 12
59                     tmpC(i + Target.column - 8, blockcol) = setblock
60                 Next i
61                 Call Reg.ArrSave(tmpC, ThisWorkbook.path & "\" & FoldY1 & namef, "C" & Ind.ComboYear.text & ".txt")
62                 sheetChanged = True
63                 Call setIndex
64                 If namef = file_name Then
65                     arrC = tmpC
66                     If Val(Reg.ComboMonth.Value) = Target.column - 7 Then
67                         If Not Reg.CheckBlock = 0 - Val(setblock) Then
68                             firstacn = True
69                             Reg.CheckBlock = 0 - Val(setblock)
70                             firstacn = False
71                         End If
72                         Call Reg.LockTarget(Reg.Range("A26:Ad" & Reg.UsedRange.Rows.Count), , Reg.CheckBlock.Value)
73                     End If
74                 End If
75             Else
76                 If Target.Cells(1).Value <> "" Then
77                     For i = 1 To UBound(tmpC) Step 12
78                         If tmpC(i, kodpemcol) = Ind.Range("F" & Target.Row).Value Then
79                             tmpC(i + Target.column - 8, blockcol) = setblock
80                             Call Reg.ArrSave(tmpC, ThisWorkbook.path & "\" & FoldY1 & namef, "C" & Ind.ComboYear.text & ".txt")
81                             sheetChanged = True
82                             Call setIndex
83                             If namef = file_name Then
84                                 arrC = tmpC
85                                 If Val(Reg.ComboMonth.Value) = Target.column - 7 And Reg.ComboCodePEM.Value = Ind.Range("F" & Target.Row).Value Then
86                                     If Not Reg.CheckBlock = 0 - Val(setblock) Then
87                                         firstacn = True
88                                         Reg.CheckBlock = 0 - Val(setblock)
89                                         firstacn = False
90                                     End If
91                                     Call Reg.LockTarget(Reg.Range("A26:Ad" & Reg.UsedRange.Rows.Count), , Reg.CheckBlock.Value)
92                                 End If
93                             End If
                                                addlog "END Private Sub Ind.BeforeDoubleClick"
                            Exit Sub
96                         End If
97                     Next i
98                 End If
99             End If
            
                                                addlog "END Private Sub Ind.BeforeDoubleClick"
102         End If
103     Else
104         If (Union(Target.Cells, Range("H10:S" & UBound(indexs) + 8)).Address = Range("H10:S" & UBound(indexs) + 8).Address) Then
                                                addlog "START Private Sub Ind.BeforeDoubleClick"
106             Cancel = True
107             Reg.Select
            Dim ret As Boolean
109             ret = EnableEvents("Ind.BeforeDoubleClick")
            
            
112             Data.Range("kod").Value = Ind.ComboCode.Value
113             Data.Range("year").Value = Ind.ComboYear.Value
114             Data.Range("month").Value = Ind.Cells(9, Target.column).Value
115             Data.Range("pemkod").Value = Ind.Range("F" & Target.Row).Value
116             file_name = namef
            
118             Inddbl = True
119             If Reg.ComboYear.Value <> Ind.ComboYear.Value Then Reg.ComboYear.Value = Ind.ComboYear.Value
120             If Reg.ComboCode.Value <> Ind.ComboCode.Value Then
121                 Reg.ComboCode.Value = Ind.ComboCode.Value
122                 Reg.ComboCompany.Value = Ind.ComboCompany.Value
123                 Call Reg.ArrLoadPEM(FoldY1 & file_name & "\" & "PEM" & CStr(Data.Range("kod").Value) & ".txt")
124                 Reg.ComboCodePEM.Clear
                                                                        addlog "SetRangPEM(Reg.ComboPEM.Clear)"
126                 Reg.ComboPEM.Clear
127                 divisions.RemoveAll
                
129                 colK = ArrFind(arr_columnPEM, "KodPEM")
130                 colN = ArrFind(arr_columnPEM, "NamePEM")
131                 arrPEM = CoolSort(arrPEM, 2)
132                 For i = 1 To UBound(arrPEM)
133                     If Not divisions.exists(arrPEM(i, colK)) Then divisions.Add arrPEM(i, colK), arrPEM(i, colN)
134                     Reg.ComboCodePEM.AddItem arrPEM(i, colK)
135                     Reg.ComboPEM.AddItem arrPEM(i, colN)
136                     Reg.ComboPEM.List(Reg.ComboPEM.ListCount - 1, 1) = arrPEM(i, colK)
137                 Next i
138             End If
139             indcod = Ind.Range("F" & Target.Row).Value
140             If Reg.ComboCodePEM.Value <> indcod Then Reg.ComboCodePEM.Value = indcod
141             If Reg.ComboPEM.text <> indcod Then Reg.ComboPEM.text = Ind.Range("G" & Target.Row).Value
142             indmon = Ind.Cells(9, Target.column).Value
143             If Reg.ComboMonth.text <> indmon Then Reg.ComboMonth.text = indmon
144             Reg.Range("PEM").Value = Reg.ComboPEM.text
145             Inddbl = False
            
147             Call Reg.openArch
148             ret = EnableEvents("Ind.BeforeDoubleClick", ret)
                                                addlog "END Private Sub Ind.BeforeDoubleClick"
150         End If
151     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Sub ComboCode_Click() '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error GoTo Errors
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
'    null
162     If Not NVal(ComboCompany.Value) = NVal(ComboCode.Value) And Not firstacn Then
                                            addlog "START Private Sub ComboCode_Click"
164         formind = False
        Dim ret As Boolean
166         ComboCompany.Value = ComboCode.Value
167         Call formNames
168         Call setIndex
                                            addlog "END Private Sub ComboCode_Click"
170     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Sub ComboCompany_Click() '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error GoTo Errors
    
178     If Not NVal(ComboCompany.Value) = NVal(ComboCode.Value) And Not firstacn Then
                                            addlog "START Private Sub ComboCompany_Click"
180         formind = False
        Dim ret As Boolean
182         ComboCode.Value = ComboCompany.Value
183         Call formNames
184         Call setIndex
                                            addlog "END Private Sub ComboCompany_Click"
186     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub


Private Sub ComboKind_Change()
    On Error GoTo Errors
194     If Not firstacn Then
                                                addlog "START Private Sub Ind.ComboKind_Change"
        Dim ret As Boolean
197         ret = EnableEvents("ComboKind_Change")
        
199         Select Case Ind.ComboKind.ListIndex
        Case 0, 2, 3, 11
201             Label1.Visible = False
202             Label5.Visible = False
203             Ind.LabelKls.Visible = False
204             Ind.LabelU.Visible = False
        Case Else
206             Label1.Visible = True
207             Label5.Visible = True
208             Ind.LabelKls.Visible = True
209             Ind.LabelU.Visible = True
210         End Select
211         If Ind.ComboKind.ListIndex = 1 Then
212             Label7.Visible = True
213             Label8.Visible = True
214             Ind.OptionAll.Visible = True
215             Ind.OptionLong.Visible = True
216             Ind.OptionShort.Visible = True
217         Else
218             Label7.Visible = False
219             Label8.Visible = False
220             Ind.OptionAll.Visible = False
221             Ind.OptionLong.Visible = False
222             Ind.OptionShort.Visible = False
223         End If
224         If Not firstacn And Not IsEmpty(divisionsIND) And Not formind Then
225             formind = True
226             IndexNames = Array("|fffd||fffd||fffd|", "|3f3||fffd||fffd||fffd||fffd||fffd||fffd|", "|473||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "I |fffd||fffd|", "II |fffd||fffd|", "III |fffd||fffd|", "IV |fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|")
227             Call SetColumnName(indexs, IndexNames, divisionsIND.Count + 1)
228             dNames = divisionsIND.items
229             dKeys = divisionsIND.keys
230             indcod = ArrFind(IndexNames, "|fffd||fffd||fffd|")
231             IndName = ArrFind(IndexNames, "|3f3||fffd||fffd||fffd||fffd||fffd||fffd|")
232             For i = 1 To divisionsIND.Count
233                 indexs(i, indcod) = dKeys(i - 1)
234                 indexs(i, IndName) = dNames(i - 1)
235             Next i
236             indexs(UBound(indexs), indcod) = " "
237             indexs(UBound(indexs), IndName) = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & Ind.ComboCompany.text
238             Ind.Range("F10:X" & 6 + Ind.UsedRange.Rows.Count).ClearContents
239         End If
240         Call setIndex
        
242         ret = EnableEvents("ComboKind_Change", ret)
                                            addlog "END Private Sub Ind.ComboKind_Change"
244     End If
    Exit Sub
246 Errors:
247     ret = EnableEvents("ComboKind_Change", ret)
248     Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Sub OptionAll_Change()
                                            addlog "START Private Sub Ind.OptionAll_Change"
253     Call setIndex
                                            addlog "END Private Sub Ind.OptionAll_Change"
End Sub

Private Sub OptionLong_Change()
                                            addlog "START Private Sub Ind.OptionLong_Change"
259     Call setIndex
                                            addlog "END Private Sub Ind.OptionLong_Change"
End Sub

Private Sub OptionShort_Change()
                                            addlog "START Private Sub Ind.OptionShort_Change"
265     Call setIndex
                                            addlog "END Private Sub Ind.OptionShort_Change"
End Sub

Private Sub ComboYear_Click()
    On Error GoTo Errors
271     If FoldY <> "" Then FoldY1 = Er.ComboYear.Value & "\"
272     If Not firstacn Then
                                            addlog "START Private Sub Ind.ComboYear_Change"
274         formind = False
275         Call formNames
276         Call setIndex
                                            addlog "END Private Sub ind.ComboYear_Change"
278     End If

    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Sub LabelKls_Click()
285     FormUKls.Show
End Sub

Private Sub LabelU_Click()
289     FormUKls.Show
End Sub

Private Sub Worksheet_Activate()
    On Error GoTo Errors
                                        addlog "START Private Sub Ind.Activate"
    Dim ret As Boolean
296     ret = EnableEvents("Worksheet_Activate")
297     formind = False
298     If Me.ComboCode.Value = "" Or Me.ComboCode.Value <> Reg.ComboCode.Value Then
299         ReDim indexesU(0 To 1)
300         ReDim indexesKls(0 To 1)
301         indexesU(0) = "z"
302         indexesU(1) = 9
303         indexesKls(1) = 7
304         Ind.LabelKls.Caption = FormUKls.ListBox1.List(0)
305         Ind.LabelU.Caption = FormUKls.ListBox2.List(0)
306         FormUKls.ListBox1.ListIndex = 0
307         FormUKls.ListBox2.ListIndex = 0
308         FormUKls.ListBox1.Selected(0) = True
309         FormUKls.ListBox2.Selected(0) = True
310         firstacn = True
311         Me.ComboCode.Value = Reg.ComboCode.Value
312         Me.ComboCompany.Value = Reg.ComboCompany.Value
313         Me.ComboYear.Value = Reg.ComboYear.Value
314         Call formNames
315         ComboKind.Value = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
316         Call setIndex
317         firstacn = False
318     Else

320         changeUK = True
321         For i = 0 To FormUKls.ListBox1.ListCount - 1
322             FormUKls.ListBox1.Selected(i) = False
323         Next i
324         For i = 0 To FormUKls.ListBox2.ListCount - 1
325             FormUKls.ListBox2.Selected(i) = False
326         Next i
327         changeUK = False
        
329         For i = 1 To UBound(indexesU)
330             If indexesU(i) = 9 Then FormUKls.ListBox1.ListIndex = 0: FormUKls.ListBox1.Selected(0) = True: Exit For
331             FormUKls.ListBox1.ListIndex = Val(indexesU(i) + 2)
332             FormUKls.ListBox1.Selected(Val(indexesU(i) + 2)) = True
333         Next i
        
335         For i = 1 To UBound(indexesKls)
336             aa = IIf(indexesKls(i) = 7, 0, Val(indexesKls(i)))
337             FormUKls.ListBox2.ListIndex = aa
338             FormUKls.ListBox2.Selected(aa) = True
339         Next i
340         Call FormUKls.CommandOk_Click
341     End If
342     ret = EnableEvents("Worksheet_Activate", ret)
                                            addlog "END Private Sub Ind.Activate"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub
Public Sub formNames()
    On Error GoTo Errors
                                            addlog "START Private Sub Ind.formNames"
350     Set divisionsIND = CreateObject("Scripting.Dictionary")
    Dim dNames
    Dim dKeys
    
354     divisionsIND.RemoveAll
355     Call FormNamef
    
357     If Ind.ComboCode.Value = Reg.ComboCode.Value And Ind.ComboYear.Value = Reg.ComboYear.Value Then
358         If divisions.Count > 0 Then
359             dNames = divisions.items
360             dKeys = divisions.keys
361             For i = 0 To divisions.Count - 1
362                 divisionsIND.Add dKeys(i), dNames(i)
363             Next i
364         End If
365     Else
366         arr_columnPEM = Array("KodCompany", "NamePEM", "KodPEM")
367         tmp_arr = Reg.ArrLoad(FoldY1 & namef & "\" & "PEM" & Ind.ComboCode.Value & ".txt", arr_columnPEM)
368         colK = ArrFind(arr_columnPEM, "KodPEM")
369         colN = ArrFind(arr_columnPEM, "NamePEM")
370         For i = 1 To UBound(tmp_arr)
371             divisionsIND.Add tmp_arr(i, colK), tmp_arr(i, colN)
372         Next i
373     End If
    
375     Call Reg.ArrLoadReport(FoldY1 & namef & "\" & "Report" & ComboCode.text & "_" & ComboYear.text & ".txt")
    
377     IndexNames = Array("|fffd||fffd||fffd|", "|3f3||fffd||fffd||fffd||fffd||fffd||fffd|", "|473||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "I |fffd||fffd|", "II |fffd||fffd|", "III |fffd||fffd|", "IV |fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd|")
378     Call SetColumnName(indexs, IndexNames, divisionsIND.Count + 1)
379     dNames = divisionsIND.items
380     dKeys = divisionsIND.keys
381     indcod = ArrFind(IndexNames, "|fffd||fffd||fffd|")
382     IndName = ArrFind(IndexNames, "|3f3||fffd||fffd||fffd||fffd||fffd||fffd|")
383     For i = 1 To divisionsIND.Count
384         indexs(i, indcod) = dKeys(i - 1)
385         indexs(i, IndName) = dNames(i - 1)
386     Next i
387     indexs(UBound(indexs), indcod) = " "
388     indexs(UBound(indexs), IndName) = "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| " & Ind.ComboCompany.text
389     Ind.Range("F10:X" & 6 + Ind.UsedRange.Rows.Count).ClearContents
                                            addlog "END Private Sub Ind.formNames"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Public Sub setIndex()
    On Error GoTo Errors
                                            addlog "START Private Sub Ind.setIndex"
    
    Dim ret As Boolean
400     ret = EnableEvents("setIndex")
    Dim tmp_indexesU()
    Dim tmp_indexesKls()
    Dim sumNum() As Double
    Dim sumnumM() As Double
    Dim column As Integer
    Dim column1 As Integer
    Dim cil As Integer

409     colErr = ArrFind(arr_columnRep, "Nerr")
410     kodpemcol = ArrFind(arr_columnRep, "KodPEM")
411     monthcol = ArrFind(arr_columnRep, "Month")
412     indcod = ArrFind(IndexNames, "|fffd||fffd||fffd|")
413     TotalCol = ArrFind(IndexNames, "|fffd||fffd||fffd||fffd||fffd|")
414     colN = ArrFind(arr_columnRep, "N")
415     Deccol = ArrFind(IndexNames, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
416     IndName = ArrFind(IndexNames, "|3f3||fffd||fffd||fffd||fffd||fffd||fffd|")
    
    
419     tmp_arr1 = Array("I_kv", "II_kv", "III_kv", "IV_kv")
'
'    For i = 1 To UBound(indexs)
'        For j = 2 To UBound(indexs, 2)
'            indexs(i, j) = ""
'        Next j
'    Next i
    
427     Select Case Ind.ComboKind.ListIndex
        Case 0
429             r = "General"
430             IColumns = Array(Array(colErr, 1), Array(colErr, 1), Array(colErr, 1), Array(colErr, 1))
431             IRows = Array(Array("", 1), Array("", 2), Array("", 3), Array("", 9)) '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
432             tmp_indexes = GetData(arrRep, IColumns, IRows, Array(0, 0, 0, 0))
433             indexs = calcData(indexs, tmp_indexes, "choice")
        Case 2
435             r = "#0.00"
436             IColumns = Array(Array(ArrFind(arr_columnRep, "SAIDI1"), 2, 6), Array(ArrFind(arr_columnRep, "N"), 1))
437             IRows = Array(Array("", 4, 7), Array("", 1, 2, 4, 7)) '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
438             tmp_indexes = GetData(arrRep, IColumns, IRows, Array(0, 1))
439             indexs = calcData(indexs, tmp_indexes, "dil")
        Case 3
441             r = "#0.00"
442             IColumns = Array(Array(ArrFind(arr_columnRep, "SAIDI1"), 2, 6), Array(ArrFind(arr_columnRep, "N"), 1))
443             IRows = Array(Array("", 5, 8), Array("", 5, 8)) '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
444             tmp_indexes = GetData(arrRep, IColumns, IRows, Array(0, 1))
445             indexs = calcData(indexs, tmp_indexes, "dil")
        Case 1
447             r = "#,##0"
448             If Ind.OptionAll.Value = True Then
449                 indexesKls(0) = ArrFind(arr_columnRep, "NS1")
450                 indexesKls1 = indexesKls
451                 indexesKls1(0) = ArrFind(arr_columnRep, "NM1")
452                 IColumns = Array(indexesKls, indexesKls1)
453                 IRows = Array(indexesU, indexesU) '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
454                 tmp_indexes = GetData(arrRep, IColumns, IRows, Array(0, 0))
455                 indexs = calcData(indexs, tmp_indexes, "sum")
456             ElseIf Ind.OptionLong.Value = True Then
457                 indexesKls(0) = ArrFind(arr_columnRep, "NS1")
458                 IColumns = Array(indexesKls)
459                 IRows = Array(indexesU) '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
460                 tmp_indexes = GetData(arrRep, IColumns, IRows, Array(0, 0))
461                 indexs = calcData(indexs, tmp_indexes)
462             Else
463                 indexesKls(0) = ArrFind(arr_columnRep, "NM1")
464                 IColumns = Array(indexesKls)
465                 IRows = Array(indexesU) '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
466                 tmp_indexes = GetData(arrRep, IColumns, IRows, Array(0, 0))
467                 indexs = calcData(indexs, tmp_indexes)
468             End If
        Case 4
470             r = "#0.00"
471             indexesN = rowsN(indexesU(0))
472             indexesKls(0) = ArrFind(arr_columnRep, "SAIDI1")
473             IColumns = Array(indexesKls, Array(ArrFind(arr_columnRep, "N"), 1))
474             IRows = Array(indexesU, indexesN) '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
475             tmp_indexes = GetData(arrRep, IColumns, IRows, Array(0, 1))
476             indexs = calcData(indexs, tmp_indexes, "dil")
        Case 5
478             r = "#0.00"
479             indexesN = rowsN(indexesU(0))
480             indexesKls(0) = ArrFind(arr_columnRep, "SAIFI1")
481             IColumns = Array(indexesKls, Array(ArrFind(arr_columnRep, "N"), 1))
482             IRows = Array(indexesU, indexesN) '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
483             tmp_indexes = GetData(arrRep, IColumns, IRows, Array(0, 1))
484             indexs = calcData(indexs, tmp_indexes, "dil")
        Case 6
486             r = "#0.0"
487             indexesKls(0) = ArrFind(arr_columnRep, "ENS1")
488             IColumns = Array(indexesKls)
489             IRows = Array(indexesU) '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
490             tmp_indexes = GetData(arrRep, IColumns, IRows, Array(0, 0))
491             indexs = calcData(indexs, tmp_indexes)

        Case 7
494             r = "#0.000"
495             indexesN = rowsN(indexesU(0))
496             indexesKls(0) = ArrFind(arr_columnRep, "MAIFI1")
497             IColumns = Array(indexesKls, Array(ArrFind(arr_columnRep, "N"), 1))
498             IRows = Array(indexesU, indexesN) '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
499             tmp_indexes = GetData(arrRep, IColumns, IRows, Array(0, 1))
500             indexs = calcData(indexs, tmp_indexes, "dil")
        Case 8
502             r = "#0.00"
503             indexesKls(0) = ArrFind(arr_columnRep, "SAIDI1")
504             indexesKls1 = indexesKls
505             indexesKls1(0) = ArrFind(arr_columnRep, "SAIFI1")
506             IColumns = Array(indexesKls, indexesKls1)
507             IRows = Array(indexesU, indexesU) '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
508             tmp_indexes = GetData(arrRep, IColumns, IRows, Array(0, 0))
509             indexs = calcData(indexs, tmp_indexes, "dil")
        Case 9
511             r = "#,##0"
512             IColumns = Array(Array(ArrFind(arr_columnRep, "N"), 1))
513             IRows = Array(indexesU)
514             tmp_indexes = GetData(arrRep, IColumns, IRows, Array(1, 0))
515             indexs = calcData(indexs, tmp_indexes)
        Case 10
517             r = "#0.00"
518             IColumns = Array(Array(ArrFind(arr_columnRep, "C"), 1))
519             IRows = Array(indexesU)
520             tmp_indexes = GetData(arrRep, IColumns, IRows, Array(1, 0))
521             indexs = calcData(indexs, tmp_indexes)
        Case 11
523             colBlock = ArrFind(arr_columnC, "Block")
524             tmp_indexes = GetDataC(colBlock)
'            r = "General"
'            IColumns = Array(Array(colBlock, 1), Array(colBlock, 1))
'            IRows = Array(Array("", 8), Array("", 9)) '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'            tmp_indexes = GetData(arrC, IColumns, IRows, Array(0, 0))
529             indexs = calcData(indexs, tmp_indexes, "choice2")
530     End Select

532     Me.Range(Me.Range("IndexNames").Cells(1).Address & ":" & Me.Range("IndexNames").Cells(1).Offset(divisionsIND.Count + 1, UBound(IndexNames)).Address) = indexs
533     Me.Range("H10:" & Me.Range("IndexNames").Cells(1).Offset(divisionsIND.Count + 1, UBound(IndexNames)).Address).NumberFormat = r
534     ret = EnableEvents("setIndex", ret)
                                            addlog "END Private Sub Ind.setIndex"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub
Private Function GetDataC(col)
                                            addlog "START Private Sub Ind.GetDataC"
    Dim tmp_arr
542     tmpC = Reg.ArrLoad(FoldY1 & namef & "\" & "C" & Ind.ComboYear.Value + ".txt", arr_columnC)
543     ReDim tmp_arr(0 To divisionsIND.Count, 0 To 17)
544     dKeys = divisionsIND.keys
545     For i = 0 To UBound(tmp_arr) - 1
546         tmp_arr(i, 0) = dKeys(i)
547     Next i
548     kodpemcol = ArrFind(arr_columnC, "KodPEM")
549     kodpemcolR = ArrFind(arr_columnRep, "KodPEM")
550     monthcolR = ArrFind(arr_columnRep, "Month")
'    colBlock = ArrFind(arr_columnC, "Block")
552     For j = 1 To UBound(arrRep) Step 9
553         For m = 1 To UBound(tmpC) Step 12
554             If arrRep(j, kodpemcolR) = tmpC(m, kodpemcol) Then
555                 For k = LBound(tmp_arr) To UBound(tmp_arr) - 1
556                     If tmp_arr(k, 0) = tmpC(m, kodpemcol) Then
557                         For mm = 0 To 11
558                             If Val(arrRep(j, monthcolR)) - 1 = mm Then
559                                 If tmpC(m + mm, col) <> "" Then
560                                     tmp_arr(k, mm + 1) = tmpC(m + mm, col)
561                                     If Val(tmp_arr(k, mm + 1)) = 0 Then
562                                         tmp_arr(UBound(tmp_arr), mm + 1) = 0
563                                     ElseIf tmp_arr(UBound(tmp_arr), mm + 1) = "" Then
564                                         tmp_arr(UBound(tmp_arr), mm + 1) = 1
565                                     End If
566                                 Else
567                                     tmp_arr(k, mm + 1) = "--"
568                                     tmp_arr(UBound(tmp_arr), mm + 1) = 0
569                                 End If
570                             End If
571                         Next mm
572                     End If
573                 Next k
574             End If
575         Next m
576     Next j
'    For i = 1 To 12
'        If tmp_arr(UBound(tmp_arr), i) =  Then tmp_arr(UBound(tmp_arr), i) = 1
'    Next i
580     GetDataC = tmp_arr
                                            addlog "END Private Sub Ind.GetDataC"
End Function

Private Function GetData(arrRep, IColumns, IRows, Metod, Optional step As Integer = 9)
    On Error GoTo Errors
    'metod: 0 - |fffd||fffd||fffd||fffd|, 1 - |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                                            addlog "START Private Sub Ind.GetData"
588     tmp_arr1 = Array("I_kv", "II_kv", "III_kv", "IV_kv")
    Dim tmp_arr
    Dim firstnum As Boolean
591     ReDim tmp_arr(0 To divisionsIND.Count, 0 To (UBound(IColumns) + 1) * 17)
592     dKeys = divisionsIND.keys
593     For i = 0 To UBound(tmp_arr) - 1
594         tmp_arr(i, 0) = dKeys(i)
595     Next i
            
597     colErr = ArrFind(arr_columnRep, "Nerr")
598     kodpemcol = ArrFind(arr_columnRep, "KodPEM")
599     monthcol = ArrFind(arr_columnRep, "Month")
600     indcod = ArrFind(IndexNames, "|fffd||fffd||fffd|")
601     TotalCol = ArrFind(IndexNames, "|fffd||fffd||fffd||fffd||fffd|")
602     colN = ArrFind(arr_columnRep, "N")
    
    
'    NColumns = 0
    
607     For i = LBound(IColumns) To UBound(IColumns)
        
609         For k = LBound(tmp_arr) To UBound(tmp_arr)
610             firstnum = False
611             firstnum1 = False
612             firstmon = False
613             kv = 0
614             For m = 1 To UBound(arrRep) Step step
615                 If IsNull(ArrFind(tmp_arr1, arrRep(m, monthcol))) And tmp_arr(k, 0) = arrRep(m, kodpemcol) Then
616                     If kv <> (Val(arrRep(m, monthcol)) - 1) \ 3 + 1 Then kv = (Val(arrRep(m, monthcol)) - 1) \ 3 + 1: firstnum = False '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                    
618                     If NVal(arrRep(m + 1, colErr)) > 0 Then
619                         tmp_arr(k, Val(arrRep(m, monthcol)) + (i * 17)) = "Err."
620                         tmp_arr(k, 12 + kv + (i * 17)) = "Err."
621                         tmp_arr(k, 17 + (i * 17)) = "Err."
622                         tmp_arr(UBound(tmp_arr), Val(arrRep(m, monthcol)) + (i * 17)) = "Err."
623                         tmp_arr(UBound(tmp_arr), 12 + kv + (i * 17)) = "Err."
624                         tmp_arr(UBound(tmp_arr), 17 + (i * 17)) = "Err."
625                         GoTo mmm
626                     End If
                    
628                     For j = LBound(IColumns(i)) + 1 To UBound(IColumns(i))
629                         For g = LBound(IRows(i)) + 1 To UBound(IRows(i))
630                             znach = NVal(arrRep(m + IRows(i)(g) - 1, IColumns(i)(0) + IColumns(i)(j) - 1))
631                             tmp_arr(k, Val(arrRep(m, monthcol)) + (i * 17)) = NVal(tmp_arr(k, Val(arrRep(m, monthcol)) + (i * 17))) + znach
632                             If tmp_arr(UBound(tmp_arr), Val(arrRep(m, monthcol)) + (i * 17)) <> "Err." Then
633                                 tmp_arr(UBound(tmp_arr), Val(arrRep(m, monthcol)) + (i * 17)) = NVal(tmp_arr(UBound(tmp_arr), Val(arrRep(m, monthcol)) + (i * 17))) + znach
634                             End If
635                             If Metod(i) = 0 Then
636                                 If tmp_arr(k, 12 + kv + (i * 17)) <> "Err." Then tmp_arr(k, 12 + kv + (i * 17)) = NVal(tmp_arr(k, 12 + kv + (i * 17))) + znach
637                                 If tmp_arr(UBound(tmp_arr), 12 + kv + (i * 17)) <> "Err." Then tmp_arr(UBound(tmp_arr), 12 + kv + (i * 17)) = NVal(tmp_arr(UBound(tmp_arr), 12 + kv + (i * 17))) + znach
638                                 If tmp_arr(k, 17 * (i + 1)) <> "Err." Then tmp_arr(k, 17 * (i + 1)) = NVal(tmp_arr(k, 17 * (i + 1))) + znach
639                                 If tmp_arr(UBound(tmp_arr), 17 * (i + 1)) <> "Err." Then tmp_arr(UBound(tmp_arr), 17 * (i + 1)) = NVal(tmp_arr(UBound(tmp_arr), 17 * (i + 1))) + znach
640                             Else
641                                 If znach > 0 And Not firstnum Then
642                                     If tmp_arr(k, 12 + kv + (i * 17)) <> "Err." Then tmp_arr(k, 12 + kv + (i * 17)) = NVal(tmp_arr(k, 12 + kv + (i * 17))) + znach
643                                     If tmp_arr(UBound(tmp_arr), 12 + kv + (i * 17)) <> "Err." Then tmp_arr(UBound(tmp_arr), 12 + kv + (i * 17)) = NVal(tmp_arr(UBound(tmp_arr), 12 + kv + (i * 17))) + znach
644                                 End If
645                                 If j = UBound(IColumns(i)) And g = UBound(IRows(i)) Then firstnum = True
646                                 If znach > 0 And Not firstnum1 Then
647                                     If tmp_arr(k, 17 * (i + 1)) <> "Err." Then tmp_arr(k, 17 * (i + 1)) = NVal(tmp_arr(k, 17 * (i + 1))) + znach
648                                 End If
649                                 If j = UBound(IColumns(i)) And g = UBound(IRows(i)) Then firstnum1 = True
650                             End If
651                         Next g
652                     Next j
653                 End If
654 mmm:
655             Next m
656         Next k
657         If Metod(i) = 1 And tmp_arr(UBound(tmp_arr), 17 * (i + 1)) <> "Err." Then
658             For ii = LBound(tmp_arr) To UBound(tmp_arr) - 1
659                 tmp_arr(UBound(tmp_arr), 17 * (i + 1)) = NVal(tmp_arr(UBound(tmp_arr), 17 * (i + 1))) + NVal(tmp_arr(ii, 17 * (i + 1)))
660             Next ii
661         End If
662     Next i
    
664     GetData = tmp_arr
                                            addlog "END Private Sub Ind.GetData"

    Exit Function
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Function
Function calcData(arr, tmp_indexs, Optional Metod)
    On Error GoTo Errors
                                            addlog "START Private Sub Ind.calcData"
673     IndName = ArrFind(IndexNames, "|3f3||fffd||fffd||fffd||fffd||fffd||fffd|")
674     For i = LBound(tmp_indexs) To UBound(tmp_indexs)
675         For j = 1 To 17
676             arr(i + 1, IndName + j) = ""
677             If tmp_indexs(i, j) <> "" Then
678                 If tmp_indexs(i, j) = "Err." Then
679                     arr(i + 1, IndName + j) = "Err."
680                 ElseIf IsMissing(Metod) Then
681                     arr(i + 1, IndName + j) = tmp_indexs(i, j)
682                 ElseIf Metod = "dil" Then
683                     If Val(tmp_indexs(i, j + 17)) <> 0 Then arr(i + 1, IndName + j) = tmp_indexs(i, j) / tmp_indexs(i, j + 17)
684                 ElseIf Metod = "sum" Then
685                     arr(i + 1, IndName + j) = tmp_indexs(i, j) + tmp_indexs(i, j + 17)
686                 ElseIf Metod = "choice" Then
687                     If tmp_indexs(i, j) > 0 Or tmp_indexs(i, j + 17) > 0 Then
688                         arr(i + 1, IndName + j) = "|fffd||fffd| |fffd||fffd||fffd||fffd|." & Chr(10) & IIf(tmp_indexs(i, j + 17) > 0, "|fffd||fffd|", tmp_indexs(i, j)) & " |fffd||fffd||fffd|."
689                     ElseIf tmp_indexs(i, j + 34) > 0 Then
690                         arr(i + 1, IndName + j) = IIf(i = UBound(tmp_indexs), tmp_indexs(i, j + 51), "+") & "(" & tmp_indexs(i, j + 34) & " |fffd||fffd||fffd|.)"
691                     ElseIf tmp_indexs(i, j) = 0 Then
692                         arr(i + 1, IndName + j) = IIf(i = UBound(tmp_indexs), tmp_indexs(i, j + 51), "+")
693                     End If
694                 ElseIf Metod = "choice2" Then
695                     If j < 13 Then
696                         If Val(tmp_indexs(i, j)) > 0 Then
697                             arr(i + 1, IndName + j) = "++"
698                         Else
699                             arr(i + 1, IndName + j) = "--"
700                         End If
701                     End If
702                 End If
703             End If
704         Next j
705     Next i
706     calcData = arr
                                            addlog "END Private Sub Ind.calcData"
    
    Exit Function
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Function

Private Sub FormNamef()
    On Error GoTo Errors
715     If FoldY <> "" Then FoldY1 = Ind.ComboYear.Value & "\"
716     namef = "EI_" & Ind.ComboYear.Value & "_" & Ind.ComboCode.Value
717     Set folder1 = FSO.GetFolder(ThisWorkbook.path & "\" & FoldY1)
718     If Reg.CheckBoxCheck.Value Then
719         For Each File In folder1.Files
720             If Left(File.Name, 13) = namef And Mid(File.Name, Len(File.Name) - 4, 1) = "+" Then namef = Left(File.Name, Len(File.Name) - 4): Exit For
721         Next
722     Else
723         For Each File In folder1.Files
724             If Left(File.Name, 13) = namef And Not Mid(File.Name, Len(File.Name) - 4, 1) = "+" Then namef = Left(File.Name, Len(File.Name) - 4): Exit For
725         Next
726     End If
727     If FSO.FileExists(ThisWorkbook.path & "\" & FoldY1 & namef & ".rar") And Not FSO.FolderExists(ThisWorkbook.path & "\" & FoldY1 & namef) Then
728         Call Reg.UnpackBackup(FoldY1 & namef)
729     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
735     ThisWorkbook.Saved = True '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
End Sub



Function rowsN(dil)
    Dim arr()
742     Select Case dil
        Case "z"
744             ReDim arr(0 To 1)
745             arr(1) = 9
        Case "m"
747             ReDim arr(0 To 4)
748             arr(1) = 1
749             arr(2) = 2
750             arr(3) = 4
751             arr(4) = 7
        Case "c"
753             ReDim arr(0 To 2)
754             arr(1) = 5
755             arr(2) = 8
756         End Select
757     rowsN = arr
758 End Function





Attribute VB_Name = "Module1"
Public dt_0 As String, dt_1 As Date ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Public myTimer() As Single

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'----------------------------------------
Public FoldY As String
Public FSO, folder
Public file_name As String
Public log_folder, log_file As Object
Public log_filename As String
Public log_tab As String
Public globsave As Boolean
Public arr_err()
Public tmpmytree
Public Type MyRec
    Name As String * 4
    cWith(1 To 100) As Single
End Type
'----------------------------------------
'Public Declare Function OpenClipboard Lib "user32" (ByVal hwnd As Long) As Long
'Public Declare Function EmptyClipboard Lib "user32" () As Long
'Public Declare Function CloseClipboard Lib "user32" () As Long
'Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
'Declare Function zCreateNewZip Lib "d:\bszip.dll" (ByVal zipname As String) As Long
Public KarrI As Integer
Public KarrC As Integer
Public KarrRep As Integer

Public errsave As Boolean
Public Passw As String
Public idCheck() As String
Public DicCheck
Public arrCheck() As String
Public arrI() As String
Public arrIold() As String
Public arrT() As String
Public arrTGroup() As String
Public arrT04H() As String
Public arrE() As String
Public arrEold() As String
Public arrC() As String
Public arrCREP() As String
Public arrRep() As String
Public arrRepOld() As String
Public arrNameComp() As String
'Public EBlock
'Public arrE2()

Public arr_columnDysp()
Public arr_columnI()
Public arr_columnT()
Public arr_columnTGroup()
Public Coll_columnTGroup As Collection
Public arr_columnT04H()
Public Coll_columnT04H As Collection
Public arr_columnE()
Public arr_columnPEM()
Public arr_columnC()
Public arr_columnRep()
Public arr_columnCName()
Public number As Integer
Public numberM As Integer
Public arr_SAIDI() 'As Double
Public arr_SAIFI() 'As Double
Public arr_ENS() 'As Double
Public arr_MAIFI() 'As Double
Public arr_NS() 'As Double
Public arr_NM() 'As Double
Public arr_info35110() 'As Double
Public arr_info6() 'As Double
Public arr_info04() 'As Double
Public arr_zag() 'As Double
'Public i As Integer
Public firstrow As Integer
Public setdata As Boolean
Public hidenn As Boolean
Public isCheck As Boolean
Public FormFindShow As Boolean

Public kods()
'Public kodsT()
'Public kodsE()
Public nameCom() As String
'Public kodsPEM()
Public tmp_rep() As String
Public PEMsel() As String
Public PEMsel2() As String
Public PEMsel3() As String
Public tmp_PEM() As String

Public Msel()
Public Msel2()
Public tmp_M()

Public head
Public ord
Public head1
Public ord1

Public indexesU()
Public indexesKls()
Public indexesU2()
Public indexesKls2()
Public tmp_indU()
Public tmp_indKls()
Public changeUK As Boolean

Public ComboCodeChange As Boolean
Public sheetChanged As Boolean
Public changedREP As Boolean
Public PEMad As Boolean
Public firstacn As Boolean
Public Inddbl As Boolean

Public RegBack As String

Public divisions
Public mytree
'Public dictree
Public years As Collection
Public napr As Integer
Public Ut As String

Public columnPEM() As String
Public arrPEM() As String

Public arr_columnPEMad()
Public divisionsRank
Public divisionsEr
Public RegDeact As Boolean

Public MyPath As String
Public caldata As Date
Public xxx As String

Public rowData As Long

Private Type QuickStack
    '|fffd||fffd||fffd| |fffd||fffd||fffd| QuickSort
    Low As Long
    High As Long
End Type
#If Win64 Then
    #If VBA7 Then    '  Office 2010-2013
        Private Declare PtrSafe Function WaitForSingleObject Lib "kernel32" ( _
        ByVal hHandle As LongLong, _
        ByVal dwMilliseconds As LongLong) As LongLong
    #Else    '  Office 2003-2007
        Private Declare Function WaitForSingleObject Lib "kernel32" ( _
        ByVal hHandle As LongLong, _
        ByVal dwMilliseconds As LongLong) As LongLong
    #End If
#Else
    #If VBA7 Then    '  Office 2010-2013
        Private Declare PtrSafe Function WaitForSingleObject Lib "kernel32" ( _
        ByVal hHandle As LongPtr, _
        ByVal dwMilliseconds As LongPtr) As LongPtr
    #Else    '  Office 2003-2007
        Private Declare Function WaitForSingleObject Lib "kernel32" ( _
        ByVal hHandle As Long, _
        ByVal dwMilliseconds As Long) As Long
    #End If
 #End If

#If Win64 Then
    #If VBA7 Then    '  Office 2010-2013
        Private Declare PtrSafe Function OpenProcess Lib "kernel32.dll" ( _
            ByVal dwDesiredAccess As LongLong, _
            ByVal bInheritHandle As LongLong, _
            ByVal dwProcessId As LongLong) As LongLong
    #Else    '  Office 2003-2007
        Private Declare Function OpenProcess Lib "kernel32.dll" ( _
            ByVal dwDesiredAccess As LongLong, _
            ByVal bInheritHandle As LongLong, _
            ByVal dwProcessId As Long) As LongLong
    #End If
#Else
    #If VBA7 Then    '  Office 2010-2013
        Private Declare PtrSafe Function OpenProcess Lib "kernel32.dll" ( _
            ByVal dwDesiredAccess As LongPtr, _
            ByVal bInheritHandle As LongPtr, _
            ByVal dwProcessId As LongPtr) As LongPtr
    #Else    '  Office 2003-2007
        Private Declare Function OpenProcess Lib "kernel32.dll" ( _
            ByVal dwDesiredAccess As Long, _
            ByVal bInheritHandle As Long, _
            ByVal dwProcessId As Long) As Long
    #End If
 #End If
        
#If Win64 Then
    #If VBA7 Then    '  Office 2010-2013
        Private Declare PtrSafe Function CloseHandle Lib "kernel32" ( _
            ByVal hObject As LongLong) As LongLong
    #Else    '  Office 2003-2007
        Private Declare Function CloseHandle Lib "kernel32" ( _
            ByVal hObject As LongLong) As LongLong
    #End If
#Else
    #If VBA7 Then    '  Office 2010-2013
        Private Declare PtrSafe Function CloseHandle Lib "kernel32" ( _
            ByVal hObject As LongPtr) As LongPtr
    #Else    '  Office 2003-2007
        Private Declare Function CloseHandle Lib "kernel32" ( _
            ByVal hObject As Long) As Long
    #End If
#End If




Private Const SYNCHRONIZE = &H100000

Public Enum ShellAndWaitResult
    Success = 0
    Failure = 1
    TimeOut = 2
    InvalidParameter = 3
    SysWaitAbandoned = 4
    UserWaitAbandoned = 5
    UserBreak = 6
End Enum

Public Enum ActionOnBreak
    IgnoreBreak = 0
    AbandonWait = 1
    PromptUser = 2
End Enum

Private Const STATUS_ABANDONED_WAIT_0 As Long = &H80
Private Const STATUS_WAIT_0 As Long = &H0
Private Const WAIT_ABANDONED As Long = (STATUS_ABANDONED_WAIT_0 + 0)
Private Const WAIT_OBJECT_0 As Long = (STATUS_WAIT_0 + 0)
Private Const WAIT_TIMEOUT As Long = 258&
Private Const WAIT_FAILED As Long = &HFFFFFFFF
Private Const WAIT_INFINITE = -1&


Public Function ShellAndWait(ShellCommand As String, _
                    TimeOutMs As Long, _
                    ShellWindowState As VbAppWinStyle, _
                    BreakKey As ActionOnBreak) As ShellAndWaitResult
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' ShellAndWait
'
' This function calls Shell and passes to it the command text in ShellCommand. The function
' then waits for TimeOutMs (in milliseconds) to expire.
'
'   Parameters:
'       ShellCommand
'           is the command text to pass to the Shell function.
'
'       TimeOutMs
'           is the number of milliseconds to wait for the shell'd program to wait. If the
'           shell'd program terminates before TimeOutMs has expired, the function returns
'           ShellAndWaitResult.Success = 0. If TimeOutMs expires before the shell'd program
'           terminates, the return value is ShellAndWaitResult.TimeOut = 2.
'
'       ShellWindowState
'           is an item in VbAppWinStyle specifying the window state for the shell'd program.
'
'       BreakKey
'           is an item in ActionOnBreak indicating how to handle the application's cancel key
'           (Ctrl Break). If BreakKey is ActionOnBreak.AbandonWait and the user cancels, the
'           wait is abandoned and the result is ShellAndWaitResult.UserWaitAbandoned = 5.
'           If BreakKey is ActionOnBreak.IgnoreBreak, the cancel key is ignored. If
'           BreakKey is ActionOnBreak.PromptUser, the user is given a ?Continue? message. If the
'           user selects "do not continue", the function returns ShellAndWaitResult.UserBreak = 6.
'           If the user selects "continue", the wait is continued.
'
'   Return values:
'            ShellAndWaitResult.Success = 0
'               indicates the the process completed successfully.
'            ShellAndWaitResult.Failure = 1
'               indicates that the Wait operation failed due to a Windows error.
'            ShellAndWaitResult.TimeOut = 2
'               indicates that the TimeOutMs interval timed out the Wait.
'            ShellAndWaitResult.InvalidParameter = 3
'               indicates that an invalid value was passed to the procedure.
'            ShellAndWaitResult.SysWaitAbandoned = 4
'               indicates that the system abandoned the wait.
'            ShellAndWaitResult.UserWaitAbandoned = 5
'               indicates that the user abandoned the wait via the cancel key (Ctrl+Break).
'               This happens only if BreakKey is set to ActionOnBreak.AbandonWait.
'            ShellAndWaitResult.UserBreak = 6
'               indicates that the user broke out of the wait after being prompted with
'               a ?Continue message. This happens only if BreakKey is set to
'               ActionOnBreak.PromptUser.
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

    Dim TaskID As Long
    Dim ProcHandle As Long
    Dim WaitRes As Long
    Dim Ms As Long
    Dim MsgRes As VbMsgBoxResult
    Dim SaveCancelKey As XlEnableCancelKey
    Dim ElapsedTime As Long
    Dim Quit As Boolean
    Const ERR_BREAK_KEY = 18
    Const DEFAULT_POLL_INTERVAL = 500
    
    If Trim(ShellCommand) = vbNullString Then
        ShellAndWait = ShellAndWaitResult.InvalidParameter
        Exit Function
    End If
    
    If TimeOutMs < 0 Then
        ShellAndWait = ShellAndWaitResult.InvalidParameter
        Exit Function
    ElseIf TimeOutMs = 0 Then
        Ms = WAIT_INFINITE
    Else
        Ms = TimeOutMs
    End If
    
    Select Case BreakKey
        Case AbandonWait, IgnoreBreak, PromptUser
            ' valid
        Case Else
            ShellAndWait = ShellAndWaitResult.InvalidParameter
            Exit Function
    End Select
    
    Select Case ShellWindowState
        Case vbHide, vbMaximizedFocus, vbMinimizedFocus, vbMinimizedNoFocus, vbNormalFocus, vbNormalNoFocus
            ' valid
        Case Else
            ShellAndWait = ShellAndWaitResult.InvalidParameter
            Exit Function
    End Select
    
    On Error Resume Next
    err.Clear
    TaskID = Shell(ShellCommand, ShellWindowState)
    If (err.number <> 0) Or (TaskID = 0) Then
        ShellAndWait = ShellAndWaitResult.Failure
        Exit Function
    End If
    
    ProcHandle = OpenProcess(SYNCHRONIZE, False, TaskID)
    If ProcHandle = 0 Then
        ShellAndWait = ShellAndWaitResult.Failure
        Exit Function
    End If
    
    On Error GoTo errH:
    SaveCancelKey = Application.EnableCancelKey
    Application.EnableCancelKey = xlErrorHandler
    WaitRes = WaitForSingleObject(ProcHandle, DEFAULT_POLL_INTERVAL)
    Do Until WaitRes = WAIT_OBJECT_0
        DoEvents
        Select Case WaitRes
            Case WAIT_ABANDONED
                ' Windows abandoned the wait
                ShellAndWait = ShellAndWaitResult.SysWaitAbandoned
                Exit Do
            Case WAIT_OBJECT_0
                ' Successful completion
                ShellAndWait = ShellAndWaitResult.Success
                Exit Do
            Case WAIT_FAILED
                ' attach failed
                ShellAndWait = ShellAndWaitResult.Failure
                Exit Do
            Case WAIT_TIMEOUT
                ' Wait timed out. Here, this time out is on DEFAULT_POLL_INTERVAL.
                ' See if ElapsedTime is greater than the user specified wait
                ' time out. If we have exceed that, get out with a TimeOut status.
                ' Otherwise, reissue as wait and continue.
                ElapsedTime = ElapsedTime + DEFAULT_POLL_INTERVAL
                If Ms > 0 Then
                    ' user specified timeout
                    If ElapsedTime > Ms Then
                        ShellAndWait = ShellAndWaitResult.TimeOut
                        Exit Do
                    Else
                        ' user defined timeout has not expired.
                    End If
                Else
                    ' infinite wait -- do nothing
                End If
                ' reissue the Wait on ProcHandle
                WaitRes = WaitForSingleObject(ProcHandle, DEFAULT_POLL_INTERVAL)
                
            Case Else
                ' unknown result, assume failure
                ShellAndWait = ShellAndWaitResult.Failure
                Exit Do
                Quit = True
        End Select
    Loop
    
    CloseHandle ProcHandle
    Application.EnableCancelKey = SaveCancelKey
    Exit Function
    
errH:
    Debug.Print "ErrH: Cancel: " & Application.EnableCancelKey
    If err.number = ERR_BREAK_KEY Then
        If BreakKey = ActionOnBreak.AbandonWait Then
            CloseHandle ProcHandle
            ShellAndWait = ShellAndWaitResult.UserWaitAbandoned
            Application.EnableCancelKey = SaveCancelKey
            Exit Function
        ElseIf BreakKey = ActionOnBreak.IgnoreBreak Then
            err.Clear
            Resume
        ElseIf BreakKey = ActionOnBreak.PromptUser Then
            MsgRes = MsgBox("User Process Break." & vbCrLf & _
                "Continue to wait?", vbYesNo)
            If MsgRes = vbNo Then
                CloseHandle ProcHandle
                ShellAndWait = ShellAndWaitResult.UserBreak
                Application.EnableCancelKey = SaveCancelKey
            Else
                err.Clear
                Resume Next
            End If
        Else
            CloseHandle ProcHandle
            Application.EnableCancelKey = SaveCancelKey
            ShellAndWait = ShellAndWaitResult.Failure
        End If
    Else
        ' some other error. assume failure
        CloseHandle ProcHandle
        ShellAndWait = ShellAndWaitResult.Failure
    End If
    
    Application.EnableCancelKey = SaveCancelKey

End Function



'Public Consumption() As Currency
'Public Number() As Long
'Public Transfor() As Integer
'Public linii() As Integer

Sub stepit2()
                                            addlog "START stepit2"
'
' stepit2 |fffd||fffd||fffd||fffd||fffd||fffd|
' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 09.07.2008 (rg3)
' |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2009|fffd|.
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: Ctrl+|fffd|
    Stepit
                                            addlog "END stepit2"
End Sub

Function IDate(DataTime As String, Cal As String, oldDat As String)
                                            addlog "START Function IDate"
    dt_0 = oldDat
    If IsDate(FindDate(oldDat)) Then
        dt_1 = FindDate(oldDat)
    ElseIf IsDate(DataTime) Then
        dt_1 = DataTime
    Else
        dt_1 = "01.01.2000"
    End If
    
    Form_SelectDate.Caption = "|fffd| |fffd||fffd||fffd||fffd|- """ & oldDat & """  (" & Cal & ")"
    Form_SelectDate.titl.Caption = Form_SelectDate.Caption
    Form_SelectDate.Show
    
    IDate = dt_0
    
                                            addlog "END Function IDate"
End Function

Function FindDate(oldDat As Variant)
                                            addlog "START Function FindDate"
    oldDat = Trim(oldDat)
    oldDat = Replace(oldDat, "|fffd|.", " ")
    oldDat = Replace(oldDat, "|fffd|", " ")
    oldDat = Replace(oldDat, "p.", " ")
    oldDat = Replace(oldDat, "p", " ")
    oldDat = Replace(oldDat, "|fffd|.", " ")
    oldDat = Replace(oldDat, "|fffd|", " ")
    oldDat = Replace(oldDat, "  ", " ")
    oldDat = Replace(oldDat, "..", ".")
    oldDat = Replace(oldDat, "::", ":")
    If IsDate(oldDat) Then
        FindDate = oldDat
                                            addlog "END Function FindDate (IsDate)"
        Exit Function
    End If
    
    If InStr(1, oldDat, " ", 0) > 0 Then
    ElseIf InStr(7, oldDat, ".", 0) > 0 Then
        oDate = Left(oldDat, 6) & Replace(oldDat, ".", "", 7)
    Else
        FindDate = oldDat
                                            addlog "END Function FindDate (not found '.') [" & oldDat & "]"
        Exit Function
    End If
    
    oDate = Left(oldDat, InStr(1, oldDat, " ", 0) - 1)
    oDate = Trim(oDate)
    oDate = Replace(oDate, "/", ".")
    oDate = Replace(oDate, "\", ".")
    oDate = Replace(oDate, "-", ".")
    oTime = Right(oldDat, Len(oldDat) - InStr(1, oldDat, " ", 0))
    oTime = Trim(oTime)
    oTime = Replace(oTime, "/", ":")
    oTime = Replace(oTime, "\", ":")
    oTime = Replace(oTime, "-", ":")
    oTime = Replace(oTime, ".", ":")
    oTime = Replace(oTime, ";", ":")
    oldDat = oDate & " " & oTime
    If IsDate(oldDat) Then
        FindDate = Format(oldDat, "dd.mm.yyyy hh:mm:ss")
                                            addlog "END Function FindDate [" & Format(oldDat, "dd.mm.yyyy hh:mm:ss") & "]"
    Else
        FindDate = oldDat
                                            addlog "END Function FindDate [" & oldDat & "]"
        Exit Function
    End If
End Function

Function ArrFind(farr, Data, Optional RowColumn As Integer = 0, Optional ColumnName As String = "")
    'RowColumn=0 |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, RowColumn=1 |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'                                            addlog "START Function ArrFind (" & CStr(Data) & ")"
    On Error GoTo ex
    If RowColumn = 0 And ColumnName = "" Then
        For i = LBound(farr) To UBound(farr)
            If farr(i) = Data Then
                ArrFind = i
'                                            addlog "END Function ArrFind (RowColumn = 0 And ColumnName = '') =" & CStr(i)
                Exit Function
            End If
        Next i
    ElseIf RowColumn = 0 And ColumnName <> "" Then
        For i = LBound(farr, 2) To UBound(farr, 2)
            If farr(LBound(farr), i) = ColumnName Then idColumn = i: Exit For
        Next i
        For i = LBound(farr) + 1 To UBound(farr)
            If farr(i, idColumn) = Data Then
                ArrFind = i
'                                            addlog "END Function ArrFind (RowColumn = 0 And ColumnName <> '') =" & CStr(i)
                Exit Function
            End If
        Next i
    ElseIf RowColumn = 1 Then
        For i = LBound(farr, 2) To UBound(farr, 2)
            If farr(LBound(farr), i) = Data Then
                ArrFind = i
'                                            addlog "END Function ArrFind (RowColumn = 1) =" & CStr(i)
                Exit Function
            End If
        Next i
    End If
ex: ArrFind = Null
'                                            addlog "END Function ArrFind (ERROR)"
End Function

Sub attach()    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| Excel
                                            addlog "START Sub attach"
'    Dim FileManager As New AttachedFiles, res As Boolean
'    res = FileManager.AttachNewFile(ThisWorkbook.Path & "\Rar.exe")
    
'    File$ = ThisWorkbook.path & "\Rar.exe"
    File$ = ThisWorkbook.path & "\tree.rar"
    If Dir(File$) = "" Then MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| "" & File$ & """, vbCritical: Exit Sub
    Dim FileManager As New AttachedFiles
    If FileManager.AttachNewFile(File$) Then Debug.Print "|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
                                            addlog "END Sub attach"
End Sub

Sub extract()    ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Excel |fffd||fffd| |fffd||fffd||fffd||fffd|
                                            addlog "START Sub extract"
    Dim FileManager As New AttachedFiles, res As Boolean
'    On Error Resume Next ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| rar.exe
    res = FileManager.GetAttachment("Arch.exe").SaveAs(ThisWorkbook.path & "\Arch.exe")
                                            addlog "END Sub extract"
End Sub

Public Function Contains(col As Collection, Key As Variant) As Boolean
'                                            addlog "START Public Function Contains"
    Dim obj As Variant
    On Error GoTo err
        Contains = True
        obj = VarType(col(Key))
'                                            addlog "END Public Function Contains"
        Exit Function
err:
        Contains = False
'                                            addlog "END Public Function Contains (ERROR)"
End Function


Public Function NVal(Target, Optional typ As Integer)
    If IsNull(Target) Then NVal = 0: Exit Function
    NVal = Val(Replace(Target, ",", "."))
    If typ = 1 Then
        If IsDate(Target) Then NVal = CDate(Target) Else NVal = Val(Target)
    Else
        NVal = Val(Replace(Target, ",", "."))
    End If
End Function

Public Function NDbl(Target)
    If IsNull(Target) Then NDbl = 0: Exit Function
    Target = Trim(Replace(Target, ",", "."))
    If Not IsNumeric(Target) Then NDbl = 0: Exit Function
    NDbl = CDbl(Target)
End Function

Public Function NStr(Target)
    If IsNull(Target) Then NStr = "": Exit Function
    NStr = CStr(Target)
End Function
' |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2009|fffd|.




'Function ClipboardText() ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'    On Error GoTo Clear
'    With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
'        .GetFromClipboard
'        ClipboardText = .GetText
'    End With
'    OpenClipboard (0&)
'    EmptyClipboard
'    CloseClipboard
'    Exit Function
'Clear: ClipboardText = ""
'End Function
'
'Sub SetClipboardText(ByVal txt$) ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
'    With GetObject("New:{1C3B4210-F441-11CE-B9EA-00AA006B1A69}")
'        .SetText txt$
'        .PutInClipboard
'    End With
'End Sub

Public Sub SetColumnName(arr, arr_column, Optional border As Integer)
'                                        addlog "START Public Sub SetColumnName (" & arr_column(0) & ")"
    ReDim arr(0 To border, UBound(arr_column))
    For i = 0 To UBound(arr_column)
        arr(0, i) = arr_column(i)
    Next i
'                                        addlog "END Public Sub SetColumnName (" & arr_column(0) & ")"
End Sub

Public Sub addlog(txt As String, Optional HT As Integer = 0)
    ThisWorkbook.Saved = True '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    On Error GoTo log_error
    If Left(txt, 5) = "START" Then HT = 1
    If Left(txt, 3) = "END" Then HT = -1
    If Not log_file Is Nothing Then
        Select Case HT
            Case 1
                log_file.WriteLine log_tab & txt
                log_tab = log_tab & vbTab
                If Len(log_tab) > UBound(myTimer) Then ReDim Preserve myTimer(LBound(myTimer) To Len(log_tab))
                myTimer(Len(log_tab)) = Timer
            Case 0
                log_file.WriteLine log_tab & txt & "  [|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| " & Timer - myTimer(Len(log_tab)) & " |fffd||fffd||fffd|.]"
            Case -1
                If Len(log_tab) - 1 > 0 Then
                    log_tab = String(Len(log_tab) - 1, vbTab)
                ElseIf Len(log_tab) - 1 = 0 Then
                    log_tab = ""
                End If
                log_file.WriteLine log_tab & txt & "  [|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Timer - myTimer(Len(log_tab) + 1) & " |fffd||fffd||fffd|.]"
            Case Else
                log_file.WriteLine "ERROR Public Sub addlog(wrong HT)"
        End Select
    End If
    Exit Sub
log_error:
    Set FSO = CreateObject("Scripting.FileSystemObject")
    If FSO.FolderExists(ThisWorkbook.path & "\log") Then
        Set log_folder = FSO.GetFolder(ThisWorkbook.path & "\log")
        log_filename = "log-" & Format(Now, "yyyy_mm_dd-hh_mm") & ".txt"
        Set log_file = log_folder.CreateTextFile(log_filename)
        log_file.WriteLine "ERROR addlog NOT EXIST"
    End If
End Sub

Public Function EnableEvents(txt As String, Optional ret As Boolean = False, Optional Screen As Boolean = True) As Boolean
    If Application.EnableEvents And Not ret Then
        Application.EnableEvents = False
        If Screen Then Application.ScreenUpdating = False
                                        addlog txt & " (EnableEvents = False)"
        EnableEvents = True
    ElseIf ret Then
        Application.EnableEvents = True
        If Screen Then Application.ScreenUpdating = True
        EnableEvents = True
                                        addlog txt & " (EnableEvents = True)"
    Else
        EnableEvents = False
    End If
End Function

Public Function SetX(arr, max As Integer, symbol As String) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (3 -> "","","x")
    Dim tmp() As String
    ReDim tmp(LBound(arr) To UBound(arr), 1 To max)
    For i = LBound(arr) To UBound(arr)
        NN = Val(arr(i))
        If NN > 0 And NN <= max Then tmp(i, NN) = symbol
    Next i
    SetX = tmp
End Function

Public Function GetX(arr, max As Integer) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (3 -> "","","x")
    Dim tmp() As String
    ReDim tmp(LBound(arr) To UBound(arr), 1 To 1)
    For i = LBound(arr) To UBound(arr)
        NN = NVal(arr(i))
        If NN > 0 And NN <= max Then tmp(i, NN) = symbol
    Next i
    SetX = tmp
End Function

Public Function CoolSort(SourceArr, ByVal n As Integer, Optional typ As Integer, Optional Ascending As Boolean = True, Optional ByVal n2 As Integer)
                                            addlog "START Function CoolSort"
'   |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| N
    On Error Resume Next
    
    Dim i As Long, j As Long, lb As Long, ub As Long
    Dim stack() As QuickStack, stackpos As Long, ppos As Long, pivot As Variant, pivot2 As Variant
    Dim IndArray() As Long
    If UBound(SourceArr) > 0 Then
        If n > UBound(SourceArr, 2) Or n < LBound(SourceArr, 2) Then
                                            addlog "END Function CoolSort (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!)"
            Exit Function
        End If
        
        If Not IsMissing(n2) Then
            If n2 > UBound(SourceArr, 2) Or n2 < LBound(SourceArr, 2) Then n2 = n
        End If
        
        Dim Check As Boolean, iCount As Integer, jCount As Integer, nCount As Integer
        
        On Error GoTo Er
    '   ReDim tmpArr(LBound(SourceArr) To UBound(SourceArr), LBound(SourceArr, 2) To UBound(SourceArr, 2)) As Variant
        tmparr = SourceArr
        ReDim IndArray(LBound(SourceArr) + 1 To UBound(SourceArr))
        For i = LBound(IndArray) To UBound(IndArray)
            IndArray(i) = i
        Next i
        
    
        ReDim stack(1 To 1024)
        stackpos = 1
    
        stack(1).Low = LBound(SourceArr) + 1
        stack(1).High = UBound(SourceArr)
        
    
        Do
            '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| lb |fffd| ub |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|.
    
            lb = stack(stackpos).Low
            ub = stack(stackpos).High
            stackpos = stackpos - 1
            Do
                '|fffd||fffd||fffd| 1. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| pivot
                ppos = (lb + ub) \ 2
                i = lb: j = ub: pivot = SourceArr(IndArray(ppos), n)
                If Not IsMissing(n2) Then pivot2 = SourceArr(IndArray(ppos), n2)
    
                Do
                    If typ = 1 Then
                        If IsMissing(n2) Then
                            Do While Val(SourceArr(IndArray(i), n)) < Val(pivot): i = i + 1: Loop
                            Do While Val(pivot) < Val(SourceArr(IndArray(j), n)): j = j - 1: Loop
                        Else
                            Do While Val(SourceArr(IndArray(i), n)) < Val(pivot) Or (Val(SourceArr(IndArray(i), n)) = Val(pivot) And Val(SourceArr(IndArray(i), n2)) < Val(pivot2)): i = i + 1: Loop
                            Do While Val(pivot) < Val(SourceArr(IndArray(j), n)) Or (Val(pivot) = Val(SourceArr(IndArray(j), n)) And Val(pivot2) < Val(SourceArr(IndArray(j), n2))): j = j - 1: Loop
                        End If
                    ElseIf typ = 2 Then
                        If IsMissing(n2) Then
                            Do While NVal(SourceArr(IndArray(i), n), 1) < NVal(pivot, 1): i = i + 1: Loop
                            Do While NVal(pivot, 1) < NVal(SourceArr(IndArray(j), n), 1): j = j - 1: Loop
                        Else
                            Do While NVal(SourceArr(IndArray(i), n), 1) < NVal(pivot, 1) Or (NVal(SourceArr(IndArray(i), n), 1) = NVal(pivot, 1) And Val(SourceArr(IndArray(i), n2)) < Val(pivot2)): i = i + 1: Loop
                            Do While NVal(pivot, 1) < NVal(SourceArr(IndArray(j), n), 1) Or (NVal(pivot, 1) = NVal(SourceArr(IndArray(j), n), 1) And Val(pivot2) < Val(SourceArr(IndArray(j), n2))): j = j - 1: Loop
                        End If
                    Else
                        If IsMissing(n2) Then
                            Do While SourceArr(IndArray(i), n) < pivot: i = i + 1: Loop
                            Do While pivot < SourceArr(IndArray(j), n): j = j - 1: Loop
                        Else
                            Do While SourceArr(IndArray(i), n) < pivot Or (SourceArr(IndArray(i), n) = pivot And Val(SourceArr(IndArray(i), n2)) < Val(pivot2)): i = i + 1: Loop
                            Do While pivot < SourceArr(IndArray(j), n) Or (pivot = SourceArr(IndArray(j), n) And Val(pivot2) < Val(SourceArr(IndArray(j), n2))): j = j - 1: Loop
                        End If
                    End If
                    
                    If i > j Then Exit Do
                    If IsMissing(n2) Then
                        If Not SourceArr(IndArray(i), n) = SourceArr(IndArray(j), n) Then
                            Swap IndArray(i), IndArray(j)
                        End If
                    Else
                        If Not SourceArr(IndArray(i), n) = SourceArr(IndArray(j), n) Or (SourceArr(IndArray(i), n) = SourceArr(IndArray(j), n) And SourceArr(IndArray(i), n2) <> SourceArr(IndArray(j), n2)) Then
                            Swap IndArray(i), IndArray(j)
                        End If
                    End If
                    i = i + 1
                    j = j - 1
                Loop While i <= j
    
                '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| i |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
                'j - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| lb ? j ? i ? ub.
                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| i |fffd||fffd||fffd| j |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                '|fffd||fffd||fffd||fffd| 2, 3. |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|  |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| lb,ub
    
                If i < ppos Then   '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                    If i < ub Then
                        stackpos = stackpos + 1
                        stack(stackpos).Low = i
                        stack(stackpos).High = ub
                    End If
                    ub = j        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                Else
                    If j > lb Then
                        stackpos = stackpos + 1
                        stack(stackpos).Low = lb
                        stack(stackpos).High = j
                    End If
                    lb = i
                End If
            Loop While lb < ub
        Loop While stackpos
        If Ascending Then
            For j = LBound(SourceArr, 2) To UBound(SourceArr, 2)
                For i = LBound(IndArray) To UBound(IndArray)
                    SourceArr(i, j) = tmparr(IndArray(i), j)
                Next i
            Next j
        Else
            For j = LBound(SourceArr, 2) To UBound(SourceArr, 2)
                For i = LBound(IndArray) To UBound(IndArray)
                    SourceArr(i, j) = tmparr(IndArray(UBound(IndArray) + LBound(IndArray) - i), j)
                Next i
            Next j
        End If
    End If

    CoolSort = SourceArr
                                            addlog "END Function CoolSort"
Exit Function
Er: ReDim Preserve stack(1 To UBound(stack) * 2)
    Resume
End Function

Private Sub Swap(a As Variant, b As Variant)
'Swap |fffd||fffd||fffd| QuickSort
Dim tmp As Variant
    tmp = a: a = b: b = tmp
End Sub


Public Function SetColl(arr) As Collection
    Dim coll As New Collection
    For i = LBound(arr) To UBound(arr)
        coll.Add i, arr(i)
    Next i
    Set SetColl = coll
End Function

Public Function RemuvC(Target, Index As Integer)
    If Index = 0 Then
        Target = Replace(Target, " ", "")
        Target = Replace(Target, ".", "")
        Target = Replace(Target, ",", "")
        Target = Replace(Target, ":", "")
        Target = Replace(Target, ";", "")
        Target = Replace(Target, Chr(10), "")
        Target = Replace(Target, Chr(13), "")
    ElseIf Index = 1 Then
        Target = Replace(Target, "[", "")
        Target = Replace(Target, "]", "")
        Target = Val(Target)
    ElseIf Index = 2 Then
        Target = Replace(Target, " ", "")
        Target = Replace(Target, ":", ";")
        Target = Replace(Target, ".", ";")
        Target = Replace(Target, ",", ";")
        Target = Replace(Target, Chr(10), "")
        Target = Replace(Target, Chr(13), "")
    ElseIf Index = 3 Then
        Target = Replace(Target, " ", "")
        Target = Replace(Target, ":", ";")
        Target = Replace(Target, ".", "")
        Target = Replace(Target, ",", "")
        Target = Replace(Target, Chr(10), "")
        Target = Replace(Target, Chr(13), "")
    Else
        RemuvC = Target
    End If
    RemuvC = Target
End Function



Public Sub CatchErr(number, description, line, vbname)
                                            addlog "START CatchErr #" & number
                                            addlog "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| -" & line
                                            addlog CStr(description)

'    If ThisWorkbook.VBProject.Protection = 1 Then
'        Application.EnableEvents = True
'        Application.ScreenUpdating = True
'        For Each objWindow In ActiveWorkbook.VBProject.VBE.Windows
'            If objWindow.Type = 6 Then
'                objWindow.Visible = True
'                objWindow.SetFocus
'                SendKeys "~123~", True: SendKeys "{ENTER}", True
'                ActiveWorkbook.Activate
'                ActiveWorkbook.VBProject.VBE.MainWindow.Visible = False
'                Exit For
'            End If
'        Next
'    End If

    If line > 0 And ThisWorkbook.VBProject.Protection = 0 Then
        na = ThisWorkbook.VBProject.VBComponents(vbname).CodeModule.ProcOfLine(line, 0)
                                            addlog "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| -" & vbname & "." & na
        na = ThisWorkbook.VBProject.VBComponents(vbname).CodeModule.Lines(line, 1)
                                            addlog "|fffd||fffd||fffd||fffd||fffd| """ & na & """"
    End If

    
    MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|! (|fffd|" & number & ")" & Chr(13) & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|." & Chr(13) & "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|", , "|fffd||fffd||fffd||fffd||fffd|!"
'    ThisWorkbook.Saved = True
    If Not errsave Then
        arr_save = Data.Range("save").Value
        Call Reg.ArrSave(arr_save, ThisWorkbook.path & "\" & "save", "save.txt", True)
        If Reg.ComboYear.text <> "" And Reg.ComboCode.text <> "" And Reg.ComboCodePEM.text <> "" And Reg.ComboMonth.text <> "" Then
            If arrE(0, 0) = arr_columnE(0) Then
                                                    addlog "CatchErr(Call Reg.ArrSave(arrT))"
                Call Reg.ArrSave(arrT, ThisWorkbook.path & "\" & FoldY & file_name, "T" & Reg.ComboCode.Value & "_" & Reg.ComboYear.text & "_" & Reg.ComboCodePEM.Value + ".txt")
                                                    addlog "CatchErr(Call Reg.ArrSave(arrI))"
                Call Reg.ArrSave(arrI, ThisWorkbook.path & "\" & FoldY & file_name, "I" & Reg.ComboYear.text + ".txt")
                                                    addlog "CatchErr(Call Rep.saveC)"
                Call Rep.saveC
            
                If arrNameComp(1, 0) = Reg.ComboCode.text Then Call Reg.ArrSave(arrNameComp, ThisWorkbook.path & "\" & FoldY & file_name, "CName" & Reg.ComboCode.Value + ".txt")
                
                                                        addlog "CatchErr(Call Reg.savepem)"
                Call Reg.savepem
                                                        addlog "CatchErr(Call Reg.savepem)"
                                                        
                Call Reg.ArrLoadReport(FoldY & file_name & "\" & "Report" & Reg.ComboCode.Value & "_" & Reg.ComboYear.text & ".txt")
                
                If (Val(Reg.Range("j8").Value) + Val(Reg.Range("j9").Value) + Val(Reg.Range("q8").Value) + Val(Reg.Range("q9").Value) + Val(WorksheetFunction.Sum(Reg.Range("As9:as12")))) <> WorksheetFunction.Sum(Reg.Range("AQ25:ax25")) Then
                    Call Reg.FormSAIDI(arrE, arrI, "1", KarrI)
                Else
                    Call Reg.FormSAIDI(arrE, arrI, "", KarrI)
                End If
    
                Call Reg.ArrSave(arrRep, ThisWorkbook.path & "\" & FoldY & file_name, "Report" & Reg.ComboCode.Value & "_" & Reg.ComboYear.text & ".txt")
                                                    addlog "CatchErr(Call Reg.ArrSave(arrE))"
                Call Reg.ArrSave(arrE, ThisWorkbook.path & "\" & FoldY & file_name, "ESI" & Reg.ComboCode.Value & "_" & Reg.ComboYear.text & "_" & Reg.ComboMonth.Value & "_" & Reg.ComboCodePEM.Value & ".txt")
                
                Call Reg.CreateBackup(FoldY & file_name)
            End If
        End If
    End If
                                            addlog "END CatchErr #" & number

    If Not FSO.FolderExists(ThisWorkbook.path & "\Errors") Then FSO.CreateFolder ThisWorkbook.path & "\Errors"
    FSO.CopyFolder ThisWorkbook.path & "\log", ThisWorkbook.path & "\Errors"
    Call Reg.CreateBackup("Errors")
    FSO.DeleteFolder ThisWorkbook.path & "\Errors"
    globsave = True
    ThisWorkbook.Close SaveChanges:=False
End Sub


Attribute VB_Name = "Module2"
Sub CheckFind()
Attribute CheckFind.VB_ProcData.VB_Invoke_Func = "k\n14"
    If ThisWorkbook.ActiveSheet.CodeName = "Reg" Then
        If (Union(Selection.Cells(1), Range("C26:C65000")).Address = Range("C26:C65000").Address) Then
            Reg.Range("B" & Selection.Row, "B" & Selection.Cells(Selection.Count).Row).Interior.ColorIndex = 0
            FormFindCheck.Show
        End If
    End If
End Sub

Sub CheckFindRU()
Attribute CheckFindRU.VB_ProcData.VB_Invoke_Func = "|fffd|\n14"
    Call CheckFind
End Sub
Attribute VB_Name = "ProgressIndicator"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'---------------------------------------------------------------------------------------
' Class Module      : ProgressIndicator
' |fffd||fffd||fffd||fffd||fffd|     : EducatedFool  (|fffd||fffd||fffd||fffd||fffd|)                    |fffd||fffd||fffd||fffd|: 23.10.2011
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| Excel, Word, CorelDRAW. |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.
' http://ExcelVBA.ru/          ICQ: 5836318           Skype: ExcelVBA.ru
' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: http://ExcelVBA.ru/payments
'---------------------------------------------------------------------------------------

Public FP As New F_Progress

Private SubActionIndex As Single, SubActionsCount As Single
Private FPVisible As Boolean, FPStartTime As Date, Position As Integer
Private PrS As Integer, PrE As Integer, Percent As Double

Public Parent As ProgressIndicator
Public ShowPercents As Boolean, ShowTime As Boolean

Function AddChildIndicator(ByVal Caption As String, Optional ByVal FPPosition As Integer = 1) As ProgressIndicator
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
    Set AddChildIndicator = New ProgressIndicator
    Set AddChildIndicator.Parent = Me
    AddChildIndicator.Show Caption, FPPosition
End Function

Private Sub Class_Initialize()
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set FP = New F_Progress: ShowPercents = True: FPVisible = True
    PrS = 0: PrE = 100: Set_ProgressBar 0: FP.PrBar.Caption = ""
    FPStartTime = Now: ShowTime = True: ShowPercents = True
End Sub

Sub Show(ByVal Caption As String, Optional ByVal FPPosition As Integer = 0)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd|
    SetProgressFormCaption Caption: On Error Resume Next:
    FP.PrBar.Width = ProgressBar_Default_Width
    Position = FPPosition
    FP.Tag = Caption: FP.Show:
    If Position <> 0 Then Move Position
    FP.Repaint: DoEvents
End Sub

Sub Hide()
    FP.Caption = ""
    Unload FP
    FPVisible = False
End Sub    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|

Sub Repaint()
    FP.Repaint: DoEvents
    If Application.ScreenUpdating = False Then
        Application.ScreenUpdating = True: Application.ScreenUpdating = False
    End If
End Sub

Sub Move(ByVal Position As Integer)    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Abs(Position) > 3 Then Exit Sub
    FP.Top = FP.Top + (FP.Height + 3) * Position
End Sub

Public Property Get Visible(): Visible = FPVisible: End Property

' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Property Let Line1(ByVal NewValue As String): FP.L1.Caption = ProcessLabel(NewValue): End Property
Public Property Let Line2(ByVal NewValue As String): FP.L2.Caption = ProcessLabel(NewValue): End Property
Public Property Let Line3(ByVal NewValue As String): FP.L3.Caption = ProcessLabel(NewValue): End Property
Public Property Let Caption(ByVal NewValue As String): SetProgressFormCaption NewValue: End Property

Private Sub SetProgressFormCaption(Optional ByVal Caption As String = "")
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd|
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
    If Len(Caption) > 0 Then FP.Tag = Caption
    txt = Trim(FP.Tag): If ShowPercents Then txt = Fix(Percent) & " %   " & txt
    dt = Format(Now - FPStartTime, "HH:NN:SS")
    If ShowTime Then txt = "( " & dt & " )    " & txt
    FP.Caption = txt
End Sub

Function TimeToFinish() As String
    If Percent < 15 Then Exit Function    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|...
    dt = (Now - FPStartTime) * (100 - Percent) / Percent
    TimeToFinish = IIf(Minute(dt) > 0, Minute(dt) & " |fffd||fffd|. ", "") & Second(dt) & " |fffd||fffd||fffd|."
    If dt < TimeSerial(0, 0, 1) Then TimeToFinish = "< 1 |fffd||fffd||fffd|."
    TimeToFinish = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & TimeToFinish
End Function

Sub SetFocus()    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    FP.Show 0: If Position <> 0 Then Move Position
End Sub

Private Sub UpdateLabels(Optional ByVal L1_txt$, Optional ByVal L2_txt$, Optional ByVal L3_txt$)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|)
    If L1_txt$ <> "" Then FP.L1.Caption = ProcessLabel(L1_txt$)
    If L2_txt$ <> "" Then FP.L2.Caption = ProcessLabel(L2_txt$)
    If L3_txt$ <> "" Then FP.L3.Caption = ProcessLabel(L3_txt$)
End Sub

Function ProcessLabel(ByVal txt As String) As String
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| txt |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    txt = Replace(txt, "$index", SubActionIndex)
    txt = Replace(txt, "$count", SubActionsCount)
    txt = Replace(txt, "$time", TimeToFinish)
    ProcessLabel = txt
End Function

Sub SubAction(Optional ByVal L1_txt$ = "", Optional ByVal L2_txt$ = "", Optional ByVal L3_txt$ = "")
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    SubActionIndex = SubActionIndex + 1
    If SubActionIndex > SubActionsCount Then SubActionIndex = SubActionsCount
    Percent = PrS + (PrE - PrS) * ((SubActionIndex - 1) / SubActionsCount)
    UpdateLabels L1_txt$, L2_txt$, L3_txt$
    Set_ProgressBar Percent: DoEvents
End Sub

Sub StartNewAction(Optional ByVal Pr_Start As Integer = 0, Optional ByVal Pr_End As Integer = 100, _
                   Optional ByVal L1_txt$ = "", Optional ByVal L2_txt$ = " ", Optional ByVal L3_txt$ = " ", _
                   Optional ByVal Actions_Count As Single = 0)
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| - |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Pr_Start % |fffd||fffd| Pr_End %
    ' |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Actions_Count |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    PrS = Pr_Start: PrE = Pr_End: SubActionIndex = 0: SubActionsCount = Actions_Count
    UpdateLabels L1_txt$, L2_txt$, L3_txt$
    Set_ProgressBar PrS
End Sub

Sub UpdateFromChild(ByVal ChildPercent As Double)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If SubActionsCount = 0 Then
        Percent = PrS + (PrE - PrS) * (ChildPercent / 100)
    Else
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, SubActionIndex = 3: SubActionsCount=10: PrS = 50: PrE = 100: ChildPercent=40
        ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd|.|fffd|. |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| 60 |fffd||fffd| 65, |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| 62
        Percent = PrS + (PrE - PrS) / SubActionsCount * (SubActionIndex - 1) + _
                  (PrE - PrS) / SubActionsCount * (ChildPercent / 100)
    End If
    Set_ProgressBar Percent
End Sub

Sub Set_ProgressBar(ByVal NewPercent As Double)
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Percent = NewPercent
    If NewPercent > 100 Then Percent = 100
    If NewPercent < 0 Then Percent = 0
    FP.PrBar.Width = Int(Percent * ProgressBar_Default_Width / 100)
    SetProgressFormCaption
    FP.Repaint
    If Not Parent Is Nothing Then Parent.UpdateFromChild Percent
End Sub
Function GetCurrentProgress() As Long    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If FP.PrBar.Width = 0 Then Exit Function
    GetCurrentProgress = FP.PrBar.Width / ProgressBar_Default_Width * 100
End Function

Private Sub Class_Terminate()    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Unload FP: FPVisible = False
End Sub

Function ProgressBar_Default_Width() As Double    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    ProgressBar_Default_Width = FP.Width - 18
End Function


Attribute VB_Name = "Rank"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "OptionButton2, 49, 13, MSForms, OptionButton"
Attribute VB_Control = "OptionButton1, 47, 15, MSForms, OptionButton"
Attribute VB_Control = "ComboSort, 46, 16, MSForms, ComboBox"
Attribute VB_Control = "Label8, 45, 17, MSForms, Label"
Attribute VB_Control = "LabelKls, 43, 18, MSForms, Label"
Attribute VB_Control = "LabelU, 42, 19, MSForms, Label"
Attribute VB_Control = "Label5, 41, 20, MSForms, Label"
Attribute VB_Control = "Label7, 40, 21, MSForms, Label"
Attribute VB_Control = "Label1, 29, 22, MSForms, Label"
Attribute VB_Control = "ComboCompany, 30, 23, MSForms, ComboBox"
Attribute VB_Control = "Label2, 31, 24, MSForms, Label"
Attribute VB_Control = "ComboCode, 32, 25, MSForms, ComboBox"
Attribute VB_Control = "Label3, 33, 26, MSForms, Label"
Attribute VB_Control = "Label4, 34, 27, MSForms, Label"
Attribute VB_Control = "ComboYear, 35, 28, MSForms, ComboBox"
Attribute VB_Control = "LabelPer, 36, 29, MSForms, Label"
Attribute VB_Control = "Label6, 37, 30, MSForms, Label"
Attribute VB_Control = "LabPEM, 38, 31, MSForms, Label"
Dim ranks()
Dim namef As String
Dim RanksNames()
Dim FoldY1 As String


Private Sub LabelKls_Click()
8     FormUKls.Show
End Sub

Private Sub LabelU_Click()
12     FormUKls.Show
End Sub

Private Sub OptionButton1_Change()
16     If OptionButton1.Value = True Then
17         ord = 1
18         Call sortDysp
19     End If
End Sub
Private Sub OptionButton2_Change()
22     If OptionButton2.Value = True Then
23         ord = 2
24         Call sortDysp
25     End If
End Sub


Private Sub Worksheet_Activate()
    On Error GoTo Errors

                                        addlog "START rank.Worksheet_Activate"
33     RanksNames = Array("|fffd| |fffd|/|fffd|", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|433||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd|. |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd| SAIDI |fffd| |fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd| SAIDI |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
34     Call SetColumnName(ranks, RanksNames)
35     Me.Range("A2:" & Me.Range("A2").Cells(1).Offset(UBound(ranks), UBound(RanksNames)).Address) = ranks
                                        
                                                                     
38     If (Me.ComboCode.Value = "" Or ComboCode.Value <> Reg.ComboCode.Value) And Reg.ComboCode.Value <> "" And divisions.Count > 0 Then
39         Rank.LabelPer.Caption = Reg.ComboMonth.text
40         For i = 0 To FormPeriod.ListBox1.ListCount - 1
41             FormPeriod.ListBox1.Selected(i) = False
42         Next i
43         FormPeriod.ListBox1.Selected(Val(Reg.ComboMonth.Value) - 1) = True
        
45         ReDim indexesU2(0 To 1)
46         ReDim indexesKls2(0 To 1)
47         indexesU2(0) = "z"
48         indexesU2(1) = 9
49         indexesKls2(1) = 7
50         Rank.LabelKls.Caption = FormUKls.ListBox1.List(0)
51         Rank.LabelU.Caption = FormUKls.ListBox2.List(0)
52         FormUKls.ListBox1.ListIndex = 0
53         FormUKls.ListBox2.ListIndex = 0
        
55         FormUKls.ListBox1.Selected(0) = True
56         FormUKls.ListBox2.Selected(0) = True
57         If Reg.ComboCodePEM.text <> "" Then
58             ReDim PEMsel2(0 To 1): PEMsel2(1) = Reg.ComboCodePEM.Value
59             ReDim Msel2(0 To 1): Msel2(1) = Val(Reg.ComboMonth.Value) - 1
60         End If
    
62         firstacn = True
63         Me.ComboCode.Value = Reg.ComboCode.Value
64         Me.ComboCompany.Value = Reg.ComboCompany.Value
65         Me.ComboYear.Value = Reg.ComboYear.Value
66         firstacn = False
        
68         Call listPEM(1)
69         head = "B3"
70         ord = 1
71         FormPem.CheckCompany.Value = True
72         Call FormPem.ButtonOk_Click
73     ElseIf (ComboCode.Value = "" And Reg.ComboCode.Value = "") Or divisions.Count = 0 Then
74         Call listPEM
75         head = "B3"
76         ord = 1
77     Else
78         Call listPEM
79         For i = 0 To FormPem.ListBox1.ListCount - 1
80             For j = 1 To UBound(PEMsel2)
81                 If FormPem.ListBox1.List(i, 0) = PEMsel2(j) Then FormPem.ListBox1.Selected(i) = True
82             Next j
83         Next i
84         For i = 0 To FormPeriod.ListBox1.ListCount - 1
85             FormPeriod.ListBox1.Selected(i) = False
86         Next i
87         For i = 1 To UBound(Msel2)
88             FormPeriod.ListBox1.Selected(Val(Msel2(i))) = True
89         Next i
        
91         For i = 0 To FormUKls.ListBox1.ListCount - 1
92             FormUKls.ListBox1.Selected(i) = False
93         Next i
94         For i = 0 To FormUKls.ListBox2.ListCount - 1
95             FormUKls.ListBox2.Selected(i) = False
96         Next i
        
98         For i = 1 To UBound(indexesU2)
99             If indexesU2(i) = 9 Then FormUKls.ListBox1.ListIndex = 0: FormUKls.ListBox1.Selected(0) = True: Exit For
100             FormUKls.ListBox1.ListIndex = Val(indexesU2(i) + 2)
101             FormUKls.ListBox1.Selected(Val(indexesU2(i) + 2)) = True
102         Next i
        
104         For i = 1 To UBound(indexesKls2)
105             aa = IIf(indexesKls2(i) = 7, 0, Val(indexesKls2(i)))
106             FormUKls.ListBox2.ListIndex = aa
107             FormUKls.ListBox2.Selected(aa) = True
108         Next i
        
110         Call FormUKls.CommandOk_Click
        
112     End If

                                        addlog "END rank.Worksheet_Activate"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Sub LabelPer_Click()
120     FormPeriod.Show
End Sub

Private Sub LabPEM_Click()
124     tmp_rep = PEMsel2
125     FormPem.Show
End Sub



Private Sub ComboCode_Click() '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error GoTo Errors
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        
'    null
136     If Not NVal(ComboCompany.Value) = NVal(ComboCode.Value) And Not firstacn Then
                                            addlog "START Private Sub Rank.ComboCode_Click"
138         FormPem.CheckCompany.Value = False
139         ComboCompany.Value = ComboCode.Value
140         Call listPEM
141         Rank.LabPEM.Caption = ""
142         Rank.Range("a3:j" & 3 + Rank.UsedRange.Rows.Count).ClearContents
143         If divisionsRank.Count > 0 Then
144             FormPem.CheckCompany.Value = True
145             Call FormPem.ButtonOk_Click
146         End If
                                            addlog "END Private Sub Rank.ComboCode_Click"
148     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Sub ComboYear_Click()
    On Error GoTo Errors
155     If FoldY <> "" Then FoldY = Rank.ComboYear.Value & "\"
156     If Not firstacn Then
                                            addlog "START Private Sub Rank.ComboYear_Change"
        
159         Call listPEM
160         For i = 0 To FormPem.ListBox1.ListCount - 1
161             For j = 1 To UBound(PEMsel)
162                 If FormPem.ListBox1.List(i, 0) = PEMsel(j) Then FormPem.ListBox1.Selected(i) = True
163             Next j
164         Next i
165         Call FormPem.ButtonOk_Click
                                            addlog "END Private Sub Rank.ComboYear_Change"
167     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName) '        ret = EnableEvents("ComboCode_Click", ret)
End Sub


Private Sub ComboCompany_Click() '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error GoTo Errors
175     If Not NVal(ComboCompany.Value) = NVal(ComboCode.Value) And Not firstacn Then
                                            addlog "START Private Sub Rank.ComboCompany_Click"
177         FormPem.CheckCompany.Value = False
178         ComboCode.Value = ComboCompany.Value
179         Call listPEM
180         Rank.LabPEM.Caption = ""
181         Rank.Range("a3:j" & 3 + Rank.UsedRange.Rows.Count).ClearContents
182         If divisionsRank.Count > 0 Then
183             FormPem.CheckCompany.Value = True
184             Call FormPem.ButtonOk_Click
185         End If
                                            addlog "END Private Sub Rank.ComboCompany_Click"
187     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub


Private Sub listPEM(Optional activ As Integer)
    On Error GoTo Errors
195     Set divisionsRank = CreateObject("Scripting.Dictionary")
    Dim arrDicItems
    Dim arrDicKeys
198     divisionsRank.RemoveAll
199     Call FormNamef
200     If Rank.ComboCode.Value = Reg.ComboCode.Value And Rank.ComboYear.Value = Reg.ComboYear.Value Then
201         If divisions.Count > 0 Then
202             arrDicItems = divisions.items
203             arrDicKeys = divisions.keys
204             For i = 0 To divisions.Count - 1
205                 divisionsRank.Add arrDicKeys(i), arrDicItems(i)
206             Next i
207         End If
208     Else
209         arr_columnPEM = Array("KodCompany", "NamePEM", "KodPEM")
210         tmp_arr = Reg.ArrLoad(FoldY1 & namef & "\" & "PEM" & Rank.ComboCode.Value & ".txt", arr_columnPEM)
211         colK = ArrFind(arr_columnPEM, "KodPEM")
212         colN = ArrFind(arr_columnPEM, "NamePEM")
213         For i = 1 To UBound(tmp_arr)
214             divisionsRank.Add tmp_arr(i, colK), tmp_arr(i, colN)
215         Next i
216         FormPem.TextBox1.Value = ""
                
218     End If

220     If activ > 0 And Reg.ComboCode.text <> "" Then
221         FormPem.CheckCompany.Caption = Data.Range("D1:D44").Cells(Data.Range("kods").Find(Reg.ComboCode.text).Row).Value
222     ElseIf activ = 0 And Rank.ComboCode.text <> "" Then FormPem.CheckCompany.Caption = Data.Range("D1:D44").Cells(Data.Range("kods").Find(Rank.ComboCode.text).Row).Value
223     End If
224     FormPem.ListBox1.Clear
225      If divisionsRank.Count > 0 Then
226         arrDicItems = divisionsRank.items
227         arrDicKeys = divisionsRank.keys
228         For i = 0 To divisionsRank.Count - 1
229             FormPem.ListBox1.AddItem ""
230             FormPem.ListBox1.List(i, 0) = arrDicKeys(i)
231             FormPem.ListBox1.List(i, 1) = arrDicItems(i)
232         Next i
233         If activ > 0 And Reg.ComboCodePEM.ListIndex >= 0 Then FormPem.ListBox1.Selected(Reg.ComboCodePEM.ListIndex) = True
234     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub


Private Sub FormNamef()
    On Error GoTo Errors
242     If FoldY <> "" Then FoldY1 = Rank.ComboYear.Value & "\"
243     namef = "EI_" & Rank.ComboYear.Value & "_" & Rank.ComboCode.Value
244     Set folder1 = FSO.GetFolder(ThisWorkbook.path & "\" & FoldY1)
245     If Reg.CheckBoxCheck.Value Then
246         For Each File In folder1.Files
247             If Left(File.Name, 13) = namef And Mid(File.Name, Len(File.Name) - 4, 1) = "+" Then namef = Left(File.Name, Len(File.Name) - 4): Exit For
248         Next
249     Else
250         For Each File In folder1.Files
251             If Left(File.Name, 13) = namef And Not Mid(File.Name, Len(File.Name) - 4, 1) = "+" Then namef = Left(File.Name, Len(File.Name) - 4): Exit For
252         Next
253     End If
254     If FSO.FileExists(ThisWorkbook.path & "\" & FoldY1 & namef & ".rar") And Not FSO.FolderExists(ThisWorkbook.path & "\" & FoldY1 & namef) Then
255         Call Reg.UnpackBackup(FoldY1 & namef)
256     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub


Public Sub FormDyspIndexes()
    On Error GoTo Errors
                                        addlog "START rank.FormDyspIndexes"
    Dim pi As New ProgressIndicator

    Dim arrname() As String
    Dim tmp_f() As String
    Dim tmp_arrE() As String
    Dim arrdysp() As String
    Dim DyspNames As Collection
    Dim ranksTr()
    Dim MultiAll() As Long
274     Set DyspNames = New Collection
    Dim saidis()
276     Rank.Range("a3:i" & 3 + Rank.UsedRange.Rows.Count).ClearContents
277     If (Not Not PEMsel2) = 0 Then Exit Sub
278     colType = ArrFind(arr_columnE, "Type")
279     colDname = ArrFind(arr_columnE, "Dname")
280     colDur = ArrFind(arr_columnE, "Dur")
281     colN04m = ArrFind(arr_columnE, "N04m")
282     colN04s = ArrFind(arr_columnE, "N04s")
283     colN6m = ArrFind(arr_columnE, "N6m")
284     colN6s = ArrFind(arr_columnE, "N6s")
285     colN35 = ArrFind(arr_columnE, "N35")
286     colN110 = ArrFind(arr_columnE, "N110")
287     colU = ArrFind(arr_columnE, "U")
288     colK = ArrFind(arr_columnE, "K")
289     colErr = ArrFind(arr_columnE, "Error")
290     cMultiM = ArrFind(arr_columnE, "MultiM")

    
293     Call SetColumnName(ranks, RanksNames)
'    helpcol = ArrFind(RanksNames, " ")
295     sncol = ArrFind(RanksNames, "|fffd| |fffd|/|fffd|")
296     kodremKol = ArrFind(RanksNames, "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
297     namecol = ArrFind(RanksNames, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
298     ucol = ArrFind(RanksNames, "|433||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
299     numcol = ArrFind(RanksNames, "|fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
300     timecol = ArrFind(RanksNames, "|fffd||fffd||fffd|. |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
301     custcol = ArrFind(RanksNames, "|fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
302     sPEMcol = ArrFind(RanksNames, "|fffd||fffd||fffd||fffd||fffd||fffd| SAIDI |fffd| |fffd||fffd||fffd|")
303     sComcol = ArrFind(RanksNames, "|fffd||fffd||fffd||fffd||fffd||fffd| SAIDI |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
304     pemcol = ArrFind(arr_columnRep, "KodPEM")
305     monthcol = ArrFind(arr_columnRep, "Month")
    
    
308     ranksTr = TransposeArray(ranks)
309     ReDim MultiAll(0 To 0)
310     tmp_arr = Array("110-154 |fffd||fffd|", "27,5-35 |fffd||fffd|", "6-20 |fffd||fffd|", "0,4 |fffd||fffd|")
311     Call Reg.ArrLoadReport(FoldY1 & namef & "\" & "Report" & Rank.ComboCode.text & "_" & Rank.ComboYear.text & ".txt")
312     Set folder1 = FSO.GetFolder(ThisWorkbook.path & "\" & FoldY1 & namef) 'years
313     tmp_arr1 = Array("I_kv", "II_kv", "III_kv", "IV_kv")
314     column = ArrFind(arr_columnRep, "SAIDI1")
    
    
317     ReDim saidis(0 To UBound(PEMsel2))

319     For w = 1 To UBound(arrRep) Step 9
320         If Not IsNull(ArrFind(tmp_arr1, arrRep(w, monthcol))) Then GoTo nextw
321         For m = 1 To UBound(indexesU2)
322             For i = 1 To UBound(indexesKls2)
323                 If FormPeriod.ListBox1.Selected(Val(arrRep(w, monthcol) - 1)) Then
324                     saidis(0) = NVal(saidis(0)) + NVal(arrRep(w + indexesU2(m) - 1, column + indexesKls2(i) - 1))
325                     For j = 1 To UBound(PEMsel2)
326                         If PEMsel2(j) = arrRep(w, pemcol) Then
327                             saidis(j) = NVal(saidis(j)) + NVal(arrRep(w + indexesU2(m) - 1, column + indexesKls2(i) - 1))
                            Exit For
329                         End If
330                     Next j
331                 End If
332             Next i
333         Next m
334 nextw:
335     Next w
            
337     n = 0
338     For Each File In folder1.Files
339         tmpf = Split(File.Name, ".")
340         If Left(tmpf(0), 3) = "ESI" Then
341             tmpe = Split(tmpf(0), "_")
342             For i = 1 To UBound(PEMsel2)
343                 For j = 1 To UBound(Msel2)
344                     If tmpe(3) = PEMsel2(i) And Val(tmpe(2)) = Msel2(j) + 1 Then
345                         n = n + 1
346                     End If
347                 Next j
348             Next i
349         End If
350     Next
    
352     If n > 60 Then
353         pi.Show "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|": pi.ShowPercents = True
354         pi.StartNewAction 0, 100, , , , n
355     End If
        
357     For Each File In folder1.Files
358         If Left(File.Name, 3) <> "ESI" Then GoTo nextf
359         arrname = Split(File.Name, ".")
360         tmp_f = Split(arrname(0), "_")
        
362         If n > 60 Then
363             pi.SubAction "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|: " & namef & "\" & File.Name & " ($index |fffd||fffd| $count)"
364             pi.Line2 = "$time"
365         End If
        
367         For j = 1 To UBound(PEMsel2)
368             If tmp_f(3) = PEMsel2(j) And FormPeriod.ListBox1.Selected(Val(tmp_f(2)) - 1) Then
369                 tmp_arrE = Reg.ArrLoad(FoldY1 & namef & "\" & File.Name, arr_columnE)
370                 For i = LBound(tmp_arrE) + 1 To UBound(tmp_arrE, 1)
371                     If Trim(tmp_arrE(i, colDname)) = "" Then GoTo nextE
372                     If tmp_arrE(i, colErr) = "1" Or tmp_arrE(i, colErr) = "2" Or tmp_arrE(i, colType) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then GoTo nextE
373                     aa = 0
374                     If indexesKls2(1) = 7 Then
375                         aa = 1
376                     Else
377                         For m = 1 To UBound(indexesKls2)
'                            If tmp_arrE(i, colK1 + indexesKls2(m) - 1) <> "" Then aa = 1: Exit For
379                             If indexesKls2(m) = Val(tmp_arrE(i, colK)) Then aa = 1: Exit For
380                         Next m
381                     End If
382                     If aa = 0 Then GoTo nextE
                    
384                     aa = 0
385                     If indexesU2(1) = 9 Then
386                         aa = 1
387                     Else
388                         For m = 1 To UBound(indexesU2)
389                             Select Case indexesU2(m)
                                Case 1, 2
'                                    If tmp_arrE(i, colU1 + indexesU2(m) - 1) <> "" Then aa = 1: Exit For
392                                     If indexesU2(m) = Val(tmp_arrE(i, colU)) Then aa = 1: Exit For
                                Case 3, 4, 5
'                                    If tmp_arrE(i, colU1 + 2) <> "" Then aa = 1: Exit For
395                                     If Val(tmp_arrE(i, colU)) = 3 Then aa = 1: Exit For
                                Case 6, 7, 8
397                                     If Val(tmp_arrE(i, colU)) = 4 Then aa = 1: Exit For
398                             End Select
399                         Next m
400                     End If
401                     If aa = 0 Then GoTo nextE
                    
                    
404                     If Not Contains(DyspNames, tmp_f(3) & tmp_arrE(i, colDname)) Then
405                         Select Case indexesU2(0)
                            Case "z"
407                                 Cust = Val(tmp_arrE(i, colN04m)) + Val(tmp_arrE(i, colN04s)) + Val(tmp_arrE(i, colN6m)) + Val(tmp_arrE(i, colN6s)) + Val(tmp_arrE(i, colN35)) + Val(tmp_arrE(i, colN110))
408                                 multi = Val(tmp_arrE(i, cMultiM)) + Val(tmp_arrE(i, cMultiM + 1))
                            Case "m"
410                                 Cust = Val(tmp_arrE(i, colN04m)) + Val(tmp_arrE(i, colN6m)) + Val(tmp_arrE(i, colN35)) + Val(tmp_arrE(i, colN110))
411                                 multi = Val(tmp_arrE(i, cMultiM))
                            Case "c"
413                                 Cust = Val(tmp_arrE(i, colN04s)) + Val(tmp_arrE(i, colN6s))
414                                 multi = Val(tmp_arrE(i, cMultiM + 1))
415                         End Select
416                         If Cust = 0 Then GoTo nextE
                        
418                         ReDim Preserve ranksTr(0 To UBound(ranksTr), 0 To UBound(ranksTr, 2) + 1)
419                         ReDim Preserve MultiAll(0 To UBound(MultiAll) + 1)
                        
421                         DyspNames.Add UBound(ranksTr, 2), tmp_f(3) & tmp_arrE(i, colDname)
422                         ranksTr(namecol, UBound(ranksTr, 2)) = tmp_arrE(i, colDname)
423                         ranksTr(ucol, UBound(ranksTr, 2)) = tmp_arr(Val(tmp_arrE(i, colU)) - 1)
424                         col = UBound(ranksTr, 2)
425                         ranksTr(custcol, col) = Cust
426                         ranksTr(kodremKol, col) = divisionsRank(tmp_f(3))
427                         ranksTr(sncol, col) = col
428                         MultiAll(UBound(MultiAll)) = multi

                        
431                     Else
432                         col = DyspNames(tmp_f(3) & tmp_arrE(i, colDname))
433                         Select Case indexesU2(0)
                            Case "z"
435                                 multi = Val(tmp_arrE(i, cMultiM)) + Val(tmp_arrE(i, cMultiM + 1))
                            Case "m"
437                                 multi = Val(tmp_arrE(i, cMultiM))
                            Case "c"
439                                 multi = Val(tmp_arrE(i, cMultiM + 1))
440                         End Select
441                         MultiAll(col) = MultiAll(col) + multi
442                     End If
                    
444                     ranksTr(numcol, col) = Val(ranksTr(numcol, col)) + 1
445                     ranksTr(timecol, col) = Val(ranksTr(timecol, col)) + NDbl(tmp_arrE(i, colDur))
446                     If saidis(j) <> 0 Then ranksTr(sPEMcol, col) = MultiAll(col) / saidis(j)
447                     If saidis(0) <> 0 Then ranksTr(sComcol, col) = MultiAll(col) / saidis(0)

449 nextE:
450                 Next i
451             End If
452         Next j
453 nextf:
454     Next
455     If n > 60 Then pi.Hide

457     ranks = TransposeArray(ranksTr)
458     Me.Range("A2:" & Me.Range("A2").Offset(UBound(ranks), UBound(RanksNames)).Address) = ranks
                                                    addlog "END rank.FormDyspIndexes"
    
    
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub


Public Sub sortDysp()
    On Error GoTo Errors
469     Rank.Range("B2:i" & 3 + Rank.UsedRange.Rows.Count).Sort Key1:=Range(head), Order1:=ord, Header:=xlGuess, _
        OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom, DataOption1:=xlSortNormal
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Sub ComboSort_Change()
    On Error GoTo Errors
'    Dim ret As Boolean
'    ret = EnableEvents("ComboSort_Change")
479     Select Case Rank.ComboSort.ListIndex
        Case 0
481             head = "B3"
        Case 1
483             head = "C3"
        Case 2
485             head = "d3"
        Case 3
487             head = "e3"
        Case 4
489             head = "f3"
        Case 5
491             head = "g3"
        Case 6
493             head = "h3"
        Case 7
495             head = "i3"
496     End Select
497     Call sortDysp
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
503     ThisWorkbook.Saved = True '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
End Sub


Public Function TransposeArray(arr)
    On Error GoTo Errors
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
   Dim tempArray()
511     ReDim tempArray(LBound(arr, 2) To UBound(arr, 2), LBound(arr, 1) To UBound(arr, 1))
512     For X = LBound(arr, 2) To UBound(arr, 2)
513         For Y = LBound(arr, 1) To UBound(arr, 1)
514             tempArray(X, Y) = arr(Y, X)
515         Next Y
516     Next X
517     TransposeArray = tempArray
    Exit Function
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Function
Attribute VB_Name = "Reg"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "Label1, 13320, 0, MSForms, Label"
Attribute VB_Control = "ComboMonth, 13323, 1, MSForms, ComboBox"
Attribute VB_Control = "Label2, 13324, 2, MSForms, Label"
Attribute VB_Control = "ComboYear, 13325, 3, MSForms, ComboBox"
Attribute VB_Control = "Label4, 13336, 4, MSForms, Label"
Attribute VB_Control = "ComboPEM, 13337, 5, MSForms, ComboBox"
Attribute VB_Control = "Label5, 13339, 6, MSForms, Label"
Attribute VB_Control = "ComboCodePEM, 13340, 7, MSForms, ComboBox"
Attribute VB_Control = "Label3, 13332, 8, MSForms, Label"
Attribute VB_Control = "ComboCompany, 13334, 9, MSForms, ComboBox"
Attribute VB_Control = "Label6, 13345, 10, MSForms, Label"
Attribute VB_Control = "ComboCode, 13346, 11, MSForms, ComboBox"
Attribute VB_Control = "CommandButton2, 16458, 12, MSForms, CommandButton"
Attribute VB_Control = "CommandButton3, 16461, 13, MSForms, CommandButton"
Attribute VB_Control = "Image1, 17124, 14, MSForms, Image"
Attribute VB_Control = "Image2, 17239, 15, MSForms, Image"
Attribute VB_Control = "CommandButton1, 17392, 16, MSForms, CommandButton"
Attribute VB_Control = "Label7, 17405, 17, MSForms, Label"
Attribute VB_Control = "ComboSort, 17406, 18, MSForms, ComboBox"
Attribute VB_Control = "CheckPass, 17444, 19, MSForms, CheckBox"
Attribute VB_Control = "CheckBlock, 17445, 20, MSForms, CheckBox"
Attribute VB_Control = "Image3, 17447, 21, MSForms, Image"
Attribute VB_Control = "CheckBoxCheck, 17450, 23, MSForms, CheckBox"
Dim k As Integer
Dim KOD, kodPEM As String
Dim teh As Boolean
Dim revisionteh As Boolean
Dim notsort As Boolean
Dim arrTerror
Dim arrEcount, arrTcount, arrEFormat, arrTFormat As Integer
Dim DicBlock

Private Sub CheckBlock_Change()
    On Error GoTo Errors
12     If Not firstacn Then
                                                addlog "START Private Sub CheckBlock_Change"
14         blockcol = ArrFind(arr_columnC, "Block")
15         kodpemcol = ArrFind(arr_columnC, "KodPEM")
16         For i = 1 To UBound(arrC) Step 12
17             If arrC(i, kodpemcol) = Reg.ComboCodePEM.Value Then
18                 arrC(i + Val(Reg.ComboMonth.Value) - 1, blockcol) = IIf(CheckBlock.Value = False, "", 1)
19                 sheetChanged = True
                Exit For
21             End If
22         Next i
23         Call LockTarget(Reg.Range("A26:Ad" & Reg.UsedRange.Rows.Count), , CheckBlock.Value)
24         If CheckBlock = True Then
25             If Reg.Image1.Visible = True Then Reg.Image1.Visible = False
26             If Reg.Image2.Visible = True Then Reg.Image2.Visible = False
27         End If
                                                addlog "END Private Sub CheckBlock_Change"
29     End If
    Exit Sub
Errors:     Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub


Private Sub CheckBoxCheck_Click()
    On Error GoTo Errors
37     If Not firstacn Then
                                            addlog "START CheckBoxCheck_Click"
        Dim ret As Boolean
40         ret = EnableEvents("CheckBoxCheck_Click")
41         If CheckBoxCheck.Value Then
42             Set DicCheck = CreateObject("Scripting.Dictionary")
             
44             Call query
            
46             If FSO.FileExists(ThisWorkbook.path & "\" & FoldY & file_name & "+" & ".rar") Then
47                 Call Reg.UnpackBackup(FoldY & file_name & "+")
48                 file_name = file_name & "+"
49                 Call arrloadold(1, 1)
50             Else
51                 If FSO.FileExists(ThisWorkbook.path & "\" & FoldY & file_name & ".rar") Then
52                     Call Reg.UnpackBackup(FoldY & file_name, FoldY & file_name & "+")
53                     sheetChanged = True
54                     file_name = file_name & "+"
55                     arrE = PrepareOld(arrE)
56                     Call Reg.ArrSave(arrE, ThisWorkbook.path & "\" & FoldY & file_name, "ESI" & Reg.ComboCode.Value & "_" & Reg.ComboYear.text & "_" & Reg.ComboMonth.Value & "_" & Reg.ComboCodePEM.Value & ".txt")
57                     arrEold = arrE
58                     arrIold = arrI
59                 Else
60                     firstacn = True
61                     Reg.CheckBoxCheck.Value = False
62                     firstacn = False
63                     mm = MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| """ & file_name & ".rar""", vbInformation)
64                     ret = EnableEvents("CheckBoxCheck_Click", ret): Exit Sub
65                 End If
66             End If
67             Reg.Columns("H:H").ColumnWidth = 9.2
68             idCheck = ArrLoad(FoldY & file_name & "\" & "idCheck.txt", Array("IdKey", "Check"))
69             If UBound(idCheck) > 0 Then
70                 For i = 1 To UBound(idCheck)
71                     DicCheck.Add idCheck(i, 0), idCheck(i, 1)
72                 Next i
73             End If
74             ThisWorkbook.Unprotect ("test")
75             Check.Visible = xlSheetVisible
76             ThisWorkbook.Protect ("test")
77             If CheckBlock.Value Then CheckBlock.Value = False
78             CheckPass.Value = True
79         Else
80             ThisWorkbook.Unprotect ("test")
81             Check.Visible = xlSheetVeryHidden
82             ThisWorkbook.Protect ("test")
83             Call query
84             file_name = Replace(file_name, "+", "")
85             Reg.Range("a26:ad" & Reg.UsedRange.Rows.Count).ClearComments
86         End If
87         isCheck = Reg.CheckBoxCheck.Value
88         Call ArrLoadI(FoldY & file_name & "\" & "I" & CStr(Data.Range("year").Value) + ".txt")
89         Call SetRangI
90         Call ArrLoadE(FoldY & file_name & "\" & "ESI" & CStr(Data.Range("kod").Value) & "_" & CStr(Data.Range("year").Value) & "_" & Reg.ComboMonth.Value & "_" & Data.Range("pemkod").Value & ".txt")
91         Call SetRangE
92         Reg.Columns("H:H").EntireColumn.hidden = Not Reg.CheckBoxCheck.Value
93         ret = EnableEvents("CheckBoxCheck_Click", ret)
                                            addlog "END CheckBoxCheck_Click"
95     End If
    Exit Sub
Errors:     Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Function PrepareOld(arr)
101     tmp = DeleteBlankRows(arr, 0, 1)
102     cIdKey = ArrFind(arr_columnE, "IdKey")
103     For i = 1 To UBound(tmp)
104         If tmp(i, cIdKey) = "" Then tmp(i, cIdKey) = "@" & Val(CDbl(Now) * 10000) & Int(99999 * Rnd)
105     Next i
106     PrepareOld = tmp
End Function

Private Sub CheckPass_Change()
    On Error GoTo Errors
111     If Not firstacn Then
                                            addlog "START Private Sub CheckPass_Change"

114         If Not CheckBoxCheck.Value Then
115             pp = InputBox("|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
116             If pp = "" And Passw = "" Then
117                 Call MsgPass
                Exit Sub
119             End If
120             If Passw = "" And CheckPass.Value = True Then
121                 Passw = pp
                pp1 = InputBox("|fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
                If CStr(pp1) <> Passw Then Call MsgPass("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"): Exit Sub
122                 GoTo ppp

126             ElseIf CheckPass.Value = False And Passw <> pp Then
127                 Call MsgPass("|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
            ElseIf Passw = CStr(pp) And CheckPass.Value = False Then
                MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|"
                pp = ""
                Passw = ""
141 ppp:
                        Dim tmp_arr1
144                         tm = ""
                        If pp <> "" Then

143                         ReDim tmp_arr1(1 To Len(Passw))
145                             For i = 1 To UBound(tmp_arr1)
146                                 tmp_arr1(i) = Asc(Mid(Passw, i, 1))
147                                 If Len(tmp_arr1(i)) = 2 Then tmp_arr1(i) = "0" & tmp_arr1(i)
148                                 tm = tm & tmp_arr1(i)
149                             Next i
                        End If
150                         arrI(KarrI + 5, ArrFind(arr_columnI, "LEP")) = tm
151                         Call Reg.ArrSave(arrI, ThisWorkbook.path & "\" & FoldY & file_name, "I" & Reg.ComboYear.text + ".txt")
152                         Call Reg.CreateBackup(FoldY & file_name)
155             End If
156         End If
157         Call LockTarget(Reg.Range("AF26:AY" & Reg.UsedRange.Rows.Count), , CheckPass.Value)
158         Call LockTarget(Reg.Range("Ut"), , CheckPass.Value)
159         Call LockTarget(Reg.Range("j8:p9"), , CheckPass.Value)
160         Call LockTarget(Reg.Range("Nzag4"), , CheckPass.Value)
161         Call LockTarget(Reg.Range("s8:u9"), , CheckPass.Value)
162         Call LockTarget(Reg.Range("AS9:At12"), , CheckPass.Value)
163         Call LockTarget(Reg.Range("aq9:ar12"), , CheckPass.Value)
164         Call LockTarget(Reg.Range("y8:aa9"), , CheckPass.Value)
        
                                            addlog "END Private Sub CheckPass_Change"
167     End If
    Exit Sub
Errors:     Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Sub MsgPass(Optional text)
173     If Not IsMissing(text) Then MsgBox text
174     firstacn = True
175         CheckPass.Value = Not CheckPass.Value
176     firstacn = False
End Sub

Private Sub ComboCode_DropButtonClick()
180     Call query
End Sub

Private Sub ComboCodePEM_DropButtonClick()
184     Call query
End Sub


Private Sub ComboCompany_DropButtonClick()
189     Call query
End Sub

Private Sub ComboMonth_Click()
    On Error GoTo Errors
194     If Not ComboMonth.text = Data.Range("month").Value And Not Inddbl Then
                                            addlog "START Private Sub ComboMonth_Click"
                                            
        Dim ret As Boolean
198         ret = EnableEvents("ComboMonth_Click")
199         Data.Range("month").Value = ComboMonth.text
                                            addlog "ComboMonth_Click (Call ArrLoadE)"
201         Call ArrLoadE(FoldY & file_name & "\" & "ESI" & Reg.ComboCode.Value & "_" & CStr(Data.Range("year").Value) & "_" & Reg.ComboMonth.Value & "_" & Reg.ComboCodePEM.Value & ".txt")
                                            addlog "ComboMonth_Click (Call SetRangE)"
203         If isCheck Then
204             Call arrloadold(1)
205         End If
                                     
207         Call SetRangE
                                            addlog "ComboMonth_Click (Call SetRangC)"
209         Call SetRangC
210         ret = EnableEvents("ComboMonth_Click", ret)
                                            addlog "END Private Sub ComboMonth_Click"
212     End If

    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub




Private Sub query()
    On Error GoTo Errors
    Dim ret As Boolean
224     If sheetChanged = True Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
225         sheetChanged = False
226         qqq = MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| """ & file_name & ".rar"" ?", vbYesNo) '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
227         If qqq = vbYes Then
228             ret = Application.EnableEvents
229             If Not ret Then Application.EnableEvents = True
230             ThisWorkbook.Save
231             If Not ret Then Application.EnableEvents = False
232         Else
233             If isCheck Then
234                 Set DicCheck = CreateObject("Scripting.Dictionary")
235                 idCheck = ArrLoad(FoldY & file_name & "\" & "idCheck.txt", Array("IdKey", "Check"))
236                 If UBound(idCheck) > 0 Then
237                     For i = 1 To UBound(idCheck)
238                         DicCheck.Add idCheck(i, 0), idCheck(i, 1)
239                     Next i
240                 End If
241             End If
242             ret = EnableEvents("query")
243             Call Reg.openArch
244             ret = EnableEvents("query", ret)
245         End If
246     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Sub ComboMonth_DropButtonClick()
252     Call query
End Sub

Private Sub ComboPEM_DropButtonClick()
256     Call query
End Sub

Private Sub ComboSort_Change()
    On Error GoTo Errors
                                            addlog "START Private Sub ComboSort_Change"
262     If Not notsort Then
        Dim ret As Boolean
264         ret = EnableEvents("ComboSort_Change")
265         Select Case Reg.ComboSort.ListIndex
            Case 0
267                 col = ArrFind(arr_columnE, "Num")
268                 arrE = CoolSort(arrE, col, 1)
269                 arrE = Reg.DeleteBlankRows(arrE, 0, 1)
270                 Call SetRangE
            Case 1
272                 col = ArrFind(arr_columnE, "Error")
273                 arrE = CoolSort(arrE, col, , False, ArrFind(arr_columnE, "Num"))
274                 arrE = Reg.DeleteBlankRows(arrE, 0, 1)
275                 Call SetRangE
            Case 2
277                 col = ArrFind(arr_columnE, "T1")
278                 arrE = CoolSort(arrE, col, 2, , ArrFind(arr_columnE, "Num"))
279                 arrE = Reg.DeleteBlankRows(arrE, 0, 1)
280                 Call SetRangE
            Case 3
282                 col = ArrFind(arr_columnE, "Dname")
283                 arrE = CoolSort(arrE, col, , , ArrFind(arr_columnE, "Num"))
284                 arrE = Reg.DeleteBlankRows(arrE, 0, 1)
285                 Call SetRangE
            Case 4
287                 col = ArrFind(arr_columnE, "Dur")
288                 arrE = CoolSort(arrE, col, 1, False, ArrFind(arr_columnE, "Num"))
289                 arrE = Reg.DeleteBlankRows(arrE, 0, 1)
290                 Call SetRangE
            Case 5
292                 col = ArrFind(arr_columnE, "U")
293                 arrE = CoolSort(arrE, col, 1, , ArrFind(arr_columnE, "Num"))
294                 arrE = Reg.DeleteBlankRows(arrE, 0, 1)
295                 Call SetRangE
            Case 6
297                 col = ArrFind(arr_columnE, "K")
298                 arrE = CoolSort(arrE, col, 1, , ArrFind(arr_columnE, "Num"))
299                 arrE = Reg.DeleteBlankRows(arrE, 0, 1)
300                 Call SetRangE
            Case 7
302                 col = ArrFind(arr_columnE, "Source")
303                 arrE = CoolSort(arrE, col, , , ArrFind(arr_columnE, "Num"))
304                 arrE = Reg.DeleteBlankRows(arrE, 0, 1)
305                 Call SetRangE
            Case 8
307                 col = ArrFind(arr_columnE, "Comm")
308                 arrE = CoolSort(arrE, col, , False, ArrFind(arr_columnE, "Num"))
309                 arrE = Reg.DeleteBlankRows(arrE, 0, 1)
310                 Call SetRangE
            Case 9
312                 col = ArrFind(arr_columnE, "MultiM")
313                 arrE = CoolSort(arrE, col, 1, False, ArrFind(arr_columnE, "Num"))
314                 arrE = Reg.DeleteBlankRows(arrE, 0, 1)
315                 Call SetRangE
            Case 10
317                 col = ArrFind(arr_columnE, "MultiS")
318                 arrE = CoolSort(arrE, col, 1, False, ArrFind(arr_columnE, "Num"))
319                 arrE = Reg.DeleteBlankRows(arrE, 0, 1)
320                 Call SetRangE
            
322         End Select
323         ret = EnableEvents("ComboSort_Change", ret)
324     End If
                                            addlog "END Private Sub ComboSort_Change"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Sub ComboYear_Click() '
    On Error GoTo Errors
332     If Not CInt(IIf(ComboYear.Value = "", 0, ComboYear.Value)) = NVal(Data.Range("year").Value) And Not Inddbl Then
                                            addlog "START Private Sub ComboYear_Click"
        
        Dim ret As Boolean
336         ret = EnableEvents("ComboYear_Click")
337         If FoldY <> "" Then FoldY = Reg.ComboYear.Value & "\"
338         If Reg.ComboYear.Value = "" And Data.Range("year").Value = "" Then
339             Reg.ComboYear.Value = Format(Now, "yyyy")
340         ElseIf ComboYear.Value = "" Then
341             Reg.ComboYear.Value = Data.Range("year").Value
342         Else
343             Data.Range("year").Value = Reg.ComboYear.Value
            
345             If file_name <> "" Then
346                 arr_fname = Split(file_name, "_")
347                 If Val(arr_fname(1)) < Reg.ComboYear.Value Then
348                     Set folder = FSO.GetFolder(ThisWorkbook.path & "\" & FoldY)
349                     namef = "EI_" & Reg.ComboYear.Value & "_" & Reg.ComboCode.Value
350                     If Len(file_name) > 13 Then namef = namef & "_" & arr_fname(3)
351                     If Not FSO.FileExists(ThisWorkbook.path & "\" & FoldY & namef & ".rar") And Not FSO.FolderExists(ThisWorkbook.path & "\" & FoldY & namef) And Reg.ComboCodePEM.Value <> "" Then
352                         q = MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " & arr_fname(1) & " |fffd||fffd||fffd||fffd|?", 4, "|fffd||fffd||fffd||fffd||fffd|!")
353                         If q = vbYes Then
354                             FSO.CreateFolder (ThisWorkbook.path & "\" & FoldY & namef)
355                             SetAttr ThisWorkbook.path & "\" & FoldY & namef & "\", vbHidden
356                             tmp_arr = arrC
357                             cMonth = ArrFind(arr_columnC, "Month")
358                             cemail = ArrFind(arr_columnC, "email")
359                             cNEnd = ArrFind(arr_columnC, "NEnd")
360                             For i = 1 To UBound(tmp_arr) Step 12
361                                 For m = 0 To 11
362                                     For j = cMonth To cNEnd
363                                         tmp_arr(i + m, j) = ""
364                                     Next j
365                                 Next m
366                                 For m = 11 To 0 Step -1
367                                     If arrC(i + m, cMonth) <> "" Then
368                                         For j = cMonth + 1 To cemail
369                                             tmp_arr(i, j) = arrC(i + m, j)
370                                         Next j
371                                         tmp_arr(i, cMonth) = "01"
                                        Exit For
373                                     End If
374                                 Next m
375                             Next i
376                             Call Reg.ArrSave(tmp_arr, ThisWorkbook.path & "\" & FoldY & namef, "C" & Reg.ComboYear.text + ".txt")
                            
378                             Set folder = FSO.GetFolder(ThisWorkbook.path & "\" & FoldY & file_name)
379                             For Each File In folder.Files
380                                 If Left(File.Name, 3) <> "ESI" And Left(File.Name, 6) <> "Report" And Left(File.Name, 1) <> "C" Then
381                                     FSO.Copyfile ThisWorkbook.path & "\" & FoldY & file_name & "\" & File.Name, ThisWorkbook.path & "\" & FoldY & namef & "\"
382                                     If Left(File.Name, 6) = "T" & Reg.ComboCode.Value Then
383                                         tmpname = Split(File.Name, "_")
384                                         sFileName = ThisWorkbook.path & "\" & FoldY & namef & "\" & File.Name
385                                         sNewFileName = ThisWorkbook.path & "\" & FoldY & namef & "\" & tmpname(0) & "_" & Reg.ComboYear.Value & "_" & tmpname(2)
386                                         Name sFileName As sNewFileName
387                                     ElseIf Left(File.Name, 4) <> "T04H" And Left(File.Name, 6) <> "TGroup" And Left(File.Name, 3) <> "PEM" Then
388                                         sFileName = ThisWorkbook.path & "\" & FoldY & namef & "\" & File.Name
389                                         sNewFileName = ThisWorkbook.path & "\" & FoldY & namef & "\" & Replace(File.Name, arr_fname(1), Reg.ComboYear.Value)
390                                         Name sFileName As sNewFileName
391                                     End If
392                                 End If
393                             Next
394                             Call Reg.CreateBackup(FoldY & CStr(namef))
395                         Else
396                             file_name = ""
397                         End If
398                     End If
399                 Else
400                     file_name = ""
401                 End If
402             End If
            
            
405             Data.Range("Pemkod") = ""
406             ComboCodePEM.Value = ""
407             If Not setdata Then
408                 setdata = True
                                                addlog "ComboYear_Click (Call Reg.JoinArch)"
410                 Call Reg.JoinArch
'            firstacn = False

                                                    addlog "ComboYear_Click (Call Reg.ArrLoadPEM) " & file_name
414                 Call Reg.ArrLoadPEM(FoldY & file_name & "\" & "PEM" & CStr(Data.Range("kod").Value) & ".txt")
                                                    addlog "ComboYear_Click (Call Reg.SetRangPEM)"
416                 Call Reg.SetRangPEM
            
                                            addlog "ComboYear_Click (Call openArch)"

'            Call openArch
421                 Reg.Range("PEM").Value = ComboPEM.text
422                 setdata = False
423             End If
424         End If
425         ret = EnableEvents("ComboYear_Click", ret)
                                            addlog "END Private Sub ComboYear_Click"
427     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Sub ComboCode_Click() '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error GoTo Errors
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'
'    null
438     If Not NVal(ComboCompany.Value) = NVal(ComboCode.Value) And Not Inddbl Then
                                            addlog "START Private Sub ComboCode_Click"
                                                                                       
441         tmp = NVal(ComboCompany.Value)
        Dim ret As Boolean
443         ret = EnableEvents("ComboCode_Click")
        
445         q = vbYes
446         If NVal(ComboCode.Value) > 0 And NVal(ComboCompany.Value) > 0 Then
447             q = MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", 4, "|fffd||fffd||fffd||fffd||fffd|!")
448         End If
449         If q = vbYes Then  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
450             ComboCompany.Value = ComboCode.Value
451             If tmp > 0 Then Data.Range("pemkod") = ""
452             Data.Range("kod").Value = ComboCode.Value
453             If Not setdata Then
454                 setdata = True
                                                addlog "ComboCode_Click (Call Reg.JoinArch)"
456                 If Not firstacn Then Call Reg.JoinArch


                                                addlog "ComboCode_Click (Call Reg.ArrLoadPEM) " & file_name
460                 If Not firstacn Then Call Reg.ArrLoadPEM(FoldY & file_name & "\" & "PEM" & CStr(Data.Range("kod").Value) & ".txt")
                                                addlog "ComboCode_Click (Call SetRangPEM)"
    '            i = 5 / 0
463                 Call SetRangPEM
                                                addlog "ComboCode_Click (Call openArch)"
465                 CheckBoxCheck.Value = False

467                 Reg.Range("PEM").Value = ComboPEM.text
468                 setdata = False
469             End If
470         Else
471             ComboCode.Value = CStr(ComboCompany.Value)
472         End If
473         ret = EnableEvents("ComboCode_Click", ret)
                                            addlog "END Private Sub ComboCode_Click"
475     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

'
Private Sub ComboCompany_Click() '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error GoTo Errors
    'this.name
484     If Not NVal(ComboCompany.Value) = NVal(ComboCode.Value) And Not Inddbl Then
                                            addlog "START Private Sub ComboCompany_Click"
        
        
        Dim ret As Boolean
489         ret = EnableEvents("ComboCompany_Click")
                                            
491         q = vbYes
492         If NVal(ComboCode.Value) > 0 And NVal(ComboCompany.Value) > 0 Then
493             q = MsgBox("|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", 4, "|fffd||fffd||fffd||fffd||fffd|!")
494         End If
495         If q = vbYes Then  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
496             ComboCode.Value = ComboCompany.Value
497             Data.Range("kod").Value = ComboCode.Value
498             Data.Range("pemkod") = ""
499             If Not setdata Then
500                 setdata = True
                                                addlog "ComboCompany_Click (Call Reg.JoinArch)"
502                 Call Reg.JoinArch

                                                addlog "ComboCompany_Click (Call Reg.ArrLoadPEM) " & file_name
505                 Call Reg.ArrLoadPEM(FoldY & file_name & "\" & "PEM" & CStr(Data.Range("kod").Value) & ".txt")
                                                        addlog "ComboCompany_Click (Call SetRangPEM)"
507                 Call SetRangPEM
                                                        addlog "ComboCompany_Click (Call openArch)"
509                 CheckBoxCheck.Value = False
                
511                 Reg.Range("PEM").Value = ComboPEM.text
512                 setdata = False
513             End If
514         Else
515             ComboCompany.Value = ComboCode.Value
516         End If
517         ret = EnableEvents("ComboCompany_Click", ret)
                                            addlog "END Private Sub ComboCompany_Click"
519         End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub


Private Sub ComboCodePEM_Click() '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error GoTo Errors
527     If Not NStr(ComboCodePEM.Value) = NStr(ComboPEM.Value) And Not Inddbl Then
                                            addlog "START Private Sub ComboCodePEM_Click"
              
        Dim ret As Boolean
531         ret = EnableEvents("ComboCodePEM_Click")
        
533         ComboPEM.Value = ComboCodePEM.Value
534         Data.Range("pemkod").Value = ComboCodePEM.Value
535         Reg.Range("PEM").Value = ComboPEM.text
                                            addlog "ComboCodePEM_Click (Call Reg.JoinArch)"
        
'        firstacn = True
539         If Not setdata And Not isCheck Then Call Reg.JoinArch
'        firstacn = False
                                                addlog "ComboCodePEM_Click (Call openArch)"
542         Call openArch
543         ret = EnableEvents("ComboCodePEM_Click", ret)
                                            addlog "END Private Sub ComboCodePEM_Click"
545     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
    
End Sub

Private Sub ComboPEM_Click() '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error GoTo Errors
553     If Not NStr(ComboCodePEM.Value) = NStr(ComboPEM.Value) And Not Inddbl Then
                                            addlog "START Private Sub ComboPEM_Click"
                
        Dim ret As Boolean
557         ret = EnableEvents("ComboPEM_Click")
558         ComboCodePEM.Value = ComboPEM.Value
559         Reg.Range("PEM").Value = ComboPEM.text
560         Data.Range("pemkod").Value = ComboPEM.Value
        
                                            addlog "ComboPEM_Click (Call Reg.JoinArch)"
563         If Not isCheck Then Call Reg.JoinArch
                                            addlog "ComboPEM_Click (Call openArch)"
565         Call openArch
        
567         ret = EnableEvents("ComboPEM_Click", ret)
                                            addlog "END Private Sub ComboPEM_Click"
569     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub
Public Sub ArrLoadC(Name As String) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error GoTo Errors
    Dim IBorder As Integer
                                                                addlog "START Public Sub ArrLoadC (" & Name & ")"
577     arr_columnC = Array("Kod", "KodPEM", "Month", "Person", "Tel", "email", "Address1", "Address2", "EDRPOU", "Fax", "Owner", "NEnd", "Block")

579     IBorder = IIf(divisions.Count > 0, divisions.Count * 12, 12)
580     arrC = ArrLoad(Name, arr_columnC, IBorder)
    
582     kodcol = ArrFind(arr_columnC, "Kod")
    
584     ncol = ArrFind(arr_columnC, "KodPEM")
585     KarrC = -1
586     For i = LBound(arrC) + 1 To UBound(arrC) Step 12
587         If arrC(i, ncol) = Reg.ComboCodePEM.text Then
588             KarrC = i - 1
                                                                addlog "ArrLoadC ( KarrC = " & KarrC & ")"
            Exit For
591         End If
592     Next i
    
    
    
596     If KarrC = -1 And divisions.Count > 0 Then KarrC = (divisions.Count - 1) * 12
597     If arrC(KarrC + 1, kodcol) = "" Then
598         kodpemcol = ArrFind(arr_columnC, "KodPEM")
599         For i = 1 To 12
600             arrC(KarrC + i, kodcol) = Reg.ComboCode.text
601             arrC(KarrC + i, kodpemcol) = Reg.ComboCodePEM.text
602         Next i
603     End If

                                                                addlog "END Public Sub ArrLoadC (" & Name & ")"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Public Sub ArrLoadI(Name As String) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error GoTo Errors
    Dim IBorder As Integer
        Dim ret As Boolean
614         ret = EnableEvents("ArrLoadI")
                                                                addlog "START Public Sub ArrLoadI (" & Name & ")"
616     arr_columnI = Array("Kod", "KodPEM", "U", "C", "N", "Tr", "LEP")
617     IBorder = IIf(divisions.Count > 0, divisions.Count * 6, 6)
618     arrI = ArrLoad(Name, arr_columnI, IBorder)
        
620     ncol = ArrFind(arr_columnI, "KodPEM")
621     KarrI = -1
622     For i = LBound(arrI) + 1 To UBound(arrI) Step 6
623         If arrI(i, ncol) = Reg.ComboCodePEM.text Then
624             KarrI = i - 1
                                                                addlog "ArrLoadI ( KarrI = " & KarrI & ")"
            Exit For
627         End If
628     Next i
    
630     ucol = ArrFind(arr_columnI, "U")
631     If KarrI = -1 And divisions.Count > 0 Then KarrI = (divisions.Count - 1) * 6
632     If arrI(KarrI + 1, ucol) = "" Then
633         arr = Array("", "m04", "s04", "m6", "s6", "m35", "m110")
634         kodcol = ArrFind(arr_columnI, "Kod")
635         kodpemcol = ArrFind(arr_columnI, "KodPEM")
636         For i = 1 To 6
637             arrI(KarrI + i, ucol) = arr(i)
638             arrI(KarrI + i, kodcol) = Reg.ComboCode.text
639             arrI(KarrI + i, kodpemcol) = Reg.ComboCodePEM.text
640         Next i
641     End If
642     Passw = arrI(KarrI + 5, ArrFind(arr_columnI, "LEP"))
    

645     If Passw <> "" Then
        Dim tmp_arr1
647         ReDim tmp_arr1(1 To Len(Passw) / 3)
648         tm = Passw
649         Passw = ""
650         For i = 1 To UBound(tmp_arr1)
651             tmp_arr1(i) = Chr(Val(Mid(tm, i * 3 - 2, 3)))
652             Passw = Passw & tmp_arr1(i)
653         Next i
654         firstacn = True
655         Reg.CheckPass.Value = True
656         firstacn = False
657         Call LockTarget(Reg.Range("Ut"), , False)
658         Call LockTarget(Reg.Range("j8:p9"), , False)
659         Call LockTarget(Reg.Range("Nzag4"), , False)
660         Call LockTarget(Reg.Range("s8:u9"), , False)
661         Call LockTarget(Reg.Range("AS9:At12"), , False)
662         Call LockTarget(Reg.Range("aq9:ar12"), , False)
663         Call LockTarget(Reg.Range("y8:aa9"), , False)
664         Call LockTarget(Reg.Range("AF26:AY" & Reg.UsedRange.Rows.Count), , False)
665     ElseIf Reg.CheckPass.Value = True Then
666         firstacn = True
667         Reg.CheckPass.Value = False
668         firstacn = False
669         Call LockTarget(Reg.Range("Ut"), , False)
670         Call LockTarget(Reg.Range("j8:p9"), , False)
671         Call LockTarget(Reg.Range("Nzag4"), , False)
672         Call LockTarget(Reg.Range("s8:u9"), , False)
673         Call LockTarget(Reg.Range("AS9:At12"), , False)
674         Call LockTarget(Reg.Range("aq9:ar12"), , False)
675         Call LockTarget(Reg.Range("y8:aa9"), , False)
676         Call LockTarget(Reg.Range("AF26:AY" & Reg.UsedRange.Rows.Count), , False)
677     End If
678         ret = EnableEvents("ArrLoadI", ret)
    
                                                                addlog "END Public Sub ArrLoadI (" & Name & ")"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub



Public Sub ArrLoadT(Name As String) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error GoTo Errors
                                                                addlog "START Public Sub ArrLoadT (" & Name & ")"
690     arr_columnT = Array("Kod", "Name1", "Name2", "Name3", "Name4", "Name5", "Name6", "Name7", "Name8", "Name9", "Name10", "Trm", "Nm04", "Trs", "Ns04", "Nm6", "Ns6", "N35", "N110", "Comm")
691     arrT = ArrLoad(Name, arr_columnT)
    
    Dim GName As String
694     GName = "TGroup" & Reg.ComboCode.Value & "_" & Reg.ComboCodePEM.Value & ".txt"
695     arr_columnTGroup = Array("Kod", "KodPEM", "Name", "G0", "G1", "G2", "G3", "G4", "G5", "G6", "G7", "G8", "G9", "Selected")
696     Set Coll_columnTGroup = SetColl(arr_columnTGroup)
697     arrTGroup = Reg.ArrLoad(FoldY & file_name & "\" & GName, arr_columnTGroup)
    
699     GName = "T04H" & Reg.ComboCode.Value & "_" & Reg.ComboCodePEM.Value & ".txt"
700     arr_columnT04H = Array("Kod", "KodPEM", "TName", "Name", "Ntrm", "N04m", "Ntrs", "N04s")
701     Set Coll_columnT04H = SetColl(arr_columnT04H)
702     arrT04H = Reg.ArrLoad(FoldY & file_name & "\" & GName, arr_columnT04H)
    
                                                                addlog "ENDPublic Sub ArrLoadT " & Name
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Public Sub ArrLoadE(Optional Name As String) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    On Error GoTo Errors
                                                               addlog "START Public Sub ArrLoadE (" & Name & ")"
712     arr_columnE = Array("Kod", "IdKey", "Num", "Source", "Dname", "U", "K", "Dlist", "T1", "T2", "Dur", "Type", "Ntrm", "N04m", "Ntrs", "N04s", "N6m", "N6s", "N35", "N110", "Comm", "Error", "RevTeh", "MultiM", "MultiS")
713     If Name <> "" Then
714         arrE = ArrLoad(Name, arr_columnE)
715         col = ArrFind(arr_columnE, "Num")
716         arrE = CoolSort(arrE, col, 1)
717         notsort = True
718         ComboSort.Value = "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
719         notsort = False
720     End If
    
722     cRevTeh = ArrFind(arr_columnE, "RevTeh")

724     For i = LBound(arrE) + 1 To UBound(arrE)
725         Call Reg.revision(arrE, arrI, i, 2, arrE(i, cRevTeh))
726         Call Reg.tehrevision(arrE, i, mytree, , 0, arrE(i, cRevTeh), False)
727     Next i

                                                                addlog "END Public Sub ArrLoadE (" & Name & ")"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Public Sub ArrLoadPEM(Name As String)
    On Error GoTo Errors
                                                                addlog "START Public Sub ArrLoadPEM (" & Name & ")"
737     arr_columnPEM = Array("KodCompany", "NamePEM", "KodPEM")
738     arrPEM = ArrLoad(Name, arr_columnPEM)
                                                                addlog "END Public Sub ArrLoadPEM (" & Name & ")"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub



Public Sub SetRangPEM()
    On Error GoTo Errors
                                                                addlog "START Public Sub SetRangPEM"
                                                                addlog "SetRangPEM(Reg.ComboCodePEM.Clear)"
750         Reg.ComboCodePEM.Clear
                                                                addlog "SetRangPEM(Reg.ComboPEM.Clear)"
752         Reg.ComboPEM.Clear
753         divisions.RemoveAll
        
755         If UBound(arrPEM) > 0 Then
756             colK = ArrFind(arr_columnPEM, "KodPEM")
757             colN = ArrFind(arr_columnPEM, "NamePEM")
758             arrPEM = CoolSort(arrPEM, 2)
759             For i = 1 To UBound(arrPEM)
760                 If Not divisions.exists(arrPEM(i, colK)) Then divisions.Add arrPEM(i, colK), arrPEM(i, colN)
761                 Reg.ComboCodePEM.AddItem arrPEM(i, colK)
762                 Reg.ComboPEM.AddItem arrPEM(i, colN)
763                 Reg.ComboPEM.List(Reg.ComboPEM.ListCount - 1, 1) = arrPEM(i, colK)
764             Next i
                
766                 If Not Reg.ComboMonth.Value = Data.Range("nummonth").Value Then
                                                                    addlog "Reg.ComboMonth.Value = " & Data.Range("nummonth").Value
768                 Reg.ComboMonth.Value = Data.Range("nummonth").Value
769                 End If
                
771                 If Not Reg.ComboCode.Value = Data.Range("Kod").Value Then
                                                                    addlog "Reg.ComboCode.Value = " & Data.Range("Kod").Value
773                 Reg.ComboCode.Value = Data.Range("Kod").Value
774                 End If
                
776             If divisions.exists(NStr(Data.Range("pemkod").Value)) And NStr(Data.Range("pemkod").Value) <> "" Then
777                 If Reg.ComboCodePEM.Value <> Data.Range("pemkod").Value Then Reg.ComboCodePEM.Value = Data.Range("pemkod").Value
778             ElseIf divisions.Count >= 1 Then
                Dim arrDicKeys
780                 arrDicKeys = divisions.keys
781                 Reg.ComboCodePEM.Value = arrDicKeys(0)
782             Else
783                 Call openArch
784             End If
785         Else
786             Call openArch
787         End If
        
                                                                addlog "END Public Sub SetRangPEM"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub


Sub savepem()
    On Error GoTo Errors
                                                                addlog "START Sub savepem"
    
799     If UBound(arrPEM) > 0 Then
800         ryad = ArrFind(arrPEM, Reg.ComboCodePEM.text, 0, "KodPEM")
801     Else
802         ReDim arrPEM(LBound(arrPEM) To 1, LBound(arrPEM, 2) To UBound(arrPEM, 2))
803         For i = 0 To UBound(arr_columnPEM)
804             arrPEM(0, i) = arr_columnPEM(i)
805         Next i
806         ryad = 1
807     End If
808         arrPEM(ryad, ArrFind(arr_columnPEM, "KodCompany")) = Reg.ComboCode.Value
809         arrPEM(ryad, ArrFind(arr_columnPEM, "KodPEM")) = Reg.ComboCodePEM.Value
810         arrPEM(ryad, ArrFind(arr_columnPEM, "NamePEM")) = Reg.ComboPEM.text

                                                                            addlog "savepem (Call Reg.ArrSave)"
813     Call Reg.ArrSave(arrPEM, ThisWorkbook.path & "\" & FoldY & file_name, "PEM" & Reg.ComboCode.Value & ".txt")
                                                                addlog "END Sub savepem"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub
Public Sub SetRangC() '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error GoTo Errors
                                                                addlog "START Public Sub SetRangC"
821     If UBound(arrC) > 0 And KarrC >= 0 Then
                                                                addlog "SetRangC(set data)"
823         C = 1
824         For i = Val(Reg.ComboMonth.Value) To 1 Step -1
825             If arrC(i + KarrC, ArrFind(arr_columnC, "Month")) <> "" Then C = i: Exit For
826         Next i
827         Reg.Range("Contacts").Areas(1).Value = arrC(C + KarrC, ArrFind(arr_columnC, "Person"))
828         Reg.Range("Contacts").Areas(2).Value = arrC(C + KarrC, ArrFind(arr_columnC, "Tel"))
829         Reg.Range("Contacts").Areas(3).Value = arrC(C + KarrC, ArrFind(arr_columnC, "email"))

831         Data.Range("NEnd").Value = NVal(arrC(Val(Reg.ComboMonth.Value) + KarrC, ArrFind(arr_columnC, "NEnd")))

833     Else
                                            addlog "SetRangC(clear)"
835         Reg.Range("Contacts").Value = ""
836         Data.Range("NEnd").Value = 0
837     End If
                                            addlog "END Public Sub SetRangC"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Public Sub SetRangI() '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error GoTo Errors
                                                                addlog "START Public Sub SetRangI"
846     If UBound(arrI) > 0 And KarrI >= 0 Then
                                            addlog "SetRangI(set data)"
       
849         For i = 1 To 2
850             Reg.Range("Ntr").Cells(i).Value = arrI(i + KarrI, ArrFind(arr_columnI, "Tr"))
851             Reg.Range("Nzag4").Cells(i).Value = arrI(i + KarrI, ArrFind(arr_columnI, "N"))
852             Reg.Range("LEP").Cells(i).Value = arrI(i + KarrI, ArrFind(arr_columnI, "LEP"))
853             Reg.Range("Czag4").Cells(i).Value = Replace(arrI(i + KarrI, ArrFind(arr_columnI, "C")), ",", ".")
854         Next i

856         For i = 3 To 6
857             Reg.Range("Nvys").Cells(i - 2).Value = arrI(i + KarrI, ArrFind(arr_columnI, "N"))
858             Reg.Range("Cvys").Cells(i - 2).Value = Replace(arrI(i + KarrI, ArrFind(arr_columnI, "C")), ",", ".")
859         Next i
        Dim tmp_arrUt
861         ReDim tmp_arrUt(1 To 1, 1 To 10)
862         Ut = arrI(6 + KarrI, ArrFind(arr_columnI, "LEP"))
863         If Ut <> "" Then
864             tmp_arr = Array("", "110(154)|fffd||fffd|", "27,5-35|fffd||fffd|", "6-20|fffd||fffd|", "0,4|fffd||fffd|")
865             For i = 1 To 10
866                 tmp_arrUt(1, i) = Mid(Ut, i, 1)
867                 For j = 0 To UBound(tmp_arr)
868                     If Val(tmp_arrUt(1, i)) = j Then tmp_arrUt(1, i) = tmp_arr(j)
869                 Next j
870             Next i
871         End If
872         Reg.Range("Ut").Value = tmp_arrUt

874     Else
                                            addlog "SetRangI(clear)"
876         Reg.Range("Ntr").Value = ""
877         Reg.Range("Nzag4").Value = ""
878         Reg.Range("LEP").Value = ""
879         Reg.Range("Czag4").Value = ""
880         Reg.Range("Nvys").Value = ""
881         Reg.Range("Cvys").Value = ""
882     End If
883     If CheckPass.Value = True Then
884         Call LockTarget(Reg.Range("Ut"), , CheckPass.Value)
885         Call LockTarget(Reg.Range("j8:p9"), , CheckPass.Value)
886         Call LockTarget(Reg.Range("Nzag4"), , CheckPass.Value)
887         Call LockTarget(Reg.Range("s8:u9"), , CheckPass.Value)
888         Call LockTarget(Reg.Range("AS9:At12"), , CheckPass.Value)
889         Call LockTarget(Reg.Range("aq9:ar12"), , CheckPass.Value)
890         Call LockTarget(Reg.Range("y8:aa9"), , CheckPass.Value)
891     End If
                                                               addlog "END Public Sub SetRangI"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub


Public Sub SetRangT() '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error GoTo Errors
    
                                                                addlog "START Public Sub SetRangT"
                                            addlog "SetRangT(arrT Clear)"
903     Set arrTerror = CreateObject("Scripting.Dictionary")
    
905     mytree.RemoveAll
    
907     If FormFindShow Then
908         hidenn = True
909         Unload FormFind
910         hidenn = False
911     End If
    
913     If IsEmpty(arrTcount) Then arrTcount = 0: arrTFormat = 1
    
915     If UBound(arrT) > 0 Then
916         cName1 = ArrFind(arr_columnT, "Name1")
917         cName10 = ArrFind(arr_columnT, "Name10")
918         cTrm = ArrFind(arr_columnT, "Trm")
919         cN110 = ArrFind(arr_columnT, "N110")
920         cComm = ArrFind(arr_columnT, "Comm")
921         mytree.RemoveAll
        Dim tmptree()
        Dim tmpnames()
924         tmp_arrT = arrT
925         For i = 1 To UBound(tmp_arrT)
926             father = ""
927             ReDim tmpnames(-1 To -1)
928             For j = cName1 To cName10
'                If tmp_arrT(i, j) <> "" And InStr(1, tmp_arrT(i, j), " ") > 0 Then tmp_arrT(i, j) = RemuvC(tmp_arrT(i, j), 0)
930                 If tmp_arrT(i, j) <> "" Then
931                     If InStr(1, tmp_arrT(i, j), " ") > 0 Or InStr(1, tmp_arrT(i, j), Chr(10)) > 0 Then
932                         tmp_arrT(i, j) = RemuvC(tmp_arrT(i, j), 0)
933                         arrT(i, j) = tmp_arrT(i, j)
934                     End If
935                     Ltmp_arrT = LCase(tmp_arrT(i, j))
936                     If mytree.exists(Ltmp_arrT) Then
937                         If mytree(Ltmp_arrT)(0) <> father And father <> "" Then
938                             tmp_arrT(i, j) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|(" & tmp_arrT(i, j) & "){" & i & "|" & j & "}"
939                             arrTerror.Add i & "," & j, ""

941                             ReDim tmptree(-2 To 12)
942                             tmptree(-2) = tmp_arrT(i, j)
943                             tmptree(-1) = Mid(Ut, j - cName1 + 1, 1)
944                         If Mid(Ut, j - cName1 + 1, 1) = 0 Then
945                             If Left(tmp_arrT(i, cTrm), 1) = "[" Or Left(tmp_arrT(i, cTrm + 2), 1) = "[" Then
946                                 tmptree(-1) = 4
947                             Else
948                                 tmptree(-1) = 0
949                             End If
950                         Else
951                             tmptree(-1) = Mid(Ut, j - cName1 + 1, 1)
952                         End If
953                             tmptree(0) = father
954                             tmptree(10) = Reg.Range("AG26:AY" & UBound(arrT) + 25).Cells(i, j).Address
955                             mytree.Add LCase(tmp_arrT(i, j)), tmptree
956                         Else
957                         End If
958                     Else
959                         ReDim tmptree(-2 To 12)
960                         tmptree(-2) = tmp_arrT(i, j)
961                         If Mid(Ut, j - cName1 + 1, 1) = 0 Then
962                             If Left(tmp_arrT(i, cTrm), 1) = "[" Or Left(tmp_arrT(i, cTrm + 2), 1) = "[" Then
963                                 tmptree(-1) = 4
964                             Else
965                                 tmptree(-1) = 0
966                             End If
967                         Else
968                             tmptree(-1) = Mid(Ut, j - cName1 + 1, 1)
969                         End If
970                         tmptree(0) = father
971                         tmptree(10) = Reg.Range("AG26:AY" & UBound(arrT) + 25).Cells(i, j).Address
972                         mytree.Add Ltmp_arrT, tmptree
973                     End If
974                     If father = "" Then
975                         tmpnames = addparent(tmpnames, Ltmp_arrT)
976                     Else
977                         ReDim Preserve tmpnames(LBound(tmpnames) To UBound(tmpnames) + 1)
978                         tmpnames(UBound(tmpnames)) = Ltmp_arrT
979                     End If
980                     father = Ltmp_arrT
981                 End If
982                 If j = cName10 Then
983                     If Ltmp_arrT <> "" And tmp_arrT(i, cComm) <> "" Then
984                         tmptree = mytree(Ltmp_arrT)
985                         tmptree(12) = tmp_arrT(i, cComm)
986                         mytree(Ltmp_arrT) = tmptree
987                     End If
988                     Ltmp_arrT = ""
989                 End If
990             Next j
991             For m = 0 To UBound(tmpnames)
992                 tmptree = mytree(tmpnames(m))
993                 For mm = cTrm To cN110
994                     If tmp_arrT(i, mm) <> "" Then
995                         If Left(tmp_arrT(i, mm), 1) = "[" And mm < 15 Then
996                             tmptree(mm - cTrm + 1 + 8) = "[" & (Val(Replace(tmptree(mm - cTrm + 1 + 8), "[", "")) + Val(Replace(tmp_arrT(i, mm), "[", ""))) & "]"
997                         Else
998                             tmptree(mm - cTrm + 1) = Val(tmptree(mm - cTrm + 1)) + Val(tmp_arrT(i, mm))
999                         End If
1000                     End If
1001                 Next mm
1002                 mytree(tmpnames(m)) = tmptree
1003             Next m
1004         Next i
        
                                            addlog "SetRangT(set data)"
        
1008         If UBound(arrT) < arrTcount Then
1009             Reg.Range("AG" & UBound(arrT) + 26 & ":AY" & arrTcount + 27).ClearContents
1010         End If
        
1012         If UBound(arrT) >= arrTFormat Then
1013             If UBound(arrT) - arrTFormat > 4000 Then
1014                 ii = (UBound(arrT) - arrTFormat) \ 4000
1015                 For i = 1 To ii
1016                     Data.Range("CE2", "CX2").Copy destination:=Reg.Range("AF" & arrTFormat + 26 & ":AY" & arrTFormat + 26 + 4000 * i)
1017                     arrTFormat = arrTFormat + 4000 * i + 1
1018                 Next i
1019                 ii = (UBound(arrT) - arrTFormat) Mod 4000
1020                 If ii > 0 Then
1021                     Data.Range("CE2", "CX2").Copy destination:=Reg.Range("AF" & arrTFormat + 26 & ":AY" & UBound(arrT) + 26)
1022                 End If
1023             Else
1024                 Data.Range("CE2", "CX2").Copy destination:=Reg.Range("AF" & arrTFormat + 26 & ":AY" & UBound(arrT) + 26)
1025             End If
1026             arrTFormat = UBound(arrT) + 1
1027         End If
        
1029         arrTcount = UBound(arrT)
1030         Reg.Range("AG26:AY" & UBound(arrT) + 25) = ArrSplit(tmp_arrT, "Name1", "Comm")
        
1032     Else
1033         Reg.Range("AG26:AY" & arrTcount + 26).ClearContents
1034         arrTcount = 0
1035     End If
1036     If CheckPass.Value = True Then Call LockTarget(Reg.Range("AF26:AY" & Reg.UsedRange.Rows.Count), , CheckPass.Value)
    
                                                                addlog "END Public Sub SetRangT"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Public Sub SetRangE() '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
    On Error GoTo Errors
                                                                addlog "START Public Sub SetRangE"
    Dim tmp1()
    Dim tmp_address()
1048     ReDim tmp_address(-1 To -1)
    
1050     If IsEmpty(arrEcount) Then arrEcount = 0: arrEFormat = 1
1051     Call LockTarget(Reg.Range("A26:Ad" & Reg.UsedRange.Rows.Count), , False)
1052     If UBound(arrE) > 0 Then
                                            addlog "SetRangE(set data)"

1055         If UBound(arrE) < arrEcount Then
1056             Reg.Range("A" & UBound(arrE) + 26 & ":Ad" & arrEcount + 26).ClearContents
1057             Reg.Range("BB" & UBound(arrE) + 26 & ":BC" & arrEcount + 26).ClearContents
1058         End If
        
1060         If UBound(arrE) >= arrEFormat Then
1061             Data.Range("AZ2", "CC2").Copy destination:=Reg.Range("a" & arrEFormat + 26 & ":ad" & UBound(arrE) + 26)
1062             arrEFormat = UBound(arrE) + 1
1063         End If
        
1065         arrEcount = UBound(arrE)
1066         ReDim tmp1(0 To UBound(arrE) - 1, 0 To 29)

1068         tmp_T1 = ArrSplit(arrE, "Num", "Dname")
1069         tmp_T2 = ArrSplit(arrE, "Dlist", "Dlist")

1071         tmp_T3 = SetX(ArrSplit(arrE, "U"), 4, "x")
1072         tmp_T4 = SetX(ArrSplit(arrE, "K"), 6, "x")

1074         tmp_T = ArrSplit(arrE, "T1", "T2")
1075         For i = LBound(tmp_T) To UBound(tmp_T)
1076             For j = LBound(tmp_T, 2) To UBound(tmp_T, 2)
1077                 If IsDate(tmp_T(i, j)) Then tmp_T(i, j) = CDbl(CDate(tmp_T(i, j)))
1078             Next j
1079         Next i

1081         tmp_T5 = ArrSplit(arrE, "Dur", "Error")
        
1083         If isCheck Then
1084             colkey = ArrFind(arr_columnE, "IdKey")
1085             Reg.Range("a26:ad" & Reg.UsedRange.Rows.Count).ClearComments
1086             For i = LBound(tmp1) To UBound(tmp1)
1087                 If DicCheck.exists(arrE(i + 1, colkey)) Then
1088                     tmp1(i, 7) = DicCheck.Item(arrE(i + 1, colkey))
1089                     iRow = ArrFind(arrEold, arrE(i + 1, colkey), , "IdKey")
1090                     If Not IsNull(iRow) Then Call getCompare(i + 1, i + 26, iRow)
1091                 End If
1092             Next i
1093         End If
        
1095         For i = LBound(tmp1) To UBound(tmp1)

1097             For j = LBound(tmp_T1, 2) To UBound(tmp_T1, 2)
1098                 tmp1(i, j) = tmp_T1(i, j)
1099             Next j
1100             For j = LBound(tmp_T2, 2) To UBound(tmp_T2, 2)
1101                 If Len(tmp_T2(i, j)) > 900 Then
1102                     If UBound(tmp_address) = -1 Then
1103                         ReDim tmp_address(0 To 2, 0 To 0)
1104                     Else
1105                         ReDim Preserve tmp_address(0 To 2, 0 To UBound(tmp_address, 2) + 1)
1106                     End If
1107                     tmp_address(0, UBound(tmp_address, 2)) = i + 1
1108                     tmp_address(1, UBound(tmp_address, 2)) = j + 9 + 1
1109                     tmp_address(2, UBound(tmp_address, 2)) = tmp_T2(i, j)
1110                 Else
1111                     tmp1(i, j + 9) = tmp_T2(i, j)
1112                 End If
1113             Next j
1114             For j = LBound(tmp_T3, 2) To UBound(tmp_T3, 2)
1115                 tmp1(i, j + 2) = tmp_T3(i, j)
1116             Next j
1117             For j = LBound(tmp_T4, 2) To UBound(tmp_T4, 2)
1118                 tmp1(i, j + 9) = tmp_T4(i, j)
1119             Next j
1120             For j = LBound(tmp_T, 2) To UBound(tmp_T, 2)
1121                 tmp1(i, j + 16) = tmp_T(i, j)
1122             Next j
1123             For j = LBound(tmp_T5, 2) To UBound(tmp_T5, 2)
1124                 tmp1(i, j + 18) = tmp_T5(i, j)
1125             Next j
1126         Next i
1127         Reg.Range("A26:AD" & UBound(arrE) + 25) = tmp1
1128         If Not UBound(tmp_address) = -1 Then
1129             For j = LBound(tmp_address, 2) To UBound(tmp_address, 2)
1130                 Reg.Range("A26:AD" & UBound(arrE) + 25).Cells(tmp_address(0, j), tmp_address(1, j)) = tmp_address(2, j)
1131             Next j
1132         End If
1133         Reg.Range("BB26:BB" & UBound(arrE) + 25) = ArrSplit(arrE, "IdKey", "IdKey")
1134         Reg.Range("BC26:BC" & UBound(arrE) + 25) = ArrSplit(arrE, "RevTeh", "RevTeh")
    
1136     Else
'                                                                    addlog "SetRangE(Call ClearE)"
'        Call ClearE
1139         Reg.Range("A26:Ad" & arrEcount + 26).ClearContents
1140         Reg.Range("BB26:BC" & arrEcount + 26).ClearContents
1141         arrEcount = 0
'
1143     End If
    
1145     If Reg.ComboCodePEM.text <> "" Then
1146         Reg.Range("Y2").Value = "ESI" & Reg.ComboCode.text & "_" & Reg.ComboYear.text & "_" & Reg.ComboMonth.Value & "_" & Reg.ComboCodePEM.Value & ".txt"
1147     Else
1148         Reg.Range("Y2").Value = ""
1149     End If
    
1151     blockcol = ArrFind(arr_columnC, "Block")
1152     If arrC(KarrC + Val(Reg.ComboMonth.Value), blockcol) = "1" And Not isCheck Then
1153         If Reg.CheckBlock = False Then
1154             firstacn = True
1155             Reg.CheckBlock = True
1156             firstacn = False
1157         End If
1158         Call LockTarget(Reg.Range("A26:Ad" & Reg.UsedRange.Rows.Count), , Reg.CheckBlock.Value)
1159     Else
1160         If Reg.CheckBlock = True Then
1161             firstacn = True
1162             Reg.CheckBlock = False
1163             firstacn = False
1164         End If
1165         Call LockTarget(Reg.Range("A26:Ad" & Reg.UsedRange.Rows.Count), , Reg.CheckBlock.Value)
1166     End If
                                            addlog "END Public Sub SetRangE"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub


Public Sub ArrSave(arr, path As String, Name As String, Optional hidden As Boolean = False) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error GoTo Errors
                                            addlog "START Public Sub ArrSave (path = " & path & ", name = " & Name & ")"

1177     Set FSO = CreateObject("scripting.filesystemobject")
1178     If FSO.FolderExists(path) Then
1179         Set ts = FSO.OpenTextFile(path & "\" & Name, 2, True)
1180         For i = LBound(arr) To UBound(arr)
1181             For j = LBound(arr, 2) To UBound(arr, 2) - 1
1182                 ts.Write arr(i, j) & Chr(9)
1183             Next j
1184             If i = UBound(arr) Then
1185                 ts.Write arr(i, j)
1186             Else
1187                 ts.WriteLine arr(i, j)
1188             End If
1189         Next i
        
1191     Else
        
1193         FSO.CreateFolder (path)
1194         Set folder = FSO.GetFolder(path)
1195         folder.Attributes = 2
                                            addlog "ArrSave (" & path & " - NOT EXIST - call(CreateFolder))"
1197         Call ArrSave(arr, path, Name)
1198     End If
                                                                addlog "END Public Sub ArrSave (path = " & path & ", name = " & Name & ")"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub


Function ArrLoad(Name As String, ArrColumn, Optional minborder As Integer)
    On Error GoTo Errors
                                                                addlog "START Function ArrLoad (" & Name & ")"
    Dim tmp_arr() As String
    Dim tmp_arr2() As String
1210     If FSO.FileExists(ThisWorkbook.path & "\" & Name) Then
                                            addlog "Function ArrLoad (" & Name & " - exists)"
1212         Set ts = FSO.OpenTextFile(ThisWorkbook.path & "\" & Name, 1, True)

1214         If ts.AtEndOfStream Then
1215             ts.Close
1216             Set ts = FSO.OpenTextFile(ThisWorkbook.path & "\" & Name, 8, False)
1217             ts.Write Join(ArrColumn, Chr(9))

1219             ts.Close
1220 iii:        Set ts = FSO.OpenTextFile(ThisWorkbook.path & "\" & Name, 1, False)
1221         End If

1223         txt$ = ts.ReadAll: ts.Close
        'Set ts = Nothing: Set FSO = Nothing


1227         txt = Replace(txt, Chr(10) & Chr(13) & Chr(10) & Chr(13), Chr(10) & Chr(13))
1228         tmp_arr = Split(txt, Chr(13) & Chr(10))
1229         NameColumn = Split(tmp_arr(LBound(tmp_arr)), Chr(9))

1231         st = -1
1232         For i = LBound(tmp_arr) To UBound(tmp_arr)
1233             If Not Replace(tmp_arr(i), Chr(9), "") = "" Then st = st + 1
1234         Next i
1235         If minborder > st Then st = minborder
        
1237         ReDim tmp_arr3(0 To st, 0 To UBound(ArrColumn)) As String
        
1239         ReDim idColumn(0 To UBound(ArrColumn)) As Integer
1240         For i = LBound(ArrColumn) To UBound(ArrColumn)
1241             tmp_id = ArrFind(NameColumn, ArrColumn(i))
1242             If Not IsNull(tmp_id) Then
1243                 idColumn(i) = tmp_id
1244             Else
1245                 tmp_arr3(0, i) = ArrColumn(i)
1246                 idColumn(i) = -1
1247             End If
1248         Next i
        
1250         st = 0
1251         For i = LBound(tmp_arr) To UBound(tmp_arr)
1252             If Not Replace(tmp_arr(i), Chr(9), "") = "" Then
1253                 tmp_arr2 = Split(tmp_arr(i), Chr(9))
1254                 For j = LBound(ArrColumn) To UBound(ArrColumn)
1255                     If Not idColumn(j) = -1 And idColumn(j) <= UBound(tmp_arr2) Then tmp_arr3(st, j) = tmp_arr2(idColumn(j))
1256                 Next j
1257                 st = st + 1
1258             End If
1259         Next i
1260         ArrLoad = tmp_arr3

1262     Else
                                            addlog "Function ArrLoad (" & Name & " - not exists)"
        Dim arr() As String
1265         ReDim arr(0 To minborder, UBound(ArrColumn)) As String
1266         For i = 0 To UBound(ArrColumn)
1267             arr(0, i) = ArrColumn(i)
1268         Next i
1269         ArrLoad = arr
1270     End If
                                                                addlog "END Function ArrLoad (" & Name & ")"
    Exit Function
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Function

Function ArrSplit(arr, startColumn As String, Optional endColumn As String, Optional tup As Integer = 0, Optional startRow = -1, Optional endRow = -1, Optional Dimension As Integer = 2)
     On Error GoTo Errors
                                                                addlog "START Function ArrSplit(startColumn - " & startColumn & ", endColumn - " & endColumn & ")"
    Dim tmp_arr()
    
1281     If startRow = -1 And LBound(arr) <= 1 Then
1282         startRow = 1
1283     ElseIf startRow < LBound(arr) Then
1284         startRow = LBound(arr)
1285     ElseIf startRow > UBound(arr) Then
1286         startRow = UBound(arr)
1287     End If
1288     If endRow = -1 Then
1289         endRow = UBound(arr)
1290     ElseIf endRow < LBound(arr) Then
1291         endRow = LBound(arr)
1292     ElseIf endRow > UBound(arr) Then
1293         endRow = UBound(arr)
1294     End If
    
    
1297     col = ArrFind(arr, startColumn, 1)
1298     If IsNull(col) Then col = LBound(arr, 2)
1299     If endColumn = "" Then
1300         If startRow <= endRow Then
1301             ReDim tmp_arr(0 To endRow - startRow)
1302             For i = 0 To endRow - startRow
1303                 If arr(i + startRow, col) <> "" Then
1304                     Select Case tup
                        Case 0
1306                             tmp_arr(i) = CStr(arr(i + startRow, col))
                        Case 1
1308                             tmp_arr(i) = CLng(arr(i + startRow, col))
1309                     End Select
1310                 End If
1311             Next i
1312         Else
1313             ReDim tmp_arr(0 To 0)
1314         End If
1315     Else
1316         cole = ArrFind(arr, endColumn, 1)
1317         If startRow <= endRow And Dimension > 1 Then
1318             ReDim tmp_arr(0 To endRow - startRow, 0 To cole - col)
1319             For j = 0 To cole - col
1320                 For i = 0 To endRow - startRow
1321                     If arr(i + startRow, j + col) <> "" Then
1322                         Select Case tup
                            Case 0
1324                                 tmp_arr(i, j) = CStr(arr(i + startRow, j + col))
                            Case 1
1326                                 tmp_arr(i, j) = CLng(arr(i + startRow, j + col))
1327                         End Select
1328                     End If
1329                 Next i
1330             Next j
1331         ElseIf startRow = endRow And Dimension = 1 Then
1332             ReDim tmp_arr(0 To cole - col)
1333             For j = 0 To cole - col
1334                 If arr(i + startRow, j + col) <> "" Then
1335                     Select Case tup
                        Case 0
1337                             tmp_arr(j) = CStr(arr(i + startRow, j + col))
                        Case 1
1339                             tmp_arr(j) = CLng(arr(i + startRow, j + col))
1340                     End Select
1341                 End If
1342             Next j
1343         Else
1344             ReDim tmp_arr(0 To 0, 0 To cole - col)
1345         End If
1346     End If
    
1348     ArrSplit = tmp_arr
                                                                addlog "END Function ArrSplit(startColumn - " & startColumn & ", endColumn - " & endColumn & ")"
    Exit Function
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Function

Function ArrJoin(arr, arr2, arr_column, Optional Nstep As Integer = 1, Optional arr_check, Optional arr_block)  ', Optional replace As Boolean = False, Optional Nstep As Integer, Optional PEMKOD, Optional exitf As Boolean = True)
    On Error GoTo Errors
    Dim idColumn() As Integer
    Dim tmp_arr() As String
    Dim idRow() As Integer
    Dim nRow As Integer
    Dim tkey As String
    Dim isRep As Boolean
    Dim tmp_dic
    Dim idCheck() As Integer
'    Dim col_block As Integer
    
'    If Not IsMissing(arr_block) Then
'        col_block = ArrFind(arr, arr_block(0), 1)
'    End If
'    KodCom = arr(1, ArrFind(arr, "Kod", 1))
1370     KodCom = ArrFind(arr, "Kod", 1)
1371     colkodpem = ArrFind(arr, "KodPEM", 1)
1372     colkodMon = ArrFind(arr, "Month", 1)
1373     If UBound(arr2) = 0 Then
1374         ArrJoin = arr
1375     ElseIf UBound(arr) = 0 Then
1376         ArrJoin = arr2
1377     Else
1378         If Not IsMissing(arr_check) Then
1379             ReDim idCheck(LBound(arr_check) To UBound(arr_check))
1380             For j = LBound(arr_check) To UBound(arr_check)
1381                 idCheck(j) = ArrFind(arr, arr_check(j), 1)
1382             Next j
1383         End If
        
1385         ReDim idColumn(LBound(arr_column) To UBound(arr_column))
1386         ReDim idRow(LBound(arr2) + 1 To UBound(arr2))
        
1388         For j = LBound(arr_column) To UBound(arr_column)
1389             idColumn(j) = ArrFind(arr, arr_column(j), 1)
1390         Next j
        
1392         Set tmp_dic = CreateObject("Scripting.Dictionary")
        
1394         For i = LBound(arr) + 1 To UBound(arr) Step Nstep
1395             tkey = ""
1396             For j = LBound(idColumn) To UBound(idColumn)
1397                 tkey = tkey & arr(i, idColumn(j))
1398             Next j
1399             If Not tmp_dic.exists(tkey) Then
1400                 tmp_dic.Add tkey, i
1401             End If
1402         Next i
1403         nRow = UBound(arr) - LBound(arr)
        
1405         For i = LBound(arr2) + 1 To UBound(arr2) Step Nstep
1406             tkey = ""
1407             For j = LBound(idColumn) To UBound(idColumn)
                If i > UBound(arr) Then
                    If arr2(i, idColumn(j)) <> "" Then tkey = tkey & arr2(i, idColumn(j))
                Else
                    If Not arr(i, idColumn(j)) = "" And arr2(i, idColumn(j)) = "" Then
                        tkey = tkey & arr(i, idColumn(j))
                    Else
                        tkey = tkey & arr2(i, idColumn(j))
                    End If
                End If
1413             Next j
1414             If tmp_dic.exists(tkey) Then
1415                 idRow(i) = tmp_dic(tkey)
1416             Else
1417                 idRow(i) = nRow + 1
1418                 nRow = nRow + Nstep
1419             End If
1420         Next i
1421         ReDim tmp_arr(LBound(arr) To nRow, LBound(arr, 2) To UBound(arr, 2))
        
1423         For i = LBound(arr) To UBound(arr)
1424             For j = LBound(arr, 2) To UBound(arr, 2)
1425                 tmp_arr(i, j) = arr(i, j)
1426             Next j
1427         Next i
1428         For i = LBound(arr2) + 1 To UBound(arr2) Step Nstep
1429             For r = idRow(i) To idRow(i) + Nstep - 1
1430                 isRep = True
1431                 If Not IsMissing(arr_check) Then
1432                     If idRow(i) <= UBound(arr) Then
1433                         isRep = False
1434                         For j = LBound(idCheck) To UBound(idCheck)
1435                             If arr2(i + r - idRow(i), idCheck(j)) <> "" Then isRep = True: Exit For
1436                         Next j
1437                     End If
1438                 End If
1439                 If Not IsMissing(arr_block) Then
1440                     Select Case arr_block(1)
                        Case 1
1442                             If DicBlock.exists(arr_block(0) & "_" & tmp_arr(r, KodCom) & "_" & tmp_arr(r, colkodpem) & "_00") Then
1443                                 isRep = False
1444                             End If
                        Case 2
1446                             If DicBlock.exists(arr_block(0) & "_" & tmp_arr(r, KodCom) & "_" & tmp_arr(r, colkodpem) & "_" & tmp_arr(r, colkodMon)) Then
1447                                 isRep = False
1448                             End If
                        Case 3
1450                             m = CStr(r - idRow(i) + 1)
1451                             If r - idRow(i) + 1 < 10 Then m = "0" & m
1452                             If DicBlock.exists(arr_block(0) & "_" & tmp_arr(r, KodCom) & "_" & tmp_arr(r, colkodpem) & "_" & m) Then
1453                                 isRep = False
1454                             End If
1455                     End Select
1456                 End If
1457                 If isRep Then
1458                     For j = LBound(arr2, 2) To UBound(arr2, 2)
1459                         tmp_arr(r, j) = arr2(i + r - idRow(i), j)
1460                     Next j
1461                 End If
1462             Next r
1463         Next i
1464         ArrJoin = tmp_arr
1465     End If
    Exit Function
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Function



Private Sub CommandButton4_Click()
1473     FormPeriod.Show
End Sub

Private Sub ComboYear_DropButtonClick()
1477     Call query
End Sub

Private Sub Image2_Click()
    On Error GoTo Errors
                                                                addlog "START Private Sub Image2_Click"
    
1484     If NVal(Reg.ComboCode.Value) = 0 Then
1485         MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", , "|fffd||fffd||fffd||fffd||fffd|!"
                                            addlog "END Private Sub Image2_Click (Reg.ComboCode.Value is empty)"
        Exit Sub
1488     End If
1489     If NStr(Reg.ComboCodePEM.Value) = "" Then
1490         MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", , "|fffd||fffd||fffd||fffd||fffd|!"
                                            addlog "END Private Sub Image2_Click ((Reg.ComboCodePEM.Value) = '')"
        Exit Sub
1493     End If
1494     FormFind.Show
                                                                addlog "END Private Sub Image2_Click"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Sub Image3_Click()
    On Error GoTo Errors
                                                                addlog "START Private Sub Image3_Click"
1503     If Not RegBack = "" Then Reg.Range(RegBack).Select
1504     Image3.Visible = False
                                                                addlog "END Private Sub Image3_Click"
Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Sub Label6_Click()

End Sub

Private Sub Label7_Click()

End Sub



Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    On Error GoTo Errors
                                            addlog "START Private Sub Worksheet_BeforeDoubleClick (" & Target.Address & ") [" & Target.Cells(1).Value & "]"
1523     If (Union(Target.Cells, Range("Q26:R65000")).Address = Range("Q26:R65000").Address) Then
1524         Cancel = True
1525         Call Image1_Click
1526     End If
1527     If isCheck Then
1528         If (Union(Target.Cells, Range("H26:H65000")).Address = Range("H26:H65000").Address) Then
            Dim ret As Boolean
1530             ret = EnableEvents("Worksheet_BeforeDoubleClick", , False)
1531             Cancel = True
1532             sheetChanged = True
1533             If Target.Row - 25 <= UBound(arrE) Then
1534                 kkey = arrE(Target.Row - 25, ArrFind(arr_columnE, "IdKey"))
               
1536                 If Target.Cells(1).Value = "" Then
1537                     aerr = arrE(Target.Row - 25, ArrFind(arr_columnE, "RevTeh"))
1538                     If kkey <> "" And aerr <> "1" And aerr <> "2" Then
1539                         Target.Cells(1).Value = "V"
1540                         DicCheck.Add kkey, "V"
1541                     ElseIf (aerr = "1" Or aerr = "2") And kkey <> "" Then
1542                         Target.Cells(1).Value = "P"
1543                         If DicCheck.exists(kkey) Then
1544                             DicCheck.Item(kkey) = "P"
1545                         Else
1546                             DicCheck.Add kkey, "P"
1547                         End If
1548                     Else
1549                         Target.Cells(1).Value = ""
1550                         If DicCheck.exists(kkey) Then
1551                             DicCheck.Remove (kkey)
1552                         End If
1553                     End If
1554                 ElseIf Target.Cells(1).Value = "E" Or Target.Cells(1).Value = "D" Then
1555                     iRow = ArrFind(arrEold, kkey, , "IdKey")
1556                     If DicCheck.exists(kkey) Then
1557                         aerr = arrEold(iRow, ArrFind(arr_columnE, "RevTeh"))
1558                         If aerr <> "1" And aerr <> "2" Then
1559                             DicCheck.Item(kkey) = "V"
1560                             Target.Cells(1).Value = "V"
1561                         Else
1562                             DicCheck.Remove (kkey)
1563                             Target.Cells(1).Value = ""
1564                         End If
1565                     End If
1566                     For j = LBound(arrE, 2) To UBound(arrE, 2)
1567                         Reg.Range("a" & Target.Row, "ad" & Target.Row).ClearComments
1568                         arrE(Target.Row - 25, j) = arrEold(iRow, j)
1569                     Next j
                    
1571                     Call SetRangE  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
1572                 ElseIf Target.Cells(1).Value = "P" Then
1573                     If DicCheck.exists(kkey) Then
1574                         DicCheck.Remove (kkey)
1575                     End If
1576                     iRow = ArrFind(arrEold, kkey, , "IdKey")
1577                     If IsNull(iRow) Then GoTo Ndelete
1578                     For j = LBound(arrE, 2) To UBound(arrE, 2)
1579                         Reg.Range("a" & Target.Row, "ad" & Target.Row).ClearComments
1580                         arrE(Target.Row - 25, j) = arrEold(iRow, j)
1581                     Next j
1582                     Target.Cells(1).Value = ""
1583                     Call SetRangE  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
1584                 ElseIf Target.Cells(1).Value = "N" Then
1585 Ndelete:
1586                     aaa = MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|?", vbYesNo, "|fffd||fffd||fffd||fffd||fffd|!")
1587                     If aaa = vbYes Then
1588                         If DicCheck.exists(kkey) Then
1589                             DicCheck.Remove (kkey)
1590                         End If
1591                         arrE(Target.Row - 25, 0) = ""
1592                         arrE = Reg.DeleteBlankRows(arrE, 0, 1)
1593                         Reg.Range("A" & Target.Cells(1).Row & ":AD" & Target.Cells(1).Row).ClearContents
1594                         Reg.Range("BB" & Target.Cells(1).Row & ":BC" & Target.Cells(1).Row).ClearContents
1595                         Call SetRangE
1596                     End If
1597                 Else
1598                     Target.Cells(1).Value = ""
1599                     If DicCheck.exists(kkey) Then
1600                         DicCheck.Remove (kkey)
1601                     End If
1602                 End If
1603             End If
1604             ret = EnableEvents("Worksheet_BeforeDoubleClick", ret, False)
1605         End If
1606     End If
                                            addlog "END Private Sub Worksheet_BeforeDoubleClick"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub





'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Private Sub Worksheet_Change(ByVal Target As Range)
                                            addlog "START Private Sub Worksheet_Change (" & Target.Address & ")"
    On Error GoTo Errors
    Dim xdata As Integer
    Dim xdata2 As Integer
    Dim inArr As Boolean
    Dim ret As Boolean
    Dim longdate As Boolean
    Dim arrT04H_Seved As Boolean
    Dim tehlist
1627     Set tehlist = CreateObject("Scripting.Dictionary")

1629     arrT04H_Seved = True
    Dim numcol()
    Dim tehExist() As Integer
1632     ReDim tehExist(-1 To -1)
    Dim TGroupIndex
1634     ThisWorkbook.Saved = True '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    
'    If Target.Address = data.Range("kod").Address Or Target.Address = data.Range("pemkod").Address Or Target.Address = data.Range("year").Address Then addlog "END Private Sub Worksheet_Change (Kod or PEMKod or year change)": Exit Sub
1637     If NVal(Reg.ComboCode.Value) = 0 Then
1638         ret = EnableEvents("Worksheet_Change")
1639         MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", , "|fffd||fffd||fffd||fffd||fffd|!"
1640         Target.Value = ""
1641         ret = EnableEvents("Worksheet_Change", ret)
                                            addlog "END Private Sub Worksheet_Change (Reg.ComboCode.Value is empty)"
        Exit Sub
1644     End If
1645     If NStr(Reg.ComboCodePEM.Value) = "" Then
1646         ret = EnableEvents("Worksheet_Change")
1647         MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", , "|fffd||fffd||fffd||fffd||fffd|!"
1648         Target.Value = ""
1649         ret = EnableEvents("Worksheet_Change", ret)
                                            addlog "END Private Sub Worksheet_Change ((Reg.ComboCodePEM.Value) = '')"
        Exit Sub
1652     End If
    
1654     Message = 0
1655     ret = EnableEvents("Worksheet_Change")
'
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|

1659     If (Union(Target.Cells(1), Range("Q26:R65000")).Address = Range("Q26:R65000").Address) Then
1660         Image1.Top = Target.Cells(1).Top
1661         Image1.Left = Target.Cells(1).Left - Image1.Width
1662         Image1.Visible = True
1663     Else
1664         If Image1.Visible Then Image1.Visible = False
1665     End If

1667     If (Union(Target.Cells(1), Range("C26:C65000"), Range("J26:J65000")).Address = Union(Range("C26:C65000"), Range("J26:J65000")).Address) Then
1668         Image2.Top = Target.Cells(1).Top
1669         Image2.Left = Target.Cells(1).Left - Image2.Width
1670         Image2.Visible = True
1671     Else
1672         If Image2.Visible Then Image2.Visible = False
1673     End If

1675     If (Union(Target.Cells(1), Range("Ut")).Address = Range("Ut").Address) Then
1676         Call LockTarget(Target)
1677         LEP = ArrFind(arr_columnI, "LEP")
1678         U110 = 6
1679         tmp_arr1 = Reg.Range("Ut").Value
1680         tmp_arr = Array("", "110(154)|fffd||fffd|", "27,5-35|fffd||fffd|", "6-20|fffd||fffd|", "0,4|fffd||fffd|")
        Dim tmp_arrUt
1682         ReDim tmp_arrUt(1 To 10)
1683         For i = 1 To 10
1684             For j = 0 To UBound(tmp_arr)
1685                 If tmp_arr1(1, i) = tmp_arr(j) Then tmp_arrUt(i) = j: Exit For
1686             Next j
1687         Next i

1689         Ut = Join(tmp_arrUt, "")
''
1691         arrI(U110 + KarrI, LEP) = Ut
1692         Call Reg.SetRangT
1693         Call Reg.ArrLoadE
1694         Call Reg.SetRangE
1695         ret = EnableEvents("Worksheet_Change", ret)
        
                                                            addlog "END Private Sub Worksheet_Change ((Reg.ComboCodePEM.Value) = '')"
1698         sheetChanged = True
        Exit Sub
1700     End If
    
1702     If (Union(Target.Cells(1), Range("y2")).Address = Range("y2").Address) Then
1703         Call LockTarget(Reg.Range("y2:ac2"), 2)
1704         ret = EnableEvents("Worksheet_Change", ret)
                                                            addlog "END Private Sub Worksheet_Change ((Reg.ComboCodePEM.Value) = '')"
        Exit Sub
1707     End If
    
1709     If (Union(Target.Cells(1), Range("PEM")).Address = Range("PEM").Address) Then
1710         Call LockTarget(Reg.Range("q19:r19"), 2)
1711         ret = EnableEvents("Worksheet_Change", ret)
                                                            addlog "END Private Sub Worksheet_Change ((Reg.ComboCodePEM.Value) = '')"
        Exit Sub
1714     End If
       
1716     If (Union(Target.Cells(1), Range("Ntr"), Range("Nzag4"), Range("Lep"), Range("Nvys"), Range("Cvys"), Range("Czag4")).Address = Union(Range("Ntr"), Range("Nzag4"), Range("Lep"), Range("Nvys"), Range("Cvys"), Range("Czag4")).Address) Then
1717         Call LockTarget(Target)
1718         C = ArrFind(arr_columnI, "C")
1719         LEP = ArrFind(arr_columnI, "LEP")
1720         Tr = ArrFind(arr_columnI, "Tr")
1721         NN = ArrFind(arr_columnI, "N")
1722         U04m = 1
1723         U04s = 2
1724         U6m = 3
1725         U6s = 4
1726         U35 = 5
1727         U110 = 6
        
1729         Call LockTarget(Reg.Range("j8:p8"), 2)
1730         Call LockTarget(Reg.Range("j9:p9"), 2)
1731         Call LockTarget(Reg.Range("s8:u8"), 2)
1732         Call LockTarget(Reg.Range("s9:u9"), 2)
1733         Call LockTarget(Reg.Range("y8:aa8"), 2)
1734         Call LockTarget(Reg.Range("y9:aa9"), 2)
1735         Call LockTarget(Reg.Range("aq9:ar9"), 2)
1736         Call LockTarget(Reg.Range("aq10:ar10"), 2)
1737         Call LockTarget(Reg.Range("aq11:ar11"), 2)
1738         Call LockTarget(Reg.Range("aq12:ar12"), 2)
1739         Call LockTarget(Reg.Range("as9:at9"), 2)
1740         Call LockTarget(Reg.Range("as10:at10"), 2)
1741         Call LockTarget(Reg.Range("as11:at11"), 2)
1742         Call LockTarget(Reg.Range("as12:at12"), 2)
        
        
1745         firstrow = 26
1746         lastrow = UBound(arrE) + 25
1747         sel_arr = Reg.Range("A" & firstrow, "AD" & IIf(lastrow < firstrow, firstrow, lastrow)).Value
1748         sel_arrkey = Reg.Range("BB" & firstrow, "BC" & IIf(lastrow < firstrow, firstrow, lastrow)).Value
1749         For i = U04m To U04s
1750             arrI(i + KarrI, 0) = CStr(Reg.ComboCode.text)
1751             arrI(i + KarrI, 1) = CStr(Reg.ComboCodePEM.text)
1752             arrI(i + KarrI, Tr) = CStr(Reg.Range("Ntr").Cells(i).Value)
1753             arrI(i + KarrI, NN) = CStr(Reg.Range("Nzag4").Cells(i).Value)
1754             arrI(i + KarrI, LEP) = CStr(Reg.Range("LEP").Cells(i).Value)
1755             arrI(i + KarrI, C) = CStr(Reg.Range("Czag4").Cells(i).Value)
1756         Next i
1757         For i = U6m To U110
1758             arrI(i + KarrI, 0) = CStr(Reg.ComboCode.text)
1759             arrI(i + KarrI, 1) = CStr(Reg.ComboCodePEM.text)
1760             arrI(i + KarrI, NN) = CStr(Reg.Range("Nvys").Cells(i - U6m + 1).Value)
1761             arrI(i + KarrI, C) = CStr(Reg.Range("Cvys").Cells(i - U6m + 1).Value)
1762         Next i
1763     End If

1765     If (Union(Target.Cells(1), Range("Contacts")).Address = Range("Contacts").Address) Then
1766         Call LockTarget(Target)
1767         For i = 1 To 12
1768             arrC(i + KarrC, ArrFind(arr_columnC, "Kod")) = Reg.ComboCode.text
1769             arrC(i + KarrC, ArrFind(arr_columnC, "KodPEM")) = Reg.ComboCodePEM.text
1770         Next i

1772         Call LockTarget(Reg.Range("g2:p2"), 2)
1773         Call LockTarget(Reg.Range("t2:w2"), 2)

        
1776         arrC(Val(Reg.ComboMonth.Value) + KarrC, ArrFind(arr_columnC, "Month")) = CStr(Reg.ComboMonth.Value)
1777         arrC(Val(Reg.ComboMonth.Value) + KarrC, ArrFind(arr_columnC, "Person")) = CStr(Reg.Range("Contacts").Areas(1).Value)
1778         arrC(Val(Reg.ComboMonth.Value) + KarrC, ArrFind(arr_columnC, "Tel")) = CStr(Reg.Range("Contacts").Areas(2).Value)
1779         arrC(Val(Reg.ComboMonth.Value) + KarrC, ArrFind(arr_columnC, "email")) = CStr(Reg.Range("Contacts").Areas(3).Value)
1780         ret = EnableEvents("Worksheet_Change", ret)
                                                            addlog "END Private Sub Worksheet_Change ((Reg.ComboCodePEM.Value) = '')"
1782         sheetChanged = True
        Exit Sub
1784     End If

1786     If (Union(Target.Cells, Range("AF26:AY65000")).Address = Range("AF26:AY65000").Address) Then
1787         Call LockTarget(Target)
1788         firstrow = Target.Row
1789         lastrow = Target.Row + Target.Rows.Count - 1
1790         sel_arrT = Reg.Range("AF" & firstrow, "AY" & lastrow).Value
     
1792         For i = LBound(sel_arrT) To UBound(sel_arrT)
1793             For j = 2 To 11
1794                  If IsError(sel_arrT(i, j)) Then sel_arrT(i, j) = ""
1795                 Lsel_arrT = LCase(sel_arrT(i, j))
1796                 If Lsel_arrT <> "" And Not tehlist.exists(Lsel_arrT) Then
1797                     tehlist.Add Lsel_arrT, Lsel_arrT
1798                 End If
1799             Next j
1800         Next i
1801         cs = ArrFind(arr_columnT, "Name1")
1802         cName10 = ArrFind(arr_columnT, "Name10")
1803         cKod = ArrFind(arr_columnT, "Kod")
1804         If UBound(arrT) < lastrow - 25 Then
1805             tmp_arrT = arrT
1806             ReDim arrT(LBound(arrT) To lastrow - 25, LBound(arrT, 2) To UBound(arrT, 2))
1807             arrTcount = UBound(arrT)
1808             For i = LBound(arrT) To UBound(arrT)
1809                 If i < firstrow - 25 And i <= UBound(tmp_arrT) Then
1810                     arrT(i, cKod) = tmp_arrT(i, cKod)
1811                     For j = cs To ArrFind(arr_columnT, "Comm")
1812                         arrT(i, j) = RemuvC(tmp_arrT(i, j), 0)
1813                         LarrT = LCase(arrT(i, j))
1814                         If arrT(i, j) <> "" And Not tehlist.exists(LarrT) And j <= cName10 Then
1815                             tehlist.Add LarrT, LarrT
1816                         End If
1817                     Next j
1818                 ElseIf i >= firstrow - 25 Then
1819                     arrT(i, cKod) = Reg.ComboCode.Value
1820                     For j = cs To ArrFind(arr_columnT, "Comm")
1821                         If Not Left(sel_arrT(i - firstrow + 26, j - cs + 2), 7) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then arrT(i, j) = RemuvC(sel_arrT(i - firstrow + 26, j - cs + 2), 0)
1822                         sel_arrT(i - firstrow + 26, j - cs + 2) = arrT(i, j)
1823                     Next j
1824                 End If
1825             Next i
1826         Else
1827             For i = LBound(sel_arrT) To UBound(sel_arrT)
1828                 For j = cs To ArrFind(arr_columnT, "Comm")
1829                     LarrT = LCase(arrT(i + firstrow - 26, j))
1830                     If LarrT <> "" And Not tehlist.exists(LarrT) And j <= cName10 Then
1831                         tehlist.Add LarrT, LarrT
1832                     End If
1833                     If Not Left(sel_arrT(i, j - cs + 2), 7) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|" Then arrT(i + firstrow - 26, j) = RemuvC(sel_arrT(i, j - cs + 2), 0)
1834                     sel_arrT(i, j - cs + 2) = arrT(i + firstrow - 26, j)
1835                 Next j
1836             Next i
1837         End If
        
1839         arrTset = False
1840         cTrm = ArrFind(arr_columnT, "Trm")
1841         cN110 = ArrFind(arr_columnT, "N110")
1842         cComm = ArrFind(arr_columnT, "Comm")
1843         mytree.RemoveAll
        Dim tmptree()
        Dim tmpnames()
        Dim arrTfirst, arrTlast As Integer
1847         tmp_arrT = arrT
1848         For i = 1 To UBound(tmp_arrT)
1849             father = ""
1850             ReDim tmpnames(-1 To -1)
1851             For j = cs To cName10
1852                 If arrT(i, j) <> "" Then
1853                     Ltmp_arrT = LCase(tmp_arrT(i, j))
1854                     If mytree.exists(Ltmp_arrT) Then
1855                         If mytree(Ltmp_arrT)(0) <> father And father <> "" Then
1856                             tmp_arrT(i, j) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd|_|fffd||fffd||fffd||fffd||fffd|(" & tmp_arrT(i, j) & "){" & i & "|" & j & "}"
1857                             If (i - firstrow + 26 <= UBound(sel_arrT)) And (i - firstrow + 26) > 0 Then
1858                                 sel_arrT(i - firstrow + 26, j - cs + 2) = tmp_arrT(i, j)
1859                             Else
1860                                 If Not arrTerror.exists(i & "," & j) Then
1861                                     arrTerror.Add i & "," & j, ""
1862                                     If arrTfirst = 0 Then arrTfirst = i
1863                                     arrTlast = i
1864                                     arrTset = True
1865                                 End If
1866                             End If

1868                             ReDim tmptree(-2 To 12)
1869                             tmptree(-2) = tmp_arrT(i, j)
1870                         If Mid(Ut, j - cs + 1, 1) = 0 Then
1871                             If Left(tmp_arrT(i, cTrm), 1) = "[" Or Left(tmp_arrT(i, cTrm + 2), 1) = "[" Then
1872                                 tmptree(-1) = 4
1873                             Else
1874                                 tmptree(-1) = 0
1875                             End If
1876                         Else
1877                             tmptree(-1) = Mid(Ut, j - cs + 1, 1)
1878                         End If
1879                             tmptree(0) = father
1880                             tmptree(10) = Reg.Range("AF" & firstrow, "AY" & lastrow).Cells(i - firstrow + 26, j - cs + 2).Address
1881                             mytree.Add LCase(tmp_arrT(i, j)), tmptree
1882                         Else
1883                             If arrTerror.exists(i & "," & j) Then
1884                                 arrTerror.Remove (i & "," & j)
1885                                 If (i - firstrow + 26 > UBound(sel_arrT)) Or (i - firstrow + 26) < 1 Then
1886                                     If arrTfirst = 0 Then arrTfirst = i
1887                                     arrTlast = i
1888                                     arrTset = True
1889                                 End If
1890                             End If
1891                         End If
1892                     Else
1893                         If arrTerror.exists(i & "," & j) Then
1894                             arrTerror.Remove (i & "," & j)
1895                             If (i - firstrow + 26 > UBound(sel_arrT)) Or (i - firstrow + 26) < 1 Then
1896                                 If arrTfirst = 0 Then arrTfirst = i
1897                                 arrTlast = i
1898                                 arrTset = True
1899                             End If
1900                         End If
1901                         ReDim tmptree(-2 To 12)
1902                         tmptree(-2) = tmp_arrT(i, j)
1903                         If Mid(Ut, j - cs + 1, 1) = 0 Then
1904                             If Left(tmp_arrT(i, cTrm), 1) = "[" Or Left(tmp_arrT(i, cTrm + 2), 1) = "[" Then
1905                                 tmptree(-1) = 4
1906                             Else
1907                                 tmptree(-1) = 0
1908                             End If
1909                         Else
1910                             tmptree(-1) = Mid(Ut, j - cs + 1, 1)
1911                         End If
1912                         tmptree(0) = father
1913                         tmptree(10) = Reg.Range("AF" & firstrow, "AY" & lastrow).Cells(i - firstrow + 26, j - cs + 2).Address
1914                         mytree.Add Ltmp_arrT, tmptree
1915                     End If
1916                     If father = "" Then
1917                         tmpnames = addparent(tmpnames, Ltmp_arrT)
1918                     Else
1919                         ReDim Preserve tmpnames(LBound(tmpnames) To UBound(tmpnames) + 1)
1920                         tmpnames(UBound(tmpnames)) = Ltmp_arrT
1921                     End If
1922                     father = Ltmp_arrT
1923                 End If
1924                 If j = cName10 Then
1925                     If Ltmp_arrT <> "" And tmp_arrT(i, cComm) <> "" Then
1926                         tmptree = mytree(Ltmp_arrT)
1927                         tmptree(12) = tmp_arrT(i, cComm)
1928                         mytree(Ltmp_arrT) = tmptree
1929                     End If
1930                     Ltmp_arrT = ""
1931                 End If
1932             Next j
1933             For m = 0 To UBound(tmpnames)
1934                 tmptree = mytree(tmpnames(m))
1935                 For mm = cTrm To cN110
1936                     If tmp_arrT(i, mm) <> "" Then
1937                         If Left(tmp_arrT(i, mm), 1) = "[" And mm < 15 Then
1938                             tmptree(mm - cTrm + 1 + 8) = "[" & (Val(Replace(tmptree(mm - cTrm + 1 + 8), "[", "")) + Val(Replace(tmp_arrT(i, mm), "[", ""))) & "]"
1939                         Else
1940                             tmptree(mm - cTrm + 1) = Val(tmptree(mm - cTrm + 1)) + Val(tmp_arrT(i, mm))
1941                         End If
1942                     End If
1943                 Next mm
1944                 mytree(tmpnames(m)) = tmptree
1945             Next m
1946         Next i
        
        
1949         bbb = 1
1950         If Range("AF" & Target.Cells(1).Row + Target.Rows.Count).Borders(xlEdgeBottom).LineStyle <> xlContinuous Then bbb = 0
1951         Data.Range("CE2", "CX2").Copy destination:=Range("AF" & Target.Cells(1).Row, "AY" & Target.Cells(1).Row + Target.Rows.Count - bbb)
        
1953         If FormFindShow Then
1954             hidenn = True
1955             Unload FormFind
1956             hidenn = False
1957         End If
1958         If arrTset Then
1959             Reg.Range("AG" & arrTfirst + 25 & ":AP" & arrTlast + 25) = ArrSplit(tmp_arrT, "Name1", "Name10", , arrTfirst, arrTlast)
1960         End If
1961         Reg.Range("AF" & firstrow, "AY" & lastrow) = sel_arrT
        
1963         Reg.Range("AF" & firstrow, "AF" & lastrow).FormulaR1C1Local = "=|fffd||fffd||fffd||fffd|(|fffd||5e8||fffd||fffd|(RC[1]:RC[10])>0;|fffd||fffd||fffd||fffd||fffd||fffd|(RC)-25;"""")"
        
        
1966         firstrow = 26
1967         lastrow = UBound(arrE) + 25
1968         sel_arr = Reg.Range("A" & firstrow, "AD" & IIf(lastrow < firstrow, firstrow, lastrow)).Value
1969         sel_arrkey = Reg.Range("BB" & firstrow, "BC" & IIf(lastrow < firstrow, firstrow, lastrow)).Value
1970         teh = True
1971     End If
            

1974     If (Union(Target.Cells, Range("A26:Ad65000")).Address = Range("A26:Ad65000").Address) Then
1975         Call LockTarget(Target)
1976         C = ArrFind(arr_columnI, "C")
1977         LEP = ArrFind(arr_columnI, "LEP")
1978         Tr = ArrFind(arr_columnI, "Tr")
1979         NN = ArrFind(arr_columnI, "N")
1980         U04m = 1
1981         U04s = 2
1982         U6m = 3
1983         U6s = 4
1984         U35 = 5
1985         U110 = 6

1987         firstrow = Target.Row
1988         lastrow = Target.Row + Target.Rows.Count - 1
1989         sel_arr = Reg.Range("a" & firstrow, "AD" & IIf(lastrow < firstrow, firstrow, lastrow)).Value
1990         sel_arrkey = Reg.Range("BB" & firstrow, "BC" & IIf(lastrow < firstrow, firstrow, lastrow)).Value
1991         bbb = 1
1992         If Range("A" & Target.Cells(1).Row + Target.Rows.Count).Borders(xlEdgeBottom).LineStyle <> xlContinuous Then bbb = 0
1993         Data.Range("AZ2", "CC2").Copy destination:=Range("A" & Target.Cells(1).Row, "Ad" & Target.Cells(1).Row + Target.Rows.Count - bbb)
1994         teh = False
1995     End If
    
1997     If Not IsEmpty(sel_arr) Then
        
1999         TIndex = ArrFind(arr_columnT, "Trm")
2000         jfirst = ArrFind(arr_columnT, "Name1")
2001         jlast = ArrFind(arr_columnT, "Name10")
2002         cDname = ArrFind(arr_columnE, "Dname")
2003         ufirst = ArrFind(arr_columnE, "U")
2004         kfirst = ArrFind(arr_columnE, "K")
        Dim UKnew() As Integer
2006         ReDim UKnew(1 To UBound(sel_arr, 1), 0 To 1)
        Dim tmp_address()
2008         ReDim tmp_address(-1 To -1)
        
        Dim eclear As Boolean
        
2012         For i = 1 To UBound(sel_arr, 1)
            
        
           ''''''''|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
2016                 eclear = False
                
2018                 inArr = False
2019                 If i + firstrow - 26 <= UBound(arrE) Then inArr = True
                
2021                 If Not Trim(sel_arr(i, 10)) = "" Then sel_arr(i, 3) = RemuvC(sel_arr(i, 3), 0)
                
2023                 If sel_arr(i, 3) = "" Then
2024                     sel_arr(i, 10) = ""
2025                     arr_disp = Split(sel_arr(i, 3), ";")
'                    vDname = 0
2027                 Else
2028                     sel_arr(i, 3) = RemuvC(sel_arr(i, 3), 2)
2029                     If Right(sel_arr(i, 3), 1) = ";" Then sel_arr(i, 3) = Left(sel_arr(i, 3), Len(sel_arr(i, 3)) - 1)
2030                     arr_disp = Split(sel_arr(i, 3), ";")
'                    vDname = 1
2032                 End If
2033                 vDname = 1 + CInt(sel_arr(i, 3) = "")
                                
                
                '---------------- |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
2037                 eDname = ""
2038                 If inArr Then
2039                     UKnew(i, 0) = Val(arrE(i + firstrow - 26, ufirst))
2040                     eDname = arrE(i + firstrow - 26, cDname)
2041                 End If
                
2043                 If UKnew(i, 0) > 0 And UKnew(i, 0) <= 4 Then
2044                     If sel_arr(i, 3 + UKnew(i, 0)) = "" Then
2045                         UKnew(i, 0) = 0
2046                     Else
2047                         sel_arr(i, 3 + UKnew(i, 0)) = Empty
2048                     End If
2049                 End If
                
2051                 UU = 0
2052                 For U = 1 To 4
2053                     If sel_arr(i, U + 3) <> "" And UU = 0 Then
2054                         UU = U
2055                     Else
2056                         sel_arr(i, U + 3) = Empty
2057                     End If
2058                 Next U
                
2060                 If UU = 0 And UKnew(i, 0) <> 0 Then
2061                     UU = UKnew(i, 0)
2062                     sel_arr(i, 3 + UKnew(i, 0)) = "x"
2063                 ElseIf UU <> 0 Then
2064                     UKnew(i, 0) = UU
2065                     sel_arr(i, 3 + UKnew(i, 0)) = "x"
2066                 End If
                '------------------- |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                '---------------- |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
2069                     If inArr Then UKnew(i, 1) = Val(arrE(i + firstrow - 26, kfirst))
2070                     If UKnew(i, 1) > 0 And UKnew(i, 1) <= 6 Then
2071                         If sel_arr(i, 10 + UKnew(i, 1)) = "" Then
2072                             UKnew(i, 1) = 0
2073                         Else
2074                             sel_arr(i, 10 + UKnew(i, 1)) = Empty
2075                         End If
2076                     End If
                    
2078                     Kk = 0
2079                     For k = 1 To 6
2080                         If sel_arr(i, k + 10) <> "" And Kk = 0 Then
2081                             Kk = k
2082                         Else
2083                             sel_arr(i, k + 10) = Empty
2084                         End If
2085                     Next k
2086                     If InStr(1, sel_arr(i, 29), "(|fffd||fffd||fffd|)") > 0 Then sel_arr(i, 10 + Kk) = Empty: Kk = 5
2087                     If Kk = 0 And UKnew(i, 1) <> 0 Then
2088                         Kk = UKnew(i, 1)
2089                         sel_arr(i, 10 + UKnew(i, 1)) = "x"
2090                     ElseIf Kk <> 0 Then
2091                         UKnew(i, 1) = Kk
2092                         sel_arr(i, 10 + UKnew(i, 1)) = "x"
2093                     End If
                '---------------- |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                
2096                 If UBound(arr_disp) = 0 Then
2097                     If UU < 4 Then
2098                         TGroupIndex = ArrFind(arrTGroup, sel_arr(i, 3), , "Name")
2099                         If IsNull(TGroupIndex) Then
2100                             sel_arr(i, 10) = ""
2101                         ElseIf sel_arr(i, 10) = "" Then
2102                             sel_arr(i, 10) = arrTGroup(TGroupIndex, Coll_columnTGroup("G" & arrTGroup(TGroupIndex, Coll_columnTGroup("Selected"))))
2103                         End If
2104                     End If
                    
2106                     If (UU = 4 Or (UU = 0 And IsNull(TGroupIndex))) And Not mytree.exists(arr_disp(0)) Then
2107                         TGroupIndex = ArrFind(arrT04H, sel_arr(i, 3), , "Name")
2108                         If (Not IsNull(TGroupIndex)) And (eDname <> sel_arr(i, 3)) Then
2109                             If UU > 0 And UU < 4 Then sel_arr(i, UU + 3) = Empty
2110                             UKnew(i, 0) = 4
2111                             UU = 4
2112                             sel_arr(i, UU + 3) = "x"
2113                             sel_arr(i, 21) = arrT04H(TGroupIndex, Coll_columnT04H("Ntrm"))
2114                             sel_arr(i, 22) = arrT04H(TGroupIndex, Coll_columnT04H("N04m"))
2115                             sel_arr(i, 23) = arrT04H(TGroupIndex, Coll_columnT04H("Ntrs"))
2116                             sel_arr(i, 24) = arrT04H(TGroupIndex, Coll_columnT04H("N04s"))
2117                             sel_arr(i, 25) = ""
2118                             sel_arr(i, 26) = ""
2119                             sel_arr(i, 27) = ""
2120                             sel_arr(i, 28) = ""
2121                         ElseIf (Not IsNull(TGroupIndex)) And (eDname = sel_arr(i, 3)) Then
2122                             arrT04H(TGroupIndex, Coll_columnT04H("Ntrm")) = sel_arr(i, 21)
2123                             arrT04H(TGroupIndex, Coll_columnT04H("N04m")) = sel_arr(i, 22)
2124                             arrT04H(TGroupIndex, Coll_columnT04H("Ntrs")) = sel_arr(i, 23)
2125                             arrT04H(TGroupIndex, Coll_columnT04H("N04s")) = sel_arr(i, 24)
2126                             arrT04H_Seved = False
2127                         ElseIf UU = 4 And IsNull(TGroupIndex) Then
                            Dim tmp_arrT04H() As String
2129                             Call SetColumnName(tmp_arrT04H, arr_columnT04H, 1)
2130                             tmp_arrT04H(1, Coll_columnT04H("Kod")) = Reg.ComboCode.text
2131                             tmp_arrT04H(1, Coll_columnT04H("KodPEM")) = Reg.ComboCodePEM.text
2132                             tmp_arrT04H(1, Coll_columnT04H("Name")) = sel_arr(i, 3)
2133                             tmp_arrT04H(1, Coll_columnT04H("Ntrm")) = sel_arr(i, 21)
2134                             tmp_arrT04H(1, Coll_columnT04H("N04m")) = sel_arr(i, 22)
2135                             tmp_arrT04H(1, Coll_columnT04H("Ntrs")) = sel_arr(i, 23)
2136                             tmp_arrT04H(1, Coll_columnT04H("N04s")) = sel_arr(i, 24)
2137                             arrT04H = Reg.ArrJoin(arrT04H, tmp_arrT04H, Array("Kod", "KodPEM", "Name"))
2138                             arrT04H_Seved = False
2139                         End If
2140                     End If
2141                 End If
2142                 If sel_arr(i, 10) <> "" Then
2143                     sel_arr(i, 10) = RemuvC(sel_arr(i, 10), 3)
2144                     If Right(sel_arr(i, 10), 1) = ";" Then sel_arr(i, 10) = Left(sel_arr(i, 10), Len(sel_arr(i, 10)) - 1)
2145                     arr_disp = Split(sel_arr(i, 10), ";")
2146                     vDname = 2
2147                 End If
                
2149                 Larr_disp = arr_disp
2150                 For w = LBound(arr_disp) To UBound(arr_disp)
2151                     Larr_disp(w) = LCase(arr_disp(w))
2152                 Next w

2154                 If vDname > 0 Then 'And arrE(i + firstrow - 26, 3) <> sel_arr(i, 3)
2155                     ReDim tehExist(0 To UBound(Larr_disp))
2156                     aaa = 5
                    
2158                     If teh Then
2159                         For w = LBound(Larr_disp) To UBound(Larr_disp)
2160                             If tehlist.exists(Larr_disp(w)) Then GoTo selFill
2161                         Next w
2162                         GoTo nexti
2163                     End If
                    
2165 selFill:            For w = LBound(Larr_disp) To UBound(Larr_disp)
2166                         If UU > 0 And UU < 4 And w = LBound(Larr_disp) And InStr(1, sel_arr(i, 29), "(|fffd||fffd||fffd|)") = 0 Then
2167                             If Not eclear Then eclear = True
2168                             For U = 21 To 28
2169                                 sel_arr(i, U) = Empty
2170                             Next U
2171                         End If
2172                         If mytree.exists(Larr_disp(w)) Then
2173                             arr_disp(w) = mytree(Larr_disp(w))(-2)
2174                             If Not eclear Then
2175                                 For U = 21 To 28
2176                                     sel_arr(i, U) = ""
2177                                 Next U
2178                                 eclear = True
2179                             End If
2180                             tehExist(w) = 1
2181                             napr = Val(mytree(Larr_disp(w))(-1))
2182                             If UU = 0 And napr > 0 And napr < aaa Then
2183                                 sel_arr(i, napr + 3) = "x"
2184                                 UKnew(i, 0) = napr
2185                                 UU = napr
2186                                 If aaa <> 5 Then sel_arr(i, aaa + 3) = ""
2187                                 aaa = napr
2188                             End If
                            
2190                             If UU = 4 Then
2191                                 ArrCol = Array(9, 2, 11, 4, 5, 6, 7, 8)
2192                             Else: ArrCol = Array(1, 2, 3, 4, 5, 6, 7, 8)
2193                             End If
                            
2195                             For U = 21 To 28
2196                                 Uind = U - 21
2197                                 If mytree(Larr_disp(w))(ArrCol(Uind)) <> "" Then
2198                                     If sel_arr(i, U) = "" Then
2199                                         sel_arr(i, U) = mytree(Larr_disp(w))(ArrCol(Uind))
2200                                     ElseIf Left(sel_arr(i, U), 1) = "[" Then
2201                                         If Left(mytree(Larr_disp(w))(ArrCol(Uind)), 1) = "[" Then sel_arr(i, U) = "[" & (Val(Replace(sel_arr(i, U), "[", "")) + Val(Replace(mytree(Larr_disp(w))(ArrCol(Uind)), "[", ""))) & "]"
2202                                     Else: sel_arr(i, U) = Val(sel_arr(i, U)) + Val(mytree(Larr_disp(w))(ArrCol(Uind)))
2203                                     End If

2205                                 End If
2206                             Next U
2207                         End If

                        
2210                     Next w
2211                 Else
2212                     For U = 21 To 28
2213                         sel_arr(i, U) = ""
2214                     Next U
2215                 End If
                


2219                 If UU = 4 Then
2220                     If sel_arr(i, 21) <> 0 And sel_arr(i, 21) <> "" Then
2221                         sel_arr(i, 21) = "[" & RemuvC(sel_arr(i, 21), 1) & "]"
2222                         ElseIf sel_arr(i, 21) = "0" Then sel_arr(i, 21) = "[0]"
2223                         Else: sel_arr(i, 21) = ""
2224                     End If
2225                     If sel_arr(i, 23) <> 0 And sel_arr(i, 23) <> "" Then
2226                         sel_arr(i, 23) = "[" & RemuvC(sel_arr(i, 23), 1) & "]"
2227                         ElseIf sel_arr(i, 23) = "0" Then sel_arr(i, 23) = "[0]"
2228                         Else: sel_arr(i, 23) = ""
2229                     End If
2230                         Else:
2231                     If sel_arr(i, 21) <> 0 And sel_arr(i, 21) <> "" Then
2232                         sel_arr(i, 21) = RemuvC(sel_arr(i, 21), 1)
2233                         ElseIf sel_arr(i, 21) = "0" Then
2234                         Else: sel_arr(i, 21) = ""
2235                     End If
2236                     If sel_arr(i, 23) <> 0 And sel_arr(i, 23) <> "" Then
2237                         sel_arr(i, 23) = RemuvC(sel_arr(i, 23), 1)
2238                         ElseIf sel_arr(i, 23) = "0" Then
2239                         Else: sel_arr(i, 23) = ""
2240                     End If
2241                 End If
        

2244                 If Not teh Then
2245                     If IsError(sel_arr(i, 17)) Then
2246                         sel_arr(i, 17) = ""
2247                     Else
2248                     sel_arr(i, 17) = Trim(sel_arr(i, 17))
2249                     sel_arr(i, 18) = Trim(sel_arr(i, 18))
2250                     sel_arr(i, 17) = Replace(sel_arr(i, 17), ",", ".")
2251                     sel_arr(i, 17) = Replace(sel_arr(i, 17), ";", ":")
2252                     sel_arr(i, 18) = Replace(sel_arr(i, 18), ",", ".")
2253                     sel_arr(i, 18) = Replace(sel_arr(i, 18), ";", ":")
2254                     End If
                    
2256                     If ((IsDate(sel_arr(i, 17)) = True) Or (sel_arr(i, 17) = "")) And ((IsDate(sel_arr(i, 18)) = True) Or (sel_arr(i, 18) = "")) Then
2257                         If (sel_arr(i, 17) <> "") And (sel_arr(i, 18) <> "") Then
2258                             If sel_arrkey(i, 1) = "" Or ((Len(sel_arrkey(i, 1)) - InStr(1, sel_arrkey(i, 1), "_", 0)) <> 9 And Left(sel_arrkey(i, 1), 1) <> "@") Then
2259                                 Data.Range("Nend").Value = Data.Range("Nend").Value + 1
2260                                 sel_arrkey(i, 1) = NStr(Data.Range("Nend").Value) & "_" & Reg.ComboCode.Value & Reg.ComboCodePEM.Value & Reg.ComboMonth.Value
2261                                 sel_arr(i, 1) = NStr(Data.Range("Nend").Value)
2262                                 arrC(Val(Reg.ComboMonth.Value) + KarrC, ArrFind(arr_columnC, "NEnd")) = NStr(Data.Range("Nend").Value)
2263                             End If
            
2265                             If IsDate(sel_arr(i, 18)) And IsDate(sel_arr(i, 17)) Then
2266                                 sel_arr(i, 19) = DateDiff("n", sel_arr(i, 17), sel_arr(i, 18))
2267                             End If
            
2269                             If sel_arr(i, 19) >= 3 Then
2270                                     sel_arr(i, 20) = "|fffd||fffd||fffd||fffd||fffd|"
2271                                 ElseIf sel_arr(i, 19) < 3 And sel_arr(i, 19) >= 0 Then
2272                                     sel_arr(i, 20) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
2273                                 Else: sel_arr(i, 20) = ""
2274                             End If
2275                         Else
2276                             sel_arr(i, 19) = ""
2277                             sel_arr(i, 20) = ""
2278                         End If
2279                     Else
2280                         sel_arr(i, 19) = ""
2281                         sel_arr(i, 20) = ""
2282                     End If
2283                 End If
                
2285                 Call Reg.revision(sel_arr, arrI, i, , sel_arrkey(i, 2))
2286                 Call Reg.tehrevision(sel_arr, i, mytree, arr_disp, 1, sel_arrkey(i, 2))
                
2288                 Select Case vDname
                    Case 1: sel_arr(i, 3) = Join(arr_disp, "; ")
                    Case 2
2291                         Jarr_disp = Join(arr_disp, "; ")
2292                         If Len(Jarr_disp) > 900 Then
2293                             If UBound(tmp_address) = -1 Then
2294                                 ReDim tmp_address(0 To 2, 0 To 0)
2295                             Else
2296                                 ReDim Preserve tmp_address(0 To 2, 0 To UBound(tmp_address, 2) + 1)
2297                             End If
2298                             tmp_address(0, UBound(tmp_address, 2)) = i
2299                             tmp_address(1, UBound(tmp_address, 2)) = 10
2300                             tmp_address(2, UBound(tmp_address, 2)) = Jarr_disp
2301                             sel_arr(i, 10) = ""
2302                         Else
2303                             sel_arr(i, 10) = Jarr_disp
2304                         End If
2305                 End Select
                
                

2309 nexti:
2310         Next i
                                                 addlog "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|"
2312         If Not arrT04H_Seved Then
2313             GName$ = "T04H" & Reg.ComboCode.Value & "_" & Reg.ComboCodePEM.Value & ".txt"
2314             Call Reg.ArrSave(arrT04H, ThisWorkbook.path & "\" & FoldY & file_name, GName)
2315             arrT04H_Seved = True
2316         End If
        
        

2320         cIdKey = ArrFind(arr_columnE, "IdKey")
2321         cs = ArrFind(arr_columnE, "Num")
2322         ufirst = ArrFind(arr_columnE, "U")
2323         kfirst = ArrFind(arr_columnE, "K")
2324         cDlist = ArrFind(arr_columnE, "Dlist")
2325         ce = ArrFind(arr_columnE, "T1")
2326         cError = ArrFind(arr_columnE, "Error")
2327         cKod = ArrFind(arr_columnE, "Kod")
2328         cRevTeh = ArrFind(arr_columnE, "RevTeh")
2329         cMultiM = ArrFind(arr_columnE, "MultiM")
        Dim compare As Boolean
        Dim newempty As Boolean
        Dim notempt As Boolean
2333         If UBound(arrE) < lastrow - 25 Then
2334             tmp_arr = arrE
2335             ReDim arrE(LBound(arrE) To lastrow - 25, LBound(arrE, 2) To UBound(arrE, 2))
2336             arrEcount = UBound(arrE)
            
2338             For i = LBound(arrE) To UBound(arrE)
2339                 If i < firstrow - 25 And i <= UBound(tmp_arr) Then
2340                     For j = LBound(arrE, 2) To UBound(arrE, 2)
2341                         arrE(i, j) = tmp_arr(i, j)
2342                     Next j
2343                 ElseIf i >= firstrow - 25 Then
2344                     arrE(i, cIdKey) = sel_arrkey(i - firstrow + 26, 1)
2345                     arrE(i, cRevTeh) = sel_arrkey(i - firstrow + 26, 2)
2346                     notempt = False
2347                     For j = cs To cDname
2348                         If sel_arr(i - firstrow + 26, j - cs + 1) <> "" And Not notempt Then notempt = True
2349                         arrE(i, j) = sel_arr(i - firstrow + 26, j - cs + 1)
2350                     Next j
2351                     arrE(i, ufirst) = IIf(UKnew(i - firstrow + 26, 0) > 0 And UKnew(i - firstrow + 26, 0) < 5, CStr(UKnew(i - firstrow + 26, 0)), "")
2352                     arrE(i, kfirst) = IIf(UKnew(i - firstrow + 26, 1) > 0 And UKnew(i - firstrow + 26, 1) < 7, CStr(UKnew(i - firstrow + 26, 1)), "")
2353                     arrE(i, cDlist) = sel_arr(i - firstrow + 26, 10)
2354                     For j = ce To cError
2355                         If sel_arr(i - firstrow + 26, j - ce + 17) <> "" And Not notempt Then notempt = True
2356                         arrE(i, j) = sel_arr(i - firstrow + 26, j - ce + 17)
                        
2358                         If (j = ce Or j = ce + 1) And IsDate(sel_arr(i - firstrow + 26, j - ce + 17)) Then
2359                             sel_arr(i - firstrow + 26, j - ce + 17) = CDbl(CDate(sel_arr(i - firstrow + 26, j - ce + 17)))
2360                         End If
2361                     Next j
2362                     If notempt Then
2363                         arrE(i, cKod) = Reg.ComboCode.Value
2364                         If Val(arrE(i, ce + 2)) >= 0 Then
2365                             arrE(i, cMultiM + 1) = Val(arrE(i, ce + 2)) * (Val(arrE(i, ce + 7)) + Val(arrE(i, ce + 9)))
2366                             arrE(i, cMultiM) = Val(arrE(i, ce + 2)) * (Val(arrE(i, ce + 5)) + Val(arrE(i, ce + 8)) + Val(arrE(i, ce + 10)) + Val(arrE(i, ce + 11)))
2367                         End If
2368                     End If
2369                 End If
2370             Next i
2371             If isCheck Then Call workSheetCheck(sel_arr, sel_arrkey, firstrow, True)
2372         Else
2373             If lastrow >= firstrow Then
2374                 For i = LBound(sel_arr) To UBound(sel_arr)
2375                     arrE(i + firstrow - 26, cRevTeh) = sel_arrkey(i, 2)
2376                     notempt = False
2377                     For j = cs To cDname
2378                         If sel_arr(i, j - cs + 1) <> "" And Not notempt Then notempt = True
2379                         arrE(i + firstrow - 26, j) = sel_arr(i, j - cs + 1)
2380                     Next j
2381                     arrE(i + firstrow - 26, ufirst) = IIf(UKnew(i, 0) > 0 And UKnew(i, 0) < 5, CStr(UKnew(i, 0)), "")
2382                     arrE(i + firstrow - 26, kfirst) = IIf(UKnew(i, 1) > 0 And UKnew(i, 1) < 7, CStr(UKnew(i, 1)), "")
2383                     arrE(i + firstrow - 26, cDlist) = sel_arr(i, 10)
2384                     For j = ce To cError
2385                         If sel_arr(i, j - ce + 17) <> "" And Not notempt Then notempt = True
2386                         If (j = ce Or j = ce + 1) And IsDate(sel_arr(i, j - ce + 17)) Then
2387                             arrE(i + firstrow - 26, j) = Format(sel_arr(i, j - ce + 17), "dd.mm.yyyy hh:mm:ss")
2388                             sel_arr(i, j - ce + 17) = CDbl(CDate(sel_arr(i, j - ce + 17)))
2389                         Else
2390                             arrE(i + firstrow - 26, j) = sel_arr(i, j - ce + 17)
2391                         End If
2392                     Next j
2393                     If notempt Then
2394                         If Val(arrE(i + firstrow - 26, ce + 2)) >= 0 Then
2395                             arrE(i + firstrow - 26, cMultiM + 1) = Val(arrE(i + firstrow - 26, ce + 2)) * (Val(arrE(i + firstrow - 26, ce + 7)) + Val(arrE(i + firstrow - 26, ce + 9)))
2396                             arrE(i + firstrow - 26, cMultiM) = Val(arrE(i + firstrow - 26, ce + 2)) * (Val(arrE(i + firstrow - 26, ce + 5)) + Val(arrE(i + firstrow - 26, ce + 8)) + Val(arrE(i + firstrow - 26, ce + 10)) + Val(arrE(i + firstrow - 26, ce + 11)))
2397                         End If
2398                         arrE(i + firstrow - 26, cKod) = Reg.ComboCode.Value
2399                         arrE(i + firstrow - 26, cIdKey) = sel_arrkey(i, 1)
2400                     Else
2401                         If Val(arrE(i + firstrow - 26, ce + 2)) >= 0 Then
2402                             arrE(i + firstrow - 26, cMultiM + 1) = ""
2403                             arrE(i + firstrow - 26, cMultiM) = ""
2404                         End If
2405                         arrE(i + firstrow - 26, cKod) = ""
2406                         arrE(i + firstrow - 26, cIdKey) = ""
2407                     End If
2408                 Next i
                
2410                 If isCheck Then Call workSheetCheck(sel_arr, sel_arrkey, firstrow)
2411             End If
2412         End If
    
2414         If lastrow >= firstrow Then
2415             Reg.Range("a" & firstrow, "ad" & lastrow) = sel_arr
            
2417             If Not UBound(tmp_address) = -1 Then
2418                 For j = LBound(tmp_address, 2) To UBound(tmp_address, 2)
2419                     Reg.Range("a" & firstrow, "ad" & lastrow).Cells(tmp_address(0, j), tmp_address(1, j)) = tmp_address(2, j)
2420                 Next j
2421             End If
2422             Reg.Range("BB" & firstrow, "BC" & lastrow) = sel_arrkey
2423         End If
2424         sheetChanged = True
2425     End If
    
2427     ThisWorkbook.Saved = True '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
2428     ret = EnableEvents("Worksheet_Change", ret)
    
                                                                
                                                                addlog "END Private Sub Worksheet_Change(" & Target.Address & ")"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)

End Sub

Private Sub Worksheet_Deactivate()
2438     RegDeact = True
2439     Call query
2440     RegDeact = False
End Sub

Sub workSheetCheck(sel_arr, sel_arrkey, firstrow, Optional inArr As Boolean = False)
    On Error GoTo Errors
                                                                addlog "START Private Sub workSheetCheck"
2446     cIdKey = ArrFind(arr_columnE, "IdKey")
2447     cs = ArrFind(arr_columnE, "Num")
2448     cDname = ArrFind(arr_columnE, "Dname")
2449     cError = ArrFind(arr_columnE, "Error")
2450     cRevTeh = ArrFind(arr_columnE, "RevTeh")
2451     For i = LBound(sel_arr) To UBound(sel_arr)
2452         If arrE(i + firstrow - 26, cRevTeh) = "1" Or arrE(i + firstrow - 26, cRevTeh) = "2" Then
2453             entN = True
2454         Else
2455             entN = False
2456         End If
2457         compare = False
2458         newempty = True
2459         iRow = ArrFind(arrEold, sel_arrkey(i, 1), , "IdKey")
2460         If inArr Then
2461             inArrComp = i + firstrow - 26 <= UBound(arrEold)
2462         Else
2463             inArrComp = True
2464         End If
        
2466         For j = cDname To cError - 2
2467             If arrE(i + firstrow - 26, j) <> "" And newempty Then newempty = False
2468         Next j
        
2470         If inArrComp Then
2471             If Not IsNull(iRow) Then
2472                 If Not DicCheck.exists(sel_arrkey(i, 1)) Then
2473                     compare = getCompare(i, firstrow + i - 1, iRow)
                    
2475                     If compare And Not newempty Then
2476                         If entN Then tx = "P" Else tx = "E"
2477                         DicCheck.Add sel_arrkey(i, 1), tx
2478                         sel_arr(i, 8) = tx
2479                     ElseIf newempty Then
2480                         DicCheck.Add sel_arrkey(i, 1), "D"
2481                         sel_arr(i, 8) = "D"
2482                         sel_arr(i, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
2483                         arrE(i + firstrow - 26, cDname - 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
2484                         arrE(i + firstrow - 26, cIdKey) = sel_arrkey(i, 1)
2485                         arrE(i + firstrow - 26, 0) = Reg.ComboCode.Value
2486                         arrE(i + firstrow - 26, cs) = arrEold(iRow, cs)
2487                         sel_arr(i, 1) = arrEold(iRow, cs)
2488                          ElseIf sel_arr(i, 8) = "V" Then
2489                              DicCheck.Add sel_arrkey(i, 1), "V"
2490                         Else
2491                              sel_arr(i, 8) = ""
2492                     End If
2493                 ElseIf DicCheck.Item(sel_arrkey(i, 1)) <> "N" Then
2494                     compare = getCompare(i, firstrow + i - 1, iRow)

2496                     If compare And Not newempty Then
2497                         If entN Then tx = "P" Else tx = "E"
2498                         DicCheck.Item(sel_arrkey(i, 1)) = tx
2499                         sel_arr(i, 8) = tx
2500                     ElseIf newempty Then
2501                         DicCheck.Item(sel_arrkey(i, 1)) = "D"
2502                         sel_arr(i, 8) = "D"
2503                         sel_arr(i, 2) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
2504                         sel_arr(i, 1) = arrEold(iRow, cs)
2505                         arrE(i + firstrow - 26, cDname - 1) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
2506                         arrE(i + firstrow - 26, cIdKey) = sel_arrkey(i, 1)
2507                         arrE(i + firstrow - 26, 0) = Reg.ComboCode.Value
2508                         arrE(i + firstrow - 26, cs) = arrEold(iRow, cs)
2509                     Else
2510                         DicCheck.Item(sel_arrkey(i, 1)) = "V"
2511                         sel_arr(i, 8) = "V"
2512                     End If
2513                 End If
2514             Else
2515                 If Not newempty Then
2516                     If entN Then tx = "P" Else tx = "N"
2517                     If sel_arrkey(i, 1) = "" Then
2518                         sel_arrkey(i, 1) = "@" & Val(CDbl(Now) * 10000) & Int(99999 * Rnd)
2519                         arrE(i + firstrow - 26, cIdKey) = sel_arrkey(i, 1)
2520                     End If
2521                     If DicCheck.exists(sel_arrkey(i, 1)) Then
2522                         DicCheck.Item(sel_arrkey(i, 1)) = tx
2523                         sel_arr(i, 8) = tx
2524                     Else
2525                         DicCheck.Add sel_arrkey(i, 1), tx
2526                         sel_arr(i, 8) = tx
2527                     End If
2528                 End If
2529             End If
2530         ElseIf inArr Then
2531             If Not newempty Then
2532                 If entN Then tx = "P" Else tx = "N"
2533                 If sel_arrkey(i, 1) = "" Then
2534                     sel_arrkey(i, 1) = "@" & Val(CDbl(Now) * 10000) & Int(99999 * Rnd)
2535                     arrE(i + firstrow - 26, cIdKey) = sel_arrkey(i, 1)
2536                 End If
2537                 If Not DicCheck.exists(sel_arrkey(i, 1)) Then
2538                     DicCheck.Add sel_arrkey(i, 1), tx
2539                     sel_arr(i, 8) = tx
2540                 End If
2541             End If
2542         End If
2543     Next i
                                                                addlog "END Private Sub workSheetCheck"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Function getCompare(i, CommRow, iRow)
    On Error GoTo Errors
2551     Reg.Range("a" & CommRow, "ad" & CommRow).ClearComments
2552     Utext = Array("""0,4 |fffd||fffd|""", """6 - 20 |fffd||fffd|""", """27,5 - 35 |fffd||fffd|""", """110-154 |fffd||fffd|""")
2553     Ktext = Array("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd|-|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
2554     cDname = ArrFind(arr_columnE, "Dname")
2555     cN110 = ArrFind(arr_columnE, "N110")
2556     Set allComment = CreateObject("Scripting.Dictionary")
        ddiff = 1
2558     For j = cDname To cN110
2559         If arrEold(iRow, j) <> arrE(CommRow - 25, j) Then
2560             Select Case j
                Case 2 To 4
2562                     Reg.Range("a" & CommRow, "ad" & CommRow).Cells(1, j - 1).AddComment arrEold(iRow, j)
2563                     Call SetCommentFont(Reg.Range("a" & CommRow, "ad" & CommRow).Cells(1, j - 1))
2564                     allComment.Add arr_columnE(j) & ": " & arrEold(iRow, j), ""
                Case 5
2566                     If arrEold(iRow, j) <> "" Then text = Utext(4 - Val(arrEold(iRow, j)))
                    
2568                     Reg.Range("a" & CommRow, "ad" & CommRow).Cells(1, j - 2 + IIf(arrE(CommRow - 25, j) = "", 1, arrE(CommRow - 25, j))).AddComment "{" & arrEold(iRow, j) & "}" & vbLf & text
2569                     Call SetCommentFont(Reg.Range("a" & CommRow, "ad" & CommRow).Cells(1, j - 2 + IIf(arrE(CommRow - 25, j) = "", 1, arrE(CommRow - 25, j))))
2570                     allComment.Add arr_columnE(j) & ": " & text, ""
                Case 6
2572                     If arrEold(iRow, j) <> "" Then text = Ktext(Val(arrEold(iRow, j)) - 1)
                    
2574                     Reg.Range("a" & CommRow, "ad" & CommRow).Cells(1, j + 4 + IIf(arrE(CommRow - 25, j) = "", 1, arrE(CommRow - 25, j))).AddComment "{" & arrEold(iRow, j) & "}" & vbLf & text
2575                     Call SetCommentFont(Reg.Range("a" & CommRow, "ad" & CommRow).Cells(1, j + 4 + IIf(arrE(CommRow - 25, j) = "", 1, arrE(CommRow - 25, j))))
2576                     allComment.Add arr_columnE(j) & ": " & text, ""
                Case Else
                        If j = 8 Or j = 9 Then
                            If IsDate(arrEold(iRow, j)) And IsDate(arrE(CommRow - 25, j)) Then
                                 ddiff = DateDiff("n", arrEold(iRow, j), arrE(CommRow - 25, j))
                                 If ddiff = 0 Then GoTo nextselect
                            End If
                        End If
2578                     Reg.Range("a" & CommRow, "ad" & CommRow).Cells(1, j + 9).AddComment arrEold(iRow, j)
2579                     Call SetCommentFont(Reg.Range("a" & CommRow, "ad" & CommRow).Cells(1, j + 9))
2580                     allComment.Add arr_columnE(j) & ": " & arrEold(iRow, j), ""
nextselect:
2581             End Select
2582             If ddiff <> 0 Then tmp_compare = True
2583         End If
2584     Next j
2585     If allComment.Count > 0 Then
2586         arr = allComment.keys
2587         text = Join(arr, vbLf)
2588         Reg.Range("H" & CommRow).AddComment text
2589         allComment.RemoveAll
2590         Call SetCommentFont(Reg.Range("H" & CommRow))
2591     End If
    
2593     getCompare = tmp_compare
    Exit Function
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Function

Private Sub SetCommentFont(r As Range)
2599     With r.Comment.Shape.TextFrame
2600         .ReadingOrder = xlContext
2601         .AutoSize = True
2602         .Characters.Font.Size = 20
2603     End With
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    On Error GoTo Errors
2608     If (Union(Target.Cells, Range("AF26:AY65000")).Address = Range("AF26:AY65000").Address) And Reg.CheckPass.Value = True Then
2609         If Target.Cells(1).Locked = False Then Call LockTarget(Target, , True)
2610     End If
    
2612     If (Union(Target.Cells, Range("A26:AD65000")).Address = Range("A26:AD65000").Address) And Reg.CheckBlock.Value = True Then
2613         If Target.Cells(1).Locked = False Then Call LockTarget(Target, , True)
2614     End If
    
2616     If Image3.Visible = True Then Image3.Visible = False
    
2618     If Not (Application.CutCopyMode = xlCopy Or Application.CutCopyMode = xlCut Or Reg.CheckBlock = True) Then
2619         If (Union(Target.Cells(1), Range("Q26:R65000")).Address = Range("Q26:R65000").Address) Then
2620             Image1.Top = Target.Cells(1).Top
2621             Image1.Left = Target.Cells(1).Left - Image1.Width
2622             Image1.Visible = True
2623         Else
2624             If Image1.Visible Then Image1.Visible = False
2625         End If
    
2627         If (Union(Target.Cells(1), Range("C26:C65000"), Range("J26:J65000")).Address = Union(Range("C26:C65000"), Range("J26:J65000")).Address) Then
2628             Image2.Top = Target.Cells(1).Top
2629             Image2.Left = Target.Cells(1).Left - Image2.Width
2630             Image2.Visible = True
2631         Else
2632             If Image2.Visible Then Image2.Visible = False
2633         End If
2634     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub
Public Sub JoinArch()
    On Error GoTo Errors
                                        addlog "START Public Sub JoinArch"
    Dim longarh As Boolean
    Dim folder_name As String
    Dim tmp_f() As String
    Dim fileForSimile As Collection
    Dim arhiv As Boolean
    Dim replacement As Boolean
2647     Set folder = FSO.GetFolder(ThisWorkbook.path & "\" & FoldY)  'years
2648     Set years = New Collection
2649     Set fileForSimile = New Collection
2650     Set DicBlock = CreateObject("Scripting.Dictionary")
2651     years.Add CInt(Format(Now, "yyyy")), Format(Now, "yyyy")
    
2653     colkodpem = ArrFind(arr_columnPEM, "KodPEM")
2654     colLEP = ArrFind(arr_columnI, "LEP")
2655     colKodPEMI = ArrFind(arr_columnI, "KodPEM")
2656     colBlock = ArrFind(arr_columnC, "Block")
2657     colKodPEMC = ArrFind(arr_columnC, "KodPEM")

    Dim firstarh As Boolean
2660     firstarh = True
    
2662     If Reg.SheetExists("UA") Then
2663         Set folder1 = FSO.GetFolder(ThisWorkbook.path & "\")
2664         For Each File In folder1.subfolders
2665             If Left(File.Name, 2) = "20" Then
2666                 If CInt(File.Name) > 2000 And CInt(File.Name) < 2100 Then
2667                     If Not Contains(years, File.Name) Then
2668                          If CInt(File.Name) < years(1) Then
2669                              years.Add CInt(File.Name), File.Name, 1
2670                          ElseIf CInt(File.Name) > years(years.Count) Then
2671                              years.Add CInt(File.Name), File.Name
2672                          Else
2673                              For i = 1 To years.Count - 1
2674                                  If years(i) < CInt(File.Name) And CInt(File.Name) < years(i + 1) Then
2675                                      years.Add CInt(File.Name), File.Name, i + 1: Exit For
2676                                  End If
2677                              Next i
2678                          End If
2679                     End If
2680                 End If
2681             End If
2682         Next
2683     End If

2685     For Each File In folder.Files
2686         tmp_f = Split(File.Name, ".")
2687         If UBound(tmp_f) > 0 And Left(tmp_f(0), 3) = "EI_" Then
2688             If tmp_f(1) = "rar" Then
2689                 arr_fname = Split(tmp_f(0), "_")
2690                 If CInt(arr_fname(1)) > 2000 And CInt(arr_fname(1)) < 2100 And UBound(arr_fname) > 1 Then
2691                     If Not Reg.SheetExists("UA") Then
2692                         If Not Contains(years, arr_fname(1)) Then
2693                              If CInt(arr_fname(1)) < years(1) Then
2694                                  years.Add CInt(arr_fname(1)), arr_fname(1), 1
2695                              ElseIf CInt(arr_fname(1)) > years(years.Count) Then
2696                                  years.Add CInt(arr_fname(1)), arr_fname(1)
2697                              Else
2698                                  For i = 1 To years.Count - 1
2699                                      If years(i) < CInt(arr_fname(1)) And CInt(arr_fname(1)) < years(i + 1) Then
2700                                          years.Add CInt(arr_fname(1)), arr_fname(1), i + 1: Exit For
2701                                      End If
2702                                  Next i
2703                              End If
2704                         End If
2705                     End If
                    
2707                     If Right(tmp_f(0), 1) = "+" Then
2708                         folder_name = arr_fname(0) & "_" & arr_fname(1) & "_" & arr_fname(2) & "+"
2709                     Else
2710                         folder_name = arr_fname(0) & "_" & arr_fname(1) & "_" & arr_fname(2)
2711                     End If
                    
2713                     Select Case UBound(arr_fname)
                        Case 2
2715                             fileForSimile.Add tmp_f(0), folder_name
2716                             firstarh = False
                            
                        Case 3
2719                             If firstarh Then
2720                                 fileForSimile.Add tmp_f(0), folder_name
2721                                 firstarh = False
2722                             Else
2723                                 If Not Contains(fileForSimile, folder_name) Then
2724                                     fileForSimile.Add tmp_f(0), folder_name
2725                                 Else
2726                                     If Not longarh Then
2727                                         Call Reg.UnpackBackup(FoldY & fileForSimile(folder_name), folder_name)
2728                                         longarh = True
2729                                     End If
2730                                     arrI = ArrLoad(FoldY & folder_name & "\" & "I" & arr_fname(1) + ".txt", arr_columnI)
2731                                     arrPEM = ArrLoad(FoldY & folder_name & "\" & "PEM" & arr_fname(2) & ".txt", arr_columnPEM)
2732                                     arrC = ArrLoad(FoldY & folder_name & "\" & "C" & arr_fname(1) + ".txt", arr_columnC)
2733                                     arrRep = ArrLoad(FoldY & folder_name & "\" & "Report" & arr_fname(2) & "_" & arr_fname(1) & ".txt", arr_columnRep)
                                    
                                    '''''''''''''''''''''''''''''''''''''''''''''''''''''''
2736                                     fh = ThisWorkbook.path & "\" & FoldY & "Arhive"
2737                                     If Not FSO.FolderExists(fh) Then
2738                                         FSO.CreateFolder fh
2739                                     End If
                                    
2741                                     For i = 1 To UBound(arrPEM)
2742                                         If arrPEM(i, colkodpem) = arr_fname(3) Then
2743                                             replacement = True
2744                                             FSO.Copyfile ThisWorkbook.path & "\" & FoldY & folder_name & ".rar", fh & "\"
                                            Exit For
2746                                         End If
2747                                     Next i
                                    
2749                                     For i = 1 To UBound(arrI) Step 6
2750                                         If arrI(i + 4, colLEP) <> "" Then
2751                                             kkey = arr_fname(1) & "_" & arr_fname(2) & "_" & arrI(i + 4, colKodPEMI) & "_00"
2752                                             If Not DicBlock.exists(kkey) Then DicBlock.Add kkey, ""
2753                                         End If
2754                                     Next i
2755                                     For i = 1 To UBound(arrC) Step 12
2756                                         For j = 1 To 12
2757                                             m = CStr(j)
2758                                             If j < 10 Then m = "0" & m
2759                                             If arrC(i + j - 1, colBlock) <> "" And arrC(i + j - 1, colBlock - 1) <> "" Then
2760                                                 kkey = arr_fname(1) & "_" & arr_fname(2) & "_" & arrC(i, colKodPEMC) & "_" & m
2761                                                 If Not DicBlock.exists(kkey) Then DicBlock.Add kkey, ""
2762                                             End If
2763                                         Next j
2764                                     Next i
                                    
2766                                     tmpi = arrI
2767                                     tmpPEM = arrPEM
2768                                     tmpC = arrC
2769                                     tmpRep = arrRep
2770                                     Call Reg.UnpackBackup(FoldY & tmp_f(0))
2771                                     arrI = ArrLoad(FoldY & tmp_f(0) & "\" & "I" & arr_fname(1) + ".txt", arr_columnI)
2772                                     arrPEM = ArrLoad(FoldY & tmp_f(0) & "\" & "PEM" & arr_fname(2) & ".txt", arr_columnPEM)
2773                                     arrC = ArrLoad(FoldY & tmp_f(0) & "\" & "C" & arr_fname(1) + ".txt", arr_columnC)
2774                                     arrRep = ArrLoad(FoldY & tmp_f(0) & "\" & "Report" & arr_fname(2) & "_" & arr_fname(1) & ".txt", arr_columnRep)
                                    
2776                                     arrI = ArrJoin(tmpi, arrI, Array("Kod", "KodPEM"), 6, , Array(arr_fname(1), 1)) ', , Array("LEP", 4), replacement, 6, arr_fname(3))
2777                                     arrPEM = ArrJoin(tmpPEM, arrPEM, Array("KodCompany", "KodPEM")) 'replacement, 1, arr_fname(3))
2778                                     arrC = ArrJoin(tmpC, arrC, Array("Kod", "KodPEM"), 12, Array("Month", "NEnd"), Array(arr_fname(1), 3)) ', Array("Block", 0) replacement, 12, arr_fname(3))
2779                                     arrRep = ArrJoin(tmpRep, arrRep, Array("Kod", "KodPEM", "Month"), 9, , Array(arr_fname(1), 2)) ' replacement, 9, arr_fname(3), False)
2780                                     Call Reg.ArrSave(arrI, ThisWorkbook.path & "\" & FoldY & folder_name, "I" & arr_fname(1) + ".txt")
2781                                     Call Reg.ArrSave(arrPEM, ThisWorkbook.path & "\" & FoldY & folder_name, "PEM" & arr_fname(2) + ".txt")
2782                                     Call Reg.ArrSave(arrC, ThisWorkbook.path & "\" & FoldY & folder_name, "C" & arr_fname(1) + ".txt")
2783                                     Call Reg.ArrSave(arrRep, ThisWorkbook.path & "\" & FoldY & folder_name, "Report" & arr_fname(2) & "_" & arr_fname(1) & ".txt")
2784                                     Set folder2 = FSO.GetFolder(ThisWorkbook.path & "\" & FoldY & tmp_f(0))
2785                                     For Each File2 In folder2.Files
2786                                         If Left(File2.Name, 3) = "ESI" Then
2787                                             tmpEsi = Split(File2.Name, "_")
2788                                             kkey = tmpEsi(1) & "_" & Right(tmpEsi(0), 5) & "_" & Left(tmpEsi(3), 2) & "_" & tmpEsi(2)
2789                                             If Not DicBlock.exists(kkey) Then FSO.Copyfile File2.path, ThisWorkbook.path & "\" & FoldY & folder_name & "\"
2790                                         ElseIf Left(File2.Name, 3) = "T12" Then
2791                                             tmpEsi = Split(File2.Name, "_")
2792                                             kkey = tmpEsi(1) & "_" & Right(tmpEsi(0), 5) & "_" & Left(tmpEsi(2), 2) & "_00"
2793                                             If Not DicBlock.exists(kkey) Then FSO.Copyfile File2.path, ThisWorkbook.path & "\" & FoldY & folder_name & "\"
2794                                         ElseIf Left(File2.Name, 3) <> "I20" And Left(File2.Name, 3) <> "PEM" And Left(File2.Name, 3) <> "C20" And Left(File2.Name, 3) <> "Rep" Then
2795                                             FSO.Copyfile File2.path, ThisWorkbook.path & "\" & FoldY & folder_name & "\"
2796                                         End If
2797                                     Next
2798                                     FSO.DeleteFolder folder2.path
2799                                     FSO.Copyfile File.path, fh & "\"
2800                                     FSO.DeleteFile File.path
2801                                     If FSO.FileExists(ThisWorkbook.path & "\" & FoldY & fileForSimile(folder_name) & ".rar") And Len(fileForSimile(folder_name)) > 13 Then
2802                                         FSO.Copyfile ThisWorkbook.path & "\" & FoldY & fileForSimile(folder_name) & ".rar", fh & "\"
2803                                         FSO.DeleteFile ThisWorkbook.path & "\" & FoldY & fileForSimile(folder_name) & ".rar"
2804                                     End If

2806                                     arhiv = True
2807                                     fileForSimile.Remove (folder_name)
2808                                     fileForSimile.Add folder_name, folder_name
2809                                 End If
2810                             End If
2811                     End Select
2812                 Else
                   
2814                 End If
2815             End If
2816         End If

2818     Next File
2819     If arhiv Then Call Reg.CreateBackup(FoldY & folder_name)
    
2821     Reg.ComboYear.Clear
2822     firstacn = True
2823     Ind.ComboYear.Clear
2824     Rep.ComboYear.Clear
2825     Rank.ComboYear.Clear
2826     Er.ComboYear.Clear
    
2828     For i = 1 To years.Count
2829         Reg.ComboYear.AddItem years.Item(i)
2830         Ind.ComboYear.AddItem years.Item(i)
2831         Rep.ComboYear.AddItem years.Item(i)
2832         Rank.ComboYear.AddItem years.Item(i)
2833         Er.ComboYear.AddItem years.Item(i)
2834     Next i
2835     If Contains(years, CStr(Data.Range("year").Value)) Then
2836         Reg.ComboYear.Value = Data.Range("year").Value
2837         Ind.ComboYear.Value = Data.Range("year").Value
2838         Rep.ComboYear.Value = Data.Range("year").Value
2839         Rank.ComboYear.Value = Data.Range("year").Value
2840         Er.ComboYear.Value = Data.Range("year").Value
2841     Else
2842         Reg.ComboYear.Value = Format(Now, "yyyy")
2843         Ind.ComboYear.Value = Format(Now, "yyyy")
2844         Rep.ComboYear.Value = Format(Now, "yyyy")
2845         Rank.ComboYear.Value = Format(Now, "yyyy")
2846         Er.ComboYear.Value = Format(Now, "yyyy")
2847     End If
2848     firstacn = False
                                        addlog "JoinArch (set year)"
2850     folder_name = "EI_" & Data.Range("year").Value & "_" & Data.Range("Kod").Value
2851     If Data.Range("Kod").Value <> "" And Data.Range("PEMKod").Value <> "" And Not FSO.FolderExists(ThisWorkbook.path & "\" & FoldY & folder_name) And Not FSO.FileExists(ThisWorkbook.path & "\" & FoldY & folder_name & ".rar") And divisions.Count < 2 Then
2852         file_name = "EI_" & Data.Range("year").Value & "_" & Data.Range("Kod").Value & "_" & Data.Range("PEMKod").Value
2853     ElseIf Contains(fileForSimile, folder_name) Then
2854         file_name = fileForSimile(folder_name)
2855     Else
2856         file_name = folder_name
2857     End If


2860     If FSO.FileExists(ThisWorkbook.path & "\" & FoldY & file_name & ".rar") And Not FSO.FolderExists(ThisWorkbook.path & "\" & FoldY & file_name) Then
                                        addlog "JoinArch( Call Reg.UnpackBackup(" & file_name & "))"
2862         Call Reg.UnpackBackup(FoldY & file_name)
2863     End If
                                        
                                        addlog "END Public Sub JoinArch"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Public Sub openArch()
    On Error GoTo Errors
                                        addlog "START Public Sub openArch (Year = " & Reg.ComboYear.text & "; Kod = " & CStr(Data.Range("kod").Value) & "; PEMkod = " & Data.Range("pemkod").Value & ")"


2875     If FSO.FileExists(ThisWorkbook.path & "\" & FoldY & file_name & "\" & "CName" & CStr(Data.Range("kod").Value) + ".txt") Then
2876         arrNameComp = ArrLoad(FoldY & file_name & "\" & "CName" & CStr(Data.Range("kod").Value) + ".txt", arr_columnCName)
2877         Data.Range("Names").Cells(Data.Range("Kods").Find(arrNameComp(1, 0)).Row, 1).Value = arrNameComp(1, 1)
2878     End If
2879     Call ArrLoadI(FoldY & file_name & "\" & "I" & CStr(Data.Range("year").Value) + ".txt") '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
2880     If isCheck Then
2881         Call arrloadold(, 1)
2882     End If
2883     Call SetRangI
2884     Call ArrLoadT(FoldY & file_name & "\" & "T" & CStr(Data.Range("kod").Value) & "_" & CStr(Data.Range("year").Value) & "_" & Data.Range("pemkod").Value & ".txt")
2885     Call SetRangT
2886     Call ArrLoadC(FoldY & file_name & "\" & "C" & CStr(Data.Range("year").Value) + ".txt")
2887     Call SetRangC
2888     Call ArrLoadE(FoldY & file_name & "\" & "ESI" & CStr(Data.Range("kod").Value) & "_" & CStr(Data.Range("year").Value) & "_" & Reg.ComboMonth.Value & "_" & Data.Range("pemkod").Value & ".txt")
2889     If isCheck Then
2890         Call arrloadold(1)
2891     End If
2892     Call SetRangE

                                        addlog "END Public Sub openArch " & file_name
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub
Sub arrloadold(Optional arE As Integer, Optional arI As Integer)
2899     If arE > 0 Then
2900         If FSO.FileExists(ThisWorkbook.path & "\" & FoldY & file_name & "\-ESI" & CStr(Data.Range("kod").Value) & "_" & CStr(Data.Range("year").Value) & "_" & Reg.ComboMonth.Value & "_" & Data.Range("pemkod").Value & ".txt") Then
2901             arrEold = ArrLoad(FoldY & file_name & "\" & "-ESI" & CStr(Data.Range("kod").Value) & "_" & CStr(Data.Range("year").Value) & "_" & Reg.ComboMonth.Value & "_" & Data.Range("pemkod").Value & ".txt", arr_columnE)
2902         Else
2903             arrE = PrepareOld(arrE)
2904             Call Reg.ArrSave(arrE, ThisWorkbook.path & "\" & FoldY & file_name, "ESI" & Reg.ComboCode.Value & "_" & Reg.ComboYear.text & "_" & Reg.ComboMonth.Value & "_" & Reg.ComboCodePEM.Value & ".txt")
2905             arrEold = arrE
2906         End If
2907     End If
2908     If arI > 0 Then
2909         If FSO.FileExists(ThisWorkbook.path & "\" & FoldY & file_name & "\-I" & CStr(Data.Range("year").Value) + ".txt") Then
2910             arrIold = ArrLoad(FoldY & file_name & "\" & "I" & CStr(Data.Range("year").Value) + ".txt", arr_columnI)
2911         Else
2912             arrIold = arrI
2913         End If
2914     End If
End Sub

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub Image1_Click()
    On Error GoTo Errors
    Dim d As String
                                        addlog "START Public Sub Image1_Click"
    
2923     If NVal(Reg.ComboCode.Value) = 0 Then
2924         MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", , "|fffd||fffd||fffd||fffd||fffd|!"
                                            addlog "END Private Sub Image1_Click (Reg.ComboCode.Value is empty)"
        Exit Sub
2927     End If
2928     If NStr(Reg.ComboCodePEM.Value) = "" Then
2929         MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", , "|fffd||fffd||fffd||fffd||fffd|!"
                                            addlog "END Private Sub Image1_Click ((Reg.ComboCodePEM.Value) = '')"
        Exit Sub
2932     End If
    
2934     d = "01." & NStr(Reg.ComboMonth.Value) & "." & CStr(Data.Range("year").Value)
2935     If Now >= d And Now < DateAdd("m", 1, d) Then d = Day(Now) & "." & NStr(Reg.ComboMonth.Value) & "." & CStr(Data.Range("year").Value)
    
2937     If Union(Selection.Cells(1), Range("R:R")).Address = Range("R:R").Address Then
2938         If IsDate(Selection.Cells(1).Offset(0, -1).Value) Then d = Selection.Cells(1).Offset(0, -1).Value
2939     End If
2940     nnn = IDate(d, Selection.Cells(1).Address(RowAbsolute:=False, ColumnAbsolute:=False), Selection.Cells(1).Value)
    
2942     If nnn <> NStr(Selection.Cells(1).Value) Then
2943         If IsDate(nnn) Then Selection.Cells(1).Value2 = CDbl(CDate(nnn))
2944         Selection.Cells(1).NumberFormat = "dd.mm.yyyy hh:mm"
2945     End If
                                        addlog "END Public Sub Image1_Click"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub CommandButton2_Click()
    On Error GoTo Errors
2954     If Reg.ComboCodePEM.Value = "" Then
2955         MsgBox "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|!", , "|fffd||fffd||fffd||fffd||fffd|!"
2956     Else
2957         UserForm2.Show
2958     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub
'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub CommandButton3_Click()
2964         UserForm3.Show
End Sub

''|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|

Sub CreateBackup(Name As String, Optional q As String = "")
    On Error GoTo Errors
                                                                addlog "START Sub CreateBackup " & Name
2972     WinRarApp$ = """" & ThisWorkbook.path & "\Arch.exe"" a -ep"
2973     If q = "" Then q = ThisWorkbook.path & "\"
2974     b = q & Name & ".rar"
2975     adr$ = WinRarApp$ & " """ & b & """ """ & q & Name & "\" & """ "
2976     RetVal = ShellAndWait(adr$, 100000, vbHide, IgnoreBreak)
                                                                addlog "END Sub CreateBackup " & Name
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub


Sub UnpackBackup(Name As String, Optional destination As String) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error GoTo Errors
                                                                addlog "START Sub UnpackBackup " & Name
2986     WinRarApp$ = """" & ThisWorkbook.path & "\Arch.exe"" e -o+"
2987     q = ThisWorkbook.path & "\"
2988     If destination = "" Then
2989         b = q & Name
2990     Else
2991         b = q & destination
2992     End If
2993     adr$ = WinRarApp$ & " """ & q & Name & ".rar"" """ & b & "\"""
2994     RetVal = ShellAndWait(adr$, 100000, vbHide, IgnoreBreak)
2995     SetAttr b & "\", vbHidden
                                                                addlog "END Sub UnpackBackup " & Name
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

' |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2009|fffd|.



Public Sub revision(sel_arr, arr_I, i, Optional typ As Integer, Optional eError, Optional rMonth, Optional rYear, Optional Karr_I) '|fffd||fffd||fffd| arrE diff=3, diff1 =
    On Error GoTo Errors
'    Dim tehExist() As Integer
'    ReDim tehExist(-1 To -1)
'    Dim sumteh
'    Dim suminter
    Dim notdate As Boolean
    
3013     If IsMissing(rMonth) Then rMonth = Reg.ComboMonth.Value
3014     If IsMissing(rYear) Then rYear = Reg.ComboYear.Value
3015     If IsMissing(Karr_I) Then Karr_I = KarrI
3016     If typ = 1 Or typ = 2 Then
3017         cDname = ArrFind(sel_arr, "Dname", 1)
3018         Uk = Val(sel_arr(i, ArrFind(sel_arr, "U", 1)))
3019         Kk = Val(sel_arr(i, ArrFind(sel_arr, "K", 1)))
3020         cT1 = ArrFind(sel_arr, "T1", 1)
3021         cT2 = ArrFind(sel_arr, "T2", 1)
3022         cNtrm = ArrFind(sel_arr, "Ntrm", 1)
3023         cN04m = ArrFind(sel_arr, "N04m", 1)
3024         cNtrs = ArrFind(sel_arr, "Ntrs", 1)
3025         cN04s = ArrFind(sel_arr, "N04s", 1)
3026         cN6m = ArrFind(sel_arr, "N6m", 1)
3027         cN6s = ArrFind(sel_arr, "N6s", 1)
3028         cN35 = ArrFind(sel_arr, "N35", 1)
3029         cN110 = ArrFind(sel_arr, "N110", 1)
3030         cError = ArrFind(sel_arr, "Error", 1)
3031         cRevTeh = ArrFind(sel_arr, "RevTeh", 1): cComm = ArrFind(sel_arr, "Comm", 1)
3032         firstrow = 26: adcol = 10
3033         If (sel_arr(i, cNtrm) <> "" Or sel_arr(i, cN04m) <> "") And (Val(sel_arr(i, cNtrm)) = 0 And Val(sel_arr(i, cN04m)) = 0) Then
3034             sel_arr(i, cNtrm) = ""
3035             sel_arr(i, cN04m) = ""
3036         End If
3037         If (sel_arr(i, cNtrs) <> "" Or sel_arr(i, cN04s) <> "") And (Val(sel_arr(i, cNtrs)) = 0 And Val(sel_arr(i, cN04s)) = 0) Then
3038             sel_arr(i, cNtrs) = ""
3039             sel_arr(i, cN04s) = ""
3040         End If
3041         For w = 0 To 4
3042             If sel_arr(i, cN6m + w) = 0 Then sel_arr(i, cN6m + w) = ""
3043         Next w
3044         If Uk <> 4 Then
3045             If Left(sel_arr(i, cNtrm), 1) = "[" Then sel_arr(i, cNtrm) = RemuvC(sel_arr(i, cNtrm), 1)
3046             If Left(sel_arr(i, cNtrs), 1) = "[" Then sel_arr(i, cNtrs) = RemuvC(sel_arr(i, cNtrs), 1)
3047         End If
3048     Else
3049         cDname = 3: adcol = 0
3050         Uk = 0
3051         For k = 4 To 7 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
3052             If sel_arr(i, k) <> "" Then Uk = k - 3: Exit For
3053         Next k
3054         Kk = 0
3055         For k = 11 To 16 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
3056             If sel_arr(i, k) <> "" Then Kk = k - 10: Exit For
3057         Next k
3058         cT1 = 17
3059         cT2 = 18
3060         cNtrm = 21
3061         cN04m = 22
3062         cNtrs = 23
3063         cN04s = 24
3064         cN6m = 25
3065         cN6s = 26
3066         cN35 = 27
3067         cN110 = 28
3068         cError = 30: cComm = 29
3069     End If
3070     If Not IsMissing(eError) Then eError = ""
    
3072     C = ArrFind(arr_columnI, "C")
3073     LEP = ArrFind(arr_columnI, "LEP")
3074     Tr = ArrFind(arr_columnI, "Tr")
3075     NN = ArrFind(arr_columnI, "N")
3076     U04m = 1
3077     U04s = 2
3078     U6m = 3
3079     U6s = 4
3080     U35 = 5
3081     U110 = 6
3082     m = 0

    
3085     If typ = 0 Or typ = 2 Then sel_arr(i, cError) = ""


3088     If sel_arr(i, cDname) <> "" And sel_arr(i, cT1) = "" Then
3089         eError = 1
3090         If typ = 0 Or typ = 2 Then
3091             sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
3092             notdate = True
3093         Else
3094             number = number + 1
            Exit Sub
3096         End If
3097     End If
    
3099     If sel_arr(i, cDname) = "" And sel_arr(i, cT1) <> "" Then
3100         eError = 1
3101         If typ = 0 Or typ = 2 Then
3102             sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
3103         Else
3104             number = number + 1
            Exit Sub
3106         End If
3107     End If
        
3109     If (IsDate(sel_arr(i, cT1)) = False) And sel_arr(i, cT1) <> "" Then
3110         eError = 1
3111         If typ = 0 Or typ = 2 Then
3112             sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
3113         Else
3114             number = number + 1
            Exit Sub
3116         End If
3117     End If
    
3119     If sel_arr(i, cT1) <> "" Then
3120         If (IsDate(sel_arr(i, cT1)) = True) Then
3121             If (Month(sel_arr(i, cT1)) <> Val(rMonth) Or Year(sel_arr(i, cT1)) <> Val(rYear)) Then
3122                 eError = 1
3123                 If typ = 0 Or typ = 2 Then
3124                     sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
3125                 Else
3126                     number = number + 1
                    Exit Sub
3128                 End If
3129             ElseIf sel_arr(i, cT2) = "" Then
3130                 eError = 1
3131                 If typ = 0 Or typ = 2 Then
3132                     sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
3133                 Else
3134                     number = number + 1
                    Exit Sub
3136                 End If
3137             End If
3138         End If
3139     End If
    
    
3142     If Not IsDate(sel_arr(i, cT2)) And sel_arr(i, cT2) <> "" Then
3143         eError = 1
3144         If typ = 0 Or typ = 2 Then
3145             sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
3146         Else
3147             number = number + 1
            Exit Sub
3149         End If
3150     End If
    



3155     If Uk = 0 And (sel_arr(i, cDname) <> "" Or sel_arr(i, cT1) <> "") Then
3156         eError = 1
3157         If typ = 0 Or typ = 2 Then
3158             sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"" (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 4-7)", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"" (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 4-7)")
3159         Else
3160             number = number + 1
            Exit Sub
3162         End If
3163     End If

3165     If Kk = 0 And (sel_arr(i, cDname) <> "" Or sel_arr(i, cT1) <> "") Then
3166         eError = 1
3167         If typ = 0 Or typ = 2 Then
3168             sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"" (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 8-13)", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"" (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 8-13)")
3169         Else
3170             number = number + 1
            Exit Sub
3172         End If
3173     End If


3176     If (sel_arr(i, cN04m) = "" Or sel_arr(i, cN04m) = 0 Or Not IsNumeric(sel_arr(i, cN04m))) And (sel_arr(i, cN04s) = "" Or sel_arr(i, cN04s) = 0 Or Not IsNumeric(sel_arr(i, cN04s))) And (sel_arr(i, cN6m) = "" Or sel_arr(i, cN6m) = 0 Or Not IsNumeric(sel_arr(i, cN6m))) And (sel_arr(i, cN6s) = "" Or sel_arr(i, cN6s) = 0 Or Not IsNumeric(sel_arr(i, cN6s))) And (sel_arr(i, cN35) = "" Or sel_arr(i, cN35) = 0 Or Not IsNumeric(sel_arr(i, cN35))) And (sel_arr(i, cN110) = "" Or sel_arr(i, cN110) = 0 Or Not IsNumeric(sel_arr(i, cN110))) And (sel_arr(i, cDname) <> "" Or sel_arr(i, cT1) <> "") Then
3177         eError = 1
3178         If typ = 0 Or typ = 2 Then
3179             sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3cff| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 19-25)", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3cff| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 19-25)")
3180         Else
3181             number = number + 1
            Exit Sub
3183         End If
3184     End If

3186     If sel_arr(i, cNtrm) <> "" And (Not IsNumeric(sel_arr(i, cN04m)) Or sel_arr(i, cN04m) = "") Then
3187         eError = 1
3188         If typ = 0 Or typ = 2 Then
3189             sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3cff| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 19) |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0,4 |fffd||fffd|", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3cff| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 19) |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0,4 |fffd||fffd|")
3190         Else
3191             number = number + 1
            Exit Sub
3193         End If
3194     End If

3196     If sel_arr(i, cNtrs) <> "" And (Not IsNumeric(sel_arr(i, cN04s)) Or sel_arr(i, cN04s) = "") Then
3197         eError = 1
3198         If typ = 0 Or typ = 2 Then
3199             sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3cff| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 21) |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0,4 |fffd||fffd|", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3cff| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 21) |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0,4 |fffd||fffd|")
3200         Else
3201             number = number + 1
            Exit Sub
3203         End If
3204     End If
    
3206     If sel_arr(i, cNtrm) = "[0]" Then
3207         eError = 4
3208         If typ = 0 Or typ = 2 Then
3209             sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 19), |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 19), |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.")
3210         Else
3211             m = 1
3212         End If
3213     End If
    
3215     If sel_arr(i, cNtrs) = "[0]" Then
3216         eError = 4
3217         If typ = 0 Or typ = 2 Then
3218             sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 21), |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 21), |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|.")
3219         Else
3220             m = 1
3221         End If
3222     End If

3224     If (IsNumeric(sel_arr(i, cN04m)) And Not IsEmpty(sel_arr(i, cN04m))) And sel_arr(i, cNtrm) = "" And Uk = 4 Then
3225         eError = 1
3226         If typ = 0 Or typ = 2 Then
3227             sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 18) |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0,4 |fffd||fffd|", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 18) |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0,4 |fffd||fffd|")
3228         Else
3229             number = number + 1
            Exit Sub
3231         End If
3232     End If

3234     If (IsNumeric(sel_arr(i, cN04s)) And Not IsEmpty(sel_arr(i, cN04s))) And sel_arr(i, cNtrs) = "" And Uk = 4 Then
3235         eError = 1
3236         If typ = 0 Or typ = 2 Then
3237             sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 20) |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0,4 |fffd||fffd|", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 20) |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0,4 |fffd||fffd|")
3238         Else
3239             number = number + 1
            Exit Sub
3241         End If
3242     End If

3244     If (IsNumeric(sel_arr(i, cN04m)) And Not IsEmpty(sel_arr(i, cN04m))) And sel_arr(i, cNtrm) = "" And Uk < 4 Then
3245         eError = 1
3246         If typ = 0 Or typ = 2 Then
3247             sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 18) |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0,4 |fffd||fffd|", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 18) |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0,4 |fffd||fffd|")
3248         Else
3249             number = number + 1
            Exit Sub
3251         End If
3252     End If

3254     If (IsNumeric(sel_arr(i, cN04s)) And Not IsEmpty(sel_arr(i, cN04s))) And sel_arr(i, cNtrs) = "" And Uk < 4 Then
3255         eError = 1
3256         If typ = 0 Or typ = 2 Then
3257             sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 20) |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0,4 |fffd||fffd|", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 20) |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0,4 |fffd||fffd|")
3258         Else
3259             number = number + 1
            Exit Sub
3261         End If
3262     End If
'
'    For k = 5 To 7 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
'        If sel_arr(i, k + diff1) <> "" Then Uk = k
'    Next k

3268     chek = 0
3269     Utext = ""
3270     Select Case Uk
        Case 2 '27,5 - 35 |fffd||fffd|
3272             chek = cN110
3273             Utext = """27,5 - 35 |fffd||fffd|"""
        Case 3 '6 - 20 |fffd||fffd|
3275             chek = cN35
3276             Utext = """6 - 20 |fffd||fffd|"""
        Case 4 '0,4 |fffd||fffd|
3278             chek = cN6m
3279             Utext = """0,4 |fffd||fffd|"""
3280     End Select
3281     If chek > 0 Then
3282         For j = chek To cN110
3283             If (Val(sel_arr(i, j)) <> 0) Then
3284                 eError = 1
3285                 If typ = 0 Or typ = 2 Then
3286                     sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Reg.Cells(firstrow - 1 + i, j + adcol).Address(RowAbsolute:=False, ColumnAbsolute:=False) & Chr(10) & "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"" = " & Utext, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Reg.Cells(firstrow - 1 + i, j).Address(RowAbsolute:=False, ColumnAbsolute:=False) & Chr(10) & "|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ""|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|"" = " & Utext)
3287                 Else
3288                     number = number + 1
                    Exit Sub
3290                 End If
3291             End If
3292         Next j
3293     End If

3295     For l = cN6m To cN110 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
3296         U = 0
3297         If sel_arr(i, l) <> "" Then U = l
3298         Utext = ""
3299         Select Case U
            Case cN6m '6-20 |fffd||fffd| |fffd||fffd||fffd||fffd|
3301                 Utext = "6-20 |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            Case cN6s '6 - 20 |fffd||fffd| |fffd||fffd||fffd||fffd|
3303                 Utext = "6-20 |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|"
            Case cN35 '27,5 - 35 |fffd||fffd|
3305                 Utext = "27,5-35 |fffd||fffd|"
            Case cN110 '110 |fffd||fffd|
3307                 Utext = "110-154 |fffd||fffd|"
3308         End Select
3309         If U > 0 Then
3310             If Val(sel_arr(i, U)) > Val(arr_I(U - cN04m + Karr_I, NN)) Then
3311                 eError = 1
3312                 If typ = 0 Or typ = 2 Then
3313                     texterr = "|2b3||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Reg.Range("Y" & firstrow - 1 + i & ":" & "AB" & firstrow - 1 + i).Cells(U - cN04s).Address(RowAbsolute:=False, ColumnAbsolute:=False) & " " & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & " " & Utext
3314                     If InStr(sel_arr(i, cError), texterr) = 0 Then sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & texterr, texterr)
3315                 Else
3316                     number = number + 1
                    Exit Sub
3318                 End If
3319             End If
3320         End If
3321     Next l

3323     If Val(Replace(sel_arr(i, cNtrm), "[", "")) > Val(arr_I(U04m + Karr_I, LEP)) And Uk = 4 Then
3324         eError = 1
3325         If typ = 0 Or typ = 2 Then
3326             sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|2b3||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| U" & firstrow - 1 + i & " " & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 0,4 |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "|2b3||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| U" & firstrow - 1 + i & " " & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 0,4 |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
3327         Else
3328             number = number + 1
            Exit Sub
3330         End If
3331     End If

3333     If Val(Replace(sel_arr(i, cNtrs), "[", "")) > Val(arr_I(U04s + Karr_I, LEP)) And Uk = 4 Then
3334         eError = 1
3335         If typ = 0 Or typ = 2 Then
3336             sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|2b3||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| W" & firstrow - 1 + i & " " & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 0,4 |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "|2b3||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| W" & firstrow - 1 + i & " " & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| 0,4 |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
3337         Else
3338             number = number + 1
            Exit Sub
3340         End If
3341     End If

3343     If Val(sel_arr(i, cNtrm)) > Val(arr_I(U04m + Karr_I, Tr)) And Uk < 4 Then
3344         eError = 1
3345         If typ = 0 Or typ = 2 Then
3346             sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|2b3||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| U" & firstrow - 1 + i & " " & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 35 - 6/0,4 |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "|2b3||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| U" & firstrow - 1 + i & " " & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 35 - 6/0,4 |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
3347         Else
3348             number = number + 1
            Exit Sub
3350         End If
3351     End If

3353     If Val(sel_arr(i, cNtrs)) > Val(arr_I(U04s + Karr_I, Tr)) And Uk < 4 Then
3354         eError = 1
3355         If typ = 0 Or typ = 2 Then
3356             sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|2b3||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| W" & firstrow - 1 + i & " " & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 35 - 6/0,4 |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "|2b3||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| W" & firstrow - 1 + i & " " & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 35 - 6/0,4 |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
3357         Else
3358             number = number + 1
            Exit Sub
3360         End If
3361     End If

3363     If Val(sel_arr(i, cN04m)) > Val(arr_I(U04m + Karr_I, NN)) Then
3364         eError = 1
3365         If typ = 0 Or typ = 2 Then
3366             sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|2b3||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| V" & firstrow - 1 + i & " " & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0,4 |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "|2b3||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| V" & firstrow - 1 + i & " " & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0,4 |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
3367         Else
3368             number = number + 1
            Exit Sub
3370         End If
3371     End If

3373     If Val(sel_arr(i, cN04s)) > Val(arr_I(U04s + Karr_I, NN)) Then
3374         eError = 1
3375         If typ = 0 Or typ = 2 Then
3376             sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|2b3||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| X" & firstrow - 1 + i & " " & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0,4 |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", "|2b3||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| X" & firstrow - 1 + i & " " & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0,4 |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|")
3377         Else
3378             number = number + 1
            Exit Sub
3380         End If
3381     End If
    
3383     If IsDate(sel_arr(i, cT1)) And IsDate(sel_arr(i, cT2)) Then
3384         diff = DateDiff("n", sel_arr(i, cT1), sel_arr(i, cT2))
3385         If diff < 0 Then
3386             eError = 1
3387             If typ = 0 Or typ = 2 Then
3388                 sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|b3||fffd|'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (S" & firstrow + i - 1 & ")", "|b3||fffd|'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| (S" & firstrow + i - 1 & ")")
3389             Else
3390                 number = number + 1
                Exit Sub
3392             End If
3393         ElseIf diff > 1440 Then
3394             eError = 4
3395             If (typ = 0 Or typ = 2) And sel_arr(i, cError) = "" Then
3396                 sel_arr(i, cError) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
3397             End If
3398         End If
3399     ElseIf (sel_arr(i, cT1) = "") And IsDate(sel_arr(i, cT2)) Then
3400         eError = 1
3401         If (typ = 0 Or typ = 2) And Not notdate Then
3402             sel_arr(i, cError) = IIf(sel_arr(i, cError) <> "", sel_arr(i, cError) & Chr(10) & "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
3403         Else
3404             number = number + 1
            Exit Sub
3406         End If
3407     End If
    
3409     numberM = numberM + m
3410     If Len(sel_arr(i, cError)) > 900 Then sel_arr(i, cError) = Left(sel_arr(i, cError), 900) & "..."
    
    
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Sub CommandButton1_Click()
    On Error GoTo Errors
                                                                        addlog "START CommandButton1_Click"
3420     If Reg.ComboCodePEM.Value = "" Then
3421         MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| !", , "|fffd||fffd||fffd||fffd||fffd|!"
3422     Else
3423         fold = GetFolderPath(MyPath, "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
3424         If fold <> "" Then MyPath = fold
3425         If file_name <> "" And FSO.FolderExists(ThisWorkbook.path & "\" & FoldY & file_name) And fold <> "" Then
3426             fh = fold & "EI_" & Reg.ComboYear.text & "_" & Reg.ComboCode.text & "_" & Reg.ComboCodePEM.Value
    
3428             If Not FSO.FolderExists(fh) Then
3429                 FSO.CreateFolder fh
3430             End If
3431             FSO.Copyfile ThisWorkbook.path & "\" & FoldY & file_name & "\" & "T" & CStr(Data.Range("kod").Value) & "_" & CStr(Data.Range("year").Value) & "_" & Data.Range("pemkod").Value & ".txt", fh & "\"
3432             FSO.Copyfile ThisWorkbook.path & "\" & FoldY & file_name & "\" & "ESI" & CStr(Data.Range("kod").Value) & "_" & CStr(Data.Range("year").Value) & "_" & "**" & "_" & Data.Range("pemkod").Value & ".txt", fh & "\"
3433             If FSO.FileExists(ThisWorkbook.path & "\" & FoldY & file_name & "\" & "T04H" & CStr(Data.Range("kod").Value) & "_" & Data.Range("pemkod").Value & ".txt") Then
3434                 FSO.Copyfile ThisWorkbook.path & "\" & FoldY & file_name & "\" & "T04H" & CStr(Data.Range("kod").Value) & "_" & Data.Range("pemkod").Value & ".txt", fh & "\"
3435             End If
3436             If FSO.FileExists(ThisWorkbook.path & "\" & FoldY & file_name & "\" & "TGroup" & CStr(Data.Range("kod").Value) & "_" & Data.Range("pemkod").Value & ".txt") Then
3437                 FSO.Copyfile ThisWorkbook.path & "\" & FoldY & file_name & "\" & "TGroup" & CStr(Data.Range("kod").Value) & "_" & Data.Range("pemkod").Value & ".txt", fh & "\"
3438             End If
            
3440             Call SetColumnName(tmp_arr, arr_columnI, 6)
3441             For i = 1 To UBound(tmp_arr)
3442                 For j = 0 To UBound(tmp_arr, 2)
3443                     tmp_arr(i, j) = arrI(i + KarrI, j)
3444                 Next j
3445             Next i
3446             Call Reg.ArrSave(tmp_arr, CStr(fh), "I" & Reg.ComboYear.text + ".txt")
            
3448             Call SetColumnName(tmp_arr, arr_columnC, 12)
3449             For i = 1 To UBound(tmp_arr)
3450                 For j = 0 To UBound(tmp_arr, 2)
3451                     tmp_arr(i, j) = arrC(i + KarrC, j)
3452                 Next j
3453             Next i
3454             Call Reg.ArrSave(tmp_arr, CStr(fh), "C" & Reg.ComboYear.text + ".txt")
            
3456             Call SetColumnName(tmp_arr, arr_columnPEM, 1)
3457             tmp_arr(1, ArrFind(arr_columnPEM, "KodCompany")) = Reg.ComboCode.Value
3458             tmp_arr(1, ArrFind(arr_columnPEM, "KodPEM")) = Reg.ComboCodePEM.Value
3459             tmp_arr(1, ArrFind(arr_columnPEM, "NamePEM")) = Reg.ComboPEM.text
3460             Call Reg.ArrSave(tmp_arr, CStr(fh), "PEM" & Reg.ComboCode.Value & ".txt")
            
3462             Call Reg.ArrLoadReport(FoldY & file_name & "\" & "Report" & Reg.ComboCode.Value & "_" & Reg.ComboYear.text & ".txt")
3463             Call SetColumnName(tmp_arr, arr_columnRep, 9 * 16)
3464             tmp_arr1 = Array("I_kv", "II_kv", "III_kv", "IV_kv")
3465             kodpemcol = ArrFind(arr_columnRep, "KodPEM")
3466             monthcol = ArrFind(arr_columnRep, "Month")
3467             For i = 1 To UBound(arrRep) Step 9
3468                 If arrRep(i, kodpemcol) = Reg.ComboCodePEM.Value Then
3469                     If IsNull(ArrFind(tmp_arr1, arrRep(i, monthcol))) Then
3470                         ii = Val(arrRep(i, monthcol)) - 1
3471                     Else
3472                         ii = ArrFind(tmp_arr1, arrRep(i, monthcol)) + 12
3473                     End If
3474                     For k = 0 To 8
3475                         For j = 0 To UBound(arr_columnRep)
3476                             tmp_arr(ii * 9 + k + 1, j) = arrRep(i + k, j)
3477                         Next j
3478                     Next k
3479                 End If
3480             Next i
3481             tmp_arr = DeleteBlankRows(tmp_arr, 0, 9)
3482             Call Reg.ArrSave(tmp_arr, CStr(fh), "Report" & Reg.ComboCode.Value & "_" & Reg.ComboYear.text & ".txt")
    
3484             Call Reg.CreateBackup(FoldY & "EI_" & CStr(Reg.ComboYear.text & "_" & Reg.ComboCode.text & "_" & Reg.ComboCodePEM.Value), CStr(fold))
3485             Set folder1 = FSO.GetFolder(fh)
3486             folder1.delete
3487          End If
3488     End If
                                                                        addlog "END CommandButton1_Click"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub
Public Sub ArrLoadReport(Name As String) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error GoTo Errors
    Dim IBorder As Integer
    Dim tmp_arr() As String
                                                                addlog "START Public Sub ArrLoadReport (" & Name & ")"
    
3499     arr_columnRep = Array("Kod", "KodPEM", "Month", "Ukod", "SAIDI1", "SAIDI2", "SAIDI3", "SAIDI4", "SAIDI5", "SAIDI6", "SAIDI7", "SAIFI1", "SAIFI2", "SAIFI3", "SAIFI4", "SAIFI5", "SAIFI6", "SAIFI7", "ENS1", "ENS2", "ENS3", "ENS4", "ENS5", "ENS6", "ENS7", "MAIFI1", "MAIFI2", "MAIFI3", "MAIFI4", "MAIFI5", "MAIFI6", "MAIFI7", "N", "C", "NS1", "NS2", "NS3", "NS4", "NS5", "NS6", "NS7", "NM1", "NM2", "NM3", "NM4", "NM5", "NM6", "NM7", "Nerr")
3500     arrRep = ArrLoad(Name, arr_columnRep)
                                                                addlog "END Public Sub ArrLoadReport (" & Name & ")"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub
    

Public Sub FormSAIDI(arr_E, arr_I, Nerr, Karr_I, Optional rCode, Optional rCodePEM, Optional rMonth, Optional rYear, Optional IndRef As Boolean = False, Optional oldE As Boolean)
    On Error GoTo Errors
                                                                addlog "START FormSAIDI"
3510     If IsMissing(rCode) Then rCode = Reg.ComboCode.text
3511     If IsMissing(rCodePEM) Then rCodePEM = Reg.ComboCodePEM.text
3512     If IsMissing(rMonth) Then rMonth = Reg.ComboMonth.Value
3513     If IsMissing(rYear) Then rYear = Reg.ComboYear.Value
    Dim calcRow As Boolean
    Dim t As Byte
    Dim firstmon As Boolean
    Dim Uk As Byte, Vt As Byte
3518     ReDim arr_SAIDI(1 To 8, 1 To 6)
3519     ReDim arr_SAIFI(1 To 8, 1 To 6)
3520     ReDim arr_ENS(1 To 8, 1 To 6)
3521     ReDim arr_MAIFI(1 To 8, 1 To 6)
3522     ReDim arr_NS(1 To 8, 1 To 6)
3523     ReDim arr_NM(1 To 8, 1 To 6)
    Dim arr_AvrC(1 To 6)
3525     ReDim arr_info35110(1 To 2, 1 To 2)
3526     ReDim arr_info6(1 To 2, 1 To 2)
3527     ReDim arr_info04(1 To 2, 1 To 2)
    
3529     kodpemcol = ArrFind(arr_columnRep, "KodPEM")
3530     monthcol = ArrFind(arr_columnRep, "Month")
3531     KarrRep = -1
3532     For i = LBound(arrRep) + 1 To UBound(arrRep) Step 9
3533         If arrRep(i, kodpemcol) = rCodePEM And arrRep(i, monthcol) = rMonth Then
3534             KarrRep = i - 1
            Exit For
3536         End If
3537     Next i
    
3539     ucol = ArrFind(arr_columnRep, "Ukod")
3540     If KarrRep = -1 Then
3541         KarrRep = UBound(arrRep)
3542         Call SetColumnName(tmp_rep, arr_columnRep, 9)
3543             arr = Array("", "005", "010", "015", "020", "025", "030", "035", "040", "045")
3544             kodcol = ArrFind(arr_columnRep, "Kod")
3545             tmp_rep(9, ArrFind(arr_columnRep, "Nerr")) = 1
3546             For i = 1 To 9
3547                 tmp_rep(i, ucol) = arr(i)
3548                 tmp_rep(i, kodcol) = rCode
3549                 tmp_rep(i, kodpemcol) = rCodePEM
3550                 tmp_rep(i, monthcol) = rMonth
                
3552             Next i
3553         If UBound(arrRep) = 0 Then
3554             arrRep = tmp_rep
3555         Else
3556             arrRep = Reg.ArrJoin(arrRep, tmp_rep, Array("Kod", "KodPEM", "Month"), 9)
3557         End If
3558     End If
    
3560     Per = 43800 '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
3561     SAIDI = 0
3562     saidim = 0
3563     saidic = 0
3564     SAIFI = 0
3565     saifim = 0
3566     saific = 0
3567     number = 0
3568     numberM = 0
3569     ncheck1 = 0
3570     ncheck2 = 0
3571     ncheck3 = 0
3572     ncheck4 = 0
3573     ncheck5 = 0
3574     ncheckP = 0
3575     ncheckN = 0
3576     ncheckE = 0
3577     ncheckDp = 0
3578     ncheckDn = 0
3579     If rCodePEM = "" Then
                                                                        addlog "END FormSAIDI"
        Exit Sub
3582     End If
3583     arrRep(KarrRep + 2, ArrFind(arr_columnRep, "Nerr")) = Nerr
3584     If Nerr = "1" Then GoTo jjj

3586     colC = ArrFind(arr_columnI, "C")
3587     colN = ArrFind(arr_columnI, "N")

3589     For i = 1 To 6
3590         If Val(arr_I(i + Karr_I, colN)) = 0 Then
3591             arr_AvrC(i) = 0
3592         Else
3593             arr_AvrC(i) = (Val(arr_I(i + Karr_I, colC)) / Val(arr_I(i + Karr_I, colN))) / 12
3594         End If
3595     Next i

3597     colRevTeh = ArrFind(arr_columnE, "RevTeh")
3598     colID = ArrFind(arr_columnE, "IdKey")
3599     colDur = ArrFind(arr_columnE, "Dur")
3600     colDname = ArrFind(arr_columnE, "Dname")
3601     colU = ArrFind(arr_columnE, "U")
3602     colK = ArrFind(arr_columnE, "K")
3603     colN04m = ArrFind(arr_columnE, "N04m")
3604     colN04s = ArrFind(arr_columnE, "N04s")
3605     colN6m = ArrFind(arr_columnE, "N6m")
3606     colN6s = ArrFind(arr_columnE, "N6s")
3607     colN35 = ArrFind(arr_columnE, "N35")
3608     colN110 = ArrFind(arr_columnE, "N110")
3609     colType = ArrFind(arr_columnE, "Type")
3610     cT1 = ArrFind(arr_columnE, "T1")
3611     cT2 = ArrFind(arr_columnE, "T2")
3612     NerrCol = ArrFind(arr_columnRep, "Nerr")
3613     Help = 0
3614     For i = LBound(arr_E) + 1 To UBound(arr_E, 1)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
3616         calcRow = True
3617         If isCheck Then
3618             If Not DicCheck.exists(arr_E(i, colID)) Then GoTo iii
3619         End If
        
3621         tmp_number = number
3622         If IndRef Then
3623             Call Reg.revision(arr_E, arr_I, i, 1, arr_E(i, colRevTeh), rMonth, rYear, Karr_I)
3624             Call Reg.tehrevision(arr_E, i, tmpmytree, , 0, arr_E(i, colRevTeh), False)
3625         Else
3626             Call Reg.revision(arr_E, arr_I, i, 1, , rMonth, rYear, Karr_I)
3627         End If
3628         If Not isCheck Then If arr_E(i, colRevTeh) <> "" And arr_E(i, colRevTeh) > 2 Then numberM = numberM + 1
            
3630         If oldE Then
3631             Select Case DicCheck(arr_E(i, colID))
                Case "P"
3633                     ncheckP = ncheckP + 1
                Case "D"
3635                     ncheckP = ncheckP + 1
3636             End Select
3637         End If
3638         If tmp_number < number Then GoTo iii
3639         If arr_E(i, colDur) = "" And arr_E(i, cT1) <> "" And arr_E(i, cT2) <> "" Then
3640             arr_E(i, colDur) = DateDiff("n", arr_E(i, cT1), arr_E(i, cT2))
3641             If arr_E(i, colDur) >= 3 Then
3642                 arr_E(i, colType) = "|fffd||fffd||fffd||fffd||fffd|"
3643             ElseIf arr_E(i, colDur) < 3 And arr_E(i, colDur) >= 0 Then
3644                 arr_E(i, colType) = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
3645             End If
3646         End If



3650         If arr_E(i, colDur) <> "" Then
3651             Uk = NVal(arr_E(i, colU))
3652             If Uk = 4 Then Uk = 6
3653             Vt = NVal(arr_E(i, colK))
            
3655             SAIDI = (NVal(arr_E(i, colN04m)) + NVal(arr_E(i, colN04s)) + NVal(arr_E(i, colN6m)) + NVal(arr_E(i, colN6s)) + NVal(arr_E(i, colN35)) + NVal(arr_E(i, colN110))) * NVal(arr_E(i, colDur))
3656             SAIFI = (NVal(arr_E(i, colN04m)) + NVal(arr_E(i, colN04s)) + NVal(arr_E(i, colN6m)) + NVal(arr_E(i, colN6s)) + NVal(arr_E(i, colN35)) + NVal(arr_E(i, colN110)))

            
3659             saidim = (NVal(arr_E(i, colN04m)) + NVal(arr_E(i, colN6m)) + NVal(arr_E(i, colN35)) + NVal(arr_E(i, colN110))) * NVal(arr_E(i, colDur)): saifim = (NVal(arr_E(i, colN04m)) + NVal(arr_E(i, colN6m)) + NVal(arr_E(i, colN35)) + NVal(arr_E(i, colN110)))
3660             saidic = (NVal(arr_E(i, colN6s)) + NVal(arr_E(i, colN04s))) * NVal(arr_E(i, colDur)): saific = (NVal(arr_E(i, colN04s)) + NVal(arr_E(i, colN6s)))
            
3662             ENSm = (NVal(arr_E(i, colN04m)) * arr_AvrC(1) + NVal(arr_E(i, colN6m)) * arr_AvrC(3) + NVal(arr_E(i, colN35)) * arr_AvrC(5) + NVal(arr_E(i, colN110)) * arr_AvrC(6)) * NVal(arr_E(i, colDur)) / (Per)
3663             ENSc = (NVal(arr_E(i, colN04s)) * arr_AvrC(2) + NVal(arr_E(i, colN6s)) * arr_AvrC(4)) * NVal(arr_E(i, colDur)) / (Per)

3665             If arr_E(i, colType) = "|fffd||fffd||fffd||fffd||fffd|" Then
3666                 If saidim <> 0 And Uk > 2 Then arr_SAIDI(Uk + 1, Vt) = NVal(arr_SAIDI(Uk + 1, Vt)) + saidim
3667                 If saidic <> 0 And Uk > 2 Then arr_SAIDI(Uk + 2, Vt) = NVal(arr_SAIDI(Uk + 2, Vt)) + saidic
3668                 If saifim <> 0 And Uk > 2 Then arr_SAIFI(Uk + 1, Vt) = NVal(arr_SAIFI(Uk + 1, Vt)) + saifim
3669                 If saific <> 0 And Uk > 2 Then arr_SAIFI(Uk + 2, Vt) = NVal(arr_SAIFI(Uk + 2, Vt)) + saific
3670                 If ENSm <> 0 And Uk > 2 Then arr_ENS(Uk + 1, Vt) = NVal(arr_ENS(Uk + 1, Vt)) + ENSm
3671                 If ENSc <> 0 And Uk > 2 Then arr_ENS(Uk + 2, Vt) = NVal(arr_ENS(Uk + 2, Vt)) + ENSc
                
3673                 If saifim <> 0 And Uk > 2 Then arr_NS(Uk + 1, Vt) = NVal(arr_NS(Uk + 1, Vt)) + 1
3674                 If saific <> 0 And Uk > 2 Then arr_NS(Uk + 2, Vt) = NVal(arr_NS(Uk + 2, Vt)) + 1
3675                 arr_NS(Uk, Vt) = NVal(arr_NS(Uk, Vt)) + 1
    
3677                 If SAIDI <> 0 Then arr_SAIDI(Uk, Vt) = NVal(arr_SAIDI(Uk, Vt)) + SAIDI
3678                 If SAIFI <> 0 Then arr_SAIFI(Uk, Vt) = NVal(arr_SAIFI(Uk, Vt)) + SAIFI
3679                 If ENSm + ENSc <> 0 Then arr_ENS(Uk, Vt) = NVal(arr_ENS(Uk, Vt)) + ENSm + ENSc
3680             Else: If saifim <> 0 And Uk > 2 Then arr_MAIFI(Uk + 1, Vt) = NVal(arr_MAIFI(Uk + 1, Vt)) + saifim
3681                 If saific <> 0 And Uk > 2 Then arr_MAIFI(Uk + 2, Vt) = NVal(arr_MAIFI(Uk + 2, Vt)) + saific
3682                 If SAIFI <> 0 Then arr_MAIFI(Uk, Vt) = NVal(arr_MAIFI(Uk, Vt)) + SAIFI

3684                 If saifim <> 0 And Uk > 2 Then arr_NM(Uk + 1, Vt) = NVal(arr_NM(Uk + 1, Vt)) + 1
3685                 If saific <> 0 And Uk > 2 Then arr_NM(Uk + 2, Vt) = NVal(arr_NM(Uk + 2, Vt)) + 1
3686                 arr_NM(Uk, Vt) = NVal(arr_NM(Uk, Vt)) + 1
3687             End If
3688         End If
3689         If oldE Then
3690             Select Case DicCheck(arr_E(i, colID))
                Case "N"
3692                     ncheckN = ncheckN + 1
3693                     If arr_E(i, colDur) >= 3 Then ncheck1 = ncheck1 + 1
                Case "E"
3695                     iRow = ArrFind(arrEold, arr_E(i, colID), , "IdKey")
3696                     If arr_E(i, colDname) = arrEold(iRow, colDname) And arr_E(i, colU) = arrEold(iRow, colU) And arr_E(i, colK) = arrEold(iRow, colK) Then 'And  Then
3697                         If (arr_E(i, colK) = 2 Or arr_E(i, colK) = 6) Then ncheckDp = ncheckDp + SAIDI
3698                     ElseIf arr_E(i, colK) = 2 Or arr_E(i, colK) = 6 Or arrEold(iRow, colK) = 2 Or arrEold(iRow, colK) = 6 Then
3699                         ncheckDn = ncheckDn + SAIDI
3700                     End If
3701                     ncheckE = ncheckE + 1
3702                     difold = Abs(DateDiff("n", arr_E(i, cT1), arrEold(iRow, cT1)))
3708                     difold1 = Abs(DateDiff("n", arr_E(i, cT2), arrEold(iRow, cT2)))
3703                     If difold >= 30 Then
3704                         ncheck2 = ncheck2 + 1
3705                     ElseIf difold >= 5 Then
3706                         ncheck3 = ncheck3 + 1
3707                     ElseIf difold1 >= 10 Then
3710                         ncheck5 = ncheck5 + 1
3711                     ElseIf difold1 >= 5 Then
3712                         ncheck4 = ncheck4 + 1
3713                     End If
                Case "V"
3715                     iRow = ArrFind(arrEold, arr_E(i, colID), , "IdKey")
3716                     If arr_E(i, colDname) = arrEold(iRow, colDname) And arr_E(i, colU) = arrEold(iRow, colU) And arr_E(i, colK) = arrEold(iRow, colK) Then 'And  Then
3717                         If (arr_E(i, colK) = 2 Or arr_E(i, colK) = 6) Then ncheckDp = ncheckDp + SAIDI
3718                     ElseIf arr_E(i, colK) = 2 Or arr_E(i, colK) = 6 Or arrEold(iRow, colK) = 2 Or arrEold(iRow, colK) = 6 Then
3719                         ncheckDn = ncheckDn + SAIDI
3720                     End If
3721             End Select
3722         End If
3723 iii:
3724     Next i
    
3726     arr_info35110(1, 1) = arr_I(6 + Karr_I, colN)
3727     arr_info35110(1, 2) = arr_I(6 + Karr_I, colC)
3728     arr_info35110(2, 1) = arr_I(5 + Karr_I, colN)
3729     arr_info35110(2, 2) = arr_I(5 + Karr_I, colC)
3730     For i = 1 To 2
3731         arr_info6(i, 1) = arr_I(i + 2 + Karr_I, colN)
3732         arr_info6(i, 2) = arr_I(i + 2 + Karr_I, colC)
3733         arr_info04(i, 1) = arr_I(i + Karr_I, colN)
3734         arr_info04(i, 2) = arr_I(i + Karr_I, colC)
3735     Next i
'-----------------------------------------------------------------------
3737     For i = 1 To 8
3738         col1 = ArrFind(arr_columnRep, "SAIDI1")
3739         col2 = ArrFind(arr_columnRep, "SAIDI6")
3740         col3 = ArrFind(arr_columnRep, "SAIDI7")
3741         Sum = 0
3742         Sum1 = 0
3743         For j = col1 To col2
3744             arrRep(KarrRep + i, j) = arr_SAIDI(i, j - 3)
3745             Sum = Sum + CDbl(arr_SAIDI(i, j - 3))
3746             If i = 1 Then arrRep(KarrRep + 9, j) = 0
3747             If i = 1 Or i = 2 Or i = 3 Or i = 6 Then arrRep(KarrRep + 9, j) = CDbl(arrRep(KarrRep + 9, j)) + CDbl(arr_SAIDI(i, j - 3))
3748             Sum1 = Sum1 + CDbl(arrRep(KarrRep + 9, j))
3749         Next j
3750         arrRep(KarrRep + i, col3) = Sum
3751         arrRep(KarrRep + 9, col3) = Sum1
        
3753         col1 = ArrFind(arr_columnRep, "SAIFI1")
3754         col2 = ArrFind(arr_columnRep, "SAIFI6")
3755         col3 = ArrFind(arr_columnRep, "SAIFI7")
3756         Sum = 0
3757         Sum1 = 0
3758         For j = col1 To col2
3759             arrRep(KarrRep + i, j) = arr_SAIFI(i, j - 10)
3760             Sum = Sum + CDbl(arr_SAIFI(i, j - 10))
3761             If i = 1 Then arrRep(KarrRep + 9, j) = 0
3762             If i = 1 Or i = 2 Or i = 3 Or i = 6 Then arrRep(KarrRep + 9, j) = CDbl(arrRep(KarrRep + 9, j)) + CDbl(arr_SAIFI(i, j - 10))
3763             Sum1 = Sum1 + CDbl(arrRep(KarrRep + 9, j))
3764         Next j
3765         arrRep(KarrRep + i, col3) = Sum
3766         arrRep(KarrRep + 9, col3) = Sum1
    
3768         col1 = ArrFind(arr_columnRep, "ENS1")
3769         col2 = ArrFind(arr_columnRep, "ENS6")
3770         col3 = ArrFind(arr_columnRep, "ENS7")
3771         Sum = 0
3772         Sum1 = 0
3773         For j = col1 To col2
3774             arrRep(KarrRep + i, j) = arr_ENS(i, j - 17)
3775             Sum = Sum + CDbl(arr_ENS(i, j - 17))
3776             If i = 1 Then arrRep(KarrRep + 9, j) = 0
3777             If i = 1 Or i = 2 Or i = 3 Or i = 6 Then arrRep(KarrRep + 9, j) = CDbl(arrRep(KarrRep + 9, j)) + CDbl(arr_ENS(i, j - 17))
3778             Sum1 = Sum1 + CDbl(arrRep(KarrRep + 9, j))
3779         Next j
3780         arrRep(KarrRep + i, col3) = Sum
3781         arrRep(KarrRep + 9, col3) = Sum1
    
3783         col1 = ArrFind(arr_columnRep, "MAIFI1")
3784         col2 = ArrFind(arr_columnRep, "MAIFI6")
3785         col3 = ArrFind(arr_columnRep, "MAIFI7")
3786         Sum = 0
3787         Sum1 = 0
3788         For j = col1 To col2
3789             arrRep(KarrRep + i, j) = arr_MAIFI(i, j - 24)
3790             Sum = Sum + CDbl(arr_MAIFI(i, j - 24))
3791             If i = 1 Then arrRep(KarrRep + 9, j) = 0
3792             If i = 1 Or i = 2 Or i = 3 Or i = 6 Then arrRep(KarrRep + 9, j) = CDbl(arrRep(KarrRep + 9, j)) + CDbl(arr_MAIFI(i, j - 24))
3793             Sum1 = Sum1 + CDbl(arrRep(KarrRep + 9, j))
3794         Next j
3795         arrRep(KarrRep + i, col3) = Sum
3796         arrRep(KarrRep + 9, col3) = Sum1
        
3798         col1 = ArrFind(arr_columnRep, "NS1")
3799         col2 = ArrFind(arr_columnRep, "NS6")
3800         col3 = ArrFind(arr_columnRep, "NS7")
3801         Sum = 0
3802         Sum1 = 0
3803         For j = col1 To col2
3804             arrRep(KarrRep + i, j) = arr_NS(i, j - 33)
3805             Sum = Sum + Val(arr_NS(i, j - 33))
3806             If i = 1 Then arrRep(KarrRep + 9, j) = 0
3807             If i = 1 Or i = 2 Or i = 3 Or i = 6 Then arrRep(KarrRep + 9, j) = NVal(arrRep(KarrRep + 9, j)) + NVal(arr_NS(i, j - 33))
3808             Sum1 = Sum1 + NVal(arrRep(KarrRep + 9, j))
3809         Next j
3810         arrRep(KarrRep + i, col3) = Sum
3811         arrRep(KarrRep + 9, col3) = Sum1
        
3813         col1 = ArrFind(arr_columnRep, "NM1")
3814         col2 = ArrFind(arr_columnRep, "NM6")
3815         col3 = ArrFind(arr_columnRep, "NM7")
3816         Sum = 0
3817         Sum1 = 0
3818         For j = col1 To col2
3819             arrRep(KarrRep + i, j) = arr_NM(i, j - 40)
3820             Sum = Sum + NVal(arr_NM(i, j - 40))
3821             If i = 1 Then arrRep(KarrRep + 9, j) = 0
3822             If i = 1 Or i = 2 Or i = 3 Or i = 6 Then arrRep(KarrRep + 9, j) = NVal(arrRep(KarrRep + 9, j)) + NVal(arr_NM(i, j - 40))
3823             Sum1 = Sum1 + NVal(arrRep(KarrRep + 9, j))
3824         Next j
3825         arrRep(KarrRep + i, col3) = Sum
3826         arrRep(KarrRep + 9, col3) = Sum1
3827     Next i
    
    
    
3831     col1 = ArrFind(arr_columnRep, "N")
3832     col2 = ArrFind(arr_columnRep, "C")
3833     For i = 1 To 2
3834         For j = col1 To col2
3835             If i = 1 Then
3836                 arrRep(KarrRep + 3, j) = 0
3837                 arrRep(KarrRep + 6, j) = 0
3838                 arrRep(KarrRep + 9, j) = 0
3839             End If
3840             arrRep(KarrRep + i, j) = arr_info35110(i, j - 31)
3841             arrRep(KarrRep + 3, j) = CDbl(arrRep(KarrRep + 3, j)) + NVal(arr_info6(i, j - 31))
3842             arrRep(KarrRep + i + 3, j) = arr_info6(i, j - 31)
3843             arrRep(KarrRep + 6, j) = CDbl(arrRep(KarrRep + 6, j)) + NVal(arr_info04(i, j - 31))
3844             arrRep(KarrRep + i + 6, j) = arr_info04(i, j - 31)
3845             arrRep(KarrRep + 9, j) = CDbl(arrRep(KarrRep + 9, j)) + NVal(arr_info6(i, j - 31)) + NVal(arr_info04(i, j - 31)) + NVal(arr_info35110(i, j - 31))
3846         Next j
3847     Next i
3848     If Not isCheck Then
3849         arrRep(KarrRep + 1, NerrCol) = number
3850         arrRep(KarrRep + 3, NerrCol) = numberM
3851     End If
3852     If oldE Then
3853         arrRep(KarrRep + 1, NerrCol) = ncheck1
3854         arrRep(KarrRep + 2, NerrCol) = ncheck2
3855         arrRep(KarrRep + 3, NerrCol) = ncheck3
3856         arrRep(KarrRep + 4, NerrCol) = ncheck4
3857         arrRep(KarrRep + 5, NerrCol) = ncheck5
3858         arrRep(KarrRep + 6, NerrCol) = ncheckP
3859         arrRep(KarrRep + 7, NerrCol) = ncheckN
3860         arrRep(KarrRep + 8, NerrCol) = ncheckE
3861         arrRep(KarrRep + 9, NerrCol) = "" & ncheckDp & "|" & ncheckDn
3862     End If
    
3864 jjj:
'    Call FormKvSAIDI
    
    
    
                                                                        addlog "END FormSAIDI"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Sub FormKvSAIDI()
    On Error GoTo Errors
                                                                        addlog "START FormKvSAIDI"
3877     quart = (Val(Reg.ComboMonth.Value) - 1) \ 3 + 1
3878     Numkv = 0
3879     colSAIDI1 = ArrFind(arr_columnRep, "SAIDI1")
3880     colMAIFI7 = ArrFind(arr_columnRep, "MAIFI7")
3881     colNS = ArrFind(arr_columnRep, "NS1")
3882     colNerr = ArrFind(arr_columnRep, "Nerr")
3883     colC = ArrFind(arr_columnRep, "C")
3884     colN = ArrFind(arr_columnRep, "N")
3885     colUkod = ArrFind(arr_columnRep, "Ukod")
3886     kodpemcol = ArrFind(arr_columnRep, "KodPEM")
3887     monthcol = ArrFind(arr_columnRep, "Month")
    
3889     Call SetColumnName(tmp_rep, arr_columnRep, 9)
3890     tmp_arr = Array("I_kv", "II_kv", "III_kv", "IV_kv")
3891     jj = 0
3892     For i = LBound(arrRep) + 1 To UBound(arrRep) Step 9
3893         If arrRep(i, monthcol) = tmp_arr(quart - 1) Then jj = i
3894         If arrRep(i, monthcol) <> tmp_arr(quart - 1) And (Val(arrRep(i, monthcol)) - 1) \ 3 + 1 = quart And arrRep(i, kodpemcol) = Reg.ComboCodePEM.Value Then
3895             Numkv = Numkv + 1
3896             For k = 1 To 9
3897                 For j = colSAIDI1 To colMAIFI7
3898                     tmp_rep(k, j) = NVal(tmp_rep(k, j)) + NVal(arrRep(i + k - 1, j))
3899                 Next j
3900                 For j = colNS To colNerr
3901                     tmp_rep(k, j) = NVal(tmp_rep(k, j)) + NVal(arrRep(i + k - 1, j))
3902                 Next j
3903                 If Not firstmon Then
3904                     For j = colN To colC
3905                         tmp_rep(k, j) = arrRep(i + k - 1, j)
3906                     Next j
3907                     tmp_rep(k, colUkod) = arrRep(i + k - 1, colUkod)
3908                 End If
3909             Next k
3910             firstmon = True
3911         End If
3912     Next i
    
3914     If Numkv = 3 Then
3915         If jj > 0 Then
3916             For k = 1 To 9
3917                 For j = colSAIDI1 To colNerr
3918                     arrRep(jj + k - 1, j) = tmp_rep(k, j)
3919                 Next j
3920             Next k
3921         Else
3922             colkod = ArrFind(arr_columnRep, "Kod")
3923             For k = 1 To 9
3924                 tmp_rep(k, kodpemcol) = Reg.ComboCodePEM.Value
3925                 tmp_rep(k, colkod) = Reg.ComboCode.text
3926                 tmp_rep(k, monthcol) = tmp_arr(quart - 1)
3927             Next k
3928             arrRep = ArrJoin(arrRep, tmp_rep, Array("Kod", "KodPEM", "Month"), 9)
3929         End If
3930     End If

                                                                        addlog "END FormKvSAIDI"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub




Function DeleteBlankRows(arr, ByVal col As Long, ByVal Nstep As Integer) As Variant
    On Error GoTo Errors
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
   ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|,
   ' |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
   ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
   Dim narr() As String
3947    If Not IsArray(arr) Then Exit Function
3948     If col > UBound(arr, 2) Then Exit Function
3949     If col < LBound(arr, 2) Then Exit Function

    Dim iCount As Long    ' |fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
3952    For i = LBound(arr) + 1 To UBound(arr) Step Nstep
3953         iCount = iCount - (arr(i, col) <> "")
3954     Next i

3956     ReDim narr(LBound(arr, 1) To iCount * Nstep + LBound(arr, 1), LBound(arr, 2) To UBound(arr, 2))

3958     iCount = LBound(narr) + 1  ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
3959    For i = LBound(arr, 1) + 1 To UBound(arr, 1) Step Nstep
3960         If arr(i, col) <> "" Then
3961             For k = 0 To Nstep - 1
3962                 For j = LBound(arr, 2) To UBound(arr, 2)
3963                     narr(iCount, j) = arr(i + k, j)
3964                 Next j
3965                 iCount = iCount + 1
3966             Next k
3967         End If
3968     Next i
3969     For j = LBound(arr, 2) To UBound(arr, 2)
3970         narr(0, j) = arr(0, j)
3971     Next j
    
3973     DeleteBlankRows = narr
    Exit Function
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Function


Function GetFolderPath(ByVal InitialPath As String, Optional ByVal Title As String = "|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|") As String
   On Error GoTo Errors
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Title,
   ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| InitialPath
   ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
   Dim PS As String: PS = Application.PathSeparator
3985     With Application.FileDialog(msoFileDialogFolderPicker)
3986         If Not Right$(InitialPath, 1) = PS Then InitialPath = InitialPath & PS
3987         .ButtonName = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|": .Title = Title: .InitialFileName = InitialPath
3988         If .Show <> -1 Then Exit Function
3989         GetFolderPath = .SelectedItems(1)
3990         If Not Right$(GetFolderPath, 1) = PS Then GetFolderPath = GetFolderPath & PS
3991     End With
    Exit Function
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
3994 End Function
'
'' |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2009|fffd|.


Public Function addparent(arr, el, Optional indact As Boolean = False)
    On Error GoTo Errors
4001     ReDim Preserve arr(LBound(arr) To UBound(arr) + 1)
4002     arr(UBound(arr)) = el
4003     If Not indact Then
4004         If mytree(el)(0) <> "" Then
4005             arr = addparent(arr, mytree(el)(0))
4006         End If
4007     Else
4008         If tmpmytree(el)(0) <> "" Then
4009             arr = addparent(arr, tmpmytree(el)(0), True)
4010         End If
4011     End If
4012     addparent = arr
    Exit Function
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Function

Sub LockTarget(Target As Range, Optional n As Integer = 1, Optional loc As Boolean = False)
    On Error GoTo Errors
4019     If n = 2 Then
4020         If Target.MergeCells = False Then Target.MergeCells = True Else Exit Sub
4021     End If
4022     If Target.Cells(n).Locked = Not loc Then
4023         Reg.Unprotect ("test")
4024         Target.Locked = loc
4025         Reg.Protect Password:="test", DrawingObjects:=False, Contents:=True, Scenarios:= _
        False, AllowFormattingCells:=True, AllowFormattingColumns:=True, _
        AllowFormattingRows:=True, AllowSorting:=True, AllowFiltering:=True
4028     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Public Sub tehrevision(tmp_arrE, i, mytree1, Optional arr_disp, Optional typ As Integer, Optional sel_arrkey, Optional sheetchan As Boolean = True)
        On Error GoTo Errors
    Dim sumteh
    Dim suminter
    Dim Nteh04 As Boolean
    Dim tehErrs()
4039     arr_columnE = Array("Kod", "IdKey", "Num", "Source", "Dname", "U", "K", "Dlist", "T1", "T2", "Dur", "Type", "Ntrm", "N04m", "Ntrs", "N04s", "N6m", "N6s", "N35", "N110", "Comm", "Error", "RevTeh", "MultiM", "MultiS")
4040     If typ = 0 Then
4041         cError = ArrFind(arr_columnE, "Error")

4043         cU = Val(tmp_arrE(i, ArrFind(arr_columnE, "U")))
4044         cDname = ArrFind(arr_columnE, "Dname")
4045         cDlist = ArrFind(arr_columnE, "Dlist")
4046         cNtrm = ArrFind(arr_columnE, "Ntrm"): cComm = ArrFind(arr_columnE, "Comm")
4047     Else
4048         cU = 0
4049         For k = 4 To 7 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
4050             If tmp_arrE(i, k) <> "" Then cU = k - 3: Exit For
4051         Next k
4052         cError = 30
4053         cDname = 3
4054         cDlist = 10
4055         cNtrm = 21: cComm = 29
4056     End If
4057     If InStr(1, tmp_arrE(i, cComm), "(|fffd||fffd||fffd|)") <> 0 Then Exit Sub
4058     Nteh04 = True
4059     ReDim tehErrs(0 To 1) '0 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, 1 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
4060     vDname = 0
    
4062     If IsMissing(arr_disp) Then
4063         If tmp_arrE(i, cDlist) <> "" Then
4064             tmp_arrE(i, cDlist) = RemuvC(tmp_arrE(i, cDlist), 3)
4065             If Right(tmp_arrE(i, cDlist), 1) = ";" Then tmp_arrE(i, cDlist) = Left(tmp_arrE(i, cDlist), Len(tmp_arrE(i, cDlist)) - 1)
4066             arr_disp = Split(tmp_arrE(i, cDlist), ";")
'            vDname = 1
4068         Else
4069             tmp_arrE(i, cDname) = RemuvC(tmp_arrE(i, cDname), 2)
4070             If Right(tmp_arrE(i, cDname), 1) = ";" Then tmp_arrE(i, cDname) = Left(tmp_arrE(i, cDname), Len(tmp_arrE(i, cDname)) - 1)
4071             arr_disp = Split(tmp_arrE(i, cDname), ";")
'            vDname = 2
4073         End If
4074         vDname = 2 + CInt(tmp_arrE(i, cDlist) <> "")
4075     Else
4076         If tmp_arrE(i, cDlist) <> "" Then vDname = 1
4077     End If
4078      If UBound(arr_disp) >= 0 Then
4079         If cU > 0 Then
4080                 suminter = 0
4081                 For U = 0 To 7
4082                     suminter = Val(suminter) + Val(tmp_arrE(i, cNtrm + U))
4083                 Next U
4084             sumteh = 0
4085             For w = LBound(arr_disp) To UBound(arr_disp)
4086                 Larr_disp = LCase(arr_disp(w))
4087                 If mytree1.exists(Larr_disp) Then
4088                     arr_disp(w) = mytree1(Larr_disp)(-2)
4089                     If cU <> Val(mytree1(Larr_disp)(-1)) Then
4090                         If Val(mytree1(Larr_disp)(-1)) = 0 Then
4091                             If cU = 4 Then
4092                                 If (Left(mytree1(Larr_disp)(9), 1) <> "[" And Val(mytree1(Larr_disp)(9)) <> 0) Or (Left(mytree1(Larr_disp)(11), 1) <> "[" And Val(mytree1(Larr_disp)(11)) <> 0) Then
4093                                     tehErrs(0) = IIf(tehErrs(0) = "", arr_disp(w), tehErrs(0) & ", " & arr_disp(w))
4094                                 End If
4095                             End If
4096                         Else
4097                             tehErrs(0) = IIf(tehErrs(0) = "", arr_disp(w), tehErrs(0) & ", " & arr_disp(w))
4098                         End If
4099                     End If
4100                         For U = 1 To 8
4101                             If mytree1(Larr_disp)(U) <> "" Then sumteh = Val(sumteh) + Val(mytree1(Larr_disp)(U))
4102                         Next U
4103                 Else
4104                     If cU = 4 And w = LBound(arr_disp) Then Nteh04 = False: Exit For
4105                     tehErrs(1) = 1: Nteh = arr_disp(w): Exit For
4106                 End If
4107             Next w
            
4109             If Nteh04 Then
4110                 If tehErrs(1) = 1 Then
4111                     tmp_arrE(i, cError) = IIf(tmp_arrE(i, cError) <> "", tmp_arrE(i, cError) & Chr(10) & "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (" & Nteh & ") |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (" & Nteh & ") |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 3 |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|")
4112                     If sel_arrkey = "" Or Val(sel_arrkey) = 4 Then sel_arrkey = 3 Else sel_arrkey = 2
4113                 ElseIf suminter <> sumteh Then
4114                     If sel_arrkey = "" Then sel_arrkey = 4
4115                     tmp_arrE(i, cError) = IIf(tmp_arrE(i, cError) <> "", tmp_arrE(i, cError) & Chr(10) & "|2b3||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|2b3||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
4116                 End If
4117                 If tehErrs(0) <> "" And vDname <> 1 Then
4118                     If sel_arrkey = "" Then sel_arrkey = 4
4119                     tmp_arrE(i, cError) = IIf(tmp_arrE(i, cError) <> "", tmp_arrE(i, cError) & Chr(10) & "|433||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (" & tehErrs(0) & ") |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|. |fffd||fffd||fffd|-|fffd||fffd|", "|433||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (" & tehErrs(0) & ") |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|. |fffd||fffd||fffd|-|fffd||fffd|")
4120                 End If
4121                 If Len(tmp_arrE(i, cError)) > 900 Then tmp_arrE(i, cError) = Left(tmp_arrE(i, cError), 900) & "..."
4122             End If
4123         End If
        
4125             Select Case vDname
                Case 1: tmp_arrE(i, cDlist) = Join(arr_disp, "; ")
                Case 2: tmp_arrE(i, cDname) = Join(arr_disp, "; ")
4128             End Select
4129     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Public Function SheetExists(ShName As String) As Boolean
    Dim Sh As Worksheet
4136     SheetExists = False
4137     For Each Sh In ActiveWorkbook.Sheets
4138         If Sh.Name = ShName Then
4139             SheetExists = True
4140             Set Sh = Nothing
            Exit Function
4142         End If
4143     Next Sh
4144 End Function















Attribute VB_Name = "Rep"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "Label1, 2, 0, MSForms, Label"
Attribute VB_Control = "Label2, 4, 2, MSForms, Label"
Attribute VB_Control = "ComboYear, 5, 3, MSForms, ComboBox"
Attribute VB_Control = "Label3, 7, 4, MSForms, Label"
Attribute VB_Control = "Label5, 12, 8, MSForms, Label"
Attribute VB_Control = "ComboCompany, 13, 9, MSForms, ComboBox"
Attribute VB_Control = "Label6, 14, 10, MSForms, Label"
Attribute VB_Control = "ComboCode, 15, 11, MSForms, ComboBox"
Attribute VB_Control = "LabelPer, 16, 12, MSForms, Label"
Attribute VB_Control = "LabPEM, 35, 16, MSForms, Label"

Dim divisionsREP
Dim aa
Dim indC
Dim arrCKV() As String
Dim namef As String
Dim GlobErr As Boolean
Dim emp As Boolean
Dim FoldY1 As String




Private Sub ComboCode_Click() '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error GoTo Errors
    ' |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd|
    ' |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        
'    null
20     If Not NVal(ComboCompany.Value) = NVal(ComboCode.Value) And Not firstacn Then
                                            addlog "START Private Sub rep.ComboCode_Click"
        Dim ret As Boolean
'        ret = EnableEvents("ComboCode_Click")
24         FormPem.CheckCompany.Value = False
25         ComboCompany.Value = ComboCode.Value
26         Call listPEM
27         Rep.LabPEM.Caption = ""
28         Rep.Range("SAIDI").Value = "-"
29         Rep.Range("SAIFI").Value = "-"
30         Rep.Range("ENS").Value = "-"
31         Rep.Range("MAIFI").Value = "-"
32         Rep.Range("NS").Value = "-"
33         Rep.Range("NM").Value = "-"
34         Rep.Range("info35110").Value = "-"
35         Rep.Range("info6").Value = "-"
36         Rep.Range("info04").Value = "-"
37         If divisionsREP.Count > 0 Then
38             FormPem.CheckCompany.Value = True
39             Call FormPem.ButtonOk_Click
40         End If
        
                                            addlog "END Private Sub rep.ComboCode_Click"
43     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Sub ComboYear_Click()
    On Error GoTo Errors
50     If FoldY <> "" Then FoldY = Rank.ComboYear.Value & "\"
51     If Not firstacn Then
                                            addlog "START Private Sub Rep.ComboYear_Change"
53         Rep.Range("YearR").Value = Rep.ComboYear.text
54         Call listPEM
55         For i = 0 To FormPem.ListBox1.ListCount - 1
56             For j = 1 To UBound(PEMsel)
57                 If FormPem.ListBox1.List(i, 0) = PEMsel(j) Then FormPem.ListBox1.Selected(i) = True
58             Next j
59         Next i
60         Call FormPem.ButtonOk_Click
                                            addlog "END Private Sub Rep.ComboYear_Change"
62     End If

    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub


Private Sub ComboCompany_Click() '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    On Error GoTo Errors
'
    'this.name
73     If Not NVal(ComboCompany.Value) = NVal(ComboCode.Value) And Not firstacn Then
                                            addlog "START Private Sub rep.ComboCompany_Click"
        Dim ret As Boolean
76         FormPem.CheckCompany.Value = False
77         ComboCode.Value = ComboCompany.Value
78         Call listPEM
79         Rep.LabPEM.Caption = ""
80         Rep.Range("SAIDI").Value = "-"
81         Rep.Range("SAIFI").Value = "-"
82         Rep.Range("ENS").Value = "-"
83         Rep.Range("MAIFI").Value = "-"
84         Rep.Range("NS").Value = "-"
85         Rep.Range("NM").Value = "-"
86         Rep.Range("info35110").Value = "-"
87         Rep.Range("info6").Value = "-"
88         Rep.Range("info04").Value = "-"
89         If divisionsREP.Count > 0 Then
90             FormPem.CheckCompany.Value = True
91             Call FormPem.ButtonOk_Click
92         End If
        
                                            addlog "END Private Sub rep.ComboCompany_Click"
95     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Sub LabelPer_Click()
101     FormPeriod.Show
End Sub

Private Sub LabPEM_Click()
105     tmp_PEM = PEMsel
106     FormPem.Show
End Sub



'' |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2009|fffd|.
Private Sub Worksheet_Activate()
    On Error GoTo Errors
                                        addlog "START rep.Worksheet_Activate"
115     If (Me.ComboCode.Value = "" Or ComboCode.Value <> Reg.ComboCode.Value) And Reg.ComboCode.Value <> "" And divisions.Count > 0 Then ' And Reg.ComboCode.Value <> "" Then
116         firstacn = True
117         Me.ComboCode.Value = Reg.ComboCode.Value
118         Me.ComboCompany.Value = Reg.ComboCompany.Value
119         Me.ComboYear.Value = Reg.ComboYear.Value
120         firstacn = False
121         Rep.Range("YearR").Value = Rep.ComboYear.text
122         Call listPEM(1)
123         kv = (Val(Reg.ComboMonth.Value) - 1) \ 3 + 1
124         For Each Control In FormPeriod.Controls
125             If Control.Name = "CheckBox" & kv Then
126                 Control.Value = True
                Exit For
128             End If
129         Next
130         firstacn = True
131         Call FormPeriod.ButtonOk_Click
132         firstacn = False
133         FormPem.CheckCompany.Value = True
134         Call FormPem.ButtonOk_Click
135     ElseIf (ComboCode.Value = "" And Reg.ComboCode.Value = "") Or divisions.Count = 0 Then
136         Call listPEM
137     Else
138         Call listPEM
139         For i = 0 To FormPem.ListBox1.ListCount - 1
140             For j = 1 To UBound(PEMsel)
141                 If FormPem.ListBox1.List(i, 0) = PEMsel(j) Then FormPem.ListBox1.Selected(i) = True
142             Next j
143         Next i
144         For i = 0 To FormPeriod.ListBox1.ListCount - 1
145             FormPeriod.ListBox1.Selected(i) = False
146         Next i
147         For i = 1 To UBound(Msel)
148             FormPeriod.ListBox1.Selected(Val(Msel(i))) = True
149         Next i
150         Call FormPem.ButtonOk_Click
151     End If


                                        addlog "END rep.Worksheet_Activate"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub



'' |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2009|fffd|.



Sub SetRangReport()
    On Error GoTo Errors
                                        addlog "START SetRangReport"

    Dim ret As Boolean
170     ret = EnableEvents("SetRangReport")
    
172     Rep.Range("SAIDI").Value = "-"
173     Rep.Range("SAIFI").Value = "-"
174     Rep.Range("ENS").Value = "-"
175     Rep.Range("MAIFI").Value = "-"
176     Rep.Range("NS").Value = "-"
177     Rep.Range("NM").Value = "-"
178     Rep.Range("info35110").Value = "-"
179     Rep.Range("info6").Value = "-"
180     Rep.Range("info04").Value = "-"
    
182     If UBound(PEMsel) = 0 Then Exit Sub
        
184     Call FormNamef
    
186     Call Reg.ArrLoadReport(FoldY1 & namef & "\" & "Report" & Rep.ComboCode.text & "_" & Rep.ComboYear.text & ".txt")
187     emp = False
188     Call calcSAIDI(arrRep)
    
190     If GlobErr Then
191         ret = EnableEvents("SetRangReport", ret)
192         GlobErr = False
193         MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||3cff| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 6 |fffd| 154 |fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||3cff| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| 0,4-154 |fffd||fffd|", vbOKOnly, "|fffd||fffd||fffd||fffd||fffd|"
                                        addlog "END SetRangReport (GlobErr)"
        Exit Sub
196     End If
        
198     If emp Then
199         Rep.Range("SAIDI") = arr_SAIDI
200         Rep.Range("SAIFI") = arr_SAIFI
201         Rep.Range("ENS") = arr_ENS
202         Rep.Range("MAIFI") = arr_MAIFI
203         Rep.Range("NS") = arr_NS
204         Rep.Range("NM") = arr_NM
205         Rep.Range("info35110") = arr_info35110
206         Rep.Range("info6") = arr_info6
207         Rep.Range("info04") = arr_info04
208     End If
    
210     ret = EnableEvents("SetRangReport", ret)
211     If number > 0 Then
212         MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|" & " " & number & " " & "|fffd||fffd||fffd||fffd||fffd||fffd|(|fffd|), |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbOKOnly, "|fffd||fffd||fffd||fffd||fffd|"
213     End If
                                        addlog "END SetRangReport"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Public Sub calcSAIDI(arr_Rep)
    On Error GoTo Errors
    Dim tmp_SAIDI() 'As Double
    Dim tmp_SAIFI() 'As Double
    Dim tmp_MAIFI() 'As Double
    Dim tmp_info35110() 'As Double
    Dim tmp_info6() 'As Double
    Dim tmp_info04() 'As Double
    Dim tmp_zag() 'As Double
    Dim infoexist As Boolean
229     ReDim arr_SAIDI(1 To 9, 1 To 7)
230     ReDim arr_SAIFI(1 To 9, 1 To 7)
231     ReDim arr_ENS(1 To 9, 1 To 7)
232     ReDim arr_MAIFI(1 To 9, 1 To 7)
233     ReDim arr_NS(1 To 9, 1 To 7)
234     ReDim arr_NM(1 To 9, 1 To 7)
235     ReDim arr_zag(1 To 9, 1 To 2)
236     ReDim arr_info35110(1 To 2, 1 To 2)
237     ReDim arr_info6(1 To 2, 1 To 2)
238     ReDim arr_info04(1 To 2, 1 To 2)
239     ReDim tmp_SAIDI(1 To 9, 1 To 7)
240     ReDim tmp_SAIFI(1 To 9, 1 To 7)
241     ReDim tmp_MAIFI(1 To 9, 1 To 7)
242     ReDim tmp_zag(1 To 9, 1 To 2)
243     kodpemcol = ArrFind(arr_columnRep, "KodPEM")
244     monthcol = ArrFind(arr_columnRep, "Month")
245     colSAIDI1 = ArrFind(arr_columnRep, "SAIDI1")
246     colSAIDI7 = ArrFind(arr_columnRep, "SAIDI7")
247     colSAIFI1 = ArrFind(arr_columnRep, "SAIFI1")
248     colSAIFI7 = ArrFind(arr_columnRep, "SAIFI7")
249     colENS1 = ArrFind(arr_columnRep, "ENS1")
250     colENS7 = ArrFind(arr_columnRep, "ENS7")
251     colMAIFI1 = ArrFind(arr_columnRep, "MAIFI1")
252     colMAIFI7 = ArrFind(arr_columnRep, "MAIFI7")
253     colNS1 = ArrFind(arr_columnRep, "NS1")
254     colNS7 = ArrFind(arr_columnRep, "NS7")
255     colNM1 = ArrFind(arr_columnRep, "NM1")
256     colNM7 = ArrFind(arr_columnRep, "NM7")
257     colNerr = ArrFind(arr_columnRep, "Nerr")
258     colN = ArrFind(arr_columnRep, "N")
259     colC = ArrFind(arr_columnRep, "C")
260     tmp_arr1 = Array("I_kv", "II_kv", "III_kv", "IV_kv")
261     number = 0
262     For i = LBound(PEMsel) + 1 To UBound(PEMsel)
263         infoexist = False
264         For j = LBound(arr_Rep) + 1 To UBound(arr_Rep) Step 9
265             If IsNull(ArrFind(tmp_arr1, arr_Rep(j, monthcol))) Then
266                 If ((FormPeriod.ListBox1.Selected(Val(arr_Rep(j, monthcol)) - 1) And Not ThisWorkbook.ActiveSheet.CodeName = "Check") Or ThisWorkbook.ActiveSheet.CodeName = "Check") And PEMsel(i) = arr_Rep(j, kodpemcol) Then
267                     emp = True
268                     If Val(arr_Rep(j + 1, colNerr)) > 0 And Not isCheck Then GlobErr = True: Exit Sub
269                     For k = 1 To 9
270                         For m = colSAIDI1 To colSAIDI7
271                             If NVal(arr_Rep(j + k - 1, m)) <> 0 Then
272                                 tmp_SAIDI(k, m - 3) = NVal(tmp_SAIDI(k, m - 3)) + NVal(arr_Rep(j + k - 1, m))
273                             End If
274                         Next m
                        
276                         For m = colSAIFI1 To colSAIFI7
277                             If Val(Replace(arr_Rep(j + k - 1, m), ",", ".")) <> 0 Then
278                                 tmp_SAIFI(k, m - 10) = NVal(tmp_SAIFI(k, m - 10)) + NVal(arr_Rep(j + k - 1, m))
279                             End If
280                         Next m
    
282                         For m = colENS1 To colENS7
283                             If Val(Replace(arr_Rep(j + k - 1, m), ",", ".")) <> 0 Then
284                                 arr_ENS(k, m - 17) = NVal(arr_ENS(k, m - 17)) + NVal(arr_Rep(j + k - 1, m))
285                             End If
286                         Next m
    
288                         For m = colMAIFI1 To colMAIFI7
289                             If Val(Replace(arr_Rep(j + k - 1, m), ",", ".")) <> 0 Then
290                                 tmp_MAIFI(k, m - 24) = NVal(tmp_MAIFI(k, m - 24)) + NVal(arr_Rep(j + k - 1, m))
291                             End If
292                         Next m
    
294                         For m = colNS1 To colNS7
295                             If Val(arr_Rep(j + k - 1, m)) <> 0 Then
296                                 arr_NS(k, m - 33) = Val(arr_NS(k, m - 33)) + Val(arr_Rep(j + k - 1, m))
297                             End If
298                         Next m
    
300                         For m = colNM1 To colNM7
301                             If Val(arr_Rep(j + k - 1, m)) <> 0 Then
302                                 arr_NM(k, m - 40) = Val(arr_NM(k, m - 40)) + Val(arr_Rep(j + k - 1, m))
303                             End If
304                         Next m
305                         If infoexist = False Then
306                             For m = colN To colC
307                                 tmp_zag(k, m - 31) = arr_Rep(j + k - 1, m)
    '                            tmp_zag(9, m - 31) = arr_Rep(j + 8, m)
309                             Next m
310                         End If
                        
312                             For m = 1 To 7
313                                 arr_SAIDI(k, m) = NVal(arr_SAIDI(k, m)) + NVal(tmp_SAIDI(k, m))
314                                 arr_SAIFI(k, m) = NVal(arr_SAIFI(k, m)) + NVal(tmp_SAIFI(k, m))
315                                 arr_MAIFI(k, m) = NVal(arr_MAIFI(k, m)) + NVal(tmp_MAIFI(k, m))
316                             Next m
317                             ReDim tmp_SAIDI(1 To 9, 1 To 7)
318                             ReDim tmp_SAIFI(1 To 9, 1 To 7)
319                             ReDim tmp_MAIFI(1 To 9, 1 To 7)
320                     Next k
321                     infoexist = True
322                     number = number + Val(arr_Rep(j, colNerr))
323                     If isCheck And UBound(arrCheck) > 0 And ThisWorkbook.ActiveSheet.CodeName = "Check" Then
324                         namecol = arrPEM(ArrFind(arrPEM, PEMsel(i), , "KodPEM"), 1)
325                         stovp = 0
326                         If arrCheck(1, 1) = "" Then
327                             arrCheck(1, 1) = namecol
328                             arrCheck(7, 1) = namecol
329                             stovp = 1
330                         Else
331                             For jj = 1 To UBound(arrCheck, 2)
332                                 If arrCheck(1, jj) = namecol Then stovp = jj: Exit For
333                             Next jj
334                             If stovp = 0 Then
335                                 ReDim Preserve arrCheck(1 To UBound(arrCheck), 1 To UBound(arrCheck, 2) + 1)
336                                 stovp = UBound(arrCheck, 2)
337                                 arrCheck(1, stovp) = namecol
338                                 arrCheck(7, stovp) = namecol
339                             End If
340                         End If
341                         arrCheck(2, stovp) = Val(arrCheck(2, stovp)) + Val(arrRepOld(j + 8, colNS7)) + Val(arrRepOld(j + 8, colNM7))
342                         arrCheck(3, stovp) = Val(arrCheck(3, stovp)) + Val(arrRep(j + 6, colNerr))
343                         arrCheck(4, stovp) = Val(arrCheck(4, stovp)) + Val(arrRep(j + 7, colNerr))
344                         arrCheck(5, stovp) = Val(arrCheck(5, stovp)) + Val(arrRep(j + 5, colNerr))
345                         arrCheck(8, stovp) = Val(arrCheck(8, stovp)) + Val(arrRep(j, colNerr))
346                         arrCheck(9, stovp) = Val(arrCheck(9, stovp)) + Val(arrRep(j + 1, colNerr))
347                         arrCheck(10, stovp) = Val(arrCheck(10, stovp)) + Val(arrRep(j + 2, colNerr))
348                         arrCheck(11, stovp) = Val(arrCheck(11, stovp)) + Val(arrRep(j + 3, colNerr))
349                         arrCheck(12, stovp) = Val(arrCheck(12, stovp)) + Val(arrRep(j + 4, colNerr))
350                         arrCheck(13, stovp) = arrCheck(5, stovp)
351                         tmpD = Split(arrRep(j + 8, colNerr), "|")
352                         arrCheck(15, stovp) = Val(arrCheck(15, stovp)) + Val(tmpD(0))
353                         arrCheck(16, stovp) = Val(arrCheck(16, stovp)) + Val(tmpD(1))
354                         arrCheck(17, stovp) = Val(arrCheck(17, stovp)) + Val(arrRep(j + 8, colSAIDI1 + 1)) + Val(arrRep(j + 8, colSAIDI7 - 1))
355                         arrCheck(18, stovp) = Val(arrCheck(18, stovp)) + Val(arrRepOld(j + 8, colSAIDI1 + 1)) + Val(arrRepOld(j + 8, colSAIDI7 - 1))
356                     End If
357                 End If
358             End If
359         Next j
360         For k = 1 To 9
361             For m = 1 To 2
362                 arr_zag(k, m) = NVal(arr_zag(k, m)) + NVal(tmp_zag(k, m))
363             Next m
364         Next k
365         ReDim tmp_zag(1 To 9, 1 To 2)
366     Next i
    
368     For t = 1 To 9
369         For j = 1 To 7
370             Select Case t
                Case 1 To 3, 6, 9
372                     dil = Val(arr_zag(9, 1))
                Case 4, 7
374                     dil = Val(arr_zag(1, 1)) + Val(arr_zag(2, 1)) + Val(arr_zag(4, 1)) + Val(arr_zag(7, 1))
                Case 5, 8
376                     dil = Val(arr_zag(5, 1)) + Val(arr_zag(8, 1))
377             End Select
378             If dil > 0 Then
379                 arr_SAIDI(t, j) = IIf(arr_SAIDI(t, j) = 0, "", arr_SAIDI(t, j) / dil)
380                 arr_SAIFI(t, j) = IIf(arr_SAIFI(t, j) = 0, "", arr_SAIFI(t, j) / dil)
381                 arr_MAIFI(t, j) = IIf(arr_MAIFI(t, j) = 0, "", arr_MAIFI(t, j) / dil)
382             Else
383                 arr_SAIDI(t, j) = ""
384                 arr_SAIFI(t, j) = ""
385                 arr_MAIFI(t, j) = ""
386             End If
387         Next j
388     Next t
    
390     For i = 1 To 2
391         For j = 1 To 2
392             arr_info35110(i, j) = IIf(arr_zag(i, j) = 0, "", arr_zag(i, j))
393             arr_info6(i, j) = IIf(arr_zag(i + 3, j) = 0, "", arr_zag(i + 3, j))
394             arr_info04(i, j) = IIf(arr_zag(i + 6, j) = 0, "", arr_zag(i + 6, j))
395         Next j
396     Next i
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Sub listPEM(Optional activ As Integer)
    On Error GoTo Errors
403     Set divisionsREP = CreateObject("Scripting.Dictionary")
    Dim arrDicItems
    Dim arrDicKeys
406     divisionsREP.RemoveAll
407     Call FormNamef
408     If Rep.ComboCode.Value = Reg.ComboCode.Value And Rep.ComboYear.Value = Reg.ComboYear.Value Then
'        divisionsREP = divisions
410         If divisions.Count > 0 Then
411             arrDicItems = divisions.items
412             arrDicKeys = divisions.keys
413             For i = 0 To divisions.Count - 1
414                 divisionsREP.Add arrDicKeys(i), arrDicItems(i)
415             Next i
416         End If
417     Else
418         arr_columnPEM = Array("KodCompany", "NamePEM", "KodPEM")
419         tmp_arr = Reg.ArrLoad(FoldY1 & namef & "\" & "PEM" & Rep.ComboCode.Value & ".txt", arr_columnPEM)
420         colK = ArrFind(arr_columnPEM, "KodPEM")
421         colN = ArrFind(arr_columnPEM, "NamePEM")
422         For i = 1 To UBound(tmp_arr)
423             divisionsREP.Add tmp_arr(i, colK), tmp_arr(i, colN)
424         Next i
425         FormPem.TextBox1.Value = ""
                
427     End If

429     If activ > 0 And Reg.ComboCode.text <> "" Then
430         FormPem.CheckCompany.Caption = Data.Range("D1:D44").Cells(Data.Range("kods").Find(Reg.ComboCode.text).Row).Value
431     ElseIf activ = 0 And Rep.ComboCode.text <> "" Then FormPem.CheckCompany.Caption = Data.Range("D1:D44").Cells(Data.Range("kods").Find(Rep.ComboCode.text).Row).Value
432     End If
433     FormPem.ListBox1.Clear
434      If divisionsREP.Count > 0 Then
435         arrDicItems = divisionsREP.items
436         arrDicKeys = divisionsREP.keys
437         For i = 0 To divisionsREP.Count - 1
438             FormPem.ListBox1.AddItem ""
439             FormPem.ListBox1.List(i, 0) = arrDicKeys(i)
440             FormPem.ListBox1.List(i, 1) = arrDicItems(i)
441         Next i
442         If activ > 0 And Reg.ComboCodePEM.ListIndex >= 0 Then FormPem.ListBox1.Selected(Reg.ComboCodePEM.ListIndex) = True
443     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo Errors
450     If (Union(Target.Cells(1), Range("ContactsR")).Address = Range("ContactsR").Address) Then
                                                        addlog "START Private Sub rep.Worksheet_Change ((Reg.ComboCodePEM.Value) = '')"

453         If aa > 0 And indC >= 0 Then
454             If Rep.LabPEM.Caption = Rep.ComboCompany.text And UBound(PEMsel) > 1 Then
455                 Call FormCarr(arrCKV)
456             Else
457                 Call FormCarr(arrCREP)
458                 arrCREP(Val(aa) + indC, ArrFind(arr_columnC, "Month")) = aa
459             End If
            

462         End If
463         changedREP = True
        
                                                            addlog "END Private Sub rep.Worksheet_Change ((Reg.ComboCodePEM.Value) = '')"
466     End If
467     ThisWorkbook.Saved = True '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub
Private Sub FormCarr(tmp_arr)
    On Error GoTo Errors
473     arr_m = Array("I_kv", "II_kv", "III_kv", "IV_kv")
474     If Rep.LabPEM.Caption = Rep.ComboCompany.text And UBound(PEMsel) > 1 Then
475         tmp_arr(Val(aa) + indC, ArrFind(arr_columnC, "Month")) = arr_m(Val(aa) - 1)
476     End If
477     tmp_arr(Val(aa) + indC, ArrFind(arr_columnC, "Person")) = Rep.Range("I38").Value
478     tmp_arr(Val(aa) + indC, ArrFind(arr_columnC, "Tel")) = Rep.Range("H40").Value
479     tmp_arr(Val(aa) + indC, ArrFind(arr_columnC, "email")) = Rep.Range("AA40").Value
480     tmp_arr(Val(aa) + indC, ArrFind(arr_columnC, "Address1")) = Rep.Range("J15").Value
481     tmp_arr(Val(aa) + indC, ArrFind(arr_columnC, "Address2")) = Rep.Range("F17").Value
482     tmp_arr(Val(aa) + indC, ArrFind(arr_columnC, "EDRPOU")) = Rep.Range("R19").Value
483     tmp_arr(Val(aa) + indC, ArrFind(arr_columnC, "Fax")) = Rep.Range("Q40").Value
484     tmp_arr(Val(aa) + indC, ArrFind(arr_columnC, "Owner")) = Rep.Range("X35").Value
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub



Public Sub saveC()
    On Error GoTo Errors
493     If ThisWorkbook.ActiveSheet.CodeName = "Rep" And Not RegDeact Then
494         Call FormNamef
495         Call Reg.ArrSave(arrCREP, ThisWorkbook.path & "\" & FoldY1 & CStr(namef), "C" & Rep.ComboYear.text + ".txt")
496         If Rep.LabPEM.Caption = Rep.ComboCompany.text And UBound(PEMsel) > 1 Then
497             Call Reg.ArrSave(arrCKV, ThisWorkbook.path & "\" & FoldY1 & CStr(namef), "CKV" & Rep.ComboYear.Value + ".txt")
498         End If
499     Else
500         Call Reg.ArrSave(arrC, ThisWorkbook.path & "\" & FoldY & file_name, "C" & Reg.ComboYear.text + ".txt")
501     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Public Sub ArrloadCREP()
    On Error GoTo Errors
'    Call FormNamef
509     If Rep.ComboCode.Value = Reg.ComboCode.Value And Rep.ComboYear.Value = Reg.ComboYear.Value Then
510         Call Reg.ArrLoadC(FoldY & file_name & "\" & "C" & CStr(Data.Range("year").Value) + ".txt")
511         arrCREP = arrC
512     Else
513         arr_columnC = Array("Kod", "KodPEM", "Month", "Person", "Tel", "email", "Address1", "Address2", "EDRPOU", "Fax", "Owner", "NEnd", "Block")
514         arrCREP = Reg.ArrLoad(FoldY1 & namef & "\" & "C" & Rep.ComboYear.Value + ".txt", arr_columnC)
515     End If
    
'    arr_column = Array("Kod", "Quarter", "Person", "Tel", "email", "Address1", "Address2", "EDRPOU", "Fax", "Owner", "NEnd")
518     arrCKV = Reg.ArrLoad(FoldY1 & namef & "\" & "CKV" & Rep.ComboYear.Value + ".txt", arr_columnC, 4)
519     arr_m = Array("I_kv", "II_kv", "III_kv", "IV_kv")
520     kodcol = ArrFind(arr_columnC, "Kod")
521     monthcol = ArrFind(arr_columnC, "Month")
522     For i = 1 To 4
523         arrCKV(i, kodcol) = Reg.ComboCode.text
'        arrCKV(i, monthcol) = arr_m(i - 1)
525     Next i
        
527     aa = -1
528     indC = -1
529     i_kv = 0
530     tmp_arr = Array("I |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "II |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "III |fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "IV |fffd||fffd||fffd||fffd||fffd||fffd||fffd|")
531     tmp_arr2 = Array("03", "06", "09", "12")
532     If Rep.LabPEM.Caption = Rep.ComboCompany.text And UBound(PEMsel) > 1 Then
533         aa = IIf(IsNull(ArrFind(tmp_arr, Rep.LabelPer.Caption)), -1, ArrFind(tmp_arr, Rep.LabelPer.Caption) + 1)
534         indC = 0
535         If aa = -1 And Rep.Range("R9").Value <> "" Then
536             aa = (Data.Range("C1:C12").Cells(Data.Range("months").Find(Rep.Range("R9").Value).Row).Value - 1) \ 3 + 1
537         End If
538     End If
539     If Rep.Range("R9").Value <> "" And UBound(PEMsel) = 1 Then ' Or Rep.LabPEM.Caption = Rep.ComboCompany.Text) Then
540         i_kv = IIf(IsNull(ArrFind(tmp_arr, Rep.LabelPer.Caption)), -1, ArrFind(tmp_arr, Rep.LabelPer.Caption) + 1)
541         If i_kv > 0 Then
542             aa = tmp_arr2(i_kv - 1)
543         Else
544             aa = Data.Range("C1:C12").Cells(Data.Range("months").Find(Rep.Range("R9").Value).Row).Value
545         End If
546         ncol = ArrFind(arr_columnC, "KodPEM")
547         For i = LBound(arrCREP) + 1 To UBound(arrCREP) Step 12
548             If arrCREP(i, ncol) = PEMsel(UBound(PEMsel)) Then
549                 indC = i - 1
                Exit For
551             End If
552         Next i
553     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Public Sub SetRangCREP()
    On Error GoTo Errors
560     Application.EnableEvents = False
561     Rep.Range("ContactsR").Value = ""
    
563     If aa > 0 And indC >= 0 Then

565         If Rep.LabPEM.Caption = Rep.ComboCompany.text And UBound(PEMsel) > 1 Then
566             tmp_arr = arrCKV
567             C = Val(aa)
568             For i = Val(aa) To 1 Step -1
569                 If arrCKV(i, ArrFind(arr_columnC, "Month")) <> "" Then C = i: Exit For
570             Next i
571         Else
572             tmp_arr = arrCREP
573             C = 1
574             For i = Val(aa) To 1 Step -1
575                 If arrCREP(i + indC, ArrFind(arr_columnC, "Month")) <> "" Then C = i: Exit For
576             Next i
577         End If

579         Rep.Range("ContactsR").Areas(1).Value = tmp_arr(C + indC, ArrFind(arr_columnC, "Address1"))
580         Rep.Range("ContactsR").Areas(2).Value = tmp_arr(C + indC, ArrFind(arr_columnC, "Address2"))
581         Rep.Range("ContactsR").Areas(3).Value = tmp_arr(C + indC, ArrFind(arr_columnC, "EDRPOU"))
582         Rep.Range("ContactsR").Areas(4).Value = tmp_arr(C + indC, ArrFind(arr_columnC, "Owner"))
583         Rep.Range("ContactsR").Areas(5).Value = tmp_arr(C + indC, ArrFind(arr_columnC, "Person"))
584         Rep.Range("ContactsR").Areas(6).Value = tmp_arr(C + indC, ArrFind(arr_columnC, "Tel"))
585         Rep.Range("ContactsR").Areas(7).Value = tmp_arr(C + indC, ArrFind(arr_columnC, "Fax"))
586         Rep.Range("ContactsR").Areas(8).Value = tmp_arr(C + indC, ArrFind(arr_columnC, "email"))
587     End If
    
589     Application.EnableEvents = True
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub





Public Sub Worksheet_Deactivate()
    On Error GoTo Errors
600     If changedREP Then
'        qqq = MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd|?", vbYesNo) '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
602         qqq = MsgBox("|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| """ & file_name & ".rar"" ?", vbYesNo) '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
603         If qqq = vbYes Then
604             changedREP = False
605             Call FormNamef
606             Call Reg.ArrSave(arrCREP, ThisWorkbook.path & "\" & FoldY1 & namef, "C" & Rep.ComboYear.text + ".txt")
607         Else
608             Call Rep.ArrloadCREP
609             Call Rep.SetRangCREP
610         End If
611     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub


Private Sub FormNamef()
    On Error GoTo Errors
619     If FoldY <> "" Then FoldY1 = Rep.ComboYear.Value & "\"
620     namef = "EI_" & Rep.ComboYear.Value & "_" & Rep.ComboCode.Value
621     Set folder1 = FSO.GetFolder(ThisWorkbook.path & "\" & FoldY1)
622     If Reg.CheckBoxCheck.Value Then
623         For Each File In folder1.Files
624             If Left(File.Name, 13) = namef And Mid(File.Name, Len(File.Name) - 4, 1) = "+" Then namef = Left(File.Name, Len(File.Name) - 4): Exit For
625         Next
626     Else
627         For Each File In folder1.Files
628             If Left(File.Name, 13) = namef And Not Mid(File.Name, Len(File.Name) - 4, 1) = "+" Then namef = Left(File.Name, Len(File.Name) - 4): Exit For
629         Next
630     End If
631     If FSO.FileExists(ThisWorkbook.path & "\" & FoldY1 & namef & ".rar") And Not FSO.FolderExists(ThisWorkbook.path & "\" & FoldY1 & namef) Then
632         Call Reg.UnpackBackup(FoldY1 & namef)
633     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
636 End Sub








Attribute VB_Name = "Start"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "UserForm2"
Attribute VB_Base = "0{D5AE376A-5B20-4D7A-A32D-202AA253E6EC}{FACD5567-8110-40E9-A3CB-6E0E4D2D3BF3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'Option Explicit

Private Sub CommandButton3_Click()
    On Error GoTo Errors
5     If rowData = 0 Then
6         MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", vbOKOnly, "|fffd||fffd||fffd||fffd||fffd|"
7     Else
8         op = InputBox("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Data.Range("Names").Cells(rowData, 1).Value)
9         If op <> "" And op <> Data.Range("Names").Cells(rowData, 1).Value Then
10             Data.Range("Names").Cells(rowData, 1).Value = op
11             arrNameComp(1, 0) = Data.Range("Names").Cells(rowData, 2).Value
12             arrNameComp(1, 1) = op
13         End If
14     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub CommandButton4_Click()
    '===============================================================
    addlog "END UserForm2 Show (CommandButton4_Click)"
    '===============================================================
23     Unload UserForm2
End Sub

Private Sub ListBox1_Click()
27     rowData = Me.ListBox1.ListIndex + 1
End Sub



Private Sub UserForm_Initialize()
    '===============================================================
    addlog "START UserForm2 Show"
    '===============================================================
36     Me.ListBox1.Value = Reg.ComboCompany.text
37     rowData = Me.ListBox1.ListIndex + 1
End Sub
Attribute VB_Name = "UserForm3"
Attribute VB_Base = "0{50FCBD4D-85CB-4151-8E3E-63185D1A4D5F}{FF2D33F6-532F-4602-877C-1BDFF558DACC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub CommandButton1_Click()
    On Error GoTo Errors
5     If rowData = 0 Then
6         MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|", vbOKOnly, "|fffd||fffd||fffd||fffd||fffd|"
7     Else
8         op = InputBox("|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", Me.ListBox1.List(rowData - 1, 2))
9         If op <> "" Then
10             divisions.Item(Me.ListBox1.List(rowData - 1, 1)) = op
11             Me.ListBox1.List(rowData - 1, 2) = op
12             Reg.ComboPEM.List(rowData - 1, 0) = op
            
14             NamePEM = ArrFind(arr_columnPEM, "NamePEM")
15             kodPEM = ArrFind(arr_columnPEM, "KodPEM")
16             For i = LBound(arrPEM) + 1 To UBound(arrPEM)
17                 If arrPEM(i, kodPEM) = Me.ListBox1.List(rowData - 1, 1) Then arrPEM(i, NamePEM) = op: Exit For
18             Next i
19             sheetChanged = True
20         End If
21     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub CommandButton3_Click()
27     If divisions.Count = 1 Then
28         q = MsgBox("                        |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|?" & vbNewLine & vbNewLine & "(|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| " & file_name & ".rar |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & vbNewLine & " |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & Reg.ComboYear.text & "_" & Reg.ComboCode.text & ".rar)", 4, "|fffd||fffd||fffd||fffd||fffd|!")
29     End If
30     If q = vbNo Then Exit Sub
                                        addlog "UserForm3 Show (UserForm4.Show)"
32         UserForm4.Show
                                        addlog "END UserForm3 Show (CommandButton3_Click)"
34         Unload Me
End Sub

Private Sub CommandButton4_Click()

                                        addlog "END UserForm3 Show (CommandButton4_Click)"
40     Unload Me
End Sub

Private Sub ListBox1_Click()
44     rowData = Me.ListBox1.ListIndex + 1
End Sub

Private Sub ListBox1_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
48     Call CommandButton1_Click
End Sub



Private Sub UserForm_Activate()
    On Error GoTo Errors
                                        addlog "START UserForm3 Show"
    Dim arrDicItems
    Dim arrDicKeys
58     UserForm3.ListBox1.Clear
59      If divisions.Count > 0 Then
60         arrDicItems = divisions.items
61         arrDicKeys = divisions.keys
62         For i = 0 To divisions.Count - 1
63             UserForm3.ListBox1.AddItem ""
64             UserForm3.ListBox1.List(i, 0) = i + 1
65             UserForm3.ListBox1.List(i, 1) = arrDicKeys(i)
66             UserForm3.ListBox1.List(i, 2) = arrDicItems(i)
67         Next i
68     End If
69     rowData = UserForm3.ListBox1.ListIndex + 1
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub
Attribute VB_Name = "UserForm4"
Attribute VB_Base = "0{F87D3318-5115-4DEB-9ACF-5723EAE2E409}{915C9F38-9C4F-4F83-A6F9-2880D547D4C7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'Option Explicit

Private Sub CommandButton1_Click()
    On Error GoTo Errors
5     If Len(Me.TextBox1.Value) = 2 And Me.TextBox2.Value <> "" Then
        
7         If divisions.exists(Me.TextBox1.Value) Then
8             MsgBox "|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", vbOKOnly, "|fffd||fffd||fffd||fffd||fffd|!!!"
            Exit Sub
10         Else
11             If divisions.Count = 1 Then
12                 If FSO.FolderExists(ThisWorkbook.path & "\" & FoldY & file_name) Then
13                     Set folder = FSO.GetFolder(ThisWorkbook.path & "\" & FoldY & file_name)
14                     If FSO.FolderExists(ThisWorkbook.path & "\" & FoldY & "EI_" & Reg.ComboYear.text & "_" & Reg.ComboCode.text) Then
15                         FSO.DeleteFolder ThisWorkbook.path & "\" & FoldY & "EI_" & Reg.ComboYear.text & "_" & Reg.ComboCode.text, True
16                     End If
17                     folder.Name = "EI_" & Reg.ComboYear.text & "_" & Reg.ComboCode.text
                    
19                     Set filearh = FSO.GetFile(ThisWorkbook.path & "\" & FoldY & file_name & ".rar")
20                     fh = ThisWorkbook.path & "\" & FoldY & "Arhive"
21                     If Not FSO.FolderExists(fh) Then
22                         FSO.CreateFolder fh
23                     End If
24                     FSO.Copyfile ThisWorkbook.path & "\" & FoldY & file_name & ".rar", fh & "\"
25                     If FSO.FileExists(ThisWorkbook.path & "\" & FoldY & "EI_" & Reg.ComboYear.text & "_" & Reg.ComboCode.text & ".rar") Then
26                         FSO.DeleteFile ThisWorkbook.path & "\" & FoldY & "EI_" & Reg.ComboYear.text & "_" & Reg.ComboCode.text & ".rar", True
27                     End If
28                     filearh.Name = "EI_" & Reg.ComboYear.text & "_" & Reg.ComboCode.text & ".rar"
29                 End If
30                 file_name = "EI_" & Reg.ComboYear.text & "_" & Reg.ComboCode.text
31             End If
            
33             divisions.Add Me.TextBox1.Value, Me.TextBox2.Value
34             Reg.ComboCodePEM.AddItem Me.TextBox1.text
35             Reg.ComboPEM.AddItem Me.TextBox2.Value
36             Reg.ComboPEM.List(Reg.ComboPEM.ListCount - 1, 1) = CStr(Me.TextBox1.Value)
37             Reg.ComboCodePEM.Value = Me.TextBox1.text
38             UserForm3.ListBox1.AddItem ""
39             UserForm3.ListBox1.List(UserForm3.ListBox1.ListCount - 1, 1) = Me.TextBox1.Value
40             UserForm3.ListBox1.List(UserForm3.ListBox1.ListCount - 1, 2) = Me.TextBox2.Value
            
42             tmp_PEM = arrPEM
43             ReDim arrPEM(LBound(arrPEM) To UBound(arrPEM) + 1, LBound(arrPEM, 2) To UBound(arrPEM, 2))
44             For i = LBound(arrPEM) To UBound(arrPEM) - 1
45                 For j = LBound(arrPEM, 2) To UBound(arrPEM, 2)
46                     arrPEM(i, j) = tmp_PEM(i, j)
47                 Next j
48             Next i
49             arrPEM(UBound(arrPEM), ArrFind(arr_columnPEM, "KodCompany")) = Reg.ComboCode.text
50             arrPEM(UBound(arrPEM), ArrFind(arr_columnPEM, "KodPEM")) = Reg.ComboCodePEM.text
51             arrPEM(UBound(arrPEM), ArrFind(arr_columnPEM, "NamePEM")) = Reg.ComboPEM.text
52             sheetChanged = True
            
54         End If
        
56         Me.TextBox1.Value = ""
57         Me.TextBox2.Value = ""
                                        addlog "END UserForm4 Show"
59         Unload Me
60     Else
61         MsgBox "|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|", vbOKOnly, "|fffd||fffd||fffd||fffd||fffd|!!!"
62     End If
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.Name)
End Sub

Private Sub CommandButton2_Click()
                                        addlog "END UserForm4 Show"
69     Unload Me
End Sub
Private Sub TextBox2_Change()
72     If Len(TextBox2.Value) > 0 Then TextBox2.BackColor = &HFFFFFF Else TextBox2.BackColor = &HC0C0FF
End Sub
Private Sub TextBox1_Change()
75     If Len(TextBox1.Value) = 2 Then TextBox1.BackColor = &HFFFFFF Else TextBox1.BackColor = &HC0C0FF
End Sub

Private Sub UserForm_Initialize()
                                        addlog "START UserForm4 Show"
End Sub
Attribute VB_Name = "clsNode"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'Build 024
'***************************************************************************
'
' Authors:  JKP Application Development Services, info@jkp-ads.com, http://www.jkp-ads.com
'           Peter Thornton, pmbthornton@gmail.com
'
' (c)2013, all rights reserved to the authors
'
' You are free to use and adapt the code in these modules for
' your own purposes and to distribute as part of your overall project.
' However all headers and copyright notices should remain intact
'
' You may not publish the code in these modules, for example on a web site,
' without the explicit consent of the authors
'***************************************************************************

'-------------------------------------------------------------------------
' Module    : clsNode
' Company   : JKP Application Development Services (c)
' Author    : Jan Karel Pieterse (www.jkp-ads.com)
' Created   : 15-01-2013
' Purpose   : Holds all information of a node of the tree
'-------------------------------------------------------------------------
Option Explicit

Private mbExpanded As Boolean

Private mcolChildNodes As Collection

Private moParentNode As clsNode
Private moLastActiveNode As clsNode
Private moTree As clsTreeView

Private msKey As String
Private mvCaption

Private mlChecked As Long        ' PT checkbox tristate boolean 0/-1 or 1 for null
'Private mbVisible As Boolean        ' PT determines if the node can be displayed
Private mnIndex As Long             ' PT order added to Treeview's mcolNodes, won't change
Private mlVisIndex As Long          ' PT the visible order in the current view, changes with expand/collapse
Private mvIconMainKey               ' PT string name or numeric index as icon Key for the Image collection
Private mvIconExpandedKey           ' PT ditto for expanded icon
Private mlIconCnt As Long           ' PT number of icons availabel for this node 0, 1 or 2
Private msngTextWidth As Single     ' PT autosized text width before the node is widened beyond the frame
Private mlBackColor As Long         ' PT
Private mbBold As Boolean           ' PT
Private mlForeColor As Long         ' PT
Private mvTag

Private WithEvents mctlControl As MSForms.Label
Attribute mctlControl.VB_VarHelpID = -1
Private WithEvents mctlExpander As MSForms.Label
Attribute mctlExpander.VB_VarHelpID = -1
Private WithEvents moEditBox As MSForms.TextBox     ' PT editbox
Attribute moEditBox.VB_VarHelpID = -1
Private WithEvents mctlCheckBox As MSForms.Label    ' PT checkbox
Attribute mctlCheckBox.VB_VarHelpID = -1

Private mctlExpanderBox As MSForms.Label
Private mctlVLine As MSForms.Label  ' PT vertical line, only the first child node with children will have a vertical line
Private mctlHLine As MSForms.Label  ' PT horizontal line
Private mctlIcon As MSForms.Image   ' PT separate icon image control

Public Enum ndSortOrder
    ndAscending = 1
    ndDescending = 2
End Enum
Public Enum ndCompareMethod
    ndBinaryCompare = 0
    ndTextCompare = 1
End Enum
Public Enum ndMouse
    ndDown = 1
    ndUp = 2
    ndMove = 3
    ndBeforeDragOver = 4
    ndBeforeDropOrPaste = 5
End Enum

#If Mac Then
    Const mcFullWidth As Long = 800
#Else
    Const mcFullWidth As Long = 600
#End If

'*********************
'* Public Properties *
'*********************

Public Property Get BackColor() As Long

    BackColor = mlBackColor ' if zero the treecaller will apply the frame container's backcolor

End Property

Public Property Let BackColor(lColor As Long)
'PT if lColor is written as 0/black, change it to 1 as 0 means default
    mlBackColor = lColor
    If mlBackColor = 0 Then mlBackColor = 1
    If Not mctlControl Is Nothing Then
        mctlControl.BackColor = lColor
    End If
End Property

Public Property Get Bold() As Boolean
    Bold = mbBold
End Property

Public Property Let Bold(bBold As Boolean)
    mbBold = bBold
    If Not mctlControl Is Nothing Then
        mctlControl.Font.Bold = mbBold
    End If
End Property

Public Property Get Caption()
    Caption = mvCaption
End Property

Public Property Let Caption(ByVal vCaption)
    mvCaption = vCaption
    If Not mctlControl Is Nothing Then
        mctlControl.Caption = CStr(vCaption)
    End If
End Property

Public Property Get Child() As clsNode
' PT Returns a reference to the first Child node, if any
    On Error Resume Next
    Set Child = mcolChildNodes(1)
End Property

Public Property Get Checked()    ' PT
     ' Checked values are -1 true, 0 false, +1 mixed
     ' If TriState is enabled be careful not to return a potential +1 to a boolean or it'll coerce to True
    Checked = mlChecked
End Property

Public Property Let Checked(vChecked)  ' PT
    Dim bFlag As Boolean, bTriState As Boolean
    Dim lChecked As Long
    Dim cChild As clsNode

    ' Checked values are -1 true, 0 false, +1 mixed
    ' if vChecked is a boolean Checked will coerce to -1 or 0
    ' if vChecked is Null Checked is set as +1

    If VarType(vChecked) = vbBoolean Then
        lChecked = vChecked
    ElseIf IsNull(vChecked) Then
        lChecked = 1
    ElseIf vChecked >= -1 And vChecked <= 1 Then
        lChecked = vChecked
    End If

    bFlag = lChecked <> mlChecked
    mlChecked = lChecked

    If Not mctlCheckBox Is Nothing And bFlag Then
        moTree.Changed = True
        UpdateCheckbox
    End If
    
    If Not moTree Is Nothing Then    ' eg during clone
        bFlag = moTree.CheckBoxes(bTriState)
        If bTriState Then
            If ParentNode.Caption <> "RootHolder" Then
                ParentNode.CheckTriStateParent
            End If
            
            If Not ChildNodes Is Nothing Then
                For Each cChild In ChildNodes
                    cChild.CheckTriStateChildren mlChecked
                Next
            End If
        End If
    End If
    
End Property

Public Property Get ChildNodes() As Collection
    Set ChildNodes = mcolChildNodes
End Property

Public Property Set ChildNodes(colChildNodes As Collection)
    Set mcolChildNodes = colChildNodes
End Property

Public Property Get Expanded() As Boolean
    Expanded = mbExpanded
End Property

Public Property Let Expanded(ByVal bExpanded As Boolean)
    mbExpanded = bExpanded
    If Not Me.Expander Is Nothing Then
        UpdateExpanded bControlOnly:=False
    ElseIf Not Me.Control Is Nothing Then
        UpdateExpanded bControlOnly:=True
    End If
End Property

Public Property Get ForeColor() As Long
    ForeColor = mlForeColor
End Property

Public Property Let ForeColor(lColor As Long)
'PT if lColor is written as 0/black, change it to 1 as 0 means default
    mlForeColor = lColor
    If mlForeColor = 0 Then mlForeColor = 1
    If Not mctlControl Is Nothing Then
        mctlControl.ForeColor = lColor
    End If
End Property

Public Property Get FirstSibling() As clsNode
    If Not moParentNode Is Nothing Then    ' PT Root has no parent
        Set FirstSibling = moParentNode.GetChild(1)
    End If
End Property

Public Property Get LastSibling() As clsNode
    If Not moParentNode Is Nothing Then    ' PT Root has no parent
        Set LastSibling = moParentNode.GetChild(-1)    ' -1 flags GetChild to return the last Child
    End If
End Property

Public Property Get ImageExpanded()
' PT string name or numeric index for the main icon key
    ImageExpanded = mvIconExpandedKey
End Property

Public Property Let ImageExpanded(vImageExpanded)
' PT string name or numeric index for an expanded icon key
    On Error GoTo errExit
    If Not IsMissing(vImageExpanded) Then
        If Not IsEmpty(vImageExpanded) Then
            If Len(mvIconMainKey) = 0 Then
                mvIconMainKey = vImageExpanded
            End If
            mvIconExpandedKey = vImageExpanded
            mlIconCnt = 2
        End If
    End If
errExit:
End Property

Public Property Get ImageMain()
' PT string name or numeric index for the main icon key
    ImageMain = mvIconMainKey
End Property

Public Property Let ImageMain(vImageMain)
' PT string name or numeric index for the main icon key
    On Error GoTo errExit
    If Not IsMissing(vImageMain) Then
        If Not IsEmpty(vImageMain) Then
            mvIconMainKey = vImageMain
            If mlIconCnt = 0 Then mlIconCnt = 1
        End If
    End If
errExit:
End Property

Public Property Get Key() As String
    Key = msKey
End Property

Public Property Let Key(ByVal sKey As String)
    Dim bIsInMainCol As Boolean
    Dim i As Long
    Dim cTmp As clsNode

    On Error GoTo errH

    If Tree Is Nothing Then
        msKey = sKey
        Exit Property
    ElseIf msKey = sKey Or Len(sKey) = 0 Then
        Exit Property
    End If

    On Error Resume Next
    Set cTmp = Tree.Nodes.Item(sKey)
    On Error GoTo errH

    If Not cTmp Is Nothing Then
        err.Raise 457    ' standard duplicate key error
    End If

    ' to change the Key, remove Me and add Me back where it was with the new key
    For Each cTmp In Tree.Nodes
        i = i + 1
        If cTmp Is Me Then
            bIsInMainCol = True
            Exit For
        End If
    Next

    If bIsInMainCol Then
        With Tree.Nodes
            .Remove i
            If .Count Then
                .Add Me, sKey, i
            Else
                .Add Me
            End If
        End With
    Else
        ' Let Key  called by via move/copy
    End If

    msKey = sKey

    Exit Property
errH:
    err.Raise err.number, "Let Key", err.description
End Property

Public Property Get Level() As Long
    Dim lLevel As Long
    Dim cNode As clsNode

    On Error GoTo errH
    lLevel = -1
    Set cNode = Me.ParentNode
    While Not cNode Is Nothing
        lLevel = lLevel + 1
        Set cNode = cNode.ParentNode
    Wend
    Level = lLevel
    Exit Property
errH:
    #If DebugMode = 1 Then
        Stop
        Resume
    #End If
End Property

Public Property Get NextNode() As clsNode    ' can't name this proc 'Next' in VBA
' PT return the next sibling if there is one
    Dim i As Long
    Dim cNode As clsNode

    With Me.ParentNode
        For Each cNode In .ChildNodes
            i = i + 1
            If cNode Is Me Then
                Exit For
            End If
        Next
        If .ChildNodes.Count > i Then
            Set NextNode = .ChildNodes(i + 1)
        End If
    End With
End Property

Public Property Get ParentNode() As clsNode
    Set ParentNode = moParentNode
End Property

Public Property Set ParentNode(oParentNode As clsNode)
    Set moParentNode = oParentNode
End Property

Public Property Get Previous() As clsNode
' PT return the previous sibling if there is one
    Dim i As Long
    Dim cNode As clsNode

    With Me.ParentNode
        For Each cNode In Me.ParentNode.ChildNodes
            i = i + 1
            If cNode Is Me Then
                Exit For
            End If
        Next
        If i > 1 Then
            Set NextNode = .ChildNodes(i - 1)
        End If
    End With
End Property

Public Property Get Root() As clsNode
    Dim cTmp As clsNode
    Set cTmp = Me
    Do While Not cTmp.ParentNode.ParentNode Is Nothing
        Set cTmp = cTmp.ParentNode
    Loop
    Set Root = cTmp
End Property

Public Property Get Tag()
    Tag = mvTag
End Property

Public Property Let Tag(vTag)
    mvTag = vTag
End Property


'*****************************
'* Public subs and functions *
'*****************************

Public Function Sort(Optional ByVal ndOrder As ndSortOrder = ndAscending, _
                     Optional ByVal ndCompare As ndCompareMethod = ndTextCompare) As Boolean
' PT Sorts the child nodes,
'    returns True if the order has changed to flag Refresh should be called
    Dim sCaptions() As String
    Dim lStart As Long, lLast As Long, i As Long
    Dim colNodes As New Collection
    Dim bIsUnSorted As Boolean

    On Error GoTo errExit
    lStart = 1
    lLast = ChildNodes.Count    ' error if no childnodes to sort

    If lLast = 1 Then
        ' nothing to sort
        Exit Function
    End If

    ReDim idx(lStart To lLast) As Long
    ReDim sCaptions(lStart To lLast) As String
    For i = lStart To lLast
        idx(i) = i
        sCaptions(i) = ChildNodes.Item(i).Caption
    Next

    If ndOrder <> ndAscending Then ndOrder = -1    ' descending
    If ndCompare <> ndTextCompare Then ndCompare = ndBinaryCompare

    Call BinarySortIndexText(sCaptions(), lStart, lLast, idx, ndOrder, ndCompare)

    For i = lStart To lLast - 1
        If idx(i) <> idx(i + 1) - 1 Then
            bIsUnSorted = True
            Exit For
        End If
    Next

    If bIsUnSorted Then
        For i = lStart To lLast
            colNodes.Add ChildNodes(idx(i))
        Next
        Set ChildNodes = colNodes
        Sort = True
    End If

errExit:
'   Probably(?) any error was because there were no childnodes, no need to raise an error
End Function

Public Function AddChild(Optional sKey As String, _
                         Optional vCaption, _
                         Optional vImageMain, _
                         Optional vImageExpanded) As clsNode

    Dim cChild As clsNode

    On Error GoTo errH
    Set cChild = New clsNode

    With moTree.Nodes

        If Len(sKey) Then
100         .Add cChild, sKey
101
            cChild.Key = sKey
        Else
            .Add cChild
        End If

        cChild.Index = .Count
    End With

    If mcolChildNodes Is Nothing Then
        Set mcolChildNodes = New Collection
    End If

    mcolChildNodes.Add cChild

    With cChild
        If Not IsMissing(vImageMain) Then
            If Len(vImageMain) Then
                .ImageMain = vImageMain
            End If
        End If

        If Not IsMissing(vImageExpanded) Then
            If Len(vImageExpanded) Then
                .ImageExpanded = vImageExpanded
            End If
        End If

        .Caption = vCaption

        Set .Tree = moTree
        Set .ParentNode = Me
    End With

    Set AddChild = cChild

    Exit Function
errH:
    #If DebugMode = 1 Then
        Stop
        Resume
    #End If

    If Erl = 100 And err.number = 457 Then
        err.Raise vbObjectError + 1, "clsNode.AddChild", "Duplicate key: '" & sKey & "'"
    Else
        err.Raise err.number, "clsNode.AddChild", err.description
    End If
End Function

Public Function ChildIndex(sKey As String) As Long
'-------------------------------------------------------------------------
' Procedure : ChildIndex
' Company   : JKP Application Development Services (c)
' Author    : Jan Karel Pieterse (www.jkp-ads.com)
' Created   : 15-01-2013
' Purpose   : Returns the index of a childnode using its key
'-------------------------------------------------------------------------
    Dim cNode As clsNode
    Dim lCt As Long
    For Each cNode In mcolChildNodes
        lCt = lCt + 1
        If sKey = cNode.Key Then
            ChildIndex = lCt
            Set cNode = Nothing
            Exit Function
        End If
    Next
    Set cNode = Nothing
End Function

Public Function FullPath() As String
' PT, get all the grand/parent keys
' assumes use of key

    Dim s As String
    Dim cNode As clsNode

    On Error GoTo errDone
    s = Me.Key
    Set cNode = Me

    While err.number = 0
        Set cNode = cNode.ParentNode
        s = cNode.Key & "\" & s
    Wend

errDone:
    FullPath = s
End Function

Public Function GetChild(vKey As Variant) As clsNode
'-------------------------------------------------------------------------
' Procedure : GetChild
' Company   : JKP Application Development Services (c)
' Author    : Jan Karel Pieterse (www.jkp-ads.com)
' Created   : 15-01-2013
' Purpose   : Returns a childnode using its key
'-------------------------------------------------------------------------
    Dim cNode As clsNode
    Dim lIdx As Long

    If VarType(vKey) = vbString Then

        For Each cNode In mcolChildNodes
            If vKey = cNode.Key Then
                Set GetChild = cNode
                Set cNode = Nothing
                Exit Function
            End If
        Next

    ElseIf Not mcolChildNodes Is Nothing Then
        lIdx = vKey
        If lIdx = -1 Then
            lIdx = mcolChildNodes.Count
        End If
        If lIdx > 0 Then
            Set GetChild = mcolChildNodes(lIdx)
        Else: Set mcolChildNodes = Nothing
        End If
    End If

    Set cNode = Nothing
End Function


'*************************************************************************
'*    Friend Properties, Subs & Funtions                                 *
'*    ** these procedures are visible throughout the project but should  *
'*    ** only be used to communicate with the TreeView, ie clsTreeView   *
'*************************************************************************



'' PT new properties in 006PT2:
'' Created, CreatedButton, Checked, CheckBoxName, Index, VisIndex
''

Friend Property Get Control() As MSForms.Label
    Set Control = mctlControl
End Property

Friend Property Set Control(ctlControl As MSForms.Label)
    Set mctlControl = ctlControl
    If Not mctlControl Is Nothing Then
        If Not moTree Is Nothing Then
            Set mctlControl.Font = moTree.TreeControl.Font
        Else
            Stop
        End If
    End If
End Property

Friend Property Get Index() As Long    ' PT
    Index = mnIndex
End Property

Friend Property Let Index(idx As Long)
' PT Index: the order this node was added to Treeview's collection mcolNodes
'    Index will never increase but may decrement if previously added nodes are removed
    mnIndex = idx
End Property

Friend Property Let VisIndex(lVisIndex As Long)
    mlVisIndex = lVisIndex
End Property

Friend Property Get VisIndex() As Long    ' PT
    VisIndex = mlVisIndex
End Property

Friend Property Get Tree() As clsTreeView
    Set Tree = moTree
End Property

Friend Property Set Tree(oTree As clsTreeView)
    Set moTree = oTree
End Property

Friend Property Get Checkbox() As MSForms.Control
    Set Checkbox = mctlCheckBox
End Property

Friend Property Set Checkbox(oCtl As MSForms.Control)
    Set mctlCheckBox = oCtl
End Property

Friend Property Get Expander() As MSForms.Label
    Set Expander = mctlExpander
End Property

Friend Property Set Expander(ctlExpander As MSForms.Label)
    Set mctlExpander = ctlExpander
End Property

Friend Property Get ExpanderBox() As MSForms.Label
    Set ExpanderBox = mctlExpanderBox
End Property

Friend Property Set ExpanderBox(ctlExpanderBox As MSForms.Label)
    Set mctlExpanderBox = ctlExpanderBox
End Property

Friend Property Set HLine(ctlHLine As MSForms.Label)
    Set mctlHLine = ctlHLine
End Property

Friend Property Get HLine() As MSForms.Label
    Set HLine = mctlHLine
End Property

Friend Property Set Icon(ctlIcon As MSForms.Image)
    Set mctlIcon = ctlIcon
End Property

Friend Property Get Icon() As MSForms.Image
    Set Icon = mctlIcon
End Property

Friend Property Get TextWidth() As Single
    TextWidth = msngTextWidth
End Property

Friend Property Let TextWidth(sngTextWidth As Single)
    msngTextWidth = sngTextWidth
End Property

Friend Property Get VLine() As MSForms.Label
    Set VLine = mctlVLine
End Property

Friend Property Set VLine(ctlVLine As MSForms.Label)
    Set mctlVLine = ctlVLine
End Property

Friend Sub CheckTriStateParent()
' PT set triState value of parent according to its childnodes' values
    Dim alChecked(-1 To 1) As Long
    Dim cChild As clsNode

    If Not ChildNodes Is Nothing Then
        For Each cChild In ChildNodes
            alChecked(cChild.Checked) = alChecked(cChild.Checked) + 1
        Next
        If alChecked(1) Then
            alChecked(1) = 1
        ElseIf alChecked(-1) = ChildNodes.Count Then
'            alChecked(1) = -1
            alChecked(1) = 1
        ElseIf alChecked(0) = ChildNodes.Count Then
            alChecked(1) = 0
        Else
            alChecked(1) = 1
        End If
        
        If Checked <> alChecked(1) Then
            mlChecked = alChecked(1)
            UpdateCheckbox
        End If

    End If
    
    If Not Me.Caption = "RootHolder" Then
        If Not ParentNode.ParentNode Is Nothing Then
            ParentNode.CheckTriStateParent
        End If
    End If

End Sub

Friend Sub CheckTriStateChildren(lChecked As Long)
' PT, make checked values of children same as parent's
'     only called if triState is enabled
Dim cChild As clsNode

    mlChecked = lChecked
    UpdateCheckbox

    If Not ChildNodes Is Nothing Then
        For Each cChild In ChildNodes
            cChild.CheckTriStateChildren lChecked
        Next
    End If
End Sub

Friend Function hasIcon(vKey) As Boolean
' PT get the appropriate icon key/index, if any
    If mlIconCnt = 2 And mbExpanded Then
        vKey = mvIconExpandedKey
        hasIcon = True    'Not IsEmpty(vKey) '(True
    ElseIf mlIconCnt Then
        vKey = mvIconMainKey
        hasIcon = True    'Not IsEmpty(vKey)
    End If
End Function

Friend Sub EditBox(bEnterEdit As Boolean)    '  PT new in 006PT2 ,,move to clsTreView
'-------------------------------------------------------------------------
' Procedure : moCtl_Click
' Author    : Peter Thornton
' Created   : 20-01-2013
' Purpose   : Enter/exit Editmode, show/hide the edit textbox
'-------------------------------------------------------------------------
    On Error Resume Next
    Set moEditBox = moTree.TreeControl.Controls("EditBox")
    On Error GoTo 0

    If bEnterEdit Then
    
        If moEditBox Is Nothing Then
            Set moEditBox = moTree.TreeControl.Controls.Add("forms.textbox.1", False)
            moEditBox.Name = "EditBox"
        End If

        With moEditBox
            .Left = Control.Left - 3
            .Top = Control.Top - 1.5
            .AutoSize = True
            .BorderStyle = fmBorderStyleSingle
            .text = Caption
            Control.Visible = False    ' hide the node label while editing
            .ZOrder 0
            .Visible = True
            .SelStart = 0
            .SelLength = Len(.text)
            .SetFocus
        End With

    ElseIf Not moEditBox Is Nothing Then
        ' exit editmode
        If Not moEditBox Is Nothing Then
            ' error if moEditBox has already been removed
            On Error Resume Next
            moEditBox.Visible = False
            moEditBox.text = ""
            Set moEditBox = Nothing
        End If
        Control.Visible = True

    End If
End Sub

Friend Function RemoveChild(cNode As clsNode) As Boolean
'PT remove a node from the collection,
'   note, this is only one part of the process of removing a node

    Dim lCt As Long
    Dim cTmp As clsNode
    On Error GoTo errH

    For Each cTmp In mcolChildNodes
        lCt = lCt + 1
        If cTmp Is cNode Then
            mcolChildNodes.Remove lCt
            RemoveChild = True
            Exit For
        End If
    Next

    If mcolChildNodes.Count = 0 Then
        Set mcolChildNodes = Nothing
        Me.Expanded = False
    End If

    Exit Function
errH:
    err.Raise vbObjectError, "RemoveChild", err.description
End Function

Friend Sub RemoveNodeControls()
    Dim cChild As clsNode
    If Not ChildNodes Is Nothing Then
        For Each cChild In ChildNodes
            cChild.RemoveNodeControls
        Next
    End If
    DeleteNodeControls False
End Sub

Friend Sub TerminateNode(Optional bDeleteNodeControls As Boolean)
'-------------------------------------------------------------------------
' Procedure : TerminateNode
' Company   : JKP Application Development Services (c)
' Author    : Jan Karel Pieterse (www.jkp-ads.com)
' Created   : 15-01-2013
' Purpose   : Terminates the class instance
'-------------------------------------------------------------------------
    Dim cChild As clsNode
    'Instead of the Terminate event of the class we use this public
    'method so it can be explicitly called by parent classes.
    'This is done because to break the two way or circular references
    'between the parent child classes.
    
    'The most important call in this routine is to destroy the reference
    'between this node class and the parent treeview class -
    '    < Set moTree = Nothing >
    'Once all the moTree references to have been destroyed everything else will
    ' 'tear down' normally

    If Not ChildNodes Is Nothing Then
        For Each cChild In ChildNodes
            ' recursively drill down to all child nodes in this branch
            cChild.TerminateNode bDeleteNodeControls
        Next
    End If

    ' If deleting individual nodes while the treeview is running we also want to
    ' remove all associated controls as well as removing references
    
    If bDeleteNodeControls Then
        DeleteNodeControls True
        If bDeleteNodeControls Then
            Index = -1
        End If
    End If

    Set mcolChildNodes = Nothing
    Set moTree = Nothing
End Sub


'******************************
'* Private subs and functions *
'******************************

Private Sub BinarySortIndexText(sCaptions() As String, ByVal lStart As Long, ByVal lEnd As Long, ByRef idx() As Long, ndOrder As Long, ndCompare As ndCompareMethod)
' PT sorts the index array based on the string array
    Dim lSmall As Long, lLarge As Long, sMid As String, lTmp As Long

    lSmall = lStart
    lLarge = lEnd
    sMid = sCaptions(idx((lSmall + lLarge) / 2))

    Do While lSmall <= lLarge
        Do While (StrComp(sCaptions(idx(lSmall)), sMid, ndCompare) = -ndOrder And lSmall < lEnd)
            lSmall = lSmall + 1
        Loop
        Do While (StrComp(sCaptions(idx(lLarge)), sMid, ndCompare) = ndOrder And lLarge > lStart)
            lLarge = lLarge - 1
        Loop
        If lSmall <= lLarge Then
            lTmp = idx(lSmall)
            idx(lSmall) = idx(lLarge)
            idx(lLarge) = lTmp
            lSmall = lSmall + 1
            lLarge = lLarge - 1
        End If
    Loop

    If lStart <= lLarge Then
        Call BinarySortIndexText(sCaptions(), lStart, lLarge, idx, ndOrder, ndCompare)
    End If
    If lSmall <= lEnd Then
        Call BinarySortIndexText(sCaptions(), lSmall, lEnd, idx, ndOrder, ndCompare)
    End If
End Sub

Private Sub DeleteNodeControls(bClearIndex As Boolean)
'PT Delete all controls linked to this node

    On Error GoTo errH

    With moTree.TreeControl.Controls
        If Not mctlControl Is Nothing Then
            .Remove mctlControl.Name
            Set mctlControl = Nothing
            If Not mctlHLine Is Nothing Then
                .Remove mctlHLine.Name
                Set mctlHLine = Nothing
            End If
            If Not mctlIcon Is Nothing Then
                .Remove mctlIcon.Name
                Set mctlIcon = Nothing
            End If
            If Not mctlIcon Is Nothing Then
                .Remove mctlIcon.Name
                Set mctlIcon = Nothing
            End If
        End If

        If Not mctlExpander Is Nothing Then
            .Remove mctlExpander.Name
            Set mctlExpander = Nothing
        End If
        If Not mctlExpanderBox Is Nothing Then
            .Remove mctlExpanderBox.Name
            Set mctlExpanderBox = Nothing
        End If
        If Not mctlVLine Is Nothing Then
            .Remove mctlVLine.Name
            Set mctlVLine = Nothing
        End If


        If Not moEditBox Is Nothing Then
            .Remove moEditBox.Name
            Set moEditBox = Nothing
        End If
        If Not mctlCheckBox Is Nothing Then
            .Remove mctlCheckBox.Name
            Set mctlCheckBox = Nothing
        End If

        If Not Me.ParentNode Is Nothing Then
            ' if Me is the last child delete parent's expander and VLine (if it has one)
            If FirstSibling Is LastSibling Then

                If Not Me.ParentNode.VLine Is Nothing Then
                    .Remove Me.ParentNode.VLine.Name
                    Set Me.ParentNode.VLine = Nothing
                End If
                
                If Not Me.ParentNode.ExpanderBox Is Nothing Then
                    .Remove Me.ParentNode.ExpanderBox.Name
                    Set Me.ParentNode.ExpanderBox = Nothing
                End If

                If Not Me.ParentNode.Expander Is Nothing Then
                    .Remove Me.ParentNode.Expander.Name
                    Set Me.ParentNode.Expander = Nothing
                End If

                Me.ParentNode.Expanded = False

            End If

        End If

    End With

    If bClearIndex Then
        Me.Index = -1  ' flag this node to be removed from mcolNodes in NodeRemove
    End If

    Exit Sub
errH:
    ' Stop
    Resume Next
End Sub

Private Function UpdateCheckbox()
Dim pic As StdPicture
    If Not mctlCheckBox Is Nothing Then
        With mctlCheckBox
            If moTree.GetCheckboxIcon(mlChecked, pic) Then
                .Picture = pic
            Else
                .Caption = IIf(mlChecked, "a", "")
                If (mlChecked = 1) <> (.ForeColor = RGB(180, 180, 180)) Then
                    .ForeColor = IIf(mlChecked = 1, RGB(180, 180, 180), vbWindowText)
                End If
            End If
        End With
    End If
End Function

Private Sub UpdateExpanded(bControlOnly As Boolean)
'-------------------------------------------------------------------------
' Procedure : UpdateExpanded
' Author    : Peter Thornton
' Created   : 27-01-2013
' Purpose   : Called via an Expander click or arrow keys
'             Updates the Expanded property and changes +/- caption
'-------------------------------------------------------------------------
    Dim bFullWidth As Boolean
    Dim vKey
    Dim pic As StdPicture

    If Not bControlOnly Then
        With Me.Expander
            If moTree.GetExpanderIcon(mbExpanded, pic) Then
                .Picture = pic
            Else
                If mbExpanded Then
                    .Caption = "-"
                Else
                    .Caption = "+"
                End If
            End If
        End With
    End If

    On Error GoTo errExit
    If Me.hasIcon(vKey) Then
        If moTree.GetNodeIcon(vKey, pic, bFullWidth) Then
            If bFullWidth Then
                Me.Icon.Picture = pic   ' potential error if Icon is nothing, let error abort
            Else
                Me.Control.Picture = pic
            End If
        End If
    End If
errExit:
End Sub


'***********************
'*   Node Events       *
'***********************

Private Sub mctlCheckBox_Click()    ' PT new in 006PT2
'-------------------------------------------------------------------------
' Procedure : moCtl_Click
' Author    : Peter Thornton
' Created   : 20-01-2013
' Purpose   : Event fires when a Checkbox label is clicked
'-------------------------------------------------------------------------
    If moTree.EditMode(Me) Then
        ' exit editmode if in editmode
        moTree.EditMode(Me) = False
    End If
    If mlChecked = 0 Then
    
        Checked = -1
    Else
        Checked = 0
    End If
    
    Set moTree.ActiveNode = Me
    moTree.NodeClick mctlCheckBox, Me    ' share the checkbox click event
End Sub

Private Sub mctlControl_Click()
'-------------------------------------------------------------------------
' Procedure : mctlControl_Click
' Company   : JKP Application Development Services (c)
' Author    : Jan Karel Pieterse (www.jkp-ads.com)
' Created   : 15-01-2013
' Purpose   : Event fires when a treebranch is clicked
'-------------------------------------------------------------------------

' PT the call to NodeClick will raise the click event to the form
Dim bFlag As Boolean

    If Not moLastActiveNode Is Nothing Then
        moLastActiveNode.Control.BorderStyle = fmBorderStyleNone
        Set moLastActiveNode = Nothing
        bFlag = True
    End If

    If moTree.ActiveNode Is Nothing Then
        Set moTree.ActiveNode = Me
        bFlag = True
    ElseIf Not bFlag Then
        bFlag = mctlControl.BorderStyle <> fmBorderStyleNone
    End If
    
    If Not moTree.ActiveNode Is Me Or bFlag Then
        ' only raise the event the first time the node is activated
         moTree.NodeClick Control, Me
         
         ' if preferred the click event is always raised to the form (even if the
         ' node was previously active) simply comment or remove this If/EndIf check
    End If

End Sub

Private Sub mctlControl_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
' PT  a node label has been double-clicked, enter edit-mode if manual editing is enabled
'    Dim bDummy As Boolean
    Dim RagAddress As String
    On Error Resume Next
    RegBack = Selection.Cells(1).Address
    RagAddress = mytree(LCase(moTree.ActiveNode.Key))(10)
    addlog "END FormFind Show (DblClick)"
    FormFind.Hide
    Reg.Range(RagAddress).Activate
    Reg.Image3.Top = Reg.Range(RagAddress).Top
    Reg.Image3.Left = Reg.Range(RagAddress).Left - Reg.Image3.Width
    Reg.Image3.Visible = True
        
'        If moTree.EnableLabelEdit(bDummy) Then
'            moTree.EditMode(Me) = False 'True
'            EditBox bEnterEdit:=False 'True
'        End If

End Sub

Private Sub mctlControl_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
'PT temporarily activate and highlight the MouseDown node and a grey border to the previous activenode
'   MouseUp and Click events will confirm the action or reset the previous active node
Dim bFlag As Boolean

    If moTree.ActiveNode Is Me Then
        bFlag = Me.Control.BackColor = vbHighlight
       ' bFlag = bFlag Or Me.Control.BorderStyle = fmBorderStyleSingle ' in Access this should be uncommented
    End If
    
    If Not bFlag Then
        Set moLastActiveNode = moTree.ActiveNode
        Set moTree.ActiveNode = Me
        If Not moLastActiveNode Is Nothing Then
            moLastActiveNode.Control.BorderStyle = fmBorderStyleSingle
            moLastActiveNode.Control.BorderColor = RGB(200, 200, 200)
        End If
    End If

    If moTree.EditMode(Me) Then
        ' if any node is in edit mode exit edit mode
        moTree.EditMode(Me) = False
    End If

End Sub

Private Sub mctlControl_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
' PT MouseUp fires before the Click event, at this point we don't know 100% if user
'    definately wants to activate the MouseDown node. If user drags the mouse off the MouseDown node the
'    Click event will not fire which means user wants to cancel and revert to the previous activenode.
'
'    If MouseUp occurs with the cursor not over the node reset the original activenode

Dim bFlag As Boolean
Dim bMouseIsOver As Boolean
Dim bMoveCopy As Boolean

    If Not moLastActiveNode Is Nothing Then
        With Me.Control
            ' is the mouse over the node or within a pixel of it
            bMouseIsOver = (X >= -1 And X <= .Width + 1) And (Y >= -1 And Y <= .Height + 1)
        End With
        
        If Not bMouseIsOver Then
            ' if the last-activenode was marked for MoveCopy we will need to reset it
            bFlag = moLastActiveNode Is moTree.MoveCopyNode(bMoveCopy)

            ' reset the original activenode
            moLastActiveNode.Control.BorderStyle = fmBorderStyleNone
            Set moTree.ActiveNode = moLastActiveNode

            If bFlag Then
                Set moTree.MoveCopyNode(bMoveCopy) = moLastActiveNode
            End If

            Set moLastActiveNode = Nothing
            
        ElseIf Button = 2 Then
            ' the click event doesn't fire with right click so explicitly call it
            mctlControl_Click
        End If
    End If

End Sub

Private Sub mctlExpander_Click()
'
    Expanded = Not Expanded
    If moTree.EditMode(Me) Then
        ' if any node is in edit mode exit edit mode
        moTree.EditMode(Me) = False
    End If
    Tree.NodeClick Expander, Me
End Sub

Private Sub moEditBox_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)    'PT
' PT Textbox key events to Enter or Esc the Editbox,   006PT2

    Dim bCancel As Boolean
    Dim bSort As Boolean
    Dim sNewText As String

    If KeyCode = vbKeyReturn Then
        sNewText = moEditBox.Value
        If sNewText = Caption Then
            KeyCode = vbKeyEscape
        Else
            bCancel = moTree.RaiseAfterLabelEdit(Me, sNewText)
            If Not bCancel Then
                Me.Caption = moEditBox.Value
                Control.Caption = sNewText

                Control.AutoSize = True
                TextWidth = Control.Width
                Control.AutoSize = False
                If TextWidth < mcFullWidth And moTree.FullWidth Then
                    Control.Width = mcFullWidth
                End If
                moTree.Changed = True
                moTree.NodeClick Control, Me
                bCancel = moTree.LabelEdit(bSort)
                If bSort Then
                    If Me.ParentNode.Sort Then
                        moTree.Refresh
                    End If
                End If
            End If
            EditBox False
        End If
    End If
    If KeyCode = vbKeyEscape Then
        moTree.EditMode(Me) = False
        EditBox False
    End If
End Sub

Private Sub Class_Initialize()
' default properties
    mbExpanded = True  ' default
    
    #If DebugMode = 1 Then
        gClsNodeInit = gClsNodeInit + 1    ' PT, for testing only, remove, see ClassCounts() in the normal module
    #End If
End Sub

Private Sub Class_Terminate()
    #If DebugMode = 1 Then
        gClsNodeTerm = gClsNodeTerm + 1    ' PT, for testing,
    #End If
    Set moTree = Nothing
End Sub


Attribute VB_Name = "clsTreeView"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'Build 024
'***************************************************************************
'
' Authors:  JKP Application Development Services, info@jkp-ads.com, http://www.jkp-ads.com
'           Peter Thornton, pmbthornton@gmail.com
'
' (c)2013, all rights reserved to the authors
'
' You are free to use and adapt the code in these modules for
' your own purposes and to distribute as part of your overall project.
' However all headers and copyright notices should remain intact
'
' You may not publish the code in these modules, for example on a web site,
' without the explicit consent of the authors
'***************************************************************************

'-------------------------------------------------------------------------
' Module    : clsTreeView
' Company   : JKP Application Development Services (c)
' Author    : Jan Karel Pieterse (www.jkp-ads.com)
' Created   : 15-01-2013
' Purpose   : Creates a VBA Treeview control in a frame on your UserForm
'-------------------------------------------------------------------------
Option Explicit
#Const HostProject = "Excel" ', or Access or Word

Public WithEvents TreeControl As MSForms.Frame
Attribute TreeControl.VB_VarHelpID = -1

Private mbInActive                  'PT the treeview is not in focus
Private mbAlwaysRedesign As Boolean    'PT temporary flag to force mbRedesign=true, see Move()
Private mbAutoSort As Boolean       'PT sort siblings after manual edit
Private mbChanged As Boolean        'PT "dirty", user has edited node(s)
Private mbCheckboxes As Boolean     'PT show checkboxes
Private mbLabelEdit As Boolean      'PT allow manual editing with F2 and double click
Private mbTriState As Boolean       'PT enable tripple state checkboxes
Private mbCheckboxImage As Boolean  'PT determins if icons are used for checkboxes
Private mbEditMode As Boolean       'PT flag if in editmode
Private mbFullWidth As Boolean      'PT use separate image controls for icons, can highlight nodes to full width
Private mbGotIcons As Boolean       'PT got a collection of images
Private mbExpanderImage As Boolean  'PT determines if icons will be used for collapse/expand controls
Private mbKeyDown As Boolean        'PT Enter-keyup in a Textbox occurs when next control gets focus
Private mbMove As Boolean           'PT flag intention of the MoveCopyNode
Private mbRedesign As Boolean       'PT flag to reset all dim's after changing NodeHeight or Indentation at runtime
Private mbRootButton As Boolean     'PT Root has an expander button
Private mbShowExpanders As Boolean  'PT Show +/- buttons
Private mbShowLines As Boolean      'PT determines if lines will be created and shown
Private mlBackColor As Long         'PT frameholder's backcolor
Private mlForeColor As Long         'PT frameholder's ForeColor
Private mlLabelEdit As Long         'PT 0-Automatic, 1-Manual can't be edited
Private mlNodesCreated As Long      'PT in/de-cremented as nodes are added/deleted from mcolNodes
Private mlNodesDeleted As Long      'PT incremented as node.controls are deleted, purpose to give unique id for control names
Private mlVisCount As Long          'PT incremented from zero as each node is displayed
Private mlVisOrder() As Long        'PT an index array to identify displayed nodes in the order as displayed
Private msAppName As String         'JKP: Title of messageboxes
Private msngChkBoxPad As Single     'PT offset if using checkboxes
Private msngChkBoxSize As Single    'PT checkbox size
Private msngIndent As Single        'PT default 15
Private msngLineLeft As Single      'PT Left pos of Root H & V lines, 3 + alpha
Private msngNodeHeight As Single    'JKP: vertical distance between nodes
Private msngRootLine As Single      'PT if mbRootButton, same as msngIndent, else 0
Private msngTopChk As Single        'PT top checkbox  (these "tops" are offsets down from the top a given node)
Private msngTopExpB As Single       'PT top expander button (a label)
Private msngTopExpT As Single       'PT top expander text (a label)
Private msngTopHV As Single         'PT top for Horiz' & Vert' lines (mid height of a node + top padding))
Private msngTopIcon As Single       'PT top icon
Private msngTopLabel As Single      'PT top node label, if font height less than NodeHeight
Private msngVisTop As Single        'PT activenode top relative to scroll-top
Private msngMaxWidths() As Single   'PT array, max width of text in each level, helps determine scroll-width
Private moActiveNode As clsNode     'JKP: refers to the selected node
Private moEditNode As clsNode       'PT the node in EditMode
Private moMoveNode As clsNode       'PT node waiting to be moved
Private moRootHolder As clsNode     'PT parent for the root node(s), although a clsNode it's not a real node
Private mcolIcons As Collection     'PT collection of stdPicture objects, their names as keys
Private mcolNodes As Collection     'JKP: global collection of all the nodes
Private moCheckboxImage(-1 To 1) As StdPicture   'PT checkbox true/false/triState icons
Private moExpanderImage(-1 To 0) As StdPicture   'PT collapse/expand icons
#If HostProject = "Access" Then
  Private moForm As Access.Form     'PT the main form, eg to return debug stats to the caption
#Else
  Private moForm As MSForms.UserForm
#End If
''-----------------------------------------------------------

'Public Enum tvMouse
'    tvDown = 1
'    tvUp = 2
'    tvMove = 3
'    tvBeforeDragOver = 4
'    tvBeforeDropOrPaste = 5
'End Enum

Public Enum tvTreeRelationship
    tvFirst = 0
    tvLast = 1
    tvNext = 2
    tvPrevious = 3
    tvChild = 4
End Enum

Event Click(cNode As clsNode)       'Node clcick event
Event NodeCheck(cNode As clsNode)   'Checkbox change event
Event AfterLabelEdit(ByRef Cancel As Boolean, NewString As String, cNode As clsNode)
Event KeyDown(cNode As clsNode, ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
                    
Private Type POINTAPI
    X As Long
    Y As Long
End Type

#If VBA7 And Not Mac Then
    Private Declare PtrSafe Function GetCursorPos Lib "user32.dll" ( _
            ByRef lpPoint As POINTAPI) As Long
    Private Declare PtrSafe Function SetCursorPos Lib "user32.dll" ( _
            ByVal X As Long, _
            ByVal Y As Long) As Long
    Private Declare PtrSafe Function getTickCount Lib "kernel32.dll" Alias "GetTickCount" () As Long
#Else
    Private Declare Function GetCursorPos Lib "user32.dll" ( _
                                          ByRef lpPoint As POINTAPI) As Long
    Private Declare Function SetCursorPos Lib "user32.dll" ( _
                                          ByVal X As Long, _
                                          ByVal Y As Long) As Long
    Private Declare Function getTickCount Lib "kernel32.dll" Alias "GetTickCount" () As Long
#End If

' Mac displays at 72 pixels per 72 points vs (typically) 96/72 in Windows
' The respective constants help size and position node controls appropriatelly in the different OS
' Search the project for instances of the Mac constant

#If Mac Then
    Const mcCheckboxFont As Long = 13
    Const mcCheckboxPad As Single = 19
    Const mcCheckboxPadImg As Single = 15
    Const mcChkBoxSize As Single = 13
    Const mcExpanderFont As Long = 13
    Const mcExpButSize As Single = 15
    Const mcExpBoxSize As Long = 12
    Const mcFullWidth As Long = 800
    Const mcIconPad As Single = 17
    Const mcIconSize As Long = 16
    Const mcTLpad As Long = 4
    Const mcLineLeft As Single = mcTLpad + 10
    Const mcPtPxl As Single = 1
#Else
    Const mcCheckboxFont As Long = 10
    Const mcCheckboxPad As Single = 15
    Const mcCheckboxPadImg As Single = 11.25
    Const mcChkBoxSize As Single = 10.5
    Const mcExpanderFont As Long = 10
    Const mcExpButSize As Single = 11.25
    Const mcExpBoxSize As Long = 9
    Const mcFullWidth As Long = 600
    Const mcIconPad As Single = 14.25
    Const mcIconSize As Long = 12
    Const mcTLpad As Long = 3
    Const mcLineLeft As Single = mcTLpad + 7.5
    Const mcPtPxl As Single = 0.75
#End If

Private Const mcSource As String = "clsTreeView"

'***************************
'*    Public Properties    *
'***************************

Public Property Get ActiveNode() As clsNode
    Set ActiveNode = moActiveNode
End Property

Public Property Set ActiveNode(oActiveNode As clsNode)
'-------------------------------------------------------------------------
' Procedure : ActiveNode
' Company   : JKP Application Development Services (c)
' Author    : Jan Karel Pieterse (www.jkp-ads.com)
' Created   : 17-01-2013
' Purpose   : Setting the activenode also updates the node colors
'             and ensures the node is scrolled into view
'-------------------------------------------------------------------------

    Dim cTmp As clsNode
    If oActiveNode Is MoveCopyNode(False) Then
        Set MoveCopyNode(False) = Nothing
    End If

    If moActiveNode Is oActiveNode Then
        SetActiveNodeColor
        Exit Property
    End If
    
    ResetActiveNodeColor ActiveNode

    If oActiveNode.Control Is Nothing Then
        Set cTmp = oActiveNode.ParentNode
        While Not cTmp.Caption = "RootHolder"
            cTmp.Expanded = True
            Set cTmp = cTmp.ParentNode
        Wend

        If mlNodesCreated Then
            BuildRoot False
        End If

    End If

    Set moActiveNode = oActiveNode
    SetActiveNodeColor

End Property

Public Sub ExpandNode(cNode As clsNode)
    Dim cTmp As clsNode

    Set cTmp = cNode.ParentNode
    While Not cTmp.Caption = "RootHolder"
        cTmp.Expanded = True
    Wend
    
End Sub

Public Property Get AppName() As String
    AppName = msAppName
End Property

Public Property Let AppName(ByVal sAppName As String)
    msAppName = sAppName
End Property

Public Property Get Changed() As Boolean
'PT user has edited node(s) and/or changed Checked value(s)
    Changed = mbChanged
End Property

Public Property Let Changed(ByVal bChanged As Boolean)
' called after manual edit and Checked change
    Dim sngChangedRight As Single
    Dim sngIconPad As Single
    Dim pic As StdPicture
    Dim v
    
    mbChanged = bChanged
    If Not ActiveNode Is Nothing Then
    
        sngChangedRight = ActiveNode.Control.Left + ActiveNode.TextWidth + 15
        
        If mbFullWidth Then
            If ActiveNode.hasIcon(v) Then
                sngIconPad = mcIconPad
            End If
        End If
        
        If ActiveNode.TextWidth + sngIconPad > msngMaxWidths(ActiveNode.Level) Then
            msngMaxWidths(ActiveNode.Level) = ActiveNode.TextWidth + sngIconPad
        End If
        
        With Me.TreeControl

            If MaxNodeWidth > .InsideWidth Then

                If .ScrollBars > fmScrollBarsHorizontal Then
                    .ScrollBars = fmScrollBarsBoth
                Else
                    .ScrollBars = fmScrollBarsHorizontal
                End If
                
                .ScrollWidth = MaxNodeWidth + mcTLpad
                
                If .ScrollLeft + .InsideWidth < sngChangedRight Then
                    .ScrollLeft = sngChangedRight - .InsideWidth + mcTLpad
                End If
                
            End If
        End With
    End If

End Property

Public Property Get CheckBoxes(Optional bTriState As Boolean) As Boolean    ' PT
    CheckBoxes = mbCheckboxes
    bTriState = mbTriState
End Property

Public Property Let CheckBoxes(Optional bTriState As Boolean, ByVal bCheckboxes As Boolean)   ' PT
    Dim bOrig As Boolean
    Dim bOrigTriState As Boolean

    bOrig = mbCheckboxes
    mbCheckboxes = bCheckboxes

    bOrigTriState = mbTriState
    mbTriState = bTriState
    If bCheckboxes Then
        msngChkBoxPad = mcCheckboxPad
        If msngNodeHeight < mcExpButSize Then msngNodeHeight = mcExpButSize
    Else
        msngChkBoxPad = 0
    End If

    If Not TreeControl Is Nothing Then

        If TreeControl.Controls.Count And (bOrig <> mbCheckboxes Or bOrigTriState <> mbTriState) Then
            ' Checkboxes added changed after start-up so update the treeview
            mbRedesign = True
            Refresh
        End If
    End If

End Property

#If HostProject = "Access" Then
    Public Property Set Form(frm As Access.Form)
        Set moForm = frm
    End Property
#Else
    Public Property Set Form(frm As MSForms.UserForm)
        Set moForm = frm
    End Property
#End If

Public Property Get FullWidth() As Boolean
    FullWidth = mbFullWidth
End Property

Public Property Let FullWidth(bFullWidth As Boolean)
    mbFullWidth = bFullWidth
End Property

Public Property Set Images(objImages As Object)
    Dim sDesc As String
    Dim pic As stdole.StdPicture
    Dim obj As Object
    ' PT  objImages can be a collection of StdPicture objects
    '     a Frame containing only Image controls (or controls with an image handle)
    '     stdole.IPictureDisp or stdole.StdPicture  objects
    
    On Error GoTo errH
    If TypeName(objImages) = "Collection" Then
        Set mcolIcons = objImages
100     For Each pic In mcolIcons
            ' if not a valid picture let the error abort
        Next
    Else
        Set mcolIcons = New Collection

        '#If HostProject = "Access" Then
            '' if the frame is on an Access form include .Object
            'For Each obj In objImages.Object.Controls

200         For Each obj In objImages.Controls
                mcolIcons.Add obj.Picture, obj.Name
            Next
    End If

    ' Flag we have a valid collection of images
    mbGotIcons = mcolIcons.Count >= 1
    
    Exit Property
errH:
    Set mcolIcons = Nothing
    If Erl = 100 Then
        sDesc = "The obImages collection includes an invalue StdPicture object"
    ElseIf Erl = 200 Then
        sDesc = "A control in objImages does not contain a valid Picture object"
    End If
    sDesc = sDesc & vbNewLine & err.description
        
    err.Raise err.number, "Images", sDesc

End Property

Public Property Get Indentation() As Single
    Indentation = msngIndent
End Property

Public Property Let Indentation(sngIndent As Single)
    Dim cNode As clsNode
    Dim sngOld As Single

    sngOld = msngIndent

    #If Mac Then
        If sngIndent < 16 Then
            msngIndent = 16    ' min indent ?
        ElseIf sngIndent > 80 Then
            msngIndent = 80    ' max indent
        Else
            msngIndent = Int(sngIndent)
        End If
    #Else
        If sngIndent < 12 Then
            msngIndent = 12    ' min indent ?
        ElseIf sngIndent > 60 Then
            msngIndent = 60    ' max indent
        Else
            msngIndent = Int((sngIndent * 2 + mcPtPxl) / 3 * 2) * mcPtPxl
        End If
    #End If

    If mbRootButton Then msngRootLine = msngIndent

    If Not TreeControl Is Nothing And Not (sngOld = msngIndent) Then
        ' changed after start-up so update the treview
        If TreeControl.Controls.Count Then
            Set cNode = Me.ActiveNode
            Refresh
            If Not cNode Is Nothing Then
                Set ActiveNode = cNode
            End If
        End If
    End If
End Property
Public Property Get EnableLabelEdit(Optional bAutoSort As Boolean) As Boolean
    EnableLabelEdit = mbLabelEdit
    bAutoSort = mbAutoSort
End Property

Public Property Let EnableLabelEdit(Optional bAutoSort As Boolean, ByVal bLabelEdit As Boolean)    ' PT
' optional bAutoSort: automatically resort siblings after a manual edit
    mbLabelEdit = bLabelEdit
    mbAutoSort = bAutoSort
End Property

Public Property Get LabelEdit(Optional bAutoSort As Boolean) As Long    ' PT
' PT,  equivalent to Treeview.LabelEdit
' 0/tvwAutomatic nodes can be manually edited
' optional bAutoSort: automatically resort siblings after a manual edit

    LabelEdit = mlLabelEdit
    bAutoSort = mbAutoSort
End Property

Public Property Let LabelEdit(Optional bAutoSort As Boolean, ByVal nLabelEdit As Long)    ' PT
    mlLabelEdit = nLabelEdit
    mbLabelEdit = (nLabelEdit = 0)
    mbAutoSort = bAutoSort
End Property

Public Property Get MoveCopyNode(Optional bMove As Boolean, Optional lColor As Long) As clsNode
    bMove = mbMove
    Set MoveCopyNode = moMoveNode
End Property
Public Property Set MoveCopyNode(Optional bMove As Boolean, Optional lColor As Long, cNode As clsNode)
    Static lOrigBackcolor As Long

    mbMove = bMove
    If lColor = 0 Then
        If bMove Then
            lColor = RGB(255, 231, 162)
        Else: lColor = RGB(159, 249, 174)
        End If
    End If

    If Not moMoveNode Is Nothing Then
        moMoveNode.BackColor = lOrigBackcolor
        moMoveNode.Control.BackColor = lOrigBackcolor
        Set moMoveNode = Nothing
    Else

    End If

    If Not cNode Is Nothing Then
        lOrigBackcolor = cNode.BackColor
        If lOrigBackcolor = 0 Then lOrigBackcolor = mlBackColor
        cNode.BackColor = lColor

        cNode.Control.BackColor = cNode.BackColor
        cNode.Control.ForeColor = cNode.ForeColor
        Set moMoveNode = cNode
    Else

    End If
End Property

'Public Property Get MultiSelect() As Boolean
'    MultiSelect = mbMultiSelect
'End Property
'Public Property Let MultiSelect(mbMultiSelect As Boolean)
'    mbMultiSelect = MultiSelect
'End Property

Public Property Get NodeHeight() As Single
    If msngNodeHeight = 0 Then msngNodeHeight = 12
    NodeHeight = msngNodeHeight
End Property

Public Property Let NodeHeight(ByVal sngNodeHeight As Single)
    Dim cNode As clsNode
    Dim sngOld As Single

    sngOld = msngNodeHeight

    #If Mac Then
        If sngNodeHeight < 12 Then  ' height of expander-box is 9
            msngNodeHeight = 12
        ElseIf sngNodeHeight > 60 Then
            msngNodeHeight = 60
        Else
            msngNodeHeight = Int(sngNodeHeight)
        End If
    #Else
        If sngNodeHeight < 9 Then  ' height of expander-box is 9
            msngNodeHeight = 9
        ElseIf sngNodeHeight > 45 Then
            msngNodeHeight = 45
        Else
            msngNodeHeight = Int((sngNodeHeight * 2 + mcPtPxl) / 3 * 2) * mcPtPxl
        End If

    #End If
    If mbRootButton Then msngRootLine = msngIndent
    If Not TreeControl Is Nothing And Not (sngOld = msngNodeHeight) Then
        If TreeControl.Controls.Count Then
            Set cNode = Me.ActiveNode
            Refresh
            If Not cNode Is Nothing Then
                Set ActiveNode = cNode
            End If
        End If
    End If
End Property

Public Property Get Nodes() As Collection
' Global collection of the nodes
' *DO NOT USE* its Nodes.Add and Nodes.Remove methods
' To add & remove nodes use clsNode.AddChild() or clsTreeView.NodeAdd and clsTeevView.NodeRemove()
    If mcolNodes Is Nothing Then Set mcolNodes = New Collection
    Set Nodes = mcolNodes
End Property

Public Property Get RootButton() As Boolean
    If mbRootButton Then RootButton = 1
End Property

Public Property Let RootButton(lRootLeader As Boolean)
' PT The Root nodes have expanders and lines (if mbShowlines)

    mbRootButton = lRootLeader
    If mbRootButton Then
        msngRootLine = msngIndent
    Else
        msngRootLine = 0
    End If

    If Not Me.TreeControl Is Nothing Then
        If Not moRootHolder Is Nothing Then
            If Not moRootHolder.ChildNodes Is Nothing Then
                Refresh
            End If
        End If
    End If
End Property

Public Property Get RootNodes() As Collection
'PT returns the collection of Root-nodes
' **should be treated as read only. Use AddRoot and NodeRemove to add/remove a root node**
    Set RootNodes = moRootHolder.ChildNodes
End Property

Public Property Get ShowExpanders() As Boolean
    ShowExpanders = mbShowExpanders
End Property

Public Property Let ShowExpanders(bShowExpanders As Boolean)

    mbShowExpanders = bShowExpanders
    
    If Not TreeControl Is Nothing Then
        If TreeControl.Controls.Count Then
            Refresh
        End If
    End If
End Property

Public Property Get ShowLines() As Boolean
    ShowLines = mbShowLines
End Property

Public Property Let ShowLines(bShowLines As Boolean)
' PT Show horizontal & vertical lines
Dim bOrig As Boolean
Dim cNode As clsNode

    bOrig = mbShowLines
    mbShowLines = bShowLines

    If Not TreeControl Is Nothing Then
        If TreeControl.Controls.Count Then
            If bOrig <> mbShowLines Then
                ' ShowLines added after start-up so update the treeview
                Refresh
            End If
        End If
    End If

End Property

'***********************************
'*    Public functions and subs    *
'***********************************

Public Function AddRoot(Optional sKey As String, Optional vCaption, Optional vImageMain, Optional vImageExpanded) As clsNode

    On Error GoTo errH

    If moRootHolder Is Nothing Then
        Set moRootHolder = New clsNode
        Set moRootHolder.ChildNodes = New Collection
        Set moRootHolder.Tree = Me
        moRootHolder.Caption = "RootHolder"
        If mcolNodes Is Nothing Then
            Set mcolNodes = New Collection
        End If
    End If

    Set AddRoot = moRootHolder.AddChild(sKey, vCaption, vImageMain, vImageExpanded)

    Exit Function
errH:
    #If DebugMode = 1 Then
        Stop
        Resume
    #End If
    err.Raise err.number, "AddRoot", err.description

End Function

Public Sub CheckboxImage(picFalse As StdPicture, picTrue As StdPicture, Optional picTriState As StdPicture)
    On Error GoTo errExit:
    Set moCheckboxImage(0) = picFalse
    Set moCheckboxImage(-1) = picTrue
    If Not IsMissing(picTriState) Then
        Set moCheckboxImage(1) = picTriState
    End If

    mbCheckboxImage = True
errExit:
End Sub

Public Sub EnterExit(bExit As Boolean)
'PT WithEvents can't trap Enter/Exit events, if we need them here they can be
'   called from the TreeControl's Enter/Exit events in the form
    mbInActive = bExit
    SetActiveNodeColor bExit ' apply appropriate vbInactiveCaptionText / vbHighlight

End Sub

Public Sub ExpanderImage(picMinus As StdPicture, picPlus As StdPicture)
    On Error GoTo errExit:
    Set moExpanderImage(0) = picPlus
    Set moExpanderImage(-1) = picMinus
    mbExpanderImage = True
errExit:
End Sub

Public Sub ExpandToLevel(lExpansionLevel As Long, Optional bReActivate As Boolean = True)
' PT call SetTreeExpansionLevel and reactivates the closest expanded parent if necessary
'    eg, if activeNode.level = 4 and lExpansionLevel = 2, the activenode's grandparent will be activated
    Dim cTmp As clsNode

    Call SetTreeExpansionLevel(lExpansionLevel - 1)

    If bReActivate Then
        If ActiveNode.Level > lExpansionLevel Then
            Set cTmp = ActiveNode.ParentNode
            While cTmp.Level > lExpansionLevel
                Set cTmp = cTmp.ParentNode
            Wend
            Set ActiveNode = cTmp
        End If
    End If
    
End Sub

Public Sub Copy(cSource As clsNode, cDest As clsNode, _
                Optional vBefore, Optional ByVal vAfter, _
                Optional ByVal bShowError As Boolean)
                
    Set MoveCopyNode(False) = Nothing
    Clone cDest, cSource, vBefore, vAfter
    SetActiveNodeColor
    
End Sub

Public Sub Move(cSource As clsNode, cDest As clsNode, _
                Optional vBefore, Optional ByVal vAfter, _
                Optional ByVal bShowError As Boolean)
' PT Move source node + children to destination node
'    cannot move the Root and cannot move to a descendant
'   vBefore/vAfter work as for normal collection; error if invalid, eg a new collection, after the last item, etc
'
    Dim sErrDesc As String
    Dim bIsParent As Boolean
    Dim cNode As clsNode
    Dim cSourceParent As clsNode

    Set MoveCopyNode(False) = Nothing
    On Error GoTo errH

    If cSource Is Nothing Or cDest Is Nothing Or cSource Is cDest Then   ' Or cSource Is Root
        Exit Sub
    End If

    Set cNode = cDest
    bIsParent = False
    Do
        Set cNode = cNode.ParentNode
        bIsParent = cNode Is cSource
    Loop Until cNode Is Nothing Or bIsParent

    If bIsParent Then
        err.Raise vbObjectError + 110
    End If

    If cDest.ChildNodes Is Nothing Then
        ' the child becomes a parent for the first time
        Set cDest.ChildNodes = New Collection
        ' expander & VLine will get created automatically if necessary
    End If

    AddNodeToCol cDest.ChildNodes, cSource, False, vBefore, vAfter

    Set cSourceParent = cSource.ParentNode
    With cSourceParent
        .RemoveChild cSource '
        ' if the old parent has no more children remove its expander & VLine

        If .ChildNodes Is Nothing Then

            If Not .Expander Is Nothing Then
                Me.TreeControl.Controls.Remove .Expander.Name
                Set .Expander = Nothing
            End If

            If Not .ExpanderBox Is Nothing Then
                Me.TreeControl.Controls.Remove .ExpanderBox.Name
                Set .ExpanderBox = Nothing
            End If

            If Not .VLine Is Nothing Then
                Me.TreeControl.Controls.Remove .VLine.Name
                Set .VLine = Nothing
            End If

            .Expanded = False

        End If
    End With

    Set cSource.ParentNode = cDest
    cDest.Expanded = True
    
    If mbTriState Then
        cDest.CheckTriStateParent
        cSourceParent.CheckTriStateParent
    End If
    
    SetActiveNodeColor
    mbAlwaysRedesign = True    ' ensure Left's get recalc'd during future refresh

    Exit Sub
errH:

    Select Case err.number
    Case vbObjectError + 110
        sErrDesc = "Cannot cut and move a Node to a descendant node"
    Case Else
        sErrDesc = "Move: " & err.description
    End Select

    If bShowError Then
        MsgBox sErrDesc, , AppName
    Else
        err.Raise err.number, mcSource, "Move: " & sErrDesc
    End If

End Sub

Public Function NodeAdd(Optional vRelative, _
                        Optional vRelationship, _
                        Optional sKey As String, _
                        Optional vCaption, _
                        Optional vImageMain, _
                        Optional vImageExpanded) As clsNode    '  As tvTreevRelationship

'PT, similar to the old tv's nodes.add method
'    main difference is vRelative can be a Node object as well as a key or index
'    see also clsNode.AddChild

    Dim i As Long
    Dim cNode As clsNode
    Dim cRelative As clsNode
    Dim cParent As clsNode
    Dim cTmp As clsNode
    '    tvFirst = 0  tvlast = 1 tvNext = 2 tvprevious = 3  tvChild = 4

    If IsMissing(vRelative) Then

        Set NodeAdd = Me.AddRoot(sKey, vCaption, vImageMain, vImageExpanded)
        Exit Function
    Else

        On Error Resume Next
        Set cRelative = vRelative
        If cRelative Is Nothing Then
            Set cRelative = mcolNodes(vRelative)
        End If

        On Error GoTo errH
        If cRelative Is Nothing Then
            err.Raise vbObjectError + 100, "NodeAdd", "vRelative is not a valid node or a node.key"
        End If
    End If

    If IsMissing(vRelationship) Then
        vRelationship = tvTreeRelationship.tvNext    ' default
    End If

    If vRelationship = tvChild Or cRelative Is cRelative.Root Then
        Set cParent = cRelative
    Else
        Set cParent = cRelative.ParentNode
    End If

    Set cNode = New clsNode

    If Len(sKey) Then
100     mcolNodes.Add cNode, sKey
101
    Else
        mcolNodes.Add cNode
    End If

    If cParent.ChildNodes Is Nothing Then
        Set cParent.ChildNodes = New Collection
    End If

    With cParent.ChildNodes
        If .Count = 0 Then
            .Add cNode
        Else
            i = 0
            If vRelationship = tvNext Or vRelationship = tvPrevious Then
                For Each cTmp In cParent.ChildNodes
                    i = i + 1
                    If cTmp Is cRelative Then
                        Exit For
                    End If
                Next
            End If
            Select Case vRelationship
            Case tvFirst: .Add cNode, , 1
            Case tvLast: .Add cNode, after:=.Count
            Case tvNext: .Add cNode, after:=i
            Case tvPrevious: .Add cNode, before:=i
            Case tvChild: .Add cNode
            End Select
        End If
    End With

    With cNode
        .Key = sKey
        .Caption = CStr(vCaption)
        .ImageMain = vImageMain
        .ImageExpanded = vImageExpanded
        .Index = mcolNodes.Count
        Set .ParentNode = cParent
        Set .Tree = Me
    End With

    Set cNode.Tree = Me    ' do this after let key = skey
    Set NodeAdd = cNode

    Exit Function
errH:
    If mcolNodes Is Nothing Then
        Set mcolNodes = New Collection
        Resume
    End If
    If Erl = 100 And err.number = 457 Then
        err.Raise vbObjectError + 1, "clsNode.AddChild", "Duplicate key: '" & sKey & "'"
    Else
        #If DebugMode = 1 Then
            Stop
            Resume
        #End If
        err.Raise err.number, "clsNode.AddChild", err.description
    End If
End Function

Public Sub NodeRemove(cNode As clsNode)
' PT Remove a Node, its children and grandchildrem
'    remove all associated controls and tear down class objects
'    Call Refresh() when done removing nodes

    Dim lIdx As Long
    Dim lNodeCtlsOrig As Long
    Dim cParent As clsNode
    Dim cNodeAbove As clsNode, cNd As clsNode
    
    On Error GoTo errH

    Set cNodeAbove = NextVisibleNodeInTree(cNode, bUp:=True)
    Set cParent = cNode.ParentNode

    cNode.TerminateNode True

    cParent.RemoveChild cNode
    
    cNode.Index = -1    ' flag to get removed from mcolNodes in the loop
    If ActiveNode Is cNode Then
        Set moActiveNode = Nothing
    End If
    Set moEditNode = Nothing

    lIdx = 0
    lNodeCtlsOrig = mlNodesCreated
    mlNodesCreated = 0
    
    For Each cNd In mcolNodes
        lIdx = lIdx + 1
        If cNd.Index = -1 Then
            mcolNodes.Remove lIdx
            lIdx = lIdx - 1
        Else
            mlNodesCreated = mlNodesCreated - CLng(Not cNd.Control Is Nothing)
            cNd.Index = lIdx
        End If
    Next

    mlNodesDeleted = mlNodesDeleted + lNodeCtlsOrig - mlNodesCreated

    Set cNode = Nothing    ' should terminate the class

    If mlNodesCreated Then
        If Not cNodeAbove Is Nothing Then
            Set Me.ActiveNode = cNodeAbove
        ElseIf mcolNodes.Count Then
            Set Me.ActiveNode = mcolNodes(1)
        End If
    Else
        'all nodes deleted
        Erase mlVisOrder
        Erase msngMaxWidths
        mlVisCount = 0
        mlNodesCreated = 0
        mlNodesDeleted = 0
    End If

    Exit Sub
errH:
    #If DebugMode = 1 Then
        Debug.Print err.description, err.number
        Stop
        Resume
    #End If
End Sub

Public Sub NodesClear()
' PT,  similar to Treeview.Nodes.Clear
    Dim i As Long
    On Error GoTo errH

    If Not TreeControl Is Nothing Then
        With TreeControl
            For i = TreeControl.Controls.Count - 1 To 0 Step -1
                TreeControl.Controls.Remove i
            Next
            .ScrollBars = fmScrollBarsNone
        End With
    End If
    
    Erase mlVisOrder
    Erase msngMaxWidths
    mlVisCount = 0
    mlNodesCreated = 0
    mlNodesDeleted = 0
    
    TerminateTree

    mbChanged = False

    Exit Sub
errH:
    #If DebugMode = 1 Then
        Stop
        Resume
    #End If
End Sub

Public Sub PopulateTree()
' PT add and displays all the controls for the Treeview for the first time

    MsgBox "In beta-023 PopulateTree() was depricated and merged with Refresh()" & vbNewLine & vbNewLine & _
            "Please replace ''PopulateTree'' with ''Refresh'' in your code", , AppName
    
    Refresh

End Sub

Public Sub Refresh()
' Create node controls as required the first time respective parent's Expanded property = true
' hide or show and (re)position node controls as required
' Call Refresh after changing any Treeview properties or after adding/removing/moving any nodes
' or making any change that will alter placement of nodes in the treeview
    Dim bInit As Boolean

    If Me.TreeControl Is Nothing Then
        TerminateTree
        ' a Frame (container for the treeview) should have been referrenced to me.TreeControl
        err.Raise vbObjectError + 10, mcSource, "Refresh: 'TreeControl' frame is not referenced"
        
    ElseIf moRootHolder Is Nothing Then
        '
        err.Raise vbObjectError + 11, mcSource, "Refresh: No Root nodes have been created"
    ElseIf moRootHolder.ChildNodes Is Nothing Then
        ' nothing to do
        mlVisCount = 0
        mlNodesCreated = 0
        mlNodesDeleted = 0
        Erase mlVisOrder
        Erase msngMaxWidths
        Exit Sub
        
    ElseIf Me.TreeControl.Controls.Count = 0 Then
        ' display the treeview for first time
        bInit = True
    Else
        ' ensure all node properties are checked, eg after changing indentation or nodeheight during runtime
        mbRedesign = True
    End If

    On Error GoTo errExit

    BuildRoot bInit

    Exit Sub

errExit:
    err.Raise err.number, mcSource, "Error in BuildRoot: " & err.description
End Sub

Public Sub ScrollToView(Optional cNode As clsNode, _
                        Optional Top1Bottom2 As Long, _
                        Optional bCollapseOthers As Boolean)
' PT scrolls the treeview to position the node in view
' Top1Bottom2= 0 roughly 1/3 from the top
' Top1Bottom2= 1 or -1 at the top
' Top1Bottom2= 2 or -2 at the bottom

    Dim bIsVisible As Boolean
    Dim bWasCollapsed As Boolean
    Dim lVisIndex As Long
    Dim sngTop As Single
    Dim sngBot As Single
    Dim sngVisHt As Single
    Dim sngScrollTop As Single
    Dim cTmp As clsNode

    If cNode Is Nothing Then
        Set cNode = ActiveNode
    End If

    If bCollapseOthers Then
        SetTreeExpansionLevel 0
    End If
    
    Set cTmp = cNode.ParentNode
    While Not cTmp.Caption = "RootHolder"
        If Not cTmp.Expanded Then
            bWasCollapsed = True
            cTmp.Expanded = True
        End If
        Set cTmp = cTmp.ParentNode
    Wend
    
    If bWasCollapsed Then
        BuildRoot False
    End If

    lVisIndex = cNode.VisIndex
    sngBot = mcTLpad + lVisIndex * NodeHeight
    sngTop = sngBot - NodeHeight

    With TreeControl
        sngVisHt = .InsideHeight
        If .ScrollBars = fmScrollBarsBoth Or .ScrollBars = fmScrollBarsHorizontal Then
            sngVisHt = sngVisHt - 15    ' roughly(?) width of a scrollbar
        End If

        bIsVisible = sngTop > .ScrollTop And _
                     sngBot < .ScrollTop + sngVisHt
        
        If Not bIsVisible Or Top1Bottom2 > 0 Then
        
            If Top1Bottom2 < 0 Then Top1Bottom2 = Top1Bottom2 * -1
            
            If Top1Bottom2 = 0 Then  ' place about 1/3 from top
                sngScrollTop = lVisIndex * NodeHeight - .InsideHeight / 3

            ElseIf Top1Bottom2 = 1 Then  ' scroll to top
                sngScrollTop = sngTop - mcTLpad
            Else
                sngScrollTop = sngBot - sngVisHt + mcTLpad    ' scroll to bottom
            End If

            If sngScrollTop < 0 Then
                sngScrollTop = 0
            End If

            .ScrollTop = sngScrollTop
        End If
    End With
End Sub

Public Sub TerminateTree()
'-------------------------------------------------------------------------
' Procedure : TerminateTree
' Company   : JKP Application Development Services (c)
' Author    : Jan Karel Pieterse (www.jkp-ads.com)
' Created   : 15-01-2013
' Purpose   : Terminates this class' instance
'-------------------------------------------------------------------------
Dim cNode As clsNode
    'Instead of the terminate event of the class
    'we use this public method so it can be
    'explicitly called by parent classes
    'this is done because we'll end up having multiple circular references
    'between parent and child classes, which may cause the terminate events to be ignored.

    If Not moRootHolder Is Nothing Then
        If Not moRootHolder.ChildNodes Is Nothing Then
            For Each cNode In moRootHolder.ChildNodes

                cNode.TerminateNode
            Next
        End If
        moRootHolder.TerminateNode
    End If
    
    Set moMoveNode = Nothing
    Set moEditNode = Nothing
    Set moActiveNode = Nothing
    Set moRootHolder = Nothing
    Set mcolNodes = Nothing
    
    '** by design TerminateTree does NOT reset treeview properties or remove
    '** the reference TreeControl reference to the treeview's Frame control
    '
    '   If the form is being unloaded it's enough to call TerminateTree in it's close event, node controls will automatically unload with the form.
    '   However the treeview is to be cleared or moved but the main form is not being unloaded
    '   call the NodesRemove method which will remove all node controls then call TerminateTree
End Sub

'***********************************************************************************************
'*    Friend properties, functions and subs                                                    *
'*    although visible throughout the project these are only intended to be called by clsNodes *
'***********************************************************************************************

Friend Property Get EditMode(cNode As clsNode) As Boolean  ' PT
    EditMode = mbEditMode
End Property

Friend Property Let EditMode(cNode As clsNode, ByVal bEditMode As Boolean)  ' PT

    Set MoveCopyNode(False) = Nothing
    mbEditMode = bEditMode

    If Not moEditNode Is Nothing Then
        moEditNode.EditBox False
    End If


    If bEditMode Then
        Set moEditNode = cNode
    Else
        Set moEditNode = Nothing
    End If
End Property

Friend Function GetExpanderIcon(bExpanded As Boolean, pic As StdPicture) As Boolean
    If mbExpanderImage Then
        Set pic = moExpanderImage(bExpanded)
        GetExpanderIcon = True
    End If
End Function
Friend Function GetCheckboxIcon(lChecked As Long, pic As StdPicture) As Boolean
    If mbCheckboxImage Then
        Set pic = moCheckboxImage(lChecked)
        GetCheckboxIcon = True
    End If
End Function

Friend Function GetNodeIcon(vKey, pic As StdPicture, bFullWidth As Boolean) As Boolean
    On Error GoTo errExit
    Set pic = mcolIcons(vKey)
    bFullWidth = mbFullWidth
    GetNodeIcon = True
errExit:
End Function

Friend Function RaiseAfterLabelEdit(cNode As clsNode, sNewText As String) As Boolean
' PT called from moEditBox_KeyDown after vbKeyEnter
'
    Dim Cancel As Boolean
    RaiseEvent AfterLabelEdit(Cancel, sNewText, cNode)
    RaiseAfterLabelEdit = Cancel
End Function

Friend Sub NodeClick(ByRef oCtl As MSForms.Control, ByRef cNode As clsNode)
'-------------------------------------------------------------------------
' Procedure : NodeClick
' Company   : JKP Application Development Services (c)
' Author    : Jan Karel Pieterse (www.jkp-ads.com)
' Created   : 15-01-2013
' Purpose   : Handles clicks on the treeview. Called from clsNode
'-------------------------------------------------------------------------

' PT also called from checkbox (label) click event in clsNode
    Dim bFlag As Boolean
    Dim lngViewable As Long
    Dim cLastChild As clsNode

    If oCtl.Name Like "Exp*" Then
        bFlag = Not ActiveNode Is cNode
        If bFlag Then
            Set ActiveNode = cNode
        End If

        BuildRoot False

        If cNode.Expanded Then
            If Not cNode.ChildNodes Is Nothing Then
                Set cLastChild = cNode.ChildNodes(cNode.ChildNodes.Count)
                If Not NodeIsVisible(cLastChild, lngViewable) Then
                   If lngViewable > cNode.ChildNodes.Count Then
                        ScrollToView cLastChild, Top1Bottom2:=2
                    Else
                        ScrollToView cNode, Top1Bottom2:=1
                    End If
                End If
            End If
        End If
        If bFlag Then
            RaiseEvent Click(cNode)
        End If
        
    ElseIf oCtl.Name Like "CheckBox*" Then   ' PT
        ' RaiseEvent for the checkbox moved to clsNode
        RaiseEvent NodeCheck(cNode)

    ElseIf oCtl.Name Like "Node*" Then
        If Not ActiveNode Is cNode Then
            Set ActiveNode = cNode
        Else
            SetActiveNodeColor
        End If
        RaiseEvent Click(cNode)
    End If

End Sub

Friend Function UniqueKey(sKey As String) As String
    Dim cNode As clsNode
    For Each cNode In Nodes
        If cNode.Key = sKey Then
            err.Raise vbObjectError + 1, "clsTreeView", "Duplicate key: '" & sKey & "'"
        End If
    Next
    UniqueKey = sKey
End Function

'************************************
'*    Private functions and subs    *
'************************************

Private Sub Class_Initialize()
' Set Root = New clsNode
' Set moRoot = New clsNode ' maybe(?) but keep Root() as read only

' set some defaults
    mbRootButton = True
    mbShowExpanders = True
    mbShowLines = True
    #If Mac Then
        msngIndent = 20
        msngNodeHeight = 16
    #Else
        msngIndent = 15
        msngNodeHeight = 12
    #End If
    msngRootLine = msngIndent
    msAppName = "TreeView"
    
    #If DebugMode = 1 Then
        gClsTreeViewInit = gClsTreeViewInit + 1    'for testing only
    #End If
    
End Sub

Private Sub Class_Terminate()
    #If DebugMode = 1 Then
        gClsTreeViewTerm = gClsTreeViewTerm + 1
    #End If
End Sub

Private Function AddNodeToCol(colNodes As Collection, cAddNode As clsNode, bTreeCol As Boolean, Optional vBefore, Optional vAfter)
    Dim i As Long
    Dim sKey As String
    Dim cTmp As clsNode
    Dim pos As Long

    If bTreeCol Then sKey = cAddNode.Key

    If Len(sKey) Then
        On Error Resume Next
        i = 0
        Set cTmp = colNodes(sKey)
        If Not cTmp Is Nothing Then
            pos = InStr(1, sKey, "_copy:")
            If pos Then
                sKey = Left$(sKey, pos - 1)
            End If
            sKey = sKey & "_copy:"
            While Not cTmp Is Nothing
                Set cTmp = Nothing
                i = i + 1
                Set cTmp = colNodes(sKey & i)
            Wend
            sKey = sKey & i

            If bTreeCol Then
                cAddNode.Key = sKey
            End If

        End If

        On Error GoTo 0    ' error returns to caller

        If IsMissing(vBefore) And IsMissing(vAfter) Then
            colNodes.Add cAddNode, sKey
        ElseIf IsMissing(vAfter) Then
            colNodes.Add cAddNode, sKey, vBefore
        Else
            colNodes.Add cAddNode, sKey, , vAfter
        End If

    Else    ' no key
        If IsMissing(vBefore) And IsMissing(vAfter) Then
            colNodes.Add cAddNode
        ElseIf IsMissing(vAfter) Then
            colNodes.Add cAddNode, , vBefore
        Else
            colNodes.Add cAddNode, , , vAfter
        End If
    End If
End Function

Private Sub BuildRoot(bInit As Boolean)
    Dim bCursorWait As Boolean
    Dim bTriStateOrig As Boolean
    Dim lLastRootVisIndex As Long
    Dim sngActiveNodeScrollTop As Single    ' PT distance activenode was from scrolltop top before refresh, if visible
    Dim sngChkBoxPad As Single
    Dim sngHeightAllNodes As Single
    Dim sngIconPad As Single
    Dim sngMaxWidth As Single
    Dim cRoot As clsNode
    Dim objCtrl As MSForms.Control
    Dim pt As POINTAPI
    Dim vIconKey

    Dim sCap As String
    Dim sngTickCnt As Single

    On Error GoTo locErr

    #If DebugMode Then
        #If Win32 Or Win64 Then
            sngTickCnt = getTickCount
        #Else  ' Mac
            sngTickCnt = Timer
        #End If
    #End If

    bInit = TreeControl.Count = 0

    'TODO find equivalent for cancel key in Access & Word
    #If HostProject = "Access" Then
    #ElseIf HostProject = "Word" Then
    #Else
        Application.EnableCancelKey = xlErrorHandler
    #End If

    If mbAlwaysRedesign Then mbRedesign = True

    '    mcChkBoxSize = 10.5    ' 11.25
    '    mcLineLeft = 3 + 7.5    'msngIndent / 2

    ' PT if these arrays aren't large enough Redim Preserve is done in error handler
    ReDim mlVisOrder(1 To mlNodesCreated + 100)
    If bInit Or mbRedesign Then
        ReDim msngMaxWidths(0 To 20)
    End If

    If mcolNodes.Count - mlNodesCreated > 400 Then
        ' creating many controls might take a while
        #If HostProject = "Access" Then
            Application.DoCmd.Hourglass True
        #ElseIf HostProject = "Word" Then
            System.Cursor = wdCursorWait
        #Else
            Application.Cursor = xlWait
        #End If
        bCursorWait = True
    End If
    If Not bInit Then
        If NodeIsVisible Then
            sngActiveNodeScrollTop = (ActiveNode.VisIndex - 1) * NodeHeight - Me.TreeControl.ScrollTop
        End If
    End If

    mlVisCount = 0
    bTriStateOrig = mbTriState
    mbTriState = False

    If CheckBoxes Then
        If mbCheckboxImage Then
            sngChkBoxPad = mcCheckboxPadImg
        Else
            sngChkBoxPad = mcCheckboxPad
        End If
        If mcChkBoxSize > msngNodeHeight Then
            msngNodeHeight = mcChkBoxSize
        End If
    End If

    ' work out respective offsets to various node controls from node tops
    msngTopExpB = mcTLpad + (msngNodeHeight - mcExpButSize) / 2 + 1.5
    If mbExpanderImage Then
        msngTopExpT = mcTLpad + (msngNodeHeight - (mcExpButSize - 4)) / 2
    Else
        msngTopExpT = mcTLpad + (msngNodeHeight - mcExpButSize) / 2
    End If

    msngTopChk = mcTLpad + (msngNodeHeight - mcChkBoxSize) / 2
    msngTopIcon = mcTLpad + (msngNodeHeight - mcIconSize) / 2
    msngTopHV = mcTLpad + msngNodeHeight / 2
    Call Round75


    With TreeControl
        mlBackColor = .BackColor    ' default colours for node labels
        mlForeColor = .ForeColor

        If bInit Then
            .SpecialEffect = 2    ' fmSpecialEffectSunken
        Else
            ' PT, refresh, start by hiding all the controls
            For Each objCtrl In .Controls
                objCtrl.Visible = False
            Next
        End If


        For Each cRoot In moRootHolder.ChildNodes
            sngIconPad = 0
            If mbFullWidth Then
                If mbGotIcons And cRoot.hasIcon(vIconKey) Then
                    sngIconPad = mcIconPad
                End If
            End If

            If cRoot.Control Is Nothing Then
                mlNodesCreated = mlNodesCreated + 1
                'Add the rootnode to the tree
                Set cRoot.Control = TreeControl.Controls.Add("Forms.label.1", "Node" & mlNodesDeleted + mlNodesCreated, False)
                With cRoot.Control

                    If Not mbFullWidth And mbGotIcons Then
                        If cRoot.hasIcon(vIconKey) Then
                            .PicturePosition = fmPicturePositionLeftCenter
                            .Picture = mcolIcons(vIconKey)
                        End If
                    End If

                    .Top = mcTLpad + mlVisCount * msngNodeHeight
                    .Left = mcTLpad + msngRootLine + sngIconPad + msngChkBoxPad

                    If cRoot.BackColor Then
                        .BackColor = cRoot.BackColor
                    End If
                    If cRoot.ForeColor Then
                        .ForeColor = cRoot.ForeColor
                    End If

                    If cRoot.Bold Then .Font.Bold = True
                    .Caption = cRoot.Caption
                    .AutoSize = True
                    .WordWrap = False

                    cRoot.TextWidth = .Width

                    If .Width + sngIconPad > msngMaxWidths(0) Then
                        msngMaxWidths(0) = .Width + sngIconPad
                    End If

                    ' calc msngTopLabel to align node label to mid NodeHeight
                    ' first calc min NodeHeight if not set higher by user
                    If .Height > msngNodeHeight Then
                        ' optimal HodeHeight for the current font
                        msngNodeHeight = .Height    ' 'don't use the Property method or Refresh will be called
                    ElseIf .Height < msngNodeHeight Then
                        #If Mac Then
                            msngTopLabel = Int(msngNodeHeight - .Height) / 2
                        #Else
                            msngTopLabel = Int((msngNodeHeight - .Height + mcPtPxl) / 3 * 2) * mcPtPxl
                        #End If
                        .Top = mcTLpad + msngTopLabel + mlVisCount * msngNodeHeight
                    End If

                    If mbFullWidth Then
                        If msngTopLabel < mcFullWidth Then
                            .Width = mcFullWidth
                            .AutoSize = False
                        End If
                    End If

                    .WordWrap = False
                    .ZOrder 0
                    .Visible = True

                End With
            Else

                With cRoot.Control

                    If mbRedesign Then
                        .Left = mcTLpad + msngRootLine + sngIconPad + msngChkBoxPad

                        If cRoot.TextWidth + sngIconPad > msngMaxWidths(0) Then
                            msngMaxWidths(0) = cRoot.TextWidth + sngIconPad
                        End If
                    End If

                    If .Height > msngNodeHeight Then
                        msngNodeHeight = .Height
                    ElseIf .Height < msngNodeHeight Then
                        #If Mac Then
                            msngTopLabel = Int(msngNodeHeight - .Height) / 2
                        #Else
                            msngTopLabel = Int((msngNodeHeight - .Height + mcPtPxl) / 3 * 2) * mcPtPxl
                        #End If
                    End If

                    .Top = mcTLpad + msngTopLabel + mlVisCount * msngNodeHeight

                    .Visible = True

                End With
            End If

            ' horizontal line
            If mbRootButton And mbShowLines Then
                If cRoot.HLine Is Nothing Then
                    Set cRoot.HLine = TreeControl.Controls.Add("Forms.label.1", "HLine" & cRoot.Control.Name, False)
                    With cRoot.HLine
                        .Top = msngTopHV + mlVisCount * msngNodeHeight
                        .Left = mcLineLeft
                        .Caption = ""
                        .BorderStyle = fmBorderStyleSingle
                        .BorderColor = vbScrollBars
                        .Width = msngIndent
                        .Height = mcPtPxl
                        .TextAlign = fmTextAlignCenter
                        .BackStyle = fmBackStyleTransparent
                        .ZOrder 1
                        .Visible = True
                    End With
                Else
                    With cRoot.HLine
                        .Width = msngIndent
                        .Top = msngTopHV + mlVisCount * msngNodeHeight  ' 3 + NodeHeight/2 (to nearest 0.75)
                        .Visible = True
                    End With
                End If
            End If

            ' Checkbox
            If CheckBoxes Then
                If cRoot.Checkbox Is Nothing Then
                    Set cRoot.Checkbox = TreeControl.Controls.Add("Forms.label.1", "CheckBox" & cRoot.Control.Name, False)
                    With cRoot.Checkbox
                        .Left = mcTLpad + msngRootLine
                        .Top = msngTopChk + mlVisCount * msngNodeHeight

                        If mbCheckboxImage Then
                            'Use an image
                            .BorderStyle = fmBorderStyleNone
                            .Picture = moCheckboxImage(cRoot.Checked)
                            .PicturePosition = fmPicturePositionLeftTop
                            .AutoSize = True
                            '.Width = 7.5
                            '.Height = 7.5
                        Else
                            .Width = mcChkBoxSize
                            .Height = mcChkBoxSize
                            .Font.Name = "Marlett"  ' "a" is a tick
                            .FontSize = mcCheckboxFont     '9
                            .BorderStyle = fmBorderStyleSingle
                            .BackColor = vbWindowBackground
                            .ForeColor = vbWindowText
                        End If
                        If cRoot.Checked Then cRoot.Checked = True
                        .Visible = True
                    End With
                Else
                    With cRoot.Checkbox
                        .Left = mcTLpad + msngRootLine
                        .Top = msngTopChk + mlVisCount * msngNodeHeight
                        .Visible = True
                    End With
                End If
            End If

            ' Icon
            If mbFullWidth And mbGotIcons Then
                If cRoot.hasIcon(vIconKey) Then
                    If cRoot.Icon Is Nothing Then
                        Set cRoot.Icon = TreeControl.Controls.Add("Forms.Image.1", "Icon" & cRoot.Control.Name, False)
                        With cRoot.Icon
                            .BackStyle = fmBackStyleTransparent
                            .BorderStyle = fmBorderStyleNone
                            '.AutoSize
                            .Width = mcIconSize
                            .Height = mcIconSize
                            .Left = mcTLpad + msngRootLine + msngChkBoxPad
                            .Top = msngTopIcon + mlVisCount * msngNodeHeight
                            .Picture = mcolIcons(vIconKey)
                            .BackStyle = fmBackStyleTransparent
                            .Visible = True
                        End With
                    Else
                        With cRoot.Icon
                            .Left = mcTLpad + msngRootLine + msngChkBoxPad
                            .Top = msngTopIcon + mlVisCount * msngNodeHeight
                            .Visible = True
                        End With
                    End If
                Else
                    sngIconPad = 0
                End If
            End If

            mlVisCount = mlVisCount + 1
            mlVisOrder(mlVisCount) = cRoot.Index
            cRoot.VisIndex = mlVisCount

            lLastRootVisIndex = mlVisCount

            'Now add this root's children
            If Not cRoot.ChildNodes Is Nothing Then
                BuildTree cRoot, 1, True
            End If

        Next

        'Vertical line for multiple roots
        If mbRootButton And mbShowLines Then
            If moRootHolder.ChildNodes.Count > 1 Then

                If moRootHolder.VLine Is Nothing Then
                    Set moRootHolder.VLine = TreeControl.Controls.Add("forms.label.1", "VLine_Roots")
                    With moRootHolder.VLine
                        .ZOrder 1
                        .Width = mcPtPxl
                        .Caption = ""
                        .BorderColor = vbScrollBars
                        .BorderStyle = fmBorderStyleSingle
                        .Top = msngTopHV
                        .Left = mcLineLeft
                        .Height = (lLastRootVisIndex - 1) * msngNodeHeight
                    End With

                Else

                    With moRootHolder.VLine
                        .Top = msngTopHV
                        .Height = (lLastRootVisIndex - 1) * msngNodeHeight
                        .Visible = True
                    End With
                End If

            End If
        End If

        sngHeightAllNodes = mlVisCount * NodeHeight + (mcTLpad * 2)    ' mcTLpad for top/bottom padding
        If bInit Then
            .ScrollHeight = 0
            .ScrollLeft = 0
        End If

        sngMaxWidth = MaxNodeWidth

        If sngHeightAllNodes > .InsideHeight Then
            If sngMaxWidth + 15 > .InsideWidth Then
                .ScrollBars = fmScrollBarsBoth
                .ScrollWidth = sngMaxWidth + mcTLpad
            Else
                .ScrollBars = fmScrollBarsVertical
                .ScrollLeft = 0
                .ScrollWidth = 0
            End If
            .ScrollHeight = sngHeightAllNodes
        Else
            If sngMaxWidth > .InsideWidth + IIf(.ScrollBars > 1, 15, 0) Then
                .ScrollBars = fmScrollBarsHorizontal
                .ScrollWidth = sngMaxWidth + mcTLpad
            Else
                .ScrollBars = fmScrollBarsNone
                .ScrollLeft = 0
                .ScrollWidth = 0
            End If

            .ScrollTop = 0
            .ScrollHeight = 0
        End If

        If bInit Then    ' startup
            '' make the first root node active but don't highlight it
            Set moActiveNode = moRootHolder.ChildNodes(1)
            '' or if preferred highlighted at startup
            'Set ActiveNode = moRootHolder.ChildNodes(1)
        ElseIf Not ActiveNode Is Nothing Then
            If Not NodeIsVisible Then
                .ScrollTop = (ActiveNode.VisIndex - 1) * NodeHeight - sngActiveNodeScrollTop
            End If
        End If

    End With

    #If DebugMode Then
        #If Win32 Or Win64 Then
            sngTickCnt = (getTickCount - sngTickCnt) / 1000
        #Else  ' if Mac
            sngTickCnt = Timer - sngTickCnt
        #End If

        sCap = "Seconds: " & Format(sngTickCnt, "0.00") & _
               "    Nodes: " & mcolNodes.Count & _
               "  created: " & mlNodesCreated & _
               "  visible: " & mlVisCount & _
               "    Total controls: " & TreeControl.Controls.Count
               
        #If HostProject = "Access" Then
            If Not moForm Is Nothing Then
                moForm.Caption = sCap
            End If
        #Else
            Me.TreeControl.Parent.Caption = sCap
        #End If
    #End If

    mbRedesign = False
    mbTriState = bTriStateOrig
done:

    If bCursorWait Then

        #If HostProject = "Access" Then
            Application.DoCmd.Hourglass False
        #ElseIf HostProject = "Word" Then
            System.Cursor = wdCursorNormal
        #Else
            Application.Cursor = xlDefault
        #End If

        #If Win32 Or Win64 Then
            ' in some systems the cursor fails to reset to default, this forces it
            GetCursorPos pt
            SetCursorPos pt.X, pt.Y
        #End If
    End If

    'TODO: implement API equivalent for cancel key in Access & Word
    #If HostProject = "Access" Then
    #ElseIf HostProject = "Word" Then
    #Else
        Application.EnableCancelKey = xlInterrupt
    #End If
    
    Exit Sub

locErr:
    mbRedesign = False
    mbTriState = bTriStateOrig

    If err.number = 9 And (mlVisCount = UBound(mlVisOrder) + 1) Then
        ' most likely an array needs enlarging
        If mlVisCount = UBound(mlVisOrder) + 1 Then
            ReDim Preserve mlVisOrder(LBound(mlVisOrder) To mlVisCount + 100)
            Resume
        End If
    ElseIf err.number = 18 Then
        ' user pressed ctrl-break
        MsgBox "Loading/refreshing Treeview aborted", , AppName
        NodesClear
        Resume done
    End If

    #If DebugMode = 1 Then
        Debug.Print err.number, err.description
        Stop
        Resume
    #End If

    err.Raise err.number, "BuildRoot", err.description
End Sub

Private Sub BuildTree(cNode As clsNode, ByVal lLevel As Long, Optional lMaxLevel As Long = -1)
    Dim cChild As clsNode
    Dim lVLineTopIdx As Long

   ' On Error GoTo locErr

    If (lLevel > 1 Or mbRootButton) And mbShowExpanders Then

        'Expand/collapse button box (not needed if we use icons are used for expanders)
        If Not mbExpanderImage Then
            If cNode.ExpanderBox Is Nothing Then
                Set cNode.ExpanderBox = TreeControl.Controls.Add("Forms.label.1", "ExpBox" & cNode.Control.Name, False)
                With cNode.ExpanderBox
                    .Top = (mlVisCount - 1) * NodeHeight + msngTopExpB
                    .Left = mcTLpad * 2 + (lLevel - 2) * msngIndent + msngRootLine
                    .Width = mcExpBoxSize
                    .Height = mcExpBoxSize
                    .BorderStyle = fmBorderStyleSingle
                    .BorderColor = vbScrollBars
                    .BackStyle = fmBackStyleOpaque
                    .Visible = True
                End With
            Else
                With cNode.ExpanderBox
                    If mbRedesign Then .Left = mcTLpad * 2 + (lLevel - 2) * msngIndent + msngRootLine
                    .Top = (mlVisCount - 1) * NodeHeight + msngTopExpB
                    .Visible = True
                End With
            End If
        End If

        'Expand/collapse button text (or icon)
        If cNode.Expander Is Nothing Then
            Set cNode.Expander = TreeControl.Controls.Add("Forms.label.1", "ExpText" & cNode.Control.Name, False)
            With cNode.Expander
                .Left = mcTLpad * 2 + (lLevel - 2) * msngIndent + msngRootLine
                .Top = (mlVisCount - 1) * NodeHeight + msngTopExpT

                If mbExpanderImage Then
                    'Use an image
                    .AutoSize = True
                    .Width = 7.5
                    .Height = 7.5
                    .BorderStyle = fmBorderStyleNone
                    .PicturePosition = fmPicturePositionLeftTop
                    .Picture = moExpanderImage(cNode.Expanded)
                    #If Mac Then
                        .BackStyle = fmBackStyleTransparent
                    #End If
                Else
                    'use +/- text
                    .Width = mcExpButSize
                    .Height = mcExpButSize

                    If cNode.Expanded = True Then
                        .Caption = "-"
                        .Font.Bold = True
                    Else
                        .Caption = "+"
                        .Font.Bold = False
                    End If

                    .Font.Size = mcExpanderFont
                    .TextAlign = fmTextAlignCenter
                    .BackStyle = fmBackStyleTransparent
                End If
                .Visible = True
            End With
        Else
            With cNode.Expander
                If mbRedesign Then .Left = mcTLpad * 2 + (lLevel - 2) * msngIndent + msngRootLine
                .Top = (mlVisCount - 1) * NodeHeight + msngTopExpT
                .Visible = True
            End With
        End If

    End If  ' lLevel > 1 Or mbRootButton) And mbShowExpanders

    If cNode.Expanded And (lMaxLevel < lLevel Or lMaxLevel = -1) Then

        'Vertical line
        If mbShowLines Then
            If cNode.VLine Is Nothing Then
                Set cNode.VLine = TreeControl.Controls.Add("Forms.label.1", "VLine" & cNode.Control.Name, False)
                lVLineTopIdx = mlVisCount
                With cNode.VLine
                    .ZOrder 1
                    .Top = msngTopHV + (lVLineTopIdx - 1) * NodeHeight
                    .Left = mcLineLeft + msngRootLine + msngIndent * (lLevel - 1)
                    .Width = mcPtPxl
                    .Height = NodeHeight
                    .Caption = ""
                    .BorderColor = vbScrollBars
                    .BorderStyle = fmBorderStyleSingle
                    .Visible = True
                End With

            Else
                lVLineTopIdx = mlVisCount
                With cNode.VLine
                    .Top = msngTopHV + (lVLineTopIdx - 1) * NodeHeight
                    If mbRedesign Then
                        .Left = mcLineLeft + msngRootLine + msngIndent * (lLevel - 1)
                        .Visible = True
                    End If
                End With
            End If
        End If

        For Each cChild In cNode.ChildNodes

            ' extend the vertical line
            If mbShowLines Then
                With cNode.VLine
                    .Height = (mlVisCount - lVLineTopIdx + 1) * msngNodeHeight
                    .Visible = True
                End With
            End If

            BuildNodeControls cChild, lLevel

            If Not cChild.ChildNodes Is Nothing Then
                BuildTree cChild, lLevel + 1
            End If

        Next

    End If    ' cNode.Expanded And (lMaxLevel < lLevel Or lMaxLevel = -1)

    Exit Sub

'locErr:
'    #If DebugMode = 1 Then
'        Stop
'        Resume
'    #End If
End Sub

Private Sub BuildNodeControls(cNode As clsNode, ByVal lLevel As Long)
' PT, create or (un)hide the controls, size & position to suit
' all created nodes have a caption, and optionally a horizontal line, checkbox and seperate icon

    Dim sngIconPad As Single
    Dim sName As String
    Dim vKey

    On Error GoTo locErr

  '  Application.EnableCancelKey = xlErrorHandler

    If cNode.Control Is Nothing Then
        mlNodesCreated = mlNodesCreated + 1
        sName = "Node" & mlNodesDeleted + mlNodesCreated
    ElseIf mbRedesign Then
         sName = cNode.Control.Name
    End If

    'Horizontal line
    If mbShowLines Then
        If cNode.HLine Is Nothing Then
            Set cNode.HLine = TreeControl.Controls.Add("Forms.label.1", "HLine" & sName, False)
            With cNode.HLine
                .Left = mcLineLeft + msngRootLine + msngIndent * (lLevel - 1)
                .Top = msngTopHV + mlVisCount * NodeHeight
                .Width = msngIndent
                .Height = mcPtPxl
                .Caption = ""
                .BorderStyle = fmBorderStyleSingle
                .BorderColor = vbScrollBars
                 If mbRedesign Then
                    .ZOrder 1
                 End If
                .Visible = True
            End With
        Else
            With cNode.HLine
                If mbRedesign Then
                    .Left = mcLineLeft + msngRootLine + msngIndent * (lLevel - 1)
                    .Width = msngIndent
                End If
                .Top = msngTopHV + mlVisCount * NodeHeight
                .Visible = True
            End With
        End If
    End If

    ' Checkbox
    If CheckBoxes Then
        If cNode.Checkbox Is Nothing Then
            Set cNode.Checkbox = TreeControl.Controls.Add("Forms.label.1", "CheckBox" & sName, False)
            With cNode.Checkbox
                .Left = mcTLpad + msngRootLine + msngIndent * lLevel
                .Top = mlVisCount * NodeHeight + msngTopChk

                If mbCheckboxImage Then
                    'Use an image
                    .BorderStyle = fmBorderStyleNone
                    .Picture = moCheckboxImage(cNode.Checked)
                    .PicturePosition = fmPicturePositionLeftBottom
                    .AutoSize = True
                Else

                    .Width = mcChkBoxSize
                    .Height = mcChkBoxSize
                    .Font.Name = "Marlett"
                    .Font.Size = 10
                    .TextAlign = fmTextAlignCenter
                    .BorderStyle = fmBorderStyleSingle
                    If cNode.Checked Then
                        .Caption = "a"
                        If cNode.Checked = 1 Then
                            .ForeColor = RGB(180, 180, 180)
                        End If
                    End If
                End If

                .Visible = True
            End With
        Else
            With cNode.Checkbox
                If mbRedesign Then .Left = mcTLpad + msngRootLine + msngIndent * lLevel
                .Top = mlVisCount * NodeHeight + msngTopChk
                .Visible = True
            End With
        End If
    End If

    ' Icon, in its own image control if using FullWidth, otherwise it goes in the label
    If mbFullWidth And mbGotIcons Then
        If cNode.hasIcon(vKey) Then
            sngIconPad = mcIconPad
            If cNode.Icon Is Nothing Then
                Set cNode.Icon = TreeControl.Controls.Add("Forms.Image.1", "Icon" & sName, False)
                With cNode.Icon
                    .BorderStyle = fmBorderStyleNone
                    .Left = mcTLpad + msngRootLine + msngIndent * lLevel + msngChkBoxPad
                    .Top = mlVisCount * NodeHeight + msngTopIcon
                    '.AutoSize
                    .Width = mcIconSize
                    .Height = mcIconSize
                    .BackStyle = fmBackStyleTransparent
                    .Picture = mcolIcons(vKey)
                    .BackStyle = fmBackStyleTransparent
                    .Visible = True
                End With
            Else
                With cNode.Icon
                    If mbRedesign Then
                        .Left = mcTLpad + msngRootLine + msngIndent * lLevel + msngChkBoxPad
                    End If
                    .Top = mlVisCount * NodeHeight + msngTopIcon
                    .Visible = True
                End With
            End If
        Else
            sngIconPad = 0
        End If
    End If
    
    'The node itself
    If cNode.Control Is Nothing Then
        
        Set cNode.Control = TreeControl.Controls.Add("Forms.label.1", sName, False)
        With cNode.Control
            .WordWrap = False
            .AutoSize = True
            .Left = mcTLpad + msngRootLine + msngIndent * lLevel + msngChkBoxPad + sngIconPad
            .Top = mcTLpad + msngTopLabel + mlVisCount * NodeHeight

            If Not mbFullWidth And mbGotIcons Then
                If cNode.hasIcon(vKey) Then
                    .PicturePosition = fmPicturePositionLeftCenter
                    .Picture = mcolIcons(vKey)
                End If
            End If

            If cNode.Bold Then .Font.Bold = True
            .WordWrap = False
            .AutoSize = True
            .Caption = cNode.Caption
            cNode.TextWidth = .Width

            If cNode.TextWidth + sngIconPad > msngMaxWidths(lLevel) Then
                msngMaxWidths(lLevel) = cNode.TextWidth + sngIconPad
            End If

            If mbFullWidth Then
                .AutoSize = False
                If .Width <= mcFullWidth Then .Width = mcFullWidth
            End If
            If cNode.BackColor Then
                .BackColor = cNode.BackColor
            End If
            If cNode.ForeColor Then
                .ForeColor = cNode.ForeColor
            End If
            .Visible = True
        End With

    Else
        With cNode.Control
            If mbRedesign Then
                .Left = mcTLpad + msngRootLine + msngIndent * lLevel + sngIconPad + msngChkBoxPad

                If cNode.TextWidth + sngIconPad > msngMaxWidths(lLevel) Then
                    msngMaxWidths(lLevel) = cNode.TextWidth + sngIconPad
                End If
            End If

            .Top = mlVisCount * NodeHeight + mcTLpad + msngTopLabel
            .Visible = True
        End With

    End If

    mlVisCount = mlVisCount + 1
    mlVisOrder(mlVisCount) = cNode.Index
    cNode.VisIndex = mlVisCount

    Exit Sub

locErr:
    If err.number = 9 Then
        ' most likely an array needs enlarging
        If mlVisCount = UBound(mlVisOrder) + 1 Then
            ReDim Preserve mlVisOrder(LBound(mlVisOrder) To mlVisCount + 100)
            Resume
        ElseIf lLevel > UBound(msngMaxWidths) Then
            ReDim Preserve msngMaxWidths(LBound(msngMaxWidths) To lLevel + 5)
            Resume
        End If
    ElseIf err.number = 18 Then
        err.Raise 18    ' user pressed ctrl-break, pass to BuildRoot
    Else
        #If DebugMode = 1 Then
            Stop
            Resume
        #End If
        err.Raise err.number, "BuildNodeControls", err.description
    End If

End Sub

Private Sub Clone(cParent As clsNode, cNode As clsNode, Optional vBefore, Optional ByVal vAfter)
' PT clone a node and add the 4-way references
    Dim bTriStateOrig As Boolean
    Dim cClone As clsNode
    Dim cChild As clsNode
     
    On Error GoTo errH

    If cParent Is Nothing Or cNode Is Nothing Then
        Exit Sub
    End If

    bTriStateOrig = mbTriState
    mbTriState = False
    
    Set cClone = New clsNode

    With cNode
        If .BackColor = 0 Then .BackColor = mlBackColor
        cClone.BackColor = .BackColor
        cClone.Caption = .Caption
        cClone.Checked = .Checked
        cClone.Expanded = .Expanded
        If .ForeColor = 0 Then .ForeColor = mlForeColor
        cClone.ImageExpanded = .ImageExpanded
        cClone.ImageMain = .ImageMain
        cClone.ForeColor = .ForeColor
        cClone.Key = .Key
    End With

    If cParent.ChildNodes Is Nothing Then
        Set cParent.ChildNodes = New Collection
    End If

    Set cClone.ParentNode = cParent

    If Not cNode.ChildNodes Is Nothing Then
        For Each cChild In cNode.ChildNodes
            Clone cClone, cChild    ' don't pass vBefore/vAfter
        Next
    End If

    AddNodeToCol cParent.ChildNodes, cClone, False, vBefore, vAfter

    Set cClone.Tree = Me
    
    AddNodeToCol mcolNodes, cClone, bTreeCol:=True

    cClone.Index = Nodes.Count
    
    mbTriState = bTriStateOrig
    If mbTriState Then
        cClone.ParentNode.CheckTriStateParent
    End If
    
    Exit Sub

errH:
    #If DebugMode = 1 Then
        Debug.Print err.description
        Stop
        Resume
    #End If
    mbTriState = bTriStateOrig
End Sub

Private Function MaxNodeWidth() As Single
'-------------------------------------------------------------------------
' Procedure : MaxNodeWidth
' Author    : Peter Thornton
' Created   : 27-01-2013
' Purpose   : Get the max right for horizontal scroll
'-------------------------------------------------------------------------
    Dim lLevel As Long
    Dim sngMax As Single

    ''' msngMaxWidths(), contains maximum text-width + additional icon width (if any) in each level
    '  tot-width = 3 + msngRootLine + msngIndent * lLevel + msngChkBoxPad + [ msngIconPad + text-width]

    For lLevel = 0 To UBound(msngMaxWidths)
        If msngMaxWidths(lLevel) Then
            If mcTLpad + msngRootLine + msngIndent * lLevel + msngChkBoxPad + msngMaxWidths(lLevel) > sngMax Then
                sngMax = mcTLpad + msngRootLine + msngIndent * lLevel + msngChkBoxPad + msngMaxWidths(lLevel)
            End If
        End If
    Next
    MaxNodeWidth = sngMax
    
End Function

Private Function NextVisibleNodeInTree(ByRef cStartNode As clsNode, Optional bUp As Boolean = True) As clsNode
'-------------------------------------------------------------------------
' Procedure : NextVisibleNodeInTree
' Company   : JKP Application Development Services (c)
' Author    : Jan Karel Pieterse (www.jkp-ads.com)
' Created   : 16-01-2013
' Purpose   : Function that returns either the next or the previous node adjacent to the active node
'-------------------------------------------------------------------------

    Dim lStep As Long
    Dim lNextVis As Long    'PT

    On Error GoTo errH
    If bUp Then lStep = -1 Else lStep = 1

    If cStartNode Is Nothing Then
        Set NextVisibleNodeInTree = mcolNodes(1)
    Else

        lNextVis = cStartNode.VisIndex
        lNextVis = lNextVis + lStep
        If lNextVis >= 1 And lNextVis <= mlVisCount Then
            lNextVis = mlVisOrder(lNextVis)
            Set NextVisibleNodeInTree = mcolNodes(lNextVis)
        End If
    End If
    Exit Function
errH:
    #If DebugMode = 1 Then
        Stop
        Debug.Print err.description
        Resume
    #End If
End Function

Private Function NodeIsVisible(Optional cNode As clsNode, Optional lngCntVisible As Long) As Boolean
Dim idxFirstVis As Long
Dim idxLastVis As Long

    If TreeControl Is Nothing Then
        Exit Function
    End If

    With TreeControl
        idxFirstVis = .ScrollTop / NodeHeight + 1
        lngCntVisible = (.InsideHeight - mcTLpad) / NodeHeight
        idxLastVis = lngCntVisible + idxFirstVis - 1
    End With

    If cNode Is Nothing Then
        If Not ActiveNode Is Nothing Then

            Set cNode = ActiveNode
        Else
            Exit Function
        End If
    End If

    If idxLastVis > mlVisCount Then idxLastVis = mlVisCount

    If Not cNode Is Nothing Then
        NodeIsVisible = cNode.VisIndex >= idxFirstVis And cNode.VisIndex <= idxLastVis
    End If

End Function

Private Sub ResetActiveNodeColor(cNode As clsNode)
    Dim lBColor As Long
    Dim lFColor As Long
    If Not cNode Is Nothing Then
        lBColor = cNode.BackColor
        lFColor = cNode.ForeColor
        With cNode.Control
            .BorderStyle = fmBorderStyleNone
            .BackColor = IIf(lBColor, lBColor, mlBackColor)
            .ForeColor = IIf(lFColor, lFColor, mlForeColor)
        End With
    End If
End Sub

Private Sub Round75()
'-------------------------------------------------------------------------
' Procedure : Round75
' Author    : Peter Thornton
' Created   : 29-01-2013
' Purpose   : Make size & position dims a factor of 0.75 points (units of 1 pixel)
'-------------------------------------------------------------------------
#If Mac Then
    msngTopExpB = Int(msngTopExpB)
    msngTopExpT = Int(msngTopExpT)
    msngTopHV = Int(msngTopHV)
    msngTopIcon = Int(msngTopIcon)
    msngTopChk = Int(msngTopChk)
    msngTopLabel = Int(msngTopLabel)
#Else
    msngTopExpB = Int((msngTopExpB * 2 + mcPtPxl) / 3 * 2) * mcPtPxl
    msngTopExpT = Int((msngTopExpT * 2 + mcPtPxl) / 3 * 2) * mcPtPxl
    msngTopHV = Int((msngTopHV * 2 + mcPtPxl) / 3 * 2) * mcPtPxl
    msngTopIcon = Int((msngTopIcon * 2 + mcPtPxl) / 3 * 2) * mcPtPxl
    msngTopChk = Int((msngTopChk * 2 + mcPtPxl) / 3 * 2) * mcPtPxl
    msngTopLabel = Int((msngTopLabel * 2 + mcPtPxl) / 3 * 2) * mcPtPxl
#End If
End Sub

Private Sub SetActiveNodeColor(Optional bInactive)

    If Not ActiveNode Is Nothing Then

        If IsMissing(bInactive) Then
            On Error Resume Next
            #If HostProject = "Access" Then
                bInactive = mbInActive
            #Else
                bInactive = Not Me.TreeControl Is Me.TreeControl.Parent.ActiveControl
            #End If
            On Error GoTo 0
        End If

         ' system highlight colours, bInactive set and called from EnterExit event

        With ActiveNode.Control
            If bInactive Then
            ''' when treeeview not in focus
            
                ResetActiveNodeColor moActiveNode
                '' just a grey border
                .BorderStyle = fmBorderStyleSingle
                .BorderColor = RGB(190, 190, 190)
                
                '' inactive colours
'                .BackColor = vbInactiveTitleBar
'                .ForeColor = vbWindowText
            Else
                ' in focus
                .BorderStyle = fmBorderStyleNone
                .BackColor = vbHighlight
                .ForeColor = vbHighlightText
            End If
        End With

    End If
End Sub

Private Sub SetTreeExpansionLevel(lLevel As Long, Optional lCurLevel As Long, _
                                          Optional cNode As clsNode, Optional bExit As Boolean = False)
'-------------------------------------------------------------------------
' Procedure : SetTreeExpansionLevel
' Company   : JKP Application Development Services (c)
' Author    : Jan Karel Pieterse (www.jkp-ads.com)
' Created   : 17-01-2013
' Purpose   : Updates the expanded properties according to lLevel
'             Called recursively.
'-------------------------------------------------------------------------
    Dim cChild As clsNode
    If bExit Then Exit Sub
    If cNode Is Nothing Then

        For Each cNode In moRootHolder.ChildNodes
            If lLevel > -1 Then
                cNode.Expanded = True
            Else
                cNode.Expanded = False
            End If
            If Not cNode.ChildNodes Is Nothing Then
                For Each cChild In cNode.ChildNodes
                    cChild.Expanded = (lLevel > lCurLevel)
                    SetTreeExpansionLevel lLevel, lCurLevel + 1, cChild, False
                Next
            End If
        Next

    ElseIf Not cNode.ChildNodes Is Nothing Then
        For Each cChild In cNode.ChildNodes
            cChild.Expanded = (lLevel > lCurLevel)
            SetTreeExpansionLevel lLevel, lCurLevel + 1, cChild, False
        Next
    End If
End Sub


'*********************************************************************************************
'*    Private events    *
'**********************************************************************************************

Private Sub TreeControl_Click()
' PT exit editmode if an empty part of the treeview is clicked
    EditMode(ActiveNode) = False
End Sub

Private Sub TreeControl_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    Dim sngVisTop As Single
    Dim cNode As clsNode

    ' PT toggle expand/collapse with key Enter
    If KeyCode = vbKeyReturn Then
        If ActiveNode.Expanded Then
            KeyCode = vbKeyLeft
        Else
            KeyCode = vbKeyRight
        End If
    End If

    If Not ActiveNode Is Nothing Then
        Select Case KeyCode

        Case vbKeyLeft
            If ActiveNode.Level = 0 And Not mbRootButton Then
                ' don't attempt to collapse the Root if it doesn't have a button

            ElseIf Not ActiveNode.ChildNodes Is Nothing Then
                If ActiveNode.Expanded Then
                    ActiveNode.Expanded = False
                    BuildRoot False
                Else
                    If Not ActiveNode.ParentNode Is Nothing Then
                        If ActiveNode.ParentNode.Expanded Then
                            'If Not ActiveNode.ParentNode.Level = 0 And mbRootButton Then
                            If ActiveNode.ParentNode.Level >= 0 Then
                                Set ActiveNode = ActiveNode.ParentNode
                                ScrollToView , -1
                                NodeClick ActiveNode.Control, ActiveNode    'AVDV
                            End If
                        End If
                    End If
                End If
            Else
                If Not ActiveNode.ParentNode Is Nothing Then
                    If ActiveNode.ParentNode.Level = 0 And Not mbRootButton Then
                        ' don't attempt to collapse the Root if it doesn't have a button
                        ' redundant ?
                    ElseIf ActiveNode.ParentNode.Expanded Then
                        If ActiveNode.ParentNode.Caption <> "RootHolder" Then
                            Set ActiveNode = ActiveNode.ParentNode
                            ScrollToView ActiveNode, -1
                            NodeClick ActiveNode.Control, ActiveNode    'AVDV
                        End If
                    End If
                End If
            End If

        Case vbKeyRight
            If Not ActiveNode.ChildNodes Is Nothing Then
                If ActiveNode.Expanded = False Then
                    ActiveNode.Expanded = True
                    If Not ActiveNode.Expander Is Nothing Then
                        NodeClick ActiveNode.Expander, ActiveNode  'AVDV
                        ' BuildRoot False will be called in NodeClick
                    Else
                        ' a Root node and mbRootButton = False
                        BuildRoot False
                    End If
                Else
                    Set ActiveNode = ActiveNode.ChildNodes(1)
                    NodeClick ActiveNode.Control, ActiveNode    'AVDV
                End If

            End If

        Case vbKeyUp, vbKeyDown
            If ActiveNode.VisIndex = mlVisCount And KeyCode = vbKeyDown Then
                ' if the activenode is the last node and collaped, expand it and activate the 1st childnode
                If Not ActiveNode.ChildNodes Is Nothing Then
                    If ActiveNode.Expanded = False Then
                        ActiveNode.Expanded = True
                        BuildRoot False
                    End If
                End If
            End If

            Set cNode = NextVisibleNodeInTree(ActiveNode, (KeyCode = vbKeyUp))

            If Not cNode Is Nothing Then
                Set ActiveNode = cNode
                ScrollToView ActiveNode, IIf(KeyCode = vbKeyUp, -1, -2) ' the -ve means will scroll won't change if the node is visible
                NodeClick ActiveNode.Control, ActiveNode
            End If

        Case vbKeyPageUp, vbKeyPageDown
            'store the activenode's vertical position to reset a similar in the keyup
            If Not mbKeyDown Then
                sngVisTop = (ActiveNode.VisIndex - 1) * NodeHeight - TreeControl.ScrollTop
                If sngVisTop > 0 And sngVisTop < TreeControl.InsideHeight Then
                    msngVisTop = sngVisTop
                Else
                    msngVisTop = 0
                End If
            End If

        Case vbKeyEscape
            Set MoveCopyNode(False) = Nothing

        Case vbKeySpace  ' PT toggle checkbox with space
            If CheckBoxes Then
                ActiveNode.Checked = Not ActiveNode.Checked

                RaiseEvent NodeCheck(ActiveNode)
            End If
        End Select

        mbKeyDown = True    ' PT

        RaiseEvent KeyDown(ActiveNode, KeyCode, Shift)
    Else
        If Not mcolNodes Is Nothing Then
            If mcolNodes.Count Then
                Set ActiveNode = mcolNodes(1)
            End If
        End If
    End If

End Sub

Private Sub TreeControl_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
'-------------------------------------------------------------------------
' Procedure : TreeControl_KeyUp
' Company   : JKP Application Development Services (c)
' Author    : Jan Karel Pieterse (www.jkp-ads.com)
' Created   : 17-01-2013
' Purpose   : Handles collapsing and expanding of the tree using left and right arrow keys
'             and moving up/down the tree using up/down arrow keys
'             Also handles folding of the tree when you use the numeric keys.
'-------------------------------------------------------------------------
    Dim lIdx As Long
    Dim sngNewScrollTop As Single

    If Not mbKeyDown Then    'PT
        ' PT KeyDown was initiated in some other control,
        '   eg Key Enter in the Editbox or tabbing to the treecontrol (enter event)
        Exit Sub
    Else

        mbKeyDown = False
    End If

    If Not ActiveNode Is Nothing Then

        Select Case KeyCode

        ' PT look into moving more key events into KeyDown

        Case 48 To 57, 96 To 105
            If KeyCode >= 96 Then KeyCode = KeyCode - 48
            If (KeyCode > vbKey0 Or mbRootButton) And Shift = 0 Then
                'SetTreeExpansionLevel (KeyCode - 49)
                ExpandToLevel (KeyCode - 48)
                BuildRoot False
            End If

        Case vbKeyF2, 93   ' F2 & key right/context menu (?) PT
            If mbLabelEdit Then
                If Not ActiveNode Is Nothing Then
                    EditMode(ActiveNode) = True
                    ActiveNode.EditBox True
                End If
            End If
        Case vbKeyPageUp, vbKeyPageDown
            ' PT activate node in the same position as previous activenode when scrolling
            With Me.TreeControl
                sngNewScrollTop = .ScrollTop
                lIdx = (sngNewScrollTop + msngVisTop) / NodeHeight + 1

                If (lIdx - 1) * NodeHeight < .ScrollTop Then
                    lIdx = lIdx + 1

                ElseIf lIdx * NodeHeight > .InsideHeight + .ScrollTop Then
                    lIdx = lIdx - 1
                End If
            End With

            If lIdx > 1 And lIdx <= mlVisCount Then
                lIdx = mlVisOrder(lIdx)
                Set ActiveNode = mcolNodes(lIdx)
            End If
            
        Case vbKeyHome, vbKeyEnd
            If KeyCode = vbKeyHome Then lIdx = 1 Else lIdx = mlVisCount
            lIdx = mlVisOrder(lIdx)
            If ActiveNode.Index <> lIdx Then
                Set ActiveNode = mcolNodes(lIdx)
            End If
        Case Else

        End Select
    Else
        If Not mcolNodes Is Nothing Then
            If mcolNodes.Count Then
                Set ActiveNode = mcolNodes(1)
            End If
        End If
    End If
    
End Sub

Attribute VB_Name = "|fffd||fffd||fffd||fffd|1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'' |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 2009|fffd|.


Private Sub Workbook_BeforeClose(Cancel As Boolean)
                                                addlog "START Workbook_BeforeClose"
    On Error Resume Next
'
8     If ThisWorkbook.ActiveSheet.CodeName = "Rep" Then Rep.Worksheet_Deactivate
9     ThisWorkbook.Saved = True
10     If sheetChanged Then
                                                addlog "Workbook_BeforeClose (msg box)"
12         msg = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| """ & file_name & ".rar"" ?"
13         response = MsgBox(msg, vbQuestion + vbYesNoCancel)
14         iTimer! = Timer
15         Select Case response
            Case vbYes
                                                addlog "Workbook_BeforeClose (msg box = vbYes; ThisWorkbook.Save)"
18                 Call Workbook_BeforeSave(False, False)
            Case vbNo
                                                addlog "Workbook_BeforeClose (msg box = vbNo; ThisWorkbook.Saved = True)"
21                 ThisWorkbook.Saved = True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| EXCEL
            Case vbCancel
                                                addlog "END Workbook_BeforeClose (msg box = vbCancel; Cancel = True)"
24                 Cancel = True
                Exit Sub
26         End Select
27     End If

29     Set FSO = CreateObject("Scripting.FileSystemObject")
30     Set folder = FSO.GetFolder(ThisWorkbook.path & "\" & FoldY)
31     For Each subfolder In folder.subfolders
32         If Left(subfolder.Name, 5) = "EI_20" Then
'
34             Dir$ ("c:\")
35             subfolder.delete
36         End If
37     Next
'    Kill ThisWorkbook.path & "\" & "rar.exe"
39     Set kntrl = Application.CommandBars("Control Toolbox").Controls(1)
40     If Not IsEmpty(kntrl) Then
41         kntrl.Reset
42         kntrl.Enabled = True
43         kntrl.OnAction = ""
44     End If
    
''    =============================================
''    |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|

49     Set FSO = CreateObject("Scripting.FileSystemObject")
50     If Not log_file Is Nothing Then log_file.Close
51     If Not IsEmpty(log_folder) Then
52         If FSO.FileExists(log_folder.path & "\" & log_filename & ".txt") Then FSO.DeleteFile log_folder.path & "\" & log_filename & ".txt"
53         If log_folder.Files.Count = 0 Then log_folder.delete: log_folder = Empty
54     End If
''    =============================================
End Sub


Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
                                                addlog "START Workbook_BeforeSave"
    
62     If Not globsave Then
63         Cancel = True
64         ThisWorkbook.Saved = True
        
66         arr_save = Data.Range("save").Value
67         Call Reg.ArrSave(arr_save, ThisWorkbook.path & "\" & "save", "save.txt", True)
    
        '----|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Dim intUnit As Integer
        Dim typInfo As MyRec
        Dim Sh As Worksheet
        Dim lngPos As Long
74         intUnit = FreeFile
75         Open ThisWorkbook.path & "\save\column.bin" For Binary Access Write As intUnit Len = Len(typInfo)
76         lngPos = 1
77         For Each Sh In ThisWorkbook.Sheets
78             Select Case Sh.CodeName
            Case "Ind", "Rank", "Reg", "Rep"
80                 typInfo.Name = Left(Sh.CodeName, 4)
81                 For i = 1 To 100
82                     typInfo.cWith(i) = Sh.Columns(i).ColumnWidth
83                 Next i
84                 Put #intUnit, lngPos, typInfo
85                 lngPos = lngPos + Len(typInfo)
86             End Select
87         Next Sh
88         Close intUnit
        '-------------------------
    
        On Error GoTo iii:
92         If Reg.ComboYear.text <> "" And Reg.ComboCode.text <> "" And Reg.ComboCodePEM.text <> "" And Reg.ComboMonth.text <> "" Then
93             If arrE(0, 0) = arr_columnE(0) Then
94                 If isCheck Then
95                     arrEold = Reg.DeleteBlankRows(arrEold, 0, 1)
96                     Call Reg.ArrSave(arrEold, ThisWorkbook.path & "\" & FoldY & file_name, "-ESI" & Reg.ComboCode.Value & "_" & Reg.ComboYear.text & "_" & Reg.ComboMonth.Value & "_" & Reg.ComboCodePEM.Value & ".txt")
97                     Call Reg.ArrSave(arrIold, ThisWorkbook.path & "\" & FoldY & file_name, "-I" & Reg.ComboYear.text + ".txt")
98                     Call SetColumnName(idCheck, Array("IdKey", "Check"), DicCheck.Count)
99                     dKeys = DicCheck.keys
100                     For i = 1 To DicCheck.Count
101                         idCheck(i, 0) = dKeys(i - 1)
102                         idCheck(i, 1) = DicCheck.Item(dKeys(i - 1))
103                     Next i
104                     Call Reg.ArrSave(idCheck, ThisWorkbook.path & "\" & FoldY & file_name, "idCheck.txt")
105                     Call Reg.ArrLoadReport(FoldY & file_name & "\" & "OldReport" & Reg.ComboCode.Value & "_" & Reg.ComboYear.text & ".txt")
106                     Call Reg.FormSAIDI(arrEold, arrIold, "", KarrI)
107                     Call Reg.ArrSave(arrRep, ThisWorkbook.path & "\" & FoldY & file_name, "OldReport" & Reg.ComboCode.Value & "_" & Reg.ComboYear.text & ".txt")
108                     Call Reg.ArrLoadReport(FoldY & file_name & "\" & "NewReport" & Reg.ComboCode.Value & "_" & Reg.ComboYear.text & ".txt")
109                     Call Reg.FormSAIDI(arrE, arrI, "", KarrI, , , , , , True)
110                     Call Reg.ArrSave(arrRep, ThisWorkbook.path & "\" & FoldY & file_name, "NewReport" & Reg.ComboCode.Value & "_" & Reg.ComboYear.text & ".txt")
111                 End If
                                                    addlog "Workbook_BeforeSave(Call Reg.ArrSave(arrT))"
113                 Call Reg.ArrSave(arrT, ThisWorkbook.path & "\" & FoldY & file_name, "T" & Reg.ComboCode.Value & "_" & Reg.ComboYear.text & "_" & Reg.ComboCodePEM.Value + ".txt")
                                                    addlog "Workbook_BeforeSave(Call Reg.ArrSave(arrI))"
115                 Call Reg.ArrSave(arrI, ThisWorkbook.path & "\" & FoldY & file_name, "I" & Reg.ComboYear.text + ".txt")
                                                    addlog "Workbook_BeforeSave(Call Rep.saveC)"
117                 Call Rep.saveC
            
119                 If arrNameComp(1, 0) = Reg.ComboCode.text Then Call Reg.ArrSave(arrNameComp, ThisWorkbook.path & "\" & FoldY & file_name, "CName" & Reg.ComboCode.Value + ".txt")
                
                                                        addlog "Workbook_BeforeSave(Call Reg.savepem)"
122                 Call Reg.savepem
                                                        addlog "Workbook_BeforeSave(Call Reg.savepem)"
                                                        
125                 Call Reg.ArrLoadReport(FoldY & file_name & "\" & "Report" & Reg.ComboCode.Value & "_" & Reg.ComboYear.text & ".txt")
                
127                 If (Val(Reg.Range("j8").Value) + Val(Reg.Range("j9").Value) + Val(Reg.Range("q8").Value) + Val(Reg.Range("q9").Value) + Val(WorksheetFunction.Sum(Reg.Range("As9:as12")))) <> WorksheetFunction.Sum(Reg.Range("AQ25:ax25")) Then
128                     Call Reg.FormSAIDI(arrE, arrI, "1", KarrI)
129                 Else
130                     Call Reg.FormSAIDI(arrE, arrI, "", KarrI)
131                 End If
    
133                 Call Reg.ArrSave(arrRep, ThisWorkbook.path & "\" & FoldY & file_name, "Report" & Reg.ComboCode.Value & "_" & Reg.ComboYear.text & ".txt")
                                                    addlog "Workbook_BeforeSave(Call Reg.ArrSave(arrE))"

136                 arrE = Reg.DeleteBlankRows(arrE, 0, 1)
137                 Call Reg.ArrSave(arrE, ThisWorkbook.path & "\" & FoldY & file_name, "ESI" & Reg.ComboCode.Value & "_" & Reg.ComboYear.text & "_" & Reg.ComboMonth.Value & "_" & Reg.ComboCodePEM.Value & ".txt")
                
139                 Call Reg.CreateBackup(FoldY & file_name)
                    file_n = file_name
                    If FSO.FileExists(ThisWorkbook.path & "\" & file_n & ".rar") And FSO.FolderExists(ThisWorkbook.path & "\" & file_n) Then
                           If FSO.FileExists(ThisWorkbook.path & "\save\" & file_n & ".rar") Then
                               Set oldf = FSO.GetFile(ThisWorkbook.path & "\save\" & file_n & ".rar")
                               Set newf = FSO.GetFile(ThisWorkbook.path & "\" & file_n & ".rar")
                               If oldf.Size < newf.Size Then
                                   FSO.Copyfile ThisWorkbook.path & "\" & file_n & ".rar", ThisWorkbook.path & "\save\"
                               End If
                           Else
                               FSO.Copyfile ThisWorkbook.path & "\" & file_n & ".rar", ThisWorkbook.path & "\save\"
                           End If
                       End If


140             End If
141         End If
                                                    addlog "END Workbook_BeforeSave"
143         sheetChanged = False
144         changedREP = False
        
        Exit Sub

148     End If
149 iii:
                                                        addlog "END Workbook_BeforeSave (ERROR)"
End Sub


Private Sub Workbook_BeforeXmlExport(ByVal Map As XmlMap, ByVal Url As String, Cancel As Boolean)

End Sub

Private Sub Workbook_Open()
    On Error GoTo Errors
'    p = 1 / 0
157     Randomize
158     errsave = True
159     isCheck = False
160     FoldY = ""
161     ReDim myTimer(0 To 0)
    '=============================================
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
164     Set FSO = CreateObject("Scripting.FileSystemObject")
165     If Not FSO.FolderExists(ThisWorkbook.path & "\log") Then
166         Set log_folder = FSO.CreateFolder(ThisWorkbook.path & "\log")
167     Else
168         Set log_folder = FSO.GetFolder(ThisWorkbook.path & "\log")
169     End If
'    log_folder.Attributes = 2
171     log_filename = "log-" & Format(Now, "yyyy_mm_dd-hh_mm_")
172     dd = ""
173     While FSO.FileExists(ThisWorkbook.path & "\log\" & log_filename & dd & ".txt")
174         dd = Val(dd) + 1
175     Wend
176     Set log_file = log_folder.CreateTextFile(log_filename & dd & ".txt")
                                                addlog "START Workbook_Open"
                                                addlog "Workbook_Name = " & ThisWorkbook.Name
        On Error Resume Next
                                                addlog "Workbook_ChengTime = " & Format(FileDateTime(ThisWorkbook.FullName), "dd/mm/yyyy hh:mm")
                                                addlog "Workbook Creation Date = " & Format(ThisWorkbook.BuiltinDocumentProperties("Creation Date"), "dd/mm/yyyy hh:mm")
                                                addlog "Workbook Last Save Time = " & Format(ThisWorkbook.BuiltinDocumentProperties("Last Save Time"), "dd/mm/yyyy hh:mm")
                                                addlog "---------"
    '=============================================
        On Error GoTo Errors
    Dim addTree As Boolean
    
    Dim ret As Boolean
189     ret = EnableEvents("Workbook_Open")
                                               
191     ThisWorkbook.Unprotect ("test")
    
    '----|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
194     If FSO.FileExists(ThisWorkbook.path & "\save\column.bin") Then
        Dim intUnit As Integer
        Dim typInfo As MyRec
        Dim lngIndex As Long, lngPos As Long
        Dim Sh As Worksheet
199         intUnit = FreeFile
200         Open ThisWorkbook.path & "\save\column.bin" For Binary Access Read As intUnit Len = Len(typInfo)
201         lngPos = 1
202         Do While Not EOF(intUnit)
203             Get #intUnit, lngPos, typInfo
204             For Each Sh In ThisWorkbook.Sheets
205                 If Sh.CodeName = RTrim(typInfo.Name) Then
206                     For i = 1 To 100
207                         If Sh.Columns(i).ColumnWidth <> typInfo.cWith(i) Then Sh.Columns(i).ColumnWidth = typInfo.cWith(i)
208                     Next i
                    Exit For
210                 End If
211             Next
212             lngPos = lngPos + Len(typInfo)
213         Loop
214         Close intUnit
215     End If
    '-------------------------
    
218     Reg.Columns("H:H").EntireColumn.hidden = True
    
220     If Reg.Visible = xlSheetVisible Then
221         Call first
222         globsave = True
223         Start.Visible = xlSheetVisible
224         Reg.Visible = xlSheetVeryHidden
225         Rep.Visible = xlSheetVeryHidden
226         Ind.Visible = xlSheetVeryHidden
227         Rank.Visible = xlSheetVeryHidden
228         Data.Visible = xlSheetVeryHidden
229         Er.Visible = xlSheetVeryHidden
230         Check.Visible = xlSheetVeryHidden
231         ThisWorkbook.Protect ("test")
232         ThisWorkbook.Save
233         ThisWorkbook.Unprotect ("test")
234     End If
        
        
        
238     globsave = False
239     Reg.Visible = xlSheetVisible
240     Start.Visible = xlSheetVeryHidden
241     Rep.Visible = xlSheetVisible
242     Ind.Visible = xlSheetVisible
243     Rank.Visible = xlSheetVisible
244     Er.Visible = xlSheetVisible
245     If Reg.SheetExists("UA") Then UA.Visible = xlSheetVisible
    
247     Set kntrl = Application.CommandBars("Control Toolbox").Controls(1)
248     If Not IsEmpty(kntrl) Then
249         kntrl.Reset
250         kntrl.Enabled = False
251         kntrl.OnAction = "mysub"
252     End If
253     ThisWorkbook.Protect "test", Structure:=True
    

256     Set WshShell = CreateObject("WScript.Shell")
257     MyPath = WshShell.SpecialFolders("Desktop")
    
    
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| rar.exe, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
261     If FSO.FileExists(ThisWorkbook.path & "\rar.exe") Then
                                                addlog "Workbook_Open (delete rar.exe)"
263         FSO.DeleteFile (ThisWorkbook.path & "\rar.exe")
264     End If
265     If Not FSO.FileExists(ThisWorkbook.path & "\Arch.exe") Then
                                                addlog "Workbook_Open (Call extract)"
267         Call extract
268     End If
        
        

'========== |fffd||fffd||fffd||fffd||fffd||fffd|  clsNode |fffd||fffd| clsTreeView =======================
'    With ThisWorkbook.VBProject
'        addTree = True
'        For Each VBP In .VBComponents
'            If VBP.name = "clsNode" Or VBP.name = "clsTreeView" Then addTree = False: Exit For
'        Next VBP
'        If addTree Then
'            Dim FileManager As New AttachedFiles, res As Boolean
'            res = FileManager.GetAttachment("tree.rar").SaveAs(ThisWorkbook.path & "\log\tree.rar")
'            Call Reg.UnpackBackup("log\tree", "log")
'            FSO.DeleteFile ThisWorkbook.path & "\log\tree.rar"
'            .VBComponents.Import ThisWorkbook.path & "\log\clsNode.cls"
'            .VBComponents.Import ThisWorkbook.path & "\log\clsTreeView.cls"
'            FSO.DeleteFile ThisWorkbook.path & "\log\clsNode.cls"
'            FSO.DeleteFile ThisWorkbook.path & "\log\clsTreeView.cls"
'        End If
'    End With
'=================================================================
    
    

    
294     Reg.Select
295     Reg.Image1.Visible = False
296     Reg.Image2.Visible = False
297     Reg.Image3.Visible = False
298     Ind.Label1.Visible = False
299     Ind.Label5.Visible = False
300     Ind.LabelKls.Visible = False
301     Ind.LabelU.Visible = False
302     Ind.Label7.Visible = False
303     Ind.Label8.Visible = False
304     Ind.OptionAll.Visible = False
305     Ind.OptionLong.Visible = False
306     Ind.OptionShort.Visible = False
    
308     Set mytree = CreateObject("Scripting.Dictionary")
309     Set tmpmytree = CreateObject("Scripting.Dictionary")
310     Set divisions = CreateObject("Scripting.Dictionary")
311     Set EBlock = CreateObject("Scripting.Dictionary")
312     arr_columnE = Array("Kod", "IdKey", "Num", "Source", "Dname", "U", "K", "Dlist", "T1", "T2", "Dur", "Type", "Ntrm", "N04m", "Ntrs", "N04s", "N6m", "N6s", "N35", "N110", "Comm", "Error", "RevTeh", "MultiM", "MultiS")
313     arr_columnPEM = Array("KodCompany", "NamePEM", "KodPEM")
314     arr_columnI = Array("Kod", "KodPEM", "U", "C", "N", "Tr", "LEP")
315     arr_columnT = Array("Kod", "Name1", "Name2", "Name3", "Name4", "Name5", "Name6", "Name7", "Name8", "Name9", "Name10", "Trm", "Nm04", "Trs", "Ns04", "Nm6", "Ns6", "N35", "N110", "Comm")
316     arr_columnC = Array("Kod", "KodPEM", "Month", "Person", "Tel", "email", "Address1", "Address2", "EDRPOU", "Fax", "Owner", "NEnd", "Block")
317     arr_columnRep = Array("Kod", "KodPEM", "Month", "Ukod", "SAIDI1", "SAIDI2", "SAIDI3", "SAIDI4", "SAIDI5", "SAIDI6", "SAIDI7", "SAIFI1", "SAIFI2", "SAIFI3", "SAIFI4", "SAIFI5", "SAIFI6", "SAIFI7", "ENS1", "ENS2", "ENS3", "ENS4", "ENS5", "ENS6", "ENS7", "MAIFI1", "MAIFI2", "MAIFI3", "MAIFI4", "MAIFI5", "MAIFI6", "MAIFI7", "N", "C", "NS1", "NS2", "NS3", "NS4", "NS5", "NS6", "NS7", "NM1", "NM2", "NM3", "NM4", "NM5", "NM6", "NM7", "Nerr")
318     arr_columnCName = Array("Kod", "NameC")
319     arr_columnDysp = Array("Kod", "KodPEM", "Month", "Dname", "Cust", "Time")
    
    
322     ReDim PEMsel(0 To 0)
323     Call SetColumnName(arrNameComp, arr_columnCName, 1)
324     Call SetColumnName(arrT, arr_columnT)
325     Call SetColumnName(arrE, arr_columnE)
326     Call SetColumnName(arrPEM, arr_columnPEM)
327     Call SetColumnName(arrI, arr_columnI, 6)
328     Call SetColumnName(arrC, arr_columnC, 12)
329     Call SetColumnName(arrRep, arr_columnRep, 9)
330     ReDim arrCheck(0 To 0)
    

                                                addlog "Workbook_Open (Call Reg.JoinArch)"
334     If FSO.FileExists(ThisWorkbook.path & "\save\save.txt") Then
335         arr_save = Reg.ArrLoad("save\save.txt", Array("month", "year", "kod", "pemkod"), 1)
336         Data.Range("save").Value = arr_save
337         file_name = "EI_" & Data.Range("year").Value & "_" & Data.Range("Kod").Value
338         If Reg.SheetExists("UA") And Data.Range("save").Cells(2, 2).Value <> "" Then FoldY = Data.Range("save").Cells(2, 2).Value & "\"
339         If Not FSO.FileExists(ThisWorkbook.path & "\" & FoldY & file_name & ".rar") And Not FSO.FileExists(ThisWorkbook.path & "\" & FoldY & file_name & "_" & Data.Range("PEMKod").Value & ".rar") Then Data.Range("PEMKod").Value = ""
340     Else
341         If Reg.SheetExists("UA") Then
342             Set folder1 = FSO.GetFolder(ThisWorkbook.path & "\")
343             For Each File In folder1.subfolders
344                 If Left(File.Name, 2) = "20" Then
345                     If CInt(File.Name) > 2000 And CInt(File.Name) < 2100 Then
346                         FoldY = File.Name & "\"
347                     End If
348                 End If
349             Next
350         End If
351         Set folder = FSO.GetFolder(ThisWorkbook.path & "\" & FoldY)
352         For Each File In folder.Files
353             tmp_f = Split(File.Name, ".")
354             If UBound(tmp_f) > 0 And Left(tmp_f(0), 3) = "EI_" Then
355                 If tmp_f(1) = "rar" Then
356                     arr_fname = Split(tmp_f(0), "_")
357                     If UBound(arr_fname) > 0 Then
358                         If CInt(arr_fname(1)) > 2000 And CInt(arr_fname(1)) < 2100 Then
359                             file_name = tmp_f(0)
360                             Data.Range("save").Cells(2, 2).Value = arr_fname(1)
361                             If UBound(arr_fname) > 1 Then Data.Range("save").Cells(2, 3).Value = arr_fname(2)
                            Exit For
363                         End If
364                     End If
365                 End If
366             End If
367         Next
368     End If

370     Call Reg.JoinArch
                                                addlog "Workbook_Open (Call Reg.ArrLoadPEM) " & file_name
372     Call Reg.ArrLoadPEM(FoldY & file_name & "\" & "PEM" & CStr(Data.Range("kod").Value) & ".txt")
                                                addlog "Workbook_Open (Call Reg.SetRangPEM)"
374     firstacn = True
375     Call Reg.SetRangPEM
376     firstacn = False

378     ret = EnableEvents("Workbook_Open", ret)
379     Reg.Select
380     Reg.Range("J8").Select
381     errsave = False
                                               
                                                addlog "END Workbook_Open"
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Sub first()
    On Error GoTo Errors
390     firstacn = True
391     Data.Range("month") = Data.Range("months").Cells(1)
392     Reg.Unprotect ("test")
393     Reg.Range("az6:db6") = ""
394     Reg.Range("y2:ac2") = ""
395     Reg.Range("g2:p2").Value = ""
396     Reg.Range("t2:w2").Value = ""
397     Reg.Range("r2").Value = ""
398     Reg.Range("Ut").Value = ""
'    Reg.Range("AF26:AY26").ClearContents
400     Reg.Range("j8:q9").ClearContents
401     Reg.Range("s8:u9").ClearContents
402     Reg.Range("y8:aa9").ClearContents
403     Reg.Range("aq9:at12").ClearContents
404     Reg.Range("A27:bc" & Reg.UsedRange.Rows.Count + 1).delete Shift:=xlUp
405     Reg.Range("A26:bc26").ClearComments
406     Reg.Range("A26:AD26").ClearContents
407     Reg.Range("Ag26:ay26").ClearContents
408     Reg.Range("BB26:BC26").ClearContents
409     Reg.ComboMonth.Value = "01"
410     Reg.ComboYear.Value = ""
411     Reg.Image1.Visible = False
412     Reg.Image2.Visible = False
413     Reg.Image3.Visible = False
414     Reg.CheckBoxCheck.Value = False
    
416     Data.Range("year") = ""
417     Data.Range("Kod") = ""
418     Data.Range("PEMKod") = ""
'    Reg.Range("A27:bc" & Reg.UsedRange.Rows.Count + 1).delete
'    Reg.Range("bb27:bc" & Reg.UsedRange.Rows.Count + 1).delete
421     Data.Range("kod") = ""
422     Reg.Range("PEM") = ""
423     Data.Range("pemkod") = ""
424     Reg.ComboCode = ""
425     Reg.ComboCodePEM = ""
426     Reg.ComboCompany = ""
427     Reg.ComboPEM = ""
428     Rep.Range("I14") = ""
429     Rep.Range("yearr") = ""
430     Rep.Range("R9") = ""
431     Ind.ComboKind = ""
432     Ind.ComboCode = ""
433     Ind.ComboCompany = ""
434     Rep.ComboCode = ""
435     Rep.ComboCompany = ""
436     Rep.LabelPer.Caption = ""
    
438     Rank.ComboCode = ""
439     Rank.ComboCompany = ""
440     Rank.LabelPer.Caption = ""
441     Rank.LabelKls.Caption = ""
442     Rank.LabelU.Caption = ""
443     Rank.LabPEM.Caption = ""
    
445     Er.ComboCode = ""
446     Er.ComboCompany = ""
447     Er.LabPEM.Caption = ""
448     Er.ComboSort.ListIndex = 0
449     Er.Range("a3:l" & 3 + Er.UsedRange.Rows.Count).delete Shift:=xlUp
450     Rank.Range("a3:j" & 3 + Rank.UsedRange.Rows.Count).delete Shift:=xlUp
451     Ind.Range("F10:X" & 6 + Ind.UsedRange.Rows.Count).delete Shift:=xlUp
452     Rep.LabPEM.Caption = ""
453     Rep.Range("SAIDI").Value = "-"
454     Rep.Range("SAIFI").Value = "-"
455     Rep.Range("ENS").Value = "-"
456     Rep.Range("MAIFI").Value = "-"
457     Rep.Range("NS").Value = "-"
458     Rep.Range("NM").Value = "-"
459     Rep.Range("info35110").Value = "-"
460     Rep.Range("info6").Value = "-"
461     Rep.Range("info04").Value = "-"
462     Rep.Range("ContactsR") = ""
463     Data.Range("year") = ""
464     Data.Range("H3").Value = 0
465     Call Check.clearCheck
466     Reg.Protect Password:="test", DrawingObjects:=False, Contents:=True, Scenarios:= _
        False, AllowFormattingCells:=True, AllowFormattingColumns:=True, _
        AllowFormattingRows:=True, AllowSorting:=True, AllowFiltering:=True
    
    Exit Sub
Errors: Call CatchErr(err.number, err.description, Erl(), Me.CodeName)
End Sub

Private Sub AddLineNumbers()
    Dim i As Long, j As Long, lineN As Long
    Dim procName As String
    Dim startOfProceedure As Long
    Dim lengthOfProceedure As Long
    Dim bodyOfProceedure As Long
    Dim vbext_pk_Proc As Long
481     vbext_pk_Proc = 0
    
    Dim Words
484     Set Words = CreateObject("Scripting.Dictionary")
485     arrWords = Array("addlog", "Dim", "Exit", "On", "Errors:", "Case")
486     For i = 0 To UBound(arrWords)
487         Words.Add arrWords(i), i
488     Next i
    
    Dim Components
491     Set Components = CreateObject("Scripting.Dictionary")
492     arrComponents = Array("Er", "Ind", "Rank", "Reg", "Rep", "Check", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "Form_SelectDate", "FormFind", "FormPem", "FormPeriod", "FormUKls", "UserForm2", "UserForm3", "UserForm4")
493     For i = 0 To UBound(arrComponents)
494         Components.Add arrComponents(i), i
495     Next i
    
497     For Each ComText In ThisWorkbook.VBProject.VBComponents
498         With ComText.CodeModule
499             If Components.exists(ComText.CodeModule.Name) Then
500                 For i = 1 To .CountOfLines
501                     procName = .ProcOfLine(i, vbext_pk_Proc)
502                     If procName <> "" Then
503                         bodyOfProceedure = .ProcBodyLine(procName, vbext_pk_Proc)
504                         startOfProceedure = .ProcStartLine(procName, vbext_pk_Proc)
505                         lengthOfProceedure = .ProcCountLines(procName, vbext_pk_Proc)
506                         For j = bodyOfProceedure + 1 To startOfProceedure + lengthOfProceedure - 2
507                             nSpace = InStr(1, Trim(.Lines(j, 1)), " ", vbTextCompare)
508                             fWorld = ""
509                             If nSpace > 0 Then
510                                 nSpace = nSpace - 1
511                                 fWorld = Left(Trim(.Lines(j, 1)), nSpace)
512                             End If
513                             If Not Words.exists(fWorld) And Trim(.Lines(j, 1)) <> "" And Right(.Lines(j - 1, 1), 2) <> " _" And Left(Trim(.Lines(j, 1)), 1) <> "'" Then
514                                 .ReplaceLine j, CStr(j) & " " & RemoveOneLineNumber(.Lines(j, 1))
515                             End If
516                         Next j
517                         i = j
518                     End If
519                 Next i
520             End If
521         End With
522     Next ComText
End Sub

Private Sub RemoveLineNumbers()
    Dim i As Long
    Dim Components
528     Set Components = CreateObject("Scripting.Dictionary")
529     arrComponents = Array("Er", "Ind", "Rank", "Reg", "Rep", "Check", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "Form_SelectDate", "FormFind", "FormPem", "FormPeriod", "FormUKls", "UserForm2", "UserForm3", "UserForm4")
530     For i = 0 To UBound(arrComponents)
531         Components.Add arrComponents(i), i
532     Next i
     
    
535     For Each ComText In ThisWorkbook.VBProject.VBComponents
536         With ComText.CodeModule
537             If Components.exists(ComText.CodeModule.Name) Then
538                 For i = 1 To .CountOfLines
539                     .ReplaceLine i, RemoveOneLineNumber(.Lines(i, 1))
540                 Next i
541             End If
542         End With
543     Next ComText
End Sub


Private Function RemoveOneLineNumber(aString)
548     RemoveOneLineNumber = aString
549     If aString Like "#*" Or aString Like "##*" Or aString Like "###*" Or aString Like "####*" Then
550         RemoveOneLineNumber = Mid(aString, 1 + InStr(1, aString, " ", vbTextCompare))
551     End If
552     If aString Like "#" Or aString Like "##" Or aString Like "###" Or aString Like "####" Then
553         RemoveOneLineNumber = ""
554     End If
End Function


Private Sub AllRep()
    Dim i As Long, j As Long
    Dim vbext_pk_Proc As Long
561     vbext_pk_Proc = 0
    
    Dim Components
564     Set Components = CreateObject("Scripting.Dictionary")
'510     arrComponents = Array("Er", "Ind", "Rank", "Reg", "Rep", "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|", "Form_SelectDate", "FormFind", "FormPem", "FormPeriod", "FormUKls", "UserForm2", "UserForm3", "UserForm4")
566         arrComponents = Array("Form_SelectDate", "FormFind", "FormPem", "FormPeriod", "FormUKls", "UserForm2", "UserForm3", "UserForm4")
567     For i = 0 To UBound(arrComponents)
568         Components.Add arrComponents(i), i
569     Next i
'
571     str1 = "Call CatchErr(err.number, err.description, Erl(), Me.CodeName)"
572     str2 = "Call CatchErr(err.number, err.description, Erl(), Me.Name)"
573     j = 0
574     For Each ComText In ThisWorkbook.VBProject.VBComponents
575         With ComText.CodeModule
576             If Components.exists(ComText.CodeModule.Name) Then
577                 For i = 1 To .CountOfLines
578                     If InStr(1, .Lines(i, 1), str1, vbTextCompare) Then
579                         .ReplaceLine i, Replace(.Lines(i, 1), str1, str2)
580                         j = j + 1
581                     End If
582                 Next i
583             End If
584         End With
585     Next ComText
586     MsgBox "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| " & j
587 End Sub


' InQuest injected base64 decoded content
' ~`ZrD

INQUEST-PP=macro
