Attribute VB_Name = "A_a_Import_AO_Data"
Option Explicit

Public pctCompl1 As Integer
Public pctCompl2 As Integer
Public pctCompleted1_d As Double
Public pctCompleted2_d As Double

Public pctCompl_display1 As Integer
Public pctCompl_display2 As Integer

Public Custom_ac_count_needed As Double
Public Custom_ap_count_needed As Double
Public element As Variant

Public Input_Nb_Entries As Double


Sub Import_AO_data()
    
    ThisWorkbook.Unprotect Password:="CORSIACERT2019P"
    
    On Error GoTo Handler:
    
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    If MsgBox("Warning: " & vbCrLf & vbCrLf & "If you continue, all previously entered data on this page will be deleted. " & vbCrLf & vbCrLf & "Do you want to continue?", vbYesNo + vbQuestion, "CORSIA CERT") = 7 Then
        Application.EnableEvents = True
        Application.Calculation = xlCalculationAutomatic
        Exit Sub
    End If
    
    ' Clear cell contents
    Dim NumRows_existing As Double
    Dim StartRow As Double
    
    Dim n As Double
    
    Dim Warning_whole_number As Boolean
    
    Warning_whole_number = False
    
    StartRow = 11
    
    NumRows_existing = Sheet7.Range("D" & StartRow, Sheet7.Range("D" & StartRow).End(xlDown)).Rows.Count
    Sheet7.Range("D" & StartRow + 1 & ":J" & StartRow + NumRows_existing - 1).ClearContents
    Dim Ret As Variant

    Ret = Application.GetOpenFilename("Files types (*.csv), *.csv")

    If Ret <> False Then
        Sheet15.Activate
        Sheet15.UsedRange.ClearContents
        With Sheet15.QueryTables.Add(Connection:= _
        "TEXT;" & Ret, Destination:=Range("$A$1"))
        .FieldNames = False
        .TextFileParseType = xlDelimited
        .TextFileTextQualifier = xlTextQualifierDoubleQuote
        .TextFileConsecutiveDelimiter = False
        .TextFileTabDelimiter = True
        .TextFileSemicolonDelimiter = True
        .TextFileCommaDelimiter = True
        .TextFileSpaceDelimiter = False
        .TextFileColumnDataTypes = Array(1, 1, 1, 1, 1, 1)
        .TextFileTrailingMinusNumbers = True
        .Refresh BackgroundQuery:=False
        End With
    
    ' Copy data to sheet
        Dim r1 As Range
        Dim NumRows
        StartRow = 1
        
        If Sheet15.Range("C2") <> "" Then
        
            NumRows = Sheet15.Range("C" & StartRow, Sheet15.Range("C" & StartRow).End(xlDown)).Rows.Count
            For n = 1 To NumRows
                If (Sheet15.Range("F" & n + 1) - Round(Sheet15.Range("F" & n + 1)) <> 0 Or (Sheet15.Range("F" & n + 1) <> "" And Sheet15.Range("F" & n + 1) < 1)) Then
                    Warning_whole_number = True
                End If
            Next n
            If (Warning_whole_number = True) Then
                If MsgBox("Warning: " & vbCrLf & vbCrLf & "Ensure that rounded flight numbers at least equal to 1 are entered (i.e., 0, negative or fraction of flights are not appropriate entries)", vbExclamation, "CORSIA CERT") = 1 Then
                End If
            End If
            
            Set r1 = Sheet15.Range("A2:F" & StartRow + NumRows)
            r1.Copy
            Sheet7.Range("B12").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
            
            Input_Nb_Entries = Sheet7.Range("D11", Sheet7.Range("D11").End(xlDown)).Rows.Count - 1
            
            ' Convert Input to Ucase
            With Sheet7.Range("D12:F" & 11 + Input_Nb_Entries)
                .Value = Evaluate("INDEX(UPPER(" & .Address(External:=True) & "),)")
            End With
                        
            ' Run Check of Missing Aircraft Types or Airports in CERT databases
            If MsgBox("Would you like to compare the input aeroplane and aerodrome information against the ICAO CORSIA CERT Aeroplane database and the ICAO Doc 7910 to identify any aeroplane and/or aerodrome(s) that require any user input?", vbYesNo, "CORSIA CERT") = 6 Then
                UserForm2.Show
            End If
            
            Else
                
            If MsgBox("Warning: " & vbCrLf & vbCrLf & "Ensure that one or more flight(s) are contained in the CERT_Import_Template .csv file", vbExclamation, "CORSIA CERT") = 1 Then
            
            End If
        End If
    End If

Sheet15.UsedRange.ClearContents

Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic

ThisWorkbook.Protect Password:="CORSIACERT2019P"

Exit Sub
Handler:
If MsgBox("Error: Unable to complete assessment." & vbCrLf & vbCrLf & "Please check that required input was entered correctly." & vbCrLf & vbCrLf & "If the problem continues, please contact CERT@icao.int", vbExclamation, "CORSIA CERT") = 1 Then
End If

ThisWorkbook.Protect Password:="CORSIACERT2019P"

End Sub


Sub Custom_Aircraft_Airport()

On Error GoTo Handler:
 
Dim Input_Aircraft_Type() As String
Dim Aircraft_Type_CERTdb As Range
Dim Custom_Aircraft_Type_Needed As Variant
Dim Aircraft_Type_Available As Variant
Dim Custom_Aircraft_Type_existing As Range

Dim Input_Airport_o() As String
Dim Input_Airport_d() As String
Dim Airport_CERTdb As Range
Dim Custom_Airport_Type_Needed As Variant
Dim Airport_Available As Variant
Dim Custom_Airport_existing As Range

Dim StartRow1 As Double
Dim StartRow2 As Double
Dim i As Double
Dim j As Double
Dim n As Double

Dim ac_count As Double
Dim Custom_ac_count_existing As Double

Dim ap_count As Double
Dim Custom_ap_count_existing As Double

Dim Input_Nb_Entries As Double
Dim Nb_ac_CERTdb  As Double
Dim Nb_ap_CERTdb  As Double

Dim Input_Aircraft_Type_I As Range
Dim Input_Airport_o_I As Range
Dim Input_Airport_d_I As Range

Dim unique_count As Double

Dim Nb_Input_Aircraft_Type As Double
Dim Nb_Input_Airport_o As Double
Dim Nb_Input_Airport_d As Double

'Initialize variables

ac_count = 0
Custom_ac_count_existing = 0
Custom_ac_count_needed = 0

Nb_ac_CERTdb = 0
Nb_ap_CERTdb = 0
Nb_Input_Aircraft_Type = 0

ap_count = 0
Custom_ap_count_existing = 0
Custom_ap_count_needed = 0

Nb_Input_Airport_o = 0
Nb_Input_Airport_d = 0

ReDim Custom_Airport_Needed(1 To 300)
ReDim Custom_Aircraft_Type_Needed(1 To 100)

'Read Input from Worksheets

StartRow1 = 11
Input_Nb_Entries = Sheet7.Range("D" & StartRow1, Sheet7.Range("D" & StartRow1).End(xlDown)).Rows.Count - 1

' Convert Input to Ucase
With Sheet7.Range("D12:F" & 11 + Input_Nb_Entries)
    .Value = Evaluate("INDEX(UPPER(" & .Address(External:=True) & "),)")
End With

Set Input_Aircraft_Type_I = Sheet7.Range("D12", "D" & Input_Nb_Entries + StartRow1)
Set Input_Airport_o_I = Sheet7.Range("E12", "E" & Input_Nb_Entries + StartRow1)
Set Input_Airport_d_I = Sheet7.Range("F12", "F" & Input_Nb_Entries + StartRow1)

'Number of existing aircraft in Custom AC_AP
StartRow1 = 9
If Sheet14.Range("C10") <> 0 Then
    Custom_ac_count_existing = Sheet14.Range("C" & StartRow1, Sheet14.Range("C" & StartRow1).End(xlDown)).Rows.Count - 1

    ' Convert Input to Ucase
    If (Custom_ac_count_existing = 1) Then
        Sheet14.Range("C10") = UCase(Sheet14.Range("C10"))
    Else
        With Sheet14.Range("C10:C" & 9 + Custom_ac_count_existing)
            .Value = Evaluate("INDEX(UPPER(" & .Address(External:=True) & "),)")
        End With
    End If

End If

Set Custom_Aircraft_Type_existing = Sheet14.Range("C10", "C" & Custom_ac_count_existing + 10 - 1)

'Number of Aircraft available in CERT database
StartRow2 = 2
Nb_ac_CERTdb = Sheet2.Range("A" & StartRow2, Sheet2.Range("A" & StartRow2).End(xlDown)).Rows.Count

Set Aircraft_Type_CERTdb = Sheet2.Range("A2", "A" & Nb_ac_CERTdb + StartRow2)

'Number of existing aircraft in Custom AC_AP
StartRow1 = 9
If Sheet39.Range("C10") <> 0 Then
    Custom_ap_count_existing = Sheet39.Range("C" & StartRow1, Sheet39.Range("C" & StartRow1).End(xlDown)).Rows.Count - 1

    ' Convert Input to Ucase
    If (Custom_ap_count_existing = 1) Then
        Sheet39.Range("C10") = UCase(Sheet39.Range("C10"))
    Else
        With Sheet39.Range("C10:C" & 9 + Custom_ap_count_existing)
            .Value = Evaluate("INDEX(UPPER(" & .Address(External:=True) & "),)")
        End With
    End If
    
End If
Set Custom_Airport_existing = Sheet39.Range("C10", "C" & Custom_ap_count_existing + 10 - 1)

'Number of Aircraft available in CERT database
StartRow2 = 2
Nb_ap_CERTdb = Sheet42.Range("A" & StartRow2, Sheet42.Range("A" & StartRow2).End(xlDown)).Rows.Count

Set Airport_CERTdb = Sheet42.Range("A2", "A" & Nb_ap_CERTdb + StartRow2)

ReDim Input_Aircraft_Type(1 To Input_Nb_Entries)
ReDim Input_Airport_o(1 To Input_Nb_Entries)
ReDim Input_Airport_d(1 To Input_Nb_Entries)


'remove duplicates
For i = 1 To Input_Nb_Entries
   If isInArray(Input_Aircraft_Type_I(i), Input_Aircraft_Type) = True Then
    
    Else
        Nb_Input_Aircraft_Type = Nb_Input_Aircraft_Type + 1
        Input_Aircraft_Type(Nb_Input_Aircraft_Type) = Input_Aircraft_Type_I(i)
   End If
Next i

'Merge set of aircraft available

ReDim Aircraft_Type_Available(1 To Nb_ac_CERTdb + Custom_ac_count_existing)

For n = 1 To Nb_ac_CERTdb
    Aircraft_Type_Available(n) = Aircraft_Type_CERTdb(n)
Next n

If Custom_ac_count_existing > 0 Then
    For n = 1 To Custom_ac_count_existing
            Aircraft_Type_Available(n + Nb_ac_CERTdb) = Custom_Aircraft_Type_existing(n)
            
    Next n
End If

For i = 1 To Nb_Input_Aircraft_Type
   
   'Status bar
    pctCompleted1_d = i / Nb_Input_Aircraft_Type
    pctCompl1 = Round(100 * pctCompleted1_d, 0)
    If (pctCompl_display1 <> pctCompl1) Then
        pctCompl_display1 = pctCompl1
        progress_import1 (pctCompl_display1)
    End If
   
   
   If isInArray(Input_Aircraft_Type(i), Aircraft_Type_Available) = True Then
        ac_count = ac_count + 1
   Else
        If isInArray(Input_Aircraft_Type(i), Custom_Aircraft_Type_Needed) = True Then
            Else
            Custom_ac_count_needed = Custom_ac_count_needed + 1
            If (Custom_ac_count_needed > 100) Then
                If MsgBox("Stop: Maximum Number of Custom Aeroplanes Exceeded" & vbCrLf & vbCrLf & "Number of required Custom Aeroplanes exceeds the maximum limit of 100. " & vbCrLf & vbCrLf & "If more than 100 aeroplane types are needed, please contact CERT@icao.int ", vbCritical, "CORSIA CERT") = 1 Then
                    UserForm2.Hide
                    Unload UserForm2
                    Sheet7.Activate
                    Sheet7.Range("B12").Select
                    Exit Sub
                End If
            End If
            Custom_Aircraft_Type_Needed(Custom_ac_count_needed) = Input_Aircraft_Type(i)
        End If
   End If
Next i


'remove duplicates
For i = 1 To Input_Nb_Entries
   If isInArray(Input_Airport_o_I(i), Input_Airport_o) = True Then
    
    Else
        Nb_Input_Airport_o = Nb_Input_Airport_o + 1
        Input_Airport_o(Nb_Input_Airport_o) = Input_Airport_o_I(i)
   End If

   'Status bar
   pctCompleted2_d = i / (2 * Input_Nb_Entries + Nb_Input_Airport_o + Nb_Input_Airport_d)
   pctCompl2 = Round(100 * pctCompleted2_d, 0)
   If (pctCompl_display2 <> pctCompl2) Then
        pctCompl_display2 = pctCompl2
        progress_import2 (pctCompl_display2)
   End If
   
Next i


For i = 1 To Input_Nb_Entries
   If isInArray(Input_Airport_d_I(i), Input_Airport_d) = True Then
    
    Else
        Nb_Input_Airport_d = Nb_Input_Airport_d + 1
        Input_Airport_d(Nb_Input_Airport_d) = Input_Airport_d_I(i)
   End If
   
    'Status bar
   pctCompleted2_d = (i + Input_Nb_Entries) / (2 * Input_Nb_Entries + Nb_Input_Airport_o + Nb_Input_Airport_d)
   pctCompl2 = Round(100 * pctCompleted2_d, 0)
   If (pctCompl_display2 <> pctCompl2) Then
        pctCompl_display2 = pctCompl2
        progress_import2 (pctCompl_display2)
   End If
   
Next i


'Merge set of airport available

ReDim Airport_Available(1 To Nb_ap_CERTdb + Custom_ap_count_existing)

For n = 1 To Nb_ap_CERTdb
    Airport_Available(n) = Airport_CERTdb(n)
Next n

If Custom_ap_count_existing > 0 Then
    For n = 1 To Custom_ap_count_existing
            Airport_Available(n + Nb_ap_CERTdb) = Custom_Airport_existing(n)
    Next n
End If

For i = 1 To Nb_Input_Airport_o
   
   'Status bar
   pctCompleted2_d = (i + 2 * Input_Nb_Entries) / (2 * Input_Nb_Entries + Nb_Input_Airport_o + Nb_Input_Airport_d)
   pctCompl2 = Round(100 * pctCompleted2_d, 0)
   If (pctCompl_display2 <> pctCompl2) Then
        pctCompl_display2 = pctCompl2
        progress_import2 (pctCompl_display2)
   End If
      
   If isInArray(Input_Airport_o(i), Airport_Available) = True Then
        ap_count = ap_count + 1
   Else
        If isInArray(Input_Airport_o(i), Custom_Airport_Needed) = True Then
            Else
            Custom_ap_count_needed = Custom_ap_count_needed + 1
            Custom_Airport_Needed(Custom_ap_count_needed) = Input_Airport_o(i)
        End If
   End If
Next i

For i = 1 To Nb_Input_Airport_d
   
   'Status bar
   
   pctCompleted2_d = (i + 2 * Input_Nb_Entries + Nb_Input_Airport_o) / (2 * Input_Nb_Entries + Nb_Input_Airport_o + Nb_Input_Airport_d)
   pctCompl2 = Round(100 * pctCompleted2_d, 0)
   If (pctCompl_display2 <> pctCompl2) Then
        pctCompl_display2 = pctCompl2
        progress_import2 (pctCompl_display2)
   End If
   
   If isInArray(Input_Airport_d(i), Airport_Available) = True Then
        ap_count = ap_count + 1
   Else
        If isInArray(Input_Airport_d(i), Custom_Airport_Needed) = True Then
            Else
            Custom_ap_count_needed = Custom_ap_count_needed + 1
            If (Custom_ap_count_needed > 300) Then
                If MsgBox("Stop: Maximum Number of Custom Aerodromes Exceeded" & vbCrLf & vbCrLf & "Number of required Custom Aerodromes exceeds the maximum limit of 300. " & vbCrLf & vbCrLf & "If more than 300 aerodromes are needed, please contact CERT@icao.int ", vbCritical, "CORSIA CERT") = 1 Then
                    UserForm2.Hide
                    Unload UserForm2
                    Sheet7.Activate
                    Sheet7.Range("B12").Select
                    Exit Sub
                End If
            End If
            Custom_Airport_Needed(Custom_ap_count_needed) = Input_Airport_d(i)
        End If
   End If
Next i

If (Custom_ac_count_needed > 0 Or Custom_ap_count_needed > 0) Then
    
    If MsgBox("Warning: " & vbCrLf & vbCrLf & Custom_ac_count_needed & " ICAO Aircraft Types Designator(s) and/or Custom Aeroplane Code(s) entered as input are not included in the ICAO CORSIA CERT Aeroplane database. " & vbNewLine & "In addition, " & Custom_ap_count_needed & " aerodrome(s) entered are not included in the ICAO CORSIA CERT Aerodrome database. " & vbNewLine & "For each Custom Aeroplane Type, please enter the Aeroplane Category and the Operational Maximum Take-Off Mass (in kg). For each Custom Aerodrome, please enter the Aerodrome information below.", vbExclamation, "CORSIA CERT") = 1 Then
                
        ' Enter aircraft type in list of Custom Aircraft
               
        Dim k As Double
               
        Sheet14.Activate
        
        For k = 1 To Custom_ac_count_needed
          Sheet14.Range("C" & 9 + k + Custom_ac_count_existing) = Custom_Aircraft_Type_Needed(k)
        Next k
            
        For k = 1 To Custom_ap_count_needed
          Sheet39.Range("C" & 9 + k + Custom_ap_count_existing) = Custom_Airport_Needed(k)
        Next k
                       
    End If
    
    Sheet14.Activate
Else
Sheet7.Activate

End If

UserForm2.Hide
Unload UserForm2
    
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic

Exit Sub
Handler:
If MsgBox("Error: Unable to complete assessment." & vbCrLf & vbCrLf & "Please check that required input was entered correctly." & vbCrLf & vbCrLf & "If the problem continues, please contact CERT@icao.int", vbExclamation, "CORSIA CERT") = 1 Then
End If

End Sub

Function isInArray(ByVal stringToBeFound As Variant, ByVal arr As Variant) As Boolean
For Each element In arr
    If element = stringToBeFound Then
        isInArray = True
        Exit Function
    End If
Next element
End Function


Function N_InArray(ByVal stringToBeFound As Variant, ByVal arr As Variant) As Double
ind = 0
For Each element In arr
    ind = ind + 1
    If element = stringToBeFound Then
        N_InArray = ind
        Exit Function
    End If
Next element
End Function


Sub progress_import1(pctCompl As Integer)

UserForm2.Text_Ac.Caption = pctCompl & "% Completed"
UserForm2.Bar1.Width = pctCompl1 * 2
DoEvents

End Sub

Sub progress_import2(pctCompl As Integer)

UserForm2.Text_ap.Caption = pctCompl & "% Completed"
UserForm2.Bar2.Width = pctCompl * 2
DoEvents

End Sub

Attribute VB_Name = "A_b_CO2_Estimation"
Option Explicit

Public sngStartTime As Single
Public sngTotalTime As Single
Public ind_ap1 As Double
Public ind_ap2 As Double
Public ind As Double
Public ac As Double
Public pctCompl As Single
Public pctCompl_display As Single
Public Nb_Flight_Entries_Computed As Double
Public Index_Computed_Fuel_Flight_Entry_Code As Double
Public Warning_whole_number As Boolean
Public N_flight_entries As Double
Public Custom_AC_Input_Data_Missing As Boolean
Public Custom_AP_Input_Data_Missing As Boolean
Public Flight_Entries_Input_Data_Missing As Boolean

Public Nb_Flight_Entries_StartRow As Double
Public Nb_Flight_Entries As Double


Sub auto_populate_numflights(xx1 As Double, num_flight_range As Range, Nb_Flight_Entries As Double)
    
    If MsgBox("Warning: " & vbCrLf & vbCrLf & xx1 & " record(s) do(es) not have data for Number of Flights. Would you like to set it to 1 ? Otherwise, enter appropriate number of flights for each entry.", vbYesNo, "Confirm") = vbYes Then
    
    ' Auto populate number of flights to 1
    
        Dim ii1 As Double
        
        For ii1 = 1 To Nb_Flight_Entries
            
            If num_flight_range(ii1) = "" Then
                num_flight_range(ii1) = 1
            End If
            
        Next ii1
    
    End If

End Sub

Sub Compute_CO2_Emissions()

On Error GoTo Handler:

' Conversion factors
Dim fueltoco2 As Double
Dim kgtoton As Double
fueltoco2 = 3.16
kgtoton = 1000
pctCompl_display = 0
Nb_Flight_Entries_Computed = 0

' Variables
Dim Aircrafttype_1() As String
Dim Slope_1() As Double
Dim Intercept_1() As Double
Dim Breakpoint_1() As Double
Dim Intercept_2() As Double
Dim Slope_2() As Double
Dim Breakpoint_2() As Double
Dim Intercept_3() As Double
Dim Slope_3() As Double
Dim Nb_Segments_GCD() As Double
Dim Custom_ac_count_existing As Integer
Dim Custom_ap_count_existing As Integer
Dim n As Double

Dim i As Double
Dim k As Double
Dim StartRow As Double
Dim NumRows As Double
Dim StartRow1 As Double
Dim NumRows1 As Double
Dim StartRow2 As Double

Dim Nb_Aircraft_Type_CERTdb As Double
Dim Nb_Airport_CERTdb As Double

Dim StartRow4 As Double
Dim NumRows4 As Double
Dim Slope_flight As Variant
Dim Intercept_flight As Variant
Dim Nb_Segments_GCD_v As Variant
Dim Breakpoint_1_v As Variant
Dim Breakpoint_2_v As Variant

Dim lat1 As Double
Dim lon1 As Double
Dim lat2 As Double
Dim lon2 As Double
Dim dellat As Double
Dim dellon As Double
Dim gcd As Double
Dim a As Double
Dim C As Double
Dim r As Double
Dim index1 As Double
Dim index2 As Double

Dim Array_emissions() As Variant
Dim Array_scope() As Variant
Dim Array_gcd() As Variant

Dim Airport_ICAO_code() As String
Dim Airport_lat() As Double
Dim Airport_lon() As Double
Dim Airport_ICAO_Member_State() As String

Dim States_countrycode As Range
Dim States_countryname As Range
Dim ICAO_Member_State_Apt1 As Variant
Dim ICAO_Member_State_Apt2 As Variant
Dim State_pair_scope() As Variant

Dim Input_Aircraft_Type As Range
Dim Input_Airport_Origin As Range
Dim Input_Airport_Dest As Range
Dim Input_Nb_Flight As Range

Dim od_fuel_burn() As Variant
Dim total_co2_international As Double
Dim Nb_Flight_Entries_Calculated As Double

Dim Computed_Fuel_Flight_Entry_Code() As String
Dim Computed_Fuel_Flight_Entry_GCD() As Double
Dim Computed_Fuel_Flight_Entry_Emissions() As Double
Dim Computed_Fuel_Flight_Entry_Scope() As String

Custom_ac_count_existing = 0
Custom_ap_count_existing = 0

' Read States Information
StartRow4 = 1
NumRows4 = Sheet6.Range("B" & StartRow4, Sheet6.Range("B" & StartRow4).End(xlDown)).Rows.Count


' Read CEM Information
StartRow = 2
Nb_Aircraft_Type_CERTdb = Sheet2.Range("B" & StartRow, Sheet2.Range("B" & StartRow).End(xlDown)).Rows.Count

StartRow1 = 9
If Sheet14.Range("C10") <> 0 Then
    Custom_ac_count_existing = Sheet14.Range("C" & StartRow1, Sheet14.Range("C" & StartRow1).End(xlDown)).Rows.Count - 1

    'Check input in Custom AC_AP for missing input on Aircraft input data
    
    Custom_AC_Input_Data_Missing = False
    
    
    For n = 1 To Custom_ac_count_existing
    
        If (IsEmpty(Sheet14.Cells(n + 9, 5)) = True Or IsEmpty(Sheet14.Cells(n + 9, 10)) = True) Then
           Custom_AC_Input_Data_Missing = True
        End If
    
    Next n
    
    If Custom_AC_Input_Data_Missing = True Then
        If MsgBox("Stop: Failed Calculation of CO2 Emissions " & vbCrLf & vbCrLf & "Ensure that all required Custom Aeroplane input data is entered correctly for all Custom Aeroplane Type", vbCritical, "CORSIA CERT") = 1 Then
            UserForm1.Hide
            Sheet14.Activate
            Sheet14.Range("C10").Select
            Application.EnableEvents = True
            Application.Calculation = xlCalculationAutomatic
            Exit Sub
        End If
    End If

    'Check input in Custom AC for duplicate input on Aircraft input data
    ER_Custom_AC_Input_Data_Duplicate = False
    
    For n = 1 To Custom_ac_count_existing
        For i = 1 To Custom_ac_count_existing
            If (n <> i And Sheet14.Cells(n + 9, 3) = Sheet14.Cells(i + 9, 3)) Then
               ER_Custom_AC_Input_Data_Duplicate = True
            End If
        Next i
    Next n
    
    If ER_Custom_AC_Input_Data_Duplicate = True Then
        If MsgBox("Stop: Failed Calculation of CO2 Emissions " & vbCrLf & vbCrLf & "Ensure that Custom Aeroplanes are not duplicated", vbCritical, "CORSIA CERT") = 1 Then
        UserForm6.Hide
            Sheet14.Activate
            Sheet14.Range("C10").Select
            Application.EnableEvents = True
            Application.Calculation = xlCalculationAutomatic
        Exit Sub
        
        End If
    End If

End If

ReDim Aircrafttype_1(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Intercept_1(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Slope_1(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Breakpoint_1(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Intercept_2(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Slope_2(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Breakpoint_2(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Intercept_3(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Slope_3(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Nb_Segments_GCD(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
    
    
For n = 1 To Nb_Aircraft_Type_CERTdb
    Aircrafttype_1(n) = Sheet2.Cells(n + 1, 1)
    Intercept_1(n) = Sheet2.Cells(n + 1, 2)
    Slope_1(n) = Sheet2.Cells(n + 1, 3)
    Breakpoint_1(n) = Sheet2.Cells(n + 1, 4)
    Intercept_2(n) = Sheet2.Cells(n + 1, 5)
    Slope_2(n) = Sheet2.Cells(n + 1, 6)
    Breakpoint_2(n) = Sheet2.Cells(n + 1, 7)
    Intercept_3(n) = Sheet2.Cells(n + 1, 8)
    Slope_3(n) = Sheet2.Cells(n + 1, 9)
    Nb_Segments_GCD(n) = Sheet2.Cells(n + 1, 10)
Next n

If Custom_ac_count_existing > 0 Then
    For n = 1 To Custom_ac_count_existing
        Aircrafttype_1(n + Nb_Aircraft_Type_CERTdb) = Sheet14.Cells(n + 9, 3)
        Intercept_1(n + Nb_Aircraft_Type_CERTdb) = Sheet14.Cells(n + 9, 12)
        Slope_1(n + Nb_Aircraft_Type_CERTdb) = Sheet14.Cells(n + 9, 13)
        Nb_Segments_GCD(n + Nb_Aircraft_Type_CERTdb) = 1
    Next n
End If


' Read airport information
StartRow2 = 2
Nb_Airport_CERTdb = Sheet42.Range("B" & StartRow2, Sheet42.Range("B" & StartRow2).End(xlDown)).Rows.Count

StartRow1 = 9
If Sheet39.Range("C10") <> 0 Then
    Custom_ap_count_existing = Sheet39.Range("C" & StartRow1, Sheet39.Range("C" & StartRow1).End(xlDown)).Rows.Count - 1

    'Check input in Custom AC_AP for missing input on Airport input data
    
    Custom_AP_Input_Data_Missing = False
    
    For n = 1 To Custom_ap_count_existing
    
        If (IsEmpty(Sheet39.Cells(n + 9, 9)) = True Or IsEmpty(Sheet39.Cells(n + 9, 10)) = True Or IsEmpty(Sheet39.Cells(n + 9, 11)) = True) Then
           Custom_AP_Input_Data_Missing = True
        End If
    
        If Custom_AP_Input_Data_Missing = True Then
            If MsgBox("Stop: Failed Calculation of CO2 Emissions " & vbCrLf & vbCrLf & "Ensure that all required Custom Airport input data is entered correctly for all Custom Airports", vbCritical, "CORSIA CERT") = 1 Then
            UserForm1.Hide
            Sheet39.Activate
            Sheet39.Range("C10").Select
            Application.EnableEvents = True
            Application.Calculation = xlCalculationAutomatic
            Exit Sub
            End If
        End If
        
    Next n

    'Check input in Custom AP for duplicate input on Airport input data
    ER_Custom_AP_Input_Data_Duplicate = False
    
    For n = 1 To Custom_ap_count_existing
        For i = 1 To Custom_ap_count_existing
            If (n <> i And Sheet39.Cells(n + 9, 3) = Sheet39.Cells(i + 9, 3)) Then
               ER_Custom_AP_Input_Data_Duplicate = True
            End If
        Next i
    Next n
    
    If ER_Custom_AP_Input_Data_Duplicate = True Then
        If MsgBox("Stop: Failed Calculation of CO2 Emissions" & vbCrLf & vbCrLf & "Ensure that Custom Aerodromes are not duplicated", vbCritical, "CORSIA CERT") = 1 Then
        UserForm6.Hide
        Sheet39.Activate
        Sheet39.Range("C10").Select
        Application.EnableEvents = True
        Application.Calculation = xlCalculationAutomatic
        Exit Sub
        
        End If
    End If

End If


ReDim Airport_ICAO_code(1 To Nb_Airport_CERTdb + Custom_ap_count_existing)
ReDim Airport_lat(1 To Nb_Airport_CERTdb + Custom_ap_count_existing)
ReDim Airport_lon(1 To Nb_Airport_CERTdb + Custom_ap_count_existing)
ReDim Airport_ICAO_Member_State(1 To Nb_Airport_CERTdb + Custom_ap_count_existing)

If Custom_ap_count_existing > 0 Then
    For n = 1 To Custom_ap_count_existing
        Airport_ICAO_code(n) = Sheet39.Cells(n + 9, 3)

        If (InStr(Sheet39.Cells(n + 9, 9), Right(Sheet5.Range("C41").Value, 1))) Then
            Temp_Lat = Replace(Sheet39.Cells(n + 9, 9), Right(Sheet5.Range("C41").Value, 1), "|fffd|")
            Temp_Lat = Replace(Temp_Lat, Right(Sheet5.Range("C42").Value, 1), "'")
            Temp_Lat = Replace(Temp_Lat, Right(Sheet5.Range("C43").Value, 1), """")
            Temp_Lat = Replace(Temp_Lat, Right(Sheet5.Range("C45").Value, 1), "N")
            Temp_Lat = Replace(Temp_Lat, Right(Sheet5.Range("C46").Value, 1), "S")
            Temp_Lat = Replace(Temp_Lat, Right(Sheet5.Range("C47").Value, 1), "E")
            Temp_Lat = Replace(Temp_Lat, Right(Sheet5.Range("C48").Value, 1), "W")
        End If
                
        If (InStr(Sheet39.Cells(n + 9, 9), Sheet5.Range("C44").Value)) Then
            Temp_Lat = Replace(Sheet39.Cells(n + 9, 9), Sheet5.Range("C44").Value, ".")
        End If
        
        If IsNumeric(Sheet39.Cells(n + 9, 9)) = True Then
            Temp_Lat = Sheet39.Cells(n + 9, 9)
        End If
        
        If InStr(Temp_Lat, "|fffd|") > 0 Then
            Airport_lat(n) = SignIt(Temp_Lat)
        Else
            Airport_lat(n) = Temp_Lat
        End If

        If (InStr(Sheet39.Cells(n + 9, 10), Right(Sheet5.Range("C41").Value, 1))) Then
            Temp_Long = Replace(Sheet39.Cells(n + 9, 10), Right(Sheet5.Range("C41").Value, 1), "|fffd|")
            Temp_Long = Replace(Temp_Long, Right(Sheet5.Range("C42").Value, 1), "'")
            Temp_Long = Replace(Temp_Long, Right(Sheet5.Range("C43").Value, 1), """")
            Temp_Long = Replace(Temp_Long, Right(Sheet5.Range("C45").Value, 1), "N")
            Temp_Long = Replace(Temp_Long, Right(Sheet5.Range("C46").Value, 1), "S")
            Temp_Long = Replace(Temp_Long, Right(Sheet5.Range("C47").Value, 1), "E")
            Temp_Long = Replace(Temp_Long, Right(Sheet5.Range("C48").Value, 1), "W")
        End If
                
        If (InStr(Sheet39.Cells(n + 9, 10), Sheet5.Range("C44").Value)) Then
            Temp_Lat = Replace(Sheet39.Cells(n + 9, 10), Sheet5.Range("C44").Value, ".")
        End If
        
        If IsNumeric(Sheet39.Cells(n + 9, 10)) = True Then
            Temp_Long = Sheet39.Cells(n + 9, 10)
        End If
                
        If InStr(Temp_Long, "|fffd|") > 0 Then
            Airport_lon(n) = SignIt(Temp_Long)
        Else
            Airport_lon(n) = Temp_Long
        End If
        
        Airport_ICAO_Member_State(n) = Sheet39.Cells(n + 9, 11)
    Next n
End If

For n = 1 To Nb_Airport_CERTdb
    Airport_ICAO_code(n + Custom_ap_count_existing) = Sheet42.Cells(n + 1, 1)
    Airport_lat(n + Custom_ap_count_existing) = Sheet42.Cells(n + 1, 3)
    Airport_lon(n + Custom_ap_count_existing) = Sheet42.Cells(n + 1, 4)
    Airport_ICAO_Member_State(n + Custom_ap_count_existing) = Sheet42.Cells(n + 1, 6)
Next n



'Check input in Flight Entries for missing input data

Flight_Entries_Input_Data_Missing = False

For n = 1 To Nb_Flight_Entries
    If (IsEmpty(Sheet7.Cells(n + 11, 5)) = True Or IsEmpty(Sheet7.Cells(n + 11, 6)) = True Or IsEmpty(Sheet7.Cells(n + 11, 7)) = True) Then
       Flight_Entries_Input_Data_Missing = True
    End If

    If Flight_Entries_Input_Data_Missing = True Then
        If MsgBox("Stop: Failed Calculation of CO2 Emissions " & vbCrLf & vbCrLf & "Ensure that all required flight(s) input data is entered correctly", vbCritical, "CORSIA CERT") = 1 Then
        UserForm1.Hide
        Application.EnableEvents = True
        Application.Calculation = xlCalculationAutomatic
        Exit Sub
        End If
    End If
Next n

Set Input_Aircraft_Type = Sheet7.Range("D12", "D" & Nb_Flight_Entries + Nb_Flight_Entries_StartRow)
Set Input_Airport_Origin = Sheet7.Range("E12", "E" & Nb_Flight_Entries + Nb_Flight_Entries_StartRow)
Set Input_Airport_Dest = Sheet7.Range("F12", "F" & Nb_Flight_Entries + Nb_Flight_Entries_StartRow)
Set Input_Nb_Flight = Sheet7.Range("G12", "G" & Nb_Flight_Entries + Nb_Flight_Entries_StartRow)

' Initialize variable to store total co2
total_co2_international = 0

ReDim State_pair_scope(Nb_Flight_Entries_StartRow + 1 To Nb_Flight_Entries + Nb_Flight_Entries_StartRow)
ReDim od_fuel_burn(Nb_Flight_Entries_StartRow + 1 To Nb_Flight_Entries + Nb_Flight_Entries_StartRow)

Nb_Flight_Entries_Calculated = Sheet7.Range("I" & Nb_Flight_Entries_StartRow, Sheet7.Range("I" & Nb_Flight_Entries_StartRow).End(xlDown)).Rows.Count - 1
Sheet7.Range("H" & Nb_Flight_Entries_StartRow + 1 & ":J" & Nb_Flight_Entries_StartRow + Nb_Flight_Entries_Calculated).ClearContents

' Check if the first row has data
If Input_Aircraft_Type(1) <> "" Then

    ReDim Array_gcd(1 To Nb_Flight_Entries)
    ReDim Array_emissions(1 To Nb_Flight_Entries)
    ReDim Array_scope(1 To Nb_Flight_Entries)
    
    ReDim Computed_Fuel_Flight_Entry_Code(1 To Nb_Flight_Entries)
    ReDim Computed_Fuel_Flight_Entry_GCD(1 To Nb_Flight_Entries)
    ReDim Computed_Fuel_Flight_Entry_Emissions(1 To Nb_Flight_Entries)
    ReDim Computed_Fuel_Flight_Entry_Scope(1 To Nb_Flight_Entries)
    
    For k = 1 To Nb_Flight_Entries
        
        Index_Computed_Fuel_Flight_Entry_Code = 0
        'Status bar
            pctCompl = Round(100 * k / Nb_Flight_Entries, 0)
            If (pctCompl_display <> pctCompl) Then
                pctCompl_display = pctCompl
                progress (pctCompl_display)
            End If
    Index_Computed_Fuel_Flight_Entry_Code = N_InArray(Input_Aircraft_Type(k) & "-" & Input_Airport_Origin(k) & "-" & Input_Airport_Dest(k) & "-" & Input_Nb_Flight(k).Value, Computed_Fuel_Flight_Entry_Code)
    If (Index_Computed_Fuel_Flight_Entry_Code > 0) Then
        
        Array_gcd(k) = Computed_Fuel_Flight_Entry_GCD(Index_Computed_Fuel_Flight_Entry_Code)
        Array_emissions(k) = Computed_Fuel_Flight_Entry_Emissions(Index_Computed_Fuel_Flight_Entry_Code)
        Array_scope(k) = Computed_Fuel_Flight_Entry_Scope(Index_Computed_Fuel_Flight_Entry_Code)
        
    Else
        
        lat1 = 0
        lon1 = 0
        lat2 = 0
        lon2 = 0
        ICAO_Member_State_Apt1 = "NA"
        ICAO_Member_State_Apt2 = "NA"
        Array_gcd(k) = "NA"
        Array_emissions(k) = "NA"
        Array_scope(k) = "NA"
        
        ' Process origin airport
                ind_ap1 = N_InArray(Input_Airport_Origin(k), Airport_ICAO_code)
                lat1 = Airport_lat(ind_ap1)
                lon1 = Airport_lon(ind_ap1)
                ICAO_Member_State_Apt1 = Airport_ICAO_Member_State(ind_ap1)
            
        ' Process destination airport
                ind_ap2 = N_InArray(Input_Airport_Dest(k), Airport_ICAO_code)
                lat2 = Airport_lat(ind_ap2)
                lon2 = Airport_lon(ind_ap2)
                ICAO_Member_State_Apt2 = Airport_ICAO_Member_State(ind_ap2)
        
        ' Compute great circle distance
        If ICAO_Member_State_Apt1 <> "NA" And ICAO_Member_State_Apt2 <> "NA" Then
        
        ' Great Circle Distance - Vincenty Method
        gcd = distVincenty(lat1, lon1, lat2, lon2) / 1000
        
        ' Compute CO2 Emissions
        
        ac = N_InArray(Input_Aircraft_Type(k), Aircrafttype_1)
        
        Nb_Segments_GCD_v = Nb_Segments_GCD(ac)
        
            If Nb_Segments_GCD_v = 1 Then
                Slope_flight = Slope_1(ac)
                Intercept_flight = Intercept_1(ac)
            Else
            
                Breakpoint_1_v = Breakpoint_1(ac)
             
                If Nb_Segments_GCD_v = 2 Then
            
                    If (gcd <= Breakpoint_1_v) Then
                        Slope_flight = Slope_1(ac)
                        Intercept_flight = Intercept_1(ac)
                    Else
                        Slope_flight = Slope_2(ac)
                        Intercept_flight = Intercept_2(ac)
                    End If
            
                Else
            
                    If (gcd <= Breakpoint_1_v) Then
                        Slope_flight = Slope_1(ac)
                        Intercept_flight = Intercept_1(ac)
                    Else
                
                        Breakpoint_2_v = Breakpoint_2(ac)
                      
                        If (Breakpoint_1_v < gcd And gcd <= Breakpoint_2_v) Then
                            Slope_flight = Slope_2(ac)
                            Intercept_flight = Intercept_2(ac)
                        Else
                            Slope_flight = Slope_3(ac)
                            Intercept_flight = Intercept_3(ac)
                        End If
                    End If
                End If
            End If
        
        Array_gcd(k) = Round(gcd, 0)
        Array_emissions(k) = (((gcd * Slope_flight + Intercept_flight) * Input_Nb_Flight(k).Value * fueltoco2) / kgtoton)
        
        Nb_Flight_Entries_Computed = Nb_Flight_Entries_Computed + 1
        
        Computed_Fuel_Flight_Entry_Code(Nb_Flight_Entries_Computed) = Input_Aircraft_Type(k) & "-" & Input_Airport_Origin(k) & "-" & Input_Airport_Dest(k)
        Computed_Fuel_Flight_Entry_GCD(Nb_Flight_Entries_Computed) = Array_gcd(k)
        Computed_Fuel_Flight_Entry_Emissions(Nb_Flight_Entries_Computed) = Array_emissions(k)
             
        
        ' Determine status of routes
            If IsNumeric(Input_Nb_Flight(k).Value) Then
            
                If ICAO_Member_State_Apt1 = ICAO_Member_State_Apt2 Then
                    Array_scope(k) = "No (Domestic)"
                    Computed_Fuel_Flight_Entry_Scope(Nb_Flight_Entries_Computed) = "No (Domestic)"
                Else
                    Array_scope(k) = "Yes"
                    Computed_Fuel_Flight_Entry_Scope(Nb_Flight_Entries_Computed) = "Yes"
                End If
            Else
                Array_scope(k) = "NA"
                Computed_Fuel_Flight_Entry_Scope(Nb_Flight_Entries_Computed) = "NA"
            End If
        Else
            Array_emissions(k) = "Invalid OD pair"
            Array_scope(k) = "Invalid OD pair"
        End If
    
    End If
    
    Next k
    
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    For k = 1 To Nb_Flight_Entries
        Sheet7.Cells(11 + k, 8) = Array_gcd(k)
        Sheet7.Cells(11 + k, 9) = Array_emissions(k)
       Sheet7.Cells(11 + k, 10) = Array_scope(k)
    Next k
    
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic
    
End If

UserForm1.Hide
Unload UserForm1

Exit Sub
UserForm1.Hide
Unload UserForm1

Handler:
If MsgBox("Error: Unable to complete assessment." & vbCrLf & vbCrLf & "Please check that required input was entered correctly." & vbCrLf & vbCrLf & "If the problem continues, please contact CERT@icao.int", vbExclamation, "CORSIA CERT") = 1 Then
End If

End Sub


Sub Calculate_CO2_Emissions_Button()

ThisWorkbook.Unprotect Password:="CORSIACERT2019P"

Dim k As Double
Dim xx As Double
Dim num_flights As Range

Warning_whole_number = False

Application.ScreenUpdating = False

On Error GoTo Handler:

' Missing ac type information as input
If IsEmpty(Sheet7.Range("D12")) = True Then
    If MsgBox("Stop: Failed Calculation of CO2 Emissions " & vbCrLf & vbCrLf & "Ensure that aeroplane type information is entered correctly", vbCritical, "CORSIA CERT") = 1 Then
        UserForm1.Hide
        Exit Sub
    End If
End If


' Run Check of Missing Aircraft Types or Airports in CERT databases
If MsgBox("Would you like to compare the input aeroplane and aerodrome information against the ICAO CORSIA CERT Aeroplane database and the ICAO Doc 7910 to identify any aeroplane and/or aerodrome(s) that require any user input?", vbYesNo, "CORSIA CERT") = 6 Then
    UserForm2.Show
    
    If (Custom_ac_count_needed > 0 Or Custom_ap_count_needed > 0) Then
        
        If (Custom_ac_count_needed > 0) Then
            Sheet14.Activate
        End If
        
        If (Custom_ap_count_needed > 0) Then
            Sheet39.Activate
        End If
        
        
    Else
    
        ' Check if the Number of Flights column has been populated
                
        Nb_Flight_Entries_StartRow = 11
        If Sheet7.Range("D" & Nb_Flight_Entries_StartRow + 1) <> "" Then
            
            Nb_Flight_Entries = Sheet7.Range("D" & Nb_Flight_Entries_StartRow, Sheet7.Range("D" & Nb_Flight_Entries_StartRow).End(xlDown)).Rows.Count - 1
                                
            'Check consistency of flight entries
            If (Sheet7.Range("D" & 11, Sheet7.Range("D" & 11).End(xlDown)).Rows.Count <> Sheet7.Range("E" & 11, Sheet7.Range("E" & 11).End(xlDown)).Rows.Count) Or (Sheet7.Range("D" & 11, Sheet7.Range("D" & 11).End(xlDown)).Rows.Count <> Sheet7.Range("F" & 11, Sheet7.Range("F" & 11).End(xlDown)).Rows.Count) Then
                If MsgBox("Stop: " & vbCrLf & vbCrLf & "Ensure that flight entries (i.e., ICAO Aircraft Type Designator, Origin Aerodrome, and/or Destination Aerodrome) do not include blanks.", vbCritical, "CORSIA CERT") = 1 Then
                End If
                Exit Sub
            End If
                                
            Set num_flights = Sheet7.Range("G" & Nb_Flight_Entries_StartRow + 1, "G" & Nb_Flight_Entries_StartRow + Nb_Flight_Entries)
            xx = 0
            
            ' Identification of missing flight numbers
            For k = 1 To Nb_Flight_Entries
                If num_flights(k) = "" Then
                    xx = xx + 1
                End If
            Next k
        
            ' Convert Input to Ucase
            With Sheet7.Range("D12:F" & Nb_Flight_Entries_StartRow + Nb_Flight_Entries)
                .Value = Evaluate("INDEX(UPPER(" & .Address(External:=True) & "),)")
            End With
        
        
        End If
        
        ' Auto populate Number of flights
        If xx > 0 Then
            auto_populate_numflights xx, num_flights, Nb_Flight_Entries
        End If
        
        ' Check for non-integer flight numbers
                
        If Sheet7.Range("D" & Nb_Flight_Entries_StartRow + 1) <> "" Then
            
            For k = 1 To Nb_Flight_Entries
                If (Sheet7.Range("G" & k + 12) - Round(Sheet7.Range("G" & k + 12)) <> 0 Or (Sheet7.Range("G" & k + 12) <> "" And Sheet7.Range("G" & k + 12) < 1)) Then
                    Warning_whole_number = True
                End If
            Next k
            If (Warning_whole_number = True) Then
                If MsgBox("Stop: " & vbCrLf & vbCrLf & "Ensure that rounded flight numbers at least equal to 1 are entered (i.e., 0, negative or fraction of flights are not appropriate entries)", vbCritical, "CORSIA CERT") = 1 Then
                End If
                Exit Sub
            End If
        End If
        
        
        Sheet7.Activate
        
        ' Run computation of CO2 Emissions
        UserForm1.Show
        
    End If
    
Else
        
        ' Check if the Number of Flights column has been populated
              
        Nb_Flight_Entries_StartRow = 11
        If Sheet7.Range("D" & Nb_Flight_Entries_StartRow + 1) <> "" Then
            
            Nb_Flight_Entries = Sheet7.Range("D" & Nb_Flight_Entries_StartRow, Sheet7.Range("D" & Nb_Flight_Entries_StartRow).End(xlDown)).Rows.Count - 1
                             
            'Check consistency of flight entries
            If (Sheet7.Range("D" & 11, Sheet7.Range("D" & 11).End(xlDown)).Rows.Count <> Sheet7.Range("E" & 11, Sheet7.Range("E" & 11).End(xlDown)).Rows.Count) Or (Sheet7.Range("D" & 11, Sheet7.Range("D" & 11).End(xlDown)).Rows.Count <> Sheet7.Range("F" & 11, Sheet7.Range("F" & 11).End(xlDown)).Rows.Count) Then
                If MsgBox("Stop: " & vbCrLf & vbCrLf & "Ensure that flight entries (i.e., ICAO Aircraft Type Designator, Origin Aerodrome, and/or Destination Aerodrome) do not include blanks.", vbCritical, "CORSIA CERT") = 1 Then
                End If
                Exit Sub
            End If
                             
            Set num_flights = Sheet7.Range("G" & Nb_Flight_Entries_StartRow + 1, "G" & Nb_Flight_Entries_StartRow + Nb_Flight_Entries)
            xx = 0
            
            ' Identification of missing flight numbers
            For k = 1 To Nb_Flight_Entries
                If num_flights(k, 1) = "" Then
                    xx = xx + 1
                End If
            Next k
        
            ' Convert Input to Ucase
            With Sheet7.Range("D12:F" & Nb_Flight_Entries_StartRow + Nb_Flight_Entries)
                .Value = Evaluate("INDEX(UPPER(" & .Address(External:=True) & "),)")
            End With
        End If
        
        ' Auto populate Number of flights
        If xx > 0 Then
            auto_populate_numflights xx, num_flights, Nb_Flight_Entries
        End If
        
        ' Check for non-integer flight numbers
                
        If Sheet7.Range("D" & Nb_Flight_Entries_StartRow + 1) <> "" Then
            
            For k = 1 To Nb_Flight_Entries
                If (Sheet7.Range("G" & k + 12) - Round(Sheet7.Range("G" & k + 12)) <> 0 Or (Sheet7.Range("G" & k + 12) <> "" And Sheet7.Range("G" & k + 12) < 1)) Then
                    Warning_whole_number = True
                End If
            Next k
            If (Warning_whole_number = True) Then
                If MsgBox("Stop: " & vbCrLf & vbCrLf & "Ensure that rounded flight numbers at least equal to 1 are entered (i.e., 0, negative or fraction of flights are not appropriate entries)", vbCritical, "CORSIA CERT") = 1 Then
                End If
                Exit Sub
            End If
        End If
        
        Sheet7.Activate
        
        ' Run computation of CO2 Emissions
        UserForm1.Show
    
End If

ThisWorkbook.Protect Password:="CORSIACERT2019P"

Exit Sub
UserForm1.Hide
Handler:
If MsgBox("Error: Unable to complete assessment." & vbCrLf & vbCrLf & "Please check that required input was entered correctly." & vbCrLf & vbCrLf & "If the problem continues, please contact CERT@icao.int", vbExclamation, "CORSIA CERT") = 1 Then
End If

Application.ScreenUpdating = True

ThisWorkbook.Protect Password:="CORSIACERT2019P"

End Sub


Sub progress(pctCompl As Single)

UserForm1.Text.Caption = pctCompl & "% Completed"
UserForm1.Bar.Width = pctCompl * 2
DoEvents

End Sub

Attribute VB_Name = "A_c_Generate_Summary_Assessment"
Option Explicit

Public pctCompl_display_GSA_1 As Single
Public pctCompl_GSA_1 As Single

Sub Generate_Summary_Assessment()
    
    UserForm3.Show

End Sub


Sub Populate_report_GCDonly()

ThisWorkbook.Unprotect Password:="CORSIACERT2019P"

On Error GoTo Handler:

' Run GCD models in case the user has made any updates
Calculate_CO2_Emissions_Button

' Declare variables
Dim StartRow1, StartRow2 As Double

Dim ICAO_Member_State_Apt1 As Variant
Dim ICAO_Member_State_Apt2 As Variant

Dim State_pair_scope() As Variant
Dim StartRow, NumRows As Double

Dim total_co2_international As Double
Dim total_co2_domestic As Double
Dim k As Double
Dim j As Double
Dim n As Double

Dim Nb_Flight_Entries As Double

Dim Custom_ap_count_existing As Integer
Dim Nb_Airport_CERTdb As Integer

Dim Airport_ICAO_code() As String
Dim Airport_ICAO_Member_State() As String

Dim Input_Airport_Code_Origin() As String
Dim Input_Airport_Code_Dest() As String
Dim Input_CO2_Emissions() As Double
Dim Input_OD_Scope() As String
Dim State_Pair_CO2_Emissions(1 To 193, 1 To 193) As Double
Dim State_Pair_O_Index As Double
Dim State_Pair_D_Index As Double
Dim o As Double
Dim d As Double
Dim Nb_Unique_State_Pairs As Double

Dim ICAO_Member_State(1 To 193) As String

' Initialize Tables
For o = 1 To 193
    For d = 1 To 193
        State_Pair_CO2_Emissions(o, d) = 0
    Next d
Next o

' Read ICAO Member State
Sheet1.Activate
For o = 1 To 193
    ICAO_Member_State(o) = Sheet1.Cells(1 + o, 1)
Next o

' Read airport information
Sheet42.Activate
Nb_Airport_CERTdb = Sheet42.Range("B2", Sheet42.Range("B2").End(xlDown)).Rows.Count

Sheet39.Activate
If Sheet39.Range("C10") <> 0 Then
    Custom_ap_count_existing = Sheet39.Range("C9", Sheet39.Range("C9").End(xlDown)).Rows.Count - 1
End If

ReDim Airport_ICAO_code(1 To Nb_Airport_CERTdb + Custom_ap_count_existing)
ReDim Airport_ICAO_Member_State(1 To Nb_Airport_CERTdb + Custom_ap_count_existing)


If Custom_ap_count_existing > 0 Then
    For n = 1 To Custom_ap_count_existing
        Airport_ICAO_code(n) = Sheet39.Cells(n + 9, 3)
        For k = 1 To 193
            If (UCase(Sheet39.Cells(n + 9, 11)) = UCase(Sheet1.Cells(1 + k, 1))) Then
                Airport_ICAO_Member_State(n) = Sheet1.Cells(1 + k, 1)
            End If
        Next k
    Next n
End If

For n = 1 To Nb_Airport_CERTdb
    Airport_ICAO_code(n + Custom_ap_count_existing) = Sheet42.Cells(n + 1, 1)
    Airport_ICAO_Member_State(n + Custom_ap_count_existing) = Sheet42.Cells(n + 1, 6)
Next n


StartRow2 = 11
Sheet7.Activate
If Sheet7.Range("D12") <> "" Then
    
    Nb_Flight_Entries = Sheet7.Range("D11", Sheet7.Range("D11").End(xlDown)).Rows.Count - 1
        
    ReDim Input_Airport_Code_Origin(1 To Nb_Flight_Entries)
    ReDim Input_Airport_Code_Dest(1 To Nb_Flight_Entries)
    ReDim Input_CO2_Emissions(1 To Nb_Flight_Entries)
    ReDim Input_OD_Scope(1 To Nb_Flight_Entries)
        
    For n = 1 To Nb_Flight_Entries
        Input_Airport_Code_Origin(n) = Sheet7.Range("E" & StartRow2 + n)
        Input_Airport_Code_Dest(n) = Sheet7.Range("F" & StartRow2 + n)
        Input_CO2_Emissions(n) = Sheet7.Range("I" & StartRow2 + n)
        Input_OD_Scope(n) = Sheet7.Range("J" & StartRow2 + n)
    Next n

Else

    If MsgBox("Warning: Ensure that one or more flights are entered", vbExclamation, "CORSIA CERT") = 1 Then
    End If

End If

' Initialize variable to store total co2
total_co2_international = 0
total_co2_domestic = 0
j = 1
ReDim State_pair_scope(1 To Nb_Flight_Entries)

For k = 1 To Nb_Flight_Entries
    
    'Status bar
    pctCompl_GSA_1 = Round(100 * k / Nb_Flight_Entries, 0)
    If (pctCompl_display_GSA_1 <> pctCompl) Then
        pctCompl_display_GSA_1 = pctCompl_GSA_1
        progress_GSA_1 (pctCompl_display_GSA_1)
    End If
    
    ' Aggregated CO2 Emission by State Pair
    If Input_OD_Scope(k) = "Yes" Then
        
        total_co2_international = total_co2_international + Input_CO2_Emissions(k)
        State_Pair_O_Index = N_InArray(Airport_ICAO_Member_State(N_InArray(Input_Airport_Code_Origin(k), Airport_ICAO_code)), ICAO_Member_State)
        State_Pair_D_Index = N_InArray(Airport_ICAO_Member_State(N_InArray(Input_Airport_Code_Dest(k), Airport_ICAO_code)), ICAO_Member_State)
        State_Pair_CO2_Emissions(State_Pair_O_Index, State_Pair_D_Index) = State_Pair_CO2_Emissions(State_Pair_O_Index, State_Pair_D_Index) + Input_CO2_Emissions(k)
    
    ElseIf IsNumeric(Input_CO2_Emissions(k)) And Input_OD_Scope(k) = "No (Domestic)" Then
        total_co2_domestic = total_co2_domestic + Input_CO2_Emissions(k)
    End If
Next k

' Clear report contents
StartRow = 57
Sheet12.Activate
Range("I38").MergeArea.ClearContents
Range("I42").MergeArea.ClearContents
If Sheet12.Range("C" & StartRow + 1) <> "" Then
    NumRows = Sheet12.Range("C" & StartRow, Sheet12.Range("C" & StartRow).End(xlDown)).Rows.Count
    Range("C" & StartRow + 1 & ":P" & StartRow + NumRows).ClearContents
End If

' Populate total in the final report
Sheet12.Range("I38") = total_co2_international
Sheet12.Range("I42") = total_co2_domestic


Nb_Unique_State_Pairs = 0

Application.EnableEvents = False
Application.Calculation = xlCalculationManual
    
For o = 1 To 193
    For d = 1 To 193
        If (State_Pair_CO2_Emissions(o, d) > 0) Then
            Nb_Unique_State_Pairs = Nb_Unique_State_Pairs + 1
            Sheet12.Range("C" & 57 + Nb_Unique_State_Pairs) = ICAO_Member_State(o)
            Sheet12.Range("G" & 57 + Nb_Unique_State_Pairs) = ICAO_Member_State(d)
            Sheet12.Range("K" & 57 + Nb_Unique_State_Pairs) = "Yes"
            Sheet12.Range("N" & 57 + Nb_Unique_State_Pairs) = State_Pair_CO2_Emissions(o, d)
        End If
    Next d
Next o
   
ThisWorkbook.Protect Password:="CORSIACERT2019P"
   
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic

UserForm3.Hide
Unload UserForm3

ThisWorkbook.Protect Password:="CORSIACERT2019P"

Sheet12.Activate

Exit Sub
Handler:
If MsgBox("Error: Unable to complete assessment." & vbCrLf & vbCrLf & "Please check that required input was entered correctly." & vbCrLf & vbCrLf & "If the problem continues, please contact CERT@icao.int", vbExclamation, "CORSIA CERT") = 1 Then
End If

Calculate

ThisWorkbook.Protect Password:="CORSIACERT2019P"

End Sub

Sub progress_GSA_1(pctCompl As Single)

UserForm3.Text_GSA_1.Caption = pctCompl & "% Completed"
UserForm3.Bar_GSA_1.Width = pctCompl * 2
DoEvents

End Sub
Attribute VB_Name = "A_d_Generate_pdf"
Option Explicit


Sub Generate_pdf_button()
    
    UserForm4.Show

End Sub

Sub Generate_pdf()

ThisWorkbook.Unprotect Password:="CORSIACERT2019P"

On Error GoTo Handler:

    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    Application.ScreenUpdating = False
    
 'Status bar
    progress_GPDF (0)
    
' Clear the temp sheet
Sheet13.Activate
Sheet13.Range("B3:P100000").ClearContents

' Copy the output
Sheet12.Activate

'Print it to new sheet and generate PDF

Dim r1, r2, r_int1, r3, r4, r_int2 As Range
Dim NumRows, StartRow As Double

Dim Custom_ac_count_existing As Integer
Dim Custom_ap_count_existing As Integer


If Sheet12.Range("C58") <> 0 Then
    StartRow = 57
    NumRows = Sheet12.Range("C" & StartRow, Sheet12.Range("C" & StartRow).End(xlDown)).Rows.Count
    Set r2 = Sheet12.Range("B8:P" & 57 + NumRows + 1)
    r2.Copy
Else
    If MsgBox("Stop: " & vbCrLf & vbCrLf & "Ensure that the Summary Assessment contains some international flight activities.", vbCritical, "CORSIA CERT") = 1 Then
    End If
    UserForm4.Hide
    Unload UserForm4
    Exit Sub
End If

progress_GPDF (25)


Sheet13.Activate
ActiveSheet.Range("B3").Select
ActiveSheet.Paste
With ActiveSheet.PageSetup
 .Orientation = xlPortrait
 .Zoom = False
 .FitToPagesWide = 1
 .FitToPagesTall = False
End With


Sheet13.Range("B1:P" & 53 + NumRows).Select

Sheet13.Visible = xlSheetVisible
Selection.ExportAsFixedFormat Type:=xlTypePDF, Filename:="CORSIA_Summary_Assessment" & Format(Now(), "dd.mm.yy hh.mm") & ".pdf", Quality:=xlQualityStandard, IncludeDocProperties:=True, IgnorePrintAreas:=True, OpenAfterPublish:=True
Sheet13.Visible = xlSheetHidden


progress_GPDF (50)

Sheet14.Activate
If Sheet14.Range("C10") <> 0 Then
    Custom_ac_count_existing = Sheet14.Range("C" & 9, Sheet14.Range("C" & 9).End(xlDown)).Rows.Count - 1
    Set r3 = Sheet14.Range("B6:P" & 10 + Custom_ac_count_existing)
Else
    Set r3 = Sheet14.Range("B6:P" & 10)
End If

If Sheet39.Range("C10") <> 0 Then
    Custom_ap_count_existing = Sheet39.Range("C" & 9, Sheet39.Range("C" & 9).End(xlDown)).Rows.Count - 1
    Set r4 = Sheet39.Range("B7:P" & 10 + Custom_ap_count_existing)
Else
    Set r4 = Sheet39.Range("B7:P" & 10)
End If

progress_GPDF (75)

If (Custom_ap_count_existing > 0 Or Custom_ac_count_existing > 0) Then
    
    r3.Copy
    Sheet17.Activate
    ActiveSheet.Range("B4").Select
    ActiveSheet.Paste
    
    r4.Copy
    Sheet17.Activate
    ActiveSheet.Range("B" & 10 + Custom_ac_count_existing).Select
    ActiveSheet.Paste
    With ActiveSheet.PageSetup
     .Orientation = xlPortrait
     .Zoom = False
     .FitToPagesWide = 1
     .FitToPagesTall = False
     End With
    
    
    Sheet17.Range("B1:P" & 20 + Custom_ap_count_existing + Custom_ac_count_existing).Select
    
    Sheet17.Visible = xlSheetVisible
    Selection.ExportAsFixedFormat Type:=xlTypePDF, Filename:="CORSIA_Summary_A_App" & Format(Now(), "dd.mm.yy hh.mm") & ".pdf", Quality:=xlQualityStandard, IncludeDocProperties:=True, IgnorePrintAreas:=True, OpenAfterPublish:=True
    Sheet17.Visible = xlSheetHidden

End If

ThisWorkbook.Protect Password:="CORSIACERT2019P"

progress_GPDF (1)

UserForm4.Hide
Unload UserForm4

Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic

Exit Sub
Handler:
If MsgBox("Error: Unable to complete assessment." & vbCrLf & vbCrLf & "Please check that required input was entered correctly." & vbCrLf & vbCrLf & "If the problem continues, please contact CERT@icao.int", vbExclamation, "CORSIA CERT") = 1 Then
End If
Sheet12.Activate

UserForm4.Hide
Unload UserForm4

    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True

ThisWorkbook.Protect Password:="CORSIACERT2019P"

End Sub


Sub progress_GPDF(pctCompl As Single)

UserForm4.Text_GPDF.Caption = pctCompl & "% Completed"
UserForm4.Bar_GPDF.Width = pctCompl * 2
DoEvents

End Sub

Attribute VB_Name = "A_e_GCD_Calculation"
Option Explicit

Private Const PI = 3.14159265358979
Private Const EPSILON As Double = 0.000000000001

Public Function distVincenty(ByVal lat1 As Double, ByVal lon1 As Double, ByVal lat2 As Double, ByVal lon2 As Double) As Double

  Dim low_a As Double
  Dim low_b As Double
  Dim f As Double
  Dim L As Double
  Dim U1 As Double
  Dim U2 As Double
  Dim sinU1 As Double
  Dim sinU2 As Double
  Dim cosU1 As Double
  Dim cosU2 As Double
  Dim lambda As Double
  Dim lambdaP As Double
  Dim iterLimit As Integer
  Dim sinLambda As Double
  Dim cosLambda As Double
  Dim sinSigma As Double
  Dim cosSigma As Double
  Dim sigma As Double
  Dim sinAlpha As Double
  Dim cosSqAlpha As Double
  Dim cos2SigmaM As Double
  Dim C As Double
  Dim uSq As Double
  Dim upper_A As Double
  Dim upper_B As Double
  Dim deltaSigma As Double
  Dim s As Double

  Dim P1 As Double
  Dim P2 As Double
  Dim P3 As Double


  low_a = 6378137
  low_b = 6356752.3142
  f = 1 / 298.257223563

  L = toRad(lon2 - lon1)
  U1 = Atn((1 - f) * Tan(toRad(lat1)))
  U2 = Atn((1 - f) * Tan(toRad(lat2)))
  sinU1 = Sin(U1)
  cosU1 = Cos(U1)
  sinU2 = Sin(U2)
  cosU2 = Cos(U2)

  lambda = L
  lambdaP = 2 * PI
  iterLimit = 100

  While (Abs(lambda - lambdaP) > EPSILON) And (iterLimit > 0)
    iterLimit = iterLimit - 1

    sinLambda = Sin(lambda)
    cosLambda = Cos(lambda)
    sinSigma = Sqr(((cosU2 * sinLambda) ^ 2) + ((cosU1 * sinU2 - sinU1 * cosU2 * cosLambda) ^ 2))
    If sinSigma = 0 Then
      distVincenty = 0
      Exit Function
    End If
    cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda
    sigma = Atan2(cosSigma, sinSigma)
    sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma
    cosSqAlpha = 1 - sinAlpha * sinAlpha

    If cosSqAlpha = 0 Then
      cos2SigmaM = 0
    Else
      cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cosSqAlpha
    End If

    C = f / 16 * cosSqAlpha * (4 + f * (4 - 3 * cosSqAlpha))
    lambdaP = lambda
  
    P1 = -1 + 2 * (cos2SigmaM ^ 2)
    P2 = (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * P1))

    lambda = L + (1 - C) * f * sinAlpha * P2

  Wend

  If iterLimit < 1 Then
    MsgBox "iteration limit has been reached, something didn't work."
    Exit Function
  End If

  uSq = cosSqAlpha * (low_a ^ 2 - low_b ^ 2) / (low_b ^ 2)

 
  P1 = (4096 + uSq * (-768 + uSq * (320 - 175 * uSq)))
  upper_A = 1 + uSq / 16384 * P1

  upper_B = uSq / 1024 * (256 + uSq * (-128 + uSq * (74 - 47 * uSq)))

  P1 = (-3 + 4 * sinSigma ^ 2) * (-3 + 4 * cos2SigmaM ^ 2)
  P2 = upper_B * sinSigma
  P3 = (cos2SigmaM + upper_B / 4 * (cosSigma * (-1 + 2 * cos2SigmaM ^ 2) - upper_B / 6 * cos2SigmaM * P1))
  deltaSigma = P2 * P3
  s = low_b * upper_A * (sigma - deltaSigma)
  distVincenty = Round(s, 3)

End Function

Function SignIt(Degree_Dec As String) As Double

  Dim decimalValue As Double
  Dim tempString As String
  tempString = UCase(Trim(Degree_Dec))
  decimalValue = Convert_Decimal(tempString)
  If Right(tempString, 1) = "S" Or Right(tempString, 1) = "W" Then
    decimalValue = decimalValue * -1
  End If
  SignIt = decimalValue
End Function

Function Convert_Degree(Decimal_Deg) As Variant

  Dim degrees As Variant
  Dim minutes As Variant
  Dim seconds As Variant
  With Application

     degrees = Int(Decimal_Deg)
    
     minutes = (Decimal_Deg - degrees) * 60
  
     seconds = Format(((minutes - Int(minutes)) * 60), "0")
    
     Convert_Degree = " " & degrees & "|fffd| " & Int(minutes) & "' " _
         & seconds + Chr(34)
  End With
End Function

Function Convert_Decimal(Degree_Deg As String) As Double

   Dim degrees As Double
   Dim minutes As Double
   Dim seconds As Double
   
   Degree_Deg = Replace(Degree_Deg, "~", "|fffd|")


   degrees = Val(Left(Degree_Deg, InStr(1, Degree_Deg, "|fffd|") - 1))
  
   minutes = Val(Mid(Degree_Deg, InStr(1, Degree_Deg, "|fffd|") + 2, _
             InStr(1, Degree_Deg, "'") - InStr(1, Degree_Deg, "|fffd|") - 2)) / 60
 
   seconds = Val(Mid(Degree_Deg, InStr(1, Degree_Deg, "'") + _
           2, Len(Degree_Deg) - InStr(1, Degree_Deg, "'") - 2)) / 3600
   Convert_Decimal = degrees + minutes + seconds
End Function

Private Function toRad(ByVal degrees As Double) As Double
    toRad = degrees * (PI / 180)
End Function

Private Function Atan2(ByVal X As Double, ByVal Y As Double) As Double
 
    If Y > 0 Then
        If X >= Y Then
            Atan2 = Atn(Y / X)
        ElseIf X <= -Y Then
            Atan2 = Atn(Y / X) + PI
        Else
        Atan2 = PI / 2 - Atn(X / Y)
    End If
        Else
            If X >= -Y Then
            Atan2 = Atn(Y / X)
        ElseIf X <= Y Then
            Atan2 = Atn(Y / X) - PI
        Else
            Atan2 = -Atn(X / Y) - PI / 2
        End If
    End If
End Function




Attribute VB_Name = "Custom_AP"
Dim i As Integer
Dim Counter As Integer
Dim Part As Integer
Dim Position As Integer


Sub open_usf_custom_coordinate()

    UserForm9.Show

End Sub


Sub move_to_aircraft()

Application.ScreenUpdating = False
'ActiveWorkbook.Unprotect ("abc")
Sheets("Custom_AC").Visible = True
ActiveSheet.Visible = False
'ActiveWorkbook.Protect ("abc")
Application.ScreenUpdating = True

End Sub


Sub move_to_airport()

Application.ScreenUpdating = False
'ActiveWorkbook.Unprotect ("abc")
Sheets("Custom_AP").Visible = True
Sheets("Custom_AP").optbtn_decimal.Value = True
Sheets("Custom_AP").optbtn_dms.Value = False
Sheets("Custom_AC").Visible = False
'ActiveWorkbook.Protect ("abc")
Application.ScreenUpdating = True

End Sub


Sub move_to_CO2_Estimation()

Application.ScreenUpdating = False
'ActiveWorkbook.Unprotect ("abc")
Sheets("2. CO2 Estimation").Visible = True
ActiveSheet.Visible = False
'ActiveWorkbook.Protect ("abc")
Application.ScreenUpdating = True

End Sub


' E1: degree/minute/second symbols missing for lat
' E2: degree/minute/second symbols missing for lon
' E3: error_lat_degree_value
' E4: error_lat_minute_value
' E5: error_lat_second_value
' E6: error_lon_degree_value
' E7: error_lon_minute_value
' E8: error_lon_second_value
' E9: error_lat_NS
' E10: error_lat_EW
' E11: error_lat_decimal_value
' E12: error_lon_decimal_value

Sub check_dms_format()

Application.ScreenUpdating = False
'ActiveSheet.Unprotect ("def")

Sheets("Custom_AP").Range("P10:P309").Value = ""
Error_list = ""
Error_format = "No"

symbol_degree = Replace(Sheet5.Range("C41").Value, "!", "")
symbol_minute = Replace(Sheet5.Range("C42").Value, "!", "")
symbol_second = Replace(Sheet5.Range("C43").Value, "!", "")
symbol_separator = Replace(Sheet5.Range("C44").Value, "!", "")
symbol_lat_north = Replace(Sheet5.Range("C45").Value, "!", "")
symbol_lat_south = Replace(Sheet5.Range("C46").Value, "!", "")
symbol_lon_east = Replace(Sheet5.Range("C47").Value, "!", "")
symbol_lon_west = Replace(Sheet5.Range("C48").Value, "!", "")

len_degree = Len(symbol_degree)
len_minute = Len(symbol_minute)
len_second = Len(symbol_second)
len_separator = Len(symbol_separator)
len_lat_north = Len(symbol_lat_north)
len_lat_south = Len(symbol_lat_south)
len_lon_east = Len(symbol_lon_east)
len_lon_west = Len(symbol_lon_west)

order_symbol = "Not OK"

For i = 10 To 309

    If Not IsEmpty(Sheets("Custom_AP").Cells(i, 9).Value) And Not IsEmpty(Sheets("Custom_AP").Cells(i, 10).Value) Then

        ' Get value from cell for Latitude and Longitude
        Lat = Sheets("Custom_AP").Cells(i, 9).Value
        Lon = Sheets("Custom_AP").Cells(i, 10).Value
        
        ' Remove space
        Lat = Replace(Lat, " ", "")
        Lon = Replace(Lon, " ", "")
        
        ' Get position of degree, minute, second and decimal separator symbols for Lat and Lon
        Lat_D_symb_pos = InStr(1, Lat, symbol_degree)
        Lat_M_symb_pos = InStr(1, Lat, symbol_minute)
        Lat_S_symb_pos = InStr(1, Lat, symbol_second)
        Lat_DS_symb_pos = InStr(1, Lat, symbol_separator)
        Lat_North_symb_pos = InStr(1, Lat, symbol_lat_north)
        Lat_South_symb_pos = InStr(1, Lat, symbol_lat_south)
               
        Lon_D_symb_pos = InStr(1, Lon, symbol_degree)
        Lon_M_symb_pos = InStr(1, Lon, symbol_minute)
        Lon_S_symb_pos = InStr(1, Lon, symbol_second)
        Lon_DS_symb_pos = InStr(1, Lon, symbol_separator)
        Lon_East_symb_pos = InStr(1, Lon, symbol_lon_east)
        Lon_West_symb_pos = InStr(1, Lon, symbol_lon_west)
        
        
        ' Check if symbols are in correct order
        If Lat_D_symb_pos <> 0 And Lat_M_symb_pos <> 0 And Lat_S_symb_pos <> 0 And (Lat_North_symb_pos <> 0 Or Lat_South_symb_pos <> 0) Then
            If Lat_DS_symb_pos = 0 Then
                If Lat_D_symb_pos < Lat_M_symb_pos And Lat_M_symb_pos < Lat_S_symb_pos And Lat_S_symb_pos < (Lat_South_symb_pos Or Lat_North_symb_pos) Then order_symbol = "OK"
            End If
            If Lat_DS_symb_pos <> 0 Then
                If Lat_D_symb_pos < Lat_M_symb_pos And Lat_M_symb_pos < Lat_DS_symb_pos And Lat_DS_symb_pos < Lat_S_symb_pos And Lat_S_symb_pos < (Lat_South_symb_pos Or Lat_North_symb_pos) Then order_symbol = "OK"
            End If
            If order_symbol = "Not OK" Then
                Error_list = Error_list & "E17, "
                GoTo NextIteration
            End If
        End If
        
        If Lon_D_symb_pos <> 0 And Lon_M_symb_pos <> 0 And Lon_S_symb_pos <> 0 And (Lon_North_symb_pos <> 0 Or Lon_South_symb_pos <> 0) Then
            If Lon_DS_symb_pos = 0 Then
                If Lon_D_symb_pos < Lon_M_symb_pos And Lon_M_symb_pos < Lon_S_symb_pos And Lon_S_symb_pos < (Lon_South_symb_pos Or Lon_North_symb_pos) Then order_symbol = "OK"
            End If
            If Lon_DS_symb_pos <> 0 Then
                If Lon_D_symb_pos < Lon_M_symb_pos And Lon_M_symb_pos < Lon_DS_symb_pos And Lon_DS_symb_pos < Lon_S_symb_pos And Lon_S_symb_pos < (Lon_South_symb_pos Or Lon_North_symb_pos) Then order_symbol = "OK"
            End If
            If order_symbol = "Not OK" Then
                Error_list = Error_list & "E17, "
                GoTo NextIteration
            End If
        End If

        
        ' Check which format is used (i.e. decimal or DMS) based on latitude entries
        If Lat_D_symb_pos + Lat_M_symb_pos + Lat_S_symb_pos + Lat_North_symb_pos + Lat_South_symb_pos = 0 Then
            format_used = "decimal"
        Else
            format_used = "dms"
        End If
        
        
        '' Part for dms check ''
            
        If format_used = "dms" Then
        
            ' Check if all symbols are there
            If Lat_D_symb_pos = 0 Or Lat_M_symb_pos = 0 Or Lat_S_symb_pos = 0 Then Error_list = Error_list & "E1, "
            If Lon_D_symb_pos = 0 Or Lon_M_symb_pos = 0 Or Lon_S_symb_pos = 0 Then Error_list = Error_list & "E2, "
            If Error_list <> "" Then GoTo NextIteration
       

            ' Check if Degree < 90, Minutes < 60 and Seconds < 60
            If Mid(Lat, 1, Lat_D_symb_pos - 1) > 90 Then Error_list = Error_list & "E3, "
            If Mid(Lat, Lat_D_symb_pos + len_degree, Lat_M_symb_pos - Lat_D_symb_pos - len_degree) > 60 Then Error_list = Error_list & "E4, "
            If Lat_DS_symb_pos = 0 Then
                If Mid(Lat, Lat_M_symb_pos + len_minute, Lat_S_symb_pos - Lat_M_symb_pos - len_minute) > 60 Then Error_list = Error_list & "E5, " 'without decimal separator
            Else
                If Mid(Lat, Lat_M_symb_pos + len_minute, Lat_DS_symb_pos - Lat_M_symb_pos - len_minute) > 60 Then Error_list = Error_list & "E5, " 'with decimal separator
            End If
        
            If Mid(Lon, 1, Lon_D_symb_pos - 1) > 180 Then Error_list = Error_list & "E6, "
            If Mid(Lon, Lon_D_symb_pos + len_degree, Lon_M_symb_pos - Lon_D_symb_pos - len_degree) > 60 Then Error_list = Error_list & "E7, "
            If Lon_DS_symb_pos = 0 Then
                If Mid(Lon, Lon_M_symb_pos + len_minute, Lon_S_symb_pos - Lon_M_symb_pos - len_minute) > 60 Then Error_list = Error_list & "E8, " 'without decimal separator
            Else
                If Mid(Lon, Lon_M_symb_pos + len_minute, Lon_DS_symb_pos - Lon_M_symb_pos - len_minute) > 60 Then Error_list = Error_list & "E8, " 'with decimal separator
            End If
               
       
            'check if end  with N/S symbols for Lat and E/W symbols for Lon
            If Mid(Lat, Len(Lat) - len_lat_north + 1, len_lat_north) <> symbol_lat_north And Mid(Lat, Len(Lat) - len_lat_south + 1, len_lat_south) <> symbol_lat_south Then Error_list = Error_list & "E9, "
            If Mid(Lon, Len(Lon) - len_lon_east + 1, len_lon_east) <> symbol_lon_east And Mid(Lon, Len(Lon) - len_lon_west + 1, len_lon_west) <> symbol_lon_west Then Error_list = Error_list & "E10, "
       
       
            'check if decimal is used and if yes then check if only numeric values
            If Lat_DS_symb_pos <> 0 Then
                If IsNumeric(Mid(Lat, Lat_DS_symb_pos + len_separator, Lat_S_symb_pos - Lat_DS_symb_pos - len_separator)) = False Then Error_list = Error_list & "E11, "
            End If
        
            If Lon_DS_symb_pos <> 0 Then
                If IsNumeric(Mid(Lon, Lon_DS_symb_pos + len_separator, Lon_S_symb_pos - Lon_DS_symb_pos - len_separator)) = False Then Error_list = Error_list & "E12, "
            End If

    '' Part for decimal check ''
    
        Else

            ' check if only numerical values are entered (exception for decimal separator)
            If Lat_DS_symb_pos = 0 Then
                If InStr(1, Lat, Application.DecimalSeparator) <> 0 Or IsNumeric(Lat) = False Then
                    Error_list = Error_list & "E13, "
                    GoTo NextIteration
                End If
            End If

            If Lat_DS_symb_pos <> 0 Then
                If Application.DecimalSeparator <> symbol_separator And InStr(1, Lat, Application.DecimalSeparator) <> 0 Then
                    Error_list = Error_list & "E13, "
                    GoTo NextIteration
                End If
                If IsNumeric(Mid(Lat, 1, Lat_DS_symb_pos - 1)) = False Or IsNumeric(Mid(Lat, Lat_DS_symb_pos + len_separator, Len(Lat) - Lat_DS_symb_pos - len_separator + 1)) = False Then
                    Error_list = Error_list & "E13, "
                    GoTo NextIteration
                End If
            End If
            
            If Lon_DS_symb_pos = 0 Then
                If InStr(1, Lon, Application.DecimalSeparator) <> 0 Or IsNumeric(Lon) = False Then
                    Error_list = Error_list & "E14, "
                    GoTo NextIteration
                End If
            End If
            
            If Lon_DS_symb_pos <> 0 Then
                If Application.DecimalSeparator <> symbol_separator And InStr(1, Lon, Application.DecimalSeparator) <> 0 Then
                    Error_list = Error_list & "E14, "
                    GoTo NextIteration
                End If
                If IsNumeric(Mid(Lon, 1, Lon_DS_symb_pos - 1)) = False Or IsNumeric(Mid(Lon, Lon_DS_symb_pos + len_separator, Len(Lon) - Lon_DS_symb_pos - len_separator + 1)) = False Then
                    Error_list = Error_list & "E14, "
                    GoTo NextIteration
                End If
            End If
            
            ' check if values <= 90 or >= -90 for lat and <= 180 or >= -180 for lon
            If Lat_DS_symb_pos = 0 And Lat > 90 Then Error_list = Error_list & "E15, "
            If Lat_DS_symb_pos <> 0 Then
                If Mid(Lat, 1, Lat_DS_symb_pos - 1) > 90 Or (Mid(Lat, 1, Lat_DS_symb_pos - 1) = 90 And Mid(Lat, Lat_DS_symb_pos + len_separator, Len(Lat) - Lat_DS_symb_pos - len_separator + 1) > 0) Then Error_list = Error_list & "E15, "
            End If
            
            If Lat_DS_symb_pos = 0 And Lat < -90 Then Error_list = Error_list & "E15, "
            If Lat_DS_symb_pos <> 0 Then
                If Mid(Lat, 1, Lat_DS_symb_pos - 1) < -90 Or (Mid(Lat, 1, Lat_DS_symb_pos - 1) = -90 And Mid(Lat, Lat_DS_symb_pos + len_separator, Len(Lat) - Lat_DS_symb_pos - len_separator + 1) > 0) Then Error_list = Error_list & "E15, "
            End If
            
            If Lon_DS_symb_pos = 0 And Lon > 180 Then Error_list = Error_list & "E16, "
            If Lon_DS_symb_pos <> 0 Then
                If Mid(Lon, 1, Lon_DS_symb_pos - 1) > 180 Or (Mid(Lon, 1, Lon_DS_symb_pos - 1) = 180 And Mid(Lon, Lon_DS_symb_pos + len_separator, Len(Lon) - Lon_DS_symb_pos - len_separator + 1) > 0) Then Error_list = Error_list & "E16, "
            End If
            
            If Lon_DS_symb_pos = 0 And Lon < -180 Then Error_list = Error_list & "E16, "
            If Lon_DS_symb_pos <> 0 Then
                If Mid(Lon, 1, Lon_DS_symb_pos - 1) < -180 Or (Mid(Lon, 1, Lon_DS_symb_pos - 1) = -180 And Mid(Lon, Lon_DS_symb_pos + len_separator, Len(Lon) - Lon_DS_symb_pos - len_separator + 1) > 0) Then Error_list = Error_list & "E16, "
            End If

        End If
            
    End If
    
NextIteration:

    If Error_list <> "" Then
        Error_format = "Yes"
        Error_list = Mid(Error_list, 1, Len(Error_list) - 2) 'remove the extra coma and extra space at the end of the list
        Sheets("Custom_AP").Cells(i, 16).Value = Error_list
        Error_list = ""
    End If
       
Next i

'ActiveSheet.Protect ("def")
Application.ScreenUpdating = True

If Error_format = "Yes" Then
    If MsgBox("Stop: " & vbCrLf & "Please take note that some coordinates have an incorrect format. For more information, check the error code(s) displayed with the table available in the ICAO CORSIA CERT FAQ." & vbCrLf & vbCrLf & vbCrLf _
                                        & "Summary:" & vbCrLf _
                                        & "E1: Degree, Minute or Second symbols are missing for latitude" & vbCrLf _
                                        & "E2: Degree, Minute or Second symbols are missing for longitude" & vbCrLf _
                                        & "E3: Value for Degree is incorrect (latitude)" & vbCrLf _
                                        & "E4: Value for Minute is incorrect (latitude)" & vbCrLf _
                                        & "E5: Value for Second is incorrect (latitude)" & vbCrLf _
                                        & "E6: Value for Degree is incorrect (longitude)" & vbCrLf _
                                        & "E7: Value for Minute is incorrect (longitude)" & vbCrLf _
                                        & "E8: Value for Second is incorrect (longitude)" & vbCrLf _
                                        & "E9: Symbols for North and/or South are missing for latitude" & vbCrLf _
                                        & "E10: Symbols for East and/or West are missing for longitude" & vbCrLf _
                                        & "E11: Value is incorrect after the decimal separator (latitude)" & vbCrLf _
                                        & "E12: Value is incorrect after the decimal separator (longitude)" & vbCrLf _
                                        & "E13: Value is not numeric (latitude)" & vbCrLf _
                                        & "E14: Value is not numeric (longitude)" & vbCrLf _
                                        & "E15: Value is incorrect (latitude)" & vbCrLf _
                                        & "E16: Value is incorrect (longitude)" & vbCrLf _
                                        & "E17: Symbols order", vbCritical, "ICAO CORSIA CERT") = 1 Then

    End If
End If




If Error_format = "No" Then
    If MsgBox("No errors found with the format of Custom Aerodrome latitude and longitude. Please proceed to next step.", vbExclamation, "CORSIA CERT") = 1 Then
    End If
End If

End Sub






Attribute VB_Name = "ER_a_Import_AO_Data"
Option Explicit

Public ER_pctCompl1 As Integer
Public ER_pctCompl2 As Integer
Public ER_pctCompleted1_d As Double
Public ER_pctCompleted2_d As Double

Public ER_pctCompl_display1 As Integer
Public ER_pctCompl_display2 As Integer

Public ER_Custom_ac_count_needed As Double
Public ER_Custom_ap_count_needed As Double
Public ER_element As Variant

Public ER_Custom_Aircraft_Airport_Input_Needed As Boolean

Public Wrong_Type_Fuel_Input As Boolean
Public Wrong_Type_Fuel_Input_Count As Double

Sub ER_Import_AO_data()
    
    ThisWorkbook.Unprotect Password:="CORSIACERT2019P"
    
    On Error GoTo Handler:
    
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    If MsgBox("Warning: " & vbCrLf & vbCrLf & " If you continue, all previously entered data on this page will be deleted." & vbCrLf & vbCrLf & "Do you want to continue?", vbYesNo + vbQuestion, "CORSIA CERT") = 7 Then
        Application.EnableEvents = True
        Application.Calculation = xlCalculationAutomatic
        Exit Sub
    End If
    
    ' Clear cell contents
    
    ' Clear 5.2 Report
        Sheet24.Range("M16").MergeArea.ClearContents
        Sheet24.Range("M18").MergeArea.ClearContents
        
        Sheet24.Range("C55:L1000000").ClearContents
        Sheet24.Range("N55:N1000000").ClearContents
           
        Sheet24.Range("H25:N28").ClearContents

    ' Clear 5.1 report contents
        Sheet23.Range("K16").MergeArea.ClearContents
        Sheet23.Range("K18").MergeArea.ClearContents
        
        Sheet23.Range("I25:M28").ClearContents
        
        Sheet23.Range("C54:J1048576").ClearContents
        Sheet23.Range("L54:L1048576").ClearContents
    
    ' Clear 6 report contents
        Sheet25.Range("C11").MergeArea.ClearContents
        Sheet25.Range("C21").MergeArea.ClearContents
        Sheet25.Range("C25").MergeArea.ClearContents
    
    Dim NumRows_existing As Double
    Dim StartRow As Double
    
    Dim n As Double
    Dim i As Double
    
    Dim Warning_whole_number As Boolean
    
    Dim Input_Nb_Entries As Double
    
    Warning_whole_number = False
    Wrong_Type_Fuel_Input = False
    Wrong_Type_Fuel_Input_Count = 0
    
    StartRow = 11
    
    NumRows_existing = Sheet9.Range("D" & StartRow, Sheet9.Range("D" & StartRow).End(xlDown)).Rows.Count
    Sheet9.Range("B" & StartRow + 1 & ":P" & StartRow + NumRows_existing - 1).ClearContents
    Dim Ret As Variant

    Ret = Application.GetOpenFilename("Files types (*.csv), *.csv")

    If Ret <> False Then
        Sheet15.Activate
        Sheet15.UsedRange.ClearContents
        With Sheet15.QueryTables.Add(Connection:= _
        "TEXT;" & Ret, Destination:=Range("$A$1"))
        .FieldNames = False
        .TextFileParseType = xlDelimited
        .TextFileTextQualifier = xlTextQualifierDoubleQuote
        .TextFileConsecutiveDelimiter = False
        .TextFileTabDelimiter = True
        .TextFileSemicolonDelimiter = True
        .TextFileCommaDelimiter = True
        .TextFileSpaceDelimiter = False
        .TextFileColumnDataTypes = Array(1, 1, 1, 1, 1, 1)
        .TextFileTrailingMinusNumbers = True
        .Refresh BackgroundQuery:=False
        End With
    
    ' Copy data to sheet
        Dim r1 As Range
        Dim NumRows
        StartRow = 1
        
        If Sheet15.Range("C2") <> "" Then
        
            NumRows = Sheet15.Range("C" & StartRow, Sheet15.Range("C" & StartRow).End(xlDown)).Rows.Count
            For n = 1 To NumRows
                If (Sheet15.Range("F" & n + 1) - Round(Sheet15.Range("F" & n + 1)) <> 0 Or (Sheet15.Range("F" & n + 1) <> "" And Sheet15.Range("F" & n + 1) < 1)) Then
                    Warning_whole_number = True
                End If
            Next n
            
            If (Warning_whole_number = True) Then
                If MsgBox("Warning: " & vbCrLf & vbCrLf & "Ensure that rounded flight numbers at least equal to 1 are entered (i.e., 0, negative or fraction of flights are not appropriate entries)", vbExclamation, "CORSIA CERT") = 1 Then
                End If
            End If
            
            Set r1 = Sheet15.Range("A2:J" & StartRow + NumRows)
            r1.Copy
            Sheet9.Range("B12").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False

            Input_Nb_Entries = Sheet9.Range("D11", Sheet9.Range("D11").End(xlDown)).Rows.Count - 1
                       
                       
            ' Check Valid Type of Fuel input on import
            
            For n = 1 To Input_Nb_Entries
                If (Sheet9.Cells(11 + n, 10) <> "Jet-A" And Sheet9.Cells(11 + n, 10) <> "Jet-A1" And Sheet9.Cells(11 + n, 10) <> "Jet-B" And Sheet9.Cells(11 + n, 10) <> "AvGas" And Sheet9.Cells(11 + n, 10) <> "") Then
                    Wrong_Type_Fuel_Input = True
                    Wrong_Type_Fuel_Input_Count = Wrong_Type_Fuel_Input_Count + 1
                End If
            Next n
                           
            If (Wrong_Type_Fuel_Input = True) Then
                If (Wrong_Type_Fuel_Input_Count = 1) Then
                    If MsgBox("Stop: " & vbCrLf & vbCrLf & "One flight entry with actual fuel use is not assigned to an appropriate Type of Fuel." & vbCrLf & vbCrLf & "The following Types of Fuel are acceptable: Jet-A, Jet-A1, Jet-B and AvGas. Note that the Type of Fuel selected can include equivalent fuels." & vbCrLf & vbCrLf & "Please review the input file and/or correct the flight entry to an appropriate Type of Fuel in order to ensure accurate allocation of actual fuel use in the Emissions Report.", vbCritical, "CORSIA CERT") = 1 Then
                    End If
                Else
                    If MsgBox("Stop: " & vbCrLf & vbCrLf & "It appears that " & Wrong_Type_Fuel_Input_Count & " flight entries with actual fuel use are not assigned to an appropriate Type of Fuel." & vbCrLf & vbCrLf & "The following Types of Fuel are acceptable: Jet-A, Jet-A1, Jet-B and AvGas. Note that the Type of Fuel selected can include equivalent fuels." & vbCrLf & vbCrLf & "Please review the input file and/or correct the flight entries to an appropriate Type of Fuel in order to ensure accurate allocation of actual fuel use in the Emissions Report.", vbCritical, "CORSIA CERT") = 1 Then
                    End If
                End If
            End If
            
            ' Convert Input to Ucase
            
            With Sheet9.Range("D12:F" & 11 + Input_Nb_Entries)
                .Value = Evaluate("INDEX(UPPER(" & .Address(External:=True) & "),)")
            End With
            
            Sheet9.Activate
            Sheet9.Select
            
            ' Run Check of Missing Aircraft Types or Airports in CERT databases
            If MsgBox("Would you like to compare the input aeroplane and aerodrome information against the ICAO CORSIA CERT Aeroplane database and the ICAO Doc 7910 to identify any aeroplane and/or aerodrome(s) that require any user input?", vbYesNo, "CORSIA CERT") = 6 Then
                UserForm5.Show
            End If
            
        Else
            Sheet9.Activate
            Sheet9.Select
            
            If MsgBox("Warning: Ensure that one or more flight(s) are contained in the file titled 'CERT_Import_Template.csv'", vbExclamation, "CORSIA CERT") = 1 Then
            End If
            
            Sheet9.Activate
            Sheet9.Select
            
        End If

    End If

Sheet15.UsedRange.ClearContents

Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic

ThisWorkbook.Protect Password:="CORSIACERT2019P"

Exit Sub
Handler:
If MsgBox("Error: Unable to complete assessment." & vbCrLf & vbCrLf & "Please check that required input was entered correctly." & vbCrLf & vbCrLf & "If the problem continues, please contact CERT@icao.int", vbExclamation, "CORSIA CERT") = 1 Then
End If

ThisWorkbook.Protect Password:="CORSIACERT2019P"

End Sub


Sub ER_Custom_Aircraft_Airport()

On Error GoTo Handler:
 
Dim Input_Aircraft_Type() As String
Dim Aircraft_Type_CERTdb As Range
Dim Custom_Aircraft_Type_Needed As Variant
Dim Aircraft_Type_Available As Variant
Dim Custom_Aircraft_Type_existing As Range

Dim Input_Airport_o() As String
Dim Input_Airport_d() As String
Dim Airport_CERTdb As Range
Dim Custom_Airport_Type_Needed As Variant
Dim Airport_Available As Variant
Dim Custom_Airport_existing As Range

Dim StartRow1 As Double
Dim StartRow2 As Double
Dim i As Double
Dim j As Double
Dim n As Double
Dim k As Double

Dim ac_count As Double
Dim Custom_ac_count_existing As Double

Dim ap_count As Double
Dim Custom_ap_count_existing As Double

Dim Input_Nb_Entries As Double
Dim Nb_ac_CERTdb  As Double
Dim Nb_ap_CERTdb  As Double

Dim Input_Aircraft_Type_I As Range
Dim Input_Airport_o_I As Range
Dim Input_Airport_d_I As Range

Dim unique_count As Double

Dim Nb_Input_Aircraft_Type As Double
Dim Nb_Input_Airport_o As Double
Dim Nb_Input_Airport_d As Double

'Initialize variables

ac_count = 0
Custom_ac_count_existing = 0
ER_Custom_ac_count_needed = 0

Nb_ac_CERTdb = 0
Nb_ap_CERTdb = 0
Nb_Input_Aircraft_Type = 0

ap_count = 0
Custom_ap_count_existing = 0
ER_Custom_ap_count_needed = 0

Nb_Input_Airport_o = 0
Nb_Input_Airport_d = 0

ReDim Custom_Airport_Needed(1 To 300)
ReDim Custom_Aircraft_Type_Needed(1 To 100)

' TEMP CHANGE
ER_Custom_Aircraft_Airport_Input_Needed = False

'Read Input from Worksheets

StartRow1 = 11
Input_Nb_Entries = Sheet9.Range("D" & StartRow1, Sheet9.Range("D" & StartRow1).End(xlDown)).Rows.Count - 1

' Convert Input to Ucase
With Sheet9.Range("D12:F" & 11 + Input_Nb_Entries)
    .Value = Evaluate("INDEX(UPPER(" & .Address(External:=True) & "),)")
End With
            
Set Input_Aircraft_Type_I = Sheet9.Range("D12", "D" & Input_Nb_Entries + StartRow1)
Set Input_Airport_o_I = Sheet9.Range("E12", "E" & Input_Nb_Entries + StartRow1)
Set Input_Airport_d_I = Sheet9.Range("F12", "F" & Input_Nb_Entries + StartRow1)

'Number of existing aircraft in Custom AC
StartRow1 = 9
If Sheet14.Range("C10") <> 0 Then
    Custom_ac_count_existing = Sheet14.Range("C" & StartRow1, Sheet14.Range("C" & StartRow1).End(xlDown)).Rows.Count - 1

    ' Convert Input to Ucase
    If (Custom_ac_count_existing = 1) Then
        Sheet14.Range("C10") = UCase(Sheet14.Range("C10"))
    Else
        With Sheet14.Range("C10:C" & 9 + Custom_ac_count_existing)
            .Value = Evaluate("INDEX(UPPER(" & .Address(External:=True) & "),)")
        End With
    End If

End If

Set Custom_Aircraft_Type_existing = Sheet14.Range("C10", "C" & Custom_ac_count_existing + 10 - 1)

'Number of Aircraft available in CERT database
StartRow2 = 2
Nb_ac_CERTdb = Sheet2.Range("A" & StartRow2, Sheet2.Range("A" & StartRow2).End(xlDown)).Rows.Count

Set Aircraft_Type_CERTdb = Sheet2.Range("A2", "A" & Nb_ac_CERTdb + StartRow2)

'Number of existing airport in Custom AP
StartRow1 = 9
If Sheet39.Range("C10") <> 0 Then
    Custom_ap_count_existing = Sheet39.Range("C" & StartRow1, Sheet39.Range("C" & StartRow1).End(xlDown)).Rows.Count - 1
    
    ' Convert Input to Ucase
    
    If (Custom_ap_count_existing = 1) Then
        Sheet39.Range("C10") = UCase(Sheet39.Range("C10"))
    Else
        With Sheet39.Range("C10:C" & 9 + Custom_ap_count_existing)
            .Value = Evaluate("INDEX(UPPER(" & .Address(External:=True) & "),)")
        End With
    End If
    
End If
Set Custom_Airport_existing = Sheet39.Range("C10", "C" & Custom_ap_count_existing + 10 - 1)

'Number of Aircraft available in CERT database
StartRow2 = 2
Nb_ap_CERTdb = Sheet42.Range("A" & StartRow2, Sheet42.Range("A" & StartRow2).End(xlDown)).Rows.Count

Set Airport_CERTdb = Sheet42.Range("A2", "A" & Nb_ap_CERTdb + StartRow2)

ReDim Input_Aircraft_Type(1 To Input_Nb_Entries)
ReDim Input_Airport_o(1 To Input_Nb_Entries)
ReDim Input_Airport_d(1 To Input_Nb_Entries)


'remove duplicates
For i = 1 To Input_Nb_Entries
   If ER_isInArray(Input_Aircraft_Type_I(i), Input_Aircraft_Type) = True Then
    
    Else
        Nb_Input_Aircraft_Type = Nb_Input_Aircraft_Type + 1
        Input_Aircraft_Type(Nb_Input_Aircraft_Type) = Input_Aircraft_Type_I(i)
   End If
Next i

'Merge set of aircraft available

ReDim Aircraft_Type_Available(1 To Nb_ac_CERTdb + Custom_ac_count_existing)

For n = 1 To Nb_ac_CERTdb
    Aircraft_Type_Available(n) = Aircraft_Type_CERTdb(n)
Next n

If Custom_ac_count_existing > 0 Then
    For n = 1 To Custom_ac_count_existing
        Aircraft_Type_Available(n + Nb_ac_CERTdb) = Custom_Aircraft_Type_existing(n)
    Next n
End If

For i = 1 To Nb_Input_Aircraft_Type
   
   'Status bar
    ER_pctCompleted1_d = i / Nb_Input_Aircraft_Type
    ER_pctCompl1 = Round(100 * ER_pctCompleted1_d, 0)
    If (ER_pctCompl_display1 <> ER_pctCompl1) Then
        ER_pctCompl_display1 = ER_pctCompl1
        ER_progress_import1 (ER_pctCompl_display1)
    End If
   
   
   If ER_isInArray(Input_Aircraft_Type(i), Aircraft_Type_Available) = True Then
        ac_count = ac_count + 1
   Else
        If ER_isInArray(Input_Aircraft_Type(i), Custom_Aircraft_Type_Needed) = True Then
            Else
            ER_Custom_ac_count_needed = ER_Custom_ac_count_needed + 1
            If (ER_Custom_ac_count_needed > 100) Then
                If MsgBox("Stop: Maximum Number of Custom Aeroplanes Exceeded" & vbCrLf & vbCrLf & "Number of required Custom Aeroplanes exceeds the maximum limit of 100. " & vbCrLf & vbCrLf & "If more than 100 aeroplane types are needed, please contact CERT@icao.int ", vbCritical, "CORSIA CERT") = 1 Then
                    UserForm5.Hide
                    Unload UserForm5
                    Sheet9.Activate
                    Sheet9.Range("B12").Select
                    Exit Sub
                End If
            End If
            Custom_Aircraft_Type_Needed(ER_Custom_ac_count_needed) = Input_Aircraft_Type(i)
        End If
   End If
Next i


'remove duplicates
For i = 1 To Input_Nb_Entries
   If ER_isInArray(Input_Airport_o_I(i), Input_Airport_o) = True Then
    
   Else
        Nb_Input_Airport_o = Nb_Input_Airport_o + 1
        Input_Airport_o(Nb_Input_Airport_o) = Input_Airport_o_I(i)
   End If

   'Status bar
   ER_pctCompleted2_d = i / (2 * Input_Nb_Entries + Nb_Input_Airport_o + Nb_Input_Airport_d)
   ER_pctCompl2 = Round(100 * ER_pctCompleted2_d, 0)
   If (ER_pctCompl_display2 <> ER_pctCompl2) Then
        ER_pctCompl_display2 = ER_pctCompl2
        ER_progress_import2 (ER_pctCompl_display2)
   End If
Next i

For i = 1 To Input_Nb_Entries
   If ER_isInArray(Input_Airport_d_I(i), Input_Airport_d) = True Then
    
    Else
        Nb_Input_Airport_d = Nb_Input_Airport_d + 1
        Input_Airport_d(Nb_Input_Airport_d) = Input_Airport_d_I(i)
   End If
   
    'Status bar
   ER_pctCompleted2_d = (i + Input_Nb_Entries) / (2 * Input_Nb_Entries + Nb_Input_Airport_o + Nb_Input_Airport_d)
   ER_pctCompl2 = Round(100 * ER_pctCompleted2_d, 0)
   If (ER_pctCompl_display2 <> ER_pctCompl2) Then
        ER_pctCompl_display2 = ER_pctCompl2
        ER_progress_import2 (ER_pctCompl_display2)
   End If
   
Next i


'Merge set of airport available

ReDim Airport_Available(1 To Nb_ap_CERTdb + Custom_ap_count_existing)

For n = 1 To Nb_ap_CERTdb
    Airport_Available(n) = Airport_CERTdb(n)
Next n

If Custom_ap_count_existing > 0 Then
    For n = 1 To Custom_ap_count_existing
            Airport_Available(n + Nb_ap_CERTdb) = Custom_Airport_existing(n)
    Next n
End If

For i = 1 To Nb_Input_Airport_o
   
   'Status bar
   ER_pctCompleted2_d = (i + 2 * Input_Nb_Entries) / (2 * Input_Nb_Entries + Nb_Input_Airport_o + Nb_Input_Airport_d)
   ER_pctCompl2 = Round(100 * ER_pctCompleted2_d, 0)
   If (ER_pctCompl_display2 <> ER_pctCompl2) Then
        ER_pctCompl_display2 = ER_pctCompl2
        ER_progress_import2 (ER_pctCompl_display2)
   End If
      
   If ER_isInArray(Input_Airport_o(i), Airport_Available) = True Then
        ap_count = ap_count + 1
   Else
        If ER_isInArray(Input_Airport_o(i), Custom_Airport_Needed) = True Then
            Else
            ER_Custom_ap_count_needed = ER_Custom_ap_count_needed + 1
            If (ER_Custom_ap_count_needed > 300) Then
                If MsgBox("Stop: Maximum Number of Custom Aerodromes Exceeded" & vbCrLf & vbCrLf & "Number of required Custom Aerodromes exceeds the maximum limit of 300. " & vbCrLf & vbCrLf & "If more than 300 aerodromes are needed, please contact CERT@icao.int ", vbCritical, "CORSIA CERT") = 1 Then
                    UserForm5.Hide
                    Unload UserForm5
                    Sheet9.Activate
                    Sheet9.Range("B12").Select
                    Exit Sub
                End If
            End If
            Custom_Airport_Needed(ER_Custom_ap_count_needed) = Input_Airport_o(i)
        End If
   End If
Next i

For i = 1 To Nb_Input_Airport_d
   
   'Status bar
   ER_pctCompleted2_d = (i + 2 * Input_Nb_Entries + Nb_Input_Airport_o) / (2 * Input_Nb_Entries + Nb_Input_Airport_o + Nb_Input_Airport_d)
   ER_pctCompl2 = Round(100 * ER_pctCompleted2_d, 0)
   If (ER_pctCompl_display2 <> ER_pctCompl2) Then
        ER_pctCompl_display2 = ER_pctCompl2
        ER_progress_import2 (ER_pctCompl_display2)
   End If
   
   If ER_isInArray(Input_Airport_d(i), Airport_Available) = True Then
        ap_count = ap_count + 1
   Else
        If ER_isInArray(Input_Airport_d(i), Custom_Airport_Needed) = True Then
            Else
            ER_Custom_ap_count_needed = ER_Custom_ap_count_needed + 1
            Custom_Airport_Needed(ER_Custom_ap_count_needed) = Input_Airport_d(i)
        End If
   End If
Next i


If (ER_Custom_ac_count_needed > 0 And ER_Custom_ap_count_needed > 0) Then
    
    If MsgBox("Warning: " & vbCrLf & vbCrLf & ER_Custom_ac_count_needed & " Aircraft Type(s) entered as input is/are not included in the CERT Aricraft database. " & vbCrLf & vbCrLf & "In addition, " & ER_Custom_ap_count_needed & " aerodrome(s) entered is/are not included in the CERT Aerodrome database. " & vbCrLf & vbCrLf & "For each Custom Aeroplane Type, please enter the Aeroplane Category and the Operational Maximum Take-Off Mass (in kg). For each Custom Aerodrome, please enter the Aerodrome information below.", vbExclamation, "CORSIA CERT") = 1 Then
                
        ' Enter aircraft type in list of Custom Aircraft
               
        Sheet14.Activate
        
        For k = 1 To ER_Custom_ac_count_needed
          Sheet14.Range("C" & 9 + k + Custom_ac_count_existing) = Custom_Aircraft_Type_Needed(k)
        Next k
            
        For k = 1 To ER_Custom_ap_count_needed
          Sheet39.Range("C" & 9 + k + Custom_ap_count_existing) = Custom_Airport_Needed(k)
        Next k
    
    If (ER_Custom_ap_count_needed > 0 And Not (ER_Custom_ac_count_needed > 0)) Then
        ER_Custom_Aircraft_Airport_Input_Needed = True
        Sheet39.Activate
        Sheet39.Range("C10").Select
        UserForm5.Hide
        Unload UserForm5
        Exit Sub
    End If
    
    If (ER_Custom_ac_count_needed > 0) Then
        ER_Custom_Aircraft_Airport_Input_Needed = True
        Sheet14.Range("E10").Select
        UserForm5.Hide
        Unload UserForm5
        Exit Sub
    End If

    If (ER_Custom_ap_count_needed = 0 And ER_Custom_ac_count_needed = 0) Then
        ER_Custom_Aircraft_Airport_Input_Needed = True
        Sheet9.Range("B12").Select
        UserForm5.Hide
        Unload UserForm5
        Exit Sub
    End If
    
    End If
    
    Sheet14.Activate
    
Else
Sheet9.Activate
Sheet9.Range("B12").Select

End If


If (ER_Custom_ac_count_needed > 0 And ER_Custom_ap_count_needed = 0) Then
    
    If MsgBox("Warning: " & vbCrLf & vbCrLf & ER_Custom_ac_count_needed & " Aircraft Type(s) entered as input is/are not included in the CERT Aricraft database. " & vbCrLf & vbCrLf & "For each Custom Aircraft Type, please enter the Aircraft Category and the Operational Maximum Take-Off Mass (in kg).", vbExclamation, "CORSIA CERT") = 1 Then
                
        ' Enter aircraft type in list of Custom Aircraft
               
        Sheet14.Activate
        
        For k = 1 To ER_Custom_ac_count_needed
          Sheet14.Range("C" & 9 + k + Custom_ac_count_existing) = Custom_Aircraft_Type_Needed(k)
        Next k
    
        ER_Custom_Aircraft_Airport_Input_Needed = True
        Sheet14.Range("E10").Select
        UserForm5.Hide
        Unload UserForm5
        Exit Sub

    End If
    
    Sheet14.Activate
    
Else
Sheet9.Activate
Sheet9.Range("B12").Select

End If


If (ER_Custom_ac_count_needed = 0 And ER_Custom_ap_count_needed > 0) Then
    
    If MsgBox("Warning: " & vbCrLf & vbCrLf & ER_Custom_ap_count_needed & " aerodrome(s) entered is/are not included in the CERT Aerodrome database. " & vbCrLf & vbCrLf & "For each Custom Aerodrome, please enter the Aerodrome information below.", vbExclamation, "CORSIA CERT") = 1 Then
                
        ' Enter aircraft type in list of Custom Aircraft
               
        Sheet14.Activate
        
        For k = 1 To ER_Custom_ap_count_needed
          Sheet39.Range("C" & 9 + k + Custom_ap_count_existing) = Custom_Airport_Needed(k)
        Next k
    
        ER_Custom_Aircraft_Airport_Input_Needed = True
        Sheet39.Activate
        Sheet39.Range("C10").Select
        UserForm5.Hide
        Unload UserForm5
        Exit Sub
    End If
    
    Sheet14.Activate
    
Else
Sheet9.Activate
Sheet9.Range("B12").Select

End If


UserForm5.Hide
Unload UserForm5

Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic

Exit Sub
Handler:
If MsgBox("Error: Unable to complete assessment." & vbCrLf & vbCrLf & "Please check that required input was entered correctly." & vbCrLf & vbCrLf & "If the problem continues, please contact CERT@icao.int", vbExclamation, "CORSIA CERT") = 1 Then
End If

End Sub

Function ER_isInArray(ByVal stringToBeFound As Variant, ByVal arr As Variant) As Boolean
For Each ER_element In arr
    If ER_element = stringToBeFound Then
        ER_isInArray = True
        Exit Function
    End If
Next ER_element
End Function


Function ER_N_InArray(ByVal stringToBeFound As Variant, ByVal arr As Variant) As Double
ind = 0
For Each ER_element In arr
    ind = ind + 1
    If ER_element = stringToBeFound Then
        ER_N_InArray = ind
        Exit Function
    End If
Next ER_element
End Function


Sub ER_progress_import1(pctCompl As Integer)

UserForm5.Text_Ac.Caption = pctCompl & "% Completed"
UserForm5.Bar1.Width = ER_pctCompl1 * 2
DoEvents

End Sub

Sub ER_progress_import2(pctCompl As Integer)

UserForm5.Text_ap.Caption = pctCompl & "% Completed"
UserForm5.Bar2.Width = pctCompl * 2
DoEvents

End Sub


Attribute VB_Name = "ER_b_CO2_Estimation"

Option Explicit

Public ER_sngStartTime As Single
Public ER_sngTotalTime As Single
Public ER_ind_ap1 As Double
Public ER_ind_ap2 As Double
Public ER_ind As Double
Public ER_ac As Double
Public ER_pctCompl As Single
Public ER_pctCompl_display As Single
Public ER_Nb_Flight_Entries_Computed As Double
Public ER_Index_Computed_Fuel_Flight_Entry_Code_GCD As Double
Public ER_Index_Computed_Fuel_Flight_Entry_Code_BT As Double
Public ER_Warning_whole_number As Boolean
Public ER_Warning_BT_Non_Valid As Boolean
Public ER_Warning_FU_Non_Valid As Boolean

Public ER_N_flight_entries As Double
Public ER_Custom_AC_Input_Data_Missing As Boolean
Public ER_Custom_AP_Input_Data_Missing As Boolean
Public ER_Flight_Entries_Input_Data_Missing As Boolean
Public ER_Flight_Entries_Input_Date_Wrong As Boolean
Public ER_Custom_AP_Input_Data_Duplicate As Boolean
Public ER_Custom_AC_Input_Data_Duplicate As Boolean

Public ER_Missing_Block_Time_Input As Boolean

Public ER_Nb_Flight_Entries_StartRow As Double
Public ER_Nb_Flight_Entries As Double

Public Temp_Lat As String
Public Temp_Long As String

Sub ER_auto_populate_numflights(xx1 As Double, num_flight_range As Range, ER_Nb_Flight_Entries As Double)
    
    If MsgBox("Warning: " & vbCrLf & vbCrLf & xx1 & " record(s) do(es) not have data for Number of Flights. Would you like to set it to 1 ? " & vbCrLf & vbCrLf & " Otherwise, enter appropriate number of flights for each entry.", vbYesNo, "Confirm") = vbYes Then
    
    ' Auto populate number of flights to 1
    
        Dim ii1 As Double
        
        For ii1 = 1 To ER_Nb_Flight_Entries
            
            If num_flight_range(ii1) = "" Then
                num_flight_range(ii1) = 1
            End If
            
        Next ii1
    
    End If

End Sub

Sub ER_Compute_CO2_Emissions()

On Error GoTo Handler:

' Conversion factors
Dim fueltoco2 As Double
Dim kgtoton As Double
fueltoco2 = 3.16
kgtoton = 1000
ER_pctCompl_display = 0
ER_Nb_Flight_Entries_Computed = 0

' CEM (GCD) input
Dim Aircrafttype_1() As String
Dim Slope_1() As Double
Dim Intercept_1() As Double
Dim Breakpoint_1() As Double
Dim Intercept_2() As Double
Dim Slope_2() As Double
Dim Breakpoint_2() As Double
Dim Intercept_3() As Double
Dim Slope_3() As Double
Dim Nb_Segments_GCD() As Double

Dim Max_AC_Range_GCD() As Double
Dim Max_Fuel_Tank_Cap_GCD() As Double
Dim Max_Fuel_Tank_Cap_BT() As Double

Dim Max_AC_Range_GCD_Found As Boolean
Dim Max_Fuel_Tank_Cap_GCD_Found As Boolean
Dim Max_Fuel_Tank_Cap_BT_Found As Boolean

Dim Max_AC_Range_GCD_Records As Double
Dim Max_Fuel_Tank_Cap_GCD_Records As Double
Dim Max_Fuel_Tank_Cap_BT_Records As Double
Dim Warnings_Messages() As String

Dim Custom_ac_count_existing As Integer
Dim Custom_ap_count_existing As Integer
Dim n As Double

' CEM (BT) input
Dim Aircrafttype_1_BT() As String
Dim Slope_1_BT() As Double
Dim Intercept_1_BT() As Double
Dim Breakpoint_1_BT() As Double
Dim Intercept_2_BT() As Double
Dim Slope_2_BT() As Double
Dim Breakpoint_2_BT() As Double
Dim Intercept_3_BT() As Double
Dim Slope_3_BT() As Double
Dim Nb_Segments_BT() As Double


Dim i As Double
Dim k As Double
Dim StartRow As Double
Dim NumRows As Double
Dim StartRow1 As Double
Dim NumRows1 As Double
Dim StartRow2 As Double

Dim Nb_Aircraft_Type_CERTdb As Double
Dim Nb_Airport_CERTdb As Double

Dim StartRow4 As Double
Dim NumRows4 As Double
Dim Slope_flight As Variant
Dim Intercept_flight As Variant

Dim Nb_Segments_GCD_v As Variant
Dim Breakpoint_1_v As Variant
Dim Breakpoint_2_v As Variant

Dim Nb_Segments_BT_v As Variant
Dim Breakpoint_1_BT_v As Variant
Dim Breakpoint_2_BT_v As Variant

Dim lat1 As Double
Dim lon1 As Double
Dim lat2 As Double
Dim lon2 As Double
Dim dellat As Double
Dim dellon As Double
Dim gcd As Double
Dim a As Double
Dim C As Double
Dim r As Double
Dim index1 As Double
Dim index2 As Double

Dim Avg_Flight_Block_Time As Double

Dim Array_emissions() As Variant
Dim Array_scope() As Variant
Dim Array_gcd() As Variant
Dim Array_data_gap() As Variant

Dim Airport_ICAO_code() As String
Dim Airport_lat() As Double
Dim Airport_lon() As Double
Dim Airport_ICAO_Member_State() As String

Dim States_countrycode As Range
Dim States_countryname As Range
Dim ICAO_Member_State_Apt1 As Variant
Dim ICAO_Member_State_Apt2 As Variant
Dim State_pair_scope() As Variant

Dim Input_Date As Range
Dim Input_Aircraft_Type As Range
Dim Input_Airport_Origin As Range
Dim Input_Airport_Dest As Range
Dim Input_Nb_Flight As Range
Dim Input_Block_Time As Range
Dim Input_Fuel_Use As Range
Dim Input_Type_Fuel As Range
Dim Input_Data_Gap_Ref As Range

Dim od_fuel_burn() As Variant
Dim total_co2_international As Double
Dim Nb_Flight_Entries_Calculated As Double
Dim ER_Flight_Entries_Input_Date_Wrong_Records As Double

Dim Computed_Fuel_Flight_Entry_Code_GCD() As String
Dim Computed_Fuel_Flight_Entry_GCD() As Double
Dim Computed_Fuel_Flight_Entry_Emissions_GCD() As Double
Dim Computed_Fuel_Flight_Entry_Scope_GCD() As String

Dim CheckBox_CERT_GCD As CheckBox
Dim CheckBox_CERT_BT As CheckBox
Dim CheckBox_FUMM_GCD As CheckBox
Dim CheckBox_FUMM_BT As CheckBox

Set CheckBox_CERT_GCD = Sheet36.Shapes("Check Box 1").OLEFormat.Object ' Form Control
Set CheckBox_CERT_BT = Sheet36.Shapes("Check Box 2").OLEFormat.Object ' Form Control
Set CheckBox_FUMM_GCD = Sheet36.Shapes("Check Box 3").OLEFormat.Object ' Form Control
Set CheckBox_FUMM_BT = Sheet36.Shapes("Check Box 4").OLEFormat.Object ' Form Control

Custom_ac_count_existing = 0
Custom_ap_count_existing = 0

Max_AC_Range_GCD_Records = 0
Max_Fuel_Tank_Cap_GCD_Records = 0
Max_Fuel_Tank_Cap_BT_Records = 0

Max_AC_Range_GCD_Found = False
Max_Fuel_Tank_Cap_GCD_Found = False
Max_Fuel_Tank_Cap_BT_Found = False

ER_Warning_BT_Non_Valid = False
ER_Warning_FU_Non_Valid = False

' Read States Information
StartRow4 = 1
NumRows4 = Sheet6.Range("B" & StartRow4, Sheet6.Range("B" & StartRow4).End(xlDown)).Rows.Count

' Read CEM Information
StartRow = 2
If (CheckBox_CERT_GCD.Value = 1 Or CheckBox_FUMM_GCD.Value = 1) Then
    Nb_Aircraft_Type_CERTdb = Sheet2.Range("B" & StartRow, Sheet2.Range("B" & StartRow).End(xlDown)).Rows.Count
End If

If (CheckBox_CERT_BT.Value = 1 Or CheckBox_FUMM_BT.Value = 1) Then
    Nb_Aircraft_Type_CERTdb = Sheet37.Range("A" & StartRow, Sheet37.Range("A" & StartRow).End(xlDown)).Rows.Count
End If

StartRow1 = 9
If Sheet14.Range("C10") <> 0 Then
    Custom_ac_count_existing = Sheet14.Range("C" & StartRow1, Sheet14.Range("C" & StartRow1).End(xlDown)).Rows.Count - 1

    'Check input in Custom AC_AP for missing input on Aircraft input data
    
    ER_Custom_AC_Input_Data_Missing = False
    
    For n = 1 To Custom_ac_count_existing
        If (IsEmpty(Sheet14.Cells(n + 9, 5)) = True Or IsEmpty(Sheet14.Cells(n + 9, 10)) = True) Then
           ER_Custom_AC_Input_Data_Missing = True
        End If
    Next n
    
    If ER_Custom_AC_Input_Data_Missing = True Then
        If MsgBox("Stop: Failed Calculation of CO2 Emissions " & vbCrLf & vbCrLf & "Ensure that all required Custom Aeroplane input data is entered correctly for all Custom Aeroplane Type", vbCritical, "CORSIA CERT") = 1 Then
            UserForm6.Hide
            Sheet14.Activate
            Sheet14.Range("C10").Select
            Application.EnableEvents = True
            Application.Calculation = xlCalculationAutomatic
            Exit Sub
        End If
    End If
    
    'Check input in Custom AC for duplicate input on Aircraft input data
    ER_Custom_AC_Input_Data_Duplicate = False
    
    For n = 1 To Custom_ac_count_existing
        For i = 1 To Custom_ac_count_existing
            If (n <> i And Sheet14.Cells(n + 9, 3) = Sheet14.Cells(i + 9, 3)) Then
               ER_Custom_AC_Input_Data_Duplicate = True
            End If
        Next i
    Next n
    
    If ER_Custom_AC_Input_Data_Duplicate = True Then
        If MsgBox("Stop: Failed Calculation of CO2 Emissions " & vbCrLf & vbCrLf & "Ensure that Custom Aeroplanes are not duplicated", vbCritical, "CORSIA CERT") = 1 Then
        UserForm6.Hide
            Sheet14.Activate
            Sheet14.Range("C10").Select
            Application.EnableEvents = True
            Application.Calculation = xlCalculationAutomatic
        Exit Sub
        
        End If
    End If
    
    
End If

ReDim Aircrafttype_1(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Intercept_1(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Slope_1(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Breakpoint_1(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Intercept_2(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Slope_2(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Breakpoint_2(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Intercept_3(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Slope_3(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Nb_Segments_GCD(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)

ReDim Max_AC_Range_GCD(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Max_Fuel_Tank_Cap_GCD(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Max_Fuel_Tank_Cap_BT(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)

ReDim Aircrafttype_1_BT(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Intercept_1_BT(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Slope_1_BT(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Breakpoint_1_BT(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Intercept_2_BT(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Slope_2_BT(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Breakpoint_2_BT(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Intercept_3_BT(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Slope_3_BT(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)
ReDim Nb_Segments_BT(1 To Nb_Aircraft_Type_CERTdb + Custom_ac_count_existing)


For n = 1 To Nb_Aircraft_Type_CERTdb
    Aircrafttype_1(n) = Sheet2.Cells(n + 1, 1)
    Intercept_1(n) = Sheet2.Cells(n + 1, 2)
    Slope_1(n) = Sheet2.Cells(n + 1, 3)
    Breakpoint_1(n) = Sheet2.Cells(n + 1, 4)
    Intercept_2(n) = Sheet2.Cells(n + 1, 5)
    Slope_2(n) = Sheet2.Cells(n + 1, 6)
    Breakpoint_2(n) = Sheet2.Cells(n + 1, 7)
    Intercept_3(n) = Sheet2.Cells(n + 1, 8)
    Slope_3(n) = Sheet2.Cells(n + 1, 9)
    Nb_Segments_GCD(n) = Sheet2.Cells(n + 1, 10)
    
    Max_AC_Range_GCD(n) = Sheet2.Cells(n + 1, 16)
    Max_Fuel_Tank_Cap_GCD(n) = Sheet2.Cells(n + 1, 17)
    
Next n

For n = 1 To Nb_Aircraft_Type_CERTdb
    Aircrafttype_1_BT(n) = Sheet37.Cells(n + 1, 1)
    Intercept_1_BT(n) = Sheet37.Cells(n + 1, 2)
    Slope_1_BT(n) = Sheet37.Cells(n + 1, 3)
    Breakpoint_1_BT(n) = Sheet37.Cells(n + 1, 4)
    Intercept_2_BT(n) = Sheet37.Cells(n + 1, 5)
    Slope_2_BT(n) = Sheet37.Cells(n + 1, 6)
    Breakpoint_2_BT(n) = Sheet37.Cells(n + 1, 7)
    Intercept_3_BT(n) = Sheet37.Cells(n + 1, 8)
    Slope_3_BT(n) = Sheet37.Cells(n + 1, 9)
    Nb_Segments_BT(n) = Sheet37.Cells(n + 1, 10)
    
    Max_Fuel_Tank_Cap_BT(n) = Sheet37.Cells(n + 1, 17)
Next n

If Custom_ac_count_existing > 0 Then
    For n = 1 To Custom_ac_count_existing
        Aircrafttype_1(n + Nb_Aircraft_Type_CERTdb) = Sheet14.Cells(n + 9, 3)
        Intercept_1(n + Nb_Aircraft_Type_CERTdb) = Sheet14.Cells(n + 9, 12)
        Slope_1(n + Nb_Aircraft_Type_CERTdb) = Sheet14.Cells(n + 9, 13)
        Nb_Segments_GCD(n + Nb_Aircraft_Type_CERTdb) = 1
    
        Aircrafttype_1_BT(n + Nb_Aircraft_Type_CERTdb) = Sheet14.Cells(n + 9, 3)
        Intercept_1_BT(n + Nb_Aircraft_Type_CERTdb) = Sheet14.Cells(n + 9, 14)
        Slope_1_BT(n + Nb_Aircraft_Type_CERTdb) = Sheet14.Cells(n + 9, 15)
        Nb_Segments_BT(n + Nb_Aircraft_Type_CERTdb) = 1
    Next n
End If

' Read airport information
StartRow2 = 2
Nb_Airport_CERTdb = Sheet42.Range("B" & StartRow2, Sheet42.Range("B" & StartRow2).End(xlDown)).Rows.Count

StartRow1 = 9
If Sheet39.Range("C10") <> 0 Then
    Custom_ap_count_existing = Sheet39.Range("C" & StartRow1, Sheet39.Range("C" & StartRow1).End(xlDown)).Rows.Count - 1

    'Check input in Custom AP for missing input on Airport input data
    
    ER_Custom_AP_Input_Data_Missing = False
    
    For n = 1 To Custom_ap_count_existing
    
        If (IsEmpty(Sheet39.Cells(n + 9, 9)) = True Or IsEmpty(Sheet39.Cells(n + 9, 10)) = True Or IsEmpty(Sheet39.Cells(n + 9, 11)) = True) Then
           ER_Custom_AP_Input_Data_Missing = True
        End If
    
        If ER_Custom_AP_Input_Data_Missing = True Then
            If MsgBox("Stop: Failed Calculation of CO2 Emissions " & vbCrLf & vbCrLf & "Ensure that all required Custom Aerodrome input data is entered correctly for all Custom Aerodromes", vbCritical, "CORSIA CERT") = 1 Then
            UserForm6.Hide
            Sheet39.Activate
            Sheet39.Range("C10").Select
            Application.EnableEvents = True
            Application.Calculation = xlCalculationAutomatic
            Exit Sub
            
            End If
        End If
        
    Next n
        
    'Check input in Custom AP for duplicate input on Airport input data
    ER_Custom_AP_Input_Data_Duplicate = False
    
    For n = 1 To Custom_ap_count_existing
        For i = 1 To Custom_ap_count_existing
            If (n <> i And Sheet39.Cells(n + 9, 3) = Sheet39.Cells(i + 9, 3)) Then
               ER_Custom_AP_Input_Data_Duplicate = True
            End If
        Next i
    Next n
    
    If ER_Custom_AP_Input_Data_Duplicate = True Then
        If MsgBox("Stop: Failed Calculation of CO2 Emissions " & vbCrLf & vbCrLf & "Ensure that Custom Aerodromes are not duplicated", vbCritical, "CORSIA CERT") = 1 Then
        UserForm6.Hide
        Sheet39.Activate
        Sheet39.Range("C10").Select
        Application.EnableEvents = True
        Application.Calculation = xlCalculationAutomatic
        Exit Sub
        
        End If
    End If

End If

ReDim Airport_ICAO_code(1 To Nb_Airport_CERTdb + Custom_ap_count_existing)
ReDim Airport_lat(1 To Nb_Airport_CERTdb + Custom_ap_count_existing)
ReDim Airport_lon(1 To Nb_Airport_CERTdb + Custom_ap_count_existing)
ReDim Airport_ICAO_Member_State(1 To Nb_Airport_CERTdb + Custom_ap_count_existing)

If Custom_ap_count_existing > 0 Then
    For n = 1 To Custom_ap_count_existing
        Airport_ICAO_code(n) = Sheet39.Cells(n + 9, 3)
              
        If (InStr(Sheet39.Cells(n + 9, 9), Right(Sheet5.Range("C41").Value, 1)) > 0) Then
            Temp_Lat = Replace(Sheet39.Cells(n + 9, 9), Right(Sheet5.Range("C41").Value, 1), "|fffd|")
            Temp_Lat = Replace(Temp_Lat, Right(Sheet5.Range("C42").Value, 1), "'")
            Temp_Lat = Replace(Temp_Lat, Right(Sheet5.Range("C43").Value, 1), """")
            Temp_Lat = Replace(Temp_Lat, Right(Sheet5.Range("C45").Value, 1), "N")
            Temp_Lat = Replace(Temp_Lat, Right(Sheet5.Range("C46").Value, 1), "S")
            Temp_Lat = Replace(Temp_Lat, Right(Sheet5.Range("C47").Value, 1), "E")
            Temp_Lat = Replace(Temp_Lat, Right(Sheet5.Range("C48").Value, 1), "W")
        End If
                
        If (InStr(Sheet39.Cells(n + 9, 9), Sheet5.Range("C44").Value)) Then
            Temp_Lat = Replace(Sheet39.Cells(n + 9, 9), Sheet5.Range("C44").Value, ".")
        End If
        
        If IsNumeric(Sheet39.Cells(n + 9, 9)) = True Then
            Temp_Lat = Sheet39.Cells(n + 9, 9)
        End If
        
        If InStr(Temp_Lat, "|fffd|") > 0 Then
            Airport_lat(n) = SignIt(Temp_Lat)
        Else
            Airport_lat(n) = Temp_Lat
        End If
        
        If (InStr(Sheet39.Cells(n + 9, 10), Right(Sheet5.Range("C41").Value, 1)) > 0) Then
            Temp_Long = Replace(Sheet39.Cells(n + 9, 10), Right(Sheet5.Range("C41").Value, 1), "|fffd|")
            Temp_Long = Replace(Temp_Long, Right(Sheet5.Range("C42").Value, 1), "'")
            Temp_Long = Replace(Temp_Long, Right(Sheet5.Range("C43").Value, 1), """")
            Temp_Long = Replace(Temp_Long, Right(Sheet5.Range("C45").Value, 1), "N")
            Temp_Long = Replace(Temp_Long, Right(Sheet5.Range("C46").Value, 1), "S")
            Temp_Long = Replace(Temp_Long, Right(Sheet5.Range("C47").Value, 1), "E")
            Temp_Long = Replace(Temp_Long, Right(Sheet5.Range("C48").Value, 1), "W")
        End If
                
        If (InStr(Sheet39.Cells(n + 9, 10), Sheet5.Range("C44").Value)) Then
            Temp_Lat = Replace(Sheet39.Cells(n + 9, 10), Sheet5.Range("C44").Value, ".")
        End If
        
        If IsNumeric(Sheet39.Cells(n + 9, 10)) = True Then
            Temp_Long = Sheet39.Cells(n + 9, 10)
        End If
                
        If InStr(Temp_Lat, "|fffd|") > 0 Then
            Airport_lon(n) = SignIt(Temp_Long)
        Else
            Airport_lon(n) = Temp_Long
        End If
        
        Airport_ICAO_Member_State(n) = Sheet39.Cells(n + 9, 11)
    Next n
End If

For n = 1 To Nb_Airport_CERTdb
    Airport_ICAO_code(n + Custom_ap_count_existing) = Sheet42.Cells(n + 1, 1)
    Airport_lat(n + Custom_ap_count_existing) = Sheet42.Cells(n + 1, 3)
    Airport_lon(n + Custom_ap_count_existing) = Sheet42.Cells(n + 1, 4)
    Airport_ICAO_Member_State(n + Custom_ap_count_existing) = Sheet42.Cells(n + 1, 6)
Next n


'Check input in Flight Entries for missing input data

ER_Flight_Entries_Input_Data_Missing = False

For n = 1 To ER_Nb_Flight_Entries
    If (IsEmpty(Sheet9.Cells(n + 11, 5)) = True Or IsEmpty(Sheet9.Cells(n + 11, 6)) = True Or IsEmpty(Sheet9.Cells(n + 11, 7)) = True) Then
       ER_Flight_Entries_Input_Data_Missing = True
    End If

    If ER_Flight_Entries_Input_Data_Missing = True Then
        If MsgBox("Stop: Failed Calculation of CO2 Emissions " & vbCrLf & vbCrLf & "Ensure that all required flight(s) input data is entered correctly", vbExclamation, "CORSIA CERT") = 1 Then
        UserForm6.Hide
        Application.EnableEvents = True
        Application.Calculation = xlCalculationAutomatic
        Exit Sub
        End If
    End If
Next n

Set Input_Date = Sheet9.Range("B12", "B" & ER_Nb_Flight_Entries + ER_Nb_Flight_Entries_StartRow)
Set Input_Aircraft_Type = Sheet9.Range("D12", "D" & ER_Nb_Flight_Entries + ER_Nb_Flight_Entries_StartRow)
Set Input_Airport_Origin = Sheet9.Range("E12", "E" & ER_Nb_Flight_Entries + ER_Nb_Flight_Entries_StartRow)
Set Input_Airport_Dest = Sheet9.Range("F12", "F" & ER_Nb_Flight_Entries + ER_Nb_Flight_Entries_StartRow)
Set Input_Nb_Flight = Sheet9.Range("G12", "G" & ER_Nb_Flight_Entries + ER_Nb_Flight_Entries_StartRow)
Set Input_Block_Time = Sheet9.Range("H12", "H" & ER_Nb_Flight_Entries + ER_Nb_Flight_Entries_StartRow)
Set Input_Fuel_Use = Sheet9.Range("I12", "I" & ER_Nb_Flight_Entries + ER_Nb_Flight_Entries_StartRow)
Set Input_Type_Fuel = Sheet9.Range("J12", "J" & ER_Nb_Flight_Entries + ER_Nb_Flight_Entries_StartRow)
Set Input_Data_Gap_Ref = Sheet9.Range("K12", "K" & ER_Nb_Flight_Entries + ER_Nb_Flight_Entries_StartRow)


' Initialize variable to store total co2
total_co2_international = 0

ReDim State_pair_scope(ER_Nb_Flight_Entries_StartRow + 1 To ER_Nb_Flight_Entries + ER_Nb_Flight_Entries_StartRow)
ReDim od_fuel_burn(ER_Nb_Flight_Entries_StartRow + 1 To ER_Nb_Flight_Entries + ER_Nb_Flight_Entries_StartRow)

Nb_Flight_Entries_Calculated = Sheet9.Range("L" & ER_Nb_Flight_Entries_StartRow, Sheet9.Range("L" & ER_Nb_Flight_Entries_StartRow).End(xlDown)).Rows.Count - 1
Sheet9.Range("L12:P1048576").ClearContents

' Check if the first row has data
If Input_Aircraft_Type(1) <> "" Then

    ReDim Array_gcd(1 To ER_Nb_Flight_Entries)
    ReDim Array_emissions(1 To ER_Nb_Flight_Entries)
    ReDim Array_scope(1 To ER_Nb_Flight_Entries)
    ReDim Array_data_gap(1 To ER_Nb_Flight_Entries)
    
    ReDim Computed_Fuel_Flight_Entry_Code_GCD(1 To ER_Nb_Flight_Entries)
    ReDim Computed_Fuel_Flight_Entry_GCD(1 To ER_Nb_Flight_Entries)
    ReDim Computed_Fuel_Flight_Entry_Emissions_GCD(1 To ER_Nb_Flight_Entries)
    ReDim Computed_Fuel_Flight_Entry_Scope_GCD(1 To ER_Nb_Flight_Entries)
    
    ReDim Warnings_Messages(1 To ER_Nb_Flight_Entries)
    
    
    ' Check date of validity of flight entries

    ER_Flight_Entries_Input_Date_Wrong = False
    ER_Flight_Entries_Input_Date_Wrong_Records = 0
    
    For k = 1 To ER_Nb_Flight_Entries
        Array_data_gap(k) = "No"
        Warnings_Messages(k) = ""
    Next k
    
    For n = 1 To ER_Nb_Flight_Entries
        If (Not (Input_Date(n) = "") And Not (Year(Input_Date(n)) = 2019)) Then
           ER_Flight_Entries_Input_Date_Wrong = True
           ER_Flight_Entries_Input_Date_Wrong_Records = ER_Flight_Entries_Input_Date_Wrong_Records + 1
           Warnings_Messages(n) = "Date"
        End If
    Next n
    
    If ER_Flight_Entries_Input_Date_Wrong = True Then
        If MsgBox("Warning: " & vbCrLf & vbCrLf & "Ensure that all flights entered in the ICAO CORSIA CERT were conducted in 2019. " & vbCrLf & vbCrLf & " It appears that " & ER_Flight_Entries_Input_Date_Wrong_Records & " flight entry(ies) did not take place in 2019. Please check dates of flight entries.", vbExclamation, "CORSIA CERT") = 1 Then
        End If
    End If
    
    ER_Missing_Block_Time_Input = False
    
    
    ' Check for negative Block Time
            
    If Sheet9.Range("D12") <> "" Then
        
        For k = 1 To ER_Nb_Flight_Entries
            If ((Sheet9.Range("H" & k + 11) <> "" And Sheet9.Range("H" & k + 11) <= 0)) Then
                ER_Warning_BT_Non_Valid = True
            End If
        Next k
        If (ER_Warning_BT_Non_Valid = True) Then
            If MsgBox("Stop: " & vbCrLf & vbCrLf & "Ensure that Block Time input data is greater than 0 min. (i.e., 0 or negative Block Time values are not appropriate entries)", vbCritical, "CORSIA CERT") = 1 Then
            End If
            UserForm6.Hide
            Exit Sub
        End If
    
    End If
    
     ' Check for negative Fuel Use
            
    If Sheet9.Range("D12") <> "" Then
        
        For k = 1 To ER_Nb_Flight_Entries
            If ((Sheet9.Range("I" & k + 11) <> "" And Sheet9.Range("I" & k + 11) <= 0)) Then
                ER_Warning_FU_Non_Valid = True
            End If
        Next k
        If (ER_Warning_FU_Non_Valid = True) Then
            If MsgBox("Stop: " & vbCrLf & vbCrLf & "Ensure that Fuel Use input data is greater than 0 tonnes (i.e., 0 or negative Fuel Use values are not appropriate entries)", vbCritical, "CORSIA CERT") = 1 Then
            End If
            UserForm6.Hide
            Exit Sub
        End If
    
    End If
    
    ' Data Gap Identification
    For k = 1 To ER_Nb_Flight_Entries
                
        If (CheckBox_CERT_BT.Value = 1 And Not (Input_Block_Time(k) > 0)) Then
                Array_data_gap(k) = "Yes"
        End If
        
        If (CheckBox_FUMM_GCD.Value = 1 Or CheckBox_FUMM_BT.Value = 1) Then
            If (Input_Fuel_Use(k) = 0) Then
                Array_data_gap(k) = "Yes"
            End If
            If (IsEmpty(Input_Type_Fuel(k)) = True) Then
                Array_data_gap(k) = "Yes"
            End If
        End If
        
        If (CheckBox_FUMM_BT.Value = 1 And Array_data_gap(k) = "Yes") Then
            If (Input_Block_Time(k) = 0) Then
                ER_Missing_Block_Time_Input = True
            End If
        End If
    
    Next k
    
    If (ER_Missing_Block_Time_Input = True) Then
            If MsgBox("Warning: " & vbCrLf & vbCrLf & "Filling data gaps using the Block Time input method requires block time input data. " & vbCrLf & vbCrLf & "Ensure that data is entered correctly for flight entry with data gaps. " & vbCrLf & vbCrLf & "If Block Time input is not provided, please take note that the Great Circle Distance will be used to estimate CO2 Emissions.", vbExclamation, "CORSIA CERT") = 1 Then
            End If
    End If
    
    
    For k = 1 To ER_Nb_Flight_Entries
        
        ER_Index_Computed_Fuel_Flight_Entry_Code_GCD = 0
        ER_Index_Computed_Fuel_Flight_Entry_Code_BT = 0
        'Status bar
            ER_pctCompl = Round(100 * k / ER_Nb_Flight_Entries, 0)
            If (ER_pctCompl_display <> ER_pctCompl) Then
                ER_pctCompl_display = ER_pctCompl
                ER_progress (ER_pctCompl_display)
            End If
    
    ' GCD / ESTIMATION OF EMISSION (If flight entry needs to be computed)
    If (CheckBox_FUMM_GCD.Value = 1 And Array_data_gap(k) = "No") Or (CheckBox_FUMM_BT.Value = 1 And Array_data_gap(k) = "No") Then
        
        ER_ac = N_InArray(Input_Aircraft_Type(k), Aircrafttype_1_BT)
        
        If (ER_ac <= Nb_Aircraft_Type_CERTdb) Then
        
                If ((Input_Fuel_Use(k) / Input_Nb_Flight(k)) > (Max_Fuel_Tank_Cap_BT(ER_ac) / 1000 * 3.16)) Then
                    Max_Fuel_Tank_Cap_BT_Found = True
                    Max_Fuel_Tank_Cap_BT_Records = Max_Fuel_Tank_Cap_BT_Records + 1
                    Warnings_Messages(k) = "Fuel Cap."
                End If
        Else
                If ((Input_Fuel_Use(k) / Input_Nb_Flight(k)) > (300 * 3.16)) Then
                    Max_Fuel_Tank_Cap_BT_Found = True
                    Max_Fuel_Tank_Cap_BT_Records = Max_Fuel_Tank_Cap_BT_Records + 1
                    Warnings_Messages(k) = "Fuel Cap."
                End If
        End If
            
    End If
        
    ' GCD / ESTIMATION OF EMISSION (If flight entry needs to be computed)
    If (CheckBox_CERT_GCD.Value = 1 Or (CheckBox_CERT_BT.Value = 1 And Array_data_gap(k) = "Yes") Or (CheckBox_FUMM_GCD.Value = 1 And Array_data_gap(k) = "Yes") Or (CheckBox_FUMM_BT.Value = 1 And Not (Input_Block_Time(k) > 0) And Array_data_gap(k) = "Yes")) Then
           
        'Estimate CO2 Emissions using GCD
        
        ER_Index_Computed_Fuel_Flight_Entry_Code_GCD = N_InArray(Input_Aircraft_Type(k) & "-" & Input_Airport_Origin(k) & "-" & Input_Airport_Dest(k) & "-" & Input_Nb_Flight(k).Value, Computed_Fuel_Flight_Entry_Code_GCD)
        If (ER_Index_Computed_Fuel_Flight_Entry_Code_GCD > 0) Then
            
            Array_gcd(k) = Computed_Fuel_Flight_Entry_GCD(ER_Index_Computed_Fuel_Flight_Entry_Code_GCD)
            Array_emissions(k) = Computed_Fuel_Flight_Entry_Emissions_GCD(ER_Index_Computed_Fuel_Flight_Entry_Code_GCD)
            Array_scope(k) = Computed_Fuel_Flight_Entry_Scope_GCD(ER_Index_Computed_Fuel_Flight_Entry_Code_GCD)
            
        Else
            
            lat1 = 0
            lon1 = 0
            lat2 = 0
            lon2 = 0
            ICAO_Member_State_Apt1 = "NA"
            ICAO_Member_State_Apt2 = "NA"
            Array_gcd(k) = "NA"
            Array_emissions(k) = "NA"
            Array_scope(k) = "NA"
            
            ' Process origin airport
                    ER_ind_ap1 = N_InArray(Input_Airport_Origin(k), Airport_ICAO_code)
                    lat1 = Airport_lat(ER_ind_ap1)
                    lon1 = Airport_lon(ER_ind_ap1)
                    ICAO_Member_State_Apt1 = Airport_ICAO_Member_State(ER_ind_ap1)
                
            ' Process destination airport
                    ER_ind_ap2 = N_InArray(Input_Airport_Dest(k), Airport_ICAO_code)
                    lat2 = Airport_lat(ER_ind_ap2)
                    lon2 = Airport_lon(ER_ind_ap2)
                    ICAO_Member_State_Apt2 = Airport_ICAO_Member_State(ER_ind_ap2)
            
            ' Compute great circle distance
            If ICAO_Member_State_Apt1 <> "NA" And ICAO_Member_State_Apt2 <> "NA" Then
            
            ' Great Circle Distance - Vincenty Method
            gcd = distVincenty(lat1, lon1, lat2, lon2) / 1000
            
            ' Compute CO2 Emissions
            
            ER_ac = N_InArray(Input_Aircraft_Type(k), Aircrafttype_1)
            
            Nb_Segments_GCD_v = Nb_Segments_GCD(ER_ac)
            
                If Nb_Segments_GCD_v = 1 Then
                    Slope_flight = Slope_1(ER_ac)
                    Intercept_flight = Intercept_1(ER_ac)
                Else
                    Breakpoint_1_v = Breakpoint_1(ER_ac)
                    If Nb_Segments_GCD_v = 2 Then
                        If (gcd <= Breakpoint_1_v) Then
                            Slope_flight = Slope_1(ER_ac)
                            Intercept_flight = Intercept_1(ER_ac)
                        Else
                            Slope_flight = Slope_2(ER_ac)
                            Intercept_flight = Intercept_2(ER_ac)
                        End If
                    Else
                        If (gcd <= Breakpoint_1_v) Then
                            Slope_flight = Slope_1(ER_ac)
                            Intercept_flight = Intercept_1(ER_ac)
                        Else
                            Breakpoint_2_v = Breakpoint_2(ER_ac)
                            If (Breakpoint_1_v < gcd And gcd <= Breakpoint_2_v) Then
                                Slope_flight = Slope_2(ER_ac)
                                Intercept_flight = Intercept_2(ER_ac)
                            Else
                                Slope_flight = Slope_3(ER_ac)
                                Intercept_flight = Intercept_3(ER_ac)
                            End If
                        End If
                    End If
                End If
            
            Array_gcd(k) = Round(gcd, 0)
            Array_emissions(k) = (((gcd * Slope_flight + Intercept_flight) * Input_Nb_Flight(k).Value * fueltoco2) / kgtoton)
            
            ER_Nb_Flight_Entries_Computed = ER_Nb_Flight_Entries_Computed + 1
            
            Computed_Fuel_Flight_Entry_Code_GCD(ER_Nb_Flight_Entries_Computed) = Input_Aircraft_Type(k) & "-" & Input_Airport_Origin(k) & "-" & Input_Airport_Dest(k)
            Computed_Fuel_Flight_Entry_GCD(ER_Nb_Flight_Entries_Computed) = Array_gcd(k)
            Computed_Fuel_Flight_Entry_Emissions_GCD(ER_Nb_Flight_Entries_Computed) = Array_emissions(k)
                   
            
            If (ER_ac <= Nb_Aircraft_Type_CERTdb) Then
                If (Array_gcd(k) > Max_AC_Range_GCD(ER_ac)) Then
                    Max_AC_Range_GCD_Found = True
                    Max_AC_Range_GCD_Records = Max_AC_Range_GCD_Records + 1
                    Warnings_Messages(k) = "Range"
                End If
    
                If ((Array_emissions(k) / Input_Nb_Flight(k)) > (Max_Fuel_Tank_Cap_GCD(ER_ac) / 1000 * 3.16)) Then
                    Max_Fuel_Tank_Cap_GCD_Found = True
                    Max_Fuel_Tank_Cap_GCD_Records = Max_Fuel_Tank_Cap_GCD_Records + 1
                    Warnings_Messages(k) = "Fuel Cap."
                End If
            Else
                
                If (Array_emissions(k) / Input_Nb_Flight(k)) > (300 * 3.16) Then
                    Max_Fuel_Tank_Cap_GCD_Found = True
                    Max_Fuel_Tank_Cap_GCD_Records = Max_Fuel_Tank_Cap_GCD_Records + 1
                    Warnings_Messages(k) = "Fuel Cap."
                End If
            End If
            
            
            ' Determine status of routes
                If IsNumeric(Input_Nb_Flight(k).Value) Then
                
                    If ICAO_Member_State_Apt1 = ICAO_Member_State_Apt2 Then
                        Array_scope(k) = "No (Domestic)"
                        Computed_Fuel_Flight_Entry_Scope_GCD(ER_Nb_Flight_Entries_Computed) = "No (Domestic)"
                    Else
                        Array_scope(k) = "Yes"
                        Computed_Fuel_Flight_Entry_Scope_GCD(ER_Nb_Flight_Entries_Computed) = "Yes"
                    End If
                Else
                    Array_scope(k) = "NA"
                    Computed_Fuel_Flight_Entry_Scope_GCD(ER_Nb_Flight_Entries_Computed) = "NA"
                End If
            Else
                Array_emissions(k) = "Invalid OD pair"
                Array_scope(k) = "Invalid OD pair"
            End If
           
        End If
        
    End If
    
    ' BT / ESTIMATION OF EMISSION (If flight entry needs to be computed)
    If ((CheckBox_CERT_BT.Value = 1 And Input_Block_Time(k) > 0) Or (CheckBox_FUMM_BT.Value = 1 And Input_Block_Time(k) > 0 And Array_data_gap(k) = "Yes")) Then
        
            ICAO_Member_State_Apt1 = "NA"
            ICAO_Member_State_Apt2 = "NA"
            Array_emissions(k) = "NA"
            Array_scope(k) = "NA"
            
            ' Process origin airport
                    ER_ind_ap1 = N_InArray(Input_Airport_Origin(k), Airport_ICAO_code)
                    ICAO_Member_State_Apt1 = Airport_ICAO_Member_State(ER_ind_ap1)
                
            ' Process destination airport
                    ER_ind_ap2 = N_InArray(Input_Airport_Dest(k), Airport_ICAO_code)
                    ICAO_Member_State_Apt2 = Airport_ICAO_Member_State(ER_ind_ap2)
            
            ' Compute great circle distance
            If ICAO_Member_State_Apt1 <> "NA" And ICAO_Member_State_Apt2 <> "NA" Then
              
            ' Compute CO2 Emissions
            
            Avg_Flight_Block_Time = Input_Block_Time(k) / Input_Nb_Flight(k)
            
            ER_ac = N_InArray(Input_Aircraft_Type(k), Aircrafttype_1_BT)
            
            Nb_Segments_BT_v = Nb_Segments_BT(ER_ac)
            
                If Nb_Segments_BT_v = 1 Then
                    Slope_flight = Slope_1_BT(ER_ac)
                    Intercept_flight = Intercept_1_BT(ER_ac)
                Else
                    Breakpoint_1_BT_v = Breakpoint_1_BT(ER_ac)
                    If Nb_Segments_BT_v = 2 Then
                        If (Avg_Flight_Block_Time <= Breakpoint_1_BT_v) Then
                            Slope_flight = Slope_1_BT(ER_ac)
                            Intercept_flight = Intercept_1_BT(ER_ac)
                        Else
                            Slope_flight = Slope_2_BT(ER_ac)
                            Intercept_flight = Intercept_2_BT(ER_ac)
                        End If
                    Else
                        If (Avg_Flight_Block_Time <= Breakpoint_1_BT_v) Then
                            Slope_flight = Slope_1_BT(ER_ac)
                            Intercept_flight = Intercept_1_BT(ER_ac)
                        Else
                            Breakpoint_2_BT_v = Breakpoint_2_BT(ER_ac)
                            If ((Breakpoint_1_BT_v < Avg_Flight_Block_Time) And (Avg_Flight_Block_Time <= Breakpoint_2_BT_v)) Then
                                Slope_flight = Slope_2_BT(ER_ac)
                                Intercept_flight = Intercept_2_BT(ER_ac)
                            Else
                                Slope_flight = Slope_3_BT(ER_ac)
                                Intercept_flight = Intercept_3_BT(ER_ac)
                            End If
                        End If
                    End If
                End If
            
            Array_emissions(k) = (Avg_Flight_Block_Time * Slope_flight + Intercept_flight) * Input_Nb_Flight(k).Value * fueltoco2 / kgtoton
            
            If (ER_ac <= Nb_Aircraft_Type_CERTdb) Then
                If ((Array_emissions(k) / Input_Nb_Flight(k)) > (Max_Fuel_Tank_Cap_BT(ER_ac) / 1000 * 3.16)) Then
                    Max_Fuel_Tank_Cap_BT_Found = True
                    Max_Fuel_Tank_Cap_BT_Records = Max_Fuel_Tank_Cap_BT_Records + 1
                    Warnings_Messages(k) = "Fuel Cap."
                End If
            Else
                If ((Array_emissions(k) / Input_Nb_Flight(k)) > (300 * 3.16)) Then
                    Max_Fuel_Tank_Cap_BT_Found = True
                    Max_Fuel_Tank_Cap_BT_Records = Max_Fuel_Tank_Cap_BT_Records + 1
                    Warnings_Messages(k) = "Fuel Cap."
                End If
            End If
            
            ' Determine status of routes
                If IsNumeric(Input_Nb_Flight(k).Value) Then
                
                    If ICAO_Member_State_Apt1 = ICAO_Member_State_Apt2 Then
                        Array_scope(k) = "No (Domestic)"
                    Else
                        Array_scope(k) = "Yes"
                    End If
                Else
                    Array_scope(k) = "NA"
                End If
            Else
                Array_emissions(k) = "Invalid OD pair"
                Array_scope(k) = "Invalid OD pair"
            End If
    End If
    
    ' Process origin airport
            ER_ind_ap1 = N_InArray(Input_Airport_Origin(k), Airport_ICAO_code)
            ICAO_Member_State_Apt1 = Airport_ICAO_Member_State(ER_ind_ap1)
        
    ' Process destination airport
            ER_ind_ap2 = N_InArray(Input_Airport_Dest(k), Airport_ICAO_code)
            ICAO_Member_State_Apt2 = Airport_ICAO_Member_State(ER_ind_ap2)
        
    
    If (ICAO_Member_State_Apt1 <> "NA" And ICAO_Member_State_Apt2 <> "NA") Then
             
             ' Determine status of routes
        If IsNumeric(Input_Nb_Flight(k).Value) Then
        
            If ICAO_Member_State_Apt1 = ICAO_Member_State_Apt2 Then
               Array_scope(k) = "No (Domestic)"
            Else
                Array_scope(k) = "Yes"
            End If
        Else
            Array_scope(k) = "NA"
        End If
    Else
        Array_emissions(k) = "Invalid OD pair"
        Array_scope(k) = "Invalid OD pair"
    End If

    Next k
    
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    Application.Calculation = xlCalculationManual
    
    For k = 1 To ER_Nb_Flight_Entries
        If (CheckBox_CERT_GCD.Value = 1 Or (CheckBox_CERT_BT.Value = 1 And Array_data_gap(k) = "Yes") Or (CheckBox_FUMM_GCD.Value = 1 And Array_data_gap(k) = "Yes") Or (CheckBox_FUMM_BT.Value = 1 And Not (Input_Block_Time(k) > 0) And Array_data_gap(k) = "Yes")) Then
            Sheet9.Cells(11 + k, 12) = Array_data_gap(k)
            Sheet9.Cells(11 + k, 13) = Array_gcd(k)
            Sheet9.Cells(11 + k, 14) = Array_emissions(k)
        End If

        If ((CheckBox_CERT_BT.Value = 1 And Input_Block_Time(k) > 0) Or (CheckBox_FUMM_BT.Value = 1 And Input_Block_Time(k) > 0 And Array_data_gap(k) = "Yes")) Then
            Sheet9.Cells(11 + k, 12) = Array_data_gap(k)
            Sheet9.Cells(11 + k, 14) = Array_emissions(k)
        End If
        
        Sheet9.Cells(11 + k, 15) = Array_scope(k)
        Sheet9.Cells(11 + k, 16) = Warnings_Messages(k)
    
    Next k
    
    If (Max_AC_Range_GCD_Found = True) Then
        If MsgBox("Warning: " & vbCrLf & vbCrLf & "It appears that for " & Max_AC_Range_GCD_Records & " flight entry(ies), the Great Circle Distance computed by the ICAO CORSIA CERT may exceed the Maximum Range of the aeroplane. " & vbCrLf & vbCrLf & "Note that this may be normal if longer range versions of the aeroplane are operated.", vbExclamation, "CORSIA CERT") = 1 Then
        End If
    End If
    
    If (Max_Fuel_Tank_Cap_GCD_Found = True Or Max_Fuel_Tank_Cap_BT_Found = True) Then
        If MsgBox("Warning: " & vbCrLf & vbCrLf & "It appears that for " & Max_Fuel_Tank_Cap_GCD_Records + Max_Fuel_Tank_Cap_BT_Records & " flight entry(ies), the average reported and/or estimated fuel (and resulting CO2 emissions) per flight exceed the ICAO CORSIA CERT default maximum fuel tank capacity value for that ICAO Aircraft Type and/or Custom aeroplane code. " & vbCrLf & vbCrLf & "In order to avoid a possible overestimation of CO2 emissions, you may check the following flight entries flagged with 'Fuel Cap.' " & vbCrLf & vbCrLf & "Note that this warning message may be ignored since individual maximum fuel tank capacity and fuel tank configuration can differ from the ICAO CORSIA CERT default values (e.g., some aeroplanes can have additional fuel tanks which could be one explanation). ", vbExclamation, "CORSIA CERT") = 1 Then
        End If
    End If
        
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    
    
End If

UserForm6.Hide
Unload UserForm6

Exit Sub
UserForm6.Hide
Unload UserForm6

Handler:
If MsgBox("Error: Unable to compute CO2 Estimation with entered information." & vbCrLf & vbCrLf & "Please check that required input was entered correctly." & vbCrLf & vbCrLf & "Please make sure you also check the entered information against the underlying CERT database" & vbCrLf & vbCrLf & "If the problem continues, please contact CERT@icao.int", vbExclamation, "CORSIA CERT") = 1 Then
End If
UserForm6.Hide
Unload UserForm6

End Sub


Sub ER_Calculate_CO2_Emissions_Button()

ThisWorkbook.Unprotect Password:="CORSIACERT2019P"

Dim k As Double
Dim xx As Double
Dim num_flights As Range

ER_Warning_whole_number = False

Application.ScreenUpdating = False

On Error GoTo Handler:

If ((Sheet36.Range("M8") + Sheet36.Range("M12")) = 0) Then
    Sheet36.Activate
    'Sheet36.Range("A1").Select
    If MsgBox("Warning: " & vbCrLf & vbCrLf & " Please choose one of the options for using the ICAO CORSIA CERT i.e., as primary monitoring method or for data gap filling purposes", vbExclamation, "CORSIA CERT") = 1 Then
        Exit Sub
    End If
End If


' Missing ac type information as input
If IsEmpty(Sheet9.Range("D12")) = True Then
    If MsgBox("Stop: Failed Calculation of CO2 Emissions " & vbCrLf & vbCrLf & "Ensure that aircraft type information is entered correctly", vbExclamation, "CORSIA CERT") = 1 Then
        UserForm6.Hide
        Application.EnableEvents = True
        Application.Calculation = xlCalculationAutomatic
        Exit Sub
    End If
End If

' Run Check of Missing Aircraft Types or Airports in CERT databases
If MsgBox("Would you like to compare the input aeroplane and aerodrome information against the ICAO CORSIA CERT Aeroplane database and the ICAO Doc 7910 to identify any aeroplane and/or aerodrome(s) that require any user input?", vbYesNo, "CORSIA CERT") = 6 Then
    UserForm5.Show
    
    If (ER_Custom_ac_count_needed > 0 Or ER_Custom_ap_count_needed > 0) Then
        
        UserForm5.Hide
        Unload UserForm5
        
        If (ER_Custom_ac_count_needed > 0 And ER_Custom_ac_count_needed <= 100) Then
            Sheet14.Activate
            Sheet14.Range("E10").Select
            Exit Sub
        End If
        
        If (ER_Custom_ap_count_needed > 0 And ER_Custom_ap_count_needed <= 300) Then
            Sheet39.Activate
            Sheet39.Range("C10").Select
            Exit Sub
        End If
        
    Else
    
        ' Check if the Number of Flights column has been populated
                
        ER_Nb_Flight_Entries_StartRow = 11
        If Sheet9.Range("D" & ER_Nb_Flight_Entries_StartRow + 1) <> "" Then
            
            ER_Nb_Flight_Entries = Sheet9.Range("D" & ER_Nb_Flight_Entries_StartRow, Sheet9.Range("D" & ER_Nb_Flight_Entries_StartRow).End(xlDown)).Rows.Count - 1
                                
            'Check consistency of flight entries
            If (Sheet9.Range("D" & 11, Sheet9.Range("D" & 11).End(xlDown)).Rows.Count <> Sheet9.Range("E" & 11, Sheet9.Range("E" & 11).End(xlDown)).Rows.Count) Or (Sheet9.Range("D" & 11, Sheet9.Range("D" & 11).End(xlDown)).Rows.Count <> Sheet9.Range("F" & 11, Sheet9.Range("F" & 11).End(xlDown)).Rows.Count) Then
                If MsgBox("Stop: " & vbCrLf & vbCrLf & "Ensure that flight entries (i.e., ICAO Aircraft Type Designator, Origin Aerodrome, and/or Destination Aerodrome) do not include blanks.", vbCritical, "CORSIA CERT") = 1 Then
                End If
                Exit Sub
            End If
                                
                                
            Set num_flights = Sheet9.Range("G" & ER_Nb_Flight_Entries_StartRow + 1, "G" & ER_Nb_Flight_Entries_StartRow + ER_Nb_Flight_Entries)
            xx = 0
            
            ' Identification of missing flight numbers
            For k = 1 To ER_Nb_Flight_Entries
                If num_flights(k) = "" Then
                    xx = xx + 1
                End If
            Next k
        
            ' Convert Input to Ucase
            With Sheet9.Range("D12:F" & ER_Nb_Flight_Entries_StartRow + ER_Nb_Flight_Entries)
                .Value = Evaluate("INDEX(UPPER(" & .Address(External:=True) & "),)")
            End With
        End If
        
        ' Auto populate Number of flights
        If xx > 0 Then
            ER_auto_populate_numflights xx, num_flights, ER_Nb_Flight_Entries
        End If
        
        ' Check for non-integer flight numbers
                
        If Sheet9.Range("D" & ER_Nb_Flight_Entries_StartRow + 1) <> "" Then
            
            For k = 1 To ER_Nb_Flight_Entries
                If (Sheet9.Range("G" & k + 11) - Round(Sheet9.Range("G" & k + 11)) <> 0 Or (Sheet9.Range("G" & k + 11) <> "" And Sheet9.Range("G" & k + 11) < 1)) Then
                    ER_Warning_whole_number = True
                
                End If
            Next k
            If (ER_Warning_whole_number = True) Then
                If MsgBox("Stop: " & vbCrLf & vbCrLf & "Ensure that the field Total Number of FLights contains rounded numbers at least equal to 1 (i.e., 0, negative or fraction of flights are not appropriate entries)", vbCritical, "CORSIA CERT") = 1 Then
                End If
                Exit Sub
            End If
        
        End If
        
        Sheet9.Activate
        
        ' Run computation of CO2 Emissions
        UserForm6.Show
    End If
    
Else
        
        ' Check if the Number of Flights column has been populated
              
        ER_Nb_Flight_Entries_StartRow = 11
        If Sheet9.Range("D" & ER_Nb_Flight_Entries_StartRow + 1) <> "" Then
            
            ER_Nb_Flight_Entries = Sheet9.Range("D" & ER_Nb_Flight_Entries_StartRow, Sheet9.Range("D" & ER_Nb_Flight_Entries_StartRow).End(xlDown)).Rows.Count - 1
                                
             'Check consistency of flight entries
            If (Sheet9.Range("D" & 11, Sheet9.Range("D" & 11).End(xlDown)).Rows.Count <> Sheet9.Range("E" & 11, Sheet9.Range("E" & 11).End(xlDown)).Rows.Count) Or (Sheet9.Range("D" & 11, Sheet9.Range("D" & 11).End(xlDown)).Rows.Count <> Sheet9.Range("F" & 11, Sheet9.Range("F" & 11).End(xlDown)).Rows.Count) Then
                If MsgBox("Stop: " & vbCrLf & vbCrLf & "Ensure that flight entries (i.e., ICAO Aircraft Type Designator, Origin Aerodrome, and/or Destination Aerodrome) do not include blanks.", vbCritical, "CORSIA CERT") = 1 Then
                End If
                Exit Sub
            End If
                                
            Set num_flights = Sheet9.Range("G" & ER_Nb_Flight_Entries_StartRow + 1, "G" & ER_Nb_Flight_Entries_StartRow + ER_Nb_Flight_Entries)
            xx = 0
            
            ' Identification of missing flight numbers
            For k = 1 To ER_Nb_Flight_Entries
                If num_flights(k, 1) = "" Then
                    xx = xx + 1
                End If
            Next k
        
            ' Convert Input to Ucase
            With Sheet9.Range("D12:F" & ER_Nb_Flight_Entries_StartRow + ER_Nb_Flight_Entries)
                .Value = Evaluate("INDEX(UPPER(" & .Address(External:=True) & "),)")
            End With
        End If
        
        ' Auto populate Number of flights
        If xx > 0 Then
            ER_auto_populate_numflights xx, num_flights, ER_Nb_Flight_Entries
        End If
        
        ' Check for non-integer flight numbers

        If Sheet9.Range("D" & ER_Nb_Flight_Entries_StartRow + 1) <> "" Then
            
            For k = 1 To ER_Nb_Flight_Entries
                If (Sheet9.Range("G" & k + 12) - Round(Sheet9.Range("G" & k + 12)) <> 0 Or (Sheet9.Range("G" & k + 12) <> "" And Sheet9.Range("G" & k + 12) < 1)) Then
                    ER_Warning_whole_number = True
                
                End If
            Next k
            If (ER_Warning_whole_number = True) Then
                If MsgBox("Stop: " & vbCrLf & vbCrLf & "Ensure that the field Total Number of FLights contains rounded numbers at least equal to 1 (i.e., 0, negative or fraction of flights are not appropriate entries)", vbCritical, "CORSIA CERT") = 1 Then
                End If
                Exit Sub
            End If
        
        End If
        
        Sheet9.Activate
        ' Run computation of CO2 Emissions
        UserForm6.Show
    
End If

ThisWorkbook.Protect Password:="CORSIACERT2019P"

Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic

Exit Sub

Handler:
If MsgBox("Error: Unable to complete assessment." & vbCrLf & vbCrLf & "Please check that required input was entered correctly." & vbCrLf & vbCrLf & "If the problem continues, please contact CERT@icao.int", vbExclamation, "CORSIA CERT") = 1 Then
End If

Application.ScreenUpdating = True

ThisWorkbook.Protect Password:="CORSIACERT2019P"

End Sub


Sub ER_progress(ER_pctCompl As Single)

UserForm6.Text.Caption = ER_pctCompl & "% Completed"
UserForm6.Bar.Width = ER_pctCompl * 2
DoEvents

End Sub


Attribute VB_Name = "ER_c_Fill_ER_with_CO2_Est"
Option Explicit

Public ER_pctCompl_display_GSA_1 As Single
Public ER_pctCompl_GSA_1 As Single
Public ER_Reporting_Level As String

Sub ER_Fill_ER_CO2()
    
    UserForm7.Show

End Sub

Sub ER_Populate_ER_with_CO2_Info()

ER_Reporting_Level = Sheet22.Range("C11")

If (ER_Reporting_Level = "") Then
    If MsgBox("Warning: " & vbCrLf & vbCrLf & "Ensure that the appropriate level of aggregation of reported data is entered.", vbExclamation, "CORSIA CERT") = 1 Then
    End If
    Sheet22.Activate
    Sheet22.Range("C11").Select
    UserForm7.Hide
End If

If (ER_Reporting_Level = "reporting on a State pair level") Then
    ER_Populate_ER_with_CO2_Info_State_Pair_Level
End If

If (ER_Reporting_Level = "reporting on an aerodrome pair level") Then
    ER_Populate_ER_with_CO2_Info_Aerodrome_Pair_Level
End If

End Sub


Sub ER_Populate_ER_with_CO2_Info_State_Pair_Level()

Application.ScreenUpdating = False

ThisWorkbook.Unprotect Password:="CORSIACERT2019P"

On Error GoTo Handler:

' Run GCD models in case the user has made any updates
ER_Calculate_CO2_Emissions_Button


' Clear 5.2 Report
Sheet24.Range("M16").MergeArea.ClearContents
Sheet24.Range("M18").MergeArea.ClearContents

Sheet24.Range("C55:L1048576").ClearContents
Sheet24.Range("N55:N1048576").ClearContents
   
Sheet24.Range("H25:N28").ClearContents

' Declare variables
Dim StartRow1, StartRow2 As Double

Dim ICAO_Member_State_Apt1 As Variant
Dim ICAO_Member_State_Apt2 As Variant

Dim State_pair_scope() As Variant
Dim StartRow, NumRows As Double

Dim total_co2_international As Double
Dim total_co2_domestic As Double
Dim k As Double
Dim j As Double
Dim n As Double
Dim f As Integer

Dim Nb_Flight_Entries As Double

Dim Custom_ap_count_existing As Integer
Dim Nb_Airport_CERTdb As Integer

Dim Airport_ICAO_code() As String
Dim Airport_ICAO_Member_State() As String

Dim Input_Airport_Code_Origin() As String
Dim Input_Airport_Code_Dest() As String
Dim Input_Nb_Flights() As Double

Dim Input_Fuel_Use() As Double
Dim Input_Fuel_Type() As String
'Dim Input_Data_Gap_Ref As Range

Dim Input_Data_Gap() As String
Dim Input_CO2_Emissions() As Double
Dim Input_OD_Scope() As String

Dim Total_Fuel_Use(1 To 4) As Double

Dim State_Pair_CO2_Emissions_CERT(1 To 193, 1 To 193) As Double
Dim State_Pair_Nb_Flights_CERT(1 To 193, 1 To 193) As Double
Dim State_Pair_CO2_Emissions_FUMM(1 To 193, 1 To 193, 1 To 4) As Double
Dim State_Pair_Nb_Flights_FUMM(1 To 193, 1 To 193, 1 To 4) As Double
Dim State_Pair_O_Index_CERT As Double
Dim State_Pair_D_Index_CERT As Double
Dim State_Pair_O_Index_FUMM As Double
Dim State_Pair_D_Index_FUMM As Double

Dim o As Double
Dim d As Double
Dim Nb_Unique_State_Pairs As Double
Dim Nb_International_Flights As Double
Dim Nb_International_Flights_with_Data_Gaps As Double

Dim ICAO_Member_State(1 To 193) As String

Dim CheckBox_CERT_GCD As CheckBox
Dim CheckBox_CERT_BT As CheckBox
Dim CheckBox_FUMM_GCD As CheckBox
Dim CheckBox_FUMM_BT As CheckBox

Set CheckBox_CERT_GCD = Sheet36.Shapes("Check Box 1").OLEFormat.Object ' Form Control
Set CheckBox_CERT_BT = Sheet36.Shapes("Check Box 2").OLEFormat.Object ' Form Control
Set CheckBox_FUMM_GCD = Sheet36.Shapes("Check Box 3").OLEFormat.Object ' Form Control
Set CheckBox_FUMM_BT = Sheet36.Shapes("Check Box 4").OLEFormat.Object ' Form Control

Nb_International_Flights = 0
Nb_International_Flights_with_Data_Gaps = 0
Wrong_Type_Fuel_Input_Count = 0
Wrong_Type_Fuel_Input = False

' Initialize Tables
For o = 1 To 193
    For d = 1 To 193
        State_Pair_CO2_Emissions_CERT(o, d) = 0
        State_Pair_Nb_Flights_CERT(o, d) = 0
        For f = 1 To 4
            State_Pair_CO2_Emissions_FUMM(o, d, f) = 0
            State_Pair_Nb_Flights_FUMM(o, d, f) = 0
        Next f
    Next d
Next o

For f = 1 To 4
    Total_Fuel_Use(f) = 0
Next f

' Read ICAO Member State
Sheet1.Activate
For o = 1 To 193
    ICAO_Member_State(o) = Sheet1.Cells(1 + o, 1)
Next o

' Read airport information
Sheet42.Activate
Nb_Airport_CERTdb = Sheet42.Range("B2", Sheet42.Range("B2").End(xlDown)).Rows.Count

Sheet39.Activate
If Sheet39.Range("C10") <> 0 Then
    Custom_ap_count_existing = Sheet39.Range("C9", Sheet39.Range("C9").End(xlDown)).Rows.Count - 1
End If

ReDim Airport_ICAO_code(1 To Nb_Airport_CERTdb + Custom_ap_count_existing)
ReDim Airport_ICAO_Member_State(1 To Nb_Airport_CERTdb + Custom_ap_count_existing)

If Custom_ap_count_existing > 0 Then
    For n = 1 To Custom_ap_count_existing
        Airport_ICAO_code(n) = Sheet39.Cells(n + 9, 3)
        For k = 1 To 193
            If (UCase(Sheet39.Cells(n + 9, 11)) = UCase(Sheet1.Cells(1 + k, 1))) Then
                Airport_ICAO_Member_State(n) = Sheet1.Cells(1 + k, 1)
            End If
        Next k
    Next n
End If

For n = 1 To Nb_Airport_CERTdb
    Airport_ICAO_code(n + Custom_ap_count_existing) = Sheet42.Cells(n + 1, 1)
    Airport_ICAO_Member_State(n + Custom_ap_count_existing) = Sheet42.Cells(n + 1, 6)
Next n

StartRow2 = 11
Sheet9.Activate
If Sheet9.Range("D12") <> "" Then
    
    Nb_Flight_Entries = Sheet9.Range("D11", Sheet9.Range("D11").End(xlDown)).Rows.Count - 1
        
    ReDim Input_Airport_Code_Origin(1 To Nb_Flight_Entries)
    ReDim Input_Airport_Code_Dest(1 To Nb_Flight_Entries)
    ReDim Input_Nb_Flights(1 To Nb_Flight_Entries)
    
    ReDim Input_Fuel_Use(1 To Nb_Flight_Entries)
    ReDim Input_Fuel_Type(1 To Nb_Flight_Entries)
    ReDim Input_Data_Gap_Ref(1 To Nb_Flight_Entries)
    
    ReDim Input_Data_Gap(1 To Nb_Flight_Entries)
    ReDim Input_CO2_Emissions(1 To Nb_Flight_Entries)
    ReDim Input_OD_Scope(1 To Nb_Flight_Entries)
        
    For n = 1 To Nb_Flight_Entries
        Input_Airport_Code_Origin(n) = Sheet9.Range("E" & StartRow2 + n)
        Input_Airport_Code_Dest(n) = Sheet9.Range("F" & StartRow2 + n)
        Input_Nb_Flights(n) = Sheet9.Range("G" & StartRow2 + n)
        Input_Fuel_Use(n) = Sheet9.Range("I" & StartRow2 + n)
        Input_Fuel_Type(n) = Sheet9.Range("J" & StartRow2 + n)
        Input_Data_Gap_Ref(n) = Sheet9.Range("K" & StartRow2 + n)
        Input_Data_Gap(n) = Sheet9.Range("L" & StartRow2 + n)
        Input_CO2_Emissions(n) = Sheet9.Range("N" & StartRow2 + n)
        Input_OD_Scope(n) = Sheet9.Range("O" & StartRow2 + n)
    
        ' Check Valid Type of Fuel input on import
        If (Input_Fuel_Type(n) <> "Jet-A" And Input_Fuel_Type(n) <> "Jet-A1" And Input_Fuel_Type(n) <> "Jet-B" And Input_Fuel_Type(n) <> "AvGas" And Input_Fuel_Type(n) <> "") Then
                Wrong_Type_Fuel_Input = True
                Wrong_Type_Fuel_Input_Count = Wrong_Type_Fuel_Input_Count + 1
        End If
                    
    Next n
Else

    If MsgBox("Warning: Ensure that one or more flights are entered", vbExclamation, "CORSIA CERT") = 1 Then
    End If

End If

' Wrong Type of Fuel Message
If (Wrong_Type_Fuel_Input = True) Then
    If (Wrong_Type_Fuel_Input_Count = 1) Then
        If MsgBox("Stop: " & vbCrLf & vbCrLf & "One flight entry with actual fuel use is not assigned to an appropriate Type of Fuel." & vbCrLf & vbCrLf & "The following Types of Fuel are acceptable: Jet-A, Jet-A1, Jet-B and AvGas. Note that the Type of Fuel selected can include equivalent fuels." & vbCrLf & vbCrLf & "Please review the input file and/or correct the flight entry to an appropriate Type of Fuel in order to ensure accurate allocation of actual fuel use in the Emissions Report.", vbCritical, "CORSIA CERT") = 1 Then
        Sheet9.Range("L12:P1000000").ClearContents
        UserForm7.Hide
        Unload UserForm7
        Exit Sub
        End If
    Else
        If MsgBox("Stop: " & vbCrLf & vbCrLf & "It appears that " & Wrong_Type_Fuel_Input_Count & " flight entries with actual fuel use are not assigned to an appropriate Type of Fuel." & vbCrLf & vbCrLf & "The following Types of Fuel are acceptable: Jet-A, Jet-A1, Jet-B and AvGas. Note that the Type of Fuel selected can include equivalent fuels." & vbCrLf & vbCrLf & "Please review the input file and/or correct the flight entries to an appropriate Type of Fuel in order to ensure accurate allocation of actual fuel use in the Emissions Report.", vbCritical, "CORSIA CERT") = 1 Then
        Sheet9.Range("L12:P1000000").ClearContents
        UserForm7.Hide
        Unload UserForm7
        Exit Sub
        End If
    End If
End If


' Initialize variable to store total co2
total_co2_international = 0
total_co2_domestic = 0
j = 1
ReDim State_pair_scope(1 To Nb_Flight_Entries)

For k = 1 To Nb_Flight_Entries
    
    'Status bar
    ER_pctCompl_GSA_1 = Round(100 * k / Nb_Flight_Entries, 0)
    If (ER_pctCompl_display_GSA_1 <> ER_pctCompl_GSA_1) Then
        ER_pctCompl_display_GSA_1 = ER_pctCompl_GSA_1
        ER_progress_GSA_1 (ER_pctCompl_display_GSA_1)
    End If
    
    ' Aggregated CO2 Emission by State Pair
    If Input_OD_Scope(k) = "Yes" Then
        
        Nb_International_Flights = Nb_International_Flights + Input_Nb_Flights(k)
        
        'State Pairs CERT
        If (CheckBox_CERT_GCD.Value = 1 Or CheckBox_CERT_BT.Value = 1 Or (CheckBox_FUMM_GCD.Value = 1 And Input_Data_Gap(k) = "Yes") Or (CheckBox_FUMM_BT.Value = 1 And Input_Data_Gap(k) = "Yes")) Then
            State_Pair_O_Index_CERT = N_InArray(Airport_ICAO_Member_State(N_InArray(Input_Airport_Code_Origin(k), Airport_ICAO_code)), ICAO_Member_State)
            State_Pair_D_Index_CERT = N_InArray(Airport_ICAO_Member_State(N_InArray(Input_Airport_Code_Dest(k), Airport_ICAO_code)), ICAO_Member_State)
            State_Pair_CO2_Emissions_CERT(State_Pair_O_Index_CERT, State_Pair_D_Index_CERT) = State_Pair_CO2_Emissions_CERT(State_Pair_O_Index_CERT, State_Pair_D_Index_CERT) + Input_CO2_Emissions(k)
            State_Pair_Nb_Flights_CERT(State_Pair_O_Index_CERT, State_Pair_D_Index_CERT) = State_Pair_Nb_Flights_CERT(State_Pair_O_Index_CERT, State_Pair_D_Index_CERT) + Input_Nb_Flights(k)
            total_co2_international = total_co2_international + Input_CO2_Emissions(k)
        End If
        
        'State Pairs Fuel Use _ by Fuel Type
        If ((CheckBox_FUMM_GCD.Value = 1 And Not (Input_Data_Gap(k) = "Yes")) Or (CheckBox_FUMM_BT.Value = 1 And Not (Input_Data_Gap(k) = "Yes"))) Then
            'simplify
            State_Pair_O_Index_FUMM = N_InArray(Airport_ICAO_Member_State(N_InArray(Input_Airport_Code_Origin(k), Airport_ICAO_code)), ICAO_Member_State)
            State_Pair_D_Index_FUMM = N_InArray(Airport_ICAO_Member_State(N_InArray(Input_Airport_Code_Dest(k), Airport_ICAO_code)), ICAO_Member_State)
                
            If (Input_Fuel_Type(k) = "Jet-A") Then
                State_Pair_CO2_Emissions_FUMM(State_Pair_O_Index_FUMM, State_Pair_D_Index_FUMM, 1) = State_Pair_CO2_Emissions_FUMM(State_Pair_O_Index_FUMM, State_Pair_D_Index_FUMM, 1) + Input_Fuel_Use(k) * 3.16
                total_co2_international = total_co2_international + Input_Fuel_Use(k) * 3.16
                State_Pair_Nb_Flights_FUMM(State_Pair_O_Index_FUMM, State_Pair_D_Index_FUMM, 1) = State_Pair_Nb_Flights_FUMM(State_Pair_O_Index_FUMM, State_Pair_D_Index_FUMM, 1) + Input_Nb_Flights(k)
                Total_Fuel_Use(1) = Total_Fuel_Use(1) + Input_Fuel_Use(k)
            End If
            
            If (Input_Fuel_Type(k) = "Jet-A1") Then
                State_Pair_CO2_Emissions_FUMM(State_Pair_O_Index_FUMM, State_Pair_D_Index_FUMM, 2) = State_Pair_CO2_Emissions_FUMM(State_Pair_O_Index_FUMM, State_Pair_D_Index_FUMM, 2) + Input_Fuel_Use(k) * 3.16
                total_co2_international = total_co2_international + Input_Fuel_Use(k) * 3.16
                State_Pair_Nb_Flights_FUMM(State_Pair_O_Index_FUMM, State_Pair_D_Index_FUMM, 2) = State_Pair_Nb_Flights_FUMM(State_Pair_O_Index_FUMM, State_Pair_D_Index_FUMM, 2) + Input_Nb_Flights(k)
                Total_Fuel_Use(2) = Total_Fuel_Use(2) + Input_Fuel_Use(k)
            End If
            
            If (Input_Fuel_Type(k) = "Jet-B") Then
                State_Pair_CO2_Emissions_FUMM(State_Pair_O_Index_FUMM, State_Pair_D_Index_FUMM, 3) = State_Pair_CO2_Emissions_FUMM(State_Pair_O_Index_FUMM, State_Pair_D_Index_FUMM, 3) + Input_Fuel_Use(k) * 3.1
                total_co2_international = total_co2_international + Input_Fuel_Use(k) * 3.1
                State_Pair_Nb_Flights_FUMM(State_Pair_O_Index_FUMM, State_Pair_D_Index_FUMM, 3) = State_Pair_Nb_Flights_FUMM(State_Pair_O_Index_FUMM, State_Pair_D_Index_FUMM, 3) + Input_Nb_Flights(k)
                Total_Fuel_Use(3) = Total_Fuel_Use(3) + Input_Fuel_Use(k)
            End If
            
            If (Input_Fuel_Type(k) = "AvGas") Then
                State_Pair_CO2_Emissions_FUMM(State_Pair_O_Index_FUMM, State_Pair_D_Index_FUMM, 4) = State_Pair_CO2_Emissions_FUMM(State_Pair_O_Index_FUMM, State_Pair_D_Index_FUMM, 4) + Input_Fuel_Use(k) * 3.1
                total_co2_international = total_co2_international + Input_Fuel_Use(k) * 3.1
                State_Pair_Nb_Flights_FUMM(State_Pair_O_Index_FUMM, State_Pair_D_Index_FUMM, 4) = State_Pair_Nb_Flights_FUMM(State_Pair_O_Index_FUMM, State_Pair_D_Index_FUMM, 4) + Input_Nb_Flights(k)
                Total_Fuel_Use(4) = Total_Fuel_Use(4) + Input_Fuel_Use(k)
            End If
            
        End If
        
        If (Input_Data_Gap(k) = "Yes") Then
            Nb_International_Flights_with_Data_Gaps = Nb_International_Flights_with_Data_Gaps + Input_Nb_Flights(k)
        End If
        
    ElseIf IsNumeric(Input_CO2_Emissions(k)) And Input_OD_Scope(k) = "No (Domestic)" Then
        total_co2_domestic = total_co2_domestic + Input_CO2_Emissions(k)
    End If
    
Next k

' Clear 5.1 report contents
StartRow = 53
Sheet23.Range("K16").MergeArea.ClearContents
Sheet23.Range("K18").MergeArea.ClearContents

Sheet23.Range("I25:M28").ClearContents

Sheet23.Range("C54:J1048576").ClearContents
Sheet23.Range("L54:L1048576").ClearContents

' Populate total in the final report
Sheet23.Range("K16") = total_co2_international
Sheet23.Range("K18") = Nb_International_Flights

If (Nb_International_Flights_with_Data_Gaps > 0) Then
    Sheet25.Range("C11") = "yes"
    If (Nb_International_Flights_with_Data_Gaps / Nb_International_Flights > 0.05) Then
        Sheet25.Range("C21") = "yes"
    Else
        Sheet25.Range("C21") = "no"
    End If
    Sheet41.Range("C44") = Nb_International_Flights_with_Data_Gaps
    Sheet25.Range("C25") = Nb_International_Flights_with_Data_Gaps / Nb_International_Flights
Else
    Sheet25.Range("C11") = "no"
End If

Nb_Unique_State_Pairs = 0

Application.EnableEvents = False
Application.Calculation = xlCalculationManual
    
For o = 1 To 193
    For d = 1 To 193
        If (State_Pair_CO2_Emissions_CERT(o, d) > 0) Then
            Nb_Unique_State_Pairs = Nb_Unique_State_Pairs + 1
            Sheet23.Range("C" & StartRow + Nb_Unique_State_Pairs) = ICAO_Member_State(o)
            Sheet23.Range("E" & StartRow + Nb_Unique_State_Pairs) = ICAO_Member_State(d)
            Sheet23.Range("G" & StartRow + Nb_Unique_State_Pairs) = "yes"
            Sheet23.Range("H" & StartRow + Nb_Unique_State_Pairs) = State_Pair_Nb_Flights_CERT(o, d)
            Sheet23.Range("L" & StartRow + Nb_Unique_State_Pairs) = State_Pair_CO2_Emissions_CERT(o, d)
        End If
    
        For f = 1 To 4
            If (State_Pair_CO2_Emissions_FUMM(o, d, f) > 0) Then
                Nb_Unique_State_Pairs = Nb_Unique_State_Pairs + 1
                Sheet23.Range("C" & StartRow + Nb_Unique_State_Pairs) = ICAO_Member_State(o)
                Sheet23.Range("E" & StartRow + Nb_Unique_State_Pairs) = ICAO_Member_State(d)
                Sheet23.Range("G" & StartRow + Nb_Unique_State_Pairs) = "no"
                Sheet23.Range("H" & StartRow + Nb_Unique_State_Pairs) = State_Pair_Nb_Flights_FUMM(o, d, f)
                Sheet23.Range("L" & StartRow + Nb_Unique_State_Pairs) = State_Pair_CO2_Emissions_FUMM(o, d, f)
                If (f = 1) Then
                    Sheet23.Range("I" & StartRow + Nb_Unique_State_Pairs) = "Jet-A"
                    Sheet23.Range("J" & StartRow + Nb_Unique_State_Pairs) = State_Pair_CO2_Emissions_FUMM(o, d, f) / 3.16
                End If
                
                If (f = 2) Then
                    Sheet23.Range("I" & StartRow + Nb_Unique_State_Pairs) = "Jet-A1"
                    Sheet23.Range("J" & StartRow + Nb_Unique_State_Pairs) = State_Pair_CO2_Emissions_FUMM(o, d, f) / 3.16
                End If
                
                If (f = 3) Then
                    Sheet23.Range("I" & StartRow + Nb_Unique_State_Pairs) = "Jet-B"
                    Sheet23.Range("J" & StartRow + Nb_Unique_State_Pairs) = State_Pair_CO2_Emissions_FUMM(o, d, f) / 3.1
                End If
                
                If (f = 4) Then
                    Sheet23.Range("I" & StartRow + Nb_Unique_State_Pairs) = "AvGas"
                    Sheet23.Range("J" & StartRow + Nb_Unique_State_Pairs) = State_Pair_CO2_Emissions_FUMM(o, d, f) / 3.1
                End If
                
            End If
        Next f
    
    Next d
Next o
   
For f = 1 To 4
     Sheet23.Range("I" & 24 + f) = Total_Fuel_Use(f)
Next f

    Sheet23.Activate
    Sheet23.Range("K20").Select
   
ThisWorkbook.Protect Password:="CORSIACERT2019P"
   
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic

UserForm7.Hide
Unload UserForm7
ThisWorkbook.Protect Password:="CORSIACERT2019P"

Exit Sub
Handler:
If MsgBox("Error: Unable to complete assessment." & vbCrLf & vbCrLf & "Please check that required input was entered correctly." & vbCrLf & vbCrLf & "If the problem continues, please contact CERT@icao.int", vbExclamation, "CORSIA CERT") = 1 Then
End If
Calculate
ThisWorkbook.Protect Password:="CORSIACERT2019P"

Application.ScreenUpdating = True

End Sub


Sub ER_Populate_ER_with_CO2_Info_Aerodrome_Pair_Level()

Application.ScreenUpdating = False

ThisWorkbook.Unprotect Password:="CORSIACERT2019P"

On Error GoTo Handler:

' Clear 5.1 Content
Sheet23.Range("K16").MergeArea.ClearContents
Sheet23.Range("K18").MergeArea.ClearContents

Sheet23.Range("I25:M28").ClearContents

Sheet23.Range("C54:J1048576").ClearContents
Sheet23.Range("L54:L1048576").ClearContents

' Run GCD models in case the user has made any updates
ER_Calculate_CO2_Emissions_Button

' Declare variables
Dim StartRow1, StartRow2 As Double

Dim ICAO_Member_State_Apt1 As Variant
Dim ICAO_Member_State_Apt2 As Variant

Dim State_pair_scope() As Variant
Dim StartRow, NumRows As Double

Dim total_co2_international As Double
Dim total_co2_domestic As Double
Dim k As Double
Dim j As Double
Dim n As Double
Dim q As Double
Dim f As Integer

Dim Nb_Flight_Entries As Double

Dim Custom_ap_count_existing As Integer
Dim Nb_Airport_CERTdb As Integer

Dim Airport_ICAO_code() As String
Dim Airport_ICAO_Member_State() As String

Dim Input_Airport_Code_Origin() As String
Dim Input_Airport_Code_Dest() As String
Dim Input_Nb_Flights() As Double

Dim Input_Fuel_Use() As Double
Dim Input_Fuel_Type() As String
Dim Input_Aerodrome_Level_Common_Fields As String

Dim Input_Data_Gap() As String
Dim Input_CO2_Emissions() As Double
Dim Input_OD_Scope() As String

Dim Total_Fuel_Use(1 To 4) As Double

Dim Aggregated_Aerodrome_Level_Table_index As Double
Dim Aggregated_Aerodrome_Level_Table_Length As Double
Dim Aggregated_Aerodrome_Level_Table_Common_Fields As String

Dim Aggregated_Aerodrome_Level_Table_O() As String
Dim Aggregated_Aerodrome_Level_Table_D() As String
Dim Aggregated_Aerodrome_Level_Table_CERT() As String
Dim Aggregated_Aerodrome_Level_Table_CO2() As Double
Dim Aggregated_Aerodrome_Level_Table_Nb_Flights() As Double
Dim Aggregated_Aerodrome_Level_Table_Fuel_Use() As Double
Dim Aggregated_Aerodrome_Level_Table_Fuel_Type() As String
Dim Aggregated_Aerodrome_Level_Table_Record_Exist As Boolean

Dim CERT_Used As String

Dim o As Double
Dim d As Double
Dim Nb_Unique_State_Pairs As Double
Dim Nb_International_Flights As Double
Dim Nb_International_Flights_with_Data_Gaps As Double

Dim ICAO_Member_State(1 To 193) As String

Dim CheckBox_CERT_GCD As CheckBox
Dim CheckBox_CERT_BT As CheckBox
Dim CheckBox_FUMM_GCD As CheckBox
Dim CheckBox_FUMM_BT As CheckBox

Set CheckBox_CERT_GCD = Sheet36.Shapes("Check Box 1").OLEFormat.Object ' Form Control
Set CheckBox_CERT_BT = Sheet36.Shapes("Check Box 2").OLEFormat.Object ' Form Control
Set CheckBox_FUMM_GCD = Sheet36.Shapes("Check Box 3").OLEFormat.Object ' Form Control
Set CheckBox_FUMM_BT = Sheet36.Shapes("Check Box 4").OLEFormat.Object ' Form Control

Nb_International_Flights = 0
Nb_International_Flights_with_Data_Gaps = 0
Wrong_Type_Fuel_Input_Count = 0
Wrong_Type_Fuel_Input = False
ER_pctCompl_display_GSA_1 = 0

For f = 1 To 4
    Total_Fuel_Use(f) = 0
Next f

' Read ICAO Member State
Sheet1.Activate
For o = 1 To 193
    ICAO_Member_State(o) = Sheet1.Cells(1 + o, 1)
Next o

' Read airport information
Sheet42.Activate
Nb_Airport_CERTdb = Sheet42.Range("B2", Sheet42.Range("B2").End(xlDown)).Rows.Count

Sheet39.Activate
If Sheet39.Range("C10") <> 0 Then
    Custom_ap_count_existing = Sheet39.Range("C9", Sheet39.Range("C9").End(xlDown)).Rows.Count - 1
End If

ReDim Airport_ICAO_code(1 To Nb_Airport_CERTdb + Custom_ap_count_existing)
ReDim Airport_ICAO_Member_State(1 To Nb_Airport_CERTdb + Custom_ap_count_existing)

If Custom_ap_count_existing > 0 Then
    For n = 1 To Custom_ap_count_existing
        Airport_ICAO_code(n) = Sheet39.Cells(n + 9, 3)
        For k = 1 To 193
            If (UCase(Sheet39.Cells(n + 9, 11)) = UCase(Sheet1.Cells(1 + k, 1))) Then
                Airport_ICAO_Member_State(n) = Sheet1.Cells(1 + k, 1)
            End If
        Next k
    Next n
End If

For n = 1 To Nb_Airport_CERTdb
    Airport_ICAO_code(n + Custom_ap_count_existing) = Sheet42.Cells(n + 1, 1)
    Airport_ICAO_Member_State(n + Custom_ap_count_existing) = Sheet42.Cells(n + 1, 6)
Next n

StartRow2 = 11
Sheet9.Activate
If Sheet9.Range("D12") <> "" Then
    
    Nb_Flight_Entries = Sheet9.Range("D11", Sheet9.Range("D11").End(xlDown)).Rows.Count - 1
        
    ReDim Input_Airport_Code_Origin(1 To Nb_Flight_Entries)
    ReDim Input_Airport_Code_Dest(1 To Nb_Flight_Entries)
    ReDim Input_Nb_Flights(1 To Nb_Flight_Entries)
    
    ReDim Input_Fuel_Use(1 To Nb_Flight_Entries)
    ReDim Input_Fuel_Type(1 To Nb_Flight_Entries)
    ReDim Input_Data_Gap_Ref(1 To Nb_Flight_Entries)
    
    ReDim Input_Data_Gap(1 To Nb_Flight_Entries)
    ReDim Input_CO2_Emissions(1 To Nb_Flight_Entries)
    ReDim Input_OD_Scope(1 To Nb_Flight_Entries)
    
    ReDim Aggregated_Aerodrome_Level_Table_O(1 To Nb_Flight_Entries)
    ReDim Aggregated_Aerodrome_Level_Table_D(1 To Nb_Flight_Entries)
    ReDim Aggregated_Aerodrome_Level_Table_CERT(1 To Nb_Flight_Entries)
    ReDim Aggregated_Aerodrome_Level_Table_CO2(1 To Nb_Flight_Entries)
    ReDim Aggregated_Aerodrome_Level_Table_Nb_Flights(1 To Nb_Flight_Entries)
    ReDim Aggregated_Aerodrome_Level_Table_Fuel_Use(1 To Nb_Flight_Entries)
    ReDim Aggregated_Aerodrome_Level_Table_Fuel_Type(1 To Nb_Flight_Entries)
    
    For n = 1 To Nb_Flight_Entries
        Input_Airport_Code_Origin(n) = Sheet9.Range("E" & StartRow2 + n)
        Input_Airport_Code_Dest(n) = Sheet9.Range("F" & StartRow2 + n)
        Input_Nb_Flights(n) = Sheet9.Range("G" & StartRow2 + n)
        Input_Fuel_Use(n) = Sheet9.Range("I" & StartRow2 + n)
        Input_Fuel_Type(n) = Sheet9.Range("J" & StartRow2 + n)
        Input_Data_Gap_Ref(n) = Sheet9.Range("K" & StartRow2 + n)
        
        Input_Data_Gap(n) = Sheet9.Range("L" & StartRow2 + n)
        
        Input_CO2_Emissions(n) = Sheet9.Range("N" & StartRow2 + n)
        Input_OD_Scope(n) = Sheet9.Range("O" & StartRow2 + n)
        
        Aggregated_Aerodrome_Level_Table_CO2(n) = 0
        Aggregated_Aerodrome_Level_Table_Nb_Flights(n) = 0
        Aggregated_Aerodrome_Level_Table_Fuel_Use(n) = 0
        Aggregated_Aerodrome_Level_Table_Fuel_Type(n) = ""
        
        ' Check Valid Type of Fuel input on import
        If (Input_Fuel_Type(n) <> "Jet-A" And Input_Fuel_Type(n) <> "Jet-A1" And Input_Fuel_Type(n) <> "Jet-B" And Input_Fuel_Type(n) <> "AvGas" And Input_Fuel_Type(n) <> "") Then
                Wrong_Type_Fuel_Input = True
                Wrong_Type_Fuel_Input_Count = Wrong_Type_Fuel_Input_Count + 1
        End If
    Next n
Else

    If MsgBox("Warning: Ensure that one or more flights are entered", vbExclamation, "CORSIA CERT") = 1 Then
    End If

End If

' Wrong Type of Fuel Message
If (Wrong_Type_Fuel_Input = True) Then
    If (Wrong_Type_Fuel_Input_Count = 1) Then
        If MsgBox("Stop: " & vbCrLf & vbCrLf & "One flight entry with actual fuel use is not assigned to an appropriate Type of Fuel." & vbCrLf & vbCrLf & "The following Types of Fuel are acceptable: Jet-A, Jet-A1, Jet-B and AvGas. Note that the Type of Fuel selected can include equivalent fuels." & vbCrLf & vbCrLf & "Please review the input file and/or correct the flight entry to an appropriate Type of Fuel in order to ensure accurate allocation of actual fuel use in the Emissions Report.", vbCritical, "CORSIA CERT") = 1 Then
        Sheet9.Range("L12:P1000000").ClearContents
        UserForm7.Hide
        Unload UserForm7
        Exit Sub
        End If
    Else
        If MsgBox("Stop: " & vbCrLf & vbCrLf & "It appears that " & Wrong_Type_Fuel_Input_Count & " flight entries with actual fuel use are not assigned to an appropriate Type of Fuel." & vbCrLf & vbCrLf & "The following Types of Fuel are acceptable: Jet-A, Jet-A1, Jet-B and AvGas. Note that the Type of Fuel selected can include equivalent fuels." & vbCrLf & vbCrLf & "Please review the input file and/or correct the flight entries to an appropriate Type of Fuel in order to ensure accurate allocation of actual fuel use in the Emissions Report.", vbCritical, "CORSIA CERT") = 1 Then
        Sheet9.Range("L12:P1000000").ClearContents
        UserForm7.Hide
        Unload UserForm7
        Exit Sub
        End If
    End If
End If

' Initialize variable to store total co2
total_co2_international = 0
total_co2_domestic = 0
Aggregated_Aerodrome_Level_Table_index = 0
Aggregated_Aerodrome_Level_Table_Length = 0
j = 11
ReDim State_pair_scope(1 To Nb_Flight_Entries)

For k = 1 To Nb_Flight_Entries
    
    'Status bar
    ER_pctCompl_GSA_1 = Round(100 * k / Nb_Flight_Entries, 0)
    If (ER_pctCompl_display_GSA_1 <> ER_pctCompl_GSA_1) Then
        ER_pctCompl_display_GSA_1 = ER_pctCompl_GSA_1
        ER_progress_GSA_1 (ER_pctCompl_display_GSA_1)
    End If
    
    ' Aggregated CO2 Emission by State Pair
    If Input_OD_Scope(k) = "Yes" Then
        
        total_co2_international = total_co2_international + Input_CO2_Emissions(k)
        Nb_International_Flights = Nb_International_Flights + Input_Nb_Flights(k)
        
        If Input_CO2_Emissions(k) > 0 Then
            CERT_Used = "yes"
        Else
            CERT_Used = "no"
        End If
                
        Input_Aerodrome_Level_Common_Fields = Input_Airport_Code_Origin(k) & Input_Airport_Code_Dest(k) & CERT_Used & Input_Fuel_Type(k)
                
        Aggregated_Aerodrome_Level_Table_Record_Exist = False
        
        For q = 1 To Aggregated_Aerodrome_Level_Table_Length
            Aggregated_Aerodrome_Level_Table_Common_Fields = Aggregated_Aerodrome_Level_Table_O(q) & Aggregated_Aerodrome_Level_Table_D(q) & Aggregated_Aerodrome_Level_Table_CERT(q) & Aggregated_Aerodrome_Level_Table_Fuel_Type(q)
        
            If (Aggregated_Aerodrome_Level_Table_Common_Fields = Input_Aerodrome_Level_Common_Fields) Then
                Aggregated_Aerodrome_Level_Table_Record_Exist = True
                Aggregated_Aerodrome_Level_Table_index = q
            End If
        Next q

        If (Aggregated_Aerodrome_Level_Table_Record_Exist = True) Then
            
            Aggregated_Aerodrome_Level_Table_Nb_Flights(Aggregated_Aerodrome_Level_Table_index) = Aggregated_Aerodrome_Level_Table_Nb_Flights(Aggregated_Aerodrome_Level_Table_index) + Input_Nb_Flights(k)
            Aggregated_Aerodrome_Level_Table_Fuel_Use(Aggregated_Aerodrome_Level_Table_index) = Aggregated_Aerodrome_Level_Table_Fuel_Use(Aggregated_Aerodrome_Level_Table_index) + Input_Fuel_Use(k)
            Aggregated_Aerodrome_Level_Table_CO2(Aggregated_Aerodrome_Level_Table_index) = Aggregated_Aerodrome_Level_Table_CO2(Aggregated_Aerodrome_Level_Table_index) + Input_CO2_Emissions(k)
        
        Else
            Aggregated_Aerodrome_Level_Table_Length = Aggregated_Aerodrome_Level_Table_Length + 1
            
            Aggregated_Aerodrome_Level_Table_O(Aggregated_Aerodrome_Level_Table_Length) = Input_Airport_Code_Origin(k)
            Aggregated_Aerodrome_Level_Table_D(Aggregated_Aerodrome_Level_Table_Length) = Input_Airport_Code_Dest(k)
            Aggregated_Aerodrome_Level_Table_CERT(Aggregated_Aerodrome_Level_Table_Length) = CERT_Used
            Aggregated_Aerodrome_Level_Table_Fuel_Type(Aggregated_Aerodrome_Level_Table_Length) = Input_Fuel_Type(k)
            
            Aggregated_Aerodrome_Level_Table_Nb_Flights(Aggregated_Aerodrome_Level_Table_Length) = Input_Nb_Flights(k)
            Aggregated_Aerodrome_Level_Table_Fuel_Use(Aggregated_Aerodrome_Level_Table_Length) = Input_Fuel_Use(k)
            Aggregated_Aerodrome_Level_Table_CO2(Aggregated_Aerodrome_Level_Table_Length) = Input_CO2_Emissions(k)
            
        End If
        
        If (Input_Data_Gap(k) = "Yes") Then
            Nb_International_Flights_with_Data_Gaps = Nb_International_Flights_with_Data_Gaps + Input_Nb_Flights(k)
        End If
        
        If (Input_Fuel_Type(k) = "Jet-A") Then
            Total_Fuel_Use(1) = Total_Fuel_Use(1) + Input_Fuel_Use(k)
            total_co2_international = total_co2_international + Input_Fuel_Use(k) * 3.16
        End If
        
        If (Input_Fuel_Type(k) = "Jet-A1") Then
            Total_Fuel_Use(2) = Total_Fuel_Use(2) + Input_Fuel_Use(k)
            total_co2_international = total_co2_international + Input_Fuel_Use(k) * 3.16
        End If
        
        If (Input_Fuel_Type(k) = "Jet-B") Then
            Total_Fuel_Use(3) = Total_Fuel_Use(3) + Input_Fuel_Use(k)
            total_co2_international = total_co2_international + Input_Fuel_Use(k) * 3.1
        End If
        
        If (Input_Fuel_Type(k) = "AvGas") Then
            Total_Fuel_Use(4) = Total_Fuel_Use(4) + Input_Fuel_Use(k)
            total_co2_international = total_co2_international + Input_Fuel_Use(k) * 3.1
        End If
        
    ElseIf IsNumeric(Input_CO2_Emissions(k)) And Input_OD_Scope(k) = "No (Domestic)" Then
        total_co2_domestic = total_co2_domestic + Input_CO2_Emissions(k)
    End If
Next k

' Clear report contents
StartRow = 54

Sheet24.Range("M16").MergeArea.ClearContents
Sheet24.Range("M18").MergeArea.ClearContents

Sheet24.Range("H25:N28").ClearContents

Sheet24.Range("C55:L1048576").ClearContents
Sheet24.Range("N55:N1048576").ClearContents

' Populate total in the final report
Sheet24.Range("M16") = total_co2_international
Sheet24.Range("M18") = Nb_International_Flights

If (Nb_International_Flights_with_Data_Gaps > 0) Then
    Sheet25.Range("C11") = "yes"
    If (Nb_International_Flights_with_Data_Gaps / Nb_International_Flights > 0.05) Then
        Sheet25.Range("C21") = "yes"
    Else
        Sheet25.Range("C21") = "no"
    End If
    Sheet25.Range("C25") = Nb_International_Flights_with_Data_Gaps / Nb_International_Flights
Else
    Sheet25.Range("C11") = "no"
End If

Application.EnableEvents = False
Application.Calculation = xlCalculationManual
    
For q = 1 To Aggregated_Aerodrome_Level_Table_Length
    Sheet24.Range("C" & StartRow + q) = Aggregated_Aerodrome_Level_Table_O(q)
    Sheet24.Range("D" & StartRow + q) = Airport_ICAO_Member_State(N_InArray(Aggregated_Aerodrome_Level_Table_O(q), Airport_ICAO_code))
    Sheet24.Range("F" & StartRow + q) = Aggregated_Aerodrome_Level_Table_D(q)
    Sheet24.Range("G" & StartRow + q) = Airport_ICAO_Member_State(N_InArray(Aggregated_Aerodrome_Level_Table_D(q), Airport_ICAO_code))
    Sheet24.Range("I" & StartRow + q) = Aggregated_Aerodrome_Level_Table_CERT(q)
    Sheet24.Range("J" & StartRow + q) = Aggregated_Aerodrome_Level_Table_Nb_Flights(q)
    Sheet24.Range("K" & StartRow + q) = Aggregated_Aerodrome_Level_Table_Fuel_Type(q)
    Sheet24.Range("L" & StartRow + q) = Aggregated_Aerodrome_Level_Table_Fuel_Use(q)
    
    If Aggregated_Aerodrome_Level_Table_CERT(q) = "yes" Then
        Sheet24.Range("N" & StartRow + q) = Aggregated_Aerodrome_Level_Table_CO2(q)
        Sheet24.Range("K" & StartRow + q) = ""
        Sheet24.Range("L" & StartRow + q) = ""
    Else
        If (Aggregated_Aerodrome_Level_Table_Fuel_Type(q) = "Jet-A") Then
             Sheet24.Range("N" & StartRow + q) = Aggregated_Aerodrome_Level_Table_Fuel_Use(q) * 3.16
        End If
        
        If (Aggregated_Aerodrome_Level_Table_Fuel_Type(q) = "Jet-A1") Then
            Sheet24.Range("N" & StartRow + q) = Aggregated_Aerodrome_Level_Table_Fuel_Use(q) * 3.16
        End If
        
        If (Aggregated_Aerodrome_Level_Table_Fuel_Type(q) = "Jet-B") Then
            Sheet24.Range("N" & StartRow + q) = Aggregated_Aerodrome_Level_Table_Fuel_Use(q) * 3.1
        End If
        
        If (Aggregated_Aerodrome_Level_Table_Fuel_Type(q) = "AvGas") Then
            Sheet24.Range("N" & StartRow + q) = Aggregated_Aerodrome_Level_Table_Fuel_Use(q) * 3.1
        End If
    End If
    
Next q
   
For f = 1 To 4
     Sheet24.Range("H" & 24 + f) = Total_Fuel_Use(f)
Next f

Sheet24.Activate
Sheet24.Range("M20").Select
   
ThisWorkbook.Protect Password:="CORSIACERT2019P"
   
Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic

UserForm7.Hide
Unload UserForm7
ThisWorkbook.Protect Password:="CORSIACERT2019P"

Exit Sub
Handler:
If MsgBox("Error: Unable to complete assessment." & vbCrLf & vbCrLf & "Please check that required input was entered correctly." & vbCrLf & vbCrLf & "If the problem continues, please contact CERT@icao.int", vbExclamation, "CORSIA CERT") = 1 Then
End If
Calculate
ThisWorkbook.Protect Password:="CORSIACERT2019P"

Application.ScreenUpdating = True

End Sub

Sub ER_progress_GSA_1(pctCompl As Single)

UserForm7.Text_GSA_1.Caption = pctCompl & "% Completed"
UserForm7.Bar_GSA_1.Width = pctCompl * 2
DoEvents

End Sub

Attribute VB_Name = "ER_e_Generate_Reports"
Option Explicit


Sub Generate_ER_pdf_button()
    
    UserForm8.Show

    Sheet38.Activate
End Sub

Sub Generate_ER_pdf()

ThisWorkbook.Unprotect Password:="CORSIACERT2019P"

Dim ER_pdf_filename As String

On Error GoTo Handler:

Application.EnableEvents = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False
    
'Status bar
progress_GPDF (0)
    
' Clear the temp sheet
Sheet13.Activate
Sheet13.Range("B3:P100000").ClearContents

Sheet40.Activate
Sheet40.Range("B3:S1000000").ClearContents


'Print it to new sheet and generate PDF
Dim r_template, r1, r2, r3, r4, r5, r5_1, r5_2, r6, c3, c4, c_int2 As Range

Dim NumRows3, StartRow3 As Double
Dim NumRows2, StartRow2 As Double
Dim NumRows5_1, StartRow5_1 As Double
Dim NumRows5_2, StartRow5_2 As Double
Dim NumRows6, StartRow6 As Double

NumRows2 = 0
NumRows3 = 0
NumRows5_1 = 0
NumRows5_2 = 0
NumRows6 = 0

Dim Custom_ac_count_existing As Integer
Dim Custom_ap_count_existing As Integer

Dim FileFullname As String
Dim FolderName As String
Dim CERT_File_Name As String
Dim row_count As Double
Dim r As Double

Dim Row_Height As Integer

row_count = 0

FileFullname = Application.ActiveWorkbook.FullName
FolderName = Left(FileFullname, InStrRev(FileFullname, "\"))
CERT_File_Name = Right(FileFullname, Len(FileFullname) - InStrRev(FileFullname, "\"))

Set r_template = Sheet26.Range("B2:H24")
Set r1 = Sheet27.Range("B2:L118")

If (Len(Sheet28.Range("D78")) > 0) Then
    StartRow2 = 78
    NumRows2 = Sheet28.Range("D" & StartRow2, Sheet28.Range("D" & StartRow2).End(xlDown)).Rows.Count
    
    row_count = 0
    For r = 1 To NumRows2
        If (Len(Sheet28.Range("D" & r + StartRow2 - 1)) > 0) Then
            row_count = row_count + 1
        End If
    Next r
    NumRows2 = row_count
    
    Set r2 = Sheet28.Range("B2:L" & StartRow2 + NumRows2 + 1)
Else
    Set r2 = Sheet28.Range("B2:L78")
End If


If (Len(Sheet29.Range("D18")) > 0) Then
    StartRow3 = 18
    NumRows3 = Sheet29.Range("D" & StartRow3, Sheet29.Range("D" & StartRow3).End(xlDown)).Rows.Count
    
    row_count = 0
    For r = 1 To NumRows3
        If (Len(Sheet29.Range("D" & r + StartRow3 - 1)) > 0) Then
            row_count = row_count + 1
        End If
    Next r
    NumRows3 = row_count
    
    Set r3 = Sheet29.Range("B2:R" & StartRow3 + NumRows3 + 1)
Else
    Set r3 = Sheet29.Range("B2:R19")
End If

Set r4 = Sheet30.Range("B2:L16")
Set r5 = Sheet31.Range("B2:I15")


If (Len(Sheet32.Range("C54")) > 0) Then
    StartRow5_1 = 54
    NumRows5_1 = Sheet32.Range("C" & StartRow5_1, Sheet32.Range("C" & StartRow5_1).End(xlDown)).Rows.Count
    
    row_count = 0
    For r = 1 To NumRows5_1
        If (Len(Sheet32.Range("C" & r + StartRow5_1 - 1)) > 0) Then
            row_count = row_count + 1
        End If
    Next r
    NumRows5_1 = row_count
    
    Set r5_1 = Sheet32.Range("B2:N" & StartRow5_1 + NumRows5_1 + 1)
Else
    Set r5_1 = Sheet32.Range("B2:N55")
End If

If (Len(Sheet33.Range("C55")) > 0) Then
    StartRow5_2 = 55
    NumRows5_2 = Sheet33.Range("C" & StartRow5_2, Sheet33.Range("C" & StartRow5_2).End(xlDown)).Rows.Count
    row_count = 0
    For r = 1 To NumRows5_2
        If (Len(Sheet33.Range("C" & r + StartRow5_2 - 1)) > 0) Then
            row_count = row_count + 1
        End If
    Next r
    NumRows5_2 = row_count
   
    Set r5_2 = Sheet33.Range("B2:P" & StartRow5_2 + NumRows5_2 + 1)
Else
    Set r5_2 = Sheet33.Range("B2:P56")
End If

If (Len(Sheet34.Range("D37")) > 0) Then
    StartRow6 = 36
    NumRows6 = Sheet34.Range("D" & StartRow6, Sheet34.Range("D" & StartRow6).End(xlDown)).Rows.Count
    
    row_count = 0
    For r = 1 To NumRows6
        If (Len(Sheet34.Range("D" & StartRow6 + 1 + (r - 1) * 5)) > 0) Then
            row_count = row_count + 1
        End If
    Next r
    NumRows6 = row_count
   
    Set r6 = Sheet34.Range("B2:P" & StartRow6 + NumRows6 * 5)
Else
    Set r6 = Sheet34.Range("B2:P41")
End If


progress_GPDF (25)

r_template.Copy
Sheet40.Activate
ActiveSheet.Range("F3").Select
ActiveSheet.Paste

r1.Copy
Sheet40.Activate
ActiveSheet.Range("A30").Select
ActiveSheet.Paste

r2.Copy
Sheet40.Activate
ActiveSheet.Range("A" & 33 + 118).Select
ActiveSheet.Paste

r3.Copy
Sheet40.Activate
ActiveSheet.Range("A" & 33 + 118 + 78 + NumRows2).Select
ActiveSheet.Paste

r4.Copy
Sheet40.Activate
ActiveSheet.Range("A" & 33 + 118 + 78 + NumRows2 + 18 + NumRows3).Select
ActiveSheet.Paste

r5.Copy
Sheet40.Activate
ActiveSheet.Range("A" & 33 + 118 + 78 + NumRows2 + 18 + NumRows3 + 16).Select
ActiveSheet.Paste

r5_1.Copy
Sheet40.Activate
ActiveSheet.Range("A" & 33 + 118 + 78 + NumRows2 + 18 + NumRows3 + 16 + 15).Select
ActiveSheet.Paste

r5_2.Copy
Sheet40.Activate
ActiveSheet.Range("A" & 33 + 118 + 78 + NumRows2 + 18 + NumRows3 + 16 + 73 + NumRows5_1).Select
ActiveSheet.Paste

r6.Copy
Sheet40.Activate
ActiveSheet.Range("A" & 33 + 118 + 78 + NumRows2 + 18 + NumRows3 + 16 + 73 + NumRows5_1 + 60 + NumRows5_2).Select
ActiveSheet.Paste
With ActiveSheet.PageSetup
 .Orientation = xlPortrait
 .Zoom = False
 .FitToPagesWide = 1
 .FitToPagesTall = False
End With

progress_GPDF (50)

Sheet41.Range("C20") = CERT_File_Name
Sheet41.Range("K20") = FileDateTime(FileFullname)
Sheet41.Range("O20") = Round(GetDirOrFileSize(FolderName, CERT_File_Name) / 1000, 0)

Sheet40.Rows("7:" & 33 + 118 + 78 + NumRows2 + 15 + NumRows3 + 18 + 15 + 73 + NumRows5_1 + 60 + NumRows5_2 + 38 + NumRows6).Select
Sheet40.Rows("7:" & 33 + 118 + 78 + NumRows2 + 15 + NumRows3 + 18 + 15 + 73 + NumRows5_1 + 60 + NumRows5_2 + 38 + NumRows6).EntireRow.WrapText = True
Sheet40.Rows("7:" & 33 + 118 + 78 + NumRows2 + 15 + NumRows3 + 18 + 15 + 73 + NumRows5_1 + 60 + NumRows5_2 + 38 + NumRows6).EntireRow.AutoFit

Row_Height = 27

Sheet40.Rows(10).RowHeight = Row_Height
Sheet40.Rows(11).RowHeight = Row_Height
Sheet40.Rows(20).RowHeight = Row_Height
Sheet40.Rows(21).RowHeight = Row_Height
Sheet40.Rows(23).RowHeight = Row_Height
Sheet40.Rows(35).RowHeight = Row_Height
Sheet40.Rows(47).RowHeight = Row_Height
Sheet40.Rows(61).RowHeight = Row_Height
Sheet40.Rows(76).RowHeight = Row_Height
Sheet40.Rows(90).RowHeight = Row_Height
Sheet40.Rows(91).RowHeight = Row_Height
Sheet40.Rows(107).RowHeight = Row_Height
Sheet40.Rows(177).RowHeight = Row_Height
Sheet40.Rows(189).RowHeight = Row_Height
Sheet40.Rows(197).RowHeight = Row_Height
Sheet40.Rows(197).RowHeight = Row_Height
Sheet40.Rows(205).RowHeight = Row_Height
Sheet40.Rows(210).RowHeight = Row_Height
Sheet40.Rows(211).RowHeight = Row_Height
Sheet40.Rows(216).RowHeight = Row_Height
Sheet40.Rows(221).RowHeight = Row_Height + 12

Sheet40.Rows(227 + NumRows2 + 7).RowHeight = Row_Height
Sheet40.Rows(227 + NumRows2 + 8).RowHeight = Row_Height

Sheet40.Rows(227 + NumRows2 + 19 + NumRows3 + 6).RowHeight = Row_Height
Sheet40.Rows(227 + NumRows2 + 19 + NumRows3 + 22).RowHeight = Row_Height
Sheet40.Rows(227 + NumRows2 + 19 + NumRows3 + 23).RowHeight = Row_Height
Sheet40.Rows(227 + NumRows2 + 19 + NumRows3 + 61).RowHeight = Row_Height + 15
Sheet40.Rows(227 + NumRows2 + 19 + NumRows3 + 62).RowHeight = Row_Height
Sheet40.Rows(227 + NumRows2 + 19 + NumRows3 + 73).RowHeight = Row_Height
Sheet40.Rows(227 + NumRows2 + 19 + NumRows3 + 79).RowHeight = Row_Height
Sheet40.Rows(227 + NumRows2 + 19 + NumRows3 + 80).RowHeight = Row_Height
Sheet40.Rows(227 + NumRows2 + 19 + NumRows3 + 85 + NumRows5_1 + 9).RowHeight = Row_Height
Sheet40.Rows(227 + NumRows2 + 19 + NumRows3 + 85 + NumRows5_1 + 10).RowHeight = Row_Height
Sheet40.Rows(227 + NumRows2 + 19 + NumRows3 + 85 + NumRows5_1 + 34).RowHeight = Row_Height + 15
Sheet40.Rows(227 + NumRows2 + 19 + NumRows3 + 85 + NumRows5_1 + 36).RowHeight = Row_Height
Sheet40.Rows(227 + NumRows2 + 19 + NumRows3 + 85 + NumRows5_1 + 47).RowHeight = Row_Height
Sheet40.Rows(227 + NumRows2 + 19 + NumRows3 + 85 + NumRows5_1 + 53).RowHeight = Row_Height + 10
Sheet40.Rows(227 + NumRows2 + 19 + NumRows3 + 85 + NumRows5_1 + 59 + NumRows5_2 + 18).RowHeight = Row_Height
Sheet40.Rows(227 + NumRows2 + 19 + NumRows3 + 85 + NumRows5_1 + 59 + NumRows5_2 + 19).RowHeight = Row_Height
Sheet40.Rows(227 + NumRows2 + 19 + NumRows3 + 85 + NumRows5_1 + 59 + NumRows5_2 + 28).RowHeight = Row_Height
Sheet40.Rows(227 + NumRows2 + 19 + NumRows3 + 85 + NumRows5_1 + 59 + NumRows5_2 + 33).RowHeight = Row_Height

Sheet40.Range("A1:P" & 33 + 118 + 78 + NumRows2 + 17 + NumRows3 + 16 + 15 + 73 + NumRows5_1 + 60 + NumRows5_2 + 38 + NumRows6).Select

ER_pdf_filename = "CORSIA_2019ER_" & Format(Now(), "yyyy.mm.dd_hh.mm")

Sheet40.Visible = xlSheetVisible
Selection.ExportAsFixedFormat Type:=xlTypePDF, Filename:=FolderName & ER_pdf_filename & ".pdf", Quality:=xlQualityStandard, IncludeDocProperties:=True, IgnorePrintAreas:=True, OpenAfterPublish:=True
Sheet40.Visible = xlSheetHidden

Sheet41.Range("C23") = ER_pdf_filename & ".pdf"
Sheet41.Range("K23") = FileDateTime(FolderName & ER_pdf_filename & ".pdf")
Sheet41.Range("O23") = Round(GetDirOrFileSize(FolderName, ER_pdf_filename & ".pdf") / 1000, 0)

progress_GPDF (75)

Generate_Log_Assumptions_pdf

' AMEND
'Sheet40.Rows("2:" & 30 + 118 + 78 + NumRows2 + 17 + NumRows3 + 16 + 15 + 73 + NumRows5_1 + 60 + NumRows5_2 + 36 + NumRows6 * 5 + 30).EntireRow.Delete

ThisWorkbook.Protect Password:="CORSIACERT2019P"

progress_GPDF (1)

UserForm8.Hide
Unload UserForm8

Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic

Exit Sub
Handler:
If MsgBox("Error: Unable to complete assessment." & vbCrLf & vbCrLf & "Please check that required input was entered correctly." & vbCrLf & vbCrLf & "If the problem continues, please contact CERT@icao.int", vbExclamation, "CORSIA CERT") = 1 Then
End If
Sheet38.Activate

UserForm8.Hide
Unload UserForm8

    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True

Sheet38.Activate
Sheet38.Cells("A1").Select

ThisWorkbook.Protect Password:="CORSIACERT2019P"

End Sub


Sub Generate_Log_Assumptions_pdf()

ThisWorkbook.Unprotect Password:="CORSIACERT2019P"

On Error GoTo Handler:

Application.EnableEvents = False
Application.Calculation = xlCalculationManual
Application.ScreenUpdating = False

'Status bar
progress_GPDF (0)

Dim r3, r4 As Range
Dim Custom_ac_count_existing As Integer
Dim Custom_ap_count_existing As Integer

Dim FolderName_2 As String
Dim FileFullname_2 As String

FileFullname_2 = Application.ActiveWorkbook.FullName
FolderName_2 = Left(FileFullname_2, InStrRev(FileFullname_2, "\"))

Sheet14.Activate
If Sheet14.Range("C10") <> 0 Then
    Custom_ac_count_existing = Sheet14.Range("C" & 9, Sheet14.Range("C" & 9).End(xlDown)).Rows.Count - 1
    Set r3 = Sheet14.Range("B6:S" & 10 + Custom_ac_count_existing)
Else
    Custom_ac_count_existing = 0
    Set r3 = Sheet14.Range("B6:S" & 10)
End If

If Sheet39.Range("C10") <> 0 Then
    Custom_ap_count_existing = Sheet39.Range("C" & 9, Sheet39.Range("C" & 9).End(xlDown)).Rows.Count - 1
    Set r4 = Sheet39.Range("B7:Q" & 10 + Custom_ap_count_existing)
Else
    Custom_ap_count_existing = 0
    Set r4 = Sheet39.Range("B7:Q" & 10)
End If

progress_GPDF (50)

r3.Copy
Sheet41.Activate
ActiveSheet.Range("B53").Select
ActiveSheet.Paste

r4.Copy
Sheet41.Activate
ActiveSheet.Range("B" & 60 + Custom_ac_count_existing).Select
ActiveSheet.Paste
With ActiveSheet.PageSetup
 .Orientation = xlPortrait
 .Zoom = False
 .FitToPagesWide = 1
 .FitToPagesTall = False
 End With

Sheet41.Range("B1:Q" & 67 + Custom_ap_count_existing + Custom_ac_count_existing).Select

Sheet41.Visible = xlSheetVisible
Selection.ExportAsFixedFormat Type:=xlTypePDF, Filename:=FolderName_2 & "CORSIA_2019ER_Log_" & Format(Now(), "yyyy.mm.dd_hh.mm") & ".pdf", Quality:=xlQualityStandard, IncludeDocProperties:=True, IgnorePrintAreas:=True, OpenAfterPublish:=True
Sheet41.Visible = xlSheetHidden

Sheet41.Rows("53:" & 69 + Custom_ap_count_existing + Custom_ac_count_existing).EntireRow.Delete

ThisWorkbook.Protect Password:="CORSIACERT2019P"


progress_GPDF (1)

UserForm8.Hide
Unload UserForm8

Application.EnableEvents = True
Application.Calculation = xlCalculationAutomatic

Exit Sub
Handler:
If MsgBox("Error: Unable to complete assessment." & vbCrLf & vbCrLf & "Please check that required input was entered correctly." & vbCrLf & vbCrLf & "If the problem continues, please contact CERT@icao.int", vbExclamation, "CORSIA CERT") = 1 Then
End If
Sheet38.Activate

UserForm8.Hide
Unload UserForm8

    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True


ThisWorkbook.Protect Password:="CORSIACERT2019P"

Sheet38.Activate

End Sub



Sub progress_GPDF(pctCompl As Single)

UserForm8.Text_GPDF.Caption = pctCompl & "% Completed"
UserForm8.Bar_GPDF.Width = pctCompl * 2
DoEvents

End Sub


Sub ER_Export_ER_XLSX()

ThisWorkbook.Unprotect Password:="CORSIACERT2019P"
Application.ScreenUpdating = False

Dim FileFullname As String
Dim FolderName As String
Dim Export_ER_XLSX_Filename As String


Dim CERT_File_Name As String

'Status bar
progress_GPDF (0)

FileFullname = Application.ActiveWorkbook.FullName
FolderName = Left(FileFullname, InStrRev(FileFullname, "\"))
CERT_File_Name = Right(FileFullname, Len(FileFullname) - InStrRev(FileFullname, "\"))
    
    ActiveWorkbook.Sheets("Template Information").Visible = True
    ActiveWorkbook.Sheets("1 Identification").Visible = True
    ActiveWorkbook.Sheets("2 Underlying Basic Info").Visible = True
    ActiveWorkbook.Sheets("3 Aeroplane Fleet").Visible = True
    ActiveWorkbook.Sheets("4 Density").Visible = True
    ActiveWorkbook.Sheets("5 Reporting").Visible = True
    ActiveWorkbook.Sheets("5.1 Reporting-State Pairs").Visible = True
    ActiveWorkbook.Sheets("5.2 Reporting-Aerodrome Pairs").Visible = True
    ActiveWorkbook.Sheets("6 Data Gaps").Visible = True

    Worksheets(Array("Template Information", "1 Identification", "2 Underlying Basic Info", "3 Aeroplane Fleet", "4 Density", "5 Reporting", "5.1 Reporting-State Pairs", "5.2 Reporting-Aerodrome Pairs", "6 Data Gaps")).Copy
    
    Export_ER_XLSX_Filename = "CORSIA_2019ER_" & Format(Now(), "yyyy.mm.dd_hh.mm")
    
    With ActiveWorkbook
         .Colors = ThisWorkbook.Colors
         .SaveAs Filename:=FolderName & Export_ER_XLSX_Filename & ".xlsx", FileFormat:=xlOpenXMLWorkbook
    End With
        
    Application.ScreenUpdating = False
        
    Sheets("1 Identification").Cells.Copy
    Sheets("1 Identification").Cells.PasteSpecial Paste:=xlPasteValues
    Sheets("1 Identification").Select
    Range("A1").Select
    
    Sheets("2 Underlying Basic Info").Cells.Copy
    Sheets("2 Underlying Basic Info").Cells.PasteSpecial Paste:=xlPasteValues
    Sheets("2 Underlying Basic Info").Select
    Range("A1").Select
    
    Sheets("3 Aeroplane Fleet").Cells.Copy
    Sheets("3 Aeroplane Fleet").Cells.PasteSpecial Paste:=xlPasteValues
    Sheets("3 Aeroplane Fleet").Select
    Range("A1").Select
    
    Sheets("4 Density").Cells.Copy
    Sheets("4 Density").Cells.PasteSpecial Paste:=xlPasteValues
    Sheets("4 Density").Select
    Range("A1").Select
        
    Sheets("5 Reporting").Cells.Copy
    Sheets("5 Reporting").Cells.PasteSpecial Paste:=xlPasteValues
    Sheets("5 Reporting").Select
    Range("A1").Select
    
    Sheets("5.1 Reporting-State Pairs").Cells.Copy
    Sheets("5.1 Reporting-State Pairs").Cells.PasteSpecial Paste:=xlPasteValues
    Sheets("5.1 Reporting-State Pairs").Select
    Range("A1").Select
    
    Sheets("5.2 Reporting-Aerodrome Pairs").Cells.Copy
    Sheets("5.2 Reporting-Aerodrome Pairs").Cells.PasteSpecial Paste:=xlPasteValues
    Sheets("5.2 Reporting-Aerodrome Pairs").Select
    Range("A1").Select
    
    Sheets("6 Data Gaps").Cells.Copy
    Sheets("6 Data Gaps").Cells.PasteSpecial Paste:=xlPasteValues
    Sheets("6 Data Gaps").Select
    Range("A1").Select
    
    Sheets("Template Information").Select
    Range("A1").Select
    
    
    Sheet26.Visible = False
    Sheet27.Visible = False
    Sheet28.Visible = False
    Sheet29.Visible = False
    Sheet30.Visible = False
    Sheet31.Visible = False
    Sheet32.Visible = False
    Sheet33.Visible = False
    Sheet34.Visible = False
    
    Application.ScreenUpdating = True
    
'Status bar
progress_GPDF (50)
  
    Application.CutCopyMode = False
    
    Sheet41.Range("C20") = CERT_File_Name
    Sheet41.Range("K20") = FileDateTime(FileFullname)
    Sheet41.Range("O20") = Round(GetDirOrFileSize(FolderName, CERT_File_Name) / 1000, 0)

    Sheet41.Range("C23") = Export_ER_XLSX_Filename & ".xlsx"
    Sheet41.Range("K23") = FileDateTime(FolderName & Export_ER_XLSX_Filename & ".xlsx")
    Sheet41.Range("O23") = Round(GetDirOrFileSize(FolderName, Export_ER_XLSX_Filename & ".xlsx") / 1000, 0)
    
    Generate_Log_Assumptions_pdf

'Status bar
progress_GPDF (100)

Application.ScreenUpdating = True

ThisWorkbook.Protect Password:="CORSIACERT2019P"

Sheet38.Activate

End Sub

Sub ER_Export_CSV_CO2_Estimation()

Application.ScreenUpdating = False

Dim FileFullname As String
Dim FolderName As String
Dim Export_CSV_CO2_Filename As String

Dim Workbook As Workbook

Dim Range_Export As Range

Dim CERT_File_Name As String

FileFullname = Application.ActiveWorkbook.FullName
FolderName = Left(FileFullname, InStrRev(FileFullname, "\"))
CERT_File_Name = Right(FileFullname, Len(FileFullname) - InStrRev(FileFullname, "\"))
                
    ER_Nb_Flight_Entries_StartRow = 11
    If Sheet9.Range("D" & ER_Nb_Flight_Entries_StartRow + 1) <> "" Then
        ER_Nb_Flight_Entries = Sheet9.Range("D" & ER_Nb_Flight_Entries_StartRow, Sheet9.Range("D" & ER_Nb_Flight_Entries_StartRow).End(xlDown)).Rows.Count - 1
    End If

    Export_CSV_CO2_Filename = "CORSIA_2019ER_Input_Output" & Format(Now(), "yyyy.mm.dd_hh.mm")
    
    Set Range_Export = Sheet9.Range("B11:P" & 12 + ER_Nb_Flight_Entries + 1)
    
    Set Workbook = Workbooks.Add
    With Workbook
    Call Range_Export.Copy
        .Sheets(1).Range("A1").PasteSpecial Paste:=xlPasteValues
        .SaveAs Filename:=FolderName & Export_CSV_CO2_Filename & ".csv", FileFormat:=xlCSV
        .Close
    End With
            
    Sheet41.Range("C20") = CERT_File_Name
    Sheet41.Range("K20") = FileDateTime(FileFullname)
    Sheet41.Range("O20") = Round(GetDirOrFileSize(FolderName, CERT_File_Name) / 1000, 0)

    Sheet41.Range("C23") = Export_CSV_CO2_Filename & ".csv"
    Sheet41.Range("K23") = FileDateTime(FolderName & Export_CSV_CO2_Filename & ".csv")
    Sheet41.Range("O23") = Round(GetDirOrFileSize(FolderName, Export_CSV_CO2_Filename & ".csv") / 1000, 0)

Application.ScreenUpdating = True

Sheet38.Activate
End Sub


Sub ER_Export_CSV_Custom_AP_AC()

Application.ScreenUpdating = False

Dim FileFullname As String
Dim FolderName As String
Dim Export_CSV_Custom_AC_Filename As String
Dim Export_CSV_Custom_AP_Filename As String

Dim Workbook As Workbook

Dim Range_Export As Range

Dim CERT_File_Name As String

FileFullname = Application.ActiveWorkbook.FullName
FolderName = Left(FileFullname, InStrRev(FileFullname, "\"))
                
    Export_CSV_Custom_AC_Filename = "CORSIA_2019ER_Custom_AC" & Format(Now(), "yyyy.mm.dd_hh.mm")
    
    Sheet14.Range("C9:C109").Copy Destination:=Sheet3.Range("A1:A101")
    Sheet14.Range("E9:E109").Copy Destination:=Sheet3.Range("B1:B101")
    Sheet14.Range("J9:J109").Copy Destination:=Sheet3.Range("C1:C101")
    Sheet14.Range("L9:O109").Copy Destination:=Sheet3.Range("D1:G101")
    
    Set Range_Export = Sheet3.Range("A1:G101")
        
    Set Workbook = Workbooks.Add
    With Workbook
    Call Range_Export.Copy
        .Sheets(1).Range("A1").PasteSpecial Paste:=xlPasteValues
        .SaveAs Filename:=FolderName & Export_CSV_Custom_AC_Filename & ".csv", FileFormat:=xlCSV
        .Close
    End With
               
    Sheet3.Range("A1:G101").ClearContents
            
    Export_CSV_Custom_AP_Filename = "CORSIA_2019ER_Custom_AP" & Format(Now(), "yyyy.mm.dd_hh.mm")
   
    Sheet39.Range("C9:C309").Copy Destination:=Sheet3.Range("A1:A301")
    Sheet39.Range("E9:E309").Copy Destination:=Sheet3.Range("B1:B301")
    Sheet39.Range("I9:K309").Copy Destination:=Sheet3.Range("C1:E301")
    Sheet39.Range("N9:N309").Copy
    Sheet3.Range("F1:F301").PasteSpecial Paste:=xlPasteValues
    Sheet39.Range("P9:P309").Copy Destination:=Sheet3.Range("G1:G301")
    Set Range_Export = Sheet3.Range("A1:G301")
    
    Set Workbook = Workbooks.Add
    With Workbook
    Call Range_Export.Copy
        .Sheets(1).Range("A1").PasteSpecial Paste:=xlPasteValues
        .SaveAs Filename:=FolderName & Export_CSV_Custom_AP_Filename & ".csv", FileFormat:=xlCSV
        .Close
    End With
                      
    Sheet3.Range("A1:G301").ClearContents
 
Application.ScreenUpdating = True

Sheet38.Activate
End Sub



Function GetDirOrFileSize(strFolder As String, Optional strFile As Variant) As Long
  
  Dim lngFSize As Long, lngDSize As Long
  Dim oFO As Object
  Dim oFD As Object
  Dim OFS As Object
  
  lngFSize = 0
  Set OFS = CreateObject("Scripting.FileSystemObject")

  If strFolder = "" Then strFolder = ActiveWorkbook.Path
  If Right(strFolder, 1) <> "\" Then strFolder = strFolder & "\"
  
  If OFS.FolderExists(strFolder) Then
    If Not IsMissing(strFile) Then
      
      If OFS.FileExists(strFolder & strFile) Then
        Set oFO = OFS.GetFile(strFolder & strFile)
        GetDirOrFileSize = oFO.Size
      End If
      
      Else
        Set oFD = OFS.GetFolder(strFolder)
        GetDirOrFileSize = oFD.Size
      End If
  
  End If
  
End Function

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Public CalcState As Long
Public EventState As Boolean
Public PageBreakState As Boolean


Private Sub Worksheet_Change(ByVal Target As Range)
    Dim KeyCells As Range

Call OptimizeCode_Begin

    ' The variable KeyCells contains the cells that will
    ' cause an alert when they are changed.
    Set KeyCells = Range("C10:M1000")
    
    If Not Application.Intersect(KeyCells, Range(Target.Address)) _
           Is Nothing Then
        
        
        
        Application.ScreenUpdating = False

        Sheet7.Range("H12:J200000").ClearContents
        Sheet9.Range("L12:P1000000").ClearContents
        
        ' Clear 5.1 report contents
        Sheet23.Range("K16").MergeArea.ClearContents
        Sheet23.Range("K18").MergeArea.ClearContents
        Sheet23.Range("I25:M28").ClearContents
        Sheet23.Range("C54:J100000").ClearContents
        Sheet23.Range("L54:L100000").ClearContents
        
       ' Clear 5.2 Report
        Sheet24.Range("M16").MergeArea.ClearContents
        Sheet24.Range("M18").MergeArea.ClearContents
        Sheet24.Range("C55:L100000").ClearContents
        Sheet24.Range("N55:N100000").ClearContents
        Sheet24.Range("H25:N28").ClearContents
        
        ' Clear 6 report contents
        Sheet25.Range("C11").MergeArea.ClearContents
        Sheet25.Range("C21").MergeArea.ClearContents
        Sheet25.Range("C25").MergeArea.ClearContents
        
        Application.ScreenUpdating = True
        
        'Optimize Code
          
        
    End If
    
Call OptimizeCode_End

End Sub


Sub OptimizeCode_Begin()

Application.ScreenUpdating = False

EventState = Application.EnableEvents
Application.EnableEvents = False

CalcState = Application.Calculation
Application.Calculation = xlCalculationManual

PageBreakState = ActiveSheet.DisplayPageBreaks
ActiveSheet.DisplayPageBreaks = False

End Sub


Sub OptimizeCode_End()

ActiveSheet.DisplayPageBreaks = PageBreakState
Application.Calculation = CalcState
Application.EnableEvents = EventState
Application.ScreenUpdating = True

End Sub
Attribute VB_Name = "Sheet15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet19"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet21"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet22"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet23"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet24"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet25"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet27"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet28"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet29"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet30"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet32"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet33"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet34"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet35"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet36"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet37"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet38"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet39"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True



Private Sub Worksheet_Change(ByVal Target As Range)
    Dim KeyCells As Range
    Set KeyCells = Range("C10:O1000")
    
    If Not Application.Intersect(KeyCells, Range(Target.Address)) _
           Is Nothing Then

        Application.ScreenUpdating = False

        Sheet39.Range("P10:P309").ClearContents
        
        Sheet7.Range("H12:J200000").ClearContents
        'Sheet9.Range("L12:P1000000").ClearContents
        
        ' Clear 5.1 report contents
        Sheet23.Range("K16").MergeArea.ClearContents
        Sheet23.Range("K18").MergeArea.ClearContents
        Sheet23.Range("I25:M28").ClearContents
        Sheet23.Range("C54:J100000").ClearContents
        Sheet23.Range("L54:L100000").ClearContents
        
       ' Clear 5.2 Report
        Sheet24.Range("M16").MergeArea.ClearContents
        Sheet24.Range("M18").MergeArea.ClearContents
        Sheet24.Range("C55:L100000").ClearContents
        Sheet24.Range("N55:N100000").ClearContents
        Sheet24.Range("H25:N28").ClearContents
        
        ' Clear 6 report contents
        Sheet25.Range("C11").MergeArea.ClearContents
        Sheet25.Range("C21").MergeArea.ClearContents
        Sheet25.Range("C25").MergeArea.ClearContents
        
        Application.ScreenUpdating = True
        
    End If
End Sub

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet40"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet41"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet42"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Change(ByVal Target As Range)

    Dim KeyCells As Range

    Set KeyCells = Range("B12:G1000000")
    
    If Not Application.Intersect(KeyCells, Range(Target.Address)) _
           Is Nothing Then
        
        Application.ScreenUpdating = False
        
        Sheet7.Range("H12:J1000000").ClearContents
        
        ' Clear report contents
        Sheet12.Range("I38").MergeArea.ClearContents
        Sheet12.Range("I42").MergeArea.ClearContents
        Sheet12.Range("C58:P1000000").ClearContents
        
        Application.ScreenUpdating = True
        
   End If
End Sub


Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Change(ByVal Target As Range)

    Dim KeyCells As Range

    Set KeyCells = Range("D12:K1000000")
    
    If Not Application.Intersect(KeyCells, Range(Target.Address)) _
        Is Nothing Then

        Application.ScreenUpdating = False
        
        Sheet9.Range("L12:P500000").ClearContents
                
        ' Clear 5.1 report contents
        Sheet23.Range("K16").MergeArea.ClearContents
        Sheet23.Range("K18").MergeArea.ClearContents
        Sheet23.Range("I25:M28").ClearContents
        Sheet23.Range("C54:J10000").ClearContents
        Sheet23.Range("L54:L10000").ClearContents
        
       ' Clear 5.2 Report
        Sheet24.Range("M16").MergeArea.ClearContents
        Sheet24.Range("M18").MergeArea.ClearContents
        Sheet24.Range("C55:L100000").ClearContents
        Sheet24.Range("N55:N100000").ClearContents
        Sheet24.Range("H25:N28").ClearContents
        
        ' Clear 6 report contents
        Sheet25.Range("C11").MergeArea.ClearContents
        Sheet25.Range("C21").MergeArea.ClearContents
        Sheet25.Range("C25").MergeArea.ClearContents
        
        Application.ScreenUpdating = True
        
   End If
End Sub
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

'Private Sub Workbook_Open()

'Application.ScreenUpdating = False
'ActiveWorkbook.Unprotect ("CORSIACERT2019P")

'ActiveWorkbook.Sheets("Background").Visible = False
'ActiveWorkbook.Sheets("1. AO Info").Visible = False
'ActiveWorkbook.Sheets("2. CO2 Estimation").Visible = False
'ActiveWorkbook.Sheets("Custom_AC_AP").Visible = False
'ActiveWorkbook.Sheets("CERT_db_search").Visible = False
'ActiveWorkbook.Sheets("3. Summary Assessment").Visible = False

'ActiveWorkbook.Protect Structure:=True, Windows:=False, Password:="CORSIACERT2019P"
'Application.ScreenUpdating = True

'End Sub

Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{0ED7EFCD-2848-4097-9BC1-91CC33A0739B}{CAE002BE-FFFA-4330-9E4D-1E4C4B0FC753}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub UserForm_Initialize()
  
  Me.StartUpPosition = 0
  Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
  Me.Top = Application.Top + (0.25 * Application.Height) - (0.25 * Me.Height)

  Me.Height = 91.35
  Me.Width = 241.5
  
End Sub

Private Sub UserForm_Activate()

Compute_CO2_Emissions

End Sub

Attribute VB_Name = "UserForm2"
Attribute VB_Base = "0{EAB394A4-8AB7-45CC-9545-9C5F6459F7E2}{EE6B39DD-B3F3-456C-A5B6-895DD2A625EE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_Initialize()
  
  Me.StartUpPosition = 0
  Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
  Me.Top = Application.Top + (0.25 * Application.Height) - (0.25 * Me.Height)

  Me.Height = 167.3
  Me.Width = 238
  
End Sub

Private Sub UserForm_Activate()

Custom_Aircraft_Airport

End Sub

Attribute VB_Name = "UserForm3"
Attribute VB_Base = "0{E6C19F9D-EC62-4033-B1D2-E3159098824E}{9D73A56E-CA5D-4022-9C57-3FC4015A7743}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_Initialize()
  
  Me.StartUpPosition = 0
  Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
  Me.Top = Application.Top + (0.25 * Application.Height) - (0.25 * Me.Height)

  Me.Height = 96.6
  Me.Width = 242.9
  
End Sub


Private Sub UserForm_Activate()

    Populate_report_GCDonly

End Sub

Attribute VB_Name = "UserForm4"
Attribute VB_Base = "0{856EC9BC-6A81-4685-B0A2-EEB5A1F46036}{9396EC0C-B788-4D42-BB92-D948689EC10F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_Initialize()
  
  Me.StartUpPosition = 0
  Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
  Me.Top = Application.Top + (0.25 * Application.Height) - (0.25 * Me.Height)

  Me.Height = 92.75
  Me.Width = 240.8
  
End Sub




Private Sub Bar_GSA_1_Click()

End Sub

Private Sub UserForm_Activate()

    Generate_pdf

End Sub

Attribute VB_Name = "UserForm5"
Attribute VB_Base = "0{A1312D7C-C008-4900-98DC-D512C9AAE1F4}{27D08261-9B3A-4E60-8C35-37ED56C824C9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub UserForm_Initialize()
  
  Me.StartUpPosition = 0
  Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
  Me.Top = Application.Top + (0.25 * Application.Height) - (0.25 * Me.Height)

  Me.Height = 168.35
  Me.Width = 236.25
  
End Sub



Private Sub UserForm_Activate()

ER_Custom_Aircraft_Airport

End Sub
Attribute VB_Name = "UserForm6"
Attribute VB_Base = "0{706C7E6B-175A-4BD7-A9F5-FD97B0EE22FE}{9225AB56-D447-4CCF-957F-D90407659CCA}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_Initialize()
  
  Me.StartUpPosition = 0
  Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
  Me.Top = Application.Top + (0.25 * Application.Height) - (0.25 * Me.Height)

  Me.Height = 100.1
  Me.Width = 251.3
  
End Sub


Private Sub UserForm_Activate()

ER_Compute_CO2_Emissions

End Sub

Attribute VB_Name = "UserForm7"
Attribute VB_Base = "0{8FD06D43-CB9B-4AC3-9F14-547680C7F455}{073B8DB7-C680-40BE-A9C5-E0CF7B3FE2D3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_Initialize()
  
  Me.StartUpPosition = 0
  Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
  Me.Top = Application.Top + (0.25 * Application.Height) - (0.25 * Me.Height)

  Me.Height = 91.35
  Me.Width = 236.95
  
End Sub



Private Sub UserForm_Activate()

    ER_Populate_ER_with_CO2_Info

End Sub


Attribute VB_Name = "UserForm8"
Attribute VB_Base = "0{696C631A-8E13-47D6-AFF1-F66E94CFA058}{78372F85-F506-4ADF-BE1A-47C8799526CF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub UserForm_Initialize()
  
  Me.StartUpPosition = 0
  Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
  Me.Top = Application.Top + (0.25 * Application.Height) - (0.25 * Me.Height)

  Me.Height = 124.6
  Me.Width = 235.2
  
End Sub


Private Sub Bar_GSA_1_Click()

End Sub

Private Sub UserForm_Activate()

    Generate_ER_pdf

End Sub


Attribute VB_Name = "UserForm9"
Attribute VB_Base = "0{2F5F9A22-6015-4ED0-9BB5-C94EE8C03EBF}{8D65B438-B8D2-4D23-A3B9-5A02ECFF8F70}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub UserForm_Initialize()

If Sheet5.Range("C42").Value = "" Then Sheet5.Range("C42").Value = "!" & "'"
If Sheet5.Range("C44").Value = "" Then Sheet5.Range("C44").Value = "!" & Application.DecimalSeparator

txt_degree.Text = Replace(Sheet5.Range("C41").Value, "!", "")
txt_minute.Text = Replace(Sheet5.Range("C42").Value, "!", "")
txt_second.Text = Replace(Sheet5.Range("C43").Value, "!", "")
txt_separator.Text = Replace(Sheet5.Range("C44").Value, "!", "")
txt_lat_north.Text = Replace(Sheet5.Range("C45").Value, "!", "")
txt_lat_south.Text = Replace(Sheet5.Range("C46").Value, "!", "")
txt_lon_east.Text = Replace(Sheet5.Range("C47").Value, "!", "")
txt_lon_west.Text = Replace(Sheet5.Range("C48").Value, "!", "")


Me.StartUpPosition = 0
Me.Left = Application.Left + (0.5 * Application.Width) - (0.5 * Me.Width)
Me.Top = Application.Top + (0.25 * Application.Height) - (0.25 * Me.Height)

Me.Height = 487.55
Me.Width = 310.8

End Sub



Private Sub btn_default_value_Click()

txt_degree.Text = "|fffd|"
txt_minute.Text = "'"
txt_second.Text = """"
txt_separator.Text = Application.DecimalSeparator
txt_lat_north.Text = "N"
txt_lat_south.Text = "S"
txt_lon_east.Text = "E"
txt_lon_west.Text = "W"

Sheet5.Range("C41").Value = "!" & "|fffd|"
Sheet5.Range("C42").Value = "!" & "'"
Sheet5.Range("C43").Value = "!" & """"
Sheet5.Range("C44").Value = "!" & Application.DecimalSeparator
Sheet5.Range("C45").Value = "!" & "N"
Sheet5.Range("C46").Value = "!" & "S"
Sheet5.Range("C47").Value = "!" & "E"
Sheet5.Range("C48").Value = "!" & "W"

End Sub



Private Sub btn_ok_Click()

If txt_degree.Value = "" Or txt_minute.Value = "" Or txt_second.Value = "" Or txt_separator.Value = "" Or txt_lat_north.Value = "" Or txt_lat_south.Value = "" Or txt_lon_east.Value = "" Or txt_lon_west.Value = "" Then
    MsgBox "One or more fields are empty."
    Exit Sub
End If

Sheet5.Range("C41").Value = "!" & txt_degree.Value
Sheet5.Range("C42").Value = "!" & txt_minute.Value
Sheet5.Range("C43").Value = "!" & txt_second.Value
Sheet5.Range("C44").Value = "!" & txt_separator.Value
Sheet5.Range("C45").Value = "!" & txt_lat_north.Value
Sheet5.Range("C46").Value = "!" & txt_lat_south.Value
Sheet5.Range("C47").Value = "!" & txt_lon_east.Value
Sheet5.Range("C48").Value = "!" & txt_lon_west.Value

For iCntr = 1 To 8
    matchFoundIndex = WorksheetFunction.Match(UCase(Sheet5.Cells(40 + iCntr, 3)), Sheet5.Range("C41:C48"), 0)
    If iCntr <> matchFoundIndex Then
        MsgBox "Custom symbols have to be unique. Duplicate is not allowed."
        Exit Sub
    End If
Next

Unload Me

End Sub


Private Sub txt_degree_Change()
If txt_degree.Text = "!" Then txt_degree.Text = ""
End Sub

Private Sub txt_minute_Change()
If txt_minute.Text = "!" Then txt_minute.Text = ""
End Sub

Private Sub txt_second_Change()
If txt_second.Text = "!" Then txt_second.Text = ""
End Sub

Private Sub txt_separator_Change()
If txt_separator.Text = "!" Then txt_separator.Text = ""
End Sub

Private Sub txt_lat_north_Change()
If txt_lat_north.Text = "!" Then txt_lat_north.Text = ""
End Sub

Private Sub txt_lat_south_Change()
If txt_lat_south.Text = "!" Then txt_lat_south.Text = ""
End Sub

Private Sub txt_lon_east_Change()
If txt_lon_east.Text = "!" Then txt_lon_east.Text = ""
End Sub

Private Sub txt_lon_west_Change()
If txt_lon_west.Text = "!" Then txt_lon_west.Text = ""
End Sub



Attribute VB_Name = "x_Navigation"

Sub CERT_AC_AP_Search_Next_Click()

Dim CheckBox_Assessment As CheckBox
Dim CheckBox_ER As CheckBox
Set CheckBox_Assessment = Sheet10.Shapes("Check Box 3").OLEFormat.Object ' Form Control
Set CheckBox_ER = Sheet10.Shapes("Check Box 4").OLEFormat.Object ' Form Control

If CheckBox_Assessment.Value = 1 Then
    Sheet7.Activate
    Sheet7.Range("D12").Select
End If

If CheckBox_ER.Value = 1 Then
    Sheet9.Activate
    Sheet9.Range("D12").Select
End If

If (CheckBox_Assessment.Value = -4146 And CheckBox_ER.Value = -4146) Then
    If MsgBox("Warning: Please choose a purpose for the use of the ICAO CORSIA CERT", vbExclamation, "CORSIA CERT") = 1 Then
    End If
End If

End Sub

Sub Background_CheckBox_FUMM_GCD_Click()

Dim CheckBox_FUMM_GCD As CheckBox
Dim CheckBox_FUMM_BT As CheckBox
Set CheckBox_FUMM_GCD = Sheet10.Shapes("Check Box 3").OLEFormat.Object ' Form Control
Set CheckBox_FUMM_BT = Sheet10.Shapes("Check Box 4").OLEFormat.Object ' Form Control

If CheckBox_FUMM_GCD.Enabled = True Then
    CheckBox_FUMM_BT.Value = False
    CheckBox_FUMM_BT.Enabled = True
Else
    CheckBox_FUMM_BT.Enabled = True
End If

End Sub

Sub Background_CheckBox_FUMM_BT_Click()

Dim CheckBox_FUMM_GCD As CheckBox
Dim CheckBox_FUMM_BT As CheckBox
Set CheckBox_FUMM_GCD = Sheet10.Shapes("Check Box 3").OLEFormat.Object ' Form Control
Set CheckBox_FUMM_BT = Sheet10.Shapes("Check Box 4").OLEFormat.Object ' Form Control

If CheckBox_FUMM_BT.Enabled = True Then
    CheckBox_FUMM_GCD.Value = False
    CheckBox_FUMM_GCD.Enabled = True
Else
    CheckBox_FUMM_GCD.Enabled = True
End If

End Sub

Sub Background_Next_Click()

Dim CheckBox_Assessment As CheckBox
Dim CheckBox_ER As CheckBox
Set CheckBox_Assessment = Sheet10.Shapes("Check Box 3").OLEFormat.Object ' Form Control
Set CheckBox_ER = Sheet10.Shapes("Check Box 4").OLEFormat.Object ' Form Control

If CheckBox_Assessment.Value = 1 Then
    
    Application.ScreenUpdating = False
    ActiveWorkbook.Unprotect ("CORSIACERT2019P")
    
    ActiveWorkbook.Sheets("ER_Intro").Visible = False
    ActiveWorkbook.Sheets("ER 1").Visible = False
    ActiveWorkbook.Sheets("ER 2").Visible = False
    ActiveWorkbook.Sheets("ER 3").Visible = False
    ActiveWorkbook.Sheets("ER 4").Visible = False
    ActiveWorkbook.Sheets("ER 5").Visible = False
    ActiveWorkbook.Sheets("ER_CO2_Est").Visible = False
    ActiveWorkbook.Sheets("ER 5.1").Visible = False
    ActiveWorkbook.Sheets("ER 5.2").Visible = False
    ActiveWorkbook.Sheets("ER 6").Visible = False
    ActiveWorkbook.Sheets("ER_Final").Visible = False
    
    ActiveWorkbook.Sheets("CERT_db_search").Visible = True
    ActiveWorkbook.Sheets("Custom_AC").Visible = True
    ActiveWorkbook.Sheets("Custom_AP").Visible = True
    ActiveWorkbook.Sheets("A_Intro").Visible = True
    ActiveWorkbook.Sheets("1. AO Info").Visible = True
    ActiveWorkbook.Sheets("2. CO2 Estimation").Visible = True
    ActiveWorkbook.Sheets("3. Summary Assessment").Visible = True
    
    ActiveWorkbook.Protect Structure:=True, Windows:=False, Password:="CORSIACERT2019P"
    
    Application.ScreenUpdating = True
    Sheet35.Activate
    
End If

If CheckBox_ER.Value = 1 Then
    Application.ScreenUpdating = False
    ActiveWorkbook.Unprotect ("CORSIACERT2019P")
    
    ActiveWorkbook.Sheets("A_Intro").Visible = False
    ActiveWorkbook.Sheets("1. AO Info").Visible = False
    ActiveWorkbook.Sheets("2. CO2 Estimation").Visible = False
    ActiveWorkbook.Sheets("3. Summary Assessment").Visible = False
        
    ActiveWorkbook.Sheets("CERT_db_search").Visible = True
    ActiveWorkbook.Sheets("Custom_AC").Visible = True
    ActiveWorkbook.Sheets("Custom_AP").Visible = True
        
    ActiveWorkbook.Sheets("ER_Intro").Visible = True
    ActiveWorkbook.Sheets("ER 1").Visible = True
    ActiveWorkbook.Sheets("ER 2").Visible = True
    ActiveWorkbook.Sheets("ER 3").Visible = True
    ActiveWorkbook.Sheets("ER 4").Visible = True
    ActiveWorkbook.Sheets("ER 5").Visible = True
    ActiveWorkbook.Sheets("ER_CO2_Est").Visible = True
    ActiveWorkbook.Sheets("ER 5.1").Visible = True
    ActiveWorkbook.Sheets("ER 5.2").Visible = True
    ActiveWorkbook.Sheets("ER 6").Visible = True
    ActiveWorkbook.Sheets("ER_Final").Visible = True
    
    'ActiveWorkbook.Sheets("Template Information").Visible = True
    'ActiveWorkbook.Sheets("1 Identification").Visible = True
    'ActiveWorkbook.Sheets("2 Underlying Basic Info").Visible = True
    'ActiveWorkbook.Sheets("3 Aeroplane Fleet").Visible = True
    'ActiveWorkbook.Sheets("4 Density").Visible = True
    'ActiveWorkbook.Sheets("5 Reporting").Visible = True
    'ActiveWorkbook.Sheets("5.1 Reporting-State Pairs").Visible = True
    'ActiveWorkbook.Sheets("5.2 Reporting-Aerodrome Pairs").Visible = True
    'ActiveWorkbook.Sheets("6 Data Gaps").Visible = True
    
    ActiveWorkbook.Protect Structure:=True, Windows:=False, Password:="CORSIACERT2019P"
    
    Application.ScreenUpdating = True
    
    Sheet36.Activate
End If

If (CheckBox_Assessment.Value = -4146 And CheckBox_ER.Value = -4146) Then
    If MsgBox("Warning: Please choose a purpose for the use of the ICAO CORSIA CERT", vbExclamation, "CORSIA CERT") = 1 Then
    End If
End If

End Sub


Sub Custom_AC_Next_Click()

Dim CheckBox_Assessment As CheckBox
Dim CheckBox_ER As CheckBox
Set CheckBox_Assessment = Sheet10.Shapes("Check Box 3").OLEFormat.Object ' Form Control
Set CheckBox_ER = Sheet10.Shapes("Check Box 4").OLEFormat.Object ' Form Control

If CheckBox_Assessment.Value = 1 Then
    Sheet7.Activate
    'Sheet7.Range("A1").Select
End If

If CheckBox_ER.Value = 1 Then
    Sheet9.Activate
    'Sheet9.Range("A1").Select
End If

If (CheckBox_Assessment.Value = -4146 And CheckBox_ER.Value = -4146) Then
    If MsgBox("Warning: Please choose a purpose for the use of the ICAO CORSIA CERT", vbExclamation, "CORSIA CERT") = 1 Then
    End If
End If

End Sub


Sub MR_Intro_CheckBox_CERT_GCD_Click()

Dim CheckBox_CERT_GCD As CheckBox
Dim CheckBox_CERT_BT As CheckBox
Dim CheckBox_FUMM_GCD As CheckBox
Dim CheckBox_FUMM_BT As CheckBox

Set CheckBox_CERT_GCD = Sheet36.Shapes("Check Box 1").OLEFormat.Object ' Form Control
Set CheckBox_CERT_BT = Sheet36.Shapes("Check Box 2").OLEFormat.Object ' Form Control
Set CheckBox_FUMM_GCD = Sheet36.Shapes("Check Box 3").OLEFormat.Object ' Form Control
Set CheckBox_FUMM_BT = Sheet36.Shapes("Check Box 4").OLEFormat.Object ' Form Control

If CheckBox_CERT_GCD.Enabled = True Then
    CheckBox_CERT_BT.Value = False
    CheckBox_CERT_BT.Enabled = True

    CheckBox_FUMM_GCD.Value = False
    CheckBox_FUMM_GCD.Enabled = True

    CheckBox_FUMM_BT.Value = False
    CheckBox_FUMM_BT.Enabled = True
    
    Sheet36.Range("M9") = 1
    Sheet36.Range("M10") = 0
    Sheet36.Range("M13") = 0
    Sheet36.Range("M14") = 0
    
    If (CheckBox_CERT_GCD = -4146) Then
        Sheet36.Range("M9") = 0
    End If
Else
    CheckBox_CERT_BT.Enabled = True
    CheckBox_FUMM_GCD.Enabled = True
    CheckBox_FUMM_BT.Enabled = True
End If

End Sub


Sub MR_Intro_CheckBox_CERT_BT_Click()

Dim CheckBox_CERT_GCD As CheckBox
Dim CheckBox_CERT_BT As CheckBox
Dim CheckBox_FUMM_GCD As CheckBox
Dim CheckBox_FUMM_BT As CheckBox

Set CheckBox_CERT_GCD = Sheet36.Shapes("Check Box 1").OLEFormat.Object ' Form Control
Set CheckBox_CERT_BT = Sheet36.Shapes("Check Box 2").OLEFormat.Object ' Form Control
Set CheckBox_FUMM_GCD = Sheet36.Shapes("Check Box 3").OLEFormat.Object ' Form Control
Set CheckBox_FUMM_BT = Sheet36.Shapes("Check Box 4").OLEFormat.Object ' Form Control

If CheckBox_CERT_BT.Enabled = True Then
    CheckBox_CERT_GCD.Value = False
    CheckBox_CERT_GCD.Enabled = True

    CheckBox_FUMM_GCD.Value = False
    CheckBox_FUMM_GCD.Enabled = True

    CheckBox_FUMM_BT.Value = False
    CheckBox_FUMM_BT.Enabled = True
    
    Sheet36.Range("M9") = 0
    Sheet36.Range("M10") = 1
    Sheet36.Range("M13") = 0
    Sheet36.Range("M14") = 0
    
    If (CheckBox_CERT_BT = -4146) Then
        Sheet36.Range("M10") = 0
    End If
Else
    CheckBox_CERT_GCD.Enabled = True
    CheckBox_FUMM_GCD.Enabled = True
    CheckBox_FUMM_BT.Enabled = True
End If

End Sub

Sub MR_Intro_CheckBox_FUMM_GCD_Click()

Dim CheckBox_CERT_GCD As CheckBox
Dim CheckBox_CERT_BT As CheckBox
Dim CheckBox_FUMM_GCD As CheckBox
Dim CheckBox_FUMM_BT As CheckBox

Set CheckBox_CERT_GCD = Sheet36.Shapes("Check Box 1").OLEFormat.Object ' Form Control
Set CheckBox_CERT_BT = Sheet36.Shapes("Check Box 2").OLEFormat.Object ' Form Control
Set CheckBox_FUMM_GCD = Sheet36.Shapes("Check Box 3").OLEFormat.Object ' Form Control
Set CheckBox_FUMM_BT = Sheet36.Shapes("Check Box 4").OLEFormat.Object ' Form Control

If CheckBox_FUMM_GCD.Enabled = True Then
    CheckBox_CERT_GCD.Value = False
    CheckBox_CERT_GCD.Enabled = True

    CheckBox_CERT_BT.Value = False
    CheckBox_CERT_BT.Enabled = True

    CheckBox_FUMM_BT.Value = False
    CheckBox_FUMM_BT.Enabled = True
    
    Sheet36.Range("M9") = 0
    Sheet36.Range("M10") = 0
    Sheet36.Range("M13") = 1
    Sheet36.Range("M14") = 0
    
    If (CheckBox_FUMM_GCD = -4146) Then
        Sheet36.Range("M13") = 0
    End If
Else
    CheckBox_CERT_GCD.Enabled = True
    CheckBox_CERT_BT.Enabled = True
    CheckBox_FUMM_BT.Enabled = True
    

End If

End Sub

Sub MR_Intro_CheckBox_FUMM_BT_Click()

Dim CheckBox_CERT_GCD As CheckBox
Dim CheckBox_CERT_BT As CheckBox
Dim CheckBox_FUMM_GCD As CheckBox
Dim CheckBox_FUMM_BT As CheckBox

Set CheckBox_CERT_GCD = Sheet36.Shapes("Check Box 1").OLEFormat.Object ' Form Control
Set CheckBox_CERT_BT = Sheet36.Shapes("Check Box 2").OLEFormat.Object ' Form Control
Set CheckBox_FUMM_GCD = Sheet36.Shapes("Check Box 3").OLEFormat.Object ' Form Control
Set CheckBox_FUMM_BT = Sheet36.Shapes("Check Box 4").OLEFormat.Object ' Form Control

If CheckBox_FUMM_BT.Enabled = True Then
    CheckBox_CERT_GCD.Value = False
    CheckBox_CERT_GCD.Enabled = True

    CheckBox_CERT_BT.Value = False
    CheckBox_CERT_BT.Enabled = True

    CheckBox_FUMM_GCD.Value = False
    CheckBox_FUMM_GCD.Enabled = True
    
    Sheet36.Range("M9") = 0
    Sheet36.Range("M10") = 0
    Sheet36.Range("M13") = 0
    Sheet36.Range("M14") = 1
    
    If (CheckBox_FUMM_BT = -4146) Then
        Sheet36.Range("M14") = 0
    End If
Else
    CheckBox_CERT_GCD.Enabled = True
    CheckBox_CERT_BT.Enabled = True
    CheckBox_FUMM_GCD.Enabled = True

End If

End Sub

Sub MR_Intro_CheckBox_ER_Generation()

Set CheckBox_Gen_ER = Sheet36.Shapes("Check Box 5").OLEFormat.Object ' Form Control

If CheckBox_Gen_ER.Enabled = True Then
        Sheet36.Range("M16") = 1
    If (CheckBox_Gen_ER.Value = -4146) Then
        Sheet36.Range("M16") = 0
    End If
End If

End Sub


Sub MR_Intro_Next_Click()

Dim CheckBox_CERT_GCD As CheckBox
Dim CheckBox_CERT_BT As CheckBox
Dim CheckBox_FUMM_GCD As CheckBox
Dim CheckBox_FUMM_BT As CheckBox
Dim CheckBox_Gen_ER As CheckBox

Set CheckBox_CERT_GCD = Sheet36.Shapes("Check Box 1").OLEFormat.Object ' Form Control
Set CheckBox_CERT_BT = Sheet36.Shapes("Check Box 2").OLEFormat.Object ' Form Control
Set CheckBox_FUMM_GCD = Sheet36.Shapes("Check Box 3").OLEFormat.Object ' Form Control
Set CheckBox_FUMM_BT = Sheet36.Shapes("Check Box 4").OLEFormat.Object ' Form Control
Set CheckBox_Gen_ER = Sheet36.Shapes("Check Box 5").OLEFormat.Object ' Form Control

If CheckBox_Gen_ER.Value = 1 Then
    Sheet18.Activate
    Sheet18.Range("B8").Select
End If

If CheckBox_Gen_ER.Value = -4146 Then
    Sheet9.Activate
    Sheet9.Range("D12").Select
End If

If (CheckBox_CERT_GCD.Value = -4146 And CheckBox_CERT_BT.Value = -4146 And CheckBox_FUMM_GCD.Value = -4146 And CheckBox_FUMM_BT.Value = -4146) Then
    Sheet36.Activate
    Sheet36.Range("A1").Select
    If MsgBox("Warning: " & vbCrLf & vbCrLf & "Please choose one of the options above i.e., using the ICAO CORSIA CERT as primary monitoring method or for data gap filling.", vbExclamation, "CORSIA CERT") = 1 Then
    End If
End If

End Sub

Sub ER_CO2_Est_Back_Click()

Dim CheckBox_CERT_GCD As CheckBox
Dim CheckBox_CERT_BT As CheckBox
Dim CheckBox_FUMM_GCD As CheckBox
Dim CheckBox_FUMM_BT As CheckBox
Dim CheckBox_Gen_ER As CheckBox

Set CheckBox_CERT_GCD = Sheet36.Shapes("Check Box 1").OLEFormat.Object ' Form Control
Set CheckBox_CERT_BT = Sheet36.Shapes("Check Box 2").OLEFormat.Object ' Form Control
Set CheckBox_FUMM_GCD = Sheet36.Shapes("Check Box 3").OLEFormat.Object ' Form Control
Set CheckBox_FUMM_BT = Sheet36.Shapes("Check Box 4").OLEFormat.Object ' Form Control
Set CheckBox_Gen_ER = Sheet36.Shapes("Check Box 5").OLEFormat.Object ' Form Control

If CheckBox_Gen_ER.Value = 1 Then
    Sheet22.Activate
    Sheet22.Range("C11").Select
End If

If CheckBox_Gen_ER.Value = -4146 Then
    Sheet36.Activate
    'Sheet36.Range("A1").Select
End If

End Sub


Sub MR_Final_Review()

    If Sheet36.Range("M16") = 1 Then
        Sheet18.Activate
        Sheet18.Range("B8").Select
    Else
        Sheet9.Activate
        Sheet9.Range("D12").Select
    End If

End Sub


Sub ER_Final_Back()

    If Sheet36.Range("M16") = 1 Then
        Sheet25.Activate
        Sheet25.Range("B8").Select
    Else
        Sheet9.Activate
        Sheet9.Range("D12").Select
    End If

End Sub

Sub ER5_Next_Click()

Dim CheckBox_CERT_GCD As CheckBox
Dim CheckBox_CERT_BT As CheckBox
Dim CheckBox_FUMM_GCD As CheckBox
Dim CheckBox_FUMM_BT As CheckBox

Set CheckBox_CERT_GCD = Sheet36.Shapes("Check Box 1").OLEFormat.Object ' Form Control
Set CheckBox_CERT_BT = Sheet36.Shapes("Check Box 2").OLEFormat.Object ' Form Control
Set CheckBox_FUMM_GCD = Sheet36.Shapes("Check Box 3").OLEFormat.Object ' Form Control
Set CheckBox_FUMM_BT = Sheet36.Shapes("Check Box 4").OLEFormat.Object ' Form Control

    Sheet9.Activate
    Sheet9.Range("D12").Select

If (CheckBox_CERT_GCD.Value = -4146 And CheckBox_CERT_BT.Value = -4146 And CheckBox_FUMM_GCD.Value = -4146 And CheckBox_FUMM_BT.Value = -4146) Then
    If MsgBox("Warning: Please choose one of the options above i.e., using the ICAO CORSIA CERT as primary monitoring method or for data gap filling", vbExclamation, "CORSIA CERT") = 1 Then
    End If
    Sheet36.Activate
    Sheet36.Range("D12").Select
End If

End Sub


Sub ER_CO2_Est_Next_Click()

Dim CheckBox_Gen_ER As CheckBox

Set CheckBox_Gen_ER = Sheet36.Shapes("Check Box 5").OLEFormat.Object ' Form Control

If CheckBox_Gen_ER.Value = 1 Then
    
    ER_Reporting_Level = Sheet22.Range("C11")
    
    If (IsEmpty(Sheet22.Range("C11")) = True) Then
        If MsgBox("Warning: Please a level of reporting for populating the Emissions Report", vbExclamation, "CORSIA CERT") = 1 Then
        End If
        Sheet22.Activate
        Sheet22.Range("C11").Select
    End If
    
    If (ER_Reporting_Level = "reporting on a State pair level") Then
        Sheet23.Activate
        Sheet23.Range("K20").Select
    End If
    
    If (ER_Reporting_Level = "reporting on an aerodrome pair level") Then
        Sheet24.Activate
        Sheet24.Range("M20").Select
    End If

Else
    Sheet38.Activate
    'Sheet38.Range("A1").Select
End If

End Sub

Attribute VB_Name = "x_agreement"
Sub accept()



Application.ScreenUpdating = False
ActiveWorkbook.Unprotect ("CORSIACERT2019P")

ActiveWorkbook.Sheets("Background").Visible = True

ActiveWorkbook.Protect Structure:=True, Windows:=False, Password:="CORSIACERT2019P"

Sheet10.Select

Application.ScreenUpdating = True

End Sub



INQUEST-PP=macro
