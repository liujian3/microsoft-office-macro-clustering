Attribute VB_Name = "BNEERROR"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Private Const ERR_BASE                    As Integer = 32000
Private Const ERR_SAX_CANCEL              As Integer = 32001
Private Const ERR_SAX_DOM_ERR             As Integer = 32002
Property Get SAX_CANCEL() As Integer
SAX_CANCEL = SAX_CANCEL
End Property
Property Get SAX_DOM_ERR() As Integer
SAX_DOM_ERR = SAX_DOM_ERR
End Property
Private Sub Class_Initialize()
End Sub
Private Sub Class_Terminate()
End Sub
Attribute VB_Name = "BneBrowser"
Attribute VB_Base = "0{5FDF498E-BD59-49AB-9689-7466B62FAF7F}{F390F4BC-D588-4097-B715-72F126661ECE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Option Base 1
Const BROWSER = 1
Const DIALOG = 2
Const WINDOW_STATUS_EVENT = "EVENT"
Const WINDOW_STATUS_DONE = "Done"
Const PROGRESS_MESSAGE = "Working "
Dim WithEvents WebBrowser As WebBrowser
Attribute WebBrowser.VB_VarHelpID = -1
Dim WithEvents BneDocument As HTMLDocument
Attribute BneDocument.VB_VarHelpID = -1
Dim m_Document As IHTMLDocument2
Dim m_EventCallBacks As Collection
Dim m_Document_OnClick As String
Dim m_Document_Complete As String
Dim m_UploadBegin As String
Dim m_UploadComplete As String
Dim m_caption As String
Dim m_URL As String
Dim m_LookAndFeel As Integer
Dim b_UploadBegin As Boolean
Dim b_UploadComplete As Boolean
Dim m_SessionName As String
Dim m_SessionState As Boolean
Dim m_SessionTicket As String
Dim m_documentId As String
Dim m_language As String
Dim m_appsServletAgent As String
Dim m_strMsgHeader As String
Dim m_strMsgBody As String
Dim m_strMsgAction1 As String
Dim m_strMsgAction2 As String
Dim m_SheetRef As Object
Public Property Let sessionName(ByVal sessionName As String)
m_SessionName = sessionName
End Property
Public Property Let sessionState(ByVal sessionState As Boolean)
m_SessionState = sessionState
End Property
Public Property Let sessionTicket(ByVal sessionTicket As String)
m_SessionTicket = sessionTicket
End Property
Public Property Let LookAndFeel(ByRef LookAndFeel As Integer)
m_LookAndFeel = LookAndFeel
End Property
Public Property Let DOCUMENT_ONCLICK(ByVal value As String)
m_Document_OnClick = value
End Property
Public Property Let DOCUMENT_COMPLETE(ByVal value As String)
m_Document_Complete = value
End Property
Public Property Let UPLOADBEGIN(ByVal value As String)
m_UploadBegin = value
End Property
Public Property Let UPLOADCOMPLETE(ByVal value As String)
m_UploadComplete = value
End Property
Public Sub ErrorMessage(strMsgHeader As String, strMsgBody As String, strMsgAction1 As String, strMsgAction2 As String)
m_strMsgHeader = strMsgHeader
m_strMsgBody = strMsgBody
m_strMsgAction1 = strMsgAction1
m_strMsgAction2 = strMsgAction2
End Sub
Public Sub setSession(ByRef sessionName As String, ByRef sessionState As Boolean, ByRef sessionTicket As String)
m_SessionName = sessionName
m_SessionState = sessionState
m_SessionTicket = sessionTicket
End Sub
Public Sub setDocumentId(documentId As String)
m_documentId = documentId
End Sub
Public Sub setLanguage(ByRef language As String)
m_language = language
End Sub
Public Sub setAppsServletAgent(appsServletAgent As String)
m_appsServletAgent = appsServletAgent
End Sub
Public Sub addEventCallBack(l_sProcedure As String, l_sEventName As String, Optional l_oSheet As Object)
If l_oSheet Is Nothing Then
m_EventCallBacks.add l_sProcedure, l_sEventName
Else
If Len(l_oSheet.Parent.path) = 0 Then
m_EventCallBacks.add "'" & l_oSheet.Parent.FullName & "'" & "!" & l_oSheet.CodeName & "." & l_sProcedure, l_sEventName
Else
m_EventCallBacks.add l_oSheet.CodeName & "." & l_sProcedure, l_sEventName
End If
End If
End Sub
Public Function getEventCallBack(vEvent As Variant) As String
On Error Resume Next
Dim tmp As Variant
tmp = m_EventCallBacks.Item(vEvent)
If tmp = Empty Then
If Right(vEvent, 5) = "_uixr" Then
Dim s As String
s = Left(vEvent, Len(vEvent) - 5)
tmp = m_EventCallBacks.Item(s)
End If
End If
getEventCallBack = tmp
End Function
Public Sub removeEventCallBack(vEvent As Variant)
On Error Resume Next
If Right(vEvent, 5) = "_uixr" Then
Dim s As String
s = Left(vEvent, Len(vEvent) - 5)
m_EventCallBacks.Remove (s)
Else
m_EventCallBacks.Remove (vEvent)
End If
End Sub
Public Sub clearAllEventCallBacks()
Do Until m_EventCallBacks.count = 0
m_EventCallBacks.Remove 1
Loop
End Sub
Private Sub runCallback(strCallBack As String)
Dim strSubName As String
strSubName = getEventCallBack(strCallBack)
If Len(strSubName) > 0 Then
removeEventCallBack strCallBack
Application.Run strSubName, m_Document
End If
End Sub
Public Property Get Document() As Object
Set Document = m_Document
End Property
Public Sub Navigate(ByVal location As String)
Dim clsProperties As New BneVBAProperties
Dim clsProperty As BneVBAProperty
On Error Resume Next
If m_SessionTicket <> "" Then
If InStr(location, "ICX_SESSION_ID") = 0 Then
location = location & "&ICX_SESSION_ID=" & m_SessionTicket
End If
Else
If InStr(location, "ICX_SESSION_ID") = 0 Then
Set clsProperty = clsProperties.getProperty("ICX_SESSION_ID")
If Not clsProperty Is Nothing Then
location = location & "&ICX_SESSION_ID=" & clsProperty.value
End If
End If
End If
WebBrowser.Navigate location
End Sub
Public Sub NavigatePost(ByVal sURL As String, ByVal oPostData As BneVBAParameters)
On Error Resume Next
Dim vPost     As Variant
Dim vHeader   As Variant
Dim vFlags    As Variant
Dim vTarget   As Variant
Dim abyte()   As Byte
Dim iParamCnt As Long
Dim sPostData As String
Dim clsProperties As New BneVBAProperties
Dim clsProperty As BneVBAProperty
If isEmpty(oPostData.Item("ICX_SESSION_ID")) Then
If Len(m_SessionTicket) > 0 Then
oPostData.add "ICX_SESSION_ID", m_SessionTicket
Else
Set clsProperty = clsProperties.getProperty("ICX_SESSION_ID")
If Not clsProperty Is Nothing Then
oPostData.add "ICX_SESSION_ID", clsProperty.value
End If
End If
End If
If isEmpty(oPostData.Item("tzOffset")) Then
oPostData.add "tzOffset", getTimeZoneOffset()
End If
If isEmpty(oPostData.Item("bne:embedded")) Then
oPostData.add "bne:embedded", "true"
End If
If isEmpty(oPostData.Item("bne:documentId")) Then
oPostData.add "bne:documentId", m_documentId
End If
If isEmpty(oPostData.Item("bne:language")) Then
oPostData.add "bne:language", m_language
End If
oPostData.add "bne:login_host", m_appsServletAgent
For iParamCnt = 1 To oPostData.count
If iParamCnt > 1 Then sPostData = sPostData & "&"
sPostData = sPostData & oPostData.Item(iParamCnt).name & "=" & UrlEncodeUtf8(oPostData.Item(iParamCnt).value)
Next iParamCnt
vHeader = "Content-Type: application/x-www-form-urlencoded" & vbCrLf
abyte = StrConv(sPostData, vbFromUnicode)
vPost = abyte
If InStr(1, sURL, "?") > 0 Then
sURL = sURL & "&"
Else
sURL = sURL & "?"
End If
sURL = sURL & "bne:encoding=UTF-8"
Call WebBrowser.Navigate(sURL, vFlags, vTarget, vPost, vHeader)
End Sub
Private Sub UserForm_Initialize()
m_LookAndFeel = BROWSER
b_UploadBegin = False
b_UploadComplete = False
Set WebBrowser = Me.Controls.add("Shell.Explorer.2", "WebBrowser")
With WebBrowser
.MenuBar = False
.StatusBar = False
.AddressBar = False
.RegisterAsBrowser = True
.Silent = False
End With
Set m_Document = WebBrowser.Document
Set BneDocument = m_Document
UserForm_Resize
Set m_EventCallBacks = New Collection
m_strMsgHeader = "Error"
m_strMsgBody = "The connection to the server is unavailable."
m_strMsgAction1 = "Please contact your support representative."
If Application.ShowWindowsInTaskbar = True Then
Application.ShowWindowsInTaskbar = False
Application.ShowWindowsInTaskbar = True
End If
End Sub
Private Sub UserForm_Resize()
ResizeForm
End Sub
Sub ResizeForm()
On Error Resume Next
WebBrowser.Move 0, 0, Me.InsideWidth, Me.InsideHeight
End Sub
Private Sub UserForm_Terminate()
Call runCallback("CLOSE")
Me.Controls.Remove "WebBrowser"
Set WebBrowser = Nothing
Set BneDocument = Nothing
Set m_Document = Nothing
Set m_EventCallBacks = Nothing
Set m_SheetRef = Nothing
End Sub
Private Sub WebBrowser_ProgressChange(ByVal Progress As Long, ByVal ProgressMax As Long)
On Error Resume Next
Dim caption As String
If Progress > 0 Then
caption = Me.caption
If Left(caption, Len(PROGRESS_MESSAGE)) <> PROGRESS_MESSAGE Then
caption = PROGRESS_MESSAGE & " "
End If
Me.caption = caption & "."
Else
Me.caption = m_caption
End If
End Sub
Private Sub WebBrowser_WindowClosing(ByVal IsChildWindow As Boolean, Cancel As Boolean)
Unload Me
End Sub
Private Sub WebBrowser_WindowSetResizable(ByVal Resizable As Boolean)
If Resizable = False Then
borderStyle = 3
End If
End Sub
Private Sub WebBrowser_DocumentComplete(ByVal pDisp As Object, URL As Variant)
On Error Resume Next
Set m_Document = WebBrowser.Document
Set BneDocument = m_Document
m_caption = StripURLFromTitle(m_Document.Title)
Me.caption = m_caption
If (Not m_Document Is Nothing) Then
If m_LookAndFeel = DIALOG Then
m_Document.body.Style.Border = "1"
m_Document.body.Style.margin = "5"
m_Document.body.Style.padding = "0"
m_Document.body.Style.overflow = "auto"
End If
End If
If m_Document_Complete <> "" Then
Application.Run m_Document_Complete, pDisp, m_Document
End If
If Mid(URL, 1, 6) = "res://" Then
m_Document.body.innerHTML = WebBrowser_DocumentComplete_ERROR_MESSAGE
m_Document.parentWindow.execScript "window.setTimeout(""window.status='EVENT=ERROR'"", 20000);", "javascript"
End If
End Sub
Public Function StripURLFromTitle(lsTitle As String) As String
On Error Resume Next
lsTitle = Trim(lsTitle)
If (InStr(1, lsTitle, "http://", vbTextCompare) = 1 Or InStr(1, lsTitle, "https://", vbTextCompare) = 1) And InStr(lsTitle, " - ") > 0 Then
lsTitle = Mid(lsTitle, InStr(lsTitle, " - ") + 3)
End If
StripURLFromTitle = lsTitle
End Function
Public Function WebBrowser_DocumentComplete_ERROR_MESSAGE() As String
Dim sCloseText As String
Dim sCopyrightText As String
sCloseText = "Close"
sCopyrightText = "Copyright 2005, Oracle Corporation. All rights reserved."
WebBrowser_DocumentComplete_ERROR_MESSAGE = _
"<br>" & _
"<table border='0' cellpadding='0' cellspacing='0' width='100%'>" & _
"  <tr><td style='font-family:Arial;color:#cc0000; font-size:16pt'>" & m_strMsgHeader & "</td></tr>" & _
"  <tr><td style='background-color:#336699' height='1' colspan='3'></td></tr>" & _
"  <tr><td width='100%' align='left'><br>" & _
"      <span style='font-family:Arial;color:#000000; font-size:10pt'><b>" & m_strMsgBody & "</b></span></td></tr>" & _
"  <tr><td><span style='font-family:Arial;color:#000000; font-size:10pt'>" & m_strMsgAction1 & "</span><br><br></td></tr>" & _
"  <tr><td><span style='font-family:Arial;color:#000000; font-size:10pt'>" & m_strMsgAction2 & "</span><br><br></td></tr>" & _
"  <tr><td style='background-color:#336699' height='1' colspan='3'></td></tr>" & _
"  <tr><td colspan='3' align='center'><span id='bne:messages'></span></td></tr>" & _
"  <tr><td colspan='3' align='right'><span id=""BNE:CANCEL""><input type='button' value='" & sCloseText & "' onclick='javascript:return false;'></span></td></tr>" & _
"  <tr><td width='100%' align='left'><br><span style='font-family:Arial;color:#000000; font-size:9pt'>" & sCopyrightText & "</span></td></tr>" & _
"</table>"
End Function
Private Sub WebBrowser_StatusTextChange(ByVal l_sStatusText As String)
Dim l_sCallBack As String
l_sCallBack = getWindowStatusEvent(l_sStatusText)
Call runCallback(l_sCallBack)
End Sub
Private Function getWindowStatusEvent(ByVal statusText As String)
If statusText <> "" And statusText <> WINDOW_STATUS_DONE Then
If InStr(1, statusText, WINDOW_STATUS_EVENT & "=") Then
getWindowStatusEvent = UCase(Mid(statusText, 7))
Else
getWindowStatusEvent = ""
End If
End If
End Function
Private Function BneDocument_onclick() As Boolean
Dim curWnd As HTMLWindow2
Dim curElement As IHTMLElement
Dim elementName As String
Set curWnd = BneDocument.parentWindow
Set curElement = curWnd.event.srcElement
elementName = curElement.ID
If m_Document_OnClick <> "" Then
Application.Run m_Document_OnClick
End If
If InStr(elementName, "SubmitButton") > 0 Then
BneDocument_onclick = False
ElseIf curElement.parentElement.getAttribute("onclick") <> "" Then
BneDocument_onclick = False
ElseIf curElement.getAttribute("onclick") <> "" Then
BneDocument_onclick = True
Else
BneDocument_onclick = True
End If
End Function
Public Sub setSheetRef(Sheet As Object)
Set m_SheetRef = Sheet
End Sub
Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
Dim strCallBack As String
If CloseMode = vbFormControlMenu Then
strCallBack = getEventCallBack("BNE:BROWSERCLOSE")
If Len(strCallBack) > 0 Then
removeEventCallBack "BNE:BROWSERCLOSE"
Application.Run strCallBack
Cancel = 1
Else
Set WebBrowser = Nothing
Set BneDocument = Nothing
Set m_Document = Nothing
Set m_EventCallBacks = Nothing
Set m_SheetRef = Nothing
End If
End If
End Sub

Attribute VB_Name = "BneDownloadXSD"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Option Base 1
Private oXSDDoc As Object
Private oXMLDoc As Object
Private oColElements As Collection
Private iPointer As Integer
Private sErrorList() As String
Public Property Set XSDNode(oXSDSection As Object)
Set oXSDDoc = oXSDSection
Call ProcessXSD
End Property
Public Property Set XMLNode(oXMLSection As Object)
Dim oElement As BneXSDElement
Set oXMLDoc = oXMLSection
If oXMLDoc.ChildNodes.Length > 0 Then
Call ProcessDataNode(oXMLDoc)
End If
End Property
Public Property Get VBADataType(sKey As String) As String
On Error GoTo ErrorHandler
VBADataType = oColElements(sKey).VBADataType
Exit Property
ErrorHandler:
VBADataType = "string"
End Property
Public Property Get InterfaceName(sKey As String) As String
On Error GoTo ErrorHandler
InterfaceName = oColElements(sKey).InterfaceName
Exit Property
ErrorHandler:
InterfaceName = ""
End Property
Public Property Get ColumnName(sKey As String) As String
On Error GoTo ErrorHandler
ColumnName = oColElements(sKey).ColumnName
Exit Property
ErrorHandler:
ColumnName = ""
End Property
Public Property Get DataArray(sKey As String)
Dim aEmpty() As String
On Error GoTo ErrorHandler
DataArray = oColElements(sKey).DataArray
Exit Property
ErrorHandler:
DataArray = aEmpty
End Property
Public Property Get RowCount(sKey As String) As Long
On Error GoTo ErrorHandler
RowCount = oColElements(sKey).RowCount
Exit Property
ErrorHandler:
RowCount = 0
End Property
Public Property Get FirstKey() As String
On Error GoTo ErrorHandler
iPointer = 1
FirstKey = oColElements(iPointer).path & "/" & oColElements(iPointer).name
Exit Property
ErrorHandler:
FirstKey = ""
End Property
Public Property Get NextKey() As String
On Error GoTo ErrorHandler
iPointer = iPointer + 1
NextKey = oColElements(iPointer).path & "/" & oColElements(iPointer).name
Exit Property
ErrorHandler:
NextKey = ""
End Property
Public Property Get ErrorCount() As Integer
On Error GoTo ErrorHandler
ErrorCount = UBound(sErrorList)
Exit Property
ErrorHandler:
ErrorCount = 0
End Property
Public Property Get ErrorMessage(iNumber As Integer) As String
On Error GoTo ErrorHandler
ErrorMessage = sErrorList(iNumber)
Exit Property
ErrorHandler:
ErrorMessage = ""
End Property
Public Property Get ErrorMessages() As String
On Error GoTo ErrorHandler
ErrorMessages = Join(sErrorList, vbCrLf)
Exit Property
ErrorHandler:
ErrorMessages = ""
End Property
Public Sub ProcessData()
If oXMLDoc.ChildNodes.Length > 0 Then
Call ProcessDataNode(oXMLDoc)
End If
End Sub
Private Sub AddErrorToList(sMessage As String)
On Error GoTo ErrorHandler
ReDim Preserve sErrorList(UBound(sErrorList) + 1)
sErrorList(UBound(sErrorList)) = sMessage
Exit Sub
ErrorHandler:
ReDim sErrorList(1)
sErrorList(UBound(sErrorList)) = sMessage
End Sub
Private Sub ProcessXSD()
Dim oNode As Object
Dim sPath As String
Set oColElements = New Collection
Set oNode = oXSDDoc.SelectSingleNode("xsd:element")
Call ProcessType(oXSDDoc, oNode.Attributes.getNamedItem("name").text, oNode.Attributes.getNamedItem("type").text, sPath & "/" & oNode.Attributes.getNamedItem("name").text)
End Sub
Private Sub ProcessType(oNode As Object, sName As String, sType As String, sPath As String)
Dim oType         As Object
Dim oSequence     As Object
Dim oElement      As Object
Dim oXSDItem      As Object
Dim sVBAType      As String
Dim sInterface    As String
Dim sColumn       As String
Dim aTemp         As Variant
On Error GoTo ErrorHandler
Set oType = oXSDDoc.SelectSingleNode("xsd:complexType[@name='" & sType & "']")
Set oSequence = oType.SelectSingleNode("xsd:sequence")
For Each oElement In oSequence.ChildNodes
Set oXSDItem = New BneXSDElement
sVBAType = ConvertXSDTypeToVBAType(oElement.Attributes.getNamedItem("type").text)
aTemp = Split(oElement.Attributes.getNamedItem("name").text, ".")
If IsArray(aTemp) Then
If UBound(aTemp) = 1 Then
sInterface = aTemp(0)
sColumn = aTemp(1)
oXSDItem.setAttributes oElement.Attributes.getNamedItem("name").text, sPath, oElement.Attributes.getNamedItem("type").text, sVBAType, sInterface, sColumn
oColElements.add oXSDItem, sPath & "/" & oElement.Attributes.getNamedItem("name").text
End If
End If
Call ProcessType(oType, oElement.Attributes.getNamedItem("name").text, oElement.Attributes.getNamedItem("type").text, sPath & "/" & oElement.Attributes.getNamedItem("name").text)
Next
ErrorHandler:
End Sub
Private Function ConvertXSDTypeToVBAType(sXSDType As String) As String
Select Case sXSDType
Case "xsd:string"
ConvertXSDTypeToVBAType = "string"
Case "xsd:date"
ConvertXSDTypeToVBAType = "date"
Case "xsd:double"
ConvertXSDTypeToVBAType = "double"
Case "xsd:integer"
ConvertXSDTypeToVBAType = "integer"
Case Else
ConvertXSDTypeToVBAType = "string"
End Select
End Function
Private Sub ProcessDataNode(oCurrentNode As Object)
Dim oDataRows As Object
Dim oRow As Object
Dim oChild As Object
Dim nIndex As Long
Dim sMsg As String
Set oDataRows = oCurrentNode.SelectNodes("DataRow")
On Error GoTo ErrorHandle_CurrentNode
For Each oRow In oDataRows
nIndex = CLng(oRow.getAttribute("id"))
For Each oChild In oRow.ChildNodes
DoEvents
Call oColElements("/Data/DataRow/" & oChild.nodeName).setDataItem(nIndex, oChild.nodeTypedValue)
Next
ErrorHandle_CurrentNode:
If Err <> 0 Then
sMsg = "Error &VB_ERR_NUM: &VB_ERR_DESCRIPTION while processing download for column &DATA_NODE_NAME."
sMsg = Replace(sMsg, "&DATA_NODE_NAME", oChild.nodeName)
sMsg = Replace(sMsg, "&VB_ERR_NUM ", Err.Number)
sMsg = Replace(sMsg, "&VB_ERR_DESCRIPTION", Err.Description)
AddErrorToList (sMsg)
End If
Next
End Sub
Attribute VB_Name = "BneLayout"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Option Base 1
Private m_objSheet As Worksheet
Private m_clsLayout As BneLayoutBlock
Private m_clsStyleSheet As BneStyleSheet
Private m_blnReadOnly As Boolean
Private m_colAllBlocks As Collection
Private Sub Class_Initialize_0(clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clsactual_flag As New BneLayoutColumn
clsactual_flag.isInterfaceColumn = True
clsactual_flag.ColumnName = "ACTUAL_FLAG"
clsactual_flag.InterfaceName = "GL_INTERFACE"
clsactual_flag.InterfaceColName = "GL_INTERFACE_ACTUAL_FLAG"
clsactual_flag.Prompt = "Balance Type"
clsactual_flag.Order = 0
clsactual_flag.DataType = 2
clsactual_flag.ColumnWidth = 0
clsactual_flag.DefaultValue = "Actual"
clsactual_flag.DefaultType = "CONSTANT"
clsactual_flag.PromptStyle = m_clsStyleSheet.getStyle("")
clsactual_flag.HintStyle = m_clsStyleSheet.getStyle("")
clsactual_flag.ReadOnly = True
clsactual_flag.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clsactual_flag.ColumnStyle = m_clsStyleSheet.getStyle("")
clsactual_flag.TotalColumn = False
clsactual_flag.ColumnFormat = "@"
clsactual_flag.ValType = "TABLE"
clsBlock1.addLayoutColumn clsactual_flag
End Sub
Private Sub Class_Initialize_1(clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clsdatabase As New BneLayoutColumn
clsdatabase.isInterfaceColumn = True
clsdatabase.ColumnName = "DATABASE"
clsdatabase.InterfaceName = "GL_INTERFACE"
clsdatabase.InterfaceColName = "GL_INTERFACE_DATABASE"
clsdatabase.Prompt = "Database"
clsdatabase.Order = 0
clsdatabase.DataType = 0
clsdatabase.ColumnWidth = 0
clsdatabase.DefaultValue = "SSR2242.SBS.LOCAL.PRD213"
clsdatabase.DefaultType = "ENVIRONMENT"
clsdatabase.PromptStyle = m_clsStyleSheet.getStyle("")
clsdatabase.HintStyle = m_clsStyleSheet.getStyle("")
clsdatabase.ReadOnly = True
clsdatabase.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clsdatabase.ColumnStyle = m_clsStyleSheet.getStyle("")
clsdatabase.TotalColumn = False
clsdatabase.ColumnFormat = "General"
clsdatabase.ValType = ""
clsBlock1.addLayoutColumn clsdatabase
End Sub
Private Sub Class_Initialize_2(clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clsaccess_set_id As New BneLayoutColumn
clsaccess_set_id.isInterfaceColumn = True
clsaccess_set_id.ColumnName = "ACCESS_SET_ID"
clsaccess_set_id.InterfaceName = "GL_INTERFACE"
clsaccess_set_id.InterfaceColName = "GL_INTERFACE_ACCESS_SET_ID"
clsaccess_set_id.Prompt = "Data Access Set"
clsaccess_set_id.Order = 0
clsaccess_set_id.DataType = 1
clsaccess_set_id.ColumnWidth = 0
clsaccess_set_id.DefaultValue = "SOB_RD8"
clsaccess_set_id.DefaultType = "SQL"
clsaccess_set_id.PromptStyle = m_clsStyleSheet.getStyle("")
clsaccess_set_id.HintStyle = m_clsStyleSheet.getStyle("")
clsaccess_set_id.ReadOnly = True
clsaccess_set_id.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clsaccess_set_id.ColumnStyle = m_clsStyleSheet.getStyle("")
clsaccess_set_id.TotalColumn = False
clsaccess_set_id.ColumnFormat = "General"
clsaccess_set_id.ValType = "TABLE"
clsBlock1.addLayoutColumn clsaccess_set_id
End Sub
Private Sub Class_Initialize_3(clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clsuser_je_source_name As New BneLayoutColumn
clsuser_je_source_name.isInterfaceColumn = True
clsuser_je_source_name.ColumnName = "USER_JE_SOURCE_NAME"
clsuser_je_source_name.InterfaceName = "GL_INTERFACE"
clsuser_je_source_name.InterfaceColName = "GL_INTERFACE_USER_JE_SOURCE_NAME"
clsuser_je_source_name.Prompt = "Source"
clsuser_je_source_name.HintText = "* List - Text"
clsuser_je_source_name.Order = 0
clsuser_je_source_name.DataType = 2
clsuser_je_source_name.ColumnWidth = 0
clsuser_je_source_name.DefaultValue = "Spreadsheet"
clsuser_je_source_name.DefaultType = "CONSTANT"
clsuser_je_source_name.PromptStyle = m_clsStyleSheet.getStyle("")
clsuser_je_source_name.HintStyle = m_clsStyleSheet.getStyle("")
clsuser_je_source_name.ReadOnly = False
clsuser_je_source_name.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clsuser_je_source_name.ColumnStyle = m_clsStyleSheet.getStyle("")
clsuser_je_source_name.TotalColumn = False
clsuser_je_source_name.ColumnFormat = "@"
clsuser_je_source_name.ValType = "TABLE"
clsBlock1.addLayoutColumn clsuser_je_source_name
End Sub
Private Sub Class_Initialize_4(clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clschart_of_accounts_id As New BneLayoutColumn
clschart_of_accounts_id.isInterfaceColumn = True
clschart_of_accounts_id.ColumnName = "CHART_OF_ACCOUNTS_ID"
clschart_of_accounts_id.InterfaceName = "GL_INTERFACE"
clschart_of_accounts_id.InterfaceColName = "GL_INTERFACE_CHART_OF_ACCOUNTS_ID"
clschart_of_accounts_id.Prompt = "Chart Of Accounts"
clschart_of_accounts_id.Order = 0
clschart_of_accounts_id.DataType = 1
clschart_of_accounts_id.ColumnWidth = 0
clschart_of_accounts_id.DefaultValue = "NHS_GL"
clschart_of_accounts_id.DefaultType = "CONSTANT"
clschart_of_accounts_id.PromptStyle = m_clsStyleSheet.getStyle("")
clschart_of_accounts_id.HintStyle = m_clsStyleSheet.getStyle("")
clschart_of_accounts_id.ReadOnly = True
clschart_of_accounts_id.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clschart_of_accounts_id.ColumnStyle = m_clsStyleSheet.getStyle("")
clschart_of_accounts_id.TotalColumn = False
clschart_of_accounts_id.ColumnFormat = "General"
clschart_of_accounts_id.ValType = "TABLE"
clsBlock1.addLayoutColumn clschart_of_accounts_id
End Sub
Private Sub Class_Initialize_5(clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clsledger_id As New BneLayoutColumn
clsledger_id.isInterfaceColumn = True
clsledger_id.ColumnName = "LEDGER_ID"
clsledger_id.InterfaceName = "GL_INTERFACE"
clsledger_id.InterfaceColName = "GL_INTERFACE_LEDGER_ID"
clsledger_id.Prompt = "Ledger"
clsledger_id.HintText = "* List - Text"
clsledger_id.Order = 1
clsledger_id.DataType = 1
clsledger_id.ColumnWidth = 15
clsledger_id.DefaultValue = ""
clsledger_id.DefaultType = ""
clsledger_id.PromptStyle = m_clsStyleSheet.getStyle("")
clsledger_id.HintStyle = m_clsStyleSheet.getStyle("")
clsledger_id.ReadOnly = False
clsledger_id.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clsledger_id.ColumnStyle = m_clsStyleSheet.getStyle("")
clsledger_id.TotalColumn = False
clsledger_id.ColumnFormat = "General"
clsledger_id.ValType = "TABLE"
clsBlock2.addLayoutColumn clsledger_id
End Sub
Private Sub Class_Initialize_6(clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clsuser_je_category_name As New BneLayoutColumn
clsuser_je_category_name.isInterfaceColumn = True
clsuser_je_category_name.ColumnName = "USER_JE_CATEGORY_NAME"
clsuser_je_category_name.InterfaceName = "GL_INTERFACE"
clsuser_je_category_name.InterfaceColName = "GL_INTERFACE_USER_JE_CATEGORY_NAME"
clsuser_je_category_name.Prompt = "Category"
clsuser_je_category_name.HintText = "* List - Text"
clsuser_je_category_name.Order = 2
clsuser_je_category_name.DataType = 2
clsuser_je_category_name.ColumnWidth = 15
clsuser_je_category_name.DefaultValue = ""
clsuser_je_category_name.DefaultType = ""
clsuser_je_category_name.PromptStyle = m_clsStyleSheet.getStyle("")
clsuser_je_category_name.HintStyle = m_clsStyleSheet.getStyle("")
clsuser_je_category_name.ReadOnly = False
clsuser_je_category_name.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clsuser_je_category_name.ColumnStyle = m_clsStyleSheet.getStyle("")
clsuser_je_category_name.TotalColumn = False
clsuser_je_category_name.ColumnFormat = "@"
clsuser_je_category_name.ValType = "TABLE"
clsBlock2.addLayoutColumn clsuser_je_category_name
End Sub
Private Sub Class_Initialize_7(clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clscurrency_code As New BneLayoutColumn
clscurrency_code.isInterfaceColumn = True
clscurrency_code.ColumnName = "CURRENCY_CODE"
clscurrency_code.InterfaceName = "GL_INTERFACE"
clscurrency_code.InterfaceColName = "GL_INTERFACE_CURRENCY_CODE"
clscurrency_code.Prompt = "Currency"
clscurrency_code.HintText = "* List - Text"
clscurrency_code.Order = 3
clscurrency_code.DataType = 2
clscurrency_code.ColumnWidth = 15
clscurrency_code.DefaultValue = ""
clscurrency_code.DefaultType = ""
clscurrency_code.PromptStyle = m_clsStyleSheet.getStyle("")
clscurrency_code.HintStyle = m_clsStyleSheet.getStyle("")
clscurrency_code.ReadOnly = False
clscurrency_code.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clscurrency_code.ColumnStyle = m_clsStyleSheet.getStyle("")
clscurrency_code.TotalColumn = False
clscurrency_code.ColumnFormat = "@"
clscurrency_code.ValType = "JAVA"
clsBlock2.addLayoutColumn clscurrency_code
End Sub
Private Sub Class_Initialize_8(clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clsaccounting_date As New BneLayoutColumn
clsaccounting_date.isInterfaceColumn = True
clsaccounting_date.ColumnName = "ACCOUNTING_DATE"
clsaccounting_date.InterfaceName = "GL_INTERFACE"
clsaccounting_date.InterfaceColName = "GL_INTERFACE_ACCOUNTING_DATE"
clsaccounting_date.Prompt = "Accounting Date"
clsaccounting_date.HintText = "* List - Date"
clsaccounting_date.Order = 4
clsaccounting_date.DataType = 3
clsaccounting_date.ColumnWidth = 15
clsaccounting_date.DefaultValue = ""
clsaccounting_date.DefaultType = "JAVA"
clsaccounting_date.PromptStyle = m_clsStyleSheet.getStyle("")
clsaccounting_date.HintStyle = m_clsStyleSheet.getStyle("")
clsaccounting_date.ReadOnly = False
clsaccounting_date.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clsaccounting_date.ColumnStyle = m_clsStyleSheet.getStyle("")
clsaccounting_date.TotalColumn = False
clsaccounting_date.ColumnFormat = "General"
clsaccounting_date.ValType = "JAVA"
clsBlock2.addLayoutColumn clsaccounting_date
End Sub
Private Sub Class_Initialize_9(clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clsperiod_name As New BneLayoutColumn
clsperiod_name.isInterfaceColumn = True
clsperiod_name.ColumnName = "PERIOD_NAME"
clsperiod_name.InterfaceName = "GL_INTERFACE"
clsperiod_name.InterfaceColName = "GL_INTERFACE_PERIOD_NAME"
clsperiod_name.Prompt = "Period"
clsperiod_name.HintText = "List - Text"
clsperiod_name.Order = 5
clsperiod_name.DataType = 2
clsperiod_name.ColumnWidth = 15
clsperiod_name.DefaultValue = ""
clsperiod_name.DefaultType = ""
clsperiod_name.PromptStyle = m_clsStyleSheet.getStyle("")
clsperiod_name.HintStyle = m_clsStyleSheet.getStyle("")
clsperiod_name.ReadOnly = False
clsperiod_name.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clsperiod_name.ColumnStyle = m_clsStyleSheet.getStyle("")
clsperiod_name.TotalColumn = False
clsperiod_name.ColumnFormat = "@"
clsperiod_name.ValType = "JAVA"
clsBlock2.addLayoutColumn clsperiod_name
End Sub
Private Sub Class_Initialize_10(clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clsgroup_id As New BneLayoutColumn
clsgroup_id.isInterfaceColumn = True
clsgroup_id.ColumnName = "GROUP_ID"
clsgroup_id.InterfaceName = "GL_INTERFACE"
clsgroup_id.InterfaceColName = "GL_INTERFACE_GROUP_ID"
clsgroup_id.Prompt = "Group ID"
clsgroup_id.HintText = "Number"
clsgroup_id.Order = 6
clsgroup_id.DataType = 1
clsgroup_id.ColumnWidth = 15
clsgroup_id.DefaultValue = ""
clsgroup_id.DefaultType = "JAVA_OVERRIDE"
clsgroup_id.PromptStyle = m_clsStyleSheet.getStyle("")
clsgroup_id.HintStyle = m_clsStyleSheet.getStyle("")
clsgroup_id.ReadOnly = False
clsgroup_id.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clsgroup_id.ColumnStyle = m_clsStyleSheet.getStyle("")
clsgroup_id.TotalColumn = False
clsgroup_id.ColumnFormat = "General"
clsgroup_id.ValType = ""
clsBlock2.addLayoutColumn clsgroup_id
End Sub
Private Sub Class_Initialize_11(clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clsreference4 As New BneLayoutColumn
clsreference4.isInterfaceColumn = True
clsreference4.ColumnName = "REFERENCE4"
clsreference4.InterfaceName = "GL_INTERFACE"
clsreference4.InterfaceColName = "GL_INTERFACE_REFERENCE4"
clsreference4.Prompt = "Journal Name"
clsreference4.HintText = "Text"
clsreference4.Order = 7
clsreference4.DataType = 2
clsreference4.ColumnWidth = 15
clsreference4.DefaultValue = ""
clsreference4.DefaultType = ""
clsreference4.PromptStyle = m_clsStyleSheet.getStyle("")
clsreference4.HintStyle = m_clsStyleSheet.getStyle("")
clsreference4.ReadOnly = False
clsreference4.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clsreference4.ColumnStyle = m_clsStyleSheet.getStyle("")
clsreference4.TotalColumn = False
clsreference4.ColumnFormat = "@"
clsreference4.ValType = ""
clsBlock2.addLayoutColumn clsreference4
End Sub
Private Sub Class_Initialize_12(clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clsreference5 As New BneLayoutColumn
clsreference5.isInterfaceColumn = True
clsreference5.ColumnName = "REFERENCE5"
clsreference5.InterfaceName = "GL_INTERFACE"
clsreference5.InterfaceColName = "GL_INTERFACE_REFERENCE5"
clsreference5.Prompt = "Journal Description"
clsreference5.HintText = "Text"
clsreference5.Order = 8
clsreference5.DataType = 2
clsreference5.ColumnWidth = 15
clsreference5.DefaultValue = ""
clsreference5.DefaultType = ""
clsreference5.PromptStyle = m_clsStyleSheet.getStyle("")
clsreference5.HintStyle = m_clsStyleSheet.getStyle("")
clsreference5.ReadOnly = False
clsreference5.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clsreference5.ColumnStyle = m_clsStyleSheet.getStyle("")
clsreference5.TotalColumn = False
clsreference5.ColumnFormat = "@"
clsreference5.ValType = ""
clsBlock2.addLayoutColumn clsreference5
End Sub
Private Sub Class_Initialize_13(clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clsreference7 As New BneLayoutColumn
clsreference7.isInterfaceColumn = True
clsreference7.ColumnName = "REFERENCE7"
clsreference7.InterfaceName = "GL_INTERFACE"
clsreference7.InterfaceColName = "GL_INTERFACE_REFERENCE7"
clsreference7.Prompt = "Reverse Journal"
clsreference7.HintText = "List - Text"
clsreference7.Order = 9
clsreference7.DataType = 2
clsreference7.ColumnWidth = 15
clsreference7.DefaultValue = ""
clsreference7.DefaultType = ""
clsreference7.PromptStyle = m_clsStyleSheet.getStyle("")
clsreference7.HintStyle = m_clsStyleSheet.getStyle("")
clsreference7.ReadOnly = False
clsreference7.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clsreference7.ColumnStyle = m_clsStyleSheet.getStyle("")
clsreference7.TotalColumn = False
clsreference7.ColumnFormat = "@"
clsreference7.ValType = "TABLE"
clsreference7.PopListNamedRange = "PopCache_GL_INTERFACE_REFERENCE7"
clsBlock2.addLayoutColumn clsreference7
End Sub
Private Sub Class_Initialize_14(clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clsreference8 As New BneLayoutColumn
clsreference8.isInterfaceColumn = True
clsreference8.ColumnName = "REFERENCE8"
clsreference8.InterfaceName = "GL_INTERFACE"
clsreference8.InterfaceColName = "GL_INTERFACE_REFERENCE8"
clsreference8.Prompt = "Reversal Period/Date"
clsreference8.HintText = "List - Text"
clsreference8.Order = 10
clsreference8.DataType = 4
clsreference8.ColumnWidth = 15
clsreference8.DefaultValue = ""
clsreference8.DefaultType = ""
clsreference8.PromptStyle = m_clsStyleSheet.getStyle("")
clsreference8.HintStyle = m_clsStyleSheet.getStyle("")
clsreference8.ReadOnly = False
clsreference8.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clsreference8.ColumnStyle = m_clsStyleSheet.getStyle("")
clsreference8.TotalColumn = False
clsreference8.ColumnFormat = "General"
clsreference8.ValType = "JAVA"
clsBlock2.addLayoutColumn clsreference8
End Sub
Private Sub Class_Initialize_15(clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clsbne_upload As New BneLayoutColumn
clsbne_upload.isInterfaceColumn = False
clsbne_upload.ColumnName = "BNE_UPLOAD"
clsbne_upload.InterfaceColName = "BNE_UPLOAD"
clsbne_upload.Prompt = "Upl"
clsbne_upload.Order = 1
clsbne_upload.DataType = 0
clsbne_upload.ColumnWidth = 3
clsbne_upload.DefaultValue = ""
clsbne_upload.DefaultType = ""
clsbne_upload.PromptStyle = m_clsStyleSheet.getStyle("")
clsbne_upload.HintStyle = m_clsStyleSheet.getStyle("")
clsbne_upload.ReadOnly = False
clsbne_upload.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clsbne_upload.ColumnStyle = m_clsStyleSheet.getStyle("ICON_STYLE")
clsbne_upload.TotalColumn = False
clsbne_upload.ColumnFormat = "General"
clsbne_upload.ValType = ""
clsbne_upload.GroupChildColumns = True
clsBlock3.addLayoutColumn clsbne_upload
End Sub
Private Sub Class_Initialize_16_0(clsaccount_flex_field As BneLayoutColumn, clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clssegment1 As New BneLayoutColumn
clssegment1.isInterfaceColumn = True
clssegment1.ColumnName = "SEGMENT1"
clssegment1.InterfaceName = "GL_INTERFACE"
clssegment1.InterfaceColName = "GL_INTERFACE_SEGMENT1"
clssegment1.Prompt = "ENTITY"
clssegment1.HintText = "* List - Text"
clssegment1.Order = 1
clssegment1.DataType = 2
clssegment1.ColumnWidth = -1
clssegment1.DefaultValue = ""
clssegment1.DefaultType = ""
clssegment1.PromptStyle = m_clsStyleSheet.getStyle("")
clssegment1.HintStyle = m_clsStyleSheet.getStyle("")
clssegment1.ReadOnly = False
clssegment1.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clssegment1.ColumnStyle = m_clsStyleSheet.getStyle("")
clssegment1.TotalColumn = False
clssegment1.ColumnFormat = "@"
clssegment1.ValType = "KEYFLEX"
clssegment1.GroupChildColumns = True
clsaccount_flex_field.addChildColumn clssegment1
End Sub
Private Sub Class_Initialize_16_1(clsaccount_flex_field As BneLayoutColumn, clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clssegment2 As New BneLayoutColumn
clssegment2.isInterfaceColumn = True
clssegment2.ColumnName = "SEGMENT2"
clssegment2.InterfaceName = "GL_INTERFACE"
clssegment2.InterfaceColName = "GL_INTERFACE_SEGMENT2"
clssegment2.Prompt = "COST CENTRE"
clssegment2.HintText = "* List - Text"
clssegment2.Order = 2
clssegment2.DataType = 2
clssegment2.ColumnWidth = -1
clssegment2.DefaultValue = ""
clssegment2.DefaultType = ""
clssegment2.PromptStyle = m_clsStyleSheet.getStyle("")
clssegment2.HintStyle = m_clsStyleSheet.getStyle("")
clssegment2.ReadOnly = False
clssegment2.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clssegment2.ColumnStyle = m_clsStyleSheet.getStyle("")
clssegment2.TotalColumn = False
clssegment2.ColumnFormat = "@"
clssegment2.ValType = "KEYFLEX"
clssegment2.GroupChildColumns = True
clsaccount_flex_field.addChildColumn clssegment2
End Sub
Private Sub Class_Initialize_16_2(clsaccount_flex_field As BneLayoutColumn, clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clssegment3 As New BneLayoutColumn
clssegment3.isInterfaceColumn = True
clssegment3.ColumnName = "SEGMENT3"
clssegment3.InterfaceName = "GL_INTERFACE"
clssegment3.InterfaceColName = "GL_INTERFACE_SEGMENT3"
clssegment3.Prompt = "SUBJECTIVE"
clssegment3.HintText = "* List - Text"
clssegment3.Order = 3
clssegment3.DataType = 2
clssegment3.ColumnWidth = -1
clssegment3.DefaultValue = ""
clssegment3.DefaultType = ""
clssegment3.PromptStyle = m_clsStyleSheet.getStyle("")
clssegment3.HintStyle = m_clsStyleSheet.getStyle("")
clssegment3.ReadOnly = False
clssegment3.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clssegment3.ColumnStyle = m_clsStyleSheet.getStyle("")
clssegment3.TotalColumn = False
clssegment3.ColumnFormat = "@"
clssegment3.ValType = "KEYFLEX"
clssegment3.GroupChildColumns = True
clsaccount_flex_field.addChildColumn clssegment3
End Sub
Private Sub Class_Initialize_16_3(clsaccount_flex_field As BneLayoutColumn, clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clssegment4 As New BneLayoutColumn
clssegment4.isInterfaceColumn = True
clssegment4.ColumnName = "SEGMENT4"
clssegment4.InterfaceName = "GL_INTERFACE"
clssegment4.InterfaceColName = "GL_INTERFACE_SEGMENT4"
clssegment4.Prompt = "ANALYSIS 1"
clssegment4.HintText = "* List - Text"
clssegment4.Order = 4
clssegment4.DataType = 2
clssegment4.ColumnWidth = -1
clssegment4.DefaultValue = ""
clssegment4.DefaultType = ""
clssegment4.PromptStyle = m_clsStyleSheet.getStyle("")
clssegment4.HintStyle = m_clsStyleSheet.getStyle("")
clssegment4.ReadOnly = False
clssegment4.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clssegment4.ColumnStyle = m_clsStyleSheet.getStyle("")
clssegment4.TotalColumn = False
clssegment4.ColumnFormat = "00000"
clssegment4.ValType = "KEYFLEX"
clssegment4.GroupChildColumns = True
clsaccount_flex_field.addChildColumn clssegment4
End Sub
Private Sub Class_Initialize_16_4(clsaccount_flex_field As BneLayoutColumn, clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clssegment5 As New BneLayoutColumn
clssegment5.isInterfaceColumn = True
clssegment5.ColumnName = "SEGMENT5"
clssegment5.InterfaceName = "GL_INTERFACE"
clssegment5.InterfaceColName = "GL_INTERFACE_SEGMENT5"
clssegment5.Prompt = "ANALYSIS 2"
clssegment5.HintText = "* List - Text"
clssegment5.Order = 5
clssegment5.DataType = 2
clssegment5.ColumnWidth = -1
clssegment5.DefaultValue = ""
clssegment5.DefaultType = ""
clssegment5.PromptStyle = m_clsStyleSheet.getStyle("")
clssegment5.HintStyle = m_clsStyleSheet.getStyle("")
clssegment5.ReadOnly = False
clssegment5.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clssegment5.ColumnStyle = m_clsStyleSheet.getStyle("")
clssegment5.TotalColumn = False
clssegment5.ColumnFormat = "00000"
clssegment5.ValType = "KEYFLEX"
clssegment5.GroupChildColumns = True
clsaccount_flex_field.addChildColumn clssegment5
End Sub
Private Sub Class_Initialize_16_5(clsaccount_flex_field As BneLayoutColumn, clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clssegment6 As New BneLayoutColumn
clssegment6.isInterfaceColumn = True
clssegment6.ColumnName = "SEGMENT6"
clssegment6.InterfaceName = "GL_INTERFACE"
clssegment6.InterfaceColName = "GL_INTERFACE_SEGMENT6"
clssegment6.Prompt = "SPARE"
clssegment6.HintText = "* List - Text"
clssegment6.Order = 6
clssegment6.DataType = 2
clssegment6.ColumnWidth = -1
clssegment6.DefaultValue = ""
clssegment6.DefaultType = ""
clssegment6.PromptStyle = m_clsStyleSheet.getStyle("")
clssegment6.HintStyle = m_clsStyleSheet.getStyle("")
clssegment6.ReadOnly = False
clssegment6.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clssegment6.ColumnStyle = m_clsStyleSheet.getStyle("")
clssegment6.TotalColumn = False
clssegment6.ColumnFormat = "000000"
clssegment6.ValType = "KEYFLEX"
clssegment6.GroupChildColumns = True
clsaccount_flex_field.addChildColumn clssegment6
End Sub
Private Sub Class_Initialize_16_6(clsaccount_flex_field As BneLayoutColumn, clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
clsaccount_flex_field.isInterfaceColumn = True
clsaccount_flex_field.ColumnName = "ACCOUNT_FLEX_FIELD"
clsaccount_flex_field.InterfaceName = "GL_INTERFACE"
clsaccount_flex_field.InterfaceColName = "GL_INTERFACE_ACCOUNT_FLEX_FIELD"
clsaccount_flex_field.Prompt = "Account"
clsaccount_flex_field.HintText = "* List - Text"
clsaccount_flex_field.Order = 2
clsaccount_flex_field.DataType = 0
clsaccount_flex_field.ColumnWidth = -1
clsaccount_flex_field.DefaultValue = ""
clsaccount_flex_field.DefaultType = ""
clsaccount_flex_field.PromptStyle = m_clsStyleSheet.getStyle("")
clsaccount_flex_field.HintStyle = m_clsStyleSheet.getStyle("")
clsaccount_flex_field.ReadOnly = False
clsaccount_flex_field.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clsaccount_flex_field.ColumnStyle = m_clsStyleSheet.getStyle("")
clsaccount_flex_field.TotalColumn = False
clsaccount_flex_field.ColumnFormat = "General"
clsaccount_flex_field.ValType = "KEYFLEX"
clsaccount_flex_field.GroupChildColumns = True
Class_Initialize_16_0 clsaccount_flex_field, clsBlock1, clsBlock2, clsBlock3
Class_Initialize_16_1 clsaccount_flex_field, clsBlock1, clsBlock2, clsBlock3
Class_Initialize_16_2 clsaccount_flex_field, clsBlock1, clsBlock2, clsBlock3
Class_Initialize_16_3 clsaccount_flex_field, clsBlock1, clsBlock2, clsBlock3
Class_Initialize_16_4 clsaccount_flex_field, clsBlock1, clsBlock2, clsBlock3
Class_Initialize_16_5 clsaccount_flex_field, clsBlock1, clsBlock2, clsBlock3
End Sub
Private Sub Class_Initialize_16_7(clsaccount_flex_field As BneLayoutColumn, clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
clsBlock3.addLayoutColumn clsaccount_flex_field
End Sub
Private Sub Class_Initialize_16(clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clsaccount_flex_field As New BneLayoutColumn
Class_Initialize_16_6 clsaccount_flex_field, clsBlock1, clsBlock2, clsBlock3
Class_Initialize_16_7 clsaccount_flex_field, clsBlock1, clsBlock2, clsBlock3
End Sub
Private Sub Class_Initialize_17(clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clsentered_dr As New BneLayoutColumn
clsentered_dr.isInterfaceColumn = True
clsentered_dr.ColumnName = "ENTERED_DR"
clsentered_dr.InterfaceName = "GL_INTERFACE"
clsentered_dr.InterfaceColName = "GL_INTERFACE_ENTERED_DR"
clsentered_dr.Prompt = "Debit"
clsentered_dr.HintText = "* Number"
clsentered_dr.Order = 8
clsentered_dr.DataType = 1
clsentered_dr.ColumnWidth = 15
clsentered_dr.DefaultValue = ""
clsentered_dr.DefaultType = ""
clsentered_dr.PromptStyle = m_clsStyleSheet.getStyle("")
clsentered_dr.HintStyle = m_clsStyleSheet.getStyle("")
clsentered_dr.ReadOnly = False
clsentered_dr.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clsentered_dr.ColumnStyle = m_clsStyleSheet.getStyle("")
clsentered_dr.TotalColumn = True
clsentered_dr.ColumnFormat = "General"
clsentered_dr.ValType = ""
clsBlock3.addLayoutColumn clsentered_dr
End Sub
Private Sub Class_Initialize_18(clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clsentered_cr As New BneLayoutColumn
clsentered_cr.isInterfaceColumn = True
clsentered_cr.ColumnName = "ENTERED_CR"
clsentered_cr.InterfaceName = "GL_INTERFACE"
clsentered_cr.InterfaceColName = "GL_INTERFACE_ENTERED_CR"
clsentered_cr.Prompt = "Credit"
clsentered_cr.HintText = "* Number"
clsentered_cr.Order = 9
clsentered_cr.DataType = 1
clsentered_cr.ColumnWidth = 15
clsentered_cr.DefaultValue = ""
clsentered_cr.DefaultType = ""
clsentered_cr.PromptStyle = m_clsStyleSheet.getStyle("")
clsentered_cr.HintStyle = m_clsStyleSheet.getStyle("")
clsentered_cr.ReadOnly = False
clsentered_cr.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clsentered_cr.ColumnStyle = m_clsStyleSheet.getStyle("")
clsentered_cr.TotalColumn = True
clsentered_cr.ColumnFormat = "General"
clsentered_cr.ValType = ""
clsBlock3.addLayoutColumn clsentered_cr
End Sub
Private Sub Class_Initialize_19(clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clsreference10 As New BneLayoutColumn
clsreference10.isInterfaceColumn = True
clsreference10.ColumnName = "REFERENCE10"
clsreference10.InterfaceName = "GL_INTERFACE"
clsreference10.InterfaceColName = "GL_INTERFACE_REFERENCE10"
clsreference10.Prompt = "Line Description"
clsreference10.HintText = "Text"
clsreference10.Order = 10
clsreference10.DataType = 2
clsreference10.ColumnWidth = 15
clsreference10.DefaultValue = ""
clsreference10.DefaultType = ""
clsreference10.PromptStyle = m_clsStyleSheet.getStyle("")
clsreference10.HintStyle = m_clsStyleSheet.getStyle("")
clsreference10.ReadOnly = False
clsreference10.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clsreference10.ColumnStyle = m_clsStyleSheet.getStyle("")
clsreference10.TotalColumn = False
clsreference10.ColumnFormat = "@"
clsreference10.ValType = ""
clsBlock3.addLayoutColumn clsreference10
End Sub
Private Sub Class_Initialize_20_0(clsmessages As BneLayoutColumn, clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clsbne_messages_lamp As New BneLayoutColumn
clsbne_messages_lamp.isInterfaceColumn = False
clsbne_messages_lamp.ColumnName = "BNE_MESSAGES_LAMP"
clsbne_messages_lamp.InterfaceColName = "BNE_MESSAGES_LAMP"
clsbne_messages_lamp.Order = 1
clsbne_messages_lamp.DataType = 0
clsbne_messages_lamp.ColumnWidth = 3
clsbne_messages_lamp.DefaultValue = ""
clsbne_messages_lamp.DefaultType = ""
clsbne_messages_lamp.PromptStyle = m_clsStyleSheet.getStyle("")
clsbne_messages_lamp.HintStyle = m_clsStyleSheet.getStyle("")
clsbne_messages_lamp.ReadOnly = False
clsbne_messages_lamp.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clsbne_messages_lamp.ColumnStyle = m_clsStyleSheet.getStyle("ICON_STYLE")
clsbne_messages_lamp.TotalColumn = False
clsbne_messages_lamp.ColumnFormat = "General"
clsbne_messages_lamp.ValType = ""
clsbne_messages_lamp.GroupChildColumns = True
clsmessages.addChildColumn clsbne_messages_lamp
End Sub
Private Sub Class_Initialize_20_1(clsmessages As BneLayoutColumn, clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clsbne_messages_hidden As New BneLayoutColumn
clsbne_messages_hidden.isInterfaceColumn = False
clsbne_messages_hidden.ColumnName = "BNE_MESSAGES_HIDDEN"
clsbne_messages_hidden.InterfaceColName = "BNE_MESSAGES_HIDDEN"
clsbne_messages_hidden.Order = 2
clsbne_messages_hidden.DataType = 0
clsbne_messages_hidden.ColumnWidth = 0
clsbne_messages_hidden.DefaultValue = ""
clsbne_messages_hidden.DefaultType = ""
clsbne_messages_hidden.PromptStyle = m_clsStyleSheet.getStyle("")
clsbne_messages_hidden.HintStyle = m_clsStyleSheet.getStyle("")
clsbne_messages_hidden.ReadOnly = False
clsbne_messages_hidden.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clsbne_messages_hidden.ColumnStyle = m_clsStyleSheet.getStyle("")
clsbne_messages_hidden.TotalColumn = False
clsbne_messages_hidden.ColumnFormat = "General"
clsbne_messages_hidden.ValType = ""
clsbne_messages_hidden.GroupChildColumns = True
clsmessages.addChildColumn clsbne_messages_hidden
End Sub
Private Sub Class_Initialize_20_2(clsmessages As BneLayoutColumn, clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clsbne_messages As New BneLayoutColumn
clsbne_messages.isInterfaceColumn = False
clsbne_messages.ColumnName = "BNE_MESSAGES"
clsbne_messages.InterfaceColName = "BNE_MESSAGES"
clsbne_messages.Prompt = "Messages"
clsbne_messages.Order = 3
clsbne_messages.DataType = 0
clsbne_messages.ColumnWidth = 30
clsbne_messages.DefaultValue = ""
clsbne_messages.DefaultType = ""
clsbne_messages.PromptStyle = m_clsStyleSheet.getStyle("")
clsbne_messages.HintStyle = m_clsStyleSheet.getStyle("")
clsbne_messages.ReadOnly = False
clsbne_messages.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clsbne_messages.ColumnStyle = m_clsStyleSheet.getStyle("")
clsbne_messages.TotalColumn = False
clsbne_messages.ColumnFormat = "General"
clsbne_messages.ValType = ""
clsbne_messages.GroupChildColumns = True
clsmessages.addChildColumn clsbne_messages
End Sub
Private Sub Class_Initialize_20_3(clsmessages As BneLayoutColumn, clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
clsmessages.isInterfaceColumn = False
clsmessages.ColumnName = "MESSAGES"
clsmessages.InterfaceColName = "MESSAGES"
clsmessages.Order = 11
clsmessages.DataType = 0
clsmessages.ColumnWidth = 15
clsmessages.DefaultValue = ""
clsmessages.DefaultType = ""
clsmessages.PromptStyle = m_clsStyleSheet.getStyle("")
clsmessages.HintStyle = m_clsStyleSheet.getStyle("")
clsmessages.ReadOnly = True
clsmessages.ReadOnlyStyle = m_clsStyleSheet.getStyle("READ_ONLY")
clsmessages.ColumnStyle = m_clsStyleSheet.getStyle("")
clsmessages.TotalColumn = False
clsmessages.ColumnFormat = "General"
clsmessages.ValType = ""
clsmessages.GroupChildColumns = True
Class_Initialize_20_0 clsmessages, clsBlock1, clsBlock2, clsBlock3
Class_Initialize_20_1 clsmessages, clsBlock1, clsBlock2, clsBlock3
Class_Initialize_20_2 clsmessages, clsBlock1, clsBlock2, clsBlock3
End Sub
Private Sub Class_Initialize_20_4(clsmessages As BneLayoutColumn, clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
clsBlock3.addLayoutColumn clsmessages
End Sub
Private Sub Class_Initialize_20(clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
Dim clsmessages As New BneLayoutColumn
Class_Initialize_20_3 clsmessages, clsBlock1, clsBlock2, clsBlock3
Class_Initialize_20_4 clsmessages, clsBlock1, clsBlock2, clsBlock3
End Sub
Private Sub Class_Initialize_21(clsBlock1 As BneLayoutBlock, clsBlock2 As BneLayoutBlock, clsBlock3 As BneLayoutBlock)
clsBlock1.LayoutElement = "CONTEXT"
clsBlock1.BlockId = 1
clsBlock1.Orientation = "HORIZONTAL"
clsBlock1.PromptSpan = 2
clsBlock1.HintSpan = 0
clsBlock1.DataSpan = 2
clsBlock1.UserName = "Context"
clsBlock1.BlockStyle = m_clsStyleSheet.getStyle("BNE_CONTEXT")
clsBlock1.PromptStyle = m_clsStyleSheet.getStyle("BNE_CONTEXT_HEADER")
clsBlock1.HintStyle = m_clsStyleSheet.getStyle("")
clsBlock1.DataStyle = m_clsStyleSheet.getStyle("BNE_CONTEXT_ROW")
clsBlock1.SummaryStyle = m_clsStyleSheet.getStyle("BNE_LINES_TOTAL")
clsBlock1.TitleStyle = m_clsStyleSheet.getStyle("TITLE")
clsBlock1.BLOCKSIZE = 1
clsBlock1.Hidden = True
clsBlock1.ParentBlock = m_clsLayout
m_clsLayout.addLayoutBlock clsBlock1
m_colAllBlocks.add clsBlock1
Class_Initialize_0 clsBlock1, clsBlock2, clsBlock3
Class_Initialize_1 clsBlock1, clsBlock2, clsBlock3
Class_Initialize_2 clsBlock1, clsBlock2, clsBlock3
Class_Initialize_3 clsBlock1, clsBlock2, clsBlock3
Class_Initialize_4 clsBlock1, clsBlock2, clsBlock3
clsBlock2.LayoutElement = "HEADER"
clsBlock2.BlockId = 2
clsBlock2.Orientation = "HORIZONTAL"
clsBlock2.PromptSpan = 2
clsBlock2.HintSpan = 1
clsBlock2.DataSpan = 2
clsBlock2.UserName = "Header"
clsBlock2.BlockStyle = m_clsStyleSheet.getStyle("BNE_HEADER")
clsBlock2.PromptStyle = m_clsStyleSheet.getStyle("BNE_HEADER_HEADER")
clsBlock2.HintStyle = m_clsStyleSheet.getStyle("BNE_HEADER_HINT")
clsBlock2.DataStyle = m_clsStyleSheet.getStyle("BNE_HEADER_ROW")
clsBlock2.SummaryStyle = m_clsStyleSheet.getStyle("BNE_LINES_TOTAL")
clsBlock2.TitleStyle = m_clsStyleSheet.getStyle("TITLE")
clsBlock2.BLOCKSIZE = 1
clsBlock2.Hidden = False
clsBlock2.ParentBlock = clsBlock1
clsBlock1.addLayoutBlock clsBlock2
m_colAllBlocks.add clsBlock2
Class_Initialize_5 clsBlock1, clsBlock2, clsBlock3
Class_Initialize_6 clsBlock1, clsBlock2, clsBlock3
Class_Initialize_7 clsBlock1, clsBlock2, clsBlock3
Class_Initialize_8 clsBlock1, clsBlock2, clsBlock3
Class_Initialize_9 clsBlock1, clsBlock2, clsBlock3
Class_Initialize_10 clsBlock1, clsBlock2, clsBlock3
Class_Initialize_11 clsBlock1, clsBlock2, clsBlock3
Class_Initialize_12 clsBlock1, clsBlock2, clsBlock3
Class_Initialize_13 clsBlock1, clsBlock2, clsBlock3
Class_Initialize_14 clsBlock1, clsBlock2, clsBlock3
clsBlock3.LayoutElement = "LINE"
clsBlock3.BlockId = 3
clsBlock3.Orientation = "VERTICAL"
clsBlock3.PromptSpan = 2
clsBlock3.HintSpan = 1
clsBlock3.DataSpan = 2
clsBlock3.BlockText = "Tip: This is not the end of the Template.  Unprotect the sheet and insert as many rows as needed."
clsBlock3.UserName = "Line"
clsBlock3.BlockStyle = m_clsStyleSheet.getStyle("BNE_LINES")
clsBlock3.PromptStyle = m_clsStyleSheet.getStyle("BNE_LINES_HEADER")
clsBlock3.HintStyle = m_clsStyleSheet.getStyle("BNE_LINES_HINT")
clsBlock3.DataStyle = m_clsStyleSheet.getStyle("BNE_LINES_ROW")
clsBlock3.SummaryStyle = m_clsStyleSheet.getStyle("BNE_LINES_TOTAL")
clsBlock3.TitleStyle = m_clsStyleSheet.getStyle("TITLE")
clsBlock3.BLOCKSIZE = 10
clsBlock3.Hidden = False
clsBlock3.ParentBlock = clsBlock2
clsBlock2.addLayoutBlock clsBlock3
m_colAllBlocks.add clsBlock3
Class_Initialize_15 clsBlock1, clsBlock2, clsBlock3
Class_Initialize_16 clsBlock1, clsBlock2, clsBlock3
Class_Initialize_17 clsBlock1, clsBlock2, clsBlock3
Class_Initialize_18 clsBlock1, clsBlock2, clsBlock3
Class_Initialize_19 clsBlock1, clsBlock2, clsBlock3
Class_Initialize_20 clsBlock1, clsBlock2, clsBlock3
End Sub
Private Sub Class_Initialize()
On Error GoTo ErrorHandler
Set m_clsStyleSheet = New BneStyleSheet
Set m_clsLayout = New BneLayoutBlock
Set m_colAllBlocks = New Collection
m_clsLayout.Hidden = True
m_clsLayout.StartRow = 1
m_clsLayout.EndRow = 1
m_blnReadOnly = False
Dim clsBlock1 As New BneLayoutBlock
Dim clsBlock2 As New BneLayoutBlock
Dim clsBlock3 As New BneLayoutBlock
Class_Initialize_21 clsBlock1, clsBlock2, clsBlock3
Exit Sub
ErrorHandler:
AddBneMsg BNE_ERROR, "BneLayout.Class_Initialize", "Error: " & Err.Description
Resume Next
End Sub
Private Sub Class_Terminate()
Set m_clsLayout = Nothing
Set m_objSheet = Nothing
Set m_clsStyleSheet = Nothing
Set m_colAllBlocks = Nothing
End Sub
Public Property Let ReadOnly(blnReadOnly As Boolean)
Dim clsBlock As BneLayoutBlock
m_blnReadOnly = blnReadOnly
If Not m_clsLayout Is Nothing Then
m_clsLayout.applyReadOnlyStyle blnReadOnly
End If
End Property
Public Property Get ReadOnly() As Boolean
ReadOnly = m_blnReadOnly
End Property
Public Property Get Layout() As BneLayoutBlock
Set Layout = m_clsLayout
End Property
Public Property Let Layout(objLayout As BneLayoutBlock)
Set m_clsLayout = objLayout
End Property
Public Property Get StyleSheet() As BneStyleSheet
Set StyleSheet = m_clsStyleSheet
End Property
Public Property Let StyleSheet(objStyleSheet As BneStyleSheet)
Set m_clsStyleSheet = objStyleSheet
End Property
Public Sub render(objLayoutSheet As Worksheet, Optional intBlockid As Integer = 0)
Dim objCellRange As Range
Dim clsSheetStyle As BneStyle
Dim protectSheet As Boolean
If Not objLayoutSheet Is Nothing Then
Set m_objSheet = objLayoutSheet
m_objSheet.Activate
If Not m_clsLayout Is Nothing Then
applySheetStyle
Application.EnableEvents = False
CreatePopCache
m_clsLayout.render m_objSheet, intBlockid
End If
Set clsSheetStyle = m_clsStyleSheet.getStyle("BNE_PAGE")
m_objSheet.Protect
If Not clsSheetStyle Is Nothing Then
On Error Resume Next
protectSheet = clsSheetStyle.getStylePropertyValue("protected")
If Not protectSheet Then
m_objSheet.Unprotect
End If
End If
End If
Application.EnableEvents = True
AddBneMsg BNE_TRACE, "BneLayout.render", "Completed Rendering Layout"
End Sub
Sub applySheetStyle()
Dim rngMaskCell As Range
Dim clsSheetStyle As BneStyle
Columns("A:A").ColumnWidth = 2
m_objSheet.Rows(1).RowHeight = 0
m_objSheet.Rows(2).RowHeight = 0
m_objSheet.Rows(3).RowHeight = 18
m_clsLayout.StartRow = m_clsLayout.StartRow + 1
m_clsLayout.EndRow = m_clsLayout.EndRow + 1
Set clsSheetStyle = m_clsStyleSheet.getStyle("BNE_PAGE")
If Not clsSheetStyle Is Nothing Then
clsSheetStyle.applyStyle m_objSheet.Cells
End If
ActiveWindow.DisplayOutline = False
End Sub
Public Function getLayoutBlocks() As Collection
Set getLayoutBlocks = m_colAllBlocks
End Function
Sub CreatePopCache()
Dim objPopCacheSheet As Worksheet
On Error Resume Next
Set objPopCacheSheet = Worksheets("PopCache")
On Error GoTo 0
If objPopCacheSheet Is Nothing Then
Set objPopCacheSheet = Worksheets.add
objPopCacheSheet.name = "PopCache"
objPopCacheSheet.Visible = xlSheetVeryHidden
Call CreatePopList_PopCache_GL_INTERFACE_REFERENCE7(objPopCacheSheet)
End If
End Sub
Sub CreatePopList_PopCache_GL_INTERFACE_REFERENCE7(objSheet As Worksheet)
Dim rngCells As Range
On Error Resume Next
Set rngCells = objSheet.Range(objSheet.Cells(1, 1), objSheet.Cells(2, 1))
rngCells.NumberFormat = "@"
objSheet.Cells(1, 1).value = "No"
objSheet.Cells(2, 1).value = "Yes"
Application.ActiveWorkbook.Names.add name:="PopCache_GL_INTERFACE_REFERENCE7", RefersTo:=rngCells, Visible:=False
End Sub
Attribute VB_Name = "BneLayoutBlock"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Option Base 1
Private m_colLayoutBlocks As Collection
Private m_colLayoutColumns As Collection
Private m_strBlockText As String
Private m_strBlockTitle As String
Private m_strUserName As String
Private m_intBlockId As Integer
Private m_intPromptSpan As Integer
Private m_intHintSpan As Integer
Private m_intDataSpan As Integer
Private m_strOrientation As String
Private m_intStartRow As Long
Private m_intStartCol As Integer
Private m_intEndRow As Long
Private m_intEndCol As Integer
Private m_intBlockSize As Long
Private m_clsParentBlock As BneLayoutBlock
Private m_blnReadOnly As Boolean
Private m_blnTotal As Boolean
Private m_clsBlockStyle As BneStyle
Private m_clsPromptStyle As BneStyle
Private m_clsHintStyle As BneStyle
Private m_clsSummaryStyle As BneStyle
Private m_clsDataStyle As BneStyle
Private m_clsTitleStyle As BneStyle
Private m_strLayoutElement As String
Private m_blnHidden As Boolean
Private m_blnHideButton As Boolean
Private Const SPACE As Integer = 2
Public Sub Class_Initialize()
Set m_colLayoutBlocks = New Collection
Set m_colLayoutColumns = New Collection
Set m_clsBlockStyle = New BneStyle
Set m_clsPromptStyle = New BneStyle
Set m_clsHintStyle = New BneStyle
Set m_clsSummaryStyle = New BneStyle
Set m_clsDataStyle = New BneStyle
Set m_clsTitleStyle = New BneStyle
m_blnReadOnly = False
m_strOrientation = "VERTICAL"
m_intPromptSpan = 1
m_intDataSpan = 1
m_intStartRow = 3
m_intEndRow = 3
m_intStartCol = 2
m_intEndCol = 2
m_intBlockId = 0
End Sub
Public Sub Class_Terminate()
Set m_colLayoutBlocks = Nothing
Set m_colLayoutColumns = Nothing
Set m_clsParentBlock = Nothing
Set m_clsBlockStyle = Nothing
Set m_clsPromptStyle = Nothing
Set m_clsHintStyle = Nothing
Set m_clsSummaryStyle = Nothing
Set m_clsDataStyle = Nothing
Set m_clsTitleStyle = Nothing
End Sub
Public Property Let LayoutElement(strLayoutElement As String)
m_strLayoutElement = strLayoutElement
End Property
Public Property Get LayoutElement() As String
LayoutElement = m_strLayoutElement
End Property
Public Property Let BlockStyle(ByVal clsBlockStyle As BneStyle)
If Not clsBlockStyle Is Nothing Then
Set m_clsBlockStyle = clsBlockStyle
End If
End Property
Public Property Get BlockStyle() As BneStyle
Set BlockStyle = m_clsBlockStyle
End Property
Public Property Let PromptStyle(ByVal clsPromptStyle As BneStyle)
If Not clsPromptStyle Is Nothing Then
Set m_clsPromptStyle = clsPromptStyle
End If
End Property
Public Property Get PromptStyle() As BneStyle
Set PromptStyle = m_clsPromptStyle
End Property
Public Property Let DataStyle(ByVal clsDataStyle As BneStyle)
If Not clsDataStyle Is Nothing Then
Set m_clsDataStyle = clsDataStyle
End If
End Property
Public Property Let TitleStyle(ByVal clsTitleStyle As BneStyle)
If Not clsTitleStyle Is Nothing Then
Set m_clsTitleStyle = clsTitleStyle
End If
End Property
Public Property Get TitleStyle() As BneStyle
Set TitleStyle = m_clsTitleStyle
End Property
Public Property Let HintStyle(ByVal clsHintStyle As BneStyle)
If Not clsHintStyle Is Nothing Then
Set m_clsHintStyle = clsHintStyle
End If
End Property
Public Property Let SummaryStyle(ByVal clsSummaryStyle As BneStyle)
If Not clsSummaryStyle Is Nothing Then
Set m_clsSummaryStyle = clsSummaryStyle
End If
End Property
Public Property Get SummaryStyle() As BneStyle
Set SummaryStyle = m_clsSummaryStyle
End Property
Public Property Let BlockText(strLayoutText As String)
m_strBlockText = strLayoutText
End Property
Public Property Let UserName(strUserName As String)
m_strUserName = strUserName
End Property
Public Property Let PromptSpan(strPromptSpan As Integer)
m_intPromptSpan = strPromptSpan
End Property
Public Property Let HintSpan(intHintSpan As Integer)
m_intHintSpan = intHintSpan
End Property
Public Property Get HintSpan() As Integer
HintSpan = m_intHintSpan
End Property
Public Property Let HideButton(blnHide As Boolean)
m_blnHideButton = blnHide
End Property
Public Property Get HideButton() As Boolean
HideButton = m_blnHideButton
End Property
Public Property Let DataSpan(intDataSpan As Integer)
m_intDataSpan = intDataSpan
End Property
Public Property Let Orientation(strOrientation As String)
m_strOrientation = strOrientation
End Property
Public Property Get Orientation() As String
Orientation = m_strOrientation
End Property
Public Property Get HideHintText() As Boolean
HideHintText = False
If m_intHintSpan = 0 Then
HideHintText = True
End If
End Property
Public Property Get Total() As Boolean
Total = m_blnTotal
End Property
Public Property Get ReadOnly() As Boolean
ReadOnly = m_blnReadOnly
End Property
Public Property Get countBlocks() As Integer
On Error Resume Next
countBlocks = m_colLayoutBlocks.count
End Property
Public Property Get countDisplayedColumns() As Integer
Dim intCount As Integer
intCount = 0
Dim clsLayoutColumn As BneLayoutColumn
If m_colLayoutColumns.count > 0 Then
For Each clsLayoutColumn In m_colLayoutColumns
intCount = intCount + clsLayoutColumn.countDisplayedChildColumns
If clsLayoutColumn.ColumnWidth > 0 And clsLayoutColumn.countDisplayedChildColumns = 0 Then
intCount = intCount + 1
End If
Next
End If
countDisplayedColumns = intCount
End Property
Public Property Get CountColumns() As Integer
Dim intCount As Integer
intCount = 0
Dim clsLayoutColumn As BneLayoutColumn
If m_colLayoutColumns.count > 0 Then
For Each clsLayoutColumn In m_colLayoutColumns
If clsLayoutColumn.countChildColumns > 0 Then
intCount = intCount + clsLayoutColumn.countChildColumns
Else
intCount = intCount + 1
End If
Next
End If
CountColumns = intCount
End Property
Public Property Get layoutColumns() As Collection
Set layoutColumns = m_colLayoutColumns
End Property
Public Property Get layoutBlocks() As Collection
Set layoutBlocks = m_colLayoutBlocks
End Property
Public Property Let BlockTitle(strBlockTitle As String)
m_strBlockTitle = strBlockTitle
End Property
Public Property Let ParentBlock(ByVal clsParentBlock As BneLayoutBlock)
Set m_clsParentBlock = clsParentBlock
End Property
Public Property Get ParentBlock() As BneLayoutBlock
Set ParentBlock = m_clsParentBlock
End Property
Public Property Let BlockId(intBlockid As Integer)
m_intBlockId = intBlockid
End Property
Public Property Get BlockId() As Integer
BlockId = m_intBlockId
End Property
Public Property Let StartCol(intStartCol As Integer)
m_intStartCol = intStartCol
End Property
Public Property Get StartCol() As Integer
StartCol = m_intStartCol
End Property
Public Property Let StartRow(intStartRow As Long)
m_intStartRow = intStartRow
End Property
Public Property Get StartRow() As Long
StartRow = m_intStartRow
End Property
Public Property Let EndCol(intEndCol As Integer)
m_intEndCol = intEndCol
End Property
Public Property Get EndCol() As Integer
EndCol = m_intEndCol
End Property
Public Property Let EndRow(intEndRow As Long)
m_intEndRow = intEndRow
End Property
Public Property Get EndRow() As Long
EndRow = m_intEndRow
End Property
Public Property Let BLOCKSIZE(intBlockSize As Long)
m_intBlockSize = intBlockSize
End Property
Public Property Get BLOCKSIZE() As Long
BLOCKSIZE = m_intBlockSize
End Property
Public Property Let Hidden(blnHidden As Boolean)
m_blnHidden = blnHidden
End Property
Public Sub addLayoutColumn(clsLayoutColumn As BneLayoutColumn)
On Error Resume Next
clsLayoutColumn.PromptSpan = m_intPromptSpan
clsLayoutColumn.DataSpan = m_intDataSpan
clsLayoutColumn.Orientation = m_strOrientation
clsLayoutColumn.HintSpan = m_intHintSpan
If m_blnReadOnly = True Then
clsLayoutColumn.ReadOnly = True
End If
clsLayoutColumn.ColumnStyle.setParentStyle m_clsDataStyle
clsLayoutColumn.PromptStyle.setParentStyle m_clsPromptStyle
clsLayoutColumn.HintStyle.setParentStyle m_clsHintStyle
clsLayoutColumn.SummaryStyle.setParentStyle m_clsSummaryStyle
If clsLayoutColumn.countChildColumns > 0 Then
Dim clsChildCol As BneLayoutColumn
For Each clsChildCol In clsLayoutColumn.childColumns
clsChildCol.PromptSpan = clsLayoutColumn.PromptSpan
clsChildCol.HintSpan = clsLayoutColumn.HintSpan
clsChildCol.DataSpan = clsLayoutColumn.DataSpan
clsChildCol.Orientation = clsLayoutColumn.Orientation
clsChildCol.ReadOnly = clsLayoutColumn.ReadOnly
clsChildCol.PromptStyle.setParentStyle clsLayoutColumn.PromptStyle
clsChildCol.HintStyle.setParentStyle clsLayoutColumn.HintStyle
clsChildCol.ColumnStyle.setParentStyle clsLayoutColumn.ColumnStyle
clsChildCol.SummaryStyle.setParentStyle clsLayoutColumn.SummaryStyle
clsChildCol.Orientation = clsLayoutColumn.Orientation
Next
End If
m_colLayoutColumns.add clsLayoutColumn, clsLayoutColumn.InterfaceColName
If clsLayoutColumn.TotalColumn = True And m_strOrientation = "VERTICAL" Then
m_blnTotal = True
End If
End Sub
Public Sub applyReadOnlyStyle(blnReadOnly As Boolean)
Dim clsBlock As BneLayoutBlock
Dim clsColumn As BneLayoutColumn
m_blnReadOnly = blnReadOnly
For Each clsBlock In m_colLayoutBlocks
For Each clsColumn In clsBlock.layoutColumns
clsColumn.ReadOnly = m_blnReadOnly
Next
clsBlock.applyReadOnlyStyle m_blnReadOnly
Next
End Sub
Public Function hasBlockTitle() As Boolean
hasBlockTitle = False
If Len(m_strBlockTitle) > 0 Then
hasBlockTitle = True
End If
End Function
Public Function hasBlockText() As Boolean
hasBlockText = False
If Len(m_strBlockText) > 0 Then
hasBlockText = True
End If
End Function
Public Sub addLayoutBlock(clsLayoutBlock As BneLayoutBlock)
On Error Resume Next
clsLayoutBlock.ParentBlock = Me
m_colLayoutBlocks.add clsLayoutBlock, Str(clsLayoutBlock.BlockId)
End Sub
Private Function getLowestBlockRow(clsLayoutBlock As BneLayoutBlock)
Dim intLastRow As Long
Dim clsParentBlock As BneLayoutBlock
Set clsParentBlock = clsLayoutBlock.ParentBlock
If Not clsParentBlock Is Nothing Then
intLastRow = clsParentBlock.EndRow
If clsParentBlock.hasBlockText Then
intLastRow = intLastRow + 1
End If
End If
Dim clsParentParentBlock As BneLayoutBlock
Set clsParentParentBlock = clsParentBlock.ParentBlock
If Not clsParentParentBlock Is Nothing Then
Dim clsChildBlock As BneLayoutBlock
For Each clsChildBlock In clsParentParentBlock.layoutBlocks
If clsChildBlock.EndRow > intLastRow Then
intLastRow = clsChildBlock.EndRow
End If
Next
End If
getLowestBlockRow = intLastRow
End Function
Public Function getPreviousSibling() As BneLayoutBlock
Dim clsSibling As BneLayoutBlock
Dim clsPrevBlock As BneLayoutBlock
Dim intSibEndCol As Integer
intSibEndCol = m_intEndCol
If (Not m_clsParentBlock Is Nothing) And (m_clsParentBlock.countBlocks > 1) Then
For Each clsSibling In m_clsParentBlock.layoutBlocks
If clsSibling.EndCol > intSibEndCol Then
intSibEndCol = clsSibling.EndCol
Set clsPrevBlock = clsSibling
End If
Next
End If
Set getPreviousSibling = clsPrevBlock
End Function
Public Sub positionBlock(intBlockid As Integer)
If m_intBlockId = intBlockid Then
If Not m_clsParentBlock Is Nothing Then
If m_clsParentBlock.countBlocks > 1 Then
Dim clsSibling As BneLayoutBlock
Set clsSibling = getPreviousSibling()
If Not clsSibling Is Nothing Then
StartRow = clsSibling.StartRow
StartCol = clsSibling.EndCol + SPACE
Else
StartRow = getLowestBlockRow(Me) + SPACE
StartCol = SPACE
End If
Else
StartRow = getLowestBlockRow(Me) + SPACE
StartCol = SPACE
End If
End If
If Me.Orientation = "HORIZONTAL" Then
EndRow = StartRow + countDisplayedColumns - 1
If hasBlockTitle Then
EndRow = EndRow + 1
End If
EndCol = StartCol + m_intPromptSpan + m_intHintSpan + m_intDataSpan - 1
Else
EndRow = StartRow + m_intBlockSize 'prompt and block size
If Not Me.HideHintText Then
EndRow = EndRow + 1
End If
If m_blnTotal Then
EndRow = EndRow + 1
End If
EndCol = StartCol + CountColumns - 1
End If
End If
End Sub
Private Sub applyBoxStyle(objSheet As Worksheet)
Dim objBoxRange As Range
Set objBoxRange = objSheet.Range(Cells(m_intStartRow, m_intStartCol), Cells(m_intEndRow, m_intEndCol))
On Error Resume Next
If Not Me.BlockStyle Is Nothing Then
Me.BlockStyle.applyStyle objBoxRange
End If
End Sub
Private Sub updateRegionRange(objSheet As Worksheet)
Dim objRegionRange As Range
Dim objBoxRange As Range
On Error Resume Next
Set objRegionRange = objSheet.Range(Me.LayoutElement)
On Error GoTo ErrorHandler
Set objBoxRange = objSheet.Range(Cells(m_intStartRow, m_intStartCol), Cells(m_intEndRow, m_intEndCol))
If objRegionRange Is Nothing Then
objSheet.Names.add Me.LayoutElement, objBoxRange, False
Else
Set objRegionRange = Application.Union(objBoxRange, objRegionRange)
objSheet.Names.add Me.LayoutElement, objRegionRange, False
End If
Exit Sub
ErrorHandler:
AddBneMsg BNE_ERROR, "Block.updateRegionRange for " & Me.LayoutElement, "Error: " & Err.Description
Exit Sub
End Sub
Private Sub renderBlockTitle(objSheet As Worksheet)
Dim objTitleRange As Range
If hasBlockTitle Then
Set objTitleRange = objSheet.Range(Cells(StartRow, StartCol), Cells(StartRow, EndCol))
If Not Me.TitleStyle Is Nothing Then
Me.TitleStyle.applyStyle objTitleRange
End If
objTitleRange.value = m_strBlockTitle
End If
End Sub
Private Sub renderTotal(objSheet As Worksheet)
Dim objTotalRange As Range
If m_blnTotal = True And m_strOrientation = "VERTICAL" And m_intStartCol <> m_intEndCol Then
Set objTotalRange = objSheet.Range(Cells(m_intEndRow, m_intStartCol), Cells(m_intEndRow, m_intEndCol))
objTotalRange.Columns(1).value = "Totals:"
If Not Me.SummaryStyle Is Nothing Then
Me.SummaryStyle.applyStyle objTotalRange
End If
End If
End Sub
Public Sub render(objSheet As Worksheet, iBlockid As Integer)
Dim clsBlock As BneLayoutBlock
If m_intBlockId = iBlockid Then
If m_blnHidden = False Then
positionBlock iBlockid
applyBoxStyle objSheet
updateRegionRange objSheet
renderBlockButton objSheet
renderBlockTitle objSheet
renderContent objSheet
renderTotal objSheet
renderBlockText objSheet
Else
renderContent objSheet
End If
For Each clsBlock In m_colLayoutBlocks
clsBlock.render objSheet, clsBlock.BlockId
Next
Else
For Each clsBlock In m_colLayoutBlocks
clsBlock.render objSheet, iBlockid
Next
End If
End Sub
Private Sub renderBlockButton(objSheet As Worksheet)
On Error GoTo ErrorHandler
Dim objButton As Object
Dim intCntButtons, intButtonWidth, intButtonOffset As Integer
If Me.HideButton = True Then
Exit Sub
End If
For Each objButton In objSheet.Buttons
If objButton.name = Me.LayoutElement Then
Exit Sub
End If
Next
intButtonWidth = 100
intCntButtons = objSheet.Buttons.count
intButtonOffset = (intCntButtons * intButtonWidth) + 10
Set objButton = objSheet.Buttons.add(intButtonOffset, 3, intButtonWidth, 14)
objButton.OnAction = Me.LayoutElement & "ShowRegions"
objButton.Characters.text = "View " & m_strUserName
objButton.name = Me.LayoutElement
BneFormatButton objButton, xlFreeFloating
Exit Sub
ErrorHandler:
AddBneMsg BNE_ERROR, "Block.renderBlockButton for " & Me.LayoutElement, "Error: " & Err.Description
Exit Sub
End Sub
Private Sub renderContent(objSheet As Worksheet)
Dim clsColumn As BneLayoutColumn
Dim intContentStartRow As Long
intContentStartRow = m_intStartRow
If Me.hasBlockTitle Then
intContentStartRow = m_intStartRow + 1
End If
If CountColumns > 0 Then
For Each clsColumn In m_colLayoutColumns
If m_strOrientation = "HORIZONTAL" Then
clsColumn.StartCol = m_intStartCol
clsColumn.EndCol = m_intEndCol
clsColumn.StartRow = intContentStartRow + clsColumn.Order - 1
clsColumn.EndRow = clsColumn.StartRow
clsColumn.render objSheet
Else
clsColumn.StartCol = m_intStartCol + clsColumn.Order - 1
clsColumn.EndCol = clsColumn.StartCol
If clsColumn.countChildColumns > 0 Then
clsColumn.EndCol = clsColumn.EndCol + clsColumn.countChildColumns - 1
End If
clsColumn.StartRow = intContentStartRow
If m_blnTotal = True Then
clsColumn.EndRow = m_intEndRow - 1
Else
clsColumn.EndRow = m_intEndRow
End If
clsColumn.render objSheet
End If
Next
End If
End Sub
Public Sub renderBlockText(objSheet As Worksheet)
Dim objContentRange As Range
If Len(m_strBlockText) > 0 Then
Set objContentRange = objSheet.Range(Cells(m_intEndRow + 1, m_intStartCol), Cells(m_intEndRow + 1, m_intStartCol))
objContentRange.value = m_strBlockText
End If
End Sub
Attribute VB_Name = "BneLayoutColumn"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Option Base 1
Private m_colChildColumns As Collection
Private m_strPrompt As String
Private m_strHintText As String
Private m_intOrder As Integer
Private m_strColumnName As String
Private m_strInterfaceColName As String
Private m_intStartRow As Long
Private m_intStartCol As Integer
Private m_intEndRow As Long
Private m_intEndCol As Integer
Private m_intPromptSpan As Integer
Private m_intHintSpan As Integer
Private m_intDataSpan As Integer
Private m_strOrientation As String
Private m_intColumnWidth As Integer
Private m_blnReadOnly As Boolean
Private m_blnTotalColumn As Boolean
Private m_varDefaultValue As Variant
Private m_strDefaultType As String
Private m_strColumnFormat As String
Private m_intDataType As Integer
Private m_blnInterfaceColumn As Boolean
Private m_clsPromptStyle As BneStyle
Private m_clsSummaryStyle As BneStyle
Private m_clsHintStyle As BneStyle
Private m_clsStyle As BneStyle
Private m_clsReadOnlyStyle As BneStyle
Private m_strPopListNamedRange As String
Private m_strInterfaceName As String
Private m_blnGroupChildCols As Boolean
Private m_strValType As String
Private Sub Class_Initialize()
Set m_colChildColumns = New Collection
Set m_clsPromptStyle = New BneStyle
Set m_clsHintStyle = New BneStyle
Set m_clsSummaryStyle = New BneStyle
Set m_clsStyle = New BneStyle
Set m_clsReadOnlyStyle = New BneStyle
m_blnGroupChildCols = False
End Sub
Public Sub Class_Terminate()
Set m_colChildColumns = Nothing
Set m_clsPromptStyle = Nothing
Set m_clsHintStyle = Nothing
Set m_clsSummaryStyle = Nothing
Set m_clsStyle = Nothing
Set m_clsReadOnlyStyle = Nothing
End Sub
Public Property Let InterfaceName(strInterfaceName As String)
m_strInterfaceName = strInterfaceName
End Property
Public Property Get InterfaceName() As String
InterfaceName = m_strInterfaceName
End Property
Public Property Let ColumnFormat(strColumnFormat As String)
m_strColumnFormat = strColumnFormat
End Property
Public Property Get ColumnFormat() As String
ColumnFormat = m_strColumnFormat
End Property
Public Property Let PromptStyle(ByVal clsPromptStyle As BneStyle)
If Not clsPromptStyle Is Nothing Then
Set m_clsPromptStyle = clsPromptStyle
End If
End Property
Public Property Get PromptStyle() As BneStyle
Set PromptStyle = m_clsPromptStyle
End Property
Public Property Let HintStyle(ByVal clsHintStyle As BneStyle)
If Not clsHintStyle Is Nothing Then
Set m_clsHintStyle = clsHintStyle
End If
End Property
Public Property Get HintStyle() As BneStyle
Set HintStyle = m_clsHintStyle
End Property
Public Property Let SummaryStyle(ByVal clsSummaryStyle As BneStyle)
If Not clsSummaryStyle Is Nothing Then
Set m_clsSummaryStyle = clsSummaryStyle
End If
End Property
Public Property Get SummaryStyle() As BneStyle
Set SummaryStyle = m_clsSummaryStyle
End Property
Public Property Let ColumnStyle(ByVal clsColumnStyle As BneStyle)
If Not clsColumnStyle Is Nothing Then
Set m_clsStyle = clsColumnStyle
End If
End Property
Public Property Get ColumnStyle() As BneStyle
Set ColumnStyle = m_clsStyle
End Property
Public Property Let ReadOnlyStyle(ByVal clsReadOnlyStyle As BneStyle)
If Not clsReadOnlyStyle Is Nothing Then
Set m_clsReadOnlyStyle = clsReadOnlyStyle
End If
End Property
Public Property Get ReadOnlyStyle() As BneStyle
Set ReadOnlyStyle = m_clsReadOnlyStyle
End Property
Public Property Let GroupChildColumns(blnGrpChildCols As Boolean)
m_blnGroupChildCols = blnGrpChildCols
End Property
Public Property Let ValType(strValType As String)
m_strValType = strValType
End Property
Public Property Get ValType() As String
ValType = m_strValType
End Property
Public Sub addChildColumn(clsLayoutColumn As BneLayoutColumn)
On Error Resume Next
clsLayoutColumn.PromptSpan = m_intPromptSpan
clsLayoutColumn.HintSpan = m_intHintSpan
clsLayoutColumn.DataSpan = m_intDataSpan
If m_blnReadOnly = True Then
clsLayoutColumn.ReadOnly = True
End If
m_colChildColumns.add clsLayoutColumn
End Sub
Public Property Get childColumns() As Collection
Set childColumns = m_colChildColumns
End Property
Public Sub removeChildColumn(strKey As String)
On Error Resume Next
m_colChildColumns.Remove strKey
End Sub
Public Property Get countChildColumns() As Integer
On Error Resume Next
countChildColumns = m_colChildColumns.count
End Property
Public Property Get countDisplayedChildColumns() As Integer
On Error Resume Next
Dim intCount As Integer
intCount = 0
Dim clsChildCol As BneLayoutColumn
For Each clsChildCol In m_colChildColumns
If clsChildCol.ColumnWidth > 0 Then
intCount = intCount + 1
End If
Next
countDisplayedChildColumns = intCount
End Property
Public Property Let DataType(intTypeID As Integer)
m_intDataType = intTypeID
End Property
Public Property Get DataType() As Integer
DataType = m_intDataType
End Property
Public Property Let DefaultValue(varDefaultValue As Variant)
m_varDefaultValue = varDefaultValue
End Property
Public Property Get DefaultValue() As Variant
DefaultValue = m_varDefaultValue
End Property
Public Property Let DefaultType(strDefaultType As String)
m_strDefaultType = strDefaultType
End Property
Public Property Get DefaultType() As String
DefaultType = m_strDefaultType
End Property
Public Property Let TotalColumn(blnTotalColumn As Boolean)
m_blnTotalColumn = blnTotalColumn
End Property
Public Property Get TotalColumn() As Boolean
TotalColumn = m_blnTotalColumn
End Property
Public Property Let ReadOnly(blnReadOnly As Boolean)
m_blnReadOnly = blnReadOnly
End Property
Public Property Get ReadOnly() As Boolean
ReadOnly = m_blnReadOnly
End Property
Public Property Let isInterfaceColumn(blnIsInterfaceColumn As Boolean)
m_blnInterfaceColumn = blnIsInterfaceColumn
End Property
Public Property Get isInterfaceColumn() As Boolean
isInterfaceColumn = m_blnInterfaceColumn
End Property
Public Property Let ColumnWidth(intColumnWidth As Integer)
m_intColumnWidth = intColumnWidth
End Property
Public Property Get ColumnWidth() As Integer
ColumnWidth = m_intColumnWidth
End Property
Public Property Let Orientation(strOrientation As String)
m_strOrientation = strOrientation
End Property
Public Property Get Orientation() As String
Orientation = m_strOrientation
End Property
Public Property Let PromptSpan(intPromptSpan As Integer)
m_intPromptSpan = intPromptSpan
End Property
Public Property Get PromptSpan() As Integer
PromptSpan = m_intPromptSpan
End Property
Public Property Let HintSpan(intHintSpan As Integer)
m_intHintSpan = intHintSpan
End Property
Public Property Get HintSpan() As Integer
HintSpan = m_intHintSpan
End Property
Public Property Let DataSpan(intDataSpan As Integer)
m_intDataSpan = intDataSpan
End Property
Public Property Get DataSpan() As Integer
DataSpan = m_intDataSpan
End Property
Public Property Get HideHintText() As Boolean
HideHintText = False
If m_intHintSpan = 0 Then
HideHintText = True
End If
End Property
Public Property Let StartCol(intStartCol As Integer)
m_intStartCol = intStartCol
End Property
Public Property Get StartCol() As Integer
StartCol = m_intStartCol
End Property
Public Property Let StartRow(intStartRow As Long)
m_intStartRow = intStartRow
End Property
Public Property Get StartRow() As Long
StartRow = m_intStartRow
End Property
Public Property Let EndCol(intEndCol As Integer)
m_intEndCol = intEndCol
End Property
Public Property Get EndCol() As Integer
EndCol = m_intEndCol
End Property
Public Property Let EndRow(intEndRow As Long)
m_intEndRow = intEndRow
End Property
Public Property Get EndRow() As Long
EndRow = m_intEndRow
End Property
Public Property Let ColumnName(strName As String)
m_strColumnName = strName
End Property
Public Property Get ColumnName() As String
ColumnName = m_strColumnName
End Property
Public Property Let InterfaceColName(strName As String)
m_strInterfaceColName = strName
End Property
Public Property Get InterfaceColName() As String
InterfaceColName = m_strInterfaceColName
End Property
Public Property Let Prompt(strPrompt As String)
m_strPrompt = strPrompt
End Property
Public Property Get Prompt() As String
Prompt = m_strPrompt
End Property
Public Property Let HintText(strHintText As String)
m_strHintText = strHintText
End Property
Public Property Let Order(intOrder As Integer)
m_intOrder = intOrder
End Property
Public Property Get Order() As Integer
Order = m_intOrder
End Property
Public Property Let PopListNamedRange(strPopListNamedRange As String)
m_strPopListNamedRange = strPopListNamedRange
End Property
Public Property Get PopListNamedRange() As String
PopListNamedRange = m_strPopListNamedRange
End Property
Public Sub render(objSheet As Worksheet)
Dim clsChildCol As BneLayoutColumn
Dim objDataRange As Range
If countChildColumns > 0 Then
For Each clsChildCol In m_colChildColumns
If m_strOrientation = "HORIZONTAL" Then
clsChildCol.StartCol = m_intStartCol
clsChildCol.EndCol = m_intEndCol
clsChildCol.StartRow = m_intStartRow + clsChildCol.Order - 1
clsChildCol.EndRow = clsChildCol.StartRow
Else
clsChildCol.StartCol = m_intStartCol + clsChildCol.Order - 1
clsChildCol.EndCol = clsChildCol.StartCol
clsChildCol.StartRow = m_intStartRow
clsChildCol.EndRow = m_intEndRow
End If
clsChildCol.render objSheet
Next
applyColumnGroupStyle objSheet
Else
If m_strOrientation = "HORIZONTAL" Then
If m_intColumnWidth > 0 Then
renderPrompt objCellRange:=objSheet.Range(Cells(Me.StartRow, Me.StartCol), Cells(Me.EndRow, Me.StartCol + m_intPromptSpan - 1))
If HintSpan > 0 Then
renderHint objCellRange:=objSheet.Range(Cells(Me.StartRow, Me.StartCol + m_intPromptSpan), Cells(Me.EndRow, Me.StartCol + m_intPromptSpan + m_intHintSpan - 1))
End If
renderData objSheet, objCellRange:=objSheet.Range(Cells(Me.StartRow, Me.StartCol + m_intPromptSpan + m_intHintSpan), Cells(Me.EndRow, Me.EndCol))
Else
renderHiddenHorizontalData objSheet
End If
Else
renderPrompt objCellRange:=objSheet.Range(Cells(Me.StartRow, Me.StartCol), Cells(Me.StartRow, Me.StartCol))
If HideHintText = False Then
Set objDataRange = objSheet.Range(Cells(Me.StartRow + 2, Me.StartCol), Cells(Me.EndRow, Me.StartCol))
renderData objSheet, objCellRange:=objDataRange
renderHint objCellRange:=objSheet.Range(Cells(Me.StartRow + 1, Me.StartCol), Cells(Me.StartRow + 1, Me.StartCol))
Else
Set objDataRange = objSheet.Range(Cells(Me.StartRow + 1, Me.StartCol), Cells(Me.EndRow, Me.StartCol))
renderData objSheet, objCellRange:=objDataRange
End If
renderTotal objCellRange:=objSheet.Range(Cells(Me.EndRow + 1, Me.StartCol), Cells(Me.EndRow + 1, Me.StartCol)), clsFormulaData:=objDataRange
End If
End If
End Sub
Private Sub applyColumnGroupStyle(objSheet As Worksheet)
Dim objCellRange As Range
Dim intRow As Integer
On Error GoTo ErrorHandler
If m_blnGroupChildCols And m_strOrientation = "VERTICAL" Then
intRow = m_intStartRow
Set objCellRange = objSheet.Range(Cells(intRow + 1, m_intStartCol), Cells(m_intEndRow, m_intEndCol))
With objCellRange.Borders(xlInsideVertical)
.LineStyle = xlLineStyleNone
End With
If HideHintText = False Then
intRow = intRow + 1
If Len(m_strHintText) > 0 Then
Set objCellRange = objSheet.Range(Cells(intRow, m_intStartCol), Cells(intRow, m_intEndCol))
objCellRange.clearContents
objCellRange.MergeCells = True
objCellRange.value = m_strHintText
End If
End If
End If
Exit Sub
ErrorHandler:
AddBneMsg BNE_ERROR, "BneLayoutColumn.applyColumnGroupStyle", "Error: " & Err.Description
Exit Sub
End Sub
Private Sub renderPrompt(objCellRange As Range)
If (m_intPromptSpan > 0 Or m_strOrientation = "VERTICAL") Then
If Not Me.PromptStyle Is Nothing Then
Me.PromptStyle.applyStyle objCellRange
End If
objCellRange.NumberFormat = "@"
objCellRange.value = m_strPrompt
If m_strOrientation = "VERTICAL" Then
If m_intColumnWidth = -1 Then
objCellRange.Columns.AutoFit
Else
objCellRange.Columns.ColumnWidth = m_intColumnWidth
End If
End If
End If
End Sub
Private Sub renderHint(objCellRange As Range)
If m_intHintSpan > 0 Then
If Not Me.HintStyle Is Nothing Then
Me.HintStyle.applyStyle objCellRange
End If
If HideHintText = False Then
objCellRange.value = m_strHintText
End If
End If
End Sub
Private Sub renderHiddenHorizontalData(objSheet As Worksheet)
Dim objCellRange As Range
Dim objIsect As Range
Dim objName As name
Dim blnEmptyCell As Boolean
For Each objCellRange In objSheet.Rows(2).Cells
If isEmpty(objCellRange) Then
If objSheet.Names.count = 0 Then
GoTo setHiddenValue
Else
For Each objName In objSheet.Names
Set objIsect = Application.Intersect(objName.RefersToRange, objCellRange)
If objIsect Is Nothing Then
GoTo setHiddenValue
Else
Exit For
End If
Next
End If
End If
Next
Exit Sub
setHiddenValue:
objCellRange.NumberFormat = m_strColumnFormat
objCellRange.value = m_varDefaultValue
objSheet.Names.add m_strInterfaceColName, objCellRange, False
Exit Sub
End Sub
Private Sub renderData(objSheet As Worksheet, objCellRange As Range)
Dim clsMultiCells As Range
Dim objStyleSheet As BneStyleSheet
Dim objStyle As BneStyle
objCellRange.Select
If Not Me.ColumnStyle Is Nothing Then
Me.ColumnStyle.applyStyle objCellRange
End If
objCellRange.NumberFormat = m_strColumnFormat
objCellRange.value = m_varDefaultValue
If Me.ReadOnly Then
If InStr(1, Me.ColumnName, "BNE_MESSAGES") > 0 Then
BneApplyReadOnlyStyle objCellRange
Else
BneAddStaticReadOnly objCellRange, objSheet
End If
Else
createPopList objCellRange
End If
If m_strOrientation = "VERTICAL" Then
If Len(m_strColumnName) > 0 Then
objSheet.Names.add m_strInterfaceColName, objCellRange, False
End If
Else
If Len(m_strColumnName) > 0 Then
objSheet.Names.add m_strInterfaceColName, objCellRange(columnIndex:=1), False
End If
End If
End Sub
Private Sub createPopList(objCellRange As Range)
If Len(Me.PopListNamedRange) > 0 Then
objCellRange.Validation.Delete
On Error Resume Next
objCellRange.Validation.add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="=" & Me.PopListNamedRange
If Err <> 0 Then
AddBneMsg BNE_ERROR, Me.PopListNamedRange, "Error creating poplist: " & Err.Description
Else
objCellRange.Validation.ShowError = False
objCellRange.Validation.ShowInput = True
objCellRange.Validation.InCellDropdown = True
End If
On Error GoTo 0
End If
End Sub
Private Sub renderTotal(objCellRange As Range, clsFormulaData As Range)
Dim iRowCount As Long
Dim iColumnCount As Integer
If TotalColumn = True And m_strOrientation = "VERTICAL" Then
If Not Me.SummaryStyle Is Nothing Then
Me.SummaryStyle.applyStyle objCellRange
End If
iRowCount = clsFormulaData.Rows.count
iColumnCount = clsFormulaData.Columns.count
objCellRange.NumberFormat = "General"
objCellRange.FormulaR1C1 = "=SUM(R[-" & iRowCount & "]C:R[-" & iColumnCount & "]C)"
End If
End Sub
Attribute VB_Name = "BneRowInserter"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Option Base 1
Private Const CONTENT_WORKSHEET_LIMIT As Integer = 0
Private m_objFirstSheet As Worksheet
Private m_objCurrentSheet As Worksheet
Private m_lngTotalRowCount As Long
Private m_lngTotalSheetRowCount As Long
Private m_lngMaxRowsAllowable As Long
Private m_objLinesRegion As Range
Private m_strCurrentGroupName As String
Private m_intCurrentGroupSheetCount As Integer
Private m_intCurrentBookSheetCount As Integer
Private m_intGroupCount As Integer
Private m_blnUpload As Boolean
Private m_objLayout As New BneLayout
Private m_colNewSheets As New Collection
Private m_colNewBooks As New Collection
Private m_downloadIdentifier As String
Private m_objFirstBook As Object
Private m_objCurrentBook As Object
Private m_sheetCount As Integer
Public Property Let GroupName(strGroupName As String)
Dim objProperties As BneVBAProperties
Dim objProperty As BneVBAProperty
m_intGroupCount = m_intGroupCount + 1
m_intCurrentGroupSheetCount = 1
m_strCurrentGroupName = strGroupName
If m_intGroupCount > 1 Then
m_intCurrentGroupSheetCount = 1
Set m_objCurrentSheet = BneCopySheet(m_objFirstSheet, strGroupName, m_intCurrentGroupSheetCount, m_objCurrentSheet)
Set m_objLinesRegion = Nothing
m_lngTotalSheetRowCount = 0
Else
RenameSheet m_objCurrentSheet, strGroupName
Set objProperties = New BneVBAProperties
objProperties.setSheet m_objCurrentSheet
Set objProperty = New BneVBAProperty
objProperty.name = "contentgroupname"
objProperty.value = strGroupName
objProperties.addProperty objProperty
Set objProperty = New BneVBAProperty
objProperty.name = "contentgroupsequence"
objProperty.value = 1
objProperties.addProperty objProperty
Set objProperty = New BneVBAProperty
objProperty.name = "contentidentifier"
objProperty.value = m_downloadIdentifier
objProperties.addProperty objProperty
objProperties.setSheet Nothing
Set objProperty = New BneVBAProperty
objProperty.name = "contentidentifier"
objProperty.value = m_downloadIdentifier
objProperties.addProperty objProperty
objProperties.addProperty objProperty
Set objProperty = New BneVBAProperty
objProperty.name = "contentgroupname"
objProperty.value = strGroupName
objProperties.addProperty objProperty
Set objProperty = New BneVBAProperty
objProperty.name = "BneWorkBookSequence"
objProperty.value = m_intCurrentBookSheetCount
objProperties.addProperty objProperty
End If
End Property
Public Property Get GroupName() As String
GroupName = m_strCurrentGroupName
End Property
Public Property Let UploadFlag(blnUpload As Boolean)
Dim objProperties As BneVBAProperties
Dim objProperty As BneVBAProperty
m_blnUpload = blnUpload
Set objProperties = New BneVBAProperties
objProperties.setSheet m_objCurrentSheet
Set objProperty = New BneVBAProperty
objProperty.name = "contentgroupupload"
If blnUpload = True Then
objProperty.value = "True"
Else
objProperty.value = "False"
End If
objProperties.addProperty objProperty
End Property
Public Property Let Sheet(objSheet As Worksheet)
Set m_objFirstSheet = objSheet
Set m_objCurrentSheet = objSheet
Set m_objFirstBook = objSheet.Parent
Set m_objCurrentBook = objSheet.Parent
CalculateMaxRowsForLinesBlock
End Property
Public Function AppendData(element As BneXSDElement, lngRowsInBatch As Long) As Boolean
Dim objColRange As Range
Dim lngCol As Long
Dim lngFirstRow As Long
Dim lngCount As Long
Dim lngIncreaseRowsCount As Long
Dim blnLines As Boolean
If m_objCurrentSheet Is Nothing Then
GoTo ErrorHandler
End If
On Error GoTo ErrorHandler
Set objColRange = m_objCurrentSheet.Range(element.InterfaceName & "_" & element.ColumnName)
blnLines = False
If objColRange.count > 1 Then
blnLines = True
If objColRange.count < m_lngTotalSheetRowCount + lngRowsInBatch Then
If m_lngTotalSheetRowCount = 0 Then
lngIncreaseRowsCount = lngRowsInBatch - objColRange.count
Else
lngIncreaseRowsCount = lngRowsInBatch
End If
BneInsertRowsIntoLinesBlock m_objCurrentSheet, lngIncreaseRowsCount
End If
lngCol = objColRange.Column
lngFirstRow = m_lngTotalSheetRowCount + objColRange.Row
With m_objCurrentSheet
If (element.CurrentBufferSize > 0) Then
Set objColRange = .Range(.Cells(lngFirstRow, lngCol), .Cells(lngFirstRow + element.CurrentBufferSize - 1, lngCol))
Else
Set objColRange = .Range(.Cells(lngFirstRow, lngCol), .Cells(lngFirstRow, lngCol))
End If
End With
If element.VBADataType = "date" Then
objColRange.NumberFormat = "m/d/yyyy"
End If
objColRange = element.DataArray
Else
If m_colNewSheets.count = 0 Then
If element.VBADataType = "date" Then
objColRange.NumberFormat = "m/d/yyyy"
End If
objColRange = element.DataArray
End If
End If
If m_lngTotalSheetRowCount + lngRowsInBatch <= 200 Then
For lngCount = 1 To lngRowsInBatch
If element.isReadOnly(lngCount) Or element.ReadOnly Then
If blnLines Then
BneAddDynamicReadOnly (objColRange(lngCount)), m_objCurrentSheet
Else
BneAddDynamicReadOnly objColRange, m_objCurrentSheet
End If
End If
Next lngCount
End If
AppendData = True
GoTo DestroyObjects
ErrorHandler:
AddBneMsg BNE_TRACE, "BneRowInserter.AppendData", "Err.Number:" & Err.Number & " Err.Description:" & Err.Description
AppendData = False
DestroyObjects:
Set objColRange = Nothing
End Function
Public Sub ResetSheet()
Dim objInterfaceCols As Object
Dim intCnt As Integer
Dim objRange As Range
Dim objSheet As Worksheet
Dim objBook As Workbook
Dim objProperties As New BneVBAProperties
Dim objProperty As New BneVBAProperty
Dim blnDisplayAlerts As Boolean
Dim strContentID As String
Set objProperty = New BneVBAProperty
objProperty.name = "contentsheetcount"
objProperty.value = 1
objProperties.addProperty objProperty
objProperties.setSheet m_objFirstSheet
Set objProperty = objProperties.getProperty("contentidentifier")
strContentID = objProperty.value
If Len(strContentID) > 0 Then
For Each objBook In Workbooks
If objBook.name <> m_objFirstBook.name Then
objBook.Activate
objProperties.setSheet Nothing
Set objProperty = objProperties.getProperty("contentidentifier")
If objProperty.value = strContentID Then
objBook.Close False
End If
End If
Next
End If
m_objFirstSheet.Parent.Activate
For Each objSheet In m_objFirstSheet.Parent.Worksheets
objProperties.setSheet objSheet
If objSheet.name <> m_objFirstSheet.name And Not objProperties.getProperty("contentgroupname") Is Nothing And Not objProperties.getProperty("contentgroupsequence") Is Nothing Then
blnDisplayAlerts = Application.DisplayAlerts
Application.DisplayAlerts = False
objSheet.Delete
Application.DisplayAlerts = blnDisplayAlerts
End If
Next
Set objInterfaceCols = GetBneVBAInterfaceCols(m_objFirstSheet)
If objInterfaceCols Is Nothing Then Exit Sub
For intCnt = 1 To objInterfaceCols.count
Set objRange = Nothing
On Error Resume Next
Set objRange = m_objFirstSheet.Range(objInterfaceCols(intCnt).InterfaceName & "_" & objInterfaceCols(intCnt).ColumnName)
On Error GoTo 0
If Not objRange Is Nothing Then
If objRange.count > 10 Then
m_objFirstSheet.Rows(objRange.Row + 9).Offset(0, 0).EntireRow.Resize(objRange.count - 10).Delete Shift:=xlUp
End If
If objInterfaceCols(intCnt).DefaultValue = "" Then
On Error Resume Next
objRange.clearContents
On Error GoTo 0
Else
objRange.value = objInterfaceCols(intCnt).DefaultValue
End If
End If
Next intCnt
On Error Resume Next
m_objFirstSheet.Names("BNE_MESSAGES_LAMP").RefersToRange.clearContents
m_objFirstSheet.Names("BNE_UPLOAD").RefersToRange.clearContents
End Sub
Private Sub Class_Initialize()
m_downloadIdentifier = BneCreateRandomString(10)
m_intCurrentBookSheetCount = 1
End Sub
Private Sub Class_Terminate()
Set m_objFirstSheet = Nothing
End Sub
Private Sub CalculateMaxRowsForLinesBlock()
Dim objLines As Object
Dim cntMaxRows As Long
Set objLines = BneRetrieveLinesBlockRange(m_objCurrentSheet, GetBneVBAInterfaceCols(m_objCurrentSheet))
If m_objCurrentSheet.Columns.EntireRow.count > 100000 Then
cntMaxRows = 100000
Else
cntMaxRows = m_objCurrentSheet.Columns.EntireRow.count
End If
m_lngMaxRowsAllowable = cntMaxRows - LastUsedRow(m_objCurrentSheet) - objLines.Rows.count
End Sub
Private Function LastUsedRow(objWorkSheet As Worksheet) As Long
LastUsedRow = objWorkSheet.Cells.Find(What:="*", SearchDirection:=xlPrevious, SearchOrder:=xlByRows).Row
End Function
Public Sub AppendBuffer(colXSDColumns As Collection, lngRowsInBatchDownloaded As Long)
Dim Counter As Long
Dim elem As BneXSDElement
Call InitializeLinesBlock
If m_lngTotalSheetRowCount + lngRowsInBatchDownloaded >= m_objLinesRegion.Rows.count Then
If m_lngTotalSheetRowCount + lngRowsInBatchDownloaded > m_lngMaxRowsAllowable Then
If m_intCurrentGroupSheetCount = 1 Then
m_objCurrentSheet.name = Me.GroupName & " " & m_intCurrentGroupSheetCount
End If
m_intCurrentGroupSheetCount = m_intCurrentGroupSheetCount + 1
Set m_objCurrentSheet = BneCopySheet(m_objFirstSheet, Me.GroupName, m_intCurrentGroupSheetCount, m_objCurrentSheet)
RenameSheet m_objCurrentSheet, Me.GroupName & " " & m_intCurrentGroupSheetCount
Set m_objLinesRegion = Nothing
m_lngTotalSheetRowCount = 0
End If
End If
For Counter = 1 To colXSDColumns.count
Set elem = colXSDColumns.Item(Counter)
If elem.CurrentBufferSize > 0 Or elem.ReadOnly Then
Me.AppendData elem, lngRowsInBatchDownloaded
elem.ResetDataArray
End If
Next
m_lngTotalSheetRowCount = m_lngTotalSheetRowCount + lngRowsInBatchDownloaded
m_lngTotalRowCount = m_lngTotalRowCount + lngRowsInBatchDownloaded
End Sub
Private Sub BneInsertRowsIntoLinesBlock(objSheet As Worksheet, lngNumberOfRowsToInsert As Long)
Dim objInsertRange As Range
Dim objDefaultRange As Range
Dim objName As name
Dim objInterfaceCol As BneVBAInterfaceCol
Dim lngInsertAtRow As Long
Dim lngInsertEndRow As Long
Dim lngCol As Long
Dim b_protectSheet As Boolean
b_protectSheet = m_objCurrentSheet.ProtectContents
m_objCurrentSheet.Unprotect
Call InitializeLinesBlock
Set objInsertRange = m_objCurrentSheet.Rows(m_objLinesRegion.Row + m_objLinesRegion.Rows.count - 1)
lngInsertAtRow = objInsertRange.Row
objInsertRange.Offset(0, 0).EntireRow.Resize(lngNumberOfRowsToInsert).Insert
lngInsertEndRow = objInsertRange.Row
m_objCurrentSheet.Cells(lngInsertEndRow, 1).EntireRow.Copy
m_objCurrentSheet.Cells(lngInsertAtRow, 1).EntireRow.PasteSpecial
m_objCurrentSheet.Cells(lngInsertEndRow, 1).EntireRow.clearContents
If b_protectSheet Then m_objCurrentSheet.Protect
For Each objName In m_objCurrentSheet.Names
If InStr(vbTextCompare, objName.name, "_READ_ONLY_REGIONS") = 0 Then
If objName.Parent.name = objName.RefersToRange.Parent.name Then
If Not Application.Intersect(objInsertRange, objName.RefersToRange) Is Nothing Then
lngCol = objName.RefersToRange.Column
Set objInterfaceCol = GetBneVBAInterfaceColByName(m_objFirstSheet, objName.name)
If Not objInterfaceCol Is Nothing Then
If objInterfaceCol.DefaultValue <> "" Then
Set objDefaultRange = m_objCurrentSheet.Range(m_objCurrentSheet.Cells(lngInsertAtRow, lngCol), m_objCurrentSheet.Cells(lngInsertEndRow, lngCol))
objDefaultRange.value = objInterfaceCol.DefaultValue
Set objDefaultRange = Nothing
End If
End If
Set objInterfaceCol = Nothing
End If
End If
End If
Next objName
Set objName = Nothing
Set objInsertRange = Nothing
Set objDefaultRange = Nothing
Set objInterfaceCol = Nothing
End Sub
Private Sub InitializeLinesBlock()
If m_objLinesRegion Is Nothing Then
Set m_objLinesRegion = BneRetrieveLinesBlockRange(m_objCurrentSheet, GetBneVBAInterfaceCols(m_objFirstSheet))
End If
End Sub
Private Function BneCopySheet(objFromSheet As Object, strGroupName As String, intSheetCount As Integer, Optional objAfterWorkSheet As Worksheet) As Object
Dim objNewSheet As Object
Dim objNewBook As Object
Dim objProperty As BneVBAProperty
Dim objProperties As New BneVBAProperties
Dim intCnt As Integer
Dim objLayoutBlock As BneLayoutBlock
Dim objLayoutCol As BneLayoutColumn
Dim intBlockCnt As Integer
Dim intColCnt As Integer
Dim blnDisplayAlerts As Boolean
If CONTENT_WORKSHEET_LIMIT > 0 Then
If m_intCurrentBookSheetCount >= CONTENT_WORKSHEET_LIMIT Then
m_intCurrentBookSheetCount = 0
Set m_objCurrentBook = Workbooks.add
m_colNewBooks.add m_objCurrentBook
m_objCurrentBook.Activate
Set objProperty = New BneVBAProperty
objProperty.name = "contentidentifier"
objProperty.value = m_downloadIdentifier
objProperties.addProperty objProperty
Set objProperty = New BneVBAProperty
objProperty.name = "BneWorkBookSequence"
objProperty.value = m_intCurrentBookSheetCount
objProperties.addProperty objProperty
End If
End If
If m_intCurrentBookSheetCount = 0 Then
Set objNewSheet = m_objCurrentBook.Worksheets.add
For intCnt = m_objCurrentBook.Worksheets.count To 1 Step -1
If m_objCurrentBook.Worksheets(intCnt).name <> objNewSheet.name And m_objCurrentBook.Worksheets(intCnt).name <> "BneWorkBookProperties" Then
blnDisplayAlerts = Application.DisplayAlerts
Application.DisplayAlerts = False
m_objCurrentBook.Worksheets(intCnt).Delete
Application.DisplayAlerts = blnDisplayAlerts
End If
Next
Else
Set objNewSheet = m_objCurrentBook.Worksheets.add(after:=objAfterWorkSheet)
End If
m_colNewSheets.add objNewSheet
m_intCurrentBookSheetCount = m_intCurrentBookSheetCount + 1
Set objProperty = New BneVBAProperty
objProperties.setSheet m_objFirstBook.Worksheets("BneWorkBookProperties")
objProperty.name = "contentsheetcount"
objProperty.value = m_colNewSheets.count + 1
objProperties.addProperty objProperty
RenameSheet objNewSheet, strGroupName
Set m_objLayout = New BneLayout
Set objLayoutBlock = m_objLayout.Layout
For intBlockCnt = 1 To m_objLayout.getLayoutBlocks.count
Dim myBlocks As Collection
Set myBlocks = m_objLayout.getLayoutBlocks
Dim blk As BneLayoutBlock
Set blk = myBlocks.Item(intBlockCnt)
If blk.LayoutElement = "HEADER" Then
For intColCnt = 1 To blk.CountColumns
Set objLayoutCol = blk.layoutColumns(intColCnt)
objLayoutCol.ReadOnly = True
objLayoutCol.ColumnFormat = "General"
objLayoutCol.DefaultValue = "='[" & m_objFirstBook.name & "]" & m_objFirstSheet.name & "'!" & objLayoutCol.InterfaceColName
Next
End If
Next
m_objLayout.render objNewSheet
objNewSheet.Unprotect
objProperties.setSheet objNewSheet
Set objProperty = New BneVBAProperty
objProperty.name = "contentgroupname"
objProperty.value = strGroupName
objProperties.addProperty objProperty
Set objProperty = New BneVBAProperty
objProperty.name = "contentgroupsequence"
objProperty.value = intSheetCount
objProperties.addProperty objProperty
Set objProperty = New BneVBAProperty
objProperty.name = "contentgroupupload"
objProperty.value = m_blnUpload
objProperties.addProperty objProperty
Set objProperty = New BneVBAProperty
objProperty.name = "contentidentifier"
objProperty.value = m_downloadIdentifier
objProperties.addProperty objProperty
Set BneCopySheet = objNewSheet
End Function
Private Sub RenameSheet(objSheet As Worksheet, strName As String)
Dim strNewName As String
Dim intCnt As Integer
Dim blnProtection As Boolean
strNewName = strName
strNewName = Replace(strNewName, ":", " ")
strNewName = Replace(strNewName, "\", " ")
strNewName = Replace(strNewName, "/", " ")
strNewName = Replace(strNewName, "?", " ")
strNewName = Replace(strNewName, "*", " ")
strNewName = Replace(strNewName, "[", " ")
strNewName = Replace(strNewName, "]", " ")
strNewName = Trim(Left(strNewName, 31))
If Len(strNewName) = 0 Then
AddBneMsg BNE_TRACE, "BneRowInserter.RenameSheet", "Sheet Name is empty. Name=" & strName
Exit Sub
End If
Do While BneWorkSheetExists(strNewName)
If objSheet.Index = m_objCurrentBook.Worksheets(strNewName).Index Then Exit Do
intCnt = intCnt + 1
strNewName = Left(strNewName, Len(strNewName) - Len(CStr(intCnt)) - 1) & "~" & intCnt
Loop
On Error GoTo ErrorHandler
blnProtection = objSheet.ProtectContents
objSheet.Unprotect
objSheet.name = strNewName
If blnProtection Then objSheet.Protect
Exit Sub
ErrorHandler:
AddBneMsg BNE_TRACE, "BneRowInserter.RenameSheet", "Err.Number:" & Err.Number & " Err.Description:" & Err.Description
End Sub
Public Sub protectSheet(objSheet As Worksheet)
Dim clsStyleSheet As BneStyleSheet
Dim clsStyle As BneStyle
Dim protectSheet As Boolean
Set clsStyleSheet = m_objLayout.StyleSheet
Set clsStyle = clsStyleSheet.getStyle("BNE_PAGE")
objSheet.Protect
If Not clsStyle Is Nothing Then
On Error Resume Next
protectSheet = clsStyle.getStylePropertyValue("protected")
If Not protectSheet Then
objSheet.Unprotect
End If
End If
End Sub
Public Sub Finalize()
Dim lngLines As Long
Dim strLines As String
Dim strWBCode As String
Dim strMainCode As String
Dim objSheet As Worksheet
Dim objBook As Workbook
Dim intCnt As Integer
Dim objCode As Object
Dim objComponent As Object
For Each objSheet In m_colNewSheets
MoveToLinesBlock objSheet
lngLines = m_objFirstSheet.Parent.VBProject.VBComponents(m_objFirstSheet.CodeName).CodeModule.CountOfLines
strLines = m_objFirstSheet.Parent.VBProject.VBComponents(m_objFirstSheet.CodeName).CodeModule.Lines(1, lngLines)
objSheet.Parent.VBProject.VBComponents(objSheet.CodeName).CodeModule.AddFromString strLines
protectSheet objSheet
Next
lngLines = m_objFirstSheet.Parent.VBProject.VBComponents(ThisWorkbook.CodeName).CodeModule.CountOfLines
strWBCode = m_objFirstSheet.Parent.VBProject.VBComponents(ThisWorkbook.CodeName).CodeModule.Lines(1, lngLines)
For Each objBook In m_colNewBooks
objBook.VBProject.VBComponents(ThisWorkbook.CodeName).CodeModule.AddFromString strWBCode
For Each objComponent In m_objFirstSheet.Parent.VBProject.VBComponents
If objComponent.Type = vbext_ct_StdModule Or _
objComponent.Type = vbext_ct_ClassModule Or _
objComponent.Type = vbext_ct_MSForm Then
Set objCode = objBook.VBProject.VBComponents.add(objComponent.Type)
objCode.name = objComponent.name
lngLines = objComponent.CodeModule.CountOfLines
strLines = objComponent.CodeModule.Lines(1, lngLines)
objCode.CodeModule.AddFromString strLines
End If
Next
Dim strName As String
For Each objComponent In objBook.VBProject.VBComponents
strName = objComponent.name
Debug.Print strName
Next
Debug.Print "Run" & objBook.name & "!" & ThisWorkbook.CodeName & ".addReferences"
Application.OnTime Now, objBook.name & "!" & ThisWorkbook.CodeName & ".addReferences"
Next
End Sub

Attribute VB_Name = "BneSAXDownloadContentHandler"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Option Base 1
Implements MSXML2.IVBSAXContentHandler
Private m_Sheet               As Worksheet
Private m_elementCol          As New Collection
Private m_maxBufferSize       As Long
Private m_inserter            As New BneRowInserter
Private m_strRowInsertEvent   As String
Private m_lngGroupRowsDown    As Long
Private m_lngTotalRowsDown    As Long
Private m_strGroupName        As String
Private m_strGroupUpload      As String
Private strCurrentElement     As String
Private m_rowNum              As Long
Private m_clsMessages         As BneVBAMessages
Private m_objSaxPath          As New BneSaxPath
Private Sub Class_Initialize()
Set m_clsMessages = New BneVBAMessages
End Sub
Private Sub Class_Terminate()
Set m_clsMessages = Nothing
Do While m_elementCol.count > 0
Erase m_elementCol(1).DataArray
m_elementCol.Remove (1)
Loop
Set m_elementCol = Nothing
End Sub
Public Property Get Messages() As BneVBAMessages
Set Messages = m_clsMessages
End Property
Private Sub IncrementRowsDownloaded()
m_lngTotalRowsDown = m_lngTotalRowsDown + 1
m_lngGroupRowsDown = m_lngGroupRowsDown + 1
If m_lngTotalRowsDown Mod 100 = 0 Then
If Len(RowInsertEvent) > 0 Then
Application.Run RowInsertEvent, m_lngTotalRowsDown
End If
End If
End Sub
Public Property Get RowsDownloaded() As Long
RowsDownloaded = m_lngTotalRowsDown
End Property
Public Property Let RowInsertEvent(strRowInsertEventName As String)
m_strRowInsertEvent = strRowInsertEventName
End Property
Public Property Get RowInsertEvent() As String
RowInsertEvent = m_strRowInsertEvent
End Property
Public Property Let BneInserter(TheInserter As BneRowInserter)
Set m_inserter = TheInserter
End Property
Public Property Let Sheet(TheSheet As Worksheet)
Set m_Sheet = TheSheet
End Property
Public Property Let MaxBufferSize(Max As Long)
m_maxBufferSize = Max
End Property
Private Property Set IVBSAXContentHandler_documentLocator(ByVal RHS As MSXML2.IVBSAXLocator)
End Property
Private Sub IVBSAXContentHandler_endPrefixMapping(strPrefix As String)
End Sub
Private Sub IVBSAXContentHandler_ignorableWhitespace(strChars As String)
End Sub
Private Sub IVBSAXContentHandler_processingInstruction(strTarget As String, strData As String)
End Sub
Private Sub IVBSAXContentHandler_skippedEntity(strName As String)
End Sub
Private Sub IVBSAXContentHandler_startPrefixMapping(strPrefix As String, strURI As String)
End Sub
Private Sub IVBSAXContentHandler_characters(strChars As String)
If m_objSaxPath.currentElement <> "ping" Then
Call m_elementCol(strCurrentElement).setDataItem(m_rowNum, strChars)
End If
End Sub
Private Sub IVBSAXContentHandler_startElement(strNamespaceURI As String, strLocalName As String, strQName As String, ByVal oAttributes As MSXML2.IVBSAXAttributes)
Dim clsMessage As BneVBAMessage
Dim objCol
DoEvents
If g_blnCancelOperation = True Then
Err.Raise 32001, "IVBSAXContentHandler_startElement", "Sax ParseURL Cancelled"
End If
strCurrentElement = strLocalName
m_objSaxPath.pushElement strLocalName
Select Case strLocalName
Case "data"
If m_objSaxPath.path = "\document\collection\data" Then
m_inserter.GroupName = BneGetAttributeText(oAttributes, "name")
m_inserter.UploadFlag = BneGetBooleanValue(BneGetAttributeText(oAttributes, "upload"))
m_lngGroupRowsDown = 0
End If
Case "DataRow"
m_rowNum = (oAttributes.getValueFromName("", "id") - 1) Mod 200 + 1
IncrementRowsDownloaded
If existsBooleanAttribute("readonly", True, oAttributes) Then
For Each objCol In m_elementCol
objCol.setReadOnly m_rowNum, True
Next objCol
End If
If existsBooleanAttribute("upload", False, oAttributes) Then
m_elementCol.Item("BNE.UPLOAD").setDataItem m_rowNum, "x"
m_elementCol.Item("BNE.UPLOAD").setReadOnly m_rowNum, True
End If
Case "element"
Dim sVBAType As String
Dim aTemp() As String
Dim element As New BneXSDElement
Dim sInterface As String
Dim sColumn As String
Dim sName As String
Dim bReadOnly As Boolean
sName = oAttributes.getValueFromName("", "name")
sVBAType = ConvertXSDTypeToVBAType(oAttributes.getValueFromName("", "type"))
bReadOnly = existsBooleanAttribute("readonly", True, oAttributes)
aTemp = Split(sName, ".")
If IsArray(aTemp) Then
If UBound(aTemp) = 1 Then
sInterface = aTemp(0)
sColumn = aTemp(1)
End If
End If
element.MaxBufferSize = m_maxBufferSize
element.setAttributes sName, "", "", sVBAType, sInterface, sColumn, bReadOnly
m_elementCol.add element, element.name
Case "message"
Set clsMessage = New BneVBAMessage
On Error Resume Next
clsMessage.msgAction = oAttributes.getValueFromQName("bne:action")
clsMessage.msgCause = oAttributes.getValueFromQName("bne:cause")
clsMessage.msgSource = oAttributes.getValueFromQName("bne:source")
clsMessage.msgText = oAttributes.getValueFromQName("bne:text")
clsMessage.msgType = oAttributes.getValueFromQName("bne:type")
On Error GoTo 0
m_clsMessages.AddMessage clsMessage
End Select
If m_objSaxPath.path = "\document\collection\data\Data\DataRow" Then
If existsBooleanAttribute("readonly", True, oAttributes) Then
m_elementCol.Item(strLocalName).setReadOnly m_rowNum, True
End If
End If
End Sub
Private Sub IVBSAXContentHandler_endElement(strNamespaceURI As String, strLocalName As String, strQName As String)
Dim success As Boolean
m_objSaxPath.popElement strLocalName
If strLocalName = "DataRow" Then
If m_rowNum = 200 Then
success = FlushArrayBuffer()
DoEvents
End If
ElseIf strLocalName = "data" Then
If m_objSaxPath.path = "\document\collection" Then
success = FlushArrayBuffer()
End If
End If
End Sub
Public Function FlushArrayBuffer() As Boolean
Dim Counter As Long
Dim elem As BneXSDElement
On Error GoTo ErrorHandler
If m_lngGroupRowsDown > 0 Then
m_inserter.AppendBuffer m_elementCol, ((m_lngGroupRowsDown - 1) Mod m_maxBufferSize) + 1
End If
FlushArrayBuffer = True
m_lngGroupRowsDown = 0
Exit Function
ErrorHandler:
FlushArrayBuffer = False
m_lngGroupRowsDown = 0
End Function
Private Sub IVBSAXContentHandler_startDocument()
Call m_inserter.ResetSheet
Dim uploadCol As New BneXSDElement
uploadCol.MaxBufferSize = m_maxBufferSize
uploadCol.setAttributes "BNE.UPLOAD", "", "", "string", "BNE", "UPLOAD", False
m_elementCol.add uploadCol, "BNE.UPLOAD"
End Sub
Private Sub IVBSAXContentHandler_endDocument()
bneMain.g_nosOfRowsDownloaded = m_lngTotalRowsDown
Dim success As Boolean
success = FlushArrayBuffer()
If Len(RowInsertEvent) > 0 Then
Application.Run RowInsertEvent, m_lngTotalRowsDown
End If
End Sub
Private Function ConvertXSDTypeToVBAType(sXSDType As String) As String
Select Case sXSDType
Case "xsd:string"
ConvertXSDTypeToVBAType = "string"
Case "xsd:date"
ConvertXSDTypeToVBAType = "date"
Case "xsd:double"
ConvertXSDTypeToVBAType = "double"
Case "xsd:integer"
ConvertXSDTypeToVBAType = "integer"
Case Else
ConvertXSDTypeToVBAType = "string"
End Select
End Function
Private Function existsBooleanAttribute(strAttribute As String, blnValue As Boolean, oAttributes As MSXML2.IVBSAXAttributes) As Boolean
On Error Resume Next
If UCase(oAttributes.getValueFromName("", strAttribute)) <> UCase(blnValue) Then
existsBooleanAttribute = False
Else
existsBooleanAttribute = True
End If
End Function
Attribute VB_Name = "BneSaxDownloadErrorHandler"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Implements MSXML2.IVBSAXErrorHandler
Private m_clsMessages          As BneVBAMessages
Private Sub Class_Initialize()
Set m_clsMessages = New BneVBAMessages
End Sub
Private Sub Class_Terminate()
Set m_clsMessages = Nothing
End Sub
Public Property Get Messages() As BneVBAMessages
Set Messages = m_clsMessages
End Property
Private Sub IVBSAXErrorHandler_error(ByVal oLocator As MSXML2.IVBSAXLocator, strErrorMessage As String, ByVal nErrorCode As Long)
Dim clsMessage As New BneVBAMessage
clsMessage.msgSource = "IVBSAXErrorHandler_error"
clsMessage.msgCause = "Error: " & nErrorCode & " SystemId:" & oLocator.systemId
clsMessage.msgText = strErrorMessage
clsMessage.msgType = BNE_ERROR
m_clsMessages.AddMessage clsMessage
Call Log(clsMessage)
End Sub
Private Sub IVBSAXErrorHandler_fatalError(ByVal oLocator As MSXML2.IVBSAXLocator, strErrorMessage As String, ByVal nErrorCode As Long)
Dim clsMessage As New BneVBAMessage
clsMessage.msgSource = "IVBSAXErrorHandler_error"
clsMessage.msgCause = "Error: " & nErrorCode & " SystemId:" & oLocator.systemId & " VBAErrNo:" & Err.Number & "VBADesc" & Err.Description
clsMessage.msgText = strErrorMessage
clsMessage.msgType = BNE_ERROR
m_clsMessages.AddMessage clsMessage
Call Log(clsMessage)
End Sub
Private Sub IVBSAXErrorHandler_ignorableWarning(ByVal oLocator As MSXML2.IVBSAXLocator, strErrorMessage As String, ByVal nErrorCode As Long)
Dim clsMessage As New BneVBAMessage
clsMessage.msgSource = "IVBSAXErrorHandler_error"
clsMessage.msgCause = "Warning: " & nErrorCode & " SystemId:" & oLocator.systemId & " Column: " & oLocator.columnNumber & " Line: " & oLocator.lineNumber
clsMessage.msgText = strErrorMessage
clsMessage.msgType = BNE_WARNING
Call Log(clsMessage)
End Sub
Attribute VB_Name = "BneSaxPath"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Private m_strElements()       As String
Private m_intElementCount     As Integer
Private m_colPaths            As New Collection
Public Property Get count() As Integer
count = m_intElementCount
End Property
Public Property Get currentElement() As String
If m_intElementCount > 0 Then
currentElement = m_strElements(m_intElementCount - 1)
End If
End Property
Public Sub pushElement(strElementName As String)
m_intElementCount = m_intElementCount + 1
ReDim Preserve m_strElements(0 To m_intElementCount - 1)
m_strElements(m_intElementCount - 1) = strElementName
If m_colPaths.count > 0 Then
Dim intCnt As Integer
For intCnt = 1 To m_colPaths.count
m_colPaths(intCnt).pushElement strElementName
Next
End If
End Sub
Public Sub popElement(strElementName As String)
m_intElementCount = m_intElementCount - 1
If m_intElementCount > 0 Then
ReDim Preserve m_strElements(0 To m_intElementCount - 1)
Else
m_strElements(0) = ""
End If
If m_colPaths.count > 0 Then
Dim intCnt As Integer
For intCnt = 1 To m_colPaths.count
m_colPaths(intCnt).popElement (strElementName)
If m_colPaths(intCnt).count = 0 Then
m_colPaths.Remove (intCnt)
End If
Next
End If
End Sub
Public Function path() As String
path = "\" & Join(m_strElements, "\")
End Function
Public Function addPath(Optional objPath As BneSaxPath) As BneSaxPath
If objPath Is Nothing Then
Set objPath = New BneSaxPath
End If
m_colPaths.add objPath
Set addPath = objPath
End Function
Attribute VB_Name = "BneStyle"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Option Base 1
Private m_colStyleProperties As Collection
Private m_strStyleCode As String
Private m_clsStyleParent As BneStyle
Public Sub Class_Initialize()
Set m_colStyleProperties = New Collection
End Sub
Public Sub Class_Terminate()
Set m_colStyleProperties = Nothing
End Sub
Public Property Let StyleCode(strStyleCode As String)
m_strStyleCode = strStyleCode
End Property
Public Property Get StyleCode() As String
StyleCode = m_strStyleCode
End Property
Public Property Let ParentStyle(ByVal clsStyleParent As BneStyle)
Set m_clsStyleParent = clsStyleParent
End Property
Public Sub setParentStyle(ByVal clsStyleParent As BneStyle)
Dim clsExistingStyle As BneStyle
Dim intCount As Integer
If Not clsStyleParent Is Nothing Then
If m_clsStyleParent Is Nothing Then
Set m_clsStyleParent = clsStyleParent
Else
If Not m_clsStyleParent.StyleCode = clsStyleParent.StyleCode Then
Set clsExistingStyle = m_clsStyleParent
Set m_clsStyleParent = clsStyleParent
m_clsStyleParent.ParentStyle = clsExistingStyle
End If
End If
End If
End Sub
Public Property Get getStyleProperties() As Collection
Set getStyleProperties = m_colStyleProperties
End Property
Public Sub addStyleProperties(ByVal clsStyle As BneStyle)
Dim clsStyleProperty As BneStyleProperty
Dim clsExistingProperty As BneStyleProperty
For Each clsStyleProperty In clsStyle.getStyleProperties
If ContainsItem(m_colStyleProperties, clsStyleProperty.StylePropertyName) Then
Set clsExistingProperty = getStyleProperties.Item(clsStyleProperty.StylePropertyName)
clsExistingProperty.StylePropertyValue = clsStyleProperty.StylePropertyValue
Else
m_colStyleProperties.add clsStyleProperty, clsStyleProperty.StylePropertyName
End If
Next
End Sub
Public Sub addStyleProperty(strPropertyName As String, varPropertyValue As Variant, Optional blnOverride As Boolean = True)
Dim clsExistingProperty As BneStyleProperty
If ContainsItem(m_colStyleProperties, strPropertyName) Then
If blnOverride Then
Set clsExistingProperty = getStyleProperties.Item(strPropertyName)
clsExistingProperty.StylePropertyValue = varPropertyValue
End If
Else
Dim clsStyleProperty As New BneStyleProperty
clsStyleProperty.createStyleProperty strPropertyName, varPropertyValue, clsStyleProperty
m_colStyleProperties.add clsStyleProperty, strPropertyName
End If
End Sub
Public Function getStylePropertyValue(strName As String) As Variant
On Error Resume Next
Dim clsStyleProperty As BneStyleProperty
Set clsStyleProperty = m_colStyleProperties.Item(strName)
getStylePropertyValue = clsStyleProperty.StylePropertyValue
End Function
Public Sub applyStyle(ByVal objCellRange As Range)
Dim clsStyleProperty As BneStyleProperty
Dim objProperty As Object
If CInt(Left(Application.Version, (InStr(1, Application.Version & ".", ".") - 1))) >= 9 Then
If Not m_clsStyleParent Is Nothing Then
m_clsStyleParent.applyStyle objCellRange
End If
For Each clsStyleProperty In m_colStyleProperties
If (clsStyleProperty.StylePropertyLevel = clsStyleProperty.APPLICATION_LEVEL_CONST) Then
Set objProperty = Application
ElseIf (clsStyleProperty.StylePropertyLevel = clsStyleProperty.SHEET_LEVEL_CONST) Then
Set objProperty = objCellRange.Parent
ElseIf (clsStyleProperty.StylePropertyLevel = clsStyleProperty.WORKBOOK_LEVEL_CONST) Then
Set objProperty = objCellRange.Parent.Parent
Else
Set objProperty = objCellRange
End If
clsStyleProperty.applyStyle objProperty
Next
End If
End Sub
Public Function isEmpty() As Boolean
isEmpty = m_colStyleProperties.count = 0
End Function
Attribute VB_Name = "BneStyleProperty"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Option Base 1
Private m_strPropertyVBA As String
Private m_strPropertyName As String
Private m_varPropertyValue As Variant
Private m_intPropertyLevel As Integer
Private m_colChildProperties As Collection
Private Const RANGE_LEVEL As Integer = 1
Private Const SHEET_LEVEL As Integer = 2
Private Const WORKBOOK_LEVEL As Integer = 3
Private Const APPLICATION_LEVEL As Integer = 4
Private Sub Class_Initialize()
Set m_colChildProperties = New Collection
m_intPropertyLevel = RANGE_LEVEL
End Sub
Public Sub Class_Terminate()
Set m_colChildProperties = Nothing
End Sub
Public Property Get RANGE_LEVEL_CONST() As Integer
RANGE_LEVEL_CONST = RANGE_LEVEL
End Property
Public Property Get APPLICATION_LEVEL_CONST() As Integer
APPLICATION_LEVEL_CONST = APPLICATION_LEVEL
End Property
Public Property Get WORKBOOK_LEVEL_CONST() As Integer
WORKBOOK_LEVEL_CONST = WORKBOOK_LEVEL
End Property
Public Property Get SHEET_LEVEL_CONST() As Integer
SHEET_LEVEL_CONST = SHEET_LEVEL
End Property
Public Property Get StylePropertyValue() As Variant
StylePropertyValue = m_varPropertyValue
End Property
Public Property Let StylePropertyValue(ByVal varPropertyValue As Variant)
m_varPropertyValue = varPropertyValue
End Property
Public Property Let StylePropertyName(strPropertyName As String)
m_strPropertyName = strPropertyName
End Property
Public Property Get StylePropertyName() As String
StylePropertyName = m_strPropertyName
End Property
Public Property Let StylePropertyVBA(strPropertyVBA As String)
m_strPropertyVBA = strPropertyVBA
End Property
Public Property Get StylePropertyVBA() As String
StylePropertyVBA = m_strPropertyVBA
End Property
Public Property Let StylePropertyLevel(intPropertyLevel As Integer)
m_intPropertyLevel = intPropertyLevel
End Property
Public Property Get StylePropertyLevel() As Integer
StylePropertyLevel = m_intPropertyLevel
End Property
Public Sub setStyleProperty(strPropertyName As String, strPropertyVBA As String, Optional varPropertyValue As Variant, Optional intPropertyLevel As Integer)
m_strPropertyName = strPropertyName
m_strPropertyVBA = strPropertyVBA
If Not IsMissing(varPropertyValue) Then
m_varPropertyValue = varPropertyValue
End If
If Not IsMissing(intPropertyLevel) Then
m_intPropertyLevel = intPropertyLevel
End If
End Sub
Public Sub addChild(clsStyleProperty As BneStyleProperty)
m_colChildProperties.add clsStyleProperty, clsStyleProperty.StylePropertyName
End Sub
Public Sub addChildStyleProperty(strPropertyName As String, strPropertyVBA As String, Optional varPropertyValue As Variant)
Dim clsStyleProperty As New BneStyleProperty
clsStyleProperty.StylePropertyName = strPropertyName
clsStyleProperty.StylePropertyVBA = strPropertyVBA
If Not IsMissing(varPropertyValue) Then
clsStyleProperty.StylePropertyValue = varPropertyValue
End If
m_colChildProperties.add clsStyleProperty, clsStyleProperty.StylePropertyName
End Sub
Public Function applyStyle(ByVal objProperty As Object) As Object
On Error GoTo ErrorHandler
If objProperty Is Nothing Then
Exit Function
End If
If Not isEmpty(Me.StylePropertyValue) And m_colChildProperties.count = 0 Then
CallByName objProperty, Me.StylePropertyVBA, VbLet, Me.StylePropertyValue
Else
Dim clsChildProperty As BneStyleProperty
If isEmpty(Me.StylePropertyValue) Then
Set objProperty = CallByName(objProperty, Me.StylePropertyVBA, VbGet)
Else
Set objProperty = CallByName(objProperty, Me.StylePropertyVBA, VbGet, Me.StylePropertyValue)
End If
For Each clsChildProperty In m_colChildProperties
clsChildProperty.applyStyle objProperty
Next
End If
Exit Function
ErrorHandler:
AddBneMsg BNE_ERROR, "Style Property Error; Name:" & Me.StylePropertyName & " ,VBA Command: " & Me.StylePropertyVBA & " ,Value: " & Me.StylePropertyValue, "Error: " & Err.Description
Exit Function
End Function
Public Sub createStyleProperty(strStylePropertyName As String, varStylePropertyValue As Variant, clsStyleProperty As BneStyleProperty)
Select Case strStylePropertyName
Case "border-weight"
getDefaultBorder strStylePropertyName, "Weight", varStylePropertyValue, clsStyleProperty
Case "border-style"
getDefaultBorder strStylePropertyName, "LineStyle", varStylePropertyValue, clsStyleProperty
Case "border-color"
getDefaultBorder strStylePropertyName, "Color", varStylePropertyValue, clsStyleProperty
Case "border-left-weight"
getDefaultBorder strStylePropertyName, "Weight", varStylePropertyValue, clsStyleProperty, xlEdgeLeft
Case "border-left-style"
getDefaultBorder strStylePropertyName, "LineStyle", varStylePropertyValue, clsStyleProperty, xlEdgeLeft
Case "border-left-color"
getDefaultBorder strStylePropertyName, "Color", varStylePropertyValue, clsStyleProperty, xlEdgeLeft
Case "border-right-weight"
getDefaultBorder strStylePropertyName, "Weight", varStylePropertyValue, clsStyleProperty, xlEdgeRight
Case "border-right-style"
getDefaultBorder strStylePropertyName, "LineStyle", varStylePropertyValue, clsStyleProperty, xlEdgeRight
Case "border-right-color"
getDefaultBorder strStylePropertyName, "Color", varStylePropertyValue, clsStyleProperty, xlEdgeRight
Case "border-top-weight"
getDefaultBorder strStylePropertyName, "Weight", varStylePropertyValue, clsStyleProperty, xlEdgeTop
Case "border-top-style"
getDefaultBorder strStylePropertyName, "LineStyle", varStylePropertyValue, clsStyleProperty, xlEdgeTop
Case "border-top-color"
getDefaultBorder strStylePropertyName, "Color", varStylePropertyValue, clsStyleProperty, xlEdgeTop
Case "border-bottom-weight"
getDefaultBorder strStylePropertyName, "Weight", varStylePropertyValue, clsStyleProperty, xlEdgeBottom
Case "border-bottom-style"
getDefaultBorder strStylePropertyName, "LineStyle", varStylePropertyValue, clsStyleProperty, xlEdgeBottom
Case "border-bottom-color"
getDefaultBorder strStylePropertyName, "Color", varStylePropertyValue, clsStyleProperty, xlEdgeBottom
Case "border-insideVertical-weight"
getDefaultBorder strStylePropertyName, "Weight", varStylePropertyValue, clsStyleProperty, xlInsideVertical
Case "border-insideVertical-style"
getDefaultBorder strStylePropertyName, "LineStyle", varStylePropertyValue, clsStyleProperty, xlInsideVertical
Case "border-insideVertical-color"
getDefaultBorder strStylePropertyName, "Color", varStylePropertyValue, clsStyleProperty, xlInsideVertical
Case "background"
clsStyleProperty.setStyleProperty strStylePropertyName, "Interior"
clsStyleProperty.addChildStyleProperty strStylePropertyName, "Color", varStylePropertyValue
Case "font-color"
clsStyleProperty.setStyleProperty strStylePropertyName, "Font"
clsStyleProperty.addChildStyleProperty strStylePropertyName, "Color", varStylePropertyValue
Case "font-family"
clsStyleProperty.setStyleProperty strStylePropertyName, "Font"
clsStyleProperty.addChildStyleProperty strStylePropertyName, "Name", varStylePropertyValue
Case "font-style"
clsStyleProperty.setStyleProperty strStylePropertyName, "Font"
clsStyleProperty.addChildStyleProperty strStylePropertyName, "FontStyle", varStylePropertyValue
Case "font-size"
clsStyleProperty.setStyleProperty strStylePropertyName, "Font"
clsStyleProperty.addChildStyleProperty strStylePropertyName, "Size", varStylePropertyValue
Case "text-align"
clsStyleProperty.setStyleProperty strStylePropertyName, "HorizontalAlignment", varStylePropertyValue
Case "merge-cells"
clsStyleProperty.setStyleProperty strStylePropertyName, "MergeCells", varStylePropertyValue
Case "protected"
clsStyleProperty.setStyleProperty strStylePropertyName, "Locked", varStylePropertyValue
Case "freeze-pane"
clsStyleProperty.setStyleProperty strStylePropertyName, "ActiveWindow", , APPLICATION_LEVEL
clsStyleProperty.addChildStyleProperty strStylePropertyName, "FreezePanes", varStylePropertyValue
End Select

End Sub
Public Sub getDefaultBorder(strPropertyName As String, strSubPropertyVBA As String, varPropertyValue As Variant, clsStyleProperty As BneStyleProperty, Optional lngBorderEdge As Long)
clsStyleProperty.setStyleProperty strPropertyName, "Borders"
If IsMissing(lngBorderEdge) Then
clsStyleProperty.addChildStyleProperty strPropertyName, strSubPropertyVBA, varPropertyValue
Else
Dim clsChildPropery As New BneStyleProperty
clsChildPropery.setStyleProperty strPropertyName, "Item", lngBorderEdge
clsChildPropery.addChildStyleProperty strPropertyName, strSubPropertyVBA, varPropertyValue
clsStyleProperty.addChild clsChildPropery
End If
End Sub
Attribute VB_Name = "BneStyleSheet"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Option Base 1
Private m_colStyles As Collection
Public Sub Class_Initialize()
On Error GoTo ErrorHandler
Set m_colStyles = New Collection
Application.ActiveWorkbook.Colors(56) = RGB(163, 194, 223)
Application.ActiveWorkbook.Colors(55) = RGB(201, 201, 203)
Application.ActiveWorkbook.Colors(54) = RGB(72, 100, 140)
Application.ActiveWorkbook.Colors(53) = RGB(0, 0, 0)
Application.ActiveWorkbook.Colors(52) = RGB(255, 255, 255)
Application.ActiveWorkbook.Colors(51) = RGB(230, 239, 248)
Dim clsbne_lines_hint As New BneStyle
clsbne_lines_hint.StyleCode = "BNE_LINES_HINT"
m_colStyles.add clsbne_lines_hint, clsbne_lines_hint.StyleCode
clsbne_lines_hint.addStyleProperty "border-bottom-style", xlContinuous
clsbne_lines_hint.addStyleProperty "border-top-weight", xlThin
clsbne_lines_hint.addStyleProperty "border-top-color", RGB(201, 201, 203)
clsbne_lines_hint.addStyleProperty "border-bottom-weight", xlThin
clsbne_lines_hint.addStyleProperty "border-top-style", xlLineStyleNone
clsbne_lines_hint.addStyleProperty "border-bottom-color", RGB(201, 201, 203)
Dim clstitle As New BneStyle
clstitle.StyleCode = "TITLE"
m_colStyles.add clstitle, clstitle.StyleCode
clstitle.addStyleProperty "border-bottom-style", xlContinuous
clstitle.addStyleProperty "border-top-weight", xlThin
clstitle.addStyleProperty "border-top-color", RGB(201, 201, 203)
clstitle.addStyleProperty "border-bottom-weight", xlThin
clstitle.addStyleProperty "border-top-style", xlContinuous
clstitle.addStyleProperty "text-align", xlCenter
clstitle.addStyleProperty "border-bottom-color", RGB(201, 201, 203)
Dim clsicon_style As New BneStyle
clsicon_style.StyleCode = "ICON_STYLE"
m_colStyles.add clsicon_style, clsicon_style.StyleCode
clsicon_style.addStyleProperty "font-family", "WingDings"
Dim clsbne_header_header As New BneStyle
clsbne_header_header.StyleCode = "BNE_HEADER_HEADER"
m_colStyles.add clsbne_header_header, clsbne_header_header.StyleCode
clsbne_header_header.addStyleProperty "border-top-color", RGB(230, 239, 248)
clsbne_header_header.addStyleProperty "background", RGB(230, 239, 248)
clsbne_header_header.addStyleProperty "merge-cells", True
clsbne_header_header.addStyleProperty "border-bottom-weight", xlThin
clsbne_header_header.addStyleProperty "border-bottom-style", xlContinuous
clsbne_header_header.addStyleProperty "border-bottom-color", RGB(230, 239, 248)
clsbne_header_header.addStyleProperty "border-left-style", xlContinuous
clsbne_header_header.addStyleProperty "border-top-weight", xlThin
clsbne_header_header.addStyleProperty "border-left-weight", xlThin
clsbne_header_header.addStyleProperty "border-top-style", xlContinuous
clsbne_header_header.addStyleProperty "border-left-color", RGB(230, 239, 248)
Dim clsbne_lines_row As New BneStyle
clsbne_lines_row.StyleCode = "BNE_LINES_ROW"
m_colStyles.add clsbne_lines_row, clsbne_lines_row.StyleCode
clsbne_lines_row.addStyleProperty "border-top-color", RGB(201, 201, 203)
clsbne_lines_row.addStyleProperty "border-bottom-weight", xlThin
clsbne_lines_row.addStyleProperty "border-bottom-style", xlContinuous
clsbne_lines_row.addStyleProperty "border-bottom-color", RGB(201, 201, 203)
clsbne_lines_row.addStyleProperty "border-left-style", xlContinuous
clsbne_lines_row.addStyleProperty "border-top-weight", xlThin
clsbne_lines_row.addStyleProperty "border-left-weight", xlThin
clsbne_lines_row.addStyleProperty "border-top-style", xlContinuous
clsbne_lines_row.addStyleProperty "border-left-color", RGB(201, 201, 203)
Dim clsbne_context_row As New BneStyle
clsbne_context_row.StyleCode = "BNE_CONTEXT_ROW"
m_colStyles.add clsbne_context_row, clsbne_context_row.StyleCode
clsbne_context_row.addStyleProperty "merge-cells", True
clsbne_context_row.addStyleProperty "protected", True
clsbne_context_row.addStyleProperty "background", RGB(230, 239, 248)
Dim clsbne_lines As New BneStyle
clsbne_lines.StyleCode = "BNE_LINES"
m_colStyles.add clsbne_lines, clsbne_lines.StyleCode
Dim clsbne_header_hint As New BneStyle
clsbne_header_hint.StyleCode = "BNE_HEADER_HINT"
m_colStyles.add clsbne_header_hint, clsbne_header_hint.StyleCode
clsbne_header_hint.addStyleProperty "border-bottom-style", xlContinuous
clsbne_header_hint.addStyleProperty "border-top-weight", xlThin
clsbne_header_hint.addStyleProperty "background", RGB(230, 239, 248)
clsbne_header_hint.addStyleProperty "border-top-color", RGB(230, 239, 248)
clsbne_header_hint.addStyleProperty "border-bottom-weight", xlThin
clsbne_header_hint.addStyleProperty "border-top-style", xlContinuous
clsbne_header_hint.addStyleProperty "text-align", xlRight
clsbne_header_hint.addStyleProperty "border-bottom-color", RGB(230, 239, 248)
Dim clsbne_header_row As New BneStyle
clsbne_header_row.StyleCode = "BNE_HEADER_ROW"
m_colStyles.add clsbne_header_row, clsbne_header_row.StyleCode
clsbne_header_row.addStyleProperty "merge-cells", True
clsbne_header_row.addStyleProperty "border-bottom-style", xlContinuous
clsbne_header_row.addStyleProperty "border-top-weight", xlThin
clsbne_header_row.addStyleProperty "border-top-color", RGB(201, 201, 203)
clsbne_header_row.addStyleProperty "border-bottom-weight", xlThin
clsbne_header_row.addStyleProperty "border-top-style", xlContinuous
clsbne_header_row.addStyleProperty "border-bottom-color", RGB(201, 201, 203)
Dim clsbne_context_header As New BneStyle
clsbne_context_header.StyleCode = "BNE_CONTEXT_HEADER"
m_colStyles.add clsbne_context_header, clsbne_context_header.StyleCode
clsbne_context_header.addStyleProperty "merge-cells", True
clsbne_context_header.addStyleProperty "background", RGB(230, 239, 248)
Dim clsBlock As New BneStyle
clsBlock.StyleCode = "BLOCK"
m_colStyles.add clsBlock, clsBlock.StyleCode
clsBlock.addStyleProperty "border-top-color", RGB(201, 201, 203)
clsBlock.addStyleProperty "border-bottom-weight", xlThin
clsBlock.addStyleProperty "border-bottom-style", xlContinuous
clsBlock.addStyleProperty "border-right-style", xlContinuous
clsBlock.addStyleProperty "border-bottom-color", RGB(201, 201, 203)
clsBlock.addStyleProperty "border-right-weight", xlThin
clsBlock.addStyleProperty "border-left-style", xlContinuous
clsBlock.addStyleProperty "border-top-weight", xlThin
clsBlock.addStyleProperty "border-right-color", RGB(201, 201, 203)
clsBlock.addStyleProperty "border-left-weight", xlThin
clsBlock.addStyleProperty "border-top-style", xlContinuous
clsBlock.addStyleProperty "border-left-color", RGB(201, 201, 203)
Dim clsdata As New BneStyle
clsdata.StyleCode = "DATA"
m_colStyles.add clsdata, clsdata.StyleCode
clsdata.addStyleProperty "font-style", "Regular"
clsdata.addStyleProperty "protected", False
clsdata.addStyleProperty "font-family", "Tahoma"
clsdata.addStyleProperty "background", RGB(255, 255, 255)
clsdata.addStyleProperty "font-size", 9
clsdata.addStyleProperty "font-color", RGB(0, 0, 0)
Dim clsread_only As New BneStyle
clsread_only.StyleCode = "READ_ONLY"
m_colStyles.add clsread_only, clsread_only.StyleCode
clsread_only.addStyleProperty "protected", True
clsread_only.addStyleProperty "background", RGB(230, 239, 248)
Dim clsbne_lines_total As New BneStyle
clsbne_lines_total.StyleCode = "BNE_LINES_TOTAL"
m_colStyles.add clsbne_lines_total, clsbne_lines_total.StyleCode
clsbne_lines_total.addStyleProperty "border-insidevertical-style", xlLineStyleNone
clsbne_lines_total.addStyleProperty "border-top-weight", xlThin
clsbne_lines_total.addStyleProperty "background", RGB(163, 194, 223)
clsbne_lines_total.addStyleProperty "border-top-color", RGB(201, 201, 203)
clsbne_lines_total.addStyleProperty "border-top-style", xlContinuous
Dim clsbne_page As New BneStyle
clsbne_page.StyleCode = "BNE_PAGE"
m_colStyles.add clsbne_page, clsbne_page.StyleCode
clsbne_page.addStyleProperty "font-style", "Regular"
clsbne_page.addStyleProperty "protected", False
clsbne_page.addStyleProperty "font-family", "Tahoma"
clsbne_page.addStyleProperty "background", RGB(230, 239, 248)
clsbne_page.addStyleProperty "font-size", 9
clsbne_page.addStyleProperty "font-color", RGB(72, 100, 140)
Dim clsbne_context As New BneStyle
clsbne_context.StyleCode = "BNE_CONTEXT"
m_colStyles.add clsbne_context, clsbne_context.StyleCode
Dim clsbne_header As New BneStyle
clsbne_header.StyleCode = "BNE_HEADER"
m_colStyles.add clsbne_header, clsbne_header.StyleCode
Dim clsprompt As New BneStyle
clsprompt.StyleCode = "PROMPT"
m_colStyles.add clsprompt, clsprompt.StyleCode
clsprompt.addStyleProperty "merge-cells", True
clsprompt.addStyleProperty "font-style", "Bold"
clsprompt.addStyleProperty "protected", True
clsprompt.addStyleProperty "font-family", "Tahoma"
clsprompt.addStyleProperty "background", RGB(163, 194, 223)
clsprompt.addStyleProperty "font-size", 9
clsprompt.addStyleProperty "font-color", RGB(72, 100, 140)
Dim clsbne_lines_header As New BneStyle
clsbne_lines_header.StyleCode = "BNE_LINES_HEADER"
m_colStyles.add clsbne_lines_header, clsbne_lines_header.StyleCode
clsbne_lines_header.addStyleProperty "border-bottom-style", xlContinuous
clsbne_lines_header.addStyleProperty "border-top-weight", xlThin
clsbne_lines_header.addStyleProperty "border-top-color", RGB(201, 201, 203)
clsbne_lines_header.addStyleProperty "border-bottom-weight", xlThin
clsbne_lines_header.addStyleProperty "border-top-style", xlContinuous
clsbne_lines_header.addStyleProperty "border-bottom-color", RGB(201, 201, 203)
Dim clshint As New BneStyle
clshint.StyleCode = "HINT"
m_colStyles.add clshint, clshint.StyleCode
clshint.addStyleProperty "merge-cells", True
clshint.addStyleProperty "font-style", "Regular"
clshint.addStyleProperty "protected", True
clshint.addStyleProperty "font-family", "Tahoma"
clshint.addStyleProperty "background", RGB(163, 194, 223)
clshint.addStyleProperty "font-size", 8
clshint.addStyleProperty "font-color", RGB(72, 100, 140)
clsbne_lines_hint.addStyleProperties getStyle("HINT")
clstitle.addStyleProperties getStyle("PROMPT")
clsbne_header_header.addStyleProperties getStyle("PROMPT")
clsbne_lines_row.addStyleProperties getStyle("DATA")
clsbne_context_row.addStyleProperties getStyle("DATA")
clsbne_lines.addStyleProperties getStyle("BLOCK")
clsbne_header_hint.addStyleProperties getStyle("HINT")
clsbne_header_row.addStyleProperties getStyle("DATA")
clsbne_context_header.addStyleProperties getStyle("PROMPT")
clsbne_header.addStyleProperties getStyle("BLOCK")
clsbne_lines_header.addStyleProperties getStyle("PROMPT")
Exit Sub
ErrorHandler:
AddBneMsg BNE_ERROR, "BneStyleSheet.Class_Initialize", "Error: " & Err.Description
Resume Next
End Sub
Public Sub Class_Terminate()
Set m_colStyles = Nothing
End Sub
Public Function getStyle(strStyleName As String) As BneStyle
If ContainsItem(m_colStyles, strStyleName) Then
Set getStyle = m_colStyles.Item(strStyleName)
End If
End Function
Attribute VB_Name = "BneSummarySheet"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Option Base 1
Public Function getSummarySheet() As Worksheet
Dim objSummarySheet As Worksheet
Dim strSummarySheet As String
Dim objActiveSheet As Worksheet
strSummarySheet = "Message Summary"
On Error Resume Next
Set objSummarySheet = Worksheets(strSummarySheet)
On Error GoTo 0
If objSummarySheet Is Nothing Then
Set objActiveSheet = ActiveSheet
Set objSummarySheet = Worksheets.add(, Worksheets(Worksheets.count))
FormatSummary objSummarySheet
AddSheetCode objSummarySheet
objActiveSheet.Activate
End If
Set getSummarySheet = objSummarySheet
End Function
Public Sub Show()
Dim objSummarySheet As Worksheet
Set objSummarySheet = getSummarySheet
objSummarySheet.Activate
End Sub
Public Sub FormatSummary(objSummarySheet As Worksheet)
Dim clsMain As New BneLayoutBlock
Dim clsBlock As New BneLayoutBlock
Dim objSheet As Worksheet
Dim clsStyleSheet As New BneStyleSheet
Dim clsCol As BneLayoutColumn
Dim strText As String
Dim strYesNO As String
Dim clsSheetStyle As BneStyle
Dim blnProtect As Boolean
Set objSheet = objSummarySheet
objSheet.name = "Message Summary"
objSheet.Cells.Select
Set clsSheetStyle = clsStyleSheet.getStyle("BNE_PAGE")
If Not clsSheetStyle Is Nothing Then
clsSheetStyle.applyStyle objSheet.Cells
End If
objSheet.Cells(1, 1).Select
ActiveWindow.RangeSelection.Columns(1).ColumnWidth = 2
Selection.EntireRow.Hidden = True
strText = "Message Summary"
objSheet.Cells(4, 2).Select
Selection.value = strText
Selection.Font.ColorIndex = 47
Selection.Font.FontStyle = "bold"
Selection.Font.name = "Arial"
Selection.Font.size = 12
objSheet.Range(objSheet.Cells(4, 2), objSheet.Cells(4, 6)).Select
With Selection.Borders(xlEdgeBottom)
.LineStyle = xlContinuous
.Weight = xlThin
.ColorIndex = 40
End With
strText = "Clear messages on upload"
objSheet.Cells(6, 2).Select
Selection.value = strText
objSheet.Cells(6, 4).Select
objSheet.Names.add name:="CLEAR_MESSAGES", RefersTo:=Selection
strText = "Yes"
strYesNO = strText
strText = "No"
strYesNO = strYesNO & "," & strText
With Selection.Validation
.add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:="Yes,No"
End With
strText = "Yes"
Selection.value = strText
clsBlock.StartCol = 2
clsBlock.StartRow = 8
clsBlock.BLOCKSIZE = 10
clsBlock.LayoutElement = "LINE"
clsBlock.BlockId = 1
clsBlock.Orientation = "VERTICAL"
clsBlock.PromptSpan = 0
clsBlock.HintSpan = 0
clsBlock.DataSpan = 1
clsBlock.UserName = "Line"
clsBlock.BlockStyle = clsStyleSheet.getStyle("BNE_LINES")
clsBlock.PromptStyle = clsStyleSheet.getStyle("BNE_LINES_HEADER")
clsBlock.HintStyle = clsStyleSheet.getStyle("BNE_LINES_HINT")
clsBlock.DataStyle = clsStyleSheet.getStyle("BNE_LINES_ROW")
clsBlock.SummaryStyle = clsStyleSheet.getStyle("BNE_LINES_TOTAL")
clsBlock.TitleStyle = clsStyleSheet.getStyle("TITLE")
clsBlock.Hidden = False
strText = "Sheet"
Set clsCol = New BneLayoutColumn
clsCol.isInterfaceColumn = True
clsCol.ColumnName = "Sheet"
clsCol.InterfaceColName = "Sheet"
clsCol.Prompt = strText
clsCol.Order = 1
clsCol.DataType = 1
clsCol.ColumnWidth = 10
clsCol.DefaultValue = ""
clsCol.PromptStyle = clsStyleSheet.getStyle("")
clsCol.HintStyle = clsStyleSheet.getStyle("")
clsCol.ReadOnly = False
clsCol.ReadOnlyStyle = clsStyleSheet.getStyle("READ_ONLY")
clsCol.ColumnStyle = clsStyleSheet.getStyle("")
clsCol.TotalColumn = False
clsCol.ColumnFormat = "General"
clsBlock.addLayoutColumn clsCol
strText = "Message Type"
Set clsCol = New BneLayoutColumn
clsCol.isInterfaceColumn = True
clsCol.ColumnName = "Message_Type"
clsCol.InterfaceColName = "Message_Type"
clsCol.Prompt = strText
clsCol.Order = 2
clsCol.DataType = 1
clsCol.ColumnWidth = 15
clsCol.DefaultValue = ""
clsCol.PromptStyle = clsStyleSheet.getStyle("")
clsCol.HintStyle = clsStyleSheet.getStyle("")
clsCol.ReadOnly = False
clsCol.ReadOnlyStyle = clsStyleSheet.getStyle("READ_ONLY")
clsCol.ColumnStyle = clsStyleSheet.getStyle("")
clsCol.TotalColumn = False
clsCol.ColumnFormat = "General"
clsBlock.addLayoutColumn clsCol
strText = "Message"
Set clsCol = New BneLayoutColumn
clsCol.isInterfaceColumn = True
clsCol.ColumnName = "Message"
clsCol.InterfaceColName = "Message"
clsCol.Prompt = strText
clsCol.Order = 3
clsCol.DataType = 1
clsCol.ColumnWidth = 30
clsCol.DefaultValue = ""
clsCol.PromptStyle = clsStyleSheet.getStyle("")
clsCol.HintStyle = clsStyleSheet.getStyle("")
clsCol.ReadOnly = False
clsCol.ReadOnlyStyle = clsStyleSheet.getStyle("READ_ONLY")
clsCol.ColumnStyle = clsStyleSheet.getStyle("")
clsCol.TotalColumn = False
clsCol.ColumnFormat = "General"
clsBlock.addLayoutColumn clsCol
strText = "Date"
Set clsCol = New BneLayoutColumn
clsCol.isInterfaceColumn = True
clsCol.ColumnName = "Date"
clsCol.InterfaceColName = "Date"
clsCol.Prompt = strText
clsCol.Order = 4
clsCol.DataType = 1
clsCol.ColumnWidth = 15
clsCol.DefaultValue = ""
clsCol.PromptStyle = clsStyleSheet.getStyle("")
clsCol.HintStyle = clsStyleSheet.getStyle("")
clsCol.ReadOnly = False
clsCol.ReadOnlyStyle = clsStyleSheet.getStyle("READ_ONLY")
clsCol.ColumnStyle = clsStyleSheet.getStyle("")
clsCol.TotalColumn = False
clsCol.ColumnFormat = "General"
clsBlock.addLayoutColumn clsCol
strText = "Time"
Set clsCol = New BneLayoutColumn
clsCol.isInterfaceColumn = True
clsCol.ColumnName = "Time"
clsCol.InterfaceColName = "Time"
clsCol.Prompt = strText
clsCol.Order = 5
clsCol.DataType = 1
clsCol.ColumnWidth = 15
clsCol.DefaultValue = ""
clsCol.PromptStyle = clsStyleSheet.getStyle("")
clsCol.HintStyle = clsStyleSheet.getStyle("")
clsCol.ReadOnly = False
clsCol.ReadOnlyStyle = clsStyleSheet.getStyle("READ_ONLY")
clsCol.ColumnStyle = clsStyleSheet.getStyle("")
clsCol.TotalColumn = False
clsCol.ColumnFormat = "General"
clsBlock.addLayoutColumn clsCol
clsBlock.HideButton = True
clsBlock.render objSheet, clsBlock.BlockId
objSheet.Range( _
Cells(objSheet.Range("Line").Row, objSheet.Range("Line").Column), _
Cells(objSheet.Range("Line").Row + objSheet.Range("Line").Rows.count - 2, objSheet.Range("Line").Column + objSheet.Range("Line").Columns.count - 1) _
).Select
Selection.AutoFilter
objSheet.Range("CLEAR_MESSAGES").Select
End Sub
Public Sub Clear()
Dim objSheet As Worksheet
Dim blnProtection As Boolean
Dim objActiveSheet As Object
Dim strYes As String
Set objSheet = getSummarySheet
strYes = "Yes"
If objSheet.Range("CLEAR_MESSAGES").value <> strYes Then
Exit Sub
End If
Set objActiveSheet = ActiveSheet
objSheet.Activate
blnProtection = objSheet.ProtectionMode
objSheet.Unprotect
objSheet.Range("Sheet").EntireRow.Select
Selection.clearContents
If Selection.Rows.count > 10 Then
objSheet.Range( _
Cells(objSheet.Range("Sheet").Row + 1, objSheet.Range("Sheet").Column), _
Cells(objSheet.Range("Sheet").Row + objSheet.Range("Sheet").Rows.count - 10, objSheet.Range("Sheet").Column) _
).EntireRow.Select
Selection.Delete
End If
objSheet.Range("CLEAR_MESSAGES").Select
If blnProtection = True Then
objSheet.Protect
End If
objActiveSheet.Activate
End Sub
Public Sub AddMessages(objSheet As Worksheet, clsmessages As BneVBAMessages)
Dim clsMsg As BneVBAMessage
Dim objSummarySheet As Worksheet
For Each clsMsg In clsmessages.Messages
AddMessage objSheet, clsMsg
Next
End Sub
Public Sub AddMessage(objSheet As Worksheet, clsMsg As BneVBAMessage)
Dim lngNextRow As Long
Dim objSummarySheet As Worksheet
Dim strCellRef As String
If clsMsg.msgType = "DATA" Then
Exit Sub
End If
Set objSummarySheet = getSummarySheet
lngNextRow = NextEnterableRow(objSummarySheet)
If Not objSheet Is Nothing And clsMsg.msgType = "ERROR" And Len(clsMsg.msgRange) > 0 Then
If clsMsg.msgIdx > 0 Then
strCellRef = objSheet.Cells(objSheet.Range(clsMsg.msgRange).Cells(clsMsg.msgIdx).Row, objSheet.Range(clsMsg.msgRange).Column).Address
ActiveSheet.Hyperlinks.add objSummarySheet.Cells(lngNextRow, 2), Address:="", SubAddress:="'" & objSheet.name & "'!" & strCellRef, TextToDisplay:=objSheet.name
Else
ActiveSheet.Hyperlinks.add objSummarySheet.Cells(lngNextRow, 2), Address:="", SubAddress:="'" & objSheet.name & "'!" & clsMsg.msgRange, TextToDisplay:=objSheet.name
End If
End If
objSummarySheet.Cells(lngNextRow, 3).value = clsMsg.msgTypeUserName
objSummarySheet.Cells(lngNextRow, 4).value = clsMsg.msgText
objSummarySheet.Cells(lngNextRow, 5).value = Date
objSummarySheet.Cells(lngNextRow, 6).value = Time
End Sub
Private Function NextEnterableRow(objSummarySheet As Worksheet) As Long
Dim lngLastRow As Long
Dim objType As Range
Dim objInsertRange As Range
Dim blnProtection As Boolean
Set objType = objSummarySheet.Range("Message_Type")
On Error Resume Next
lngLastRow = objType.Cells.Find("*", SearchOrder:=xlByRows, SearchDirection:=xlPrevious).Row + 1
On Error GoTo 0
If lngLastRow = 0 Then
lngLastRow = objType.Row
End If
If (lngLastRow + 1) >= (objType.Row + objType.Rows.count) Then
blnProtection = objSummarySheet.ProtectionMode
objSummarySheet.Unprotect
Set objInsertRange = objSummarySheet.Range(objSummarySheet.Cells(objType.Rows.count + objType.Row - 1, 1), objSummarySheet.Cells(objType.Rows.count + objType.Row - 1, 1))
objInsertRange.Offset(0, 0).EntireRow.Resize(1).Insert
If blnProtection = True Then
objSummarySheet.Protect
End If
End If
NextEnterableRow = lngLastRow
End Function
Private Sub AddSheetCode(objSummarySheet As Worksheet)
Dim objCodeModule As CodeModule
Dim strCode As String
Dim strComponentName As String
Dim objComponent As VBComponent
For Each objComponent In Application.VBE.ActiveVBProject.VBComponents
strComponentName = objComponent.name
Next
Set objCodeModule = Application.VBE.ActiveVBProject.VBComponents(objSummarySheet.CodeName).CodeModule
strCode = "Public Sub Worksheet_FollowHyperlink(ByVal Target As Hyperlink)" & vbCrLf & _
"    Dim strSheet As String" & vbCrLf & _
"    On Error Resume Next" & vbCrLf & _
"    strSheet = Left(Target.SubAddress, InStr(Target.SubAddress, ""!"") - 1)" & vbCrLf & _
"    strSheet = Replace(strSheet, ""'"", """")" & vbCrLf & _
"    Application.Run Worksheets(strSheet).CodeName & "".BneSheetActivate""" & vbCrLf & _
"End Sub"
objCodeModule.AddFromString strCode
End Sub

Attribute VB_Name = "BneUploadBlock"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Option Base 1
Private m_colColumns As Collection
Private m_colUploadableRows As Collection
Private m_lngBlockSize As Long
Private m_strLayoutElement As String
Public Property Get LayoutElement() As String
LayoutElement = m_strLayoutElement
End Property
Public Property Let LayoutElement(strLayoutElement As String)
m_strLayoutElement = strLayoutElement
End Property
Public Property Get BLOCKSIZE() As Long
BLOCKSIZE = m_lngBlockSize
End Property
Public Property Let BLOCKSIZE(lngBlockSize As Long)
m_lngBlockSize = lngBlockSize
End Property
Private Sub Class_Initialize()
Set m_colColumns = New Collection
Set m_colUploadableRows = New Collection
End Sub
Public Sub Class_Terminate()
Set m_colColumns = Nothing
Set m_colUploadableRows = Nothing
End Sub
Public Property Get Columns() As Collection
Set Columns = m_colColumns
End Property
Public Property Let Columns(colColumns As Collection)
Set m_colColumns = colColumns
End Property
Public Property Get UploadableRows() As Collection
Set UploadableRows = m_colUploadableRows
End Property
Public Property Let UploadableRows(colUplRows As Collection)
Set m_colUploadableRows = colUplRows
End Property
Public Property Get CountColumns() As Integer
CountColumns = m_colColumns.count
End Property
Public Sub addColumns(objSheet As Worksheet, objLayoutBlock As BneLayoutBlock)
Dim objLayoutColumn As BneLayoutColumn
For Each objLayoutColumn In objLayoutBlock.layoutColumns
addColumn objSheet, objLayoutColumn
Next
End Sub
Private Sub addColumn(objSheet As Worksheet, objLayoutColumn As BneLayoutColumn)
Dim objUploadColumn As BneUploadColumn
Dim objColRange As Range
Dim blnExists As Boolean
On Error Resume Next
Set objUploadColumn = m_colColumns(objLayoutColumn.InterfaceColName)
Set objColRange = objSheet.Names(objLayoutColumn.InterfaceColName).RefersToRange
On Error GoTo 0
If objUploadColumn Is Nothing And Not objColRange Is Nothing And objLayoutColumn.isInterfaceColumn Then
Set objUploadColumn = New BneUploadColumn
objUploadColumn.initUploadColumn objColRange, objLayoutColumn, m_colUploadableRows
m_colColumns.add objUploadColumn, objUploadColumn.InterfaceColName
End If
Dim objChildColumn As BneLayoutColumn
For Each objChildColumn In objLayoutColumn.childColumns
addColumn objSheet, objChildColumn
Next
End Sub
Public Sub setUploadableRows(objSheet As Worksheet, objLayoutBlock As BneLayoutBlock, blnFlagRowsOnly As Boolean)
Dim objUplRange As Range
Dim objMessagesRange As Range
Dim objRowRange As Range
Dim objUplRow As Range
Dim lngRowStart As Long
Dim intUplColStart As Integer
Dim intMsgColStart As Integer
If objLayoutBlock.Orientation = "VERTICAL" Then
Set objUplRange = objSheet.Names("BNE_UPLOAD").RefersToRange
Set objMessagesRange = objSheet.Names("BNE_MESSAGES_LAMP").RefersToRange
m_lngBlockSize = objUplRange.Rows.count
intUplColStart = objUplRange.Column
intMsgColStart = objMessagesRange.Column
lngRowStart = objUplRange.Row
For Each objUplRow In objUplRange
Set objRowRange = objSheet.Range(objSheet.Cells(objUplRow.Row, intUplColStart), objSheet.Cells(objUplRow.Row, intMsgColStart))
Dim blnRowIsEmpty As Boolean
Dim varRowIndex As Variant
blnRowIsEmpty = IsRangeEmpty(objSheet, objSheet.Range(objSheet.Cells(objUplRow.Row, intUplColStart + 1), objSheet.Cells(objUplRow.Row, intMsgColStart)))
If blnFlagRowsOnly And Not blnRowIsEmpty And Not IsRangeEmpty(objSheet, objRowRange(1)) And objRowRange.Columns(1) <> "x" Then
varRowIndex = (objRowRange.Row - lngRowStart) + 1
m_colUploadableRows.add varRowIndex, "" & varRowIndex
ElseIf Not blnFlagRowsOnly And Not blnRowIsEmpty And objRowRange.Columns(1) <> "x" Then
varRowIndex = (objRowRange.Row - lngRowStart) + 1
m_colUploadableRows.add varRowIndex, "" & varRowIndex
End If
Next
Else
m_colUploadableRows.add 1, "1"
End If
End Sub
Public Function getRow(intRowIndex) As Collection
Dim objColumn As BneUploadColumn
Dim objColumnRow As BneUploadColumnRow
Dim colColumnsInRow As New Collection
For Each objColumn In Me.Columns
colColumnsInRow.add objColumn.ColumnRows("" & intRowIndex) 'use the key
Next
Set getRow = colColumnsInRow
End Function
Public Sub appendBlock(objBlock2 As BneUploadBlock)
Dim objColumn As BneUploadColumn
Dim objBlock2Column As BneUploadColumn
Dim objRow As BneUploadColumnRow
Dim varNewIdx As Variant
For Each objColumn In Me.Columns
On Error Resume Next
Set objBlock2Column = objBlock2.Columns(objColumn.InterfaceColName)
On Error GoTo 0
If Not objBlock2Column Is Nothing Then
For Each objRow In objBlock2Column.ColumnRows
varNewIdx = m_lngBlockSize + objRow.rowIdx
objColumn.addRow objRow, varNewIdx
addUploadableRow varNewIdx
Next
End If
Next
Me.BLOCKSIZE = Me.BLOCKSIZE + objBlock2.BLOCKSIZE
End Sub
Private Sub addUploadableRow(varRowIdx As Variant)
If Not ContainsItem(m_colUploadableRows, "" & varRowIdx) Then
m_colUploadableRows.add varRowIdx, "" & varRowIdx
End If
End Sub
Public Sub processMessage(objSheet As Worksheet, objMessage As BneVBAMessage, Optional lngIdx As Long)
Dim objMsgIcoRange As Range
Dim objMsgRange As Range
Dim objMsgHiddenRange As Range
If Not lngIdx = 0 Then
Set objMsgIcoRange = objSheet.Names("BNE_MESSAGES_LAMP").RefersToRange
Set objMsgRange = objSheet.Names("BNE_MESSAGES").RefersToRange
Set objMsgHiddenRange = objSheet.Names("BNE_MESSAGES_HIDDEN").RefersToRange
If Len(objMsgHiddenRange(lngIdx).value) = 0 Then
objMsgHiddenRange(lngIdx).value = objMessage.xml
Else
objMsgHiddenRange(lngIdx).value = objMsgHiddenRange(lngIdx).value & objMessage.xml
End If
If Len(objMsgRange(lngIdx).value) = 0 Then
objMsgRange(lngIdx).value = objMessage.msgText
Else
objMsgRange(lngIdx).value = objMsgRange(lngIdx).value & ";" & objMessage.msgText
End If
If objMessage.msgType = "ERROR" Then
objMsgIcoRange(lngIdx).value = "L"
ElseIf objMessage.msgType = "WARNING" Then
objMsgIcoRange(lngIdx).value = "K"
End If
End If
End Sub
Public Sub processUploadSuccess(objSheet As Worksheet, blnHasWarnings As Boolean)
Dim varRow As Variant
Dim objMsgIcoRange As Range
Dim objUplRange As Range
On Error GoTo ErrorHandler
Set objMsgIcoRange = objSheet.Names("BNE_MESSAGES_LAMP").RefersToRange
Set objUplRange = objSheet.Names("BNE_UPLOAD").RefersToRange
If (m_colUploadableRows.count >= objMsgIcoRange.Rows.count) And bneMain.g_commitEachRow = False And Not blnHasWarnings Then
objMsgIcoRange = "J"
objUplRange.clearContents
Else
For Each varRow In m_colUploadableRows
On Error GoTo ErrorHandler
If (varRow <= objMsgIcoRange.Rows.count) And (objMsgIcoRange(varRow).value <> "K") And (objMsgIcoRange(varRow).value <> "L") Then
objMsgIcoRange(varRow) = "J"
objUplRange(varRow).clearContents
End If
Next
End If
Exit Sub
ErrorHandler:
AddBneMsg BNE_ERROR, "BneUploadBlock.processUploadSuccess", "Error: " & Err.Description
Resume Next
End Sub
Public Sub clearContents(objSheet As Worksheet)
Dim objMsgIcoRange As Range
Dim objMsgRange As Range
Dim objMsgHiddenRange As Range
On Error GoTo ErrorHandler
Set objMsgIcoRange = objSheet.Names("BNE_MESSAGES_LAMP").RefersToRange
Set objMsgRange = objSheet.Names("BNE_MESSAGES").RefersToRange
Set objMsgHiddenRange = objSheet.Names("BNE_MESSAGES_HIDDEN").RefersToRange
objMsgIcoRange.clearContents
objMsgRange.clearContents
objMsgHiddenRange.clearContents
If objMsgIcoRange.FormatConditions.count = 0 Then
objMsgIcoRange.FormatConditions.add Type:=xlCellValue, Operator:=xlEqual, _
Formula1:="=""L"""
objMsgIcoRange.FormatConditions(objMsgIcoRange.FormatConditions.count).SetFirstPriority
With objMsgIcoRange.FormatConditions(1)
.Font.Bold = True
.Font.Italic = False
.Font.ColorIndex = 1
.Font.TintAndShade = 0
.Interior.PatternColorIndex = xlAutomatic
.Interior.ColorIndex = 3
.Interior.TintAndShade = 0
.StopIfTrue = False
End With
objMsgIcoRange.FormatConditions.add Type:=xlCellValue, Operator:=xlEqual, _
Formula1:="=""K"""
With objMsgIcoRange.FormatConditions(2)
.Font.Bold = True
.Font.Italic = False
.Font.ColorIndex = 1
.Font.TintAndShade = 0
.Interior.PatternColorIndex = xlAutomatic
.Interior.ColorIndex = 6
.Interior.TintAndShade = 0
.StopIfTrue = False
End With
objMsgIcoRange.FormatConditions.add Type:=xlCellValue, Operator:=xlEqual, _
Formula1:="=""J"""
With objMsgIcoRange.FormatConditions(3)
.Font.Bold = True
.Font.Italic = False
.Font.ColorIndex = 1
.Font.TintAndShade = 0
.Interior.PatternColorIndex = xlAutomatic
.Interior.ColorIndex = 4
.Interior.TintAndShade = 0
.StopIfTrue = False
End With
End If
Exit Sub
ErrorHandler:
AddBneMsg BNE_ERROR, "BneUploadBlock.clearContents", "Error: " & Err.Description
End Sub

Attribute VB_Name = "BneUploadColumn"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Option Base 1
Private m_colColumnRows As Collection
Private m_strInterfaceColName As String 'INTERFACE_NAME.INTERFACE_COL_NAME
Private Sub Class_Initialize()
Set m_colColumnRows = New Collection
End Sub
Public Sub Class_Terminate()
Set m_colColumnRows = Nothing
End Sub
Public Property Get ColumnRows() As Collection
Set ColumnRows = m_colColumnRows
End Property
Public Property Get InterfaceColName() As String
InterfaceColName = m_strInterfaceColName
End Property
Public Sub initUploadColumn(objColumnRng As Range, objLayoutColumn As BneLayoutColumn, colUploadableRows As Collection)
m_strInterfaceColName = objLayoutColumn.InterfaceName & "." & objLayoutColumn.ColumnName
populateRows objColumnRng, objLayoutColumn, colUploadableRows
End Sub
Private Sub populateRows(objColRange As Range, objLayoutColumn As BneLayoutColumn, colUploadableRows As Collection)
Dim varColRow As Variant
Dim objCellRng As Range
Dim objUploadRow As BneUploadColumnRow
On Error Resume Next
If Not objColRange Is Nothing And Not colUploadableRows Is Nothing Then
For Each varColRow In colUploadableRows
Set objUploadRow = New BneUploadColumnRow
Set objCellRng = objColRange(varColRow)
objUploadRow.addRowValues objCellRng, objLayoutColumn, varColRow
m_colColumnRows.add objUploadRow, "" & varColRow
Next
End If
End Sub
Public Sub addRow(ByVal objRow As BneUploadColumnRow, varIDX As Variant)
objRow.rowIdx = varIDX
m_colColumnRows.add objRow, "" & varIDX
End Sub
Attribute VB_Name = "BneUploadColumnRow"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Option Base 1
Private m_colColumnRowVals As Collection
Private m_varRow As Variant
Private m_clsErrorRowMsgs As BneVBAMessages
Private Sub Class_Initialize()
Set m_colColumnRowVals = New Collection
Set m_clsErrorRowMsgs = New BneVBAMessages
End Sub
Public Sub Class_Terminate()
Set m_colColumnRowVals = Nothing
Set m_clsErrorRowMsgs = Nothing
End Sub
Public Property Get isError() As Boolean
isError = m_clsErrorRowMsgs.count > 0
End Property
Public Property Get ErrorMessages() As BneVBAMessages
Set ErrorMessages = m_clsErrorRowMsgs
End Property
Public Property Get ColumnRowValues() As Collection
Set ColumnRowValues = m_colColumnRowVals
End Property
Public Property Let rowIdx(varRowIdx As Variant)
m_varRow = varRowIdx
End Property
Public Property Get rowIdx() As Variant
rowIdx = m_varRow
End Property
Public Sub addValueToColumnRow(strName As String, varValue As Variant, strUserName As String)
Dim clsMessage As New BneVBAMessage
If VarType(varValue) = VarType(vbError) Then
clsMessage.msgText = "UPL_ER_COLUMN_INVALID"
clsMessage.msgType = "ERROR"
clsMessage.msgCause = "UPL_ER_DOC_REF_ERR"
clsMessage.msgSource = strUserName
clsMessage.msgIdx = CLng(m_varRow)
clsMessage.msgRange = strName
m_clsErrorRowMsgs.AddMessage clsMessage
Else
Dim rowColValue As New BneVBAParameter
rowColValue.name = strName
rowColValue.value = varValue
m_colColumnRowVals.add rowColValue
End If
End Sub
Public Sub addRowValues(objCellRange As Range, objLayoutColumn As BneLayoutColumn, Optional varIDX As Variant)
If Not isEmpty(varIDX) Then
m_varRow = varIDX
End If
If Not objLayoutColumn.ReadOnly Or objLayoutColumn.DefaultType = "FORMULA" Then
addEditableValues objCellRange, objLayoutColumn
Else
addReadOnlyValues objLayoutColumn
End If
End Sub
Private Sub addReadOnlyValues(objLayoutColumn As BneLayoutColumn)
addValueToColumnRow objLayoutColumn.InterfaceName & "." & objLayoutColumn.ColumnName, objLayoutColumn.DefaultValue, objLayoutColumn.Prompt
End Sub
Private Sub addEditableValues(objCellRange As Range, objLayoutColumn As BneLayoutColumn)
Dim varColumnValue As Variant
Dim strUplInterfaceColName As String
Dim clsMessage As New BneVBAMessage
strUplInterfaceColName = objLayoutColumn.InterfaceName & "." & objLayoutColumn.ColumnName
If Not objCellRange Is Nothing Then
Select Case objLayoutColumn.DataType
Case 3
On Error GoTo dateError
Dim sValue As String
sValue = objCellRange.value
If (sValue = Null Or sValue = "") Then
addValueToColumnRow strUplInterfaceColName, Nothing, objLayoutColumn.Prompt
Else
addValueToColumnRow strUplInterfaceColName, getDateValue(objCellRange), objLayoutColumn.Prompt
End If
Case 1
varColumnValue = getNumericValue(objCellRange, objLayoutColumn)
If VarType(varColumnValue) = VarType(vbError) Then
varColumnValue = ""
clsMessage.msgType = "ERROR"
clsMessage.msgCause = "UPL_ER_INVALID_NUM_LINES"
clsMessage.msgSource = objLayoutColumn.Prompt
clsMessage.msgText = "UPL_ER_INVALID_NUMBER"
clsMessage.msgIdx = CLng(m_varRow)
clsMessage.msgRange = strUplInterfaceColName
m_clsErrorRowMsgs.AddMessage clsMessage
Else
addValueToColumnRow strUplInterfaceColName, varColumnValue, objLayoutColumn.Prompt
End If
Case 4
Dim varNumValue As Variant
addValueToColumnRow strUplInterfaceColName & "_DATE", getDateValue(objCellRange), objLayoutColumn.Prompt
varNumValue = getNumericValue(objCellRange, objLayoutColumn)
If VarType(varNumValue) = VarType(vbError) Then
varNumValue = ""
End If
addValueToColumnRow strUplInterfaceColName & "_NUMBER", varNumValue, objLayoutColumn.Prompt
addValueToColumnRow strUplInterfaceColName & "_VARCHAR2", getStringValue(objCellRange, objLayoutColumn), objLayoutColumn.Prompt
Case Else
addValueToColumnRow strUplInterfaceColName, getStringValue(objCellRange, objLayoutColumn), objLayoutColumn.Prompt
End Select
Else
addValueToColumnRow strUplInterfaceColName, objLayoutColumn.DefaultValue, objLayoutColumn.Prompt
End If
Exit Sub
dateError:
clsMessage.msgType = "ERROR"
clsMessage.msgCause = "UPL_ER_COLUMN_INVALID"
clsMessage.msgSource = objLayoutColumn.Prompt
clsMessage.msgText = "UPL_ER_COLUMN_INVALID"
clsMessage.msgIdx = CLng(m_varRow)
clsMessage.msgRange = strUplInterfaceColName
m_clsErrorRowMsgs.AddMessage clsMessage
End Sub
Private Function getDateValue(objCellRange As Range) As String
On Error GoTo ErrBlk
Dim theDate As Date
theDate = objCellRange.value
Dim sDate As String
sDate = objCellRange.value
If (sDate = "") Then
getDateValue = Format(objCellRange.value, "yyyy-MM-dd")
Else
If (theDate >= "1900-01-01" And theDate <= "1900-02-28") Then
theDate = theDate + 1
End If
If (theDate = "1899-12-31") Then
If Application.WorksheetFunction.IsText(objCellRange) Then
theDate = "1899-12-31"
Else
theDate = "1900-01-01"
End If
End If
getDateValue = Format(theDate, "yyyy-MM-dd")
End If
Exit Function
ErrBlk:
getDateValue = Format(objCellRange.value, "yyyy-MM-dd")
End Function
Private Function getStringValue(objCellRange As Range, objLayoutColumn As BneLayoutColumn) As String
Dim strNumberFormat As String
Dim strCellPrefixCharacter As String
On Error GoTo getString_Err
strNumberFormat = objLayoutColumn.ColumnFormat
strCellPrefixCharacter = objCellRange.PrefixCharacter
If Application.WorksheetFunction.IsText(objCellRange.value) Or strNumberFormat = "" Or strNumberFormat = "@" Or Left(strNumberFormat, 1) = "#" Or strNumberFormat = "General" Or strCellPrefixCharacter = "'" Then
getStringValue = objCellRange.value
Else
getStringValue = Format(objCellRange.value, strNumberFormat)
End If
Exit Function
getString_Err:
getStringValue = ""
End Function
Private Function getNumericValue(objCellRange As Range, objLayoutColumn As BneLayoutColumn) As Variant
If (objLayoutColumn.DefaultType <> "" And objLayoutColumn.DefaultType <> "JAVA") Or objLayoutColumn.ValType = "TABLE" Then
getNumericValue = objCellRange.value
ElseIf isEmpty(objCellRange) Or Len(Trim(objCellRange.value)) = 0 Then
getNumericValue = objCellRange.value
ElseIf Not (isEmpty(objCellRange)) And (IsNumericCell(objCellRange.value)) Then
getNumericValue = NormalizeNumStr(objCellRange)
Else
getNumericValue = vbError
End If
End Function
Attribute VB_Name = "BneUploadLayout"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Option Base 1
Private m_colUploadBlocks As Collection 'contains max 3 blocks with data from all workbooks&sheets
Private m_colUplSheets As Collection
Private m_objUplMessages As BneVBAMessages
Private Sub Class_Initialize()
Set m_colUploadBlocks = New Collection
Set m_colUplSheets = New Collection
Set m_objUplMessages = New BneVBAMessages
End Sub
Private Sub Class_Terminate()
Set m_colUploadBlocks = Nothing
Set m_colUplSheets = Nothing
Set m_objUplMessages = Nothing
End Sub
Private Sub addToUploadBlocks(ByVal objBlock As BneUploadBlock)
Dim objNewUplBlock As New BneUploadBlock
objNewUplBlock.Columns = objBlock.Columns
objNewUplBlock.LayoutElement = objBlock.LayoutElement
objNewUplBlock.BLOCKSIZE = objBlock.BLOCKSIZE
objNewUplBlock.UploadableRows = objBlock.UploadableRows
m_colUploadBlocks.add objNewUplBlock, objNewUplBlock.LayoutElement
End Sub
Public Function createUploadXML(objSheets As Collection, objLayout As BneLayout, objDocument As Object, Optional blnFlagRowsOnly As Boolean = False) As Long
Dim objUplSheet As BneUploadSheet
Dim objUploadBlock As BneUploadBlock
Dim blnErrorInDoc As Boolean
Dim objErrDocument As Object
Dim objErrDocumentNode As Object
Dim objErrMessageNode As Object
Dim lngUploadRowCnt As Long
Dim lngAllRowCnt As Long
Dim objSheet As Worksheet
For Each objSheet In objSheets
If (objSheet.name <> "BneWorkBookProperties" And objSheet.name <> "BneLog") Then
Set objUplSheet = New BneUploadSheet
Dim colSheetBlocks As New Collection
Set colSheetBlocks = objUplSheet.createUploadStructure(objSheet, objLayout, blnFlagRowsOnly)
If colSheetBlocks.count > 0 Then
m_colUplSheets.add objUplSheet, objSheet.CodeName
Dim objSheetBlock As BneUploadBlock
Dim objExistingBlock As BneUploadBlock
For Each objSheetBlock In colSheetBlocks
On Error Resume Next
Set objExistingBlock = m_colUploadBlocks(objSheetBlock.LayoutElement)
On Error GoTo 0
If objExistingBlock Is Nothing Then
If objSheetBlock.LayoutElement = "LINE" Then
objUplSheet.LinesRowStart = 1
lngAllRowCnt = objSheetBlock.BLOCKSIZE
End If
addToUploadBlocks objSheetBlock
ElseIf Not objExistingBlock Is Nothing And objExistingBlock.LayoutElement = "LINE" Then
objUplSheet.LinesRowStart = lngAllRowCnt + 1
objExistingBlock.appendBlock objSheetBlock
lngAllRowCnt = objExistingBlock.BLOCKSIZE
End If
Next
End If
End If
Next
BneTickleSession
Set objLayout = Nothing
Set objErrDocument = createDOMDocument()
Set objErrDocumentNode = objErrDocument.appendChild(objDocument.createElement("bne:document"))
objErrDocumentNode.setAttribute "xmlns:bne", "http://www.oracle.com/bne"
Set objErrMessageNode = objErrDocumentNode.appendChild(objErrDocumentNode.OwnerDocument.createElement("bne:message"))
objErrMessageNode.setAttribute "bne:type", "ERROR"
objErrMessageNode.setAttribute "bne:text", "UPL_ER_NO_ROWS_UPLOADED"
Dim objDocumentNode As Object
Dim objWorkSpaceNode As Object
Dim objLayoutNode As Object
Dim objCollectionNode As Object
Dim objDataNode As Object
Set objDocumentNode = objDocument.appendChild(objDocument.createElement("bne:document"))
objDocumentNode.setAttribute "xmlns:bne", "http://www.oracle.com/bne"
objDocumentNode.setAttribute "bne:apiVersion", "1.1"
Set objWorkSpaceNode = objDocumentNode.appendChild(objDocumentNode.OwnerDocument.createElement("bne:workspace"))
Set objCollectionNode = objDocumentNode.appendChild(objDocumentNode.OwnerDocument.createElement("bne:collection"))
objCollectionNode.setAttribute "id", "collection_1"
Set objDataNode = objCollectionNode.appendChild(objCollectionNode.OwnerDocument.createElement("bne:data"))
objDataNode.setAttribute "bne:id", "data_1"
objDataNode.setAttribute "bne:integrator", "101:JOURNALS_120"
objDataNode.setAttribute "bne:date_format", "yyyy-MM-dd"
objDataNode.setAttribute "bne:nls_numeric_characters", ".,"
Set objLayoutNode = objWorkSpaceNode.appendChild(objWorkSpaceNode.OwnerDocument.createElement("bne:layout"))
objLayoutNode.setAttribute "id", "101:SBSTEMPLATE"
Dim objPreviousBlock As Object
Set objPreviousBlock = objDataNode
For Each objUploadBlock In m_colUploadBlocks
Dim objBlockNode As Object
Dim objColumn As BneUploadColumn
Set objLayoutNode = objLayoutNode.appendChild(objLayoutNode.OwnerDocument.createElement(LCase(objUploadBlock.LayoutElement)))
If objUploadBlock.LayoutElement <> "LINE" Then
Set objBlockNode = objPreviousBlock.appendChild(objPreviousBlock.OwnerDocument.createElement(LCase(objUploadBlock.LayoutElement)))
For Each objColumn In objUploadBlock.Columns
Dim objColumnRow As BneUploadColumnRow
For Each objColumnRow In objColumn.ColumnRows
If Not addAttributeColumnValue(objColumnRow, objBlockNode, objErrDocumentNode, False) Then
blnErrorInDoc = True
End If
Next
Next
Else
Dim objCell As BneUploadColumnRow
Dim varRowId As Variant
For Each varRowId In objUploadBlock.UploadableRows
Set objBlockNode = objPreviousBlock.appendChild(objPreviousBlock.OwnerDocument.createElement(LCase(objUploadBlock.LayoutElement)))
objBlockNode.setAttribute "bne:IDX", varRowId
Dim colColumnsInRow As Collection
Set colColumnsInRow = objUploadBlock.getRow(varRowId)
For Each objCell In colColumnsInRow
If Not addAttributeColumnValue(objCell, objBlockNode, objErrDocumentNode, True) Then
blnErrorInDoc = True
End If
Next
lngUploadRowCnt = lngUploadRowCnt + 1
If (lngUploadRowCnt Mod 1000 = 0) Then
BneTickleSession
End If
Next
End If
m_colUploadBlocks.Remove objUploadBlock.LayoutElement
Set objPreviousBlock = objBlockNode
BneTickleSession
DoEvents
Next
If blnErrorInDoc Then
Set objDocument = objErrDocument
createUploadXML = -1
Else
createUploadXML = lngUploadRowCnt
End If
BneTickleSession
End Function
Private Function addAttributeColumnValue(objUplColRow As BneUploadColumnRow, objBlockNode As Object, objErrDocumentNode As Object, blnInLines As Boolean) As Boolean
Dim blnOK As Boolean
blnOK = True
If objUplColRow.isError Then
blnOK = False
Dim objMessage As BneVBAMessage
For Each objMessage In objUplColRow.ErrorMessages.Messages
Dim objErrMessageNode As Object
If blnInLines Then
objMessage.msgIdx = objUplColRow.rowIdx
Else
objMessage.msgIdx = 0
End If
Set objErrMessageNode = objMessage.getMessageXMLNode(objErrDocumentNode)
Next
Else
Dim colCellValues As Collection
Set colCellValues = objUplColRow.ColumnRowValues
Dim objNameValue As BneVBAParameter
For Each objNameValue In colCellValues
If blnInLines And (InStr(objNameValue.value, Chr(10)) > 0) Then
g_lineFeedFound = True
objBlockNode.setAttribute objNameValue.name, Replace(objNameValue.value, Chr(10), "&#10;")
Else
objBlockNode.setAttribute objNameValue.name, objNameValue.value
End If
Next
End If
addAttributeColumnValue = blnOK
End Function
Public Sub processMessages(objReturnDoc As Object, Optional blnUploadCancelled As Boolean = False)
Dim objMessage As BneVBAMessage
Dim objReturnMessages As BneVBAMessages
Dim objMessageList, objMessageNode As Object
Dim objUplSheet As BneUploadSheet
Dim blnUploadFailed As Boolean
Dim blnUploadWarning As Boolean
Set objMessageList = objReturnDoc.DocumentElement.SelectNodes("/bne:document/bne:message")
For Each objUplSheet In m_colUplSheets
objUplSheet.unProtectSheet
objUplSheet.clearContents
Next
For Each objMessageNode In objMessageList
Set objMessage = New BneVBAMessage
objMessage.createMessage objMessageNode

If objMessage.msgType = "ERROR" And (bneMain.g_commitEachRow = False Or objMessage.msgElement = "header") Then
blnUploadFailed = True
ElseIf objMessage.msgType = "WARNING" And objMessage.msgIdx > 0 Then
blnUploadWarning = True
End If
processMessage objMessage
Next
If Not blnUploadCancelled And Not blnUploadFailed Then
For Each objUplSheet In m_colUplSheets
objUplSheet.processUploadSuccess blnUploadWarning
Next
End If
If m_colUplSheets.count > 1 Then
Dim objSummarySheet As New BneSummarySheet
objSummarySheet.Clear
objSummarySheet.AddMessages Nothing, m_objUplMessages
For Each objUplSheet In m_colUplSheets
objSummarySheet.AddMessages objUplSheet.Sheet, objUplSheet.UploadMessages
Next
End If
For Each objUplSheet In m_colUplSheets
Dim isNowUnProtected As Boolean
isNowUnProtected = Not objUplSheet.Sheet.ProtectContents
objUplSheet.protectOrUnprotect isNowUnProtected
Next
End Sub
Private Sub processMessage(objMessage As BneVBAMessage)
Dim lngIdx As Long
Dim strColumnRngName As String
Dim objUplSheet As BneUploadSheet
If objMessage.msgIdx = 0 And objMessage.msgType = "ERROR" Then
On Error Resume Next
Set objUplSheet = m_colUplSheets.Item(1)
On Error GoTo 0
If Not objUplSheet Is Nothing Then
objUplSheet.processMessage objMessage
End If
ElseIf objMessage.msgIdx > 0 Then
Set objUplSheet = findSheetForLine(objMessage.msgIdx)
If Not objUplSheet Is Nothing Then
objUplSheet.processMessage objMessage
End If
Else
m_objUplMessages.AddMessage objMessage
End If
End Sub
Private Function findSheetForLine(lngIdx As Long) As BneUploadSheet
Dim objUplSheet As BneUploadSheet
For Each objUplSheet In m_colUplSheets
If objUplSheet.LinesRowStart <= lngIdx And lngIdx <= objUplSheet.LinesRowEnd Then
Set findSheetForLine = objUplSheet
Exit For
End If
Next
Set findSheetForLine = objUplSheet
End Function
Attribute VB_Name = "BneUploadSheet"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Option Base 1
Private m_colSheetBlocks As Collection
Private m_objSheet As Worksheet
Private m_lngIdxStart As Long
Private m_objUplMessages As BneVBAMessages
Private m_uploadFailed As Boolean
Private m_objLinesBlock As BneUploadBlock
Private m_blnSheetProtected As Boolean
Private Sub Class_Initialize()
Set m_colSheetBlocks = New Collection
Set m_objUplMessages = New BneVBAMessages
m_lngIdxStart = 1
m_uploadFailed = False
End Sub
Private Sub Class_Terminate()
Set m_colSheetBlocks = Nothing
Set m_objUplMessages = Nothing
Set m_objSheet = Nothing
Set m_objLinesBlock = Nothing
m_lngIdxStart = 1
End Sub
Public Property Get UploadFailed() As Boolean
UploadFailed = m_uploadFailed
End Property
Public Property Get LinesRowStart() As Long
LinesRowStart = m_lngIdxStart
End Property
Public Property Let LinesRowStart(lngIdxStart As Long)
m_lngIdxStart = lngIdxStart
End Property
Public Property Get Sheet() As Worksheet
Set Sheet = m_objSheet
End Property
Public Property Let Sheet(objSheet As Worksheet)
Set m_objSheet = objSheet
m_blnSheetProtected = objSheet.ProtectContents
End Property
Public Property Get UploadMessages() As BneVBAMessages
Set UploadMessages = m_objUplMessages
End Property
Public Property Get LinesRowEnd() As Long
Dim objLinesBlock As BneUploadBlock
LinesRowEnd = LinesRowStart
Set objLinesBlock = Me.LinesBlock
If Not objLinesBlock Is Nothing Then
LinesRowEnd = (m_lngIdxStart + objLinesBlock.BLOCKSIZE) - 1
End If
End Property
Public Property Get LinesBlock() As BneUploadBlock
If m_objLinesBlock Is Nothing Then
Dim objLinesBlock As BneUploadBlock
On Error Resume Next
Set m_objLinesBlock = m_colSheetBlocks("LINE")
On Error GoTo 0
End If
Set LinesBlock = m_objLinesBlock
End Property
Public Function createUploadStructure(objSheet As Worksheet, objLayout As BneLayout, Optional blnFlagRowsOnly As Boolean = False) As Collection
Dim objLayoutBlock As BneLayoutBlock
Dim objUploadBlock As BneUploadBlock
Dim objUplColumn As BneUploadColumn
Me.Sheet = objSheet
For Each objLayoutBlock In objLayout.getLayoutBlocks
If objLayoutBlock.CountColumns > 0 Then
Set objUploadBlock = getUploadBlock(objSheet, objLayoutBlock, blnFlagRowsOnly)
objUploadBlock.addColumns objSheet, objLayoutBlock
End If
Next
Set createUploadStructure = m_colSheetBlocks
End Function
Private Function getUploadBlock(objSheet As Worksheet, objLayoutBlock As BneLayoutBlock, blnFlagRowsOnly As Boolean) As BneUploadBlock
Dim objUplBlock As BneUploadBlock
On Error Resume Next
Set objUplBlock = m_colSheetBlocks(objLayoutBlock.LayoutElement)
On Error GoTo 0
If objUplBlock Is Nothing Then
Set objUplBlock = New BneUploadBlock
objUplBlock.LayoutElement = objLayoutBlock.LayoutElement
objUplBlock.setUploadableRows objSheet, objLayoutBlock, blnFlagRowsOnly
m_colSheetBlocks.add objUplBlock, objUplBlock.LayoutElement
End If
Set getUploadBlock = objUplBlock
End Function
Public Function findUploadBlock(strLayoutElement) As BneUploadBlock
Dim objUplBlock As BneUploadBlock
On Error Resume Next
Set objUplBlock = m_colSheetBlocks(strLayoutElement)
On Error GoTo 0
Set findUploadBlock = objUplBlock
End Function
Public Sub processMessage(objMessage As BneVBAMessage)
m_objUplMessages.AddMessage objMessage
If Not objMessage.msgIdx = 0 Then
Dim objLinesBlock As BneUploadBlock
Set objLinesBlock = Me.LinesBlock
If Not objLinesBlock Is Nothing Then
Dim lngSheetIdx As Long
lngSheetIdx = (objMessage.msgIdx - m_lngIdxStart) + 1
objMessage.msgIdx = lngSheetIdx
objLinesBlock.processMessage Me.Sheet, objMessage, lngSheetIdx
End If
On Error Resume Next
AddComment m_objSheet.Names(objMessage.msgRange).RefersToRange(lngSheetIdx), objMessage.msgText, objMessage.msgCause
On Error GoTo 0
ElseIf objMessage.msgIdx = 0 And Not isEmpty(objMessage.msgRange) And Not "" = objMessage.msgRange Then
On Error Resume Next
AddComment m_objSheet.Names(objMessage.msgRange).RefersToRange, objMessage.msgText, objMessage.msgCause
On Error GoTo 0
End If
End Sub
Public Sub processUploadSuccess(blnHasWarnings As Boolean)
Dim objLinesBlock As BneUploadBlock
Set objLinesBlock = Me.LinesBlock
If Not objLinesBlock Is Nothing Then
objLinesBlock.processUploadSuccess m_objSheet, blnHasWarnings
End If
End Sub
Public Sub clearContents()
Dim objLinesBlock As BneUploadBlock
DeleteComments m_objSheet
Set objLinesBlock = Me.LinesBlock
If Not objLinesBlock Is Nothing Then
objLinesBlock.clearContents m_objSheet
End If
End Sub
Public Sub protectOrUnprotect(isNowUnProtected As Boolean)
If m_blnSheetProtected Then
If isNowUnProtected Then
m_objSheet.Protect
End If
Else
m_objSheet.Unprotect
End If
End Sub
Public Sub unProtectSheet()
Dim objMsgRange As Range
Set objMsgRange = Me.Sheet.Names("BNE_MESSAGES").RefersToRange
If objMsgRange.Locked Then
Me.Sheet.Unprotect
End If
End Sub
Attribute VB_Name = "BneVBAInterfaceCol"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Option Base 1
Private lRowCount As Long
Private m_lApplicationId As Long
Private m_sInterfaceCode As String
Private m_lSequenceNumber As Long
Private m_sInterfaceName As String
Private m_sColumnName As String
Private m_iDataType As Integer
Private m_bReadOnly As Boolean
Private m_sEditType As String
Private m_sValType As String
Private m_sValComponent As String
Private m_bPopListLOV As Boolean
Private m_sPromptLeft As String
Private m_sPromptAbove As String
Private m_sDefaultValue As Variant
Private m_sDynamicCol As String
Private m_bHintDisplayed As Boolean
Private m_sOrientation As String
Public Property Let ApplicationId(appId As Long)
m_lApplicationId = appId
End Property
Public Property Get ApplicationId() As Long
ApplicationId = m_lApplicationId
End Property
Public Property Let InterfaceCode(ifaceCode As String)
m_sInterfaceCode = ifaceCode
End Property
Public Property Get InterfaceCode() As String
InterfaceCode = m_sInterfaceCode
End Property
Public Property Let SequenceNumber(seqNum As Long)
m_lSequenceNumber = seqNum
End Property
Public Property Get SequenceNumber() As Long
SequenceNumber = m_lSequenceNumber
End Property
Public Property Let InterfaceName(name As String)
m_sInterfaceName = name
End Property
Public Property Get InterfaceName() As String
InterfaceName = m_sInterfaceName
End Property
Public Property Let ColumnName(name As String)
m_sColumnName = name
End Property
Public Property Get ColumnName() As String
ColumnName = m_sColumnName
End Property
Public Property Let DataType(typeID As Integer)
m_iDataType = typeID
End Property
Public Property Get DataType() As Integer
DataType = m_iDataType
End Property
Public Property Let ReadOnly(ReadOnly As Boolean)
m_bReadOnly = ReadOnly
End Property
Public Property Get ReadOnly() As Boolean
ReadOnly = m_bReadOnly
End Property
Public Property Let EditType(EditType As String)
m_sEditType = EditType
End Property
Public Property Get EditType() As String
EditType = m_sEditType
End Property
Public Property Let ValType(ValType As String)
m_sValType = ValType
End Property
Public Property Get ValType() As String
ValType = m_sValType
End Property
Public Property Let ValComponent(ValComponent As String)
m_sValComponent = ValComponent
End Property
Public Property Get ValComponent() As String
ValComponent = m_sValComponent
End Property
Public Property Let PopListLOV(PopListLOV As Boolean)
m_bPopListLOV = PopListLOV
End Property
Public Property Get PopListLOV() As Boolean
PopListLOV = m_bPopListLOV
End Property
Public Property Let PromptAbove(PromptAbove As String)
m_sPromptAbove = PromptAbove
End Property
Public Property Get PromptAbove() As String
PromptAbove = m_sPromptAbove
End Property
Public Property Let PromptLeft(PromptLeft As String)
m_sPromptLeft = PromptLeft
End Property
Public Property Get PromptLeft() As String
PromptLeft = m_sPromptLeft
End Property
Public Property Let DefaultValue(DefaultValue As Variant)
m_sDefaultValue = DefaultValue
End Property
Public Property Get DefaultValue() As Variant
DefaultValue = m_sDefaultValue
End Property
Public Property Let DynamicDataType(DynamicDataType As Boolean)
m_sDynamicCol = DynamicDataType
End Property
Public Property Get DynamicDataType() As Boolean
DynamicDataType = m_sDynamicCol
End Property
Public Property Let HintDisplayed(HintDisplayed As Boolean)
m_bHintDisplayed = HintDisplayed
End Property
Public Property Get HintDisplayed() As Boolean
HintDisplayed = m_bHintDisplayed
End Property
Public Property Let Orientation(Orientation As String)
m_sOrientation = Orientation
End Property
Public Property Get Orientation() As String
Orientation = m_sOrientation
End Property
Attribute VB_Name = "BneVBAMessage"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Private m_strType     As String
Private m_strText     As String
Private m_strSource   As String
Private m_strCause    As String
Private m_strAction   As String
Private m_intLevel    As Integer
Private m_strRange    As String
Private m_lngIdx      As Long
Private m_strElement  As String
Public Property Let msgType(strType As String)
On Error Resume Next
m_strType = strType
End Property
Public Property Let msgText(strText As String)
On Error Resume Next
m_strText = strText
End Property
Public Property Let msgSource(strSource As String)
On Error Resume Next
m_strSource = strSource
End Property
Public Property Let msgCause(strCause As String)
On Error Resume Next
m_strCause = strCause
End Property
Public Property Let msgAction(strAction As String)
On Error Resume Next
m_strAction = strAction
End Property
Public Property Let msgLevel(intlevel As Integer)
On Error Resume Next
m_intLevel = intlevel
End Property
Public Property Let msgIdx(lngIdx As Long)
On Error Resume Next
m_lngIdx = lngIdx
End Property
Public Property Let msgRange(strRange As String)
On Error Resume Next
m_strRange = strRange
End Property
Public Property Let msgElement(strElement As String)
On Error Resume Next
m_strElement = strElement
End Property
Public Property Get msgType() As String
msgType = m_strType
End Property
Public Property Get msgText() As String
msgText = m_strText
End Property
Public Property Get msgSource() As String
msgSource = m_strSource
End Property
Public Property Get msgCause() As String
msgCause = m_strCause
End Property
Public Property Get msgAction() As String
msgAction = m_strAction
End Property
Public Property Get msgLevel() As Integer
msgLevel = m_intLevel
End Property
Public Property Get msgIdx() As Long
msgIdx = m_lngIdx
End Property
Public Property Get msgRange() As String
msgRange = m_strRange
End Property
Public Property Get msgElement() As String
msgElement = m_strElement
End Property
Public Property Get msgTypeUserName() As String
Dim strUserName As String
Select Case Me.msgType
Case "ERROR"
strUserName = "Error"
Case "WARNING"
strUserName = "Warning"
Case "STATUS"
strUserName = "Status"
Case "DATA"
strUserName = "Data"
Case "TRACE"
strUserName = "Trace"
End Select
msgTypeUserName = strUserName
End Property
Public Property Get xml() As String
xml = "<bne:message xmlns:bne=""http://www.oracle.com/bne""" & _
" bne:type=""" & BneEscapeXML(Me.msgType) & """" & _
" bne:text=""" & BneEscapeXML(Me.msgText) & """" & _
" bne:cause=""" & BneEscapeXML(Me.msgCause) & """" & _
" bne:source=""" & BneEscapeXML(Me.msgSource) & """" & _
" bne:action=""" & BneEscapeXML(Me.msgAction) & """" & _
"/>"
End Property
Public Function getMessageXMLNode(objParentNode As Object) As Object
Dim objMessageNode As Object
Dim objContextNode As Object
Set objMessageNode = objParentNode.appendChild(objParentNode.OwnerDocument.createElement("bne:message"))
objMessageNode.setAttribute "bne:type", Me.msgType
objMessageNode.setAttribute "bne:text", Me.msgText
objMessageNode.setAttribute "bne:cause", Me.msgCause
objMessageNode.setAttribute "bne:action", Me.msgAction
objMessageNode.setAttribute "bne:source", Me.msgSource
If Me.msgIdx > 0 Then
Set objContextNode = objMessageNode.appendChild(objMessageNode.OwnerDocument.createElement("bne:context"))
objContextNode.setAttribute "bne:idx", Me.msgIdx
objContextNode.setAttribute "bne:attribute", Me.msgRange
objContextNode.setAttribute "bne:element", Me.msgElement
End If
Set getMessageXMLNode = objMessageNode
End Function
Public Sub createMessage(ByVal objMessageXMLNode As Object)
Dim objContextNode As Object
On Error Resume Next
Me.msgText = objMessageXMLNode.Attributes.getNamedItem("bne:text").text
Me.msgType = objMessageXMLNode.Attributes.getNamedItem("bne:type").text
Me.msgCause = objMessageXMLNode.Attributes.getNamedItem("bne:cause").text
Me.msgAction = objMessageXMLNode.Attributes.getNamedItem("bne:action").text
Me.msgSource = objMessageXMLNode.Attributes.getNamedItem("bne:source").text
Set objContextNode = objMessageXMLNode.SelectSingleNode("bne:context")
If Not objContextNode Is Nothing Then
Me.msgIdx = CLng(objContextNode.Attributes.getNamedItem("bne:idx").text)
Me.msgRange = Replace(objContextNode.Attributes.getNamedItem("bne:attribute").text, ".", "_")
Me.msgElement = objContextNode.Attributes.getNamedItem("bne:element").text
End If
End Sub
Public Function toString() As String
toString = "bne:type=" & Me.msgType & _
" bne:text=" & Me.msgText & _
" bne:cause=" & Me.msgCause & _
" bne:source=" & Me.msgSource & _
" bne:action=" & Me.msgAction
End Function
Private Sub Class_Initialize()
m_intLevel = BNE_TRACE
End Sub

Attribute VB_Name = "BneVBAMessages"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Private m_clsMessages As Collection
Private Sub Class_Initialize()
Set m_clsMessages = New Collection
End Sub
Private Sub Class_Terminate()
Set m_clsMessages = Nothing
End Sub
Public Sub AddMessage(objMessage As BneVBAMessage)
On Error Resume Next
m_clsMessages.add objMessage
End Sub
Public Sub clearMessages()
On Error GoTo ErrorHandler
Do While m_clsMessages.count > 0
m_clsMessages.Remove (1)
Loop
ErrorHandler:
End Sub
Public Property Get Messages() As Collection
Set Messages = m_clsMessages
End Sub
Public Property Get message(intIndex As Integer) As BneVBAMessage
On Error Resume Next
Set message = m_clsMessages(intIndex)
End Property
Public Property Get count() As Integer
On Error Resume Next
count = m_clsMessages.count
End Property
Public Property Get xml() As String
Dim strXML As String
Dim intCnt As Integer
If Me.count > 0 Then
strXML = "<bne:messages xmlns:bne=""http://www.oracle.com/bne"">"
For intCnt = 1 To Me.count
strXML = strXML & Me.message(intCnt).xml()
Next intCnt
strXML = strXML & "</bne:messages>"
End If
xml = strXML
End Property
Attribute VB_Name = "BneVBAParameter"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Option Base 1
Private msName As String
Private mvValue As Variant
Public Property Let name(sName As String)
On Error Resume Next
msName = sName
End Property
Public Property Let value(vValue As Variant)
On Error Resume Next
mvValue = vValue
End Property
Public Property Get name() As String
name = msName
End Property
Public Property Get value() As Variant
value = mvValue
End Property
Attribute VB_Name = "BneVBAParameters"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Option Base 1
Private mcParameters As Collection
Private Sub Class_Initialize()
Set mcParameters = New Collection
End Sub
Private Sub Class_Terminate()
Set mcParameters = Nothing
End Sub
Public Property Get Item(vIndex As Variant)
On Error Resume Next
Set Item = mcParameters.Item(vIndex)
End Property
Public Property Get count()
On Error Resume Next
count = mcParameters.count
End Property
Public Sub add(sName As String, vValue As Variant)
Dim oParam As New BneVBAParameter
On Error Resume Next
oParam.name = sName
oParam.value = vValue
mcParameters.add oParam, sName
If Err <> 0 Then
mcParameters.Remove sName
mcParameters.add oParam, sName
End If
End Sub
Public Function toString() As String
Dim iParamCnt As Integer
Dim sString As String
For iParamCnt = 1 To mcParameters.count
If iParamCnt > 1 Then sString = sString & "&"
sString = sString & mcParameters.Item(iParamCnt).name & "=" & mcParameters.Item(iParamCnt).value
Next iParamCnt
toString = sString
End Function
Attribute VB_Name = "BneVBAProperties"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Option Base 1
Const WORKBOOK_PROPERTY_SHEET = "BneWorkBookProperties"
Private m_objSheet As Worksheet
Private m_colProperties As Collection
Private m_objDOM As Object
Private Sub Class_Initialize()
Set m_objDOM = createDOMDocument
Set m_colProperties = New Collection
Set m_objSheet = getWorkBookPropertySheet()
loadXML
End Sub
Private Sub Class_Terminate()
Set m_objDOM = Nothing
Set m_colProperties = Nothing
Set m_objSheet = Nothing
End Sub
Public Sub setSheet(objWorkSheet As Worksheet)
Set m_objSheet = objWorkSheet
If m_objSheet Is Nothing Then
Set m_objSheet = getWorkBookPropertySheet()
End If
loadXML
End Sub
Public Sub addProperty(objProperty As BneVBAProperty)
On Error Resume Next
objProperty.Controller = Me
m_colProperties.Remove objProperty.name
m_colProperties.add objProperty, objProperty.name
On Error GoTo 0
saveXML
End Sub
Public Sub removeProperty(strPropertyName As String)
On Error Resume Next
m_colProperties.Remove strPropertyName
On Error GoTo 0
saveXML
End Sub
Public Function getProperty(strPropertyName As String) As BneVBAProperty
On Error Resume Next
Set getProperty = m_colProperties(strPropertyName)
End Function
Public Function hasProperties() As Boolean
hasProperties = m_colProperties.count > 0
End Function
Private Sub loadXML()
Dim intColIndex As Integer
Dim strCellData As String
Dim strXML As String
intColIndex = 1
strCellData = m_objSheet.Cells(1, intColIndex).value
Do Until Len(strCellData) = 0
strXML = strXML & strCellData
intColIndex = intColIndex + 1
strCellData = m_objSheet.Cells(1, intColIndex).value
Loop
m_objDOM.loadXML strXML
parseXMLToObjects
End Sub
Private Sub parseXMLToObjects()
Dim objProperty As BneVBAProperty
Dim objNodes As Object
Dim lngCnt As Long
Set m_colProperties = New Collection
If Not m_objDOM.DocumentElement Is Nothing Then
Set objNodes = m_objDOM.DocumentElement.SelectNodes("item")
If Not objNodes Is Nothing Then
For lngCnt = 0 To objNodes.Length - 1
Set objProperty = New BneVBAProperty
objProperty.name = BneGetNodeText(objNodes(lngCnt), "name")
objProperty.value = ParseXMLItemToObjects(objNodes(lngCnt))
m_colProperties.add objProperty, objProperty.name
Next
End If
End If
End Sub
Private Function ParseXMLItemToObjects(objItemNode As Object)
Dim objProperty As BneVBAProperty
Dim colProperties As Collection
Dim objNode As Object
Dim objNodes As Object
Dim lngCnt As Long
Set objNode = objItemNode.SelectSingleNode("value")
If Not objNode Is Nothing Then
Set objNodes = objNode.SelectNodes("item")
If objNodes.Length > 0 Then
Set colProperties = New Collection
For lngCnt = 0 To objNodes.Length - 1
Set objProperty = New BneVBAProperty
objProperty.name = BneGetNodeText(objNodes(lngCnt), "name")
objProperty.value = ParseXMLItemToObjects(objNodes(lngCnt))
colProperties.add objProperty, objProperty.name
Next
Else
ParseXMLItemToObjects = objNode.nodeTypedValue
Exit Function
End If
Set ParseXMLItemToObjects = colProperties
End If
End Function
Private Function getWorkBookPropertySheet() As Worksheet
Dim objSheet As Worksheet
On Error Resume Next
Set objSheet = Worksheets(WORKBOOK_PROPERTY_SHEET)
If objSheet Is Nothing Then
Set objSheet = Worksheets.add
objSheet.name = WORKBOOK_PROPERTY_SHEET
objSheet.Visible = xlSheetVeryHidden
End If
Set getWorkBookPropertySheet = objSheet
End Function
Public Sub saveXML()
Dim strXML As String
Dim lngStartPos As Long
Dim intCol As Integer
Dim intLength As Integer
Dim blnProtect As Boolean
blnProtect = m_objSheet.ProtectContents
m_objSheet.Unprotect
strXML = Me.xml
intCol = 1
lngStartPos = 1
intLength = 32767
Do Until lngStartPos > Len(strXML)
m_objSheet.Cells(1, intCol).value = Mid(strXML, lngStartPos, intLength)
lngStartPos = lngStartPos + intLength
intCol = intCol + 1
Loop
Do Until Len(m_objSheet.Cells(1, intCol)) = 0
m_objSheet.Cells(1, intCol) = ""
intCol = intCol + 1
Loop
If blnProtect Then
m_objSheet.Protect
End If
End Sub
Public Property Get xml() As String
Dim strXML As String
Dim intCnt As Integer
If m_colProperties.count > 0 Then
strXML = "<bne:properties xmlns:bne=""http://www.oracle.com/bne"">"
For intCnt = 1 To m_colProperties.count
strXML = strXML & m_colProperties(intCnt).xml()
Next intCnt
strXML = strXML & "</bne:properties>"
End If
xml = strXML
End Property
Attribute VB_Name = "BneVBAProperty"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Option Base 1
Private m_strName As String
Private m_varValue As Variant
Private m_objProperties As BneVBAProperties
Public Property Let name(strName As String)
On Error Resume Next
m_strName = strName
End Property
Public Property Let value(varValue As Variant)
On Error Resume Next
m_varValue = varValue
End Property
Public Property Let Controller(objProperties As BneVBAProperties)
Set m_objProperties = objProperties
End Property
Public Property Get name() As String
name = m_strName
End Property
Public Property Get value() As Variant
value = m_varValue
End Property
Public Sub addProperty(objProperty As BneVBAProperty)
On Error Resume Next
If Not TypeOf m_varValue Is Collection Then Set m_varValue = New Collection
objProperty.Controller = m_objProperties
m_varValue.add objProperty, objProperty.name
m_objProperties.saveXML
End Sub
Public Sub removeProperty(strPropertyName As String)
On Error Resume Next
m_varValue.Remove strPropertyName
m_objProperties.saveXML
End Sub
Public Function getProperty(strPropertyName As String) As BneVBAProperty
On Error Resume Next
Set getProperty = m_varValue(strPropertyName)
End Function
Public Property Get xml() As String
Dim strXML As String
Dim lngCnt As Long
strXML = "<item>" & _
"<name>" & BneEscapeXML(Me.name) & "</name>"
If TypeOf m_varValue Is Collection Then
strXML = strXML & "<value>"
For lngCnt = 1 To m_varValue.count
strXML = strXML & m_varValue(lngCnt).xml
Next
Else
strXML = strXML & "<value>" & BneEscapeXML(CStr(m_varValue)) & "</value>"
End If
strXML = strXML & "</item>"
xml = strXML
End Property

Attribute VB_Name = "BneVBAUploader"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Option Base 1
Private m_colSheets As New Collection
Private m_lngJobID As Long
Private m_blnFlaggedRows As Boolean
Private m_lngUploadedRows() As Long
Private m_intStatus As Integer
Private m_text As String
Private m_cause As String
Private m_action As String
Private m_objCommonParams As BneVBAParameters
Private m_objUplStructure As New BneUploadLayout
Private Const BNE_UPL_OK = 1
Private Const BNE_UPL_ERROR = 2
Property Get UPL_OK() As Integer
UPL_OK = BNE_UPL_OK
End Property
Property Get UPL_ERROR() As Integer
UPL_ERROR = BNE_UPL_ERROR
End Property
Property Set Sheets(colSheets As Collection)
Set m_colSheets = colSheets
End Property
Property Set CommonUploadParams(oParams As BneVBAParameters)
Set m_objCommonParams = oParams
End Property
Property Let FlaggedRowsOnly(FlaggedRows As Boolean)
m_blnFlaggedRows = FlaggedRows
End Property
Property Get JobID() As Long
JobID = m_lngJobID
End Property
Property Get Status() As Integer
Status = m_intStatus
End Property
Property Get text() As String
text = m_text
End Property
Property Get cause() As String
cause = m_cause
End Property
Property Get action() As String
action = m_action
End Property
Private Sub Class_Initialize()
m_lngJobID = -1
m_intStatus = BNE_UPL_OK
ReDim m_lngUploadedRows(1)
End Sub
Private Sub Class_Terminate()
Set m_colSheets = Nothing
Set m_objCommonParams = Nothing
Set m_objUplStructure = Nothing
End Sub
Public Sub BneUploadBegin()
Dim objXMLDom As Object
Dim lngUploadRowCount As Long
On Error GoTo ErrorHandler
BneTickleSession
Set objXMLDom = createDOMDocument()
If Not objXMLDom Is Nothing Then
Dim objUplStructure As New BneUploadLayout
lngUploadRowCount = m_objUplStructure.createUploadXML(m_colSheets, New BneLayout, objXMLDom, m_blnFlaggedRows)
Else
AddBneMsg BNE_ERROR, "BneUploadBegin", "Couldn't Create a DOM Document"
GoTo ErrorHandler
End If
If Not SetupIsValid() Then
AddBneMsg BNE_ERROR, "BneUploadBegin", "The Configuration for the upload is invalid.  Aborting."
GoTo ErrorHandler
End If
If lngUploadRowCount = -1 Then
m_objCommonParams.add "bne:uploadCancelled", "true"
Else
m_objCommonParams.add "bne:uploadRowCount", CStr(lngUploadRowCount)
End If
m_lngJobID = UploadData(objXMLDom, m_objCommonParams)
Exit Sub
ErrorHandler:
AddBneMsg BNE_ERROR, "BneUploadBegin", "Hit the ErrorHandler: " & Err.Description
m_intStatus = BNE_UPL_ERROR
End Sub
Private Function UploadData(ByRef Document As Object, commonParams As BneVBAParameters) As Long
Dim oXMLhttp As Object
Dim sServerPath As String
Dim sUploadServlet As String
Dim sIcxId As String
Dim sDocumentId As String
Dim sContent As String
Dim iParam As Integer
Dim lJobId As Long
lJobId = -1
Dim sBoundary As String
BneTickleSession
sBoundary = "---------------------------7d06f1de0452"
On Error GoTo CreateHTTPErrorHandler
Set oXMLhttp = CreateHTTPObject
On Error GoTo CreateFormErrorHandler
sServerPath = commonParams.Item("bne:servicePath").value
sUploadServlet = "BneUploaderService"
sIcxId = commonParams.Item("bne:icxId").value
sDocumentId = commonParams.Item("bne:documentId").value
oXMLhttp.Open "POST", sServerPath & sUploadServlet & "?ICX_SESSION_ID=" & sIcxId & "&bne:documentId=" & sDocumentId & "&bne:encoding=UTF-8", False
oXMLhttp.setRequestHeader "Content-Type", "multipart/form-data; boundary=" & sBoundary
sContent = "--" & sBoundary & vbCrLf
sContent = sContent & "Content-Disposition: form-data; name=""uploadfilename""; filename=""bne_data_" & "k65BUTtV" & ".xml""" & vbCrLf
sContent = sContent & "Content-Type: application/octet-stream" & vbCrLf & vbCrLf
If g_lineFeedFound Then
sContent = sContent & Replace(Document.xml, "&amp;#10;", "&#10;")
g_lineFeedFound = False
Else
sContent = sContent & Document.xml
End If
Dim oParam As BneVBAParameter
For iParam = 1 To commonParams.count
Set oParam = commonParams.Item(iParam)
sContent = sContent & "--" & sBoundary & vbCrLf
sContent = sContent & "Content-Disposition: form-data; name=""" & oParam.name & """" & vbCrLf & vbCrLf
sContent = sContent & oParam.value & vbCrLf
Next iParam
sContent = sContent & "--" & sBoundary & "--"
AddBneMsg BNE_TRACE, "UploadData", "Form Contents: " & sContent
On Error GoTo SendErrorHandler
oXMLhttp.send (sContent)
AddBneMsg BNE_TRACE, "UploadData", "HTTP Response Status: " & CStr(oXMLhttp.Status)
On Error GoTo ResponseErrorHandler
If oXMLhttp.readyState = 4 Then 'The upload has finished
If oXMLhttp.Status = 200 Then 'HTTP Status 200 returned
Dim oResponse As Object
Set oResponse = oXMLhttp.responseXML
If oResponse Is Nothing Then
AddBneMsg BNE_ERROR, "UploadData", "The HTTP response was nothing.  No Job ID returned"
ElseIf oResponse.xml = "" Then
AddBneMsg BNE_ERROR, "UploadData", "The HTTP response contained no XML.  No Job ID returned"
Else
lJobId = GetUploadResponseMsgs(oResponse, commonParams)
AddBneMsg BNE_TRACE, "UploadData", "Returned JobID: " & lJobId
End If
Else 'Nasty error
AddBneMsg BNE_ERROR, "UploadData", "The HTTP response status was not 200.  The status was: " & CStr(oXMLhttp.Status)
End If
Else 'Should never get to here as POST was Synchronous, therefore, once completed, returns to readyState = 4.
AddBneMsg BNE_ERROR, "UploadData", "MSXML returned readyState = " & oXMLhttp.readyState
End If
UploadData = lJobId
Exit Function
CreateHTTPErrorHandler:
AddBneMsg BNE_ERROR, "UploadData", "Unable to Create HTTP Object"
UploadData = lJobId
Exit Function
CreateFormErrorHandler:
AddBneMsg BNE_ERROR, "UploadData", "Error Creating Form "
UploadData = lJobId
Exit Function
SendErrorHandler:
AddBneMsg BNE_ERROR, "UploadData", "Error Posting the HTTP Request"
UploadData = lJobId
Exit Function
ResponseErrorHandler:
AddBneMsg BNE_ERROR, "UploadData", "Error with the HTTP Response"
UploadData = lJobId
Exit Function
End Function
Public Sub BneUploadComplete()
Dim objXMLDom As Object
Dim objSheet As Worksheet
Dim sUploadCancelled As String
On Error Resume Next
sUploadCancelled = m_objCommonParams.Item("bne:uploadCancelled").value
On Error GoTo ErrorHandler
Set objXMLDom = createDOMDocument
DownloadMessages objXMLDom, m_objCommonParams
If Not objXMLDom Is Nothing Then
m_objUplStructure.processMessages objXMLDom, IIf(sUploadCancelled = "true", True, False)
Else
AddBneMsg BNE_ERROR, "BneUploadComplete", "Couldn't Create a DOM Document"
GoTo ErrorHandler
End If
Exit Sub
ErrorHandler:
AddBneMsg BNE_ERROR, "BneUploadComplete", "Hit the ErrorHandler: " & Err.Description
m_intStatus = BNE_UPL_ERROR
End Sub
Private Function SetupIsValid() As Boolean
If m_objCommonParams Is Nothing _
Or m_colSheets.count = 0 Then
SetupIsValid = False
Exit Function
End If
SetupIsValid = True
End Function
Private Sub DownloadMessages(Document As Object, params As BneVBAParameters)
Dim oXMLhttp As Object
Dim sServerPath As String
Dim sUploadServlet As String
Dim sIcxId As String
Dim sDocumentId As String
Dim sContent As String
On Error GoTo CreateHTTPErrorHandler
Set oXMLhttp = CreateHTTPObject
On Error GoTo CreateFormErrorHandler
sServerPath = params.Item("bne:servicePath").value
sUploadServlet = "BneUploaderService"
sIcxId = params.Item("bne:icxId").value
sDocumentId = params.Item("bne:documentId").value
oXMLhttp.Open "POST", sServerPath & sUploadServlet & "?ICX_SESSION_ID=" & sIcxId & "&bne:documentId=" & sDocumentId & "&bne:encoding=UTF-8", False
oXMLhttp.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
sContent = "bne:requestType=downloadMessages&bne:deleteMessages=true&bne:uploadJobNumber=" & m_lngJobID & "&bne:language=" & params.Item("bne:language").value
AddBneMsg BNE_TRACE, "DownloadMessages", "Form Contents: " & sContent
On Error GoTo SendErrorHandler
oXMLhttp.send (sContent)
AddBneMsg BNE_TRACE, "DownloadMessages", "HTTP Response Status: " & CStr(oXMLhttp.Status)
On Error GoTo ResponseErrorHandler
If oXMLhttp.readyState = 4 Then 'The upload has finished
If oXMLhttp.Status = 200 Then 'HTTP Status 200 returned
Set Document = oXMLhttp.responseXML
If Document Is Nothing Then
AddBneMsg BNE_ERROR, "DownloadMessages", "The HTTP response was nothing.  Response was Nothing"
ElseIf Document.xml = "" Then
AddBneMsg BNE_ERROR, "DownloadMessages", "The HTTP response was nothing.  No messages returned"
End If
Else 'Nasty error
AddBneMsg BNE_ERROR, "DownloadMessages", "The HTTP response status was not 200.  The status was: " & CStr(oXMLhttp.Status)
End If
Else 'Should never get to here as POST was Synchronous, therefore, once completed, returns to readyState = 4.
AddBneMsg BNE_ERROR, "UploadData", "MSXML returned readyState = " & oXMLhttp.readyState
End If
Exit Sub
CreateHTTPErrorHandler:
AddBneMsg BNE_ERROR, "DownloadMessages", "Unable to Create HTTP Object"
Exit Sub
CreateFormErrorHandler:
AddBneMsg BNE_ERROR, "DownloadMessages", "Error Creating Form "
Exit Sub
SendErrorHandler:
AddBneMsg BNE_ERROR, "DownloadMessages", "Error Posting the HTTP Request"
Exit Sub
ResponseErrorHandler:
AddBneMsg BNE_ERROR, "DownloadMessages", "Error with the HTTP Response"
Exit Sub
End Sub
Private Function GetUploadResponseMsgs(response As Variant, params As BneVBAParameters) As Long
Dim oDocument As Object
Dim iCounter As Integer
Dim oNode As Object
Dim oAtts As Object
Dim oAtt As Object
If Not response Is Nothing Then
Set oDocument = response.DocumentElement
If oDocument Is Nothing Then
GetUploadResponseMsgs = -1
Exit Function
End If
Else
GetUploadResponseMsgs = -1
Exit Function
End If
Set oNode = response.DocumentElement.SelectSingleNode("/bne:document/bne:message[@bne:type='STATUS'&&@bne:id='BNE-000002']")
If Not oNode Is Nothing Then
Set oAtts = oNode.Attributes()
If Not oAtts Is Nothing Then
Set oAtt = oAtts.getNamedItem("bne:value")
If Not oAtt Is Nothing Then
GetUploadResponseMsgs = CLng(oAtt.value)
Exit Function
End If
End If
Else
For iCounter = 0 To oDocument.ChildNodes.Length
Set oNode = oDocument.ChildNodes(iCounter)
If Not oNode Is Nothing Then
If oNode.nodeName = "bne:message" Then
Set oAtts = oNode.Attributes()
If Not oAtts Is Nothing Then
Set oAtt = oAtts.getNamedItem("bne:type")
If Not oAtt Is Nothing Then
If oAtt.value = "ERROR" Then
On Error Resume Next
m_text = oAtts.getNamedItem("bne:text").value
m_cause = oAtts.getNamedItem("bne:cause").value
m_action = oAtts.getNamedItem("bne:action").value
AddBneMsg BNE_ERROR, m_text, m_cause, m_action
On Error GoTo 0
End If
End If
End If
End If
End If
Next iCounter
End If
GetUploadResponseMsgs = -1
End Function

Attribute VB_Name = "BneXSDElement"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Option Base 1
Private msName As String
Private msPath As String
Private msDataType As String
Private msVBADataType As String
Private msInterfaceName As String
Private msColumnName As String
Private mnRowCount As Long
Private mnBufferCount As Long
Private maData() As Variant
Private mnMaxBufferSize As Long
Private mbReadOnly As Boolean
Private Sub Class_Initialize()
ReDim maData(200, 2) 'Give it max elements for now. The second dimension is to store read-only values.
mnMaxBufferSize = -1   'DOM parser doesn?t require buffer.  This is our flag!
mnBufferCount = 0   'DOM parser doesn?t require buffer.  This is our flag!
End Sub
Public Sub setAttributes(sName As String, sPath As String, sDataType As String, sVBADataType As String, sInterfaceName As String, sColumnName As String, bReadOnly)
msName = sName
msPath = sPath
msDataType = sDataType
msVBADataType = sVBADataType
msInterfaceName = sInterfaceName
msColumnName = sColumnName
mnRowCount = 0
mbReadOnly = bReadOnly
End Sub
Public Sub addDataItem(vData As Variant)
mnRowCount = mnRowCount + 1
If mnRowCount > 200 Then Exit Sub
On Error Resume Next
Dim lIndex As Long
lIndex = mnRowCount
If mnMaxBufferSize <> -1 Then
lIndex = ((mnRowCount - 1) Mod mnMaxBufferSize) + 1
End If
maData(lIndex, 1) = maData(lIndex, 1) & convertDataItem(vData)
mnBufferCount = lIndex
End Sub
Public Property Let MaxBufferSize(size As Long)
SetMaxBufferSize (size)
End Property
Public Property Get CurrentBufferSize() As Long
CurrentBufferSize = mnBufferCount
End Property
Public Property Get name()
name = msName
End Property
Public Property Get path()
path = msPath
End Property
Public Property Get DataType()
DataType = msDataType
End Property
Public Property Get VBADataType()
VBADataType = msVBADataType
End Property
Public Property Get InterfaceName()
InterfaceName = msInterfaceName
End Property
Public Property Get ColumnName()
ColumnName = msColumnName
End Property
Public Property Get RowCount()
RowCount = mnRowCount
End Property
Public Property Get DataArray()
DataArray = maData
End Property
Public Property Get ReadOnly()
ReadOnly = mbReadOnly
End Property
Public Sub setDataItem(ByVal lIndex As Long, vData As Variant)
If lIndex > 200 Then Exit Sub
If lIndex > mnRowCount Then mnRowCount = lIndex
On Error Resume Next
If mnMaxBufferSize <> -1 Then
lIndex = ((lIndex - 1) Mod mnMaxBufferSize) + 1
End If
maData(lIndex, 1) = maData(lIndex, 1) & convertDataItem(vData)
mnBufferCount = lIndex
End Sub
Public Sub setReadOnly(ByVal lIndex As Long, bReadOnly As Boolean)
If lIndex > 200 Then Exit Sub
If lIndex > mnRowCount Then mnRowCount = lIndex
On Error Resume Next
If mnMaxBufferSize <> -1 Then
lIndex = ((lIndex - 1) Mod mnMaxBufferSize) + 1
End If
maData(lIndex, 2) = bReadOnly
mnBufferCount = lIndex
End Sub
Public Function isReadOnly(lngRowNum As Long) As Boolean
On Error Resume Next
If Not maData(lngRowNum, 2) Then
isReadOnly = False
Else
isReadOnly = True
End If
End Function
Public Sub ResetDataArray()
SetMaxBufferSize (mnMaxBufferSize)
End Sub
Private Sub SetMaxBufferSize(MaxSize As Long)
mnMaxBufferSize = MaxSize
ReDim maData(mnMaxBufferSize, 2)
mnBufferCount = 0
End Sub
Public Function convertDataItem(vData As Variant) As Variant
On Error GoTo ErrorHandler
Select Case msVBADataType
Case "date"
convertDataItem = vData
Case "double"
convertDataItem = vData
Case "integer"
convertDataItem = CInt(Val(vData))
Case Else
convertDataItem = CStr(vData)
End Select
Exit Function
ErrorHandler:
convertDataItem = vData
End Function
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Option Explicit
Option Base 1
Const OSSCOOKIE = "PRD21"
Const DOCUMENT_ONCLICK = "BneDocument_OnClick "
Const DOCUMENT_COMPLETE = "BneDocument_Complete "
Const PRODUCT_CODE_LABEL = "12.0.0.0"
Const PRODUCT_RELEASE_LABEL = "12.0.0.0: Friday Feburary 10, 2006"
Const VIEWER_VERSION = "$Revision: 120.54.12010000.59 $"
Const GENERATED_LANGUAGE = "US"
Const SERVLET_PATH = "https://nww.finsys.sbs.nhs.uk:4486/OA_HTML/"
Const APPLICATION_SERVICE = SERVLET_PATH & "BneApplicationService"
Const COMPONENT_SERVICE = SERVLET_PATH & "BneComponentService"
Const UPLOAD_SERVICE = SERVLET_PATH & "BneUploaderService"
Const DOWNLOAD_SERVICE = SERVLET_PATH & "BneDownloadService"
Const TRACE_LEVEL_DESCRIPTION = " ERROR"
Const DEBUG_FLAG = False
Const DEBUG_DOCUMENT = "c:\BneDebug-Document.xml"
Const DEBUG_MESSAGES = "c:\BneDebug-Messages.xml"
Const UPLOAD_DOCUMENT = "c:\Bne-Document.xml"
Const UPLOAD_MESSAGES = "c:\Bne-Messages.xml"
Const DOWNLOAD_DOCUMENT = "Bne-Document-Content.xml"
Const BNE_DOCUMENT_ID = "WYR0B3QT8VDUA3XU8TBV3YSJT8U7XIZKRULKOGKT"
Dim m_objHTMLDocument As HTMLDocument
Dim m_Browser As Object
Dim m_InterfaceColName As String
Dim m_InterfaceName As String
Dim m_flagRow As Boolean
Dim m_DocumentProcessor As String
Dim m_SessionState As Boolean
Dim m_SessionTicket As String
Dim m_StatusBarVisible As Boolean
Dim m_TicketNumber As Long
Dim intBrowserWidth As Integer
Dim intBrowserHeight As Integer
Dim comingFromDelete As Boolean
Dim BNEERROR As New BNEERROR
Dim m_objVBAUploader As BneVBAUploader
Dim m_col_InterfaceCols As Collection
Dim m_clsLayout As BneLayout
Dim m_LOVFlag As Boolean
Dim m_rowsInLines As Long
Dim m_PreviousSelection As Range
Dim m_blnUploadAll As Boolean
Public Sub BneOnCreateProcedure()
Call BneCreateLayout
Dim clsRowInserter As New BneRowInserter
clsRowInserter.protectSheet Me
Set clsRowInserter = Nothing
End Sub
Public Sub BneCreateOracleMenu()
Dim strMenuTitle As String
Dim objWorkSheetMenuBar As Object
Set objWorkSheetMenuBar = Application.CommandBars("Worksheet Menu Bar")
Dim objMenu_231_ORACLE As Object
strMenuTitle = "Or&acle"
On Error Resume Next
objWorkSheetMenuBar.Controls(strMenuTitle).Delete
On Error GoTo 0
Set objMenu_231_ORACLE = objWorkSheetMenuBar.Controls.add(Type:=msoControlPopup, before:=8)
objMenu_231_ORACLE.caption = strMenuTitle
Dim objMenu_231_FILTERS As Object
strMenuTitle = "&Filters"
Set objMenu_231_FILTERS = objMenu_231_ORACLE.Controls.add(Type:=msoControlPopup)
objMenu_231_FILTERS.caption = strMenuTitle
Dim objMenu_231_SHOW_FILTERS As Object
strMenuTitle = "&Show Filters"
Set objMenu_231_SHOW_FILTERS = objMenu_231_FILTERS.Controls.add
objMenu_231_SHOW_FILTERS.OnAction = Application.ActiveSheet.CodeName & ".BneShowFilters"
objMenu_231_SHOW_FILTERS.caption = strMenuTitle
Dim objMenu_231_HIDE_FILTERS As Object
strMenuTitle = "&Hide Filters"
Set objMenu_231_HIDE_FILTERS = objMenu_231_FILTERS.Controls.add
objMenu_231_HIDE_FILTERS.OnAction = Application.ActiveSheet.CodeName & ".BneHideFilters"
objMenu_231_HIDE_FILTERS.caption = strMenuTitle
Dim objMenu_231_RESET_FILTERS As Object
strMenuTitle = "&Reset Filters"
Set objMenu_231_RESET_FILTERS = objMenu_231_FILTERS.Controls.add
objMenu_231_RESET_FILTERS.OnAction = Application.ActiveSheet.CodeName & ".BneResetFilters"
objMenu_231_RESET_FILTERS.caption = strMenuTitle
Dim objMenu_231_LOV As Object
strMenuTitle = "&List of Values"
Set objMenu_231_LOV = objMenu_231_ORACLE.Controls.add
objMenu_231_LOV.OnAction = Application.ActiveSheet.CodeName & ".BneDBLClick"
objMenu_231_LOV.caption = strMenuTitle
Dim objMenu_231_UPLOAD As Object
strMenuTitle = "&Upload"
Set objMenu_231_UPLOAD = objMenu_231_ORACLE.Controls.add
objMenu_231_UPLOAD.OnAction = Application.ActiveSheet.CodeName & ".BneUploadDocument"
objMenu_231_UPLOAD.caption = strMenuTitle
Dim objMenu_231_UPLOADALL As Object
strMenuTitle = "U&pload All"
Set objMenu_231_UPLOADALL = objMenu_231_ORACLE.Controls.add
objMenu_231_UPLOADALL.OnAction = Application.ActiveSheet.CodeName & ".BneUploadAll"
objMenu_231_UPLOADALL.caption = strMenuTitle
Dim objMenu_231_MONITOR As Object
strMenuTitle = "&Monitor"
Set objMenu_231_MONITOR = objMenu_231_ORACLE.Controls.add
objMenu_231_MONITOR.OnAction = "'" & Application.ActiveSheet.CodeName & ".BneMonitor" & "'"
objMenu_231_MONITOR.caption = strMenuTitle
Dim objMenu_231_SWITCHRESP As Object
strMenuTitle = "S&witch Responsibility"
Set objMenu_231_SWITCHRESP = objMenu_231_ORACLE.Controls.add
objMenu_231_SWITCHRESP.OnAction = "'" & Application.ActiveSheet.CodeName & ".BneSwitchResponsibility" & "'"
objMenu_231_SWITCHRESP.caption = strMenuTitle
Dim objMenu_231_ABOUT As Object
strMenuTitle = "&About"
Set objMenu_231_ABOUT = objMenu_231_ORACLE.Controls.add
objMenu_231_ABOUT.OnAction = "'" & Application.ActiveSheet.CodeName & ".BneAbout" & "'"
objMenu_231_ABOUT.BeginGroup = True
objMenu_231_ABOUT.caption = strMenuTitle
BneSelectionChange_Menus Me.UsedRange
End Sub
Public Sub BneShowFilters()
Dim pDrawingObjects As Boolean
Dim pContents As Boolean
Dim pScenarios As Boolean

Dim TopRow As Long
Dim TopColumn As Long

Dim LinesRange As Range
Dim LinesBlockHdr As Range

Dim TipTextExists As Boolean
Dim HeaderOffset As Integer

Dim InterfaceCols As Collection

If Not AutoFilterMode Then
Application.ScreenUpdating = False
With Me
pDrawingObjects = .ProtectDrawingObjects
pContents = .ProtectContents
pScenarios = .ProtectScenarios
If Not pDrawingObjects And Not pContents And Not pScenarios Then
Else
.Unprotect
End If
End With
TopRow = ActiveWindow.VisibleRange.Row
TopColumn = ActiveWindow.VisibleRange.Column

Set InterfaceCols = BneGetVBAInterfaceCols
Set LinesRange = BneRetrieveLinesBlockRange(Me, InterfaceCols)

TipTextExists = BneIsLinesBlockHintDisplayed(InterfaceCols)
If TipTextExists Then
HeaderOffset = -2
Else
HeaderOffset = -1
End If

With Me
If Not LinesRange Is Nothing Then
Set LinesBlockHdr = Range(Cells(LinesRange.Row + HeaderOffset, LinesRange.Column), Cells(LinesRange.Row, LinesRange.Columns(LinesRange.Columns.count).Column))
LinesBlockHdr.AutoFilter

If TipTextExists Then
.Rows(LinesRange.Row - 1).Hidden = True
End If
End If

ActiveWindow.ScrollRow = TopRow
ActiveWindow.ScrollColumn = TopColumn
If .AutoFilterMode = False Then
.Protect DrawingObjects:=True, contents:=True, Scenarios:=True
End If
End With
End If

BneSelectionChange_Menus Me.UsedRange
End Sub
Public Function IsEnabled_231_SHOW_FILTERS() As Boolean
If Me.AutoFilterMode Then
IsEnabled_231_SHOW_FILTERS = False
Else
IsEnabled_231_SHOW_FILTERS = True
End If
End Function
Public Sub BneHideFilters()
Dim pDrawingObjects As Boolean
Dim pContents As Boolean
Dim pScenarios As Boolean

Dim TopRow As Long
Dim TopColumn As Long

Dim LinesRange As Range
Dim LinesBlockHdr As Range

Dim TipTextExists As Boolean
Dim HeaderOffset As Integer

Dim InterfaceCols As Collection

If AutoFilterMode Then
Application.ScreenUpdating = False
With Me
pDrawingObjects = .ProtectDrawingObjects
pContents = .ProtectContents
pScenarios = .ProtectScenarios
If Not pDrawingObjects And Not pContents And Not pScenarios Then
Else
.Unprotect
End If
End With
TopRow = ActiveWindow.VisibleRange.Row
TopColumn = ActiveWindow.VisibleRange.Column

Set InterfaceCols = BneGetVBAInterfaceCols
Set LinesRange = BneRetrieveLinesBlockRange(Me, InterfaceCols)

TipTextExists = BneIsLinesBlockHintDisplayed(InterfaceCols)
If TipTextExists Then
HeaderOffset = -2
Else
HeaderOffset = -1
End If

With Me
If Not LinesRange Is Nothing Then
Set LinesBlockHdr = Range(Cells(LinesRange.Row + HeaderOffset, LinesRange.Column), Cells(LinesRange.Row, LinesRange.Columns(LinesRange.Columns.count).Column))
LinesBlockHdr.AutoFilter

If TipTextExists Then
.Rows(LinesRange.Row - 1).Hidden = False
End If
End If

ActiveWindow.ScrollRow = TopRow
ActiveWindow.ScrollColumn = TopColumn
If .AutoFilterMode = False Then
.Protect DrawingObjects:=True, contents:=True, Scenarios:=True
End If
End With
End If

BneSelectionChange_Menus Me.UsedRange
End Sub
Public Function IsEnabled_231_HIDE_FILTERS() As Boolean
If Me.AutoFilterMode Then
IsEnabled_231_HIDE_FILTERS = True
Else
IsEnabled_231_HIDE_FILTERS = False
End If
End Function
Public Sub BneResetFilters()
Dim pDrawingObjects As Boolean
Dim pContents As Boolean
Dim pScenarios As Boolean

Dim LinesRange As Range

Dim InterfaceCols As Collection

If AutoFilterMode Then
Application.ScreenUpdating = False
With Me
pDrawingObjects = .ProtectDrawingObjects
pContents = .ProtectContents
pScenarios = .ProtectScenarios
If Not pDrawingObjects And Not pContents And Not pScenarios Then
Else
.Unprotect
End If

On Error Resume Next

.ShowAllData
End With

Set InterfaceCols = BneGetVBAInterfaceCols
If BneIsLinesBlockHintDisplayed(InterfaceCols) Then

Set LinesRange = BneRetrieveLinesBlockRange(Me, InterfaceCols)
If Not LinesRange Is Nothing Then
Me.Rows(LinesRange.Row - 1).Hidden = True
End If
End If

With Me
If Not pDrawingObjects And Not pContents And Not pScenarios Then
Else
.Protect DrawingObjects:=True, contents:=True, Scenarios:=True
End If
End With
End If
End Sub
Public Function IsEnabled_231_RESET_FILTERS() As Boolean
If Me.AutoFilterMode Then
IsEnabled_231_RESET_FILTERS = True
Else
IsEnabled_231_RESET_FILTERS = False
End If
End Function
Public Function IsVisible_231_UPLOAD() As Boolean
Dim objProperties As New BneVBAProperties
Dim objProperty As BneVBAProperty
objProperties.setSheet Me
Set objProperty = objProperties.getProperty("contentgroupupload")
If Not objProperty Is Nothing Then
IsVisible_231_UPLOAD = BneGetBooleanValue(objProperty.value)
Else
IsVisible_231_UPLOAD = True
End If
End Function
Public Function IsVisible_231_UPLOADALL() As Boolean
Dim objProperties As New BneVBAProperties
Dim objProperty As BneVBAProperty
Dim intSheetCnt As Integer
Set objProperty = objProperties.getProperty("contentsheetcount")
If Not objProperty Is Nothing Then
intSheetCnt = CInt(objProperty.value)
End If
If intSheetCnt <= 1 Then
IsVisible_231_UPLOADALL = False
Else
objProperties.setSheet Me
Set objProperty = objProperties.getProperty("contentgroupupload")
If Not objProperty Is Nothing Then
IsVisible_231_UPLOADALL = BneGetBooleanValue(objProperty.value)
End If
End If
End Function
Private Sub BneSelectionChange_Menus(ByVal Target As Range)
On Error Resume Next
Dim strMenuTitle As String
Dim objWorkSheetMenuBar As Object
Set objWorkSheetMenuBar = Application.CommandBars("Worksheet Menu Bar")
Dim objMenu_231_ORACLE As Object
strMenuTitle = "Or&acle"
Set objMenu_231_ORACLE = objWorkSheetMenuBar.Controls(strMenuTitle)
Dim objMenu_231_FILTERS As Object
strMenuTitle = "&Filters"
Set objMenu_231_FILTERS = objMenu_231_ORACLE.Controls(strMenuTitle)
Dim objMenu_231_SHOW_FILTERS As Object
strMenuTitle = "&Show Filters"
Set objMenu_231_SHOW_FILTERS = objMenu_231_FILTERS.Controls(strMenuTitle)
objMenu_231_SHOW_FILTERS.Enabled = IsEnabled_231_SHOW_FILTERS
Dim objMenu_231_HIDE_FILTERS As Object
strMenuTitle = "&Hide Filters"
Set objMenu_231_HIDE_FILTERS = objMenu_231_FILTERS.Controls(strMenuTitle)
objMenu_231_HIDE_FILTERS.Enabled = IsEnabled_231_HIDE_FILTERS
Dim objMenu_231_RESET_FILTERS As Object
strMenuTitle = "&Reset Filters"
Set objMenu_231_RESET_FILTERS = objMenu_231_FILTERS.Controls(strMenuTitle)
objMenu_231_RESET_FILTERS.Enabled = IsEnabled_231_RESET_FILTERS
Dim objMenu_231_UPLOAD As Object
strMenuTitle = "&Upload"
Set objMenu_231_UPLOAD = objMenu_231_ORACLE.Controls(strMenuTitle)
objMenu_231_UPLOAD.Visible = IsVisible_231_UPLOAD
Dim objMenu_231_UPLOADALL As Object
strMenuTitle = "U&pload All"
Set objMenu_231_UPLOADALL = objMenu_231_ORACLE.Controls(strMenuTitle)
objMenu_231_UPLOADALL.Visible = IsVisible_231_UPLOADALL
End Sub
Public Sub BneRemoveOracleMenu()
On Error Resume Next
Dim strMenuTitle As String
Dim objCellPopUp As CommandBar
Dim i As Integer
Dim objWorkSheetMenuBar As Object
Set objWorkSheetMenuBar = Application.CommandBars("Worksheet Menu Bar")
strMenuTitle = "Or&acle"
objWorkSheetMenuBar.Controls(strMenuTitle).Delete
Set objCellPopUp = CommandBars("Cell")
If Not objCellPopUp Is Nothing Then
For i = objCellPopUp.Controls.count To 1 Step -1
If Left(objCellPopUp.Controls(i).Tag, 9) = "mnuOracle" Then
objCellPopUp.Controls(i).Delete
End If
Next i
End If
End Sub
Private Sub Worksheet_BeforeRightClick(ByVal Target As Range, Cancel As Boolean)
Dim objCellPopUp As CommandBar
Dim objButton As CommandBarButton
Dim i As Integer
Dim strMenuTitle As String
On Error GoTo ErrorHandler
Set objCellPopUp = CommandBars("Cell")
If Not objCellPopUp Is Nothing Then
For i = objCellPopUp.Controls.count To 1 Step -1
If Left(objCellPopUp.Controls(i).Tag, 9) = "mnuOracle" Then
objCellPopUp.Controls(i).Delete
End If
Next i
strMenuTitle = "&List of Values"
Set objButton = objCellPopUp.Controls.add()
objButton.BeginGroup = True
objButton.caption = strMenuTitle
objButton.Tag = "mnuOracle_231_LOV_CONTEXT"
objButton.OnAction = Application.ActiveSheet.CodeName & ".BneDBLClick"
End If
Exit Sub
ErrorHandler:
AddBneMsg BNE_ERROR, "Worksheet_BeforeRightClick", "Error: " & Err.Number & " Err.Description: " & Err.Description
End Sub
Public Sub CreateLayout()
Dim bDisplayStatusBar As Boolean
On Error GoTo LayoutError
bDisplayStatusBar = Application.DisplayStatusBar
Application.DisplayStatusBar = True
ActiveWindow.DisplayOutline = False
Application.ScreenUpdating = False
Application.Interactive = False
Me.Unprotect
Set m_clsLayout = New BneLayout
m_clsLayout.render Me
Set m_clsLayout = Nothing
Application.ScreenUpdating = True
Application.Interactive = True
Application.StatusBar = ""
Application.DisplayStatusBar = bDisplayStatusBar
Exit Sub
LayoutError:
AddBneMsg BNE_ERROR, "Sheet.CreateLayout", "Error: " & Err.Description
Application.ScreenUpdating = True
Application.Interactive = True
Application.DisplayStatusBar = bDisplayStatusBar
Set m_clsLayout = Nothing
End Sub
Public Sub BneUploadCancel()
Dim oParams As New BneVBAParameters
If Not m_Browser Is Nothing Then
oParams.add "bne:apiVersion", "1.0"
oParams.add "bne:page", "BneAsyncUpload"
oParams.add "event", "bne:asyncJobCancel"
oParams.add "bne:documentId", "WYR0B3QT8VDUA3XU8TBV3YSJT8U7XIZKRULKOGKT"
If Not m_objVBAUploader Is Nothing Then
oParams.add "bne:uploadJob", CStr(m_objVBAUploader.JobID)
End If
m_Browser.NavigatePost APPLICATION_SERVICE, oParams
End If
End Sub
Public Sub BneUploadBegin(ByRef objHTMLDocument As Object)
Dim colSheets As New Collection
Dim objBook As Object
Dim objSheet As Object
Dim clsProperties As New BneVBAProperties
Dim clsProperty As BneVBAProperty
Dim strContentID As String
BneAddReference "Scripting", "{420B2830-E718-11CF-893D-00A0C9054228}"
If m_blnUploadAll = True Then
clsProperties.setSheet Me
Set clsProperty = clsProperties.getProperty("contentidentifier")
If Not clsProperty Is Nothing Then
strContentID = clsProperty.value
End If
For Each objBook In Workbooks
For Each objSheet In objBook.Worksheets
clsProperties.setSheet objSheet
Set clsProperty = clsProperties.getProperty("contentidentifier")
If Not clsProperty Is Nothing Then
If clsProperty.value = strContentID Then
Set clsProperty = clsProperties.getProperty("contentgroupsequence")
If Not clsProperty Is Nothing Then
If Len(clsProperty.value) > 0 Then
Set clsProperty = clsProperties.getProperty("contentgroupupload")
If Not clsProperty Is Nothing Then
If BneGetBooleanValue(clsProperty.value) = True Then
colSheets.add objSheet
End If
End If
End If
End If
End If
End If
Next
Next
Else
colSheets.add Me
End If
Call BneProcessingBegin(True)
Set m_objVBAUploader = New BneVBAUploader
Set m_objVBAUploader.Sheets = colSheets
BneSetupNewUpload objHTMLDocument
m_Browser.addEventCallBack "BneUploadCancel", "BNE:BROWSERCLOSE", Me
m_objVBAUploader.BneUploadBegin
Dim lTicketNumber As Long
Dim strMsgHeader As String
strMsgHeader = "Error"
lTicketNumber = m_objVBAUploader.JobID
If lTicketNumber = -1 Then
If m_objVBAUploader.Status = m_objVBAUploader.UPL_ERROR Then
objHTMLDocument.body.innerHTML = BneBrowser.WebBrowser_DocumentComplete_ERROR_MESSAGE
Else 'Show the standard error page with last error in response xml.
Call m_Browser.ErrorMessage(strMsgHeader, m_objVBAUploader.text, m_objVBAUploader.cause, m_objVBAUploader.action)
objHTMLDocument.body.innerHTML = m_Browser.WebBrowser_DocumentComplete_ERROR_MESSAGE
End If
ElseIf lTicketNumber = 0 Then
Call m_Browser.ErrorMessage(strMsgHeader, m_objVBAUploader.text, m_objVBAUploader.cause, m_objVBAUploader.action)
objHTMLDocument.body.innerHTML = m_Browser.WebBrowser_DocumentComplete_ERROR_MESSAGE
Else
objHTMLDocument.all("bne:uploadJob").value = CStr(lTicketNumber)
Dim oForm As Object
Set oForm = objHTMLDocument.all("BneAsyncUploadPageSend")
oForm.submit
End If
End Sub
Public Sub BneSetupNewUpload(ByRef objHTMLDocument As Object)
Dim commonParamForm As Object
Dim integratorParamForm As Object
Dim commonParams As BneVBAParameters
Dim integratorParams As BneVBAParameters
Dim documentId As String
ResetMsgs
Set commonParamForm = objHTMLDocument.all("bne:icxId")
Set commonParams = BneExtractParams(commonParamForm)
commonParams.add "bne:documentId", Me.BneGetDocumentId
commonParams.add "bne:servicePath", Me.BneGetServletPath
commonParams.add "bne:language", Me.BneGetGeneratedLanguage
commonParams.add "bne:apiVersion", "1.1"
commonParams.add "bne:requestType", "asynchronous"
Set integratorParamForm = objHTMLDocument.all("integratorParamForm")
Set integratorParams = BneExtractParams(integratorParamForm)
If UCase(objHTMLDocument.all("BNE:ROWS").getAttribute("VALUE")) = "ALL" Then
m_objVBAUploader.FlaggedRowsOnly = False
Else
m_objVBAUploader.FlaggedRowsOnly = True
End If
Set m_objVBAUploader.CommonUploadParams = commonParams
End Sub
Private Sub BneUploadComplete(ByRef objHTMLDocument As Object)
Dim commonParamForm As Object
Dim commonParams As BneVBAParameters
Dim integratorParams As BneVBAParameters
m_Browser.removeEventCallBack "BNE:BROWSERCLOSE"
Set commonParamForm = objHTMLDocument.all("bne:icxId")
Set commonParams = BneExtractParams(commonParamForm)
commonParams.add "bne:documentId", Me.BneGetDocumentId
commonParams.add "bne:language", Me.BneGetGeneratedLanguage
commonParams.add "bne:servicePath", Me.BneGetServletPath
m_objVBAUploader.BneUploadComplete
If m_objVBAUploader.Status = m_objVBAUploader.UPL_ERROR Then
If GetMsgTypeCount(BNE_ERROR) > 0 Then
objHTMLDocument.body.innerHTML = BneBrowser.WebBrowser_DocumentComplete_ERROR_MESSAGE
Else 'Show the standard error page
objHTMLDocument.body.innerHTML = BneBrowser.WebBrowser_DocumentComplete_ERROR_MESSAGE
End If
End If
Set m_objVBAUploader = Nothing
Call BneProcessingEnd
End Sub
Private Sub BneUploadError(ByRef objHTMLDocument As Object)
If m_Browser Is Nothing Then
Else
Dim oParams As New BneVBAParameters
Set oParams = BneGetUploadParams()
If Not m_objVBAUploader Is Nothing Then
oParams.add "bne:uploadJob", CStr(m_objVBAUploader.JobID)
End If
objHTMLDocument.parentWindow.Status = ""
m_Browser.addEventCallBack "BneUploadError", "ERROR", Me
m_Browser.NavigatePost APPLICATION_SERVICE, oParams
End If
End Sub
Private Sub BneUploadClose(ByRef objHTMLDocument As Object)
Set m_objVBAUploader = Nothing
BneProcessingEnd
End Sub
Public Sub RowsToUpload(ByRef FlaggedRows() As Long, FlaggedRowsOnly As Boolean, Optional NotEmptyRows As Boolean = False)
Dim UploadRows As Variant
UploadRows = Me.Range("BNE_UPLOAD")
GetUploadRows Me, UploadRows, FlaggedRows, FlaggedRowsOnly, NotEmptyRows
End Sub
Private Sub BneXML()
Dim colSheets As New Collection
colSheets.add Me
Set m_objVBAUploader = New BneVBAUploader
Set m_objVBAUploader.Sheets = colSheets
m_objVBAUploader.BneUploadBegin
Dim objDocument As Object
Set objDocument = createDOMDocument()
Dim objLayout As New BneLayout
Dim objUploadStructure As New BneUploadLayout
objUploadStructure.createUploadXML colSheets, objLayout, objDocument, True
objDocument.Save (DEBUG_DOCUMENT)
Set objDocument = Nothing
Set objLayout = Nothing
Set colSheets = Nothing
End Sub
Public Sub BneCreateLayout()
Dim initialRange As Range
On Error Resume Next
Application.EnableEvents = False
CreateLayout
BneSetSession True, g_icxSessionID
Application.EnableEvents = True
setConstantsAndFormulas ActiveSheet.Range("LINE")
m_rowsInLines = ActiveSheet.Range("LINE").Rows.count
MoveToLinesBlock ActiveSheet
BneSheetActivate
End Sub
Public Sub BneSheetActivate()
On Error GoTo ErrorHandler
BneCreateOracleMenu
m_rowsInLines = ActiveSheet.Range("LINE").Rows.count
Exit Sub
ErrorHandler:
AddBneMsg BNE_ERROR, "BneSheetActivate", "Error: " & Err.Number & " " & Err.Description
End Sub
Public Sub BneStartup()
BneSetSession
m_LOVFlag = False
End Sub
Public Sub BneSetSession(Optional sessionState As Boolean, Optional sessionTicket As String)
On Error Resume Next
If sessionTicket <> "" Then
m_SessionState = sessionState
m_SessionTicket = sessionTicket
Else
m_SessionState = False
m_SessionTicket = ""
End If
End Sub
Public Function BneGetUploadParams() As Object
Dim oParams As New BneVBAParameters
Dim dataParameters As String
Dim sParamVal As String
oParams.add "bne:apiVersion", "1.0"
oParams.add "bne:page", "BneAsyncUpload"
oParams.add "bne:integrator", "101:JOURNALS_120"
oParams.add "gl:ledger", ColumnValue(Me, "GL_INTERFACE_LEDGER_ID")
oParams.add "bne:organization", ColumnValue(Me, "GL_INTERFACE_ORGANIZATION")
oParams.add "bne:actualflag", "A"
sParamVal = "Y"
oParams.add "bne:validation", sParamVal
sParamVal = "FLAGGED"
oParams.add "bne:rows", sParamVal
sParamVal = "Y"
oParams.add "bne:import", sParamVal
sParamVal = "N"
oParams.add "bne:importPost", sParamVal
sParamVal = "N"
oParams.add "bne:postUnbalanced", sParamVal
sParamVal = "N"
oParams.add "bne:importSummary", sParamVal
sParamVal = "GLXBDENT_J,GLXJEENT_A,GLXJEENT_E,GLXJIRUN"
oParams.add "bne:required_form_function", sParamVal
sParamVal = "NOIMPORT"
oParams.add "bne:importFlex", sParamVal
sParamVal = "N"
oParams.add "bne:mrc", sParamVal
Set BneGetUploadParams = oParams
End Function
Private Sub BneUploadDocument()
m_blnUploadAll = False
Call BneUploadCommon
End Sub
Private Sub BneUploadCommon()
Dim oParams As New BneVBAParameters
Set oParams = BneGetUploadParams()
Dim strMsgHeader As String
Dim strMsgBody As String
Dim strMsgAction1 As String
Dim strMsgAction2 As String
strMsgHeader = "Error"
strMsgBody = "The results of the upload cannot be displayed."
strMsgAction1 = "This was due to a network fault. Leave this window open to have it make more attempts to display the upload results."
strMsgAction2 = "Contact your system administrator if this problem persists."
Set m_Browser = New BneBrowser
BneDefaultBrowser m_Browser
Call m_Browser.ErrorMessage(strMsgHeader, strMsgBody, strMsgAction1, strMsgAction2)
m_Browser.addEventCallBack "BneUploadBegin", "ASYNCUPLOADBEGIN", Me
m_Browser.addEventCallBack "BneUploadComplete", "ASYNCUPLOADCOMPLETE", Me
m_Browser.addEventCallBack "BneUploadError", "ERROR", Me
m_Browser.addEventCallBack "BneUploadClose", "CLOSE", Me
m_Browser.NavigatePost APPLICATION_SERVICE, oParams
m_Browser.Show
ReshowWindowsInTaskbar
End Sub
Private Sub BneUploadAll()
m_blnUploadAll = True
Call BneUploadCommon
End Sub
Public Sub BneMonitor()
Dim oParams As New BneVBAParameters
oParams.add "bne:apiVersion", "1.0"
oParams.add "bne:page", "BneOAMonitor"
NavigatePost APPLICATION_SERVICE, oParams
End Sub
Private Sub BneMsgBox(oXML As Object)
Dim oParams As New BneVBAParameters
oParams.add "bne:apiVersion", "1.0"
oParams.add "bne:page", "BneMsgBox"
On Error Resume Next
oParams.add "bne:messagexml", "<message>" & oXML.xml & "</message>"
On Error GoTo 0
NavigatePost APPLICATION_SERVICE, oParams
End Sub
Public Sub BneAbout()
Dim oParams As New BneVBAParameters
oParams.add "bne:apiVersion", "1.0"
oParams.add "bne:page", "BneHelpAbout"
NavigatePost APPLICATION_SERVICE, oParams
End Sub
Public Sub BneSwitchResponsibility()
Dim oParams As New BneVBAParameters
oParams.add "bne:apiVersion", "1.0"
oParams.add "bne:page", "BneOASwitchResp"
NavigatePost APPLICATION_SERVICE, oParams
End Sub
Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Excel.Range, Cancel As Boolean)
On Error Resume Next
BneDBLClick
Cancel = True
End Sub
Private Sub BneDBLClick()
On Error Resume Next
Dim strArgDocProcessor As String: Dim strArgInterfaceName As String: Dim strArgInterfaceColName As String: Dim strArgQueryString As String
Dim FieldName As String
Dim lsInterfaceColName As String
Dim flagData(1) As String
Dim oParams As New BneVBAParameters
Dim objCol As BneVBAInterfaceCol
Set objCol = GetBneVBAInterfaceColForRange(Me, ActiveCell)
If Not objCol Is Nothing Then
If objCol.ValComponent <> "" And BneIsReadOnly(ActiveCell, Me) Then
MsgBox "Read-only fields cannot be changed.", vbCritical
GoTo error
End If
End If
If Not Application.Intersect(ActiveCell, Me.Names("BNE_UPLOAD").RefersToRange) Is Nothing Then
If ActiveCell.value = "x" Then
GoTo error
End If
End If
intBrowserWidth = 350
intBrowserHeight = 500
lsInterfaceColName = GetBneInterfaceColNameOfRange(Me, Range(ActiveCell.Address))
FieldName = GetBneNameOfRange(Me, Range(ActiveCell.Address))
If Len(lsInterfaceColName) > 0 Then
oParams.add "bne:apiVersion", "1.1"
oParams.add "bne:documentId", BneGetDocumentId
Select Case lsInterfaceColName
Case "GL_INTERFACE_LEDGER_ID"
LEDGER_IDDetails oParams, strArgDocProcessor, strArgInterfaceName
strArgDocProcessor = "TABLE"
strArgInterfaceName = "GL_INTERFACE"
oParams.add "bne:component", "101:GL_LEDGER_NAME"
strArgInterfaceColName = "LEDGER_ID"
BneBrowseDocument strArgDocProcessor, strArgInterfaceName, strArgInterfaceColName, COMPONENT_SERVICE, oParams, intBrowserHeight, intBrowserWidth
Case "GL_INTERFACE_USER_JE_CATEGORY_NAME"
USER_JE_CATEGORY_NAMEDetails oParams, strArgDocProcessor, strArgInterfaceName
strArgDocProcessor = "TABLE"
strArgInterfaceName = "GL_INTERFACE"
oParams.add "bne:component", "101:OA_CATEGORY"
strArgInterfaceColName = "USER_JE_CATEGORY_NAME"
BneBrowseDocument strArgDocProcessor, strArgInterfaceName, strArgInterfaceColName, COMPONENT_SERVICE, oParams, intBrowserHeight, intBrowserWidth
Case "GL_INTERFACE_CURRENCY_CODE"
CURRENCY_CODEDetails oParams, strArgDocProcessor, strArgInterfaceName
strArgDocProcessor = "TABLE"
strArgInterfaceName = "GL_INTERFACE"
oParams.add "bne:component", "101:OA_CURRENCY_CODE"
strArgInterfaceColName = "CURRENCY_CODE"
BneBrowseDocument strArgDocProcessor, strArgInterfaceName, strArgInterfaceColName, COMPONENT_SERVICE, oParams, intBrowserHeight, intBrowserWidth
Case "GL_INTERFACE_ACCOUNTING_DATE"
ACCOUNTING_DATEDetails oParams, strArgDocProcessor, strArgInterfaceName
strArgDocProcessor = "TABLE"
strArgInterfaceName = "GL_INTERFACE"
oParams.add "bne:component", "101:OA_ACCOUNTING_DATE"
strArgInterfaceColName = "ACCOUNTING_DATE"
BneBrowseDocument strArgDocProcessor, strArgInterfaceName, strArgInterfaceColName, COMPONENT_SERVICE, oParams, intBrowserHeight, intBrowserWidth
Case "GL_INTERFACE_PERIOD_NAME"
PERIOD_NAMEDetails oParams, strArgDocProcessor, strArgInterfaceName
strArgDocProcessor = "TABLE"
strArgInterfaceName = "GL_INTERFACE"
oParams.add "bne:component", "101:OA_PERIOD_NAME"
strArgInterfaceColName = "PERIOD_NAME"
BneBrowseDocument strArgDocProcessor, strArgInterfaceName, strArgInterfaceColName, COMPONENT_SERVICE, oParams, intBrowserHeight, intBrowserWidth
Case "GL_INTERFACE_REFERENCE8"
REFERENCE8Details oParams, strArgDocProcessor, strArgInterfaceName
strArgDocProcessor = "TABLE"
strArgInterfaceName = "GL_INTERFACE"
oParams.add "bne:component", "101:OA_REVERSAL_DATE"
strArgInterfaceColName = "REFERENCE8"
BneBrowseDocument strArgDocProcessor, strArgInterfaceName, strArgInterfaceColName, COMPONENT_SERVICE, oParams, intBrowserHeight, intBrowserWidth
Case "GL_INTERFACE_SEGMENT1"
ACCOUNTDetails oParams, strArgDocProcessor, strArgInterfaceName
strArgDocProcessor = "KEYDFF"
strArgInterfaceName = "GL_INTERFACE"
oParams.add "bne:component", "101:GL_FLEX"
strArgInterfaceColName = "ACCOUNT_FLEX_FIELD"
BneBrowseDocument strArgDocProcessor, strArgInterfaceName, strArgInterfaceColName, COMPONENT_SERVICE, oParams, intBrowserHeight, intBrowserWidth
Case "GL_INTERFACE_SEGMENT2"
ACCOUNTDetails oParams, strArgDocProcessor, strArgInterfaceName
strArgDocProcessor = "KEYDFF"
strArgInterfaceName = "GL_INTERFACE"
oParams.add "bne:component", "101:GL_FLEX"
strArgInterfaceColName = "ACCOUNT_FLEX_FIELD"
BneBrowseDocument strArgDocProcessor, strArgInterfaceName, strArgInterfaceColName, COMPONENT_SERVICE, oParams, intBrowserHeight, intBrowserWidth
Case "GL_INTERFACE_SEGMENT3"
ACCOUNTDetails oParams, strArgDocProcessor, strArgInterfaceName
strArgDocProcessor = "KEYDFF"
strArgInterfaceName = "GL_INTERFACE"
oParams.add "bne:component", "101:GL_FLEX"
strArgInterfaceColName = "ACCOUNT_FLEX_FIELD"
BneBrowseDocument strArgDocProcessor, strArgInterfaceName, strArgInterfaceColName, COMPONENT_SERVICE, oParams, intBrowserHeight, intBrowserWidth
Case "GL_INTERFACE_SEGMENT4"
ACCOUNTDetails oParams, strArgDocProcessor, strArgInterfaceName
strArgDocProcessor = "KEYDFF"
strArgInterfaceName = "GL_INTERFACE"
oParams.add "bne:component", "101:GL_FLEX"
strArgInterfaceColName = "ACCOUNT_FLEX_FIELD"
BneBrowseDocument strArgDocProcessor, strArgInterfaceName, strArgInterfaceColName, COMPONENT_SERVICE, oParams, intBrowserHeight, intBrowserWidth
Case "GL_INTERFACE_SEGMENT5"
ACCOUNTDetails oParams, strArgDocProcessor, strArgInterfaceName
strArgDocProcessor = "KEYDFF"
strArgInterfaceName = "GL_INTERFACE"
oParams.add "bne:component", "101:GL_FLEX"
strArgInterfaceColName = "ACCOUNT_FLEX_FIELD"
BneBrowseDocument strArgDocProcessor, strArgInterfaceName, strArgInterfaceColName, COMPONENT_SERVICE, oParams, intBrowserHeight, intBrowserWidth
Case "GL_INTERFACE_SEGMENT6"
ACCOUNTDetails oParams, strArgDocProcessor, strArgInterfaceName
strArgDocProcessor = "KEYDFF"
strArgInterfaceName = "GL_INTERFACE"
oParams.add "bne:component", "101:GL_FLEX"
strArgInterfaceColName = "ACCOUNT_FLEX_FIELD"
BneBrowseDocument strArgDocProcessor, strArgInterfaceName, strArgInterfaceColName, COMPONENT_SERVICE, oParams, intBrowserHeight, intBrowserWidth
End Select
ElseIf Len(FieldName) > 0 Then
If FieldName = "BNE_MESSAGES" Then
If ColumnValue(Me, "BNE_MESSAGES") <> "" Then
oParams.add "bne:apiVersion", "1.0"
oParams.add "bne:page", "BneMsgBox"
oParams.add "bne:messagexml", "<message>" & ColumnValue(Me, "BNE_MESSAGES_HIDDEN") & "</message>"
NavigatePost APPLICATION_SERVICE, oParams
End If
ElseIf FieldName = "BNE_UPLOAD" Then
If Range(ActiveCell.Address) = "O" Then
Range(ActiveCell.Address) = ""
Else
Range(ActiveCell.Address) = "O"
End If
End If
End If
error:
End Sub
Private Sub LEDGER_IDDetails(oParams As BneVBAParameters, strArgDocProcessor As String, strArgInterfaceName As String)
oParams.add "field:LEDGER_ID", ColumnValue(Me, "GL_INTERFACE_LEDGER_ID")
intBrowserWidth = 450
intBrowserHeight = 350
oParams.add "CHART_OF_ACCOUNTS_ID", ColumnValue(Me, "GL_INTERFACE_CHART_OF_ACCOUNTS_ID")
End Sub
Private Sub USER_JE_CATEGORY_NAMEDetails(oParams As BneVBAParameters, strArgDocProcessor As String, strArgInterfaceName As String)
oParams.add "field:USER_JE_CATEGORY_NAME", ColumnValue(Me, "GL_INTERFACE_USER_JE_CATEGORY_NAME")
intBrowserWidth = 300
intBrowserHeight = 400
oParams.add "integrator", "101:JOURNALS_120"
oParams.add "interface", "101:GL_INTERFACE_120"
oParams.add "interface-column-id", "9"
End Sub
Private Sub CURRENCY_CODEDetails(oParams As BneVBAParameters, strArgDocProcessor As String, strArgInterfaceName As String)
oParams.add "field:CURRENCY_CODE", ColumnValue(Me, "GL_INTERFACE_CURRENCY_CODE")
intBrowserWidth = 450
intBrowserHeight = 350
oParams.add "LEDGER_ID", ColumnValue(Me, "GL_INTERFACE_LEDGER_ID")
oParams.add "ACTUAL_FLAG", "A"
End Sub
Private Sub ACCOUNTING_DATEDetails(oParams As BneVBAParameters, strArgDocProcessor As String, strArgInterfaceName As String)
oParams.add "field:ACCOUNTING_DATE", ColumnDateValue(Me, "GL_INTERFACE_ACCOUNTING_DATE", "yyyy-MM-dd")
intBrowserWidth = 380
intBrowserHeight = 300
oParams.add "LEDGER_ID", ColumnValue(Me, "GL_INTERFACE_LEDGER_ID")
oParams.add "ACTUAL_FLAG", "A"
oParams.add "USER_JE_SOURCE_NAME", ColumnValue(Me, "GL_INTERFACE_USER_JE_SOURCE_NAME")
End Sub
Private Sub PERIOD_NAMEDetails(oParams As BneVBAParameters, strArgDocProcessor As String, strArgInterfaceName As String)
oParams.add "field:PERIOD_NAME", ColumnValue(Me, "GL_INTERFACE_PERIOD_NAME")
intBrowserWidth = 450
intBrowserHeight = 350
oParams.add "LEDGER_ID", ColumnValue(Me, "GL_INTERFACE_LEDGER_ID")
oParams.add "ACTUAL_FLAG", "A"
oParams.add "ACCOUNTING_DATE", ColumnDateValue(Me, "GL_INTERFACE_ACCOUNTING_DATE", "yyyy-MM-dd")
oParams.add "PERIOD_NAME", ColumnValue(Me, "GL_INTERFACE_PERIOD_NAME")
End Sub
Private Sub REFERENCE8Details(oParams As BneVBAParameters, strArgDocProcessor As String, strArgInterfaceName As String)
oParams.add "field:REFERENCE8", ColumnValue(Me, "GL_INTERFACE_REFERENCE8")
intBrowserWidth = 450
intBrowserHeight = 350
oParams.add "LEDGER_ID", ColumnValue(Me, "GL_INTERFACE_LEDGER_ID")
oParams.add "ACTUAL_FLAG", "A"
oParams.add "ACCOUNTING_DATE", ColumnDateValue(Me, "GL_INTERFACE_ACCOUNTING_DATE", "yyyy-MM-dd")
oParams.add "USER_JE_SOURCE_NAME", ColumnValue(Me, "GL_INTERFACE_USER_JE_SOURCE_NAME")
oParams.add "PERIOD_NAME", ColumnValue(Me, "GL_INTERFACE_PERIOD_NAME")
End Sub
Private Sub ACCOUNTDetails(oParams As BneVBAParameters, strArgDocProcessor As String, strArgInterfaceName As String)
oParams.add "CURRENCY_CODE", ColumnValue(Me, "GL_INTERFACE_CURRENCY_CODE")
oParams.add "field:applicationid", "101"
oParams.add "field:idflexnum", "50428"
oParams.add "field:idflexcode", "GL#"
oParams.add "field:actualflag", "A"
oParams.add "field:SEGMENT1", ColumnValue(Me, "GL_INTERFACE_SEGMENT1")
oParams.add "field:SEGMENT2", ColumnValue(Me, "GL_INTERFACE_SEGMENT2")
oParams.add "field:SEGMENT3", ColumnValue(Me, "GL_INTERFACE_SEGMENT3")
oParams.add "field:SEGMENT4", ColumnValue(Me, "GL_INTERFACE_SEGMENT4")
oParams.add "field:SEGMENT5", ColumnValue(Me, "GL_INTERFACE_SEGMENT5")
oParams.add "field:SEGMENT6", ColumnValue(Me, "GL_INTERFACE_SEGMENT6")
oParams.add "field:effectivedate", ColumnDateValue(Me, "GL_INTERFACE_ACCOUNTING_DATE", "yyyy-MM-dd")
intBrowserHeight = 400
intBrowserWidth = 550
End Sub
Private Sub Worksheet_Activate()
BneSheetActivate
End Sub
Private Sub Worksheet_Deactivate()
Call BneRemoveOracleMenu
End Sub
Private Sub BneBrowseDocument(DocumentProcessor As String, InterfaceName As String, InterfaceColName As String, sURL As String, oParams As BneVBAParameters, Optional Height As Integer, Optional Width As Integer)
On Error Resume Next
m_InterfaceName = InterfaceName
m_InterfaceColName = InterfaceColName
m_DocumentProcessor = DocumentProcessor
NavigatePost sURL, oParams, Height, Width
End Sub
Public Sub BneDocument_Complete(pDisp As Object, Document As Object)
Set m_objHTMLDocument = Document
Call ValidateSession(m_objHTMLDocument)
End Sub
Private Sub NavigateGet(sURL As String, oParams As BneVBAParameters, Optional Height As Integer, Optional Width As Integer)
Set m_Browser = New BneBrowser
BneDefaultBrowser m_Browser
If Height Then
m_Browser.Height = Height
End If
If Width Then
m_Browser.Width = Width
End If
m_Browser.Navigate sURL & "?" & oParams.toString
m_Browser.Show
ReshowWindowsInTaskbar
End Sub
Private Sub NavigatePost(sURL As String, oParams As BneVBAParameters, Optional Height As Integer, Optional Width As Integer)
Set m_Browser = New BneBrowser
BneDefaultBrowser m_Browser
If Height Then
m_Browser.Height = Height
End If
If Width Then
m_Browser.Width = Width
End If
m_Browser.NavigatePost sURL, oParams
m_Browser.Show
ReshowWindowsInTaskbar
End Sub
Private Sub ValidateSession(ByRef Document As Object)
Dim documentCookies As String
Dim cookieNamePos As Long
Dim semiColonPos As Long
Dim searchString As String
documentCookies = Document.cookie
searchString = OSSCOOKIE & "="
cookieNamePos = InStr(1, documentCookies, searchString, 0)
If cookieNamePos > 0 Then
cookieNamePos = cookieNamePos + Len(searchString)
m_SessionTicket = LTrim(RTrim(Mid(documentCookies, cookieNamePos)))
End If
semiColonPos = InStr(m_SessionTicket, ";")
If semiColonPos > 0 Then
m_SessionTicket = Left(m_SessionTicket, semiColonPos - 1)
Dim clsProperties As New BneVBAProperties
Dim clsProperty As New BneVBAProperty
clsProperty.name = "ICX_SESSION_ID"
clsProperty.value = m_SessionTicket
clsProperties.addProperty clsProperty
End If
End Sub
Private Sub BneDefaultBrowser(ByRef BROWSER As BneBrowser)
On Error Resume Next
BROWSER.setSession OSSCOOKIE, m_SessionState, m_SessionTicket
BROWSER.setDocumentId BNE_DOCUMENT_ID
BROWSER.setLanguage Me.BneGetGeneratedLanguage
BROWSER.setAppsServletAgent SERVLET_PATH
BROWSER.DOCUMENT_ONCLICK = Me.CodeName & "." & DOCUMENT_ONCLICK
BROWSER.DOCUMENT_COMPLETE = Me.CodeName & "." & DOCUMENT_COMPLETE
BROWSER.UPLOADBEGIN = Me.CodeName & ".BneUploadBegin"
BROWSER.UPLOADCOMPLETE = Me.CodeName & ".BneUploadComplete"
BROWSER.Height = 350
BROWSER.Width = 500
BROWSER.caption = "Oracle Web ADI"
BROWSER.LookAndFeel = 2
BROWSER.setSheetRef Me
End Sub
Public Sub BneDocument_onclick()
On Error Resume Next
Dim curWnd As HTMLWindow2
Dim curElement As IHTMLElement
Dim elementName As String
Set curWnd = m_objHTMLDocument.parentWindow
Set curElement = curWnd.event.srcElement
elementName = curElement.ID
If elementName = SPACE(0) Then
elementName = curElement.parentElement.ID
End If
If InStr(elementName, "BNE:CANCEL") Then
BneCancelButton
ElseIf InStr(elementName, "BNE:SELECT") Then
BneSelectButton
End If
End Sub
Private Sub BneCancelButton()
m_Browser.Hide
Set m_objHTMLDocument = Nothing
Set m_Browser = Nothing
End Sub
Private Sub BneSelectButton()
On Error Resume Next
m_Browser.Hide
Select Case m_DocumentProcessor
Case "TABLE"
BneTableProcessor
Case "FORM"
BneFormProcessor
Case "FLEX"
BneFFProcessor
Case "DFF"
BneDFFProcessor
Case "KEYDFF"
BneKDFFProcessor
Case "CALENDAR"
BneCalendarProcessor
End Select
End Sub
Private Sub BneTableProcessor()
On Error Resume Next
Dim Index As Integer
Dim countSelectColumns As Integer
Dim tableSelectColumn As String
Dim tableAliasColumn As String
Dim tableSelectRow As String
Dim lsInterfaceAndColName As String
Dim selectedName As String
Dim selectedValue As String
Dim selectedDOMName As String
Dim liCurrentRow As Long
Dim strNumberFormat As String
Dim oColumn As BneVBAInterfaceCol
Dim bProtectionMode As Boolean
bProtectionMode = Me.ProtectContents
tableSelectColumn = m_objHTMLDocument.all("table-select-column").value
tableAliasColumn = m_objHTMLDocument.all("table-column-alias").value
tableSelectRow = m_objHTMLDocument.all("table-select-row").value
strNumberFormat = m_objHTMLDocument.all("mso-number-format").value
If tableSelectRow = "-1" Then Exit Sub
liCurrentRow = getCurrentRowInRange(GetBneInterfaceColNameOfRange(Me, ActiveCell))
countSelectColumns = ParameterCount(",", tableSelectColumn)
For Index = 1 To countSelectColumns
If Not (tableAliasColumn = "") Then
selectedName = ParameterValue(",", tableAliasColumn, Index)
Else
selectedName = ParameterValue(",", tableSelectColumn, Index)
End If
selectedDOMName = "BNE:COL:DATA:" & selectedName
selectedValue = m_objHTMLDocument.all(selectedDOMName, tableSelectRow).innerText
If m_objHTMLDocument.all(selectedDOMName, tableSelectRow).value <> "" Then
selectedValue = m_objHTMLDocument.all(selectedDOMName, tableSelectRow).value
End If
lsInterfaceAndColName = m_InterfaceName & "_" & ParameterValue(",", tableSelectColumn, Index)
If strNumberFormat <> "" Then
If bProtectionMode = True Then
Me.Unprotect
Me.Range(lsInterfaceAndColName)(liCurrentRow).NumberFormat = strNumberFormat
Me.Protect
Else
Me.Range(lsInterfaceAndColName)(liCurrentRow).NumberFormat = strNumberFormat
End If
End If
m_LOVFlag = True
Set oColumn = BneGetVBAInterfaceCol(lsInterfaceAndColName)
If oColumn.DataType = 1 And IsNumeric(Trim(selectedValue)) Then
Me.Range(lsInterfaceAndColName)(liCurrentRow).value = CDbl(selectedValue) * 1
Else
Me.Range(lsInterfaceAndColName)(liCurrentRow).value = selectedValue
End If
m_LOVFlag = False
Next Index
End Sub
Private Sub BneFormProcessor()
Dim iCount As Long
Dim iRow As Long
Dim Columns() As String
Dim sName As String
Dim FieldName As String
Dim liCurrentRow As Long
On Error Resume Next
liCurrentRow = getCurrentRowInRange(GetBneInterfaceColNameOfRange(Me, ActiveCell))
For iCount = 0 To m_objHTMLDocument.all("BNE:FIELD").Length - 1
sName = m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("NAME")
FieldName = ParameterValue(":", sName, 2)
m_LOVFlag = True
Me.Range(m_InterfaceName & "_" & FieldName)(liCurrentRow).value = m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("VALUE")
m_LOVFlag = False
Next iCount
End Sub
Private Sub BneFFProcessor()
On Error Resume Next
Dim iCount As Long
Dim iRow As Long
Dim Columns() As String
Dim sName As String
Dim FieldName As String
Dim liCurrentRow As Long
liCurrentRow = getCurrentRowInRange(GetBneInterfaceColNameOfRange(Me, ActiveCell))
For iCount = 0 To m_objHTMLDocument.all("BNE:FIELD").Length - 1
sName = m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("NAME")
FieldName = ParameterValue(":", sName, 2)
m_LOVFlag = True
Me.Range(m_InterfaceName & "_" & FieldName)(liCurrentRow).value = "'" & m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("VALUE")
m_LOVFlag = False
Next iCount
End Sub
Private Sub BneDFFProcessor()
On Error Resume Next
Dim iCount As Long
Dim iRow As Long
Dim Columns() As String
Dim sName As String
Dim FieldName As String
Dim liCurrentRow As Long
Dim CellPrefix As String
liCurrentRow = getCurrentRowInRange(GetBneInterfaceColNameOfRange(Me, ActiveCell))
For iCount = 0 To m_objHTMLDocument.all("BNE:FIELD").Length - 1
sName = m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("NAME")
FieldName = ParameterValue(":", sName, 2)
m_LOVFlag = True
CellPrefix = "'"
If FieldName = "" Then
If BneGetVBAInterfaceCol(m_InterfaceName & "_" & sName).DataType = 1 Then CellPrefix = ""
Me.Range(m_InterfaceName & "_" & sName)(getCurrentRowInRange(m_InterfaceName & "_" & sName)).value = _
CellPrefix & m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("VALUE")
Else
If BneGetVBAInterfaceCol(m_InterfaceName & "_" & FieldName).DataType = 1 Then CellPrefix = ""
Me.Range(m_InterfaceName & "_" & FieldName)(liCurrentRow).value = _
CellPrefix & m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("VALUE")
End If
m_LOVFlag = False
Next iCount
End Sub
Private Sub BneKDFFProcessor()
On Error Resume Next
Dim iCount As Long
Dim iRow As Long
Dim Columns() As String
Dim sName As String
Dim FieldName As String
Dim liCurrentRow As Long
liCurrentRow = getCurrentRowInRange(GetBneInterfaceColNameOfRange(Me, ActiveCell))
For iCount = 0 To m_objHTMLDocument.all("BNE:FIELD").Length - 1
sName = m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("NAME")
FieldName = ParameterValue(":", sName, 2)
m_LOVFlag = True
If FieldName = "" Then
Me.Range(m_InterfaceName & "_" & sName)(liCurrentRow).value = "'" & m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("VALUE")
Else
Me.Range(m_InterfaceName & "_" & FieldName)(liCurrentRow).value = "'" & m_objHTMLDocument.all("BNE:FIELD", iCount).getAttribute("VALUE")
End If
m_LOVFlag = False
Next iCount
End Sub
Private Sub BneCalendarProcessor()
On Error Resume Next
Dim lsInterfaceAndColName As String
Dim selectedName As String
Dim selectedValue As String
selectedName = m_objHTMLDocument.all("table-select-column").value
selectedValue = m_objHTMLDocument.all(selectedName).innerText
If m_objHTMLDocument.all(selectedName).value <> "" Then
selectedValue = m_objHTMLDocument.all(selectedName).value
End If
If selectedValue <> "" Then
lsInterfaceAndColName = m_InterfaceName & "_" & selectedName
m_LOVFlag = True
Me.Range(lsInterfaceAndColName)(getCurrentRowInRange(lsInterfaceAndColName)).value = selectedValue
m_LOVFlag = False
End If
End Sub
Public Sub BneSetTicketNumber(ticketNumber As Long)
m_TicketNumber = ticketNumber
End Sub
Public Function BneGetTicketNumber() As Long
BneGetTicketNumber = m_TicketNumber
End Function
Public Function BneGetGeneratedLanguage() As String
BneGetGeneratedLanguage = GENERATED_LANGUAGE
End Function
Public Function BneGetDocumentId() As String
BneGetDocumentId = BNE_DOCUMENT_ID
End Function
Public Function BneGetServletPath() As String
BneGetServletPath = SERVLET_PATH
End Function
Public Sub ClearContent()
Dim clsProperties As New BneVBAProperties
Dim clsProperty As New BneVBAProperty
Dim objSheet As Object
Set objSheet = FindFirstWorksheet(ThisWorkbook)
objSheet.Activate
Dim clsRowInserter As New BneRowInserter
clsRowInserter.Sheet = ActiveSheet
clsRowInserter.ResetSheet
Set clsRowInserter = Nothing
Set clsProperties = Nothing
Set clsProperty = Nothing
End Sub
Public Sub ReshowWindowsInTaskbar()
If Application.ShowWindowsInTaskbar = True Then
Application.ShowWindowsInTaskbar = False
Application.ShowWindowsInTaskbar = True
End If
End Sub
Public Function BneGetVBAInterfaceCol(sKey As String)
On Error Resume Next
Set BneGetVBAInterfaceCol = m_col_InterfaceCols(sKey)
If Err <> 0 Then
Err.Clear
BneInitializeInterfaceCols
Set BneGetVBAInterfaceCol = m_col_InterfaceCols(sKey)
If Err <> 0 Then
Set BneGetVBAInterfaceCol = Nothing
End If
End If
End Function
Public Function BneGetVBAInterfaceCols()
If m_col_InterfaceCols Is Nothing Then
BneInitializeInterfaceCols
End If
Set BneGetVBAInterfaceCols = m_col_InterfaceCols
End Function
Private Sub BneInitializeInterfaceCols_0(oColumn As BneVBAInterfaceCol, sKey As String)
Set oColumn = New BneVBAInterfaceCol
oColumn.InterfaceName = "GL_INTERFACE"
oColumn.ColumnName = "ACTUAL_FLAG"
oColumn.DataType = 2
oColumn.SequenceNumber = 10
oColumn.ApplicationId = 101
oColumn.InterfaceCode = "GL_INTERFACE_120"
oColumn.ReadOnly = True
oColumn.EditType = "null"
oColumn.PopListLOV = False
oColumn.PromptAbove = "Balance Type"
oColumn.PromptLeft = "Balance Type"
oColumn.DynamicDataType = False
oColumn.DefaultValue = "Actual"
oColumn.ValType = "TABLE"
oColumn.HintDisplayed = False
oColumn.Orientation = "HORIZONTAL"
sKey = "GL_INTERFACE_ACTUAL_FLAG"
m_col_InterfaceCols.add oColumn, sKey
Set oColumn = New BneVBAInterfaceCol
oColumn.InterfaceName = "GL_INTERFACE"
oColumn.ColumnName = "DATABASE"
oColumn.DataType = 0
oColumn.SequenceNumber = 20
oColumn.ApplicationId = 101
oColumn.InterfaceCode = "GL_INTERFACE_120"
oColumn.ReadOnly = True
oColumn.EditType = "null"
oColumn.PopListLOV = False
oColumn.PromptAbove = "Database"
oColumn.PromptLeft = "Database"
oColumn.DynamicDataType = False
oColumn.DefaultValue = "SSR2242.SBS.LOCAL.PRD213"
oColumn.HintDisplayed = False
oColumn.Orientation = "HORIZONTAL"
sKey = "GL_INTERFACE_DATABASE"
m_col_InterfaceCols.add oColumn, sKey
Set oColumn = New BneVBAInterfaceCol
oColumn.InterfaceName = "GL_INTERFACE"
oColumn.ColumnName = "ACCESS_SET_ID"
oColumn.DataType = 1
oColumn.SequenceNumber = 30
oColumn.ApplicationId = 101
oColumn.InterfaceCode = "GL_INTERFACE_120"
oColumn.ReadOnly = True
oColumn.EditType = "null"
oColumn.PopListLOV = False
oColumn.PromptAbove = "Data Access Set"
oColumn.PromptLeft = "Data Access Set"
oColumn.DynamicDataType = False
oColumn.DefaultValue = "SOB_RD8"
oColumn.ValType = "TABLE"
oColumn.HintDisplayed = False
oColumn.Orientation = "HORIZONTAL"
sKey = "GL_INTERFACE_ACCESS_SET_ID"
m_col_InterfaceCols.add oColumn, sKey
Set oColumn = New BneVBAInterfaceCol
oColumn.InterfaceName = "GL_INTERFACE"
oColumn.ColumnName = "USER_JE_SOURCE_NAME"
oColumn.DataType = 2
oColumn.SequenceNumber = 40
oColumn.ApplicationId = 101
oColumn.InterfaceCode = "GL_INTERFACE_120"
oColumn.ReadOnly = False
oColumn.EditType = "null"
oColumn.PopListLOV = False
oColumn.PromptAbove = "Source"
oColumn.PromptLeft = "Source"
oColumn.DynamicDataType = False
oColumn.DefaultValue = "Spreadsheet"
oColumn.ValType = "TABLE"
oColumn.ValComponent = "101:OA_SOURCE"
oColumn.HintDisplayed = False
oColumn.Orientation = "HORIZONTAL"
sKey = "GL_INTERFACE_USER_JE_SOURCE_NAME"
m_col_InterfaceCols.add oColumn, sKey
Set oColumn = New BneVBAInterfaceCol
oColumn.InterfaceName = "GL_INTERFACE"
oColumn.ColumnName = "CHART_OF_ACCOUNTS_ID"
oColumn.DataType = 1
oColumn.SequenceNumber = 50
oColumn.ApplicationId = 101
oColumn.InterfaceCode = "GL_INTERFACE_120"
oColumn.ReadOnly = True
oColumn.EditType = "null"
oColumn.PopListLOV = False
oColumn.PromptAbove = "Chart Of Accounts"
oColumn.PromptLeft = "Chart Of Accounts"
oColumn.DynamicDataType = False
oColumn.DefaultValue = "NHS_GL"
oColumn.ValType = "TABLE"
oColumn.HintDisplayed = False
oColumn.Orientation = "HORIZONTAL"
sKey = "GL_INTERFACE_CHART_OF_ACCOUNTS_ID"
m_col_InterfaceCols.add oColumn, sKey
Set oColumn = New BneVBAInterfaceCol
oColumn.InterfaceName = "GL_INTERFACE"
oColumn.ColumnName = "LEDGER_ID"
oColumn.DataType = 1
oColumn.SequenceNumber = 60
oColumn.ApplicationId = 101
oColumn.InterfaceCode = "GL_INTERFACE_120"
oColumn.ReadOnly = False
oColumn.EditType = "null"
oColumn.PopListLOV = False
oColumn.PromptAbove = "Ledger"
oColumn.PromptLeft = "Ledger"
oColumn.DynamicDataType = False
oColumn.DefaultValue = ""
oColumn.ValType = "TABLE"
oColumn.ValComponent = "101:GL_LEDGER_NAME"
oColumn.HintDisplayed = True
oColumn.Orientation = "HORIZONTAL"
sKey = "GL_INTERFACE_LEDGER_ID"
m_col_InterfaceCols.add oColumn, sKey
Set oColumn = New BneVBAInterfaceCol
oColumn.InterfaceName = "GL_INTERFACE"
oColumn.ColumnName = "USER_JE_CATEGORY_NAME"
oColumn.DataType = 2
oColumn.SequenceNumber = 70
oColumn.ApplicationId = 101
oColumn.InterfaceCode = "GL_INTERFACE_120"
oColumn.ReadOnly = False
oColumn.EditType = "null"
oColumn.PopListLOV = False
oColumn.PromptAbove = "Category"
oColumn.PromptLeft = "Category"
oColumn.DynamicDataType = False
oColumn.DefaultValue = ""
oColumn.ValType = "TABLE"
oColumn.ValComponent = "101:OA_CATEGORY"
oColumn.HintDisplayed = True
oColumn.Orientation = "HORIZONTAL"
sKey = "GL_INTERFACE_USER_JE_CATEGORY_NAME"
m_col_InterfaceCols.add oColumn, sKey
Set oColumn = New BneVBAInterfaceCol
oColumn.InterfaceName = "GL_INTERFACE"
oColumn.ColumnName = "CURRENCY_CODE"
oColumn.DataType = 2
oColumn.SequenceNumber = 80
oColumn.ApplicationId = 101
oColumn.InterfaceCode = "GL_INTERFACE_120"
oColumn.ReadOnly = False
oColumn.EditType = "null"
oColumn.PopListLOV = False
oColumn.PromptAbove = "Currency"
oColumn.PromptLeft = "Currency"
oColumn.DynamicDataType = False
oColumn.DefaultValue = ""
oColumn.ValType = "JAVA"
oColumn.ValComponent = "101:OA_CURRENCY_CODE"
oColumn.HintDisplayed = True
oColumn.Orientation = "HORIZONTAL"
sKey = "GL_INTERFACE_CURRENCY_CODE"
m_col_InterfaceCols.add oColumn, sKey
Set oColumn = New BneVBAInterfaceCol
oColumn.InterfaceName = "GL_INTERFACE"
oColumn.ColumnName = "ACCOUNTING_DATE"
oColumn.DataType = 3
oColumn.SequenceNumber = 90
oColumn.ApplicationId = 101
oColumn.InterfaceCode = "GL_INTERFACE_120"
oColumn.ReadOnly = False
oColumn.EditType = "null"
oColumn.PopListLOV = False
oColumn.PromptAbove = "Accounting Date"
oColumn.PromptLeft = "Accounting Date"
oColumn.DynamicDataType = False
oColumn.ValType = "JAVA"
oColumn.ValComponent = "101:OA_ACCOUNTING_DATE"
oColumn.HintDisplayed = True
oColumn.Orientation = "HORIZONTAL"
sKey = "GL_INTERFACE_ACCOUNTING_DATE"
m_col_InterfaceCols.add oColumn, sKey
Set oColumn = New BneVBAInterfaceCol
oColumn.InterfaceName = "GL_INTERFACE"
oColumn.ColumnName = "PERIOD_NAME"
oColumn.DataType = 2
oColumn.SequenceNumber = 100
oColumn.ApplicationId = 101
oColumn.InterfaceCode = "GL_INTERFACE_120"
oColumn.ReadOnly = False
oColumn.EditType = "null"
oColumn.PopListLOV = False
oColumn.PromptAbove = "Period"
oColumn.PromptLeft = "Period"
oColumn.DynamicDataType = False
oColumn.DefaultValue = ""
oColumn.ValType = "JAVA"
oColumn.ValComponent = "101:OA_PERIOD_NAME"
oColumn.HintDisplayed = True
oColumn.Orientation = "HORIZONTAL"
sKey = "GL_INTERFACE_PERIOD_NAME"
m_col_InterfaceCols.add oColumn, sKey
Set oColumn = New BneVBAInterfaceCol
oColumn.InterfaceName = "GL_INTERFACE"
oColumn.ColumnName = "GROUP_ID"
oColumn.DataType = 1
oColumn.SequenceNumber = 110
oColumn.ApplicationId = 101
oColumn.InterfaceCode = "GL_INTERFACE_120"
oColumn.ReadOnly = False
oColumn.EditType = "null"
oColumn.PopListLOV = False
oColumn.PromptAbove = "Group ID"
oColumn.PromptLeft = "Group ID"
oColumn.DynamicDataType = False
oColumn.HintDisplayed = True
oColumn.Orientation = "HORIZONTAL"
sKey = "GL_INTERFACE_GROUP_ID"
m_col_InterfaceCols.add oColumn, sKey
Set oColumn = New BneVBAInterfaceCol
oColumn.InterfaceName = "GL_INTERFACE"
oColumn.ColumnName = "REFERENCE4"
oColumn.DataType = 2
oColumn.SequenceNumber = 120
oColumn.ApplicationId = 101
oColumn.InterfaceCode = "GL_INTERFACE_120"
oColumn.ReadOnly = False
oColumn.EditType = "null"
oColumn.PopListLOV = False
oColumn.PromptAbove = "Journal Name"
oColumn.PromptLeft = "Journal Name"
oColumn.DynamicDataType = False
oColumn.DefaultValue = ""
oColumn.HintDisplayed = True
oColumn.Orientation = "HORIZONTAL"
sKey = "GL_INTERFACE_REFERENCE4"
m_col_InterfaceCols.add oColumn, sKey
Set oColumn = New BneVBAInterfaceCol
oColumn.InterfaceName = "GL_INTERFACE"
oColumn.ColumnName = "REFERENCE5"
oColumn.DataType = 2
oColumn.SequenceNumber = 130
oColumn.ApplicationId = 101
oColumn.InterfaceCode = "GL_INTERFACE_120"
oColumn.ReadOnly = False
oColumn.EditType = "null"
oColumn.PopListLOV = False
oColumn.PromptAbove = "Journal Description"
oColumn.PromptLeft = "Journal Description"
oColumn.DynamicDataType = False
oColumn.DefaultValue = ""
oColumn.HintDisplayed = True
oColumn.Orientation = "HORIZONTAL"
sKey = "GL_INTERFACE_REFERENCE5"
m_col_InterfaceCols.add oColumn, sKey
Set oColumn = New BneVBAInterfaceCol
oColumn.InterfaceName = "GL_INTERFACE"
oColumn.ColumnName = "REFERENCE7"
oColumn.DataType = 2
oColumn.SequenceNumber = 140
oColumn.ApplicationId = 101
oColumn.InterfaceCode = "GL_INTERFACE_120"
oColumn.ReadOnly = False
oColumn.EditType = "null"
oColumn.PopListLOV = True
oColumn.PromptAbove = "Reverse Journal"
oColumn.PromptLeft = "Reverse Journal"
oColumn.DynamicDataType = False
oColumn.DefaultValue = ""
oColumn.ValType = "TABLE"
oColumn.ValComponent = "101:OA_REVERSE_JOURNAL"
oColumn.HintDisplayed = True
oColumn.Orientation = "HORIZONTAL"
sKey = "GL_INTERFACE_REFERENCE7"
m_col_InterfaceCols.add oColumn, sKey
Set oColumn = New BneVBAInterfaceCol
oColumn.InterfaceName = "GL_INTERFACE"
oColumn.ColumnName = "REFERENCE8"
oColumn.DataType = 4
oColumn.SequenceNumber = 150
oColumn.ApplicationId = 101
oColumn.InterfaceCode = "GL_INTERFACE_120"
oColumn.ReadOnly = False
oColumn.EditType = "null"
oColumn.PopListLOV = False
oColumn.PromptAbove = "Reversal Period/Date"
oColumn.PromptLeft = "Reversal Period/Date"
oColumn.DynamicDataType = True
oColumn.DefaultValue = ""
oColumn.ValType = "JAVA"
oColumn.ValComponent = "101:OA_REVERSAL_DATE"
oColumn.HintDisplayed = True
oColumn.Orientation = "HORIZONTAL"
sKey = "GL_INTERFACE_REFERENCE8"
m_col_InterfaceCols.add oColumn, sKey
Set oColumn = New BneVBAInterfaceCol
oColumn.InterfaceName = "GL_INTERFACE"
oColumn.ColumnName = "ACCOUNT_FLEX_FIELD"
oColumn.DataType = 0
oColumn.SequenceNumber = 160
oColumn.ApplicationId = 101
oColumn.InterfaceCode = "GL_INTERFACE_120"
oColumn.ReadOnly = False
oColumn.EditType = "null"
oColumn.PopListLOV = False
oColumn.PromptAbove = "Account"
oColumn.PromptLeft = "Account"
oColumn.DynamicDataType = False
oColumn.DefaultValue = ""
oColumn.ValType = "KEYFLEX"
oColumn.ValComponent = "101:GL_FLEX"
oColumn.HintDisplayed = True
oColumn.Orientation = "VERTICAL"
sKey = "GL_INTERFACE_ACCOUNT_FLEX_FIELD"
m_col_InterfaceCols.add oColumn, sKey
End Sub
Private Sub BneInitializeInterfaceCols_1(oColumn As BneVBAInterfaceCol, sKey As String)
Set oColumn = New BneVBAInterfaceCol
oColumn.InterfaceName = "GL_INTERFACE"
oColumn.ColumnName = "SEGMENT1"
oColumn.DataType = 2
oColumn.SequenceNumber = 160
oColumn.ApplicationId = 101
oColumn.InterfaceCode = "GL_INTERFACE_120"
oColumn.ReadOnly = False
oColumn.EditType = "null"
oColumn.PopListLOV = False
oColumn.PromptAbove = "ENTITY"
oColumn.PromptLeft = "ENTITY"
oColumn.DynamicDataType = False
oColumn.DefaultValue = ""
oColumn.ValType = "KEYFLEX"
oColumn.ValComponent = "101:GL_FLEX"
oColumn.HintDisplayed = True
oColumn.Orientation = "VERTICAL"
sKey = "GL_INTERFACE_SEGMENT1"
m_col_InterfaceCols.add oColumn, sKey
Set oColumn = New BneVBAInterfaceCol
oColumn.InterfaceName = "GL_INTERFACE"
oColumn.ColumnName = "SEGMENT2"
oColumn.DataType = 2
oColumn.SequenceNumber = 161
oColumn.ApplicationId = 101
oColumn.InterfaceCode = "GL_INTERFACE_120"
oColumn.ReadOnly = False
oColumn.EditType = "null"
oColumn.PopListLOV = False
oColumn.PromptAbove = "COST CENTRE"
oColumn.PromptLeft = "COST CENTRE"
oColumn.DynamicDataType = False
oColumn.DefaultValue = ""
oColumn.ValType = "KEYFLEX"
oColumn.ValComponent = "101:GL_FLEX"
oColumn.HintDisplayed = True
oColumn.Orientation = "VERTICAL"
sKey = "GL_INTERFACE_SEGMENT2"
m_col_InterfaceCols.add oColumn, sKey
Set oColumn = New BneVBAInterfaceCol
oColumn.InterfaceName = "GL_INTERFACE"
oColumn.ColumnName = "SEGMENT3"
oColumn.DataType = 2
oColumn.SequenceNumber = 162
oColumn.ApplicationId = 101
oColumn.InterfaceCode = "GL_INTERFACE_120"
oColumn.ReadOnly = False
oColumn.EditType = "null"
oColumn.PopListLOV = False
oColumn.PromptAbove = "SUBJECTIVE"
oColumn.PromptLeft = "SUBJECTIVE"
oColumn.DynamicDataType = False
oColumn.DefaultValue = ""
oColumn.ValType = "KEYFLEX"
oColumn.ValComponent = "101:GL_FLEX"
oColumn.HintDisplayed = True
oColumn.Orientation = "VERTICAL"
sKey = "GL_INTERFACE_SEGMENT3"
m_col_InterfaceCols.add oColumn, sKey
Set oColumn = New BneVBAInterfaceCol
oColumn.InterfaceName = "GL_INTERFACE"
oColumn.ColumnName = "SEGMENT4"
oColumn.DataType = 2
oColumn.SequenceNumber = 163
oColumn.ApplicationId = 101
oColumn.InterfaceCode = "GL_INTERFACE_120"
oColumn.ReadOnly = False
oColumn.EditType = "null"
oColumn.PopListLOV = False
oColumn.PromptAbove = "ANALYSIS 1"
oColumn.PromptLeft = "ANALYSIS 1"
oColumn.DynamicDataType = False
oColumn.DefaultValue = ""
oColumn.ValType = "KEYFLEX"
oColumn.ValComponent = "101:GL_FLEX"
oColumn.HintDisplayed = True
oColumn.Orientation = "VERTICAL"
sKey = "GL_INTERFACE_SEGMENT4"
m_col_InterfaceCols.add oColumn, sKey
Set oColumn = New BneVBAInterfaceCol
oColumn.InterfaceName = "GL_INTERFACE"
oColumn.ColumnName = "SEGMENT5"
oColumn.DataType = 2
oColumn.SequenceNumber = 164
oColumn.ApplicationId = 101
oColumn.InterfaceCode = "GL_INTERFACE_120"
oColumn.ReadOnly = False
oColumn.EditType = "null"
oColumn.PopListLOV = False
oColumn.PromptAbove = "ANALYSIS 2"
oColumn.PromptLeft = "ANALYSIS 2"
oColumn.DynamicDataType = False
oColumn.DefaultValue = ""
oColumn.ValType = "KEYFLEX"
oColumn.ValComponent = "101:GL_FLEX"
oColumn.HintDisplayed = True
oColumn.Orientation = "VERTICAL"
sKey = "GL_INTERFACE_SEGMENT5"
m_col_InterfaceCols.add oColumn, sKey
Set oColumn = New BneVBAInterfaceCol
oColumn.InterfaceName = "GL_INTERFACE"
oColumn.ColumnName = "SEGMENT6"
oColumn.DataType = 2
oColumn.SequenceNumber = 165
oColumn.ApplicationId = 101
oColumn.InterfaceCode = "GL_INTERFACE_120"
oColumn.ReadOnly = False
oColumn.EditType = "null"
oColumn.PopListLOV = False
oColumn.PromptAbove = "SPARE"
oColumn.PromptLeft = "SPARE"
oColumn.DynamicDataType = False
oColumn.DefaultValue = ""
oColumn.ValType = "KEYFLEX"
oColumn.ValComponent = "101:GL_FLEX"
oColumn.HintDisplayed = True
oColumn.Orientation = "VERTICAL"
sKey = "GL_INTERFACE_SEGMENT6"
m_col_InterfaceCols.add oColumn, sKey
Set oColumn = New BneVBAInterfaceCol
oColumn.InterfaceName = "GL_INTERFACE"
oColumn.ColumnName = "ENTERED_DR"
oColumn.DataType = 1
oColumn.SequenceNumber = 170
oColumn.ApplicationId = 101
oColumn.InterfaceCode = "GL_INTERFACE_120"
oColumn.ReadOnly = False
oColumn.EditType = "null"
oColumn.PopListLOV = False
oColumn.PromptAbove = "Debit"
oColumn.PromptLeft = "Debit"
oColumn.DynamicDataType = False
oColumn.DefaultValue = ""
oColumn.HintDisplayed = True
oColumn.Orientation = "VERTICAL"
sKey = "GL_INTERFACE_ENTERED_DR"
m_col_InterfaceCols.add oColumn, sKey
Set oColumn = New BneVBAInterfaceCol
oColumn.InterfaceName = "GL_INTERFACE"
oColumn.ColumnName = "ENTERED_CR"
oColumn.DataType = 1
oColumn.SequenceNumber = 180
oColumn.ApplicationId = 101
oColumn.InterfaceCode = "GL_INTERFACE_120"
oColumn.ReadOnly = False
oColumn.EditType = "null"
oColumn.PopListLOV = False
oColumn.PromptAbove = "Credit"
oColumn.PromptLeft = "Credit"
oColumn.DynamicDataType = False
oColumn.DefaultValue = ""
oColumn.HintDisplayed = True
oColumn.Orientation = "VERTICAL"
sKey = "GL_INTERFACE_ENTERED_CR"
m_col_InterfaceCols.add oColumn, sKey
End Sub
Private Sub BneInitializeInterfaceCols_2(oColumn As BneVBAInterfaceCol, sKey As String)
Set oColumn = New BneVBAInterfaceCol
oColumn.InterfaceName = "GL_INTERFACE"
oColumn.ColumnName = "REFERENCE10"
oColumn.DataType = 2
oColumn.SequenceNumber = 190
oColumn.ApplicationId = 101
oColumn.InterfaceCode = "GL_INTERFACE_120"
oColumn.ReadOnly = False
oColumn.EditType = "null"
oColumn.PopListLOV = False
oColumn.PromptAbove = "Line Description"
oColumn.PromptLeft = "Line Description"
oColumn.DynamicDataType = False
oColumn.DefaultValue = ""
oColumn.HintDisplayed = True
oColumn.Orientation = "VERTICAL"
sKey = "GL_INTERFACE_REFERENCE10"
m_col_InterfaceCols.add oColumn, sKey
End Sub
Private Sub BneInitializeInterfaceCols()
On Error Resume Next
Set m_col_InterfaceCols = New Collection
Dim oColumn As BneVBAInterfaceCol
Dim sKey As String
BneInitializeInterfaceCols_0 oColumn, sKey
BneInitializeInterfaceCols_1 oColumn, sKey
BneInitializeInterfaceCols_2 oColumn, sKey
End Sub
Private Function UnionNullSafe(ParamArray Ranges() As Variant) As Range
Dim i As Long
Dim rangeResult As Range
For i = LBound(Ranges) To UBound(Ranges)
If IsObject(Ranges(i)) Then
If Not Ranges(i) Is Nothing Then
If TypeOf Ranges(i) Is Excel.Range Then
If Not rangeResult Is Nothing Then
Set rangeResult = Application.Union(rangeResult, Ranges(i))
Else
Set rangeResult = Ranges(i)
End If
End If
End If
End If
Next i
Set UnionNullSafe = rangeResult
End Function
Public Sub BneSelectionChange_EvaluateSelection()
On Error Resume Next
Dim Target As Range
Set Target = Selection
If (Application.CutCopyMode = False) Then
GoTo EndEvaluate
End If
If (m_PreviousSelection Is Nothing) Then
GoTo EndEvaluate
End If
If BneIsReadOnly(m_PreviousSelection, Me) Then
If Application.CutCopyMode = xlCut Then
GoTo EndEvaluateFalse
End If
End If
If (Intersect(m_PreviousSelection, Target) Is Nothing) Then
If Not (Cells(Target.Row, 1) = "m") Then
If Application.CutCopyMode = xlCut And BneIsReadOnly(m_PreviousSelection, Me) Then
GoTo EndEvaluateFalse
End If
If Application.CutCopyMode = xlCopy And BneIsReadOnly(Target, Me) Then
GoTo EndEvaluateFalse
End If
End If
Else
If Application.CutCopyMode = xlCopy And BneIsReadOnly(Target, Me) Then
GoTo EndEvaluateFalse
End If
End If
Set m_PreviousSelection = Target
Exit Sub
EndEvaluateFalse:
Application.CutCopyMode = False
EndEvaluate:
Set m_PreviousSelection = Target
End Sub
Private Sub Worksheet_Change(ByVal Target As Range)
Dim rowsInTarget As Long
Dim columnsInTarget As Long
Dim isProtected As Boolean
Dim i As Long
Dim linesRows As Long
Dim linesCols As Integer
Dim destLines As Range
Dim firstRealLineRow As Range
Dim prevsRow As Range
Dim extendedLine As Range
Dim contextRange As Range
Dim headerRange As Range
Dim isAllReadOnlyRowsNew As Boolean
On Error Resume Next
Set contextRange = ActiveSheet.Range("CONTEXT")
Set headerRange = ActiveSheet.Range("HEADER")
On Error GoTo ErrorHandler
isProtected = ActiveSheet.ProtectContents
rowsInTarget = Target.Rows.count
columnsInTarget = Target.Columns.count
linesCols = ActiveSheet.Range("LINE").Columns.count
linesRows = ActiveSheet.Range("LINE").Rows.count
Set extendedLine = ActiveSheet.Range("LINE").Resize(linesRows, linesCols + 1)
If BneIsReadOnly(Target, Me) And (Not (columnsInTarget = Cells.EntireRow.Columns.count)) Then
isAllReadOnlyRowsNew = True
For i = 0 To rowsInTarget - 1
If Not (Cells(Target.Row + i, 1).value = "m") Then
isAllReadOnlyRowsNew = False
Exit For
End If
Next i
If isAllReadOnlyRowsNew = False Then
MsgBox "Read-only fields cannot be changed.", vbCritical
Application.EnableEvents = False
Application.Undo
Application.EnableEvents = True
Exit Sub
End If
End If
If Not (contextRange Is Nothing And headerRange Is Nothing) Then
If (rowsInTarget = Cells.EntireColumn.Rows.count) And _
Not (Application.Intersect(UnionNullSafe(ActiveSheet.Range("$A:$A"), contextRange, headerRange, extendedLine), Target) Is Nothing) Then
Application.EnableEvents = False
Application.Undo
Application.EnableEvents = True
Exit Sub
End If
If (columnsInTarget = Cells.EntireRow.Columns.count) And _
(Not (Application.Intersect(UnionNullSafe(contextRange, headerRange), Target) Is Nothing)) Then
Application.EnableEvents = False
Application.Undo
Application.EnableEvents = True
Exit Sub
End If
End If
If (rowsInTarget = Cells.EntireColumn.Rows.count) And _
(Not (Application.Intersect(UnionNullSafe(ActiveSheet.Range("BNE_MESSAGES_LAMP"), _
ActiveSheet.Range("BNE_MESSAGES_HIDDEN"), _
ActiveSheet.Range("BNE_MESSAGES")), Target) Is Nothing)) Then
Application.EnableEvents = False
Application.Undo
Application.EnableEvents = True
Exit Sub
End If
If m_rowsInLines <> 0 And m_rowsInLines < ActiveSheet.Range("LINE").Rows.count Then
Application.EnableEvents = False
ActiveSheet.Unprotect
Set firstRealLineRow = ActiveSheet.Range("LINE").Offset(1).Resize(1)
If firstRealLineRow.Locked Then
Set firstRealLineRow = ActiveSheet.Range("LINE").Offset(2).Resize(1)
End If
Set prevsRow = Intersect(Target.Resize(1), ActiveSheet.Range("LINE"))
If firstRealLineRow.Row > prevsRow.Row Then
Application.Undo
Application.EnableEvents = True
Exit Sub
End If
On Error Resume Next
extendNamedRangeAndFormulas Target
On Error GoTo ErrorHandler
For i = 0 To rowsInTarget - 1
With Cells(Target.Row + i, 1)
.Font.name = "WingDings"
.value = "m"
.Font.Bold = True
.HorizontalAlignment = xlCenter
End With
Next i
setConstantsAndFormulas Target
If (isProtected) Then
ActiveSheet.Protect
End If
Application.EnableEvents = True
m_rowsInLines = ActiveSheet.Range("LINE").Rows.count
Exit Sub
End If
If (Not rowsInTarget = Cells.EntireColumn.Rows.count) Then
Application.EnableEvents = False
Call FlagRow(ActiveSheet, Target, ActiveSheet.Range("BNE_UPLOAD"), ActiveSheet.Range("BNE_MESSAGES_LAMP"))
Application.EnableEvents = True
End If
Exit Sub
ErrorHandler:
AddBneMsg BNE_ERROR, "Worksheet_Change", "Error: " & Err.Number & " " & Err.Description
Application.EnableEvents = True
End Sub
Private Sub Worksheet_SelectionChange(ByVal Target As Range)
On Error GoTo ErrorHandler
m_rowsInLines = ActiveSheet.Range("LINE").Rows.count
BneSelectionChange_EvaluateSelection
BneSelectionChange_Menus Target
Exit Sub
ErrorHandler:
AddBneMsg BNE_ERROR, "Worksheet_SelectionChange", "Error: " & Err.Number & " " & Err.Description
End Sub
Sub setConstantsAndFormulas(Target As Range)
Dim objInterfaceCols As Object
Dim intCnt As Integer
Dim objRange As Object
Dim myValue As String
Dim iRange As Range
Dim newValue As String
On Error GoTo 0
Application.EnableEvents = False
On Error Resume Next
Set objInterfaceCols = GetBneVBAInterfaceCols(ActiveSheet)
If objInterfaceCols Is Nothing Then Exit Sub
For intCnt = 1 To objInterfaceCols.count
Set objRange = Intersect(Target, ActiveSheet.Range(objInterfaceCols(intCnt).InterfaceName & "_" & objInterfaceCols(intCnt).ColumnName))
If Not objRange Is Nothing Then
If Not objInterfaceCols(intCnt).DefaultValue = "" Then
For Each iRange In objRange
myValue = iRange.value
newValue = objInterfaceCols(intCnt).DefaultValue
If (Len(myValue) = 0) Then
iRange.value = newValue
End If
Next iRange
End If
End If
Next intCnt
Application.EnableEvents = True
Exit Sub
End Sub
Private Sub extendNamedRangeAndFormulas(Target As Range)
Dim objName As name
Dim copyOffset As Long
Dim isFirstLastRow As Boolean
isFirstLastRow = False
If Target.Row = (ActiveSheet.Range("BNE_UPLOAD").Row + ActiveSheet.Range("BNE_UPLOAD").Rows.count) Then
copyOffset = -1
isFirstLastRow = True
ElseIf Target.Row = ActiveSheet.Range("BNE_UPLOAD").Row - 1 Then
copyOffset = 1
isFirstLastRow = True
End If
If isFirstLastRow Then
Target.Offset(copyOffset).Copy
Target.PasteSpecial xlPasteFormats
Target.Select
Dim iRowCount As Long
iRowCount = ActiveSheet.Range("BNE_UPLOAD").Rows.count + 1
Dim totalFormula As String
totalFormula = "=SUM(R[-" & iRowCount & "]C:R[-1]C)"
For Each objName In Me.Names
If InStr(objName.name, "LINE") <= 0 And (Not (Application.Intersect(ActiveSheet.Range("LINE"), objName.RefersToRange) Is Nothing)) Then
Dim newRegion As Range
Set newRegion = Application.Intersect(Target, objName.RefersToRange.EntireColumn)
Set newRegion = Application.Union(newRegion, objName.RefersToRange)
ActiveSheet.Names.add objName.name, newRegion, False
Dim lastcell As Range
Set lastcell = Cells(ActiveSheet.Range("LINE").Row + ActiveSheet.Range("LINE").Rows.count - 1, objName.RefersToRange.Column)
If lastcell.HasFormula Then
lastcell.FormulaR1C1 = totalFormula
lastcell.NumberFormat = "General"
End If
End If
Next objName
End If
End Sub

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Option Explicit
Option Base 1
Public Sub Workbook_Open()
On Error GoTo ErrorHandler
Dim i As Long
Dim clsProperties As New BneVBAProperties
clsProperties.removeProperty "ICX_SESSION_ID"
AddReferences
For i = 1 To ActiveWorkbook.Worksheets.count
On Error Resume Next
ActiveWorkbook.Worksheets(i).BneStartup
ActiveWorkbook.Worksheets(i).Activate
On Error GoTo 0
Next
ThisWorkbook.Saved = True
Exit Sub
ErrorHandler:
AddBneMsg BNE_ERROR, "Workbook_Open", "Error: " & Err.Number & " " & Err.Description
End Sub
Public Sub Workbook_Activate()
On Error GoTo ErrorHandler
AddReferences
ThisWorkbook.ActiveSheet.BneSheetActivate
Exit Sub
ErrorHandler:
AddBneMsg BNE_ERROR, "Workbook_Activate", "Error: " & Err.Number & " " & Err.Description
End Sub
Public Sub Workbook_Deactivate()
On Error Resume Next
ThisWorkbook.ActiveSheet.BneRemoveOracleMenu
End Sub
Public Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
On Error GoTo ErrorHandler
g_WorkbookSavedPreviously = ThisWorkbook.Saved
If g_WorkbookSavedPreviously = False And ThisWorkbook.FileFormat = xlExcel9795 Then
On Error Resume Next
Workbooks.Open ThisWorkbook.FullName, False, False, , , , , , , , False, , False
End If
Exit Sub
ErrorHandler:
AddBneMsg BNE_ERROR, "Workbook_BeforeSave", "Error: " & Err.Number & " " & Err.Description
End Sub
Public Sub AddReferences()
BneAddReference "VBIDE", "{0002E157-0000-0000-C000-000000000046}"
BneAddReference "MSForms", "{0D452EE1-E08F-101A-852E-02608C4D0BB4}"
BneAddReference "SHDocVw", "{EAB22AC0-30C1-11CF-A7EB-0000C05BAE0B}"
BneAddReference "MSHTML", "{3050F1C5-98B5-11CF-BB82-00AA00BDCE0B}"
BneAddReference "Office", "{2DF8D04C-5BFA-101B-BDE5-00AA0044DE52}"
BneAddReference "VBA", "{000204EF-0000-0000-C000-000000000046}"
BneAddReference "Excel", "{00020813-0000-0000-C000-000000000046}"
BneAddReference "stdole", "{00020430-0000-0000-C000-000000000046}"
BneAddReference "Scripting", "{420B2830-E718-11CF-893D-00A0C9054228}"
If BneGETMSXMLVersion() >= 3 _
And CInt(Left(Application.Version, (InStr(1, Application.Version & ".", ".") - 1))) >= 9 Then
BneAddReference "MSXML3", "{F5078F18-C551-11D3-89B9-0000F81FE221}"
End If
End Sub

Attribute VB_Name = "bneMain"

Option Explicit
Option Base 1
Global g_icxSessionID As String
Global g_blnCancelOperation As Boolean
Global g_WorkbookSavedPreviously As Boolean
Global g_nosOfRowsDownloaded As Long
Global g_commitEachRow As Boolean
Global g_lineFeedFound As Boolean
Dim m_Browser As Object
Dim m_ParentWorkBookName As String
Const TIME_ZONE_ID_UNKNOWN As Long = 1
Const TIME_ZONE_ID_STANDARD As Long = 1
Const TIME_ZONE_ID_DAYLIGHT As Long = 2
Const TIME_ZONE_ID_INVALID As Long = &HFFFFFFFF
Const BLOCKSIZE As Integer = 45
Const SERVLET_PATH = "https://nww.finsys.sbs.nhs.uk:4486/OA_HTML//"
Global g_uploadTimer As Double
Global Const UPLOAD_SESSION_TIMEOUT As Long = 180
Const TICKLE_URL = SERVLET_PATH & "BneUploaderService?bne:tickleSession=True"
Private Const PROCESS_ALL_ACCESS = &H1F0FFF
#If VBA7 Then
#If Win64 Then
Private Declare PtrSafe Function OpenProcess Lib "kernel32" (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As Long, ByVal dwProcessId As Long) As Long
#Else
Private Declare Function OpenProcess Lib "kernel32" (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As Long, ByVal dwProcessId As Long) As Long
#End If
#Else
Private Declare Function OpenProcess Lib "kernel32" (ByVal dwDesiredAccess As Long, ByVal bInheritHandle As Long, ByVal dwProcessId As Long) As Long
#End If
#If VBA7 Then
#If Win64 Then
Private Declare PtrSafe Function GetExitCodeProcess Lib "kernel32" (ByVal lnghProcess As Long, lpExitCode As Long) As Long
#Else
Private Declare Function GetExitCodeProcess Lib "kernel32" (ByVal lnghProcess As Long, lpExitCode As Long) As Long
#End If
#Else
Private Declare Function GetExitCodeProcess Lib "kernel32" (ByVal lnghProcess As Long, lpExitCode As Long) As Long
#End If
#If VBA7 Then
#If Win64 Then
Public Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (Destination As Any, Source As Any, ByVal Length As LongPtr)
#Else
Public Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (pDest As Any, pSource As Any, ByVal dwLength As Long)
#End If
#Else
Public Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (pDest As Any, pSource As Any, ByVal dwLength As Long)
#End If
#If VBA7 Then
#If Win64 Then
Declare PtrSafe Function LocalAlloc Lib "kernel32" (ByVal wFlags As Long, ByVal wBytes As LongPtr) As LongPtr
#Else
Public Declare Function LocalAlloc Lib "kernel32" (ByVal uFlags As Long, ByVal uBytes As Long) As Long
#End If
#Else
Public Declare Function LocalAlloc Lib "kernel32" (ByVal uFlags As Long, ByVal uBytes As Long) As Long
#End If
#If VBA7 Then
#If Win64 Then
Declare PtrSafe Function LocalFree Lib "kernel32" (ByVal hMem As LongPtr) As LongPtr
#Else
Public Declare Function LocalFree Lib "kernel32" (ByVal hMem As Long) As Long
#End If
#Else
Public Declare Function LocalFree Lib "kernel32" (ByVal hMem As Long) As Long
#End If
#If VBA7 Then
#If Win64 Then
Public Declare PtrSafe Function GetLogicalDriveStrings Lib "kernel32.dll" (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long
#Else
Public Declare Function GetLogicalDriveStrings Lib "kernel32.dll" (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long
#End If
#Else
Public Declare Function GetLogicalDriveStrings Lib "kernel32.dll" (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long
#End If
Public Const LPTR = (&H0 Or &H40)
Public Type SYSTEMTIME
wYear         As Integer
wMonth        As Integer
wDayOfWeek    As Integer
wDay          As Integer
wHour         As Integer
wMinute       As Integer
wSecond       As Integer
wMilliseconds As Integer
End Type
Public Type TIME_ZONE_INFORMATION
Bias As Long
StandardName(0 To ((32 * 2) - 1)) As Byte  'unicode
StandardDate As SYSTEMTIME
StandardBias As Long
DaylightName(0 To ((32 * 2) - 1)) As Byte  'unicode
DaylightDate As SYSTEMTIME
DaylightBias As Long
End Type
#If VBA7 Then
#If Win64 Then
Declare PtrSafe Function GetTimeZoneInformation Lib "kernel32" (lpTimeZoneInformation As TIME_ZONE_INFORMATION) As Long
#Else
Public Declare Function GetTimeZoneInformation Lib "kernel32" (lpTimeZoneInformation As TIME_ZONE_INFORMATION) As Long
#End If
#Else
Public Declare Function GetTimeZoneInformation Lib "kernel32" (lpTimeZoneInformation As TIME_ZONE_INFORMATION) As Long
#End If
#If VBA7 Then
#If Win64 Then
Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#Else
Public Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#End If
#Else
Public Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
#End If
#If VBA7 Then
#If Win64 Then
Declare PtrSafe Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As LongPtr, ByVal lpOperation As String, ByVal lpFile As String, ByVal lpParameters As String, ByVal lpDirectory As String, ByVal nShowCmd As Long) As LongPtr
#Else
Public Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As Long, ByVal lpOperation As String, ByVal lpFile As String, ByVal lpParameters As String, ByVal lpDirectory As String, ByVal nShowCmd As Long) As Long
#End If
#Else
Public Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As Long, ByVal lpOperation As String, ByVal lpFile As String, ByVal lpParameters As String, ByVal lpDirectory As String, ByVal nShowCmd As Long) As Long
#End If
Public Const SW_SHOW = 5
Public Function isShellRunning(ByVal ShellReturnValue As Long) As Boolean
Dim lnghProcess As Long
Dim lExitCode As Long
lnghProcess = OpenProcess(PROCESS_ALL_ACCESS, 0&, ShellReturnValue)
If lnghProcess <> 0 Then
GetExitCodeProcess lnghProcess, lExitCode
If lExitCode <> 0 Then
isShellRunning = True
Else
isShellRunning = False
End If
End If
End Function
Public Sub FreeMemory(PointerA As Long)
LocalFree PointerA
End Sub
Public Function RetMemory(PointerA As Long) As String
Dim lSize As Long, sThis As String
If PointerA = 0 Then
Else
CopyMemory lSize, ByVal PointerA, 4
If lSize > 0 Then
sThis = String(lSize \ 2, 0)
CopyMemory ByVal StrPtr(sThis), ByVal PointerA + 4, lSize
RetMemory = sThis
End If
End If
End Function
Public Function malloc(Strin As String) As Long
Dim PointerA As Long, lSize As Long
lSize = LenB(Strin)
PointerA = LocalAlloc(LPTR, lSize + 4)
If PointerA <> 0 Then
CopyMemory ByVal PointerA, lSize, 4
If lSize > 0 Then
CopyMemory ByVal PointerA + 4, ByVal StrPtr(Strin), lSize
End If
End If
malloc = PointerA
End Function
Public Sub GetUploadRows(LayoutSheet As Worksheet, ByRef UploadRows As Variant, ByRef FlaggedRows() As Long, FlaggedRowsOnly As Boolean, Optional NotEmptyRows As Boolean = False)
Dim lRowCount As Long
Dim lCounter As Long
If FlaggedRowsOnly Then
lRowCount = 0
For lCounter = 1 To UBound(UploadRows)
If UploadRows(lCounter, 1) = "O" Then
lRowCount = lRowCount + 1
ReDim Preserve FlaggedRows(1 To lRowCount)
FlaggedRows(lRowCount) = lCounter
End If
Next lCounter
Else
ReDim FlaggedRows(1 To UBound(UploadRows))
Dim UploadRange As Range
Dim MessageRange As Range
Dim RowOffset As Long
Dim ColumnOffset As Long
Dim ColumnCount As Long
Set UploadRange = LayoutSheet.Range("BNE_UPLOAD")
Set MessageRange = LayoutSheet.Range("BNE_MESSAGES_LAMP")
RowOffset = UploadRange.Row
ColumnOffset = UploadRange.Column
ColumnCount = MessageRange.Column
lRowCount = 0
For lCounter = 1 To UBound(UploadRows)
If NotEmptyRows Then
If IsRowEmpty(LayoutSheet, lCounter, RowOffset, ColumnOffset, ColumnCount) = False And UploadRows(lCounter, 1) <> "x" Then
lRowCount = lRowCount + 1
ReDim Preserve FlaggedRows(1 To lRowCount)
FlaggedRows(lRowCount) = lCounter
End If
Else
FlaggedRows(lCounter) = lCounter
End If
Next lCounter
End If
End Sub
Public Sub SetSessionID(sSessionID As String)
g_icxSessionID = sSessionID
End Sub
Public Function getTimeZoneOffset() As Long
Dim tzi As TIME_ZONE_INFORMATION: Dim zoneOffset As Long: Dim result As Long
result = GetTimeZoneInformation(tzi)
zoneOffset = tzi.Bias
getTimeZoneOffset = zoneOffset
End Function
Public Sub SetWebBrowser(objBrowser As Object)
Set m_Browser = objBrowser
End Sub
Public Function GetWebBrowser()
Set GetWebBrowser = m_Browser
End Function
Public Sub setParentWorkBookName(parentDocumentName As String)
m_ParentWorkBookName = parentDocumentName
End Sub
Public Function getParentWorkBookName()
getParentWorkBookName = m_ParentWorkBookName
End Function
Public Function createDOMDocument() As Object
On Error Resume Next
Dim newDocument As Object
Set newDocument = CreateObject("MSXML2.DOMDocument")
If Err Then
Set newDocument = CreateObject("MSXML.DOMDocument")
End If
Set createDOMDocument = newDocument
End Function
Public Function postDocument(sURL As String, sNameValueList As String)
Dim objXMLhttp As Object
Dim sContent As String
Dim sMsg As String
On Error Resume Next
Set objXMLhttp = CreateObject("MSXML2.XMLHTTP")
If Err <> 0 Then
Err.Clear
Set objXMLhttp = CreateObject("Microsoft.XMLHTTP")
If Err <> 0 Then
sMsg = "Unable to create program object Microsoft.XMLHTTP.  Ensure you are running IE 5.0 or greater and have installed the  viewer you selected in the Create Document Page Flow."
MsgBox (sMsg)
End If
End If
On Error GoTo 0
objXMLhttp.Open "POST", sURL, False
objXMLhttp.setRequestHeader "Content-Type", "application/x-www-form-urlencoded"
On Error GoTo ErrorHandler
objXMLhttp.send (sNameValueList)
Set postDocument = objXMLhttp.responseXML
On Error GoTo 0
Exit Function
ErrorHandler:
MsgBox "Load Data: " & Err.Number & " - " & Err.Source & "( " & Err.Description & " ) ", vbCritical, "Message"
Set postDocument = Nothing
End Function
Public Function ParseLoadErrors(XMLError As Object) As String
Dim strErr As String
Dim m_parseError As Object
Set m_parseError = XMLError
With XMLError
strErr = "Error: " + CStr(.ErrorCode) + " in "
strErr = strErr + " <" & .URL & ">"
strErr = strErr + vbCrLf + "Position: line=" + CStr(.Line) + " linepos=" + CStr(.linepos) + " filepos=" + CStr(.filepos)
strErr = strErr + vbCrLf + "Reason: " + .reason
strErr = strErr + IIf(Len(.srcText) > 0, vbCrLf + "Source: " + .srcText, "")
End With
ParseLoadErrors = strErr
End Function
Public Function CellValue(c)
Application.Volatile
Select Case True
Case isEmpty(c): CellValue = ""
Case Application.IsText(c): CellValue = c.value
Case Application.IsLogical(c): CellValue = c.value
Case Application.IsErr(c): CellValue = c.value
Case IsDate(c): CellValue = c.value
Case InStr(1, c.text, ":") <> 0: CellValue = c.value
Case IsNumeric(c): CellValue = c.value
End Select
End Function
Public Function RowDifference(rRange As Range, rIntersect As Range) As Long
RowDifference = (rIntersect.Row - rRange.Row + 1)
End Function
Public Function GetBneNameOfRange(loSheet, loRng As Range) As String
Dim loName As name
Dim lsName As String
For Each loName In loSheet.Names
If loRng.Parent.name = loName.RefersToRange.Parent.name Then
If Not Application.Intersect(loRng, loName.RefersToRange) Is Nothing Then
lsName = StripSheetName(loName.name)
If Left(lsName, 4) = "BNE_" Then
GetBneNameOfRange = StripSheetName(loName.name)
Exit Function
End If
End If
End If
Next loName
GetBneNameOfRange = ""
End Function
Public Function GetBneInterfaceColNameOfRange(loSheet, loRng As Range) As String
Dim loName As name
Dim lsName As String
For Each loName In loSheet.Names
If loRng.Parent.name = loName.RefersToRange.Parent.name Then
If Not Application.Intersect(loRng, loName.RefersToRange) Is Nothing Then
lsName = StripSheetName(loName.name)
If Not loSheet.BneGetVBAInterfaceCol(lsName) Is Nothing Then
GetBneInterfaceColNameOfRange = StripSheetName(lsName)
Exit Function
End If
End If
End If
Next loName
GetBneInterfaceColNameOfRange = ""
End Function
Public Function GetBneVBAInterfaceColByName(loSheet, strNameRng As String) As BneVBAInterfaceCol
On Error Resume Next
Dim strName As String
strName = StripSheetName(strNameRng)
Set GetBneVBAInterfaceColByName = loSheet.BneGetVBAInterfaceCol(strName)
End Function
Public Function GetBneVBAInterfaceColForRange(loSheet, loRng As Range) As BneVBAInterfaceCol
Dim loName As name
Dim lsName As String
For Each loName In loSheet.Names
If loRng.Parent.name = loName.RefersToRange.Parent.name Then
If Not Application.Intersect(loRng, loName.RefersToRange) Is Nothing Then
lsName = StripSheetName(loName.name)
If Not loSheet.BneGetVBAInterfaceCol(lsName) Is Nothing Then
Set GetBneVBAInterfaceColForRange = loSheet.BneGetVBAInterfaceCol(lsName)
Exit Function
End If
End If
End If
Next loName
Set GetBneVBAInterfaceColForRange = Nothing
End Function
Public Function GetBneVBAInterfaceCols(loSheet) As Object
Set GetBneVBAInterfaceCols = loSheet.BneGetVBAInterfaceCols
End Function
Public Function StripSheetName(strName As String) As String
Dim intPos
intPos = InStr(strName, "!")
If intPos > 0 Then
StripSheetName = Mid(strName, intPos + 1)
Else
StripSheetName = strName
End If
End Function
Public Sub CONTEXTShowRegions()
Dim objContextRange As Range
Dim blnProtect As Boolean
On Error Resume Next
blnProtect = ActiveSheet.ProtectContents
ActiveSheet.Unprotect
Set objContextRange = ActiveSheet.Range("CONTEXT")
If Not objContextRange Is Nothing Then
objContextRange.Rows.Hidden = Not objContextRange.Rows.Hidden
End If
If blnProtect Then
ActiveSheet.Protect
End If
End Sub
Public Sub HEADERShowRegions()
Dim objContextRange As Range
Dim blnProtect As Boolean
On Error Resume Next
blnProtect = ActiveSheet.ProtectContents
ActiveSheet.Unprotect
Set objContextRange = ActiveSheet.Range("HEADER")
If Not objContextRange Is Nothing Then
objContextRange.Rows.Hidden = Not objContextRange.Rows.Hidden
End If
If blnProtect Then
ActiveSheet.Protect
End If
End Sub
Public Sub LINEShowRegions()
Dim objContextRange As Range
Dim blnProtect As Boolean
On Error Resume Next
blnProtect = ActiveSheet.ProtectContents
ActiveSheet.Unprotect
Set objContextRange = ActiveSheet.Range("LINE")
If Not objContextRange Is Nothing Then
objContextRange.Rows.Hidden = Not objContextRange.Rows.Hidden
End If
If blnProtect Then
ActiveSheet.Protect
End If
End Sub
Public Sub FlagRow(LayoutSheet As Worksheet, TargetRange As Range, UploadRange As Range, MessagesRange As Range)
On Error Resume Next
Dim KeyCells As Range: Dim StartRow As Long: Dim StartCol As Integer
Dim TotalLines As Long: Dim TotalCol As Integer: Dim EndRow As Long: Dim EndCol As Long
Dim rowCnt As Long: Dim colCnt As Long: Dim rowHasData As Boolean
Static isRunning As Boolean
If isRunning = True Then
isRunning = False
Exit Sub
End If
isRunning = True
If Not Application.Intersect(UploadRange, Range(TargetRange.Address)) Is Nothing Then
If TargetRange.Rows.count = 1 Then
If Len(TargetRange.value) > 0 Then
LayoutSheet.Cells(TargetRange.Row, 2).value = "O"
End If
End If
isRunning = False
Exit Sub
End If
Call BneProcessingBegin 'Disables events/screen updates etc.
StartRow = UploadRange.Row: StartCol = UploadRange.Column + 1
TotalLines = MessagesRange.Rows.count: TotalCol = MessagesRange.Columns.count
EndRow = MessagesRange.Cells(TotalLines, TotalCol).Row: EndCol = MessagesRange.Cells(TotalLines, TotalCol).Column - 1
Set KeyCells = Range(LayoutSheet.Cells(StartRow, StartCol), LayoutSheet.Cells(EndRow, EndCol))
If Not Application.Intersect(KeyCells, Range(TargetRange.Address)) Is Nothing Then
For rowCnt = TargetRange.Row To TargetRange.Row + (TargetRange.Rows.count - 1)
If LayoutSheet.Cells(rowCnt, UploadRange.Column).RowHeight > 0 Then
rowHasData = False
For colCnt = KeyCells.Column To KeyCells.Column + (KeyCells.Columns.count - 1)
If Len(LayoutSheet.Cells(rowCnt, colCnt).value) > 0 Then
rowHasData = True
Exit For
End If
Next
If LayoutSheet.Cells(rowCnt, UploadRange.Column).value <> "x" Then
If rowHasData Then
LayoutSheet.Cells(rowCnt, UploadRange.Column).value = "O"
Else
LayoutSheet.Cells(rowCnt, UploadRange.Column).value = ""
End If
End If
End If
Next
End If
Call BneProcessingEnd 'Enables events/screen updates etc.
isRunning = False
End Sub
Public Function getCurrentRow() As Long
getCurrentRow = RowDifference(Range(GetBneInterfaceColNameOfRange(ActiveSheet, Range(ActiveCell.Address))), Range(ActiveCell.Address))
End Function
Public Function getCurrentRowInRange(lsRangeName As String) As Long
getCurrentRowInRange = RowDifference(Range(lsRangeName), Range(ActiveCell.Address))
End Function
Public Sub AddComment(Item As Object, causeText As String, actionText As String)
On Error Resume Next
Dim sNoteText As String
Dim strCommentTitle As String
Dim strCommentCause As String
Dim strCommentAction As String
If Item.Comment Is Nothing Then
strCommentTitle = "Messages"
strCommentCause = "Cause: &CAUSE"
strCommentAction = "Action: &ACTION"
Item.Select
Item.AddComment
Item.Comment.Visible = False
Item.Comment.Shape.Fill.BackColor.RGB = RGB(255, 0, 0)
Item.Comment.Shape.TextFrame.AutoMargins = True
Item.Comment.Shape.ScaleWidth 2.5, msoFalse, msoScaleFromTopLeft
Item.Comment.Shape.ScaleHeight 1.5, msoFalse, msoScaleFromTopLeft
sNoteText = strCommentTitle & vbCrLf
If Len(causeText) Then sNoteText = sNoteText & Replace(strCommentCause, "&CAUSE", causeText) & vbCrLf
If Len(actionText) Then sNoteText = sNoteText & Replace(strCommentAction, "&ACTION", actionText) & vbCrLf
Item.Comment.text text:=sNoteText
End If
End Sub
Public Sub DeleteComments(LayoutSheet As Worksheet)
On Error Resume Next
Dim objComment As Comment
For Each objComment In LayoutSheet.Comments
If objComment.Shape.Fill.BackColor.RGB = RGB(255, 0, 0) Then
objComment.Delete
End If
Next
End Sub
Public Sub BNEArray(BNEArray(), ErrorArray(), RowOffset, ColumnOffset, Rows, Columns, objSheet, FlaggedRows() As Long)
Dim NumberFormat As String
Dim CellPrefixCharacter As String
Dim Row As Long
Dim col As Integer
Dim objCol As Object
Dim arrColDataTypes() As Integer
Dim sRangeName As String
Dim iColDataType As Integer
Dim vCellValue As Variant
RowOffset = RowOffset - 1
ColumnOffset = ColumnOffset - 1
Rows = UBound(FlaggedRows)
ReDim BNEArray(Rows, Columns)
ReDim ErrorArray(Rows, Columns)
ReDim arrColDataTypes(Columns)
For col = 1 To Columns
sRangeName = GetBneInterfaceColNameOfRange(objSheet, Cells(RowOffset + 1, ColumnOffset + col))
Set objCol = objSheet.BneGetVBAInterfaceCol(sRangeName)
If Not objCol Is Nothing Then
arrColDataTypes(col) = objCol.DataType
Else
arrColDataTypes(col) = 2
End If
Next col
Dim Counter As Long
For Counter = 1 To UBound(BNEArray, 1)
Row = FlaggedRows(Counter)
If Row > 0 Then 'Row will be zero if no flagged rows in document
For col = 1 To UBound(BNEArray, 2)
vCellValue = Cells(RowOffset + Row, ColumnOffset + col).value
If VarType(vCellValue) = vbError Then
vCellValue = "UPL_ER_COLUMN_INVALID"
ErrorArray(Row, col) = vCellValue
Else
NumberFormat = Cells(RowOffset + Row, ColumnOffset + col).NumberFormat
CellPrefixCharacter = Cells(RowOffset + Row, ColumnOffset + col).PrefixCharacter
iColDataType = arrColDataTypes(col)
On Error Resume Next
Select Case iColDataType
Case 3
BNEArray(Counter, col) = Format(Cells(RowOffset + Row, ColumnOffset + col).value, "yyyy-MM-dd")
Case 1
BNEArray(Counter, col) = Cells(RowOffset + Row, ColumnOffset + col).value
Case Else
If Application.WorksheetFunction.IsText(Cells(RowOffset + Row, ColumnOffset + col).value) Or NumberFormat = "" Or NumberFormat = "@" Or Left(NumberFormat, 1) = "#" Or NumberFormat = "General" Or CellPrefixCharacter = "'" Then
BNEArray(Counter, col) = Cells(RowOffset + Row, ColumnOffset + col).value
Else
BNEArray(Counter, col) = Format(Cells(RowOffset + Row, ColumnOffset + col).value, NumberFormat)
End If
End Select
If Err <> 0 Then
BNEArray(Counter, col) = Cells(RowOffset + Row, ColumnOffset + col).value
End If
End If
On Error GoTo 0
Next col
End If
Next Counter
End Sub
Public Function ColumnValue(Sheet As Worksheet, ColumnName As String)
On Error Resume Next
Dim NumberFormat As String
Dim ValueRange As Range
Set ValueRange = Range(ColumnName)
If ValueRange.count = 1 Then
NumberFormat = ValueRange(1).NumberFormat
ColumnValue = ValueRange(1).value
If Not (Application.WorksheetFunction.IsText(ColumnValue) Or NumberFormat = "" Or NumberFormat = "General" Or NumberFormat = "@" Or ValueRange(1).PrefixCharacter <> "") Then
ColumnValue = Format(ValueRange(1).value, NumberFormat)
End If
Else
NumberFormat = ValueRange(getCurrentRowInRange(ColumnName)).NumberFormat
ColumnValue = ValueRange(getCurrentRowInRange(ColumnName)).value
If Not (Application.WorksheetFunction.IsText(ColumnValue) Or NumberFormat = "" Or NumberFormat = "General" Or NumberFormat = "@" Or ValueRange(getCurrentRowInRange(ColumnName)).PrefixCharacter <> "") Then
ColumnValue = Format(ValueRange(getCurrentRowInRange(ColumnName)).value, NumberFormat)
End If
End If
End Function
Public Function ColumnDateValue(Sheet As Worksheet, ColumnName As String, DateFormat As String)
On Error GoTo ErrorHandler
Dim ValueRange As Range
Dim strValue As String
Set ValueRange = Sheet.Range(ColumnName)
If ValueRange.count = 1 Then
strValue = ValueRange(1).value
Else
strValue = ValueRange(getCurrentRowInRange(ColumnName)).value
End If
On Error Resume Next
ColumnDateValue = Format(strValue, DateFormat)
If Err <> 0 Then
ColumnDateValue = strValue
End If
ErrorHandler:
End Function
Public Sub setColumnValue(Sheet As Worksheet, InterfaceName As String, ColumnName As String, StartRow As Long, ParamArray Data() As Variant)
Dim rngValue As Range
Dim rngUpload As Range
Set rngValue = Sheet.Range(InterfaceName & "_" & ColumnName)
If rngValue.count = 1 Then
rngValue.value = Data(0)
Else
If StartRow < rngValue.count Then
rngValue(StartRow).value = Data(0)
Else
Set rngUpload = Sheet.Rows(Sheet.Range("BNE_UPLOAD").Row + StartRow - 1)
Sheet.Unprotect
rngUpload.Insert xlDown
Sheet.Protect
rngValue(StartRow).value = Data(0)
End If
End If
End Sub
Public Function URLValue(parameterName As String, ParameterValue As String)
URLValue = "&" & UrlEncodeUtf8(parameterName & "=" & ParameterValue)
End Function
Public Function URLFieldValue(Sheet As Worksheet, ColumnName As String)
URLFieldValue = "&" & UrlEncodeUtf8("field:" & ColumnName & "=" & ColumnValue(Sheet, ColumnName))
End Function
Public Function URLsetFieldValue(ColumnName As String, ColumnValue As String)
URLsetFieldValue = "&" & UrlEncodeUtf8("field:" & ColumnName & "=" & ColumnValue)
End Function
Public Function ParameterValue(ParseCharacter As String, _
tString As Variant, _
Index As Integer) As String
Dim CurrentPosition As Integer
Dim ParseToPosition As Integer
Dim CurrentToken As Integer
Dim TempString As String
TempString = Trim(tString) + ParseCharacter
If Len(TempString) = 1 Then Exit Function
CurrentPosition = 1
CurrentToken = 1
Do
ParseToPosition = InStr(CurrentPosition, TempString, _
ParseCharacter)
If Index = CurrentToken Then
ParameterValue = Mid$(TempString, CurrentPosition, _
ParseToPosition - CurrentPosition)
Exit Function
End If
CurrentToken = CurrentToken + 1
CurrentPosition = ParseToPosition + 1
Loop Until (CurrentPosition >= Len(TempString))
End Function
Public Function ParameterCount(ParseCharacter As String, _
tString As Variant) As Integer
Dim CurrentPosition As Integer
Dim ParseToPosition As Integer
Dim CurrentToken As Integer
Dim TempString As String
TempString = Trim(tString) + ParseCharacter
If Len(TempString) = 1 Then Exit Function
CurrentPosition = 1
CurrentToken = 1
Do
ParseToPosition = InStr(CurrentPosition, TempString, _
ParseCharacter)
CurrentToken = CurrentToken + 1
CurrentPosition = ParseToPosition + 1
Loop Until (CurrentPosition >= Len(TempString))
ParameterCount = CurrentToken - 1
End Function
Public Sub MoveToLinesBlock(objSheet As Worksheet)
Dim objLinesRng As Range
Dim objDefinedName As name
Dim objIntersectRng As Range
Dim objNamedRng As Range
Dim objActiveSheet As Worksheet
On Error Resume Next
Set objActiveSheet = ActiveSheet
Set objLinesRng = objSheet.Names("LINE").RefersToRange
For Each objDefinedName In objSheet.Names
Set objNamedRng = objDefinedName.RefersToRange
Set objIntersectRng = Intersect(objNamedRng, objLinesRng)
If Not objNamedRng.Locked And Not objIntersectRng Is Nothing Then
objSheet.Activate
objSheet.Cells(objNamedRng.Rows(1).Row, objNamedRng.Columns(1).Column).Select
objActiveSheet.Activate
Exit Sub
End If
Next
End Sub
Public Function IsRangeEmpty(objSheet As Worksheet, checkRange As Range) As Boolean
Dim rowStart, rowsIndex, columnStart, columnsIndex As Long
rowStart = checkRange.Rows.Row - 1
columnStart = checkRange.Columns.Column - 1
For rowsIndex = 1 To checkRange.Rows.count
For columnsIndex = 1 To checkRange.Columns.count
If objSheet.Cells(rowsIndex + rowStart, columnsIndex + columnStart).text <> "" Then
IsRangeEmpty = False
Exit Function
End If
Next columnsIndex
Next rowsIndex
IsRangeEmpty = True
End Function
Public Function IsRowEmpty(Sheet As Worksheet, ByVal rowIndex As Long, ByVal RowOffset As Long, ByVal ColumnOffset As Long, ByVal Columns As Integer) As Boolean
IsRowEmpty = IsRangeEmpty(Sheet, Range(Cells(RowOffset + rowIndex - 1, ColumnOffset), Cells(RowOffset + rowIndex - 1, ColumnOffset + Columns - 1)))
End Function
Public Function IsArrayRowEmpty(BNEArray(), ByRef rowIndex As Long) As Boolean
Dim col As Integer
For col = 1 To UBound(BNEArray, 2)
If BNEArray(rowIndex, col) <> "" Then
IsArrayRowEmpty = False
Exit Function
End If
Next col
IsArrayRowEmpty = True
End Function
Public Sub BneFormatButton(myButton As Object, bPlacement As Variant)
On Error Resume Next
With myButton.Font
.name = "Arial"
.FontStyle = "Bold"
.size = 8
.Strikethrough = False
.Superscript = False
.Subscript = False
.OutlineFont = False
.Shadow = False
.Underline = xlNone
.ColorIndex = xlAutomatic
End With
With myButton
.HorizontalAlignment = xlCenter
.VerticalAlignment = xlCenter
.Orientation = xlHorizontal
.AutoSize = False
.Placement = bPlacement
.PrintObject = False
End With
End Sub
Public Sub setColumnValueArray(Sheet As Worksheet, InterfaceName As String, ColumnName As String, Data As Variant, DataRows As Long)
Dim oValueRange  As Range
Dim oInsertRange  As Range
Dim nRangeLength As Long
Dim nInsert As Long
Dim bProtection As Boolean
On Error GoTo ErrorHandle:
Set oValueRange = Sheet.Range(InterfaceName & "_" & ColumnName)
nRangeLength = oValueRange.count
If nRangeLength > 1 Then
If nRangeLength < DataRows Then
Set oInsertRange = Sheet.Rows(oValueRange.Row + 1)
bProtection = Sheet.ProtectContents
Sheet.Unprotect
oInsertRange.Offset(1, 0).EntireRow.Resize(DataRows - nRangeLength).Insert
If bProtection Then Sheet.Protect
End If
End If
oValueRange.value = Data
ErrorHandle:
End Sub
Public Function UrlEncodeUtf8(ByRef strSource As String) As String
Dim lngSourceLength As Long
Dim strBuffer As String
Dim strSingleHex As String
Dim lngWriteLength As Long
Dim intCharCode As Integer
Dim lngCharCode As Long
Dim lngCnt As Long
lngSourceLength = Len(strSource)
If Not CBool(lngSourceLength) Then Exit Function
strBuffer = String$(lngSourceLength * 9, vbNullChar)
strSingleHex = "%00"
lngWriteLength = 1
For lngCnt = 1 To lngSourceLength Step 1
intCharCode = AscW(Mid$(strSource, lngCnt, 1))
If intCharCode < 0 Then
lngCharCode = CLng(intCharCode) + &H10000
Else
lngCharCode = CLng(intCharCode)
End If
If lngCharCode = &H20& Then
Mid(strBuffer, lngWriteLength, 1) = "+"
lngWriteLength = lngWriteLength + 1
ElseIf lngCharCode <= &H7F& Then
If ((lngCharCode >= &H40&) And (lngCharCode <= &H5A&)) Or _
((lngCharCode >= &H61&) And (lngCharCode <= &H7A&)) Or _
((lngCharCode >= &H30&) And (lngCharCode <= &H39&)) Or _
(lngCharCode = &H2A&) Or _
(lngCharCode = &H2D&) Or _
(lngCharCode = &H2E&) Or _
(lngCharCode = &H5F&) Then
Mid(strBuffer, lngWriteLength, 1) = Chr$(lngCharCode)
lngWriteLength = lngWriteLength + 1
Else
If lngCharCode > &HF& Then
Mid(strSingleHex, 2, 2) = Hex$(lngCharCode)
Else
Mid(strSingleHex, 2, 1) = "0"
Mid(strSingleHex, 3, 1) = Hex$(lngCharCode)
End If
Mid(strBuffer, lngWriteLength, 3) = strSingleHex
lngWriteLength = lngWriteLength + 3
End If
ElseIf (lngCharCode >= &H80&) And (lngCharCode <= &H7FF&) Then
Mid(strSingleHex, 2, 2) = Hex$((lngCharCode \ &H40&) Or &HC0&)
Mid(strBuffer, lngWriteLength, 3) = strSingleHex
lngWriteLength = lngWriteLength + 3
Mid(strSingleHex, 2, 2) = Hex$((lngCharCode And &H3F&) Or &H80&)
Mid(strBuffer, lngWriteLength, 3) = strSingleHex
lngWriteLength = lngWriteLength + 3
ElseIf (lngCharCode >= &H800&) And (lngCharCode <= &HFFFF&) Then
Mid(strSingleHex, 2, 2) = Hex$((lngCharCode \ &H1000&) Or &HE0&)
Mid(strBuffer, lngWriteLength, 3) = strSingleHex
lngWriteLength = lngWriteLength + 3
Mid(strSingleHex, 2, 2) = Hex$(((lngCharCode And &HFC0&) \ &H40&) Or &H80&)
Mid(strBuffer, lngWriteLength, 3) = strSingleHex
lngWriteLength = lngWriteLength + 3
Mid(strSingleHex, 2, 2) = Hex$((lngCharCode And &H3F&) Or &H80&)
Mid(strBuffer, lngWriteLength, 3) = strSingleHex
lngWriteLength = lngWriteLength + 3
End If
Next lngCnt
If lngWriteLength > 1 Then
UrlEncodeUtf8 = Left$(strBuffer, lngWriteLength - 1)
End If
End Function
Public Sub BneOnCreateProcedure()
Dim i As Long
Dim oSheets As New Collection
For i = 1 To Sheets.count
oSheets.add Sheets.Item(i)
Next
For i = 1 To oSheets.count
On Error Resume Next
oSheets.Item(i).BneOnCreateProcedure
On Error GoTo 0
Next
End Sub
Public Sub BneWriteFile(strFileName As String, varData As Variant)
Dim liFn As Integer
On Error Resume Next
liFn = FreeFile
strFileName = RetrieveTempDirectory & strFileName
Open strFileName For Binary Access Write As liFn
Put #liFn, , varData
Close liFn
On Error GoTo 0
End Sub
Public Sub BneResizeRange(objRange As Range, intRowCount As Integer)
Dim intResizeCount As Integer
Dim oInsertRange As Object
On Error Resume Next
If objRange.Rows.count < intRowCount Then
intResizeCount = intRowCount - objRange.Rows.count
Set oInsertRange = objRange.Parent.Rows(objRange.Row + objRange.Rows.count - 2)
objRange.Parent.Unprotect
oInsertRange.Offset(1, 0).EntireRow.Resize(intResizeCount).Insert
objRange.Parent.Protect
End If
End Sub
Public Function BneGETMSXMLVersion() As Integer
Dim oXMLhttp As Object
On Error Resume Next
Err.Clear
Set oXMLhttp = CreateObject("Msxml2.DOMDocument.4.0")
If Err = 0 Then
BneGETMSXMLVersion = 4
GoTo EndFunction
End If
Err.Clear
Set oXMLhttp = CreateObject("Msxml2.DOMDocument.3.0")
If Err = 0 Then
BneGETMSXMLVersion = 3
GoTo EndFunction
End If
Err.Clear
Set oXMLhttp = CreateObject("Msxml2.DOMDocument")
If Err = 0 Then
BneGETMSXMLVersion = 2
GoTo EndFunction
End If
Err.Clear
Set oXMLhttp = CreateObject("Microsoft.XMLDOM")
If Err = 0 Then
BneGETMSXMLVersion = 1
GoTo EndFunction
End If
BneGETMSXMLVersion = -1
EndFunction:
AddBneMsg BNE_TRACE, "BneGetMSXMLVersion", "MSXML Version is: " & BneGETMSXMLVersion
Set oXMLhttp = Nothing
End Function
Public Sub BneProcessingBegin(Optional startTimer As Boolean)
Application.ScreenUpdating = False
Application.EnableEvents = False
Application.DisplayStatusBar = False
Application.Calculation = xlCalculationManual
If (Not IsMissing(startTimer) And startTimer) Then
g_uploadTimer = Timer()
End If
End Sub
Public Sub BneProcessingEnd()
Application.ScreenUpdating = True
Application.EnableEvents = True
Application.DisplayStatusBar = True
Application.Calculation = xlCalculationAutomatic
End Sub
Public Function Split(ByRef lsInputString As String, Optional ByRef lsDelimeter As String = ",")
Dim laOut() As String
Dim lsIn    As String
Dim liPos   As Integer
Dim lsNext  As String
Dim liCount As Integer
On Error GoTo ErrorHandler
lsIn = lsInputString
Do Until Len(lsIn) = 0
liPos = InStr(lsIn, lsDelimeter)
If liPos = 0 Then
lsNext = lsIn
lsIn = ""
Else
lsNext = Left(lsIn, liPos - 1)
lsIn = Mid(lsIn, liPos + Len(lsDelimeter))
End If
ReDim Preserve laOut(0 To liCount)
laOut(liCount) = lsNext
liCount = liCount + 1
Loop
Split = laOut
ErrorHandler:
End Function
Public Function Join(ByRef varInputArray As Variant, Optional ByRef strDelimeter As String = ",")
Dim strOut      As String
Dim lngCount    As Long
On Error GoTo ErrorHandler
For lngCount = LBound(varInputArray) To UBound(varInputArray)
If lngCount > LBound(varInputArray) Then
strOut = strOut & strDelimeter
End If
strOut = strOut & varInputArray(lngCount)
Next
Join = strOut
ErrorHandler:
End Function
Public Function Replace(ByRef lsInputString As String, ByRef lsFindString As String, ByRef lsReplaceString As String)
Dim lsOut As String
Dim llPos As Long
lsOut = lsInputString
On Error GoTo ErrorHandler
llPos = InStr(lsOut, lsFindString)
Do While llPos > 0
lsOut = Left(lsOut, llPos - 1) & lsReplaceString & Mid(lsOut, llPos + Len(lsFindString))
llPos = InStr(llPos + Len(lsReplaceString), lsOut, lsFindString)
Loop
ErrorHandler:
Replace = lsOut
End Function
Public Function InStrRev(StringCheck As String, StringMatch As String) As Long
Dim CurPosn As Long
Dim ThePosn As Long
ThePosn = 0
CurPosn = InStr(1, StringCheck, StringMatch)
Do While CurPosn <> 0
ThePosn = CurPosn
CurPosn = InStr(CurPosn + 1, StringCheck, StringMatch)
Loop
InStrRev = ThePosn
End Function
Public Function CreateHTTPObject() As Object
Dim oXMLhttp As Object
On Error Resume Next
Set oXMLhttp = CreateObject("MSXML2.XMLHTTP")
If Err <> 0 Then
Err.Clear
AddBneMsg BNE_ERROR, "CreateHTTPObject", " Unable to create MSXML2.XMLHTTP"
Set oXMLhttp = CreateObject("Microsoft.XMLHTTP")
If Err <> 0 Then
AddBneMsg BNE_ERROR, "CreateHTTPObject", " Unable to create Microsoft.XMLHTTP"
End If
End If
Set CreateHTTPObject = oXMLhttp
End Function
Public Function BneExtractParams(htmlForm As Object) As BneVBAParameters
Dim iCount As Integer
Dim oField As Object
Dim cParams As New BneVBAParameters
If Not htmlForm Is Nothing Then
If htmlForm.tagName = "FORM" Then 'This is a form filled with form fields, extract each of them.
For iCount = 1 To htmlForm.Length
Set oField = htmlForm(iCount - 1) 'HTML is indexed from zero
If Not oField Is Nothing Then
If oField.tagName = "INPUT" And oField.Type = "hidden" Then
cParams.add oField.name, oField.value
If oField.name = "bne:commitrows" Then
If oField.value = "EACH_ROW" Then
g_commitEachRow = True
Else
g_commitEachRow = False
End If
End If
End If
End If
Next iCount
Else 'Just a sinlge field.
If htmlForm.tagName = "INPUT" Then
If htmlForm.Type = "hidden" Then
cParams.add htmlForm.name, htmlForm.value
End If
End If
End If
End If
Set BneExtractParams = cParams
End Function
Public Function RetrieveTempDirectory() As String
Dim strPath As String
Dim arrDrives() As String
Dim i As Integer
Dim strBuffer As String * 255
Dim lngBuffLen As Long
Dim theString As String
Dim theDrive As String
Dim driveCount As Long
strPath = Environ("temp")
If Len(strPath) > 0 Then
RetrieveTempDirectory = PathWithFinalSlash(strPath)
Exit Function
End If
strPath = Environ("tmp")
If Len(strPath) > 0 Then
RetrieveTempDirectory = PathWithFinalSlash(strPath)
Exit Function
End If
lngBuffLen = GetLogicalDriveStrings(Len(strBuffer), strBuffer)
theString = Left(strBuffer, lngBuffLen)
theDrive = ""
driveCount = 0
For i = 1 To lngBuffLen
If Asc(Mid(strBuffer, i, 1)) <> 0 Then _
theDrive = theDrive & Mid(strBuffer, i, 1)
If Asc(Mid(strBuffer, i, 1)) = 0 Then
driveCount = driveCount + 1
ReDim Preserve arrDrives(driveCount)
arrDrives(driveCount) = UCase(theDrive)
theDrive = ""
End If
Next i
For i = LBound(arrDrives) To UBound(arrDrives)
If Len(arrDrives(i)) > 0 Then
If Len(Dir(arrDrives(i), vbDirectory)) > 0 Then
RetrieveTempDirectory = PathWithFinalSlash(arrDrives(i))
Exit Function
End If
End If
Next i
End Function
Public Function PathWithFinalSlash(sPath As String) As String
sPath = Trim(sPath)
If Right(sPath, 1) = "\" Then
PathWithFinalSlash = sPath
Else
PathWithFinalSlash = sPath & "\"
End If
End Function
Sub BneAddReference(sReferenceName, sReferenceGUID)
Dim iIndex As Long
Dim oReference As Object
On Error Resume Next
For iIndex = 1 To ThisWorkbook.VBProject.References.count
Set oReference = ThisWorkbook.VBProject.References.Item(iIndex)
If oReference.name = sReferenceName Then
If oReference.GUID = sReferenceGUID And oReference.IsBroken Then
ThisWorkbook.VBProject.References.Remove oReference
Else
Exit Sub
End If
End If
Next
ThisWorkbook.VBProject.References.AddFromGuid sReferenceGUID, 1, 0
End Sub
Sub BneAddDynamicColumn(ByRef objDataNode As Object, strColumnName As String, objDataRng As Range)
On Error GoTo ErrorHandler
Dim strColDataName As String
strColDataName = strColumnName & "_NUMBER"
If isEmpty(objDataRng) Then
objDataNode.setAttribute strColDataName, ""
Else
objDataNode.setAttribute strColDataName, CLng(objDataRng.value)
End If
strColDataName = strColumnName & "_VARCHAR2"
objDataNode.setAttribute strColDataName, CStr(objDataRng.text)
strColDataName = strColumnName & "_DATE"
objDataNode.setAttribute strColDataName, Format(objDataRng.value, "yyyy-MM-dd")
Exit Sub
ErrorHandler:
objDataNode.setAttribute strColDataName, ""
Resume Next
End Sub
Public Function ContainsItem(col As Collection, varValue As Variant) As Boolean
Dim varItem As Variant
On Error Resume Next
varItem = col.Item(varValue)
ContainsItem = Not (Err.Number = 5 Or Err.Number = 9)
On Error GoTo 0
End Function
Public Function NormalizeNumStr(numStr As Variant) As String
On Error Resume Next
Dim sTmp As String
sTmp = Trim(Str(numStr))
If Left(sTmp, 1) = "." Then
sTmp = "0" & sTmp
End If
If Left(sTmp, 2) = "-." Then
sTmp = "-0" & Mid(sTmp, 2)
End If
NormalizeNumStr = sTmp
End Function
Public Function IsNumericCell(cell As Variant) As Boolean
On Error Resume Next
Dim ret As Boolean
Dim myTypeName As String
myTypeName = TypeName(cell)
If myTypeName = "Double" Then
ret = True
ElseIf myTypeName = "Long" Then
ret = True
ElseIf myTypeName = "Integer" Then
ret = True
ElseIf myTypeName = "Single" Then
ret = True
ElseIf myTypeName = "Decimal" Then
ret = True
ElseIf myTypeName = "Currency" Then
ret = True
Else
ret = False
End If
IsNumericCell = ret
End Function
Public Function GetHorizontalRange(ByVal bigRange As Range, rowNum As Integer) As Range
On Error Resume Next
Dim firstRange As Range
Dim secondRange As Range
Set firstRange = bigRange.Worksheet.Cells(rowNum, bigRange.Column)
Set secondRange = bigRange.Worksheet.Cells(rowNum, bigRange.Columns(bigRange.Columns.count).Column)
Set GetHorizontalRange = Range(firstRange, secondRange)
End Function
Public Function BneRetrieveLinesBlockRange(CurrentSheet As Worksheet, InterfaceCols As Collection) As Range
Dim FirstColRange As Range
Dim LastColRange As Range
Dim TempColRange As Range

Dim InterfaceCol As BneVBAInterfaceCol

With CurrentSheet
On Error Resume Next

Set FirstColRange = .Range("BNE_UPLOAD")
Set LastColRange = .Range("BNE_MESSAGES")

On Error GoTo 0

If FirstColRange Is Nothing Or LastColRange Is Nothing Then
For Each InterfaceCol In InterfaceCols
If InterfaceCol.Orientation = "VERTICAL" Then
On Error Resume Next
Set TempColRange = .Range(InterfaceCol.InterfaceName & "_" & InterfaceCol.ColumnName)
On Error GoTo 0

If Not TempColRange Is Nothing Then
If FirstColRange Is Nothing Then
Set FirstColRange = TempColRange
Else
If TempColRange.Column < FirstColRange.Column Then
Set FirstColRange = TempColRange
End If
End If

If LastColRange Is Nothing Then
Set LastColRange = TempColRange
Else
If TempColRange.Column > LastColRange.Column Then
Set LastColRange = TempColRange
End If
End If
End If
End If
Next
End If
End With

If Not FirstColRange Is Nothing And Not LastColRange Is Nothing Then
Set BneRetrieveLinesBlockRange = Range(Cells(FirstColRange.Row, FirstColRange.Column), Cells(LastColRange.Rows(LastColRange.Rows.count).Row, LastColRange.Columns(LastColRange.Columns.count).Column)) 'Union(FirstColRange, LastColRange)
Else
Set BneRetrieveLinesBlockRange = Nothing
End If

End Function
Public Function BneIsLinesBlockHintDisplayed(InterfaceCols As Collection) As Boolean
Dim InterfaceCol As BneVBAInterfaceCol

For Each InterfaceCol In InterfaceCols
If InterfaceCol.Orientation = "VERTICAL" Then
If InterfaceCol.HintDisplayed Then
BneIsLinesBlockHintDisplayed = True
Else
BneIsLinesBlockHintDisplayed = False
End If

Exit For
End If
Next
End Function
Public Function BneEscapeXML(strXML As String) As String
strXML = Replace(strXML, "&", "&amp;")
strXML = Replace(strXML, """", "&quot;")
strXML = Replace(strXML, "'", "&apos;")
strXML = Replace(strXML, "<", "&lt;")
strXML = Replace(strXML, ">", "&gt;")
BneEscapeXML = strXML
End Function
Public Function BneGetNodeText(objDOMDocument As Object, strXPathQuery As String) As String
On Error Resume Next
BneGetNodeText = objDOMDocument.SelectSingleNode(strXPathQuery).text
End Function
Public Function BneGetAttributeText(objAttributes As Object, strName As String) As String
On Error Resume Next
BneGetAttributeText = objAttributes.getValueFromQName(strName)
End Function
Public Function BneGetBooleanValue(ByVal strBoolean As String) As Boolean
On Error GoTo ErrorHandler
strBoolean = UCase(Trim(strBoolean))
If strBoolean = "Y" Or _
strBoolean = "YES" Or _
strBoolean = "T" Or _
strBoolean = "TRUE" Then
BneGetBooleanValue = True
Else
BneGetBooleanValue = False
End If
Exit Function
ErrorHandler:
BneGetBooleanValue = False
End Function
Public Function BneWorkSheetExists(strSheetName As String) As Boolean
On Error GoTo ErrorHandler
If Not Worksheets(strSheetName) Is Nothing Then
BneWorkSheetExists = True
End If
Exit Function
ErrorHandler:
BneWorkSheetExists = False
End Function
Public Function BneCreateRandomString(intStringLength As Integer) As String
Dim intCnt As Integer
Dim intChar As Integer
Dim strRandom As String
On Error GoTo ErrorHandler
strRandom = String(intStringLength, " ")
Randomize
For intCnt = 1 To intStringLength
Select Case Int((3 * Rnd) + 1)
Case 1
Mid(strRandom, intCnt, 1) = Chr(Int((10 * Rnd) + 48))
Case 2
Mid(strRandom, intCnt, 1) = Chr(Int((26 * Rnd) + 65))
Case 3
Mid(strRandom, intCnt, 1) = Chr(Int((26 * Rnd) + 97))
End Select
Next
BneCreateRandomString = strRandom
Exit Function
ErrorHandler:
BneCreateRandomString = strRandom
End Function
Public Sub BneTickleSession()
Dim objXMLhttp As Object
Dim sContent As String
Dim sMsg As String
On Error Resume Next
If ((Timer() - g_uploadTimer > UPLOAD_SESSION_TIMEOUT)) Then
DoEvents
Set objXMLhttp = CreateObject("MSXML2.XMLHTTP")
If Err <> 0 Then
Err.Clear
Set objXMLhttp = CreateObject("Microsoft.XMLHTTP")
If Err <> 0 Then
sMsg = "Unable to create program object Microsoft.XMLHTTP.  Ensure you are running IE 5.0 or greater and have installed the  viewer you selected in the Create Document Page Flow."
MsgBox (sMsg)
End If
End If
On Error GoTo 0
objXMLhttp.Open "POST", TICKLE_URL, True
objXMLhttp.setRequestHeader "Content-Type", "text/xml"
On Error GoTo ErrorHandler
objXMLhttp.send ("<params></params>")
g_uploadTimer = Timer()
End If
Exit Sub
ErrorHandler:
AddBneMsg BNE_ERROR, "BneMain.BneTickleSession", Err.Number & " - " & Err.Source & "( " & Err.Description & ")"
End Sub
Function FindFirstWorkbook(objWorkbook As Workbook) As Workbook
Dim objSheet As Worksheet
Dim clsProperties As New BneVBAProperties
Dim clsProperty As New BneVBAProperty
Dim currContentIdentifier As Variant
On Error Resume Next
Set FindFirstWorkbook = objWorkbook
Set objSheet = objWorkbook.Worksheets("BneWorkBookProperties")
If objSheet Is Nothing Then
Exit Function
End If
clsProperties.setSheet objSheet
If clsProperties.getProperty("BneWorkBookSequence").value = 1 Then
Exit Function
End If
currContentIdentifier = clsProperties.getProperty("contentidentifier")
For Each FindFirstWorkbook In Workbooks
If FindFirstWorkbook <> objWorkbook Then
Set objSheet = FindFirstWorkbook.Worksheets("BneWorkBookProperties")
If Not objSheet Is Nothing Then

clsProperties.setSheet objSheet
If currContentIdentifier = clsProperties.getProperty("contentidentifier").value _
And clsProperties.getProperty("BneWorkBookSequence").value = 1 Then
Exit For
End If
End If
End If
Next FindFirstWorkbook
End Function
Function FindFirstWorksheet(objWorkbook As Workbook) As Worksheet
Dim clsProperties As New BneVBAProperties
Dim clsProperty As New BneVBAProperty
Dim objSheet As Worksheet
Dim workbookGroupName As Variant
On Error Resume Next
Set FindFirstWorksheet = objWorkbook.ActiveSheet
workbookGroupName = ""
Set objSheet = objWorkbook.Worksheets("BneWorkBookProperties")
clsProperties.setSheet objSheet
workbookGroupName = clsProperties.getProperty("contentgroupname").value
If workbookGroupName = "" Then
Exit Function
End If
For Each objSheet In objWorkbook.Worksheets
clsProperties.setSheet objSheet
Set clsProperty = clsProperties.getProperty("contentgroupname")
If Not clsProperty Is Nothing Then
If Len(clsProperty.value) > 0 And clsProperty.value = workbookGroupName Then
Set clsProperty = clsProperties.getProperty("contentgroupsequence")
If clsProperty.value = "1" Then
Set FindFirstWorksheet = objSheet
Exit Function
End If
End If
End If
Next objSheet
End Function

Attribute VB_Name = "bneMsgLogger"

Global Const LOG_SHEET = "BneLog"
Private Const LOG_LEVEL As String = "ERROR"
Global Const BNE_REQUIRED = 1
Global Const BNE_CRITICAL_ERROR = 2
Global Const BNE_ERROR = 3
Global Const BNE_WARNING = 4
Global Const BNE_INFORMATION = 5
Global Const BNE_DETAIL = 6
Global Const BNE_TRACE = 7
Global Const REQUIRED_DESCRIPTION = "REQUIRED"
Global Const CRITICAL_ERROR_DESCRIPTION = "CRITICAL"
Global Const ERROR_DESCRIPTION = "ERROR"
Global Const WARNING_DESCRIPTION = "WARNING"
Global Const INFORMATION_DESCRIPTION = "INFORMATION"
Global Const DETAIL_DESCRIPTION = "DETAIL"
Global Const TRACE_DESCRIPTION = "TRACE"
Private lRowCount As Long
Private oLogSheet As Worksheet
Public Sub AddBneMsg(ByVal sType As Integer, ByVal sSource As String, ByVal sDescr As String, Optional ByVal sAction As String)
If sType <= GetLevel(LOG_LEVEL) Then
Dim oMsg As BneVBAMessage
Set oMsg = New BneVBAMessage
oMsg.msgType = GetLevelDescription(sType)
oMsg.msgSource = sSource
oMsg.msgText = sDescr
oMsg.msgAction = sAction
On Error GoTo ErrorHandler
InsertMsg oMsg
End If
Exit Sub
ErrorHandler:
InitMsgs
On Error Resume Next
InsertMsg oMsg
End Sub
Private Sub InsertMsg(oMsg As BneVBAMessage)
oLogSheet.Cells(lRowCount + 1, 1).value = Date
oLogSheet.Cells(lRowCount + 1, 2).value = Time
oLogSheet.Cells(lRowCount + 1, 3).value = oMsg.msgType
oLogSheet.Cells(lRowCount + 1, 4).value = Left(oMsg.msgSource, 32767)
oLogSheet.Cells(lRowCount + 1, 5).value = Left(oMsg.msgText, 32767)
oLogSheet.Cells(lRowCount + 1, 6).value = Left(oMsg.msgAction, 32767)
lRowCount = lRowCount + 1
End Sub
Private Sub InitMsgs()
Dim oWorksheet As Worksheet
On Error Resume Next
Set oWorksheet = Worksheets(LOG_SHEET)
If oWorksheet Is Nothing Then
Set oWorksheet = Worksheets.add
oWorksheet.name = LOG_SHEET
oWorksheet.Visible = xlSheetVeryHidden
oWorksheet.Columns.AutoFit
Else
If GetLevel(LOG_LEVEL) < BNE_TRACE Then
oWorksheet.Cells.Clear
lRowCount = 0
End If
End If
Set oLogSheet = oWorksheet
InitMsgHeadings
lRowCount = oWorksheet.UsedRange.Rows.count
End Sub
Public Sub ResetMsgs()
On Error Resume Next
Dim oWorksheet As Worksheet
Set oWorksheet = Worksheets(LOG_SHEET)
If Not oWorksheet Is Nothing Then
If GetLevel(LOG_LEVEL) < BNE_TRACE Then
oWorksheet.Cells.Clear
lRowCount = 0
InitMsgHeadings
End If
End If
End Sub
Private Sub InitMsgHeadings()
Dim oLogSheet As Worksheet
Set oLogSheet = Worksheets(LOG_SHEET)
oLogSheet.Cells(lRowCount + 1, 1).value = "Date"
oLogSheet.Cells(lRowCount + 1, 2).value = "Time"
oLogSheet.Cells(lRowCount + 1, 3).value = "Log Level"
oLogSheet.Cells(lRowCount + 1, 4).value = "Source"
oLogSheet.Cells(lRowCount + 1, 5).value = "Description"
oLogSheet.Cells(lRowCount + 1, 6).value = "Action"
oLogSheet.Cells(lRowCount + 1, 1).EntireColumn.ColumnWidth = 12
oLogSheet.Cells(lRowCount + 1, 2).EntireColumn.ColumnWidth = 12
oLogSheet.Cells(lRowCount + 1, 4).EntireColumn.ColumnWidth = 50
oLogSheet.Cells(lRowCount + 1, 5).EntireColumn.ColumnWidth = 30
lRowCount = lRowCount + 1
End Sub
Public Function GetMsgItem(iIndex As Long) As BneVBAMessage
Dim oMsg As New BneVBAMessage
On Error Resume Next
If iIndex <= lRowCount Then
oMsg.msgType = oLogSheet.Cells(iIndex, 3).value
oMsg.msgSource = oLogSheet.Cells(iIndex, 4).value
oMsg.msgText = oLogSheet.Cells(iIndex, 5).value
oMsg.msgAction = oLogSheet.Cells(iIndex, 6).value
Set GetMsgItem = oMsg
Else
Set GetMsgItem = Nothing
End If
End Function
Public Function GetMsgCount() As Integer
GetMsgCount = lRowCount
End Function
Public Function GetMsgTypeCount(sType As String) As Long
Dim iCount As Long
Dim iMsgCount As Long
Dim sMsgType As String
iMsgCount = 0
On Error GoTo ErrorHandler
For iCount = 1 To GetMsgCount
sMsgType = oLogSheet.Cells(iCount, 3).value
If sMsgType = sType Then
iMsgCount = iMsgCount + 1
End If
Next iCount
GetMsgTypeCount = iMsgCount
Exit Function
ErrorHandler:
GetMsgTypeCount = 0
End Function
Public Function DumpMsgs() As String
Dim iCount As Long
Dim sMsgs As String
Dim oMsg As BneVBAMessage
sMsgs = ""
On Error GoTo ErrorHandler
For iCount = 2 To GetMsgCount
Set oMsg = GetMsgItem(iCount)
sMsgs = sMsgs & oMsg.toString & vbCrLf
Next iCount
DumpMsgs = sMsgs
Exit Function
ErrorHandler:
DumpMsgs = ""
End Function
Private Function GetLevelDescription(ByVal level As Integer) As String
On Error Resume Next

Select Case level
Case BNE_REQUIRED
GetLevelDescription = REQUIRED_DESCRIPTION
Case BNE_CRITICAL_ERROR
GetLevelDescription = CRITICAL_ERROR_DESCRIPTION
Case BNE_ERROR
GetLevelDescription = ERROR_DESCRIPTION
Case BNE_WARNING
GetLevelDescription = WARNING_DESCRIPTION
Case BNE_INFORMATION
GetLevelDescription = INFORMATION_DESCRIPTION
Case BNE_DETAIL
GetLevelDescription = DETAIL_DESCRIPTION
Case BNE_TRACE
GetLevelDescription = TRACE_DESCRIPTION
Case Else
GetLevelDescription = "Unknown level"
End Select
End Function

Private Function GetLevel(ByVal levelDesc As String) As Integer
On Error Resume Next

Select Case levelDesc
Case REQUIRED_DESCRIPTION
GetLevel = BNE_REQUIRED
Case CRITICAL_ERROR_DESCRIPTION
GetLevel = BNE_CRITICAL_ERROR
Case ERROR_DESCRIPTION
GetLevel = BNE_ERROR
Case WARNING_DESCRIPTION
GetLevel = BNE_WARNING
Case INFORMATION_DESCRIPTION
GetLevel = BNE_INFORMATION
Case DETAIL_DESCRIPTION
GetLevel = BNE_DETAIL
Case TRACE_DESCRIPTION
GetLevel = BNE_TRACE
Case Else
GetLevel = BNE_ERROR
End Select
End Function

Public Function GetTraceLevel() As Integer
GetTraceLevel = GetLevel(LOG_LEVEL)
End Function
Attribute VB_Name = "bneReadOnlyUtils"

Option Explicit
Option Base 1
Const STATIC_RANGE_NAME = "STATIC_READ_ONLY_REGIONS"
Const DYNAMIC_RANGE_NAME = "DYNAMIC_READ_ONLY_REGIONS"
Public Sub BneApplyReadOnlyStyle(objRegion As Range)
Dim objStyleSheet As BneStyleSheet
Dim objStyle As BneStyle
Set objStyleSheet = New BneStyleSheet
Set objStyle = objStyleSheet.getStyle("READ_ONLY")
If Not objStyle Is Nothing Then
objStyle.applyStyle objRegion
End If
End Sub
Public Sub BneAddStaticReadOnly(ByVal objNewRegion As Range, objSheet As Worksheet)
On Error Resume Next
Dim objStyleSheet As BneStyleSheet
Dim objStyle As BneStyle
Set objNewRegion = Application.Union(objSheet.Names(STATIC_RANGE_NAME).RefersToRange, objNewRegion)
objSheet.Names.add name:=STATIC_RANGE_NAME, RefersTo:=objNewRegion
BneApplyReadOnlyStyle objNewRegion
End Sub
Public Sub BneAddDynamicReadOnly(ByVal objNewRegion As Range, objSheet As Worksheet)
On Error Resume Next
Dim objStyleSheet As BneStyleSheet
Dim objStyle As BneStyle
Set objNewRegion = Application.Union(objSheet.Names(DYNAMIC_RANGE_NAME).RefersToRange, objNewRegion)
objSheet.Names.add name:=DYNAMIC_RANGE_NAME, RefersTo:=objNewRegion
BneApplyReadOnlyStyle objNewRegion
End Sub
Public Sub BneRemoveDynamicReadOnly(ByVal objOldRegion As Range, objSheet As Worksheet)
On Error GoTo error
Dim a_objSelAreas() As Range
Dim intNumAreas As Integer
Dim i, j, k As Integer
Dim objTempRange, objNewRegion, objReadOnly, objStaticReadOnly As Range
Dim objStyleSheet As BneStyleSheet
Dim objStyle As BneStyle
Set objNewRegion = Nothing
Set objReadOnly = objSheet.Names(DYNAMIC_RANGE_NAME).RefersToRange
intNumAreas = objReadOnly.Areas.count
ReDim a_objSelAreas(1 To intNumAreas)
For i = 1 To intNumAreas
Set a_objSelAreas(i) = objReadOnly.Areas(i)
Next
For i = 1 To intNumAreas
For j = 1 To a_objSelAreas(i).Columns.count
For k = 1 To a_objSelAreas(i).Rows.count
Set objTempRange = a_objSelAreas(i).Rows(k).Columns(j)
If Application.Intersect(objTempRange, objOldRegion) Is Nothing Then
If objNewRegion Is Nothing Then
Set objNewRegion = objTempRange
Else
Set objNewRegion = Application.Union(objNewRegion, objTempRange)
End If
End If
Next
Next
Next
If objNewRegion Is Nothing Then
objSheet.Names(DYNAMIC_RANGE_NAME).Delete
Else
objSheet.Names.add name:=DYNAMIC_RANGE_NAME, RefersTo:=objNewRegion
End If
Set objStyleSheet = New BneStyleSheet
Set objStyle = objStyleSheet.getStyle("DATA")
If Not objStyle Is Nothing Then
objStyle.applyStyle objOldRegion
End If
Set objStyle = objStyleSheet.getStyle("READ_ONLY")
Set objStaticReadOnly = Application.Intersect(objOldRegion, objSheet.Names(STATIC_RANGE_NAME).RefersToRange)
If Not objStyle Is Nothing Then
objStyle.applyStyle objStaticReadOnly
End If
error:
End Sub
Public Function BneReadOnlyExists(objSheet As Worksheet) As Boolean
On Error Resume Next
If objSheet.Names(STATIC_RANGE_NAME).RefersToRange Is Nothing Then
If objSheet.Names(DYNAMIC_RANGE_NAME).RefersToRange Is Nothing Then
BneReadOnlyExists = False
Else
BneReadOnlyExists = True
End If
Else
BneReadOnlyExists = True
End If
End Function
Public Sub BneEmptyDynamicReadOnly(objSheet As Worksheet)
On Error GoTo error
Dim objStyleSheet As BneStyleSheet
Dim objStyle As BneStyle
Dim objOldRegion, objStaticReadOnly As Range
Set objOldRegion = objSheet.Names(DYNAMIC_RANGE_NAME).RefersToRange
objSheet.Names(DYNAMIC_RANGE_NAME).Delete
Set objStyleSheet = New BneStyleSheet
Set objStyle = objStyleSheet.getStyle("DATA")
If Not objStyle Is Nothing Then
objStyle.applyStyle objOldRegion
End If
Set objStyle = objStyleSheet.getStyle("READ_ONLY")
Set objStaticReadOnly = Application.Intersect(objOldRegion, objSheet.Names(STATIC_RANGE_NAME).RefersToRange)
If Not objStyle Is Nothing Then
objStyle.applyStyle objStaticReadOnly
End If
error:
End Sub
Public Function BneIsReadOnly(ByVal objTarget As Range, objSheet As Worksheet) As Boolean
On Error Resume Next
If Application.Intersect(objTarget, objSheet.Names(STATIC_RANGE_NAME).RefersToRange) Is Nothing Then
If Application.Intersect(objTarget, objSheet.Names(DYNAMIC_RANGE_NAME).RefersToRange) Is Nothing Then
BneIsReadOnly = False
Else
BneIsReadOnly = True
End If
Else
BneIsReadOnly = True
End If
End Function

' InQuest injected base64 decoded content
' "w+zg
' jwez
' jwez
' jwez
' Kjx.j
' {-j{l
' +bjX
' zj/x<

INQUEST-PP=macro
