Attribute VB_Name = "AddUpdateUser"
Attribute VB_Base = "0{6E366AAB-B94C-431F-9291-83AA05E88751}{55C5EFEE-5EFA-47B2-AA5C-EE9D84D18C61}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub cmdCPCancel_Click()
  Unload Me
End Sub

Private Sub cmsCPUpdate_Click()
  Dim hasChanged As Boolean
  Dim tmpUI As String
  Dim tmpPW As String
  Dim tmpPN As String
  Dim tmpPos As String
  hasChanged = False
  If Len(Trim(CStr(txtNewUserID.Text))) < 3 Then
    MsgBox "Wrong User Name. Must be at least 3 characters long.", vbInformation
    txtNewUserID.Text = ""
    Exit Sub
  End If
  If Len(Trim(CStr(txtNewPassword.Text))) < 4 Then
     MsgBox "Wrong New Password. Must be at least 4 characters long.", vbInformation
     txtNewPassword.Text = ""
     Exit Sub
  End If
  If ((obU1.Value = True) Or (obU2.Value = True)) Then
    If ((Len(Trim(CStr(txtPersonName.Text))) < 4) Or (InStr(txtPersonName.Text, "Change the name here") > 0)) Then
       MsgBox "Wrong Person Name. Must be at least 4 characters long.", vbInformation
       Exit Sub
    End If
  End If
  tmpUI = UCase(Trim(CStr(txtNewUserID.Text)))
  tmpPW = Trim(CStr(txtNewPassword.Text))
  tmpPN = Trim(CStr(txtPersonName.Text))
  If obU1.Value = True Then
    tmpPos = 1
    If tmpUI <> U1User Or tmpPW <> U1Pass Or tmpPN <> U1Name Then
      If MsgBox("You are going to change the foreman's parameters" & vbCrLf & vbCrLf & _
                "from " & U1User & "/" & U1Pass & "/" & U1Name & vbCrLf & vbCrLf & _
                " to " & tmpUI & "/" & tmpPW & "/" & tmpPN & _
                vbCrLf & vbCrLf & "Proceed?", vbYesNo) = vbYes Then
        hasChanged = True
      End If
    Else
      MsgBox "User Id, Password and Person Name are the same for the foreman: " & _
      vbCrLf & vbCrLf & tmpUI & "/" & tmpPW & "/" & tmpPN, vbInformation
    End If
  ElseIf obU2.Value = True Then
    tmpPos = 2
    If tmpUI <> U2User Or tmpPW <> U2Pass Or tmpPN <> U2Name Then
      If MsgBox("You are going to change the superintendent's parameters" & vbCrLf & vbCrLf & _
                "from " & U2User & "/" & U2Pass & "/" & U2Name & vbCrLf & vbCrLf & _
                " to " & tmpUI & "/" & tmpPW & "/" & tmpPN & _
                vbCrLf & vbCrLf & "Proceed?", vbYesNo) = vbYes Then
        hasChanged = True
      End If
    Else
      MsgBox "User Id, Password and Person Name are the same for the superintendent: " & _
      vbCrLf & vbCrLf & tmpUI & "/" & tmpPW & "/" & tmpPN, vbInformation
    End If
  ElseIf obU3.Value = True Then
    tmpPos = 3
    If tmpUI <> U3User Or tmpPW <> U3Pass Then
      If MsgBox("You are going to change the office user's parameters" & vbCrLf & vbCrLf & _
                "from " & U3User & "/" & U3Pass & " to " & tmpUI & "/" & tmpPW & _
                vbCrLf & vbCrLf & "Proceed?", vbYesNo) = vbYes Then
        hasChanged = True
      End If
    Else
      MsgBox "User Id and Password the same for the office user: " & tmpUI & "/" & tmpPW, vbInformation
    End If
  Else
    tmpPos = 4
    If tmpUI <> U4User Or tmpPW <> U4Pass Then
      If MsgBox("You are going to change the system administrator's parameters" & vbCrLf & vbCrLf & _
                "from " & U4User & "/" & U4Pass & " to " & tmpUI & "/" & tmpPW & _
                vbCrLf & vbCrLf & "Proceed?", vbYesNo) = vbYes Then
        hasChanged = True
      End If
    Else
      MsgBox "User Id and Password the same for the system administrator: " & tmpUI & "/" & tmpPW, vbInformation
    End If
  End If
  If hasChanged = True Then
    Dim rng As Range
    Set rng = ActiveWorkbook.Sheets("HelpPage").Range("A" & CStr(tmpPos))
    rng.Value = tmpUI
    Set rng = ActiveWorkbook.Sheets("HelpPage").Range("B" & CStr(tmpPos))
    rng.Value = tmpPW
    Set rng = ActiveWorkbook.Sheets("HelpPage").Range("C" & CStr(tmpPos))
    rng.Value = tmpPN
    Set rng = Nothing
    MsgBox "The user information has been replaced.", vbInformation
  End If
  Unload Me
End Sub

Private Sub obU1_Change()
  If obU1.Value = True Then
    txtNewPassword.Value = U1Pass
    txtNewUserID.Value = U1User
    txtPersonName = U1Name
  End If
End Sub

Private Sub obU2_Change()
  If obU2.Value = True Then
    txtNewPassword.Value = U2Pass
    txtNewUserID.Value = U2User
    txtPersonName = U2Name
  End If
End Sub

Private Sub obU3_Change()
  If obU3.Value = True Then
    txtNewPassword.Value = U3Pass
    txtNewUserID.Value = U3User
    txtPersonName = U3Name
  End If
End Sub

Private Sub obU4_Change()
  If obU4.Value = True Then
    txtNewPassword.Value = U4Pass
    txtNewUserID.Value = U4User
    txtPersonName = U4Name
  End If
End Sub

Private Sub UserForm_activate()
  setUserVariables
  txtNewPassword.Value = U1Pass
  txtNewUserID.Value = U1User
  txtPersonName = U1Name
  If loginType = 4 Then
    obU4.Enabled = True
    obU3.Enabled = True
  Else
    obU4.Enabled = False
    obU3.Enabled = False
  End If
End Sub

Attribute VB_Name = "CCFileInput"
Attribute VB_Base = "0{E820CF60-8D6E-4691-BEDC-F7C5BFBC5DB6}{5CA55009-C1E6-41CC-889B-450A4884DF7D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub cmdBrowseC_Click()
  Dim fName As Variant
  fName = Application.GetOpenFilename("Text File (*.txt),*.txt,Comma Delimited Text File (*.csv),*.csv,All Files (*.*),*.*", 1, "Cost Codes List File", "Load", False)
  If fName <> vbFalse Then
    txtCCFile.Text = fName
  End If
End Sub

Private Sub cmdCancel_Click()
  txtCCFile.Text = ""
  Unload Me
End Sub

Private Sub cmdLoad_Click()
  Dim fName As String
  Dim fDate As Date
  fName = Trim(txtCCFile.Text & "")
  If Len(fName) = 0 Then
    MsgBox "There is nothing to load.", vbCritical
    Exit Sub
  End If
  If Dir(fName) = "" Then
    MsgBox "The Cost Code List file does not exists.", vbCritical
    Exit Sub
  End If
  If FileLen(fName) < 32 Then
    MsgBox "The Cost Code List file too small.", vbCritical
    Exit Sub
  End If
  fDate = CDate(FileDateTime(fName))
  If checkFileDate(fDate) = True Then
    If loadCCFile(fDate, fName) = True Then
      MsgBox "Cost Code List load was successful.", vbInformation, "Cost Code Load"
      Unload Me
    End If
  End If
End Sub

Private Function checkFileDate(fDate As Date) As Boolean
  Dim sVal As Variant
  checkFileDate = True
  sVal = ActiveWorkbook.Sheets("HelpPage").Range("A" & CStr(CCListStart + 1)).Cells(1, 1).Value
  If Len(Trim(CStr(sVal & ""))) > 0 Then
    If fDate < CDate(sVal) Then
      If MsgBox("You are going to load an older version of Cost Code List. Proceed?", vbYesNo, "File Date Message") = vbNo Then
        checkFileDate = False
      End If
    End If
  End If
End Function

Private Function loadCCFile(fDate As Date, fName As String) As Boolean
  Dim x As Object, counter As Integer
  Dim JCString As String, CCString As String, FileNum As Integer
  Dim NameText As String, lastRow As Integer
  Dim errmsg As String, linp As String, pos As Integer
  loadCCFile = True
  errmsg = ""
  On Error GoTo loadCCFile_Err
  FileNum = FreeFile
  Open fName For Input As #FileNum
  Set x = ActiveWorkbook.Sheets("HelpPage")
  counter = CCListStart + 1
  x.Range("A" & CStr(counter)).Cells(1, 1).Value = fDate
  x.Range("C" & CStr(counter)).Cells(1, 1).Value = fName
  counter = counter + 1
  lastRow = x.UsedRange.Row - 1 + x.UsedRange.Rows.Count
  x.Range(x.Cells(counter, 1), x.Cells(lastRow, 3)).Value = ""
  While Not EOF(FileNum)
    'Input #FileNum, JCString, CCString
    'Line Input #FileNum, NameText
    'JCString = Trim(CStr(JCString & ""))
    'CCString = Trim(CStr(CCString & ""))
    'NameText = Trim(CStr(NameText & ""))
    Line Input #FileNum, linp
    linp = Trim(linp & "")
    If Len(linp) > 0 Then
      pos = InStr(linp, ",")
      If pos > 1 Then
        JCString = Trim(Left(linp, pos - 1))
        linp = Trim(Right(linp, Len(linp) - pos))
        pos = InStr(linp, ",")
        If pos > 1 Then
          CCString = Trim(Left(linp, pos - 1))
          NameText = Trim(Right(linp, Len(linp) - pos))
          If Len(JCString) > 0 And Len(JCString) < 10 And Len(CCString) > 0 And Len(CCString) < 10 And Len(NameText) > 0 Then
            If Left(JCString, 1) <> "'" Then
              JCString = "'" & JCString
            End If
            If Left(CCString, 1) <> "'" Then
              CCString = "'" & CCString
            End If
            x.Cells(counter, 1).Value = JCString
            x.Cells(counter, 2).Value = CCString
            x.Cells(counter, 3).Value = NameText
            counter = counter + 1
          End If
        End If
      End If
    End If
  Wend
  If counter > CCListStart + 2 Then
    Close FileNum
    Set x = Nothing
    'sort values by JC, CC goes here - but not neccessary
    Exit Function
  End If
  errmsg = "There is no Cost Code in the file: " & fName & ". "
loadCCFile_Err:
  On Error GoTo 0
  loadCCFile = False
  x.Range("A" & CStr(CCListStart + 1)).Cells(1, 1).Value = ""
  Set x = Nothing
  Close FileNum
  If Not (Err Is Nothing) Then
    If Err.Description <> "" Then
      errmsg = errmsg & vbCrLf & vbCrLf & Err.Description & vbCrLf
    End If
    Err.Clear
  End If
  MsgBox errmsg, vbCritical, "Error in Load Cost Code File"
End Function

Private Sub UserForm_Click()

End Sub
Attribute VB_Name = "CCList"
Attribute VB_Base = "0{B5C5BE73-B320-470E-ABB5-58B6635F9EEA}{164A9751-0942-45F4-82F2-DAC48CB97BF4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Dim CCData() As String

Sub UserForm_Initialize()
    Dim x As Object
    Dim itmp As Integer, i As Integer, j As Integer
    Dim rng As Range
    Dim stmp As String
    Set x = ActiveWorkbook.Sheets("HelpPage")
    itmp = (x.UsedRange.Row - 1 + x.UsedRange.Rows.Count) - CCListStart - 1
    stmp = x.Range("A" & CStr(CCListStart + 1)).Cells(1, 1).Value
    If itmp > 0 And IsDate(stmp) = True Then
      ReDim CCData(1 To itmp, 1 To 3)
      Set rng = x.Range("A" & CStr(CCListStart + 1))
      For i = 1 To itmp
        For j = 1 To 3
          CCData(i, j) = rng.Cells(1, 1).Offset(i, j - 1)
        Next j
      Next i
      Set rng = Nothing
    Else
      Set x = Nothing
      MsgBox "There is no Cost Code Table loaded.", vbInformation
      Unload Me
    End If
    Set x = Nothing
    With ListBox1
      .ColumnCount = 3
      .ColumnWidths = "55 pt;45 pt;120 pt"
      .List = CCData
      .ListIndex = 0
    End With
End Sub

Private Sub OKButton_Click()
   Dim cRow As String
   If ListBox1.ListIndex >= 0 Then
     On Error Resume Next
     lastUsedCCIndex = CCListStart + 1 + ListBox1.ListIndex + 1
     cRow = CStr(lastUsedCCIndex)
     If ActiveCell.column = 1 Then
       Application.EnableEvents = False
       ActiveCell.Value = CStr(ActiveWorkbook.Sheets("HelpPage").Range("A" & cRow))
       ActiveCell.Offset(0, 1).Value = CStr(ActiveWorkbook.Sheets("HelpPage").Range("B" & cRow))
       ActiveCell.Offset(1, 0).Value = CStr(ActiveWorkbook.Sheets("HelpPage").Range("C" & cRow))
       Application.EnableEvents = True
     ElseIf ActiveCell.column = 2 Then
       Application.EnableEvents = False
       ActiveCell.Value = CStr(ActiveWorkbook.Sheets("HelpPage").Range("B" & cRow))
       ActiveCell.Offset(0, -1).Value = CStr(ActiveWorkbook.Sheets("HelpPage").Range("A" & cRow))
       ActiveCell.Offset(1, -1).Value = CStr(ActiveWorkbook.Sheets("HelpPage").Range("C" & cRow))
       Application.EnableEvents = True
     End If
     On Error GoTo 0
   End If
   Application.EnableEvents = True
   Erase CCData
   Unload Me
End Sub

Private Sub CancelButton_Click()
  Erase CCData
  Unload Me
End Sub

Attribute VB_Name = "ChangePassword"
Attribute VB_Base = "0{18902FD2-72D8-4E20-A31E-2D4112C2F64F}{745A334C-DC3C-4CC4-84EA-5FDDB75A29FC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub cmdCPCancel_Click()
  Unload Me
End Sub

Private Sub cmsCPUpdate_Click()
  Dim tmpPW As String
  Dim tmpStr As String
  If txtNewPassword.Text <> txtNewControl.Text Then
    MsgBox "The password and it's control isn't identical", vbInformation
    txtNewPassword.Text = ""
    txtNewControl.Text = ""
    Exit Sub
  End If
  If Len(Trim(CStr(txtNewPassword.Text))) < 4 Then
     MsgBox "Wrong New Password. Must be at least 4 characters long.", vbInformation
     txtNewPassword.Text = ""
     txtNewControl.Text = ""
     Exit Sub
  End If
  If loginType > 0 Then
    Select Case loginType
      Case 1: tmpStr = U1Pass
      Case 2: tmpStr = U2Pass
      Case 3: tmpStr = U3Pass
      Case 4: tmpStr = U4Pass
      Case Else: tmpStr = ""
    End Select
    If Trim(txtOldPassword.Text) = tmpStr Then
      Dim tmpPos As Integer
      Dim rng As Range
      Set rng = ActiveWorkbook.Sheets("HelpPage").Range("B" & CStr(loginType))
      rng.Value = Trim(CStr(txtNewPassword.Text))
      Set rng = Nothing
      MsgBox "The password has been updated.", vbInformation
    Else
      MsgBox "Wrong Old Password.", vbInformation
    End If
  Else
    MsgBox "Can't change the password (incorrect login type)!", vbInformation
  End If
  Unload Me
End Sub

Private Sub UserForm_activate()
  setUserVariables
End Sub

Attribute VB_Name = "CoramMenu"
Public isMenuBar As Boolean
Public loginType As Integer
Public loginPassed As Integer
Public recentFiles As Integer
Public reCountEmployeeList As Boolean
Public isSheetsProtected As Boolean

'Static Function userType(Optional newType) As Integer
'  Static uType As Integer
'  If Not IsMissing(newType) Then
'    uType = newType
'  End If
'  userType = uType
'End Function

Sub DeleteMenuBar()
    On Error Resume Next
    CommandBars("MyMenuBar").Delete
    enableAllShortcutMenus
    On Error GoTo 0
End Sub

Sub disableAllShortcutMenus()
  Dim cb As CommandBar
  For Each cb In CommandBars
    If cb.Type = msoBarTypePopup Then
      cb.Enabled = False
    End If
  Next cb
  CommandBars("Toolbar List").Enabled = False
  disableMenuPoints
  'disableCutAndPaste
End Sub

Sub enableAllShortcutMenus()
  Dim cb As CommandBar
  For Each cb In CommandBars
    If cb.Type = msoBarTypePopup Then
      cb.Enabled = True
    End If
  Next cb
  CommandBars("Toolbar List").Enabled = True
  enableMenuPoints
  enableCutAndPaste
End Sub

Sub disableMenuPoints()
    Dim TB As CommandBar
    Dim cbp As CommandBarPopup
    Application.ScreenUpdating = False
    With Application.CommandBars("Worksheet Menu bar").Controls("&File")
      .Controls("Open...").Visible = False
      .Controls("Close").Visible = False
      .Controls("New...").Visible = False
      .Controls("Save Workspace...").Visible = False
      .Controls("Properties").Visible = False
      If isSheetsProtected = True Then
        .Controls("Save").Visible = False
        .Controls("Save As...").Visible = False
      End If
      Select Case getVersion
        Case 11: '2003
          .Controls("Web Page Preview").Visible = False
          .Controls("Save as Web Page...").Visible = False
          .Controls("File Searc&h...").Visible = False
        Case 10: 'XP
          .Controls("Web Page Preview").Visible = False
          .Controls("Save as Web Page...").Visible = False
          .Controls("Searc&h...").Visible = False
        Case 9: 'W2000
          .Controls("Web Page Preview").Visible = False
          .Controls("Save as Web Page...").Visible = False
      End Select
    End With
    recentFiles = Application.recentFiles.Maximum
    Application.recentFiles.Maximum = 0
    Set cbp = Application.CommandBars("Worksheet Menu bar").Controls("&File")
    Set cbp = cbp.CommandBar.Controls("Send To")
    Select Case getVersion
      Case 11: '2003
        Set cbpc = cbp.Controls(8)
        cbpc.Visible = False
        Set cbpc = cbp.Controls(7)
        cbpc.Visible = False
        Set cbpc = cbp.Controls(6)
        cbpc.Visible = False
        Set cbpc = cbp.Controls(5)
        cbpc.Visible = False
        Set cbpc = cbp.Controls(3)
        cbpc.Visible = False
      Case 10: 'XP
        Set cbpc = cbp.Controls(6)
        cbpc.Visible = False
        Set cbpc = cbp.Controls(5)
        cbpc.Visible = False
        Set cbpc = cbp.Controls(3)
        cbpc.Visible = False
        Set cbpc = cbp.Controls(2)
        cbpc.Visible = False
      Case 9: 'W2000
        Set cbpc = cbp.Controls(4)
        cbpc.Visible = False
        Set cbpc = cbp.Controls(3)
        cbpc.Visible = False
      Case 8: '97
        Set cbpc = cbp.Controls(3)
        cbpc.Visible = False
    End Select
    If isSheetsProtected = True Then
      cbp.Visible = False
    End If
    Set cbp1 = Nothing
    Set cbp2 = Nothing
    For Each TB In CommandBars
        If TB.Type = msoBarTypeNormal Then
           If TB.Visible Then
              TB.Visible = False
            End If
        End If
    Next TB
    Application.CommandBars("Standard").Visible = True
    With Application.CommandBars("Standard")
      .Reset
      .Protection = msoBarNoCustomize
      .Controls(1).Visible = False
      .Controls(2).Visible = False
      .Controls(8).Visible = False
      .Controls(9).Visible = False
      .Controls(10).Visible = False
      .Controls(16).Visible = False
      .Controls(17).Visible = False
      .Controls(18).Visible = False
      .Controls(19).Visible = False
      .Controls(20).Visible = False
      Select Case getVersion
        Case 11: '2003
          .Controls("Format Painter").Visible = False
          .Controls(4).Visible = False
          .Controls(11).Visible = False
          .Controls(12).Visible = False
          .Controls(21).Visible = False
          .Controls(22).Visible = False
        Case 10: 'XP
          .Controls(5).Visible = False
          .Controls(11).Visible = False
          .Controls(12).Visible = False
          .Controls(15).Visible = False
        Case 9: 'W2000
          .Controls(7).Visible = False
          .Controls(11).Visible = False
          .Controls(14).Visible = False
          .Controls(15).Visible = False
        Case 8: '97
          .Controls(6).Visible = False
          .Controls(7).Visible = False
          .Controls(13).Visible = False
          .Controls(14).Visible = False
          .Controls(15).Visible = False
          .Controls(21).Visible = False
      End Select
      If isSheetsProtected = True Then
        Select Case getVersion
          Case 11: '2003
            .Controls(3).Visible = False
            .Controls(13).Visible = False
            .Controls(14).Visible = False
          Case 10: 'XP
            .Controls(3).Visible = False
            .Controls(4).Visible = False
            .Controls(13).Visible = False
            .Controls(14).Visible = False
          Case 9: 'W2000
            .Controls(3).Visible = False
            .Controls(4).Visible = False
            .Controls(12).Visible = False
            .Controls(13).Visible = False
          Case 8: '97
            .Controls(3).Visible = False
            .Controls(11).Visible = False
            .Controls(12).Visible = False
        End Select
      End If
    End With
    If getVersion = 10 Then
      Call disCustomize(True)
    End If
    Application.ScreenUpdating = True
End Sub

Sub enableMenuPoints()
  Application.CommandBars("Worksheet Menu bar").Controls("&File").Reset
  Application.CommandBars("Standard").Reset
  If getVersion >= 10 Then
    Call disCustomize(False)
  End If
  Application.recentFiles.Maximum = recentFiles
End Sub

Sub CreateMenuBar()
    Dim NewMenuBar As CommandBar
    Dim NewMenu As CommandBarPopup
'   Delete the menu if it already exists
    Call DeleteMenuBar
'   Add a menu bar
    Set NewMenuBar = CommandBars.Add(MenuBar:=True)
    With NewMenuBar
        .name = "MyMenuBar"
        .Visible = True
    End With
'   Copy the File menu from Worksheet Menu Bar
    CommandBars("Worksheet Menu Bar").Controls(1).Copy _
      Bar:=CommandBars("MyMenuBar")
'   Add a new menu
    Set NewMenu = NewMenuBar.Controls.Add _
      (Type:=msoControlPopup)
'   Add a caption for the menu
    NewMenu.Caption = "&Pagnotta"
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlPopup)
    With MenuItem
        .Caption = "&Login to Time Sheet"
        .BeginGroup = True
    End With
    Set submenuitem = MenuItem.Controls.Add _
      (Type:=msoControlButton)
    With submenuitem
        .Caption = "Change Password"
        .FaceId = 277
        .OnAction = "Macro12"
    End With
    Set submenuitem = MenuItem.Controls.Add _
      (Type:=msoControlButton)
    With submenuitem
        .Caption = "Update User Information"
        .FaceId = 225
        If loginType = 3 Then
          .Enabled = True
        Else
          .Enabled = False
        End If
        .OnAction = "Macro14"
    End With
    Set submenuitem = MenuItem.Controls.Add _
      (Type:=msoControlButton)
    With submenuitem
        .Caption = "Administrator"
        .FaceId = 48
        .OnAction = "Macro7"
    End With
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlPopup)
    With MenuItem
        .Caption = "&Add Item"
        .BeginGroup = True
    End With
    Set submenuitem = MenuItem.Controls.Add _
      (Type:=msoControlButton)
    With submenuitem
        .Caption = "Add Employee"
        .FaceId = 0
        .OnAction = "Macro1"
    End With
    Set submenuitem = MenuItem.Controls.Add _
      (Type:=msoControlButton)
    With submenuitem
        .Caption = "Add Cost Code Page"
        .FaceId = 0
        .OnAction = "Macro2"
    End With
    Set submenuitem = MenuItem.Controls.Add _
      (Type:=msoControlButton)
    With submenuitem
        .Caption = "Add Travel Time"
        .FaceId = 0
        .OnAction = "Macro3"
    End With
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlPopup)
    With MenuItem
        .Caption = "&Delete Item"
        '.BeginGroup = True
    End With
    Set submenuitem = MenuItem.Controls.Add _
      (Type:=msoControlButton)
    With submenuitem
        .Caption = "Delete Employee"
        .FaceId = 0
        .OnAction = "Macro4"
    End With
    Set submenuitem = MenuItem.Controls.Add _
      (Type:=msoControlButton)
    With submenuitem
        .Caption = "Delete Cost Code Page"
        .FaceId = 0
        .OnAction = "Macro5"
    End With
    Set submenuitem = MenuItem.Controls.Add _
      (Type:=msoControlButton)
    With submenuitem
        .Caption = "Delete Travel Time"
        .FaceId = 0
        .OnAction = "Macro6"
    End With
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlButton)
    With MenuItem
        .Caption = "&Clean Up the Sheet"
        .OnAction = "Macro8"
        .BeginGroup = True
        '.FaceId = 0
    End With
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlButton)
    With MenuItem
        .Caption = "Clean Up All Sheet&s !"
        .OnAction = "Macro9"
        '.FaceId = 0
    End With
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlButton)
    With MenuItem
        .Caption = "Load Cost Code &Names"
        .OnAction = "loadCCN"
        .FaceId = 221
    End With
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlButton)
    With MenuItem
        .Caption = "Post C&urrent Time Card"
        .OnAction = "postCurrentTimeCard"
        .FaceId = 271
        .BeginGroup = True
    End With
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlButton)
    With MenuItem
        .Caption = "R&etrieve Time Card"
        .OnAction = "retrieveTimeCard"
        .FaceId = 270
    End With
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlButton)
    With MenuItem
        .Caption = "All Page &Print Setup"
        .OnAction = "setPrintPagesParams"
        .FaceId = 160
        .BeginGroup = True
    End With
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlButton)
    With MenuItem
        .Caption = "C&over Page Print Setup"
        .OnAction = "setCOVERPageParams"
        .FaceId = 159
    End With
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlButton)
    With MenuItem
        .Caption = "P&rint"
        .OnAction = "ShowFormPrint"
        .FaceId = 4
    End With
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlButton)
    With MenuItem
        .Caption = "S&tart Calculator"
        .FaceId = 50 '283
        .OnAction = "StartCalculator"
        .BeginGroup = True
    End With
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlButton)
    With MenuItem
        .Caption = "&Help"
        .OnAction = "ShowFormHelp"
        .FaceId = 49
    End With
    isMenuBar = True
    disableAllShortcutMenus
End Sub

Sub CreateMenu()
    Dim NewMenu As CommandBarPopup
'   Delete the menu if it already exists
    Call DeleteMenu
'   Find the Help Menu
    Set HelpMenu = CommandBars(1).FindControl(ID:=30010)
    If HelpMenu Is Nothing Then
'       Add the menu to the end
        Set NewMenu = CommandBars(1).Controls.Add _
          (Type:=msoControlPopup, _
           temporary:=True)
    Else
'      Add the menu before Help
        Set NewMenu = CommandBars(1).Controls.Add _
          (Type:=msoControlPopup, _
           Before:=HelpMenu.index, _
           temporary:=True)
    End If
'   Add a caption for the menu
    NewMenu.Caption = "&Pagnotta"
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlPopup)
    With MenuItem
        .Caption = "&Login to Time Sheet"
        .BeginGroup = True
    End With
    Set submenuitem = MenuItem.Controls.Add _
      (Type:=msoControlButton)
    With submenuitem
        .Caption = "Change Password"
        .FaceId = 277
        .OnAction = "Macro12"
    End With
    Set submenuitem = MenuItem.Controls.Add _
      (Type:=msoControlButton)
    With submenuitem
        .Caption = "Update User Information"
        .FaceId = 225
        .OnAction = "Macro14"
    End With
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlPopup)
    With MenuItem
        .Caption = "&Add Item"
        .BeginGroup = True
    End With
    Set submenuitem = MenuItem.Controls.Add _
      (Type:=msoControlButton)
    With submenuitem
        .Caption = "Add Employee"
        .FaceId = 0
        .OnAction = "Macro1"
    End With
    Set submenuitem = MenuItem.Controls.Add _
      (Type:=msoControlButton)
    With submenuitem
        .Caption = "Add Cost Code Page"
        .FaceId = 0
        .OnAction = "Macro2"
    End With
    Set submenuitem = MenuItem.Controls.Add _
      (Type:=msoControlButton)
    With submenuitem
        .Caption = "Add Travel Time"
        .FaceId = 0
        .OnAction = "Macro3"
    End With
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlPopup)
    With MenuItem
        .Caption = "&Delete Item"
        '.BeginGroup = True
    End With
    Set submenuitem = MenuItem.Controls.Add _
      (Type:=msoControlButton)
    With submenuitem
        .Caption = "Delete Employee"
        .FaceId = 0
        .OnAction = "Macro4"
    End With
    Set submenuitem = MenuItem.Controls.Add _
      (Type:=msoControlButton)
    With submenuitem
        .Caption = "Delete Cost Code Page"
        .FaceId = 0
        .OnAction = "Macro5"
    End With
    Set submenuitem = MenuItem.Controls.Add _
      (Type:=msoControlButton)
    With submenuitem
        .Caption = "Delete Travel Time"
        .FaceId = 0
        .OnAction = "Macro6"
    End With
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlButton)
    With MenuItem
        .Caption = "&Clean Up the Sheet"
        .OnAction = "Macro8"
        .BeginGroup = True
        '.FaceId = 0
    End With
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlButton)
    With MenuItem
        .Caption = "Clean Up All Sheet&s !"
        .OnAction = "Macro9"
        '.FaceId = 0
    End With
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlButton)
    With MenuItem
        .Caption = "Load Cost Code &Names"
        .OnAction = "loadCCN"
        .FaceId = 221
    End With
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlButton)
    With MenuItem
        .Caption = "Post C&urrent Time Card"
        .OnAction = "postCurrentTimeCard"
        .FaceId = 271
        .BeginGroup = True
    End With
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlButton)
    With MenuItem
        .Caption = "R&etrieve Time Card"
        .OnAction = "retrieveTimeCard"
        .FaceId = 270
    End With
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlButton)
    With MenuItem
        .Caption = "All Page &Print Setup"
        .OnAction = "setPrintPagesParams"
        .BeginGroup = True
        .FaceId = 160
    End With
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlButton)
    With MenuItem
        .Caption = "C&over Page Print Setup"
        .OnAction = "setCOVERPageParams"
        .FaceId = 159
    End With
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlButton)
    With MenuItem
        .Caption = "P&rint"
        .OnAction = "ShowFormPrint"
        .FaceId = 4
    End With
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlButton)
    With MenuItem
        .Caption = "S&tart Calculator"
        .FaceId = 50 '283
        .OnAction = "StartCalculator"
        .BeginGroup = True
    End With
    Set MenuItem = NewMenu.Controls.Add _
      (Type:=msoControlButton)
    With MenuItem
        .Caption = "&Help"
        .OnAction = "ShowFormHelp"
        .FaceId = 49
    End With
    isMenuBar = False
End Sub

Sub DeleteMenu()
    On Error Resume Next
    CommandBars(1).Controls("Pagnotta").Delete
    On Error GoTo 0
End Sub
 
Public Sub retrieveMenus()
    DeleteMenuBar
    CreateMenu
End Sub

Attribute VB_Name = "DateList"
Attribute VB_Base = "0{D348E0EB-0F05-466D-A5D5-5839E9436ED9}{C2C7D91B-7DC7-446B-9D70-7F21A448648F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub cmdDLCancel_Click()
  Unload Me
End Sub

Private Sub cmdUpdate_Click()
  Dim dt As Date
  dt = CDate(lbDateList.Text)
  Application.EnableEvents = False

  If isSheetsProtected = False Then
    
    ActiveWorkbook.Sheets("COVER").Unprotect
    ActiveWorkbook.Sheets("COVER").Range("ScheduleDate").Cells(1, 1).Value = dt
    ActiveWorkbook.Sheets("COVER").Protect DrawingObjects:=False, Contents:=True, Scenarios:=False
    
  End If
  
  Application.EnableEvents = True
  Unload Me
End Sub

Private Sub UserForm_Initialize()
  Dim dt As Date
  Dim rng As Range
  Dim sequence As Long
  Dim dtFormat As String
  Set rng = ActiveWorkbook.Sheets("COVER").Range("ScheduleDate").Cells(1, 1)
  dt = Now()
  dtFormat = "mmmm d, yyyy"
  If Not Application.IsErr(rng) And IsDate(rng.Value) Then
    dt = CDate(rng.Value)
    dtFormat = CStr(rng.NumberFormat)
  End If
  sequence = DateDiff("s", "1969-12-31 17:00:00", Format(dt, "yyyy-MM-dd HH:mm:ss"))
  For i = -5 To 10
    lbDateList.AddItem Format(DateAdd("s", sequence + i * 604800, "1969-12-31 17:00:00"), dtFormat)
  Next i
  lbDateList.ListIndex = 6
  Set rng = Nothing
End Sub
Attribute VB_Name = "EmpDelete"
Attribute VB_Base = "0{A1893657-128D-48DC-B835-62FA3035AAF2}{EC0D743B-3EB1-4B26-B020-7BCE4A87886C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Dim wbs() As String
Dim activeWSName As String

Private Sub SelectAllButton_Click()
    For r = 0 To ListBox1.ListCount - 1
        ListBox1.Selected(r) = True
    Next r
End Sub

Private Sub SelectNoneButton_Click()
    For r = 0 To ListBox1.ListCount - 1
        ListBox1.Selected(r) = False
    Next r
End Sub

Sub UserForm_Initialize()
    Dim SheetData() As String
    Dim shtnum As Integer
    Dim sName As String
    shtnum = getEmployeePageCount()
    activeWSName = ActiveSheet.name
    If shtnum > 0 Then
    ReDim SheetData(1 To shtnum, 1 To 2)
    ReDim wbs(1 To shtnum)
    shtnum = 0
    For Each sht In ActiveWorkbook.Sheets
      If TypeName(sht) = "Worksheet" Then
        If isEmployeePage(sht.name) Then
           shtnum = shtnum + 1
           wbs(shtnum) = sht.name
           sName = "'" & sht.name & "'!EmployeeID"
           If Not Application.IsErr(sht.Range(sName).Cells(1, 1)) Then
             SheetData(shtnum, 1) = CStr(sht.Range(sName).Cells(1, 1))
           Else
             SheetData(shtnum, 1) = ""
           End If
           sName = "'" & sht.name & "'!EmployeeName"
           If Not Application.IsErr(sht.Range(sName).Cells(1, 1)) Then
             SheetData(shtnum, 2) = CStr(sht.Range(sName).Cells(1, 1))
           Else
             SheetData(shtnum, 2) = ""
           End If
        End If
      End If
    Next sht
    With ListBox1
        .ColumnCount = 2
        .ColumnWidths = "40 pt;120 pt"
        .List = SheetData
        .ListIndex = 0
    End With
    End If
End Sub

Private Sub OKButton_Click()
    If MsgBox("Are you sure?", vbYesNo) = vbYes Then
      Dim sName As String
      For r = 0 To ListBox1.ListCount - 1
        If ListBox1.Selected(r) Then
          sName = wbs(r + 1)
          If sName = activeWSName Then
            activeWSName = "COVER"
          End If
          Application.DisplayAlerts = False
          ActiveWorkbook.Sheets(sName).Delete
          Call deleteEmployeeListItem(sName)
          Call clearLogFor(sName)
          Application.DisplayAlerts = True
        End If
      Next r
      ActiveWorkbook.Sheets(activeWSName).Activate
      Call checkActiveSheet(activeWSName)
      Unload Me
    End If
End Sub

Private Sub CancelButton_Click()
    Unload Me
End Sub

Private Sub ListBox1_Change()
    lblRowCol = "Row " & ListBox1.ListIndex + 1
End Sub

Attribute VB_Name = "EmployeeInput"
Attribute VB_Base = "0{06452372-F13A-4F94-A8BE-F837FCD5E420}{2671C6A3-72CA-4E4E-9FB8-BBD1AE09DC94}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub cmdAdd_Click()
  If Len(Trim(txtName.Text)) < 3 Then
    MsgBox "Wrong Employee Name."
  Else
    If myCopy = True Then
      Unload Me
    End If
  End If
End Sub

Private Sub cmdCancel_Click()
  Unload Me
End Sub

Function myCopy() As Boolean
  Dim sName As String
  Dim cName As String
  Dim shortName As String
  Dim cnt As Integer
  Dim rng As Range
  Dim sRow As Integer
  Dim Flag As Boolean
  myCopy = False
  sName = ValidateName(Trim(txtName.Text))
  If sName = "" Then
    MsgBox "Wrong employee name."
    Exit Function
  End If
  shortName = getShortName(sName)
  
  Application.ScreenUpdating = False
  
  'Call createNewSheet(shortName)
  Sheets("AB").Copy After:=Sheets(Worksheets.Count)
  Sheets("AB (2)").name = shortName
  Sheets(shortName).Visible = True
  
        
        
  With Worksheets(shortName)
    On Error Resume Next
    Application.EnableEvents = False
    cName = "'" & shortName & "'!EmployeeID"
    If txtID.Text <> vbNullString And Len(Trim(txtID.Text)) > 0 Then
      .Range(cName).Cells(1, 1).Value = Trim(txtID.Text)
    Else
      .Range(cName).Cells(1, 1).Value = ""
    End If
    cName = "'" & shortName & "'!EmployeeName"
    .Range(cName).Cells(1, 1).Value = sName
    Application.EnableEvents = True
  End With
  Application.ScreenUpdating = True
  ReSortSheets
  UpdateEmployeeList
  checkActiveSheet
  myCopy = True
End Function

Attribute VB_Name = "Employeelist"
Sub MakeEmployeeList()
    Dim cnt As Integer
    Dim ListPos As Integer
    Dim rng As Range
    Dim TBar As CommandBar
    Dim NewDD As CommandBarControl
'   Delete existing toolbar if it exists
    On Error Resume Next
    CommandBars("EmployeeList").Delete
    On Error GoTo 0
'   Create a new toolbar
    Set TBar = CommandBars.Add
    With TBar
        .name = "EmployeeList"
        .Position = msoBarTop 'msoBarFloating
        '.RowIndex = msobarrow
        '.Left = 500
        .Visible = True
    End With
'   Add a DropDown control
    Set NewDD = CommandBars("EmployeeList").Controls.Add _
      (Type:=msoControlDropdown)
    With NewDD
        .Caption = "EmpList"
        .OnAction = "ChangeActiveSheet"
        .Style = msoButtonAutomatic
        .BeginGroup = True
        .Width = 200
        cnt = 0
        ListPos = 1
        Application.ScreenUpdating = False
        For Each sht In ActiveWorkbook.Sheets
          If sht.Visible Then
            If isEmployeePage(sht.name) = False Then
              .AddItem sht.name
            Else
              Set rng = ActiveWorkbook.Sheets(sht.name).Range("EmployeeName")
              .AddItem Trim(CStr(rng.Value))
              Set rng = Nothing
            End If
            cnt = cnt + 1
            If sht.name = ActiveSheet.name Then
              ListPos = cnt
            End If
          End If
        Next sht
        Application.ScreenUpdating = False
        If cnt > 0 Then
          .ListIndex = ListPos
          .Visible = True
        Else
          .Visible = False
        End If
    End With
    reCountEmployeeList = True
End Sub

Function SetEmployeeList() As Integer
    Dim ListPos As Integer
    Dim sName As String
    Dim rng As Range
    SetEmployeeList = 0
    ListPos = 1
    sName = ActiveSheet.name
    On Error Resume Next
    intTest = Application.CommandBars("EmployeeList").index
    On Error GoTo 0
    If intTest <> Empty Then
        With CommandBars("EmployeeList").Controls("EmpList")
          Application.ScreenUpdating = False
          .Clear
          For Each sht In ActiveWorkbook.Sheets
            If sht.Visible Then
              If isEmployeePage(sht.name) = False Then
                .AddItem sht.name
              Else
                Set rng = ActiveWorkbook.Sheets(sht.name).Range("EmployeeName")
                .AddItem Trim(CStr(rng.Value))
                Set rng = Nothing
              End If
              SetEmployeeList = SetEmployeeList + 1
              If sht.name = ActiveSheet.name Then
                ListPos = SetEmployeeList
              End If
            End If
          Next sht
          If SetEmployeeList > 0 Then
            .ListIndex = ListPos
          End If
          Application.ScreenUpdating = True
        End With
    End If
End Function

Sub ChangeActiveSheet()
    Dim rng As Range
    Dim sName As String
    On Error Resume Next
    With CommandBars("EmployeeList").Controls("EmpList")
        sName = .List(.ListIndex)
        reCountEmployeeList = False
        If sName = "COVER" Or sName = "Employee" Or sName = "LogPage" Or sName = "HelpPage" Then
          ActiveWorkbook.Sheets(sName).Activate
        Else
          For Each sht In ActiveWorkbook.Sheets
            If sht.Visible Then
              If isEmployeePage(sht.name) = True Then
                Set rng = ActiveWorkbook.Sheets(sht.name).Range("EmployeeName")
                If Trim(CStr(rng.Value)) = sName Then
                  ActiveWorkbook.Sheets(sht.name).Activate
                  Set rng = Nothing
                  Exit For
                End If
                Set rng = Nothing
              End If
            End If
          Next sht
        End If
        reCountEmployeeList = True
    End With
End Sub

Sub deleteEmployeeListItem(wbname As String)
  SetEmployeeList
End Sub

Public Sub UpdateEmployeeList()
  SetEmployeeList
End Sub
Attribute VB_Name = "FormHelp"
Attribute VB_Base = "0{3BA50998-4019-4E5A-BE02-AA9A6415B141}{C4E4F4BA-5210-4BE0-8F22-BD97C3BF68DD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Dim TopicCount As Integer
Dim CurrentTopic As Integer
Dim HelpSheet As Worksheet

Const HelpSheetName As String = "HelpPage"
Const HelpFormCaption As String = "CORAM TimeCard Help"

Private Sub UserForm_Initialize()
'   Executed before the form is shown
    Dim Row As Integer
    Set HelpSheet = ThisWorkbook.Sheets(HelpSheetName)
    'TopicCount = Application.WorksheetFunction.CountA(HelpSheet.Range("A:A")) - TopicStart
    TopicCount = CCListStart - TopicStart - 1
    For Row = 1 To TopicCount
        ComboBoxTopics.AddItem HelpSheet.Cells(Row + TopicStart, 1)
    Next Row
    ComboBoxTopics.ListIndex = 0
    CurrentTopic = 1
    UpdateForm
End Sub

Private Sub UpdateForm()
    If TopicStart < 10 Then
      Exit Sub
    End If
    ComboBoxTopics.ListIndex = CurrentTopic - 1
    Me.Caption = HelpFormCaption & _
      " (" & CurrentTopic & " of " & TopicCount & ")"
    
    With LabelText
        .Caption = HelpSheet.Cells(CurrentTopic + TopicStart, 2)
        .AutoSize = False
        .Width = 270
        .AutoSize = True
    End With
    With Frame1
        .ScrollHeight = LabelText.Height + 5
        .ScrollTop = 1
    End With
       
    On Error Resume Next
    If CurrentTopic = 1 Then PreviousButton.Enabled = False _
      Else PreviousButton.Enabled = True
    If CurrentTopic = TopicCount Then NextButton.Enabled = False _
      Else NextButton.Enabled = True
    If NextButton.Enabled Then NextButton.SetFocus _
      Else PreviousButton.SetFocus
End Sub

Private Sub ComboBoxTopics_Click()
'   Executed when the ComboBox is changed
    CurrentTopic = ComboBoxTopics.ListIndex + 1
    UpdateForm
End Sub

Private Sub PreviousButton_Click()
'   Executed when the PreviousButton is clicked
    If CurrentTopic <> 1 Then
        CurrentTopic = CurrentTopic - 1
        UpdateForm
    End If
End Sub

Private Sub NextButton_Click()
'   Executed when the NextButton is clicked
    If CurrentTopic <> TopicCount Then
        CurrentTopic = CurrentTopic + 1
        UpdateForm
    End If
End Sub

Private Sub ExitButton_Click()
'   Executed when the ExitButton is clicked
    Unload Me
End Sub

Attribute VB_Name = "LoadTCData"
Global retrieveFileName As String

Private Type sInfo
  name As String
  tt As Boolean
  cc As Boolean
'  processed As Boolean
End Type

'Private Type sInfoCreate
'  existsInfo As sInfo
'  loadInfo As sInfo
'End Type

Dim sheetInfo() As sInfo
'Dim sheetInfoExists() As sInfo
'Dim sheetInfoLoad() As sInfoCreate

Private Function getNextValueTCR(FileNum As Integer) As String
  Dim lng As String
  Dim lsTemp As String
  Dim bTemp As Byte
  Dim l As Integer
  Dim i As Integer
  'lsTemp = Err.Description
  Err.Clear
  getNextValueTCR = ""
  lsTemp = ""
  If binaryIO > 0 Then
    Get #FileNum, , bTemp
    bTemp = bTemp Xor binaryIO
    l = CInt(bTemp)
    For i = 1 To l
      If Not EOF(FileNum) Then
        Get #FileNum, , bTemp
        bTemp = bTemp Xor binaryIO
        lsTemp = lsTemp & CStr(Chr(bTemp))
      Else
        MsgBox "Error in length of data", vbInformation
      End If
    Next i
    getNextValueTCR = lsTemp
  Else
    Input #FileNum, lng
    Line Input #FileNum, getNextValueTCR
  End If
  If Err <> 0 Then
    lsTemp = Err.Description
    getNextValueTCR = ""
    Err.Clear
  End If
End Function

Public Function checkAuthorization(fName As String) As Boolean
  Dim supi As String
  Dim fori As String
  Dim FileNum As Integer
  checkAuthorization = False
  If loginType > 2 Then
    checkAuthorization = True
  Else
    FileNum = FreeFile
    On Error GoTo checkAuthorization_Err
    If binaryIO > 0 Then
      Open fName For Binary Access Read As #FileNum Len = 1
      Get #FileNum, , binaryIO
    Else
      Open fName For Input As #FileNum
    End If
    fori = getNextValueTCR(FileNum) 'client
    fori = getNextValueTCR(FileNum) 'project
    fori = getNextValueTCR(FileNum) 'batch
    fori = getNextValueTCR(FileNum) 'ScheduleDate
    'retrieve superintendent info
    supi = UCase(Trim(CStr(ActiveWorkbook.Sheets("HelpPage").Range("C2").Value) & ""))
    If supi = UCase(Trim(getNextValueTCR(FileNum) & "")) Then
      If loginType = 2 Then
        checkAuthorization = True
      Else
        'retrieve foreman info
        fori = UCase(Trim(CStr(ActiveWorkbook.Sheets("HelpPage").Range("C1").Value) & ""))
        If fori = UCase(Trim(getNextValueTCR(FileNum) & "")) Then
          checkAuthorization = True
        End If
      End If
    End If
    Close FileNum
  End If
  Exit Function
checkAuthorization_Err:
  On Error GoTo 0
  Close FileNum
  If Not (Err Is Nothing) Then
    If Err.Description <> "" Then
      MsgBox Err.Description & vbCrLf, vbCritical, "Error at loading binary Time Card file"
    End If
    Err.Clear
  End If
End Function

Public Sub LoadAllUserData()
  Dim x As Object, counter As Integer
  Dim xval As Variant, FileNum As Integer
  Dim itmp As Integer, stmp As String
  Dim sht As Worksheet
  Dim errmsg As String, i As Integer, j As Integer, k As Integer
  Dim rng As Range
  Dim nrOfSheets As Integer
  Dim finMatch As Boolean, Flag As Boolean, Flag2 As Boolean
  Dim sheetNames() As String
  errmsg = ""
  'Disable Ctrl+Break
  Application.EnableCancelKey = xlDisabled
  On Error GoTo loadFileTCP_Err
  Application.ScreenUpdating = False
  'delete employee pages
  itmp = getEmployeePageCount()
  If itmp > 0 Then
    counter = 1
    Application.DisplayAlerts = False
    For Each sht In ActiveWorkbook.Sheets
      If isEmployeePage(sht.name) = True Then
        Call clearLogFor(sht.name)
        sht.Delete
        Call UpdateProgressLoad(0.33 * (CDbl(counter) / CDbl(itmp)))
        counter = counter + 1
      End If
    Next sht
    Application.DisplayAlerts = True
  End If
  FileNum = FreeFile
  If binaryIO > 0 Then
    Open retrieveFileName For Binary Access Read As #FileNum Len = 1
    Get #FileNum, , binaryIO
  Else
    Open retrieveFileName For Input As #FileNum
  End If
  'Values from the cover
  'Client
  stmp = getNextValueTCR(FileNum)
  ActiveWorkbook.Sheets("COVER").Range("D17").Cells(1, 1).Value = stmp
  'Call setCellValue(stmp, "COVER", "D17")
  'Project
  stmp = getNextValueTCR(FileNum)
  ActiveWorkbook.Sheets("COVER").Range("F17").Cells(1, 1).Value = stmp
  'Call setCellValue(stmp, "COVER", "F17")
  'Batch
  stmp = getNextValueTCR(FileNum)
  ActiveWorkbook.Sheets("COVER").Range("B23").Cells(1, 1).Value = stmp
  'Call setCellValue(stmp, "COVER", "B23")
  'ScheduleDate
  stmp = getNextValueTCR(FileNum)
  ActiveWorkbook.Sheets("COVER").Range("B17").Cells(1, 1).Value = CDate(stmp)
  'Call setCellValue(stmp, "COVER", "B17")
  'Superintendent
  stmp = getNextValueTCR(FileNum)
  ActiveWorkbook.Sheets("HelpPage").Range("C2").Cells(1, 1).Value = stmp
  'Call setCellValue(stmp, "HelpPage", "C2")
  'Foreman
  stmp = getNextValueTCR(FileNum)
  ActiveWorkbook.Sheets("HelpPage").Range("C1").Cells(1, 1).Value = stmp
  'Call setCellValue(stmp, "HelpPage", "C1")
  'Start handeling sheets
  'First the number of the sheets
  nrOfSheets = CInt(getNextValueTCR(FileNum))
  If nrOfSheets > 0 Then
    errmsg = "TimeCard incompatibility. This is probably a weekly TimeCard Binary file."
    Resume loadFileTCP_Err
  End If
  nrOfSheets = CInt(getNextValueTCR(FileNum))
  If nrOfSheets > 0 Then
    ReDim sheetInfo(1 To nrOfSheets)
    ReDim sheetNames(1 To nrOfSheets)
    'Create the new sheet
    For counter = 1 To nrOfSheets
      'Name of the sheet
      stmp = Trim(getNextValueTCR(FileNum) & "")
      sheetInfo(counter).name = stmp
      sheetNames(counter) = stmp
      'Has Travel Time page
      stmp = getNextValueTCR(FileNum)
      If stmp = "Y" Then
        sheetInfo(counter).tt = True
        Call createNewSheetBase(sheetInfo(counter).name, False)
      Else
        sheetInfo(counter).tt = False
        Call createNewSheetBase(sheetInfo(counter).name, True)
      End If
      'Has extra Cost Code page
      stmp = getNextValueTCR(FileNum)
      If stmp = "Y" Then
        Call insertCCFor(sheetInfo(counter).name)
        sheetInfo(counter).cc = True
      Else
        sheetInfo(counter).cc = False
      End If
      Call UpdateProgressLoad(0.33 + 0.33 * (CDbl(counter) / CDbl(nrOfSheets + 3)))
    Next counter
    'sort sheet names
    Call BubbleSort(sheetNames)
    Call UpdateProgressLoad(0.33 + 0.33 * (CDbl(counter) / CDbl(nrOfSheets + 3)))
    counter = counter + 1
    'sort sheets
    ActiveWorkbook.Sheets("Employee").Move ActiveWorkbook.Sheets(1)
    ActiveWorkbook.Sheets("Employee").Visible = xlSheetHidden
    ActiveWorkbook.Sheets("HelpPage").Move ActiveWorkbook.Sheets(2)
    ActiveWorkbook.Sheets("HelpPage").Visible = xlSheetHidden
    ActiveWorkbook.Sheets("LogPage").Move ActiveWorkbook.Sheets(3)
    ActiveWorkbook.Sheets("COVER").Move ActiveWorkbook.Sheets(4)
    ActiveWorkbook.Sheets("CCSummary").Move ActiveWorkbook.Sheets(5)
    ActiveWorkbook.Sheets("TDetail").Move ActiveWorkbook.Sheets(6)
    If loginType <> 4 Then
      ActiveWorkbook.Sheets("LogPage").Visible = xlSheetHidden
    End If
    Call UpdateProgressLoad(0.33 + 0.33 * (CDbl(counter) / CDbl(nrOfSheets + 3)))
    counter = counter + 1
    For i = 1 To nrOfSheets
      If ActiveWorkbook.Sheets(i + 6).name <> sheetNames(i) Then
        ActiveWorkbook.Sheets(sheetNames(i)).Move ActiveWorkbook.Sheets(i + 6)
      End If
    Next i
    Erase sheetNames
    Call UpdateProgressLoad(0.33 + 0.33 * (CDbl(counter) / CDbl(nrOfSheets + 3)))
    'load all employee data one by one
    For counter = 1 To nrOfSheets
      'load all the sheet parameters
      Set x = ActiveWorkbook.Sheets(sheetInfo(counter).name)
      Application.EnableEvents = False
      'Employee ID
      x.Range("EmployeeID").Value = getNextValueTCR(FileNum)
      'Employee Name
      x.Range("EmployeeName").Value = getNextValueTCR(FileNum)
      'Comments
      x.Range("TotalOvertime").Offset(3, -2).Value = getNextValueTCR(FileNum)
      x.Range("TotalOvertime").Offset(4, -3).Value = getNextValueTCR(FileNum)
      Application.EnableEvents = True
      'travel time components
      itmp = -1
      If sheetInfo(counter).tt = True Then
        itmp = itmp - 5
        'rate1
        x.Range("TotalOvertime").Offset(-2, 3).Value = getNextValueTCR(FileNum)
        'days1
        x.Range("TotalOvertime").Offset(-2, 5).Value = getNextValueTCR(FileNum)
        'rate2
        x.Range("TotalOvertime").Offset(-2, 8).Value = getNextValueTCR(FileNum)
        'days2
        x.Range("TotalOvertime").Offset(-2, 9).Value = getNextValueTCR(FileNum)
        'travel time line
        For i = 1 To 7
          For k = 0 To 1
            x.Range("TotalOvertime").Offset(-4, k * 8 + i).Value = getNextValueTCR(FileNum)
          Next k
        Next i
      End If
      'working hour data
      Set rng = x.Range(x.Range("DataStartPos").Offset(0, -2), x.Range("TotalOT").Offset(itmp, 0))
      itmp = rng.Rows.Count
      'Number of items
      If itmp <> CInt(getNextValueTCR(FileNum)) * 2 Then
        errmsg = "Inconsistent number of lines at load cost code information"
        Resume loadFileTCP_Err
      End If
      Application.EnableEvents = False
      i = 1
      Do While i < itmp
        'job code
        stmp = Trim(getNextValueTCR(FileNum) & "")
        If Len(stmp) > 0 Then
          If IsNumeric(stmp) = True Then
            stmp = "'" & stmp
          End If
          rng.Cells(i, 1).Offset(0, -2).Value = stmp
        End If
        'cost code
        stmp = Trim(getNextValueTCR(FileNum) & "")
        If Len(stmp) > 0 Then
          If IsNumeric(stmp) = True Then
            stmp = "'" & stmp
          End If
          rng.Cells(i, 1).Offset(0, -1).Value = stmp
        End If
        'cost code name
        stmp = Trim(getNextValueTCR(FileNum) & "")
        If Len(stmp) > 0 Then
          rng.Cells(i, 1).Offset(1, -2).Value = stmp
        End If
        'OT values for the week
        For j = 1 To 7
          For k = 0 To 1
            stmp = Trim(getNextValueTCR(FileNum) & "")
            If Len(stmp) > 0 Then
              rng.Cells(i, 1).Offset(0, 1 + 8 * k + j).Value = CDbl(stmp)
            End If
          Next k
        Next j
        'ST values for the week
        For j = 1 To 7
          For k = 0 To 1
            stmp = Trim(getNextValueTCR(FileNum) & "")
            If Len(stmp) > 0 Then
              rng.Cells(i + 1, 1).Offset(0, 1 + 8 * k + j).Value = CDbl(stmp)
            End If
          Next k
        Next j
        i = i + 2
      Loop
      Set rng = Nothing
      Application.EnableEvents = True
      Set x = Nothing
      Call UpdateProgressLoad(0.66 + 0.33 * (CDbl(counter) / CDbl(nrOfSheets)))
    Next counter
    'logging data number of lines
    Set x = ActiveWorkbook.Sheets("LogPage")
    itmp = (x.UsedRange.Row - 1 + x.UsedRange.Rows.Count) - 1
    If itmp > 0 Then
      x.Range(x.Cells(2, 1), x.Cells(itmp + 1, 5)).Value = ""
    End If
    itmp = CInt(getNextValueTCR(FileNum)) 'maybe clng
    If itmp > 0 Then
      Set rng = x.Range("A1")
      For i = 1 To itmp
        For j = 0 To 5
          stmp = getNextValueTCR(FileNum)
          rng.Cells(1, 1).Offset(i, j).Value = stmp
        Next j
      Next i
      Set rng = Nothing
    End If
    Set x = Nothing
  End If
  Call UpdateProgressLoad(1#)
  ActiveWorkbook.Sheets("COVER").Activate
  Application.Calculate
  Call checkActiveSheet("COVER")
  Close FileNum
  If nrOfSheets > 0 Then
    Erase sheetInfo
  End If
  Application.ScreenUpdating = True
  Application.DisplayAlerts = True
  Application.EnableEvents = True
  Unload ProgressLoad
  Exit Sub
loadFileTCP_Err:
  On Error GoTo 0
  Application.ScreenUpdating = True
  Application.DisplayAlerts = True
  Application.EnableEvents = True
  Close FileNum
  If errmsg & "" <> "" Then
    errmsg = errmsg & vbCrLf & vbCrLf & "File has not been loaded!"
  Else
    errmsg = "File has not been loaded!"
  End If
  If Not (Err Is Nothing) Then
    If Err.Description <> "" Then
      errmsg = errmsg & vbCrLf & vbCrLf & "Error: " & Err.Description & vbCrLf
    End If
    Err.Clear
  End If
  MsgBox errmsg, vbCritical, "Error at loading binary Time Card from file"
  Unload ProgressLoad
End Sub

Attribute VB_Name = "Logging"
Public Sub clearLogFor(sName As String)
  Dim lastRow As Long, currRow As Long
  Dim rng As Range
  Dim theCell As Range
  With ActiveWorkbook.Sheets("LogPage")
    lastRow = .UsedRange.Row - 1 + .UsedRange.Rows.Count
    If lastRow > 1 Then
      Set rng = Range(.Cells(1, 3), .Cells(lastRow, 3))
      currRow = 1
      On Error Resume Next
      Do While True
        Set theCell = rng.Find(What:=sName, _
          After:=.Cells(currRow, 3), _
          LookIn:=xlValues, _
          LookAt:=xlPart, _
          SearchOrder:=xlByRows, _
          MatchCase:=False _
        )
        If Err <> 0 Then
          Err = 0
          Exit Do
        Else
          If theCell Is Nothing Then
            Exit Do
          End If
          currRow = theCell.Row
          Set theCell = Nothing
        End If
        .Rows(currRow).Delete
        lastRow = lastRow - 1
        If lastRow < 2 Then
          Exit Do
        End If
        currRow = currRow - 1
      Loop
    End If
  End With
  Set rng = Nothing
End Sub

Public Function addLogItem(sName As String, cellName As String, newVal As Variant, Optional oldVal As Variant) As Boolean
  'investigate
  addLogItem = True
  If loginType = 4 Or loginType = 0 Then
    'administrator logged on
    Exit Function
  End If
  addLogItem = False
  Dim name As String
  Dim lastRow As Long
  Dim rng As Range
  On Error GoTo ins_Err
  Application.ScreenUpdating = False
  With ActiveWorkbook.Sheets("LogPage")
    lastRow = .UsedRange.Row + .UsedRange.Rows.Count
    name = U1UserI
    If loginType = 2 Then
      name = U2UserI
    End If
    'Username
    Application.EnableEvents = False
    .Cells(lastRow, 1).Locked = False
    .Cells(lastRow, 1).Value = Application.UserName & " / " & name
    addLogItem = True
    'Date & time
    .Cells(lastRow, 2).Locked = False
    .Cells(lastRow, 2).Value = Now()
    'Sheet name
    .Cells(lastRow, 3).Locked = False
    .Cells(lastRow, 3).Value = sName
    'cell position
    .Cells(lastRow, 4).Locked = False
    .Cells(lastRow, 4).Value = cellName
    'New value
    .Cells(lastRow, 5).Locked = False
    .Cells(lastRow, 5).Value = newVal
    If Not IsMissing(oldVal) Then
      'Old Value
      .Cells(lastRow, 6).Locked = False
      .Cells(lastRow, 6).Value = oldVal
    End If
  End With
ins_Err:
  Application.EnableEvents = True
  If Err <> 0 Then
'    MsgBox Err.Description & ": " & Err.LastDllError & " [" & CStr(Err.Number) & "] " & Err.Source, vbInformation
    Err = 0
  End If
  Application.ScreenUpdating = True
End Function

Public Sub clearAllLog()
  ActiveWorkbook.Sheets("LogPage").UsedRange.Delete
End Sub
Attribute VB_Name = "MenuMacros"
Public Sub Macro1()
  'Add an Employee
  If isSheetsProtected = True Then
    MsgBox "The workbook is protected. No modification allowed.", vbInformation
    Exit Sub
  End If
    EmployeeInput.Show
End Sub

Public Sub myRangeCopy(rng1 As Range, rng2 As Range)
  rng1.Copy
  rng2.PasteSpecial xlPasteAll
End Sub

Public Sub Macro2()
  'Add Cost Code Page
  If isSheetsProtected = True Then
    MsgBox "The workbook is protected. No modification allowed.", vbInformation
    Exit Sub
  End If
    Dim sName As String
    sName = ActiveSheet.name
    If isEmployeePage(sName) = False Then
      MsgBox "This function is active on the time sheet page.", vbInformation
      Exit Sub
    End If
    Application.ScreenUpdating = False
    Call insertCCFor(sName, True)
    Application.ScreenUpdating = True
End Sub

Public Sub Macro3()
  'Insert Travel Time
  If isSheetsProtected = True Then
    MsgBox "The workbook is protected. No modification allowed.", vbInformation
    Exit Sub
  End If
    Dim sName As String
    sName = ActiveSheet.name
    If isEmployeePage(sName) = False Then
      MsgBox "This function is active on the time sheet page.", vbInformation
      Exit Sub
    End If
    Application.ScreenUpdating = False
    Call insertTTFor(sName, True)
    Application.ScreenUpdating = True
End Sub

Public Sub Macro4()
  'Emloyee delete
  If isSheetsProtected = True Then
    MsgBox "The workbook is protected. No modification allowed.", vbInformation
    Exit Sub
  End If
  If getPageCount > 0 Then
    EmpDelete.Show
  Else
    MsgBox "There is no sheet to delete."
  End If
End Sub

Public Sub Macro5()
  'Cost Code Page Delete
  If isSheetsProtected = True Then
    MsgBox "The workbook is protected. No modification allowed.", vbInformation
    Exit Sub
  End If
    Dim sName As String
    sName = ActiveSheet.name
    If isEmployeePage(sName) = False Then
      MsgBox "This function is active on the time sheet page.", vbInformation
      Exit Sub
    End If
    Application.ScreenUpdating = False
    Call deleteCCFor(sName, True)
    Application.ScreenUpdating = True
End Sub

Public Sub Macro6()
  'Travel Time Delete
  If isSheetsProtected = True Then
    MsgBox "The workbook is protected. No modification allowed.", vbInformation
    Exit Sub
  End If
    Dim sName As String
    sName = ActiveSheet.name
    If isEmployeePage(sName) = False Then
      MsgBox "This function is active on the time sheet page.", vbInformation
      Exit Sub
    End If
    Application.ScreenUpdating = False
    Call deleteTTFor(sName, True)
    Application.ScreenUpdating = True
End Sub

Public Sub Macro7()
  'administrator login
  If isSheetsProtected = True Then
    MsgBox "The workbook is protected. No modification allowed.", vbInformation
    Exit Sub
  End If
  Dim oldlogintype As Integer
  Dim oldloginpassed As Boolean
  If loginPassed = True And loginType = 4 Then
    MsgBox "User already logged on.", vbInformation
  Else
    oldlogintype = loginType
    oldloginpassed = loginPassed
    loginPassed = False
    loginType = 4
    UserLogin.Show
    If loginPassed = False Then
      loginType = oldlogintype
      loginPassed = oldloginpassed
    Else
      ActiveWorkbook.Sheets("LogPage").Visible = xlSheetVisible
      UpdateEmployeeList
    End If
  End If
End Sub

Public Sub Macro8()
'Clean up the actual sheet
  Dim asName As String
  If isSheetsProtected = True Then
    MsgBox "The workbook is protected. No modification allowed.", vbInformation
    Exit Sub
  End If
  asName = ActiveSheet.name
  If isEmployeePage(asName) = False Then
    MsgBox "This function is active on the time sheet page.", vbInformation
    Exit Sub
  End If
  If MsgBox("Are you sure? All data will be erased.", vbYesNo) = vbYes Then
    Call cleanUpWR(asName)
  End If
End Sub

Public Sub Macro9()
'Clean up all sheets
  Dim cnt As Integer
  If isSheetsProtected = True Then
    MsgBox "The workbook is protected. No modification allowed.", vbInformation
    Exit Sub
  End If
  cnt = getEmployeePageCount()
  If cnt > 0 Then
    If MsgBox("Are you sure? All data will be erased.", vbYesNo) = vbYes Then
      If cnt > 1 Then
        ProgressDelete.Show
      Else
        DeleteAllUserData
      End If
    End If
  Else
    MsgBox "There isn't any time sheet page.", vbInformation
  End If
End Sub

Public Sub DeleteAllUserData()
  Dim cnt As Integer
  Dim counter As Integer
  counter = 1
  cnt = getEmployeePageCount()
  For Each sht In ActiveWorkbook.Sheets
    If TypeName(sht) = "Worksheet" Then
      If isEmployeePage(sht.name) = True Then
        If cnt > 1 Then
          Call UpdateProgressDelete(CDbl(counter) / CDbl(cnt))
        End If
        Call cleanUpWR(sht.name)
        counter = counter + 1
      End If
    End If
  Next sht
  If cnt > 1 Then
    Unload ProgressDelete
  End If
End Sub

'Public Sub Macro10()
  'User Login menu point (not used)
'  If isSheetsProtected = True Then
'    MsgBox "The workbook is protected. No modification allowed.", vbInformation
'    Exit Sub
'  End If
'  Dim oldlogintype As Integer
'  Dim oldloginpassed As Boolean
'  If loginPassed = True And (loginType = 1 Or loginType = 3) Then
'    MsgBox "User (or administrator) already logged on.", vbInformation
'  Else
'    oldlogintype = loginType
'    oldloginpassed = loginPassed
'    loginPassed = False
'    loginType = 1
'    UserLogin.Show
'    If loginPassed = False Then
'      loginType = oldlogintype
'      loginPassed = oldloginpassed
'    End If
'  End If
'End Sub

'Public Sub Macro11()
  'Super User Login (not used)
'  If isSheetsProtected = True Then
'    MsgBox "The workbook is protected. No modification allowed.", vbInformation
'    Exit Sub
'  End If
'  Dim oldlogintype As Integer
'  Dim oldloginpassed As Boolean
'  If loginPassed = True And (loginType = 2 Or loginType = 3) Then
'    MsgBox "User (or administrator) already logged on.", vbInformation
'  Else
'    oldlogintype = loginType
'    oldloginpassed = loginPassed
'    loginPassed = False
'    loginType = 2
'    UserLogin.Show
'    If loginPassed = False Then
'      loginType = oldlogintype
'      loginPassed = oldloginpassed
'    End If
'  End If
'End Sub

Public Sub Macro12()
  'Password change
  If isSheetsProtected = True Then
    MsgBox "The workbook is protected. No modification allowed.", vbInformation
    Exit Sub
  End If
  ChangePassword.Show
End Sub

Public Sub Macro14()
  'User Info change
  AddUpdateUser.Show
End Sub

Public Sub ShowFormHelp()
   FormHelp.Show
End Sub

Public Sub loadCCN()
  If isSheetsProtected = True Then
    MsgBox "The workbook is protected. No modification allowed.", vbInformation
    Exit Sub
  End If
  CCFileInput.Show
End Sub

Public Sub postCurrentTimeCard()
  If isSheetsProtected = True Then
    MsgBox "The workbook is protected. Time Card post isn't allowed.", vbInformation
    Exit Sub
  End If
  PostTC.Show
End Sub

Public Sub retrieveTimeCard()
  If isSheetsProtected = True Then
    MsgBox "The workbook is protected. No modification allowed.", vbInformation
    Exit Sub
  End If
  retrieveFileName = ""
  RetrieveTC.Show
  If Len(retrieveFileName) > 0 Then
    ProgressLoad.Show
  End If
End Sub

Public Sub findCostCode()
Attribute findCostCode.VB_Description = "Find Cost Code"
Attribute findCostCode.VB_ProcData.VB_Invoke_Func = "l\n14"
  Dim aRow As Long
  If isSheetsProtected = True Then
    MsgBox "The workbook is protected. No modification allowed.", vbInformation
    Exit Sub
  End If
  If ActiveCell.Areas.Count = 1 And ActiveCell.Rows.Count = 1 And ActiveCell.Columns.Count = 1 Then
    If ActiveCell.column = 2 Or ActiveCell.column = 1 Then 'CC or JC Position
      aRow = -1
      If isTravelTime(ActiveSheet.name) = True Then
        aRow = -6
      End If
      If ActiveCell.Row < ActiveSheet.Range("TotalOvertime").Row + aRow Then
         aRow = ActiveCell.Row - ActiveSheet.Range("DataStartPos").Row
         If aRow >= 0 And (aRow Mod 2 = 0) Then
           CCList.Show
         End If
      End If
    End If
  End If
End Sub


Attribute VB_Name = "PostTC"
Attribute VB_Base = "0{4B81456E-A05B-4215-B47F-DA2E31A06698}{DD19721F-3214-4B87-AE43-4BBA0C5328BE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub cmdBrowseTCP_Click()
  Dim fName As Variant
  Dim dt As Date
  fName = Trim(CStr(ActiveWorkbook.Sheets("HelpPage").Range("C1").Cells(1, 1).Value))
  dt = CDate(ActiveWorkbook.Sheets("COVER").Range("ScheduleDate").Cells(1, 1).Value)
  fName = myReplace(fName, "'", "_")
  fName = myReplace(fName, ",", "_")
  fName = myReplace(fName, " ", "_") & "_" & Format(dt, "yyyyMMdd") & "BW"
  fName = Application.GetSaveAsFilename(fName, "Binary File (*.bin),*.bin,Text File (*.txt),*.txt,All Files (*.*),*.*", 1, "Post Time Card Binary File", "Save")
  If fName <> vbFalse Then
    txtCCFileTCP.Text = fName
  End If
End Sub

Private Sub cmdCancelTCP_Click()
  txtCCFileTCP.Text = ""
  Unload Me
End Sub

Private Sub cmdSaveTCP_Click()
  Dim fName As String
  Dim l As Integer
  fName = Trim(txtCCFileTCP.Text & "")
  If Len(fName) = 0 Then
    MsgBox "The file name isn't correct.", vbCritical
    Exit Sub
  End If
  l = InStr(fName, "\")
  If l > 0 Then
    If Len(fName) - l <= 1 Then
      MsgBox "The file name isn't correct.", vbCritical
      Exit Sub
    End If
  End If
  If Dir(fName) <> "" Then
    If MsgBox("File already exists. Overwrite?", vbYesNo, "File Exists") = vbNo Then
      Exit Sub
    End If
  End If
  If saveFileTCP(fName) = True Then
    MsgBox "You successfully saved the Time Card.", vbInformation, "Time Card Save"
    Unload Me
  End If
End Sub

Private Sub writeOutTCPstr(fNum As Integer, rStr As String, x As Object)
  Call writeOutTCPstr2(fNum, CStr(x.Range(rStr).Cells(1, 1).Value))
End Sub

Private Sub writeOutTCPstr2(fNum As Integer, rStr As String)
  Dim oStr As String
  Dim bTemp As Byte
  Dim i As Integer, l As Integer
  oStr = Trim(rStr & "")
  l = Len(oStr)
  If l > 255 Then
    l = 255
    oStr = Left(oStr, l)
  End If
  If binaryIO > 0 Then
    bTemp = CByte(l) Xor binaryIO
    Put #fNum, , bTemp
    For i = 1 To l
      bTemp = CByte(Asc(Mid(oStr, i, 1))) Xor binaryIO
      Put #fNum, , bTemp
    Next i
  Else
    Print #fNum, CStr(l); ","; oStr
  End If
End Sub

Private Function saveFileTCP(fName As String) As Boolean
  Dim x As Object, counter As Integer
  Dim xval As Variant, FileNum As Integer
  Dim itmp As Integer, stmp As String
  Dim sht As Worksheet
  Dim errmsg As String, i As Integer, j As Integer, k As Integer
  Dim sNames() As String
  Dim sTT() As Boolean
  Dim sCC() As Boolean
  Dim rng As Range
  saveFileTCP = False
  errmsg = ""
  On Error GoTo saveFileTCP_Err
  FileNum = FreeFile
  If Dir(fName) <> "" Then
    Kill fName
  End If
  If binaryIO > 0 Then
    Open fName For Binary Access Write As #FileNum Len = 1
    If IsNumeric(ActiveWorkbook.Sheets("HelpPage").Range("B5").Cells(1, 1).Value) Then
      binaryIO = CByte(ActiveWorkbook.Sheets("HelpPage").Range("B5").Cells(1, 1).Value)
    End If
    Put #FileNum, , binaryIO
  Else
    Open fName For Output As #FileNum
  End If
  'Values from the cover
  Set x = ActiveWorkbook.Sheets("COVER")
  'Client
  Call writeOutTCPstr(FileNum, "D17", x)
  'Project
  Call writeOutTCPstr(FileNum, "F17", x)
  'Batch
  Call writeOutTCPstr(FileNum, "B23", x)
  'ScheduleDate
  stmp = Format(x.Range("B17").Cells(1, 1).Value, "yyyy-MM-dd")
  Call writeOutTCPstr2(FileNum, stmp)
  'Superintendent
  Call writeOutTCPstr(FileNum, "B30", x)
  'Foreman
  Call writeOutTCPstr(FileNum, "D30", x)
  Set x = Nothing
  'for compatibility -> single week time sheet processor will fail on this null
  'this is extra here, processor will check and skeep it
  Call writeOutTCPstr2(FileNum, "0")
  'Start handeling sheets
  'First the number of the sheets
  itmp = getEmployeePageCount()
  Call writeOutTCPstr2(FileNum, CStr(itmp))
  If itmp > 0 Then
    'collect sheet names
    ReDim sNames(1 To itmp)
    ReDim sTT(1 To itmp)
    ReDim sCC(1 To itmp)
    counter = 1
    For Each sht In ActiveWorkbook.Sheets
      If isEmployeePage(sht.name) = True Then
        'Name of the sheet
        Call writeOutTCPstr2(FileNum, sht.name)
        sNames(counter) = Trim(sht.name & "")
        'Has Travel Time page
        If isTravelTime(sht.name) = True Then
          sTT(counter) = True
          Call writeOutTCPstr2(FileNum, "Y")
        Else
          sTT(counter) = False
          Call writeOutTCPstr2(FileNum, "N")
        End If
        'Has extra Cost Code page
        itmp = Range("'Employee'!TotalOvertime").Row + 2
        If Range("'" & sht.name & "'!TotalOvertime").Row < itmp Then
          sCC(counter) = False
          Call writeOutTCPstr2(FileNum, "N")
        Else
          sCC(counter) = True
          Call writeOutTCPstr2(FileNum, "Y")
        End If
        counter = counter + 1
      End If
    Next sht
    'save all employee data one by one
    counter = 1
    For counter = 1 To UBound(sNames)
      If Len(sNames(counter)) > 0 Then
        'print out all the sheet parameters
        Set x = ActiveWorkbook.Sheets(sNames(counter))
        'Employee ID
        Call writeOutTCPstr(FileNum, "EmployeeID", x)
        'Employee Name
        Call writeOutTCPstr(FileNum, "EmployeeName", x)
        'Comments
        stmp = Trim(CStr(x.Range("TotalOvertime").Offset(3, -2).Value & ""))
        Call writeOutTCPstr2(FileNum, stmp)
        stmp = Trim(CStr(x.Range("TotalOvertime").Offset(4, -3).Value & ""))
        Call writeOutTCPstr2(FileNum, stmp)
        'travel time components
        itmp = -1
        If sTT(counter) = True Then
          itmp = itmp - 5
          'rate1
          stmp = Trim(CStr(x.Range("TotalOvertime").Offset(-2, 3).Value & ""))
          Call writeOutTCPstr2(FileNum, stmp)
          'days1
          stmp = Trim(CStr(x.Range("TotalOvertime").Offset(-2, 5).Value & ""))
          Call writeOutTCPstr2(FileNum, stmp)
          'rate2
          stmp = Trim(CStr(x.Range("TotalOvertime").Offset(-2, 8).Value & ""))
          Call writeOutTCPstr2(FileNum, stmp)
          'days3
          stmp = Trim(CStr(x.Range("TotalOvertime").Offset(-2, 9).Value & ""))
          Call writeOutTCPstr2(FileNum, stmp)
          'travel time lines
          For i = 1 To 7
            For k = 0 To 1
              stmp = Trim(CStr(x.Range("TotalOvertime").Offset(-4, k * 8 + i).Value & ""))
              Call writeOutTCPstr2(FileNum, stmp)
            Next k
          Next i
        End If
        'working hour data !!!CHECKIT!!!
        Set rng = x.Range(x.Range("DataStartPos").Offset(0, -2), x.Range("TotalOT").Offset(itmp, 0))
        itmp = rng.Rows.Count
        'Number of items
        Call writeOutTCPstr2(FileNum, CStr(CInt(itmp / 2)))
        i = 1
        Do While i < itmp
          'job code
          If Not Application.IsErr(rng.Cells(i, 1).Offset(0, -2)) Then
            stmp = CStr(rng.Cells(i, 1).Offset(0, -2))
          Else
            stmp = ""
          End If
          Call writeOutTCPstr2(FileNum, stmp)
          'cost code
          If Not Application.IsErr(rng.Cells(i, 1).Offset(0, -1)) Then
            stmp = CStr(rng.Cells(i, 1).Offset(0, -1))
          Else
            stmp = ""
          End If
          Call writeOutTCPstr2(FileNum, stmp)
          'cost code name
          If Not Application.IsErr(rng.Cells(i, 1).Offset(1, -2)) Then
            stmp = CStr(rng.Cells(i, 1).Offset(1, -2))
          Else
            stmp = ""
          End If
          Call writeOutTCPstr2(FileNum, stmp)
          'OT values for the week
          For j = 1 To 7
            For k = 0 To 1
              stmp = ""
              If Not Application.IsErr(rng.Cells(i, 1).Offset(0, 1 + k * 8 + j).Value) Then
                If IsNumeric(rng.Cells(i, 1).Offset(0, 1 + k * 8 + j).Value) Then
                  stmp = CStr(rng.Cells(i, 1).Offset(0, 1 + k * 8 + j).Value)
                End If
              End If
              Call writeOutTCPstr2(FileNum, stmp)
            Next k
          Next j
          'ST values for the week
          For j = 1 To 7
            For k = 0 To 1
              stmp = ""
              If Not Application.IsErr(rng.Cells(i + 1, 1).Offset(0, 1 + k * 8 + j).Value) Then
                If IsNumeric(rng.Cells(i + 1, 1).Offset(0, 1 + k * 8 + j).Value) Then
                  stmp = CStr(rng.Cells(i + 1, 1).Offset(0, 1 + k * 8 + j).Value)
                End If
              End If
              Call writeOutTCPstr2(FileNum, stmp)
            Next k
          Next j
          i = i + 2
        Loop
        Set rng = Nothing
        Set x = Nothing
      End If
    Next counter
    'logging data number of lines
    If chkBoxLog.Value = False Then
      Call writeOutTCPstr2(FileNum, "0")
    Else
      Set x = ActiveWorkbook.Sheets("LogPage")
      itmp = (x.UsedRange.Row - 1 + x.UsedRange.Rows.Count) - 1
      Call writeOutTCPstr2(FileNum, CStr(itmp))
      If itmp > 0 Then
        Set rng = x.Range("A1")
        For i = 1 To itmp
          For j = 0 To 5
            stmp = ""
            If Not Application.IsErr(rng.Cells(1, 1).Offset(i, j).Value) Then
              stmp = CStr(rng.Cells(1, 1).Offset(i, j).Value)
            End If
            Call writeOutTCPstr2(FileNum, stmp)
          Next j
        Next i
        Set rng = Nothing
      End If
    End If
  End If
  Close FileNum
  saveFileTCP = True
  Erase sNames
  Erase sTT
  Erase sCC
  Exit Function
  
saveFileTCP_Err:
  On Error GoTo 0
  Close FileNum
  Call Kill(fName)
  errmsg = "File has not been created!"
  If Not (Err Is Nothing) Then
    If Err.Description <> "" Then
      errmsg = errmsg & vbCrLf & vbCrLf & "Error: " & Err.Description & vbCrLf
    End If
    Err.Clear
  End If
  MsgBox errmsg, vbCritical, "Error at saving Time Card into File"
End Function

Private Sub UserForm_Initialize()
  If UCase(Trim(CStr(ActiveWorkbook.Sheets("HelpPage").Range("D5").Cells(1, 1).Value) & "")) = "TRUE" Then
    chkBoxLog.Value = True
    chkBoxLog.Locked = True
  Else
    chkBoxLog.Value = False
    chkBoxLog.Locked = False
  End If
End Sub
Attribute VB_Name = "ProgressDelete"
Attribute VB_Base = "0{49139845-0BF9-436F-979C-C01CAC388F81}{4D9F5C5B-24A9-46D0-B795-2436DB98306B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub UserForm_activate()
  DeleteAllUserData
End Sub
Attribute VB_Name = "ProgressLoad"
Attribute VB_Base = "0{DF8223A1-1C2A-46BE-BC1E-295933EF33F5}{982040B3-5DD6-4530-80EC-B1E602BE0640}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub UserForm_activate()
  LoadAllUserData
End Sub
Attribute VB_Name = "ProgressPrint"
Attribute VB_Base = "0{FB314C1B-AFB9-45CF-902A-2D8E995A60A3}{11A62A52-D52B-43BB-8E15-7D2F6FE5620B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub UserForm_activate()
    Call SetupAllPrintParameters
End Sub

Attribute VB_Name = "RetrieveTC"
Attribute VB_Base = "0{2D19AF39-EA10-4632-A18D-DDC7DCD99E64}{2E7B344D-0F9A-4AD2-9532-90FBD79D5225}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub cmdBrowseTCR_Click()
  Dim fName As Variant
  fName = Application.GetOpenFilename("Binary File (*.bin),*.bin,Text File (*.txt),*.txt,All Files (*.*),*.*", 1, "Retrieve Time Card File", "Load", False)
  If fName <> vbFalse Then
    txtCCFileTCR.Text = fName
  End If
End Sub

Private Sub cmdCancelTCR_Click()
  txtCCFileTCR.Text = ""
  Unload Me
End Sub

Private Sub cmdLoadTCR_Click()
  Dim fName As String
  Dim fDate As Date
  fName = Trim(txtCCFileTCR.Text & "")
  If Len(fName) = 0 Then
    MsgBox "There is nothing to load.", vbCritical
    Exit Sub
  End If
  If Dir(fName) = "" Then
    MsgBox "The Time Card file does not exists.", vbCritical
    Exit Sub
  End If
  If FileLen(fName) < 100 Then
    MsgBox "The Time Card file too small.", vbCritical
    Exit Sub
  End If
  If checkAuthorization(fName) = False Then
    MsgBox "You are not entitled to load this Time Card or the authorization process has failed.", vbInformation, "Time Card Load"
  Else
    If MsgBox("You are going to load a Time Card file. All existing data will be lost." & vbCrLf & vbCrLf & _
              "Please backup your original file before you proceed. Proceed?", vbYesNo, "New Time Card") = vbYes Then
      retrieveFileName = fName
      Unload Me
    End If
  End If
End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Activate()
  RefreshCover
  ActiveWindow.DisplayHeadings = False
  ActiveWindow.DisplayGridlines = False
  If reCountEmployeeList = True Then
    UpdateEmployeeList
  End If
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    Dim cell As Range
    Dim ENRange As Range
    Dim inENRange As Boolean
    Set ENRange = Range("'COVER'!ScheduleDate")
    inENRange = False
    For Each cell In Target
        If Union(cell, ENRange).Address = ENRange.Address Then
          inENRange = True
        End If
    Next cell
    If inENRange = True And isSheetsProtected = False Then
      DateList.Show
    End If
    Set ENRange = Nothing
    Application.EnableEvents = True
End Sub
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Option Explicit

Private Type myCellInfo
    column As Integer
    Row As Integer
    content As Variant
    mustChange As Boolean
    sName As String
End Type

Dim wrd As myCellInfo
Dim wrdLog As myCellInfo
Dim currentSheetName As String

Private Sub Worksheet_Activate()
  ActiveWindow.DisplayHeadings = True
  ActiveWindow.DisplayGridlines = True
  If reCountEmployeeList = True Then
    UpdateEmployeeList
  End If
  currentSheetName = ActiveSheet.name
  wrd.mustChange = False
  wrd.Row = 0
  wrd.column = 0
  wrd.sName = ""
  wrdLog.mustChange = False
  wrdLog.Row = 0
  wrdLog.column = 0
  wrdLog.sName = ""
  ' changed 01052006
  If reCountEmployeeList = True Then
    UpdateEmployeeList
  End If
  ' changed 01052006
End Sub

Private Sub Worksheet_Change(ByVal Target As Excel.Range)
  If ActiveSheet.name = "LogPage" Or ActiveSheet.name = "COVER" Or ActiveSheet.name = "HelpPage" Or ActiveSheet.name = "CCSummary" Then
    Return
  End If
  
  'Change Tab Color to Red if there is any Error
   If (Range("W29").Value > 0) Then
       ActiveSheet.Tab.Color = RGB(255, 0, 0)
   Else
        ActiveSheet.Tab.Color = RGB(0, 255, 0)
   End If
   
  If currentSheetName = ActiveSheet.name Then
    Dim cell As Range
    Dim V1Range As Range
    Dim V2Range As Range
    Dim ENRange As Range
    Dim rng As Range
    Dim tmpStr As String
    Dim ValidateCode As Variant
    Dim isLoa As Boolean
    Dim needLogUpdate As Boolean
    Dim tt As Boolean
    Dim btmp As Boolean
    Dim i As Integer
    Dim j As Integer
    Dim sVal As String
    tt = isTravelTime(ActiveSheet.name)
    'employee name change or daily hours change
    Set V1Range = getDailyHoursRange(ActiveSheet.name, 1, tt)
    Set V2Range = getDailyHoursRange(ActiveSheet.name, 2, tt)
    Set ENRange = Range("EmployeeName")
    Set rng = Nothing
    If tt = True Then
       Set rng = Range("TotalOvertime")
    End If
    wrd.mustChange = False
    For Each cell In Target
        isLoa = False
        If tt = True Then
          If cell.Row = rng.Row - 2 Then
            If (cell.column = rng.column + 4) Or (cell.column = rng.column + 6) Or _
               (cell.column = rng.column + 12) Or (cell.column = rng.column + 14) Then
               isLoa = True
            End If
          End If
        End If
        If Union(cell, V1Range).Address = V1Range.Address Or _
           Union(cell, V2Range).Address = V2Range.Address Or isLoa = True Then
            ValidateCode = EntryIsValid(cell.Value, isLoa)
            If ValidateCode = True Then
                Set V1Range = Nothing
                Set V2Range = Nothing
                Set ENRange = Nothing
                Set rng = Nothing
                If wrd.sName = ActiveSheet.name And wrd.mustChange = False _
                   And wrd.column = cell.column And wrd.Row = cell.Row Then
                  If Trim(CStr(cell.Value)) <> Trim(CStr(wrd.content)) Then
                    needLogUpdate = addLogItem(cell.Parent.name, CStr(Chr(64 + cell.column)) & CStr(cell.Row), cell.Value, wrd.content)
                  End If
                Else
                  needLogUpdate = addLogItem(cell.Parent.name, CStr(Chr(64 + cell.column)) & CStr(cell.Row), cell.Value)
                End If
                On Error GoTo 0
                If needLogUpdate = False Then
                  wrdLog.content = cell.Value
                  wrdLog.Row = cell.Row
                  wrdLog.column = cell.column
                  wrdLog.sName = cell.Parent.name
                  wrdLog.mustChange = True
                Else
                  wrd.content = cell.Value
                  wrd.Row = cell.Row
                  wrd.column = cell.column
                  wrd.sName = cell.Parent.name
                  wrd.mustChange = False
                End If
                Exit Sub
            Else
                tmpStr = tmpStr & vbCrLf & vbCrLf & ValidateCode
                MsgBox tmpStr, vbCritical, "Invalid Entry"
                On Error Resume Next
                Application.EnableEvents = False
                cell.ClearContents
                cell.Activate
                Application.EnableEvents = True
                If Len(Trim(CStr(cell.Value))) > 0 Then
                  wrd.content = ""
                  wrd.Row = cell.Row
                  wrd.column = cell.column
                  wrd.sName = ActiveSheet.name
                  wrd.mustChange = True
                End If
            End If
        End If
        If Union(cell, ENRange).Address = ENRange.Address Then
            'name change
            tmpStr = NameIsValid(CStr(cell.Value))
            If Len(tmpStr) > 0 And InStr(tmpStr, ",") > 0 Then
              If tmpStr <> Trim(CStr(cell.Value)) Then
                On Error Resume Next
                Application.EnableEvents = False
                ENRange.Value = tmpStr
                Application.EnableEvents = True
                If ENRange.Value <> tmpStr Then
                  wrd.content = tmpStr
                  wrd.Row = cell.Row
                  wrd.column = cell.column
                  wrd.sName = ActiveSheet.name
                  wrd.mustChange = True
                End If
              End If
              sVal = UCase(ActiveSheet.name)
              Do While (IsNumeric(Right(sVal, 1)))
                sVal = Left(sVal, Len(sVal) - 1)
              Loop
              If Left(UCase(tmpStr), InStr(tmpStr, ",") - 1) <> sVal Then
                'has changed
                sVal = getShortName(tmpStr)
                Application.EnableEvents = False
                ActiveSheet.name = sVal
                Application.EnableEvents = True
                ReSortSheets
                UpdateEmployeeList
                ActiveWorkbook.Sheets(sVal).Activate
              End If
            Else
              tmpStr = "Wrong Employee Name. Please use the standard form: Lastname, Firstname"
              MsgBox tmpStr, vbCritical, "Invalid Entry"
              On Error Resume Next
              tmpStr = ActiveSheet.name
              Application.EnableEvents = False
              ENRange.Value = tmpStr
              Application.EnableEvents = True
              If ENRange.Value <> tmpStr Then
                wrd.content = tmpStr
                wrd.Row = cell.Row
                wrd.column = cell.column
                wrd.sName = ActiveSheet.name
                wrd.mustChange = True
              End If
            End If
            Exit Sub
        End If
        If cell.column = 2 Or cell.column = 1 Then
          i = -1
          If tt = True Then
            i = -6
          End If
          j = cell.Row - Range("DataStartPos").Row
          If cell.Row < Range("TotalOvertime").Row - i And j >= 0 And (j Mod 2 = 0) Then
            'Cost code area
            If cell.column = 1 Then
              sVal = Trim(CStr(cell.Value) & "")
              tmpStr = Trim(CStr(cell.Offset(0, 1).Value) & "")
            Else
              sVal = Trim(CStr(cell.Offset(0, -1).Value) & "")
              tmpStr = Trim(CStr(cell.Value) & "")
            End If
            'both has value
            If (Len(sVal) > 0) And (Len(tmpStr) > 0) Then
              If Left(sVal, 1) = "'" Then
                sVal = Right(sVal, Len(sVal) - 1)
              End If
              If Left(tmpStr, 1) = "'" Then
                tmpStr = Right(tmpStr, Len(tmpStr) - 1)
              End If
              If (Len(sVal) > 0) And (Len(tmpStr) > 0) Then
              'still has value
                btmp = True
                If lastUsedCCIndex > CCListStart Then
                  'If last used CC index pointing to the right row than
                  If CStr(ActiveWorkbook.Sheets("HelpPage").Range("A" & CStr(lastUsedCCIndex)).Value) = sVal And _
                     CStr(ActiveWorkbook.Sheets("HelpPage").Range("B" & CStr(lastUsedCCIndex)).Value) = tmpStr Then
                    btmp = False
                    sVal = Trim(CStr(ActiveWorkbook.Sheets("HelpPage").Range("C" & CStr(lastUsedCCIndex)).Value) & "")
                     If Len(sVal) > 0 Then
                      If cell.column = 1 Then
                        cell.Offset(1, 0).Value = sVal
                      Else
                        cell.Offset(1, -1).Value = sVal
                      End If
                    End If
                  End If
                  lastUsedCCIndex = 0
                End If
                If btmp = True Then
                  'search for the right description
                  sVal = searchFor2(sVal, tmpStr, "HelpPage", CCListStart + 1)
                  If Len(sVal) > 0 Then
                    If cell.column = 1 Then
                      cell.Offset(1, 0).Value = sVal
                    Else
                      cell.Offset(1, -1).Value = sVal
                    End If
                  End If
                End If
              End If
            End If
          End If
        End If
    Next cell
    Set rng = Nothing
    Set V1Range = Nothing
    Set V2Range = Nothing
    Set ENRange = Nothing
    Application.EnableEvents = True
    
  End If
    

   
End Sub

Public Function EntryIsValid(cellV As Variant, isLoa As Boolean) As Variant
'   Blank
    If cellV = "" Then
        EntryIsValid = True
        Exit Function
    End If
'   Numeric
   If (Not IsNumeric(cellV)) Or (InStr(1, cellV, ",")) Then
        EntryIsValid = "Non-numeric entry."
        Exit Function
    End If
    If (Int((cellV * 100) Mod 25) <> 0) Then
        EntryIsValid = "Minimum quarter value required."
        Exit Function
    End If
    If isLoa = False Then
'   Integer?
      'If Int(cellV * 2) <> (cellV * 2) Then
       ' EntryIsValid = "Minimum half hour value required."
        'Exit Function
      'End If
'     Between 1 and 24?
      If cellV < -24 Or cellV > 24 Then
        EntryIsValid = "Valid values are between -24 and +24."
        Exit Function
      End If
    End If
'   It passed all the tests
    EntryIsValid = True
End Function

Public Function getDailyHoursRange(sName As String, rPart As Integer, tt As Boolean) As Range
  Dim rpos As Integer
  Dim dsp As Range
  Dim dep As Range
  Set getDailyHoursRange = Nothing
  Set dsp = ActiveWorkbook.Sheets(sName).Range("DataStartPos").Cells(1, 1 + (rPart - 1) * 8)
  rpos = -4
  If tt = False Then
    rpos = -1
  End If
  Set dep = ActiveWorkbook.Sheets(sName).Range("TotalOvertime").Cells(1, 1).Offset(rpos, rPart * 8 - 1)
  Set getDailyHoursRange = ActiveWorkbook.Sheets(sName).Range(dsp, dep)
  Set dsp = Nothing
  Set dep = Nothing
End Function

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  If currentSheetName = ActiveSheet.name Then
  Dim cell As Range
  If wrd.mustChange Then
    Set cell = ActiveWorkbook.Sheets(wrd.sName).Cells(wrd.Row, wrd.column)
    On Error Resume Next
    Application.EnableEvents = False
    cell.Value = wrd.content
    cell.Activate
    Application.EnableEvents = True
  Else
    If wrdLog.mustChange = True Then
      If wrd.sName = wrdLog.sName And wrd.column = wrdLog.column And wrd.Row = wrdLog.Row Then
        If Trim(CStr(wrdLog.content)) <> Trim(CStr(wrd.content)) Then
          Call addLogItem(wrdLog.sName, CStr(Chr(64 + wrdLog.column)) & CStr(wrdLog.Row), wrdLog.content, wrd.content)
        End If
      Else
        Call addLogItem(wrdLog.sName, CStr(Chr(64 + wrdLog.column)) & CStr(wrdLog.Row), wrdLog.content)
      End If
    End If
    Set cell = Target.Cells(1, 1)
    wrd.content = cell.Value
    wrd.Row = cell.Row
    wrd.column = cell.column
    wrd.sName = ActiveSheet.name
  End If
  wrd.mustChange = False
  wrdLog.mustChange = False
  Set cell = Nothing
  End If
End Sub



Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
  ActiveWindow.DisplayHeadings = True
  ActiveWindow.DisplayGridlines = True
End Sub


Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Activate()
  'RecountCoverSums
  ActiveWindow.DisplayHeadings = False
  ActiveWindow.DisplayGridlines = False
  RefreshCCSummary
  If reCountEmployeeList = True Then
    UpdateEmployeeList
  End If
End Sub

Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
RefreshTDetail
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Option Explicit

Private Type myCellInfo
    column As Integer
    Row As Integer
    content As Variant
    mustChange As Boolean
    sName As String
End Type

Dim wrd As myCellInfo
Dim wrdLog As myCellInfo
Dim currentSheetName As String

Private Sub Worksheet_Activate()
  ActiveWindow.DisplayHeadings = True
  ActiveWindow.DisplayGridlines = True
  If reCountEmployeeList = True Then
    UpdateEmployeeList
  End If
  currentSheetName = ActiveSheet.name
  wrd.mustChange = False
  wrd.Row = 0
  wrd.column = 0
  wrd.sName = ""
  wrdLog.mustChange = False
  wrdLog.Row = 0
  wrdLog.column = 0
  wrdLog.sName = ""
  ' changed 01052006
  If reCountEmployeeList = True Then
    UpdateEmployeeList
  End If
  ' changed 01052006
End Sub

Private Sub Worksheet_Change(ByVal Target As Excel.Range)
  If ActiveSheet.name = "LogPage" Or ActiveSheet.name = "COVER" Or ActiveSheet.name = "HelpPage" Or ActiveSheet.name = "CCSummary" Then
    Return
  End If
  
  'Change Tab Color to Red if there is any Error
   If (Range("W29").Value > 0) Then
       ActiveSheet.Tab.Color = RGB(255, 0, 0)
   Else
        ActiveSheet.Tab.Color = RGB(0, 255, 0)
   End If
   
  If currentSheetName = ActiveSheet.name Then
    Dim cell As Range
    Dim V1Range As Range
    Dim V2Range As Range
    Dim ENRange As Range
    Dim rng As Range
    Dim tmpStr As String
    Dim ValidateCode As Variant
    Dim isLoa As Boolean
    Dim needLogUpdate As Boolean
    Dim tt As Boolean
    Dim btmp As Boolean
    Dim i As Integer
    Dim j As Integer
    Dim sVal As String
    tt = isTravelTime(ActiveSheet.name)
    'employee name change or daily hours change
    Set V1Range = getDailyHoursRange(ActiveSheet.name, 1, tt)
    Set V2Range = getDailyHoursRange(ActiveSheet.name, 2, tt)
    Set ENRange = Range("EmployeeName")
    Set rng = Nothing
    If tt = True Then
       Set rng = Range("TotalOvertime")
    End If
    wrd.mustChange = False
    For Each cell In Target
        isLoa = False
        If tt = True Then
          If cell.Row = rng.Row - 2 Then
            If (cell.column = rng.column + 4) Or (cell.column = rng.column + 6) Or _
               (cell.column = rng.column + 12) Or (cell.column = rng.column + 14) Then
               isLoa = True
            End If
          End If
        End If
        If Union(cell, V1Range).Address = V1Range.Address Or _
           Union(cell, V2Range).Address = V2Range.Address Or isLoa = True Then
            ValidateCode = EntryIsValid(cell.Value, isLoa)
            If ValidateCode = True Then
                Set V1Range = Nothing
                Set V2Range = Nothing
                Set ENRange = Nothing
                Set rng = Nothing
                If wrd.sName = ActiveSheet.name And wrd.mustChange = False _
                   And wrd.column = cell.column And wrd.Row = cell.Row Then
                  If Trim(CStr(cell.Value)) <> Trim(CStr(wrd.content)) Then
                    needLogUpdate = addLogItem(cell.Parent.name, CStr(Chr(64 + cell.column)) & CStr(cell.Row), cell.Value, wrd.content)
                  End If
                Else
                  needLogUpdate = addLogItem(cell.Parent.name, CStr(Chr(64 + cell.column)) & CStr(cell.Row), cell.Value)
                End If
                On Error GoTo 0
                If needLogUpdate = False Then
                  wrdLog.content = cell.Value
                  wrdLog.Row = cell.Row
                  wrdLog.column = cell.column
                  wrdLog.sName = cell.Parent.name
                  wrdLog.mustChange = True
                Else
                  wrd.content = cell.Value
                  wrd.Row = cell.Row
                  wrd.column = cell.column
                  wrd.sName = cell.Parent.name
                  wrd.mustChange = False
                End If
                Exit Sub
            Else
                tmpStr = tmpStr & vbCrLf & vbCrLf & ValidateCode
                MsgBox tmpStr, vbCritical, "Invalid Entry"
                On Error Resume Next
                Application.EnableEvents = False
                cell.ClearContents
                cell.Activate
                Application.EnableEvents = True
                If Len(Trim(CStr(cell.Value))) > 0 Then
                  wrd.content = ""
                  wrd.Row = cell.Row
                  wrd.column = cell.column
                  wrd.sName = ActiveSheet.name
                  wrd.mustChange = True
                End If
            End If
        End If
        If Union(cell, ENRange).Address = ENRange.Address Then
            'name change
            tmpStr = NameIsValid(CStr(cell.Value))
            If Len(tmpStr) > 0 And InStr(tmpStr, ",") > 0 Then
              If tmpStr <> Trim(CStr(cell.Value)) Then
                On Error Resume Next
                Application.EnableEvents = False
                ENRange.Value = tmpStr
                Application.EnableEvents = True
                If ENRange.Value <> tmpStr Then
                  wrd.content = tmpStr
                  wrd.Row = cell.Row
                  wrd.column = cell.column
                  wrd.sName = ActiveSheet.name
                  wrd.mustChange = True
                End If
              End If
              sVal = UCase(ActiveSheet.name)
              Do While (IsNumeric(Right(sVal, 1)))
                sVal = Left(sVal, Len(sVal) - 1)
              Loop
              If Left(UCase(tmpStr), InStr(tmpStr, ",") - 1) <> sVal Then
                'has changed
                sVal = getShortName(tmpStr)
                Application.EnableEvents = False
                ActiveSheet.name = sVal
                Application.EnableEvents = True
                ReSortSheets
                UpdateEmployeeList
                ActiveWorkbook.Sheets(sVal).Activate
              End If
            Else
              tmpStr = "Wrong Employee Name. Please use the standard form: Lastname, Firstname"
              MsgBox tmpStr, vbCritical, "Invalid Entry"
              On Error Resume Next
              tmpStr = ActiveSheet.name
              Application.EnableEvents = False
              ENRange.Value = tmpStr
              Application.EnableEvents = True
              If ENRange.Value <> tmpStr Then
                wrd.content = tmpStr
                wrd.Row = cell.Row
                wrd.column = cell.column
                wrd.sName = ActiveSheet.name
                wrd.mustChange = True
              End If
            End If
            Exit Sub
        End If
        If cell.column = 2 Or cell.column = 1 Then
          i = -1
          If tt = True Then
            i = -6
          End If
          j = cell.Row - Range("DataStartPos").Row
          If cell.Row < Range("TotalOvertime").Row - i And j >= 0 And (j Mod 2 = 0) Then
            'Cost code area
            If cell.column = 1 Then
              sVal = Trim(CStr(cell.Value) & "")
              tmpStr = Trim(CStr(cell.Offset(0, 1).Value) & "")
            Else
              sVal = Trim(CStr(cell.Offset(0, -1).Value) & "")
              tmpStr = Trim(CStr(cell.Value) & "")
            End If
            'both has value
            If (Len(sVal) > 0) And (Len(tmpStr) > 0) Then
              If Left(sVal, 1) = "'" Then
                sVal = Right(sVal, Len(sVal) - 1)
              End If
              If Left(tmpStr, 1) = "'" Then
                tmpStr = Right(tmpStr, Len(tmpStr) - 1)
              End If
              If (Len(sVal) > 0) And (Len(tmpStr) > 0) Then
              'still has value
                btmp = True
                If lastUsedCCIndex > CCListStart Then
                  'If last used CC index pointing to the right row than
                  If CStr(ActiveWorkbook.Sheets("HelpPage").Range("A" & CStr(lastUsedCCIndex)).Value) = sVal And _
                     CStr(ActiveWorkbook.Sheets("HelpPage").Range("B" & CStr(lastUsedCCIndex)).Value) = tmpStr Then
                    btmp = False
                    sVal = Trim(CStr(ActiveWorkbook.Sheets("HelpPage").Range("C" & CStr(lastUsedCCIndex)).Value) & "")
                     If Len(sVal) > 0 Then
                      If cell.column = 1 Then
                        cell.Offset(1, 0).Value = sVal
                      Else
                        cell.Offset(1, -1).Value = sVal
                      End If
                    End If
                  End If
                  lastUsedCCIndex = 0
                End If
                If btmp = True Then
                  'search for the right description
                  sVal = searchFor2(sVal, tmpStr, "HelpPage", CCListStart + 1)
                  If Len(sVal) > 0 Then
                    If cell.column = 1 Then
                      cell.Offset(1, 0).Value = sVal
                    Else
                      cell.Offset(1, -1).Value = sVal
                    End If
                  End If
                End If
              End If
            End If
          End If
        End If
    Next cell
    Set rng = Nothing
    Set V1Range = Nothing
    Set V2Range = Nothing
    Set ENRange = Nothing
    Application.EnableEvents = True
    
  End If
    

   
End Sub

Public Function EntryIsValid(cellV As Variant, isLoa As Boolean) As Variant
'   Blank
    If cellV = "" Then
        EntryIsValid = True
        Exit Function
    End If
'   Numeric
   If (Not IsNumeric(cellV)) Or (InStr(1, cellV, ",")) Then
        EntryIsValid = "Non-numeric entry."
        Exit Function
    End If
    If (Int((cellV * 100) Mod 25) <> 0) Then
        EntryIsValid = "Minimum quarter value required."
        Exit Function
    End If
    If isLoa = False Then
'   Integer?
      'If Int(cellV * 2) <> (cellV * 2) Then
       ' EntryIsValid = "Minimum half hour value required."
        'Exit Function
      'End If
'     Between 1 and 24?
      If cellV < -24 Or cellV > 24 Then
        EntryIsValid = "Valid values are between -24 and +24."
        Exit Function
      End If
    End If
'   It passed all the tests
    EntryIsValid = True
End Function

Public Function getDailyHoursRange(sName As String, rPart As Integer, tt As Boolean) As Range
  Dim rpos As Integer
  Dim dsp As Range
  Dim dep As Range
  Set getDailyHoursRange = Nothing
  Set dsp = ActiveWorkbook.Sheets(sName).Range("DataStartPos").Cells(1, 1 + (rPart - 1) * 8)
  rpos = -4
  If tt = False Then
    rpos = -1
  End If
  Set dep = ActiveWorkbook.Sheets(sName).Range("TotalOvertime").Cells(1, 1).Offset(rpos, rPart * 8 - 1)
  Set getDailyHoursRange = ActiveWorkbook.Sheets(sName).Range(dsp, dep)
  Set dsp = Nothing
  Set dep = Nothing
End Function

Private Sub Worksheet_SelectionChange(ByVal Target As Range)
  If currentSheetName = ActiveSheet.name Then
  Dim cell As Range
  If wrd.mustChange Then
    Set cell = ActiveWorkbook.Sheets(wrd.sName).Cells(wrd.Row, wrd.column)
    On Error Resume Next
    Application.EnableEvents = False
    cell.Value = wrd.content
    cell.Activate
    Application.EnableEvents = True
  Else
    If wrdLog.mustChange = True Then
      If wrd.sName = wrdLog.sName And wrd.column = wrdLog.column And wrd.Row = wrdLog.Row Then
        If Trim(CStr(wrdLog.content)) <> Trim(CStr(wrd.content)) Then
          Call addLogItem(wrdLog.sName, CStr(Chr(64 + wrdLog.column)) & CStr(wrdLog.Row), wrdLog.content, wrd.content)
        End If
      Else
        Call addLogItem(wrdLog.sName, CStr(Chr(64 + wrdLog.column)) & CStr(wrdLog.Row), wrdLog.content)
      End If
    End If
    Set cell = Target.Cells(1, 1)
    wrd.content = cell.Value
    wrd.Row = cell.Row
    wrd.column = cell.column
    wrd.sName = ActiveSheet.name
  End If
  wrd.mustChange = False
  wrdLog.mustChange = False
  Set cell = Nothing
  End If
End Sub

Attribute VB_Name = "SheetUtils"
#If VBA7 Then
   Public Declare PtrSafe Function SetCursorPos Lib "user32.dll" (ByVal x As Long, ByVal y As Long) As Long
 Declare PtrSafe Sub mouse_event Lib "user32" (ByVal dwFlags As Long, ByVal dx As Long, _
                                                  ByVal dy As Long, ByVal cButtons As Long, _
                                                   ByVal dwExtraInfo As LongPtr)
#Else
    Public Declare Function SetCursorPos Lib "user32.dll" (ByVal x As Long, ByVal y As Long) As Long
Private Declare Sub mouse_event Lib "user32" (ByVal dwFlags As Long, ByVal dx As Long, _
                                                  ByVal dy As Long, ByVal cButtons As Long, _
                                                  ByVal dwExtraInfo As Long)
#End If


Public Function DelDoubleSpaces(pStr As String) As String
  Dim tmpStr As String
  Dim oldStr As String
  Dim cnt As Integer
  DelDoubleSpaces = ""
  If pStr = vbNullString Then
    Exit Function
  End If
  If Len(Trim(pStr)) = 0 Then
    Exit Function
  End If
  tmpStr = Trim(pStr)
  oldStr = ""
  While Len(tmpStr) <> Len(oldStr)
    oldStr = tmpStr
    cnt = 0
    Do While True
      cnt = InStr(cnt + 1, tmpStr, "  ")
      If cnt > 0 Then
        tmpStr = Left(tmpStr, cnt - 1) & Right(tmpStr, Len(tmpStr) - cnt)
      Else
        Exit Do
      End If
    Loop
'    tmpStr = Replace(tmpStr, "  ", " ")
  Wend
  DelDoubleSpaces = tmpStr
End Function

Public Function CreateStandardName(name As String) As String
  Dim cnt As Integer, last As Integer
  ' look for the last space position
  last = 0
  cnt = InStr(name, " ")
  While cnt > 1
    last = cnt
    cnt = InStr(last + 1, name, " ")
  Wend
  If last = 0 Then
    CreateStandardName = name
    Exit Function
  End If
  CreateStandardName = Right(name, Len(name) - last) & ", " & Left(name, last - 1)
End Function

Public Function NameIsValid(cellName As String) As String
  NameIsValid = ValidateName(cellName)
End Function

Public Function ValidateName(cellName As String) As String
  Dim name As String
  Dim cnt As Integer
  name = DelDoubleSpaces(Trim(cellName))
  If name = "" Then
    ValidateName = ""
    Exit Function
  End If
  If InStr(name, ",") = 0 Then
    If InStr(name, " ") > 0 Then
      name = CreateStandardName(name)
    End If
  Else
    cnt = InStr(name, ",")
    name = Trim(Left(name, cnt - 1)) & ", " & Trim(Right(name, Len(name) - cnt))
  End If
  ValidateName = name
End Function

Public Function getShortName(longName As String) As String
  Dim sortName As String
  Dim cName As String
  Dim cnt As String
  getShortName = ""
  If longName = "" Then
    Exit Function
  End If
  If InStr(longName, ",") > 0 Then
    shortName = Left(longName, InStr(longName, ",") - 1)
  ElseIf InStr(longName, " ") > 0 Then
    shortName = Left(longName, InStr(longName, " ") - 1)
  Else
    shortName = longName
  End If
  If Len(shortName) > 28 Then
    shortName = Left(shortName, 28)
  End If
  getShortName = Trim(shortName)
  Application.ScreenUpdating = False
  cnt = 1
  For Each sht In ActiveWorkbook.Sheets
    cName = sht.name
    If InStr(UCase(Trim(cName)), UCase(shortName)) > 0 And ActiveSheet.name <> cName Then
      cnt = cnt + 1
    End If
  Next sht
  If cnt > 1 Then
    getShortName = getShortName & Trim(CStr(cnt))
  End If
  Application.ScreenUpdating = True
End Function

Public Sub ReSortSheets()
' It sorts the sheets of the active workbook in ascending order.
  Dim sheetNames() As String
  Dim sName As String
  Dim i As Integer
  Dim SheetCount As Integer
  Dim VisibleWins As Integer
  Dim Item As Object
  Dim OldActive As Object
  Dim index As Integer
  On Error Resume Next
  SheetCount = ActiveWorkbook.Sheets.Count
  If Err <> 0 Then Exit Sub ' No active workbook
' Check for protected workbook structure
  If ActiveWorkbook.ProtectStructure Then
    MsgBox ActiveWorkbook.name & " is protected.", vbCritical, "Cannot Sort Sheets."
    Exit Sub
  End If
' Disable Ctrl+Break
  Application.EnableCancelKey = xlDisabled
  ActiveWorkbook.Sheets("Employee").Visible = xlSheetHidden
  SheetCount = getEmployeePageCount()
  If SheetCount <= 0 Then
    Exit Sub
  End If
  ReDim sheetNames(1 To SheetCount + 2)
  Set OldActive = ActiveSheet
' Turn off screen updating
  Application.ScreenUpdating = False
' Fill array with sheet names and hidden status
  Set OldActive = ActiveSheet
  index = 1
  For i = 1 To ActiveWorkbook.Sheets.Count
    sName = Trim(ActiveWorkbook.Sheets(i).name)
    If isEmployeePage(sName) = True Then
      sheetNames(index) = sName
      index = index + 1
    End If
  Next i
' Sort the array in ascending order
  Call BubbleSort(sheetNames)
' Move the sheets
  ActiveWorkbook.Sheets("Employee").Move ActiveWorkbook.Sheets(1)
  ActiveWorkbook.Sheets("Employee").Visible = xlSheetHidden
  ActiveWorkbook.Sheets("HelpPage").Move ActiveWorkbook.Sheets(2)
  ActiveWorkbook.Sheets("HelpPage").Visible = xlSheetHidden
  ActiveWorkbook.Sheets("LogPage").Move ActiveWorkbook.Sheets(3)
  ActiveWorkbook.Sheets("COVER").Move ActiveWorkbook.Sheets(4)
  ActiveWorkbook.Sheets("CCSummary").Move ActiveWorkbook.Sheets(5)
  If loginType <> 4 Then
    ActiveWorkbook.Sheets("LogPage").Visible = xlSheetHidden
  End If
  For i = 1 To SheetCount + 2
    ActiveWorkbook.Sheets(sheetNames(i)).Move _
      ActiveWorkbook.Sheets(i + 5)
  Next i
  Application.ScreenUpdating = True
' Reactivate the original active sheet
  OldActive.Activate
  Erase sheetNames
End Sub

Sub BubbleSort(List() As String)
' Sorts the List array in ascending order
  Dim First As Integer, last As Integer
  Dim i As Integer, j As Integer
  Dim Temp As String
  First = LBound(List)
  last = UBound(List)
  If last - First + 1 < 2 Then
    Exit Sub
  End If
  For i = First To last - 1
    For j = i + 1 To last
      If List(i) > List(j) Then
        Temp = List(j)
        List(j) = List(i)
        List(i) = Temp
      End If
    Next j
  Next i
End Sub

Public Function isTravelTime(name As String) As Boolean
  Dim rng As Range
  Dim rName As String
  isTravelTime = False
  rName = "'" & name & "'!TravelTime"
  Set rng = Nothing
  On Error Resume Next
  Set rng = Range(rName)
  If Not (rng Is Nothing) Then
    If rng.Rows.Count > 0 Then
      isTravelTime = True
    End If
  End If
End Function

Function checkDefaultPrinter() As Boolean
  checkDefaultPrinter = False
  If Application.ActivePrinter <> vbNullString Then
    If Len(Application.ActivePrinter) > 0 Then
      If InStr(Application.ActivePrinter, "unknown") = 0 Then
        checkDefaultPrinter = True
        Exit Function
      End If
    End If
  End If
  Dim strLPT As String * 255
  Dim Result As String
  Dim cnt As Integer
  Call GetProfileStringA("Windows", "Device", "", strLPT, 254)
  If strLPT <> vbNullString Then
    Result = Application.Trim(strLPT)
    cnt = InStr(Result, ",")
    If (cnt > 1) And (InStr(cnt + 1, Result, ",") > cnt + 1) Then
      checkDefaultPrinter = True
    End If
  End If
' Display message
  If checkDefaultPrinter = False Then
    MsgBox "There is no (active or) default printer defined.", vbInformation, "Default Printer Information"
  End If
End Function

Public Sub setPrintPageParams(sName As String)
  With ActiveWorkbook.Sheets(sName).PageSetup
    .BlackAndWhite = True
    If sName <> "COVER" Then
      .LeftMargin = Application.InchesToPoints(0.15)
      .RightMargin = Application.InchesToPoints(0.15)
      .TopMargin = Application.InchesToPoints(0.25)
      .HeaderMargin = Application.InchesToPoints(0.2)
      .FooterMargin = Application.InchesToPoints(0.2)
      .PrintTitleRows = ActiveWorkbook.Sheets(sName).Rows("$1:$4").Address
      .Orientation = xlLandscape
      .BottomMargin = Application.InchesToPoints(0.25)
    Else
      .LeftMargin = Application.InchesToPoints(0.35)
      .RightMargin = Application.InchesToPoints(0.35)
      .TopMargin = Application.InchesToPoints(0.35)
      .HeaderMargin = Application.InchesToPoints(0.2)
      .FooterMargin = Application.InchesToPoints(0.2)
      .Orientation = xlPortrait
      .PrintTitleRows = ActiveWorkbook.Sheets(sName).Rows("$32:$34").Address
      .BottomMargin = Application.InchesToPoints(1.25)
      .LeftFooter = "&B APPROVED BY:" & vbCrLf & "_____________________________" & vbCrLf & "Foreman"
      .RightFooter = "&B" & vbCrLf & "_____________________________" & vbCrLf & "Superintendent"
    End If
    .PrintHeadings = False
  End With
End Sub

Public Sub setPrintPagesParams()
  If checkDefaultPrinter = True Then
    If getEmployeePageCount() > 0 Then
      ProgressPrint.Show
    Else
      SetupAllPrintParameters
    End If
  End If
End Sub

Public Sub SetupAllPrintParameters()
  Dim cnt As Integer
  Dim counter As Integer
  counter = 1
  cnt = ActiveWorkbook.Sheets.Count - 3
  For Each sht In ActiveWorkbook.Sheets
    If sht.name <> "Employee" And sht.name <> "LogPage" And sht.name <> "HelpPage" Then
      If cnt > 1 Then
        Call UpdateProgressPrint(CDbl(counter) / CDbl(cnt))
      End If
      setPrintPageParams sht.name
      counter = counter + 1
    End If
  Next sht
  If cnt > 1 Then
    Unload ProgressPrint
  End If
End Sub

Public Sub setCOVERPageParams()
  If checkDefaultPrinter = True Then
    Application.ScreenUpdating = False
    Call setPrintPageParams("COVER")
    Application.ScreenUpdating = True
  End If
End Sub

Public Sub setPageZoom(zoomRate As Integer)
  For Each sht In ActiveWorkbook.Sheets
    If TypeName(sht) = "Worksheet" And sht.name <> "Employee" And sht.name <> "HelpPage" Then
      Application.Windows(sht.name).Zoom = zoomRate
    End If
  Next sht
End Sub

Public Sub myRngCp(rng1 As Range, rng2 As Range)
  rng1.Copy
  rng2.PasteSpecial xlPasteAll
End Sub

Public Sub createNewSheet(shortName As String)
  Call createNewSheetBase(shortName, True)
End Sub

Public Sub createNewSheetBase(shortName As String, isDelTT As Boolean)
  Dim lastWB As Integer
  Dim Flag As Boolean
  Dim cName As String
  Dim sht As Worksheet
  Dim rng As Range
  lastWB = ActiveWorkbook.Sheets.Count
  Worksheets("Employee").Copy After:=Worksheets(lastWB)
  cName = Worksheets(ActiveWorkbook.Sheets.Count).name
  Flag = True
  If InStr(cName, "Employee") > 0 Then
    If Len(Trim(cName)) > Len("Employee") Then
       Flag = False
    End If
  End If
  If Flag = True Then
    For Each sht In ActiveWorkbook.Sheets
      cName = sht.name
      If InStr(cName, "Employee") > 0 Then
        If Len(Trim(cName)) > Len("Employee") Then
          Exit For
        End If
      End If
    Next sht
  End If
  With Worksheets(cName)
    .name = shortName
    If isDelTT = True Then
      On Error Resume Next
      Application.EnableEvents = False
      'delete travel time section
      cName = "'" & shortName & "'!TravelTime"
      Set rng = Range(cName)
      sRow = rng.Row
      'unprotect the sheet
      .Unprotect
      'delete travel time rows
      For i = 1 To 5
        .Rows(sRow).Delete
      Next i
      For i = 1 To 4
        .Rows(sRow).Insert
      Next i
      cName = "A" & CStr(sRow) & ":T" & CStr(sRow + 3)
      If getVersion = 8 Then
        Call myRngCp(ActiveWorkbook.Sheets("Employee").Range("OneCC"), _
          ActiveWorkbook.Sheets(shortName).Range(cName))
        ActiveWorkbook.Sheets(shortName).Range("DataStartPos").Select
      Else
        ActiveWorkbook.Sheets("Employee").Range("OneCC").Copy _
          Destination:=ActiveWorkbook.Sheets(shortName).Range(cName)
        ActiveWorkbook.Sheets(shortName).Range("DataStartPos").Select
      End If
      
      ' Add the Error_Dashboard
      ActiveWorkbook.Sheets("Employee").Range("Error_Dashboard").Copy _
          Destination:=ActiveWorkbook.Sheets(shortName).Range("Error_Dashboard").Item(1)
          
      'protect the sheet again
      .Protect Password:="", DrawingObjects:=False, Contents:=True, _
         Scenarios:=False, UserInterfaceOnly:=False
      Application.EnableEvents = True
      Set rng = Nothing
      On Error GoTo 0
    End If
    .Visible = True
  End With
  Err.Clear
End Sub

Public Sub insertCCFor(sName As String, Optional isMsg As Boolean = False) 'OK!!!
  'Add Cost Code Page
    Dim rName As String
    Dim rng As Range
    Dim sRow As Integer
    rName = "'Employee'!TotalOvertime"
    Set rng = Range(rName)
    sRow = rng.Row + 2
    Set rng = Nothing
    rName = "'" & sName & "'!TotalOvertime"
    Set rng = Range(rName)
    If rng.Row > sRow Then
      If isMsg = True Then
        MsgBox "Cost Code Page is already Inserted."
      End If
      Exit Sub
    End If
    sRow = rng.Row
    If isTravelTime(sName) = True Then
      sRow = sRow - 5
    End If
    'unprotect the sheet
    ActiveWorkbook.Sheets(sName).Unprotect
    'Insert cost code rows
    For i = 1 To 30
      ActiveWorkbook.Sheets(sName).Rows(sRow).Insert
    Next i
    For i = 1 To 5
      rName = "A" & CStr(sRow) & ":T" & CStr(sRow + 5)
      If getVersion = 8 Then
        Call myRangeCopy(ActiveWorkbook.Sheets("Employee").Range("CostCodes"), _
          ActiveWorkbook.Sheets(sName).Range(rName))
        ActiveWorkbook.Sheets(sName).Range("DataStartPos").Select
      Else
        ActiveWorkbook.Sheets("Employee").Range("CostCodes").Copy _
          Destination:=ActiveWorkbook.Sheets(sName).Range(rName)
      End If
      sRow = sRow + 6
    Next i
    'protect the sheet again
    ActiveWorkbook.Sheets(sName).Protect Password:="", DrawingObjects:=False, Contents:=True, _
       Scenarios:=False, UserInterfaceOnly:=False
    Set rng = Nothing
End Sub

Public Sub insertTTFor(sName As String, Optional isMsg As Boolean = False)
  'Insert Travel Time
    Dim rName As String
    Dim rName2 As String
    Dim rng As Range
    Dim sRow As Integer
    If isTravelTime(sName) = True Then
      If isMsg = True Then
        MsgBox "Travel Time Section is already exists."
      End If
      Exit Sub
    End If
    rName = "'" & sName & "'!TotalOvertime"
    Set rng = Range(rName)
    sRow = rng.Row - 4
    'unprotect the sheet
    ActiveWorkbook.Sheets(sName).Unprotect
    'delete travel time rows
    For i = 1 To 4
      ActiveWorkbook.Sheets(sName).Rows(sRow).Delete
    Next i
    For i = 1 To 5
      ActiveWorkbook.Sheets(sName).Rows(sRow).Insert
    Next i
    rName = "A" & CStr(sRow) & ":T" & CStr(sRow + 4)
    If getVersion = 8 Then
      Call myRangeCopy(ActiveWorkbook.Sheets("Employee").Range("TravelTime"), _
        ActiveWorkbook.Sheets(sName).Range(rName))
      ActiveWorkbook.Sheets(sName).Range("DataStartPos").Select
    Else
      ActiveWorkbook.Sheets("Employee").Range("TravelTime").Copy _
        Destination:=ActiveWorkbook.Sheets(sName).Range(rName)
    End If
    rName2 = "'" & sName & "'!TravelTime"
    ActiveWorkbook.Sheets(sName).Range(rName).name = rName2
    'protect the sheet again
    ActiveWorkbook.Sheets(sName).Protect Password:="", DrawingObjects:=False, Contents:=True, _
       Scenarios:=False, UserInterfaceOnly:=False
    Set rng = Nothing
End Sub

Public Sub deleteCCFor(sName As String, Optional isMsg As Boolean = False)
  'Cost Code Page Delete
    Dim rName As String
    Dim rng As Range
    Dim sRow As Integer
    rName = "'Employee'!TotalOvertime"
    Set rng = Range(rName)
    sRow = rng.Row + 2
    Set rng = Nothing
    rName = "'" & sName & "'!TotalOvertime"
    Set rng = Range(rName)
    If rng.Row < sRow Then
      If isMsg = True Then
        MsgBox "There is no extra Cost Code Page."
      End If
      Exit Sub
    End If
    sRow = rng.Row
    If isTravelTime(sName) = True Then
      sRow = sRow - 5
    End If
    sRow = sRow - 30
    'unprotect the sheet
    ActiveWorkbook.Sheets(sName).Unprotect
    'Insert cost code rows
    For i = 1 To 30
      ActiveWorkbook.Sheets(sName).Rows(sRow).Delete
    Next i
    'protect the sheet again
    ActiveWorkbook.Sheets(sName).Protect Password:="", DrawingObjects:=False, Contents:=True, _
       Scenarios:=False, UserInterfaceOnly:=False
    Set rng = Nothing
End Sub

Public Sub deleteTTFor(sName As String, Optional isMsg As Boolean = False)
    Dim rName As String
    Dim rng As Range
    Dim sRow As Integer
    If isTravelTime(sName) = False Then
      If isMsg = True Then
        MsgBox "Travel Time Section is already deleted."
      End If
      Exit Sub
    End If
    rName = "'" & sName & "'!TravelTime"
    Set rng = Range(rName)
    sRow = rng.Row
    'unprotect the sheet
    ActiveWorkbook.Sheets(sName).Unprotect
    'delete travel time rows
    For i = 1 To 5
      ActiveWorkbook.Sheets(sName).Rows(sRow).Delete
    Next i
    For i = 1 To 4
      ActiveWorkbook.Sheets(sName).Rows(sRow).Insert
    Next i
    rName = "A" & CStr(sRow) & ":T" & CStr(sRow + 3)
    If getVersion = 8 Then
      Call myRangeCopy(ActiveWorkbook.Sheets("Employee").Range("OneCC"), _
        ActiveWorkbook.Sheets(sName).Range(rName))
      ActiveWorkbook.Sheets(sName).Range("DataStartPos").Select
    Else
      ActiveWorkbook.Sheets("Employee").Range("OneCC").Copy _
        Destination:=ActiveWorkbook.Sheets(sName).Range(rName)
    End If
    'protect the sheet again
    ActiveWorkbook.Sheets(sName).Protect Password:="", DrawingObjects:=False, Contents:=True, _
       Scenarios:=False, UserInterfaceOnly:=False
    Set rng = Nothing
End Sub


Attribute VB_Name = "Temp"
Sub RightClick_Reset():
For Each ctrl In Application.CommandBars
    ctrl.Enabled = True
Next ctrl
Application.CutCopyMode = True
End Sub

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Workbook_BeforeSave(ByVal SaveAsUI As Boolean, Cancel As Boolean)
    If isSheetsProtected = True Then
      ActiveWorkbook.Saved = True
    End If
End Sub

Private Sub Workbook_Open()
    Dim tmpInt As Integer
    loginType = 0
    loginCount = 0
    lastUsedCCIndex = 0
    isSheetsProtected = False
    tmpInt = getVersion
    
    If tmpInt >= 10 Then
      backgroundErrorCheck
    End If
    If Workbooks.Count > 1 Then
      'MsgBox "There is an open workbook. Please close it if you going to use this workbook."
      MsgBox "There can't be any other open workbook while you are using the Time Card application. " & _
      vbCrLf & vbCrLf & "Please close all open workbooks and start the Time Card again." _
             , vbCritical, "Opened Workbooks [" & CStr(Workbooks.Count) & "]"
      ActiveWorkbook.Saved = True
      ActiveWorkbook.Close
      'Unload me'
    End If
    UserLogin.Show
    Application.ScreenUpdating = False
    Application.EnableAutoComplete = False
    Application.DisplayRecentFiles = False
    'Application.EditDirectlyInCell = True
    Application.MoveAfterReturn = True
    Application.MoveAfterReturnDirection = xlDown
    ActiveWorkbook.Sheets("Employee").Visible = xlSheetHidden
    ActiveWorkbook.Sheets("HelpPage").Visible = xlSheetHidden
    Application.OnKey Key:="%{F11}", Procedure:=""
    Application.OnKey Key:="%{F8}", Procedure:=""
    If loginType = 4 Then
      Call CreateMenu
      ActiveWorkbook.Sheets("LogPage").Visible = xlSheetVisible
    Else
      Call CreateMenuBar
      ActiveWorkbook.Sheets("LogPage").Visible = xlSheetHidden
    End If
    Call MakeEmployeeList
    binaryIO = 0
    If IsNumeric(ActiveWorkbook.Sheets("HelpPage").Range("B5").Cells(1, 1).Value) Then
      binaryIO = CByte(ActiveWorkbook.Sheets("HelpPage").Range("B5").Cells(1, 1).Value)
    End If
    Application.EnableEvents = True
    ActiveWorkbook.Sheets("COVER").Activate
    Application.ScreenUpdating = False
    If ActiveSheet.name = "COVER" Then
      RefreshCover
    End If
    Application.ScreenUpdating = True
End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    If isMenuBar = True Then
      Call DeleteMenuBar
    End If
    Call DeleteMenu
    On Error Resume Next
    Application.CommandBars("EmployeeList").Delete
    Application.CommandBars("Worksheet Menu bar").Controls("&File").Reset
    ActiveWorkbook.Sheets("LogPage").Visible = xlSheetHidden
    On Error GoTo 0
    If isSheetsProtected = True Then
      ActiveWorkbook.Saved = True
    End If
    Application.OnKey Key:="%{F8}"
    Application.OnKey Key:="%{F11}"
End Sub

Private Sub Workbook_SheetSelectionChange(ByVal Sh As Object, ByVal Target As Range)
   'Application.CutCopyMode = False
End Sub
Attribute VB_Name = "UserLogin"
Attribute VB_Base = "0{94CF2511-4A1D-45CB-A965-E89CE246A661}{5A0B2878-DFCB-434A-B646-CB961A37A848}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public loginCount As Integer
Public firstLogin As Boolean

Private Sub btnCancel_Click()
  If firstLogin = True Then
    protectAllSheets
  End If
  '        loginPassed = True
  '        loginCount = 0
  '        unProtectAllSheets
  '        loginType = 4
  '        retrieveMenus
  Unload Me
End Sub

Private Sub btnLogin_Click()
  loginCount = loginCount + 1
  If loginCount > 3 Then
    MsgBox "Only 3 times login try allowed. The time sheet is protected now.", vbInformation
    btnCancel_Click
    Exit Sub
  End If
  Select Case loginType
    Case 4
      If UCase(Trim(txtUserID.Text)) = U4User Then
        If Trim(txtPassword.Text) = U4Pass Then
          loginPassed = True
          loginCount = 0
          unProtectAllSheets
          retrieveMenus
          Unload Me
        End If
      End If
    Case 3
      If UCase(Trim(txtUserID.Text)) = U3User Then
        If Trim(txtPassword.Text) = U3Pass Then
          loginPassed = True
          loginCount = 0
          unProtectAllSheets
          Unload Me
        End If
      End If
    Case 2
      If UCase(Trim(txtUserID.Text)) = U2User Then
        If Trim(txtPassword.Text) = U2Pass Then
          loginPassed = True
          loginCount = 0
          unProtectAllSheets
          Unload Me
        End If
      End If
    Case 1
      If UCase(Trim(txtUserID.Text)) = U1User Then
        If Trim(txtPassword.Text) = U1Pass Then
          loginPassed = True
          loginCount = 0
          unProtectAllSheets
          Unload Me
        End If
      End If
    Case Else
      If UCase(Trim(txtUserID.Text)) = U4User Then
        If Trim(txtPassword.Text) = U4Pass Then
          loginPassed = True
          loginCount = 0
          unProtectAllSheets
          loginType = 4
          retrieveMenus
          Unload Me
        End If
      End If
      If UCase(Trim(txtUserID.Text)) = U3User Then
        If Trim(txtPassword.Text) = U3Pass Then
          loginPassed = True
          loginCount = 0
          unProtectAllSheets
          loginType = 3
          Unload Me
        End If
      End If
      If UCase(Trim(txtUserID.Text)) = U2User Then
        If Trim(txtPassword.Text) = U2Pass Then
          loginPassed = True
          loginCount = 0
          unProtectAllSheets
          loginType = 2
          Unload Me
        End If
      End If
      If UCase(Trim(txtUserID.Text)) = U1User Then
        If Trim(txtPassword.Text) = U1Pass Then
          loginPassed = True
          loginCount = 0
          unProtectAllSheets
          loginType = 1
          Unload Me
        End If
      End If
  End Select
  If loginPassed = False Then
    MsgBox "Wrong Userid or Password. You have only 3 of login tries.", vbInformation
  End If
  
End Sub

Private Sub UserForm_Initialize()
  setUserVariables
  UserLogin.Caption = "Login"
  firstLogin = True
  loginPassed = False
End Sub

Attribute VB_Name = "Utils"
Public CalcTaskID
Public U4User As String
Public U4Pass As String
Public U4Name As String
Public U3User As String
Public U3Pass As String
Public U3Name As String
Public U2User As String
Public U2Pass As String
Public U2Name As String
Public U1User As String
Public U1Pass As String
Public U1Name As String

Global Const TopicStart As Integer = 10 'A10 in the HelpPage Sheet
Global Const CCListStart As Integer = 20 'A20 in the HelpPage Sheet
Global binaryIO As Byte
Global lastUsedCCIndex As Long
Global nFormatStr As String

Sub StartCalculator()
    AppFile = "Calc.exe"
    On Error Resume Next
    Call AppActivate("Calculator")
    If Err <> 0 Then
        Err = 0
        CalcTaskID = Shell(AppFile, 1)
        If Err <> 0 Then MsgBox ("Can't start Calculator")
    End If
End Sub

Public Sub ShowFormPrint()
   Application.Dialogs(xlDialogPrint).Show
End Sub

Sub ToggleWrapText()
'   Toggles text wrap alignment for selected cells
    If TypeName(Selection) = "Range" Then
      Selection.WrapText = Not ActiveCell.WrapText
    End If
End Sub

Function inRange(rng1, rng2) As Boolean
'   Returns True if rng1 is a subset of rng2
    inRange = False
    If rng1.Parent.Parent.name = rng2.Parent.Parent.name Then
        If rng1.Parent.name = rng2.Parent.name Then
            If Union(rng1, rng2).Address = rng2.Address Then
                inRange = True
            End If
        End If
    End If
End Function

Public Function RangeNameExists(nname) As Boolean
'   Returns TRUE if the range name exists
    Dim n As name
    RangeNameExists = False
    For Each n In ActiveWorkbook.Names
        If UCase(n.name) = UCase(nname) Then
            RangeNameExists = True
            Exit Function
        End If
    Next n
End Function

Public Function SheetExists(sName) As Boolean
'   Returns TRUE if sheet exists in the active workbook
    Dim x As Object
    On Error Resume Next
    Set x = ActiveWorkbook.Sheets(sName)
    If Err = 0 Then SheetExists = True _
        Else SheetExists = False
End Function

Public Function WorkbookIsOpen(wbname) As Boolean
'   Returns TRUE if the workbook is open
    Dim x As Workbook
    On Error Resume Next
    Set x = Workbooks(wbname)
    If Err = 0 Then WorkbookIsOpen = True _
        Else WorkbookIsOpen = False
End Function

Public Sub setUserVariables()
  U4User = Trim(CStr(ActiveWorkbook.Sheets("HelpPage").Range("A4").Cells(1, 1).Value))
  U4Pass = Trim(CStr(ActiveWorkbook.Sheets("HelpPage").Range("B4").Cells(1, 1).Value))
  U4Name = Trim(CStr(ActiveWorkbook.Sheets("HelpPage").Range("C4").Cells(1, 1).Value))
  U3User = Trim(CStr(ActiveWorkbook.Sheets("HelpPage").Range("A3").Cells(1, 1).Value))
  U3Pass = Trim(CStr(ActiveWorkbook.Sheets("HelpPage").Range("B3").Cells(1, 1).Value))
  U3Name = Trim(CStr(ActiveWorkbook.Sheets("HelpPage").Range("C3").Cells(1, 1).Value))
  U2User = Trim(CStr(ActiveWorkbook.Sheets("HelpPage").Range("A2").Cells(1, 1).Value))
  U2Pass = Trim(CStr(ActiveWorkbook.Sheets("HelpPage").Range("B2").Cells(1, 1).Value))
  U2Name = Trim(CStr(ActiveWorkbook.Sheets("HelpPage").Range("C2").Cells(1, 1).Value))
  U1User = Trim(CStr(ActiveWorkbook.Sheets("HelpPage").Range("A1").Cells(1, 1).Value))
  U1Pass = Trim(CStr(ActiveWorkbook.Sheets("HelpPage").Range("B1").Cells(1, 1).Value))
  U1Name = Trim(CStr(ActiveWorkbook.Sheets("HelpPage").Range("C1").Cells(1, 1).Value))
  'loginCount = 0
End Sub

Public Sub setCellValue(vl As Variant, sName As String, cl As String)
  Call setCellValue2(vl, sName, cl, "")
End Sub

Public Sub setCellValue2(vl As Variant, sName As String, cl As String, nFormat As String)
  Dim rng As Range
  'unprotect the sheet
  ActiveWorkbook.Sheets(sName).Unprotect
  Set rng = ActiveWorkbook.Sheets(sName).Range(cl)
  rng.Cells(1, 1).Locked = False
  rng.Value = vl
  If Len(nFormat & "") > 0 Then
    rng.NumberFormat = nFormat
  End If
  rng.Cells(1, 1).Locked = True
  'protect the sheet again
  ActiveWorkbook.Sheets(sName).Protect Password:="", DrawingObjects:=False, Contents:=True, _
     Scenarios:=False, UserInterfaceOnly:=False
  Set rng = Nothing
End Sub

Public Function getCellValue(sName As String, cl As String) As String
  getCellValue = CStr(ActiveWorkbook.Sheets(sName).Range(cl).Cells(1, 1).Value) & ""
End Function

Sub DumpAllMenus(Optional TopMenu As String = "Worksheet Menu bar")
    Dim cbr As CommandBar
    Dim cbp As CommandBarPopup

    Set cbr = Application.CommandBars("Worksheet Menu bar")
    If TopMenu <> "Worksheet Menu bar" Then
        Set cbp = cbr.Controls(TopMenu)
        Call DumpMenu(cbp, 1)
    Else
        For Each cbp In cbr.Controls
            Debug.Print cbp.Caption
            Call DumpMenu(cbp, 1)
        Next cbp
    End If
End Sub

Sub DumpMenu(cbp As CommandBarPopup, intLevel As Integer)
    Dim cbc As CommandBarControl
    Dim intI As Integer

    For Each cbc In cbp.CommandBar.Controls
        ' Insert enough spaces to indent according to the
        ' level of recursion.
        For intI = 0 To intLevel
            Debug.Print "   ";
        Next intI
        Debug.Print cbc.Caption, cbc.ID
        If cbc.Type = msoControlPopup Then
            ' Call this routine recursively, to document
            ' the next lower level.
            Call DumpMenu(cbc.Control, intLevel + 1)
        End If
    Next cbc
End Sub

Sub disableCutAndPaste()
'  EnableControl 21, False   ' cut
'  EnableControl 19, False   ' copy
'  EnableControl 22, False   ' paste
'  EnableControl 755, False  ' pastespecial
  Application.OnKey "^c", ""
  Application.OnKey "^v", ""
  Application.OnKey "+{DEL}", ""
  Application.OnKey "+{INSERT}", ""
  Application.OnKey Key:="^n", Procedure:=""
  Application.OnKey Key:="^o", Procedure:=""
  Application.CellDragAndDrop = False
End Sub

Sub enableCutAndPaste()
'  EnableControl 21, True   ' cut
'  EnableControl 19, True   ' copy
'  EnableControl 22, True   ' paste
'  EnableControl 755, True  ' pastespecial
  Application.OnKey "^c"
  Application.OnKey "^v"
  Application.OnKey "+{DEL}"
  Application.OnKey "+{INSERT}"
  Application.OnKey Key:="^n"
  Application.OnKey Key:="^o"
  Application.CellDragAndDrop = True
End Sub

Public Function getVersion() As Integer
  Dim vStr As String
  vStr = CStr(Application.Version)
  If InStr(vStr, "11.") > 0 Then
    getVersion = 11 '2003
  ElseIf InStr(vStr, "10.") > 0 Then
    getVersion = 10 'XP
  ElseIf InStr(vStr, "9.") > 0 Then
    getVersion = 9 'Win2000
  ElseIf InStr(vStr, "8.") > 0 Then
    getVersion = 8 '97
  Else
    getVersion = 0
  End If
End Function

Public Sub backgroundErrorCheck()
  Application.ErrorCheckingOptions.BackgroundChecking = False
End Sub

Public Sub disCustomize(ed As Boolean)
  CommandBars.DisableCustomize = ed
End Sub

Public Function isEmployeePage(sName As String) As Boolean
  isEmployeePage = True
  If sName = "AB" Or sName = "COVER" Or sName = "LogPage" Or sName = "Employee" Or sName = "HelpPage" Or sName = "CCSummary" Or sName = "TDetail" Then 'add TDetail ,lb
    isEmployeePage = False
  End If
End Function

Public Sub checkActiveSheet(Optional wsName As String = "")
  If wsName = "" Then
    wsName = ActiveSheet.name
  End If
  If wsName = "COVER" Then
    RefreshCover
  ElseIf wsName = "CCSummary" Then
    RefreshCCSummary
  End If
End Sub

Public Function getEmployeePageCount() As Integer
  getEmployeePageCount = ActiveWorkbook.Sheets.Count - 7 'Change it if the number of the standard pages incrased !!!
End Function

Public Sub UpdateProgressLoad(Pct As Double)
    With ProgressLoad
        .FrameProgress.Caption = Format(Pct, "0%")
        .LabelProgress.Width = Pct * (.FrameProgress.Width - 10)
        .Repaint
    End With
End Sub

Sub UpdateProgressDelete(Pct As Double)
    With ProgressDelete
        .FrameProgress.Caption = Format(Pct, "0%")
        .LabelProgress.Width = Pct * (.FrameProgress.Width - 10)
        .Repaint
    End With
End Sub

Sub UpdateProgressPrint(Pct As Double)
    With ProgressPrint
        .FrameProgress.Caption = Format(Pct, "0%")
        .LabelProgress.Width = Pct * (.FrameProgress.Width - 10)
        .Repaint
    End With
End Sub

Public Function myReplace(ByVal srcStr As String, fStr As String, tStr As String) As String
  Dim tmpStr As String
  Dim cnt As Integer, l As Integer, k As Integer
  myReplace = ""
  If srcStr = vbNullString Then
    Exit Function
  End If
  If Len(Trim(srcStr)) = 0 Then
    Exit Function
  End If
  tmpStr = srcStr
  l = Len(fStr)
  cnt = 0
  k = 1
  Do While True
   If cnt > 0 Then k = cnt + Len(tStr)
     cnt = InStr(k, tmpStr, fStr)
     If cnt > 0 Then
       tmpStr = Left(tmpStr, cnt - 1) & tStr & Right(tmpStr, Len(tmpStr) - cnt - l + 1)
     Else
       Exit Do
     End If
  Loop
  myReplace = tmpStr
End Function

Public Function searchFor2(name1 As String, name2 As String, sName As String, sPos As Integer) As String
  Dim lastRow As Long
  Dim firstAddress As String
  Dim rng As Range
  Dim theCell As Range
  searchFor2 = ""
  If sPos < 1 Then
    Exit Function
  End If
  With ActiveWorkbook.Sheets(sName)
    lastRow = .UsedRange.Row - 1 + .UsedRange.Rows.Count
    Set rng = Range(.Cells(sPos, 2), .Cells(lastRow, 2))
  End With
  On Error Resume Next
  Set theCell = rng.Find(What:=name2, _
    LookIn:=xlValues, _
    LookAt:=xlWhole, _
    SearchOrder:=xlByRows, _
    SearchDirection:=xlNext, _
    MatchCase:=False _
  )
  If Not theCell Is Nothing Then
    firstAddress = theCell.Address
    Do
      If Err <> 0 Then Exit Do
      If Trim(CStr(theCell.Offset(0, -1).Value) & "") = name1 Then
        lastUsedCCIndex = theCell.Row
        searchFor2 = Trim(CStr(theCell.Offset(0, 1).Value) & "")
        Exit Do
      End If
      Set theCell = rng.FindNext(theCell)
      If theCell Is Nothing Then Exit Do
    Loop While theCell.Address <> firstAddress
  End If
  Set theCell = Nothing
  Set rng = Nothing
End Function


Attribute VB_Name = "ValueUpdate"

Public Function dtForm(cl As Range) As String
  dtForm = ""
  If IsDate(cl.Value) = True Then
    dtForm = Format(CDate(cl.Value), "MM-DD-YYYY")
  End If
End Function

Public Function dtForm2(cl As Range) As String
  Dim dt As Date
  dtForm2 = ""
  If IsDate(cl.Value) = True Then
    dt = DateAdd("d", -7, CDate(cl.Value))
    dtForm2 = Format(dt, "MM-DD-YYYY")
  End If
End Function

Public Function getPageCount()
  getPageCount = 0
  For Each sht In ActiveWorkbook.Sheets
    If TypeName(sht) = "Worksheet" And isEmployeePage(sht.name) = True Then
      getPageCount = getPageCount + 1
    End If
  Next sht
  'getPageCount = getPageCount - 1
End Function

Public Sub cleanUpWR(asName As String)
  Dim V1Range As Range
  Dim V2Range As Range
  Dim tt As Boolean
  Dim rpos As Integer
  Dim dsp As Range
  Dim dep As Range
  tt = isTravelTime(asName)
  rpos = -6
  If tt = False Then
    rpos = -1
  End If
  Set dsp = ActiveWorkbook.Sheets(asName).Range("DataStartPos").Offset(0, 0)
  Set dep = ActiveWorkbook.Sheets(asName).Range("TotalOvertime").Offset(rpos, 7)
  Set V1Range = ActiveWorkbook.Sheets(asName).Range(dsp, dep)
  Set dsp = ActiveWorkbook.Sheets(asName).Range("DataStartPos").Offset(0, 8)
  Set dep = ActiveWorkbook.Sheets(asName).Range("TotalOvertime").Offset(rpos, 15)
  Set V2Range = ActiveWorkbook.Sheets(asName).Range(dsp, dep)
  If Not (V1Range Is Nothing Or V2Range Is Nothing) Then
      Application.EnableEvents = False
      On Error Resume Next
      'delete working area
      V1Range.Value = "" 'VRange.Clear
      V2Range.Value = "" 'VRange.Clear
      'delete comments
      Set dep = ActiveWorkbook.Sheets(asName).Range("TotalOvertime").Offset(3, -2)
      dep.Value = ""
      Set dep = ActiveWorkbook.Sheets(asName).Range("TotalOvertime").Offset(4, -2)
      dep.Value = ""
      'delete travel time components
      If tt = True Then
        Set dep = ActiveWorkbook.Sheets(asName).Range("TotalOvertime").Offset(-2, 4)
        dep.Value = ""
        Set dep = ActiveWorkbook.Sheets(asName).Range("TotalOvertime").Offset(-2, 6)
        dep.Value = ""
        Set dep = ActiveWorkbook.Sheets(asName).Range("TotalOvertime").Offset(-2, 12)
        dep.Value = ""
        Set dep = ActiveWorkbook.Sheets(asName).Range("TotalOvertime").Offset(-2, 14)
        dep.Value = ""
        Set dsp = ActiveWorkbook.Sheets(asName).Range("TotalOvertime").Offset(-4, 1)
        Set dep = ActiveWorkbook.Sheets(asName).Range("TotalOvertime").Offset(-4, 7)
        Set V1Range = ActiveWorkbook.Sheets(asName).Range(dsp, dep)
        V1Range.Value = ""
        Set dsp = ActiveWorkbook.Sheets(asName).Range("TotalOvertime").Offset(-4, 9)
        Set dep = ActiveWorkbook.Sheets(asName).Range("TotalOvertime").Offset(-4, 15)
        Set V2Range = ActiveWorkbook.Sheets(asName).Range(dsp, dep)
        V2Range.Value = ""
      End If
      Call clearLogFor(asName)
      Application.EnableEvents = True
  End If
  Set dep = Nothing
  Set dsp = Nothing
  Set V1Range = Nothing
  Set V2Range = Nothing
End Sub

Public Sub cleanUpCC(asName As String)
  Dim VRange As Range
  Dim rpos As Integer
  Dim dsp As Range
  Dim rName As String
  rpos = -6
  If isTravelTime(asName) = False Then
    rpos = -1
  End If
  rName = "'" & asName & "'!DataStartPos"
  Set dsp = Range(rName).Cells(1, 1).Offset(0, -4) 'one column less
  rName = "'" & asName & "'!TotalOvertime"
  'cost code area range
  Set VRange = ActiveWorkbook.Sheets(asName).Range(dsp, Range(rName).Cells(1, 1).Offset(rpos, -3))
  If Not VRange Is Nothing Then
    Application.EnableEvents = False
    On Error Resume Next
    VRange.Value = ""
    Application.EnableEvents = True
  End If
  Set dsp = Nothing
  Set VRange = Nothing
End Sub

Public Sub myRangeCp2(rng1 As Range, rng2 As Range)
  rng1.Copy
  rng2.PasteSpecial xlPasteAll
End Sub

Public Sub copyCellValues(sName As String, cl1 As String, cl2 As String)
  'unprotect the sheet
  ActiveWorkbook.Sheets(sName).Unprotect
  'copy the range content
  If getVersion = 8 Then
    Call myRangeCp2(ActiveWorkbook.Sheets(sName).Range(cl1), _
                    ActiveWorkbook.Sheets(sName).Range(cl2))
  Else
    ActiveWorkbook.Sheets(sName).Range(cl1).Copy _
                    Destination:=ActiveWorkbook.Sheets(sName).Range(cl2)
  End If
  'protect the sheet again
  ActiveWorkbook.Sheets(sName).Protect Password:="", DrawingObjects:=False, Contents:=True, _
     Scenarios:=False, UserInterfaceOnly:=False
End Sub

Public Sub RefreshCCSummary()
    Dim sht As Worksheet
    Dim regName As String
    Dim rng As Range
    Dim WbookCC() As String
    Dim WbookJC() As String
    Dim WbookSTW1() As Double
    Dim WbookOTW1() As Double
    Dim WbookSTW2() As Double
    Dim WbookOTW2() As Double
    'Dim WbookST() As Double
    'Dim WbookOT() As Double
    Dim dtmp As Double
    Dim shtnum As Integer
    Dim sName As String
    Dim i As Integer, j As Integer
    Dim cnt As Integer, WbPointer As Integer
    Dim cc As String, cRow As String
    Dim jc As String
    Dim ccOTW1 As Double, ccSTW1 As Double
    Dim ccOTW2 As Double, ccSTW2 As Double
    'Dim ccOT As Double, ccST As Double
    Dim Flag As Boolean
    Application.ScreenUpdating = False
    On Error Resume Next
    shtnum = getPageCount
    If shtnum > 0 Then
      ReDim WbookJC(1 To shtnum)
      ReDim WbookCC(1 To shtnum)
      ReDim WbookSTW1(1 To shtnum)
      ReDim WbookOTW1(1 To shtnum)
      ReDim WbookSTW2(1 To shtnum)
      ReDim WbookOTW2(1 To shtnum)
      WbPointer = 1
      WbookJC(1) = ""
      WbookCC(1) = ""
      WbookSTW1(1) = 0#
      WbookOTW1(1) = 0#
      WbookSTW2(1) = 0#
      WbookOTW2(1) = 0#
      shtnum = 0
      For Each sht In ActiveWorkbook.Sheets
        If isEmployeePage(sht.name) = True Then
          shtnum = shtnum + 1
          i = -1
          If isTravelTime(sht.name) = True Then
            i = i - 5
          End If
          'Total hours column
          regName = "'" & sht.name & "'!TotalOT"
          sName = "'" & sht.name & "'!DataStartPos"
          Set rng = sht.Range(sht.Range(sName).Offset(0, -2), sht.Range(regName).Offset(i, 0))
          i = 1
          cnt = rng.Rows.Count
          Do While i < cnt
            ccOTW1 = 0
            ccSTW1 = 0
            ccOTW2 = 0
            ccSTW2 = 0
            cc = ""
            jc = ""
            'Job numbers column
            If Not Application.IsErr(rng.Cells(i, 1).Offset(0, -2)) Then
              jc = Trim(CStr(rng.Cells(i, 1).Offset(0, -2)) & "")
              If Left(jc, 1) = "'" Then
                jc = Right(jc, Len(jc) - 1)
              End If
            End If
            'Cost Code column
            If Not Application.IsErr(rng.Cells(i, 1).Offset(0, -1)) Then
              cc = Trim(CStr(rng.Cells(i, 1).Offset(0, -1)) & "")
              If Left(cc, 1) = "'" Then
                cc = Right(cc, Len(cc) - 1)
              End If
            End If
            If Not Application.IsErr(rng.Cells(i, 10)) Then
              If IsNumeric(rng.Cells(i, 10)) Then
                ccOTW1 = CDbl(rng.Cells(i, 10))
              End If
            End If
            If Not Application.IsErr(rng.Cells(i, 18)) Then
              If IsNumeric(rng.Cells(i, 18)) Then
                ccOTW2 = CDbl(rng.Cells(i, 18))
              End If
            End If
            If Not Application.IsErr(rng.Cells(i + 1, 10)) Then
              If IsNumeric(rng.Cells(i + 1, 10)) Then
                ccSTW1 = CDbl(rng.Cells(i + 1, 10))
                
              End If
            End If
            If Not Application.IsErr(rng.Cells(i + 1, 18)) Then
              If IsNumeric(rng.Cells(i + 1, 18)) Then
                ccSTW2 = CDbl(rng.Cells(i + 1, 18))
                
              End If
            End If
            If (ccOTW1 <> 0) Or (ccSTW1 <> 0) Or (ccOTW2 <> 0) Or (ccSTW2 <> 0) Then
              Flag = False
              For j = 1 To WbPointer
                If cc = WbookCC(j) And jc = WbookJC(j) Then
                  WbookOTW1(j) = WbookOTW1(j) + ccOTW1
                  WbookSTW1(j) = WbookSTW1(j) + ccSTW1
                  WbookOTW2(j) = WbookOTW2(j) + ccOTW2
                  WbookSTW2(j) = WbookSTW2(j) + ccSTW2
                  Flag = True
                  Exit For
                End If
              Next j
              'not found: doesn't exist yet
              If Flag = False Then
                WbPointer = WbPointer + 1
                If WbPointer > UBound(WbookCC) Then
                  ReDim Preserve WbookJC(1 To WbPointer + 10)
                  ReDim Preserve WbookCC(1 To WbPointer + 10)
                  ReDim Preserve WbookOTW1(1 To WbPointer + 10)
                  ReDim Preserve WbookSTW1(1 To WbPointer + 10)
                  ReDim Preserve WbookOTW2(1 To WbPointer + 10)
                  ReDim Preserve WbookSTW2(1 To WbPointer + 10)
                End If
                WbookJC(WbPointer) = jc
                WbookCC(WbPointer) = cc
                WbookOTW1(WbPointer) = ccOTW1
                WbookSTW1(WbPointer) = ccSTW1
                WbookOTW2(WbPointer) = ccOTW2
                WbookSTW2(WbPointer) = ccSTW2
              End If
            End If
            'step is 2 because OT & ST
            i = i + 2
          Loop
        End If
      Next sht
      If WbPointer > 1 Then
        'if it is the first then fill up the firs vector element
        'if there is no values then everithing will be prepared otherwise it have to be overwriten
        If WbookSTW1(1) = 0 And WbookOTW1(1) = 0 And WbookSTW2(1) = 0 And WbookOTW2(1) = 0 Then
          WbookJC(1) = WbookJC(WbPointer)
          WbookCC(1) = WbookCC(WbPointer)
          WbookOTW1(1) = WbookOTW1(WbPointer)
          WbookSTW1(1) = WbookSTW1(WbPointer)
          WbookOTW2(1) = WbookOTW2(WbPointer)
          WbookSTW2(1) = WbookSTW2(WbPointer)
          'go back to the previous one
          WbPointer = WbPointer - 1
        End If
        If WbPointer > 1 Then
          'sort it - ther is a sipler solution but this one is working fine!
          For i = 1 To WbPointer - 1
            For j = i + 1 To WbPointer
              If WbookJC(i) >= WbookJC(j) Then
                If Not ((WbookJC(i) = WbookJC(j)) And (WbookCC(i) >= WbookCC(j))) Then
                  sName = WbookJC(i)
                  WbookJC(i) = WbookJC(j)
                  WbookJC(j) = sName
                  sName = WbookCC(i)
                  WbookCC(i) = WbookCC(j)
                  WbookCC(j) = sName
                  dtmp = WbookSTW1(j)
                  WbookSTW1(j) = WbookSTW1(i)
                  WbookSTW1(i) = dtmp
                  dtmp = WbookOTW1(j)
                  WbookOTW1(j) = WbookOTW1(i)
                  WbookOTW1(i) = dtmp
                  dtmp = WbookSTW2(j)
                  WbookSTW2(j) = WbookSTW2(i)
                  WbookSTW2(i) = dtmp
                  dtmp = WbookOTW2(j)
                  WbookOTW2(j) = WbookOTW2(i)
                  WbookOTW2(i) = dtmp
                End If
              End If
            Next j
          Next i
        End If
      End If
    End If
    lastRow = ActiveWorkbook.Sheets("CCSummary").UsedRange.Row - 1 + ActiveWorkbook.Sheets("CCSummary").UsedRange.Rows.Count
    If lastRow < 2 + WbPointer Then lastRow = 2 + WbPointer
    On Error Resume Next
    Application.EnableEvents = False
    nFormatStr = Worksheets("COVER").Range("E23").NumberFormat
    For i = 3 To lastRow
      cRow = Trim(Str(i))
      j = i - 2
      If j <= WbPointer Then
        Call setCellValue("'" & WbookJC(j), "CCSummary", "A" & cRow)
        Call setCellValue("'" & WbookCC(j), "CCSummary", "B" & cRow)
        Call setCellValue2(WbookSTW1(j), "CCSummary", "C" & cRow, nFormatStr)
        Call setCellValue2(WbookOTW1(j), "CCSummary", "D" & cRow, nFormatStr)
        Call setCellValue2(WbookSTW2(j), "CCSummary", "E" & cRow, nFormatStr)
        Call setCellValue2(WbookOTW2(j), "CCSummary", "F" & cRow, nFormatStr)
        Call setCellValue2(WbookSTW1(j) + WbookSTW2(j), "CCSummary", "G" & cRow, nFormatStr)
        Call setCellValue2(WbookOTW1(j) + WbookOTW2(j), "CCSummary", "H" & cRow, nFormatStr)
      Else
        Call setCellValue("", "CCSummary", "A" & cRow)
        Call setCellValue("", "CCSummary", "B" & cRow)
        Call setCellValue("", "CCSummary", "C" & cRow)
        Call setCellValue("", "CCSummary", "D" & cRow)
        Call setCellValue("", "CCSummary", "E" & cRow)
        Call setCellValue("", "CCSummary", "F" & cRow)
        Call setCellValue("", "CCSummary", "G" & cRow)
        Call setCellValue("", "CCSummary", "H" & cRow)
      End If
    Next i
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    If shtnum > 0 Then
      Erase WbookJC
      Erase WbookCC
      Erase WbookOTW1
      Erase WbookSTW1
      Erase WbookOTW2
      Erase WbookSTW2
    End If
    Set rng = Nothing
End Sub

Public Sub RefreshCover()
    Dim sht As Worksheet
    Dim regName As String
    Dim cSumST As Double
    Dim cSumOT As Double
    Dim cSumTrav As Double
    Dim cSumLOA As Double
    Dim erronous_sht_cnt As Integer
    Dim rng As Range
    Dim SheetData() As String
    Dim SheetST() As Double
    Dim SheetOT() As Double
    Dim dtmp As Double
    Dim shtnum As Integer
    Dim i As Integer, j As Integer
    Dim cnt As Integer
    Dim cRow As String
    cSumST = 0#
    cSumOT = 0#
    cSumTrav = 0#
    cSumLOA = 0#
    erronous_sht_cnt = 0
    Application.ScreenUpdating = False
    On Error Resume Next
    shtnum = getPageCount
    Call setCellValue(shtnum, "COVER", "C23")
    If shtnum > 0 Then
      ReDim SheetData(1 To shtnum)
      ReDim SheetST(1 To shtnum)
      ReDim SheetOT(1 To shtnum)
      shtnum = 0
    
      'get all sum values
      For Each sht In ActiveWorkbook.Sheets
        
        If isEmployeePage(sht.name) = True Then
        
          'check the number of timesheets with error
          regName = "'" & sht.name & "'!Total_Errors"
          
          Set rng = sht.Range(regName)
          number_of_errors = CDbl(rng.Cells(1, 1))
          If (number_of_errors > 0) Then
            erronous_sht_cnt = erronous_sht_cnt + 1
          End If
          
          shtnum = shtnum + 1
          SheetData(shtnum) = ""
          SheetST(shtnum) = 0#
          SheetOT(shtnum) = 0#
          regName = "'" & sht.name & "'!EmployeeName"
          Set rng = sht.Range(regName)
          If Not (rng Is Nothing) Then
            If Not Application.IsErr(rng.Cells(1, 1)) Then
              SheetData(shtnum) = CStr(rng.Cells(1, 1))
            End If
          End If
          regName = "'" & sht.name & "'!TotalST"
          Set rng = sht.Range(regName)
          If Not (rng Is Nothing) Then
           If Not Application.IsErr(rng.Cells(1, 1)) Then
             If IsNumeric(rng.Cells(1, 1)) Then
               SheetST(shtnum) = CDbl(rng.Cells(1, 1))
               cSumST = cSumST + SheetST(shtnum)
             End If
           End If
          End If
          regName = "'" & sht.name & "'!TotalOT"
          Set rng = sht.Range(regName)
          If Not (rng Is Nothing) Then
           If Not Application.IsErr(rng.Cells(1, 1)) Then
             If IsNumeric(rng.Cells(1, 1)) Then
               SheetOT(shtnum) = CDbl(rng.Cells(1, 1))
               cSumOT = cSumOT + SheetOT(shtnum)
             End If
           End If
          End If
          i = -1
        regName = "'" & sht.name & "'!TravelTime"
        If isTravelTime(sht.name) = True Then
          Set rng = Range(regName)
          If Not (rng Is Nothing) Then
           If Not Application.IsErr(rng.Cells(5, 3)) Then
             If IsNumeric(rng.Cells(5, 3)) Then
               cSumTrav = cSumTrav + CDbl(rng.Cells(5, 3))
             End If
           End If
           If Not Application.IsErr(rng.Cells(4, 2)) Then
             If IsNumeric(rng.Cells(4, 2)) Then
               cSumLOA = cSumLOA + CDbl(rng.Cells(4, 2))
             End If
           End If
          End If
        End If
          regName = "'" & sht.name & "'!TravelTime"
          If isTravelTime(sht.name) = True Then
            i = i - 5
            On Error Resume Next
            Set rng = Range(regName)
            If Not (rng Is Nothing) Then
              If Not Application.IsErr(rng.Cells(5, 3)) Then
                If IsNumeric(rng.Cells(5, 3)) Then
                  cSumTrav = cSumTrav + CDbl(rng.Cells(5, 3))
                End If
              End If
              If Not Application.IsErr(rng.Cells(4, 2)) Then
                If IsNumeric(rng.Cells(4, 2)) Then
                  cSumLOA = cSumLOA + CDbl(rng.Cells(4, 2))
                End If
              End If
            End If
          End If
        End If
      Next sht
      'sort those values
      If shtnum > 1 Then
        For i = 1 To shtnum - 1
          For j = i + 1 To shtnum
            If SheetData(i) > SheetData(j) Then
              sName = SheetData(i)
              SheetData(i) = SheetData(j)
              SheetData(j) = sName
              dtmp = SheetST(j)
              SheetST(j) = SheetST(i)
              SheetST(i) = dtmp
              dtmp = SheetOT(j)
              SheetOT(j) = SheetOT(i)
              SheetOT(i) = dtmp
            End If
          Next j
        Next i
      End If
    End If
    lastRow = ActiveWorkbook.Sheets("COVER").UsedRange.Row - 1 + ActiveWorkbook.Sheets("COVER").UsedRange.Rows.Count
    If lastRow < 34 + shtnum Then lastRow = 34 + shtnum
    On Error Resume Next
    Application.EnableEvents = False
    nFormatStr = Worksheets("COVER").Range("E23").NumberFormat
    For i = 35 To lastRow
      cRow = Trim(Str(i))
      j = i - 34
      If j <= shtnum Then
        Call setCellValue(UCase(SheetData(j)), "COVER", "C" & cRow)
        Call setCellValue2(SheetST(j), "COVER", "F" & cRow, nFormatStr)
        Call setCellValue2(SheetOT(j), "COVER", "G" & cRow, nFormatStr)
      Else
        Call setCellValue("", "COVER", "C" & cRow)
        Call setCellValue("", "COVER", "F" & cRow)
        Call setCellValue("", "COVER", "G" & cRow)
      End If
    Next i
    Application.EnableEvents = True
    Call setCellValue(cSumST, "COVER", "B26")
    Call setCellValue(cSumOT, "COVER", "C26")
    Call setCellValue(cSumTrav, "COVER", "D26")
    Call setCellValue(cSumLOA, "COVER", "E26")
    Call setCellValue(erronous_sht_cnt, "COVER", "G30")
    Application.ScreenUpdating = True
    If shtnum > 0 Then
      Erase SheetData
      Erase SheetST
      Erase SheetOT
    End If
    Set rng = Nothing
End Sub

Public Function STOTSum(rng As Range) As Double
  Dim i As Integer
  Dim cnt As Integer
  Dim sName As String
  STOTSum = 0
  i = 1
  sName = rng.Parent.name
  cnt = rng.Rows.Count - 1
  If isTravelTime(sName) = True Then
    'there is a TravelTime range
    cnt = cnt - 5
  End If
  Do While i <= cnt
    If Not Application.IsErr(rng.Cells(i, 1)) Then
      If IsNumeric(rng.Cells(i, 1)) Then
        STOTSum = STOTSum + CDbl(rng.Cells(i, 1))
      End If
    End If
    i = i + 2
  Loop
End Function

Public Sub protectAllSheets()
  Dim rng As Range
  If isSheetsProtected = False Then
    Application.ScreenUpdating = False
    For Each sht In ActiveWorkbook.Sheets
      If TypeName(sht) = "Worksheet" And sht.name <> "Employee" And sht.name <> "AB" And sht.name <> "LogPage" And sht.name <> "HelpPage" Then
        Set rng = sht.UsedRange
        If (rng.Row - 1 + rng.Rows.Count) > 0 And (rng.column - 1 + rng.Columns.Count) > 0 Then
          sht.Unprotect
          rng.Locked = True
          sht.Protect DrawingObjects:=False, Contents:=True, Scenarios:=False
        End If
        Set rng = Nothing
      End If
    Next sht
    Application.ScreenUpdating = True
  End If
  'Call setCellValue("PROTECTED", "COVER", "E30")
  isSheetsProtected = True
End Sub

Public Sub unProtectAllSheets()
'  Dim lastrow As Integer
'  Dim lastcol As Integer
'  Dim rng As Range
'  Dim rn As Integer
'  If isSheetsProtected = True Then
'    For Each sht In ActiveWorkbook.Sheets
'      If TypeName(sht) = "Worksheet" Then
'        If sht.name <> "Employee" Then
'          Set rng = sht.UsedRange
'          lastrow = rng.row - 1 + rng.Rows.Count
'          lastcol = rng.column - 1 + rng.Columns.Count
'          If lastrow > 0 And lastcol > 0 Then
'            sht.Unprotect
'            rng.Locked = vbNull
'            sht.Protect Password:="", DrawingObjects:=False, Contents:=True, Scenarios:=False
'          End If
'          Set rng = Nothing
'        End If
'      End If
'    Next sht
'  End If
  'Call setCellValue("UNPROTECTED", "COVER", "E30")
  isSheetsProtected = False
End Sub

Public Sub unProtectAllSheets2()
  Dim lastRow As Integer
  Dim lastcol As Integer
  Dim rng As Range
  Dim rn As Integer
  If isSheetsProtected = True Then
    For Each sht In ActiveWorkbook.Sheets
      If TypeName(sht) = "Worksheet" Then
        If sht.name <> "Employee" And sht.name <> "AB" Then
          Set rng = sht.UsedRange
          lastRow = rng.Row - 1 + rng.Rows.Count
          lastcol = rng.column - 1 + rng.Columns.Count
          If lastRow > 0 And lastcol > 0 Then
            sht.Unprotect
            sht.EnableSelection = xlNoRestrictions 'xlUnlockedCells
            If sht.name = "COVER" Then
              Set rng = sht.Range("ScheduleDate")
              rng.Select
              rng.Locked = False
              Set rng = sht.Range("D17")
              rng.Locked = False
              Set rng = sht.Range("F17")
              rng.Locked = False
              Set rng = sht.Range("B23")
              rng.Locked = False
              Set rng = sht.Range("B30")
              rng.Locked = False
            Else
              Set rng = sht.Range("EmployeeID")
              rng.Locked = False
              Set rng = sht.Range("EmployeeName")
              rng.Locked = False
              'comments
              Set rng = sht.Range(sht.Range("TotalOvertime").Offset(-2, 4), sht.Range("TotalOvertime").Offset(-2, 7))
              rng.Locked = False
              rn = sht.Range("TotalOvertime").Row - 1
              If isTravelTime(sht.name) = True Then
                rn = rn - 5
                'Travel Time
                Set rng = sht.Range(sht.Range("E" & Trim(Str(rn + 2))), sht.Range("K" & Trim(Str(rn + 2))))
                rng.Locked = False
                'Rate/day and number of days
                Set rng = sht.Range("F" & Trim(Str(rn + 4)))
                rng.Locked = False
                Set rng = sht.Range("H" & Trim(Str(rn + 4)))
                rng.Locked = False
              End If
              'Cost Codes
              Set rng = sht.Range(sht.Range("A" + Trim(Str(sht.Range("DataStartPos").Row))), sht.Range("A" + Trim(Str(rn))))
              rng.Locked = False
              'Values
              Set rng = sht.Range(sht.Range("E" + Trim(Str(sht.Range("DataStartPos").Row))), sht.Range("K" + Trim(Str(rn))))
              rng.Locked = False
            End If
            sht.Protect Password:="", DrawingObjects:=False, Contents:=True, Scenarios:=False
            Set rng = Nothing
          End If
        End If
      End If
    Next sht
  End If
  Call setCellValue("UNPROTECTED", "COVER", "E30")
  isSheetsProtected = False
End Sub
Public Sub RefreshTDetail()
    Dim sht As Worksheet
    Dim regName As String
    Dim rng As Range

    Dim dtmp As Double
    Dim shtnum As Integer
    Dim sName As String
    Dim i As Integer, j As Integer
    Dim cnt As Integer, WbPointer As Integer
    Dim cc As String, cRow As String
    Dim jc As String
   
    Dim Flag As Boolean
    Dim nRowNbr As Integer
    Dim jobNbr As String, employeeID As String, ccOT As String, ccST As String
    Dim dt As Date
    
  
    Application.ScreenUpdating = False
    Application.EnableEvents = False
    

    Set rng = Worksheets("TDetail").UsedRange
    If (rng.Row - 1 + rng.Rows.Count) > 0 And (rng.column - 1 + rng.Columns.Count) > 0 Then
          Worksheets("TDetail").Unprotect
          rng.Locked = False
    End If
    Set rng = Nothing
        
        
      Worksheets("TDetail").Range("A2:G" & Worksheets("TDetail").Rows.Count).Clear


    nRowNbr = 2
    On Error Resume Next
    shtnum = getPageCount
    
    If shtnum > 0 Then
      For Each sht In ActiveWorkbook.Sheets
        If isEmployeePage(sht.name) = True Then
          shtnum = shtnum + 1
          i = -1
          If isTravelTime(sht.name) = True Then
            i = i - 5
          End If
          'Total hours column
          employeeID = sht.Range("'" & sht.name & "'!EmployeeID").Value
          dt = sht.Range("C2").Value
          
          regName = "'" & sht.name & "'!TotalOT"
          sName = "'" & sht.name & "'!DataStartPos"
          Set rng = sht.Range(sht.Range(sName).Offset(0, -2), sht.Range(regName).Offset(i, 0))
          i = 5
  
          cnt = rng.Rows.Count
          Do While i < cnt + 5
            ccOT = ""
            ccST = ""
            cc = ""
            jc = ""
            cc = getCellValue(sht.name, "B" & i)
            'Job numbers column
            If cc <> "" Then
                jobNbr = getCellValue(sht.name, "A" & i)
                ccOT = getCellValue(sht.name, "C" & i)
                ccST = getCellValue(sht.name, "C" & (i + 1))
                
                Call setCellValue(jobNbr, "TDetail", "A" & nRowNbr)
                Call setCellValue(employeeID, "TDetail", "C" & nRowNbr)
                Call setCellValue(dt, "TDetail", "D" & nRowNbr)
                Call setCellValue(cc, "TDetail", "E" & nRowNbr)
                Call setCellValue(CDbl(ccST), "TDetail", "F" & nRowNbr)
                Call setCellValue(CDbl(ccOT), "TDetail", "G" & nRowNbr)
                
                nRowNbr = nRowNbr + 1
            End If
            
            i = i + 2
          Loop
        End If
      Next sht
    End If
    Application.EnableEvents = True
    Application.ScreenUpdating = True
    Set rng = Nothing
End Sub


INQUEST-PP=macro
