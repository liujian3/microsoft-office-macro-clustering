Attribute VB_Name = "A0_Work"
'(c)2010 Terekhov Alexey. All rights reserved.
'Phone: +38631334953, Skype:terekhov_alexey
Option Explicit

Attribute VB_Name = "A1_Module"
'(c)2010 Terekhov Alexey. All rights reserved.
'Phone: +38631334953, Skype:terekhov_alexey
Option Explicit

Public bAFoff As Boolean, bAFclc As Boolean

'############################################
'############### Autofilter #################
'############################################

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub ngcAFcreate()
Attribute ngcAFcreate.VB_Description = "NG4 by Terekhov Alexey 2010 (c)\nShortcut: Ctrl+Shift+F"
Attribute ngcAFcreate.VB_ProcData.VB_Invoke_Func = "F\n14"
' Keyboard Shortcut: Ctrl+Shift+F
  bAFoff = False: bAFclc = True
  If Application.CalculationState <> 0 Then Application.Calculation = xlCalculationAutomatic 'xlDone
  If Sheets(ngcVAR).Cells(2, 12).Value Then
    If fndIsSheet(ngcINP) Then Sheets(ngcINP).Range(Sheets(ngcVAR).Cells(30, 3).Value).AutoFilter Field:=1, Criteria1:="<>0", VisibleDropDown:=False
    If fndIsSheet(ngcCSI) Then Sheets(ngcCSI).Range(Sheets(ngcVAR).Cells(30, 4).Value).AutoFilter Field:=1, Criteria1:="<>0", VisibleDropDown:=False
    If fndIsSheet(ngcPRC) Then Sheets(ngcPRC).Range(Sheets(ngcVAR).Cells(30, 5).Value).AutoFilter Field:=1, Criteria1:="<>0", VisibleDropDown:=False
  Else
    Dim wnd As Window
    For Each wnd In ActiveWorkbook.Windows
      If wnd.ActiveSheet.Name = ngcINP Then
      Application.ScreenUpdating = False
        wnd.ActiveSheet.Range(Sheets(ngcVAR).Cells(30, 3).Value).AutoFilter Field:=1, Criteria1:="<>0", VisibleDropDown:=False
      ElseIf wnd.ActiveSheet.Name = ngcCSI Then
      Application.ScreenUpdating = False
        wnd.ActiveSheet.Range(Sheets(ngcVAR).Cells(30, 4).Value).AutoFilter Field:=1, Criteria1:="<>0", VisibleDropDown:=False
      ElseIf wnd.ActiveSheet.Name = ngcPRC Then
      Application.ScreenUpdating = False
        wnd.ActiveSheet.Range(Sheets(ngcVAR).Cells(30, 5).Value).AutoFilter Field:=1, Criteria1:="<>0", VisibleDropDown:=False
      End If
    Next wnd
  End If
  InvalidateControl sControl:="ngcViewFltr", bShowErr:=False
  Application.ScreenUpdating = True
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub ngcAFqs(Target As Range)
  Application.ScreenUpdating = False
  If Sheets(ngcINP).Cells(1, INTM + 1).Value <> "" Then
    Application.Calculation = xlCalculationManual
    Dim rng As Range
    For Each rng In Target
      If rng.Column = INQV And (rng.Offset(, INCM - rng.Column).Value = "QS" Or rng.Offset(, INCM - rng.Column).Value = "QI" Or (rng.Row > 1 And rng.Row <= 6)) Then
        If rng.Parent.Cells(1, INTM).Value > 1 Then rng.Offset(, INTM + rng.Parent.Cells(1, INTM).Value - rng.Column - 1).Value = rng.Value
        rng.FormulaR1C1 = ngcMsp(True)
      ElseIf rng.Column > INTM And (rng.Offset(, INCM - rng.Column).Value = "QS" Or rng.Offset(, INCM - rng.Column).Value = "QI" Or (rng.Row > 1 And rng.Row <= 6)) Then
        rng.Parent.Cells(rng.Row, INQV).FormulaR1C1 = ngcMsp(True)
      ElseIf rng.Column = INTM And rng.Offset(, INCM - rng.Column).Value = "QG" Then
        If rng.Parent.Cells(1, INTM).Value > 1 Then rng.Offset(, INTM + rng.Parent.Cells(1, INTM).Value - rng.Column - 1).Value = rng.Value
        rng.FormulaR1C1 = ngcMsp(True, True)
      ElseIf rng.Column > INTM And rng.Offset(, INCM - rng.Column).Value = "QG" Then
        rng.Parent.Cells(rng.Row, INTM).FormulaR1C1 = ngcMsp(True, True)
      End If
    Next rng
    Application.Calculation = xlCalculationAutomatic
  End If
  ngcAFcreate ' |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| ScreenUpdating = True
  If ActiveCell.Row > ActiveWindow.ScrollRow And ActiveCell.Row < ActiveWindow.VisibleRange.Rows(ActiveWindow.VisibleRange.Rows.Count).Row Then ActiveCell.Select
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub ngcAFcd(Target As Range)
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
  Dim rng As Range
  For Each rng In Target
    If rng.Column = SPCV And (rng.Offset(, SPCM - rng.Column).Value = "F" Or rng.Offset(, SPCM - rng.Column).Value = "V") Then
      If Sheets(ngcINP).Cells(1, INTM).Value > 1 Then rng.Offset(, SPTM + Sheets(ngcINP).Cells(1, INTM).Value - rng.Column - 1).Value = rng.Value
      rng.FormulaR1C1 = ngcMsp2(True, rng.Offset(, SPTM - rng.Column).FormulaR1C1)
    ElseIf rng.Column > SPTM And (rng.Offset(, SPCM - rng.Column).Value = "F" Or rng.Offset(, SPCM - rng.Column).Value = "V") Then
      rng.Parent.Cells(rng.Row, SPCV).FormulaR1C1 = ngcMsp2(True, rng.Offset(, SPTM - rng.Column).FormulaR1C1)
    ElseIf rng.Column = SPQV And rng.Offset(, SPCM - rng.Column).Value = "QL" Then
      If Sheets(ngcINP).Cells(1, INTM).Value > 1 Then rng.Offset(, SPTM + Sheets(ngcINP).Cells(1, INTM).Value - rng.Column - 1).Value = rng.Value
      rng.FormulaR1C1 = ngcMsp2(True)
    ElseIf rng.Column > SPTM And rng.Offset(, SPCM - rng.Column).Value = "QL" Then
      rng.Parent.Cells(rng.Row, SPQV).FormulaR1C1 = ngcMsp2(True)
    ElseIf rng.Column = SPTV And (rng.Offset(, SPCM - rng.Column).Value = "TD" Or rng.Offset(, SPCM - rng.Column).Value = "TL") Then
      If Sheets(ngcINP).Cells(1, INTM).Value > 1 Then rng.Offset(, SPTM + Sheets(ngcINP).Cells(1, INTM).Value - rng.Column - 1).Value = rng.Value
      rng.FormulaR1C1 = ngcMsp2(True, rng.Offset(, SPTM - rng.Column).FormulaR1C1)
    ElseIf rng.Column > SPTM And (rng.Offset(, SPCM - rng.Column).Value = "TD" Or rng.Offset(, SPCM - rng.Column).Value = "TL") Then
      rng.Parent.Cells(rng.Row, SPCV).FormulaR1C1 = ngcMsp2(True, rng.Offset(, SPTM - rng.Column).FormulaR1C1)
    End If
  Next rng
  Application.Calculation = xlCalculationAutomatic
  Application.ScreenUpdating = True
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub ngcAFturnoff()
Attribute ngcAFturnoff.VB_Description = "NG4 by Terekhov Alexey 2010 (c)\nShortcut: Ctrl+Shift+D"
Attribute ngcAFturnoff.VB_ProcData.VB_Invoke_Func = "D\n14"
' Keyboard Shortcut: Ctrl+Shift+D
  bAFoff = True
  If fndIsSheet(ngcINP) Then If Sheets(ngcINP).FilterMode Then Sheets(ngcINP).Cells.AutoFilter
  If fndIsSheet(ngcCSI) Then If Sheets(ngcCSI).FilterMode Then Sheets(ngcCSI).Cells.AutoFilter
  If fndIsSheet(ngcPRC) Then If Sheets(ngcPRC).FilterMode Then Sheets(ngcPRC).Cells.AutoFilter
  InvalidateControl sControl:="ngcViewFltr", bShowErr:=False
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
  Selection.Select
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub ngcAFchange()
Attribute ngcAFchange.VB_Description = "NG4 by Terekhov Alexey 2010 (c)"
Attribute ngcAFchange.VB_ProcData.VB_Invoke_Func = " \n14"
  ngcAFqs Target:=Sheets(ngcINP).Range(Sheets(ngcINP).CheckBoxes(Application.Caller).LinkedCell)
End Sub

Sub ngcAFmanual(pressed As Boolean)
  On Error GoTo ngcAFmanualError
  If Not fndIsSheet(ngcCSI) Then Exit Sub
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim sht As Worksheet, wnd As Worksheet, iRow As Long, sRng As String, sFrm As String
  Set sht = Sheets(ngcCSI): Set wnd = ActiveSheet
  sRng = Sheets(ngcVAR).Cells(30, 4).Value
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
  Application.EnableEvents = False
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  sht.Range(sRng).Offset(, SPCV - sht.Range(sRng).Column).FormatConditions.Delete
  If pressed Then
    sht.Activate
    sFrm = "=(((rc" & CStr(SPCM) & "=""F"")+(rc" & CStr(INCM) & "=""V""))*(rc" & CStr(SPCV) & "<>rc" & CStr(SPTM) & "))"
    sht.Range(sRng).Offset(, SPCV - sht.Range(sRng).Column).FormatConditions.Add(Type:=xlExpression, Formula1:=Application.ConvertFormula(sFrm, xlR1C1, xlA1, , IIf(Val(Application.Version) > 12, sht.Cells(sht.Range(sRng).Row, SPCV), ActiveCell))).Interior.Color = 255
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For iRow = fndRngFst(sRng) To fndRngLst(sRng)
      If sht.Cells(iRow, SPCM).Value = "F" Then
        sht.Cells(iRow, SPFL).FormulaR1C1 = "=not('" & ngcVAR & "'!r2c18)*or(rc" & CStr(SPCV) & "<>0,rc" & CStr(SPCV) & "<>rc" & CStr(SPTM) & ")"
      ElseIf sht.Cells(iRow, SPCM).Value = "V" Then
        sht.Cells(iRow, SPFL).FormulaR1C1 = "='" & ngcVAR & "'!r2c18*or(rc" & CStr(SPCV) & "<>0,rc" & CStr(SPCV) & "<>rc" & CStr(SPTM) & ")"
      End If
    Next iRow
  Else '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For iRow = fndRngFst(sRng) To fndRngLst(sRng)
      If sht.Cells(iRow, SPCM).Value = "F" Then
        sht.Cells(iRow, SPFL).FormulaR1C1 = "=not('" & ngcVAR & "'!r2c18)*(rc" & CStr(SPCV) & "<>0)"
      ElseIf sht.Cells(iRow, SPCM).Value = "V" Then
        sht.Cells(iRow, SPFL).FormulaR1C1 = "='" & ngcVAR & "'!r2c18*(rc" & CStr(SPCV) & "<>0)"
      End If
    Next iRow
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
ngcAFmanualError:
  wnd.Activate
  Application.EnableEvents = True
  Application.Calculation = xlCalculationAutomatic
  Application.ScreenUpdating = True
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Ctrl+Shift+X
Sub ngcAFcenKey()
Attribute ngcAFcenKey.VB_Description = "NG4 by Terekhov Alexey 2011 (c)\nShortcut: Ctrl+Shift+X"
Attribute ngcAFcenKey.VB_ProcData.VB_Invoke_Func = "X\n14"
  Sheets(ngcVAR).Cells(2, 21).Value = Not (Sheets(ngcVAR).Cells(2, 21).Value)
  InvalidateControl sControl:="ngcViewCENs"
  ngcAFcreate
End Sub

'############################################
'############ Show/hide modules #############
'############################################

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub ngcModulesOn()
Attribute ngcModulesOn.VB_Description = "NG4 by Terekhov Alexey 2010 (c)\nShortcut: Ctrl+Shift+S"
Attribute ngcModulesOn.VB_ProcData.VB_Invoke_Func = "S\n14"
' Keyboard Shortcut: Ctrl + Shift + S
  If Windows.Count > 1 Then ngcWinsBySide bSingle:=True
  ngcModulesShow bShow:=True
  InvalidateControl sControl:="ngcViewTmpl", bShowErr:=False
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub ngcModulesOff()
Attribute ngcModulesOff.VB_Description = "NG4 by Terekhov Alexey 2010 (c)\nShortcut: Ctrl+Shift+H"
Attribute ngcModulesOff.VB_ProcData.VB_Invoke_Func = "H\n14"
' Keyboard Shortcut: Ctrl + Shift + H
  ngcModulesShow bShow:=False
  InvalidateControl sControl:="ngcViewTmpl", bShowErr:=False
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub ngcModulesShow(bShow As Boolean)
  Dim sht As Worksheet, bIs As Boolean, bIn As Boolean, bSimple As Boolean
  Application.ScreenUpdating = False
  bIs = False: bIn = (Left(ActiveSheet.Name, 1) = ".")
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  bSimple = False
  If fndIsSheet(ngcINP) Then
    If Not Sheets(ngcINP).Visible Then
      For Each sht In Sheets
        If Left(sht.Name, 2) = "Q." Then bSimple = True: Exit For
      Next sht
    End If
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For Each sht In Sheets
    If Not bShow And (Left(sht.Name, 1) = "." Or sht.Name = "TC") Then
      If sht.Visible <> xlSheetHidden Then sht.Visible = xlSheetHidden
    ElseIf Left(sht.Name, 2) = "Q." Then
      sht.Visible = bSimple
      bIs = True
    ElseIf sht.Name = ngcINP Then
      sht.Visible = Not bSimple
      bIs = True
    Else
      If sht.Name <> ngcVAR Then bIs = True
      If sht.Visible <> xlSheetVisible Then sht.Visible = xlSheetVisible
    End If
  Next sht
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
  If Not bShow And bIs Then
    Sheets(ngcVAR).Visible = xlSheetHidden
    ActiveWindow.ScrollWorkbookTabs Position:=xlFirst
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If fndIsSheet(ngcCSI) Then
    Sheets(ngcCSI).Columns(SPCM).EntireColumn.Hidden = Not bShow
    Sheets(ngcCSI).Columns(SPID).EntireColumn.Hidden = Not bShow
    Sheets(ngcCSI).Columns(SPTM).EntireColumn.Hidden = Not bShow
    Sheets(ngcCSI).Columns(SPFL).EntireColumn.Hidden = Not bShow
  End If
  If fndIsSheet(ngcINP) Then
    Sheets(ngcINP).Columns(INCM).EntireColumn.Hidden = Not bShow
    Sheets(ngcINP).Columns(INID).EntireColumn.Hidden = Not bShow
    Sheets(ngcINP).Columns(INFL).EntireColumn.Hidden = Not bShow
    Sheets(ngcINP).Columns(INTM).EntireColumn.Hidden = Not bShow
    If bIn Then Sheets(ngcINP).Select
  End If
End Sub

'############################################
'############# Windows routine ##############
'############################################

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub ngcWins()
Attribute ngcWins.VB_Description = "NG4 by Terekhov Alexey 2010 (c)\nShortcut: Ctrl+Shift+V"
Attribute ngcWins.VB_ProcData.VB_Invoke_Func = "V\n14"
' Keyboard Shortcut: Ctrl + Shift + V
  If fndIsSheet(ngcINP) And fndIsSheet(ngcVAR) Then If Not Sheets(ngcVAR).Cells(2, 13).Value And Sheets(ngcVAR).Visible = xlSheetVisible Then ngcModulesOff
  If ActiveWorkbook.Windows.Count = 1 Then
    ngcWinsBySide bSingle:=False
  Else: ngcWinsBySide bSingle:=True: End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub ngcWinsBySide(bSingle As Boolean, Optional bUpdating As Boolean = True)
  If Not fndIsSheet(ngcINP) Or Not fndIsSheet(ngcCSI) Or Not fndIsSheet(ngcPRC) Then Exit Sub
  Dim curINP As String, iZoom As Long, bSaved As Boolean
  bSaved = ActiveWorkbook.Saved
  If bUpdating Then Application.ScreenUpdating = False
  curINP = ngcINP
  If Not Sheets(ngcINP).Visible Then
    Dim sht As Worksheet
    For Each sht In Sheets
      If Left(sht.Name, 2) = "Q." Then curINP = sht.Name: Exit For
    Next sht
  End If
  If bSingle Then
    While ActiveWorkbook.Windows.Count > 1
      ActiveWorkbook.Windows(ActiveWorkbook.Windows.Count).Zoom = 100
      ActiveWorkbook.Windows(ActiveWorkbook.Windows.Count).Close
    Wend
    ActiveWindow.Caption = False
    ActiveWindow.DisplayGridlines = False
    ActiveWindow.WindowState = xlMaximized
    ActiveWindow.Zoom = Val(GetSetting("NG3cfg", "Window", "ZoomSingle", "100"))
  Else
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    Application.Calculation = xlCalculationManual
    iZoom = IIf(Application.Width < 1100, 5 * Int(Application.Width / 55), Val(GetSetting("NG3cfg", "Window", "ZoomSideBySide", "100")))
    'Application.EnableEvents = False
    While ActiveWorkbook.Windows.Count > 2: ActiveWorkbook.Windows(ActiveWorkbook.Windows.Count).Close: Wend
    ActiveWindow.Zoom = iZoom
    If ActiveWorkbook.Windows.Count < 2 Then ActiveWindow.NewWindow
    Windows(2).Activate
    Sheets(ngcPRC).Select: ActiveWindow.DisplayGridlines = False
    Sheets(ngcCSI).Select: ActiveWindow.DisplayGridlines = False
    If curINP = ngcINP Then If Sheets(ngcINP).Cells(1, INTM + 1).Value <> "" Then ngcFixRow wnd:=ActiveWindow
    Sheets(curINP).Select: ActiveWindow.DisplayGridlines = False
    If curINP = ngcINP Then If Sheets(ngcINP).Cells(1, INTM + 1).Value <> "" Then ngcFixRow wnd:=ActiveWindow
    ActiveWindow.Caption = False
    ActiveWorkbook.Windows.Arrange ArrangeStyle:=xlVertical
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Windows(2).Activate
    Sheets(ngcPRC).Select: ActiveWindow.DisplayGridlines = False
    Sheets(curINP).Select: ActiveWindow.DisplayGridlines = False
    If curINP = ngcINP Then If Sheets(ngcINP).Cells(1, INTM + 1).Value <> "" Then ngcFixRow wnd:=ActiveWindow
    Sheets(ngcCSI).Select: ActiveWindow.DisplayGridlines = False
    If curINP = ngcINP Then If Sheets(ngcINP).Cells(1, INTM + 1).Value <> "" Then ngcFixRow wnd:=ActiveWindow
    ActiveWindow.Caption = False
    ActiveWindow.Zoom = iZoom
    Windows(2).Activate
    ActiveWindow.Zoom = iZoom
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    'ngcAFcreate
    'Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic
  End If
  ActiveWorkbook.Saved = bSaved
  If bUpdating Then Application.ScreenUpdating = False
End Sub

'############################################
'############### Pricelists #################
'############################################

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| SQL
Sub ngcPriceSQL(prcCol As Long, strConnect As String)
  On Error GoTo ngcPriceSQLError
  Dim vPrm As Variant, dbCntn As Object, dbRS As Object, p As Worksheet
  Dim sPrc As String, iPrc As Long, vPrc As Variant, sCod As String
  Dim sNot As String, iCur As Long, iLst As Long
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
  Application.EnableEvents = False
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  vPrm = Split(strConnect, "|"): Set dbCntn = CreateObject("ADODB.Connection")
  dbCntn.ConnectionString = "Provider=sqloledb;" & vPrm(2)
  dbCntn.ConnectionTimeout = 10: dbCntn.Open
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  sNot = "": sPrc = ";": Set p = Sheets(ngcPRC)
  Set dbRS = dbCntn.Execute("SELECT KODA,CENA FROM dbo.T_TP_Ceniki WHERE CenikID=" & CStr(vPrm(1)))
  While Not dbRS.EOF: sPrc = sPrc & dbRS.Fields("KODA").Value & ":" & dbRS.Fields("CENA").Value & ";": dbRS.MoveNext: Wend
  Set dbRS = dbCntn.Execute("SELECT KABEL,CENA,KonCena FROM dbo.T_TP_CenikiKabel WHERE CenikID=" & CStr(vPrm(1)))
  While Not dbRS.EOF: sPrc = sPrc & dbRS.Fields("KABEL").Value & ":" & dbRS.Fields("CENA").Value & ":" & dbRS.Fields("KonCena").Value & ";": dbRS.MoveNext: Wend
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  p.Cells(5, prcCol).Value = vPrm(3)
  p.Cells(4, prcCol + 1).Value = vPrm(4)
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  sPrc = Replace(sPrc, ",", ".")
  iLst = p.Cells.SpecialCells(xlCellTypeLastCell).Row
  For iCur = 6 To iLst
    sCod = p.Cells(iCur, PRID).Value
    iPrc = InStr(sPrc, ";" & sCod & ":")
    If iPrc > 0 And sCod <> "" Then
      vPrc = Split(Mid(sPrc, iPrc + 1, InStr(iPrc + 1, sPrc, ";") - iPrc - 1), ":")
      If vPrc(1) = "" Then vPrc(1) = "0"
      p.Cells(iCur, prcCol).FormulaR1C1 = "=round(" & vPrc(1) & "*r2c*(1-r3c*if(rc" & CStr(PRAB) & "=""A"",1,if(rc" & CStr(PRAB) & "=""B"",.5,.1)))*(1-rc" & CStr(PRDQ) & "),2)"
      '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If UBound(vPrc) > 1 Then
        If vPrc(2) = "" Then vPrc(2) = "0"
        p.Cells(iCur, prcCol + 1).FormulaR1C1 = "=round(" & vPrc(2) & "*r2c[-1]*(1-r3c[-1]*if(rc" & CStr(PRAB) & "=""A"",1,if(rc" & CStr(PRAB) & "=""B"",.5,.1)))*(1-rc" & CStr(PRDQ) & "),2)"
      End If
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
      If Val(vPrc(1)) = 0 Then sNot = sNot & ";" & Replace(p.Cells(iCur, PRID).Value & "  " & p.Cells(iCur, PRTX).Value, ";", " ")
      If UBound(vPrc) > 1 Then If Val(vPrc(2)) = 0 Then sNot = sNot & ";" & Replace(p.Cells(iCur, PRID).Value & "  " & p.Cells(iCur, PRTX).Value, ";", " ")
    ElseIf sCod <> "" Then
      sNot = sNot & ";" & Replace(p.Cells(iCur, PRID).Value & "  " & p.Cells(iCur, PRTX).Value, ";", " ")
    End If
  Next iCur
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
ngcPriceSQLError:
  Set dbRS = Nothing
  Application.EnableEvents = True
  DoEvents
  Application.StatusBar = False
  Application.ScreenUpdating = True
  If Err.Number <> 0 Then
    MsgBox "An error occur during operation. Contact " & Sheets(ngcVAR).Cells(2, 7).Value, vbCritical
  ElseIf sNot <> "" Then
    ngcMessage.ManualShow sMsg:=Mid(sNot, 2), sLabel:="Following codes has no prices:"
  End If
  Application.Calculation = xlCalculationAutomatic
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| CSP/XML
Sub ngcPriceFile(prcCol As Long, Optional fileFrom As String = "")
  On Error GoTo ngcPriceFileError
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If fileFrom = "" Then
    Dim vPath As Variant
    vPath = Application.GetOpenFilename("Iskratel pricelists,*.xml;*.csp")
    If vPath = False Then Exit Sub
    fileFrom = vPath
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
  Application.EnableEvents = False
  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim p As Worksheet, sCod As String, sPrc As String, sCon As String
  Dim iCur As Long, iFnd As Long, iLst As Long, sNot As String
  iFnd = 0: sNot = "": Set p = Sheets(ngcPRC)
  If UCase(Right(fileFrom, 4)) = ".CSP" Then
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| CSP
    Dim fso As Object, fFile As Object, sFile As Variant, sAdr As String
    Set fso = CreateObject("Scripting.FileSystemObject")
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| CSP |fffd||fffd| unicode
    Set fFile = fso.OpenTextFile(fileFrom, , , 0)
    sFile = fFile.ReadAll: fFile.Close
    If Left(sFile, 1) = Chr(255) Then
      Set fFile = fso.OpenTextFile(fileFrom, , , -1)
      sFile = Split(fFile.ReadAll, vbCrLf): fFile.Close
    End If
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Left(sFile, 10) <> "##TPVALUTA" Then
      MsgBox "File is not pricelist!", vbCritical
    Else
      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      p.Cells(5, prcCol).Value = Mid(fileFrom, InStrRev(fileFrom, "\") + 1, Len(fileFrom) - InStrRev(fileFrom, "\") - 4)
      sCod = Mid(sFile, 12, 3)
      p.Cells(4, prcCol + 1).Value = Switch(sCod = "978", "EUR", sCod = "840", "USD", sCod = "643", "RUB", sCod = "705", "SIT", True, sCod)
      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Dim vCode As Variant, iPos As Long
      iLst = p.Cells.SpecialCells(xlCellTypeLastCell).Row
      For iCur = 6 To iLst
        If p.Cells(iCur, PRID).Value <> "" Then
          Application.StatusBar = "Loading... " & CStr(Int(100 * iCur / iLst)) & "% complete"
          iPos = InStr(sFile, vbCrLf & p.Cells(iCur, PRID).Value & ";")
          If iPos > 0 Then
            If InStr(iPos + 1, sFile, vbCrLf) > 0 Then
              sCod = Mid(sFile, iPos + 2, InStr(iPos + 1, sFile, vbCrLf) - iPos - 2)
            Else: sCod = Mid(sFile, iPos + 1): End If
            vCode = Split(sCod, ";")
            If UBound(vCode) > 0 Then
              sPrc = IIf(vCode(1) <> "", vCode(1), "0"): sCon = ""
              If UBound(vCode) > 1 Then sCon = IIf(vCode(2) <> "", vCode(2), "0")
              p.Cells(iCur, prcCol).FormulaR1C1 = "=round(" & sPrc & "*r2c*(1-r3c*if(rc" & CStr(PRAB) & "=""A"",1,if(rc" & CStr(PRAB) & "=""B"",.5,.1)))*(1-rc" & CStr(PRDQ) & "),2)"
              '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              If sCon <> "" Then p.Cells(iCur, prcCol + 1).FormulaR1C1 = "=round(" & sCon & "*r2c[-1]*(1-r3c[-1]*if(rc" & CStr(PRAB) & "=""A"",1,if(rc" & CStr(PRAB) & "=""B"",.5,.1)))*(1-rc" & CStr(PRDQ) & "),2)"
              '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              If Val(sPrc) = 0 Or (sCon <> "" And Val("0" & sCon) = 0) Then
                sNot = sNot & ";" & Replace(p.Cells(iCur, PRID).Value & "  " & p.Cells(iCur, PRTX).Value, ";", " ")
                p.Cells(iCur, prcCol).Interior.Color = 8420607
                If sCon <> "" Then p.Cells(iCur, prcCol + 1).Interior.Color = 8420607
              Else
                p.Cells(iCur, prcCol).Interior.ColorIndex = xlColorIndexNone
                If sCon <> "" Then p.Cells(iCur, prcCol + 1).Interior.ColorIndex = xlColorIndexNone
              End If
              '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              iFnd = iFnd + 1
            End If
          Else
            sNot = sNot & ";" & Replace(p.Cells(iCur, PRID).Value & "  " & p.Cells(iCur, PRTX).Value, ";", " ")
            p.Cells(iCur, prcCol).Interior.Color = 8420607
            If p.Cells(iCur, PRCB).Value <> "" Then p.Cells(iCur, prcCol + 1).Interior.Color = 8420607
          End If
        End If
      Next iCur
    End If
  Else
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML
    Dim xmlPriceList As Object, xmlRecord As Object, xmlList As Object
    Set xmlPriceList = CreateObject("MSXML2.DOMDocument")
    xmlPriceList.Load fileFrom
    xmlPriceList.LoadXML Replace(Replace(xmlPriceList.xml, " xmlns=""http://www.iskratel.si/xmlnamespaces""", ""), " xmlns='http://www.iskratel.si/xmlnamespaces'", "")
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    xmlPriceList.setProperty "SelectionLanguage", "XPath"
    Set xmlList = xmlPriceList.SelectNodes("/PriceList/*")
    If xmlList.Length <> 1 Then
      MsgBox "There is no prices or more then one pricelist in the file!", vbCritical
    Else
      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Set xmlRecord = xmlList(0)
      p.Cells(5, prcCol).Value = xmlRecord.getAttribute("Opis")
      p.Cells(4, prcCol + 1).Value = xmlRecord.getAttribute("Valuta")
      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      iLst = p.Cells.SpecialCells(xlCellTypeLastCell).Row
      For iCur = 6 To iLst
        sCod = p.Cells(iCur, PRID).Value
        If sCod <> "" Then
          Application.StatusBar = "Loading... " & CStr(Int(100 * iCur / iLst)) & "% complete"
          Set xmlList = xmlPriceList.SelectNodes("/PriceList/T_GD_TP04/*[(@KODA='" & sCod & "')or(@KABEL='" & sCod & "')]")
          If xmlList.Length > 0 Then
            Set xmlRecord = xmlList.Item(0)
            If Not IsNull(xmlRecord.getAttribute("CENA")) Then
              sPrc = xmlRecord.getAttribute("CENA")
              p.Cells(iCur, prcCol).FormulaR1C1 = "=round(" & sPrc & "*r2c*(1-r3c*if(rc" & CStr(PRAB) & "=""A"",1,if(rc" & CStr(PRAB) & "=""B"",.5,.1)))*(1-rc" & CStr(PRDQ) & "),2)"
              '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              If xmlRecord.BaseName = "T_TP_CENIKIKABEL" Then
                sCon = xmlRecord.getAttribute("KonCena"): If sCon = "" Then sCon = "0"
                p.Cells(iCur, prcCol + 1).FormulaR1C1 = "=round(" & sCon & "*r2c[-1]*(1-r3c[-1]*if(rc" & CStr(PRAB) & "=""A"",1,if(rc" & CStr(PRAB) & "=""B"",.5,.1)))*(1-rc" & CStr(PRDQ) & "),2)"
              Else: sCon = "": End If
              '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
              If Val(sPrc) = 0 Or (sCon <> "" And Val("0" & sCon) = 0) Then
                sNot = sNot & ";" & Replace(p.Cells(iCur, PRID).Value & "  " & p.Cells(iCur, PRTX).Value, ";", " ")
                p.Cells(iCur, prcCol).Interior.Color = 8420607
                If sCon <> "" Then p.Cells(iCur, prcCol + 1).Interior.Color = 8420607
              Else
                p.Cells(iCur, prcCol).Interior.ColorIndex = xlColorIndexNone
                p.Cells(iCur, prcCol + 1).Interior.ColorIndex = xlColorIndexNone
              End If
              '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              iFnd = iFnd + 1
            End If
          Else
            sNot = sNot & ";" & Replace(p.Cells(iCur, PRID).Value & "  " & p.Cells(iCur, PRTX).Value, ";", " ")
            p.Cells(iCur, prcCol).Interior.Color = 8420607
            If p.Cells(iCur, PRCB).Value <> "" Then p.Cells(iCur, prcCol + 1).Interior.Color = 8420607
          End If
        End If
      Next iCur
    End If
  End If
ngcPriceFileError:
  Application.EnableEvents = True
  DoEvents
  Application.StatusBar = False
  Application.ScreenUpdating = True
  If Err.Number <> 0 Then
    MsgBox "An error occur during operation. Contact " & Sheets(ngcVAR).Cells(2, 7).Value, vbCritical
  ElseIf sNot <> "" Then
    ngcMessage.ManualShow sMsg:=Mid(sNot, 2), sLabel:="Found " & CStr(iFnd) & " prices." & vbCrLf & "Following codes (" & CStr(iCur - iFnd - 7) & ") has no prices:"
  End If
  Application.Calculation = xlCalculationAutomatic
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub ngcPriceClear(prcCol As Long)
  On Error GoTo ngcPriceClearError
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
  Application.EnableEvents = False
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim p As Worksheet, iRow As Long, iLst As Long
  Set p = Sheets(ngcPRC): iLst = p.Cells.SpecialCells(xlCellTypeLastCell).Row
  p.Cells(2, prcCol).Value = 1
  p.Cells(3, prcCol).Value = 0
  p.Cells(4, prcCol + 1).Value = ""
  p.Cells(5, prcCol).Value = ""
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For iRow = 6 To iLst
    If p.Cells(iRow, PRID).Value <> "" Then
      p.Cells(iRow, prcCol).Value = 0
      If p.Cells(iRow, PRCB).Value = "Y" Then p.Cells(iRow, prcCol + 1).Value = 0
    End If
  Next iRow
ngcPriceClearError:
  Application.EnableEvents = True
  Application.StatusBar = False
  Application.Calculation = xlCalculationAutomatic
  If Err.Number <> 0 Then MsgBox "An error occur during operation. Contact " & Sheets(ngcVAR).Cells(2, 7).Value, vbCritical
  Application.ScreenUpdating = True
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| Tools
Sub ngcShowTools()
Attribute ngcShowTools.VB_Description = "NG4 by Terekhov Alexey 2011 (c)\nShortcut: Ctrl+Shift+T"
Attribute ngcShowTools.VB_ProcData.VB_Invoke_Func = "T\n14"
  Sheets(ngcVAR).Cells(2, 28).Value = Not (Sheets(ngcVAR).Cells(2, 28).Value)
  InvalidateControl sControl:="ngcToolboxBtn"
End Sub

'############################################
'###############  Save XLS  #################
'############################################

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| XLS
Sub ngcSaveExcel(ByRef sErr As String)
  On Error GoTo ngcSaveExcelError
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim cfg As Worksheet, inp As Worksheet, prc As Worksheet, hdr As Worksheet, pnt As Worksheet, var As Worksheet
  Dim wnd As Worksheet, sLng As String, bNms As Boolean, bFst As Boolean, bSnd As Boolean, bVar As Boolean
  Dim rng As Range, iMsp As Long, iHdr As Long, iRow As Long, dPrc As Double, sPrc As String
  Dim cCG As Long, iCcg As Long, iCcd As Long, sSum As String
  Dim iIcr As Long, iInf As Long, iInd As Long, sTmp As String
  Set wnd = ActiveSheet
  Set inp = Sheets(ngcINP)
  Set cfg = Sheets(ngcCSI)
  Set prc = Sheets(ngcPRC)
  Set var = Sheets(ngcVAR)
  sLng = inp.Cells(1, INFL).Value
  bNms = Sheets(ngcPRC).Cells(2, PRQ2).Value
  bFst = Sheets(ngcPRC).Cells(3, PRQ2).Value
  bSnd = Sheets(ngcPRC).Cells(4, PRQ2).Value
  iInf = fndRngFst(var.Cells(30, 3).Value)
  iInd = fndRngLst(var.Cells(30, 3).Value)
  While inp.Cells(iInf, INCM).Value <> "PR" And iInf < iInd: iInf = iInf + 1: Wend
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.ScreenUpdating = False
  Application.EnableEvents = False
  Application.Calculation = xlCalculationManual
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.StatusBar = "Creating new workbook..."
  Set hdr = Workbooks.Add(xlWBATWorksheet).Sheets(1)
  cfg.Activate
  wrtApS sht:=hdr, dft:=Nothing, sName:=escID(ngcInfo("Project") & " " & Format(Now, "yyyy.mm.dd"), 2, Nothing, sErr), bPrint:=True '2=filename
  hdr.PageSetup.Orientation = xlLandscape
  wrtApC rng:=hdr.Range(hdr.Cells(1, 1), hdr.Cells(1, 7 - 2 * bFst - 2 * bSnd)), iCols:=Array(1, 2, 3, 4, 5, 6, 7, 8, 9), _
    cWths:=Array(4, 14, 26 - 26 * Not (bFst Or bSnd), 8, 8, 12, 14, 12, 14), _
    cFrms:=Array("", "", "", "", "", "#,##0.00", "#,##0.00", "#,##0.00", "#,##0.00"), _
    cAlgs:=Array(xlLeft, xlLeft, xlLeft, xlRight, xlRight, xlRight, xlRight, xlRight, xlRight), cFncs:=Array(-1)
  hdr.Columns(3).EntireColumn.WrapText = True
  wrtApR rng:=hdr.Range(hdr.Cells(1, 1), hdr.Cells(1, 5 - 2 * bFst - 2 * bSnd)), iCols:=Array(1), _
    cTxts:=Array(ngcL(var.Cells(22, 3).Value, sLng, False)), tpl:=var.Cells(30, 3), iApr:=2
  hdr.Cells(1, 1).Font.Bold = True
  wrtApR rng:=hdr.Range(hdr.Cells(3, 1), hdr.Cells(3, 5 - 2 * bFst - 2 * bSnd)), iCols:=Array(1, 2, 3, 4, 5, 6, 7, 8, 9), _
    cTxts:=Array(ngcL(var.Cells(23, 2).Value, sLng, False), ngcL(var.Cells(23, 3).Value, sLng, False), _
    ngcL(var.Cells(23, 4).Value, sLng, False), ngcL(var.Cells(23, 5).Value, sLng, False), _
    ngcL(var.Cells(23, 6).Value, sLng, False)), tpl:=var.Cells(30, 4), iApr:=0
  hdr.Cells(3, 8 - 2 * bFst - 2 * bSnd).Font.Size = 14
  If bFst Then hdr.Cells(3, 6).Value = ngcL(var.Cells(23, 7).Value, sLng, False): hdr.Cells(3, 7) = ngcL(var.Cells(23, 8).Value, sLng, False)
  If bSnd Then hdr.Cells(3, 6 - 2 * bFst).Value = ngcL(var.Cells(23, 7).Value, sLng, False): hdr.Cells(3, 7 - 2 * bFst) = ngcL(var.Cells(23, 8).Value, sLng, False)
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim out As Worksheet, fnd As Range, sCod As String, iPrc As Integer, bPrc As Boolean
  bPrc = (prc.CheckBoxes("ngcPrintSheet").Value = xlOn)
  If bPrc Then
    Set out = hdr.Parent.Sheets.Add(After:=hdr.Parent.Sheets(hdr.Parent.Sheets.Count))
    wrtApS sht:=out, dft:=Nothing, sName:="Pricelist", bPrint:=True '2=filename
    wrtApC rng:=out.Range(out.Cells(1, 1), out.Cells(1, 3 - 1 * bFst - 1 * bSnd)), iCols:=Array(1, 2, 3, 4, 5), _
      cWths:=Array(12, 35 - (14 * Not bFst) - (14 * Not bSnd), 10, 14, 14), _
      cFrms:=Array("", "", "", "#,##0.00", "#,##0.00"), _
      cAlgs:=Array(xlLeft, xlLeft, xlRight, xlRight, xlRight), cFncs:=Array(-1)
    wrtApR rng:=out.Range(out.Cells(1, 1), out.Cells(1, 3 - 1 * bFst - 1 * bSnd)), iCols:=Array(1), _
      cTxts:=Array(ngcL(var.Cells(19, 2).Value, sLng, False)), tpl:=var.Cells(30, 3), iApr:=3
    out.Cells(1, 1).Font.Bold = True
    wrtApR rng:=out.Range(out.Cells(3, 1), out.Cells(3, 3 - 1 * bFst - 1 * bSnd)), iCols:=Array(1, 2, 3, 4, 5), _
      cTxts:=Array(ngcL(var.Cells(24, 2).Value, sLng, False), ngcL(var.Cells(24, 3).Value, sLng, False), _
      ngcL(var.Cells(20, 3).Value, sLng, False)), tpl:=var.Cells(30, 4), iApr:=0
    out.Cells(3, 6).Font.Size = 14
    If bFst Or bSnd Then out.Cells(3, 4).Value = ngcL(var.Cells(20, 5).Value, sLng, False) & IIf(bFst, "1", "2")
    If bFst And bSnd Then out.Cells(3, 5).Value = ngcL(var.Cells(20, 5).Value, sLng, False) & "2"
    out.Columns(2).EntireColumn.WrapText = True
    iPrc = 4
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  iMsp = 1: iHdr = 4
  While iMsp = 1 Or Sheets(ngcINP).Cells(1, INTM + iMsp).Value <> ""
    Application.StatusBar = "Prepare " & CStr(iMsp) & "..."
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Application.Calculation = xlCalculationAutomatic
    If Sheets(ngcINP).Cells(1, INTM + iMsp).Value <> "" Then Sheets(ngcINP).Cells(1, INTM).Value = iMsp + 1
    While Application.CalculationState <> xlDone: DoEvents: Wend
    sTmp = ngcL(var.Cells(22, 4).Value, sLng, False)
    Application.Calculation = xlCalculationManual
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Set pnt = hdr.Parent.Sheets.Add(After:=hdr.Parent.Sheets(hdr.Parent.Sheets.Count))
    wrtApS sht:=pnt, dft:=Nothing, sName:=escID(ngcInfo("Spec") & "#" & CStr(iMsp), 2, Nothing, sErr), bPrint:=True '2=filename
    wrtApC rng:=pnt.Range(pnt.Cells(1, 1), pnt.Cells(1, 4 - 3 * bFst - 3 * bSnd)), iCols:=Array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), _
      cWths:=Array(4, 12, 25 - (25 * Not bFst) - (25 * Not bSnd), 8, 12, 10, 14, 12, 10, 14), _
      cFrms:=Array("", "", "", "", "#,##0.00", "#,##0.00%", "#,##0.00", "#,##0.00", "#,##0.00%", "#,##0.00"), _
      cAlgs:=Array(xlLeft, xlLeft, xlLeft, xlRight, xlRight, xlRight, xlRight, xlRight, xlRight, xlRight), cFncs:=Array(-1)
    wrtApR rng:=pnt.Range(pnt.Cells(1, 1), pnt.Cells(1, 4 - 3 * bFst - 3 * bSnd)), iCols:=Array(1), _
      cTxts:=Array(ngcInfo("Object", False)), tpl:=var.Cells(30, 4), iApr:=2
    pnt.Columns(3).EntireColumn.WrapText = True
    pnt.Columns(6).EntireColumn.Hidden = True
    pnt.Columns(9).EntireColumn.Hidden = True
    pnt.Columns(11).EntireColumn.Hidden = True
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Application.StatusBar = "Prepare " & CStr(iMsp) & "... Writing '" & pnt.Name & "'..."
    hdr.Cells(iHdr, 1).Value = "'" & CStr(iMsp) & "."
    hdr.Cells(iHdr, 2).Value = pnt.Name
    hdr.Cells(iHdr, 3).FormulaR1C1 = "='" & pnt.Name & "'!r1c1"
    hdr.Cells(iHdr, 5).Value = 1
    If bFst Or bSnd Then hdr.Cells(iHdr, 7).FormulaR1C1 = "=rc[-2]*rc[-1]"
    If bFst And bSnd Then hdr.Cells(iHdr, 9).FormulaR1C1 = "=rc[-4]*rc[-1]"
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (order)
    iRow = 3: pnt.Cells(2, 1).FormulaR1C1 = sTmp: bVar = var.Cells(2, 18).Value
    If bVar Then
      Dim sCen As String, sVer As String, sOrd As Variant, dCPs As Variant
      sCen = Right("00000" & ngcInfo("spec", False), 5)
      sVer = Right("000" & ngcInfo("cen", False), 3)
      dCPs = Array("A", "B", "D", "E", "F", "G", "H", "J", "K", "I", "R")
      For Each sOrd In dCPs
        pnt.Cells(iRow, 2).FormulaR1C1 = "CEN-" & sOrd & ":"
        pnt.Cells(iRow, 3).FormulaR1C1 = "CEN" & sCen & sOrd & "-" & sVer
        iRow = iRow + 1
      Next sOrd
      iRow = iRow + 1
    End If
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    cCG = 0: iCcg = 0: iCcd = 0: sSum = ""
    For Each rng In cfg.Range(var.Cells(30, 4).Value).Cells
      If rng.Offset(, SPCM - rng.Column).Value = "TD" Or rng.Offset(, SPCM - rng.Column).Value = "TL" Then
        If rng.Offset(, SPTV - rng.Column).Value <> 0 Then
          pnt.Cells(iRow, 2).Value = rng.Offset(, SPTT - rng.Column).Value
          pnt.Cells(iRow, 4).Value = rng.Offset(, SPTV - rng.Column).Value
          pnt.Cells(iRow, 11).Value = rng.Offset(, SPID - rng.Column).Value
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
          If rng.Offset(, SPCM - rng.Column).Value = "TL" Then
            pnt.Cells(iRow, 2).Borders(xlEdgeTop).LineStyle = xlContinuous
            pnt.Cells(iRow, 3).Borders(xlEdgeTop).LineStyle = xlContinuous
          End If
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
          If rng.Offset(, SPID - rng.Column).Value = "PORTI" Or rng.Offset(, SPID - rng.Column).Value = "PORTS" Then
            hdr.Cells(iHdr, 4).FormulaR1C1 = "='" & pnt.Name & "'!r" & CStr(iRow) & "c4"
          End If
          iRow = iRow + 1
        End If
      ElseIf rng.Offset(, SPCM - rng.Column).Value = "CG" Then
        If iRow = 3 Then pnt.Cells(2, 1).Value = ""
        If cCG > 0 And iCcd > 0 Then
          If bFst Or bSnd Then pnt.Cells(iRow - iCcd - 1, 7).FormulaR1C1 = "=sum(r" & CStr(iRow - iCcd) & "c:r" & CStr(iRow - 1) & "c)"
          If bFst And bSnd Then pnt.Cells(iRow - iCcd - 1, 10).FormulaR1C1 = "=sum(r" & CStr(iRow - iCcd) & "c:r" & CStr(iRow - 1) & "c)"
          pnt.Range(pnt.Cells(iRow - iCcd, 1), pnt.Cells(iRow - 1, 4 - 3 * bFst - 3 * bSnd)).Borders(xlInsideHorizontal).LineStyle = xlContinuous
        End If
        cCG = rng.Row: iCcd = 0
      ElseIf (rng.Offset(, SPCM - rng.Column).Value = "F" And Not bVar) Or (rng.Offset(, SPCM - rng.Column).Value = "V" And bVar) Then
        If rng.Offset(, SPCV - rng.Column).Value <> 0 Then
          '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
          If iCcd = 0 Then
            iCcg = iCcg + 1
            wrtApR rng:=pnt.Range(pnt.Cells(iRow, 1), pnt.Cells(iRow, 4 - 3 * bFst - 3 * bSnd)), iCols:=Array(1, 2, 3), _
              cTxts:=Array("'" & CStr(iCcg) & ".", cfg.Cells(cCG, SPCC).Value), tpl:=var.Cells(30, 4), iApr:=3
            sSum = sSum & ",r" & CStr(iRow) & "c"
            iRow = iRow + 1
          End If
          '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          If bPrc Then
            sCod = rng.Offset(, SPCC - rng.Column).Value
            Set fnd = out.Columns(1).EntireColumn.Find(What:=sCod, LookAt:=xlWhole, LookIn:=xlValues)
            If fnd Is Nothing Then
              iPrc = 4
              While (out.Cells(iPrc, 1).Value < sCod) And (out.Cells(iPrc, 1).Value <> ""): iPrc = iPrc + 1: Wend
              out.Rows(iPrc).EntireRow.Insert Shift:=xlDown, CopyOrigin:=xlFormatFromRightOrBelow
              out.Cells(iPrc, 3).FormulaR1C1 = "='" & pnt.Name & "'!r" & CStr(iRow) & "c4"
            Else
              iPrc = fnd.Row
              out.Cells(iPrc, 3).FormulaR1C1 = out.Cells(iPrc, 3).FormulaR1C1 & "+'" & pnt.Name & "'!r" & CStr(iRow) & "c4"
            End If
            out.Cells(iPrc, 1).Value = rng.Offset(, SPCC - rng.Column).Value
            out.Cells(iPrc, 2).Value = rng.Offset(, SPCT - rng.Column).Value
          End If
          '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
          iCcd = iCcd + 1
          pnt.Cells(iRow, 1).Value = "'" & CStr(iCcg) & "." & CStr(iCcd) & "."
          If bPrc Then pnt.Cells(iRow, 2).FormulaR1C1 = "='" & out.Name & "'!r" & CStr(iPrc) & "c1" Else pnt.Cells(iRow, 2).Value = rng.Offset(, SPCC - rng.Column).Value
          If bPrc Then pnt.Cells(iRow, 3).FormulaR1C1 = "='" & out.Name & "'!r" & CStr(iPrc) & "c2" Else pnt.Cells(iRow, 3).Value = rng.Offset(, SPCT - rng.Column).Value
          pnt.Cells(iRow, 4).Value = rng.Offset(, SPCV - rng.Column).Value
          If bFst Or bSnd Then
            dPrc = Round(CDbl(rng.Offset(, IIf(bFst, SPC1, SPC2) - rng.Column).Value), 2)
            If dPrc = 0 Then pnt.Cells(iRow, 5).Interior.Color = 255: If InStr(sPrc, ";" & rng.Offset(, SPCC - rng.Column).Value & " - ") = 0 Then _
              sPrc = sPrc & ";" & rng.Offset(, SPCC - rng.Column).Value & " - " & rng.Offset(, SPCT - rng.Column).Value
            If bPrc Then
              out.Cells(iPrc, 4).Value = dPrc
              pnt.Cells(iRow, 5).FormulaR1C1 = "='" & out.Name & "'!r" & CStr(iPrc) & "c4"
            Else: pnt.Cells(iRow, 5).Value = dPrc: End If
            pnt.Cells(iRow, 6).Value = 0
            pnt.Cells(iRow, 7).FormulaR1C1 = "=rc4*rc[-2]*(1-rc[-1])"
          End If
          If bFst And bSnd Then
            dPrc = Round(CDbl(Round(rng.Offset(, SPC2 - rng.Column).Value, 2)), 2)
            If dPrc = 0 Then pnt.Cells(iRow, 8).Interior.Color = 255: If InStr(sPrc, ";" & rng.Offset(, SPCC - rng.Column).Value & " - ") = 0 Then _
              sPrc = sPrc & ";" & rng.Offset(, SPCC - rng.Column).Value & " - " & rng.Offset(, SPCT - rng.Column).Value
            If bPrc Then
              out.Cells(iPrc, 5).Value = dPrc
              pnt.Cells(iRow, 8).FormulaR1C1 = "='" & out.Name & "'!r" & CStr(iPrc) & "c5"
            Else: pnt.Cells(iRow, 8).Value = dPrc: End If
            pnt.Cells(iRow, 9).Value = 0
            pnt.Cells(iRow, 10).FormulaR1C1 = "=rc4*rc[-2]*(1-rc[-1])"
          End If
          pnt.Cells(iRow, 11).Value = rng.Offset(, SPID - rng.Column).Value
          iRow = iRow + 1
        End If
      End If
    Next rng
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
    If cCG > 0 And iCcd > 0 Then
      If bFst Or bSnd Then pnt.Cells(iRow - iCcd - 1, 7).FormulaR1C1 = "=sum(r" & CStr(iRow - iCcd) & "c:r" & CStr(iRow - 1) & "c)"
      If bFst And bSnd Then pnt.Cells(iRow - iCcd - 1, 10).FormulaR1C1 = "=sum(r" & CStr(iRow - iCcd) & "c:r" & CStr(iRow - 1) & "c)"
      pnt.Range(pnt.Cells(iRow - iCcd, 7), pnt.Cells(iRow - 1, 7)).Borders(xlInsideHorizontal).LineStyle = xlContinuous
    End If
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    If sSum <> "" And (bFst Or bSnd) Then
      iRow = iRow + 1
      pnt.Cells(iRow, 4).Value = prc.Cells(1, 1).Value
      wrtApR rng:=pnt.Cells(iRow, 7), iCols:=Array(1), cTxts:=Array("=sum(" & Mid(sSum, 2) & ")"), tpl:=var.Cells(30, 4), iApr:=0
      hdr.Cells(iHdr, 6).FormulaR1C1 = "='" & pnt.Name & "'!r" & CStr(iRow) & "c7"
      If bFst And bSnd Then
        wrtApR rng:=pnt.Cells(iRow, 10), iCols:=Array(1), cTxts:=Array("=sum(" & Mid(sSum, 2) & ")"), tpl:=var.Cells(30, 4), iApr:=0
        hdr.Cells(iHdr, 8).FormulaR1C1 = "='" & pnt.Name & "'!r" & CStr(iRow) & "c10"
      End If
    End If
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For iIcr = iInf To iInd
      If inp.Cells(iIcr, INCM).Value = "PR" And inp.Cells(iIcr, INFL).Value <> 0 Then
        iHdr = iHdr + 1
        hdr.Cells(iHdr, 3).Value = inp.Cells(iIcr, INIT).Value
      End If
    Next iIcr
    hdr.Range(hdr.Cells(iHdr, 2), hdr.Cells(iHdr, 5 - 2 * bFst - 2 * bSnd)).Borders(xlEdgeBottom).LineStyle = xlContinuous
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    pnt.Rows.AutoFit
    iMsp = iMsp + 1: iHdr = iHdr + 1
  Wend
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If bFst Or bSnd Then
    wrtApR rng:=hdr.Cells(iHdr, 7), iCols:=Array(1), cTxts:=Array("=sum(r4c:r[-1]c)"), tpl:=var.Cells(30, 3), iApr:=0
    If bFst And bSnd Then wrtApR rng:=hdr.Cells(iHdr, 9), iCols:=Array(1), cTxts:=Array("=sum(r4c:r[-1]c)"), tpl:=var.Cells(30, 3), iApr:=0
    iHdr = iHdr + 1
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If bNms And (bFst Or bSnd) Then
    hdr.Cells(iHdr, 7).Value = prc.Cells(5, IIf(bFst, PRC1, PRC2)).Value
    hdr.Cells(iHdr, 7).WrapText = True
    If bFst And bSnd Then
      hdr.Cells(iHdr, 9).Value = prc.Cells(5, PRC2).Value
      hdr.Cells(iHdr, 9).WrapText = True
    End If
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If bPrc Then out.Rows.AutoFit
  If sPrc <> "" Then ngcMessage.ManualShow sMsg:=Mid(sPrc, 2), sLabel:="There are codes without prices:", bModeless:=True
ngcSaveExcelError:
  wnd.Activate
  Application.EnableEvents = True
  Application.CalculateFullRebuild
  Application.Calculation = xlCalculationAutomatic
  Application.StatusBar = False
  Application.ScreenUpdating = True
  If Not pnt Is Nothing Then hdr.Activate
  DoEvents
  If Err.Number <> 0 Then sErr = sErr & ";" & Trim(Err.Source & " (ErrID:" & Err.Number & ")") & ";" & Err.Description
End Sub

Sub ngcSaveExcel2(ByRef sErr As String)
  On Error GoTo ngcSaveExcelError2
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim cfg As Workbook, shI As Worksheet, shC As Worksheet, iSpc As Integer, iRow As Integer
  Dim out As Workbook, shO As Worksheet, outRow As Integer, outCol As Integer, outHdr As Integer
  Dim rng As Range, sAdr As String, sCod As String, sCps As String, bFnd As Boolean
  Dim outTmp As Integer
  Set cfg = ActiveWorkbook
  Set shI = cfg.Sheets("Input")
  Set shC = cfg.Sheets("Codes")
  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.StatusBar = "Working with workbook..."
  For Each out In Workbooks
    If out.VBProject.Name = "TOTALS" Then Exit For
  Next out
  If Not out Is Nothing Then
    Set rng = out.Sheets(1).Cells.Find(What:="::ID::", LookAt:=xlPart, LookIn:=xlValues)
    If rng Is Nothing Then Set out = Nothing
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.ScreenUpdating = False
  Application.EnableEvents = False
  Application.Calculation = xlCalculationManual
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If out Is Nothing Then
    Set out = Workbooks.Add
    out.VBProject.Name = "TOTALS"
    Set shO = out.Sheets(1)
    shO.Name = "Specifications"
    shO.Cells.VerticalAlignment = xlTop
    shO.Cells.EntireColumn.ColumnWidth = 6
    shO.Columns(1).ColumnWidth = 14
    shO.Columns(2).ColumnWidth = 40
    shO.Columns(2).WrapText = True
    shO.Columns(3).ColumnWidth = 12
    cfg.Activate
    '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    outHdr = 2: outRow = 5: outCol = 6
    shO.Rows(outHdr + 1).RowHeight = 60: shO.Rows(outHdr + 2).RowHeight = 180
    shO.Rows(outHdr + 1).Orientation = 90: shO.Rows(outHdr + 2).Orientation = 90
    shO.Rows(outHdr + 1).VerticalAlignment = xlBottom: shO.Rows(outHdr + 2).VerticalAlignment = xlBottom
  Else
    Set shO = out.Sheets(1)
    '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    outCol = 6: outHdr = out.Sheets(1).Cells.Find(What:="::ID::", LookAt:=xlPart, LookIn:=xlValues).Row
    outRow = shO.Cells.SpecialCells(xlCellTypeLastCell).Row + 1: If outRow < 5 Then outRow = 5
    While (shO.Cells(outRow - 1, 1).Value = "") And (outRow > 5): outRow = outRow - 1: Wend
    While (shO.Cells(outHdr + 1, outCol).Value <> "") Or (shO.Cells(outHdr + 2, outCol).Value <> ""): outCol = outCol + 1: Wend
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  shO.Cells(outHdr, outCol).Value = "'::ID:: " & cfg.Name
  iSpc = 1 '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| MSpec=2, Column=9
  While (iSpc = 1) Or (shI.Cells(1, iSpc + 8).Value <> "")
    Application.StatusBar = "Specification " & CStr(iSpc) & "..."
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MSpec
    Application.Calculation = xlCalculationAutomatic
    shI.Cells(1, 8).Value = iSpc - 1 * (shI.Cells(1, INTM + 1).Value <> "")
    While Application.CalculationState <> xlDone: DoEvents: Wend
    Application.Calculation = xlCalculationManual
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    shO.Cells(outHdr + 1, outCol).Value = shI.Cells(3, 2).Value
    shO.Cells(outHdr + 2, outCol).Value = shI.Cells(6, 2).Value
    For iRow = 1 To shC.Cells.SpecialCells(xlCellTypeLastCell).Row
      If shC.Cells(iRow, 6).Value = "F" And Val("0" & shC.Cells(iRow, 3).Value) > 0 Then
        sCod = shC.Cells(iRow, 1).Value
        sCps = shC.Cells(iRow, 7).Value
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        bFnd = False
        Set rng = shO.Columns(1).EntireColumn.Find(What:=sCod, LookIn:=xlValues, LookAt:=xlWhole)
        If Not rng Is Nothing Then
          sAdr = rng.Address
          Do
            If shO.Cells(rng.Row, 3).Value <> sCps Then
              Set rng = shO.Columns(1).EntireColumn.FindNext(rng)
            Else: bFnd = True: End If
          Loop While (Not bFnd) And (rng.Address <> sAdr)
        End If
        '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If Not bFnd Then
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          Set rng = shO.Columns(3).EntireColumn.Find(What:=sCps, LookIn:=xlValues, LookAt:=xlWhole)
          If Not rng Is Nothing Then
            outTmp = rng.Row
            While shO.Cells(outTmp, 3).Value = sCps: outTmp = outTmp + 1: Wend
            If outTmp < outRow Then shO.Rows(outTmp).Insert Shift:=xlDown
          Else: outTmp = outRow: End If
          '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd|
          shO.Cells(outTmp, 1).Value = sCod
          shO.Cells(outTmp, 2).Value = shC.Cells(iRow, 2).Value
          shO.Cells(outTmp, 3).Value = sCps
          outRow = outRow + 1
        Else: outTmp = rng.Row: End If
        shO.Cells(outTmp, outCol).Value = shC.Cells(iRow, 3).Value
      ElseIf Left(shC.Cells(iRow, 6).Value, 1) = "T" And Val("0" & shC.Cells(iRow, 3).Value) > 0 Then
        '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        sCod = "##" & shC.Cells(iRow, 7).Value
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Set rng = shO.Columns(1).EntireColumn.Find(What:=sCod, LookIn:=xlValues, LookAt:=xlWhole)
        If rng Is Nothing Then
          outTmp = outHdr - 1: outHdr = outHdr + 1: outRow = outRow + 1
          shO.Rows(outTmp).EntireRow.Insert Shift:=xlDown
          '|fffd||fffd||fffd||fffd||fffd||fffd| ID |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
          shO.Cells(outTmp, 1).Value = sCod
          shO.Cells(outTmp, 2).Value = shC.Cells(iRow, 1).Value
        Else: outTmp = rng.Row: End If
        '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        shO.Cells(outTmp, outCol).Value = shC.Cells(iRow, 3).Value
      End If
    Next iRow
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    outCol = outCol + 1
    iSpc = iSpc + 1
  Wend
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If outHdr > 2 Then shO.Range(shO.Cells(1, 1), shO.Cells(outHdr - 2, outCol - 1)).Borders.LineStyle = xlContinuous
  shO.Range(shO.Cells(outHdr + 1, 6), shO.Cells(outHdr + 2, outCol - 1)).Borders.LineStyle = xlContinuous
  shO.Range(shO.Cells(outHdr + 3, 1), shO.Cells(outRow - 1, outCol - 1)).Borders.LineStyle = xlContinuous
ngcSaveExcelError2:
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  cfg.Activate
  Application.EnableEvents = True
  Application.CalculateFullRebuild
  Application.Calculation = xlCalculationAutomatic
  Application.StatusBar = False
  Application.ScreenUpdating = True
  If Not out Is Nothing Then out.Activate
  DoEvents
  If Err.Number <> 0 Then sErr = sErr & ";" & Trim(Err.Source & " (ErrID:" & Err.Number & ")") & ";" & Err.Description
End Sub

Sub ngcSaveDeps(ByRef sErr As String)
  On Error GoTo ngcSaveDeposError
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim wbD As Workbook, shD As Worksheet, shC As Worksheet, shV As Worksheet
  Dim rng As Range, fnd As Range, iCol As Long, iRow As Long, iCur As Long
  Dim sC As String, sT As String, sQ As String
  Set shC = Sheets(ngcCSI): Set shV = Sheets(ngcVAR)
  sC = ngcL(shV.Cells(24, 2).Value): sT = ngcL(shV.Cells(24, 3).Value): sQ = ngcL(shV.Cells(24, 4).Value)
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
  Application.EnableEvents = False
  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For Each wbD In Workbooks
    If wbD.VBProject.Name = "NG3dps" Then Exit For
  Next wbD
  If wbD Is Nothing Then
    Set wbD = Workbooks.Add(xlWBATWorksheet): shC.Parent.Activate
    Set shD = wbD.Sheets(1): wbD.VBProject.Name = "NG3dps"
    wrtApS sht:=shD, dft:=Nothing, sName:=escID(ngcInfo("Project") & " " & Format(Now, "yyyy.mm.dd"), 2, Nothing, sErr)
    wrtApC rng:=shD.Range(shD.Cells(1, 1), shD.Cells(1, 4)), iCols:=Array(1, 2, 3, 4), _
      cWths:=Array(4, 12, 30, 2), cFrms:=Array("", "@"), _
      cAlgs:=Array(xlLeft, xlLeft, xlLeft), cFncs:=Array(8421504)
    wrtApR rng:=shD.Range(shD.Cells(2, 2), shD.Cells(2, 3)), iCols:=Array(1, 2), cTxts:=Array(sC, sT), tpl:=shV.Cells(30, 3), iApr:=-1
    shD.Cells(1, 1).FormulaR1C1 = "=row(r2c1)"
    shC.Activate
  Else: Set shD = wbD.Sheets(1): End If
  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  iCol = 5: iRow = shD.Cells(1, 1).Value
  While shD.Cells(iRow, iCol).Value <> "": iCol = iCol + 2: Wend
  wrtApR rng:=shD.Cells(iRow, iCol), iCols:=Array(1), cTxts:=Array(sQ), tpl:=shV.Cells(30, 4), iApr:=-1
  shD.Columns(iCol - 1).ColumnWidth = 2
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For Each rng In shC.Range(shV.Cells(30, 4).Value).Cells
    If rng.Offset(0, SPCM - rng.Column).Value = "TD" Or rng.Offset(0, SPCM - rng.Column).Value = "TL" Then
      If rng.Offset(0, SPTV - rng.Column).Value <> 0 Then
        shD.Cells(1, 1).Calculate: iRow = shD.Cells(1, 1).Value
        Set fnd = shD.Range(shD.Cells(1, 2), shD.Cells(iRow, 2)).Find(What:="##" & rng.Offset(0, SPID - rng.Column).Value, LookIn:=xlValues, LookAt:=xlWhole)
        If fnd Is Nothing Then
          shD.Rows(iRow).Insert Shift:=xlDown
          shD.Cells(iRow, 2).Value = "##" & rng.Offset(0, SPID - rng.Column).Value
          shD.Cells(iRow, 3).Value = rng.Offset(0, SPTT - rng.Column).Value
          shD.Cells(iRow, 4).Value = "'"
        Else: iRow = fnd.Row: End If
        shD.Cells(iRow, iCol).Value = rng.Offset(0, SPTV - rng.Column).Value
      End If
    ElseIf (rng.Offset(0, SPCM - rng.Column).Value = "F" And Not shV.Cells(2, 18).Value) Or (rng.Offset(0, SPCM - rng.Column).Value = "V" And shV.Cells(2, 18).Value) Then
      If rng.Offset(0, SPCV - rng.Column).Value <> 0 Then
        shD.Cells(1, 1).Calculate
        iRow = shD.Cells.SpecialCells(xlCellTypeLastCell).Row + 1
        Set fnd = shD.Range(shD.Cells(shD.Cells(1, 1).Value + 1, 2), shD.Cells(iRow, 2)).Find(What:=rng.Offset(0, SPCC - rng.Column).Value, LookIn:=xlValues, LookAt:=xlWhole)
        If fnd Is Nothing Then
          While (shD.Cells(iRow - 1, 2).Value = "") And (iRow - 1 > shD.Cells(1, 1).Value): iRow = iRow - 1: Wend
          shD.Cells(iRow, 2).Value = rng.Offset(0, SPCC - rng.Column).Value
          shD.Cells(iRow, 3).Value = rng.Offset(0, SPCT - rng.Column).Value
          shD.Cells(iRow, 4).Value = "'"
        Else: iRow = fnd.Row: End If
        shD.Cells(iRow, iCol).Value = shD.Cells(iRow, iCol).Value + rng.Offset(0, SPCV - rng.Column).Value
      End If
    End If
  Next rng
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If iCol > 5 Then
    shD.Cells(1, 1).Calculate
    iRow = shD.Cells(1, 1).Value + 1
    While shD.Cells(iRow, 2).Value <> ""
      shD.Cells(iRow, iCol).FormatConditions.Delete
      shD.Cells(iRow, iCol).FormatConditions.Add Type:=xlExpression, Formula1:=Application.ConvertFormula("=rc[-2]<>rc", xlR1C1, xlA1, xlAbsolute, shD.Cells(iRow, iCol))
      shD.Cells(iRow, iCol).FormatConditions(1).Interior.ColorIndex = 40
      iRow = iRow + 1
    Wend
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
ngcSaveDeposError:
  Application.EnableEvents = True
  Application.Calculation = xlCalculationAutomatic
  Application.ScreenUpdating = True
  DoEvents
  If Err.Number <> 0 Then
    sErr = sErr & ";" & Trim(Err.Source & " (ErrID:" & Err.Number & ")") & ";" & Err.Description
  Else: wbD.Activate: End If
End Sub


'############################################
'###############  Save DOC  #################
'############################################

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| DOC
Sub ngcSaveWord(ByRef sErr As String)
  On Error GoTo ngcSaveWordError
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Word
  Dim wrd As Object, wdc As Object, rng As Object
  Set wrd = CreateObject("Word.Application")
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Set wdc = wrd.Documents.Add
  ngcWrdDoc wrd:=wrd, wdc:=wdc
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.ScreenUpdating = False
  Application.EnableEvents = True
  Application.Calculation = xlCalculationAutomatic '|fffd|/|fffd| Automatic
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel
  Dim shV As Worksheet, shS As Worksheet, shP As Worksheet, oFind As Object, oTbl As Object
  Set shV = Sheets(ngcVAR): Set shS = Sheets(ngcCSI): Set shP = Sheets(ngcPRC)
  Dim iMsp As Long, sPrc As String
  iMsp = 1
  While iMsp = 1 Or Sheets(ngcINP).Cells(1, INTM + iMsp).Value <> ""
    Application.StatusBar = "Prepare #" & CStr(iMsp) & "..."
    If Sheets(ngcINP).Cells(1, INTM + iMsp).Value <> "" Then Sheets(ngcINP).Cells(1, INTM).Value = iMsp + 1
    ngcAFcreate
    Application.ScreenUpdating = False
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    With wdc.ActiveWindow.Selection
      If iMsp <> 1 Then .InsertBreak Type:=7 '7=wdPageBreak
      .Font.Bold = True: .Font.Size = 12
      .ParagraphFormat.Alignment = 1 '1=wdAlignParagraphCenter
      .TypeText Text:=ngcInfo("object", False) & vbCrLf
      .ParagraphFormat.Alignment = 0 '0=wdAlignParagraphLeft
      .Font.Bold = False: .Font.Size = 10
      .TypeParagraph
    End With
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ngcWrdSpec shV:=shV, shS:=shS, wrdDoc:=wdc, bPrc:=shP.Cells(3, PRQ2).Value
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    iMsp = iMsp + 1
  Wend
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If sPrc <> "" Then ngcMessage.ManualShow sMsg:=Mid(sPrc, 2), sLabel:="There are codes without prices:"
ngcSaveWordError:
  If Err.Number <> 0 Then sErr = sErr & ";" & Trim(Err.Source & " (ErrID:" & Err.Number & ")") & ";" & Err.Description
  On Error Resume Next
  Application.StatusBar = False
  Application.ScreenUpdating = True
  If Not wrd Is Nothing Then wrd.Visible = True
  DoEvents
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| DOC |fffd||fffd| |fffd||fffd||fffd||fffd|
Sub ngcSaveWord2(ByRef sErr As String)
  On Error GoTo ngcSaveWord2Error
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel
  Dim shV As Worksheet, shS As Worksheet, shP As Worksheet, rng As Object
  Set shV = Sheets(ngcVAR): Set shS = Sheets(ngcCSI): Set shP = Sheets(ngcPRC)
  Dim iMsp As Long, iRow As Integer, iCur As Integer, sPrc As String
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Word
  Dim wrd As Object, wdc As Object, tbl As Object, iTbl As Integer
  Set wrd = CreateObject("Word.Application")
  'wrd.Visible = True
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.Cursor = xlWait
  Application.ScreenUpdating = False
  Application.EnableEvents = True
  Application.Calculation = xlCalculationAutomatic '|fffd|/|fffd| Automatic
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim fso As Object, fsoFile As Object, sDir As String
  Dim vTmp As Variant, sTmp As String, iTmp As Long
  sDir = shV.Cells(2, 8).Value: If Right(sDir, 1) <> "\" Then sDir = sDir & "\"
  If Dir(sDir & "SAPattrs_cache.ngc") <> "" Then
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set fsoFile = fso.OpenTextFile(sDir & "SAPattrs_cache.ngc", , , -1)
    sDir = fsoFile.ReadAll: fsoFile.Close: Set fso = Nothing
  Else: sDir = "": End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Set wdc = wrd.Documents.Add
  ngcWrdDoc wrd:=wrd, wdc:=wdc, bLs:=True
  iMsp = 1
  While iMsp = 1 Or Sheets(ngcINP).Cells(1, INTM + iMsp).Value <> ""
    Application.StatusBar = "Prepare #" & CStr(iMsp) & "..."
    If Sheets(ngcINP).Cells(1, INTM + iMsp).Value <> "" Then Sheets(ngcINP).Cells(1, INTM).Value = iMsp + 1
    ngcAFcreate
    Application.ScreenUpdating = False
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    wdc.ActiveWindow.Selection.EndKey Unit:=6 'wdStory
    With wdc.ActiveWindow.Selection
      If iMsp > 1 Then .InsertBreak Type:=7 '7=wdPageBreak
      .Font.Bold = True: .Font.Size = 12
      .ParagraphFormat.Alignment = 1 '1=wdAlignParagraphCenter
      .TypeText Text:=ngcInfo("object", False) & vbCrLf
      .ParagraphFormat.Alignment = 0 '0=wdAlignParagraphLeft
      .Font.Bold = False: .Font.Size = 10
      .TypeParagraph
    End With
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set tbl = wdc.Tables.Add(Range:=wdc.ActiveWindow.Selection.Range, NumRows:=2, NumColumns:=9)
    tbl.Range.Select
    wdc.ActiveWindow.Selection.ParagraphFormat.Alignment = 1 'wdAlignParagraphCenter
    tbl.Cell(Row:=1, Column:=1).Range.InsertBefore ngcL(shV.Cells(25, 2).Value)
    tbl.Cell(Row:=1, Column:=2).Range.InsertBefore ngcL(shV.Cells(25, 3).Value)
    tbl.Cell(Row:=1, Column:=3).Range.InsertBefore ngcL(shV.Cells(25, 4).Value)
    tbl.Cell(Row:=1, Column:=4).Range.InsertBefore ngcL(shV.Cells(25, 5).Value)
    tbl.Cell(Row:=1, Column:=5).Range.InsertBefore ngcL(shV.Cells(25, 6).Value)
    tbl.Cell(Row:=1, Column:=6).Range.InsertBefore ngcL(shV.Cells(25, 7).Value)
    tbl.Cell(Row:=1, Column:=7).Range.InsertBefore ngcL(shV.Cells(25, 8).Value)
    tbl.Cell(Row:=1, Column:=8).Range.InsertBefore ngcL(shV.Cells(25, 9).Value)
    tbl.Cell(Row:=1, Column:=9).Range.InsertBefore ngcL(shV.Cells(25, 10).Value)
    For iCur = 1 To 9: tbl.Cell(Row:=2, Column:=iCur).Range.InsertBefore CStr(iCur): Next iCur
    tbl.Columns.PreferredWidthType = 2 'wdPreferredWidthPercent
    tbl.Columns(1).PreferredWidth = 4: tbl.Columns(2).PreferredWidth = 30: tbl.Columns(3).PreferredWidth = 10
    tbl.Columns(4).PreferredWidth = 11: tbl.Columns(5).PreferredWidth = 10: tbl.Columns(6).PreferredWidth = 5
    tbl.Columns(7).PreferredWidth = 6: tbl.Columns(8).PreferredWidth = 8
    'tbl.Range.Select: wdc.ActiveWindow.Selection.Collapse Direction:=0
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    iRow = -1: iCur = 0
    For Each rng In shS.Range(shV.Cells(30, 4).Value).Cells
      Select Case rng.Offset(, SPCM - rng.Column).Value
      Case "CG" '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        iRow = rng.Row
      Case "F"  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If rng.Offset(0, SPCV - rng.Column).Value <> 0 Then
          iTbl = tbl.Rows.Count + 1: iCur = iCur + 1
          tbl.Cell(Row:=iTbl - 1, Column:=1).Range.Select
          wdc.ActiveWindow.Selection.InsertRowsBelow (1 - 1 * (iRow > 0))
          If iRow > 0 Then '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            With tbl.Cell(Row:=iTbl, Column:=2).Range
              .Font.Bold = True
              .ParagraphFormat.KeepWithNext = True
              .InsertBefore CStr(shS.Cells(iRow, SPTT).Value)
            End With
            iRow = 0: iTbl = iTbl + 1
          End If
          '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
          tbl.Cell(Row:=iTbl, Column:=1).Range.InsertBefore CStr(iCur) & "." '|fffd||fffd||fffd||fffd||fffd|
          tbl.Cell(Row:=iTbl, Column:=2).Range.InsertBefore CStr(rng.Offset(0, SPCT - rng.Column).Value) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          tbl.Cell(Row:=iTbl, Column:=4).Range.InsertBefore CStr(rng.Offset(0, SPCC - rng.Column).Value) '|fffd||fffd||fffd|
          tbl.Cell(Row:=iTbl, Column:=7).Range.InsertBefore CStr(rng.Offset(0, SPCV - rng.Column).Value) '|fffd||fffd||fffd|-|fffd||fffd|
          tbl.Cell(Row:=iTbl, Column:=8).Range.InsertBefore ngcInfoWgt(CStr(rng.Offset(0, SPCC - rng.Column).Value)) '|fffd||fffd||fffd|
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          If sDir <> "" Then
            iTmp = InStr(sDir, vbCrLf & CStr(rng.Offset(0, SPCC - rng.Column).Value) & vbTab)
            If iTmp > 0 Then
              vTmp = Split(Split(Mid(sDir, iTmp + 2, 9999), vbCrLf)(0), vbTab)
              '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              If UBound(vTmp) > 37 Then If vTmp(38) <> "" Then tbl.Cell(Row:=iTbl, Column:=5).Range.InsertBefore CStr(vTmp(38))
              If UBound(vTmp) > 38 Then If vTmp(38) = "" And vTmp(39) = "BOM" Then tbl.Cell(Row:=iTbl, Column:=5).Range.InsertBefore "Iskratel"
              If UBound(vTmp) > 38 Then If vTmp(38) = "" And vTmp(39) = "OEM" Then tbl.Cell(Row:=iTbl, Column:=5).Range.InsertBefore "OEM"
              '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              sTmp = CStr(vTmp(18))
              If ngcInfo("Lang") = "R1" Then sTmp = Switch(sTmp = "DAY", "|fffd||fffd||fffd||fffd|", sTmp = "HR", "|fffd||fffd||fffd|", sTmp = "KG", "|fffd||fffd|.", sTmp = "M", "|fffd|.", sTmp = "M2", "|fffd|2.", sTmp = "PC", "|fffd||fffd|.", sTmp = "SET", "|fffd||fffd||fffd|.", True, sTmp)
              If UBound(vTmp) > 17 Then tbl.Cell(Row:=iTbl, Column:=6).Range.InsertBefore sTmp
            Else
              tbl.Cell(Row:=iTbl, Column:=6).Range.InsertBefore "|fffd||fffd|." '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            End If
          End If
        End If
      End Select
    Next rng
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    tbl.Rows.AllowBreakAcrossPages = False
    tbl.Rows(1).Cells.VerticalAlignment = 1 'wdCellAlignVerticalCenter
    tbl.Columns(2).Select: wdc.ActiveWindow.Selection.ParagraphFormat.Alignment = 0 'wdAlignParagraphLeft
    tbl.Rows(1).Select: wdc.ActiveWindow.Selection.ParagraphFormat.Alignment = 1 'wdAlignParagraphCenter
    tbl.Rows(2).Select: wdc.ActiveWindow.Selection.ParagraphFormat.Alignment = 1 'wdAlignParagraphCenter
    tbl.Rows(1).Select: wdc.ActiveWindow.Selection.MoveDown Unit:=5, Count:=1, Extend:=1 'wdLine, wdExtend
    wdc.ActiveWindow.Selection.Rows.HeadingFormat = True
    tbl.Borders.InsideLineStyle = 1: tbl.Borders.OutsideLineStyle = 1
    tbl.PreferredWidthType = 2 'wdPreferredWidthPercent
    tbl.PreferredWidth = 100
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    iMsp = iMsp + 1
  Wend
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Application.Cursor = xlDefault
  wdc.ActiveWindow.Selection.HomeKey Unit:=6 'wdStory
  If sPrc <> "" Then ngcMessage.ManualShow sMsg:=Mid(sPrc, 2), sLabel:="There are codes without prices:"
ngcSaveWord2Error:
  If Err.Number <> 0 Then sErr = sErr & ";" & Trim(Err.Source & " (ErrID:" & Err.Number & ")") & ";" & Err.Description
  On Error Resume Next
  Application.StatusBar = False
  Application.ScreenUpdating = True
  If Not wrd Is Nothing Then wrd.Visible = True
  Application.Cursor = xlDefault
  DoEvents
End Sub

Sub ngcWrdDoc(wrd As Object, wdc As Object, Optional bLs As Boolean = False)
  wrd.WordBasic.RemoveHeader
  wrd.WordBasic.RemoveFooter
  With wdc.PageSetup
    .TopMargin = wrd.CentimetersToPoints(2)
    .RightMargin = wrd.CentimetersToPoints(1.5)
    .LeftMargin = wrd.CentimetersToPoints(2)
    .BottomMargin = wrd.CentimetersToPoints(2)
    .HeaderDistance = wrd.CentimetersToPoints(1)
    .FooterDistance = wrd.CentimetersToPoints(1)
    .Orientation = -1 * bLs 'wdOrientPortrait, wdOrientLandscape
  End With
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim hdr As Long
  For hdr = 1 To 3 '1=wdHeaderFooterPrimary,2=wdHeaderFooterFirstPage,3=wdHeaderFooterEvenPages
    With wdc.Sections(1).Headers(hdr).Range
      .ParagraphFormat.TabStops.ClearAll
      .ParagraphFormat.TabStops.Add Position:=wrd.CentimetersToPoints(IIf(bLs, 12, 8.75)), Alignment:=1, Leader:=0 '1=wdAlignTabCenter,0=wdTabLeaderSpaces
      .ParagraphFormat.TabStops.Add Position:=wrd.CentimetersToPoints(IIf(bLs, 24, 17.5)), Alignment:=2, Leader:=0   '2=wdAlignTabRight, 0=wdTabLeaderSpaces
      .Text = "Iskratel Group" & vbTab & ngcL(Sheets(ngcVAR).Cells(22, 2).Value) & vbTab & ngcInfo("Spec", False)
    End With
    With wdc.Sections(1).Footers(hdr).Range
      .ParagraphFormat.TabStops.ClearAll
      .ParagraphFormat.TabStops.Add Position:=wrd.CentimetersToPoints(IIf(bLs, 12, 8.75)), Alignment:=1, Leader:=0 '1=wdAlignTabCenter,0=wdTabLeaderSpaces
      .ParagraphFormat.TabStops.Add Position:=wrd.CentimetersToPoints(IIf(bLs, 24, 17.5)), Alignment:=2, Leader:=0 '2=wdAlignTabRight, 0=wdTabLeaderSpaces
      .Text = Format(Now(), "dd.mm.yyyy") & vbTab & ngcL(Sheets(ngcVAR).Cells(22, 2).Value) & vbTab & ngcL(Sheets(ngcVAR).Cells(19, 5).Value)
      .Fields.Add Range:=.Characters(.Characters.Count), Text:="PAGE  ": .InsertAfter "/"
      .Fields.Add Range:=.Characters(.Characters.Count), Text:="NUMPAGES  "
    End With
  Next hdr
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub ngcWrdSpec(shV As Worksheet, shS As Worksheet, wrdDoc As Object, bPrc As Boolean)
  Dim tbl As Object, rng As Range, iCG As Long, iCD As Long
  Dim iQty As Long, iRow As Long, sFrm As String
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  iRow = -1: iCG = 0: sFrm = ""
  For Each rng In shS.Range(shV.Cells(30, 4).Value).Cells
    Select Case rng.Offset(, SPCM - rng.Column).Value
    Case "CG"
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If iRow = 0 Then
        If bPrc Then Set tbl = wrdDoc.Tables.Add(Range:=wrdDoc.ActiveWindow.Selection.Range, NumRows:=1, NumColumns:=4 - 2 * bPrc)
        ngcWrdTable tblNew:=tbl, isPrices:=bPrc, sFormula:=sFrm
      End If
      iRow = rng.Row
    Case "F"
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If rng.Offset(0, SPCV - rng.Column).Value <> 0 Then
        If iRow > 0 Then '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          iCG = iCG + 1: iCD = 1
          wrdDoc.ActiveWindow.Selection.InsertBefore CStr(iCG) & "." & vbTab & shS.Cells(Abs(iRow), SPCC).Value & vbCrLf & vbCrLf
          wrdDoc.ActiveWindow.Selection.Font.Bold = True
          wrdDoc.ActiveWindow.Selection.ParagraphFormat.KeepWithNext = True
          wrdDoc.ActiveWindow.Selection.Collapse Direction:=0
        Else: iCD = iCD + 1: End If
        iRow = 0
        '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        Set tbl = wrdDoc.Tables.Add(Range:=wrdDoc.ActiveWindow.Selection.Range, NumRows:=1, NumColumns:=4 - 2 * bPrc)
        tbl.PreferredWidthType = 2: tbl.PreferredWidth = 100: iQty = tbl.Rows.Count
        tbl.Cell(Row:=iQty, Column:=1).Range.InsertBefore CStr(iCG) & "." & CStr(iCD) & "." '|fffd||fffd||fffd||fffd||fffd|
        tbl.Cell(Row:=iQty, Column:=2).Range.InsertBefore CStr(rng.Offset(0, SPCC - rng.Column).Value) '|fffd||fffd||fffd|
        tbl.Cell(Row:=iQty, Column:=3).Range.InsertBefore CStr(rng.Offset(0, SPCT - rng.Column).Value) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        tbl.Cell(Row:=iQty, Column:=4).Range.InsertBefore CStr(rng.Offset(0, SPCV - rng.Column).Value) '|fffd||fffd||fffd|-|fffd||fffd|
        If bPrc Then
          tbl.Cell(Row:=iQty, Column:=5).Range.InsertBefore Format(rng.Offset(0, SPC1 - rng.Column).Value, "#,##0.00")    '|fffd||fffd||fffd||fffd|
          tbl.Cell(Row:=iQty, Column:=6).Select
          wrdDoc.ActiveWindow.Selection.InsertFormula Formula:="=D" & CStr(iCD) & "*E" & CStr(iCD), NumberFormat:="#.##0,00"
        End If
        tbl.Range.Select: wrdDoc.ActiveWindow.Selection.Collapse Direction:=0
      End If
    End Select
  Next rng
  If iRow = 0 Then
    If bPrc Then Set tbl = wrdDoc.Tables.Add(Range:=wrdDoc.ActiveWindow.Selection.Range, NumRows:=1, NumColumns:=3 - 2 * bPrc)
    ngcWrdTable tblNew:=tbl, isPrices:=bPrc, sFormula:=sFrm
  End If
  '|fffd||fffd||fffd||fffd||fffd|
  If bPrc Then
    Set tbl = wrdDoc.Tables.Add(Range:=wrdDoc.ActiveWindow.Selection.Range, NumRows:=1, NumColumns:=2)
    tbl.PreferredWidth = 100
    tbl.Columns.PreferredWidthType = 2 'wdPreferredWidthPercent
    tbl.Columns(1).PreferredWidth = 75
    'tbl.Columns.PreferredWidthType = 2 'wdPreferredWidthPercent
    tbl.Cell(Row:=tbl.Rows.Count, Column:=2).Select
    tbl.Parent.ActiveWindow.Selection.Borders(-1).LineStyle = 1
    tbl.Parent.ActiveWindow.Selection.Font.Bold = True
    tbl.Parent.ActiveWindow.Selection.ParagraphFormat.Alignment = 2 'wdAlignParagraphRight
    tbl.Parent.ActiveWindow.Selection.InsertFormula Formula:="=" & Mid(sFrm, 2), NumberFormat:="#.##0,00"
    tbl.Range.Select: wrdDoc.ActiveWindow.Selection.Collapse Direction:=0
  End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub ngcWrdTable(tblNew As Object, isPrices As Boolean, sFormula As String)
  tblNew.Columns.PreferredWidthType = 2 'wdPreferredWidthPercent
  tblNew.Columns(1).PreferredWidth = 8 - 2 * (Not isPrices)
  tblNew.Columns(2).PreferredWidth = 17 - 3 * (Not isPrices)
  tblNew.Columns(3).PreferredWidth = 40 - 15 * (Not isPrices)
  tblNew.Columns(4).PreferredWidth = 10 - 5 * (Not isPrices)
  If isPrices Then
    tblNew.Columns(5).PreferredWidth = 12
    tblNew.Columns(6).PreferredWidth = 13
    tblNew.Cell(Row:=tblNew.Rows.Count, Column:=tblNew.Columns.Count).Range.Select
    tblNew.Parent.ActiveWindow.Selection.Font.Bold = True
    tblNew.Parent.ActiveWindow.Selection.Borders(-1).LineStyle = 1
    tblNew.Parent.ActiveWindow.Selection.InsertFormula Formula:="=SUM(above)", NumberFormat:="#.##0,00"
    tblNew.Parent.ActiveWindow.Selection.MoveLeft Unit:=2, Count:=1, Extend:=1 '2=wdWord,1=wdExtend
    tblNew.Parent.Bookmarks.Add Range:=tblNew.Parent.ActiveWindow.Selection, Name:="SpecCp" & CStr(tblNew.Parent.Tables.Count)
    sFormula = sFormula & "+SpecCp" & CStr(tblNew.Parent.Tables.Count)
  End If
  tblNew.Columns(4).Select
  If isPrices Then tblNew.Parent.ActiveWindow.Selection.MoveRight Unit:=1, Count:=2, Extend:=1 'wdCharacter wdExtend
  tblNew.Parent.ActiveWindow.Selection.ParagraphFormat.Alignment = 2 'wdAlignParagraphRight
  If isPrices Then tblNew.Cell(Row:=tblNew.Rows.Count, Column:=1).Merge MergeTo:=tblNew.Cell(Row:=tblNew.Rows.Count, Column:=4)
  tblNew.Range.Select: tblNew.Parent.ActiveWindow.Selection.Collapse Direction:=0
  tblNew.Parent.ActiveWindow.Selection.TypeText vbCrLf
End Sub


'############################################
'###############  Save XML  #################
'############################################

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub ngcSaveXML(isSaveAll As Boolean)
Attribute ngcSaveXML.VB_Description = "NG4 by Terekhov Alexey 2011 (c)\nShortcut: Ctrl+Shift+C"
Attribute ngcSaveXML.VB_ProcData.VB_Invoke_Func = "C\n14"
  If Not ngcValid Then Exit Sub
  Dim sMsg As String
  sMsg = ""
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If (Sheets(ngcINP).Cells(1, INTM + 1).Value <> "") And isSaveAll Then
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim oDlg As Object, sDir As String, iCur As Long, iLst As Long, sSls As String, sAll As String
    Set oDlg = CreateObject("Shell.Application").BrowseForFolder(Application.Hwnd, "Select folder for specifications:", &H1, 16)
    If oDlg Is Nothing Then Exit Sub
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    iCur = 1: sAll = ""
    sDir = oDlg.Self.Path
    iLst = Sheets(ngcINP).Cells(1, INTM).Value
    If (InStr(sDir, "::") <> 0) Or (InStr(sDir, ":") = 0) Then MsgBox "Can't save to " & oDlg.Title, vbCritical: Exit Sub
    While Sheets(ngcINP).Cells(1, INTM + iCur).Value <> ""
      Sheets(ngcINP).Cells(1, INTM).Value = iCur + 1
      sSls = "Not needed"
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If CBool(Sheets(ngcVAR).Cells(2, 25).Value) And Sheets(ngcINP).Cells(5, INQV).Value = "" And Sheets(ngcINP).Cells(5, INID).Value = "SOLUTION" Then
        If sAll = "" Then
          frmCfgSales.Show
          sSls = frmCfgSales.Tag
          If frmCfgSales.chbAll.Value Then sAll = sSls
          Unload frmCfgSales
        Else: sSls = sAll: End If
        If sSls <> "" Then Sheets(ngcINP).Cells(5, INQV).Value = sSls
      End If
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If sSls <> "" Then
        ngcSaveSpec sErr:=sMsg, fileSave:=sDir & "\" & escID(Sheets(ngcINP).Cells(3, INQV).Value, 2, Nothing, sMsg) & ".xml"
      Else: sMsg = sMsg & ";" & Sheets(ngcINP).Cells(3, INQV).Value & " - please enter sales solution (B5 cell)!": End If
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      iCur = iCur + 1
    Wend
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Sheets(ngcINP).Cells(1, INTM).Value = iLst
    Sheets(ngcCSI).Calculate: DoEvents: ngcAFcreate
  Else
    sSls = "Not needed"
    If CBool(Sheets(ngcVAR).Cells(2, 25).Value) And Sheets(ngcINP).Cells(5, INQV).Value = "" And Sheets(ngcINP).Cells(5, INID).Value = "SOLUTION" Then
      frmCfgSales.Show
      sSls = frmCfgSales.Tag
      If sSls <> "" Then Sheets(ngcINP).Cells(5, INQV).Value = sSls
      Unload frmCfgSales
    End If
    If sSls <> "" Then
      ngcSaveSpec sErr:=sMsg
    Else: sMsg = sMsg & ";" & Sheets(ngcINP).Cells(3, INQV).Value & " - please enter sales solution (B5 cell)!": End If
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If sMsg <> "" Then ngcMessage.ManualShow sMsg:=Mid(sMsg, 2), sLabel:="An error(s) was found during operation:"
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub ngcSaveSpec(ByRef sErr As String, Optional ByRef fileSave As String = "")
  On Error GoTo ngcSaveSpecError
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim shS As Object, shI As Object, shV As Object, rngCell As Range, iRow As Long
  Set shS = Sheets(ngcCSI): Set shI = Sheets(ngcINP): Set shV = Sheets(ngcVAR)
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If shV.Cells(30, 8).Value Then
    sErr = sErr & ";" & ngcInfo("Spec", False) & " - operation is prohibited by configuration!"
    Exit Sub
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If fileSave = "" Then
    Dim vPath As Variant, sDir As String
    sDir = shV.Cells(2, 14).Value: If sDir = "" Then sDir = ActiveWorkbook.Path
    If sDir <> "" And Right(sDir, 1) <> "\" Then sDir = sDir & "\"
    vPath = Application.GetSaveAsFilename(sDir & ngcInfo("Specification", False) & ".xml", "Iskratel specification,*.xml", 0)
    If vPath = False Then Exit Sub
    fileSave = vPath
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.Calculation = xlCalculationAutomatic
  Application.CalculateFull
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim sCenCP As String, iCnt As Long, bUse As Boolean
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim xmlFile As Object, xmlOffr As Object, xmlSpec As Object, xmlCPos As Object, xmlElem As Object
  Dim dXmlPrev As Double, dXmlCur As Double, dXmlTmp As Double, dXmlN|fffd|me As String, oXmlCur As Object
  Set xmlFile = CreateObject("MSXML2.DOMDocument")
  xmlFile.setProperty "SelectionLanguage", "XPath"
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim scPrice As String, scValuta As String, scAbc As String, scFactor As String
  Dim scSpec As String, scObject As String, sCrc As String, sSrvCP As String
  scSpec = ngcInfo("Spec", False)
  scObject = ngcInfo("Object", False)
  scAbc = ngcInfo("ABC", False)
  scFactor = ngcInfo("Factor", False)
  scPrice = IIf(scFactor = "1", "", "f" & scFactor) & IIf(scAbc = "0", "", "a" & scAbc)
  scPrice = IIf(scPrice <> "", "[" & scPrice & "]", "") & ngcInfo("Pricelist", False)
  scValuta = ngcInfo("Valute", False)
  sSrvCP = shV.Cells(2, 9).Value
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Set xmlOffr = xmlFile.appendChild(xmlFile.createElement("OrderIntakeData")).appendChild(xmlFile.createElement("T_AU00"))
  xmlOffr.setAttribute "STPON", ngcInfo("Project", False)
  xmlOffr.setAttribute "Ime", scObject
  xmlOffr.setAttribute "Jezik", ngcInfo("Lang", False)
  xmlOffr.setAttribute "PogNar", "False"
  xmlOffr.setAttribute "VrednostiOK", "False"
  xmlOffr.setAttribute "SpecOK", "False"
  xmlOffr.setAttribute "SupplyAgree", "False"
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Not shV.Cells(2, 18).Value Then
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set xmlSpec = xmlOffr.appendChild(xmlFile.createElement("T_AU05"))
    xmlSpec.setAttribute "SPEC", scSpec & "-F"
    xmlSpec.setAttribute "ImeSpecifikacije", scObject
    xmlSpec.setAttribute "SLOIme", scObject
    xmlSpec.setAttribute "PORTI", ngcInfo("PORTI", False)
    xmlSpec.setAttribute "VPonudbi", "True"
    If shV.Cells(2, 25).Value And (shI.Cells(5, INID).Value = "SOLUTION") Then xmlSpec.setAttribute "System", shI.Cells(5, INQV).Value
    If Len(scValuta) > 0 Then xmlSpec.setAttribute "Valuta", scValuta
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    iCnt = 0: bUse = False
    For iRow = 3 To fndRngLst(shV.Cells(30, 4).Value)
      Set rngCell = shS.Cells(iRow, SPCM)
      If Left(rngCell.Value, 1) = "T" Then
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        If bUse And shS.Cells(iRow, SPCM).Value = "TL" And shS.Cells(iRow, SPFL).Value <> "0" Then
          iCnt = iCnt + 1: bUse = False
          Set xmlElem = xmlSpec.appendChild(xmlFile.createElement("T_AU06"))
          ngcXmlTD oXML:=xmlElem, iVRed:=iCnt, sVrednost:=".", sVPon:="True", sTehPod:="VRSTA1"
        End If
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If shS.Cells(iRow, SPTV).Value <> 0 Then
          iCnt = iCnt + 1: bUse = True
          Set xmlElem = xmlSpec.appendChild(xmlFile.createElement("T_AU06"))
          ngcXmlTD oXML:=xmlElem, iVRed:=iCnt, sVrednost:=cnvToSav(shS.Cells(iRow, SPTV).Value), _
                   sVPon:="True", sTehPod:=cnvToSav(Replace(shS.Cells(iRow, SPID).Value, ":", "")), _
                   sTehPodText:=cnvToSav(shS.Cells(iRow, SPTT).Value)
        End If
      ElseIf Left(rngCell.Value, 1) = "C" Or Left(rngCell.Value, 1) = "F" Then
        Exit For
      End If
    Next iRow
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Set xmlElem = xmlSpec.appendChild(xmlFile.createElement("T_AU06"))
    ngcXmlTD oXML:=xmlElem, iVRed:=98, sVrednost:=shV.Cells(2, 2).Value & "." & shV.Cells(2, 11).Value, sVPon:="False", sTehPod:="CONFVERS"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Set xmlElem = xmlSpec.appendChild(xmlFile.createElement("T_AU06"))
    ngcXmlTD oXML:=xmlElem, iVRed:=99, sVrednost:="FUNCTIONAL", sVPon:="False", sTehPod:="SPEC-TYPE"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set xmlElem = xmlSpec.appendChild(xmlFile.createElement("T_AU06"))
    ngcXmlTD oXML:=xmlElem, iVRed:=100, sVrednost:=ngcInfo("CEN", False), sVPon:="False", sTehPod:="ISSUE"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    Set xmlElem = xmlSpec.appendChild(xmlFile.createElement("T_AU06"))
    ngcXmlTD oXML:=xmlElem, iVRed:=101, sVrednost:=Format(Date, "dd.mm.yyyy"), sVPon:="False", sTehPod:="VELJAVNO"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Set xmlElem = xmlSpec.appendChild(xmlFile.createElement("T_AU06"))
    ngcXmlTD oXML:=xmlElem, iVRed:=102, sVrednost:=ngcInfo("user"), sVPon:="False", sTehPod:="IZDELAL"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For iRow = 1 To fndRngLst(shV.Cells(30, 3).Value)
      Set rngCell = shI.Cells(iRow, INCM)
      If rngCell.Value = "QS" Then
        Set xmlElem = xmlSpec.appendChild(xmlFile.createElement("T_AS08"))
        xmlElem.setAttribute "Vrednost", cnvToSav(shI.Cells(iRow, INQV).Value)
        xmlElem.setAttribute "Question", cnvToSav(shI.Cells(iRow, INID).Value)
      End If
    Next iRow
    For iRow = 1 To fndRngLst(shV.Cells(30, 4).Value)
      Set rngCell = shS.Cells(iRow, SPCM)
      If rngCell.Value = "QL" Then
        Set xmlElem = xmlSpec.appendChild(xmlFile.createElement("T_AS08"))
        xmlElem.setAttribute "Vrednost", cnvToSav(shS.Cells(iRow, SPQV).Value)
        xmlElem.setAttribute "Question", cnvToSav(shS.Cells(iRow, SPID).Value)
      End If
    Next iRow
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    iCnt = 0: sCrc = ""
    For iRow = 1 To fndRngLst(shV.Cells(30, 4).Value)
      If IsError(shS.Cells(iRow, SPCM).Value) Or IsError(shS.Cells(iRow, SPCC).Value) Or _
         IsError(shS.Cells(iRow, SPID).Value) Or IsError(shS.Cells(iRow, SPTM).Value) Then
        sErr = sErr & ";" & scSpec & " - error in calculations in " & CStr(iRow) & " row"
      Else
        Set rngCell = shS.Cells(iRow, SPCM)
        If rngCell.Value = "CG" Then sCenCP = Mid(shS.Cells(iRow, SPTM).Value, 3)
        If Left(rngCell.Value, 1) = "F" And (Len(shS.Cells(iRow, SPCC).Value) = 0 Or Len(shS.Cells(iRow, SPID).Value) = 0) Then
          sErr = sErr & ";" & scSpec & " - error in calculations in " & CStr(iRow) & " row"
        ElseIf Left(rngCell.Value, 1) = "F" And shS.Cells(iRow, SPID).Value <> sSrvCP And Left(shS.Cells(iRow, SPID).Value, 2) <> sSrvCP & "-" Then
          ngcXmlSpec xmlFile:=xmlFile, xmlSpec:=xmlSpec, xmlOffr:=xmlOffr, sht:=shS, iRow:=iRow, sPrc:=scPrice, sQcen:=sCenCP
          sCrc = sCrc & CStr(shS.Cells(iRow, SPCC).Value) & vbTab & cnvToSav(Round(shS.Cells(iRow, SPCV).Value, 2)) & vbCrLf
        End If
      End If
    Next iRow
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Set xmlElem = xmlSpec.SelectNodes("T_CSI_PogodbeneTocke/T_CSI_Specs")
    If xmlElem.Length > 0 Then
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      Set xmlElem = xmlSpec.appendChild(xmlFile.createElement("T_AU06"))
      ngcXmlTD oXML:=xmlElem, iVRed:=103, sVrednost:=IIf(shV.Cells(2, 24).Value, "0", getCRC32(sCrc)), sVPon:="False", sTehPod:="SPEC-CRC32"
    Else: sErr = sErr & ";" & scSpec & " - functional specification is empty!": End If
    sCrc = ""
  End If
  
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If shV.Cells(2, 18).Value Then
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set xmlSpec = xmlOffr.appendChild(xmlFile.createElement("T_AU05"))
    xmlSpec.setAttribute "SPEC", scSpec & "-V"
    xmlSpec.setAttribute "ImeSpecifikacije", scObject
    xmlSpec.setAttribute "SLOIme", scObject
    xmlSpec.setAttribute "PORTI", "0"
    xmlSpec.setAttribute "VPonudbi", "True"
    If shV.Cells(2, 25).Value And (shI.Cells(5, INID).Value = "SOLUTION") Then xmlSpec.setAttribute "System", shI.Cells(5, INQV).Value
    If Len(scValuta) > 0 Then xmlSpec.setAttribute "Valuta", scValuta
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set xmlElem = xmlSpec.appendChild(xmlFile.createElement("T_AU06"))
    ngcXmlTD oXML:=xmlElem, iVRed:=99, sVrednost:="VARIABLE", sVPon:="False", sTehPod:="SPEC-TYPE"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    Set xmlElem = xmlSpec.appendChild(xmlFile.createElement("T_AU06"))
    ngcXmlTD oXML:=xmlElem, iVRed:=101, sVrednost:=Format(Date, "dd.mm.yyyy"), sVPon:="False", sTehPod:="VELJAVNO"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Set xmlElem = xmlSpec.appendChild(xmlFile.createElement("T_AU06"))
    ngcXmlTD oXML:=xmlElem, iVRed:=102, sVrednost:=ngcInfo("user"), sVPon:="False", sTehPod:="IZDELAL"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    iCnt = 0: sCrc = ""
    For iRow = 1 To fndRngLst(shV.Cells(30, 4).Value)
      If IsError(shS.Cells(iRow, SPCM).Value) Or IsError(shS.Cells(iRow, SPCC).Value) Or _
         IsError(shS.Cells(iRow, SPID).Value) Or IsError(shS.Cells(iRow, SPTM).Value) Then
        sErr = sErr & ";" & scSpec & " - error in calculations in " & CStr(iRow) & " row"
      Else
        Set rngCell = shS.Cells(iRow, SPCM)
        If rngCell.Value = "CG" Then sCenCP = Mid(shS.Cells(iRow, SPTM).Value, 3)
        If Left(rngCell.Value, 1) = "V" And (Len(shS.Cells(iRow, SPCC).Value) = 0 Or Len(shS.Cells(iRow, SPID).Value) = 0) Then
          sErr = sErr & ";" & scSpec & " - code or CP missing in " & CStr(iRow) & " row"
        ElseIf Left(rngCell.Value, 1) = "V" And shS.Cells(iRow, SPID).Value <> sSrvCP And Left(shS.Cells(iRow, SPID).Value, 2) <> sSrvCP & "-" Then
          ngcXmlSpec xmlFile:=xmlFile, xmlSpec:=xmlSpec, xmlOffr:=xmlOffr, sht:=shS, iRow:=rngCell.Row, sPrc:=scPrice, sQcen:=sCenCP
          sCrc = sCrc & CStr(shS.Cells(iRow, SPCC).Value) & vbTab & cnvToSav(Round(shS.Cells(iRow, SPCV).Value, 2)) & vbCrLf
        End If
      End If
    Next iRow
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Set xmlElem = xmlSpec.SelectNodes("T_CSI_PogodbeneTocke/T_CSI_Specs")
    If xmlElem.Length > 0 Then
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      Set xmlElem = xmlSpec.appendChild(xmlFile.createElement("T_AU06"))
      ngcXmlTD oXML:=xmlElem, iVRed:=103, sVrednost:=IIf(shV.Cells(2, 24).Value, "0", getCRC32(sCrc)), sVPon:="False", sTehPod:="SPEC-CRC32"
    Else: sErr = sErr & ";" & scSpec & " - variable specification is empty!": End If
    sCrc = ""
  End If
    
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If Not shV.Cells(2, 18).Value Then
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set xmlSpec = xmlOffr.appendChild(xmlFile.createElement("T_AU05"))
    xmlSpec.setAttribute "SPEC", scSpec & "-S"
    xmlSpec.setAttribute "ImeSpecifikacije", scObject
    xmlSpec.setAttribute "SLOIme", scObject
    xmlSpec.setAttribute "PORTI", "0"
    xmlSpec.setAttribute "VPonudbi", "True"
    If shV.Cells(2, 25).Value And (shI.Cells(5, INID).Value = "SOLUTION") Then xmlSpec.setAttribute "System", shI.Cells(5, INQV).Value
    If Len(scValuta) > 0 Then xmlSpec.setAttribute "Valuta", scValuta
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set xmlElem = xmlSpec.appendChild(xmlFile.createElement("T_AU06"))
    ngcXmlTD oXML:=xmlElem, iVRed:=98, sVrednost:=scSpec & "-F", sVPon:="False", sTehPod:="SPEC-REF"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Set xmlElem = xmlSpec.appendChild(xmlFile.createElement("T_AU06"))
    ngcXmlTD oXML:=xmlElem, iVRed:=99, sVrednost:="SERVICE", sVPon:="False", sTehPod:="SPEC-TYPE"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    Set xmlElem = xmlSpec.appendChild(xmlFile.createElement("T_AU06"))
    ngcXmlTD oXML:=xmlElem, iVRed:=101, sVrednost:=Format(Date, "dd.mm.yyyy"), sVPon:="False", sTehPod:="VELJAVNO"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Set xmlElem = xmlSpec.appendChild(xmlFile.createElement("T_AU06"))
    ngcXmlTD oXML:=xmlElem, iVRed:=102, sVrednost:=ngcInfo("user"), sVPon:="False", sTehPod:="IZDELAL"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    iCnt = 0: sCrc = ""
    For iRow = 1 To fndRngLst(shV.Cells(30, 4).Value)
      If IsError(shS.Cells(iRow, SPCM).Value) Or IsError(shS.Cells(iRow, SPCC).Value) Or _
         IsError(shS.Cells(iRow, SPID).Value) Or IsError(shS.Cells(iRow, SPTM).Value) Then
        sErr = sErr & ";" & scSpec & " - error in calculations in " & CStr(iRow) & " row"
      Else
        Set rngCell = shS.Cells(iRow, SPCM)
        If rngCell.Value = "CG" Then sCenCP = Mid(shS.Cells(iRow, SPTM).Value, 3)
        If Left(rngCell.Value, 1) = "F" And (Len(shS.Cells(iRow, SPCC).Value) = 0 Or Len(shS.Cells(iRow, SPID).Value) = 0) Then
          sErr = sErr & ";" & scSpec & " - error in calculations in " & CStr(iRow) & " row"
        ElseIf Left(rngCell.Value, 1) = "F" And (shS.Cells(iRow, SPID).Value = sSrvCP Or Left(shS.Cells(iRow, SPID).Value, 2) = sSrvCP & "-") Then
          ngcXmlSpec xmlFile:=xmlFile, xmlSpec:=xmlSpec, xmlOffr:=xmlOffr, sht:=shS, iRow:=iRow, sPrc:=scPrice, sQcen:=sCenCP
          sCrc = sCrc & CStr(shS.Cells(iRow, SPCC).Value) & vbTab & cnvToSav(Round(shS.Cells(iRow, SPCV).Value, 2)) & vbCrLf
        End If
      End If
    Next iRow
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Set xmlElem = xmlSpec.SelectNodes("T_CSI_PogodbeneTocke/T_CSI_Specs")
    If xmlElem.Length > 0 Then
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      Set xmlElem = xmlSpec.appendChild(xmlFile.createElement("T_AU06"))
      ngcXmlTD oXML:=xmlElem, iVRed:=103, sVrednost:=IIf(shV.Cells(2, 24).Value, "0", getCRC32(sCrc)), sVPon:="False", sTehPod:="SPEC-CRC32"
    Else: xmlOffr.RemoveChild xmlSpec: End If
    sCrc = ""
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
  xmlFile.LoadXML Replace(xmlFile.xml, "><", ">" & vbCrLf & "<")
  xmlFile.Save fileSave
  
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
ngcSaveSpecError:
  If Err.Number <> 0 Then sErr = sErr & ";" & "An error occur during operation. Contact " & shV.Cells(2, 7).Value
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| CEN |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub ngcXmlSpec(ByRef xmlFile As Object, ByRef xmlSpec As Object, ByRef xmlOffr As Object, ByRef sht As Worksheet, iRow As Long, sPrc As String, sQcen As String)
  Dim xmlCPos As Object, xmlElem As Object, xmlCur As Object, iCPnum As Long
  Dim dTot As Double, dCur As Double, dXml As Double, sCen As String
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If sht.Cells(iRow, SPCV).Value <> 0 Then
    Set xmlCPos = xmlSpec.SelectNodes("T_CSI_PogodbeneTocke [@SifPogT='" & sht.Cells(iRow, SPID).Value & "']")
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If xmlCPos.Length = 0 Then
      iCPnum = xmlSpec.SelectNodes("T_CSI_PogodbeneTocke").Length + 1
      Set xmlCPos = xmlSpec.appendChild(xmlFile.createElement("T_CSI_PogodbeneTocke"))
      ngcXmlCG oXML:=xmlCPos, iVRed:=iCPnum, sCenik:=sPrc, sSifPogT:=sht.Cells(iRow, SPID).Value
    Else: Set xmlCPos = xmlCPos.Item(0): End If
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    dTot = CDbl("0" & sht.Cells(iRow, SPCV).Value)
    sCen = ngcXmlCenN(sCode:=sht.Cells(iRow, SPCC).Value)
    If sCen = "" Then
      Set xmlElem = xmlCPos.appendChild(xmlFile.createElement("T_CSI_Specs"))
      ngcXmlCD oXML:=xmlElem, sKoda:=sht.Cells(iRow, SPCC).Value, sCenik:=sPrc, dKol:=dTot, sCENkoda:=sQcen, _
               dVrednost:=sht.Cells(iRow, SPC1).Value, sTekst:=sht.Cells(iRow, SPCT).Value
    Else
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      dXml = 0: Set xmlElem = xmlOffr.SelectNodes("//T_CSI_Specs[@KODA='" & sht.Cells(iRow, SPCC).Value & "']")
      For Each xmlCur In xmlElem: dXml = dXml + CDbl(xmlCur.getAttribute("Kol")): Next xmlCur
      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      dCur = ngcXmlCenQ(sCode:=sht.Cells(iRow, SPCC).Value, dInXml:=dXml, dMax:=dTot)
      While dCur > 0
        Set xmlElem = xmlCPos.appendChild(xmlFile.createElement("T_CSI_Specs"))
        sCen = ngcXmlCenN(sCode:=sht.Cells(iRow, SPCC).Value, dInXml:=dXml)
        ngcXmlCD oXML:=xmlElem, sKoda:=sht.Cells(iRow, SPCC).Value, sCenik:=sPrc, dKol:=dCur, sCENkoda:=sCen, _
                 dVrednost:=sht.Cells(iRow, SPC1).Value, sTekst:=sht.Cells(iRow, SPCT).Value
        dXml = dXml + dCur: dTot = dTot - dCur
        dCur = ngcXmlCenQ(sCode:=sht.Cells(iRow, SPCC).Value, dInXml:=dXml, dMax:=dTot)
      Wend
    End If
  End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| CEN |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Function ngcXmlCenN(sCode As String, Optional dInXml As Double = 0) As String
  Dim sCen As String, vCen As Variant
  sCen = Trim(ngcXmlCenP(sCode:=sCode))
  If Left(sCen, 1) = ";" Then sCen = Mid(sCen, 2)
  If Right(sCen, 1) = ";" Then sCen = Left(sCen, Len(sCen) - 1)
  If sCen <> "" Then
    vCen = Split(sCen, ";")
    If UBound(vCen) < dInXml Then
      ngcXmlCenN = vCen(UBound(vCen))
    Else: ngcXmlCenN = vCen(dInXml): End If
  Else: ngcXmlCenN = "": End If
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| CENx;CENy;CENz |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function ngcXmlCenP(sCode As String) As String
  ngcXmlCenP = ""
  Dim iRow As Long, sht As Worksheet
  Set sht = Sheets(ngcCSI)
  For iRow = 1 To fndRngLst(Sheets(ngcVAR).Cells(30, 4).Value)
    If sht.Cells(iRow, SPCM).Value = "C" Then
      If sht.Cells(iRow, SPCC).Value = sCode And sht.Cells(iRow, SPCT).Value <> "" Then
        ngcXmlCenP = ngcXmlCenP & ";" & sht.Cells(iRow, SPCT).Value
      End If
    End If
  Next iRow
  ngcXmlCenP = Mid(ngcXmlCenP, 2)
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| CEN |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Function ngcXmlCenQ(sCode As String, dInXml As Double, dMax As Double) As Double
  ngcXmlCenQ = dMax
  If dMax > 0 Then
    Dim sCen As String, vCen As Variant
    sCen = ngcXmlCenP(sCode:=sCode)
    If sCen <> "" Then
      vCen = Split(sCen, ";")
      If UBound(vCen) > dInXml Then
        ngcXmlCenQ = dInXml
        While vCen(ngcXmlCenQ) = vCen(ngcXmlCenQ + 1) And UBound(vCen) > ngcXmlCenQ + 1 And ngcXmlCenQ - dInXml + 1 < dMax
          ngcXmlCenQ = ngcXmlCenQ + 1
        Wend
        If UBound(vCen) > ngcXmlCenQ Then
          ngcXmlCenQ = ngcXmlCenQ - dInXml + 1
        Else: ngcXmlCenQ = dMax: End If
      End If
    End If
  End If
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|.|fffd||fffd||fffd||fffd||fffd||fffd|
Sub ngcXmlTD(ByRef oXML As Object, ByVal iVRed As Long, sVrednost As String, sVPon As String, sTehPod As String, Optional sTehPodText As String = "")
  oXML.setAttribute "VRed", CStr(iVRed)
  oXML.setAttribute "Vrednost", sVrednost
  oXML.setAttribute "VPon", sVPon
  oXML.setAttribute "Crta", "False"
  oXML.setAttribute "TehPod", sTehPod
  oXML.setAttribute "TehPodText", sTehPodText
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
Sub ngcXmlCG(ByRef oXML As Object, ByVal iVRed As Long, sCenik As String, sSifPogT As String, Optional sSifPogTText As String = "")
  oXML.setAttribute "VRed", CStr(iVRed)
  oXML.setAttribute "FixCena", "False"
  oXML.setAttribute "TipIzpisa", "0"
  oXML.setAttribute "Cenik", Left(sCenik, 50)
  oXML.setAttribute "SifPogT", sSifPogT
  oXML.setAttribute "SifPogTText", sSifPogTText
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Sub ngcXmlCD(ByRef oXML As Object, sKoda As String, dKol As Double, sCenik As String, dVrednost As Double, Optional sCen As String = "", Optional sCENkoda As String = "", Optional sTekst As String = "")
  oXML.setAttribute "KODA", sKoda
  oXML.setAttribute "Kol", CStr(Round(dKol, 2))
  If Len(sCENkoda) > 0 Then oXML.setAttribute "CENkoda", sCENkoda
  oXML.setAttribute "FixCena", "False"
  oXML.setAttribute "CenaPozicije", "False"
  oXML.setAttribute "Cenik", Left(sCenik, 50)
  oXML.setAttribute "CenikCena", CStr(Round(dVrednost, 2))
  If Len(sCen) > 0 Then oXML.setAttribute "CEN", sCen
  oXML.setAttribute "Tekst", sTekst
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub ngcSavePrice()
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim shV As Worksheet, shP As Worksheet, iRow As Long
  Set shV = Sheets(ngcVAR): Set shP = Sheets(ngcPRC)
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim xmlFile As Object, xmlPrcs As Object, xmlElem As Object
  Set xmlFile = CreateObject("MSXML2.DOMDocument")
  Set xmlPrcs = xmlFile.appendChild(xmlFile.createElement("PriceList")).appendChild(xmlFile.createElement("T_GD_TP04"))
  xmlPrcs.setAttribute "Valuta", shP.Cells(4, PRK1).Value
  xmlPrcs.setAttribute "Opis", shP.Cells(5, PRC1).Value
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  For iRow = 6 To fndRngLst(shV.Cells(30, 5).Value)
    If shP.Cells(iRow, PRCB).Value <> "Y" Then
      Set xmlElem = xmlPrcs.appendChild(xmlFile.createElement("T_TP_CENIKI"))
      xmlElem.setAttribute "CENA", cnvToSav(shP.Cells(iRow, PRC1).Value)
      xmlElem.setAttribute "KODA", cnvToSav(shP.Cells(iRow, PRID).Value)
    Else
      Set xmlElem = xmlPrcs.appendChild(xmlFile.createElement("T_TP_CENIKIKABEL"))
      xmlElem.setAttribute "CENA", cnvToSav(shP.Cells(iRow, PRC1).Value)
      xmlElem.setAttribute "KonCena", cnvToSav(shP.Cells(iRow, PRK1).Value)
      xmlElem.setAttribute "KABEL", cnvToSav(shP.Cells(iRow, PRID).Value)
    End If
  Next iRow
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
  Dim vPath As Variant, fileSave As String
  vPath = Application.GetSaveAsFilename(shP.Cells(5, PRC1).Value & ".xml", "Iskratel pricelist,*.xml", 0)
  If vPath = False Then Exit Sub
  fileSave = vPath
  xmlFile.LoadXML Replace(xmlFile.xml, "><", ">" & vbCrLf & "<")
  xmlFile.Save fileSave
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub ngcSaveCfg(sErr As String)
  On Error GoTo ngcSaveToCfgError
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim wbkTo As Workbook, wbkFrom As Workbook, sFile As String, sConf As String, bAsk As Boolean
  Set wbkFrom = ActiveWorkbook
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
  sFile = Sheets(ngcVAR).Cells(2, 8).Value: If Right(sFile, 1) <> "\" Then sFile = sFile & "\"
  sFile = sFile & "~$" & escID(Sheets(ngcINP).Cells(3, INQV).Value, 2, Nothing, sErr) & ".xml"
  ngcSaveSpec sErr:=sErr, fileSave:=sFile
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  bAsk = False
  sConf = GetSetting(AppName:="NG3cfg", Section:="Export", Key:="Config", Default:="")
  If sConf <> "" Then
    If Dir(sConf) = "" Then bAsk = True
  Else: bAsk = True: End If
  If bAsk Then
    ngcSaveCfgOpt sErr:=sErr
    sConf = GetSetting(AppName:="NG3cfg", Section:="Export", Key:="Config", Default:="")
  End If
  If sConf = "" Then
    sErr = sErr & ";" & " - configurator file not found!"
    Exit Sub
  End If
  Set wbkTo = Workbooks.Open(sConf)
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  frmCfgImp.ShowManual bCompare:=True, sFile:=sFile
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
ngcSaveToCfgError:
  If Err.Number <> 0 Then sErr = sErr & "; - " & Trim(Replace(Replace(Err.Description, vbCr, " "), vbLf, " ")) & " (" & Err.Number & ")"
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub ngcSaveCfgOpt(sErr As String)
  Dim vPath As Variant, sCfg As String
  vPath = Application.GetOpenFilename(FileFilter:="Iskratel configurator file,*.xltm", FilterIndex:=0, Title:="Select configurator file", ButtonText:="Select", MultiSelect:=False)
  If vPath = False Then Exit Sub
  sCfg = vPath
  SaveSetting AppName:="NG3cfg", Section:="Export", Key:="Config", Setting:=sCfg
End Sub


'############################################
'############  MS Visio routine #############
'############################################

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub ngcSaveVisio(ByRef sMsg As String)
  On Error GoTo ngcSaveVisioError
  Application.Calculation = xlCalculationAutomatic
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Excel
  Dim shV As Worksheet, shI As Worksheet
  Set shV = Sheets(ngcVAR): Set shI = Sheets(ngcINP)
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel
  Dim iRow As Long, iCol As Long, iMsp As Long
  Dim sCell As String, sDir As String, sWeb As String
  Dim sTmp As String, iTmp As Long, bTmp As Boolean
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Visio
  Dim appV As Object, visD As Object, visS As Object
  Dim spCur As Object, spPnt As Object, spMsr As Object
  Dim dX As Double, dY As Double
  Set appV = CreateObject("Visio.Application")
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  sMsg = "": iMsp = 2: sCell = "User.T2BbyR"
  sDir = shV.Cells(2, 8).Value: sDir = sDir & IIf(Right(sDir, 1) <> "\", "\", "")
  sWeb = shV.Cells(2, 8).Value: sDir = sDir & IIf(Right(sDir, 1) <> "\", "\", "")
  If shI.Cells(1, INTM + 1).Value <> "" Then shI.Cells(1, INTM).Value = iMsp
  Application.CalculateFullRebuild
  '|fffd||fffd||fffd||fffd| |fffd||fffd| MSpec
  While iMsp > 0
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    iRow = fndRngFst(shV.Cells(30, 6).Value)
    While (shV.Cells(iRow, VVCM).Value <> "") And (sMsg = "")
      Select Case Left(shV.Cells(iRow, VVCM).Value, 4)
      Case "[VO]"
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If shV.Cells(iRow, VVTM).Value <> "" Then
          sTmp = IIf(InStr(shV.Cells(iRow, VVTM).Value, ":") > 0, "", sDir) & shV.Cells(iRow, VVTM).Value
          If Dir(sTmp) = "" And ngcCRP Then getWebFile fromURL:=webURL & shV.Cells(iRow, VVTM).Value, toFile:=sTmp
          If Dir(sTmp) <> "" Then
            Set visD = appV.Documents.Add(sTmp)
            If Not visD Is Nothing Then
              '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
              bTmp = True
              For iTmp = 1 To appV.Documents.Count
                If appV.Documents(iTmp).Title = shV.Cells(iRow, VVID).Value Then
                  sMsg = sMsg & "; - document with same Title already exist (row " & CStr(iRow) & ")"
                  bTmp = False
                  Exit For
                End If
              Next iTmp
              If bTmp Then visD.Title = shV.Cells(iRow, VVID).Value
            Else: Set visD = Nothing: sMsg = sMsg & "; - can't open " & sTmp & " (row " & CStr(iRow) & ")": End If
          Else: Set visD = Nothing: sMsg = sMsg & "; - can't find " & sTmp & " (row " & CStr(iRow) & ")": End If
        End If
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Not visD Is Nothing Then
          If shV.Cells(iRow, VVPT).Value <> "" Then
            sTmp = IIf(InStr(shV.Cells(iRow, VVPT).Value, ":") > 0, "", sDir) & shV.Cells(iRow, VVPT).Value
            If Dir(sTmp) = "" And ngcCRP Then getWebFile fromURL:=webURL & shV.Cells(iRow, VVPT).Value, toFile:=sTmp
            If Dir(sTmp) <> "" Then
              Set visS = appV.Documents.OpenEx(sTmp, 2 + 4) 'visOpenRO + visOpenDocked
              If visS Is Nothing Then sMsg = sMsg & "; - can't open " & sTmp & " (row " & CStr(iRow) & ")"
            Else: Set visS = Nothing: sMsg = sMsg & "; - can't find " & sTmp & " (row " & CStr(iRow) & ")": End If
          End If
        Else: Set visS = Nothing: sMsg = sMsg & "; - no active document for opening stencil (row " & CStr(iRow) & ")": End If
      Case "[VA]"
        For Each visD In appV.Documents
          If visD.Title = shV.Cells(iRow, VVID).Value Then Exit For
        Next visD
        If Not visD Is Nothing Then
          appV.Windows.ItemEx(visD.Name).Activate
          If (shV.Cells(iRow, VVTM).Value <> "") And (shV.Cells(iRow, VVTM).Value <> 0) Then
            For iTmp = 1 To appV.ActiveDocument.Pages.Count
              If appV.ActiveDocument.Pages(iTmp) = shV.Cells(iRow, VVTM).Value Then Exit For
            Next iTmp
            If iTmp <= appV.ActiveDocument.Pages.Count Then
              appV.ActiveWindow.Page = appV.ActiveDocument.Pages(shV.Cells(iRow, VVTM).Value)
            Else: sMsg = sMsg & "; - required page does not exist (row " & CStr(iRow) & ")": End If
          End If
        Else: sMsg = sMsg & "; - document with required Title does not exist (row " & CStr(iRow) & ")": End If
      Case "[VP]"
        With visD.Pages.Add
          .Name = shV.Cells(iRow, VVID).Value
          .Background = False
          If (shV.Cells(iRow, VVTM).Value <> "") And (shV.Cells(iRow, VVTM).Value <> 0) Then
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
            bTmp = False
            For iTmp = 1 To visD.Pages.Count
              If visD.Pages(iTmp).Name = shV.Cells(iRow, VVTM).Value Then bTmp = True: Exit For
            Next iTmp
            If bTmp Then
              .BackPage = shV.Cells(iRow, VVTM).Value
            Else: sMsg = sMsg & "; - background page not found (row " & CStr(iRow) & ")": End If
          End If
        End With
      Case "[VS]", "[VD]"
        If shV.Cells(iRow, VVCM).Value = "[VD]" Then
          If LCase(shV.Cells(iRow, VVID).Value) = "thepage" Then
            Set spCur = appV.ActivePage.PageSheet
            sCell = shV.Cells(iRow, VVTM).Value
            If ngcVisOk(spCur, sCell, sMsg) Then spCur.Cells(sCell).Formula = shV.Cells(iRow, VVPT).Value
          ElseIf ngcVisEx(shV.Cells(iRow, VVID).Value, appV.ActivePage.Shapes, sMsg) Then
            Set spCur = appV.ActivePage.Shapes.Item(shV.Cells(iRow, VVID).Value)
            sCell = shV.Cells(iRow, VVTM).Value
            If ngcVisOk(spCur, sCell, sMsg) Then spCur.Cells(sCell).Formula = shV.Cells(iRow, VVPT).Value
          Else: Set spCur = Nothing: End If
        ElseIf LCase(shV.Cells(iRow, VVTM).Value) = "startpoint" Then
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| StartPoint
          If LCase(shV.Cells(iRow, VVPT).Value) = "thepage" Then
            Set spPnt = Nothing
            dX = 0: dY = 0
          ElseIf ngcVisEx(shV.Cells(iRow, VVPT).Value, appV.ActivePage.Shapes, sMsg) Then
            Set spPnt = appV.ActivePage.Shapes.Item(shV.Cells(iRow, VVPT).Value)
            If ngcVisOk(spPnt, "", sMsg) Then
              dX = spPnt.Cells("PinX").ResultIU - spPnt.Cells("LocPinX").ResultIU + spPnt.Cells("User.LocPinX").ResultIU
              dY = spPnt.Cells("PinY").ResultIU - spPnt.Cells("LocPinY").ResultIU + spPnt.Cells("User.LocPinY").ResultIU - spPnt.Cells("User.T2BbyR").ResultIU
            Else: Set spPnt = Nothing: End If
          Else: Set spPnt = Nothing: End If
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          Set spCur = appV.ActivePage.DrawOval(dX - 0.05, dY - 0.05, dX + 0.05, dY + 0.05)
          spCur.AddSection 242 'visSectionUser
          spCur.AddNamedRow 242, "LocPinX", 0
          spCur.AddNamedRow 242, "LocPinY", 0
          spCur.AddNamedRow 242, "Width", 0
          spCur.AddNamedRow 242, "Height", 0
          spCur.AddNamedRow 242, "T2BbyR", 0
          spCur.Cells("User.LocPinX").FormulaU = "Width*0.5"
          spCur.Cells("User.LocPinY").FormulaU = "Height*0.5"
          spCur.Cells("User.Width").FormulaU = "0"
          spCur.Cells("User.Height").FormulaU = "User.T2BbyR"
          spCur.Cells("User.T2BbyR").FormulaU = "0"
          spCur.Cells("LinePattern").FormulaU = "0"
          spCur.Cells("FillPattern").FormulaU = "0"
          spCur.Name = shV.Cells(iRow, VVID).Value
          If Not spPnt Is Nothing Then
            If LCase(Left(spCur.Cells("PinX").Formula, 5)) <> "guard" Then spCur.Cells("PinX").Formula = spPnt.NameU & "!PinX-" & spPnt.NameU & "!LocPinX+" & spPnt.NameU & "!User.LocPinX"
            If LCase(Left(spCur.Cells("PinY").Formula, 5)) <> "guard" Then spCur.Cells("PinY").Formula = spPnt.NameU & "!PinY-" & spPnt.NameU & "!LocPinY+" & spPnt.NameU & "!User.LocPinY-(" & spPnt.Cells("User.T2BbyR").Formula & ")" '(visMillimeters)) & "mm"
            spPnt.Cells("User.T2BbyR").Formula = spPnt.Cells("User.T2BbyR").Formula & "+" & spCur.NameU & "!User.Height"
          End If
        ElseIf LCase(shV.Cells(iRow, VVPT).Value) = "thepage" Then
          If ngcVisEx(shV.Cells(iRow, VVTM).Value, visS.Masters, sMsg) Then
            Set spMsr = visS.Masters.Item(shV.Cells(iRow, VVTM).Value)
            Set spPnt = appV.ActivePage.PageSheet
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            For iTmp = 1 To IIf(Len(shV.Cells(iRow, VVCM).Value) > 4, Val(Mid(shV.Cells(iRow, VVCM).Value, 6)), 1)
              Set spCur = appV.ActivePage.Drop(spMsr, 0, 0)
              If ngcVisOk(spCur, "", sMsg) Then
                spCur.Name = shV.Cells(iRow, VVID).Value & IIf(iTmp > 1, Right("00" & CStr(iTmp), 3), "")
                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                ngcVisSet shV:=shV, iRow:=iRow, spCur:=spCur, sMsg:=sMsg
              End If
            Next iTmp
            Set spCur = Nothing '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|.|fffd||fffd||fffd||fffd||fffd||fffd|
          End If
        ElseIf ngcVisEx(shV.Cells(iRow, VVTM).Value, visS.Masters, sMsg) And _
               ngcVisEx(shV.Cells(iRow, VVPT).Value, appV.ActivePage.Shapes, sMsg) Then
          Set spMsr = visS.Masters.Item(shV.Cells(iRow, VVTM).Value)
          Set spPnt = appV.ActivePage.Shapes.Item(shV.Cells(iRow, VVPT).Value)
          If ngcVisOk(spPnt, "", sMsg) Then
            For iTmp = 1 To IIf(Len(shV.Cells(iRow, VVCM).Value) > 4, Val(Mid(shV.Cells(iRow, VVCM).Value, 6)), 1)
              dX = spPnt.Cells("PinX").ResultIU - spPnt.Cells("LocPinX").ResultIU + spPnt.Cells("User.LocPinX").ResultIU
              dY = spPnt.Cells("PinY").ResultIU - spPnt.Cells("LocPinY").ResultIU + spPnt.Cells("User.LocPinY").ResultIU - spPnt.Cells("User.T2BbyR").ResultIU
              '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              Set spCur = appV.ActivePage.Drop(spMsr, dX, dY)
              If ngcVisOk(spCur, "", sMsg) Then
                spCur.Name = shV.Cells(iRow, VVID).Value & IIf(iTmp > 1, Right("00" & CStr(iTmp), 3), "")
                If LCase(Left(spCur.Cells("PinX").Formula, 5)) <> "guard" Then spCur.Cells("PinX").Formula = spPnt.NameU & "!PinX-" & spPnt.NameU & "!LocPinX+" & spPnt.NameU & "!User.LocPinX"
                If LCase(Left(spCur.Cells("PinY").Formula, 5)) <> "guard" Then spCur.Cells("PinY").Formula = spPnt.NameU & "!PinY-" & spPnt.NameU & "!LocPinY+" & spPnt.NameU & "!User.LocPinY-(" & spPnt.Cells("User.T2BbyR").Formula & ")" '(visMillimeters)) & "mm"
                spPnt.Cells("User.T2BbyR").Formula = spPnt.Cells("User.T2BbyR").Formula & "+" & spCur.NameID & "!User.Height"
                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
                ngcVisSet shV:=shV, iRow:=iRow, spCur:=spCur, sMsg:=sMsg
              End If
            Next iTmp
            Set spCur = Nothing '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|.|fffd||fffd||fffd||fffd||fffd||fffd|
          End If
        End If
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Not spCur Is Nothing Then ngcVisSet shV:=shV, iRow:=iRow, spCur:=spCur, sMsg:=sMsg
      Case "[RM]"
        'do nothing
      Case Else
        sMsg = sMsg & "; - unknown command in " & CStr(iRow) & " row"
      End Select
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      iRow = iRow + 1
    Wend
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MSpec
    If shI.Cells(1, INTM + iMsp).Value <> "" Then
      iMsp = iMsp + 1
      shI.Cells(1, INTM).Value = iMsp
      Application.CalculateFullRebuild
    Else: iMsp = 0: End If
  Wend
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
ngcSaveVisioError:
  If Err.Number <> 0 Then sMsg = sMsg & "; - " & IIf(iRow > 0, CStr(iRow) & " row: ", "") & Trim(Replace(Replace(Err.Description, vbCr, " "), vbLf, " ")) & " (" & Err.Number & ")"
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Visio
Sub ngcVisioQS(fileName As String)
  'not in this version
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|.|fffd||fffd||fffd||fffd||fffd||fffd|
Sub ngcVisSet(shV As Worksheet, iRow As Long, spCur As Object, sMsg As String)
  Dim iCol As Integer, sCell As String
  iCol = VVST
  While shV.Cells(iRow, iCol).Value <> ""
    sCell = Mid(shV.Cells(iRow, iCol).Value, 3)
    If ngcVisOk(spCur, sCell, sMsg) Then If LCase(Left(spCur.Cells(sCell).Formula, 5)) <> "guard" Then spCur.Cells(sCell).Formula = shV.Cells(iRow, iCol + 1).Value
    iCol = iCol + 2
  Wend
End Sub

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function ngcVisEx(sName As String, oCol As Object, ByRef sErr As String) As Boolean
  Dim oCur As Object
  ngcVisEx = False
  For Each oCur In oCol
    If oCur.Name = sName Then ngcVisEx = True: Exit For
  Next oCur
  If Not ngcVisEx Then sErr = sErr & "; - shape '" & sName & "' does not exist"
End Function

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Function ngcVisOk(oShape As Object, sCell As String, ByRef sErr As String) As Boolean
  ngcVisOk = True
  If sCell = "" Then
    Dim aPar As Variant, iPar As Long
    aPar = Array("User.LocPinX", "User.LocPinY", "User.Width", "User.Height", "User.T2BbyR")
    For iPar = LBound(aPar) To UBound(aPar)
      If Not oShape.CellExists(aPar(iPar), False) Then
        ngcVisOk = False
        sErr = sErr & "; - parameter " & aPar(iPar) & " is missing in '" & oShape.Name & "'"
      End If
    Next iPar
  ElseIf Not oShape.CellExists(sCell, False) Then
    ngcVisOk = False
    sErr = sErr & "; - parameter " & sCell & " is missing in """ & oShape.Name & """"
  End If
End Function

'############################################
'########### Multispec functions ############
'############################################

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MSpec |fffd||fffd||fffd||fffd||fffd||fffd|
Sub ngcMspNew(bCopy As Boolean, Optional bExternal As Boolean = True)
  On Error GoTo ngcMspNewError
  Dim shQS As Worksheet, shCD As Worksheet, shWin As Worksheet, iCol As Long, iRow As Long, sFrm As String
  Set shQS = Sheets(ngcINP): Set shCD = Sheets(ngcCSI): Set shWin = ActiveSheet
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If bExternal Then
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False
  End If
  shQS.Activate
  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Mspec
  iCol = 1
  While shQS.Cells(1, INTM + iCol).Value <> "": iCol = iCol + 1: Wend
  If iCol = 1 Then ngcFixRow wnd:=ActiveWindow: shCD.Rows(2).Font.Size = 11
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  With shQS.OptionButtons.Add(shQS.Cells(1, INTM + iCol).Left, shQS.Cells(1, INTM + iCol).Top + 2, shQS.Cells(1, INTM + iCol).Width, shQS.Cells(1, INTM + iCol).Height - 4)
    .Name = "ngcMSpec" & CStr(iCol)
    .Caption = "MSpec " & CStr(iCol)
    .Value = True
    .LinkedCell = shQS.Cells(1, INTM).Address
    .OnAction = "ngcAFcreate"
  End With
  shQS.Cells(1, INTM + iCol).Font.Color = 16777215
  shQS.Cells(1, INTM + iCol).FormulaR1C1 = "=1*(rc" & CStr(INTM) & "=" & CStr(iCol + 1) & ")"
  shQS.Cells(IIf(shQS.Cells(5, INID).Value = "SOLUTION", 6, 5), INTM + iCol).WrapText = True
  With shCD.Cells(2, SPTM + iCol)
    .WrapText = True
    .FormulaR1C1 = "=if('" & ngcINP & "'!r" & IIf(shQS.Cells(5, INID).Value = "SOLUTION", "6", "5") & "c" & CStr(INTM + iCol) & "="""","""",'" & ngcINP & "'!r" & IIf(shQS.Cells(5, INID).Value = "SOLUTION", "6", "5") & "c" & CStr(INTM + iCol) & ")"
  End With
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  iRow = fndRngLst(Sheets(ngcVAR).Cells(30, 3).Value)
  sFrm = "=r1c*((rc" & CStr(INCM) & "=""QS"")+(rc" & CStr(INCM) & "=""TD""))"
  With shQS.Range(shQS.Cells(2, INTM + 1), shQS.Cells(iRow, INTM + iCol)).FormatConditions
    .Delete
    .Add(Type:=xlExpression, Formula1:=Application.ConvertFormula(sFrm, xlR1C1, xlA1, , IIf(Val(Application.Version) > 12, shQS.Cells(2, INTM + 1), ActiveCell))).Interior.Color = 15849925
  End With
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If bCopy And shQS.Cells(1, INTM).Value > 1 Then
    For iRow = 2 To fndRngLst(Sheets(ngcVAR).Cells(30, 3).Value)
      If shQS.Cells(iRow, INCM).FormulaR1C1 = "QS" Or shQS.Cells(iRow, INCM).FormulaR1C1 = "TD" Then
        If shQS.Cells(iRow, INQV).Value <> shQS.Cells(iRow, INQD).Value Then
          shQS.Cells(iRow, INTM + shQS.Cells(1, INTM).Value - 1).Value = shQS.Cells(iRow, INQV).Value
          shQS.Cells(iRow, INQV).FormulaR1C1 = ngcMsp(True)
        End If
      ElseIf shQS.Cells(iRow, INCM).FormulaR1C1 = "QG" Then
        If shQS.Cells(iRow, INTM).Value = True Then
          shQS.Cells(iRow, INTM + shQS.Cells(1, INTM).Value - 1).Value = shQS.Cells(iRow, INTM).Value
          shQS.Cells(iRow, INTM).FormulaR1C1 = ngcMsp(True, True)
        End If
      End If
    Next iRow
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  shCD.Activate
  If iCol = 1 Then ngcFixRow wnd:=ActiveWindow
  With shCD.OptionButtons.Add(shCD.Cells(1, SPTM + iCol).Left, shCD.Cells(1, SPTM + iCol).Top + 2, shCD.Cells(1, SPTM + iCol).Width, shCD.Cells(1, SPTM + iCol).Height - 4)
    .Name = "ngcMSpec" & CStr(iCol)
    .Caption = "MSpec " & CStr(iCol)
    .LinkedCell = shCD.Cells(1, SPTM).Address
    .OnAction = "ngcMspSet"
  End With
  shCD.Cells(1, SPTM).FormulaR1C1 = "=" & wrtAdr(1, INTM, ngcINP) & "-1"
  shCD.Cells(1, SPTM + iCol).Font.Color = 16777215
  shCD.Cells(1, SPTM + iCol).FormulaR1C1 = "=" & wrtAdr(1, INTM + iCol, ngcINP)
  shCD.Cells(1, SPTM + iCol).VerticalAlignment = xlCenter
  iRow = fndRngLst(Sheets(ngcVAR).Cells(30, 4).Value)
  sFrm = "=r1c*((rc" & CStr(SPCM) & "=""QL"")+(rc" & CStr(SPCM) & "=""F"")+(rc" & CStr(SPCM) & "=""V"")+(rc" & CStr(SPCM) & "=""TD"")+(rc" & CStr(SPCM) & "=""TL""))"
  With shCD.Range(shCD.Cells(2, SPTM + 1), shCD.Cells(iRow, SPTM + iCol)).FormatConditions
    .Delete
    .Add(Type:=xlExpression, Formula1:=Application.ConvertFormula(sFrm, xlR1C1, xlA1, , IIf(Val(Application.Version) > 12, shCD.Cells(2, SPTM + 1), ActiveCell))).Interior.Color = 15849925
  End With
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If bCopy And shQS.Cells(1, INTM).Value > 1 Then
    For iRow = 1 To fndRngLst(Sheets(ngcVAR).Cells(30, 4).Value)
      If shCD.Cells(iRow, SPCM).FormulaR1C1 = "F" Or shCD.Cells(iRow, SPCM).FormulaR1C1 = "V" Then
        If shCD.Cells(iRow, SPCV).Value <> shCD.Cells(iRow, SPTM).Value Then
          shCD.Cells(iRow, SPTM + iCol).Value = shCD.Cells(iRow, SPCV).Value
          shCD.Cells(iRow, SPCV).FormulaR1C1 = ngcMsp2(True, shCD.Cells(iRow, SPTM).FormulaR1C1)
        End If
      ElseIf shCD.Cells(iRow, SPCM).FormulaR1C1 = "QL" Then
        If shCD.Cells(iRow, SPQV).Value <> shCD.Cells(iRow, SPQD).Value Then
          shCD.Cells(iRow, SPTM + iCol).Value = shCD.Cells(iRow, SPQV).Value
          shCD.Cells(iRow, SPQV).FormulaR1C1 = ngcMsp2(True)
        End If
      End If
    Next iRow
  End If
  shWin.Activate
  '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  If iCol = 1 And Windows.Count > 1 Then ngcFixRow wnd:=Windows(2)
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If bExternal Then ngcAFcreate
ngcMspNewError:
  If bExternal Then
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
  End If
  If Err.Number <> 0 Then MsgBox "An error occur during operation (" & CStr(Err.Number) & ")." & vbLf & Err.Description, vbCritical
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| MSpec
Sub ngcMspSet()
  If ActiveCell.Parent.Name <> ngcCSI Then Exit Sub
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim iMsp As Integer
  iMsp = Sheets(ngcCSI).Cells(1, SPTM).Value + 1
  Application.ScreenUpdating = False
  Sheets(ngcINP).Cells(1, INTM).Value = iMsp '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If Sheets(ngcINP).Cells(1, INTM).Value <> iMsp Then Sheets(ngcINP).Cells(1, INTM).Value = iMsp
  Sheets(ngcCSI).Cells(1, SPTM).FormulaR1C1 = "=" & wrtAdr(1, INTM, ngcINP) & "-1"
  ngcAFcreate '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ScreenUpdating
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub ngcMspRst(curOnly As Boolean, shtName As String)
  On Error GoTo ngcMspRstError
  If Not fndIsSheet(ngcVAR) Or Not fndIsSheet(shtName) Or (shtName <> ngcCSI And shtName <> ngcINP) Then Exit Sub
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim rng As Range, sht As Worksheet, wnd As Worksheet, bMsp As Boolean
  bMsp = (Sheets(ngcINP).Cells(1, INTM + 1).Value <> "")
  Set wnd = ActiveSheet
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.Cursor = xlWait
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
  If Not curOnly Then Application.EnableEvents = False
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| ngcINP
  If shtName = ngcINP Then
    Set sht = Sheets(ngcINP): sht.Activate
    For Each rng In IIf(curOnly, ActiveCell.Cells, sht.Range(Sheets(ngcVAR).Cells(30, 3).Value).Cells)
      If rng.Offset(, INCM - rng.Column).Value = "QS" Or rng.Offset(, INCM - rng.Column).Value = "TD" Then
        If bMsp Then sht.Cells(rng.Row, INTM + sht.Cells(1, INTM).Value - 1).Value = ""
        If rng.Offset(, INQV - rng.Column).NumberFormat = "@" Then rng.Offset(, INQV - rng.Column).NumberFormat = "0"
        rng.Offset(, INQV - rng.Column).FormulaR1C1 = ngcMsp(bMsp)
      End If
    Next rng
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| ngcCSI
  If (Not curOnly And shtName = ngcINP) Or (curOnly And shtName = ngcCSI) Then
    Set sht = Sheets(ngcCSI): sht.Activate
    For Each rng In IIf(curOnly, ActiveCell.Cells, sht.Range(Sheets(ngcVAR).Cells(30, 4).Value).Cells)
      If rng.Offset(, SPCM - rng.Column).Value = "QL" Then
        If bMsp Then sht.Cells(rng.Row, SPTM + sht.Cells(1, SPTM).Value).Value = ""
        rng.Offset(, SPQV - rng.Column).FormulaR1C1 = ngcMsp2(bMsp)
      End If
    Next rng
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| ngcCSI
  If shtName = ngcCSI Then
    Set sht = Sheets(ngcCSI): sht.Activate
    For Each rng In IIf(curOnly, ActiveCell.Cells, sht.Range(Sheets(ngcVAR).Cells(30, 4).Value).Cells)
      If Left(rng.Offset(, SPCM - rng.Column).Value, 1) = "F" Or Left(rng.Offset(, SPCM - rng.Column).Value, 1) = "V" Then
        If bMsp Then sht.Cells(rng.Row, SPTM + sht.Cells(1, SPTM).Value).Value = ""
        rng.Offset(, SPCV - rng.Column).FormulaR1C1 = ngcMsp2(bMsp, rng.Offset(, SPTM - rng.Column).FormulaR1C1)
      End If
    Next rng
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
ngcMspRstError:
  wnd.Activate
  Application.EnableEvents = True
  Application.Calculation = xlCalculationAutomatic
  If Err.Number <> 0 Then
    Application.ScreenUpdating = True
    Application.Cursor = xlDefault
    MsgBox "An error occur during operation.", vbCritical
  Else
    ngcAFcreate
    Application.ScreenUpdating = True
    Application.Cursor = xlDefault
  End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MSpec |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function ngcMsp(isMSpec As Boolean, Optional isQG As Boolean = False) As String
  If isMSpec Then
    ngcMsp = "=if(or(r1c" & CStr(INTM) & "=1,offset(rc" & CStr(INTM - 1) & ",,r1c" & CStr(INTM) & ")="""")," & IIf(isQG, False, "rc" & CStr(INQD)) & ",offset(rc" & CStr(INTM - 1) & ",,r1c" & CStr(INTM) & "))"
  Else: ngcMsp = "=rc" & CStr(INQD): End If
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MSpec |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function ngcMsp2(isMSpec As Boolean, Optional sCode As String = "") As String
  ngcMsp2 = IIf(sCode = "", "=rc" & CStr(SPQD), sCode)
  If isMSpec Then ngcMsp2 = "=if(or('" & ngcINP & "'!r1c" & CStr(INTM) & "=1,offset(rc" & CStr(SPTM - 1) & ",,'" & ngcINP & "'!r1c" & CStr(INTM) & ")="""")," & Mid(ngcMsp2, 2) & ",offset(rc" & CStr(SPTM - 1) & ",,'" & ngcINP & "'!r1c" & CStr(INTM) & "))"
End Function


'############################################
'############### Other routine ##############
'############################################

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub ngcRestoreOne()
Attribute ngcRestoreOne.VB_Description = "NG4 by Terekhov Alexey 2010 (c)"
Attribute ngcRestoreOne.VB_ProcData.VB_Invoke_Func = " \n14"
  ngcMspRst curOnly:=True, shtName:=ActiveCell.Parent.Name
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Ctrl+Shift+R
Sub ngcRestoreKey()
Attribute ngcRestoreKey.VB_Description = "NG4 by Terekhov Alexey 2010 (c)\nShortcut: Ctrl+Shift+R"
Attribute ngcRestoreKey.VB_ProcData.VB_Invoke_Func = "R\n14"
  If ActiveSheet.Name = ngcCSI Then
    ngcMspRst curOnly:=False, shtName:=ngcCSI
  ElseIf ActiveSheet.Name = ngcINP Then
    ngcMspRst curOnly:=False, shtName:=ngcINP
  End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Ctrl+Shift+J
Sub ngcGotoKey()
Attribute ngcGotoKey.VB_Description = "NG4 by Terekhov Alexey 2011 (c)\nShortcut: Ctrl+Shift+J"
Attribute ngcGotoKey.VB_ProcData.VB_Invoke_Func = "J\n14"
  If ActiveWorkbook.VBProject.Name <> "NG4byTA" Then Exit Sub
  frmCfgGoto.Show
End Sub

'change default location
Sub ngcOffitLoc()
Attribute ngcOffitLoc.VB_Description = "NG4 by Terekhov Alexey 2011 (c)"
Attribute ngcOffitLoc.VB_ProcData.VB_Invoke_Func = " \n14"
  Dim lstLoc As String
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim oDlg As Object
  Set oDlg = CreateObject("Shell.Application").BrowseForFolder(Application.Hwnd, "Select folder for specifications:", &H1, 16)
  If Not oDlg Is Nothing Then
    lstLoc = oDlg.Self.Path
    If (InStr(lstLoc, "::") = 0) And (InStr(lstLoc, ":") <> 0) Then
      SaveSetting AppName:="NG3cfg", Section:="Date", Key:="OffitLoc", Setting:=lstLoc
      Sheets(ngcVAR).Cells(2, 8).Value = lstLoc
    End If
  End If
End Sub

'check for configurator updates
Sub ngcOnlineCheck(Optional sMsg As String = "")
  On Error GoTo ngcOnlineCheckError
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| SOAP
  Const soapURL As String = "organizational_portals/produktno_vodenje/Projektiva/_vti_bin/lists.asmx?wsdl"
  Dim soapClient As Object
  Set soapClient = CreateObject("MSOSOAP.SoapClient30")
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim xmlAns As Object, xmlNod As Object, xmlPrc As Object
  Set xmlNod = CreateObject("MSXML2.DOMDocument.6.0")
  xmlNod.LoadXML ("<Document><Query/><ViewFields/><QueryOptions><ViewAttributes Scope='Recursive' /></QueryOptions></Document>")
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  soapClient.MSSoapInit wssURL & soapURL
  soapClient.ConnectorProperty("Timeout") = 10000
  Set xmlAns = soapClient.GetListItems("{190D0792-C379-44EC-959B-31041FBF6B3F}", "{EE906A73-5409-46AD-8189-AB4B50833F35}", _
      xmlNod.getElementsByTagName("Query"), _
      xmlNod.getElementsByTagName("ViewFields"), "99", _
      xmlNod.getElementsByTagName("QueryOptions"), "")
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  xmlNod.LoadXML xmlAns(0).xml
  Set soapClient = Nothing
  Set xmlAns = Nothing
  xmlNod.setProperty "SelectionNamespaces", "xmlns:z='#RowsetSchema'"
  Set xmlPrc = xmlNod.SelectNodes("//z:row")
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim sCfg As String, dCfg As Date, sWss As String, dWss As Date, iFnd As Integer
  Dim sTmp As String, iTmp As Integer
  iFnd = 0
  For Each xmlNod In xmlPrc
    sWss = CStr(xmlNod.getAttribute("ows_LinkFilename"))
    dWss = CDate(xmlNod.getAttribute("ows_Modified"))
    sCfg = CStr(Sheets(ngcVAR).Cells(2, 2).Value)
    dCfg = CDate(Sheets(ngcVAR).Cells(2, 3).Value)
    If xmlNod.getAttribute("ows_Title") = CStr(Sheets(ngcVAR).Cells(2, 34).Value) And Left(sCfg, 3) = Left(sWss, 3) Then
      If sCfg < Left(sWss, Len(sCfg)) Then
        iFnd = 1
        iTmp = MsgBox("A newer version is available: " & sWss & vbCrLf & _
                      "Click Yes if you want to download a file." & vbCrLf & _
                      "Click No to open page in your browser." & vbCrLf, vbInformation + vbYesNoCancel, _
                      sCfg & " (" & Format(dCfg, "yyyy.mm.dd") & ")")
        If iTmp = vbYes Or iTmp = vbNo Then
          sTmp = CStr(IIf(iTmp = vbYes, xmlNod.getAttribute("ows_FileRef"), xmlNod.getAttribute("ows_FileDirRef")))
          sTmp = Replace(Mid(sTmp, InStr(sTmp, ";#") + 2), " ", "%20")
          CreateObject("WScript.Shell").Run wssURL & sTmp
        End If
      Else: iFnd = -1: sMsg = sMsg & ";" & "No new version available.": End If
      Exit For
    End If
  Next xmlNod
  If iFnd = 0 Then sMsg = sMsg & ";" & "No appropriate version was found."
ngcOnlineCheckError:
  If Err.Number = 5400 Then
    sMsg = sMsg & ";" & wssURL & " is not accessible (" & CStr(Err.Number) & ")." & ";" & Err.Description
  ElseIf Err.Number <> 0 Then
    sMsg = sMsg & ";" & "An error occur during operation (" & CStr(Err.Number) & ")." & ";" & Err.Description
  End If
End Sub

Sub ngcModeRelink(ByRef sMsg As String)
  If Not fndIsSheet(ngcINP) And Not fndIsSheet(ngcCSI) Then Exit Sub
  Dim shQ As Worksheet, shI As Worksheet, shC As Worksheet
  Set shI = Sheets(ngcINP): Set shC = Sheets(ngcCSI)
  For Each shQ In Sheets
    If Left(shQ.Name, 2) = "Q." Then Exit For
  Next shQ
  If shQ Is Nothing Then Exit Sub
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim iRow As Integer, iCol As Integer, iLst As Integer
  Dim sCmd As String, iCmd As Integer, iTmp As Integer
  Dim fnd As Range, sAdr As String, sTmp As String
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  iCol = 1: iLst = shQ.Cells.SpecialCells(xlCellTypeLastCell).Column
  While iCol <= iLst
    If shQ.Cells(1, iCol).Value = "S:HIDE" Then shQ.Columns(iCol).EntireColumn.Hidden = False
    iCol = iCol + 1
  Wend
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  sCmd = ";": Set fnd = shQ.Cells.Find(What:="%%*", LookIn:=xlValues, LookAt:=xlWhole)
  If Not fnd Is Nothing Then
    sAdr = fnd.Address
    While Not fnd Is Nothing
      sCmd = sCmd & Mid(fnd.Value, 3) & ":" & wrtAdr(fnd.Row, fnd.Column + 1, shQ.Name) & ";"
      Set fnd = shQ.Cells.FindNext(fnd)
      If fnd.Address = sAdr Then Set fnd = Nothing
    Wend
  End If
  If Len(sCmd) < 2 Then sMsg = sMsg & "; - no question ID was found!"
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim bAsk As Integer
  bAsk = -1 '-1 |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, 0 |fffd||fffd||fffd||fffd||fffd|, 1 |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  '|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  iRow = 1: iLst = shI.Cells.SpecialCells(xlCellTypeLastCell).Row
  While iRow <= iLst And bAsk
    iTmp = InStr(sCmd, ";" & shI.Cells(iRow, INID).Value & ":")
    If iTmp > 0 And bAsk Then
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If bAsk < 0 And InStr(shI.Cells(iRow, INQV).FormulaR1C1, shQ.Name) = 0 Then
        'And LCase (shC.Cells(iRow, SPQV).FormulaR1C1) <> "=rc" & CStr(SPQD)
        'And LCase (Left(shC.Cells(iRow, SPQV).FormulaR1C1, 6)) <> "=ngcl("
        bAsk = IIf(MsgBox("Not linked questions were found." & vbCrLf & "Do you want to link questionnaire?", vbQuestion + vbYesNo) = vbYes, 1, 0)
        If bAsk = 0 Then MsgBox "Please re-link questionnaire for proper work!", vbExclamation
      End If
      '|fffd||fffd||fffd||fffd||fffd||fffd|
      If bAsk Then
        iCmd = InStr(iTmp, sCmd, ":") + 1
        sTmp = Mid(sCmd, iCmd, InStr(iCmd, sCmd, ";") - iCmd)
        shI.Cells(iRow, INQV).FormulaR1C1 = "=" & sTmp
        sCmd = Left(sCmd, iTmp) & Mid(sCmd, iCmd + Len(sTmp) + 1)
      End If
    End If
    iRow = iRow + 1
  Wend
  '|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  iRow = 1: iLst = shC.Cells.SpecialCells(xlCellTypeLastCell).Row
  While iRow <= iLst And bAsk
    iTmp = InStr(sCmd, ";" & shC.Cells(iRow, SPID).Value & ":")
    If iTmp > 0 And bAsk Then
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If bAsk < 0 And InStr(shC.Cells(iRow, SPQV).FormulaR1C1, shQ.Name) = 0 Then
        bAsk = IIf(MsgBox("Not linked questions were found." & vbCrLf & "Do you want to link questionnaire?", vbQuestion + vbYesNo) = vbYes, 1, 0)
        If bAsk = 0 Then MsgBox "Please re-link questionnaire for proper work!", vbExclamation
      End If
      '|fffd||fffd||fffd||fffd||fffd||fffd|
      If bAsk Then
        iCmd = InStr(iTmp, sCmd, ":") + 1
        sTmp = Mid(sCmd, iCmd, InStr(iCmd, sCmd, ";") - iCmd)
        shC.Cells(iRow, SPQV).FormulaR1C1 = "=" & sTmp
        sCmd = Left(sCmd, iTmp) & Mid(sCmd, iCmd + Len(sTmp) + 1)
      End If
    End If
    iRow = iRow + 1
  Wend
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  iCol = 1: iLst = shQ.Cells.SpecialCells(xlCellTypeLastCell).Column
  While iCol <= iLst
    If shQ.Cells(1, iCol).Value = "S:HIDE" Then shQ.Columns(iCol).EntireColumn.Hidden = True
    iCol = iCol + 1
  Wend
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Application.Calculation = xlCalculationAutomatic
  Application.ScreenUpdating = True
  If Len(sCmd) > 1 And bAsk Then sMsg = ";" & sCmd & sMsg '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
End Sub
Attribute VB_Name = "A2_Functions"
'(c)2010 Terekhov Alexey. All rights reserved.
'Phone: +38631334953, Skype:terekhov_alexey
Option Explicit

Const ngcSHFT As Integer = 2047
Const cABC64 As String = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
Const cABC56 As String = "0123456789ABCDEFGHJKLMNPRSTUVWXYZabcdefghijkmnpqrstuvwxz"
Const cABC32 As String = "0123456789ABCDEFGHJKLMNPRSTUVWXZ"
Const cABC26 As String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
Const cABC16 As String = "0123456789ABCDEF"
Const cABC10 As String = "0123456789"
Const cABC02 As String = "01"

#If VBA7 Then
  Public Declare PtrSafe Function GetKeyState Lib "user32" (ByVal nVirtKey As Long) As Integer
  Private Declare PtrSafe Function GetLocaleInfo Lib "kernel32" Alias "GetLocaleInfoA" (ByVal Locale As Long, ByVal LCType As Long, ByVal lpLCData As String, ByVal cchData As Long) As Long
  Public Declare PtrSafe Sub keybd_event Lib "user32" (ByVal bVk As Byte, ByVal bScan As Byte, ByVal dwFlags As Long, ByVal dwExtraInfo As Long)
  Private Declare PtrSafe Sub RtlMemCopy Lib "kernel32" Alias "RtlMoveMemory" (dest As Any, src As Any, ByVal numbytes As Long)
#Else
  Public Declare Function GetKeyState Lib "user32" (ByVal nVirtKey As Long) As Integer
  Private Declare Function GetLocaleInfo Lib "kernel32" Alias "GetLocaleInfoA" (ByVal Locale As Long, ByVal LCType As Long, ByVal lpLCData As String, ByVal cchData As Long) As Long
  Public Declare Sub keybd_event Lib "user32" (ByVal bVk As Byte, ByVal bScan As Byte, ByVal dwFlags As Long, ByVal dwExtraInfo As Long)
  Private Declare Sub RtlMemCopy Lib "kernel32" Alias "RtlMoveMemory" (dest As Any, src As Any, ByVal numbytes As Long)
#End If

'select text by language
Function ngcL(ByVal ngcText As String, Optional ByVal ngcLang As String = "", Optional exitManual As Boolean = True) As String
  If exitManual And Application.Calculation = xlCalculationManual Then Exit Function
  'preparations
  If ngcLang = "" Then If fndIsSheet(ngcINP) Then ngcLang = Sheets(ngcINP).Cells(1, INFL).Value
  ngcLang = "[" & IIf(ngcLang = "", "E1", Left(ngcLang, 2)) & "]"
  If (Left(ngcText, 2) = "$$") Or (Left(ngcText, 2) = "[]") Then ngcText = Mid(ngcText, 3)
  'select text
  Dim iBeg As Long, iEnd As Long
  If ngcText Like "*[[]??[]]*" Then
    iBeg = InStr(ngcText, ngcLang)
    iBeg = iBeg - 1 * (iBeg = 0) - 4 * ((Left(ngcText, 4) Like "[[]??[]]") Or (iBeg > 0))
    iEnd = InStr(iBeg + 1, ngcText, "[")
    If iEnd > 0 Then If Mid(ngcText, iEnd + 3, 1) <> "]" Then iEnd = InStr(iEnd + 1, ngcText, "[")
    If iEnd < iBeg Then iEnd = Len(ngcText) + 1
    ngcL = Mid(ngcText, iBeg, iEnd - iBeg)
  Else: ngcL = ngcText: End If
End Function

'error message preparations
Function ngcQ(bHide As Boolean, siRead As String, siWrite As String, ngcLang As String, Optional MsgNum As Range = Nothing) As String
  If Application.Calculation = xlCalculationManual Then Exit Function
  If IsError(siRead) Or IsError(siWrite) Or IsError(MsgNum) Then
    ngcQ = ngcL(Sheets(ngcVAR).Cells(15, 4).Value, ngcLang)
  ElseIf bHide Or siWrite = "" Then
    ngcQ = ""
  ElseIf ((siRead = "True") Or (siRead = "False")) <> ((siWrite = "True") Or (siWrite = "False")) Then
    If CBool(siWrite) <> CBool(siRead) Then ngcQ = ngcL(Sheets(ngcVAR).Cells(15, 3).Value, ngcLang) & siWrite & "! "
  ElseIf siWrite <> siRead Then
    ngcQ = ngcL(Sheets(ngcVAR).Cells(15, 3).Value, ngcLang) & siWrite & "! "
  End If
  If Not MsgNum Is Nothing Then ngcQ = ngcQ & IIf(MsgNum.Value > 0, ngcL(MsgNum.Offset(0, MsgNum.Value).Value, ngcLang) & " ", "")
End Function

'additional message preparations
Function ngcG(MsgNum As Range) As String
  ngcG = ""
  If IsError(MsgNum) Then ngcG = ngcL(Sheets(ngcVAR).Cells(15, 4).Value, "") & " ": Exit Function
  If MsgNum.Value > 0 Then ngcG = ngcL(MsgNum.Offset(0, MsgNum.Value).Value, "") & " "
End Function

'check resolution for two windows
Function ngcW() As Boolean
  ngcW = (Application.Width < 1100 Or Sheets(ngcVAR).Visible)
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function TrfLin2Los(ErlArg As Double, LineArg As Long) As Double
  If ErlArg <= 0 Or LineArg <= 0 Then
    TrfLin2Los = -1
    If ErlArg = 0 Then TrfLin2Los = 0
    If LineArg = 0 Then TrfLin2Los = 1
    Exit Function
  Else
    Const MAX_LOS As Long = 100
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Static prevLos(MAX_LOS, 2) As Double, prevCur As Long
    Dim mux As Double, Sum As Double, i As Long
    For i = MAX_LOS To 0 Step -1
      If prevLos(i, 0) = ErlArg And prevLos(i, 1) = LineArg Then TrfLin2Los = prevLos(i, 2): Exit For
    Next i
    If i < 0 Then
      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      mux = 1: Sum = 1
      For i = 1 To LineArg
        mux = mux * ErlArg / i: Sum = Sum + mux
        If mux > 1E+50 Then mux = mux / 1E+50: Sum = Sum / 1E+50
      Next i
      TrfLin2Los = mux / Sum
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      prevCur = prevCur + 1: If prevCur > MAX_LOS Then prevCur = 0
      prevLos(prevCur, 0) = ErlArg: prevLos(prevCur, 1) = LineArg: prevLos(prevCur, 2) = TrfLin2Los
    End If
  End If
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function TrfLos2Lin(ErlArg As Double, LossArg As Double) As Long
  If ErlArg <= 0 Or LossArg <= 0 Or LossArg >= 1 Then
    TrfLos2Lin = -1
    If ErlArg = 0 Or LossArg = 1 Then TrfLos2Lin = 0
    Exit Function
  Else
    Const MAX_LIN As Long = 5
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Static prevLin(MAX_LIN, 2) As Double, prevCur As Long
    For TrfLos2Lin = MAX_LIN To 0 Step -1
      If prevLin(TrfLos2Lin, 0) = ErlArg And prevLin(TrfLos2Lin, 1) = LossArg Then TrfLos2Lin = prevLin(TrfLos2Lin, 2): Exit For
    Next TrfLos2Lin
    If TrfLos2Lin < 0 Then
      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      TrfLos2Lin = 1
      While (TrfLin2Los(ErlArg, TrfLos2Lin) > LossArg): TrfLos2Lin = TrfLos2Lin + 1: Wend
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      prevCur = prevCur + 1: If prevCur > MAX_LIN Then prevCur = 0
      prevLin(prevCur, 0) = ErlArg: prevLin(prevCur, 1) = LossArg: prevLin(prevCur, 2) = TrfLos2Lin
    End If
  End If
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function LosLin2Trf(LossArg As Double, LineArg As Long) As Double
  If LineArg <= 0 Or LossArg <= 0 Or LossArg >= 1 Then
    LosLin2Trf = -1
    If LineArg = 0 Or LossArg = 0 Then LosLin2Trf = 0
    Exit Function
  Else
    Const MAX_TRF As Long = 5
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Static prevTrf(MAX_TRF, 2) As Double, prevCur As Long
    For LosLin2Trf = MAX_TRF To 0 Step -1
      If prevTrf(LosLin2Trf, 0) = LossArg And prevTrf(LosLin2Trf, 1) = LineArg Then LosLin2Trf = prevTrf(LosLin2Trf, 2): Exit For
    Next LosLin2Trf
    If LosLin2Trf < 0 Then
      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Dim erl As Double, dlt As Double
      erl = 0: dlt = 10
      While (dlt > 0.0001)
        dlt = dlt / 10
        While (TrfLin2Los(erl + dlt, LineArg) < LossArg): erl = erl + dlt: Wend
      Wend
      LosLin2Trf = erl
      If (TrfLin2Los(erl + dlt, LineArg) <= LossArg) Then LosLin2Trf = erl + dlt
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      prevCur = prevCur + 1: If prevCur > MAX_TRF Then prevCur = 0
      prevTrf(prevCur, 0) = LossArg: prevTrf(prevCur, 1) = LineArg: prevTrf(prevCur, 2) = LosLin2Trf
    End If
  End If
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Function Str2Len(CableCode As String) As Double
  Str2Len = (Val(Mid$(CableCode, 4, 3)) * 10 ^ (Val(Mid$(CableCode, 7, 1)) - 1)) / 100
End Function

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Function Len2Str(Optional CableLength As Double = 30) As String
  If CableLength <= 0 Then Len2Str = "0000": Exit Function
  If CableLength <= 0.01 Then Len2Str = "0011": Exit Function
  CableLength = Int(100 * CableLength + 0.5)
  If CableLength > 99900 Then _
    CableLength = (10 ^ (Len(CStr(CableLength)) - 3)) * Int(CableLength / (10 ^ (Len(CStr(CableLength)) - 3)) + 0.5)
  Len2Str = CStr(CableLength): CableLength = Len(Len2Str): Len2Str = Left(Len2Str, 3)
  If CableLength < 3 Then
    Len2Str = String(3 - CableLength, "0") & Len2Str & "1"
  Else: Len2Str = Len2Str & CStr(CableLength - 2): End If
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| (Spr, Spare) |fffd||fffd|:
' - |fffd||fffd||fffd|-|fffd||fffd| (Qty)
' - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (Tat, Turn-around-time) |fffd| |fffd||fffd||fffd||fffd||fffd|
' - MTBF |fffd| |fffd||fffd||fffd||fffd||fffd|
'|fffd||fffd||fffd||fffd| InUse=false, |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|=0
'|fffd||fffd||fffd||fffd| Tat=1, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 1 |fffd||fffd||fffd| Qty>0
'|fffd||fffd||fffd||fffd| Tat>1, |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
' - |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|.|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| 99% |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function QtyTat2Spr(Qty As Long, Tat As Long, Mtbf As Long, Optional InUse As Boolean = True) As Long
  QtyTat2Spr = 0
  If Not InUse Then Exit Function
  If Tat < 1 Then '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Tat=1 |fffd||fffd| % |fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd|
    QtyTat2Spr = Qty * Tat
  ElseIf Tat > 1 Then '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Tat>1 |fffd||fffd| formula
    QtyTat2Spr = Int(Qty * Tat / 8760 / Mtbf + 2.326 * Sqr(Qty * Tat / 8760 / Mtbf) + 0.999)
  Else: QtyTat2Spr = -1 * (Qty > 0): End If '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Tat=1 |fffd||fffd| 1
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Function ngcInfo(sInfoType As String, Optional bAddApostrof As Boolean = True, Optional RefreshCell As String = "") As String
  ngcInfo = ""
  If Not fndIsSheet(ngcCSI) And Not fndIsSheet(ngcPRC) Then Exit Function
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Select Case LCase(sInfoType)
  Case "user"
    ngcInfo = Environ("USERDOMAIN") & "\" & Environ("USERNAME")
  Case "language", "lang"
    ngcInfo = CStr(Sheets(ngcINP).Cells(1, INFL).Value)
  Case "project"
    ngcInfo = CStr(Sheets(ngcINP).Cells(2, INQV).Value)
  Case "specification", "spec"
    ngcInfo = CStr(Sheets(ngcINP).Cells(3, INQV).Value)
  Case "cen", "cenn", "cennum"
    ngcInfo = CStr(Sheets(ngcINP).Cells(4, INQV).Value)
  Case "object"
    If Sheets(ngcINP).Cells(5, INID).Value = "SOLUTION" Then
      ngcInfo = CStr(Sheets(ngcINP).Cells(6, INQV).Value)
    Else: ngcInfo = CStr(Sheets(ngcINP).Cells(5, INQV).Value): End If
  Case "price", "price1"
    ngcInfo = CStr(Sheets(ngcPRC).Cells(4, PRC1).Value)
  Case "price2"
    ngcInfo = CStr(Sheets(ngcPRC).Cells(4, PRC2).Value)
  Case "valute", "valute1"
    ngcInfo = CStr(Sheets(ngcPRC).Cells(4, PRK1).Value)
  Case "valute2"
    ngcInfo = CStr(Sheets(ngcPRC).Cells(4, PRK2).Value)
  Case "pricelist", "pricelist1"
    ngcInfo = CStr(Sheets(ngcPRC).Cells(5, PRC1).Value)
  Case "pricelist2"
    ngcInfo = CStr(Sheets(ngcPRC).Cells(5, PRC2).Value)
  Case "factor", "factor1"
    ngcInfo = CStr(Sheets(ngcPRC).Cells(2, PRC1).Value)
  Case "factor2"
    ngcInfo = CStr(Sheets(ngcPRC).Cells(2, PRC1).Value)
  Case "abc", "abc1"
    ngcInfo = CStr(Sheets(ngcPRC).Cells(3, PRC1).Value)
  Case "abc2"
    ngcInfo = CStr(Sheets(ngcPRC).Cells(4, PRC1).Value)
  Case Else
    Dim iRow As Long, fnd As Range
    iRow = 2
    While iRow > 0
      iRow = iRow + 1
      If Left(Sheets(ngcCSI).Cells(iRow, SPCM).Value, 1) = "T" Then
        If Sheets(ngcCSI).Cells(iRow, SPID).Value = sInfoType Then ngcInfo = CStr(Sheets(ngcCSI).Cells(iRow, SPTV).Value): iRow = 0
      Else: iRow = 0: End If
    Wend
  End Select
  If bAddApostrof Then ngcInfo = """" & Replace(ngcInfo, """", "") & """"
End Function

Public Function ngcInfoSys(sInfoType As String, Optional RefreshCell As String = "") As String
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim sBfr As String, sAns As String, lInfo As Long
  sBfr = String$(256, 0): sAns = ""
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Select Case LCase(sInfoType)
  Case "country", "countryeng"
    sAns = GetLocaleInfo(&H400, &H1002, sBfr, Len(sBfr)) 'LOCALE_SENGCOUNTRY english name of country
    If sAns > 0 Then ngcInfoSys = Left$(sBfr, sAns - 1) Else ngcInfoSys = ""
  Case "countrynative"
    sAns = GetLocaleInfo(&H400, &H8, sBfr, Len(sBfr)) 'LOCALE_SNATIVECTRYNAME native name of country
    If sAns > 0 Then ngcInfoSys = Left$(sBfr, sAns - 1) Else ngcInfoSys = ""
  Case "language", "languageeng"
    sAns = GetLocaleInfo(&H400, &H1001, sBfr, Len(sBfr)) 'LOCALE_SENGLANGUAGE english name of language
    If sAns > 0 Then ngcInfoSys = Left$(sBfr, sAns - 1) Else ngcInfoSys = ""
  Case "languagenative"
    sAns = GetLocaleInfo(&H400, &H4, sBfr, Len(sBfr)) 'LOCALE_SNATIVELANGNAME native name of language
    If sAns > 0 Then ngcInfoSys = Left$(sBfr, sAns - 1) Else ngcInfoSys = ""
  Case Else
    ngcInfoSys = ""
  End Select
End Function

'find weight for code
Function ngcInfoWgt(sCode As String) As String
  Dim sht As Worksheet, fnd As Range
  Set sht = Sheets(ngcPRC)
  Set fnd = sht.Columns(PRID).Find(sCode, LookIn:=xlValues, LookAt:=xlWhole)
  If fnd Is Nothing Then ngcInfoWgt = "" Else ngcInfoWgt = sht.Cells(fnd.Row, PRWT).Value
End Function

'check date of configurator
Function ngcValid(Optional bMsg As Boolean = True) As Boolean
  Static bIsPro As Boolean
  ngcValid = False: If bIsPro Then ngcValid = True: Exit Function
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim tCfg As Date, tReg As Date, sTmp As String
  sTmp = Format(Sheets(ngcVAR).Cells(2, 4).Value, "yyyy.mm.dd")
  If sTmp = "" Then ngcValid = True: Exit Function
  tCfg = DateSerial(Val(Left(sTmp, 4)), Val(Mid(sTmp, 6, 2)), Val(Mid(sTmp, 9, 2)))
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  sTmp = GetSetting(AppName:="NG3cfg", Section:="Date", Key:="LastDate", Default:=Format(Date, "yyyy.mm.dd"))
  tReg = DateSerial(Val(Left(sTmp, 4)), Val(Mid(sTmp, 6, 2)), Val(Mid(sTmp, 9, 2)))
  If Date > tReg Then SaveSetting AppName:="NG3cfg", Section:="Date", Key:="LastDate", Setting:=Format(Date, "yyyy.mm.dd")
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  If tCfg < Date Or tCfg < tReg Then
    If bMsg Then MsgBox "This version is out of date!", vbExclamation
    If (GetKeyState(vbKeyMenu) < 0) And (GetKeyState(vbKeyControl) < 0) Then
      If MsgBox("Do you realise possible consequences of this action?", vbQuestion + vbYesNo) = vbYes Then
        SaveSetting AppName:="NG3cfg", Section:="Date", Key:="LastDate", Setting:=Format(Date, "yyyy.mm.dd")
        ngcValid = True
        bIsPro = True
      End If
    End If
  ElseIf bMsg And (tCfg < Date + 7) Then
    MsgBox "Version expired after " & Format(tCfg, "yyyy.mm.dd") & "." & vbCrLf & "Please check new available version.", vbInformation
    ngcValid = True
  Else: ngcValid = True: End If
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Sub ngcProtect(bProtect As Boolean)
  If Sheets(ngcVAR).Cells(2, 13).Value And bProtect Then
    If Sheets(ngcVAR).ProtectContents Then Sheets(ngcVAR).Unprotect Password:=ngcPWD
    Sheets(ngcVAR).Cells(2, 13).Value = False
    Sheets(ngcVAR).Protect Password:=ngcPWD
  ElseIf (Not Sheets(ngcVAR).Cells(2, 13).Value And Not bProtect) Or Sheets(ngcVAR).ProtectContents Then
    Sheets(ngcVAR).Unprotect Password:=ngcPWD
    Sheets(ngcVAR).Cells(2, 13).Value = True
  End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|/|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Sub ngcFixRow(ByRef wnd As Window)
  Dim act As Window: Set act = ActiveWindow
  wnd.SplitRow = 1
  wnd.Panes(1).Activate
  wnd.ScrollRow = 1
  wnd.SplitRow = 1
  wnd.FreezePanes = True
  act.Activate
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| RGB
Function getRGB(r As Byte, g As Byte, b As Byte) As Long
  getRGB = RGB(r, g, b)
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function getSpecID(inObject As String, Optional defaultID As String = "7000000") As String
  If Application.Calculation = xlCalculationManual Then getSpecID = defaultID: Exit Function
  On Error GoTo getSpecIdError
  '|fffd||fffd||fffd||fffd|
  getSpecID = Right("00000000000" & cnvBase(CStr((Now() - DateSerial(2012, 9, 1) - 0.5) Mod ngcSHFT), cABC10, cABC02), 11)
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim chRus As Variant, chTrs As Variant, sUsr As String, iCur As Integer
  sUsr = Environ("USERNAME")
  chRus = Array(ChrW(1040), ChrW(1041), ChrW(1042), ChrW(1043), ChrW(1044), ChrW(1045), ChrW(1025), ChrW(1046), ChrW(1047), ChrW(1048), ChrW(1049), ChrW(1050), ChrW(1051), ChrW(1052), ChrW(1053), ChrW(1054), ChrW(1055), ChrW(1056), ChrW(1057), ChrW(1058), ChrW(1059), ChrW(1060), ChrW(1061), ChrW(1062), ChrW(1063), ChrW(1064), ChrW(1065), ChrW(1066), ChrW(1067), ChrW(1068), ChrW(1069), ChrW(1070), ChrW(1071), ChrW(1072), ChrW(1073), ChrW(1074), ChrW(1075), ChrW(1076), ChrW(1077), ChrW(1105), ChrW(1078), ChrW(1079), ChrW(1080), ChrW(1081), ChrW(1082), ChrW(1083), ChrW(1084), ChrW(1085), ChrW(1086), ChrW(1087), ChrW(1088), ChrW(1089), ChrW(1090), ChrW(1091), ChrW(1092), ChrW(1093), ChrW(1094), ChrW(1095), ChrW(1096), ChrW(1097), ChrW(1098), ChrW(1099), ChrW(1100), ChrW(1101), ChrW(1102), ChrW(1103))
  chTrs = Array("A", "B", "V", "G", "D", "E", "JO", "ZH", "Z", "I", "J", "K", "L", "M", "N", "O", "P", "R", "S", "T", "U", "F", "KH", "TS", "CH", "SH", "SCH", "''", "Y", "'", "E", "YU", "YA", "a", "b", "v", "g", "d", "e", "jo", "zh", "z", "i", "j", "k", "l", "m", "n", "o", "p", "r", "s", "t", "u", "f", "kh", "ts", "ch", "sh", "sch", "''", "y", "'", "e", "yu", "ya")
  For iCur = LBound(chRus) To UBound(chRus)
    sUsr = Replace(sUsr, chRus(iCur), chTrs(iCur))
  Next iCur
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| cABC26
  iCur = 1: sUsr = UCase(sUsr)
  While iCur <= Len(sUsr)
    If InStr(cABC26, Mid(sUsr, iCur, 1)) < 1 Then
      sUsr = Left(sUsr, iCur - 1) & Mid(sUsr, iCur + 1)
    Else: iCur = iCur + 1: End If
  Wend
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  getSpecID = getSpecID & Right("0000000000000000000" & cnvBase(Left(sUsr & "AAAA", 4), cABC26, cABC02), 19)
  '|fffd||fffd||fffd||fffd||fffd||fffd|
  getSpecID = getSpecID & Right("00000000000" & cnvBase(getCRC11(inObject), cABC16, cABC02), 11)
  'crc5
  getSpecID = getSpecID & Right("00000" & cnvBase(getCRC5(getSpecID), cABC16, cABC02), 5)
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  getSpecID = Right("00000000" & cnvBase(getSpecID, cABC02, cABC56), 8)
getSpecIdError:
  If Err.Number Then getSpecID = defaultID: Err.Clear
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function getSpecNM(inSpecID As String) As String
  If Application.Calculation = xlCalculationManual Then getSpecNM = "": Exit Function
  Dim sTmp As String, iTmp As Integer
  sTmp = Right("00000000000000000000000000000000000000000000000" & cnvBase(inSpecID, cABC56, cABC02), 46)
  iTmp = Int((Now() - DateSerial(2012, 9, 1)) / ngcSHFT)
  'crc5
  If Right(sTmp, 5) = Right("00000" & cnvBase(getCRC5(Left(sTmp, 41)), cABC16, cABC02), 5) Then
    '|fffd||fffd||fffd||fffd||fffd||fffd|
    getSpecNM = "[" & Right("000" & cnvBase(Mid(sTmp, 31, 11), cABC02, cABC16), 3) & "]"
    '|fffd||fffd||fffd|
    getSpecNM = getSpecNM & Right("AAAA" & cnvBase(Mid(sTmp, 12, 19), cABC02, cABC26), 4)
    '|fffd||fffd||fffd||fffd|
    getSpecNM = getSpecNM & ":" & DateSerial(2012, 9, 1) + CInt("0" & cnvBase(Left(sTmp, 11), cABC02, cABC10)) + iTmp * ngcSHFT
  Else: getSpecNM = "": End If
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| CRC32 |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Function getCRC32(strData As String) As String
  Dim CRC32tbl As Variant
  CRC32tbl = Array(&H0, &H77073096, &HEE0E612C, &H990951BA, &H76DC419, &H706AF48F, &HE963A535, &H9E6495A3, &HEDB8832, &H79DCB8A4, &HE0D5E91E, &H97D2D988, _
            &H9B64C2B, &H7EB17CBD, &HE7B82D07, &H90BF1D91, &H1DB71064, &H6AB020F2, &HF3B97148, &H84BE41DE, &H1ADAD47D, &H6DDDE4EB, &HF4D4B551, &H83D385C7, _
            &H136C9856, &H646BA8C0, &HFD62F97A, &H8A65C9EC, &H14015C4F, &H63066CD9, &HFA0F3D63, &H8D080DF5, &H3B6E20C8, &H4C69105E, &HD56041E4, &HA2677172, _
            &H3C03E4D1, &H4B04D447, &HD20D85FD, &HA50AB56B, &H35B5A8FA, &H42B2986C, &HDBBBC9D6, &HACBCF940, &H32D86CE3, &H45DF5C75, &HDCD60DCF, &HABD13D59, _
            &H26D930AC, &H51DE003A, &HC8D75180, &HBFD06116, &H21B4F4B5, &H56B3C423, &HCFBA9599, &HB8BDA50F, &H2802B89E, &H5F058808, &HC60CD9B2, &HB10BE924, _
            &H2F6F7C87, &H58684C11, &HC1611DAB, &HB6662D3D, &H76DC4190, &H1DB7106, &H98D220BC, &HEFD5102A, &H71B18589, &H6B6B51F, &H9FBFE4A5, &HE8B8D433, _
            &H7807C9A2, &HF00F934, &H9609A88E, &HE10E9818, &H7F6A0DBB, &H86D3D2D, &H91646C97, &HE6635C01, &H6B6B51F4, &H1C6C6162, &H856530D8, &HF262004E, _
            &H6C0695ED, &H1B01A57B, &H8208F4C1, &HF50FC457, &H65B0D9C6, &H12B7E950, &H8BBEB8EA, &HFCB9887C, &H62DD1DDF, &H15DA2D49, &H8CD37CF3, &HFBD44C65, _
            &H4DB26158, &H3AB551CE, &HA3BC0074, &HD4BB30E2, &H4ADFA541, &H3DD895D7, &HA4D1C46D, &HD3D6F4FB, &H4369E96A, &H346ED9FC, &HAD678846, &HDA60B8D0, _
            &H44042D73, &H33031DE5, &HAA0A4C5F, &HDD0D7CC9, &H5005713C, &H270241AA, &HBE0B1010, &HC90C2086, &H5768B525, &H206F85B3, &HB966D409, &HCE61E49F, _
            &H5EDEF90E, &H29D9C998, &HB0D09822, &HC7D7A8B4, &H59B33D17, &H2EB40D81, &HB7BD5C3B, &HC0BA6CAD, &HEDB88320, &H9ABFB3B6, &H3B6E20C, &H74B1D29A, _
            &HEAD54739, &H9DD277AF, &H4DB2615, &H73DC1683, &HE3630B12, &H94643B84, &HD6D6A3E, &H7A6A5AA8, &HE40ECF0B, &H9309FF9D, &HA00AE27, &H7D079EB1, _
            &HF00F9344, &H8708A3D2, &H1E01F268, &H6906C2FE, &HF762575D, &H806567CB, &H196C3671, &H6E6B06E7, &HFED41B76, &H89D32BE0, &H10DA7A5A, &H67DD4ACC, _
            &HF9B9DF6F, &H8EBEEFF9, &H17B7BE43, &H60B08ED5, &HD6D6A3E8, &HA1D1937E, &H38D8C2C4, &H4FDFF252, &HD1BB67F1, &HA6BC5767, &H3FB506DD, &H48B2364B, _
            &HD80D2BDA, &HAF0A1B4C, &H36034AF6, &H41047A60, &HDF60EFC3, &HA867DF55, &H316E8EEF, &H4669BE79, &HCB61B38C, &HBC66831A, &H256FD2A0, &H5268E236, _
            &HCC0C7795, &HBB0B4703, &H220216B9, &H5505262F, &HC5BA3BBE, &HB2BD0B28, &H2BB45A92, &H5CB36A04, &HC2D7FFA7, &HB5D0CF31, &H2CD99E8B, &H5BDEAE1D, _
            &H9B64C2B0, &HEC63F226, &H756AA39C, &H26D930A, &H9C0906A9, &HEB0E363F, &H72076785, &H5005713, &H95BF4A82, &HE2B87A14, &H7BB12BAE, &HCB61B38, _
            &H92D28E9B, &HE5D5BE0D, &H7CDCEFB7, &HBDBDF21, &H86D3D2D4, &HF1D4E242, &H68DDB3F8, &H1FDA836E, &H81BE16CD, &HF6B9265B, &H6FB077E1, &H18B74777, _
            &H88085AE6, &HFF0F6A70, &H66063BCA, &H11010B5C, &H8F659EFF, &HF862AE69, &H616BFFD3, &H166CCF45, &HA00AE278, &HD70DD2EE, &H4E048354, &H3903B3C2, _
            &HA7672661, &HD06016F7, &H4969474D, &H3E6E77DB, &HAED16A4A, &HD9D65ADC, &H40DF0B66, &H37D83BF0, &HA9BCAE53, &HDEBB9EC5, &H47B2CF7F, &H30B5FFE9, _
            &HBDBDF21C, &HCABAC28A, &H53B39330, &H24B4A3A6, &HBAD03605, &HCDD70693, &H54DE5729, &H23D967BF, &HB3667A2E, &HC4614AB8, &H5D681B02, &H2A6F2B94, _
            &HB40BBE37, &HC30C8EA1, &H5A05DF1B, &H2D02EF8D)
  Dim iCrc As Long, iLen  As Long, iCur As Long, iTmp As Long, bTmp(0 To 3) As Byte
  iCrc = &HFFFFFFFF: iLen = Len(strData)
  For iCur = 1 To iLen
    RtlMemCopy bTmp(0), iCrc, 4
    iTmp = 0
    RtlMemCopy iTmp, bTmp(1), 3
    iCrc = CRC32tbl(Asc(Mid(strData, iCur, 1)) Xor iCrc And &HFF) Xor (iTmp)
  Next iCur
  iCrc = Not iCrc
  getCRC32 = Hex(iCrc)
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| CRC16 |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Function getCRC16(strData As String) As String
  Dim iM As Integer, iPos As Integer, iCrc As Integer
  Dim iCur As Integer, iTmp As Integer
  iCrc = &HFFFF
  For iPos = 1 To Len(strData) Step 2
    iCur = Val("&H" + Mid(strData, iPos, 2))
    iCrc = iCrc Xor iCur
    For iCur = 1 To 8
      iM = 0: If iCrc / 2 <> Int(iCrc / 2) Then iM = &HA001
      iCrc = Int(iCrc / 2) And &H7FFF: iCrc = iCrc Xor iM
    Next iCur
  Next iPos
  getCRC16 = Hex$(iCrc)
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| CRC11 |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Function getCRC11(sIn As String) As String
  Const cPoly As Integer = 901 '&B[1]01110000101
  Const cInit As Integer = 2047 '&B11111111111
  Dim iReg As Integer, sBin As String, bFlag As Boolean
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For iReg = 1 To Len(sIn)
    sBin = sBin & Right("00000000" & cnvBase(Asc(Mid(sIn, iReg, 1)), cABC10, cABC02), 8)
  Next iReg
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  iReg = cInit: bFlag = False
  While Len(sBin) > 0
    bFlag = (iReg > 1023) Xor (Left(sBin, 1) = "1")
    iReg = iReg * 2 Mod 2048
    If bFlag Then iReg = iReg Xor cPoly
    sBin = Mid(sBin, 2)
  Wend
  getCRC11 = Hex(iReg)
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| CRC8 |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Function getCRC8(strData As String) As String
  Dim CRC8tbl As Variant
  CRC8tbl = Array(&H0, &H7, &HE, &H9, &H1C, &H1B, &H12, &H15, &H38, &H3F, &H36, &H31, &H24, &H23, &H2A, &H2D, _
             &H70, &H77, &H7E, &H79, &H6C, &H6B, &H62, &H65, &H48, &H4F, &H46, &H41, &H54, &H53, &H5A, &H5D, _
             &HE0, &HE7, &HEE, &HE9, &HFC, &HFB, &HF2, &HF5, &HD8, &HDF, &HD6, &HD1, &HC4, &HC3, &HCA, &HCD, _
             &H90, &H97, &H9E, &H99, &H8C, &H8B, &H82, &H85, &HA8, &HAF, &HA6, &HA1, &HB4, &HB3, &HBA, &HBD, _
             &HC7, &HC0, &HC9, &HCE, &HDB, &HDC, &HD5, &HD2, &HFF, &HF8, &HF1, &HF6, &HE3, &HE4, &HED, &HEA, _
             &HB7, &HB0, &HB9, &HBE, &HAB, &HAC, &HA5, &HA2, &H8F, &H88, &H81, &H86, &H93, &H94, &H9D, &H9A, _
             &H27, &H20, &H29, &H2E, &H3B, &H3C, &H35, &H32, &H1F, &H18, &H11, &H16, &H3, &H4, &HD, &HA, _
             &H57, &H50, &H59, &H5E, &H4B, &H4C, &H45, &H42, &H6F, &H68, &H61, &H66, &H73, &H74, &H7D, &H7A, _
             &H89, &H8E, &H87, &H80, &H95, &H92, &H9B, &H9C, &HB1, &HB6, &HBF, &HB8, &HAD, &HAA, &HA3, &HA4, _
             &HF9, &HFE, &HF7, &HF0, &HE5, &HE2, &HEB, &HEC, &HC1, &HC6, &HCF, &HC8, &HDD, &HDA, &HD3, &HD4, _
             &H69, &H6E, &H67, &H60, &H75, &H72, &H7B, &H7C, &H51, &H56, &H5F, &H58, &H4D, &H4A, &H43, &H44, _
             &H19, &H1E, &H17, &H10, &H5, &H2, &HB, &HC, &H21, &H26, &H2F, &H28, &H3D, &H3A, &H33, &H34, _
             &H4E, &H49, &H40, &H47, &H52, &H55, &H5C, &H5B, &H76, &H71, &H78, &H7F, &H6A, &H6D, &H64, &H63, _
             &H3E, &H39, &H30, &H37, &H22, &H25, &H2C, &H2B, &H6, &H1, &H8, &HF, &H1A, &H1D, &H14, &H13, _
             &HAE, &HA9, &HA0, &HA7, &HB2, &HB5, &HBC, &HBB, &H96, &H91, &H98, &H9F, &H8A, &H8D, &H84, &H83, _
             &HDE, &HD9, &HD0, &HD7, &HC2, &HC5, &HCC, &HCB, &HE6, &HE1, &HE8, &HEF, &HFA, &HFD, &HF4, &HF3)
  Dim iCrc As Long, iLen  As Long, iCur As Long, iTmp As Long, bTmp(0 To 3) As Byte
  iCrc = &HFF: iLen = Len(strData)
  For iCur = 1 To iLen
    iCrc = CRC8tbl(iCrc Xor Asc(Mid(strData, iCur, 1)))
  Next iCur
  getCRC8 = Hex(iCrc)
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| CRC5 |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Function getCRC5(sIn As String) As String
  Const cPoly As Integer = 9 '&B[1]01001
  Const cInit As Integer = 9 '&B01001
  Dim iReg As Integer, sBin As String, bFlag As Boolean
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For iReg = 1 To Len(sIn)
    sBin = sBin & Right("00000000" & cnvBase(Asc(Mid(sIn, iReg, 1)), cABC10, cABC02), 8)
  Next iReg
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  iReg = cInit: bFlag = False
  While Len(sBin) > 0
    bFlag = (iReg > 15) Xor (Left(sBin, 1) = "1")
    iReg = iReg * 2 Mod 32
    If bFlag Then iReg = iReg Xor cPoly
    sBin = Mid(sBin, 2)
  Wend
  getCRC5 = Hex(iReg)
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function getWebFile(fromURL As String, toFile As String) As Boolean
  On Error GoTo getWebFileError
  Dim httpFile As Object, sBar As Variant
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Dir(Left(toFile, InStrRev(toFile, "\")), vbDirectory) = "" Then MkDir Left(toFile, InStrRev(toFile, "\"))
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  sBar = Application.StatusBar
  Application.StatusBar = "Downloading to " & toFile
  Set httpFile = CreateObject("MSXML2.XMLHTTP.3.0")
  httpFile.Open "GET", fromURL, False
  httpFile.Send
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  Application.StatusBar = "Saving to " & toFile
  With CreateObject("ADODB.Stream")
    .Type = 1: .Mode = 3: .Open: .Write httpFile.ResponseBody
    .SaveToFile toFile, 2: .Close
  End With
getWebFileError:
  Set httpFile = Nothing
  If Err.Number Then
    getWebFile = False
    Err.Clear
  Else: getWebFile = True: End If
  Application.StatusBar = sBar
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function cnvBase(sIn As String, abcFrom As String, abcTo As String) As String
  Dim iD As Variant, iM As Variant, iPos As Variant, iCur As Variant
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  iPos = Len(sIn): iD = 0: iM = 1
  While iPos > 0
    iCur = InStr(abcFrom, Mid(sIn, iPos, 1))
    If iCur > 0 Then
      iD = iD + (iCur - 1) * iM: iM = iM * Len(abcFrom)
    Else: cnvBase = "#Err!": Exit Function: End If
    iPos = iPos - 1
  Wend
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  cnvBase = ""
  While iD > 0
    iCur = iD - Len(abcTo) * Int(iD / Len(abcTo))
    cnvBase = Mid(abcTo, iCur + 1, 1) & cnvBase
    iD = Int(iD / Len(abcTo))
  Wend
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Function cnvToSav(vIn As Variant) As String
  Select Case VarType(vIn)
  Case vbEmpty, vbNull
    cnvToSav = ""
  Case vbByte, vbInteger, vbLong, vbSingle, vbDouble, vbDecimal, vbCurrency
    cnvToSav = str(vIn)
  Case vbDate
    cnvToSav = Format(Date, "Short Date")
  Case vbString
    cnvToSav = vIn
  Case vbBoolean
    cnvToSav = -1 * vIn
  Case vbVariant
    cnvToSav = "Unknown"
  Case vbDataObject, vbUserDefinedType, vbObject, vbArray
    cnvToSav = "Object/array"
  Case vbError
    If IsObject(vIn) Then
      cnvToSav = vIn.Description
    Else: cnvToSav = CStr(vIn): End If
  Case Else
    cnvToSav = "Unknown"
  End Select
  cnvToSav = Trim(Replace(cnvToSav, ";", " "))
End Function
Attribute VB_Name = "C0_Constants"
'(c)2010 Terekhov Alexey. All rights reserved.
'Phone: +38631334953, Skype:terekhov_alexey
Option Explicit

Public Const ngcVER As String = "NG4.28"
Public Const ngcDAT As String = "2013.08.11 19:47"
Public Const ngcVLD As String = "2014.03.01"
Public Const ngcPWD As String = "ant"
Public Const ngcCRP As Boolean = True

Public Const ngcCFG As String = "NG4cfg"
Public Const ngcINP As String = "Input"
Public Const ngcCSI As String = "Codes"
Public Const ngcPRC As String = "Prices"
Public Const ngcVAR As String = "VarX"

Public Const wssURL As String = "http://inet.iskratel.si/"
Public Const webURL As String = "ftp://partner:par123ner@ftp.iskratel.si/Partner/"

'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Public Const CLCM As Long = 1 'command
Public Const CLID As Long = 2 'ident

Public Const CLQ4 As Long = 4 '[Qx] var
Public Const CLQ5 As Long = 5 '[Qx] write
Public Const CLQ6 As Long = 6 '[Qx] read
Public Const CLQ7 As Long = 7 '[Qx] default
Public Const CLQ8 As Long = 8 '[Qx] hide
Public Const CLQ9 As Long = 9 '[Qx] message

Public Const CLT4 As Long = 4 '[TD] read
Public Const CLT5 As Long = 5 '[TD] write

Public Const CLP4 As Long = 4 '[PR] show

Public Const CLC4 As Long = 4 '[CD] offer
Public Const CLC5 As Long = 5 '[CD] order
Public Const CLC6 As Long = 6 '[CD] read

Public Const CLE4 As Long = 4 '[EX] value

Public Const CLVH As Long = 4 '[Vx] InUse
Public Const CLVT As Long = 5 '[Vx] Template
Public Const CLVP As Long = 6 '[Vx] Parent

Public Const CLWH As Long = 4 '[Wx] InUse
Public Const CLWT As Long = 5 '[Wx] Template
Public Const CLWA As Long = 6 '[Wx] bookmark/after

Public Const CLWW As Long = 5 '[WQ] write
Public Const CLWR As Long = 6 '[WQ] read
Public Const CLWD As Long = 7 '[WQ] dflt
Public Const CLWQ As Long = 8 '[WQ] text

Public Const CLO4 As Long = 4 '[OP] value
Public Const CLO5 As Long = 5 '[OP] text

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const INCM As Long = 5 'command
Public Const INID As Long = 6 'ident
Public Const INFL As Long = 7 'filter
Public Const INTM As Long = 8 'temp

Public Const INQD As Long = 1 'default
Public Const INQV As Long = 2 'value
Public Const INQT As Long = 3 'text
Public Const INQE As Long = 4 'comment

Public Const INIV As Long = 2 'value
Public Const INIT As Long = 3 'text
Public Const INIE As Long = 4 'vbLf

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const SPTT As Long = 1 'text
Public Const SPTL As Long = 2 'appearance (line)
Public Const SPTV As Long = 3 'value

Public Const SPCC As Long = 1 'code
Public Const SPCT As Long = 2 'text
Public Const SPCV As Long = 3 'qty/value
Public Const SPC1 As Long = 4 'price 1
Public Const SPC2 As Long = 5 'price 2

Public Const SPQV As Long = 1 'value
Public Const SPQT As Long = 2 'text
Public Const SPQE As Long = 3 'comment
Public Const SPQD As Long = 9 'default

Public Const SPCM As Long = 6 'command
Public Const SPID As Long = 7 'ident
Public Const SPFL As Long = 8 'filter
Public Const SPTM As Long = 9 'temp

'|fffd||fffd||fffd||fffd|
Public Const PRID As Long = 1 'code
Public Const PRTX As Long = 2 'text
Public Const PRCB As Long = 3 'cable
Public Const PRQ1 As Long = 4 'qty
Public Const PRQ2 As Long = 5 'qty w/o "H"
Public Const PRC1 As Long = 6
Public Const PRK1 As Long = 7
Public Const PRC2 As Long = 8
Public Const PRK2 As Long = 9
Public Const PRAB As Long = 10 'abc
Public Const PRDQ As Long = 11 'dsc qty
Public Const PRWT As Long = 12 'weight
Public Const PRVL As Long = 13 'volume
Public Const PRST As Long = 14 'status
Public Const PRTP As Long = 15 'sw/hw

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Const VVID As Long = 1 'ID
Public Const VVTM As Long = 2 'Template
Public Const VVCM As Long = 3 'Command
Public Const VVPT As Long = 4 'Parent
Public Const VVST As Long = 5  'start of additional commands

'|fffd||fffd||fffd||fffd||fffd||fffd|
Public Const VWID As Long = 1 'ID
Public Const VWTM As Long = 2 'Template
Public Const VWCM As Long = 3 'Command
Public Const VWPT As Long = 4 'Parent
Public Const VWST As Long = 5 'start of additional commands
Public Const VWT1 As Long = 5 'text
Public Const VWT2 As Long = 6 'description

Attribute VB_Name = "C1_Compiler"
'(c)2010 Terekhov Alexey. All rights reserved.
'Phone: +38631334953, Skype:terekhov_alexey
Option Explicit

Public shtV As Worksheet

'create configurator
Sub ngcCreate(Optional dvlpVisible As Boolean)
Attribute ngcCreate.VB_Description = "NG4 by Terekhov Alexey 2010 (c)"
Attribute ngcCreate.VB_ProcData.VB_Invoke_Func = " \n14"
  Dim optQS As String, optQR As String, optTD As String, optCD As String, optCR As String, optPR As String, optEX As String, optVS As String, optWD As String
  Dim oCur As Object, iCur As Integer, sMsg As String
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Not fndIsSheet(ngcVAR) Then Exit Sub
  iCur = 0: For Each oCur In Workbooks
    If oCur.VBProject.Name = "NG4byTA" Then iCur = iCur + 1
  Next oCur
  If iCur > 1 Then If MsgBox("More than one configurator is open." & vbCrLf & "Do you want to continue?", vbQuestion + vbYesNoCancel) <> vbYes Then Exit Sub
  Set shtV = Sheets(ngcVAR)
  ngcWinsBySide bSingle:=True
  bAFoff = True: sMsg = ""
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  On Error GoTo ngcCreateError
  'Application.Cursor = xlWait
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
  Application.EnableEvents = False
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  ngcClear bInt:=True
  Application.CalculateFullRebuild
  ngcCheck sErr:=sMsg
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If sMsg = "" Then ngcAnalyse optQS:=optQS, optQR:=optQR, optTD:=optTD, optCD:=optCD, optCR:=optCR, optPR:=optPR, optEX:=optEX, optVS:=optVS, optWD:=optWD, sErr:=sMsg
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If sMsg = "" Then ngcCreateQS optQS:=optQS, optQR:=optQR, optPR:=optPR, optEX:=optEX, sErr:=sMsg
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  optPR = "": optEX = ""
  If sMsg = "" Then ngcCreatePR optCD:=optCD, indCD:=optPR, sErr:=sMsg 'optPR |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If sMsg = "" Then ngcCreateCD optTD:=optTD, optQS:=optQS, optQR:=optQR, optCD:=optCD, indCD:=optPR, optCR:=optCR, sErr:=sMsg
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  optQS = "": optQR = "": optPR = "": optCR = "": optTD = "": optCD = ""
  If sMsg = "" Then ngcCreateVW optVS:=optVS, optWD:=optWD, sErr:=sMsg
  
ngcCreateError:
  Application.StatusBar = "Finalizing configurator..."
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  shtV.Cells(2, 3).Value = Format(Now(), "dd.mm.yyyy hh:mm")
  shtV.Cells(2, 6).Value = Environ("USERDOMAIN") & "\" & Environ("USERNAME")
  shtV.Cells(2, 11).Value = Int(Val(shtV.Cells(2, 11).Value)) + 1 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  shtV.Cells(2, 17).Value = False 'show changes
  shtV.Cells(2, 18).Value = False 'show variable
  shtV.Cells(2, 19).Value = False 'show order codes
  shtV.Cells(2, 21).Value = False 'show CENs
  shtV.Cells(2, 24).Value = False '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
  If Err.Number = 0 And sMsg = "" And LCase(Right(shtV.Parent.Name, 5)) = ".xltm" Then
    shtV.Cells(2, 2).Value = Left(shtV.Parent.Name, Len(shtV.Parent.Name) - 5)
    If DateSerial(Year(Now()), Month(Now()) + 3, 1) > shtV.Cells(2, 4).Value Then shtV.Cells(2, 4).Value = DateSerial(Year(Now()), Month(Now()) + 3, 1)
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Set shtV = Nothing
  DoEvents
  Application.CalculateFullRebuild
  Application.Calculation = xlCalculationAutomatic
  Application.EnableEvents = True
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Err.Number = 0 And sMsg = "" Then
    Sheets(ngcCSI).Activate
    Sheets(ngcCSI).Cells.EntireRow.AutoFit
    Sheets(ngcINP).Activate
    Sheets(ngcINP).Cells.EntireRow.AutoFit
    ngcAFcreate
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Application.ScreenUpdating = True
  Application.StatusBar = False
  Application.Cursor = xlDefault
  InvalidateControl '|fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Invalidate
  If Err.Number <> 0 Then
    ngcMessage.ManualShow " - " & Err.Description & "(" & CStr(Err.Number) & ")", "An error occur during compilation:"
  Else
    If sMsg = "" Then ngcCheck sErr:=sMsg
    If sMsg <> "" Then ngcMessage.ManualShow sMsg, "Please fix following error(s) and compile again:"
  End If
End Sub

'clear configurator
Public Sub ngcClear(bInt As Boolean)
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Set shtV = Nothing
  If fndIsSheet(ngcVAR) Then Set shtV = Sheets(ngcVAR)
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.Cursor = xlWait
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
  ngcModulesShow bShow:=True
  Dim sht As Worksheet, fnd As Range, iSht As Long
  Dim iRow As Long, iEnd As Long, s As String
  'clear configurator data
  Application.StatusBar = "Clearing modules..."
  Application.DisplayAlerts = False
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| ngcVar
  shtV.Rows(CStr(31) & ":" & CStr(shtV.Cells.SpecialCells(xlCellTypeLastCell).Row + 1)).Delete
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  iSht = Sheets.Count
  While iSht > 0
    Set sht = Sheets(iSht)
    'clear read data on calculation sheets
    If sht.Name = ngcINP Or sht.Name = ngcCSI Or sht.Name = ngcPRC Then
      sht.Delete
    ElseIf sht.Name = ngcVAR Then
      sht.Range("C30:Y30").ClearContents
      sht.Rows("31:" & CStr(sht.Cells.SpecialCells(xlCellTypeLastCell).Row + 1)).Delete
      sht.Cells(30, 8).Value = False: sht.Cells(30, 9).Value = False: sht.Cells(30, 10).Value = False
    ElseIf Left(sht.Name, 1) = "." Then
      sht.Cells.EntireRow.Hidden = False
      iEnd = sht.Cells.SpecialCells(xlCellTypeLastCell).Row
      For iRow = 1 To iEnd
        If IsError(sht.Cells(iRow, CLCM).Value) Then
          'no actions
        ElseIf sht.Cells(iRow, CLCM).FormulaR1C1 = "" Then
          'no actions
        ElseIf sht.Cells(iRow, CLCM).FormulaR1C1 Like "*[[]Q[SBALE][]]*" Then
          sht.Cells(iRow, CLQ4).Value = ""
          sht.Cells(iRow, CLQ6).Value = ""
        ElseIf sht.Cells(iRow, CLCM).FormulaR1C1 Like "*[[]QI[]]*[#]*" Then
          sht.Cells(iRow, CLQ6).Value = ""
        ElseIf sht.Cells(iRow, CLCM).FormulaR1C1 Like "*[[]QR[]]*" Then
          sht.Cells(iRow, CLQ4).Value = ""
        ElseIf sht.Cells(iRow, CLCM).FormulaR1C1 Like "*[[]C[DK][]]r*" Then
          sht.Cells(iRow, CLC6).Value = ""
        ElseIf sht.Cells(iRow, CLCM).FormulaR1C1 Like "*[[]CR[]]*" Then
          sht.Cells(iRow, CLC4).Value = ""
        ElseIf sht.Cells(iRow, CLCM).FormulaR1C1 Like "*[[]CI[]]r*" Then
          sht.Cells(iRow, CLC4).Value = ""
        ElseIf sht.Cells(iRow, CLCM).FormulaR1C1 Like "*[[]T[DBAL][]]*" Then
          sht.Cells(iRow, CLT4).Value = ""
        ElseIf sht.Cells(iRow, CLCM).FormulaR1C1 Like "*[[]CN[]]*" Then
          sht.Cells(iRow, CLT4).Value = ""
        ElseIf sht.Cells(iRow, CLCM).FormulaR1C1 Like "*[[]EX[]]*" Then
          If LCase(sht.Cells(iRow, CLID).Value) <> "mspec" Then
            sht.Cells(iRow, CLE4).Value = False
            If Not shtV Is Nothing Then
              Set fnd = shtV.Rows(4).EntireRow.Find(What:=sht.Cells(iRow, CLID).Value, LookIn:=xlValues, LookAt:=xlWhole)
              If Not fnd Is Nothing Then sht.Cells(iRow, CLE4).Value = IIf(fnd.Offset(1, 0).Value, True, False)
            End If
          Else: sht.Cells(iRow, CLE4).FormulaR1C1 = 0: End If
        ElseIf sht.Cells(iRow, CLCM).FormulaR1C1 Like "*[[]WQ[]]*" Then
          sht.Cells(iRow, CLWR).Value = ""
        End If
      Next iRow
    End If
    iSht = iSht - 1
  Wend
  Application.DisplayAlerts = True
  Application.StatusBar = False
  'end
  If Not bInt Then
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.Cursor = xlDefault
  End If
End Sub

'check calculation sheets
Public Sub ngcCheck(ByRef sErr As String)
  Application.StatusBar = "Check modules..."
  Dim sht As Worksheet, fnd As Range, sAdr As String
  For Each sht In Sheets
    If Left(sht.Name, 1) = "." Then
      Set fnd = sht.Cells.Find(What:="#*", LookIn:=xlValues, LookAt:=xlWhole)
      If Not fnd Is Nothing Then
        sAdr = fnd.Address
        While sAdr <> ""
          If IsError(fnd) Then sErr = sErr & ";'" & sht.Name & "'!r" & CStr(fnd.Row) & "c" & CStr(fnd.Column) & " - error in formula"
          Set fnd = sht.Cells.FindNext(fnd)
          If Not fnd Is Nothing Then sAdr = "" Else If fnd.Address = sAdr Then sAdr = ""
        Wend
      End If
    End If
  Next sht
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Application.StatusBar = False
End Sub

'analize modules
Private Sub ngcAnalyse(ByRef optQS As String, optQR As String, ByRef optTD As String, ByRef optCD As String, ByRef optCR As String, ByRef optPR As String, ByRef optEX As String, ByRef optVS As String, ByRef optWD As String, ByRef sErr As String)
  Dim sht As Worksheet, iSht As Long, iQG As Long, iCG As Long, sCG As String
  Dim iRow As Long, iCur As Long, sStr As String
  Dim iTmp As Long, iTmp2 As Long, sTmp As String, bTmp As Boolean
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.StatusBar = "Analyse modules..."
  optQS = ";QG:GENERAL,;": optQR = ";": optTD = ";"
  optCD = ";": optCR = ";": optPR = ""
  iSht = 2
  While shtV.Cells(4, iSht).Value <> ""
    If fndIsSheet(shtV.Cells(4, iSht).Value) And shtV.Cells(5, iSht).Value Then
      iCG = 0: sCG = "": iQG = InStr(2, optQS, ";QG:")
      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Set sht = Sheets(shtV.Cells(4, iSht).Value)
      For iRow = 1 To sht.Cells.SpecialCells(xlCellTypeLastCell).Row
        If Not IsError(sht.Cells(iRow, CLCM).Value) Then
          If sht.Cells(iRow, CLCM).HasFormula Then sht.Cells(iRow, CLCM).Font.Color = -65536 Else sht.Cells(iRow, CLCM).Font.ColorIndex = xlAutomatic
          '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          Select Case Left(sht.Cells(iRow, CLCM).Value, 4)
          Case "", "[RM]", "[OP]", "[*/]", "[/*]"
            'no actions
          Case "[ST]"
            Exit For
          Case "[CD]", "[CK]", "[CI]" ';QG:ID,from1,from2;QS:ID,from1,from2,from3,;
            If Left(sht.Cells(iRow, CLCM).Value, 4) = "[CI]" Then
              If InStr(Mid(sht.Cells(iRow, CLCM).Value, 5), "r") > 0 Then
                '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
                sStr = escID(sht.Cells(iRow, CLID).Value, 0, sht.Cells(iRow, CLID), sErr) & ","
                iCur = InStr(optCR, ";" & sStr)
                If iCur > 0 Then
                  iCur = InStr(iCur + 1, optCR, ";") - 1
                  optCR = Left(optCR, iCur) & "'" & sht.Name & "'!r" & CStr(iRow) & "c" & Mid(optCR, iCur)
                Else: optCR = optCR & sStr & "'" & sht.Name & "'!r" & CStr(iRow) & "c,;": End If
              End If
              sTmp = "CI:" & sht.Cells(iRow, CLID).Value
            Else
              sTmp = IIf((sht.Cells(iRow, CLC4).FormulaR1C1 = "" Or sht.Cells(iRow, CLC4).FormulaR1C1 = "0") And _
                     (sht.Cells(iRow, CLC5).FormulaR1C1 <> "=" And sht.Cells(iRow, CLC5).FormulaR1C1 <> "'="), "V", "F") & _
                     IIf(Mid(sht.Cells(iRow, CLCM).Value, 5) = "s", "S", IIf(Mid(sht.Cells(iRow, CLCM).Value, 5) = "m", "M", "C")) & ":" & _
                     sht.Cells(iRow, CLID).Value
            End If
            '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
            iCur = fndInRng(sht.Rows(iRow), "^^*")
            If iCur > 0 Then
              bTmp = False '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              iCur = InStr(optCD, ";CG:" & escID(Mid(sht.Cells(iRow, iCur).Value, 3), 0, sht.Cells(iRow, iCur), sErr) & ",")
              iTmp = InStr(iCur + 1, optCD, ";CG:"): If iTmp = 0 Then iTmp = Len(optCD)
            Else
              bTmp = True '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              iCur = InStrRev(optCD, ";CG:", IIf(iCG, iCG, 1))
              iTmp = iCG
            End If
            '|fffd||fffd||fffd||fffd||fffd||fffd|
            If iCur > 0 Then
              If Mid(sht.Cells(iRow, CLCM).Value, 5) = "s" Or Mid(sht.Cells(iRow, CLCM).Value, 5) = "m" Then
                iCur = InStr(iCur, optCD, ";" & sTmp & ":")
              Else: iCur = 0: End If
              If iCur > 0 And iCur < iTmp Then
                iCur = InStr(iCur + 1, optCD, ";") - 1
                sStr = "'" & sht.Name & "'!r" & CStr(iRow) & "c"
              Else
                iCur = iTmp
                If bTmp Then 'And sCG <> ""
                  If sCG = "" Then
                    sStr = sTmp & ",'" & sht.Name & "'!r" & CStr(iRow) & "c,"
                    sErr = sErr & ";'" & sht.Name & "'!r" & CStr(iRow) & "c1 - unknown CG"
                  Else: sStr = sTmp & ":" & sCG & ",'" & sht.Name & "'!r" & CStr(iRow) & "c,": End If
                Else
                  iTmp = InStrRev(optCD, ",", InStr(InStrRev(optCD, ";CG:", iCur) + 1, optCD, ";") - 2) + 1
                  sStr = sTmp & ":" & Mid(optCD, iTmp, InStr(iTmp, optCD, ",") - iTmp) & ",'" & sht.Name & "'!r" & CStr(iRow) & "c,"
                End If
              End If
              optCD = Left(optCD, iCur) & sStr & Mid(optCD, iCur)
              If iCur <= iCG Then iCG = iCG + Len(sStr) + 1
            Else: sErr = sErr & ";'" & sht.Name & "'!r" & CStr(iRow) & "c1 - unknown CG": End If
            '&& command
            iTmp2 = fndInRng(sht.Rows(iRow), "&&*")
            If iTmp2 > 0 Then
              sTmp = IIf((sht.Cells(iRow, CLC4).FormulaR1C1 = "" Or sht.Cells(iRow, CLC4).FormulaR1C1 = "0") And _
                     (sht.Cells(iRow, CLC5).FormulaR1C1 <> "=" And sht.Cells(iRow, CLC5).FormulaR1C1 <> "'="), "V", "F") & _
                     "M" & ":" & escID(sht.Cells(iRow, CLID).Value, 0, sht.Cells(iRow, CLID), sErr)
              '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
              iCur = InStr(optCD, ";CG:" & escID(Mid(sht.Cells(iRow, iTmp2).Value, 3), 0, sht.Cells(iRow, iTmp2), sErr) & ",")
              If iCur > 0 Then
                iTmp = InStr(iCur + 1, optCD, ";CG:"): If iTmp = 0 Then iTmp = Len(optCD) '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
                iCur = InStr(iCur, optCD, ";" & sTmp & ":")
                If iCur > 0 And iCur < iTmp Then
                  iCur = InStr(iCur + 1, optCD, ";") - 1
                  sStr = "'" & sht.Name & "'!r" & CStr(iRow) & "c" & CStr(iTmp2 + 1)
                Else
                  iCur = iTmp
                  iTmp = InStrRev(optCD, ",", InStr(InStrRev(optCD, ";CG:", iCur) + 1, optCD, ";") - 2) + 1
                  sStr = sTmp & ":" & Mid(optCD, iTmp, InStr(iTmp, optCD, ",") - iTmp) & ",'" & sht.Name & "'!r" & CStr(iRow) & "c" & CStr(iTmp2 + 1) & ","
                End If
                optCD = Left(optCD, iCur) & sStr & Mid(optCD, iCur)
                If iCur <= iCG Then iCG = iCG + Len(sStr) + 1
              Else: sErr = sErr & ";'" & sht.Name & "'!r" & CStr(iRow) & "c1 - unknown CG": End If
            End If
          Case "[QS]", "[QB]", "[QA]", "[QE]", "[QI]", "[QL]"
            iCur = InStr(optQS, ";QS:" & escID(sht.Cells(iRow, CLID).Value, 0, sht.Cells(iRow, CLID), sErr) & ",")
            If iCur > 0 Then
              iCur = InStr(iCur + 1, optQS, ";") - 1
              sStr = "'" & sht.Name & "'!r" & CStr(iRow) & "c"
              optQS = Left(optQS, iCur) & sStr & Mid(optQS, iCur)
              If iCur <= iQG Then iQG = iQG + Len(sStr) + 1
            Else
              sStr = "QS:" & escID(sht.Cells(iRow, CLID).Value, 0, sht.Cells(iRow, CLID), sErr) & ",'" & sht.Name & "'!r" & CStr(iRow) & "c" & ","
              iCur = fndInRng(sht.Rows(iRow), "^^*")
              If iCur > 0 Then
                iCur = InStr(optQS, IIf(Left(sht.Cells(iRow, CLCM).Value, 4) = "[QL]", ";CG:", ";QG:") & escID(Mid(sht.Cells(iRow, iCur).Value, 3), 0, sht.Cells(iRow, iCur), sErr) & ",")
                If iCur = 0 Then
                  iCur = InStr(InStr(optQS, ";QG:GENERAL,") + 1, optQS, ";")
                  sErr = sErr & ";'" & sht.Name & "'!r" & CStr(iRow) & "c1 - unknown QG/CG"
                Else
                  iCur = fndMin(InStr(iCur + 1, optQS, ";QG:"), InStr(iCur + 1, optQS, ";CG:"))
                  If iCur = 0 Then iCur = Len(optQS)
                End If
                optQS = Left(optQS, iCur) & sStr & Mid(optQS, iCur)
                If iCur <= iQG Then iQG = iQG + Len(sStr) + 1
              Else
                If Left(sht.Cells(iRow, CLCM).Value, 4) = "[QL]" Then
                  iTmp = InStrRev(optCD, ";CG:", IIf(iCG > 0, iCG, Len(optCD)))
                  sTmp = Mid(optCD, iTmp, InStr(iTmp, optCD, ",") - iTmp + 1)
                  iTmp = InStr(optQS, sTmp) + Len(sTmp)
                  iCur = fndMinZ(InStr(iTmp, optQS, ";QG:"), InStr(iTmp, optQS, ";CG:"), iTmp)
                  optQS = Left(optQS, iCur) & sStr & Mid(optQS, iCur)
                  If iCur <= iQG Then iQG = iQG + Len(sStr) + 1
                ElseIf iQG > 0 Then
                  iTmp = fndMinZ(InStr(iQG, optQS, ";QG:"), InStr(iQG, optQS, ";CG:"), iQG)
                  optQS = Left(optQS, iTmp) & sStr & Mid(optQS, iTmp)
                  iQG = iTmp + Len(sStr) + 1
                Else
                  iCur = InStr(InStr(optQS, ";QG:GENERAL,") + 1, optQS, ";")
                  optQS = Left(optQS, iCur) & sStr & Mid(optQS, iCur)
                End If
              End If
            End If
          Case "[CG]"
            iCur = InStr(optCD, ";CG:" & escID(sht.Cells(iRow, CLID).Value, 0, sht.Cells(iRow, CLID), sErr) & ",")
            If iCur > 0 Then
              iCur = InStr(iCur + 1, optCD, ";") - 1
              optCD = Left(optCD, iCur) & "'" & sht.Name & "'!r" & CStr(iRow) & "c" & Mid(optCD, iCur)
              iCG = InStr(iCur, optCD, ";CG:"): If iCG = 0 Then iCG = Len(optCD)
            Else
              optCD = optCD & "CG:" & escID(sht.Cells(iRow, CLID).Value, 0, sht.Cells(iRow, CLID), sErr) & ",'" & sht.Name & "'!r" & CStr(iRow) & "c" & ",;"
              iCG = Len(optCD)
            End If
            iCur = InStr(optQS, ";CG:" & escID(sht.Cells(iRow, CLID).Value, 0, sht.Cells(iRow, CLID), sErr) & ",")
            If iCur = 0 Then optQS = optQS & "CG:" & escID(sht.Cells(iRow, CLID).Value, 0, sht.Cells(iRow, CLID), sErr) & ",;"
            sCG = "'" & sht.Name & "'!r" & CStr(iRow) & "c"
          Case "[QG]"
            sStr = "QG:" & escID(sht.Cells(iRow, CLID).Value, 0, sht.Cells(iRow, CLID), sErr) & ","
            iCur = InStr(optQS, ";" & sStr)
            If iCur > 0 Then
              iCur = InStr(iCur + 1, optQS, ";") - 1
              sStr = "'" & sht.Name & "'!r" & CStr(iRow) & "c"
              optQS = Left(optQS, iCur) & sStr & Mid(optQS, iCur)
              iQG = iCur + Len(sStr) + 2
            Else
              optQS = optQS & sStr & "'" & sht.Name & "'!r" & CStr(iRow) & "c" & ",;"
              iQG = Len(optQS)
            End If
          Case "[QR]"
            sStr = escID(sht.Cells(iRow, CLID).Value, 0, sht.Cells(iRow, CLID), sErr) & ","
            iCur = InStr(optQR, ";QS:" & sStr)
            If iCur > 0 Then
              iCur = InStr(iCur + 1, optQR, ";") - 1
              optQR = Left(optQR, iCur) & "'" & sht.Name & "'!r" & CStr(iRow) & "c" & Mid(optQR, iCur)
            Else
              optQR = optQR & "QS:" & sStr & "'" & sht.Name & "'!r" & CStr(iRow) & "c" & ",;"
            End If
          Case "[CR]"
            sStr = escID(sht.Cells(iRow, CLID).Value, 0, sht.Cells(iRow, CLID), sErr) & ","
            iCur = InStr(optCR, ";" & sStr)
            If iCur > 0 Then
              iCur = InStr(iCur + 1, optCR, ";") - 1
              optCR = Left(optCR, iCur) & "'" & sht.Name & "'!r" & CStr(iRow) & "c" & Mid(optCR, iCur)
            Else
              optCR = optCR & sStr & "'" & sht.Name & "'!r" & CStr(iRow) & "c,;"
            End If
          Case "[TD]", "[TB]", "[TA]", "[TL]", "[CN]"
            sStr = ":" & escID(sht.Cells(iRow, CLID).Value, 0, sht.Cells(iRow, CLID), sErr) & ","
            iCur = InStr(optTD, sStr)
            If iCur > 0 Then
              iCur = InStr(iCur, optTD, ";") - 1
              optTD = Left(optTD, iCur) & "'" & sht.Name & "'!r" & CStr(iRow) & "c" & Mid(optTD, iCur)
            Else
              optTD = optTD & Mid(sht.Cells(iRow, CLCM).Value, 2, 2) & sStr & "'" & sht.Name & "'!r" & CStr(iRow) & "c,;"
            End If
          Case "[IG]", "[IN]", "[IA]", "[IB]"
            'not supported in this version
          Case "[VO]", "[VA]", "[VP]", "[VS]", "[VD]"
            optVS = optVS & "," & Left(sht.Cells(iRow, CLCM).Value, 4) & ":'" & sht.Name & "'!r" & CStr(iRow) & "c"
          Case "[WO]", "[WA]", "[WQ]", "[WS]", "[WD]", "[WT]"
            optWD = optWD & "," & Left(sht.Cells(iRow, CLCM).Value, 4) & ":'" & sht.Name & "'!r" & CStr(iRow) & "c"
          Case "[CM]"
            'additional commands
          Case "[PR]"
            optPR = optPR & ",'" & sht.Name & "'!r" & CStr(iRow) & "c"
          Case "[EX]"
            If LCase(sht.Cells(iRow, CLID).Value) = "mspec" Then optEX = optEX & ",'" & sht.Name & "'!r" & CStr(iRow) & "c"
          Case Else
            If Left(sht.Cells(iRow, CLCM).Value, 1) = "[" Then sErr = sErr & ";'" & sht.Name & "'!r" & CStr(iRow) & "c1 - unknown command " & CStr(sht.Cells(iRow, CLCM).Value)
          End Select
          If Left(sht.Cells(iRow, CLCM).Value, 4) <> "[RM]" And sht.Cells(iRow, CLCM).Value Like "[[]??[]]*" Then wrtRowVar rngRow:=sht.Rows(iRow).EntireRow, optTD:=optTD, sMsg:=sErr
        Else: sErr = sErr & ";'" & sht.Name & "'!r" & CStr(iRow) & "c1 - command was ignored": End If
      Next iRow
    End If
    iSht = iSht + 1
  Wend
End Sub

'create QS
Private Sub ngcCreateQS(ByRef optQS As String, ByRef optQR As String, ByRef optPR As String, ByRef optEX As String, ByRef sErr As String)
  Dim shtQS As Worksheet, vQS As Variant, iRow As Long
  Dim iAdr As Long, vAdr As Variant, iGrp As Long, bGrp As Boolean, bUse As Boolean
  Dim sCmd As String, iCur As Long, sCur As String, sFlt As String, sStr As String, iQty As Long
  
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| QS
  Application.StatusBar = "Prepare '" & ngcINP & "' sheet..."
  Set shtQS = Sheets.Add(Before:=Sheets(1))
  wrtApS sht:=shtQS, dft:=shtV.Cells(30, 3), sName:=ngcINP '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  wrtApC rng:=shtQS.Range(shtQS.Cells(1, 1), shtQS.Cells(1, 8)), iCols:=Array(INQD, INQV, INQT, INQE, INCM, INID, INFL, INTM), _
    cWths:=Array(12, 12, 57, 19, 5, 12, 5, 6), cFrms:=Array(""), _
    cAlgs:=Array(xlCenter, xlCenter, xlLeft, xlLeft), _
    cFncs:=Array(8421504, -1, -1, 255, 8421504, 8421504, 8421504, 8421504)
  shtQS.Columns(INQT).EntireColumn.WrapText = True
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  wrtApR rng:=shtQS.Range(shtQS.Cells(1, 1), shtQS.Cells(1, 8)), iCols:=Array(INQD, INQV, INQT, INQE, INCM, INID, INFL, INTM), _
    cTxts:=Array("Default", "", "=ngcL('" & ngcVAR & "'!r15c2,r1c" & CStr(INFL) & ")", "='" & ngcVAR & "'!r2c2", "", "GENERAL", shtV.Cells(7, 2).Value, "1"), _
    tpl:=shtV.Cells(30, 3), iApr:=INCM
  With shtQS.OptionButtons.Add(shtQS.Cells(1, INQV).Left, shtQS.Cells(1, INQV).Top + 2, shtQS.Cells(1, INQV).Width, shtQS.Cells(1, INQV).Height - 4)
    .Name = "ngcMSpec0"
    .Caption = "No MSpec"
    .Value = True
    .LinkedCell = shtQS.Cells(1, INTM).Address
  End With
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  iRow = 2
  For iAdr = 8 To IIf(shtV.Cells(2, 25).Value, 11, 10)
    With shtQS.Cells(iRow, INQT)
      .FormulaR1C1 = "=ngcL('" & ngcVAR & "'!r" & CStr(iAdr) & "c3,r1c" & CStr(INFL) & ")"
      .Offset(0, INQV - .Column).Borders.LineStyle = xlContinuous
      .Offset(0, INQD - .Column).NumberFormat = "0"
      .Offset(0, INQV - .Column).FormulaR1C1 = "=rc" & CStr(INQD)
      .Offset(0, INCM - .Column).Value = "TD"
      .Offset(0, INID - .Column).Value = shtV.Cells(iAdr, 1).Value
      .Offset(0, INQD - .Column).Borders.Color = 8421504
      .Offset(0, INQD - .Column).Borders.LineStyle = xlContinuous
      .Offset(0, INQD - .Column).FormulaR1C1 = "=" & wrtAdr(iAdr, 2, ngcVAR)
      If shtV.Cells(iAdr, 1).Value = "SPEC" Then
        .Offset(0, INQD - .Column).FormulaR1C1 = "=getSpecID(r" & IIf(shtV.Cells(2, 25).Value, 6, 5) & "c" & CStr(INQV) & ",""" & shtV.Cells(iAdr, 2).Value & """)"
        .Offset(0, INQV - .Column).FormatConditions.Delete
        .Offset(0, INQV - .Column).FormatConditions.Add Type:=xlExpression, Formula1:="=LEN(" & shtQS.Cells(iRow, INQV).Address & ")>21"
        .Offset(0, INQV - .Column).FormatConditions(1).Font.Bold = True
        .Offset(0, INQV - .Column).FormatConditions(1).Font.Color = -16776961
        .Offset(0, INQE - .Column).FormulaR1C1 = "=getSpecNM(rc" & CStr(INQV) & ")"
        .Offset(0, INQE - .Column).Font.ColorIndex = 15
      ElseIf shtV.Cells(iAdr, 1).Value = "ISSUE" Then
        .Offset(0, INQD - .Column).NumberFormat = "000"
        .Offset(0, INQV - .Column).NumberFormat = "000"
        .Offset(0, INQV - .Column).Interior.Color = 12566463
      ElseIf shtV.Cells(iAdr, 1).Value = "SOLUTION" Then
        .Offset(0, INQV - .Column).Interior.Color = 12566463
        .Offset(0, INQV - .Column).Validation.Delete
        .Offset(0, INQV - .Column).Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=shtV.Cells(11, 5).Value
        .Offset(0, INQV - .Column).ClearComments
        .Offset(0, INQV - .Column).AddComment
        .Offset(0, INQV - .Column).Comment.Text Text:=Replace(shtV.Cells(11, 4).Value, ";", vbCrLf)
        .Offset(0, INQV - .Column).Comment.Shape.TextFrame.AutoSize = True
      End If
    End With
    iRow = iRow + 1
  Next iAdr
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  iAdr = 12
  With shtQS.Range(shtQS.Cells(iRow, INQV), shtQS.Cells(iRow, INQT))
    .Borders(xlEdgeTop).LineStyle = xlContinuous
    .Borders(xlEdgeBottom).LineStyle = xlContinuous
    .Borders(xlEdgeLeft).LineStyle = xlContinuous
    .Borders(xlEdgeRight).LineStyle = xlContinuous
  End With
  shtQS.Cells(iRow, INQV).FormulaR1C1 = "=ngcL('" & ngcVAR & "'!r" & CStr(iAdr) & "c3,r1c" & CStr(INFL) & ")"
  shtQS.Cells(iRow, INQV).HorizontalAlignment = xlLeft
  shtQS.Cells(iRow, INQV).FormatConditions.Add Type:=xlExpression, Formula1:="=LEN(" & shtQS.Cells(iRow, INQV).Address & ")>50"
  shtQS.Cells(iRow, INQV).FormatConditions(1).Font.Bold = True
  shtQS.Cells(iRow, INQV).FormatConditions(1).Font.Color = -16776961
  shtQS.Cells(iRow, INCM).Value = "TD"
  shtQS.Cells(iRow, INID).Value = shtV.Cells(iAdr, 1).Value
  shtQS.Cells(iRow, INQD).Borders.Color = 8421504
  shtQS.Cells(iRow, INQD).Borders.LineStyle = xlContinuous
  shtQS.Cells(iRow, INQD).FormulaR1C1 = "=" & wrtAdr(iAdr, 2, ngcVAR)
  
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| EX
  Application.StatusBar = "Prepare MSpec commands..."
  vAdr = Split(optEX, ",")
  For iAdr = LBound(vAdr) + 1 To UBound(vAdr)
    fndRng(vAdr(iAdr), CLE4).FormulaR1C1 = "=if('" & ngcINP & "'!r1c8="""",0,('" & ngcINP & "'!r1c8-1)*if(offset('" & ngcINP & "'!r1c8,,'" & ngcINP & "'!r1c8)<>"""",1,-1))"
  Next iAdr
  
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| QS
  Application.StatusBar = "Writing questions..."
  iGrp = 0: bGrp = False: bUse = True
  vQS = Split(optQS, ";")
  If UBound(vQS) - LBound(vQS) > 2 Then
    For iCur = LBound(vQS) + 2 To UBound(vQS) - 1
      Select Case Left(vQS(iCur), 2)
      Case "QG"
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        shtQS.Rows(iRow + 1).Font.Size = 5
        iRow = iRow + 2: bUse = True
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If iGrp > 0 Then
          If iRow - iGrp > 2 Then
            If shtQS.Cells(iGrp, INFL).FormulaR1C1 <> "1" Then shtQS.Cells(iGrp, INFL).FormulaR1C1 = IIf(bGrp, "1", "=1*or(r" & CStr(iGrp + 1) & "c" & CStr(INFL) & ":r" & CStr(iRow - 2) & "c" & CStr(INFL) & ")")
          Else: shtQS.Cells(iGrp, INFL).FormulaR1C1 = "0": End If
          shtQS.Cells(iRow - 1, INFL).FormulaR1C1 = "=r" & CStr(iGrp) & "c"
        End If
        iGrp = iRow: bGrp = 0: sStr = ""
        vAdr = Split(vQS(iCur), ",")
        For iAdr = LBound(vAdr) + 1 To UBound(vAdr) - 1
          sStr = sStr & "&ngcG(" & vAdr(iAdr) & CStr(CLQ9) & ")"
        Next iAdr
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        wrtApR rng:=shtQS.Range(shtQS.Cells(iRow, 1), shtQS.Cells(iRow, 8)), iCols:=Array(INQD, INQV, INQT, INQE, INCM, INID, INFL, INTM), _
          cTxts:=Array("", "", "=ngcL(" & fndInRow(vAdr, "$$*") & ",r1c" & CStr(INFL) & ")", "=" & Mid(sStr, 2), "QG", "=" & vAdr(1) & CStr(CLID), "", ""), _
          tpl:=shtV.Cells(30, 3), iApr:=INQD
        shtQS.Cells(iRow, INQE).Font.Color = 255
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        sStr = fndInRow(vAdr, "|fffd||fffd|*", False)
        If sStr <> "" Then
          With shtQS.Cells(iRow, INQT)
            .AddComment
            .Comment.Text Text:=Mid(fndRng(sStr).Value, 3)
            .Comment.Shape.TextFrame.AutoSize = True
          End With
        End If
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        sStr = fndRng(vAdr(1), CLCM).Value
        If Len(sStr) > 4 Then wrtCmd rng:=shtQS.Cells(iRow, INQV), dft:=Nothing, cmd:=fndRng(vAdr(1), CLCM), bQG:=True, bCG:=False, sMsg:=sErr
      Case "QS"
        vAdr = Split(vQS(iCur), ",")
        sCmd = fndRng(vAdr(1), CLCM).Value
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If bUse And Left(sCmd, 4) = "[QI]" Then
          iRow = iRow + 1
          With shtQS.Cells(iRow, INQT)
            .FormulaR1C1 = "=ngcL(" & fndInRow(vAdr, "$$*") & ",r1c" & CStr(INFL) & ")" '|fffd||fffd||fffd||fffd||fffd|
            .Font.Color = 12611584 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| 14383381
            '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            sStr = "": sCur = "": iQty = 0
            For iAdr = LBound(vAdr) + 1 To UBound(vAdr) - 1
              '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| QI
              If fndRng(vAdr(iAdr), CLQ4).FormulaR1C1 <> "" Then
                sStr = sStr & "1*(" & vAdr(iAdr) & CStr(CLQ4) & "=0)&"
                sCur = sCur & vAdr(iAdr) & CStr(CLQ7) & ","
                iQty = iQty + 1
              Else: iAdr = iAdr - 1: Exit For: End If
            Next iAdr
            '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            If iQty = 0 Then
              If iGrp > 0 Then If shtQS.Cells(iGrp, INTM).FormulaR1C1 <> "" Then .Offset(0, INFL - .Column).FormulaR1C1 = "=1*r" & CStr(iGrp) & "c" & CStr(INTM)
              sCur = "=" & vAdr(1) & CStr(CLQ7)
              bGrp = True
            ElseIf iQty = 1 Then
              .Offset(0, INFL - .Column).FormulaR1C1 = "=" & Left(sStr, Len(sStr) - 1)
              If iGrp > 0 Then .Offset(0, INFL - .Column).FormulaR1C1 = .Offset(0, INFL - .Column).FormulaR1C1 & IIf(shtQS.Cells(iGrp, INTM).FormulaR1C1 <> "", "*r" & CStr(iGrp) & "c" & CStr(INTM), "")
              sCur = "=" & vAdr(1) & CStr(CLQ7)
            Else
              .Offset(0, INFL - .Column).FormulaR1C1 = "=rc" & CStr(INTM)
              If iGrp > 0 Then .Offset(0, INFL - .Column).FormulaR1C1 = .Offset(0, INFL - .Column).FormulaR1C1 & IIf(shtQS.Cells(iGrp, INTM).FormulaR1C1 <> "", "*r" & CStr(iGrp) & "c" & CStr(INTM), "")
              If iAdr < UBound(vAdr) - 1 Then
                sStr = sStr & "1*(" & vAdr(iAdr) & CStr(CLQ4) & "=0)"
                sCur = sCur & vAdr(iAdr + 1) & CStr(CLQ7)
              Else: sStr = sStr & "1": sCur = sCur & "0": End If
              .Offset(0, INTM - .Column).FormulaR1C1 = "=find(""1""," & sStr & ")"
              sCur = "=choose(rc" & CStr(INTM) & "," & sCur & ")"
            End If
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            sStr = fndRng(vAdr(1), CLCM).Value
            If InStr(sStr, "#") > 0 Then
              wrtCmd rng:=.Offset(0, INQV - .Column), dft:=.Offset(0, INQD - .Column), cmd:=fndRng(vAdr(1), CLCM), bQG:=False, bCG:=False, sMsg:=sErr
              '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              .Offset(0, INQV - .Column).FormulaR1C1 = sCur
              '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              For iAdr = LBound(vAdr) + 1 To UBound(vAdr) - 1
                If fndRng(vAdr(iAdr), CLQ8).FormulaR1C1 <> "" Then
                  fndRng(vAdr(iAdr), CLQ6).FormulaR1C1 = "=if(rc" & CStr(CLQ8) & ",0," & wrtAdr(iRow, INIV, ngcINP) & ")"
                Else: fndRng(vAdr(iAdr), CLQ6).FormulaR1C1 = "=" & wrtAdr(iRow, INIV, ngcINP): End If
              Next iAdr
              .Offset(0, INCM - .Column).Value = "QI" '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            End If
          End With
        ElseIf bUse Then
          iRow = iRow + 1
          If Left(sCmd, 4) = "[QB]" Then shtQS.Rows(iRow).Font.Size = 5: iRow = iRow + 1
          If Left(sCmd, 4) = "[QE]" Then shtQS.Rows(iRow).Font.Size = 5: iRow = iRow + 1: If iGrp > 0 Then If shtQS.Cells(iGrp, INTM).FormulaR1C1 <> "" Then shtQS.Cells(iRow - 1, INFL).FormulaR1C1 = "=1*r" & CStr(iGrp) & "c" & CStr(INTM)
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          vAdr = Split(vQS(iCur), ",")
          With shtQS.Cells(iRow, INQT)
            If shtV.Cells(2, 26).Value Then
              sStr = fndInRow(vAdr, "[]*", False) '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
              If Len(sStr) > 3 Then sStr = "&if('" & ngcVAR & "'!r2c20,char(10)&ngcL(" & sStr & "),"""")" Else sStr = ""
            Else: sStr = "": End If
            .FormulaR1C1 = "=ngcL(" & fndInRow(vAdr, "$$*") & ",r1c" & CStr(INFL) & ")" & sStr '|fffd||fffd||fffd||fffd||fffd|
            .Offset(0, INQV - .Column).Borders.LineStyle = xlContinuous '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            .Offset(0, INQV - .Column).FormulaR1C1 = "=rc" & CStr(INQD) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            .Offset(0, INCM - .Column).Value = "QS" '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            .Offset(0, INID - .Column).FormulaR1C1 = "=" & vAdr(1) & CStr(CLID) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            .Offset(0, INQD - .Column).Borders.Color = 8421504 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            .Offset(0, INQD - .Column).Borders.LineStyle = xlContinuous
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            sStr = fndInRow(vAdr, "|fffd||fffd|*", False)
            If Len(sStr) > 3 Then
              sStr = Mid(fndRng(sStr).Value, 3)
              .AddComment
              .Comment.Text Text:=sStr
              If InStr(sStr, "|") > 0 Then
                .Comment.Shape.DrawingObject.Font.Name = "Consolas"
                .Comment.Shape.DrawingObject.Font.Size = 6
              End If
              .Comment.Shape.TextFrame.AutoSize = True
            End If
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| QS
            sStr = "": sCur = "": iQty = 0
            For iAdr = LBound(vAdr) + 1 To UBound(vAdr) - 1
              If fndRng(vAdr(iAdr), CLQ8).FormulaR1C1 <> "" Then
                sStr = sStr & "1*(" & vAdr(iAdr) & CStr(CLQ8) & "=0)&"
                sCur = sCur & vAdr(iAdr) & CStr(CLQ7) & ","
                iQty = iQty + 1
              Else: iAdr = iAdr - 1: Exit For: End If
            Next iAdr
            '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            If iQty = 0 Then
              sFlt = "=1": bGrp = True
              .Offset(0, INQD - .Column).FormulaR1C1 = "=" & vAdr(1) & CStr(CLQ7)
            ElseIf iQty = 1 Then
              sFlt = "=" & Left(sStr, Len(sStr) - 1)
              .Offset(0, INQD - .Column).FormulaR1C1 = "=" & vAdr(1) & CStr(CLQ7)
            Else
              sFlt = "=1*(" & wrtAdr(iRow, INTM, ngcINP) & "<>" & CStr(UBound(vAdr)) & ")"
              If iAdr < UBound(vAdr) - 1 Then
                sStr = sStr & "1" '*(" & vAdr(iAdr) & CStr(CLQ8) & "=0)"
                sCur = sCur & vAdr(iAdr + 1) & CStr(CLQ7)
              Else: sStr = sStr & "1": sCur = sCur & "0": End If
              .Offset(0, INTM - .Column).FormulaR1C1 = "=find(""1""," & sStr & ")"
              .Offset(0, INQD - .Column).FormulaR1C1 = "=choose(rc" & CStr(INTM) & "," & sCur & ")"
            End If
            '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If iGrp > 0 Then
              .Offset(0, INFL - .Column).FormulaR1C1 = sFlt & IIf(shtQS.Cells(iGrp, INTM).FormulaR1C1 <> "", "*r" & CStr(iGrp) & "c" & CStr(INTM), "")
            Else: .Offset(0, INFL - .Column).FormulaR1C1 = sFlt: End If
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            For iAdr = LBound(vAdr) + 1 To UBound(vAdr) - 1
              If fndRng(vAdr(iAdr), CLQ8).FormulaR1C1 <> "" Then
                fndRng(vAdr(iAdr), CLQ6).FormulaR1C1 = "=if(rc" & CStr(CLQ8) & ",0," & wrtAdr(iRow, INIV, ngcINP) & ")"
              Else: fndRng(vAdr(iAdr), CLQ6).FormulaR1C1 = "=" & wrtAdr(iRow, INIV, ngcINP): End If
            Next iAdr
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            sStr = ""
            For iAdr = LBound(vAdr) + 1 To UBound(vAdr) - 1
              sStr = sStr & "&ngcQ(" & IIf(.Offset(0, INFL - .Column).FormulaR1C1 = "", False, vAdr(iAdr) & CStr(CLQ8)) & ",rc" & CStr(INQV) & "," & vAdr(iAdr) & CStr(CLQ5) & ",r1c" & CStr(INFL) & IIf(fndRng(vAdr(iAdr), CLQ9).FormulaR1C1 = "", "", "," & vAdr(iAdr) & CStr(CLQ9)) & ")"
            Next iAdr
            .Offset(0, INQE - .Column).FormulaR1C1 = "=" & Mid(sStr, 2)
          End With
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          sStr = fndRng(vAdr(1), CLCM).Value
          If Len(sStr) > 4 Then wrtCmd rng:=shtQS.Cells(iRow, INQV), dft:=shtQS.Cells(iRow, INQD), cmd:=fndRng(vAdr(1), CLCM), bQG:=False, bCG:=False, sMsg:=sErr
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| QR
          iAdr = InStr(optQR, ";" & vAdr(0) & ",")
          If iAdr > 0 Then
            vAdr = Split(Mid(optQR, iAdr + 1, InStr(iAdr + 1, optQR, ";") - iAdr - 2), ",")
            For iAdr = LBound(vAdr) + 1 To UBound(vAdr)
              If iQty > 0 Then
                fndRng(vAdr(iAdr), CLQ4).FormulaR1C1 = "=if(" & Mid(sFlt, 2) & "," & wrtAdr(iRow, INIV, ngcINP) & ",0)"
              Else: fndRng(vAdr(iAdr), CLQ4).FormulaR1C1 = "=" & wrtAdr(iRow, INIV, ngcINP): End If
            Next iAdr
          End If
          '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
          If Left(sCmd, 4) = "[QB]" Then If shtQS.Cells(iRow, INFL).FormulaR1C1 <> "" Then shtQS.Cells(iRow - 1, INFL).FormulaR1C1 = "=r[1]c"
          If Left(sCmd, 4) = "[QA]" Then iRow = iRow + 1: shtQS.Rows(iRow).Font.Size = 5: If shtQS.Cells(iRow - 1, INFL).FormulaR1C1 <> "" Then shtQS.Cells(iRow, INFL).FormulaR1C1 = "=r[-1]c"
        End If
      Case "CG"
        bUse = False
      End Select
    Next iCur
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| QG
    If iGrp > 0 Then
      If iRow > iGrp Then
        If shtQS.Cells(iGrp, INFL).FormulaR1C1 <> "1" Then shtQS.Cells(iGrp, INFL).FormulaR1C1 = IIf(bGrp, "1", "=1*or(r" & CStr(iGrp + 1) & "c" & CStr(INFL) & ":r" & CStr(iRow) & "c" & CStr(INFL) & ")")
      Else: shtQS.Cells(iGrp, INFL).FormulaR1C1 = "0": End If
    End If
    iRow = iRow + 1
  Else: sErr = sErr & ";'" & ngcINP & "' - no questions found": End If
  vQS = ""
  
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.StatusBar = "Writing informations..."
  iRow = iRow + 1
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  wrtApR rng:=shtQS.Range(shtQS.Cells(iRow, 1), shtQS.Cells(iRow, 8)), iCols:=Array(INQD, INIV, INIT, INIE), _
    cTxts:=Array("", "", "=ngcL('" & ngcVAR & "'!r16c2,r1c" & CStr(INFL) & ")"), _
    tpl:=shtV.Cells(30, 1), iApr:=INIE
  
  vAdr = Split(optPR, ",")
  For iAdr = LBound(vAdr) + 1 To UBound(vAdr)
    iRow = iRow + 1
    iCur = fndInRng(fndRng(vAdr(iAdr), CLCM).EntireRow, "$$*")
    If iCur > 0 Then
      With shtQS.Cells(iRow, INQT)
        .FormulaR1C1 = "=ngcL(" & vAdr(iAdr) & CStr(iCur) & ",r1c" & CStr(INFL) & ")"
        .Offset(0, INFL - .Column).FormulaR1C1 = "=" & vAdr(iAdr) & CStr(CLP4)
        .Offset(0, INIV - .Column).FormulaR1C1 = "=" & CStr(vAdr(iAdr))
        .Offset(0, INIV - .Column).Borders.LineStyle = xlContinuous
        .Offset(0, INCM - .Column).Value = "PR"
      End With
    Else: sErr = sErr & ";" & vAdr(iAdr) & " - [PR] was ignored": End If
  Next iAdr
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  shtV.Cells(30, 3).Value = shtQS.Range(shtQS.Cells(2, INFL), shtQS.Cells(iRow, INFL)).Address(False, False)

  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Application.StatusBar = False
End Sub

'create Prices
Public Sub ngcCreatePR(ByRef optCD As String, ByRef indCD As String, ByRef sErr As String)
  Dim shtPR As Worksheet, vPR As Variant, vCD As Variant
  Dim vAdr As Variant, sAdr As String, iAdr As Long
  Dim iCur As Long, iPrc As Long
  'temporary
  Dim sTmp As String, iTmp As Long
  
  Application.StatusBar = "Prepare '" & ngcPRC & "' sheet..."
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| PR
  Set shtPR = Sheets.Add(After:=Sheets(1))
  wrtApS sht:=shtPR, dft:=shtV.Cells(30, 5), sName:=ngcPRC '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  wrtApC rng:=shtPR.Range(shtPR.Cells(1, 1), shtPR.Cells(1, 15)), iCols:=Array(PRID, PRTX, PRCB, PRQ1, PRQ2, PRC1, PRK1, PRC2, PRK2, PRAB, PRDQ, PRWT, PRVL, PRST, PRTP), _
    cWths:=Array(12, 60, 4, 9, 9, 10, 8, 10, 8, 4, 5, 8, 8, 6, 5), cFrms:=Array("", "", "", "#,##0", "#,##0", "#,##0.00", "#,##0.00", "#,##0.00", "#,##0.00", "", "0%", "#,##0.000", "#,##0.0"), _
    cAlgs:=Array(xlLeft, xlLeft, xlCenter, xlRight, xlRight, xlRight, xlRight, xlRight, xlRight, xlCenter, xlRight, xlRight, xlRight, xlCenter, xlCenter), _
    cFncs:=Array(-1, -1, -1, -1, 8421504)
  shtPR.Columns(PRQ2).EntireColumn.Hidden = True
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  wrtApR rng:=shtPR.Range(shtPR.Cells(1, 1), shtPR.Cells(1, 15)), iCols:=Array(PRID, PRTX, PRCB, PRQ1, PRQ2, PRC1, PRK1, PRC2, PRK2, PRAB, PRDQ, PRWT, PRVL, PRST, PRTP), _
    cTxts:=Array("=ngcL('" & ngcVAR & "'!r19c2,'" & ngcINP & "'!r1c" & CStr(INFL) & ")", "", "=ngcL('" & ngcVAR & "'!r20c2,'" & ngcINP & "'!r1c" & CStr(INFL) & ")", _
                 "=ngcL('" & ngcVAR & "'!r20c3,'" & ngcINP & "'!r1c" & CStr(INFL) & ")", "=ngcL('" & ngcVAR & "'!r20c4,'" & ngcINP & "'!r1c" & CStr(INFL) & ")", _
                 "=ngcL('" & ngcVAR & "'!r20c5,'" & ngcINP & "'!r1c" & CStr(INFL) & ")&1", "", "=ngcL('" & ngcVAR & "'!r20c5,'" & ngcINP & "'!r1c" & CStr(INFL) & ")&2", "", _
                 "=ngcL('" & ngcVAR & "'!r20c6,'" & ngcINP & "'!r1c" & CStr(INFL) & ")", "=ngcL('" & ngcVAR & "'!r20c7,'" & ngcINP & "'!r1c" & CStr(INFL) & ")", _
                 "=ngcL('" & ngcVAR & "'!r20c8,'" & ngcINP & "'!r1c" & CStr(INFL) & ")", "=ngcL('" & ngcVAR & "'!r20c9,'" & ngcINP & "'!r1c" & CStr(INFL) & ")", _
                 "=ngcL('" & ngcVAR & "'!r20c10,'" & ngcINP & "'!r1c" & CStr(INFL) & ")", "=ngcL('" & ngcVAR & "'!r20c11,'" & ngcINP & "'!r1c" & CStr(INFL) & ")"), _
    tpl:=shtV.Cells(30, 5), iApr:=PRTX
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  With shtPR.CheckBoxes.Add(shtPR.Cells(1, PRTX).Left + shtPR.Cells(1, PRTX).Width - 110, shtPR.Cells(1, PRK1).Top, 110, shtPR.Cells(1, PRK1).Height)
    .Name = "ngcPrintSheet"
    .Text = "Prepare pricelist sheet"
    .Value = xlOff
  End With
  With shtPR.CheckBoxes.Add(shtPR.Cells(1, PRK1).Left, shtPR.Cells(1, PRK1).Top, shtPR.Cells(1, PRK1).Width, shtPR.Cells(1, PRK1).Height)
    .Name = "ngcPrint1"
    .Text = "To print"
    .LinkedCell = shtPR.Cells(3, PRQ2).Address
    .Value = xlOn
  End With
  shtPR.Cells(3, PRQ2).Font.Color = 16777215
  shtPR.Cells(3, PRQ2).FormulaR1C1 = "=1*(r5c" & CStr(PRC1) & "<>"""")"
  With shtPR.CheckBoxes.Add(shtPR.Cells(1, PRK2).Left, shtPR.Cells(1, PRK2).Top, shtPR.Cells(1, PRK2).Width, shtPR.Cells(1, PRK2).Height)
    .Name = "ngcPrint2"
    .Text = "To print"
    .LinkedCell = shtPR.Cells(4, PRQ2).Address
    .Value = xlOff
  End With
  shtPR.Cells(4, PRQ2).Font.Color = 16777215
  shtPR.Cells(4, PRQ2).FormulaR1C1 = "=1*(r5c" & CStr(PRC2) & "<>"""")"
  With shtPR.CheckBoxes.Add(shtPR.Cells(5, PRTX).Left, shtPR.Cells(5, PRK1).Top, 100, shtPR.Cells(5, PRK1).Height)
    .Name = "ngcPrintNames"
    .Text = "Print pricelist names"
    .LinkedCell = shtPR.Cells(2, PRQ2).Address
    .Value = xlOff
  End With
  shtPR.Cells(2, PRQ2).Font.Color = 16777215
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  With shtPR.Cells(1, PRID)
    .Offset(1, PRQ1 - .Column).FormulaR1C1 = "=ngcL('" & ngcVAR & "'!r21c2,'" & ngcINP & "'!r1c" & CStr(INFL) & ")"
    .Offset(1, PRC1 - .Column).Value = 1#
    .Offset(1, PRC2 - .Column).Value = 1#
    .Offset(2, PRQ1 - .Column).FormulaR1C1 = "=ngcL('" & ngcVAR & "'!r21c3,'" & ngcINP & "'!r1c" & CStr(INFL) & ")"
    .Offset(2, PRC1 - .Column).Value = 0#
    .Offset(2, PRC1 - .Column).NumberFormat = "0.00%"
    .Offset(2, PRC2 - .Column).Value = 0#
    .Offset(2, PRC2 - .Column).NumberFormat = "0.00%"
    .Offset(3, PRC1 - .Column).Interior.Color = 15849925
    .Offset(3, PRK1 - .Column).HorizontalAlignment = xlLeft
    .Offset(3, PRC2 - .Column).Interior.Color = 15849925
    .Offset(3, PRK2 - .Column).HorizontalAlignment = xlLeft
    .Offset(4, PRC2 - .Column).HorizontalAlignment = xlLeft
    .Offset(1, PRAB - .Column).Interior.Color = 14474738
    .Offset(1, PRWT - .Column).Interior.Color = 14474738
    .Offset(1, PRWT - .Column).NumberFormat = "#,##0"
    .Offset(3, PRWT - .Column).Interior.Color = 15849925
    .Offset(3, PRWT - .Column).NumberFormat = "#,##0.0"
    .Offset(1, PRVL - .Column).Interior.Color = 14474738
    .Offset(1, PRVL - .Column).NumberFormat = "#,##0.0"
    .Offset(3, PRVL - .Column).Interior.Color = 15849925
  End With
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  wrtApR rng:=shtPR.Range(shtPR.Cells(5, 1), shtPR.Cells(5, 15)), iCols:=Array(PRTX), _
    cTxts:=Array("=ngcL('" & ngcVAR & "'!r21c4,'" & ngcINP & "'!r1c" & CStr(INFL) & ")"), _
    tpl:=shtV.Cells(30, 5), iApr:=PRID
  shtPR.Cells(5, PRTX).HorizontalAlignment = xlRight
  
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| prices
  Application.StatusBar = "Writing codes on '" & ngcPRC & "'..."
  indCD = ";": vCD = Split(optCD, ";")
  If UBound(vCD) - LBound(vCD) > 2 Then
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    For iCur = LBound(vCD) + 1 To UBound(vCD) - 1
      sTmp = Left(vCD(iCur), 2)
      If sTmp = "FC" Or sTmp = "FM" Or sTmp = "FS" Then
        vAdr = Split(vCD(iCur), ",")
        sTmp = Mid(vCD(iCur), 4, InStr(4, vCD(iCur), ",") - 4): If InStr(sTmp, ":") > 0 Then sTmp = Left(sTmp, InStr(sTmp, ":") - 1)
        If Left(fndRng(vAdr(1), CLCM).Value, 4) = "[CK]" Then sTmp = "CK:" & Left(sTmp, 3) & "####" & Right(sTmp, 2) Else sTmp = "CD:" & sTmp
        If InStr(indCD, ";" & sTmp & ",") = 0 And sTmp <> "CD:ABCxxxxYY" And sTmp <> "CD:ABCxxxxDE" Then indCD = indCD & sTmp & Mid(vCD(iCur), InStr(vCD(iCur), ",")) & ";"
      End If
    Next iCur
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If Len(indCD) > 2 Then
    indCD = Mid(indCD, 2, Len(indCD) - 2)
    vPR = Split(indCD, ";")
    For iCur = LBound(vPR) To UBound(vPR)
      iPrc = iCur
      For iAdr = iCur + 1 To UBound(vPR)
        If vPR(iAdr) < vPR(iPrc) Then iPrc = iAdr
      Next iAdr
      sTmp = vPR(iPrc): vPR(iPrc) = vPR(iCur): vPR(iCur) = sTmp
    Next iCur
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| Prices
    iPrc = 6: indCD = ";"
    For iCur = LBound(vPR) To UBound(vPR)
      vAdr = Split(vPR(iCur), ",")
      If Right(vAdr(1), 1) = "c" Then sAdr = vAdr(1) Else sAdr = Left(vAdr(1), InStr(vAdr(1), "c"))
      If Left(vAdr(0), 2) = "CK" Then
        sTmp = "Left(" & sAdr & CStr(CLID) & ",3)&""####""&Right(" & sAdr & CStr(CLID) & ",2)"
        iTmp = fndInRng(fndRng(sAdr & CStr(CLID)).EntireRow, "##*")
        If iTmp > 0 Then
          shtPR.Cells(iPrc, PRID).FormulaR1C1 = "=if('" & ngcVAR & "'!r2c19,right(" & sAdr & CStr(iTmp) & ",len(" & sAdr & CStr(iTmp) & ")-2)," & sTmp & ")"
        Else: shtPR.Cells(iPrc, PRID).FormulaR1C1 = "=" & sTmp: End If
        shtPR.Cells(iPrc, PRCB).Value = "'Y"
        shtPR.Cells(iPrc, PRK1).Value = 0#
        shtPR.Cells(iPrc, PRK2).Value = 0#
      Else
        iTmp = fndInRng(fndRng(sAdr & CStr(CLID)).EntireRow, "##*")
        If iTmp > 0 Then
          shtPR.Cells(iPrc, PRID).FormulaR1C1 = "=if('" & ngcVAR & "'!r2c19,right(" & sAdr & CStr(iTmp) & ",len(" & sAdr & CStr(iTmp) & ")-2)," & sAdr & CStr(CLID) & ")"
        Else: shtPR.Cells(iPrc, PRID).FormulaR1C1 = "=" & sAdr & CStr(CLID): End If
        shtPR.Cells(iPrc, PRCB).Value = "'"
      End If
      shtPR.Cells(iPrc, PRTX).FormulaR1C1 = "=ngcL(" & fndInRow(vAdr, "$$*") & ",'" & ngcINP & "'!r1c" & CStr(INFL) & ")" '|fffd||fffd||fffd||fffd||fffd|
      shtPR.Cells(iPrc, PRC1).Value = 0#
      shtPR.Cells(iPrc, PRC2).Value = 0#
      shtPR.Cells(iPrc, PRDQ).Value = 0#
      indCD = indCD & vAdr(0) & "," & CStr(iPrc) & ";"
      iPrc = iPrc + 1
    Next iCur
    If iPrc > 6 Then
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      wrtApR rng:=shtPR.Range(shtPR.Cells(iPrc, 1), shtPR.Cells(iPrc, 15)), iCols:=Array(PRTX), _
        cTxts:=Array("=ngcL('" & ngcVAR & "'!r21c5,'" & ngcINP & "'!r1c" & CStr(INFL) & ")"), _
        tpl:=shtV.Cells(30, 5), iApr:=PRID
      shtPR.Cells(iPrc, PRTX).HorizontalAlignment = xlRight
      iPrc = iPrc - 1
    End If
  Else: Set vPR = Nothing: indCD = "": iPrc = 6: End If
  shtPR.Cells(2, PRK1).FormulaR1C1 = "=if(countifs(r6c" & CStr(PRQ1) & ":r" & CStr(iPrc) & "c" & CStr(PRQ1) & ",""<>0"",r6c" & CStr(PRC1) & ":r" & CStr(iPrc) & "c" & CStr(PRC1) & ",0)<>0,""W/o:""&countifs(r6c" & CStr(PRQ1) & ":r" & CStr(iPrc) & "c" & CStr(PRQ1) & ",""<>0"",r6c" & CStr(PRC1) & ":r" & CStr(iPrc) & "c" & CStr(PRC1) & ",0),""All ok"")"
  shtPR.Cells(2, PRK1).Interior.Color = 15849925: shtPR.Cells(2, PRK1).HorizontalAlignment = xlCenter
  shtPR.Cells(2, PRK2).FormulaR1C1 = "=if(countifs(r6c" & CStr(PRQ1) & ":r" & CStr(iPrc) & "c" & CStr(PRQ1) & ",""<>0"",r6c" & CStr(PRC2) & ":r" & CStr(iPrc) & "c" & CStr(PRC2) & ",0)<>0,""W/o:""&countifs(r6c" & CStr(PRQ1) & ":r" & CStr(iPrc) & "c" & CStr(PRQ1) & ",""<>0"",r6c" & CStr(PRC2) & ":r" & CStr(iPrc) & "c" & CStr(PRC2) & ",0),""All ok"")"
  shtPR.Cells(2, PRK2).Interior.Color = 15849925: shtPR.Cells(2, PRK2).HorizontalAlignment = xlCenter
  shtPR.Cells(2, PRAB).FormulaR1C1 = "=countifs(r6c" & CStr(PRQ1) & ":r" & CStr(iPrc) & "c" & CStr(PRQ1) & ",""<>0"",r6c:r" & CStr(iPrc) & "c,"""")"
  shtPR.Cells(2, PRWT).FormulaR1C1 = "=countifs(r6c" & CStr(PRQ1) & ":r" & CStr(iPrc) & "c" & CStr(PRQ1) & ",""<>0"",r6c:r" & CStr(iPrc) & "c,"""")"
  shtPR.Cells(4, PRWT).FormulaR1C1 = "=sumproduct(r6c" & CStr(PRQ1) & ":r" & CStr(iPrc) & "c" & CStr(PRQ1) & ",r6c:r" & CStr(iPrc) & "c)"
  shtPR.Cells(2, PRVL).FormulaR1C1 = "=countifs(r6c" & CStr(PRQ1) & ":r" & CStr(iPrc) & "c" & CStr(PRQ1) & ",""<>0"",r6c:r" & CStr(iPrc) & "c,"""")"
  shtPR.Cells(4, PRVL).FormulaR1C1 = "=sumproduct(r6c" & CStr(PRQ1) & ":r" & CStr(iPrc) & "c" & CStr(PRQ1) & ",r6c:r" & CStr(iPrc) & "c)"
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  shtV.Cells(30, 5).Value = shtPR.Range(shtPR.Cells(5, PRQ1), shtPR.Cells(iPrc, PRQ1)).Address(False, False)
  With shtPR.Range(shtPR.Cells(6, 1), shtPR.Cells(iPrc, 15))
    .Borders(xlEdgeTop).LineStyle = xlContinuous
    .Borders(xlInsideHorizontal).LineStyle = xlContinuous
    .Borders(xlEdgeBottom).LineStyle = xlContinuous
  End With
    
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Application.StatusBar = False
End Sub

'create Codes
Public Sub ngcCreateCD(ByRef optTD As String, ByRef optQS As String, ByRef optQR As String, ByRef optCD As String, ByRef indCD As String, ByRef optCR As String, ByRef sErr As String)
  Dim shtPR As Worksheet, vPR As Variant, iPrc As Long
  Dim shtCD As Worksheet, vCD As Variant
  Dim vAdr As Variant, sAdr As String, iAdr As Long
  Dim sSeq As String, sSsv As String, sCur As String, iCur As Long
  Dim iRow As Long, iGrp As Long, bGrp As Boolean
  Dim iQty As Long, iQst As Long, sCPf As String, sCPv As String
  'temporary
  Dim vTmp As Variant, iTmp As Long, sTmp As String, bTmp As Boolean
  
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| CD
  Application.StatusBar = "Prepare '" & ngcCSI & "' sheet..."
  Set shtCD = Sheets.Add(After:=Sheets(1))
  wrtApS sht:=shtCD, dft:=shtV.Cells(30, 4), sName:=ngcCSI '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  wrtApC rng:=shtCD.Range(shtCD.Cells(1, 1), shtCD.Cells(1, 9)), iCols:=Array(SPTT, SPCT, SPCM, SPID, SPFL, SPTM, SPTV, SPC1, SPC2), _
    cWths:=Array(12, 55, 5, 12, 5, 12, 9), cFrms:=Array("", "", "", "", "", "", "", "#,##0.00", "#,##0.00"), _
    cAlgs:=Array(xlLeft, xlLeft, xlCenter, xlCenter, xlCenter, xlCenter, xlRight, xlRight, xlRight), _
    cFncs:=Array(-1, -1, 8421504, 8421504, 8421504, 8421504)
  shtCD.Columns(SPTL).EntireColumn.WrapText = True
  wrtApR rng:=shtCD.Range(shtCD.Cells(1, 1), shtCD.Cells(1, 9)), iCols:=Array(SPTT, SPCT, SPCM, SPID, SPFL, SPTM, SPTV, SPC1, SPC2), _
    cTxts:=Array("=ngcL('" & ngcVAR & "'!r17c2,'" & ngcINP & "'!r1c" & CStr(INFL) & ")"), _
    tpl:=shtV.Cells(30, 4), iApr:=SPCM
  shtCD.Cells(1, SPTM).FormulaR1C1 = "='" & ngcINP & "'!r1c" & CStr(INTM)
  'shtCD.Rows(2).EntireRow.Font.Size = 5
  shtCD.Cells(2, SPTT).FormulaR1C1 = "='" & ngcINP & "'!r" & IIf(shtV.Cells(2, 25), 6, 5) & "c2": shtCD.Cells(2, SPTT).Font.Bold = True
  shtCD.Cells(2, SPTV).FormulaR1C1 = "='" & ngcINP & "'!r3c2": shtCD.Cells(2, SPTV).Font.Bold = True
  
  '|fffd||fffd||fffd||fffd||fffd||fffd| TD,CN
  Application.StatusBar = "Writing technical data..."
  Set shtPR = Sheets(ngcPRC)
  iRow = 3: vCD = Split(optTD, ";")
  If UBound(vCD) - LBound(vCD) > 2 Then
    For iCur = LBound(vCD) + 1 To UBound(vCD) - 1
      '|fffd||fffd||fffd||fffd||fffd||fffd| CN
      vAdr = Split(vCD(iCur), ","): sCur = "": bGrp = False
      If shtV.Cells(30, 2).Value Then
        '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (debug mode)
        iGrp = 31: iTmp = 2: bTmp = True
        While (shtV.Cells(iGrp, 1) <> "") And (shtV.Cells(iGrp, 1) < vAdr(0)): iGrp = iGrp + 1: Wend
        If shtV.Cells(iGrp, 1) <> "" Then shtV.Rows(iGrp).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromRightOrBelow: shtV.Rows(iGrp).Interior.Color = 16777215
        shtV.Cells(iGrp, 1).Value = vAdr(0)
        shtV.Cells(iGrp, 2).Value = 0
        shtV.Cells(iGrp, 2).Interior.Color = 12500670
        For iAdr = LBound(vAdr) + 1 To UBound(vAdr) - 1
          If fndRng(vAdr(iAdr), IIf(Right(vAdr(iAdr), 1) = "c", CLT5, 0)).FormulaR1C1 <> "" Then
            iTmp = iTmp + 1
            shtV.Cells(iGrp, iTmp).FormulaR1C1 = "=" & vAdr(iAdr) & IIf(Right(vAdr(iAdr), 1) = "c", CLT5, "")
            If iTmp > 3 Then
              If Left(shtV.Cells(iGrp, iTmp - 1).FormulaR1C1, InStr(shtV.Cells(iGrp, iTmp - 1).FormulaR1C1, "!")) <> Left(shtV.Cells(iGrp, iTmp).FormulaR1C1, InStr(shtV.Cells(iGrp, iTmp).FormulaR1C1, "!")) Then
                shtV.Cells(iGrp, iTmp).Interior.Color = IIf(shtV.Cells(iGrp, iTmp - 1).Interior.Color = 16777215, 15853019, 16777215)
              Else: shtV.Cells(iGrp, iTmp).Interior.Color = shtV.Cells(iGrp, iTmp - 1).Interior.Color: End If
            End If
          End If
          If Right(vAdr(iAdr), 1) = "c" Then
            fndRng(vAdr(iAdr), CLT4).FormulaR1C1 = "='" & ngcVAR & "'!r" & CStr(iGrp) & "c2"
            If fndRng(vAdr(iAdr), CLCM).Value = "[TD]h" Then bGrp = True
            bTmp = False '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
         End If
        Next iAdr
        shtV.Cells(iGrp, 2).Font.ColorIndex = IIf(bTmp, 3, xlColorIndexAutomatic)
        If iTmp > 2 Then
          shtV.Cells(iGrp, 2).FormulaR1C1 = "=sum(rc[1]:rc[" & CStr(iTmp - 2) & "])"
          shtV.Cells(iGrp, 1).Font.ColorIndex = xlColorIndexAutomatic
        Else: shtV.Cells(iGrp, 1).Font.ColorIndex = 3: End If
        iTmp = 2
      Else
        '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (normal mode)
        iGrp = Int((iCur - 1) / 10) + 31
        iTmp = iCur - 10 * Int((iCur - 1) / 10)
        shtV.Cells(iGrp, iTmp).Value = 0
        For iAdr = LBound(vAdr) + 1 To UBound(vAdr) - 1
          If fndRng(vAdr(iAdr), IIf(Right(vAdr(iAdr), 1) = "c", CLT5, 0)).FormulaR1C1 <> "" Then sCur = sCur & "+" & vAdr(iAdr) & IIf(Right(vAdr(iAdr), 1) = "c", CLT5, "")
          If Right(vAdr(iAdr), 1) = "c" Then
            fndRng(vAdr(iAdr), CLT4).FormulaR1C1 = "='" & ngcVAR & "'!r" & CStr(iGrp) & "c" & CStr(iTmp)
            If fndRng(vAdr(iAdr), CLCM).Value = "[TD]h" Then bGrp = True
         End If
        Next iAdr
        If sCur <> "" Then shtV.Cells(iGrp, iTmp).FormulaR1C1 = "=" & Mid(sCur, 2)
      End If
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If vAdr(0) = "CN:sys-stop.xml" Then shtV.Cells(30, 8).FormulaR1C1 = "=(r" & CStr(iGrp) & "c" & CStr(iTmp) & ">0)"
      If vAdr(0) = "CN:sys-stop.word" Then shtV.Cells(30, 9).FormulaR1C1 = "=(r" & CStr(iGrp) & "c" & CStr(iTmp) & ">0)"
      If vAdr(0) = "CN:sys-stop.visio" Then shtV.Cells(30, 10).FormulaR1C1 = "=(r" & CStr(iGrp) & "c" & CStr(iTmp) & ">0)"
      '|fffd||fffd||fffd||fffd||fffd||fffd| QS
      iAdr = InStr(optQS, "QS:" & Mid(vAdr(0), 4) & ",")
      If iAdr > 0 Then
        vTmp = Split(Mid(optQS, iAdr, InStr(iAdr, optQS, ";") - iAdr - 1), ",")
        For iAdr = LBound(vTmp) + 1 To UBound(vTmp)
          fndRng(vTmp(iAdr), CLQ4).FormulaR1C1 = "='" & ngcVAR & "'!r" & CStr(iGrp) & "c" & CStr(iTmp)
        Next iAdr
      End If
      '|fffd||fffd||fffd||fffd||fffd||fffd| TD
      If Left(vCD(iCur), 2) <> "CN" Then
        sTmp = Left(fndRng(vAdr(1), CLCM).Value, 4)
        With shtCD.Cells(iRow, SPTT)
          If sTmp = "[TB]" Then iRow = iRow + 1: If bGrp Then .Offset(-1, SPFL - .Column).FormulaR1C1 = "=r[1]c"
          .FormulaR1C1 = "=ngcL(" & fndInRow(vAdr, "$$*") & ",'" & ngcINP & "'!r1c" & CStr(INFL) & ")" '|fffd||fffd||fffd||fffd||fffd|
          .Offset(0, SPCM - .Column).Value = IIf(sTmp = "[TL]", "TL", "TD")
          For iAdr = LBound(vAdr) + 1 To UBound(vAdr) - 1
            If Right(vAdr(iAdr), 1) = "c" Then .Offset(0, SPID - .Column).FormulaR1C1 = "=" & vAdr(iAdr) & CStr(CLID): Exit For
          Next iAdr
          .Offset(0, SPTV - .Column).FormulaR1C1 = "='" & ngcVAR & "'!r" & CStr(iGrp) & "c" & CStr(iTmp)
          .Offset(0, SPTM - .Column).FormulaR1C1 = "='" & ngcVAR & "'!r" & CStr(iGrp) & "c" & CStr(iTmp)
          If sTmp = "[TL]" Then .Offset(0, SPTL - .Column).Borders(xlEdgeTop).LineStyle = xlContinuous: .Offset(0, SPTV - .Column).Borders(xlEdgeTop).LineStyle = xlContinuous
          If bGrp Then .Offset(0, SPFL - .Column).FormulaR1C1 = "=1*(rc" & CStr(SPTV) & "<>0)"
          If sTmp = "[TA]" Then iRow = iRow + 1: If bGrp Then .Offset(0, SPFL - .Column).FormulaR1C1 = "=r[-1]c"
        End With
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        iRow = iRow + 1
      End If
    Next iCur
  End If

  '|fffd||fffd||fffd||fffd||fffd||fffd| CD
  Application.StatusBar = "Writing codes on '" & ngcCSI & "'..."
  If iRow > 3 Then shtCD.Rows(iRow).EntireRow.Font.Size = 5
  vCD = Split(optCD, ";")
  iGrp = 0: iQst = 0: sSeq = "": sSsv = ""
  sCPf = """R""": sCPv = sCPf
  If UBound(vCD) - LBound(vCD) > 2 Then
    For iCur = LBound(vCD) + 1 To UBound(vCD) - 1
      vAdr = Split(vCD(iCur), ",")
      '|fffd||fffd||fffd||fffd||fffd||fffd| CD
      Select Case Left(vCD(iCur), 2)
      Case "CG"
        '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        wrtRowGrp sht:=shtCD, sSumE:=sSeq, sSumS:=sSsv, rGrp:=iGrp, rQst:=iQst, rCur:=iRow, sCPf:=sCPf, sCPv:=sCPv
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        iRow = iRow + 1: iGrp = iRow
        wrtApR rng:=shtCD.Range(shtCD.Cells(iRow, 1), shtCD.Cells(iRow, 9)), iCols:=Array(SPCC, SPCT, SPCM, SPID, SPFL, SPTM, SPCV, SPC1, SPC2), _
          cTxts:=Array("=ngcL(" & fndInRow(vAdr, "$$*") & ",'" & ngcINP & "'!r1c" & CStr(INFL) & ")", "", "CG", "=" & vAdr(1) & CStr(CLID), "0"), _
          tpl:=shtV.Cells(30, 4), iApr:=SPCV
        sTmp = fndInRow(vAdr, ">>*", False): If sTmp <> "" Then shtCD.Cells(iRow, SPTM).Value = "=" & sTmp
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        sTmp = fndRng(vAdr(1), CLCM).Value
        If Len(sTmp) > 4 Then wrtCmd rng:=shtCD.Cells(iRow, SPTT), dft:=Nothing, cmd:=fndRng(vAdr(1), CLCM), bQG:=False, bCG:=True, sMsg:=sErr
        '|fffd||fffd||fffd||fffd||fffd||fffd| QL
        iTmp = InStr(optQS, ";" & vAdr(0) & ",") + 1
        vTmp = Split(Mid(optQS, iTmp), ";"): iTmp = 1: iQst = 0
        While Left(vTmp(iTmp), 2) = "QS"
          iRow = iRow + 1: iQst = iQst + 1
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          vAdr = Split(vTmp(iTmp), ",")
          With shtCD.Cells(iRow, SPQV)
            .HorizontalAlignment = xlCenter
            .Borders.LineStyle = xlContinuous '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            .FormulaR1C1 = "=rc" & CStr(SPQD) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            .Interior.Color = 10079487
            If shtV.Cells(2, 26).Value Then
              sTmp = fndInRow(vAdr, "[]*", False) '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
              If Len(sTmp) > 3 Then sTmp = "&if('" & ngcVAR & "'!r2c20,char(10)&ngcL(" & sTmp & "),"""")" Else sTmp = ""
            Else: sTmp = "": End If
            .Offset(0, SPQT - .Column).FormulaR1C1 = "=ngcL(" & fndInRow(vAdr, "$$*") & ",'" & ngcINP & "'!r1c" & CStr(INFL) & ")" & sTmp '|fffd||fffd||fffd||fffd||fffd|
            .Offset(0, SPCM - .Column).Value = "QL" '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            .Offset(0, SPID - .Column).FormulaR1C1 = "=" & vAdr(1) & CStr(CLID) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            .Offset(0, SPQD - .Column).HorizontalAlignment = xlCenter
            .Offset(0, SPQD - .Column).Font.Color = 8421504 '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            .Offset(0, SPQD - .Column).Borders.Color = 8421504 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            .Offset(0, SPQD - .Column).Borders.LineStyle = xlContinuous
            .Offset(0, SPQE - .Column).HorizontalAlignment = xlLeft
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            sTmp = fndInRow(vAdr, "|fffd||fffd|*", False)
            If Len(sTmp) > 3 Then
              .Offset(0, SPQT - .Column).AddComment
              .Offset(0, SPQT - .Column).Comment.Text Text:=Mid(fndRng(sTmp).Value, 3)
              .Offset(0, SPQT - .Column).Comment.Shape.TextFrame.AutoSize = True
            End If
            '|fffd||fffd||fffd||fffd||fffd||fffd|
            .Offset(0, SPFL - .Column).FormulaR1C1 = "=1*or('" & ngcVAR & "'!r2c22*r" & CStr(iGrp) & "c,rc" & CStr(SPQE) & "<>"""")"
            '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            sTmp = "": sCur = "": iQty = 0
            For iAdr = LBound(vAdr) + 1 To UBound(vAdr) - 1
              '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
              fndRng(vAdr(iAdr), CLQ6).FormulaR1C1 = "=" & .Offset(0, SPQV - .Column).Address(ReferenceStyle:=xlR1C1, External:=True)
              '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| QS
              If fndRng(vAdr(iAdr), CLQ8).FormulaR1C1 <> "" Then
                sTmp = sTmp & "1*(" & vAdr(iAdr) & CStr(CLQ8) & "=0)&"
                sCur = sCur & vAdr(iAdr) & CStr(CLQ7) & ","
                iQty = iQty + 1
              Else: iAdr = iAdr - 1: Exit For: End If
            Next iAdr
            If iQty = 0 Then
              .Offset(0, SPQD - .Column).FormulaR1C1 = "=" & vAdr(1) & CStr(CLQ7)
            ElseIf iQty = 1 Then
              .Offset(0, SPQD - .Column).FormulaR1C1 = "=" & vAdr(1) & CStr(CLQ7)
            Else
              If iAdr < UBound(vAdr) - 1 Then
                sTmp = sTmp & "1*(" & vAdr(iAdr) & CStr(CLQ8) & "=0)"
                sCur = sCur & vAdr(iAdr) & CStr(CLQ7)
              Else: sTmp = sTmp & "1": sCur = sCur & "0": End If
              .Offset(0, SPTM - .Column).FormulaR1C1 = "=find(""1""," & sTmp & ")"
              .Offset(0, SPQD - .Column).FormulaR1C1 = "=choose(rc" & CStr(SPTM) & "," & sCur & ")"
            End If
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            sTmp = ""
            For iAdr = LBound(vAdr) + 1 To UBound(vAdr) - 1
              sTmp = sTmp & "&ngcQ(FALSE,rc" & CStr(SPQV) & "," & vAdr(iAdr) & CStr(CLQ5) & ",'" & ngcINP & "'!r1c" & CStr(INFL) & IIf(fndRng(vAdr(iAdr), CLQ9).FormulaR1C1 = "", "", "," & vAdr(iAdr) & CStr(CLQ9)) & ")"
            Next iAdr
            .Offset(0, SPQE - .Column).FormulaR1C1 = "=" & Mid(sTmp, 2)
            .Offset(0, SPQE - .Column).Font.Color = 255
          End With
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          sTmp = fndRng(vAdr(1), CLCM).Value
          If Len(sTmp) > 4 Then wrtCmd rng:=shtCD.Cells(iRow, SPQV), dft:=Nothing, cmd:=fndRng(vAdr(1), CLCM), bQG:=False, bCG:=False, sMsg:=sErr
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| QR
          iAdr = InStr(optQR, ";" & vAdr(0) & ",")
          If iAdr > 0 Then
            vAdr = Split(Mid(optQR, iAdr + 1, InStr(iAdr + 1, optQR, ";") - iAdr - 2), ",")
            For iAdr = LBound(vAdr) + 1 To UBound(vAdr)
              fndRng(vAdr(iAdr), CLQ4).FormulaR1C1 = "=" & wrtAdr(iRow, SPQV, ngcCSI)
            Next iAdr
          End If
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          iTmp = iTmp + 1
        Wend
        If iRow > iGrp Then shtCD.Range(shtCD.Cells(iGrp + 1, SPQV), shtCD.Cells(iRow, SPQV)).Rows.Group
        vTmp = ""
      Case "FC", "FM", "FS", "VC", "VM", "VS"
        iRow = iRow + 1
        '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| Prices
        sTmp = Mid(vCD(iCur), 4, InStr(4, vCD(iCur), ",") - 3)
        If InStr(sTmp, ":") > 0 Then sTmp = Left(sTmp, InStr(sTmp, ":") - 1) & ","
        If Left(fndRng(vAdr(1), CLCM).Value, 4) = "[CK]" Then
          bTmp = True: sTmp = "CK:" & Left(sTmp, 3) & "####" & Right(sTmp, 3)
        Else: bTmp = False: sTmp = "CD:" & sTmp: End If
        iTmp = InStr(indCD, ";" & sTmp)
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If shtV.Cells(2, 26).Value Then
          sCur = fndInRow(vAdr, "[]*", False) '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
          If Len(sCur) > 3 Then sCur = "&if('" & ngcVAR & "'!r2c20,char(10)&ngcL(" & sCur & "),"""")" Else sCur = ""
        Else: sCur = "": End If
        With shtCD.Cells(iRow, SPCC)
          If iTmp > 0 Then '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| Prices
            iPrc = InStr(iTmp + 1, indCD, ",") + 1
            sTmp = "'" & ngcPRC & "'!r" & Mid(indCD, iPrc, InStr(iPrc, indCD, ";") - iPrc) & "c"
            .FormulaR1C1 = "=" & IIf(bTmp, vAdr(1) & CStr(CLID), sTmp & CStr(PRID))
            .Offset(0, SPCT - .Column).FormulaR1C1 = "=" & sTmp & CStr(PRTX) & sCur
            .Offset(0, SPC1 - .Column).FormulaR1C1 = "=" & sTmp & CStr(PRC1) & IIf(bTmp, "*Str2Len(rc" & CStr(SPCC) & ")+" & sTmp & CStr(PRK1), "")
            .Offset(0, SPC2 - .Column).FormulaR1C1 = "=" & sTmp & CStr(PRC2) & IIf(bTmp, "*Str2Len(rc" & CStr(SPCC) & ")+" & sTmp & CStr(PRK2), "")
            iPrc = Val(Mid(indCD, iPrc, InStr(iPrc, indCD, ";") - iPrc))
          Else '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| CL
            .FormulaR1C1 = "=" & vAdr(1) & CStr(CLID)
            .Offset(0, SPCT - .Column).FormulaR1C1 = "=ngcL(" & fndInRow(vAdr, "$$*") & ",'" & ngcINP & "'!r1c" & CStr(INFL) & ")" & sCur '|fffd||fffd||fffd||fffd||fffd|
            If Left(vCD(iCur), 1) = "F" Then .Offset(0, SPC1 - .Column).Value = "0": .Offset(0, SPC2 - .Column).Value = "0"
            iPrc = 0
          End If
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          sTmp = fndInRow(vAdr, "|fffd||fffd|*", False)
          If Len(sTmp) > 3 Then
            .AddComment
            .Comment.Text Text:=Mid(fndRng(sTmp).Value, 3)
            .Comment.Shape.TextFrame.AutoSize = True
          End If
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          If InStr(4, vAdr(0), ":") > 0 Then
            sTmp = Mid(vAdr(0), InStr(4, vAdr(0), ":") + 1)
            sCPf = sTmp & CStr(CLC4): sCPv = sTmp & CStr(CLC5)
          Else: sCPf = "r" & CStr(iGrp) & "c": sCPv = sCPf: End If
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| VAR
          If Left(vCD(iCur), 1) = "V" Then
            .Font.Italic = True
            .Offset(0, SPCT - .Column).Font.Italic = True
            .Offset(0, SPCV - .Column).Font.Italic = True
            .Offset(0, SPCV - .Column).Interior.ColorIndex = 15
          End If
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          .Offset(0, SPCM - .Column).Value = Left(vAdr(0), 1) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          .Offset(0, SPID - .Column).FormulaR1C1 = "=" & IIf(Left(vCD(iCur), 1) = "V", sCPv, sCPf) '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          sTmp = Mid(vCD(iCur), InStr(vCD(iCur), ",") + 1)
          sTmp = Replace(sTmp, "c,", "c" & CStr(IIf(Left(vCD(iCur), 1) = "F", CLC4, CLC5)) & ","): sTmp = Left(sTmp, Len(sTmp) - 1)
          sTmp = Switch(Mid(vCD(iCur), 2, 1) = "S", "sum(" & sTmp & ")", Mid(vCD(iCur), 2, 1) = "M", "max(" & sTmp & ")", True, sTmp)
          .Offset(0, SPCV - .Column).FormulaR1C1 = "=" & sTmp
          .Offset(0, SPTM - .Column).FormulaR1C1 = .Offset(0, SPCV - .Column).FormulaR1C1 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          .Offset(0, SPFL - .Column).FormulaR1C1 = IIf(Left(vCD(iCur), 1) = "F", "=not('" & ngcVAR & "'!r2c18)", "='" & ngcVAR & "'!r2c18") & "*(rc" & CStr(SPCV) & "<>0)"  '|fffd||fffd||fffd||fffd||fffd||fffd|
          '|fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd| Prices
          If iPrc > 0 Then
            If shtPR.Cells(iPrc, PRQ1).FormulaR1C1 = "" Then shtPR.Cells(iPrc, PRQ1).FormulaR1C1 = "=rc" & CStr(PRQ2)
            If Left(.Offset(0, SPID - .Column).Value & "-", 2) <> shtV.Cells(2, 10).Value & "-" Then
              shtPR.Cells(iPrc, PRQ2).FormulaR1C1 = IIf(shtPR.Cells(iPrc, PRQ2).FormulaR1C1 = "", "=", shtPR.Cells(iPrc, PRQ2).FormulaR1C1 & "+") & "'" & ngcCSI & "'!" & .Offset(0, SPCV - .Column).Address(ReferenceStyle:=xlR1C1)
            Else
              shtPR.Cells(iPrc, PRQ1).FormulaR1C1 = shtPR.Cells(iPrc, PRQ1).FormulaR1C1 & "+'" & ngcCSI & "'!" & .Offset(0, SPCV - .Column).Address(ReferenceStyle:=xlR1C1)
            End If
          End If
          '|fffd||fffd||fffd|-|fffd||fffd| |fffd||fffd| CL
          If Mid(fndRng(vAdr(1), CLCM).Value, 5, 1) = "r" Then fndRng(vAdr(1), CLC6).FormulaR1C1 = "=" & wrtAdr(iRow, SPCV, ngcCSI)
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| CR
          iAdr = InStr(optCR, ";" & Split(vAdr(0), ":")(1) & ",")
          If iAdr > 0 Then
            vAdr = Split(Mid(optCR, iAdr + 1, InStr(iAdr + 1, optCR, ";") - iAdr - 2), ",")
            For iAdr = LBound(vAdr) + 1 To UBound(vAdr)
              sTmp = fndRng(vAdr(iAdr), CLQ4).FormulaR1C1
              fndRng(vAdr(iAdr), CLQ4).FormulaR1C1 = IIf(sTmp = "", "=", sTmp & "+") & "'" & ngcCSI & "'!r" & CStr(iRow) & "c" & CStr(SPCV)
            Next iAdr
          End If
        End With
      Case "CI"
        iRow = iRow + 1
        shtCD.Cells(iRow, SPCC).Value = "=" & vAdr(1) & CStr(CLID)
        shtCD.Cells(iRow, SPCC).Font.ColorIndex = 5
        shtCD.Cells(iRow, SPFL).Value = "=" & wrtAdr(2, 21, ngcVAR) & "*(" & vAdr(1) & CStr(CLC4) & ">0)"
        shtCD.Cells(iRow, SPCM).Value = Left(vAdr(0), 1)  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        sTmp = "": iAdr = 1
        With fndRng(vAdr(1), CLC4)
          While (.Offset(, iAdr).FormulaR1C1 <> "") And (Left(.Offset(, iAdr).FormulaR1C1, 2) <> "$$")
            sTmp = sTmp & "&if(iserror(" & vAdr(1) & CStr(CLC4 + iAdr) & "),"""",if(" & vAdr(1) & CStr(CLC4 + iAdr) & "="""",""""," & IIf(sTmp = "", "", """;""&") & vAdr(1) & CStr(CLC4 + iAdr) & "))"
            iAdr = iAdr + 1
          Wend
        End With
        shtCD.Cells(iRow, SPCT).WrapText = False
        shtCD.Cells(iRow, SPCT).FormulaR1C1 = "=if(" & vAdr(1) & CStr(CLC4) & "," & IIf(sTmp = "", """""", Mid(sTmp, 2)) & ","""")"
        shtCD.Cells(iRow, SPCT).Interior.Color = 15853019: shtCD.Cells(iRow, SPCV).Interior.Color = 15853019
        shtCD.Cells(iRow, SPC1).Interior.Color = 15853019: shtCD.Cells(iRow, SPC2).Interior.Color = 15853019
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        sTmp = fndRng(vAdr(1), CLCM).Value
        If Len(sTmp) > 4 Then wrtCmd rng:=shtCD.Cells(iRow, SPQV), dft:=Nothing, cmd:=fndRng(vAdr(1), CLCM), bQG:=False, bCG:=False, sMsg:=sErr
      End Select
    Next iCur
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
    wrtRowGrp sht:=shtCD, sSumE:=sSeq, sSumS:=sSsv, rGrp:=iGrp, rQst:=iQst, rCur:=iRow, sCPf:=sCPf, sCPv:=sCPv
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    iRow = iRow + 2: If sSeq = "" Then sSeq = ",0"
    wrtApR rng:=shtCD.Range(shtCD.Cells(iRow, SPC1), shtCD.Cells(iRow, SPC2)), iCols:=Array(1, 2), _
        cTxts:=Array("=sum(" & Mid(sSeq, 2) & ")", "=sum(" & Mid(sSeq, 2) & ")"), _
        tpl:=shtV.Cells(30, 4), iApr:=0
    shtCD.Cells(iRow, SPCV).FormulaR1C1 = "=ngcL('" & ngcVAR & "'!r19c3,'" & ngcINP & "'!r1c" & CStr(INFL) & ")"
    shtCD.Cells(iRow, SPCV).HorizontalAlignment = xlRight
    shtCD.Cells(iRow, SPFL).FormulaR1C1 = "=1*or(rc" & CStr(SPC1) & "<>0,rc" & CStr(SPC2) & "<>0)"
    shtPR.Cells(4, PRC1).FormulaR1C1 = "='" & ngcCSI & "'!r" & CStr(iRow) & "c" & CStr(SPC1)
    shtPR.Cells(4, PRC2).FormulaR1C1 = "='" & ngcCSI & "'!r" & CStr(iRow) & "c" & CStr(SPC2)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    iRow = iRow + 1: If sSsv = "" Then sSsv = ",0"
    wrtApR rng:=shtCD.Range(shtCD.Cells(iRow, SPC1), shtCD.Cells(iRow, SPC2)), iCols:=Array(1, 2), _
        cTxts:=Array("=sum(" & Mid(sSsv, 2) & ")", "=sum(" & Mid(sSsv, 2) & ")"), _
        tpl:=shtV.Cells(30, 4), iApr:=0
    shtCD.Cells(iRow, SPCV).FormulaR1C1 = "=ngcL('" & ngcVAR & "'!r19c4,'" & ngcINP & "'!r1c" & CStr(INFL) & ")"
    shtCD.Cells(iRow, SPCV).HorizontalAlignment = xlRight
    shtCD.Cells(iRow, SPFL).FormulaR1C1 = "=1*or(rc" & CStr(SPC1) & "<>0,rc" & CStr(SPC2) & "<>0)"
    shtPR.Cells(4, PRC1).FormulaR1C1 = "='" & ngcCSI & "'!r" & CStr(iRow) & "c" & CStr(SPC1)
    shtPR.Cells(4, PRC2).FormulaR1C1 = "='" & ngcCSI & "'!r" & CStr(iRow) & "c" & CStr(SPC2)
    '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    iRow = iRow + 1
    wrtApR rng:=shtCD.Range(shtCD.Cells(iRow, SPC1), shtCD.Cells(iRow, SPC2)), iCols:=Array(1, 2), _
        cTxts:=Array("=r[-2]c+r[-1]c", "=r[-2]c+r[-1]c"), tpl:=shtV.Cells(30, 4), iApr:=0
    shtCD.Cells(iRow, SPCV).FormulaR1C1 = "='" & ngcPRC & "'!r1c1"
    shtCD.Cells(iRow, SPCV).HorizontalAlignment = xlRight
    shtCD.Cells(iRow, SPFL).FormulaR1C1 = "=rc[-2]*rc[-1]"
    shtPR.Cells(4, PRC1).FormulaR1C1 = "='" & ngcCSI & "'!r" & CStr(iRow) & "c" & CStr(SPC1)
    shtPR.Cells(4, PRC2).FormulaR1C1 = "='" & ngcCSI & "'!r" & CStr(iRow) & "c" & CStr(SPC2)
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  shtV.Cells(30, 4).Value = shtCD.Range(shtCD.Cells(2, SPFL), shtCD.Cells(iRow, SPFL)).Address(False, False)
  
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Application.StatusBar = False
End Sub

'create Visio and Word commands
Private Sub ngcCreateVW(optVS As String, optWD As String, sErr As String)
  Dim vVW As Variant, iCur As Long, sCmd As String, iCol As Long
  Dim rng As Range, sAdr As String, iBeg As Long, iRow As Long
  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  iRow = shtV.Cells.SpecialCells(xlCellTypeLastCell).Row
  While shtV.Cells(iRow, 1).FormulaR1C1 = "": iRow = iRow - 1: Wend
  
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Visio
  If shtV.Cells(2, 15).Value Then
    Application.StatusBar = "Writing MS Visio commands..."
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    iRow = iRow + 2
    wrtApR rng:=shtV.Range(shtV.Cells(iRow, 1), shtV.Cells(iRow, 2)), iCols:=Array(1), cTxts:=Array("Visio"), tpl:=shtV.Cells(30, 1), iApr:=2
    vVW = Split(optVS, ","): iRow = iRow + 1: iBeg = iRow
    shtV.Cells(30, 6).Value = shtV.Cells(iRow, 3).Address(False, False)
    If UBound(vVW) - LBound(vVW) > 2 Then
      For iCur = LBound(vVW) + 1 To UBound(vVW)
        sCmd = Mid(vVW(iCur), 6)
        shtV.Cells(iRow, VVID).FormulaR1C1 = "=" & sCmd & CStr(CLID)
        shtV.Cells(iRow, VVTM).FormulaR1C1 = "=if(" & sCmd & CStr(CLVT) & "<>""""," & sCmd & CStr(CLVT) & ","""")"
        shtV.Cells(iRow, VVCM).FormulaR1C1 = "=if(" & sCmd & CStr(CLVH) & "," & sCmd & CStr(CLCM) & IIf(Len(fndRng(sCmd, CLCM).Value) > 4, "&" & sCmd & CStr(CLVH), "") & ",""[RM]"")"
        If Left(vVW(iCur), 4) = "[VO]" Or Left(vVW(iCur), 4) = "[VS]" Or Left(vVW(iCur), 4) = "[VD]" Then
          shtV.Cells(iRow, VVPT).FormulaR1C1 = "=if(" & sCmd & CStr(CLVP) & "<>""""," & sCmd & CStr(CLVP) & ","""")"
          '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
          iCol = VVST
          While shtV.Cells(iRow, iCol).Value <> "": iCol = iCol + 2: Wend
          '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
          Set rng = fndRng(sCmd & "1").EntireRow.Find(What:=">>*", LookIn:=xlValues, LookAt:=xlWhole)
          If Not rng Is Nothing Then
            sAdr = rng.Address
            Do
              shtV.Cells(iRow, iCol).FormulaR1C1 = "=" & sCmd & CStr(rng.Column)
              shtV.Cells(iRow, iCol + 1).FormulaR1C1 = "=" & sCmd & CStr(rng.Column + 1)
              Set rng = fndRng(sCmd & "1").EntireRow.Find(What:=">>*", After:=rng, LookIn:=xlValues, LookAt:=xlWhole)
              iCol = iCol + 2
            Loop While Not rng Is Nothing And rng.Address <> sAdr
          End If
        End If
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        iRow = iRow + 1
      Next iCur
      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      shtV.Cells(30, 6).Value = shtV.Cells(30, 6).Value & ":" & shtV.Cells(iRow - 1, 3).Address(False, False)
      shtV.Cells(2, 15).Value = (iBeg < iRow)
    End If
  End If
  
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Word
  If shtV.Cells(2, 16).Value Then
    Application.StatusBar = "Writing MS Word commands..."
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    iRow = iRow + 1
    wrtApR rng:=shtV.Range(shtV.Cells(iRow, 1), shtV.Cells(iRow, 2)), iCols:=Array(1), cTxts:=Array("Word"), tpl:=shtV.Cells(30, 1), iApr:=2
    vVW = Split(optWD, ","): iRow = iRow + 1: iBeg = iRow
    shtV.Cells(30, 7).Value = shtV.Cells(iRow, 3).Address(False, False)
    If UBound(vVW) - LBound(vVW) > 2 Then
      For iCur = LBound(vVW) + 1 To UBound(vVW)
        sCmd = Mid(vVW(iCur), 6)
        shtV.Cells(iRow, VWID).FormulaR1C1 = "=" & sCmd & CStr(CLID)
        shtV.Cells(iRow, VWCM).FormulaR1C1 = "=if(" & sCmd & CStr(CLVH) & "," & sCmd & CStr(CLCM) & ",""[RM]"")"
        Select Case Left(vVW(iCur), 4)
        Case "[WO]"
          shtV.Cells(iRow, VWTM).FormulaR1C1 = "=if(" & sCmd & CStr(CLWT) & "="""",""""," & sCmd & CStr(CLWT) & ")"
          shtV.Cells(iRow, VWPT).FormulaR1C1 = "=if(" & sCmd & CStr(CLWA) & "="""",""""," & sCmd & CStr(CLWA) & ")"
        Case "[WA]"
          'no procedures
        Case "[WQ]"
          shtV.Cells(iRow, VWTM).FormulaR1C1 = "=if(" & sCmd & CStr(CLWD) & ",1,0)"
          shtV.Cells(iRow, VWPT).FormulaR1C1 = "=if(" & sCmd & CStr(CLWW) & ",1,0)"
          shtV.Cells(iRow, VWT1).FormulaR1C1 = "=ngcL(" & sCmd & CStr(CLWQ) & ",'" & ngcINP & "'!r1c" & CStr(INFL) & ")"
          shtV.Cells(iRow, VWT2).FormulaR1C1 = "=ngcL(" & fndInRow(Array("", sCmd, ""), "$$*") & ",'" & ngcINP & "'!r1c" & CStr(INFL) & ")"
          fndRng(sCmd, CLWR).FormulaR1C1 = "='" & ngcVAR & "'!r" & CStr(iRow) & "c" & CStr(VWTM)
        Case "[WS]", "[WD]", "[WT]"
          shtV.Cells(iRow, VWTM).FormulaR1C1 = "=" & sCmd & CStr(CLWT)
          shtV.Cells(iRow, VWPT).FormulaR1C1 = "=" & sCmd & CStr(CLWA)
          '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
          iCol = VWST
          While shtV.Cells(iRow, iCol).Value <> "": iCol = iCol + 2: Wend
          '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
          Set rng = fndRng(sCmd & "1").EntireRow.Find(What:=">>*", LookIn:=xlValues, LookAt:=xlWhole)
          If Not rng Is Nothing Then
            sAdr = rng.Address
            Do
              shtV.Cells(iRow, iCol).FormulaR1C1 = "=" & sCmd & CStr(rng.Column)
              shtV.Cells(iRow, iCol + 1).FormulaR1C1 = "=" & sCmd & CStr(rng.Column + 1)
              Set rng = fndRng(sCmd & "1").EntireRow.Find(What:=">>*", After:=rng, LookIn:=xlValues, LookAt:=xlWhole)
              iCol = iCol + 2
            Loop While Not rng Is Nothing And rng.Address <> sAdr
          End If
        End Select
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        iRow = iRow + 1
      Next iCur
      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      shtV.Cells(30, 7).Value = shtV.Cells(30, 7).Value & ":" & shtV.Cells(iRow - 1, 3).Address(False, False)
      shtV.Cells(2, 16).Value = (iBeg < iRow)
    End If
  End If
  
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Application.StatusBar = False
End Sub

'import configurator sheets
'bReadTexts: 0=|fffd||fffd||fffd|, 1=|fffd||fffd||fffd|, -1=|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub ngcImportData(bReadTexts As Long, bReadDatas As Boolean)
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Not fndIsSheet(ngcVAR) Then Exit Sub
  Set shtV = Sheets(ngcVAR)
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd|
  Dim iCache As Long, sDir As String
  sDir = shtV.Cells(2, 8).Value
  If Right(sDir, 1) = "\" Then sDir = Left(sDir, Len(sDir) - 1)
  If Dir(sDir, vbDirectory) = "" Then MsgBox sDir & " not found!", vbCritical: Exit Sub
  If Dir(sDir & "\SAPcodes_cache.ngc") <> "" Then
    Dim fs As Object
    Set fs = CreateObject("Scripting.FileSystemObject").getFile(sDir & "\SAPcodes_cache.ngc")
    iCache = MsgBox("Local cache file was found (modified " & fs.DateLastModified & ")." & vbCrLf & "Do you want to use the cache file?", vbQuestion + vbYesNoCancel)
    Set fs = Nothing
  Else: iCache = vbNo: End If
  If iCache = vbCancel Then Exit Sub
  On Error GoTo ngcSapImportError
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| xml
  Application.Cursor = xlWait
  Dim xmlAns As Object, iRow As Long
  Set xmlAns = CreateObject("MSXML2.DOMDocument")
  If iCache = vbNo Then
    Application.StatusBar = "Creating SOAP client...": DoEvents
    Const wsdlURL As String = "http://ntsapcs.iskratel.si:8000/sap/bc/srt/wsdl/srvc_001CC45D29B61ED280F993E7957E06E1/wsdl11/allinone/standard/document?sap-client=400&sap-user=WEBSERVICES&sap-password=komunik2"
    Dim soapClient As Object, soapAns As Object, soapFile As Object, sAns As String
    Set soapClient = CreateObject("MSOSOAP.SoapClient30")
    soapClient.MSSoapInit wsdlURL
    soapClient.ConnectorProperty("AuthUser") = "WEBSERVICES"
    soapClient.ConnectorProperty("AuthPassword") = "komunik2"
    soapClient.ConnectorProperty("Timeout") = 360000
    '|fffd||fffd||fffd||fffd||fffd||fffd|
    Application.StatusBar = "Getting XML from SOAP client...": DoEvents
    Set soapAns = soapClient.Z_PROD_GRADNIKI("2007-01-01", "4700")
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| XML
    Application.StatusBar = "Saving 'SAPcodes_cache.ngc'...": DoEvents
    Set soapFile = CreateObject("Scripting.FileSystemObject").CreateTextFile(sDir & "\SAPcodes_cache.ngc", True, True)
    soapFile.WriteLine soapAns(0).xml: soapFile.Close
    Set soapFile = Nothing: Set soapClient = Nothing: Set soapAns = Nothing: sAns = ""
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  Application.StatusBar = "Loading 'SAPcodes_cache.ngc'...": DoEvents
  xmlAns.Load sDir & "\SAPcodes_cache.ngc"
  
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
  Application.EnableEvents = False
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim sht As Worksheet, iSht As Long, sErr As String
  Dim xmlNod As Object, xmlElm As Object, oFnd As Range
  Dim sCode As String, bCode As Boolean, sTmp As String
  sErr = ""
  If bReadTexts Then
    For iSht = IIf(bReadTexts > 0, 1, 0) To IIf(bReadTexts > 0, ActiveWorkbook.Sheets.Count, 0)
      If iSht > 0 Then Set sht = ActiveWorkbook.Sheets(iSht) Else Set sht = ActiveSheet
      If Left(sht.Name, 1) = "." Then
        Application.StatusBar = "Processing '" & sht.Name & "'..."
        sht.Outline.ShowLevels RowLevels:=2
        For iRow = 1 To sht.Cells.SpecialCells(xlCellTypeLastCell).Row
          bCode = False
          If IsError(sht.Cells(iRow, CLID).Value) Then
            sErr = sErr & "; - code was ignored on '" & sht.Name & "'!r" & CStr(iRow)
          ElseIf sht.Cells(iRow, CLID).Value = "ABCxxxxYY" Or sht.Cells(iRow, CLID).Value = "ABCxxxxDE" Then
            'no procedure
          ElseIf sht.Cells(iRow, CLCM).FormulaR1C1 Like "*[[]CD[]]*" Then
            Set xmlNod = xmlAns.SelectSingleNode("//*[MATNR='" & sht.Cells(iRow, CLID).Value & "']")
            bCode = True
          ElseIf sht.Cells(iRow, CLCM).FormulaR1C1 Like "*[[]CK[]]*" Then
            Set xmlNod = xmlAns.SelectSingleNode("//*[MATNR='" & Left(sht.Cells(iRow, CLID).Value, 3) & "0000" & Right(sht.Cells(iRow, CLID).Value, 2) & "']")
            bCode = True
          Else: Set xmlNod = Nothing: bCode = False: End If
          If bCode And Not xmlNod Is Nothing Then
            sCode = ""
            Set oFnd = sht.Rows(iRow).EntireRow.Find(What:="$$*", LookIn:=xlValues, LookAt:=xlWhole)
            If oFnd Is Nothing Then
              sErr = sErr & "; - text mark missing for '" & sht.Name & "'!r" & CStr(iRow)
            Else
              Set xmlElm = xmlNod.SelectSingleNode("TEXT_EN")
              If xmlElm Is Nothing Then
                sErr = sErr & "; - 'TEXT_EN' missing for '" & sht.Cells(iRow, CLID).Value & "'"
              ElseIf xmlElm.Text = "" Then
                sErr = sErr & "; - 'TEXT_EN' is empty for '" & sht.Cells(iRow, CLID).Value & "'"
              Else: sCode = "[E1]" & xmlElm.Text: End If
              Set xmlElm = xmlNod.SelectSingleNode("TEXT_RU")
              If xmlElm Is Nothing Then
                sErr = sErr & "; - 'TEXT_RU' missing for '" & sht.Cells(iRow, CLID).Value & "'"
              ElseIf xmlElm.Text = "" Then
                sErr = sErr & "; - 'TEXT_RU' is empty for '" & sht.Cells(iRow, CLID).Value & "'"
              Else: sCode = sCode & "[R1]" & xmlElm.Text: End If
              If sCode <> "" Then sht.Cells(iRow, oFnd.Column).Value = "$$" & sCode
            End If
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If Not bReadDatas Then
              Set xmlElm = xmlNod.SelectSingleNode("VALID")
              If xmlElm Is Nothing Then
                sErr = sErr & "; - 'VALID' missing for '" & sht.Cells(iRow, CLID).Value & "'"
              ElseIf LCase(xmlElm.Text) <> "yes" Then
                sTmp = ngcL(fndRng(fndInRow(Array("", "'" & sht.Name & "'!r" & CStr(iRow) & "c", ""), "$$*")).Text, "E1", False)
                sErr = sErr & "; - " & sht.Cells(iRow, CLID).Value & " not valid (" & Replace(sTmp, ";", "") & ")"
              End If
            End If
          ElseIf bCode Then
            sTmp = ngcL(fndRng(fndInRow(Array("", "'" & sht.Name & "'!r" & CStr(iRow) & "c", ""), "$$*")).Text, "E1", False)
            sErr = sErr & "; - " & sht.Cells(iRow, CLID).Value & " not found (" & Replace(sTmp, ";", "") & ")"
          End If
        Next iRow
      End If
    Next iSht
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Dim dTmp As Double
  If bReadDatas Then
    iRow = 6: Set sht = ActiveWorkbook.Sheets(ngcPRC)
    While sht.Cells(iRow, PRID).Value <> ""
      sCode = Replace(sht.Cells(iRow, PRID).Value, "#", "0")
      Application.StatusBar = "Processing '" & ngcPRC & "'... " & sCode
      Set xmlNod = xmlAns.SelectSingleNode("//*[MATNR='" & sCode & "']")
      If Not xmlNod Is Nothing Then
        '|fffd||fffd||fffd||fffd||fffd||fffd| ABC
        Set xmlElm = xmlNod.SelectSingleNode("MAABC")
        If Not xmlElm Is Nothing Then If xmlElm.Text <> "" Then sht.Cells(iRow, PRAB).Value = xmlElm.Text
        '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        Set xmlElm = xmlNod.SelectSingleNode("NTGEW")
        If Not xmlElm Is Nothing Then
          If xmlElm.Text <> "" Then
            dTmp = Val(xmlElm.Text)
            Set xmlElm = xmlNod.SelectSingleNode("GEWEI")
            If Not xmlElm Is Nothing Then If LCase(xmlElm.Text) = "g" Then dTmp = dTmp * 0.001
            sht.Cells(iRow, PRWT).Value = dTmp
          End If
        End If
        '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        Set xmlElm = xmlNod.SelectSingleNode("VOLUM")
        If Not xmlElm Is Nothing Then
          If xmlElm.Text <> "" Then
            dTmp = Val(xmlElm.Text)
            Set xmlElm = xmlNod.SelectSingleNode("VOLEH")
            If Not xmlElm Is Nothing Then If LCase(xmlElm.Text) = "cm" Then dTmp = dTmp * 1000#
            sht.Cells(iRow, PRVL).Value = dTmp
          End If
        End If
        '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        sTmp = "": Set xmlElm = xmlNod.SelectSingleNode("VALID")
        If xmlElm Is Nothing Then
          sErr = sErr & "; - 'VALID' missing for '" & sht.Cells(iRow, PRID).Value & "'"
          sht.Cells(iRow, PRST).Interior.Color = 255
        Else
          If xmlElm.Text <> "" Then sTmp = xmlElm.Text
          If LCase(sTmp) <> "yes" Then
            sht.Cells(iRow, PRST).Interior.Color = 255
            sErr = sErr & "; - " & sht.Cells(iRow, PRID).Value & " not valid (" & Replace(ngcL(sht.Cells(iRow, PRTX).Text, "E1", False), ";", "") & ")"
          End If
          Set xmlElm = xmlNod.SelectSingleNode("MSTAE")
          If Not xmlElm Is Nothing Then
            If LCase(xmlElm.Text) = "b" And LCase(sTmp) = "yes" Then sht.Cells(iRow, PRST).Interior.Color = 255
            If LCase(xmlElm.Text) = "y" And LCase(sTmp) = "yes" Then sht.Cells(iRow, PRST).Interior.Color = 8420607
            If LCase(xmlElm.Text) = "s" And LCase(sTmp) = "yes" Then sht.Cells(iRow, PRST).Interior.Color = 13421823
            If LCase(xmlElm.Text) = "8" And LCase(sTmp) = "yes" Then sht.Cells(iRow, PRST).Interior.Color = 10855845
            If xmlElm.Text <> "" Then sTmp = sTmp & "(" & xmlElm.Text & ")"
          End If
          sht.Cells(iRow, PRST).Value = sTmp
        End If
        '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
        Set xmlElm = xmlNod.SelectSingleNode("MATKL")
        If Not xmlElm Is Nothing Then If xmlElm.Text <> "" Then sht.Cells(iRow, PRTP).Value = xmlElm.Text
      Else
        sErr = sErr & ";" & " - " & sht.Cells(iRow, PRID).Value & " not found (" & Replace(ngcL(sht.Cells(iRow, PRTX).Text, "E1", False), ";", "") & ")"
        sht.Cells(iRow, PRST).Interior.Color = 255
        DoEvents
      End If
      iRow = iRow + 1
    Wend
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
ngcSapImportError:
  Application.StatusBar = False
  Application.EnableEvents = True
  Application.Calculation = xlCalculationAutomatic
  Application.ScreenUpdating = True
  Application.Cursor = xlDefault
  If Err Then
    MsgBox "An error occur during operation (" & CStr(Err.Number) & ")." & vbLf & Err.Description, vbCritical
  ElseIf sErr <> "" Then
    If bReadDatas And bReadTexts = 0 Then
      sTmp = "The following errors were found in datas for active (codes on " & ngcPRC & ") codes:"
    ElseIf bReadDatas And bReadTexts < 0 Then
      sTmp = "The following errors were found in codes (also inactive) on current sheet and datas for active codes (on " & ngcPRC & "):"
    ElseIf bReadDatas And bReadTexts > 0 Then
      sTmp = "The following errors were found in codes (also inactive) on all sheets and datas for active codes (on " & ngcPRC & "):"
    ElseIf bReadTexts < 0 Then
      sTmp = "The following errors were found in codes (also inactive) on current sheet:"
    ElseIf bReadTexts > 0 Then
      sTmp = "The following errors were found in codes (also inactive) on all sheets:"
    End If
    ngcMessage.ManualShow sErr, sTmp
  Else: MsgBox "Work done!", vbInformation: End If
End Sub
Attribute VB_Name = "C2_Functions"
'(c)2010 Terekhov Alexey. All rights reserved.
'Phone: +38631334953, Skype:terekhov_alexey
Option Explicit

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Function escID(sID As Variant, iType As Long, Optional ByRef rngAdr As Range = Nothing, Optional ByRef sErr As String = "") As String
  Dim i As Long, BadChars As String, sRep As String
  Select Case iType
  Case 0 'command IDs
    BadChars = " \/,:;*?""<>|{}[]" & Chr(7) & vbCr & vbLf: sRep = ""
  Case 1 'checkboxes name
    BadChars = " .,-\/:;*?""'|<>(){}[]" & Chr(7) & vbCr & vbLf: sRep = "_"
  Case Else 'file names
    BadChars = "\/:*?""<>|" & Chr(7) & vbCr & vbLf: sRep = ""
  End Select
  escID = sID
  For i = 1 To Len(BadChars)
    escID = Replace(escID, Mid(BadChars, i, 1), sRep)
  Next i
  If Not rngAdr Is Nothing And sID <> escID Then
    BadChars = ";'" & rngAdr.Parent.Name & "'!" & rngAdr.Address(RowAbsolute:=False, ColumnAbsolute:=False) & " - forbidden ID '" & sID & "' (use '" & escID & "')"
    If InStr(sErr, BadChars) = 0 Then sErr = sErr & BadChars
  End If
End Function

'|fffd||fffd||fffd||fffd||fffd| Offit
Function fndIsOffit(Optional sFile As String = "SpecLoader.exe") As Boolean
  Dim sStr As String, sDir As String
  On Error Resume Next
  sStr = CreateObject("WScript.Shell").RegRead("HKEY_CURRENT_USER\Software\Iskratel\Offit\InstalationPath")
  If sStr <> "" Then
    sStr = sStr & IIf(Right(sStr, 1) <> "\", "\", "") & "AddIns\Configurator2Offit\"
    sDir = Sheets(ngcVAR).Cells(2, 8).Value
    If (Dir(sStr & sFile) <> "") And (Dir(sDir, vbDirectory) <> "") Then fndIsOffit = True
  Else: fndIsOffit = False: End If
End Function

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Function fndIsSheet(sName As String, Optional ByRef wbk As Workbook = Nothing) As Boolean
  fndIsSheet = False
  If wbk Is Nothing Then Set wbk = ActiveWorkbook
  Dim sht As Worksheet
  For Each sht In wbk.Sheets
    If sht.Name = sName Then fndIsSheet = True: Exit For
  Next sht
End Function

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function fndRng(sAdr As Variant, Optional iClmn As Long = 0) As Range
  Set fndRng = Application.Range(Application.ConvertFormula(CStr(sAdr) & IIf(iClmn, CStr(iClmn), ""), xlR1C1, xlA1))
End Function

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function fndRngFst(sAdr As String) As Long
  fndRngFst = Range(sAdr).Row
End Function

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function fndRngLst(sAdr As String) As Long
  fndRngLst = Range(sAdr).Rows(Range(sAdr).Rows.Count).Row
End Function

'|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function fndInRng(ByRef rng As Range, sWhat As String) As Long
  Dim fnd As Range
  Set fnd = rng.Find(sWhat, LookIn:=xlValues, LookAt:=xlWhole)
  If Not fnd Is Nothing Then
    fndInRng = fnd.Column
  Else: fndInRng = 0: End If
End Function

'|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Function fndInRow(ByRef vAdr As Variant, sWhat As String, Optional returnID As Boolean = True) As String
  Dim fnd As Range, iCur As Long
  fndInRow = ""
  For iCur = LBound(vAdr) + 1 To UBound(vAdr) - 1
    Set fnd = fndRng(vAdr(iCur), CLCM).EntireRow.Find(What:=sWhat, LookIn:=xlValues, LookAt:=xlWhole)
    If Not fnd Is Nothing Then If fnd.Value <> "$$=" And (InStr(";" & Mid(fndRng(vAdr(iCur), CLCM).Value, 5) & ";", ";p;") > 0 Or fndInRow = "") Then fndInRow = "'" & fnd.Parent.Name & "'!" & fnd.Address(ReferenceStyle:=xlR1C1)
  Next iCur
  If returnID And fndInRow = "" Then fndInRow = vAdr(1) & CStr(CLID)
End Function

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function fndIsDpd(ByRef rng As Range) As Boolean
  Dim rDpd As Range
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  On Error Resume Next
  Set rDpd = rng.Dependents
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Not rDpd Is Nothing Then fndIsDpd = True Else fndIsDpd = False
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Function wrtAdr(iRow As Long, iCol As Long, Optional sSheet As String = "") As String
  wrtAdr = IIf(sSheet <> "", "'" & sSheet & "'!", "") & "r" & CStr(iRow) & "c" & CStr(iCol)
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| QG/CG
Sub wrtApR(rng As Range, iCols As Variant, cTxts As Variant, tpl As Range, iApr As Long)
  '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  rng.Interior.Pattern = tpl.Interior.Pattern
  If Not tpl.Interior.Gradient Is Nothing Then
    rng.Interior.Gradient.Degree = tpl.Interior.Gradient.Degree
    rng.Interior.Gradient.ColorStops.Clear
    rng.Interior.Gradient.ColorStops.Add Position:=0
    rng.Interior.Gradient.ColorStops(1).Color = tpl.Interior.Gradient.ColorStops(1).Color
    rng.Interior.Gradient.ColorStops.Add Position:=1
    rng.Interior.Gradient.ColorStops(2).Color = tpl.Interior.Gradient.ColorStops(2).Color
  Else: rng.Interior.Color = tpl.Interior.Color: End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If tpl.Borders(xlEdgeTop).LineStyle <> xlLineStyleNone Then
    rng.Borders(xlEdgeTop).LineStyle = tpl.Borders(xlEdgeTop).LineStyle
    rng.Borders(xlEdgeTop).Weight = tpl.Borders(xlEdgeTop).Weight
  End If
  If tpl.Borders(xlEdgeBottom).LineStyle <> xlLineStyleNone Then
    rng.Borders(xlEdgeBottom).LineStyle = tpl.Borders(xlEdgeBottom).LineStyle
    rng.Borders(xlEdgeBottom).Weight = tpl.Borders(xlEdgeBottom).Weight
  End If
  '|fffd||fffd||fffd||fffd||fffd|
  rng.Font.Bold = tpl.Font.Bold
  rng.Font.Color = tpl.Font.Color
  rng.VerticalAlignment = xlCenter
  '|fffd||fffd||fffd||fffd||fffd||fffd|
  Dim iCur  As Long
  For iCur = LBound(iCols) To UBound(iCols)
    If iCur <= UBound(cTxts) Then If cTxts(iCur) >= 0 Then rng.Cells(iCols(iCur)).FormulaR1C1 = cTxts(iCur)
  Next iCur
  If iApr > 0 Then rng.Cells(iApr).Font.Size = 14
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Sub wrtApC(rng As Range, iCols As Variant, cWths As Variant, cFrms As Variant, cAlgs As Variant, cFncs As Variant)
  Dim iCur  As Long
  For iCur = LBound(iCols) To UBound(iCols)
    If iCur <= UBound(cWths) Then If cWths(iCur) >= 0 Then rng.Columns(iCols(iCur)).EntireColumn.ColumnWidth = cWths(iCur)
    If iCur <= UBound(cFrms) Then If cFrms(iCur) <> "" Then rng.Columns(iCols(iCur)).EntireColumn.NumberFormat = cFrms(iCur)
    If iCur <= UBound(cAlgs) Then If cAlgs(iCur) <> 0 Then rng.Columns(iCols(iCur)).EntireColumn.HorizontalAlignment = cAlgs(iCur)
    If iCur <= UBound(cFncs) Then If cFncs(iCur) >= 0 Then rng.Columns(iCols(iCur)).EntireColumn.Font.Color = cFncs(iCur)
  Next iCur
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Sub wrtApS(sht As Worksheet, dft As Range, sName As String, Optional bPrint As Boolean = False)
  sht.Name = Left(escID(sName, 2), 30)
  With sht.PageSetup
    .LeftHeader = "Iskratel Group"
    .LeftFooter = "&D"
    .RightFooter = ngcL(Sheets(ngcVAR).Cells(19, 5).Value) & " &P/&N"
    If bPrint Then
      .CenterHeader = ngcL(Sheets(ngcVAR).Cells(22, 2).Value)
      .RightHeader = ngcInfo("Spec", False)
      .CenterFooter = Left(ngcL("[E1]" & Sheets(ngcVAR).Cells(26, 2).Value & "[R1]" & Sheets(ngcVAR).Cells(27, 2).Value & "[L1]" & Sheets(ngcVAR).Cells(28, 2).Value), 244 - Len(.LeftFooter) - Len(.RightFooter)) & vbLf
    Else
      .CenterHeader = "ISKRATEL GROUP CONFIGURATOR"
      .RightHeader = "By " & Sheets(ngcVAR).Cells(2, 2).Value
      .CenterFooter = "Ver." & Sheets(ngcVAR).Cells(2, 2).Value & " Rel." & Sheets(ngcVAR).Cells(2, 11).Value
    End If
    .LeftMargin = Application.InchesToPoints(1)
    .RightMargin = Application.InchesToPoints(0.4)
    .TopMargin = Application.InchesToPoints(0.8)
    .BottomMargin = Application.InchesToPoints(1.3)
    .HeaderMargin = Application.InchesToPoints(0.4)
    .FooterMargin = Application.InchesToPoints(0.4)
    .Zoom = False
    .FitToPagesWide = 1
    .FitToPagesTall = False
  End With
  If sht.Parent.Windows.Count > 0 Then sht.Parent.Windows(1).DisplayGridlines = False
  sht.Outline.SummaryRow = xlAbove
  sht.Outline.SummaryColumn = xlLeft
  '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  With sht.Cells
    .VerticalAlignment = xlTop
    .HorizontalAlignment = xlCenter
    .Font.Name = "Calibri"
    .Font.Size = 11
    .ColumnWidth = 12
    .EntireRow.AutoFit
  End With
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Not dft Is Nothing Then
    If Not dft.Interior.Gradient Is Nothing Then
      sht.Tab.Color = dft.Interior.Gradient.ColorStops(dft.Interior.Gradient.ColorStops.Count - 1).Color
      sht.Tab.TintAndShade = 0.3
    Else: sht.Tab.Color = dft.Interior.Color: sht.Tab.TintAndShade = 0: End If
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  If sName = ngcINP Then
    Dim oCur As Object
    For Each oCur In ThisWorkbook.Names
      If InStr(oCur.RefersToR1C1, "#REF!") = 0 And InStr(oCur.RefersToR1C1, "#NAME?") = 0 Then
        sht.Names.Add Name:=IIf(InStr(oCur.Name, "!") > 0, Mid(oCur.Name, InStr(oCur.Name, "!") + 1), oCur.Name), RefersToR1C1:=oCur.RefersToR1C1
      ElseIf InStr(oCur.Name, ".") = 0 Then
        oCur.Delete
      End If
    Next oCur
  End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub wrtDsn(lstCol As Long)
  Dim rng As Range, adr As String, sCmd As String, bCmd As Boolean
  Dim iRow As Long, iCol As Long
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.StatusBar = "Applying formatting..."
  Cells.UnMerge
  For iRow = 5 To Cells.SpecialCells(xlCellTypeLastCell).Row
    sCmd = Left(Cells(iRow, CLCM).Value, 4)
    Select Case sCmd
    Case "[QG]", "[CG]"
      Cells(iRow, CLCM).Interior.Pattern = xlNone
      Cells(iRow, CLID).Interior.ColorIndex = 35
      Cells(iRow, CLID).Font.Bold = True
      If sCmd = "[CG]" Then Cells(iRow, CLC4).Interior.ColorIndex = 35: Cells(iRow, CLC5).Interior.ColorIndex = 35
    Case "[QS]", "[QA]", "[QB]", "[QL]"
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      Rows(iRow).EntireRow.ClearFormats
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
      Cells(iRow, CLCM).Interior.Pattern = xlNone
      Cells(iRow, CLID).Interior.ColorIndex = 35
      Cells(iRow, CLQ4).Interior.ColorIndex = 3
      Cells(iRow, CLQ5).Interior.ColorIndex = 35
      Cells(iRow, CLQ6).Interior.ColorIndex = 3
      Cells(iRow, CLQ7).Interior.ColorIndex = 35
      If sCmd <> "[QL]" Then Cells(iRow, CLQ8).Interior.ColorIndex = 35
      Cells(iRow, CLQ8).Interior.ColorIndex = 35
      Cells(iRow, CLQ9).Interior.ColorIndex = 35
      Cells(iRow, CLQ9 + 1).Interior.ColorIndex = 40
      iCol = 2
      While Cells(iRow, CLQ9 + iCol).Value <> "" And Left(Cells(iRow, CLQ9 + iCol).Value, 2) <> "$$"
        Cells(iRow, CLQ9 + 1).Interior.ColorIndex = 40
        iCol = iCol + 1
      Wend
    Case "[QR]"
      Cells(iRow, CLCM).Interior.ColorIndex = 38
      Cells(iRow, CLID).Interior.ColorIndex = 35
      Cells(iRow, CLQ4).Interior.ColorIndex = 3
      Cells(iRow, CLQ5).Interior.ColorIndex = 35
    Case "[QI]"
      Cells(iRow, CLCM).Interior.Pattern = xlNone
      Cells(iRow, CLCM).Font.Bold = True
      Cells(iRow, CLID).Interior.ColorIndex = 35
      Cells(iRow, CLC4).Interior.ColorIndex = 35
    Case "[CN]", "[TD]", "[TB]", "[TA]", "[TL]"
      Cells(iRow, CLCM).Interior.ColorIndex = 37
      Cells(iRow, CLID).Interior.Pattern = xlNone
      Cells(iRow, CLT4).Interior.ColorIndex = 3
      If Cells(iRow, CLT5).FormulaR1C1 <> "" Then Cells(iRow, CLT5).Interior.ColorIndex = 37
    Case "[CM]"
      Cells(iRow, CLCM).Interior.ColorIndex = 37
    Case "[CD]", "[CK]"
      Cells(iRow, CLCM).Interior.Pattern = xlNone
      If Mid(Cells(iRow, CLCM).Value, 5, 1) = "r" Then
        Cells(iRow, CLC6).Interior.ColorIndex = 38
      ElseIf Cells(iRow, CLC6).Interior.ColorIndex = 38 Then
        Cells(iRow, CLC6).Interior.Pattern = xlNone
      End If
    Case "[CR]", "[CI]"
      Cells(iRow, CLCM).Interior.ColorIndex = 38
      Cells(iRow, CLID).Interior.Pattern = xlNone
      If Cells(iRow, CLCM).Value <> "[CI]" Then
        Cells(iRow, CLC4).Interior.ColorIndex = 3
      Else: Cells(iRow, CLC4).Interior.ColorIndex = 35: End If
      iCol = CLC5
      While Cells(iRow, iCol).FormulaR1C1 <> ""
        Cells(iRow, iCol).Interior.ColorIndex = 36
        iCol = iCol + 1
      Wend
    Case "[PR]"
      Cells(iRow, CLCM).Interior.Pattern = xlNone
      Cells(iRow, CLID).Interior.ColorIndex = 35
      Cells(iRow, CLP4).Interior.ColorIndex = 35
    Case "[VO]", "[VA]", "[VP]", "[VS]", "[VD]"
      Cells(iRow, CLCM).Interior.Pattern = xlNone
      Cells(iRow, CLID).Interior.ColorIndex = 35
      Cells(iRow, CLVH).Interior.ColorIndex = 35
      If sCmd <> "[VD]" Then Cells(iRow, CLVT).Interior.ColorIndex = 35
      If sCmd = "[VS]" Or sCmd = "[VO]" Then Cells(iRow, CLVP).Interior.ColorIndex = 35
    Case "[WA]", "[WD]"
      Cells(iRow, CLCM).Interior.Pattern = xlNone
      Cells(iRow, CLID).Interior.ColorIndex = 35
      Cells(iRow, CLWH).Interior.ColorIndex = 35
    Case "[WO]", "[WS]", "[WT]", "[WQ]"
      Cells(iRow, CLCM).Interior.Pattern = xlNone
      Cells(iRow, CLID).Interior.ColorIndex = 35
      Cells(iRow, CLWH).Interior.ColorIndex = 35
      Cells(iRow, CLWT).Interior.ColorIndex = 35
      If sCmd = "[WQ]" Then
        Cells(iRow, CLWR).Interior.ColorIndex = 3
        Cells(iRow, CLWD).Interior.ColorIndex = 35
        Cells(iRow, CLWQ).Interior.ColorIndex = 34
      Else: Cells(iRow, CLWA).Interior.ColorIndex = 35: End If
    Case "[EX]"
      Cells(iRow, CLCM).Interior.ColorIndex = 36
      Cells(iRow, CLID).Interior.ColorIndex = 36
      If LCase(Cells(iRow, CLID).Value) = "mspec" Then
        Cells(iRow, CLE4).Interior.ColorIndex = 35
      Else: Cells(iRow, CLE4).Interior.ColorIndex = 3: End If
    Case "[OP]"
      Cells(iRow, CLCM).Interior.Pattern = xlNone
      Cells(iRow, CLCM).Font.Bold = True
      Cells(iRow, CLID).Interior.Pattern = xlNone
      Cells(iRow, CLC4).Interior.ColorIndex = 36
      Cells(iRow, CLC4).Font.ColorIndex = 3
      Cells(iRow, CLC4).Font.Bold = True
    Case "" '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      iCol = fndInRng(Rows(iRow).EntireRow, "*")
      If iCol = 0 Then Rows(iRow).EntireRow.ClearFormats
    Case "[RM]", "[ST]", "[IN]", "[IB]", "[IA]", "[IG]"
      '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Case Else
      MsgBox "Unknown command " & sCmd
    End Select
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|.|fffd||fffd||fffd||fffd||fffd||fffd|
    iCol = fndInRng(Rows(iRow).EntireRow, "&&*")
    If iCol > 0 Then Cells(iRow, iCol).Interior.ColorIndex = 39: Cells(iRow, iCol + 1).Interior.ColorIndex = 39
    iCol = fndInRng(Rows(iRow).EntireRow, "^^*")
    If iCol > 0 Then Cells(iRow, iCol).Interior.ColorIndex = 6
    iCol = fndInRng(Rows(iRow).EntireRow, "|fffd||fffd|*")
    If iCol > 0 Then Cells(iRow, iCol).Font.ColorIndex = 15
    iCol = fndInRng(Rows(iRow).EntireRow, "$$*")
    If iCol > 0 Then
      If sCmd Like "[[][QC][GSBAL][]]" Then Cells(iRow, iCol).Interior.ColorIndex = 34
      If sCmd Like "[[][QC][GI][]]" Then Cells(iRow, iCol).Font.Bold = True
      '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      If iCol + 1 < lstCol Then Range(Cells(iRow, iCol + 1), Cells(iRow, lstCol)).ClearFormats
    End If
  Next iRow
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|.|fffd||fffd||fffd||fffd||fffd||fffd|
  Set rng = Cells.Find(What:="|fffd||fffd|*", LookIn:=xlFormulas, LookAt:=xlWhole)
  If Not rng Is Nothing Then adr = rng.Address
  While Not rng Is Nothing
    rng.Interior.ColorIndex = 37
    rng.HorizontalAlignment = xlRight
    rng.Offset(, 1).Interior.ColorIndex = 37
    Set rng = Cells.FindNext(rng)
    If Not rng Is Nothing Then If rng.Address = adr Then Set rng = Nothing
  Wend
  Set rng = Cells.Find(What:=">>*", LookIn:=xlFormulas, LookAt:=xlWhole)
  If Not rng Is Nothing Then adr = rng.Address
  While Not rng Is Nothing
    rng.Interior.ColorIndex = 36
    rng.HorizontalAlignment = xlRight
    rng.Offset(, 1).Interior.ColorIndex = 36
    Set rng = Cells.FindNext(rng)
    If Not rng Is Nothing Then If rng.Address = adr Then Set rng = Nothing
  Wend
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Application.StatusBar = False
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
Sub wrtRowGrp(ByRef sht As Worksheet, ByRef sSumE As String, ByRef sSumS As String, rGrp As Long, rQst As Long, ByRef rCur As Long, sCPf As String, sCPv As String)
  Dim iRow As Integer
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| F:ABCxxxxDE |fffd||fffd||fffd|
  iRow = shtV.Cells(2, 30).Value
  While iRow > 0 And rGrp > 0
    rCur = rCur + 1
    sht.Cells(rCur, SPCC).Value = "ABCxxxxDE"
    sht.Cells(rCur, SPCT).FormulaR1C1 = "=ngcL('" & ngcVAR & "'!r15c5,'" & ngcINP & "'!r1c" & CStr(INFL) & ")"
    sht.Cells(rCur, SPCV).Value = 0#: sht.Cells(rCur, SPTM).Value = 0#
    sht.Cells(rCur, SPC1).Value = 0#: sht.Cells(rCur, SPC2).Value = 0#
    sht.Cells(rCur, SPCM).Value = "F"
    sht.Cells(rCur, SPID).FormulaR1C1 = "=" & sCPf
    sht.Cells(rCur, SPFL).FormulaR1C1 = "=not('" & ngcVAR & "'!r2c18)*(rc" & CStr(SPCV) & "<>0)"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
    iRow = iRow - 1
  Wend
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| V:ABCxxxxDE |fffd||fffd||fffd|
  iRow = shtV.Cells(2, 31).Value
  While iRow > 0 And rGrp > 0
    rCur = rCur + 1
    sht.Cells(rCur, SPCC).Value = "ABCxxxxYY"
    sht.Cells(rCur, SPCC).Font.Italic = True
    sht.Cells(rCur, SPCT).FormulaR1C1 = "=ngcL('" & ngcVAR & "'!r15c5,'" & ngcINP & "'!r1c" & CStr(INFL) & ")"
    sht.Cells(rCur, SPCT).Font.Italic = True
    sht.Cells(rCur, SPCV).Value = 0#: sht.Cells(rCur, SPTM).Value = 0#
    sht.Cells(rCur, SPCV).Font.Italic = True
    sht.Cells(rCur, SPCV).Interior.ColorIndex = 15
    sht.Cells(rCur, SPCM).Value = "V"
    sht.Cells(rCur, SPID).FormulaR1C1 = "=" & sCPv
    sht.Cells(rCur, SPFL).FormulaR1C1 = "='" & ngcVAR & "'!r2c18*(rc" & CStr(SPCV) & "<>0)"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
    iRow = iRow - 1
  Wend
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If rGrp > 0 And rCur > rGrp + rQst Then
    sht.Cells(rGrp, SPFL).FormulaR1C1 = "=1*or(r[" & CStr(1 + rQst) & "]c:r" & CStr(rCur) & "c)"
    sht.Cells(rGrp, SPC1).FormulaR1C1 = "=sumproduct(r[" & CStr(1 + rQst) & "]c" & CStr(SPCV) & ":r" & CStr(rCur) & "c" & CStr(SPCV) & ",r[" & CStr(1 + rQst) & "]c:r" & CStr(rCur) & "c)"
    sht.Cells(rGrp, SPC2).FormulaR1C1 = "=sumproduct(r[" & CStr(1 + rQst) & "]c" & CStr(SPCV) & ":r" & CStr(rCur) & "c" & CStr(SPCV) & ",r[" & CStr(1 + rQst) & "]c:r" & CStr(rCur) & "c)"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If rCur > rGrp + rQst + 1 Then
      With sht.Range(sht.Cells(rGrp + rQst + 1, 1), sht.Cells(rCur, 9))
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
      End With
    End If
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    sSumE = sSumE & ",r" + CStr(rGrp) & "c*and(r" & CStr(rGrp) & "c" & CStr(SPID) & "<>'" & ngcVAR & "'!r2c9,left(r" & CStr(rGrp) & "c" & CStr(SPID) & ",2)<>'" & ngcVAR & "'!r2c9&""-"")"
    sSumS = sSumS & ",r" + CStr(rGrp) & "c*or(r" & CStr(rGrp) & "c" & CStr(SPID) & "='" & ngcVAR & "'!r2c9,left(r" & CStr(rGrp) & "c" & CStr(SPID) & ",2)='" & ngcVAR & "'!r2c9&""-"")"
  End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| CN
Sub wrtRowVar(ByRef rngRow As Range, ByRef optTD As String, ByRef sMsg As String)
  Dim fnd As Range, iFst As Long, iCur As Long, sStr As String
  Set fnd = rngRow.Find(What:="|fffd||fffd|*", LookIn:=xlValues, LookAt:=xlWhole)
  If Not fnd Is Nothing Then
    iFst = fnd.Column
    Do
      sStr = ":" & escID(Mid(rngRow.Cells(1, fnd.Column).Value, 3), 0, rngRow, sMsg) & ","
      iCur = InStr(optTD, sStr)
      If iCur > 0 Then
        iCur = InStr(iCur, optTD, ";") - 1
        optTD = Left(optTD, iCur) & "'" & rngRow.Parent.Name & "'!r" & CStr(rngRow.Row) & "c" & CStr(fnd.Column + 1) & Mid(optTD, iCur)
      Else
        optTD = optTD & "CN" & sStr & "'" & rngRow.Parent.Name & "'!r" & CStr(rngRow.Row) & "c" & CStr(fnd.Column + 1) & ",;"
      End If
      Set fnd = rngRow.FindNext(fnd)
    Loop While Not fnd Is Nothing And fnd.Column <> iFst
  End If
End Sub

'addition appearance
Sub wrtCmd(rng As Range, dft As Range, cmd As Range, bQG As Boolean, bCG As Boolean, sMsg As String)
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Dim sCmd As String, iPos As Long, iTmp As Long, sTmp As String
  sCmd = ";" & Mid(cmd.Value, 5) & ";"
  '--- i ---
  iPos = InStr(sCmd, ";i")
  While iPos > 0
    If InStr(iPos + 1, sCmd, ";") > iPos + 2 Then
      iTmp = Val(Mid(sCmd, iPos + 2, InStr(iPos + 1, sCmd, ";") - iPos - 2))
      If bQG Then
        rng.Worksheet.Range(rng.Offset(, INQD - rng.Column), rng.Offset(, INTM - rng.Column)).Interior.ColorIndex = iTmp
      ElseIf bCG Then
        rng.Worksheet.Range(rng.Offset(, SPTT - rng.Column), rng.Offset(, SPTM - rng.Column)).Interior.ColorIndex = iTmp
      Else: rng.Interior.ColorIndex = iTmp: End If
    Else
      rng.Font.Italic = True
      rng.Offset(, INQT - rng.Column).Font.Italic = True
    End If
    iPos = InStr(iPos + 1, sCmd, ";i")
  Wend
  '--- c ---
  iPos = InStr(sCmd, ";c")
  If iPos > 0 Then
    sTmp = Mid(sCmd, iPos + 2, InStr(iPos + 1, sCmd, ";") - iPos - 2)
    iTmp = InStr(sTmp, ",")
    If InStr(iPos + 1, sCmd, ";") > iPos + 2 Then
      If bQG And iTmp = 0 Then
        rng.Worksheet.Range(rng.Offset(, INQD - rng.Column), rng.Offset(, INTM - rng.Column)).Interior.Color = Val(sTmp)
      ElseIf bQG And iTmp > 0 Then
        With rng.Worksheet.Range(rng.Offset(, INQD - rng.Column), rng.Offset(, INTM - rng.Column)).Interior.Gradient
          .ColorStops.Clear
          .ColorStops.Add Position:=0
          .ColorStops(1).Color = Val(Left(sTmp, iTmp - 1))
          .ColorStops.Add Position:=1
          .ColorStops(2).Color = Val(Mid(sTmp, iTmp + 1))
        End With
      ElseIf bCG And iTmp = 0 Then
        rng.Worksheet.Range(rng.Offset(, SPTT - rng.Column), rng.Offset(, SPTM - rng.Column)).Interior.Color = Val(sTmp)
      ElseIf bCG And iTmp > 0 Then
        With rng.Worksheet.Range(rng.Offset(, SPTT - rng.Column), rng.Offset(, SPTM - rng.Column)).Interior.Gradient
          .ColorStops.Clear
          .ColorStops.Add Position:=0
          .ColorStops(1).Color = Val(Left(sTmp, iTmp - 1))
          .ColorStops.Add Position:=1
          .ColorStops(2).Color = Val(Mid(sTmp, iTmp + 1))
        End With
      Else: rng.Interior.Color = iTmp: End If
    Else: rng.Interior.Color = 13158600: End If
  End If
  '--- b ---
  iPos = InStr(sCmd, ";b")
  If iPos > 0 Then
    rng.Font.Bold = True
    rng.Offset(, INQT - rng.Column).Font.Bold = True
    If Not dft Is Nothing Then dft.Font.Bold = True
  End If
  '--- u ---
  iPos = InStr(sCmd, ";u")
  If iPos > 0 Then
    rng.Font.Underline = True
    rng.Offset(, INQT - rng.Column).Font.Underline = True
    If Not dft Is Nothing Then dft.Font.Underline = True
  End If
  '--- d ---
  iPos = InStr(sCmd, ";d")
  If iPos > 0 Then rng.Borders.Weight = xlMedium: rng.Borders.LineStyle = xlDash
  '--- g ---
  iPos = InStr(sCmd, ";g")
  If iPos > 0 Then rng.Borders.ColorIndex = 15 'rng.Interior.Color = 12566463
  '--- n ---
  iPos = InStr(sCmd, ";n")
  If iPos > 0 Then rng.Borders.LineStyle = xlLineStyleNone
  '--- v ---
  iPos = InStr(sCmd, ";v")
  If iPos > 0 Then
    rng.Validation.Delete
    sCmd = Mid(sCmd, iPos + 2, InStr(iPos + 1, sCmd, ";") - iPos - 2)
    rng.Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=sCmd
  End If
  '--- # ---
  iPos = InStr(sCmd, ";#")
  If iPos > 0 Then
    Dim oNew As Object
    rng.Font.ColorIndex = rng.Interior.ColorIndex
    Set oNew = rng.Worksheet.CheckBoxes.Add(rng.Left, rng.Top + 0.5 * (rng.Height - 13.5), rng.Width, 13#)
    oNew.Name = escID(rng.Offset(0, INID - rng.Column).Value, 1, Nothing, "")
    oNew.Caption = IIf(bQG, "Show", "Yes/No")
    oNew.Placement = xlMove
    oNew.Height = 14#
    oNew.ShapeRange.AlternativeText = ngcCFG
    oNew.OnAction = "ngcAFchange"
    If bQG Then
      rng.Offset(0, INFL - rng.Column).Value = 1
      rng.Offset(0, INTM - rng.Column).Value = False
    Else: rng.Offset(0, INQV - rng.Column).Font.Color = rng.Offset(0, INQV - rng.Column).Interior.Color: End If
    oNew.LinkedCell = rng.Offset(0, IIf(bQG, INTM, INQV) - rng.Column).Address(ReferenceStyle:=xlA1)
  End If
  '--- f ---
  iPos = InStr(sCmd, ";f""")
  If iPos > 0 And InStr(iPos + 2, sCmd, ";") > iPos + 1 Then
    If Not dft Is Nothing Then dft.NumberFormat = Mid(sCmd, iPos + 3, InStr(iPos + 1, sCmd, ";") - iPos - 4)
    rng.NumberFormat = Mid(sCmd, iPos + 3, InStr(iPos + 1, sCmd, ";") - iPos - 4)
  End If
  '--- p ---
  iPos = InStr(sCmd, ";p""")
  If iPos > 0 And InStr(iPos + 2, sCmd, ";") > iPos + 1 Then
    sTmp = Mid(sCmd, iPos + 3, InStr(iPos + 1, sCmd, ";") - iPos - 4)
    cmd.Parent.Shapes(sTmp).Copy
    rng.Parent.Paste Destination:=rng.Offset(, INQD - rng.Column)
    Selection.Top = rng.Top + 0.5 * (rng.Height - Selection.Height)
    Selection.Left = rng.Offset(, INQD - rng.Column).Left + 0.5 * (rng.Width - Selection.Width)
    Selection.Placement = 1
  End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Sub wrtNms(ByRef wbk As Workbook)
  Dim nms As Object, iCur As Long
  iCur = 1
  While iCur <= wbk.Names.Count
    Set nms = wbk.Names(iCur)
    If InStr(nms.RefersTo, "#REF") Then
      nms.Delete
    Else
      If InStr(nms.RefersTo, "[") > 0 And InStr(nms.RefersTo, "]") > 0 Then nms.RefersTo = Left(nms.RefersTo, InStr(nms.RefersTo, "[") - 1) & Mid(nms.RefersTo, InStr(nms.RefersTo, "]") + 1)
      If InStr(nms.RefersTo, "!") > 0 And InStr(nms.Name, "!") > 0 Then
        If "=" & Left(nms.Name, InStr(nms.Name, "!") - 1) <> Left(nms.RefersTo, InStr(nms.RefersTo, "!") - 1) Then
          nms.Delete
        Else: iCur = iCur + 1: End If
      Else: iCur = iCur + 1: End If
    End If
  Wend
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function fndMin(ByRef argVar1 As Long, ByRef argVar2 As Long) As Long
  If argVar1 = 0 Or argVar2 = 0 Then
    fndMin = argVar1 + argVar2
  ElseIf argVar1 < argVar2 Then
    fndMin = argVar1
  Else: fndMin = argVar2: End If
End Function
Function fndMinZ(ByRef argVar1 As Long, ByRef argVar2 As Long, ifZero As Long) As Long
  If argVar1 = 0 Or argVar2 = 0 Then
    fndMinZ = argVar1 + argVar2
  ElseIf argVar1 < argVar2 Then
    fndMinZ = argVar1
  Else: fndMinZ = argVar2: End If
  If ifZero > 0 And fndMinZ = 0 Then fndMinZ = ifZero
End Function
Function fndMinD(ByRef argVar1 As Double, ByRef argVar2 As Double) As Double
  If argVar1 = 0 Or argVar2 = 0 Then
    fndMinD = argVar1 + argVar2
  ElseIf argVar1 < argVar2 Then
    fndMinD = argVar1
  Else: fndMinD = argVar2: End If
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function fndMax(ByRef argVar1 As Long, ByRef argVar2 As Long) As Long
  If argVar1 = 0 Or argVar2 = 0 Then
    fndMax = argVar1 + argVar2
  ElseIf argVar1 > argVar2 Then
    fndMax = argVar1
  Else: fndMax = argVar2: End If
End Function
Function fndMaxD(ByRef argVar1 As Double, ByRef argVar2 As Double) As Double
  If argVar1 = 0 Or argVar2 = 0 Then
    fndMaxD = argVar1 + argVar2
  ElseIf argVar1 > argVar2 Then
    fndMaxD = argVar1
  Else: fndMaxD = argVar2: End If
End Function

Attribute VB_Name = "C3_Callbacks"
'(c)2010 Terekhov Alexey. All rights reserved.
'Phone: +38631334953, Skype:terekhov_alexey
Option Explicit

Dim ngcRibbon As IRibbonUI, bSndPrice As Boolean

'|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub Auto_Open()
  On Error Resume Next
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  With CreateObject("WScript.Shell")
    .RegWrite "HKEY_CURRENT_USER\Software\Microsoft\Office\" & Application.Version & "\Word\Security\AccessVBOM", 1, "REG_DWORD"
    .RegWrite "HKEY_CURRENT_USER\Software\Microsoft\Office\" & Application.Version & "\Excel\Security\AccessVBOM", 1, "REG_DWORD"
  End With
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If Val(Application.Version) < 12 Then
    MsgBox "MS Excel version is too old." & vbCrLf & "Configurator may not work propertly.", vbExclamation
  Else: Application.DefaultSaveFormat = 52: End If 'xlOpenXMLWorkbookMacroEnabled
  Err.Clear
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If fndIsSheet(ngcVAR) And GetSetting("NG3cfg", "Date", "UpdateDisabled", "0") <> "1" Then
    If CBool(Sheets(ngcVAR).Cells(2, 32).Value) And (Not ngcValid Or CBool(Sheets(ngcVAR).Cells(2, 33).Value)) Then
      Dim httpWdsl As Object
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| URL
      Application.StatusBar = "Trying to connect..."
      Set httpWdsl = CreateObject("MSXML2.ServerXMLHTTP")
      httpWdsl.setTimeouts 500, 500, 500, 500
      httpWdsl.Open "GET", wssURL, False
      httpWdsl.Send ""
      Set httpWdsl = Nothing
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If Not Err.Number Then
        Application.StatusBar = "Check for update..."
        ngcOnlineCheck
      End If
      Application.StatusBar = False
    End If
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If fndIsSheet(ngcINP) And LCase(Right(ThisWorkbook.Name, 5)) <> ".xltm" And Left(ActiveSheet.Name, 1) <> "." Then
    If Sheets(ngcINP).Cells(1, INTM + 1).Value = "" Then ngcWinsBySide bSingle:=ngcW()
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Application.Calculation <> xlCalculationAutomatic Then
    Application.Calculation = xlCalculationAutomatic
  Else: Application.CalculateFull: End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  ThisWorkbook.Saved = True
  On Error GoTo 0
End Sub

'Callback for customUI.onLoad
Sub ngcRibbonLoad(ribbon As IRibbonUI)
  Set ngcRibbon = ribbon
  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  If ngcValid(False) Then
    AppActivate Application.Caption
    keybd_event vbKeyMenu, &HB8, &H0, 0   'ALT pressed
    keybd_event Asc("C"), &HAE, &H0, 0    '"C" pressed
    keybd_event Asc("C"), &HAE, &H2, 0    '"C" released
    keybd_event vbKeyMenu, &HB8, &H2, 0   'ALT released
    keybd_event vbKeyReturn, &H9C, 0, 0   'ENTER pressed
    keybd_event vbKeyReturn, &H9C, &H2, 0 'ENTER released
  End If
End Sub

'invalidate single control or whole tab
Public Sub InvalidateControl(Optional sControl As String = "", Optional bShowErr As Boolean = True)
  If Not ngcRibbon Is Nothing Then
    If Len(sControl) > 0 Then
      ngcRibbon.InvalidateControl sControl
    Else: ngcRibbon.Invalidate: End If
  ElseIf bShowErr Then
    MsgBox "Configurator tab reference to ribbon was lost." & vbCrLf & _
           "Sorry for inconvenience. Please restart configurator." & vbCrLf & _
           "Contact " & Sheets(ngcVAR).Cells(2, 7).Value & " for more information...", vbExclamation
  End If
End Sub

'############################################
'###############   Export   #################
'############################################

'Callback for ngcSendXls getContent
Sub ngcSendGetContent(control As IRibbonControl, ByRef content)
  Dim xmlD As String, xmlO As String, sKey As String, iKey As Long
  Select Case control.iD
  Case "ngcSendXls"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    xmlD = "": xmlO = "<button id=""ngcExportTsxErr"" label=""No scripts found..."" imageMso=""CancelRequest"" />"
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    content = "<menu xmlns=""http://schemas.microsoft.com/office/2006/01/customui"">" & _
              "<button id=""ngcPrepareTsw"" onAction=""ngcPrepareClick"" label=""Export as standart printout"" imageMso=""ExportExcel"" />" & _
              "<button id=""ngcPrepareTse"" onAction=""ngcPrepareClick"" label=""Export as single-sheet format"" imageMso=""ExportExcel"" />" & _
              "<menuSeparator id=""ngcPrepareTsxSep"" title=""User-defined export scripts"" />" & IIf(xmlD <> "", xmlD, xmlO) & _
              "</menu>"
  Case "ngcSendDoc"
    content = "<menu xmlns=""http://schemas.microsoft.com/office/2006/01/customui"">" & _
              "<button id=""ngcPrepareDoc"" onAction=""ngcPrepareClick"" label=""Export specification(s)"" imageMso=""ExportWord"" />" & _
              "<button id=""ngcPrepareGst"" onAction=""ngcPrepareClick"" label=""Export specification(s) as GOST"" imageMso=""ExportWord"" />" & _
              "<menuSeparator id=""ngcPrepareDocSep"" title=""Other export formats"" />" & _
              "<button id=""ngcPrepareTso"" onAction=""ngcPrepareClick"" label=""Export/prepare description(s)"" imageMso=""ExportWord"" />" & _
              "</menu>"
  Case "ngcSendVsd"
    content = "<menu xmlns=""http://schemas.microsoft.com/office/2006/01/customui"">" & _
              "<button id=""ngcPrepareVsd"" onAction=""ngcPrepareClick"" label=""Prepare drawings"" imageMso=""TableExportTableToVisioPivotDiagram"" />" & _
              "</menu>"
  Case "ngcSendXml"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Const hKey As Long = &H80000001
    Dim oReg As Object, vKeys As Variant, vTypes As Variant
    Set oReg = GetObject("winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv")
    oReg.enumValues hKey, "Software\Iskratel\Offit\Connections", vKeys, vTypes
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    xmlD = "": xmlO = ""
    If Not IsNull(vKeys) Then
      For iKey = LBound(vKeys) To UBound(vKeys)
        sKey = vbNullString
        oReg.getStringValue hKey, "Software\Iskratel\Offit\Connections", vKeys(iKey), sKey
        If CStr(vKeys(iKey)) = "" Then
          xmlD = "<button id=""ngcExportXml" & CStr(iKey) & """ onAction=""ngcExportXmlClick"" label=""Export all to default database"" imageMso=""ExportXmlFile"" tag=""" & sKey & """ />"
        Else: xmlO = xmlO & "<button id=""ngcOffit" & CStr(iKey) & """ onAction=""ngcExportXmlClick"" label=""" & vKeys(iKey) & """ imageMso=""ExportXmlFile"" tag=""" & sKey & """ />": End If
      Next iKey
    End If
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    content = "<menu xmlns=""http://schemas.microsoft.com/office/2006/01/customui"">" & _
              "<button id=""ngcSaveXmlOne"" onAction=""ngcPrepareClick"" label=""Save current specification"" imageMso=""ExportXmlFile"" supertip=""Save current to XML file"" />" & _
              "<button id=""ngcSaveXmlAll"" onAction=""ngcPrepareClick"" label=""Save all specifications (MSpec)"" imageMso=""ExportXmlFile"" supertip=""Save all to XML files (MSpec)"" screentip=""Ctrl+Shift+C"" />" & _
              "<menuSeparator id=""ngcExportXmlSep"" title=""Export to Offit database"" />" & IIf(xmlD <> "", xmlD, "") & _
              IIf(xmlO <> "", "<menu id=""ngcExportOftMenu"" label=""Other registered databases"" imageMso=""DatabaseCopyDatabaseFile"" itemSize=""normal"">" & xmlO & "</menu>", "") & _
              IIf(xmlD & xmlO = "", "<button id=""ngcExportOftErr"" label=""No database found..."" imageMso=""CancelRequest"" />", "") & _
              "</menu>"
  Case Else
    MsgBox "'" & control.iD & "' internal getEnabled error!", vbCritical
  End Select
End Sub

'Callback for ngcSendXls getEnabled
Sub ngcSendEnabled(control As IRibbonControl, ByRef returnedVal)
  Dim bValid As Boolean
  bValid = ngcValid(False)
  Select Case control.iD
  Case "ngcSendXls", "ngcSendXml"
    returnedVal = bValid
  Case "ngcSendVsd"
    returnedVal = CBool(Sheets("VarX").Cells(2, 15).Value) And bValid
  Case "ngcSendDoc"
    returnedVal = CBool(Sheets("VarX").Cells(2, 16).Value) And bValid
  Case Else
    MsgBox "'" & control.iD & "' internal getEnabled error!", vbCritical
  End Select
End Sub

'Callback for ngcPrepare onAction
Sub ngcPrepareClick(control As IRibbonControl)
  Dim sMsg As String
  sMsg = ""
  Select Case control.iD
  Case "ngcPrepareTsw"
    ngcSaveExcel sErr:=sMsg
  Case "ngcPrepareTse"
    ngcSaveExcel2 sErr:=sMsg
  Case "ngcPrepareDoc"
    ngcSaveWord sErr:=sMsg
  Case "ngcPrepareGst"
    ngcSaveWord2 sErr:=sMsg
  Case "ngcPrepareTso"
    frmCfgExp.Show
  Case "ngcPrepareVsd"
    ngcSaveVisio sMsg:=sMsg
  Case "ngcSaveXmlOne"
    ngcSaveXML isSaveAll:=False
  Case "ngcSaveXmlAll"
    ngcSaveXML isSaveAll:=True
  Case "ngcSendCfgOne"
    ngcSaveCfg sErr:=sMsg
  Case "ngcSendCfgOpt"
    ngcSaveCfgOpt sErr:=sMsg
  Case Else
    MsgBox "'" & control.iD & "' not implemented in this version!", vbCritical
  End Select
  If Len(sMsg) > 1 Then ngcMessage.ManualShow sMsg:=Mid(sMsg, 2), sLabel:="An error(s) was found during operation:"
End Sub

'Callback for ngcExport onAction
Sub ngcExportXmlClick(control As IRibbonControl)
  Dim oWs As Object, oFso As Object, fFile As Object
  Dim sOft As String, sDir As String, sMsg As String
  Dim sFile As String, iCur As Long, iLst As Long
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Set oWs = CreateObject("WScript.Shell")
  sOft = oWs.RegRead("HKEY_CURRENT_USER\Software\Iskratel\Offit\InstalationPath")
  If sOft <> "" Then
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Offit |fffd| OffitLoc
    sOft = sOft & IIf(Right(sOft, 1) <> "\", "\", "") & "AddIns\Configurator2Offit\"
    oWs.CurrentDirectory = sOft
    sDir = Sheets(ngcVAR).Cells(2, 8).Value: If Right(sDir, 1) <> "\" Then sDir = sDir & "\"
    If (Dir(sOft & "SpecLoader.exe") = "") Or (Dir(sDir, vbDirectory) = "") Then
      MsgBox sOft & "SpecLoader.exe" & vbCrLf & "Can't find the Offit importer!", vbCritical
      Exit Sub
    End If
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    iCur = 1: sMsg = ""
    iLst = Sheets(ngcINP).Cells(1, INTM).Value
    Set oFso = CreateObject("Scripting.FileSystemObject")
    While iCur > 0
      If Sheets(ngcINP).Cells(1, INTM + iCur).Value <> "" Then Sheets(ngcINP).Cells(1, INTM).Value = iCur + 1
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      sFile = sDir & "~$" & escID(Sheets(ngcINP).Cells(3, INQV).Value, 2, Nothing, sMsg) & ".xml"
      ngcSaveSpec sErr:=sMsg, fileSave:=sFile
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
      If Dir(sDir & "~$ng3report.txt") <> "" Then Kill sDir & "~$ng3report.txt"
      oWs.Run "cmd /c SpecLoader.exe """ & sFile & """ /c""" & control.Tag & """ > """ & sDir & "~$ng3report.txt""", 7, True
      '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If Dir(sDir & "~$ng3report.txt") <> "" Then
        Set fFile = oFso.OpenTextFile(sDir & "~$ng3report.txt", , , 0)
        If Not fFile.AtEndOfStream Then
          sMsg = sMsg & "; - " & Replace(fFile.ReadLine, sDir, "")
        Else: sMsg = sMsg & "; - Report is empty...": End If
        fFile.Close: Kill sDir & "~$ng3report.txt"
      End If
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      iCur = iCur + 1: If Sheets(ngcINP).Cells(1, INTM + iCur).Value = "" Then iCur = 0
    Wend
    '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Sheets(ngcINP).Cells(1, INTM).Value = iLst
    Sheets(ngcCSI).Calculate: DoEvents: ngcAFcreate
    If sMsg <> "" Then ngcMessage.ManualShow sMsg:=Mid(sMsg, 2), sLabel:="Operation complete with following messages:", bInfo:=True
  End If
End Sub


'############################################
'###############    View    #################
'############################################

'Callback for ngcModeLink onAction
Sub ngcModeClick(control As IRibbonControl)
  Dim sMsg As String
  sMsg = ""
  ngcModeRelink sMsg:=sMsg
  If Len(sMsg) > 1 Then ngcMessage.ManualShow sMsg:=Mid(sMsg, 2), sLabel:="An error(s) was found during operation:"
End Sub

'Callback for ngcModeSimple onAction
Sub ngcModeTglClick(control As IRibbonControl, pressed As Boolean)
  If Not fndIsSheet(ngcINP) Then Exit Sub
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim shI As Worksheet, sht As Worksheet, sMsg As String
  Set shI = Sheets(ngcINP): sMsg = ""
  If shI.Cells(1, INTM + 1).Value <> "" Then MsgBox "Not for MSpec! Not yet...", vbExclamation: Exit Sub
  Application.ScreenUpdating = False
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If pressed Then
    For Each sht In Sheets
      If Left(sht.Name, 2) = "Q." Then
        sht.Visible = True
        sht.Select
        Sheets(ngcINP).Visible = False
        ActiveWindow.DisplayGridlines = False
        ngcWinsBySide bSingle:=ngcW(), bUpdating:=False
        ngcModeRelink sMsg:=sMsg
        Exit For
      End If
    Next sht
  Else
    Sheets(ngcINP).Visible = True
    For Each sht In Sheets
      If Left(sht.Name, 2) = "Q." Then sht.Visible = False: Exit For
    Next sht
    Sheets(ngcINP).Select
    ActiveWindow.DisplayGridlines = False
    ngcWinsBySide bSingle:=True, bUpdating:=False
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  InvalidateControl
  Application.ScreenUpdating = True
  If Len(sMsg) > 1 Then ngcMessage.ManualShow sMsg:=Mid(sMsg, 2), sLabel:="An error(s) was found during operation:"
End Sub

'Callback for ngcModeSimple getVisible
Sub ngcModeVisible(control As IRibbonControl, ByRef returnedVal)
  Dim sht As Worksheet, qsEnb As Boolean, qsExs As Boolean, inExs As Boolean, inVis As Boolean
  inVis = False: inExs = fndIsSheet(ngcINP)
  qsExs = False: qsEnb = Sheets(ngcVAR).Cells(2, 23).Value
  If inExs Then inVis = Sheets(ngcINP).Visible Else inVis = True
  For Each sht In Sheets
    If Left(sht.Name, 2) = "Q." Then qsExs = True: Exit For
  Next sht
  '|fffd||fffd||fffd||fffd||fffd|
  Select Case control.iD
  Case "ngcModeSimple"
    returnedVal = (qsEnb And qsExs)
  Case "ngcModeLink"
    returnedVal = (qsEnb And qsExs And Not inVis)
  Case Else
    returnedVal = inVis
  End Select
End Sub

'Callback for ngcModeSimple getPressed
Sub ngcModeTglPressed(control As IRibbonControl, ByRef returnedVal)
  If fndIsSheet(ngcINP) Then
    returnedVal = Not Sheets(ngcINP).Visible
  Else: returnedVal = False: End If
End Sub

'Callback for ngcPrice getEnabled
Sub ngcPriceEnabled(control As IRibbonControl, ByRef returnedVal)
  returnedVal = ngcValid(False)
End Sub

'Callback for ngcPrice getEnabled
Sub ngcMSpecEnabled(control As IRibbonControl, ByRef returnedVal)
  returnedVal = ngcValid(False)
End Sub

'Callback for ngcPriceSel onAction
Sub ngcPriceTglClick(control As IRibbonControl, pressed As Boolean)
  Select Case control.iD
  Case "ngcPriceSel1"
    bSndPrice = Not CBool(pressed)
    InvalidateControl sControl:="ngcPriceSel2"
  Case "ngcPriceSel2"
    bSndPrice = CBool(pressed)
    InvalidateControl sControl:="ngcPriceSel1"
  Case Else
    MsgBox "'" & control.iD & "' not implemented in this version!", vbCritical
  End Select
End Sub

'Callback for ngcPriceSel getPressed
Sub ngcPriceTglPressed(control As IRibbonControl, ByRef returnedVal)
  Select Case control.iD
  Case "ngcPriceSel1"
    returnedVal = Not bSndPrice
  Case "ngcPriceSel2"
    returnedVal = bSndPrice
  Case Else
    MsgBox "'" & control.iD & "' not implemented in this version!", vbCritical
  End Select
End Sub

'Callback for ngcPrice onAction
Sub ngcPriceClick(control As IRibbonControl)
  Dim sDir As String, bErr As Boolean
  If ngcRibbon Is Nothing Then bSndPrice = (MsgBox("Configurator tab reference to ribbon was lost." & vbCrLf & "Do you want to do operation on first pricelist?", vbYesNo + vbQuestion) = vbNo)
  If control.iD = "ngcPriceClear" Then
    ngcPriceClear prcCol:=IIf(bSndPrice, PRC2, PRC1)
    ngcAFcreate '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  ElseIf control.iD = "ngcPriceBrowse" Then
    ngcPriceFile prcCol:=IIf(bSndPrice, PRC2, PRC1)
    ngcAFcreate '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  ElseIf Left(control.Tag, 5) = "file|" Then
    sDir = Sheets(ngcVAR).Cells(2, 8).Value: If Right(sDir, 1) <> "\" Then sDir = sDir & "\"
    If Dir(sDir, vbDirectory) <> "." Then MsgBox sDir & " not found!", vbCritical: Exit Sub
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    ngcPriceFile prcCol:=IIf(bSndPrice, PRC2, PRC1), fileFrom:=sDir & Mid(control.Tag, 6)
    ngcAFcreate '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  ElseIf Left(control.Tag, 5) = "inet|" Then
    sDir = Sheets(ngcVAR).Cells(2, 8).Value: If Right(sDir, 1) <> "\" Then sDir = sDir & "\"
    If Dir(sDir, vbDirectory) <> "." Then MsgBox sDir & " not found!", vbCritical: Exit Sub
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim httpFile As Object
    Set httpFile = CreateObject("MSXML2.XMLHTTP.3.0")
    httpFile.Open "GET", wssURL & Split(control.Tag, ";#")(1), False
    httpFile.Send
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    sDir = sDir & Mid(control.Tag, InStrRev(control.Tag, "/") + 1)
    With CreateObject("ADODB.Stream")
      .Type = 1: .Mode = 3: .Open: .Write httpFile.ResponseBody
      .SaveToFile sDir, 2: .Close
    End With
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    ngcPriceFile prcCol:=IIf(bSndPrice, PRC2, PRC1), fileFrom:=sDir
    ngcAFcreate '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  ElseIf Left(control.Tag, 6) = "offit|" Then
    ngcPriceSQL prcCol:=IIf(bSndPrice, PRC2, PRC1), strConnect:=control.Tag
    ngcAFcreate '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  Else
    MsgBox "Loading '" & control.iD & "' tag " & control.Tag, vbInformation
  End If
End Sub

'Callback for ngcPriceFiles getContent
Sub ngcPriceFilesGetContent(control As IRibbonControl, ByRef content)
  Dim sXML As String
  Dim xmlPrc As Object, sDir As String, sFile As String, iCnt As Long
  Set xmlPrc = CreateObject("MSXML2.DOMDocument")
  xmlPrc.setProperty "SelectionLanguage", "XPath"
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  sDir = Sheets(ngcVAR).Cells(2, 8).Value: If Right(sDir, 1) <> "\" Then sDir = sDir & "\"
  iCnt = 0: sXML = ""
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  sFile = Dir(sDir, vbDirectory)
  Do While sFile <> ""
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If (sFile = ".") Or (sFile = "..") Or (sFile <> escID(sFile, 2, Nothing, "")) Then
      '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ElseIf (GetAttr(sDir & sFile) And vbDirectory) <> vbDirectory Then
      If Right(sFile, 4) = ".csp" Then
        iCnt = iCnt + 1
        sXML = "<button id=""ngcPrice" & CStr(iCnt) & """ onAction=""ngcPriceClick"" label=""" & sFile & """ imageMso=""ImportTextFile"" tag=""file|" & sFile & """ />" & vbCrLf & sXML
      ElseIf Right(sFile, 4) = ".xml" Then
        xmlPrc.Load sDir & sFile
        xmlPrc.LoadXML Replace(Replace(xmlPrc.xml, " xmlns=""http://www.iskratel.si/xmlnamespaces""", ""), " xmlns='http://www.iskratel.si/xmlnamespaces'", "")
        If xmlPrc.SelectNodes("/PriceList/*").Length = 1 Then
          iCnt = iCnt + 1
          sXML = "<button id=""ngcPrice" & CStr(iCnt) & """ onAction=""ngcPriceClick"" label=""" & sFile & """ imageMso=""ImportXmlFile"" tag=""file|" & sFile & """ />" & vbCrLf & sXML
        End If
      End If
    End If
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|.|fffd||fffd||fffd||fffd|
    sFile = Dir
  Loop
  Set xmlPrc = Nothing
  content = "<menu xmlns=""http://schemas.microsoft.com/office/2006/01/customui"">" & vbCrLf & _
    "<button id=""ngcPriceBrowse"" onAction=""ngcPriceClick"" label=""Browse pricelist files..."" imageMso=""BlogOpenExisting"" />" & vbCrLf & _
    "<menuSeparator id=""ngcPrice" & Right(control.iD, 3) & "Sep"" title=""Local files from '" & sDir & "'"" />" & vbCrLf & sXML & "</menu>"
End Sub

'Callback for ngcPriceOffit getContent
Sub ngcPriceOffitGetContent(control As IRibbonControl, ByRef content)
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Const hKey As Long = &H80000001
  Dim oReg As Object, vKeys As Variant, vTypes As Variant
  Set oReg = GetObject("winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv")
  oReg.enumValues hKey, "Software\Iskratel\Offit\Connections", vKeys, vTypes
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  Dim sXML As String, sKey As String, iKey As Long
  sXML = ""
  If Not IsNull(vKeys) Then
    For iKey = LBound(vKeys) To UBound(vKeys)
      sKey = vbNullString
      oReg.getStringValue hKey, "Software\Iskratel\Offit\Connections", vKeys(iKey), sKey
      If CStr(vKeys(iKey)) = "" Then
        sXML = "<dynamicMenu id=""ngcPriceDB" & CStr(iKey) & """ getContent=""ngcPriceListGetContent"" label=""Default Offit base"" imageMso=""DatabaseCopyDatabaseFile"" tag=""" & sKey & """ />" & vbCrLf & _
          "<menuSeparator id=""ngcPriceDB" & CStr(iKey) & "Sep"" title=""Other registered Offit bases"" />" & vbCrLf & sXML
      Else: sXML = sXML & "<dynamicMenu id=""ngcPriceDB" & CStr(iKey) & """ getContent=""ngcPriceListGetContent"" label=""" & vKeys(iKey) & """ imageMso=""DatabaseCopyDatabaseFile"" tag=""" & sKey & """ />" & vbCrLf: End If
    Next iKey
    content = "<menu xmlns=""http://schemas.microsoft.com/office/2006/01/customui"">" & vbCrLf & sXML & "</menu>"
  Else
    content = "<menu xmlns=""http://schemas.microsoft.com/office/2006/01/customui"">" & _
              "<menuSeparator id=""ngcPriceInetErrSep"" title=""There is no registered Offit database!"" />" & _
              "<button id=""ngcPriceInetErr"" label=""Please check registered databases list in Offit."" imageMso=""CancelRequest"" /></menu>"
  End If
End Sub

'Callback for ngcPriceOffit getContent
Sub ngcPriceListGetContent(control As IRibbonControl, ByRef content)
  On Error GoTo ngcDBContentError
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| ADODB
  Dim dbCntn As Object 'ADODB.Connection
  Set dbCntn = CreateObject("ADODB.Connection")
  dbCntn.ConnectionString = "Provider=sqloledb;" & control.Tag
  dbCntn.ConnectionTimeout = 10
  dbCntn.Open
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
  Dim sXML As String, iKey As Long
  sXML = "": iKey = 0
  Dim dbRS As Object 'ADODB.Recordset
  Set dbRS = dbCntn.Execute("SELECT * FROM dbo.T_GD_TP04 WHERE Aktualen='True'")
  While Not dbRS.EOF
    sXML = "<button id=""ngcPriceList" & CStr(iKey) & """ onAction=""ngcPriceClick"" label=""" & dbRS.Fields("Opis").Value & """ imageMso=""GroupImport"" tag=""offit|" & dbRS.Fields("CenikID").Value & "|" & control.Tag & "|" & dbRS.Fields("Opis").Value & "|" & dbRS.Fields("Valuta").Value & """ />" & vbCrLf & sXML
    dbRS.MoveNext: iKey = iKey + 1 '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Wend
  content = "<menu xmlns=""http://schemas.microsoft.com/office/2006/01/customui"">" & vbCrLf & sXML & "</menu>"
ngcDBContentError:
  If Err.Number = -2147467259 Then
    content = "<menu xmlns=""http://schemas.microsoft.com/office/2006/01/customui"">" & _
              "<menuSeparator id=""ngcPriceInetErrSep"" title=""Offit database is not accessible!"" />" & _
              "<button id=""ngcPriceInetErr"" label=""Please check connection and your rights to this database."" imageMso=""CancelRequest"" /></menu>"
  ElseIf Err.Number <> 0 Then
    content = "<menu xmlns=""http://schemas.microsoft.com/office/2006/01/customui"">" & _
              "<menuSeparator id=""ngcPriceInetErrSep"" title=""An error occur during operation!"" />" & _
              "<button id=""ngcPriceInetErr"" label=""" & Err.Description & " (" & CStr(Err.Number) & ")"" imageMso=""CancelRequest"" /></menu>"
  End If
End Sub

'Callback for ngcPriceOffit getContent
Sub ngcPriceInetGetContent(control As IRibbonControl, ByRef content)
  On Error GoTo ngcInetContentError
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| SOAP
  Dim soapCnt As Object, soapSrl As Object, soapRdr As Object
  Set soapCnt = CreateObject("MSOSOAP.HttpConnector30")
  Set soapSrl = CreateObject("MSOSOAP.SoapSerializer30")
  Set soapRdr = CreateObject("MSOSOAP.SoapReader30")
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  soapCnt.Property("EndPointURL") = wssURL & "organizational_portals/sales/splosne_informacije_prodajna_orodja/orodja_dokumenti/price_lists/PriceLists/_vti_bin/lists.asmx"
  soapCnt.Property("SoapAction") = "http://schemas.microsoft.com/sharepoint/soap/GetListItems"
  soapCnt.Property("Timeout") = "7200"
  soapCnt.Connect
  soapCnt.BeginMessage
  soapSrl.INIT soapCnt.InputStream
  soapSrl.startEnvelope
  soapSrl.startBody
  soapSrl.startElement "GetListItems", "http://schemas.microsoft.com/sharepoint/soap/"
    '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    soapSrl.startElement "listName", "http://schemas.microsoft.com/sharepoint/soap/"
    soapSrl.WriteString "{8A3EE65C-93C2-4800-8B90-D63916DC00A6}"
    soapSrl.endElement
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    soapSrl.startElement "rowLimit", "http://schemas.microsoft.com/sharepoint/soap/"
    soapSrl.WriteString "50"
    soapSrl.endElement
  soapSrl.endElement
  soapSrl.endBody
  soapSrl.endEnvelope
  soapCnt.EndMessage
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  soapRdr.Load soapCnt.OutputStream
  If Not soapRdr.FaultCode Is Nothing Then
    content = "<menu xmlns=""http://schemas.microsoft.com/office/2006/01/customui"">" & _
              "<menuSeparator id=""ngcPriceInetErrSep"" title=""An error occur during operation!"" />" & _
              "<button id=""ngcPriceInetErr"" label=""An error occured during connecting (" & CStr(soapRdr.FaultCode) & ")"" imageMso=""CancelRequest"" /></menu>"
    Exit Sub
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| XML
  Dim xmlAns As Object, xmlNod As Object, xmlPrc As Object, iKey As Long, sXML As String
  Set xmlAns = CreateObject("MSXML2.DOMDocument")
  xmlAns.LoadXML soapRdr.Body.ChildNodes(0).xml
  xmlAns.setProperty "SelectionLanguage", "XPath"
  xmlAns.setProperty "SelectionNamespaces", "xmlns:z='#RowsetSchema'"
  soapCnt.Reset
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim vCtr As Variant, sCtr As String, iCtr As Long, iPos As Long
  sXML = "<menuSeparator id=""menuInetSepOther"" title=""Other"" />" & vbCrLf
  If Not xmlAns Is Nothing Then
    Set xmlPrc = xmlAns.SelectNodes("//z:row")
    If xmlPrc.Length > 0 Then
      For Each xmlNod In xmlPrc
        If xmlNod.getAttribute("ows_LinkFilename") Like "*.xml" Then
          sCtr = xmlNod.getAttribute("ows_Country_x003a_"): If Len(sCtr) < 5 Then sCtr = ";#;#"
          vCtr = Split(sCtr, ";#")
          For iCtr = 1 To UBound(vCtr) - 1
            If vCtr(iCtr) <> "" Then
              iPos = InStr(sXML, "menuSeparator id=""menuInetSep" & vCtr(iCtr) & """")
              If iPos = 0 Then
                sXML = "<menuSeparator id=""menuInetSep" & vCtr(iCtr) & """ title=""" & vCtr(iCtr) & """ />" & vbCrLf & sXML
                iPos = InStr(sXML, "/>") + 2
              Else: iPos = InStr(iPos, sXML, "<menuSeparator ") - 2: End If
              sXML = Left(sXML, iPos - 1) & vbCrLf & "<button id=""ngcPriceInet" & CStr(iKey) & """ onAction=""ngcPriceClick"" label=""" & xmlNod.getAttribute("ows_LinkFilename") & """ imageMso=""ImportXmlFile"" tag=""inet|" & xmlNod.getAttribute("ows_FileRef") & """ />" & Mid(sXML, iPos)
              iKey = iKey + 1
            Else
              sXML = sXML & "<button id=""ngcPriceInet" & CStr(iKey) & """ onAction=""ngcPriceClick"" label=""" & xmlNod.getAttribute("ows_LinkFilename") & """ imageMso=""ImportXmlFile"" tag=""inet|" & xmlNod.getAttribute("ows_FileRef") & """ />" & vbCrLf
              iKey = iKey + 1
            End If
          Next iCtr
        End If
      Next xmlNod
    Else
      sXML = "<menuSeparator id=""ngcPriceInetErrSep"" title=""List of pricelist is empty!"" />" & _
             "<button id=""ngcPriceInetErr"" label=""You have no permission to access pricelists."" imageMso=""CancelRequest"" />"
    End If
    Set xmlNod = Nothing
  End If
  content = "<menu xmlns=""http://schemas.microsoft.com/office/2006/01/customui"">" & vbCrLf & sXML & "</menu>"
ngcInetContentError:
  If Err.Number = 5400 Then
    content = "<menu xmlns=""http://schemas.microsoft.com/office/2006/01/customui"">" & _
              "<menuSeparator id=""ngcPriceInetErrSep"" title=""Iskratel Inet price portal is not accessible!"" />" & _
              "<button id=""ngcPriceInetErr"" label=""Please check connection and validity of your password."" imageMso=""CancelRequest"" /></menu>"
  ElseIf Err.Number <> 0 Then
    content = "<menu xmlns=""http://schemas.microsoft.com/office/2006/01/customui"">" & _
              "<menuSeparator id=""ngcPriceInetErrSep"" title=""An error occur during operation!"" />" & _
              "<button id=""ngcPriceInetErr"" label=""" & Err.Description & " (" & CStr(Err.Number) & ")"" imageMso=""CancelRequest"" /></menu>"
  End If
End Sub

'Callback for ngcToolbox getVisible
Sub ngcToolsVisible(control As IRibbonControl, ByRef returnedVal)
  Dim inVis As Boolean
  inVis = True: If fndIsSheet(ngcINP) Then inVis = Sheets(ngcINP).Visible
  returnedVal = inVis And CBool(Sheets("VarX").Cells(2, 28).Value)
End Sub

'Callback for ngcToolbox getEnabled
Sub ngcToolsEnabled(control As IRibbonControl, ByRef returnedVal)
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Not Sheets(ngcVAR).Cells(2, 29).Value Then returnedVal = False: Exit Sub
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Dim sDir As String
  sDir = Sheets(ngcVAR).Cells(2, 8).Value: If Right(sDir, 1) <> "\" Then sDir = sDir & "\"
  Select Case control.iD
  Case "ngcToolsPrc"
    returnedVal = (Dir(sDir, vbDirectory) <> "")
  Case "ngcToolsXtr"
    returnedVal = (Dir(sDir & "SAPzpot_cache.ngc") <> "")
  Case Else
    returnedVal = (Dir(sDir & "SAPcodes_cache.ngc") <> "")
  End Select
End Sub

'Callback for ngcViewSide onAction
Sub ngcToolsClick(control As IRibbonControl)
  Dim var As Worksheet, wbk As Workbook, vPath As Variant, vFile As Variant, sFile As String
  Dim xmlPrc As Object, xmlLst As Object, xmlCps As Object, xmlCod As Object
  Dim sErr As String, sLng As String, iLst As Integer, iRow As Integer
  Set var = Sheets(ngcVAR): If fndIsSheet(ngcINP) Then sLng = Sheets(ngcINP).Cells(1, INFL).Value Else sLng = "E1"
  On Error GoTo ngcToolsClickError
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Select Case control.iD
  Case "ngcToolMath"
    frmToolMath.Show vbModeless
  Case "ngcToolSpcs"
    Dim hdr As Worksheet, iHdr As Integer, pnt As Worksheet, iCpr As Integer, iCpn As Integer
    Dim sSum As String, sTmp As String, iTmp As Integer
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    vPath = Application.GetOpenFilename(FileFilter:="Iskratel XML specification,*.xml", MultiSelect:=True)
    If VarType(vPath) = vbBoolean Then Exit Sub
    If VarType(vPath) >= vbArray Then vFile = vPath Else vFile = Array(vPath)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Application.StatusBar = "Preparing workbook..."
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Set wbk = Workbooks.Add(xlWBATWorksheet)
    iLst = 1: Set hdr = wbk.Sheets(iLst)
    var.Parent.Activate
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Application.StatusBar = "Loading XML file..."
    Set xmlPrc = CreateObject("MSXML2.DOMDocument")
    xmlPrc.setProperty "SelectionLanguage", "XPath"
    xmlPrc.Load sFile
    xmlPrc.LoadXML Replace(Replace(xmlPrc.xml, " xmlns=""http://www.iskratel.si/xmlnamespaces""", ""), " xmlns='http://www.iskratel.si/xmlnamespaces'", "")
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Application.StatusBar = "Preparing SUMMARY sheet..."
    wrtApS sht:=hdr, dft:=Nothing, sName:="SUMMARY", bPrint:=True
    hdr.PageSetup.Orientation = xlLandscape
    wrtApC rng:=hdr.Range(hdr.Cells(1, 1), hdr.Cells(1, 7)), iCols:=Array(1, 2, 3, 4, 5, 6, 7), _
      cWths:=Array(4, 14, 26, 8, 8, 12, 14, 12, 14), _
      cFrms:=Array("", "", "", "", "", "#,##0.00", "#,##0.00"), _
      cAlgs:=Array(xlLeft, xlLeft, xlLeft, xlRight, xlRight, xlRight, xlRight), cFncs:=Array(-1)
    hdr.Columns(3).EntireColumn.WrapText = True
    wrtApR rng:=hdr.Range(hdr.Cells(1, 1), hdr.Cells(1, 7)), iCols:=Array(1), _
      cTxts:=Array(ngcL(var.Cells(22, 3).Value, sLng, False)), tpl:=var.Cells(30, 3), iApr:=2
    hdr.Cells(1, 1).Font.Bold = True
    wrtApR rng:=hdr.Range(hdr.Cells(3, 1), hdr.Cells(3, 7)), iCols:=Array(1, 2, 3, 4, 5, 6, 7), _
      cTxts:=Array(ngcL(var.Cells(23, 2).Value, sLng, False), ngcL(var.Cells(23, 3).Value, sLng, False), _
      ngcL(var.Cells(23, 4).Value, sLng, False), ngcL(var.Cells(23, 5).Value, sLng, False), _
      ngcL(var.Cells(23, 6).Value, sLng, False)), tpl:=var.Cells(30, 4), iApr:=0
    hdr.Cells(3, 6).Value = ngcL(var.Cells(23, 7).Value, sLng, False)
    hdr.Cells(3, 7) = ngcL(var.Cells(23, 8).Value, sLng, False)
    hdr.Cells(3, 8).Font.Size = 14
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    iLst = 1: iHdr = 4
    For Each vPath In vFile
      xmlPrc.Load CStr(vPath)
      xmlPrc.LoadXML Replace(Replace(xmlPrc.xml, " xmlns=""http://www.iskratel.si/xmlnamespaces""", ""), " xmlns='http://www.iskratel.si/xmlnamespaces'", "")
      For Each xmlLst In xmlPrc.SelectNodes("/OrderIntakeData/T_AU00/T_AU05")
        Application.StatusBar = "Specification " & CStr(iLst) & ": Prepare sheet... "
        '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        iLst = iLst + 1: sSum = ""
        If wbk.Sheets.Count < iLst Then Set pnt = wbk.Sheets.Add(After:=wbk.Sheets(wbk.Sheets.Count)) Else Set pnt = wbk.Sheets(iLst)
        wrtApS sht:=pnt, dft:=Nothing, sName:=escID(xmlLst.getAttribute("SPEC") & "#" & CStr(iLst - 1), 2, Nothing, sErr), bPrint:=True '2=filename
        wrtApC rng:=pnt.Range(pnt.Cells(1, 1), pnt.Cells(1, 7)), iCols:=Array(1, 2, 3, 4, 5, 6, 7, 8), _
          cWths:=Array(6, 12, 25, 8, 12, 10, 14), _
          cFrms:=Array("", "", "", "", "#,##0.00", "#,##0.00%", "#,##0.00"), _
          cAlgs:=Array(xlLeft, xlLeft, xlLeft, xlRight, xlRight, xlRight, xlRight), cFncs:=Array(-1)
        wrtApR rng:=pnt.Range(pnt.Cells(1, 1), pnt.Cells(1, 7)), iCols:=Array(1), _
          cTxts:=Array(xmlLst.getAttribute("ImeSpecifikacije")), tpl:=var.Cells(30, 4), iApr:=2
        pnt.Columns(3).EntireColumn.WrapText = True
        pnt.Columns(6).EntireColumn.Hidden = True
        pnt.Columns(9).EntireColumn.Hidden = True
        pnt.Columns(11).EntireColumn.Hidden = True
        '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        hdr.Cells(iHdr, 1).Value = "'" & CStr(iHdr - 3) & "."
        hdr.Cells(iHdr, 2).Value = "'" & xmlLst.getAttribute("SPEC")
        hdr.Cells(iHdr, 3).FormulaR1C1 = "='" & pnt.Name & "'!r1c1"
        hdr.Cells(iHdr, 5).Value = 1
        hdr.Cells(iHdr, 7).FormulaR1C1 = "=rc[-2]*rc[-1]"
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        Application.StatusBar = "Specification " & CStr(iLst) & ": Writing technical data..."
        iRow = 2
        For Each xmlCod In xmlLst.SelectNodes("T_AU06")
          If Not IsNull(xmlCod.getAttribute("TehPodText")) Then sTmp = xmlCod.getAttribute("TehPodText") Else sTmp = ""
          If sTmp = "" Then sTmp = xmlCod.getAttribute("TehPod")
          pnt.Cells(iRow, 1).Value = sTmp
          pnt.Cells(iRow, 7).NumberFormat = "#,##0"
          pnt.Cells(iRow, 7).Value = xmlCod.getAttribute("Vrednost")
          If Not IsNull(xmlCod.getAttribute("VPon")) Then pnt.Rows(iRow).Hidden = (xmlCod.getAttribute("TehPod") = "VRSTA1") Or (Not CBool(xmlCod.getAttribute("VPon")))
          If xmlCod.getAttribute("TehPod") = "PORTI" Or xmlCod.getAttribute("TehPod") = "PORTS" Then hdr.Cells(iHdr, 4).FormulaR1C1 = "='" & pnt.Name & "'!r" & CStr(iRow) & "c7"
          iRow = iRow + 1
        Next xmlCod
        iRow = iRow + 1
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Application.StatusBar = "Specification " & CStr(iLst) & ": Writing content..."
        iCpn = 1: iCpr = 0
        For Each xmlCps In xmlLst.SelectNodes("T_CSI_PogodbeneTocke")
          If Not IsNull(xmlCps.getAttribute("SifPogTText")) Then sTmp = xmlCps.getAttribute("SifPogTText") Else sTmp = ""
          If sTmp = "" Then sTmp = xmlCps.getAttribute("SifPogT")
          wrtApR rng:=pnt.Range(pnt.Cells(iRow, 1), pnt.Cells(iRow, 7)), iCols:=Array(1, 2, 3), _
            cTxts:=Array("'" & CStr(iCpn) & ".", sTmp), tpl:=var.Cells(30, 4), iApr:=3
          If iCpr > 0 And iRow - iCpr > 1 Then pnt.Cells(iCpr, 7).FormulaR1C1 = "=sum(r" & CStr(iCpr + 1) & "c:r" & CStr(iRow - 1) & "c)"
          sSum = sSum & ",r" & CStr(iRow) & "c"
          iCpr = iRow: iRow = iRow + 1
          '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
          iTmp = 1
          For Each xmlCod In xmlCps.SelectNodes("T_CSI_Specs")
            pnt.Cells(iRow, 1).Value = "'" & CStr(iCpn) & "." & CStr(iTmp) & "."
            pnt.Cells(iRow, 2).Value = xmlCod.getAttribute("KODA")
            If Not IsNull(xmlCod.getAttribute("Tekst")) Then pnt.Cells(iRow, 3).Value = xmlCod.getAttribute("Tekst")
            If Not IsNull(xmlCod.getAttribute("Kol")) Then pnt.Cells(iRow, 4).Value = Val(xmlCod.getAttribute("Kol"))
            If Not IsNull(xmlCod.getAttribute("CenikCena")) Then pnt.Cells(iRow, 5).Value = Val(xmlCod.getAttribute("CenikCena")) Else pnt.Cells(iRow, 5).Value = 0
            pnt.Cells(iRow, 6).Value = 0
            pnt.Cells(iRow, 7).FormulaR1C1 = "=rc4*rc[-2]*(1-rc[-1])"
            iRow = iRow + 1: iTmp = iTmp + 1
          Next xmlCod
          If iCpr > 0 And iRow - iCpr > 1 Then pnt.Cells(iCpr, 7).FormulaR1C1 = "=sum(r" & CStr(iCpr + 1) & "c:r" & CStr(iRow - 1) & "c)"
          iCpn = iCpn + 1 '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Next xmlCps
        '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        If Len(sSum) > 1 Then
          iRow = iRow + 1
          wrtApR rng:=pnt.Cells(iRow, 7), iCols:=Array(1), cTxts:=Array("=sum(" & Mid(sSum, 2) & ")"), tpl:=var.Cells(30, 4), iApr:=0
          hdr.Cells(iHdr, 6).FormulaR1C1 = "='" & pnt.Name & "'!r" & CStr(iRow) & "c7"
        End If
        iHdr = iHdr + 1 '|fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Next xmlLst
    Next vPath
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    hdr.Parent.Activate
    hdr.Select
  Case "ngcToolPrcs"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    vPath = Application.GetOpenFilename("Iskratel XML pricelist,*.xml")
    If vPath = False Then Exit Sub Else sFile = vPath
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Set wbk = Workbooks.Add(xlWBATWorksheet)
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Set xmlPrc = CreateObject("MSXML2.DOMDocument")
    xmlPrc.setProperty "SelectionLanguage", "XPath"
    xmlPrc.Load sFile
    xmlPrc.LoadXML Replace(Replace(xmlPrc.xml, " xmlns=""http://www.iskratel.si/xmlnamespaces""", ""), " xmlns='http://www.iskratel.si/xmlnamespaces'", "")
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    iLst = 0
    For Each xmlLst In xmlPrc.SelectNodes("/PriceList/T_GD_TP04")
      iLst = iLst + 1
      If wbk.Sheets.Count < iLst Then wbk.Sheets.Add
      wbk.Sheets(iLst).Name = xmlLst.getAttribute("Opis")
      wrtApR rng:=wbk.Sheets(iLst).Range(wbk.Sheets(iLst).Cells(1, 1), wbk.Sheets(iLst).Cells(1, 3)), iCols:=Array(1, 2, 3), _
             cTxts:=Array(ngcL(var.Cells(21, 4).Value, sLng, False)), tpl:=var.Cells(30, 5), iApr:=3
      wbk.Sheets(iLst).Columns(1).ColumnWidth = 12
      wbk.Sheets(iLst).Columns(1).HorizontalAlignment = xlLeft
      wbk.Sheets(iLst).Columns(2).NumberFormat = "#,##0.00"
      wbk.Sheets(iLst).Columns(3).NumberFormat = "#,##0.00"
      iRow = 2
      For Each xmlCod In xmlLst.SelectNodes("*")
        If xmlCod.BaseName = "T_TP_CENIKIKABEL" Then
          wbk.Sheets(iLst).Cells(iRow, 1).Value = xmlCod.getAttribute("KABEL")
          If Not IsNull(xmlCod.getAttribute("CENA")) Then wbk.Sheets(iLst).Cells(iRow, 2).Value = xmlCod.getAttribute("CENA")
          If Not IsNull(xmlCod.getAttribute("KonCena")) Then wbk.Sheets(iLst).Cells(iRow, 3).Value = xmlCod.getAttribute("KonCena")
        Else
          wbk.Sheets(iLst).Cells(iRow, 1).Value = xmlCod.getAttribute("KODA")
          If Not IsNull(xmlCod.getAttribute("CENA")) Then wbk.Sheets(iLst).Cells(iRow, 2).Value = xmlCod.getAttribute("CENA")
        End If
        iRow = iRow + 1
      Next xmlCod
    Next xmlLst
  Case "ngcToolXttr"
    frmToolExtr.Show vbModeless
  Case "ngcInfoCod"
    frmToolInfo.PrepareAndShow sCode:=CStr(ActiveCell.Value)
  Case "ngcInfoTxt"
    frmToolFuns.frmWork = "Text"
    frmToolFuns.PrepareAndShow frmCaption:="Find texts for codes...", frmFst:="Code column:", frmSnd:="Text column:", frmTrd:="Language:;+R1-E1-L1;+R1+E1-L1;+U1-R1-E1;+E1-L1;+E1+L1;+L1-E1;+C1-E1", frmOvr:="Overwrite"
  Case "ngcInfoPrc"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Dim sDir As String, sLst As String
    Set xmlPrc = CreateObject("MSXML2.DOMDocument")
    xmlPrc.setProperty "SelectionLanguage", "XPath"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    sDir = Sheets(ngcVAR).Cells(2, 8).Value: If Right(sDir, 1) <> "\" Then sDir = sDir & "\"
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    sLst = "": sFile = Dir(sDir, vbDirectory)
    Do While sFile <> ""
      If (sFile = ".") Or (sFile = "..") Or (sFile <> escID(sFile, 2, Nothing, "")) Then
        '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      ElseIf LCase(Right(sFile, 4)) = ".xml" And (GetAttr(sDir & sFile) And vbDirectory) <> vbDirectory Then
        xmlPrc.Load sDir & sFile
        xmlPrc.LoadXML Replace(Replace(xmlPrc.xml, " xmlns=""http://www.iskratel.si/xmlnamespaces""", ""), " xmlns='http://www.iskratel.si/xmlnamespaces'", "")
        If xmlPrc.SelectNodes("/PriceList/*").Length = 1 Then sLst = ";" & sFile & sLst
      End If
      sFile = Dir
    Loop
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    If sLst <> "" Then
      frmToolFuns.frmWork = "Price"
      frmToolFuns.PrepareAndShow frmCaption:="Load prices for codes...", frmFst:="Code column:", frmSnd:="Price column:", frmTrd:="XML pricelist file:" & sLst, frmOvr:="Overwrite"
    Else: MsgBox "Can't found any pricelists in:" & vbCrLf & sDir, vbExclamation: End If
  Case "ngcInfoAbc"
    frmToolFuns.frmWork = "ABC"
    frmToolFuns.PrepareAndShow frmCaption:="Find ABC for codes...", frmFst:="Code column:", frmSnd:="ABC column:", frmOvr:="Overwrite"
  Case "ngcInfoSts"
    frmToolFuns.frmWork = "Status"
    frmToolFuns.PrepareAndShow frmCaption:="Find statuses for codes...", frmFst:="Code column:", frmSnd:="Status column:", frmOvr:="Overwrite"
  Case "ngcInfoWgt"
    frmToolFuns.frmWork = "Weight"
    frmToolFuns.PrepareAndShow frmCaption:="Find weights for codes...", frmFst:="Code column:", frmSnd:="Weight column:", frmOvr:="Overwrite"
  Case "ngcInfoVol"
    frmToolFuns.frmWork = "Volume"
    frmToolFuns.PrepareAndShow frmCaption:="Find volumes for codes...", frmFst:="Code column:", frmSnd:="Volume column:", frmOvr:="Overwrite"
  Case "ngcInfoDim"
    frmToolFuns.frmWork = "Size"
    frmToolFuns.PrepareAndShow frmCaption:="Find dimensions for codes...", frmFst:="Code column:", frmSnd:="Dimension column:", frmOvr:="Overwrite"
  Case Else
    MsgBox "'" & control.iD & "' not implemented in this version!", vbCritical
  End Select
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
ngcToolsClickError:
  Application.Calculation = xlCalculationAutomatic
  Application.ScreenUpdating = True
  Application.StatusBar = False
  If Err.Number <> 0 Then MsgBox "An error occur during operation:" & vbCrLf & Err.Description & " (" & Err.Number & ")", vbCritical
End Sub

'Callback for ngcViewSide onAction
Sub ngcViewClick(control As IRibbonControl)
  Select Case control.iD
  Case "ngcViewSide"
    Dim sht As Worksheet, bOne As Boolean, bMsp As Boolean
    bMsp = (GetKeyState(vbKeyMenu) < 0 And Sheets(ngcINP).Cells(1, INTM + 1).Value <> "")
    bOne = bMsp Or (ActiveWorkbook.Windows.Count > 1 And ActiveWindow.WindowState <> xlMaximized)
    If (Not bOne) And fndIsSheet(ngcVAR) And fndIsSheet(ngcINP) Then
      If (Sheets(ngcVAR).Visible = xlSheetVisible) And (Not Sheets(ngcVAR).Cells(2, 13).Value) Then ngcModulesOff
    End If
    If bMsp Then
      Application.ScreenUpdating = False
      ngcWinsBySide bSingle:=True, bUpdating:=False
      ngcAFturnoff
      Set sht = ActiveSheet
      Sheets(ngcINP).Select
      ActiveWindow.SplitRow = 5 - 1 * (Sheets(ngcINP).Cells(6, INID).Value = "OBJECT")
      ActiveWindow.SplitColumn = INTM
      ActiveWindow.FreezePanes = True
      Sheets(ngcCSI).Select
      ActiveWindow.SplitRow = 2
      ActiveWindow.SplitColumn = SPTM
      ActiveWindow.FreezePanes = True
      sht.Activate
      ngcAFcreate '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| ScreenUpdating = True
    Else: ngcWinsBySide bSingle:=bOne: End If
  Case "ngcViewJump"
    frmCfgGoto.Show
  Case "ngcViewCalc"
    frmCfgErl.Show vbModeless
  Case "ngcViewRefresh"
    Application.EnableEvents = True
    InvalidateControl bShowErr:=False
    ngcAFcreate
    Application.StatusBar = False
    Application.Cursor = xlDefault
  Case Else
    If Left(control.iD, 10) = "ngcViewLng" Then
      If fndIsSheet(ngcINP) Then
        Application.ScreenUpdating = False
        Sheets(ngcINP).Cells(1, INFL).Value = control.Tag
        Sheets(ngcINP).Rows.AutoFit
        If fndIsSheet(ngcCSI) Then Sheets(ngcCSI).Rows.AutoFit
        Application.ScreenUpdating = True
      End If
    Else
      MsgBox "'" & control.iD & "' not implemented in this version!", vbCritical
    End If
  End Select
End Sub

'Callback for ngcViewVars onAction
Sub ngcViewTglClick(control As IRibbonControl, pressed As Boolean)
  Select Case control.iD
  Case "ngcViewFltr"
    If pressed Then ngcAFturnoff Else ngcAFcreate
  Case "ngcViewTmpl"
    If pressed And Windows.Count > 1 Then ngcWinsBySide bSingle:=True
    ngcModulesShow bShow:=pressed
  Case Else
    MsgBox "Unknown control '" & control.iD & "'!", vbCritical
  End Select
End Sub

'Callback for ngcViewVars getPressed
Sub ngcViewTglPressed(control As IRibbonControl, ByRef returnedVal)
  Select Case control.iD
  Case "ngcViewFltr"
    If fndIsSheet(ngcCSI) And fndIsSheet(ngcINP) Then
      returnedVal = bAFoff
    Else: returnedVal = False: End If
  Case "ngcViewTmpl"
    returnedVal = Sheets(ngcVAR).Visible
  Case Else
    MsgBox "Unknown control '" & control.iD & "'!", vbCritical
  End Select
End Sub

'Callback for ngcViewChanges onAction
Sub ngcViewChbClick(control As IRibbonControl, pressed As Boolean)
  Select Case control.iD
  Case "ngcViewDetail"
    Application.EnableEvents = False
    Sheets(ngcVAR).Cells(2, 22).Value = pressed
    Application.EnableEvents = True
    ngcAFcreate
  Case "ngcViewChanges"
    Sheets(ngcVAR).Cells(2, 17).Value = pressed
    ngcAFmanual pressed:=pressed
    ngcAFcreate
  Case "ngcViewVars"
    Sheets(ngcVAR).Cells(2, 18).Value = pressed
    ngcAFcreate
  Case "ngcViewOrd"
    Sheets(ngcVAR).Cells(2, 19).Value = pressed
  Case "ngcViewCENs"
    Sheets(ngcVAR).Cells(2, 21).Value = pressed
    ngcAFcreate
  Case "ngcViewLabels"
    Sheets(ngcVAR).Cells(2, 20).Value = pressed
  Case Else
    MsgBox "'" & control.iD & "' not implemented in this version!", vbCritical
  End Select
End Sub

'Callback for ngcViewChanges getPressed
Sub ngcViewChbPressed(control As IRibbonControl, ByRef returnedVal)
  Select Case control.iD
  Case "ngcViewDetail"
    returnedVal = Sheets(ngcVAR).Cells(2, 22).Value
  Case "ngcViewChanges"
    returnedVal = Sheets(ngcVAR).Cells(2, 17).Value
  Case "ngcViewVars"
    returnedVal = Sheets(ngcVAR).Cells(2, 18).Value
  Case "ngcViewOrd"
    returnedVal = Sheets(ngcVAR).Cells(2, 19).Value
  Case "ngcViewCENs"
    returnedVal = Sheets(ngcVAR).Cells(2, 21).Value
  Case "ngcViewLabels"
    returnedVal = Sheets(ngcVAR).Cells(2, 20).Value
  Case Else
    MsgBox "'" & control.iD & "' not implemented in this version!", vbCritical
    returnedVal = False
  End Select
End Sub

'Callback for ngcPriceOffit getContent
Sub ngcViewOptGetContent(control As IRibbonControl, ByRef content)
  Dim iKey As Long, sXML As String, vLng As Variant, sIco As String
  sXML = "": vLng = Split(Sheets(ngcVAR).Cells(2, 27).Value, ";")
  For iKey = LBound(vLng) To UBound(vLng)
    If Left(vLng(iKey), 1) Like ("[A-Z]") Then sIco = " imageMso=""" & Left(vLng(iKey), 1) & """ " Else sIco = ""
    sXML = sXML & "<button id=""ngcViewLng" & CStr(iKey) & """ onAction=""ngcViewClick"" label=""Set language " & vLng(iKey) & """ tag=""" & vLng(iKey) & """" & sIco & " />" & vbCrLf
  Next iKey
  If sXML <> "" Then sXML = sXML & "<menuSeparator id=""ngcViewMenuSep1"" />" & vbCrLf
  content = "<menu xmlns=""http://schemas.microsoft.com/office/2006/01/customui"">" & vbCrLf & sXML & _
    "<checkBox id=""ngcViewDetail"" onAction=""ngcViewChbClick"" label=""Show local questionnaire"" getPressed=""ngcViewChbPressed"" />" & vbCrLf & _
    "<checkBox id=""ngcViewChanges"" onAction=""ngcViewChbClick"" label=""Show manual changes"" getPressed=""ngcViewChbPressed"" />" & vbCrLf & _
    "<checkBox id=""ngcViewLabels"" onAction=""ngcViewChbClick"" label=""Show text labels"" getPressed=""ngcViewChbPressed"" enabled=""" & LCase(CBool(Sheets(ngcVAR).Cells(2, 26).Value)) & """ />" & vbCrLf & _
    "<menuSeparator id=""ngcViewMenuSep2"" />" & vbCrLf & _
    "<checkBox id=""ngcViewCENs"" onAction=""ngcViewChbClick"" label=""Show integration CENs"" getPressed=""ngcViewChbPressed"" screentip=""Ctrl+Shift+X"" />" & vbCrLf & _
    "<checkBox id=""ngcViewVars"" onAction=""ngcViewChbClick"" label=""Show variable part"" getPressed=""ngcViewChbPressed"" />" & vbCrLf & _
    "<checkBox id=""ngcViewOrd"" onAction=""ngcViewChbClick"" label=""Show order codes"" getPressed=""ngcViewChbPressed"" />" & vbCrLf & _
    "</menu>"
End Sub

'Callback for ngcOpers onAction
Sub ngcOpersClick(control As IRibbonControl)
  Dim sMsg As String, iAsk As Integer
  sMsg = ""
  Select Case control.iD
  Case "ngcOpersUndo"
    ngcMspRst curOnly:=True, shtName:=ActiveCell.Parent.Name
  Case "ngcOpersRstCD"
    ngcMspRst curOnly:=False, shtName:=ngcCSI
  Case "ngcOpersRstQS"
    ngcMspRst curOnly:=False, shtName:=ngcINP
  Case "ngcOpersLoadQS", "ngcOpersCompare"
    frmCfgImp.ShowManual bCompare:=(control.iD = "ngcOpersCompare")
  Case "ngcOpersDepos"
    ngcSaveDeps sErr:=sMsg
  Case "ngcMSpecNew"
    If GetKeyState(vbKeyMenu) < 0 Then
     iAsk = Val("0" & InputBox(Prompt:="Enter number of columns:", Title:="New MSpec", Default:=""))
    Else: iAsk = 1: End If
    While iAsk > 0: ngcMspNew bCopy:=False: iAsk = iAsk - 1: Wend
  Case "ngcMSpecCopy"
    ngcMspNew bCopy:=True
  Case Else
    MsgBox "'" & control.iD & "' not implemented in this version!", vbCritical
  End Select
  If sMsg <> "" Then ngcMessage.ManualShow sMsg:=Mid(sMsg, 2), sLabel:="An error(s) occur during operation:"
End Sub

'Callback for ngcDialog onAction
Sub ngcOperDialogClick(control As IRibbonControl)
  If Sheets(ngcVAR).Cells(2, 13).Value Then
    Dim sh As Worksheet, iAsk As Integer, sTmp As String
    If LCase(Right(ActiveWorkbook.FullName, 5)) = ".xltm" And _
       (Sheets(ngcVAR).Cells(2, 2).Value <> Left(ActiveWorkbook.Name, Len(ActiveWorkbook.Name) - 5) Or _
       Sheets(ngcVAR).Cells(2, 4).Value < Now() + 30) Then
      sTmp = Left(ActiveWorkbook.Name, Len(ActiveWorkbook.Name) - 5)
      iAsk = MsgBox("Do you want to set:" & vbCrLf & "Version=" & sTmp & vbCrLf & _
             "Valid to=" & vbCrLf & Format(Now() + 30, "dd.mm.yyyy"), vbYesNoCancel, ActiveWorkbook.Name)
      If iAsk = vbYes Then
        
      ElseIf iAsk = vbCancel Then
        Exit Sub
      End If
    End If
    '|fffd||fffd||fffd||fffd||fffd||fffd|
    ngcProtect bProtect:=True
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Application.ScreenUpdating = False
    For Each sh In Sheets
      If Left(sh.Name, 1) = "." Then sh.Outline.ShowLevels RowLevels:=1
    Next sh
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ngcModulesOff
    Application.ScreenUpdating = True
  Else: ngcDvlpPwd.Show: End If
  InvalidateControl sControl:="ngcGrpDvlp"
End Sub

'Callback for ngcDvlp onAction
Sub ngcDvlpClick(control As IRibbonControl)
  Dim iAsk As Long
  Select Case control.iD
  Case "ngcDvlpCompile"
    ngcCreate
  Case "ngcDvlpSynAll"
    ngcImportData bReadTexts:=1, bReadDatas:=True
  Case "ngcDvlpSynPrc"
    ngcImportData bReadTexts:=0, bReadDatas:=True
  Case "ngcDvlpSynTxt"
    ngcImportData bReadTexts:=1, bReadDatas:=False
  Case "ngcDvlpSynCur"
    ngcImportData bReadTexts:=-1, bReadDatas:=False
  Case "ngcDvlpSet"
    ngcDvlpMod.Show vbModeless
  Case "ngcDvlpDsn"
    frmDvlpDgn.Show
  Case "ngcDvlpClear"
    ngcClear bInt:=False
  Case "ngcDvlpNew"
    Dim sht As Worksheet, bVis As Long
    bVis = Sheets("TC").Visible
    Sheets("TC").Visible = xlSheetVisible
    Sheets("TC").Copy After:=Sheets(Sheets.Count)
    Sheets("TC").Visible = bVis
  Case "ngcDvlpImp"
    ngcDvlpImp.Show
  Case "ngcDvlpSetAuto"
    If Left(ActiveSheet.Name, 1) <> "." Then MsgBox "Can be used with CLs only!", vbExclamation: Exit Sub
    iAsk = MsgBox("Press Yes to replace user formatting for the most commands:" & vbCrLf & _
                  " - fonts and font size will be modified," & vbCrLf & _
                  " - merged cells will be unmerged (may affect formulas!)," & vbCrLf & _
                  " - [QS/QA/QB/QL] rows (!) will be reformatted," & vbCrLf & _
                  " - for other commands only used cells will be reformatted," & vbCrLf & _
                  " - command row formatting after $$ column will be erased," & vbCrLf & _
                  " - $$, |fffd||fffd|, &&, |fffd||fffd|, ^^, >> etc add.commands will be reformatted." & vbCrLf & _
                  "Press No for minimal optimizations:" & vbCrLf & _
                  " - fonts and font size will be modified," & vbCrLf & _
                  " - unused areas will be croped.", vbYesNoCancel + vbQuestion)
    If iAsk = vbCancel Then Exit Sub
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Dim rng As Range, adr As String, lstCol As Long, lstRow As Long, spcCol As Long, spcRow As Long
    Application.StatusBar = "Define last used cells..."
    Set rng = Cells.Find(What:="*", LookIn:=xlFormulas, LookAt:=xlWhole)
    If Not rng Is Nothing Then adr = rng.Address
    While Not rng Is Nothing
      If lstCol < rng.Column Then lstCol = rng.Column
      If lstRow < rng.Row Then lstRow = rng.Row
      Set rng = Cells.FindNext(rng)
      If Not rng Is Nothing Then If rng.Address = adr Then Set rng = Nothing
    Wend
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If iAsk = vbYes Then wrtDsn lstCol:=lstCol
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Application.StatusBar = "Delete unused segments..."
    Application.ScreenUpdating = False
    spcRow = Cells.SpecialCells(xlCellTypeLastCell).Row
    spcCol = Cells.SpecialCells(xlCellTypeLastCell).Column
    If lstRow + 1 < spcRow Then Rows(CStr(lstRow + 1) & ":" & CStr(spcRow)).Delete
    If lstCol + 1 < spcCol Then Columns(Application.ConvertFormula("c" & CStr(lstCol + 1) & ":c" & CStr(spcCol), xlR1C1, xlA1)).Delete
    '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Application.StatusBar = "Re-apply all cells formatting..."
    Cells.Font.Name = "Tahoma"
    Cells.Font.Size = 8
    Cells.WrapText = False
    Cells.ColumnWidth = 6
    Columns(2).ColumnWidth = 12
    Columns(3).ColumnWidth = 8
    Rows.AutoFit
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Application.Calculation = xlCalculationAutomatic
    Application.StatusBar = False
    Application.ScreenUpdating = True
  Case "ngcDvlpReplCDr"
    Dim sh As Worksheet, iRow As Long, sMsg As String
    iAsk = MsgBox("Analize possibility or replace unused ""[CD]r"" to ""[CD]"":" & vbCrLf & "Press Yes to automatic remove unused ""r"" commands." & vbCrLf & "Press No to prepare report (without any changes).", vbYesNoCancel + vbQuestion)
    If iAsk = vbCancel Then Exit Sub
    For Each sh In Sheets
      If Left(sh.Name, 1) = "." Then
        For iRow = 1 To sh.Cells.SpecialCells(xlCellTypeLastCell).Row
          If sh.Cells(iRow, CLCM).Value = "[CD]r" Then
            If Not fndIsDpd(sh.Cells(iRow, CLC6)) Then
              If iAsk = vbYes Then
                sh.Cells(iRow, CLCM).Value = "[CD]"
                If sh.Cells(iRow, CLC6).Interior.Color = 13408767 Then sh.Cells(iRow, CLC6).Interior.Pattern = xlNone
              End If
              sMsg = sMsg & "; - '" & sh.Name & "'!r" & CStr(iRow) & IIf(iAsk = vbYes, " was", " can be") & " converted to [CD]"
            Else: sh.Cells(iRow, CLC6).Interior.Color = 13408767: End If
          End If
        Next iRow
      End If
    Next sh
    If sMsg <> "" Then ngcMessage.ManualShow sMsg:=sMsg, sLabel:="Following commands were processed:", bInfo:=True, bModeless:=True
  Case "ngcDvlpReplIDs"
    ngcDvlpFnd.Show vbModeless
  Case Else
    MsgBox "'" & control.iD & "' not implemented in this version!", vbCritical
  End Select
End Sub

'Callback for ngcGrpDvlp getVisible
Sub ngcDvlpVisible(control As IRibbonControl, ByRef returnedVal)
  returnedVal = Sheets(ngcVAR).Cells(2, 13).Value
End Sub

'Callback for ngcDvlp onAction
Sub ngcDvlpDialogClick(control As IRibbonControl)
  ngcDvlpAbt.Show
End Sub

'Callback for ngcDvlp onAction
Sub ngcAboutClick(control As IRibbonControl)
  Dim sMsg As String
  sMsg = ""
  Select Case control.iD
  Case "ngcAboutVersion"
    MsgBox "Version: " & Sheets(ngcVAR).Cells(2, 2).Value & " (#" & Sheets(ngcVAR).Cells(2, 11).Value & ")" & vbCrLf & _
           "Author: " & Sheets(ngcVAR).Cells(2, 5).Value & " (" & Sheets(ngcVAR).Cells(2, 7).Value & ")" & vbCrLf & vbCrLf & _
           "Compiled by: " & Sheets(ngcVAR).Cells(2, 6).Value & vbCrLf & _
           "Issue date: " & Sheets(ngcVAR).Cells(2, 3).Value & vbCrLf & _
           "Valid to: " & Sheets(ngcVAR).Cells(2, 4).Value & vbCrLf & vbCrLf & _
           "Compilator: " & ngcVER & vbTab & "Release: " & ngcDAT & vbCrLf & _
           "Author: Terekhov Alexey", vbInformation
  Case "ngcAboutUpdate"
     ngcOnlineCheck sMsg:=sMsg
  Case "ngcAboutContact"
    Dim oWs As Object, sData As String
    Set oWs = CreateObject("WScript.Shell")
    sData = "Version: " & Sheets(ngcVAR).Cells(2, 2).Value & " (#" & Sheets(ngcVAR).Cells(2, 11).Value & ")" & "%0A" & _
            "Author: " & Sheets(ngcVAR).Cells(2, 5).Value & " (" & Sheets(ngcVAR).Cells(2, 7).Value & ")" & "%0A" & _
            "Compiled by: " & Sheets(ngcVAR).Cells(2, 6).Value & "%0A" & _
            "Issue date: " & Sheets(ngcVAR).Cells(2, 3).Value & "%0A" & _
            "Valid to: " & Sheets(ngcVAR).Cells(2, 4).Value & "%0A" & _
            "Compilator: " & ngcVER & "%0A" & _
            "Release: " & ngcDAT
    oWs.Run "mailto:" & Sheets(ngcVAR).Cells(2, 7).Value & IIf(LCase(Sheets(ngcVAR).Cells(2, 7).Value) <> "terekhov@iskratel.si", "&cc=terekhov@iskratel.si", "") & "&subject=Configurator%20" & Sheets(ngcVAR).Cells(2, 2).Value & _
            "&body=My%20problem%20description:%0A%20%0A%20%0A%20%0AConfigurator%20version:%0A" & Replace(Replace(sData, "&", ""), " ", "%20")
  Case Else
    MsgBox "'" & control.iD & "' not implemented in this version!", vbCritical
  End Select
  If sMsg <> "" Then ngcMessage.ManualShow sMsg:=Mid(sMsg, 2), sLabel:="An error(s) occur during operation:"
End Sub

'Callback for ngcAbout getEnabled
Sub ngcAboutEnabled(control As IRibbonControl, ByRef returnedVal)
  Select Case control.iD
  Case "ngcAboutUpdate"
    returnedVal = CBool(Sheets(ngcVAR).Cells(2, 32).Value)
  Case "ngcAboutContact"
    returnedVal = CBool(Sheets(ngcVAR).Cells(2, 35).Value)
  Case Else
    MsgBox "'" & control.iD & "' not implemented in this version!", vbCritical
  End Select
End Sub
Attribute VB_Name = "F0_CN"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'(c)2010 Terekhov Alexey. All rights reserved.
'Phone: +386(31)334953, Skype:terekhov_alexey
Option Explicit

Private Sub Worksheet_Change(ByVal Target As Range)
  If Target.Address = "$D$2" Then
    If Target.Value > CDate(ngcVLD) Then
      Application.EnableEvents = False
      Target.Value = CDate(ngcVLD)
      Application.EnableEvents = True
      MsgBox "You can't use intrument at that time!" & vbCrLf & "The date will be corrected.", vbInformation
    End If
  ElseIf Target.Address = "$AC$2" Or Target.Address = "$W$2" Then
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If Not ngcCRP Then
      Application.EnableEvents = False
      Target.Value = False
      Application.EnableEvents = True
      MsgBox "Sorry you have no permission to change this parameter!", vbInformation
    End If
  End If
End Sub
Attribute VB_Name = "F2_DS"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "F2_TC"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "F2_TC01"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "F2_TC03"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "F2_TC04"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "F2_TC05"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "F2_TC06"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "F2_TC07"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "F2_TC09"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "F2_TC10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "F2_TC12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "F2_TC14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "F2_TC15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "F2_TC16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "F2_TC17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "F2_TC18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "F2_TC20"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "F2_TC31"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "F2_TC32"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'(c)2010 Terekhov Alexey. All rights reserved.
'Phone: +386(31)334953, Skype:terekhov_alexey
Option Explicit

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Private Sub Workbook_Open()
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.ReferenceStyle = xlA1
  '|fffd||fffd||fffd||fffd||fffd||fffd| OffitLoc
  Dim sLoc As String
  sLoc = GetSetting(AppName:="NG3cfg", Section:="Date", Key:="OffitLoc", Default:="C:\OffitLoc")
  If sLoc <> "" Then Sheets(ngcVAR).Cells(2, 8).Value = sLoc
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  ThisWorkbook.Saved = True
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  #If ngcCRP Then
    If Left(Trim(ActiveWorkbook.Name), 7) Like "ADD####" And Left(Trim(Sheets(ngcVAR).Cells(2, 2).Value), 7) Like "ADD####" Then MsgBox "Not allowed as Iskratel configurator!" & vbCrLf & "Contact Terekhov Alexey for more information...", vbCritical: ActiveWorkbook.Close
  #End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Private Sub Workbook_SheetActivate(ByVal sh As Object)
  If Sheets(ngcVAR).Cells(2, 12).Value Then Exit Sub
  If Not bAFoff Then
    If sh.Name = ngcINP Then
      Application.ScreenUpdating = False
      sh.Range(Sheets(ngcVAR).Cells(30, 3).Value).AutoFilter Field:=1, Criteria1:="<>0", VisibleDropDown:=False
    ElseIf sh.Name = ngcCSI Then
      Application.ScreenUpdating = False
      sh.Range(Sheets(ngcVAR).Cells(30, 4).Value).AutoFilter Field:=1, Criteria1:="<>0", VisibleDropDown:=False
    ElseIf sh.Name = ngcPRC Then
      Application.ScreenUpdating = False
      sh.Range(Sheets(ngcVAR).Cells(30, 5).Value).AutoFilter Field:=1, Criteria1:="<>0", VisibleDropDown:=False
    End If
  End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Private Sub Workbook_SheetDeactivate(ByVal sh As Object)
  If sh.Name = ngcCSI Or sh.Name = ngcINP Then DeleteCntxMenu
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Private Sub Workbook_SheetCalculate(ByVal sh As Object)
  Static chb As CheckBox
  If sh.Name = ngcINP And bAFclc And Application.CalculationState = 0 Then 'xlDone
    For Each chb In sh.CheckBoxes
      If chb.ShapeRange.AlternativeText = ngcCFG Then
        chb.ShapeRange.Visible = sh.Cells(sh.Range(chb.LinkedCell).Row, INFL).Value
        If chb.Visible <> chb.ShapeRange.Visible Then chb.Visible = chb.ShapeRange.Visible
      End If
    Next chb
    bAFclc = False
  End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub Workbook_SheetChange(ByVal sh As Object, ByVal Target As Range)
  If (bAFoff And Application.Calculation <> xlCalculationAutomatic) Or Application.Calculation <> xlCalculationAutomatic Or IsError(ActiveCell.Value) Then Exit Sub
  If Application.CalculationState <> xlDone Then bAFclc = True: Exit Sub
  If sh.Name = ngcINP Then
    If Target.Row > 1 And (Target.Row <= 6 Or Cells(Target.Row, INCM).Value = "QS" Or Cells(Target.Row, INCM).Value = "QI" Or Cells(Target.Row, INCM).Value = "QG") And (Target.Column = INQD Or Target.Column = INQV Or Target.Column > INTM) Then
      If Target.Address() = "$B$3" Then
        Dim sDir As String
        sDir = Sheets(ngcVAR).Cells(2, 14).Value: If sDir = "" Then sDir = ActiveWorkbook.Path
        If sDir <> "" And Right(sDir, 1) <> "\" Then sDir = sDir & "\"
        If LCase(Right(ThisWorkbook.Name, 5)) <> ".xltm" Then Application.Dialogs(xlDialogSaveAs).Show Arg1:=sDir & escID(Target.Value, 2, Nothing, "") & ".xlsm", Arg2:=52
      Else: ngcAFqs Target:=Target: End If
    End If
  ElseIf sh.Name = ngcCSI Then
    If Sheets(ngcINP).Cells(1, INTM + 1).Value <> "" Then ngcAFcd Target:=Target
    If Cells(Target.Row, SPCM).Value = "QL" And (Target.Column = SPQD Or Target.Column = SPQV Or Target.Column > SPTM) Then
      ngcAFcreate
    ElseIf (Not Sheets(ngcVAR).Cells(2, 24).Value) And (Cells(Target.Row, SPCM).Value = "F" Or Cells(Target.Row, SPCM).Value = "V" Or Cells(Target.Row, SPCM).Value = "TD" Or Cells(Target.Row, SPCM).Value = "TL") Then
      Dim wnd As Worksheet, snd As Worksheet, scr As Boolean
      scr = Application.ScreenUpdating
      Set wnd = ActiveSheet: If Windows.Count > 1 Then Set snd = Windows(2).ActiveSheet
      If Not Sheets(ngcVAR).Cells(2, 13).Value Then Application.ScreenUpdating = False: Sheets(ngcVAR).Unprotect Password:=ngcPWD
      Sheets(ngcVAR).Cells(2, 24).Value = True
      If Not Sheets(ngcVAR).Cells(2, 13).Value Then Sheets(ngcVAR).Protect Password:=ngcPWD
      If Windows.Count > 1 Then Application.ScreenUpdating = False: Windows(2).Activate: snd.Activate: Windows(2).Activate
      wnd.Activate: If Application.ScreenUpdating <> scr Then Application.ScreenUpdating = scr
    End If
  ElseIf Left(sh.Name, 2) = "Q." Then
    ngcAFcreate
  End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Sub Workbook_SheetBeforeRightClick(ByVal sh As Object, ByVal Target As Range, Cancel As Boolean)
  On Error GoTo ngcRightClickError
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If sh.Name = ngcCSI Or sh.Name = ngcINP Then
    DeleteCntxMenu
    If (sh.Name = ngcINP And Target.Column = INQV And sh.Cells(Target.Row, INCM).Value = "QS") Or _
       (sh.Name = ngcCSI And Target.Column = SPQV And sh.Cells(Target.Row, SPCM).Value = "QL") Or _
       (sh.Name = ngcCSI And Target.Column = SPCV And (sh.Cells(Target.Row, SPCM).Value = "F" Or sh.Cells(Target.Row, SPCM).Value = "V")) Then
      With Application.CommandBars("cell").Controls.Add(Type:=1, Before:=1, Temporary:=True)
        .Tag = "ng4delme"
        .Caption = "Restore formula"
        .OnAction = "ngcRestoreOne"
        .FaceId = 128
        .BeginGroup = True
      End With
    End If
  End If
ngcRightClickError:
  'do nothing
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
Private Sub DeleteCntxMenu()
  Dim oCntxMenu As Object
  For Each oCntxMenu In Application.CommandBars("cell").Controls
    If oCntxMenu.Tag = "ng4delme" Then oCntxMenu.Delete
  Next oCntxMenu
End Sub
Attribute VB_Name = "frmCfgErl"
Attribute VB_Base = "0{853EA58C-E628-4218-AD56-EE4ABFD7FC80}{70E3E911-7089-4659-BB2A-C4C6BFC8E630}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'(c)2008 Terekhov Alexey. All rights reserved.
'Phone: +38631334953, Skype:terekhov_alexey
Option Explicit

Private bEventOff As Boolean
Private vKbps As Variant, vSmpl As Variant, vMlsc As Variant, vBhdr As Variant

Private Sub UserForm_Initialize()
  bEventOff = True
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  optLines.Value = True
  txtBlock.Value = "0.05"
  optBand.Value = True
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| BHCA
  txtMHT.Value = "72"
  optERL.Value = True
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  cmbCodec.Clear
  cmbCodec.AddItem "G.711 (PCM) 64kbps uncompressed"
  cmbCodec.AddItem "G.723.1 (ACELP) 5.3kbps compression"
  cmbCodec.AddItem "G.723.1 (MP-MLQ) 6.4kbps compression"
  cmbCodec.AddItem "G.726 (ADPCM) 32kbps compression"
  cmbCodec.AddItem "G.728 (LD-CELP) 16kbps compression"
  cmbCodec.AddItem "G.729A (CS-CELP) 8kbps compression"
  cmbCodec.ListIndex = 0
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  vKbps = Array(64, 5.3, 6.4, 32, 16, 8)
  vSmpl = Array(80, 1, 1, 80, 16, 1)
  vMlsc = Array(10, 30, 30, 10, 10, 10)
  vBhdr = Array(2560, 10.7, 10.7, 2560, 512, 32)
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  bEventOff = False
  txtBHT.Text = escNum(ActiveCell.Value, False)
End Sub

Private Sub pageCnt_Change()
  Select Case pageCnt.SelectedItem.Index
  Case 0
    frmCfgErl.Height = 120
    pageCnt.Height = 84
    txtBHCA.Text = escNum(ActiveCell.Value, False)
  Case 1
    pageCnt.Height = 134
    frmCfgErl.Height = 170
    cmbCodec_Change
  Case 2
    frmCfgErl.Height = 120
    pageCnt.Height = 84
    txtBHCA.Text = escNum(ActiveCell.Value, False)
  End Select
End Sub

Private Function escNum(str As String, bInteger As Boolean) As String
  Dim iCur As Long, iPnt As Long
  escNum = str: iCur = 1: iPnt = InStr(escNum, ".")
  While iCur <= Len(escNum)
    If Mid(escNum, iCur, 1) Like IIf(iCur > iPnt Or bInteger, "[!0-9]", "[!.0-9]") Then
      escNum = Left(escNum, iCur - 1) & Mid(escNum, iCur + 1)
    Else: iCur = iCur + 1: End If
  Wend
  While escNum Like "0#*": escNum = Mid(escNum, 2): Wend
End Function

'########################################
'##############    ErlB    ##############
'########################################

Private Sub optBHT_Click()
  optBlock.Value = False
  optLines.Value = False
  txtBHT.Text = ""
  txtBHT.Enabled = False
  txtBlock.Enabled = True
  txtLines.Enabled = True
End Sub

Private Sub optBlock_Click()
  optBHT.Value = False
  optLines.Value = False
  txtBlock.Text = ""
  txtBlock.Enabled = False
  txtBHT.Enabled = True
  txtLines.Enabled = True
End Sub

Private Sub optLines_Click()
  optBHT.Value = False
  optBlock.Value = False
  txtLines.Text = ""
  txtLines.Enabled = False
  txtBHT.Enabled = True
  txtBlock.Enabled = True
End Sub

Private Sub txtBHT_Change()
  If bEventOff Then Exit Sub
  bEventOff = True
  Dim sChk As String
  sChk = Replace(txtBHT.Value, ",", "."): If sChk = "." Then sChk = "0" & sChk
  sChk = escNum(sChk, False)
  If Len(sChk) > 4 Then If MsgBox("Calculations will take some time. Are you sure?", vbQuestion + vbYesNo) <> vbYes Then sChk = Left(sChk, 4)
  If txtBHT.Value <> sChk Then txtBHT.Value = sChk
  CalcErl
  bEventOff = False
End Sub

Private Sub txtBlock_Change()
  If bEventOff Then Exit Sub
  bEventOff = True
  Dim sChk As String
  sChk = Replace(txtBlock.Value, ",", "."): If sChk = "." Then sChk = "0" & sChk
  sChk = escNum(sChk, False)
  If Val(sChk) >= 1 Then sChk = "0"
  If txtBlock.Value <> sChk Then txtBlock.Value = sChk
  CalcErl
  bEventOff = False
End Sub

Private Sub txtLines_Change()
  If bEventOff Then Exit Sub
  bEventOff = True
  Dim sChk As String
  sChk = txtLines.Value: sChk = escNum(sChk, True)
  If Len(sChk) > 4 Then If MsgBox("Calculations will take some time. Are you sure?", vbQuestion + vbYesNo) <> vbYes Then sChk = Left(sChk, 4)
  If txtLines.Value <> sChk Then txtLines.Value = sChk
  CalcErl
  bEventOff = False
End Sub

Private Sub CalcErl()
  bEventOff = True
  If optBHT.Value Then
    If Val(txtBlock.Value) > 0 And txtLines.Value <> "" Then
      txtBHT.Text = Round(LosLin2Trf(Val(txtBlock.Value), Val(txtLines.Value)), 2)
    Else: txtBHT.Text = "": End If
  ElseIf optBlock.Value Then
    If txtBHT.Value <> "" And txtLines.Value <> "" Then
      txtBlock.Text = Round(TrfLin2Los(Val(txtBHT.Value), Val(txtLines.Value)), 5)
    Else: txtBlock.Text = "": End If
  ElseIf optLines.Value Then
    If txtBHT.Value <> "" And Val(txtBlock.Value) > 0 Then
      txtLines.Text = TrfLos2Lin(Val(txtBHT.Value), Val(txtBlock.Value))
    Else: txtLines.Text = "": End If
  End If
  bEventOff = False
End Sub

'########################################
'##############    VoIP    ##############
'########################################

Private Sub optBand_Click()
  optPaths.Value = False
  txtBand.Text = ""
  txtBand.Enabled = False
  txtPaths.Enabled = True
End Sub

Private Sub optPaths_Click()
  optBand.Value = False
  txtPaths.Text = ""
  txtPaths.Enabled = False
  txtBand.Enabled = True
End Sub

Private Sub cmbCodec_Change()
  If bEventOff Then Exit Sub
  bEventOff = True
  Dim iCur As Long, iMls As Long, iInd As Long
  iInd = cmbPacket.ListIndex: iCur = 1
  cmbPacket.Clear
  For iMls = vMlsc(cmbCodec.ListIndex) To 99 Step vMlsc(cmbCodec.ListIndex)
    cmbPacket.AddItem CStr(iMls) & " milliseconds (" & iCur * vSmpl(cmbCodec.ListIndex) & " samples)"
    iCur = iCur + 1
  Next iMls
  cmbPacket.ListIndex = IIf(iInd < 0, 1, IIf(iInd > cmbPacket.ListCount - 1, cmbPacket.ListCount - 1, iInd))
  bEventOff = False
  CalcBand
End Sub

Private Sub cmbPacket_Change()
  If bEventOff Then Exit Sub
  CalcBand
End Sub

Private Sub txtBand_Change()
  If bEventOff Then Exit Sub
  bEventOff = True
  Dim sChk As String
  sChk = Replace(txtBand.Value, ",", "."): If sChk = "." Then sChk = "0" & sChk
  sChk = escNum(sChk, False)
  If txtBand.Value <> sChk Then txtBand.Value = sChk
  CalcBand
  bEventOff = False
End Sub

Private Sub txtPaths_Change()
  If bEventOff Then Exit Sub
  bEventOff = True
  Dim sChk As String
  sChk = Replace(txtPaths.Value, ",", "."): sChk = escNum(sChk, True)
  If txtPaths.Value <> sChk Then txtPaths.Value = sChk
  CalcBand
  bEventOff = False
End Sub

Private Sub CalcBand()
  bEventOff = True
  Dim dCh As Double
  dCh = vKbps(cmbCodec.ListIndex) + vBhdr(cmbCodec.ListIndex) / (cmbPacket.ListIndex + 1) / vSmpl(cmbCodec.ListIndex)
  If optBand.Value Then
    If txtPaths.Value <> "" Then
      txtBand.Text = Int(Val(txtPaths.Text) * dCh + 0.99999)
    Else: txtBand.Text = "": End If
  ElseIf optPaths.Value Then
    If txtBand.Value <> "" Then
      txtPaths.Text = Int(Val(txtBand.Text) / dCh)
    Else: txtPaths.Text = "": End If
  End If
  bEventOff = False
End Sub

'########################################
'##############    BHCA    ##############
'########################################

Private Sub optERL_Click()
  optBHCA.Value = False
  optMHT.Value = False
  txtERL.Text = ""
  txtERL.Enabled = False
  txtBHCA.Enabled = True
  txtMHT.Enabled = True
End Sub

Private Sub optBHCA_Click()
  optMHT.Value = False
  optERL.Value = False
  txtBHCA.Text = ""
  txtBHCA.Enabled = False
  txtMHT.Enabled = True
  txtERL.Enabled = True
End Sub

Private Sub optMHT_Click()
  optBHCA.Value = False
  optERL.Value = False
  txtMHT.Text = ""
  txtMHT.Enabled = False
  txtBHCA.Enabled = True
  txtERL.Enabled = True
End Sub

Private Sub txtERL_Change()
  If bEventOff Then Exit Sub
  bEventOff = True
  Dim sChk As String
  sChk = Replace(txtERL.Value, ",", "."): If sChk = "." Then sChk = "0" & sChk
  sChk = escNum(sChk, False)
  If txtERL.Value <> sChk Then txtERL.Value = sChk
  CalcBHCA
  bEventOff = False
End Sub

Private Sub txtBHCA_Change()
  If bEventOff Then Exit Sub
  bEventOff = True
  Dim sChk As String
  sChk = txtBHCA.Value: sChk = escNum(sChk, True)
  If txtBHCA.Value <> sChk Then txtBHCA.Value = sChk
  CalcBHCA
  bEventOff = False
End Sub

Private Sub txtMHT_Change()
  If bEventOff Then Exit Sub
  bEventOff = True
  Dim sChk As String
  sChk = txtBHCA.Value: sChk = escNum(sChk, True)
  If txtBHCA.Value <> sChk Then txtBHCA.Value = sChk
  CalcBHCA
  bEventOff = False
End Sub

Private Sub CalcBHCA()
  bEventOff = True
  If optBHCA.Value Then
    'BHCA=3600*ERL/MHT
    If Val("0" & txtERL.Value) > 0 And Val("0" & txtMHT.Value) > 0 Then
      txtBHCA.Text = Round(3600# * Val(txtERL.Value) / Val(txtMHT.Value), 0)
    Else: txtBHCA.Text = "": End If
  ElseIf optERL.Value Then
    'ERL=BHCA*MHT/3600
    If Val("0" & txtBHCA.Value) > 0 And Val("0" & txtMHT.Value) > 0 Then
      txtERL.Text = Round(Val(txtBHCA.Value) * Val(txtMHT.Value) / 3600#, 5)
    Else: txtERL.Text = "": End If
  ElseIf optMHT.Value Then
    'MHT=3600*ERL/BHCA
    If Val("0" & txtERL.Value) > 0 And Val("0" & txtBHCA.Value) > 0 Then
      txtMHT.Text = Round(3600# * Val(txtERL.Value) / Val(txtBHCA.Value), 0)
    Else: txtMHT.Text = "": End If
  End If
  bEventOff = False
End Sub

Attribute VB_Name = "frmCfgExp"
Attribute VB_Base = "0{F38B5302-63B9-4D72-A8EF-42CD40DE184A}{40B26529-2C0F-41AE-8911-CE71529B100D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'(c)2008 Terekhov Alexey. All rights reserved.
'Phone: +38631334953, Skype:terekhov_alexey
Option Explicit

Private lstWQ(1) As Object, curWQ As Long, rowWQ As Long
Public dPrice As Double

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub UserForm_Initialize()
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Set lstWQ(0) = lstWQ0
  Set lstWQ(1) = lstWQ1
  curWQ = 0
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  WriteAndRefresh
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  lstWQ(curWQ).SetFocus
  rowWQ = 0
End Sub

Private Sub WriteAndRefresh()
  Dim oldWQ As Long, iCur As Long
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  oldWQ = curWQ:
  If lstWQ(oldWQ).ListCount > 0 Then
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For iCur = 0 To lstWQ(oldWQ).ListCount - 1
      rowWQ = Val(lstWQ(oldWQ).List(iCur, 1))
      If Sheets(ngcVAR).Cells(rowWQ, VWTM).Value <> -1 * lstWQ(oldWQ).Selected(iCur) Then
        Sheets(ngcVAR).Cells(rowWQ, VWTM).Value = -1 * lstWQ(oldWQ).Selected(iCur)
      End If
    Next iCur
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If lstWQ(oldWQ).ListIndex >= 0 Then rowWQ = Val(lstWQ(oldWQ).List(lstWQ(oldWQ).ListIndex, 1)) Else rowWQ = 0
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    lstWQ(oldWQ).Clear
    lstWQ(oldWQ).Visible = False
    curWQ = -1 * (oldWQ = 0)
  End If
    
  '|fffd||fffd||fffd||fffd||fffd||fffd|
  iCur = fndRngFst(Sheets(ngcVAR).Cells(30, 7).Value)
  While Application.CalculationState <> xlDone: DoEvents: Wend
  lstWQ(curWQ).Visible = True
  While Sheets(ngcVAR).Cells(iCur, VWID).Value <> ""
    If Sheets(ngcVAR).Cells(iCur, VWCM).Value = "[WQ]" Then
      lstWQ(curWQ).AddItem Sheets(ngcVAR).Cells(iCur, VWT1).Value
      lstWQ(curWQ).List(lstWQ(curWQ).ListCount - 1, 1) = CStr(iCur)
      lstWQ(curWQ).Selected(lstWQ(curWQ).ListCount - 1) = CBool(Sheets(ngcVAR).Cells(iCur, VWTM).Value)
      If iCur <= rowWQ Then lstWQ(curWQ).ListIndex = lstWQ(curWQ).ListCount - 1
    End If
    iCur = iCur + 1
  Wend
  ChangeDesc
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub btnCancel_Click()
  Unload Me
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub ChangeDesc()
  If lstWQ(curWQ).ListIndex >= 0 Then txtInfo.Text = Sheets(ngcVAR).Cells(lstWQ(curWQ).List(lstWQ(curWQ).ListIndex, 1), VWT2).Value
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub lstWQ0_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
  WriteAndRefresh
End Sub
Private Sub lstWQ0_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
  WriteAndRefresh
End Sub
Private Sub lstWQ1_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
  WriteAndRefresh
End Sub
Private Sub lstWQ1_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
  WriteAndRefresh
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub btnContinue_Click()
  On Error GoTo ErrorHandle
  If Not fndIsSheet(ngcVAR) Then Exit Sub
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Excel
  Dim shV As Worksheet, shI As Worksheet, shS As Worksheet, oFind As Object, oTbl As Object
  Dim iRow As Long, iCol As Long, iMsp As Long
  Dim sCell As String, sDir As String, sTmp As String, bTmp As Boolean
  Dim sErrE As String, sErrC As String
  Set shV = Sheets(ngcVAR)
  Set shI = Sheets(ngcINP)
  Set shS = Sheets(ngcCSI)
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Word
  Dim wrd As Object, wtm As Object, wdc As Object
  Set wrd = CreateObject("Word.Application")
  sDir = shV.Cells(2, 8).Value: sDir = sDir & IIf(Right(sDir, 1) <> "\", "\", "")
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim sTpl As String, sVal As String, sTxt As String
  Hide
  sErrE = "": sErrC = ""
  iMsp = 2: dPrice = 0
  Application.Calculation = xlCalculationAutomatic
  If shI.Cells(1, INTM + 1).Value <> "" Then shI.Cells(1, INTM).Value = iMsp
  While Application.CalculationState <> xlDone: DoEvents: Wend
  '|fffd||fffd||fffd||fffd| |fffd||fffd| MSpec
  While iMsp > 0
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    iRow = fndRngFst(shV.Cells(30, 7).Value) + 1
    dPrice = dPrice + CDbl(ngcInfo("Price", False))
    While (shV.Cells(iRow, VWCM).Value <> "") And (sErrC = "")
      Select Case shV.Cells(iRow, VWCM).Value
      Case "[WO]"
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If shV.Cells(iRow, VWTM).Value <> "" Then
          sTmp = IIf(InStr(shV.Cells(iRow, VWTM).Value, ":") > 0, "", sDir) & shV.Cells(iRow, VWTM).Value
          If Dir(sTmp) = "" And ngcCRP Then getWebFile fromURL:=webURL & shV.Cells(iRow, VWTM).Value, toFile:=sTmp
          If Dir(sTmp) <> "" Then
            Set wdc = wrd.Documents.Add(IIf(InStr(shV.Cells(iRow, VWTM).Value, ":") > 0, "", sDir) & shV.Cells(iRow, VWTM).Value)
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
            For iCol = 1 To wrd.Documents.Count
              If wrd.Documents(iCol).VBProject.Name = shV.Cells(iRow, VWID).Value Then sErrC = " - document with same Title is already exist (row " & CStr(iRow) & ")"
            Next iCol
            If Len(sErrC) = 0 Then wdc.VBProject.Name = shV.Cells(iRow, VWID).Value
          Else: sErrC = " - can't open " & shV.Cells(iRow, VWTM).Value & " file.": End If
        End If
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If shV.Cells(iRow, VWPT).Value <> "" Then
          If Not wtm Is Nothing Then wtm.Close SaveChanges:=0: Set wtm = Nothing
          sTmp = IIf(InStr(shV.Cells(iRow, VWPT).Value, ":") > 0, "", sDir) & shV.Cells(iRow, VWPT).Value
          If Dir(sTmp) = "" And ngcCRP Then getWebFile fromURL:=webURL & shV.Cells(iRow, VWPT).Value, toFile:=sTmp
          If Dir(sTmp) <> "" Then
            Set wtm = wrd.Documents.Open(fileName:=IIf(InStr(shV.Cells(iRow, VWPT).Value, ":") > 0, "", sDir) & shV.Cells(iRow, VWPT).Value, ReadOnly:=True)
          Else: sErrC = " - can't open " & shV.Cells(iRow, VWPT).Value & " file.": End If
        End If
      Case "[WA]"
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        For iCol = 1 To wrd.Documents.Count
          If wrd.Documents(iCol).VBProject.Name = shV.Cells(iRow, VWID).Value Then Exit For
        Next iCol
        If iCol > wrd.Documents.Count Then
          sErrC = " - can't find " & shV.Cells(iRow, VWID).Value & " file (row " & CStr(iRow) & ")."
        Else: Set wdc = wrd.Documents(iCol): End If
      Case "[WS]"
        If (Not wtm Is Nothing) And (Not wdc Is Nothing) Then
          sTpl = shV.Cells(iRow, VWTM).Value
          sVal = shV.Cells(iRow, VWPT).Value
          sTxt = ngcWrdText(sTpl)
          If wtm.Bookmarks.Exists(sTpl) Or (sTxt <> "") Then
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If Not ngcWrdMove(wdc, sVal) Then sErrE = sErrE & "; - bookmark " & sVal & " does not exist (row " & CStr(iRow) & ")"
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If wdc.Bookmarks.Exists(sTpl) Then wdc.Bookmarks(sTpl).Delete
            If sTxt = "" Then
              wtm.Bookmarks(sTpl).Range.Copy
              wdc.ActiveWindow.Selection.Paste
              If LCase(shV.Cells(iRow, VWID).Value) <> LCase(shV.Cells(iRow, VWTM).Value) Then
                wdc.Bookmarks.Add Name:=shV.Cells(iRow, VWID).Value, Range:=wdc.Bookmarks(sTpl).Range
                wdc.Bookmarks(sTpl).Delete
              End If
            Else
              wdc.ActiveWindow.Selection.InsertAfter sTxt
              '|fffd||fffd||fffd||fffd||fffd||fffd| bookmark
              If wdc.Bookmarks.Exists(shV.Cells(iRow, VWID).Value) Then wdc.Bookmarks(shV.Cells(iRow, VWID).Value).Delete
              wdc.Bookmarks.Add Name:=shV.Cells(iRow, VWID).Value, Range:=wdc.ActiveWindow.Selection.Range
            End If
            '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            iCol = VWST
            While shV.Cells(iRow, iCol).Value <> ""
              sTpl = Mid(shV.Cells(iRow, iCol).Value, 3)
              sVal = shV.Cells(iRow, iCol + 1).Value
              sErrE = sErrE & ngcWrdWrite(wdc, shV.Cells(iRow, VWID).Value, sTpl, sVal, iRow, wtm)
              iCol = iCol + 2
            Wend
          Else: sErrE = sErrE & "; - bookmark " & sTpl & " does not exist (row " & CStr(iRow) & ")": End If
        Else: sErrC = " - template document or output document is not defined (row " & CStr(iRow) & ")!": End If
      Case "[WD]"
        sTpl = shV.Cells(iRow, VWTM).Value
        sVal = shV.Cells(iRow, VWPT).Value
        sErrE = sErrE & ngcWrdWrite(wdc, shV.Cells(iRow, VWID).Value, sTpl, sVal, iRow, wtm)
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        iCol = VWST
        While shV.Cells(iRow, iCol).Value <> ""
          sTpl = Mid(shV.Cells(iRow, iCol).Value, 3)
          sVal = shV.Cells(iRow, iCol + 1).Value
          sErrE = sErrE & ngcWrdWrite(wdc, shV.Cells(iRow, VWID).Value, sTpl, sVal, iRow, wtm)
          iCol = iCol + 2
        Wend
      Case "[WT]"
        sVal = shV.Cells(iRow, VWTM).Value
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Not ngcWrdMove(wdc, sVal) Then sErrE = sErrE & "; - bookmark " & sVal & " does not exist (row " & CStr(iRow) & ")"
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        Select Case shV.Cells(iRow, VWPT).Value
        Case "^p"
          wdc.ActiveWindow.Selection.InsertBreak Type:=7
          wdc.ActiveWindow.Selection.MoveLeft Unit:=1, Count:=1, Extend:=1
          '|fffd||fffd||fffd||fffd||fffd||fffd| bookmark
          If wdc.Bookmarks.Exists(shV.Cells(iRow, VWID).Value) Then wdc.Bookmarks(shV.Cells(iRow, VWID).Value).Delete
          wdc.Bookmarks.Add Name:=shV.Cells(iRow, VWID).Value, Range:=wdc.ActiveWindow.Selection.Range
        Case "##TSP", "##TSW"
          '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          ngcWrdSpec shV:=shV, shS:=shS, wrdDoc:=wdc, bPrc:=(shV.Cells(iRow, VWPT).Value = "##TSP")
        Case Else
          wdc.ActiveWindow.Selection.InsertAfter shV.Cells(iRow, VWPT).Value
          '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
          If wdc.Bookmarks.Exists(shV.Cells(iRow, VWID).Value) Then wdc.Bookmarks(shV.Cells(iRow, VWID).Value).Delete
          wdc.Bookmarks.Add Name:=shV.Cells(iRow, VWID).Value, Range:=wdc.ActiveWindow.Selection.Range
        End Select
      Case "[RM]", "[WQ]"
        'do nothing
      Case Else
        sErrE = sErrE & vbLf & " - unknown command in " & CStr(iRow) & " row"
      End Select
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      iRow = iRow + 1
    Wend
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| MSpec
    If shI.Cells(1, INTM + iMsp).Value <> "" Then
      iMsp = iMsp + 1
      shI.Cells(1, INTM).Value = iMsp
      While Application.CalculationState <> xlDone: DoEvents: Wend
    Else: iMsp = 0: End If
  Wend
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  On Error Resume Next
  For Each wdc In wrd.Documents
    wdc.Fields.Update
    wdc.ActiveWindow.Selection.HomeKey Unit:=6
  Next wdc
  If Not wtm Is Nothing Then wtm.Close SaveChanges:=0: Set wtm = Nothing 'wdDoNotSaveChanges
ErrorHandle:
  If Err.Number <> 0 Then
    sErrE = Trim(" - " & Err.Description & ";   (ErrID:" & Err.Number & ")") & IIf(iRow > 0, ";   an error in " & CStr(iRow) & " row", "") & IIf(sErrE <> "", ";" & Mid(sErrE, 2), "")
    ngcMessage.ManualShow sMsg:=sErrE, sLabel:="An error(s) occur during operation:"
  ElseIf Len(sErrC) > 0 Then
    ngcMessage.ManualShow sMsg:=sErrC, sLabel:="Error occur during operation:"
  ElseIf Len(sErrE) > 0 Then
    ngcMessage.ManualShow sMsg:=sErrE, sLabel:="Document was created with errors:"
  End If
  If Not wrd Is Nothing Then wrd.Visible = True
  Unload Me
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function ngcWrdText(sInfoType As String, Optional RefreshCell As String = "") As String
  ngcWrdText = ""
  On Error Resume Next
  Dim rng As Range
  Select Case LCase(sInfoType)
  Case "##ports"
    For Each rng In Sheets(ngcCSI).Range(Sheets(ngcVAR).Cells(30, 4).Value).Cells
      If rng.Offset(0, SPTV - rng.Column).Value <> 0 And (rng.Offset(0, SPCM - rng.Column).Value = "TD" Or rng.Offset(0, SPCM - rng.Column).Value = "TL") Then
        ngcWrdText = ngcWrdText & IIf(ngcWrdText <> "", vbLf, "") & CStr(rng.Offset(0, SPTV - rng.Column).Value) & " " & CStr(rng.Offset(0, SPTT - rng.Column).Value)
      End If
    Next rng
    If ngcWrdText = "" Then ngcWrdText = ngcL("[E1]Without ports[R1]|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|[L1]Brez portov")
  Case "##infos"
    For Each rng In Sheets(ngcINP).Range(Sheets(ngcVAR).Cells(30, 3).Value).Cells
      If (rng.Offset(0, INIV - rng.Column).Value = "Info") And (rng.Offset(0, INCM - rng.Column).Value = "PR") And (rng.Offset(0, INFL - rng.Column).Value <> 0) Then
        ngcWrdText = ngcWrdText & IIf(ngcWrdText <> "", vbLf, "") & CStr(rng.Offset(0, INIT - rng.Column).Value)
      End If
    Next rng
    If ngcWrdText = "" Then ngcWrdText = ngcL("[E1]Without remarks[R1]|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|[L1]Brez komentarjev")
  Case "##total"
    ngcWrdText = Format(frmCfgExp.dPrice, "#,##0.00")
  End Select
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function ngcWrdMove(docName As Object, bmName As String) As Boolean
  docName.ActiveWindow.Selection.EndKey Unit:=6
  Select Case bmName
  Case "End", "", "0"
    '|fffd||fffd| |fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
  Case "-End"
    docName.ActiveWindow.Selection.HomeKey Unit:=6
  Case Else
    If Left(bmName, 1) = "-" Then
      bmName = Mid(bmName, 2)
      If Not docName.Bookmarks.Exists(bmName) Then ngcWrdMove = False: Exit Function
      docName.ActiveWindow.Selection.GoTo What:=-1, Name:=bmName
      If docName.Range(Start:=docName.ActiveWindow.Selection.Start - 1, End:=docName.ActiveWindow.Selection.Start).Text <> ChrW(8204) Then
        docName.Bookmarks(bmName).Range.InsertBefore ChrW(8204)
        docName.Bookmarks(bmName).Delete
        docName.ActiveWindow.Selection.Start = docName.ActiveWindow.Selection.Start + 1
        docName.Bookmarks.Add Range:=docName.ActiveWindow.Selection.Range, Name:=bmName
      End If
      docName.ActiveWindow.Selection.Collapse Direction:=1 'wdCollapseStart
      docName.ActiveWindow.Selection.MoveLeft Unit:=1, Count:=1, Extend:=0
    Else
      If Not docName.Bookmarks.Exists(bmName) Then ngcWrdMove = False: Exit Function
      docName.ActiveWindow.Selection.GoTo What:=-1, Name:=bmName
      docName.ActiveWindow.Selection.Collapse Direction:=0 'wdCollapseEnd
    End If
  End Select
  ngcWrdMove = True
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Function ngcWrdWrite(docName As Object, bmWhere As String, txtWhat As String, txtWith As String, iRow As Long, Optional docTpl As Object = Nothing) As String
  If docName Is Nothing Then ngcWrdWrite = "; - output document is not defined (row " & CStr(iRow) & ")!": Exit Function
  If Len(txtWhat) = 0 Then Exit Function
  Dim sTxt As String
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Not docName.Bookmarks.Exists(bmWhere) Then ngcWrdWrite = "; - bookmark " & bmWhere & " does not exist (row " & CStr(iRow) & ")": Exit Function
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  docName.ActiveWindow.Selection.GoTo What:=-1, Name:=bmWhere
  With docName.ActiveWindow.Selection.Find
    .Replacement.ClearFormatting
    .Text = IIf(Left(txtWhat, 2) = ">>", Left(txtWhat, 2), txtWhat)
    If Left(txtWith, 2) = "##" Then
      If docTpl Is Nothing Then ngcWrdWrite = "; - template document is not defined (row " & CStr(iRow) & ")!": Exit Function
      .Execute
      If .found = False Then ngcWrdWrite = "; - can't find '" & .Text & "' in " & bmWhere & " (row " & CStr(iRow) & ")": Exit Function
      sTxt = ngcWrdText(txtWith)
      If sTxt = "" Then
        If Not docTpl.Bookmarks.Exists(Mid(txtWith, 3)) Then ngcWrdWrite = "; - bookmark " & Mid(txtWith, 3) & " does not exist (row " & CStr(iRow) & ")": Exit Function
        If docName.Bookmarks.Exists(Mid(txtWith, 3)) Then docName.Bookmarks(Mid(txtWith, 3)).Delete
        docTpl.Bookmarks(Mid(txtWith, 3)).Range.Copy
        docName.ActiveWindow.Selection.Paste
      Else: docName.ActiveWindow.Selection.TypeText sTxt: End If
    Else
      .Replacement.Text = txtWith
      .Execute Replace:=2
      If .found = False Then ngcWrdWrite = "; - can't find '" & .Text & "' in " & bmWhere & " (row " & CStr(iRow) & ")": Exit Function
    End If
  End With
End Function
Attribute VB_Name = "frmCfgGoto"
Attribute VB_Base = "0{60B833AA-1DD9-4455-ABCD-1A632FF95C79}{C7D93165-97D7-44AA-AEA5-FBA817B28F62}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'(c)2011 Terekhov Alexey. All rights reserved.
'Phone: +38631334953, Skype:terekhov_alexey
Option Explicit

Private Sub UserForm_Initialize()
  Dim shV As Worksheet, sh As Worksheet, iRow As Long
  Set shV = Sheets(ngcVAR)
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  lstQG.Clear
  Set sh = Sheets(ngcINP)
  For iRow = 1 To fndRngLst(shV.Cells(30, 3).Value)
    If sh.Cells(iRow, INCM).Value = "QG" Then
      lstQG.AddItem CStr(iRow)
      lstQG.List(lstQG.ListCount - 1, 1) = sh.Cells(iRow, INQT).Value
    End If
  Next iRow
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  lstCG.Clear
  Set sh = Sheets(ngcCSI)
  For iRow = 1 To fndRngLst(shV.Cells(30, 4).Value)
    If sh.Cells(iRow, SPCM).Value = "CG" Then
      lstCG.AddItem CStr(iRow)
      lstCG.List(lstCG.ListCount - 1, 1) = sh.Cells(iRow, SPCC).Value
    End If
  Next iRow
End Sub

Private Sub lstQG_Change()
  If Not fndIsSheet(ngcINP) Or Not fndIsSheet(ngcCSI) Then Exit Sub
  If lstQG.ListIndex >= 0 Then
    Hide
    If ActiveWorkbook.Windows.Count > 1 And Right(ActiveWindow.Caption, 2) <> ":1" Then ActiveWorkbook.Windows(2).Activate
    If ActiveWindow.ActiveSheet.Name <> ngcINP Then Sheets(ngcINP).Activate
    ActiveWindow.ScrollRow = Val(lstQG.List(lstQG.ListIndex, 0))
    If Sheets(ngcINP).Cells(Val(lstQG.List(lstQG.ListIndex, 0)), INTM).Value <> "" Then
      Sheets(ngcINP).Cells(Val(lstQG.List(lstQG.ListIndex, 0)), INTM).Value = True
      If Not bAFoff Then ngcAFqs Target:=Sheets(ngcINP).Cells(Val(lstQG.List(lstQG.ListIndex, 0)), INTM)
    End If
    ActiveWindow.ActiveSheet.Cells(Val(lstQG.List(lstQG.ListIndex, 0)), INQV).Select
    If Selection.EntireRow.Hidden = True Then ngcAFturnoff
    Unload Me
  End If
End Sub

Private Sub lstCG_Change()
  If ActiveWorkbook.VBProject.Name <> "NG4byTA" Then Exit Sub
  If lstCG.ListIndex >= 0 Then
    Hide
    If ActiveWorkbook.Windows.Count > 1 And Right(ActiveWindow.Caption, 2) <> ":2" Then ActiveWorkbook.Windows(2).Activate
    If ActiveWindow.ActiveSheet.Name <> ngcCSI Then Sheets(ngcCSI).Activate
    ActiveWindow.ScrollRow = Val(lstCG.List(lstCG.ListIndex, 0))
    ActiveWindow.ActiveSheet.Cells(Val(lstCG.List(lstCG.ListIndex, 0)), SPCC).Select
    If Selection.EntireRow.Hidden = True Then ngcAFturnoff
    Unload Me
  End If
End Sub

Attribute VB_Name = "frmCfgImp"
Attribute VB_Base = "0{1899B840-28CB-4D93-880C-4C867DF04A13}{5F510FE8-45FD-4AC9-9013-EABDF2411D6D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'(c)2010 Terekhov Alexey. All rights reserved.
'Phone: +38631334953, Skype:terekhov_alexey
Option Explicit

Dim xmlFile As Object, bCmp As Boolean
Const TXTNS As String = "Current"
Const TXTMC As String = "Main configuration"

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Public Sub ShowManual(bCompare As Boolean, Optional sFile As String = "")
  Me.Tag = ActiveWorkbook.Name
  bCmp = bCompare
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Caption = "Import and Compare (" & Sheets(ngcVAR).Cells(2, 2).Value & "." & Sheets(ngcVAR).Cells(2, 11).Value & ")"
  lstMsp.Clear
  lstFile.Clear
  intCmpShow bShow:=bCompare
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Set xmlFile = CreateObject("MSXML2.DOMDocument")
  xmlFile.setProperty "SelectionLanguage", "XPath"
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  If sFile <> "" Then
    intAddFilesXml fileName:=sFile
  Else: btnAddFiles_Click: End If
  If lstFile.ListCount = 0 Then Unload Me: Exit Sub
  If bCmp Then intRefreshConfs
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  setSingleQS sQS:="", sID:="", sVal:="", bReset:=True
  intRefreshScheme
  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If bCmp And sFile <> "" Then cmdImport_Click
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If bCmp Then intRefreshCmp
  Show vbModeless
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub intCmpShow(bShow As Boolean)
  If bShow Then lstFile.Width = 282: Height = 411: cmdImport.Left = 84
  lblConf.Visible = bShow
  lstMsp.Visible = bShow
  cmbMsp.Visible = bShow
  lblConfCmb.Visible = bShow
  If Not bShow Then lstFile.Width = 464: Height = 149: cmdImport.Left = 384
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  lblCmp.Visible = bShow
  lblCmpFile.Visible = bShow
  lblCmpConf.Visible = bShow
  lblCmpRow.Visible = bShow
  lstCode.Visible = bShow
  btnCodeAll.Visible = bShow
  btnCodeNone.Visible = bShow
  btnRefresh.Visible = bShow
  chbCPs.Visible = bShow
  btnAccept.Visible = bShow
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Private Sub btnAddFiles_Click()
  Dim vPath As Variant, iCur As Long
  vPath = Application.GetOpenFilename(FileFilter:="Iskratel specification,*.xml,MS Excel questionnaire,*.xl*,MS Visio trunking diagram,*.vsd,All supported formats,*.xml;*.xl*;*.vsd", MultiSelect:=True)
  If VarType(vPath) = vbBoolean Then Exit Sub
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If VarType(vPath) = vbString Then vPath = Array(vPath)
  For iCur = LBound(vPath) To UBound(vPath)
    If LCase(Right(vPath(iCur), 4)) = ".xml" Then
      intAddFilesXml fileName:=CStr(vPath(iCur))
    ElseIf LCase(Right(vPath(iCur), 4)) Like ".xl[st]" Or LCase(Right(vPath(iCur), 5)) Like ".xl[st][xm]" Then
      intAddFilesXls fileName:=CStr(vPath(iCur))
    Else: MsgBox vPath(iCur) & vbCrLf & "Format not supported in this version!", vbInformation: End If
  Next iCur
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML |fffd||fffd||fffd||fffd||fffd|
Private Sub intAddFilesXml(fileName As String)
  Dim xmlNode As Object, xmlCur As Object, xmlVer As Object, iCur As Long, iInd As Long
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  xmlFile.Load fileName
  xmlFile.LoadXML Replace(Replace(xmlFile.xml, " xmlns=""http://www.iskratel.si/xmlnamespaces""", ""), " xmlns='http://www.iskratel.si/xmlnamespaces'", "")
  lstFile.Tag = fileName
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Set xmlNode = xmlFile.SelectNodes("/OrderIntakeData/T_AU00[1]/T_AU05")
  If xmlNode.Length > 0 Then
    iCur = 1: iInd = lstFile.ListCount
    For Each xmlCur In xmlNode
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      lstFile.AddItem fileName
      lstFile.ListIndex = -1
      lstFile.List(lstFile.ListCount - 1, 1) = CStr(iCur)
      lstFile.List(lstFile.ListCount - 1, 2) = ""
      lstFile.List(lstFile.ListCount - 1, 3) = xmlCur.getAttribute("SPEC")
      lstFile.List(lstFile.ListCount - 1, 4) = xmlCur.getAttribute("ImeSpecifikacije")
      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Set xmlVer = xmlCur.SelectSingleNode("T_AU06[@TehPod='CONFVERS']/@Vrednost")
      If Not xmlVer Is Nothing Then lstFile.List(lstFile.ListCount - 1, 5) = xmlVer.NodeValue
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      lstMsp.AddItem ""
      lstMsp.List(lstMsp.ListCount - 1, 1) = ""
      lstMsp.List(lstMsp.ListCount - 1, 2) = TXTNS
      lstFile.Selected(lstFile.ListCount - 1) = True
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      iCur = iCur + 1
    Next xmlCur
    lstFile.ListIndex = iInd
  End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XLS |fffd||fffd||fffd||fffd||fffd|
Private Sub intAddFilesXls(fileName As String)
  Dim wbkCfg As Workbook, wbkQst As Workbook, sht As Worksheet, iCur As Long, iInd As Long
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.ScreenUpdating = False
  Hide
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  Set wbkCfg = ActiveWorkbook
  Set wbkQst = Workbooks.Open(fileName:=fileName, UpdateLinks:=False, ReadOnly:=True)
  wbkCfg.Activate: lstFile.Tag = ""
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  iCur = 1: iInd = lstFile.ListCount
  For Each sht In wbkQst.Sheets
    If Left(sht.Name, 2) = "QS" Then
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      lstFile.AddItem fileName
      lstFile.ListIndex = -1
      lstFile.List(lstFile.ListCount - 1, 1) = CStr(iCur)
      lstFile.List(lstFile.ListCount - 1, 2) = ""
      lstFile.List(lstFile.ListCount - 1, 3) = CStr(iCur) & "#"
      lstFile.List(lstFile.ListCount - 1, 4) = Mid(fileName, InStrRev(fileName, "\") + 1)
      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      lstFile.List(lstFile.ListCount - 1, 5) = "#N/A"
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      lstMsp.AddItem ""
      lstMsp.List(lstMsp.ListCount - 1, 1) = ""
      lstMsp.List(lstMsp.ListCount - 1, 2) = TXTNS
      lstFile.Selected(lstFile.ListCount - 1) = True
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      iCur = iCur + 1
    End If
  Next sht
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  wbkQst.Close SaveChanges:=False
  Set wbkQst = Nothing
  wbkCfg.Activate
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Application.ScreenUpdating = True
  Show
  If iCur > 1 Then lstFile.ListIndex = iInd
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub intRefreshConfs()
  Dim shI As Worksheet, iCol As Long
  Set shI = Sheets(ngcINP)
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  cmbMsp.Clear
  cmbMsp.AddItem ""
  cmbMsp.ListIndex = -1
  cmbMsp.List(0, 1) = TXTNS
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  iCol = INTM + 1
  If shI.Cells(1, iCol).Value <> "" Then
    While shI.Cells(1, iCol).Value <> ""
      cmbMsp.AddItem CStr(iCol)
      cmbMsp.List(cmbMsp.ListCount - 1, 1) = getName(iCol)
      iCol = iCol + 1
    Wend
  Else
    cmbMsp.AddItem CStr(INQV)
    cmbMsp.List(cmbMsp.ListCount - 1, 1) = getName(INQV)
  End If
  If lstFile.ListIndex >= 0 Then
    cmbMsp.ListIndex = Val("0" & lstMsp.List(lstFile.ListIndex, 1))
  Else: cmbMsp.ListIndex = 0: End If
End Sub

Private Function getName(iCol As Long) As String
  getName = Sheets(ngcINP).Cells(3, IIf(Sheets(ngcINP).Cells(3, iCol).Value <> "", iCol, INQV)).Value & " (""" & Replace(Sheets(ngcINP).Cells(1, iCol).Address(False, False), "1", """)")
End Function

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub intRefreshScheme()
  Dim sDir As String, sFile As String
  cmbScheme.Clear: cmbScheme.AddItem "(none)": cmbScheme.ListIndex = 0
  sDir = Sheets(ngcVAR).Cells(2, 8).Value: If Right(sDir, 1) <> "\" Then sDir = sDir & "\"
  sFile = Dir(sDir, vbDirectory) '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Do While sFile <> ""
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If (sFile <> ".") And (sFile <> "..") And Right(sFile, 4) = ".ngq" And (sFile = escID(sFile, 2, Nothing, "")) Then
      If ((GetAttr(sDir & sFile) And vbDirectory) <> vbDirectory) Then
        cmbScheme.AddItem sFile
        If Left(sFile, Len(sFile) - 4) = Left(ActiveWorkbook.Name, Len(sFile) - 4) Then cmbScheme.ListIndex = cmbScheme.ListCount - 1
      End If
    End If
    sFile = Dir '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|.|fffd||fffd||fffd||fffd|
  Loop
End Sub

Private Sub btnCodeAll_Click()
  If lstCode.ListCount > 0 Then
    Dim iRow As Long
    For iRow = 0 To lstCode.ListCount - 1
      lstCode.Selected(iRow) = True
    Next iRow
  End If
End Sub

Private Sub btnCodeNone_Click()
  If lstCode.ListCount > 0 Then
    Dim iRow As Long
    For iRow = 0 To lstCode.ListCount - 1
      lstCode.Selected(iRow) = False
    Next iRow
  End If
End Sub

Private Sub btnSpecAll_Click()
  If lstFile.ListCount > 0 Then
    Dim iRow As Long
    For iRow = 0 To lstFile.ListCount - 1
      lstFile.Selected(iRow) = True
    Next iRow
  End If
End Sub

Private Sub btnSpecNone_Click()
  If lstFile.ListCount > 0 Then
    Dim iRow As Long
    For iRow = 0 To lstFile.ListCount - 1
      lstFile.Selected(iRow) = False
    Next iRow
  End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub cmbMsp_Change()
  If lstFile.ListIndex >= 0 And cmbMsp.ListIndex >= 0 Then
    lstMsp.List(lstFile.ListIndex, 0) = cmbMsp.List(cmbMsp.ListIndex, 0)
    lstMsp.List(lstFile.ListIndex, 1) = CStr(cmbMsp.ListIndex)
    lstMsp.List(lstFile.ListIndex, 2) = cmbMsp.List(cmbMsp.ListIndex, 1)
  End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub cmdImport_Click()
  On Error GoTo cmdImportError
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim shV As Worksheet, shS As Worksheet, shI As Worksheet
  Dim sQS As String, sDir As String, bMsp As Boolean
  Dim iCol As Long, iCur As Long, iPos As Long, sTmp As String
  Set shV = Sheets(ngcVAR): Set shS = Sheets(ngcCSI): Set shI = Sheets(ngcINP)
  sDir = shV.Cells(2, 8).Value: sDir = sDir & IIf(Right(sDir, 1) <> "\", "\", "")
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  bMsp = False: iCur = 0
  For iCol = 0 To lstFile.ListCount - 1
    If lstFile.Selected(iCol) Then iCur = iCur + 1
  Next iCol
  If iCur = 0 Then MsgBox "Nothing to import!", vbExclamation: Exit Sub
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.Cursor = xlWait
  Hide
  Application.ScreenUpdating = False
  ngcWinsBySide bSingle:=True, bUpdating:=False
  Application.Calculation = xlCalculationManual
  Application.EnableEvents = False
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If iCur > 1 Or shI.Cells(1, INTM + 1).Value <> "" Then
    bMsp = True: iCol = INTM + 1
    While shI.Cells(1, iCol).Value <> "": iCol = iCol + 1: Wend
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| MSpec
    shI.Cells(2, INQV).FormulaR1C1 = ngcMsp(bMsp)
    shI.Cells(3, INQV).FormulaR1C1 = ngcMsp(bMsp)
    shI.Cells(4, INQV).FormulaR1C1 = ngcMsp(bMsp)
    shI.Cells(5, INQV).FormulaR1C1 = ngcMsp(bMsp)
    If shI.Cells(6, INID).Value = shV.Cells(12, 1).Value Then shI.Cells(6, INQV).FormulaR1C1 = ngcMsp(bMsp)
  Else: iCol = INQV: End If
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim fso As Object, fFile As Object
  Dim sFile As String, vFile As Variant, iFile As Long
  Dim sRec As String, vRec As Variant, iRec As Long
  If cmbScheme.ListIndex > 0 Then
    Set fso = CreateObject("Scripting.FileSystemObject")
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| unicode
    Set fFile = fso.OpenTextFile(sDir & cmbScheme.Value, , , 0)
    sFile = fFile.ReadAll: fFile.Close
    If Left(sFile, 1) = Chr(255) Then
      Set fFile = fso.OpenTextFile(sDir & cmbScheme.Value, , , -1)
      sFile = fFile.ReadAll: fFile.Close
    End If
    vFile = Split(sFile, vbCrLf): sFile = ""
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For iCur = 0 To lstFile.ListCount - 1
    If lstFile.Selected(iCur) Then
      Application.StatusBar = "Loading: " & CStr(lstFile.ListCount - iCur) & " left..."
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      setSingleQS sQS:=sQS, sID:="", sVal:="", bReset:=True
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If bMsp Then ngcMspNew bCopy:=False, bExternal:=False
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If LCase(Right(lstFile.List(iCur, 0), 4)) = ".xml" Then
        cmdImportXml shI:=shI, iCol:=iCol, sQS:=sQS, iCur:=iCur
      ElseIf LCase(Right(lstFile.List(iCur, 0), 4)) Like ".xl[st]" Or LCase(Right(lstFile.List(iCur, 0), 5)) Like ".xl[st][xm]" Then
        cmdImportXls shI:=shI, iCol:=iCol, sQS:=sQS
      End If
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If cmbScheme.ListIndex > 0 Then
        For iFile = LBound(vFile) To UBound(vFile)
          sFile = Trim(vFile(iFile))
          If Left(sFile, 1) <> "'" And Left(sFile, 1) <> "|fffd|" And InStr(sFile, ">") > 0 Then
            sRec = Trim(Left(sFile, InStr(sFile, ">") - 1))
            If InStr(sQS, sRec) > 0 Then
              vRec = Split(Trim(Mid(sFile, InStr(sFile, ">") + 1)), ";")
              For iRec = LBound(vRec) To UBound(vRec)
                setSingleSC sQS:=sQS, sOld:=sRec, sNew:=CStr(Trim(vRec(iRec))), bLst:=(iRec = UBound(vRec))
              Next iRec
            End If
          End If
        Next iFile
      End If
      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Application.ScreenUpdating = False
      setWriteQs sQS:=sQS, iCol:=iCol, bMsp:=bMsp
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      lstMsp.List(iCur, 0) = CStr(iCol)
      lstMsp.List(iCur, 1) = IIf(iCol > INQV, CStr(iCol) - INTM, "0")
      lstMsp.List(iCur, 2) = getName(iCol)
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
      If cmbScheme.ListIndex > 0 Then
        For iFile = LBound(vFile) To UBound(vFile)
          sFile = Trim(vFile(iFile))
          If Left(sFile, 1) = "|fffd|" Then
            vRec = Split(Trim(Mid(sFile, 2)), " ")
            Select Case LCase(CStr(vRec(0)))
            Case "refresh"
              lstFile.ListIndex = iCur
              intRefreshCmp
            Case "select"
              If UBound(vRec) > 2 Then
                For iRec = 0 To lstCode.ListCount - 1
                  If lstCode.List(iRec, -1 * (LCase(vRec(2)) = "cd")) = vRec(3) Then lstCode.Selected(iRec) = (vRec(1) = "+")
                Next iRec
              ElseIf UBound(vRec) > 0 Then
                If vRec(1) = "*" Then btnCodeAll_Click
              End If
            Case "conform"
              Application.EnableEvents = True
              Application.ScreenUpdating = False
              btnAccept_Click
              Application.EnableEvents = False
            End Select
          End If
        Next iFile
      End If
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      iCol = iCol + 1
      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      lstFile.Selected(iCur) = False
    End If
  Next iCur
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Application.StatusBar = "Finalizing..."
  intCmpShow bShow:=True
  intRefreshConfs
  lstFile_Change
  Application.CalculateFullRebuild
  ngcAFcreate
  intRefreshCmp
cmdImportError:
  Application.StatusBar = False
  Application.EnableEvents = True
  Application.Calculation = xlCalculationAutomatic
  Application.ScreenUpdating = True
  Application.Cursor = xlDefault
  If Err.Number <> 0 Then MsgBox "An error occur during operation." & vbCrLf & Err.Description, vbExclamation
  Show vbModeless
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML
Private Sub cmdImportXml(shI As Worksheet, iCol As Long, sQS As String, iCur As Long)
  Dim xmlNode As Object, xmlCur As Object, sTmp As String
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  intFileLoad iFile:=iCur
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Set xmlNode = xmlFile.SelectSingleNode("/OrderIntakeData/T_AU00[1]/T_AU05[" & lstFile.List(iCur, 1) & "]")
  For Each xmlCur In xmlNode.SelectNodes("T_AS08")
    If Not IsNull(xmlCur.getAttribute("Vrednost")) And Not IsNull(xmlCur.getAttribute("Question")) Then
      setSingleQS sQS:=sQS, sID:=xmlCur.getAttribute("Question"), sVal:=xmlCur.getAttribute("Vrednost")
    End If
  Next xmlCur
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.CalculateFull
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  shI.Cells(2, iCol).Value = xmlNode.parentNode.getAttribute("STPON")
  sTmp = xmlNode.getAttribute("SPEC")
  If sTmp Like "*-[DFSV]" And Len(sTmp) > 2 Then sTmp = Left(sTmp, Len(sTmp) - 2)
  shI.Cells(3, iCol).Value = sTmp
  If shI.Cells(5, INID).Value = "SOLUTION" Then
    shI.Cells(5, iCol).Value = xmlNode.getAttribute("System")
    shI.Cells(6, iCol).Value = xmlNode.getAttribute("ImeSpecifikacije")
  Else: shI.Cells(5, iCol).Value = xmlNode.getAttribute("ImeSpecifikacije"): End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| XML
Private Sub cmdImportXls(shI As Worksheet, iCol As Long, sQS As String)
  'not yet :(
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
Private Sub intFileLoad(iFile As Long)
  If lstFile.Tag <> lstFile.List(iFile, 0) Then
    xmlFile.Load lstFile.List(iFile, 0)
    xmlFile.LoadXML Replace(Replace(xmlFile.xml, " xmlns=""http://www.iskratel.si/xmlnamespaces""", ""), " xmlns='http://www.iskratel.si/xmlnamespaces'", "")
    lstFile.Tag = lstFile.List(iFile, 0)
  End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub cmdSaveAll_Click()
  On Error GoTo ngcSaveAllError
  If lstFile.ListCount < 1 Then Exit Sub
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim wbE As Workbook, shE As Worksheet, shV As Worksheet, shI As Worksheet
  Dim iRow As Long, iLst As Long, iCur As Long, sErr As String
  Set shV = Sheets(ngcVAR): Set shI = Sheets(ngcINP)
  Me.Hide: sErr = ""
  Set wbE = Workbooks.Add
  Set shE = wbE.Sheets(1): shV.Parent.Activate
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.StatusBar = "Creating new workbook..."
  Application.Cursor = xlWait
  Application.Calculation = xlCalculationManual
  Application.ScreenUpdating = False
  Application.EnableEvents = False
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  wrtApS sht:=shE, dft:=shV.Cells(30, 4), sName:="SUM"
  wrtApC rng:=shE.Range(shE.Cells(1, 1), shE.Cells(1, 8)), iCols:=Array(1, 2, 3, 4, 5, 6, 7, 8), _
      cWths:=Array(12, 50, 6, 12, 50, 6, 10, 20), cFrms:=Array("", "@", "", "", "@"), _
      cAlgs:=Array(xlLeft, xlLeft, xlRight, xlLeft, xlLeft, xlRight, xlRight, xlLeft), _
      cFncs:=Array(0, 0, 0, 0, 0, 0, 8421504)
  shE.Cells(1, 1).Value = Format(Now(), "yyyy.mm.dd")
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  iRow = 3
  For iCur = 0 To lstFile.ListCount - 1
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    Application.StatusBar = "Working with " & CStr(iCur + 1) & " specification"
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    lstFile.ListIndex = iCur
    lstFile_Change
    intRefreshCmp
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    wrtApR rng:=shE.Range(shE.Cells(iRow, 1), shE.Cells(iRow, 8)), iCols:=Array(1, 2, 3, 4, 5, 6, 7, 8), _
      cTxts:=Array(lstFile.List(iCur, 3), lstFile.List(iCur, 4), "File", shI.Cells(3, INQV).Value, _
      IIf(shI.Cells(5, INID).Value = "OBJECT", shI.Cells(5, INQV).Value, shI.Cells(6, INQV).Value), "Cfg"), _
      tpl:=shV.Cells(30, 3), iApr:=7
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    iRow = iRow + 1
    Application.CalculateFull
    If lstCode.ListCount > 0 Then
      For iLst = 0 To lstCode.ListCount - 1
        If lstCode.List(iLst, 3) <> "0" Then
          shE.Cells(iRow, 1).Value = lstCode.List(iLst, 1)
          shE.Cells(iRow, 2).Value = lstCode.List(iLst, 2)
          shE.Cells(iRow, 3).Value = lstCode.List(iLst, 3)
        End If
        If lstCode.List(iLst, 4) <> "0" Then
          shE.Cells(iRow, 4).Value = lstCode.List(iLst, 1)
          shE.Cells(iRow, 5).Value = lstCode.List(iLst, 2)
          shE.Cells(iRow, 6).Value = lstCode.List(iLst, 4)
        End If
        shE.Cells(iRow, 7).Value = lstCode.List(iLst, 5)
        iRow = iRow + 1
      Next iLst
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      shE.Range(shE.Cells(iRow - lstCode.ListCount, 1), shE.Cells(iRow, 8)).Borders(xlInsideHorizontal).LineStyle = xlContinuous
      shE.Range(shE.Cells(iRow - lstCode.ListCount, 3), shE.Cells(iRow - 1, 4)).Borders(xlInsideVertical).LineStyle = xlContinuous
      shE.Range(shE.Cells(iRow - lstCode.ListCount, 6), shE.Cells(iRow - 1, 7)).Borders(xlInsideVertical).LineStyle = xlContinuous
    Else: shE.Cells(iRow, 1).Value = "Specifications are identical!": End If
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    iRow = iRow + 2
  Next iCur
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
ngcSaveAllError:
  Application.EnableEvents = True
  Application.Cursor = xlDefault
  Application.StatusBar = False
  Application.ScreenUpdating = True
  If Err.Number <> 0 Then MsgBox "An error occur during operation!", vbExclamation
  Application.Calculation = xlCalculationAutomatic
  Unload Me
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub lstFile_Change()
  Dim iRow As Long
  If lstMsp.Visible Then
    For iRow = 0 To lstFile.ListCount - 1
      If iRow <= lstMsp.ListCount - 1 Then
        lstMsp.Selected(iRow) = lstFile.Selected(iRow)
        lstMsp.ListIndex = lstFile.ListIndex
      End If
    Next iRow
  End If
  If cmbMsp.Visible And lstFile.ListIndex >= 0 Then
    iRow = Val("0" & lstMsp.List(lstFile.ListIndex, 1))
    If iRow < cmbMsp.ListCount Then cmbMsp.ListIndex = iRow
  End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub setWriteQs(sQS As String, ByVal iCol As Long, ByVal bMsp As Boolean)
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim iRow As Long, iSpc As Long, iPos As Long, sCur As String
  Dim shI As Worksheet, shS As Worksheet, shV As Worksheet, bRpt As Boolean
  Set shI = Sheets(ngcINP): Set shS = Sheets(ngcCSI): Set shV = Sheets(ngcVAR)
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  bRpt = True
  While bRpt
    bRpt = False
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For iRow = 1 To fndRngLst(shV.Cells(30, 3).Value)
      If shI.Cells(iRow, INCM).Value = "QS" Or shI.Cells(iRow, INCM).Value = "TD" Then
        If Not shI.Cells(iRow, INID).Value Like "*-info.*" Then
          iPos = InStr(sQS, ";" & shI.Cells(iRow, INID).Value & ":")
        Else: iPos = 0: End If
        If iPos > 0 Then
          iPos = InStr(iPos, sQS, ":"): sCur = Mid(sQS, iPos + 1, InStr(iPos, sQS, ";") - iPos - 1)
          If sCur Like ".#*" Then sCur = "0" & sCur
          If (IsNumeric(sCur) Or IsNumeric(Replace(sCur, ".", ","))) And Application.WorksheetFunction.IsNumber(shI.Cells(iRow, INQV).Value) Then
            '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If Val(sCur) <> CDbl(shI.Cells(iRow, INQV).Value) Then
              shI.Cells(iRow, iCol).Value = Val(sCur)
              If iCol <> INQV Then shI.Cells(iRow, INQV).FormulaR1C1 = ngcMsp(bMsp)
              bRpt = True
            End If
          ElseIf sCur <> CStr(shI.Cells(iRow, INQV).Value) Then
            '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            shI.Cells(iRow, iCol).Value = sCur
            If iCol <> INQV Then shI.Cells(iRow, INQV).FormulaR1C1 = ngcMsp(bMsp)
            bRpt = True
          End If
        End If
      End If
    Next iRow
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If iCol <> INQV Then iSpc = iCol + 1 Else iSpc = SPQV
    For iRow = 1 To fndRngLst(shV.Cells(30, 4).Value)
      If shS.Cells(iRow, SPCM).Value = "QL" Then
        iPos = InStr(sQS, ";" & shS.Cells(iRow, SPID).Value & ":")
        If iPos > 0 Then
          iPos = InStr(iPos, sQS, ":"): sCur = Mid(sQS, iPos + 1, InStr(iPos, sQS, ";") - iPos - 1)
          If sCur Like ".#*" Then sCur = "0" & sCur
          If (IsNumeric(sCur) Or IsNumeric(Replace(sCur, ".", ","))) And Application.WorksheetFunction.IsNumber(shS.Cells(iRow, SPQV).Value) Then
            '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
            If Val(sCur) <> CDbl(shS.Cells(iRow, SPQV).Value) Then
              shS.Cells(iRow, iSpc).Value = Val(sCur)
              If iSpc <> SPQV Then shS.Cells(iRow, SPQV).FormulaR1C1 = ngcMsp2(bMsp)
              bRpt = True
            End If
          ElseIf sCur <> CStr(shS.Cells(iRow, SPQV).Value) Then
            '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            shS.Cells(iRow, iSpc).Value = sCur
            If iSpc <> SPQV Then shS.Cells(iRow, SPQV).FormulaR1C1 = ngcMsp2(bMsp)
            bRpt = True
          End If
        End If
      End If
    Next iRow
    Application.CalculateFullRebuild
  Wend
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Sub setSingleQS(ByRef sQS As String, sID As String, sVal As String, Optional bReset As Boolean = False)
  If bReset Or sQS = "" Then sQS = ";"
  If sID <> "" Then
    If sVal = "" Then sVal = "0"
    Dim iPos As Long, sCur As String
    iPos = InStr(sQS, ";" & sID & ":")
    If iPos > 0 Then
      iPos = InStr(iPos, sQS, ":")
      sCur = Mid(sQS, iPos + 1, InStr(iPos, sQS, ";") - iPos - 1)
      If Application.WorksheetFunction.IsNumber(sCur) And Application.WorksheetFunction.IsNumber(sVal) Then
        sCur = CStr(Val(sCur) + Val(sVal))
        sQS = Left(sQS, iPos) & sCur & Right(sQS, InStr(iPos, sQS, ";"))
      End If
    Else: sQS = sQS & sID & ":" & sVal & ";": End If
  End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub setSingleSC(ByRef sQS As String, sOld As String, sNew As String, bLst As Boolean)
  Dim vTmp As Variant, iTmp As Long, iBeg As Long, iEnd As Long
  Dim nQue As String, nVal As String, oQue As String, oVal As String, qQue As String, qVal As String
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  vTmp = Split(sOld, ":"): oQue = CStr(vTmp(LBound(vTmp)))
  oVal = "": If UBound(vTmp) > LBound(vTmp) Then oVal = vTmp(LBound(vTmp) + 1)
  vTmp = Split(sNew, ":"): nQue = CStr(vTmp(LBound(vTmp))): If Left(sNew, 1) = "+" Then nQue = Mid(nQue, 2)
  nVal = "": If UBound(vTmp) > LBound(vTmp) Then nVal = vTmp(LBound(vTmp) + 1)
  qQue = "": qVal = "": iBeg = InStr(sQS, ";" & oQue & ":"): iEnd = 0
  If iBeg > 0 Then
    iTmp = InStr(iBeg + 1, sQS, ":"): iEnd = InStr(iBeg + 1, sQS, ";")
    qQue = Mid(sQS, iBeg + 1, iTmp - iBeg - 1)
    qVal = Mid(sQS, iTmp + 1, iEnd - iTmp - 1)
  End If
  If qVal = "" Or (qVal Like ".#*") Then qVal = "0" & qVal
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Left(sNew, 1) = "+" Then
    iTmp = InStr(sQS, ";" & nQue & ":")
    If iTmp > 0 Then
      iTmp = InStr(iTmp, sQS, ":")
      nVal = Mid(sQS, iTmp + 1, InStr(iTmp + 1, sQS, ";") - iTmp - 1)
      If nVal Like ".#*" Then nVal = "0" & nVal
      If IsNumeric(qVal) And IsNumeric(nVal) Then nVal = CStr(Val(qVal) + Val(nVal))
      sQS = Left(sQS, iTmp) & nVal & Mid(sQS, InStr(iTmp, sQS, ";"))
    Else: sQS = sQS & nQue & ":" & qVal & ";": End If
  ElseIf Left(sNew, 1) = "^" Then
    iTmp = InStr(sQS, ";" & nQue & ":")
    If iTmp > 0 Then
      iTmp = InStr(iTmp, sQS, ":")
      nVal = Mid(sQS, iTmp + 1, InStr(iTmp + 1, sQS, ";") - iTmp - 1)
      If nVal Like ".#*" Then nVal = "0" & nVal
      If IsNumeric(qVal) And IsNumeric(nVal) Then nVal = fndMaxD(Val(qVal), Val(nVal))
      sQS = Left(sQS, iTmp) & nVal & Mid(sQS, InStr(iTmp, sQS, ";"))
    Else: sQS = sQS & nQue & ":" & qVal & ";": End If
  Else: sQS = sQS & nQue & ":" & IIf(nVal = "", qVal, nVal) & ";": End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If bLst Then
    iBeg = InStr(sQS, ";" & oQue & ":"): iEnd = 0
    If iBeg > 0 Then
      iEnd = InStr(iBeg + 1, sQS, ";") + 1
      sQS = Left(sQS, iBeg) & Mid(sQS, iEnd)
    End If
  End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub btnRefresh_Click()
  Workbooks(Me.Tag).Activate
  intRefreshCmp
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Not bAFoff Then ngcAFcreate
End Sub

'|fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub chbCPs_Click()
  intRefreshCmp
  btnAccept.Enabled = chbCPs.Value
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Not bAFoff Then ngcAFcreate
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub intRefreshCmp()
  If lstFile.Tag = CStr(lstFile.ListIndex) Then Exit Sub
  lstCode.Clear
  If lstFile.ListIndex < 0 Or lstFile.ListIndex > lstMsp.ListCount - 1 Then lstCode.AddItem "Select spec...": Exit Sub
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim xmlNode As Object, xmlCur As Object, cTxts As New Collection, sRows As String
  Dim shV As Worksheet, shS As Worksheet, iRow As Long, bUpd As Boolean
  Dim sCD As String, iPos As Long, sCur As String, iCur As Long
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Set shV = Sheets(ngcVAR): Set shS = Sheets(ngcCSI): bUpd = Application.ScreenUpdating
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.ScreenUpdating = False
  If Val("0" & lstMsp.List(lstFile.ListIndex, 1)) > 0 Then Sheets(ngcINP).Cells(1, INTM).Value = Val("0" & lstMsp.List(lstFile.ListIndex, 1)) + 1
  Application.Calculation = xlCalculationAutomatic
  While Application.CalculationState <> xlDone: DoEvents: Wend
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Val("0" & lstMsp.List(lstFile.ListIndex, 1)) > 0 Then
    If Sheets(ngcINP).Cells(1, INTM).Value <> Val("0" & lstMsp.List(lstFile.ListIndex, 1)) + 1 Then
      Sheets(ngcINP).Cells(1, INTM).Value = Val("0" & lstMsp.List(lstFile.ListIndex, 1)) + 1
      While Application.CalculationState <> xlDone: DoEvents: Wend
    End If
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  sCD = ";": iCur = 1
  intFileLoad iFile:=lstFile.ListIndex
  Set xmlNode = xmlFile.SelectSingleNode("/OrderIntakeData/T_AU00[1]/T_AU05[" & lstFile.List(lstFile.ListIndex, 1) & "]")
  For Each xmlCur In xmlNode.SelectNodes("T_CSI_PogodbeneTocke/T_CSI_Specs")
    iPos = InStr(sCD, ";" & xmlCur.getAttribute("KODA") & ":" & IIf(chbCPs.Value, xmlCur.parentNode.getAttribute("SifPogT") & ":", ""))
    If iPos > 0 Then
      iPos = InStrRev(sCD, ":", InStr(iPos + 1, sCD, ":0;") - 1)
      sCur = Mid(sCD, iPos + 1, InStr(iPos + 1, sCD, ":") - iPos - 1)
      sCD = Left(sCD, iPos) & CStr(Val(sCur) + Val(xmlCur.getAttribute("Kol"))) & Mid(sCD, InStr(iPos + 1, sCD, ":"))
    Else
      sCD = sCD & xmlCur.getAttribute("KODA") & ":" & xmlCur.parentNode.getAttribute("SifPogT") & ":" & xmlCur.getAttribute("Kol") & ":0;"
      cTxts.Add Item:=xmlCur.getAttribute("Tekst")
    End If
    iCur = iCur + 1
  Next xmlCur
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  sRows = ";"
  For iRow = 1 To fndRngLst(shV.Cells(30, 4).Value)
    If (shS.Cells(iRow, SPCM).Value = "F" Or shS.Cells(iRow, SPCM).Value = "V") And _
       Not IsError(shS.Cells(iRow, SPCC).Value) And Not IsError(shS.Cells(iRow, SPCV).Value) Then
      If CDbl("0" & shS.Cells(iRow, SPCV).Value) <> 0 Then
        iPos = InStr(sCD, ";" & shS.Cells(iRow, SPCC).Value & ":" & IIf(chbCPs.Value, shS.Cells(iRow, SPID).Value & ":", ""))
        If iPos > 0 Then
          iPos = InStrRev(sCD, ":", InStr(iPos + 1, sCD, ";"))
          sCur = Mid(sCD, iPos + 1, InStr(iPos, sCD, ";") - iPos - 1)
          sCD = Left(sCD, iPos) & CStr(Val(sCur) + CDbl(shS.Cells(iRow, SPCV).Value)) & Mid(sCD, InStr(iPos, sCD, ";"))
        Else
          sCD = sCD & shS.Cells(iRow, SPCC).Value & ":" & shS.Cells(iRow, SPID).Value & ":0:" & CStr(shS.Cells(iRow, SPCV).Value) & ";"
          cTxts.Add Item:=shS.Cells(iRow, SPCT).Value
        End If
      End If
      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      iPos = InStr(sRows, ";" & shS.Cells(iRow, SPCC).Value & ":")
      If iPos > 0 Then
        iPos = InStr(iPos + 1, sRows, ";")
        sRows = Left(sRows, iPos - 1) & "," & CStr(iRow) & Mid(sRows, iPos)
      Else: sRows = sRows & shS.Cells(iRow, SPCC).Value & ":" & CStr(iRow) & ";": End If
    End If
  Next iRow
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Dim vCmp As Variant, vRec As Variant
  vCmp = Split(sCD, ";")
  For iCur = LBound(vCmp) To UBound(vCmp)
    vRec = Split(vCmp(iCur), ":")
    If UBound(vRec) = 3 Then
      If vRec(2) Like ".#*" Then vRec(2) = "0" & vRec(2)
      If vRec(3) Like ".#*" Then vRec(2) = "0" & vRec(3)
      If CDbl(vRec(2)) <> CDbl(vRec(3)) Then
        lstCode.AddItem vRec(1)
        lstCode.List(lstCode.ListCount - 1, 1) = vRec(0)
        If iCur <= cTxts.Count Then
          If Not IsNull(cTxts(iCur)) Then
            lstCode.List(lstCode.ListCount - 1, 2) = cTxts(iCur)
          Else: lstCode.List(lstCode.ListCount - 1, 2) = "": End If
        End If
        lstCode.List(lstCode.ListCount - 1, 3) = vRec(2)
        lstCode.List(lstCode.ListCount - 1, 4) = vRec(3)
        '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
        iPos = InStr(sRows, ";" & vRec(0) & ":")
        If iPos > 0 Then
          iPos = InStr(iPos + 1, sRows, ":")
          lstCode.List(lstCode.ListCount - 1, 5) = Mid(sRows, iPos + 1, InStr(iPos, sRows, ";") - iPos - 1)
        Else: lstCode.List(lstCode.ListCount - 1, 5) = "": End If
      End If
    End If
  Next iCur
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If bUpd Then Application.ScreenUpdating = False
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub btnAccept_Click()
  If lstCode.ListCount = 0 Then Exit Sub
  Dim shS As Worksheet, iAlt As Integer, iCur As Integer
  Dim vRow As Variant, iRow As Integer, bUse As Boolean
  Set shS = Sheets(ngcCSI)
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  bUse = False
  For iCur = 0 To lstCode.ListCount - 1
    If lstCode.Selected(iCur) Then
      bUse = True: iAlt = 1
      '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If Len(lstCode.List(iCur, 5)) > 0 Then
        vRow = Split(lstCode.List(iCur, 5) & ",", ",")
        '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        For iRow = LBound(vRow) To UBound(vRow) - 1
          If (lstCode.List(iCur, 0) = shS.Cells(Val(vRow(iRow)), SPID).Value) And (Val(shS.Cells(Val(vRow(iRow)), SPCV).Value) > 0) Then
            shS.Cells(Val(vRow(iRow)), SPCV).Value = lstCode.List(iCur, 3)
            iAlt = 0
          End If
        Next iRow
      End If
      '|fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      If iAlt Then
        iAlt = 0
        For iRow = 1 To fndRngLst(Sheets(ngcVAR).Cells(30, 4).Value)
          If shS.Cells(iRow, SPCM).Value = "F" And shS.Cells(iRow, SPID).Value = lstCode.List(iCur, 0) Then
            If shS.Cells(iRow, SPCC).Value = lstCode.List(iCur, 1) Then
              shS.Cells(iRow, SPCV).Value = lstCode.List(iCur, 3)
              iAlt = 0: Exit For
            ElseIf iAlt = 0 And (shS.Cells(iRow, SPCC).Value = "ABCxxxxYY" Or shS.Cells(iRow, SPCC).Value = "ABCxxxxDE") Then
              iAlt = iRow
            End If
          End If
        Next iRow
        If iAlt > 0 Then
          shS.Cells(iAlt, SPCC).Value = lstCode.List(iCur, 1)
          shS.Cells(iAlt, SPCT).Value = lstCode.List(iCur, 2)
          shS.Cells(iAlt, SPCV).Value = lstCode.List(iCur, 3)
        End If
      End If
    End If
  Next iCur
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Not bUse Then
    Hide
    MsgBox "There is no selected codes! Please select codes to conform.", vbInformation
    Show vbModeless
  Else: intRefreshCmp: End If
End Sub

Private Sub cmdSortCP_Click()
  intSortCmp bCP:=True
End Sub

Private Sub cmdSortCode_Click()
  intSortCmp bCP:=False
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub intSortCmp(bCP As Boolean)
  If lstCode.ListCount < 2 Then Exit Sub
  Dim iMin As Long, sMin As String, iRow As Long, iCur As Long
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For iRow = 0 To lstCode.ListCount - 2
    iMin = iRow
    For iCur = iRow + 1 To lstCode.ListCount - 1
      If lstCode.List(iMin, IIf(bCP, 0, 1)) > lstCode.List(iCur, IIf(bCP, 0, 1)) Then iMin = iCur
    Next iCur
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If iMin <> iRow Then
      For iCur = 0 To 5
        sMin = lstCode.List(iRow, iCur): lstCode.List(iRow, iCur) = lstCode.List(iMin, iCur): lstCode.List(iMin, iCur) = sMin
      Next iCur
    End If
  Next iRow
End Sub
Attribute VB_Name = "frmCfgSales"
Attribute VB_Base = "0{2C24D903-1D50-4C35-A8F9-643748F4E918}{0EB8F452-38A4-4C68-A8E9-E8A86FABA109}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'(c)2010 Terekhov Alexey. All rights reserved.
'Phone: +38631334953, Skype:terekhov_alexey
Option Explicit

Private Sub UserForm_Initialize()
  Dim shV As Worksheet, shI As Worksheet, vId As Variant, sTxt As String, sCur As Variant, iCur As Long
  Set shV = Sheets(ngcVAR)
  Set shI = Sheets(ngcINP)
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Tag = ""
  lstSales.Clear
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  sTxt = Replace(";" & Replace(Replace(Replace(shV.Cells(11, 4).Value, "  ", " "), "  ", " "), "  ", " "), "; ", ";") & ";"
  vId = Split(shV.Cells(11, 5).Value, ",")
  For Each sCur In vId
    lstSales.AddItem sCur
    iCur = InStr(sTxt, ";" & sCur)
    If iCur > 0 Then lstSales.List(lstSales.ListCount - 1, 1) = Trim(Mid(sTxt, iCur + 3, InStr(iCur + 1, sTxt, ";") - iCur - 3))
  Next sCur
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  If shI.Cells(1, INTM + 1).Value <> "" Then
    chbAll.Enabled = True
    chbAll.Value = True
  Else: chbAll.Enabled = False: End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub cmdOk_Click()
  If lstSales.ListIndex >= 0 Then
    Tag = lstSales.List(lstSales.ListIndex, 0)
    Hide
  End If
End Sub
Attribute VB_Name = "frmDvlpDgn"
Attribute VB_Base = "0{97282D4F-49DB-4022-ACDE-2F7F170AB87D}{25B4CA54-D025-4C0F-BC92-28DABB203640}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'(c)2007 Terekhov Alexey. All rights reserved.
'Phone: +38631334953, Skype:terekhov_alexey
Option Explicit

Private Sub UserForm_Initialize()
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  Sheets(".Design").Activate
  Sheets(".Design").Rows.Hidden = False
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| CP
  If chbPresortOff.Value <> True Then
    chbPresortOff.Value = True
  Else: chbPresortOff_Change: End If
End Sub

Private Sub btnClear_Click()
  If Not fndIsSheet(".Design", ActiveWorkbook) Then
    MsgBox """.Design"" not found.", vbCritical
    Exit Sub
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim iBeg As Long, iEnd As Long
  iBeg = FindDesignStart
  iEnd = FindDesignEnd
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If (iBeg = 0) Or (iEnd = 0) Then Exit Sub
  If iBeg > iEnd Then MsgBox """[*/]..."" before ""[/*]..."".", vbCritical: Exit Sub
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If iBeg + 1 < iEnd Then ActiveWorkbook.Sheets(".Design").Rows(CStr(iBeg + 1) & ":" & CStr(iEnd - 1)).Delete Shift:=xlShiftUp
End Sub

Private Sub btnExport_Click()
  If Not fndIsSheet(".Design", ActiveWorkbook) Then MsgBox """.Design"" not found.", vbCritical: Exit Sub
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
  If lstCP.ListCount = 0 Then Exit Sub
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim shDsgn As Worksheet, iBeg As Long, iEnd As Long, oSearch As Object
  Set shDsgn = ActiveWorkbook.Sheets(".Design")
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Hide
  Application.Calculation = xlCalculationManual
  Application.ScreenUpdating = False
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  btnClear_Click
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  iBeg = FindDesignStart
  iEnd = FindDesignEnd
  If (iEnd = 0) Or (iBeg = 0) Then Exit Sub
  If iBeg > iEnd Then MsgBox """[*/]..."" before ""[/*]..."".", vbCritical: Exit Sub
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Dim vAdr As Variant, sAdr As String, iAdr As Integer
  Dim iCur As Long, sWhat As String, sLst As String
  If chbPresortCG.Value Then sWhat = "[CG]" Else sWhat = "[QG]"
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  sLst = ""
  For iCur = 0 To lstCP.ListCount - 1
    If lstCP.Selected(iCur) Then
      vAdr = Split(lstCP.List(iCur, 1), ",")
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If sLst <> lstCP.List(iCur, 2) Then
        sAdr = ""
        For iAdr = LBound(vAdr) To UBound(vAdr)
          shDsgn.Rows(iEnd).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromRightOrBelow
          shDsgn.Cells(iEnd, CLCM).Value = "[EX]"
          shDsgn.Cells(iEnd, CLID).Value = Mid(vAdr(iAdr), 2, InStr(vAdr(iAdr), "'!r") - 2)
          shDsgn.Cells(iEnd, CLID).Interior.ColorIndex = 36
          shDsgn.Cells(iEnd, CLE4).Value = False
          sAdr = sAdr & ",r" & CStr(iEnd) & "c4"
          iEnd = iEnd + 1
        Next iAdr
        sLst = lstCP.List(iCur, 2)
      Else
        iEnd = iEnd
      End If
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      shDsgn.Rows(iEnd).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromRightOrBelow
      shDsgn.Cells(iEnd, CLCM).FormulaR1C1 = "=if(or(" & Mid(sAdr, 2) & "),""" & Application.Range(Application.ConvertFormula(vAdr(LBound(vAdr)) & "c" & CStr(CLCM), xlR1C1, xlA1)).Value & """,""[RM]"")"
      shDsgn.Cells(iEnd, CLID).Value = Application.Range(Application.ConvertFormula(vAdr(LBound(vAdr)) & "c" & CStr(CLID), xlR1C1, xlA1)).Value
      If chbPresortCG.Value Then
        shDsgn.Cells(iEnd, CLC4).Value = Application.Range(Application.ConvertFormula(vAdr(LBound(vAdr)) & "c" & CStr(CLC4), xlR1C1, xlA1)).Value
        shDsgn.Cells(iEnd, CLC5).Value = Application.Range(Application.ConvertFormula(vAdr(LBound(vAdr)) & "c" & CStr(CLC5), xlR1C1, xlA1)).Value
      End If
      shDsgn.Cells(iEnd, CLC6 + 2).Value = "$$="
      iEnd = iEnd + 1
    End If
  Next iCur
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Application.Calculation = xlCalculationAutomatic
  Application.ScreenUpdating = True
  MsgBox "Successfully exported on "".Design""." & vbLf & "Changes will take effect after rebuild.", vbInformation
  chbPresortOff.Value = True
  Show
End Sub

Private Sub btnSort_Click()
  Dim vCur As Variant, iCP As Long, iCur As Long, iBest As Long
  If lstCP.ListCount > 1 Then
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For iCP = 0 To lstCP.ListCount - 2
      iBest = iCP
      For iCur = iCP + 1 To lstCP.ListCount - 1
        If lstCP.List(iCur, 0) < lstCP.List(iBest, 0) Then iBest = iCur
      Next iCur
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If iBest <> iCP Then SwapStringsCP iCP, iBest
    Next iCP
  End If
End Sub

Private Sub chbPresortQG_Click()
    ReadCPfromCL
    If lstCP.ListCount > 0 Then
      lstCP.SetFocus
      lstCP.ListIndex = 0
    End If
End Sub

Private Sub chbPresortCG_Click()
    ReadCPfromCL
    If lstCP.ListCount > 0 Then
      lstCP.SetFocus
      lstCP.ListIndex = 0
    End If
End Sub

Private Sub chbPresortOff_Change()
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If Not fndIsSheet(".Design", ActiveWorkbook) Then
    If Not chbPresortOff.Value Then MsgBox """.Design"" not found.", vbCritical
    chbPresortOff.Value = True
  End If
  If Not chbPresortOff.Value Then
    cmdAllCP.Enabled = True
    cmdNoneCP.Enabled = True
    lstCP.Enabled = True
    btnSort.Enabled = True
    btnUp.Enabled = True
    btnDown.Enabled = True
    btnExport.Enabled = True
    btnClear.Enabled = True
    ReadCPfromCL
    If lstCP.ListCount > 0 Then
      lstCP.SetFocus
      lstCP.ListIndex = 0
    End If
  Else
    cmdAllCP.Enabled = False
    cmdNoneCP.Enabled = False
    lstCP.Enabled = False
    btnSort.Enabled = False
    btnUp.Enabled = False
    btnDown.Enabled = False
    btnExport.Enabled = False
    btnClear.Enabled = False
    lstCP.Clear
  End If
End Sub

Private Sub cmdAllCP_Click()
  Dim iCP As Long
  For iCP = 0 To lstCP.ListCount - 1
    lstCP.Selected(iCP) = True
  Next iCP
End Sub

Private Sub cmdNoneCP_Click()
  Dim iCP As Long
  For iCP = 0 To lstCP.ListCount - 1
    lstCP.Selected(iCP) = False
  Next iCP
End Sub

Private Sub btnDown_Click()
  If lstCP.ListIndex < lstCP.ListCount - 1 Then
    SwapStringsCP lstCP.ListIndex, lstCP.ListIndex + 1
    lstCP.ListIndex = lstCP.ListIndex + 1
  End If
End Sub

Private Sub btnUp_Click()
  If lstCP.ListIndex > 0 Then
    SwapStringsCP lstCP.ListIndex, lstCP.ListIndex - 1
    lstCP.ListIndex = lstCP.ListIndex - 1
  End If
End Sub

Private Function FindDesignStart() As Long
  FindDesignStart = 0
  If Not fndIsSheet(".Design", ActiveWorkbook) Then Exit Function
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim oSearch As Object, sWhat As String
  If chbPresortCG.Value Then sWhat = "[/*]c" Else sWhat = "[/*]q"
  Set oSearch = ActiveWorkbook.Sheets(".Design").Columns(CLCM).Find(What:=sWhat, LookIn:=xlValues, LookAt:=xlWhole)
  If Not oSearch Is Nothing Then
    FindDesignStart = oSearch.Row
  Else: MsgBox """" & sWhat & """ not found.", vbCritical: End If
End Function

Private Function FindDesignEnd() As Long
  FindDesignEnd = 0
  If Not fndIsSheet(".Design", ActiveWorkbook) Then Exit Function
  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim oSearch As Object, sWhat As String
  If chbPresortCG.Value Then sWhat = "[*/]c" Else sWhat = "[*/]q"
  Set oSearch = ActiveWorkbook.Sheets(".Design").Columns(CLCM).Find(What:=sWhat, LookIn:=xlValues, LookAt:=xlWhole)
  If Not oSearch Is Nothing Then
    FindDesignEnd = oSearch.Row
  Else: MsgBox """" & sWhat & """ not found.", vbCritical: End If
End Function

'read CPs from CLs
Private Sub ReadCPfromCL()
  Dim iM As Long, shCur As Worksheet, iRow As Long
  Dim sCP As String, bCP As Boolean, iCP As Long
  lstCP.Clear
  'read CPs
  On Error GoTo ExitOnError
  For Each shCur In ActiveWorkbook.Sheets
    If Left(shCur.Name, 1) = "." And shCur.Name <> ".Design" Then
      For iRow = 1 To shCur.Cells.SpecialCells(xlCellTypeLastCell).Row
        If (chbPresortCG.Value And Left(shCur.Cells(iRow, CLCM).Value, 4) = "[CG]") Or _
           (chbPresortQG.Value And Left(shCur.Cells(iRow, CLCM).Value, 4) = "[QG]" And _
            shCur.Cells(iRow, CLID).Value <> "GENERAL") Then
          '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
          bCP = True: sCP = shCur.Cells(iRow, CLID).Value
          For iCP = 0 To lstCP.ListCount - 1
            If lstCP.List(iCP) = sCP Then bCP = False: Exit For
          Next iCP
          '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
          If bCP Then
            lstCP.AddItem shCur.Cells(iRow, CLID).Value
            lstCP.List(lstCP.ListCount - 1, 1) = "'" & shCur.Name & "'!r" & CStr(iRow)
            lstCP.List(lstCP.ListCount - 1, 2) = shCur.Name
          ElseIf InStr(lstCP.List(iCP, 1), "'" & shCur.Name & "'!") = 0 Then
            lstCP.List(iCP, 1) = lstCP.List(iCP, 1) & ",'" & shCur.Name & "'!r" & CStr(iRow)
            lstCP.List(iCP, 2) = lstCP.List(iCP, 2) & ", " & shCur.Name
          End If
        End If
      Next iRow
    End If
  Next shCur
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| .Design
  Dim iCur As Long, iBeg As Long, iEnd As Long
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  iCur = 0
  iBeg = FindDesignStart
  iEnd = FindDesignEnd
  If (iBeg < 1) Or (iEnd < 1) Or (lstCP.ListCount = 0) Then Exit Sub
  If iBeg > iEnd Then MsgBox """[*/]..."" before ""[/*]..."".", vbCritical: Exit Sub
  'sort
  Set shCur = ActiveWorkbook.Sheets(".Design")
  For iRow = iBeg + 2 To iEnd - 1
    If (shCur.Cells(iRow, CLCM).FormulaR1C1 Like "*[[]CG[]]*") Or (shCur.Cells(iRow, CLCM).Value Like "*[[]QG[]]*") Then
      If Not IsError(shCur.Cells(iRow, CLID)) Then
        bCP = False: sCP = shCur.Cells(iRow, CLID).Value
        For iCP = 1 To lstCP.ListCount
          If lstCP.List(iCP - 1) = sCP Then bCP = True: Exit For
        Next iCP
        If bCP Then
          SwapStringsCP iFst:=iCur, iSnd:=iCP - 1
          lstCP.Selected(iCur) = True
          iCur = iCur + 1
        End If
      End If
    End If
  Next iRow
ExitOnError:
  'no procedure
End Sub

Private Sub SwapStringsCP(iFst As Long, iSnd As Long)
  Dim vCur As Variant
  If (iFst < 0) Or (iSnd < 0) Then Exit Sub
  If (iFst > lstCP.ListCount - 1) Or (iSnd > lstCP.ListCount - 1) Then Exit Sub
  vCur = lstCP.List(iFst, 0): lstCP.List(iFst, 0) = lstCP.List(iSnd, 0): lstCP.List(iSnd, 0) = vCur
  vCur = lstCP.List(iFst, 1): lstCP.List(iFst, 1) = lstCP.List(iSnd, 1): lstCP.List(iSnd, 1) = vCur
  vCur = lstCP.List(iFst, 2): lstCP.List(iFst, 2) = lstCP.List(iSnd, 2): lstCP.List(iSnd, 2) = vCur
  vCur = lstCP.Selected(iFst): lstCP.Selected(iFst) = lstCP.Selected(iSnd): lstCP.Selected(iSnd) = vCur
End Sub


Attribute VB_Name = "frmToolExtc"
Attribute VB_Base = "0{F00B515B-A0AA-40DF-8182-C4AEEFDD6BCB}{F5502E02-0056-46B9-921E-8BEFB855A876}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'(c)2013 Terekhov Alexey. All rights reserved.
'Phone: +38631334953, Skype:terekhov_alexey
Option Explicit

Public prevCP As String
Dim sAll As String, prevRow As Integer

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub UserForm_Initialize()
  setAllCPs
  prevCP = ""
  prevRow = 0
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd|
Public Sub PrepareAndShow(rngCode As Range)
  If sAll = "" Then setAllCPs
  Me.Caption = rngCode.Value
  lstCP.Clear
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim sCode As String, iPos As Integer, bNew As Boolean
  Dim iTmp As Integer, sTmp As String
  sCode = rngCode.Value
  iPos = InStr(sAll, ";" & escID(sCode, 0) & ":")
  While iPos > 0
    iPos = InStr(iPos, sAll, ":")
    sTmp = Mid(sAll, iPos + 1, InStr(iPos, sAll, ";") - iPos - 1)
    '|fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    bNew = True
    For iTmp = 0 To lstCP.ListCount - 1
      If sTmp = lstCP.List(iTmp) Then bNew = False
    Next iTmp
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    If bNew Then
      lstCP.AddItem sTmp
      If sTmp = prevCP Then lstCP.ListIndex = lstCP.ListCount - 1
    End If
    iPos = InStr(iPos, sAll, ";" & escID(sCode, 0) & ":")
  Wend
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| R
  lstCP.AddItem "R"
  If lstCP.ListIndex < 0 Then lstCP.ListIndex = 0
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If lstCP.ListCount > 2 And rngCode.Row > prevRow + 1 Then
    Application.ScreenUpdating = True
    ActiveWindow.ScrollRow = IIf(rngCode.Row > 10, rngCode.Row - 10, 1)
    rngCode.Select
    Me.Show vbModal
  End If
  prevCP = lstCP.List(lstCP.ListIndex)
  prevRow = rngCode.Row
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
Private Sub setAllCPs()
  Dim shV As Worksheet, shS As Worksheet, iRow As Long
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  sAll = ";"
  Set shV = ThisWorkbook.Sheets(ngcVAR)
  If fndIsSheet(ngcCSI, ThisWorkbook) Then
    Set shS = ThisWorkbook.Sheets(ngcCSI)
  Else: Exit Sub: End If
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
  For iRow = 1 To fndRngLst(shV.Cells(30, 4).Value)
    If Not IsError(shS.Cells(iRow, SPCM).Value) And Not IsError(shS.Cells(iRow, SPCC).Value) And _
       Not IsError(shS.Cells(iRow, SPID).Value) And Not IsError(shS.Cells(iRow, SPTM).Value) Then
      If Left(shS.Cells(iRow, SPCM).Value, 1) = "F" Then
        sAll = sAll & escID(shS.Cells(iRow, SPCC).Value, 0) & ":" & escID(shS.Cells(iRow, SPID).Value, 0) & ";"
      End If
    End If
  Next iRow
End Sub

'|fffd||fffd||fffd||fffd||fffd|
Private Sub cmdOk_Click()
  prevCP = lstCP.List(lstCP.ListIndex)
  Hide
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub btnCancel_Click()
  prevCP = ""
  Hide
End Sub
Attribute VB_Name = "frmToolExtr"
Attribute VB_Base = "0{C861F10E-B86C-4ED1-B335-C720087D0338}{73959477-3BAC-4F49-A7D7-1F37BAF4BA05}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'(c)2009 Terekhov Alexey. All rights reserved.
'Phone: +38631334953, Skype:terekhov_alexey
Option Explicit

Private Sub UserForm_Initialize()
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  cmbCodes.Clear: cmbTexts.Clear: cmbQty.Clear
  cmbTexts.AddItem "(none)"
  Dim iCur As Integer
  For iCur = 65 To 90
    cmbCodes.AddItem Chr(iCur) & " column"
    cmbTexts.AddItem Chr(iCur) & " column"
    cmbQty.AddItem Chr(iCur) & " column"
  Next iCur
  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  cmbCodes.ListIndex = 1
  cmbTexts.ListIndex = 3
  cmbQty.ListIndex = 3
End Sub

'|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub btnRefresh_Click()
  Dim rng As Range, fnd As Boolean, adr As String
  Dim iRow As Long, iCol As Long
  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  fnd = False: adr = "": iRow = 0: iCol = 0
  Set rng = Cells.Find(What:="?????????", LookIn:=xlValues, LookAt:=xlWhole)
  While Not rng Is Nothing
    If adr = "" Then adr = rng.Address
    If rng.Value Like "???####??" Then
      cmbCodes.ListIndex = rng.Column - 1
      iRow = rng.Row: iCol = rng.Column
      fnd = True
    End If
    Set rng = Cells.FindNext(rng)
    If fnd Or adr = rng.Address Then Set rng = Nothing
  Wend
  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If fnd Then
    cmbTexts.ListIndex = iCol + 1
    If iCol > 1 Then If Len(Cells(iRow, iCol - 1).Value) > Len(Cells(iRow, iCol + 1).Value) Then cmbTexts.ListIndex = iCol - 1
  End If
  '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|-|fffd||fffd|
  If fnd Then
    iCol = iCol + 1
    While Not IsNumeric(Cells(iRow, iCol)): iCol = iCol + 1: Wend
    cmbQty.ListIndex = iCol - 1
  End If
End Sub

'|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
Private Sub cmdStart_Click()
  If ActiveWorkbook Is Nothing Then Exit Sub
  If chbSelection.Value And Selection.Areas.Count > 1 Then
    MsgBox "Selection is not valid!", vbExclamation
    Exit Sub
  End If
  Hide
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Dim xmlFile As Object, xmlOffr As Object, xmlSpec As Object, xmlCPos As Object, xmlElem As Object
  Set xmlFile = CreateObject("MSXML2.DOMDocument")
  xmlFile.setProperty "SelectionLanguage", "XPath"
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim scSpec As String, scObject As String
  scSpec = txtID.Text
  scObject = txtObject.Text
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Set xmlOffr = xmlFile.appendChild(xmlFile.createElement("OrderIntakeData")).appendChild(xmlFile.createElement("T_AU00"))
  xmlOffr.setAttribute "STPON", scSpec
  xmlOffr.setAttribute "Ime", scObject
  xmlOffr.setAttribute "Jezik", "E1"
  xmlOffr.setAttribute "PogNar", "False"
  xmlOffr.setAttribute "VrednostiOK", "False"
  xmlOffr.setAttribute "SpecOK", "False"
  xmlOffr.setAttribute "SupplyAgree", "False"
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Set xmlSpec = xmlOffr.appendChild(xmlFile.createElement("T_AU05"))
  xmlSpec.setAttribute "SPEC", scSpec & "-F"
  xmlSpec.setAttribute "ImeSpecifikacije", scObject
  xmlSpec.setAttribute "SLOIme", scObject
  'xmlSpec.setAttribute "PORTI", ""
  xmlSpec.setAttribute "VPonudbi", "True"
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Set xmlElem = xmlSpec.appendChild(xmlFile.createElement("T_AU06"))
  ngcXmlTD oXML:=xmlElem, iVRed:=98, sVrednost:="MANUAL", sVPon:="False", sTehPod:="CONFVERS"
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Set xmlElem = xmlSpec.appendChild(xmlFile.createElement("T_AU06"))
  ngcXmlTD oXML:=xmlElem, iVRed:=99, sVrednost:="FUNCTIONAL", sVPon:="False", sTehPod:="SPEC-TYPE"
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  Set xmlElem = xmlSpec.appendChild(xmlFile.createElement("T_AU06"))
  ngcXmlTD oXML:=xmlElem, iVRed:=101, sVrednost:=Format(Date, "dd.mm.yyyy"), sVPon:="False", sTehPod:="VELJAVNO"
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Set xmlElem = xmlSpec.appendChild(xmlFile.createElement("T_AU06"))
  ngcXmlTD oXML:=xmlElem, iVRed:=102, sVrednost:=ngcInfo("user"), sVPon:="False", sTehPod:="IZDELAL"
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
  Dim vCod As Variant, sCod As String, sTxt As String, sQty As String
  Dim iCod As Integer, iQty As Integer, iCnt As Integer, iRow As Long
  Dim vChr As Variant, vRpl As Variant, iCps As Integer
  Dim iTmp As Integer, sTmp As String
  If chbExtract.Value Then
    vCod = Split("SBB;SSB;CBE;CBF;601;631;675;689;AEU;ETN;ITG;IUT;KSS;MAN;MMS;MON;NMA;PIN;PNU;PRJ;PSE;PZI;SWL;UTA;VIN;WSE;ZXS", ";")
    vChr = Split("1040;1042;1045;1050;1052;1053;1054;1056;1057;1058;1061", ";")
    vRpl = Split("0065;0066;0069;0075;0077;0072;0079;0080;0067;0084;0088", ";")
  End If
  iCod = cmbCodes.ListIndex + 1: iQty = cmbQty.ListIndex + 1
  iCnt = 0: sTxt = "": sCod = "": iCps = 0
  For iRow = IIf(chbSelection.Value, Selection.Row, 1) To IIf(chbSelection.Value, Selection.Row + Selection.Rows.Count - 1, Cells.SpecialCells(xlCellTypeLastCell).Row)
    sQty = Cells(iRow, iQty).Value
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    sCod = Cells(iRow, iCod).Value
    If chbExtract.Value Then
      sTmp = "": sCod = UCase(escID(sCod, 0))
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
      For iTmp = LBound(vChr) To UBound(vChr)
        sCod = Replace(sCod, ChrW(Val(vChr(iTmp))), ChrW(Val(vRpl(iTmp))))
      Next iTmp
      '|fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      For iTmp = LBound(vCod) To UBound(vCod)
        If sCod Like ("*" & vCod(iTmp) & "####??*") Then sTmp = vCod(iTmp): Exit For
      Next iTmp
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      If sTmp <> "" Then
        sCod = Mid(sCod, InStr(sCod, sTmp), 9)
      ElseIf Len(sCod) <> 9 Then
        sCod = ""
      End If
    End If
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    If cmbTexts.ListIndex > 0 Then sTxt = Cells(iRow, cmbTexts.ListIndex).Value
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
    If sCod <> "" And InStr(sCod, " ") < 1 And (cmbTexts.ListIndex = 0 Or sTxt <> "") And Application.WorksheetFunction.IsNumber(Cells(iRow, iQty)) Then
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      frmToolExtc.PrepareAndShow rngCode:=Cells(iRow, iCod)
      If frmToolExtc.prevCP = "" Then GoTo frmToolExtrExit
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Set xmlCPos = xmlSpec.SelectNodes("T_CSI_PogodbeneTocke [@SifPogT='" & frmToolExtc.prevCP & "']")
      If xmlCPos.Length = 0 Then
        iCps = iCps + 1
        Set xmlCPos = xmlSpec.appendChild(xmlFile.createElement("T_CSI_PogodbeneTocke"))
        ngcXmlCG oXML:=xmlCPos, iVRed:=iCps, sCenik:="", sSifPogT:=frmToolExtc.prevCP
      Else: Set xmlCPos = xmlCPos.Item(0): End If
      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
      Set xmlElem = xmlCPos.appendChild(xmlFile.createElement("T_CSI_Specs"))
      ngcXmlCD oXML:=xmlElem, sKoda:=sCod, sCenik:="", dKol:=Val(sQty), sCENkoda:="", dVrednost:=0, sTekst:=sTxt
      Cells(iRow, iCod).Interior.ColorIndex = 36 'Code
      Cells(iRow, iQty).Interior.ColorIndex = 34 'Qty
    End If
  Next iRow
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  Set xmlElem = xmlSpec.SelectNodes("T_CSI_PogodbeneTocke/T_CSI_Specs")
  If xmlElem.Length > 0 Then
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    Dim vPath As Variant, sName As String
    vPath = Application.GetSaveAsFilename(txtID.Text & ".xml", "XML specification files,*.xml")
    If vPath <> False Then
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
      sName = vPath
      xmlFile.LoadXML Replace(xmlFile.xml, "><", ">" & vbCrLf & "<")
      xmlFile.Save sName
    End If
  Else: MsgBox "Functional specification is empty!", vbExclamation: End If
frmToolExtrExit:
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Unload frmToolExtc
  Unload Me
End Sub
Attribute VB_Name = "frmToolFuns"
Attribute VB_Base = "0{C9AF0D89-D60D-47BA-BF99-A89D9EC0E903}{CAC8C2CC-28C3-4EDA-9FE6-93F6323D57E9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'(c)2011 Terekhov Alexey. All rights reserved.
'Phone: +38631334953, Skype:terekhov_alexey
Option Explicit

Public frmWork As String

'frmFst |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Combo
'frmSnd |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| Combo
'frmTrd |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| Combo (|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| ';' |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|)
Public Sub PrepareAndShow(frmCaption As String, frmFst As String, frmSnd As String, Optional frmTrd As String = "", Optional frmOvr As String = "")
  Dim sDir As String
  sDir = ThisWorkbook.Sheets(ngcVAR).Cells(2, 8).Value: If Right(sDir, 1) <> "\" Then sDir = sDir & "\"
  cmdStart.Enabled = (Dir(sDir & "SAPcodes_cache.ngc") <> "")
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Caption = frmCaption
  lblFst.Caption = frmFst
  lblSnd.Caption = frmSnd
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  cmbFst.Clear: cmbSnd.Clear
  cmbFst.AddItem "Selection"
  Dim vCur As Variant, iCur As Integer
  For iCur = 1 To 26
    cmbFst.AddItem Chr(64 + iCur) & " column (" & CStr(iCur) & "C)"
    cmbSnd.AddItem Chr(64 + iCur) & " column (" & CStr(iCur) & "C)"
  Next iCur
  cmbFst.ListIndex = 0
  cmbSnd.ListIndex = 3
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
  Me.Height = IIf((frmOvr <> "") And (frmTrd <> ""), 132, 96)
  cmdStart.Top = IIf((frmOvr <> "") And (frmTrd <> ""), 78, 42)
  cmdStart.Left = IIf((frmOvr <> "") Xor (frmTrd <> ""), 96, 54)
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| frmOvr
  If frmOvr <> "" Then
    chbOvr.Visible = True
    chbOvr.Caption = frmOvr
    chbOvr.Top = IIf(frmTrd <> "", 54, 46)
  Else: chbOvr.Visible = False: End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If frmTrd <> "" Then
    vCur = Split(frmTrd, ";")
    lblAdd.Visible = True: cmbAdd.Visible = True
    lblAdd.Caption = vCur(LBound(vCur))
    cmbAdd.Clear
    For iCur = LBound(vCur) + 1 To UBound(vCur)
      cmbAdd.AddItem vCur(iCur)
    Next iCur
    cmbAdd.ListIndex = 0
    cmbAdd.ListWidth = IIf(frmWork = "Price", 200, 0)
  Else: lblAdd.Visible = False: cmbAdd.Visible = False: End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Show vbModeless
End Sub

Private Sub cmdStart_Click()
  If ActiveWorkbook Is Nothing Then Exit Sub
  Hide
  Application.StatusBar = "Loading cache file..."
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim xmlFile As Object, xmlNode As Object, xmlAttr As Object, sDir As String
  sDir = ThisWorkbook.Sheets(ngcVAR).Cells(2, 8).Value: If Right(sDir, 1) <> "\" Then sDir = sDir & "\"
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim sCode As String, iRow As Long, iCol As Long, sDst As String
  Dim sTmp As String, iTmp As Integer
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Set xmlFile = CreateObject("MSXML2.DOMDocument")
  If frmWork <> "Price" Then
    xmlFile.Load sDir & "SAPcodes_cache.ngc"
  Else: xmlFile.Load sDir & cmbAdd.Value: End If
  xmlFile.LoadXML Replace(Replace(xmlFile.xml, " xmlns=""http://www.iskratel.si/xmlnamespaces""", ""), " xmlns='http://www.iskratel.si/xmlnamespaces'", "")
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  iCol = IIf(cmbFst.ListIndex > 0, cmbFst.ListIndex, Selection.Column)
  For iRow = IIf(cmbFst.ListIndex > 0, 1, Selection.Row) To IIf(cmbFst.ListIndex > 0, Cells.SpecialCells(xlCellTypeLastCell).Row, Selection.Rows(Selection.Rows.Count).Row)
    Application.StatusBar = "Working with " & CStr(iRow) & " row..."
    If Not IsError(Cells(iRow, iCol).Value) Then
      sDst = "": sCode = escID(Cells(iRow, iCol).Value, 1, Nothing, "")
      If Not IsError(Cells(iRow, cmbSnd.ListIndex + 1).Value) Then sDst = Cells(iRow, cmbSnd.ListIndex + 1).Value
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      If sCode <> "" And (chbOvr.Value Or sDst = "") Then
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
        If frmWork <> "Price" Then
          Set xmlNode = xmlFile.SelectSingleNode("/IT_PROD_GRADNIKI/item[MATNR='" & sCode & "' or MATNR='" & Left(sCode, 3) & "####" & Right(sCode, 2) & "']")
        Else: Set xmlNode = xmlFile.SelectSingleNode("/PriceList/T_GD_TP04/*[(@KODA='" & sCode & "')or(@KABEL='" & Left(sCode, 3) & "####" & Right(sCode, 2) & "')]"): End If
        '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
        If Not xmlNode Is Nothing Then
          Select Case frmWork
          Case "Text"
            iTmp = 1: sTmp = ""
            While (iTmp < Len(cmbAdd.Value)) And ((sTmp = "" And Mid(cmbAdd.Value, iTmp, 1) <> "+") Or Mid(cmbAdd.Value, iTmp, 1) = "+")
              Select Case Mid(cmbAdd.Value, iTmp + 1, 2)
              Case "R1": sTmp = IIf(sTmp <> "", sTmp & vbLf, "") & xmlNode.SelectSingleNode("TEXT_RU").Text
              Case "E1": sTmp = IIf(sTmp <> "", sTmp & vbLf, "") & xmlNode.SelectSingleNode("TEXT_EN").Text
              Case "L1": sTmp = IIf(sTmp <> "", sTmp & vbLf, "") & xmlNode.SelectSingleNode("TEXT_SL").Text
              Case "U1": sTmp = IIf(sTmp <> "", sTmp & vbLf, "") & xmlNode.SelectSingleNode("TEXT_UK").Text
              Case "D1": sTmp = IIf(sTmp <> "", sTmp & vbLf, "") & xmlNode.SelectSingleNode("TEXT_DE").Text
              End Select
              iTmp = iTmp + 3
            Wend
            Cells(iRow, cmbSnd.ListIndex + 1).Value = sTmp
          Case "Price"
            If Not IsNull(xmlNode.getAttribute("CENA")) Then
              If xmlNode.BaseName = "T_TP_CENIKIKABEL" Then
                Cells(iRow, cmbSnd.ListIndex + 1).FormulaR1C1 = "=" & xmlNode.getAttribute("KonCena") & "+" & xmlNode.getAttribute("CENA") & "*mid(rc" & CStr(iCol) & ",4,3)/10^(3-mid(rc" & CStr(iCol) & ",7,1))"
              Else: Cells(iRow, cmbSnd.ListIndex + 1).Value = xmlNode.getAttribute("CENA"): End If
            End If
          Case "ABC"
            Cells(iRow, cmbSnd.ListIndex + 1).Value = xmlNode.SelectSingleNode("MAABC").Text
          Case "Status"
            Cells(iRow, cmbSnd.ListIndex + 1).Value = xmlNode.SelectSingleNode("VALID").Text & " (" & xmlNode.SelectSingleNode("MSTAE").Text & ")"
            If LCase(xmlNode.SelectSingleNode("MSTAE").Text) = "b" Or LCase(xmlNode.SelectSingleNode("VALID").Text) = "no" Then Cells(iRow, cmbSnd.ListIndex + 1).Interior.Color = 255
            If LCase(xmlNode.SelectSingleNode("MSTAE").Text) = "y" And LCase(xmlNode.SelectSingleNode("VALID").Text) = "yes" Then Cells(iRow, cmbSnd.ListIndex + 1).Interior.Color = 8420607
            If LCase(xmlNode.SelectSingleNode("MSTAE").Text) = "s" And LCase(xmlNode.SelectSingleNode("VALID").Text) = "yes" Then Cells(iRow, cmbSnd.ListIndex + 1).Interior.Color = 13421823
            If LCase(xmlNode.SelectSingleNode("MSTAE").Text) = "8" And LCase(xmlNode.SelectSingleNode("VALID").Text) = "yes" Then Cells(iRow, cmbSnd.ListIndex + 1).Interior.Color = 10855845
          Case "Weight"
            Cells(iRow, cmbSnd.ListIndex + 1).Value = xmlNode.SelectSingleNode("NTGEW").Text & " " & xmlNode.SelectSingleNode("GEWEI").Text
          Case "Volume"
            Cells(iRow, cmbSnd.ListIndex + 1).Value = xmlNode.SelectSingleNode("VOLUM").Text & " " & xmlNode.SelectSingleNode("VOLEH").Text
          Case "Size"
            Cells(iRow, cmbSnd.ListIndex + 1).Value = xmlNode.SelectSingleNode("GROES").Text
          End Select
        End If
      End If
    End If
  Next iRow
  Set xmlAttr = Nothing
  Set xmlNode = Nothing
  Set xmlFile = Nothing
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Application.StatusBar = False
  Application.Calculation = xlCalculationAutomatic
  Application.ScreenUpdating = True
  Unload Me
End Sub


Attribute VB_Name = "frmToolInfo"
Attribute VB_Base = "0{FF7D8BFC-5910-4ADC-90EA-D4ACC69C3BEC}{0705C320-FDFB-41F7-B0F6-B809EE52D6E9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'(c)2008 Terekhov Alexey. All rights reserved.
'Phone: +38631334953, Skype:terekhov_alexey
Option Explicit

Dim sDir As String

Sub PrepareAndShow(sCode As String)
  sDir = Sheets(ngcVAR).Cells(2, 8).Value: If Right(sDir, 1) <> "\" Then sDir = sDir & "\"
  If Dir(sDir, vbDirectory) <> "." Then MsgBox sDir & " not found!", vbCritical: Unload Me: Exit Sub
  Caption = "Code informator: " & sCode
  txtFind.Value = sCode
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  ReadFiles sCode:=sCode, bPrice:=True
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  Show
End Sub

Sub ReadFiles(sCode As String, bPrice As Boolean)
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Dim sht As Worksheet
  Set sht = ActiveWorkbook.ActiveSheet
  lstInfo.Clear
  txtInfo.Value = ""
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim xmlFile As Object, strFile As String, xmlNode As Object, xmlAttr As Object
  Set xmlFile = CreateObject("MSXML2.DOMDocument")
  Dim fso As Object, fFile As Object, sFile As String
  Set fso = CreateObject("Scripting.FileSystemObject")
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim sStr As String, iTmp As Long, bHdr As Boolean
  sFile = Dir(sDir, vbDirectory)
  Do While sFile <> ""
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    bHdr = True
    If (sFile = ".") Or (sFile = "..") Or (sFile <> escID(sFile, 2, Nothing, "")) Then
      '|fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    ElseIf (GetAttr(sDir & sFile) And vbDirectory) <> vbDirectory Then
      If bPrice And Right(sFile, 4) = ".csp" Then
        Set fFile = fso.OpenTextFile(sDir & sFile, , , 0)
        sStr = fFile.ReadLine
        If Left(sStr, 1) = Chr(255) Then
          fFile.Close
          Set fFile = fso.OpenTextFile(sDir & sFile, , , -1)
          sStr = fFile.ReadLine
        End If
        If Left(sStr, 10) = "##TPVALUTA" Then
          strFile = fFile.ReadAll: fFile.Close
          '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
          iTmp = InStr(strFile, vbLf & sCode & ";")
          If sStr <> "" Then
            If iTmp = 0 Then iTmp = InStr(strFile, vbLf & Left(sCode, 3) & "####" & Right(sCode, 2) & ";")
            If iTmp > 0 Then
              iTmp = InStr(iTmp, strFile, ";")
              sStr = Mid(strFile, iTmp + 1, IIf(InStr(iTmp, strFile, vbCrLf) > 0, InStr(iTmp, strFile, vbCrLf), Len(strFile) + 1) - iTmp - 1)
              If Len(sStr) = 0 Then sStr = "0"
              iTmp = InStr(sStr, ";")
              If iTmp > 0 Then
                lstInfo.AddItem Format(Val(Left(sStr, iTmp - 1)), "#,##0.00")
                lstInfo.List(lstInfo.ListCount - 1, 1) = Format(Val(Mid(sStr, iTmp + 1)), "#,##0.00")
              Else: lstInfo.AddItem Format(Val(sStr), "#,##0.00"): End If
              lstInfo.List(lstInfo.ListCount - 1, 2) = Left(sFile, Len(sFile) - 4)
            End If
          End If
        Else: fFile.Close: End If
      ElseIf bPrice And Right(sFile, 4) = ".xml" Then
        xmlFile.Load sDir & sFile
        xmlFile.LoadXML Replace(Replace(xmlFile.xml, " xmlns=""http://www.iskratel.si/xmlnamespaces""", ""), " xmlns='http://www.iskratel.si/xmlnamespaces'", "")
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
        Set xmlNode = xmlFile.SelectSingleNode("/PriceList/T_GD_TP04/*[@KODA='" & sCode & "' or @KABEL='" & Left(sCode, 3) & "####" & Right(sCode, 2) & "']")
        If Not xmlNode Is Nothing Then
          If xmlNode.BaseName = "T_TP_CENIKIKABEL" Then
            lstInfo.AddItem Format(Val(xmlNode.getAttribute("CENA")), "#,##0.00")
            lstInfo.List(lstInfo.ListCount - 1, 1) = Format(Val(xmlNode.getAttribute("KonCena")), "#,##0.00")
          Else: lstInfo.AddItem Format(Val(xmlNode.getAttribute("CENA")), "#,##0.00"): End If
          lstInfo.List(lstInfo.ListCount - 1, 2) = xmlFile.FirstChild.FirstChild.getAttribute("Opis")
        End If
      ElseIf (Not bPrice) And Right(sFile, 4) = ".ngc" Then
        xmlFile.Load sDir & sFile
        xmlFile.LoadXML Replace(Replace(xmlFile.xml, " xmlns=""http://www.iskratel.si/xmlnamespaces""", ""), " xmlns='http://www.iskratel.si/xmlnamespaces'", "")
        '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
        If xmlFile.ChildNodes.Length > 0 Then
          If xmlFile.FirstChild.BaseName = "IT_PROD_GRADNIKI" Then
            Set xmlNode = xmlFile.SelectSingleNode("/IT_PROD_GRADNIKI/item[MATNR='" & sCode & "' or MATNR='" & Left(sCode, 3) & "####" & Right(sCode, 2) & "']")
            If Not xmlNode Is Nothing Then
              If bHdr Then txtInfo.Value = IIf(txtInfo.Value = "", "", txtInfo.Value & vbCrLf) & sFile & vbCrLf: bHdr = False
              For Each xmlAttr In xmlNode.ChildNodes
                txtInfo.Value = txtInfo.Value & "  " & xmlAttr.nodeName & ": " & xmlAttr.Text & vbCrLf
              Next xmlAttr
            End If
          ElseIf xmlFile.FirstChild.BaseName = "Texts" Then
            Set xmlNode = xmlFile.SelectSingleNode("/Texts/T_GD_TL90[@Koda='" & sCode & "' or @Koda='" & Left(sCode, 3) & "####" & Right(sCode, 2) & "']")
            If Not xmlNode Is Nothing Then
              If bHdr Then txtInfo.Value = IIf(txtInfo.Value = "", "", txtInfo.Value & vbCrLf) & sFile & vbCrLf: bHdr = False
              For Each xmlAttr In xmlNode.Attributes
                txtInfo.Value = txtInfo.Value & "  " & xmlAttr.nodeName & ": " & xmlAttr.Text & vbCrLf
              Next xmlAttr
              For Each xmlAttr In xmlNode.ChildNodes
                txtInfo.Value = txtInfo.Value & "  " & xmlAttr.nodeName & " " & xmlAttr.Attributes(0).Value & ": " & xmlAttr.Text & vbCrLf
              Next xmlAttr
            End If
          End If
        End If
      End If
    End If
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|.|fffd||fffd||fffd||fffd|
    sFile = Dir
  Loop
End Sub


Private Sub btnFind_Click()
  Caption = "Code informator: " & txtFind.Value
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If optPricelists.Value Then
    optPricelists_Click
  ElseIf optTexts.Value Then
    optTexts_Click
  ElseIf optOffitPrice.Value Then
    optOffitPrice_Click
  ElseIf optOffitSpecs.Value Then
    optOffitSpecs_Click
  ElseIf optOffitDatas.Value Then
    optOffitSpecs_Click
  End If
End Sub

Private Sub optPricelists_Click()
  txtInfo.Visible = False
  lstInfo.Visible = True
  ReadFiles sCode:=txtFind.Value, bPrice:=True
End Sub

Private Sub optTexts_Click()
  lstInfo.Visible = False
  txtInfo.Visible = True
  ReadFiles sCode:=txtFind.Value, bPrice:=False
End Sub

Private Sub optOffitPrice_Click()
  'not yet
End Sub

Private Sub optOffitSpecs_Click()
  'not yet
End Sub

Private Sub optOffitDatas_Click()
  'not yet
End Sub

Private Sub btnClose_Click()
  Hide
  Unload Me
End Sub
Attribute VB_Name = "frmToolMath"
Attribute VB_Base = "0{28D5BB0F-7E66-4818-956C-16E575A0A9C5}{9E5D9185-7012-4295-BCC3-4B128668289E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'(c)2011 Terekhov Alexey. All rights reserved.
'Phone: +38631334953, Skype:terekhov_alexey
Option Explicit

Private Sub UserForm_Initialize()
  Dim iCur As Integer, vCur As Variant
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  For iCur = 1 To 26
    cmbColumn.AddItem Chr(64 + iCur) & " column (" & CStr(iCur) & "C)"
  Next iCur
  cmbColumn.ListIndex = 0
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  vCur = Array("1000", "100", "10", "1", "0.1", "0.01", "0.001")
  For iCur = LBound(vCur) To UBound(vCur)
    cmbRound.AddItem vCur(iCur)
  Next iCur
  cmbRound.ListIndex = 5
End Sub

Private Sub txtFactor_Change()
  Dim sNum As String
  sNum = txtFactor.Text
  If InStr(sNum, ".") <> InStrRev(sNum, ".") Then
    sNum = Left(sNum, Len(sNum) - 1)
  ElseIf Right(sNum, 1) <> "." And Right(sNum, 1) <> "0" Then
    sNum = str(Val(sNum))
  End If
  If Left(Trim(sNum), 1) = "." Then sNum = "0" & Trim(sNum)
  If txtFactor.Text <> sNum Then txtFactor.Text = sNum
End Sub

Private Sub cmdStart_Click()
  If ActiveWorkbook Is Nothing Then Exit Sub
  Hide
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationManual
  Dim iRow As Integer, iCur As Integer, iBeg As Integer, iEnd As Integer
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  If chbWholeBook.Value Then
    iBeg = 1: iEnd = ActiveWorkbook.Sheets.Count
  Else: iBeg = ActiveSheet.Index: iEnd = ActiveSheet.Index: End If
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
  For iCur = iBeg To iEnd
    For iRow = 1 To Sheets(iCur).Cells.SpecialCells(xlCellTypeLastCell).Row
      If (Not chbIgnore.Value Or Not Sheets(iCur).Cells(iRow, cmbColumn.ListIndex + 1).HasFormula) And _
         Application.WorksheetFunction.IsNumber(Sheets(iCur).Cells(iRow, cmbColumn.ListIndex + 1).Value) Then
        Sheets(iCur).Cells(iRow, cmbColumn.ListIndex + 1).Value = Application.WorksheetFunction.Round(Val(txtFactor.Text) * Sheets(iCur).Cells(iRow, cmbColumn.ListIndex + 1).Value, cmbRound.ListIndex - 3)
        Sheets(iCur).Cells(iRow, cmbColumn.ListIndex + 1).Interior.ColorIndex = 36
      End If
    Next iRow
  Next iCur
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Application.Calculation = xlCalculationAutomatic
  Application.ScreenUpdating = True
  Unload Me
End Sub

Attribute VB_Name = "ngcDvlpAbt"
Attribute VB_Base = "0{09F842EA-D92A-4FEF-A649-5A620E3BB0B6}{10EC5144-4297-4554-B3C7-A53096CC6009}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'(c)2011 Terekhov Alexey. All rights reserved.
'Phone: +38631334953, Skype:terekhov_alexey
Option Explicit

Private Sub UserForm_Initialize()
  txtContact.Caption = "Skype: terekhov_alexey" & vbCrLf & "E-Mail: city@pisem.net" & vbCrLf & "Phone: +386 (31) 334 953"
  txtVersion.Caption = "Version: " & ngcVER & vbTab & "Release: " & ngcDAT
End Sub

Private Sub btnClose_Click()
  Unload Me
End Sub

Private Sub cmdCpx_Click()
  On Error GoTo ngcCountCntError
  Dim shtCur As Worksheet, rngFnd As Range
  Dim dCnt(4) As Long, sAdr As String
  lblCpx.Caption = "Calculating... Please wait..."
  DoEvents
  For Each shtCur In Sheets
    Set rngFnd = shtCur.Cells.Find(What:="*", After:=shtCur.Cells(1, 1), LookIn:=xlFormulas, LookAt:=xlPart)
    If Not rngFnd Is Nothing Then
      sAdr = rngFnd.Address
      Do
        If Application.WorksheetFunction.IsErr(rngFnd) Then
          dCnt(4) = dCnt(4) - IsError(rngFnd)
        ElseIf rngFnd.HasFormula = True Then
          dCnt(0) = dCnt(0) + Len(rngFnd.Formula) - 1
          dCnt(1) = dCnt(1) + 1
        ElseIf Application.WorksheetFunction.IsNumber(rngFnd) Then
          dCnt(2) = dCnt(2) + 1
        ElseIf Len(Trim(rngFnd)) > 0 Then
          dCnt(3) = dCnt(3) + 1
        End If
        Set rngFnd = shtCur.Cells.FindNext(rngFnd)
        If rngFnd.Address = sAdr Then Set rngFnd = Nothing
      Loop While Not rngFnd Is Nothing
    End If
  Next shtCur
  lblCpx.Caption = dCnt(1) & " formulas (" & dCnt(0) & " symbols), " & dCnt(2) & " values, " & dCnt(3) & " texts, " & dCnt(4) & " errors"
ngcCountCntError:
  If Err.Number <> 0 Then lblCpx.Caption = "An error occur during counting..."
End Sub

Attribute VB_Name = "ngcDvlpFnd"
Attribute VB_Base = "0{C99722ED-5DE9-4093-89C2-AE32409AE0EB}{8AAA81B6-E49A-4D2F-91D7-2B83B00230E3}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'(c)2008 Terekhov Alexey. All rights reserved.
'Phone: +38631334953, Skype:terekhov_alexey
Option Explicit

Private Sub cmdReplace_Click()
  If txtWhat.Text = "" Or txtWith.Text = "" Or txtWhat.Text <> escID(txtWhat.Text, 0, Nothing, "") Or txtWith.Text <> escID(txtWith.Text, 0, Nothing, "") Then
    Hide
    MsgBox "Not allowed replacement!", vbExclamation
    Show
    Exit Sub
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Hide
  Dim sh As Worksheet, rng As Range, adr As String, msg As String, cnt As Long
  cnt = 0: msg = ""
  For Each sh In Sheets
    If Left(sh.Name, 1) = "." Then
      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd|
      Cells.Replace What:="|fffd||fffd|" & txtWhat.Text, Replacement:="|fffd||fffd|" & txtWith.Text, LookAt:=xlWhole, MatchCase:=True
      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
      Set rng = Columns(CLID).EntireColumn.Find(What:=txtWhat.Text, LookIn:=xlValues, LookAt:=xlWhole)
      If Not rng Is Nothing Then adr = rng.Address
      While Not rng Is Nothing
        If rng.Offset(, CLCM - rng.Column).Value = "[CN]" Or _
           rng.Offset(, CLCM - rng.Column).Value Like "[[]Q[SABLR][]]" Or _
           rng.Offset(, CLCM - rng.Column).Value Like "[[]T[ABL][]]" Then
          rng.Value = txtWith.Text
          cnt = cnt + 1
        End If
        Set rng = Columns(CLID).EntireColumn.FindNext(rng)
        If rng.Address = adr Then Set rng = Nothing
      Wend
    End If
  Next sh
  MsgBox IIf(cnt > 0, "No such ID was found.", CStr(cnt) & " replacements was made."), vbInformation
  Show
End Sub

Private Sub cmdClose_Click()
  Unload Me
End Sub
Attribute VB_Name = "ngcDvlpImp"
Attribute VB_Base = "0{65041851-00BB-4100-BEF9-8F224F567BBE}{6F5AE641-2B6D-4B28-9034-795B3341841B}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'(c)2010 Terekhov Alexey. All rights reserved.
'Phone: +38631334953, Skype:terekhov_alexey
Option Explicit

Private Sub UserForm_Initialize()
  optWbk.Value = True
  LstRefresh
End Sub

Private Sub optSht_Click()
  LstRefresh
End Sub

Private Sub optWbk_Click()
  LstRefresh
End Sub

Private Sub btnAdd_Click()
  Dim wbk As Workbook, vTmp As Variant
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Hide
  Set wbk = ActiveWorkbook
  Application.EnableEvents = True
  Application.ScreenUpdating = False
  Application.Calculation = xlCalculationAutomatic
  vTmp = Application.Dialogs(xlDialogOpen).Show(, False, False)
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If vTmp = True Then
    While Application.CalculationState <> xlDone: DoEvents: Wend
    wbk.Activate
    LstRefresh
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.ScreenUpdating = True
  Show
End Sub

Private Sub LstRefresh()
  Dim wbk As Workbook, sht As Worksheet
  lst.Clear
  For Each wbk In Workbooks
    If optWbk.Value And wbk.Name <> ActiveWorkbook.Name Then
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
      lst.MultiSelect = fmMultiSelectSingle
      lst.ColumnWidths = ""
      lst.ColumnCount = 1
      lst.AddItem wbk.Name
    ElseIf wbk.Name <> ActiveWorkbook.Name Then
      '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      lst.MultiSelect = fmMultiSelectMulti
      lst.ColumnCount = 2
      lst.ColumnWidths = "150pt;40pt"
      '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
      For Each sht In wbk.Sheets
        If Left(sht.Name, 1) = "." Then
          lst.AddItem wbk.Name
          lst.List(lst.ListCount - 1, 1) = sht.Name
        End If
      Next sht
    End If
  Next wbk
End Sub

'import configurator sheets
Sub btnImport_Click()
  If lst.ListCount < 1 Or lst.ListIndex < 0 Then Exit Sub
  If chbClr.Value Then If MsgBox("All current modules will be deleted." & vbCrLf & "Do you want to continue?", vbQuestion + vbYesNoCancel) <> vbYes Then Exit Sub
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim wbkConf As Workbook, wbk As Workbook, sht As Object
  Set wbkConf = ActiveWorkbook
  Dim bRpt As Boolean, bImp As Boolean, iSht As Long
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  On Error GoTo ngcImportError
  Hide
  ngcClear bInt:=True '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If chbClr.Value Then
    Application.DisplayAlerts = False
    For Each sht In wbkConf.Sheets
      If sht.Name <> "TC" And Left(sht.Name, 2) <> "QS" And sht.Name <> ngcVAR Then sht.Delete
    Next sht
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  iSht = 0: bRpt = True
  On Error Resume Next
  While bRpt
    If optWbk.Value Then
      iSht = iSht + 1
      Set wbk = Workbooks(lst.List(lst.ListIndex))
      Set sht = wbk.Sheets(iSht)
      bImp = (Left(sht.Name, 1) = ".")
      If iSht = wbk.Sheets.Count Then bRpt = False
    Else
      Set wbk = Workbooks(lst.List(iSht, 0))
      Set sht = wbk.Sheets(lst.List(iSht, 1))
      bImp = lst.Selected(iSht)
      iSht = iSht + 1
      If iSht = lst.ListCount Then bRpt = False
    End If
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If bImp Then
      sht.Visible = True
      Application.StatusBar = "Importing " & sht.Name & "...": DoEvents
      sht.Copy After:=wbkConf.Sheets(wbkConf.Sheets.Count)
    End If
  Wend
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  On Error GoTo ngcImportError
  ngcClear bInt:=True
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|
  wrtNms wbk:=wbkConf
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Dim vLinks As Variant, iCur As Long
  vLinks = wbkConf.LinkSources(xlLinkTypeExcelLinks)
  If Not IsEmpty(vLinks) Then
    Application.Cursor = xlDefault
    If MsgBox("Links to other excel files were found." & vbCrLf & "Do you want to break all links?", vbQuestion + vbYesNoCancel) = vbYes Then
      Application.Cursor = xlWait
      For iCur = 1 To UBound(vLinks)
        wbkConf.BreakLink Name:=vLinks(iCur), Type:=xlLinkTypeExcelLinks
      Next iCur
    End If
  End If
  Application.CalculateFullRebuild
ngcImportError:
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Application.DisplayAlerts = True
  Application.StatusBar = False
  Application.Calculation = xlCalculationAutomatic
  Application.Cursor = xlDefault
  If Err.Number <> 0 Then MsgBox "An error occur during operation.", vbExclamation
  Unload Me
End Sub


Attribute VB_Name = "ngcDvlpMod"
Attribute VB_Base = "0{CF57F834-F4E6-4CEA-AC0B-6B0D30D80B3D}{45805B01-9D93-480D-9DAD-0528FFEF8A69}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'(c)2010 Terekhov Alexey. All rights reserved.
'Phone: +38631334953, Skype:terekhov_alexey
Option Explicit

Private Sub UserForm_Initialize()
  Dim iCur As Long, iCol As Long, bAdd As Boolean
  lstModules.Clear
  lstOptions.Clear
  If fndIsSheet(ngcVAR) Then
    Set shtV = Sheets(ngcVAR)
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    iCol = 2
    While shtV.Cells(4, iCol).Value <> ""
      If fndIsSheet(shtV.Cells(4, iCol).Value) Then
        bAdd = True
        For iCur = 0 To lstModules.ListCount - 1
          If lstModules.List(iCur) = shtV.Cells(4, iCol).Value Then bAdd = False: Exit For
        Next iCur
        If bAdd Then
          lstModules.AddItem shtV.Cells(4, iCol).Value
          lstModules.Selected(lstModules.ListCount - 1) = shtV.Cells(5, iCol).Value
        End If
      End If
      iCol = iCol + 1
    Wend
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    For Each shtV In Sheets
      If Left(shtV.Name, 1) = "." Then
        bAdd = True
        For iCur = 0 To lstModules.ListCount - 1
          If lstModules.List(iCur) = shtV.Name Then bAdd = False: Exit For
        Next iCur
        If bAdd Then lstModules.AddItem shtV.Name
      End If
    Next shtV
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    If lstModules.ListCount > 0 Then
      lstModules.ListIndex = 0
      Dim sht As Worksheet, rng As Range, sAdr As String
      For iCur = 0 To lstModules.ListCount - 1
        Set sht = Sheets(lstModules.List(iCur))
        Set rng = sht.Columns(1).EntireColumn.Find("[OP]", LookIn:=xlValues, LookAt:=xlWhole)
        If Not rng Is Nothing Then
          If Not IsEmpty(rng.Offset(0, CLO5 - rng.Column).Value) Then
            sAdr = rng.Address
            Do
              lstOptions.AddItem "'" & sht.Name & "'!" & rng.Offset(0, CLO4 - rng.Column).Address
              lstOptions.List(lstOptions.ListCount - 1, 1) = sht.Name
              lstOptions.List(lstOptions.ListCount - 1, 2) = rng.Offset(0, CLO5 - rng.Column).Value
              lstOptions.Selected(lstOptions.ListCount - 1) = CBool(rng.Offset(0, CLO4 - rng.Column).Value)
              Set rng = sht.Columns(1).EntireColumn.FindNext(rng)
            Loop While Not rng Is Nothing And rng.Address <> sAdr
          End If
        End If
      Next iCur
    End If
  End If
End Sub

Private Sub btnRefresh_Click()
  lstModules.Clear
  If fndIsSheet(ngcVAR) Then
    '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    Set shtV = Sheets(ngcVAR)
    For Each shtV In Sheets
      If Left(shtV.Name, 1) = "." Then lstModules.AddItem shtV.Name
    Next shtV
  End If
End Sub

Private Sub btnAllM_Click()
  Dim iCur As Long
  For iCur = 0 To lstModules.ListCount - 1
    lstModules.Selected(iCur) = True
  Next iCur
End Sub

Private Sub btnNoneM_Click()
  Dim iCur As Long
  For iCur = 0 To lstModules.ListCount - 1
    lstModules.Selected(iCur) = False
  Next iCur
End Sub

Private Sub btnDelete_Click()
  If lstModules.ListCount = 0 Then Exit Sub
  '|fffd||fffd||fffd||fffd||fffd||fffd|
  Dim iAsk As Integer
  iAsk = MsgBox("Do you really want to delete unselected sheets?" & vbCrLf & "Changes you made in options will be ignored.", vbQuestion + vbYesNoCancel)
  If iAsk <> vbYes Then Exit Sub
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Application.DisplayAlerts = False
  For iAsk = 0 To lstModules.ListCount - 1
    If Not lstModules.Selected(iAsk) Then Sheets(lstModules.List(iAsk)).Delete
  Next iAsk
  Application.DisplayAlerts = True
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  UserForm_Initialize
End Sub

Private Sub btnUp_Click()
  If lstModules.ListIndex > 0 Then
    Dim n As String, s As Boolean
    'module
    n = lstModules.List(lstModules.ListIndex - 1)
    lstModules.List(lstModules.ListIndex - 1) = lstModules.List(lstModules.ListIndex)
    lstModules.List(lstModules.ListIndex) = n
    'selection
    s = lstModules.Selected(lstModules.ListIndex - 1)
    lstModules.Selected(lstModules.ListIndex - 1) = lstModules.Selected(lstModules.ListIndex)
    lstModules.Selected(lstModules.ListIndex) = s
    'cursor
    lstModules.ListIndex = lstModules.ListIndex - 1
  End If
End Sub

Private Sub btnDown_Click()
  If lstModules.ListIndex < lstModules.ListCount - 1 Then
    Dim n As String, s As Boolean
    'module
    n = lstModules.List(lstModules.ListIndex + 1)
    lstModules.List(lstModules.ListIndex + 1) = lstModules.List(lstModules.ListIndex)
    lstModules.List(lstModules.ListIndex) = n
    'selection
    s = lstModules.Selected(lstModules.ListIndex + 1)
    lstModules.Selected(lstModules.ListIndex + 1) = lstModules.Selected(lstModules.ListIndex)
    lstModules.Selected(lstModules.ListIndex) = s
    'cursor
    lstModules.ListIndex = lstModules.ListIndex + 1
  End If
End Sub

Private Sub btnAllO_Click()
  Dim iCur As Long
  For iCur = 0 To lstOptions.ListCount - 1
    lstOptions.Selected(iCur) = True
  Next iCur
End Sub

Private Sub btnNoneO_Click()
  Dim iCur As Long
  For iCur = 0 To lstOptions.ListCount - 1
    lstOptions.Selected(iCur) = False
  Next iCur
End Sub

Private Sub btnImport_Click()
  Dim vPath As Variant, iCur As Long
  vPath = Application.GetOpenFilename("NG4 content configuration,*.ngo")
  If vPath = False Then Exit Sub
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If lstModules.ListCount > 0 Then
    For iCur = 0 To lstModules.ListCount - 1
      lstModules.Selected(iCur) = False
    Next iCur
  End If
  If lstOptions.ListCount > 0 Then
    For iCur = 0 To lstOptions.ListCount - 1
      lstOptions.Selected(iCur) = False
    Next iCur
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim fFile As Object, sFile As String, rng As Range, vCur As Variant
  Set fFile = CreateObject("Scripting.FileSystemObject").OpenTextFile(CStr(vPath), , , 0)
  Do Until fFile.AtEndOfStream
    vCur = Split(fFile.ReadLine, ";")
    If UBound(vCur) > 0 Then
      For iCur = 0 To lstModules.ListCount - 1
        If vCur(0) = lstModules.List(iCur) Then lstModules.Selected(iCur) = vCur(1)
      Next iCur
      For iCur = 0 To lstOptions.ListCount - 1
        Set rng = Application.Range(lstOptions.List(iCur))
        If vCur(0) = rng.Offset(, CLID - rng.Column).Value Then lstOptions.Selected(iCur) = vCur(1)
      Next iCur
    End If
  Loop
  fFile.Close
End Sub

Private Sub btnExport_Click()
  Dim vPath As Variant
  vPath = Application.GetSaveAsFilename("NG4 cfg.ngo", "NG4 content configuration,*.ngo")
  If vPath = False Then Exit Sub
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim sFile As String, iCur As Long, rng As Range
  sFile = ""
  If lstModules.ListCount > 0 Then
    For iCur = 0 To lstModules.ListCount - 1
      sFile = sFile & lstModules.List(iCur) & ";" & lstModules.Selected(iCur) & vbCrLf
    Next iCur
  End If
  If lstOptions.ListCount > 0 Then
    For iCur = 0 To lstOptions.ListCount - 1
      Set rng = Application.Range(lstOptions.List(iCur))
      If rng.Offset(, CLID - rng.Column).Value <> "" Then sFile = sFile & rng.Offset(, CLID - rng.Column).Value & ";" & lstOptions.Selected(iCur) & vbCrLf
    Next iCur
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
  If sFile <> "" Then
    Dim fnFile As Long
    fnFile = FreeFile
    Open CStr(vPath) For Output As fnFile
    Print #fnFile, sFile
    Close #fnFile
  Else: MsgBox "Nothing to save!", vbExclamation: End If
End Sub

Private Sub btnSave_Click()
  If lstModules.ListCount = 0 Then Exit Sub
  If Not fndIsSheet(ngcVAR) Then MsgBox "Operation is not successfull.", vbExclamation: Exit Sub
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Application.Calculation = xlCalculationManual
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Set shtV = Sheets(ngcVAR)
  Dim iCur As Long
  For iCur = 0 To lstModules.ListCount - 1
    shtV.Cells(4, 2 + iCur).Value = lstModules.List(iCur)
    shtV.Cells(5, 2 + iCur).Value = lstModules.Selected(iCur)
  Next iCur
  shtV.Range(shtV.Cells(4, 2 + iCur), shtV.Cells(5, shtV.Cells.SpecialCells(xlCellTypeLastCell).Column + 1)).ClearContents
  '|fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  If lstModules.ListCount > 0 Then
    For iCur = 0 To lstOptions.ListCount - 1
      If Application.Range(lstOptions.List(iCur, 0)).Value <> -1 * lstOptions.Selected(iCur) Then _
        Application.Range(lstOptions.List(iCur, 0)).Value = -1 * lstOptions.Selected(iCur)
    Next iCur
  End If
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
  Application.Calculation = xlCalculationAutomatic
  Unload Me
End Sub

Private Sub btnExcel_Click()
  Dim vPath As Variant
  vPath = Application.GetSaveAsFilename("NG4 cfg.csv", "NG4 content configuration,*.csv")
  If vPath = False Then Exit Sub
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Dim sFile As String, sTmp As String, iMod As Long, iOpt As Long, rng As Range
  sFile = ""
  For iMod = 0 To lstModules.ListCount - 1
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|
    sTmp = lstModules.List(iMod) & ";" & lstModules.Selected(iMod)
    sFile = sFile & sTmp & vbCrLf
    '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    For iOpt = 0 To lstOptions.ListCount - 1
      Set rng = Application.Range(lstOptions.List(iOpt))
      If rng.Offset(, CLID - rng.Column).Value <> "" Then
        If lstModules.List(iMod) = lstOptions.List(iOpt, 1) Then sFile = sFile & sTmp & ";" & lstOptions.List(iOpt, 1) & ";" & rng.Offset(, CLID - rng.Column).Value & ";" & lstOptions.Selected(iOpt) & ";" & lstOptions.List(iOpt, 2) & vbCrLf
      End If
    Next iOpt
  Next iMod
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd|
  If sFile <> "" Then
    Dim fnFile As Long
    fnFile = FreeFile
    Open CStr(vPath) For Output As fnFile
    Print #fnFile, sFile
    Close #fnFile
  Else: MsgBox "Nothing to save!", vbExclamation: End If
End Sub
Attribute VB_Name = "ngcDvlpPwd"
Attribute VB_Base = "0{25223E99-1DCC-49B8-91B2-5C2018BAAA72}{4218BB14-6962-4837-AECB-63958E93C2AE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'(c)2010 Terekhov Alexey. All rights reserved.
'Phone: +38631334953, Skype:terekhov_alexey
Option Explicit

Private Sub UserForm_Initialize()
  txtPwd.Text = ""
  txtPwd.SetFocus
End Sub

Private Sub btnOk_Click()
  If txtPwd.Text = ngcPWD Then
    Hide
    ngcProtect bProtect:=False
    Unload Me
  Else: txtPwd.SetFocus: Beep: End If
End Sub
Attribute VB_Name = "ngcMessage"
Attribute VB_Base = "0{FD04596D-3D21-4765-A71F-E5180B19D07F}{E36C8A99-7849-4A8C-8EF5-FB0F3C0CC675}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'(c)2010 Terekhov Alexey. All rights reserved.
'Phone: +38631334953, Skype:terekhov_alexey
Option Explicit

Public Sub ManualShow(sMsg As String, Optional sLabel As String = "Please note the following information:", Optional sCaption As String = "Information", Optional bInfo As Boolean = False, Optional bModeless As Boolean = False)
  Dim vRec As Variant, iRec As Long
  Caption = sCaption
  lblLabel.Caption = sLabel
  imgInf.Visible = bInfo
  imgExc.Visible = (Not bInfo)
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  lstMessages.Clear
  vRec = Split(sMsg, ";")
  For iRec = LBound(vRec) To UBound(vRec)
    If vRec(iRec) <> "" Then lstMessages.AddItem CStr(vRec(iRec))
  Next iRec
  '|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
  Show IIf(bModeless, vbModeless, vbModal)
End Sub

Private Sub cmdClose_Click()
  Hide
  Unload Me
End Sub

Private Sub cmdExport_Click()
  Hide
  ImageClick
  Unload Me
End Sub

Private Sub ImageClick()
  Dim cfg As Workbook, wbk As Workbook, iCur As Long
  If lstMessages.ListCount > 0 Then
    Set cfg = ActiveWorkbook: Me.Hide: Set wbk = Workbooks.Add
    For iCur = 0 To lstMessages.ListCount - 1
      wbk.Sheets(1).Cells(iCur + 1, 1).Value = lstMessages.List(iCur)
    Next iCur
    cfg.Activate
  End If
End Sub



' InQuest injected base64 decoded content
' &F(!

INQUEST-PP=macro
