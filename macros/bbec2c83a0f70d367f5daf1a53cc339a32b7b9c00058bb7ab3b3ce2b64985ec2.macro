Attribute VB_Name = "Module1"
Public Sub showStats()
   Dim objTempString As String
   'MsgBox ("Name:" & ActiveWindow.Selection.ShapeRange.name & vbCrLf _
            & "Top:" & ActiveWindow.Selection.ShapeRange.Top & vbCrLf _
            & "Left:" & ActiveWindow.Selection.ShapeRange.Left & vbCrLf _
            & "Width:" & ActiveWindow.Selection.ShapeRange.Width & vbCrLf _
            & "Height:" & ActiveWindow.Selection.ShapeRange.Height & vbCrLf)
  objTempString = "Top:" & ActiveWindow.Selection.ShapeRange.Top & ";" & _
            "Left:" & ActiveWindow.Selection.ShapeRange.Left & ";" & _
            "Width:" & ActiveWindow.Selection.ShapeRange.Width & ";" & _
            "Height:" & ActiveWindow.Selection.ShapeRange.Height & ";"
  objTempString = InputBox(ActiveWindow.Selection.ShapeRange.name + " Shape Object", "Existing Dimensions", objTempString)
               
End Sub



Public Sub setStats()
   Dim objPosition As String
   Dim finalPos As Integer
   Dim initPos As Integer
   
   objPosition = InputBox("Enter New Dimensions for Shape Object: " + ActiveWindow.Selection.ShapeRange.name, "New Dimensions")
   
   initPos = InStr(1, objPosition, "Top:") + Len("Top:")
   finalPos = InStr(initPos, objPosition, ";")
   
   ActiveWindow.Selection.ShapeRange.Top = Mid(objPosition, initPos, finalPos - initPos)
   
   initPos = InStr(1, objPosition, "Left:") + Len("Left:")
   finalPos = InStr(initPos, objPosition, ";")
   
   ActiveWindow.Selection.ShapeRange.Left = Mid(objPosition, initPos, finalPos - initPos)
   
   
   initPos = InStr(1, objPosition, "Width:") + Len("Width:")
   finalPos = InStr(initPos, objPosition, ";")
   
   
   ActiveWindow.Selection.ShapeRange.Width = Mid(objPosition, initPos, finalPos - initPos)
   
   initPos = InStr(1, objPosition, "Height:") + Len("Height:")
   finalPos = InStr(initPos, objPosition, ";")
   
   ActiveWindow.Selection.ShapeRange.Height = Mid(objPosition, initPos, finalPos - initPos)
   
   MsgBox ("Name:" & ActiveWindow.Selection.ShapeRange.name & vbCrLf _
            & "Top:" & ActiveWindow.Selection.ShapeRange.Top & vbCrLf _
            & "Left:" & ActiveWindow.Selection.ShapeRange.Left & vbCrLf _
            & "Width:" & ActiveWindow.Selection.ShapeRange.Width & vbCrLf _
            & "Height:" & ActiveWindow.Selection.ShapeRange.Height & vbCrLf)

End Sub
Public Sub setName()
   Dim objName As String
   objName = InputBox("New name for object")
   ActiveWindow.Selection.ShapeRange.name = objName
   MsgBox (ActiveWindow.Selection.ShapeRange.name)
End Sub

Public Sub getName()
   Dim objTempString As String
   'MsgBox (ActiveWindow.Selection.ShapeRange.name)
   objTempString = InputBox(" Shape Object", "Existing Dimensions", ActiveWindow.Selection.ShapeRange.name)
End Sub

Function SearchAndReplace(s As String, Str1 As String, Str2 As String)
   Dim pos As Integer
   s = s & "" 'Fix Null
   pos = InStr(s, Str1)
   While pos > 0
      s = Mid(s, 1, pos - 1) & Str2 & Mid(s, pos + Len(Str1))
       pos = InStr(pos, s, Str1)
   Wend
   SearchAndReplace = s
End Function

Public Function getPptText(name As String) As String
   getPptText = getPptObjectByName(name).ShapeRange.TextFrame.TextRange.Text
End Function

Public Sub setPptText(name As String, value As String)
   getPptObjectByName(name).ShapeRange.TextFrame.TextRange.Text = value
End Sub




Public Sub positionTextboxes1()
Dim tmpObj As Object
Dim posObj As Object
'----------------------------
'---Contribution slide-------
'----------------------------
Set posObj = getPptObjectByName("GrossContributionDisc", False)
Set tmpObj = getPptObjectByName("StrategyAttributionTable", False)
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height + 2.875
    End If
    Set tmpObj = posObj
End If



Set posObj = getPptObjectByName("TopFiveHeader", False)
Set tmpObj = getPptObjectByName("GrossContributionDisc", False)
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
        If (tmpObj.Top + tmpObj.Height + 2.875) > posObj.Top Then
            posObj.Top = tmpObj.Top + tmpObj.Height + 2.875
        End If
    End If
    Set tmpObj = posObj
End If

Set posObj = getPptObjectByName("TopFiveHoldingsTable", False)
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
         resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height + 2.5
    End If
    Set tmpObj = posObj
End If

Set posObj = getPptObjectByName("TopFiveDisclaimerSource", False)
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height + 2.875
    End If
    Set tmpObj = posObj
End If

Set posObj = getPptObjectByName("TopFiveAllocationNote", False)
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height
    End If
    Set tmpObj = posObj
End If


Set posObj = getPptObjectByName("TopFiveFootnote", False)
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height
    End If
    Set tmpObj = posObj
End If

'Set posObj = getPptObjectByName("ContributionContinuingNote", False)
'If Not posObj Is Nothing Then
'    If Not tmpObj Is Nothing Then
'         posObj.top = tmpObj.top + tmpObj.height
'    End If
'    Set tmpObj = posObj
'End If

Set posObj = getPptObjectByName("TopFivePerformanceStatsDisc", False)
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height
    End If
    Set tmpObj = posObj
End If


'----------------------------
'---Performance Statistics---
'----------------------------
Set posObj = getPptObjectByName("PerformanceStatsDiscSource", False) ' Performance statistics header
Set tmpObj = getPptObjectByName("HistoricalPerformanceTable", False) 'PPT_HISTORICAL_PERFORMANCE
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height + 3.875
    End If
    Set tmpObj = posObj
End If


Set posObj = getPptObjectByName("PerformanceStatisticsLabel", False) ' Performance statistics header
Set tmpObj = getPptObjectByName("HistoricalPerformanceDisclaimer", False) 'PPT_HISTORICAL_PERFORMANCE
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         If (tmpObj.Top + tmpObj.Height + 3.875) > 327.5 Then
            posObj.Top = tmpObj.Top + tmpObj.Height + 3.875
         End If
    End If
    Set tmpObj = posObj
End If

Set posObj = getPptObjectByName("PerformanceStatisticsTable", False) 'STATISTICS TABLE
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height + 2.5
    End If
    Set tmpObj = posObj
End If

Dim bNote As Boolean

Set posObj = getPptObjectByName("PerformanceFootnote", False) 'STATISTICS_1_COMPARATIVE_STATISTICS_RECENT_LAUNCH_NOTE
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
        posObj.Top = tmpObj.Top + tmpObj.Height + 3.875
        bNote = True
    End If
    Set tmpObj = posObj
End If

Set posObj = getPptObjectByName("PerformanceStatsDiscSource", False) 'PPT_PERF_STATS_SOURCE
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
        If Not bNote Then
            posObj.Top = tmpObj.Top + tmpObj.Height + 3.875
        Else
            posObj.Top = tmpObj.Top + tmpObj.Height
        End If
    End If
    Set tmpObj = posObj
End If

Set posObj = getPptObjectByName("PerformanceStatsDisc", False) 'PPT_PERF_STATS
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height
    End If
    Set tmpObj = posObj
End If

Set posObj = getPptObjectByName("StatsDefFootnote", False) 'Performance Statistics - Please see end notes for selected statistics definitions
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height
    End If
    Set tmpObj = posObj
End If


'-------------------------------------------------------------------------
'---Performance Statistics for EUR and USD series in SGAS preso report ---
'-------------------------------------------------------------------------
Set posObj = getPptObjectByName("HistoricalPerformanceDisclaimer1", False) ' Performance statistics header
Set tmpObj = getPptObjectByName("HistoricalPerformanceTable1", False) 'PPT_HISTORICAL_PERFORMANCE
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height + 3.875
    End If
    Set tmpObj = posObj
End If

Set posObj = getPptObjectByName("PerformanceStatsDiscSource1", False) 'PPT_PERF_STATS
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height
    End If
    Set tmpObj = posObj
End If

Set posObj = getPptObjectByName("PerformanceStatsDisc1", False) 'PPT_PERF_STATS
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height
    End If
    Set tmpObj = posObj
End If


Set posObj = getPptObjectByName("HistoricalPerformanceDisclaimer2", False) ' Performance statistics header
Set tmpObj = getPptObjectByName("HistoricalPerformanceTable2", False) 'PPT_HISTORICAL_PERFORMANCE
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height + 3.875
    End If
    Set tmpObj = posObj
End If

Set posObj = getPptObjectByName("PerformanceStatsDiscSource2", False) 'PPT_PERF_STATS
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height
    End If
    Set tmpObj = posObj
End If

Set posObj = getPptObjectByName("PerformanceStatsDisc2", False) 'PPT_PERF_STATS
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height
    End If
    Set tmpObj = posObj
End If


'----------------------------
'---Range of Monthly Returns
'----------------------------
Set posObj = getPptObjectByName("PerformanceTableDisclaimerSource", False) 'Disclaimer source
Set tmpObj = getPptObjectByName("PerformanceTable", False) 'PPT Performance table
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height
    End If
    Set tmpObj = posObj
End If


Set posObj = getPptObjectByName("RangeOfReturnsTitle", False) 'Range of Monthly Returns title
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height
    End If
    Set tmpObj = posObj
End If

Dim oldPos As Double
Set posObj = getPptObjectByName("RangeOfReturnsChart", False) 'Range of Monthly Returns Chart
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
        oldPos = posObj.Top
        posObj.Top = tmpObj.Top + tmpObj.Height
        
        Set tmpObj = getPptObjectByName("MinLabel", False)
        tmpObj.Top = tmpObj.Top + (posObj.Top - oldPos)
        Set tmpObj = getPptObjectByName("MaxLabel", False)
        tmpObj.Top = tmpObj.Top + (posObj.Top - oldPos)
        Set tmpObj = getPptObjectByName("MeanLabel", False)
        tmpObj.Top = tmpObj.Top + (posObj.Top - oldPos)
        
    End If
    Set tmpObj = posObj
End If


Set posObj = getPptObjectByName("PerformanceDisclaimer", False) 'Range of Monthly Returns Disclaimer
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height
    End If
    Set tmpObj = posObj
End If


Set posObj = getPptObjectByName("Text Box 6", False) 'Text Box 6 - Range of Monthly Returns - end notes for selected statistics definitions
'Set tmpObj = getPptObjectByName("PerformanceDisclaimer", False) 'PPT_HISTORICAL_PERFORMANCE
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height
    End If
    Set tmpObj = posObj
End If


'----------------------------
'---End Notes (Slide 1)
'----------------------------
Set posObj = getPptObjectByName("StrategyDefsHeader", False) 'Strategy definitions header
Set tmpObj = getPptObjectByName("SPVDisclaimer", False) 'SPV Disclaimer
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height + 5.375
    End If
    Set tmpObj = posObj
End If

Set posObj = getPptObjectByName("StrategyDefinitions", False) 'Strategy Definitions
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height + 5.375
    End If
    Set tmpObj = posObj
End If

'--------------------------------------------------------
'---End Notes (Statistics Definitions/Index Descriptions)
'--------------------------------------------------------
Set posObj = getPptObjectByName("IndexDescriptionsPrefix", False) 'Index Descriptions Header
Set tmpObj = getPptObjectByName("EndNotes", False) 'Prefix for Index Descriptions
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height
    End If
    Set tmpObj = posObj
End If
Set posObj = getPptObjectByName("IndexDescriptions", False) 'Index Descriptions
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height
    End If
    Set tmpObj = posObj
    'resize object so that we can determine if the height of the index descriptions object exceeds the End notes disclaimer
    'Then excel macro will delete the last 2 paragraphs (i.e. the last index name and its corresponding description) and use that on the last slide
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
    End If
End If

'--------------------------------------------------------
'---End Notes (Index Descriptions Cont)
'--------------------------------------------------------
Set posObj = getPptObjectByName("IndexDescriptions2", False) 'Last Index description
Set tmpObj = getPptObjectByName("EndNotesCont", False) 'Index Descriptions Header
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height
    End If
    Set tmpObj = posObj
End If
Set posObj = getPptObjectByName("EndNotesDisclaimerCont", False) 'Prefix for Index Descriptions
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height + 30
    End If
    Set tmpObj = posObj
End If








End Sub




Public Function getPptObjectByName(name As String, Optional displayMsg As Boolean = True) As Object
   Dim i As Integer
   Dim j As Integer
   For i = 1 To ActivePresentation.Slides.Count Step 1
      For j = 1 To ActivePresentation.Slides(i).Shapes.Count Step 1
         If (ActivePresentation.Slides(i).Shapes(j).name = name) Then
            Set getPptObjectByName = ActivePresentation.Slides(i).Shapes(j)
            Exit Function
         End If
      Next j
   Next i
   If displayMsg Then
    MsgBox ("Couldn't find any object with name:" & name)
   End If
   Set getPptObjectByName = Nothing
End Function


Private Function resizeShapeObject(shapeObj As Object)
    If shapeObj.HasTextFrame Then
    With shapeObj
        .Left = .TextFrame.TextRange.BoundLeft - .TextFrame.MarginLeft
        .Top = .TextFrame.TextRange.BoundTop - .TextFrame.MarginTop
        .Width = .TextFrame.TextRange.BoundWidth + .TextFrame.MarginLeft + .TextFrame.MarginRight
        .Height = .TextFrame.TextRange.BoundHeight + .TextFrame.MarginTop + .TextFrame.MarginBottom
        ' Add this line just to turn the setting on.
        .TextFrame.AutoSize = ppAutoSizeShapeToFitText
    End With
    End If
End Function


Public Sub bulletUnnumbered()
Set tb = getPptObjectByName("HypoPastPerformanceMethod", False)
Dim i As Integer
With tb.TextFrame.TextRange
    For i = 1 To .Paragraphs.Count Step 1
        With .Paragraphs(i)
       If (i <> 1 And i <> 8) Then
            With .ParagraphFormat.Bullet
                .Type = ppBulletUnnumbered
                .Character = 159
                .Font.name = "Wingdings"
                .Font.Size = 15
            End With
         End If
        End With
    Next i
End With
End Sub
Public Sub ModifyGlobalDisclaimerSlide1()
Set tb = getPptObjectByName("GlobalDisclaimerSlide1", False)
Dim i As Integer
With tb.TextFrame.TextRange
    For i = 1 To .Characters.Count - 1
    If .Characters(i, 1) = Chr(10) Then
        If .Characters(i + 1, 1) = Chr(10) Then
            .Characters(i, 2).Font.Size = 3
        ElseIf .Characters(i + 1, 1) = Chr(32) And .Characters(i + 2, 1) = Chr(10) Then
            .Characters(i, 3).Font.Size = 3
        End If
    End If
Next i
End With
End Sub




Public Sub positionTextboxes()
Dim tmpObj As Object
Dim posObj As Object

bulletUnnumbered

'----------------------------
'---Performance Statistics---
'----------------------------
Set posObj = getPptObjectByName("PerformanceStatsDiscSource", False) ' Performance statistics header
Set tmpObj = getPptObjectByName("HistoricalPerformanceTable", False) 'PPT_HISTORICAL_PERFORMANCE
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height + 3.875
    End If
    Set tmpObj = posObj
End If



'--------------------------------------------------------
'---Hypothetical Portfolio Analysis slide
'--------------------------------------------------------
Set posObj = getPptObjectByName("PerformanceAnalysisFootnote", False) 'Index Descriptions Header
Set tmpObj = getPptObjectByName("PerformanceAnalysisDiscSource", False) 'Prefix for Index Descriptions
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height
    End If
    Set tmpObj = posObj
End If
Set posObj = getPptObjectByName("AnalysisPerformanceDisclaimer", False) 'Index Descriptions
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height
    End If
    Set tmpObj = posObj
End If


'----------------------------
'---Range of Monthly Returns
'----------------------------
Set posObj = getPptObjectByName("PerformanceTableDisclaimerSource", False) 'Disclaimer source
Set tmpObj = getPptObjectByName("PerformanceTable", False) 'PPT Performance table
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height
    End If
    Set tmpObj = posObj
End If

'ModifyGlobalDisclaimerSlide1
'----------------------------
'---Range of Proposed portfolio
'----------------------------
For i = 1 To 10 Step 1
Set tmpObj = getPptObjectByName("FundTable" & i, False) 'PPT Performance table
Set posObj = getPptObjectByName("DisclaimerRectangle" & i, False) 'Disclaimer source
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
         posObj.Top = tmpObj.Top + tmpObj.Height + 3.875
    End If
 Set tmpObj = posObj
End If
Next i

'----------------------------
'---Range of Hypothetical net performance
'----------------------------
Set posObj = getPptObjectByName("HistoricalPerformanceDisclaimer", False) ' Performance statistics header
Set tmpObj = getPptObjectByName("PerformanceStatsDiscSource", False) 'PPT_HISTORICAL_PERFORMANCE
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
        posObj.Top = tmpObj.Top + tmpObj.Height + 2
    End If
    Set tmpObj = posObj
End If

'----------------------------
'---Range of Hypothetical net performance
'----------------------------
Set posObj = getPptObjectByName("StatsDiscSource", False) ' Performance statistics header
Set tmpObj = getPptObjectByName("PerformanceStatisticsTable", False) 'PPT_HISTORICAL_PERFORMANCE
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
        posObj.Top = tmpObj.Top + tmpObj.Height + 3.875
    End If
    Set tmpObj = posObj
End If

Set posObj = getPptObjectByName("StatsPerformanceDisclaimer", False) ' Performance statistics header
Set tmpObj = getPptObjectByName("StatsDiscSource", False) 'PPT_HISTORICAL_PERFORMANCE
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
        posObj.Top = tmpObj.Top + tmpObj.Height + 2
    End If
    Set tmpObj = posObj
End If

'----------------------------
'---Range of Hypothetical net performance
'----------------------------
Set posObj = getPptObjectByName("PerformanceAnalysisDiscSource", False) ' Performance statistics header
Set tmpObj = getPptObjectByName("PerformanceAnalysisChart", False) 'PPT_HISTORICAL_PERFORMANCE
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
        posObj.Top = tmpObj.Top + tmpObj.Height + 3.875
    End If
    Set tmpObj = posObj
End If

Set posObj = getPptObjectByName("PerformanceAnalysisFootnote", False) ' Performance statistics header
Set tmpObj = getPptObjectByName("PerformanceAnalysisDiscSource", False) 'PPT_HISTORICAL_PERFORMANCE
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
        posObj.Top = tmpObj.Top + tmpObj.Height + 2
    End If
    Set tmpObj = posObj
End If

Set posObj = getPptObjectByName("AnalysisPerformanceDisclaimer", False) ' Performance statistics header
Set tmpObj = getPptObjectByName("PerformanceAnalysisFootnote", False) 'PPT_HISTORICAL_PERFORMANCE
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
        posObj.Top = tmpObj.Top + tmpObj.Height + 2
    End If
    Set tmpObj = posObj
End If

'----------------------------
'---Range of Hypothetical performance versus market indices
'----------------------------
Set posObj = getPptObjectByName("PerformanceTableDisclaimerSource", False) ' Performance statistics header
Set tmpObj = getPptObjectByName("PerformanceTable", False) 'PPT_HISTORICAL_PERFORMANCE
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
        posObj.Top = tmpObj.Top + tmpObj.Height + 3.875
    End If
    Set tmpObj = posObj
End If

Set posObj = getPptObjectByName("PerformanceDisclaimer", False) ' Performance statistics header
Set tmpObj = getPptObjectByName("PerformanceTableDisclaimerSource", False) 'PPT_HISTORICAL_PERFORMANCE
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
        posObj.Top = tmpObj.Top + tmpObj.Height + 2
    End If
    Set tmpObj = posObj
End If

'----------------------------
'---Range of Range of hypothetical monthly returns
'----------------------------
Set posObj = getPptObjectByName("PerformanceDisclaimerRtChrt", False) ' Performance statistics header
Set tmpObj = getPptObjectByName("RangeOfReturnsChart", False) 'PPT_HISTORICAL_PERFORMANCE
If Not posObj Is Nothing Then
    If Not tmpObj Is Nothing Then
        resizeShapeObject tmpObj
        posObj.Top = tmpObj.Top + tmpObj.Height + 3.875
    End If
    Set tmpObj = posObj
End If
End Sub






INQUEST-PP=macro
