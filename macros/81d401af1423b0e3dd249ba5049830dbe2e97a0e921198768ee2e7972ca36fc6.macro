Attribute VB_Name = "CMNCollectionHolder"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public HeldCollection As Collection

Attribute VB_Name = "ClsData"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public sheetName As String
Public DataRangeName As String
Public ValuesRangeRus As String
Public ValuesRangeEng As String

Attribute VB_Name = "ClsRangeInfo"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public Range As Range
Public CheckType As String

Attribute VB_Name = "ClsSettings"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Const SETTINGS_SHEET_NAME As String = "hCheck"
Private mCol As Collection
Private mWs As Worksheet

Public Sub Init()
    Dim row As Long
    Set mWs = ActiveWorkbook.Worksheets(SETTINGS_SHEET_NAME)
    Set mCol = New Collection
    row = 2
    Do Until isEmptyRow(row)
        mCol.Add getData(row)
        row = row + 1
    Loop
End Sub


Private Function getData(ByVal row As Long) As ClsData
    Dim res As New ClsData
    res.sheetName = cellValue(row, 1)
    res.DataRangeName = cellValue(row, 2)
    res.ValuesRangeRus = cellValue(row, 3)
    res.ValuesRangeEng = cellValue(row, 4)
    Set getData = res
End Function

Private Function isEmptyRow(ByVal row As Long) As Boolean
    isEmptyRow = isEmptyCell(row, 1) Or isEmptyCell(row, 2) Or isEmptyCell(row, 3)
End Function

Private Function isEmptyCell(ByVal row As Long, ByVal col As Long) As Boolean
    isEmptyCell = (cellValue(row, col) = Empty) Or (cellValue(row, col) = "")
End Function

Private Function cellValue(ByVal row As Long, ByVal col As Long) As Variant
    cellValue = mWs.Cells(row, col).Value
End Function


Public Function IsSheetWithValueLimitation(ByVal sheetName As String) As Boolean
    Dim dataEntry As ClsData
    For Each dataEntry In mCol
        If dataEntry.sheetName = sheetName Then
            IsSheetWithValueLimitation = True
            Exit Function
        End If
    Next dataEntry
    IsSheetWithValueLimitation = False
End Function


Public Function LimitationDataForSheet(ByVal sheetName As String) As CMNCollectionHolder
    Dim res As New CMNCollectionHolder, dataEntry As ClsData, coll As New Collection
    For Each dataEntry In mCol
        If dataEntry.sheetName = sheetName Then
            coll.Add dataEntry
        End If
    Next dataEntry
    Set res.HeldCollection = coll
    Set LimitationDataForSheet = res
End Function




Attribute VB_Name = "ClsSignChecker"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Const NEG_CHECK As String = "SIGN_NEGATIVE"
Private Const POS_CHECK As String = "SIGN_POSITIVE"


Private mCell As Range
Private mCheckOK As Boolean
Private mAlertString As String
Private mNeedAlert As Boolean

Private mRanges As Collection





Public Sub Init()
    Set mRanges = New Collection
    Const SETTINGS_SHEET As String = "hCheckSign"
    Const startRow As Long = 14
    Dim currentRow As Long
    'Dim continueCondition As Boolean
    Dim settingsSheet As Worksheet
    
    Dim sheetName As String, rangeAdress As String, ct As String
    Dim rngInfo As ClsRangeInfo
        
    Set settingsSheet = modTools.GetSheet(SETTINGS_SHEET)
    
    'continueCondition = True
    currentRow = startRow
    
    Do While True
        currentRow = currentRow + 1
        sheetName = settingsSheet.Cells(currentRow, 1).Text
        
        If sheetName = "" Or currentRow > 1000 Then GoTo Whoa
                                                                                            
        rangeAdress = settingsSheet.Cells(currentRow, 2).Text
        ct = settingsSheet.Cells(currentRow, 3).Text
        
        If rangeAdress = "" Or ct = "" Then GoTo Whoa
        
        Set rngInfo = New ClsRangeInfo
        Set rngInfo.Range = ActiveWorkbook.Sheets(sheetName).Range(rangeAdress)
        rngInfo.CheckType = ct
        mRanges.Add rngInfo
    Loop
    
Whoa:
End Sub



Private Sub checkingCell()

    
'we already saving current cell in field mCell
    Dim currentRangeInfo As ClsRangeInfo
    Dim aRange As Range
    Dim CheckType As String
    Dim val As Double
    
    mCheckOK = False
    mAlertString = ""
    mNeedAlert = False
    
    
    For Each currentRangeInfo In mRanges
       Set aRange = currentRangeInfo.Range
       CheckType = currentRangeInfo.CheckType
       
       
       If aRange.Worksheet.Name <> Cell.Worksheet.Name Then GoTo EndOfLoopBody
       
       If Not (Intersect(mCell, aRange) Is Nothing) Then
            'we strikes the rule.
            
            If Not modValues.IsFloat(Cell.Value) Then
                GoTo Whoa
            End If
            val = modValues.dblVal(Cell.Value)
            
            If CheckType = NEG_CHECK Then
                'value should be digit and should be <=0
                If val <= 0 Then
                    ' ok
                    mCheckOK = True
                Else
                    mCheckOK = False
                    mNeedAlert = True
                    mAlertString = "Value must be NEGATIVE"
                End If
                
                    
            ElseIf CheckType = POS_CHECK Then
                'value should be digit and should be >=0
                If val >= 0 Then
                    ' ok
                    mCheckOK = True
                Else
                    mCheckOK = False
                    mNeedAlert = True
                    mAlertString = "Value must be POSITIVE"
                End If
            End If
            GoTo Whoa
       End If
EndOfLoopBody:
       
    Next currentRangeInfo
    
    mCheckOK = True
    mAlertString = ""
    mNeedAlert = False
    
Whoa:
End Sub



Public Sub CheckCell(ByRef theCell As Range)
    Set mCell = theCell
    checkingCell
End Sub


Public Property Get Cell() As Range
    Set Cell = mCell
End Property

Public Property Get IsCheckPassed() As Boolean
    IsCheckPassed = mCheckOK
End Property

Public Property Get AlertString() As String
    AlertString = mAlertString
End Property

Public Property Get NeedAlert() As Boolean

    NeedAlert = True
End Property

Public Sub WriteToCell(ByVal theCellValue As Variant, Optional ByVal colorIndex As Long = -1)
    Cell.Value = theCellValue
'    If colorIndex <> -1 Then
'        Cell.DisplayFormat.Font.colorIndex = colorIndex
'    End If
End Sub
Attribute VB_Name = "KLexperiments"


Attribute VB_Name = "modCheck"
Private Const RUS_CODE As Long = 1
Private Const ENG_CODE As Long = 2


Public Sub GlobalHookForProcessingChanges(ByRef TheRange As Range)
    Dim currentCell As Range
    
    Const NEEDCHECK As Boolean = False
    
    If Not NEEDCHECK Then Exit Sub
    
    For Each currentCell In TheRange.Cells
        'here do something with cell
        modCheckSign.CheckCell currentCell
    Next currentCell
End Sub



Public Sub ProcessSelectionChange(ByRef TheRange As Range)
    Dim settings As New ClsSettings, dataCollHolder As CMNCollectionHolder, sheetName As String, dataEntry As ClsData
    On Error GoTo Whoa
    If Not IsSingleCell(TheRange) Then Exit Sub
    settings.Init
    sheetName = ActiveWorkbook.ActiveSheet.Name
    If Not settings.IsSheetWithValueLimitation(sheetName) Then Exit Sub
    Set dataCollHolder = settings.LimitationDataForSheet(sheetName)
    For Each dataEntry In dataCollHolder.HeldCollection
        If IntersectsWithLimitedRange(TheRange, dataEntry.DataRangeName) Then
            '|fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            If languageCode() = RUS_CODE Then
                MakeLimitation TheRange, dataEntry.ValuesRangeRus
            Else
                MakeLimitation TheRange, dataEntry.ValuesRangeEng
            End If
        End If
    Next dataEntry
    Exit Sub
Whoa:
    
End Sub

Public Sub ProcessValueChanges(ByRef TheRange As Range)
    Dim settings As New ClsSettings, dataCollHolder As CMNCollectionHolder, sheetName As String, dataEntry As ClsData, aCell As Range, dataColl As Collection
    On Error GoTo Whoa
    settings.Init
    sheetName = ActiveWorkbook.ActiveSheet.Name
    If Not settings.IsSheetWithValueLimitation(sheetName) Then Exit Sub
    Set dataCollHolder = settings.LimitationDataForSheet(sheetName)
    Set dataColl = dataCollHolder.HeldCollection
    For Each aCell In TheRange
        ProcessValueChangesSingleCell aCell, dataColl
    Next aCell
Whoa:
    
End Sub

Private Sub ProcessValueChangesSingleCell(ByRef aCell As Range, ByRef dataColl As Collection)
    Dim valueRange As String
    For Each dataEntry In dataColl
        If IntersectsWithLimitedRange(aCell, dataEntry.DataRangeName) Then
            If languageCode() = RUS_CODE Then
                valueRange = dataEntry.ValuesRangeRus
            Else
                valueRange = dataEntry.ValuesRangeEng
            End If
            '|fffd||fffd|, |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
            If IsValidValue(aCell, valueRange) Then
                SetCellNormal aCell
            Else
                SetCellError aCell
            End If
        End If
    Next dataEntry
End Sub



Public Function IsSingleCell(ByRef TheRange As Range) As Boolean
    IsSingleCell = (TheRange.Cells.Count = 1)
End Function


Public Function IntersectsWithLimitedRange(ByRef TheRange, ByVal limitedRangeName As String) As Boolean
    IntersectsWithLimitedRange = Not (Intersect(TheRange, ActiveWorkbook.ActiveSheet.Range(limitedRangeName)) Is Nothing)
End Function


Public Function IsValidValue(ByRef TheRange As Range, ByVal ValuesRangeName As String) As Boolean
    If Not IsSingleCell(TheRange) Then
        IsValidValue = False
        Exit Function
    End If
    IsValidValue = modSettings.IsValueValid(TheRange.Value, ValuesRangeName)
End Function


Public Sub ProcessRange(ByRef TheRange As Range)
    
End Sub



Public Sub MakeLimitation(ByRef TheRange As Range, ByVal ValuesRangeName As String)
    If Not IsSingleCell(TheRange) Then Exit Sub
    'If Not IsValidValue(theRange, ValuesRangeName) Then theRange.Value2 = Empty
    
    With TheRange.Validation
        .Delete
        .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:= _
        xlBetween, Formula1:="=" + ValuesRangeName
        .IgnoreBlank = True
        .InCellDropdown = True
        .InputTitle = ""
        .ErrorTitle = ""
        .InputMessage = ""
        .ErrorMessage = ""
        .ShowInput = True
        .ShowError = True
    End With
End Sub

Public Sub SetCellError(ByRef TheRange As Range)
    If Not IsSingleCell(TheRange) Then Exit Sub
    TheRange.Font.Color = 255
End Sub

Public Sub SetCellNormal(ByRef TheRange As Range)
    If Not IsSingleCell(TheRange) Then Exit Sub
    TheRange.Font.colorIndex = xlAutomatic
End Sub

Private Function languageCode() As Long
    languageCode = Range("LNGn").Value2
End Function


Attribute VB_Name = "modCheckSign"
Public Const NEGATIVE_CHECK As String = "SIGN_NEGATIVE"
Public Const POSITIVE_CHECK As String = "SIGN_POSITIVE"




Private checkerInstance As ClsSignChecker

Public Sub InitializeChecker()
    'MsgBox "Blah", vbApplicationModal
    Set checkerInstance = New ClsSignChecker
    
    checkerInstance.Init
End Sub


Public Sub CheckCell(ByRef theCell As Range)
    Dim checker As ClsSignChecker
    Set checker = checkerInstance
    
    
    
    'If checker Is Nothing Then
    '    InitializeChecker
    'End If
    
    If checker Is Nothing Then
        InitializeChecker
        Set checker = checkerInstance
    End If
    
    
    
    checker.CheckCell theCell
    
    If Not checker.IsCheckPassed Then
        If checker.NeedAlert Then
            MsgBox checker.AlertString, vbCritical, "Notify"
        End If
        checker.WriteToCell "INCORRECT_VALUE", 666
    End If
End Sub


Attribute VB_Name = "modSettings"


Public Function IsSheetWithValueLimitiation(ByVal sheetName As String) As Boolean

End Function


Public Function IsValueValid(ByVal val As Variant, ByVal valueRange As String) As Boolean
    Dim r As Range, c As Range
    Set r = Range(valueRange)
    For Each c In r.Cells
        If c.Value2 = val Then
            IsValueValid = True
            Exit Function
        End If
    Next c
    IsValueValid = False
End Function
Attribute VB_Name = "modTools"

'
'Private Const NOMACRO_SHEET As String = "NOMACRO"
'Private Const SETTINGS_SHEET As String = "settings"
'
'
'Public Sub ShowAllSheets()
'    Dim ws As Worksheet, sheetName As String
'
'
'    For Each ws In ThisWorkbook.Sheets
'        sheetName = ws.Name
'        If sheetName <> SETTINGS_SHEET Then ws.Visible = xlSheetVisible
'    Next ws
'    'hide no macro
'    ThisWorkbook.Sheets(NOMACRO_SHEET).Visible = xlSheetHidden
'
'End Sub
'
'
'Public Sub HideAllSheets()
'    Dim ws As Worksheet, sheetName As String
'
'
'    ThisWorkbook.Sheets(NOMACRO_SHEET).Visible = xlSheetVisible
'    For Each ws In ThisWorkbook.Sheets
'        sheetName = ws.Name
'        If sheetName <> SETTINGS_SHEET And sheetName <> NOMACRO_SHEET Then ws.Visible = xlSheetHidden
'    Next ws
'
'End Sub

Function GetSheet(ByVal sheetName As String) As Worksheet
    Dim Worksheet As Worksheet
    Dim result As Boolean
    
    For Each Worksheet In Worksheets
        If Worksheet.Name = sheetName Then
            Set GetSheet = Worksheet
            Exit Function
        End If
    Next Worksheet
End Function

Attribute VB_Name = "modValues"


'Public Type DataFieldNumbers
'    RALPortfolio As Integer
'    RALAccount As Integer
'    PurchaseDeal As Integer
'    Mnemo As Integer
'    Domestic As Integer
'    ISIN As Integer
'    Quantity As Integer
'    PurchaseDate As Integer
'    PurchasePrice As Integer
'    SaleDate As Integer
'    SalePrice As Integer
'End Type

Public Function IsLong(ByVal tmp As Variant) As Boolean
    If IsEmpty(longVal(tmp)) Then
        IsLong = False
    Else
        IsLong = True
    End If
End Function

Public Function IsDateCustom(ByVal tmp As Variant) As Boolean
    IsDateCustom = IsDate(tmp)
End Function
    


Public Function IsFloat(ByVal tmp As Variant) As Boolean
    If IsEmpty(dblVal(tmp)) Then
        IsFloat = False
    Else
        IsFloat = True
    End If
End Function


Public Function longVal(ByVal tmp As Variant) As Long
    If IsNull(tmp) Then
        GoTo NotValidValue
    Else
        If IsNumeric(tmp) Then
            On Error GoTo NotValidValue
            longVal = CLng(tmp)
        Else
            GoTo NotValidValue
        End If
    End If
    Exit Function
    
NotValidValue:
    longVal = Empty
End Function

Public Function dblVal(ByVal tmp As Variant) As Double
    If IsNull(tmp) Then
        GoTo NotValidValue
    Else
        If IsNumeric(tmp) Then
            On Error GoTo NotValidValue
            dblVal = CDbl(tmp)
        Else
            GoTo NotValidValue
        End If
    End If
    Exit Function
    
NotValidValue:
    dblVal = Empty
End Function

Public Function strVal(ByVal tmp As Variant) As String
    If IsNull(tmp) Then
        strVal = Empty
    Else
        strVal = Trim$(tmp)
    End If
End Function

Public Function dateVal(ByVal tmp As Variant) As Date
    If IsNull(tmp) Then
        GoTo NotValidValue
    Else
        If IsDate(tmp) Then
            On Error GoTo NotValidValue
            dateVal = CDate(tmp)
        Else
            GoTo NotValidValue
        End If
    End If
    
    If Year(dateVal) < 1900 Then GoTo NotValidValue
    Exit Function
    
NotValidValue:
    dateVal = Empty
End Function

Public Function intFromString(ByVal Value As String) As Long
    Dim regex As Object
    Set regex = CreateObject("VBScript.RegExp")
    Dim onlyDigits As String
    regex.Pattern = "\D"
    onlyDigits = regex.Replace(Value, "")
    intFromString = CLng(onlyDigits)
End Function

Attribute VB_Name = "|fffd||fffd||fffd||fffd|1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "|fffd||fffd||fffd||fffd|10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|12"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|13"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|14"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|15"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|16"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|17"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|18"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|26"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|33"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|37"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|60"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|7"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd|9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
    modCheckSign.InitializeChecker
End Sub


INQUEST-PP=macro
