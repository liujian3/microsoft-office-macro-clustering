Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Today5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Compare Text

Private Sub Worksheet_Change(ByVal Target As Range)
    On Error GoTo endRoutine
    If Target = Range("c18") Then changedMethod
endRoutine:
End Sub



Private Sub changedMethod()
    If Range("c18").Value = "SIMULATION" Then
        Range("c19").Interior.ColorIndex = 2
    Else
        Range("c19").Interior.ColorIndex = 15
        Range("c19") = ""
    End If
End Sub
Attribute VB_Name = "crFactorCorr"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 3, 0, MSForms, CommandButton"
Option Explicit

Private Sub ReCreateTable()

    On Error GoTo errorHandler
    Application.ScreenUpdating = False

    Dim basketID$: basketID = Range("NX_" & ActiveSheet.Name & "_M_BasketID").Value
    Dim noFactors As Integer: noFactors = Range("NX_" & ActiveSheet.Name & "_M_NumberFactors").Value
    Dim betaName$: betaName = "NX_" & ActiveSheet.Name & "_M_BetaTable"
    Dim betaRange As Range: Set betaRange = Range(betaName)
    
    If noFactors < 1 Then
        MsgBox "Number of factors must be a positive integer", "NumeriX Correlation"
        GoTo errorHandler
    End If
    
    betaRange.Clear
    Dim temp As Variant: temp = Application.Run("nxlibview", basketID)
    Dim rsize As Integer: rsize = UBound(temp) - 1
    If rsize = 0 Then Exit Sub
    
    temp = Application.Run("nxlibview", basketID, "Name")
    rsize = UBound(temp)
    Range(betaRange.Cells(1, 1), betaRange(rsize + 1, noFactors + 1)).Select
    ActiveWorkbook.Names.Add Name:=betaName, RefersTo:=Selection

' fill and format
    betaRange.Cells(1, 1) = "Name"
    Range(betaRange.Cells(2, 1), betaRange.Cells(rsize + 1, 1)) = temp
    Dim i As Integer
    For i = 1 To noFactors
        betaRange.Cells(1, i + 1) = "Beta" & i
        Range(betaRange.Cells(2, i + 1), betaRange.Cells(rsize + 1, i + 1)) = 0.2
    Next

    With Selection.Interior
        .ColorIndex = 2: .Pattern = xlSolid
    End With
    doBorders xlEdgeLeft
    doBorders xlEdgeTop
    doBorders xlEdgeBottom
    doBorders xlEdgeRight
    doBorders xlInsideVertical
    doBorders xlInsideHorizontal
    
    Range(betaRange.Cells(1, 1), betaRange.Cells(1, noFactors + 1)).Select
    Selection.Interior.ColorIndex = 55
    Selection.Font.ColorIndex = 2
    Range(betaRange.Cells(1, 1), betaRange.Cells(rsize + 1, 1)).Select
    Selection.Interior.ColorIndex = 55
    Selection.Font.ColorIndex = 2
    
    Columns("E:E").EntireColumn.AutoFit
errorHandler:
    Application.ScreenUpdating = True
End Sub

Private Sub doBorders(borderName)
    With Selection.Borders(borderName)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
End Sub

Private Sub CommandButton1_Click()
    ReCreateTable
End Sub
Attribute VB_Name = "d_credit_CustomPortfolio"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Option Compare Text

' The set of names. Loaded on demand or when source changes
Private listNames$()

Private Sub Initialise()
    On Error GoTo errorHandler
    Dim temp: temp = Application.Run("nxlibview", Range("Nx_" & Me.Name & "_DropDownSource").Value, "Name")
    ReDim listNames(1 To UBound(temp))
    Dim i As Integer
    For i = 1 To UBound(temp)
        listNames(i) = temp(i, 1)
    Next
errorHandler:
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    Dim isect As Range
    ' has a single dropdown cell changed?
    Set isect = Application.Intersect(Range("Nx_" & Me.Name & "_DropDownCells"), Target)
    If Not (isect Is Nothing) Then
        If isect.Cells.Count = 1 Then
            changedDropDownCell isect
            Exit Sub
        End If
    End If
    ' has the source changed?
    Set isect = Application.Intersect(Range("Nx_" & Me.Name & "_DropDownSource"), Target)
    If Not (isect Is Nothing) Then
        Initialise
        Exit Sub
    End If
End Sub

Private Sub changedDropDownCell(ByVal Target As Range)
    ' for blanks, just eliminate the validation
    If Target.Value = "" Then
            Target.Validation.Delete
            Exit Sub
    End If

    ' lazy get of names
    Dim passed As Boolean: passed = False
    On Error GoTo failure
    Dim temp As Integer: temp = UBound(listNames)
    passed = True
failure:
    If passed = False Then Initialise
    On Error Resume Next

    ' build the validation list
    ' could do better if we know its strictly alphabetical
    Dim lenValue As Integer: lenValue = Len(Target.Value)
    Dim tarValue$: tarValue = Target.Value
    Dim formString$
    Dim i As Integer
    For i = 1 To UBound(listNames)
        If Left(listNames(i), lenValue) = tarValue Then
            formString = formString & listNames(i) & ","
        End If
    Next
    ' replace validation
    Target.Validation.Delete
    If formString <> "" Then
        formString = Left(formString, Len(formString) - 1) 'trim trailing ","
        With Target.Validation
            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, Operator:=xlBetween, Formula1:=formString
            .IgnoreBlank = True
            .InCellDropdown = True
            .ShowInput = False
            .ShowError = False
        End With
        Target.Select
    End If
End Sub

Attribute VB_Name = "prodCDO"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CommandButton1_Click()

End Sub
Attribute VB_Name = "repCashflows3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()
    Application.ScreenUpdating = False
    doOneTable "NX_" & ActiveSheet.Name & "_R_CF_ReportID1", "NX_" & ActiveSheet.Name & "_R_CF_ReportOut1"
    doOneTable "NX_" & ActiveSheet.Name & "_R_CF_ReportID2", "NX_" & ActiveSheet.Name & "_R_CF_ReportOut2"
    doOneTable "NX_" & ActiveSheet.Name & "_R_CF_ReportID3", "NX_" & ActiveSheet.Name & "_R_CF_ReportOut3"
    Columns("C:D").EntireColumn.AutoFit
    Columns("G:H").EntireColumn.AutoFit
    Columns("K:L").EntireColumn.AutoFit
    Application.ScreenUpdating = True
End Sub

Private Sub doOneTable(IdRngName$, outRngName$)
    On Error GoTo errorHandler
    Dim outRng As Range: Set outRng = Range(outRngName)
    Dim temp As Variant: temp = Application.Run("NxLibView", Range(IdRngName).Cells(1))
    outRng.Clear
    Dim size As Integer: size = UBound(temp) - 1
    If size = 0 Then Exit Sub
    Range(outRng.Cells(1), outRng.Cells(1).Offset(size - 1, 2)).Select
    ActiveWorkbook.Names.Add Name:=outRngName, RefersTo:=Selection
    Selection.FormulaArray = "=nxLibView(R[-3]C,R[-1]C:R[-1]C[2])"
    doBorders xlEdgeLeft
    doBorders xlEdgeTop
    doBorders xlEdgeBottom
    doBorders xlEdgeRight
    doBorders xlInsideVertical
    doBorders xlInsideHorizontal
    With Selection.Interior
        .ColorIndex = 2
        .Pattern = xlSolid
    End With
    outRng.Cells(1).Select
    Range(Selection, Selection.End(xlDown)).Select
    Selection.NumberFormat = "[$-409]d-mmm-yyyy;@"
    outRng.Cells(1).Offset(0, 1).Select
    Range(Selection, Selection.End(xlDown)).Select
    Range(Selection, Selection.End(xlToRight)).Select
    Selection.NumberFormat = "#,##0.00_ ;[Red]-#,##0.00 "
    Range("C4").Formula = "=Today()"
    Range("C5").Formula = "=Now()"
errorHandler:
    Range("C4") = Range("C4").Value
    Range("C5") = Range("C5").Value
End Sub

Private Sub doBorders(borderName)
    With Selection.Borders(borderName)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
End Sub
Attribute VB_Name = "repCreditDeltaGrid"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "CommandButton1, 3, 0, MSForms, CommandButton"
Option Explicit
Option Compare Text


Public Sub generateGrid()
    On Error GoTo errorHandler
    Application.ScreenUpdating = False
    Dim riskID$: riskID = Range("NX_" & Me.Name & "_R_RiskID").Value
    Dim riskNm$: riskNm = Range("NX_" & Me.Name & "_R_RiskValue").Value
    Dim riskCH$: riskCH = "End Tenor"
    Dim riskRH$: riskRH = "Asset Name"
    
    Dim outRng As Range: Set outRng = Range("NX_" & Me.Name & "_R_Output")
    outRng.Clear

    Dim ViewHeads: ReDim ViewHeads(1 To 3)
    ViewHeads(1) = riskNm
    ViewHeads(2) = riskCH
    ViewHeads(3) = riskRH
    Dim view: view = Application.Run("NxLibView", riskID)
    If UBound(view) - 1 = 0 Then Exit Sub
    
    view = Application.Run("NxLibView", riskID, ViewHeads)
    
    Dim countCol As Integer: countCol = 1
    Dim countRow As Integer: countRow = 1
    Dim i As Integer, j As Integer, k As Integer
    
    Dim colHeads: ReDim colHeads(1 To UBound(view))
    Dim rowHeads: ReDim rowHeads(1 To UBound(view))
    colHeads(1) = view(1, 2)
    rowHeads(1) = view(1, 3)
    
    ' get Unique lists
    For i = 2 To UBound(view)
        Dim addCol As Boolean: addCol = True
        Dim addRow As Boolean: addRow = True
        For j = 1 To countCol
            If (colHeads(j) = view(i, 2)) Then addCol = False
        Next
        If addCol Then
            countCol = countCol + 1
            colHeads(countCol) = view(i, 2)
        End If
        
        For j = 1 To countRow
            If (rowHeads(countRow) = view(i, 3)) Then addRow = False
        Next
        If addRow Then
            countRow = countRow + 1
            rowHeads(countRow) = view(i, 3)
        End If
    Next
    
    ReDim Preserve colHeads(1 To countCol)
    ReDim Preserve rowHeads(1 To countRow)
    
    ' now sort the tenors
    Dim sortColHeads() As Integer: ReDim sortColHeads(1 To countCol)
    For i = 1 To countCol
        sortColHeads(i) = CInt(Left(colHeads(i), Len(colHeads(i)) - 1))
        If Right(colHeads(i), 1) = "Y" Then sortColHeads(i) = sortColHeads(i) * 12
    Next
    
    For i = 1 To countCol - 1
        For j = i To countCol
            If (sortColHeads(i) > sortColHeads(j)) Then
                Dim temp As Integer
                temp = sortColHeads(i)
                sortColHeads(i) = sortColHeads(j)
                sortColHeads(j) = temp
            End If
        Next
    Next
    
    For i = 1 To countCol
        If Int(sortColHeads(i) / 12) = sortColHeads(i) / 12 Then
            colHeads(i) = sortColHeads(i) / 12 & "Y"
        Else
            colHeads(i) = sortColHeads(i) & "M"
        End If
    Next
    
    ' now blatt down the data
    Range(outRng.Cells(1, 1), outRng.Cells(countRow + 1, countCol + 1)).Select
    ActiveWorkbook.Names.Add Name:="NX_" & Me.Name & "_R_Output", RefersTo:=Selection
    
    For i = 1 To countRow
        outRng.Cells(i + 1, 1) = rowHeads(i)
    Next
    For i = 1 To countCol
        outRng.Cells(1, i + 1) = colHeads(i)
    Next
    
    For i = 1 To UBound(view)
        j = 1: k = 1
        Do While view(i, 3) <> rowHeads(j): j = j + 1: Loop
        Do While view(i, 2) <> colHeads(k): k = k + 1: Loop
        outRng.Cells(j + 1, k + 1) = view(i, 1)
    Next
    
    'Format
    doBorders xlEdgeLeft
    doBorders xlEdgeTop
    doBorders xlEdgeBottom
    doBorders xlEdgeRight
    doBorders xlInsideVertical
    doBorders xlInsideHorizontal
    With Selection.Interior
        .ColorIndex = 2: .Pattern = xlSolid
    End With
    Selection.NumberFormat = "#,##0.00_ ;[Red]-#,##0.00 "
    Range(outRng.Cells(1, 1), outRng.Cells(countRow + 1, 1)).Select
    Selection.Interior.ColorIndex = 55
    Selection.Font.ColorIndex = 2
    Range(outRng.Cells(1, 1), outRng.Cells(1, countCol + 1)).Select
    Selection.Interior.ColorIndex = 55
    Selection.Font.ColorIndex = 2
    Application.ScreenUpdating = True
    Exit Sub
errorHandler:
    MsgBox "Error in generating report view", vbCritical, "NumeriX"
End Sub

Private Sub doBorders(borderName)
    With Selection.Borders(borderName)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
End Sub

Private Sub CommandButton1_Click()
    generateGrid
End Sub

Attribute VB_Name = "repDeltaGammaLadders"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()
    ActiveSheet.Calculate
    Dim outRngName$: outRngName = "NX_" & ActiveSheet.Name & "_R_IRDelta_Output"
    Dim outHeadRngName$: outHeadRngName = "NX_" & ActiveSheet.Name & "_R_IRDelta_OutputHeads"
    Dim inRngName$:   inRngName = "NX_" & ActiveSheet.Name & "_R_IRDelta_Input"
    On Error GoTo errorHandler
    Application.ScreenUpdating = False
    Dim outRng As Range: Set outRng = Range(outRngName)
    outRng.Clear
    Dim skipper: skipper = Range("NX_" & ActiveSheet.Name & "_R_IRDelta_Skip").Cells(1, 1)
    If skipper <> False Then Exit Sub
    ' resize the range
    Dim temp As Variant: temp = Application.Run("NxLibView", Range(inRngName).Cells(1, 1))
    Dim rsize As Long: rsize = UBound(temp) - 1
    If rsize = 0 Then Exit Sub
    
    temp = Application.Run("NxLibView", Range(inRngName).Cells(1, 1), "Instrument")
    rsize = UBound(temp)
    outRng.Select
    Dim headRange As Range: Set headRange = Range(outHeadRngName)
    Dim cSize As Integer: cSize = headRange.Columns.Count
    Range(outRng.Cells(1, 1), outRng.Cells(rsize, cSize)).Select
    
    Selection.FormulaArray = "=NxLibView(" & Range(inRngName).Cells(1, 1).Address & "," & headRange.Address & ")"
    ActiveWorkbook.Names.Add Name:=outRngName, RefersTo:=Selection
    
    'format
    doBorders xlEdgeLeft
    doBorders xlEdgeTop
    doBorders xlEdgeBottom
    doBorders xlEdgeRight
    doBorders xlInsideVertical
    doBorders xlInsideHorizontal
    With Selection.Interior
        .ColorIndex = 2: .Pattern = xlSolid
    End With
    Selection.NumberFormat = "#,##0.00_ ;[Red]-#,##0.00 "
    ActiveSheet.Calculate
    Range("C6").Formula = "=Today()"
    Range("C7").Formula = "=Now()"
errorHandler:
    Range("C6") = Range("C6").Value
    Range("C7") = Range("C7").Value
    Range("NX_" & ActiveSheet.Name & "_R_IRDelta_Anchor").Select
    Application.ScreenUpdating = True
End Sub

Private Sub doBorders(borderName)
    With Selection.Borders(borderName)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
End Sub

Attribute VB_Name = "repJumpDefault"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()
    Dim outRngName$: outRngName = "NX_" & ActiveSheet.Name & "_R_CRDelta_Output"
    Dim inRngName$:   inRngName = "NX_" & ActiveSheet.Name & "_R_CRDelta_Input"
    On Error GoTo errorHandler
    Application.ScreenUpdating = False
    Dim outRng As Range: Set outRng = Range(outRngName)
    outRng.Clear

    ' resize the range
    Dim temp As Variant: temp = Application.Run("NxLibView", Range(inRngName).Cells(1, 1))
    Dim rsize As Integer: rsize = UBound(temp) - 1
    If rsize = 0 Then Exit Sub

    temp = Application.Run("NxLibView", Range(inRngName).Cells(1, 1), "AssetName")
    rsize = UBound(temp)
    outRng.Select
    Dim headRange As Range
    outRng.Cells(1, 1).Offset(-1, 0).Select
    Set headRange = Range(Selection, Selection.End(xlToRight))
    Dim cSize As Integer: cSize = headRange.Columns.Count
    Range(outRng.Cells(1, 1), outRng.Cells(rsize, cSize)).Select
    
    Selection.FormulaArray = "=NxLibView(" & Range(inRngName).Cells(1, 1).Address & "," & headRange.Address & ")"
    ActiveWorkbook.Names.Add Name:=outRngName, RefersTo:=Selection
    
    'format
    doBorders xlEdgeLeft
    doBorders xlEdgeTop
    doBorders xlEdgeBottom
    doBorders xlEdgeRight
    doBorders xlInsideVertical
    If rsize > 1 Then doBorders xlInsideHorizontal
    With Selection.Interior
        .ColorIndex = 2: .Pattern = xlSolid
    End With
    Selection.NumberFormat = "#,##0.00_ ;[Red]-#,##0.00 "
    ActiveSheet.Calculate
    Range("C5").Formula = "=Today()"
    Range("C6").Formula = "=Now()"
errorHandler:
    Range("C5") = Range("C5").Value
    Range("C6") = Range("C6").Value
    Application.ScreenUpdating = True
End Sub

Private Sub doBorders(borderName)
    With Selection.Borders(borderName)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
End Sub


Attribute VB_Name = "repRecovery"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()
    Dim outRngName$: outRngName = "NX_" & ActiveSheet.Name & "_R_IRDelta_Output"
    Dim inRngName$:   inRngName = "NX_" & ActiveSheet.Name & "_R_IRDelta_Input"
    On Error GoTo errorHandler
    Application.ScreenUpdating = False
    Dim outRng As Range: Set outRng = Range(outRngName)
    outRng.Clear
    
    ' resize the range
    Dim temp As Variant: temp = Application.Run("NxLibView", Range(inRngName).Cells(1, 1))
    Dim rsize As Integer: rsize = UBound(temp) - 1
    If rsize = 0 Then Exit Sub
    
    temp = Application.Run("NxLibView", Range(inRngName).Cells(1, 1), "AssetName")
    rsize = UBound(temp)
    
    outRng.Select
    Dim headRange As Range
    outRng.Cells(1, 1).Offset(-1, 0).Select
    Set headRange = Range(Selection, Selection.End(xlToRight))
    Dim cSize As Integer: cSize = headRange.Columns.Count
    Range(outRng.Cells(1, 1), outRng.Cells(rsize, cSize)).Select
    
    Selection.FormulaArray = "=NxLibView(" & Range(inRngName).Cells(1, 1).Address & "," & headRange.Address & ")"
    ActiveWorkbook.Names.Add Name:=outRngName, RefersTo:=Selection
    
    'format
    doBorders xlEdgeLeft
    doBorders xlEdgeTop
    doBorders xlEdgeBottom
    doBorders xlEdgeRight
    If rsize > 1 Then doBorders xlInsideHorizontal
    doBorders xlInsideVertical

    With Selection.Interior
        .ColorIndex = 2: .Pattern = xlSolid
    End With
    Selection.NumberFormat = "#,##0.00_ ;[Red]-#,##0.00 "
    ActiveSheet.Calculate
    Range("C5").Formula = "=Today()"
    Range("C6").Formula = "=Now()"
errorHandler:
    Range("C5") = Range("C5").Value
    Range("C6") = Range("C6").Value
    Application.ScreenUpdating = True
End Sub

Private Sub doBorders(borderName)
    With Selection.Borders(borderName)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
End Sub


Attribute VB_Name = "repSpreadDeltaBasket"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub Worksheet_Activate()
    Dim outRngName$: outRngName = "NX_" & ActiveSheet.Name & "_R_CRDelta_Output"
    Dim inRngName$:   inRngName = "NX_" & ActiveSheet.Name & "_R_CRDelta_Input"
    On Error GoTo errorHandler
    Application.ScreenUpdating = False
    Dim outRng As Range: Set outRng = Range(outRngName)
    outRng.Clear
    ' resize the range
    Dim temp As Variant: temp = Application.Run("NxLibView", Range(inRngName).Cells(1, 1))
    Dim rsize As Integer: rsize = UBound(temp) - 1
    If rsize = 0 Then Exit Sub
    temp = Application.Run("NxLibView", Range(inRngName).Cells(1, 1), "AssetName")
    rsize = UBound(temp)
    outRng.Select
    Dim headRange As Range
    outRng.Cells(1, 1).Offset(-1, 0).Select
    Set headRange = Range(Selection, Selection.End(xlToRight))
    Dim cSize As Integer: cSize = headRange.Columns.Count
    Range(outRng.Cells(1, 1), outRng.Cells(rsize, cSize)).Select
    
    Selection.FormulaArray = "=NxLibView(" & Range(inRngName).Cells(1, 1).Address & "," & headRange.Address & ")"
    ActiveWorkbook.Names.Add Name:=outRngName, RefersTo:=Selection
    
    'format
    doBorders xlEdgeLeft
    doBorders xlEdgeTop
    doBorders xlEdgeBottom
    doBorders xlEdgeRight
    doBorders xlInsideVertical
    doBorders xlInsideHorizontal
    With Selection.Interior
        .ColorIndex = 2: .Pattern = xlSolid
    End With
    Selection.NumberFormat = "#,##0.00_ ;[Red]-#,##0.00 "
    ActiveSheet.Calculate
    Range("C5").Formula = "=Today()"
    Range("C6").Formula = "=Now()"
errorHandler:
    Range("C5") = Range("C5").Value
    Range("C6") = Range("C6").Value
    Application.ScreenUpdating = True
End Sub

Private Sub doBorders(borderName)
    With Selection.Borders(borderName)
        .LineStyle = xlContinuous: .Weight = xlThin: .ColorIndex = xlAutomatic
    End With
End Sub



INQUEST-PP=macro
