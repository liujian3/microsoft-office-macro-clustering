Attribute VB_Name = "CommonCode"
 '''MegaStat|fffd| CommonCode module  |fffd|2005 by J. B. Orris
' 10.0 graphical prob dist, double click autoexpand; RefEdits added.
' fixed p-value
' improved time/date labels

Option Private Module
Option Explicit
Option Base 1

Public globalAbortFlag As Boolean
Public globalLast As String
Public globalLastUp As Object
Public globalHelpFile As String
Public globalXL97 As Boolean
Public globalLastSheet As String
Public globalLastWorkbook As String

Public Const globalTitle = "MegaStat"
Public Const globalExpireDate = "9/1/2050"
Public Const globalCopyright = "|fffd|2005 by J. B. Orris"
Public Const globalErrVal = -1637263843

'also change copyright on Help, Help compiler options, frmAbout, and file properties

#Const compileMH = True
#If compileMH = True Then
    Public Const globalVersion = "10.0 9/20/2005 " 'Bowerman 4ed w/ Normal Plot & graphical prob dist
    Public Const globalCompileMH = True 'do not change, change const
#Else
    Public Const globalVersion = "10.0 9/19/2005 BU"
    Public Const globalCompileMH = False 'do not change, change const
#End If

Public StartTime

'StartTime = Timer '\xxx
'MsgBox "Elapsed time 1 = " & Format(Timer - StartTime, "0.000") & " sec." '\xxx
  
Sub StartProc(CurrentUserform As Object)
'ActiveWorkbook.ResetColors  'xxx

    Set globalLastUp = CurrentUserform
    globalLast = CurrentUserform.Name
    CommandBars(1).Controls("MegaStat").Controls("Repeat Last Option").Enabled = True
    CurrentUserform.Hide
       
    On Error Resume Next
    Application.DisplayStatusBar = True
    Application.StatusBar = "Running MegaStat, Press Esc to cancel."
    globalAbortFlag = False
    ScreenOFF
End Sub

Sub HelpSystem()
    Dim retval As Variant

    LoadHelpFile
    CallHelp 100
    RestoreStatusBar
End Sub

Public Sub UnloadForm(Uform As Object)
    If Uform.Name = globalLast Then
        CommandBars(1).Controls("MegaStat").Controls("Repeat Last Option").Enabled = False
    End If
End Sub

Function StopQ0(msg As String, Test As Boolean, helpID As Long, FocusObject As Object) As Boolean
' tests single value
    StopQ0 = False
' First see if it is a valid number
    If Err.number <> 0 Then
        MsgBox "Invalid or missing input.", vbExclamation + vbMsgBoxHelpButton, globalTitle, globalHelpFile, 1031
        If FocusObject <> Empty Then FocusObject.SetFocus
        StopQ0 = True
        Err.Clear
        On Error GoTo 0
        Exit Function
    End If
' Then do validation test
    If Test Then
        MsgBox msg, vbExclamation + vbMsgBoxHelpButton, globalTitle, globalHelpFile, helpID
        If FocusObject <> Empty Then FocusObject.SetFocus
        StopQ0 = True
    End If

End Function
Function StopQ1(msg As String, Test As Boolean, Rng As Range, helpID As Integer, FocusObject As Object) As Boolean
    ' selects worksheet range on error
    If Test Then
        ScreenON
        Rng.Worksheet.Activate
        Rng.Select
        MsgBox msg, vbExclamation + vbMsgBoxHelpButton, globalTitle, globalHelpFile, helpID
        UnSelect Rng
        FocusObject.SetFocus
        StopQ1 = True
    Else
        StopQ1 = False
    End If
End Function

Function StopQ2(msg As String, Test As Boolean, helpID As Long) As Boolean
' test without active userform - no SetFocus
    StopQ2 = False
' Validation test
    If Test Then
        MsgBox msg, vbExclamation + vbMsgBoxHelpButton, globalTitle, globalHelpFile, helpID
        StopQ2 = True
    End If

End Function

Function ValidateP(ByVal p As Double) As Boolean
    'check for p >0 and < 1
    If p > 0# And p < 1# Then ValidateP = True Else ValidateP = False
End Function

Sub SetTitle(Base As Range, Title As String)
    DividerLine Base
With Base.Range("A2")
        .Font.size = 12
        .value = Title
    End With
End Sub

Sub DividerLine(Location As Range)
    If ActiveCell.Row <> 1 Then Location.Range(Cells(1, 1), Cells(1, 7)).Borders(xlBottom).LineStyle = xlHairline
End Sub

Sub CopyOutputSheet()
    Dim temp As Worksheet
    
    RestoreStatusBar
        
    On Error GoTo NoOutputSheet
    
    'Output
    Worksheets("Output").Copy After:=Worksheets("Output")
    Application.DisplayAlerts = False
    Worksheets("Output").Delete
    Application.DisplayAlerts = True
    Exit Sub
NoOutputSheet:
    On Error GoTo 0
    Exit Sub
End Sub

Sub ScreenON()
    Application.ScreenUpdating = True
End Sub

Sub ScreenOFF()
    Application.ScreenUpdating = False
End Sub


Sub FormatPvalue(loc As Range, color As Integer)
    If IsError(loc) = True Then
        Exit Sub
    End If
    If loc < 0.00005 Then loc.NumberFormat = "0.00E+00" Else loc.NumberFormat = ".0000"
    If color = xlNo Then Exit Sub
    Select Case loc.value
        Case Is <= 0.01
            loc.Interior.ColorIndex = 6
        Case Is <= 0.05
            loc.Interior.ColorIndex = 19
    End Select
End Sub

Sub DeleteOutputSheet()
    Dim ans As Integer
    RestoreStatusBar
    ans = MsgBox("Output sheet will be permanently deleted.", vbOKCancel + vbExclamation + vbMsgBoxHelpButton + vbDefaultButton2, globalTitle, globalHelpFile, 2003)
    If ans = vbOK Then
        On Error Resume Next
        Application.DisplayAlerts = False
        Worksheets("Output").Delete
        Application.DisplayAlerts = True
        
        If ChartDataSheetExistsQ() = True Then DeleteChartDataSheet
        
        On Error GoTo 0
    End If
End Sub

Public Function ChartDataSheetExistsQ() As Boolean
    Dim sheet As Worksheet
    ChartDataSheetExistsQ = False

    For Each sheet In ActiveWorkbook.Worksheets
        If sheet.Name = "ChartDataSheet_" Then
            ChartDataSheetExistsQ = True
            Exit Function
        End If
    Next sheet

End Function

Public Sub ViewChartDataSheet()
    If ChartDataSheetExistsQ() = True Then
        ActiveWorkbook.Sheets("ChartDataSheet_").Visible = True
        ActiveWorkbook.Sheets("ChartDataSheet_").Select
    Else
        ChartDataSheetMsg
    End If
End Sub
Public Sub HideChartDataSheet()
    If ChartDataSheetExistsQ() = True Then
        ActiveWorkbook.Sheets("ChartDataSheet_").Visible = False
    Else
        ChartDataSheetMsg
    End If
End Sub
Public Sub DeleteChartDataSheet()
    Dim ans As Integer
    If ChartDataSheetExistsQ() = True Then
        ans = MsgBox("Delete ChartDataSheet?", vbOKCancel + vbExclamation + vbMsgBoxHelpButton + vbDefaultButton1, globalTitle, globalHelpFile, 4735)
        If ans = vbOK Then
            Application.DisplayAlerts = False
            Sheets("ChartDataSheet_").Delete
            Application.DisplayAlerts = True
        End If
    Else
        ChartDataSheetMsg
        End If
End Sub

Public Sub ChartDataSheetMsg()
        MsgBox "No ChartDataSheet exists.", vbExclamation + vbMsgBoxHelpButton, globalTitle, globalHelpFile, 4735
End Sub
 
'positions cursor after output is completed and do other clean-up stuff
Sub EndProc(Base As Range)
    ClearSheets
    ActiveWindow.ScrollRow = Base.Row
    ActiveWindow.ScrollColumn = 1
    Base.Select
    ScreenON
    RestoreStatusBar
End Sub

Sub SetFont(ByRef X As Object)
    With X
        X.Font.Name = "Arial"
        X.Font.FontStyle = "Regular"
        X.Font.size = 10
    End With
End Sub

Sub FmtOutline(loc As Range)
    With loc
        .Borders(xlLeft).Weight = xlThin
        .Borders(xlRight).Weight = xlThin
        .Borders(xlTop).Weight = xlThin
        .Borders(xlBottom).Weight = xlThin
        .BorderAround Weight:=xlThin
    End With
End Sub

Sub FmtHeader1(loc As Range)
    With loc
        .HorizontalAlignment = xlRight
        .VerticalAlignment = xlBottom
        .Font.FontStyle = "Italic"
        .Rows(1).Borders(xlTop).Weight = xlThin
        .Rows(.Rows.count).Borders(xlBottom).Weight = xlHairline
        .BorderAround LineStyle:=xlNone
    End With
End Sub

Sub FmtBottomRow(loc As Range)
    With loc
        .Borders(xlTop).Weight = xlHairline
        .Borders(xlBottom).Weight = xlThin
    End With
End Sub

Sub FmtBottomRow1(loc As Range)
    With loc
        .Borders(xlBottom).Weight = xlThin
    End With
End Sub

Sub InsertDescHeader()

    Dim st As String
    
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler
    RestoreStatusBar
    If Len(globalLastSheet) > 0 Then st = "!" Else st = ""
    Selection.Resize(5, 1).EntireRow.Insert Shift:=xlDown
    With Selection
        .Offset(0, 1) = "Description:"
        .Offset(1, 1) = "Name:"
        .Offset(2, 1) = "Data source:"
        .Offset(2, 2) = ActiveWorkbook.FullName & st & globalLastSheet
        .Offset(3, 1) = "Date/Time:"
        .Offset(3, 2) = " " & Application.Text(Now(), "d-mmm-yy") & " " & Application.Text(Now(), "h:mm AM/PM") & " | MegaStat version: " & globalVersion
    End With
    Selection.Range("B1:B4").HorizontalAlignment = xlRight
    Selection.Range("C4").HorizontalAlignment = xlLeft
    Exit Sub
    
MainErrorHandler:
    If errcheck("Insert header.") Then
        On Error GoTo 0
        Exit Sub
    Else
       Resume
    End If

End Sub

'utility proc for Frequency and Xtab
Sub setCountArray(nRows As Integer, SpecCol As Integer, ByRef SpecArray As Variant, ByRef Spec As Range)
    Dim i As Integer
    Dim j As Integer
    
    For i = 1 To nRows
        For j = 1 To SpecCol
            SpecArray(i, j) = Trim(Spec.Rows(i).Columns(j).Value2)
        Next j
    Next i

End Sub

Sub EqualWidthCol(Area As Range) '\ input area is .columns
    Dim value As Range
    Dim maxWidth As Integer
    
    'AutoFit and then make all columns same width as largest
    Area.AutoFit
    For Each value In Area.Cells
        If value.ColumnWidth > maxWidth Then maxWidth = value.ColumnWidth
    Next value
    Area.ColumnWidth = maxWidth
End Sub

Sub RestoreStatusBar()
    Application.DisplayStatusBar = True
    Application.StatusBar = "Ready"
    globalAbortFlag = False
End Sub

Sub UnSelect(Rng As Range)
    Rng.Range("A1").Select
End Sub

Function MakeNewOutputSheet()
    Dim ws As Worksheet
      
    globalAbortFlag = False
    MakeNewOutputSheet = True
    
'#If globalCompileMH = False Then
'    'check expiraton date if developmental version
'    If Now() >= DateValue(globalExpireDate) Then
'        MsgBox "This version of MegaStat has expired.", vbExclamation + vbMsgBoxHelpButton, globalTitle, globalHelpFile, 2005
'        MakeNewOutputSheet = False
'        Exit Function
'    End If
'#End If
    
    'if Output sheet exists move to last cell, else make new sheet first
    On Error GoTo MakeNewSheet
    ActiveWorkbook.Worksheets("Output").Select
    ActiveSheet.Cells.SpecialCells(xlLastCell).Offset(1, 0).Select
    On Error GoTo 0
    globalAbortFlag = False
    Exit Function
    
MakeNewSheet:
    On Error Resume Next

    ActiveWorkbook.Sheets.Add before:=ActiveWorkbook.ActiveSheet
    Set ws = ActiveWorkbook.ActiveSheet
    ws.Name = "Output"
    ActiveWindow.DisplayGridlines = False
    With ws.Cells.Font
        .Name = "Arial"
        .FontStyle = "Regular"
        .size = 10
    End With

    'Set up header/footer
'    ws.PageSetup.LeftHeader = "MegaStat |fffd| " & Left(globalVersion, 4) & " " & Chr(169) & " 2005 " & _
'        Application.Text(Now(), "d-mmm-yy") & " " & Application.Text(Now(), "h:mm AM/PM")
'by J. B. Orris, Butler University  "
    Range("A1").Select
    globalAbortFlag = False
    Exit Function
End Function

Sub MakeNewChartDataSheet()
    Dim ws As Worksheet
    
    'if ChartDataSheet sheet exists move to last cell, else make new sheet
    On Error GoTo MakeNewSheet
    ActiveWorkbook.Worksheets("ChartDataSheet_").Visible = xlSheetVisible
    ActiveWorkbook.Worksheets("ChartDataSheet_").Select
    ActiveSheet.Cells.SpecialCells(xlLastCell).Offset(1, 0).Select
    ActiveWorkbook.Worksheets("ChartDataSheet_").Visible = xlHidden
    ActiveWorkbook.Worksheets("Output").Select
    On Error GoTo 0
    globalAbortFlag = False
    Exit Sub
    
MakeNewSheet:
    On Error Resume Next
    ActiveWorkbook.Sheets.Add before:=ActiveWorkbook.ActiveSheet
    Set ws = ActiveWorkbook.ActiveSheet
       
    ws.Name = "ChartDataSheet_"
    Range("A1").Select
    ws.Range("A1").value = "This worksheet contains values required for MegaStat charts."
    ws.Visible = xlSheetHidden
    ActiveWorkbook.Worksheets("Output").Select

    globalAbortFlag = False
    Exit Sub
End Sub

Function MyDevSq(X As Variant) As Double
    MyDevSq = Application.DevSq(X)
    If MyDevSq <= 1E-16 Then MyDevSq = 0#
End Function

Function MyStdev(X As Variant) As Double
    Dim n As Integer
    n = Application.count(X)
    If n = 1 Then MyStdev = 0 Else MyStdev = Sqr(MyDevSq(X) / (n - 1))
End Function

'utility proc for Frequency and Xtab

Function DecPlaces(Data As Range) As Integer
    ' finds max decimal places in first 20 numbers in the range
    ' General format -> four places
    
    Dim X As Range
    Dim length As Integer
    Dim Fmt As String
    Dim Pos As Integer
    Dim i As Integer
    Dim lenstr As Integer
    Dim nzeros As Integer
    Dim Counter As Integer
    
    DecPlaces = 0
    Counter = 0
        
    For Each X In Data
        If Counter > 20 Then Exit For '\look only at first 20 values
        If IsNumeric(X.Value2) = True Then
            Fmt = X.NumberFormat:
            Pos = InStr(Fmt, "%")
            If Pos > 0 Then Mid(Fmt, Pos, 1) = "0"
            Pos = InStr(Fmt, ".")
            lenstr = Len(Fmt)
            If Fmt = "General" Or Pos = 0 Then  '\if General format then try to assess places
                length = Application.Min(Len(Application.Text(Abs(X.Value2 - Int(X.Value2)), "0.##########")) - 2, 4)
            Else
                If Pos <= lenstr Then '\ count zeros
                length = 0
                    For i = Pos + 1 To lenstr
                        If Mid(Fmt, i, 1) = "0" Or Mid(Fmt, i, 1) = "#" Then length = length + 1 Else Exit For
                    Next i
                End If
            End If
            '\check for 0 format
            If Pos = 0 And (Fmt = "0" Or Fmt = "#") Then length = 0
            If length > DecPlaces Then DecPlaces = length
        End If
        Counter = Counter + 1
    Next X
End Function

Function AutoFormat(Max As Integer, places As Integer) As String
    Dim i As Integer
    
        AutoFormat = "#,##0"
    For i = 0 To Max + places - 1
        If i = 0 Then AutoFormat = AutoFormat & "."
        AutoFormat = AutoFormat & "0"
    Next i
    AutoFormat = AutoFormat & " " & ";-" & AutoFormat & " "
        
End Function

Function LabelCheck(Rng As Range) As Integer
    Dim Y As Range
    Dim start As Integer
    Dim n As Integer
    Dim i As Integer
    Dim ans As Integer
    Dim Sum As Integer

    'check labels; returns vbNo if *any* numeric values encountered
    RestoreStatusBar
    n = Rng.Cells.count
    Sum = 0
    For Each Y In Rng
        If IsLabel(Y) = True Then Sum = Sum + 1
    Next Y
    
    Select Case True
        Case Sum = n 'all labels
            LabelCheck = vbYes
            Exit Function
            
        Case Sum < n  'some non-labels
            LabelCheck = vbNo
            If Rng.count = 1 Then Exit Function
            'now check to see if we have sequential values
            If (IsEmpty(Rng(1)) Or IsOKnumber(Rng.Cells(1)) = False) And n > 2 Then start = 3 Else start = 2
            n = Rng.Cells.count
            On Error Resume Next
            For i = start To n
                 If Rng(i).value - Rng(i - 1).value <> 1 Then Exit Function
                 If Err.number <> 0 Then Exit Function
            Next i
            ScreenON
            Rng.Select
            ans = MsgBox("The selected range looks like you may have intended it to be labels. Click OK if the values are actually data.  Click Cancel and convert the numbers to text if they are labels.", vbExclamation + vbMsgBoxHelpButton + vbOKCancel + vbDefaultButton2, globalTitle, globalHelpFile, 2000)
            If ans = vbOK Then LabelCheck = vbNo Else LabelCheck = vbCancel
            UnSelect Rng
            Exit Function
    End Select
End Function
Function IsLabel(C As Range) As Boolean
    'returns True if the cell contains a label else returns False
    'an empty cell is not considered a label
    Set C = C.Range("A1")
    If InStr(1, C.Text, "$") <> 0 And IsNumeric(C.Text) = True Then 'check for $ format
        IsLabel = False
        Exit Function
    End If
    If Application.IsText(C.value) = True _
        Or Application.IsLogical(C.value) = True _
        Or Application.IsErr(C.value) = True _
        Or InStr(1, C.Text, ":") <> 0 Then
        IsLabel = True
    Else
        IsLabel = False
    End If

End Function
Function errcheck(Str As String) As Integer
    errcheck = vbNo
    Select Case Err.number
        Case 0
            'shouldn't get here, but just in case, we will assume it it not a real error
            errcheck = vbNo
            globalAbortFlag = False
        Case 18 '\ User interupt
            errcheck = MsgBox("User interupt in " & Str & Chr(13) & Chr(13) & "Do you really want to stop?", vbQuestion + vbYesNo + vbDefaultButton1 + vbMsgBoxHelpButton, globalTitle, globalHelpFile, 2004)
            If errcheck = vbYes Then globalAbortFlag = True
        Case Else '\other error
            MsgBox "Error No. " & Err.number & " (" & Err.Description & ") has occurred in " & Str & Chr(13) & Chr(13) & "Click 'Help' for more information.", vbCritical + vbMsgBoxHelpButton, globalTitle, globalHelpFile, 1000
            globalAbortFlag = True
            errcheck = vbYes
    End Select

    If errcheck = vbYes Then
        On Error GoTo 0
        ScreenON
        RestoreStatusBar
    End If
End Function

Function LenTrim(st As String) As Integer
    LenTrim = Len(Trim(st))
End Function

Function ValidRange(BoxRef As Object, CheckMultiQ As Integer) As Boolean
    Dim Rng As Range
    Dim st As String
    
    ValidRange = True  ' change to False if error encountered

    'check length
    If StopQ0("Must specify range.", LenTrim(BoxRef.Text) = 0, 1020, BoxRef) = True Then
        ValidRange = False
        Exit Function
    End If

    'check for other errors
    Err.Clear

    On Error Resume Next
    If Application.ReferenceStyle = xlR1C1 Then
        BoxRef.Text = Application.ConvertFormula(BoxRef.Text, xlR1C1, xlA1)
        st = Range(BoxRef.Text).Address
    Else
        st = Range(BoxRef.Text).Address
    End If
    
    If StopQ0("Invalid range.", Err.number <> 0, 1031, BoxRef) = True Then
        ValidRange = False
        Err.Clear
        On Error GoTo 0
        Exit Function
    End If
    Set Rng = Range(BoxRef.Text)
    
    'check empty
    If StopQ1("Selected range is empty.", Application.CountA(Range(BoxRef.Text)) = 0, Rng, 1022, BoxRef) = True Then
        ValidRange = False
        Exit Function
    End If

    If CheckMultiQ = vbYes Then
        If StopQ1("This option cannot work with multi-area selection.", Rng.Areas.count > 1, Rng, 1019, BoxRef) = True Then
            ValidRange = False
            Exit Function
        End If
    End If
    
    globalLastSheet = ActiveSheet.Name
    globalLastWorkbook = ActiveWorkbook.Name
    
End Function

Function Eval(X As String) As Double
    ' this function should always be followed by a StopQ0 function
        X = Trim(X)
        If Mid(X, 1, 1) <> "=" Then X = "=" & X
        On Error Resume Next
        Eval = Val(Evaluate(X))
        If Err.number <> 0 Then Eval = 0#
End Function

Function Eval2(X As String) As Double
    ' used for Userforms
    ' this function should always be followed by a StopQ0 function
        X = Trim(X)
        If X = "-" Or Len(X) = 0 Or X = "2" Then
            Eval2 = 0#
        Else
            On Error Resume Next
            Eval2 = Val(Evaluate(X))
            If Err.number <> 0 Then Eval2 = 0#
        End If
End Function

Sub OpenUserForm(Optional Which As String = "Menu")
    Dim win As Window
    Dim VisWinCnt As Integer
    Dim ans As Integer
    Dim Uform As UserForm

    If Which = "Menu" Then
        VisWinCnt = 0
        For Each win In Application.Windows
            If win.Visible Then VisWinCnt = VisWinCnt + 1
            Exit For
        Next win
        If VisWinCnt = 0 Then
            MsgBox "At least one worksheet must be visible."
            Exit Sub
        End If
        
        Which = CommandBars.ActionControl.Tag
    End If
    RestoreStatusBar
    
    Select Case Which
        Case "About"
            frmAbout.Tag = "About"
            frmAbout.Show

        Case "SysInfo"
            frmAbout.Tag = "SysInfo"
            frmAbout.Show
        
        Case "Descriptives"
            Set Uform = frmDesc
            SetLastSheet Uform
            frmDesc.Show
            
        Case "FreqQuant"
            Set Uform = frmFreqQuant
            SetLastSheet Uform
            frmFreqQuant.Show
            
        Case "FreqQual"
            Set Uform = frmFreqQual
            SetLastSheet Uform
            frmFreqQual.Show

        Case "FPC"
            frmFPC.Show
            
        Case "Discrete"
            frmDiscrete.Show
        
        Case "Continuous"
            frmContinuous.Show
        
        Case "Norman"
            frmDist_Normal.Show
            
        Case "tDist"
            frmDist_t.Show
            
        Case "Fdist"
            frmDist_F.Show
        
        Case "Chidist"
            frmDist_Chisq.Show
                 
        Case "ConfInt"
            frmConfInt.Show
        
        Case "MeanVs"
            Set Uform = frmMeanVs
            SetLastSheet Uform
            With frmMeanVs
                .Frame2.Visible = True
                .LabelHyp = "Hypothesized mean"
                .Caption = "Hypothesis Test: Mean vs. Hypothesized Value"
                .Tag = "MeanVs"
               .Show
            End With

        Case "VarTest"
            Set Uform = frmMeanVs
            SetLastSheet Uform
            With frmMeanVs
                .Frame2.Visible = False
                .LabelHyp = "Hypothesized variance"
                .Caption = "Chi-square Variance Test"
                .Tag = "VarTest"
               .Show
            End With

        Case "TwoGroups"
            Set Uform = frmMeanTwoGroup
            SetLastSheet Uform
            frmMeanTwoGroup.Show
            
        Case "Paired"
            Set Uform = frmMeanTwoGroup
            SetLastSheet Uform
            frmMeanPaired.OptionButton1 = True
            frmMeanPaired.Show

        Case "pVs"
            frmPtest1.Show
        
        Case "TwoP"
            frmPtest2.Show
        
        Case "ANOVA1"
            Set Uform = frmANOVA1
            SetLastSheet Uform
            frmANOVA1.Show
            
        Case "ANOVA2"
            Set Uform = frmANOVA2
            SetLastSheet Uform
            frmANOVA2.Show
            
        Case "ANOVA3"
            Set Uform = frmANOVA3
            SetLastSheet Uform
            frmANOVA3.Show
            
        Case "Scatterplot"
            Set Uform = frmScatterplot
            SetLastSheet Uform
            frmScatterplot.Show
            
        Case "Correlation"
            Set Uform = frmCorr
            SetLastSheet Uform
            With frmCorr
                .CheckData.Visible = False
                .CheckTies.Visible = False
                .Caption = "Correlation Matrix"
                .Tag = "Correlation"
               .Show
            End With
            
        Case "Regression"
            Set Uform = frmRegr
            SetLastSheet Uform
            frmRegr.Show
            
        Case "Trend"
            Set Uform = frmTSTrend
            SetLastSheet Uform
            frmTSTrend.Show
            
        Case "Deseasonalization"
            Set Uform = frmTSDS
            SetLastSheet Uform
            frmTSDS.Show
            
        Case "MovingAverage"
            Set Uform = frmTSMA
            SetLastSheet Uform
            frmTSMA.Show
            
        Case "SimpleExp"
            Set Uform = frmTSexp
            SetLastSheet Uform
            With frmTSexp
                .Tag = "SimpleExp"
                .Caption = "Simple Exponential Smoothing"
                .boxBeta.Visible = False
                .label_Beta.Visible = False
                .boxInitialTrend.Visible = False
                .Label10.Caption = "(Leave blank to use mean of first six values.)"
                .LabelValue.Visible = True
                .LabelTrend.Visible = False
                .Show
            End With
        
        Case "HoltExp"
            Set Uform = frmTSexp
            SetLastSheet Uform
            With frmTSexp
                .Tag = "HoltExp"
                .Caption = "Two-factor Exponential Smoothing"
                .boxBeta.Visible = True
                .label_Beta.Visible = True
                .boxInitialTrend.Visible = True
                .Label10.Caption = "(Leave blank to estimate from trend of first six values.)"
                .LabelValue.Visible = True
                .LabelTrend.Visible = True
                .Show
            End With
        
        Case "Contingency"
            Set Uform = frmChisq
            SetLastSheet Uform
            SetContTable
            frmChisq.Show

        Case "XTab"
            Set Uform = frmChisq
            SetLastSheet Uform
            With frmChisq
                .Caption = "Crosstabulation"
                .Tag = "XTab"
                .Height = 300
                .FrameContingency.Visible = False
                .FrameRow.Visible = True
                .FrameRow.Top = 6
                .FrameCol.Visible = True
                .FrameCol.Top = 87
                .FrameGOF.Visible = False
                .FrameOut.Visible = True
                .FrameOut.Top = 167
                .Show
            End With

        Case "GOF"
            Set Uform = frmChisq
            SetLastSheet Uform
            With frmChisq
                .Caption = "Goodness of Fit Test"
                .Tag = "GOF"
                .FrameContingency.Visible = False
                .FrameRow.Visible = False
                .FrameCol.Visible = False
                .FrameGOF.Visible = True
                .FrameGOF.Top = 12
                .FrameOut.Visible = False
                .Height = 170
                .Show
            End With

        Case "SignTest"
            Set Uform = frmNPSignTest
            SetLastSheet Uform
            frmNPSignTest.Show

            
        Case "WW"
            Set Uform = frmNP_WW
            SetLastSheet Uform
            frmNP_WW.Show
        
        Case "WMW"
            Set Uform = frmNP_WMW_SR
            SetLastSheet Uform
            With frmNP_WMW_SR
                .Tag = "WMW"
                If .Caption = "Wilcoxon Signed Ranks Test" Then
                    .InputBox1.Text = ""
                    .InputBox2.Text = ""
                End If
                .Caption = "Wilcoxon - Mann/Whitney Test"
                .Show
            End With
            
        Case "SR"
            Set Uform = frmNP_WMW_SR
            SetLastSheet Uform
            With frmNP_WMW_SR
                .Tag = "SR"
                If .Caption = "Wilcoxon - Mann/Whitney Test" Then
                    .InputBox1.Text = ""
                    .InputBox2.Text = ""
                End If
                .Caption = "Wilcoxon Signed Ranks Test"
                .Show
            End With
            
        Case "KW"
            Set Uform = frmNP_KW
            SetLastSheet Uform
            frmNP_KW.Show
            
        Case "Friedman"
            Set Uform = frmNP_Friedman
            SetLastSheet Uform
            With frmNP_Friedman
                .Tag = "Friedman"
                .Caption = "Friedman Test"
                .Show
            End With
              
        Case "Kendall"
            Set Uform = frmNP_Friedman
            SetLastSheet Uform
            With frmNP_Friedman
                .Tag = "Kendall"
                .Caption = "Kendall Coefficient of Concordance"
                .Show
            End With
                        
        Case "Rs"
            Set Uform = frmCorr
            SetLastSheet Uform
            With frmCorr
                .Tag = "Rs"
                .Caption = "Spearman Coefficient of Rank Correlation"
                .CheckData.Visible = True
                .CheckData.Visible = True
                .CheckTies.Visible = True
                .Show
            End With
                
        Case "FET"
            ans = MsgBox("Perform a 2 x 2 Chi-Square Contingency Table test with Fisher Exact Test as an Output Option.", vbOKCancel + vbMsgBoxHelpButton, globalTitle, globalHelpFile, 4890)
            If ans = vbOK Then
                Unload frmChisq
                SetContTable
                With frmChisq
                    .chkFET = True
                    .Show
                End With
            End If
            
        Case "SQC"
            Set Uform = frmSQC
            SetLastSheet Uform
            frmSQC.Show
            
         Case "RandNo"
            Set Uform = frmRandNo
            SetLastSheet Uform
            frmRandNo.Show
            
       End Select

End Sub

Public Sub SetContTable()
    'used by OpenUserForm
    With frmChisq
        .Caption = "Contingency Table Test for Independence"
        .Tag = "Contingency"
        .Height = 206
        .FrameContingency.Visible = True
        .FrameContingency.Top = 12
        .FrameRow.Visible = False
        .FrameCol.Visible = False
        .FrameGOF.Visible = False
        .FrameOut.Visible = True
        .FrameOut.Top = 68
        .chkFET = False
    End With

End Sub

Private Sub Deactivate()
    Dim st As String
    Dim lf As String
    Dim ans As Integer
    
    lf = Chr(13)
    st = "  This option will remove the 'MegaStat' item from the main menubar" & lf & lf
    st = st & "  Use Tools | Add-Ins to restore it"
        ans = MsgBox(st, vbOKCancel + vbExclamation + vbMsgBoxHelpButton + vbDefaultButton2, globalTitle, globalHelpFile, 4705)
    If ans = vbOK Then
        Application.AddIns("MegaStat").Installed = False
    End If

End Sub

Private Sub Uninstall()
    Dim st As String
    Dim lf As String
    Dim ans As Integer
    
    lf = Chr(13)
    st = "  To uninstall MegaStat use the Windows Control Panel (see Help for details)." & lf & lf
    st = st & "  MegaStat should be deactivated first.  Do you want to deactivate it now?"
        ans = MsgBox(st, vbYesNo + vbExclamation + vbMsgBoxHelpButton + vbDefaultButton2, globalTitle, globalHelpFile, 4707)
    If ans = vbYes Then Deactivate

End Sub

Function LnFact(n) As Double
    If n <= 170 Then
        LnFact = Log(Application.Fact(n))
    Else
        ' Stirling's Approximation
        LnFact = (n + 0.5) * Log(n) - n + 1 / (12 * n) - 1 / (360 * n ^ 3) + 1 / (1260 * n ^ 5) - 1 / (1680 * n ^ 7) + 0.918938533204673
    End If
End Function

Function LnPerm(n, R) As Double
    If R = 0 Then LnPerm = 0 Else LnPerm = LnFact(n) - LnFact(n - R)
End Function

Function LnComb(n, R) As Double
    If R = 0 Or R = n Then LnComb = 0 Else LnComb = LnPerm(n, R) - LnFact(R)
End Function

Function Gamma(X As Double) As Double
    Gamma = Exp(Application.GammaLn(X))
End Function

Public Sub Check_Stealth_Labels(ColLabelsQ As Integer, ByRef ColLabels As Range, ByRef InputRange As Range)
    Dim value As Range
        If InputRange.Rows(1).Row > 1 Then
            Set ColLabels = InputRange.Offset(-1, 0).Range(Cells(1, 1), Cells(1, InputRange.Columns.count)).Cells
            ColLabelsQ = vbYes
            For Each value In ColLabels
                If IsLabel(value) = False Then
                    ColLabelsQ = vbNo
                    Exit For
                End If
            Next value
            ColLabelsQ = LabelCheck(ColLabels)
        Else
            ColLabelsQ = vbNo
        End If
End Sub

Public Sub RankTempSheet(tbase As Range, TieCorr As Double)
    Dim i As Integer
    Dim j As Integer
    Dim bigN As Integer
    Dim Flag As Integer
    Dim R As Double
    Dim S As Double
    Dim t As Variant

    tbase.Offset(1, 1).CurrentRegion.Sort Key1:=tbase.Range("D2"), Order1:=xlAscending, _
        Header:=xlNo, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
        
    tbase.Offset(1, 1).CurrentRegion.NumberFormat = "#"
    bigN = tbase.Offset(1, 1).CurrentRegion.Rows.count

    tbase.Offset(bigN + 1, 3) = 1E+305 * (10 + Rnd())
    TieCorr = 0
    t = 0
    Flag = False
    For i = 1 To bigN
        If tbase.Offset(i, 3) = tbase.Offset(i + 1, 3) Then
            S = S + i
            t = t + 1
            Flag = True
        Else
            If Flag = False Then
                tbase.Offset(i, 3) = i
            Else
                S = S + i
                t = t + 1
                R = S / t
                For j = i - t + 1 To i
                    tbase.Offset(j, 3) = R
                Next j
                TieCorr = TieCorr + (t ^ 3 - t)
                S = 0
                t = 0
                Flag = False
            End If
        End If
    Next i

End Sub

Public Sub Display_pvalue(Base As Range, pcell As String, Uform As UserForm)
    Dim pBase As Range
    Dim p As Double
    
    Set pBase = Base.Range(pcell)
    pBase = Base.Range(pcell)
    p = pBase.Range("A1").value
    Select Case Uform.ComboBoxAlt.ListIndex
        Case 0
            pBase.Range("B1") = " p-value (one-tailed, upper)"
            If pBase.Offset(-1).value < 0 Then pBase.Range("A1") = 1 - p
        Case 1
            pBase.Range("B1") = " p-value (two-tailed)"
            If p < 0.5 Then
                pBase.Range("A1") = p * 2
            Else
                pBase.Range("A1") = (1 - p) * 2
            End If
        Case 2
            pBase.Range("B1") = " p-value (one-tailed, lower)"
            If pBase.Offset(-1).value > 0 Then pBase.Range("A1") = 1 - p
    End Select
    FormatPvalue pBase.Range("A1"), xlYes
End Sub

Public Sub InitComboBoxAlt(Uform As UserForm)
    With Uform.ComboBoxAlt
        If .ListIndex < 0 Then
            .Clear
            .AddItem "greater than"
            .AddItem "not equal"
            .AddItem "less than"
        End If
    End With
End Sub
Public Sub InitComboBoxCI(Uform As UserForm)
    With Uform.ComboBoxCI
        If .ListIndex < 0 Then
            .Clear
            .AddItem "99%"
            .AddItem "95%"
            .AddItem "90%"
        End If
    End With
End Sub

Public Sub OpenLast()
    On Error Resume Next
    If Len(globalLastUp.Name) = 0 Then
        MsgBox "No option has been selected.", vbExclamation + vbMsgBoxHelpButton, globalTitle, globalHelpFile, 5000
        CommandBars(1).Controls("MegaStat").Controls("Repeat Last Option").Enabled = False
    Else
        If Len(globalLastWorkbook) Then Workbooks(globalLastWorkbook).Activate
        If Len(globalLastSheet) Then Worksheets(globalLastSheet).Activate

        globalLastUp.Show
    End If
End Sub

Public Sub ClearSheets()
    Dim sheet As Worksheet
    Dim color As Integer
    color = 1
    For Each sheet In ThisWorkbook.Sheets
        color = color + 2
        With sheet
            If sheet.Name = "Tukey" Then Exit For
            .Cells.Clear
            With .Range("A1")
                .Copy
                .PasteSpecial xlPasteValues
                .value = sheet.Name & "  " & globalTitle & " Version: " & globalVersion & " " & globalCopyright
                .Font.ColorIndex = color
            End With
            With .Range("A2")
                .Copy
                .PasteSpecial xlPasteValues
            End With
        End With
    Next sheet
    ThisWorkbook.Sheets("TempSheet").Range("A2").Copy
    ThisWorkbook.Sheets("TempSheet").Range("A2").PasteSpecial xlPasteValues
    
    Application.CutCopyMode = False
End Sub

Public Function IsItSilly(Data As Range) As Integer
    Dim R As Double
    
    IsItSilly = vbNo
    If Data.Columns.count > 3 Then Exit Function
    R = Application.Average(Data.Columns(1)) / Application.Average(Data.Columns(2))
    
    If R > 4# Or R < 0.2 Then
        Data.Select
        IsItSilly = 13 - MsgBox("It looks like you may have made an improper data selection. Click Help for details." & _
            Chr(13) & Chr(13) & "  Do you wish to continue with the selected data?", vbQuestion + vbYesNo + vbDefaultButton2 + vbMsgBoxHelpButton, globalTitle, globalHelpFile, 1037)
        UnSelect Data
    End If
End Function

Public Function ValidHyp(Uform As Object) As Boolean
    ' use by Hypothesis tests for means
    Dim Rng As Range
    Dim Hyp As Double
    
    ValidHyp = True
    
    With Uform
        'check length
        If LenTrim(.InputHyp.Text) = 0 Then .InputHyp.Text = "0"
           
        Hyp = Eval(.InputHyp.Text)
        If StopQ0("Invalid hypothesized value.", Err.number <> 0, 1031, .InputHyp) = True Then
            ValidHyp = False
            Exit Function
        End If
    End With
End Function

Public Function SetMultipleRanges(InputRange As Range, DestSheet As String, FocusObject As Object, LabelsQ As Boolean) As Range
    Dim tbase As Range
    Dim n As Double
    Dim i As Integer
    Dim j As Integer
    Dim Nvar As Integer
    Dim st As String

    Set tbase = ThisWorkbook.Sheets(DestSheet).Range("A4")
    n = InputRange.Areas(1).Columns(1).Rows.count
    Nvar = 0
    ScreenOFF
    For i = 1 To InputRange.Areas.count
        For j = 1 To InputRange.Areas(i).Columns.count
            If StopQ1("All selection areas must have the same number of rows.", InputRange.Areas(i).Columns(j).Rows.count <> n, InputRange, 1007, FocusObject) = True Then
                Set SetMultipleRanges = tbase
                tbase.Range("A1") = "Error"
                Exit Function
            End If
            Application.CutCopyMode = xlCopy
            InputRange.Areas(i).Columns(j).Copy
            tbase.Offset(1, Nvar).PasteSpecial xlPasteValues
            Application.CutCopyMode = False
            Nvar = Nvar + 1
        Next j
    Next i
    Set SetMultipleRanges = tbase.Offset(1, 1).CurrentRegion

    ScreenON
End Function

Public Function FullAddress(Sel As Range) As String
    FullAddress = "'" & Sel.Parent.Name & "'!" & Sel.Address
End Function

Public Function SetAddr(frm As Object, InputBox As Object) As String
    On Error GoTo MainErrorHandler
    Dim inputRng As Range
    Dim j As Integer
    Dim Areas As Integer
    Dim Qual As Boolean
    
    Qual = False
    If frm.Name = "frmFreqQual" Then Qual = True
    If frm.Name = "frmChisq" Then Qual = True
    If frm.Name = "frmNP_WW" Then Qual = True

    If Len(InputBox.Text) = 0 Then Exit Function
    Set inputRng = Range(InputBox.Text)
    If IsEmpty(inputRng) Then
        SetAddr = FullAddress(inputRng)
        Exit Function
    End If
    Areas = inputRng.Areas.count

    If Qual = False Then
        SetAddr = SetAddrFunc(1, InputBox.Text)
    Else
        SetAddr = SetAddrFunc2(1, InputBox.Text)
    End If
    
    If Areas > 1 Then
        For j = 2 To Areas
            If Qual = False Then
                SetAddr = SetAddr & "," & SetAddrFunc(j, InputBox.Text)
            Else
                SetAddr = SetAddr & "," & SetAddrFunc2(j, InputBox.Text)
            End If
        Next j
    End If

    frm.buttonOK.SetFocus
    InputBox.SetFocus
    Exit Function

MainErrorHandler:
    SetAddr = InputBox.Text
    Exit Function
End Function

Private Function SetAddrFunc(j As Integer, boxText As String) As String
    'AutoExpand
    On Error GoTo MainErrorHandler
    Dim inputRng As Range
    Dim areaRng As Range
    Dim topCell As Range
    Dim i As Integer
    Dim Cols As Integer
    Dim rowNum As Integer
    Dim focus As Range

    Set inputRng = Range(boxText)
    Cols = inputRng.Areas(j).Columns.count
    Set areaRng = inputRng.Areas(j).Cells(1)
    i = 1
    Do
        i = i - 1
        Set focus = areaRng.Offset(i)
        rowNum = areaRng.Offset(i).Rows(1).Row
        If rowNum = 1 And IsEmpty(focus) = False And IsNumeric(focus.Offset(1)) = True Then
            i = i - 1
            Exit Do
        End If
    Loop Until (IsEmpty(focus) = True Or IsNumeric(focus.Offset(1)) = False)

    Set topCell = areaRng.Offset(i + 1)
    SetAddrFunc = FullAddress(Range(topCell, topCell.End(xlDown).Resize(, Cols)))
    Exit Function

MainErrorHandler:
    SetAddrFunc = boxText
    Exit Function
End Function
Private Function SetAddrFunc2(j As Integer, boxText As String) As String
    ' AutoExpand function for qual data
    On Error GoTo MainErrorHandler
    Dim inputRng As Range
    Dim areaRng As Range
    Dim topCell As Range
    Dim i As Integer
    Dim Cols As Integer
    Dim rowNum As Integer

    Set inputRng = Range(boxText)
    Cols = inputRng.Areas(j).Columns.count
    Set areaRng = inputRng.Areas(j).Cells(1)
    i = 1
    Do
        i = i - 1
        rowNum = areaRng.Offset(i).Rows(1).Row
        If rowNum = 1 And IsEmpty(areaRng.Offset(i)) = False Then
            i = i - 1
            Exit Do
        End If
    Loop Until (IsEmpty(areaRng.Offset(i)) = True)

    Set topCell = areaRng.Offset(i + 1)

    SetAddrFunc2 = FullAddress(Range(topCell, topCell.End(xlDown).Resize(, Cols)))
    Exit Function

MainErrorHandler:
    SetAddrFunc2 = boxText
    Exit Function
End Function

Private Sub SetLastSheet(Uform As UserForm)
    On Error Resume Next
    If ActiveWorkbook.Name = globalLastWorkbook And ActiveSheet.Name = "Output" Then
        Exit Sub
    End If
    If ActiveWorkbook.Name <> globalLastWorkbook Or ActiveSheet.Name <> globalLastSheet Then
        Unload Uform
    End If
    
End Sub

Sub ClearLast()
    globalLastWorkbook = ""
    globalLastSheet = ""
End Sub

Sub SetGrid(FocalCells As Range)

    With FocalCells
        .Borders(xlDiagonalDown).LineStyle = xlNone
        .Borders(xlDiagonalUp).LineStyle = xlNone
        With .Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .Weight = xlHairline
            .ColorIndex = xlAutomatic
        End With
        With .Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .Weight = xlHairline
            .ColorIndex = xlAutomatic
        End With
        With .Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = xlHairline
            .ColorIndex = xlAutomatic
        End With
        With .Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlHairline
            .ColorIndex = xlAutomatic
        End With
        With .Borders(xlInsideVertical)
            .LineStyle = xlContinuous
            .Weight = xlHairline
            .ColorIndex = xlAutomatic
        End With
        With .Borders(xlInsideHorizontal)
            .LineStyle = xlContinuous
            .Weight = xlHairline
            .ColorIndex = xlAutomatic
        End With
    End With

End Sub

Sub ScaleAxes(ch As Chart, Which As Integer, MaxS As Double, MinS As Double, Inc As Double, MinVal As Double)
    Dim Amt As Double
    With ch
        For Amt = MaxS To MinS Step Inc
            If MinVal > Amt Then
                .Axes(Which).MinimumScale = Amt
                Exit For
            End If
        Next Amt
    End With
End Sub

Function IsOKnumber(R As Range) As Boolean
    Dim pPoint As Integer
    'looks for non-empty numeric, non-text value
    '$ format OK
    '% format OK
    'Times and Dates are considered OK
    Dim rr As Range
    Set rr = R.Range("A1")
    If IsEmpty(rr) = True Then IsOKnumber = False
    If InStr(1, rr.Text, "$") <> 0 And IsNumeric(rr.Text) = True Then 'check for $ format
        IsOKnumber = True
        Exit Function
    End If
    
    pPoint = InStr(1, rr.Text, "%")
    If pPoint <> 0 Then
        If IsNumeric(Mid(rr.Text, 1, pPoint - 1)) = True Then 'check for % format
            IsOKnumber = True
            Exit Function
        End If
    End If
    If Application.IsText(rr) = True Then
        IsOKnumber = False
        Exit Function
    End If
    If IsNumeric(Application.Text(rr.Text, "0.00")) = True Then IsOKnumber = True Else IsOKnumber = False
End Function

Function IsOKnumberText(rr As String) As Boolean
    Dim pPoint As Integer
    'looks for non-empty numeric, non-text value in a string
    '$ format OK
    '% format OK
    'Times and Dates are considered OK

    If IsEmpty(rr) = True Then IsOKnumberText = False
    If InStr(1, rr, "$") <> 0 And IsNumeric(rr) = True Then 'check for $ format
        IsOKnumberText = True
        Exit Function
    End If
    
    pPoint = InStr(1, rr, "%")
    If pPoint <> 0 Then
        If IsNumeric(Mid(rr, 1, pPoint - 1)) = True Then 'check for % format
            IsOKnumberText = True
            Exit Function
        End If
    End If

    If IsNumeric(Application.Text(rr, "0.00")) = True Then IsOKnumberText = True Else IsOKnumberText = False
End Function

Public Function CalcWidth(InputRange As Range, LowExtCount As Integer, HighExtCount As Integer) As Double
    Dim i As Integer
    Dim Hspread As Double
    Dim LowOut As Double
    Dim HighOut As Double
    Dim Rng As Double
    Dim W(4) As Double
    Dim Lw As Double
    Dim Uw As Double
    Dim Lr As Integer
    Dim ConstFlag As Boolean

    With Application
        Lw = Application.Large(InputRange.Cells, nGoodCells(InputRange) - LowExtCount)
        Uw = Application.Large(InputRange.Cells, HighExtCount + 1)
        CalcWidth = (Uw - Lw) / Doane(InputRange)
        
        If CalcWidth = 0 Then 'handle constant data
            CalcWidth = -1
            Exit Function
        End If
        
        Lr = Int(Log(CalcWidth) / Log(10))
        W(1) = 1 * 10 ^ Lr
        W(2) = 2 * 10 ^ Lr
        W(3) = 5 * 10 ^ Lr
        W(4) = 1 * 10 ^ (Lr + 1)
        
        For i = 2 To 4
            If CalcWidth < W(i) Then Exit For
        Next i
        If W(i) - CalcWidth < CalcWidth - W(i - 1) Then
            CalcWidth = W(i)
        Else
            CalcWidth = W(i - 1)
        End If
    End With
End Function

Public Function Doane(InputRange As Range) As Double
            Dim a As Double
            Dim b As Double
            Dim Sqrb1
            Dim Sigmab1 As Double
            Dim number As Range
            Dim n As Double
            Dim Mean As Double
            
            a = 0
            n = 0

            Doane = 0
            Mean = Application.Average(InputRange)
            For Each number In InputRange.Cells
                If IsOKnumber(number) Then
                    a = a + (number - Mean) ^ 3
                    n = n + 1#
                End If
            Next number
            Sqrb1 = Abs(a / Application.DevSq(InputRange.Cells) ^ 1.5)
            Sigmab1 = Sqr((6 * (n - 2)) / ((n + 1) * (n + 3)))
            Doane = Abs(Application.Log(1 + Sqrb1 / Sigmab1, 2)) + (1 + Application.Log(n, 2))

End Function

Public Function nGoodCells(InputRange As Range) As Double
    Dim number As Range
    
    nGoodCells = 0
    For Each number In InputRange
        If IsOKnumber(number) = True Then nGoodCells = nGoodCells + 1
    Next number
End Function

Public Sub LoadHelpFile()
    If Len(globalHelpFile) = 0 Then
        Application.DisplayStatusBar = True
        Application.StatusBar = "Searching for MegaStat Help file."
        globalHelpFile = AddIns("MegaStat").Path & "\MegaStat.hlp"
        RestoreStatusBar
    End If
End Sub
Public Sub CallHelp(Which As Variant)
    LoadHelpFile
    Application.Help globalHelpFile, Which
End Sub


Public Function NormalDensityFcn(z As Double) As Double
    Dim C As Double
    
    C = 1 / Sqr(2# * Application.Pi())
    
    NormalDensityFcn = C * Exp(-z ^ 2 / 2)
End Function

Public Sub SetBox(Str As String, LeftPos As Variant, yBase As Double, Offset As Integer, FontSize As Integer, BoxOutlineQ As Boolean)
    Dim Tbox As TextBox
    ActiveSheet.Shapes.AddTextbox(msoTextOrientationHorizontal, 0, yBase + Offset, 34, 18).Select
    Set Tbox = Selection
    With Tbox
        .ShapeRange.Fill.Visible = msoTrue
        .ShapeRange.Fill.Solid
        .ShapeRange.Fill.ForeColor.SchemeColor = 9
        .ShapeRange.Fill.Transparency = 1#
        .ShapeRange.Line.Weight = 0.75
        .ShapeRange.Line.DashStyle = msoLineSolid
        .ShapeRange.Line.Style = msoLineSingle
        .ShapeRange.Line.Transparency = 0#
        .ShapeRange.Line.Visible = BoxOutlineQ
        .Characters.Text = Str

        With .Characters(start:=1, length:=Len(.Characters.Text)).Font
            .Name = "Arial"
            .FontStyle = "Regular"
            .size = FontSize
        End With
        .AutoSize = True
        .HorizontalAlignment = xlCenter
        .Left = LeftPos - .Width / 2
        .Placement = xlFreeFloating
    End With
    Set Tbox = Nothing
End Sub

Public Sub SetFill(Sh As Shape, Uform As UserForm)
    With Sh
        .Line.Visible = msoTrue
        .Fill.Visible = msoTrue
        .Fill.Solid
        .Fill.ForeColor.RGB = RGB(192, 192, 192)
        
        If Uform.OptionButtonSolid = True Then .Fill.Transparency = 0
        If Uform.OptionButtonTransparent = True Then
            .Fill.ForeColor.RGB = RGB(32, 32, 160)
            .Fill.Transparency = 0.7
        End If
        If Uform.OptionButtonCrosshatch = True Then
            .Fill.ForeColor.SchemeColor = 63
            .Fill.BackColor.RGB = RGB(255, 255, 255)
            .Fill.Patterned msoPatternWideDownwardDiagonal
            .Fill.Transparency = 0
        End If
        If Uform.OptionButtonNoShade = True Then .Fill.Transparency = 1
    End With
End Sub

Public Sub SetLine(Sh As Shape)
    With Sh
        .Line.Weight = 0.75
        .Line.DashStyle = msoLineSolid
        .Line.Style = msoLineSingle
        .Line.Transparency = 0#
        .Line.Visible = msoTrue
        .Line.ForeColor.SchemeColor = 64
        .Line.BackColor.RGB = RGB(255, 255, 255)
        .Line.EndArrowheadStyle = msoArrowheadNone
    End With
End Sub


Public Sub UpdateInput(InputBox As Object)
    Dim X As Double
    X = Eval(InputBox.Text)
    If X = globalErrVal Then
        MsgBox "Invalid or missing input.", vbExclamation + vbMsgBoxHelpButton, globalTitle, globalHelpFile, 1031
    Else
        InputBox.Text = Str(X)
    End If
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Sub Workbook_Open()
    IsAddin = True

    Dim MegaStatMenu As CommandBarPopup
    Dim DataIndex As Long

    If Mid(Application.Version, 1, 1) = "8" Then globalXL97 = True Else globalXL97 = False

    DataIndex = 7
    On Error Resume Next 'if it can't find the right spot, use 7
    DataIndex = Application.CommandBars(1).Controls("Data").Index

    With Application.CommandBars(1).Controls.Add(Type:=msoControlPopup, before:=DataIndex, temporary:=True)
        .Caption = "&MegaStat"
        .Visible = True

        With .Controls.Add(Type:=msoControlButton)
            .Caption = "&Descriptive Statistics..."
            .Tag = "Descriptives"
            .OnAction = "OpenUserForm"
        End With

        With .Controls.Add(Type:=msoControlPopup)
            .Caption = "&Frequency Distributions"
            With .Controls
                With .Add(Type:=msoControlButton)
                    .Caption = "&Quantitative..."
                    .Tag = "FreqQuant"
                    .OnAction = "OpenUserForm"
                End With

                With .Add(Type:=msoControlButton)
                    .Caption = "Q&ualitative..."
                    .Tag = "FreqQual"
                    .OnAction = "OpenUserForm"
                End With
            End With
        End With

        With .Controls.Add(Type:=msoControlPopup)
            .Caption = "&Probability"
            With .Controls
                With .Add(Type:=msoControlButton)
                    .Caption = "&Counting Rules..."
                    .Tag = "FPC"
                    .OnAction = "OpenUserForm"
                End With

                With .Add(Type:=msoControlButton)
                    .Caption = "&Discrete Probability Distributions..."
                    .Tag = "Discrete"
                    .OnAction = "OpenUserForm"
                    .BeginGroup = True
                End With

                With .Add(Type:=msoControlButton)
                    .Caption = "&Continuous Probability Distributions..."
                    .Tag = "Continuous"
                    .OnAction = "OpenUserForm"
                    .BeginGroup = True
                End With

                With .Add(Type:=msoControlButton)
                    .Caption = "&Normal Distribution..."
                    .Tag = "Norman"
                    .OnAction = "OpenUserForm"
                    .BeginGroup = True
                End With
                
                With .Add(Type:=msoControlButton)
                    .Caption = "&t-Distribution..."
                    .Tag = "tDist"
                    .OnAction = "OpenUserForm"
                    .BeginGroup = False
                End With
                
                With .Add(Type:=msoControlButton)
                    .Caption = "&F-Distribution..."
                    .Tag = "Fdist"
                    .OnAction = "OpenUserForm"
                    .BeginGroup = False
                End With
                
                With .Add(Type:=msoControlButton)
                    .Caption = "&Chi-square Distribution..."
                    .Tag = "Chidist"
                    .OnAction = "OpenUserForm"
                    .BeginGroup = False
                End With
                

            End With
        End With

        With .Controls.Add(Type:=msoControlButton)
            .Tag = "ConfInt"
            .Caption = "Confidence &Intervals / Sample Size..."
            .OnAction = "OpenUserForm"
        End With

        With .Controls.Add(Type:=msoControlPopup)
            .Caption = "Hypothesis &Tests"
            With .Controls
                With .Add(Type:=msoControlButton)
                    .Caption = "Mean vs. &Hypothesized Value..."
                    .Tag = "MeanVs"
                    .OnAction = "OpenUserForm"
                End With

                With .Add(Type:=msoControlButton)
                    .Caption = "Compare Two &Independent Groups..."
                    .Tag = "TwoGroups"
                    .OnAction = "OpenUserForm"
                End With
                
                With .Add(Type:=msoControlButton)
                    .Caption = "Paired &Observations..."
                    .Tag = "Paired"
                    .OnAction = "OpenUserForm"
                End With
                
                With .Add(Type:=msoControlButton)
                    .Caption = "&Proportion vs. Hypothesized Value..."
                    .Tag = "pVs"
                    .OnAction = "OpenUserForm"
                    .BeginGroup = True
                End With
                
                With .Add(Type:=msoControlButton)
                    .Caption = "Compare &Two Independent Proportions..."
                    .Tag = "TwoP"
                    .OnAction = "OpenUserForm"
                End With
                
                With .Add(Type:=msoControlButton)
                    .Caption = "Chi-square &Variance Test..."
                    .Tag = "VarTest"
                    .BeginGroup = True
                    .OnAction = "OpenUserForm"
                End With
                
            End With
        End With

        With .Controls.Add(Type:=msoControlPopup)
            .Caption = "&Analysis of Variance"
            With .Controls
                With .Add(Type:=msoControlButton)
                    .Caption = "&One-Factor ANOVA..."
                    .Tag = "ANOVA1"
                    .OnAction = "OpenUserForm"
                End With

                With .Add(Type:=msoControlButton)
                    .Caption = "&Randomized Blocks ANOVA..."
                    .Tag = "ANOVA2"
                    .OnAction = "OpenUserForm"
                End With

                With .Add(Type:=msoControlButton)
                    .Caption = "&Two-Factor ANOVA..."
                    .Tag = "ANOVA3"
                    .OnAction = "OpenUserForm"
                End With
            End With
        End With

        With .Controls.Add(Type:=msoControlPopup)
            .Caption = "Correlation / &Regression"
            With .Controls
                With .Add(Type:=msoControlButton)
                    .Caption = "&Scatterplot..."
                    .Tag = "Scatterplot"
                    .OnAction = "OpenUserForm"
                End With

                With .Add(Type:=msoControlButton)
                    .Caption = "&Correlation Matrix..."
                    .Tag = "Correlation"
                     .OnAction = "OpenUserForm"
                End With

                With .Add(Type:=msoControlButton)
                    .Caption = "&Regression Analysis..."
                    .Tag = "Regression"
                    .OnAction = "OpenUserForm"
                End With
            End With
        End With

        With .Controls.Add(Type:=msoControlPopup)
            .Caption = "Time &Series / Forecasting"
            With .Controls

                With .Add(Type:=msoControlButton)
                    .Caption = "&Trendline Curve Fit..."
                    .Tag = "Trend"
                    .OnAction = "OpenUserForm"
                End With

                With .Add(Type:=msoControlButton)
                    .Caption = "&Deseasonalization..."
                    .Tag = "Deseasonalization"
                    .OnAction = "OpenUserForm"
                End With

                With .Add(Type:=msoControlButton)
                    .Caption = "&Moving Average..."
                    .Tag = "MovingAverage"
                    .OnAction = "OpenUserForm"
                End With
            End With

            With .Controls.Add(Type:=msoControlPopup)
                .Caption = "&Exponential Smoothing"
                With .Controls
                    With .Add(Type:=msoControlButton)
                        .Caption = "&Simple Exponential Smoothing..."
                        .Tag = "SimpleExp"
                        .OnAction = "OpenUserForm"
                    End With
            
                    With .Add(Type:=msoControlButton)
                        .Caption = "&Two-Factor Exponential Smoothing..."
                        .Tag = "HoltExp"
                        .OnAction = "OpenUserForm"
                    End With
                End With
            End With
        End With

        With .Controls.Add(Type:=msoControlPopup)
            .Caption = "&Chi-Square / Crosstab"
            With .Controls
                With .Add(Type:=msoControlButton)
                    .Caption = "&Contingency Table..."
                    .Tag = "Contingency"
                    .OnAction = "OpenUserForm"
                End With

                With .Add(Type:=msoControlButton)
                    .Caption = "Cross&tabulation..."
                    .Tag = "XTab"
                    .OnAction = "OpenUserForm"
                End With

                With .Add(Type:=msoControlButton)
                    .Caption = "&Goodness of Fit Test..."
                    .Tag = "GOF"
                    .OnAction = "OpenUserForm"
                End With
            End With
        End With

' start nonparametrics menu
        With .Controls.Add(Type:=msoControlPopup)
            .Caption = "&Nonparametric Tests"
            With .Controls

                With .Add(Type:=msoControlButton)
                    .Caption = "&Sign Test..."
                    .Tag = "SignTest"
                    .OnAction = "OpenUserForm"
                End With
                    
                With .Add(Type:=msoControlButton)
                    .Caption = "&Runs Test for Random Sequence..."
                    .Tag = "WW"
                    .OnAction = "OpenUserForm"
                End With

                With .Add(Type:=msoControlButton)
                    .Caption = "&Wilcoxon - Mann/Whitney Test..."
                    .Tag = "WMW"
                    .OnAction = "OpenUserForm"
                End With

                With .Add(Type:=msoControlButton)
                    .Caption = "Wilcoxon &Signed-Rank Test..."
                    .Tag = "SR"
                    .OnAction = "OpenUserForm"
                End With
                
                With .Add(Type:=msoControlButton)
                    .Caption = "&Kruskal-Wallis Test..."
                    .Tag = "KW"
                    .OnAction = "OpenUserForm"
                End With
                
                With .Add(Type:=msoControlButton)
                    .Caption = "&Friedman Test..."
                    .Tag = "Friedman"
                    .OnAction = "OpenUserForm"
                End With
                
                With .Add(Type:=msoControlButton)
                    .Caption = "Kendall Coefficient of &Concordance..."
                    .Tag = "Kendall"
                    .OnAction = "OpenUserForm"
                End With
                
                With .Add(Type:=msoControlButton)
                    .Caption = "Spearman C&oefficient of Rank Correlation..."
                    .Tag = "Rs"
                    .OnAction = "OpenUserForm"
                End With
                
                With .Add(Type:=msoControlButton)
                    .Caption = "Fisher &Exact Test..."
                    .Tag = "FET"
                    .OnAction = "OpenUserForm"
                End With
                
            End With
        End With
' end nonparametrics menu

        With .Controls.Add(Type:=msoControlButton)
            .Caption = "&Quality Control Process Charts..."
            .Tag = "SQC"
            .OnAction = "OpenUserForm"
        End With


        With .Controls.Add(Type:=msoControlButton)
            .Caption = "Repeat &Last Option"
            .BeginGroup = True
            .OnAction = "OpenLast"
            .Enabled = False
        End With
        
         With .Controls.Add(Type:=msoControlButton)
            .Caption = "&Generate Random Numbers..."
            .Tag = "RandNo"
            .OnAction = "OpenUserForm"
        End With

'Utilities
        With .Controls.Add(Type:=msoControlPopup)
            .Caption = "&Utilities"
            .BeginGroup = False
            With .Controls
                With .Add(Type:=msoControlButton)
                    .Caption = "&Insert descriptive information"
                    .OnAction = "InsertDescHeader"
                End With

                With .Add(Type:=msoControlPopup)
                    .Caption = "&ChartDataSheet Utilities"
                    .BeginGroup = False
                    With .Controls
                        With .Add(Type:=msoControlButton)
                            .Caption = "&View"
                            .OnAction = "ViewChartDataSheet"
                        End With
    
                        With .Add(Type:=msoControlButton)
                            .Caption = "&Hide"
                            .OnAction = "HideChartDataSheet"
                        End With
    
                        With .Add(Type:=msoControlButton)
                            .Caption = "&Delete"
                            .OnAction = "DeleteChartDataSheet"
                        End With
                    End With
                End With

                With .Add(Type:=msoControlButton)
                    .Caption = "Start new &output sheet"
                    .OnAction = "CopyOutputSheet"
                End With

                With .Add(Type:=msoControlButton)
                    .Caption = "&Delete output sheet"
                    .OnAction = "DeleteOutputSheet"
                End With

                With .Add(Type:=msoControlButton)
                    .Caption = "&Deactivate Megastat"
                    .OnAction = "Deactivate"
                    .BeginGroup = True
                End With
                
                With .Add(Type:=msoControlButton)
                    .Caption = "&Uninstall Megastat"
                    .OnAction = "Uninstall"
                End With
            End With
        End With

        With .Controls.Add(Type:=msoControlPopup)
            .Caption = "&Help / Information"
            With .Controls
                With .Add(Type:=msoControlButton)
                    .Caption = "&Help System"
                    .OnAction = "HelpSystem"
                End With

                With .Add(Type:=msoControlButton)
                    .Caption = "System &Information"
                    .Tag = "SysInfo"
                    .OnAction = "OpenUserForm"
                End With

                With .Add(Type:=msoControlButton)
                    .Caption = "&About MegaStat"
                    .Tag = "About"
                    .OnAction = "OpenUserForm"
                End With
            End With
        End With
    End With

End Sub

Private Sub Workbook_BeforeClose(Cancel As Boolean)
    On Error Resume Next
    Application.CommandBars(1).Controls("MegaStat").Delete
End Sub



Attribute VB_Name = "frmANOVA1"
Attribute VB_Base = "0{96EC779D-6F31-4D96-BE81-681B34C21DD4}{F114CBB7-A6AF-4D09-BFEC-F52762EAFDAC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'''MegaStat|fffd| ANOVA: One-Factor module |fffd|2005 by J. B. Orris
'frmANOVA1

Option Explicit
Option Base 1

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub UserForm_Activate()
    Me.InputBox.SetFocus
End Sub

Private Sub buttonOK_Click()
    OneFactorANOVA
End Sub

Private Sub buttonClear_Click()
    ClearLast
    Me.Hide
    Unload Me
    OpenUserForm "ANOVA1"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then Me.InputBox.SetFocus
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    CallHelp 4410
End Sub

Private Sub InputBox_DblClick(Cancel As Boolean)
        Me.InputBox.Text = SetAddr(Me, Me.InputBox)
End Sub

' right click
Private Sub InputBox_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBox.Text = SetAddr(Me, Me.InputBox)
    End If
End Sub
Private Sub Label2_Click()
        Me.InputBox.Text = SetAddr(Me, Me.InputBox)
End Sub

Private Sub InputBox_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        Me.buttonOK.SetFocus
    End If
End Sub
Sub OneFactorANOVA()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler

    Dim InputRange As Range
    Dim X As Range
    Dim Base As Range
    Dim base2 As Range
    Dim base3 As Range
    Dim ColLabels As Range
    Dim ColLabelsQ As Integer
    Dim MSE As Double
    Dim i As Integer
    Dim j As Integer
    Dim Dec As Integer
    Dim nGroups As Integer
    Dim V1 As Double
    Dim V2 As Double
    Dim V3 As Double
    Dim col As Object
    Dim value As Range
    
    Dim Means As Range
    Dim Ns As Range
    Dim Labels As Range
    
    Dim Xval As Range
    Dim GM As Double
    Dim cx As Range
    Dim cx2 As Range
    Dim Lines As Integer
    Dim Mi As Double
    Dim Wide1 As Double
    Dim Wide2 As Double
    Dim TukeyQ As Boolean
    Dim PostHocQ As Boolean
    Dim m1 As Integer
    Dim m2 As Integer
    Dim RowOffset As Integer

    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub
    
    'validation
    If ValidRange(Me.InputBox, vbYes) = False Then Exit Sub
    Set InputRange = Range(Me.InputBox)
    InputRange.Worksheet.Activate

    If StopQ1("Must select at least two columns.", InputRange.Columns.count < 2, InputRange, 1008, Me.InputBox) = True Then Exit Sub
        
    Set ColLabels = InputRange.Rows(1).Cells
    ColLabelsQ = LabelCheck(ColLabels)
    If ColLabelsQ = vbCancel Then Exit Sub
    
    If ColLabelsQ = vbYes Then
        i = 2
    Else
        i = 1
        Check_Stealth_Labels ColLabelsQ, ColLabels, InputRange
    End If
    
    Set X = InputRange.Range(Cells(i, 1), Cells(InputRange.Rows.count, InputRange.Columns.count))
    
    'check for silly input
    If IsItSilly(InputRange) = vbYes Then
        Me.InputBox.SetFocus
        Exit Sub
    End If
    
    Dec = DecPlaces(X)
    nGroups = X.Columns.count
    For Each col In X.Columns
        If StopQ1("Empty group. Cannot continue.", Application.count(col) = 0, col, 1006, Me.InputBox) = True Then Exit Sub
    Next col
    StartProc Me
    
    If MakeNewOutputSheet() = False Then Exit Sub

    Set Base = Range("A" & Format(ActiveCell.Row))
    SetTitle Base, "One factor ANOVA"

    ANOVAmeansHeader Base
    Set cx = Range("J2")
    X.Copy
    cx.PasteSpecial xlPasteValues
    
    Set cx = Range("J2").Range(Cells(1, 1), Cells(X.Rows.count, X.Columns.count)) 'new*

    GM = Application.Average(cx)
    For Each Xval In cx
        If IsOKnumber(Xval) Then Xval.value = Xval.value - GM
    Next Xval

    With Application
        For i = 1 To nGroups
            Base.Offset(i + 3, 1).Range("A1:C1") = Array(.Average(X.Columns(i)), .count(X.Columns(i)), MyStdev(X.Columns(i)))
            If Me.chkPlotData.value = True Then
                Base.Offset(i + 3, 0).value = GM
                Base.Offset(i + 3, 0).NumberFormat = ";;;"
            End If
            If ColLabelsQ = vbYes Then
                Base.Offset(i + 3, 4) = ColLabels.Columns(i).Text
            Else
                Base.Offset(i + 3, 4) = "Group " & i
            End If
            Base.Offset(i + 3, 5).value = .Average(cx.Columns(i))
        Next i

        'ANOVA calc
        Set cx2 = cx.Range("A1").Offset(0, nGroups + 1)
        For Each Xval In cx
            If IsOKnumber(Xval) Then
                cx.Range("A1").Offset(Xval.Row - cx.Row, Xval.Column - cx.Column + nGroups + 1).value = _
                            Base.Offset(Xval.Column - 6, 5).value
            End If
        Next Xval
        Set cx2 = cx.Range("A1").Offset(0, nGroups + 1).Range(Cells(1, 1), Cells(X.Rows.count, X.Columns.count)) 'new*

        Base.Range("B4").CurrentRegion.Columns(6).Clear
        With Base.Offset(i + 3, 0)
            .Range("A1:E1") = Array(" ", Application.Average(X), Application.count(X), MyStdev(X), "Total")
            .CurrentRegion.Columns(2).NumberFormat = AutoFormat(1, Dec)
            .CurrentRegion.Columns(3).NumberFormat = "0"
            .CurrentRegion.Columns(4).NumberFormat = AutoFormat(2, Dec)
        End With
        FmtBottomRow Base.Offset(i + 3, 1).Range("A1:D1")
    End With
    Set base2 = Base.Offset(i + 5)
    ANOVAtableHeader base2
    base2.Offset(-1, 1).Range("A1:A2") = " "
    With base2
        .Range("A3") = "Treatment"
        .Range("A4") = "Error"
        .Range("A5") = "Total"
        .Range("B3") = Application.DevSq(cx2)
        .Range("B5") = Application.DevSq(cx)
        .Range("B4") = .Range("B5") - .Range("B3")
        .Range("C3") = nGroups - 1
        .Range("C4") = Application.count(X) - nGroups
        .Range("C5") = Application.count(X) - 1
        .Range("D3") = .Range("B3") / .Range("C3")
        .Range("D4") = .Range("B4") / .Range("C4")
        MSE = .Range("D4")
        If MSE > 0 Then
            .Range("E3") = .Range("D3") / MSE
        Else
            If .Range("D3") > 0 Then .Range("E3") = 1E+306 Else .Range("E3") = 0#
        End If
        .Range("F3") = Application.Fdist(.Range("E3"), .Range("C3"), .Range("C4"))
        FormatPvalue .Range("F3"), xlYes
        With .Range("A1:F5")
            .Columns(2).NumberFormat = AutoFormat(2, Dec)
            .Columns(4).NumberFormat = AutoFormat(3, Dec)
            .Columns(5).NumberFormat = "0.00"
        End With
    End With

    FmtBottomRow base2.Range("A5:F5")
    base2.Range("A2").CurrentRegion.Columns.AutoFit
    base2.Range("F7").Select

    TukeyQ = True
    m1 = ActiveCell.Row
    If Me.OptionNever = False Then
        If ((Me.OptionP05 = True And base2.Range("F3") <= 0.05) And nGroups > 2) Or Me.OptionAlways = True Then
            PostHocQ = True
            Set Means = Base.Range("B5").Resize(nGroups, 1)
            Set Ns = Base.Range("C5").Resize(nGroups, 1)
            Set Labels = Base.Range("E5").Resize(nGroups, 1)
            frmANOVA1.FitColumns Base, 0, nGroups
            PostHocAnalysis base2.Range("A10").Offset(nGroups + 4), Means, Ns, Labels, MSE, nGroups, base2.Range("C4"), True
            frmANOVA1.FitColumns Base, 0, nGroups
        Else
            TukeyQ = False
            PostHocQ = False
        End If
    Else
        TukeyQ = False
    End If

    If PostHocQ = True Then m1 = m1 + Means.Rows.count + 6
    If TukeyQ = True Then m2 = Means.Rows.count + 9 Else m2 = 0
    
    Set Means = Base.Offset(4, 0).Resize(nGroups, 5)
    If Me.chkPlotData = True Then PlotANOVAdata X, Means, Application.Max(Means.Columns(3)), False, AutoFormat(1, Dec), Base, m1 + m2

    cx.Clear
    cx2.Clear
    
    EndProc Base
    Exit Sub
    
MainErrorHandler:
    If errcheck("One Factor ANOVA") = vbYes Then Exit Sub Else Resume
End Sub


Sub PostHocAnalysis(Table As Range, Means As Range, Ns As Range, Labels As Range, MSE As Double, nMeans As Integer, df As Integer, TukeyQ As Boolean)
    Dim Table2
    Dim i As Integer
    Dim j As Integer
    Dim g1 As Integer
    Dim G2 As Integer
    Dim X As Range
    Dim Y As Range
    Dim stx As String
    Dim sty As String
    Dim col As Integer
    Dim Row1 As Integer
    Dim xvalue1 As Double
    Dim xvalue2 As Double
    Dim yvalue1 As Double
    Dim yvalue2 As Double
    Dim Tukey As Double
    
    
    For i = 1 To nMeans
        Table.Offset(1 + i, 0) = Labels.Cells(i)
        Table.Offset(0, 1 + i) = Labels.Cells(i)
        If Abs(Means.Cells(i)) < 1E-16 Then Means.Cells(i) = 0
        Table.Offset(1 + i, 1) = Means.Cells(i)
        Table.Offset(1, 1 + i) = Means.Cells(i)
        
        Table.Offset(1 + i, 0).NumberFormat = Labels.Cells(i).NumberFormat
        Table.Offset(0, 1 + i).NumberFormat = Labels.Cells(i).NumberFormat
        Table.Offset(1 + i, 1).NumberFormat = Means.Cells(i).NumberFormat
        Table.Offset(1, 1 + i).NumberFormat = Means.Cells(i).NumberFormat
        Table.Offset(nMeans + 2, i + 1) = i
        Table.Offset(i + 1, nMeans + 2) = i
    Next i

    Table.Range("A1:B2") = -1E+302
    
    Table.CurrentRegion.Sort Key1:=Table.Range("B2"), Order1:=xlAscending, Header:= _
        xlNo, OrderCustom:=1, MatchCase:=False, Orientation:=xlLeftToRight
        
    Table.CurrentRegion.Sort Key1:=Table.Range("B2"), Order1:=xlAscending, Header:= _
        xlNo, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
        
    'find Tukey values
    col = nMeans - 1
    If col > 19 Then col = 19
    If df > 9999 Then df = 9999
    
    For i = 1 To 2
        If i = 1 Then
            stx = "A2:A27"
            sty = "B2:T27"
        Else
            stx = "A30:A55"
            sty = "B30:T55"
        End If
        
        Set X = ThisWorkbook.Sheets("Tukey").Range(stx)
        Set Y = ThisWorkbook.Sheets("Tukey").Range(sty).Columns(nMeans - 1)
        
        Row1 = Application.Match(Application.Lookup(df, X, X), X, 0)
        If Row1 = df Then
            Tukey = Application.Lookup(Application.Index(X, df), X, Y)
        Else 'interpolate
            xvalue1 = Application.Index(X, Row1)
            xvalue2 = Application.Index(X, Row1 + 1)
            yvalue1 = Application.Lookup(xvalue1, X, Y)
            yvalue2 = Application.Lookup(xvalue2, X, Y)
            Tukey = yvalue1 + (yvalue2 - yvalue1) * (df - xvalue1) / (xvalue2 - xvalue1)
        End If
        With Table.Offset(3 + nMeans + i, 3)
            .value = Tukey
            .NumberFormat = "0.00"
        End With
    Next i
        
    For i = 1 To nMeans
        For j = i + 1 To nMeans
            g1 = Table.Offset(nMeans + 2, i + 1)
            G2 = Table.Offset(j + 1, nMeans + 2)
            With Table.Offset(1 + j, 1 + i)
                If MSE > 0 Then .value = Abs((Means.Cells(G2) - Means.Cells(g1))) / Sqr(MSE * (1 / Ns.Cells(g1) + 1 / Ns.Cells(G2))) Else .value = 0
                .NumberFormat = "0.00 "
                If .value > Table.Offset(4 + nMeans, 3) Then .Interior.ColorIndex = 20
                If .value > Table.Offset(5 + nMeans, 3) Then .Interior.ColorIndex = 37
            End With
        Next j
    Next i

    FmtOutline Table.Range(Cells(3, 3), Cells(2 + nMeans, 2 + nMeans))

    With Table.CurrentRegion
        .HorizontalAlignment = xlRight
        .Rows(nMeans + 3).EntireRow.Clear
        .Columns(nMeans + 3).Clear
'        .Columns(2, nMeans + 2).AutoFit
    End With
    Table.Offset(0, 1).CurrentRegion.Columns.AutoFit
    
    Table.Range("A1:B2") = ""
    
    With Table.Offset(-1, 0)
        .value = "Tukey simultaneous comparison t-values (d.f. = " & df & ")"
        .HorizontalAlignment = xlLeft
        .InsertIndent 2
    End With
    Table.Offset(3 + nMeans, 0) = "               critical values for experimentwise error rate:"
    Table.Offset(4 + nMeans, 2) = 0.05
    Table.Offset(4 + nMeans, 3).Interior.ColorIndex = 20
    Table.Offset(5 + nMeans, 2) = 0.01
    Table.Offset(5 + nMeans, 3).Interior.ColorIndex = 37
    Table.Offset(-2, 0) = ""
'    end Tukey
    
    Table.Offset(2, 2).CurrentRegion.Copy
    ActiveSheet.Paste Destination:=Table.Offset(-nMeans - 6)
    Set Table2 = Table.Offset(-nMeans - 5)
    Table2.Offset(1, 1).CurrentRegion.Interior.ColorIndex = xlNone
    
    For i = 1 To nMeans
        For j = i + 1 To nMeans
            Table2.Offset(1 + j, 1 + i) = Application.Tdist(Table.Offset(1 + j, 1 + i), df, 2)
            FormatPvalue Table2.Offset(1 + j, 1 + i), xlYes
        Next j
    Next i
    Table.Offset(nMeans + 8, nMeans + 2).Select
    
    Table2.Offset(-1, 0) = "p-values for pairwise t-tests"
    Table2.Offset(-2, 0) = "Post hoc analysis"
    Table2.Offset(-2, 0).Characters(1, 8).Font.Italic = True
    
    If TukeyQ = False Then
        Table.Offset(2, 2).CurrentRegion.Resize(Table.Offset(2, 2).CurrentRegion.Rows.count + 4).ClearFormats
        Table.Offset(2, 2).CurrentRegion.Resize(Table.Offset(2, 2).CurrentRegion.Rows.count + 4).ClearContents
        Table2.Offset(3 + nMeans, 0) = " "
        Table2.Offset(3 + nMeans, 0).Select
    End If
        
End Sub

Sub ANOVAmeansHeader(loc As Range)
    loc.Range("A4:E4") = Array(" ", "Mean", "n", "Std. Dev", "")
    FmtHeader1 loc.Range("B4:E4")
End Sub

Sub ANOVAtableHeader(loc As Range)
    FmtHeader1 loc.Range("A2:F2")
    With loc
        .Range("A1") = "ANOVA table"
        .Range("A2:F2") = Array("Source", "SS", "   df", "MS", "F", "   p-value")
        .Range("A2").HorizontalAlignment = xlCenter
    End With
End Sub
Sub FitColumns(Base As Range, nRows As Integer, nCols As Integer)
    Dim FitArea As Range
    Dim col As Object
    Dim colmax As Integer
  
    Set FitArea = Base.Offset(0, 2).Resize(nRows * 3 + nCols * 2 + 45, nCols)
    FitArea.Columns.AutoFit
    
    colmax = 0
    For Each col In FitArea.Columns
        If col.ColumnWidth > colmax Then colmax = col.ColumnWidth
    Next col
    FitArea.Columns.ColumnWidth = colmax
    
    FitArea.Offset(0, -1).Columns(1).AutoFit
    If Base.Columns(1).ColumnWidth < 11 Then Base.Columns(1).ColumnWidth = 11
    
End Sub


Public Sub PlotANOVAdata(Data As Range, Means As Range, nSeries As Integer, LinesQ, Fmt As String, Base As Range, RowOffset As Integer)
    Dim base2 As Range
    Dim ch As ChartObject
    Dim i As Integer
    Dim MaxS As Double
    Dim MinS As Double
    Dim Inc  As Double
    Dim MinVal As Double
    Dim Row As Integer
        
    Set base2 = Range("A" & Format(RowOffset))

    Set ch = ActiveSheet.ChartObjects.Add(20, base2.Range("A1").Top, 400, 252)
    ch.Placement = xlMove
    
    With ch.Chart
        .SeriesCollection.Add Source:=Data
        .ChartType = xlLine
        .PlotBy = xlRows
        .HasTitle = True
        .HasLegend = False
        .ChartTitle.Text = "Comparison of Groups"
        SetFont .ChartTitle
        SetFont .ChartArea
        .PlotArea.Border.LineStyle = xlNone
        .PlotArea.Interior.ColorIndex = xlNone

        On Error Resume Next
        With .Axes(xlCategory, xlPrimary)
            .HasTitle = False
            SetFont .AxisTitle
            SetFont .TickLabels
            .HasMajorGridlines = False
            .HasMinorGridlines = False
            .MajorTickMark = xlNone
            .MinorTickMark = xlNone
            .TickLabels.Orientation = xlHorizontal
        End With

        With .Axes(xlValue, xlPrimary)
            .HasTitle = True
            .AxisTitle.Text = ""

            .TickLabels.NumberFormat = Trim(Fmt)
            SetFont .AxisTitle
            SetFont .TickLabels
            .HasMajorGridlines = False
            .HasMinorGridlines = False
            .MajorTickMark = xlCross
            .MinorTickMark = xlNone
            .Crosses = xlCustom
            .CrossesAt = .MinimumScale
        End With
        
        For i = 1 To nSeries
            With .SeriesCollection(i)
                .MarkerStyle = xlDiamond
                .MarkerBackgroundColorIndex = 1
                .MarkerForegroundColorIndex = xlNone
                If LinesQ = True Then
                    With .Border
                        .LineStyle = xlContinuous
                        .ColorIndex = 1
                        .Weight = xlHairline
                    End With
                Else
                    .Border.LineStyle = xlNone
                End If
                .MarkerSize = 4
            End With
        Next i
        
        Set .SeriesCollection(i) = .SeriesCollection.NewSeries
        With .SeriesCollection(i) 'means
            .Values = Means.Columns(2)
            .PlotBy = xlRows
            .MarkerStyle = xlDash
            .MarkerBackgroundColorIndex = 5
            .MarkerForegroundColorIndex = 5
            .MarkerSize = 8
            .Border.LineStyle = xlNone
        End With
        
        Set .SeriesCollection(i + 1) = .SeriesCollection.NewSeries
        With .SeriesCollection(i + 1) 'GM
            .Values = Means.Columns(1)
            .PlotBy = xlRows
            .MarkerStyle = xlNone
            With .Border
                .ColorIndex = 1
                .Weight = xlHairline
                .LineStyle = xlDot
            End With
        End With
        .SeriesCollection(1).XValues = Means.Columns(5) 'axis labels
        
        MaxS = .Axes(xlValue).MaximumScale
        MinS = .Axes(xlValue).MinimumScale
        Inc = -(.Axes(xlValue).MajorUnit)
        MinVal = Application.Min(Data)
        
        If (MinVal - MinS) / (MaxS - MinS) > 0.25 Then ScaleAxes ch.Chart, xlValue, MaxS, MinS, Inc, MinVal
        
        ch.BottomRightCell.Offset(1, -1) = " "
        ch.BottomRightCell.Offset(1, -1).Select
    End With
End Sub



Attribute VB_Name = "frmANOVA2"
Attribute VB_Base = "0{860AC643-2319-46A7-BA63-4530CB05FF85}{E3BA733A-19AD-4837-8D4D-E59F3BB413E4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'''MegaStat|fffd| ANOVA: Randomized Blocks module |fffd|2005 by J. B. Orris
'frmANOVA2

Option Explicit
Option Base 1

Private Sub UserForm_Activate()
    Me.InputBox.SetFocus
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    RblockANOVA
End Sub

Private Sub buttonClear_Click()
    ClearLast
    Me.Hide
    Unload Me
    OpenUserForm "ANOVA2"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then Me.InputBox.SetFocus
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    CallHelp 4420
End Sub

Private Sub InputBox_DblClick(Cancel As Boolean)
        Me.InputBox.Text = SetAddr(Me, Me.InputBox)
End Sub

Private Sub InputBox_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBox.Text = SetAddr(Me, Me.InputBox)
    End If
End Sub
Private Sub Label2_Click()
        Me.InputBox.Text = SetAddr(Me, Me.InputBox)
End Sub

Private Sub InputBox_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        Me.buttonOK.SetFocus
    End If
End Sub

Sub RblockANOVA()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler
    
    Dim Ta() As Variant
    Dim InputRange As Range
    Dim X As Range
    Dim value As Range
    Dim Base As Range
    Dim base2 As Range
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    Dim i2 As Integer
    Dim nBlock As Integer
    Dim Na() As Integer
    Dim Ns() As Integer
    Dim Dec As Integer
    Dim nTrt As Integer
    Dim V1 As Double
    Dim V2 As Double
    Dim V3 As Double
    Dim V4 As Double
    
    Dim ColLabels As Range
    Dim ColLabelsQ As Integer
    Dim ColLabelsQ2 As Integer
    Dim RowLabels As Range
    Dim RowLabelsQ As Integer
    Dim RowLabelsQ2 As Integer
    
    Dim Means As Range
    Dim Ns2 As Range
    Dim Labels As Range
    
    Dim Xval As Range
    Dim GM As Double
    
    Dim base3 As Range
    Dim Lines As Integer
    Dim Mi As Double
    Dim Mj As Double
    Dim Wide1 As Double
    Dim Wide2 As Double
    Dim PostHocQ As Boolean
    Dim TukeyQ As Boolean
    Dim RowOffset As Integer
    Dim m1 As Integer
    Dim m2 As Integer
    Dim m3 As Integer
    
    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub

    If ValidRange(Me.InputBox, vbYes) = False Then Exit Sub
    Set InputRange = Range(Me.InputBox.Text)
    InputRange.Worksheet.Activate
    If IsEmpty(InputRange.Range("A1")) = True Then InputRange.Range("A1") = "x"
    If StopQ1("Not enough data selected.", InputRange.Rows.count <= 1, InputRange.Rows, 1001, Me.InputBox) = True Then Exit Sub
    If StopQ1("Must select at least two columns.", InputRange.Columns.count < 2, InputRange, 1008, Me.InputBox) = True Then Exit Sub
    
    'set InputRange
    Set ColLabels = InputRange.Rows(1).Cells
    Set RowLabels = InputRange.Columns(1).Cells

    ColLabelsQ = LabelCheck(ColLabels)
    ColLabelsQ2 = ColLabelsQ
    If ColLabelsQ = vbCancel Then Exit Sub
    
    RowLabelsQ = LabelCheck(RowLabels)
    RowLabelsQ2 = RowLabelsQ
    If RowLabelsQ = vbCancel Then Exit Sub
    
    If ColLabelsQ = vbYes Then
        i = 2
    Else
        i = 1
        ' this is a column version of Check_Stealth_Labels
        If RowLabelsQ = vbYes Then k = 2 Else k = 1 'added for rBlock ANOVA
        If InputRange.Rows(1).Row > 1 Then
            Set ColLabels = InputRange.Offset(-1, 0).Range(Cells(1, k), Cells(1, InputRange.Columns.count)).Cells
            ColLabelsQ = vbYes
            For Each value In ColLabels
                If IsLabel(value) = False Then
                    ColLabelsQ = vbNo
                    Exit For
                End If
            Next value
        Else
            ColLabelsQ = vbNo
        End If
    End If
    
    If RowLabelsQ = vbYes Then
        j = 2
    Else
        j = 1
        ' this is a row version of Check_Stealth_Labels
        If ColLabelsQ2 = vbYes Then k = 2 Else k = 1
        If InputRange.Columns(1).Column > 1 Then
            Set RowLabels = InputRange.Offset(0, -1).Range(Cells(k, 1), Cells(InputRange.Rows.count, 1)).Cells
            RowLabelsQ = vbYes
            For Each value In RowLabels
                If IsLabel(value) = False Then
                    RowLabelsQ = vbNo
                    Exit For
                End If
            Next value
        Else
            RowLabelsQ = vbNo
        End If
    End If
    If InputRange.Range("A1") = "x" Then InputRange.Range("A1").Clear
    Set X = InputRange.Range(Cells(i, j), Cells(InputRange.Rows.count, InputRange.Columns.count))
    
    'check for silly input
    If IsItSilly(InputRange) = vbYes Then
        Me.InputBox.SetFocus
        Exit Sub
    End If
   
    'check first row and col for sequential values
    If LabelCheck(X.Rows(1)) = vbCancel Then Exit Sub
    If LabelCheck(X.Columns(1)) = vbCancel Then Exit Sub
    
    Dec = DecPlaces(X)
    nTrt = X.Columns.count
    nBlock = X.Rows.count
    ReDim Na(nTrt)
    ReDim Ns(nBlock)

    'check for valid data
    For Each value In X
        If StopQ1("Input range contains missing or invalid data. Cannot continue.", IsLabel(value) = True Or IsEmpty(value) = True, value, 1006, Me.InputBox) = True Then Exit Sub
    Next value
    StartProc Me
    If MakeNewOutputSheet() = False Then Exit Sub
    
    'start computations
    GM = Application.Average(X)
    For Each Xval In X
        Xval = Xval - GM
    Next Xval
    
    With Application
        V2 = .SumSq(X)
        For i = 1 To nTrt
            Na(i) = .count(X.Columns(i))
            V3 = V3 + .Sum(X.Columns(i)) ^ 2 / Na(i)
        Next i
        For i = 1 To nBlock
            Ns(i) = .count(X.Rows(i))
            V4 = V4 + .Sum(X.Rows(i)) ^ 2 / Ns(i)
        Next i
        V1 = .Sum(X) ^ 2 / .count(X)
    End With
    
    For Each Xval In X
        Xval = Xval + GM
    Next Xval

    Set Base = Range("A" & Format(ActiveCell.Row))
    SetTitle Base, "Randomized blocks ANOVA"
    frmANOVA1.ANOVAmeansHeader Base
    
    With Application
        For i = 1 To nTrt
            Base.Offset(i + 3, 1).Range("A1:C1") = Array(.Average(X.Columns(i)), .count(X.Columns(i)), MyStdev(X.Columns(i)))
            Base.Offset(i + 3, 0).value = .Average(X)
            Base.Offset(i + 3, 0).NumberFormat = ";;;"
            
            If ColLabelsQ = vbYes Then
                If RowLabelsQ2 = vbYes And ColLabelsQ2 = vbYes Then j = 1 Else j = 0
                Base.Offset(i + 3, 4) = ColLabels(i + j).Text
            Else
                Base.Offset(i + 3, 4) = "Treatment " & i
            End If
        Next i
        i2 = i + 3
        Base.Offset(i2, 1).Range("A1:D1") = " "
        For i = 1 To nBlock
            Base.Offset(i + i2, 1).Range("A1:C1") = Array(.Average(X.Rows(i)), .count(X.Rows(i)), MyStdev(X.Rows(i)))
            If RowLabelsQ = vbYes Then
                If RowLabelsQ2 = vbYes And ColLabelsQ2 = vbYes Then j = 1 Else j = 0
                Base.Offset(i + i2, 4) = RowLabels(i + j).Text
            Else
                Base.Offset(i + i2, 4) = "Block " & i
            End If
        Next i
        With Base.Offset(i + i2, 1)
            .Range("A1:D1") = Array(Application.Average(X), Application.count(X), MyStdev(X), "Total")
            .CurrentRegion.Columns(2).NumberFormat = AutoFormat(3, Dec)
            .CurrentRegion.Columns(3).NumberFormat = "0"
            .CurrentRegion.Columns(4).NumberFormat = AutoFormat(3, Dec)
            .CurrentRegion.Columns(5).HorizontalAlignment = xlLeft
        End With
    End With
    FmtBottomRow Base.Offset(i + i2, 1).Range("A1:D1")
    
    Set base2 = Base.Offset(i + i2 + 2)

    frmANOVA1.ANOVAtableHeader base2
    base2.Offset(-1, 1).Range("A1:A2") = " "
    With base2
        .Range("A3") = "Treatments"
        .Range("A4") = "Blocks"
        .Range("A5") = "Error"
        .Range("A6") = "Total"
        .Range("B3") = V3 - V1
        .Range("B4") = V4 - V1
        .Range("B5") = V2 - V3 - V4 + V1
        .Range("B6") = V2 - V1
        .Range("C3") = nTrt - 1
        .Range("C4") = nBlock - 1
        .Range("C5") = (nTrt - 1) * (nBlock - 1)
        .Range("C6") = nTrt * nBlock - 1
        .Range("D3") = .Range("B3") / .Range("C3") '\MStrt
        .Range("D4") = .Range("B4") / .Range("C4") '\MSblock
        .Range("D5") = .Range("B5") / .Range("C5") '\MSerror
        
        If .Range("D5") > 0 Then
            .Range("E3") = .Range("D3") / .Range("D5") '\Ftrt
            .Range("E4") = .Range("D4") / .Range("D5") '\Fblock
        Else
            If .Range("D3") > 0# Then .Range("E3") = 1E+306 Else .Range("E3") = 0#
            If .Range("D4") > 0# Then .Range("E4") = 1E+306 Else .Range("E4") = 0#
        End If
        
        .Range("F3") = Application.Fdist(.Range("E3"), .Range("C3"), .Range("C5"))
        .Range("F4") = Application.Fdist(.Range("E4"), .Range("C4"), .Range("C5"))
        FormatPvalue .Range("F3"), xlYes
        FormatPvalue .Range("F4"), xlYes
        With .Range("A1:F6")
            .Columns(2).NumberFormat = AutoFormat(2, Dec)
            .Columns(4).NumberFormat = AutoFormat(3, Dec)
            .Columns(5).NumberFormat = "0.00"
       End With
    End With
    FmtBottomRow base2.Range("A6:F6")
    base2.Range("F8").Select

    base2.Range("A2").CurrentRegion.Columns.AutoFit

    TukeyQ = True
    m1 = ActiveCell.Row
    If Me.OptionNever = False Then
        If ((Me.OptionP05 = True And base2.Range("F3") <= 0.05) And nTrt > 2) Or Me.OptionAlways = True Then
            PostHocQ = True
            Set Means = Base.Range("B5").Resize(nTrt, 1)
            Set Ns2 = Base.Range("C5").Resize(nTrt, 1)
            Set Labels = Base.Range("E5").Resize(nTrt, 1)
            
            TukeyQ = True
            frmANOVA1.PostHocAnalysis base2.Range("A11").Offset(nTrt + 4), Means, Ns2, Labels, base2.Range("D5"), nTrt, base2.Range("C5"), True
            frmANOVA1.FitColumns Base, nBlock, nTrt
        Else
                TukeyQ = False
                PostHocQ = False
        End If
    Else
        TukeyQ = False
    End If

    If PostHocQ = True Then m1 = m1 + Means.Rows.count + 7
    If TukeyQ = True Then m2 = Means.Rows.count + 9 Else m2 = 0
    RowOffset = m1 + m2
    
    Set Means = Base.Offset(4, 0).Resize(nTrt, 5)
    
    If Me.chkPlotData = True Then frmANOVA1.PlotANOVAdata X, Means, Application.Max(Means.Columns(3)), True, AutoFormat(1, Dec), Base, RowOffset
   
    EndProc Base
    Exit Sub
    
MainErrorHandler:
    If errcheck("Randomized Blocks ANOVA") = vbYes Then Exit Sub Else Resume
End Sub

Attribute VB_Name = "frmANOVA3"
Attribute VB_Base = "0{857BAC62-790D-439F-BD30-5BC6368CE5EE}{68FF2191-6720-4FA7-BED6-92029C8BB58E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'''MegaStat|fffd| ANOVA: Two-factor module |fffd|2005 by J. B. Orris
'frmANOVA3

Option Explicit
Option Base 1



Private Sub UserForm_Activate()
    Me.InputBox.SetFocus
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    TwoFactorANOVA
End Sub

Private Sub buttonClear_Click()
    ClearLast
    Me.Hide
    Unload Me
    OpenUserForm "ANOVA3"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then Me.InputBox.SetFocus
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    CallHelp 4425
End Sub

Private Sub InputBox_DblClick(Cancel As Boolean)
        Me.InputBox.Text = SetAddr(Me, Me.InputBox)
End Sub

Private Sub InputBox_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBox.Text = SetAddr(Me, Me.InputBox)
    End If
End Sub
Private Sub InputboxLabel_Click()
        Me.InputBox.Text = SetAddr(Me, Me.InputBox)
End Sub

Private Sub InputBox_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        Me.buttonOK.SetFocus
    End If
End Sub

Private Sub InputReps_DblClick(Cancel As Boolean)
    SetReps
End Sub

Private Sub InputReps_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputReps.Text = SetAddr(Me, Me.InputReps)
    End If
End Sub

Private Sub InputRepsLabel_Click()
    SetReps
End Sub

Private Sub SetReps()
    Dim Nreps As Double

    If IsOKnumberText(Me.InputReps.Text) Then
        Exit Sub
    Else
        If Len(Me.InputReps.Text) = 0 Then Exit Sub
        Nreps = Range(Me.InputReps.Text).Cells.count
        If Nreps = 1 Then Nreps = Eval(Me.InputReps.Text)
        If StopQ0("Invalid or missing input value", Nreps = globalErrVal, 4425, Me.InputReps) = True Then Exit Sub
        Me.InputReps.Text = Str(Nreps)
    End If

    Me.buttonOK.SetFocus
End Sub

Sub TwoFactorANOVA()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler
    Dim InputRange As Range
    Dim X As Range
    Dim value As Range
    Dim Base As Range
    Dim base2 As Range
    
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer

    Dim Dec As Integer
    Dim nRows As Integer
    Dim nCols As Integer
    Dim Nreps As Double
    
    
    Dim RowMeans As Range
    Dim ColMeans As Range
    Dim CellMeans As Range
    Dim GM As Double
    Dim ChartData As Range
    
    Dim ColLabels As Range
    Dim ColLabelsQ As Integer
    Dim ColLabelsQ2 As Integer
    Dim RowLabels As Range
    Dim RowLabelsQ As Integer
    Dim RowLabelsQ2 As Integer
    Dim RowLabelArray() As String
    Dim RowCheck As Range
    Dim FoundLabel As Boolean
    
    Dim Means As Range
    Dim Ns As Range
    Dim Labels As Range
    
    Dim base3 As Range
    Dim Lines As Integer
    Dim Wide1 As Double
    Dim Wide2 As Double
    Dim Xval As Double
    Dim TukeyQ As Boolean
    Dim Adj As Integer

    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub

    If ValidRange(Me.InputBox, vbYes) = False Then Exit Sub
    Set InputRange = Range(Me.InputBox.Text)
    If StopQ1("Not enough data selected.", InputRange.Rows.count <= 1, InputRange.Rows, 1001, Me.InputBox) = True Then Exit Sub
    
    SetReps
    i = 2
    For Each X In InputRange.Rows(1).Cells
        If IsLabel(X) = False And IsEmpty(X) = False Then
            i = 1
            Exit For
        End If
    Next X
    
    j = 2
    For Each X In InputRange.Columns(1).Cells
        If IsLabel(X) = False And IsEmpty(X) = False Then
            j = 1
            Exit For
        End If
    Next X
    Set InputRange = InputRange.Range(Cells(i, j), Cells(InputRange.Rows.count, InputRange.Columns.count))
    InputRange.Worksheet.Activate

    If StopQ1("Must select at least two columns.", InputRange.Columns.count < 2, InputRange, 1008, Me.InputBox) = True Then Exit Sub
    
    If InputRange.Rows(1).Row > 1 Then
        Set ColLabels = InputRange.Offset(-1, 0).Range(Cells(1, 1), Cells(1, InputRange.Columns.count)).Cells
        ColLabelsQ = vbYes
        For Each value In ColLabels
            If IsLabel(value) = False Then
                ColLabelsQ = vbNo
                Exit For
            End If
        Next value
    Else
        ColLabelsQ = vbNo
    End If
    
    If InputRange.Columns(1).Column > 1 Then
        Set RowLabels = InputRange.Offset(0, -1).Range(Cells(1, 1), Cells(InputRange.Rows.count, 1)).Cells
        RowLabelsQ = vbYes
        For Each value In RowLabels
            If IsLabel(value) = False Then
                RowLabelsQ = vbNo
                Exit For
            End If
        Next value
    Else
        RowLabelsQ = vbNo
    End If
    Set X = InputRange
    
    Dec = DecPlaces(X)
    nCols = X.Columns.count
    nRows = X.Rows.count

    'check for valid data
    For Each value In X
        If StopQ1("Input range contains missing or invalid data. Cannot continue.", IsLabel(value) = True Or IsEmpty(value) = True, value, 1006, Me.InputBox) = True Then Exit Sub
    Next value

    'validate nReps
        If StopQ0("Invalid number of replications per cell:  " & Nreps, Len(Me.InputReps.Text) = 0, 4425, Me.InputReps) = True Then Exit Sub
        Nreps = Int(Eval(Me.InputReps.Text))
        If StopQ0("Invalid or missing input value:  " & Nreps, Nreps < 1 Or Nreps > nRows / 2, 4425, Me.InputReps) = True Then Exit Sub
        Me.InputReps.Text = Str(Nreps)
        If StopQ0("Invalid number of replications per cell:  " & Nreps, X.Rows.count Mod Nreps <> 0, 4425, Me.InputReps) = True Then Exit Sub
        nRows = nRows / Nreps
        
    'identify row labels
    ReDim RowLabelArray(nRows)
    For i = 1 To nRows
        Set RowCheck = RowLabels.Range("A1").Offset((i - 1) * Nreps, 0).Resize(Nreps)
        'find first text value and assume it is the label
        FoundLabel = False
        For Each value In RowCheck
            If IsLabel(value) = True Then
                RowLabelArray(i) = value.Text
                FoundLabel = True
                Exit For
            End If
        Next value
        If FoundLabel = False Then RowLabelArray(i) = "Row " & Str(i)
    Next i

    StartProc Me
    
    If MakeNewOutputSheet() = False Then Exit Sub
    Set Base = Range("A" & Format(ActiveCell.Row))
    SetTitle Base, "Two factor ANOVA"

    Base.Range("B4") = "Means:"
    Base.Offset(4 + (nRows + 1) / 2) = "Factor 1"
    Base.Offset(2, 1 + (nCols + 1) / 2) = "Factor 2"
    With Application
        For i = 1 To nCols
            For j = 1 To nRows
                Base.Offset(j + 4, i + 1) = .Average(X.Offset((j - 1) * Nreps, i - 1).Resize(Nreps, 1))
            Next j
        Next i
        Set CellMeans = Base.Offset(5, 2).Resize(nRows, nCols)
        Set ChartData = Base.Offset(4, 1).Resize(nRows + 1, nCols + 1)
        
        For i = 1 To nCols
            If ColLabelsQ = vbYes Then
                If RowLabelsQ2 = vbYes And ColLabelsQ2 = vbYes Then j = 1 Else j = 0
                Base.Offset(4, i + 1) = ColLabels(i + j).Text
            Else
                Base.Offset(4, i + 1) = "Column " & i
            End If
            Base.Offset(5 + nRows, i + 1) = .Average(CellMeans.Columns(i))
            ThisWorkbook.Sheets("TempSheet").Range("A3").Offset(i, 0) = nRows * Nreps
        Next i
        
        For j = 1 To nRows
            Base.Offset(j + 4, 1) = RowLabelArray(j)
            Base.Offset(j + 4, nCols + 2) = .Average(CellMeans.Rows(j))
            ThisWorkbook.Sheets("TempSheet").Range("C3").Offset(j, 0) = nCols * Nreps
        Next j
        
        Set ColMeans = Base.Offset(nRows + 5, 2).Resize(1, nCols)
        Set RowMeans = Base.Offset(5, nCols + 2).Resize(nRows, 1)
        GM = Application.Average(CellMeans)
        Base.Offset(nRows + 5, nCols + 2) = GM
        
        Base.Range("B4").CurrentRegion.HorizontalAlignment = xlRight
        Base.Range("C6").Resize(nRows + 1, nCols + 1).NumberFormat = AutoFormat(1, Dec)
        SetGrid Base.Range("C6").Resize(nRows, nCols)
        Base.Offset(4 + (nRows + 1) / 2).HorizontalAlignment = xlCenter
        Base.Offset(nRows + 7, 1) = Nreps
        Base.Offset(nRows + 7, 2) = "replications per cell"
    End With
    
    Set base2 = Base.Offset(nRows + 9)
   
    'Factor 1: rows  Factor2: columns
    frmANOVA1.ANOVAtableHeader base2
    base2.Offset(-1, 1).Range("A1:A2") = " "
    With base2
        .Range("A3") = "Factor 1"
        .Range("A4") = "Factor 2"
        .Range("A5") = "Interaction"
        .Range("A6") = "Error"
        .Range("A7") = "Total"
        .Range("B3") = Application.DevSq(RowMeans) * nCols * Nreps
        .Range("B4") = Application.DevSq(ColMeans) * nRows * Nreps
        .Range("B5") = Application.DevSq(CellMeans) * Nreps - .Range("B3") - .Range("B4")
        .Range("B7") = Application.DevSq(X)
        .Range("B6") = .Range("B7") - .Range("B3") - .Range("B4") - .Range("B5")
        .Range("C3") = nRows - 1
        .Range("C4") = nCols - 1
        .Range("C5") = (nCols - 1) * (nRows - 1)
        .Range("C6") = (nCols * nRows) * (Nreps - 1)
        .Range("C7") = nCols * nRows * Nreps - 1
        .Range("D3") = .Range("B3") / .Range("C3") '\MScols
        .Range("D4") = .Range("B4") / .Range("C4") '\MSrows
        .Range("D5") = .Range("B5") / .Range("C5") '\MSinteraction
        .Range("D6") = .Range("B6") / .Range("C6") '\MSerror
        
        If .Range("D6") > 0 Then
            .Range("E3") = .Range("D3") / .Range("D6") '\Fcols
            .Range("E4") = .Range("D4") / .Range("D6") '\Frows
            .Range("E5") = .Range("D5") / .Range("D6") '\Finteraction
        Else
            If .Range("D3") > 0 Then .Range("E3") = 1E+306 Else .Range("E3") = 0#
            If .Range("D4") > 0 Then .Range("E4") = 1E+306 Else .Range("E4") = 0#
            If .Range("D5") > 0 Then .Range("E5") = 1E+306 Else .Range("E5") = 0#
        End If
        
        .Range("F3") = Application.Fdist(.Range("E3"), .Range("C3"), .Range("C6"))
        .Range("F4") = Application.Fdist(.Range("E4"), .Range("C4"), .Range("C6"))
        .Range("F5") = Application.Fdist(.Range("E5"), .Range("C5"), .Range("C6"))
        FormatPvalue .Range("F3"), xlYes
        FormatPvalue .Range("F4"), xlYes
        FormatPvalue .Range("F5"), xlYes
        
        With .Range("A1:F7")
            .Columns(2).NumberFormat = AutoFormat(2, Dec)
            .Columns(4).NumberFormat = AutoFormat(3, Dec)
            .Columns(5).NumberFormat = "0.00"
       End With
    End With
    FmtBottomRow base2.Range("A7:F7")
    base2.Range("F9").Select

    base2.Range("A2").CurrentRegion.Columns.AutoFit

    If Me.OptionNever = False Then
        If ((Me.OptionP05 = True And base2.Range("F3") <= 0.05) And nRows > 2) Or Me.OptionAlways = True Then
            'Factor 1, rows
            Set Means = RowMeans
            Set Ns = ThisWorkbook.Sheets("TempSheet").Range("C3").Offset(1, 0).CurrentRegion
            Set Labels = Base.Range("B6").Resize(nRows, 1)
            TukeyQ = True
            frmANOVA1.PostHocAnalysis base2.Range("A12").Offset(nRows + 4), Means, Ns, Labels, base2.Range("D6"), nRows, base2.Range("C6"), True
            base2.Range("A12").Offset(-2, 0) = base2.Range("A12").Offset(-2, 0) & " for Factor 1"
            frmANOVA1.FitColumns Base, nRows, nCols
            Adj = 0
        End If
    
        If ((Me.OptionP05 = True And base2.Range("F4") <= 0.05) And nCols > 2) Or Me.OptionAlways = True Then
            'Factor 2, cols
            Set Means = ColMeans
            Set Ns = ThisWorkbook.Sheets("TempSheet").Range("A3").Offset(1, 0).CurrentRegion
            Set Labels = Base.Range("C5").Resize(1, nCols)
            If IsEmpty(base2.Range("A12").Offset(-2, 0)) = True Then j = 0 Else j = 2 * nRows + 14
            frmANOVA1.PostHocAnalysis base2.Range("A12").Offset(j + nCols + 4 - Adj), Means, Ns, Labels, base2.Range("D6"), nCols, base2.Range("C6"), True
            base2.Range("A12").Offset(j - 2 - Adj, 0) = base2.Range("A12").Offset(j - 2 - Adj, 0) & " for Factor 2"
            frmANOVA1.FitColumns Base, nRows, nCols
        End If
    End If

    Base.Range("A2").HorizontalAlignment = xlLeft
    Base.Offset(2, 2).Resize(1, nCols).HorizontalAlignment = xlCenterAcrossSelection
    
    If Me.chkPlotbyRow = True Then
        PlotInteraction ChartData, "Interaction Plot by Factor 1", nCols, xlColumns, CellMeans.NumberFormat, Base, True
    End If

    If Me.chkPlotbyColumn = True Then
        PlotInteraction ChartData, "Interaction Plot by Factor 2", nRows, xlRows, CellMeans.NumberFormat, Base, True
    End If

    EndProc Base
    Exit Sub
    
MainErrorHandler:
    If errcheck("Two-factor ANOVA") = vbYes Then Exit Sub Else Resume
End Sub

Public Sub PlotInteraction(ChartData As Range, ChartTitle As String, nSeries As Integer, Which As Integer, Fmt As String, Base As Range, TukeyQ As Boolean)
    Dim base2 As Range
    Dim ch As ChartObject
    Dim Markers(9) As Integer
    Dim WhichMarker As Integer
    Dim MarkerBackground As Integer
    Dim i As Integer
    Dim j As Integer
    Dim Row As Integer
    
    Markers(1) = xlCircle
    Markers(2) = xlX
    Markers(3) = xlSquare
    Markers(4) = xlDiamond
    Markers(5) = xlTriangle
    Markers(6) = xlStar
    Markers(7) = xlPlus
    Markers(8) = xlDot
    Markers(9) = xlNone
        
    Set base2 = Range("A" & Format(ActiveCell.Row))

    Set ch = ActiveSheet.ChartObjects.Add(20, base2.Range("A1").Top, 400, 252)
    ch.Placement = xlMove
    
    With ch.Chart
        .SeriesCollection.Add Source:=ChartData
        .ChartType = xlLine
        .PlotBy = Which
        .HasTitle = True
        .HasLegend = True
        .Legend.Position = xlBottom
        .ChartTitle.Text = ChartTitle
        SetFont .ChartTitle
        SetFont .ChartArea
        .PlotArea.Border.LineStyle = xlNone
        .PlotArea.Interior.ColorIndex = xlNone

        On Error Resume Next
        With .Axes(xlCategory, xlPrimary)
            .HasTitle = False
            SetFont .AxisTitle
            SetFont .TickLabels
            .HasMajorGridlines = False
            .HasMinorGridlines = False
            .MajorTickMark = xlNone
            .MinorTickMark = xlNone
            .TickLabels.Orientation = xlHorizontal
        End With

        With .Axes(xlValue, xlPrimary)
            .HasTitle = True
            .AxisTitle.Text = "Cell Mean"

            .TickLabels.NumberFormat = Trim(Fmt)
            SetFont .AxisTitle
            SetFont .TickLabels
            .HasMajorGridlines = False
            .HasMinorGridlines = False
            .MajorTickMark = xlCross
            .MinorTickMark = xlNone
            .Crosses = xlCustom
            .CrossesAt = .MinimumScale
        End With
        
        For i = 1 To nSeries
                If i <= 9 Then
                    j = i
                    MarkerBackground = xlNone
                Else
                    j = i - 9
                    MarkerBackground = 1
                End If
                    
            WhichMarker = Markers(j)
            With .SeriesCollection(j)
                .MarkerStyle = WhichMarker
                .MarkerBackgroundColorIndex = MarkerBackground
                .MarkerForegroundColorIndex = 1
                .Border.Weight = xlHairline
                .Border.LineStyle = xlContinuous
                .Border.ColorIndex = 1
                .MarkerSize = 5
            End With
        Next i
        ch.BottomRightCell.Offset(2, -1) = " "
        ch.BottomRightCell.Offset(2, -1).Select
    End With
    
    
End Sub

Attribute VB_Name = "frmAbout"
Attribute VB_Base = "0{F7768FAE-DBFF-4EE0-9E3D-C1B66737FF48}{C7A88762-CD2F-4FB7-97B5-92E53A9D38EB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'''MegaStat|fffd|  About module |fffd|2005 by J. B. Orris
'frmAbout

Option Explicit
Dim Version As String
Dim Website As String
Dim Email As String
Dim Info As String

Private Sub UserForm_Activate()
    With Me
        .Height = 228
        .Top = .Top + 114
        .Label_Title.Caption = .Label_Title.Caption
        If globalCompileMH = True Then 'McGraw-Hill version
            Version = "  Version " & globalVersion
            Info = "Distributed by McGraw-Hill for educational use only."
            Website = "http://www.mhhe.com/support"
            Email = "mailto:orris@butler.edu"
        Else 'BU version
            Version = "  Pre-release version " & globalVersion & ", expires " & globalExpireDate
            Info = "For Butler University coursework only."
            Website = "http://blue.butler.edu/~orris"
'            Email = "mailto:orris@butler.edu"
        End If
'        .Label_email.Caption = Mid(Email, 8, 50)
        .Label_Version.Caption = Version
        .labelInfo.Caption = Info
        .LabelWebsite.Caption = Website
        If .Tag = "SysInfo" Then buttonSysInfo_Click
    End With
End Sub

Private Sub buttonOK_Click()
    Unload Me
End Sub

Private Sub buttonHelp_Click()
    CallHelp 3020
End Sub

Private Sub buttonHelpSysInfo_Click()
    CallHelp 3010
End Sub

Private Sub buttonSysInfo_Click()
    LoadHelpFile

    With Me
        If Me.Height < 322 Then
            .buttonSysInfo.Caption = "Hide System Information"
            .buttonSysInfo.Top = 408
            .Height = 454
            .Top = .Top - 114
            .LabelOS.Caption = Application.OperatingSystem
            .LabelExcel.Caption = Application.Version & "  (Build " & Application.Build & ")"
            .LabelProgFile.Caption = AddIns("MegaStat").FullName
            .LabelHelpFile.Caption = globalHelpFile
            .LabelMemUsed.Caption = Format(Application.MemoryUsed, "#,##0")
            .LabelMemFree.Caption = Format(Application.MemoryFree, "#,##0")
            .LabelMemTotal.Caption = Format(Application.MemoryTotal, "#,##0")
        Else
            .buttonSysInfo.Caption = "System Information"
            .buttonSysInfo.Top = 180
            .Height = 228
            .Top = .Top + 114
        End If
    End With
End Sub

Private Sub buttonInsert_Click()
    Dim Base As Range
    
    ScreenOFF
    Unload Me
    If MakeNewOutputSheet() = False Then Exit Sub
    Set Base = Range("A" & Format(ActiveCell.Row))
    SetTitle Base, "System Information  (" & Application.Text(Now(), "d-mmm-yy") & " " & Application.Text(Now(), "h:mm AM/PM") & ")"
    With Base
        .Range("B4") = "Operating System:"
        .Range("B5") = "Excel version:"
        .Range("B6") = "Program file:"
        .Range("B7") = "Help file:"
        
        .Range("B9") = "Memory used:"
        .Range("B10") = "Memory free:"
        .Range("B11") = "Memory total:"
        .Range("B4:B11").HorizontalAlignment = xlRight
        .Range("B4:B11").Columns.AutoFit
        
        .Range("C4") = Me.LabelOS.Caption
        .Range("C5") = Me.LabelExcel.Caption
        .Range("C6") = Me.LabelProgFile.Caption
        .Range("C7") = Me.LabelHelpFile.Caption
        
        .Range("C9") = Application.MemoryUsed
        .Range("C10") = Application.MemoryFree
        .Range("C11") = Application.MemoryTotal
        .Range("C9:C11").NumberFormat = " #,##0"
        .Range("C9:C11").HorizontalAlignment = xlLeft
        .Range("C9:C11").Columns.AutoFit
    End With
    EndProc Base
End Sub
Private Sub Label_email_Click()
    Dim ActWin As Window
    Dim Link As String
    
    Set ActWin = ActiveWindow
    ActiveWorkbook.FollowHyperlink Address:=Email, NewWindow:=True
    ActWin.Visible = True
End Sub

Private Sub LabelWebsite_Click()
    Dim ActWin As Window
    Dim Link As String
    
    Set ActWin = ActiveWindow
    
    ActiveWorkbook.FollowHyperlink Address:=Website, NewWindow:=True
    ActWin.Visible = True
End Sub
Attribute VB_Name = "frmChisq"
Attribute VB_Base = "0{B45B6D43-391E-499A-9360-7BE3C142406B}{761FB425-8D1D-4EA7-82AE-C20EB710C51A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'''MegaStat|fffd| Contingency table/CrossTab/GOF module |fffd|2005 by J. B. Orris
'frmChisq

Option Explicit
Option Base 1
Private Type Data1
    Display As Boolean
    Name As String
    Down As Integer
    Format As String
End Type

Private Sub UserForm_Activate()
    With Me
        Select Case Me.Tag
            Case "Contingency"
                .InputBoxCont.SetFocus
            Case "XTab"
                .InputBoxRowData.SetFocus
            Case "GOF"
                .InputBoxObs.SetFocus
        End Select
    End With
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    Select Case Me.Tag
        Case "Contingency", "XTab"
            ContingencyTableXtab
        Case "GOF"
            GOF
    End Select
End Sub

Private Sub buttonClear_Click()
    Dim SaveTag As String
    ClearLast
    Me.Hide
    SaveTag = Me.Tag
    Unload Me
    frmChisq.Tag = SaveTag
    OpenUserForm SaveTag
End Sub

Private Sub buttonCancel_Click()
    With Me
        If globalXL97 Then
            Select Case Me.Tag
                Case "Contingency"
                    .InputBoxCont.SetFocus
                Case "XTab"
                    .InputBoxRowData.SetFocus
                Case "GOF"
                    .InputBoxObs.SetFocus
            End Select
        End If
        .Hide
    End With
End Sub

Private Sub InputBoxRowData_DblClick(Cancel As Boolean)
    Me.InputBoxRowData.Text = SetAddr(Me, Me.InputBoxRowData)
End Sub

Private Sub InputBoxRowData_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBoxRowData.Text = SetAddr(Me, Me.InputBoxRowData)
    End If
End Sub
Private Sub Label4_Click()
    Me.InputBoxRowData.Text = SetAddr(Me, Me.InputBoxRowData)
End Sub

Private Sub Label6_Click()
    Me.InputBoxColData.Text = SetAddr(Me, Me.InputBoxColData)
End Sub

Private Sub InputBoxColData_DblClick(Cancel As Boolean)
    Me.InputBoxColData.Text = SetAddr(Me, Me.InputBoxColData)
End Sub

Private Sub InputBoxColData_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBoxColData.Text = SetAddr(Me, Me.InputBoxColData)
    End If
End Sub
Private Sub buttonHelp_Click()
    Select Case Me.Tag
        Case "Contingency"
            CallHelp 4510
        Case "XTab"
            CallHelp 4530
        Case "GOF"
            CallHelp 4520
    End Select
End Sub

Private Sub InputBoxCont_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        Me.buttonOK.SetFocus
    End If
End Sub

Private Sub InputBoxRowData_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        Me.InputBoxRowSpec.SetFocus
    End If
End Sub

Private Sub InputBoxRowSpec_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        Me.InputBoxColData.SetFocus
    End If
End Sub

Private Sub InputBoxColData_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        Me.InputBoxColSpec.SetFocus
    End If
End Sub

Private Sub InputBoxColSpec_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        Me.buttonOK.SetFocus
    End If
End Sub

Private Sub InputBoxObs_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        Me.InputBoxExp.SetFocus
    End If
End Sub

Private Sub InputBoxExp_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        Me.InputBoxParameters.SetFocus
    End If
End Sub

Private Sub InputBoxParameters_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        Me.buttonOK.SetFocus
    End If
End Sub

Private Sub InputBoxColData_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    InputBoxColData.SetFocus
End Sub

Private Sub InputBoxColSpec_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    InputBoxColSpec.SetFocus
End Sub

Private Sub InputBoxRowData_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    InputBoxRowData.SetFocus
End Sub

Private Sub InputBoxRowSpec_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    InputBoxRowSpec.SetFocus
End Sub

Sub ContingencyTableXtab()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler

    Dim InputDataTable As Range
    Dim Base As Range
    Dim d As Range
    Dim R As Range
    Dim Data As Range
    Dim grandsum As Double
    Dim out2 As Range
    Dim chi As Double
    Dim i As Integer
    Dim j As Integer
    Dim l As Integer
    Dim df As Integer
    Dim nRows As Integer
    Dim nCols As Integer
    Dim Labels As Integer
    Dim Numbers As Integer
    Dim ans As Integer
    Dim Row1 As Range
    Dim Col1 As Range
    Dim InputRange As Range
    Dim rowData As Range
    Dim rowSpec As Range
    Dim colData As Range
    Dim colSpec As Range
    Dim value As Range
    Dim rowLabel As String
    Dim rowLabelFmt As String
    Dim colLabel As String
    Dim colLabelFmt As String
    Dim Table() As Variant
    Dim colSpecCol As Integer
    Dim rowSpecCol As Integer
    Dim nMissing As Integer
    Dim Sum As Integer
    Dim ColLabelsQ As Integer
    Dim RowLabelsQ As Integer
    Dim k As Integer
    Dim n As Integer
    Dim rowSub As Integer
    Dim colSub As Integer
    Dim RowSpecArray() As Variant
    Dim ColSpecArray() As Variant
    Dim TestVal As Variant
    Dim RowLabels() As Variant
    Dim ColLabels() As Variant
    Dim RowLabelsFmt() As String
    Dim ColLabelsFmt() As String
    Dim OutputQ(8) As Data1
    Dim Out As UserForm
    Dim OutCount As Integer
    Dim e As Double
    Dim ZeroFlag As Boolean
    Dim lcheck As Integer
    Dim nPop As Double
    Dim nPos As Double
    Dim nSample As Double
    Dim MinCell As Double
    Dim con1 As Double
    Dim con2 As Double
    Dim starti As Integer
    Dim L2 As Double
    Dim cum_prob As Double
    Dim ln_prob As Double
    Dim ColumnSpec As Object
    
    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub

    Select Case Me.Tag
        Case "Contingency"
            If ValidRange(Me.InputBoxCont, vbYes) = False Then Exit Sub
            Set Data = Range(Me.InputBoxCont.Text)
            Data.Worksheet.Activate
            
            Set Row1 = Data.Rows(1).Cells
            Set Col1 = Data.Columns(1).Cells
   
            If IsEmpty(Row1.Cells(1)) Then Row1.Cells(1) = "x"
            ColLabelsQ = LabelCheck(Row1)
            If ColLabelsQ = vbCancel Then Exit Sub
            If IsEmpty(Col1.Cells(1)) Then Col1.Cells(1) = "x"
            RowLabelsQ = LabelCheck(Col1)
            If RowLabelsQ = vbCancel Then Exit Sub
            If Row1.Cells(1) = "x" Then Row1.Cells(1) = ""
            If Col1.Cells(1) = "x" Then Col1.Cells(1) = ""
        
            Select Case ColLabelsQ + RowLabelsQ
                Case vbYes * 2
                    l = 0
                    Set Row1 = Row1.Offset.Range(Cells(1, 2), Cells(1, Data.Columns.count))
                    Set Col1 = Col1.Offset.Range(Cells(2, 1), Cells(Data.Rows.count, 1))
                Case vbNo * 2
                    l = 1
                Case vbYes + vbNo
                    If StopQ0("Must specify both row and column labels or no labels.", True, 1029, Me.InputBoxCont) = True Then Exit Sub
            End Select
            
            nRows = Data.Rows.count + l - 1
            nCols = Data.Columns.count + l - 1
            
            If l = 1 And Row1.Row > 1 And Col1.Column > 1 Then
                If EmptyRangeQ(Row1.Offset(-1, 0).Cells) = True Or EmptyRangeQ(Row1.Offset(-1, 0).Cells) = True Then
                    lcheck = vbNo
                Else
                    Set Row1 = Row1.Offset(-1, 0).Cells
                    Set Col1 = Col1.Offset(0, -1).Cells
                    lcheck = vbYes
                End If
            Else
                lcheck = vbNo
            End If
            
            ColLabelsQ = LabelCheck(Row1)
            If ColLabelsQ = vbCancel Then Exit Sub
            RowLabelsQ = LabelCheck(Col1)
            If RowLabelsQ = vbCancel Then Exit Sub
            
            Err.number = 0
            If StopQ0("Must specify both row and column labels or no labels.", ColLabelsQ + RowLabelsQ = vbYes + vbNo, 1029, Me.InputBoxCont) = True Then Exit Sub
            
            ReDim Table(nRows + 1, nCols + 1, 8)
            ReDim RowLabels(nRows + 1)
            ReDim RowLabelsFmt(nRows + 1)
            ReDim ColLabels(nCols + 1)
            ReDim ColLabelsFmt(nCols + 1)
            
            If StopQ0("Table must include at least two rows and two columns", nRows < 2 Or nCols < 2, 1017, Me.InputBoxCont) = True Then Exit Sub
        
            Set InputDataTable = Data.Offset(1 - l, 1 - l).Range(Cells(1, 1), Cells(nRows, nCols))
            InputDataTable.Worksheet.Activate
            
            If (DataOK(InputDataTable, Me.InputBoxCont) = vbNo) Then Exit Sub
            'move to table array
            For i = 1 To nRows
                For j = 1 To nCols
                    Table(i, j, 1) = InputDataTable.Cells(i, j).value
                Next j
            Next i
            Set InputDataTable = Nothing
            
        Case "XTab"
            If ValidRange(Me.InputBoxRowData, vbYes) = False Then Exit Sub
            If ValidRange(Me.InputBoxRowSpec, vbYes) = False Then Exit Sub
            If ValidRange(Me.InputBoxColData, vbYes) = False Then Exit Sub
            If ValidRange(Me.InputBoxRowSpec, vbYes) = False Then Exit Sub
                    
            '--------rowData
            Set rowData = Range(Me.InputBoxRowData)
            rowData.Worksheet.Activate
            
            If StopQ1("Not enough data to proceed.", rowData.count <= 2, rowData, 1001, Me.InputBoxRowData) = True Then Exit Sub
            If StopQ1("Data must be in a single column.", rowData.Columns.count > 1, rowData, 1005, Me.InputBoxRowData) = True Then Exit Sub
            rowLabel = rowData(1)
            rowLabelFmt = rowData(1).NumberFormat
            
            '--------colData
            Set colData = Range(Me.InputBoxColData)
            colData.Worksheet.Activate
            
            If StopQ1("Not enough data to proceed.", colData.count < 2, colData, 1001, Me.InputBoxColData) = True Then Exit Sub
            If StopQ1("Data must be in a single column.", colData.Columns.count > 1, colData, 1005, Me.InputBoxColData) = True Then Exit Sub
            colLabel = colData(1)
            colLabelFmt = colData(1).NumberFormat
            
            '----------
            If StopQ1("Data ranges must be the same size.", rowData.count <> colData.count, Union(rowData, colData), 1007, Me.InputBoxRowData) = True Then Exit Sub
            
            '--------rowSpec
            Set rowSpec = Range(Me.InputBoxRowSpec)
            rowSpec.Worksheet.Activate
            
            If StopQ1("Specification range must contain at least two rows.", rowSpec.Rows.count < 2, rowSpec, 1004, Me.InputBoxRowSpec) = True Then Exit Sub
            
            For Each R In rowSpec.Rows
                If StopQ1("Empty row in specification range.", Application.CountA(R) = 0, rowSpec, 1018, Me.InputBoxRowSpec) = True Then Exit Sub
            Next R
            nMissing = -1
            For Each value In rowSpec
                If Trim(rowLabel) = Trim(value) Then
                    nMissing = 0
                    If rowData.Cells(1).Row > 1 Then
                        If Application.IsText(rowData.Cells(1).Offset(-1, 0).Cells(1)) = True Then rowLabel = rowData.Cells(1).Offset(-1, 0).Cells(1).value Else rowLabel = ""
                    Else
                        rowLabel = ""
                    End If
                    Exit For
                End If
            Next value
            
            '--------colSpec
            Set colSpec = Range(Me.InputBoxColSpec)
            colSpec.Worksheet.Activate
            
            If StopQ1("Specification range must contain at least two rows.", colSpec.Rows.count < 2, colSpec, 1004, Me.InputBoxColSpec) = True Then Exit Sub
            
            For Each R In colSpec.Rows
                If StopQ1("Empty row in specification range.", Application.CountA(R) = 0, colSpec, 1018, Me.InputBoxColSpec) = True Then Exit Sub
            Next R
                    
            For Each value In colSpec
                If Trim(colLabel) = Trim(value) Then
                    nMissing = 0
                    If colData.Cells(1).Row > 1 Then
                        If Application.IsText(colData.Cells(1).Offset(-1, 0).Cells(1)) = True Then colLabel = colData.Cells(1).Offset(-1, 0).Cells(1).value Else colLabel = ""
                    Else
                        colLabel = ""
                    End If
                    Exit For
                End If
            Next value
            
            '-----------
            nRows = rowSpec.Rows.count
            nCols = colSpec.Rows.count
            rowSpecCol = rowSpec.Columns.count
            colSpecCol = colSpec.Columns.count
            n = rowData.Rows.count
            ReDim Table(nRows + 1, nCols + 1, 8)
            ReDim RowLabels(nRows + 1)
            ReDim RowLabelsFmt(nRows + 1)
            ReDim ColLabels(nCols + 1)
            ReDim ColLabelsFmt(nCols + 1)

            
            ReDim RowSpecArray(nRows, rowSpecCol)
            ReDim ColSpecArray(nCols, colSpecCol)
            
            setCountArray nRows, rowSpecCol, RowSpecArray, rowSpec
            setCountArray nCols, colSpecCol, ColSpecArray, colSpec
                    
            For k = 1 To n
                TestVal = Trim(rowData.Rows(k).value)
                rowSub = FindSub(nRows, rowSpecCol, TestVal, RowSpecArray)
                   
                If rowSub > 0 Then
                    TestVal = Trim(colData.Rows(k).value)
                    colSub = FindSub(nCols, colSpecCol, TestVal, ColSpecArray)
                End If
                   
                If rowSub > 0 And colSub > 0 Then
                    Table(rowSub, colSub, 1) = Table(rowSub, colSub, 1) + 1
                Else
                    nMissing = nMissing + 1
                End If
           Next k
    End Select
    
    StartProc Me
    
    If MakeNewOutputSheet() = False Then Exit Sub
    Set Base = Range("A" & Format(ActiveCell.Row))
        
    Select Case Me.Tag
        Case "Contingency"
            SetTitle Base, "Chi-square Contingency Table Test for Independence"
            'set labels
            For i = 1 To nRows
                If l = 0 Or lcheck = vbYes Then
                    RowLabels(i) = Col1.Cells(i)
                    RowLabelsFmt(i) = Col1.Cells(i).NumberFormat
                Else
                    RowLabels(i) = "Row " & i
                End If
            Next i
            For j = 1 To nCols
                If l = 0 Or lcheck = vbYes Then
                    ColLabels(j) = Row1.Cells(j) & "  "
                    ColLabelsFmt(j) = Row1.Cells(j).NumberFormat
                Else
                    ColLabels(j) = "Col " & j & "  "
                End If
            Next j
            colLabel = "  "
            rowLabel = "  "
         Case "XTab"
            SetTitle Base, "Crosstabulation"
            'set labels
            For i = 1 To nRows
                RowLabels(i) = rowSpec.Range("A1").Offset(i - 1, 0).value
                RowLabelsFmt(i) = rowSpec.Range("A1").Offset(i - 1, 0).NumberFormat
            Next i
            For j = 1 To nCols
                ColLabels(j) = colSpec.Range("A1").Offset(j - 1, 0).value & "  "
                ColLabelsFmt(j) = colSpec.Range("A1").Offset(j - 1, 0).NumberFormat
            Next j
            If nMissing > 0 Then
                Base.Offset(2, nCols + 2) = nMissing
                Base.Offset(2, nCols + 3) = "values not counted"
            End If
    End Select
    
    'calculate sums
    For i = 1 To nRows
        For j = 1 To nCols
            Table(i, nCols + 1, 1) = Table(i, nCols + 1, 1) + Table(i, j, 1)
            Table(nRows + 1, j, 1) = Table(nRows + 1, j, 1) + Table(i, j, 1)
            
            Table(i, nCols + 1, 2) = Table(i, nCols + 1, 2) + Table(i, j, 1)
            Table(nRows + 1, j, 2) = Table(nRows + 1, j, 2) + Table(i, j, 1)
        Next j
        Table(nRows + 1, nCols + 1, 1) = Table(nRows + 1, nCols + 1, 1) + Table(i, nCols + 1, 1)
        Table(nRows + 1, nCols + 1, 2) = Table(nRows + 1, nCols + 1, 2) + Table(i, nCols + 1, 1)
    Next i

    'check for empty row/col
    ZeroFlag = False
    For i = 1 To nRows
        If Table(i, nCols + 1, 1) = 0 Then ZeroFlag = True
    Next i
    For j = 1 To nCols
        If Table(nRows + 1, j, 1) = 0 Then ZeroFlag = True
    Next j
    
    grandsum = Table(nRows + 1, nCols + 1, 1)
    If (Table(nRows + 1, nCols, 1) * 2 = grandsum And Table(nRows, nCols + 1, 1) * 2 = grandsum) And grandsum > 1 Then _
        MsgBox "It looks like you may have included row/column totals in the input range. Please check.", vbExclamation + vbMsgBoxHelpButton, globalTitle, globalHelpFile, 1027
        
        'calculate expected values or print error message
    If grandsum = 0 Then
        Base.Range("B4") = "No data values matching your specification range were found."
        Base.Range("B6") = "  Make sure your specification range values are excactly the same as"
        Base.Range("B7") = "    the values you wish to count (including case sensitivity)."
        EndProc Base
        Exit Sub
    Else
        For i = 1 To nRows
            For j = 1 To nCols
                Table(i, j, 2) = Table(i, nCols + 1, 1) * Table(nRows + 1, j, 1) / grandsum
            Next j
        Next i
    End If
    On Error Resume Next
    For i = 1 To nRows
        For j = 1 To nCols
          
            Table(i, j, 3) = Table(i, j, 1) - Table(i, j, 2) ' O - E
            Table(i, nCols + 1, 3) = Table(i, nCols + 1, 3) + Table(i, j, 3)
            Table(nRows + 1, j, 3) = Table(nRows + 1, j, 3) + Table(i, j, 3)
            
            e = Table(i, j, 2)
            If e > 0 Then
                Table(i, j, 4) = Table(i, j, 3) ^ 2 / e  ' (O - E)|fffd| / E
                Table(i, nCols + 1, 4) = Table(i, nCols + 1, 4) + Table(i, j, 4)
                Table(nRows + 1, j, 4) = Table(nRows + 1, j, 4) + Table(i, j, 4)
            Else
                Table(i, j, 4) = " "
                Table(i, nCols + 1, 4) = " "
                Table(nRows + 1, j, 4) = " "
            End If
        Next j
        Table(nRows + 1, nCols + 1, 3) = Table(nRows + 1, nCols + 1, 3) + Table(i, nCols + 1, 3)
        Table(nRows + 1, nCols + 1, 4) = Table(nRows + 1, nCols + 1, 4) + Table(i, nCols + 1, 4)
    Next i

    For i = 1 To nRows + 1
        For j = 1 To nCols + 1
            Table(i, j, 5) = Table(i, j, 4) / Table(nRows + 1, nCols + 1, 4) '% of chi-square
            Table(i, j, 6) = Table(i, j, 1) / Table(i, nCols + 1, 1) '% of row total
            Table(i, j, 7) = Table(i, j, 1) / Table(nRows + 1, j, 1) '% of column total
            Table(i, j, 8) = Table(i, j, 1) / Table(nRows + 1, nCols + 1, 1) '% of grand total
        Next j
    Next i
    On Error GoTo MainErrorHandler

'get output vector
    OutputQ(1).Name = "Observed  "
    OutputQ(2).Name = "Expected  "
    OutputQ(3).Name = "O - E  "
    OutputQ(4).Name = "(O - E)|fffd| / E  "
    OutputQ(5).Name = "% of chisq  "
    OutputQ(6).Name = "% of row  "
    OutputQ(7).Name = "% of column "
    OutputQ(8).Name = "% of total  "
    
    OutputQ(1).Display = True 'always output count
    OutputQ(2).Display = CheckBox01.value
    OutputQ(3).Display = CheckBox02.value
    OutputQ(4).Display = CheckBox03.value
    OutputQ(5).Display = CheckBox04.value
    OutputQ(6).Display = CheckBox05.value
    OutputQ(7).Display = CheckBox06.value
    OutputQ(8).Display = CheckBox07.value
    
    OutputQ(1).Format = "0  "
    OutputQ(2).Format = "0.00  "
    OutputQ(3).Format = "0.00  "
    OutputQ(4).Format = "0.00  "
    OutputQ(5).Format = "0.0%  "
    OutputQ(6).Format = "0.0%  "
    OutputQ(7).Format = "0.0%  "
    OutputQ(8).Format = "0.0%  "
    
    OutCount = 1
    OutputQ(1).Down = 1
    For i = 2 To 8
        If OutputQ(i).Display = True Then
            OutCount = OutCount + 1
            OutputQ(i).Down = OutCount
        End If
    Next i
    If OutCount = 1 Then OutputQ(1).Name = "  "
    Set Out = Nothing
    
' output
    Base.Offset(3, 3) = colLabel
    Base.Offset(3, 3).NumberFormat = colLabelFmt
    Base.Offset(3, 3).Range("A1").Range(Cells(1, 1), Cells(1, nCols)).HorizontalAlignment = xlCenterAcrossSelection
    Base.Offset(4 + OutCount, 0) = rowLabel
    Base.Offset(4 + OutCount, 0).NumberFormat = rowLabelFmt
    
    RowLabels(nRows + 1) = "Total"
    ColLabels(nCols + 1) = "Total  "
    For j = 1 To nCols + 1
        Base.Offset(4, j + 2) = ColLabels(j)
        Base.Offset(4, j + 2).NumberFormat = ColLabelsFmt(j)
        Base.Offset(4, j + 2).HorizontalAlignment = xlRight
        Base.Offset(4, j + 2).Resize((nRows + 1) * OutCount + 1, 1).Select
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
    Next j
        
       
    For i = 1 To nRows + 1
        Base.Offset(4 + (i - 1) * OutCount + 1, 1).value = RowLabels(i)
        Base.Offset(4 + (i - 1) * OutCount + 1, 1).NumberFormat = RowLabelsFmt(i)
        Base.Offset(4 + (i - 1) * OutCount + 1, 1).Resize(1, nCols + 3).Select
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With

        For j = 1 To nCols + 1
            For k = 1 To 8
                If OutputQ(k).Display = True Then
                    Base.Offset(4 + (i - 1) * OutCount + OutputQ(k).Down, 2).value = OutputQ(k).Name
                    With Base.Offset(4 + (i - 1) * OutCount + OutputQ(k).Down, 3 + (j - 1))
                        .value = Table(i, j, k)
                        If i <= nRows And j <= nCols Then
                            If k = 1 Then .Font.FontStyle = "Bold"
                            If k = 2 Then If .value <= 5 Then .Interior.ColorIndex = 24
                        End If
                        .NumberFormat = OutputQ(k).Format
                    End With
                End If
            Next k
        Next j
    Next i
    
    Base.Offset(5, 3).Resize(nRows * OutCount, nCols).Select
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlMedium
        .ColorIndex = xlAutomatic
    End With

    Base.Offset(4, 0).CurrentRegion.Columns.AutoFit
    EqualWidthCol Base.Offset(4, 3).Resize((nRows + 1) * OutCount + 1, nCols + 1).Columns
    For Each ColumnSpec In Base.Offset(4, 3).Resize((nRows + 1) * OutCount + 1, nCols + 1).Columns
        If ColumnSpec.ColumnWidth < 10 Then ColumnSpec.ColumnWidth = 10
    Next
    Set out2 = Base.Offset((nRows + 1) * OutCount + 6, 3)
    
    If ZeroFlag = True Then
        out2.Range("A1").value = "Cannot calculate chi-square because one or more expected values = 0"
    Else
        df = (nRows - 1) * (nCols - 1)
        chi = Table(nRows + 1, nCols + 1, 4)
        If chkChisq.value = True Then
            OutputChiSquare out2, chi, df
        End If
        
        l = 4
        If chkPhi.value = True Then
            out2.Offset(l, 0) = Sqr(chi / Table(nRows + 1, nCols + 1, 1))
            out2.Offset(l, 1) = "Phi coefficient"
            out2.Offset(l, 0).NumberFormat = ".000"
            l = l + 1
        End If
        If chkCC.value = True Then
            out2.Offset(l, 0) = Sqr(chi / (chi + Table(nRows + 1, nCols + 1, 1)))
            out2.Offset(l, 1) = "Coefficient of Contingency"
            out2.Offset(l, 0).NumberFormat = ".000"
            l = l + 1
        End If
        If chkV.value = True Then
            out2.Offset(l, 0) = Sqr(chi / (Table(nRows + 1, nCols + 1, 1) * (Application.Min(nRows, nCols) - 1)))
            out2.Offset(l, 1) = "Cram" & "|fffd|" & "r's V"
            out2.Offset(l, 0).NumberFormat = ".000"
            l = l + 1
        End If
        
        If chkFET.value = True Then
            If nRows = 2 And nCols = 2 Then
                MinCell = Application.Min(Table(1, 1, 1), Table(1, 2, 1), Table(2, 1, 1), Table(2, 2, 1))
                For j = 1 To 2
                    For k = 1 To 2
                        If Table(j, k, 1) = MinCell Then
                            nSample = Application.Min(Table(j, 3, 1), Table(3, k, 1))
                            nPos = Application.Max(Table(j, 3, 1), Table(3, k, 1))
                        End If
                    Next k
                Next j
                
                nPop = Table(3, 3, 1)
                con1 = nPos + 1
                con2 = nPop - nPos + 1
                starti = 0
                
                If nSample - nPop + nPos >= starti Then starti = nSample - nPop + nPos
                L2 = LnComb(nPos, starti) + LnComb(nPop - nPos, nSample - starti) - LnComb(nPop, nSample)
                cum_prob = Exp(L2)
                
                For i = starti To MinCell
                    If i = starti Then
                        ln_prob = L2
                    Else
                        ln_prob = ln_prob + Log((con1 / i - 1) / (con2 / (nSample - i + 1) - 1))
                        cum_prob = cum_prob + Exp(ln_prob)
                    End If
                Next i
                out2.Offset(l, 0) = cum_prob
                FormatPvalue out2.Offset(l, 0), xlYes
                out2.Offset(l, 1) = "Fisher Exact Probability"
            Else
                out2.Offset(l, 0) = "Fisher Exact Probability can only be calculated for a 2 x 2 table."
            End If

        End If

    End If

    EndProc Base
    Exit Sub
    
MainErrorHandler:
    If errcheck("Chi-square/Crosstab") = vbYes Then Exit Sub Else Resume
End Sub

Sub GOF()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler

    Dim Obs As Range
    Dim Exp As Range
    Dim o As Range
    Dim e As Range
    Dim Base As Range
    Dim out2 As Range
    Dim InputDataTable As Range
    Dim i As Integer
    Dim j As Integer
    Dim df As Integer
    Dim nObs As Integer
    Dim nExp As Integer
    Dim parameters As Integer
    Dim ans As Integer
    Dim SumObs As Double
    Dim SumExp As Double
    Dim chi As Double
    Dim X As Range
    Dim X1 As Object
    Dim a As Double
    Dim b As Double
    
    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub

    If ValidRange(Me.InputBoxObs, vbYes) = False Then Exit Sub Else Set Obs = Range(Me.InputBoxObs)
    Obs.Worksheet.Activate
    If ValidRange(Me.InputBoxExp, vbYes) = False Then Exit Sub Else Set Exp = Range(Me.InputBoxExp)
    If StopQ0("Observed and expected ranges must be on the same worksheet.", Obs.Worksheet.Name <> Exp.Worksheet.Name, 1031, Me.InputBoxExp) = True Then Exit Sub

    Set InputDataTable = Union(Obs, Exp)


    nObs = Obs.Cells.count
    nExp = Exp.Cells.count
    
    If Me.InputBoxParameters.Text = "" Then Me.InputBoxParameters.Text = "0"
    parameters = Eval(Me.InputBoxParameters.Text)
    If StopQ0("Invalid input.", Err.number <> 0, 1031, Me.InputBoxParameters) = True Then Exit Sub

    df = nObs - 1 - parameters
    If StopQ0("Invalid value for degrees of freedom or parameters = " & df, df < 1 Or parameters < 0, 1016, Me.InputBoxParameters) = True Then Exit Sub
    'scan input

    If StopQ1("Observed and expected ranges must be the same size", nObs <> nExp, InputDataTable, 1007, Me.InputBoxObs) = True Then Exit Sub

    If DataOK(InputDataTable, Me.InputBoxObs) = vbNo Then Exit Sub
   
    For Each X In Obs.Cells
        Set X1 = X
    Next X 'find last cell, x1
    
    If X1.value > 0 Then
        If Abs(Application.Sum(Obs) / X1.value - 2) < 0.00001 And Obs.Cells.count >= 3 Then
            X1.Select
            ans = MsgBox("It looks like you included the total in your selection. Continue?", vbQuestion + vbYesNo + vbDefaultButton2, globalTitle, globalHelpFile, 1026)
            If ans = vbNo Then
                UnSelect X1
                Me.InputBoxObs.SetFocus
                Exit Sub
            End If
        End If
    End If

    For Each X In Exp.Cells
        If StopQ0("Expected values cannot = 0", X <= 0, 1011, Me.InputBoxExp) = True Then Exit Sub
    Next X
    
    For Each X In Exp.Cells
        Set X1 = X
    Next X 'find last cell, x1
    
        If Application.Sum(Exp) / X1.value - 2 < 0.00001 And Exp.Cells.count >= 3 Then
            X1.Select
            ans = MsgBox("It looks like you included the total in your selection. Continue?", vbQuestion + vbYesNo + vbDefaultButton2, globalTitle, globalHelpFile, 1026)
            If ans = vbNo Then
                UnSelect X1
                Me.InputBoxExp.SetFocus
                Exit Sub
            End If
        End If
    
    StartProc Me
    
    If MakeNewOutputSheet() = False Then Exit Sub
    Set Base = Range("A" & Format(ActiveCell.Row))

    SetTitle Base, "Goodness of Fit Test"
    'move data to output
    i = 0
    
    For Each o In Obs
        i = i + 1
        Base.Offset(i + 3, 1) = o
    Next o
    i = 0
    chi = 0
    For Each e In Exp
        i = i + 1
        Base.Offset(i + 3, 2) = e
        a = Base.Offset(i + 3, 1) - e
        b = a ^ 2
        chi = chi + b / e
        Base.Offset(i + 3, 3) = a
        Base.Offset(i + 3, 4) = b / e
        ' highlight cells with expected value <= 5
        If e <= 5 Then Base.Offset(i + 3, 2).Interior.ColorIndex = 24
    Next e
    
    i = 0
    For Each e In Exp
        i = i + 1
        If chi > 0 Then Base.Offset(i + 3, 5) = (Base.Offset(i + 3, 4) / chi) * 100#
    Next e
    
    Base.Offset(3, 1).Range("A1:E1") = Array(" observed", " expected", "O - E", "(O - E)|fffd| / E", "% of chisq")
    i = i + 4
    SumObs = Application.Sum(Obs)
    SumExp = Application.Sum(Exp)
    Base.Offset(i, 1) = SumObs
    Base.Offset(i, 2) = SumExp
    For j = 3 To 5
        Base.Offset(4, j).Range("A" & Format(nObs + 1)) = Application.Sum(Base.Offset(4, j).Range("A1:A" & Format(nObs)))
    Next j
    Base.Offset(4, 1).CurrentRegion.HorizontalAlignment = xlRight
    If Abs(Application.Round(SumObs, 1) - Application.Round(SumExp, 1)) > 0.05 _
        Then Base.Offset(i + 1, 1) = "  Warning: sums should be equal."
    Set out2 = Base.Offset(i + 2, 1)
    OutputChiSquare out2, chi, df

    Base.Offset(3, 1).CurrentRegion.Columns("B:D").NumberFormat = "0.000"
    Base.Offset(3, 1).CurrentRegion.Columns("E").NumberFormat = "0.00"
    Base.Offset(3, 1).CurrentRegion.Columns.ColumnWidth = 11
    Base.Range("B5:C" & Format(nObs + 4)).BorderAround Weight:=xlThin

    Base.Range("D5:F" & Format(nObs + 4)).BorderAround Weight:=xlThin

    EndProc Base
    Exit Sub
    
MainErrorHandler:
    If errcheck("Goodness of Fit Test") = vbYes Then Exit Sub Else Resume
End Sub

' checks Contingency Table and GOF input for valid data
Function DataOK(InputDataTable As Range, FocusObject As Object)
    Dim d As Range
    DataOK = vbNo
       
   For Each d In InputDataTable
        If StopQ1("Cannot have non-numeric cells.", Not IsNumeric(d), d, 1006, FocusObject) = True Then Exit Function
        If StopQ1("Cannot have negative values.", d < 0, d, 1009, FocusObject) = True Then Exit Function
        If StopQ1("Cannot have empty cells.", IsEmpty(d), d, 1006, FocusObject) = True Then Exit Function
    Next d
        
    If StopQ1("Table is empty.", Application.Sum(InputDataTable) = 0, InputDataTable, 1022, FocusObject) = True Then Exit Function
   
    'If we get this far then everything is OK
    DataOK = vbYes
End Function

'utility proc for Frequency and Xtab
Function FindSub(nRows As Integer, SpecCol As Integer, TestVal As Variant, ByRef SpecArray() As Variant) As Integer
    Dim i As Integer
    Dim j As Integer
    
    FindSub = -1
    For i = 1 To nRows
        For j = 1 To SpecCol
            If IsEmpty(TestVal) Then Exit For
            If TestVal = SpecArray(i, j) Then
                FindSub = i
                Exit For
            End If
        Next j
        If FindSub > 0 Then Exit Function
    Next i
End Function

' output chi-square
Sub OutputChiSquare(out2 As Range, chi As Double, df As Integer)
    Dim d As Range
    Dim pvalue As Double
    
    pvalue = Application.Chidist(chi, df)
    out2.Offset(2, 0) = pvalue
    out2.Offset(2, 1) = "p-value"
    FormatPvalue out2.Offset(2, 0), xlYes
    out2.Offset(1, 0) = df
    out2.Offset(1, 1) = "df"
    out2.Offset(0, 0) = chi
    out2.Offset(0, 1) = "chi-square"
    out2.Offset(0, 0).NumberFormat = ".00"
End Sub

Private Function EmptyRangeQ(loc As Range) As Boolean
    Dim value As Range
    For Each value In loc
        If IsEmpty(value) = False Then
            EmptyRangeQ = False
            Exit Function
        End If
    Next value
    EmptyRangeQ = True
End Function
Attribute VB_Name = "frmConfInt"
Attribute VB_Base = "0{5DCF4926-289F-4319-B00E-6EFBC3E43023}{6438D980-A50B-4D41-B51D-9B3198850E66}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'''MegaStat|fffd| Confidence Intervals and Sample Size module |fffd|2005 by J. B. Orris
'frmConfInt

Option Explicit
Option Base 1

Private Sub UserForm_Activate()
    InitComboBoxCI Me
    Me.InputBox1.SetFocus
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    ConfInt "sheet"
End Sub

Private Sub buttonClear_Click()
    Me.Hide
    Unload Me
    OpenUserForm "ConfInt"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then Me.InputBox1.SetFocus
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
        Select Case Me.TabStrip1.SelectedItem.Index
            Case 0 'CI - mean
                CallHelp 4252
            Case 1 'CI - p
                CallHelp 4254
            Case 2 ' sample size - mean
                CallHelp 4256
            Case 3 ' sample size - mean (alpha, beta)
                CallHelp 4257
            Case 4 'sample size - p
                CallHelp 4258
        End Select
End Sub

Private Sub buttonCalc_Click()
    ConfInt "userform"
End Sub

Private Sub InputBox1_Change()
    Set_Userform
    If Me.TabStrip1.SelectedItem.Index <> 1 Then Exit Sub
    If Eval(Me.InputBox1.Text) >= 1 Then
        Me.Label1.Caption = "x"
    Else
        Me.Label1.Caption = "p"
    End If
End Sub

Private Sub InputBox2_Change()
    Set_Userform
End Sub

Private Sub InputBox3_Change()
    Set_Userform
End Sub

Private Sub ComboBox1_Change()
    Set_Userform
End Sub


Private Sub InputBox1_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        Me.InputBox2.SetFocus
    End If
End Sub

Private Sub InputBox2_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        If Me.TabStrip1.SelectedItem.Index = 0 Then Me.InputBox3.SetFocus Else Me.buttonOK.SetFocus
    End If
End Sub

Private Sub InputBox3_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        Me.buttonOK.SetFocus
        ConfInt "userform"
    End If
End Sub

Private Sub Label1_Click()
    LabelClick
End Sub

Private Sub Label2_Click()
    LabelClick
End Sub

Private Sub Label3_Click()
    LabelClick
End Sub

Private Sub InputBox1_DblClick(Cancel As Boolean)
    LabelClick
End Sub

Private Sub InputBox2_DblClick(Cancel As Boolean)
    LabelClick
End Sub

Private Sub InputBox3_DblClick(Cancel As Boolean)
    LabelClick
End Sub

Private Sub LabelClick()

    Dim Mean As Double
    Dim sd As Double
    Dim n As Double
    
    Mean = Eval(Me.InputBox1.Text)
    If Mean <> globalErrVal Then Me.InputBox1.Text = Str(Mean)
    
    sd = Eval(Me.InputBox2.Text)
    If sd <> globalErrVal Then Me.InputBox2.Text = Str(sd)

    n = Eval(Me.InputBox3.Text)
    If n <> globalErrVal Then Me.InputBox3.Text = Str(n)
    
End Sub

Private Sub ComboBox1_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        ConfInt "userform"
        KeyCode = 0
        Me.buttonOK.SetFocus
    End If
End Sub

Private Sub OptionButton1_Click()
    Set_Userform
End Sub

Private Sub OptionButton2_Click()
    Set_Userform
End Sub

Private Sub Set_Userform()
    Dim i As Integer

    With Me
        Select Case .TabStrip1.SelectedItem.Index
            Case 0, 1 'CI - mean or p
                .LabelOutputBox1.Caption = "lower"
                .LabelOutputBox2.Caption = "upper"
            Case 2, 3, 4 'sample size - mean or p
                .LabelOutputBox1.Caption = " N"
                .LabelOutputBox2.Caption = " N rounded up"
        End Select
        If .TabStrip1.SelectedItem.Index = 3 Then
            .ComboBoxAlpha.Visible = True
            .ComboBoxBeta.Visible = True
            .LabelAlpha.Visible = True
            .LabelBeta.Visible = True
            .LabelConf.Visible = False
            With Me.ComboBoxAlpha
                If .ListIndex < 0 Then
                    .Clear
                    .AddItem ".005"
                    .AddItem ".01"
                    .AddItem ".025"
                    .AddItem ".05"
                End If
            End With
            With Me.ComboBoxBeta
                If .ListIndex < 0 Then
                    .Clear
                    .AddItem ".005"
                    .AddItem ".01"
                    .AddItem ".025"
                    .AddItem ".05"
                End If
            End With
        Else
            .ComboBoxAlpha.Visible = False
            .ComboBoxBeta.Visible = False
            .ComboBoxBeta.Visible = False
            .LabelAlpha.Visible = False
            .LabelBeta.Visible = False
            .LabelConf.Visible = True
        End If
        .OutputBox1.Text = ""
        .OutputBox2.Text = ""
    End With
End Sub

Private Sub TabStrip1_Change()
    With Me
        .InputBox1.value = ""
        .InputBox2.value = ""
        .InputBox3.value = ""
        .InputBox1.ControlTipText = ""
        .InputBox2.ControlTipText = ""
        .OptionButton1.value = True
        
        Select Case .TabStrip1.SelectedItem.Index
            Case 0 'CI - mean
                .OptionButton1.Visible = True
                .OptionButton1.value = True
                .OptionButton2.Visible = True
                .InputBox3.Visible = True
                .Label3.Visible = True
            Case 1, 2, 3, 4 'other
                .OptionButton1.Visible = False
                .OptionButton2.Visible = False
                .InputBox3.Visible = False
                .Label3.Visible = False
        End Select
        
        Select Case .TabStrip1.SelectedItem.Index
            Case 0 'CI - mean
                .Label1 = "Mean"
                .Label2 = "Std. Dev."
                .Label3 = "n"
            Case 1 'CI - p
                .Label1 = "p"
                .Label2 = "n"
            Case 2 ' sample size - mean
                .Label1 = "E"
                .Label2 = "Std. Dev."
                .InputBox1.ControlTipText = "Error tolerance"
                .InputBox2.ControlTipText = "Estimated population std. dev."
                .InputBox1.SetFocus
                                            
            Case 3 ' sample size - mean (alpha, beta)
                .Label1 = "E"
                .Label2 = "Std. Dev."
                .InputBox1.ControlTipText = "Error tolerance"
                .InputBox2.ControlTipText = "Estimated population std. dev."
                .InputBox1.SetFocus
            
            Case 4 'sample size - p
                .Label1 = "E"
                .Label2 = "p"
                .InputBox1.ControlTipText = "Error tolerance"
                .InputBox2.ControlTipText = "Estimated population proportion"
            
        End Select
    End With
    Set_Userform
    Me.InputBox1.SetFocus

End Sub

Private Sub TabStrip1_Click(ByVal Index As Long)
    TabStrip1_Change
End Sub

Private Sub ConfInt(OutputType As String)
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler

    Dim Which As Integer
    Dim Mean As Double
    Dim sd As Double
    Dim ConfLevel As Double
    Dim tz As Double
    Dim za As Double
    Dim zb As Double
    Dim alpha As Double
    Dim beta As Double
    Dim p As Double
    Dim n As Double
    Dim rounded As Double
    Dim e As Double
    Dim HalfWidth As Double
    Dim lower As Double
    Dim upper As Double
    Dim Base As Range
    Dim st As String
    Dim Output As Variant
    Dim i As Integer
    Dim Fmt As String
    Dim testvalue As Range
    Dim Dec As Integer
        
    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub
    
    'get and validate inputs
    Which = Me.TabStrip1.SelectedItem.Index
    
    Select Case Which
        Case 0 'CI - mean
            Mean = Eval(Me.InputBox1.Text)
            If StopQ0("Invalid or missing input.", Err.number <> 0, 1031, Me.InputBox1) = True Then Exit Sub
            sd = Eval(Me.InputBox2.Text)
            If StopQ0("Input value cannot be 0 or negative", sd < 0, 1011, Me.InputBox2) = True Then Exit Sub

            n = Eval(Me.InputBox3.Text)
            If StopQ0("Input value cannot be 0 or negative", n < 0, 1011, Me.InputBox3) = True Then Exit Sub
            
        Case 1 'CI - p
            p = Eval(Me.InputBox1.Text)
            If StopQ0("Input value cannot be negative", p < 0, 1009, Me.InputBox1) = True Then Exit Sub
            
            n = Eval(Me.InputBox2.Text)
            n = Application.Round(n, 0)
            If StopQ0("Input value cannot be zero or negative", n <= 0, 1011, Me.InputBox2) = True Then Exit Sub
            If StopQ0("p >= 1", p >= 1 And p / n > 1, 1012, Me.InputBox1) = True Then Exit Sub
            If p >= 1 Then p = p / n
        
        Case 2, 3 'sample size - mean
            e = Eval(Me.InputBox1.Text)
            If StopQ0("Input value cannot be 0 ", e = 0, 1011, Me.InputBox1) = True Then Exit Sub
       
            sd = Eval(Me.InputBox2.Text)
            If StopQ0("Input value cannot be 0 or negative", sd < 0, 1011, Me.InputBox2) = True Then Exit Sub
            
            e = Abs(e)
       
        Case 4 'sample size - p
            e = Eval(Me.InputBox1.Text)
            If StopQ0("E must be between 0 and 1", ValidateP(e) = False, 1012, Me.InputBox1) = True Then Exit Sub

            p = Eval(Me.InputBox2.Text)
            If StopQ0("p must be between 0 and 1", ValidateP(p) = False, 1012, Me.InputBox2) = True Then Exit Sub

    End Select
    
    ConfLevel = Eval(Me.ComboBoxCI.Text)
    If ConfLevel > 1 Then ConfLevel = ConfLevel / 100
    If StopQ0("Probability must be between 0 and 1", ValidateP(ConfLevel) = False, 1012, Me.ComboBoxCI) = True Then Exit Sub
    If Me.OptionButton1.value = True Then tz = Application.NormSInv(0.5 + ConfLevel / 2) Else tz = Application.TInv(1 - ConfLevel, n - 1)
    
    'calculation
        Select Case Which
        Case 0 'CI - mean
            HalfWidth = tz * sd / Sqr(n)
            
            Set testvalue = ThisWorkbook.Sheets("TempSheet").Range("B3")
            testvalue = Mean
            Dec = DecPlaces(testvalue)
            If Dec <= 3 Then Fmt = "0.000" Else Fmt = AutoFormat(0, Dec)
            Set testvalue = Nothing
            
        Case 1 'CI - p
            HalfWidth = tz * Sqr(p * (1 - p) / n)
            lower = p - HalfWidth
            upper = p + HalfWidth
            Fmt = "0.000"
            
        Case 2 'sample size - mean
            n = (sd * tz / e) ^ 2
            If (n - Int(n)) > 0# Then rounded = Int(n) + 1 Else rounded = n
            Fmt = "0.000"
        
        Case 3 'sample size - mean (alpha, beta)
            alpha = Eval(Me.ComboBoxAlpha.Text)
            If alpha > 1 Then alpha = ConfLevel / 100
            If StopQ0("Probability must be between 0 and 1", ValidateP(alpha) = False, 1012, Me.ComboBoxCI) = True Then Exit Sub
            za = Application.NormSInv(1 - alpha)
            
            beta = Eval(Me.ComboBoxBeta.Text)
            If beta > 1 Then beta = beta / 100
            If StopQ0("Probability must be between 0 and 1", ValidateP(beta) = False, 1012, Me.ComboBoxCI) = True Then Exit Sub
            zb = Application.NormSInv(1 - beta)
            
            n = ((za + zb) ^ 2 * sd ^ 2) / e ^ 2
            If (n - Int(n)) > 0# Then rounded = Int(n) + 1 Else rounded = n
            Fmt = "0.000"
        
        Case 4 'sample size - p
            n = p * (1 - p) * (tz / e) ^ 2
            If (n - Int(n)) > 0# Then rounded = Int(n) + 1 Else rounded = n
            Fmt = "0.000"
    End Select

    'output
    Select Case OutputType
        Case "sheet"

            StartProc Me
            
            If MakeNewOutputSheet() = False Then Exit Sub
            Set Base = Range("A" & Format(ActiveCell.Row))
            
            Select Case Which
                Case 0 'CI - mean
                    SetTitle Base, "Confidence interval - mean"
                    
                    HalfWidth = tz * sd / Sqr(n)
                    Output = Array(ConfLevel, Mean, sd, n, tz, HalfWidth, Mean + HalfWidth, Mean - HalfWidth)
                    For i = 1 To 8
                        Base.Range("B3").Offset(i, 0) = Output(i)
                    Next i
        
                    If Me.OptionButton1.value = True Then st = "z" Else st = "t (df = " & n - 1 & ")"
                    Output = Array("confidence level", "mean", "std. dev.", "n", st, "half-width", "upper confidence limit", "lower confidence limit")
                    For i = 1 To 8
                        Base.Range("C3").Offset(i, 0) = Output(i)
                    Next i
                    
                    Base.Range("B4").NumberFormat = "0%"
                    Base.Range("B8").NumberFormat = "0.000"
                    Base.Range("B9:B11").NumberFormat = Fmt
                    
                Case 1 'CI - p
                    SetTitle Base, "Confidence interval - proportion"
                    
                    HalfWidth = tz * Sqr(p * (1 - p) / n)
                    
                    Output = Array(ConfLevel, p, n, tz, HalfWidth, upper, lower)
                    For i = 1 To 7
                        Base.Range("B3").Offset(i, 0) = Output(i)
                    Next i
        
                    Output = Array("confidence level", "proportion", "n", "z", "half-width", "upper confidence limit", "lower confidence limit")
                    For i = 1 To 7
                        Base.Range("C3").Offset(i, 0) = Output(i)
                    Next i
                    
                    If Base.Range("B9") > 1# Then Base.Range("B9").Interior.ColorIndex = 40
                    If Base.Range("B10") < 0# Then Base.Range("B10").Interior.ColorIndex = 40
                    Base.Range("B4").NumberFormat = "0%"
                    Base.Range("B7").NumberFormat = "0.000"
                    Base.Range("B8:B10").NumberFormat = Fmt
                    
                Case 2 'sample size - mean
                    SetTitle Base, "Sample size - mean"
                    Output = Array(e, sd, ConfLevel, tz, n, rounded)
                    For i = 1 To 6
                        Base.Range("B3").Offset(i, 0) = Output(i)
                    Next i
        
                    Output = Array("E, error tolerance", "standard deviation", "confidence level", "z", "sample size", "rounded up")
                    For i = 1 To 6
                        Base.Range("C3").Offset(i, 0) = Output(i)
                    Next i
                    
                    Base.Range("B6").NumberFormat = "0%"
                    Base.Range("B7:B8").NumberFormat = Fmt
                
                 Case 3 'sample size - mean (alpha, beta)
                    SetTitle Base, "Sample size - mean (for specified alpha and beta)"
                    Output = Array(e, sd, alpha, beta, za, zb, n, rounded)
                    For i = 1 To 8
                        Base.Range("B3").Offset(i, 0) = Output(i)
                    Next i
        
                    Output = Array("E, error tolerance", "standard deviation", "alpha", "beta", "z alpha", "z beta", "sample size", "rounded up")
                    For i = 1 To 8
                        Base.Range("C3").Offset(i, 0) = Output(i)
                    Next i
                    
                    Base.Range("B6:B7").NumberFormat = ".000"
                    Base.Range("B8:B10").NumberFormat = Fmt
                
               Case 4 'sample size - p
                    SetTitle Base, "Sample size - proportion"
                    
                    n = p * (1 - p) * (tz / e) ^ 2
                    If (n - Int(n)) > 0# Then rounded = Int(n) + 1 Else rounded = n
                    Output = Array(e, p, ConfLevel, tz, n, rounded)
                    For i = 1 To 6
                        Base.Range("B3").Offset(i, 0) = Output(i)
                    Next i
        
                    Output = Array("E, error tolerance", "estimated population proportion", "confidence level", "z", "sample size", "rounded up")
                    For i = 1 To 6
                        Base.Range("C3").Offset(i, 0) = Output(i)
                    Next i
                    
                    Base.Range("B6").NumberFormat = "0%"
                    Base.Range("B7:B8").NumberFormat = Fmt
            End Select
           
            Base.Range("B4:C11").Columns.AutoFit
            EndProc Base
            
        Case "userform"
            Select Case Which
                Case 0
                    Me.OutputBox1.value = Application.Text(Mean - HalfWidth, Fmt)
                    Me.OutputBox2.value = Application.Text(Mean + HalfWidth, Fmt)
                Case 1
                    Me.OutputBox1.value = Application.Text(lower, Fmt)
                    Me.OutputBox2.value = Application.Text(upper, Fmt)
                
                Case 2, 3, 4
                    Me.OutputBox1.value = Application.Text(n, Fmt)
                    Me.OutputBox2.value = Application.Text(rounded, "0")
            End Select
    End Select
    Exit Sub

MainErrorHandler:
    If errcheck("Conf. Int. / Sample Size") = vbYes Then Exit Sub Else Resume
End Sub
Attribute VB_Name = "frmContinuous"
Attribute VB_Base = "0{E40D82BA-67E6-4E2F-9771-8616925C62EF}{0C759FF0-7773-45A0-B7A0-79250A8C4D6A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'MegaStat|fffd| Continuous Probability Distributions module |fffd|2005 by J. B. Orris
'frmContinuous

Option Explicit

Private Sub UserForm_Activate()
    Input_mean_Change
    MultiPage1_Click Me.MultiPage1.value
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    ContinuousDistributions "sheet"
End Sub

Private Sub buttonClear_Click()
    Me.Hide
    Unload Me
    OpenUserForm "Continuous"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then MultiPage1_Click Me.MultiPage1.value
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    Select Case Me.MultiPage1.value
        Case 0 'normal
            CallHelp 4230
        Case 1 't
            CallHelp 4231
        Case 2 'F
            CallHelp 4232
        Case 3 'chi square
            CallHelp 4233
    End Select
End Sub

Private Sub buttonCalc_Click()
    ContinuousDistributions "userform"
End Sub

Private Sub Input_mean_Change()
    Dim Mean As Double
    Dim sd As Double
    
    Mean = Eval(Me.input_mean.Text)
    sd = Eval(Me.input_sd.Text)
    
    If Me.MultiPage1.value = 0 Then
        If Me.input_mean = 0# And sd = 1# Then
            Me.OptionButton1.Caption = "calculate P given z"
            Me.OptionButton2.Caption = "calculate z given P"
            Me.Label_z.Caption = "z"
        Else
            Me.OptionButton1.Caption = "calculate P given X"
            Me.OptionButton2.Caption = "calculate X given P"
            Me.Label_z.Caption = "X"
        End If
        If ((Mean = 0# And sd = 1#) And Me.OptionButton1.value = True) Or Me.OptionButton2.value = True Then
            Me.OutputBox3.Visible = False
            Me.OutputBox3Label.Visible = False
        Else
            Me.OutputBox3.Visible = True
            Me.OutputBox3Label.Visible = True
            Me.OutputBox3.Text = ""
        End If
        If Me.OptionButton1.value = True Then
            Set_Userform "P(lower)", "P(upper)"
        Else
            Set_Userform "z", "X"
        End If
    End If
End Sub

Private Sub Input_sd_Change()
    Input_mean_Change
End Sub

Private Sub chkRound_Change()
    Set_Userform Me.LabelOutputBox1.Caption, Me.LabelOutputBox2.Caption
End Sub

Private Sub MultiPage1_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = vbKeySpace Or KeyCode = vbKeyReturn Or KeyCode = vbKeyDown Then MultiPage1_Click Me.MultiPage1.SelectedItem.Index
End Sub

Private Sub MultiPage1_Click(ByVal Index As Long)
    Dim Str As String
    Str = " to 2 places"
    Select Case Index
        Case 0 'normal
            Me.chkRound.ControlTipText = "rounds z" & Str
            If Me.OptionButton1.value = True Then OptionButton1_Click Else OptionButton2_Click
        Case 1 't
            Me.chkRound.ControlTipText = "rounds t" & Str
            If Me.OptionButton3.value = True Then OptionButton3_Click Else OptionButton4_Click
            If Me.input_df_t.Text = "" Then Me.input_df_t.SetFocus
        Case 2 'F
            Me.chkRound.ControlTipText = "rounds F" & Str
            If Me.OptionButton5.value = True Then OptionButton5_Click Else OptionButton6_Click
            If Me.input_df1.Text = "" Then Me.input_df1.SetFocus
        Case 3 'chi-square
            Me.chkRound.ControlTipText = "rounds chi-square" & Str
            If Me.OptionButton7.value = True Then OptionButton7_Click Else OptionButton8_Click
            If Me.input_df_chisq.Text = "" Then Me.input_df_chisq.SetFocus
    End Select
End Sub

Private Sub Set_Userform(caption1 As String, caption2 As String)
    Dim Mean As Double
    Dim sd As Double
    
    Mean = Eval(Me.input_mean.Text)
    sd = Eval(Me.input_sd.Text)

    With Me
      .LabelOutputBox2.Visible = True
      .OutputBox2.Visible = True
      .OutputBox1.Text = ""
      .OutputBox2.Text = ""
      .OutputBox3.Text = ""
      
      .LabelOutputBox1.Caption = caption1
      .LabelOutputBox2.Caption = caption2
      
      If (caption1 = "z" And (Mean = 0# And sd = 1#)) Or caption2 = "" Then
          .LabelOutputBox2.Visible = False
          .OutputBox2.Visible = False
      End If
    End With
End Sub

Private Sub input_p1_Change()
        Set_Userform "z", "X"
End Sub

Private Sub input_p1_DblClick(Cancel As Boolean)
    UpdateInput Me.input_p1
End Sub

Private Sub Label_p1_Click()
    UpdateInput Me.input_p1
End Sub

Private Sub input_p2_Change()
        Set_Userform "t", ""
End Sub

Private Sub input_p2_DblClick(Cancel As Boolean)
    UpdateInput Me.input_p2
End Sub

Private Sub Label_p2_Click()
    UpdateInput Me.input_p2
End Sub

Private Sub input_p3_Change()
        Set_Userform "F", ""
End Sub

Private Sub input_p3_DblClick(Cancel As Boolean)
    UpdateInput Me.input_p3
End Sub

Private Sub Label_p3_Click()
    UpdateInput Me.input_p3
End Sub

Private Sub input_p4_Change()
        Set_Userform "chi-square", ""
End Sub

Private Sub input_p4_DblClick(Cancel As Boolean)
    UpdateInput Me.input_p4
End Sub

Private Sub Label_p4_Click()
    UpdateInput Me.input_p4
End Sub

Private Sub input_val_Change()
        Set_Userform "P(lower)", "P(upper)"
End Sub

Private Sub input_val_DblClick(Cancel As Boolean)
    UpdateInput Me.input_val
End Sub

Private Sub input_mean_DblClick(Cancel As Boolean)
    UpdateInput Me.input_mean
End Sub

Private Sub Label_mean_Click()
    UpdateInput Me.input_mean
End Sub
Private Sub input_sd_DblClick(Cancel As Boolean)
    UpdateInput Me.input_sd
End Sub

Private Sub Label_sd_Click()
    UpdateInput Me.input_sd
End Sub

Private Sub Label_z_Click()
    UpdateInput Me.input_val
End Sub

Private Sub input_t_Change()
        Set_Userform "P(lower)", "P(upper)"
End Sub

Private Sub input_t_DblClick(Cancel As Boolean)
    UpdateInput Me.input_t
End Sub

Private Sub Label_t_Click()
    UpdateInput Me.input_t
End Sub

Private Sub input_F_Change()
        Set_Userform "P(lower)", "P(upper)"
End Sub

Private Sub input_F_DblClick(Cancel As Boolean)
    UpdateInput Me.input_F
End Sub

Private Sub Label_F_Click()
    UpdateInput Me.input_F
End Sub

Private Sub input_chisq_Change()
        Set_Userform "P(lower)", "P(upper)"
End Sub

Private Sub input_chisq_DblClick(Cancel As Boolean)
    UpdateInput Me.input_chisq
End Sub

Private Sub Label_chisq_Click()
    UpdateInput Me.input_chisq
End Sub

Private Sub input_df_t_DblClick(Cancel As Boolean)
    UpdateInput Me.input_df_t
End Sub

Private Sub label_df_t_Click()
    UpdateInput Me.input_df_t
End Sub

Private Sub input_df1_DblClick(Cancel As Boolean)
    UpdateInput Me.input_df1
End Sub

Private Sub label_df1_Click()
    UpdateInput Me.input_df1
End Sub

Private Sub input_df2_DblClick(Cancel As Boolean)
    UpdateInput Me.input_df2
End Sub

Private Sub label_df2_Click()
    UpdateInput Me.input_df2
End Sub

Private Sub input_df_chisq_DblClick(Cancel As Boolean)
    UpdateInput Me.input_df_chisq
End Sub

Private Sub Label_df_chisq_Click()
    UpdateInput Me.input_df_chisq
End Sub

Private Sub input_p1_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        ContinuousDistributions "userform"
        KeyCode = 0
        Me.buttonOK.SetFocus
    End If
End Sub

Private Sub input_p2_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        ContinuousDistributions "userform"
        KeyCode = 0
        Me.buttonOK.SetFocus
    End If
End Sub

Private Sub input_p3_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        ContinuousDistributions "userform"
        KeyCode = 0
        Me.buttonOK.SetFocus
    End If
End Sub

Private Sub input_p4_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        ContinuousDistributions "userform"
        KeyCode = 0
        Me.buttonOK.SetFocus
    End If
End Sub

Private Sub input_val_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        ContinuousDistributions "userform"
        KeyCode = 0
        Me.buttonOK.SetFocus
    End If
End Sub

Private Sub input_t_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        ContinuousDistributions "userform"
        KeyCode = 0
        Me.buttonOK.SetFocus
    End If
End Sub
Private Sub input_F_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        ContinuousDistributions "userform"
        KeyCode = 0
        Me.buttonOK.SetFocus
    End If
End Sub

Private Sub input_chisq_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        ContinuousDistributions "userform"
        KeyCode = 0
        Me.buttonOK.SetFocus
    End If
End Sub

Private Sub OptionButton1_Click()

    Me.input_val.Visible = True
    If Me.MultiPage1.value = 0 Then Me.input_val.SetFocus
    Me.input_p1.Visible = False
    Me.Label_z.Visible = True
    Me.Label_p1.Visible = False
    Set_Userform "P(lower)", "P(upper)"
    Input_mean_Change

End Sub

Private Sub OptionButton2_Click()
    Me.input_val.Visible = False
    Me.input_p1.Visible = True
    If Me.MultiPage1.value = 0 Then Me.input_p1.SetFocus
    Me.Label_z.Visible = False
    Me.Label_p1.Visible = True
    Set_Userform "z", "X"
    Input_mean_Change
End Sub

Private Sub OptionButton3_Click()
    Me.input_t.Visible = True
    If Me.MultiPage1.value = 1 Then Me.input_t.SetFocus
    Me.input_p2.Visible = False
    Me.Label_t.Visible = True
    Me.Label_p2.Visible = False
    Set_Userform "P(lower)", "P(upper)"
End Sub

Private Sub OptionButton4_Click()
    Me.input_t.Visible = False
    Me.input_p2.Visible = True
    Me.Label_t.Visible = False
    Me.Label_p2.Visible = True
    If Me.MultiPage1.value = 1 Then Me.input_p2.SetFocus
    Set_Userform "t", ""
End Sub

Private Sub OptionButton5_Click()
    Me.input_F.Visible = True
    If Me.MultiPage1.value = 2 Then Me.input_F.SetFocus
    Me.input_p3.Visible = False
    Me.Label_F.Visible = True
    Me.label_p3.Visible = False
    Set_Userform "P(lower)", "P(upper)"
End Sub

Private Sub OptionButton6_Click()
    Me.input_F.Visible = False
    Me.input_p3.Visible = True
    Me.Label_F.Visible = False
    Me.label_p3.Visible = True
    If Me.MultiPage1.value = 2 Then Me.input_p3.SetFocus
    Set_Userform "F", ""
End Sub

Private Sub OptionButton7_Click()
    Me.input_chisq.Visible = True
    If Me.MultiPage1.value = 3 Then Me.input_chisq.SetFocus
    Me.input_p4.Visible = False
    Me.Label_Chisq.Visible = True
    Me.Label_p4.Visible = False
    Set_Userform "P(lower)", "P(upper)"
End Sub

Private Sub OptionButton8_Click()
    Me.input_chisq.Visible = False
    Me.input_p4.Visible = True
    If Me.MultiPage1.value = 3 Then Me.input_p4.SetFocus
    Me.Label_Chisq.Visible = False
    Me.Label_p4.Visible = True
    Set_Userform "chi-square", ""
End Sub

Sub ContinuousDistributions(OutputType As String)
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler

    Dim Base As Range
    Dim CalcType As Integer '\ 1= calc p, 2= calc X
    Dim InputType As Integer '\normal: 1 = input z, 2 = input X, calc z
    
    Dim X As Double
    Dim X1 As Double
    Dim p As Double
    Dim p1 As Double
    Dim Mean As Double
    Dim sd As Double
    
    Dim Which As Integer
    Dim df1 As Integer
    Dim df2 As Integer
    Dim Dec As Integer
    Dim Fmt As String
    Dim testvalue As Range
    
    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub

    'get and validate inputs; set CalcType
    Which = Me.MultiPage1.value
    InputType = 0
   
    
    Select Case Which
        Case 0 'normal
            If Me.OptionButton1.value = True Then
                UpdateInput Me.input_val
                X = Eval(Me.input_val.Text)
                If X = globalErrVal Then Exit Sub
                If StopQ0("Invalid or missing input.", Err.number <> 0, 1031, Me.input_val) = True Then Exit Sub
                CalcType = 1
            Else
                UpdateInput Me.input_p1
                p = Eval(Me.input_p1.Text)
                If p = globalErrVal Then Exit Sub
                If StopQ0("Probability must be between 0 and 1", ValidateP(p) = False Or p = globalErrVal, 1012, Me.input_p1) = True Then Exit Sub
                CalcType = 2
            End If
                UpdateInput Me.input_mean
                Mean = Eval(Me.input_mean.Text)
                If Mean = globalErrVal Then Exit Sub
                If StopQ0("Invalid or missing input.", Err.number <> 0, 1031, Me.input_mean) = True Then Exit Sub

                UpdateInput Me.input_sd
                sd = Eval(Me.input_sd.Text)
                If sd = globalErrVal Then Exit Sub
                If StopQ0("Input value cannot be 0 or negative", sd < 0, 1011, Me.input_sd) = True Then Exit Sub
    
                If Mean = 0# And sd = 1# Then InputType = 1 Else InputType = 2
                
        Case 1 't
            If Me.OptionButton3.value = True Then
                UpdateInput Me.input_t
                X = Eval(Me.input_t.Text)
                If X = globalErrVal Then Exit Sub
                If StopQ0("Invalid or missing input.", Err.number <> 0, 1031, Me.input_t) = True Then Exit Sub
                CalcType = 1
            Else
                UpdateInput Me.input_p2
                p = Eval(Me.input_p2.Text)
                If p = globalErrVal Then Exit Sub
                If StopQ0("Probability must be between 0 and 1", ValidateP(p) = False, 1012, Me.input_p2) = True Then Exit Sub
                CalcType = 2
            End If
                UpdateInput Me.input_df_t
                df1 = Application.Round(Eval(Me.input_df_t.Text), 0)
                If df1 = globalErrVal Then Exit Sub
                If StopQ0("df must be >= 1", df1 < 1, 1014, Me.input_df_t) = True Then Exit Sub
                
        Case 2 'F
            If Me.OptionButton5.value = True Then
                UpdateInput Me.input_F
                X = Eval(Me.input_F.Text)
                If X = globalErrVal Then Exit Sub
                If StopQ0("Input value cannot be 0 or negative", X < 0, 1011, Me.input_F) = True Then Exit Sub
                CalcType = 1
            Else
                UpdateInput Me.input_p3
                p = Eval(Me.input_p3.Text)
                If p = globalErrVal Then Exit Sub
                If StopQ0("Probability must be between 0 and 1", ValidateP(p) = False, 1012, Me.input_p3) = True Then Exit Sub
                CalcType = 2
            End If
                UpdateInput Me.input_df1
                df1 = Application.Round(Eval(Me.input_df1.Text), 0)
                If df1 = globalErrVal Then Exit Sub
                If StopQ0("df must be >= 1", df1 < 1, 1014, Me.input_df1) = True Then Exit Sub
        
                UpdateInput Me.input_df2
                df2 = Application.Round(Eval(Me.input_df2.Text), 0)
                If df2 = globalErrVal Then Exit Sub
                If StopQ0("df must be >= 1", df2 < 1, 1014, Me.input_df2) = True Then Exit Sub
        
        Case 3 'chi-square
            If Me.OptionButton7.value = True Then
                UpdateInput Me.input_chisq
                X = Eval(Me.input_chisq.Text)
                If X = globalErrVal Then Exit Sub
                If StopQ0("Input value cannot be 0 or negative", X < 0, 1011, Me.input_chisq) = True Then Exit Sub
                CalcType = 1
            Else
                UpdateInput Me.input_p4
                p = Eval(Me.input_p4.Text)
                If p = globalErrVal Then Exit Sub
                If StopQ0("Probability must be between 0 and 1", ValidateP(p) = False, 1012, Me.input_p4) = True Then Exit Sub
                CalcType = 2
            End If
    
                UpdateInput Me.input_df_chisq
                df1 = Eval(Me.input_df_chisq.Text)
                If df1 = globalErrVal Then Exit Sub
                df1 = Application.Round(df1, 0)
                If StopQ0("df must be >= 1", df1 < 1, 1014, Me.input_df_chisq) = True Then Exit Sub
    End Select

    'calculation
    Select Case Which
        Case 0 '\normal
            If CalcType = 1 Then
                If InputType = 2 Then
                    X1 = X
                    X = (X1 - Mean) / sd
                End If
                If Me.chkRound = True Then X = Application.Round(X, 2)
                p = 1 - Application.NormSDist(X)
            Else
                X = Application.NormSInv(1 - p)
                'round calculated x and calculate p with rounded value
                If Me.chkRound = True Then
                    X = Application.Round(X, 2)
                    p = 1 - Application.NormSDist(X)
                End If
                If InputType = 2 Then X1 = Mean + X * sd
            End If
            
        Case 1 '\t
            If CalcType = 1 Then
                If Me.chkRound = True Then X = Application.Round(X, 3)
                If X < 0 Then X1 = -1 * X Else X1 = X
                p = Application.Tdist(X1, df1, 1)
                If X < 0 Then p = 1 - p
            Else
                If p > 0.5 Then p1 = 1 - p Else p1 = p
                X = Application.TInv(p1 * 2, df1)
                If p > 0.5 Then X = -1 * X
                'round calculated x and calculate p with rounded value
                If Me.chkRound = True Then
                    X = Application.Round(X, 3)
                    If X < 0 Then X1 = -1 * X Else X1 = X
                    p = Application.Tdist(X1, df1, 1)
                    If X < 0 Then p = 1 - p
                End If
            End If
            
        Case 2 '\F
            If CalcType = 1 Then
                If Me.chkRound = True Then X = Application.Round(X, 2)
                p = Application.Fdist(X, df1, df2)
            Else
                X = Application.FInv(p, df1, df2)
                'round calculated x and calculate p with rounded value
                If Me.chkRound = True Then
                    X = Application.Round(X, 2)
                    p = Application.Fdist(X, df1, df2)
                End If
            End If
            
        Case 3 '\chi-square
            If CalcType = 1 Then
                If Me.chkRound = True Then X = Application.Round(X, 3)
                p = Application.Chidist(X, df1)
            Else
                X = Application.ChiInv(p, df1)
                'round calculated x and calculate p with rounded value
                If Me.chkRound = True Then
                    X = Application.Round(X, 3)
                    p = Application.Chidist(X, df1)
                End If
            End If
    End Select
     
    Select Case OutputType
        Case "sheet"

            StartProc Me
            
            If MakeNewOutputSheet() = False Then Exit Sub
            Set Base = Range("A" & Format(ActiveCell.Row))
                
            Base.Range("B3:C3") = Array("  P(lower)", "  P(upper)")
            Select Case Which
                Case 0 '\normal
                    Base.Range("B2") = "normal distribution"
                    Base.Range("D3") = " z"
                    FmtOutline Base.Range("B3:D4")
                    
                    'output mean and sd if input was not z
                    If InputType = 2 Then
                        Base.Range("E3:G3") = Array("X", "mean", "std.dev")
                        Base.Range("E4:G4") = Array(X1, Mean, sd)
                        FmtOutline Base.Range("E3:G4")
                    End If
                    
                    If CalcType = 2 And InputType = 2 Then
                        Dec = DecPlaces(Base.Range("E4"))
                        Base.Range("E4").NumberFormat = AutoFormat(0, Dec)
                    End If
                    
                Case 1 '\t
                    Base.Range("B2") = "t distribution"
                    Base.Range("D3:E3") = Array(" t", "  df")
                    
                    Base.Range("E4") = df1
                    FmtOutline Base.Range("B3:E4")
                    
                Case 2 '\F
                    Base.Range("B2") = "F distribution"
                    Base.Range("D3:F3") = Array("F", "  df1", "  df2")
                    
                    Base.Range("E4:F4") = Array(df1, df2)
                    FmtOutline Base.Range("B3:F4")
                    
                Case 3 '\chi-square
                    Base.Range("B2") = "chi-square distribution"
                    Base.Range("D3:E3") = Array(" chi-square", "  df")
                    
                    Base.Range("E4") = df1
                    FmtOutline Base.Range("B3:E4")
            End Select
            Base.Range("B4:D4") = Array(1 - p, p, X)
            Base.Range("D3").EntireRow.HorizontalAlignment = xlRight

            Select Case Which
                Case 0, 2 '\normal, \F
                    With Base.Range("D4")
                        If X < 10000.01 Then .NumberFormat = "0.00;-0.00" Else .NumberFormat = "0.00E+00"
                    End With
                    If Me.chkRound = True Then Base.Range("D5") = Base.Range("D3") & " rounded to 2 places"
                Case 1, 3 '\t,\chi-square
                    With Base.Range("D4")
                        If X < 10000.01 Then .NumberFormat = "0.000;-0.000" Else .NumberFormat = "0.000E+00"
                    End With
                    If Me.chkRound = True Then Base.Range("D5") = Base.Range("D3") & " rounded to 3 places"
            End Select
            
            FormatPvalue Base.Range("B4"), xlNo
            FormatPvalue Base.Range("C4"), xlNo
            Base.Range("B3:G4").Columns.AutoFit
            EndProc Base
        
        Case "userform"
           
            If CalcType = 1 Then
                If 1 - p < 0.00005 Then Fmt = "0.00E+00" Else Fmt = ".0000"
                Me.OutputBox1.value = Application.Text(1 - p, Fmt)
                Me.OutputBox1.ControlTipText = Str(1 - p)
                If p < 0.00005 Then Fmt = "0.00E+00" Else Fmt = ".0000"
                Me.OutputBox2.value = Application.Text(p, Fmt)
                Me.OutputBox2.ControlTipText = Str(p)
                
                If X < 10000.01 Then Fmt = "0.00;-0.00" Else Fmt = "0.00E+00"
                Me.OutputBox3.value = Application.Text(X, Fmt)
                If X < 10000.01 Then Fmt = "0.00000;-0.000000" Else Fmt = "0.0000E+00"
                Me.OutputBox3.ControlTipText = "z value corresponding to x (" & Application.Text(X, Fmt) & ")"
            Else
                Set testvalue = ThisWorkbook.Sheets("TempSheet").Range("B3")
                testvalue = X1
                Dec = DecPlaces(testvalue)
                Fmt = AutoFormat(0, Dec)
                Me.OutputBox2.value = Application.Text(X1, Fmt)
                Set testvalue = Nothing
                
                If X < 10000.01 Then Fmt = "0.00;-0.00" Else Fmt = "0.00E+00"
                Me.OutputBox1.value = Application.Text(X, Fmt)
            End If
    End Select
        
    Exit Sub
    
MainErrorHandler:
    If errcheck("Continuous Probability Distributions") = vbYes Then Exit Sub Else Resume
End Sub
Attribute VB_Name = "frmCorr"
Attribute VB_Base = "0{4B441838-5D0C-4128-90D6-7C367D81BE5C}{B7BC29E0-1F54-4B6A-8B22-64DFB4BEBF51}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'''MegaStat|fffd| Correlation Matrix module |fffd|2005 by J. B. Orris
'frmCorr

Option Explicit
Option Base 1


Private Sub UserForm_Activate()
    Me.InputBox.SetFocus
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    Correlation
End Sub

Private Sub buttonClear_Click()
    ClearLast
    Me.Hide
    Unload Me
    OpenUserForm "Correlation"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then Me.InputBox.SetFocus
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    Dim st As Long
    If Me.Tag = "Correlation" Then st = 4620 Else st = 4880
    CallHelp st
End Sub

Private Sub InputBox_DblClick(Cancel As Boolean)
    Me.InputBox.Text = SetAddr(Me, Me.InputBox)
End Sub

Private Sub InputBox_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBox.Text = SetAddr(Me, Me.InputBox)
    End If
End Sub

Private Sub Label1_Click()
        Me.InputBox.Text = SetAddr(Me, Me.InputBox)
End Sub

Private Sub InputBox_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        Me.buttonOK.SetFocus
    End If
End Sub

Sub Correlation()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler

    Dim InputRange As Range
    Dim X As Range
    Dim Base As Range
    Dim base2 As Range
    Dim Table As Range
    Dim ColLabels As Range
    Dim value As Range
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    Dim Nvar As Integer
    Dim r05 As Double
    Dim r01 As Double
    Dim n As Double
    Dim Nint As Integer
    Dim R As Variant
    Dim t As Double
    Dim TieCorr As Double
    Dim OK, ColLabelsQ As Integer
    Dim st As String
    Dim Title As String
    Dim tbase As Range
    Dim sortrange As Range
    Dim TempRange As Range
    
    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub
    
    If Me.Tag = "Correlation" Then Title = "Correlation Matrix" Else Title = "Spearman Coefficient of Rank Correlation"
    
    Set InputRange = Range(Me.InputBox.Text)
    If ValidRange(Me.InputBox, vbNo) = False Then Exit Sub
    Set TempRange = InputRange
    
    If InputRange.Areas.count > 1 Then Set InputRange = SetMultipleRanges(InputRange, "TempSheet", frmCorr.InputBox, True)
    If InputRange.Range("A1") = "Error" Then
        ClearSheets
        Exit Sub
    End If

    InputRange.Worksheet.Activate
    If StopQ1("Not enough data selected.", InputRange.Rows.count < 3, InputRange.Rows, 1001, Me.InputBox) = True Then Exit Sub
    If StopQ1("Must select at least two columns.", InputRange.Columns.count < 2, InputRange, 1008, Me.InputBox) = True Then Exit Sub
    
    Set ColLabels = InputRange.Rows(1).Cells
    ColLabelsQ = LabelCheck(ColLabels)
    If ColLabelsQ = vbCancel Then Exit Sub
    
    If ColLabelsQ = vbYes Then
        i = 2
    Else
        i = 1
        Check_Stealth_Labels ColLabelsQ, ColLabels, InputRange
    End If
    
    Set X = InputRange.Range(Cells(i, 1), Cells(InputRange.Rows.count, InputRange.Columns.count))
    
    For Each value In X
        If StopQ1("Input range contains missing or invalid data.", IsOKnumber(value) = False, value, 1006, Me.InputBox) = True Then Exit Sub
    Next value
    
    Nvar = X.Columns.count
    n = X.Rows.count
    Nint = n
    
    t = Application.TInv(0.05, n - 2)
    r05 = Sqr(t ^ 2 / ((n - 2) + t ^ 2))
    t = Application.TInv(0.01, n - 2)
    r01 = Sqr(t ^ 2 / ((n - 2) + t ^ 2))
    
    StartProc Me
    
    TempRange.Worksheet.Activate
    Set TempRange = Nothing

    If MakeNewOutputSheet() = False Then Exit Sub
    
    Set Base = Range("A" & Format(ActiveCell.Row))
    SetTitle Base, Title

    If Me.Tag = "Rs" Then
'       move  data from range to PredSheet and convert to ranks
        Set tbase = ThisWorkbook.Sheets("PredSheet").Range("A4")

        For i = 0 To Nvar - 1
            For j = 0 To n - 1
                tbase.Offset(i, j).value = X.Range("A1").Offset(j, i).value
                tbase.Offset(i + 1, j).value = j + 1
            Next j
            tbase.Offset(i, n).value = 1E+305 * (10 + Rnd())
            tbase.Offset(i + 1, n).value = n + 1
            Set sortrange = tbase.Range("A1").Offset(i, 0).Resize(2, n + 1)

            frmNP_Friedman.RankTempSheetbyRows sortrange, Nint, TieCorr
        Next i
        Set sortrange = Nothing
        
        For i = 0 To Nvar - 1 'transpose
            For j = 0 To n - 1
                tbase.Offset(Nvar + 2 + j, i).value = tbase.Range("A1").Offset(i, j).value
            Next j
        Next i
        tbase.Offset(Nvar + 2, 0).CurrentRegion.NumberFormat = "0.00"
        Set X = tbase.Offset(Nvar + 2, 0).CurrentRegion
    End If

    For i = 1 To Nvar
        If ColLabelsQ = vbYes Then
            st = Format(ColLabels.Columns(i), ColLabels.Columns(i).NumberFormat)
        Else
            st = "#" & Str(i)
        End If
        Base.Offset(3, i + 1) = st
        Base.Offset(3 + i, 1) = st
    Next i
    
    'format labels
    With Base.Offset(3, 1).CurrentRegion
        .HorizontalAlignment = xlRight
        .Font.Italic = True
    End With
    
    For i = 1 To Nvar
        For j = 1 To i - 1
            If Me.Tag = "Rs" And Me.CheckTies = False Then
                R = 0 'calc std Spearman here
                For k = 1 To n
                    R = R + (X.Columns(i).Cells(k) - X.Columns(j).Cells(k)) ^ 2
                Next k
                R = 1 - 6 * R / (n ^ 3 - n)
            Else
                R = Application.Correl(X.Columns(i), X.Columns(j))
                
            End If
            With Base.Offset(3 + i, 1 + j)
                .value = R
                If IsNumeric(R) = True Then
                    If Abs(R) < 0.00000000000001 Then
                        R = Abs(R)
                        .value = R
                    End If
                    Select Case Abs(R)
                        Case Is >= r01
                            .Interior.ColorIndex = 6
                        Case Is >= r05
                            .Interior.ColorIndex = 36
                    End Select
                Else
                    .Interior.ColorIndex = 3
                    .Font.ColorIndex = 2
                End If
            End With
            With Base.Offset(3 + j, 1 + i)
                .value = R
                .NumberFormat = ";;;"
                If IsNumeric(R) = False Then .Font.ColorIndex = 2
            End With
        Next j
        Base.Offset(3 + i, 1 + i) = 1#
    Next i
    
    st = Base.Offset(4, 2).Cells.Address & ":" & Base.Offset(3, 1).Offset(Nvar, Nvar).Cells.Address
    Set Table = Range(st)

    With Table
        .Font.Italic = False
        .NumberFormat = " ##.000 ;[RED] -##.000 "
        .HorizontalAlignment = xlRight
    End With
    FmtOutline Table
    
    ' hide upper half
    For i = 1 To Nvar
        For j = 1 To i - 1
            Base.Offset(3 + j, 1 + i).NumberFormat = ";;;"
        Next j
    Next i
   
    Base.Offset(Nvar + 5, 2) = n
    Base.Offset(Nvar + 5, 3) = "sample size"
    Base.Offset(Nvar + 7, 2).value = Chr(177) & Format(r05, " .000")
    Base.Offset(Nvar + 7, 2).HorizontalAlignment = xlRight
    Base.Offset(Nvar + 7, 3).value = " critical value .05 (two-tail)"
    Base.Offset(Nvar + 7, 2).Range("A1").Interior.ColorIndex = 36
    Base.Offset(Nvar + 8, 2).value = Chr(177) & Format(r01, " .000")
    Base.Offset(Nvar + 8, 2).HorizontalAlignment = xlRight
    Base.Offset(Nvar + 8, 3).value = " critical value .01 (two-tail)"
    Base.Offset(Nvar + 8, 2).Range("A1").Interior.ColorIndex = 6

    EqualWidthCol Base.Offset(3, 1).CurrentRegion.Columns
    
    If Me.Tag = "Rs" And Me.CheckData = True Then
        Set base2 = Base.Offset(Nvar + 11)
        For i = 1 To Nvar
            If ColLabelsQ = vbYes Then
                base2.Offset(0, i - 1).value = ColLabels.Columns(i)
                base2.Offset(0, i - 1).NumberFormat = ColLabels.Columns(i).NumberFormat
            Else
                base2.Offset(0, i - 1).value = "Group " & i
            End If
            base2.Offset(0, i - 1).Range("A1").HorizontalAlignment = xlRight
            base2.Offset(0, i - 1).Range("A1").WrapText = True
        Next i

        For j = 1 To n
            For k = 1 To Nvar
                base2.Offset(0 + j, k - 1) = X.Offset(j - 1, k - 1).value
            Next k
        Next j
    End If

    EndProc Base
    Exit Sub
    
MainErrorHandler:
    If errcheck(Title) = vbYes Then Exit Sub Else Resume
End Sub
Attribute VB_Name = "frmDesc"
Attribute VB_Base = "0{AC190FD1-123A-4B0C-B2B7-34F3BBDA0C9E}{4C5C736C-8501-44E1-BCC9-1494B4264EFE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'''MegaStat|fffd| Descriptive Statistics module |fffd|2005 by J. B. Orris
'frmDesc

Option Explicit
Option Base 1

Private Sub UserForm_Activate()
    InitComboBoxCI Me
    With ComboBox_TI
        If .ListIndex < 0 Then
            .Clear
            .AddItem "99.73% (" & Chr(177) & "3s)"
            .AddItem "95.44% (" & Chr(177) & "2s)"
            .AddItem "68.26% (" & Chr(177) & "1s)"
            .AddItem "99%   "
            .AddItem "95%   "
            .AddItem "90%   "
            .AddItem "50%   "
        End If
    End With
    
    Me.InputBox.SetFocus
End Sub

Private Sub UserForm_Terminate1()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    Descriptive
End Sub

Private Sub buttonClear_Click()
    ClearLast
    Me.Hide
    Unload Me
    OpenUserForm "Descriptives"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then Me.InputBox.SetFocus
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    CallHelp 4000
End Sub

Private Sub comboboxCI_Change()
    Me.chk_ci.value = True
End Sub

Private Sub ComboBox_TI_Change()
    Me.chk_ti.value = True
End Sub

Private Sub InputBox_DblClick(Cancel As Boolean)
    Me.InputBox.Text = SetAddr(Me, Me.InputBox)
End Sub

Private Sub InputBox_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBox.Text = SetAddr(Me, Me.InputBox)
    End If
End Sub

Private Sub InputboxLabel_Click()
        Me.InputBox.Text = SetAddr(Me, Me.InputBox)
End Sub

Private Sub SpinButton1_Change()
    Dim st As String
    With Me.SpinButton1
        Me.chk_DotPlot.value = True
        If .value = 32000 Then
            .value = 90
            .SmallChange = 1
        End If
        If .value >= 10 Then .SmallChange = 10 Else .SmallChange = 1
        Select Case .value
            Case 0
                st = "auto"
                .value = 1
            Case Is <= 90
                st = CStr(.value)
            Case Is > 90
                st = "100+"
                .value = 32000
        End Select
        
        Me.LabelSpinButton1.Caption = "(Max dots: " & st
    End With
End Sub

Private Sub InputBox_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
    End If
End Sub

Private Sub chk_split_Click()
    If Me.chk_split.value = True Then Me.chk_StemLeaf.value = True
End Sub

Private Sub chk_StemLeaf_Click()
    If Me.chk_StemLeaf.value = False Then Me.chk_split.value = False
End Sub

Private Sub OptionsToggleButton_Click()
    Dim X As CheckBox
    Static switch As Boolean

    Select Case switch
        Case True
            switch = False
        Case False, 0
            switch = True
    End Select
    
    With Me
        .chk_mean = switch
        .chk_sd = switch
        .chk_minmax = switch
        .chk_ci = switch
        .chk_median = switch
        .chk_popsd = switch
        .chk_skewkurt = switch
        .chk_SSX = switch
        .chk_stderror = switch
        .chk_width = switch
        .chk_GOF = switch
        .chk_BoxPlot = switch
        .chk_DotPlot = switch
        .chk_StemLeaf = switch
        .chk_split = switch
        .chk_RunsPlot = switch
        .chk_ER = switch
        .chk_ti = switch
        .chk_NormalPlot = switch
    End With
End Sub

Private Sub DefaultsButton_Click()
    Dim i As Integer
    
    With Me
        .chk_mean = True
        .chk_sd = True
        .chk_minmax = True
        
        .chk_ci = False
        .chk_median = False
        .chk_popsd = False
        .chk_skewkurt = False
        .chk_SSX = False
        .chk_stderror = False
        .chk_width = False
        .chk_GOF = False
        .chk_BoxPlot = False
        .chk_DotPlot = False
        .chk_StemLeaf = False
        .chk_split = False
        .chk_RunsPlot = False
        .chk_ER = False
        .chk_ti = False
        .chk_NormalPlot = False
    End With
End Sub

Sub Descriptive()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler

    Dim InputRange As Range
    Dim X As Range
    Dim Y As Range
    Dim Base As Range
    Dim ColLabels As Range
    Dim colx As Range
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    Dim m As Integer
    Dim Nvar As Integer
    Dim Lines As Integer
    Dim Dec() As Integer
    Dim StdErr As Double
    Dim Rng As Double
    Dim z As Double
    Dim tCI As Double
    Dim zTI As Double
    Dim ConfLevel As Double
    Dim TolLevel As Double
    Dim ConfStr As String
    Dim ColLabelsQ As Integer
    Dim ans As Integer
    Dim t As Range
    Dim number As Range
    Dim xx As Double
    Dim Q1() As Double
    Dim Q2() As Double
    Dim Q3() As Double
    Dim Hspread() As Double
    Dim LowExt() As Double
    Dim HighExt() As Double
    Dim LowOut() As Double
    Dim HighOut() As Double
    Dim HighOutCount() As Integer
    Dim LowExtCount() As Integer
    Dim HighExtCount() As Integer
    Dim LowOutCount() As Integer
    Dim nClass As Integer
    Dim ULimit() As Double
    Dim zVal() As Double
    Dim Obs() As Double
    Dim Exp As Double
    Dim temp As Double
    Dim n() As Double
    Dim Mean() As Double
    Dim Stdev() As Double
    Dim Chisq As Double
    Dim TempRange As Range
    Dim base2 As Range
    Dim ch As ChartObject
    Dim X1 As Range
    Dim Y1 As Range
    Dim ChartTop As Double
    Dim DataRange As Range
    Dim MaxS As Double
    Dim MinS As Double
    Dim Inc  As Double
    Dim Adj As Integer
    Dim ChartDataSheet As Worksheet
    Dim TimeStamp As String
    Dim InputStr As String

    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub

    'validation
    If ValidRange(Me.InputBox, vbNo) = False Then Exit Sub
    Set InputRange = Range(Me.InputBox.Text)
    Set TempRange = InputRange
    
    If InputRange.Areas.count > 1 Then Set InputRange = SetMultipleRanges(InputRange, "TempSheet", frmDesc.InputBox, True)
    If InputRange.Range("A1") = "Error" Then
        ClearSheets
        Exit Sub
    End If

    InputRange.Worksheet.Activate
    
    For Each colx In InputRange.Columns
        If StopQ1("Not enough data selected," & Chr(13) & Chr(13) & "or qualitative data selected.", Application.count(colx) <= 3, colx, 1001, Me.InputBox) = True Then Exit Sub
    Next colx
    
    If Me.chk_ci = True Then
        ConfLevel = Eval(Me.ComboBoxCI.Text)
        If ConfLevel > 1 Then ConfLevel = ConfLevel / 100
        If StopQ0("Probability must be between 0 and 1", ValidateP(ConfLevel) = False, 1012, Me.ComboBoxCI) = True Then Exit Sub
    End If
     
     If Me.chk_ti = True Then
        If Mid(Me.ComboBox_TI.Text, 1, 6) = "99.73%" Then Me.ComboBox_TI.ListIndex = 0
        If Me.ComboBox_TI.ListIndex = -1 Then
            InputStr = Me.ComboBox_TI.Text
            TolLevel = Eval(InputStr)
            If TolLevel > 1 Then TolLevel = TolLevel / 100
            If StopQ0("Probability must be between 0 and 1", ValidateP(TolLevel) = False, 1012, Me.ComboBox_TI) = True Then Exit Sub
            zTI = Application.NormSInv((1 + TolLevel) / 2)
        Else
            Select Case Me.ComboBox_TI.ListIndex
                Case 0
                    zTI = 3
                Case 1
                    zTI = 2
                Case 2
                    zTI = 1
                Case 3
                    zTI = Application.NormSInv(0.995)
                Case 4
                    zTI = Application.NormSInv(0.975)
                Case 5
                    zTI = Application.NormSInv(0.95)
                Case 6
                    zTI = Application.NormSInv(0.75)
            End Select
            TolLevel = Application.NormSDist(zTI) * 2 - 1
        End If
     End If
    
     
    'end validation
    
    StartProc Me
    
'    InputRange.Worksheet.Activate
    
    Set ColLabels = InputRange.Rows(1).Cells
    ColLabelsQ = LabelCheck(ColLabels)
    If ColLabelsQ = vbCancel Then Exit Sub
    If ColLabelsQ = vbYes Then
        i = 2
    Else
        i = 1
        Check_Stealth_Labels ColLabelsQ, ColLabels, InputRange
    End If

    Set X = InputRange.Range(Cells(i, 1), Cells(InputRange.Rows.count, InputRange.Columns.count))
    TempRange.Worksheet.Activate
    Set TempRange = Nothing
    
    Nvar = X.Columns.count
    ReDim Dec(Nvar)
    For i = 1 To Nvar
        Dec(i) = DecPlaces(X.Columns(i).Cells)
    Next i
    
    ReDim n(Nvar)
    ReDim Mean(Nvar)
    ReDim Stdev(Nvar)
    ReDim Q1(Nvar)
    ReDim Q2(Nvar)
    ReDim Q3(Nvar)
    ReDim Hspread(Nvar)
    ReDim LowExt(Nvar)
    ReDim HighExt(Nvar)
    ReDim LowOut(Nvar)
    ReDim HighOut(Nvar)
    ReDim HighOutCount(Nvar)
    ReDim LowExtCount(Nvar)
    ReDim HighExtCount(Nvar)
    ReDim LowOutCount(Nvar)
    
    If MakeNewOutputSheet() = False Then Exit Sub
    Set Base = Range("A" & Format(ActiveCell.Row))
    SetTitle Base, "Descriptive statistics"
    With Application
        Base.Range("A5") = "count"
        FmtHeader1 Base.Range("A4").Range(Cells(1, 1), Cells(1, Nvar + 1))
        Lines = 5

        For i = 1 To Nvar
            If ColLabelsQ = vbYes Then
                Base.Offset(3, i) = ColLabels.Columns(i).Text & " "
            Else
                Base.Offset(3, i) = "#" & Str(i) & " "
            End If
            n(i) = .count(X.Columns(i))
            Base.Offset(4, i) = n(i)
            Base.Offset(4, i).NumberFormat = "0 "
            Mean(i) = .Average(X.Columns(i))
            Stdev(i) = Sqr(MyDevSq(X.Columns(i)) / (n(i) - 1))
        Next i
    
        If Me.chk_mean = True Then
            Base.Offset(Lines, 0) = "mean"
            For i = 1 To Nvar
                Base.Offset(Lines, i) = Mean(i)
                Base.Offset(Lines, i).NumberFormat = AutoFormat(2, Dec(i))
            Next i
            Lines = Lines + 1
        End If
        
        If Me.chk_sd = True Then
            Base.Offset(Lines, 0) = "sample variance"
            Base.Offset(Lines + 1, 0) = "sample standard deviation"
            For i = 1 To Nvar
                Base.Offset(Lines, i) = MyDevSq(X.Columns(i)) / (Base.Offset(4, i) - 1)
                Base.Offset(Lines + 1, i) = Stdev(i)
                Base.Offset(Lines, i).Range("A1:A2").NumberFormat = AutoFormat(2, Dec(i))
            Next i
            Lines = Lines + 2
        End If
        
        If Me.chk_minmax = True Then
            Base.Offset(Lines, 0) = "minimum"
            Base.Offset(Lines + 1, 0) = "maximum"
            Base.Offset(Lines + 2, 0) = "range"
            For i = 1 To Nvar
                Base.Offset(Lines, i) = .Min(X.Columns(i))
                Base.Offset(Lines + 1, i) = .Max(X.Columns(i))
                Base.Offset(Lines + 2, i) = Base.Offset(Lines + 1, i) - Base.Offset(Lines, i)
                Base.Offset(Lines, i).Range("A1:A3").NumberFormat = "General" & " "
            Next i
            Lines = Lines + 3
        End If
        
        If Me.chk_SSX = True Then
            Base.Offset(Lines, 0) = "sum"
            Base.Offset(Lines + 1, 0) = "sum of squares"
            Base.Offset(Lines + 2, 0) = "deviation sum of squares (SSX)"
            For i = 1 To Nvar
                Base.Offset(Lines, i) = .Sum(X.Columns(i))
                Base.Offset(Lines + 1, i) = .SumSq(X.Columns(i))
                Base.Offset(Lines + 2, i) = MyDevSq(X.Columns(i))
                Base.Offset(Lines, i).NumberFormat = AutoFormat(2, Dec(i))
                Base.Offset(Lines + 1, i).NumberFormat = AutoFormat(2, Dec(i))
                Base.Offset(Lines + 2, i).NumberFormat = AutoFormat(2, Dec(i))
            Next i
            Lines = Lines + 3
        End If
        
        If Me.chk_popsd = True Then
            Lines = Lines + 1
            Base.Offset(Lines, 0) = "population variance"
            Base.Offset(Lines + 1, 0) = "population standard deviation"
            For i = 1 To Nvar
                Base.Offset(Lines, i) = MyDevSq(X.Columns(i)) / Base.Offset(4, i)
                Base.Offset(Lines + 1, i) = Sqr(Base.Offset(Lines, i).value)
                Base.Offset(Lines, i).NumberFormat = AutoFormat(2, Dec(i))
                Base.Offset(Lines + 1, i).NumberFormat = AutoFormat(2, Dec(i))
            Next i
            Lines = Lines + 2
        End If
        
        If Me.chk_stderror = True Then
            Lines = Lines + 1
            Base.Offset(Lines, 0) = "standard error of the mean"
            For i = 1 To Nvar
                Base.Offset(Lines, i) = Sqr(MyDevSq(X.Columns(i)) / (Base.Offset(4, i) * (Base.Offset(4, i) - 1)))
                Base.Offset(Lines, i).NumberFormat = AutoFormat(2, Dec(i))
            Next i
            Lines = Lines + 1
        End If
        
        If Me.chk_ci = True Then
            ConfStr = Format(ConfLevel, "#.##%")
            Lines = Lines + 1
            Base.Offset(Lines, 0) = "confidence interval " & ConfStr & " lower"
            Base.Offset(Lines + 1, 0) = "confidence interval " & ConfStr & " upper"
            Base.Offset(Lines + 2, 0) = "   half-width"
            For i = 1 To Nvar
                tCI = Application.TInv(1 - ConfLevel, n(i) - 1)
                StdErr = Stdev(i) / Sqr(Base.Offset(4, i))
                Base.Offset(Lines, i) = Mean(i) - tCI * StdErr
                Base.Offset(Lines + 1, i) = Mean(i) + tCI * StdErr
                Base.Offset(Lines + 2, i) = (Base.Offset(Lines + 1, i) - Base.Offset(Lines, i)) / 2
                Base.Offset(Lines, i).Range("A1:A3").NumberFormat = AutoFormat(2, Dec(i))
            Next i
            Lines = Lines + 3
        End If
        
        If Me.chk_ER = True Then
            Lines = Lines + 1
            Base.Offset(Lines, 0) = "empirical rule"
            Base.Offset(Lines + 1, 0) = "   mean - 1s"
            Base.Offset(Lines + 2, 0) = "   mean + 1s"
            Base.Offset(Lines + 3, 0) = "   percent in interval (68.26%)"
            Base.Offset(Lines + 4, 0).RowHeight = 18
            Base.Offset(Lines + 4, 0) = "   mean - 2s"
            Base.Offset(Lines + 5, 0) = "   mean + 2s"
            Base.Offset(Lines + 6, 0) = "   percent in interval (95.44%)"
            Base.Offset(Lines + 7, 0).RowHeight = 18
            Base.Offset(Lines + 7, 0) = "   mean - 3s"
            Base.Offset(Lines + 8, 0) = "   mean + 3s"
            Base.Offset(Lines + 9, 0) = "   percent in interval (99.73%)"
            
            For i = 1 To Nvar
                Base.Offset(Lines + 1, i) = Mean(i) - 1 * Stdev(i)
                Base.Offset(Lines + 2, i) = Mean(i) + 1 * Stdev(i)
                Base.Offset(Lines + 3, i) = EmpRule(X.Columns(i).Cells, Base.Offset(Lines + 1, i), Base.Offset(Lines + 2, i))
                
                Base.Offset(Lines + 4, i) = Mean(i) - 2 * Stdev(i)
                Base.Offset(Lines + 5, i) = Mean(i) + 2 * Stdev(i)
                Base.Offset(Lines + 6, i) = EmpRule(X.Columns(i).Cells, Base.Offset(Lines + 4, i), Base.Offset(Lines + 5, i))
                
                Base.Offset(Lines + 7, i) = Mean(i) - 3 * Stdev(i)
                Base.Offset(Lines + 8, i) = Mean(i) + 3 * Stdev(i)
                Base.Offset(Lines + 9, i) = EmpRule(X.Columns(i).Cells, Base.Offset(Lines + 7, i), Base.Offset(Lines + 8, i))
                
                Base.Offset(Lines, i).Offset(1, 0).Range("A1:A9").NumberFormat = AutoFormat(2, Dec(i))
                Base.Offset(Lines + 3, i).NumberFormat = "0.0%"
                Base.Offset(Lines + 6, i).NumberFormat = "0.0%"
                Base.Offset(Lines + 9, i).NumberFormat = "0.0%"
            Next i
            Base.Offset(Lines, 0).Range("A2:A9").Font.Name = "Lucida Console"
            SetFont Base.Offset(Lines + 3, 0)
            SetFont Base.Offset(Lines + 6, 0)
            SetFont Base.Offset(Lines + 9, 0)
            Lines = Lines + 10
        End If
        
        If Me.chk_ti = True Then
            ConfStr = Format(TolLevel, "#.##%")
            Lines = Lines + 1
            Base.Offset(Lines, 0) = "tolerance interval " & ConfStr & " lower"
            Base.Offset(Lines + 1, 0) = "tolerance interval " & ConfStr & " upper"
            Base.Offset(Lines + 2, 0) = "   half-width"
            For i = 1 To Nvar
                Base.Offset(Lines, i) = Mean(i) - zTI * Stdev(i)
                Base.Offset(Lines + 1, i) = Mean(i) + zTI * Stdev(i)
                Base.Offset(Lines + 2, i) = (Base.Offset(Lines + 1, i) - Base.Offset(Lines, i)) / 2
                Base.Offset(Lines, i).Range("A1:A3").NumberFormat = AutoFormat(2, Dec(i))
            Next i
            Lines = Lines + 3
        End If
        
        If Me.chk_skewkurt = True Then
            Lines = Lines + 1
            Base.Offset(Lines, 0) = "skewness"
            Base.Offset(Lines + 1, 0) = "kurtosis"
            Base.Offset(Lines + 2, 0) = "coefficient of variation (CV)"
            On Error Resume Next
            For i = 1 To Nvar
                Base.Offset(Lines, i) = .Skew(X.Columns(i))
                Base.Offset(Lines + 1, i) = .Kurt(X.Columns(i))
                Base.Offset(Lines + 2, i) = Sqr(MyDevSq(X.Columns(i)) / (Base.Offset(4, i) - 1)) / .Average(X.Columns(i))
             
                Base.Offset(Lines, i).NumberFormat = AutoFormat(2, Dec(i))
                Base.Offset(Lines + 1, i).NumberFormat = AutoFormat(2, Dec(i))
                Base.Offset(Lines + 2, i).NumberFormat = "0.00%"
            Next i
            On Error GoTo MainErrorHandler
            Lines = Lines + 3
        End If
                
        If Me.chk_median = True Or Me.chk_width = True Or Me.chk_BoxPlot = True Then
            For i = 1 To Nvar
                Q1(i) = .Quartile(X.Columns(i), 1)
                Q2(i) = .Median(X.Columns(i))
                Q3(i) = .Quartile(X.Columns(i), 3)
                Hspread(i) = Q3(i) - Q1(i)
                LowExt(i) = Q1(i) - 3# * Hspread(i)
                HighExt(i) = Q3(i) + 3# * Hspread(i)
                LowOut(i) = Q1(i) - 1.5 * Hspread(i)
                HighOut(i) = Q3(i) + 1.5 * Hspread(i)
                LowExtCount(i) = 0
                LowOutCount(i) = 0
                HighOutCount(i) = 0
                HighExtCount(i) = 0
                For Each number In X.Columns(i).Cells
                    If Hspread(i) > 0 And IsOKnumber(number) = True Then
                        Select Case True
                            Case number < LowExt(i)
                                LowExtCount(i) = LowExtCount(i) + 1
                            Case number < LowOut(i)
                                LowOutCount(i) = LowOutCount(i) + 1
                            Case number > HighExt(i)
                                HighExtCount(i) = HighExtCount(i) + 1
                            Case number > HighOut(i)
                                HighOutCount(i) = HighOutCount(i) + 1
                        End Select
                    End If
                Next number
            Next i
        End If
        
        If Me.chk_median = True Then
            Lines = Lines + 1
            Base.Offset(Lines, 0) = "1st quartile"
            Base.Offset(Lines + 1, 0) = "median"
            Base.Offset(Lines + 2, 0) = "3rd quartile"
            Base.Offset(Lines + 3, 0) = "interquartile range"
            Base.Offset(Lines + 4, 0) = "mode"
            Base.Offset(Lines + 6, 0) = "low extremes"
            Base.Offset(Lines + 7, 0) = "low outliers"
            Base.Offset(Lines + 8, 0) = "high outliers"
            Base.Offset(Lines + 9, 0) = "high extremes"
            For i = 1 To Nvar
                Base.Offset(Lines, i) = Q1(i)
                Base.Offset(Lines + 1, i) = Q2(i)
                Base.Offset(Lines + 2, i) = Q3(i)
                Base.Offset(Lines + 3, i) = Hspread(i)
                Base.Offset(Lines + 4, i) = .Mode(X.Columns(i))
                Base.Offset(Lines + 6, i) = LowExtCount(i)
                Base.Offset(Lines + 7, i) = LowOutCount(i)
                Base.Offset(Lines + 8, i) = HighOutCount(i)
                Base.Offset(Lines + 9, i) = HighExtCount(i)
                Base.Offset(Lines, i).Range("A1:A5").NumberFormat = AutoFormat(2, Dec(i))
                Base.Offset(Lines, i).Range("A7:A10").NumberFormat = "0 "
            Next i
            Lines = Lines + 10
        End If
        
        If Me.chk_width = True Then
            Lines = Lines + 1
            Base.Offset(Lines, 0) = "suggested interval width"
            For i = 1 To Nvar
                Base.Offset(Lines, i) = CalcWidth(X.Columns(i).Cells, LowExtCount(i), HighExtCount(i))
                Base.Offset(Lines, i).Range("A1:A2").NumberFormat = "General" & " "
            Next i
            Lines = Lines + 1
        End If
        
        If Me.chk_GOF = True Then
            nClass = .Round(1 + .Log(.count(X.Columns(1)), 2), 0) 'Sturges's rule; note the (1)
            ReDim ULimit(nClass)
            ReDim zVal(nClass)
            ReDim Obs(nClass)
            temp = 1 / nClass
            For j = 1 To nClass - 1
                zVal(j) = .NormSInv(temp)
                temp = temp + 1 / nClass
                Base.Offset(Lines + 4 + j, 0) = "O(" & Format(zVal(j), "+0.00;-0.00") & ")"
            Next j
            Lines = Lines + 1
            zVal(nClass) = 99
            Base.Offset(Lines + 3 + nClass, 0) = "O(inf.)"
            Base.Offset(Lines, 0) = "normal curve GOF"
            With Base.Offset(Lines, 0).Borders(xlEdgeBottom)
                .LineStyle = xlContinuous
                .Weight = xlThin
                .ColorIndex = xlAutomatic
            End With
            Base.Offset(Lines + 1, 0) = "p-value"
            Base.Offset(Lines + 2, 0) = "chi-square(df=" & Format(nClass - 3, "0") & ")"
            Base.Offset(Lines + 3, 0) = "E"
            Base.Offset(Lines + 3, 0).Offset(1, 0).EntireRow.RowHeight = Base.Offset(Lines + 3, 0).Offset(1, 0).EntireRow.RowHeight + 3.5
            
            For i = 1 To Nvar
                For j = 1 To nClass
                    Obs(j) = 0
                    ULimit(j) = Mean(i) + zVal(j) * Stdev(i)
                Next j
                For Each number In X.Columns(i).Cells
                    If IsOKnumber(number) = True Then
                        For j = 1 To nClass
                            If number <= ULimit(j) Then
                                Obs(j) = Obs(j) + 1
                                Exit For
                            End If
                        Next j
                    End If
                Next number
                Exp = n(i) / nClass
                Base.Offset(Lines + 3, i) = Exp
                Chisq = 0
                For j = 1 To nClass
                    Base.Offset(Lines + 3 + j, i) = Obs(j)
                    Base.Offset(Lines + 3 + j, i).NumberFormat = "0 "
                    Chisq = Chisq + (Obs(j) - Exp) ^ 2 / Exp
                Next j
                Base.Offset(Lines + 1, i) = .Chidist(Chisq, nClass - 3)
                FormatPvalue Base.Offset(Lines + 1, i), xlYes
                Base.Offset(Lines + 1, i).NumberFormat = Base.Offset(Lines + 1, i).NumberFormat & " "
               Base.Offset(Lines + 2, i) = Chisq
               Base.Offset(Lines + 2, i).Range("A1:A2").NumberFormat = "0.00 "
            Next i
            Lines = Lines + nClass + 4
       End If
       
       Set t = Base.Range("A5").CurrentRegion.Resize(Lines - 3, Nvar + 1)
       t.Columns.AutoFit
    End With
       
    If Me.chk_StemLeaf = True Then
         Dim XRange As Double
         Dim MaxVal As Double
         Dim MinVal As Double
         Dim e As Integer
         Dim Ratio As Double
         Dim st As String
         Dim OutRange As Range
         Dim StemSplit As Integer
         Dim Sum As Long
         Dim Stem As String
         Dim Leaf As Integer
         Dim kStart As Integer
         Dim nRows As Integer
         Dim sp As String
                     
         For i = 1 To Nvar
             Set base2 = Range("A1").Offset(ActiveSheet.UsedRange.Rows.count + 1).Range("A3")
             base2.Range("A1") = "Stem and Leaf plot for"
             base2.Range("B1") = Base.Offset(3, i).Text
             base2.Range("A2") = "stem unit ="
             base2.Range("A3") = "leaf unit ="
             base2.Range("A5:C5") = Array("Frequency", "Stem", " Leaf")
             base2.Range("A1:B5").HorizontalAlignment = xlRight
             base2.Range("B1:B3").HorizontalAlignment = xlLeft
             
            Set DataRange = ThisWorkbook.Sheets("RegrSheet").Range("A4")
             If i > 1 Then DataRange.CurrentRegion.Clear
             X.Columns(i).Copy
             DataRange.PasteSpecial xlPasteValues
             DataRange.Sort Key1:=DataRange.Range("A1"), Order1:=xlAscending, Header:=xlNo, _
                 OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
             
             MaxVal = Application.Max(DataRange.Resize(n(i)))
             MinVal = Application.Min(DataRange.Resize(n(i)))
             XRange = MaxVal - MinVal
             
             e = 26
             'Sturge OK here because of test for normality; no need for Doane intervals
             nClass = Application.Round(1 + Application.Log(Application.count(X.Columns(1)), 2), 0)
             Do
                 e = e - 1
                 Ratio = XRange / 10 ^ e
             Loop Until (Ratio >= 1.5)
             base2.Range("B2").value = 10 ^ e
             base2.Range("B3").value = 10 ^ (e - 1)
             
             For Each Y In DataRange.Resize(n(i))
                 Y.value = Y.value / 10 ^ e
                 st = Format(Y, "0.00000000000")
    
                 Y.Offset(0, 1).value = "'" & Mid(st, 1, InStr(st, ".") - 1)
                 Y.Offset(0, 2).value = "'" & Mid(st, InStr(st, ".") + 1, 1)
             Next Y
             
             If Me.chk_split.value = True Then StemSplit = 4 Else StemSplit = 9
            
             Set OutRange = base2.Range("A6")
             
             'prime outrange
             OutRange.Offset(0, 0).Range("A1:A2").value = 0
             OutRange.Offset(0, 0).Range("A1:A2").HorizontalAlignment = xlRight
             OutRange.Offset(0, 0).Range("A1:A2").InsertIndent 1
             OutRange.Offset(0, 1).Range("A1:A2").value = "'" & DataRange.Offset(0, 1)
             OutRange.Offset(0, 3).Range("A1:A2").value = StemSplit
             k = 1
    
             If Me.chk_split.value = True Then
                 OutRange.Offset(1, 3).value = 9
             Else
                 OutRange.Offset(1, 1).value = "'" & DataRange.Offset(0, 1) + 1
             End If
    
             Do
                 k = k + 1
                 OutRange.Offset(k, 0) = 0
                 OutRange.Offset(k, 0).HorizontalAlignment = xlRight
                 OutRange.Offset(k, 0).InsertIndent 1
                 If Me.chk_split = False Then
                     OutRange.Offset(k, 1).value = "'" & Val(OutRange.Offset(k - 1, 1).value) + 1
                     OutRange.Offset(k, 3).value = 9
                 Else
                     Select Case OutRange.Offset(k - 1, 3).value
                         Case 4
                             OutRange.Offset(k, 1).value = "'" & Val(OutRange.Offset(k - 1, 1).value)
                             OutRange.Offset(k, 3).value = 9
                         Case 9
                             OutRange.Offset(k, 1).value = "'" & Val(OutRange.Offset(k - 1, 1).value) + 1
                             OutRange.Offset(k, 3).value = 4
                     End Select
                 End If
             Loop Until (OutRange.Offset(k, 1).value * base2.Range("B2").value > MaxVal)
             
             'put in splits
              nRows = k
             If Me.chk_split.value = True Then
                 For k = 0 To nRows - 1 Step 2
                     If Val(OutRange.Offset(k, 1).value) < 0 Then
                         OutRange.Offset(k, 3).value = 9
                         OutRange.Offset(k + 1, 3).value = 4
                     Else
                         OutRange.Offset(k, 3).value = 4
                         OutRange.Offset(k + 1, 3).value = 9
                     End If
                 Next k
             Else
                 For k = 0 To nRows - 1
                     OutRange.Offset(k, 3).value = 9
                 Next k
             End If
         
             'look for negative 0
             If MinVal < 0 Then
                 nRows = k
                 For k = 0 To nRows
                     If Val(OutRange.Offset(k, 1).value) = 0 Then
                         Select Case StemSplit
                             Case 4
                                 OutRange.Offset(k, 0).Range("A1:D2").Insert Shift:=xlDown
                                 OutRange.Offset(k, 0).Range("B1:B2") = "'-0"
                                 OutRange.Offset(k, 0).Range("D1") = 9
                                 OutRange.Offset(k, 0).Range("D2") = 4
                                 OutRange.Offset(k, 0).Range("A1:A2") = 0
                             Case 9
                                 OutRange.Offset(k, 0).Range("A1:D1").Insert Shift:=xlDown
                                 OutRange.Offset(k, 0).Range("B1") = "'-0"
                                 OutRange.Offset(k, 0).Range("D1") = 9
                                 OutRange.Offset(k, 0).Range("A1") = 0
                         End Select
                         Exit For
                     End If
                 Next k
             End If
             
    
             'output
             Sum = 0
             kStart = 0
             If n(i) > 200 Then sp = "" Else sp = " "
             nRows = OutRange.CurrentRegion.Rows.count
             For Each Y In DataRange.Resize(n(i))
                 Sum = Sum + 1
                 Stem = Y.Offset(0, 1)
                 Leaf = Y.Offset(0, 2)
                 If Val(Stem) + Val(Leaf) / 10# > Val(OutRange.Offset(kStart, 1)) + Val(OutRange.Offset(kStart, 3) / 10#) Then kStart = kStart + 1
                 For k = kStart To nRows - 1
                     If Me.chk_split.value = False Then
                         If (Stem = OutRange.Offset(k, 1)) And (Leaf <= OutRange.Offset(k, 3)) Then
                             UpdateRow OutRange, k, sp, Leaf
                             kStart = k
                             Exit For
                         End If
                     Else
                         If Y.value > 0# Then
                             If (Stem = OutRange.Offset(k, 1)) And (Leaf <= OutRange.Offset(k, 3)) Then
                                 UpdateRow OutRange, k, sp, Leaf
                                 kStart = k
                                 Exit For
                             End If
                         Else
                             If (Stem = OutRange.Offset(k, 1)) And (Stem = OutRange.Offset(k + 1, 1)) _
                                 And (Leaf <= OutRange.Offset(k, 3)) And (Leaf > OutRange.Offset(k + 1, 3)) Then
                                 UpdateRow OutRange, k, sp, Leaf
                                 kStart = k
                                 Exit For
                             Else
                                 If (Stem = OutRange.Offset(k, 1)) And (Leaf < OutRange.Offset(k, 3)) Then
                                     UpdateRow OutRange, k + 1, sp, Leaf
                                     kStart = k
                                     Exit For
                                 End If
                             End If
                         End If
                     End If
                 Next k
             Next Y
             
             'cleanup
             k = k + 2
             Do While (OutRange.Offset(k, 0).value = 0)
                  OutRange.Offset(k, 0).Range("A1:D1").Clear
                  k = k - 1
             Loop
    
             OutRange.Offset(k, 0).Font.Underline = xlUnderlineStyleSingleAccounting
             OutRange.Offset(k + 1, 0) = Sum
             OutRange.Offset(k + 1, 0).HorizontalAlignment = xlRight
              OutRange.Offset(k + 1, 0).InsertIndent 1
             OutRange.CurrentRegion.Columns(4).Clear
             For k = 0 To nRows - 2
                 OutRange.Offset(k, 0).Range("A1:B1").HorizontalAlignment = xlRight
                 OutRange.Offset(k, 2).value = "' " & OutRange.Offset(k, 2).value
             Next k
             If OutRange.Range("A1").value = 0 Then OutRange.Range("A1").EntireRow.Delete
         Next i
         base2.Columns(1).AutoFit
    End If
    
    If Me.chk_BoxPlot = True Then
         Dim Top As Range
         Dim FenceRanges(4, 2) As Range
         Dim Outliers(2) As Range
         Dim SeriesCount As Byte
         
         On Error Resume Next
         MakeNewChartDataSheet
         Set ChartDataSheet = ActiveWorkbook.Worksheets("ChartDataSheet_")
         Set Top = ChartDataSheet.Range("A1").Offset(ChartDataSheet.UsedRange.Rows.count + 2).Range("A1")
         
         Set base2 = Range("A1").Offset(ActiveSheet.UsedRange.Rows.count + 1).Range("A1")
         ChartTop = base2.Range("A1").Top + 20 - 145
         
         For i = 1 To Nvar
    
             'set up data
             With Top.Range("A1")
                 .Offset(0) = 2
                 .Offset(1) = 2
                 .Offset(2) = 3
                 .Offset(3) = 3
                 .Offset(4) = 1
                 .Offset(5) = 3
                 .Offset(6) = 3
                 .Offset(7) = 2
                 .Offset(8) = 2
                 .Offset(9) = 2
                 .Offset(10) = 1
                 .Offset(11) = 1
                 .Offset(12) = 2
                 .Offset(13) = 1
                 .Offset(14) = 3
                 .Offset(15) = 1
                 .Offset(16) = 3
                 .Offset(17) = 1
                 .Offset(18) = 3
                 .Offset(19) = 1
                 .Offset(20) = 3
             End With
             
             With Top.Range("B1")
                 .Offset(0, i - 1) = Application.Large(X.Columns(i).Cells, n(i) - LowOutCount(i) - LowExtCount(i))
                 .Offset(1, i - 1) = Q1(i)
                 .Offset(2, i - 1) = Q1(i)
                 .Offset(3, i - 1) = Q2(i)
                 .Offset(4, i - 1) = Q2(i)
                 .Offset(5, i - 1) = Q2(i)
                 .Offset(6, i - 1) = Q3(i)
                 .Offset(7, i - 1) = Q3(i)
                 .Offset(8, i - 1) = Application.Large(X.Columns(i).Cells, HighOutCount(i) + HighExtCount(i) + 1)
                 .Offset(9, i - 1) = Q3(i)
                 .Offset(10, i - 1) = Q3(i)
                 .Offset(11, i - 1) = Q1(i)
                 .Offset(12, i - 1) = Q1(i)
                 .Offset(13, i - 1) = LowExt(i)
                 .Offset(14, i - 1) = LowExt(i)
                 .Offset(15, i - 1) = LowOut(i)
                 .Offset(16, i - 1) = LowOut(i)
                 .Offset(17, i - 1) = HighOut(i)
                 .Offset(18, i - 1) = HighOut(i)
                 .Offset(19, i - 1) = HighExt(i)
                 .Offset(20, i - 1) = HighExt(i)
             End With
                            
             Set X1 = Top.Offset(0, i).Range("A1:A13")
             Set Y1 = Top.Range("A1:A13")
             
             For k = 1 To 4
                 Set FenceRanges(k, 1) = Top.Offset(11 + 2 * k, i).Range("A1:A2")
                 Set FenceRanges(k, 2) = Top.Offset(11 + 2 * k, 0).Range("A1:A2")
             Next k
             Set Outliers(1) = Top.Offset(21, 0).Range("A1")
             Set Outliers(2) = Top.Offset(21, 1).Range("A1")
             
             ChartTop = ChartTop + 145
             
             Set ch = ActiveSheet.ChartObjects.Add(20, ChartTop, 400, 125)
             ch.Placement = xlMove
             
             With ch.Chart
                .SeriesCollection.Add Source:=Y1
                .ChartType = xlXYScatter
                .PlotBy = xlColumns
                .HasTitle = True
                .HasLegend = False
                .HasAxis(xlCategory, xlPrimary) = True
                .HasAxis(xlValue, xlPrimary) = False
                
                .ChartTitle.Text = "BoxPlot"
                SetFont .ChartTitle
             
                SetFont .ChartArea
                .PlotArea.Border.LineStyle = xlNone
                .PlotArea.Interior.ColorIndex = xlNone
                .SeriesCollection(1).XValues = X1
                
                 With .Axes(xlCategory, xlPrimary)
                     .HasTitle = True
                     .AxisTitle.Text = Base.Offset(3, i).Text
                     SetFont .AxisTitle
                     SetFont .TickLabels
                     .HasMajorGridlines = False
                     .HasMinorGridlines = False
                     .MajorTickMark = xlOutside
                     .MinorTickMark = xlOutside
                     .Crosses = xlMinimum
                     .CrossesAt = xlAxisCrossesCustom
                 End With
                
                 With .Axes(xlValue, xlPrimary)
                     .HasTitle = False
                     .HasMajorGridlines = False
                     .HasMinorGridlines = False
                 End With
                
                 With .SeriesCollection(1)
                     .MarkerStyle = xlNone
                     .Border.ColorIndex = 1
                     .Border.Weight = xlThin
                     .Border.LineStyle = xlContinuous
                 End With
                 
                 SeriesCount = 1
                 'create fences if outliers exist on either end
                 If LowOutCount(i) + LowExtCount(i) > 0 Then
                     For k = 2 To 3
                         .SeriesCollection.NewSeries
                         With .SeriesCollection(k)
                             .XValues = FenceRanges(k - 1, 1)
                             .Values = FenceRanges(k - 1, 2)
                             .MarkerStyle = xlNone
                             .Border.ColorIndex = 1
                             .Border.Weight = xlThin
                             .Border.LineStyle = xlDot
                         End With
                     Next k
                     SeriesCount = SeriesCount + 2
                 End If
                 
                 If HighOutCount(i) + HighExtCount(i) > 0 Then
                     If SeriesCount = 1 Then Adj = 2 Else Adj = 0
                     For k = SeriesCount + 1 To SeriesCount + 2
                         .SeriesCollection.NewSeries
                         With .SeriesCollection(k)
                             .XValues = FenceRanges(k + Adj - 1, 1)
                             .Values = FenceRanges(k + Adj - 1, 2)
                             .MarkerStyle = xlNone
                             .Border.ColorIndex = 1
                             .Border.Weight = xlThin
                             .Border.LineStyle = xlDot
                         End With
                     Next k
                     SeriesCount = SeriesCount + 2
                 End If
    
                 'create outliers range if necessary
                 If SeriesCount > 1 Then
                     m = 0
                     SeriesCount = SeriesCount + 1
                     For Each number In X.Columns(i).Cells
                         If Hspread(i) > 0 And IsOKnumber(number) = True Then
                             If number < LowOut(i) Or number > HighExt(i) Or number > HighOut(i) Then
                                 Outliers(1).Offset(m).Range("A1") = 1.8
                                 Outliers(2).Offset(m, i - 1).Range("A1") = number
                                 m = m + 1
                             End If
                         End If
                     Next number
    
                     Set Outliers(1) = Outliers(1).Offset(0).Range("A1:A" & Format(m))
                     Set Outliers(2) = Outliers(2).Offset(0, i - 1).Range("A1:A" & Format(m))
                     
                     .SeriesCollection.NewSeries
                     With .SeriesCollection(SeriesCount)
                         .XValues = Outliers(2)
                         .Values = Outliers(1)
                         .MarkerStyle = xlCircle
                         .MarkerBackgroundColorIndex = xlNone
                         .MarkerForegroundColorIndex = 1
                         .MarkerSize = 4
                         .Shadow = False
                         .Border.LineStyle = xlNone
                     End With
                 End If
                 MaxS = .Axes(xlCategory).MaximumScale
                 MinS = .Axes(xlCategory).MinimumScale
                 Inc = -(.Axes(xlCategory).MajorUnit)
                 MinVal = Application.Min(X.Columns(i))
                 If (MinVal - MinS) / (MaxS - MinS) > 0.25 Then ScaleAxes ch.Chart, xlCategory, MaxS, MinS, Inc, MinVal
             End With
             TimeStamp = Format(Now(), "m/d/yyyy h:mm.ss")
             ch.BottomRightCell.Offset(-2, -3).value = TimeStamp & "  (" & CStr(i) & ")"
             Top.Offset(-1).value = "Boxplot  " & TimeStamp
             ch.BottomRightCell.Offset(1, -1).value = " "
             ch.BottomRightCell.Offset(1, -1).Select
         Next i
         On Error GoTo MainErrorHandler
    End If
     
    If Me.chk_DotPlot = True Then
         Dim Xval As Range
         Dim VertSize As Integer
         Dim MaxDots As Integer
         Dim RoundVal As Integer
         Dim RoundInc As Integer
         Dim t2 As Double
         
        On Error Resume Next
         Set base2 = Range("A1").Offset(ActiveSheet.UsedRange.Rows.count + 1).Range("A1")
         VertSize = 120
         ChartTop = base2.Range("A1").Top + 20 - VertSize
         
         MakeNewChartDataSheet
         Set ChartDataSheet = ActiveWorkbook.Worksheets("ChartDataSheet_")
         Set DataRange = ChartDataSheet.Range("A1").Offset(ChartDataSheet.UsedRange.Rows.count + 2).Range("A1")
         
         For i = 1 To Nvar
           'set up data
             m = 0
            For Each Xval In X.Columns(i).Cells
                   If IsOKnumber(Xval) = True Then
                   DataRange.Offset(m, 2 * (i - 1)).value = Xval.value
                   m = m + 1
               End If
            Next Xval
            DataRange.Resize(n(i)).Cells.ClearFormats
            
            DataRange.Offset(0, 2 * (i - 1)).Resize(m).Sort Key1:=DataRange.Offset(0, 2 * (i - 1)).Range("A1"), Order1:=xlAscending, Header:=xlNo, _
                 OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
            
            With DataRange
                If Mid(LabelSpinButton1.Caption, 12, 4) = "auto" Then
                    MaxDots = 0
                    For k = 0 To m - 1
                       If .Offset(k, 2 * i - 2).value = .Offset(k - 1, 2 * i - 2) Then
                           .Offset(k, 2 * i - 1).value = .Offset(k - 1, 2 * i - 1).value + 1
                           If .Offset(k, 2 * i - 1).value > MaxDots Then MaxDots = MaxDots + 1
                       Else
                           .Offset(k, 2 * i - 1).value = 1
                       End If
                    Next k
                Else
                    RoundVal = Application.Round(Application.Max(Application.Log(Abs(Application.Max(.Offset(0, 2 * i - 2).Resize(m))), 10), _
                                     Application.Log(Abs(Application.Min(.Offset(0, 2 * i - 2).Resize(m))), 10)), 0)
                    If RoundVal > 0 Then
                        RoundInc = -1
                        RoundVal = RoundVal + 2
                    Else
                        RoundInc = -1
                        RoundVal = -(RoundVal - 2)
                    End If
                    MaxDots = 0
                    Set X1 = .Offset(0, 2 * i - 2).Resize(m)
                    .Offset(-1, 2 * i - 1).value = 0
                    Do While (MaxDots <= Application.Min(m, Me.SpinButton1.value))
                        .Offset(0, 2 * i - 1).Resize(m).Clear
                        RoundVal = RoundVal + RoundInc
                        For Each Xval In X1
                            Xval = Application.Round(Xval, RoundVal)
                        Next Xval

                        For k = 0 To m - 1
                           If .Offset(k, 2 * i - 2).value = .Offset(k - 1, 2 * i - 2).value Then
                               .Offset(k, 2 * i - 1).value = .Offset(k - 1, 2 * i - 1).value + 1
                               If .Offset(k, 2 * i - 1).value > MaxDots Then
                                    MaxDots = MaxDots + 1
                               End If
                           Else
                               .Offset(k, 2 * i - 1).value = 1
                           End If
                        Next k
                    Loop
                    .Offset(-1, 2 * i - 1).Clear
                End If
                Set X1 = .Offset(0, 2 * i - 2).Resize(m)
                Set Y1 = .Offset(0, 2 * i - 1).Resize(m)
            End With
                
           Adj = (Application.Max(Y1) - 1) * 3
           ChartTop = ChartTop + VertSize + 20
           VertSize = 100 + Adj
           Set ch = ActiveSheet.ChartObjects.Add(20, ChartTop, 400, Application.Min(450, VertSize))
           ch.Placement = xlMove
           
           With ch.Chart
               .SeriesCollection.Add Source:=Y1
               .ChartType = xlXYScatter
               .PlotBy = xlColumns
               .HasTitle = True
               .HasLegend = False
               
               .ChartTitle.Text = "DotPlot"
               SetFont .ChartTitle
           
               SetFont .ChartArea
               .PlotArea.Border.LineStyle = xlNone
               .PlotArea.Interior.ColorIndex = xlNone
               .SeriesCollection(1).XValues = X1
               
               With .Axes(xlCategory, xlPrimary)
                   .HasTitle = True
                   .AxisTitle.Text = Base.Offset(3, i).Text
                   SetFont .AxisTitle
                   SetFont .TickLabels
                   .HasMajorGridlines = False
                   .HasMinorGridlines = False
                   .MajorTickMark = xlOutside
                   .MinorTickMark = xlOutside
               End With
               
               With .Axes(xlValue, xlPrimary)
                   .HasMajorGridlines = False
                   .HasMinorGridlines = False
               End With
             
               .HasAxis(xlValue, xlPrimary) = False
               
               With .SeriesCollection(1)
                   .MarkerStyle = xlCircle
                   .MarkerSize = 3
                   .MarkerBackgroundColorIndex = 1
                   .MarkerForegroundColorIndex = 1
                   .Border.LineStyle = xlNone
               End With
             
               MaxS = .Axes(xlCategory).MaximumScale
               MinS = .Axes(xlCategory).MinimumScale
               Inc = -(.Axes(xlCategory).MajorUnit)
               MinVal = Application.Min(X1)
               If (MinVal - MinS) / (MaxS - MinS) > 0.25 Then ScaleAxes ch.Chart, xlCategory, MaxS, MinS, Inc, MinVal
            End With
            
            TimeStamp = Format(Now(), "m/d/yyyy h:mm.ss")
            ch.BottomRightCell.Offset(-2, -3).value = TimeStamp & "  (" & CStr(i) & ")"
            DataRange.Offset(-1).value = "Dotplot  " & TimeStamp
            ch.BottomRightCell.Offset(1, -1).value = " "
            ch.BottomRightCell.Offset(1, -1).Select
        Next i
        On Error GoTo MainErrorHandler
    End If
    
    If Me.chk_RunsPlot.value = True Then
        For i = 1 To Nvar
            Set base2 = Range("A1").Offset(ActiveSheet.UsedRange.Rows.count + 1).Range("A2")
        
            Set ch = ActiveSheet.ChartObjects.Add(20, base2.Range("A1").Top, 400, 252)
            ch.Placement = xlMove
            
            With ch.Chart
                .SeriesCollection.Add Source:=X.Columns(i)
                .ChartType = xlLine
                .PlotBy = xlColumns
                .HasTitle = True
                .HasLegend = False
                .ChartTitle.Text = "Runs Plot"
                SetFont .ChartTitle
                SetFont .ChartArea
                .PlotArea.Border.LineStyle = xlNone
                .PlotArea.Interior.ColorIndex = xlNone
        
                On Error Resume Next
                With .Axes(xlCategory, xlPrimary)
                    .HasTitle = True
                    .AxisTitle.Text = "Time"
                    SetFont .AxisTitle
                    SetFont .TickLabels
                    .HasMajorGridlines = False
                    .HasMinorGridlines = False
                    .MajorTickMark = xlOutside
                    .MinorTickMark = xlNone
                    .TickLabels.NumberFormat = "0"
                    .TickLabels.Orientation = xlHorizontal
                End With
        
                With .Axes(xlValue, xlPrimary)
                    .HasTitle = True
                    .AxisTitle.Text = Base.Offset(3, i)
        
                    .TickLabels.NumberFormat = AutoFormat(2, Dec(i))
                    SetFont .AxisTitle
                    SetFont .TickLabels
                    .HasMajorGridlines = True
                    With .MajorGridlines.Border
                        .ColorIndex = 1
                        .Weight = xlHairline
                        .LineStyle = xlDot
                    End With
                    
                    .HasMinorGridlines = False
                    .MajorTickMark = xlCross
                    .MinorTickMark = xlNone
                    .Crosses = xlCustom
                    .CrossesAt = .MinimumScale
                End With
                
                With .SeriesCollection(1)
                    .MarkerStyle = xlDiamond
                    .MarkerBackgroundColorIndex = 1
                    .MarkerForegroundColorIndex = 1
                    .Border.Weight = xlHairline
                    .Border.LineStyle = xlContinuous
                    .Border.ColorIndex = 1
                    .MarkerSize = 4
                End With
            End With
            ch.BottomRightCell.Offset(1, -1).value = " "
            ch.BottomRightCell.Offset(1, -1).Select
            
        Next i
        On Error GoTo MainErrorHandler
    End If
    
    If Me.chk_NormalPlot = True Then
         
         For i = 1 To Nvar
            On Error Resume Next
            Set base2 = Range("A1").Offset(ActiveSheet.UsedRange.Rows.count + 1).Range("A1")
            VertSize = 320
            ChartTop = base2.Range("A1").Top + 20 - VertSize
            
            MakeNewChartDataSheet
            Set ChartDataSheet = ActiveWorkbook.Worksheets("ChartDataSheet_")
            Set DataRange = ChartDataSheet.Range("A1").Offset(ChartDataSheet.UsedRange.Rows.count + 2).Range("A1")
         
           'set up data
             m = 0
            For Each Xval In X.Columns(i).Cells
                   If IsOKnumber(Xval) = True Then
                   DataRange.Offset(m, 2 * (i - 1)).value = Xval.value
                   m = m + 1
               End If
            Next Xval
            DataRange.Resize(n(i)).Cells.ClearFormats
            
            DataRange.Offset(0, 2 * (i - 1)).Resize(m).Sort Key1:=DataRange.Offset(0, 2 * (i - 1)).Range("A1"), Order1:=xlAscending, Header:=xlNo, _
                 OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
            
            With DataRange
                For k = 0 To m - 1
                    .Offset(k, 2 * i - 1).value = Application.NormSInv((k + 1) / (n(i) + 1))
                
                Next k
                Set X1 = .Offset(0, 2 * i - 2).Resize(m)
                Set Y1 = .Offset(0, 2 * i - 1).Resize(m)
            End With

        
            Set ch = ActiveSheet.ChartObjects.Add(20, base2.Range("A1").Top + 20, 335, 252)
            ch.Chart.ChartWizard Source:=X1, Gallery:=xlXYScatter, Title:="Normal Curve Plot", HasLegend:=2
            ch.Placement = xlMove
    
            With ch.Chart
                SetFont .ChartTitle
                SetFont .ChartArea
                .PlotArea.Border.LineStyle = xlNone
                .PlotArea.Interior.ColorIndex = xlNone
                .SeriesCollection(1).XValues = Y1
    
                On Error Resume Next
                With .Axes(xlValue, xlPrimary)
                    .Crosses = xlMinimum
                    .CrossesAt = .MinimumScale
                    .HasTitle = True
                    .AxisTitle.Text = Base.Offset(3, i).Text
    
                    .TickLabels.NumberFormat = AutoFormat(0, Dec(i))
                    SetFont .AxisTitle
                    SetFont .TickLabels
                    .HasMajorGridlines = False
                    .HasMinorGridlines = False
                    .MajorTickMark = xlCross
                    .MinorTickMark = xlCross

               End With
    
               With .Axes(xlCategory, xlPrimary)

                    .HasTitle = True
                    .AxisTitle.Text = "Normal Score"
                    SetFont .AxisTitle
                    SetFont .TickLabels
                    .HasMajorGridlines = False
                    .HasMinorGridlines = False
                    .MajorTickMark = xlCross
                    .MinorTickMark = xlCross
                    .TickLabels.NumberFormat = "0.0"
                    .MinimumScale = -3#
                    .MaximumScale = 3#
                    .MajorUnit = 1
                    .MinorUnit = 0.5
                    .Crosses = xlMinimum
                    .CrossesAt = .MinimumScale
                End With
                On Error GoTo MainErrorHandler
    
    
                With .SeriesCollection(1)
                    .MarkerStyle = xlDiamond
                    .MarkerBackgroundColorIndex = 1
                    .MarkerForegroundColorIndex = xlNone
                End With
            End With

            TimeStamp = Format(Now(), "m/d/yyyy h:mm.ss")
            ch.BottomRightCell.Offset(-2, -3).value = TimeStamp & "  (" & CStr(i) & ")"
            DataRange.Offset(-1).value = "NormalPlot  " & TimeStamp
            ch.BottomRightCell.Offset(1, -1).value = " "
            ch.BottomRightCell.Offset(1, -1).Select
        Next i
        On Error GoTo MainErrorHandler
    End If
    
    Base.Range("A2").Resize(Lines).CurrentRegion.Resize(Lines, 2).Columns.AutoFit
    EndProc Base
    Exit Sub
    
MainErrorHandler:
    If errcheck("Descriptive Statistics") = vbYes Then Exit Sub Else Resume
End Sub

Private Sub UpdateRow(OutRange As Range, Row As Integer, sp As String, Leaf As Integer)
    OutRange.Offset(Row, 2).value = "'" & OutRange.Offset(Row, 2).value & sp & Leaf
    OutRange.Offset(Row, 0) = OutRange.Offset(Row, 0) + 1
End Sub

Private Function EmpRule(Data As Range, lower As Double, upper As Double) As Double
    Dim number As Range
    Dim n As Double
    
    n = 0
    For Each number In Data
        If IsOKnumber(number) = True Then
            n = n + 1
            If number >= lower And number <= upper Then
                EmpRule = EmpRule + 1
            End If
        End If
    Next number
    EmpRule = EmpRule / n
End Function
Attribute VB_Name = "frmDiscrete"
Attribute VB_Base = "0{F4138253-0E70-420E-B350-82844BF111A5}{AE01A2C2-EA5D-45AC-8AD9-0F22F6A12A49}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'''MegaStat|fffd| Discrete Probability Distributions module |fffd|2005 by J. B. Orris
' frmDiscrete

Option Explicit

Private Sub UserForm_Activate()
    MultiPage1_Click Me.MultiPage1.SelectedItem.Index
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    DiscreteDistributions
End Sub

Private Sub buttonClear_Click()
    Me.Hide
    Unload Me
    OpenUserForm "Discrete"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then MultiPage1_Click Me.MultiPage1.SelectedItem.Index
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
        Select Case Me.MultiPage1.value
            Case 0 'binomial
                CallHelp 4220
            Case 1 'hypergeometric
                CallHelp 4224
            Case 2 'Poisson
                CallHelp 4222
        End Select
End Sub

Private Sub MultiPage1_Click(ByVal Index As Long)
    Select Case Index
        Case 0
            Me.Input_n.SetFocus
        Case 1
            Me.input_Npop.SetFocus
        Case 2
            Me.input_mu.SetFocus
    End Select
End Sub

Private Sub input_n_DblClick(Cancel As Boolean)
    UpdateInput Me.Input_n
End Sub

Private Sub Label_input_n_Click()
    UpdateInput Me.Input_n
End Sub

Private Sub input_p_DblClick(Cancel As Boolean)
    UpdateInput Me.input_p
End Sub

Private Sub Label_input_p_Click()
    UpdateInput Me.input_p
End Sub

Private Sub input_nPop_DblClick(Cancel As Boolean)
    UpdateInput Me.input_Npop
End Sub

Private Sub Label_input_Npop_Click()
    UpdateInput Me.input_Npop
End Sub

Private Sub input_nPos_DblClick(Cancel As Boolean)
    UpdateInput Me.input_Npos
End Sub

Private Sub Label_input_Npos_Click()
    UpdateInput Me.input_Npos
End Sub

Private Sub input_nSample_DblClick(Cancel As Boolean)
    UpdateInput Me.input_Nsample
End Sub

Private Sub Label_input_Nsample_Click()
    UpdateInput Me.input_Nsample
End Sub

Private Sub input_mu_DblClick(Cancel As Boolean)
    UpdateInput Me.input_mu
End Sub

Private Sub Label_input_mu_Click()
    UpdateInput Me.input_mu
End Sub

Private Sub input_MaxX_DblClick(Cancel As Boolean)
    UpdateInput Me.input_MaxX
End Sub

Private Sub Label_input_MaxX_Click()
    UpdateInput Me.input_MaxX
End Sub


Sub DiscreteDistributions()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler
    
    Dim n As Double
    Dim p As Double
    Dim Mu As Double
    Dim nPop As Double
    Dim nPos As Double
    Dim nSample As Double
    Dim X As Double
    Dim MaxX As Double
    Dim ln_prob As Double
    Dim startii As Integer
    Dim endi As Integer
    Dim i As Integer
    Dim j As Integer
    Dim LoopCount As Integer
    Dim stepdown As Integer
    Dim Title2 As String
    Dim st As String
    Dim Base As Range
    Dim base2 As Range
    Dim OutputRange As Range
    Dim ch  As ChartObject
    Dim Which As Integer
    Dim chartQ As Boolean
    Dim E4 As Double
    Dim con1 As Double
    Dim con2 As Double
    Dim starti As Integer
    Dim L2 As Double
    Dim Prob As Double
    Dim cum_prob As Double
    Dim icount As Integer
    
    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub
   
    Which = Me.MultiPage1.value

    Select Case Which
        Case 0 '\Binomial
            UpdateInput Me.Input_n
            n = Eval(Me.Input_n.Text)
            If n = globalErrVal Then Exit Sub
            If StopQ0("Invalid or missing input value", n < 1, 301, Me.Input_n) = True Then Exit Sub
            
            UpdateInput Me.input_p
            p = Eval(Me.input_p.Text)
            If p = globalErrVal Then Exit Sub
            If StopQ0("Invalid or missing input" & Chr(13) & Chr(13) & "p must be between 0 and 1", p < 0 Or p > 1, 302, Me.input_p) = True Then Exit Sub
    
            stepdown = 8
            LoopCount = n
            chartQ = Me.chartBinomial
            Title2 = "Binomial distribution (n = " & Format(n) & ", p = " & Format(p) & ")"
    
        Case 1 '\Hypergeometric
            UpdateInput Me.input_Npop
            nPop = Eval(Me.input_Npop.Text)
            If nPop = globalErrVal Then Exit Sub
            If StopQ0("Invalid or missing input value", nPop < 1, 303, Me.input_Npop) = True Then Exit Sub
    
            UpdateInput Me.input_Npos
            nPos = Eval(Me.input_Npos.Text)
            If nPos = globalErrVal Then Exit Sub
            If StopQ0("Invalid or missing input value", nPos < 0 Or nPos > nPop, 304, Me.input_Npos) = True Then Exit Sub
    
            UpdateInput Me.input_Nsample
            nSample = Eval(Me.input_Nsample.Text)
            If nSample = globalErrVal Then Exit Sub
            If StopQ0("Invalid or missing input value", nSample < 1 Or nSample > nPop, 305, Me.input_Nsample) = True Then Exit Sub
    
            stepdown = 9
            LoopCount = Application.Min(nSample, nPos)
            chartQ = Me.chartHypergeometric
            
            Title2 = "Hypergeometric distribution (N = " & Format(nPop) & ", S = " & Format(nPos) & ", n = " & Format(nSample) & ")"
    
        Case 2 '\Poisson
            UpdateInput Me.input_mu
            Mu = Eval(Me.input_mu.Text)
            If Mu = globalErrVal Then Exit Sub
            If StopQ0("Input value cannot be negative or larger than 734.", Mu <= 0 Or Mu > 734, 300, Me.input_mu) = True Then Exit Sub
            
            stepdown = 7
            If Len(Me.input_MaxX.Text) > 0 Then
                UpdateInput Me.input_MaxX
                MaxX = Eval(Me.input_MaxX.Text)
                If MaxX = globalErrVal Then Exit Sub
                LoopCount = MaxX
            Else
                LoopCount = 4000
            End If
            chartQ = Me.chartPoisson
            Title2 = "Poisson distribution (" & Chr(181) & " = " & Format(Mu) & ")"
        End Select
    
    StartProc Me
    
    If MakeNewOutputSheet() = False Then Exit Sub
    Set Base = Range("A" & Format(ActiveCell.Row))

    Select Case Which
        Case 0 '\Binomial
            E4 = Log(p / (1 - p))
            L2 = n * Log(1 - p)
            starti = 0
        Case 1 '\Hypergeometric
            con1 = nPos + 1
            con2 = nPop - nPos + 1
            starti = 0
            If nSample - nPop + nPos >= starti Then starti = nSample - nPop + nPos
            L2 = LnComb(nPos, starti) + LnComb(nPop - nPos, nSample - starti) - LnComb(nPop, nSample)
        Case 2 '\Poisson
            Prob = Exp(-Mu)
            starti = 0
    End Select
    
    cum_prob = 0#
    icount = 0
    For i = starti To LoopCount
        Select Case Which
            Case 0 '\Binomial
                If i = starti Then
                    ln_prob = L2
                Else
                    ln_prob = ln_prob + Log((n + 1 - i) / i) + E4
                End If
                Prob = Exp(ln_prob)
                Base.Offset(stepdown + i, 2) = Prob
            
            Case 1 '\Hypergeometric
                If i = starti Then
                    ln_prob = L2
                Else
                    ln_prob = ln_prob + Log((con1 / i - 1) / (con2 / (nSample - i + 1) - 1))
                End If
                Prob = Exp(ln_prob)
                Base.Offset(stepdown + i - starti, 2) = Prob

            Case 2 '\Poisson
                If i = starti Then
                    Prob = Prob
                Else
                    Prob = Prob * (Mu / i)
                End If
                Base.Offset(stepdown + i, 2) = Prob
                If Prob < 0.00000001 And cum_prob > 0.99999 And MaxX = 0 Then Exit For
                If Prob = 0# Then Exit For
            End Select
        
        On Error GoTo MainErrorHandler
        Base.Offset(stepdown + i - starti, 1) = i
        cum_prob = cum_prob + Prob
        Base.Offset(stepdown + i - starti, 3) = cum_prob
    Next i
    i = i - starti
    Base.Offset(stepdown + i, 2).value = Base.Offset(stepdown - 1 + i, 3).value
    FormatPdist Base, Which
    FmtBottomRow1 Base.Offset(stepdown, 2).CurrentRegion.Rows(i + 2)
    
    Select Case Which
        Case 0 '\Binomial
            SetTitle Base, "Binomial distribution"
            Set base2 = Base.Offset(10 + i, 0)
            base2.Offset(0, 2) = n * p
            base2.Offset(0, 3) = " expected value"
            
            base2.Offset(1, 2) = n * p * (1 - p)
            base2.Offset(1, 3) = " variance"
            base2.Offset(2, 2) = Sqr(n * p * (1 - p))
            base2.Offset(2, 3) = " standard deviation"
            base2.Offset(0, 2).Range("A1:A3").NumberFormat = "0.000"
            Base.Range("C4:D4") = Array(n, " n")
            Base.Range("C5:D5") = Array(p, " p")
        Case 1 '\Hypergeometric
            SetTitle Base, "Hypergeometric distribution"
            Set base2 = Base.Offset(11 + i, 0)
            X = nSample * (nPos / nPop)
            base2.Offset(0, 2) = X
            base2.Offset(0, 3) = " expected value"
            base2.Offset(1, 2) = ((nPop - nSample) / (nPop - 1)) * X * ((nPop - nPos) / nPop)
            base2.Offset(1, 3) = " variance"
            base2.Offset(2, 2) = Sqr(base2.Offset(1, 2))
            base2.Offset(2, 3) = " standard deviation"
            base2.Offset(0, 2).Range("A1:A3").NumberFormat = "0.000"
            Base.Range("C4:D4") = Array(nPop, " N, population size")
            Base.Range("C5:D5") = Array(nPos, " S, number of possible occurrences")
            Base.Range("C6:D6") = Array(nSample, " n, sample size")
        Case 2 '\Poisson
            SetTitle Base, "Poisson distribution"
            Set base2 = Base.Offset(9 + i, 0)
            base2.Offset(0, 2) = Mu
            base2.Offset(0, 3) = " expected value"
            base2.Offset(1, 2) = Mu
            base2.Offset(1, 3) = " variance"
            base2.Offset(2, 2) = Sqr(Mu)
            base2.Offset(2, 3) = " standard deviation"
            base2.Offset(0, 2).Range("A1:A3").NumberFormat = "0.000"
            Base.Range("C4:D4") = Array(Mu, " mean rate of occurrence")
    End Select
    
    startii = starti
    If chartQ = True Then
        If (Which = 2 And Mu <= 0.0002) Or (Which = 1 And nSample <= 1) Then '\bail out if extremely small values
                EndProc Base
                Exit Sub
        End If

        'find chartable range
        For i = startii To LoopCount
            If IsError(Base.Offset(stepdown + i, 2)) = False Then
                If Base.Offset(stepdown + i, 2) >= 0.0000005 And LoopCount > 50 Then
                    starti = i
                    Exit For
                End If
            End If
        Next i
        endi = LoopCount
        For i = starti To LoopCount
            If Base.Offset(stepdown + i, 2) <= 0.0000005 And LoopCount > 50 Then
                endi = i
                Exit For
            End If
        Next i
        If starti >= endi Then
            EndProc Base
            Exit Sub
        End If
        
        st = Base.Offset(stepdown + starti - startii, 1).Cells.Address & ":" & Base.Offset(stepdown - startii, 1).Offset(endi, 1).Cells.Address
    
        Set OutputRange = Range(st)
    
        If MakeNewOutputSheet() = False Then Exit Sub
        Set base2 = Range("A1").Offset(ActiveSheet.UsedRange.Rows.count + 1).Range("A1")
         
        Set ch = ActiveSheet.ChartObjects.Add(20, base2.Range("A1").Top + 20, 335, 252)
        ch.Chart.ChartWizard Source:=OutputRange, Gallery:=xlColumn, _
            HasLegend:=2, Title:=Title2, CategoryLabels:=1
        ch.Placement = xlMove
    
        With ch.Chart
            SetFont .ChartArea
            SetFont .ChartTitle
            .PlotArea.Border.LineStyle = xlNone
            .PlotArea.Interior.ColorIndex = xlNone
            
            With .SeriesCollection(1)
                .Type = xlColumn
                 .Border.LineStyle = xlContinuous
                 .Border.Weight = xlHairline
                 .Interior.ColorIndex = 20
            End With
            .ChartGroups(1).GapWidth = 100
            
            With .Axes(xlCategory, xlPrimary)
                .HasTitle = True
                .AxisTitle.Text = "X"
                SetFont .AxisTitle
                SetFont .TickLabels
                .MajorTickMark = xlNone
                .MinorTickMark = xlNone
                .HasMajorGridlines = False
                .HasMinorGridlines = False
            End With
               
            With .Axes(xlValue, xlPrimary)
                .HasTitle = True
                .AxisTitle.Text = "P(X)"
                SetFont .AxisTitle
                SetFont .TickLabels
                .MajorTickMark = xlCross
                .MinorTickMark = xlCross
                .TickLabels.NumberFormat = "0.00"
                .HasMajorGridlines = False
                .HasMinorGridlines = False
            End With
                    
        End With
        ch.BottomRightCell.Offset(1, -1) = " "
        ch.BottomRightCell.Offset(1, -1).Select
    End If
    EndProc Base
    
    Exit Sub
MainErrorHandler:
    If errcheck("Probability Distributions") = vbYes Then Exit Sub Else Resume
End Sub

Sub FormatPdist(Base As Range, Which As Integer)
    Dim base3 As Range
    Dim m As Integer
    
    ' formats discrete distributions
    If Which = 2 Then m = 0 Else m = Which + 1
    Set base3 = Base.Offset(m, 0)
    base3.Offset(8, 2).CurrentRegion.Columns("B:C").NumberFormat = "0.00000"
    base3.Range("D6") = "cumulative"
    base3.Range("B7:D7") = Array("X", "P(X)", "probability")
    FmtHeader1 base3.Range("B6:D7")
    base3.Offset(8, 2).CurrentRegion.Columns("B:C").AutoFit
End Sub



Attribute VB_Name = "frmDist_Chisq"
Attribute VB_Base = "0{6A22682B-E0D1-4A8E-87F0-B8F4E5F9EFC3}{B6CC03A4-5DA5-4E0A-84E1-389EEA84A7AE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


'''MegaStat|fffd| Chidist module |fffd|2005 by J. B. Orris
'frmChidist

'*** add Max Scale box for F and Chisq

Option Explicit
Option Base 1
Dim MaxChisq As Double
Dim SaveBase2 As String

Private Function DensityFcn(Chisq As Double, df As Double, Base As Range) As Double
    Dim C As Double
    On Error GoTo CalcError
    C = 1 / (2 ^ (df / 2) * Gamma(df / 2))
'    C = -1# * (df / 2 * Log(2) + Application.GammaLn(df / 2)) 'log version

    DensityFcn = C * Exp(-1# * Chisq / 2) * Chisq ^ (df / 2 - 1)
    Exit Function
CalcError:
    MaxChisq = -99#
    Base.Range("E14") = "df too large to plot."

End Function

Private Sub input_df_Change()
    Me.chkOverlay.Enabled = False
End Sub

Private Sub UserForm_Activate()
    With Me.ComboBoxRounding
        If .ListIndex < 0 Then
            .Clear
            .AddItem "none"
            .AddItem "2"
            .AddItem "3"
            .AddItem "4"
        End If
    End With
    
     With Me.input_p
        If .ListIndex < 0 Then
            .Clear
            .AddItem ".005"
            .AddItem ".01"
            .AddItem ".025"
            .AddItem ".05"
            .AddItem ".1"
            .AddItem ".5"
            .AddItem ".9"
            .AddItem ".95"
            .AddItem ".975"
            .AddItem ".99"
            .AddItem ".995"
        End If
    End With
    
    If Me.input_val.Visible = True Then Me.input_val.SetFocus
    If Me.input_p.Visible = True Then Me.input_p.SetFocus
    If Me.input_df.Text = "" Then Me.input_df.SetFocus
    
    On Error GoTo NoOutputSheet
    If ActiveWorkbook.Worksheets("Output").Range(SaveBase2).Range("B1") > 1 Then
        If globalLast = "frmDist_Chisq" Then
            With Me
                .chkOverlay.Visible = True
                .chkOverlay.Enabled = True
                .chkOverlay.value = True
                .Label_df.Enabled = False
                .input_df.Enabled = False
            End With
        Else
            With Me
                .chkOverlay.Visible = False
                .chkOverlay.Enabled = False
                .chkOverlay.value = False
                .Label_df.Enabled = True
                .input_df.Enabled = True
            End With
        End If
    End If
    Exit Sub

NoOutputSheet:
    With Me.chkOverlay
        .value = False
        .Enabled = False
        .Visible = False
    End With
End Sub

Private Sub buttonCalc_p_Click()
    With Me
        .input_val.Visible = True
        .input_val.SetFocus
        .input_p.Visible = False
        .Label_Chisq.Visible = True
        .Label_p.Visible = False
    End With
End Sub

Private Sub buttonCalc_Chisq_Click()
    With Me
        .input_val.Visible = False
        .input_p.Visible = True
        .input_p.SetFocus
        .Label_Chisq.Visible = False
        .Label_p.Visible = True
    End With
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    Chidist
End Sub

Private Function GetRounding(InputStr As String) As Integer
    GetRounding = 16
    On Error Resume Next
    GetRounding = Int(Eval(InputStr))
    If GetRounding < 0 Or GetRounding > 16 Then GetRounding = 16
End Function

Private Sub buttonClear_Click()
    ClearLast
    With Me
        .chkOverlay.value = False
        .chkOverlay.Enabled = False
        .chkOverlay.Visible = False
        .input_df.Enabled = True
        .input_df.value = ""
        .input_p.value = ".05"
        .input_val = ""
        .buttonCalc_Chisq = True
        .chkShowPoints = True
        .ComboBoxRounding.ListIndex = 0
        .OptionButtonSolid = True
        .input_df.SetFocus
    End With
End Sub

Private Sub buttonCancel_Click()
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    CallHelp 4237
End Sub

Private Sub chkOverlay_Click()
    With Me
        If .chkOverlay = True Then
            .Label_df.Enabled = False
            .input_df.Enabled = False
        Else
            .Label_df.Enabled = True
            .input_df.Enabled = True
        End If
    End With
End Sub
Private Sub input_val_DblClick(Cancel As Boolean)
    UpdateInput Me.input_val
End Sub

Private Sub Label_F_Click()
    UpdateInput Me.input_val
End Sub

Private Sub input_df_DblClick(Cancel As Boolean)
    UpdateInput Me.input_df
End Sub

Private Sub label_df_Click()
    UpdateInput Me.input_df
End Sub

Private Sub DisplayValue(Chisq As Double, p As Double, Base As Range, LeftPos As Double, yBase As Double)
    Dim j As Integer
    Dim ValBase As Range
    Dim ColumnsOut As Object
    Dim Dec As Integer
    Dim Counter As Range
    Dim Cmt As Comment
    Dim Str As String
    Dim DecOffset As Integer
    Dim Rounding As Integer
    
    Set ValBase = Base.Range("C26")
    Set Counter = Base.Range("B1")

    With ValBase
        .Offset(Counter, 1).value = 1 - p
        .Offset(Counter, 2).value = p
        .Offset(Counter, 1).HorizontalAlignment = xlCenter
        .Offset(Counter, 2).HorizontalAlignment = xlCenter
        FormatPvalue .Offset(Counter, 1), xlNo
        FormatPvalue .Offset(Counter, 2), xlNo
        
        .Offset(Counter, 3).value = Chisq
        .Offset(Counter, 3).NumberFormat = "0.00"
        
        Rounding = GetRounding(Me.ComboBoxRounding.value)
        If Me.ComboBoxRounding.value <> "none" And Rounding < 16 Then
            Set Cmt = .Offset(Counter, 3).AddComment
            With Cmt
                .Visible = False
                .Text Text:="Rounded to " & Application.Text(Rounding, "0") & " places."
                .Shape.Height = 14
                .Shape.Width = 86
            End With
            With .Offset(Counter, 3)
                .NumberFormat = "0." & Application.Rept("0", Rounding)
                .Font.FontStyle = "Italic"
            End With
        End If
           
        If Me.chkShowPoints.value = True Then
            Str = Application.Text(.Offset(Counter, 3).value, .Offset(Counter, 3).NumberFormat)
            
            If Chisq >= MaxChisq Then
                Str = Str & " >"
                LeftPos = 700
            End If
            
            SetBox Str, LeftPos, yBase, 20, 10, True
        End If
    
        .Offset(Counter, 2).Font.Bold = True
        For Each ColumnsOut In .CurrentRegion.Columns.Offset(1, 2)
            If ColumnsOut.ColumnWidth < 7 Then ColumnsOut.ColumnWidth = 7
        Next
    End With
    
    Counter = Counter + 1
End Sub

Function SetBaseDisplay(Base As Range, df As Double) As Double
' function returns max density

    Dim sh2 As Shape
    Dim LeftAxis As Shape
    Dim df1Fill As Shape
    Dim Chisq As Double
    Dim ProbDensity As Double
    Dim yBase As Double
    Dim Xbase As Double
    Dim ResUnit As Double
    Dim X As Double
    Dim Y As Double
    
    Dim Top As Double
    Dim Left As Double
    Dim Width As Double
    Dim Height As Double
    Dim LeftChisq As Double
    Dim Dec As Integer
    Dim xTemp As Range
    Dim MaxDensity As Double
    Dim fxPrev As Double
    Dim Y1 As Double
    Dim R As Integer
    
    R = 23 'set this to 1 to display values only
    
    With Base.Offset(R).Range("A1")
        .value = " Chi-square distribution"
    End With
    
    With Base.Offset(R).Range("A2")
        .value = "df ="
        .HorizontalAlignment = xlRight
    End With
       
    With Base.Offset(R).Range("B2")
        .value = df
        .HorizontalAlignment = xlLeft
    End With
    
    Base.Offset(R).Range("A1:B3").Font.size = 12
    
    Base.Offset(R + 2).Range("D1:F1") = Array("  P(lower)", "  P(upper)", "  Chi-square")
    Base.Offset(R + 2).Range("D1:E6").HorizontalAlignment = xlCenter
    Base.Offset(R + 2).Range("F1").HorizontalAlignment = xlLeft
    
    SetBaseDisplay = 0#
    
    Base.Range("B1").value = Base.Range("B1").value + 1 'Counter
    Base.Range("B1").NumberFormat = ";;;"
    
    Top = 20# + Base.Top
    Left = 15#
    Width = 700#
    Height = 0.34 * Width
    
    MaxChisq = Application.RoundUp(Application.ChiInv(0.01, df), 0)

    yBase = Top + Height
    ResUnit = 0.05
    MaxDensity = 0
    For Chisq = 0.001 To MaxChisq Step 0.01
        If MaxChisq < 0# Then Exit Function

        ProbDensity = DensityFcn(Chisq, df, Base)
        If ProbDensity < MaxDensity Then Exit For
        MaxDensity = ProbDensity
    Next Chisq
    If df = 1 Then MaxDensity = 2#
    SetBaseDisplay = MaxDensity
    
   
    'outline
    With ActiveSheet.Shapes.BuildFreeform(msoEditingAuto, Left + Width + 1, yBase)
        For Chisq = MaxChisq To 0 Step -1
            'tick marks
            LeftChisq = Left + Width * Chisq / MaxChisq
            .AddNodes msoSegmentLine, msoEditingAuto, LeftChisq, yBase
            .AddNodes msoSegmentLine, msoEditingAuto, LeftChisq, yBase + 4
            .AddNodes msoSegmentLine, msoEditingAuto, LeftChisq, yBase
            'axis labels
            SetBox Application.Text(Chisq, "0"), LeftChisq, yBase, 3, 10, False
        Next Chisq
        
        'axis labels
        SetBox "f(Chisq)", Left, yBase - Height - 15, 0, 10, False
        SetBox "Chisq", 15, yBase, 12, 10, False
        .AddNodes msoSegmentLine, msoEditingAuto, Left, yBase
        If df <= 2 Then
            .AddNodes msoSegmentLine, msoEditingAuto, Left, yBase - Height
            If df = 1 Then
                .AddNodes msoSegmentLine, msoEditingAuto, Left + Width * 0.025 / MaxChisq, yBase - Height
                .AddNodes msoSegmentLine, msoEditingAuto, Left + Width * 0.025 / MaxChisq, yBase - Height + 10
            End If
        End If
               
         For Chisq = 0.025 To MaxChisq Step ResUnit
            X = Left + Width * Chisq / MaxChisq
            ProbDensity = DensityFcn(Chisq, df, Base)
            Y1 = Height * (ProbDensity / MaxDensity)
            Y = yBase - Y1
            If Y1 < 238 Then .AddNodes msoSegmentLine, msoEditingAuto, X, Y
        Next Chisq
        Set sh2 = .ConvertToShape
        With sh2.Fill
            .Visible = msoTrue
            .Solid
            .ForeColor.RGB = RGB(248, 248, 248)
            .Transparency = 0#
        End With
        sh2.Placement = xlFreeFloating
        SetLine sh2
        Set sh2 = Nothing
    End With
        
    If df = 1 Then
        Set df1Fill = ActiveSheet.Shapes.AddLine(Left, yBase - Height, Left + Width * 0.025 / MaxChisq - 0.6, yBase - Height)
        With df1Fill
            .Placement = xlFreeFloating
            With .Line
                .Weight = 2
                .DashStyle = msoLineSolid
                .Style = msoLineSingle
                .Transparency = 0#
                .Visible = msoTrue
                .ForeColor.RGB = RGB(255, 255, 255)
                .BackColor.RGB = RGB(255, 255, 255)
            End With
            Set df1Fill = Nothing
        End With
    End If
   
    Set LeftAxis = ActiveSheet.Shapes.AddLine(Left, yBase, Left, yBase - Height)
    With LeftAxis
        .Placement = xlFreeFloating
        SetLine LeftAxis
        Set LeftAxis = Nothing
    End With
    Set LeftAxis = Nothing
End Function

Sub Chidist()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler

    Dim Base As Range
    Dim Top As Double
    Dim Left As Double
    Dim Height As Double
    Dim Width As Double
    Dim CalcType As Integer '\ 1= calc p, 2= calc t
    
    Dim X As Double
    Dim Y As Double
    Dim X1 As Double
    Dim p As Double
    Dim p1 As Double
    
    Dim Area As Shape
    Dim CenterLine As Shape
    
    Dim Chisq As Double
    Dim df As Double
    Dim ProbDensity As Double
    Static MaxDensity As Double
    Dim yBase As Double
    Dim BoxOffset As Double
    Dim ResUnit As Double
    Dim PlotQ As Boolean
    
    Dim BaseDisplay As Range
    Dim ChiInput As Double
    Dim ChiRight As Double
    Dim Rounding As Integer
    Static SaveBase As String
    
    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub
    'get and validate inputs; set CalcType
               
    If Me.buttonCalc_p.value = True Then
        If Len(Me.input_val.Text) > 0 Then UpdateInput Me.input_val
        If StopQ0("Must enter an input value", Len(Me.input_val.Text) = 0, 1006, Me.input_val) = True Then Exit Sub
        ChiInput = Eval(Me.input_val.Text)
        If ChiInput = globalErrVal Then Exit Sub
        If StopQ0("Invalid or missing input.", Err.number <> 0, 1031, Me.input_val) = True Then Exit Sub
       CalcType = 1
    Else
        If Len(Me.input_p.Text) > 0 Then UpdateInput Me.input_p
        If StopQ0("Must enter a value for p", Len(Me.input_p.Text) = 0, 1006, Me.input_p) = True Then Exit Sub
        p = Eval(Me.input_p.Text)
        If p = globalErrVal Then Exit Sub
        If StopQ0("Probability must be between 0 and 1", ValidateP(p) = False Or p = globalErrVal, 1012, Me.input_p) = True Then Exit Sub
        CalcType = 2
    End If
    
    'get df
    UpdateInput Me.input_df
    df = Application.Round(Eval(Me.input_df.Text), 0)
    If df = globalErrVal Then Exit Sub
    If StopQ0("df must be >= 1", df < 1, 1014, Me.input_df) = True Then Exit Sub
        
    'set rounding
    
    If Me.ComboBoxRounding.value = "none" Then
        Rounding = 16
    Else
        Rounding = GetRounding(Me.ComboBoxRounding.value)
    End If
    
    If CalcType = 1 Then
        ChiInput = Application.Round(ChiInput, Rounding)
        p = Application.Chidist(ChiInput, df)
    Else
        ChiInput = Application.ChiInv(p, df)
        ChiInput = Application.Round(ChiInput, Rounding)
    End If
    
    PlotQ = True
    
    StartProc Me
    
    If MakeNewOutputSheet() = False Then Exit Sub
    
    If Me.chkOverlay = False Then
        Set Base = Range("A" & Format(ActiveCell.Row))
        SaveBase = Base.Address
        SaveBase2 = SaveBase
        MaxDensity = SetBaseDisplay(Base, df)
    Else
        Set Base = Range(SaveBase)
    End If
    
    Top = 20# + Base.Top
    Left = 15#
    Width = 700#
    Height = 0.34 * Width

    yBase = Top + Height
    ResUnit = 0.05
   
    Set BaseDisplay = Base.Range("A1")
    

    ChiRight = ChiInput
    If ChiInput > MaxChisq Then PlotQ = False Else PlotQ = True
        
    If Me.chkShowPoints.value = True Then BoxOffset = 20 Else BoxOffset = 0

'right
    If PlotQ = True Then
        With ActiveSheet.Shapes.BuildFreeform(msoEditingAuto, Left + Width + 1, yBase)
            .AddNodes msoSegmentLine, msoEditingAuto, Left + Width, yBase
            .AddNodes msoSegmentLine, msoEditingAuto, Left + Width * ChiRight / MaxChisq, yBase
            .AddNodes msoSegmentLine, msoEditingAuto, Left + Width * ChiRight / MaxChisq, yBase + BoxOffset
            For Chisq = ChiRight To MaxChisq Step ResUnit
                X = Left + Width * Chisq / MaxChisq
                ProbDensity = DensityFcn(Chisq, df, Base)
                Y = yBase - Height * (ProbDensity / MaxDensity)
                .AddNodes msoSegmentLine, msoEditingAuto, X, Y
            Next Chisq
            Set Area = .ConvertToShape
        End With
        Area.Placement = xlFreeFloating
        SetFill Area, Me
        SetLine Area
        Set Area = Nothing
    End If
        
    'values
     DisplayValue ChiInput, p, Base, Left + Width * ChiRight / MaxChisq, yBase

    EndProc Base
    Base.Range("F27").Offset(Base.Range("B1") - 2).Select

    Exit Sub
    
MainErrorHandler:
    If errcheck("Chi-square distribution ") = vbYes Then Exit Sub Else Resume
End Sub

Attribute VB_Name = "frmDist_F"
Attribute VB_Base = "0{F40C2A57-B526-4CAD-9F91-0045F3ED2C0C}{A174D580-159E-4BE8-B7FF-87A91C55F6C6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'''MegaStat|fffd| Fdist module |fffd|2005 by J. B. Orris
'frmFdist

'*** add box for max F and Chisq
'     default: auto
'     change disables overlay

Option Explicit
Option Base 1
Dim MaxF As Double
Dim SaveBase2 As String

Private Function DensityFcn(F As Double, df1 As Double, df2 As Double) As Double
    Dim C As Double
    Dim g1 As Double
    
    C = Gamma((df1 + df2) / 2) / Gamma(df1 / 2) / Gamma(df2 / 2) * (df1 / df2) ^ (df1 / 2)
    
    If F = 0 Then g1 = 0 Else g1 = (F ^ (df1 / 2 - 1))
    DensityFcn = C * g1 / (1 + (df1 / df2) * F) ^ ((df1 + df2) / 2)
    
End Function

Private Sub input_df1_Change()
    Me.chkOverlay.Enabled = False
End Sub

Private Sub input_df2_Change()
    Me.chkOverlay.Enabled = False
End Sub

Private Sub UserForm_Activate()
    With Me.ComboBoxRounding
        If .ListIndex < 0 Then
            .Clear
            .AddItem "none"
            .AddItem "2"
            .AddItem "3"
            .AddItem "4"
        End If
    End With
    
     With Me.input_p
        If .ListIndex < 0 Then
            .Clear
            .AddItem ".005"
            .AddItem ".01"
            .AddItem ".025"
            .AddItem ".05"
            .AddItem ".1"
            .AddItem ".5"
            .AddItem ".9"
            .AddItem ".95"
            .AddItem ".975"
            .AddItem ".99"
            .AddItem ".995"
        End If
    End With
    
    If Me.input_val.Visible = True Then Me.input_val.SetFocus
    If Me.input_p.Visible = True Then Me.input_p.SetFocus
    If Me.input_df1.Text = "" Then Me.input_df1.SetFocus
    
    On Error GoTo NoOutputSheet
    If ActiveWorkbook.Worksheets("Output").Range(SaveBase2).Range("E11") > 1 Then
        If globalLast = "frmDist_F" Then
            With Me
                .chkOverlay.Visible = True
                .chkOverlay.Enabled = True
                .chkOverlay.value = True
                .Label_df1.Enabled = False
                .input_df1.Enabled = False
                .Label_df2.Enabled = False
                .input_df2.Enabled = False
            End With
        Else
            With Me
                .chkOverlay.Visible = False
                .chkOverlay.Enabled = False
                .chkOverlay.value = False
                .Label_df1.Enabled = True
                .input_df1.Enabled = True
                .Label_df2.Enabled = True
                .input_df2.Enabled = True
            End With
        End If
    End If
    Exit Sub

NoOutputSheet:
    With Me.chkOverlay
        .value = False
        .Enabled = False
        .Visible = False
    End With
End Sub

Private Sub buttonClear_Click()
    ClearLast
    With Me
        .chkOverlay.value = False
        .chkOverlay.Enabled = False
        .chkOverlay.Visible = False
        .input_df1.Enabled = True
        .input_df1.value = ""
        .input_df2.Enabled = True
        .input_df2.value = ""
        .input_p.value = ".05"
        .input_val = ""
        .buttonCalc_F.value = True
        .chkShowPoints = True
        .ComboBoxRounding.ListIndex = 0
        .OptionButtonSolid = True
        .input_df1.SetFocus
    End With
End Sub

Private Sub buttonCalc_p_Click()
    With Me
        .input_val.Visible = True
        .input_val.SetFocus
        .input_p.Visible = False
        .Label_F.Visible = True
        .Label_p.Visible = False
    End With
End Sub

Private Sub buttonCalc_F_Click()
    With Me
        .input_val.Visible = False
        .input_p.Visible = True
        .input_p.SetFocus
        .Label_F.Visible = False
        .Label_p.Visible = True
    End With
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    Fdist
End Sub

Private Function GetRounding(InputStr As String) As Integer
    GetRounding = 16
    On Error Resume Next
    GetRounding = Int(Eval(InputStr))
    If GetRounding < 0 Or GetRounding > 16 Then GetRounding = 16
End Function

Private Sub buttonCancel_Click()
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    CallHelp 4236
End Sub

Private Sub chkOverlay_Click()
    With Me
        If .chkOverlay = True Then
            .Label_df1.Enabled = False
            .input_df1.Enabled = False
            .Label_df2.Enabled = False
            .input_df2.Enabled = False
        Else
            .Label_df1.Enabled = True
            .input_df1.Enabled = True
            .Label_df2.Enabled = True
            .input_df2.Enabled = True
        End If
    End With
End Sub
Private Sub input_val_DblClick(Cancel As Boolean)
    UpdateInput Me.input_val
End Sub

Private Sub Label_F_Click()
    UpdateInput Me.input_val
End Sub

Private Sub input_df1_DblClick(Cancel As Boolean)
    UpdateInput Me.input_df1
End Sub

Private Sub label_df1_Click()
    UpdateInput Me.input_df1
End Sub

Private Sub input_df2_DblClick(Cancel As Boolean)
    UpdateInput Me.input_df2
End Sub

Private Sub label_df2_Click()
    UpdateInput Me.input_df2
End Sub

Private Sub DisplayValue(F As Double, p As Double, Base As Range, LeftPos As Double, yBase As Double)
    Dim j As Integer
    Dim ValBase As Range
    Dim ColumnsOut As Object
    Dim Dec As Integer
    Dim Counter As Range
    Dim Cmt As Comment
    Dim Str As String
    Dim DecOffset As Integer
    Dim Rounding As Integer
    
    Set ValBase = Base.Range("C26")
    Set Counter = Base.Range("E11")

    With ValBase
        .Offset(Counter, 1).value = 1 - p
        .Offset(Counter, 2).value = p
        .Offset(Counter, 1).HorizontalAlignment = xlCenter
        .Offset(Counter, 2).HorizontalAlignment = xlCenter
        FormatPvalue .Offset(Counter, 1), xlNo
        FormatPvalue .Offset(Counter, 2), xlNo
        
        .Offset(Counter, 3).value = F
        .Offset(Counter, 3).NumberFormat = "0.00"
        
        Rounding = GetRounding(Me.ComboBoxRounding.value)
        If Me.ComboBoxRounding.value <> "none" And Rounding < 16 Then
            Set Cmt = .Offset(Counter, 3).AddComment
            With Cmt
                .Visible = False
                .Text Text:="Rounded to " & Application.Text(Rounding, "0") & " places."
                .Shape.Height = 14
                .Shape.Width = 86
            End With
            With .Offset(Counter, 3)
                .NumberFormat = "0." & Application.Rept("0", Rounding)
                .Font.FontStyle = "Italic"
            End With
        End If
           
        If Me.chkShowPoints.value = True Then
            Str = Application.Text(.Offset(Counter, 3).value, .Offset(Counter, 3).NumberFormat)
            
            If F >= MaxF Then
                Str = Str & " >"
                LeftPos = 700
            End If
            
            SetBox Str, LeftPos, yBase, 20, 10, True
        End If
    
        .Offset(Counter, 2).Font.Bold = True
        For Each ColumnsOut In .CurrentRegion.Columns.Offset(1, 2)
            If ColumnsOut.ColumnWidth < 7 Then ColumnsOut.ColumnWidth = 7
        Next
    End With
    
    Counter = Counter + 1
End Sub

Function SetBaseDisplay(Base As Range, df1 As Double, df2 As Double) As Double
' function returns max density

    Dim sh2 As Shape
    Dim LeftAxis As Shape
    Dim F As Double
    Dim ProbDensity As Double
    Dim yBase As Double
    Dim Xbase As Double
    Dim ResUnit As Double
    Dim X As Double
    Dim Y As Double
    
    Dim Top As Double
    Dim Left As Double
    Dim Width As Double
    Dim Height As Double
    Dim LeftF As Double
    Dim Dec As Integer
    Dim xTemp As Range
    Dim MaxDensity As Double
    Dim fxPrev As Double
    Dim Y1 As Double
    
    SetBaseDisplay = 0#
    
    Top = 20# + Base.Top
    Left = 15#
    Width = 700#
    Height = 0.34 * Width '=238
    
    If df2 = 1 Then MaxF = 20 Else MaxF = Application.RoundUp(Application.FInv(0.01, df1, df2), 0)

    yBase = Top + Height
    ResUnit = 0.05
    MaxDensity = 0
    For F = 0 To MaxF Step 0.01
        ProbDensity = DensityFcn(F, df1, df2)
        If ProbDensity < MaxDensity Then Exit For
        MaxDensity = ProbDensity
    Next F
    SetBaseDisplay = MaxDensity
    
    Base.Range("E11").value = Base.Range("E11").value + 1 'Counter
    Base.Range("E11").NumberFormat = ";;;"
    
    With Base.Offset(24).Range("A1")
        .value = "    F-distribution"
    End With
    
    With Base.Offset(24).Range("A2")
        .value = "df1 ="
        .HorizontalAlignment = xlRight
    End With
    
    With Base.Offset(24).Range("A3")
        .value = "df2 ="
        .HorizontalAlignment = xlRight
    End With
    
    With Base.Offset(24).Range("B2")
        .value = df1
        .HorizontalAlignment = xlLeft
    End With
    
    With Base.Offset(24).Range("B3")
        .value = df2
        .HorizontalAlignment = xlLeft
    End With
    
    Base.Range("D26:F26") = Array("  P(lower)", "  P(upper)", "F ")
    Base.Range("D26:E32").HorizontalAlignment = xlCenter
    Base.Range("F26:F32").HorizontalAlignment = xlRight
    
    Base.Offset(24).Range("A1:B3").Font.size = 12
    'outline
    With ActiveSheet.Shapes.BuildFreeform(msoEditingAuto, Left + Width + 1, yBase)
        For F = MaxF To 0 Step -1
            'tick marks
            LeftF = Left + Width * F / MaxF
            .AddNodes msoSegmentLine, msoEditingAuto, LeftF, yBase
            .AddNodes msoSegmentLine, msoEditingAuto, LeftF, yBase + 4
            .AddNodes msoSegmentLine, msoEditingAuto, LeftF, yBase
            'axis labels
            SetBox Application.Text(F, "0"), LeftF, yBase, 3, 10, False
        Next F
        
        'axis labels
        SetBox "f(F)", Left, yBase - Height - 15, 0, 10, False
        SetBox "F", 15, yBase, 12, 8, False
        .AddNodes msoSegmentLine, msoEditingAuto, Left, yBase
        If df1 <= 2 Then
            .AddNodes msoSegmentLine, msoEditingAuto, Left, yBase - Height
            .AddNodes msoSegmentLine, msoEditingAuto, Left + Width * 0.001 / MaxF, yBase - Height
        End If
        
        For F = 0.001 To MaxF Step ResUnit
            X = Left + Width * F / MaxF
            ProbDensity = DensityFcn(F, df1, df2)
            Y1 = Height * (ProbDensity / MaxDensity)
            Y = yBase - Y1
            If Y1 < 238 Then .AddNodes msoSegmentLine, msoEditingAuto, X, Y
        Next F
               
        Set sh2 = .ConvertToShape
        With sh2.Fill
            .Visible = msoTrue
            .Solid
            .ForeColor.RGB = RGB(248, 248, 248)
            .Transparency = 0#
        End With
        sh2.Placement = xlFreeFloating
        SetLine sh2
        
        Set LeftAxis = ActiveSheet.Shapes.AddLine(Left, yBase, Left, yBase - Height)
        With LeftAxis
            .Placement = xlFreeFloating
            SetLine LeftAxis
            Set LeftAxis = Nothing
        End With
        Set LeftAxis = Nothing
    End With
End Function

Sub Fdist()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler

    Dim Base As Range
    Dim Top As Double
    Dim Left As Double
    Dim Height As Double
    Dim Width As Double
    Dim CalcType As Integer '\ 1= calc p, 2= calc t
    
    Dim X As Double
    Dim Y As Double
    Dim X1 As Double
    Dim p As Double
    Dim p1 As Double
    
    Dim Area As Shape
    Dim CenterLine As Shape
    
    Dim F As Double
    Dim df1 As Double
    Dim df2 As Double
    Dim ProbDensity As Double
    Static MaxDensity As Double
    Dim yBase As Double
    Dim BoxOffset As Double
    Dim ResUnit As Double
    Dim PlotQ As Boolean
    
    Dim BaseDisplay As Range
    Dim FInput As Double
    Dim FRight As Double
    Dim Rounding As Integer
    Static SaveBase As String
    
    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub
    'get and validate inputs; set CalcType
               
    If Me.buttonCalc_p.value = True Then
        If Len(Me.input_val.Text) > 0 Then UpdateInput Me.input_val
        If StopQ0("Must enter an input value", Len(Me.input_val.Text) = 0, 1006, Me.input_val) = True Then Exit Sub
        FInput = Eval(Me.input_val.Text)
        If FInput = globalErrVal Then Exit Sub
        If StopQ0("Invalid or missing input.", Err.number <> 0, 1031, Me.input_val) = True Then Exit Sub
       CalcType = 1
    Else
        If Len(Me.input_p.Text) > 0 Then UpdateInput Me.input_p
        If StopQ0("Must enter a value for p", Len(Me.input_p.Text) = 0, 1006, Me.input_p) = True Then Exit Sub
        p = Eval(Me.input_p.Text)
        If p = globalErrVal Then Exit Sub
        If StopQ0("Probability must be between 0 and 1", ValidateP(p) = False Or p = globalErrVal, 1012, Me.input_p) = True Then Exit Sub
        CalcType = 2
    End If
    
    'get df
    UpdateInput Me.input_df1
    df1 = Application.Round(Eval(Me.input_df1.Text), 0)
    If df1 = globalErrVal Then Exit Sub
    If StopQ0("df must be >= 1", df1 < 1, 1014, Me.input_df1) = True Then Exit Sub

    UpdateInput Me.input_df2
    df2 = Application.Round(Eval(Me.input_df2.Text), 0)
    If df2 = globalErrVal Then Exit Sub
    If StopQ0("df must be >= 1", df2 < 1, 1014, Me.input_df2) = True Then Exit Sub
        
    'set rounding
    
    If Me.ComboBoxRounding.value = "none" Then
        Rounding = 16
    Else
        Rounding = GetRounding(Me.ComboBoxRounding.value)
    End If
    
    If CalcType = 1 Then
        FInput = Application.Round(FInput, Rounding)
        p = Application.Fdist(FInput, df1, df2)
    Else
        FInput = Application.FInv(p, df1, df2)
        FInput = Application.Round(FInput, Rounding)
    End If
    
    StartProc Me
    
    If MakeNewOutputSheet() = False Then Exit Sub
    
    If Me.chkOverlay = False Then
        Set Base = Range("A" & Format(ActiveCell.Row))
        SaveBase = Base.Address
        SaveBase2 = SaveBase
        MaxDensity = SetBaseDisplay(Base, df1, df2)
    Else
        Set Base = Range(SaveBase)
    End If
    
    Top = 20# + Base.Top
    Left = 15#
    Width = 700#
    Height = 0.34 * Width

    yBase = Top + Height
    ResUnit = 0.05
     
    Set BaseDisplay = Base.Range("A1")
    
    PlotQ = True

    FRight = FInput
    If FInput > MaxF Then PlotQ = False
    
    If Me.chkShowPoints.value = True Then BoxOffset = 20 Else BoxOffset = 0

'right
    If PlotQ = True Then
        With ActiveSheet.Shapes.BuildFreeform(msoEditingAuto, Left + Width + 1, yBase)
            .AddNodes msoSegmentLine, msoEditingAuto, Left + Width, yBase
            .AddNodes msoSegmentLine, msoEditingAuto, Left + Width * FRight / MaxF, yBase
            .AddNodes msoSegmentLine, msoEditingAuto, Left + Width * FRight / MaxF, yBase + BoxOffset
            For F = FRight To MaxF Step ResUnit
                X = Left + Width * F / MaxF
                ProbDensity = DensityFcn(F, df1, df2)
                Y = yBase - Height * (ProbDensity / MaxDensity)
                .AddNodes msoSegmentLine, msoEditingAuto, X, Y
            Next F
            Set Area = .ConvertToShape
        End With
        Area.Placement = xlFreeFloating
        SetFill Area, Me
        SetLine Area
        Set Area = Nothing
    End If
        
    'values
     DisplayValue FInput, p, Base, Left + Width * FRight / MaxF, yBase

    EndProc Base
    Base.Range("F27").Offset(Base.Range("E11") - 2).Select

    Exit Sub
    
MainErrorHandler:
    If errcheck("F-distribution ") = vbYes Then Exit Sub Else Resume
End Sub

Attribute VB_Name = "frmDist_Normal"
Attribute VB_Base = "0{09E04526-5C3B-487A-B86D-659DCA43358F}{969CDED3-E577-4A13-915A-327527263207}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'''MegaStat|fffd| Norman module |fffd|2005 by J. B. Orris
'frmNorman


Option Explicit
Option Base 1
Dim SaveBase2 As String

Private Sub chkOverlay_Click()
    With Me
        If .chkOverlay = True Then
            .ListBoxAxis.Enabled = False
            .LabelListBoxAxis.Enabled = False
        Else
            .ListBoxAxis.Enabled = True
            .LabelListBoxAxis.Enabled = True
        End If
    End With
End Sub

Private Sub UserForm_Activate()
    With Me.ComboBoxRounding
        If .ListIndex < 0 Then
            .Clear
            .AddItem "none"
            .AddItem "2"
            .AddItem "3"
            .AddItem "4"
        End If
    End With
    
     With Me.input_p
        If .ListIndex < 0 Then
            .Clear
            .AddItem ".005"
            .AddItem ".01"
            .AddItem ".025"
            .AddItem ".05"
            .AddItem ".1"
            .AddItem ".5"
            .AddItem ".9"
            .AddItem ".95"
            .AddItem ".975"
            .AddItem ".99"
            .AddItem ".995"
        End If
    End With
    
    With Me.ListBoxAxis
        If .ListIndex < 0 Then
            .Clear
            .AddItem "z"
            .AddItem "X"
            .AddItem "none"
        End If
    End With
    If Me.input_val.Visible = True Then Me.input_val.SetFocus
    If Me.input_p.Visible = True Then Me.input_p.SetFocus
    
    On Error GoTo NoOutputSheet
    If ActiveWorkbook.Worksheets("Output").Range(SaveBase2).Range("E11") > 1 Then
        If globalLast = "frmDist_Normal" Then
            With Me
                .chkOverlay.Visible = True
                .chkOverlay.Enabled = True
                .chkOverlay.value = True
                .ListBoxAxis.Enabled = False
                .LabelListBoxAxis.Enabled = False
            End With
        Else
            With Me
                .chkOverlay.Visible = False
                .chkOverlay.Enabled = False
                .chkOverlay.value = False
                .ListBoxAxis.Enabled = True
                .LabelListBoxAxis.Enabled = True
            End With
        End If
    End If
    Exit Sub

NoOutputSheet:
    With Me.chkOverlay
        .value = False
        .Enabled = False
        .Visible = False
    End With
End Sub

Private Sub buttonCalc_p_Click()
    With Me
        .input_val.Visible = True
        .input_val.SetFocus
        .input_p.Visible = False
        .Label_z.Visible = True
        .Label_p.Visible = False
        .buttonShadeTwoTail.Enabled = False
        If .buttonShadeTwoTail.value = True Then .buttonShadeLower = True
    End With
End Sub

Private Sub buttonCalc_z_Click()
    With Me
        .input_val.Visible = False
        .input_p.Visible = True
        .input_p.SetFocus
        .Label_z.Visible = False
        .Label_p.Visible = True
        .buttonShadeTwoTail.Enabled = True
    End With
End Sub

Private Sub Input_mean_Change()
    Dim Mean As Double
    Dim sd As Double
    
    With Me
        Mean = Eval(.input_mean.Text)
        sd = Eval(.input_sd.Text)
        .chkOverlay.value = False
        .chkOverlay.Enabled = False
        
        If .input_mean = 0# And sd = 1# Then
            .buttonCalc_z.Caption = "calculate z given P"
            .buttonCalc_p.Caption = "calculate P given z"
            .Label_z.Caption = "z"
        Else
            .buttonCalc_z.Caption = "calculate X given P"
            .buttonCalc_p.Caption = "calculate P given X"
            .Label_z.Caption = "X"
        End If
    End With
End Sub

Private Sub Input_sd_Change()
    Input_mean_Change
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    Norman
End Sub

Private Function GetRounding(InputStr As String) As Integer
    GetRounding = 16
    On Error Resume Next
    GetRounding = Int(Eval(InputStr))
    If GetRounding < 0 Or GetRounding > 16 Then GetRounding = 16
End Function

Private Sub buttonClear_Click()
    ClearLast
    With Me
        .chkOverlay.value = False
        .chkOverlay.Enabled = False
        .chkOverlay.Visible = False
        .chkCenterLine = False
        .buttonShadeLower = True
        .input_p.value = ".05"
        .input_val = ""
        .input_mean.value = "0"
        .input_sd.value = "1"
        .buttonCalc_p.value = True
        .chkShowPoints = True
        .ComboBoxRounding.ListIndex = 0
        .ListBoxAxis.ListIndex = 0
        .OptionButtonSolid = True
        .input_val.SetFocus
    End With
End Sub

Private Sub buttonCancel_Click()
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    CallHelp 4234
End Sub

Private Sub input_val_DblClick(Cancel As Boolean)
    UpdateInput Me.input_val
End Sub

Private Sub input_mean_DblClick(Cancel As Boolean)
    UpdateInput Me.input_mean
End Sub

Private Sub Label_mean_Click()
    UpdateInput Me.input_mean
End Sub

Private Sub input_sd_DblClick(Cancel As Boolean)
    UpdateInput Me.input_sd
End Sub

Private Sub Label_sd_Click()
    UpdateInput Me.input_sd
End Sub

Private Sub Label_z_Click()
    UpdateInput Me.input_val
End Sub

Private Sub DisplayValue(z As Double, X As Double, Mean As Double, Stdev As Double, XQ As Boolean, UQ As Boolean, Base As Range, InputType As Integer, LeftPos As Double, yBase As Double)
    Dim j As Integer
    Dim ValBase As Range
    Dim ColumnsOut As Object
    Dim Dec As Integer
    Dim Counter As Range
    Dim Cmt As Comment
    Dim Str As String
    Dim DecOffset As Integer
    Dim Rounding As Integer
    
    Set ValBase = Base.Range("B26")
    Set Counter = Base.Range("E11")

    With ValBase
        .Offset(Counter, 1).value = Application.NormSDist(z)
        .Offset(Counter, 2).value = 1 - ValBase.Offset(Counter, 1).value
        .Offset(Counter, 1).HorizontalAlignment = xlCenter
        .Offset(Counter, 2).HorizontalAlignment = xlCenter
        FormatPvalue .Offset(Counter, 1), xlNo
        FormatPvalue .Offset(Counter, 2), xlNo
        
        .Offset(Counter, 3).value = z
        .Offset(Counter, 3).NumberFormat = "0.00"
        
        Rounding = GetRounding(Me.ComboBoxRounding.value)
        If Me.ComboBoxRounding.value <> "none" And Rounding < 16 Then
            Set Cmt = .Offset(Counter, 3).AddComment
            With Cmt
                .Visible = False
                .Text Text:="Rounded to " & Application.Text(Rounding, "0") & " places."
                .Shape.Height = 14
                .Shape.Width = 86
            End With
            With .Offset(Counter, 3)
                .NumberFormat = "0." & Application.Rept("0", Rounding)
                .Font.FontStyle = "Italic"
            End With
        End If
    
        If InputType = 2 Then
            .Offset(Counter, 4).value = X
            .Offset(Counter, 5).value = Mean
            .Offset(Counter, 6).value = Stdev
            
            If Me.buttonCalc_p = True Then
                DecOffset = 0
                Dec = DecPlaces(.Offset(Counter, 4))
            Else
                DecOffset = 1
                Dec = DecPlaces(.Offset(Counter, 5))
            End If
            
            .Offset(Counter, 4).NumberFormat = AutoFormat(DecOffset, Dec)
            .Offset(Counter, 5).NumberFormat = AutoFormat(DecOffset, Dec)
            .Offset(Counter, 6).NumberFormat = AutoFormat(DecOffset, Dec)
        End If
        
        If Me.chkShowPoints.value = True Then
            If Me.ListBoxAxis = "z" Or Me.ListBoxAxis = "none" Or (Mean = 0 And Stdev = 1) Then
                Str = Application.Text(.Offset(Counter, 3).value, .Offset(Counter, 3).NumberFormat)
            Else
                Str = Application.Text(.Offset(Counter, 4).value, .Offset(Counter, 4).NumberFormat)
            End If
            
            If z <= -3.5 Then
                Str = "< " & Str
                LeftPos = 20
            End If
            If z >= 3.5 Then
                Str = Str & " >"
                LeftPos = 700
            End If
            
            SetBox Str, LeftPos, yBase, 20, 10, True
        End If
    
        If UQ = True Then .Offset(Counter, 2).Font.Bold = True Else .Offset(Counter, 1).Font.Bold = True
        .CurrentRegion.Columns.Offset(1, 2).AutoFit
        For Each ColumnsOut In .CurrentRegion.Columns.Offset(1, 2)
            If ColumnsOut.ColumnWidth < 7 Then ColumnsOut.ColumnWidth = 7
        Next
    End With
    
    Counter = Counter + 1
End Sub

Sub SetBaseDisplay(Base As Range, Mean As Double, Stdev As Double)

    Dim sh2 As Shape
    Dim LeftAxis As Shape
    Dim z As Double
    Dim Out As Double
    Dim C As Double
    Dim yBase As Double
    Dim Xbase As Double
    Dim ResUnit As Double
    Dim X As Double
    Dim Y As Double
    
    Dim Top As Double
    Dim Left As Double
    Dim Width As Double
    Dim Height As Double
    Dim LeftZ As Double
    Dim Str As String
    Dim Fmt As String
    Dim Dec As Integer
    Dim xTemp As Range
        
    Top = 20# + Base.Top
    Left = 15#
    Width = 700#
    Height = 0.34 * Width

    yBase = Top + Height
    ResUnit = 0.1
    
    C = 1 / Sqr(2 * (Application.Pi()))
    
    Base.Range("E11").value = Base.Range("E11").value + 1 'Counter
    Base.Range("E11").NumberFormat = ";;;"
    
    With Base.Offset(24).Range("A1")
        .value = "    Normal distribution"
        .Font.size = 12
    End With
    
    Base.Range("C26:E26") = Array("  P(lower)", "  P(upper)", "z ")
    If Mean <> 0# Or Stdev <> 1# Then Base.Range("F26:h26") = Array("X ", "mean", "std.dev")
    Base.Range("C26:D32").HorizontalAlignment = xlCenter
    Base.Range("E26:H32").HorizontalAlignment = xlRight
    
    'determine formatting
    If Me.ListBoxAxis.value = "X" Then
        Set xTemp = Base.Range("E11").Offset(1)
        xTemp.value = Mean + z * Stdev
        Dec = DecPlaces(xTemp)
        If Me.buttonCalc_p = True Then Fmt = AutoFormat(0, Dec) Else Fmt = AutoFormat(1, Dec)
        xTemp.ClearContents
        Set xTemp = Nothing
    Else
        Fmt = "0"
    End If
    
    'outline
    With ActiveSheet.Shapes.BuildFreeform(msoEditingAuto, Left + Width, yBase)
        For z = 3 To -3 Step -1
            'tick marks
            LeftZ = Left + Width * (z + 3.5) / 7
            .AddNodes msoSegmentLine, msoEditingAuto, LeftZ, yBase
            .AddNodes msoSegmentLine, msoEditingAuto, LeftZ, yBase + 4
            .AddNodes msoSegmentLine, msoEditingAuto, LeftZ, yBase
                  
            'axis labels
            Str = "z"
            If Me.ListBoxAxis.value <> "none" Then
                If Me.ListBoxAxis.value = "X" Then
                    Out = Mean + z * Stdev
                    Str = "X"
                Else
                    Out = z
                    Str = "z"
                End If
                SetBox Application.Text(Out, Fmt), LeftZ, yBase, 3, 10, False
            End If
        Next z
       .AddNodes msoSegmentLine, msoEditingAuto, Left, yBase
        'axis labels
        SetBox "f(" & Str & ")", Left, yBase - Height - 15, 0, 10, False
        SetBox Str, 10, yBase, 3, 10, False

        For z = -3.5 To 3.51 Step ResUnit
            X = Left + Width * (z + 3.5) / 7
            Y = yBase - Height * (NormalDensityFcn(z) / C)
            .AddNodes msoSegmentLine, msoEditingAuto, X, Y
        Next z
               
        Set sh2 = .ConvertToShape
        With sh2.Fill
            .Visible = msoTrue
            .Solid
            .ForeColor.RGB = RGB(248, 248, 248)
            .Transparency = 0#
        End With
        sh2.Placement = xlFreeFloating
        SetLine sh2
        
        Set LeftAxis = ActiveSheet.Shapes.AddLine(Left, yBase, Left, yBase - Height)
        With LeftAxis
            .Placement = xlFreeFloating
            SetLine LeftAxis
            Set LeftAxis = Nothing
        End With
        Set LeftAxis = Nothing
    End With
End Sub


Sub Norman()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler

    Dim Base As Range
    Dim Top As Double
    Dim Left As Double
    Dim Height As Double
    Dim Width As Double
    Dim CalcType As Integer '\ 1= calc p, 2= calc x
    Dim InputType As Integer '\normal: 1 = input z, 2 = input X, calc z
    
    Dim X As Double
    Dim Y As Double
    Dim X1 As Double
    Dim p As Double
    Dim Mean As Double
    Dim Stdev As Double
    
    Dim Area As Shape
    Dim CenterLine As Shape
    
    Dim z As Double
    Dim C As Double
    Dim yBase As Double
    Dim BoxOffset As Double
    Dim ResUnit As Double
    Dim zLeft As Double
    Dim zRight As Double
    Dim DisplayLeft As Boolean
    Dim DisplayRight As Boolean
    Dim PlotQ As Boolean
    
    Dim BaseDisplay As Range
    Dim Xinput As Double
    Dim XQ As Boolean
    Dim zInput As Double
    Dim Rounding As Integer
    Static SaveBase As String
    
    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub
    'get and validate inputs; set CalcType
    InputType = 0
               
    If Me.buttonCalc_p.value = True Then
        If Len(Me.input_val.Text) > 0 Then UpdateInput Me.input_val
        If StopQ0("Must enter an input value", Len(Me.input_val.Text) = 0, 1006, Me.input_val) = True Then Exit Sub
        X = Eval(Me.input_val.Text)
        If X = globalErrVal Then Exit Sub
        If StopQ0("Invalid or missing input.", Err.number <> 0, 1031, Me.input_val) = True Then Exit Sub
       CalcType = 1
    Else
        If Len(Me.input_p.Text) > 0 Then UpdateInput Me.input_p
        If StopQ0("Must enter a value for p", Len(Me.input_p.Text) = 0, 1006, Me.input_p) = True Then Exit Sub
        p = Eval(Me.input_p.Text)
        If p = globalErrVal Then Exit Sub
        If StopQ0("Probability must be between 0 and 1", ValidateP(p) = False Or p = globalErrVal, 1012, Me.input_p) = True Then Exit Sub
        CalcType = 2
    End If
    
    UpdateInput Me.input_mean
    Mean = Eval(Me.input_mean.Text)
    If Mean = globalErrVal Then Exit Sub
    If StopQ0("Invalid or missing input.", Err.number <> 0, 1031, Me.input_mean) = True Then Exit Sub

    UpdateInput Me.input_sd
    Stdev = Eval(Me.input_sd.Text)
    If Stdev = globalErrVal Then Exit Sub
    If StopQ0("Input value cannot be 0 or negative", Stdev < 0, 1011, Me.input_sd) = True Then Exit Sub

    If Mean = 0# And Stdev = 1# Then InputType = 1 Else InputType = 2
    
    'set rounding
    
    If Me.ComboBoxRounding.value = "none" Then
        Rounding = 16
    Else
        Rounding = GetRounding(Me.ComboBoxRounding.value)
    End If
    
    If CalcType = 1 Then
        If InputType = 2 Then
            X1 = X
            X = (X1 - Mean) / Stdev
        End If
        X = Application.Round(X, Rounding)
        p = 1 - Application.NormSDist(X)
    Else
        If Me.buttonShadeTwoTail = True Then p = p / 2#
        If Me.buttonShadeLower = True Then X = Application.NormSInv(p) Else X = Application.NormSInv(1 - p)
        X = Application.Round(X, Rounding)
        p = 1 - Application.NormSDist(X)
        If InputType = 2 Then X1 = Mean + X * Stdev
    End If
    
    StartProc Me
    
    If MakeNewOutputSheet() = False Then Exit Sub
    
    If Me.chkOverlay = False Then
        Set Base = Range("A" & Format(ActiveCell.Row))
        SaveBase = Base.Address
        SaveBase2 = SaveBase
        SetBaseDisplay Base, Mean, Stdev
    Else
        Set Base = Range(SaveBase)
    End If
    
    Top = 20# + Base.Top
    Left = 15#
    Width = 700#
    Height = 0.34 * Width

    yBase = Top + Height
    ResUnit = 0.1
   
    C = 1 / Sqr(2 * (Application.Pi()))
    
    Set BaseDisplay = Base.Range("A1")
    
    DisplayRight = False
    DisplayLeft = False
    PlotQ = True

    zInput = X

    If Me.buttonShadeUpper = True Then
        zRight = zInput
        If zInput > 3.5 Then PlotQ = False
        If zInput < -3.5 Then zLeft = -3.5
        DisplayRight = True
    End If

    If Me.buttonShadeLower = True Then
        zLeft = zInput
        If zInput < -3.5 Then PlotQ = False
        If zInput > 3.5 Then zLeft = 3.5
        DisplayLeft = True
    End If

    If Me.buttonShadeTwoTail = True Then
        zRight = zInput
        If zInput > 3.5 Then PlotQ = False
        If zInput < -3.5 Then zLeft = -3.5
        zLeft = -1# * zRight
        DisplayRight = True
        DisplayLeft = True
    End If
        
    If Me.chkShowPoints.value = True Then BoxOffset = 20 Else BoxOffset = 0

'right
    If DisplayRight = True Then
        If PlotQ = True Then
            With ActiveSheet.Shapes.BuildFreeform(msoEditingAuto, Left + Width * (zRight + 3.5) / 7, yBase)
                .AddNodes msoSegmentLine, msoEditingAuto, Left + Width, yBase
                ResUnit = ResUnit * (-1#)
                For z = 3.5 To zRight Step ResUnit
                    X = Left + Width * (z + 3.5) / 7#
                    Y = yBase - Height * (NormalDensityFcn(z) / C)
                    .AddNodes msoSegmentLine, msoEditingAuto, X, Y
                Next z
    
                'add one more point for input z
                X = Left + Width * (zRight + 3.5) / 7
                Y = yBase - Height * (NormalDensityFcn(zRight) / C)
                .AddNodes msoSegmentLine, msoEditingAuto, X, Y
    
                'axis label descender
                .AddNodes msoSegmentLine, msoEditingAuto, X, yBase + BoxOffset
                .AddNodes msoSegmentLine, msoEditingAuto, X, yBase
                Set Area = .ConvertToShape
            End With
            Area.Placement = xlFreeFloating
            SetFill Area, Me
            SetLine Area
            Set Area = Nothing
        End If
            
        'values
        If Me.buttonShadeUpper = True Or Me.buttonShadeTwoTail = True Then
            XQ = False
            If Me.buttonCalc_z = True And Stdev > 0# Then
                Xinput = Mean + zInput * Stdev
                XQ = True
            End If
            If Me.buttonCalc_p = True Then
                Xinput = X1
                XQ = True
            End If
            DisplayValue zInput, Xinput, Mean, Stdev, XQ, True, Base, InputType, X, yBase
        End If
    End If

'left
    If DisplayLeft = True Then
        If PlotQ = True Then
            With ActiveSheet.Shapes.BuildFreeform(msoEditingAuto, Left + Width * (zLeft + 3.5) / 7, yBase)
                .AddNodes msoSegmentLine, msoEditingAuto, Left, yBase
        
                ResUnit = Abs(ResUnit)
                For z = -3.5 To zLeft Step ResUnit
                    X = Left + Width * (z + 3.5) / 7
                    Y = yBase - Height * (NormalDensityFcn(z) / C)
                    .AddNodes msoSegmentLine, msoEditingAuto, X, Y
                Next z
                
                'add one more point for input z
                X = Left + Width * (zLeft + 3.5) / 7
                Y = yBase - Height * (NormalDensityFcn(zLeft) / C)
                .AddNodes msoSegmentLine, msoEditingAuto, X, Y
    
                'axis label
                .AddNodes msoSegmentLine, msoEditingAuto, X, yBase + BoxOffset
                .AddNodes msoSegmentLine, msoEditingAuto, X, yBase
                Set Area = .ConvertToShape
            End With
            Area.Placement = xlFreeFloating
            SetFill Area, Me
            SetLine Area
            Set Area = Nothing
        End If
        
        'values
        If Me.buttonShadeLower = True Or Me.buttonShadeTwoTail = True Then
            XQ = False
            If Me.buttonCalc_z = True And Stdev > 0# Then
                If Me.buttonShadeTwoTail = True Then
                    Xinput = Mean - zInput * Stdev
                Else
                    Xinput = Mean + zInput * Stdev
                End If
                XQ = True
            End If
            If Me.buttonCalc_p = True Then
                Xinput = X1
                XQ = True
            End If
            If Me.buttonShadeTwoTail = True Then zInput = zInput * -1#
            DisplayValue zInput, Xinput, Mean, Stdev, XQ, False, Base, InputType, X, yBase
        End If
    End If

    ' center line
    If Me.chkCenterLine = True Then
        Set CenterLine = ActiveSheet.Shapes.AddLine(Left + Width / 2, yBase, Left + Width / 2, yBase - Height)
        With CenterLine
            .Placement = xlFreeFloating
            SetLine CenterLine
            Set CenterLine = Nothing
        End With
        Set CenterLine = Nothing
    End If

    EndProc Base
    Base.Range("E27").Offset(Base.Range("E11") - 2).Select

    Exit Sub
    
MainErrorHandler:
    If errcheck("Normal distibution ") = vbYes Then Exit Sub Else Resume
End Sub

Attribute VB_Name = "frmDist_t"
Attribute VB_Base = "0{262852F2-5309-4653-ACEA-E8DEAC363761}{2B51027C-0AA9-404A-9826-54989C04C97A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'''MegaStat|fffd| Tdist module |fffd|2005 by J. B. Orris
'frmTdist

'*** help
'*** getting started
'*** check Max df and input values
'***   change gamma to gammaln
'***   change density functions to log version
'***   preview or no graphics option

'*** F, Chisq
'***   scale labels every n for large df
'***   size boxes
'***   fix F for large values


Option Explicit
Option Base 1
Dim SaveBase2 As String

Private Sub chkOverlay_Click()
    With Me
        If .chkOverlay = True Then
            .Label_df_t.Enabled = False
            .input_df_t.Enabled = False
        Else
            .Label_df_t.Enabled = True
            .input_df_t.Enabled = True
        End If
    End With
End Sub

Private Sub input_df_t_Change()
    Me.chkOverlay.Enabled = False
End Sub

Private Sub UserForm_Activate()
    With Me.ComboBoxRounding
        If .ListIndex < 0 Then
            .Clear
            .AddItem "none"
            .AddItem "2"
            .AddItem "3"
            .AddItem "4"
        End If
    End With
         With Me.input_p
        If .ListIndex < 0 Then
            .Clear
            .AddItem ".005"
            .AddItem ".01"
            .AddItem ".025"
            .AddItem ".05"
            .AddItem ".1"
            .AddItem ".5"
            .AddItem ".9"
            .AddItem ".95"
            .AddItem ".975"
            .AddItem ".99"
            .AddItem ".995"
        End If
    End With
    
    If Me.input_val.Visible = True Then Me.input_val.SetFocus
    If Me.input_p.Visible = True Then Me.input_p.SetFocus
    If Me.input_df_t.Text = "" Then Me.input_df_t.SetFocus
    
    On Error GoTo NoOutputSheet
    If ActiveWorkbook.Worksheets("Output").Range(SaveBase2).Range("E11") > 1 Then
        If globalLast = "frmDist_t" Then
            With Me
                .chkOverlay.Visible = True
                .chkOverlay.Enabled = True
                .chkOverlay.value = True
                .Label_df_t.Enabled = False
                .input_df_t.Enabled = False
            End With
        Else
            With Me
                .chkOverlay.Visible = False
                .chkOverlay.Enabled = False
                .chkOverlay.value = False
                .Label_df_t.Enabled = True
                .input_df_t.Enabled = True
            End With
        End If
    End If
    Exit Sub

NoOutputSheet:
    With Me.chkOverlay
        .value = False
        .Enabled = False
        .Visible = False
    End With
End Sub

Private Sub buttonCalc_p_Click()
    With Me
        .input_val.Visible = True
        .input_val.SetFocus
        .input_p.Visible = False
        .Label_t.Visible = True
        .Label_p.Visible = False
        .buttonShadeTwoTail.Enabled = False
        If .buttonShadeTwoTail.value = True Then .buttonShadeLower = True
    End With
End Sub

Private Sub buttonCalc_t_Click()
    With Me
        .input_val.Visible = False
        .input_p.Visible = True
        .input_p.SetFocus
        .Label_t.Visible = False
        .Label_p.Visible = True
        .buttonShadeTwoTail.Enabled = True
    End With
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    Tdist
End Sub

Private Function GetRounding(InputStr As String) As Integer
    GetRounding = 16
    On Error Resume Next
    GetRounding = Int(Eval(InputStr))
    If GetRounding < 0 Or GetRounding > 16 Then GetRounding = 16
End Function

Private Sub buttonClear_Click()
    ClearLast
    With Me
        .chkOverlay.value = False
        .chkOverlay.Enabled = False
        .chkOverlay.Visible = False
        .input_df_t.Enabled = True
        .input_df_t.value = ""
        .chkCenterLine = False
        .chkShowNormal = False
        .buttonShadeUpper = True
        .input_p.value = ".05"
        .input_val = ""
        .buttonCalc_t.value = True
        .chkShowPoints = True
        .ComboBoxRounding.ListIndex = 0
        .OptionButtonSolid = True
        .input_df_t.SetFocus
    End With
End Sub

Private Sub buttonCancel_Click()
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    CallHelp 4235
End Sub

Private Sub input_val_DblClick(Cancel As Boolean)
    UpdateInput Me.input_val
End Sub

Private Sub Label_t_Click()
    UpdateInput Me.input_val
End Sub

Private Sub input_df_t_DblClick(Cancel As Boolean)
    UpdateInput Me.input_df_t
End Sub

Private Sub label_df_t_Click()
    UpdateInput Me.input_df_t
End Sub

Private Sub DisplayValue(t As Double, p As Double, df As Double, UQ As Boolean, Base As Range, LeftPos As Double, yBase As Double)
    Dim j As Integer
    Dim ValBase As Range
    Dim ColumnsOut As Object
    Dim Dec As Integer
    Dim Counter As Range
    Dim Cmt As Comment
    Dim Str As String
    Dim DecOffset As Integer
    Dim Rounding As Integer
    Dim t1 As Double
    
    Set ValBase = Base.Range("C26")
    Set Counter = Base.Range("E11")

    With ValBase
        .Offset(Counter, 1).value = 1 - p
        .Offset(Counter, 2).value = p
        .Offset(Counter, 1).HorizontalAlignment = xlCenter
        .Offset(Counter, 2).HorizontalAlignment = xlCenter
        FormatPvalue .Offset(Counter, 1), xlNo
        FormatPvalue .Offset(Counter, 2), xlNo
        
        .Offset(Counter, 3).value = t
        .Offset(Counter, 3).NumberFormat = "0.000"
        
        Rounding = GetRounding(Me.ComboBoxRounding.value)
        If Me.ComboBoxRounding.value <> "none" And Rounding < 16 Then
            Set Cmt = .Offset(Counter, 3).AddComment
            With Cmt
                .Visible = False
                .Text Text:="Rounded to " & Application.Text(Rounding, "0") & " places."
                .Shape.Height = 14
                .Shape.Width = 86
            End With
            With .Offset(Counter, 3)
                .NumberFormat = "0." & Application.Rept("0", Rounding)
                .Font.FontStyle = "Italic"
            End With
        End If
           
        If Me.chkShowPoints.value = True Then
            Str = Application.Text(.Offset(Counter, 3).value, .Offset(Counter, 3).NumberFormat)
            
            If t <= -3.5 Then
                Str = "< " & Str
                LeftPos = 20
            End If
            If t >= 3.5 Then
                Str = Str & " >"
                LeftPos = 700
            End If
            
            SetBox Str, LeftPos, yBase, 20, 10, True
        End If
    
        If UQ = True Then .Offset(Counter, 2).Font.Bold = True Else .Offset(Counter, 1).Font.Bold = True
        .CurrentRegion.Columns.Offset(1, 2).AutoFit
        For Each ColumnsOut In .CurrentRegion.Columns.Offset(1, 2)
            If ColumnsOut.ColumnWidth < 7 Then ColumnsOut.ColumnWidth = 7
        Next
    End With
    
    Counter = Counter + 1
End Sub

Function SetBaseDisplay(Base As Range, df As Double) As Double

    Dim sh2 As Shape
    Dim LeftAxis As Shape
    Dim t As Double
    Dim z As Double
    Dim C As Double
    Dim ProbDensity As Double
    Dim yBase As Double
    Dim Xbase As Double
    Dim ResUnit As Double
    Dim X As Double
    Dim Y As Double
    
    Dim Top As Double
    Dim Left As Double
    Dim Width As Double
    Dim Height As Double
    Dim Leftt As Double
    Dim Dec As Integer
    Dim Ytemp As Double
        
    Top = 20# + Base.Top
    Left = 15#
    Width = 700#
    Height = 0.34 * Width

    yBase = Top + Height
    ResUnit = 0.1
    
    C = 1 / Sqr(2 * (Application.Pi()))
    
    Base.Range("E11").value = Base.Range("E11").value + 1 'Counter
    Base.Range("E11").NumberFormat = ";;;"
    
    Base.Offset(24).Range("A1").value = "    t-distribution"
    
    With Base.Offset(24).Range("A2")
        .value = "df ="
        .HorizontalAlignment = xlRight
    End With
    
    With Base.Offset(24).Range("B2")
        .value = df
        .HorizontalAlignment = xlLeft
    End With
    
    Base.Range("D26:F26") = Array("  P(lower)", "  P(upper)", "t ")
    Base.Range("D26:E32").HorizontalAlignment = xlCenter
    Base.Range("F26:F32").HorizontalAlignment = xlRight
    
    Base.Offset(24).Range("A1:B2").Font.size = 12
    
    'outline
    With ActiveSheet.Shapes.BuildFreeform(msoEditingAuto, Left + Width, yBase)
        For t = 3 To -3 Step -1
            'tick marks
            Leftt = Left + Width * (t + 3.5) / 7
            .AddNodes msoSegmentLine, msoEditingAuto, Leftt, yBase
            .AddNodes msoSegmentLine, msoEditingAuto, Leftt, yBase + 4
            .AddNodes msoSegmentLine, msoEditingAuto, Leftt, yBase
                  
            'axis labels
            SetBox Application.Text(t, "0"), Leftt, yBase, 3, 10, False
        Next t
        'axis end label
       .AddNodes msoSegmentLine, msoEditingAuto, Left, yBase
        SetBox "t", 10, yBase, 3, 10, False
        SetBox "f(t)", Left, yBase - Height - 15, 0, 10, False
        
        SetBaseDisplay = 0#
        For t = -3.5 To 3.51 Step ResUnit
            X = Left + Width * (t + 3.5) / 7
            ProbDensity = DensityFcn(t, df)
            Ytemp = Height * (ProbDensity / C)
            Y = yBase - Ytemp
            If Ytemp > SetBaseDisplay Then SetBaseDisplay = Ytemp
            .AddNodes msoSegmentLine, msoEditingAuto, X, Y
        Next t
               
        Set sh2 = .ConvertToShape
        With sh2.Fill
            .Visible = msoTrue
            .Solid
'            .ForeColor.SchemeColor = 9
            .ForeColor.RGB = RGB(248, 248, 248)
            .Transparency = 0#
        End With
        sh2.Placement = xlFreeFloating
        SetLine sh2
        
        Set LeftAxis = ActiveSheet.Shapes.AddLine(Left, yBase, Left, yBase - Height)
        With LeftAxis
            .Placement = xlFreeFloating
            SetLine LeftAxis
            Set LeftAxis = Nothing
        End With
        Set LeftAxis = Nothing
    End With
End Function

Private Function DensityFcn(t As Double, df As Double) As Double
    Dim C As Double
    
    C = (1 / Sqr(df * Application.Pi())) * Gamma((df + 1) / 2) / Gamma(df / 2)
    
    DensityFcn = C * (1 + t ^ 2 / df) ^ -((df + 1) / 2)
    
End Function

Sub Tdist()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler

    Dim Base As Range
    Dim Top As Double
    Dim Left As Double
    Dim Height As Double
    Dim Width As Double
    Dim CalcType As Integer '\ 1= calc p, 2= calc t
    
    Dim X As Double
    Dim YMax As Double
    Dim Y As Double
    Dim X1 As Double
    Dim p As Double
    Dim p1 As Double
    
    Dim Area As Shape
    Dim CenterLine As Shape
    
    Dim t As Double
    Dim t1 As Double
    Dim df As Double
    Dim tInput As Double
    Dim tLeft As Double
    Dim tRight As Double
    Dim ProbDensity As Double
    Dim MaxDensity As Double
    Dim yBase As Double
    Dim BoxOffset As Double
    Dim ResUnit As Double
    Dim DisplayLeft As Boolean
    Dim DisplayRight As Boolean
    Dim PlotQ As Boolean
    Dim z As Double
    Dim C As Double
    Dim sh2 As Shape
    
    Dim BaseDisplay As Range
    Dim Rounding As Integer
    Static SaveBase As String
    
    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub
    'get and validate inputs; set CalcType
               
    If Me.buttonCalc_p.value = True Then
        If Len(Me.input_val.Text) > 0 Then UpdateInput Me.input_val
        If StopQ0("Must enter an input value", Len(Me.input_val.Text) = 0, 1006, Me.input_val) = True Then Exit Sub
        tInput = Eval(Me.input_val.Text)
        If tInput = globalErrVal Then Exit Sub
        If StopQ0("Invalid or missing input.", Err.number <> 0, 1031, Me.input_val) = True Then Exit Sub
       CalcType = 1
    Else
        If Len(Me.input_p.Text) > 0 Then UpdateInput Me.input_p
        If StopQ0("Must enter a value for p", Len(Me.input_p.Text) = 0, 1006, Me.input_p) = True Then Exit Sub
        p = Eval(Me.input_p.Text)
        If p = globalErrVal Then Exit Sub
        If StopQ0("Probability must be between 0 and 1", ValidateP(p) = False Or p = globalErrVal, 1012, Me.input_p) = True Then Exit Sub
        CalcType = 2
    End If
    
    'get df
    UpdateInput Me.input_df_t
    df = Application.Round(Eval(Me.input_df_t.Text), 0)
    If df = globalErrVal Then Exit Sub
    If StopQ0("df must be >= 1", df < 1, 1014, Me.input_df_t) = True Then Exit Sub
                
    'set rounding
    If Me.ComboBoxRounding.value = "none" Then
        Rounding = 16
    Else
        Rounding = GetRounding(Me.ComboBoxRounding.value)
    End If
    
    If CalcType = 1 Then
        tInput = Application.Round(tInput, Rounding)
        p = Application.Tdist(Abs(tInput), df, 1)
        If tInput < 0 Then p = 1 - p
    Else
        If Me.buttonShadeTwoTail = True Then p = p / 2#

        If p > 0.5 Then p1 = 1 - p Else p1 = p
        If Me.buttonShadeLower = False Then tInput = Application.TInv(p1 * 2, df) Else tInput = -1# * Application.TInv(p1 * 2, df)
        If p > 0.5 Then tInput = -1 * tInput
        'round calculated x and calculate p with rounded value
        tInput = Application.Round(tInput, Rounding)
        If tInput < 0 Then t1 = -1 * tInput Else t1 = tInput
        p = Application.Tdist(t1, df, 1)
        If Me.buttonShadeLower = True Then p = 1 - p
    End If
    
    StartProc Me
    
    If MakeNewOutputSheet() = False Then Exit Sub
    
    If Me.chkOverlay = False Then
        Set Base = Range("A" & Format(ActiveCell.Row))
        SaveBase = Base.Address
        SaveBase2 = SaveBase
        YMax = SetBaseDisplay(Base, df)
    Else
        Set Base = Range(SaveBase)
    End If
    
    Top = 20# + Base.Top
    Left = 15#
    Width = 700#
    Height = 0.34 * Width
    MaxDensity = 1 / Sqr(2 * (Application.Pi()))
    
    yBase = Top + Height
    ResUnit = 0.1
   
    Set BaseDisplay = Base.Range("A1")
    
    DisplayRight = False
    DisplayLeft = False
    PlotQ = True

    If Me.buttonShadeUpper = True Then
        tRight = tInput
        If tInput > 3.5 Then PlotQ = False
        If tInput < -3.5 Then tRight = -3.5
        DisplayRight = True
    End If

    If Me.buttonShadeLower = True Then
        tLeft = tInput
        If tInput < -3.5 Then PlotQ = False
        If tInput > 3.5 Then tLeft = 3.5
        DisplayLeft = True
    End If

    If Me.buttonShadeTwoTail = True Then
        tRight = tInput
        If tInput > 3.5 Then PlotQ = False
        If tInput < -3.5 Then tLeft = -3.5
        tLeft = -1# * tRight
        DisplayRight = True
        DisplayLeft = True
    End If
        
    If Me.chkShowPoints.value = True Then BoxOffset = 20 Else BoxOffset = 0

'right
    If DisplayRight = True Then
        If PlotQ = True Then
            With ActiveSheet.Shapes.BuildFreeform(msoEditingAuto, Left + Width * (tRight + 3.5) / 7, yBase)
                .AddNodes msoSegmentLine, msoEditingAuto, Left + Width, yBase
                ResUnit = ResUnit * (-1#)
                For t = 3.5 To tRight Step ResUnit
                    X = Left + Width * (t + 3.5) / 7#
                    ProbDensity = DensityFcn(t, df)
                    Y = yBase - Height * (ProbDensity / MaxDensity)
                    .AddNodes msoSegmentLine, msoEditingAuto, X, Y
                Next t
    
                'add one more point for input t
                X = Left + Width * (tRight + 3.5) / 7
                ProbDensity = DensityFcn(tRight, df)
                Y = yBase - Height * (ProbDensity / MaxDensity)
                .AddNodes msoSegmentLine, msoEditingAuto, X, Y
    
                'axis label descender
                .AddNodes msoSegmentLine, msoEditingAuto, X, yBase + BoxOffset
                .AddNodes msoSegmentLine, msoEditingAuto, X, yBase
                Set Area = .ConvertToShape
            End With
            Area.Placement = xlFreeFloating
            SetFill Area, Me
            SetLine Area
            Set Area = Nothing
        End If
            
        'values
        DisplayValue tInput, p, df, True, Base, X, yBase
    End If

'left
    If DisplayLeft = True Then
        If PlotQ = True Then
            With ActiveSheet.Shapes.BuildFreeform(msoEditingAuto, Left + Width * (tLeft + 3.5) / 7, yBase)
                .AddNodes msoSegmentLine, msoEditingAuto, Left, yBase
        
                ResUnit = Abs(ResUnit)
                For t = -3.5 To tLeft Step ResUnit
                    X = Left + Width * (t + 3.5) / 7
                    ProbDensity = DensityFcn(t, df)
                    Y = yBase - Height * (ProbDensity / MaxDensity)
                    .AddNodes msoSegmentLine, msoEditingAuto, X, Y
                Next t
                
                'add one more point for input t
                X = Left + Width * (tLeft + 3.5) / 7
                ProbDensity = DensityFcn(tLeft, df)
                Y = yBase - Height * (ProbDensity / MaxDensity)
                .AddNodes msoSegmentLine, msoEditingAuto, X, Y
    
                'axis label
                .AddNodes msoSegmentLine, msoEditingAuto, X, yBase + BoxOffset
                .AddNodes msoSegmentLine, msoEditingAuto, X, yBase
                Set Area = .ConvertToShape
            End With
            Area.Placement = xlFreeFloating
            SetFill Area, Me
            SetLine Area
            Set Area = Nothing
        End If
        
        'values
        If Me.buttonShadeTwoTail = True Then
            tInput = tInput * -1#
            p = 1 - p
        End If
        DisplayValue tInput, p, df, False, Base, X, yBase
    End If

    ' center line
    If Me.chkCenterLine = True Then
        Set CenterLine = ActiveSheet.Shapes.AddLine(Left + Width / 2, yBase, Left + Width / 2, yBase - YMax)
        With CenterLine
            .Placement = xlFreeFloating
            SetLine CenterLine
            Set CenterLine = Nothing
        End With
        Set CenterLine = Nothing
    End If
    
    'overlay normal
    If Me.chkShowNormal = True Then
        Base.Offset(24).Range("M1").value = "(dashed line shows normal curve)"
    
        C = 1 / Sqr(2 * (Application.Pi()))
        With ActiveSheet.Shapes.BuildFreeform(msoEditingCorner, Left + Width - 5, yBase)
            For z = 3.5 To -3.5 Step -0.1
                X = Left + Width * (z + 3.5) / 7
                ProbDensity = NormalDensityFcn(z)
                Y = yBase - Height * (ProbDensity / C)
                .AddNodes msoSegmentCurve, msoEditingCorner, X, Y
            Next z
                   
            Set sh2 = .ConvertToShape
        End With
        With sh2.Fill
            .Visible = msoTrue
            .Solid
            .BackColor.RGB = RGB(255, 0, 0)
            .ForeColor.RGB = RGB(255, 255, 255)
            .Transparency = 1
        End With
        sh2.Placement = xlFreeFloating
        SetLine sh2
        sh2.Line.DashStyle = msoLineDash
        sh2.Line.Weight = 0.5
        Set sh2 = Nothing
    End If

    EndProc Base
    Base.Range("F27").Offset(Base.Range("E11") - 2).Select

    Exit Sub
    
MainErrorHandler:
    If errcheck("t-distribution ") = vbYes Then Exit Sub Else Resume
End Sub

Attribute VB_Name = "frmFPC"
Attribute VB_Base = "0{6B8BFE70-F7AB-41AC-A30B-0FE7EE7EC41E}{03AAD107-0EF2-4EE5-91FE-0EEC0F34AC83}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'''MegaStat|fffd| Factorial/Permutation/Combination module |fffd|2005 by J. B. Orris
'frmFPC

Option Explicit

Private Sub UserForm_Activate()
    TabStrip1_Change
    Me.Input_n.SetFocus
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    FPC "sheet"
End Sub

Private Sub buttonClear_Click()
    Me.Hide
    Unload Me
    OpenUserForm "FPC"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then Me.Input_n.SetFocus
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    CallHelp 4210
End Sub

Private Sub buttonCalc_Click()
    FPC "userform"
End Sub

Private Sub Input_n_Change()
    Me.OutputBox1.Text = ""
End Sub

Private Sub input_r_Change()
    Me.OutputBox1.Text = ""
End Sub

Private Sub input_n_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        FPC "userform"
        KeyCode = 0
        Me.buttonOK.SetFocus
    End If
End Sub

Private Sub input_r_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        FPC "userform"
        KeyCode = 0
        Me.buttonOK.SetFocus
    End If
End Sub

Private Sub TabStrip1_Change()
    Select Case Me.TabStrip1.SelectedItem.Index
        Case 0 'F
            Me.input_r.Visible = False
            Me.label_r.Visible = False
        Case 1, 2
            Me.input_r.Visible = True
            Me.label_r.Visible = True
    End Select
End Sub
Private Sub label_n_Click()
    LabelClick
End Sub

Private Sub label_r_Click()
    LabelClick
End Sub

Private Sub input_n_DblClick(Cancel As Boolean)
    LabelClick
End Sub

Private Sub input_r_DblClick(Cancel As Boolean)
    LabelClick
End Sub

Private Sub LabelClick()
    Dim n As Double
    Dim R As Double
    
    n = Eval(Me.Input_n.Text)
    If n <> globalErrVal Then Me.Input_n.Text = Str(n)
    
    R = Eval(Me.input_r.Text)
    If R <> globalErrVal Then Me.input_r.Text = Str(R)
    
End Sub

Private Sub TabStrip1_Click(ByVal Index As Long)
    TabStrip1_Change
    Me.Input_n.SetFocus
    Me.OutputBox1.Text = ""
    Me.TabStrip1.value = Me.TabStrip1.SelectedItem.Index
End Sub

Sub FPC(OutputType As String)
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler
    Dim i As Integer
    Dim Base As Range
    Dim n As Double
    Dim R As Double
    Dim ans As Variant
    Dim ln_ans As Double
    Dim log_ans As Double
    Dim Fmt As String
    Dim characteristic As Double
    Dim mantissa As Double
    
    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub
   
    'validation
    n = Eval(Me.Input_n.Text)
    If n = globalErrVal Then Exit Sub
    If StopQ0("Invalid or missing n.", n < 0, 1009, Me.Input_n) = True Then Exit Sub

    If Me.TabStrip1.value >= 1 Then
        R = Eval(Me.input_r.Text)
        If R = globalErrVal Then Exit Sub
        If StopQ0("Invalid or missing r.", R < 0 Or R > n, 1010, Me.input_r) = True Then Exit Sub
    End If
    
    'computation
    Select Case Me.TabStrip1.value
        Case 0
            ln_ans = LnFact(n)
        Case 1
            ln_ans = LnPerm(n, R)
        Case 2
            ln_ans = LnComb(n, R)
    End Select
    
    ans = "Empty"
    On Error Resume Next
    ans = Exp(ln_ans)
    On Error GoTo MainErrorHandler
    If ans = "Empty" Then
        log_ans = ln_ans / Log(10)
        characteristic = Int(log_ans)
        mantissa = 10 ^ (log_ans - characteristic)
        ans = Format(mantissa, "#.#########") & "E+" & Format(characteristic, "0")
    End If
    
    'output

    Select Case OutputType
        Case "sheet"
            StartProc Me
        
            If MakeNewOutputSheet() = False Then Exit Sub
            Set Base = Range("A" & Format(ActiveCell.Row))
            SetTitle Base, "Factorial/Permutations/Combinations"
        
            Base.Range("B4:C4") = Array(n, " n")
            Base.Range("B6") = ans
            If TypeName(ans) <> "Double" Then
                Base.Range("B8") = ln_ans
            Else
                Base.Range("B8") = Log(ans)
            End If
            
            Select Case Me.TabStrip1.value
                Case 0
                    Base.Range("C6") = " n!, n factorial"
                    Base.Range("C8") = " LN(n!)"
                Case 1
                    Base.Range("B5:C5") = Array(R, " r")
                    Base.Range("C6") = " nPr, number of permutations of n things taken r at a time"
                    Base.Range("C8") = " LN(nPr)"
                Case 2
                    Base.Range("B5:C5") = Array(R, " r")
                    Base.Range("C6") = " nCr, number of combinations of n things taken r at a time"
                    Base.Range("C8") = " LN(nCr)"
            End Select
       
            On Error Resume Next
            If Base.Range("B6").value > 100000000# Then
                Base.Range("B6").NumberFormat = "0.0000E+00"
            Else
                Base.Range("B4:B6").NumberFormat = "#,##0"
            End If
            On Error GoTo MainErrorHandler
            Base.Range("B8").NumberFormat = "0.000"
            
            If Me.TabStrip1.value = 0 Then
                Base.Range("B5").EntireRow.Delete
            End If
            Base.Range("B4:B8").Columns.AutoFit
        
            EndProc Base
            
        Case "userform"
            On Error Resume Next
                If ans > 100000000# Then
                    Fmt = "0.0000E+00"
                Else
                    Fmt = "#,##0"
                End If
            On Error GoTo MainErrorHandler
            
            Me.OutputBox1.value = Application.Text(ans, Fmt)
    End Select

    Exit Sub
    
MainErrorHandler:
    If errcheck("FPC") = vbYes Then Exit Sub Else Resume
End Sub

Attribute VB_Name = "frmFreqQual"
Attribute VB_Base = "0{D8131065-A8AA-4DB4-87A3-E52CE7E390BB}{E6AA702C-B836-4A8C-BA62-3DAD0405C6DC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'''MegaStat|fffd| Frequency Distributions - Qualitative module |fffd|2005 by J. B. Orris
' frmFreqQual

Option Explicit
Option Base 1

Private Sub UserForm_Activate()
    Me.InputBox.SetFocus
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    FrequencyQual
End Sub

Private Sub buttonClear_Click()
    ClearLast
    Me.Hide
    Unload Me
    OpenUserForm "FreqQual"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then Me.InputBox.SetFocus
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    CallHelp 4120
End Sub

Private Sub InputBox_DblClick(Cancel As Boolean)
    Me.InputBox.Text = SetAddr(Me, Me.InputBox)
End Sub

Private Sub InputBox_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBox.Text = SetAddr(Me, Me.InputBox)
    End If
End Sub

Private Sub InputboxLabel_Click()
    Me.InputBox.Text = SetAddr(Me, Me.InputBox)
End Sub

Private Sub InputBox_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        Me.SpecRange.SetFocus
    End If
End Sub

Private Sub SpecRange_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        Me.InputBox.SetFocus
    End If
End Sub

Sub FrequencyQual()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler

    Dim SelectionRange As Range
    Dim InputRange As Range
    Dim Base As Range
    Dim basesave As Range
    Dim Label As Variant
    Dim Label2 As Variant
    Dim st As String
    Dim Freq As Range
    Dim Percent As Range
    Dim AxisLabels As Range
    Dim SpecRange As Range
    Dim X As Range
    Dim total As Double
    Dim nMissing As Integer
    Dim nNotValid
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    Dim l As Integer
    Dim n As Integer
    Dim Rows As Integer
    Dim rowSub As Integer
    Dim nRows As Integer
    Dim SpecRangeCol As Integer
    Dim ch As ChartObject
    Dim SpecRangeArray() As Variant
    Dim TestVal As Variant
    Dim count() As Long
    Dim histogramQ As Boolean
    
    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub
    
    'validation routines
    If ValidRange(Me.InputBox, vbYes) = False Then Exit Sub
    Set SelectionRange = Range(Me.InputBox.Text)
    
    If StopQ1("Not enough data to proceed.", SelectionRange.count <= SelectionRange.Columns.count * 2, SelectionRange, 1001, Me.InputBox) = True Then Exit Sub

    If ValidRange(Me.SpecRange, vbYes) = False Then Exit Sub
    histogramQ = Me.chk_histogram.value
    
    'end validation; if we get to here then validation is OK
        
    For l = 1 To SelectionRange.Columns.count '\ this is the main loop for columns
        
        Set InputRange = SelectionRange.Columns(l).Cells '\that's a lower case "L"
        Label = ""
 
        'check for label
        Set SpecRange = Range(Me.SpecRange.Text)
        Label = InputRange.Cells(1).Text
        nMissing = -1
        For Each X In SpecRange
            If Trim(Label) = Trim(X.Text) Then
                nMissing = 0
                If InputRange.Cells(1).Row > 1 Then
                    If IsLabel(InputRange.Cells(1).Offset(-1, 0).Cells(1)) = True Then
                        Label = InputRange.Cells(1).Offset(-1, 0).Cells(1).Text
                 Else
                        If SelectionRange.Columns.count > 1 Then Label = "#" & Str(l) Else Label = "Data"
                    End If
                Else
                    If SelectionRange.Columns.count = 1 Then Label = "Data" Else Label = "#" & Str(l)
                End If
                Exit For
            End If
        Next X
        
        StartProc Me
        If MakeNewOutputSheet() = False Then Exit Sub
        Set Base = Range("A" & Format(ActiveCell.Row))
        Set basesave = Base
        SetTitle Base, "Frequency Distribution - Qualitative"
    
        Base.Range("D5:G5").HorizontalAlignment = xlLeft
        Base.Range("C5:D5") = Array(" frequency", "percent ")
        FmtHeader1 Base.Range("B4:D5")
   
        i = 0
        For Each X In SpecRange.Columns(1).Cells
            Base.Range("B6").Offset(i) = X.Text
            i = i + 1
        Next X

        For Each X In Base.Range("B6").CurrentRegion.Columns(1).Cells
            X.value = Trim(X.value)
        Next X
        
        Base.Range("B6").CurrentRegion.Columns(1).HorizontalAlignment = xlRight
        Rows = SpecRange.Rows.count + 4
        st = Base.Offset(5, 1).Cells.Address & ":" & Base.Offset(Rows, 1).Cells.Address
        Set AxisLabels = Range(st)
        st = Base.Offset(5, 2).Cells.Address & ":" & Base.Offset(Rows, 2).Cells.Address
        Set Freq = Range(st)
        For Each X In Freq
            X.value = 0
        Next X
        st = Base.Offset(5, 3).Cells.Address & ":" & Base.Offset(Rows, 3).Cells.Address
        Set Percent = Range(st)
        nRows = SpecRange.Rows.count
        ReDim count(nRows)
        For j = 1 To nRows
            count(j) = 0
        Next j
        
        SpecRangeCol = SpecRange.Columns.count
        n = InputRange.Rows.count

        ReDim SpecRangeArray(nRows, SpecRangeCol)
        setCountArray nRows, SpecRangeCol, SpecRangeArray, SpecRange
        
        nNotValid = 0
        With InputRange
            For k = 1 To n
                TestVal = Trim(.Rows(k).Value2)
                If Len(TestVal) = 0 Then
                    nMissing = nMissing + 1
                Else
                    rowSub = frmChisq.FindSub(nRows, SpecRangeCol, TestVal, SpecRangeArray)
    
                    If rowSub > 0 Then
                        count(rowSub) = count(rowSub) + 1
                    Else
                        nNotValid = nNotValid + 1
                    End If
                End If
            Next k
        End With

        For j = 1 To nRows
            Freq.Range("A1").Offset(j - 1, 0) = count(j)
        Next j
        
        FmtBottomRow1 Base.Offset(Rows, 1).Range("A1:c1")
        total = Application.Sum(Freq)
    
        Base.Offset(Rows + 1, 2) = total
        Base.Offset(Rows + 1, 3) = 100#
        'finish table
        Base.Range("B4").value = Label
        Base.Range("B4").Font.Bold = True
            
        For i = 1 To Freq.Rows.count
            Percent(i) = Freq(i) / total * 100
        Next i
        With Base.Range("C6").CurrentRegion
            .Columns(1).HorizontalAlignment = xlCenter
            .Columns(2).NumberFormat = "0   "
            .Columns(3).NumberFormat = "0.0  "
            .Columns(1).AutoFit
            .Columns(2).ColumnWidth = 11
            .Columns(3).ColumnWidth = 10
        End With
        
        Rows = Rows + 1

        nNotValid = nNotValid + nMissing
        If nNotValid > 0 Then
            Rows = Rows + 2
            Base.Offset(Rows, 2) = nNotValid
            If nNotValid > 1 Then
                Base.Offset(Rows, 3) = "Invalid or missing data values"
            Else
                Base.Offset(Rows, 3) = "Invalid or missing data value"
            End If
        End If
    
        If histogramQ = True And total > 0 And Freq.Rows.count > 1 Then
            If MakeNewOutputSheet() = False Then Exit Sub
            Set Base = Range("A" & Format(ActiveCell.Row))
            Label2 = Label

            Set ch = ActiveSheet.ChartObjects.Add(20, Base.Range("A1").Top + 20, 335, 252)
            ch.Chart.ChartWizard Source:=Percent, Gallery:=xlColumn, HasLegend:=2
            ch.Placement = xlMove

            With ch.Chart
                .HasTitle = True
                .ChartTitle.Text = "Histogram"
                SetFont .ChartTitle
                SetFont .ChartArea
                .PlotArea.Border.LineStyle = xlNone
                .PlotArea.Interior.ColorIndex = xlNone

                With .SeriesCollection(1)
                    .XValues = AxisLabels
                    .Interior.ColorIndex = 19
                    .Interior.Pattern = xlLightUp
                    .Border.Weight = xlHairline
                End With

                With .Axes(xlCategory, xlPrimary)
                    .HasTitle = True
                    .AxisTitle.Text = Label2
                    SetFont .AxisTitle
                    SetFont .TickLabels
                    .MajorTickMark = xlNone
                    .MinorTickMark = xlNone
                    .HasMajorGridlines = False
                    .HasMinorGridlines = False
'                    .TickLabels.Orientation = 45
                End With

                With .Axes(xlValue, xlPrimary)
                    .HasTitle = True
                    .AxisTitle.Text = "Percent"
                    SetFont .AxisTitle
                    SetFont .TickLabels
                    .MajorTickMark = xlTickMarkOutside
                    .MinorTickMark = xlNone
                    .HasMajorGridlines = False
                    .HasMinorGridlines = False
                    .TickLabels.NumberFormat = "0"
                End With

                .ChartGroups(1).GapWidth = 40
            End With

            ch.BottomRightCell.Offset(1, -1) = " "
            ch.BottomRightCell.Offset(1, -1).Select
        End If
        
        Set AxisLabels = Nothing
        Set Freq = Nothing
        Set Percent = Nothing
     
    Next l
    EndProc basesave
    Exit Sub
       
MainErrorHandler:
    If errcheck("Frequency Distributions - Qualitative") = vbYes Then Exit Sub Else Resume
End Sub
Attribute VB_Name = "frmFreqQuant"
Attribute VB_Base = "0{601D9A43-0DC7-4989-AF13-2969DF89C4A6}{BA5FF177-07B9-472B-9DC4-461A9C7BE34E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'''MegaStat|fffd| Frequency Distributions - Quantitative module |fffd|2005 by J. B. Orris
' frmFreqQuant

Option Explicit
Option Base 1

Private Sub UserForm_Activate()
    Me.InputBox.SetFocus
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    FrequencyQuant
End Sub

Private Sub buttonClear_Click()
    ClearLast
    Me.Hide
    Unload Me
    OpenUserForm "FreqQuant"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then Me.InputBox.SetFocus
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    CallHelp 4110
End Sub

Private Sub InputBox_DblClick(Cancel As Boolean)
    Me.InputBox.Text = SetAddr(Me, Me.InputBox)
End Sub

Private Sub InputBox_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBox.Text = SetAddr(Me, Me.InputBox)
    End If
End Sub

Private Sub InputboxLabel_Click()
        Me.InputBox.Text = SetAddr(Me, Me.InputBox)
End Sub

Private Sub MultiPage1_Click(ByVal Index As Long)
    Me.MultiPage1.value = Index
    Select Case Index
        Case 0 ' equal
            Me.MultiPage1.Tag = "Equal"
        Case 1 ' custom
            Me.MultiPage1.Tag = "Custom"
        Case 2
            Me.MultiPage1.Tag = Me.MultiPage1.Tag
    End Select
End Sub

Function Quartile(Q As Single, CF As Range, Freq As Range, Bins As Range, total As Double, Adj As Double)
    Dim i As Integer
    Dim m As Integer
    Dim CF0 As Double
    Dim Width As Double
    
        For i = 1 To CF.Rows.count
            If CF(i) > total * Q Then
                m = i - 1
                Exit For
            End If
        Next i
        
        Width = Bins(i) - Bins(i).Offset(0, -2) + Adj
        
        If m = 0 Then CF0 = 0 Else CF0 = CF(m)
        Quartile = (Bins(i) + Adj - Width) + ((total * Q - CF0) / Freq(i)) * Width
End Function

Sub FrequencyQuant()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler

    Dim SelectionRange As Range
    Dim InputRange As Range
    Dim Base As Range
    Dim basesave As Range
    Dim Label As Variant
    Dim Label2 As Variant
    Dim binFmt As String
    Dim st As String
    Dim Dec As Integer
    Dim X As Range
    Dim Bins As Range
    Dim Freq As Range
    Dim CF As Range
    Dim Percent As Range
    Dim PercentPoly As Range
    Dim CumPercent As Range
    Dim AxisLabels As Range
    Dim SpecRange As Range
    Dim DataRange As Double
    Dim Width As Double
    Dim DataMin As Double
    Dim DataMax As Double
    Dim bin As Double
    Dim bin0 As Double
    Dim bin1 As Double
    Dim total As Double
    Dim Adj As Double
    Dim adjTop As Double
    Dim nMissing As Integer
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    Dim l As Integer
    Dim n As Integer
    Dim Rows As Integer
    Dim DRows As Integer
    Dim TickSize As Double
    Dim ch As ChartObject
    Dim OK1 As Integer
    Dim TestVal As Variant
    Dim histogramQ As Boolean
    Dim polygonQ As Boolean
    Dim ogiveQ As Boolean
    Dim RangeBinsQ As Boolean
    Dim BinRange As Range
    Dim MidPoints As Range
    Dim DecAdj As Integer
    Dim TempRange As Range
    Dim CalculateWidth As Boolean
    Dim number As Range
    Dim ConstFlag As Boolean
    Dim LowExtCount As Integer
    Dim HighExtCount As Integer
    Dim LowExt As Double
    Dim HighExt As Double
    Dim Q1 As Double
    Dim Q3 As Double
    Dim Hspread As Double
    Dim origbase As Range
    
    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub
    
    'validation routines
    
    If ValidRange(Me.InputBox, vbNo) = False Then Exit Sub
    Set SelectionRange = Range(Me.InputBox.Text)
    
    
    Set TempRange = SelectionRange
    
    If SelectionRange.Areas.count > 1 Then Set SelectionRange = SetMultipleRanges(SelectionRange, "TempSheet", frmDesc.InputBox, True)
    If SelectionRange.Range("A1") = "Error" Then
        ClearSheets
        Exit Sub
    End If

    SelectionRange.Worksheet.Activate
    
    If StopQ1("Not enough data to proceed.", SelectionRange.count <= SelectionRange.Columns.count * 2, SelectionRange, 1001, Me.InputBox) = True Then Exit Sub
    CalculateWidth = False
    Select Case Me.MultiPage1.Tag
        Case "Equal"
                If Len(Me.IntervalWidth.Text) = 0 Then
                    CalculateWidth = True
                Else
                    Width = Eval(Me.IntervalWidth.Text)
                End If
                If StopQ0("Invalid interval width.", Width < 0, 1002, Me.IntervalWidth) = True Then Exit Sub

            If LenTrim(Me.FirstInterval.Text) > 0 Then
                bin1 = Eval(Me.FirstInterval.Text)
                If StopQ0("Invalid first interval.", Err.number <> 0, 1003, Me.FirstInterval) = True Then Exit Sub
            End If
        Case "Custom"
            If ValidRange(Me.InputBinRange, vbYes) = False Then Exit Sub
            Set BinRange = Range(Me.InputBinRange.Text).Columns(1)
            RangeBinsQ = True
    End Select

    histogramQ = Me.chk_histogram
    polygonQ = Me.chk_polygon
    ogiveQ = Me.chk_ogive
    'end validation; if we get to here then validation is OK

    For l = 1 To SelectionRange.Columns.count '\ this is the main loop for columns
        If IsLabel(SelectionRange.Columns(l).Cells(1)) = True Then j = 1
        Set InputRange = SelectionRange.Columns(l).Cells '\that's a lower case "L"
        Set InputRange = InputRange.Offset(j, 0).Resize(InputRange.count - j)
        TempRange.Worksheet.Activate

        DataMin = Application.Min(InputRange)
        DataMax = Application.Max(InputRange)
        DataRange = DataMax - DataMin
        
        'determine width here if not specified
        If CalculateWidth = True Then
            ConstFlag = False
            Q1 = Application.Quartile(InputRange, 1)
            Q3 = Application.Quartile(InputRange, 3)
            Hspread = Q3 - Q1
            LowExtCount = 0
            HighExtCount = 0
            LowExt = Q1 - 3# * Hspread
            HighExt = Q3 + 3# * Hspread
            
            For Each number In InputRange.Cells
                If DataRange > 0 And IsOKnumber(number) = True Then
                    Select Case True
                        Case number < LowExt
                            LowExtCount = LowExtCount + 1
                        Case number > HighExt
                            HighExtCount = HighExtCount + 1
                    End Select
                End If
            Next number

            
            
            Width = CalcWidth(InputRange, LowExtCount, HighExtCount)
            If Width < 0 Then
                Width = Application.Max(InputRange)
                ConstFlag = True
            End If
        End If
        
        If LenTrim(Me.FirstInterval.Text) > 0 Then
            i = InStr(1, FirstInterval, ".")
            j = Len(FirstInterval)
            If i = 0 Then i = j
            Dec = j - i
        Else
            Dec = DecPlaces(InputRange)
        End If
        DecAdj = 0
        If DataMax > 0# And DataMax < 999.9999 Then DecAdj = 1
        If DataMax >= 1000 Then DecAdj = 2
        If LenTrim(Me.FirstInterval.Text) > 0 Then DecAdj = 0
        
        If Width <= 1 Then DecAdj = DecAdj - 1
        
        
        binFmt = AutoFormat(0, Dec - DecAdj)
        Label = ""
        
        'pick off label if something there but not a number
        nMissing = 0
        If IsLabel(InputRange.Cells(1)) = True Then
            Label = InputRange.Cells(1).Text
            nMissing = -1
        Else
            If InputRange.Cells(1).Row > 1 Then
                Set X = InputRange.Cells(1).Offset(-1, 0).Cells(1)
                If IsLabel(X) = True Then
                    Label = X.Text
                Else
                    If SelectionRange.Columns.count > 1 Then Label = "#" & Str(l) Else Label = "Data"
                End If
            Else
                If SelectionRange.Columns.count = 1 Then Label = "Data" Else Label = "#" & Str(l)
            End If
        End If
        
        If RangeBinsQ = True Then
            If DataMin < BinRange.Cells(1) Then
                MsgBox "Specified first interval lower limit of " & BinRange.Cells(1) & _
                     " is not small enough to include the smallest value of " & DataMin, vbExclamation + vbMsgBoxHelpButton, globalTitle, globalHelpFile, 1025
                Me.InputBinRange.SetFocus
                Exit Sub
            Else
                OK1 = vbYes
            End If
            
            For i = 1 To BinRange.Rows.count - 2
                If BinRange.Offset(i + 1, 0).Cells(1) - BinRange.Offset(i, 0).Cells(1) <= 0 Then
                    MsgBox "Each interval limit must be larger than the prior one.", vbExclamation + vbMsgBoxHelpButton, globalTitle, globalHelpFile, 1002
                    Me.InputBinRange.SetFocus
                    Exit Sub
                End If
            Next i
        Else
          On Error Resume Next
           Do
                'does the interval width look too small or too large; if so adjust
                Do While DataRange / Width <= 1 And ConstFlag = False
                    If CalculateWidth = False Then MsgBox "Interval width of " & Width & " is too large for this data range.", vbExclamation + vbMsgBoxHelpButton, globalTitle, globalHelpFile, 1023
                    Width = Width / 2
                Loop
          
                Do While DataRange / Width > 60 And ConstFlag = False
                    If CalculateWidth = False Then MsgBox "Interval width of " & Width & " is too small for this data range.", vbExclamation + vbMsgBoxHelpButton, globalTitle, globalHelpFile, 1024
                    Width = Width * 2
                Loop
                'determine first bin
                OK1 = vbNo
                If LenTrim(Me.FirstInterval.Text) = 0 Then
                    bin1 = (Fix(DataMin / Width) + 1) * Width
                    If DataMin < 0 Then bin1 = bin1 - Width
                    bin0 = bin1 - Width
                    OK1 = vbYes
                Else
                        bin0 = bin1 - Width
                        If DataMin < bin0 Then
                            MsgBox "Specified first interval limit of " & bin0 & _
                                 " is not small enough to include the smallest value of " & DataMin, vbExclamation + vbMsgBoxHelpButton, globalTitle, globalHelpFile, 1025
                            Exit Sub
                        Else
                            OK1 = vbYes
                        End If
                End If
            Loop Until OK1 = vbYes
        End If
        On Error GoTo MainErrorHandler
        
        Adj = 10 ^ -(Dec + 2)
        If Me.chk_CloseTop.value = True Then adjTop = Adj Else adjTop = 0
        bin1 = bin1 - Adj
                
        StartProc Me
        If MakeNewOutputSheet() = False Then Exit Sub
        Set Base = Range("A" & Format(ActiveCell.Row))
        If l = 1 Then Set origbase = Base
        Set basesave = Base
        
        SetTitle Base, "Frequency Distribution - Quantitative"
        
        Base.Range("B5:J5").HorizontalAlignment = xlRight
        Base.Range("B5:J5") = Array("  lower", " ", "upper", "midpoint", "width", " frequency", "percent  ", "   frequency", "percent")
        FmtHeader1 Union(Base.Range("B4:J4"), Base.Range("B5:J5"))
        With Base.Range("B5:D5")
            .value = Array()
            .Cells.Font.size = 8
            .Cells.Font.FontStyle = "Italic"
        End With
        
        Base.Range("I4") = "cumulative"
        With Base.Range("I4:J4")
            .HorizontalAlignment = xlCenterAcrossSelection
            .Borders(xlBottom).Weight = xlThin
        End With
           
        If RangeBinsQ = True Then
             ' move selected bin range to output sheet
             Rows = BinRange.Rows.count
             For j = 1 To Rows
                 Base.Offset(j + 4, 1) = BinRange.Range("A1").Offset(j - 1, 0)
                 Base.Offset(j + 4, 3) = BinRange.Range("A1").Offset(j, 0) - Adj
             Next j
             Base.Offset(j + 2, 3) = BinRange.Range("A1").Offset(Rows - 1, 0)
             Base.Offset(j + 4, 3).Clear
             Rows = Rows + 3
        Else
             Base.Range("D6") = bin1
             Base.Range("B6") = bin0
             Base.Range("B6").HorizontalAlignment = xlRight
             bin = bin1
             i = 5
             
             Do
                 bin0 = bin0 + Width
                 bin = bin + Width
                 i = i + 1
                 Base.Offset(i, 1) = bin0
                 Base.Offset(i, 3) = bin
             Loop Until bin > DataMax
             
             If Me.chk_CloseTop.value = True Then
                If Abs(bin0 - DataMax) < Adj Then
                    Base.Offset(i - 1, 3) = Base.Offset(i, 1)
                    Base.Offset(i, 1).ClearContents
                    Base.Offset(i, 3).ClearContents
                    i = i - 1
                Else
                   Base.Offset(i, 3) = Base.Offset(i, 3) + adjTop 'close top interval if req.
                End If
             End If
             Rows = i
        End If
     
        st = Base.Offset(5, 1).Cells.Address & ":" & Base.Offset(Rows + 1, 1).Cells.Address
        Set AxisLabels = Range(st)
        AxisLabels.Cells(Rows - 3) = Base.Offset(Rows, 2)
        DRows = Rows
        st = Base.Offset(5, 3).Cells.Address & ":" & Base.Offset(Rows, 3).Cells.Address
        Set Bins = Range(st)
        
        st = Base.Offset(5, 6).Cells.Address & ":" & Base.Offset(Rows, 6).Cells.Address
        Set Freq = Range(st)
        For Each X In Freq
            X = 0
        Next X
        
        st = Base.Offset(5, 7).Cells.Address & ":" & Base.Offset(Rows + 1, 7).Cells.Address
        Set Percent = Range(st)
        
        st = Base.Offset(5, 8).Cells.Address & ":" & Base.Offset(Rows, 8).Cells.Address
        Set CF = Range(st)
        
        st = Base.Offset(5, 9).Cells.Address & ":" & Base.Offset(Rows, 9).Cells.Address
        Set CumPercent = Range(st)

        Base.Offset(Bins.Rows.count + 5, 1) = Base.Offset(Bins.Rows.count + 4, 3)
        For j = 1 To Bins.Rows.count
           Base.Offset(j + 4, 5) = Base.Offset(j + 5, 1) - Base.Offset(j + 4, 1) 'widths
           Base.Offset(j + 4, 4) = (Base.Offset(j + 5, 1) + Base.Offset(j + 4, 1)) / 2 'midpoints
        Next j
           
        Freq.FormulaArray = "=FREQUENCY(" & InputRange.Address(ReferenceStyle:=xlR1C1, external:=True) & "," & Bins.Address(ReferenceStyle:=xlR1C1, external:=True) & ")"
        Freq.Copy
        Freq.PasteSpecial xlPasteValues

        nMissing = nMissing + InputRange.count - Application.count(InputRange)
        total = Application.Sum(Freq)
    
        Base.Offset(Rows + 2, 6) = total
        Base.Offset(Rows + 2, 7) = 100
        Base.Offset(Rows + 1, 1) = Base.Offset(Rows, 3)
        
        'finish table
        If total > 0 Then
            Base.Range("C6") = "<"
            
            Base.Range("H6") = Base.Range("G6") / total * 100
            Base.Range("I6") = Base.Range("G6")
            Base.Range("J6") = Base.Range("G6") / total * 100
            For i = 6 To Rows
                Base.Offset(i, 2) = "<"
                Base.Offset(i, 2).HorizontalAlignment = xlCenter
                Base.Offset(i, 7) = Base.Offset(i, 6) / total * 100
                Base.Offset(i, 8) = Base.Offset(i - 1, 8) + Base.Offset(i, 6)
                Base.Offset(i, 9) = Base.Offset(i - 1, 9) + Base.Offset(i, 7)
            Next
            If Me.chk_CloseTop.value = True Then
                Base.Offset(Rows, 2) = Chr(163)
                Base.Offset(Rows, 2).Font.Name = "Symbol"
            End If
        End If
        
        With Base.Range("C6").CurrentRegion
            .Columns("A:C").HorizontalAlignment = xlRight
            .Columns("A:E").NumberFormat = (binFmt & "  ")
            .Columns(6).NumberFormat = "0   "
            .Columns(7).NumberFormat = "0.0   "
            .Columns(8).NumberFormat = "0   "
            .Columns(9).NumberFormat = "0.0   "
            FmtBottomRow1 .Rows(Rows - 2)
            .Columns.AutoFit
        End With
        basesave.Offset(Freq.Rows.count + 5, 1).Range("A1:I1").NumberFormat = ";;;"
        basesave.Offset(Freq.Rows.count + 5, 1).EntireRow.RowHeight = 1
        Rows = Rows + 1
        If histogramQ = True Then
            For i = 1 To Bins.Rows.count
                AxisLabels(i) = "'" & Bins(i).Offset(0, -2)
            Next i
        End If

        If nMissing > 0 Then
            Rows = Rows + 2
            Base.Offset(Rows, 3) = nMissing
            Base.Offset(Rows, 4) = "missing or invalid data values"
        End If
    
        If Me.chk_median = True Then
            Rows = Rows + 3
            Base.Offset(Rows, 3) = "exact  "
            Base.Offset(Rows, 3).HorizontalAlignment = xlRight
            Base.Offset(Rows, 4) = "  interpolated"
            FmtBottomRow1 Base.Offset(Rows, 3).Range("A1:C1")
            Rows = Rows + 1
          
            Base.Offset(Rows, 3) = Application.Quartile(InputRange, 1)
            Base.Offset(Rows + 1, 3) = Application.Median(InputRange)
            Base.Offset(Rows + 2, 3) = Application.Quartile(InputRange, 3)
            Base.Offset(Rows, 3).Range("A4") = Base.Offset(Rows, 3).Range("A3") - Base.Offset(Rows, 3).Range("A1")
            
            Base.Offset(Rows, 4) = Quartile(0.25, CF, Freq, Bins, total, Adj)
            Base.Offset(Rows, 5) = "25th percentile, Q1"
            
            Rows = Rows + 1
            Base.Offset(Rows, 4) = Quartile(0.5, CF, Freq, Bins, total, Adj)
            Base.Offset(Rows, 5) = "median"
            Base.Offset(Rows, 3).Range("A1:C1").Font.Bold = True
            
            Rows = Rows + 1
            Base.Offset(Rows, 5) = "75th percentile, Q3"
            Base.Offset(Rows, 4) = Quartile(0.75, CF, Freq, Bins, total, Adj)
            
            Rows = Rows + 1
            Base.Offset(Rows, 4) = Base.Offset(Rows - 1, 4) - Base.Offset(Rows - 3, 4)
            Base.Offset(Rows, 5) = "interquartile range, Q3 - Q1"
            
            Base.Offset(Rows - 3, 3).Range("A1:B4").NumberFormat = AutoFormat(2, Dec)
            Base.Offset(Rows - 3, 3).Range("A1:A4").Columns.AutoFit
            Base.Offset(Rows - 3, 3).Range("B1:B4").Columns.ColumnWidth = 9
        End If
        basesave.Columns(1).ColumnWidth = 6
        basesave.Columns(3).ColumnWidth = 4
        
        With Base.Range("C4")
            .Font.Bold = True
            .value = "'" & Label
            .HorizontalAlignment = xlCenter
        End With
       
        If histogramQ = True And total > 0 And Freq.Rows.count > 1 Then
            If MakeNewOutputSheet() = False Then Exit Sub
            Set Base = Range("A" & Format(ActiveCell.Row))
            If RangeBinsQ = True Then
                Label2 = Label & "  (note unequal widths)"
            Else
                Label2 = Label
            End If
   
            Set ch = ActiveSheet.ChartObjects.Add(20, Base.Range("A1").Top + 20, 335, 252)
            ch.Chart.ChartWizard Source:=Percent, Gallery:=xlColumn, HasLegend:=2
            ch.Placement = xlMove

            With ch.Chart
                .HasTitle = True
                .ChartTitle.Text = "Histogram"
                SetFont .ChartTitle
                SetFont .ChartArea
                .PlotArea.Border.LineStyle = xlNone
                .PlotArea.Interior.ColorIndex = xlNone
    
                With .SeriesCollection(1)
                    .XValues = AxisLabels
                    .Interior.ColorIndex = 19
                    .Interior.Pattern = xlLightUp
                    .Border.Weight = xlHairline
                End With
                
                With .Axes(xlCategory, xlPrimary)
                    .HasTitle = True
                    .AxisTitle.Text = Label2
                    SetFont .AxisTitle
                    SetFont .TickLabels
                    .MajorTickMark = xlNone
                    .MinorTickMark = xlNone
                    .HasMajorGridlines = False
                    .HasMinorGridlines = False
                    .TickLabels.Orientation = 45
                    .TickLabels.NumberFormat = AutoFormat(0, Dec - DecAdj)
                End With
                
                With .Axes(xlValue, xlPrimary)
                    .HasTitle = True
                    .AxisTitle.Text = "Percent"
                    SetFont .AxisTitle
                    SetFont .TickLabels
                    .MajorTickMark = xlTickMarkOutside
                    .MinorTickMark = xlNone
                    .HasMajorGridlines = False
                    .HasMinorGridlines = False
                    .TickLabels.NumberFormat = "0"
                End With
                
                .ChartGroups(1).GapWidth = 0
            End With
            
            For i = 1 To Bins.Rows.count
                AxisLabels(i) = Val(AxisLabels(i))
                AxisLabels(i).NumberFormat = AutoFormat(0, Dec - DecAdj)
            Next i
            AxisLabels.Columns.AutoFit

        ch.BottomRightCell.Offset(1, -1) = " "
        ch.BottomRightCell.Offset(1, -1).Select
        End If
        
        If (polygonQ = True Or ogiveQ = True) And total > 0 And Freq.Rows.count > 1 Then
'            basesave.Rows(6).EntireRow.Insert Shift:=xlDown
            basesave.Rows(6).EntireRow.Insert Shift:=xlDown
            Set Bins = Bins.Offset(-1, 0).Resize(Bins.Rows.count + 1, 1)
            Bins.Cells(1).Range("A1:G1").NumberFormat = ";;;"
            Bins.Cells(1).Range("A1:G1").EntireRow.RowHeight = 1
            With Bins.Cells(1)
                If RangeBinsQ = True Then
                     .value = BinRange.Cells(1)
                Else
                    .value = Bins.Cells(2) - Width + Adj
                    If Abs(.value) < 0.000001 Then .value = 0#
                End If
            End With
            Set CumPercent = CumPercent.Offset(-1, 0).Resize(CumPercent.Rows.count + 1, 1)
            With CumPercent.Cells(1)
                .value = 0#
            End With
            TickSize = Bins(3) - Bins(2)
            Do While (Bins(Bins.Rows.count) - Bins(1)) / TickSize > 7
                TickSize = TickSize * 2
            Loop
        End If
        
        If polygonQ = True And total > 0 And Freq.Rows.count > 1 Then
            Set MidPoints = Bins.Range("A1").Offset(0, 1).Resize(Bins.Rows.count + 1, 1)
            MidPoints(1) = Bins(1)
            MidPoints(MidPoints.Rows.count) = Bins(Bins.Rows.count)
            Set PercentPoly = Percent.Offset(-1, 0).Resize(Percent.Rows.count + 1, 1)
            PercentPoly(1) = 0
            PercentPoly(PercentPoly.Rows.count) = 0
            
            If MakeNewOutputSheet() = False Then Exit Sub
            Set Base = Range("A" & Format(ActiveCell.Row))
            
            Set ch = ActiveSheet.ChartObjects.Add(20, Base.Range("A1").Top + 20, 335, 252)
            ch.Chart.ChartWizard Source:=PercentPoly, _
                Gallery:=xlXYScatter, Format:=2, PlotBy:=xlColumns, HasLegend:=2
            ch.Placement = xlMove
    
            With ch.Chart
                .HasTitle = True
                .ChartTitle.Text = "Frequency Polygon"
                SetFont .ChartTitle
                SetFont .ChartArea
                 
                 With .PlotArea
                     .Border.LineStyle = xlNone
                     .Interior.ColorIndex = xlNone
                 End With
                 
                 With .SeriesCollection(1)
                    .XValues = MidPoints
                    .MarkerStyle = xlDiamond
                    .MarkerBackgroundColorIndex = 1
                    .MarkerForegroundColorIndex = xlNone
                    .Border.LineStyle = xlContinuous
                    .Border.Weight = xlHairline
                    .MarkerSize = 3
                End With
                
                With .Axes(xlCategory, xlPrimary)
                    .HasTitle = True
                    .AxisTitle.Text = Label
                    SetFont .AxisTitle
                    SetFont .TickLabels
                    .TickLabels.NumberFormat = binFmt
                    .MajorTickMark = xlCross
                    .MinorTickMark = xlNone
                    .TickLabelPosition = xlNextToAxis
                    
                    .MinimumScale = Bins(1)
                    .MaximumScale = Bins(Bins.Rows.count)
                    .MinorUnit = TickSize / 2#
                    .MajorUnit = TickSize
                    .TickLabels.Orientation = 0
                    .TickLabels.NumberFormat = AutoFormat(0, Dec - 2)
                End With
    
                With .Axes(xlValue, xlPrimary)
                    .MinimumScale = 0
                    .MaximumScaleIsAuto = True
                    .HasTitle = True
                    .AxisTitle.Text = "Percent"
                    SetFont .AxisTitle
                    SetFont .TickLabels
                    .HasMajorGridlines = False
                    .HasMinorGridlines = False
                    .TickLabels.NumberFormat = "0.0"
                    .MajorTickMark = xlCross
                    .MinorTickMark = xlNone
                End With
                
            End With
            ch.BottomRightCell.Offset(1, -1) = " "
            ch.BottomRightCell.Offset(1, -1).Select
        End If
       
        If ogiveQ = True And total > 0 And Freq.Rows.count > 1 Then
            
            If MakeNewOutputSheet() = False Then Exit Sub
            Set Base = Range("A" & Format(ActiveCell.Row))
            
            Set ch = ActiveSheet.ChartObjects.Add(20, Base.Range("A1").Top + 20, 335, 252)
            ch.Chart.ChartWizard Source:=CumPercent, _
                Gallery:=xlXYScatter, Format:=2, PlotBy:=xlColumns, HasLegend:=2
            ch.Placement = xlMove
    
            With ch.Chart
                .HasTitle = True
                .ChartTitle.Text = "Ogive"
                SetFont .ChartTitle
                SetFont .ChartArea
                 
                 With .PlotArea
                     .Border.LineStyle = xlContinuous
                     .Border.Weight = xlHairline
                     .Interior.ColorIndex = xlNone
                 End With
                 
                 With .SeriesCollection(1)
                    .XValues = Bins
                    .MarkerStyle = xlDiamond
                    .MarkerBackgroundColorIndex = 1
                    .MarkerForegroundColorIndex = xlNone
                    .Border.LineStyle = xlContinuous
                    .Border.Weight = xlHairline
                    .MarkerSize = 4
                End With
                
                
                With .Axes(xlCategory, xlPrimary)
                    .HasTitle = True
                    .AxisTitle.Text = Label
                    SetFont .AxisTitle
                    SetFont .TickLabels
                    .TickLabels.NumberFormat = binFmt
                    .MajorTickMark = xlCross
                    .MinorTickMark = xlCross
                    .TickLabelPosition = xlNextToAxis
                    
                    .MinimumScale = Bins(1)
                    .MaximumScale = Bins(Bins.Rows.count)
                    .MinorUnit = TickSize / 2#
                    .MajorUnit = TickSize
                    .TickLabels.Orientation = 0
                    .TickLabels.NumberFormat = AutoFormat(0, Dec - 2)

                End With
    
                With .Axes(xlValue, xlPrimary)
                    .MinimumScale = 0
                    .MaximumScale = 100
                    .MaximumScaleIsAuto = False
                    .HasTitle = True
                    .AxisTitle.Text = "Cumulative Percent"
                    SetFont .AxisTitle
                    SetFont .TickLabels
                    .MajorUnit = 25
                    .HasMajorGridlines = True
                    .TickLabels.NumberFormat = "0.0"
                    .MajorTickMark = xlCross
                    .MinorTickMark = xlCross
                End With
                
            End With
            ch.BottomRightCell.Offset(1, -1) = " "
            ch.BottomRightCell.Offset(1, -1).Select
        End If
        If Percent.Range("A1") <= 0# Then Percent.Range("A1").EntireRow.Delete
    Next l
    
    origbase.Columns(1).ColumnWidth = 6
    origbase.Columns(2).Resize(ActiveCell.Row - origbase.Row).AutoFit
    origbase.Columns(3).ColumnWidth = 4
    origbase.Columns(4).Resize(ActiveCell.Row - origbase.Row).AutoFit
    origbase.Columns(5).Resize(ActiveCell.Row - origbase.Row).AutoFit
    EndProc origbase
    Exit Sub
       
MainErrorHandler:
    If errcheck("Frequency Distributions - Quantitative") = vbYes Then Exit Sub Else Resume
End Sub


Attribute VB_Name = "frmMeanPaired"
Attribute VB_Base = "0{CD0A463B-00DB-4F8B-8871-5EE96BE41B00}{CDB8CFBB-AD85-40D1-B9F2-670D8BCF66B7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'''MegaStat|fffd| Hypothesis Testing: Paired Observations module |fffd|2005 by J. B. Orris
'frmMeanPaired

Option Explicit
Option Base 1

Private Sub UserForm_Activate()
    InitComboBoxCI Me
    InitComboBoxAlt Me
    Me.InputBox1.SetFocus
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    tTestPaired
End Sub

Private Sub buttonClear_Click()
    ClearLast
    Me.Hide
    Unload Me
    OpenUserForm "Paired"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then Me.InputBox1.SetFocus
    Me.Hide
End Sub

Private Sub comboboxCI_Change()
    Me.CheckBoxCI.value = True
End Sub

Private Sub InputBox1_DblClick(Cancel As Boolean)
    Me.InputBox1.Text = SetAddr(Me, Me.InputBox1)
End Sub

Private Sub InputBox2_DblClick(Cancel As Boolean)
    Me.InputBox2.Text = SetAddr(Me, Me.InputBox2)
End Sub

Private Sub Label1_Click()
        Me.InputBox1.Text = SetAddr(Me, Me.InputBox1)
End Sub

Private Sub Label2_Click()
        Me.InputBox2.Text = SetAddr(Me, Me.InputBox2)
End Sub

Private Sub InputBox1_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBox1.Text = SetAddr(Me, Me.InputBox1)
    End If
End Sub
Private Sub InputBox_2MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBox2.Text = SetAddr(Me, Me.InputBox2)
    End If
End Sub

Private Sub buttonHelp_Click()
    CallHelp 4320
End Sub

Private Sub InputHyp_DblClick(Cancel As Boolean)
    UpdateInput Me.InputHyp
End Sub

Private Sub LabelHyp_Click()
    UpdateInput Me.InputHyp
End Sub

Private Sub InputBox1_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        Me.InputHyp.SetFocus
    End If
End Sub

Private Sub InputHyp_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        Me.buttonOK.SetFocus
    End If
End Sub

Private Sub OptionButton1_Click()
    Me.Label3.Caption = ""
End Sub

Private Sub OptionButton2_Click()
    MsgBox "Use Mean vs. Hypothesized option to select label, mean difference, std.dev and n. ", _
                            vbExclamation + vbMsgBoxHelpButton, globalTitle, globalHelpFile, 4320
    frmMeanPaired.OptionButton1 = True
End Sub

Sub tTestPaired()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler

    Dim Label(2) As Variant
    Dim Group(2) As Range
    Dim Title As String
    Dim Base As Range
    Dim Hyp As Double
    Dim i As Integer
    Dim j As Integer
    Dim n As Integer
    Dim ans As Integer
    Dim st As String
    Dim tz As String
    Dim X As Range
    Dim TestRange As Range
    Dim ConfStr As String
    Dim ConfLevel As Double
    Dim tzVal As Double
    
    Title = "Paired Observations"
       
    'validation
    
    If ValidRange(Me.InputBox1, vbNo) = False Then Exit Sub
    Set Group(1) = Range(Me.InputBox1.Text)
    If StopQ1("Data must be in a single column.", Group(1).Columns.count > 1, Group(1), 1005, Me.InputBox1) = True Then Exit Sub

    If ValidRange(Me.InputBox2, vbNo) = False Then Exit Sub
    Set Group(2) = Range(Me.InputBox2.Text)
    If StopQ1("Data must be in a single column.", Group(2).Columns.count > 1, Group(2), 1005, Me.InputBox2) = True Then Exit Sub
    If StopQ1("The input ranges are not the same size.", Group(1).count <> Group(2).count, Union(Group(1), Group(2)), 1007, Me.InputBox1) = True Then Exit Sub
    
    Hyp = 0
    If ValidHyp(Me) = False Then Exit Sub
    Hyp = Eval(Me.InputHyp.Text)
 
    For i = 1 To 2
         Label(i) = "Group" & Str(i)
         n = Group(i).Rows.count
         'check for label

        If IsLabel(Group(i).Range("A1")) = True Then
           Label(i) = Group(i).Range("A1").Text
           n = n - 1
           Set Group(i) = Group(i).Range("A1").Offset(1).Resize(n)
       Else
           If Group(i).Rows(1).Row > 1 Then
               If IsLabel(Group(i)(1).Offset(-1, 0)) = True Then Label(i) = Group(i)(1).Offset(-1, 0).Text
           End If
       End If
    Next i
    
    For i = 1 To 2
        For Each X In Group(i)
            If StopQ1("Input range contains missing or invalid data.", IsOKnumber(X) = False, X, 1006, Me.InputBox1) = True Then Exit Sub
       Next X
    Next i
'-----------------------------------------
    
    If StopQ0("Not enough valid data to perform test.", n <= 2, 1001, Me.InputBox1) = True Then Exit Sub

    StartProc Me

     If MakeNewOutputSheet() = False Then Exit Sub
    Set Base = Range("A" & Format(ActiveCell.Row))
    SetTitle Base, "Hypothesis Test: " & Title
    

    If Me.opt_t = True Then tz = " t" Else tz = " z"

    Set TestRange = Base.Offset(1, 6)
    i = 0
    For Each X In Group(1)
        TestRange.Offset(i).value = X.Value2 - Group(2).Range("A1").Offset(i).Value2
        i = i + 1
    Next X
    Set TestRange = TestRange.CurrentRegion
    
    Base.Offset(3, 2) = "hypothesized value"
    Base.Offset(4, 2) = "mean " & Trim(Label(1))
    Base.Offset(5, 2) = "mean " & Trim(Label(2))
    st = "(" & Trim(Label(1)) & " - " & Trim(Label(2)) & ")"
    Base.Offset(6, 2) = "mean difference  " & st
    Base.Offset(7, 2) = "std. dev."
    Base.Offset(8, 2) = "std. error"
    Base.Offset(9, 2) = "n"
    Base.Offset(12, 2) = tz

    With Application
        Base.Offset(3, 1) = Hyp

        Base.Offset(4, 1) = .Average(Group(1))
        Base.Offset(7, 1) = MyStdev(TestRange)
        Base.Offset(9, 1) = n
        Range(Base.Offset(3, 1), Base.Offset(8, 1)).NumberFormat = AutoFormat(3, DecPlaces(TestRange))

        Base.Offset(5, 1) = .Average(Group(2))
        Base.Offset(6, 1) = Base.Offset(4, 1) - Base.Offset(5, 1)
        Base.Offset(8, 1) = Base.Offset(7, 1) / Sqr(n)
        If Me.opt_t = True Then
            Base.Offset(10, 1) = n - 1
            Base.Offset(10, 2) = "df"
        End If
        Base.Offset(9, 1).Range("A1:A2").NumberFormat = "0  "
        If Abs(Base.Offset(8, 1)) > 0.000000000000001 Then
            Base.Offset(12, 1) = ((Base.Offset(4, 1) - Base.Offset(5, 1)) - Base.Offset(3, 1)) / Base.Offset(8, 1)
            If Me.opt_t = True Then
                Base.Offset(13, 1) = .Tdist(Abs(Base.Offset(12, 1)), Base.Offset(10, 1), 1)
            Else
                Base.Offset(13, 1) = 1 - .NormSDist(Abs(Base.Offset(12, 1)))
            End If
        Else
            Base.Offset(12, 1) = "Cannot calculate test.  Zero variance."
            TestRange.Clear
            Base.Offset(12, 2).Clear
            Base.Offset(12, 1).Range("A1:B1").HorizontalAlignment = xlCenterAcrossSelection
            EndProc Base
            Exit Sub
        End If
    End With

    Base.Offset(12, 1).NumberFormat = "0.00"

    Display_pvalue Base, "B14", Me
    
    If Me.CheckBoxCI.value = True Then
        ConfLevel = Eval(Me.ComboBoxCI.Text)
        If ConfLevel > 1 Then ConfLevel = ConfLevel / 100
        If StopQ0("Probability must be between 0 and 1", ValidateP(ConfLevel) = False, 1012, Me.ComboBoxCI) = True Then Exit Sub
        ConfStr = Format(ConfLevel, "#.##%")
        Base.Range("C16") = "confidence interval " & ConfStr & " lower"
        Base.Range("C17") = "confidence interval " & ConfStr & " upper"
        Base.Range("C18") = "  margin of error"
        If Me.opt_z.value = True Then tzVal = Application.NormSInv(0.5 + ConfLevel / 2) Else tzVal = Application.TInv(1 - ConfLevel, n - 1)
        Base.Range("B18") = tzVal * Base.Offset(8, 1)
        Base.Range("B16") = Base.Offset(6, 1) - Base.Range("B18")
        Base.Range("B17") = Base.Offset(6, 1) + Base.Range("B18")
        Base.Range("B16:B18").NumberFormat = Base.Offset(6, 1).NumberFormat
    End If
    
    
    Base.Range("A4:B13").Columns("B").AutoFit
    TestRange.Clear
    EndProc Base
    Exit Sub

MainErrorHandler:
    If errcheck("Paired observations test") = vbYes Then Exit Sub Else Resume
End Sub


Attribute VB_Name = "frmMeanTwoGroup"
Attribute VB_Base = "0{6620E5C5-CF64-4AE7-8AAA-2C25E081F138}{66503D1C-1EFD-4B8F-B234-8805457D1674}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

''MegaStat|fffd| Hypothesis Testing: Independent Groups for Means module |fffd|2005 by J. B. Orris
'frmMeanTwoGroup

Option Explicit
Option Base 1

Private Sub UserForm_Activate()
    InitComboBoxCI Me
    InitComboBoxAlt Me
    Me.InputBox1.SetFocus
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
        tTest2
End Sub

Private Sub buttonClear_Click()
    ClearLast
    Me.Hide
    Unload Me
    OpenUserForm "TwoGroups"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then Me.InputBox1.SetFocus
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    CallHelp 4315
End Sub

Private Sub comboboxCI_Change()
    Me.CheckBoxCI.value = True
End Sub

Private Sub InputBox1_DblClick(Cancel As Boolean)
    Me.InputBox1.Text = SetAddr(Me, Me.InputBox1)
End Sub

Private Sub InputBox2_DblClick(Cancel As Boolean)
    Me.InputBox2.Text = SetAddr(Me, Me.InputBox2)
End Sub

Private Sub Label1_Click()
        Me.InputBox1.Text = SetAddr(Me, Me.InputBox1)
End Sub

Private Sub Label2_Click()
        Me.InputBox2.Text = SetAddr(Me, Me.InputBox2)
End Sub

Private Sub InputBox1_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBox1.Text = SetAddr(Me, Me.InputBox1)
    End If
End Sub

Private Sub InputBox2_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBox2.Text = SetAddr(Me, Me.InputBox2)
    End If
End Sub

Private Sub InputHyp_DblClick(Cancel As Boolean)
    UpdateInput Me.InputHyp
End Sub

Private Sub LabelHyp_Click()
    UpdateInput Me.InputHyp
End Sub

Private Sub InputBox1_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        Me.InputBox2.SetFocus
    End If
End Sub

Private Sub InputBox2_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        Me.InputHyp.SetFocus
    End If
End Sub

Private Sub InputHyp_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        Me.buttonOK.SetFocus
    End If
End Sub

Private Sub OptionButton1_Click()
    InputBox1.Text = ""
    InputBox2.Text = ""
    Me.Label3.Caption = ""
End Sub

Private Sub OptionButton2_Click()
    InputBox1.Text = ""
    InputBox2.Text = ""
    With Me
        .OptionButton1.value = False
        .OptionButton2.value = True
        .Label3.Caption = "For each group select ranges with label, mean, s.d., n"
        .Label3.Font.Bold = True
        .InputBox1.SetFocus
    End With
End Sub

Sub tTest2() '\two independent groups, pooled variance and Bonferoni unequal variance
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler
       
    Dim X As Range
    Dim Label(2) As Variant
    Dim Hyp As Double
    Dim Group(2) As Range
    Dim Base As Range
    Dim t As Range
    Dim i As Integer
    Dim j As Integer
    Dim ans As Integer
    Dim n(2) As Integer
    Dim df As Integer
    Dim Dec1 As Integer
    Dim Dec2 As Integer
    Dim st As String
    Dim tz As String
    Dim PooledVar As Double
    Dim Response As Integer
    Dim Which As Byte
    Dim a As Double
    Dim b As Double
    Dim SummaryData(2, 3) As Double
    Dim dfa As Double
    Dim dfb As Double
    Dim Adj As Integer
    Dim ConfStr As String
    Dim ConfLevel As Double
    Dim tzVal As Double
    Dim baseF As Range
                
    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub
    
    'validation
    If Me.OptionButton1.value = True Then
        If ValidRange(Me.InputBox1, vbYes) = False Then Exit Sub
        Set Group(1) = Range(Me.InputBox1.Text)
    
        If ValidRange(Me.InputBox2, vbYes) = False Then Exit Sub
        Set Group(2) = Range(Me.InputBox2.Text)
        If StopQ1("Data must be in a single column.", Group(1).Columns.count > 1, Group(1), 1005, Me.InputBox1) = True Then Exit Sub
        If StopQ1("Data must be in a single column.", Group(2).Columns.count > 1, Group(2), 1005, Me.InputBox1) = True Then Exit Sub
        Dec1 = DecPlaces(Group(1).Offset(1).Resize(Group(1).Rows.count - 1))
        Dec2 = DecPlaces(Group(2).Offset(1).Resize(Group(2).Rows.count - 1))
        
        For i = 1 To 2
            Label(i) = "Group" & Str(i)
            n(i) = Group(i).Rows.count
            'check for label
           If IsLabel(Group(i).Range("A1")) = True Then
               Label(i) = Group(i).Range("A1").Text
               n(i) = n(i) - 1
               Set Group(i) = Group(i).Range("A1").Offset(1).Resize(n(i))
           Else
                If Group(i).Rows(1).Row > 1 Then
                   If IsLabel(Group(i)(1).Offset(-1, 0)) = True Then Label(i) = Group(i)(1).Offset(-1, 0).Text
                End If
            End If
        Next i
        
        'check for valid data
        For j = 1 To 2
            For Each X In Group(j)
                 If StopQ1("Input range contains missing or invalid data.", IsOKnumber(X) = False, X, 1006, Me.InputBox1) = True Then Exit Sub
            Next X
        Next j
    Else
        If ValidRange(Me.InputBox1, vbNo) = False Then Exit Sub
        Set Group(1) = Range(Me.InputBox1.Text)
    
        If ValidRange(Me.InputBox2, vbNo) = False Then Exit Sub
        Set Group(2) = Range(Me.InputBox2.Text)
        For j = 1 To 2
            i = 1
            For Each X In Group(j)
                If i = 1 Then
                    Label(j) = X.Text
                Else
                    If StopQ1("Input range contains missing or invalid data.", IsOKnumber(X) = False And i > 1, X, 1006, Me.InputBox1) = True Then Exit Sub
                    SummaryData(j, i - 1) = X.value
                End If
                i = i + 1
            Next X
            n(j) = SummaryData(j, 3)
        Next j
    End If
    
    If ValidHyp(Me) = False Then Exit Sub
    Hyp = Eval(Me.InputHyp.Text)
    
    If StopQ0("Too many cells selected for Summary Input mode.", (Group(1).Cells.count > 4 Or Group(2).Cells.count > 4) And Me.OptionButton2.value = True, 1038, Me.InputBox1) = True Then Exit Sub
    If StopQ0("Not enough valid data to perform test.", (n(1) <= 2 Or n(2) <= 2) And Me.OptionButton2.value = True, 1001, Me.InputBox1) = True Then Exit Sub
    If ((n(1) < 4 Or n(2) < 4) And Me.OptionButton1.value = True) Then
        Select Case MsgBox("Do you want to switch to Summary Input mode?", vbQuestion + vbYesNoCancel + vbDefaultButton1 + vbMsgBoxHelpButton, globalTitle, globalHelpFile, 1039)
            Case vbYes
                OptionButton2_Click
            Case vbCancel
                Exit Sub
        End Select
    End If
    If Me.OptionButton2.value = True Then ' validate summary input
        If StopQ0("Std. Dev must be > 0", SummaryData(1, 2) <= 0, 1011, Me.InputBox1) = True Then Exit Sub
        If StopQ0("n must be >= 2", SummaryData(1, 3) <= 0, 1011, Me.InputBox1) = True Then Exit Sub
        SummaryData(1, 3) = Application.Round(SummaryData(1, 3), 0)
        
        If StopQ0("Std. Dev must be > 0", SummaryData(2, 2) <= 0, 1011, Me.InputBox2) = True Then Exit Sub
        If StopQ0("n must be >= 2", SummaryData(2, 3) <= 0, 1011, Me.InputBox2) = True Then Exit Sub
        SummaryData(2, 3) = Application.Round(SummaryData(2, 3), 0)
    End If
    
    With Me
        If .opt_t = True Or .opt_t2 = True Then tz = " t" Else tz = " z"
        If opt_t = True Then Which = 1
        If opt_t2 = True Then Which = 2
        If opt_z = True Then Which = 3
    End With
    
    Select Case Which
        Case 1
            st = " (t-test, pooled variance)"
        Case 2
            st = " (t-test, unequal variance)"
        Case 3
            st = " (z-test)"
    End Select
    
    StartProc Me
    
    If MakeNewOutputSheet() = False Then Exit Sub
    Set Base = Range("A" & Format(ActiveCell.Row))
    SetTitle Base, "Hypothesis Test: Independent Groups" & st
    
    With Application
        If Me.OptionButton1.value = True Then
            Base.Offset(4, 1) = .Average(Group(1))
            Base.Offset(5, 1) = MyStdev(Group(1))
            Base.Offset(4, 1).Range("A1:A2").NumberFormat = AutoFormat(2, Dec1)
            
            Base.Offset(4, 2) = .Average(Group(2))
            Base.Offset(5, 2) = MyStdev(Group(2))
            Base.Offset(4, 2).Range("A1:A2").NumberFormat = AutoFormat(2, Dec2)
            
            Base.Offset(6, 1) = n(1)
            Base.Offset(6, 2) = n(2)
            df = n(1) + n(2) - 2
            PooledVar = (MyDevSq(Group(1)) + MyDevSq(Group(2))) / df
        Else
            For i = 1 To 2
                For j = 1 To 3
                    Base.Offset(j + 3, i) = SummaryData(i, j)
                Next j
            Next i
            
            df = n(1) + n(2) - 2
            Dec1 = DecPlaces(Base.Offset(4, 1))
            Dec2 = DecPlaces(Base.Offset(4, 2))
            PooledVar = ((n(1) - 1) * SummaryData(1, 2) ^ 2 + (n(2) - 1) * SummaryData(2, 2) ^ 2) / df
        End If
        
        
        FmtOutline Base.Offset(4, 1).CurrentRegion
        For i = 1 To 2
            Base.Offset(3, i) = Label(i)
        Next i
        
        Base.Offset(4, 1).CurrentRegion.HorizontalAlignment = xlRight
        Base.Offset(4, 3) = "mean"
        Base.Offset(5, 3) = "std. dev."
        Base.Offset(6, 3) = "n"
        Base.Offset(9, 2) = Base.Offset(4, 1) - Base.Offset(4, 2)
        
        Base.Offset(13, 2) = Hyp
        Base.Offset(9, 2).Range("A1:A4").NumberFormat = AutoFormat(3, .Max(Dec1, Dec2))
        Base.Offset(9, 2).Range("A1:A4").HorizontalAlignment = xlRight
        If Me.opt_t = True Then
            Base.Offset(8, 2) = df
            Base.Offset(8, 2).NumberFormat = "0  "
            Base.Offset(8, 3) = "df"
            Base.Offset(10, 2) = PooledVar
            Base.Offset(10, 3) = "pooled variance"
            Base.Offset(11, 2) = Sqr(PooledVar)
            Base.Offset(11, 3) = "pooled std. dev."
        End If
        st = "(" & Trim(Label(1)) & " - " & Trim(Label(2)) & ")"
        Base.Offset(9, 3) = "difference " & st
        Base.Offset(12, 3) = "standard error of difference"
        Base.Offset(13, 3) = "hypothesized difference"
        
        If Me.opt_t = True Then
            Base.Offset(12, 2) = Sqr(PooledVar * (1 / n(1) + 1 / n(2)))
        Else
            Base.Offset(12, 2) = Sqr(Base.Offset(5, 1) ^ 2 / n(1) + Base.Offset(5, 2) ^ 2 / n(2))
        End If
        
        If Abs(Base.Offset(12, 2)) > 0.000000000000001 Then
            If Me.opt_t = True Then
                Base.Offset(15, 2) = ((Base.Offset(4, 1) - Base.Offset(4, 2)) - Base.Offset(13, 2)) / Base.Offset(12, 2) 'calc t
                Base.Offset(16, 2) = .Tdist(Abs(Base.Offset(15, 2)), Base.Offset(8, 2), 1)
            Else
                Base.Offset(15, 2) = ((Base.Offset(4, 1) - Base.Offset(4, 2)) - Base.Offset(13, 2)) / Base.Offset(12, 2) 'calc z
                Select Case Which
                    Case 2
                        a = Base.Offset(5, 1) ^ 2 / Base.Offset(6, 1)
                        b = Base.Offset(5, 2) ^ 2 / Base.Offset(6, 2)
                        df = Application.RoundDown((a + b) ^ 2 / (a ^ 2 / (n(1) - 1) + b ^ 2 / (n(2) - 1)), 0)
                        Base.Offset(8, 2) = df
                        Base.Offset(8, 3) = "df"
                        Base.Offset(16, 2) = .Tdist(Abs(Base.Offset(15, 2)), df, 1)
                    Case 3
                        Base.Offset(16, 2) = 1 - .NormSDist(Abs(Base.Offset(15, 2)))
                    End Select
            End If
        Else
            Base.Offset(15, 1) = "Cannot calculate test.  Zero variance."
            Base.Offset(15, 2).Clear
            Base.Offset(15, 1).Range("A1:B1").HorizontalAlignment = xlCenterAcrossSelection
            EndProc Base
            Exit Sub
        End If
        Base.Offset(15, 3) = tz
        Base.Offset(15, 2).NumberFormat = "0.00"
        Display_pvalue Base, "C17", Me
        
        Adj = 0
        If Me.CheckBoxCI.value = True Then
            Adj = 3
            ConfLevel = Eval(Me.ComboBoxCI.Text)
            If ConfLevel > 1 Then ConfLevel = ConfLevel / 100
            If StopQ0("Probability must be between 0 and 1", ValidateP(ConfLevel) = False, 1012, Me.ComboBoxCI) = True Then Exit Sub
            ConfStr = Format(ConfLevel, "#.##%")
            Base.Range("D19") = "confidence interval " & ConfStr & " lower"
            Base.Range("D20") = "confidence interval " & ConfStr & " upper"
            Base.Range("D21") = "  margin of error"
            If Me.opt_z.value = True Then tzVal = .NormSInv(0.5 + ConfLevel / 2) Else tzVal = .TInv(1 - ConfLevel, df)
            Base.Range("C21") = tzVal * Base.Offset(12, 2)
            Base.Range("C19") = Base.Offset(9, 2) - Base.Range("C21")
            Base.Range("C20") = Base.Offset(9, 2) + Base.Range("C21")
            Base.Range("C19:C21").NumberFormat = Base.Offset(9, 2).NumberFormat
        End If
        
        If Me.CheckBoxF.value = True Then
            Set baseF = Base.Range("B20").Offset(Adj)
            baseF.Range("A1") = "F-test for equality of variance"
            baseF.Range("C4") = "F"
            baseF.Range("C5") = "p-value"
            
            If Base.Offset(5, 1) >= Base.Offset(5, 2) Then
                i = 1
                j = 2
            Else
                i = 2
                j = 1
            End If
            a = Base.Offset(5, i) ^ 2
            dfa = n(i) - 1
            b = Base.Offset(5, j) ^ 2
            dfb = n(j) - 1
            
            baseF.Range("C2") = "variance: " & Base.Offset(3, i).Text
            baseF.Range("C3") = "variance: " & Base.Offset(3, j).Text
            
            baseF.Range("B2") = a
            baseF.Range("B3") = b
            baseF.Range("B2:B3").NumberFormat = Base.Offset(5, i).NumberFormat

            baseF.Range("B4") = a / b
            baseF.Range("B4").NumberFormat = "0.00"
            
            baseF.Range("B5") = 2 * Application.Fdist(baseF.Range("B4").value, dfa, dfb)
            FormatPvalue baseF.Range("B5"), xlYes

        End If
        
        If Which >= 2 Then Base.Offset(10).Range("A1:A2").EntireRow.Delete
        If Which = 3 Then Base.Offset(8).EntireRow.Delete
        
        Base.Range("A4:C17").Columns("B:C").AutoFit
    End With
        
    EndProc Base
    Exit Sub
    
MainErrorHandler:
    If errcheck("Two group t-test") = vbYes Then Exit Sub Else Resume
End Sub
Attribute VB_Name = "frmMeanVs"
Attribute VB_Base = "0{E05AA7EF-FD56-49DD-B048-D1370297DF44}{8191DA02-4C36-4E7C-945F-373CD8C64865}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'''MegaStat|fffd| Hypothesis Testing: mean vs |fffd| module |fffd|2005 by J. B. Orris
'frmMeanVs

Option Explicit
Option Base 1

Private Sub UserForm_Activate()
    InitComboBoxCI Me
    InitComboBoxAlt Me
    Me.InputBox1.SetFocus
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    If Me.Tag = "MeanVs" Then tTest1 Else VarTest
End Sub

Private Sub buttonClear_Click()
    Dim SaveTag As String
    SaveTag = Me.Tag
    ClearLast
    Me.Hide
    Unload Me
    OpenUserForm SaveTag
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then Me.InputBox1.SetFocus
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    If Me.Tag = "MeanVs" Then CallHelp 4310 Else CallHelp 4340
End Sub

Private Sub comboboxCI_Change()
    Me.CheckBoxCI.value = True
End Sub

Private Sub InputBox1_DblClick(Cancel As Boolean)
    Me.InputBox1.Text = SetAddr(Me, Me.InputBox1)
End Sub

Private Sub InputBox1_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBox1.Text = SetAddr(Me, Me.InputBox1)
    End If
End Sub

Private Sub InputboxLabel_Click()
    Me.InputBox1.Text = SetAddr(Me, Me.InputBox1)
End Sub

Private Sub OptionButton1_Click()
    InputBox1.Text = ""
    Me.Label3.Caption = ""
End Sub

Private Sub InputHyp_DblClick(Cancel As Boolean)
    UpdateInput Me.InputHyp
End Sub

Private Sub LabelHyp_Click()
    UpdateInput Me.InputHyp
End Sub

Private Sub OptionButton2_Click()
    InputBox1.Text = ""
    With Me
        .OptionButton1.value = False
        .OptionButton2.value = True
        If .Tag = "MeanVs" Then
            .Label3.Caption = "Select range with label, mean, s.d., n"
        Else
            .Label3.Caption = "Select range with label, variance, n"
        End If
        .Label3.Font.Bold = True
        .InputBox1.SetFocus
    End With
End Sub

Sub tTest1()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler

    Dim Label As Variant
    Dim Group As Range
    Dim Title As String
    Dim Base As Range
    Dim Hyp As Double
    Dim i As Integer
    Dim j As Integer
    Dim n As Integer
    Dim ans As Integer
    Dim st As String
    Dim tz As String
    Dim X As Range
    Dim SummaryData(3) As Double
    Dim ConfStr As String
    Dim ConfLevel As Double
    Dim tzVal As Double

    Title = "Mean vs. Hypothesized Value"
       
    'validation
    If Me.OptionButton1.value = True Then
        If ValidRange(Me.InputBox1, vbYes) = False Then Exit Sub
    Else
        If ValidRange(Me.InputBox1, vbNo) = False Then Exit Sub
    End If
    Set Group = Range(Me.InputBox1.Text)
    
    If Me.OptionButton2 = True Then
        i = 1
        For Each X In Group
            If i = 1 Then
                Label = X.Text
            Else
                If StopQ1("Input range contains missing or invalid data.", IsOKnumber(X) = False And i > 1, X, 1006, Me.InputBox1) = True Then Exit Sub
                SummaryData(i - 1) = X.value
            End If
            i = i + 1
        Next X
    End If
    
    If StopQ1("Data must be in a single column.", Group.Columns.count > 1, Group, 1005, Me.InputBox1) = True Then Exit Sub

    If StopQ0("Must specify hypothesized value.", Len(Me.InputHyp.value) = 0, 1040, Me.InputBox1) = True Then Exit Sub
    If ValidHyp(Me) = False Then Exit Sub
    Hyp = Eval(Me.InputHyp.Text)
 
    'check for label

    If Me.OptionButton1 = True Then
        Label = "Data"
        n = Group.Rows.count
'        If IsOKnumber(Group.Range("A1")) = False Then
        If IsLabel(Group.Range("A1")) = True Then
            Label = Group.Range("A1").Text
            n = n - 1
            Set Group = Group.Range("A1").Offset(1).Resize(n)
        Else
            If Group.Rows(1).Row > 1 Then
                If IsLabel(Group.Offset(-1, 0)) = True Then Label = Group(1).Offset(-1, 0).Text
            End If
        End If
    End If
    
    If Me.OptionButton1 = True Then
        For Each X In Group
             If StopQ1("Input range contains missing or invalid data.", IsOKnumber(X) = False, X, 1006, Me.InputBox1) = True Then Exit Sub
        Next X
    End If
    
    If StopQ0("Too many cells selected for Summary Input mode.", n > 3 And Me.OptionButton2.value = True, 1038, Me.InputBox1) = True Then Exit Sub
    If StopQ0("Not enough valid data to perform test.", Me.OptionButton1.value = True And n <= 2, 1001, Me.InputBox1) = True Then Exit Sub
    If (n = 3 And Me.OptionButton1.value = True) Then
        Select Case MsgBox("Do you want to switch to Summary Input mode?", vbQuestion + vbYesNoCancel + vbDefaultButton1 + vbMsgBoxHelpButton, globalTitle, globalHelpFile, 1039)
            Case vbYes
                OptionButton2_Click
                SummaryData(1) = Group(1)
                SummaryData(2) = Group(2)
                SummaryData(3) = Group(3)
            Case vbCancel
                Exit Sub
        End Select
    End If
    If Me.OptionButton2.value = True Then ' validate summary input
        If StopQ0("Std. Dev must be > 0", SummaryData(2) <= 0, 1011, Me.InputBox1) = True Then Exit Sub
        If StopQ0("n must be >= 2", SummaryData(3) <= 2, 1011, Me.InputBox1) = True Then Exit Sub
        SummaryData(3) = Application.Round(SummaryData(3), 0)
    End If

    StartProc Me

     If MakeNewOutputSheet() = False Then Exit Sub
    Set Base = Range("A" & Format(ActiveCell.Row))
    SetTitle Base, "Hypothesis Test: " & Title

    If Me.opt_t = True Then tz = " t" Else tz = " z"

    i = 0
    
    Base.Offset(3, 2) = "hypothesized value"
    Base.Offset(4, 2) = "mean " & Trim(Label)
    Base.Offset(5, 2) = "std. dev."
    Base.Offset(6, 2) = "std. error"
    Base.Offset(7, 2) = "n"
    Base.Offset(10, 2) = tz
    
    With Application
        Base.Offset(3, 1) = Hyp

        If Me.OptionButton1.value = True Then
            Base.Offset(4, 1) = .Average(Group)
            Base.Offset(5, 1) = MyStdev(Group)
            Base.Offset(7, 1) = n
            Range(Base.Offset(3, 1), Base.Offset(8, 1)).NumberFormat = AutoFormat(3, DecPlaces(Union(Group(1).Offset(1).Resize(n), Group(2).Offset(1).Resize(n))))
        Else
            Base.Offset(4, 1) = SummaryData(1)
            Base.Offset(5, 1) = SummaryData(2)
            Base.Offset(7, 1) = SummaryData(3)
            n = SummaryData(3)
            Range(Base.Offset(3, 1), Base.Offset(7, 1)).NumberFormat = AutoFormat(2, DecPlaces(Base.Offset(4, 1)))
        End If

        Base.Offset(6, 1) = Base.Offset(5, 1) / Sqr(n)
        If Me.opt_t = True Then
            Base.Offset(8, 1) = n - 1
            Base.Offset(8, 2) = "df"
        End If
        Base.Offset(7, 1).Range("A1:A2").NumberFormat = "0  "
        If Abs(Base.Offset(5, 1)) > 0.000000000000001 Then
            Base.Offset(10, 1) = (Base.Offset(4, 1) - Base.Offset(3, 1)) / Base.Offset(6, 1)
            If Me.opt_t = True Then
                Base.Offset(11, 1) = .Tdist(Abs(Base.Offset(10, 1)), Base.Offset(8, 1), 1)
            Else
                Base.Offset(11, 1) = 1 - .NormSDist(Abs(Base.Offset(10, 1)))
            End If

        Else
            Base.Offset(11, 1) = "Cannot calculate test.  Zero variance."
            Base.Offset(11, 2).Clear
            Base.Offset(11, 1).Range("A1:B1").HorizontalAlignment = xlCenterAcrossSelection
            EndProc Base
            Exit Sub
        End If
    End With

    Base.Offset(10, 1).NumberFormat = "0.00"
    Display_pvalue Base, "B12", Me

    If Me.CheckBoxCI.value = True Then
        ConfLevel = Eval(Me.ComboBoxCI.Text)
        If ConfLevel > 1 Then ConfLevel = ConfLevel / 100
        If StopQ0("Probability must be between 0 and 1", ValidateP(ConfLevel) = False, 1012, Me.ComboBoxCI) = True Then Exit Sub
        ConfStr = Format(ConfLevel, "#.##%")
        Base.Range("C14") = "confidence interval " & ConfStr & " lower"
        Base.Range("C15") = "confidence interval " & ConfStr & " upper"
        Base.Range("C16") = "  margin of error"
        If Me.opt_z.value = True Then tzVal = Application.NormSInv(0.5 + ConfLevel / 2) Else tzVal = Application.TInv(1 - ConfLevel, n - 1)
        Base.Range("B16") = tzVal * Base.Offset(6, 1)
        Base.Range("B14") = Base.Offset(4, 1) - Base.Range("B16")
        Base.Range("B15") = Base.Offset(4, 1) + Base.Range("B16")
        Base.Range("B14:B16").NumberFormat = Base.Offset(4, 1).NumberFormat
    End If

    Base.Range("A4:B12").Columns("B").AutoFit

    EndProc Base
    Exit Sub
MainErrorHandler:
    If errcheck("mean vs. hypothesized value t-test") = vbYes Then Exit Sub Else Resume
End Sub
    
Sub VarTest()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler

    Dim Label As Variant
    Dim Group As Range
    Dim Base As Range
    Dim Hyp As Double
    Dim i As Integer
    Dim j As Integer
    Dim n As Integer
    Dim ans As Integer
    Dim X As Range
    Dim SummaryData(2) As Double
    Dim ConfStr As String
    Dim ConfLevel As Double
    Dim p As Double
    
    'validation
    If Me.OptionButton1.value = True Then
        If ValidRange(Me.InputBox1, vbYes) = False Then Exit Sub
    Else
        If ValidRange(Me.InputBox1, vbNo) = False Then Exit Sub
    End If
    Set Group = Range(Me.InputBox1.Text)
    
    If Me.OptionButton2 = True Then
        i = 1
        For Each X In Group
            If i = 1 Then
                Label = X.Text
            Else
                If StopQ1("Input range contains missing or invalid data.", IsOKnumber(X) = False And i > 1, X, 1006, Me.InputBox1) = True Then Exit Sub
                SummaryData(i - 1) = X.value
            End If
            i = i + 1
        Next X
    End If
    
    If StopQ1("Data must be in a single column.", Group.Columns.count > 1, Group, 1005, Me.InputBox1) = True Then Exit Sub

    If StopQ0("Must specify hypothesized value.", Len(Me.InputHyp.value) = 0, 1040, Me.InputBox1) = True Then Exit Sub
    If ValidHyp(Me) = False Then Exit Sub
    Hyp = Eval(Me.InputHyp.Text)
    If StopQ0("Hypothesized variance cannot be 0 or negative", Hyp <= 0, 1011, Me.InputBox1) = True Then Exit Sub
 
    'check for label

    If Me.OptionButton1 = True Then
    Label = "Data"
    n = Group.Rows.count
        If IsOKnumber(Group.Range("A1")) = False Then
            Label = Group.Range("A1").Text
            n = n - 1
            Set Group = Group.Range("A1").Offset(1).Resize(n)
        Else
            If Group.Rows(1).Row > 1 Then
                If IsLabel(Group.Offset(-1, 0)) = True Then Label = Group(1).Offset(-1, 0).Text
            End If
        End If
    End If
    
    If Me.OptionButton1 = True Then
        For Each X In Group
             If StopQ1("Input range contains missing or invalid data.", IsOKnumber(X) = False, X, 1006, Me.InputBox1) = True Then Exit Sub
        Next X
    End If
    
    If StopQ0("Too many cells selected for Summary Input mode.", n > 3 And Me.OptionButton2.value = True, 1038, Me.InputBox1) = True Then Exit Sub
    If StopQ0("Not enough valid data to perform test.", Me.OptionButton1.value = True And n <= 2, 1001, Me.InputBox1) = True Then Exit Sub
    If (n = 3 And Me.OptionButton1.value = True) Then
        Select Case MsgBox("Do you want to switch to Summary Input mode?", vbQuestion + vbYesNoCancel + vbDefaultButton1 + vbMsgBoxHelpButton, globalTitle, globalHelpFile, 1039)
            Case vbYes
                OptionButton2_Click
                SummaryData(1) = Group(1)
                SummaryData(2) = Group(2)
            Case vbCancel
                Exit Sub
        End Select
    End If
    If Me.OptionButton2.value = True Then ' validate summary input
        If StopQ0("Variance cannot be 0 or negative", SummaryData(1) <= 0, 1011, Me.InputBox1) = True Then Exit Sub
        If StopQ0("n must be >= 3", SummaryData(2) <= 3, 1011, Me.InputBox1) = True Then Exit Sub
        SummaryData(2) = Application.Round(SummaryData(2), 0)
    End If

    StartProc Me

     If MakeNewOutputSheet() = False Then Exit Sub
    Set Base = Range("A" & Format(ActiveCell.Row))
    SetTitle Base, "Chi-square Variance Test"

    i = 0
    
    Base.Offset(3, 2) = "hypothesized variance"
    Base.Offset(4, 2) = "observed variance of " & Trim(Label)
    Base.Offset(5, 2) = "n"
    Base.Offset(6, 2) = "df"
    Base.Offset(7, 2) = "chi-square"
    
    With Application
        Base.Offset(3, 1) = Hyp

        If Me.OptionButton1.value = True Then
            Base.Offset(4, 1) = .var(Group)
            Base.Offset(5, 1) = n
            Base.Offset(6, 1) = n - 1
            Range(Base.Offset(3, 1), Base.Offset(7, 1)).NumberFormat = AutoFormat(3, DecPlaces(Union(Group(1).Offset(1).Resize(n), Group(2).Offset(1).Resize(n))))
        Else
            Base.Offset(4, 1) = SummaryData(1)
            Base.Offset(5, 1) = SummaryData(2)
            Base.Offset(6, 1) = SummaryData(2) - 1
            n = SummaryData(2)
            Range(Base.Offset(3, 1), Base.Offset(7, 1)).NumberFormat = AutoFormat(2, DecPlaces(Base.Offset(4, 1)))
        End If

        Base.Offset(5, 1).Range("A1:A2").NumberFormat = "0  "
        Base.Offset(7, 1).value = (n - 1) * Base.Offset(4, 1) / Base.Offset(3, 1)
        Base.Offset(9, 1).value = Application.Chidist(Base.Offset(7, 1), Base.Offset(6, 1))
    End With

    Base.Offset(7, 1).NumberFormat = "0.00"

    p = Base.Offset(9, 1).value
    Select Case Me.ComboBoxAlt.ListIndex
        Case 0
            Base.Offset(9, 2) = " p-value (one-tailed, upper)"
        Case 1
            Base.Offset(9, 2) = " p-value (two-tailed)"
            If p < 0.5 Then
                Base.Offset(9, 1).value = p * 2
            Else
                Base.Offset(9, 1).value = (1 - p) * 2
            End If
        Case 2
            Base.Offset(9, 2) = " p-value (one-tailed, lower)"
            Base.Offset(9, 1).value = 1 - p
    End Select
    FormatPvalue Base.Offset(9, 1), xlYes

    If Me.CheckBoxCI.value = True Then
        ConfLevel = Eval(Me.ComboBoxCI.Text)
        If ConfLevel > 1 Then ConfLevel = ConfLevel / 100
        If StopQ0("Probability must be between 0 and 1", ValidateP(ConfLevel) = False, 1012, Me.ComboBoxCI) = True Then Exit Sub
        ConfStr = Format(ConfLevel, "#.##%")
        Base.Range("C13") = "confidence interval " & ConfStr & " lower"
        Base.Range("C14") = "confidence interval " & ConfStr & " upper"

        Base.Range("B13") = (n - 1) * Base.Offset(4, 1) / Application.ChiInv((1 - ConfLevel) / 2, n - 1)
        Base.Range("B14") = (n - 1) * Base.Offset(4, 1) / Application.ChiInv((ConfLevel + 1) / 2, n - 1)

        Base.Range("B13:B14").NumberFormat = Base.Offset(4, 1).NumberFormat
    End If

    Base.Range("A4:B12").Columns("B").AutoFit

    EndProc Base
    Exit Sub

MainErrorHandler:
    If errcheck("Chi-square Variance Test") = vbYes Then Exit Sub Else Resume
End Sub
Attribute VB_Name = "frmNPSignTest"
Attribute VB_Base = "0{36C7BB6F-9AA6-4D17-B982-936A97DCCFFD}{9258BFE4-9868-468F-917D-C1E330B04AAD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'''MegaStat|fffd| Sign Test module |fffd|2005 by J. B. Orris
'frmNPSignTest
Option Explicit
Option Base 1

Private Sub UserForm_Activate()
    InitComboBoxAlt Me
    Me.InputBox.SetFocus
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    SignTest
End Sub

Private Sub buttonClear_Click()
    ClearLast
    Me.Hide
    Unload Me
    OpenUserForm "SignTest"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then Me.InputBox.SetFocus
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    CallHelp 4810
End Sub

Private Sub InputBox_DblClick(Cancel As Boolean)
    Me.InputBox.Text = SetAddr(Me, Me.InputBox)
End Sub

Private Sub InputBox_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBox.Text = SetAddr(Me, Me.InputBox)
    End If
End Sub

Private Sub InputboxLabel_Click()
    Me.InputBox.Text = SetAddr(Me, Me.InputBox)
End Sub

Private Sub InputHyp_DblClick(Cancel As Boolean)
    UpdateInput Me.InputHyp
End Sub

Private Sub LabelHyp_Click()
    UpdateInput Me.InputHyp
End Sub

Sub SignTest()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler

    Dim X As Range
    Dim Label As Variant
    Dim InputRange As Range
    Dim Base As Range
    Dim Hyp As Double
    Dim i As Integer
    Dim j As Integer
    Dim n As Double
    Dim S0 As Double
    Dim S1 As Double
    Dim S2 As Double
    Dim S As Double
    Dim ln_prob As Double
    Dim endi As Double
    Dim Prob As Double
    Dim z As Double
           
    'validation
    If ValidRange(Me.InputBox, vbNo) = False Then Exit Sub
    Set InputRange = Range(Me.InputBox.Text)

    If StopQ1("Data must be in a single column.", InputRange.Columns.count > 1, InputRange, 1005, Me.InputBox) = True Then Exit Sub
    
    If StopQ0("Must specify hypothesized value.", Len(Me.InputHyp.Text) = 0, 1040, Me.InputBox) = True Then Exit Sub
    If ValidHyp(Me) = False Then Exit Sub
    Hyp = Eval(Me.InputHyp.Text)

        If IsLabel(InputRange.Range("A1")) = True Then
           Label = InputRange.Range("A1").Text
       Else
           If InputRange.Rows(1).Row > 1 Then
               If IsLabel(InputRange(1).Offset(-1, 0)) = True Then Label = InputRange(1).Offset(-1, 0).Text Else Label = ""
           Else
               Label = ""
           End If
       End If

    
    StartProc Me
     
    If MakeNewOutputSheet() = False Then Exit Sub
    Set Base = Range("A" & Format(ActiveCell.Row))
    SetTitle Base, "Sign Test"
    
    S0 = 0#
    S1 = 0#
    S2 = 0#
    For Each X In InputRange
        If IsOKnumber(X) = True Then
            Select Case True
            Case X < Hyp
                S1 = S1 + 1#
            Case X = Hyp
                S0 = S0 + 1#
            Case X > Hyp
                S2 = S2 + 1#
            End Select
        End If
    Next X
    
    Base.Range("C3") = "hypothesized value"
    Base.Range("C4") = "median " & Label
    Base.Range("C5") = "below"
    Base.Range("C6") = "equal"
    Base.Range("C7") = "above"
    Base.Range("C9") = "n"
    Base.Range("C11") = "binomial"
    Base.Range("C11").Font.Underline = xlUnderlineStyleSingle
    Base.Range("C14") = "normal approximation"
    Base.Range("C14").Font.Underline = xlUnderlineStyleSingle
    Base.Range("C15") = "z"
    
    Base.Range("C2:C15").HorizontalAlignment = xlLeft
    
    n = S1 + S2
    Base.Range("B3") = Hyp
    Base.Range("B4") = Application.Median(InputRange)
    Base.Range("B5") = S1
    Base.Range("B6") = S0
    Base.Range("B7") = S2
    Base.Range("B9") = n
    
    endi = Application.Min(S1, S2)
    ln_prob = n * Log(0.5)
    Prob = Exp(ln_prob)
    For i = 1 To endi
        ln_prob = ln_prob + Log((n + 1 - i) / i)
        Prob = Prob + Exp(ln_prob)
    Next i
    
    Base.Range("B12") = Prob
    Display_pvalue Base, "B12", frmNPSignTest

    S = Application.Max(S1, S2)
    z = (2 * S - 1 - n) / Sqr(n)
    Base.Range("B15") = z
    Base.Range("B15").NumberFormat = "0.00"
    Base.Range("B16") = 1 - Application.NormSDist(z)
    Display_pvalue Base, "B16", frmNPSignTest
    
    EndProc Base
    Exit Sub
    
MainErrorHandler:
    If errcheck("Sign Test") = vbYes Then Exit Sub Else Resume
End Sub


Attribute VB_Name = "frmNP_Friedman"
Attribute VB_Base = "0{41B6B32E-58D9-44A3-A877-43385E36B6D3}{14CEFAD4-0494-4822-8B07-FCB6D36F27C7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'''MegaStat|fffd| Friedman Test module |fffd|2005 by J. B. Orris
'frmNP_Friedman

Option Explicit

Private Sub UserForm_Activate()
    Me.InputBox.SetFocus
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    Friedman_Kendall
End Sub

Private Sub buttonClear_Click()
    ClearLast
    Me.Hide
    Unload Me
    OpenUserForm "Friedman"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then Me.InputBox.SetFocus
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    Dim Which As Long
    If Me.Tag = "Friedman" Then Which = 4860 Else Which = 4870
    CallHelp Which
End Sub

Private Sub InputBox_DblClick(Cancel As Boolean)
    Me.InputBox.Text = SetAddr(Me, Me.InputBox)
End Sub

Private Sub InputBox_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBox.Text = SetAddr(Me, Me.InputBox)
    End If
End Sub

Private Sub Label1_Click()
        Me.InputBox.Text = SetAddr(Me, Me.InputBox)
End Sub

Public Sub Friedman_Kendall()
   On Error GoTo MainErrorHandler
   Application.EnableCancelKey = xlErrorHandler
     
    Dim InputRange As Range
    Dim Base As Range
    Dim st As String
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    Dim ColLabels As Range
    Dim ColLabelsQ As Integer
    Dim X As Range
    Dim nCols As Integer
    Dim nRows As Integer
    Dim col As Object
    Dim value As Range
    Dim tbase As Range
    Dim sortrange As Range
    Dim TieCorr As Double
    Dim TotalTieCorr As Double
    Dim rr As Double
    Dim F As Double
    Dim W As Double
    Dim Rs As Double
    Dim base2 As Range
    Dim Title As String
    
     'validation
    If ValidRange(Me.InputBox, vbYes) = False Then Exit Sub
    Set InputRange = Range(InputBox)
    InputRange.Worksheet.Activate

    If StopQ1("Must select at least two columns.", InputRange.Columns.count < 2, InputRange, 1008, Me.InputBox) = True Then Exit Sub
        
    'set InputRange
    Set ColLabels = InputRange.Rows(1).Cells
    ColLabelsQ = LabelCheck(ColLabels)
    If ColLabelsQ = vbCancel Then Exit Sub
    
    If ColLabelsQ = vbYes Then
        i = 2
    Else
        i = 1
        Check_Stealth_Labels ColLabelsQ, ColLabels, InputRange
    End If
    
    Set X = InputRange.Range(Cells(i, 1), Cells(InputRange.Rows.count, InputRange.Columns.count))
    'check for silly input
    If IsItSilly(InputRange) = vbYes Then
        Me.InputBox.SetFocus
        Exit Sub
    End If
   
    nCols = X.Columns.count
    nRows = X.Rows.count
    ReDim R(1 To nCols)
    For Each col In X.Columns
        If StopQ1("Empty group. Cannot continue.", Application.count(col) = 0, col, 1006, Me.InputBox) = True Then Exit Sub
    Next col
    
    'check for valid data
    For Each value In X
        If StopQ1("Input range contains missing or invalid data. Cannot continue.", IsNumeric(value) = False Or IsEmpty(value) = True, value, 1006, Me.InputBox) = True Then Exit Sub
    Next value
    
    StartProc Me
    
    If MakeNewOutputSheet() = False Then Exit Sub
    Set Base = Range("A" & Format(ActiveCell.Row))
    
    'move  data from range to TempSheet and convert to ranks
    Set tbase = ThisWorkbook.Sheets("TempSheet").Range("A4")

    Randomize
    For i = 0 To nRows - 1
        For j = 0 To nCols - 1
            tbase.Offset(i, j).value = X.Range("A1").Offset(i, j).Value2
            tbase.Offset(i + 1, j).Value2 = j + 1
        Next j
        tbase.Offset(i, nCols).value = 1E+305 * (10 + Rnd())
        tbase.Offset(i + 1, nCols).value = nCols + 1
        Set sortrange = tbase.Range("A1").Offset(i, 0).Resize(2, nCols + 1)

        RankTempSheetbyRows sortrange, nCols, TieCorr
        TotalTieCorr = TotalTieCorr + TieCorr
        For j = 1 To nCols
            R(j) = R(j) + sortrange.Offset(0, j - 1).Range("A1").value
        Next j
    Next i
    Set sortrange = Nothing
    tbase.CurrentRegion.NumberFormat = "0.00"
    'calculations
    For j = 1 To nCols
        rr = rr + R(j) ^ 2
    Next j
    If Me.CheckTies.value = False Then TotalTieCorr = nRows * nCols
    
    F = (12 * rr - 3 * nRows ^ 2 * nCols * (nCols + 1) ^ 2) / (nRows * nCols * (nCols + 1) + (nRows * nCols - TotalTieCorr) / (nCols - 1))
    
    Select Case Me.Tag
        Case "Friedman"
            Title = "Friedman Test"
        Case "Kendall"
            Title = "Kendall Coefficient of Concordance"
            W = F / (nRows * (nCols - 1))
            Rs = (nRows * W - 1) / (nRows - 1)
    End Select

    Base.Range("B4:D4").value = Array("Sum of Ranks", "Avg. Rank", "")
    FmtHeader1 Base.Range("B4:D4")
    
    For i = 1 To nCols
        Base.Offset(i + 3, 1).Range("A1:B1") = Array(R(i), R(i) / nRows)
        Base.Offset(i + 3, 1).Range("B1").HorizontalAlignment = xlCenter
        If ColLabelsQ = vbYes Then
            Base.Offset(i + 3, 3) = " " & ColLabels.Columns(i)
            Base.Offset(i + 3, 3).NumberFormat = ColLabels.Columns(i).NumberFormat
        Else
            Base.Offset(i + 3, 3) = " Group " & i
        End If
    Next i

    With Base.Offset(i + 3, 0)
        .Range("B1:D1") = Array((nCols * (nCols + 1) / 2) * nRows, (nCols + 1) / 2, " Total")
        .CurrentRegion.Columns(2).NumberFormat = AutoFormat(2, 0)
        .CurrentRegion.Columns(3).NumberFormat = AutoFormat(2, 0)
        .Range("C1").HorizontalAlignment = xlCenter
    End With
    FmtBottomRow Base.Offset(i + 3, 1).Range("A1:C1")

    Set base2 = Base.Offset(i + 5)
    st = " chi-square"
    If Me.CheckTies.value = True Then
        If TotalTieCorr > 0 Then st = st & " (corrected for ties)"
    End If
        
    base2.Range("D1").value = " n"
    base2.Range("D2").value = st
    base2.Range("D3").value = " d.f."
    base2.Range("D4").value = " p-value"
    
    base2.Range("C1").value = nRows
    base2.Range("C2").value = F
    base2.Range("C3").value = nCols - 1
    base2.Range("C4").value = Application.Chidist(F, nCols - 1)
    
    base2.Range("C2").NumberFormat = "0.000"
    base2.Range("C3").NumberFormat = "0"
    FormatPvalue base2.Range("C4"), xlYes

    Select Case Me.Tag
        Case "Friedman"
            base2.Range("C6").value = "multiple comparison values for avg. ranks"
            base2.Range("D7:F7").value = Array("'(.05)", " ", "'(.01)")
            
            base2.Range("C7").value = Application.NormSInv(1 - (0.05 / (nCols * (nCols - 1)))) * Sqr(nCols * (nCols + 1) / (6 * nRows))
            base2.Range("E7").value = Application.NormSInv(1 - (0.01 / (nCols * (nCols - 1)))) * Sqr(nCols * (nCols + 1) / (6 * nRows))
            base2.Range("C7:E7").NumberFormat = "0.00"
            If base2.Range("E7").Columns.ColumnWidth < 7 Then base2.Range("E7").Columns.ColumnWidth = 7
            
        Case "Kendall"
            base2.Range("D6").value = " W"
            base2.Range("D7").value = " avg. rank-order correlation"
            
            base2.Range("C6").value = W
            base2.Range("C7").value = Rs
            
            base2.Range("C6:C7").NumberFormat = "0.000"
    End Select
    Union(Base.Range("A5").CurrentRegion.Columns("B:C"), base2.Range("C1").CurrentRegion.Columns("A")).Columns.AutoFit
    
    SetTitle Base, Title
    
    If Me.CheckData = True Then
        For i = 1 To nCols
            If ColLabelsQ = vbYes Then
                base2.Offset(9, i - 1).value = ColLabels.Columns(i)
                base2.Offset(9, i - 1).NumberFormat = ColLabels.Columns(i).NumberFormat
            Else
                base2.Offset(9, i - 1).value = "Group " & i
            End If
            base2.Offset(9, i - 1).Range("A1").HorizontalAlignment = xlRight
            base2.Offset(9, i - 1).Range("A1").WrapText = True
        Next i

        For j = 1 To nRows
            For k = 1 To nCols
                base2.Offset(9 + j, k - 1) = tbase.Offset(j - 1, k - 1).value
            Next k
        Next j
    End If

    EndProc Base
    Exit Sub
MainErrorHandler:
    If errcheck(frmNP_Friedman.Tag & " Test") = vbYes Then Exit Sub Else Resume
    
End Sub

Sub RankTempSheetbyRows(sortrange As Range, nCols As Integer, TieCorr As Double)
    Dim i As Integer
    Dim j As Integer
    Dim Flag As Integer
    Dim R As Double
    Dim S As Double
    Dim t As Variant
    Dim CurrentCell As Range

    sortrange.Sort Key1:=sortrange.Range("A1"), Order1:=xlAscending, _
        Header:=xlNo, OrderCustom:=1, MatchCase:=False, Orientation:=xlSortRows

    TieCorr = 0
    t = 0
    Flag = False
    For i = 0 To nCols - 1
        Set CurrentCell = sortrange.Offset(0, i).Range("A1")
        If CurrentCell.value = sortrange.Offset(0, i + 1).Range("A1").value Then
            S = S + i
            t = t + 1
            Flag = True
        Else
            If Flag = False Then
                CurrentCell.value = i + 1
                TieCorr = TieCorr + 1
            Else
                S = S + i
                t = t + 1
                R = S / t
                For j = i - t + 1 To i
                    sortrange.Range("A1").Offset(0, j).Range("A1").value = R + 1
                Next j
                TieCorr = TieCorr + t ^ 3
                S = 0
                t = 0
                Flag = False
            End If
        End If
    Next i
    
    sortrange.Sort Key1:=sortrange.Range("A2"), Order1:=xlAscending, _
        Header:=xlNo, OrderCustom:=1, MatchCase:=False, Orientation:=xlSortRows
End Sub
Attribute VB_Name = "frmNP_KW"
Attribute VB_Base = "0{A8678382-57A9-4AA1-847B-AAFB29939E80}{DF479BAF-EFC4-4DD0-9E4C-B131F808A511}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'''MegaStat|fffd| Kruskal-Wallis Test module |fffd|2005 by J. B. Orris
'frmNP_KW

Option Explicit

Private Sub UserForm_Activate()
    Me.InputBox.SetFocus
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    KW
End Sub

Private Sub buttonClear_Click()
    ClearLast
    Me.Hide
    Unload Me
    OpenUserForm "KW"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then Me.InputBox.SetFocus
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    CallHelp 4850
End Sub

Private Sub InputBox_DblClick(Cancel As Boolean)
    Me.InputBox.Text = SetAddr(Me, Me.InputBox)
End Sub

Private Sub InputBox_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBox.Text = SetAddr(Me, Me.InputBox)
    End If
End Sub

Private Sub Label2_Click()
        Me.InputBox.Text = SetAddr(Me, Me.InputBox)
End Sub

Public Sub KW()
   On Error GoTo MainErrorHandler
   Application.EnableCancelKey = xlErrorHandler
     
    Dim InputRange As Range
    Dim X As Range
    Dim Base As Range
    Dim base2 As Range
    Dim ColLabels As Range
    Dim ColLabelsQ As Integer
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    Dim nGroups As Integer
    Dim bigN As Long
    Dim value As Variant
    Dim tbase As Range
    Dim TieCorr As Double
    Dim h As Double
    Dim st As String

    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub
    'validation
    If ValidRange(Me.InputBox, vbYes) = False Then Exit Sub
    Set InputRange = Range(InputBox)
    InputRange.Worksheet.Activate

    If StopQ1("Must select at least two columns.", InputRange.Columns.count < 2, InputRange, 1008, Me.InputBox) = True Then Exit Sub
        
    'set InputRange
    Set ColLabels = InputRange.Rows(1).Cells
    ColLabelsQ = LabelCheck(ColLabels)
    If ColLabelsQ = vbCancel Then Exit Sub
    
    If ColLabelsQ = vbYes Then
        i = 2
    Else
        i = 1
        Check_Stealth_Labels ColLabelsQ, ColLabels, InputRange
    End If

    Set X = InputRange.Range(Cells(i, 1), Cells(InputRange.Rows.count, InputRange.Columns.count))
    'check for silly input
    If IsItSilly(InputRange) = vbYes Then
        Me.InputBox.SetFocus
        Exit Sub
    End If
   
    nGroups = X.Columns.count
    ReDim Group(nGroups)
    ReDim n(nGroups)
    ReDim sumRank(nGroups)
    
    For i = 1 To nGroups
        Set Group(i) = X.Columns(i).Cells
    Next i
    
    StartProc Me

    If MakeNewOutputSheet() = False Then Exit Sub
    Set Base = Range("A" & Format(ActiveCell.Row))
    'move valid data from range to TempSheet
    Set tbase = ThisWorkbook.Sheets("TempSheet").Range("A4")
    
    For i = 1 To nGroups
        Set Group(i) = X.Columns(i).Cells
        For Each value In Group(i)
            If Application.IsNumber(value) = True And IsEmpty(value) = False Then
                n(i) = n(i) + 1
                j = j + 1
                tbase.Offset(j, 0).value = j
                If ColLabelsQ = vbYes Then tbase.Offset(j, 1).value = ColLabels(i) Else tbase.Offset(j, 1).value = "Group " & i
                tbase.Offset(j, 2).value = value.value
                tbase.Offset(j, 3).value = value.value
                tbase.Offset(j, 4).value = i
            End If
        Next value
        If StopQ0("Not enough valid data to perform test.", n(i) <= 2, 1001, Me.InputBox) = True Then Exit Sub
        bigN = bigN + n(i)
    Next i


    RankTempSheet tbase, TieCorr
    
    For i = 1 To bigN
        j = tbase.Offset(i, 4).value
        sumRank(j) = sumRank(j) + tbase.Offset(i, 3).value
    Next i
    
    h = 0
    For j = 1 To nGroups
        h = h + (n(j) * (sumRank(j) / n(j)) ^ 2)
    Next j
    st = " H"
    h = 12 / (bigN * (bigN + 1)) * h - 3 * (bigN + 1)
    
    If Me.CheckTies.value = True Then
        h = h / (1 - TieCorr / (bigN ^ 3 - bigN))
        If TieCorr > 0 Then st = st & " (corrected for ties)"
    End If
    
    SetTitle Base, "Kruskal-Wallis Test"
    
    Base.Range("A4:E4").value = Array(" ", "Median", "n", "Avg. Rank", "")
    FmtHeader1 Base.Range("A4:E4")
    
    For i = 1 To nGroups
        Base.Offset(i + 3, 1).Range("A1:C1") = Array(Application.Median(Group(i)), n(i), sumRank(i) / n(i))
        If ColLabelsQ = vbYes Then
            Base.Offset(i + 3, 4) = " " & ColLabels.Columns(i)
            Base.Offset(i + 3, 4).NumberFormat = ColLabels.Columns(i).NumberFormat
        Else
            Base.Offset(i + 3, 4) = " Group " & i
        End If
    Next i

    With Base.Offset(i + 3, 0)
        .Range("A1:E1") = Array(" ", Application.Median(X), bigN, " ", "Total")
        .CurrentRegion.Columns(2).NumberFormat = AutoFormat(2, 0)
        .CurrentRegion.Columns(3).NumberFormat = "0"
        .CurrentRegion.Columns(3).HorizontalAlignment = xlCenter
        .CurrentRegion.Columns(4).NumberFormat = AutoFormat(2, 0)
    End With
    FmtBottomRow Base.Offset(i + 3, 1).Range("A1:D1")
        
    Set base2 = Base.Offset(i + 5)
    
    base2.Range("E1").value = st
    base2.Range("E2").value = " d.f."
    base2.Range("E3").value = " p-value"
    
    base2.Range("D1").value = h
    base2.Range("D2").value = nGroups - 1
    base2.Range("D3").value = Application.Chidist(h, base2.Range("D2").value)
    
    base2.Range("D1").NumberFormat = "0.000"
    base2.Range("D2").NumberFormat = "0"
    FormatPvalue base2.Range("D3"), xlYes
    

    base2.Range("C5").value = "multiple comparison values for avg. ranks"
    base2.Range("D6:F6").value = Array("'(.05)", " ", "'(.01)")
    
    base2.Range("C6").value = Application.NormSInv(1 - (0.05 / (nGroups * (nGroups - 1)))) * Sqr(bigN * (bigN + 1) / 12 * (1 / (bigN / nGroups) + 1 / (bigN / nGroups)))
    base2.Range("E6").value = Application.NormSInv(1 - (0.01 / (nGroups * (nGroups - 1)))) * Sqr(bigN * (bigN + 1) / 12 * (1 / (bigN / nGroups) + 1 / (bigN / nGroups)))
    base2.Range("C6:E6").NumberFormat = "0.00"
    If base2.Range("E6").Columns.ColumnWidth < 7 Then base2.Range("E6").Columns.ColumnWidth = 7
    
    Union(Base.Range("B4").CurrentRegion.Columns("B:D"), base2.Range("A1").CurrentRegion.Columns("D"), base2.Range("C6")).Columns.AutoFit
    If Me.CheckData = True Then
        tbase.Offset(1, 1).CurrentRegion.Sort Key1:=tbase.Range("A2"), Order1:=xlAscending, _
            Header:=xlNo, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
        base2.Offset(7, 0).Range("A1:D1") = Array("No.", "Label", "Data", "Rank")
        base2.Offset(7, 0).Range("A1:D1").HorizontalAlignment = xlRight
        base2.Offset(7, 0).Range("B1").HorizontalAlignment = xlLeft
        For j = 1 To bigN
            For k = 0 To 3
                base2.Offset(7 + j, k) = tbase.Offset(j, k).value
                For i = 1 To nGroups
                    If base2.Offset(7 + j, k).value = ColLabels(i) Then
                        base2.Offset(7 + j, k).NumberFormat = ColLabels(i).NumberFormat
                        base2.Offset(7 + j, k).HorizontalAlignment = xlLeft
                    End If
                Next i
            Next k
        Next j
        base2.Offset(7).CurrentRegion.Columns(2).AutoFit
    End If

    EndProc Base
    Exit Sub
    
MainErrorHandler:
    If errcheck("Kruskal-Wallis Test") = vbYes Then Exit Sub Else Resume
End Sub
Attribute VB_Name = "frmNP_WMW_SR"
Attribute VB_Base = "0{5562DF13-B565-49B8-A558-270F149432E5}{A027C516-2729-4F15-A44A-B46F825989FF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'''MegaStat|fffd| Wilcoxon/Mann-Whitney module |fffd|2005 by J. B. Orris
'frmNP_WMW_SR

Option Explicit

Private Sub UserForm_Activate()
    InitComboBoxAlt Me
    Me.InputBox1.SetFocus
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    WMW_SR
End Sub

Private Sub buttonClear_Click()
    ClearLast
    Me.Hide
    Unload Me
    OpenUserForm "WMW"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then Me.InputBox1.SetFocus
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
        Dim st As Long
        If Me.Tag = "WMW" Then st = 4830 Else st = 4840
        CallHelp st
End Sub

Private Sub InputBox1_DblClick(Cancel As Boolean)
    Me.InputBox1.Text = SetAddr(Me, Me.InputBox1)
End Sub

Private Sub InputBox2_DblClick(Cancel As Boolean)
    Me.InputBox2.Text = SetAddr(Me, Me.InputBox2)
End Sub

Private Sub Label1_Click()
        Me.InputBox1.Text = SetAddr(Me, Me.InputBox1)
End Sub

Private Sub Label2_Click()
        Me.InputBox2.Text = SetAddr(Me, Me.InputBox2)
End Sub

Private Sub InputBox1_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBox1.Text = SetAddr(Me, Me.InputBox1)
    End If
End Sub

Private Sub InputBox2_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBox2.Text = SetAddr(Me, Me.InputBox2)
    End If
End Sub

Public Sub WMW_SR()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler
       
    Dim X As Variant
    Dim Y As Variant
    Dim xr As Range
    Dim yr As Range
    Dim Label(2) As String
    Dim Group(2) As Range
    Dim Base As Range
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    Dim n(2) As Integer
    Dim bigN As Long
    Dim nMissing As Integer
    Dim st As String
    Dim tempLabel As String
    Dim tbase As Range
    Dim TieCorr As Double
    Dim Flag As Boolean
    Dim R As Double
    Dim m As Long
    Dim S As Double
    Dim t As Variant
    Dim sumRank(2) As Double
    Dim z As Double
    Dim Mean As Double
    Dim sd As Double
    Dim CCF As Double
    Dim Fmt(2) As String
    
    
    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub
    'validation
    If ValidRange(Me.InputBox1, vbNo) = False Then Exit Sub
    Set Group(1) = Range(Me.InputBox1.Text)

    If ValidRange(Me.InputBox2, vbNo) = False Then Exit Sub
    Set Group(2) = Range(Me.InputBox2.Text)
    
    nMissing = 0
    j = 0
    For i = 1 To 2
         Label(i) = "Group" & Str(i)
         'check for label
        If IsLabel(Group(i).Range("A1")) = True Then
            Label(i) = Group(i).Range("A1")
            Fmt(i) = Group(i).Range("A1").NumberFormat
            nMissing = nMissing - 1
        Else
            If Group(i).Rows(1).Row > 1 Then
                If IsLabel(Group(i)(1).Offset(-1, 0)) = True Then Label(i) = Group(i)(1).Offset(-1, 0).value
                Fmt(i) = Group(i)(1).Offset(-1, 0).NumberFormat
            End If
        End If
    Next i
   
    StartProc Me
   
    'move valid data from range to TempSheet
    Set tbase = ThisWorkbook.Sheets("TempSheet").Range("A4")

    Select Case Me.Tag
        Case "WMW"
            For i = 1 To 2
                For Each X In Group(i)
                    If Mid(X.NumberFormat, 1, 1) <> "h" Then
                        If Application.IsNumber(X) = True And IsEmpty(X) = False Then
                            n(i) = n(i) + 1
                            j = j + 1
                            tbase.Offset(j, 0).value = j
                            tbase.Offset(j, 1).value = "x" & Label(i)
                            tbase.Offset(j, 2).value = X
                            tbase.Offset(j, 3).value = X
                        Else
                            nMissing = nMissing + 1
                        End If
                    End If
                Next X
            Next i

            bigN = n(1) + n(2)
        
        Case "SR"
            If StopQ1("The input ranges are not the same size.", Group(1).count <> Group(2).count, Union(Group(1), Group(2)), 1007, Me.InputBox1) = True Then Exit Sub

            j = 0
            For i = 1 To Group(1).Rows.count
                Set xr = Group(1).Offset(i - 1, 0).Range("A1")
                Set yr = Group(2).Offset(i - 1, 0).Range("A1")
                X = Group(1).Offset(i - 1, 0).Range("A1").value
                Y = Group(2).Offset(i - 1, 0).Range("A1").value
                If Mid(Group(1).Offset(i - 1, 0).Range("A1").NumberFormat, 1, 1) <> "h" And Mid(Group(2).Offset(i - 1, 0).Range("A1").NumberFormat, 1, 1) <> "h" Then
                    If IsOKnumber(xr) = True And IsEmpty(xr) = False And IsOKnumber(yr) = True And IsEmpty(yr) = False And (X <> Y) = True Then
                        n(1) = n(1) + 1
                        j = j + 1
                        tbase.Offset(j, 0).value = " "
                        tbase.Offset(j, 1).value = j
                        tbase.Offset(j, 2).value = X - Y
                        tbase.Offset(j, 3).value = Abs(tbase.Offset(j, 2).value)
                    Else
                        nMissing = nMissing + 1
                    End If
                End If
            Next i
            n(2) = n(1)
            bigN = n(2)
    End Select

    If StopQ0("Not enough valid data to perform test.", n(1) <= 2 Or n(2) <= 2, 1001, Me.InputBox1) = True Then Exit Sub
    
    If MakeNewOutputSheet() = False Then Exit Sub
    Set Base = Range("A" & Format(ActiveCell.Row))

    Select Case Me.Tag
        Case "WMW"
            RankTempSheet tbase, TieCorr
    
            For i = 1 To bigN
                tempLabel = Mid(tbase.Offset(i, 1).value, 2, Len(Label(1)))
                If tempLabel = Label(1) Then
                    sumRank(1) = sumRank(1) + tbase.Offset(i, 3).value
                Else
                    sumRank(2) = sumRank(2) + tbase.Offset(i, 3).value
                End If
            Next i
            
            If Me.CheckTies.value = False Then TieCorr = 0
            Mean = n(1) * (bigN + 1) / 2
            sd = Sqr(((n(1) * n(2) * (bigN + 1)) / 12) - ((n(1) * n(2) / (12 * bigN * (bigN - 1))) * TieCorr))
            CCF = 0#
            If sumRank(1) - Mean > 0 Then CCF = -0.5 Else CCF = 0.5
            z = (sumRank(1) + CCF - Mean) / sd
        
            Base.Range("B5") = n(1)
            Base.Range("B6") = n(2)
            Base.Range("C5") = sumRank(1)
            Base.Range("C6") = sumRank(2)
            FmtOutline Base.Range("B5").CurrentRegion
            Base.Range("B7") = n(1) + n(2)
            Base.Range("C7") = sumRank(1) + sumRank(2)
            
            Base.Range("D5") = " " & Label(1)
            Base.Range("D5").NumberFormat = Fmt(1)
            Base.Range("D6") = " " & Label(2)
            Base.Range("D6").NumberFormat = Fmt(2)
            Base.Range("D7") = " total"
            Base.Range("D5:D7").HorizontalAlignment = xlLeft

            Base.Range("B4") = "n "
            Base.Range("C4") = "sum of ranks "

            Base.Range("B4:C7").HorizontalAlignment = xlCenter
            Base.Range("B4:C7").Columns.ColumnWidth = 12
            

            Case "SR"
            RankTempSheet tbase, TieCorr
            S = 0
            R = 0
            For i = 1 To n(1)
                If tbase.Offset(i, 2).value > 0 Then S = S + tbase.Offset(i, 3).value Else R = R + tbase.Offset(i, 3).value
            Next i
            Base.Range("C4") = "variables:"
            Base.Range("C4").HorizontalAlignment = xlRight
            Base.Range("D4") = Format(Label(1), Fmt(1)) & " - " & Format(Label(2), Fmt(2))
            Base.Range("D5") = "sum of positive ranks"
            Base.Range("D6") = "sum of negative ranks"
            Base.Range("C5") = S
            Base.Range("C6") = R
            Base.Range("C8") = bigN
            Base.Range("D8") = " n"
            If Me.CheckTies.value = False Then TieCorr = 0
            Mean = bigN * (bigN + 1) / 4
            sd = Sqr((bigN * (bigN + 1) * (2 * bigN + 1)) / 24 - TieCorr / 2)
            z = (S - Mean) / sd
    End Select
    If Me.Tag = "WMW" Then st = "Wilcoxon - Mann/Whitney Test" Else st = "Wilcoxon Signed Rank Test"
    SetTitle Base, st

    Base.Range("C9") = Mean
    Base.Range("D9") = " expected value"
    
    Base.Range("C10") = sd
    Base.Range("D10") = " standard deviation"
    Base.Range("C9:C10").Columns.AutoFit

    Base.Range("C11") = z
    st = " z"
    If TieCorr > 0 Then st = st & ", corrected for ties"
    Base.Range("D11") = st
    Base.Range("C9:C11").NumberFormat = "0.00"

    Base.Range("C12") = 1 - Application.NormSDist(Abs(Base.Range("C11")))
    Display_pvalue Base, "C12", frmNP_WMW_SR

    If Me.Tag = "WMW" Then EqualWidthCol Base.Range("B4:C7").Columns("A:B")
  
    If Me.CheckData = True Then
        If Me.Tag = "WMW" Then st = "A2" Else st = "B2"
        tbase.Offset(1, 1).CurrentRegion.Sort Key1:=tbase.Range(st), Order1:=xlAscending, _
            Header:=xlNo, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
        Base.Offset(14, 0).Range("A1:D1") = Array("No.", "Label", "Data", "Rank")
        Base.Offset(14, 0).Range("A1:D1").HorizontalAlignment = xlRight
        Base.Offset(14, 0).Range("B1").HorizontalAlignment = xlLeft
        For j = 1 To bigN
            For k = 0 To 3
                X = tbase.Offset(j, k).value
                Base.Offset(14 + j, k) = X
                If k = 1 And Me.Tag = "WMW" Then
                    Base.Offset(14 + j, k) = Mid(X, 2, Len(X) - 1)
                    If Base.Offset(14 + j, k) = Label(1) Then Base.Offset(14 + j, k).NumberFormat = Fmt(1)
                    If Base.Offset(14 + j, k) = Label(2) Then Base.Offset(14 + j, k).NumberFormat = Fmt(2)
                End If
            Next k
        Next j
        Base.Offset(13, 0).CurrentRegion.Columns("b").HorizontalAlignment = xlRight
        Base.Offset(13, 0).CurrentRegion.Columns("D").ColumnWidth = 8
    End If

    EndProc Base
    Exit Sub
    
MainErrorHandler:
    If errcheck("Wilcoxon - Mann-Whitney Test") = vbYes Then Exit Sub Else Resume
End Sub
Attribute VB_Name = "frmNP_WW"
Attribute VB_Base = "0{B39D624D-9CF9-42D5-88D3-9196389A1266}{4A89FA81-C8D4-432C-A58F-1BDD3AE155A2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'''MegaStat|fffd| Runs Test module |fffd|2005 by J. B. Orris
'frmNP_WW

Option Explicit

Private Sub UserForm_Activate()
    InitComboBoxAlt Me
    Me.InputBox.SetFocus
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    RunsTest
End Sub

Private Sub buttonClear_Click()
    ClearLast
    Me.Hide
    Unload Me
    OpenUserForm "WW"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then Me.InputBox.SetFocus
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    CallHelp 4820
End Sub

Private Sub InputBox_DblClick(Cancel As Boolean)
    Me.InputBox.Text = SetAddr(Me, Me.InputBox)
End Sub

Private Sub InputBox_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBox.Text = SetAddr(Me, Me.InputBox)
    End If
End Sub

Private Sub Label1_Click()
        Me.InputBox.Text = SetAddr(Me, Me.InputBox)
End Sub

Public Sub RunsTest()
   On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler

    Dim InputRange As Range
    Dim Base As Range
    Dim base2 As Range
    Dim i As Integer
    Dim j As Integer
    Dim testlabel As Variant
    Dim X As Range
    Dim Flag As Boolean
    Dim Label As Variant
    Dim TypeA As Variant
    Dim TypeB As Variant
    Dim value As Range
    Dim RunsA As Long
    Dim RunsB As Long
    Dim CountA As Long
    Dim CountB As Long
    Dim totalRuns As Long
    Dim n As Long
    Dim TestCell As Variant
    Dim CurrentCell As Variant
    Dim Mean As Double
    Dim sd As Double
    Dim z As Double
    Dim n1 As Double
    Dim n2 As Double
    Dim g As Double
    Dim R As Double
    Dim Rmax As Double
    Dim a As Double
    Dim b As Double
    Dim Prob As Double
    Dim lnden As Double
    Dim cumprob As Double
    Dim ev As Double
    Dim var As Double
    Dim h As Double
    
    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub
    
    If ValidRange(Me.InputBox, vbYes) = False Then Exit Sub
    Set InputRange = Range(Me.InputBox.Text)
    InputRange.Worksheet.Activate
    
    If StopQ1("Not enough data selected.", InputRange.Rows.count <= 3, InputRange.Rows, 1001, Me.InputBox) = True Then Exit Sub
    If StopQ1("Data must be in a single column.", InputRange.Columns.count > 1, InputRange, 1005, Me.InputBox) = True Then Exit Sub
  
'check for label
    testlabel = InputRange.Cells(1)
    Flag = False
    For i = 2 To InputRange.Cells.count
        If testlabel = InputRange.Cells(i) Then Flag = True
    Next i

    If Flag = False Then
        Label = testlabel
        Set X = InputRange.Offset(1, 0).Resize(InputRange.Rows.count - 1, 1)
    Else
        testlabel = InputRange.Cells(1).Offset(-1, 0)
        Flag = False
        For i = 1 To InputRange.Cells.count
            If testlabel = InputRange.Cells(i) Then Flag = True
        Next i
        Set X = InputRange
    End If
    
    If Flag = True Or testlabel = "" Then Label = "(no label)" Else Label = testlabel

    'check for empty cells
    For Each value In X
        If StopQ1("Input range contains missing data. Cannot continue.", IsEmpty(value) = True, value, 1006, Me.InputBox) = True Then Exit Sub
    Next value

    TypeA = X.Cells(1)
    For i = 2 To X.count
        If TypeA <> X.Cells(i) Then
            TypeB = X.Cells(i)
            Exit For
        End If
    Next i
    
    For j = i + 1 To X.count
        If StopQ1("Input range contains more than two different values. Cannot continue.", X.Cells(j) <> TypeA And X.Cells(j) <> TypeB, X.Cells(j), 1006, Me.InputBox) = True Then Exit Sub
    Next j
    

    StartProc Me
    
    If MakeNewOutputSheet() = False Then Exit Sub
    Set Base = Range("A" & Format(ActiveCell.Row))
    SetTitle Base, "Runs Test for Random Sequence"
    
    Base.Range("C4") = "variable:"
    Base.Range("D4") = Label
    Base.Range("D4").NumberFormat = InputRange.Cells(1).NumberFormat
    Base.Range("C4").HorizontalAlignment = xlRight
    Base.Range("D4").HorizontalAlignment = xlLeft
  'do calculations
    TestCell = ""
    RunsA = 0
    RunsB = 0
    CountA = 0
    CountB = 0
    
    For i = 1 To X.count
        CurrentCell = X.Cells(i).value
        If CurrentCell = TypeA Then CountA = CountA + 1 Else CountB = CountB + 1
        If CurrentCell <> TestCell Then
            If CurrentCell = TypeA Then RunsA = RunsA + 1 Else RunsB = RunsB + 1
            TestCell = CurrentCell
        End If
    Next i
    
    Base.Range("B7") = CountA
    Base.Range("B8") = CountB
    Base.Range("C7") = RunsA
    Base.Range("C8") = RunsB
    FmtOutline Base.Range("B7").CurrentRegion
    Base.Range("D7") = " " & TypeA
    Base.Range("D8") = " " & TypeB
    Base.Range("D7:D8").HorizontalAlignment = xlLeft
    n = CountA + CountB
    totalRuns = RunsA + RunsB
    Base.Range("D9") = "total"
    Base.Range("B9") = n
    Base.Range("C9") = totalRuns
    
    Base.Range("C11") = " expected value"
    Base.Range("C12") = " standard deviation"
    Base.Range("C13") = " z"
    
    Base.Range("B6") = "   n   "
    Base.Range("C6") = " runs  "
    Base.Range("B8").CurrentRegion.HorizontalAlignment = xlCenter
    Base.Range("B6:C9").Columns.AutoFit
    Base.Range("B6:C9").Columns.AutoFit
    
    Mean = 2 * CountA * CountB / n + 1
    sd = Sqr((2 * CountA * CountB * (2 * CountA * CountB - n)) / (n ^ 2 * (n - 1)))
    If totalRuns < Mean Then h = 0.5 Else h = -0.5
    If totalRuns = Mean Then h = 0
    z = (totalRuns + h - Mean) / sd
    Base.Range("B11") = Mean
    Base.Range("B12") = sd
    Base.Range("B13") = z
    Base.Range("B11:B13").NumberFormat = "0.00"
    
    Base.Range("B14") = 1 - Application.NormSDist(Abs(Base.Range("B13")))
    Display_pvalue Base, "B14", frmNP_WW

    If Me.chkRunsDist.value = True Then
        n1 = CountA
        n2 = CountB
        
        Set base2 = Base.Offset(22, 0)
        base2.Offset(-6, 1) = "     Probability distribution for total runs"
        base2.Offset(-4, 2) = n1
        base2.Offset(-4, 3) = "n1"
        base2.Offset(-3, 2) = n2
        base2.Offset(-3, 3) = "n2"
        
        If n1 = n2 Then Rmax = 2 * n1 Else Rmax = 2 * Application.Min(n1, n2) + 1
        
        lnden = LnComb(n1 + n2, n1)
        cumprob = 0
        
        ev = 0
        var = 0
        For R = 2 To Rmax
            base2.Offset(R - 2, 1).value = R
            If R Mod 2 > 0 Then
                'odd
                g = (R - 1) / 2
                a = LnComb2(n1 - 1, g - 1) + LnComb2(n2 - 1, g) - lnden
                b = LnComb2(n1 - 1, g) + LnComb2(n2 - 1, g - 1) - lnden
    
                If R < Rmax Then
                    Prob = Exp(a) + Exp(b)
                Else
                    If n1 < n2 Then Prob = Exp(a) Else Prob = Exp(b)
                End If
                base2.Offset(R - 2, 2).value = Prob
            Else
                'even
                g = R / 2
                Prob = Exp(Log(2) + LnComb2(n1 - 1, g - 1) + LnComb2(n2 - 1, g - 1) - lnden)
                base2.Offset(R - 2, 2).value = Prob
            End If
            If R = 2 Then cumprob = Prob Else cumprob = cumprob + Prob
            base2.Offset(R - 2, 3).value = cumprob
            base2.Offset(R - 2, 4).value = 1 - base2.Offset(R - 3, 3).value
            ev = ev + base2.Offset(R - 2, 1).value * base2.Offset(R - 2, 2).value
        Next R
        base2.Offset(R - 2, 2).value = cumprob
        base2.CurrentRegion.Columns("B").NumberFormat = "#"
        base2.CurrentRegion.Columns("C:E").NumberFormat = "0.00000"
        base2.Offset(-1, 1).Range("A1:D1") = Array("R", "p(R) ", "p(r <= R) ", "p(r >= R) ")
        FmtHeader1 base2.Offset(-1, 1).Range("A1:D1")
        
        base2.Offset(RunsA + RunsB - 2, 0).Range("B1:E1").Interior.ColorIndex = 35
        FmtBottomRow1 base2.CurrentRegion.Rows(R - 1).Columns("B:E")
        base2.CurrentRegion.Columns("B:E").AutoFit
        EqualWidthCol Union(Base.Range("B7:C8"), base2.CurrentRegion.Columns("B:C")).Columns
        var = 0
        For R = 2 To Rmax
            var = var + base2.Offset(R - 2, 2) * (base2.Offset(R - 2, 1).value - ev) ^ 2
        Next R
        
        base2.Offset(Rmax + 1, 2).value = ev
        base2.Offset(Rmax + 2, 2).value = var
        base2.Offset(Rmax + 3, 2).value = Sqr(var)
        base2.Offset(Rmax + 1, 2).Range("A1:A3").NumberFormat = "0.00"
        
        base2.Offset(Rmax + 1, 3).value = "'= expected value"
        base2.Offset(Rmax + 2, 3).value = "'= variance"
        base2.Offset(Rmax + 3, 3).value = "'= standard deviation"
    
    End If

    EndProc Base
    Exit Sub
    
MainErrorHandler:
    If errcheck("Runs Test for Random Sequence") = vbYes Then Exit Sub Else Resume
End Sub

Private Function LnComb2(n, R) As Double
    If R = 0 Or R >= n Then LnComb2 = 0 Else LnComb2 = LnPerm(n, R) - LnFact(R)
End Function
Attribute VB_Name = "frmPtest1"
Attribute VB_Base = "0{DDE20C0C-FCC1-46D9-B24B-1A1317114314}{B79C0D4F-4B33-4A55-9319-9C70945A627A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'''MegaStat|fffd| Hypothesis Tests: Proportion vs Hypothesized module |fffd|2005 by J. B. Orris
'frmPtest1

Option Explicit

Private Sub UserForm_Activate()
    InitComboBoxCI Me
    InitComboBoxAlt Me
    input_p1.SetFocus
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    pTests Me
End Sub

Private Sub buttonClear_Click()
    Me.Hide
    Unload Me
    OpenUserForm "pVs"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then input_p1.SetFocus
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    CallHelp 4330
End Sub

Private Sub comboboxCI_Change()
    Me.CheckBoxCI.value = True
End Sub

Private Sub input_p1_Change()
    If Eval(Me.input_p1.Text) >= 1 Then
        Me.Label_p1.Caption = "x"
    Else
        Me.Label_p1.Caption = "p"
    End If
End Sub

Private Sub input_p2_Change()
    If Eval(Me.input_p2.Text) >= 1 Then
        Me.Label_p2.Caption = "x"
    Else
        Me.Label_p2.Caption = "p"
    End If
End Sub

Private Sub input_p1_DblClick(Cancel As Boolean)
    UpdateInput Me.input_p1
End Sub

Private Sub input_p2_DblClick(Cancel As Boolean)
    UpdateInput Me.input_p2
End Sub

Private Sub input_n1_DblClick(Cancel As Boolean)
    UpdateInput Me.input_n1
End Sub

Private Sub Label_p1_Click()
    UpdateInput Me.input_p1
End Sub

Private Sub Label_p2_Click()
    UpdateInput Me.input_p2
End Sub

Private Sub Label_n1_Click()
    UpdateInput Me.input_n1
End Sub

Sub pTests(Uform As Object)
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler

    Dim Base As Range
    Dim value As Range
    Dim X As Variant
    Dim InputValue(4) As Double
    Dim p0 As Double
    Dim p1 As Double
    Dim n1 As Double
    Dim p2 As Double
    Dim n2 As Double
    Dim pHyp As Double
    Dim z As Double
    Dim i As Integer
    Dim maxWidth As Integer
    Dim OK As Integer
    Dim Labels(2) As String
    Dim Which As Integer
    Dim ConfStr As String
    Dim ConfLevel As Double
    Dim tzVal As Double
    Dim se As Double
    
    If Uform.Visible = False Or globalAbortFlag = True Then Exit Sub
    
    If Uform.Name = "frmPtest1" Then Which = 1 Else Which = 2
    
    If Which = 1 Then
        Labels(1) = "Observed"
        Labels(2) = "Hypothesized"
    Else
        Labels(1) = "p1"
        Labels(2) = "p2"
    End If
    
    p1 = Eval(Uform.input_p1.Text)
    If StopQ0("Input value cannot be negative", p1 < 0, 1009, Uform.input_p1) = True Then Exit Sub
    
    n1 = Eval(Uform.input_n1.Text)
    If StopQ0("Input value cannot be zero or negative", n1 <= 0, 1011, Uform.input_n1) = True Then Exit Sub
    If StopQ0("p1 >= 1", p1 >= 1 And p1 / n1 > 1, 1012, Uform.input_n1) = True Then Exit Sub
    
    p2 = Eval(Uform.input_p2.Text)
    If StopQ0("Input value cannot be negative", p2 < 0, 1009, Uform.input_p2) = True Then Exit Sub
    
    If Which = 2 Then
        n2 = Eval(Uform.input_n2.Text)
        If StopQ0("Input value cannot be zero or negative", n2 <= 0, 1011, Uform.input_n2) = True Then Exit Sub
        If StopQ0("p2 >= 1", p2 >= 1 And p2 / n2 > 1, 1012, Uform.input_n1) = True Then Exit Sub
        pHyp = Eval(Uform.Input_pHyp.Text)
        If StopQ0("Value must be >= 0 and <=1", Abs(pHyp) < 0 Or Abs(pHyp) > 1, 1035, Uform.Input_pHyp) = True Then Exit Sub
    Else
        n2 = n1
    End If

    StartProc Uform
    
    If MakeNewOutputSheet() = False Then Exit Sub
    Set Base = Range("A" & Format(ActiveCell.Row))
    
    Base.Range("B4:C4") = Array(Labels(1), Labels(2))
    Base.Range("D5") = " p (as decimal)"
    Base.Range("D6") = " p (as fraction)"
    Base.Range("D7") = " X"
    Base.Range("D8") = " n"
    Base.Range("D10") = " difference"
    Base.Range("D11") = " hypothesized difference"
    Base.Range("D12") = " std. error"
    Base.Range("D13") = " z"
    Base.Range("B8") = n1
    Base.Range("C8") = n2
    
    If p1 < 1 Then
        Base.Range("B5:B6") = p1
        Base.Range("B7") = p1 * n1
    Else
        Base.Range("B5:B6") = p1 / n1
        Base.Range("B7") = p1
    End If
    
    If p2 < 1 Then
        Base.Range("C5:C6") = p2
        Base.Range("C7") = p2 * n2
    Else
        Base.Range("C5:C6") = p2 / n2
        Base.Range("C7") = p2
    End If

    If Which = 1 Then
        SetTitle Base, "Hypothesis test for proportion vs hypothesized value"
        FmtHeader1 Base.Range("B4:C4")
        Base.Range("C12") = Sqr(Base.Range("C5") * (1 - Base.Range("C5")) / Base.Range("C8"))
        Base.Range("C13") = (Base.Range("B5") - Base.Range("C5")) / Base.Range("C12")
    Else
        SetTitle Base, "Hypothesis test for two independent proportions"
        FmtHeader1 Base.Range("B4:D4")
        Base.Range("D4") = "pc"
        Base.Range("D4").Characters(start:=2, length:=1).Font.Subscript = True
        Base.Range("D5:D8").Copy
        Base.Range("E5:E8").PasteSpecial xlPasteValues
        Base.Range("D5:D8").Clear
        Base.Range("D7") = Base.Range("B7") + Base.Range("C7")
        Base.Range("D8") = Base.Range("B8") + Base.Range("C8")
        
        p0 = Base.Range("D7") / Base.Range("D8")
        Base.Range("D5:D6") = p0
        p1 = Base.Range("B5")
        p2 = Base.Range("C5")
        Base.Range("C10") = p1 - p2
        Base.Range("C11") = pHyp
        If pHyp = 0 Then
            Base.Range("C12") = Sqr(p0 * (1 - p0) * (1 / Base.Range("B8") + 1 / Base.Range("C8")))
        Else
            Base.Range("C12") = Sqr(p1 * (1 - p1) / n1 + p2 * (1 - p2) / n2)
        End If
        Base.Range("C13") = (Base.Range("C10") - pHyp) / Base.Range("C12")
        Base.Range("D6").NumberFormat = "#  ?/" & Format(Base.Range("D8"))
    End If
    
    Base.Range("B5:D5,C10:C12").NumberFormat = "0.####"
    Base.Range("B7:D7").NumberFormat = "0.###"
    Base.Range("B6").NumberFormat = "#  ?/" & Format(Base.Range("B8"))
    Base.Range("C6").NumberFormat = "#  ?/" & Format(Base.Range("C8"))
    
    Base.Range("C13").NumberFormat = "0.00;-0.00"
    Base.Range("C14") = 1 - Application.NormSDist(Abs(Base.Range("C13")))
    Display_pvalue Base, "C14", Uform
    
    If Uform.CheckBoxCI.value = True Then
        ConfLevel = Eval(Uform.ComboBoxCI.Text)
        If ConfLevel > 1 Then ConfLevel = ConfLevel / 100
        If StopQ0("Probability must be between 0 and 1", ValidateP(ConfLevel) = False, 1012, Uform.ComboBoxCI) = True Then Exit Sub
        ConfStr = Format(ConfLevel, "#.##%")
        Base.Range("D16") = "confidence interval " & ConfStr & " lower"
        Base.Range("D17") = "confidence interval " & ConfStr & " upper"
        Base.Range("D18") = "  margin of error"
        tzVal = Application.NormSInv(0.5 + ConfLevel / 2)
        If Which = 1 Then
            se = Sqr(Base.Range("B5") * (1 - Base.Range("B5")) / Base.Range("C8"))
            p0 = Base.Range("B5")
        Else
            se = Sqr(p1 * (1 - p1) / n1 + p2 * (1 - p2) / n2)
            p0 = Base.Range("C10")
        End If
        Base.Range("C18") = tzVal * se
        Base.Range("C16") = p0 - Base.Range("C18")
        Base.Range("C17") = p0 + Base.Range("C18")
        Base.Range("C16:C18").NumberFormat = Base.Offset(9, 2).NumberFormat
    End If
    
    If Which = 1 Then
        Base.Range("C10:D11").Delete Shift:=xlUp
    End If
          
    'AutoFit and then make both columns same as largest
    If Which = 1 Then
        EqualWidthCol Base.Range("B4:C8").Columns("A:B")
    Else
        EqualWidthCol Base.Range("B4:D8").Columns("A:C")
    End If
    
    If pHyp > 0 Then
        Base.Range("D4:D9").Delete Shift:=xlToLeft
    End If
    
    EndProc Base
    Exit Sub
    
MainErrorHandler:
    If errcheck("Tests for Proportions") = vbYes Then Exit Sub Else Resume
End Sub

Attribute VB_Name = "frmPtest2"
Attribute VB_Base = "0{2B4B7EC0-8021-4A5D-B7F7-ED226DCDADE0}{06876910-7C7B-4A9E-8E27-8043872E2B14}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'''MegaStat|fffd| Hypothesis Tests: Compare Two Proportions module |fffd|2005 by J. B. Orris
'frmPtest2

Option Explicit

Private Sub UserForm_Activate()
    InitComboBoxCI Me
    InitComboBoxAlt Me
    input_p1.SetFocus
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    frmPtest1.pTests Me
End Sub

Private Sub buttonClear_Click()
    Me.Hide
    Unload Me
    OpenUserForm "TwoP"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then input_p1.SetFocus
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    CallHelp 4335
End Sub

Private Sub comboboxCI_Change()
    Me.CheckBoxCI.value = True
End Sub

Private Sub input_p1_Change()
    If Eval(Me.input_p1.Text) >= 1 Then
        Me.Label_p1.Caption = "x"
    Else
        Me.Label_p1.Caption = "p"
    End If
End Sub

Private Sub input_p2_Change()
    If Eval(Me.input_p2.Text) >= 1 Then
        Me.Label_p2.Caption = "x"
    Else
        Me.Label_p2.Caption = "p"
    End If
End Sub

Private Sub input_p1_DblClick(Cancel As Boolean)
    UpdateInput Me.input_p1
End Sub

Private Sub input_p2_DblClick(Cancel As Boolean)
    UpdateInput Me.input_p2
End Sub

Private Sub input_n1_DblClick(Cancel As Boolean)
    UpdateInput Me.input_n1
End Sub

Private Sub input_n2_DblClick(Cancel As Boolean)
    UpdateInput Me.input_n2
End Sub

Private Sub Label_p1_Click()
    UpdateInput Me.input_p1
End Sub

Private Sub Label_p2_Click()
    UpdateInput Me.input_p2
End Sub

Private Sub Label_n1_Click()
    UpdateInput Me.input_n1
End Sub

Private Sub Label_n2_Click()
    UpdateInput Me.input_n2
End Sub

Private Sub Input_pHyp_DblClick(Cancel As Boolean)
    UpdateInput Me.Input_pHyp
End Sub

Private Sub LabelHyp_Click()
    UpdateInput Me.Input_pHyp
End Sub

Attribute VB_Name = "frmRandNo"
Attribute VB_Base = "0{4CB71429-1244-4B15-8644-F92ECA463E93}{5B80C219-EC3D-4EFF-B994-80A088CDD0FD}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'''MegaStat|fffd| Random Number Generation module |fffd|2005 by J. B. Orris
'frmRandNo

Option Explicit

Private Sub UserForm_Activate()
    Me.Textbox_nval.SetFocus
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    RandNo
End Sub

Private Sub buttonClear_Click()
    Me.Hide
    Unload Me
    OpenUserForm "RandNo"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then Me.Textbox_nval.SetFocus
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    CallHelp 5200
End Sub

Private Sub buttonCalc_Click()
    RandNo
End Sub

Private Sub TabStrip1_Change()
    With Me
        Select Case .TabStrip1.SelectedItem.Index
            Case 0
                .Textbox_top.Visible = True
                .Label_top.Visible = True
                .Textbox_bottom.Visible = True
                .Label_bottom.Visible = True
                .Label_top.Caption = "Minimum"
                .Label_bottom.Caption = "Maximum"
                .Label_top.Accelerator = "n"
                .Label_bottom.Accelerator = "m"
                .Textbox_top.Text = ""
                .Textbox_bottom.Text = ""
            Case 1
                .Textbox_top.Visible = True
                .Label_top.Visible = True
                .Textbox_bottom.Visible = True
                .Label_bottom.Visible = True
                .Label_top.Caption = "Mean"
                .Label_bottom.Caption = "Std. Dev."
                .Label_top.Accelerator = "M"
                .Label_bottom.Accelerator = "S"
                .Textbox_top.Text = ""
                .Textbox_bottom.Text = ""
            Case 2
                .Textbox_top.Visible = False
                .Label_top.Visible = False
                .Textbox_bottom.Visible = True
                .Label_bottom.Visible = True
                .Label_bottom.Caption = "Mu"
                .Label_bottom.Accelerator = "M"
                .Textbox_top.Text = ""
                .Textbox_bottom.Text = ""
        End Select
    End With
End Sub

Private Sub TabStrip1_Click(ByVal Index As Long)
    TabStrip1_Change
    Select Case Index
    Case 0, 1
        Me.Textbox_top.SetFocus
    Case 2
        Me.Textbox_bottom.SetFocus
    End Select
    Me.TabStrip1.value = Me.TabStrip1.SelectedItem.Index
End Sub
Private Sub SpinButton1_Change()
    Dim st As String
    With Me.SpinButton1
      Select Case .value
            Case 0
                st = "max"
            Case Is > 0
                st = "  " & CStr(.value - 1)
        End Select
        Me.Label_Spinbutton.Caption = "Decimal Places: " & st
    End With
End Sub

Sub RandNo()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler
    Dim i As Integer
    Dim Base As Range
    Dim Nval As Double
    Dim Min As Double
    Dim Max As Double
    Dim Mean As Double
    Dim Stdev As Double
    Dim Mu As Double
    Dim NameSt As String
    Dim Title As String
    Dim Dec As Integer
    Dim Which As Integer
    Dim X As Double
    Dim Addr1 As String
    Dim Addr2 As String
    Dim Addr3 As String
    Dim st As String
    
    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub
    Which = Me.TabStrip1.value
'    'validation
    Nval = Application.Round(Eval(Me.Textbox_nval.Text), 0)
    If StopQ0("Number of values must be >= 1.", Nval <= 0, 1011, Me.Textbox_nval) = True Then Exit Sub
    
    Select Case Which
        Case 0 'uniform
            Min = Eval(Me.Textbox_top.Text)
            If StopQ0("Must enter a value for Min", Len(Me.Textbox_top.Text) = 0, 1011, Me.Textbox_top) = True Then Exit Sub
            Max = Eval(Me.Textbox_bottom.Text)
            If StopQ0("Max must be > Min", Min >= Max, 1011, Me.Textbox_top) = True Then Exit Sub
            NameSt = "Uniformly"
        Case 1 'normal
            Mean = Eval(Me.Textbox_top.Text)
            If StopQ0("Must enter a value for the Mean", Len(Me.Textbox_top.Text) = 0, 1011, Me.Textbox_top) = True Then Exit Sub
            Stdev = Eval(Me.Textbox_bottom.Text)
            If StopQ0("Standard deviation must be > 0.", Stdev <= 0, 1011, Me.Textbox_bottom) = True Then Exit Sub
            NameSt = "Normally"
        Case 2 'uniform
            Mu = Eval(Me.Textbox_bottom.Text)
            If StopQ0("Must enter a value for Mu", Len(Me.Textbox_bottom.Text) = 0, 1011, Me.Textbox_top) = True Then Exit Sub
            NameSt = "Exponentially"
    End Select

    Dec = Me.SpinButton1.value - 1
    
'   output
    StartProc Me
    If MakeNewOutputSheet() = False Then Exit Sub
    Set Base = Range("A" & Format(ActiveCell.Row))
    Title = NameSt & " Distributed Random Numbers"
    If Me.OptionButton1.value = True Then Title = Title & "  (Press F9 to recalculate values.)"
    SetTitle Base, Title
            
    Select Case Which
        Case 0 'uniform
            Base.Range("A4") = "Minimum"
            Base.Range("B4") = Min
            Base.Range("A5") = "Maximum"
            Base.Range("B5") = Max
            Base.Range("B8") = "Uniform "
        Case 1 'normal
            Base.Range("A4") = "Mean"
            Base.Range("B4") = Mean
            Base.Range("A5") = "Stdev"
            Base.Range("B5") = Stdev
            Base.Range("B8") = "Normal "
        Case 2 'uniform
            Base.Range("A4") = "Mu"
            Base.Range("B4") = Mu
            Base.Range("B8") = "Exp "
    End Select
    
    Base.Range("A6  ") = "Dec places"
    Base.Range("B6") = Me.SpinButton1.value - 1
    Base.Range("A4:B8").HorizontalAlignment = xlRight
    Base.CurrentRegion.Columns(1).ColumnWidth = 10
    'create random numbers
    Application.Calculation = xlManual
    For i = 1 To Nval
        If Me.OptionButton1.value = True Then
            Addr1 = "B$" & Format(Base.Range("B4").Row)
            Addr2 = "B$" & Format(Base.Range("B5").Row)
            Addr3 = "B$" & Format(Base.Range("B6").Row)
            
            Select Case Which
                Case 0 'uniform
                    st = "=RAND()*(" & Addr2 & "-" & Addr1 & ") + " & Addr1
                Case 1 'normal
                    st = "=NORMINV(RAND()," & Addr1 & "," & Addr2 & ")"
                Case 2 'exponential
                    st = "=-" & Addr1 & "*LN(RAND())"
            End Select
            
            If Dec >= 0 Then st = "=ROUND(" & Mid(st, 2) & "," & Addr3 & ")"
            Base.Offset(7 + i, 1) = st
        Else
            Select Case Which
                Case 0 'uniform
                    X = Rnd() * (Max - Min) + Min
                Case 1 'normal
                    X = Application.NormInv(Rnd(), Mean, Stdev)
                Case 2 'exponential
                    X = -Mu * Log(Rnd())
            End Select
            If Dec >= 0 Then X = Application.Round(X, Dec)
            Base.Offset(7 + i, 1) = X
        End If
    Next i
    Application.Calculation = xlAutomatic
    Base.Range("B7").Columns.AutoFit
    If Dec > 0 Then Base.Range("B9").CurrentRegion.NumberFormat = AutoFormat(Dec, 0)
    If Dec < 0 Then Base.Range("A6:B6").Delete Shift:=xlUp
    If Which = 2 Then Base.Range("A5:B5").Delete Shift:=xlUp
    EndProc Base
    Exit Sub

MainErrorHandler:
    If errcheck("Random number generation") = vbYes Then Exit Sub Else Resume
End Sub
Attribute VB_Name = "frmRegr"
Attribute VB_Base = "0{321B207F-89B4-4A2D-A352-7351BCC0AC43}{2EF2BFD9-BEAF-4D1F-BB17-8A26445A5DD0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'''MegaStat|fffd| Regression module |fffd|2005 by J. B. Orris
'frmRegr

Option Explicit
Option Base 1

Private Sub UserForm_Activate()
    Dim SaveIndex As Variant
    
    With Me.ComboBox1
        SaveIndex = .ListIndex
        InitListbox
        If SaveIndex < 0 Then SaveIndex = 0
        .ListIndex = SaveIndex
    End With
    SetListbox
    With Me.ComboBox2
        If .ListIndex < 0 Then
            .Clear
            .AddItem "99%"
            .AddItem "95%"
            .AddItem "90%"
        End If
    End With
    Me.InputBoxX.SetFocus
End Sub
    
Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    Regression
End Sub

Private Sub buttonClear_Click()
    ClearLast
    Me.Hide
    Unload Me
    OpenUserForm "Regression"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then Me.InputBoxX.SetFocus
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    CallHelp 4630
    CallHelp 4630
End Sub

Private Sub chkForceZero_Click()
    If Me.chkForceZero.value = True Then Me.chkTestInt = False
End Sub

Private Sub chkTestInt_Click()
    If Me.chkTestInt.value = True Then Me.chkForceZero.value = False
End Sub

Private Sub ComboBox1_Change()
    SetListbox
End Sub

Private Sub chkResiduals_Click()
    With Me
        If .chkResiduals.value = False Then
            .chkDW.value = False
            .chkPlotRes.value = False
            .chkPlotres2.value = False
            .chkDiagnostics.value = False
            .chkNormalPlot.value = False
            .chkResiduals.value = False
            .chkCooksD = False
        End If
    End With
End Sub

Private Sub chkAPR_Click()
    With Me
        If .chkAPR = True And .chkStepwise = True Then
            APR_Click (False)
            .chkStepwise = False
            .SpinButton1.Enabled = False
            .LabelSpinButton.Enabled = False
        Else
            If .chkAPR = True And .chkStepwise = False Then
                APR_Click (False)
                Stepwise_Click (True)
                .SpinButton1.Enabled = False
                .LabelSpinButton.Enabled = False
            End If
        End If
        If .chkAPR = False And .chkStepwise = False Then
            APR_Click (True)
            Stepwise_Click (True)
        End If
    End With
End Sub

Private Sub chkStepwise_Click()
    With Me
        If .chkStepwise = True And .chkAPR = True Then
            APR_Click (False)
            .chkAPR = False
            .SpinButton1.Enabled = True
            .LabelSpinButton.Enabled = True
        Else
            If .chkStepwise = True And .chkAPR = False Then
                APR_Click (False)
                .chkAPR.Enabled = True
                .SpinButton1.Enabled = True
                .LabelSpinButton.Enabled = True
            End If
        End If
        If .chkAPR = False And .chkStepwise = False Then
            APR_Click (True)
            Stepwise_Click (True)
            .chkAPR.Enabled = True
            .SpinButton1.Enabled = False
            .LabelSpinButton.Enabled = False
        End If
    End With
End Sub

Private Sub APR_Click(OnOff As Integer)

    With Me
        .chkBeta.Enabled = OnOff
        .chkDiagnostics.Enabled = OnOff
        .chkDW.Enabled = OnOff
        .chkForceZero.Enabled = OnOff
        .chkNormalPlot.Enabled = OnOff
        .chkPlotRes.Enabled = OnOff
        .chkPlotres2.Enabled = OnOff
        .chkResiduals.Enabled = OnOff
        .chkTestInt.Enabled = OnOff
        .chkVIF.Enabled = OnOff
        .ComboBox1.Enabled = OnOff
        .InputBoxPredText.Enabled = OnOff
        .ComboBox2.Enabled = OnOff
        .Label6.Enabled = OnOff
        .chkCooksD = OnOff
    End With
End Sub

Private Sub Stepwise_Click(OnOff As Integer)
    With Me
        .chkStepwise.Enabled = OnOff
        If .chkStepwise.value = True Then
            .SpinButton1.Enabled = True
            .LabelSpinButton.Enabled = True
        End If
    End With
End Sub


Private Sub SpinButton1_Change()
    Dim st As String
    If Me.SpinButton1.value > 1 Then st = "s" Else st = ""
    Me.LabelSpinButton.Caption = CStr(Me.SpinButton1.value) & " best model" & st & " of each size."

End Sub

Private Sub chkDW_Click()
    Me.chkDW.Enabled = True
    Me.chkResiduals.value = True
End Sub

Private Sub chkCooksD_Click()
    Me.chkCooksD.Enabled = True
    Me.chkResiduals.value = True
    Me.chkDiagnostics.value = True
End Sub

Private Sub chkPlotRes_Click()
    Me.chkResiduals.value = True
End Sub

Private Sub chkPlotres2_Click()
    Me.chkResiduals.value = True
End Sub

Private Sub chkDiagnostics_Click()
    Me.chkResiduals.value = True
    If Me.chkDiagnostics.value = False Then
        Me.chkCooksD.value = False
        Me.chkDiagnostics = False
    End If
End Sub

Private Sub chkNormalPlot_Click()
    Me.chkResiduals.value = True
End Sub

Private Sub InitListbox()
    With Me.ComboBox1
        .Clear
        .AddItem "No predictions"
        .AddItem "Predictor values from spreadsheet cells"
        .AddItem "Type in predictor values"
    End With
End Sub

Private Sub SetListbox()
    With frmRegr
        Select Case .ComboBox1.ListIndex
            Case 0
                .InputBoxPredRange.ControlTipText = "No predicted values will be calculated"
                .InputBoxPredText.Visible = False
                .InputBoxPredRange.Visible = True
                .InputBoxPredRange.Enabled = False
                .InputBoxPredText.Enabled = False
            Case 1
                .InputBoxPredRange.ControlTipText = "Select spreadsheet cells that contain predictor values"
                .InputBoxPredText.Visible = False
                .InputBoxPredText.Enabled = False
                .InputBoxPredRange.Enabled = True
                .InputBoxPredRange.Visible = True
                .InputBoxPredRange.SetFocus
            Case 2
                .InputBoxPredText.ControlTipText = "Type in predictor values. Commas between values; semi-colons between predictions "
                .InputBoxPredRange.Visible = False
                .InputBoxPredRange.Enabled = False
                .InputBoxPredText.Enabled = True
                .InputBoxPredText.Visible = True
                .InputBoxPredText.SetFocus
        End Select
    End With
End Sub

Private Sub InputBoxX_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBoxX.Text = SetAddr(Me, Me.InputBoxX)
    End If
End Sub

Private Sub Label1_Click()
        Me.InputBoxX.Text = SetAddr(Me, Me.InputBoxX)
End Sub

Private Sub InputBoxY_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBoxY.Text = SetAddr(Me, Me.InputBoxY)
    End If
End Sub

Private Sub Label2_Click()
    Me.InputBoxY.Text = SetAddr(Me, Me.InputBoxY)
End Sub

Private Sub InputBoxPredRange_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBoxPredRange.Text = SetAddr(Me, Me.InputBoxPredRange)
    End If
End Sub

Private Sub Label4_Click()
        Me.InputBoxPredRange.Text = SetAddr(Me, Me.InputBoxPredRange)
End Sub

Private Sub InputBoxX_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        If Me.InputBoxY.Text = "" Then
            Me.InputBoxY.SetFocus
        Else
            Me.buttonOK.SetFocus
        End If
    End If
End Sub

Private Sub InputBoxY_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        Me.buttonOK.SetFocus
    End If
End Sub

Private Sub InputBoxPredRange_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
    Me.InputBoxPredRange.SetFocus
    End If
End Sub

Private Sub InputBoxX_DblClick(Cancel As Boolean)
    Me.InputBoxX.Text = SetAddr(Me, Me.InputBoxX)
End Sub

Private Sub InputBoxY_DblClick(Cancel As Boolean)
    Me.InputBoxY.Text = SetAddr(Me, Me.InputBoxY)
End Sub

Private Sub InputBoxPredRange_DblClick(Cancel As Boolean)
    Me.InputBoxPredRange.Text = SetAddr(Me, Me.InputBoxPredRange)
End Sub

Sub Regression()

    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler

    Const Regression = 10
    Dim Base As Range
    Dim Nvar As Integer
    Dim InputXRange As Range
    Dim InputYRange As Range
    Dim X As Range
    Dim Y As Range
    Dim PredictorX As Range
    Dim INPredictorX As Range
    Dim value As Range
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    Dim ColLabels As Range
    Dim ColLabelsQ As Integer
    Dim PredText As String
    Dim OK As Boolean
    Dim NPred As Integer
    Dim Which As Integer
    Dim Residuals As Boolean
    Dim DW As Boolean
    Dim CooksD As Boolean
    Dim PlotResiduals As Boolean
    Dim PlotResiduals2 As Boolean
    Dim Diagnostics As Boolean
    Dim NormalPlot As Boolean
    Dim Predictions As Boolean
    Dim Scatterplot As Boolean
    Dim DataOutput As Boolean
    Dim TestIntercept As Boolean
    Dim ForceZeroIntercept As Boolean
    Dim TempRange As Range
    Dim ConfLevel As Double
 
    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub
    Me.buttonOK.SetFocus

    Which = Regression
    With Me
        Residuals = .chkResiduals.value
        DW = .chkDW.value
        CooksD = .chkCooksD.value
        PlotResiduals = .chkPlotRes.value
        PlotResiduals2 = .chkPlotres2.value
        Diagnostics = .chkDiagnostics.value
        NormalPlot = .chkNormalPlot.value
    End With
    
    Scatterplot = False
    DataOutput = False
    If Me.ComboBox1.ListIndex > 0 Then Predictions = True Else Predictions = False
    TestIntercept = Me.chkTestInt.value
    ForceZeroIntercept = Me.chkForceZero.value

    'input X
    If ValidRange(Me.InputBoxX, vbNo) = False Then Exit Sub
    Set InputXRange = Range(Me.InputBoxX.Text)
    
    Set TempRange = InputXRange
    
    If InputXRange.Areas.count > 1 Then Set InputXRange = SetMultipleRanges(InputXRange, "TempSheet", frmRegr.InputBoxX, True)
    If InputXRange.Range("A1") = "Error" Then
        ClearSheets
        Exit Sub
    End If
    
    InputXRange.Worksheet.Activate
    If StopQ1("Not enough data selected.", InputXRange.Rows.count <= 3, InputXRange, 1001, Me.InputBoxX) = True Then Exit Sub
    Nvar = InputXRange.Columns.count

    'input Y
    TempRange.Worksheet.Activate
    If ValidRange(Me.InputBoxY, vbYes) = False Then Exit Sub
    Set InputYRange = Range(Me.InputBoxY.Text)
    InputYRange.Worksheet.Activate

    If StopQ1("Data must be in a single column.", InputYRange.Columns.count > 1, InputYRange, 1005, Me.InputBoxY) = True Then Exit Sub

    If IsNumeric(InputYRange(1)) = True And Not IsEmpty(InputYRange(1)) Then i = 1 Else i = 2

    Set Y = InputYRange.Range(Cells(i, 1), Cells(InputYRange.Rows.count, InputYRange.Columns.count))

    If StopQ1("Not enough data selected.", Y.Rows.count <= 2, Y, 1001, Me.InputBoxY) = True Then Exit Sub

    For Each value In Y
        If StopQ1("Input range contains missing or invalid data.", IsNumeric(value) = False Or IsEmpty(value) = True, value, 1006, Me.InputBoxY) = True Then Exit Sub
    Next value
    
    'check predictor variable input
     If Me.chkAPR = False And Me.chkStepwise = False Then
        Select Case Me.ComboBox1.ListIndex
            Case 1
                If Len(Trim(Me.InputBoxPredRange.Text)) > 0 Then
                    If ValidRange(Me.InputBoxPredRange, vbNo) = True Then
                        Set PredictorX = Range(Me.InputBoxPredRange.Text)
                        'check for labels
                        If LabelCheck(PredictorX.Rows(1).Cells) = vbYes And (PredictorX.Rows.count - 1) >= 1 Then
                            Set PredictorX = PredictorX.Offset(1, 0).Resize(PredictorX.Rows.count - 1)
                        End If
                        If PredictorX.Areas.count > 1 Then Set PredictorX = SetMultipleRanges(PredictorX, "PredSheet", frmRegr.InputBoxPredRange, False)
                        If PredictorX.Range("A1") = "Error" Then
                            ClearSheets
                            Exit Sub
                        End If
                        If StopQ1("Size of predictor range does not correspond to number of independent variables.", InputXRange.Columns.count <> PredictorX.Columns.count, PredictorX, 1030, Me.InputBoxPredRange) = True Then Exit Sub
                        For Each value In PredictorX
                            If StopQ1("Invalid or empty cell in predictor variable range.", IsNumeric(value) = False Or IsEmpty(value) = True, value, 1006, Me.InputBoxPredRange) = True Then Exit Sub
                        Next value
                    End If
                Else
                        Me.ComboBox1.ListIndex = 0
                End If
                Me.InputBoxPredRange.SetFocus
            Case 2
                PredText = Trim(Me.InputBoxPredText.Text)
                If Len(PredText) > 0 Then
                    ThisWorkbook.Sheets("PredSheet").Cells.ClearContents
                    Set INPredictorX = ThisWorkbook.Sheets("PredSheet").Range("A1")
                    Set PredictorX = ThisWorkbook.Sheets("PredSheet").Range("A3")
                    INPredictorX.Range("A1") = PredText
    
                    INPredictorX.Columns("A:A").TextToColumns Destination:=INPredictorX.Range("A1"), DataType:=xlDelimited, _
                        TextQualifier:=xlDoubleQuote, ConsecutiveDelimiter:=True, Tab:=True, _
                        Semicolon:=True, Comma:=True, Space:=True, Other:=False
    
                    Set INPredictorX = INPredictorX.CurrentRegion
    
                    If StopQ0("The number of prediction values typed in does not correspond to number of independent variables.", INPredictorX.Columns.count Mod Nvar <> 0, 1030, Me.InputBoxPredText) = True Then Exit Sub
                    For Each value In INPredictorX
                        If StopQ1("Invalid predictor value.", IsNumeric(value) = False, value, 1006, Me.InputBoxPredText) = True Then Exit Sub
                    Next value
    
                    NPred = INPredictorX.Columns.count / Nvar
    
                    For i = 1 To NPred
                        For j = 1 To Nvar
                            k = (i - 1) * Nvar + j
                            PredictorX.Offset(i - 1, j - 1).value = INPredictorX.Range("A1").Offset(0, k - 1)
                        Next j
                    Next i
                    Set PredictorX = PredictorX.CurrentRegion
                    INPredictorX.Clear
                    Set INPredictorX = Nothing
                End If
        End Select
    End If

    ReDim Labels(Nvar + 1) As Variant

    InputXRange.Worksheet.Activate
    Set ColLabels = InputXRange.Rows(1).Cells
    ColLabelsQ = LabelCheck(ColLabels)
    If ColLabelsQ = vbCancel Then Exit Sub
    If ColLabelsQ = vbYes Then
        i = 2
    Else
        Check_Stealth_Labels ColLabelsQ, ColLabels, InputXRange
        i = 1
    End If

    For j = 1 To Nvar
        If ColLabelsQ = vbYes Then
            Labels(j) = ColLabels.Rows(1).Cells(j).Text
        Else
            Labels(j) = "X" & Application.Text(j, "0")
        End If
    Next j

    Set X = InputXRange.Range(Cells(i, 1), Cells(InputXRange.Rows.count, InputXRange.Columns.count))
    
    For Each value In X
        If StopQ1("Input range contains missing or invalid data. ", IsNumeric(value) = False Or IsEmpty(value) = True, value, 1006, Me.InputBoxX) = True Then Exit Sub
    Next value

    If Me.chkAPR = True Or Me.chkStepwise = True Then
        If StopQ1("Cannot have more than 12 independent variables." & Chr(13) & Chr(13) & "May be slow with more than 8 variables.  See Help for details.", _
                X.Columns.count > 12, InputXRange, 1041, Me.InputBoxX) = True Then Exit Sub
        
        If StopQ1("Must have at least two independent variables", _
                X.Columns.count < 2, InputXRange, 1041, Me.InputBoxX) = True Then Exit Sub
        
    End If

    ConfLevel = Eval(Me.ComboBox2.Text)
    If ConfLevel > 1 Then ConfLevel = ConfLevel / 100
    If StopQ0("Confidence level must be between 0 and 1", ValidateP(ConfLevel) = False, 1012, Me.ComboBox2) = True Then Exit Sub
    
    'input Y
    'check Y label
    TempRange.Worksheet.Activate
    If IsLabel(InputYRange(1)) = False And IsEmpty(InputYRange(1)) = False Then
        i = 1
        Labels(Nvar + 1) = "Y"
        If InputYRange.Rows(1).Row > 1 Then
            If IsLabel(InputYRange(1).Offset(-1, 0)) = True Then Labels(Nvar + 1) = InputYRange(1).Offset(-1, 0).value
        End If
    Else
        i = 2
        Labels(Nvar + 1) = InputYRange(1).Text
    End If
    Set Y = InputYRange.Range(Cells(i, 1), Cells(InputYRange.Rows.count, InputYRange.Columns.count))
    If StopQ1("X and Y ranges have different number of observations.", X.Rows.count <> Y.Rows.count, Union(TempRange, InputYRange), 1007, Me.InputBoxX) = True Then Exit Sub

    'do regression calculations here
    StartProc Me
    If MakeNewOutputSheet() = False Then Exit Sub
    Set Base = Range("A" & Format(ActiveCell.Row))

    If Me.chkAPR = False And Me.chkStepwise = False Then
        RegrCalc Base, X, Y, Labels, PredictorX, Which, _
            Residuals, DW, CooksD, PlotResiduals, PlotResiduals2, Diagnostics, NormalPlot, _
            Predictions, Scatterplot, DataOutput, _
            TestIntercept, ForceZeroIntercept, ConfLevel, OK
    Else
        APR Base, X, Y, Labels
    End If
        
    EndProc Base

    Exit Sub

MainErrorHandler:
    If errcheck("Regression Analysis") = vbYes Then Exit Sub Else Resume
End Sub

Sub RegrCalc(Base As Range, X As Range, Y As Range, Labels() As Variant, PredictorX As Range, Which As Integer, _
     Residuals As Boolean, DW As Boolean, CooksD As Boolean, PlotResiduals As Boolean, PlotResiduals2 As Boolean, Diagnostics As Boolean, NormalPlot As Boolean, _
    Predictions As Boolean, Scatterplot As Boolean, DataOutput As Boolean, _
    TestIntercept As Boolean, ForceZeroIntercept As Boolean, ConfLevel As Double, ByRef OK As Boolean)
    
    On Error GoTo MainErrorHandler2
    Application.EnableCancelKey = xlErrorHandler

    Const Regression = 10
    Dim Nvar As Integer
    Dim OutResiduals As Range
    Dim Seq As Range
    Dim ch As ChartObject
    Dim SEest As Double
    Dim StdY As Double
    Dim base2 As Range
    Dim resid As Range
    Dim n As Integer
    Dim i As Integer
    Dim j As Integer
    Dim k As Integer
    Dim regr As Range
    Dim Radj As Double
    Dim st As String
    Dim st2 As String
    Dim HwConf As Double
    Dim HwPred As Double
    Dim t As Double
    Dim Yhat As Double
    Dim D1 As Double
    Dim D2 As Double
    Dim b() As Variant
    Dim b0 As Variant
    Dim LogBase As Double
    Dim d As Integer
    Dim ANOVA As Range
    Dim RegrOutput As Range
    Dim ExpOutput As Range
    Dim Xaug As Range
    Dim VIFmatrix As Range
    Dim R As Variant
    Dim XXI As Variant
    Dim Xh As Variant
    Dim xTemp As Variant
    Dim pred As Range
    Dim Dec() As Integer
    Dim v As Variant
    Dim value As Range
    Dim FZeroQ As Boolean
    Dim res As Double
    Dim SSE As Double
    Dim df1 As Double
    Dim X1 As Range
    Dim Y1 As Range
    Dim x2 As Range
    Dim Fmt As String
    Dim ConfString As String
    Dim iStart As Integer
    Dim ChartDataSheet As Worksheet
    Dim Dstr As String
    Dim Fstr As String

'    which = 10 for regression; <10 = TrendQ for trend
'      TrendQ 0, 1, 2 = linear, exp, log; 3-7 = polynomial

    SetTitle Base, "Regression Analysis"
    OK = True

    Nvar = X.Columns.count
    n = X.Rows.count
    StdY = MyStdev(Y)

    ReDim Dec(Nvar + 1)
    ReDim b(Nvar)

    Dec(Nvar + 1) = DecPlaces(Y)
    For i = 2 To Nvar + 1
        Dec(i - 1) = DecPlaces(X.Columns(i - 1).Cells)
    Next i

    ConfString = Format(Application.Round(ConfLevel * 100, 2), ".##")
    If Len(ConfString) <= 3 Then ConfString = Mid(ConfString, 1, Len(ConfString) - 1)
    Set regr = ThisWorkbook.Sheets("RegrSheet").Range("A1")


    st = regr.Cells.Address & ":" & regr.Offset(4, Nvar).Cells.Address

    FZeroQ = Not ForceZeroIntercept
    regr.Range(st) = Application.LinEst(Y, X, FZeroQ, True)

    'start VIF
    If chkVIF = True Then
        Set VIFmatrix = ThisWorkbook.Sheets("RegrSheet").Range("AA17")

        VIFmatrix.CurrentRegion.Clear
        For i = 1 To Nvar
            For j = 1 To i - 1
                R = Application.Correl(X.Columns(i), X.Columns(j))
                If IsNumeric(R) = False Then
                    chkVIF = False
                    Exit For
                End If
                VIFmatrix.Offset(i, j).value = R
                VIFmatrix.Offset(j, i).value = R
            Next j
            VIFmatrix.Offset(i, i) = 1#
        Next i
    End If
    If chkVIF = True Then
        Set VIFmatrix = VIFmatrix.Offset(1, 1).CurrentRegion
        VIFmatrix = Application.MInverse(VIFmatrix)
    End If
    OK = True
    If SingularityTest(Nvar, regr, Base) = True Then
        OK = False
        Exit Sub
    End If

    If Nvar = 1 Then
         st = "r"
         st2 = ""
    Else
        st = "R"
        st2 = "s"
    End If

    Base.Range("C4") = regr.Range("A3").value 'R|fffd|
    Base.Range("B4") = st & Chr(178) & " "
    If regr.Range("A3").value >= 0 Then Base.Range("C6") = Sqr(regr.Range("A3").value)
    Base.Range("B6") = st & "  "
    If Nvar = 1 Then Base.Range("C6").value = Base.Range("C6").value * Sgn(regr.Range("A1").value)
    Base.Range("C7") = regr.Range("B3").value
    Base.Range("B7") = "Std. Error  "
    SEest = Base.Range("C7").value
    Base.Range("B5").CurrentRegion.NumberFormat = "0.000 ;-0.000 "
    Base.Range("C4:C5").NumberFormat = "0.000 ;-0.000 " 'fmt for adj R|fffd|

    Base.Range("C8") = n
    Base.Range("B8") = "n  "
    Base.Range("C9") = Nvar
    Base.Range("B9") = "k  "
    Base.Range("C8:C9").NumberFormat = "0 "
    Base.Range("C10") = Labels(Nvar + 1)
    Base.Range("B10") = "Dep. Var. "
    Base.Range("C10").Font.Bold = True
    Base.Range("B4:B10").HorizontalAlignment = xlRight
    Base.Range("C4:C10").HorizontalAlignment = xlLeft

    Set RegrOutput = Base.Range("A19")
    RegrOutput.Range("A1") = "Regression output"

    RegrOutput.Range("A2:G2") = Array("variables", " coefficients", "std. error ", "   t (df=" & Application.Text(regr.Range("B4"), "0") & ")", "p-value", ConfString & "% lower", ConfString & "% upper")
    If Me.chkBeta = True Then
        RegrOutput.Range("H2") = "std. coeff."
        If chkVIF = True And Nvar > 1 Then RegrOutput.Range("I2") = "VIF"
        RegrOutput.Range("H3") = 0 'beta for intercept
    Else
        If chkVIF = True Then RegrOutput.Range("H2") = "VIF"
    End If
    With RegrOutput.Range("A3")
        .value = "Intercept"
        .HorizontalAlignment = xlRight
        If Me.chkForceZero.value = True Then
            .value = "(No Intercept)"
            Base.Range("D4") = "(Note: No intercept in the model.  Interpret " & st & Chr(178) & "  and " & st & " with caution.)"
            Base.Range("D4").Font.size = 8
        End If
    End With

    t = Application.TInv(1 - ConfLevel, regr.Range("B4"))
    b0 = regr.Range("A1").Offset(0, Nvar)
    For i = 1 To Nvar + 1
        If i <= Nvar Then
            With RegrOutput.Offset(i + 2, 0)
                .Range("A1").value = Labels(i)
                .Range("A1").HorizontalAlignment = xlRight
            End With
        End If

        'offset: 1=b, 2=se
        RegrOutput.Offset(i + 1, 1) = regr.Range("A1").Offset(0, Nvar + 1 - i)
        If i >= 2 And i <= Nvar + 1 Then b(i - 1) = RegrOutput.Offset(i + 1, 1).value
        If Abs(RegrOutput.Offset(i + 1, 1).value) < 0.0005 Then d = DecPlaces(RegrOutput.Offset(i + 1, 1)) Else d = 0
        RegrOutput.Offset(i + 1, 1).NumberFormat = AutoFormat(4, d)
        If i > 1 Or ForceZeroIntercept = False Then
            RegrOutput.Offset(i + 1, 2) = regr.Range("A1").Offset(1, Nvar + 1 - i)
            If Abs(RegrOutput.Offset(i + 1, 2).value) < 0.0005 Then d = DecPlaces(RegrOutput.Offset(i + 1, 2)) Else d = 0
            RegrOutput.Offset(i + 1, 2).NumberFormat = AutoFormat(4, d) & " "
            RegrOutput.Offset(i + 1, 3) = RegrOutput.Offset(i + 1, 1) / RegrOutput.Offset(i + 1, 2)
            RegrOutput.Offset(i + 1, 4) = Application.Tdist(Abs(RegrOutput.Offset(i + 1, 3)), regr.Range("B4"), 2)
            RegrOutput.Offset(i + 1, 5) = RegrOutput.Offset(i + 1, 1) - t * RegrOutput.Offset(i + 1, 2)
            RegrOutput.Offset(i + 1, 6) = RegrOutput.Offset(i + 1, 1) + t * RegrOutput.Offset(i + 1, 2)
        End If
        RegrOutput.Offset(i + 1, 5).Range("A1:B1").NumberFormat = RegrOutput.Offset(i + 1, 1).NumberFormat
        If i > 1 Then FormatPvalue RegrOutput.Offset(i + 1, 4), xlYes Else FormatPvalue RegrOutput.Offset(i + 1, 4), xlNo
        'beta output
        If i > 1 And chkBeta = True Then
            RegrOutput.Offset(i + 1, 7) = RegrOutput.Offset(i + 1, 1) * MyStdev(X.Columns(i - 1)) / StdY 'beta
            j = 1
        Else
            j = 0
        End If

        'VIF output
        If Nvar > 1 And i > 1 And chkVIF = True Then
            With RegrOutput.Offset(i + 1, 7 + j)
                .value = VIFmatrix.Range("A1").Offset(i - 2, i - 2).value
                If .value >= 3.333333333333 Then .Interior.ColorIndex = 20
                If .value >= 10 Then .Interior.ColorIndex = 37
            End With
        End If
        If i = 1 And TestIntercept = True Then
            FormatPvalue RegrOutput.Offset(i + 1, 4), xlYes
            RegrOutput.Offset(i + 1, 0).Interior.ColorIndex = RegrOutput.Offset(i + 1, 4).Interior.ColorIndex
        End If
        RegrOutput.Offset(i + 1, 0).Interior.ColorIndex = RegrOutput.Offset(i + 1, 4).Interior.ColorIndex
    Next i
    If Me.chkForceZero.value = True Then RegrOutput.Range("B3").Font.ColorIndex = 2

    RegrOutput.Offset(i, 3).CurrentRegion.Columns(4).NumberFormat = " 0.000 ; -0.000 "
    RegrOutput.Offset(i, 3).CurrentRegion.Columns("H:I").NumberFormat = " 0.000 ; -0.000 "

    FmtHeader1 RegrOutput.Offset(1, 4).CurrentRegion.Rows(2)
    FmtBottomRow1 RegrOutput.Offset(i + 1, 4).CurrentRegion.Rows(i + 1)

    If chkVIF = True And Nvar > 2 Then 'mean VIF
        If chkBeta = True Then j = 9 Else j = 8
            With RegrOutput.Offset(i + 1, 4).CurrentRegion.Columns(j).Offset(Nvar + 3).Range("A1")
                .value = Application.Average(RegrOutput.Offset(i + 1, 4).CurrentRegion.Columns(j).Offset(3).Range(Cells(1, 1), Cells(Nvar, 1)))
                .NumberFormat = RegrOutput.Offset(i + 1, 4).CurrentRegion.Columns(j).Offset(3).Range("A1").NumberFormat
            End With
            With RegrOutput.Offset(i + 1, 4).CurrentRegion.Columns(j).Offset(Nvar + 4).Range("A1")
                .value = "mean VIF"
                .HorizontalAlignment = xlRight
            End With
        End If
        
    'this has to go here to keep CurrentRegion intact
    RegrOutput.Range("F1") = "confidence interval"
    RegrOutput.Range("F1").Font.Italic = True
    RegrOutput.Range("F1:G1").HorizontalAlignment = xlCenterAcrossSelection
    RegrOutput.Range("G1:G1").Font.size = 8

    'set base before auxilary output for exponential model; actual output goes after autofit
    If Which = 1 Or Which = 2 Then
        Set ExpOutput = RegrOutput.Offset(Nvar + 4, 1)
    End If

    If chkVIF = True Then
        VIFmatrix.Clear
        Set VIFmatrix = Nothing
    End If

    'ANOVA table
    Set ANOVA = Base.Range("A12")
    ANOVA.Range("A1") = "ANOVA table"
    ANOVA.Range("A2:F2") = Array("Source", "SS  ", "df  ", "MS", "F", "p-value")
    FmtHeader1 ANOVA.Range("A2:F2")
    FmtBottomRow ANOVA.Range("A5:F5")
    ANOVA.Range("A3") = "Regression"
    ANOVA.Range("A4") = "Residual"
    ANOVA.Range("A5") = "Total"
    ANOVA.Range("A3:B5").HorizontalAlignment = xlRight
    ANOVA.Range("B3") = regr.Range("A5")
    SSE = regr.Range("B5")
    ANOVA.Range("B4") = SSE
    ANOVA.Range("B5") = regr.Range("A5") + regr.Range("B5")
    If Me.chkForceZero.value = True Then
        ANOVA.Range("B5") = Application.SumSq(Y)
        ANOVA.Range("B3") = ANOVA.Range("B5") - ANOVA.Range("B4")
        Base.Range("C4") = ANOVA.Range("B3") / ANOVA.Range("B5")
        Base.Range("C6") = Sqr(Base.Range("C4"))
    End If
    ANOVA.Range("B3:B5").NumberFormat = " " & RegrOutput.Range("C4").NumberFormat
    ANOVA.Range("C3") = Nvar
    ANOVA.Range("C4") = regr.Range("B4")
    ANOVA.Range("C5") = Nvar + regr.Range("B4")
    ANOVA.Range("C2:C5").NumberFormat = "0   "
    ANOVA.Range("C2:C5").HorizontalAlignment = xlRight
    ANOVA.Range("D3") = ANOVA.Range("B3") / ANOVA.Range("C3")
    ANOVA.Range("D4") = ANOVA.Range("B4") / ANOVA.Range("C4")
    ANOVA.Range("D3:D4").NumberFormat = RegrOutput.Range("C4").NumberFormat
    ANOVA.Range("E3") = ANOVA.Range("D3") / ANOVA.Range("D4")
    ANOVA.Range("E3").NumberFormat = "0.00"
    'put in adj. R|fffd|

        Base.Range("B5") = "Adjusted " & st & Chr(178) & " "
        Radj = 1 - ANOVA.Range("D4") / (ANOVA.Range("B5") / ANOVA.Range("C5"))
        If Radj > 0 Then Base.Range("C5") = Radj Else Base.Range("C5") = 0

    ANOVA.Range("F3") = Application.Fdist(ANOVA.Range("E3"), ANOVA.Range("C3"), ANOVA.Range("C4"))
    FormatPvalue ANOVA.Range("F3"), xlYes
    FmtBottomRow1 ANOVA.Range("A5:F5")

    If Residuals = True Or Diagnostics = True Or Predictions = True Then
        'create augmented matrix and calc inverse of Xtranspose * X
        Set Xaug = ThisWorkbook.Sheets("RegrSheet").Range("A7")

        If Me.chkForceZero.value = False Then
            For i = 1 To n
                Xaug.Range("A1").Offset(i, 0).value = 1
            Next i
        End If

        X.Copy
        Xaug.Range("B2").PasteSpecial xlPasteValues

        Set Xaug = Xaug.Range("B2").CurrentRegion
        Xaug.NumberFormat = "#.########"
        XXI = Application.MInverse(Application.MMult(Application.Transpose(Xaug), Xaug))
        Xaug.Clear
       Set Xaug = Nothing
    End If

    If Which = 1 Or Which = 2 Then i = 4 Else i = 0
    If Me.chkVIF = True And Me.chkDiagnostics = True Then i = i + 2
    Set resid = RegrOutput.Offset(Nvar + 4 + i).Range("A1")

    If Residuals = True Then
        With resid.Range("A4:D4")
            .value = Array("Observation", Labels(Nvar + 1), "Predicted" & " ", " Residual")
            .HorizontalAlignment = xlRight
            .Font.Italic = True
            .Borders(xlBottom).Weight = xlThin
        End With
        If Diagnostics = True Then
            If CooksD = True Then
                Dstr = "Cook's D"
                Fstr = "E4:H4"
            Else
                Dstr = ""
                Fstr = "E4:G4"
            End If
            resid.Range("G1") = "Studentized"
            resid.Range("F2:G2") = Array("Studentized", "Deleted")
            With resid.Range(Fstr)
                .value = Array("Leverage", "Residual", "Residual", Dstr)
                .Borders(xlBottom).Weight = xlThin
            End With
            With resid.Range("E1:H4")
                .HorizontalAlignment = xlRight
                .Font.Italic = True
            End With
        End If
        If Which < Regression Then resid.Range("A4").value = "t"

        Set resid = resid.Offset(3)
        resid.Offset(-1).EntireRow.Hidden = True
        D1 = 0
        D2 = 0
        For i = 1 To n
            ReDim Xh(Nvar)
            If Which = Regression Then
                resid.Offset(i, 0).value = i
                resid.Offset(i, 0).HorizontalAlignment = xlCenter
            Else
                resid.Offset(i, 0).value = X.Range("A1").Offset(i - 1, 0).value
            End If
            For j = 1 To Nvar
                Xh(j) = X.Cells(i, j).Value2
            Next j

            resid.Offset(i, 1).value = Y.Rows(i)
            resid.Offset(i, 2).value = Application.SumProduct(Xh, b) + regr.Range("A1").Offset(0, Nvar)
            res = Y.Rows(i) - resid.Offset(i, 2)
            resid.Offset(i, 3).value = res

            If Diagnostics = True Then
                df1 = n - Nvar - 2
                If Me.chkForceZero = False Then
                    ReDim Xh(Nvar + 1)
                    Xh(1) = 1#
                    iStart = 1
                Else
                    ReDim Xh(Nvar)
                    iStart = 0
                End If
                'move a row of PredictorX to Xh
                For j = 1 To Nvar
                    Xh(j + iStart) = X.Rows(i).Columns(j).Value2
                Next j
                xTemp = Application.MMult(Xh, XXI)
                v = Application.MMult(xTemp, Application.Transpose(Xh))

                With resid.Offset(i, 4)
                    .value = v(1)
                    If .value > 2 * (Nvar + 1) / n Then .Interior.ColorIndex = 37
                End With

                With resid.Offset(i, 5)
                    .value = res / (SEest * Sqr(1 - v(1)))
                    If Application.Tdist(Abs(.value), df1, 2) <= 0.05 Then .Interior.ColorIndex = 20
                    If Application.Tdist(Abs(.value), df1, 2) <= 0.01 Then .Interior.ColorIndex = 37
                End With

                With resid.Offset(i, 6)
                    .value = res * Sqr(df1 / (SSE * (1 - v(1)) - res ^ 2))
                    If Application.Tdist(Abs(.value), df1, 2) <= 0.05 Then .Interior.ColorIndex = 20
                    If Application.Tdist(Abs(.value), df1, 2) <= 0.01 Then .Interior.ColorIndex = 37
                End With

                If CooksD = True Then
                    With resid.Offset(i, 7) 'Cooks D
                        .value = (res ^ 2 / ((Nvar + 1) * SEest ^ 2)) * (v(1) / (1 - v(1)) ^ 2)
                        If Application.Fdist(.value, Nvar + 1, n - (Nvar + 1)) <= 0.8 Then .Interior.ColorIndex = 20
                        If Application.Fdist(.value, Nvar + 1, n - (Nvar + 1)) <= 0.5 Then .Interior.ColorIndex = 37
                    End With
                End If
            End If

            If DW = True Then
                If i >= 2 Then D1 = D1 + (resid.Offset(i, 3).value - resid.Offset(i - 1, 3).value) ^ 2
                D2 = D2 + resid.Offset(i, 3).value ^ 2
            End If
        Next i
        If Diagnostics = True Then
            If CooksD = True Then Fstr = "A:H" Else Fstr = "A:G"
            FmtBottomRow1 resid.CurrentRegion.Rows(n + 1).Columns(Fstr)
        Else
            FmtBottomRow1 resid.CurrentRegion.Rows(n + 1).Columns("A:D")
        End If
        resid.CurrentRegion.Columns("E:H").NumberFormat = "0.000"

        Set OutResiduals = resid.CurrentRegion.Columns("D").Offset(1, 0).Resize(n)
        Set Seq = resid.CurrentRegion.Columns("A").Offset(1, 0).Resize(n)

        j = 0
        If DW = True Then
            With resid.Offset(i + 1, 1)
                .value = "Durbin-Watson ="
                .HorizontalAlignment = xlRight
                .Font.size = 8
            End With
            With resid.Offset(i + 1, 2)
                .value = D1 / D2
                .NumberFormat = "0.00"
                .HorizontalAlignment = xlLeft
            End With
            j = 1
        End If

        
        If chkVIF = True Then k = 3 Else k = 0
        Set pred = resid.Offset(i + 2 + j + k, 0)
        resid.CurrentRegion.Columns("B:D").NumberFormat = AutoFormat(1, Dec(Nvar + 1))
        i = i
    Else
        If chkVIF = True Then k = 1 Else k = 0
        Set pred = resid.Offset(k)
    End If 'residuals

    'predicted values
    If Predictions = True Then
        If PredictorX.Rows.count > 1 Then st2 = "s" Else st2 = ""
        For j = 1 To Nvar + 1
            pred.Offset(2, j - 1) = Labels(j)
        Next j

        pred.Offset(2, Nvar + 1).Range("A1:E1") = Array(" lower", " upper ", " lower", " upper ", " Leverage")
        FmtHeader1 Union(pred.Offset(1, 0).CurrentRegion.Rows, pred.Offset(2, 0).CurrentRegion.Rows)
        pred.Offset(2, Nvar) = "  Predicted"
        With pred.Offset(1, Nvar + 1)
            .value = ConfString & "% Confidence Interval" & st2
            .Font.Underline = xlSingle
            .Font.size = 8
            .Font.Underline = xlSingle
            .Range("A1:B1").HorizontalAlignment = xlCenterAcrossSelection
        End With
        With pred.Offset(1, Nvar + 3)
            .value = "  " & ConfString & "% Prediction Interval" & st2
            .Font.Underline = xlSingle
            .Font.size = 8
            .Range("A1:B1").HorizontalAlignment = xlCenterAcrossSelection
        End With

        ReDim xTemp(Nvar + 1)
        For i = 1 To PredictorX.Rows.count
                If Me.chkForceZero = False Then
                    ReDim Xh(Nvar + 1)
                    Xh(1) = 1#
                    iStart = 1
                Else
                    ReDim Xh(Nvar)
                    iStart = 0
                End If

            'move a row of PredictorX to Xh
            For j = 1 To Nvar
                Xh(j + iStart) = PredictorX.Rows(i).Columns(j).Value2
            Next j
            xTemp = Application.MMult(Xh, XXI)
            v = Application.MMult(xTemp, Application.Transpose(Xh))
            HwConf = t * SEest * Sqr(v(1))

            If Me.chkForceZero = False Then
                For j = 1 To Nvar
                    Xh(j) = Xh(j + 1)
                Next j
            End If
            ReDim Preserve Xh(Nvar)

            HwPred = t * regr.Range("B3").value * Sqr(1 + v(1))
            Yhat = Application.SumProduct(Xh, b) + regr.Range("A1").Offset(0, Nvar)

            For j = 1 To Nvar
                pred.Offset(2 + i, j - 1) = Xh(j)
            Next j

            pred.Offset(2 + i, Nvar) = Yhat
            pred.Offset(2 + i, Nvar + 1) = Yhat - HwConf
            pred.Offset(2 + i, Nvar + 2) = Yhat + HwConf
            pred.Offset(2 + i, Nvar + 3) = Yhat - HwPred
            pred.Offset(2 + i, Nvar + 4) = Yhat + HwPred
            With pred.Offset(2 + i, Nvar + 5)
                .value = v(1)
                If .value > 2 * (Nvar + 1) / n Then .Interior.ColorIndex = 37
                .NumberFormat = "0.000"
            End With
        Next i

        For i = 2 To Nvar + 1
            Dec(i - 1) = DecPlaces(PredictorX.Columns(i - 1).Cells)
        Next i

        For j = 1 To Nvar
            pred.Offset(3, 0).CurrentRegion.Columns(j).NumberFormat = AutoFormat(0, Dec(j))
        Next j
        For j = Nvar + 1 To Nvar + 5
            If Which = Regression Then d = 3 Else d = 1
            pred.Offset(3, 0).CurrentRegion.Columns(j).NumberFormat = AutoFormat(d, Dec(Nvar + 1))
        Next j
        FmtBottomRow1 pred.Offset(3, 0).CurrentRegion.Rows(PredictorX.Rows.count + 2)
        pred.Range("A1").value = "Predicted values for: " & Labels(Nvar + 1)
        pred.Range("A1").HorizontalAlignment = xlLeft
    End If

    'if exponential model then calculate actual values
    If Which = 1 Then LogBase = Exp(1#) Else LogBase = 10
    If (Which = 1 Or Which = 2) And Predictions = True Then
        pred.Range("A1").Resize(PredictorX.Rows.count + 3, 7).Copy
        Set pred = Range("A" & Format(ActiveSheet.Cells.SpecialCells(xlLastCell).Offset(2, 0).Row))
        ActiveSheet.Paste Destination:=pred.Range("A1")
        pred.Range("A1").value = "Predicted values for: " & Labels(Nvar + 2)
        pred.Range("A1").HorizontalAlignment = xlLeft
        For Each value In pred.Range("B4").Resize(PredictorX.Rows.count, 5)
            value.value = LogBase ^ value.value
        Next value
        pred.Range("B4").Resize(PredictorX.Rows.count, 5).NumberFormat = "0.00"
    End If

    'end predicted values

    i = Nvar + 11
    If Residuals = True Then i = i + n + 3
    If Predictions = True Then i = i + PredictorX.Rows.count

    If Predictions = True Then
        Union(pred.Range("A2").CurrentRegion, Base.Range(Cells(12, 2), Cells(i + 11, Nvar + 6))).Columns.AutoFit
    Else
        Base.Range(Cells(12, 2), Cells(i + 11, 9)).Columns.AutoFit

    End If
    ActiveSheet.UsedRange.Columns(1).ColumnWidth = 12
    'special output for exponential model
    If Which = 1 Or Which = 2 Then
        ExpOutput.Range("A1") = "coefficients in terms of the model: abx"
        ExpOutput.Range("A1").Characters(39, 1).Font.Superscript = True
        ExpOutput.Range("A1").Font.Underline = True
        ExpOutput.Range("A2") = LogBase ^ b0
        ExpOutput.Range("B2") = " = a, beginning value"
        ExpOutput.Range("A3") = LogBase ^ b(1)
        ExpOutput.Range("A2:A3").NumberFormat = "0.000"
        ExpOutput.Range("B3") = " = b, growth factor"
        ExpOutput.Range("A4") = ExpOutput.Range("A3") - 1
        ExpOutput.Range("A4").NumberFormat = "0.00%"
        ExpOutput.Range("B4") = "average rate of change"
        'formatting
        Base.Range("C12:C13").NumberFormat = "0.0000"
        Base.Range("D12:D13").NumberFormat = "0.00000"
        Base.Range("G12:H13").NumberFormat = "0.0000"
    End If
    If TestIntercept = False Then RegrOutput.Range("C3:H3").NumberFormat = ";;;" 'hide intecept info if needed
    If chkBeta = True Then
        With RegrOutput.Offset(2, 7)
            .value = 0#
            .NumberFormat = "0.000 "
        End With
    End If

    regr.CurrentRegion.Clear

    If PlotResiduals = True Then
        PlotRes 1, Seq, OutResiduals, "Observation", "Residuals", SEest, "0", 0, Base
    End If

    If PlotResiduals2 = True Then
        'plot residuals by predicted
        st = "Predicted"
        Set x2 = resid.CurrentRegion.Columns("C").Offset(1, 0).Resize(n)
        
        PlotRes 10, x2, OutResiduals, st, "Residuals by " & st, SEest, Fmt, j + 3, Base
    
        'plot residuals by X
        st = Labels(Nvar + 1)
        MakeNewChartDataSheet
        Set ChartDataSheet = ActiveWorkbook.Worksheets("ChartDataSheet_")
        Set x2 = ChartDataSheet.Range("A1").Offset(ChartDataSheet.UsedRange.Rows.count + 2).Range("A1")
        X.Copy
        x2.PasteSpecial xlPasteValues
        Worksheets("ChartDataSheet_").Activate
        x2.Offset(-1, 0).Range("A1").value = "Residuals X data  " & Format(Now(), "m/d/yyyy h:mm.ss")

        x2.Range("A1").Select
        Worksheets("Output").Activate
        Set x2 = x2.Resize(n, Nvar)

        For j = 1 To Nvar
            st = Labels(j)
            If x2.Columns(j).Cells(3) > 10 Then Fmt = AutoFormat(0, Dec(j) - 1) Else Fmt = AutoFormat(0, Dec(j))
            PlotRes 10, x2.Columns(j), OutResiduals, st, "Residuals by " & st, SEest, Fmt, j + 3, Base
        Next j
        Set Seq = Nothing
    End If

    If NormalPlot = True Then
        If MakeNewOutputSheet() = False Then Exit Sub

        MakeNewChartDataSheet
        Set ChartDataSheet = ActiveWorkbook.Worksheets("ChartDataSheet_")
        Set Y1 = ChartDataSheet.Range("A1").Offset(ChartDataSheet.UsedRange.Rows.count + 2).Range("A1")

        resid.CurrentRegion.Range("D2").Resize(n).Copy
        Y1.Range("A1").PasteSpecial xlPasteValues
        Set Y1 = Y1.Resize(n)
        Y1.Sort Key1:=Y1.Range("A1"), Order1:=xlAscending, _
            Header:=xlNo, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
        Set X1 = Y1.Offset(0, 1)
        For i = 1 To X1.Rows.count
            X1.Range("A1").Cells(i) = Application.NormSInv((3 * i - 1) / (3 * n + 1))
        Next i
        Set base2 = Range("A1").Offset(ActiveSheet.UsedRange.Rows.count + 1).Range("A1")

        Set ch = ActiveSheet.ChartObjects.Add(20, base2.Range("A1").Top + 20, 335, 252)
        ch.Chart.ChartWizard Source:=Y1, Gallery:=xlXYScatter, Title:="Normal Probability Plot of Residuals", HasLegend:=2
        ch.Placement = xlMove

        With ch.Chart
            SetFont .ChartTitle
            SetFont .ChartArea
            .PlotArea.Border.LineStyle = xlNone
            .PlotArea.Interior.ColorIndex = xlNone
            .SeriesCollection(1).XValues = X1

            On Error Resume Next
            With .Axes(xlValue, xlPrimary)
                .Crosses = xlMinimum
                .CrossesAt = .MinimumScale
                .HasTitle = True
                .AxisTitle.Text = "Residual"

                .TickLabels.NumberFormat = OutResiduals.NumberFormat
                .TickLabels.NumberFormat = OutResiduals.NumberFormat
                SetFont .AxisTitle
                SetFont .TickLabels
                .HasMajorGridlines = False
                .HasMinorGridlines = False
                .MajorTickMark = xlCross
                .MinorTickMark = xlCross
           End With

           With .Axes(xlCategory, xlPrimary)
                .Crosses = xlMinimum
                .CrossesAt = .MinimumScale
                .HasTitle = True
                .AxisTitle.Text = "Normal Score"
                SetFont .AxisTitle
                SetFont .TickLabels
                .HasMajorGridlines = False
                .HasMinorGridlines = False
                .MajorTickMark = xlCross
                .MinorTickMark = xlCross
                .TickLabels.NumberFormat = "0.0"
            End With
            On Error GoTo MainErrorHandler2


            With .SeriesCollection(1)
                .MarkerStyle = xlDiamond
                .MarkerBackgroundColorIndex = 1
                .MarkerForegroundColorIndex = xlNone
            End With
        End With

        ch.BottomRightCell.Offset(-2, -3).value = "'" & Format(Now(), "m/d/yyyy h:mm.mm")
        Y1.Offset(-1).Range("A1").value = "NormalPlot data  " & ch.BottomRightCell.Offset(-2, -3).value



        ch.BottomRightCell.Offset(1, -1).value = " "
        ch.BottomRightCell.Offset(1, -1).Select
    End If

    If Predictions = True And Base.Range("B1").Columns.ColumnWidth < 10 Then Base.Range("B1").Columns.ColumnWidth = 10
    If Nvar = 1 Then
        Base.Range("B5").EntireRow.Delete
        Base.Range("B7.C9").Cut
        ActiveSheet.Paste Destination:=Base.Range("D4")
        Base.Range("A7:A9").EntireRow.Delete
    Else
        Base.Range("B8.C10").Cut
        ActiveSheet.Paste Destination:=Base.Range("D5")
        Base.Range("A8:A10").EntireRow.Delete
    End If

    Set regr = Nothing
    Set Xaug = Nothing
    Set ANOVA = Nothing
    Set ExpOutput = Nothing
    Set resid = Nothing
    Set OutResiduals = Nothing
    Set pred = Nothing
    Set base2 = Nothing
    Set ch = Nothing
    Set X1 = Nothing
    Set Y1 = Nothing
Exit Sub

MainErrorHandler2:
    If errcheck("Regression Calculations") = vbYes Then Exit Sub Else Resume
End Sub

Private Sub PlotRes(Which As Integer, X As Range, OutResiduals As Range, XaxisLabel As String, Title As String, SEest As Double, Fmt As String, count As Integer, Base As Range)
    Dim base2 As Range
    Dim ch As ChartObject
    Dim MaxS As Double
    Dim MinS As Double
    Dim Inc  As Double
    Dim MinVal As Double
    Dim j As Integer
        
    If MakeNewOutputSheet() = False Then Exit Sub
    Set base2 = Range("A1").Offset(ActiveSheet.UsedRange.Rows.count + 1).Range("A1")
    Set ch = Nothing
    Set ch = ActiveSheet.ChartObjects.Add(20, base2.Range("A1").Top + 20, 335, 252)
    ch.Placement = xlMove
    
    With ch.Chart
        .ChartType = xlXYScatter
        .PlotBy = xlColumns
        .SetSourceData Source:=OutResiduals
        .SeriesCollection(1).XValues = X
        .HasTitle = True
        .HasLegend = False
        .ChartTitle.Text = Title
        SetFont .ChartTitle
        SetFont .ChartArea
        .PlotArea.Border.LineStyle = xlNone
        .PlotArea.Interior.ColorIndex = xlNone

        On Error Resume Next
        With .Axes(xlCategory, xlPrimary)
            .HasTitle = True
            .AxisTitle.Text = XaxisLabel
            SetFont .AxisTitle
            SetFont .TickLabels
            .HasMajorGridlines = False
            .HasMinorGridlines = False
            .MajorTickMark = xlCross
            .MinorTickMark = xlCross
            .Crosses = xlMinimum
            .CrossesAt = .MinimumScale
            .TickLabels.NumberFormat = Trim(Fmt)
        End With

        With .Axes(xlValue, xlPrimary)
            .HasTitle = True
            .AxisTitle.Text = "Residual (gridlines = std. error)"

            .TickLabels.NumberFormat = Trim(Fmt)
            SetFont .AxisTitle
            SetFont .TickLabels
            .MajorUnit = SEest
            .HasMajorGridlines = True
            .HasMinorGridlines = False
            .MajorGridlines.Border.LineStyle = xlDot
            .MajorGridlines.Border.Weight = xlHairline
            .MajorTickMark = xlCross
            .MinorTickMark = xlCross
            .Crosses = xlMinimum
            .CrossesAt = .MinimumScale
            .TickLabels.NumberFormat = OutResiduals.NumberFormat
        End With
        
        With .SeriesCollection(1)
            .MarkerStyle = xlDiamond
            .MarkerBackgroundColorIndex = 1
            .MarkerForegroundColorIndex = xlNone
            If Which = 10 Then
                .Border.LineStyle = xlNone
            Else
                With .Border
                    .ColorIndex = 1
                    .Weight = xlHairline
                    .LineStyle = xlContinuous
                End With
            End If
        End With
        
    'set MaxS,MinS, Inc; MinVal
       MaxS = .Axes(xlValue).MaximumScale
       MinS = .Axes(xlValue).MinimumScale
       Inc = -(.Axes(xlValue).MajorUnit)
       MinVal = Application.Min(OutResiduals)
       
       If (MinVal - MinS) / (MaxS - MinS) > 0.25 Then ScaleAxes ch.Chart, xlValue, MaxS, MinS, Inc, MinVal
       
       MaxS = .Axes(xlCategory).MaximumScale
       MinS = .Axes(xlCategory).MinimumScale
       Inc = -(.Axes(xlCategory).MajorUnit)
       MinVal = Application.Min(X)
    
       If (MinVal - MinS) / (MaxS - MinS) > 0.25 Then ScaleAxes ch.Chart, xlCategory, MaxS, MinS, Inc, MinVal
    End With
    
    If Which = 10 Then
        ch.BottomRightCell.Offset(-2, -3).value = "'" & Format(Now(), "m/d/yyyy h:mm.ss")
    End If

    ch.BottomRightCell.Offset(1, -1).value = " "
    ch.BottomRightCell.Offset(1, -1).Select
End Sub

Sub APR(Base As Range, X As Range, Y As Range, Labels() As Variant)
    
    On Error GoTo MainErrorHandler3
    Application.EnableCancelKey = xlErrorHandler

    Dim Nvar As Integer
    Dim nRows As Integer
    Dim nCols As Byte
    Dim regr As Range
    Dim HowMany As Integer
    Dim i As Integer
    Dim j As Integer
    Dim k As Byte
    Dim R As Integer
    Dim m As Byte
    Dim n As Byte
    Dim dfe As Integer
    Dim istring As String
    Dim bstring As String
    Dim b(12) As Byte
    Dim H1 As String
    Dim H2 As String
    Dim p(16) As String
    Dim Xsubset As Range
    Dim XArray() As Double
    Dim xTemp() As Double
    Dim st As String
    Dim APRout As Range
    Dim APRout2 As Range
    Dim Row As Integer
    Dim OutputRow() As Variant
    Dim sqp As Double
    Dim Pos() As Byte
    Dim Rvalue As Range
    Dim varRange As Range
    Dim pvalues As Range
    Dim tempC As Double
            
    p(1) = "0000"
    p(2) = "0001"
    p(3) = "0010"
    p(4) = "0011"
    p(5) = "0100"
    p(6) = "0101"
    p(7) = "0110"
    p(8) = "0111"
    p(9) = "1000"
    p(10) = "1001"
    p(11) = "1010"
    p(12) = "1011"
    p(13) = "1100"
    p(14) = "1101"
    p(15) = "1110"
    p(16) = "1111"

    Nvar = X.Columns.count
    nRows = X.Rows.count

    HowMany = 2 ^ Nvar - 1
    
    If Me.chkStepwise = False Then
        SetTitle Base, "Regression Analysis -- All Possible Regressions"
    Else
        i = Me.SpinButton1.value
        If i = 1 Then
            SetTitle Base, "Regression Analysis -- Stepwise Selection displaying the best model of each size"
        Else
            SetTitle Base, "Regression Analysis -- Stepwise Selection displaying the " & i & " best models of each size"
        End If
    End If
    Set Xsubset = ThisWorkbook.Sheets("PredSheet").Range("A3")
    If Me.chkAPR = True Then
        Set APRout = Base.Range("A9")
    Else
        Set APRout = ThisWorkbook.Sheets("RegrSheet").Range("A14")
        Set APRout2 = Base.Range("A9")
    End If
    
    With APRout
        'move x to xtemp array
        ReDim xTemp(nRows, Nvar)
        
        With X.Range("A1")
            For j = 1 To nRows
                For k = 1 To Nvar
                    xTemp(j, k) = .Offset(j - 1, k - 1)
                Next k
            Next j
        End With
    
        'parse HowMany to binary patterns
        For i = HowMany To 1 Step -1
            ReDim OutputRow(Nvar + 6)
            
            Row = HowMany - i
            istring = Hex(i)
            If Len(istring) = 1 Then istring = "00" & istring
            If Len(istring) = 2 Then istring = "0" & istring
            bstring = ""
            For j = 1 To 3
                k = Val("&H" & Mid(istring, j, 1)) + 1
                bstring = bstring & p(k)
            Next j
            
            'convert bstring to integer string
            nCols = 0
            For j = 1 To 12
                b(j) = Val(Mid(bstring, j, 1))
                nCols = nCols + b(j)
            Next
               
            ReDim Pos(nCols)
            ReDim XArray(nRows, nCols)
            dfe = nRows - nCols - 1
            
            'move variables to be analyzed to Xsubset
            n = 0
            For k = 12 - Nvar + 1 To 12
                If b(k) = 1 Then
                    m = k - (12 - Nvar)
                    n = n + 1
                    Pos(n) = m
                    For R = 1 To nRows
                        XArray(R, n) = xTemp(R, m)
                    Next R
                End If
            Next k
            
            Set Xsubset = Xsubset.Resize(nRows, nCols)
            
            Xsubset.value = XArray
         
            'do regression & output
            Set regr = ThisWorkbook.Sheets("RegrSheet").Range("A1")
            
            st = regr.Cells.Address & ":" & regr.Offset(4, nCols).Cells.Address
            regr.Range(st) = Application.LinEst(Y, Xsubset, True, True)
            With regr
                If Nvar = nCols Then
                    If SingularityTest(Nvar, regr, Base) = True Then
                        Exit Sub
                    Else
                        sqp = .Range("B3") ^ 2
                    End If
                End If
                
                OutputRow(1) = nCols
                For k = 1 To nCols
                    OutputRow(1 + Pos(k)) = Application.Tdist(Abs(.Range("A1").Offset(0, nCols - k) / _
                                    .Range("A1").Offset(1, nCols - k)), nRows - nCols - 1, 2)
                Next k
                OutputRow(Nvar + 2) = .Range("B3") 's
                     
                OutputRow(Nvar + 3) = 1 - ((nRows - 1) / dfe) * (.Range("B5") / (.Range("A5") + .Range("B5"))) 'Adj RSQ
                If OutputRow(Nvar + 3) < 0# Then OutputRow(Nvar + 3) = 0# 'set adj RSQ = 0 if negative
                OutputRow(Nvar + 4) = .Range("A3") 'RSQ
                tempC = (.Range("B5") / sqp) - (nRows - 2 * (nCols + 1)) 'C
                If tempC < 0 Then tempC = 0
                OutputRow(Nvar + 5) = tempC
                OutputRow(Nvar + 6) = Application.Fdist(.Range("A4"), nCols, dfe)  'p-value
                .CurrentRegion.Clear
            End With
                
            Xsubset.CurrentRegion.Clear
            .Offset(Row, 0).Resize(1, Nvar + 6).value = OutputRow
        Next i
        

        .CurrentRegion.Sort Key1:=.Offset(0, Nvar + 1), Order1:=xlAscending, _
                    Header:=xlNo, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
        
        If Me.chkStepwise = True Then
            Dim nm As Integer
            Dim ntest As Integer
            Dim VarCount As Integer
            Dim NvarRange As Range
            Dim RowCount As Integer
            Dim DelRowsCount As Integer
            
            nm = Me.SpinButton1.value
            .CurrentRegion.Sort Key1:=.Range("A1"), Order1:=xlAscending, _
                    Header:=xlNo, OrderCustom:=1, MatchCase:=False, Orientation:=xlTopToBottom
                    
            VarCount = 0
            Set NvarRange = .Range("A1").Resize(HowMany, 1)
            
            For Each Rvalue In NvarRange
                If Rvalue.value <> VarCount Then
                    VarCount = Rvalue.value
                    ntest = 1
                Else
                    ntest = ntest + 1
                    If ntest > nm Then
                        Rvalue.value = Rvalue.value * -1  'mark rows to be deleted
                    End If
                End If
            Next Rvalue
            
            'move appropriate data to output sheet
            RowCount = HowMany
            DelRowsCount = 0
            m = 0
            With NvarRange.Range("A1")
                For i = 0 To HowMany
                    If .Offset(i, 0).value > 0 Then
                        k = 0
                        For Each Rvalue In APRout.Offset(i, 0).Resize(1, Nvar + 6).Cells
                            APRout2.Offset(m, k) = Rvalue
                            k = k + 1
                        Next Rvalue
                        m = m + 1
                    End If
                Next
            End With
            HowMany = m
        End If
    End With
    
    If Me.chkStepwise = True Then Set APRout = APRout2
    
    With APRout
        .CurrentRegion.Columns(1).ColumnWidth = 6
        
        .Offset(-1, 0) = "Nvar"
        .Offset(-1, Nvar + 1).Range("A1:E1") = Array("s  ", "Adj R|fffd|", "R|fffd|", "Cp ", "p-value")
        .Offset(-1, 0).EntireRow.HorizontalAlignment = xlRight
        .Range("B1").Resize(HowMany, Nvar).NumberFormat = ".0000"
        For j = 1 To Nvar
            .Offset(-1, j) = Labels(j)
            .Offset(-1, j).HorizontalAlignment = xlCenter
            .Offset(1, j).CurrentRegion.Columns(j + 1).AutoFit
            If .Offset(1, j).ColumnWidth < 7 Then .Offset(1, j).ColumnWidth = 7
        Next j
        
        .Offset(0, Nvar + 1).Resize(HowMany, 4).NumberFormat = ".000"
        .Offset(-1, Nvar + 1).Range("A1").Resize(HowMany, 5).Columns.AutoFit
        .Offset(-1, Nvar + 1).Range("B1:C1").Columns.ColumnWidth = 7
        .CurrentRegion.Columns(Nvar + 6).AutoFit
        
        Set varRange = .Range("B1").Resize(HowMany, Nvar)
        For Each Rvalue In varRange
            If IsEmpty(Rvalue) = False Then
                Select Case Rvalue
                    Case Is <= 0.01
                        Rvalue.Interior.ColorIndex = 6
                    Case Is <= 0.05
                        Rvalue.Interior.ColorIndex = 19
                End Select
            End If
        Next Rvalue
    
        Base.Range("B4") = nRows
        Base.Range("C4") = "observations"
        Base.Range("B5") = Labels(Nvar + 1)
        Base.Range("B5").HorizontalAlignment = xlRight
        Base.Range("C5") = "is the dependent variable"
        Base.Range("C7") = "p-values for the coefficients"
        Base.Range("C7").Font.Italic = True
        
        .CurrentRegion.Columns(1).HorizontalAlignment = xlCenter
        Set pvalues = .CurrentRegion.Columns(Nvar + 6).Offset(2).Resize(HowMany).Cells
        For Each Rvalue In pvalues
            FormatPvalue Rvalue, xlYes
        Next Rvalue
        pvalues.Range("A1").Offset(HowMany, 0).Range("A1") = " "
    End With
        
    SetGrid varRange
    varRange.Columns.HorizontalAlignment = xlCenter
    
    'start chart ouput -----------------------------------------
    If Me.chkStepwise.value = True Or (Me.chkStepwise.value = False And Nvar <= 7) Then
        Dim ch As ChartObject
        Dim base2 As Range
        
        Set base2 = Range("A1").Offset(ActiveSheet.UsedRange.Rows.count + 1).Range("A1")
    
        Set ch = ActiveSheet.ChartObjects.Add(20, base2.Range("A1").Top + 20, 335, 252)
        ch.Placement = xlMove
        
        With ch.Chart
            m = APRout.CurrentRegion.Rows.count - 2
            .SeriesCollection.Add Source:=APRout.Offset(0, Nvar + 2).Resize(m, 1).Cells
            .ChartType = xlXYScatter
            .PlotBy = xlColumns
            .HasLegend = False
            .HasTitle = True
            .ChartTitle.Text = "Adj R|fffd| vs. Number of Independent Variables"
            SetFont .ChartTitle
    
            SetFont .ChartArea
            .PlotArea.Border.LineStyle = xlNone
            .PlotArea.Interior.ColorIndex = xlNone
            .SeriesCollection(1).XValues = APRout.Resize(m, 1).Cells
            
            With .Axes(xlCategory, xlPrimary)
                .HasTitle = True
                .AxisTitle.Text = "Nvar"
                SetFont .AxisTitle
                SetFont .TickLabels
                .HasMajorGridlines = False
                .HasMinorGridlines = False
                .MajorTickMark = xlCross
                .MinorTickMark = xlNone
            End With
          
            With .Axes(xlValue, xlPrimary)
                .HasTitle = True
                .AxisTitle.Text = "Adj R|fffd|"
                SetFont .AxisTitle
                SetFont .TickLabels
                .HasMajorGridlines = False
                .HasMinorGridlines = False
                .MajorTickMark = xlCross
                .MinorTickMark = xlNone
            End With
            
            With .SeriesCollection(1)
                .MarkerStyle = xlDiamond
                .MarkerBackgroundColorIndex = 1
                .MarkerForegroundColorIndex = xlNone
                With .Border
                    .ColorIndex = 1
                    .Weight = xlHairline
                    .LineStyle = xlNone
                    If Me.chkStepwise.value = True And Me.SpinButton1.value = 1 Then .LineStyle = xlContinuous
                End With
                 
            End With
         
         'set MaxS,MinS, Inc; MinVal
            .Axes(xlValue).MaximumScale = 1
            .Axes(xlValue).MinimumScale = 0
            .Axes(xlCategory).MinimumScale = 0
            .Axes(xlCategory).MaximumScale = Nvar
            .Axes(xlCategory).MinorUnit = 1
            .Axes(xlCategory).MajorUnit = 1
        End With
            
        ch.BottomRightCell.Offset(1, -1).value = " "
        ch.BottomRightCell.Offset(1, -1).Select
    End If
    'end chart ouput -------------------------------------------
    
    Set Xsubset = Nothing
    Set regr = Nothing
    Set APRout = Nothing
    Set varRange = Nothing
Exit Sub

MainErrorHandler3:
    If errcheck("All Possible Regressions") = vbYes Then Exit Sub Else Resume
End Sub

Private Function SingularityTest(Nvar As Integer, regr As Range, Base As Range) As Boolean
    Dim i As Integer
    SingularityTest = False

    For i = 0 To Nvar - 1 '\ checks for #NUM! error or tiny t-value
        Select Case True
            Case IsError(regr.Range("A1").Offset(0, i)) = True, _
                IsError(regr.Range("A1").Offset(1, i)) = True, _
                regr.Range("A1").Offset(1, i).value = 0#, _
                Abs(regr.Range("A1").Offset(0, i).value / regr.Range("A1").Offset(1, i).value) < 0.0001, _
                regr.Range("A1").Offset(1, i).value < 0.0000000000001, _
                ((regr.Range("A5").value < 0# Or regr.Range("B5").value < 0#) And (Me.chkForceZero = False))
                    RestoreStatusBar
                    Base.Range("A4") = "Cannot calculate regression."
                    Base.Range("A5") = "Check for singular matrix and/or variable(s) with zero variance."
                    Base.Range("A6") = "See MegaStat Help for details"
                    regr.CurrentRegion.Clear
                    EndProc Base
                    SingularityTest = True
                    Exit Function
        End Select
    Next i
End Function
Attribute VB_Name = "frmSQC"
Attribute VB_Base = "0{CCAC5B07-2CD5-4104-BB74-7EB2709FB896}{8F0F7FCC-2449-44C0-B04A-65617FF2CDB9}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'''MegaStat|fffd| Quality Control Process Charts module |fffd|2005 by J. B. Orris
'frmSQC

Option Explicit
Option Base 1

Private Sub UserForm_Activate()
  
    If Me.OptionButton1.value = True Then Me.LabelInput.Caption = _
      "Select range where each row is a sample of measurements."

    If Me.OptionButton2.value = True Then Me.LabelInput.Caption = _
      "Select range containing proporton or number nonconforming"

    If Me.OptionButton3.value = True Then Me.LabelInput.Caption = _
      "Select range containing number of defects in each sample."

    Me.InputBox.SetFocus
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    SQC
End Sub

Private Sub buttonClear_Click()
    ClearLast
    Me.Hide
    Unload Me
    OpenUserForm "SQC"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then Me.InputBox.SetFocus
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    Dim st As Integer
    CallHelp 5100
End Sub

Private Sub InputBox_DblClick(Cancel As Boolean)
    Me.InputBox.Text = SetAddr(Me, Me.InputBox)
End Sub

Private Sub InputBox_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBox.Text = SetAddr(Me, Me.InputBox)
    End If
End Sub

Private Sub Label1_Click()
    Me.InputBox.Text = SetAddr(Me, Me.InputBox)
End Sub

Private Sub InputBox_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        Me.buttonOK.SetFocus
    End If
End Sub
Private Sub OptionButton1_Click()
    UserForm_Activate
End Sub

Private Sub OptionButton2_Click()
    UserForm_Activate
End Sub

Private Sub OptionButton3_Click()
    UserForm_Activate
End Sub
Public Sub SQC()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler

    Dim InputRange As Range
    Dim X As Range
    Dim Base As Range
    Dim n As Double
    Dim Which As Byte
    Dim A2 As Range
    Dim D3 As Range
    Dim D4 As Range
    Dim Data As Range
    Dim RbarData As Range
    Dim MissingDataCount As Integer
    Dim Row As Object
    Dim i As Integer
    Dim j As Byte
    Dim size As Integer
    Dim nRows As Integer
    Dim LCL As Double
    Dim Center As Double
    Dim UCL As Double
    Dim LCL_Rbar As Double
    Dim Center_Rbar As Double
    Dim UCL_Rbar As Double
    Dim base2 As Range
    Dim ch As ChartObject
    Dim Fmt As String
    Dim FmtDataLabels
    Dim Dec As Integer
    Dim ChartData As Range
    Dim ChartTitle As String
    Dim value As Range
    Dim temp As Double
    Dim hw As Double
    Dim HowMany As Byte
    Dim TickMark As Integer
    Dim ChartDataSheet As Worksheet
    Dim Test As Range
    
    
    If Me.OptionButton1.value = True Then Which = 1
    If Me.OptionButton2.value = True Then Which = 2
    If Me.OptionButton3.value = True Then Which = 3
    
    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub
    
    If ValidRange(Me.InputBox, vbYes) = False Then Exit Sub
    Set InputRange = Range(Me.InputBox)
    InputRange.Worksheet.Activate
    
    If Application.count(InputRange.Rows(1)) = 0 Then i = 2 Else i = 1
    For Each Test In InputRange.Rows(1)
        If IsLabel(Test) = True Then
            i = 2
            Exit For
        End If
    Next Test
    Set X = InputRange.Range(Cells(i, 1), Cells(InputRange.Rows.count, InputRange.Columns.count))
    n = X.Columns.count
    Dec = DecPlaces(X)
    MissingDataCount = 0
    
    Select Case Which
    Case 1 'mean & range
        If StopQ1("Must have at least 3 samples.", X.Rows.count < 3, InputRange, 1042, Me.InputBox) = True Then Exit Sub
        
        If StopQ1("Sample size must be >= 2 and <= 25.", _
                n < 2 Or n > 25, InputRange, 1043, Me.InputBox) = True Then Exit Sub
                
        Set A2 = ThisWorkbook.Sheets("TempSheet").Range("A2")
        Set D3 = ThisWorkbook.Sheets("TempSheet").Range("A3")
        Set D4 = ThisWorkbook.Sheets("TempSheet").Range("A4")
        
        A2.Range("C1:Z1") = Array(1.88, 1.023, 0.729, 0.577, 0.483, 0.419, 0.373, 0.337, 0.308, 0.285, 0.266, 0.249, 0.235, _
                    0.223, 0.212, 0.203, 0.194, 0.187, 0.18, 0.173, 0.167, 0.162, 0.157, 0.153)
                    
        D3.Range("C1:Z1") = Array(0, 0, 0, 0, 0, 0.076, 0.136, 0.184, 0.223, 0.256, 0.283, 0.307, 0.328, 0.347, 0.363, _
                    0.378, 0.391, 0.403, 0.415, 0.425, 0.434, 0.443, 0.451, 0.459)
        
        D4.Range("C1:Z1") = Array(3.267, 2.574, 2.282, 2.114, 2.004, 1.924, 1.864, 1.816, 1.777, 1.744, 1.717, 1.693, 1.672, 1.653, _
                    1.637, 1.622, 1.608, 1.597, 1.585, 1.575, 1.566, 1.557, 1.548, 1.541)
    
    Case 2 'proportion
        n = Eval(Me.Input_n.Text)
        If StopQ0("Input value cannot be zero or negative", n <= 0, 1011, Me.Input_n) = True Then Exit Sub
    
    Case 3 'number of defects
         If StopQ1("Must have at least 3 samples.", X.Rows.count < 3, InputRange, 1042, Me.InputBox) = True Then Exit Sub
   
    End Select

    StartProc Me
    
    If MakeNewOutputSheet() = False Then Exit Sub

    Set Base = Range("A" & Format(ActiveCell.Row))
    SetTitle Base, "Quality Control Process Charts"
    Base.Range("D4") = "Sample size "
    Base.Range("D5") = "Number of samples "
    Base.Range("D8") = "Upper Control Limit, UCL"
    Base.Range("D9") = "Center"
    Base.Range("D10") = "Lower Control Limit, LCL"
    Base.Range("D4:F19").HorizontalAlignment = xlRight
    
    MakeNewChartDataSheet
    Set ChartDataSheet = ActiveWorkbook.Worksheets("ChartDataSheet_")
    Set Data = ChartDataSheet.Range("A1").Offset(ChartDataSheet.UsedRange.Rows.count + 3).Range("A1")
    
    Select Case Which
    Case 1
        Base.Range("E7") = "Mean"
        Base.Range("F7") = "Range"
        Data.Offset(-2).value = "Xbar Plot data  "
        MissingDataCount = 0
        i = -1
        For Each Row In X.Rows
            size = Application.count(Row)
            If size <> n Then MissingDataCount = MissingDataCount + 1
            If size > 0 Then
                i = i + 1
               Data.Offset(i, 0) = Application.Average(Row)
            End If
        Next Row
        nRows = i + 1
        
        Set RbarData = Data.Offset(i + 4)
        RbarData.Offset(-2).value = "Rbar Plot data  "
        
        i = -1
        For Each Row In X.Rows
            If Application.count(Row) > 0 Then
                i = i + 1
                RbarData.Offset(i, 0) = Application.Max(Row) - Application.Min(Row)
            End If
        Next Row
    
        If MissingDataCount > 0 Then Base.Range("F5") = "(Missing or invalid data in " & MissingDataCount & " samples.)"
    
        Center = Application.Average(Data.CurrentRegion.Columns(1))
        Center_Rbar = Application.Average(RbarData.CurrentRegion.Columns(1))
        hw = A2.Offset(0, n) * Center_Rbar
        LCL = Center - hw
        UCL = Center + hw
        LCL_Rbar = D3.Offset(0, n) * Center_Rbar
        UCL_Rbar = D4.Offset(0, n) * Center_Rbar
            
        Data.Columns.Offset(0, 1).Resize(nRows) = LCL
        Data.Columns.Offset(0, 2).Resize(nRows) = Center
        Data.Columns.Offset(0, 3).Resize(nRows) = UCL
        Data.Range("A1").Offset(nRows - 1, 4) = LCL
        Data.Range("A1").Offset(nRows - 1, 5) = Center
        Data.Range("A1").Offset(nRows - 1, 6) = UCL
        Base.Range("E8") = UCL
        Base.Range("E9") = Center
        Base.Range("E10") = LCL
        Set Data = Data.CurrentRegion
       
        Set RbarData = RbarData.CurrentRegion
        
        RbarData.Columns.Offset(0, 1) = LCL_Rbar
        RbarData.Columns.Offset(0, 2) = Center_Rbar
        RbarData.Columns.Offset(0, 3) = UCL_Rbar
        RbarData.Range("A1").Offset(nRows - 1, 4) = LCL_Rbar
        RbarData.Range("A1").Offset(nRows - 1, 5) = Center_Rbar
        RbarData.Range("A1").Offset(nRows - 1, 6) = UCL_Rbar
        Base.Range("F8") = UCL_Rbar
        Base.Range("F9") = Center_Rbar
        Base.Range("F10") = LCL_Rbar
        Base.Range("E8:F10").NumberFormat = AutoFormat(2, Dec)
        Set RbarData = RbarData.CurrentRegion
    
    Case 2
        Base.Range("E7") = "Proportion defective"
        Base.Range("E7").HorizontalAlignment = xlLeft
        
        Data.Offset(-2).value = "Proportions Plot data  "
        i = -1
        For Each value In X
            If IsNumeric(value) = True And IsEmpty(value) = False Then
                i = i + 1
                temp = value.Value2
                If temp > n Then
                    temp = n
                    MissingDataCount = MissingDataCount + 1
                End If
                If temp >= 1 Then temp = temp / n
                Data.Offset(i, 0) = temp
            End If
        Next value
        nRows = i + 1
    
        If MissingDataCount > 0 Then Base.Range("F5") = "(Invalid data in " & MissingDataCount & " cells.)"
    
        Center = Application.Average(Data.CurrentRegion.Columns(1))
        hw = 3# * Sqr(Center * (1 - Center) / n)
        LCL = Center - hw
        If LCL < 0# Then LCL = 0#
        UCL = Center + hw
            
        Set Data = Data.CurrentRegion
        
        Data.Columns.Offset(0, 1) = LCL
        Data.Columns.Offset(0, 2) = Center
        Data.Columns.Offset(0, 3) = UCL
        Data.Range("A1").Offset(nRows - 1, 4) = LCL
        Data.Range("A1").Offset(nRows - 1, 5) = Center
        Data.Range("A1").Offset(nRows - 1, 6) = UCL
        Base.Range("E8") = UCL
        Base.Range("E9") = Center
        Base.Range("E10") = LCL
        Base.Range("E8:E10").NumberFormat = "0.0000"
        Set Data = Data.CurrentRegion
    
    
    Case 3
        Base.Range("E7") = "Defects per sample"
        Base.Range("E7").HorizontalAlignment = xlLeft
        
        Data.Offset(-2).value = "Defects Plot data"
        i = -1
        For Each value In X
            If IsNumeric(value) = True And IsEmpty(value) = False Then
                temp = value.Value2
                If temp >= 0 Then
                    i = i + 1
                    Data.Offset(i, 0) = temp
                Else
                    MissingDataCount = MissingDataCount + 1
                End If
            End If
        Next value
        nRows = i + 1
    
        If MissingDataCount > 0 Then Base.Range("F5") = "(Invalid data in " & MissingDataCount & " cells.)"
    
        Center = Application.Average(Data.CurrentRegion.Columns(1))
        hw = 3# * Sqr(Center)
        LCL = Center - hw
        If LCL < 0# Then LCL = 0#
        UCL = Center + hw
            
        Set Data = Data.CurrentRegion
        
        Data.Columns.Offset(0, 1) = LCL
        Data.Columns.Offset(0, 2) = Center
        Data.Columns.Offset(0, 3) = UCL
        Data.Range("A1").Offset(nRows - 1, 4) = LCL
        Data.Range("A1").Offset(nRows - 1, 5) = Center
        Data.Range("A1").Offset(nRows - 1, 6) = UCL
        Base.Range("E8") = UCL
        Base.Range("E9") = Center
        Base.Range("E10") = LCL
        Base.Range("E8:E10").NumberFormat = "0.000"
        
        Set Data = Data.CurrentRegion
    End Select
    
    Base.Range("E4") = n
    Base.Range("E5") = nRows
    Base.Range("E4:F5").HorizontalAlignment = xlLeft
    If Which = 3 Then Base.Range("A4:F4").Delete Shift:=xlUp
    
    If Which = 1 Then HowMany = 2 Else HowMany = 1
    For j = 1 To HowMany '1=mean, w 2=range
        If MakeNewOutputSheet() = False Then Exit Sub
        
        Select Case Which
        Case 1
            Select Case j
            Case 1
                Set base2 = Base.Range("A12")
                Set ChartData = Data
                ChartTitle = "Mean"
                Fmt = AutoFormat(0, Dec)
                FmtDataLabels = AutoFormat(2, Dec)
                TickMark = xlCross
            Case 2
                Set base2 = Base.Range("A33")
                Set ChartData = RbarData
                ChartTitle = "Range"
                TickMark = xlCross
            End Select
        Case 2
                Set base2 = Base.Range("A12")
                Set ChartData = Data
                ChartTitle = "Proportion Defective"
                Fmt = "0.00"
                FmtDataLabels = "  0.0000"
                TickMark = xlCross
        Case 3
                Set base2 = Base.Range("A11")
                Set ChartData = Data
                ChartTitle = "Number of Defects"
                Fmt = "0"
                FmtDataLabels = "     0.000"
                TickMark = xlNone
        End Select
        
        Set ch = ActiveSheet.ChartObjects.Add(20, base2.Range("A1").Top, 400, 252)
        ch.Placement = xlMove
        
        With ch.Chart
            .SeriesCollection.Add Source:=ChartData
            .ChartType = xlLine
            .PlotBy = xlColumns
            .HasTitle = True
            .HasLegend = False
            .ChartTitle.Text = "Control Chart for the " & ChartTitle
            SetFont .ChartTitle
            SetFont .ChartArea
            .PlotArea.Border.LineStyle = xlNone
            .PlotArea.Interior.ColorIndex = xlNone
            .PlotArea.Width = 350
    
            On Error Resume Next
            With .Axes(xlCategory, xlPrimary)
                .HasTitle = True
                .AxisTitle.Text = "Sample Number"
                SetFont .AxisTitle
                SetFont .TickLabels
                .HasMajorGridlines = False
                .HasMinorGridlines = False
                .MajorTickMark = xlOutside
                .MinorTickMark = xlNone
                .TickLabels.NumberFormat = "0"
                .TickLabels.Orientation = xlHorizontal
            End With
    
            With .Axes(xlValue, xlPrimary)
                .HasTitle = True
                .AxisTitle.Text = "Sample " & ChartTitle
    
                .TickLabels.NumberFormat = Trim(Fmt)
                SetFont .AxisTitle
                SetFont .TickLabels
                .HasMajorGridlines = False
                .HasMinorGridlines = False
                .MajorTickMark = xlCross
                .MinorTickMark = TickMark
                .Crosses = xlCustom
                .CrossesAt = .MinimumScale
            End With
            
            With .SeriesCollection(1)
                .MarkerStyle = xlDiamond
                .MarkerBackgroundColorIndex = 1
                .MarkerForegroundColorIndex = 1
                .Border.Weight = xlHairline
                .Border.LineStyle = xlContinuous
                .Border.ColorIndex = 1
                .MarkerSize = 4
            End With
            
            For i = 2 To 4 'display limits
                With .SeriesCollection(i)
                    .MarkerStyle = xlNone
                    .Border.LineStyle = xlDot
                    .Border.ColorIndex = 1
                End With
            Next i
        
            For i = 5 To 7 'display datalabels
                With .SeriesCollection(i)
                    .MarkerStyle = xlNone
                    .Border.LineStyle = xlNone
                    .ApplyDataLabels Type:=xlDataLabelsShowValue, AutoText:=True, LegendKey:=False
                    With .DataLabels
                        .HorizontalAlignment = xlCenter
                        .VerticalAlignment = xlCenter
                        .Position = xlLabelPositionRight
                        .Orientation = xlHorizontal
                        .NumberFormat = FmtDataLabels
                    End With
                End With
            Next i
        End With
    Next j
    On Error GoTo MainErrorHandler
    ch.BottomRightCell.Offset(-2, -3).value = "'" & Format(Now(), "m/d/yyyy h:mm.ss.000")
    ChartData.Offset(-2).Range("A1") = ChartData.Offset(-2).Range("A1").Text & ch.BottomRightCell.Offset(-2, -3).value
    ch.BottomRightCell.Offset(1, -1).value = " "
    ch.BottomRightCell.Offset(1, -1).Select

    EndProc Base
    Exit Sub
    
MainErrorHandler:
    If errcheck("Statisical Control Process Charts") = vbYes Then Exit Sub Else Resume
End Sub
Attribute VB_Name = "frmScatterplot"
Attribute VB_Base = "0{669E1312-2AF0-4C53-9FD8-E58976FC2F91}{EDA27220-0CB2-41C6-B447-3AE3EF9F1580}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'MegaStat|fffd| Scatterplot module |fffd|2005 by J. B. Orris
'frmScatterplot

Option Explicit

Private Sub UserForm_Activate()
    Me.InputBoxHoriz.SetFocus
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    SetTitle
    Scatterplot
End Sub

Private Sub buttonClear_Click()
    ClearLast
    Me.Hide
    Unload Me
    OpenUserForm "Scatterplot"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then Me.InputBoxHoriz.SetFocus
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    CallHelp 4610
End Sub

Private Sub InputBoxHoriz_DblClick(Cancel As Boolean)
    Me.InputBoxHoriz.Text = SetAddr(Me, Me.InputBoxHoriz)
End Sub

Private Sub InputBoxVert_DblClick(Cancel As Boolean)
    Me.InputBoxVert.Text = SetAddr(Me, Me.InputBoxVert)
End Sub

Private Sub Label1_Click()
    Me.InputBoxHoriz.Text = SetAddr(Me, Me.InputBoxHoriz)
End Sub

Private Sub Label2_Click()
    Me.InputBoxVert.Text = SetAddr(Me, Me.InputBoxVert)
End Sub

Private Sub InputBoxHoriz_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBoxHoriz.Text = SetAddr(Me, Me.InputBoxHoriz)
    End If
End Sub

Private Sub InputBoxVert_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBoxVert.Text = SetAddr(Me, Me.InputBoxVert)
    End If
End Sub

Private Sub InputBoxHoriz_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        Me.InputBoxVert.SetFocus
    End If
End Sub

Private Sub InputBoxVert_KeyDown(KeyCode As Integer, ByVal Shift As Integer)
    If KeyCode = vbKeyReturn Then
        KeyCode = 0
        Me.InputChartTitle.SetFocus
    End If
End Sub

Private Sub chkRegrLine_Click()
    If Me.chkRegrLine = False Then Me.chkForceZeroQ.Enabled = False Else Me.chkForceZeroQ.Enabled = True
End Sub

Private Sub InputChartTitle_change()
    SetTitle
End Sub

Private Sub SetTitle()
    Dim ncells As Integer
    Dim j As Integer
    Dim st As String
    Dim InputText As String
    
    st = ""
    InputText = Me.InputChartTitle.Text
    
    On Error GoTo EndOfSub
        ncells = Range(InputText).Cells.count
        
    For j = 1 To ncells
        If Not IsEmpty(Range(InputText).Cells(j)) Then
            If j >= 2 Then st = st & Chr(13)
            st = st & Range(InputText).Cells(j)
        End If
    Next j
    
    Me.InputChartTitle.Text = st

EndOfSub:
    Exit Sub
End Sub

Sub Scatterplot()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler

    Dim X As Range
    Dim Y As Range
    Dim Base As Range
    Dim value As Range
    Dim ans As Integer
    Dim XaxisLabel As String
    Dim yAxisLabel As String
    Dim InputTitle As String
    Dim TrendType As Integer
    Dim rsq As Double

    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub

    'set InputXRange
    If ValidRange(Me.InputBoxHoriz, vbYes) = False Then Exit Sub
    Set X = Range(Me.InputBoxHoriz.Text)
    
    If StopQ1("Data must be in a single column.", X.Columns.count > 1, X, 1005, Me.InputBoxHoriz) = True Then Exit Sub
    
    For Each value In X
        If StopQ1("Input range contains missing or invalid data.", (IsNumeric(value) = False Or IsEmpty(value) = True) And value <> X.Cells(1), value, 1006, Me.InputBoxHoriz) = True Then Exit Sub
    Next value
    
    'set InputYRange
    If ValidRange(Me.InputBoxVert, vbYes) = False Then Exit Sub
    Set Y = Range(Me.InputBoxVert.Text)
         
    If StopQ1("Data must be in a single column.", Y.Columns.count > 1, Y, 1005, Me.InputBoxVert) = True Then Exit Sub
    
    For Each value In Y
        If StopQ1("Input range contains missing or invalid data.", (IsNumeric(value) = False Or IsEmpty(value) = True) And value <> Y.Cells(1), value, 1006, Me.InputBoxVert) = True Then Exit Sub
    Next value
    
    If StopQ1("X and Y range have different number of observations.", X.Rows.count <> Y.Rows.count, Union(X, Y), 1007, Me.InputBoxHoriz) = True Then Exit Sub
   
    If Len(Me.InputChartTitle.Text) > 0 Then InputTitle = Me.InputChartTitle.Text Else InputTitle = " "
    
    XaxisLabel = "X"
'    If IsOKnumber(X.Cells(1)) = False Then
    If IsLabel(X.Cells(1)) = True Then
        XaxisLabel = X.Cells(1).Text
        Set X = X.Offset(1, 0).Resize(X.Rows.count - 1, 1)
    Else
        If X.Rows(1).Row > 1 Then
            If Application.IsText(X(1).Offset(-1, 0).value) = True Then XaxisLabel = X(1).Offset(-1, 0).Text
        End If
    End If

    yAxisLabel = "Y"
'    If IsOKnumber(Y.Cells(1)) = False Then
    If IsLabel(Y.Cells(1)) = True Then
        yAxisLabel = Y.Cells(1).Text
        Set Y = Y.Offset(1, 0).Resize(Y.Rows.count - 1, 1)
    Else
        If Y.Rows(1).Row > 1 Then
            If Application.IsText(Y(1).Offset(-1, 0).value) = True Then yAxisLabel = Y(1).Offset(-1, 0).Text
        End If
    End If
    If Me.chkRegrLine = True Then TrendType = xlLinear Else TrendType = xlNone
    
    If MyStdev(X) <= 0# Or MyStdev(Y) <= 0# Then
        rsq = -1#
    Else
        rsq = Application.rsq(Y, X)
    End If
    If rsq < 0 Or rsq > 1 Then TrendType = xlNone
    
    StartProc Me
    
    If MakeNewOutputSheet() = False Then Exit Sub
    Set Base = Range("A" & Format(ActiveCell.Row))
    
    Output_Scatterplot Base, TrendType, Me.chkForceZeroQ, 1, X, Y, XaxisLabel, yAxisLabel, InputTitle
    
    EndProc Base

    Exit Sub
    
MainErrorHandler:
        If errcheck("Scatterplot") = vbYes Then Exit Sub Else Resume
    Exit Sub
End Sub

Sub Output_Scatterplot(Base As Range, TrendType As Integer, ForceZeroIntercept As Boolean, _
    Order As Integer, X As Range, Y As Range, XaxisLabel As String, yAxisLabel As String, Title As String)
    
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler

    Dim ch As ChartObject
    Dim MaxS As Double
    Dim MinS As Double
    Dim Inc  As Double
    Dim MinVal As Double
    
    Set ch = ActiveSheet.ChartObjects.Add(20, Base.Range("A1").Top + 20, 335, 252)
    ch.Placement = xlMove
    
    With ch.Chart
        .SeriesCollection.Add Source:=Y
        .ChartType = xlXYScatter
        .PlotBy = xlColumns
        .HasTitle = True
        .HasLegend = False
        
        .ChartTitle.Text = Title
        SetFont .ChartTitle

        SetFont .ChartArea
        .PlotArea.Border.LineStyle = xlNone
        .PlotArea.Interior.ColorIndex = xlNone
        .SeriesCollection(1).XValues = X
        
        With .Axes(xlCategory, xlPrimary)
            .HasTitle = True
            .AxisTitle.Text = XaxisLabel
            SetFont .AxisTitle
            SetFont .TickLabels
            .HasMajorGridlines = False
            .HasMinorGridlines = False
            .MajorTickMark = xlCross
            .MinorTickMark = xlCross
        End With
      
        With .Axes(xlValue, xlPrimary)
            .HasTitle = True
            .AxisTitle.Text = yAxisLabel
            SetFont .AxisTitle
            SetFont .TickLabels
            .HasMajorGridlines = False
            .HasMinorGridlines = False
            .MajorTickMark = xlCross
            .MinorTickMark = xlCross
        End With
        
        With .SeriesCollection(1)
            If Me.OptionButtonMarkers.value = True Or Me.OptionButtonMarkersandLines.value = True Then
                .MarkerStyle = xlDiamond
                .MarkerBackgroundColorIndex = 1
                .MarkerForegroundColorIndex = xlNone
            End If
            If Me.OptionButtonLines.value = True Or Me.OptionButtonMarkersandLines.value = True Then
                    With .Border
                        .ColorIndex = 1
                        .Weight = xlHairline
                        .LineStyle = xlContinuous
                    End With
            End If
            If Me.OptionButtonMarkers.value = True Then .Border.LineStyle = xlNone
            If Me.OptionButtonLines.value = True Then .MarkerStyle = xlNone
        End With
     
     'set MaxS,MinS, Inc; MinVal
        MaxS = .Axes(xlValue).MaximumScale
        MinS = .Axes(xlValue).MinimumScale
        Inc = -(.Axes(xlValue).MajorUnit)
        MinVal = Application.Min(Y)
        
        If (MinVal - MinS) / (MaxS - MinS) > 0.25 Then ScaleAxes ch.Chart, xlValue, MaxS, MinS, Inc, MinVal
        
        MaxS = .Axes(xlCategory).MaximumScale
        MinS = .Axes(xlCategory).MinimumScale
        Inc = -(.Axes(xlCategory).MajorUnit)
        MinVal = Application.Min(X)
     
        If (MinVal - MinS) / (MaxS - MinS) > 0.25 Then ScaleAxes ch.Chart, xlCategory, MaxS, MinS, Inc, MinVal
           
    End With
        
    If TrendType <> xlNone Then
        ch.Chart.SeriesCollection(1).Trendlines.Add Type:=xlLinear, Forward:=0, Backward:=0, _
            DisplayEquation:=True, DisplayRSquared:=True
           
        With ch.Chart.SeriesCollection(1).Trendlines(1)
            .Type = TrendType
            If .Type = xlPolynomial Then .Order = Order
            .Border.Weight = xlHairline
            .DataLabel.Border.Weight = xlHairline
            .DataLabel.Left = 244
'            .DataLabel.NumberFormat = AutoFormat(2, 2)
            .DataLabel.NumberFormat = AutoFormat(2, 1)
            If ForceZeroIntercept = True Then
                .Intercept = 0
                .DisplayRSquared = False
            Else
                .InterceptIsAuto = True
                .DisplayRSquared = True
            End If
            On Error Resume Next
            If Order < 2 Then
                If Application.Correl(X, Y) < 0 Then .DataLabel.Top = 32 Else .DataLabel.Top = 151
            End If
            On Error GoTo MainErrorHandler
            SetFont .DataLabel
        End With
    End If
    
    ch.BottomRightCell.Offset(1, -1).value = " "
    ch.BottomRightCell.Offset(1, -1).Select

    Exit Sub
    
MainErrorHandler:
    If errcheck("Output_Scatterplot") = vbYes Then Exit Sub Else Resume
    Exit Sub
End Sub
Attribute VB_Name = "frmTSDS"
Attribute VB_Base = "0{7EA9DA6D-41C0-4973-B434-09DB882EA88F}{54480B5F-1B62-4763-A9E8-12D187AE0837}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'''MegaStat|fffd| Deseasonalization module |fffd|2005 by J. B. Orris
'frmTSDS

Option Explicit

Private Sub UserForm_Activate()
    Me.InputBoxY.SetFocus
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    DS
End Sub

Private Sub buttonClear_Click()
    ClearLast
    Me.Hide
    Unload Me
    OpenUserForm "Deseasonalization"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then Me.InputBoxY.SetFocus
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    CallHelp 4920
End Sub

Private Sub InputBoxY_DblClick(Cancel As Boolean)
    Me.InputBoxY.Text = SetAddr(Me, Me.InputBoxY)
End Sub

Private Sub InputBoxY_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBoxY.Text = SetAddr(Me, Me.InputBoxY)
    End If
End Sub

Private Sub Label5_Click()
    Me.InputBoxY.Text = SetAddr(Me, Me.InputBoxY)
End Sub

Private Sub OptionButton1_Click()
    UpdateForm
End Sub

Private Sub OptionButton2_Click()
    UpdateForm
End Sub

Private Sub SpinButton1_Change()
    Dim Which As Variant
    
    With Me
    If .OptionButton1 = True Then
        Which = Array("1st", "2nd", "3rd", "4th")
    Else
        Which = Array("Jan.", "Feb.", "March", "April", "May", "June", "July", "Aug.", "Sept.", "Oct.", "Nov.", "Dec")
    End If
    .PeriodValueLabel.Caption = Which(.SpinButton1.value - 1)
    End With
End Sub

Private Sub UpdateForm()
    With Me
        If .OptionButton1.value = True Then
            .PeriodLabel.Caption = "Quarter"
            .SpinButton1.Max = 4
            .SpinButton1.value = 1
            .PeriodValueLabel.Caption = "1st"
        Else
            .PeriodLabel.Caption = "Month"
            .SpinButton1.Max = 12
            .SpinButton1.value = 1
            .PeriodValueLabel.Caption = "Jan."
        End If
    End With
End Sub

Private Sub DS()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler
    
    Dim InputYRange As Range
    Dim Y As Range
    Dim value As Range
    Dim i As Integer
    Dim j As Integer
    Dim n As Integer
    Dim Base As Range
    Dim DecY As Integer
    Dim Year As Integer
    Dim Years As Integer
    Dim Period As String
    Dim Periods As Integer
    Dim Label As String
    Dim Out As Range
    Dim FullCount As Integer
    Dim StartPeriod As Integer
    Dim tCount As Integer
    Dim pCount As Integer
    Dim a As Range
    Dim b As Range
    Dim pRange As String
    Dim Sum As Double
        
    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub
    Me.buttonOK.SetFocus
       
    'validate and round Year
    If IsNumeric(Me.boxYear.value) = False Then Me.boxYear.value = 1
    Year = Application.Round(Val(Me.boxYear.value), 0)
    
    If ValidRange(Me.InputBoxY, vbYes) = False Then Exit Sub
    Set InputYRange = Range(Me.InputBoxY.Text)
    InputYRange.Worksheet.Activate
    
    If StopQ1("Data must be in a single column.", InputYRange.Columns.count > 1, InputYRange, 1005, Me.InputBoxY) = True Then Exit Sub

    If IsLabel(InputYRange(1)) = False And Not IsEmpty(InputYRange(1)) Then i = 1 Else i = 2
    Set Y = InputYRange.Range(Cells(i, 1), Cells(InputYRange.Rows.count, 1))
    n = Y.Rows.count
    
    If Me.OptionButton1.value = True Then
        Period = "Quarter"
        Periods = 4
    Else
        Period = "Month"
        Periods = 12
    End If
        
    If StopQ1("Must have at least two years of data.", n < 2 * Periods, Y, 1001, Me.InputBoxY) = True Then Exit Sub
    
    '  -get Y label
    If IsLabel(InputYRange(1)) = False And IsEmpty(InputYRange(1)) = False Then
        Label = "Data"
        If InputYRange.Rows(1).Row > 1 Then
            If Application.IsLabel(InputYRange(1).Offset(-1, 0).value) = True Then Label = InputYRange(1).Offset(-1, 0).value
        End If
    Else
        Label = Trim(InputYRange(1).Text)
    End If

'    If IsNumeric(InputYRange(1)) = True And IsEmpty(InputYRange(1)) = False Then
'        Label = "Data"
'        If InputYRange.Rows(1).Row > 1 Then
'            If Application.IsText(InputYRange(1).Offset(-1, 0).value) = True Then Label = InputYRange(1).Offset(-1, 0).value
'        End If
'    Else
'        Label = Trim(InputYRange(1).Text)
'    End If
    'calculations here
    
    StartProc Me
    If MakeNewOutputSheet() = False Then Exit Sub
    Set Base = Range("A" & Format(ActiveCell.Row))
    SetTitle Base, "Centered Moving Average and Deseasonalization"
    
    DecY = DecPlaces(Y)

    Base.Range("E4") = "Centered"
    Base.Range("A5:H5") = Array("", "", "", "", "Moving", "Ratio to", "Seasonal", Label)
    Base.Range("A6:H6") = Array("t", "Year", Period, Label, "Average", "CMA", "Indexes", "  Deseasonalized")
    Base.Range("A4:H6").HorizontalAlignment = xlRight
    Base.Range("H6").HorizontalAlignment = xlLeft
    Base.Range("A1:M1").Columns("A:M").ColumnWidth = 8.43
    FmtBottomRow1 Base.Range("A6:H6")
    
    Set Out = Base.Range("A6")
    StartPeriod = Me.SpinButton1.value
    Years = Application.RoundUp((StartPeriod - 1 + n) / Periods, 0)
    FullCount = Years * Periods
    tCount = 0
    pCount = 0
    j = Year
        
    For i = 1 To FullCount
        If i >= StartPeriod And tCount < n Then
            tCount = tCount + 1
            Out.Offset(i, 0).value = tCount
            Out.Offset(i, 3).value = Y.Cells(tCount)
            Out.Offset(i, 3).NumberFormat = AutoFormat(0, DecY)
        End If
        pCount = pCount + 1
        Out.Offset(i, 1).value = j
        Out.Offset(i, 2).value = pCount
        If pCount = Periods Then
            pCount = 0
            j = j + 1
            FmtBottomRow1 Out.Offset(i, 0).Range("A1:H1")
        End If
    Next i
    
    'calculate centered moving average & CMA
    If Periods = 4 Then pRange = "A1:A4" Else pRange = "A1:A12"
    For i = 1 To n - Periods
        Set a = Out.Offset(i + StartPeriod - 1, 3).Range(pRange)
        Set b = Out.Offset(i + 1 + StartPeriod - 1, 3).Range(pRange)
        j = i + Periods / 2 + StartPeriod - 1
        Out.Offset(j, 4).value = Application.Average(a, b)
        Out.Offset(j, 5).value = Out.Offset(j, 3).value / Out.Offset(j, 4).value
    Next i
    Out.Offset(1, 4).Range(Cells(1, 1), Cells(FullCount, 3)).NumberFormat = "0.000"
    
    Set a = Nothing
    Set b = Nothing
    
    'set up computation of seasonal indexes
    Set a = Out.Offset(Periods / 2 + StartPeriod, 5).Range(Cells(1, 1), Cells(n - Periods, 1))
        
    Set b = Out.Offset(FullCount + 5, 1).Range(Cells(1, 1), Cells(Years, Periods))
    b.Offset(-2, 0).Cells(1) = "Calculation of Seasonal Indexes"
    b.Offset(-2, 0).Cells(1).HorizontalAlignment = xlLeft
    
    j = 0
    For Each value In a
        j = j + 1
        b.Cells(StartPeriod + Periods / 2 - 1 + j).value = value.Value2
    Next value
    b.Resize(Years + 2, Periods + 1).NumberFormat = "0.000"

    For i = 1 To Periods
        b.Offset(-1, i - 1).Cells(1) = i
        b.Offset(Years, i - 1).Cells(1) = Application.Average(b.Offset(0, i - 1).Columns(1))
    Next i
        
    If Periods = 4 Then pRange = "A1:D1" Else pRange = "A1:L1"
    Sum = Application.Sum(b.Offset(Years, 0).Range(pRange))
    b.Offset(Years, Periods).Cells(1) = Sum
    b.Offset(Years, -1).Range("A1:A2").HorizontalAlignment = xlRight
    b.Offset(Years, -1).Range("A1") = "mean:"
    b.Offset(Years, -1).Range("A2") = "adjusted:"
    For i = 1 To Periods
        b.Offset(Years + 1, i - 1).Cells(1) = b.Offset(Years, i - 1).Cells(1) * Periods / Sum
    Next i
    b.Offset(Years + 1, Periods).Cells(1) = Periods
    
    j = Year - 1
    For i = 1 To Years
        j = j + 1
        b.Offset(i - 1, -1).Cells(1) = j
    Next i
    FmtOutline b
    
    'copy/paste seasonal indexes
    b.Offset(Years + 1, 0).Range(pRange).Copy
    For i = 1 To Years
        Out.Offset(1 + Periods * (i - 1), 6).PasteSpecial xlPasteValues, Operation:=xlNone, Transpose:=True
    Next i
    
    For i = 1 To FullCount
        If IsEmpty(Out.Offset(i, 3).value) = False Then
            Out.Offset(i, 7).value = Out.Offset(i, 3).value / Out.Offset(i, 6).value
            Out.Offset(i, 7).NumberFormat = AutoFormat(1, DecY)
        End If
    Next i
    
    If Me.chk_plot.value = True Then
        Dim ch As ChartObject
        Dim MaxS As Double
        Dim MinS As Double
        Dim Inc  As Double
        Dim MinVal As Double
        Dim base2 As Range
        Dim X As Range
        Dim yds As Range

        Set X = Out.Offset(1, 0).Resize(n)
        Set Y = Out.Offset(1, 3).Resize(n)
        Set yds = Out.Offset(1, 7).Resize(n)
        Set base2 = Range("A1").Offset(ActiveSheet.UsedRange.Rows.count + 1).Range("A1")
        Set ch = ActiveSheet.ChartObjects.Add(20, base2.Range("A1").Top + 20, 396, 310)
        ch.Placement = xlMove

        With ch.Chart
            .ChartType = xlXYScatter
            .PlotBy = xlColumns
            .SeriesCollection.Add Source:=Y
            .SeriesCollection.Add Source:=yds
            .HasTitle = True
            .HasLegend = True
            .Legend.Position = xlBottom

            .ChartTitle.Text = "Deseasonalization"
            SetFont .ChartTitle

            SetFont .ChartArea
            .PlotArea.Border.LineStyle = xlHairline
            .PlotArea.Border.ColorIndex = 48
            .PlotArea.Interior.ColorIndex = xlNone
            .SeriesCollection(1).XValues = X
            .SeriesCollection(2).XValues = X

            With .Axes(xlCategory, xlPrimary)
                .MinorUnit = 1
                .MajorUnit = Periods
                .MinimumScale = 0#
                .MaximumScale = n
                
                .HasTitle = True
                .AxisTitle.Text = Period
                SetFont .AxisTitle
                SetFont .TickLabels
                .HasMajorGridlines = True
                .HasMinorGridlines = False
                With .MajorGridlines.Border
                    .ColorIndex = 48
                    .Weight = xlHairline
                    .LineStyle = xlContinuous
                End With
                
                .MajorTickMark = xlCross
                .MinorTickMark = xlCross
            End With

            With .Axes(xlValue, xlPrimary)
                .HasTitle = True
                .AxisTitle.Text = Label
                SetFont .AxisTitle
                SetFont .TickLabels
                .HasMajorGridlines = False
                .HasMinorGridlines = False
                .MajorTickMark = xlCross
                .MinorTickMark = xlCross
            End With

            With .SeriesCollection(1)
                .Name = Label
                With .Border
                    .ColorIndex = 1
                    .Weight = xlHairline
                    .LineStyle = xlContinuous
                End With
            End With
            With .SeriesCollection(2)
                .Name = "Deseasonalized"
                With .Border
                    .ColorIndex = 1
                    .Weight = xlHairline
                    .LineStyle = xlContinuous
                End With
                .MarkerBackgroundColorIndex = xlNone
                .MarkerForegroundColorIndex = 1
                .MarkerStyle = xlCircle
                .MarkerSize = 3
                .Trendlines.Add Type:=xlLinear, Forward:=0, Backward:=0, DisplayEquation:=True, DisplayRSquared:=True
                With .Trendlines(1)
                    .Type = xlLinear
                    .Border.Weight = xlHairline
                    .DataLabel.Border.LineStyle = xlNone
                    .DataLabel.Left = 270
                    On Error Resume Next
                    If Application.Correl(X, Y) < 0 Then .DataLabel.Top = 32 Else .DataLabel.Top = 170
                    On Error GoTo MainErrorHandler
                    SetFont .DataLabel
                End With
            End With

         'set MaxS,MinS, Inc; MinVal
            MaxS = .Axes(xlValue).MaximumScale
            MinS = .Axes(xlValue).MinimumScale
            Inc = -(.Axes(xlValue).MajorUnit)
            MinVal = Application.Min(Y)

            If (MinVal - MinS) / (MaxS - MinS) > 0.3 Then ScaleAxes ch.Chart, xlValue, MaxS, MinS, Inc, MinVal
        End With
        ch.BottomRightCell.Offset(1, -1).value = " "
        ch.BottomRightCell.Offset(1, -1).Select
        
'        frmRegr.InputBoxX.Text = FullAddress(x)
'        frmRegr.InputBoxY.Text = FullAddress(yds)
'        frmRegr.Show

    End If
    
    EndProc Base
    Exit Sub
    
MainErrorHandler:
    If errcheck("Deseasonalization") = vbYes Then Exit Sub Else Resume
End Sub
Attribute VB_Name = "frmTSMA"
Attribute VB_Base = "0{C0D4BC8D-B78A-4E76-BE27-CF2C20FFBDA0}{743076C8-162C-4DE3-9BAB-F0C6AF5F398A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'''MegaStat|fffd| Moving Averages module |fffd|2005 by J. B. Orris
'frmTSMA

Option Explicit

Private Sub UserForm_Activate()
    Me.InputBoxY.SetFocus
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    MovingAverage
End Sub

Private Sub buttonClear_Click()
    ClearLast
    Me.Hide
    Unload Me
    OpenUserForm "MovingAverage"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then Me.InputBoxY.SetFocus
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    CallHelp 4930
End Sub

Private Sub InputBoxY_DblClick(Cancel As Boolean)
    Me.InputBoxY.Text = SetAddr(Me, Me.InputBoxY)

End Sub

Private Sub InputBoxY_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBoxY.Text = SetAddr(Me, Me.InputBoxY)
    End If
End Sub

Private Sub Label11_Click()
    Me.InputBoxY.Text = SetAddr(Me, Me.InputBoxY)
End Sub

Private Sub MovingAverage()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler
    
    Dim InputYRange As Range
    Dim Y As Range
    Dim i As Integer
    Dim n As Integer
    Dim Base As Range
    Dim DecY As Integer
    Dim Label As String
    Dim Periods As Integer
    
    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub
    Me.buttonOK.SetFocus
       
    'validate data and get label
    If ValidRange(Me.InputBoxY, vbYes) = False Then Exit Sub
    Set InputYRange = Range(Me.InputBoxY.Text)
    InputYRange.Worksheet.Activate
    
    If StopQ1("Data must be in a single column.", InputYRange.Columns.count > 1, InputYRange, 1005, Me.InputBoxY) = True Then Exit Sub

    If IsLabel(InputYRange(1)) = False And Not IsEmpty(InputYRange(1)) Then i = 1 Else i = 2
    Set Y = InputYRange.Range(Cells(i, 1), Cells(InputYRange.Rows.count, 1))
    n = Y.Rows.count
    If StopQ1("Not enough data selected.", n <= 6, Y, 1001, Me.InputBoxY) = True Then Exit Sub
    
    '  -get Y label
    If IsLabel(InputYRange(1)) = False And IsEmpty(InputYRange(1)) = False Then
        Label = "Data"
        If InputYRange.Rows(1).Row > 1 Then
            If Application.IsLabel(InputYRange(1).Offset(-1, 0).value) = True Then Label = InputYRange(1).Offset(-1, 0).value
        End If
    Else
        Label = Trim(InputYRange(1).Text)
    End If

    'validate Periods
    If StopQ0("Must enter a number for periods.", IsNumeric(Me.boxPeriods.value) = False, 1034, Me.boxPeriods) = True Then Exit Sub
    Periods = Application.Round(Eval(Me.boxPeriods.Text), 0)
    Me.boxPeriods.value = Periods
    If StopQ0("Value must be >= 1 and <= " & Format(n), Periods < 1 Or Periods > n, 1036, Me.boxPeriods) = True Then Exit Sub
    
    'calculations here
    
    StartProc Me
    If MakeNewOutputSheet() = False Then Exit Sub
    Set Base = Range("A" & Format(ActiveCell.Row))
    SetTitle Base, "Moving Average"
    
    DecY = DecPlaces(Y)
    Base.Range("C4") = Periods
    Base.Range("C4").HorizontalAlignment = xlLeft
    Base.Range("B4") = "number of periods:"
    Base.Range("B4").HorizontalAlignment = xlRight
    
    Base.Range("A6:C6") = Array("t", Label, Format(Periods) & "MA ")
    Base.Range("A6:C6").HorizontalAlignment = xlRight

    For i = 1 To n
        Base.Offset(i + 5, 0).value = i
        Base.Offset(i + 5, 1).value = Y.Cells(i)
        Base.Offset(i + 5, 1).NumberFormat = AutoFormat(0, DecY)
    Next i
    
    For i = Periods To n
        Base.Offset(i + 5, 2).value = Application.Average(Base.Offset(i + 6 - Periods, 1).Range("A1:A" & Format(Periods)))
        Base.Offset(i + 5, 2).NumberFormat = AutoFormat(1, DecY)
    Next i
    Base.Offset(5, 2).CurrentRegion.Columns("B:C").ColumnWidth = 12
    
    EndProc Base
    Exit Sub
    
MainErrorHandler:
    If errcheck("Moving Average") = vbYes Then Exit Sub Else Resume
End Sub
Attribute VB_Name = "frmTSTrend"
Attribute VB_Base = "0{2E938E9C-F770-4C5B-A5EC-A39CE6A00DA8}{36EF20DE-2937-4A1A-8130-04A3EE722137}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'''MegaStat|fffd| Trendline module |fffd|2005 by J. B. Orris
'frmTSTrend

Option Explicit
Const BlankField = -32334
Dim save_n As Integer
Dim Skip As Boolean

Private Sub UserForm_Activate()
    UpdateForm
    Dim SaveIndex As Variant
    
    With Me.ComboType
        SaveIndex = .ListIndex
        InitListbox
        If SaveIndex < 0 Then SaveIndex = 0
        .ListIndex = SaveIndex
    End With
    With Me.ComboBox2
        If .ListIndex < 0 Then
            .Clear
            .AddItem "99%"
            .AddItem "95%"
            .AddItem "90%"
        End If
    End With
    Me.InputBoxY.SetFocus
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    save_n = 0
    Trend
End Sub

Private Sub buttonClear_Click()
    ClearLast
    Me.Hide
    Unload Me
    OpenUserForm "Trend"
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then Me.InputBoxY.SetFocus
    Me.Hide
End Sub

Private Sub InitListbox()
    With Me.ComboType
        .Clear
        .AddItem "Linear"
        .AddItem "Exponential (Ln)"
        .AddItem "Exponential (Log)"
        .AddItem "2nd degree polynomial"
        .AddItem "3rd degree polynomial"
        .AddItem "4th degree polynomial"
        .AddItem "5th degree polynomial"
        .AddItem "6th degree polynomial"
        .ListIndex = 0
    End With
End Sub

Private Sub buttonHelp_Click()
    CallHelp 4910
End Sub

Private Sub InputBoxY_DblClick(Cancel As Boolean)
    Skip = True
    Me.InputBoxY.Text = SetAddr(Me, Me.InputBoxY)
    Get_n
End Sub

Private Sub InputBoxY_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As stdole.OLE_XPOS_CONTAINER, ByVal Y As stdole.OLE_YPOS_CONTAINER)
    If Button = xlSecondary Then
        Me.InputBoxY.Text = SetAddr(Me, Me.InputBoxY)
    End If
End Sub

Private Sub Label5_Click()
    Skip = True
    Me.InputBoxY.Text = SetAddr(Me, Me.InputBoxY)
    Get_n
End Sub

Private Sub chkForceZero_Click()
    If Me.chkForceZero.value = True Then Me.chkTestInt = False
End Sub

Private Sub chkTestInt_Click()
    If Me.chkTestInt.value = True Then Me.chkForceZero.value = False
End Sub

Private Sub chkScatter_Click()
    If Me.chkScatter.value = True Then Me.chkData.value = True
End Sub

Private Sub chkData_Click()
    If Me.chkData.value = False Then Me.chkScatter.value = False
End Sub

Private Sub UserForm_Click()
    UpdateForm
End Sub

Private Sub Get_n()
    Dim InputYRange As Range
    Dim n As Integer
    Dim YValue As Range
 
    If Len(Me.InputBoxY.Text) > 0 Then
        If ValidRange(Me.InputBoxY, vbYes) = False Then Exit Sub
        Set InputYRange = Range(Me.InputBoxY.Text)
        InputYRange.Worksheet.Activate
        If StopQ1("Data must be in a single column.", InputYRange.Columns.count > 1, InputYRange, 1005, Me.InputBoxY) = True Then Exit Sub

        n = InputYRange.Rows.count
        If IsNumeric(InputYRange(1)) = False Or IsEmpty(InputYRange(1)) = True Then
            Set InputYRange = InputYRange.Offset(1, 0).Resize(n - 1, 1)
            n = n - 1
        End If

        If StopQ1("Not enough data selected", n <= 2, InputYRange, 1001, Me.InputBoxY) = True Then Exit Sub

        For Each YValue In InputYRange
            If StopQ1("Input range contains missing or invalid data.", IsNumeric(YValue) = False Or IsEmpty(YValue) = True, YValue, 1006, Me.InputBoxY) = True Then Exit Sub
        Next YValue

        save_n = n
        UpdateForm
    End If
End Sub

Private Sub InputBoxY_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Me.InputBoxY.SetFocus
'    Me.StartingWith.Text = Format(save_n + EvalField(Me.StartX))
    If Skip = False Then Get_n Else Skip = False
End Sub

Private Sub ForecastPeriods_Change()
    UpdateForm
End Sub

Private Sub StartingWith_Change()
    UpdateForm
End Sub

Private Sub StartX_Change()
'    Me.StartingWith.Text = Format(save_n + EvalField(Me.StartX))
    UpdateForm
End Sub

Private Sub UpdateForm()
    Dim StartXN As Integer
    Dim ForecastPeriodsN As Integer
    Dim StartingWithN As Integer
    Dim EndingWithN As Integer
    Dim n As Integer
   
    With Me
        n = save_n
        StartXN = EvalField(.StartX)
        ForecastPeriodsN = EvalField(.ForecastPeriods)
        StartingWithN = EvalField(.StartingWith)

        If StartXN = BlankField Then
            StartXN = 0
        End If

        If ForecastPeriodsN = BlankField Then
            ForecastPeriodsN = 0
        End If
        
        If StartingWithN = BlankField Then
            StartingWithN = 0
        End If
        
        If ForecastPeriodsN <= 0 Then
            .StartingWith.Enabled = False
            .ForecastPeriodsLabel.ForeColor = &H80000011
        Else
            .StartingWith.Enabled = True
            .ForecastPeriodsLabel.ForeColor = &H80000012
        End If
                 
        If StopQ0("Forecast periods cannot be negative.", ForecastPeriodsN < 0, 1033, .ForecastPeriods) = True Then
            .ForecastPeriods.Text = "0"
            Exit Sub
        End If
  
        EndingWithN = StartXN + n - 1
        If n > 0 Then
            .nLabel.Caption = "n = " & n
            .tLabel.Caption = "t = " & StartXN & " to " & EndingWithN
        Else
            .nLabel.Caption = ""
            .tLabel.Caption = ""
        End If
        
        If ForecastPeriodsN = 1 Then
            .ForecastPeriodsLabel.Caption = " period, starting with period"
            .StartingWith.Left = 201
        Else
            .ForecastPeriodsLabel.Caption = " periods, starting with period"
            .StartingWith.Left = 204
        End If
        
        Select Case ForecastPeriodsN
            Case Is = 1
                .ForecastRangeLabel.Caption = "Forecast period: " & StartingWithN
            
            Case Is > 1
                EndingWithN = StartingWithN + ForecastPeriodsN - 1
                .ForecastRangeLabel.Caption = "Forecast periods: " & StartingWithN & " to " & EndingWithN
            Case Else
                .ForecastRangeLabel.Caption = ""
        End Select
    End With
End Sub

Private Function EvalField(Which As Object) As Double
    Dim temp As Long
    Dim TestString As String
    Dim TestVal As Double
        
    TestString = Which.Text
        
    If Len(TestString) = 0 Or TestString = "-" Then
        EvalField = BlankField
        Exit Function
    End If
    
    If StopQ0("Must enter a number.", IsNumeric(TestString) = False, 1031, Which) = True Then
        Which.value = 0
        Exit Function
    End If
    
    TestVal = Val(TestString)
    If StopQ0("Value must be < 32767.", Abs(TestVal) > 32767, 1031, Which) = True Then Exit Function
    EvalField = TestVal
End Function

Private Sub chkResiduals_Click()
    With Me
        If .chkResiduals.value = False Then
            .chkDW.value = False
            .chkPlotRes.value = False
            .chkDiagnostics.value = False
            .chkNormalPlot.value = False
            .chkResiduals.value = False
        End If
    End With
End Sub

Private Sub chkDW_Click()
    Me.chkResiduals.value = True
End Sub

Private Sub chkPlotRes_Click()
    Me.chkResiduals.value = True
End Sub

Private Sub chkDiagnostics_Click()
    Me.chkResiduals.value = True
End Sub

Private Sub chkNormalPlot_Click()
    Me.chkResiduals.value = True
End Sub

Sub Trend()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler
    
    Dim Nvar As Integer
    Dim InputYRange As Range
    Dim X As Range
    Dim Y As Range
    Dim yorg As Range
    Dim PredictorX As Range
    Dim ValueY As Range
    Dim i As Integer
    Dim j As Integer
    Dim n As Integer
    Dim StartXN As Integer
    Dim ForecastPeriodsN As Integer
    Dim StartingWithN As Integer
    Dim ColLabels As Range
    Dim yAxisLabel As String
    Dim ColLabelsQ As Integer
    Dim Labels() As Variant
    Dim tbase As Range
    Dim TrendQ As Integer
    Dim Base As Range
    Dim base2 As Range
    Dim DecY As Integer
    Dim DecX As Integer
    Dim TrendType As Integer
    Dim eFlag As Boolean
    Dim Order As Integer
    Dim Title As String
    Dim OK As Boolean
    Dim Tilt As Boolean
    Dim Which As Integer
    Dim Residuals As Boolean
    Dim Diagnostics As Boolean
    Dim NormalPlot As Boolean
    Dim DW As Boolean
    Dim PlotResiduals As Boolean
    Dim Predictions As Boolean
    Dim Scatterplot As Boolean
    Dim DataOutput As Boolean
    Dim AdjRSQ As Boolean
    Dim TestIntercept As Boolean
    Dim ForceZeroIntercept As Boolean
    Dim ConfLevel As Double
    
    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub
    Me.InputBoxY.SetFocus
    
    TrendQ = ComboType.ListIndex
    
    If TrendQ <= 2 Then Nvar = 1 Else Nvar = TrendQ - 1
    ReDim Labels(Nvar + 2)
    Err.Clear
    
    'validate and round input boxes
    StartXN = EvalField(Me.StartX)
    If StartXN = BlankField Then StartXN = 0
    
    ForecastPeriodsN = EvalField(Me.ForecastPeriods)
    If ForecastPeriodsN = BlankField Then ForecastPeriodsN = 0
    
    StartingWithN = EvalField(Me.StartingWith)
    If StartingWithN = BlankField Then StartingWithN = 0

    Which = TrendQ
    Residuals = Me.chkResiduals.value
    DW = Me.chkDW.value
    PlotResiduals = Me.chkPlotRes.value
    Diagnostics = Me.chkDiagnostics.value
    NormalPlot = Me.chkNormalPlot.value
    Scatterplot = Me.chkScatter.value
    DataOutput = Me.chkData.value
    If ForecastPeriodsN > 0 Then Predictions = True
    TestIntercept = Me.chkTestInt.value
    ForceZeroIntercept = Me.chkForceZero.value

    If StopQ0("Input value cannot be negative", ForecastPeriodsN < 0, 1033, Me.ForecastPeriods) = True Then Exit Sub
      
    If ValidRange(Me.InputBoxY, vbYes) = False Then Exit Sub
    Set InputYRange = Range(Me.InputBoxY.Text)
    InputYRange.Worksheet.Activate
    

    If IsNumeric(InputYRange(1)) = True And Not IsEmpty(InputYRange(1)) Then i = 1 Else i = 2
    Set Y = InputYRange.Range(Cells(i, 1), Cells(InputYRange.Rows.count, 1))
    n = Y.Rows.count

    ' check for positive, non-zero values if exponential
    If Which = 1 Or Which = 2 Then
        For Each ValueY In Y
            If StopQ1("Exponential model requires positive, non-zero values", ValueY <= 0, ValueY, 1011, Me.InputBoxY) = True Then Exit Sub
        Next ValueY
    End If
    '  -get Y label
    If IsNumeric(InputYRange(1)) = True And IsEmpty(InputYRange(1)) = False Then
        Labels(Nvar + 1) = "Y"
        If InputYRange.Rows(1).Row > 1 Then
            If Application.IsText(InputYRange(1).Offset(-1, 0).value) = True Then Labels(Nvar + 1) = InputYRange(1).Offset(-1, 0).value
        End If
    Else
        Labels(Nvar + 1) = Trim(InputYRange(1).Text)
    End If
    
    Select Case TrendQ
        Case 0, 3, 4, 5, 6, 7 'polynomial
            Labels(Nvar + 1) = Trim(Labels(Nvar + 1))
            Labels(Nvar + 2) = Trim(Labels(Nvar + 1))
        Case 1 'ln
            Labels(Nvar + 2) = Trim(Labels(Nvar + 1))
            Labels(Nvar + 1) = "ln(" & Trim(Labels(Nvar + 1)) & ")"
        Case 2 'log
            Labels(Nvar + 2) = Trim(Labels(Nvar + 1))
            Labels(Nvar + 1) = "log(" & Trim(Labels(Nvar + 1)) & ")"
    End Select
    yAxisLabel = Labels(Nvar + 2)
       
       '  -create X label(s)
    Labels(1) = "t "
    If Nvar >= 2 Then Labels(2) = "t" & Chr(178)
    If Nvar >= 3 Then Labels(3) = "t" & Chr(179)
    
    If Nvar >= 4 Then
        For i = 2 To Nvar
            Labels(i) = "t^" & Application.Text(i, "0")
        Next i
    End If

    '  -create X in tempsheet
    ThisWorkbook.Sheets("TempSheet").UsedRange.Clear
    Set tbase = ThisWorkbook.Sheets("TempSheet").Range("A3")
    For i = 1 To n
        tbase.Offset(i - 1, 0) = StartXN + i - 1
        If Nvar >= 2 Then
            For j = 2 To Nvar
                tbase.Offset(i - 1, j - 1) = (StartXN + i - 1) ^ j
            Next j
        End If
    Next i

    Set X = tbase.CurrentRegion
    For j = 1 To Nvar
        tbase.Offset(-1, j - 1) = Labels(j)
    Next j

    'create Y in tempsheet
    Set tbase = ThisWorkbook.Sheets("TempSheet").Range("A3").Offset(0, Nvar + 1)
    Y.Copy
    tbase.Range("A1").PasteSpecial xlPasteValues
    Set Y = tbase.CurrentRegion
    DecX = DecPlaces(X)
    DecY = DecPlaces(Y)
    tbase.Range("B1").PasteSpecial xlPasteValues
    Set yorg = tbase.CurrentRegion.Columns(2)
    tbase.Offset(-1, 0) = Labels(Nvar + 1)
    tbase.Offset(-1, 1) = Labels(Nvar + 2)
    tbase.Offset(-1, 0).EntireRow.HorizontalAlignment = xlRight
  
    If TrendQ = 1 Or TrendQ = 2 Then
        For Each ValueY In Y
            Select Case TrendQ
                Case 1
                    ValueY.value = Log(ValueY.value)
                Case 2
                    ValueY.value = Log(ValueY.value) / Log(10)
            End Select
        Next ValueY
    End If
    
'  -create PredictorX
    Set PredictorX = ThisWorkbook.Sheets("PredSheet").Range("A1")
    If Predictions = True Then
        ThisWorkbook.Sheets("PredSheet").UsedRange.Clear
        For i = 1 To ForecastPeriodsN
            PredictorX.Offset(i - 1, 0) = StartingWithN - 1 + i
            If Nvar > 1 Then
                For j = 2 To Nvar
                    PredictorX.Offset(i - 1, j - 1) = PredictorX.Offset(i - 1, 0) ^ j
                Next j
            End If
        Next i
        Set PredictorX = PredictorX.CurrentRegion
    End If
    
    ConfLevel = Eval(Me.ComboBox2.Text)
    If ConfLevel > 1 Then ConfLevel = ConfLevel / 100
    If StopQ0("Confidence level must be between 0 and 1", ValidateP(ConfLevel) = False, 1012, Me.ComboBox2) = True Then Exit Sub
    
    StartProc Me
    If MakeNewOutputSheet() = False Then Exit Sub
    Set Base = Range("A" & Format(ActiveCell.Row))

    frmRegr.RegrCalc Base, X, Y, Labels, PredictorX, Which, _
        Residuals, DW, True, PlotResiduals, False, Diagnostics, NormalPlot, _
        Predictions, Scatterplot, DataOutput, TestIntercept, ForceZeroIntercept, ConfLevel, OK

    If Scatterplot = True And OK = True Then
        If MakeNewOutputSheet() = False Then Exit Sub
        Set base2 = Range("A1").Offset(ActiveSheet.UsedRange.Rows.count + 1).Range("A1")
            
        Select Case Which
            Case 0
                TrendType = xlLinear
                Title = "Linear curve fit"
                Order = 1
            Case 1 'exp ln
                TrendType = xlExponential
                Title = "Exponential curve fit"
                Order = 1
                If Exp(Base.Range("C12")) < 1E-306 Then eFlag = True
            Case 2 'exp log
                TrendType = xlExponential
                Title = "Exponential curve fit"
                Order = 1
                If 10 ^ Base.Range("C12") < 1E-306 Then eFlag = True
            Case 3, 4, 5, 6, 7
                TrendType = xlPolynomial
                Title = "Polynomial Curve Fit"
                Order = Which - 1
        End Select
        
        If eFlag = True Then
            TrendType = xlNone
            base2.Offset(2, 0) = "Cannot display a trendline on the scatterplot. See Trendline Help for details."
            Set base2 = base2.Offset(3, 0)
        End If
        
        If Which = 1 Or Which = 2 Then
            frmScatterplot.Output_Scatterplot base2, TrendType, ForceZeroIntercept, Order, X, yorg, "t", yAxisLabel, Title
        Else
            frmScatterplot.Output_Scatterplot base2, TrendType, ForceZeroIntercept, Order, X, Y, "t", yAxisLabel, Title
        End If
    End If
    
    If Me.chkData.value = True And OK = True Then
        If MakeNewOutputSheet() = False Then Exit Sub
        Set base2 = Range("A1").Offset(ActiveSheet.UsedRange.Rows.count + 1).Range("A1")
        
        Tilt = False
        For j = 1 To Nvar + 2
            If Len(Labels(j)) > 10 Then Tilt = True
        Next j
        
        base2.Range("A2").value = "Data:"
        For j = 1 To Nvar + 1
            base2.Range("A1").Offset(2, j - 1).value = Labels(j)
        Next j
        base2.Range("A3").EntireRow.HorizontalAlignment = xlRight
        If Tilt = True Then base2.Range("A3").EntireRow.Orientation = -20
        X.NumberFormat = AutoFormat(0, DecX)
        X.Cut
        ActiveSheet.Paste Destination:=base2.Range("A4")
        
        If Which = 1 Or Which = 2 Then
            base2.Range("A1").Offset(2, Nvar + 1).value = Labels(Nvar + 2)
            yorg.NumberFormat = AutoFormat(0, DecY)
            yorg.Cut
            ActiveSheet.Paste Destination:=base2.Range("A4").Offset(0, Nvar + 1)
        End If

        Y.NumberFormat = AutoFormat(0, DecY)
        If Which = 1 Or Which = 2 Then Y.NumberFormat = AutoFormat(4, DecY)
        Y.Cut
        ActiveSheet.Paste Destination:=base2.Range("A4").Offset(0, Nvar)
    End If
    If Base.Range("C3").Columns.ColumnWidth < 14.1 Then Base.Range("C3").Columns.ColumnWidth = 14.1
    
    EndProc Base
    Exit Sub
    
MainErrorHandler:
    If errcheck("Trendline Analysis") = vbYes Then Exit Sub Else Resume
End Sub



Attribute VB_Name = "frmTSexp"
Attribute VB_Base = "0{F4F453EC-8D46-492C-8D72-0D028E68E95F}{83D56C88-FAC3-4652-BA20-F8454F043733}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


'''MegaStat|fffd| Exponential Smoothing module |fffd|2005 by J. B. Orris
'frmTSExp

Option Explicit

Private Sub UserForm_Activate()
    Me.InputBoxY.SetFocus
End Sub

Private Sub UserForm_Terminate()
    UnloadForm Me
End Sub

Private Sub buttonOK_Click()
    ExpSmooth
End Sub

Private Sub buttonClear_Click()
    Dim SaveTag As String
    ClearLast
    Me.Hide
    SaveTag = Me.Tag
    Unload Me
    OpenUserForm SaveTag
End Sub

Private Sub buttonCancel_Click()
    If globalXL97 Then Me.InputBoxY.SetFocus
    Me.Hide
End Sub

Private Sub buttonHelp_Click()
    CallHelp 4940
End Sub

Private Sub boxInitialValue_DblClick(Cancel As Boolean)
    UpdateInput Me.boxInitialValue
End Sub

Private Sub LabelValue_Click()
    UpdateInput Me.boxInitialValue
End Sub

Private Sub boxInitialTrend_DblClick(Cancel As Boolean)
    UpdateInput Me.boxInitialTrend
End Sub

Private Sub LabelTrend_Click()
    UpdateInput Me.boxInitialTrend
End Sub

Private Sub InputBoxY_DblClick(Cancel As Boolean)
    Me.InputBoxY.Text = SetAddr(Me, Me.InputBoxY)
End Sub

Private Sub Label11_Click()
    Me.InputBoxY.Text = SetAddr(Me, Me.InputBoxY)
End Sub

Private Sub ExpSmooth()
    On Error GoTo MainErrorHandler
    Application.EnableCancelKey = xlErrorHandler
    
    Dim InputYRange As Range
    Dim Y As Range
    Dim X As Range
    Dim i As Integer
    Dim n As Integer
    Dim Base As Range
    Dim DecY As Integer
    Dim alpha As Double
    Dim beta As Double
    Dim Label As String
    Dim InitialValue As Double
    Dim InitialTrend As Double
    Dim InitStr As String
    Dim error As Double
    Dim SSE As Double
    Dim AAPE As Double
    Dim PPE As Double
    Dim First As Range
    Dim XOff As Integer
        
    If Me.Visible = False Or globalAbortFlag = True Then Exit Sub
    Me.buttonOK.SetFocus
       
    'validate data and get label
    If ValidRange(Me.InputBoxY, vbYes) = False Then Exit Sub
    Set InputYRange = Range(Me.InputBoxY.Text)
    InputYRange.Worksheet.Activate
    
    If StopQ1("Data must be in a single column.", InputYRange.Columns.count > 1, InputYRange, 1005, Me.InputBoxY) = True Then Exit Sub

    If IsLabel(InputYRange(1)) = False And Not IsEmpty(InputYRange(1)) Then i = 1 Else i = 2
    Set Y = InputYRange.Range(Cells(i, 1), Cells(InputYRange.Rows.count, 1))
    n = Y.Rows.count
    If StopQ1("Not enough data selected.", Len(Me.boxInitialValue.Text) = 0 And n <= 6, Y, 1001, Me.InputBoxY) = True Then Exit Sub
    
    '  -get Y label
    If IsLabel(InputYRange(1)) = False And IsEmpty(InputYRange(1)) = False Then
        Label = "Data"
        If InputYRange.Rows(1).Row > 1 Then
            If Application.IsLabel(InputYRange(1).Offset(-1, 0).value) = True Then Label = InputYRange(1).Offset(-1, 0).value
        End If
    Else
        Label = Trim(InputYRange(1).Text)
    End If

    'validate Alpha
    If IsNumeric(Me.boxAlpha.value) = False Then Me.boxAlpha.value = 0
    If StopQ0("Must enter a number.", IsNumeric(Me.boxAlpha.value) = False, 1034, Me.boxAlpha) = True Then Exit Sub
    alpha = Eval(Me.boxAlpha.Text)
    If StopQ0("Value must be >= 0 and <=1", alpha < 0 Or alpha > 1, 1035, Me.boxAlpha) = True Then Exit Sub
    
    'validate InitialValue
    If Len(Me.boxInitialValue.Text) = 0 Then
        InitialValue = Application.Average(Y.Range("A1:A6"))
        InitStr = "* initial value - mean of first six data values"
    Else
        If StopQ0("Must enter a number or blank", IsNumeric(Me.boxInitialValue.value) = False, 1034, Me.boxInitialValue) = True Then Exit Sub
        InitialValue = Eval(Me.boxInitialValue.Text)
        InitStr = "* initial value - user specified"
    End If
    
    XOff = 0
    If Me.Tag = "HoltExp" Then 'validate double exp
        'validate Beta
        If IsNumeric(Me.boxBeta.value) = False Then Me.boxBeta.value = 0
        If StopQ0("Must enter a number.", IsNumeric(Me.boxBeta.value) = False, 1034, Me.boxBeta) = True Then Exit Sub
        beta = Eval(Me.boxBeta.Text)
        If StopQ0("Value must be >= 0 and <=1", beta < 0 Or beta > 1, 1035, Me.boxBeta) = True Then Exit Sub
          
        'validate InitialTrend
        If Len(Me.boxInitialValue.Text) = 0 Or Len(Me.boxInitialTrend.Text) = 0 Then
              Set X = ThisWorkbook.Sheets("TempSheet").Range("B3")
              For i = 1 To 6
                  X.Cells(i) = i
                  Set X = X.CurrentRegion
              Next i
                
              InitialValue = Application.Intercept(Y.Range("A1:A6"), X)
              InitialTrend = Application.Slope(Y.Range("A1:A6"), X)
              InitStr = "* initial values - estimated by linear trend of first six values"
              X.Clear
              Set X = Nothing
        Else
              If StopQ0("Must enter a number or blank", IsNumeric(Me.boxInitialTrend.value) = False, 1034, Me.boxInitialTrend) = True Then Exit Sub
              InitialTrend = Eval(Me.boxInitialTrend.Text)
              InitStr = "* initial values - user specified"
        End If
        XOff = 1
    End If
    
    'calculations here
    
    StartProc Me
    If MakeNewOutputSheet() = False Then Exit Sub
    Set Base = Range("A" & Format(ActiveCell.Row))
    If Me.Tag = "SimpleExp" Then
        SetTitle Base, "Simple Exponential Smoothing"
        Base.Range("A7:E7") = Array("t", Label, "Smoothed", "Forecast", "% error")
        Base.Range("A7:E7").HorizontalAlignment = xlRight
        Set First = Base.Offset(7, 2).Range("A1:B1")
    Else
        SetTitle Base, "Two-factor Exponential Smoothing"
        Base.Range("D5") = beta
        Base.Range("D5").NumberFormat = ".00"
        Base.Range("D4") = "Beta"
        Base.Range("A7:F7") = Array("t", Label, "Smoothed", "Trend", "Forecast", "% error")
        Base.Range("A7:F7").HorizontalAlignment = xlRight
        Set First = Base.Offset(7, 2).Range("A1:C1")
        First.Range("B1").value = InitialTrend
    End If
    
    DecY = DecPlaces(Y)
    Base.Range("C5") = alpha
    Base.Range("C5").NumberFormat = ".00"
    Base.Range("C4") = "Alpha"
    Base.Range("C4:D4").HorizontalAlignment = xlRight

    First.Range("A1").value = InitialValue
    First.NumberFormat = AutoFormat(1, DecY)
   
    First.Cells(2 + XOff) = "*"
    First.Cells(2 + XOff).HorizontalAlignment = xlLeft
    First.Range(Cells(1), Cells(1 + XOff)).BorderAround Weight:=xlThin
    
    SSE = 0
    AAPE = 0
    For i = 1 To n
        Base.Offset(i + 7, 0).value = i
        Base.Offset(i + 7, 1).value = Y.Cells(i)
        Base.Offset(i + 7, 1).NumberFormat = AutoFormat(0, DecY)
        
        If Me.Tag = "SimpleExp" Then
            Base.Offset(i + 7, 2).value = Base.Offset(i + 7, 1).value * alpha + Base.Offset(i + 6, 2).value * (1 - alpha)
            Base.Offset(i + 7, 2).NumberFormat = AutoFormat(1, DecY)
            Base.Offset(i + 7, 3).value = Application.Round(Base.Offset(i + 6, 2).value, DecY)
            Base.Offset(i + 7, 3).NumberFormat = AutoFormat(0, DecY)
        Else
            Base.Offset(i + 7, 4).value = Application.Round(Base.Offset(i + 6, 2).value + Base.Offset(i + 6, 3).value, DecY)
            Base.Offset(i + 7, 4).NumberFormat = AutoFormat(0, DecY)
            Base.Offset(i + 7, 2).value = Base.Offset(i + 7, 1).value * alpha + Base.Offset(i + 7, 4).value * (1 - alpha)
            Base.Offset(i + 7, 2).NumberFormat = AutoFormat(1, DecY)
            Base.Offset(i + 7, 3).value = (Base.Offset(i + 7, 2).value - Base.Offset(i + 6, 2).value) * beta + Base.Offset(i + 6, 3).value * (1 - beta)
            Base.Offset(i + 7, 3).NumberFormat = AutoFormat(1, DecY)
        End If
        error = Base.Offset(i + 7, 1).value - Base.Offset(i + 7, 3 + XOff).value
        SSE = SSE + error ^ 2
        AAPE = AAPE + Abs(error / Base.Offset(i + 7, 1).value)
        If error > 0 Then PPE = PPE + 1
        Base.Offset(i + 7, 4 + XOff).value = error / Base.Offset(i + 7, 1).value * 100#
        Base.Offset(i + 7, 4 + XOff).NumberFormat = "0.0"
    Next i
    'final forecast
    Base.Offset(i + 7, 3 + XOff).value = Application.Round(Base.Offset(i + 6, 2).value, DecY)
    If Me.Tag = "HoltExp" Then Base.Offset(i + 7, 3 + XOff).value = Base.Offset(i + 6, 2).value + Base.Offset(i + 6, 3).value
    Base.Offset(i + 7, 3 + XOff).NumberFormat = AutoFormat(0, DecY)
    
    Base.Offset(6, 2).CurrentRegion.Columns("B:D").ColumnWidth = 12
    Base.Offset(6, 2).CurrentRegion.Columns("E").ColumnWidth = 8
        
    Base.Offset(i + 9, 3 + XOff).value = SSE / n
    Base.Offset(i + 9, 3 + XOff).NumberFormat = AutoFormat(1, DecY)
    Base.Offset(i + 9, 4 + XOff).value = "Mean Squared Error"
    
    Base.Offset(i + 10, 3 + XOff).value = AAPE / n
    Base.Offset(i + 10, 3 + XOff).Range("A1:A2").NumberFormat = "0.0%"
    Base.Offset(i + 10, 4 + XOff).value = "Mean Absolute Percent Error"
    
    Base.Offset(i + 11, 3 + XOff).value = PPE / n
    Base.Offset(i + 11, 4 + XOff).value = "Percent Positive Errors"
    
    Base.Offset(i + 13, 1).value = InitStr
        
    Set First = Nothing
    
    EndProc Base
    Exit Sub
    
MainErrorHandler:
    If errcheck("Exponential Smoothing") = vbYes Then Exit Sub Else Resume
End Sub

' InQuest injected base64 decoded content
' ZrH+
' )^J)
' )^J)

INQUEST-PP=macro
