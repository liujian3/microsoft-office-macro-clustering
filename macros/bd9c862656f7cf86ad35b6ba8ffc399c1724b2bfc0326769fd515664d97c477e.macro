Attribute VB_Name = "DrawSection"
Public Type sez
x As Double
z As Double
End Type
Dim sez_() As sez
'Dim udtFileDialog As FileDialog
'Public ScalaD As Integer
'Public ScalaH As Integer
'Public AltezzaTesti As Single
'Public EsclusioneQuote As Byte
 
Private Function Lines_Intersect(Ax As Variant, Ay As Variant, Bx As Variant, By As Variant, CX As Variant, CY As Variant, dx As Variant, dy As Variant, IntersectionX As Variant, IntersectionY As Variant) As Boolean
   '# da internet
   '# I have little idea of how this routine works - I pinched and modified is slightly from something on the net
   '# if you dont understand the maths involved - DONT TOUCH THIS ROUTINE
    Dim Rn As Variant
    Dim Rd As Variant
    Dim Sn As Variant
    Dim Intersection_AB As Variant
    Dim Intersection_CD As Variant
'    Debug.Print Ax, Ay, Bx, By, Cx, Cy, Dx, Dy
    Rn = (Ay - CY) * (dx - CX) - (Ax - CX) * (dy - CY)
    Rd = (Bx - Ax) * (dy - CY) - (By - Ay) * (dx - CX)

    If Rd = 0 Then
        
'        ; Lines are parralel.
'
'        ; If Rn# is also 0 then lines are coincident.  All points intersect.
'        ; Otherwise, there is no intersection point.
'
        Lines_Intersect = False
    
    Else
    
        '; The lines intersect at some point.  Calculate the intersection point.
        '# note: the lines MAY intersect at some point (if infinite in length I think)
        Sn = (Ay - CY) * (Bx - Ax) - (Ax - CX) * (By - Ay)

        '# note: this bit copes with the finite length of the lines (I think)
        Intersection_AB = Rn / Rd
        Intersection_CD = Sn / Rd
        If Intersection_AB < 0 Or Intersection_AB > 1 Or Intersection_CD < 0 Or Intersection_CD > 1 Then
            '# the lines do not intersect
            Lines_Intersect = False
            Exit Function
        End If

        IntersectionX = Ax + Intersection_AB * (Bx - Ax)
        IntersectionY = Ay + Intersection_AB * (By - Ay)
            
        Lines_Intersect = True
        
    End If


End Function
Sub sezione()
    ReDim sez_(0) As sez
    Dim IntersectionX As Variant
    Dim IntersectionY As Variant
    Dim retCoord As Variant
    Dim StartPoint As Variant
    Dim EndPoint As Variant
    Dim handle As String
    Dim pluto As AcadLWPolyline
    Dim plutino As AcadPolyline
    Dim plutone As Acad3DPolyline
    Dim faccia As Acad3DFace
    Dim lala As AcadLayer
    Dim obLinea As AcadLine
    Dim objName As String
    Dim entry As AcadEntity
    Dim z As Double
    Dim inizio As Variant
    Dim fine As Variant
    inizio = ThisDrawing.Utility.GetPoint(, "Inizio Sezione")
    fine = ThisDrawing.Utility.GetPoint(inizio, "Fine sezione")
    Dim lineObj As AcadLine
    Set lineObj = ThisDrawing.ModelSpace.AddLine(inizio, fine)
   
   On Error Resume Next
   
   
   Dim AltezzaRigaQuote As Single
   Dim AltezzaRigaDistanze As Single
   
   SCALAX = GetSetting("Geostru Autocad", "Section", "ScalaD", 1000)
   SCALAY = GetSetting("Geostru Autocad", "Section", "ScalaH", 1000)
   AltezzaTesto = valr(GetSetting("Geostru Autocad", "Section", "AltezzaTesti", 1.2))
   Esclusione = GetSetting("Geostru Autocad", "Section", "EsclusioneQuote", 0)
   AltezzaRigaQuote = GetSetting("Geostru Autocad", "Section", "AltezzaRigaQuote", 10)
   AltezzaRigaDistanze = GetSetting("Geostru Autocad", "Section", "AltezzaRigaDistanze", 15)
   scalad = 1000 / SCALAX
   scalaH = 1000 / SCALAY
   
   hcartiglio = AltezzaRigaQuote + AltezzaRigaQuote + AltezzaRigaDistanze + AltezzaRigaDistanze
Area = 0
an = 0
    For Each entry In ThisDrawing.ModelSpace
        objName = entry.ObjectName
        
        'Polilinea con elev
        If objName = "AcDbPolyline" Then
            handle = entry.handle
            Set pluto = ThisDrawing.HandleToObject(handle)
            aaa = pluto.Layer
            Set lala = ThisDrawing.Layers.Item(aaa)
                If lala.LayerOn = False Then
                  GoTo f1
                End If
            retCoord = pluto.Coordinates
            n = UBound(retCoord)
            z = pluto.Elevation
            For J = 0 To n - 2 Step 2
                controlla = Lines_Intersect(retCoord(J), retCoord(J + 1), retCoord(J + 2), retCoord(J + 3), inizio(0), inizio(1), fine(0), fine(1), IntersectionX, IntersectionY)
                If controlla = True Then
                    NSEZ = UBound(sez_) + 1
                    ReDim Preserve sez_(NSEZ)
                    sez_(NSEZ).x = Sqr((IntersectionX - inizio(0)) ^ 2 + (IntersectionY - inizio(1)) ^ 2)
                    sez_(NSEZ).z = z
                End If
            Next
f1:
        End If
        
         'Polilinea 2d con elev
         If objName = "AcDb2dPolyline" Then
            handle = entry.handle
            Set plutino = ThisDrawing.HandleToObject(handle)
            aaa = plutino.Layer
            Set lala = ThisDrawing.Layers.Item(aaa)
                If lala.LayerOn = False Then
                  GoTo f2
                End If
            retCoord = plutino.Coordinates
            n = UBound(retCoord)
            z = plutino.Elevation
            For J = 0 To n - 3 Step 3
                controlla = Lines_Intersect(retCoord(J), retCoord(J + 1), retCoord(J + 3), retCoord(J + 4), inizio(0), inizio(1), fine(0), fine(1), IntersectionX, IntersectionY)
                If controlla = True Then
                    NSEZ = UBound(sez_) + 1
                    ReDim Preserve sez_(NSEZ)
                    sez_(NSEZ).x = Sqr((IntersectionX - inizio(0)) ^ 2 + (IntersectionY - inizio(1)) ^ 2)
                    sez_(NSEZ).z = z
                End If
            Next
f2:
        End If
        
        
        
        'Polilinea 3d
        If objName = "AcDb3dPolyline" Then
            handle = entry.handle
            Set plutone = ThisDrawing.HandleToObject(handle)
            aaa = plutone.Layer
            Set lala = ThisDrawing.Layers.Item(aaa)
                If lala.LayerOn = False Then
                  GoTo f3
                End If
            retCoord = plutone.Coordinates
            n = UBound(retCoord)
            For J = 0 To n - 3 Step 3
                controlla = Lines_Intersect(retCoord(J), retCoord(J + 1), retCoord(J + 3), retCoord(J + 4), inizio(0), inizio(1), fine(0), fine(1), IntersectionX, IntersectionY)
                If controlla = True Then
                    NSEZ = UBound(sez_) + 1
                    ReDim Preserve sez_(NSEZ)
                    sez_(NSEZ).x = Sqr((IntersectionX - inizio(0)) ^ 2 + (IntersectionY - inizio(1)) ^ 2)
                    'calcolo z
                    If retCoord(J + 2) = retCoord(J + 5) Then
                        sez_(NSEZ).z = retCoord(J + 2)
                    Else
                    d1 = Sqr((IntersectionX - retCoord(J)) ^ 2 + (IntersectionY - retCoord(J + 1)) ^ 2)
                    d2 = Sqr((retCoord(J + 3) - retCoord(J)) ^ 2 + (retCoord(J + 4) - retCoord(J + 1)) ^ 2)
                    sez_(NSEZ).z = retCoord(J + 2) + (((retCoord(J + 5) - retCoord(J + 2)) / d2) * d1)
                    End If
                End If
            Next
f3:
        End If
    
    
    
        'Linea 3d
        If objName = "*AcDbLine" Then
            handle = entry.handle
            Set obLinea = ThisDrawing.HandleToObject(handle)
            aaa = obLinea.Layer
            Set lala = ThisDrawing.Layers.Item(aaa)
                If lala.LayerOn = False Then
                  GoTo f4
                End If
            StartPoint = obLinea.StartPoint
            EndPoint = obLinea.EndPoint
            controlla = Lines_Intersect(StartPoint(0), StartPoint(1), EndPoint(0), EndPoint(1), inizio(0), inizio(1), fine(0), fine(1), IntersectionX, IntersectionY)
                If controlla = True Then
                    NSEZ = UBound(sez_) + 1
                    ReDim Preserve sez_(NSEZ)
                    sez_(NSEZ).x = Sqr((IntersectionX - inizio(0)) ^ 2 + (IntersectionY - inizio(1)) ^ 2)
                    'calcolo z
                    If StartPoint(2) = EndPoint(2) Then
                        sez_(NSEZ).z = StartPoint(2)
                    Else
                    d1 = Sqr((IntersectionX - StartPoint(0)) ^ 2 + (IntersectionY - StartPoint(1)) ^ 2)
                    d2 = Sqr((EndPoint(0) - StartPoint(0)) ^ 2 + (EndPoint(1) - StartPoint(1)) ^ 2)
                    sez_(NSEZ).z = StartPoint(2) + (((EndPoint(2) - StartPoint(2)) / d2) * d1)
                    End If
                End If
f4:
        End If
    Next





' METTO IN ORDINE LA MATRICE
Dim vTemp As sez
Dim bSorted As Boolean
Dim lCtr As Long
Dim lCount As Long
Dim lStart As Long

lStart = LBound(sez_)
lCount = UBound(sez_)

    bSorted = False
   
    Do While Not bSorted
      bSorted = True

      For lCtr = lCount - 1 To lStart Step -1
        If sez_(lCtr + 1).x < sez_(lCtr).x Then
          DoEvents
          bSorted = False
           vTemp = sez_(lCtr)
           sez_(lCtr) = sez_(lCtr + 1)
           sez_(lCtr + 1) = vTemp
         End If
      Next lCtr
    Loop
    
' elimina ultimo punto se eccessivamente lontano
    
l = sez_(lCount).x - sez_(lCount - 1).x

If l > 200000 Then
lCount = lCount - 1
ReDim sez(lCount)
End If

' CALCOLO LA QUOTA PIU' ALTA E QUELLA PIU' BASSA
zmin = 1E+20
zmax = -1E+24
For J = 1 To lCount
    If sez_(J).z > zmax Then zmax = sez_(J).z
    If sez_(J).z < zmin Then zmin = sez_(J).z
Next
dist_min = sez_(1).x
For J = 1 To lCount
sez_(J).x = Round(sez_(J).x - dist_min, 2)
Next



qrif = (zmin - 5) * scalaH

ingx = (sez_(lCount).x - sez_(1).x) * scalad + 5
ingy = ((zmax - zmin + 5) * scalaH) + hcartiglio



 inizio = ThisDrawing.Utility.GetPoint(, "Where drawing?")

'calcolo allargo
Set terreno = Nothing
Dim sp(0 To 2) As Double
sp(0) = X1 + dx
sp(1) = Y1 + dy
sp(2) = 0

Dim atesto1 As Object
stringa = "SCALA V = 1/" & SCALAY
Set atesto1 = ThisDrawing.ModelSpace.AddText(stringa, sp, AltezzaTesto * 1.6)
Dim minExt As Variant
Dim maxExt As Variant
atesto1.GetBoundingBox minExt, maxExt
allargo = (maxExt(0) - minExt(0)) + 10
atesto1.Delete

' calcolo ingombro Qrif
qrifn = (zmin - 5)
str_qrif = Format(qrifn, "#0.00")
Set atesto1 = ThisDrawing.ModelSpace.AddText(str_qrif, sp, AltezzaTesto * 1.6)
atesto1.GetBoundingBox minExt, maxExt
all_qrif = (maxExt(0) - minExt(0)) + 2
atesto1.Delete







inizio(0) = inizio(0) - sez_(1).x + allargo + 10
inizio(1) = inizio(1) - qrif + hcartiglio + 10



'rettangolo ingombro
Call Linea(-(allargo + 10), qrif - hcartiglio - 10, ingx + 10, qrif - hcartiglio - 10, 8, inizio(0), inizio(1))
Call Linea(ingx + 10, qrif - hcartiglio - 10, ingx + 10, qrif - hcartiglio + ingy + 10, 8, inizio(0), inizio(1))
Call Linea(ingx + 10, qrif - hcartiglio + ingy + 10, -(allargo + 10), qrif - hcartiglio + ingy + 10, 8, inizio(0), inizio(1))
Call Linea(-(allargo + 10), qrif - hcartiglio + ingy + 10, -(allargo + 10), qrif - hcartiglio - 10, 8, inizio(0), inizio(1))


'disegna candele

For J = 1 To lCount

Call Linea(sez_(J).x * scalad, qrif, sez_(J).x * scalad, sez_(J).z * scalaH, 1, inizio(0), inizio(1))
kkkk = AltezzaRigaDistanze
Call Linea(sez_(J).x * scalad, qrif - kkkk, sez_(J).x * scalad, qrif - kkkk - 0.1, 1, inizio(0), inizio(1))
kkkk = kkkk + AltezzaRigaQuote
Call Linea(sez_(J).x * scalad, qrif - kkkk, sez_(J).x * scalad, qrif - kkkk - AltezzaRigaDistanze, 1, inizio(0), inizio(1))
kkkk = kkkk + AltezzaRigaDistanze
Call Linea(sez_(J).x * scalad, qrif - kkkk, sez_(J).x * scalad, qrif - kkkk - 0.1, 1, inizio(0), inizio(1))

Next







'disegna terreno
'For j = 1 To lCount - 1
'Call linea(sez_(j).x, sez_(j).z, sez_(j + 1).x, sez_(j + 1).z, 2, inizio(0), inizio(1))
'Next

Dim punti() As Double
ReDim punti((lCount * 3) - 1)

cpunti = 0
For J = 1 To lCount
punti(cpunti) = sez_(J).x * scalad + inizio(0)
punti(cpunti + 1) = sez_(J).z * scalaH + inizio(1)
punti(cpunti + 2) = 0
cpunti = cpunti + 3
Next
Set terreno = ThisDrawing.ModelSpace.AddPolyline(punti)
terreno.color = acBlue


'terreno.Width = 2



Call Linea(-allargo / 2, qrif, (-allargo / 2) + AltezzaTesto * 2, qrif + AltezzaTesto * 2.5, 1, inizio(0), inizio(1))
Call Linea(-allargo / 2, qrif, (-allargo / 2) - AltezzaTesto * 2, qrif + AltezzaTesto * 2.5, 1, inizio(0), inizio(1))
Call Linea((-allargo / 2) - AltezzaTesto * 2, qrif + AltezzaTesto * 2.5, (-allargo / 2) + AltezzaTesto * 2, qrif + AltezzaTesto * 2.5, 1, inizio(0), inizio(1))
Call Linea((-allargo / 2) + AltezzaTesto * 2, qrif + AltezzaTesto * 2.5, (-allargo / 2) + AltezzaTesto * 2 + all_qrif, qrif + AltezzaTesto * 2.5, 1, inizio(0), inizio(1))
Call testo((-allargo / 2) + AltezzaTesto * 2, qrif + AltezzaTesto * 2.5, all_qrif, Format((zmin - 5), "#0.00"), 7, 7, 0, inizio(0), inizio(1), AltezzaTesto * 1.6, False)


'chiusura cartiglio
Call Linea(-allargo, qrif, -allargo, qrif - hcartiglio, 1, inizio(0), inizio(1))
'chiusura cartiglio
Call Linea(sez_(lCount).x * scalad + 5, qrif, sez_(lCount).x * scalad + 5, qrif - hcartiglio, 1, inizio(0), inizio(1))


'disegna cartiglio
Call Linea(-allargo, qrif, sez_(lCount).x * scalad + 5, qrif, 3, inizio(0), inizio(1))
kkkk = AltezzaRigaDistanze
Call Linea(-allargo, qrif - kkkk, sez_(lCount).x * scalad + 5, qrif - kkkk, 1, inizio(0), inizio(1))

kkkk = kkkk + AltezzaRigaQuote
Call Linea(-allargo, qrif - kkkk, sez_(lCount).x * scalad + 5, qrif - kkkk, 1, inizio(0), inizio(1))

kkkk = kkkk + AltezzaRigaDistanze
Call Linea(-allargo, qrif - kkkk, sez_(lCount).x * scalad + 5, qrif - kkkk, 1, inizio(0), inizio(1))

kkkk = kkkk + AltezzaRigaQuote
Call Linea(-allargo, qrif - kkkk, sez_(lCount).x * scalad + 5, qrif - kkkk, 1, inizio(0), inizio(1))


' SCALE
Call testo(-allargo + 5, qrif + (AltezzaTesto * 1.6 * 12), allargo - 10, "SCALA H 1/" & SCALAX, 7, 4, AltezzaRigaDistanze, inizio(0), inizio(1), AltezzaTesto * 1.6, False)
Call testo(-allargo + 5, qrif + (AltezzaTesto * 1.6 * 10), allargo - 10, "SCALA V 1/" & SCALAY, 7, 4, AltezzaRigaDistanze, inizio(0), inizio(1), AltezzaTesto * 1.6, False)



'distanze parziali
kkkk = AltezzaRigaQuote + AltezzaRigaDistanze
Call testo(-allargo + 5, qrif - kkkk, allargo - 10, "PARZIALE", 7, 4, AltezzaRigaDistanze, inizio(0), inizio(1), AltezzaTesto * 1.6, False)
For J = 1 To lCount - 1
Call testo(sez_(J).x * scalad, qrif - kkkk, (sez_(J + 1).x - sez_(J).x) * scalad, _
          Format(sez_(J + 1).x - sez_(J).x, "#0.00"), 7, 5, AltezzaRigaDistanze, inizio(0), inizio(1), AltezzaTesto, Esclusione)
Next J



'codice
kkkk = 0
Call testo(-allargo + 5, qrif - kkkk, allargo - 10, "CODICE", 7, 4, AltezzaRigaDistanze, inizio(0), inizio(1), AltezzaTesto * 1.6, False)
For J = 1 To lCount
Call testo(sez_(J).x * scalad, qrif - kkkk, 0, Format(J, "#0"), 7, 4, AltezzaRigaDistanze, inizio(0), inizio(1), AltezzaTesto, Esclusione, 2)
Next J



'distanze progressive
kkkk = AltezzaRigaQuote + AltezzaRigaQuote * 0.25
Call testo(-allargo + 5, qrif - kkkk, allargo - 10, "PROGRESSIVA", 7, 4, AltezzaRigaQuote / 2, inizio(0), inizio(1), AltezzaTesto * 1.6, False)
For J = 1 To lCount
Call testo(sez_(J).x * scalad, qrif - kkkk, (sez_(J).x - sez_(J - 1).x) * scalad, Format(sez_(J).x - sez_(1).x, "#0.00"), 7, 4, AltezzaRigaQuote, inizio(0), inizio(1), AltezzaTesto, Esclusione, 2)
Next J



'quote terreno
kkkk = AltezzaRigaQuote + AltezzaRigaDistanze + AltezzaRigaQuote + AltezzaRigaQuote * 0.25
Call testo(-allargo + 5, qrif - kkkk, allargo - 10, "QUOTA", 7, 4, AltezzaRigaQuote / 2, inizio(0), inizio(1), AltezzaTesto * 1.6, False)

For J = 1 To lCount
Call testo(sez_(J).x * scalad, qrif - kkkk, 0, Format(sez_(J).z, "#0.000"), _
           7, 4, AltezzaRigaQuote, inizio(0), inizio(1), AltezzaTesto, Esclusione, 2)
Next J

Set atest1 = Nothing

Exit Sub

'er1:
 '   MsgBox Err.Description, vbInformation
  '  Resume Next



End Sub
Sub Linea(ByVal X1 As Double, ByVal Y1 As Double, ByVal X2 As Double, ByVal Y2 As Double, col As Integer, ByVal dx, ByVal dy)
    Dim aline As Object
    Dim sp(0 To 2) As Double
    Dim EP(0 To 2) As Double
    sp(0) = X1 + dx
    sp(1) = Y1 + dy
    sp(2) = 0
    EP(0) = X2 + dx
    EP(1) = Y2 + dy
    EP(2) = 0
    Set aline = ThisDrawing.ModelSpace.AddLine(sp, EP)
    aline.color = col
    Set aline = Nothing
End Sub
Sub testo(ByVal X1 As Double, ByVal Y1 As Double, ByVal larg As Double, testo As String, _
          col As Integer, giu As Integer, hh As Single, ByVal dx, ByVal dy, ByVal AltezzaTesto, ByVal Esclusione, Optional s As Integer = 1)
Dim atesto As Object
Dim atesto1 As Object

Dim sp(0 To 2) As Double
sp(0) = X1 + dx
sp(1) = Y1 + dy
sp(2) = 0

Set atesto1 = ThisDrawing.ModelSpace.AddText(testo, sp, AltezzaTesto)

Set atesto = ThisDrawing.ModelSpace.AddMText(sp, larg, testo)
atesto.height = AltezzaTesto
atesto.color = col
atesto.AttachmentPoint = giu

Dim minExt As Variant
Dim maxExt As Variant
   
atesto1.GetBoundingBox minExt, maxExt
ll1 = maxExt(0) - minExt(0)
hh3 = maxExt(1) - minExt(1)
atesto1.Delete
If s = 2 Then larg = hh3
atesto.GetBoundingBox minExt, maxExt
hh1 = maxExt(1) - minExt(1)

If ll1 > larg Then
s = 2
If hh3 > larg Then
If Esclusione = False Then
    atesto.height = AltezzaTesto * 0.9 * larg / hh3
Else
    atesto.Delete
End If
End If

Else
s = s
End If




Dim m1(0 To 2) As Double
Dim m2(0 To 2) As Double
m2(0) = 0

If giu = 4 Or giu = 5 Or giu = 6 Then
m2(1) = (hh1 - hh) / 2
Else
m2(1) = hh1 + hh
End If
atesto.Move m1, m2

If s = 2 Then
atesto.Rotation = 3.141592654 / 2
End If






Set atesto = Nothing
Set atest1 = Nothing
End Sub
Sub esporta()

'With udtFileDialog
'            .CustomFilter = "Tutti i file (*.edp)" _
'            & Chr$(0) & "*.edp" & Chr$(0) & Chr$(0)
'            .DefaultExt = "*.edp"
'            .Title = "Seleziona il file da salvare"
'            .InitialDir = "C:\"
'        End With
''Salvo il percorso da aprire
'nomefile = WinFileDialog(udtFileDialog, 4)
On Error Resume Next
    
   ' CommonDialog1.Filter = "File Trispace (*.edp)|*.edp"
   ' CommonDialog1.FileName = Left(NomeFile, Len(NomeFile) - 4) & "_" & CStr(jsez)
   ' CommonDialog1.ShowSave
    
    'Filex = ppp.FileName
    
    
    nomefile = "c:\cross_section.edp"
    
    
    If Len(nomefile) = 0 Then Exit Sub
    
     Numfile = FreeFile
      Nsez1 = UBound(sez_())
        Open nomefile For Output As #Numfile
           Print #Numfile, Nsez1
           For J = 1 To Nsez1
              Write #Numfile, sez_(J).x
              Write #Numfile, sez_(J).z
           Next J
       Close #Numfile
    Close Numfile
    
    
    MsgBox "Export in: " & nomefile, vbInformation
    
    
    'ShellExecute 40000, vbNullString, "http://www.geostru.com", vbNullString, "c:\", 1
    
End Sub


  
Sub form()
Frm_DrawSection.show

End Sub
Function valr(vv)
    valr = Val(Replace(vv, ",", "."))
End Function
    
Attribute VB_Name = "Frm_DrawSection"
Attribute VB_Base = "0{497B18DF-FB87-4C57-A9B9-21A21F550F73}{16CF35E3-66D9-4AB2-BC71-DEB1765C62BC}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub CheckBox2_Click()

End Sub


Private Sub CommandButton1_Click()
   Dim c_p2d As Boolean
   Dim c_p3d As Boolean
   Dim c_exl As Boolean
   
   c_p2d = CheckP2d.Value
   c_p3d = CheckP3d.Value
   c_exl = CHKEsclusioneTesti.Value
   
   SaveSetting "Geostru Autocad", "Section", "ScalaD", TBScalaD.Text
   SaveSetting "Geostru Autocad", "Section", "ScalaH", TBScalaH.Text
   SaveSetting "Geostru Autocad", "Section", "AltezzaTesti", TBAltezzaTesti.Text
   SaveSetting "Geostru Autocad", "Section", "EsclusioneQuote", c_exl
   
   
   SaveSetting "Geostru Autocad", "Section", "AltezzaRigaDistanze", TBRigaDistanze.Text
   SaveSetting "Geostru Autocad", "Section", "AltezzaRigaQuote", TBRigaQuote.Text
   
   

   SaveSetting "Geostru Autocad", "Section", "Polilinea2d", c_p2d
   SaveSetting "Geostru Autocad", "Section", "Polilinea3d", c_p3d

   
   Unload Frm_DrawSection
   
   
End Sub


Private Sub TextBox2_Change()

End Sub

Private Sub TextBox1_Change()

End Sub

Private Sub UserForm_Activate()
   Dim c_p2d As Boolean
   Dim c_p3d As Boolean
   Dim c_exl As Boolean

   c_p2d = GetSetting("Geostru Autocad", "Section", "Polilinea2d", "Vero")
   c_p3d = GetSetting("Geostru Autocad", "Section", "Polilinea3d", "Vero")
   c_exl = GetSetting("Geostru Autocad", "Section", "EsclusioneQuote", False)


   TBScalaD.Text = GetSetting("Geostru Autocad", "Section", "ScalaD", 1000)
   TBScalaH.Text = GetSetting("Geostru Autocad", "Section", "ScalaH", 1000)
   TBAltezzaTesti.Text = GetSetting("Geostru Autocad", "Section", "AltezzaTesti", 1.2)
   
   
   TBRigaDistanze.Text = GetSetting("Geostru Autocad", "Section", "AltezzaRigaDistanze", 10)
   TBRigaQuote.Text = GetSetting("Geostru Autocad", "Section", "AltezzaRigaQuote", 15)
   
   
   CheckP2d.Value = c_p2d
   CheckP3d.Value = c_p3d
   CHKEsclusioneTesti.Value = c_exl
   


   
   
'   SaveSetting "Geostru Autocad", "Section", "AltezzaRigaDistanze", TBRigaDistanze.Text
'   SaveSetting "Geostru Autocad", "Section", "AltezzaRigaQuote", TBRigaQuote.Text
'
   
   
End Sub
Attribute VB_Name = "Geostru"
Sub form_about()
    frm_about.show
End Sub


Attribute VB_Name = "Gestione_file"
''-------------------------------------------------
'' Dichiarazioni WinAPI
''-------------------------------------------------
'Private Declare Function GetOpenFileName% _
'    Lib "COMDLG32" _
'    Alias "GetOpenFileNameA" ( _
'        OPENFILENAME As OPENFILENAME _
'    )
'Private Declare Function GetSaveFileName _
'    Lib "comdlg32.dll" _
'    Alias "GetSaveFileNameA" ( _
'        pOPENFILENAME As OPENFILENAME _
'    ) As Long
'Private Declare Function GetModuleHandle _
'    Lib "Kernel32" _
'    Alias "GetModuleHandleA" ( _
'        ByVal lpModuleName As String _
'    ) As Long
'Private Declare Function GetActiveWindow _
'    Lib "user32" ( _
'    ) As Long
'    Declare Function ShellExecute Lib "shell32.dll" _
'    Alias "ShellExecuteA" ( _
'        ByVal Hwnd As Long, _
'        ByVal lpOperation As String, _
'        ByVal lpFile As String, _
'        ByVal lpParameters As String, _
'        ByVal lpDirectory As String, _
'        ByVal nShowCmd As Long _
'    ) As Long
'
''-------------------------------------------------
'' Tipi definiti dall'utente
''-------------------------------------------------
'Private Type OPENFILENAME
'     lStructSize As Long
'     hwndOwner As Long
'     hInstance As Long
'     lpstrFilter As String
'     lpstrCustomFilter As Long
'     nMaxCustFilter As Long
'     nFilterIndex As Long
'     lpstrFile As String
'     nMaxFile As Long
'     lpstrFileTitle As String
'     nMaxFileTitle As Long
'     lpstrInitialDir As String
'     lpstrTitle As String
'     Flags As Long
'     nFileOffset As Integer
'     nFileExtension As Integer
'     lpstrDefExt As String
'     lCustData As Long
'     lpfnHook As Long
'     lpTemplateName As Long
'End Type
'Public Type FileDialog
'    Title As String
'    CustomFilter As String
'    DefaultExt As String
'    InitialDir As String
'End Type
'
''-------------------------------------------------
'' Costanti a livello domodulo
''-------------------------------------------------
''usate per l'API GetOpenFileName
'Const OFN_READONLY = &H1
'Const OFN_OVERWRITEPROMPT = &H2
'Const OFN_HIDEREADONLY = &H4
'Const OFN_NOCHANGEDIR = &H8
'Const OFN_SHOWHELP = &H10
'Const OFN_ENABLEHOOK = &H20
'Const OFN_ENABLETEMPLATE = &H40
'Const OFN_ENABLETEMPLATEHANDLE = &H80
'Const OFN_NOVALIDATE = &H100
'Const OFN_ALLOWMULTISELECT = &H200
'Const OFN_EXTENSIONDIFFERENT = &H400
'Const OFN_PATHMUSTEXIST = &H800
'Const OFN_FILEMUSTEXIST = &H1000
'Const OFN_CREATEPROMPT = &H2000
'Const OFN_SHAREAWARE = &H4000
'Const OFN_NOREADONLYRETURN = &H8000
'Const OFN_NOTESTFILECREATE = &H10000
'Const OFN_SHAREFALLTHROUGH = 2
'Const OFN_SHARENOWARN = 1
'Const OFN_SHAREWARN = 0
'
'' DESCRIZIONE:mostra la finestra di dialogo
'' Apri per il pulsante Sfoglia...
'
'Function WinFileDialog(typOpenDialog As FileDialog, _
'    iIndex As Integer) As String
'    Dim OPENFILENAME As OPENFILENAME
'    Dim Message$, FileName$, FilesDlgTitle
'    Dim szCurDir$, iReturn As Integer
'    Dim pathname As String, sAppName As String
'
'    'Alloca spazio per le stringhe restituite.
'    FileName$ = Chr$(0) & Space$(255) & Chr$(0)
'    FilesDlgTitle = Chr$(0) & Space$(255) & Chr$(0)
'
'    'Imposta la struttura dei dati prima di GetOpenFileName
'    With OPENFILENAME
'        .lStructSize = Len(OPENFILENAME)
'        .hwndOwner = GetActiveWindow&
'        .lpstrFilter = typOpenDialog.CustomFilter
'        .nFilterIndex = 1
'        .lpstrFile = FileName$
'        .nMaxFile = Len(FileName$)
'        .nMaxFileTitle = Len(typOpenDialog.Title)
'        .lpstrTitle = typOpenDialog.Title
'        .Flags = OFN_FILEMUSTEXIST Or _
'            OFN_HIDEREADONLY
'        .lpstrDefExt = typOpenDialog.DefaultExt
'        .lpstrInitialDir = typOpenDialog.InitialDir
'    End With
'
'    If iIndex = 1 Then
'        iReturn = GetOpenFileName(OPENFILENAME)
'    Else
'        iReturn = GetSaveFileName(OPENFILENAME)
'    End If
'    If iReturn Then
'        WinFileDialog = Left(OPENFILENAME.lpstrFile, _
'        InStr(OPENFILENAME.lpstrFile, Chr$(0)) - 1)
'    End If
'End Function
'
'
'
'
'
'
'
Attribute VB_Name = "Gestione_menu"
Sub aggiungi_menu()
    
  On Error Resume Next
    
    Dim currMenuGroup As AcadMenuGroup
    Set currMenuGroup = ThisDrawing.Application.MenuGroups.Item(0)
    ' Create the new menu
    
    
    Dim newMenu As AcadPopupMenu
    Set newMenu = currMenuGroup.Menus.Add("Geostru")
    

    ' Add the submenu
    Dim FileSubMenu As AcadPopupMenu
    Set FileSubMenu = newMenu.AddSubMenu("", "DrawSection")

    ' Add a menu item to the new menu
    Dim newMenuItem As AcadPopupMenuItem
    Dim openMacro As String
    ' Assign the macro string the VB equivalent of "ESC ESC _open "
    
    openMacro = "_-vbarun DrawSection.sezione" & Chr(13)
    Set newMenuItem = FileSubMenu.AddMenuItem(newMenu.Count + 1, "Cross Section", openMacro)


    ' Display the menu on the menu bar


    openMacro = "_-vbarun DrawSection.form" & Chr(13)
    Set newMenuItem = FileSubMenu.AddMenuItem(newMenu.Count + 1, "Settings", openMacro)

    openMacro = "_-vbarun DrawSection.esporta" & Chr(13)
    Set newMenuItem = FileSubMenu.AddMenuItem(newMenu.Count + 1, "Export...", openMacro)



    Dim FileSubMenu1 As AcadPopupMenu
    Set FileSubMenu1 = newMenu.AddSubMenu("", "Hydrologic Risk")

    openMacro = "_-vbarun Hydrologic_Risk.Bacino" & Chr(13)
    Set newMenuItem = FileSubMenu1.AddMenuItem(newMenu.Count + 1, "Export Bacin", openMacro)


    openMacro = "_-vbarun Geostru.form_about" & Chr(13)
    Set newMenuItem = newMenu.AddMenuItem(newMenu.Count + 1, "About", openMacro)


    newMenu.InsertInMenuBar (ThisDrawing.Application.MenuBar.Count + 1)
    currMenuGroup.Save acMenuFileSource
    currMenuGroup.Save acMenuFileCompiled

End Sub
Attribute VB_Name = "Hydrologic_Risk"
Private Type Coord
  x As Double
  y As Double
End Type
'Dim udtFileDialog As FileDialog
Public Function INSIDEP(Apex() As Coord, napex As Integer, xpt As Double, ypt As Double) As Integer
' Apex con Base 0
'
'      inside          definisce la posizione di un punto rispetto
'                      a un poligono (interno o esterno)
'
'      input           xapex = ascisse vertici del poligono
'                      yapex = ordinate vertici poligono
'                      napex = nr. vertici poligono
'                      xpt & ypt = coord. punto
'
'      output          loc
'
'      loc = 0         n. vertici < 3
'      loc = 1         il punto e' esterno al poligono
'      loc = 2         il punto coincide con un vertice
'      loc = 3         il punto sta sulla frontiera del poligono
'      loc = 4         il punto e' interno al poligono
'
Dim loc As Integer
Dim i As Integer
Dim theta As Double
Dim alfa As Double
Dim xnew As Double
Dim ynew As Double
Dim PI As Double
PI = 4# * Atn(1#) 'atan(1#)
'

If (napex < 2) Then
        loc = 0          ' poligono inesistente
        INSIDEP = loc
        Exit Function
End If

' Punto Coincidente con un vertice
For i = 0 To napex
   If (xpt = Apex(i).x And ypt = Apex(i).y) Then
     loc = 2
        INSIDEP = loc
     Exit Function
   End If
Next i

Apex(napex) = Apex(0)   '  forza la chisura del poligono

Angle = 0

For i = 0 To napex - 1
        theta = Atan2(Apex(i).y - ypt, Apex(i).x - xpt)
        xnew = (Apex(i + 1).x - xpt) * Cos(theta) + (Apex(i + 1).y - ypt) * Sin(theta)
        ynew = (Apex(i + 1).y - ypt) * Cos(theta) - (Apex(i + 1).x - xpt) * Sin(theta)
        alfa = Atan2(ynew, xnew)
        If alfa = PI Then
                loc = 3       ' punto sul lato del poligono
                INSIDEP = loc
                Exit Function
        End If
        Angle = Angle + alfa
Next i

If (Abs(Angle) < 0.0001) Then
        loc = 1              ' Punto esterno
        INSIDEP = loc
        Exit Function
ElseIf (Abs(Angle) > PI) Then
        loc = 4              ' punto interno
        INSIDEP = loc
        Exit Function
End If

 
End Function

Public Function Atan2(y As Double, x As Double) As Single

'
' Atan2 - Usata da INSIDEP per determinare se un punto giace
'         all'interno di un poligono
'
'         in VB  Atan2 NON esiste e qui |fffd| emulata
'         uguale alla funzione fortran atan2
'

'

Dim PI As Double
Dim hpi As Double

PI = 4 * Atn(1)    '  pigreco        3.14.....    (180)
 
hpi = PI / 2#       ' pigrecomezzi   1.57......   ( 90)
If x = 0# Then
    If y > 0# Then
        Atan2 = hpi
       ElseIf y < 0# Then
        Atan2 = -hpi
       Else
        Atan2 = 0#
    End If
 ElseIf y = 0# Then
    If x < 0# Then
      Atan2 = PI
     Else
      Atan2 = 0#
    End If
Else
    If x < 0# Then
       If y > 0# Then
         Atan2 = Atn(y / x) + PI
        Else
         Atan2 = Atn(y / x) - PI
       End If
     Else
      Atan2 = Atn(y / x)
    End If
End If

 
End Function

Sub Bacino()

    Dim politest As Acad3DPolyline
    Dim puntotest As AcadPoint
    Dim selezione As AcadSelectionSet
    Dim contorno As Acad3DPolyline
    Dim coordinate As Variant
    Dim returnObj As Object
    Dim loc As Integer
    
    On Error Resume Next
    
 
    ThisDrawing.Utility.GetEntity returnObj, basePnt, "Select a closed polyline"
    
    If returnObj.ObjectName = "AcDb3dPolyline" Then
        handle = returnObj.handle
        Set politest = ThisDrawing.HandleToObject(handle)
        retCoord = politest.Coordinates
        n = UBound(retCoord)
        
        'coordinate del primo punto
        a = retCoord(0)
        b = retCoord(1)
        c = retCoord(2)
        'coordinate dell'ultimo
        a1 = retCoord(n - 2)
        b1 = retCoord(n - 1)
        c1 = retCoord(n)
        ' controllo se la polilinea |fffd| chiusa
        'If a = a1 And b = b1 And c = c1 Then
            
            
            
'            With Frm_dialog.CommonDialog_File
'              .DialogTitle = "Seleziona il file da caricare"
'              .Filter = "File di testo (*.txt) |*.txt"
'              .FilterIndex = 1 'scelta posizionata su doc
'              .ShowSave
'            nomefile = .FileName
'            End With
'
            
'        With udtFileDialog
'            .CustomFilter = "Tutti i file (*.edp)" _
'            & Chr$(0) & "*.edp" & Chr$(0) & Chr$(0)
'            .DefaultExt = "*.edp"
'            .Title = "Seleziona il file da salvare"
'            .InitialDir = "C:\"
'        End With
''Salvo il percorso da aprire
'nomefile = WinFileDialog(udtFileDialog, 4)
            
            
            nomefile = "c:\river_basin_contour.txt"
            
            
            Open nomefile For Output As #1
           ' ****************** Write #1, "BACINO"
           nbacino = 1
           nv = ((UBound(retCoord) + 1) / 3) - 1
           ReDim Apex(nv) As Coord
            For J = 0 To n - 3 Step 3
                Apex((J / 3)).x = retCoord(J)
                Apex((J / 3)).y = retCoord(J + 1)
                Write #1, "B", nbacino, retCoord(J), retCoord(J + 1), retCoord(J + 2)
                nbacino = nbacino + 1
            Next
            '****************** Write #1, "PUNTI INTERNI"
            npunti = 1
            For Each entry In ThisDrawing.ModelSpace
                objName = entry.ObjectName
                If objName = "AcDbPoint" Then
                    handle = entry.handle
                    Set puntotest = ThisDrawing.HandleToObject(handle)
                    x = puntotest.Coordinates(0)
                    y = puntotest.Coordinates(1)
                    z = puntotest.Coordinates(2)
                    loc = INSIDEP(Apex(), CInt(nv), CDbl(x), CDbl(y))
                    If loc = 4 Then
                    'Debug.Print x, y, z
                     puntotest.color = acRed
                    Write #1, "VQ", npunti, x, y, z
                    npunti = npunti + 1
                    End If
                End If
            Next
            returnObj.color = acRed
            Close #1
            
            MsgBox "Export in " & nomefile, vbInformation
            
            
        'Else
        '    MsgBox "La polilinea non |fffd| chiusa"
       ' End If
    Else
        MsgBox "The selection is not a 3D polyline"
    End If
End Sub




Attribute VB_Name = "ThisDrawing"
Attribute VB_Base = "0{B6EB585B-B467-4E46-A9C7-48D7D6FD26CB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub AcadDocument_Activate()
    ' This example intercepts a drawing Activate event.
    '
    ' This event is triggered when a drawing window becomes active.
    '
    ' To trigger this example event: Either open a new drawing or switch from
    ' one drawing window to another

    MsgBox "You have just activated a drawing!"
End Sub


Attribute VB_Name = "frm_about"
Attribute VB_Base = "0{C38A857C-FA64-4209-BD29-F8B62D60D111}{488C2B6B-B314-43FF-907F-F91E9DE2968F}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
 'Private Declare Function ShellExecute Lib "shell32.dll" Alias "ShellExecuteA" (ByVal hwnd As Long, _
                                                                                  ByVal lpOperation As String, ByVal lpFile As String, _
                                                                                  ByVal lpParameters As String, ByVal lpDirectory As String, _
                                                                                  ByVal nShowCmd As Long) As Long
Private Sub cmd_ok_Click()
Unload frm_about
End Sub

Private Sub Label4_Click()
    Call NewShell("http://www.geostru.eu", 3)
End Sub

Private Sub UserForm_Click()

End Sub
Public Sub NewShell(cmdLine As String, lngWindowHndl As Long)
    ShellExecute lngWindowHndl, "open", cmdLine, "", "", 1
End Sub



INQUEST-PP=macro
