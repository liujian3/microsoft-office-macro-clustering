Attribute VB_Name = "Allgemein"
Public m_ShowHiddenText As Boolean
Public m_ShowAll As Boolean
Public m_PrintHiddenText As Boolean
Public m_MarkupMode As Integer   '1=alle |fffd|berarbeitungen inline  2=nur teilweise in Sprechblasen  3 = alle in Sprechblasen
Public m_TableGridlines As Boolean

Public Dom|fffd|ne As String

Sub setStartupValues(Optional bProtect As Boolean = True) 'Makro startet beim |fffd|ffnen der Datenliste (siehe Objekt "ThisDocument")

   'Pr|fffd|fen und "merken" vorhandener Word-Einstellungen ----------------------------------------------------------------------
   'Beim Schlie|fffd|en des Dokuments werden die urspr|fffd|nglichen Einstellungen durch das "AutoClose" Makro wieder gesetzt
    
    m_ShowHiddenText = ActiveDocument.ActiveWindow.View.ShowHiddenText           'Verstecken des "ausgeblendeten Textes" (wegen Word 2003 erforderlich)
    m_ShowAll = ActiveDocument.ActiveWindow.View.ShowAll                         'Ausblenden von "ausgeblendetem Text" + "allen Formatierungszeichen"
    m_PrintHiddenText = Options.PrintHiddenText                                  'Ausgeblendeter Text wird nicht gedruckt (= gesonderte Einstellung in Word)
    m_TableGridlines = ActiveDocument.ActiveWindow.View.TableGridlines           'Ausblenden der Tabellen-Rasterlinien
        
    If ActiveDocument.ActiveWindow.View.MarkupMode = wdInLineRevisions Then      'Alle |fffd|berarbeitungen inline anzeigen
       m_MarkupMode = 1
    ElseIf ActiveDocument.ActiveWindow.View.MarkupMode = wdMixedRevisions Then   'nur Kommentare und Formatierungen in Sprechblasen anzeigen
       m_MarkupMode = 2
    ElseIf ActiveDocument.ActiveWindow.View.MarkupMode = wdBalloonRevisions Then '|fffd|berarbeitungen in Sprechblasen anzeigen
       m_MarkupMode = 3
    End If
    
    '-------------------------------------------------------------------------------------------------------------------------------

    Call protectFile(False)                                         'Ausf|fffd|hren der Function "protectFile" und |fffd|bergabe des Wertes "False" (wegen Word 2003 erforderlich)

    ActiveDocument.ActiveWindow.View.ShowHiddenText = False         'Das zus|fffd|tzliche Verstecken des "ausgeblendeten Textes" ist wegen Word 2003 notwendig
    ActiveDocument.ActiveWindow.View.ShowAll = False                'Ausblenden von "ausgeblendetem Text" + "allen Formatierungszeichen"
    Options.PrintHiddenText = False                                 'Ausgeblendeter Text wird nicht gedruckt (= gesonderte Einstellung in Word)
    ActiveDocument.ActiveWindow.View.MarkupMode = wdInLineRevisions 'Alle |fffd|berarbeitungen inline anzeigen (z.B. Kommentare)
    ActiveDocument.ActiveWindow.View.TableGridlines = False         'Ausblenden der Tabellen-Rasterlinien
       
    Dom|fffd|ne = Environ("UserDomain")
  
    If bProtect = True Then Call protectFile(True)                  'Wird zu "bProtect" der Wert "True" |fffd|bergeben, dann Ausf|fffd|hren der Function "protectFile" und |fffd|bergabe des Wertes "True" (wegen Word 2003 erforderlich)

End Sub


Function protectFile(doProtect As Boolean)  '"doProtect" = |fffd|bergebene Wert ist True(sch|fffd|tzen) oder False(entsch|fffd|tzen)

    If doProtect = True Then 'Dokument sch|fffd|tzen, wenn Wert = True
        If ThisDocument.ProtectionType = wdNoProtection Then ThisDocument.Protect Password:="Vergadmin", NoReset:=True, Type:=wdAllowOnlyFormFields
    Else                     'Dokument entsch|fffd|tzen, wenn Wert = False
        If ThisDocument.ProtectionType = wdAllowOnlyFormFields Then ThisDocument.Unprotect Password:="Vergadmin"
    End If

End Function



Attribute VB_Name = "DocEvents"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public WithEvents appWord As Word.Application
Attribute appWord.VB_VarHelpID = -1

Private Sub appWord_DocumentBeforeSave(ByVal doc As Document, SaveAsUI As Boolean, Cancel As Boolean)
     
     If checkSourceTemp(doc.Path) = True Then
     
        Cancel = True
        
        Dim strFileName As String
        strFileName = getPath()
        
        If Not strFileName = "" Then
            doc.SaveAs2 (strFileName)
        Else
            MsgBox "Das Speichern der Datei wurde von Ihnen abgebrochen.", vbInformation, "Abbruch"
        End If
        
     End If
 
End Sub


Attribute VB_Name = "ThisDocument"
Attribute VB_Base = "1Normal.ThisDocument"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = True
Attribute VB_Customizable = True
Attribute VB_Control = "OptionButton22, 8, 0, MSForms, OptionButton"
Attribute VB_Control = "OptionButton23, 7, 1, MSForms, OptionButton"
Attribute VB_Control = "OptionButton21, 6, 2, MSForms, OptionButton"
Attribute VB_Control = "OptionButton2, 5, 3, MSForms, OptionButton"
Attribute VB_Control = "OptionButton12, 4, 4, MSForms, OptionButton"
Attribute VB_Control = "OptionButton11, 3, 5, MSForms, OptionButton"
Attribute VB_Control = "OptionButton1, 2, 6, MSForms, OptionButton"
Attribute VB_Control = "OptionButton31, 1, 7, MSForms, OptionButton"
Attribute VB_Control = "OptionButton3, 0, 8, MSForms, OptionButton"
Option Explicit
' Klasseninstanz f|fffd|r Eventhandler
Dim thisApp As New DocEvents

    'Startmakro beim Neuerstellen eine Datei aus Vorlagedatei durch Doppelklick
    Private Sub Document_New()
    
        'Aktualit|fffd|tspr|fffd|fung Office
        If Application.Version < "14.0" Then  '14.0 = Word 2010
           MsgBox "Die Funktionalit|fffd|ten dieses Arbeitsmittels erfordern ""Word 2010"" oder aktueller." + vbNewLine + _
                  "Bitte installieren Sie vor der Verwendung dieses Arbeitsmittels eine aktuelle Word Version.", vbInformation, "Aktualit|fffd|tspr|fffd|fung"
           Exit Sub
        End If
        
        ActiveWindow.View.Type = wdNormalView
                
        Call Internet
        
        Pr|fffd|fung_Import
        setStartupValues
        
        'Pr|fffd|fung, ob vom Bauherrn ge|fffd|ffnet
        If VSt_xml = False And Not Dom|fffd|ne = "VBV" Then
        MsgBox "Der rechtsverbindliche Einsatz dieses Arbeitsmittels ist ausschlie|fffd|lich dem Bauherrn vorbehalten." + Chr$(13) + Chr$(13) _
        + "Es darf nur zu Informations- bzw. Vorbereitungszwecken benutzt werden!", vbInformation, "Arbeitsmittel |fffd|ffnen"
        End If
        
        ActiveWindow.View.Type = wdPrintView
                
    End Sub

    'Startmakro beim |fffd|ffnen einer bestehenden Datei
    Private Sub Document_Open()
    
        'Aktualit|fffd|tspr|fffd|fung Office
        If Application.Version < "14.0" Then  '14.0 = Word 2010
           MsgBox "Die Funktionalit|fffd|ten dieses Arbeitsmittels erfordern ""Word 2010"" oder aktueller." + vbNewLine + _
                  "Bitte installieren Sie vor der Verwendung dieses Arbeitsmittels eine aktuelle Word Version.", vbInformation, "Aktualit|fffd|tspr|fffd|fung"
           Exit Sub
        End If
        
        Set thisApp.appWord = Word.Application
        
        ActiveWindow.View.Type = wdNormalView
        
        Call Internet
       
        ThisDocument.Activate 'Focus auf dieses Dokument legen, sonst funktioniert "ActiveDocument..." nach Download nicht !

        Pr|fffd|fung_Import
        setStartupValues
        
        'Pr|fffd|fung, ob vom Bauherrn ge|fffd|ffnet
        If VSt_xml = False And Not Dom|fffd|ne = "VBV" Then
        MsgBox "Der rechtsverbindliche Einsatz dieses Arbeitsmittels ist ausschlie|fffd|lich dem Bauherrn vorbehalten." + Chr$(13) + Chr$(13) _
        + "Es darf nur zu Informations- bzw. Vorbereitungszwecken benutzt werden!", vbInformation, "Arbeitsmittel |fffd|ffnen"
        End If
        
        ActiveWindow.View.Type = wdPrintView
        
        
    End Sub

    'Makro beim Schlie|fffd|en der Datei
    Sub AutoClose()
        
        'Wiederherstellen der urspr|fffd|nglichen Word-Einstellungen ----------------------------------------------
        
        ActiveDocument.ActiveWindow.View.ShowHiddenText = m_ShowHiddenText  'Verstecken des "ausgeblendeten Textes"
        ActiveDocument.ActiveWindow.View.ShowAll = m_ShowAll                'Ausblenden von "ausgeblendetem Text" + "allen Formatierungszeichen"
        Options.PrintHiddenText = m_PrintHiddenText                         'Ausgeblendeter Text wird nicht gedruckt
        ActiveDocument.ActiveWindow.View.TableGridlines = m_TableGridlines  'Ausblenden der Tabellen-Rasterlinien

        If m_MarkupMode = 1 Then                                            'Alle |fffd|berarbeitungen inline anzeigen
            ActiveDocument.ActiveWindow.View.MarkupMode = wdInLineRevisions
        ElseIf m_MarkupMode = 2 Then                                        'Nur Kommentare und Formatierungen in Sprechblasen anzeigen
            ActiveDocument.ActiveWindow.View.MarkupMode = wdMixedRevisions
        ElseIf m_MarkupMode = 3 Then                                        '|fffd|berarbeitungen in Sprechblasen anzeigen
            ActiveDocument.ActiveWindow.View.MarkupMode = wdBalloonRevisions
        End If
        
         '---------------------------------------------------------------------------------------------------
         
    End Sub
Attribute VB_Name = "Update"
Option Explicit

''API Funktionen
#If VBA7 Then
    
   Private Declare PtrSafe Function URLDownloadToFile Lib "urlmon" Alias _
                            "URLDownloadToFileA" ( _
                                ByVal pCaller As Long, _
                                ByVal szURL As String, _
                                ByVal szFileName As String, _
                                ByVal dwReserved As Long, _
                                ByVal lpfnCB As Long) As Long
    
   Private Declare PtrSafe Function DeleteUrlCacheEntry Lib "wininet.dll" Alias _
       "DeleteUrlCacheEntryA" (ByVal lpszUrlName As String) As Long
    
#Else

   Private Declare Function URLDownloadToFile Lib "urlmon" Alias _
                            "URLDownloadToFileA" ( _
                                ByVal pCaller As Long, _
                                ByVal szURL As String, _
                                ByVal szFileName As String, _
                                ByVal dwReserved As Long, _
                                ByVal lpfnCB As Long) As Long

   Private Declare Function DeleteUrlCacheEntry Lib "wininet.dll" Alias _
       "DeleteUrlCacheEntryA" (ByVal lpszUrlName As String) As Long

#End If
    
Private strDownloadFileNeu As String    ' keinen Wert zuweisen
Private strUpdatelinkTemp As String     ' keinen Wert zuweisen
    
'-------------------------------------------------------------------------------------------------------------------------------------------
'-------------------------------------------------------------------------------------------------------------------------------------------

''Festlegung der Konstanten
'URL der Datei, anhand der gepr|fffd|ft wird, ob eine Internetverbindung besteht (Datei erreichbar = Internetverbindung, sonst keine)
Private Const strCheckFile As String = "http://www.vbv.statistik-bw.de/Internetverbindung/CheckInternet.txt"

'URL des Updateordners
Private Const strUpdatelink As String = "http://www.vbv.statistik-bw.de/Formulare/"      ' "/" am Ende nicht zwingend, wird gepr|fffd|ft und ggf. korrigiert

'Name des Downloadfile auf dem Server
Private Const strDownloadFile As String = "444_Referenzbescheinigung.docm"   '<= Dateibezeichnung der Anwendung

Private Const strVersNr As String = "444_Version_004.txt"    '<= Versionsdatei (txt-Format)
                                'Anhand dieser Versionsdatei wird gepr|fffd|ft, ob die Anwendung noch aktuell ist.
                                'Die Bezeichnung entspricht der Dateibezeichnung der Anwendung mit einem fortlaufenden Index,
                                'welcher bei einer neuen Version um einen Z|fffd|hler erh|fffd|ht wird.
                                'Auf dem Updateserver ist dann die veraltete Versionsdatei zu l|fffd|schen und die neue hochzuladen.
                                'Im nachfolgenden Code wird gepr|fffd|ft, ob die in dieser Anwendung bezeichnete Versionsdatei noch
                                'auf dem Updateserver liegt.
                                'Wenn ja = kein Update erforderlich.
                                'Wenn nein = Update erforderlich.


Private Function URLVorhanden(ByVal sURL As String) As Boolean
    
    Dim oHTTP As Object
    Dim lStatus As Long
    
    On Error Resume Next        'im Fehlerfall mit der n|fffd|chsten Anweisung fortfahren
    DeleteUrlCacheEntry (sURL)  'evtl. vorhandene tempor|fffd|re Datei aus dem IE-Cache entfernen

    On Error GoTo ende          'wenn Error-Meldung, dann weiter mit "ende:"
   
    Set oHTTP = CreateObject("Microsoft.XMLHTTP")
    With oHTTP
        .Open "GET", sURL, False
        .Send
        lStatus = .Status
    End With
    
    Set oHTTP = Nothing
    
    URLVorhanden = lStatus = 200  'wenn Status 200 dann URLVorhanden = True
    Exit Function
    
ende:
    URLVorhanden = False

End Function

Sub Internet()  'Pr|fffd|fung, ob Internetverbindung zum Updateserver besteht
      
   If URLVorhanden(strCheckFile) Then
      Call Aktualit|fffd|tspr|fffd|fung
   Else
      If MsgBox("Die Suche nach Updates ist fehlgeschlagen." + Chr$(13) + "Eine Verbindung zum Updateserver konnte nicht hergestellt werden." + Chr$(13) + "Das kann folgende Ursachen haben:" + Chr$(13) + Chr$(13) + "- Es besteht keine Internetverbindung," + Chr$(13) + "- Der Updateserver ist derzeit nicht ansprechbar," + Chr$(13) + "- Ihre Firewall verweigert der Anwendung den Internetzugriff." + Chr$(13) + Chr$(13) + "M|fffd|chten Sie den Vorgang wiederholen?", vbYesNo + vbQuestion, "Pr|fffd|fung der Internetverbindung") = vbYes Then
         Call Internet
      End If
   End If
    
End Sub

Sub Aktualit|fffd|tspr|fffd|fung() 'Pr|fffd|fung, ob aktuellere Datei bereitgestellt wurde

    Dim strFileTemp As String
    
    Dim strMsg As String
    strMsg = "Wegen eines technischen Problems kann die neue Version dieser Datei nicht heruntergeladen werden." + Chr$(13) + "Wir bitten diesen Umstand zu entschuldigen." + Chr$(13) + Chr$(13) + "Bitte setzen Sie sich |fffd|ber die Vergabestelle mit dem Anwendungssupport in Verbindung."

    'Tempor|fffd|r verwendete und ver|fffd|nderbare Variablen setzen und pr|fffd|fen auf "/" am Ende
    strDownloadFileNeu = strDownloadFile
    strUpdatelinkTemp = strUpdatelink
    If Right(strUpdatelinkTemp, 1) <> "/" Then strUpdatelinkTemp = strUpdatelinkTemp & "/"
    
    'Versionsdatei aus dem Cache entfernen
    On Error Resume Next        'im Fehlerfall mit der n|fffd|chsten Anweisung fortfahren
    DeleteUrlCacheEntry (strUpdatelinkTemp & strVersNr)
 
    If URLVorhanden(strUpdatelinkTemp & strVersNr) Then
        'MsgBox "Die Datei ist auf dem aktuellen Stand.", vbInformation, "Aktualit|fffd|tspr|fffd|fung" 'Vor der Auslieferung auskommentieren
        Exit Sub
    Else
        If MsgBox("Die Datei ist nicht mehr aktuell." + Chr$(13) + "M|fffd|chten Sie die neue Version dieser Datei herunterladen?", _
            vbYesNo + vbQuestion, "Aktualit|fffd|tspr|fffd|fung") = vbYes Then
            If URLVorhanden(strUpdatelinkTemp & strDownloadFile) = False Then     'Pr|fffd|fung, ob neue Datei auf Updateserver liegt
                MsgBox strMsg, vbInformation, "Hinweis"
            Else
                'Zielpfad f|fffd|r Download abfragen, Abbruch, wenn keine Angabe durch User
                strFileTemp = getPath()
                If strFileTemp = "" Then
                    MsgBox "Das Herunterladen der aktualisierten Datei wurde von Ihnen abgebrochen." + Chr$(13) + Chr$(13) + "Zum nochmaligen |fffd|ffnen des Download-Dialogs schlie|fffd|en Sie bitte zun|fffd|chst diese Datei und |fffd|ffnen Sie diese anschlie|fffd|end erneut.", vbInformation, "Hinweis"
                    Exit Sub
                End If
                'Datei herunterladen
                If Not DownloadFile(strUpdatelinkTemp & strDownloadFile, strFileTemp) Then
                    MsgBox strMsg, vbInformation, "Hinweis"
                Else
                    'Neue Datei gleich |fffd|ffnen
                    If MsgBox("Die Datei wurde erfolgreich heruntergeladen und wie folgt gespeichert:" + Chr$(13) + Chr$(13) + _
                        "" & strFileTemp & "" + Chr$(13) + Chr$(13) + Chr$(13) + "M|fffd|chten Sie die aktuelle Version jetzt |fffd|ffnen?", vbYesNo + vbInformation, "Download erfolgreich") = vbYes Then
                        
                        Dim doc As Word.Document
                        Set doc = Application.ActiveDocument
                        
                        Application.Documents.Open (strFileTemp)
                        doc.Activate
                        doc.Close savechanges:=False  'Schlie|fffd|en der "alten" Datei ohne zu speichern
                    End If
                    
                 End If
            End If
        Else
            MsgBox "Sie k|fffd|nnen die neue Version dieser Datei auch zu einem sp|fffd|teren Zeitpunkt herunterladen." + Chr$(13) + Chr$(13) + "Die Aktualit|fffd|tspr|fffd|fung erfolgt automatisch nach jedem |fffd|ffnen der Datei.", vbInformation, "Hinweis"
        End If
    End If

End Sub

Private Function DownloadFile(UrlFileName As String, DestinationFileName As String) As Boolean

    On Error Resume Next
    DownloadFile = False
    
    DestinationFileName = Trim(DestinationFileName)
    
    If DestinationFileName = vbNullString Then Exit Function
    
    Dim L As Long
    
    L = DeleteUrlCacheEntry(UrlFileName)
    L = URLDownloadToFile(0&, UrlFileName, DestinationFileName, 0&, 0&)
    
    If L = 0 Then DownloadFile = True
    
End Function

Public Function getPath() As String
    
    Dim strAktPath As String
    
    If checkSourceTemp(Application.ActiveDocument.Path) = False Then
        strAktPath = Application.ActiveDocument.Path
    Else
        strAktPath = "C:"
    End If

    getPath = saveFormAs(strAktPath, Application.ActiveDocument.Name)
    
    If getPath = Application.ActiveDocument.FullName Then   'Pfad der aktuell ge|fffd|ffneten Datei
           Dim fso As New FileSystemObject
           Dim strExt As String
        
           strExt = fso.GetExtensionName(Application.ActiveDocument.FullName)
           
           getPath = fso.GetAbsolutePathName(Application.ActiveDocument.Path) & "\" & fso.GetBaseName(Application.ActiveDocument.Name)
           getPath = getPath & " - Neu." & fso.GetExtensionName(Application.ActiveDocument.FullName)
               
           MsgBox "Ein Dokument kann nicht unter dem gleichen Namen wie ein bereits ge|fffd|ffnetes Dokument gespeichert werden." & Chr$(13) & Chr$(13) & _
           "Um die Datei dennoch speichern zu k|fffd|nnen, wird der Dateiname automatisch um den Zusatz  "" - Neu ""  erweitert." & Chr$(13) & Chr$(13) & _
           "Die neue Datei ist anschlie|fffd|end unter dem Dateinamen  """ & fso.GetBaseName(getPath) & """  aufrufbar.", vbInformation, "Datei bereits vorhanden"
            
    End If
  
End Function

Public Function saveFormAs(strPath As String, strFileName As String) As String
    
    Dim fd As FileDialog
    Set fd = Application.FileDialog(msoFileDialogSaveAs)
    
    If Application.Name = "Microsoft Word" Then
        If Application.Version = "11.0" Then
            fd.FilterIndex = 1
        Else
            fd.FilterIndex = 2
        End If
    End If
    
    With fd
        .Title = "Datei speichern unter ..."
        .InitialFileName = strPath
        If Not strFileName = "" Then .InitialFileName = strPath & "\" & strFileName
    End With
            
    If fd.Show = True Then
        saveFormAs = fd.SelectedItems(1)
    Else
        saveFormAs = ""
    End If
       
End Function

Public Function checkSourceTemp(strPath As String) As Boolean

    checkSourceTemp = False
    Dim fso As New FileSystemObject
    
    If fso.FolderExists(strPath) Then
        If Len(strPath) >= 4 Then
            If LCase(Right$(strPath, 3)) = "tmp" Or LCase(Right$(strPath, 4)) = "temp" Then checkSourceTemp = True
        End If
    Else
        checkSourceTemp = True
    End If
    
End Function




Attribute VB_Name = "XML_Import"

Private xmlPath As String
Private Const xmlFile As String = "Formulare und Datenlisten\Vergabestelle.xml"  'Pfad der xml-Datei mit den Daten der Vergabestelle
Private Const anzImporte As Integer = 0     'Anzahl, wie oft die Daten in das Dokument eingelesen werden  (Standard = 1)
                                            'Bezeichnung der Textfelder im Dokument:
                                                    'erste Angabe : VSt01,   VSt02,   VSt03,   VSt04
                                                    'zweite Angabe: VSt01_1, VSt02_1, VSt03_1, VSt04_1
                                                    'dritte Angabe: VSt01_2, VSt02_2, VSt03_2, VSt04_2
                                                    'u.s.w
Public VSt_xml As Boolean                   'Vergabestellen.xml Datei vorhanden
    
Sub Pr|fffd|fung_Import()

    Call protectFile(False)

    If ActiveDocument.Bookmarks.Exists("VSt01") Then
       If ActiveDocument.Bookmarks("VSt01").Range.Font.Hidden = False And ActiveDocument.FormFields("VSt01").Result = "" Then
       If readXML = False Then Exit Sub
       Anpassung_Import (False)
       End If
    End If
    
    If ActiveDocument.Bookmarks.Exists("VSt02") Then
       If ActiveDocument.Bookmarks("VSt02").Range.Font.Hidden = False And ActiveDocument.FormFields("VSt02").Result = "" Then
       If readXML = False Then Exit Sub
       Anpassung_Import (False)
       End If
    End If
    
    If ActiveDocument.Bookmarks.Exists("VSt03") Then
       If ActiveDocument.Bookmarks("VSt03").Range.Font.Hidden = False And ActiveDocument.FormFields("VSt03").Result = "" Then
       If readXML = False Then Exit Sub
       End If
    End If
    
    If ActiveDocument.Bookmarks.Exists("VSt04") Then
       If ActiveDocument.Bookmarks("VSt04").Range.Font.Hidden = False And ActiveDocument.FormFields("VSt04").Result = "" Then
       If readXML = False Then Exit Sub
       End If
    End If
    
    If ActiveDocument.Bookmarks.Exists("VSt_Kurzbez_Abs1") Then
       If ActiveDocument.Bookmarks("VSt_Kurzbez_Abs1").Range.Font.Hidden = False And ActiveDocument.FormFields("VSt_Kurzbez_Abs1").Result = "" Then
       If readXML = False Then Exit Sub
       End If
    End If
    
    If ActiveDocument.Bookmarks.Exists("VSt_Kurzbez_Abs2") Then
       If ActiveDocument.Bookmarks("VSt_Kurzbez_Abs2").Range.Font.Hidden = False And ActiveDocument.FormFields("VSt_Kurzbez_Abs2").Result = "" Then
       If readXML = False Then Exit Sub
       End If
    End If

    Call protectFile(True)
    
End Sub

Public Function readXML() As Boolean
    
    readXML = True
    
    xmlPath = checkLaufwerke
    If xmlPath = "" Or anzImporte = 0 Then Exit Function
    
    On Error Resume Next
    
    Set msxml = CreateObject("Microsoft.XMLDOM")
    msxml.Load (xmlPath)
    
    Set Root = msxml.DocumentElement
    Dim strName As String
    Dim strFieldName As String
    
    If Not Root Is Nothing Then
        Set ChildNodes = Root.ChildNodes()
        
        For Each v_child In ChildNodes
            If v_child.BaseName = "Vergabestelle" Then
                Set v_child_props = v_child.ChildNodes()
                For Each V_Child_Prop In v_child_props
                    ActiveDocument.FormFields(V_Child_Prop.BaseName).Result = V_Child_Prop.nodeTypedValue
                    
                    If anzImporte > 1 Then
                        Dim i As Integer
                        For i = 1 To anzImporte - 1
                            strFieldName = V_Child_Prop.BaseName & "_" & i
                            ActiveDocument.FormFields(strFieldName).Result = V_Child_Prop.nodeTypedValue
                        Next
                    End If
                Next
            End If
        Next
    Else
        MsgBox "Die Importdatei mit den Daten der Vergabestelle ist fehlerhaft." + Chr$(13) + "Die Daten k|fffd|nnen deshalb nicht eingelesen werden." + Chr$(13) + Chr$(13) + "Bitte setzen Sie sich |fffd|ber die Vergabestelle mit dem Anwendungssupport in Verbindung.", vbCritical, "Pr|fffd|fung der Importdatei"
        readXML = False
    End If
    
End Function

Sub Anpassung_Import(Optional bProtect As Boolean = True)

    Call protectFile(False)

    If ActiveDocument.Bookmarks.Exists("VSt01") And ActiveDocument.Bookmarks.Exists("VSt02") And _
       ActiveDocument.Bookmarks.Exists("TM_VSt01") And ActiveDocument.Bookmarks.Exists("TM_VSt02") Then
    
       If Not ActiveDocument.FormFields("VSt01").Result = "" And ActiveDocument.FormFields("VSt02").Result = "" Then
          ActiveDocument.Bookmarks("TM_VSt02").Range.Font.Hidden = True
       ElseIf Not ActiveDocument.FormFields("VSt02").Result = "" And ActiveDocument.FormFields("VSt01").Result = "" Then
          ActiveDocument.Bookmarks("TM_VSt01").Range.Font.Hidden = True
       End If
       
    End If
    
    If ActiveDocument.Bookmarks.Exists("VSt01_1") And ActiveDocument.Bookmarks.Exists("VSt02_1") And _
       ActiveDocument.Bookmarks.Exists("TM_VSt01_1") And ActiveDocument.Bookmarks.Exists("TM_VSt02_1") Then
    
       If Not ActiveDocument.FormFields("VSt01_1").Result = "" And ActiveDocument.FormFields("VSt02_1").Result = "" Then
          ActiveDocument.Bookmarks("TM_VSt02_1").Range.Font.Hidden = True
       ElseIf Not ActiveDocument.FormFields("VSt02_1").Result = "" And ActiveDocument.FormFields("VSt01_1").Result = "" Then
          ActiveDocument.Bookmarks("TM_VSt01_1").Range.Font.Hidden = True
       End If
       
    End If
    
    If bProtect = True Then Call protectFile(True)
     
End Sub

Private Function checkLaufwerke() As String

    Dim fso As FileSystemObject
    Dim lw As Drive
       
    checkLaufwerke = ""
    VSt_xml = False
    
    Set fso = CreateObject("Scripting.FileSystemObject")
    
    'zuerst auf H:\ nachsehen, wird am h|fffd|ufigsten vorkommen
    If fso.FileExists("H:\" & xmlFile) Then
        checkLaufwerke = "H:\" & xmlFile
        VSt_xml = True  'Vergabestellen.xml vorhanden

    Else
        For Each lw In fso.Drives 'alle Laufwerke
            If lw.DriveType = 1 Or lw.DriveType = 2 Or lw.DriveType = 3 Then    'Lauwerke: entfernbar/lokal/Netz
                If fso.FileExists(lw.Path & "\" & xmlFile) Then
                    checkLaufwerke = lw.Path & "\" & xmlFile
                    
                    VSt_xml = True  'Vergabestellen.xml vorhanden
                                        
                    Exit For
                End If
            End If
        Next
    End If
    
    Set fso = Nothing
    
End Function



INQUEST-PP=macro
