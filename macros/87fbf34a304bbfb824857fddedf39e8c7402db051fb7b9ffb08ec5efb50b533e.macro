Attribute VB_Name = "PlayMIDI"
' a lot of the midi functions were ripped from Excel MIDI:  https://sourceforge.net/projects/excel-midi/
' check it out for a more in-depth midi sequencer
' a lot of these variables dont do anything anymore

Option Explicit

Private Const MAXPNAMELEN               As Integer = 32
Private Const MMSYSERR_BASE             As Integer = 0
Private Const MMSYSERR_BADDEVICEID      As Integer = (MMSYSERR_BASE + 2)
Private Const MMSYSERR_INVALPARAM       As Integer = (MMSYSERR_BASE + 11)
Private Const MMSYSERR_NODRIVER         As Integer = (MMSYSERR_BASE + 6)
Private Const MMSYSERR_NOMEM            As Integer = (MMSYSERR_BASE + 7)
Private Const MMSYSERR_INVALHANDLE      As Integer = (MMSYSERR_BASE + 5)
Private Const MIDIERR_BASE              As Integer = 64
Private Const MIDIERR_STILLPLAYING      As Integer = (MIDIERR_BASE + 1)
Private Const MIDIERR_NOTREADY          As Integer = (MIDIERR_BASE + 3)
Private Const MIDIERR_BADOPENMODE       As Integer = (MIDIERR_BASE + 6)

Private Type MIDIOUTCAPS
   wMid             As Integer
   wPid             As Integer
   wTechnology      As Integer
   wVoices          As Integer
   wMessages        As Integer
   wChannelMask     As Integer
   vDriverVersion   As Long
   dwSupport        As Long
   szPname          As String * MAXPNAMELEN
End Type

#If Win64 Then
    Private Declare PtrSafe Function midiOutClose Lib "winmm.dll" (ByVal hMidiOut As LongPtr) As Long
    Private Declare PtrSafe Function midiOutOpen Lib "winmm.dll" (lphMidiOut As LongPtr, ByVal uDeviceID As LongPtr, ByVal dwCallback As LongPtr, ByVal dwInstance As LongPtr, ByVal dwFlags As LongPtr) As Long
    Private Declare PtrSafe Function midiOutShortMsg Lib "winmm.dll" (ByVal hMidiOut As LongPtr, ByVal dwMsg As LongPtr) As Long
    Declare PtrSafe Function timeGetTime Lib "winmm.dll" () As Long
#Else
    Private Declare Function midiOutClose Lib "winmm.dll" (ByVal hMidiOut As Long) As Long
    Private Declare Function midiOutOpen Lib "winmm.dll" (lphMidiOut As Long, ByVal uDeviceID As Long, ByVal dwCallback As Long, ByVal dwInstance As Long, ByVal dwFlags As Long) As Long
    Private Declare Function midiOutShortMsg Lib "winmm.dll" (ByVal hMidiOut As Long, ByVal dwMsg As Long) As Long
    Declare Function timeGetTime Lib "winmm.dll" () As Long
#End If

#If Win64 Then
    Private mlngCurDevice      As LongPtr
    Private mlngHmidi          As LongPtr
    Private mlngRc             As LongPtr
    Private mlngMidiMsg        As LongPtr
#Else
    Private mlngCurDevice      As Long
    Private mlngHmidi          As Long
    Private mlngRc             As Long
    Private mlngMidiMsg        As Long
#End If


Private mlngTickCount          As Long
Private mintChannel            As Integer
Private mintVelocity           As Integer
Private mintController         As Integer
Private mintMessageLength      As Long
Private mintMessageNumber      As Integer
Private mintPressure           As Integer
Private mintValue              As Integer
Private mintProgram            As Integer
Private mintLSB                As Integer
Private mintMSB                As Integer
Private mstrDeviceName         As String
Private mblnIsDeviceOpen       As Boolean

Private Const INT_DEFAULT_CHANNEL            As Integer = 0
Private Const INT_DEFAULT_VELOCITY           As Integer = 160
Private Const INT_DEFAULT_MESSAGE_LENGTH     As Integer = 1000
Private Const INT_DEFAULT_CUR_DEVICE         As Integer = 0     'Define Device HERE

Private Sub Class_Initialize()
    mintChannel = INT_DEFAULT_CHANNEL
    mlngCurDevice = INT_DEFAULT_CUR_DEVICE
    mintVelocity = INT_DEFAULT_VELOCITY
    mintMessageLength = INT_DEFAULT_MESSAGE_LENGTH
    mblnIsDeviceOpen = False
    'Call OpenDevice
End Sub

'Private Sub Class_Terminate()
'    Call CloseDevice
'End Sub

'Public Sub InitiateDevice(ByVal Device As Integer)
'
'    mintChannel = INT_DEFAULT_CHANNEL
'    mlngCurDevice = Device   'if I use Device 4 this will send 3
'    mintVelocity = INT_DEFAULT_VELOCITY
'    mintMessageLength = INT_DEFAULT_MESSAGE_LENGTH
'    Call OpenDevice
'
'End Sub

Sub midiNote(Program As Integer, dVel As Integer, dPitch As Integer, dChan As Integer)



Dim sWatch As New Stopwatch
'Dim Message          As New csMessage
'Dim Devices(15)        As New csMidi

'Message.MessageChannel = 0   ''channel
'Message.MessageNumber = 60  ''pitch
'Message.MessageProgram = 0   ''program

''inititate device stuff ' Devices(0).InitiateDevice 3
    mintChannel = INT_DEFAULT_CHANNEL
    mlngCurDevice = Worksheets("Drum Machine").Range("c24").Value - 1 ' 3   'if I use Device 4 this will send 3
    'mintVelocity = 120 'INT_DEFAULT_VELOCITY
    mintMessageLength = INT_DEFAULT_MESSAGE_LENGTH
   ' mintMessageNumber = 60 'default pitch
    
    
    
'    Call OpenDevice
    If Not mblnIsDeviceOpen Then
        mlngRc = midiOutClose(mlngHmidi)
        mlngRc = midiOutOpen(mlngHmidi, mlngCurDevice, 0, 0, 0)

        If (mlngRc <> 0) Then
            MsgBox "Couldn't open midi out " & mlngRc & ". Try another Device or Restart Excel. Make sure you have MIDI devices connected and running."
            stopOkay
            mblnIsDeviceOpen = False
        End If
        mblnIsDeviceOpen = True
    End If



   
    '' set program stuff 'Devices(0).SetProgram Message
        mintChannel = dChan ' Message.MessageChannel
        mintProgram = Program ' 0 ' Message.MessageProgram
'    Call ProgramChange
'    If mblnIsDeviceOpen = True Then
'        mlngMidiMsg = (mintProgram * 256) + &HC0 + mintChannel + (0 * 256) * 256
'        midiOutShortMsg mlngHmidi, mlngMidiMsg
'    End If

'    Debug.Print mlngCurDevice
    'play note stuff 'Devices(0).PlayNote Message
      '  mintChannel = 0 ' Message.MessageChannel
'    mintMessageNumber = 60 ' this is C5, the default sample pitch in FL  (ableton is C3 so that will need to change)
     mintMessageNumber = dPitch
'    mintVelocity = 120 ' Message.MessageVelocity
     mintVelocity = dVel
     
     'if no pitch or vel set
    If mintVelocity = 0 Then
     mintVelocity = 120
     End If
     
         If mintMessageNumber = 0 Then
     mintMessageNumber = 60
     End If
     
         If mintVelocity > 127 Then
     mintVelocity = 120
     End If
     
         If mintMessageNumber > 127 Then
     mintMessageNumber = 60
     End If




      'this message is for the channel + program, send seperately
        mlngMidiMsg = (mintProgram * 256) + &HC0 + mintChannel + (0 * 256) * 256
        midiOutShortMsg mlngHmidi, mlngMidiMsg
  '   Call StartNote
          mlngMidiMsg = &H90 + (mintMessageNumber * &H100) + (mintVelocity * &H10000) + mintChannel   ''mlngMidiMsg is a long combination integer in hexadecimal that contains all the note information (pitch,vel, channel) into one unqiue number, see maths up top
          midiOutShortMsg mlngHmidi, mlngMidiMsg

'While sWatch.Elapsed < sWatch.Elapsed + 4
'
'Wend


'
' '   Call StopNote
'     mlngMidiMsg = &H80 + (mintMessageNumber * &H100) + mintChannel 'without veloctity so vel = 0
'    midiOutShortMsg mlngHmidi, mlngMidiMsg
'
'
''    Call CloseDevice
'    If mblnIsDeviceOpen Then
'        mlngRc = midiOutClose(mlngHmidi)
'        mblnIsDeviceOpen = False
'    End If

 
 
 

End Sub


Sub stopItMIDI()

If Not Worksheets("Drum Machine").Range("C24").Value = 1 Then


 '   Call StopNote
     mlngMidiMsg = &H80 + (mintMessageNumber * &H100) + mintChannel 'without veloctity so vel = 0
    midiOutShortMsg mlngHmidi, mlngMidiMsg


'    Call CloseDevice
    If mblnIsDeviceOpen Then
       mlngRc = midiOutClose(mlngHmidi)
       mblnIsDeviceOpen = False
    End If

End If

End Sub

Sub stopItMIDIAgain()


 '   Call StopNote
     mlngMidiMsg = &H80 + (mintMessageNumber * &H100) + mintChannel 'without veloctity so vel = 0
    midiOutShortMsg mlngHmidi, mlngMidiMsg


'    Call CloseDevice
    If mblnIsDeviceOpen Then
       mlngRc = midiOutClose(mlngHmidi)
       mblnIsDeviceOpen = False
    End If


End Sub







Attribute VB_Name = "Seq"
Option Explicit

#If Win64 Then
Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
Private Declare PtrSafe Function GetQueueStatus Lib "user32" (ByVal qsFlags As Long) As Long
#Else
Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long)
Private Declare Function GetQueueStatus Lib "user32" (ByVal qsFlags As Long) As Long
#End If




Global stepsDone As Integer
Global loopsLeft As Integer
Dim offset As Integer
Dim counter As Integer

Dim nextTick As Long

Dim sleepTime As Variant
Dim swingL As Variant
Dim swingS As Variant
Dim nowsWatch As Variant
Dim slipOver As Variant

Dim currentDrum1 As String
Dim currentDrum2 As String
Dim currentDrum3 As String
Dim currentDrum4 As String
Dim cdc4 As Range
Dim progMode As Integer
Dim flChanCounter As Integer

Dim lastPattern As Integer


Dim kickNo As Integer
Dim snareNo As Integer
Dim CHHNo As Integer
Dim sWatch As New Stopwatch
Dim imPlayin As Boolean

Dim currentVel As Integer
Dim currentPitch As Integer
Dim patternList As Integer

Dim lastletter As Variant
Dim lastInteger As Variant
Dim topLeft As Variant
Dim bottomRight As Variant
Dim patternOpen As Variant
Dim SeqOpen As Integer
Dim activeSeqColumn As Variant

Dim pasteSeqLastR As Range
Dim pasteSeqLast As String
Dim pasteSeqFirstR As Range
Dim pasteSeqFirst As String
Dim seqLastR As Range
Dim seqLast As String
Dim SvrColumn As Integer
Dim seqOn As Integer


Sub seqPlay()



If imPlayin = False Then


seqOn = 1

patternList = 1
patternChange

startLoop
Else
stopOkay

End If

End Sub



Sub patternPlay()



If imPlayin = False Then


seqOn = 0
'patternList = 1
'patternChange
startLoop
Else
stopOkay

End If

End Sub

Sub startLoop()
Attribute startLoop.VB_ProcData.VB_Invoke_Func = " \n14"

Worksheets("Drum Machine").Range("h28:w28").Interior.ColorIndex = 34

sWatch.Restart
nowsWatch = sWatch.Elapsed
loopsLeft = Worksheets("Drum Machine").Range("C25").Value
slipOver = 0

'not using progMode anymore, 8 channels + 8 programs all time now
'progMode = Range("C26").Value

TestBPM 'put last


End Sub




Sub TestBPM()


imPlayin = True

sleepTime = 60 / Worksheets("Drum Machine").Range("C23").Value * 1000 / 4   '2 will need to change to 4 when i add more resolution
swingL = sleepTime + ((sleepTime / 5) * Worksheets("Drum Machine").Range("C26"))
swingS = sleepTime - ((sleepTime / 5) * Worksheets("Drum Machine").Range("C26"))

counter = 1
offset = 0
stepsDone = 0

Dim current16th As Integer
current16th = 1

Do



If current16th > 4 Then
current16th = 1
End If


stopItMIDI
startSeq2  ' causes about ~9 ms of delay buts its okay because the While will make up for that... thats some lucky genius actually

'Debug.Print "Delay: "; sWatch.Elapsed - nowsWatch '' even better time delay meter


        ''' in case lag goes over sleepTime, it will deduct from next wait to balance out
If sWatch.Elapsed - nowsWatch > sleepTime Then
slipOver = (sWatch.Elapsed - nowsWatch) - sleepTime
'Debug.Print "Slip Over Activated"
End If

             'swing

If current16th = 1 Or current16th = 3 Then
sleepTime = swingL
Else
sleepTime = swingS
End If


'this kills the note after being pressed
'While (sWatch.Elapsed - nowsWatch) - slipOver < (sleepTime / 2) * 1.5  'could change this, just never more than 2
'Wend
'stopItMIDI


While (sWatch.Elapsed - nowsWatch) - slipOver < sleepTime
'Waits here until next step

 

Wend

slipOver = 0

nowsWatch = sWatch.Elapsed

clearCosmetics

offset = offset + 1
'counter = counter + 1
stepsDone = stepsDone + 1
current16th = current16th + 1

Loop Until stepsDone >= 16
offset = 0
stepsDone = 0



Looper





End Sub


Sub clearCosmetics()


Worksheets("Drum Machine").Range("h28").offset(0, offset).Interior.ColorIndex = 34   ' this creates occasional quirks of 1ms - not the end of the world but still

             'clears name boxes                            ''causes a bit over 10 ms delay
'Range("g34").Interior.Color = RGB(255, 242, 204) ' default name box color
'Range("g33").Interior.Color = RGB(255, 242, 204) ' default name box color
'Range("g32").Interior.Color = RGB(255, 242, 204) ' default name box color
'Range("g31").Interior.Color = RGB(255, 242, 204) ' default name box color



End Sub


Public Sub stopOkay()

loopsLeft = 0
stepsDone = 16

'counter = 0
stopItMIDIAgain
imPlayin = False



End Sub




Sub Looper()



If loopsLeft > 1 Then

loopsLeft = loopsLeft - 1

If seqOn = 1 Then
patternList = patternList + 1
patternChange
Else
Worksheets("Drum Machine").Range("B57").offset(0, patternList - 1).Interior.Color = RGB(255, 242, 204)
'patternList = patternList - 1
End If


TestBPM
offset = 0

End If

imPlayin = False
               'clear x's
Worksheets("Drum Machine").Range("f31").Value = ""
Worksheets("Drum Machine").Range("f34").Value = ""
Worksheets("Drum Machine").Range("f37").Value = ""
Worksheets("Drum Machine").Range("f40").Value = ""
Worksheets("Drum Machine").Range("f43").Value = ""
Worksheets("Drum Machine").Range("f46").Value = ""
Worksheets("Drum Machine").Range("f49").Value = ""
Worksheets("Drum Machine").Range("f52").Value = ""


sWatch.Pause
'Range("B57").offset(0, patternList).Interior.ColorIndex = 0
Worksheets("Drum Machine").Range("B57").offset(0, patternList).Interior.Color = RGB(255, 242, 204)
stopItMIDIAgain

End Sub



Sub patternChange()


'Debug.Print "Pattern List:" & patternList
Worksheets("Drum Machine").Range("B57").offset(0, patternList).Replace 0, "", xlWhole

If Worksheets("Drum Machine").Range("B57").offset(0, patternList).Value = "patternList" Then

Else

If Worksheets("Drum Machine").Range("B57").offset(0, patternList).Value = "loop" Or Worksheets("Drum Machine").Range("B57").offset(0, patternList).Value = "l" Then
Worksheets("Drum Machine").Range("B57").offset(0, patternList - 1).Interior.Color = RGB(255, 242, 204)
patternList = 1
End If

If Not Range("B57").offset(0, patternList).Value = "" Then
Worksheets("Drum Machine").Range("B57").offset(0, patternList).Interior.ColorIndex = 34
Worksheets("Drum Machine").Range("B57").offset(0, patternList - 1).Interior.Color = RGB(255, 242, 204)

patternOpen = Worksheets("Drum Machine").Range("B57").offset(0, patternList).Value


Else
'patternList = patternList - 1


End If



If Worksheets("Drum Machine").Range("B57").offset(0, patternList).Value = "" Then


patternList = patternList - 1 ' 0


Else
saveArray

topLeft = (patternOpen * 24) - 23
bottomRight = patternOpen * 24

Dim pattern1 As Variant
pattern1 = Worksheets("PatternSaver").Range("B" & topLeft & ":S" & bottomRight).Value
Worksheets("Drum Machine").Range("F31:W54").Value = pattern1
'Worksheets("PatternSaver").Range("A4").Value = Worksheets("Drum Machine").Range("D52").Value

Worksheets("PatternSaver").Range("A4").Value = Worksheets("Drum Machine").Range("B57").offset(0, patternList).Value
End If



End If



   Select Case Worksheets("PatternSaver").Range("A4").Value
      Case 1
    '     Debug.Print "case is" & 1
         Worksheets("Drum Machine").Range("D31:D33").offset(0, 0).Interior.ColorIndex = 40
      Case 2
         Worksheets("Drum Machine").Range("D34:D36").offset(0, 0).Interior.ColorIndex = 40
      Case 3
         Worksheets("Drum Machine").Range("D37:D39").offset(0, 0).Interior.ColorIndex = 40
      Case 4
         Worksheets("Drum Machine").Range("D40:D42").offset(0, 0).Interior.ColorIndex = 40
      Case 5
         Worksheets("Drum Machine").Range("D43:D45").offset(0, 0).Interior.ColorIndex = 40
      Case 6
         Worksheets("Drum Machine").Range("D46:D48").offset(0, 0).Interior.ColorIndex = 40
      Case 7
         Worksheets("Drum Machine").Range("D49:D51").offset(0, 0).Interior.ColorIndex = 40
      Case Else
  '       Debug.Print "case says" & Worksheets("PatternSaver").Range("A4").Value
        Worksheets("Drum Machine").Range("D52:D54").offset(0, 0).Interior.ColorIndex = 40
        Worksheets("Drum Machine").Range("D52").Value = Worksheets("PatternSaver").Range("A4").Value
   End Select



End Sub

Sub oopsie()

'Worksheets("PatternSaver").Range("A4").Value = 1
array1
loopsLeft = 0
stepsDone = 16
'sWatch.Pause
imPlayin = False
stopItMIDI  'this calls the macro in playMidi



End Sub



Sub startSeq2()

 DoEvents ' allows u to still click on sheet when running


Dim cdc1 As Range
Dim cdc2 As Range
Dim cdc3 As Range
Dim cdc4 As Range
Dim cdc5 As Range
Dim cdc6 As Range
Dim cdc7 As Range
Dim cdc8 As Range


Dim currentDrum1 As String
Dim currentDrum2 As String
Dim currentDrum3 As String
Dim currentDrum4 As String
Dim currentDrum5 As String
Dim currentDrum6 As String
Dim currentDrum7 As String
Dim currentDrum8 As String
                                
' nextTick = timeGetTime

    
'    Range("f28").Value = sngWaitEnd - Timer

Worksheets("Drum Machine").Range("h28").offset(0, offset).Interior.ColorIndex = 41 ''this is the current step display bar
 ' Range("h28").offset(0, offset).Borders.LineStyle = xlDouble  ''made them all borded by accident but i liked it


''writing values (like the "x") to cells is what "grey locks" the code from running, changed to color instead



              ' looks for X on currentDrum1 cells
currentDrum1 = CStr(Worksheets("Drum Machine").Range("h28").offset(3, offset))
'Worksheets("Drum Machine").Range("f31").Value = currentDrum1 ' shows X when kick  playing
'If currentDrum1 = "x" Then
''Worksheets("Drum Machine").Range("F31").Interior.Color = RGB(252, 228, 214)
'Worksheets("Drum Machine").Range("F31").Interior.ColorIndex = 40
'Else
'Worksheets("Drum Machine").Range("F31").Interior.Color = RGB(248, 203, 173)
'End If
Set cdc1 = Worksheets("Drum Machine").Range("h28").offset(3, offset)

               ' looks for X on currentDrum2 cells
currentDrum2 = CStr(Worksheets("Drum Machine").Range("h28").offset(6, offset))
'Worksheets("Drum Machine").Range("f34").Value = currentDrum2 ' shows X when snare playing
'If currentDrum2 = "x" Then
'Worksheets("Drum Machine").Range("F34").Interior.ColorIndex = 40
'Else
'Worksheets("Drum Machine").Range("F34").Interior.Color = RGB(248, 203, 173)
'End If
Set cdc2 = Worksheets("Drum Machine").Range("h28").offset(6, offset)

                 ' looks for X on currentDrum3
currentDrum3 = CStr(Worksheets("Drum Machine").Range("h28").offset(9, offset))
'Worksheets("Drum Machine").Range("f37").Value = currentDrum3 ' shows X when snare playing
'If currentDrum3 = "x" Then
'Worksheets("Drum Machine").Range("F37").Interior.ColorIndex = 40
'Else
'Worksheets("Drum Machine").Range("F37").Interior.Color = RGB(248, 203, 173)
'End If
Set cdc3 = Worksheets("Drum Machine").Range("h28").offset(9, offset)

                 ' looks for X on currentDrum4
currentDrum4 = CStr(Worksheets("Drum Machine").Range("h28").offset(12, offset))
'Worksheets("Drum Machine").Range("f40").Value = currentDrum4 ' shows X when snare playing
'If currentDrum4 = "x" Then
'Worksheets("Drum Machine").Range("F40").Interior.ColorIndex = 40
'Else
'Worksheets("Drum Machine").Range("F40").Interior.Color = RGB(248, 203, 173)
'End If
Set cdc4 = Worksheets("Drum Machine").Range("h28").offset(12, offset)



currentDrum5 = CStr(Worksheets("Drum Machine").Range("h28").offset(15, offset))
'Worksheets("Drum Machine").Range("F43").Value = currentDrum5 ' shows X when kick  playing
'If currentDrum5 = "x" Then
'Worksheets("Drum Machine").Range("F43").Interior.ColorIndex = 40
'Else
'Worksheets("Drum Machine").Range("F43").Interior.Color = RGB(248, 203, 173)
'End If
Set cdc5 = Worksheets("Drum Machine").Range("h28").offset(15, offset)

currentDrum6 = CStr(Worksheets("Drum Machine").Range("h28").offset(18, offset))
'Worksheets("Drum Machine").Range("F46").Value = currentDrum6 ' shows X when snare playing
'If currentDrum6 = "x" Then
'Worksheets("Drum Machine").Range("F46").Interior.ColorIndex = 40
'Else
'Worksheets("Drum Machine").Range("F46").Interior.Color = RGB(248, 203, 173)
'End If
Set cdc6 = Worksheets("Drum Machine").Range("h28").offset(18, offset)

currentDrum7 = CStr(Worksheets("Drum Machine").Range("h28").offset(21, offset))
'Worksheets("Drum Machine").Range("F49").Value = currentDrum7 ' shows X when snare playing
'If currentDrum7 = "x" Then
'Worksheets("Drum Machine").Range("F49").Interior.ColorIndex = 40
'Else
'Worksheets("Drum Machine").Range("F49").Interior.Color = RGB(248, 203, 173)
'End If
Set cdc7 = Worksheets("Drum Machine").Range("h28").offset(21, offset)

currentDrum8 = CStr(Worksheets("Drum Machine").Range("h28").offset(24, offset))
'Worksheets("Drum Machine").Range("F52").Value = currentDrum8 ' shows X when snare playing
'If currentDrum8 = "x" Then
'Worksheets("Drum Machine").Range("F52").Interior.ColorIndex = 40
'Else
'Worksheets("Drum Machine").Range("F52").Interior.Color = RGB(248, 203, 173)
'End If
Set cdc8 = Worksheets("Drum Machine").Range("h28").offset(24, offset)




If currentDrum1 = "x" Then
'Range("g34").Interior.Color = RGB(252, 208, 214) ' light up name boxes
'Kick (kickNo)
'kickNo = kickNo + 1
' TestPlayWavFile
' mciPlayKick

                      'gets Vel
If IsEmpty(Worksheets("Drum Machine").Range("h28").offset(4, offset)) = False Then
currentVel = Worksheets("Drum Machine").Range("h28").offset(4, offset)
Else
currentVel = Worksheets("Drum Machine").Range("f32").Value
End If

                    'gets Pitch
If IsEmpty(Range("h28").offset(5, offset)) = False Then
currentPitch = Worksheets("Drum Machine").Range("h28").offset(5, offset)
Else
currentPitch = Worksheets("Drum Machine").Range("f33").Value
End If

If Worksheets("Drum Machine").Range("C24").Value = 1 Then
midiNote 0, currentVel, currentPitch, 9
Else
'If progMode > 0 Then
'midiNote 0, currentVel, currentPitch, 0
'Else
'midiNote 0, currentVel, currentPitch, 0
'End If
midiNote 0, currentVel, currentPitch, 0
End If

End If

If currentDrum2 = "x" Then
'Snare (snareNo)
'snareNo = snareNo + 1
' TestSnare
'mciPlaySnare
'Range("g33").Interior.Color = RGB(252, 208, 214) ' light up name boxes

                      'gets Vel
If IsEmpty(Worksheets("Drum Machine").Range("h28").offset(7, offset)) = False Then
currentVel = Worksheets("Drum Machine").Range("h28").offset(7, offset)
Else
currentVel = Worksheets("Drum Machine").Range("f35").Value
End If

                    'gets Pitch
If IsEmpty(Worksheets("Drum Machine").Range("h28").offset(8, offset)) = False Then
currentPitch = Worksheets("Drum Machine").Range("h28").offset(8, offset)
Else
currentPitch = Worksheets("Drum Machine").Range("f36").Value
End If

If Worksheets("Drum Machine").Range("C24").Value = 1 Then
midiNote 0, currentVel, currentPitch, 9
Else
'If progMode > 0 Then
'midiNote 1, currentVel, currentPitch, 0
'Else
'midiNote 0, currentVel, currentPitch, 1
'End If
midiNote 1, currentVel, currentPitch, 1
End If
End If


If currentDrum3 = "x" Then

                      'gets Vel
If IsEmpty(Worksheets("Drum Machine").Range("h28").offset(10, offset)) = False Then
currentVel = Worksheets("Drum Machine").Range("h28").offset(10, offset)
Else
currentVel = Worksheets("Drum Machine").Range("f38").Value
End If

                    'gets Pitch
If IsEmpty(Worksheets("Drum Machine").Range("h28").offset(11, offset)) = False Then
currentPitch = Worksheets("Drum Machine").Range("h28").offset(11, offset)
Else
currentPitch = Worksheets("Drum Machine").Range("f39").Value
End If

If Worksheets("Drum Machine").Range("C24").Value = 1 Then
midiNote 0, currentVel, currentPitch, 9
Else
'If progMode > 0 Then
'midiNote 2, currentVel, currentPitch, 0
'Else
'midiNote 0, currentVel, currentPitch, 2
'End If
midiNote 2, currentVel, currentPitch, 2
End If

End If


If currentDrum4 = "x" Then
'lastLetter = Right("currentDrum4", 1)
'lastInteger = ConvertString(lastLetter)
'cdc4.offset(14, offset).Color = 0

                      'gets Vel
If IsEmpty(cdc4.offset(1, 0)) = False Then
currentVel = cdc4.offset(1, 0)
Else
currentVel = Worksheets("Drum Machine").Range("f41").Value
End If
'Debug.Print "Offset:" & offset
                    'gets Pitch
'Debug.Print cdc4.offset(2, 0).Value
If IsEmpty(cdc4.offset(2, 0)) = False Then
currentPitch = cdc4.offset(2, 0)
Else
currentPitch = Worksheets("Drum Machine").Range("f42").Value
End If



If Worksheets("Drum Machine").Range("C24").Value = 1 Then
midiNote 0, currentVel, currentPitch, 9
Else
'If progMode > 0 Then
'midiNote 3, currentVel, currentPitch, 0
'Else
'midiNote 0, currentVel, currentPitch, 3
'End If
midiNote 3, currentVel, currentPitch, 3
End If

End If

If cdc5.Value = "x" Then
                      'gets Vel
If IsEmpty(cdc5.offset(1, 0)) = False Then
currentVel = cdc5.offset(1, 0)
Else
currentVel = Worksheets("Drum Machine").Range("f44").Value
End If
                    'gets Pitch
If IsEmpty(cdc5.offset(2, 0)) = False Then
currentPitch = cdc5.offset(2, 0)
Else
currentPitch = Worksheets("Drum Machine").Range("f45").Value
End If

If Worksheets("Drum Machine").Range("C24").Value = 1 Then
midiNote 0, currentVel, currentPitch, 9
Else
'If progMode > 0 Then
'midiNote 4, currentVel, currentPitch, 0
'Else
'midiNote 0, currentVel, currentPitch, 4
'End If
midiNote 4, currentVel, currentPitch, 4
End If
End If


If cdc6.Value = "x" Then
'cdc6.offset(2, 0).Value = "test"
                      'gets Vel
If IsEmpty(cdc6.offset(1, 0)) = False Then
currentVel = cdc6.offset(1, 0)
Else
currentVel = Worksheets("Drum Machine").Range("f47").Value
End If
                    'gets Pitch
If IsEmpty(cdc6.offset(2, 0)) = False Then
currentPitch = cdc6.offset(2, 0)
Else
currentPitch = Worksheets("Drum Machine").Range("f48").Value
End If


If Worksheets("Drum Machine").Range("C24").Value = 1 Then
midiNote 0, currentVel, currentPitch, 9
Else
'If progMode > 0 Then
'midiNote 5, currentVel, currentPitch, 0
'Else
'midiNote 0, currentVel, currentPitch, 5
'End If
midiNote 5, currentVel, currentPitch, 5
End If

End If


If cdc7.Value = "x" Then
                      'gets Vel
If IsEmpty(cdc7.offset(1, 0)) = False Then
currentVel = cdc7.offset(1, 0)
Else
currentVel = Worksheets("Drum Machine").Range("f50").Value
End If
                    'gets Pitch
If IsEmpty(cdc7.offset(2, 0)) = False Then
currentPitch = cdc7.offset(2, 0)
Else
currentPitch = Worksheets("Drum Machine").Range("f51").Value
End If

If Worksheets("Drum Machine").Range("C24").Value = 1 Then
midiNote 0, currentVel, currentPitch, 9
Else
'If progMode > 0 Then
'midiNote 6, currentVel, currentPitch, 0
'Else
'midiNote 0, currentVel, currentPitch, 6
'End If
midiNote 6, currentVel, currentPitch, 6
End If

End If

If cdc8.Value = "x" Then
                      'gets Vel
If IsEmpty(cdc8.offset(25, 0)) = False Then
currentVel = cdc5.offset(25, 0)
Else
currentVel = Worksheets("Drum Machine").Range("f53").Value
End If
                    'gets Pitch
If IsEmpty(cdc8.offset(26, 0)) = False Then
currentPitch = cdc5.offset(26, 0)
Else
currentPitch = Worksheets("Drum Machine").Range("f54").Value
End If

If Worksheets("Drum Machine").Range("C24").Value = 1 Then
midiNote 0, currentVel, currentPitch, 9
Else
'If progMode > 0 Then
'midiNote 7, currentVel, currentPitch, 0
'Else
'midiNote 0, currentVel, currentPitch, 7
'End If
midiNote 7, currentVel, currentPitch, 7
End If

End If




'  Sleep sleepTime  '' this needs to change depending on bpm  (1000 is 1 sec)   ''sleep is BAD, even application.wait stays on time but sleep doesnt, try timeGetTime instead

'DoEvents_Fast   ''downloaded from internet, supposed to be way better, its better but not perfect  ' didnt use because would make program freeze after 3 loops



End Sub







Sub clearPattern()
Worksheets("Drum Machine").Range("H31:W54").Value = ""

End Sub




Public Sub saveArray()

lastPattern = Worksheets("PatternSaver").Range("A4").Value

topLeft = (lastPattern * 24) - 23
bottomRight = lastPattern * 24

Worksheets("PatternSaver").Range("B" & topLeft & ":S" & bottomRight).Value = Worksheets("Drum Machine").Range("F31:W54").Value
Worksheets("Drum Machine").Range("D31:D54").Interior.ColorIndex = 0  ''removes all colour from selected patterns

End Sub


Public Sub array1()
lastletter = Right("array1", 1)
lastInteger = ConvertString(lastletter)

'Dim topLeft As Range
'Set topLeft = Cells(1, 2)
'
'Dim bottomRight As Range
'Set bottomRight = Cells(12, 17)

saveArray

topLeft = lastInteger
bottomRight = lastInteger * 24



Dim pattern1 As Variant
pattern1 = Worksheets("PatternSaver").Range("B" & topLeft & ":S" & bottomRight).Value
'pattern1 = Worksheets("PatternSaver").Range(topLeft, bottomRight).Value
Worksheets("Drum Machine").Range("F31:W54").Value = pattern1
Worksheets("PatternSaver").Range("A4").Value = lastInteger  ''stores in pattern saver for next saving

Worksheets("Drum Machine").Range("D31:D33").offset(0, 0).Interior.ColorIndex = 40


End Sub


Public Sub array2()


lastletter = Right("array2", 1)
lastInteger = ConvertString(lastletter)

saveArray

topLeft = (lastInteger * 24) - 23
bottomRight = lastInteger * 24

Dim pattern1 As Variant
pattern1 = Worksheets("PatternSaver").Range("B" & topLeft & ":S" & bottomRight).Value
Worksheets("Drum Machine").Range("F31:W54").Value = pattern1

Worksheets("PatternSaver").Range("A4").Value = lastInteger
Range("D34:D36").offset(0, 0).Interior.ColorIndex = 40


End Sub

Public Sub array3()
lastInteger = 3

saveArray

topLeft = (lastInteger * 24) - 23
bottomRight = lastInteger * 24

'saveArray

Dim pattern1 As Variant
pattern1 = Worksheets("PatternSaver").Range("B" & topLeft & ":S" & bottomRight).Value
Worksheets("Drum Machine").Range("F31:W54").Value = pattern1
Worksheets("PatternSaver").Range("A4").Value = lastInteger
Range("D37:D39").offset(0, 0).Interior.ColorIndex = 40

End Sub


Public Sub array4()
lastInteger = 4
saveArray

topLeft = (lastInteger * 24) - 23
bottomRight = lastInteger * 24

Dim pattern1 As Variant
pattern1 = Worksheets("PatternSaver").Range("B" & topLeft & ":S" & bottomRight).Value
Worksheets("Drum Machine").Range("F31:W54").Value = pattern1
Worksheets("PatternSaver").Range("A4").Value = lastInteger
Range("D40:D42").offset(0, 0).Interior.ColorIndex = 40

End Sub

Public Sub array5()
lastInteger = 5
saveArray

topLeft = (lastInteger * 24) - 23
bottomRight = lastInteger * 24

Dim pattern1 As Variant
pattern1 = Worksheets("PatternSaver").Range("B" & topLeft & ":S" & bottomRight).Value
Worksheets("Drum Machine").Range("F31:W54").Value = pattern1
Worksheets("PatternSaver").Range("A4").Value = lastInteger
Range("D43:D45").offset(0, 0).Interior.ColorIndex = 40
End Sub

Public Sub array6()
lastInteger = 6
saveArray

topLeft = (lastInteger * 24) - 23
bottomRight = lastInteger * 24

Dim pattern1 As Variant
pattern1 = Worksheets("PatternSaver").Range("B" & topLeft & ":S" & bottomRight).Value
Worksheets("Drum Machine").Range("F31:W54").Value = pattern1
Worksheets("PatternSaver").Range("A4").Value = lastInteger
Range("D46:D48").offset(0, 0).Interior.ColorIndex = 40
End Sub

Public Sub array7()
lastInteger = 7
saveArray

topLeft = (lastInteger * 24) - 23
bottomRight = lastInteger * 24

Dim pattern1 As Variant
pattern1 = Worksheets("PatternSaver").Range("B" & topLeft & ":S" & bottomRight).Value
Worksheets("Drum Machine").Range("F31:W54").Value = pattern1
Worksheets("PatternSaver").Range("A4").Value = lastInteger
Range("D49:D51").offset(0, 0).Interior.ColorIndex = 40
End Sub

Public Sub openPattern()

If Range("D52").Value < 1 Then

Else

lastInteger = Range("D52").Value
saveArray

topLeft = (lastInteger * 24) - 23
bottomRight = lastInteger * 24

Dim pattern1 As Variant
pattern1 = Worksheets("PatternSaver").Range("B" & topLeft & ":S" & bottomRight).Value
Worksheets("Drum Machine").Range("F31:W54").Value = pattern1
Worksheets("PatternSaver").Range("A4").Value = Worksheets("Drum Machine").Range("D52").Value
Range("D52:D54").offset(0, 0).Interior.ColorIndex = 40
End If

End Sub


'copied off internet   : https://excel.officetuts.net/en/vba/convert-string-to-integer
Function ConvertString(myString)
    Dim finalNumber As Variant
    If IsNumeric(myString) Then
        If IsEmpty(myString) Then
            finalNumber = "-"
        Else
            finalNumber = CInt(myString)
        End If
    Else
        finalNumber = "-"
    End If
    
    ConvertString = finalNumber
End Function



Sub copyPattern()
Worksheets("PatternSaver").Range("U1:AL24").Value = Worksheets("Drum Machine").Range("F31:W54").Value
Range("Z31").Interior.ColorIndex = 40
Range("Z34").Interior.ColorIndex = 0


End Sub

Sub pastePattern()
Worksheets("Drum Machine").Range("F31:W54").Value = Worksheets("PatternSaver").Range("U1:AL24").Value
Range("Z34").Interior.ColorIndex = 40
Range("Z31").Interior.ColorIndex = 0

End Sub


Sub co2String()

'Debug.Print Range("AM2").Row & ", " & Range("AM2").Column

End Sub


Sub saveSeq()
Dim delSvrR As Range
Dim delSvr As String

SeqOpen = Worksheets("PatternSaver").Range("T4").Value

Set seqLastR = Cells(57, 2 + activeSeqColumn)
seqLast = seqLastR.Address(RowAbsolute:=False, ColumnAbsolute:=False)

Set pasteSeqFirstR = Cells(2, SeqOpen + 38)
pasteSeqFirst = pasteSeqFirstR.Address(RowAbsolute:=False, ColumnAbsolute:=False)

Set pasteSeqLastR = Cells(activeSeqColumn + 1, SeqOpen + 38)
pasteSeqLast = pasteSeqLastR.Address(RowAbsolute:=False, ColumnAbsolute:=False)

Set delSvrR = Cells(SvrColumn + 1, SeqOpen + 38)
delSvr = delSvrR.Address(RowAbsolute:=False, ColumnAbsolute:=False)

Worksheets("PatternSaver").Range(pasteSeqFirst, delSvr).Value = ""

'MsgBox testRange.Address(RowAbsolute:=False, ColumnAbsolute:=False)   'yesss game changing

'Range("J61:J" & 9 + activeSeqColumn).Value = Range("B57:B" & activeSeqColumn + 2).Value

Worksheets("PatternSaver").Range(pasteSeqFirst, pasteSeqLast).Value = Application.WorksheetFunction.Transpose(Worksheets("Drum Machine").Range("C57:" & seqLast).Value)
Worksheets("PatternSaver").Range(pasteSeqFirst, pasteSeqLast).Replace "#N/A", "", xlWhole
' Range(Cells(60, 14), Cells(70, 17)).Value ' this actually works BUT only when u have it on the active worksheet it needs to go to, so not from "Drum Machine"

End Sub

Sub testquik()
'Debug.Print pasteSeqLast

End Sub

Sub openSeq1()
Dim delSeqR As Range
Dim delSeq As String

SeqOpen = Worksheets("PatternSaver").Range("T4").Value
'SeqOpen = SeqOpen + 2
'Debug.Print SeqOpen
'Set delSeqR = C
Worksheets("Drum Machine").Cells(60, SeqOpen + 2).Interior.ColorIndex = 0

countSeqColumn
saveSeq
SeqOpen = 1
countSvrColumn

Worksheets("PatternSaver").Range("T4").Value = SeqOpen


Set pasteSeqFirstR = Cells(2, SeqOpen + 38)
pasteSeqFirst = pasteSeqFirstR.Address(RowAbsolute:=False, ColumnAbsolute:=False)

Set pasteSeqLastR = Cells(SvrColumn + 1, SeqOpen + 38)
pasteSeqLast = pasteSeqLastR.Address(RowAbsolute:=False, ColumnAbsolute:=False)
'activeSeqColumn
Set seqLastR = Cells(57, 2 + SvrColumn)
seqLast = seqLastR.Address(RowAbsolute:=False, ColumnAbsolute:=False)

Set delSeqR = Cells(57, activeSeqColumn + 3)
delSeq = delSeqR.Address(RowAbsolute:=False, ColumnAbsolute:=False)
Worksheets("Drum Machine").Range("C57", delSeq).Value = ""

'Debug.Print "seqLast is" & seqLast
Worksheets("Drum Machine").Range("C57:" & seqLast).Value = Application.WorksheetFunction.Transpose(Worksheets("PatternSaver").Range(pasteSeqFirst, pasteSeqLast).Value)
Worksheets("Drum Machine").Range("C57:" & seqLast).Replace "#N/A", "", xlWhole
Worksheets("Drum Machine").Range("C57:" & seqLast).Replace 0, "", xlWhole

'If Worksheets("Drum Machine").Range("C57:" & seqLast).Value = "#N/A" Then
'Worksheets("Drum Machine").Range("C57:" & seqLast).Value = ""
'End If

Range("C60").Interior.ColorIndex = 40



End Sub

Sub openSeq2()
Dim delSeqR As Range
Dim delSeq As String

SeqOpen = Worksheets("PatternSaver").Range("T4").Value
Worksheets("Drum Machine").Cells(60, SeqOpen + 2).Interior.ColorIndex = 0


countSeqColumn
saveSeq
SeqOpen = 2
countSvrColumn


Worksheets("PatternSaver").Range("T4").Value = SeqOpen


Set pasteSeqFirstR = Cells(2, SeqOpen + 38)
pasteSeqFirst = pasteSeqFirstR.Address(RowAbsolute:=False, ColumnAbsolute:=False)

Set pasteSeqLastR = Cells(SvrColumn + 1, SeqOpen + 38)
pasteSeqLast = pasteSeqLastR.Address(RowAbsolute:=False, ColumnAbsolute:=False)

Set seqLastR = Cells(57, 2 + SvrColumn)
seqLast = seqLastR.Address(RowAbsolute:=False, ColumnAbsolute:=False)

Set delSeqR = Cells(57, activeSeqColumn + 3)
delSeq = delSeqR.Address(RowAbsolute:=False, ColumnAbsolute:=False)
Worksheets("Drum Machine").Range("C57", delSeq).Value = ""


Worksheets("Drum Machine").Range("C57:" & seqLast).Value = Application.WorksheetFunction.Transpose(Worksheets("PatternSaver").Range(pasteSeqFirst, pasteSeqLast).Value)
Worksheets("Drum Machine").Range("C57:" & seqLast).Replace "#N/A", "", xlWhole
Worksheets("Drum Machine").Range("C57:" & seqLast).Replace 0, "", xlWhole


Range("D60").Interior.ColorIndex = 40

End Sub

Sub openSeq3()
Dim delSeqR As Range
Dim delSeq As String

SeqOpen = Worksheets("PatternSaver").Range("T4").Value
Worksheets("Drum Machine").Cells(60, SeqOpen + 2).Interior.ColorIndex = 0

countSeqColumn
saveSeq
SeqOpen = 3
countSvrColumn


Worksheets("PatternSaver").Range("T4").Value = SeqOpen


Set pasteSeqFirstR = Cells(2, SeqOpen + 38)
pasteSeqFirst = pasteSeqFirstR.Address(RowAbsolute:=False, ColumnAbsolute:=False)

Set pasteSeqLastR = Cells(SvrColumn + 1, SeqOpen + 38)
pasteSeqLast = pasteSeqLastR.Address(RowAbsolute:=False, ColumnAbsolute:=False)

Set seqLastR = Cells(57, 2 + SvrColumn)
seqLast = seqLastR.Address(RowAbsolute:=False, ColumnAbsolute:=False)

Set delSeqR = Cells(57, activeSeqColumn + 3)
delSeq = delSeqR.Address(RowAbsolute:=False, ColumnAbsolute:=False)
Worksheets("Drum Machine").Range("C57", delSeq).Value = ""


Worksheets("Drum Machine").Range("C57:" & seqLast).Value = Application.WorksheetFunction.Transpose(Worksheets("PatternSaver").Range(pasteSeqFirst, pasteSeqLast).Value)
Worksheets("Drum Machine").Range("C57:" & seqLast).Replace "#N/A", "", xlWhole
Worksheets("Drum Machine").Range("C57:" & seqLast).Replace 0, "", xlWhole



Worksheets("Drum Machine").Range("E60").Interior.ColorIndex = 40


End Sub

Sub openSeq4()
Dim delSeqR As Range
Dim delSeq As String

SeqOpen = Worksheets("PatternSaver").Range("T4").Value
Worksheets("Drum Machine").Cells(60, SeqOpen + 2).Interior.ColorIndex = 0

countSeqColumn
saveSeq
SeqOpen = 4
countSvrColumn


Worksheets("PatternSaver").Range("T4").Value = SeqOpen


Set pasteSeqFirstR = Cells(2, SeqOpen + 38)
pasteSeqFirst = pasteSeqFirstR.Address(RowAbsolute:=False, ColumnAbsolute:=False)

Set pasteSeqLastR = Cells(SvrColumn + 1, SeqOpen + 38)
pasteSeqLast = pasteSeqLastR.Address(RowAbsolute:=False, ColumnAbsolute:=False)

Set seqLastR = Cells(57, 2 + SvrColumn)
seqLast = seqLastR.Address(RowAbsolute:=False, ColumnAbsolute:=False)

Set delSeqR = Cells(57, activeSeqColumn + 3)
delSeq = delSeqR.Address(RowAbsolute:=False, ColumnAbsolute:=False)
Worksheets("Drum Machine").Range("C57", delSeq).Value = ""


Worksheets("Drum Machine").Range("C57:" & seqLast).Value = Application.WorksheetFunction.Transpose(Worksheets("PatternSaver").Range(pasteSeqFirst, pasteSeqLast).Value)
Worksheets("Drum Machine").Range("C57:" & seqLast).Replace "#N/A", "", xlWhole
Worksheets("Drum Machine").Range("C57:" & seqLast).Replace 0, "", xlWhole


Worksheets("Drum Machine").Range("F60").Interior.ColorIndex = 40

End Sub


Sub openSeqX()
Dim delSeqR As Range
Dim delSeq As String

SeqOpen = Worksheets("PatternSaver").Range("T4").Value
Worksheets("Drum Machine").Cells(60, SeqOpen + 2).Interior.ColorIndex = 0

countSeqColumn
saveSeq
SeqOpen = Range("H61").Value
countSvrColumn


Worksheets("PatternSaver").Range("T4").Value = SeqOpen


Set pasteSeqFirstR = Cells(2, SeqOpen + 38)
pasteSeqFirst = pasteSeqFirstR.Address(RowAbsolute:=False, ColumnAbsolute:=False)

Set pasteSeqLastR = Cells(SvrColumn + 1, SeqOpen + 38)
pasteSeqLast = pasteSeqLastR.Address(RowAbsolute:=False, ColumnAbsolute:=False)

Set seqLastR = Cells(57, 2 + SvrColumn)
seqLast = seqLastR.Address(RowAbsolute:=False, ColumnAbsolute:=False)

Set delSeqR = Cells(57, activeSeqColumn + 3)
delSeq = delSeqR.Address(RowAbsolute:=False, ColumnAbsolute:=False)
Worksheets("Drum Machine").Range("C57", delSeq).Value = ""


Worksheets("Drum Machine").Range("C57:" & seqLast).Value = Application.WorksheetFunction.Transpose(Worksheets("PatternSaver").Range(pasteSeqFirst, pasteSeqLast).Value)
Worksheets("Drum Machine").Range("C57:" & seqLast).Replace "#N/A", "", xlWhole
Worksheets("Drum Machine").Range("C57:" & seqLast).Replace 0, "", xlWhole


Worksheets("Drum Machine").Range("G60").Interior.ColorIndex = 40
SeqOpen = 5

End Sub

Sub countSeqColumn()

    With Worksheets("Drum Machine")
   ' lastRow = .Cells(.Rows.Count, "C").End(xlUp).Row
   activeSeqColumn = .Cells(57, Columns.Count).End(xlToLeft).Column - 2 ' -1 for some random reason, -2 for so it dont count "pattern seq"
  ' MsgBox lastRow
'Debug.Print "Seq is " & activeSeqColumn
    End With
End Sub

Sub countSvrColumn()


    With Worksheets("PatternSaver")
   SvrColumn = .Cells(.Rows.Count, SeqOpen + 38).End(xlUp).Row - 1
     'SvrColumn = .Cells(57, Columns.Count).End(xlToLeft).Column - 2 ' -1 for some random reason, -2 for so it dont count "pattern seq"
  ' MsgBox lastRow
' Debug.Print "Svr is " & SvrColumn
 
 If SvrColumn = 0 Then
 SvrColumn = 1
 End If
 
    End With
End Sub


'
'Sub countloadColumn()
'
'
'    With Worksheets("PatternSaver")
'   loadColumn = .Cells(.Rows.Count, SeqOpen + 38).End(xlUp).Row - 1
'     'SvrColumn = .Cells(57, Columns.Count).End(xlToLeft).Column - 2 ' -1 for some random reason, -2 for so it dont count "pattern seq"
'  ' MsgBox lastRow
' Debug.Print "Loader Column" & loadColumn
'    End With
'
'
'
'End Sub





Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Patt1_Click()
lastletter = Right("array1", 1)
lastInteger = ConvertString(lastletter)

'Dim topLeft As Range
'Set topLeft = Cells(1, 2)
'
'Dim bottomRight As Range
'Set bottomRight = Cells(12, 17)

saveArray

topLeft = lastInteger
bottomRight = lastInteger * 24



Dim pattern1 As Variant
pattern1 = Worksheets("PatternSaver").Range("B" & topLeft & ":Q" & bottomRight).Value
'pattern1 = Worksheets("PatternSaver").Range(topLeft, bottomRight).Value
Worksheets("Drum Machine").Range("H31:W54").Value = pattern1
Worksheets("PatternSaver").Range("A4").Value = lastInteger  ''stores in pattern saver for next saving

ActiveSheet.Patt1.BackColor = RGB(220, 105, 0)


End Sub
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Stopwatch"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'Dylan: This is not my code, all I did was turn the seconds elapsed into ms elapsed
'Code from here https://bytecomb.com/accurate-performance-timers-in-vba/

Option Explicit

#If Win64 Then
Private Declare PtrSafe Function QueryPerformanceCounter Lib "kernel32" (lpPerformanceCount As UINT64) As Long
Private Declare PtrSafe Function QueryPerformanceFrequency Lib "kernel32" (lpFrequency As UINT64) As Long
#Else
Private Declare Function QueryPerformanceCounter Lib "kernel32" (lpPerformanceCount As UINT64) As Long
Private Declare Function QueryPerformanceFrequency Lib "kernel32" (lpFrequency As UINT64) As Long
#End If

Private pFrequency As Double
Private pStartTS As UINT64
Private pEndTS As UINT64
Private pElapsed As Double
Public msElapsed As Double
Private pRunning As Boolean
   
Private Type UINT64
    LowPart As Long
    HighPart As Long
End Type

Private Const BSHIFT_32 = 4294967296# ' 2 ^ 32

Private Function U64Dbl(U64 As UINT64) As Double
    Dim lDbl As Double, hDbl As Double
    lDbl = U64.LowPart
    hDbl = U64.HighPart
    If lDbl < 0 Then lDbl = lDbl + BSHIFT_32
    If hDbl < 0 Then hDbl = hDbl + BSHIFT_32
    U64Dbl = lDbl + BSHIFT_32 * hDbl
End Function

Private Sub Class_Initialize()
    Dim PerfFrequency As UINT64
    QueryPerformanceFrequency PerfFrequency
    pFrequency = U64Dbl(PerfFrequency)
End Sub

Public Property Get Elapsed() As Double
    If pRunning Then
        Dim pNow As UINT64
        QueryPerformanceCounter pNow
        Elapsed = pElapsed + (U64Dbl(pNow) - U64Dbl(pStartTS)) / pFrequency
        Elapsed = Elapsed * 1000
    Else
        Elapsed = pElapsed
        Elapsed = Elapsed * 1000
    End If
End Property

Public Sub Start()
    If Not pRunning Then
        QueryPerformanceCounter pStartTS
        pRunning = True
    End If
End Sub

Public Sub Pause()
    If pRunning Then
        QueryPerformanceCounter pEndTS
        pRunning = False
        pElapsed = pElapsed + (U64Dbl(pEndTS) - U64Dbl(pStartTS)) / pFrequency
    End If
End Sub

Public Sub Reset()
    pElapsed = 0
    pRunning = False
End Sub

Public Sub Restart()
    pElapsed = 0
    QueryPerformanceCounter pStartTS
    pRunning = True
End Sub

Public Property Get Running() As Boolean
   Running = pRunning
End Property






Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "openLink"
''code from:  https://stackoverflow.com/questions/3166265/open-an-html-page-in-default-browser-with-vba
Option Explicit

  #If Win64 Then
Private Declare PtrSafe Function ShellExecute _
  Lib "shell32.dll" Alias "ShellExecuteA" ( _
  ByVal hwnd As Long, _
  ByVal Operation As String, _
  ByVal Filename As String, _
  Optional ByVal Parameters As String, _
  Optional ByVal Directory As String, _
  Optional ByVal WindowStyle As Long = vbMinimizedFocus _
  ) As Long
  #Else
 Private Declare Function ShellExecute _
  Lib "shell32.dll" Alias "ShellExecuteA" ( _
  ByVal hWnd As Long, _
  ByVal Operation As String, _
  ByVal Filename As String, _
  Optional ByVal Parameters As String, _
  Optional ByVal Directory As String, _
  Optional ByVal WindowStyle As Long = vbMinimizedFocus _
  ) As Long
  #End If

Public Sub OpenUrl()

    Dim lSuccess As Long
    lSuccess = ShellExecute(0, "Open", "http://www.youtube.com/channel/UCIu2Fj4x_VMn2dgSB1bFyQA?sub_confirmation=1")

End Sub

Attribute VB_Name = "quikDoEvent"
'not used anymore as it made program hang after 3 or so loops

Option Explicit

#If Win64 Then
Private Declare PtrSafe Function GetTickCount Lib "kernel32" () As Long
Private Declare PtrSafe Function GetQueueStatus Lib "user32" (ByVal qsFlags As Long) As Long
Private Declare PtrSafe Function SetThreadPriority Lib "kernel32" (ByVal hThread As Long, ByVal nPriority As Long) As Long
Private Declare PtrSafe Function SetPriorityClass Lib "kernel32" (ByVal hProcess As Long, ByVal dwPriorityClass As Long) As Long
Private Declare PtrSafe Function GetThreadPriority Lib "kernel32" (ByVal hThread As Long) As Long
Private Declare PtrSafe Function GetCurrentThread Lib "kernel32" () As Long
Private Declare PtrSafe Function GetCurrentProcess Lib "kernel32" () As Long
#Else
Private Declare Function GetTickCount Lib "kernel32" () As Long
Private Declare Function GetQueueStatus Lib "user32" (ByVal qsFlags As Long) As Long
Private Declare Function SetThreadPriority Lib "kernel32" (ByVal hThread As Long, ByVal nPriority As Long) As Long
Private Declare Function SetPriorityClass Lib "kernel32" (ByVal hProcess As Long, ByVal dwPriorityClass As Long) As Long
Private Declare Function GetThreadPriority Lib "kernel32" (ByVal hThread As Long) As Long
Private Declare Function GetCurrentThread Lib "kernel32" () As Long
Private Declare Function GetCurrentProcess Lib "kernel32" () As Long
#End If


Private Const Milliseconds_Per_Second As Long = 1000

Private Const QS_HOTKEY As Long = &H80
Private Const QS_KEY As Long = &H1
Private Const QS_MOUSEBUTTON As Long = &H4
Private Const QS_MOUSEMOVE As Long = &H2
Private Const QS_PAINT As Long = &H20
Private Const QS_POSTMESSAGE As Long = &H8
Private Const QS_SENDMESSAGE As Long = &H40
Private Const QS_TIMER As Long = &H10
Private Const QS_ALLINPUT As Long = &HFF
Private Const QS_MOUSE As Long = &H6
Private Const QS_INPUT As Long = &H7
Private Const QS_ALLEVENTS As Long = &HBF

Private Const THREAD_PRIORITY_LOWEST As Long = -2
Private Const THREAD_PRIORITY_HIGHEST As Long = 2
Private Const HIGH_PRIORITY_CLASS As Long = &H80
Private Const IDLE_PRIORITY_CLASS As Long = &H40

Private Get_Time As Long
Private Get_Temperary_Time As Long
Private Milliseconds As Long
Private Get_Frames_Per_Second As Long
Private Frame_Count As Long

Public Sub DoEvents_Fast()

    'This does events only when absolutely
    'necessary and still prevents your
    'program from locking up. The result
    'is a Do loop that is multiple times
    'faster than an ordinary Do/DoEvents
    '/Loop which is needed for realtime
    'loops. I've experimented with
    'multiple methods I've found on Planet
    'Source Code, and here are my results:
    
    'Note - This all has been done on my
    'AMD Athlon 1.2 Ghz Processor. Results
    'may vary.
    '-----------------------------------
    'Highest durations per second
    '--------------------
    'VB - 192136
    'Exe - 296140
    'Slow, slugish, and ugly for realtime.
    
    'DoEvents
    
    '----------------------------------
    'Highest durations per second
    '--------------------
    'VB - 688950
    'Exe - 735468
    'If PeekMessage(Message, 0, 0, 0, PM_NOR
    '     EMOVE) Then
    ' DoEvents
    'End If
    '---------------------------------
    'Highest durations per second
    '--------------------
    'VB - 965230
    'Exe - 1113434
    'Problem with this is that it's only
    'active when an event has occured.
    'With this I just simply held a key
    'down.
    'If GetInputState() Then
    ' DoEvents
    'End If
    '--------------------------------
    'Highest durations per second
    '--------------------
    'VB - 947204
    'Exe - 1101420
    'This is the fastest and most
    'reliable method so far.
    
    If GetQueueStatus(QS_HOTKEY Or QS_KEY Or QS_MOUSEBUTTON Or QS_PAINT) Then
        
        DoEvents
    
    End If

End Sub

'Private Sub Performance_Test()
'
'    'I've been doing a lot of
'    'experimenting on VB and learned
'    'many things on speed after doing
'    'so. Here is what I've found out:
'    ' -Expressions by themselves are
'    '2x to 3x faster than when done
'    'through a function or a sub.
'    'ex.
'    'Expression = Fix(255 / (2 ^ (5)))
'    'is way faster than
'    'Expression = Right_Bit_Shift(255, 5)
'    'even when you used a look up table.
'    'Sometimes it was 3x faster on my
'    'computer.
'    '-Any nurmeral data type is faster
'    'than working with variants.
'    'Only use variants when working with
'    'large numbers that can overflow other
'    'data types.
'    '-If statements cause slowdown.
'    'Minimize how many you use within
'    'your subs and functions.
'    'Optimizations help a lot if you have
'    'too many If statements.
'
'    Dim Expression As Long
'
'    'This loop is a true realtime loop.
'    'I've seen many ways it has been
'    'done and this is by far the fastest
'    'method
'
'    Milliseconds = GetTickCount
'
'    'This will help the ordinary
'    'DoEvents work faster.
'    '-------------------------------
'    SetThreadPriority GetCurrentThread, THREAD_PRIORITY_HIGHEST
'    SetPriorityClass GetCurrentProcess, HIGH_PRIORITY_CLASS
'    '-------------------------------
'    Do
'
'            'Um, no thank you:
'
'        'DoEvents
'
'            'Although calling this seems ok:
'
'        'DoEvents_Fast
'
'            'Inlining it is faster:
'
'        If GetQueueStatus(QS_HOTKEY Or QS_KEY Or QS_MOUSEBUTTON Or QS_PAINT) Then DoEvents
'
'        'Insert your experimental equation/function/sub
'        'etc. here. Or you can leave it
'        'empty to see the performance of
'        'the loop.
'        '-------------------------------
'        'Compare these two:
'
'            'Inline
'        'Expression = Fix(255 / 10 ^ 2)
'
'            'Function Call
'        'Expression = Right_Bit_Shift(255, 10)
'
'        '--------------------------------
'        '
'        Frame_Count = Frame_Count + 1
'
'        'If it has been a whole second...
'
'        If GetTickCount - Milliseconds >= Milliseconds_Per_Second Then
'
'            'This changes whenever it got the
'            'most durations per second,
'            'otherwise the result stays the
'            'same in the output showing it
'            'produced the most durations per
'            'second.
'
'            If Frame_Count > Get_Frames_Per_Second Then
'
'                Get_Frames_Per_Second = Frame_Count
'                Caption = Get_Frames_Per_Second & " durations per second"
'
'            End If
'
'            Frame_Count = 0
'            Milliseconds = GetTickCount
'
'        End If
'
'    Loop
'
'End Sub

Private Function Right_Bit_Shift(ByVal Value As Long, ByVal Bits_To_Shift As Long) As Long
    
    'Just a test function.
    
    Right_Bit_Shift = Fix(Value / Bits_To_Shift ^ 2)

End Function

'Private Sub Form_Activate()
'
'    Performance_Test
'
'End Sub

'Private Sub Form_Unload(Cancel As Integer)
'
'    End
'
'End Sub



INQUEST-PP=macro
