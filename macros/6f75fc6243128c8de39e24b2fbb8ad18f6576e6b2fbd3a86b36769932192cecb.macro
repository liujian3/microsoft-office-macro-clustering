Attribute VB_Name = "Module1"
Option Explicit
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' All code in this workbook is property of Magnetar LLC, unauthorized use is prohibited.   '
' Please obtain Magnetar LLC permission to use this code.                                  '
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Public ws_Calculator As Worksheet
Public ws_Cust_Info As Worksheet
Public ws_IOVF As Worksheet
Public ws_HVC As Worksheet

Public ws_Filter As Worksheet
Dim StartTime, ElapsedTime As Single

Public narc_selection_changed As Boolean
Public filter_changed As Boolean


Sub Initialize()
    Application.DisplayAlerts = False
    Application.EnableEvents = False
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    If (ws_Calculator Is Nothing) Then
        Set ws_Calculator = ActiveWorkbook.Worksheets("Calculator")
    End If
    
    If ws_Cust_Info Is Nothing Then
        Set ws_Cust_Info = ActiveWorkbook.Worksheets("Customer information")
    End If
    
    If ws_IOVF Is Nothing Then
        Set ws_IOVF = ActiveWorkbook.Worksheets("IOVF")
    End If
    
    If ws_HVC Is Nothing Then
        Set ws_HVC = ActiveWorkbook.Worksheets("HVC Initial Order")
    End If
    
    
    If ws_Filter Is Nothing Then
        Set ws_Filter = ActiveWorkbook.Worksheets("Filter")
    End If
    ElapsedTime = 0
    StartTime = Timer
    
End Sub

Sub Reset()
    
    If Application.DisplayAlerts = False Then
        Application.DisplayAlerts = True
    End If
    
    
    If Application.EnableEvents = False Then
        Application.EnableEvents = True
    End If
    
    If Application.ScreenUpdating = False Then
        Application.ScreenUpdating = True
    End If
    
    Application.Calculation = xlCalculationAutomatic

    If (ws_Calculator Is Nothing) Then
        Set ws_Calculator = ActiveWorkbook.Worksheets("Calculator")
    End If
    
    If ws_Cust_Info Is Nothing Then
        Set ws_Cust_Info = ActiveWorkbook.Worksheets("Customer information")
    End If
    
    If ws_IOVF Is Nothing Then
        Set ws_IOVF = ActiveWorkbook.Worksheets("IOVF")
    End If
    
    If ws_HVC Is Nothing Then
        Set ws_HVC = ActiveWorkbook.Worksheets("HVC Initial Order")
    End If
    
    If ws_Filter Is Nothing Then
        Set ws_Filter = ActiveWorkbook.Worksheets("Filter")
    End If
    

End Sub

Sub Filter()
    Const C_STATUSBAR_TEXT = "Filter - Processing Row: "
    Const C_STARTING_ROW = 2
    Const C_UPDATE_STATUSBAR_EVERY_N_RECORDS = 10000
    
    Dim Rowindx As Long
    Dim colindx As Integer
    Dim filter_String As String
    Dim result As Variant
        
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    'Main code starts here
    '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
    Initialize
    
    Rowindx = 0
    colindx = 1
    
    filter_String = "*" & ws_Calculator.Range("B3").value & "*"
    
    'clear the match row
    ws_Filter.Range("C2:C50000").Clear
    
    
    Application.StatusBar = ws_Calculator.Name & " : " & C_STATUSBAR_TEXT & Format(Rowindx, "#,##0")
    
    For Rowindx = C_STARTING_ROW To ws_Filter.UsedRange.Rows.Count
    'For Rowindx = 0 To 0
        If C_UPDATE_STATUSBAR_EVERY_N_RECORDS > 0 Then
            If Rowindx Mod C_UPDATE_STATUSBAR_EVERY_N_RECORDS = 0 Then
                DoEvents
                ElapsedTime = Timer - StartTime
                Application.ScreenUpdating = True
                Application.StatusBar = ws_Calculator.Name & " : " & C_STATUSBAR_TEXT & Format(Rowindx, "#,##0") & ", Time Taken: " & ElapsedTime & " seconds"
                Application.ScreenUpdating = False
            End If
        End If
        result = Application.Match(filter_String, ws_Filter.Cells(Rowindx, 1), 0)
        If IsError(result) Then
        Else
            If IsNumeric(result) Then
                ws_Filter.Cells(Rowindx, 3) = ws_Filter.Cells(Rowindx, 2).value
            Else
                ws_Filter.Cells(Rowindx, 3) = ""
                
            End If
        
        End If
              
        'DoEvents
    Next Rowindx
    
    Reset
    DoEvents
    
    Dim lastrow As Long
    lastrow = ActiveWorkbook.Worksheets("Filter").Columns("D").Cells.Find("*", SearchOrder:=xlByRows, LookIn:=xlValues, SearchDirection:=xlPrevious).Row
    
    If (lastrow = 1) Then
        Sheets("Calculator").SearchComboBox.ListFillRange = "Filter!$H$2:$H$2"
    Else
        Sheets("Calculator").SearchComboBox.ListFillRange = "Filter!$H$2:$H$" & lastrow
    End If
    
    Sheets("Calculator").SearchComboBox.DropDown
    
End Sub


Sub Filter_List()
    If filter_changed = True Then
       ' Call the Filter subroutine
       Call Filter
       filter_changed = False
    End If

End Sub

Sub IOVF_EmailAsPDF()
 Dim d As Date
 Dim narc_Name As String
 Dim narc As Long
 
 Dim special_chars As String
 Dim form_Name As String
 Dim Email_Subject As String
 Dim filename As String
 Dim FilePath As String
 
   
   Initialize
   narc_Name = ws_Calculator.Range("C11").value
   narc = ws_Calculator.Range("b11").value
   form_Name = "IOVF - "
   Email_Subject = "Equipment Initial Order Verification Form"
   
    Dim value As Integer
    Dim special_charArr() As String
    Dim special_char As String
    Dim key As Variant
    
    value = is_NARC_Name_Valid(narc_Name)
    If (value > 0) Then
    ' Replace the offending special charater with "-"
     
         ' This is the list of special characters
         special_char = "!,@,#,%,^,*,+,/,\,;,:"
         special_charArr() = Split(special_char, ",")
         
         ' Look for each special character in the NARC and replace with "-"
         ' It is not expected to find many special characters in the name so this scheme should work fine
         For Each key In special_charArr
             narc_Name = Replace(narc_Name, key, "-")
         Next
         
         ' NARC name has been sanitized and can be used in the filename
         filename = form_Name & narc_Name & "(" & narc & ")" & "_" & Format(Now(), "mm-dd-yyyy")
     Else
      ' There are no special characters in the NARC name so it is OK to use it in the filename
         filename = form_Name & narc_Name & "(" & narc & ")" & "_" & Format(Now(), "mm-dd-yyyy")
    End If
    
    FilePath = ThisWorkbook.Path
    
    If DoesFileExists(FilePath & "\" & filename & ".pdf") Then
        Call SendEmail(FilePath & "\" & filename & ".pdf", Email_Subject)
    Else
        ActiveSheet.ExportAsFixedFormat Type:=xlTypePDF, filename:=FilePath & "\" & filename & ".pdf", Quality:=xlQualityStandard, IncludeDocProperties:=True, IgnorePrintAreas:=False, OpenAfterPublish:=False
        Call SendEmail(FilePath & "\" & filename & ".pdf", Email_Subject)
    End If
    Reset
End Sub


Sub IOVF_SaveToPDF()
 Dim d As Date
 Dim narc_Name As String
 Dim narc As Long
 
 Dim special_chars As String
 Dim form_Name As String
 Dim filename As String
 Dim FilePath As String
 
   
   Initialize
   narc_Name = ws_Calculator.Range("C11").value
   narc = ws_Calculator.Range("b11").value
   form_Name = "IOVF - "
   
    Dim value As Integer
    Dim special_charArr() As String
    Dim special_char As String
    Dim key As Variant
    
    value = is_NARC_Name_Valid(narc_Name)
    If (value > 0) Then
    ' Replace the offending special charater with "-"
     
         ' This is the list of special characters
         special_char = "!,@,#,%,^,*,+,/,\,;,:"
         special_charArr() = Split(special_char, ",")
         
         ' Look for each special character in the NARC and replace with "-"
         ' It is not expected to find many special characters in the name so this scheme should work fine
         For Each key In special_charArr
             narc_Name = Replace(narc_Name, key, "-")
         Next
         
         ' NARC name has been sanitized and can be used in the filename
         filename = form_Name & narc_Name & "(" & narc & ")" & "_" & Format(Now(), "mm-dd-yyyy")
     Else
      ' There are no special characters in the NARC name so it is OK to use it in the filename
         filename = form_Name & narc_Name & "(" & narc & ")" & "_" & Format(Now(), "mm-dd-yyyy")
    End If
       
    FilePath = ThisWorkbook.Path
    
    If IsFileOpen(FilePath & "\" & filename & ".pdf") Then
        ' Display a message stating the file in use.
        MsgBox "You are trying to overwrite the IOVF form for," & vbCrLf & vbCrLf & "Narc Id - " & ws_Calculator.Range("b11").value & vbCrLf & "Clinic Name - " & narc_Name & vbCrLf & vbCrLf & "that is already open. Please close the file and try again."
    Else
        ActiveSheet.ExportAsFixedFormat Type:=xlTypePDF, filename:=FilePath & "\" & filename & ".pdf", Quality:=xlQualityStandard, IncludeDocProperties:=True, IgnorePrintAreas:=False, OpenAfterPublish:=True
    End If
   
    ActiveSheet.Range("A1").Select
    Reset
End Sub

Sub IOVF_Reset()
    Initialize
    ws_IOVF.Range("B39:B40") = 0
    ws_IOVF.Range("B47") = ""
    ws_IOVF.Range("B72") = ""
    ws_IOVF.Range("V76") = ""
    ws_IOVF.Range("V78") = ""
    ws_IOVF.Range("C108:C111") = ""
    ws_IOVF.Range("N108:N111") = ""
    ws_IOVF.Range("G114") = ""
    ws_IOVF.Range("V124") = ""
    ws_IOVF.Range("V124") = ""
    ws_IOVF.Range("V171") = ""
    
    ws_IOVF.Range("L184") = ""
    ws_IOVF.Range("C191:C193") = ""
    ws_IOVF.Range("C198") = ""
    
    ws_IOVF.Range("B260:B281").ClearContents
    ws_IOVF.Range("C260:C281") = "-"
    ws_IOVF.Range("B288:B295").ClearContents
    ws_IOVF.Range("B298") = ""
    ws_IOVF.Range("V302") = ""
        
    Reset
End Sub

Sub Prnt()
    ActiveWindow.SelectedSheets.PrintPreview
End Sub


Sub HVC_EmailAsPDF()
 Dim d As Date
 Dim narc_Name As String
 Dim narc As Long
 
 Dim special_chars As String
 Dim form_Name As String
 Dim Email_Subject As String
 Dim filename As String
 Dim FilePath As String
 
   Initialize
   narc_Name = ws_Calculator.Range("C11").value
   narc = ws_Calculator.Range("b11").value
   form_Name = "HVC - "
   Email_Subject = "VETSCAN|fffd| Initial Reagent Order Form"
   
   Dim value As Integer
   Dim special_charArr() As String
   Dim special_char As String
   Dim key As Variant
   
    value = is_NARC_Name_Valid(narc_Name)
    If (value > 0) Then
    ' Replace the offending special charater with "-"
     
         ' This is the list of special characters
         special_char = "!,@,#,%,^,*,+,/,\,;,:"
         special_charArr() = Split(special_char, ",")
         
         ' Look for each special character in the NARC and replace with "-"
         ' It is not expected to find many special characters in the name so this scheme should work fine
         For Each key In special_charArr
             narc_Name = Replace(narc_Name, key, "-")
         Next
         
         ' NARC name has been sanitized and can be used in the filename
         filename = form_Name & narc_Name & "(" & narc & ")" & "_" & Format(Now(), "mm-dd-yyyy")
     Else
      ' There are no special characters in the NARC name so it is OK to use it in the filename
         filename = form_Name & narc_Name & "(" & narc & ")" & "_" & Format(Now(), "mm-dd-yyyy")
    End If
    
    FilePath = ThisWorkbook.Path
    
    If DoesFileExists(FilePath & "\" & filename & ".pdf") Then
        Call SendEmail(FilePath & "\" & filename & ".pdf", Email_Subject)
    Else
        ActiveSheet.ExportAsFixedFormat Type:=xlTypePDF, filename:=FilePath & "\" & filename & ".pdf", Quality:=xlQualityStandard, IncludeDocProperties:=True, IgnorePrintAreas:=False, OpenAfterPublish:=False
        Call SendEmail(FilePath & "\" & filename & ".pdf", Email_Subject)
    End If
    Reset
End Sub


Sub HVC_SaveToPDF()
 Dim d As Date
 Dim narc_Name As String
 Dim narc As Long
 
 Dim special_chars As String
 Dim form_Name As String
 Dim filename As String
 Dim FilePath As String
    
   Initialize
   narc_Name = ws_Calculator.Range("C11").value
   narc = ws_Calculator.Range("b11").value
   form_Name = "HVC - "
   
    Dim value As Integer
    Dim special_charArr() As String
    Dim special_char As String
    Dim key As Variant
    
    value = is_NARC_Name_Valid(narc_Name)
    If (value > 0) Then
    ' Replace the offending special charater with "-"
     
         ' This is the list of special characters
         special_char = "!,@,#,%,^,*,+,/,\,;,:"
         special_charArr() = Split(special_char, ",")
         
         ' Look for each special character in the NARC and replace with "-"
         ' It is not expected to find many special characters in the name so this scheme should work fine
         For Each key In special_charArr
             narc_Name = Replace(narc_Name, key, "-")
         Next
         
         ' NARC name has been sanitized and can be used in the filename
         filename = form_Name & narc_Name & "(" & narc & ")" & "_" & Format(Now(), "mm-dd-yyyy")
     Else
      ' There are no special characters in the NARC name so it is OK to use it in the filename
         filename = form_Name & narc_Name & "(" & narc & ")" & "_" & Format(Now(), "mm-dd-yyyy")
    End If
       
    FilePath = ThisWorkbook.Path
    
    If IsFileOpen(FilePath & "\" & filename & ".pdf") Then
        ' Display a message stating the file in use.
        MsgBox "You are trying to overwrite the IOVF form for," & vbCrLf & vbCrLf & "Narc Id - " & ws_Calculator.Range("b11").value & vbCrLf & "Clinic Name - " & narc_Name & vbCrLf & vbCrLf & "that is already open. Please close the file and try again."
    Else
        ActiveSheet.ExportAsFixedFormat Type:=xlTypePDF, filename:=FilePath & "\" & filename & ".pdf", Quality:=xlQualityStandard, IncludeDocProperties:=True, IgnorePrintAreas:=False, OpenAfterPublish:=True
    End If
   
    ActiveSheet.Range("A1").Select
    Reset
End Sub


Sub HVC_Reset()
    Initialize
    ws_HVC.Range("g20:g50") = 0
    ws_HVC.Range("i20:i50") = 0
        
    ws_HVC.Range("g53:g62") = 0
        
    ws_HVC.Range("h65:h70") = 0
    ws_HVC.Range("i65:i70") = 0
    Reset
End Sub


Sub Save_As()
    Application.Dialogs(xlDialogSaveAs).Show
End Sub


' This function checks to see if a file is open or not. If the file is
' already open, it returns True. If the file is not open, it returns
' False. Otherwise, a run-time error occurs because there is
' some other problem accessing the file.

Function IsFileOpen(filename As String)
    Dim filenum As Integer, errnum As Integer

    On Error Resume Next   ' Turn error checking off.
    filenum = FreeFile()   ' Get a free file number.
    ' Attempt to open the file and lock it.
    Open filename For Input Lock Read As #filenum
    Close filenum          ' Close the file.
    errnum = Err           ' Save the error number that occurred.
    On Error GoTo 0        ' Turn error checking back on.

    ' Check to see which error occurred.
    Select Case errnum

        ' No error occurred.
        ' File is NOT already open by another user.
        Case 0
         IsFileOpen = False

        ' Error number for "Permission Denied."
        ' File is already opened by another user.
        Case 70
            IsFileOpen = True

        ' File does not exist
        Case 53
            IsFileOpen = False

        ' Another error occurred.
        Case Else
            Error errnum
    End Select

End Function


' This function checks to see if a file is open or not. If the file is
' already open, it returns True. If the file is not open, it returns
' False. Otherwise, a run-time error occurs because there is
' some other problem accessing the file.

Function DoesFileExists(filename As String)
    Dim filenum As Integer, errnum As Integer

    On Error Resume Next   ' Turn error checking off.
    filenum = FreeFile()   ' Get a free file number.
    ' Attempt to open the file and lock it.
    Open filename For Input Lock Read As #filenum
    Close filenum          ' Close the file.
    errnum = Err           ' Save the error number that occurred.
    On Error GoTo 0        ' Turn error checking back on.

    ' Check to see which error occurred.
    Select Case errnum

        ' No error occurred.
        ' File is NOT already open by another user.
        Case 0
         DoesFileExists = True

        ' Error number for "Permission Denied."
        ' File is already opened by another user.
        Case 70
            DoesFileExists = True

        ' File does not exist
        Case 53
            DoesFileExists = False

        ' Another error occurred.
        Case Else
            Error errnum
    End Select

End Function


Sub SendEmail(filename As String, heading As String)

Dim OutlookApp As Object
Dim OutlookMessage As Object

'Create Instance of Outlook
  On Error Resume Next
    Set OutlookApp = GetObject(class:="Outlook.Application") 'Handles if Outlook is already open
  Err.Clear
    If OutlookApp Is Nothing Then Set OutlookApp = CreateObject(class:="Outlook.Application") 'If not, open Outlook
    
    If Err.Number = 429 Then
      MsgBox "Outlook could not be found, aborting.", 16, "Outlook Not Found"
      GoTo ExitSub
    End If
  On Error GoTo 0

'Create a new email message
  Set OutlookMessage = OutlookApp.CreateItem(0)

'Create Outlook email with attachment
  On Error Resume Next
    With OutlookMessage
     .To = "dl-zoetisfreedomflexenrollment@zoetis.com"
     .CC = ""
     .BCC = ""
     .Subject = heading
'     .Body = "Please see attached." & vbNewLine & vbNewLine
     .Body = "Auto Generated Email" & vbNewLine & vbNewLine
     .Attachments.Add filename
     .Display
    End With
  On Error GoTo 0

'Optimize Code
ExitSub:

End Sub

' This function checks to see if NARC name contain any special characters.
' If it does then that special character is replaced by "-"
' This ensures that the filename does not give error
' This function return the index value where the special character is found
' or returns 0 is no special character is found.

Public Function is_NARC_Name_Valid(UserInput As String) As Integer
    Dim special_charArr() As String
    Dim special_char As String
    Dim charIndex As Integer
    Dim TotalIndex As Integer
    Dim key As Variant
    
    charIndex = 0
    TotalIndex = 0
    
    ' This is the list of special characters
    special_char = "!,@,#,%,^,*,+,/,\,;,:"
    special_charArr() = Split(special_char, ",")
    
    For Each key In special_charArr
        charIndex = InStr(UserInput, key)
        TotalIndex = TotalIndex + charIndex
    Next
    
    is_NARC_Name_Valid = TotalIndex

End Function

Sub Cust_Info_Reset()
    Initialize
    
    ws_Cust_Info.Range("D7") = ""
    ws_Cust_Info.Range("D9") = ""
    ws_Cust_Info.Range("D21") = ""
    ws_Cust_Info.Range("D23") = ""
    ws_Cust_Info.Range("D25") = ""
    ws_Cust_Info.Range("D27") = ""
    ws_Cust_Info.Range("D29") = ""
    ws_Cust_Info.Range("D31") = ""
    ws_Cust_Info.Range("D37") = ""
    ws_Cust_Info.Range("D39") = ""
    ws_Cust_Info.Range("D37") = ""
    ws_Cust_Info.Range("D42") = ""
    ws_Cust_Info.Range("D52") = ""
    ws_Cust_Info.Range("D55") = ""
    
    Reset
End Sub



Sub Calculator_Reset()
    Initialize
    ' can't access sheet checkbox from module hence this is a workaround.
    ' I had to move calculator sheet reset function to calculator sheet as public and then call it here
    Call Worksheets("Calculator").ResetValues
    Reset
End Sub

Sub Narc_Change_Reset_All()
    Initialize
    
    Calculator_Reset
    Cust_Info_Reset
    IOVF_Reset
    HVC_Reset
    
    Reset
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Control = "SearchComboBox, 3, 0, MSForms, ComboBox"
Attribute VB_Control = "CurrentCustomerCheckBox, 7, 1, MSForms, CheckBox"
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
' All code in this workbook is property of Magnetar LLC, unauthorized use is prohibited.   '
' Please obtain Magnetar LLC permission to use this code.                                  '
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''


Private Sub SearchComboBox_Change()
 'SearchComboBox.ListFillRange = "Filter!$I$2:$I$133"
 
 If filter_changed = True Then
     SearchComboBox.ListFillRange = "Filter!$H$1:$H$1"
     SearchComboBox.DropDown
     filter_changed = True
 Else
    'SearchComboBox.DropDown
 End If
End Sub

Private Sub SearchComboBox_Click()
Dim index As Integer

    If narc_selection_changed = True Then
       Narc_Change_Reset_All
       filter_changed = False
       narc_selection_changed = False
       
       Call Reset
       If SearchComboBox.ListIndex = -1 Then
           SearchComboBox.ListIndex = 0
           If (IsEmpty(SearchComboBox.Text)) Then
               MsgBox "Filter criteria did not match any rows"
           Else
               SearchComboBox.Select
               Range("B3").value = SearchComboBox.Text
           End If
       
       Else
           SearchComboBox.Select
           Range("B3").value = SearchComboBox.Text
       End If
    Else
     ' do nothing
    End If
End Sub

Private Sub SearchComboBox_GotFocus()
    SearchComboBox.DropDown
    filter_changed = False
End Sub


Private Sub SearchComboBox_KeyUp(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    
    Select Case KeyCode
        Case 13 'Enter
            If filter_changed = True Then
               ' Call the Filter subroutine from Module 1
               Call Filter
               
               ' Drop down the combobox to display the filtered results
               'SearchComboBox.DropDown
               
               filter_changed = False
            Else
                
                narc_selection_changed = True
                filter_changed = False
                
                If SearchComboBox.ListIndex = -1 Then
                    SearchComboBox.ListIndex = 0
    
                    If (IsEmpty(SearchComboBox.Text)) Then
                        MsgBox "Filter criteria did not match any rows"
                    Else
                        SearchComboBox.Select
                    End If
                
                Else
                    SearchComboBox.Select
                    Range("B3").value = SearchComboBox.Text
                End If
            
            End If
            
        Case vbKeyUp, vbKeyDown   'Up or down
            SearchComboBox.DropDown
            filter_changed = False
            narc_selection_changed = True
            Narc_Change_Reset_All
            CurrentCustomerCheckBox.value = False
        Case Else
            filter_changed = True
            narc_selection_changed = False
            Range("B3").value = SearchComboBox.Text
            'Call Filter
    End Select
    
End Sub


Private Sub SearchComboBox_MouseDown(ByVal Button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    narc_selection_changed = True
    SearchComboBox.DropDown
End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    
    If Target.Column = 2 And Target.Row = 3 Then
    
    Else
        Initialize
        If (ws_Calculator.Range("D49") = "No") Then
            ws_Calculator.Range("D53") = ""
        Else
        End If
        Reset
    End If
    
End Sub


Public Sub ResetValues()
Dim diag_purchases As Double

    diag_purchases = ws_Calculator.Range("C23").value
    If (diag_purchases >= 500) Then
        CurrentCustomerCheckBox.value = True
    Else
        CurrentCustomerCheckBox.value = False
    End If
    
    Range("E14:E20") = 0
    Range("E22:E23") = 0
    Range("C27:C35") = 0
    Range("C46") = 0
    
    Range("D49") = "Yes"
    Range("D53") = ""
    
    Range("D56") = ""
    Range("D57") = ""
End Sub
Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet11"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet51"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet6"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet8"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

' InQuest injected base64 decoded content
' Yfz{

INQUEST-PP=macro
