Attribute VB_Name = "GlobalFunctions"
Public Const ws1Name = "Wksh 1 - Market Experience"
Public Const ws2Name = "Wksh 2 - Plan Product Info"
Public Const ws3Name = "Wksh 3 - Rating Areas"
Public Const ws2Source = "PlanTemplate"
Public Const mktCell As String = "J4"
Public Const ws1Buttons As String = "Button 17|Button 21|Button 19|Button 20"
Public Const ws2Buttons As String = "Button 30|Button 35|Button 31|Button 32"
Public Const wsPassword As String = "FF3Macr05"
Public Const ws2MergeCellsForAllPlans As String = "10|11|21"
Public Const ws2MergeCellsForAllProducts As String = "22|59|60|61|48"
Public Const ws2MergeCells As String = "10|11|21|22|59|60|61|48"
Public Const ws2LastRow As Long = 82
Public Const ws3FirstDataRow As Long = 6
Public Const ws1Section1Name As String = "Section I - Experience Period Data"
Public Const ws1Section2Name As String = "Section II - Projections"
Public Const ws2Section1Name As String = "Section I - General Product and Plan Information"
Public Const ws2Section2Name As String = "Section II - Experience Period and Current Plan Level Information"
Public Const ws2Section3Name As String = "Section III - Plan Adjustment Factors"
Public Const ws2Section4Name As String = "Section IV - Projected Plan Level Information"
Public Const ws2ProductRateIncreaseRow As Long = 21
Public Const ws2SubmissionLevelRateIncreaseRow As Long = 22
Public Const LatestEffectiveDateFormula As String = "=MAX('Wksh 2 - Plan Product Info'!E19:<COL>19)"
'initial formula
Public Const FormulaMask1 As String = "=IF(SUMPRODUCT(AA97)=0, 0, INT(10000 * (AA98/AA99-1)) / 10000)"
'replace AA99
Public Const FormulaMask3 = "SUMPRODUCT(<COL1>34:<COL2>34,<COL1>35:<COL2>35,--<CONDITION>)"
'replace AA98
Public Const FormulaMask2 = "SUMPRODUCT(1+<COL1>20:<COL2>20,<COL1>34:<COL2>34,<COL1>35:<COL2>35,--<CONDITION>)"
'makes it so the only plans used in the calculation are those that are renewing and have a metal type of Plantinum, Gold, Silver, Bronze, or Catastrophic
Public Const ConditionMask As String = "(<COL1>16:<COL2>16=""Renewing"")*((<COL1>14:<COL2>14=""Platinum"")+(<COL1>14:<COL2>14=""Gold"")+(<COL1>14:<COL2>14=""Silver"")+(<COL1>14:<COL2>14=""Bronze"")+(<COL1>14:<COL2>14=""Catastrophic""))"
Public Const MaxCols As Long = 32768
Public Const States As String = "|AL|AK|AZ|AR|CA|CO|CT|DC|DE|FL|GA|HI|ID|IL|IN|IA|KS|KY|LA|ME|MD|MA|MI|MN|MS|MO|MT|NE|NV|NH|NJ|NM|NY|NC|ND|OH|OK|OR|PA|RI|SC|SD|TN|TX|UT|VT|VA|WA|WV|WI|WY|AS|GU|MP|PR|VI|"
Public Const Markets As String = "|Individual|Small Group|Combined|"
Public Const Metals As String = "|Platinum|Gold|Silver|Bronze|Catastrophic|Not Applicable|"
Public Const PlanTypes As String = "|HMO|PPO|Indemnity|EPO|POS|"
Public Const PlanCategory As String = "|New|Renewing|Terminated|"
'cell mapping for validation
Public Const Matrix_ws2_Req_Cells As String = "10,Section I - Product Name|11,Section I - Product ID|12,Section I - Plan Name|" & _
    "13,Section I - Plan ID (Standard Component ID)|14,Section I - Metal|15,Section I - AV Metal Value|16,Section I - Plan Category|" & _
    "17,Section I - Plan Type|18,Section I - Exchange Plan?|19,Section I - Effective Date of Proposed Rates|20,Section I - Cumulative Rate Change % (over 12 mos prior)|" & _
    "21,Section I - Product Rate Increase %|22,Section I - Submission Level Rate Increase|" & _
    "26,Section II - Allowed Claims|27,Section II - Reinsurance|28,Section II - Member Cost Sharing|29,Section II - Cost Sharing Reduction|" & _
    "30,Section II - Incurred Claims|31,Section II - Risk Adjustment Transfer Amount|32,Section II - Premium|33,Section II - Experience Period Member Months|" & _
    "34,Section II - Current Enrollment|35,Section II - Current Premium PMPM|" & _
    "49,Section III - AV and Cost Sharing Design of Plan|50,Section III - Provider Network Adjustment|51,Section III - Benefits in Addition to EHB|" & _
    "53,Section III - Administrative Expense|54,Section III - Taxes and Fees|55,Section III - Profit & Risk Load|56,Section III - Catastrophic Adjustment|" & _
    "59,Section III - Age Calibration Factor|60,Section III - Geographic Calibration Factor|61,Section III - Tobacco Calibration Factor|" & _
    "66,Section IV - Allowed Claims|67,Section IV - Reinsurance|68,Section IV - Member Cost Sharing|69,Section IV - Cost Sharing Reduction|" & _
    "71,Section IV - Risk Adjustment Transfer Amount|72,Section IV - Premium|73,Section IV - Projected Member Months"

Public Enum dataType
    StringData = 1
    NumericData = 2
    IntegerData = 3
End Enum
Public Enum productType
    individual = 1
    SmallGroup = 2
    Combined = 3
    Unknown = 4
End Enum
Public Type prodDetail
    ws2Start As Long
    ws2End As Long
End Type
Public productDetails() As prodDetail
Public Function FindLastRow(WorksheetName As String) As Long
    Dim sh As Worksheet
    
    Set sh = ActiveWorkbook.Sheets(WorksheetName)

    FindLastRow = sh.UsedRange.Rows(sh.UsedRange.Rows.count).row
        
End Function
Public Function getFullAddress(cell As Range) As String

    Dim sFullAddr As String
    sFullAddr = cell.Parent.Name & "!" & cell.Address
    getFullAddress = sFullAddr

End Function

Public Function checkHIOSID(cellValue As String) As String

    Dim bValid As Boolean
    Dim sMsg As String
    
    'Checking HIOSID.
    'Should be 5 digit numeric
    bValid = True
    sMsg = ""
    
    If Not AllDigit(cellValue) Then
        bValid = False
    Else
        If val(cellValue) < 0 Then
            bValid = False
        End If
    End If
    
    If Not bValid Then
        sMsg = "HIOS Issuer ID must be a 5 digit numeric value."
    End If
    
    checkHIOSID = sMsg

End Function

Public Function checkProductID(cellValue As String) As String

    Dim bValid As Boolean
    Dim sMsg As String
    
    'checking format of productID
    'should be 5 digit HIOS ID + 2 digit state code + 3 more digits
    sMsg = ""
    bValid = True
    If Len(cellValue) <> 10 Then
        bValid = False
    Else
        If Left$(cellValue, 7) <> UCase$(Left$(GetProductPrefix, 7)) Then
            bValid = False
        Else
            If Not IsNumeric(Mid$(cellValue, 8, 3)) Then
                bValid = False
            End If
        End If
    End If
    
    If Not bValid Then
        sMsg = "Product ID must be a 10 digit string (5 digit Issuer ID + 2 letter State Abbreviation + 3 digits)."
    End If
    checkProductID = sMsg
    
End Function

Public Function checkPlanID(cellValue As String, col As Long) As String

    Dim bValid As Boolean
    Dim sMsg As String
    
    'checking format of PlanID
    'Should be 10 digit ProductID + 4 more digits
    sMsg = ""
    bValid = True
    If Len(Trim$(cellValue)) <> 14 Then
        bValid = False
    Else
        If Left$(cellValue, 10) <> UCase$(Left$(GetProductID(col), 10)) Then
            bValid = False
        Else
            If Not IsNumeric(Mid$(cellValue, 11, 4)) Then
                bValid = False
            End If
        End If
    End If
    
    If Not bValid Then
        sMsg = "Plan ID (Standard Component ID) must be a 14 digit string (5 digit Issuer ID + 2 letter State Abbreviation + 7 digits)."
    End If
    checkPlanID = sMsg

End Function

Public Function InputPasswordBox(Optional Prompt As String = "Enter value", _
    Optional Default As String = "", Optional Title As String = "Input Password") As String

    Dim ipb As InputPWDBox
    Dim sAnswer As String
    Set ipb = New InputPWDBox
    ipb.Prompt = Prompt
    ipb.Default = Default
    ipb.Title = Title
    ipb.Show
    sAnswer = ipb.value
    InputPasswordBox = sAnswer

End Function

Public Function getInput(EntryType As dataType, Prompt As String, Title As String, Default As String, _
    Optional AllowNull As Boolean = True, Optional AllowNegative As Boolean = True) As String

    Dim sAnswer As String
    Dim ianswer As Integer
    Dim bValid As Boolean
    
    bValid = False
    Do Until bValid
        sAnswer = InputBox(Prompt, Title, Default)
        If sAnswer = "" Then
            If AllowNull Then
                bValid = True
            Else
                bValid = False
            End If
        Else
            Select Case EntryType
                Case dataType.StringData
                    bValid = True
                Case dataType.IntegerData
                    If IsNumeric(sAnswer) Then
                        If InStr(sAnswer, ".") > 0 Then
                            bValid = False
                        Else
                            If Not AllowNegative And InStr(sAnswer, "-") > 0 Then
                                bValid = False
                            Else
                                bValid = True
                            End If
                        End If
                    Else
                        bValid = False
                    End If
                Case dataType.NumericData
                    If IsNumeric(sAnswer) Then
                        If Not AllowNegative And InStr(sAnswer, "-") > 0 Then
                            bValid = False
                        Else
                            bValid = True
                        End If
                    Else
                        bValid = False
                    End If
            End Select
        End If
    Loop
    
    getInput = sAnswer
    
End Function

Public Function GetColAddress(col As Long) As String

    Dim sAddress As String
    Dim sAddressParts() As String
    
    sAddress = Trim$(Replace(Sheets(1).Cells(1, col).Address, "$", " "))

    sAddressParts = Split(sAddress, " ")

    GetColAddress = sAddressParts(0)

End Function

Public Function GetFirstCol(rng As Range) As Integer
    
    Dim sAddress As String
    Dim sAddressParts() As String
    Dim cell As Range
    Dim iRet As Integer
    
    sAddress = rng.Address
    
    If InStr(sAddress, ":") > 0 Then
        
        sAddressParts = Split(sAddress, ":")
        sAddress = sAddressParts(0)
        
    End If

    Set cell = rng.Parent.Cells.Range(sAddress)
    iRet = cell.Column
    
    GetFirstCol = iRet

End Function

Public Function GetLastCol(rng As Range) As Integer
    
    Dim sAddress As String
    Dim sAddressParts() As String
    Dim cell As Range
    Dim iRet As Integer
    
    sAddress = rng.MergeArea.Address
    
    If InStr(sAddress, ":") > 0 Then
        
        sAddressParts = Split(sAddress, ":")
        sAddress = sAddressParts(UBound(sAddressParts))
        
    End If

    Set cell = rng.Parent.Cells.Range(sAddress)
    iRet = cell.Column
    
    GetLastCol = iRet

End Function

Public Function GetCellAddress(row As Long, col As Long) As String

    Dim sReturn As String
    Dim sAddress As String

    sAddress = Sheets(1).Cells(row, col).Address

    sReturn = Replace(sAddress, "$", "")

    GetCellAddress = sReturn

End Function


Public Function GetProductID(PlanColumn As Long) As String
    
    Dim sAddr() As String
    Dim sProductID As String
    Dim sh As Worksheet
    
    Set sh = Sheets(ws2Name)
    If sh.Cells(11, PlanColumn).MergeCells Then
        sAddr = Split(sh.Cells(11, PlanColumn).MergeArea.Address, ":")
        sProductID = sh.Cells.Range(Replace(sAddr(0), "$", "")).value
    Else
        sProductID = sh.Cells(11, PlanColumn).value
    End If
    GetProductID = sProductID

End Function

Public Function GetProductPrefix() As String

    Dim ws As Worksheet
    Dim sTemp As String
    Set ws = Sheets(ws1Name)
    sTemp = ws.Cells(4, 3).value & ws.Cells(3, 10).value
    
    GetProductPrefix = sTemp

End Function

Public Function CopyValidation(source As Range, Target As Range)
    
    With Target.Validation
        .Delete
        .Add Type:=source.Validation.Type, AlertStyle:=source.Validation.AlertStyle, Operator _
            :=source.Validation.Operator, Formula1:=source.Validation.Formula1, Formula2:=source.Validation.Formula2
        .IgnoreBlank = source.Validation.IgnoreBlank
        .InCellDropdown = source.Validation.InCellDropdown
        .InputTitle = source.Validation.InputTitle
        .ErrorTitle = source.Validation.ErrorTitle
        .InputMessage = source.Validation.InputMessage
        .ErrorMessage = source.Validation.ErrorMessage
        .ShowInput = source.Validation.ShowInput
        .ShowError = source.Validation.ShowError
    End With
    
End Function

Public Function AllDigit(val As String) As Boolean

    Dim length As Integer
    Dim bRet As Boolean
    Dim i As Integer
    Dim s As String
    
    length = Len(val)
    bRet = True
    
    For i = 1 To length
    s = Mid(val, i, 1)
        If Not IsNumeric(s) Then
            bRet = False
            Exit For
        End If
    Next i
    
    AllDigit = bRet

End Function


Public Function cVal(cell As Range) As Double

    Dim dRet As Double
    Dim sHighPart As String
    Dim sLowPart As String
    Dim sFractionPart As String
    Dim sValue As String
    Dim sParts() As String
    Dim lPoint As Long
    
    sValue = gValue(cell)

    lPoint = InStr(sValue, ".")

    If lPoint > 0 Then
        sParts = Split(sValue, ".")
        sFractionPart = sParts(1)
        sLowPart = sParts(0)
        sHighPart = ""
    Else
        sFractionPart = ""
        sLowPart = sValue
        sHighPart = ""
    End If
    
    If Len(sLowPart) > 6 Then
        sLowPart = Right$(sValue, 6)
        sHighPart = Left$(sValue, Len(sValue) - 6)
    End If
    
    If sFractionPart <> "" Then
        sLowPart = sLowPart & "." & sFractionPart
    End If
    
    sLowPart = CStr(CLng(val(sLowPart) * 100) / 100)
    If sHighPart <> "" Then
        sLowPart = sHighPart & sLowPart
    End If
    dRet = CDbl(sLowPart)
    cVal = dRet
    
End Function

Public Function findDuplicates(searchRange As Range) As String
    Dim value As String
    Dim uniColl As Collection
    Dim dupColl As Collection
    
    Set uniColl = New Collection
    Set dupColl = New Collection
    findDuplicates = ""
    
    For Each cell In searchRange.Cells
        value = cell.value
        If value <> "" Then
            On Error Resume Next
            uniColl.Item value 'If it fails, Err.Number will be nonzero.
            uniContains = (Err.number = 0)
            If (uniContains) Then
                If findDuplicates = "" Then
                    findDuplicates = value
                    dupColl.Add addr, value
                Else
                    dupColl.Item value 'If it fails, Err.Number will be nonzero.
                    dupContains = (Err.number = 0)
                    If (Not (dupContains)) Then
                        findDuplicates = findDuplicates & ", " & value
                        dupColl.Add addr, value
                    End If
                End If
            Else
                uniColl.Add addr, value
            End If
        End If
    Next
    
End Function
Public Function isDecimalMaxLengthExceeded(numberVal As String, maxLength As Integer) As Boolean
 ' This function assumes numberVal is a number
 ' This function returns true if <numberVal> has more than <maxLength> decimal numbers after the decimal point
 ' and returns false otherwise
 ' This function also returns false if there is no decimal point in numberVal
 Dim digitLength As Integer
 Dim bRet As Boolean
 bRet = False
 
 digitLength = InStr(CStr(numberVal), ".")
 If digitLength > 0 Then 'there is a decimal point
        digitLength = Len(CStr(numberVal)) - InStr(CStr(numberVal), ".")
        If digitLength > maxLength Then '  more than max number after the decimal point
            bRet = True
        End If
 End If
 isDecimalMaxLengthExceeded = bRet
End Function

Public Function validateMonth(dateValue As String) As Boolean
    Dim result As Boolean
    Dim splitDate() As String
    
    result = True
    
    If IsDate(dateValue) Then
        splitDate = Split(dateValue, "/")
        If splitDate(0) < 1 Or splitDate(0) > 12 Then
            result = False
        End If
    Else
        result = False
    End If
    
    validateMonth = result
End Function

Public Function isWholeNumber(numberValue As String) As Boolean
    Dim result As Boolean
    
    result = False
    
    If IsNumeric(numberValue) = True Then
        If Int(numberValue) = numberValue Then
            result = True
        End If
    End If
    
    isWholeNumber = result
End Function
Attribute VB_Name = "InputPWDBox"
Attribute VB_Base = "0{462A2B93-BA46-4ADB-BBED-82F75511D1A8}{ED559465-566F-47B4-B5BB-A44AE7A0D594}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Public Title As String
Public Prompt As String
Public Default As String
Public value As String

Private Sub cmdCancel_Click()

    value = ""
    HideMe

End Sub

Private Sub cmdOK_Click()

    HideMe

End Sub

Private Sub txtValue_Change()

    value = Me.txtValue.text

End Sub

Private Sub txtValue_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)

    If KeyCode = 13 Then
        KeyCode = 0
        value = Me.txtValue.text
        HideMe
    End If

End Sub

Private Sub UserForm_Activate()

    Me.txtValue.text = ""
    Me.Caption = Title
    Me.lblPrompt.Caption = Prompt
    Me.txtValue.text = Default
    Me.txtValue.SetFocus

End Sub

Private Sub HideMe()

    Me.Hide
    
End Sub

Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_SelectionChange(ByVal Target As Range)

    MoveButtons
    
End Sub

Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_SelectionChange(ByVal Target As Range)

    MoveButtons

End Sub

Private Sub Worksheet_Change(ByVal Target As Range)
    Dim mergedRange As Range
    Dim cell As Range
    
    If Selection.count > 1 Then Exit Sub
    
    If Target.row = 19 And Target.Column > 4 Then
    
        Set mergedRange = ActiveSheet.Cells(10, Target.Column).MergeArea
        
        Application.EnableEvents = False
    
        If Target.value <> "" And mergedRange.count > 1 Then
            For Each cell In mergedRange
                If ActiveSheet.Cells(19, cell.Column).value = "" Then
                    ActiveSheet.Cells(19, cell.Column).value = Target.value
                End If
            Next cell
        End If

        Application.EnableEvents = True
    End If
    
End Sub
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_Open()
    Application.CalculateFull
End Sub
Attribute VB_Name = "UnusedCode"

Function GetExcelVersion() As String

     Dim sh As Worksheet
     Dim sTest As String
     Set sh = Sheets(1)
     On Error GoTo ExcelErr
     sTest = sh.Cells(1, 257).text
     sTest = "2007"
ExitFunc:
     GetExcelVersion = sTest
     Exit Function
ExcelErr:
     If Err.number = 1004 Then
         sTest = "2003"
     Else
         sTest = "UNKNOWN"
     End If
     Resume ExitFunc

End Function


Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{4BC24355-FB3D-445C-B9C9-76CBE4FE1E6E}{C156321E-4F73-4C38-AFE6-2C2B6C901471}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Private Sub CommandButton1_Click()
    Me.Hide
End Sub

Private Sub UserForm_Activate()

    Me.ShowMessage.SetFocus

End Sub

Attribute VB_Name = "WorksheetFunctions"
Public Sub CreateRatingAreas()
Attribute CreateRatingAreas.VB_ProcData.VB_Invoke_Func = "R\n14"
    Dim numRatingAreas As Variant
    Dim ratingAreaIdx As Integer
    Dim currentRow As Integer
    Dim nameRange As Range
    Dim hiddenReferenceWksh As Worksheet
        
    ratingAreaIdx = 0
    currentRow = 0
    Set hiddenReferenceWksh = ThisWorkbook.Worksheets("PlanTemplate")
    
On Error Resume Next
incorrectInput:
    numRatingAreas = Application.InputBox("Enter the total number of Rating Area(s) in your State.", "Create Rating Areas", vbOKCancel)

    If numRatingAreas = "0" Then
        MsgBox "You must enter a positive whole number between 0 and 100 for the number of rating areas."
        GoTo incorrectInput
    ElseIf numRatingAreas = False Then
        Exit Sub
    End If
    
    If IsNumeric(numRatingAreas) = True And isWholeNumber(CStr(numRatingAreas)) = True And numRatingAreas > 0 And numRatingAreas < 100 Then
        UnlockWorksheet ws2Source
        
        hiddenReferenceWksh.Range("K10", "K" & (hiddenReferenceWksh.Range("K10").End(xlDown).row)).ClearContents
            
        For ratingAreaIdx = 1 To numRatingAreas
            currentRow = 9 + ratingAreaIdx
            hiddenReferenceWksh.Range("K" & currentRow).value = "Rating Area " & CStr(ratingAreaIdx)
        Next ratingAreaIdx
        
        'create the named range to refer to later
        If hiddenReferenceWksh.Range("K10").value <> "" And hiddenReferenceWksh.Range("K11").value <> "" Then
            Set nameRange = hiddenReferenceWksh.Range("K10", "K" & (hiddenReferenceWksh.Range("K10").End(xlDown).row))
         Else
            Set nameRange = hiddenReferenceWksh.Range("K10")
        End If
    
        ThisWorkbook.Names.Add Name:="RatingAreas", RefersTo:=nameRange
        MsgBox "Rating Areas have been generated successfully."
        
        LockWorksheet ws2Source
    Else
        'if it's not positive whole number or more than 100, exit with error
        MsgBox "You must enter a positive whole number between 0 and 100 for the number of rating areas."
        GoTo incorrectInput
    End If
End Sub
Public Sub Validate()
Attribute Validate.VB_ProcData.VB_Invoke_Func = "I\n14"

    Dim sMessage As String
    sMessage = ValidateData()
    
    If sMessage <> "" Then
        
        UserForm1.ShowMessage.text = sMessage
        UserForm1.ShowMessage.SetFocus
        'scroll top top line
        UserForm1.ShowMessage.CurLine = 0
        
        UserForm1.Show
    
    Else

        MsgBox "All data is currently valid."
    
    End If
    
End Sub

Public Sub ValidateAndFinalize()
Attribute ValidateAndFinalize.VB_ProcData.VB_Invoke_Func = "F\n14"

    Dim sMessage As String
    Dim sh As Worksheet
    Set sh = Sheets(ws2Source)
    Dim sAnswer As String
    sMessage = ValidateData()
    
    If sMessage <> "" Then
        UserForm1.ShowMessage.text = sMessage
        UserForm1.ShowMessage.SetFocus
        'scroll top top line
        UserForm1.ShowMessage.CurLine = 0
        
        UserForm1.Show
    Else
        convertXML
    End If

End Sub

Private Function ValidateData() As String
    Dim sMsg As String
    Dim cellRefs() As String
    Dim cellInfo() As String
    Dim idx As Integer
    Dim ws1 As Worksheet
    Dim ws2 As Worksheet
    Dim ws3 As Worksheet
    Dim cell As Range
    Dim sAddr As String
    Dim col As Integer
    Dim prod As Integer
    Dim sProductName As String
    Dim sResult As String
    Dim prodRange As Range
    Dim planRange As Range
    Dim namedRange As Range
    Dim benefitCategory As String
    Dim lastRow As Long
    Dim found As Variant
        
    'Verify at least one product is present
    If FindLastPlan(ws2Name) < 5 Then
        sMsg = "No products were found to export on the " & ws2Name & " sheet."
    Else
        Set ws1 = Sheets(ws1Name)
        Set ws2 = Sheets(ws2Name)
        Set ws3 = Sheets(ws3Name)
        
        'Verify no duplicate Product IDs
        Set prodRange = ws2.Range("E11" & ":" & GetCellAddress(11, FindLastPlan(ws2Name)))
        duplicateProds = findDuplicates(prodRange)
        If duplicateProds <> "" Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - The following Product IDs are duplicated: " & duplicateProds)
        End If
                
        'Verify no duplicate Plan IDs
        Set planRange = ws2.Range("E13" & ":" & GetCellAddress(13, FindLastPlan(ws2Name)))
        duplicatePlans = findDuplicates(planRange)
        If duplicatePlans <> "" Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - The following Plan IDs are duplicated: " & duplicatePlans)
        End If
        
        
        '#### BEGIN VALIDATING WORKSHEET 1 ####
        
        'Company Legal Name
        Set cell = ws1.Range("C3")
        sAddr = cell.Address(False, False)
        If cell.value = "" Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - Company Legal Name is required.")
        ElseIf Len(cell.value) > 100 Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - Company Legal Name must be less than 100 characters.")
        End If
        
        'HIOS Issuer ID
        Set cell = ws1.Range("C4")
        sAddr = cell.Address(False, False)
        If cell.value = "" Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - HIOS Issuer ID is required.")
        Else
            sResult = checkHIOSID(cell.value)
            If sResult <> "" Then
                sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & sResult)
            End If
        End If
        
        'State
        Set cell = ws1.Range("J3")
        sAddr = cell.Address(False, False)
        If cell.value = "" Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - State is required.")
        ElseIf InStr(States, "|" & cell.value & "|") = 0 Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - State must be a value from the drop-down.")
        End If
        
        'Market
        Set cell = ws1.Range("J4")
        sAddr = cell.Address(False, False)
        If cell.value = "" Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - Market is required.")
        ElseIf InStr(Markets, "|" & cell.value & "|") = 0 Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - Market must be a value from the drop-down.")
        End If
        
        'Section I - Experience Period
        Set cell = ws1.Range("D12")
        sAddr = cell.Address(False, False)
        If cell.value = "" Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section1Name & " - Experience Period (Beginning Date) is required.")
        ElseIf cell.NumberFormat <> "m/d/yyyy" Or Not IsDate(cell.value) Or validateMonth(cell.value) = False Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section1Name & " - Experience Period (Beginning Date) is not a valid date.")
        End If
        
        'Section I - Allowed Claims
        Set cell = ws1.Range("E14")
        sAddr = cell.Address(False, False)
        If cell.value = "" Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section1Name & " - Allowed Claims is required.")
        ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isDecimalMaxLengthExceeded(cell.value, 2) Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section1Name & " - Allowed Claims must be a positive numeric value, up to 2 decimal points.")
        End If
        
        'Section I - Reinsurance
        Set cell = ws1.Range("E15")
        sAddr = cell.Address(False, False)
        If cell.value = "" Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section1Name & " - Reinsurance is required.")
        ElseIf Not IsNumeric(cell.value) Or isDecimalMaxLengthExceeded(cell.value, 2) Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section1Name & " - Reinsurance must be a positive or negative numeric value, up tp 2 decimal points.")
        End If
        
        'Section I - Incurred Claims
        Set cell = ws1.Range("E16")
        sAddr = cell.Address(False, False)
        If cell.value = "" Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section1Name & " - Incurred Claims is required.")
        ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isDecimalMaxLengthExceeded(cell.value, 2) Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section1Name & " - Incurred Claims must be a positive numeric value, up to 2 decimal points.")
        End If
        
        'Section I - Risk Adjustment
        Set cell = ws1.Range("E17")
        sAddr = cell.Address(False, False)
        If cell.value = "" Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section1Name & " - Risk Adjustment is required.")
        ElseIf Not IsNumeric(cell.value) Or isDecimalMaxLengthExceeded(cell.value, 2) Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section1Name & " - Risk Adjustment must be a positive or negative numeric value, up to 2 decimal points.")
        End If
        
        'Section I - Experience Period Premium
        Set cell = ws1.Range("E18")
        sAddr = cell.Address(False, False)
        If cell.value = "" Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section1Name & " - Experience Period Premium is required.")
        ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isDecimalMaxLengthExceeded(cell.value, 2) Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section1Name & " - Experience Period Premium must be a positive numeric value, up to 2 decimal points.")
        End If
        
        'Section II - Experience Period Index Rate PMPM
        For Each cell In ws1.Range("C24:C29")
            sAddr = cell.Address(False, False)
            benefitCategory = cell.Offset(0, -1).value
            If cell.value = "" Then
                sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section2Name & " - " & benefitCategory & " - Experience Period Index Rate PMPM is required.")
            ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isDecimalMaxLengthExceeded(cell.value, 2) Then
                sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - ws1Section2Name - " & benefitCategory & " - Experience Period Index Rate PMPM must be a numeric value, up to 2 decimal points.")
            End If
        Next cell
        
        'Section II - Cost - Year 1 Trend
        For Each cell In ws1.Range("D24:D29")
            sAddr = cell.Address(False, False)
            benefitCategory = cell.Offset(0, -2).value
            If cell.value = "" Then
                sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section2Name & " - " & benefitCategory & " - Cost for Year 1 Trend is required.")
            ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isDecimalMaxLengthExceeded(cell.value, 3) Then
                sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - ws1Section2Name - " & benefitCategory & " - Cost for Year 1 Trend must be a numeric value, up to 3 decimal points.")
            End If
        Next cell
        
        'Section II - Utilization - Year 1 Trend
        For Each cell In ws1.Range("E24:E29")
            sAddr = cell.Address(False, False)
            benefitCategory = cell.Offset(0, -3).value
            If cell.value = "" Then
                sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section2Name & " - " & benefitCategory & " - Utilization for Year 1 Trend is required.")
            ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isDecimalMaxLengthExceeded(cell.value, 3) Then
                sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - ws1Section2Name - " & benefitCategory & " - Utilization for Year 1 Trend must be a numeric value, up to 3 decimal points.")
            End If
        Next cell

        'Section II - Cost - Year 2 Trend
        For Each cell In ws1.Range("F24:F29")
            sAddr = cell.Address(False, False)
            benefitCategory = cell.Offset(0, -4).value
            If cell.value = "" Then
                sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section2Name & " - " & benefitCategory & " - Cost for Year 2 Trend is required.")
            ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isDecimalMaxLengthExceeded(cell.value, 3) Then
                sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - ws1Section2Name - " & benefitCategory & " - Cost for Year 2 Trend must be a numeric value, up to 3 decimal points.")
            End If
        Next cell
        
        'Section II - Utilization - Year 2 Trend
        For Each cell In ws1.Range("G24:G29")
            sAddr = cell.Address(False, False)
            benefitCategory = cell.Offset(0, -5).value
            If cell.value = "" Then
                sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section2Name & " - " & benefitCategory & " - Utilization for Year 2 Trend is required.")
            ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isDecimalMaxLengthExceeded(cell.value, 3) Then
                sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section2Name & " - " & benefitCategory & " - Utilization for Year 2 Trend must be a numeric value, up to 3 decimal points.")
            End If
        Next cell

        'Section II - Morbidity Adjustment
        Set cell = ws1.Range("F32")
        sAddr = cell.Address(False, False)
        If cell.value = "" Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section2Name & " - Morbidity Adjustment is required.")
        ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isDecimalMaxLengthExceeded(cell.value, 3) Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section2Name & " - Morbidity Adjustment must be a numeric value, up to 3 decimal points.")
        End If
        
        'Section II - Demographic Shift
        Set cell = ws1.Range("F33")
        sAddr = cell.Address(False, False)
        If cell.value = "" Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section2Name & " - Demographic Shift is required.")
        ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isDecimalMaxLengthExceeded(cell.value, 3) Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section2Name & " - Demographic Shift must be a numeric value, up to 3 decimal points.")
        End If
       
        'Section II - Plan Design Changes
        Set cell = ws1.Range("F34")
        sAddr = cell.Address(False, False)
        If cell.value = "" Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section2Name & " - Plan Design Changes is required.")
        ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isDecimalMaxLengthExceeded(cell.value, 3) Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section2Name & " - Plan Design Changes must be a numeric value, up to 3 decimal points.")
        End If
        
        'Section II - Other
        Set cell = ws1.Range("F35")
        sAddr = cell.Address(False, False)
        If cell.value = "" Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section2Name & " - Other is required.")
        ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isDecimalMaxLengthExceeded(cell.value, 3) Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section2Name & " - Other must be a numeric value, up to 3 decimal points.")
        End If
        
        'Section II - Manual EHB Allowed Claims PMPM
        Set cell = ws1.Range("F38")
        sAddr = cell.Address(False, False)
        If cell.value = "" Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section2Name & " - Manual EHB Allowed Claims PMPM is required.")
        ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isDecimalMaxLengthExceeded(cell.value, 2) Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section2Name & " - Manual EHB Allowed Claims PMPM must be a numeric value greater than or equal to 0, up to 2 decimal points.")
        End If
        
        'Section II - Applied Credibility %
        Set cell = ws1.Range("F39")
        sAddr = cell.Address(False, False)
        If cell.value = "" Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section2Name & " - Applied Credibility % is required.")
        ElseIf Not IsNumeric(cell.value) Or val(cell.value) < 0 Or val(cell.value) > 1 Or isDecimalMaxLengthExceeded(cell.value * 100, 2) Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section2Name & " - Applied Credibility % must be a percentage between 0 and 100%, with up to 2 decimal points (ex: 3.02%).")
        End If
        
        'Section II - Reinsurance
        Set cell = ws1.Range("F43")
        sAddr = cell.Address(False, False)
        If cell.value = "" Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section2Name & " - Reinsurance is required.")
        ElseIf Not IsNumeric(cell.value) Or isDecimalMaxLengthExceeded(cell.value, 2) Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section2Name & " - Reinsurance must be a positive or negative numeric value, up to 2 decimal points.")
        End If
        
        'Section II - Risk Adjustment Payment/Charge
        Set cell = ws1.Range("F44")
        sAddr = cell.Address(False, False)
        If cell.value = "" Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section2Name & " - Risk Adjustment Payment/Charge is required.")
        ElseIf Not IsNumeric(cell.value) Or isDecimalMaxLengthExceeded(cell.value, 2) Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section2Name & " - Risk Adjustment Payment/Charge must be a positive or negative numeric value, up to 2 decimal points.")
        End If
        
        'Section II - Exchange User Fees
        Set cell = ws1.Range("F45")
        sAddr = cell.Address(False, False)
        If cell.value = "" Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section2Name & " - Exchange User Fees is required.")
        ElseIf Not IsNumeric(cell.value) Or val(cell.value) < 0 Or val(cell.value) > 1 Or isDecimalMaxLengthExceeded(cell.value * 100, 2) Then
            sMsg = AddMsg(sMsg, "ERROR - " & ws1Name & " - Cell " & sAddr & " - " & ws1Section2Name & " - Exchange User Fees must be a percentage, up to 2 decimal points (ex. 3.55%).")
        End If
       
       
       
        '#### BEGIN VALIDATING WORKSHEET 2 ####
        FindProducts
        prod = 0
        cellRefs = Split(Matrix_ws2_Req_Cells, "|")
        
        Do While prod <= UBound(productDetails)
            sProductName = Trim$(ws2.Cells(11, productDetails(prod).ws2Start).value)
            For col = productDetails(prod).ws2Start To productDetails(prod).ws2End
                For idx = 0 To UBound(cellRefs)
                    cellInfo = Split(cellRefs(idx), ",")
                    Set cell = ws2.Cells(CInt(cellInfo(0)), col)
                    sAddr = cell.Address(False, False)
                    Select Case cell.row
                        'Section I - Product Name
                        Case 10
                            'validate once for each merged product columns
                            If col = productDetails(prod).ws2Start Then
                                If cell.value = "" Then
                                    sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section1Name & " - Product Name is required.")
                                ElseIf Len(cell.value) > 100 Then
                                    sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section1Name & " - Product Name must be 100 characters or less.")
                                End If
                            End If
                                  
                        'Section I - Product ID
                        Case 11
                            'validate once for each merged product columns
                            If col = productDetails(prod).ws2Start Then
                                If cell.value = "" Then
                                    sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section1Name & " - Product ID is required.")
                                Else
                                    sResult = checkProductID(cell.value)
                                    If sResult <> "" Then
                                        sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section1Name & " - " & sResult)
                                    End If
                                End If
                            End If
                            
                        'Section I - Plan Name
                        Case 12
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section1Name & " - Plan Name is required.")
                            ElseIf Len(cell.value) > 100 Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section1Name & " - Plan Name must be 100 characters or less.")
                            End If
                            
                        'Section I - Plan ID (Standard Component ID)
                        Case 13
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section1Name & " - Plan ID (Standard Component ID) is required.")
                            Else
                                sResult = checkPlanID(cell.value, cell.Column)
                                If sResult <> "" Then
                                    sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section1Name & " - " & sResult)
                                End If
                            End If
                            
                        'Section I - Metal
                        Case 14
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section1Name & " - Metal is required.")
                            Else
                                If InStr(Metals, "|" & cell.value & "|") = 0 Then
                                    sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section1Name & " - Metal must be a value from the list.")
                                End If
                            End If
                            
                        'Section I - AV Metal Value
                        Case 15
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section1Name & " - AV Metal Value is required.")
                            ElseIf Not IsNumeric(cell.value) Or isDecimalMaxLengthExceeded(cell.value, 3) Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section1Name & " - AV Metal Value must be a numeric value, up to 3 decimal points.")
                            Else
                                sResult = ValidateAVMetal(cell)
                                If sResult <> "" Then
                                    sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section1Name & " - " & sResult)
                                End If
                            End If
                            
                        'Section I - Plan Category
                        Case 16
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section1Name & " - Plan Category is required.")
                            ElseIf InStr(PlanCategory, "|" & cell.value & "|") = 0 Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section1Name & " - Plan Category is not a valid value. Please select a value from the list.")
                            End If
                            
                        'Section I - Plan Type
                        Case 17
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section1Name & " - Plan Type is required.")
                            ElseIf InStr(PlanTypes, "|" & cell.value & "|") = 0 Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section1Name & " - Plan Type is not a valid value. Please select a value from the list.")
                            End If
                            
                        'Section I - Exchange Plan?
                        Case 18
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section1Name & " - Exchange Plan is required.")
                            ElseIf cell.value <> "Yes" And cell.value <> "No" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section1Name & " - Exchange Plan is not a valid value. Please select a value from the list.")
                            End If
                            
                        'Section I - Effective Date of Proposed Rates
                        Case 19
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section1Name & " - Effective Date of Proposed Rates is required.")
                            'cannot be before 1/1/2010
                            ElseIf cell.NumberFormat <> "m/d/yyyy" Or Not IsDate(cell.value) Or validateMonth(cell.value) = False Or CDate(1 / 1 / 2010) > CDate(cell.value) Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section1Name & " - Effective Date of Proposed Rates is not a valid value. Please enter a valid date.")
                            End If
                        
                        'Section I - Cumulative Rate Change % (over 12 mos prior)
                        Case 20
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section1Name & " - Cumulative Rate Change % (over 12 mos prior) is required.")
                            ElseIf Not IsNumeric(cell.value) Or val(cell.value) > 1 Or isDecimalMaxLengthExceeded(cell.value * 100, 2) Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section1Name & " - Cumulative Rate Change % (over 12 mos prior) must be a percentage, up to 2 decimal points (ex. 3.03%).")
                            End If
                            
                        'Section II - Allowed Claims
                        Case 26
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section2Name & " - Allowed Claims is required.")
                            ElseIf Not IsNumeric(cell.value) Or isDecimalMaxLengthExceeded(cell.value, 2) Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section2Name & " - Allowed Claims must be a positive or negative numeric dollar value.")
                            End If
                        
                        'Section II - Reinsurance
                        Case 27
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section2Name & " - Reinsurance is required.")
                            ElseIf Not IsNumeric(cell.value) Or isDecimalMaxLengthExceeded(cell.value, 2) Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section2Name & " - Reinsurance must be a positive or negative dollar value.")
                            End If
                        
                        'Section II - Member Cost Sharing
                        Case 28
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section2Name & " - Member Cost Sharing is required.")
                            ElseIf Not IsNumeric(cell.value) Or isDecimalMaxLengthExceeded(cell.value, 2) Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section2Name & " - Member Cost Sharing must be a positive or negative dollar value.")
                            End If
                            
                        'Section II - Cost Sharing Reduction
                        Case 29
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section2Name & " - Cost Sharing Reduction is required.")
                            ElseIf Not IsNumeric(cell.value) Or isDecimalMaxLengthExceeded(cell.value, 2) Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section2Name & " - Cost Sharing Reduction must be a positive or negative dollar amount.")
                            End If
                    
                        'Section II - Incurred Claims
                        Case 30
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section2Name & " - Incurred Claims is required.")
                            ElseIf Not IsNumeric(cell.value) Or isDecimalMaxLengthExceeded(cell.value, 2) Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section2Name & " - Incurred Claims must be a positive or negative dollar value.")
                            End If
                            
                        'Section II - Risk Adjustment Transfer Amount
                        Case 31
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section2Name & " - Risk Adjustment Transfer Amount is required.")
                            ElseIf Not IsNumeric(cell.value) Or isDecimalMaxLengthExceeded(cell.value, 2) Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section2Name & " - Risk Adjustment Transfer Amount must be a positive or negative dollar value.")
                            End If
                            
                        'Section II - Premium
                        Case 32
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section2Name & " - Premium is required.")
                            ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isDecimalMaxLengthExceeded(cell.value, 2) Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section2Name & " - Premium must be a dollar value greater than or equal to 0.")
                            End If
                            
                        'Section II - Experience Period Member Months
                        Case 33
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section2Name & " - Experience Period Member Months is required.")
                            ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isWholeNumber(cell.value) = False Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section2Name & " - Experience Period Member Months must a whole number greater than or equal to 0.")
                            End If
                        
                        'Section II - Current Enrollment
                        Case 34
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section2Name & " - Current Enrollment is required.")
                            ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isWholeNumber(cell.value) = False Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section2Name & " - Current Enrollment must be a whole number greater than or equal to 0.")
                            End If
                            
                        'Section II - Current Premium PMPM
                        Case 35
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section2Name & " - Current Premium PMPM is required.")
                            ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isDecimalMaxLengthExceeded(cell.value, 2) Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section2Name & " - Current Premium PMPM must be a dollar value greater than or equal to 0.")
                            End If
                            
                        'Section III - AV and Cost Sharing Design of Plan
                        Case 49
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section3Name & " - AV Cost Sharing Design of Plan is required.")
                            ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isDecimalMaxLengthExceeded(cell.value, 4) Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section3Name & " - AV Cost Sharing Design of Plan must be a numeric value greater than or equal to 0, up to 4 decimal points.")
                            End If
                            
                        'Section III - Provider Network Adjustment
                        Case 50
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section3Name & " - Provider Network Adjustment is required.")
                            ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isDecimalMaxLengthExceeded(cell.value, 4) Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section3Name & " - Provider Network Adjustment must be a numeric value greater than or equal to 0, up to 4 decimal points.")
                            End If
                        
                        'Section III - Benefits in Addition to EHB
                        Case 51
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section3Name & " - Benefits in Addition to EHB is required.")
                            ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isDecimalMaxLengthExceeded(cell.value, 4) Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section3Name & " - Benefits in Addition to EHB must be a numeric value greater than or equal to 0, up to 4 decimal points.")
                            End If
                        
                        'Section III - Administrative Expense
                        Case 53
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section3Name & " - Administrative Expense is required.")
                            ElseIf Not IsNumeric(cell.value) Or val(cell.value) < 0 Or val(cell.value) > 1 Or isDecimalMaxLengthExceeded(cell.value * 100, 2) Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section3Name & " - Administrative Expense must be a percentage up to 2 decimal points (ex: 3.03%).")
                            End If

                        'Section III - Taxes and Fees
                        Case 54
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section3Name & " - Taxes and Fees is required.")
                            ElseIf Not IsNumeric(cell.value) Or val(cell.value) < 0 Or val(cell.value) > 1 Or isDecimalMaxLengthExceeded(cell.value * 100, 2) Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section3Name & " - Taxes and Fees must be a percentage up to 2 decimal points (ex: 3.03%).")
                            End If
                            
                        'Section III - Profit & Risk Load
                        Case 55
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section3Name & " - Profit and Risk Load is required.")
                            ElseIf Not IsNumeric(cell.value) Or val(cell.value) < 0 Or val(cell.value) > 1 Or isDecimalMaxLengthExceeded(cell.value * 100, 2) Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section3Name & " - Profit and Risk Load must be a percentage up to 2 decimal points (ex: 3.03%).")
                            End If
                        
                        'Section III - Catastrophic Adjustment
                        Case 56
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section3Name & " - Catastrophic Adjustment is required.")
                            ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isDecimalMaxLengthExceeded(cell.value, 4) Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section3Name & " - Catastrophic Adjustment must be a numeric value greater than or equal to 0, up to 4 decimal points.")
                            End If
                        
                        'Section III - Age Calibration Factor
                        Case 59
                            'Validate once since it merges across all products
                            Set cell = cell.Offset(0, -1)
                            sAddr = cell.Address(False, False)
                            If prod = 0 And col = productDetails(prod).ws2Start Then
                                If cell.value = "" Then
                                    sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section3Name & " - Age Calibration Factor is required.")
                                ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isDecimalMaxLengthExceeded(cell.value, 4) Then
                                    sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section3Name & " - Age Calibration Factor must be a numeric value greater than or equal to 0, up to 4 decimal points.")
                                End If
                            End If
                            
                        'Section III - Geographic Calibration Factor
                        Case 60
                            'Validate once since it merges across all products
                            Set cell = cell.Offset(0, -1)
                            sAddr = cell.Address(False, False)
                            If prod = 0 And col = productDetails(prod).ws2Start Then
                                If cell.value = "" Then
                                    sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section3Name & " - Geographic Calibration Factor is required.")
                                ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isDecimalMaxLengthExceeded(cell.value, 4) Then
                                    sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section3Name & " - Geographic Calibration Factor must be a numeric value greater than or equal to 0, up to 4 decimal points.")
                                End If
                            End If
                            
                        'Section III - Tobacco Calibration Factor
                        Case 61
                            'Validate once since it merges across all products
                            Set cell = cell.Offset(0, -1)
                            sAddr = cell.Address(False, False)
                            If prod = 0 And col = productDetails(prod).ws2Start Then
                                If cell.value = "" Then
                                    sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section3Name & " - Tobacco Calibration Factor is required.")
                                ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isDecimalMaxLengthExceeded(cell.value, 4) Then
                                    sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section3Name & " - Tobacco Calibration Factor must be a numeric value greater than or equal to 0, up to 4 decimal points.")
                                End If
                            End If
                            
                        'Section IV - Allowed Claims
                        Case 66
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section4Name & " - Allowed Claims is required.")
                            ElseIf Not IsNumeric(cell.value) Or isDecimalMaxLengthExceeded(cell.value, 2) Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section4Name & " - Allowed Claims must be a positive or negative numeric dollar value.")
                            End If

                        'Section IV - Reinsurance
                        Case 67
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section4Name & " - Reinsurance is required.")
                            ElseIf Not IsNumeric(cell.value) Or isDecimalMaxLengthExceeded(cell.value, 2) Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section4Name & " - Reinsurance must be a positive or negative dollar value.")
                            End If
                        
                        'Section IV - Member Cost Sharing
                        Case 68
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section4Name & " - Member Cost Sharing is required.")
                            ElseIf Not IsNumeric(cell.value) Or isDecimalMaxLengthExceeded(cell.value, 2) Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section4Name & " - Member Cost Sharing must be a positive or negative dollar value.")
                            End If
                        
                        'Section IV - Cost Sharing Reduction
                        Case 69
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section4Name & " - Cost Sharing Reduction is required.")
                            ElseIf Not IsNumeric(cell.value) Or isDecimalMaxLengthExceeded(cell.value, 2) Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section4Name & " - Cost Sharing Reduction must be a positive or negative dollar amount.")
                            End If

                        'Section IV - Risk Adjustment Transfer Amount
                        Case 71
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section4Name & " - Risk Adjustment Transfer Amount is required.")
                            ElseIf Not IsNumeric(cell.value) Or isDecimalMaxLengthExceeded(cell.value, 2) Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section4Name & " - Risk Adjustment Transfer Amount must be a positive or negative dollar value.")
                            End If
                            
                        'Section IV - Premium
                        Case 72
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section4Name & " - Premium is required.")
                            ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isDecimalMaxLengthExceeded(cell.value, 2) Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section4Name & " - Premium must be a dollar value greater than or equal to 0.")
                            End If
                            
                        'Section IV - Projected Member Months
                        Case 73
                            If cell.value = "" Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section4Name & " - Projected Member Months is required.")
                            ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isWholeNumber(cell.value) = False Then
                                sMsg = AddMsg(sMsg, "ERROR - " & ws2Name & " - Cell " & sAddr & " - " & ws2Section4Name & " - Projected Member Months must be a whole number greater than or equal to 0.")
                            End If
                    End Select
                Next idx
            Next col
            prod = prod + 1
        Loop
        
        
        '#### BEGIN VALIDATING WORKSHEET 3 ####
        lastRow = FindLastRow(ws3Name)
        If lastRow < ws3FirstDataRow Then
            lastRow = ws3FirstDataRow
        End If
        
        'Check if there are duplicated Rating Areas - Skip this if there's only 1 line or blank page
        If lastRow <> ws3FirstDataRow Then
            Set prodRange = ws3.Range("A" & ws3FirstDataRow & ":" & "A" & lastRow)
            duplicateProds = findDuplicates(prodRange)
            If duplicateProds <> "" Then
                sMsg = AddMsg(sMsg, "ERROR - " & ws3Name & " - The following Rating Areas are duplicated: " & duplicateProds)
            End If
        End If
        
        For idx = ws3FirstDataRow To lastRow
            'Rating Area
            Set cell = ws3.Range("A" & idx)
            sAddr = cell.Address(False, False)
            
            If cell.value = "" Then
                sMsg = AddMsg(sMsg, "ERROR - " & ws3Name & " - Cell " & sAddr & " - Rating Area is required.")
            Else
                Set namedRange = ActiveWorkbook.Sheets(ws2Source).Range("RatingAreas")
                found = Application.VLookup(cell.value, namedRange, 1, False)
                If IsError(found) Then
                    sMsg = AddMsg(sMsg, "ERROR - " & ws3Name & " - Cell " & sAddr & " - Rating Area is invalid. Please select a value from the list.")
                End If
            End If
            
            'Rating Factor
            Set cell = ws3.Range("B" & idx)
            sAddr = cell.Address(False, False)
            
            If cell.value = "" Then
                sMsg = AddMsg(sMsg, "ERROR - " & ws3Name & " - Cell " & sAddr & " - Rating Factor is required.")
            ElseIf Not IsNumeric(cell.value) Or cell.value < 0 Or isDecimalMaxLengthExceeded(cell.value, 4) Then
                sMsg = AddMsg(sMsg, "ERROR - " & ws3Name & " - Cell " & sAddr & " - Rating Factor must be a numeric value, up to 4 decimal points.")
            End If
        Next idx
    End If
    
    ValidateData = sMsg

End Function

Function OneValueExists(ws As Worksheet, cellRefs() As String, row As Integer) As Boolean

    Dim bFound As Boolean
    Dim col As Integer
    Dim sAddr As String
    Dim cell As Range
    bFound = False
    col = 0
    Do While col <= UBound(cellRefs)
        cellInfo = Split(cellRefs(col), ",")
        sAddr = cellInfo(0) & CStr(row)
        Set cell = ws.Range(sAddr).Cells
        If cell.value <> "" Then bFound = True
        col = col + 1
    Loop
    OneValueExists = bFound
    
End Function

Function ValidateAVMetal(cell As Range) As String
    
    Dim sRet As String
    Dim addr As String
    Dim sh As Worksheet
    Dim metalCell As Range
    Dim AVMetal As Single
    sRet = ""
    addr = Replace(Replace(cell.Address, "15", "14"), "$", "")
    Set sh = Sheets(ws2Name)
    Set metalCell = sh.Range(addr)
    AVMetal = CSng(IIf(gValue(cell) = "", 0, gValue(cell)))
    
    If AVMetal >= 1 Or AVMetal < 0 Then
        sRet = "AV Metal Value must be between 0 and 1, with up to 3 decimal points."
        ValidateAVMetal = sRet
        Exit Function
    End If
    
    Select Case metalCell.value
        Case "Platinum"
            If AVMetal > 0.92 Or AVMetal < 0.86 Then
                sRet = "AV Metal Value is not valid. For Platinum plans the AV Metal Value must be between 0.86 And 0.92."
            End If
        Case "Gold"
            If AVMetal > 0.82 Or AVMetal < 0.76 Then
                sRet = "AV Metal Value is not valid. For Gold plans the AV Metal Value must be between 0.76 And 0.82."
            End If
        Case "Silver"
            If AVMetal > 0.72 Or AVMetal < 0.66 Then
                sRet = "AV Metal Value is not valid. For Silver plans the AV Metal Value must be between 0.66 And 0.72."
            End If
        Case "Bronze"
            If AVMetal > 0.65 Or AVMetal < 0.56 Then
                sRet = "AV Metal Value is not valid. For Bronze plans the AV Metal Value must be between 0.56 And 0.65"
            End If
    End Select

    ValidateAVMetal = sRet

End Function

Function AddMsg(sMsgVar As String, sNewMsg As String)

    If sMsgVar <> "" Then
        sMsgVar = sMsgVar & vbCrLf & vbCrLf
    End If
    sMsgVar = sMsgVar & sNewMsg
    
    AddMsg = sMsgVar

End Function
Public Function DockButtons()

    Dim sh As Worksheet
    Dim buttonNames() As String
    Dim lastTop As Double
    Dim lastLeft As Double
    Dim lastWidth As Double
    Dim btnCnt As Long

    Set sh = ActiveSheet

    Select Case sh.Name
        Case ws1Name
            buttonNames = Split(ws1Buttons, "|")
        Case ws2Name
            buttonNames = Split(ws2Buttons, "|")
    End Select
    
    btnCnt = 0
        
    lastTop = sh.Cells(1, 1).Top
    lastLeft = sh.Cells(1, 1).Left

    On Error GoTo errorHandler

    sh.Shapes(buttonNames(btnCnt)).Left = sh.Cells(1, col + 5).Left

    Do While btnCnt <= UBound(buttonNames)
        With sh.Shapes(buttonNames(btnCnt))
            .Top = lastTop
            .Left = lastLeft
            .Width = 75
        End With
        lastLeft = lastLeft + 80
        btnCnt = btnCnt + 1
    Loop
    
skipButtonMove:
    
    Exit Function
    
errorHandler:
    Resume skipButtonMove
    
End Function

Public Function FindProducts()

    Dim sh As Worksheet
    Dim sAddr() As String
    Dim rng As Range
    Dim iCol As Long
    Dim iProduct As Integer
    Dim bRet As Boolean
    Dim plansFound As Long
    
    bRet = True
    iProduct = 0
    ReDim productDetails(iProduct)
    plansFound = FindLastPlan(ws2Name)
    
    'get start and end cells for worksheet 2
    Set sh = Sheets(ws2Name)
    iCol = 5
    Do While iCol <= plansFound
        ReDim Preserve productDetails(iProduct)
        If sh.Cells(10, iCol).MergeCells And InStr(sh.Cells(10, iCol).MergeArea.Address, ":") > 0 Then
            productDetails(iProduct).ws2Start = iCol
            sAddr = Split(sh.Cells(10, iCol).MergeArea.Address, ":")
            Set rng = sh.Range(Replace(sAddr(1), "$", ""))
            productDetails(iProduct).ws2End = rng.Column
            iCol = productDetails(iProduct).ws2End + 1
        Else
            productDetails(iProduct).ws2Start = iCol
            productDetails(iProduct).ws2End = iCol
            iCol = iCol + 1
        End If
        iProduct = iProduct + 1
    Loop

End Function

Public Sub AddNewProduct()
Attribute AddNewProduct.VB_ProcData.VB_Invoke_Func = "P\n14"

    GetProductDetails
    
End Sub

Function GetProductType(prodType As String) As productType
    Dim ret As productType
    
    Select Case prodType
        Case "Individual"
            ret = productType.individual
        Case "Small Group"
            ret = productType.SmallGroup
        Case "Combined"
            ret = productType.Combined
        Case Else
            ret = productType.Unknown
    End Select
    
    GetProductType = ret

End Function

Private Sub GetProductDetails()
    Dim prodCount As Integer
    Dim yearOfInception As Integer
    Dim sAnswer As String
    Dim sh As Worksheet
    Dim prodType As productType
    Dim iProdAnswer As Variant
    Dim sYearTitle As String
    Dim sYearPrompt As String
    Dim sYearDefault As String
    
    Set sh = Sheets(ws1Name)
    
    sAnswer = getInput(dataType.IntegerData, "Enter number of Plans for this Product (Minimum of 1)", _
            "Enter plan count", "1", True, False)
    
    If sAnswer <> "" Then
        prodCount = CInt(sAnswer)
        If SheetHasRoom(ws2Name, prodCount) Then
            AddProduct prodCount
            SetFormulas
            MoveButtons
        Else
            MsgBox "There is no more room to add products on this template.", vbOKOnly, "Template Maximum Products Reached"
        
        End If
    End If
    
End Sub

Private Sub AddProduct(planCount As Integer)
    Dim currPlan As Long
    Dim startCol As Long
    
    'Unlock sheets
    UnlockWorksheet ws2Name
    
    'setting up data area for sheet 2
    startCol = FindLastPlan(ws2Name) + 1
    currPlan = 1
    
    'insert new columns and merge the appropriate cells
    InsertCols startCol, planCount
    MergeCols startCol, planCount
    
    'Lock worksheet
    LockWorksheet ws2Name
    
End Sub

Public Function BuildThresholdFormula(iStart As Long, iEnd As Long, iRow As Long) As String
    Dim sh As Worksheet
    Dim mergeRange As Range
    Dim FinalFormula As String
    Dim FormulaPart1 As String
    Dim FormulaPart2 As String
    Dim FormulaPart3 As String
    Dim col1 As String
    Dim col2 As String
    Dim planCount As Integer
    Dim ExprCOND As String
    Dim mergedAreaCellCount As Long
    
    If iStart <= iEnd Then
        'building weighted average formula
        planCount = 1 + (iEnd - iStart)
        Set sh = Sheets(ws2Name)
        Set mergeRange = sh.Range(GetCellAddress(iRow, iStart) & ":" & _
            GetCellAddress(iRow, iEnd))
            
        mergedAreaCellCount = sh.Range(GetCellAddress(iRow, iStart)).MergeArea.Cells.count
        
        If mergedAreaCellCount > 1 Then
            mergeRange.UnMerge
            mergeRange.HorizontalAlignment = xlCenterAcrossSelection
        End If
        
        col1 = GetColAddress(iStart)
        col2 = GetColAddress(iEnd)
        
        ExprCOND = Replace(Replace(ConditionMask, "<COL1>", col1), "<COL2>", col2)
        FormulaPart1 = FormulaMask1
        FormulaPart2 = Replace(Replace(Replace(FormulaMask2, "<COL1>", col1), "<COL2>", col2), "<CONDITION>", ExprCOND)
        FormulaPart3 = Replace(Replace(Replace(FormulaMask3, "<COL1>", col1), "<COL2>", col2), "<CONDITION>", ExprCOND)
        
        With sh.Cells(iRow, iStart)
            .FormulaArray = FormulaPart1
            .Replace "AA97", ExprCOND
            .Replace "AA98", FormulaPart2
            .Replace "AA99", FormulaPart3
        End With
        
        mergeRange.Merge
    End If

End Function
Public Function AdjustReferenceFormulasAfterColumnDeletion(lastPlan As Long)
    Dim source As Worksheet
    Dim sh As Worksheet
    
    Set source = Worksheets(ws2Source)
    Set sh = Worksheets(ws2Name)
    
    'Unlocking sheet
    UnlockWorksheet ws2Name
    
    'Resetting the formulas of the following cells that span across all products to ensure they're correct after every column deletion as long as there exits at least 1 plan
    If lastPlan > 4 Then
        sh.Range("E48").Formula = source.Range("E48").Formula
        sh.Range("E59").Formula = source.Range("E59").Formula
        sh.Range("E60").Formula = source.Range("E60").Formula
        sh.Range("E61").Formula = source.Range("E61").Formula
        
        sh.Range("E57:" & GetCellAddress(57, lastPlan)).Formula = source.Range("E57").Formula
        sh.Range("E62:" & GetCellAddress(62, lastPlan)).Formula = source.Range("E62").Formula
    End If
    
    'Locking sheet
    LockWorksheet ws2Name
End Function

Public Function SetFormulas()

    Dim lastCol As Long
    Dim x As Integer
    Dim sTemp As String
    Dim sCol As String
    Dim sh As Worksheet
    Dim source As Worksheet
    
    'Unlocking sheet
    UnlockWorksheet ws2Name
    
    lastCol = FindLastPlan(ws2Name)
    
    If lastCol > 4 Then
        sCol = GetColAddress(lastCol)
        Set sh = Worksheets(ws2Name)
        Set source = Worksheets(ws2Source)
        For x = 26 To 73
            sTemp = source.Cells(x, 4).Formula
            If Trim$(sTemp) <> "" Then
                sh.Cells(x, 4).Formula = Replace(sTemp, "XFD", sCol)
            End If
        Next x
    End If
    
    'Locking sheet
    LockWorksheet ws2Name
    
End Function

Public Function FindLastPlan(WorksheetName As String) As Long

    Dim found As Boolean
    Dim col As Long
    Dim row As Long
    Dim sh As Worksheet
        
    found = False

    col = 5
    row = ws2LastRow
    
    Set sh = Sheets(WorksheetName)
    
    Do While col <= MaxCols And Not found
        
        If Not sh.Cells(row, col).HasFormula Then
            col = col - 1
            found = True
        Else
            col = col + 1
        End If
    
    Loop
        
    FindLastPlan = col
    
End Function

Private Function SheetHasRoom(sheetName As String, Optional ColumnsNeeded As Integer = 0) As Boolean

    Dim bRet As Boolean
    Dim mktType As productType
    Dim iWidthNeeded As Long
    Dim firstOpenCol As Long
    
    bRet = False
    iWidthNeeded = ColumnsNeeded
    
    If iWidthNeeded > 0 Then
        firstOpenCol = FindLastPlan(sheetName) - 1
        If firstOpenCol + iWidthNeeded <= MaxCols Then
            bRet = True
        End If
    End If
    
    SheetHasRoom = bRet

End Function

Public Function getLatestEffectiveDate()
    Dim sh As Worksheet
    
    'Update Effective Date field in WS1
    UnlockWorksheet ws1Name
        
    Set sh = Sheets(ws1Name)
    sh.Range("C5").Formula = Replace(LatestEffectiveDateFormula, "<COL>", GetColAddress(FindLastPlan(ws2Name)))
    
    LockWorksheet ws1Name
    
End Function

Public Function MoveButtons()

    Dim addr As String
    Dim se() As String
    Dim row As Long
    Dim col As Long
    Dim sh As Worksheet
    Dim buttonNames() As String
    Dim lastTop As Double
    Dim lastLeft As Double
    Dim lastWidth As Double
    Dim btnCnt As Long
    Dim sVersion As String
    
    If ActiveSheet.ProtectContents Or ActiveSheet.ProtectDrawingObjects _
        Or ActiveSheet.ProtectScenarios Then
    
        sVersion = GetExcelVersion
        
        Set sh = ActiveSheet
        addr = ActiveWindow.VisibleRange.Address
        se = Split(addr, ":")
        se(0) = Replace(se(0), "$", "")
        
        row = sh.Range(se(0)).row
        col = sh.Range(se(0)).Column
        
        If (sVersion = "2003" And col < 247) Or sVersion = "2007" Then
        
            Select Case sh.Name
                Case ws1Name
                    buttonNames = Split(ws1Buttons, "|")
                Case ws2Name
                    buttonNames = Split(ws2Buttons, "|")
            End Select
            
            btnCnt = 0
                
            lastTop = sh.Cells(row, col + 5).Top
            lastLeft = sh.Cells(row, col + 5).Left
        
            On Error GoTo errorHandler
        
            sh.Shapes(buttonNames(btnCnt)).Left = sh.Cells(row, col + 5).Left
        
            Do While btnCnt <= UBound(buttonNames)
                With sh.Shapes(buttonNames(btnCnt))
                    .Top = lastTop
                    .Left = lastLeft
                End With
                lastLeft = lastLeft + 87
                btnCnt = btnCnt + 1
            Loop
            
            'Make Remove Product button visible if Product or Product ID selected
            If (sh.Name = ws2Name And (ActiveCell.row = "10" Or ActiveCell.row = 11) And (ActiveCell.Column >= 5 And ActiveCell.Column <= FindLastPlan(ws2Name))) Then
                With sh.Shapes("Button 36")
                    .Visible = True
                    .Top = lastTop
                    .Left = lastLeft
                End With
            ElseIf (sh.Name = ws2Name) Then
                sh.Shapes("Button 36").Visible = False
            End If
            
            'Make Remove Plan button visible if Plan Name or Plan ID selected
            If (sh.Name = ws2Name And (ActiveCell.row = 12 Or ActiveCell.row = 13) And (ActiveCell.Column >= 5 And ActiveCell.Column <= FindLastPlan(ws2Name))) Then
                With sh.Shapes("Button 37")
                    .Visible = True
                    .Top = lastTop
                    .Left = lastLeft
                End With
            ElseIf (sh.Name = ws2Name) Then
                sh.Shapes("Button 37").Visible = False
            End If
            
        End If
    End If
    
skipButtonMove:
    
    Exit Function
    
errorHandler:
    Resume skipButtonMove
    
End Function

Public Function UnlockWorksheet(sheetName As String)

    Sheets(sheetName).Unprotect Password:=wsPassword
    
End Function
 
Public Function LockWorksheet(sheetName As String)

    Sheets(sheetName).Protect Contents:=True, Scenarios:=False, Password:=wsPassword
        
End Function

Function lastInstr(StringToSearch As String, StringToFind As String) As Integer

    Dim iplace As Integer
    Dim iLastPlace As Integer
    
    iplace = 1
    
    Do While iplace > 0 And iplace <= Len(StringToSearch)
    
        iplace = InStr(iplace, StringToSearch, StringToFind)
        If iplace <> 0 Then
            iLastPlace = iplace
            iplace = iplace + 1
        End If
    
    Loop
    
    lastInstr = iLastPlace

End Function

Function getVersion(text As String) As String
Dim i As Integer
Dim verNum As String

i = lastInstr(text, " ")
verNum = Trim(Mid$(text, i + 1, Len(text)))

getVersion = verNum
End Function

Public Sub AddNewPlan()
Attribute AddNewPlan.VB_ProcData.VB_Invoke_Func = "L\n14"
    
    'check that the Issuer ID and State fields are already filled out
    If Sheets(ws1Name).Range("C4").value = "" Or Sheets(ws1Name).Range("J3").value = "" Then
        MsgBox "Please fill out the Issuer ID and State fields (cells C4 and J3 on the Market Experience worksheet) before adding a plan"
        Exit Sub
    End If
    
    frmPlanID.Show

End Sub

Public Sub AddPlan(planId As String)
    Dim newCol As Integer
    Dim startCol As Long

    'create new column
    If SheetHasRoom(ws2Name, 1) Then
        startCol = FindLastPlan(ws2Name) + 1
        InsertCols startCol, 1
        MergeCols startCol, 1
        SetFormulas
        MoveButtons
    Else
        MsgBox "There is no more room to add products on this template.", vbOKOnly, "Template Maximum Products Reached"
    
    End If

    'Fill in Plan ID and Product ID
    newCol = FindLastPlan(ws2Name)
    UnlockWorksheet ws2Name
    Set sh = Sheets(ws2Name)
    sh.Cells(13, newCol).value = planId
    sh.Cells(11, newCol).value = Left(planId, 10)
    LockWorksheet ws2Name
    
End Sub
Public Sub RemovePlan()
    Dim destRange As Range
    Dim selectedCol As String
    Dim startCell As String
    Dim endCell As String
    Dim selectedRange As String
    Dim idx As Integer
    Dim mergeRange As Range
    Dim ntlRange As Range
    Dim firstCell As String
    Dim nextCell As String
    Dim nextToLastCell As String
    Dim prodCell As String
    Dim prodCol As Long
    Dim selectedCol_long As Long
    Dim sh As Worksheet
    Dim firstCol As Long
    Dim nextCol As Long
    Dim nextToLastCol As Long

    rmWarning = MsgBox("Are you sure you want to remove the Plan?  Its column will be deleted from this worksheet.", vbYesNo, "Remove Plan?")
    
    If rmWarning = vbYes Then
        'Unlock sheets
        UnlockWorksheet ws2Name
        
        selectedCol_long = ActiveCell.Column
        selectedCol = GetColAddress(selectedCol_long)
        startCell = selectedCol & "10"
        mergedCells = Split(ws2MergeCells, "|")
        prodCell = GetCellAddress(CLng(mergedCells(0)), CLng(Range(startCell).MergeArea.Cells(1, 1).Column))
        prodCol = CLng(Range(prodCell).Column)
        planCount = Range(startCell).MergeArea.count
        firstCol = CLng(Range(startCell).MergeArea.Cells(1, 1).Column)
        nextCol = CLng(Range(startCell).MergeArea.Cells(1, 2).Column)
        nextToLastCol = CLng(Range(startCell).MergeArea.Cells(1, planCount - 1).Column)
        
        'unmerge and copy cells before deletion if necessary
        Set sh = Worksheets(ws2Name)
        If (planCount > 1) Then
            idx = 0
            Do While idx <= UBound(mergedCells)
                If mergedCells(idx) = 22 Or mergedCells(idx) = 48 Or mergedCells(idx) = 59 Or mergedCells(idx) = 60 Or mergedCells(idx) = 61 Then
                    Set mergeRange = sh.Range("E" & mergedCells(idx) & ":" & _
                        GetCellAddress(CLng(mergedCells(idx)), CLng(prodCol + planCount - 1)))
                    mergeRange.UnMerge
                Else
                    firstCell = GetCellAddress(CLng(mergedCells(idx)), firstCol)
                    nextCell = GetCellAddress(CLng(mergedCells(idx)), nextCol)
                    nextToLastCell = GetCellAddress(CLng(mergedCells(idx)), nextToLastCol)
                    Set mergeRange = sh.Range(prodCell & ":" & _
                        GetCellAddress(CLng(mergedCells(idx)), CLng(prodCol + planCount - 1)))
                    mergeRange.UnMerge
                    Set ntlRange = sh.Range(nextToLastCell)
                    ntlRange.Borders(xlEdgeRight).LineStyle = XlLineStyle.xlContinuous
                    Range(nextCell).value = Range(firstCell).value
                End If
                idx = idx + 1
            Loop
        
        End If
        
        'remove column
        endCell = selectedCol & "82"
        selectedRange = startCell & ":" & endCell
        Set destRange = Sheets(ws2Name).Range(selectedRange)
        destRange.Delete Shift:=xlToLeft
        
        
        'merge cells back together after deletion
        MergeCols prodCol, planCount - 1
                
        'Adjusts the reference formulas of fields that span across all products
        AdjustReferenceFormulasAfterColumnDeletion FindLastPlan(ws2Name)
        
        'Lock worksheet
        LockWorksheet ws2Name
        
        'Update Effective Date formula field in WS1
        getLatestEffectiveDate
    End If

End Sub

Public Sub RemoveProduct()
    Dim destRange As Range
    Dim selectedCol As String
    Dim startCell As String
    Dim endCell As String
    Dim selectedRange As String
    Dim lastCol As Long
    Dim mergeRange As Range
    Dim idx As Integer
    
    rmWarning = MsgBox("Are you sure you want to remove the Product?  Its column(s) will be deleted from this worksheet.", vbYesNo, "Remove Product?")
    
    If rmWarning = vbYes Then
        'Unlock sheets
        UnlockWorksheet ws2Name
        
        colCount = ActiveCell.MergeArea.count
        selectedCol = GetColAddress(ActiveCell.Column)
        endCol = GetColAddress(ActiveCell.Column + colCount - 1)
        startCell = selectedCol & "10"
        endCell = endCol & "82"
        selectedRange = startCell & ":" & endCell
        Set destRange = Sheets(ws2Name).Range(selectedRange)
        destRange.Delete Shift:=xlToLeft
    
        lastCol = FindLastPlan(ws2Name)
        If lastCol >= 5 Then
            mergedCells = Split(ws2MergeCellsForAllProducts, "|")
            idx = 0
            Do While idx <= UBound(mergedCells)
                Set mergeRange = Sheets(ws2Name).Range(GetCellAddress(CLng(mergedCells(idx)), CLng(5)) & ":" & _
                    GetCellAddress(CLng(mergedCells(idx)), CLng(lastCol)))
                mergeRange.Borders(xlEdgeRight).LineStyle = XlLineStyle.xlContinuous
        
                idx = idx + 1
            Loop
        End If
        
               
        'building weighted average formula for Submission Level Rate Increase % field in WS2
        BuildThresholdFormula 5, FindLastPlan(ws2Name), ws2SubmissionLevelRateIncreaseRow
    
        'Adjusts the reference formulas of fields that span across all products
        AdjustReferenceFormulasAfterColumnDeletion FindLastPlan(ws2Name)
        
        'Lock worksheet
        LockWorksheet ws2Name
        
        'Update Effective Date formula field in WS1
        getLatestEffectiveDate
        
    End If

End Sub

Private Sub InsertCols(startCol As Long, planCount As Integer)
    Dim currPlan As Long
    Dim lastPlan As Long
    Dim sh As Worksheet
    Dim sourceRange As Range
    Dim mergeRange As Range
    Dim destRange As Range
    Dim sNewCol As String
    Dim source As Worksheet
    Dim newProdCol As String
    Dim mergedCells() As String
    Dim idx As Integer
    Dim lTemp As Long
    Dim cell As Range
    Dim iStart As Long
    Dim iEnd As Long
    Dim cellRefs() As String
    
    'Unlock sheets
    UnlockWorksheet ws2Name
    
    Set sh = Sheets(ws2Name)
    Set source = Sheets(ws2Source)
    currPlan = 1
    
    cellRefs = Split(ws2MergeCellsForAllProducts, "|")
    lastPlan = FindLastPlan(ws2Name)
    
    For idx = 0 To UBound(cellRefs)
        Set mergeRange = sh.Range(GetCellAddress(CLng(cellRefs(idx)), CLng(5)) & ":" & _
            GetCellAddress(CLng(cellRefs(idx)), CLng(lastPlan)))
        mergeRange.UnMerge
    Next idx
    
    Do While currPlan <= planCount
        sNewCol = GetColAddress(startCol + currPlan - 1)
        newProdCol = sNewCol & "10"
        Set sourceRange = source.Range("DataEntryBlock")
        sourceRange.Copy
        Set destRange = sh.Range(newProdCol)
        destRange.Insert Shift:=xlToRight
        sh.Columns(sNewCol & ":" & sNewCol).ColumnWidth = 15
        
        'adding cell references so user can enter first plan and it will
        'mirror data if they choose to enter data by product average
        If currPlan > 1 Then
            sh.Cells(10, startCol).value = "    "
        Else
            sh.Cells(10, startCol).value = ""
        End If
        currPlan = currPlan + 1
    Loop
    
    'Update Effective Date formula field in WS1
    getLatestEffectiveDate
End Sub

Private Sub MergeCols(startCol As Long, planCount As Integer)
    Dim mergedCells() As String
    Dim idx As Integer
    Dim mergeRange As Range
    Dim sourceRange As Range
    Dim sh As Worksheet
    Dim cell As Range
    Dim iEnd As Long
    Dim lastPlan As Long

    Application.CutCopyMode = False
    Application.DisplayAlerts = False
    'Unlock sheets
    UnlockWorksheet ws2Name

    Set sh = Sheets(ws2Name)
    Set source = Sheets(ws2Source)
    lastPlan = FindLastPlan(ws2Name)

    'Merge cells that span all plans per product IF there are at least 2 plans
    If planCount > 1 Then
        mergedCells = Split(ws2MergeCellsForAllPlans, "|")
        'Merging cells that span all plans
        idx = 0
        Do While idx <= UBound(mergedCells)
            Set mergeRange = sh.Range(GetCellAddress(CLng(mergedCells(idx)), CLng(startCol)) & ":" & _
                GetCellAddress(CLng(mergedCells(idx)), CLng(startCol + planCount - 1)))
            mergeRange.Merge
            
            mergeRange.Borders(xlEdgeRight).LineStyle = XlLineStyle.xlContinuous

            idx = idx + 1
        Loop
    End If
    
    'Set Product Rate Increase formula IF there is at least 1 plan in the product
    If planCount > 0 Then
        Set cell = sh.Cells(ws2ProductRateIncreaseRow, startCol)
        BuildThresholdFormula GetFirstCol(cell), GetLastCol(cell), ws2ProductRateIncreaseRow
    End If
    
    
    'Merge cells that span all products IF there are at least 1 plan in worksheet
    If lastPlan >= 5 Then
        mergedCells = Split(ws2MergeCellsForAllProducts, "|")
        idx = 0
        Do While idx <= UBound(mergedCells)
            Set mergeRange = sh.Range(GetCellAddress(CLng(mergedCells(idx)), CLng(5)) & ":" & _
                GetCellAddress(CLng(mergedCells(idx)), CLng(lastPlan)))
            'Only merge if there are at least 2 plans
            If lastPlan > 5 Then
                mergeRange.Merge
            End If
            mergeRange.Borders(xlEdgeRight).LineStyle = XlLineStyle.xlContinuous
    
            idx = idx + 1
        Loop
        
        'Set Submission Level Rate Increase formula IF there is at least 1 plan in the worksheet
        BuildThresholdFormula 5, FindLastPlan(ws2Name), ws2SubmissionLevelRateIncreaseRow
    End If
    
    'Lock worksheet
    LockWorksheet ws2Name
    
    Application.DisplayAlerts = True
        
End Sub

Public Sub AddPlanToProd(startCol As Long, count As Integer, planId As String)
    Dim targetCol As Long

    targetCol = startCol + count

    'create new column
    If SheetHasRoom(ws2Name, 1) Then
        InsertCols targetCol, 1
        MergeCols startCol, count + 1
        SetFormulas
        MoveButtons
    Else
        MsgBox "There is no more room to add plans on this template.", vbOKOnly, "Template Maximum Plans Reached"
    
    End If

    'Fill in Plan ID and Product ID
    Sheets(ws2Name).Activate
    UnlockWorksheet ws2Name
    Cells(13, targetCol).value = planId
    LockWorksheet ws2Name
    
End Sub

Sub PasteValueWithoutFormat()
Attribute PasteValueWithoutFormat.VB_ProcData.VB_Invoke_Func = "v\n14"
    If (ActiveSheet.ProtectContents = True And Selection.Locked = False) Or (ActiveSheet.ProtectContents = False) Then
        On Error GoTo errorPasteTextOnly
            If Application.CutCopyMode <> False Then
                Selection.PasteSpecial Paste:=xlPasteValues
            Else
                ActiveSheet.PasteSpecial Format:="Text"
            End If
            Exit Sub
    End If

errorPasteTextOnly:
    Err.Clear
End Sub

Attribute VB_Name = "frmPlanID"
Attribute VB_Base = "0{0E34B07D-B18F-46D0-9840-E39973F31278}{83399785-811F-41CC-8517-8F24D894D352}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Public TitleText As String
Public FieldText As String
Private settingValue As Boolean


Private Sub UserForm_Initialize()

    Me.txtPlan.value = CStr(Sheets(ws1Name).Range("C4").value) + CStr(Sheets(ws1Name).Range("J3").value)

End Sub


Private Sub btnOk_Click()
    Dim startCol As Long
    Dim colCount As Integer
        
    If Len(Me.txtPlan.value) <> 14 Then
        MsgBox "Invalid: Plan ID must have a length of 14 characters"
    ElseIf Left(Me.txtPlan.value, 5) <> CStr(Sheets(ws1Name).Range("C4").value) Then
        MsgBox "Invalid: The first 5 characters of the Plan ID must match the Issuer ID that is present in cell C4 of the Market Experience worksheet"
    ElseIf Left(Mid(Me.txtPlan.value, 6), 2) <> CStr(Sheets(ws1Name).Range("J3").value) Then
        MsgBox "Invalid: The 6th and 7th character of the Plan ID must match the state abbreviation that is present in cell J3 of the Market Experience worksheet"
    Else
        searchResults = Application.Match(Left(Me.txtPlan.value, 10), Worksheets(ws2Name).Rows(11), 0)
        If IsError(searchResults) Then
            AddPlan Me.txtPlan
        Else
            colCount = Cells(10, searchResults).MergeArea.count
            AddPlanToProd CLng(searchResults), colCount, Me.txtPlan
        End If
        cancelDialog
    End If
    
End Sub

Private Sub btnCancel_Click()

    cancelDialog

End Sub

Private Sub Label1_Click()

End Sub


Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)

    If Not settingValue Then cancelDialog

End Sub

Private Sub cancelDialog()

    Me.Hide
    Unload Me

End Sub










Attribute VB_Name = "toXML"
Option Explicit
Private Const startRow As Long = 10
Private Const numCol As Long = 5

'Cell mapping for insuranceRateForecastTempVO - main XML file wrapper
Public Const Matrix_IRFT_VO As String = "C4,submittingIssuerHIOSIdentifier|C3,companyLegalName|J3,stateAbbreviationText|D12,experiencePeriodBeginningDate|" & _
    "E18,experiencePeriodPremiumAmount|E16,incurredClaimsInExperiencePeriodAmount|E14,allowedClaimsAmount|E19,experiencePeriodMemberMonthsQuantity|" & _
    "D42,projectedIndexRateStartDate|F44,riskAdjustmentPaymentPMPMAmount|F43,projectedReinsurancePMPMAmount|F48,projectedMemberMonthsQuantity|J4,poolingInsuranceMarketLevelType|" & _
    "F12,experiencePeriodEndingDate|C5,rateReviewEffectiveDate|F18,experiencePeriodPremiumPMPMAmount|F16,incurredClaimsInExperiencePeriodPMPMAmount|" & _
    "F14,allowedClaimsPMPMAmount|C30,totalExperiencePeriodIndexRatePMPMAmount|H30,totalTrendedEhbAllowedClaimsPMPMAmount|" & _
    "G44,totalProjectedRiskAdjustmentAmount|G43,totalReinsuranceAmount|F46,marketAdjustedIndexRateAmount|E15,reinsuranceAggregateAmount|" & _
    "F15,reinsurancePMPMAmount|E17,riskAdjustmentAmount|F17,riskAdjustmentPMPMAmount|D36,credibilityAdjustedEhbClaimsDate|F36,credibilityAdjustedEhbClaimsPMPMAmount|" & _
    "F32,morbidityAdjustmentPercent|F33,demographicShiftPercent|F34,planDesignChangePercent|F35,otherAdjustmentPercent|F42,projectedIndexRateAmount|" & _
    "G42,totalProjectedPeriodIndexRateAmount|F45,exchangeUserFeePMPMPercent|G45,totalProjectedPeriodExchangeUserFeeAmount|G46,totalProjectedPeriodMarketAdjustedRateAmount"

'Cell Mapping for insuranceRateForecastTempVO/collectedBenefitCategoryAllowedClaims - 1 object for each benefit category
Public Const Matrix_CBCAC_VO As String = "C,experiencePeriodIndexRatePMPMAmount|H,trendedEhbAllowedClaimsPMPMAmount|B,definingBenefitCostType|" & _
    "D,yearOneTrendCostRate|E,yearOneTrendUtilizationRate|F,yearTwoTrendCostRate|G,yearTwoTrendUtilizationRate"

'Cell Mapping for insuranceRateForecastTempVO/definedInsuranceRateForecastSectionChangeSummary - Wksh 2 Section 2 Totals
Public Const Matrix_DIRFSCS_W2S2_VO As String = "D33,memberMonthsQuantity|D32,premiumAmount|D26,allowedClaimsAmount|D30,incurredClaimsAmount|" & _
    "D42,incurredClaimsPMPMAmount|D38,allowedClaimsPMPMAmount|D27,reinsuranceAmount|D28,memberCostSharingAmount|D29,costSharingReductionAmount|D31,riskAdjustmentTransferAmount|" & _
    "D34,currentEnrollmentQuantity|D35,currentPremiumPMPMAmount|D36,lossRatio|D39,reinsurancePMPMAmount|D40,memberCostSharingPMPMAmount|D41,costSharingReductionPMPMAmount|" & _
    "D43,riskAdjustmentTransferPMPMAmount|D44,premiumPMPMAmount"

'Cell Mapping for insuranceRateForecastTempVO/definedInsuranceRateForecastSectionChangeSummary - Wksh 2 Section 4 Totals
Public Const Matrix_DIRFSCS_W2S4_VO As String = "D72,premiumAmount|D66,allowedClaimsAmount|D70,incurredClaimsAmount|D80,incurredClaimsPMPMAmount|" & _
    "D76,allowedClaimsPMPMAmount|D67,reinsuranceAmount|D68,memberCostSharingAmount|D69,costSharingReductionAmount|D71,riskAdjustmentTransferAmount|D74,lossRatio|" & _
    "D77,reinsurancePMPMAmount|D78,memberCostSharingPMPMAmount|D79,costSharingReductionPMPMAmount|D81,riskAdjustmentTransferPMPMAmount|D82,premiumPMPMAmount|D73,memberMonthsQuantity"

'Cell Mapping for insuranceRateForecastTempVO/changedInsuranceProductRateChange/associatingInsurancePlanRateChange
Public Const Matrix_AIPRC_VO As String = "20,rateCumulativeChangeQuantity|19,proposedRateEffectiveDate|13,basedInsurancePlanIdentifier|15,avMetalValueQuantity|18,exchangePlanIndicator|" & _
    "14,definingInsurancePlanBenefitMetalTierType|12,planName|17,planType|16,definingInsurancePlanCurrentStatusType"

'Cell Mapping for insuranceRateForecastTempVO/changedInsuranceProductRateChange/associatingInsurancePlanRateChange/insurancePlanRateChangePeriod - Wksh 2 Section 2 user-populated column
Public Const Matrix_PIPRCP_W2S2_VO As String = "33,memberMonthsQuantity|32,premiumAmount|26,allowedClaimsAmount|30,incurredClaimsAmount|42,incurredClaimsPMPMAmount|" & _
    "38,allowedClaimsPMPMAmount|27,reinsuranceAmount|28,memberCostSharingAmount|29,costSharingReductionAmount|31,riskAdjustmentTransferAmount|34,currentEnrollmentQuantity|35,currentPremiumPMPMAmount|" & _
    "36,lossRatio|39,reinsurancePMPMAmount|40,memberCostSharingPMPMAmount|41,costSharingReductionPMPMAmount|43,riskAdjustmentTransferPMPMAmount|44,premiumPMPMAmount"

'Cell Mapping for insuranceRateForecastTempVO/changedInsuranceProductRateChange/associatingInsurancePlanRateChange/insurancePlanRateChangePeriod - Wksh 2 Section 4 user-populated column
Public Const Matrix_PIPRCP_W2S4_VO As String = "72,premiumAmount|66,allowedClaimsAmount|70,incurredClaimsAmount|80,incurredClaimsPMPMAmount|76,allowedClaimsPMPMAmount|" & _
    "67,reinsuranceAmount|68,memberCostSharingAmount|69,costSharingReductionAmount|71,riskAdjustmentTransferAmount|74,lossRatio|77,reinsurancePMPMAmount|78,memberCostSharingPMPMAmount|" & _
    "79,costSharingReductionPMPMAmount|81,riskAdjustmentTransferPMPMAmount|82,premiumPMPMAmount|73,memberMonthsQuantity"

'Cell Mapping for insuranceRateForecastTempVO/changedInsuranceProductRateChange/associatingInsurancePlanRateChange/planAdjustmentFactor
Public Const Matrix_PAF_VO As String = "49,avAndCostSharingDesignOfPlanRatio|50,providerNetworkAdjustmentRatio|51,benefitInAdditionToEhbRatio|" & _
    "54,taxAndFeePercent|55,insurancePlanProfitAndRiskLoadPercent|56,catastrophicAdjustmentPercent|57,planAdjustedIndexRateAmount|" & _
    "62,calibratedPlanAdjustedIndexRateAmount|53,administrativeExpensePercent"
    
'Cell Mapping for insuranceRateForecastTempVO/planProductInformationComponent
Public Const Matrix_PPIC_VO As String = "22,submissionLevelRateIncreasePercent|59,ageCalibrationFactorRatio|60,geographicCalibrationFactorRatio|61,tobaccoCalibrationFactorRatio"

    
Public Function convertXML()

    Dim ws1 As Worksheet
    Dim ws2 As Worksheet
    Dim ws3 As Worksheet
    Dim addr As String
    Dim nodeName As String
    Dim objFile As DOMDocument
    Dim objOI As IXMLDOMProcessingInstruction
    Dim objTop As IXMLDOMNode
    Dim objMainSection As IXMLDOMElement
    Dim objSection As IXMLDOMElement
    Dim objSubSection As IXMLDOMElement
    Dim objElement As IXMLDOMElement
    Dim cellElement As IXMLDOMElement
    Dim cellVal As IXMLDOMElement
    Dim cellLocation As IXMLDOMElement
    Dim nameSpace As String
    Dim Matrix() As String
    Dim sTemp() As String
    Dim idx As Integer
    Dim rowIdx As Integer
    Dim cell As Range
    Dim prodIdx As Long
    Dim planIdx As Long
    Dim lastRow As Long
    Dim sTempValue As String
    Dim bNoZeroFill As Boolean
    Dim versionNum As String
    
    
    nameSpace = "http://vo.urr.oversight.ff.cms.hhs.gov"
    Set ws1 = ThisWorkbook.Sheets(ws1Name)
    Set ws2 = ThisWorkbook.Sheets(ws2Name)
    Set ws3 = ThisWorkbook.Sheets(ws3Name)
        
    Set objFile = New DOMDocument
    objFile.async = False
    objFile.validateonparse = False
    
    'first check if the file exists
    Dim file_name As Variant
    file_name = Application.GetSaveAsFilename("UnifiedRateReviewSubmission", FileFilter:="XML File (*.xml), *xml")
    file_name = Replace(file_name, ".xml", "_" & Format(Date, "yyyymmdd") & Format(Time, "hms") & ".xml")
        
    If file_name = False Then
        Exit Function
    ElseIf Dir(file_name) <> "" Then
        Kill file_name
    End If
        
    objFile.Load (file_name)
    
    Set objOI = objFile.createProcessingInstruction("xml", "version='1.0'")
    objFile.appendChild objOI
        
    Set objTop = objFile.createNode(1, "insuranceRateForecastTempVO", nameSpace)
    objFile.appendChild objTop
    
    'get the version number
    versionNum = getVersion(ws1.Range("B1").text)

    'set version number in object
    Set objElement = objFile.createNode(1, "templateVersion", nameSpace)
    objElement.text = versionNum
    objTop.appendChild objElement
    
    'insuranceRateForecastTempVO - WORKSHEET 1
    Matrix = Split(Matrix_IRFT_VO, "|")
    
    idx = 0
    Do While idx <= UBound(Matrix)
        sTemp = Split(Matrix(idx), ",")
        addr = sTemp(0)
        nodeName = sTemp(1)
        Set cell = ws1.Range(addr).Cells
        
        Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell))

        objTop.appendChild objElement
        idx = idx + 1
    Loop

    'collectedBenefitCategoryAllowedClaims nodes - WORKSHEET 1
    Matrix = Split(Matrix_CBCAC_VO, "|")
    
    For rowIdx = 24 To 29
        'checking to see if Benefit Category contains data
        Set objSection = objFile.createNode(1, "collectedBenefitCategoryAllowedClaims", nameSpace)
        objTop.appendChild objSection
        idx = 0
        Do While idx <= UBound(Matrix)
            sTemp = Split(Matrix(idx), ",")
            addr = sTemp(0) & CStr(rowIdx)
            nodeName = sTemp(1)
            Set cell = ws1.Range(addr).Cells
            Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell))
            objSection.appendChild objElement
            idx = idx + 1
        Loop
    Next rowIdx
    
    
    'manualEHBAllowedClaimsPMPMAmount after benefit category objects
    Set cell = ws1.Range("F38").Cells
    nodeName = "manualEhbAllowedClaimsPMPMAmount"
    Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell))
    objTop.appendChild objElement
        
    'appliedCredibilityPercentAmount after benefit category objects and manualEHBAllowedClaimsPMPMAmount
    Set cell = ws1.Range("F39").Cells
    nodeName = "appliedCredibilityPercent"
    Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell))
    objTop.appendChild objElement
    
    
    'ratingAreaComponent - WORKSHEET 3
    lastRow = FindLastRow(ws3Name)
    For Each cell In ws3.Range("A6:" & "A" & lastRow)
        Set objSection = objFile.createNode(1, "ratingAreaComponent", nameSpace)
        objTop.appendChild objSection
        
        nodeName = "ratingAreaIdentifier"
        Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell))
        objSection.appendChild objElement
        
        nodeName = "ratingFactorRatio"
        Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell.Offset(0, 1)), gValue(cell.Offset(0, 1)), gFormula(cell.Offset(0, 1)))
        objSection.appendChild objElement
    Next cell
    
    'planProductInformationComponent - WORKSHEET 2 - Fields that span across all products
    Matrix = Split(Matrix_PPIC_VO, "|")
    Set objSection = objFile.createNode(1, "planProductInformationComponent", nameSpace)
    objTop.appendChild objSection
    idx = 0
    Do While idx <= UBound(Matrix)
        sTemp = Split(Matrix(idx), ",")
        addr = "E" & CInt(sTemp(0))
        nodeName = sTemp(1)
        Set cell = ws2.Range(addr).Cells
        Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell))

        objSection.appendChild objElement
        idx = idx + 1
    Loop
    
    'definedInsuranceRateForecastSectionChangeSummary - WORKSHEET 2 Section II Totals
    Set objSection = objFile.createNode(1, "definedInsuranceRateForecastSectionChangeSummary", nameSpace)
    objTop.appendChild objSection
    Matrix = Split(Matrix_DIRFSCS_W2S2_VO, "|")
    
    idx = 0
    Do While idx <= UBound(Matrix)
        sTemp = Split(Matrix(idx), ",")
        addr = sTemp(0)
        nodeName = sTemp(1)
        Set cell = ws2.Range(addr).Cells
        
        Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell))

        objSection.appendChild objElement
        idx = idx + 1
    Loop
    nodeName = "definingInsuranceRateForecastSectionType"
    Set objElement = MakeNode(objFile, nameSpace, nodeName, "", "ExperiencePeriodTotals", "")
    objSection.appendChild objElement
    
    'definedInsuranceRateForecastSectionChangeSummary - WORKSHEET 2 Section IV Totals
    Set objSection = objFile.createNode(1, "definedInsuranceRateForecastSectionChangeSummary", nameSpace)
    objTop.appendChild objSection
    Matrix = Split(Matrix_DIRFSCS_W2S4_VO, "|")
    
    idx = 0
    Do While idx <= UBound(Matrix)
        sTemp = Split(Matrix(idx), ",")
        addr = sTemp(0)
        nodeName = sTemp(1)
        Set cell = ws2.Range(addr).Cells
        
        Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell))

        objSection.appendChild objElement
        idx = idx + 1
    Loop
    nodeName = "definingInsuranceRateForecastSectionType"
    Set objElement = MakeNode(objFile, nameSpace, nodeName, "", "ProjectedPeriodTotals", "")
    objSection.appendChild objElement
    
    'changedInsuranceProductRateChange for each product group
    FindProducts
    For prodIdx = 0 To UBound(productDetails)
        'adding elements for InsuranceProductRateChangeTempVO (1 for each product)
        Set objMainSection = objFile.createNode(1, "changedInsuranceProductRateChange", nameSpace)
        objTop.appendChild objMainSection
                
        addr = GetColAddress(productDetails(prodIdx).ws2Start) & "11"
        nodeName = "hiosInsuranceProductIdentifier"
        Set cell = ws2.Range(addr).Cells
        Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell))
        objMainSection.appendChild objElement
        
        addr = GetColAddress(productDetails(prodIdx).ws2Start) & "10"
        nodeName = "productName"
        Set cell = ws2.Range(addr).Cells
        Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell))
        objMainSection.appendChild objElement

        addr = GetColAddress(productDetails(prodIdx).ws2Start) & "21"
        nodeName = "weightedAverageProductRateChangePercentQuantity"
        Set cell = ws2.Range(addr).Cells
        Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormulaArray(cell))
        objMainSection.appendChild objElement
        
        'adding elements for InsurancePlanRateChangeTempVO (one for each Plan in Product)
        For planIdx = productDetails(prodIdx).ws2Start To productDetails(prodIdx).ws2End
            Set objSection = objFile.createNode(1, "associatingInsurancePlanRateChange", nameSpace)
            objMainSection.appendChild objSection
            Matrix = Split(Matrix_AIPRC_VO, "|")
            idx = 0
            Do While idx <= UBound(Matrix)
                sTemp = Split(Matrix(idx), ",")
                addr = GetColAddress(planIdx) & sTemp(0)
                nodeName = sTemp(1)
                Set cell = ws2.Range(addr).Cells
                Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell))
                objSection.appendChild objElement
                idx = idx + 1
            Loop
            
            'adding elements for InsurancePlanRateChangePeriodTempVO (section 2 from Worksheet 2)
            Matrix = Split(Matrix_PIPRCP_W2S2_VO, "|")
            Set objSubSection = objFile.createNode(1, "insurancePlanRateChangePeriod", nameSpace)
            objSection.appendChild objSubSection
            idx = 0
            Do While idx <= UBound(Matrix)
                sTemp = Split(Matrix(idx), ",")
                addr = GetColAddress(planIdx) & CInt(sTemp(0))
                nodeName = sTemp(1)
                Set cell = ws2.Range(addr).Cells
                Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell))
                
                objSubSection.appendChild objElement
                idx = idx + 1
            Loop
            nodeName = "definingInsuranceRateCostPeriodType"
            Set objElement = MakeNode(objFile, nameSpace, nodeName, "", "ExperiencePeriod", "")
            objSubSection.appendChild objElement
        
            'adding elements for InsurancePlanRateChangePeriodTempVO (section 4 from Worksheet 2)
            Matrix = Split(Matrix_PIPRCP_W2S4_VO, "|")
            Set objSubSection = objFile.createNode(1, "insurancePlanRateChangePeriod", nameSpace)
            objSection.appendChild objSubSection
            idx = 0
            Do While idx <= UBound(Matrix)
                sTemp = Split(Matrix(idx), ",")
                addr = GetColAddress(planIdx) & CInt(sTemp(0))
                nodeName = sTemp(1)
                Set cell = ws2.Range(addr).Cells
                Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell))
    
                objSubSection.appendChild objElement
                idx = idx + 1
            Loop
            nodeName = "definingInsuranceRateCostPeriodType"
            Set objElement = MakeNode(objFile, nameSpace, nodeName, "", "ProjectedPeriod", "")
            objSubSection.appendChild objElement
            
            'adding elements for planAdjustmentFactor
            Matrix = Split(Matrix_PAF_VO, "|")
            Set objSubSection = objFile.createNode(1, "planAdjustmentFactor", nameSpace)
            objSection.appendChild objSubSection
            idx = 0
            Do While idx <= UBound(Matrix)
                sTemp = Split(Matrix(idx), ",")
                addr = GetColAddress(planIdx) & CInt(sTemp(0))
                nodeName = sTemp(1)
                
                Set cell = ws2.Range(addr).Cells
                Set objElement = MakeNode(objFile, nameSpace, nodeName, getFullAddress(cell), gValue(cell), gFormula(cell))
    
                objSubSection.appendChild objElement
                idx = idx + 1
            Loop
        Next planIdx
    Next prodIdx
    
    objFile.Save file_name
    
    MsgBox "This template has been exported to an xml file named: " & file_name
    
End Function


Public Function gValue(cell As Range) As String
    Dim sRet As String
    
    If IsError(cell) Then
        sRet = ""
    Else
        If Not IsEmpty(cell.value) Then
            sRet = Trim$(cell.value)
        Else
            sRet = ""
        End If
    End If
    gValue = sRet

End Function

Private Function gFormula(cell As Range) As String
    Dim sRet As String
    
    If IsError(cell) Then
        sRet = ""
    Else
        If Not IsEmpty(cell.value) Then
            sRet = Trim$(cell.Formula)
        Else
            sRet = ""
        End If
    End If
    gFormula = sRet

End Function

Private Function gFormulaArray(cell As Range) As String
    Dim sRet As String
    
    If IsError(cell) Then
        sRet = ""
    Else
        If Not IsEmpty(cell.value) Then
            sRet = Trim$(cell.FormulaArray)
        Else
            sRet = ""
        End If
    End If
    gFormulaArray = sRet

End Function

Private Function MakeNode(ByRef objFile As DOMDocument, nameSpace As String, nodeName As String, _
    cellAddress As String, cellValue As String, cellFormula As String, Optional NoZeroFill As Boolean = False) As IXMLDOMElement

    Dim newElement As IXMLDOMElement
    Dim cellAddressNode As IXMLDOMElement
    Dim cellValueNode As IXMLDOMElement
    Dim cellFormulaNode As IXMLDOMElement
    
    'creating node
    If Not NoZeroFill Then
        If cellValue = "" Then
            cellValue = "0"
        End If
    End If
    Set newElement = objFile.createNode(1, nodeName, nameSpace)
    'adding cellAddress sub element
    Set cellAddressNode = objFile.createNode(1, "cellLocation", nameSpace)
    cellAddressNode.text = cellAddress
    newElement.appendChild cellAddressNode
    'adding cellValue sub element
    Set cellValueNode = objFile.createNode(1, "cellValue", nameSpace)
    cellValueNode.text = cellValue
    newElement.appendChild cellValueNode
    'adding cellFormula sub element
    If Left$(cellFormula, 1) = "=" Then
        'stripping leading = from formulas
        cellFormula = Mid$(cellFormula, 2, Len(cellFormula) - 1)
    End If
    Set cellFormulaNode = objFile.createNode(1, "cellFormula", nameSpace)
    cellFormulaNode.text = cellFormula
    newElement.appendChild cellFormulaNode
    
    Set MakeNode = newElement

End Function

' InQuest injected base64 decoded content
' xZ+y
' fz{Oz
' fz{Oz
' xZ+y
' xZ+y
' z{b~'
' xZ+y
' xZ+y
' jQ!l	e
' bn)b
' xZ+y
' *'O*^
' *,"{.

INQUEST-PP=macro
