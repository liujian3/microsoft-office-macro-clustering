Attribute VB_Name = "Module1"
' IBAN functions
' isValidIBANAccount
Function isValidIBANAccount(IBANAcc, BIC) As Boolean
    Dim tmpAcc As String, tmpIBANAcc As String, sSum As Long, weight(44) As Long, ii As Long
    isValidIBANAccount = False
    If (Len(IBANAcc) <> 22) Or (Not (IsNumeric(Mid(IBANAcc, 3, 2)))) Or _
       (Mid(IBANAcc, 1, 2) <> "BG") Or (Mid(IBANAcc, 5, 4) <> Mid(BIC, 1, 4)) Then
        Exit Function
    End If
    tmpAcc = ""
    tmpIBANAcc = Mid(IBANAcc, 5, 18) & Mid(IBANAcc, 1, 4)
    sSum = 0
    weight(1) = 1
    weight(2) = 10
    weight(3) = 3
    weight(4) = 30
    weight(5) = 9
    weight(6) = 90
    weight(7) = 27
    weight(8) = 76
    weight(9) = 81
    weight(10) = 34
    weight(11) = 49
    weight(12) = 5
    weight(13) = 50
    weight(14) = 15
    weight(15) = 53
    weight(16) = 45
    weight(17) = 62
    weight(18) = 38
    weight(19) = 89
    weight(20) = 17
    weight(21) = 73
    weight(22) = 51
    weight(23) = 25
    weight(24) = 56
    weight(25) = 75
    weight(26) = 71
    weight(27) = 31
    weight(28) = 19
    weight(29) = 93
    weight(30) = 57
    weight(31) = 85
    weight(32) = 74
    weight(33) = 61
    weight(34) = 28
    weight(35) = 86
    weight(36) = 84
    weight(37) = 64
    weight(38) = 58
    weight(39) = 95
    weight(40) = 77
    weight(41) = 91
    weight(42) = 37
    weight(43) = 79
    weight(44) = 14
    
    For ii = 1 To Len(tmpIBANAcc)
        tmpAcc = tmpAcc & GetCharWeight(Mid(tmpIBANAcc, ii, 1))
    Next
    For ii = 1 To Len(tmpAcc)
        sSum = sSum + weight(Len(tmpAcc) + 1 - ii) * CLng(Mid(tmpAcc, ii, 1))
    Next
    sSum = (sSum Mod 97)
    If sSum = 1 Then
        isValidIBANAccount = True
    Else
        isValidIBANAccount = False
    End If
End Function
' IBAN GetCharWeight
Function GetCharWeight(strChar) As String
    Select Case strChar
        Case "0", "1", "2", "3", "4", "5", "6", "7", "8", "9"
        GetCharWeight = strChar
        Case "A"
        GetCharWeight = "10"
        Case "B"
        GetCharWeight = "11"
        Case "C"
        GetCharWeight = "12"
        Case "D"
        GetCharWeight = "13"
        Case "E"
        GetCharWeight = "14"
        Case "F"
        GetCharWeight = "15"
        Case "G"
        GetCharWeight = "16"
        Case "H"
        GetCharWeight = "17"
        Case "I"
        GetCharWeight = "18"
        Case "J"
        GetCharWeight = "19"
        Case "K"
        GetCharWeight = "20"
        Case "L"
        GetCharWeight = "21"
        Case "M"
        GetCharWeight = "22"
        Case "N"
        GetCharWeight = "23"
        Case "O"
        GetCharWeight = "24"
        Case "P"
        GetCharWeight = "25"
        Case "Q"
        GetCharWeight = "26"
        Case "R"
        GetCharWeight = "27"
        Case "S"
        GetCharWeight = "28"
        Case "T"
        GetCharWeight = "29"
        Case "U"
        GetCharWeight = "30"
        Case "V"
        GetCharWeight = "31"
        Case "W"
        GetCharWeight = "32"
        Case "X"
        GetCharWeight = "33"
        Case "Y"
        GetCharWeight = "34"
        Case "Z"
        GetCharWeight = "35"
        Case Else
        GetCharWeight = ""
    End Select
End Function
'GetAADate
' Returns Date as yyyymmdd
Function GetAADate(ccDate) As String
    Dim y, m, d
    GetAADate = ""
    If IsDate(ccDate) Then
        y = AddLeadZero(FormatNumber(Year(ccDate), 0, vbFalse, vbFalse, vbFalse))
        m = AddLeadZero(FormatNumber(Month(ccDate), 0, vbFalse, vbFalse, vbFalse))
        d = AddLeadZero(FormatNumber(Day(ccDate), 0, vbFalse, vbFalse, vbFalse))
        GetAADate = y & m & d
    End If
End Function
' AddLeadZero
' Returns two digits number
Function AddLeadZero(cValue) As String
   If (Len(CStr(cValue)) < 3) And (Len(CStr(cValue)) > 0) Then
      AddLeadZero = String(2 - Len(CStr(cValue)), "0") + CStr(cValue)
   Else
      AddLeadZero = CStr(cValue)
   End If
End Function
' OnlyDigits
Function OnlyDigits(s2Test) As Boolean
    Dim tmpFN
    If IsNumeric(s2Test) Then
        tmpFN = FormatNumber(s2Test, 0, vbTrue, vbFalse, vbFalse)
        'MsgBox (tmpFN)
        'MsgBox (s2Test)
        If Mid(s2Test, 1 + Len(s2Test) - Len(tmpFN), Len(tmpFN)) = tmpFN Then
            OnlyDigits = True
        Else
            OnlyDigits = False
        End If
    Else
        OnlyDigits = False
    End If
End Function
' IsRealEGN
Function IsRealEGN(EGN2Test) As Boolean
    Dim weight(10) As Integer, sSum As Long, ii As Integer, nDay, nMonth, nYear
    IsRealEGN = False
    If (Len(EGN2Test) <> 10) Or (Not (OnlyDigits(EGN2Test))) Then
        Exit Function
    End If
    sSum = 0
    weight(1) = 2
    weight(2) = 4
    weight(3) = 8
    weight(4) = 5
    weight(5) = 10
    weight(6) = 9
    weight(7) = 7
    weight(8) = 3
    weight(9) = 6
    For ii = 1 To 9
        sSum = sSum + weight(ii) * CLng(Mid(EGN2Test, ii, 1))
    Next
    sSum = (sSum Mod 11) Mod 10
    If CLng(Mid(EGN2Test, 10, 1)) <> CLng(sSum) Then
        Exit Function
    End If
    nDay = Mid(EGN2Test, 5, 2)
    nMonth = Mid(EGN2Test, 3, 2)
    nYear = Mid(EGN2Test, 1, 2)
    If 31 < nDay Then
        Exit Function
    End If
    If Not (((nMonth >= 1) And (nMonth <= 12)) Or ((nMonth >= 21) And (nMonth <= 32)) Or ((nMonth >= 41) And (nMonth <= 52))) Then
        Exit Function
    End If
    IsRealEGN = True
End Function
'isValidBULSTAT
Function isValidBULSTAT(Bulstat2Test) As Boolean
    isValidBULSTAT = False
    If isValidBULSTAT9(Bulstat2Test) Then
        isValidBULSTAT = True
    End If
    If isValidBULSTAT13(Bulstat2Test) Then
        isValidBULSTAT = True
    End If
End Function
' isValidBULSTAT9
Function isValidBULSTAT9(Bulstat2Test) As Boolean
    Dim sum, k
    isValidBULSTAT9 = False
    If (Len(Bulstat2Test) <> 9) Or (Not (OnlyDigits(Bulstat2Test))) Then
        Exit Function
    End If
    sum = 0
    For k = 1 To 8
        sum = sum + Mid(Bulstat2Test, k, 1) * k
    Next
    sum = sum Mod 11
    
    If (sum = 10) Then
        sum = 0
        For k = 1 To 8
            sum = sum + Mid(Bulstat2Test, k, 1) * (k + 2)
        Next
        sum = (sum Mod 11) Mod 10
    End If
    If CLng(Mid(Bulstat2Test, 9, 1)) = CLng(sum) Then
        isValidBULSTAT9 = True
    End If
End Function
' isValidBULSTAT13
Function isValidBULSTAT13(Bulstat2Test) As Boolean
    Dim sum, k, weight(4), weight1(4)
    isValidBULSTAT13 = False
    If (Len(Bulstat2Test) <> 13) Or (Not (OnlyDigits(Bulstat2Test))) Then
        Exit Function
    End If
    If Not isValidBULSTAT9(Mid(Bulstat2Test, 1, 9)) Then
        
        Exit Function
    End If
    weight(1) = 2
    weight(2) = 7
    weight(3) = 3
    weight(4) = 5
    weight1(1) = 4
    weight1(2) = 9
    weight1(3) = 5
    weight1(4) = 7
    sum = 0
    For k = 9 To 12
        sum = sum + Mid(Bulstat2Test, k, 1) * weight(k - 8)
    Next
    sum = sum Mod 11
    
    If (sum = 10) Then
        sum = 0
        For k = 9 To 12
            sum = sum + Mid(Bulstat2Test, k, 1) * weight1(k - 8)
        Next
        sum = (sum Mod 11) Mod 10
    End If
    If CLng(Mid(Bulstat2Test, 13, 1)) = CLng(sum) Then
        isValidBULSTAT13 = True
    End If
End Function

Attribute VB_Name = "Module2"
    Option Explicit
    ' Sheets
    Const Sheet_Work = "Form", Sheet_Budjet = "Budjet"
    
    Const MaxNumberOfRows = 1000, ColumhHeaderOffset = 1
    
    Const DatePaymentCell = "B4", PayerCell = "B5", AccountCell = "B6", BAECell = "B7", TypePaymentHCell = "B8"
    Const AddReasonCell = "B9", FileNameCell = "B10", TotalSumCell = "B11", TotalCountCell = "B12"
    
    Const OKStr = "OK.", BadData = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd|."
    Const strRINGS = "|fffd||fffd||fffd||fffd||fffd|", strBISERA = "|fffd||fffd||fffd||fffd||fffd||fffd|", str313 = "313"
    
    
    Const MinLenName = 1, MaxLenName = 35, LenBAE = 8, MinLenBankName = 1, MaxLenBankName = 35
    Const LenAccount = 22, LenDate = 8, LenEGN = 10
    Const maxLenSum = 13, minLenReason = 1, maxLenReason = 70
    Const minLenTypePayment = 6, maxLenTypePayment = 6
    Const MinLenDocument = 1, MaxLenDocument = 17
    
    Const minLenFileName = 5, maxLenFileName = 255
    
    Const BadHeaderData = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|(|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|)"
    Const CResultOfTest = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
    
    'Const ColumnResultTestOffset = "1"
    Const strDeleitel = ";"
    Const cCurency = "BGN"
    
    Const SuccFile = "|fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
    Const BadFile = "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|."
    
    Const ForReading = 1
    Const ForWriting = 2
    Const ForAppending = 8
    

Global ColumnName As String, ColumnBAE As String, ColumnAccount As String, ColumnBankName As String, ColumnSum As String, ColumnReason As String, ColumnResultTest As String, ColumnExecDate As String, ColumnLN4ZadalgenoLice As String, ColumnTypePayment As String



Global DatePayment As String, Payer As String, Account As String, BAE As String, BankName As String, ZFileName As String, TypePaymentH As String, LN4ZadalgenoLice As String
Global TotalSum As Double, TotalRecords As Long

Global tmpName As String, tmpEGN As String, tmpBAE As String, tmpAccount As String
Global tmpBankName As String, tmpSum As String, tmpReason As String, tmpResulTest As String, tmpResult As String, tmpExecDate As String, tmpTypePayment

Global Sheet_Data As String
Global ResultOfTest As String, ResultOfHTest As String
Global omp As String, PaymentType As String


Global tmpBIN, tmpDocument, DataDocument, DataOt, DataDo, Paragraf, ZadalgenoLice, Bulstat, EGNZadalgenoLice, DNomerZadalgenoLice
Global ColumnDocument, ColumnBIN, ColumnDataDocument, ColumnDataOt, ColumnDataDo, ColumnZadalgenoLice, ColumnBulstat, ColumnEGNZadalgenoLice


Global BodyStr

' ResultTest - For Button Test click
Sub ResultTest()
    ' Init Variables
    Call InitVars
    ' Test Data Rows
    Call TestDataRow
    ' Test Header Row Data
    If TestHeaderRow Then
        ResultOfTest = CResultOfTest & vbNewLine & ResultOfHTest
        Sheets(Sheet_Data).Select
        Range(ColumnResultTest & "2").Select
        MsgBox (ResultOfTest)
    Else
        ResultOfTest = BadHeaderData & vbNewLine & ResultOfHTest
        MsgBox (ResultOfTest)
    End If
End Sub
' InitVars
Sub InitVars()

        Sheet_Data = Sheet_Budjet
        omp = "OBP"
        PaymentType = "BP"
        
        ColumnName = "A"
        ColumnAccount = "B"
        ColumnBAE = "C"
        ColumnTypePayment = "D"
        ColumnBankName = "E"
        ColumnSum = "F"
        ColumnReason = "G"
        
        ColumnDocument = "H"
        ColumnDataDocument = "I"
        ColumnDataOt = "J"
        ColumnDataDo = "K"
        
        ColumnZadalgenoLice = "L"
        ColumnBulstat = "M"
        ColumnEGNZadalgenoLice = "N"
        ColumnLN4ZadalgenoLice = "O"
        ColumnExecDate = "P"
        
        ColumnResultTest = "Q"
        
    
End Sub
'TestHeaderRow
Function TestHeaderRow() As Boolean

    TestHeaderRow = True
    ResultOfHTest = ""
    
    ' Date of Payment
    DatePayment = GetAADate(Worksheets(Sheet_Work).Range(DatePaymentCell).Value)
    If (Len(DatePayment) <> LenDate) Then
        TestHeaderRow = False
        ResultOfHTest = ResultOfHTest & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & DatePayment & vbNewLine
    End If
    
    ' Header Firm
    Payer = Trim(Worksheets(Sheet_Work).Range(PayerCell).Value)
    If (Len(Payer) < MinLenName) Or (Len(Payer) > MaxLenName) Then
        TestHeaderRow = False
        ResultOfHTest = ResultOfHTest & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|: " & Payer & vbNewLine
    End If
    
    ' Header BAE
    BAE = Trim(Worksheets(Sheet_Work).Range(BAECell).Value)
    If Not (Len(BAE) = LenBAE) Then
        TestHeaderRow = False
        ResultOfHTest = ResultOfHTest & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|: " & BAE & vbNewLine
    End If
    
    ' Header Account
    Account = Trim(Worksheets(Sheet_Work).Range(AccountCell).Value)
    If Not isValidIBANAccount(Account, BAE) Then
        TestHeaderRow = False
        ResultOfHTest = ResultOfHTest & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|: " & Account & vbNewLine
    End If
    
    ' File to Save
    ZFileName = Trim(Worksheets(Sheet_Work).Range(FileNameCell).Value)
    If (Len(ZFileName) < minLenFileName) Or (Len(ZFileName) > maxLenFileName) Then
        TestHeaderRow = False
        ResultOfHTest = ResultOfHTest & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|: " & ZFileName & vbNewLine
    End If
    
    ' Total Sum
    If IsNumeric(Worksheets(Sheet_Work).Range(TotalSumCell).Value) Then
        TotalSum = CDbl(Worksheets(Sheet_Work).Range(TotalSumCell).Value)
    Else
        TotalSum = 0
    End If
    If TotalSum <= 0 Then
        TestHeaderRow = False
        ResultOfHTest = ResultOfHTest & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|: " & TotalSum & vbNewLine
    End If
    
    ' Total Payments rows
    If IsNumeric(Worksheets(Sheet_Work).Range(TotalCountCell).Value) Then
        TotalRecords = CLng(Worksheets(Sheet_Work).Range(TotalCountCell).Value)
    Else
        TotalRecords = 0
    End If
    If TotalRecords <= 0 Then
        TestHeaderRow = False
        ResultOfHTest = ResultOfHTest & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd|e|fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & TotalRecords & vbNewLine
    End If
    
    ' TypePaymentH
    TypePaymentH = Trim(Worksheets(Sheet_Work).Range(TypePaymentHCell).Value)
    If Not isValidTypePayment(TypePaymentH, Account) Then
        TestHeaderRow = False
        ResultOfHTest = ResultOfHTest & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd|: " & TypePaymentH & vbNewLine
    End If
    
End Function


' TestData
' Tests Stuff data and fills TotalSum and Total Count
Sub TestDataRow()
    Dim i, TSum, TCount, tmpCell
    TSum = 0
    TCount = 0
    For i = 1 To CLng(MaxNumberOfRows)
    
        tmpCell = ColumnResultTest & FormatNumber(CLng(i + ColumhHeaderOffset), 0, vbTrue, vbFalse, vbFalse)
        tmpResult = ""
        ' Clear the result cell
        Worksheets(Sheet_Data).Range(tmpCell).Value = tmpResult
        Call ReadTmpValues(i + ColumhHeaderOffset)
        If Len(tmpName) > 0 Then
            If isValidName(tmpName) And isValidBAE(tmpBAE) And isValidIBANAccount(tmpAccount, tmpBAE) _
            And isValidBankName(tmpBankName) And isValidSum(tmpSum) And isValidReason(tmpReason) _
            And isValidTypePayment(tmpTypePayment, tmpAccount) And isValidDocument(tmpDocument, DataDocument, DataOt, DataDo) _
            And isValidName(ZadalgenoLice) And isValidDataLice(Bulstat, EGNZadalgenoLice, LN4ZadalgenoLice) Then
                
             ' Add total Sum and Count
             TSum = TSum + CDbl(tmpSum)
             TCount = TCount + 1
             ' write OK message to result column
             Worksheets(Sheet_Data).Range(tmpCell).Value = OKStr & tmpResult
                
            Else
                ' Write a Bad Data message
                Worksheets(Sheet_Data).Range(tmpCell).Value = BadData & tmpResult
            End If
        End If
    Next
    ' Write Total Sum And Total Records to Form Sheet
    Worksheets(Sheet_Work).Range(TotalSumCell).Value = TSum
    Worksheets(Sheet_Work).Range(TotalCountCell).Value = TCount
End Sub

' ReadTmpValues
' Read and load a row od detals data
Sub ReadTmpValues(nRow)
    Dim tmpCell, cnRow
    cnRow = FormatNumber(CLng(nRow), 0, vbTrue, vbFalse, vbFalse)
    
    tmpCell = ColumnName & cnRow
    tmpName = Trim(Worksheets(Sheet_Data).Range(tmpCell).Value)
    
    tmpCell = ColumnAccount & cnRow
    tmpAccount = Trim(Worksheets(Sheet_Data).Range(tmpCell).Value)
    
    tmpCell = ColumnBAE & cnRow
    tmpBAE = Trim(Worksheets(Sheet_Data).Range(tmpCell).Value)
    
    tmpCell = ColumnTypePayment & cnRow
    tmpTypePayment = Trim(Worksheets(Sheet_Data).Range(tmpCell).Value)
    
    tmpCell = ColumnBankName & cnRow
    tmpBankName = Trim(Worksheets(Sheet_Data).Range(tmpCell).Value)
    
    tmpCell = ColumnSum & cnRow
    tmpSum = Trim(Worksheets(Sheet_Data).Range(tmpCell).Value)
    
    tmpCell = ColumnReason & cnRow
    tmpReason = LTrim(Worksheets(Sheet_Work).Range(AddReasonCell).Value) & " " & Trim(Worksheets(Sheet_Data).Range(tmpCell).Value)
        
    tmpCell = ColumnDocument & cnRow
    tmpDocument = Trim(Worksheets(Sheet_Data).Range(tmpCell).Value)
        
    tmpCell = ColumnDataDocument & cnRow
    DataDocument = GetAADate(Worksheets(Sheet_Data).Range(tmpCell).Value)
        
    tmpCell = ColumnDataOt & cnRow
    DataOt = GetAADate(Worksheets(Sheet_Data).Range(tmpCell).Value)
        
    tmpCell = ColumnDataDo & cnRow
    DataDo = GetAADate(Worksheets(Sheet_Data).Range(tmpCell).Value)
        
    tmpCell = ColumnZadalgenoLice & cnRow
    ZadalgenoLice = Trim(Worksheets(Sheet_Data).Range(tmpCell).Value)
        
    tmpCell = ColumnBulstat & cnRow
    Bulstat = Trim(Worksheets(Sheet_Data).Range(tmpCell).Value)
        
    tmpCell = ColumnEGNZadalgenoLice & cnRow
    EGNZadalgenoLice = Trim(Worksheets(Sheet_Data).Range(tmpCell).Value)
        
    tmpCell = ColumnLN4ZadalgenoLice & cnRow
    LN4ZadalgenoLice = Trim(Worksheets(Sheet_Data).Range(tmpCell).Value)
    
    tmpCell = ColumnExecDate & cnRow
    tmpExecDate = GetAADate(Trim(Worksheets(Sheet_Data).Range(tmpCell).Value))
    
    tmpCell = ColumnResultTest & cnRow
    tmpResulTest = Worksheets(Sheet_Data).Range(tmpCell).Value
    
End Sub
' PrepareTextFile - For Button click
Sub PrepareTextFile()
    ' Init Variables
    Call InitVars
    ' Test Data and Fill Total sum and count of staff
    Call TestDataRow
    ' Test Header Row again
    If TestHeaderRow() Then
        If MakeFile() Then
            ' Success
            MsgBox (SuccFile)
        Else
            ' Bad WriteDetails
             MsgBox (BadFile)
        End If
    Else
        MsgBox (BadHeaderData)
    End If
End Sub
Function MakeFile() As Boolean
    Dim fso, tsFile, i
    On Error Resume Next
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set tsFile = fso.OpenTextFile(ZFileName, ForWriting, True)
    If Err.Number = 0 Then
    
    ' NOT FULL READY
        
        ' Write Header Row
        tsFile.Write omp & strDeleitel & PaymentType & strDeleitel & DatePayment & strDeleitel & BAE & strDeleitel & Account & _
        strDeleitel & IIf(Mid(Account, 13, 1) = "8", TypePaymentH, "0 ") & strDeleitel & Payer & strDeleitel & cCurency & strDeleitel & _
        Replace(FormatNumber(TotalSum, 2, vbTrue, vbFalse, vbFalse), ",", ".") & strDeleitel & FormatNumber(TotalRecords, 0, vbTrue, vbFalse, vbFalse) & strDeleitel & Space(1) & strDeleitel
        
        ' Write Data Rows
        For i = 1 To CLng(MaxNumberOfRows)
            ' Read Details Record
            Call ReadTmpValues(i + ColumhHeaderOffset)
            
            If isRowDataOK(tmpResulTest) Then
                ' Write Them to Output File
                
                BodyStr = vbNewLine & PaymentType & strDeleitel & tmpName & strDeleitel & _
                tmpBAE & strDeleitel & tmpAccount & strDeleitel & IIf(Mid(tmpAccount, 13, 1) = "8", tmpTypePayment, "0 ") & strDeleitel & _
                tmpBankName & strDeleitel & Replace(FormatNumber(tmpSum, 2, vbTrue, vbFalse, vbFalse), ",", ".") & strDeleitel & _
                tmpReason & strDeleitel & "313" & strDeleitel & _
                tmpDocument & strDeleitel & _
                DataDocument & strDeleitel & DataOt & strDeleitel & DataDo & strDeleitel & _
                Bulstat & strDeleitel & EGNZadalgenoLice & strDeleitel & LN4ZadalgenoLice & strDeleitel & _
                ZadalgenoLice & strDeleitel & IIf(tmpSum < 100000, strBISERA, strRINGS) & strDeleitel & "002" & strDeleitel & _
                tmpExecDate & strDeleitel
                tsFile.Write BodyStr
                
            End If
        Next
        MakeFile = True
    Else
        MakeFile = False
    End If
    tsFile.Close
    Set tsFile = Nothing
    Set fso = Nothing
    On Error GoTo 0
End Function
' isRowDataOK
Function isRowDataOK(Result2Test)
    If OKStr = Left(Result2Test, Len(OKStr)) Then
        isRowDataOK = True
    Else
        isRowDataOK = False
    End If
End Function
        
' isValidName
Function isValidName(Name2Test) As Boolean
    If (Len(Name2Test) >= MinLenName) And (Len(Name2Test) <= MaxLenName) Then
        isValidName = True
    Else
        tmpResult = tmpResult & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|. "
        isValidName = False
    End If
End Function
' isValidBAE
Function isValidBAE(BAE2Test) As Boolean
    If Len(BAE2Test) = LenBAE Then
        isValidBAE = True
    Else
        tmpResult = tmpResult & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| BIC |fffd||fffd||fffd|. "
        isValidBAE = False
    End If
End Function
'isValidBankName
Function isValidBankName(BankName2Test) As Boolean
    If (Len(BankName2Test) >= MinLenBankName) And (Len(BankName2Test) <= MaxLenBankName) Then
        isValidBankName = True
    Else
        tmpResult = tmpResult & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|. "
        isValidBankName = False
    End If
End Function
' isValidReason
Function isValidReason(Reason2Test)
    If (Len(Reason2Test) >= minLenReason) And (Len(Reason2Test) <= maxLenReason) Then
        isValidReason = True
    Else
        tmpResult = tmpResult & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|. "
        isValidReason = False
    End If
End Function
' isValidSum
Function isValidSum(Sum2Test)
    If IsNumeric(Sum2Test) Then
        If (CDbl(Sum2Test) > 0) And (Len(FormatNumber(Sum2Test, 2, vbTrue, vbTrue, vbFalse)) <= maxLenSum) Then
            isValidSum = True
        Else
            tmpResult = tmpResult & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|. "
            isValidSum = False
        End If
    Else
        tmpResult = tmpResult & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd|. "
        isValidSum = False
    End If
End Function
' isValidEGN
Function isValidEGN(EGN2Test) As Boolean
    If Len(EGN2Test) = LenEGN And IsNumeric(EGN2Test) Then
        If IsRealEGN(EGN2Test) Then
            isValidEGN = True
        Else
            tmpResult = tmpResult & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|. "
            isValidEGN = False
        End If
    Else
        tmpResult = tmpResult & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|. "
        isValidEGN = False
    End If
End Function
' isValidTypePayment
Function isValidTypePayment(TypePayment2Test, Account2Test) As Boolean
    isValidTypePayment = True
    If Mid(Account2Test, 13, 1) = "8" Then
        
        If (Len(TypePayment2Test) < minLenTypePayment) Or (Len(TypePayment2Test) > maxLenTypePayment) Then
            isValidTypePayment = False
            Exit Function
        End If
        Select Case Mid(Account2Test, 13, 2)
        Case "81"
            If Mid(TypePayment2Test, 1, 2) <> "11" Then isValidTypePayment = False
        Case "82"
            If Mid(TypePayment2Test, 1, 2) <> "22" Then isValidTypePayment = False
        Case "83"
            If Mid(TypePayment2Test, 1, 2) <> "33" Then isValidTypePayment = False
        Case "84"
            If Mid(TypePayment2Test, 1, 2) <> "44" Then isValidTypePayment = False
        Case "85"
            If Mid(TypePayment2Test, 1, 2) <> "55" Then isValidTypePayment = False
        Case "86"
            If Mid(TypePayment2Test, 1, 2) <> "56" Then isValidTypePayment = False
        Case "87"
            If Mid(TypePayment2Test, 1, 2) <> "57" Then isValidTypePayment = False
        Case "88"
            If Mid(TypePayment2Test, 1, 2) <> "58" Then isValidTypePayment = False
        Case "89"
            If Mid(TypePayment2Test, 1, 2) <> "59" Then isValidTypePayment = False
        End Select
    End If
End Function
'isValidDocument
Function isValidDocument(tmpDocument, DataDocument, DataOt, DataDo) As Boolean
    '1 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    '2 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd|
    '3 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    '4 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|
    '5 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd|
    '6 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
    '9 - |fffd||fffd||fffd||fffd||fffd|
    isValidDocument = False
    If (Len(tmpDocument) < MinLenDocument) Or (Len(tmpDocument) > MaxLenDocument) Then
        tmpResult = tmpResult & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd|). "
        Exit Function
    Else
        If (Mid(tmpDocument, 1, 1) = "1") Or (Mid(tmpDocument, 1, 1) = "2") Or (Mid(tmpDocument, 1, 1) = "3") Or (Mid(tmpDocument, 1, 1) = "4") Or (Mid(tmpDocument, 1, 1) = "5") Or (Mid(tmpDocument, 1, 1) = "6") Or (Mid(tmpDocument, 1, 1) = "9") Then
        
        Else
            tmpResult = tmpResult & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd|). "
            Exit Function
        End If
    End If
    
    If (Mid(tmpDocument, 1, 1) = "2") Or (Mid(tmpDocument, 1, 1) = "3") Or (Mid(tmpDocument, 1, 1) = "6") Then
    '' 236 - |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd|
        If Len(Mid(tmpDocument, 2, Len(tmpDocument) - 1)) < 1 Then
            tmpResult = tmpResult & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd|). "
            Exit Function
        End If
        If Len(DataDocument) <> LenDate Then
            tmpResult = tmpResult & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd|). "
            Exit Function
        End If
    End If
    If (Mid(tmpDocument, 1, 1) = "1") Or (Mid(tmpDocument, 1, 1) = "2") Or (Mid(tmpDocument, 1, 1) = "4") Or (Mid(tmpDocument, 1, 1) = "5") Then
    '' 1245 - |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd| |fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd|;
        If (Len(DataOt) <> LenDate) Or (Len(DataDo) <> LenDate) Then
            tmpResult = tmpResult & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd|). "
            Exit Function
        End If
    End If
    If DataOt > DataDo Then
        tmpResult = tmpResult & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| (|fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd|, |fffd||fffd||fffd||fffd||fffd||fffd|). "
        Exit Function
    End If
    isValidDocument = True
End Function
' isValidDataLice
Function isValidDataLice(Bulstat, EGNZadalgenoLice, LN4ZadalgenoLice) As Boolean
    isValidDataLice = False
    If Len(Bulstat) > 0 Then
    ' Check Bulstat
        If (Len(EGNZadalgenoLice) > 0) Or (Len(LN4ZadalgenoLice) > 0) Then
            tmpResult = tmpResult & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|. "
            Exit Function
        End If
        If isValidBULSTAT(Bulstat) Then
            isValidDataLice = True
        End If
    Else
        If Len(EGNZadalgenoLice) > 0 Then
            If Len(LN4ZadalgenoLice) > 0 Then
                tmpResult = tmpResult & "|fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd| |fffd||fffd||fffd|. "
                Exit Function
            End If
            If isValidEGN(EGNZadalgenoLice) Then
               isValidDataLice = True
            End If
        Else
            If Len(LN4ZadalgenoLice) > 0 Then
                isValidDataLice = True
            End If
        End If
    End If
End Function
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True



    


INQUEST-PP=macro
