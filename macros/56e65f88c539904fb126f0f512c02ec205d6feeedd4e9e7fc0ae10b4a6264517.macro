Attribute VB_Name = "CHECKifALPHAnumeric"
Function AlphaNumeric(pValue) As Boolean

   Dim LPos As Integer
   Dim LChar As String
   Dim LValid_Values As String

   'Start at first character in pValue
   LPos = 1

   'Set up values that are considered to be alphanumeric
   LValid_Values = "0123456789"
'LValid_Values = " abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ+-.0123456789"
   'Test each character in pValue
   While LPos <= Len(pValue)

      'Single character in pValue
      LChar = Mid(pValue, LPos, 1)

      'If character is not alphanumeric, return FALSE
      If InStr(LValid_Values, LChar) = 0 Then
         AlphaNumeric = False
         Exit Function
      End If

      'Increment counter
      LPos = LPos + 1

   Wend

   'Value is alphanumeric, return TRUE
   AlphaNumeric = True

End Function
Attribute VB_Name = "Module1"
Option Private Module
Sub ImportAndprocessDelete()

If Sheet3.Range("File1") = "" Then
    MsgBox "Please browse for the CSV file using the browse button!", vbCritical
    Exit Sub
End If


Application.ScreenUpdating = False
Application.DisplayAlerts = False
On Error Resume Next
Sheets("File 1").Delete
On Error Resume Next
Sheets("Export").Delete


'file 1
 Workbooks.Open FileName:=Sheet3.Range("File1")
        Sheets().Move After:=ThisWorkbook.Sheets _
          (ThisWorkbook.Sheets.Count)
         
ActiveSheet.Name = "File 1"
'
'
''file 2
' Workbooks.Open FileName:=Sheet3.Range("File2")
'        Sheets().Move After:=ThisWorkbook.Sheets _
'          (ThisWorkbook.Sheets.Count)
'
'ActiveSheet.Name = "File 2"

Sheets.Add
ActiveSheet.Name = "Export"





'do names
Call ProcessMatches1

'export sheet
Call ExportsheetsSelection1

Application.DisplayAlerts = False

On Error Resume Next
Sheets("File 1").Delete
'On Error Resume Next
'Sheets("File 2").Delete
On Error Resume Next
Sheets("Export").Delete


Application.ScreenUpdating = True
Application.DisplayAlerts = True

End Sub




Sub ProcessMatches1()

Application.ScreenUpdating = False
Dim i As Long
Dim k As Long
Dim erow As Long
Dim fcell As Excel.Range
Dim OwnerCol As Long

Set fcell = Nothing: Set fcell = Sheets("File 1").Rows(1).Find(what:="Ownership", lookat:=xlWhole)
On Error Resume Next
OwnerCol = fcell.Column

For i = 2 To Sheets("File 1").Range("a950000").End(xlUp).Row

On Error Resume Next
Sheets("File 1").Cells(i, OwnerCol) = GetOwnerName(Sheets("File 1").Cells(i, OwnerCol))

Next i


 Sheets("File 1").UsedRange.RemoveDuplicates Columns:=Array(33, 34, 35), _
        Header:=xlYes

Call CopyValues(Sheets("File 1").UsedRange, Sheets("Export").Range("a1"))
'Sheets("Export").UsedRange.Offset(1, 0).ClearContents





End Sub






'Attribute VB_Name = "Export_Sheets"
Sub ExportsheetsSelection1()
    'Sheet3.Visible = xlSheetVisible
    Dim NewName As String
    Dim nm As Name
    Dim ws As Worksheet
    NewName = "OwnershipCorrection+DuplicateRemoval_" & Format(Now(), "yyyy-mm-dd") ' MonthName(Sheet1.Cells(9, 1))
     
     Sheets("Export").Columns.AutoFit
    With Application
        .ScreenUpdating = False
         
         '       Copy specific sheets
         '       *SET THE SHEET NAMES TO COPY BELOW*
         '       Array("Sheet Name", "Another sheet name", "And Another"))
         '       Sheet names go inside quotes, seperated by commas
        On Error GoTo ErrCatcher
        Sheets(Array("Export")).Copy
        On Error GoTo 0
        
         '       Input box to name new file
         'InputBox("Please Specify the name of your new workbook", "New Copy")
         Application.DisplayAlerts = False
         '       Save it with the NewName and in the same directory as original
        Application.ActiveWorkbook.SaveAs ThisWorkbook.Path & "\" & NewName & ".xlsx", FileFormat:=51
        Application.ActiveWorkbook.Close SaveChanges:=False
         Application.DisplayAlerts = True
        .ScreenUpdating = False
        
    End With
MsgBox "Sheets have been exported to " & ThisWorkbook.Path & "\" & NewName & ".xlsx", vbInformation
    Exit Sub
     
ErrCatcher:
    MsgBox "Specified sheets do not exist within this workbook"
End Sub






Attribute VB_Name = "Module2"

Public Function ConvertTimestamp(ByVal timestamp As Long) As String
       ConvertTimestamp = DateAdd("s", timestamp, "1/1/1970")
End Function



Public Function cdatetimestamp(ByVal timestamp As Date) As String
       cdatetimestamp = DateDiff("s", "1/1/1970", CDate(timestamp))
End Function
Attribute VB_Name = "Module3"
Public cookiestring As String
Function GetCookie() As String
Dim str_json As String
Dim elemenat2 As IHTMLElement, elemenat3 As IHTMLElement
Dim html_ob_tabela As HTMLObjectElement
 
Dim HTMLtabela As HTMLObjectElement
Dim elemenat As IHTMLElement

Dim doc As HTMLDocument
Dim HTMLdoc As Object



'declare variables
 Dim emptyrow, i, j, k, l As Long
Dim current_page As String, last_page As String, pageno As String
Dim f As Long
Dim content_text As String




'======================
Dim objie As InternetExplorer

'create internet explorer object for browsing
Set objie = CreateObject("internetexplorer.application")
 With objie
 .Visible = False 'set it to not visible, but it runs in the background
    
    .navigate "http://www.zillow.com/homes/1776-N-Palm-Ave-Upland-CA-91784_rb/"
     Do While .Busy Or .readyState <> 4

    DoEvents
    Loop
    Application.Wait (Now + TimeValue("0:00:02"))

    Set doc = objie.document
    
'If InStr(1, objie.LocationURL, "https://www.strava.com/") > 0 Then
.Visible = True
MsgBox "Please solve captcha if it is on the screen and then hit enter in Excel,otherwise just hit Enter in Excel", vbInformation

'End If
'
'If InStr(1, doc.body.innerText, "is requesting to do the following:") > 0 Then
'.Visible = True
'MsgBox "Please Login in IE to instagram", vbInformation
'Set doc = objie.Document
'End If
    
.Visible = False
 Application.Wait (Now + TimeValue("0:00:02"))

Set doc = objie.document
    
    
cookiestring = doc.cookie


objie.Quit
Set objie = Nothing
Set doc = Nothing
End With


Sheet4.Cells(1, 1) = cookiestring

GetCookie = cookiestring

End Function





Attribute VB_Name = "Module5"
Public Function URLEncode(StringVal As String, Optional SpaceAsPlus As Boolean = False) As String
  Dim StringLen As Long: StringLen = Len(StringVal)
  
  If StringLen > 0 Then
    ReDim result(StringLen) As String
    Dim i As Long, CharCode As Integer
    Dim Char As String, Space As String
    
    If SpaceAsPlus Then Space = "+" Else Space = "%20"
    
    For i = 1 To StringLen
      Char = Mid$(StringVal, i, 1)
      CharCode = Asc(Char)
        
      Select Case CharCode
      Case 97 To 122, 65 To 90, 48 To 57, 45, 46, 95, 126
        result(i) = Char
      Case 32
        result(i) = Space
      Case 0 To 15
        result(i) = "%0" & Hex(CharCode)
      Case Else
        result(i) = "%" & Hex(CharCode)
      End Select
    Next i
    URLEncode = Join(result, "")
  End If
End Function
Attribute VB_Name = "RedRunner"
Option Private Module
Sub StartRedfind()

'get data
FultonGA


'org data
ORGdata


Sheets("Imported").Activate
   With ActiveWindow
        .SplitColumn = 0
        .SplitRow = 1
    End With
    ActiveWindow.FreezePanes = True
    On Error Resume Next
    Sheets("Imported").UsedRange.ColumnWidth = 20
    

Application.StatusBar = ""

ExportSheetsToNewWorkbookWORKING
'MsgBox "Done", vbInformation
Application.ScreenUpdating = True
End Sub
Attribute VB_Name = "SVR_ZILLOW_Comps"

Option Private Module
Sub zillowCOMPSscrape(ByVal RowNum As Long, ByVal AddressGet As String)
'Call Delete_XMLMaps
Dim URL As String
Dim data As String
Dim http As Object
Dim ZPID As String
Dim i As Long
Dim erow As Long
Dim lat1 As String, lng1 As String
Dim foundcell As Excel.Range
Dim c As Long
Dim Address As Long, city As Long, zipCode As Long, state As Long, proximity As Long, dateti As Long, price As Long
Dim lat2 As Long, lng2 As Long
Dim a As Long
'Name

ZPID = ZillowSUBJ

URL = " http://www.zillow.com/webservice/GetComps.htm?zws-id=" & Sheet15.Cells(1, 5) & "&zpid=" & ZPID & "&count=15"
Application.StatusBar = "Extracting zillow Comps."
    'Application.Cursor = xlDefault

Set HTMLdoc = Nothing
Set http = Nothing
Set http = CreateObject("MSXML2.XMLHTTP") '("WinHttp.WinHttpRequest.5.1")
http.Open "GET", URL, False

http.Send

'Debug.Print http.ResponseText

If InStr(1, http.responseText, "Request successfully processed</text") > 0 Or InStr(1, http.responseText, "<code>0</code>") > 0 Then

erow = Sheet8.Range("b5000").End(xlUp).Row + 2

Sheet8.Range("a12:b12").Copy Sheet8.Range("a" & erow)

Sheet8.Cells(erow, 2) = "ZILLOW"


Call XMLTest02(http.responseText, 1)


'If InStr(1, Sheet16.Cells(1, c), "latitude") > 0 Then
'    If lat2 = 0 Then
'    lat2 = c
'    End If
'
'End If

'If InStr(1, Sheet16.Cells(1, c), "longitude") > 0 Then
'    If lng2 = 0 Then
'    lng2 = c
'    End If
'
'End If
'Next
'

Set foundcell = Nothing: Set foundcell = Sheet8.Columns(2).Find(what:="Zillow", lookat:=xlWhole)
If Not foundcell Is Nothing Then
i = foundcell.Row
End If

For a = i + 1 To Sheet8.Range("b5000").End(xlUp).Row
    
    Sheet8.Cells(a, 2) = "Zillow" ' & A - i '- 1
    
Next a


    With Sheet8.Range("a" & i + 1 & ":a" & Sheet8.Range("b5000").End(xlUp).Row).Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .Color = 5296274
            .TintAndShade = 0
            .PatternTintAndShade = 0
    End With


Else

    erow = Sheet8.Range("b5000").End(xlUp).Row + 2
    
    Sheet8.Range("a12:b12").Copy Sheet8.Range("a" & erow)
    
    Sheet8.Cells(erow, 2) = "ZILLOW"
    
    Sheet8.Cells(erow, 17) = "no comps for the specified property were found"
    With Sheet8.Range("a" & erow & ":a" & Sheet8.Range("b5000").End(xlUp).Row).Interior
            .Pattern = xlSolid
            .PatternColorIndex = xlAutomatic
            .Color = 5296274
            .TintAndShade = 0
            .PatternTintAndShade = 0
    End With

End If

'Call ZillowData

Application.StatusBar = "Done"
'new view after ZILLOW data
Call make_view
Application.StatusBar = ""
End Sub


Sub Delete_XMLMaps()


Dim ct As Integer, XMLMap
Const maxXMLDel = 500
For Each XMLMap In ActiveWorkbook.XmlMaps
ct = ct + 1
If ct > maxXMLDel Then Exit For
XMLMap.Delete
Next
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet2"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Sub sagsag()
'
'
'Sheet3.Visible = xlSheetVeryHidden
''Sheet3.Visible = xlSheetVisible
'End Sub
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
'Sub saga()
'
'
'Sheet4.Visible = xlSheetVeryHidden
''Sheet4.Visible = xlSheetVisible
'End Sub
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_BeforeClose(Cancel As Boolean)

Application.DisplayAlerts = False
Sheets("Imported").UsedRange.Delete
Sheet2.Range("File1") = ""
ThisWorkbook.Save
Application.DisplayAlerts = True
End Sub

Private Sub Workbook_Open()
On Error Resume Next
Sheet2.Range("File1") = ""


End Sub
Attribute VB_Name = "UDF"
Function ConvertToLetter(iCol As Long) As String
    
    ConvertToLetter = Replace(Split(Sheet3.Columns(iCol).Address, ":")(0), "$", "")
    
    
End Function
    
    
    Function ConvertlettertoNumber(ByVal vred1 As String)
        ColName = vred1
    On Error Resume Next
        ConvertlettertoNumber = Range(ColName & 1).Column
    End Function

Public Function unicode_url_encode(str_unicode)    '   unicode chars
    
          Dim i, c, ic, s, length
          
          length = Len(str_unicode)
          
          For i = 1 To length
          
            s = Mid(str_unicode, i, 1)
            c = "&H" & Hex(AscW(Mid(str_unicode, i, 1)))
            ic = CInt(c)
            
            If (ic >= AscW("A") And ic <= AscW("Z")) Or _
              (ic >= AscW("a") And ic <= AscW("z")) Or _
              (ic >= AscW("0") And ic <= AscW("9")) Or _
              (ic = AscW("-") Or ic = AscW("_") Or ic = AscW(".") Or ic = AscW("!") Or ic = AscW("~") Or ic = AscW("*") Or ic = AscW("'") Or ic = AscW("(") Or ic = AscW(")")) Then
              
              unicode_url_encode = unicode_url_encode & s
              
            ElseIf ic > 16 And ic < 128 Then
            
              unicode_url_encode = unicode_url_encode & "%" & Hex(ic)
            
            Else
            
              If c >= &H1 And c <= &H7F Then
              
                unicode_url_encode = unicode_url_encode & s
                
              ElseIf c > &H7FF Then
              
                unicode_url_encode = unicode_url_encode & "%" & Hex(&HE0 Or (c \ (2 ^ 12) And &HF))
                unicode_url_encode = unicode_url_encode & "%" & Hex(&H80 Or (c \ (2 ^ 6) And &H3F))
                unicode_url_encode = unicode_url_encode & "%" & Hex(&H80 Or (c \ (2 ^ 0) And &H3F))
                
              Else
              
                unicode_url_encode = unicode_url_encode & "%" & Hex(&HC0 Or (c \ (2 ^ 6) And &H1F))
                unicode_url_encode = unicode_url_encode & "%" & Hex(&H80 Or (c \ (2 ^ 0) And &H3F))
                
              End If
              
            End If
            
          Next
          
    End Function




Attribute VB_Name = "Unescape_Chars"
Public Function UNESCAPEchar(ByVal vred As String)

UNESCAPEchar = ChrW(Replace(vred, "\u", "&H"))

End Function

Public Function UnescapeString(ByVal vred As String) As String
Dim a As Long
Dim Output As String
Dim spliter() As String
spliter = Split(RxMatchesCHAR(vred), ",")
Output = vred
For a = 0 To UBound(spliter)
    Output = Replace(Output, spliter(a), UNESCAPEchar(spliter(a)))
Next a
Erase spliter

UnescapeString = Output
End Function




'This function finds a match in the string provided.
Public Function RxMatchesCHAR( _
    ByVal SourceString As String, _
    Optional ByVal IgnoreCase As Boolean = True, _
    Optional ByVal MultiLine As Boolean = True, _
    Optional ByVal MatchGlobal As Boolean = True) As Variant
 
'in the part above where it says "ByVal SourceString As String," this is the argument for the function ie the cell you are referencing to when you write the formula
 
    Dim oMatch As Match   ' this is used for regular expressions to match a pattern "\b\d[\d,.]*\b" this pattern returns the numbers from a string
    Dim arrMatches
    'Dim arrMatches1
    Dim lngCount As Long
    Dim mejlovi As String
     
     'all matches are placed in an array (set of results)
    ' Initialize to an empty array
    arrMatches = Array()
    With New RegExp
        .MultiLine = MultiLine
        .IgnoreCase = IgnoreCase
        .Global = MatchGlobal
        .Pattern = "(\\u)[0-9\+a-z]{4}"
        
        
        
        'extract lat long    (-?\d+\.\d+), *(-?\d+\.\d+)
        'Extract T2 or M3 etc     ([A-Za-z][0-9])
        'loops throguh the string for each match to the regex pattern and places it into the array at position lngcount which starts with 0 by default
        For Each oMatch In .Execute(SourceString)
            ReDim Preserve arrMatches(lngCount)
            
            arrMatches(lngCount) = oMatch.Value
            lngCount = lngCount + 1
        Next
        
        
    End With
 
 '=======================================
 'this part is for receiving multiple values from one string and it works with the function bellow RemoveDuplicatesInArray
 
 
 arrMatches1 = RemoveDuplicatesInArray(arrMatches)
 mejlovi = vbNullString
 For i = LBound(arrMatches1) To UBound(arrMatches1)
    
    mejlovi = arrMatches1(i) & "," & mejlovi

 Next
  '===================================
    
 'the function return the first match from the string. Arrays always start with 0
   On Error Resume Next
    RxMatchesCHAR = Left(mejlovi, Len(mejlovi) - 1)
End Function


Public Function RemoveDuplicatesInArray(the_array)
 
    On Error Resume Next
    p = 1
    Do
       Z = UBound(the_array, p)
       p = p + 1
    Loop While Err = 0
    Err = 0
    NumDimensions = p - 2
 
    Dim newArray()
 
    Select Case NumDimensions
 
        Case 1
 
            new_array_nb = 0
            ReDim newArray(0 To 0)
 
            For k = 0 To UBound(the_array)
                Duplicate = 0
                For x = 0 To k - 1
                    If the_array(x) = the_array(k) Then
                        Duplicate = 1
                        Exit For
                    End If
                Next x
                If Duplicate = 0 And IsEmpty(the_array(k)) = False Then
                    ReDim Preserve newArray(0 To new_array_nb)
                    newArray(new_array_nb) = the_array(k)
                    new_array_nb = new_array_nb + 1
                End If
            Next k
 
        Case 2
 
            the_dim = UBound(the_array, 1)
 
            new_array_nb = 0
            ReDim newArray(0 To the_dim, 0 To 0)
 
            For k = 0 To UBound(the_array, 2)
                Duplicate = 0
                For x = 0 To k - 1
                    equal = 1
                    For eq = 0 To the_dim
                        If the_array(eq, x) <> the_array(eq, k) Then
                            equal = 0
                            Exit For
                        End If
                    Next eq
                    If equal = 1 Then
                        Duplicate = 1
                    End If
                Next x
                If Duplicate = 0 Then
                    ReDim Preserve newArray(0 To the_dim, 0 To new_array_nb)
                    For eq = 0 To the_dim
                        newArray(eq, new_array_nb) = the_array(eq, k)
                    Next eq
                    new_array_nb = new_array_nb + 1
                End If
            Next k
 
        End Select
 
    RemoveDuplicatesInArray = newArray
 
    On Error GoTo 0
 
End Function



Public Function HTMLEntititesDecode(p_strText As String) As String

Dim strTemp As String
    strTemp = p_strText
    strTemp = Replace(strTemp, "&AElig;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&oacute;", "*", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&ETH;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Ntilde;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Ograve;", "|fffd|")
strTemp = Replace(strTemp, "&oacute;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Ocirc;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Otilde;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Ouml;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&divide;", "|fffd|")
strTemp = Replace(strTemp, "&Oslash;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Ugrave;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&uacute;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Ucirc;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Uuml;", "|fffd|")
strTemp = Replace(strTemp, "&Yacute;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&THORN;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&yuml;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&oacute;", "?", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&yuml;", "|fffd|")
strTemp = Replace(strTemp, "&iexcl;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&cent;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&pound;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&curren;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&yen;", "|fffd|")
strTemp = Replace(strTemp, "&sect;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&uml;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&copy;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&ordf;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&laquo;", "|fffd|")
strTemp = Replace(strTemp, "&not;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&macr;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&reg;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&macr;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&deg;", "|fffd|")
strTemp = Replace(strTemp, "&plusmn;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&sup2;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&sup3;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&acute;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&micro;", "|fffd|")
strTemp = Replace(strTemp, "&middot;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&cedil;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&sup1;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&ordm;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&raquo;", "|fffd|")
strTemp = Replace(strTemp, "&frac14;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&frac12;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&frac34;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&iquest;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Agrave;", "|fffd|")
strTemp = Replace(strTemp, "&aacute;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Acirc;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Atilde;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Auml;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Aring;", "|fffd|")
strTemp = Replace(strTemp, "&AElig;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Ccedil;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Egrave;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&eacute;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Ecirc;", "|fffd|")
strTemp = Replace(strTemp, "&Euml;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Igrave;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&iacute;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Icirc;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Iuml;", "|fffd|")
strTemp = Replace(strTemp, "&ETH;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Ntilde;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Ograve;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&oacute;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Ocirc;", "|fffd|")
strTemp = Replace(strTemp, "&Otilde;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Ouml;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&times;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Oslash;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Ugrave;", "|fffd|")
strTemp = Replace(strTemp, "&uacute;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Ucirc;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Uuml;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Yacute;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&THORN;", "|fffd|")
strTemp = Replace(strTemp, "&szlig;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Agrave;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&aacute;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Acirc;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Atilde;", "|fffd|")
strTemp = Replace(strTemp, "&Auml;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Aring;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&AElig;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Ccedil;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Egrave;", "|fffd|")
strTemp = Replace(strTemp, "&eacute;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Ecirc;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Euml;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Igrave;", "|fffd|")
strTemp = Replace(strTemp, "&iacute;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Icirc;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "&Iuml;", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%b0", "|fffd|")
strTemp = Replace(strTemp, "%c3%b1", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%b2", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%b3", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%b4", "|fffd|")
strTemp = Replace(strTemp, "%c3%b5", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%b6", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%b7", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%b8", "|fffd|")
strTemp = Replace(strTemp, "%c3%b9", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%ba", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%bb", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%bc", "|fffd|")
strTemp = Replace(strTemp, "%c3%bd", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%be", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%bf", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c5%b8", "|fffd|")
strTemp = Replace(strTemp, "%c2%a1", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c2%a2", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c2%a3", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c2%a4", "|fffd|")
strTemp = Replace(strTemp, "%c2%a5", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c2%a7", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c2%a8", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c2%a9", "|fffd|")
strTemp = Replace(strTemp, "%c2%aa", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c2%ab", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c2%ac", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c2%ad", "|fffd|")
strTemp = Replace(strTemp, "%c2%ae", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c2%af", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c2%b0", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c2%b1", "|fffd|")
strTemp = Replace(strTemp, "%c2%b2", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c2%b3", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c2%b4", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c2%b5", "|fffd|")
strTemp = Replace(strTemp, "%c2%b7", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c2%b8", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c2%b9", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c2%ba", "|fffd|")
strTemp = Replace(strTemp, "%c2%bb", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c2%bc", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c2%bd", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c2%be", "|fffd|")
strTemp = Replace(strTemp, "%c2%bf", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%80", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%81", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%82", "|fffd|")
strTemp = Replace(strTemp, "%c3%83", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%84", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%85", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%86", "|fffd|")
strTemp = Replace(strTemp, "%c3%87", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%88", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%89", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%8a", "|fffd|")
strTemp = Replace(strTemp, "%c3%8b", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%8c", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%8d", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%8e", "|fffd|")
strTemp = Replace(strTemp, "%c3%8f", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%90", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%91", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%92", "|fffd|")
strTemp = Replace(strTemp, "%c3%93", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%94", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%95", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%96", "|fffd|")
strTemp = Replace(strTemp, "%c3%97", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%98", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%99", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%9a", "|fffd|")
strTemp = Replace(strTemp, "%c3%9b", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%9c", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%9d", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%9e", "|fffd|")
strTemp = Replace(strTemp, "%c3%9f", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%a0", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%a1", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%a2", "|fffd|")
strTemp = Replace(strTemp, "%c3%a3", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%a4", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%a5", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%a6", "|fffd|")
strTemp = Replace(strTemp, "%c3%a7", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%a8", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%a9", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%aa", "|fffd|")
strTemp = Replace(strTemp, "%c3%ab", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%ac", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%ad", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%ae", "|fffd|")
strTemp = Replace(strTemp, "%C3%BC", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%C3%A6", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%c3%af", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "0", "|fffd|", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%2a", "*", 1, -1, vbTextCompare): strTemp = Replace(strTemp, "%3f", "?")
  
  HTMLEntititesDecode = strTemp
End Function



Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{B2FD88CA-D0DB-44B8-A2DF-7FD04ED3FEF1}{A9C47F71-CA24-4F1C-859C-3AA2A2B50F53}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False



Private Sub UserForm_activate()
    Call URL_collector
End Sub





       
   
Attribute VB_Name = "XML"
Option Private Module
Sub XMLTest01(xmlstr, pageno)

    Dim xDoc As Object
    Set xDoc = CreateObject("Microsoft.XMLDOM")
    If Not xDoc.LoadXML(xmlstr) Then
        Err.Raise xDoc.parseError.ErrorCode, , xDoc.parseError.reason
    End If
Dim foundcell As Excel.Range
Dim l As Long
Dim i As Long
Dim flag As Integer
flag = 0
    Dim list As IXMLDOMNodeList
    Dim msg As IXMLDOMNodeList
    
    Set list = xDoc.SelectNodes("//result")
    Set msg = xDoc.SelectNodes("//message")

    Dim attr As IXMLDOMAttribute
    Dim node As IXMLDOMNode
    Dim childNode As IXMLDOMNode

    For Each node In msg
    On Error Resume Next
    Sheet3.Cells(pageno, 21) = node.SelectSingleNode("text").Text
    
    Next


    For Each node In list
    
        'Set attr = node.Attributes.getNamedItem("StaffName")
        For i = 0 To node.ChildNodes.length - 1
        'Debug.Print node.ChildNodes(i).BaseName
        
            If node.ChildNodes(i).BaseName = "bedrooms" Then
                Sheet3.Cells(pageno, 12) = node.ChildNodes(i).Text
            ElseIf node.ChildNodes(i).BaseName = "bathrooms" Then
                Sheet3.Cells(pageno, 13) = node.ChildNodes(i).Text

            ElseIf node.ChildNodes(i).BaseName = "lotSizeSqFt" Then
                Sheet3.Cells(pageno, 14) = node.ChildNodes(i).Text
            ElseIf node.ChildNodes(i).BaseName = "totalRooms" Then
                Sheet3.Cells(pageno, 15) = node.ChildNodes(i).Text
            ElseIf node.ChildNodes(i).BaseName = "finishedSqFt" Then
                Sheet3.Cells(pageno, 16) = node.ChildNodes(i).Text
            ElseIf node.ChildNodes(i).BaseName = "yearBuilt" Then
                Sheet3.Cells(pageno, 17) = node.ChildNodes(i).Text
            ElseIf node.ChildNodes(i).BaseName = "zpid" Then
                Sheet3.Cells(pageno, 1) = node.ChildNodes(i).Text
            ElseIf node.ChildNodes(i).BaseName = "links" Then
                Sheet3.Cells(pageno, 2) = node.ChildNodes(i).SelectSingleNode("homedetails").Text
            ElseIf node.ChildNodes(i).BaseName = "zestimate" Then
                Sheet3.Cells(pageno, 3) = node.ChildNodes(i).SelectSingleNode("amount").Text
                
                Sheet3.Cells(pageno, 4) = node.ChildNodes(i).SelectSingleNode("valuationRange").SelectSingleNode("low").Text
                Sheet3.Cells(pageno, 5) = node.ChildNodes(i).SelectSingleNode("valuationRange").SelectSingleNode("high").Text
            ElseIf node.ChildNodes(i).BaseName = "rentzestimate" Then
                Sheet3.Cells(pageno, 6) = node.ChildNodes(i).SelectSingleNode("amount").Text
                Sheet3.Cells(pageno, 7) = node.ChildNodes(i).SelectSingleNode("valuationRange").SelectSingleNode("low").Text
                Sheet3.Cells(pageno, 8) = node.ChildNodes(i).SelectSingleNode("valuationRange").SelectSingleNode("high").Text
            ElseIf node.ChildNodes(i).BaseName = "localRealEstate" Then
                Sheet3.Cells(pageno, 9) = node.ChildNodes(i).SelectSingleNode("region").SelectSingleNode("zindexValue").Text
            ElseIf node.ChildNodes(i).BaseName = "lastSoldDate" Then
                Sheet3.Cells(pageno, 10) = node.ChildNodes(i).Text
            ElseIf node.ChildNodes(i).BaseName = "lastSoldPrice" Then
                Sheet3.Cells(pageno, 11) = node.ChildNodes(i).Text
            
            ElseIf node.ChildNodes(i).BaseName = "taxAssessmentYear" Then
                Sheet3.Cells(pageno, 18) = node.ChildNodes(i).Text
            ElseIf node.ChildNodes(i).BaseName = "taxAssessment" Then
                Sheet3.Cells(pageno, 19) = node.ChildNodes(i).Text
            ElseIf node.ChildNodes(i).BaseName = "useCode" Then
                Sheet3.Cells(pageno, 20) = node.ChildNodes(i).Text
            End If
            
        
        Next i
        

    Next node

End Sub

Sub XMLTest02(xmlstr, pageno)

    Dim xDoc As Object
    Set xDoc = CreateObject("Microsoft.XMLDOM")
    If Not xDoc.LoadXML(xmlstr) Then
        Err.Raise xDoc.parseError.ErrorCode, , xDoc.parseError.reason
    End If
Dim foundcell As Excel.Range
Dim l As Long
Dim i As Long
Dim flag As Integer
flag = 0
    Dim list As IXMLDOMNodeList
    Dim msg As IXMLDOMNodeList
    
    Set list = xDoc.SelectNodes("//response")
    Set msg = xDoc.SelectNodes("//message")

    Dim attr As IXMLDOMAttribute
    Dim node As IXMLDOMNode
    Dim childNode As IXMLDOMNode

    For Each node In msg
    On Error Resume Next
    Sheet3.Cells(pageno, "v") = node.SelectSingleNode("text").Text
    
    Next


    For Each node In list
    
        'Set attr = node.Attributes.getNamedItem("StaffName")
        For i = 0 To node.ChildNodes.length - 1
        'Debug.Print node.ChildNodes(i).BaseName
        
            If node.ChildNodes(i).BaseName = "images" Then
                Sheet3.Cells(pageno, "w") = node.ChildNodes(i).SelectSingleNode("image").ChildNodes(0).Text
            
            ElseIf node.ChildNodes(i).BaseName = "editedFacts" Then
                Sheet3.Cells(pageno, "x") = node.ChildNodes(i).SelectSingleNode("numFloors").Text
                Sheet3.Cells(pageno, "y") = node.ChildNodes(i).SelectSingleNode("numRooms").Text
                Sheet3.Cells(pageno, "z") = node.ChildNodes(i).SelectSingleNode("basement").Text
                Sheet3.Cells(pageno, "aa") = node.ChildNodes(i).SelectSingleNode("roof").Text
                Sheet3.Cells(pageno, "ab") = node.ChildNodes(i).SelectSingleNode("exteriorMaterial").Text
                Sheet3.Cells(pageno, "ac") = node.ChildNodes(i).SelectSingleNode("view").Text
                Sheet3.Cells(pageno, "ad") = node.ChildNodes(i).SelectSingleNode("parkingType").Text
                
                Sheet3.Cells(pageno, "ae") = node.ChildNodes(i).SelectSingleNode("coveredParkingSpaces").Text
                Sheet3.Cells(pageno, "af") = node.ChildNodes(i).SelectSingleNode("heatingSources").Text
                Sheet3.Cells(pageno, "ag") = node.ChildNodes(i).SelectSingleNode("heatingSystem").Text
                Sheet3.Cells(pageno, "ah") = node.ChildNodes(i).SelectSingleNode("coolingSystem").Text
                Sheet3.Cells(pageno, "ai") = node.ChildNodes(i).SelectSingleNode("appliances").Text
                Sheet3.Cells(pageno, "aj") = node.ChildNodes(i).SelectSingleNode("floorCovering").Text
                Sheet3.Cells(pageno, "ak") = node.ChildNodes(i).SelectSingleNode("rooms").Text
                Sheet3.Cells(pageno, "al") = node.ChildNodes(i).SelectSingleNode("architecture").Text
                
                
            'ElseIf node.ChildNodes(i).BaseName = "coveredParkingSpaces" Then
             '   Sheet3.Cells(pageno, "am") = node.ChildNodes(i).Text
'            ElseIf node.ChildNodes(i).BaseName = "lotSizeSqFt" Then
'                Sheet3.Cells(pageno, 14) = node.ChildNodes(i).Text
'            ElseIf node.ChildNodes(i).BaseName = "totalRooms" Then
'                Sheet3.Cells(pageno, 15) = node.ChildNodes(i).Text
'            ElseIf node.ChildNodes(i).BaseName = "finishedSqFt" Then
'                Sheet3.Cells(pageno, 16) = node.ChildNodes(i).Text
'            ElseIf node.ChildNodes(i).BaseName = "yearBuilt" Then
'                Sheet3.Cells(pageno, 17) = node.ChildNodes(i).Text
'            ElseIf node.ChildNodes(i).BaseName = "zpid" Then
'                Sheet3.Cells(pageno, 1) = node.ChildNodes(i).Text
'            ElseIf node.ChildNodes(i).BaseName = "links" Then
'                Sheet3.Cells(pageno, 2) = node.ChildNodes(i).SelectSingleNode("homedetails").Text
'            ElseIf node.ChildNodes(i).BaseName = "zestimate" Then
'                Sheet3.Cells(pageno, 3) = node.ChildNodes(i).SelectSingleNode("amount").Text
'
'                Sheet3.Cells(pageno, 4) = node.ChildNodes(i).SelectSingleNode("valuationRange").SelectSingleNode("low").Text
'                Sheet3.Cells(pageno, 5) = node.ChildNodes(i).SelectSingleNode("valuationRange").SelectSingleNode("high").Text
'            ElseIf node.ChildNodes(i).BaseName = "rentzestimate" Then
'                Sheet3.Cells(pageno, 6) = node.ChildNodes(i).SelectSingleNode("amount").Text
'                Sheet3.Cells(pageno, 7) = node.ChildNodes(i).SelectSingleNode("valuationRange").SelectSingleNode("low").Text
'                Sheet3.Cells(pageno, 8) = node.ChildNodes(i).SelectSingleNode("valuationRange").SelectSingleNode("high").Text
'            ElseIf node.ChildNodes(i).BaseName = "localRealEstate" Then
'                Sheet3.Cells(pageno, 9) = node.ChildNodes(i).SelectSingleNode("region").SelectSingleNode("zindexValue").Text
'            ElseIf node.ChildNodes(i).BaseName = "lastSoldDate" Then
'                Sheet3.Cells(pageno, 10) = node.ChildNodes(i).Text
'            ElseIf node.ChildNodes(i).BaseName = "lastSoldPrice" Then
'                Sheet3.Cells(pageno, 11) = node.ChildNodes(i).Text
'
'            ElseIf node.ChildNodes(i).BaseName = "taxAssessmentYear" Then
'                Sheet3.Cells(pageno, 18) = node.ChildNodes(i).Text
'            ElseIf node.ChildNodes(i).BaseName = "taxAssessment" Then
'                Sheet3.Cells(pageno, 19) = node.ChildNodes(i).Text
'            ElseIf node.ChildNodes(i).BaseName = "useCode" Then
'                Sheet3.Cells(pageno, 20) = node.ChildNodes(i).Text
            End If
            
        
        Next i
        

    Next node

End Sub

Attribute VB_Name = "a_fulton"
Option Private Module
Sub FultonGA()


Application.ScreenUpdating = False
'Sheet3.Visible = xlSheetVisible

Dim foundcell As Excel.Range
Dim counter As Long
On Error GoTo errhandle
Dim anchor As MSHTML.HTMLAnchorElement
Dim span As MSHTML.HTMLSpanElement, span2 As MSHTML.HTMLSpanElement
Dim adrStr, downloadURL, daysSold, savePath As String
Dim divTable, divRow As MSHTML.HTMLDivElement
Dim startPoz, endPoz As Long
Dim req As WinHttpRequest
Dim oStream1 As Object
Dim minLat, maxLat, minLong, maxLong, market, bounds As String
Dim spliter() As String
Dim oJSON As aspJSON
Dim str_json As String

Dim flag As Boolean
Dim URL As String
Dim CookieData As String
Dim htmlob As HTMLObjectElement
Dim elemenat As IHTMLElement
Dim doc As HTMLDocument
Dim HTMLdoc As Object
Dim vreme, vreme1, vreme2 As Date
Dim PropID As String
Dim ListingID As String
Dim LastRow As Long
Dim StreetNum As String, StreetDir As String, StreetName As String, StreetType As String, UnitNum As String


Dim zip As String
Dim searchAddr As String

Sheet3.UsedRange.Offset(1, 0).ClearContents

LastRow = Sheets("Imported").Cells(850000, ConvertlettertoNumber(Sheet2.Range("PropAdd"))).End(xlUp).Row

For i = 2 To LastRow


searchAddr = ""

searchAddr = Sheets("Imported").Cells(i, ConvertlettertoNumber(Sheet2.Range("PropAdd")))


If searchAddr = "" Then GoTo nextrec

If InStr(1, i / 5, ".") = 0 Then
DoEvents
Application.StatusBar = "Processing..." & Format(i / LastRow, "0.00%")
End If

searchAddr = Trim(searchAddr)

On Error Resume Next
zip = Left(RxMatchesZIP(searchAddr), 5)

If zip <> "" Then

Set foundcell = Nothing: Set foundcell = Sheet5.Columns(1).Find(what:=zip, lookat:=xlWhole)
If Not foundcell Is Nothing Then

Sheet3.Cells(i, 1) = searchAddr
Sheet3.Cells(i, 6).NumberFormat = "@"
Sheet3.Cells(i, 6) = zip
On Error Resume Next
Sheet3.Cells(i, 5) = Sheet5.Cells(foundcell.Row, 3)
On Error Resume Next
Sheet3.Cells(i, 4) = Sheet5.Cells(foundcell.Row, 2)
On Error Resume Next
Sheet3.Cells(i, 3) = WorksheetFunction.Proper(Split(LCase(Sheet3.Cells(i, 1)), LCase(Sheet3.Cells(i, 4)))(0))
On Error Resume Next
Sheet3.Cells(i, 7) = Sheet5.Cells(foundcell.Row, 4)

End If



End If

nextrec:
Next i
DoEvents
'Sheet3.Visible = xlSheetVeryHidden
'MsgBox "Redfin search has completed the run!", vbInformation
Exit Sub
errhandle:
'IE_Kill
MsgBox "Something went wrong,please rerun", vbCritical
Sheet3.Visible = xlSheetVeryHidden
Application.ScreenUpdating = True
End
endRedfin:
End Sub




Attribute VB_Name = "a_zillow_scrape"
Option Private Module
Sub zillowdetails()
'Application.ScreenUpdating = False


Dim table_counter As Long
Dim elemenat2 As IHTMLElement
Dim counter As Long
Dim URL As String
Dim i As Long
Dim ecol As Long
Dim htmlob As HTMLObjectElement
Dim elemenat As IHTMLElement
Dim doc As HTMLDocument, doc2 As HTMLDocument
Dim objie As InternetExplorer
Dim vreme, vreme1, vreme2 As Date
Dim brojac As Long
Dim last_page As Long
Dim taxURL As String


brojac = 2
last_page = Sheet3.Range("a100000").End(xlUp).Row
the_start: 'start over after n minutes

vreme = Now 'start time


'create internet explorer object for browsing
Set objie = CreateObject("internetexplorer.application")
 With objie
 .Visible = False

For i = 0 + brojac To last_page
DoEvents
If Sheet3.Cells(i, 2) <> "" Then
'resetuj na 20 minuta
     vreme2 = Now
    vreme1 = DateDiff("s", vreme, vreme2)
    If vreme1 > 300 Then
    
            objie.Quit
            Set objie = Nothing
            brojac = i
            IE_Kill
            Application.Wait (Now + TimeValue("0:00:05"))
            GoTo the_start
    End If
 
 
 'kraj reset


  URL = Sheet3.Cells(i, 2) '.Hyperlinks(1).Address
  .navigate URL
   vreme2 = Now
    Do While .Busy Or .readyState <> 4
vreme1 = DateDiff("s", vreme2, Now)
    If vreme1 > 10 Then
    Exit Do
    End If
    DoEvents
    Loop
    Application.Wait (Now + TimeValue("0:00:02"))
    Set doc = objie.document
  
  
DoEvents
'For Each elemenat In doc.getElementsByTagName("span")
'
'
'If elemenat.className = "zsg-icon-phone" Then
'On Error Resume Next
'Sheet3.Cells(i, "am") = Replace(Trim(elemenat.parentElement.innerText), vbCrLf, "")
'
'ElseIf elemenat.className = "property-info contact-phone" Then
'On Error Resume Next
'Sheet3.Cells(i, "am") = Replace(Trim(elemenat.innerText), vbCrLf, "")
'
'End If
'
'Next
DoEvents

For Each elemenat In doc.getElementsByTagName("span")

'If elemenat.className = "property-info notranslate building-name" Then
'On Error Resume Next
'Sheet3.Cells(i, "an") = Trim(elemenat.innerText)
'ElseIf elemenat.className = "property-info company-name" Then
'On Error Resume Next
'Sheet3.Cells(i, "ao") = Trim(elemenat.innerText)

If elemenat.ID = "listing-icon" Then
On Error Resume Next
Sheet3.Cells(i, "ap") = Replace(Replace(Trim(elemenat.getAttribute("data-icon-class")), "zsg-icon-", ""), "-", " ")

Exit For
End If

Next


For Each elemenat In doc.getElementsByTagName("meta")

'If elemenat.className = "property-info notranslate building-name" Then
'On Error Resume Next
'Sheet3.Cells(i, "an") = Trim(elemenat.innerText)
'ElseIf elemenat.className = "property-info company-name" Then
'On Error Resume Next
'Sheet3.Cells(i, "ao") = Trim(elemenat.innerText)

If InStr(1, elemenat.outerHTML, "product:price:amount") > 0 Then
On Error Resume Next
Sheet3.Cells(i, "aq") = Replace(elemenat.getAttribute("content"), ".00", "")

ElseIf InStr(1, elemenat.outerHTML, "og:image") > 0 Then

    If elemenat.getAttribute("property") = "og:image" Then
    On Error Resume Next
    Sheet3.Cells(i, "ar") = Replace(elemenat.getAttribute("content"), ".00", "")
    End If
End If

Next


Set htmlob = Nothing
For Each elemenat In doc.getElementsByTagName("h2")
If Trim(elemenat.innerText) = "Contact Listing Agent" Or Trim(elemenat.innerText) = "Contact Agent" Then
Set htmlob = elemenat.parentElement
Exit For
End If
Next


DoEvents
If Not htmlob Is Nothing Then

    For Each elemenat In htmlob.getElementsByTagName("span")
    
    If elemenat.className = "snl name notranslate" Then
        If Sheet3.Cells(i, "as") = "" Then
            On Error Resume Next
            Sheet3.Cells(i, "as") = Trim(elemenat.innerText)
        End If
    ElseIf elemenat.className = "snl company-name" Then
        If Sheet3.Cells(i, "as") = "" Then
            On Error Resume Next
            Sheet3.Cells(i, "at") = Trim(elemenat.innerText)
        End If
    ElseIf elemenat.className = "snl phone" Then
        If Sheet3.Cells(i, "as") = "" Then
            On Error Resume Next
            Sheet3.Cells(i, "au") = Trim(elemenat.innerText)
        End If
    End If
    
    Next

End If



'
'For Each elemenat In doc.all
'
'If InStr(1, elemenat.outerHTML, "og:zillow_fb:address") > 0 And elemenat.tagName = "META" Then
'On Error Resume Next
'Sheet3.Cells(i, "ap") = Trim(elemenat.getAttribute("content"))
'Exit For
'End If
'
'Next

'On Error Resume Next
' '   Sheet3.Cells(i, 6) = Split(Split(doc.body.innerHTML, Chr(34) & "zestimate" & Chr(34) & ":" & Chr(34))(1), Chr(34))(0)
'
'If Sheet3.Cells(i, 6) = "" Then
'On Error Resume Next
'On Error Resume Next
'Sheet3.Cells(i, 6) = Trim(Split(Split(doc.body.innerHTML, Chr(34) & "Address" & Chr(34) & "," & Chr(34))(1), Chr(34))(0))
'
'End If

'
'''tax
'For Each elemenat In doc.getElementsByTagName("div")
'
'If counter = 1 Then
'    If elemenat.innerText = "Zestimate range" Then
'    Set htmlob = Nothing: Set htmlob = elemenat.parentElement
'    On Error Resume Next
'    Sheet3.Cells(i, 16) = formatZIllval(htmlob.getElementsByTagName("span")(1).innerText)
'    On Error Resume Next
'    Sheet3.Cells(i, 17) = formatZIllval(htmlob.getElementsByTagName("span")(0).innerText)
'    counter = counter + 1
'    End If
'
'
'Else
'    If elemenat.innerText = "Zestimate range" Then
'        Set htmlob = Nothing: Set htmlob = elemenat.parentElement
'        On Error Resume Next
'        Sheet3.Cells(i, 18) = formatZIllval(htmlob.getElementsByTagName("span")(1).innerText)
'        On Error Resume Next
'        Sheet3.Cells(i, 19) = formatZIllval(htmlob.getElementsByTagName("span")(0).innerText)
'
'        On Error Resume Next
'        Sheet3.Cells(i, 20) = Replace(htmlob.parentElement.parentElement.getElementsByTagName("div")(3).innerText, ",", "")
'counter = counter + 1
'    End If
'End If
'
'Next
'
'On Error Resume Next
'taxURL = Replace(Replace("http://www.zillow.com" & RxGETTAX(doc.body.innerHTML), Chr(34), ""), ",", "") 'AjaxRender.htm?encparams=" & Split(Split(doc.body.innerHTML, "AjaxRender.htm?encparams=")(1), Chr(34))(0)
'
'
'
'Set HTMLdoc = Nothing
'Set http = Nothing
'Set http = CreateObject("WinHttp.WinHttpRequest.5.1")
'Set HTMLdoc = CreateObject("HTMLFile")
'http.Open "GET", taxURL, False
'http.Send
'On Error Resume Next
'HTMLdoc.body.innerHTML = http.responseText
'
'Set clip = New DataObject
'    clip.SetText "<table>" & HTMLdoc.body.innerHTML & "</table>"
'    clip.PutInClipboard
'
'    Sheet4.Activate
'    Sheet4.Cells.Delete
'    Sheet4.Cells.NumberFormat = "@"
'  On Error Resume Next
'Sheet4.Cells(1, 1).Select
'Sheet4.PasteSpecial Format:="Unicode Text", link:=False, DisplayAsIcon:=False
'  On Error Resume Next
''Sheet4.DrawingObjects.Delete
''On Error Resume Next
' '  Sheet4.Cells.UnMerge
'
'DoEvents
'
'If InStr(1, Sheet4.Cells(7, 2), "-") > 0 Then
'On Error Resume Next
'Sheet3.Cells(i, 13) = MSformat(Split(Sheet4.Cells(7, 2), "-")(0))
'Else
'On Error Resume Next
'Sheet3.Cells(i, 13) = MSformat(Split(Sheet4.Cells(7, 2), "+")(0))
'
'
'End If
'
'On Error Resume Next
'Sheet3.Cells(i, 14) = MSformat(Replace(Split(Sheet4.Cells(7, 4), "<")(0), ",", ""))
'On Error Resume Next
'Sheet3.Cells(i, 15) = "=n" & i & "/" & Sheet7.Cells(7, 2)
'
'
''cap vals
'
'Sheet3.Cells(i, 22) = "=iferror((e" & i & "/o" & i & ")," & Chr(34) & Chr(34) & ")"
'Sheet3.Cells(i, 23) = "=iferror((p" & i & "*12)/(H" & i & "+" & Sheet7.Cells(6, 2) & ")," & Chr(34) & Chr(34) & ")"
'Sheet3.Cells(i, 24) = "=iferror((q" & i & "*12)/(H" & i & "+" & Sheet7.Cells(6, 2) & ")," & Chr(34) & Chr(34) & ")"
'Sheet3.Cells(i, 25) = "=iferror((h" & i & "+" & Sheet7.Cells(5, 2) & ")/O" & i & "," & Chr(34) & Chr(34) & ")"
'
''=(H3+Password!$B$5)/O3
next_rec:
End If
DoEvents
Application.StatusBar = "Extracting details on Zillow Properties..." & Format(i / last_page, "0.00%")
Next i

End With
objie.Quit
Set objie = Nothing
Set doc = Nothing

Application.StatusBar = ""
 'IE_Kill
    Application.DisplayAlerts = True

  
  Sheet2.Activate
MsgBox "Zillow details have been extracted!", vbInformation
  Exit Sub
errhandle:
objie.Quit
Set objie = Nothing
Set doc = Nothing

Sheet2.Activate
MsgBox "Error occured while processing your request, run again", vbCritical
  
End Sub

Public Function formatZIllval(ByVal vred As String)

If InStr(1, vred, "K") > 0 Then

formatZIllval = CDbl(Replace(Replace(vred, "K", ""), "$", "")) * 1000

Else
formatZIllval = vred
End If

End Function


Attribute VB_Name = "aspJSON"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

'   thanks to
'   Februari 2014 - Version 1.17 by Gerrit van Kuipers

    Public data
    Private p_JSONstring
    Private aj_in_string, aj_in_escape, aj_i_tmp, aj_char_tmp, aj_s_tmp, aj_line_tmp, aj_line, aj_lines, aj_currentlevel, aj_currentkey, aj_currentvalue, aj_newlabel, aj_XmlHttp, aj_RegExp, aj_colonfound

    Private JSONoutput_level

    Private Sub Class_Initialize()
    
        Set data = Collection()

        Set aj_RegExp = New RegExp
        aj_RegExp.Pattern = "\s{0,}(\S{1}[\s,\S]*\S{1})\s{0,}"
        aj_RegExp.Global = False
        aj_RegExp.IgnoreCase = True
        aj_RegExp.MultiLine = True
        
    End Sub

    Private Sub Class_Terminate()
        Set data = Nothing
        Set aj_RegExp = Nothing
    End Sub

    Public Sub loadJSON(inputsource)
        inputsource = aj_MultilineTrim(inputsource)
        If Len(inputsource) = 0 Then Err.Raise 1, "loadJSON Error", "No data to load."
        
        Select Case Left(inputsource, 1)
            Case "{", "["
            Case Else
                Set aj_XmlHttp = CreateObject("Msxml2.ServerXMLHTTP")
                aj_XmlHttp.Open "GET", inputsource, False
                aj_XmlHttp.setRequestHeader "Content-Type", "text/json"
                aj_XmlHttp.setRequestHeader "CharSet", "UTF-8"
                aj_XmlHttp.Send
                inputsource = aj_XmlHttp.responseText
                Set aj_XmlHttp = Nothing
        End Select

        p_JSONstring = CleanUpJSONstring(inputsource)
        aj_lines = Split(p_JSONstring, Chr(13) & Chr(10))

        Dim level(99)
        aj_currentlevel = 1
        Set level(aj_currentlevel) = data
        For Each aj_line In aj_lines
            aj_currentkey = ""
            aj_currentvalue = ""
            If InStr(aj_line, ":") > 0 Then
                aj_in_string = False
                aj_in_escape = False
                aj_colonfound = False
                For aj_i_tmp = 1 To Len(aj_line)
                    If aj_in_escape Then
                        aj_in_escape = False
                    Else
                        Select Case Mid(aj_line, aj_i_tmp, 1)
                            Case """"
                                aj_in_string = Not aj_in_string
                            Case ":"
                                If Not aj_in_escape And Not aj_in_string Then
                                    aj_currentkey = Left(aj_line, aj_i_tmp - 1)
                                    aj_currentvalue = Mid(aj_line, aj_i_tmp + 1)
                                    aj_colonfound = True
                                    Exit For
                                End If
                            Case "\"
                                aj_in_escape = True
                        End Select
                    End If
                Next
                If aj_colonfound Then
                    aj_currentkey = aj_Strip(aj_JSONDecode(aj_currentkey), """")
                    If Not level(aj_currentlevel).Exists(aj_currentkey) Then level(aj_currentlevel).Add aj_currentkey, ""
                End If
            End If
            If Right(aj_line, 1) = "{" Or Right(aj_line, 1) = "[" Then
                If Len(aj_currentkey) = 0 Then aj_currentkey = level(aj_currentlevel).Count
                Set level(aj_currentlevel).Item(aj_currentkey) = Collection()
                Set level(aj_currentlevel + 1) = level(aj_currentlevel).Item(aj_currentkey)
                aj_currentlevel = aj_currentlevel + 1
                aj_currentkey = ""
            ElseIf Right(aj_line, 1) = "}" Or Right(aj_line, 1) = "]" Or Right(aj_line, 2) = "}," Or Right(aj_line, 2) = "]," Then
                aj_currentlevel = aj_currentlevel - 1
            ElseIf Len(Trim(aj_line)) > 0 Then
                If Len(aj_currentvalue) = 0 Then aj_currentvalue = aj_line
                aj_currentvalue = getJSONValue(aj_currentvalue)

                If Len(aj_currentkey) = 0 Then aj_currentkey = level(aj_currentlevel).Count
                level(aj_currentlevel).Item(aj_currentkey) = aj_currentvalue
            End If
        Next
    End Sub

    Public Function Collection()
        Set Collection = CreateObject("Scripting.Dictionary")
    End Function

    Public Function AddToCollection(dictobj)
        If TypeName(dictobj) <> "Dictionary" Then Err.Raise 1, "AddToCollection Error", "Not a collection."
        aj_newlabel = dictobj.Count
        dictobj.Add aj_newlabel, Collection()
        Set AddToCollection = dictobj.Item(aj_newlabel)
    End Function

    Private Function CleanUpJSONstring(aj_originalstring)
        aj_originalstring = Replace(aj_originalstring, Chr(13) & Chr(10), "")
        aj_originalstring = Mid(aj_originalstring, 2, Len(aj_originalstring) - 2)
        aj_in_string = False: aj_in_escape = False: aj_s_tmp = ""
        For aj_i_tmp = 1 To Len(aj_originalstring)
            aj_char_tmp = Mid(aj_originalstring, aj_i_tmp, 1)
            If aj_in_escape Then
                aj_in_escape = False
                aj_s_tmp = aj_s_tmp & aj_char_tmp
            Else
                Select Case aj_char_tmp
                    Case "\": aj_s_tmp = aj_s_tmp & aj_char_tmp: aj_in_escape = True
                    Case """": aj_s_tmp = aj_s_tmp & aj_char_tmp: aj_in_string = Not aj_in_string
                    Case "{", "["
                        aj_s_tmp = aj_s_tmp & aj_char_tmp & aj_InlineIf(aj_in_string, "", Chr(13) & Chr(10))
                    Case "}", "]"
                        aj_s_tmp = aj_s_tmp & aj_InlineIf(aj_in_string, "", Chr(13) & Chr(10)) & aj_char_tmp
                    Case ",": aj_s_tmp = aj_s_tmp & aj_char_tmp & aj_InlineIf(aj_in_string, "", Chr(13) & Chr(10))
                    Case Else: aj_s_tmp = aj_s_tmp & aj_char_tmp
                End Select
            End If
        Next

        CleanUpJSONstring = ""
        aj_s_tmp = Split(aj_s_tmp, Chr(13) & Chr(10))
        For Each aj_line_tmp In aj_s_tmp
            aj_line_tmp = Replace(Replace(aj_line_tmp, Chr(10), ""), Chr(13), "")
            CleanUpJSONstring = CleanUpJSONstring & aj_Trim(aj_line_tmp) & Chr(13) & Chr(10)
        Next
    End Function

    Private Function getJSONValue(ByVal val)
        val = Trim(val)
        If Left(val, 1) = ":" Then val = Mid(val, 2)
        If Right(val, 1) = "," Then val = Left(val, Len(val) - 1)
        val = Trim(val)

        Select Case val
            Case "true": getJSONValue = True
            Case "false": getJSONValue = False
            Case "null": getJSONValue = Null
            Case Else
                If (InStr(val, """") = 0) Then
                    If IsNumeric(val) Then
                        getJSONValue = CDbl(val)
                    Else
                        getJSONValue = val
                    End If
                Else
                    If Left(val, 1) = """" Then val = Mid(val, 2)
                    If Right(val, 1) = """" Then val = Left(val, Len(val) - 1)
                    getJSONValue = aj_JSONDecode(Trim(val))
                End If
        End Select
    End Function

    
    Public Function JSONoutput()
        Dim wrap_dicttype, aj_label
        JSONoutput_level = 1
        wrap_dicttype = "[]"
        For Each aj_label In data
             If Not aj_IsInt(aj_label) Then wrap_dicttype = "{}"
        Next
        JSONoutput = Left(wrap_dicttype, 1) & Chr(13) & Chr(10) & GetDict(data) & Right(wrap_dicttype, 1)
    End Function

    Private Function GetDict(objDict)
        Dim aj_item, aj_keyvals, aj_label, aj_dicttype
        For Each aj_item In objDict
            Select Case TypeName(objDict.Item(aj_item))
                Case "Dictionary"
                    GetDict = GetDict & Space(JSONoutput_level * 4)
                    
                    aj_dicttype = "[]"
                    For Each aj_label In objDict.Item(aj_item).Keys
                         If Not aj_IsInt(aj_label) Then aj_dicttype = "{}"
                    Next
                    If aj_IsInt(aj_item) Then
                        GetDict = GetDict & (Left(aj_dicttype, 1) & Chr(13) & Chr(10))
                    Else
                        GetDict = GetDict & ("""" & aj_JSONEncode(aj_item) & """" & ": " & Left(aj_dicttype, 1) & Chr(13) & Chr(10))
                    End If
                    JSONoutput_level = JSONoutput_level + 1
                    
                    aj_keyvals = objDict.Keys
                    GetDict = GetDict & (GetSubDict(objDict.Item(aj_item)) & Space(JSONoutput_level * 4) & Right(aj_dicttype, 1) & aj_InlineIf(aj_item = aj_keyvals(objDict.Count - 1), "", ",") & Chr(13) & Chr(10))
                Case Else
                    aj_keyvals = objDict.Keys
                    GetDict = GetDict & (Space(JSONoutput_level * 4) & aj_InlineIf(aj_IsInt(aj_item), "", """" & aj_JSONEncode(aj_item) & """: ") & WriteValue(objDict.Item(aj_item)) & aj_InlineIf(aj_item = aj_keyvals(objDict.Count - 1), "", ",") & Chr(13) & Chr(10))
            End Select
        Next
    End Function

    Private Function aj_IsInt(val)
        aj_IsInt = (TypeName(val) = "Integer" Or TypeName(val) = "Long")
    End Function

    Private Function GetSubDict(objSubDict)
        GetSubDict = GetDict(objSubDict)
        JSONoutput_level = JSONoutput_level - 1
    End Function

    Private Function WriteValue(ByVal val)
        Select Case TypeName(val)
            Case "Double", "Integer", "Long": WriteValue = val
            Case "Null": WriteValue = "null"
            Case "Boolean": WriteValue = aj_InlineIf(val, "true", "false")
            Case Else: WriteValue = """" & aj_JSONEncode(val) & """"
        End Select
    End Function

    Private Function aj_JSONEncode(ByVal val)
        val = Replace(val, "\", "\\")
        val = Replace(val, """", "\""")
        'val = Replace(val, "/", "\/")
        val = Replace(val, Chr(8), "\b")
        val = Replace(val, Chr(12), "\f")
        val = Replace(val, Chr(10), "\n")
        val = Replace(val, Chr(13), "\r")
        val = Replace(val, Chr(9), "\t")
        aj_JSONEncode = Trim(val)
    End Function

    Private Function aj_JSONDecode(ByVal val)
        val = Replace(val, "\""", """")
        val = Replace(val, "\\", "\")
        val = Replace(val, "\/", "/")
        val = Replace(val, "\b", Chr(8))
        val = Replace(val, "\f", Chr(12))
        val = Replace(val, "\n", Chr(10))
        val = Replace(val, "\r", Chr(13))
        val = Replace(val, "\t", Chr(9))
        aj_JSONDecode = Trim(val)
    End Function

    Private Function aj_InlineIf(condition, returntrue, returnfalse)
        If condition Then aj_InlineIf = returntrue Else aj_InlineIf = returnfalse
    End Function

    Private Function aj_Strip(ByVal val, stripper)
        If Left(val, 1) = stripper Then val = Mid(val, 2)
        If Right(val, 1) = stripper Then val = Left(val, Len(val) - 1)
        aj_Strip = val
    End Function

    Private Function aj_MultilineTrim(TextData)
        aj_MultilineTrim = aj_RegExp.Replace(TextData, "$1")
    End Function

    Private Function aj_Trim(val)
        aj_Trim = Trim(val)
        Do While Left(aj_Trim, 1) = Chr(9): aj_Trim = Mid(aj_Trim, 2): Loop
        Do While Right(aj_Trim, 1) = Chr(9): aj_Trim = Left(aj_Trim, Len(aj_Trim) - 1): Loop
        aj_Trim = Trim(aj_Trim)
    End Function

Attribute VB_Name = "cleanMOD"
Option Private Module
Sub cleanser()
Attribute cleanser.VB_ProcData.VB_Invoke_Func = "C\n14"

Dim old_value As String
   
   Application.ScreenUpdating = False
    For Each cell In Sheets("Imported").UsedRange.Cells
          old_value = cell.Value
          cell.Value = WorksheetFunction.Trim(WorksheetFunction.Clean(WorksheetFunction.Substitute(Replace(old_value, vbCrLf, " "), Chr(160), " ")))
    Next
        
    Application.ScreenUpdating = True
 '   MsgBox "Your sheet has been cleaned!", vbInformation
End Sub
Attribute VB_Name = "data_Importer"
Option Private Module
Sub ImportAndprocess()

If Sheet2.Range("File1") = "" Then
    MsgBox "Please browse for the CSV file using the browse button!", vbCritical
    Exit Sub
End If


Application.ScreenUpdating = False
Application.DisplayAlerts = False
On Error Resume Next
Sheets("Imported").Delete
On Error Resume Next
Sheets("Export").Delete


'Imported
 Workbooks.Open FileName:=Sheet2.Range("File1")
        Sheets().Move After:=ThisWorkbook.Sheets _
          (ThisWorkbook.Sheets.Count)
         
ActiveSheet.Name = "Imported"
Sheet2.Range("PropAdd") = ""
'Sheet2.Range("PropCity") = ""
'Sheet2.Range("PropState") = ""
'Sheet2.Range("PropZip") = ""

Dim foundcell As Excel.Range

Set foundcell = Nothing: Set foundcell = Sheets("Imported").Rows(1).Find(what:="Addre", lookat:=xlPart)
If Not foundcell Is Nothing Then
Sheet2.Range("PropAdd") = ConvertToLetter(foundcell.Column)
End If
'
'Set foundcell = Nothing: Set foundcell = Sheets("Imported").Rows(1).Find(what:="Property City", lookat:=xlPart)
'If Not foundcell Is Nothing Then
'Sheet2.Range("PropCity") = ConvertToLetter(foundcell.Column)
'End If
'
'Set foundcell = Nothing: Set foundcell = Sheets("Imported").Rows(1).Find(what:="Property State", lookat:=xlPart)
'If Not foundcell Is Nothing Then
'Sheet2.Range("PropState") = ConvertToLetter(foundcell.Column)
'End If
'
'Set foundcell = Nothing: Set foundcell = Sheets("Imported").Rows(1).Find(what:="Property Zip", lookat:=xlPart)
'If Not foundcell Is Nothing Then
'Sheet2.Range("PropZip") = ConvertToLetter(foundcell.Column)
'End If

''
''
'''file 2
'' Workbooks.Open FileName:=Sheet2.Range("File2")
''        Sheets().Move After:=ThisWorkbook.Sheets _
''          (ThisWorkbook.Sheets.Count)
''
''ActiveSheet.Name = "File 2"
'
'Sheets.Add
'ActiveSheet.Name = "Export"
'
'
'
'
'
''do names
'Call ProcessMatches
'
'
'
''export sheet
'Call ExportsheetsSelection
'
'Application.DisplayAlerts = False
'
'On Error Resume Next
'Sheets("Imported").Delete
''On Error Resume Next
''Sheets("File 2").Delete
'On Error Resume Next
'Sheets("Export").Delete
Application.StatusBar = ""

Application.ScreenUpdating = True
Application.DisplayAlerts = True

MsgBox "File has been imported", vbInformation
End Sub




Sub ProcessMatches()

Application.ScreenUpdating = False
Dim i As Long
Dim k As Long
Dim erow As Long
Dim fcell As Excel.Range
Dim OwnerCol As Long

Set fcell = Nothing: Set fcell = Sheets("Imported").Rows(1).Find(what:="Ownership", lookat:=xlWhole)
On Error Resume Next
OwnerCol = fcell.Column

For i = 2 To Sheets("Imported").Range("a950000").End(xlUp).Row

On Error Resume Next
Sheets("Imported").Cells(i, OwnerCol) = GetOwnerName(Sheets("Imported").Cells(i, OwnerCol))

Next i

Call CopyValues(Sheets("Imported").UsedRange, Sheets("Export").Range("a1"))
'Sheets("Export").UsedRange.Offset(1, 0).ClearContents





End Sub


Sub CopyValues(rngSource As Range, rngTarget As Range)
 
    rngTarget.Resize(rngSource.Rows.Count, rngSource.Columns.Count).Value = rngSource.Value
 
End Sub




'Attribute VB_Name = "Export_Sheets"
Sub ExportsheetsSelection()
    'Sheet2.Visible = xlSheetVisible
    Dim NewName As String
    Dim nm As Name
    Dim ws As Worksheet
    NewName = "OwnershipCorrection_" & Format(Now(), "yyyy-mm-dd") ' MonthName(Sheet1.Cells(9, 1))
     
    Call cleanser
     Dim i As Long
     
     For i = 2 To Sheets("Export").Range("a95000").End(xlUp).Row
     
     If Len(Sheets("Export").Cells(i, 17)) = 4 Then
     Sheets("Export").Cells(i, 17) = "'0" & Sheets("Export").Cells(i, 17)
     End If
     
     If Len(Sheets("Export").Cells(i, 12)) = 4 Then
     Sheets("Export").Cells(i, 12) = "'0" & Sheets("Export").Cells(i, 12)
     End If
     
     Next i
     Sheets("Export").Columns.AutoFit
    With Application
        .ScreenUpdating = False
         
         '       Copy specific sheets
         '       *SET THE SHEET NAMES TO COPY BELOW*
         '       Array("Sheet Name", "Another sheet name", "And Another"))
         '       Sheet names go inside quotes, seperated by commas
        On Error GoTo ErrCatcher
        Sheets(Array("Export")).Copy
        On Error GoTo 0
        
         '       Input box to name new file
         'InputBox("Please Specify the name of your new workbook", "New Copy")
         Application.DisplayAlerts = False
         '       Save it with the NewName and in the same directory as original
        Application.ActiveWorkbook.SaveAs ThisWorkbook.Path & "\" & NewName & ".xlsx", FileFormat:=51
        Application.ActiveWorkbook.Close SaveChanges:=False
         Application.DisplayAlerts = True
        .ScreenUpdating = False
        
    End With
MsgBox "Sheets have been exported to " & ThisWorkbook.Path & "\" & NewName & ".xlsx", vbInformation
    Exit Sub
     
ErrCatcher:
    MsgBox "Specified sheets do not exist within this workbook"
End Sub




Attribute VB_Name = "export_MOD"
Option Private Module
Sub ExportSheetsToNewWorkbookWORKING()

Dim FileExtStr As String
Dim FileFormatNum As Long
Dim xWs As Worksheet
Dim xWb As Workbook
Dim FolderName As String
Application.ScreenUpdating = False
Set xWb = ThisWorkbook
FolderName = xWb.Path & "\Files"
On Error Resume Next
MkDir FolderName


Dim NameOut As String

On Error Resume Next
NameOut = Left(Split(Sheet2.Range("File1"), "\")(UBound(Split(Sheet2.Range("File1"), "\"))), InStrRev(Split(Sheet2.Range("File1"), "\")(UBound(Split(Sheet2.Range("File1"), "\"))), ".") - 1)



    Set xWs = Sheets("Imported")
    xWs.Copy
    FileExtStr = ".xlsx": FileFormatNum = 51

    xFile = FolderName & "\" & "Export_" & NameOut & "_" & Format(Now(), "yyyy-mm-dd_hh-mm-nn") & FileExtStr
    Application.ActiveWorkbook.SaveAs xFile, FileFormat:=FileFormatNum
    Application.ActiveWorkbook.Close False

MsgBox "You can find the files in " & FolderName, vbInformation
Application.ScreenUpdating = True
End Sub
Attribute VB_Name = "folder"
Option Private Module
Sub GetFolder()
Sheet2.Range("PropAdd") = ""
'Sheet2.Range("PropCity") = ""
'Sheet2.Range("PropState") = ""
'Sheet2.Range("PropZip") = ""

On Error GoTo 0
Dim fldr As FileDialog
Dim sItem As String
Set fldr = Application.FileDialog(msoFileDialogFilePicker)
With fldr
    .Title = "Select a file to clean the ownership data"
    .AllowMultiSelect = False
    .InitialFileName = strPath
    .Filters.Clear
    .Filters.Add "Excel files", "*.csv*,*xlsx"
    If .Show <> -1 Then GoTo NextCode
    sItem = .SelectedItems(1)
End With
NextCode:
'GetFolder = sItem
Sheet2.Range("File1") = sItem
Set fldr = Nothing


If sItem = "" Then GoTo kraj




kraj:
End Sub




Attribute VB_Name = "killer"
Option Private Module
Sub IE_Kill()

Dim aProcess As Boolean
Dim WMI, objProcess, objProcesses As Object

    aProcess = False
Again:
On Error Resume Next
   Set WMI = GetObject("winmgmts:")
    Set objProcesses = WMI.execquery("SELECT * FROM win32_process WHERE Name = 'iexplore.exe'")
    For Each objProcess In objProcesses
        objProcess.Terminate
    Next

On Error GoTo 0
    
End Sub
Attribute VB_Name = "organize"
Option Private Module
Sub ORGdata()

Dim ws As Worksheet
Dim aRng As Range
Dim uRng As Range
Dim c As Range
Dim ecol As Long

Set ws = Sheets("Imported")
'Dim spliter() As String
'
'If InStr(1, Sheet3.Range("PropAdd"), ",") > 0 Then
'
'spliter = Split(Sheet3.Range("PropAdd"), ",")
'
'Set aRng = Union(Sheets("Imported").Columns(CLng(ConvertlettertoNumber(Sheet3.Range("PropCity")))), Sheets("Imported").Columns(CLng(ConvertlettertoNumber(Sheet3.Range("PropState")))), Sheets("Imported").Columns(CLng(ConvertlettertoNumber(Sheet3.Range("PropZip")))))
'
'For x = 0 To UBound(spliter)
'
'If Not uRng Is Nothing Then
'Set uRng = Union(uRng, aRng, Sheets("Imported").Columns(CLng(ConvertlettertoNumber(Trim(spliter(x))))))
'
'Else
'Set uRng = Union(aRng, Sheets("Imported").Columns(CLng(ConvertlettertoNumber(Trim(spliter(x))))))
'End If
'
'Next x
'
'Erase spliter
'
'
'
'Else
'
'Set uRng = Union(Sheets("Imported").Columns(CLng(ConvertlettertoNumber(Sheet3.Range("PropAdd")))), Sheets("Imported").Columns(CLng(ConvertlettertoNumber(Sheet3.Range("PropCity")))), Sheets("Imported").Columns(CLng(ConvertlettertoNumber(Sheet3.Range("PropState")))), Sheets("Imported").Columns(CLng(ConvertlettertoNumber(Sheet3.Range("PropZip")))))
'
'End If
'
'
'Dim ws2 As Worksheet
'Set ws2 = Worksheets.Add
'
'uRng.Copy ws2.Cells(1, 1)
'
'uRng.EntireColumn.Delete
'Dim colCount As Long
'
'colCount = ws2.UsedRange.Columns.Count
'
'For x = ws2.UsedRange.Columns.Count To 1 Step -1
'
'ws2.Columns(x).Cut
'
'ws.Range("A1").Insert Shift:=xlToRight
'
''c.Cut
''On Error Resume Next
''ws.Range("A1").Insert Shift:=xlToRight
'
'Next
''Application.Union(Sheets("Imported").Columns(CLng(ConvertlettertoNumber(Sheet3.Range("PropAdd")))), Sheets("Imported").Columns(CLng(ConvertlettertoNumber(Sheet3.Range("PropCity")))), Sheets("Imported").Columns(CLng(ConvertlettertoNumber(Sheet3.Range("PropState")))), Sheets("Imported").Columns(CLng(ConvertlettertoNumber(Sheet3.Range("PropZip"))))).Cut
'

With ws
ecol = .UsedRange.SpecialCells(xlCellTypeLastCell).Column + 1
End With



Sheet3.Range("C:I").Copy ws.Cells(1, ecol)



End Sub
Attribute VB_Name = "reg2"

Public Function RxGETTAX( _
    ByVal SourceString As String, _
    Optional ByVal IgnoreCase As Boolean = True, _
    Optional ByVal MultiLine As Boolean = True, _
    Optional ByVal MatchGlobal As Boolean = True) As Variant
 
'in the part above where it says "ByVal SourceString As String," this is the argument for the function ie the cell you are referencing to when you write the formula
 Dim i As Long
 
    Dim oMatch As Match   ' this is used for regular expressions to match a pattern "\b\d[\d,.]*\b" this pattern returns the numbers from a string
    Dim arrMatches
    'Dim arrMatches1
    Dim lngCount As Long
    Dim mejlovi As String
     Dim spliter() As String
     'all matches are placed in an array (set of results)
    ' Initialize to an empty array
    arrMatches = Array()
    With New RegExp
        .MultiLine = MultiLine
        .IgnoreCase = IgnoreCase
        .Global = MatchGlobal
        .Pattern = "(AjaxRender.htm)(.+?)(hdp-tax-history)" '"(AjaxRender.htm)(.+?)\,"
        
        'loops throguh the string for each match to the regex pattern and places it into the array at position lngcount which starts with 0 by default
        For Each oMatch In .Execute(SourceString)
            ReDim Preserve arrMatches(lngCount)
            
            arrMatches(lngCount) = oMatch.Value
            lngCount = lngCount + 1
        Next
        
        
    End With
 
 spliter = Split(arrMatches(0), Chr(34))
 
 For i = 0 To UBound(spliter)
 
 If spliter(i) = "hdp-tax-history" Then
 On Error Resume Next
    RxGETTAX = spliter(i - 6)
 Exit For
 End If
 
 Next i
 
 'the function return the first match from the string. Arrays always start with 0
'   On Error Resume Next
'    RxGETTAX = Split(arrMatches(0), Chr(34))(16)
End Function





Public Function RxGLOBALIND( _
    ByVal SourceString As String, _
    Optional ByVal IgnoreCase As Boolean = True, _
    Optional ByVal MultiLine As Boolean = True, _
    Optional ByVal MatchGlobal As Boolean = True) As Variant
 
'in the part above where it says "ByVal SourceString As String," this is the argument for the function ie the cell you are referencing to when you write the formula
 
    Dim oMatch As Match   ' this is used for regular expressions to match a pattern "\b\d[\d,.]*\b" this pattern returns the numbers from a string
    Dim arrMatches
    'Dim arrMatches1
    Dim lngCount As Long
    Dim mejlovi As String
     
     'all matches are placed in an array (set of results)
    ' Initialize to an empty array
    arrMatches = Array()
    With New RegExp
        .MultiLine = MultiLine
        .IgnoreCase = IgnoreCase
        .Global = MatchGlobal
        .Pattern = "(([$])[ 0-9]{1,7})([.][0-9]{1,2})"
        
        'loops throguh the string for each match to the regex pattern and places it into the array at position lngcount which starts with 0 by default
        For Each oMatch In .Execute(SourceString)
            ReDim Preserve arrMatches(lngCount)
            
            arrMatches(lngCount) = oMatch.Value
            lngCount = lngCount + 1
        Next
        
        
    End With
 
 
 'the function return the first match from the string. Arrays always start with 0
   On Error Resume Next
    RxGLOBALIND = arrMatches(1)
End Function


Public Function RxGPUMPVENDOR( _
    ByVal SourceString As String, _
    Optional ByVal IgnoreCase As Boolean = True, _
    Optional ByVal MultiLine As Boolean = True, _
    Optional ByVal MatchGlobal As Boolean = True) As Variant
 
'in the part above where it says "ByVal SourceString As String," this is the argument for the function ie the cell you are referencing to when you write the formula
 
    Dim oMatch As Match   ' this is used for regular expressions to match a pattern "\b\d[\d,.]*\b" this pattern returns the numbers from a string
    Dim arrMatches
    'Dim arrMatches1
    Dim lngCount As Long
    Dim mejlovi As String
     
     'all matches are placed in an array (set of results)
    ' Initialize to an empty array
    arrMatches = Array()
    With New RegExp
        .MultiLine = MultiLine
        .IgnoreCase = IgnoreCase
        .Global = MatchGlobal
        .Pattern = "(([$])[ 0-9,]{1,7})([.][0-9]{1,2})"
        
        'loops throguh the string for each match to the regex pattern and places it into the array at position lngcount which starts with 0 by default
        For Each oMatch In .Execute(SourceString)
            ReDim Preserve arrMatches(lngCount)
            
            arrMatches(lngCount) = oMatch.Value
            lngCount = lngCount + 1
        Next
        
        
    End With
 
 
 'the function return the first match from the string. Arrays always start with 0
   On Error Resume Next
    RxGPUMPVENDOR = arrMatches(0)
End Function

Public Function Rxtorrco( _
    ByVal SourceString As String, _
    Optional ByVal IgnoreCase As Boolean = True, _
    Optional ByVal MultiLine As Boolean = True, _
    Optional ByVal MatchGlobal As Boolean = True) As Variant
 
'in the part above where it says "ByVal SourceString As String," this is the argument for the function ie the cell you are referencing to when you write the formula
 
    Dim oMatch As Match   ' this is used for regular expressions to match a pattern "\b\d[\d,.]*\b" this pattern returns the numbers from a string
    Dim arrMatches
    'Dim arrMatches1
    Dim lngCount As Long
    Dim mejlovi As String
     
     'all matches are placed in an array (set of results)
    ' Initialize to an empty array
    arrMatches = Array()
    With New RegExp
        .MultiLine = MultiLine
        .IgnoreCase = IgnoreCase
        .Global = MatchGlobal
        .Pattern = Sheet6.Cells(1, 1)
        
        'loops throguh the string for each match to the regex pattern and places it into the array at position lngcount which starts with 0 by default
        For Each oMatch In .Execute(SourceString)
            ReDim Preserve arrMatches(lngCount)
            
            'mejlovi = mejlovi & Replace(Replace(Replace(Replace(oMatch.Value, ":", ""), ",", ""), "}", ""), "]", "") & "|"
            arrMatches(lngCount) = oMatch.Value
            lngCount = lngCount + 1
        Next
        
        
    End With
 
 
 'the function return the first match from the string. Arrays always start with 0
   On Error Resume Next
    Rxtorrco = mejlovi
End Function
Public Function Rxabsolutewaterpumps( _
    ByVal SourceString As String, _
    Optional ByVal IgnoreCase As Boolean = True, _
    Optional ByVal MultiLine As Boolean = True, _
    Optional ByVal MatchGlobal As Boolean = True) As Variant
 
'in the part above where it says "ByVal SourceString As String," this is the argument for the function ie the cell you are referencing to when you write the formula
 
    Dim oMatch As Match   ' this is used for regular expressions to match a pattern "\b\d[\d,.]*\b" this pattern returns the numbers from a string
    Dim arrMatches
    'Dim arrMatches1
    Dim lngCount As Long
    Dim mejlovi As String
     
     'all matches are placed in an array (set of results)
    ' Initialize to an empty array
    arrMatches = Array()
    With New RegExp
        .MultiLine = MultiLine
        .IgnoreCase = IgnoreCase
        .Global = MatchGlobal
        .Pattern = "(([$])[ 0-9,]{1,7})([.][0-9]{1,2})"
        
        'loops throguh the string for each match to the regex pattern and places it into the array at position lngcount which starts with 0 by default
        For Each oMatch In .Execute(SourceString)
            ReDim Preserve arrMatches(lngCount)
            
            arrMatches(lngCount) = oMatch.Value
            lngCount = lngCount + 1
        Next
        
        
    End With
 
 
 'the function return the first match from the string. Arrays always start with 0
   On Error Resume Next
    Rxabsolutewaterpumps = arrMatches(UBound(arrMatches))
End Function

Public Function RxSustainable( _
    ByVal SourceString As String, _
    Optional ByVal IgnoreCase As Boolean = True, _
    Optional ByVal MultiLine As Boolean = True, _
    Optional ByVal MatchGlobal As Boolean = True) As Variant
 
'in the part above where it says "ByVal SourceString As String," this is the argument for the function ie the cell you are referencing to when you write the formula
 
    Dim oMatch As Match   ' this is used for regular expressions to match a pattern "\b\d[\d,.]*\b" this pattern returns the numbers from a string
    Dim arrMatches
    'Dim arrMatches1
    Dim lngCount As Long
    Dim mejlovi As String
     
     'all matches are placed in an array (set of results)
    ' Initialize to an empty array
    arrMatches = Array()
    With New RegExp
        .MultiLine = MultiLine
        .IgnoreCase = IgnoreCase
        .Global = MatchGlobal
        .Pattern = "(([$])[ 0-9,]{1,7})([.][0-9]{1,2})"
        
        'loops throguh the string for each match to the regex pattern and places it into the array at position lngcount which starts with 0 by default
        For Each oMatch In .Execute(SourceString)
            ReDim Preserve arrMatches(lngCount)
            
            arrMatches(lngCount) = oMatch.Value
            lngCount = lngCount + 1
        Next
        
        
    End With
 
 
 'the function return the first match from the string. Arrays always start with 0
   On Error Resume Next
    RxSustainable = arrMatches(1)
End Function

Public Function RxGRAINGER( _
    ByVal SourceString As String, _
    Optional ByVal IgnoreCase As Boolean = True, _
    Optional ByVal MultiLine As Boolean = True, _
    Optional ByVal MatchGlobal As Boolean = True) As Variant
 
'in the part above where it says "ByVal SourceString As String," this is the argument for the function ie the cell you are referencing to when you write the formula
 
    Dim oMatch As Match   ' this is used for regular expressions to match a pattern "\b\d[\d,.]*\b" this pattern returns the numbers from a string
    Dim arrMatches
    'Dim arrMatches1
    Dim lngCount As Long
    Dim mejlovi As String
     
     'all matches are placed in an array (set of results)
    ' Initialize to an empty array
    arrMatches = Array()
    With New RegExp
        .MultiLine = MultiLine
        .IgnoreCase = IgnoreCase
        .Global = MatchGlobal
        .Pattern = "(([$])((([0-9]{1,3},)+[0-9]{3})|[0-9]+)(\.[0-9]{2})?)"
        
        'loops throguh the string for each match to the regex pattern and places it into the array at position lngcount which starts with 0 by default
        For Each oMatch In .Execute(SourceString)
            ReDim Preserve arrMatches(lngCount)
            
            arrMatches(lngCount) = oMatch.Value
            lngCount = lngCount + 1
        Next
        
        
    End With
 
 
 'the function return the first match from the string. Arrays always start with 0
   On Error Resume Next
    RxGRAINGER = arrMatches(0)
End Function





Public Function RxPULSE( _
    ByVal SourceString As String, _
    Optional ByVal IgnoreCase As Boolean = True, _
    Optional ByVal MultiLine As Boolean = True, _
    Optional ByVal MatchGlobal As Boolean = True) As Variant
 
'in the part above where it says "ByVal SourceString As String," this is the argument for the function ie the cell you are referencing to when you write the formula
 
    Dim oMatch As Match   ' this is used for regular expressions to match a pattern "\b\d[\d,.]*\b" this pattern returns the numbers from a string
    Dim arrMatches
    'Dim arrMatches1
    Dim lngCount As Long
    Dim mejlovi As String
     
     'all matches are placed in an array (set of results)
    ' Initialize to an empty array
    arrMatches = Array()
    With New RegExp
        .MultiLine = MultiLine
        .IgnoreCase = IgnoreCase
        .Global = MatchGlobal
        .Pattern = "(([$])((([0-9]{1,3},)+[0-9]{3})|[0-9]+)(\.[0-9]{2})?)"
        
        'loops throguh the string for each match to the regex pattern and places it into the array at position lngcount which starts with 0 by default
        For Each oMatch In .Execute(SourceString)
            ReDim Preserve arrMatches(lngCount)
            
            arrMatches(lngCount) = oMatch.Value
            lngCount = lngCount + 1
        Next
        
        
    End With
 
 
 'the function return the first match from the string. Arrays always start with 0
   On Error Resume Next
    RxPULSE = arrMatches(1)
End Function





Public Function RxApartment( _
    ByVal SourceString As String, _
    Optional ByVal IgnoreCase As Boolean = True, _
    Optional ByVal MultiLine As Boolean = True, _
    Optional ByVal MatchGlobal As Boolean = True) As Variant
 
'in the part above where it says "ByVal SourceString As String," this is the argument for the function ie the cell you are referencing to when you write the formula
 
    Dim oMatch As Match   ' this is used for regular expressions to match a pattern "\b\d[\d,.]*\b" this pattern returns the numbers from a string
    Dim arrMatches
    'Dim arrMatches1
    Dim lngCount As Long
    Dim mejlovi As String
     
     'all matches are placed in an array (set of results)
    ' Initialize to an empty array
    arrMatches = Array()
    With New RegExp
        .MultiLine = MultiLine
        .IgnoreCase = IgnoreCase
        .Global = MatchGlobal
        .Pattern = "\s#(.*?)\s"
        
        'loops throguh the string for each match to the regex pattern and places it into the array at position lngcount which starts with 0 by default
        For Each oMatch In .Execute(SourceString & " ")
            ReDim Preserve arrMatches(lngCount)
            
            arrMatches(lngCount) = oMatch.Value
            lngCount = lngCount + 1
        Next
        
        
    End With
 
 
 'the function return the first match from the string. Arrays always start with 0
   On Error Resume Next
    RxApartment = arrMatches(0)
End Function

Public Function RxDirection( _
    ByVal SourceString As String, _
    Optional ByVal IgnoreCase As Boolean = True, _
    Optional ByVal MultiLine As Boolean = True, _
    Optional ByVal MatchGlobal As Boolean = True) As Variant
 
'in the part above where it says "ByVal SourceString As String," this is the argument for the function ie the cell you are referencing to when you write the formula
 
    Dim oMatch As Match   ' this is used for regular expressions to match a pattern "\b\d[\d,.]*\b" this pattern returns the numbers from a string
    Dim arrMatches
    'Dim arrMatches1
    Dim lngCount As Long
    Dim mejlovi As String
     
     'all matches are placed in an array (set of results)
    ' Initialize to an empty array
    arrMatches = Array()
    With New RegExp
        .MultiLine = MultiLine
        .IgnoreCase = IgnoreCase
        .Global = MatchGlobal
        .Pattern = "( S W | SW | S E | SE | N W | NW | N E | NE | N | E | W | S ){1,4}|\s(S W|SW|S E|SE|N W|NW|N E|NE){1,2}\s"
        
        'loops throguh the string for each match to the regex pattern and places it into the array at position lngcount which starts with 0 by default
        For Each oMatch In .Execute(UCase(SourceString))
            ReDim Preserve arrMatches(lngCount)
            
            arrMatches(lngCount) = oMatch.Value
            lngCount = lngCount + 1
        Next
        
        
    End With
 
 
 'the function return the first match from the string. Arrays always start with 0
   On Error Resume Next
    RxDirection = arrMatches(0)
End Function


Public Function RxStreetType( _
    ByVal SourceString As String, _
    Optional ByVal IgnoreCase As Boolean = True, _
    Optional ByVal MultiLine As Boolean = True, _
    Optional ByVal MatchGlobal As Boolean = True) As Variant
 
'in the part above where it says "ByVal SourceString As String," this is the argument for the function ie the cell you are referencing to when you write the formula
 
    Dim oMatch As Match   ' this is used for regular expressions to match a pattern "\b\d[\d,.]*\b" this pattern returns the numbers from a string
    Dim arrMatches
    'Dim arrMatches1
    Dim lngCount As Long
    Dim mejlovi As String
     
     'all matches are placed in an array (set of results)
    ' Initialize to an empty array
    arrMatches = Array()
    With New RegExp
        .MultiLine = MultiLine
        .IgnoreCase = IgnoreCase
        .Global = MatchGlobal
        .Pattern = "\s(" & Sheet4.Cells(3, 1) & ")\s|" & "\s(" & Sheet4.Cells(3, 1) & ")"
        '"\s(AVE|AVENUE|DRIVE|DR|WAY|HWY|BLVD|BOULEVARD|TRAIL|CIRCLE|CIR|CT|COURT|EXPY|EXPRESSWAY|FWY|FREEWAY|LANE|LN|PKY|PKWY|PARKWAY|RD|TRCE|ROAD|SQ|SQUARE|STREET|ST|TPKE|TURNPIKE|PL|ave|avenue|drive|dr|way|hwy|blvd|boulevard|trail|circle|cir|ct|court|expy|expressway|fwy|freeway|lane|ln|pky|pkwy|parkway|rd|pl|trce|road|sq|square|street|st|tpke|turnpike)" 'Sheet4.Cells(3, 1)
        'loops throguh the string for each match to the regex pattern and places it into the array at position lngcount which starts with 0 by default
        For Each oMatch In .Execute(UCase(SourceString))
            ReDim Preserve arrMatches(lngCount)
            
            arrMatches(lngCount) = oMatch.Value
            lngCount = lngCount + 1
        Next
        
        
    End With
 
 
 'the function return the first match from the string. Arrays always start with 0
   On Error Resume Next
    RxStreetType = arrMatches(UBound(arrMatches)) ' arrMatches(0)
End Function


Public Function RxStreetType2( _
    ByVal SourceString As String, _
    Optional ByVal IgnoreCase As Boolean = True, _
    Optional ByVal MultiLine As Boolean = True, _
    Optional ByVal MatchGlobal As Boolean = True) As Variant
 
'in the part above where it says "ByVal SourceString As String," this is the argument for the function ie the cell you are referencing to when you write the formula
 
    Dim oMatch As Match   ' this is used for regular expressions to match a pattern "\b\d[\d,.]*\b" this pattern returns the numbers from a string
    Dim arrMatches
    'Dim arrMatches1
    Dim lngCount As Long
    Dim mejlovi As String
     
     'all matches are placed in an array (set of results)
    ' Initialize to an empty array
    arrMatches = Array()
    With New RegExp
        .MultiLine = MultiLine
        .IgnoreCase = IgnoreCase
        .Global = MatchGlobal
        .Pattern = "\s(AVE|AVENUE|DRIVE|DR|WAY|HWY|BLVD|BOULEVARD|TRAIL|CIRCLE|CIR|CT|COURT|EXPY|EXPRESSWAY|FWY|FREEWAY|LANE|LN|PKY|PKWY|PARKWAY|RD|TRCE|ROAD|SQ|SQUARE|STREET|ST|TPKE|TURNPIKE|PL)\s"
        '"\s(AVE|AVENUE|DRIVE|DR|WAY|HWY|BLVD|BOULEVARD|TRAIL|CIRCLE|CIR|CT|COURT|EXPY|EXPRESSWAY|FWY|FREEWAY|LANE|LN|PKY|PKWY|PARKWAY|RD|TRCE|ROAD|SQ|SQUARE|STREET|ST|TPKE|TURNPIKE|PL|ave|avenue|drive|dr|way|hwy|blvd|boulevard|trail|circle|cir|ct|court|expy|expressway|fwy|freeway|lane|ln|pky|pkwy|parkway|rd|pl|trce|road|sq|square|street|st|tpke|turnpike)" 'Sheet4.Cells(3, 1)
        'loops throguh the string for each match to the regex pattern and places it into the array at position lngcount which starts with 0 by default
        For Each oMatch In .Execute(UCase(SourceString))
            ReDim Preserve arrMatches(lngCount)
            
            arrMatches(lngCount) = oMatch.Value
            lngCount = lngCount + 1
        Next
        
        
    End With
 
 
 'the function return the first match from the string. Arrays always start with 0
   On Error Resume Next
    RxStreetType2 = arrMatches(UBound(arrMatches)) ' arrMatches(0)
End Function

Public Function RxMatchStateCode( _
    ByVal SourceString As String, _
    Optional ByVal IgnoreCase As Boolean = True, _
    Optional ByVal MultiLine As Boolean = True, _
    Optional ByVal MatchGlobal As Boolean = True) As Variant
 

    Dim oMatch As Match   ' this is used for regular expressions to match a pattern "\b\d[\d,.]*\b" this pattern returns the numbers from a string
    Dim arrMatches
    'Dim arrMatches1
    Dim lngCount As Long
        
     'all matches are placed in an array (set of results)
    ' Initialize to an empty array
    arrMatches = Array()
    With New RegExp
        .MultiLine = MultiLine
        .IgnoreCase = IgnoreCase
        .Global = MatchGlobal
        .Pattern = "\s(AL|AK|AS|AZ|AR|CA|CO|CT|DE|DC|FM|FL|GA|GU|HI|ID|IL|IN|IA|KS|KY|LA|ME|MH|MD|MA|MI|MN|MS|MO|MT|NE|NV|NH|NJ|NM|NY|NC|ND|MP|OH|OK|OR|PW|PA|PR|RI|SC|SD|TN|TX|UT|VT|VI|VA|WA|WV|WI|WY)\s"
        'loops throguh the string for each match to the regex pattern and places it into the array at position lngcount which starts with 0 by default
        For Each oMatch In .Execute(Replace(Replace(SourceString, Chr(32), " "), Chr(160), " "))
            ReDim Preserve arrMatches(lngCount)
            
            arrMatches(lngCount) = oMatch.Value
            lngCount = lngCount + 1
        Next
    End With
On Error Resume Next
   RxMatchStateCode = Replace(arrMatches(0), " ", "")

End Function

Public Function RxMatcheStreetNumber( _
    ByVal SourceString As String, _
    Optional ByVal IgnoreCase As Boolean = True, _
    Optional ByVal MultiLine As Boolean = True, _
    Optional ByVal MatchGlobal As Boolean = True) As Variant
 
'in the part above where it says "ByVal SourceString As String," this is the argument for the function ie the cell you are referencing to when you write the formula
 
    Dim oMatch As Match   ' this is used for regular expressions to match a pattern "\b\d[\d,.]*\b" this pattern returns the numbers from a string
    Dim arrMatches
    'Dim arrMatches1
    Dim lngCount As Long
    Dim mejlovi As String
     
     'all matches are placed in an array (set of results)
    ' Initialize to an empty array
    arrMatches = Array()
    With New RegExp
        .MultiLine = MultiLine
        .IgnoreCase = IgnoreCase
        .Global = MatchGlobal
        .Pattern = "^\d+\w*\s*(?:[\-\/]?\s*)?\d*\s*\d+\/?\s*\d*\s*"
        
        
        'extract lat long    (-?\d+\.\d+), *(-?\d+\.\d+)
        'Extract T2 or M3 etc     ([A-Za-z][0-9])
        'loops throguh the string for each match to the regex pattern and places it into the array at position lngcount which starts with 0 by default
        For Each oMatch In .Execute(SourceString)
            ReDim Preserve arrMatches(lngCount)
            
            arrMatches(lngCount) = oMatch.Value
            lngCount = lngCount + 1
        Next
        
        
    End With
 
 '=======================================
 'this part is for receiving multiple values from one string and it works with the function bellow RemoveDuplicatesInArray
 
 
 'arrMatches1 = RemoveDuplicatesInArray(arrMatches)
 'mejlovi = vbNullString
 'For i = LBound(arrMatches1) To UBound(arrMatches1)
    
  '  mejlovi = arrMatches1(i) & "|" & mejlovi

 'Next
  '===================================
    
 'the function return the first match from the string. Arrays always start with 0
   On Error Resume Next
    RxMatcheStreetNumber = arrMatches(0)
End Function

Public Function RxMatchesZIP( _
    ByVal SourceString As String, _
    Optional ByVal IgnoreCase As Boolean = True, _
    Optional ByVal MultiLine As Boolean = True, _
    Optional ByVal MatchGlobal As Boolean = True) As Variant
 
'in the part above where it says "ByVal SourceString As String," this is the argument for the function ie the cell you are referencing to when you write the formula
 
    Dim oMatch As Match   ' this is used for regular expressions to match a pattern "\b\d[\d,.]*\b" this pattern returns the numbers from a string
    Dim arrMatches
    'Dim arrMatches1
    Dim lngCount As Long
    Dim mejlovi As String
     
     'all matches are placed in an array (set of results)
    ' Initialize to an empty array
    arrMatches = Array()
    With New RegExp
        .MultiLine = MultiLine
        .IgnoreCase = IgnoreCase
        .Global = MatchGlobal
        .Pattern = "\d{5}(-\d{4})?"
        
        
        
        'extract lat long    (-?\d+\.\d+), *(-?\d+\.\d+)
        'Extract T2 or M3 etc     ([A-Za-z][0-9])
        'loops throguh the string for each match to the regex pattern and places it into the array at position lngcount which starts with 0 by default
        For Each oMatch In .Execute(SourceString)
            ReDim Preserve arrMatches(lngCount)
            
            arrMatches(lngCount) = oMatch.Value
            lngCount = lngCount + 1
        Next
        
        
    End With
 
 '=======================================
 'this part is for receiving multiple values from one string and it works with the function bellow RemoveDuplicatesInArray
 
'
' arrMatches1 = RemoveDuplicatesInArray(arrMatches)
' mejlovi = vbNullString
' For i = LBound(arrMatches1) To UBound(arrMatches1)
'
'    mejlovi = arrMatches1(i) & "," & mejlovi
'
' Next
  '===================================
    
 'the function return the first match from the string. Arrays always start with 0
   On Error Resume Next
    RxMatchesZIP = arrMatches(UBound(arrMatches)) ' Left(mejlovi, Len(mejlovi) - 1)
End Function




Public Function RxGetBlock( _
    ByVal SourceString As String, _
    Optional ByVal IgnoreCase As Boolean = True, _
    Optional ByVal MultiLine As Boolean = True, _
    Optional ByVal MatchGlobal As Boolean = True) As Variant
 
'in the part above where it says "ByVal SourceString As String," this is the argument for the function ie the cell you are referencing to when you write the formula
 Dim i As Long
 
    Dim oMatch As Match   ' this is used for regular expressions to match a pattern "\b\d[\d,.]*\b" this pattern returns the numbers from a string
    Dim arrMatches
    'Dim arrMatches1
    Dim lngCount As Long
    Dim mejlovi As String
     Dim spliter() As String
     'all matches are placed in an array (set of results)
    ' Initialize to an empty array
    arrMatches = Array()
    With New RegExp
        .MultiLine = MultiLine
        .IgnoreCase = IgnoreCase
        .Global = MatchGlobal
        .Pattern = "(BLOCK)(.+?)(\s)" '"(AjaxRender.htm)(.+?)\,"
        
        'loops throguh the string for each match to the regex pattern and places it into the array at position lngcount which starts with 0 by default
        For Each oMatch In .Execute(SourceString)
            ReDim Preserve arrMatches(lngCount)
            
            arrMatches(lngCount) = oMatch.Value
            lngCount = lngCount + 1
        Next
        
        
    End With
 
 'the function return the first match from the string. Arrays always start with 0
   On Error Resume Next
    RxGetBlock = arrMatches(0)
End Function





Public Function RxGetLot( _
    ByVal SourceString As String, _
    Optional ByVal IgnoreCase As Boolean = True, _
    Optional ByVal MultiLine As Boolean = True, _
    Optional ByVal MatchGlobal As Boolean = True) As Variant
 
'in the part above where it says "ByVal SourceString As String," this is the argument for the function ie the cell you are referencing to when you write the formula
 Dim i As Long
 
    Dim oMatch As Match   ' this is used for regular expressions to match a pattern "\b\d[\d,.]*\b" this pattern returns the numbers from a string
    Dim arrMatches
    'Dim arrMatches1
    Dim lngCount As Long
    Dim mejlovi As String
     Dim spliter() As String
     'all matches are placed in an array (set of results)
    ' Initialize to an empty array
    arrMatches = Array()
    With New RegExp
        .MultiLine = MultiLine
        .IgnoreCase = IgnoreCase
        .Global = MatchGlobal
        .Pattern = "(LOT)(.+?)(\s)" '"(AjaxRender.htm)(.+?)\,"
        
        'loops throguh the string for each match to the regex pattern and places it into the array at position lngcount which starts with 0 by default
        For Each oMatch In .Execute(SourceString)
            ReDim Preserve arrMatches(lngCount)
            
            arrMatches(lngCount) = oMatch.Value
            lngCount = lngCount + 1
        Next
        
        
    End With
 
 'the function return the first match from the string. Arrays always start with 0
   On Error Resume Next
    RxGetLot = arrMatches(0)
End Function



Public Function RxGetDigit( _
    ByVal SourceString As String, _
    Optional ByVal IgnoreCase As Boolean = True, _
    Optional ByVal MultiLine As Boolean = True, _
    Optional ByVal MatchGlobal As Boolean = True) As Variant
 
'in the part above where it says "ByVal SourceString As String," this is the argument for the function ie the cell you are referencing to when you write the formula
 Dim i As Long
 
    Dim oMatch As Match   ' this is used for regular expressions to match a pattern "\b\d[\d,.]*\b" this pattern returns the numbers from a string
    Dim arrMatches
    'Dim arrMatches1
    Dim lngCount As Long
    Dim mejlovi As String
     Dim spliter() As String
     'all matches are placed in an array (set of results)
    ' Initialize to an empty array
    arrMatches = Array()
    With New RegExp
        .MultiLine = MultiLine
        .IgnoreCase = IgnoreCase
        .Global = MatchGlobal
        .Pattern = "\d(.+?)" '"(AjaxRender.htm)(.+?)\,"
        
        'loops throguh the string for each match to the regex pattern and places it into the array at position lngcount which starts with 0 by default
        For Each oMatch In .Execute(SourceString)
            ReDim Preserve arrMatches(lngCount)
            
            arrMatches(lngCount) = oMatch.Value
            lngCount = lngCount + 1
        Next
        
        
    End With
    
    
 
 'arrMatches1 = RemoveDuplicatesInArray(arrMatches)
 mejlovi = vbNullString
 For i = LBound(arrMatches) To UBound(arrMatches)
    
    mejlovi = mejlovi & arrMatches(i)

 Next
  '===================================
 
 'the function return the first match from the string. Arrays always start with 0
   On Error Resume Next
    RxGetDigit = mejlovi
End Function



Public Function RxGetNumberTH( _
    ByVal SourceString As String, _
    Optional ByVal IgnoreCase As Boolean = True, _
    Optional ByVal MultiLine As Boolean = True, _
    Optional ByVal MatchGlobal As Boolean = True) As Variant
 
'in the part above where it says "ByVal SourceString As String," this is the argument for the function ie the cell you are referencing to when you write the formula
 Dim i As Long
 
    Dim oMatch As Match   ' this is used for regular expressions to match a pattern "\b\d[\d,.]*\b" this pattern returns the numbers from a string
    Dim arrMatches
    'Dim arrMatches1
    Dim lngCount As Long
    Dim mejlovi As String
     Dim spliter() As String
     'all matches are placed in an array (set of results)
    ' Initialize to an empty array
    arrMatches = Array()
    With New RegExp
        .MultiLine = MultiLine
        .IgnoreCase = IgnoreCase
        .Global = MatchGlobal
        .Pattern = "\s[0-9]{1,3}(th)\s|\s[0-9]{1,3}(st)\s|\s[0-9]{1,3}(nd)\s|\s[0-9]{1,3}(rd)\s"
        
        'loops throguh the string for each match to the regex pattern and places it into the array at position lngcount which starts with 0 by default
        For Each oMatch In .Execute(SourceString)
            ReDim Preserve arrMatches(lngCount)
            
            arrMatches(lngCount) = oMatch.Value
            lngCount = lngCount + 1
        Next
        
        
    End With
    
    
 
 'arrMatches1 = RemoveDuplicatesInArray(arrMatches)
 mejlovi = vbNullString
 For i = LBound(arrMatches) To UBound(arrMatches)
    
    mejlovi = mejlovi & arrMatches(i)

 Next
  '===================================
 
 'the function return the first match from the string. Arrays always start with 0
   On Error Resume Next
    RxGetNumberTH = mejlovi
End Function







Attribute VB_Name = "speedUP"
Option Private Module
Option Explicit

Sub SpeedOn(Optional StatusBarMsg As String = "Processing...")
    
    With Application
        
        .ScreenUpdating = False
        .EnableEvents = False
        .DisplayAlerts = False
        .Cursor = xlWait
        .StatusBar = StatusBarMsg
        .EnableCancelKey = xlErrorHandler
    End With
End Sub

Sub SpeedOff()
    With Application
        
        .ScreenUpdating = True
        .EnableEvents = True
        .DisplayAlerts = True
        
        .Cursor = xlDefault
        .StatusBar = False
        .EnableCancelKey = xlInterrupt
    End With
End Sub


INQUEST-PP=macro
