Attribute VB_Name = "Check_Eingabe"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Public WithEvents ctlTBox As MSForms.TextBox
Attribute ctlTBox.VB_VarHelpID = -1
Public WithEvents frm As MSForms.UserForm
Attribute frm.VB_VarHelpID = -1

Private Sub ctlTBox_Change()
    
'    MsgBox "Klasse"
'    If Not IsNumeric(ctlTBox) Then
'      ctlTBox = ""
'    End If
End Sub

Private Sub ctlTBox_LostFocus()
'    MsgBox "haha"
End Sub
 

Attribute VB_Name = "Class_Functions"
Option Private Module
Public DB As New nls_DatabaseManager
Public tb_Check As New Check_Eingabe


Public Sub DB_Connection_schliessen()
    Call DB.Con_Close
End Sub


Sub testconnection_Excel()
     Call DB.Set_SQLSettings("", "", "", "", "")
    
On Error GoTo Fehler
    If DB.Select_Statement("SELECT * FROM [DB_Projekte]") Then
        MsgBox DB.Recordset!Projektcode
    End If
    
    Exit Sub
Fehler:
    MsgBox "leer"
End Sub

Sub testconnection_SQL()
    
On Error GoTo Fehler
    
    
    If DB.Select_Statement("SELECT * FROM [DB_Projekte]") Then
        MsgBox CStr(DB.Recordset!Projektcode)
    End If
    
    Exit Sub
Fehler:
    MsgBox "leer"
End Sub
Attribute VB_Name = "DB_Language"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "PPT_Export"
Option Explicit
Option Private Module
Dim aktSlide As Integer
Dim tempZoom As Integer
Dim active_wb As Workbook

Public Sub generatePPT()
    On Error GoTo Fehler
    
    Dim msg_result As Variant
    
    msg_result = MsgBox(nlc_language.FindValue("SMessage_RefAllCharts"), vbQuestion + vbYesNoCancel)
    
    If msg_result = vbYes Then
        On Error Resume Next
        Call nlc_piechart.generate_piechart
        Call nlc_barchart.generate_barchart
        Call nlc_Gantt.generate_Gantt
        Call nlc_pipeline.generate_portfolio
        Call nlc_matrix.generate_matrix
        Call nlc_ress_cost_histo.generate_rhg
        Call nlc_ress_cost_histo.generate_chg
        Call nlc_PViewer.PViewer_LoadProject
        'Call nlc_PJTabelle.generate_PJT
    ElseIf msg_result = vbCancel Then
        Exit Sub
    End If
        
    Application.ScreenUpdating = False
    Dim sheet As Worksheet
    Dim pptSavePath As String
    Dim pptVorlagePath As String
    'Dim appPP As Object
    Dim Blatt As String
    Dim Bereich As String
    Dim appPP As Object
    Dim row_counter As Integer
    
    
    aktSlide = 2
    'nlc_Navi.Cells(11, 5).value = Date
    pptVorlagePath = ActiveWorkbook.Path & "\" & "next-portfolio-light_PP-Template.pptx" 'nlc_ppf_02.Range("Q46").Value
    'pptVorlagePath = ActiveWorkbook.Path & "\SMS-S_ECS_PPF-Report_Vorlage.ppt"
    pptSavePath = ActiveWorkbook.Path & "\"
    Set appPP = CreateObject("Powerpoint.Application")
    
    Set active_wb = ActiveWorkbook
    
    appPP.visible = True
    appPP.presentations.Open (pptVorlagePath)
    appPP.Activate

 
    Application.ScreenUpdating = False

'    'Projektviewer erstellen
'    Blatt = nlc_ppf_viewer.name
'    'Bereich = "B3:R39"
'    Bereich = "B5:x44"
'
'    Call generate_grafik(Blatt, Bereich, appPP, nlc_ppf_viewer.Cells(3, 3).value, 0.76, 0.76, 37, 100, aktSlide - 1)
'    aktSlide = aktSlide + 1
'
'    'Pipeline erstellen
'    Blatt = nlc_ppf_pipe.name
'    'Bereich = "B3:R39"
'    Bereich = "A5:S61"
'
'    Call generate_grafik(Blatt, Bereich, appPP, "Projektepipeline", 0.841, 0.841, 37, 100, aktSlide - 1)
'    aktSlide = aktSlide + 1
'
'    'Matrix erstellen
'    Blatt = nlc_ppf_matrix.name
'    'Bereich = "B3:R39"
'    Bereich = "A5:S93"
'
'    Call generate_grafik(Blatt, Bereich, appPP, "Matrix-Chart", 0.75, 0.75, 37, 100, aktSlide - 1)
'    aktSlide = aktSlide + 1
'
'    'Piechart erstellen
'    Blatt = nlc_ppf_pie.name
'    'Bereich = "B3:R39"
'    Bereich = "B5:R40"
'
'    Call generate_grafik(Blatt, Bereich, appPP, "Pie-Chart", 0.9212, 0.9212, 37, 100, aktSlide - 1)
'    aktSlide = aktSlide + 1
'
'    'Barchart erstellen
'    Blatt = nlc_ppf_bar.name
'    'Bereich = "B3:R39"
'    Bereich = "B5:AE53"
'
'    Call generate_grafik(Blatt, Bereich, appPP, "Bar-Chart", 0.8195, 0.8195, 37, 100, aktSlide - 1)
'    aktSlide = aktSlide + 1
'
'    'Resshisto erstellen
'    Blatt = nlc_ppf_resshisto.name
'    'Bereich = "B3:R39"
'    Bereich = "B5:AC53"
'
'    Call generate_grafik(Blatt, Bereich, appPP, "Ressourcen-Histogramm", 0.7895, 0.7895, 37, 100, aktSlide - 1)
'    aktSlide = aktSlide + 1
'
'    'Costhisto erstellen
'    Blatt = nlc_ppf_costhisto.name
'    'Bereich = "B3:R39"
''    Bereich = "B5:O53"
' Bereich = "B5:AC53"
'    'Call generate_grafik(Blatt, Bereich, appPP, "Kosten-Histogramm", 0.765, 0.765, 37, 100, aktSlide - 1)
'    Call generate_grafik(Blatt, Bereich, appPP, "Kosten-Histogramm", 0.76, 0.76, 37, 100, aktSlide - 1)
'    aktSlide = aktSlide + 1

 'Projektviewer erstellen
    Blatt = nlc_ppf_viewer.name
    'Bereich = "B3:R39"
    Bereich = "B5:X43"
    
    Call generate_grafik(Blatt, Bereich, appPP, nlc_ppf_viewer.Cells(3, 3).value, 0.74, 0.74, 37, 100, aktSlide - 1)
    aktSlide = aktSlide + 1

    'Pipeline erstellen
    Blatt = nlc_ppf_pipe.name
    'Bereich = "B3:R39"
    Bereich = "A6:S61"
    
    '"Projektepipeline"
    Call generate_grafik(Blatt, Bereich, appPP, nlc_language.FindValue("SValue_pipeline"), 0.841, 0.841, 37, 100, aktSlide - 1)
    aktSlide = aktSlide + 1
    
    'Matrix erstellen
    Blatt = nlc_ppf_matrix.name
    'Bereich = "B3:R39"
    Bereich = "A6:S93"
    '"Matrix-Chart"
    Call generate_grafik(Blatt, Bereich, appPP, nlc_language.FindValue("SValue_matrixChart"), 0.85, 0.85, 37, 100, aktSlide - 1)
    aktSlide = aktSlide + 1
    
    'Piechart erstellen
    Blatt = nlc_ppf_pie.name
    'Bereich = "B3:R39"
    Bereich = "B6:R40"
    '"Pie-Chart"
    Call generate_grafik(Blatt, Bereich, appPP, nlc_language.FindValue("SValue_pieChart"), 0.9212, 0.9212, 37, 100, aktSlide - 1)
    aktSlide = aktSlide + 1
    
    'Barchart erstellen
    Blatt = nlc_ppf_bar.name
    'Bereich = "B3:R39"
    Bereich = "B6:AF53"
    '"Bar-Chart"
    Call generate_grafik(Blatt, Bereich, appPP, nlc_language.FindValue("SValue_barChart"), 0.9795, 0.9795, 37, 100, aktSlide - 1)
    aktSlide = aktSlide + 1
    
    'Resshisto erstellen
    Blatt = nlc_ppf_resshisto.name
    'Bereich = "B3:R39"
    Bereich = "C6:AC53"
    '"Ressourcen-Histogramm"
    Call generate_grafik(Blatt, Bereich, appPP, nlc_language.FindValue("SValue_ressHisto"), 0.7895, 0.7895, 37, 100, aktSlide - 1)
    aktSlide = aktSlide + 1
    
    'Costhisto erstellen
    Blatt = nlc_ppf_costhisto.name
    'Bereich = "B3:R39"
    Bereich = "C6:AC53"
    ' "Kosten-Histogramm"
    'Call generate_grafik(Blatt, Bereich, appPP, "Kosten-Histogramm", 0.765, 0.765, 37, 100, aktSlide - 1)
    Call generate_grafik(Blatt, Bereich, appPP, nlc_language.FindValue("SValue_costHisto"), 0.83, 0.83, 37, 100, aktSlide - 1)
    aktSlide = aktSlide + 1
    
    
    
On Error GoTo Fehler
'    If Application.Version = "12.0" Then
'        appPP.ActivePresentation.Slides(1).Shapes("Titel 2").TextFrame.TextRange.text = "Projektportfolio Report"
'        appPP.ActivePresentation.Slides(1).Shapes("Untertitel 1").TextFrame.TextRange.text = Format(VBA.Date, "MMMM") & " " & VBA.Year(VBA.Date)
'    Else
'        appPP.ActivePresentation.Slides(1).Shapes("Title 2").TextFrame.TextRange.text = "Projektportfolio Report"
'        appPP.ActivePresentation.Slides(1).Shapes("Subtitle 1").TextFrame.TextRange.text = Format(VBA.Date, "MMMM") & " " & VBA.Year(VBA.Date)
'    End If
'
'    appPP.ActivePresentation.Slides(2).delete
'    appPP.ActivePresentation.Slides(appPP.ActivePresentation.Slides.count).delete
'    appPP.ActivePresentation.SaveAs pptSavePath & "Portfoliobericht" & "_" & Date & ".pptx"
'    'appPP.WindowState = ppWindowMinimized
'
'    'nlc_Navi.Protect PW
'    MsgBox nlc_language.FindValue("SMessage_CreReport")
    
    If Application.Version = "12.0" Then
    
        'Seite |fffd|Nr.|fffd|
        'Foliennummern
        appPP.ActivePresentation.Slides(1).Shapes("Titel").TextFrame.TextRange.text = "Projektportfolio Report"
        appPP.ActivePresentation.Slides(1).Shapes("PostIt").TextFrame.TextRange.text = "Generiert mit next portfolio light V1.0"
        appPP.ActivePresentation.Slides(1).Shapes("LogoText").TextFrame.TextRange.text = "Portfoliobericht"
        appPP.ActivePresentation.Slides(1).Shapes("Untertitel").TextFrame.TextRange.text = Format(VBA.Date, "MMMM") & " " & VBA.Year(VBA.Date)
        appPP.ActivePresentation.SlideMaster.Shapes("Foliennummer").TextFrame.TextRange.text = nlc_language.FindValue("pptExport_Foliennummer")
        
    Else
        appPP.ActivePresentation.Slides(1).Shapes("Titel").TextFrame.TextRange.text = "Projektportfolio Report"
        appPP.ActivePresentation.Slides(1).Shapes("PostIt").TextFrame.TextRange.text = "Generiert mit next portfolio light V1.0"
        appPP.ActivePresentation.Slides(1).Shapes("LogoText").TextFrame.TextRange.text = "Portfoliobericht"
        appPP.ActivePresentation.Slides(1).Shapes("Untertitel").TextFrame.TextRange.text = Format(VBA.Date, "MMMM") & " " & VBA.Year(VBA.Date)
        appPP.ActivePresentation.SlideMaster.Shapes("Foliennummer").TextFrame.TextRange.text = nlc_language.FindValue("pptExport_Foliennummer")
    End If
    
    appPP.ActivePresentation.Slides(2).delete
    'appPP.ActivePresentation.Slides(appPP.ActivePresentation.Slides.count).delete
    appPP.ActivePresentation.SaveAs pptSavePath & "npfl-Report" & "_" & Date & ".pptx"
    'appPP.WindowState = ppWindowMinimized
    
    'nlc_Navi.Protect PW
    MsgBox nlc_language.FindValue("SMessage_CreReport")
    
    GoTo Ende
Fehler:
    On Error Resume Next
    MsgBox nlc_language.FindValue("SMessage_TempNotFound"), vbCritical + vbOKOnly
    appPP.Quit
    
Ende:
    Application.ThisWorkbook.Activate
    nlc_ppf_nav.Activate
    
    Application.ScreenUpdating = True
End Sub

'Sub generate_grafik(Blatt As String, Bereich As String, appPP As Object, Header As String, scalew As Double, scaleh As Double, scalel As Integer, scalet As Integer, add_slide As Integer)
'Dim X As Integer
'Dim X2 As Integer
'   If add_slide > 0 Then
'        appPP.ActivePresentation.Slides(2).Select
'        'appPP.ActivePresentation.Slides(2).Shapes("Title 3").TextFrame.TextRange.text = "Seite: " & aktSlide - 1
'        appPP.ActivePresentation.Slides(2).Copy
'        appPP.ActivePresentation.Slides.Paste
'        If Application.Version = "12.0" Then
'            appPP.ActivePresentation.Slides(appPP.ActivePresentation.Slides.count).Shapes("Titel 2").TextFrame.TextRange.Characters.text = Header
'        Else
'            appPP.ActivePresentation.Slides(appPP.ActivePresentation.Slides.count).Shapes("Title 2").TextFrame.TextRange.Characters.text = Header
'        End If
'        'appPP.ActivePresentation.Slides(appPP.ActivePresentation.Slides.Count).MoveTo aktSlide
'    End If
'
'    'kopieren
'    If Application.Version = "12.0" Or Application.Version = "14.0" Then ' Pr|fffd|fen ob Excel 2007 oder 2010
'        Sheets(Blatt).Activate
'        Sheets(Blatt).Range(Bereich).Select
'        tempZoom = ActiveWindow.Zoom
'        ActiveWindow.Zoom = 50
'        Selection.Copy
'        ActiveWindow.Zoom = tempZoom
'
'    Else
'        active_wb.Activate
'        Sheets(Blatt).Activate
'        Sheets(Blatt).Range(Bereich).CopyPicture 'Format:=xlBitmap
'    End If
'
'    'einf|fffd|gen
'    appPP.Activate
'    X = appPP.ActivePresentation.Slides.count
'    appPP.ActivePresentation.Slides(X).Select
'    appPP.ActivePresentation.Slides(X).Shapes.PasteSpecial 2
'    'appPP.ActiveWindow.View.Paste
'    'Skalieren und Positionieren
'    X2 = appPP.ActivePresentation.Slides(X).Shapes.count
'    With appPP.ActiveWindow.Selection.SlideRange.Shapes(X2)
' '   With appPP.ActivePresentation.Slides(aktSlide).Shapes.Paste
'
'   ' With appPP.ActivePresentation.Slides(aktSlide).ShapeRange   'PowerPoint.ShapeRange
'        .ScaleWidth scalew, msoFalse, msoScaleFromBottomRight
'        .ScaleHeight scaleh, msoFalse, msoScaleFromBottomRight
'        .Left = scalel
'        .Top = scalet
'    End With
'    'appPP.ActiveWindow.Selection.SlideRange.Shapes (X)
'    appPP.ActivePresentation.Slides(X).MoveTo toPos:=X - 1
'    Sheets(Blatt).Range("A1").Select
'    Application.CutCopyMode = False
'End Sub

Sub generate_grafik(Blatt As String, Bereich As String, appPP As Object, Header As String, scalew As Double, scaleh As Double, scalel As Integer, scalet As Integer, add_slide As Integer)
Dim x, X1, X2, X3, B1, H1, Y1, B2, H2, Y2, Slide As Double
Dim ScaleArt As String
Dim withShadow As Boolean

   If add_slide > 0 Then
        appPP.ActivePresentation.Slides(2).Select
        'appPP.ActivePresentation.Slides(2).Shapes("Title 3").TextFrame.TextRange.text = "Seite: " & aktSlide - 1
        appPP.ActivePresentation.Slides(2).Copy
        appPP.ActivePresentation.Slides.Paste
        If Application.Version = "12.0" Then
            appPP.ActivePresentation.Slides(appPP.ActivePresentation.Slides.count).Shapes("Titel").TextFrame.TextRange.Characters.text = Header
        Else
            appPP.ActivePresentation.Slides(appPP.ActivePresentation.Slides.count).Shapes("Titel").TextFrame.TextRange.Characters.text = Header
        End If
        'appPP.ActivePresentation.Slides(appPP.ActivePresentation.Slides.Count).MoveTo aktSlide
    End If
    
    'kopieren
   If Application.Version = "12.0" Or Application.Version = "14.0" Or Application.Version = "16.0" Then ' Pr|fffd|fen ob Excel 2007 oder 2010 oder 2016
        Sheets(Blatt).Activate
        Sheets(Blatt).Range(Bereich).Select
        'tempZoom = ActiveWindow.Zoom
        'ActiveWindow.Zoom = 50
        'Selection.Copy
        
        Sheets(Blatt).Range(Bereich).CopyPicture 'Format:=xlBitmap
        'ActiveWindow.Zoom = tempZoom
    
    Else
        active_wb.Activate
        Sheets(Blatt).Activate
        Sheets(Blatt).Range(Bereich).CopyPicture 'Format:=xlBitmap
    End If
    
    'einf|fffd|gen
    appPP.Activate
    x = appPP.ActivePresentation.Slides.count
    appPP.ActivePresentation.Slides(x).Select
    Slide = x
    'appPP.ActivePresentation.Slides(X).Shapes.PasteSpecial 2
    appPP.ActivePresentation.Slides(x).Shapes.Paste
    'appPP.ActiveWindow.View.Paste
    'Skalieren und Positionieren
    X3 = appPP.ActivePresentation.Slides(x).Shapes.count
    With appPP.ActiveWindow.Selection.SlideRange.Shapes(X3)
    
        B1 = appPP.ActivePresentation.Slides(Slide).Shapes("nlc_image").Width
        H1 = appPP.ActivePresentation.Slides(Slide).Shapes("nlc_image").Height
        X1 = appPP.ActivePresentation.Slides(Slide).Shapes("nlc_image").Top
        Y1 = appPP.ActivePresentation.Slides(Slide).Shapes("nlc_image").Left
        
        B2 = .Width
        H2 = .Height
        
        If (B1 / H1) < (B2 / H2) Then
            ScaleArt = "W"
        Else
            ScaleArt = "H"
        End If
        
        If ScaleArt = "W" Then
             '650 Breite ist optimal f|fffd|r Powerpoint
            '.ScaleWidth (650 / (Sheets(Blatt).Range(Bereich).width / 100)) / 100, msoFalse, msoScaleFromBottomRight
            '.ScaleWidth (900 / (Sheets(blatt).Range(Bereich).width / 100)) / 100, msoFalse, msoScaleFromBottomRight
            .Width = appPP.ActivePresentation.Slides(Slide).Shapes("nlc_image").Width
'            .left = 37
'            .top = 98
            
            'X2 = appPP.ActivePresentation.Slides(slide).Shapes("nlc_image").left
        ElseIf ScaleArt = "H" Then
            '410 Breite ist optimal f|fffd|r Powerpoint
            '.ScaleHeight (420 / (Sheets(blatt).Range(Bereich).Height / 100)) / 100, msoFalse, msoScaleFromBottomRight
            .Height = appPP.ActivePresentation.Slides(Slide).Shapes("nlc_image").Height
            '.ScaleHeight (410 / (Sheets(Blatt).Range(Bereich).Height / 100)) / 100, msoFalse, msoScaleFromBottomRight
            '.left = 37
            '.top = 98
            
        End If
        
        B2 = .Width
        H2 = .Height
        
        Y2 = Y1 + (B1 / 2) - (B2 / 2)
        X2 = X1 + (H1 / 2) - (H2 / 2)
        
        .Left = Y2
        .Top = X2
    
   
        If withShadow = True Then
            .Shadow.Transparency = 0.35
            .Shadow.Blur = 23
            .Shadow.OffsetX = 7.77
            .Shadow.OffsetY = 7.77
            .Shadow.visible = msoTrue
            .Shadow.ForeColor.RGB = RGB(0, 0, 0)
        End If
    End With
 
    appPP.ActivePresentation.Slides(x).Shapes("nlc_image").delete
    
    'appPP.ActiveWindow.Selection.SlideRange.Shapes (X)
    appPP.ActivePresentation.Slides(x).MoveTo toPos:=x - 1
    Sheets(Blatt).Range("A1").Select
    Application.CutCopyMode = False
End Sub
Attribute VB_Name = "SQL_Abfragen"
Option Private Module
Option Explicit
Dim statement As String
Dim Statement2 As String

'#########################################
'               Select
'#########################################

Private Sub GenerateAllVerfuegbarkeit(Template As String, group As Boolean)
    Dim Jahr As Integer
    Dim Monat As Integer
    Dim rowCounter As Integer
    Dim colCounter As Integer
    Dim colCounter2 As Integer
    Dim ressarten As String
    Dim lastValue As Double
    Dim checkNew As Boolean
    Dim lastRA As String
    Dim counter As Integer
    
    nlc_ppf_resshisto.Range("C81:W" & 80 + nlc_ppf_resshisto.Cells(79, 3).value).clear
    
    rowCounter = 81
    
    Jahr = nlc_ppf_resshisto.Range("RessHisto_Jahr").value
    
    statement = "SELECT " & _
                    "LangShortName.deutsch AS Shortname, LangName.deutsch AS Name " & _
                "FROM " & _
                    "((((DB_Settings_RessHisto As SetRess LEFT JOIN " & _
                    "DB_Settings_RessHisto_RA As SetRessRA ON SetRessRA.FK_Settings_RessHisto = SetRess.ID) LEFT JOIN " & _
                    "DB_Ressourcenarten As Ressarten ON Ressarten.ID = SetRessRA.FK_Ressourcenarten) LEFT JOIN " & _
                    "DB_Language AS LangShortName ON LangShortName.Term = Ressarten.FK_Language_Shortname) LEFT JOIN " & _
                    "DB_Language AS LangName ON LangName.Term = Ressarten.FK_Language_Name) " & _
                "WHERE " & _
                    "(SetRess.Id = " & Template & ") And (Ressarten.active <> 0) " & _
                "ORDER BY " & _
                    "LangName.deutsch"
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            nlc_ppf_resshisto.Range("D81").CopyFromRecordset Class_Functions.DB.Recordset
            
            'TODO
            If group = False Then
                statement = "SELECT " & _
                                "LangName.deutsch AS RA, " & _
                                "Verf.Wert AS Wert, " & _
                                "Verf.Monat, " & _
                                "Verf.Jahr " & _
                            "FROM " & _
                                "((((DB_Settings_RessHisto AS SetRess LEFT JOIN " & _
                                "DB_Settings_RessHisto_RA AS SetRessRA ON SetRessRa.FK_Settings_RessHisto = SetRess.ID) LEFT JOIN " & _
                                "DB_Ressourcenarten AS Ressarten ON Ressarten.id = SetRessRa.FK_Ressourcenarten) LEFT JOIN " & _
                                "Verfuegbarkeit AS Verf ON Verf.FK_Ressourcenart = Ressarten.ID) LEFT JOIN " & _
                                "DB_Language AS LangName ON LangName.Term = ressarten.FK_Language_Name) " & _
                            "WHERE " & _
                                "SetRess.Id = " & Template & " And ((Verf.Jahr <= " & Jahr & ") Or (Verf.Jahr = " & Jahr + 1 & " And Verf.Monat >= 1 And Verf.Monat <= 3)) " & _
                            "ORDER BY " & _
                                "LangName.deutsch , Verf.Jahr, Verf.Monat"
                                
                If Class_Functions.DB.Select_Statement(statement) = True Then
                    If Not Class_Functions.DB.Recordset.EOF Then
                        While nlc_ppf_resshisto.Cells(rowCounter, 5).value <> ""
                            nlc_ppf_resshisto.Cells(rowCounter, 3).value = rowCounter - 80
                            lastValue = 0
                            
                            If Class_Functions.DB.Recordset.EOF Then
                                GoTo weiter
                            End If
                            
                            If nlc_ppf_resshisto.Cells(rowCounter, 5).value <> Class_Functions.DB.Recordset!ra Then
                                GoTo weiter
                            Else
                                If Class_Functions.DB.Recordset!Jahr <= Jahr Then
                                    colCounter = 6
                                ElseIf Class_Functions.DB.Recordset!Jahr = Jahr + 1 Then
                                    colCounter = 21
                                Else
                                    colCounter = 9
                                End If
                                    
                                For colCounter = colCounter To 23 Step 1
                                    'Wenn kein Eintrag mehr vorhanden ist, muss trotzdem der letzte Wert bis zur letzten Spalte eingetragen werden
                                    If Class_Functions.DB.Recordset.EOF Then
                                        GoTo lastItem
                                    End If
                                    If nlc_ppf_resshisto.Cells(rowCounter, 5).value = Class_Functions.DB.Recordset!ra Then
                                        If Class_Functions.DB.Recordset!Jahr < Jahr And Class_Functions.DB.Recordset!Monat < 10 Then
                                            lastValue = Class_Functions.DB.Recordset!wert
                                            If lastValue > 0 Then nlc_ppf_resshisto.Cells(rowCounter, colCounter).value = lastValue
                                            'Wenn der Wert kleiner ist als das letzte Jahr, dann muss die Spalte gleich bleiben
                                            colCounter = colCounter - 1
                                            Class_Functions.DB.Recordset.movenext
                                        ElseIf nlc_ppf_resshisto.Cells(56, colCounter).value = Class_Functions.DB.Recordset!Monat Then
                                            lastValue = Class_Functions.DB.Recordset!wert
                                            If lastValue > 0 Then nlc_ppf_resshisto.Cells(rowCounter, colCounter).value = lastValue
                                            
                                            Class_Functions.DB.Recordset.movenext
                                        Else
lastItem:
                                            'Wenn der Monat nicht passt
                                            If lastValue > 0 Then nlc_ppf_resshisto.Cells(rowCounter, colCounter).value = lastValue
                                        End If
                                    Else
                                        'Wenn der aktuelle Wert nicht zu der derzeitigen Ressart passt, muss der alte Wert erst komplett eingetragen werden
                                        If lastValue > 0 Then nlc_ppf_resshisto.Cells(rowCounter, colCounter).value = lastValue
                                    End If
                                Next colCounter
                            End If
weiter:
                            rowCounter = rowCounter + 1
                        Wend
                    End If
                End If
            Else
                'Dim ressarten As String
                statement = "SELECT " & _
                                "RessArt.ID AS RessID " & _
                            "FROM " & _
                                "DB_Ressourcenarten AS RessArt " & _
                            "WHERE " & _
                                "RessArt.FK_Ressourcenarten in " & _
                                "(SELECT RessGruppe.fk_Ressourcenarten " & _
                                "FROM " & _
                                    "[DB_Settings_RessHisto_RA] AS SetRess LEFT JOIN " & _
                                    "[DB_Ressourcenarten] AS RessGruppe ON SetRess.FK_Ressourcenarten = RessGruppe.ID " & _
                                "WHERE " & _
                                    "(SetRess.FK_Settings_RessHisto = " & Template & ") AND (RessGruppe.active <> 0)) " & _
                                "AND RessArt.active <> 0 AND RessArt.ID <> RessArt.FK_Ressourcenarten"
                
                If Class_Functions.DB.Select_Statement(statement) = True Then
                    While Not Class_Functions.DB.Recordset.EOF
                        If ressarten = "" Then
                            ressarten = Class_Functions.DB.Recordset!RessID
                        Else
                            ressarten = ressarten & ", " & Class_Functions.DB.Recordset!RessID
                        End If
                        Class_Functions.DB.Recordset.movenext
                    Wend
                End If
                
                Jahr = nlc_ppf_resshisto.Range("RessHisto_Jahr").value
                
                statement = "SELECT " & _
                                "LangShortName.deutsch AS Shortname, " & _
                                "LangName.deutsch AS Name " & _
                            "FROM " & _
                                "((((DB_Settings_RessHisto As SetRess LEFT JOIN " & _
                                "DB_Settings_RessHisto_RA AS SetRessRA ON SetRessRA.FK_Settings_RessHisto = SetRess.ID) LEFT JOIN " & _
                                "DB_Ressourcenarten AS ra ON SetRessRA.FK_Ressourcenarten = ra.ID) LEFT JOIN " & _
                                "DB_Language AS LangShortName ON LangShortName.Term = ra.FK_Language_Shortname) LEFT JOIN " & _
                                "DB_Language AS LangName ON LangName.Term = ra.FK_Language_Name)   " & _
                            "WHERE " & _
                                "SetRess.ID = " & Template & " " & _
                            "GROUP BY " & _
                                "ra.FK_Ressourcenarten, LangShortName.deutsch, LangName.deutsch" 'TODO - RessartenIDs Auslesen
                
                If Class_Functions.DB.Select_Statement(statement) = True Then
                    If Not Class_Functions.DB.Recordset.EOF Then
                        Dim i As Integer
                        Dim rsRows As Integer
                        
                        rsRows = Class_Functions.DB.GetRecordCount(statement)
                        i = rsRows + 4
                        
                        ReDim result(21, rsRows - 1)
                        
                        While Not Class_Functions.DB.Recordset.EOF
                            result(0, counter) = counter + 1
                            result(1, counter) = N2hk(Class_Functions.DB.Recordset!Shortname)
                            result(2, counter) = N2hk(Class_Functions.DB.Recordset!name)
                            
                            counter = counter + 1
                            Class_Functions.DB.Recordset.movenext
                        Wend
                    End If
                End If
                
                For colCounter = 1 To 18 Step 1
                    'TODO: Den scheiss hier anpassen
                    Select Case (colCounter)
                        Case 1 To 3:
                            Monat = colCounter + 9
                            Jahr = VBA.CStr(nlc_ppf_resshisto.Range("RessHisto_Jahr").value - 1)
                            
                            statement = "SELECT SUM(Verfuegbarkeit.Wert) AS retValue " & _
                                        "FROM " & _
                                            "[DB_Ressourcenarten] LEFT JOIN " & _
                                            "(SELECT " & _
                                                "Verfuegbarkeit1.FK_Ressourcenart, Verfuegbarkeit1.Wert " & _
                                            "From " & _
                                                "(SELECT " & _
                                                    "ID, FK_Ressourcenart, " & Class_Functions.DB.Convert(Class_Functions.DB.Convert("Jahr", T_VARCHAR) & " + '-' + " & Class_Functions.DB.Convert("Monat", T_VARCHAR) & " + '-01'", T_DATE) & " AS Datum1, Wert " & _
                                                "FROM " & _
                                                    "[Verfuegbarkeit] AS Verfuegbarkeit_2) AS Verfuegbarkeit1 INNER JOIN " & _
                                                    "(SELECT " & _
                                                        "FK_Ressourcenart, MAX(" & Class_Functions.DB.Convert(Class_Functions.DB.Convert("Jahr", T_VARCHAR) & " + '-' + " & Class_Functions.DB.Convert("Monat", T_VARCHAR) & " + '-01'", T_DATE) & ")  AS Datum1 " & _
                                                    "FROM " & _
                                                        "[Verfuegbarkeit] AS Verfuegbarkeit_1 " & _
                                                    "WHERE " & _
                                                        "(Verfuegbarkeit_1.Jahr <= " & Jahr & " and Verfuegbarkeit_1.Monat <= " & Monat & ") AND Verfuegbarkeit_1.FK_Ressourcenart in (" & ressarten & ") " & _
                                                    "GROUP BY " & _
                                                        "FK_Ressourcenart) AS Verfuegbarkeit2 " & _
                                                 "ON (Verfuegbarkeit1.FK_Ressourcenart = Verfuegbarkeit2.FK_Ressourcenart AND Verfuegbarkeit1.Datum1 = Verfuegbarkeit2.Datum1)) " & _
                                            "AS Verfuegbarkeit ON Verfuegbarkeit.FK_Ressourcenart = DB_Ressourcenarten.ID " & _
                                        "WHERE " & _
                                            "DB_Ressourcenarten.active <> 0 AND DB_Ressourcenarten.ID in ( " & ressarten & ") " & _
                                        "GROUP BY " & _
                                            "DB_Ressourcenarten.FK_Ressourcenarten"
                                            
                                            
                        Case 4 To 15:
                            'statement = statement & get_VerfStatement2(colCounter, colCounter - 3, VBA.CStr(Jahr), ressarten)
                            Monat = colCounter - 3
                            Jahr = VBA.CStr(nlc_ppf_resshisto.Range("RessHisto_Jahr").value)
                            
                            statement = "SELECT SUM(Verfuegbarkeit.Wert) AS retValue " & _
                                        "FROM " & _
                                            "[DB_Ressourcenarten] LEFT JOIN " & _
                                            "(SELECT " & _
                                                "Verfuegbarkeit1.FK_Ressourcenart, Verfuegbarkeit1.Wert " & _
                                            "From " & _
                                                "(SELECT " & _
                                                    "ID, FK_Ressourcenart, " & Class_Functions.DB.Convert(Class_Functions.DB.Convert("Jahr", T_VARCHAR) & " + '-' + " & Class_Functions.DB.Convert("Monat", T_VARCHAR) & " + '-01'", T_DATE) & " AS Datum1, Wert " & _
                                                "FROM " & _
                                                    "[Verfuegbarkeit] AS Verfuegbarkeit_2) AS Verfuegbarkeit1 INNER JOIN " & _
                                                    "(SELECT " & _
                                                        "FK_Ressourcenart, MAX(" & Class_Functions.DB.Convert(Class_Functions.DB.Convert("Jahr", T_VARCHAR) & " + '-' + " & Class_Functions.DB.Convert("Monat", T_VARCHAR) & " + '-01'", T_DATE) & ")  AS Datum1 " & _
                                                    "FROM " & _
                                                        "[Verfuegbarkeit] AS Verfuegbarkeit_1 " & _
                                                    "WHERE " & _
                                                        "(Verfuegbarkeit_1.Jahr <= " & Jahr & " and Verfuegbarkeit_1.Monat <= " & Monat & ") AND Verfuegbarkeit_1.FK_Ressourcenart in (" & ressarten & ") " & _
                                                    "GROUP BY " & _
                                                        "FK_Ressourcenart) AS Verfuegbarkeit2 " & _
                                                 "ON (Verfuegbarkeit1.FK_Ressourcenart = Verfuegbarkeit2.FK_Ressourcenart AND Verfuegbarkeit1.Datum1 = Verfuegbarkeit2.Datum1)) " & _
                                            "AS Verfuegbarkeit ON Verfuegbarkeit.FK_Ressourcenart = DB_Ressourcenarten.ID " & _
                                        "WHERE " & _
                                            "DB_Ressourcenarten.active <> 0 AND DB_Ressourcenarten.ID in ( " & ressarten & ") " & _
                                        "GROUP BY " & _
                                            "DB_Ressourcenarten.FK_Ressourcenarten"
                        Case 16 To 18:
                            'statement = statement & get_VerfStatement2(colCounter, colCounter - 15, VBA.CStr(Jahr + 1), ressarten)
                            Monat = colCounter - 15
                            Jahr = VBA.CStr(nlc_ppf_resshisto.Range("RessHisto_Jahr").value + 1)
                            statement = "SELECT " & _
                                            "SUM(Verfuegbarkeit.Wert) AS retValue " & _
                                        "FROM " & _
                                            "[DB_Ressourcenarten] LEFT JOIN " & _
                                            "(SELECT " & _
                                                "Verfuegbarkeit1.FK_Ressourcenart, Verfuegbarkeit1.Wert " & _
                                            "FROM " & _
                                                "(SELECT " & _
                                                    "ID, FK_Ressourcenart, " & Class_Functions.DB.Convert(Class_Functions.DB.Convert("Jahr", T_VARCHAR) & " + '-' + " & Class_Functions.DB.Convert("Monat", T_VARCHAR) & " + '-01'", T_DATE) & " AS Datum1, Wert " & _
                                                "FROM " & _
                                                    "[Verfuegbarkeit] AS Verfuegbarkeit_2) AS Verfuegbarkeit1 INNER JOIN " & _
                                                "(SELECT " & _
                                                    "FK_Ressourcenart, MAX(" & Class_Functions.DB.Convert(Class_Functions.DB.Convert("Jahr", T_VARCHAR) & " + '-' + " & Class_Functions.DB.Convert("Monat", T_VARCHAR) & " + '-01'", T_DATE) & ")  AS Datum1 " & _
                                                "FROM " & _
                                                    "[Verfuegbarkeit] AS Verfuegbarkeit_1 " & _
                                                "WHERE " & _
                                                    "((Verfuegbarkeit_1.Jahr <= " & Jahr & " and Verfuegbarkeit_1.Monat <= " & Monat & ") or Verfuegbarkeit_1.Jahr <= " & Jahr - 1 & ") AND Verfuegbarkeit_1.FK_Ressourcenart in (" & ressarten & ") " & _
                                                "GROUP BY " & _
                                                    "FK_Ressourcenart" & _
                                                ") AS Verfuegbarkeit2 ON (Verfuegbarkeit1.FK_Ressourcenart = Verfuegbarkeit2.FK_Ressourcenart AND Verfuegbarkeit1.Datum1 = Verfuegbarkeit2.Datum1)" & _
                                            ") AS Verfuegbarkeit ON Verfuegbarkeit.FK_Ressourcenart = DB_Ressourcenarten.ID " & _
                                        "WHERE " & _
                                            "DB_Ressourcenarten.active <> 0 AND DB_Ressourcenarten.ID in ( " & ressarten & ") " & _
                                        "GROUP BY " & _
                                            "DB_Ressourcenarten.FK_Ressourcenarten"
                    End Select
                    
                    If Class_Functions.DB.Select_Statement(statement) = True Then
                        counter = 0
                        While Not Class_Functions.DB.Recordset.EOF
                            result(colCounter + 2, counter) = Nz(Class_Functions.DB.Recordset!retValue)
                            
                            counter = counter + 1
                            Class_Functions.DB.Recordset.movenext
                        Wend
                    End If
                Next colCounter
            End If
        End If
    End If

    On Error GoTo Ende
pasteFromArray:
    
    nlc_ppf_resshisto.Range("C81:W" & 81 + counter) = Application.Transpose(result)
Ende:
    Call formatVerf
End Sub

Sub formatVerf()
    nlc_ppf_resshisto.Cells(79, 3).Calculate
    
    nlc_ppf_resshisto.Range("C57:W57").Copy
    nlc_ppf_resshisto.Range("C81").PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    Application.CutCopyMode = False
    If nlc_ppf_resshisto.Cells(79, 3).value > 1 Then
        Selection.AutoFill Destination:=nlc_ppf_resshisto.Range("C81:W" & 80 + nlc_ppf_resshisto.Cells(79, 3).value), Type:=xlFillFormats
    End If
    nlc_ppf_resshisto.Range("D56").Copy
    nlc_ppf_resshisto.Range("C80").Select
    ActiveSheet.Paste
    nlc_ppf_resshisto.Range("C80:D80").MergeCells = False 'wird nur auf verdacht gesetzt, falls die Zelle bereits existiert
    nlc_ppf_resshisto.Range("C80:D80").MergeCells = True
    Application.CutCopyMode = False
    
    ActiveCell.FormulaR1C1 = "Verf|fffd|gbarkeiten"
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideHorizontal)
        .LineStyle = xlContinuous
        .Weight = xlThin
    End With
    
    
    nlc_ppf_resshisto.Rows(nlc_ppf_resshisto.Cells(79, 3).value + 81 & ":" & nlc_ppf_resshisto.Cells(79, 3).value + 81 + 500).delete
End Sub


Public Function Get_KatName(KatID As String, short As Boolean) As String 'Gibt Namen einer Kategorie zur|fffd|ck anhand der ID
    
    Dim Shortname As String
    
    If short = True Then
        Shortname = "FK_Language_Shortname"
    Else
        Shortname = "FK_Language_Name"
    End If
    
    statement = "SELECT " & _
                    "Lang." & calc_master.Range("aktuelle_sprache").value & " AS Wert " & _
                "FROM " & _
                    "[DB_Kategorie] AS Kat " & _
                    "LEFT JOIN " & _
                        "[DB_Language] AS Lang ON Kat." & Shortname & " = Lang.Term " & _
                "WHERE " & _
                    "Kat.ID = " & KatID

    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            If IsNull(Class_Functions.DB.Recordset!wert) Then
                Get_KatName = "NULL"
            Else
                Get_KatName = Class_Functions.DB.Recordset!wert
            End If
        Else
            Get_KatName = "NULL"
        End If
    Else
        Get_KatName = ""
    End If
End Function

Public Function Get_AllFromWhere(From As String, where As String) As Boolean 'Gibt alle Felder von einer Tabelle zur|fffd|ck, welche dem Kriterium entsprechen
       
    statement = "SELECT " & _
                    "* " & _
                "FROM " & _
                    "[" & From & "] " & _
                "WHERE " & _
                    where

    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            Get_AllFromWhere = True
        Else
            Get_AllFromWhere = False
        End If
    Else
        Get_AllFromWhere = False
    End If
End Function

'Gibt einen Wert aus der Tabelle DB_Language in gew|fffd|hlter Sprache zur|fffd|ck
Public Function Get_Language_Value(Term As String) As String
    statement = "SELECT " & _
                    calc_master.Range("aktuelle_sprache").value & " AS Wert " & _
                "FROM " & _
                    "[DB_Language] " & _
                "WHERE " & _
                    "Term = '" & Term & "'"

    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            Get_Language_Value = Class_Functions.DB.Recordset!wert
        Else
            Get_Language_Value = ""
        End If
    Else
        Get_Language_Value = ""
    End If
End Function

'Liest die Sprachtabelle aus und l|fffd|d alle Worksheet Infos in die Tabelle DB_Language
'Es werden nur die Sprachwerte "SheetValue", "SheetButton", "Sheetname" und "SheetButtonName" ausgelesen
Public Function Get_Language_List()
    Dim row_counter As Integer
    Dim col_counter As Integer
    Dim myArray As Variant

    statement = "SELECT " & _
                    "* " & _
                "FROM " & _
                    "[DB_Language] " & _
                "WHERE " & _
                    "modul LIKE 'Sheet%'"

    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            col_counter = Class_Functions.DB.Recordset.Fields.count
            row_counter = Class_Functions.DB.GetRecordCount(statement)
            
            DB_Language.Range("LanguageMatrix").ClearContents
            DB_Language.Range("A2").CopyFromRecordset Class_Functions.DB.Recordset
            
            If row_counter > 0 And col_counter > 0 Then
                ActiveWorkbook.Names.add name:="LanguageMatrix", RefersToR1C1:=DB_Language.Range(DB_Language.Cells(2, 1), DB_Language.Cells(row_counter + 1, col_counter))
            Else
                ActiveWorkbook.Names.add name:="LanguageMatrix", RefersToR1C1:=DB_Language.Range(DB_Language.Cells(2, 1), DB_Language.Cells(2, col_counter))
            End If
        End If
    End If
    
    
End Function

'Gibt alle Wert aus der Tabelle DB_Language welche als extern markiert sind zur|fffd|ck
'und schreibst sie in die |fffd|bergebene Listbox
Public Function Get_AllExternLanguage_Values(lb As Object) As Boolean
    Dim lb_counter As Integer
    Dim languange_counter As Integer
    
    statement = "SELECT " & _
                    "* " & _
                "FROM " & _
                    "[DB_Language] " & _
                "WHERE " & _
                    "intern = 0"
    
    lb_counter = 0
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            While Not Class_Functions.DB.Recordset.EOF
                languange_counter = 1
                
                lb.addItem (Class_Functions.DB.Recordset!Term)
                
                While calc_master.Range("Language").Cells(languange_counter, 1).value <> ""
                    If Class_Functions.DB.Recordset.Fields(calc_master.Range("Language").Cells(languange_counter, 1).value) <> "NULL" Then
                        lb.list(lb_counter, languange_counter) = Class_Functions.DB.Recordset.Fields(calc_master.Range("Language").Cells(languange_counter, 1).value)
                    Else
                        lb.list(lb_counter, languange_counter) = ""
                    End If
                    
                    languange_counter = languange_counter + 1
                Wend
                
                lb_counter = lb_counter + 1
                Class_Functions.DB.Recordset.movenext
            Wend
            Get_AllExternLanguage_Values = True
        Else
            Get_AllExternLanguage_Values = False
        End If
    Else
        Get_AllExternLanguage_Values = "false"
    End If
End Function

Public Function Get_XYAchse(KatID As String, short As Boolean) As String
    Dim Achse As String
    Dim Shortname As String
    Dim where As String
    Dim counter As Integer
    
    counter = 1
    
    If short = True Then
        Shortname = "FK_Language_Shortname"
    Else
        Shortname = "FK_Language_Name"
    End If
    
    If calc_master.Range("show_inactive_values") = "FALSE" Then
        where = "Katdetail.FK_Kategorie = " & KatID & " AND Katdetail.active <> 0 "
    Else
        where = "Katdetail.FK_Kategorie = " & KatID & " "
    End If
    
    statement = "SELECT " & _
                    "Lang." & calc_master.Range("aktuelle_sprache").value & " AS Wert " & _
                "FROM " & _
                    "[DB_Kategorie_Detail] AS KatDetail " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Language] AS Lang ON KatDetail." & Shortname & " = Lang.Term " & _
                "WHERE " & _
                    where & _
                "ORDER BY " & _
                    "KatDetail.OrderBy"
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            While Not Class_Functions.DB.Recordset.EOF
                If Achse = "" Then
                    Achse = "(" & counter & ") " & Class_Functions.DB.Recordset!wert
                Else
                    Achse = Achse & "   " & "(" & counter & ") " & Class_Functions.DB.Recordset!wert
                End If
                counter = counter + 1
                Class_Functions.DB.Recordset.movenext
            Wend
        Else
            Achse = "NULL"
        End If
    Else
        Achse = ""
    End If
    
    Get_XYAchse = Achse
End Function

Public Function Get_MatrixXYAchse(KatID As String, short As Boolean) As String
    Dim Achse As String
    Dim Shortname As String
    Dim where As String
    Dim counter As Integer
    
    counter = 0
    
    If short = True Then
        Shortname = "FK_Language_Shortname"
    Else
        Shortname = "FK_Language_Name"
    End If
    
    If calc_master.Range("show_inactive_values") = "FALSE" Then
        where = "Katdetail.FK_Kategorie = " & KatID & " AND Katdetail.active <> 0 "
    Else
        where = "Katdetail.FK_Kategorie = " & KatID & " "
    End If
    
    statement = "SELECT " & _
                    "Lang." & calc_master.Range("aktuelle_sprache").value & " AS Wert " & _
                "FROM " & _
                    "[DB_Kategorie_Detail] AS KatDetail " & _
                    "LEFT JOIN " & _
                        "[DB_Language] AS Lang ON KatDetail." & Shortname & " = Lang.Term " & _
                "WHERE " & _
                    where & _
                "ORDER BY " & _
                    "KatDetail.OrderBy"
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            While Not Class_Functions.DB.Recordset.EOF
                If Achse = "" Then
                    Achse = "(" & counter & "-" & counter + 4 & ") " & Class_Functions.DB.Recordset!wert
                Else
                    Achse = Achse & "   " & "(" & counter & "-" & counter + 4 & ") " & Class_Functions.DB.Recordset!wert
                End If
                counter = counter + 4
                Class_Functions.DB.Recordset.movenext
            Wend
        Else
            Achse = "NULL"
        End If
    Else
        Achse = ""
    End If
    
    Get_MatrixXYAchse = Achse
End Function

Public Function Get_Farben(KatID As String)
    Dim zeile As Integer
    zeile = 16
    
    statement = "SELECT " & _
                    "Lang." & calc_master.Range("aktuelle_sprache").value & " AS Wert, Katdetail.farbe As Farbe " & _
                "FROM " & _
                    "[DB_Kategorie_Detail] AS KatDetail " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Language] AS Lang ON KatDetail.FK_Language_Name = Lang.Term " & _
                "WHERE " & _
                    "Katdetail.FK_Kategorie = " & KatID & " AND Katdetail.active <> 0 " & _
                "Order BY " & _
                    "Katdetail.OrderBy"
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            While Not Class_Functions.DB.Recordset.EOF
                If Not VBA.IsNull(Class_Functions.DB.Recordset!farbe) Then
                    nlc_ppf_pipe.Cells(zeile, 15).Interior.ColorIndex = calc_master.Range("farben_gesamt").Cells(Class_Functions.DB.Recordset!farbe, 1).value
                End If
                
                nlc_ppf_pipe.Cells(zeile, 17).value = Class_Functions.DB.Recordset!wert
                
                zeile = zeile + 2
                Class_Functions.DB.Recordset.movenext
            Wend
        End If
    End If
End Function

Public Function Get_MatrixFarben(KatID As String)
    Dim zeile As Integer
    zeile = 16
    
    statement = "SELECT " & _
                    "Lang." & calc_master.Range("aktuelle_sprache").value & " AS Wert, Katdetail.farbe As Farbe " & _
                "FROM " & _
                    "[DB_Kategorie_Detail] AS KatDetail " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Language] AS Lang ON KatDetail.FK_Language_Name = Lang.Term " & _
                "WHERE " & _
                    "Katdetail.FK_Kategorie = " & KatID & " AND KatDetail.active <> 0 " & _
                "Order BY " & _
                    "Katdetail.OrderBy"
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            While Not Class_Functions.DB.Recordset.EOF
                If Not VBA.IsNull(Class_Functions.DB.Recordset!farbe) Then
                    nlc_ppf_matrix.Cells(zeile, 15).Interior.ColorIndex = calc_master.Range("farben_gesamt").Cells(Class_Functions.DB.Recordset!farbe, 1).value
                End If
                
                nlc_ppf_matrix.Cells(zeile, 17).value = Class_Functions.DB.Recordset!wert
                
                zeile = zeile + 2
                Class_Functions.DB.Recordset.movenext
            Wend
        End If
    End If
End Function

Public Function Get_Kategoriewert(Projekt_ID As String, KatID As String) As String
    statement = "SELECT [DB_Kategoriewerte].Wert, [DB_Kategoriewerte].Wert_Zahl, [DB_Kategoriewerte].Wert_Datum " & _
                "FROM ([DB_Kategoriewerte] " & _
                "INNER JOIN " & _
                    "[DB_Kategorie] ON [DB_Kategoriewerte].FK_Kategorie = [DB_Kategorie].ID) " & _
                "INNER JOIN " & _
                    "[DB_Language] ON [DB_Kategorie].FK_Language_Name = [DB_Language].Term " & _
                "WHERE ([DB_Kategoriewerte].FK_Projekte = " & Projekt_ID & ") AND ([DB_Kategoriewerte].FK_Kategorie = " & KatID & ")"
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            If (Not IsNull(Class_Functions.DB.Recordset!wert)) Then
                Get_Kategoriewert = Class_Functions.DB.Recordset!wert
            ElseIf (Not IsNull(Class_Functions.DB.Recordset!Wert_Zahl)) Then
                Get_Kategoriewert = Class_Functions.DB.Recordset!Wert_Zahl
            ElseIf (Not IsNull(Class_Functions.DB.Recordset!Wert_Datum)) Then
                Get_Kategoriewert = Class_Functions.DB.Recordset!Wert_Datum
            Else
                Get_Kategoriewert = "NULL"
            End If
        Else
            Get_Kategoriewert = "NULL"
        End If
    Else
        Get_Kategoriewert = ""
    End If
End Function

Public Function Get_KategorieOrDetailWert(Projekt_ID As String, KatID As String) As String

    Dim ret
    
    ret = Get_Kategoriewert(Projekt_ID, KatID)

    If ret = "leer" Then
    
        statement = "SELECT [DB_Kategorie].FK_Art, [DB_Kategorie_Detail].OrderBy, [DB_Language].deutsch " & _
                "FROM (([DB_Kategoriewerte] " & _
                "INNER JOIN " & _
                    "[DB_Kategorie] ON [DB_Kategoriewerte].FK_Kategorie = [DB_Kategorie].ID) " & _
                "INNER Join " & _
                    "[DB_Kategorie_Detail] ON [DB_Kategorie_Detail].ID = [DB_Kategoriewerte].FK_Kategorie_Detail) " & _
                "INNER Join " & _
                    "[DB_Language] ON [DB_Kategorie_Detail].FK_Language_Name = [DB_Language].Term " & _
                "WHERE ([DB_Kategoriewerte].FK_Projekte = " & Projekt_ID & ") AND ([DB_Kategoriewerte].FK_Kategorie = " & KatID & ")"
                
        If Class_Functions.DB.Select_Statement(statement) = True Then
            If Not Class_Functions.DB.Recordset.EOF Then
                ' Check ob true false dann nimm order mod 2 damit 2 0 und 1 1 wird weils so am SP is
                If Class_Functions.DB.Recordset!FK_Art <> 2 Then
                    ret = Class_Functions.DB.Recordset!deutsch
                    
                Else
                    ret = (Class_Functions.DB.Recordset!orderby) Mod 2
                End If
                
            End If
        End If
    End If
    
    If ret = "NULL" Then ret = ""
    
    'HTML Special chars
    ret = Replace(ret, "&", "&amp;")
    ret = Replace(ret, "<", "&lt;")
    ret = Replace(ret, ">", "&gt;")
    
    Get_KategorieOrDetailWert = ret
    
End Function

Public Function Get_Kategoriewert2(Projekt_ID As String, Kategoriewert_deutsch As String) As String
    statement = "SELECT [DB_Kategoriewerte].Wert, [DB_Kategoriewerte].Wert_Zahl, [DB_Kategoriewerte].Wert_Datum " & _
                "FROM ([DB_Kategoriewerte] " & _
                "INNER JOIN " & _
                    "[DB_Kategorie] ON [DB_Kategoriewerte].FK_Kategorie = [DB_Kategorie].ID) " & _
                "INNER JOIN " & _
                    "[DB_Language] ON [DB_Kategorie].FK_Language_Name = [DB_Language].Term " & _
                "WHERE ([DB_Kategoriewerte].FK_Projekte = " & Projekt_ID & ") AND ([DB_Language]." & calc_master.Range("aktuelle_sprache").value & " = '" & Kategoriewert_deutsch & "')"
                
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            If (Not IsNull(Class_Functions.DB.Recordset!wert)) Then
                Get_Kategoriewert2 = Class_Functions.DB.Recordset!wert
            ElseIf (Not IsNull(Class_Functions.DB.Recordset!Wert_Zahl)) Then
                Get_Kategoriewert2 = Class_Functions.DB.Recordset!Wert_Zahl
            ElseIf (Not IsNull(Class_Functions.DB.Recordset!Wert_Datum)) Then
                Get_Kategoriewert2 = Class_Functions.DB.Recordset!Wert_Datum
            Else
                Get_Kategoriewert2 = "NULL"
            End If
        Else
            Get_Kategoriewert2 = "NULL"
        End If
    Else
        Get_Kategoriewert2 = ""
    End If
End Function

Public Function Get_Kategoriewert3(Projekt_ID As String, KatID As String) As String
    statement = "SELECT [DB_Kategoriewerte].Wert, [DB_Kategoriewerte].Wert_Zahl, [DB_Kategoriewerte].Wert_Datum " & _
                "FROM ([DB_Kategoriewerte] " & _
                "INNER JOIN " & _
                    "[DB_Kategorie] ON [DB_Kategoriewerte].FK_Kategorie = [DB_Kategorie].ID) " & _
                "INNER JOIN " & _
                    "[DB_Language] ON [DB_Kategorie].FK_Language_Name = [DB_Language].Term " & _
                "WHERE ([DB_Kategoriewerte].FK_Projekte = " & Projekt_ID & ") AND ([DB_Kategoriewerte].FK_Kategorie  = " & KatID & ")"
                
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            If (Not IsNull(Class_Functions.DB.Recordset!wert)) Then
                Get_Kategoriewert3 = Class_Functions.DB.Recordset!wert
            ElseIf (Not IsNull(Class_Functions.DB.Recordset!Wert_Zahl)) Then
                Get_Kategoriewert3 = Class_Functions.DB.Recordset!Wert_Zahl
            ElseIf (Not IsNull(Class_Functions.DB.Recordset!Wert_Datum)) Then
                Get_Kategoriewert3 = Class_Functions.DB.Recordset!Wert_Datum
            Else
                Get_Kategoriewert3 = "NULL"
            End If
        Else
            Get_Kategoriewert3 = "NULL"
        End If
    Else
        Get_Kategoriewert3 = ""
    End If
End Function


Public Function Get_KategorieID(Kategoriewert_deutsch As String) As String
    statement = "SELECT [DB_Kategorie].ID " & _
                "FROM ([DB_Kategorie] " & _
                "INNER JOIN " & _
                    "[DB_Language] ON ([DB_Kategorie].FK_Language_Name = [DB_Language].Term)) " & _
                "WHERE ([DB_Language]." & calc_master.Range("aktuelle_sprache").value & " = '" & Kategoriewert_deutsch & "')"
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            If IsNull(Class_Functions.DB.Recordset!ID) Then
                Get_KategorieID = ""
            Else
                Get_KategorieID = Class_Functions.DB.Recordset!ID
            End If
        Else
            Get_KategorieID = ""
        End If
    Else
        Get_KategorieID = ""
    End If
End Function

Public Function Get_PF_Settings(feld As String) As String
    statement = "SELECT " & _
                    "Settings." & feld & " AS Wert " & _
                "FROM " & _
                    "[DB_PPF_Settings] AS Settings"
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            If IsNull(Class_Functions.DB.Recordset!wert) Then
                Get_PF_Settings = ""
            Else
                Get_PF_Settings = Class_Functions.DB.Recordset!wert
            End If
        Else
            Get_PF_Settings = ""
        End If
    Else
        Get_PF_Settings = ""
    End If
End Function

Public Function Get_Ressourcen(Projekt_ID As String)
    calc_frm_projects.Range("lb_ressourcen").ClearContents
    
    Dim where As String
    Dim result() As String
    
    If calc_master.Range("show_inactive_values") = "FALSE" Then
        where = "WHERE Ressarten.active <> 0 "
    Else
        where = ""
    End If
    
    statement = "SELECT " & _
                    "Ress.ID, " & _
                    "Ressarten.ID AS RA_ID, " & _
                    "Lang_Name." & calc_master.Range("aktuelle_sprache").value & " AS langName, " & _
                    "Ress.Basis, " & _
                    "Ress.Ist, " & _
                    "Ress.aktuell, " & _
                    "Ressarten.FK_Kostenarten " & _
                "FROM " & _
                    "(((([DB_Language] AS Lang_Name INNER JOIN " & _
                    "[DB_Ressourcenarten] AS Ressarten ON Lang_Name.Term = Ressarten.FK_Language_Name) LEFT OUTER Join " & _
                    "[DB_Ressourcen] As Ress ON (Ressarten.ID = Ress.FK_Ressourcenarten AND Ress.FK_Projekte = " & Projekt_ID & ")) INNER JOIN " & _
                    "[DB_Ressourcenarten] AS RessGroup ON RessGroup.ID = Ressarten.FK_Ressourcenarten) LEFT OUTER JOIN " & _
                    "[DB_Language] AS Lang_RessGroupName ON RessGroup.FK_Language_Name = Lang_RessGroupName.Term) " & _
                where & _
                "ORDER BY " & _
                    "Lang_RessGroupName." & calc_master.Range("aktuelle_sprache").value & ", Ressarten.FK_Ressourcenarten, Ressarten.FK_Kostenarten, Lang_Name.deutsch"
                
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            Dim i As Integer
            Dim rsRows As Integer
            
            rsRows = Class_Functions.DB.GetRecordCount(statement)
            i = rsRows + 4
            
            ReDim result(5, rsRows - 1)
            Dim counter As Integer
            
            While Not Class_Functions.DB.Recordset.EOF
                result(0, counter) = N2hk(Class_Functions.DB.Recordset!ID)
                result(1, counter) = N2hk(Class_Functions.DB.Recordset!RA_ID)

                If Not Class_Functions.DB.Recordset!FK_Kostenarten Or Not Class_Functions.DB.Recordset!FK_Kostenarten = "" Then
                    result(2, counter) = "     " & Class_Functions.DB.Recordset!LangName
                Else
                    result(2, counter) = Class_Functions.DB.Recordset!LangName
                End If

                result(3, counter) = Nz(Class_Functions.DB.Recordset!basis)
                result(4, counter) = Nz(Class_Functions.DB.Recordset!ist)
                result(5, counter) = Nz(Class_Functions.DB.Recordset!aktuell)
                
                counter = counter + 1
                Class_Functions.DB.Recordset.movenext
            Wend
            
            'calc_frm_projects.Range("B4").CopyFromRecordset Class_Functions.DB.Recordset
            calc_frm_projects.Range(calc_frm_projects.Cells(calc_frm_projects.Range("lb_ressourcen").row, calc_frm_projects.Range("lb_ressourcen").Column), _
                                    calc_frm_projects.Cells(calc_frm_projects.Range("lb_ressourcen").row + i - 5, calc_frm_projects.Range("lb_ressourcen").Column + 5)) = _
                                    Application.Transpose(result)
        End If
    End If
    
    If i <> 0 Then ActiveWorkbook.Names.add name:="lb_ressourcen", RefersToR1C1:=calc_frm_projects.Range(calc_frm_projects.Cells(4, 2), calc_frm_projects.Cells(i - 1, 7))
End Function

Public Function Check_RessValueExists(ress_id As String, Ress_Col As Variant) As String
    statement = "SELECT " & _
                    Ress_Col & " " & _
                "FROM " & _
                    "[DB_Ressourcen] " & _
                "WHERE " & _
                    "(ID=" & ress_id & ")"
                
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            Select Case VBA.LCase(Ress_Col)
                Case "basis"
                    If IsNull(Class_Functions.DB.Recordset!basis) Then
                        Check_RessValueExists = ""
                    Else
                        Check_RessValueExists = Class_Functions.DB.Recordset!basis
                    End If
                Case "ist"
                    If IsNull(Class_Functions.DB.Recordset!ist) Then
                        Check_RessValueExists = ""
                    Else
                        Check_RessValueExists = Class_Functions.DB.Recordset!ist
                    End If
                Case "aktuell"
                    If IsNull(Class_Functions.DB.Recordset!aktuell) Then
                        Check_RessValueExists = ""
                    Else
                        Check_RessValueExists = Class_Functions.DB.Recordset!aktuell
                    End If
                Case "rest"
                    If IsNull(Class_Functions.DB.Recordset!Rest) Then
                        Check_RessValueExists = ""
                    Else
                        Check_RessValueExists = Class_Functions.DB.Recordset!Rest
                    End If
                Case "abweichung"
                    If IsNull(Class_Functions.DB.Recordset!Abweichung) Then
                        Check_RessValueExists = ""
                    Else
                        Check_RessValueExists = Class_Functions.DB.Recordset!Abweichung
                    End If
            End Select
            
        Else
            Check_RessValueExists = ""
        End If
    Else
        Check_RessValueExists = ""
    End If
End Function

'Pr|fffd|ft, generiert einen Key anhand der Anzahl, der schon hinterlegten User und vergleicht diesen mit dem DB Key
'Au|fffd|erdem wird gepr|fffd|ft, ob der Key mit der maximalen Anzahl an Users |fffd|bereinstimmt, da sonst der Key
'Gibt true zur|fffd|ck, wenn noch ein User angelegt werden kann
Public Function Check_UserMax(ID As String) As Boolean
    Dim statements(2) As String
    Dim new_rec As Integer
    
    statements(0) = "SELECT " & _
                        "Settings.UserKey, " & _
                        "Settings.MaxUser " & _
                    "FROM " & _
                        "[DB_PPF_Settings] AS Settings " & _
                    "WHERE " & _
                        "Settings.ID = " & ID
    
    statements(1) = "SELECT " & _
                        "Username " & _
                    "FROM " & _
                        "DB_Users"
                 
    new_rec = Class_Functions.DB.Create_NewRecordset
                 
    If Class_Functions.DB.Select_Statement(statements(0)) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            If nlc_intern.key_generieren(Class_Functions.DB.Recordset!MaxUser) = Class_Functions.DB.Recordset!UserKey Then
                If Class_Functions.DB.Select_Statement(statements(1), new_rec) = True Then
                    If Not Class_Functions.DB.Recordset(new_rec).EOF Then
                        If Class_Functions.DB.GetRecordCount(statement) < Class_Functions.DB.Recordset!MaxUser Then
                            Check_UserMax = True
                        Else
                            Check_UserMax = False
                            MsgBox nlc_language.FindValue("SMessage_MaxUser")
                        End If
                    Else
                        Check_UserMax = True
                    End If
                End If
            Else
                Check_UserMax = False
                MsgBox nlc_language.FindValue("SMessage_HackUserCount")
                'Evtl. alle Portfolio Typen sperren, sodass niemand mehr phb|fffd|s ins ppf exportieren kann
            End If
        Else
            Check_UserMax = False
        End If
    Else
        Check_UserMax = False
    End If
    
    Class_Functions.DB.Delete_RecordsetItem (new_rec)
End Function

Public Function Get_Setting_Pipe_Value(Template_ID As String, feld As String)
    statement = "SELECT " & _
                    feld & " AS Wert, " & _
                    "FK_Users " & _
                "FROM " & _
                    "[DB_Settings_Pipeline] " & _
                "WHERE " & _
                    "ID=" & Template_ID
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            If feld = "Name" Then
                If VBA.IsNull(Class_Functions.DB.Recordset!FK_Users) Then
                    Get_Setting_Pipe_Value = GlobalIdLeft & Class_Functions.DB.Recordset!wert & GlobalIdRight
                Else
                    Get_Setting_Pipe_Value = Class_Functions.DB.Recordset!wert
                End If
            Else
                Get_Setting_Pipe_Value = Class_Functions.DB.Recordset!wert
            End If
        End If
    End If
End Function

Public Function Get_Setting_Matrix_Value(Template_ID As String, feld As String)
    statement = "SELECT " & _
                    feld & " AS Wert, " & _
                    "FK_Users " & _
                "FROM " & _
                    "[DB_Settings_Matrixchart] " & _
                "WHERE " & _
                    "ID=" & Template_ID
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            If feld = "Name" Then
                If VBA.IsNull(Class_Functions.DB.Recordset!FK_Users) Then
                    Get_Setting_Matrix_Value = GlobalIdLeft & Class_Functions.DB.Recordset!wert & GlobalIdRight
                Else
                    Get_Setting_Matrix_Value = Class_Functions.DB.Recordset!wert
                End If
            Else
                Get_Setting_Matrix_Value = Class_Functions.DB.Recordset!wert
            End If
        End If
    End If
End Function

Public Function Get_Setting_PieChart_Value(Template_ID As String, feld As String)
    If feld = "FK_Language_AreaDescr" Then
        statement = "SELECT " & _
                        "Lang.deutsch AS Wert, " & _
                        "FK_Users " & _
                    "FROM " & _
                        "[DB_Settings_PieChart] AS Settings " & _
                        "INNER JOIN " & _
                            "[DB_Language] AS Lang ON Settings.FK_Language_AreaDescr = Lang.Term " & _
                    "WHERE " & _
                        "Settings.ID = " & Template_ID
    Else
        statement = "SELECT " & _
                        feld & " AS Wert, " & _
                    "FK_Users " & _
                    "FROM " & _
                        "[DB_Settings_PieChart] " & _
                    "WHERE " & _
                        "ID=" & Template_ID
    End If
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            If feld = "Name" Then
                If VBA.IsNull(Class_Functions.DB.Recordset!FK_Users) Then
                    Get_Setting_PieChart_Value = GlobalIdLeft & Class_Functions.DB.Recordset!wert & GlobalIdRight
                Else
                    Get_Setting_PieChart_Value = Class_Functions.DB.Recordset!wert
                End If
            Else
                Get_Setting_PieChart_Value = Class_Functions.DB.Recordset!wert
            End If
        End If
    End If
    
End Function

Public Function Get_Setting_Gantt_Value(Template_ID As String, feld As String)
    statement = "SELECT " & _
                    feld & " AS Wert, " & _
                    "FK_Users " & _
                "FROM " & _
                    "[DB_Settings_Gantt] " & _
                "WHERE " & _
                    "ID=" & Template_ID
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            If feld = "Name" Then
                If VBA.IsNull(Class_Functions.DB.Recordset!FK_Users) Then
                    Get_Setting_Gantt_Value = GlobalIdLeft & Class_Functions.DB.Recordset!wert & GlobalIdRight
                Else
                    Get_Setting_Gantt_Value = Class_Functions.DB.Recordset!wert
                End If
            Else
                Get_Setting_Gantt_Value = Class_Functions.DB.Recordset!wert
            End If
        End If
    End If
End Function

Public Function Get_Setting_PViewer_Value(Template_ID As String, feld As String)
    statement = "SELECT " & _
                    feld & " AS Wert, " & _
                    "FK_Users " & _
                "FROM " & _
                    "[DB_Settings_Projectviewer] " & _
                "WHERE " & _
                    "ID=" & Template_ID
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            If feld = "Name" Then
                If VBA.IsNull(Class_Functions.DB.Recordset!FK_Users) Then
                    Get_Setting_PViewer_Value = GlobalIdLeft & Class_Functions.DB.Recordset!wert & GlobalIdRight
                Else
                    Get_Setting_PViewer_Value = Class_Functions.DB.Recordset!wert
                End If
            Else
                Get_Setting_PViewer_Value = nlc_functions.N2hk(Class_Functions.DB.Recordset!wert)
            End If
        End If
    End If
End Function

Public Function Get_Setting_PjTable_Value(Template_ID As String, feld As String)
    statement = "SELECT " & _
                    feld & " AS Wert, " & _
                    "FK_Users " & _
                "FROM " & _
                    "[DB_Settings_PjTable] " & _
                "WHERE " & _
                    "ID=" & Template_ID
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            If feld = "Name" Then
                If VBA.IsNull(Class_Functions.DB.Recordset!FK_Users) Then
                    Get_Setting_PjTable_Value = GlobalIdLeft & Class_Functions.DB.Recordset!wert & GlobalIdRight
                Else
                    Get_Setting_PjTable_Value = Class_Functions.DB.Recordset!wert
                End If
            Else
                Get_Setting_PjTable_Value = N2hk(Class_Functions.DB.Recordset!wert)
            End If
        End If
    End If
End Function

Public Function Get_FieldArt(KatID As String)
    statement = "SELECT " & _
                    "Lang.deutsch As wert " & _
                "FROM " & _
                    "((DB_Kategorie AS Kat LEFT JOIN " & _
                    "DB_Art AS Art ON Art.ID = Kat.FK_Art) LEFT JOIN " & _
                    "DB_Language AS Lang ON Lang.Term = Art.FK_Language_Description) " & _
                "WHERE " & _
                    "Kat.ID = " & KatID
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            Get_FieldArt = Class_Functions.DB.Recordset!wert
        End If
    End If
End Function

Public Function Get_Setting_PjTable_Kategorie(Template_ID As String)
    
    statement = "SELECT " & _
                    "FK_Kategorie, " & _
                    "resscost " & _
                "FROM " & _
                    "[DB_Settings_PjTable_K] " & _
                "WHERE " & _
                    "FK_Settings_PjTable=" & Template_ID & " " & _
                "ORDER BY " & _
                    "OrderBy"
    
    Dim kat_list() As String
    Dim i As Integer
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            i = Class_Functions.DB.GetRecordCount(statement)
            
            ReDim Preserve kat_list(i - 1, 1)
            
            i = 0
            
            While Not Class_Functions.DB.Recordset.EOF
                kat_list(i, 0) = Class_Functions.DB.Recordset!FK_Kategorie
                If Not IsNull(Class_Functions.DB.Recordset!resscost) Then
                    kat_list(i, 1) = Class_Functions.DB.Recordset!resscost
                Else
                    kat_list(i, 1) = ""
                End If
                i = i + 1
                
                Class_Functions.DB.Recordset.movenext
            Wend
        Else
            ReDim kat_list(1, 1)
        End If
    Else
        ReDim kat_list(1, 1)
    End If
    
    Get_Setting_PjTable_Kategorie = kat_list
End Function


Public Function Get_Setting_PViewer_Values(PJID As String)
    Dim tempKatValues(15, 2) As String
    Dim katValues() As String
    'katValues Col 0 = Term, 1 = ID, 2 = Return Value
    
    
    tempKatValues(0, 0) = "PV_PJBeschreibung"
    tempKatValues(0, 1) = "12"
    tempKatValues(1, 0) = "PV_PL"
    tempKatValues(1, 1) = "7"
    tempKatValues(2, 0) = "PV_PAG"
    tempKatValues(2, 1) = "6"
    tempKatValues(3, 0) = "PV_PJArt"
    tempKatValues(3, 1) = "4"
    tempKatValues(4, 0) = "PV_PJKurzbezeichnung"
    tempKatValues(4, 1) = "8"
    tempKatValues(5, 0) = "PV_BStart"
    tempKatValues(5, 1) = "28"
    tempKatValues(6, 0) = "PV_BEnd"
    tempKatValues(6, 1) = "27"
    tempKatValues(7, 0) = "PV_AStart"
    tempKatValues(7, 1) = "2"
    tempKatValues(8, 0) = "PV_AEnd"
    tempKatValues(8, 1) = "1"
    tempKatValues(9, 0) = "PV_PMPhase"
    tempKatValues(9, 1) = "19"
    tempKatValues(10, 0) = "PV_PJSB"
    tempKatValues(10, 1) = "30"
    tempKatValues(11, 0) = "PV_Ampelstatus"
    tempKatValues(11, 1) = "3"
    tempKatValues(12, 0) = "PV_Statusdatum"
    tempKatValues(12, 1) = "21"

    
    tempKatValues(13, 0) = "PV_Komplex"
    tempKatValues(13, 1) = "14"
    tempKatValues(14, 0) = "PV_Prio"
    tempKatValues(14, 1) = "110"
    tempKatValues(15, 0) = "PV_Portfoliobereich"
    tempKatValues(15, 1) = "29"
    
    katValues = Get_Setting_PViewer_Array(PJID, tempKatValues)
    
    Dim counter As Integer
    
    For counter = 0 To UBound(katValues)
        Call enterValue(katValues(counter, 2), katValues(counter, 0))
    Next counter
End Function

Private Function Get_Setting_PViewer_Array(PJID As String, katValues As Variant) As String()
    Dim counter As Integer
    
    For counter = 0 To UBound(katValues)
        statement = "SELECT " & _
                "RetVal.Wert AS RetVal, " & _
                "RetVal.Wert_Zahl AS RetValZahl, " & _
                "RetVal.Wert_Datum AS RetValDatum, " & _
                "RetVal.FK_Kategorie_Detail AS RetValKatDID " & _
            "From " & _
                "[DB_Kategoriewerte] AS RetVal " & _
            "WHERE " & _
                "(RetVal.FK_Kategorie = " & katValues(counter, 1) & " AND RetVal.FK_Projekte = " & PJID & ")"
        
        If Class_Functions.DB.Select_Statement(statement) = True Then
            If Not Class_Functions.DB.Recordset.EOF Then
                If Not VBA.IsNull(Class_Functions.DB.Recordset!retVal) Then
                    If Class_Functions.DB.Recordset!retVal <> "leer" Then
                        katValues(counter, 2) = Class_Functions.DB.Recordset!retVal
                    Else
                        katValues(counter, 2) = Class_Functions.DB.Recordset!RetValKatDID
                    End If
                ElseIf Not VBA.IsNull(Class_Functions.DB.Recordset!RetValZahl) Then
                    katValues(counter, 2) = Class_Functions.DB.Recordset!RetValZahl
                ElseIf Not VBA.IsNull(Class_Functions.DB.Recordset!RetValDatum) Then
                    katValues(counter, 2) = Class_Functions.DB.Recordset!RetValDatum
                End If
            End If
        End If
    Next counter
    
    Get_Setting_PViewer_Array = katValues
End Function

Private Sub enterValue(text As String, feld As String)
    If VBA.IsNull(text) Or text = "" Then
        Range(feld).value = ""
    Else
        Range(feld).value = text
    End If
End Sub

Private Function GetDate(datum As String)
    If VBA.IsDate(datum) Then
        GetDate = datum
    Else
        GetDate = VBA.CLng(datum)
    End If
End Function

Public Function Get_Setting_PjTable_Header(Template_ID As String)
    
    Dim statements(2) As String
    
    'Kategorien
    statements(0) = "SELECT " & _
                        "Set_PjKat.FK_Kategorie, " & _
                        "Set_PjKat.resscost, " & _
                        "Set_PjKat.DKat, " & _
                        "Lang_Name." & calc_master.Range("aktuelle_sprache").value & " AS Name, " & _
                        "Kat.ColWidth " & _
                    "FROM " & _
                        "(([DB_Language] AS Lang_Name " & _
                        "RIGHT OUTER JOIN " & _
                            "[DB_Kategorie] AS Kat ON Lang_Name.Term = Kat.FK_Language_Name) " & _
                        "RIGHT OUTER JOIN " & _
                            "[DB_Settings_PjTable_K] AS Set_PjKat ON Kat.ID = Set_PjKat.FK_Kategorie) " & _
                    "WHERE " & _
                        "Set_PjKat.FK_Settings_PjTable = " & Template_ID & " " & _
                    "ORDER BY " & _
                        "Set_PjKat.OrderBy"
    'Ressourcen
    statements(1) = "SELECT " & _
                        "SetRessarten.FK_Ressourcenarten, " & _
                        "Ressarten.FK_Ressourcenarten AS FKArten, " & _
                        "Ressarten.ID, " & _
                        "LangName.deutsch AS Name " & _
                    "FROM " & _
                        "(([DB_Settings_PjTable_RA] AS SetRessarten LEFT JOIN " & _
                        "[DB_Ressourcenarten] AS Ressarten ON Ressarten.id = SetRessarten.FK_Ressourcenarten) LEFT JOIN " & _
                        "[DB_Language] AS LangName ON LangName.Term = Ressarten.FK_Language_Name) " & _
                    "WHERE " & _
                        "SetRessarten.FK_Settings_PjTable = " & Template_ID & " " & _
                    "ORDER BY " & _
                        "SetRessarten.orderBy"
                    'Kosten
    statements(2) = "SELECT " & _
                        "SetCostarten.FK_Kostenarten, " & _
                        "LangName.deutsch AS Name " & _
                    "FROM " & _
                        "(([DB_Settings_PjTable_KA] AS SetCostarten LEFT JOIN " & _
                        "[DB_Kostenarten] AS Costarten ON Costarten.id = SetCostarten.FK_Kostenarten) LEFT JOIN " & _
                        "[DB_Language] AS LangName ON LangName.Term = Costarten.FK_Language_Name) " & _
                    "WHERE " & _
                        "SetCostarten.FK_Settings_PjTable = " & Template_ID & " " & _
                    "ORDER BY " & _
                        "SetCostarten.orderBy"
    
    Class_Functions.DB.Create_NewRecordset
    Class_Functions.DB.Create_NewRecordset
    Class_Functions.DB.Create_NewRecordset
    
    Dim kat As Boolean
    Dim ress As Boolean
    Dim cost As Boolean
    
    Dim col_start As Integer
    Dim col_counter As Integer
    Dim ColWidth_row As Integer
    Dim DB_row As Integer
    Dim FK_row As Integer
    Dim FKDetail_row As Integer
    Dim ID_row As Integer
    Dim Value_row As Integer
    Dim Header_Value As Integer
    Dim rescost_startcol As Integer
    Dim resscost_colCount As Integer
    
    Dim ress_subheader(5) As String
    Dim cost_subheader(5) As String
    
    resscost_colCount = 5
    col_start = 4
    ColWidth_row = 6
    DB_row = 7
    FK_row = 8
    FKDetail_row = 9
    ID_row = 10
    Value_row = 11
    Header_Value = 12
    
    col_counter = col_start
    
    If Class_Functions.DB.Select_Statement(statements(0), 1) = True Then
        If Not Class_Functions.DB.Recordset(1).EOF Then
            kat = True
        End If
    End If
    
    If Class_Functions.DB.Select_Statement(statements(1), 2) = True Then
        If Not Class_Functions.DB.Recordset(2).EOF Then
            ress_subheader(0) = SQL_Abfragen.Get_Language_Value("Ress_Basis")
            ress_subheader(1) = SQL_Abfragen.Get_Language_Value("Ress_Aktuell")
            ress_subheader(2) = SQL_Abfragen.Get_Language_Value("Ress_Rest")
            ress_subheader(3) = SQL_Abfragen.Get_Language_Value("Ress_Ist")
            ress_subheader(4) = SQL_Abfragen.Get_Language_Value("Ress_Abweichung")
            
            ress = True
        End If
    End If
    
    If Class_Functions.DB.Select_Statement(statements(2), 3) = True Then
        If Not Class_Functions.DB.Recordset(3).EOF Then
            cost_subheader(0) = SQL_Abfragen.Get_Language_Value("Kost_Basis")
            cost_subheader(1) = SQL_Abfragen.Get_Language_Value("Kost_Aktuell")
            cost_subheader(2) = SQL_Abfragen.Get_Language_Value("Kost_Ist")
            cost_subheader(3) = SQL_Abfragen.Get_Language_Value("Kost_Rest")
            cost_subheader(4) = SQL_Abfragen.Get_Language_Value("Kost_Abweichung")
            
            cost = True
        End If
    End If
    
    'Mainschleife, da hier auch Ressourcen und Kosten eingetragen sind, da die Reihenfolge wichtig ist
    If kat = True Then
        'Kategorien einf|fffd|gen
        While Not Class_Functions.DB.Recordset(1).EOF
            If Class_Functions.DB.Recordset(1)!resscost = "r" Then
                
                'Ressourcen bef|fffd|llen
                GoTo ressarten
            ElseIf Class_Functions.DB.Recordset(1)!resscost = "c" Then
                'Kosten bef|fffd|llen
                GoTo costarten
            Else
                'Kategorien bef|fffd|llen
                
                Call nlc_functions.insert_pjtable_col(col_counter, False)
                
                nlc_ppf_PJTabelle.Cells(ID_row, col_counter).value = Class_Functions.DB.Recordset(1)!FK_Kategorie
                nlc_ppf_PJTabelle.Cells(FK_row, col_counter).value = "FK_Kategorie"
                nlc_ppf_PJTabelle.Cells(Header_Value, col_counter).value = Class_Functions.DB.Recordset(1)!name
                nlc_ppf_PJTabelle.Cells(ColWidth_row, col_counter).value = Class_Functions.DB.Recordset(1)!ColWidth
                
                If Class_Functions.DB.Recordset(1)!dkat = False Then
                    nlc_ppf_PJTabelle.Cells(DB_row, col_counter).value = "DB_Kategoriewerte"
                    nlc_ppf_PJTabelle.Cells(FKDetail_row, col_counter).value = ""
                    nlc_ppf_PJTabelle.Cells(Value_row, col_counter).value = "Wert"
                Else
                    nlc_ppf_PJTabelle.Cells(DB_row, col_counter).value = "DB_Kategorie_Detail"
                    nlc_ppf_PJTabelle.Cells(FKDetail_row, col_counter).value = "FK_Kategorie_Detail"
                    nlc_ppf_PJTabelle.Cells(Value_row, col_counter).value = "FK_Language_Name"
                End If
                
                col_counter = col_counter + 1
            End If
next_kat:
            Class_Functions.DB.Recordset(1).movenext
        Wend
        GoTo endinsert
    End If
    
ressarten:
    If ress = True Then
        rescost_startcol = col_counter
        
        'Ressourcen einf|fffd|gen
        While Not Class_Functions.DB.Recordset(2).EOF
            Call nlc_functions.insert_pjtable_col(col_counter, True)
            Call nlc_functions.insert_pjtable_col(col_counter + 1, True)
            Call nlc_functions.insert_pjtable_col(col_counter + 2, True)
            Call nlc_functions.insert_pjtable_col(col_counter + 3, True)
            Call nlc_functions.insert_pjtable_col(col_counter + 4, True)
            
            'DB Tabellenname
            nlc_ppf_PJTabelle.Cells(DB_row, col_counter).value = "DB_Ressourcen"
            nlc_ppf_PJTabelle.Cells(DB_row, col_counter + 1).value = "DB_Ressourcen"
            nlc_ppf_PJTabelle.Cells(DB_row, col_counter + 2).value = "DB_Ressourcen"
            nlc_ppf_PJTabelle.Cells(DB_row, col_counter + 3).value = "DB_Ressourcen"
            nlc_ppf_PJTabelle.Cells(DB_row, col_counter + 4).value = "DB_Ressourcen"
            
            If VBA.CStr(Class_Functions.DB.Recordset(2)!FKArten) = VBA.CStr(Class_Functions.DB.Recordset(2)!ID) Then
                nlc_ppf_PJTabelle.Cells(9, col_counter).value = "group"
                nlc_ppf_PJTabelle.Cells(9, col_counter + 1).value = "group"
                nlc_ppf_PJTabelle.Cells(9, col_counter + 2).value = "group"
                nlc_ppf_PJTabelle.Cells(9, col_counter + 3).value = "group"
                nlc_ppf_PJTabelle.Cells(9, col_counter + 4).value = "group"
            Else
                nlc_ppf_PJTabelle.Cells(9, col_counter).value = ""
                nlc_ppf_PJTabelle.Cells(9, col_counter + 1).value = ""
                nlc_ppf_PJTabelle.Cells(9, col_counter + 2).value = ""
                nlc_ppf_PJTabelle.Cells(9, col_counter + 3).value = ""
                nlc_ppf_PJTabelle.Cells(9, col_counter + 4).value = ""
            End If
            
            'FK Ressourcenarten
            nlc_ppf_PJTabelle.Cells(FK_row, col_counter).value = "FK_Ressourcenarten"
            nlc_ppf_PJTabelle.Cells(FK_row, col_counter + 1).value = "FK_Ressourcenarten"
            nlc_ppf_PJTabelle.Cells(FK_row, col_counter + 2).value = "FK_Ressourcenarten"
            nlc_ppf_PJTabelle.Cells(FK_row, col_counter + 3).value = "FK_Ressourcenarten"
            nlc_ppf_PJTabelle.Cells(FK_row, col_counter + 4).value = "FK_Ressourcenarten"
            
            'ID
            nlc_ppf_PJTabelle.Cells(ID_row, col_counter).value = Class_Functions.DB.Recordset(2)!FK_Ressourcenarten
            nlc_ppf_PJTabelle.Cells(ID_row, col_counter + 1).value = Class_Functions.DB.Recordset(2)!FK_Ressourcenarten
            nlc_ppf_PJTabelle.Cells(ID_row, col_counter + 2).value = Class_Functions.DB.Recordset(2)!FK_Ressourcenarten
            nlc_ppf_PJTabelle.Cells(ID_row, col_counter + 3).value = Class_Functions.DB.Recordset(2)!FK_Ressourcenarten
            nlc_ppf_PJTabelle.Cells(ID_row, col_counter + 4).value = Class_Functions.DB.Recordset(2)!FK_Ressourcenarten
            
            'Basis, Aktuell, Ist, Rest, Abweichung
            nlc_ppf_PJTabelle.Cells(Value_row, col_counter).value = "Basis"
            nlc_ppf_PJTabelle.Cells(Value_row, col_counter + 1).value = "Aktuell"
            nlc_ppf_PJTabelle.Cells(Value_row, col_counter + 2).value = "Ist"
            nlc_ppf_PJTabelle.Cells(Value_row, col_counter + 3).value = "Rest"
            nlc_ppf_PJTabelle.Cells(Value_row, col_counter + 4).value = "Abweichung"
            
            'Subheader
            nlc_ppf_PJTabelle.Cells(Header_Value + 2, col_counter).value = ress_subheader(0)
            nlc_ppf_PJTabelle.Cells(Header_Value + 2, col_counter + 1).value = ress_subheader(1)
            nlc_ppf_PJTabelle.Cells(Header_Value + 2, col_counter + 2).value = ress_subheader(2)
            nlc_ppf_PJTabelle.Cells(Header_Value + 2, col_counter + 3).value = ress_subheader(3)
            nlc_ppf_PJTabelle.Cells(Header_Value + 2, col_counter + 4).value = ress_subheader(4)
            
            nlc_ppf_PJTabelle.Cells(Header_Value + 1, col_counter).value = Class_Functions.DB.Recordset(2)!name
                
            col_counter = col_counter + resscost_colCount
            Class_Functions.DB.Recordset(2).movenext
        Wend
        
        nlc_ppf_PJTabelle.Cells(Header_Value, rescost_startcol).value = SQL_Abfragen.Get_Language_Value("resources")
        
        Call nlc_functions.format_rescost_header(rescost_startcol, col_counter - 5 + 4, resscost_colCount)
    End If
    
    If kat = True Then
        GoTo next_kat
    End If
        
    GoTo endinsert
    
costarten:
    If cost = True Then
        'Kosten einf|fffd|gen
        rescost_startcol = col_counter
        
        'Ressourcen einf|fffd|gen
        While Not Class_Functions.DB.Recordset(3).EOF
            Call nlc_functions.insert_pjtable_col(col_counter, True)
            Call nlc_functions.insert_pjtable_col(col_counter + 1, True)
            Call nlc_functions.insert_pjtable_col(col_counter + 2, True)
            Call nlc_functions.insert_pjtable_col(col_counter + 3, True)
            Call nlc_functions.insert_pjtable_col(col_counter + 4, True)
            
            'DB Tabellenname
            nlc_ppf_PJTabelle.Cells(DB_row, col_counter).value = "DB_Kosten"
            nlc_ppf_PJTabelle.Cells(DB_row, col_counter + 1).value = "DB_Kosten"
            nlc_ppf_PJTabelle.Cells(DB_row, col_counter + 2).value = "DB_Kosten"
            nlc_ppf_PJTabelle.Cells(DB_row, col_counter + 3).value = "DB_Kosten"
            nlc_ppf_PJTabelle.Cells(DB_row, col_counter + 4).value = "DB_Kosten"
            
            'FK Ressourcenarten
            nlc_ppf_PJTabelle.Cells(FK_row, col_counter).value = "FK_Kostenarten"
            nlc_ppf_PJTabelle.Cells(FK_row, col_counter + 1).value = "FK_Kostenarten"
            nlc_ppf_PJTabelle.Cells(FK_row, col_counter + 2).value = "FK_Kostenarten"
            nlc_ppf_PJTabelle.Cells(FK_row, col_counter + 3).value = "FK_Kostenarten"
            nlc_ppf_PJTabelle.Cells(FK_row, col_counter + 4).value = "FK_Kostenarten"
            
            'ID
            nlc_ppf_PJTabelle.Cells(ID_row, col_counter).value = Class_Functions.DB.Recordset(3)!FK_Kostenarten
            nlc_ppf_PJTabelle.Cells(ID_row, col_counter + 1).value = Class_Functions.DB.Recordset(3)!FK_Kostenarten
            nlc_ppf_PJTabelle.Cells(ID_row, col_counter + 2).value = Class_Functions.DB.Recordset(3)!FK_Kostenarten
            nlc_ppf_PJTabelle.Cells(ID_row, col_counter + 3).value = Class_Functions.DB.Recordset(3)!FK_Kostenarten
            nlc_ppf_PJTabelle.Cells(ID_row, col_counter + 4).value = Class_Functions.DB.Recordset(3)!FK_Kostenarten
            
            'Basis, Aktuell, Ist, Rest, Abweichung
            nlc_ppf_PJTabelle.Cells(Value_row, col_counter).value = "Basis"
            nlc_ppf_PJTabelle.Cells(Value_row, col_counter + 1).value = "Aktuell"
            nlc_ppf_PJTabelle.Cells(Value_row, col_counter + 2).value = "Ist"
            nlc_ppf_PJTabelle.Cells(Value_row, col_counter + 3).value = "Rest"
            nlc_ppf_PJTabelle.Cells(Value_row, col_counter + 4).value = "Abweichung"
            
            'Subheader
            nlc_ppf_PJTabelle.Cells(Header_Value + 2, col_counter).value = cost_subheader(0)
            nlc_ppf_PJTabelle.Cells(Header_Value + 2, col_counter + 1).value = cost_subheader(1)
            nlc_ppf_PJTabelle.Cells(Header_Value + 2, col_counter + 2).value = cost_subheader(2)
            nlc_ppf_PJTabelle.Cells(Header_Value + 2, col_counter + 3).value = cost_subheader(3)
            nlc_ppf_PJTabelle.Cells(Header_Value + 2, col_counter + 4).value = cost_subheader(4)
            
            
            nlc_ppf_PJTabelle.Cells(Header_Value + 1, col_counter).value = Class_Functions.DB.Recordset(3)!name
                
            col_counter = col_counter + resscost_colCount
            Class_Functions.DB.Recordset(3).movenext
        Wend
        
        nlc_ppf_PJTabelle.Cells(Header_Value, rescost_startcol).value = SQL_Abfragen.Get_Language_Value("costs")
        
        Call nlc_functions.format_rescost_header(rescost_startcol, col_counter - 5 + 4, resscost_colCount)
    End If
    
    If kat = True Then
        GoTo next_kat
    End If
    
endinsert:
    'Spaltenbreite anpassen
    col_counter = 4
    
    While nlc_ppf_PJTabelle.Cells(DB_row, col_counter).value <> ""
        If nlc_ppf_PJTabelle.Cells(ColWidth_row, col_counter).value <> "" Then
            nlc_ppf_PJTabelle.columns(col_counter).ColumnWidth = nlc_ppf_PJTabelle.Cells(ColWidth_row, col_counter).value
        End If
        col_counter = col_counter + 1
    Wend

    'Recordsets wieder schlie|fffd|en
    Class_Functions.DB.Delete_RecordsetItem (1)
    Class_Functions.DB.Delete_RecordsetItem (2)
    Class_Functions.DB.Delete_RecordsetItem (3)
End Function

Public Sub getRessCostEinheit()
    statement = "SELECT " & _
                    "RessLang.deutsch AS RessLang, " & _
                    "CostLang.deutsch AS CostLang " & _
                "FROM " & _
                    "((((DB_PPF_Settings AS Settings LEFT JOIN " & _
                    "DB_Einheit As RessEinheit ON RessEinheit.ID = Settings.FK_Einheit_Ress) LEFT JOIN " & _
                    "DB_Language AS RessLang ON RessLang.Term = RessEinheit.FK_Language_Name) LEFT JOIN " & _
                    "DB_Einheit As CostEinheit ON CostEinheit.ID = Settings.FK_Einheit_Cost) LEFT JOIN " & _
                    "DB_Language AS CostLang ON CostLang.Term = CostEinheit.FK_Language_Name) " & _
                "WHERE " & _
                    "Settings.ID = 1"
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            nlc_PJTabelle.RessEinheit = Class_Functions.DB.Recordset!RessLang
            nlc_PJTabelle.CostEinheit = Class_Functions.DB.Recordset!CostLang
        End If
    End If
End Sub

Public Function getKatEinheit(KatID As String) As String
    statement = "SELECT " & _
                    "Lang.deutsch AS Einheit " & _
                "FROM " & _
                    "((DB_Kategorie AS Kat LEFT JOIN " & _
                    "DB_Einheit As Einheit ON Einheit.ID = Kat.FK_Einheit) LEFT JOIN " & _
                    "DB_Language AS Lang ON Lang.Term = Einheit.FK_Language_Name) " & _
                "WHERE " & _
                    "Kat.ID = " & KatID
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            getKatEinheit = N2hk(Class_Functions.DB.Recordset!einheit)
        End If
    End If
End Function

Public Function GetPjtFormation(col As Integer, FormatRow As Integer)
    Dim StandardNumber As String
    Dim Kommacounter As Integer
    
    StandardNumber = "#,##0"
    
    If nlc_ppf_PJTabelle.Cells(8, col).value = "FK_Ressourcenarten" Then
        nlc_ppf_PJTabelle.Cells(FormatRow, col).NumberFormat = "#,##0.0 " & nlc_PJTabelle.RessEinheit
    ElseIf nlc_ppf_PJTabelle.Cells(8, col).value = "FK_Kostenarten" Then
        nlc_ppf_PJTabelle.Cells(FormatRow, col).NumberFormat = "#,##0.0 " & nlc_PJTabelle.CostEinheit
    Else
        statement = "SELECT " & _
                        "Kat.kommastellen AS Kommastellen, Kat.FK_Art AS Art, Name.deutsch As Einheit " & _
                    "FROM " & _
                        "(([DB_Language] AS Name RIGHT OUTER JOIN " & _
                        "[DB_Einheit] AS Einheit ON Name.Term = Einheit.FK_Language_Name) RIGHT OUTER JOIN " & _
                        "[DB_Kategorie] AS Kat ON Einheit.ID = Kat.FK_Einheit) " & _
                    "where " & _
                        "(Kat.ID = " & nlc_ppf_PJTabelle.Cells(10, col).value & ")"
        
        If Class_Functions.DB.Select_Statement(statement) = True Then
            If Not Class_Functions.DB.Recordset.EOF Then
                If Class_Functions.DB.Recordset!art = 5 Then
                    If VBA.IsNumeric(Class_Functions.DB.Recordset!kommastellen) Then
                        If Class_Functions.DB.Recordset!kommastellen > 0 Then
                            StandardNumber = StandardNumber & "."
                            
                            For Kommacounter = 1 To Class_Functions.DB.Recordset!kommastellen Step 1
                                StandardNumber = StandardNumber & "0"
                            Next Kommacounter
                        End If
                        
                        StandardNumber = StandardNumber & " " & Class_Functions.DB.Recordset!einheit
                    End If
                    
                    nlc_ppf_PJTabelle.Cells(FormatRow, col).NumberFormat = StandardNumber
                    nlc_ppf_PJTabelle.Cells(FormatRow - 4, col).value = "Wert_Zahl"
                ElseIf Class_Functions.DB.Recordset!art = 4 Then
                    StandardNumber = "m/d/yyyy"
                    StandardNumber = StandardNumber
                    
                    nlc_ppf_PJTabelle.Cells(FormatRow, col).NumberFormat = StandardNumber
                    nlc_ppf_PJTabelle.Cells(FormatRow - 4, col).value = "Wert_Datum"
                End If
            End If
        End If
    End If
End Function


Public Function Get_Setting_Bar_Value(Template_ID As String, feld As String)
    statement = "SELECT " & _
                    feld & " AS Wert, " & _
                    "FK_Users " & _
                "FROM " & _
                    "[DB_Settings_BarChart] " & _
                "WHERE " & _
                    "ID=" & Template_ID
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            If feld = "Name" Then
                If VBA.IsNull(Class_Functions.DB.Recordset!FK_Users) Then
                    Get_Setting_Bar_Value = GlobalIdLeft & Class_Functions.DB.Recordset!wert & GlobalIdRight
                Else
                    Get_Setting_Bar_Value = Class_Functions.DB.Recordset!wert
                End If
            Else
                Get_Setting_Bar_Value = Class_Functions.DB.Recordset!wert
            End If
        End If
    End If
End Function

Public Function Get_Setting_Rhg_Value(Template_ID As String, feld As String)

    statement = "SELECT " & _
                    feld & " AS Wert, " & _
                    "FK_Users " & _
                "FROM " & _
                    "[DB_Settings_RessHisto] " & _
                "WHERE " & _
                    "ID=" & Template_ID
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            If feld = "Name" Then
                If VBA.IsNull(Class_Functions.DB.Recordset!FK_Users) Then
                    Get_Setting_Rhg_Value = GlobalIdLeft & Class_Functions.DB.Recordset!wert & GlobalIdRight
                Else
                    Get_Setting_Rhg_Value = Class_Functions.DB.Recordset!wert
                End If
            Else
                Get_Setting_Rhg_Value = Class_Functions.DB.Recordset!wert
            End If
        End If
    End If
End Function

Public Function Get_Setting_Chg_Value(Template_ID As String, feld As String)

    statement = "SELECT " & _
                    feld & " AS Wert, " & _
                    "FK_Users " & _
                "FROM " & _
                    "[DB_Settings_CostHisto] " & _
                "WHERE " & _
                    "ID=" & Template_ID
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            If feld = "Name" Then
                If VBA.IsNull(Class_Functions.DB.Recordset!FK_Users) Then
                    Get_Setting_Chg_Value = GlobalIdLeft & Class_Functions.DB.Recordset!wert & GlobalIdRight
                Else
                    Get_Setting_Chg_Value = Class_Functions.DB.Recordset!wert
                End If
            Else
                Get_Setting_Chg_Value = Class_Functions.DB.Recordset!wert
            End If
        End If
    End If
End Function

Public Function Get_Setting_Bar_Listbox(Template_ID As String, lb As Object, Tablename As String, FK_Table As String)
    Dim counter As Integer
    
    statement = "SELECT " & _
                    FK_Table & " AS Wert " & _
                "FROM " & _
                    "[" & Tablename & "] " & _
                "WHERE " & _
                    "FK_Settings_BarChart=" & Template_ID

    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            While Not Class_Functions.DB.Recordset.EOF
                For counter = 0 To lb.listCount - 1 Step 1
                    If lb.list(counter, 0) = VBA.CStr(Class_Functions.DB.Recordset!wert) Then
                        lb.Selected(counter) = True
                    End If
                Next counter
                
                Class_Functions.DB.Recordset.movenext
            Wend
        End If
    End If
End Function

Public Function Get_Setting_Rhg_Ressourcen(Template_ID As String, lb As Object)
    Dim counter As Integer
    
    statement = "SELECT " & _
                    "FK_Ressourcenarten AS Wert " & _
                "FROM " & _
                    "[DB_Settings_RessHisto_RA] " & _
                "WHERE " & _
                    "FK_Settings_RessHisto=" & Template_ID

    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            While Not Class_Functions.DB.Recordset.EOF
                For counter = 0 To lb.listCount - 1 Step 1
                    If lb.list(counter, 0) = VBA.CStr(Class_Functions.DB.Recordset!wert) Then
                        lb.Selected(counter) = True
                        Exit For
                    End If
                Next counter
                
                Class_Functions.DB.Recordset.movenext
            Wend
        End If
    End If
End Function

Public Function Get_User_PFType_List(Username As String, lb As Object)
    Dim counter As Integer
    
    statement = "SELECT " & _
                    "FK_KatDetail AS Wert " & _
                "FROM " & _
                    "[DB_User_PFType] " & _
                "WHERE " & _
                    "FK_Username='" & Username & "'"
    
    For counter = 0 To lb.listCount - 1 Step 1
            lb.Selected(counter) = False
    Next counter
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            While Not Class_Functions.DB.Recordset.EOF
                For counter = 0 To lb.listCount - 1 Step 1
                    If lb.list(counter, 0) = VBA.CStr(Class_Functions.DB.Recordset!wert) Then
                        lb.Selected(counter) = True
                    End If
                Next counter
                
                Class_Functions.DB.Recordset.movenext
            Wend
        End If
    End If
End Function

Public Function Get_User_PFType_DropDown(Username As String)
    Dim counter As Integer
    Dim row_first As Integer
    Dim row As Integer
    Dim col As Integer
    
    Username = VBA.LCase(Username)
    
    row_first = calc_master.Range("PF_Type").Cells.row
    row = row_first
    col = calc_master.Range("PF_Type").Cells.Column
    
    statement = "SELECT " & _
                    "Lang_Name." & calc_master.Range("aktuelle_sprache").value & " AS Name, " & _
                    "DKat.ID " & _
                "FROM " & _
                    "(([DB_Language] AS Lang_Name " & _
                    "RIGHT OUTER JOIN " & _
                        "[DB_Kategorie_Detail] AS DKat ON Lang_Name.Term = DKat.FK_Language_Name) " & _
                    "RIGHT OUTER JOIN " & _
                        "[DB_User_PFType] AS PFType ON (DKat.ID = PFType.FK_KatDetail AND DKat.active <> 0)) " & _
                "WHERE " & _
                    "(PFType.FK_Username = '" & Username & "') " & _
                "ORDER BY " & _
                    "DKat.OrderBy"
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            While Not Class_Functions.DB.Recordset.EOF
                If nlc_ppf_nav.Range("Portfoliotyp").value = calc_master.Cells(row, col).value Then
                    nlc_ppf_nav.Range("Portfoliotyp").value = Class_Functions.DB.Recordset!name
                End If
                
                calc_master.Cells(row, col).value = Class_Functions.DB.Recordset!name
                calc_master.Cells(row, col + 1).value = Class_Functions.DB.Recordset!ID
                
                row = row + 1
                Class_Functions.DB.Recordset.movenext
            Wend
            
            calc_master.Range("user_exist").value = "ja"
        Else
            calc_master.Range("user_exist").value = "nein"
        End If
    Else
        calc_master.Range("user_exist").value = "nein"
    End If
    
    row = row - 1
    
    If row > row_first Then
        ActiveWorkbook.Names.add name:="PF_Type", RefersToR1C1:=calc_master.Range(calc_master.Cells(row_first, col), calc_master.Cells(row, col + 1))
        ActiveWorkbook.Names.add name:="PF_TypeList", RefersToR1C1:=calc_master.Range(calc_master.Cells(row_first, col), calc_master.Cells(row, col))
    Else
        ActiveWorkbook.Names.add name:="PF_Type", RefersToR1C1:=calc_master.Range(calc_master.Cells(row_first, col), calc_master.Cells(row_first, col + 1))
        ActiveWorkbook.Names.add name:="PF_TypeList", RefersToR1C1:=calc_master.Range(calc_master.Cells(row_first, col), calc_master.Cells(row_first, col))
    End If
End Function

Public Function Get_pf_general_settings()
    statement = "SELECT " & _
                    "ID, " & _
                    "FK_Einheit_Ress AS Ress, " & _
                    "FK_Einheit_Cost AS Cost " & _
                "FROM " & _
                    "[DB_PPF_Settings] AS Settings " & _
                "WHERE " & _
                    "(Settings.FK_KatDetail_PFType IS NULL)"
                    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            calc_master.Range("PF_Settings_ID").value = Class_Functions.DB.Recordset!ID
            calc_master.Range("Ress_Einheit").value = Class_Functions.DB.Recordset!ress
            calc_master.Range("Cost_Einheit").value = Class_Functions.DB.Recordset!cost
        End If
    End If
End Function

Public Function Get_Setting_Pjt_Ressourcen(Template_ID As String, lb As Object)
    Dim counter As Integer
    
    statement = "SELECT " & _
                    "FK_Ressourcenarten AS Wert " & _
                "FROM " & _
                    "[DB_Settings_PjTable_RA] " & _
                "WHERE " & _
                    "FK_Settings_PjTable=" & Template_ID

    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            While Not Class_Functions.DB.Recordset.EOF
                For counter = 0 To lb.listCount - 1 Step 1
                    If lb.list(counter, 0) = VBA.CStr(Class_Functions.DB.Recordset!wert) Then
                        lb.Selected(counter) = True
                    End If
                Next counter
                
                Class_Functions.DB.Recordset.movenext
            Wend
        End If
    End If
End Function

Public Function Get_Setting_Pjt_Kosten(Template_ID As String, lb As Object)
    Dim counter As Integer
    
    statement = "SELECT " & _
                    "FK_Kostenarten AS Wert " & _
                "FROM " & _
                    "[DB_Settings_PjTable_KA] " & _
                "WHERE " & _
                    "FK_Settings_PjTable=" & Template_ID

    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            While Not Class_Functions.DB.Recordset.EOF
                For counter = 0 To lb.listCount - 1 Step 1
                    If lb.list(counter, 0) = VBA.CStr(Class_Functions.DB.Recordset!wert) Then
                        lb.Selected(counter) = True
                    End If
                Next counter
                
                Class_Functions.DB.Recordset.movenext
            Wend
        End If
    End If
End Function

Public Function Get_Setting_bar_LBValues(Template_ID As String, lb As Object, DB_Table As String, FK_Art As String)
    Dim counter As Integer
    
    statement = "SELECT " & _
                    FK_Art & " AS Wert " & _
                "FROM " & _
                    "[" & DB_Table & "] " & _
                "WHERE " & _
                    "FK_Settings_BarChart=" & Template_ID

    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            While Not Class_Functions.DB.Recordset.EOF
                For counter = 0 To lb.listCount - 1 Step 1
                    If lb.list(counter, 0) = VBA.CStr(Class_Functions.DB.Recordset!wert) Then
                        lb.Selected(counter) = True
                    End If
                Next counter
                
                Class_Functions.DB.Recordset.movenext
            Wend
        End If
    End If
End Function

Public Function Get_Setting_chg_Kosten(Template_ID As String, lb As Object)
    Dim counter As Integer
    
    statement = "SELECT " & _
                    "FK_Kostenarten AS Wert " & _
                "FROM " & _
                    "[DB_Settings_CostHisto_KA] " & _
                "WHERE " & _
                    "FK_Settings_CostHisto=" & Template_ID

    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            While Not Class_Functions.DB.Recordset.EOF
                For counter = 0 To lb.listCount - 1 Step 1
                    If lb.list(counter, 0) = VBA.CStr(Class_Functions.DB.Recordset!wert) Then
                        lb.Selected(counter) = True
                    End If
                Next counter
                
                Class_Functions.DB.Recordset.movenext
            Wend
        End If
    End If
End Function

Public Function Get_Kategorie(ProjektId As String)
    calc_frm_projects.Range("lb_kategorien").ClearContents
    
    Dim where As String
    Dim orderby As String
    
retry:
    If calc_master.Range("sortOrder").value = 1 Then
        orderby = "Kat.OrderBy,"
    End If
    
    If calc_master.Range("show_inactive_values") = "FALSE" Then
        where = "WHERE Kat.active <> 0 AND (Kat.ID <> 100 OR Kat.ID <> 101) AND Kat.ID in (SELECT FK_DB_Kategorie FROM DB_FieldVisibility WHERE FK_DB_Users = '" & calc_master.Range("WindowsLogin").value & "') "
    Else
        where = "WHERE (Kat.ID <> 100 OR Kat.ID <> 101) AND Kat.ID in (SELECT FK_DB_Kategorie FROM DB_FieldVisibility WHERE FK_DB_Users = '" & calc_master.Range("WindowsLogin").value & "') "
    End If
    
    statement = "SELECT " & _
                    "wert.ID, " & _
                    "Katname." & calc_master.Range("aktuelle_sprache").value & " AS Name, " & _
                    "wert.Wert, " & _
                    "KatDname." & calc_master.Range("aktuelle_sprache").value & " As KatDName, " & _
                    "wert.Wert_Zahl, " & _
                    "wert.Wert_Datum, " & _
                    "Artname." & calc_master.Range("aktuelle_sprache").value & " As Art, " & _
                    "Kat.Min_Value AS Min_Value, " & _
                    "Kat.Max_Value AS Max_Value, " & _
                    "Kat.Kommastellen AS Komma, " & _
                    "EinheitLang." & calc_master.Range("aktuelle_sprache").value & " As Einheit " & _
                "FROM " & _
                    "(((((((([DB_Art] AS Art LEFT JOIN " & _
                    "[DB_Language] As Artname ON Art.FK_Language_Description = Artname.Term) LEFT JOIN " & _
                    "[DB_Kategorie] AS Kat ON (Kat.FK_Art = Art.ID AND Kat.MainTab = 0 AND Kat.Gesperrt <> 'eu')) LEFT JOIN " & _
                    "[DB_Language] AS Katname ON Katname.Term = Kat.FK_Language_Name) LEFT JOIN " & _
                    "[DB_Kategoriewerte] AS wert ON (kat.ID = wert.FK_Kategorie AND wert.FK_Projekte = " & ProjektId & ")) LEFT JOIN " & _
                    "[DB_Kategorie_Detail] As KatDetail ON KatDetail.ID = wert.FK_Kategorie_Detail) LEFT JOIN " & _
                    "[DB_Language] AS KatDname ON KatDname.Term = KatDetail.FK_Language_Name) LEFT JOIN " & _
                    "[DB_Einheit] As Einheit ON Einheit.ID = Kat.FK_Einheit) LEFT JOIN " & _
                    "[DB_Language] AS EinheitLang ON EinheitLang.Term = Einheit.FK_Language_Name) " & _
                where & _
                "ORDER BY " & orderby & " Katname." & calc_master.Range("aktuelle_sprache").value
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            Dim i As Integer
            Dim rsRows As Integer
            
            rsRows = Class_Functions.DB.GetRecordCount(statement)
            i = rsRows + 4
            
            ReDim result(rsRows - 1, 7)
            Dim counter As Integer
            Dim wert As String
            
            While Not Class_Functions.DB.Recordset.EOF
                result(counter, 0) = N2hk(Class_Functions.DB.Recordset!ID)
                result(counter, 1) = N2hk(Class_Functions.DB.Recordset!name)
                
                If VBA.IsNull(Class_Functions.DB.Recordset!wert) Then
                    'Zahl und Datum checken
                    If Not VBA.IsNull(Class_Functions.DB.Recordset!Wert_Zahl) Then
                        result(counter, 2) = Class_Functions.DB.Recordset!Wert_Zahl
                    ElseIf Not VBA.IsNull(Class_Functions.DB.Recordset!Wert_Datum) Then
                        result(counter, 2) = VBA.Format(Class_Functions.DB.Recordset!Wert_Datum, "Short Date")
                    Else
                        If Class_Functions.DB.Recordset!art = "Number" Then
                            result(counter, 2) = "0"
                        Else
                            result(counter, 2) = ""
                        End If
                    End If
                Else
                    If Class_Functions.DB.Recordset!wert = "leer" Then 'Kat Detail Name
                        result(counter, 2) = Class_Functions.DB.Recordset!KatDName
                    Else
                        result(counter, 2) = Class_Functions.DB.Recordset!wert
                    End If

                End If

                result(counter, 3) = Class_Functions.DB.Recordset!art
                result(counter, 4) = N2hk(Class_Functions.DB.Recordset!Min_Value)
                result(counter, 5) = N2hk(Class_Functions.DB.Recordset!Max_Value)
                result(counter, 6) = N2hk(Class_Functions.DB.Recordset!komma)
                result(counter, 7) = N2hk(Class_Functions.DB.Recordset!einheit)
                
                counter = counter + 1
                Class_Functions.DB.Recordset.movenext
            Wend
            
            'calc_frm_projects.range("P4").CopyFromRecordset Class_Functions.DB.Recordset
            calc_frm_projects.Range(calc_frm_projects.Cells(calc_frm_projects.Range("lb_kategorien").row, calc_frm_projects.Range("lb_kategorien").Column), _
                                    calc_frm_projects.Cells(calc_frm_projects.Range("lb_kategorien").row + i - 5, calc_frm_projects.Range("lb_kategorien").Column + 7)) = _
                                    result
        Else
            Call frm_projects.btn_select_all_Click
            GoTo retry
        End If
    End If
    
    If i - 1 > 4 Then
        ActiveWorkbook.Names.add name:="lb_kategorien", RefersToR1C1:=calc_frm_projects.Range(calc_frm_projects.Cells(4, 16), calc_frm_projects.Cells(i - 1, 23))
    Else
        ActiveWorkbook.Names.add name:="lb_kategorien", RefersToR1C1:=calc_frm_projects.Range(calc_frm_projects.Cells(4, 16), calc_frm_projects.Cells(4, 23))
    End If
End Function

Public Function Get_KategorieDetails(Kategoriewert_deutsch As String, Optional cbb As ComboBox)
    calc_frm_projects.Range("lb_auspraegung").ClearContents
    
    'abfragen ob inactive oder nicht
    Dim where As String
    
    If calc_master.Range("show_inactive_values") = "FALSE" Then
        where = "AND [DB_Kategorie_Detail].active <> 0 "
    Else
        where = ""
    End If
    
    
    statement = "SELECT " & _
                    "[DB_Kategorie_Detail].ID, " & _
                    "DB_Language_1." & calc_master.Range("aktuelle_sprache").value & " AS Auspraegung " & _
                "FROM " & _
                    "((([DB_Language] AS DB_Language_1 RIGHT OUTER JOIN " & _
                    "[DB_Kategorie_Detail] ON DB_Language_1.Term = [DB_Kategorie_Detail].FK_Language_Name) RIGHT OUTER JOIN " & _
                    "[DB_Kategorie] ON [DB_Kategorie_Detail].FK_Kategorie = [DB_Kategorie].ID)  LEFT OUTER JOIN " & _
                    "[DB_Language] ON [DB_Kategorie].FK_Language_Name = [DB_Language].Term) " & _
                "WHERE " & _
                    "([DB_Language]." & calc_master.Range("aktuelle_sprache").value & " = '" & Kategoriewert_deutsch & "') " & where & _
                "ORDER BY " & _
                    "[DB_Kategorie_Detail].OrderBy"
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            Dim i As Integer
            
            i = 4
            If Not cbb Is Nothing Then
                cbb.clear
            End If
            
            While Not Class_Functions.DB.Recordset.EOF
                If Not cbb Is Nothing Then
                    cbb.addItem
                    cbb.list(cbb.listCount - 1, 0) = Class_Functions.DB.Recordset!ID
                    
                    If Kategoriewert_deutsch = "Projektfortschritt" Then
                        cbb.list(cbb.listCount - 1, 1) = Class_Functions.DB.Recordset!Auspraegung & " %"
                    Else
                        cbb.list(cbb.listCount - 1, 1) = Class_Functions.DB.Recordset!Auspraegung
                    End If
                Else
                    calc_frm_projects.Cells(i, 24).value = Class_Functions.DB.Recordset!ID
                    calc_frm_projects.Cells(i, 25).value = Class_Functions.DB.Recordset!Auspraegung
                End If
                Class_Functions.DB.Recordset.movenext
                i = i + 1
            Wend
        End If
    End If
    
    If i - 1 > 4 Then
        ActiveWorkbook.Names.add name:="lb_auspraegung", RefersToR1C1:=calc_frm_projects.Range(calc_frm_projects.Cells(4, 24), calc_frm_projects.Cells(i - 1, 25))
    Else
        ActiveWorkbook.Names.add name:="lb_auspraegung", RefersToR1C1:=calc_frm_projects.Range(calc_frm_projects.Cells(4, 24), calc_frm_projects.Cells(4, 25))
    End If
End Function

Public Function Get_KategorieDetailsByID(KategorieID As String, Optional cbb As ComboBox)
    calc_frm_projects.Range("lb_auspraegung").ClearContents
    
    'abfragen ob inactive oder nicht
    Dim where As String
    
    If calc_master.Range("show_inactive_values") = "FALSE" Then
        where = "AND [DB_Kategorie_Detail].active <> 0 "
    Else
        where = ""
    End If
    
    
    statement = "SELECT " & _
                    "[DB_Kategorie_Detail].ID, " & _
                    "DB_Language_1." & calc_master.Range("aktuelle_sprache").value & " AS Auspraegung " & _
                "FROM " & _
                    "((([DB_Language] AS DB_Language_1 RIGHT OUTER JOIN " & _
                    "[DB_Kategorie_Detail] ON DB_Language_1.Term = [DB_Kategorie_Detail].FK_Language_Name) RIGHT OUTER JOIN " & _
                    "[DB_Kategorie] ON [DB_Kategorie_Detail].FK_Kategorie = [DB_Kategorie].ID)  LEFT OUTER JOIN " & _
                    "[DB_Language] ON [DB_Kategorie].FK_Language_Name = [DB_Language].Term) " & _
                "WHERE " & _
                    "([DB_Kategorie_Detail].FK_Kategorie = " & KategorieID & ") " & where & _
                "ORDER BY " & _
                    "[DB_Kategorie_Detail].OrderBy"
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            Dim i As Integer
            
            i = 4
            If Not cbb Is Nothing Then
                cbb.clear
            End If
            
            While Not Class_Functions.DB.Recordset.EOF
                If Not cbb Is Nothing Then
                    cbb.addItem
                    cbb.list(cbb.listCount - 1, 0) = Class_Functions.DB.Recordset!ID
                    
                    If KategorieID = "9" Then
                        cbb.list(cbb.listCount - 1, 1) = Class_Functions.DB.Recordset!Auspraegung & " %"
                    Else
                        cbb.list(cbb.listCount - 1, 1) = Class_Functions.DB.Recordset!Auspraegung
                    End If
                Else
                    calc_frm_projects.Cells(i, 24).value = Class_Functions.DB.Recordset!ID
                    calc_frm_projects.Cells(i, 25).value = Class_Functions.DB.Recordset!Auspraegung
                End If
                Class_Functions.DB.Recordset.movenext
                i = i + 1
            Wend
        End If
    End If
    
    If i - 1 > 4 Then
        ActiveWorkbook.Names.add name:="lb_auspraegung", RefersToR1C1:=calc_frm_projects.Range(calc_frm_projects.Cells(4, 24), calc_frm_projects.Cells(i - 1, 25))
    Else
        ActiveWorkbook.Names.add name:="lb_auspraegung", RefersToR1C1:=calc_frm_projects.Range(calc_frm_projects.Cells(4, 24), calc_frm_projects.Cells(4, 25))
    End If
End Function


Public Function Get_Kosten(ProjektId As String)
    calc_frm_projects.Range("lb_kosten").ClearContents
    
    Dim where As String
    
    If calc_master.Range("show_inactive_values") = "FALSE" Then
        where = "WHERE Kostenarten.active <> 0 AND"
    Else
        where = "WHERE "
    End If
    
    statement = "SELECT " & _
                    "Kosten.ID, " & _
                    "[DB_Language]." & calc_master.Range("aktuelle_sprache").value & " AS Name, " & _
                    "Kosten.Basis, " & _
                    "Kosten.Ist, " & _
                    "Kosten.aktuell, " & _
                    "Kostenarten.Kostenart " & _
                "FROM " & _
                    "(([DB_Language] " & _
                    "INNER JOIN " & _
                        "[DB_Kostenarten] AS Kostenarten ON ([DB_Language].Term = Kostenarten.FK_Language_Name AND [DB_Language]." & calc_master.Range("aktuelle_sprache").value & " <> 'NV')) " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Kosten] AS Kosten ON (Kostenarten.ID = Kosten.FK_Kostenarten AND Kosten.FK_Projekte = " & ProjektId & ")) " & _
                where & " (NOT (Kostenarten.Kostenart <> 0)) OR " & _
                      "(Kostenarten.active <> 0) AND (([DB_Language]." & calc_master.Range("aktuelle_sprache").value & " <> '-'))"
                
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            Dim i As Integer
            Dim rsRows As Integer
            
            rsRows = Class_Functions.DB.GetRecordCount(statement)
            i = rsRows + 4
            
            ReDim result(5, rsRows - 1)
            Dim counter As Integer
            Dim wert As String
            
            While Not Class_Functions.DB.Recordset.EOF
                result(0, counter) = N2hk(Class_Functions.DB.Recordset!ID)
                result(1, counter) = N2hk(Class_Functions.DB.Recordset!name)
                result(2, counter) = Nz(Class_Functions.DB.Recordset!basis)
                result(3, counter) = N2hk(Class_Functions.DB.Recordset!ist)
                result(4, counter) = N2hk(Class_Functions.DB.Recordset!aktuell)
                
                If Class_Functions.DB.Recordset!Kostenart Then
                    result(5, counter) = "auto"
                Else
                    result(5, counter) = "manuell"
                End If
                
                counter = counter + 1
                Class_Functions.DB.Recordset.movenext
            Wend
            
            'calc_frm_projects.range("P4").CopyFromRecordset Class_Functions.DB.Recordset
            calc_frm_projects.Range(calc_frm_projects.Cells(calc_frm_projects.Range("lb_kosten").row, calc_frm_projects.Range("lb_kosten").Column), _
                                    calc_frm_projects.Cells(calc_frm_projects.Range("lb_kosten").row + i - 5, calc_frm_projects.Range("lb_kosten").Column + 5)) = _
                                    Application.Transpose(result)
        End If
    End If
    
    If i - 1 > 4 Then
        ActiveWorkbook.Names.add name:="lb_kosten", RefersToR1C1:=calc_frm_projects.Range(calc_frm_projects.Cells(4, 9), calc_frm_projects.Cells(i - 1, 14))
    Else
        ActiveWorkbook.Names.add name:="lb_kosten", RefersToR1C1:=calc_frm_projects.Range(calc_frm_projects.Cells(4, 9), calc_frm_projects.Cells(4, 14))
    End If
End Function

Public Function Get_FieldVisibility(Username As String, lb As Object)
    Dim lbCounter As Integer
    
retry:
    statement = "SELECT " & _
                    "FK_DB_Kategorie AS ID " & _
                "FROM " & _
                    "DB_FieldVisibility " & _
                "WHERE " & _
                    "FK_DB_Users = '" & Username & "'"
    
    For lbCounter = 0 To lb.listCount - 1 Step 1
            lb.Selected(lbCounter) = False
    Next lbCounter
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Class_Functions.DB.Recordset.EOF Then
            Call frm_fieldVisibility.btn_select_all_Click
            GoTo retry
        End If
        
        While Not Class_Functions.DB.Recordset.EOF
            For lbCounter = 0 To lb.listCount - 1 Step 1
                If lb.list(lbCounter, 0) = VBA.CStr(Class_Functions.DB.Recordset!ID) Then
                    lb.Selected(lbCounter) = True
                    Exit For
                End If
            Next lbCounter
            
            Class_Functions.DB.Recordset.movenext
        Wend
    End If
End Function

Public Function Get_UserRights(PJID As String, lb As Object)
    Dim lbCounter As Integer
    
'retry:
    statement = "SELECT " & _
                    "FK_Users AS Users " & _
                "FROM " & _
                    "DB_Projekt_User_Zuordnung " & _
                "WHERE " & _
                    "FK_Projekte = " & PJID & ""
    
    For lbCounter = 0 To lb.listCount - 1 Step 1
            lb.Selected(lbCounter) = False
    Next lbCounter
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        'alle User w|fffd|hlen macht hier keinen sinn, evtl. den eigenen...
'        If Class_Functions.DB.Recordset.EOF Then
'            Call frm_projects.btn_select_all_Click
'            GoTo retry
'        End If
        
        While Not Class_Functions.DB.Recordset.EOF
            For lbCounter = 0 To lb.listCount - 1 Step 1
                If VBA.LCase(lb.list(lbCounter, 0)) = VBA.LCase(VBA.CStr(Class_Functions.DB.Recordset!Users)) Then
                    lb.Selected(lbCounter) = True
                    Exit For
                End If
            Next lbCounter
            
            Class_Functions.DB.Recordset.movenext
        Wend
    End If
End Function

Public Function Get_Allgemein(ProjektId As String)
    'Felder leeren
    frm_projects.tb_A_EDatum.text = ""
    frm_projects.tb_A_SDatum.text = ""
    frm_projects.cbb_status.listindex = -1
    frm_projects.tb_pag.text = ""
    frm_projects.tb_pl.text = ""
    frm_projects.tb_fortschritt.text = ""
    frm_projects.lbl_ppf_date.Caption = ""
    
    Dim tempValue As String
    
    'Laden der Kategoriefelder
    statement = "SELECT " & _
                    "KatWert.Wert, " & _
                    "Katwert.FK_Kategorie_Detail, " & _
                    "KatWert.Wert_Zahl, " & _
                    "KatWert.Wert_Datum, " & _
                    "Kat.ID " & _
                "FROM " & _
                    "(([DB_Kategorie_Detail] As KatDetail RIGHT OUTER JOIN " & _
                    "[DB_Kategoriewerte] AS KatWert ON KatDetail.ID = KatWert.FK_Kategorie_Detail) LEFT  JOIN " & _
                    "[DB_Kategorie] AS Kat ON KatWert.FK_Kategorie = Kat.ID) " & _
                "WHERE " & _
                    "(Kat.ID = 3 OR " & _
                    "Kat.ID = 6 OR " & _
                    "Kat.ID = 7 OR " & _
                    "Kat.ID = 1 OR " & _
                    "Kat.ID = 2 OR " & _
                    "Kat.ID = 9 OR " & _
                    "Kat.ID = 183) AND (KatWert.FK_Projekte = " & ProjektId & ")"
                    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        While Not Class_Functions.DB.Recordset.EOF
            Select Case Class_Functions.DB.Recordset!ID
            Case 1
                frm_projects.tb_A_EDatum.text = N2hk(Class_Functions.DB.Recordset!Wert_Datum)
                
                If frm_projects.tb_A_EDatum.text <> "" And frm_projects.tb_A_EDatum.text <> "1900-01-01" Then
                    frm_projects.tb_A_EDatum.text = VBA.Format(frm_projects.tb_A_EDatum.text, "Short Date")
                Else
                    frm_projects.tb_A_EDatum.text = ""
                End If
            Case 2
                frm_projects.tb_A_SDatum.text = N2hk(Class_Functions.DB.Recordset!Wert_Datum)
                
                If frm_projects.tb_A_SDatum.text <> "" And frm_projects.tb_A_SDatum.text <> "1900-01-01" Then
                    frm_projects.tb_A_SDatum.text = VBA.Format(frm_projects.tb_A_SDatum.text, "Short Date")
                Else
                    frm_projects.tb_A_SDatum.text = ""
                End If
            Case 3
                If Class_Functions.DB.Recordset!wert = "leer" Then
                    If Not VBA.IsNull(Class_Functions.DB.Recordset!FK_Kategorie_Detail) Then
                        frm_projects.cbb_status.value = Class_Functions.DB.Recordset!FK_Kategorie_Detail
                    End If
                Else
                    frm_projects.cbb_status.text = Class_Functions.DB.Recordset!wert
                End If
            Case 6
                frm_projects.tb_pag.text = N2hk(Class_Functions.DB.Recordset!wert)
            Case 7
                frm_projects.tb_pl.text = N2hk(Class_Functions.DB.Recordset!wert)
            Case 9
                tempValue = Nz(Class_Functions.DB.Recordset!Wert_Zahl)
                
                If tempValue <> "" Then
                    frm_projects.tb_fortschritt.text = VBA.Round(VBA.CDbl(VBA.Replace(tempValue, ".", ",")) * 100, 2)
                Else
                    frm_projects.tb_fortschritt.text = "0"
                End If
            Case 183
                frm_projects.lbl_ppf_date.Caption = N2hk(Class_Functions.DB.Recordset!Wert_Datum)
                
                If frm_projects.lbl_ppf_date.Caption <> "" Then
                    frm_projects.lbl_ppf_date.Caption = VBA.Format(frm_projects.lbl_ppf_date.Caption, "Short Date")
                End If
            End Select

            Class_Functions.DB.Recordset.movenext
        Wend
    End If
End Function

Public Function Get_Meilensteine(ProjektId As String)
    calc_frm_projects.Range("lb_mst").ClearContents
    
    Dim where As String
    
    If calc_master.Range("show_inactive_values") = "FALSE" Then
        where = " AND MST.active <> 0 "
    Else
        where = " "
    End If
    
    statement = "SELECT " & _
                      "MST.ID, " & _
                      "MST.Name, " & _
                      "MST.Basisdatum, " & _
                      "MST.Istdatum, " & _
                      "MST.Aktuelldatum, " & _
                      "MST.FK_Projekte " & _
                "FROM " & _
                      "[DB_Meilensteine] AS MST " & _
                "WHERE " & _
                      "MST.FK_Projekte = " & ProjektId & where & _
                "Order BY " & _
                      "MST.Aktuelldatum, MST.Basisdatum, MST.Name "

    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            Dim i As Integer
            
            i = 4
            
            While Not Class_Functions.DB.Recordset.EOF
                calc_frm_projects.Cells(i, 27).value = Class_Functions.DB.Recordset!ID
                calc_frm_projects.Cells(i, 28).value = Class_Functions.DB.Recordset!name
                
                If Class_Functions.DB.Recordset!Basisdatum <> "NULL" Then
                    calc_frm_projects.Cells(i, 29).value = VBA.Format(Class_Functions.DB.Recordset!Basisdatum, "Short Date")
                End If
                If Class_Functions.DB.Recordset!Istdatum <> "NULL" Then
                    calc_frm_projects.Cells(i, 30).value = VBA.Format(Class_Functions.DB.Recordset!Istdatum, "Short Date")
                End If
                If Class_Functions.DB.Recordset!Aktuelldatum <> "NULL" Then
                    calc_frm_projects.Cells(i, 31).value = VBA.Format(Class_Functions.DB.Recordset!Aktuelldatum, "Short Date")
                End If
                Class_Functions.DB.Recordset.movenext
                i = i + 1
            Wend
        End If
    End If
    If i - 1 > 4 Then
        ActiveWorkbook.Names.add name:="lb_mst", RefersToR1C1:=calc_frm_projects.Range(calc_frm_projects.Cells(4, 27), calc_frm_projects.Cells(i - 1, 31))
    Else
        ActiveWorkbook.Names.add name:="lb_mst", RefersToR1C1:=calc_frm_projects.Range(calc_frm_projects.Cells(4, 27), calc_frm_projects.Cells(4, 31))
    End If
End Function

Public Function Get_MeilensteinDates(ProjektId As String)
    Dim where As String
    Dim counter As Integer
    
    If calc_master.Range("show_inactive_values") = "FALSE" Then
        where = " AND MST.active <> 0 "
    Else
        where = " "
    End If
   ' PV_LetzterSB
    'TODO: Statt VBA.Date sollte das Feld Statusdatum verwendet werden, damit die Meilensteine auch zur Auswahl passen
    'n|fffd|chster 4 Meilenstein
    statement = "SELECT " & _
                    "MST.Basisdatum, MST.Aktuelldatum, MST.name " & _
                "FROM " & _
                    "[DB_Meilensteine] AS MST " & _
                "WHERE " & _
                    "(MST.FK_Projekte = " & ProjektId & ") AND (MST.Aktuelldatum >= " & Class_Functions.DB.Parse2Date(nlc_ppf_viewer.Range("PV_Statusdatum")) & ") AND Active <> 0 " & _
                "ORDER BY " & _
                    "MST.Aktuelldatum"
    counter = 1
    If Class_Functions.DB.Select_Statement(statement) = True Then
        Do While Not Class_Functions.DB.Recordset.EOF
            If counter = 5 Then Exit Do
            
            If Not VBA.IsNull(Class_Functions.DB.Recordset!Basisdatum) Then
                nlc_ppf_viewer.Range("PV_MST_Akt_Basis_" & counter) = VBA.Format(Class_Functions.DB.Recordset!Basisdatum, "Short Date")
            End If
            
            If Not VBA.IsNull(Class_Functions.DB.Recordset!Aktuelldatum) Then
                nlc_ppf_viewer.Range("PV_MST_Akt_Aktuell_" & counter) = VBA.Format(Class_Functions.DB.Recordset!Aktuelldatum, "Short Date")
            End If
            
            If Not VBA.IsNull(Class_Functions.DB.Recordset!name) Then
                nlc_ppf_viewer.Range("PV_MST_Name_" & counter) = Class_Functions.DB.Recordset!name
            End If
            
            counter = counter + 1
            Class_Functions.DB.Recordset.movenext
        Loop
    End If
    
    'letzte 2 Meilenstein
    statement = "SELECT " & _
                    "MST.Basisdatum, MST.Aktuelldatum, MST.Name " & _
                "FROM " & _
                    "[DB_Meilensteine] AS MST " & _
                "WHERE " & _
                    "(MST.FK_Projekte = " & ProjektId & ") AND (MST.Aktuelldatum <= " & Class_Functions.DB.Parse2Date(nlc_ppf_viewer.Range("PV_Statusdatum")) & ") AND Active <> 0 " & _
                "ORDER BY " & _
                    "MST.Aktuelldatum DESC"
    
    counter = 1
    If Class_Functions.DB.Select_Statement(statement) = True Then
        Do While Not Class_Functions.DB.Recordset.EOF
            If counter = 3 Then Exit Do
            
            If Not VBA.IsNull(Class_Functions.DB.Recordset!Basisdatum) Then
                nlc_ppf_viewer.Range("PV_MST_Last_Basis_" & counter) = VBA.Format(Class_Functions.DB.Recordset!Basisdatum, "Short Date")
            End If
            
            If Not VBA.IsNull(Class_Functions.DB.Recordset!Aktuelldatum) Then
                nlc_ppf_viewer.Range("PV_MST_Last_Aktuell_" & counter) = VBA.Format(Class_Functions.DB.Recordset!Aktuelldatum, "Short Date")
            End If
            
            If Not VBA.IsNull(Class_Functions.DB.Recordset!name) Then
                nlc_ppf_viewer.Range("PV_MST_Name_0" & counter) = Class_Functions.DB.Recordset!name
            End If
            
            counter = counter + 1
            Class_Functions.DB.Recordset.movenext
        Loop
    End If
End Function
Public Function Get_ResCostValues(ProjektId As String)
    Dim where As String
    
    If calc_master.Range("show_inactive_values") = "FALSE" Then
        where = " AND ResArt.active <> 0 "
    Else
        where = " "
    End If
    
    nlc_ppf_viewer.Range("PV_RessBasis") = ""
    nlc_ppf_viewer.Range("PV_RessAktuell") = ""
    nlc_ppf_viewer.Range("PV_RessIst") = ""
    
    'Ressourcen
    statement = "SELECT " & _
                    "SUM(Res.Basis) AS Basis, " & _
                    "SUM(Res.Ist) AS Ist, " & _
                    "SUM(Res.Aktuell) AS Aktuell " & _
                "FROM " & _
                    "[DB_Ressourcen] AS Res " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Ressourcenarten] AS ResArt ON Res.FK_Ressourcenarten = ResArt.ID " & _
                "WHERE " & _
                    "(Res.FK_Projekte = " & ProjektId & ")" & where

    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            If Not VBA.IsNull(Class_Functions.DB.Recordset!basis) Then
                nlc_ppf_viewer.Range("PV_RessBasis") = VBA.CDec(Class_Functions.DB.Recordset!basis)
            End If
            
            If Not VBA.IsNull(Class_Functions.DB.Recordset!aktuell) Then
                nlc_ppf_viewer.Range("PV_RessAktuell") = VBA.CDec(Class_Functions.DB.Recordset!aktuell)
            End If
            
            If Not VBA.IsNull(Class_Functions.DB.Recordset!ist) Then
                nlc_ppf_viewer.Range("PV_RessIst") = VBA.CDec(Class_Functions.DB.Recordset!ist)
            End If
        End If
    End If
    
    'Kosten
    nlc_ppf_viewer.Range("PV_PCostBasis") = ""
    nlc_ppf_viewer.Range("PV_PCostIst") = ""
    nlc_ppf_viewer.Range("PV_PCostAktuell") = ""
    nlc_ppf_viewer.Range("PV_WCostBasis") = ""
    nlc_ppf_viewer.Range("PV_WCostIst") = ""
    nlc_ppf_viewer.Range("PV_WCostAktuell") = ""
    
    If calc_master.Range("show_inactive_values") = "FALSE" Then
        where = " AND CostArt.active <> 0 "
    Else
        where = " "
    End If
    
    'Personal
    statement = "SELECT " & _
                    "SUM(Cost.Basis) AS Basis, " & _
                    "SUM(Cost.Ist) AS Ist, " & _
                    "SUM(Cost.Aktuell) AS Aktuell " & _
                "FROM " & _
                    "[DB_Kosten] AS Cost " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Kostenarten] AS CostArt ON Cost.FK_Kostenarten = CostArt.ID " & _
                "WHERE " & _
                    "(CostArt.Kostenart <> 0 AND Cost.FK_Projekte = " & ProjektId & ")" & where

    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            If Not VBA.IsNull(Class_Functions.DB.Recordset!basis) Then
                nlc_ppf_viewer.Range("PV_PCostBasis") = VBA.CDec(Class_Functions.DB.Recordset!basis)
            End If
            
            If Not VBA.IsNull(Class_Functions.DB.Recordset!aktuell) Then
                nlc_ppf_viewer.Range("PV_PCostAktuell") = VBA.CDec(Class_Functions.DB.Recordset!aktuell)
            End If
            
            If Not VBA.IsNull(Class_Functions.DB.Recordset!ist) Then
                nlc_ppf_viewer.Range("PV_PCostIst") = VBA.CDec(Class_Functions.DB.Recordset!ist)
            End If
        End If
    End If
    
    'Weitere
    statement = "SELECT " & _
                    "SUM(Cost.Basis) AS Basis, " & _
                    "SUM(Cost.Ist) AS Ist, " & _
                    "SUM(Cost.Aktuell) AS Aktuell " & _
                "FROM " & _
                    "[DB_Kosten] AS Cost " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Kostenarten] AS CostArt ON Cost.FK_Kostenarten = CostArt.ID " & _
                "WHERE " & _
                    "(CostArt.Kostenart = 0 AND Cost.FK_Projekte = " & ProjektId & ")" & where

    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            If Not VBA.IsNull(Class_Functions.DB.Recordset!basis) Then
                nlc_ppf_viewer.Range("PV_WCostBasis") = VBA.CDec(Class_Functions.DB.Recordset!basis)
            End If
            
            If Not VBA.IsNull(Class_Functions.DB.Recordset!aktuell) Then
                nlc_ppf_viewer.Range("PV_WCostAktuell") = VBA.CDec(Class_Functions.DB.Recordset!aktuell)
            End If
            
            If Not VBA.IsNull(Class_Functions.DB.Recordset!ist) Then
                nlc_ppf_viewer.Range("PV_WCostIst") = VBA.CDec(Class_Functions.DB.Recordset!ist)
            End If
        End If
    End If
End Function

Public Function Get_Projektwert(projektnummer As String, Feldname As String) As String
    If Feldname = "ID" Then
        statement = "SELECT " & Feldname & " AS Wert " & _
                    "FROM [DB_Projekte] " & _
                    "WHERE Projektcode = '" & projektnummer & "'"
    Else
        statement = "SELECT " & Feldname & " AS Wert " & _
                    "FROM [DB_Projekte] " & _
                    "WHERE ID = " & projektnummer
    End If
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            If IsNull(Class_Functions.DB.Recordset(0)!wert) Then
                Get_Projektwert = ""
            Else
                Get_Projektwert = Class_Functions.DB.Recordset(0)!wert
            End If
        Else
            Get_Projektwert = ""
        End If
    Else
        Get_Projektwert = ""
    End If
End Function

Public Function Get_FieldVisibilityList() As Variant
    Dim where As String
    Dim orderby As String
    Dim katItems() As String
    
    
 '   SELECT [DB_Kategorie].ID, DB_Language.deutsch AS Name FROM [DB_Kategorie]  LEFT JOIN [DB_Language]  ON DB_Language.Term = [DB_Kategorie].FK_Language_Name
'WHERE [DB_Kategorie].active <> 0 AND ([DB_Kategorie].ID <> 100 OR [DB_Kategorie].ID <> 101) AND [DB_Kategorie].MainTab = 0 AND [DB_Kategorie].Gesperrt <> 'eu' ORDER BY DB_Kategorie.OrderBy, DB_Language.deutsch
    
    
    If calc_master.Range("sortOrder").value = 1 Then
        orderby = "DB_Kategorie.OrderBy,"
    End If
    
    If calc_master.Range("show_inactive_values") = "FALSE" Then
        where = "WHERE DB_Kategorie.active <> 0 AND (DB_Kategorie.ID <> 100 OR DB_Kategorie.ID <> 101) AND DB_Kategorie.MainTab = 0 AND DB_Kategorie.Gesperrt <> 'eu' "
    Else
        where = "WHERE (DB_Kategorie.ID <> 100 OR DB_Kategorie.ID <> 101) AND DB_Kategorie.MainTab = 0 AND DB_Kategorie.Gesperrt <> 'eu' "
    End If
    
    statement = "SELECT " & _
                    "DB_Kategorie.ID, " & _
                    "DB_Language." & calc_master.Range("aktuelle_sprache").value & " AS Name " & _
                "FROM " & _
                    "[DB_Kategorie] LEFT JOIN " & _
                    "[DB_Language] ON DB_Language.Term = DB_Kategorie.FK_Language_Name " & _
                where & _
                "ORDER BY " & orderby & " DB_Language." & calc_master.Range("aktuelle_sprache").value
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            Dim i As Integer
            
            i = 0
            
            While Not Class_Functions.DB.Recordset.EOF
                ReDim Preserve katItems(1, i)
                katItems(0, i) = Class_Functions.DB.Recordset!ID
                katItems(1, i) = Class_Functions.DB.Recordset!name
                Class_Functions.DB.Recordset.movenext
                i = i + 1
            Wend
        Else
            ReDim Preserve katItems(0, 0)
            katItems(0, 0) = "leer"
        End If
    Else
        ReDim Preserve katItems(0, 0)
        katItems(0, 0) = "leer"
    End If
    
    Get_FieldVisibilityList = katItems
End Function

Public Function Get_UserRightsList() As Variant
    Dim where As String
    Dim userItems() As String
    
    statement = "SELECT " & _
                    "Username " & _
                "FROM " & _
                    "[DB_Users] " & _
                "ORDER BY Username"
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            Dim i As Integer
            
            ReDim userItems(Class_Functions.DB.GetRecordCount(statement) - 1)
            i = 0
            
            While Not Class_Functions.DB.Recordset.EOF
                userItems(i) = Class_Functions.DB.Recordset!Username
                Class_Functions.DB.Recordset.movenext
                i = i + 1
            Wend
        Else
            ReDim userItems(0)
            userItems(0) = "leer"
        End If
    Else
        ReDim userItems(0)
        userItems(0) = "leer"
    End If
    
    Get_UserRightsList = userItems
End Function

Public Function Get_Projekt_dropdown() As Variant
    Dim where As String
    Dim inactive As Boolean
    Dim projekte() As String
    
    If calc_master.Range("show_inactive_values") = "FALSE" Then
        inactive = False
    Else
        inactive = True
    End If
    
    where = ""
    
    If calc_master.Range("Login").value = "" Then
        where = "AND " & _
            "PJ.active <> 0 OR PJ.active is null"
    ElseIf Not inactive Then
        where = "AND " & _
            "PJ.active <> 0"
    End If
    
    statement = ""
    
    statement = "SELECT DISTINCT TOP " & maxP & _
                    " PJ.Projektcode, " & _
                    "KatWert.Wert AS Bezeichnung " & _
                "FROM " & _
                    "(((((DB_Projekte AS PJ LEFT OUTER JOIN " & _
                    "DB_Kategoriewerte AS KatWertUser ON PJ.ID = KatWertUser.FK_Projekte) LEFT OUTER JOIN " & _
                    "DB_Kategorie_Detail AS KatDetail ON KatWertUser.FK_Kategorie_Detail = KatDetail.ID) LEFT OUTER JOIN " & _
                    "DB_User_PFType AS UserType ON KatDetail.id = UserType.FK_KatDetail) LEFT OUTER JOIN " & _
                    "DB_Kategoriewerte AS KatWert ON PJ.ID = KatWert.FK_Projekte) LEFT OUTER JOIN " & _
                    "DB_Kategorie AS Kat ON (KatWert.FK_Kategorie = Kat.ID AND Kat.ID = 8)) " & _
                "WHERE " & _
                    "Kat.ID = 8 AND (UserType.FK_Username = 'user') " & where & " " & _
                "ORDER BY " & _
                    "PJ.Projektcode"
                
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            Dim i As Integer
            
            i = 0
            
            While Not Class_Functions.DB.Recordset.EOF
                ReDim Preserve projekte(i)
                projekte(i) = (Class_Functions.DB.Recordset!Projektcode & " - " & Class_Functions.DB.Recordset!Bezeichnung)
                Class_Functions.DB.Recordset.movenext
                i = i + 1
            Wend
        Else
            ReDim Preserve projekte(0)
            projekte(0) = "leer"
        End If
    Else
        ReDim Preserve projekte(0)
        projekte(0) = "leer"
    End If
    
    Get_Projekt_dropdown = projekte
End Function

Public Function Get_Settings_dropdown(DB_Table As String) As Variant
    
    Dim where As String
    
    If calc_master.Range("Login").value = "admin" Or calc_master.Range("Login").value = "user" Then
        If where = "" Then
            where = "WHERE DB_Users.Username IS NULL"
        Else
            where = where + " AND DB_Users.Username IS NULL"
        End If
    Else
        If where = "" Then
            where = "WHERE DB_Users.Username='" & calc_master.Range("WindowsLogin").value & "' OR DB_Users.Username IS NULL"
        Else
            where = where + " AND DB_Users.Username='" & calc_master.Range("WindowsLogin").value & "' OR DB_Users.Username IS NULL"
        End If
    End If
    
    If DB_Table = "DB_Settings_PjTable" Then
        statement = "SELECT " & _
                    "Name, " & _
                    "ID, f_orderby, " & _
                    "f_orderway, " & _
                    "f_groupby,f_groupYN, " & _
                    "FK_Users " & _
                "FROM " & _
                    "[" & DB_Table & "] LEFT JOIN " & _
                    "[DB_Users] ON DB_Users.Username = [" & DB_Table & "].FK_Users " & _
                where & " " & _
                "ORDER BY " & _
                    "FK_Users, Name"
    Else
        statement = "SELECT " & _
                    "Name, " & _
                    "ID, " & _
                    "FK_Users " & _
                "FROM " & _
                    "[" & DB_Table & "] LEFT JOIN " & _
                    "[DB_Users] ON DB_Users.Username = [" & DB_Table & "].FK_Users " & _
                where & " " & _
                "ORDER BY " & _
                    "FK_Users, Name"
    End If
    
    
                    
    Dim templates() As String
    Dim i As Integer
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            i = Class_Functions.DB.GetRecordCount(statement)
            
            If DB_Table = "DB_Settings_PjTable" Then
                ReDim Preserve templates(i - 1, 5)
                i = 0
                
                While Not Class_Functions.DB.Recordset.EOF
                    If VBA.IsNull(Class_Functions.DB.Recordset!FK_Users) Then
                        templates(i, 0) = GlobalIdLeft & Class_Functions.DB.Recordset!name & GlobalIdRight
                    Else
                        templates(i, 0) = Class_Functions.DB.Recordset!name
                    End If
                    
                    templates(i, 1) = Class_Functions.DB.Recordset!ID
                    templates(i, 2) = Nz0(Class_Functions.DB.Recordset!f_orderby)
                    templates(i, 3) = Nz(Class_Functions.DB.Recordset!f_orderway)
                    templates(i, 4) = Nz0(Class_Functions.DB.Recordset!f_groupby)
                    templates(i, 5) = Nz(Class_Functions.DB.Recordset!f_groupYN)
                    Class_Functions.DB.Recordset.movenext
                    i = i + 1
                Wend
            Else
                ReDim Preserve templates(i - 1, 2)
                i = 0
                
                While Not Class_Functions.DB.Recordset.EOF
                    If VBA.IsNull(Class_Functions.DB.Recordset!FK_Users) Then
                        templates(i, 0) = GlobalIdLeft & Class_Functions.DB.Recordset!name & GlobalIdRight
                    Else
                        templates(i, 0) = Class_Functions.DB.Recordset!name
                    End If
                    
                    templates(i, 1) = Class_Functions.DB.Recordset!ID
                    Class_Functions.DB.Recordset.movenext
                    i = i + 1
                Wend
            End If
            
            Get_Settings_dropdown = templates
        Else
            ReDim Preserve templates(0, 1)
            templates(0, 0) = "leer"
            templates(0, 1) = "0"
            Get_Settings_dropdown = templates
        End If
    Else
        ReDim Preserve templates(0, 0)
        templates(0, 0) = "leer"
        Get_Settings_dropdown = templates
    End If
End Function

Public Function Get_AllKategorien()
    calc_frm_masterdata.Range("frm_Kategorie").ClearContents
    Dim i As Integer
    Dim where As String
    Dim orderby As String
    
    If calc_master.Range("sortOrder").value = 1 Then
        orderby = "Kat.OrderBy,"
    End If
    
    If calc_master.Range("show_inactive_values") = "FALSE" Then
        where = "WHERE Kat.active <> 0 AND Kat.ID <> 100 AND Kat.ID <> 101 "
    Else
        where = "WHERE Kat.ID <> 100 AND Kat.ID <> 101 "
    End If

    statement = "SELECT " & _
                    "Kat.ID, " & _
                    "Lang_Shortname." & calc_master.Range("aktuelle_sprache").value & "  AS Shortname, " & _
                    "Lang_Longname." & calc_master.Range("aktuelle_sprache").value & "  AS Longname, " & _
                    "Lang_Art." & calc_master.Range("aktuelle_sprache").value & "  AS Art, " & _
                    "Lang_Einheit." & calc_master.Range("aktuelle_sprache").value & "  AS Einheit, " & _
                    "Kat.Min_Value, Kat.Max_Value, " & _
                    "Kat.Kommastellen, " & _
                    "Kat.Achsen, " & _
                    "Kat.Gesperrt, Kat.Summierung, Kat.ColWidth " & _
                "FROM " & _
                    "(((((([DB_Art] AS Art LEFT OUTER JOIN " & _
                        "[DB_Language] AS Lang_Art ON Art.FK_Language_Description = Lang_Art.Term) " & _
                    "RIGHT OUTER JOIN " & _
                        "[DB_Kategorie] AS Kat ON Art.ID = Kat.FK_Art) " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Einheit] AS Einheit ON Kat.FK_Einheit = Einheit.ID) " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Language] AS Lang_Einheit ON Einheit.FK_Language_Name = Lang_Einheit.Term) " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Language] AS Lang_Longname ON Kat.FK_Language_Name = Lang_Longname.Term) " & _
                    "LEFT OUTER JOIN " & _
                      "[DB_Language] AS Lang_Shortname ON Kat.FK_Language_Shortname = Lang_Shortname.Term) " & _
                where & _
                "ORDER BY " & orderby & " Lang_Longname." & calc_master.Range("aktuelle_sprache").value

    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            i = Class_Functions.DB.GetRecordCount(statement)
            
            calc_frm_masterdata.Range("B4").CopyFromRecordset Class_Functions.DB.Recordset
        End If
    End If
    
    If i + 3 > 4 Then
        ActiveWorkbook.Names.add name:="frm_Kategorie", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(4, 2), calc_frm_masterdata.Cells(i + 3, 13))
    Else
        ActiveWorkbook.Names.add name:="frm_Kategorie", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(4, 2), calc_frm_masterdata.Cells(4, 13))
    End If
End Function

'TODO
'Es wird die Ressourcenverteilung vom angegebenen Projekt geladen (nur Ressourcengruppen)
Public Function Get_RessourcenverteilungFromProject(PJ_ID As String)
    On Error Resume Next
    If calc_pv_ress.Range("PV_RessVerteilung").columns.count > 2 Then
        calc_pv_ress.Range(calc_pv_ress.Cells(calc_pv_ress.Range("PV_RessVerteilung").row - 1, calc_pv_ress.Range("PV_RessVerteilung").Column + 2), _
                      calc_pv_ress.Cells(calc_pv_ress.Range("PV_RessVerteilung").row - 1, calc_pv_ress.Range("PV_RessVerteilung").Column + calc_pv_ress.Range("PV_RessVerteilung").columns.count - 1)).ClearContents
    End If
    
    calc_pv_ress.Range(calc_pv_ress.Range("PV_RessVerteilung").Cells(1, 1), _
                  calc_pv_ress.Range("PV_RessVerteilung").Cells(calc_pv_ress.Range("PV_RessVerteilung").Rows.count, calc_pv_ress.Range("PV_RessVerteilung").columns.count)).ClearContents
    
    calc_pv_ress.columns.Hidden = False
    
    Dim i As Integer
    Dim col_counter As Integer
    Dim row_counter As Integer
    Dim ResRowCounter As Integer
    Dim ResColCounter As Integer
    Dim maxRow As Integer
    Dim maxCol As Integer

    'Beschriftung laden (Ressourcengruppen)
    statement = "SELECT " & _
                    "Lang.deutsch AS RessGruppe " & _
                "FROM " & _
                    "(([DB_Ressourcenarten] AS Ressarten " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Ressourcenarten] as RessGroup ON Ressarten.FK_Ressourcenarten = RessGroup.ID) " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Language] AS Lang ON RessGroup.FK_Language_Shortname = Lang.Term) " & _
                "GROUP BY " & _
                    "Lang.deutsch " & _
                "ORDER BY " & _
                    "Lang.deutsch "
    
    col_counter = calc_pv_ress.Range("PV_RessVerteilung").Column
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        While Not Class_Functions.DB.Recordset.EOF
            col_counter = col_counter + 1
            calc_pv_ress.Cells(calc_pv_ress.Range("PV_RessVerteilung").row - 1, col_counter).value = Class_Functions.DB.Recordset!RessGruppe
            
            Class_Functions.DB.Recordset.movenext
        Wend
    End If
    
    maxCol = col_counter

    statement = "SELECT " & _
                    "Lang.deutsch AS RessGruppe, " & _
                    "'01.' + " & Class_Functions.DB.Convert("Ressverteilung.Monat", T_NVARCHAR, 2) & " + '.' + " & Class_Functions.DB.Convert("Ressverteilung.Jahr", T_NVARCHAR, 4) & " AS Datum, " & _
                    "SUM(Ressverteilung.Aufwand) AS Aufwand " & _
                "FROM " & _
                    "(((([DB_Ressourcen] AS Ress " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Ressourcenarten] AS Ressarten ON Ressarten.ID = Ress.FK_Ressourcenarten) " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Ressourcenverteilung] AS Ressverteilung ON Ress.ID = Ressverteilung.FK_Ressourcen) " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Ressourcenarten] AS RessGroup ON Ressarten.FK_Ressourcenarten = RessGroup.ID) " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Language] AS Lang ON RessGroup.FK_Language_Shortname = Lang.Term) " & _
                "WHERE " & _
                    "(Ressverteilung.FK_Projekte = " & PJ_ID & ") " & _
                "GROUP BY " & _
                    "Lang.deutsch, Ressverteilung.Monat, Ressverteilung.Jahr " & _
                "ORDER BY " & _
                    "Ressverteilung.Jahr, Ressverteilung.Monat "
    
    ResRowCounter = calc_pv_ress.Range("PV_RessVerteilung").row
    ResColCounter = calc_pv_ress.Range("PV_RessVerteilung").Column + 1
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        While Not Class_Functions.DB.Recordset.EOF
            'Wenn Datum gleich, dann in letzter Zeile weiter schreiben
            If ResRowCounter = calc_pv_ress.Range("PV_RessVerteilung").row Then
                calc_pv_ress.Cells(ResRowCounter, calc_pv_ress.Range("PV_RessVerteilung").Column).value = VBA.CDate(Class_Functions.DB.Recordset!datum)
            Else
                If calc_pv_ress.Cells(ResRowCounter - 1, calc_pv_ress.Range("PV_RessVerteilung").Column).value = VBA.CDate(Class_Functions.DB.Recordset!datum) Then
                    ResRowCounter = ResRowCounter - 1
                Else
                    calc_pv_ress.Cells(ResRowCounter, calc_pv_ress.Range("PV_RessVerteilung").Column).value = VBA.CDate(Class_Functions.DB.Recordset!datum)
                End If
            End If
            
            Do While calc_pv_ress.Cells(calc_pv_ress.Range("PV_RessVerteilung").row - 1, ResColCounter).value <> ""
                If calc_pv_ress.Cells(calc_pv_ress.Range("PV_RessVerteilung").row - 1, ResColCounter).value = Class_Functions.DB.Recordset!RessGruppe Then
                    calc_pv_ress.Cells(ResRowCounter, ResColCounter).value = Class_Functions.DB.Recordset!Aufwand
                    Exit Do
                End If
                
                ResColCounter = ResColCounter + 1
            Loop

            maxRow = ResRowCounter
            
            ResColCounter = calc_pv_ress.Range("PV_RessVerteilung").Column + 1
            ResRowCounter = ResRowCounter + 1
            Class_Functions.DB.Recordset.movenext
        Wend
    End If
    
    ResColCounter = calc_pv_ress.Range("PV_RessVerteilung").Column + 1
    Do While calc_pv_ress.Cells(calc_pv_ress.Range("PV_RessVerteilung").row - 1, ResColCounter).value <> ""
        If WorksheetFunction.SUM(calc_pv_ress.Range(calc_pv_ress.Cells(calc_pv_ress.Range("PV_RessVerteilung").row, ResColCounter), calc_pv_ress.Cells(calc_pv_ress.Range("PV_RessVerteilung").row + calc_pv_ress.Range("PV_RessVerteilung").Rows.count, ResColCounter))) = 0 Then
            calc_pv_ress.columns(ResColCounter).Hidden = True
        End If
        ResColCounter = ResColCounter + 1
    Loop
    
    
    If ResRowCounter - 2 > 1 Then
        ActiveWorkbook.Names.add name:="PV_RessVerteilung", RefersToR1C1:=calc_pv_ress.Range(calc_pv_ress.Cells(calc_pv_ress.Range("PV_RessVerteilung").row, calc_pv_ress.Range("PV_RessVerteilung").Column), calc_pv_ress.Cells(maxRow, maxCol))
    Else
        ActiveWorkbook.Names.add name:="PV_RessVerteilung", RefersToR1C1:=calc_pv_ress.Range(calc_pv_ress.Cells(calc_pv_ress.Range("PV_RessVerteilung").row, calc_pv_ress.Range("PV_RessVerteilung").Column), calc_pv_ress.Cells(Range("PV_RessVerteilung").row, calc_pv_ress.Range("PV_RessVerteilung").columns.count))
    End If
    If maxRow = 0 Then maxRow = 1
    ActiveSheet.ChartObjects("PV_RessHisto").Activate
    ActiveChart.SetSourceData Source:=Sheets("calc_PV_Ress").Range(calc_pv_ress.Cells(calc_pv_ress.Range("PV_RessVerteilung").row - 1, calc_pv_ress.Range("PV_RessVerteilung").Column), calc_pv_ress.Cells(maxRow, maxCol))
End Function

'TODO
'Es wird die Kostenverteilung vom angegebenen Projekt geladen
Public Function Get_KostenverteilungFromProject(PJ_ID As String)
    On Error Resume Next
    
    If calc_pv_cost.Range("PV_CostVerteilung").columns.count > 2 Then
        calc_pv_cost.Range(calc_pv_cost.Cells(calc_pv_cost.Range("PV_CostVerteilung").row - 1, calc_pv_cost.Range("PV_CostVerteilung").Column + 2), _
                      calc_pv_cost.Cells(calc_pv_cost.Range("PV_CostVerteilung").row - 1, calc_pv_cost.Range("PV_CostVerteilung").Column + calc_pv_cost.Range("PV_CostVerteilung").columns.count - 1)).ClearContents
    End If
    
    calc_pv_cost.Range(calc_pv_cost.Range("PV_CostVerteilung").Cells(1, 1), _
                       calc_pv_cost.Range("PV_CostVerteilung").Cells(calc_pv_cost.Range("PV_CostVerteilung").Rows.count, calc_pv_cost.Range("PV_CostVerteilung").columns.count)).ClearContents
    
    calc_pv_cost.columns.Hidden = False
    
    Dim i As Integer
    Dim col_counter As Integer
    Dim row_counter As Integer
    Dim CostRowCounter As Integer
    Dim CostColCounter As Integer
    Dim maxRow As Integer
    Dim maxCol As Integer

    'Beschriftung laden (Ressourcengruppen)
    statement = "SELECT " & _
                    "Lang.deutsch AS Kostenarten " & _
                "FROM " & _
                    "[DB_Kostenarten] AS Kostenarten " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Language] AS Lang ON Kostenarten.FK_Language_Shortname = Lang.Term " & _
                "GROUP BY " & _
                    "Lang.deutsch " & _
                "ORDER BY " & _
                    "Lang.deutsch "
    
    col_counter = calc_pv_cost.Range("PV_CostVerteilung").Column
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        While Not Class_Functions.DB.Recordset.EOF
            col_counter = col_counter + 1
            calc_pv_cost.Cells(calc_pv_cost.Range("PV_CostVerteilung").row - 1, col_counter).value = Class_Functions.DB.Recordset!Kostenarten
            
            Class_Functions.DB.Recordset.movenext
        Wend
    End If
    
    maxCol = col_counter

    statement = "SELECT " & _
                    "Lang.deutsch AS Kostenarten,  " & _
                    "'01.' + " & Class_Functions.DB.Convert("Kostenverteilung.Monat", T_NVARCHAR, 2) & " + '.' + " & Class_Functions.DB.Convert("Kostenverteilung.Jahr", T_NVARCHAR, 4) & " AS Datum, " & _
                    "SUM(Kostenverteilung.Kosten) As Aufwand " & _
                "FROM " & _
                    "((([DB_Kostenverteilung] AS Kostenverteilung  " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Kosten] ON Kostenverteilung.FK_Kosten = DB_Kosten.ID)  " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Kostenarten] AS Kostenarten ON DB_Kosten.FK_Kostenarten = Kostenarten.ID)  " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Language] AS Lang ON Kostenarten.FK_Language_Shortname = Lang.Term) " & _
                "WHERE " & _
                    "(Kostenverteilung.FK_Projekte = " & PJ_ID & ") " & _
                "GROUP BY " & _
                    "Lang.deutsch, Kostenverteilung.Monat, Kostenverteilung.Jahr " & _
                "ORDER BY " & _
                    "Kostenverteilung.Jahr, Kostenverteilung.Monat"
    
    CostRowCounter = calc_pv_cost.Range("PV_CostVerteilung").row
    CostColCounter = calc_pv_cost.Range("PV_CostVerteilung").Column + 1
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        While Not Class_Functions.DB.Recordset.EOF
            'Wenn Datum gleich, dann in letzter Zeile weiter schreiben
            If CostRowCounter = calc_pv_cost.Range("PV_CostVerteilung").row Then
                calc_pv_cost.Cells(CostRowCounter, calc_pv_cost.Range("PV_CostVerteilung").Column).value = VBA.CDate(Class_Functions.DB.Recordset!datum)
            Else
                If calc_pv_cost.Cells(CostRowCounter - 1, calc_pv_cost.Range("PV_CostVerteilung").Column).value = VBA.CDate(Class_Functions.DB.Recordset!datum) Then
                    CostRowCounter = CostRowCounter - 1
                Else
                    calc_pv_cost.Cells(CostRowCounter, calc_pv_cost.Range("PV_CostVerteilung").Column).value = VBA.CDate(Class_Functions.DB.Recordset!datum)
                End If
            End If
            
            Do While calc_pv_cost.Cells(calc_pv_cost.Range("PV_CostVerteilung").row - 1, CostColCounter).value <> ""
                If calc_pv_cost.Cells(calc_pv_cost.Range("PV_CostVerteilung").row - 1, CostColCounter).value = Class_Functions.DB.Recordset!Kostenarten Then
                    calc_pv_cost.Cells(CostRowCounter, CostColCounter).value = Class_Functions.DB.Recordset!Aufwand
                    Exit Do
                End If
                
                CostColCounter = CostColCounter + 1
            Loop

            maxRow = CostRowCounter
            
            CostColCounter = calc_pv_cost.Range("PV_CostVerteilung").Column + 1
            CostRowCounter = CostRowCounter + 1
            Class_Functions.DB.Recordset.movenext
        Wend
    End If
    
    CostRowCounter = calc_pv_cost.Range("PV_CostVerteilung").Column + 1
    Do While calc_pv_cost.Cells(calc_pv_cost.Range("PV_CostVerteilung").row - 1, CostRowCounter).value <> ""
        If WorksheetFunction.SUM(calc_pv_cost.Range(calc_pv_cost.Cells(calc_pv_cost.Range("PV_CostVerteilung").row, CostRowCounter), calc_pv_cost.Cells(calc_pv_cost.Range("PV_CostVerteilung").row + calc_pv_cost.Range("PV_CostVerteilung").Rows.count, CostRowCounter))) = 0 Then
            calc_pv_cost.columns(CostRowCounter).Hidden = True
        End If
        CostRowCounter = CostRowCounter + 1
    Loop
    
    If CostRowCounter - 2 > 1 Then
        ActiveWorkbook.Names.add name:="PV_CostVerteilung", RefersToR1C1:=calc_pv_cost.Range(calc_pv_cost.Cells(calc_pv_cost.Range("PV_CostVerteilung").row, calc_pv_cost.Range("PV_CostVerteilung").Column), calc_pv_cost.Cells(maxRow, maxCol))
    Else
        ActiveWorkbook.Names.add name:="PV_CostVerteilung", RefersToR1C1:=calc_pv_cost.Range(calc_pv_cost.Cells(calc_pv_cost.Range("PV_CostVerteilung").row, calc_pv_cost.Range("PV_CostVerteilung").Column), calc_pv_cost.Cells(calc_pv_cost.Range("PV_CostVerteilung").row, calc_pv_cost.Range("PV_CostVerteilung").columns.count))
    End If
    
    ActiveSheet.ChartObjects("PV_CostHisto").Activate
    ActiveChart.SetSourceData Source:=Sheets("calc_pv_cost").Range(calc_pv_cost.Cells(calc_pv_cost.Range("PV_CostVerteilung").row - 1, calc_pv_cost.Range("PV_CostVerteilung").Column), calc_pv_cost.Cells(maxRow, maxCol))
End Function

Public Function Get_AllUsers()
    calc_frm_masterdata.Range("frm_User").ClearContents
    Dim i As Integer

    statement = "SELECT " & _
                    "Users.Username, " & _
                    "Users.Lizenzcode " & _
                "FROM " & _
                    "[DB_Users] AS Users " & _
                "ORDER BY " & _
                    "Users.Username"

    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            i = Class_Functions.DB.GetRecordCount(statement)
            
            calc_frm_masterdata.Range("AP4").CopyFromRecordset Class_Functions.DB.Recordset
        End If
    End If
    
    If i + 3 > 4 Then
        ActiveWorkbook.Names.add name:="frm_User", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(4, 42), calc_frm_masterdata.Cells(i + 3, 43))
    Else
        ActiveWorkbook.Names.add name:="frm_User", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(4, 42), calc_frm_masterdata.Cells(4, 43))
    End If
End Function

Public Function Get_AllArten()
    calc_frm_masterdata.Range("frm_Art").ClearContents
    
    Dim i As Integer

    statement = "SELECT " & _
                    "[DB_Art].ID, " & _
                    "[DB_Language]." & calc_master.Range("aktuelle_sprache").value & " " & _
                "FROM " & _
                    "[DB_Art] " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Language] ON [DB_Art].FK_Language_Description = [DB_Language].Term"

    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            i = Class_Functions.DB.GetRecordCount(statement)
            
            calc_frm_masterdata.Range("O4").CopyFromRecordset Class_Functions.DB.Recordset
        End If
    End If
    
    If i + 3 > 4 Then
        ActiveWorkbook.Names.add name:="frm_Art", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(4, 15), calc_frm_masterdata.Cells(i + 3, 16))
    Else
        ActiveWorkbook.Names.add name:="frm_Art", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(4, 15), calc_frm_masterdata.Cells(4, 16))
    End If
End Function

Public Function Get_AllFilter(Optional onlyMy As Boolean = False)
    calc_frm_masterdata.Range("frm_Art").ClearContents
    
    Dim i As Integer
    i = 1
    
    If calc_master.Range("Login").value = "admin" Or calc_master.Range("Login").value = "user" Then
        statement = "SELECT " & _
                        "Filter.ID, " & _
                        "Filter.Name, " & _
                        "FK_Users " & _
                    "FROM " & _
                        "[DB_Settings_Filter] AS Filter " & _
                    "WHERE " & _
                        "FK_Users IS NULL " & _
                    "ORDER BY theOrder, Name"
    ElseIf onlyMy Then
        statement = "SELECT " & _
                        "DB_Settings_Filter.ID, " & _
                        "DB_Settings_Filter.Name, " & _
                        "FK_Users " & _
                    "FROM " & _
                        "DB_Settings_Filter LEFT JOIN " & _
                        "DB_Users ON DB_Settings_Filter.FK_Users = DB_Users.Username " & _
                    "WHERE " & _
                        "DB_Users.Username='" & calc_master.Range("WindowsLogin").value & "' " & _
                    "ORDER BY " & _
                        "theOrder, Name"
    Else
        statement = "SELECT " & _
                        "DB_Settings_Filter.ID, " & _
                        "DB_Settings_Filter.Name, " & _
                        "FK_Users " & _
                    "FROM " & _
                        "DB_Settings_Filter LEFT JOIN " & _
                        "DB_Users ON DB_Settings_Filter.FK_Users = DB_Users.Username " & _
                    "WHERE " & _
                        "DB_Users.Username='" & calc_master.Range("WindowsLogin").value & "' OR FK_Users IS NULL " & _
                    "ORDER BY " & _
                        "FK_Users, theOrder, Name"
    End If

    If Class_Functions.DB.Select_Statement(statement) = True Then
        While Not Class_Functions.DB.Recordset.EOF
            calc_frm_masterdata.Cells(i + 3, 45).value = Class_Functions.DB.Recordset!ID
            If VBA.IsNull(Class_Functions.DB.Recordset!FK_Users) Then
                calc_frm_masterdata.Cells(i + 3, 46).value = GlobalIdLeft & Class_Functions.DB.Recordset!name & GlobalIdRight
            Else
                calc_frm_masterdata.Cells(i + 3, 46).value = Class_Functions.DB.Recordset!name
            End If
            
            i = i + 1
            Class_Functions.DB.Recordset.movenext
        Wend
        
        i = i - 1
    End If
    
    If i + 3 > 4 Then
        ActiveWorkbook.Names.add name:="frm_Filter", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(4, 45), calc_frm_masterdata.Cells(i + 3, 46))
    Else
        ActiveWorkbook.Names.add name:="frm_Filter", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(4, 45), calc_frm_masterdata.Cells(4, 46))
    End If
End Function

Public Function Get_AllEinheiten()
    calc_frm_masterdata.Range("frm_Einheit").ClearContents
    
    Dim i As Integer
    Dim where As String
    
    If calc_master.Range("show_inactive_values") = "FALSE" Then
        where = "WHERE Einheit.active <> 0 "
    Else
        where = ""
    End If
    
    statement = "SELECT " & _
                    "Einheit.ID, " & _
                    "Lang_Einheit." & calc_master.Range("aktuelle_sprache").value & " AS Name, " & _
                    "Einheit.Faktor " & _
                "FROM " & _
                    "[DB_Einheit] AS Einheit " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Language] AS Lang_Einheit ON Einheit.FK_Language_Name = Lang_Einheit.Term " & _
                where & _
                "ORDER BY " & _
                    "Lang_Einheit." & calc_master.Range("aktuelle_sprache").value

    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            i = Class_Functions.DB.GetRecordCount(statement)
            
            calc_frm_masterdata.Range("R4").CopyFromRecordset Class_Functions.DB.Recordset
        End If
    End If
    
    If i + 3 > 4 Then
        ActiveWorkbook.Names.add name:="frm_Einheit", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(4, 18), calc_frm_masterdata.Cells(i + 3, 20))
    Else
        ActiveWorkbook.Names.add name:="frm_Einheit", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(4, 18), calc_frm_masterdata.Cells(4, 20))
    End If
End Function

Public Function Get_ProjectFilterResult(lb As Object, filter_id As String, addToLB As Boolean)
    If (addToLB = True) Then
        lb.clear
    End If
    
    Dim i As Integer
    Dim where As String
    Dim pj_ids As String
    
    i = 4
    where = "WHERE PJ.active <> 0 " & "AND (KatWerte.FK_Kategorie = 8) "
    
    pj_ids = nlc_filter.get_Filter(VBA.CInt(filter_id))
    
    If pj_ids <> "" Then
        where = where & "AND PJ.ID in (" & pj_ids & ") "
    
        statement = "SELECT " & _
                        "PJ.ID, KatWerte.Wert " & _
                    "FROM " & _
                        "[DB_Projekte] AS PJ " & _
                        "Left OUTER JOIN " & _
                            "[DB_Kategoriewerte] AS KatWerte ON PJ.ID = KatWerte.FK_Projekte " & _
                    where & _
                    "ORDER BY " & _
                        "KatWerte.Wert DESC"
    
        If Class_Functions.DB.Select_Statement(statement) = True Then
            If Not Class_Functions.DB.Recordset.EOF Then
                While Not Class_Functions.DB.Recordset.EOF
                    If (Not VBA.IsNull(Class_Functions.DB.Recordset!wert)) Then
                        If (addToLB = True) Then
                            lb.addItem (Class_Functions.DB.Recordset!wert)
                        End If
                        
                        'Werte in Tabelle eintragen
                        calc_frm_projects.Cells(i, calc_frm_projects.Range("ProjectFilterResult").Column + 1).value = Class_Functions.DB.Recordset!ID
                        calc_frm_projects.Cells(i, calc_frm_projects.Range("ProjectFilterResult").Column).value = Class_Functions.DB.Recordset!wert
                        i = i + 1
                    End If
                    
                    Class_Functions.DB.Recordset.movenext
                Wend
            End If
        End If
    Else
        calc_frm_projects.Cells(4, calc_frm_projects.Range("ProjectFilterResult").Column + 1).value = ""
        calc_frm_projects.Cells(4, calc_frm_projects.Range("ProjectFilterResult").Column).value = ""
        nlc_ppf_viewer.Range("PV_SelectedProject").value = ""
    End If
    
    If i > 4 Then
        ActiveWorkbook.Names.add name:="ProjectFilterResult", RefersToR1C1:=calc_frm_projects.Range(calc_frm_projects.Cells(4, calc_frm_projects.Range("ProjectFilterResult").Column), calc_frm_projects.Cells(i - 1, calc_frm_projects.Range("ProjectFilterResult").Column + 1))
        ActiveWorkbook.Names.add name:="ProjectFilterResultName", RefersToR1C1:=calc_frm_projects.Range(calc_frm_projects.Cells(4, calc_frm_projects.Range("ProjectFilterResult").Column), calc_frm_projects.Cells(i - 1, calc_frm_projects.Range("ProjectFilterResult").Column))
    Else
        ActiveWorkbook.Names.add name:="ProjectFilterResult", RefersToR1C1:=calc_frm_projects.Range(calc_frm_projects.Cells(4, calc_frm_projects.Range("ProjectFilterResult").Column), calc_frm_projects.Cells(4, calc_frm_projects.Range("ProjectFilterResult").Column + 1))
        ActiveWorkbook.Names.add name:="ProjectFilterResultName", RefersToR1C1:=calc_frm_projects.Range(calc_frm_projects.Cells(4, calc_frm_projects.Range("ProjectFilterResult").Column), calc_frm_projects.Cells(i, calc_frm_projects.Range("ProjectFilterResult").Column))
    End If
End Function

Public Function Get_AllKatDetails()
    calc_frm_masterdata.Range("frm_KatDetails").ClearContents
    
    Dim i As Integer
    Dim where As String
    
    If calc_master.Range("show_inactive_values") = "FALSE" Then
        where = "WHERE KatD.active <> 0 "
    Else
        where = ""
    End If
    
    statement = "SELECT " & _
                    "KatD.ID, " & _
                    "Lang_Short." & calc_master.Range("aktuelle_sprache").value & " As Shortname, " & _
                    "Lang_Name." & calc_master.Range("aktuelle_sprache").value & " AS Longname, " & _
                    "KatD.OrderBy, " & _
                    "KatD.Farbe, " & _
                    "KatD.FK_Kategorie " & _
                "FROM " & _
                    "(([DB_Kategorie_Detail] AS KatD " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Language] AS Lang_Short ON KatD.FK_Language_Shortname = Lang_Short.Term) " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Language] AS Lang_Name ON KatD.FK_Language_Name = Lang_Name.Term) " & _
                where & _
                "ORDER BY " & _
                    "KatD.FK_Kategorie, " & _
                    "KatD.OrderBy"

    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            i = Class_Functions.DB.GetRecordCount(statement)
            
            calc_frm_masterdata.Range("V4").CopyFromRecordset Class_Functions.DB.Recordset
        End If
    End If
    
    If i + 3 > 4 Then
        ActiveWorkbook.Names.add name:="frm_KatDetails", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(4, 22), calc_frm_masterdata.Cells(i + 3, 27))
    Else
        ActiveWorkbook.Names.add name:="frm_KatDetails", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(4, 22), calc_frm_masterdata.Cells(4, 27))
    End If
End Function

Public Function Get_AllKostenarten(Optional all As Boolean = False)
    calc_frm_masterdata.Range("frm_Kostenarten").ClearContents

    Dim where As String
    Dim orderby As String
    
    If calc_master.Range("show_inactive_values") = "FALSE" Then
        where = "WHERE Kostenarten.active <> 0 "
    Else
        where = ""
    End If
    
    If Class_Functions.DB.GetSQLType = SQLType.ACCESS Then
        orderby = "ASC"
    Else
        orderby = "DESC"
    End If
    
    If all Then
        statement = "SELECT " & _
                    "Kostenarten.ID, " & _
                    "Lan_Shortname." & calc_master.Range("aktuelle_sprache").value & " AS Shortname, " & _
                    "Lan_Longname." & calc_master.Range("aktuelle_sprache").value & " AS Longname, " & _
                    "Kostenarten.Kostenart, " & _
                    "Kostenarten.Achsenlast " & _
                "FROM " & _
                    "(([DB_Kostenarten] As Kostenarten " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Language] AS Lan_Longname ON Kostenarten.FK_Language_Name = Lan_Longname.Term) " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Language] AS Lan_Shortname ON Kostenarten.FK_Language_Shortname = Lan_Shortname.Term) " & _
                where & _
                "ORDER BY " & _
                    "Kostenarten.Kostenart " & orderby & ", " & _
                    "Lan_Longname." & calc_master.Range("aktuelle_sprache").value
                
    Else
        'Wenn access dann andere reihenfolge.... (weil true = -1 statt 1)
        If where = "" Then
            where = "WHERE Lan_Longname." & calc_master.Range("aktuelle_sprache").value & "<> '-' "
        Else
            where = where & "AND Lan_Longname." & calc_master.Range("aktuelle_sprache").value & "<> '-' "
        End If
        
        statement = "SELECT " & _
                    "Kostenarten.ID, " & _
                    "Lan_Shortname." & calc_master.Range("aktuelle_sprache").value & " AS Shortname, " & _
                    "Lan_Longname." & calc_master.Range("aktuelle_sprache").value & " AS Longname, " & _
                    "Kostenarten.Kostenart, " & _
                    "Kostenarten.Achsenlast " & _
                "FROM " & _
                    "(([DB_Kostenarten] As Kostenarten " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Language] AS Lan_Longname ON Kostenarten.FK_Language_Name = Lan_Longname.Term) " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Language] AS Lan_Shortname ON Kostenarten.FK_Language_Shortname = Lan_Shortname.Term) " & _
                where & _
                "ORDER BY " & _
                    "Kostenarten.Kostenart " & orderby & ", " & _
                    "Lan_Longname." & calc_master.Range("aktuelle_sprache").value
    End If

    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            Dim i As Integer
            Dim rsRows As Integer
            
            rsRows = Class_Functions.DB.GetRecordCount(statement)
            i = rsRows + 3
            
            ReDim result(4, rsRows)
            Dim counter As Integer
            Dim wert As String
            
            While Not Class_Functions.DB.Recordset.EOF
                result(0, counter) = N2hk(Class_Functions.DB.Recordset!ID)
                result(1, counter) = N2hk(Class_Functions.DB.Recordset!Shortname)
                result(2, counter) = Nz(Class_Functions.DB.Recordset!Longname)
                If Class_Functions.DB.Recordset!Kostenart Then
                    result(3, counter) = "auto"
                Else
                    result(3, counter) = "manuell"
                End If
                result(4, counter) = N2hk(Class_Functions.DB.Recordset!Achsenlast)
                
                counter = counter + 1
                Class_Functions.DB.Recordset.movenext
            Wend
            
            calc_frm_masterdata.Range(calc_frm_masterdata.Cells(calc_frm_masterdata.Range("frm_Kostenarten").row, calc_frm_masterdata.Range("frm_Kostenarten").Column), _
                                    calc_frm_masterdata.Cells(calc_frm_masterdata.Range("frm_Kostenarten").row + i - 4, calc_frm_masterdata.Range("frm_Kostenarten").Column + 5)) = _
                                    Application.Transpose(result)
        End If
    End If
    
    If i <> 4 Then
        ActiveWorkbook.Names.add name:="frm_Kostenarten", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(4, 29), calc_frm_masterdata.Cells(i, 33))
    Else
        ActiveWorkbook.Names.add name:="frm_Kostenarten", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(4, 29), calc_frm_masterdata.Cells(4, 33))
    End If
End Function

Public Function Get_VerfuegbarkeitFromRessart(RessID As String)
    calc_frm_masterdata.Range("frm_Verfuegbarkeit").ClearContents

    Dim i As Integer

    statement = "SELECT " & _
                    "ID, Monat, Jahr, Wert " & _
                "FROM " & _
                    "[Verfuegbarkeit] " & _
                "WHERE " & _
                    "(FK_Ressourcenart = " & RessID & ") " & _
                "ORDER BY " & _
                    "Jahr, Monat"
                    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            i = Class_Functions.DB.GetRecordCount(statement)
        
            calc_frm_masterdata.Range("BA4").CopyFromRecordset Class_Functions.DB.Recordset
        End If
    End If
    
    If i + 3 > 4 Then
        ActiveWorkbook.Names.add name:="frm_Verfuegbarkeit", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(4, 53), calc_frm_masterdata.Cells(i + 3, 56))
    Else
        ActiveWorkbook.Names.add name:="frm_Verfuegbarkeit", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(4, 53), calc_frm_masterdata.Cells(4, 56))
    End If
End Function

Public Function Get_AllRessourcenarten()
    calc_frm_masterdata.Range("frm_Ressourcenarten").ClearContents

    Dim where As String
    Dim datum As String
    
    datum = Class_Functions.DB.Convert("Jahr + '-' + Monat + '-01'", T_DATE)
    
    If calc_master.Range("show_inactive_values") = "FALSE" Then
        where = "WHERE Ressarten.active <> 0 "
    Else
        where = ""
    End If

    statement = "SELECT " & _
                    "Ressarten.ID AS ID, Ressarten.FK_Kostenarten, Kostenarten.Kostenart, " & _
                    "Lang_Shortname." & calc_master.Range("aktuelle_sprache").value & " AS Shortname, " & _
                    "Lang_Longname." & calc_master.Range("aktuelle_sprache").value & " AS Longname, " & _
                    "Ressarten.Kostensatz, Lang_KostShortname.deutsch As KostShortname, ressarten.FK_Ressourcenarten AS RessID, Verfuegbarkeit.Wert AS VerfWert " & _
                "FROM " & _
                        "((((((((SELECT Verfuegbarkeit1.FK_Ressourcenart , Verfuegbarkeit1.Wert " & _
                            "FROM (SELECT " & _
                                "ID, FK_Ressourcenart, " & datum & " AS Datum, Wert " & _
                                "FROM [Verfuegbarkeit]) AS Verfuegbarkeit1 INNER JOIN " & _
                        "(SELECT FK_Ressourcenart, MAX(" & datum & ") AS Datum " & _
                            "FROM [Verfuegbarkeit] " & _
                            "GROUP BY FK_Ressourcenart) AS Verfuegbarkeit2 ON " & _
                        "Verfuegbarkeit1.FK_Ressourcenart = Verfuegbarkeit2.FK_Ressourcenart AND Verfuegbarkeit1.Datum = Verfuegbarkeit2.Datum) AS Verfuegbarkeit RIGHT OUTER JOIN " & _
                    "[DB_Ressourcenarten] AS Ressarten ON Verfuegbarkeit.FK_Ressourcenart = Ressarten.ID) LEFT OUTER JOIN " & _
                    "[DB_Language] AS Lang_Shortname ON Ressarten.FK_Language_Shortname = Lang_Shortname.Term) LEFT OUTER JOIN " & _
                    "[DB_Language] AS Lang_Longname ON Ressarten.FK_Language_Name = Lang_Longname.Term) LEFT OUTER JOIN " & _
                    "[DB_Kostenarten] AS Kostenarten ON Ressarten.FK_Kostenarten = Kostenarten.ID) LEFT OUTER JOIN " & _
                    "[DB_Language] AS Lang_KostShortname ON Kostenarten.FK_Language_Shortname = Lang_KostShortname.Term) INNER JOIN " & _
                    "[DB_Ressourcenarten] AS RessGroup ON RessGroup.ID = Ressarten.FK_Ressourcenarten) LEFT OUTER JOIN " & _
                    "[DB_Language] AS Lang_RessGroupName ON RessGroup.FK_Language_Name = Lang_RessGroupName.Term) " & _
                where & _
                "ORDER BY " & _
                    "Lang_RessGroupName." & calc_master.Range("aktuelle_sprache").value & ", Ressarten.FK_Ressourcenarten, Ressarten.FK_Kostenarten, Lang_Longname.deutsch"

    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            Dim i As Integer
            Dim rsRows As Integer
            
            rsRows = Class_Functions.DB.GetRecordCount(statement)
            i = rsRows
            
            ReDim result(6, rsRows - 1)
            Dim counter As Integer
            Dim wert As String
            
            While Not Class_Functions.DB.Recordset.EOF
                result(0, counter) = N2hk(Class_Functions.DB.Recordset!ID)
                If VBA.IsNull(Class_Functions.DB.Recordset!FK_Kostenarten) Then
                    result(1, counter) = N2hk(Class_Functions.DB.Recordset!Shortname)
                    result(2, counter) = N2hk(Class_Functions.DB.Recordset!Longname)
                Else
                    result(1, counter) = "     " & N2hk(Class_Functions.DB.Recordset!Shortname)
                    result(2, counter) = "     " & N2hk(Class_Functions.DB.Recordset!Longname)
                End If
                
                If Not VBA.IsNull(Class_Functions.DB.Recordset!Kostenart) And Not VBA.IsNull(Class_Functions.DB.Recordset!FK_Kostenarten) Then
                    result(3, counter) = Class_Functions.DB.Recordset!Kostensatz
'                    If Class_Functions.DB.Recordset!Kostenart Then
'                        result(3, counter) = "auto"
'                    Else
'                        result(3, counter) = "manuell"
'                    End If
                Else
                    result(3, counter) = ""
                End If
                
                result(4, counter) = N2hk(Class_Functions.DB.Recordset!KostShortname)
                result(5, counter) = N2hk(Class_Functions.DB.Recordset!RessID)
                
                result(6, counter) = Nz(Class_Functions.DB.Recordset!VerfWert)
                
                counter = counter + 1
                Class_Functions.DB.Recordset.movenext
            Wend
            
            calc_frm_masterdata.Range(calc_frm_masterdata.Cells(calc_frm_masterdata.Range("frm_Ressourcenarten").row, calc_frm_masterdata.Range("frm_Ressourcenarten").Column), _
                                    calc_frm_masterdata.Cells(calc_frm_masterdata.Range("frm_Ressourcenarten").row + i - 1, calc_frm_masterdata.Range("frm_Ressourcenarten").Column + 5)) = _
                                    Application.Transpose(result)
        End If
    End If
    
    If i + 3 > 4 Then
        ActiveWorkbook.Names.add name:="frm_Ressourcenarten", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(4, 35), calc_frm_masterdata.Cells(i + 3, 41))
    Else
        ActiveWorkbook.Names.add name:="frm_Ressourcenarten", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(4, 35), calc_frm_masterdata.Cells(4, 41))
    End If
End Function

'TODO Statments auf einzelne abfragen aufteilen
Public Sub Get_PipeCalc(pj_ids As String)
    Dim sqlSelect As String
    Dim sqlFrom  As String
    Dim sqlGroupBy As String
    Dim listCount As Integer
    Dim sql_statement_exists As Boolean
    Dim sqlwhere As String
    Dim Klammercounter As Integer
    Dim Klammern As String
    
    
    Dim sql() As String
    
    nlc_ppf_pipe.Range("C64:M10000").ClearContents
                   
    nlc_ppf_pipe.Range("C65:M10000").clear
    
    If pj_ids <> "" Then
        sqlwhere = " WHERE PJ.ID in (" & pj_ids & ")"
    End If
    
    'Projekt-Code + Projektname
    sqlSelect = "SELECT DISTINCT " & _
                    "Kat_PJShortName.wert, " & _
                    "Kat_PJName.wert"
    sqlFrom = "(([DB_Projekte] AS PJ " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Kategoriewerte] AS Kat_PJName ON (PJ.ID = Kat_PJName.FK_Projekte AND Kat_PJName.FK_Kategorie = 11)) " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Kategoriewerte] AS Kat_PJShortName ON (PJ.ID = Kat_PJShortName.FK_Projekte AND Kat_PJShortName.FK_Kategorie = 8)) "
    
    'Werte aus DB Settings Pipe holen um sie weiter zu verarbeiten...
    
    
    'X-Achse
    If Class_Functions.DB.Recordset!X_Art = "Stapel" Then
        'Selbe Statement wie Y-Achse nur mit X als Spaltennamen
        sql = Get_Achse(Class_Functions.DB.Recordset!Y_Art, Class_Functions.DB.Recordset!Y_ID_Value, "X", pj_ids)
    Else
        sql = Get_Achse(Class_Functions.DB.Recordset!X_Art, Class_Functions.DB.Recordset!X_ID_Value, "X", pj_ids)
    End If
    
    
    Klammern = ""
    
    If sql(3) <> "" Then
        For Klammercounter = 0 To sql(3) - 1 Step 1
            Klammern = Klammern & "("
        Next Klammercounter
    End If
    
    'Statement mit X-Achse verbinden
    sqlSelect = sqlSelect & sql(0)
    sqlFrom = Klammern & sqlFrom & sql(1)
    sqlGroupBy = sqlGroupBy & sql(2)

    'Y-Achse
    If Class_Functions.DB.Recordset!Y_Art = "Stapel" Then
        'Selbe Statement wie X-Achse nur mit Y als Spaltennamen
        sql = Get_Achse(Class_Functions.DB.Recordset!X_Art, Class_Functions.DB.Recordset!X_ID_Value, "Y", pj_ids)
    Else
        sql = Get_Achse(Class_Functions.DB.Recordset!Y_Art, Class_Functions.DB.Recordset!Y_ID_Value, "Y", pj_ids)
    End If
    
    
    Klammern = ""
    
    If sql(3) <> "" Then
        For Klammercounter = 0 To sql(3) - 1 Step 1
            Klammern = Klammern & "("
        Next Klammercounter
    End If
    
    'Statement mit Y-Achse verbinden
    sqlSelect = sqlSelect & sql(0)
    sqlFrom = Klammern & sqlFrom & sql(1)
    sqlGroupBy = sqlGroupBy & sql(2)

    'Gr|fffd||fffd|e
    sql = Get_Achse(Class_Functions.DB.Recordset!Size_Art, Class_Functions.DB.Recordset!Size_ID_Value, "Gr", pj_ids) '!!!!!
    
    
    Klammern = ""
    
    If sql(3) <> "" Then
        For Klammercounter = 0 To sql(3) - 1 Step 1
            Klammern = Klammern & "("
        Next Klammercounter
    End If
    
    'Statement mit Gr|fffd||fffd|e verbinden
    sqlSelect = sqlSelect & sql(0)
    sqlFrom = Klammern & sqlFrom & sql(1)
    sqlGroupBy = sqlGroupBy & sql(2)

    'Farbe
    sql = Get_Achse(Class_Functions.DB.Recordset!Color_Art, Class_Functions.DB.Recordset!Color_ID, "Farbe", pj_ids) '!!!!!
    
    
    Klammern = ""
    
    If sql(3) <> "" Then
        For Klammercounter = 0 To sql(3) - 1 Step 1
            Klammern = Klammern & "("
        Next Klammercounter
    End If
    
    'Statement mit Farbe verbinden
    sqlSelect = sqlSelect & sql(0)
    sqlFrom = " FROM " & Klammern & sqlFrom & sql(1)
'    sqlGroupBy = sqlGroupBy & sql(2)
    
    statement = sqlSelect & sqlFrom & sqlwhere '& sqlGroupBy
    
    'Daten in Tabelle eintragen
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            listCount = Class_Functions.DB.GetRecordCount(statement)

            'Zeilenformate auf ListCount anpassen
            nlc_ppf_pipe.Range("C64").value = "1"
            nlc_ppf_pipe.Range("C64:M64").Select
            If 64 + listCount - 1 > 64 Then
                Selection.AutoFill Destination:=nlc_ppf_pipe.Range("C64:M" & 64 + listCount - 1), Type:=xlFillDefault
            End If
            
            nlc_ppf_pipe.Range("D64").CopyFromRecordset Class_Functions.DB.Recordset
        End If
    End If
End Sub

Public Sub get_PjRessList(Monat As String, Jahr As String, Ressart As String)
    Dim i As Integer
    Dim pj_ids As String
    Dim filter_id As String
    
    filter_id = SQL_Abfragen.Get_Setting_Rhg_Value(calc_master.Range("last_rhg_ID").value, "FK_Filter")
    pj_ids = nlc_filter.get_Filter(filter_id)
    
    'pr|fffd|fen ob es sich um eine Gruppe oder einer Ressourcenart handelt
    Dim c
    Dim FindValue As String
    
    With calc_frm_masterdata.Range("frm_Ressourcenarten")
        Set c = .Find(Ressart, LookIn:=xlValues, LookAt:=xlWhole)
        If Not c Is Nothing Then
            FindValue = .Cells(c.row - 3, 1).value
        Else
            FindValue = ""
        End If
    End With
    
    If FindValue = "" Then
        statement = "SELECT " & _
                        "KatWert.Wert, RessVert.Aufwand " & _
                    "FROM " & _
                        "((((([DB_Projekte] AS PJ LEFT OUTER JOIN " & _
                        "[DB_Kategoriewerte] As KatWert ON PJ.ID = KatWert.FK_Projekte) RIGHT OUTER JOIN " & _
                        "[DB_Ressourcenverteilung] As RessVert ON PJ.ID = RessVert.FK_Projekte) LEFT OUTER JOIN " & _
                        "[DB_Ressourcen] AS Ress ON RessVert.FK_Ressourcen = Ress.ID) LEFT OUTER JOIN " & _
                        "[DB_Ressourcenarten] RessArt ON Ress.FK_Ressourcenarten = RessArt.ID) LEFT OUTER JOIN " & _
                        "[DB_Language] AS Lang ON RessArt.FK_Language_Shortname = Lang.Term) " & _
                    "WHERE " & _
                        "(Lang.deutsch = '" & Ressart & "') AND " & _
                        "(RessVert.Monat = " & Monat & ") AND " & _
                        "(RessVert.Jahr = " & Jahr & ") AND " & _
                        "(KatWert.FK_Kategorie = 8) AND " & _
                        "PJ.ID in (" & pj_ids & ") AND PJ.active <> 0"
    Else
        statement = "SELECT " & _
                        "KatWert.Wert, SUM(RessVert.Aufwand) " & _
                    "FROM " & _
                        "((((([DB_Projekte] AS PJ LEFT OUTER JOIN " & _
                        "[DB_Kategoriewerte] As KatWert ON PJ.ID = KatWert.FK_Projekte) RIGHT OUTER JOIN " & _
                        "[DB_Ressourcenverteilung] As RessVert ON PJ.ID = RessVert.FK_Projekte) LEFT OUTER JOIN " & _
                        "[DB_Ressourcen] AS Ress ON RessVert.FK_Ressourcen = Ress.ID) LEFT OUTER JOIN " & _
                        "[DB_Ressourcenarten] RessArt ON Ress.FK_Ressourcenarten = RessArt.ID) LEFT OUTER JOIN " & _
                        "[DB_Language] AS Lang ON RessArt.FK_Language_Shortname = Lang.Term) " & _
                    "WHERE " & _
                        "(RessVert.Monat = " & Monat & ") AND " & _
                        "(RessVert.Jahr = " & Jahr & ") AND " & _
                        "(KatWert.FK_Kategorie = 8) AND " & _
                        "PJ.ID in (" & pj_ids & ") AND PJ.active <> 0 AND " & _
                        "RessArt.FK_Ressourcenarten = " & FindValue & " " & _
                    "GROUP BY " & _
                        "KatWert.Wert"

    End If
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            i = Class_Functions.DB.GetRecordCount(statement)
            
            calc_frm_masterdata.Range("BF4").CopyFromRecordset Class_Functions.DB.Recordset
        End If
    End If
    
    If i + 3 >= 4 Then
        ActiveWorkbook.Names.add name:="frm_pj_ress_list", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(4, 58), calc_frm_masterdata.Cells(i + 3, 59))
    Else
        calc_frm_masterdata.Range(calc_frm_masterdata.Cells(4, 58), calc_frm_masterdata.Cells(4, 59)).ClearContents
        ActiveWorkbook.Names.add name:="frm_pj_ress_list", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(4, 58), calc_frm_masterdata.Cells(4, 59))
    End If
        
End Sub

'TODO Statements dynamisch aufbauen bzw. in einzelne Statements zerst|fffd|ckeln
Public Sub Get_MatrixCalc(pj_ids As String)
    Dim sqlSelect As String
    Dim sqlFrom  As String
    Dim sqlGroupBy As String
    Dim listCount As Integer
    Dim sql_statement_exists As Boolean
    Dim sqlwhere As String
    Dim Klammercounter As Integer
    Dim Klammern As String
    
    Dim sql() As String
    
    nlc_ppf_matrix.Range("C96:P10000").ClearContents
    
    nlc_ppf_matrix.Range("C97:M10000").clear
    
    If pj_ids <> "" Then
        sqlwhere = " WHERE PJ.ID in (" & pj_ids & ")"
    End If
    
    'Projekt-Code + Projektname
    sqlSelect = "SELECT " & _
                    "Kat_PJShortName.wert, " & _
                    "Kat_PJName.wert "
    'FROM wird erst am ende hinzugef|fffd|gt, da zwischendurch die Klammern kommen!
    sqlFrom = "" & _
                    "(([DB_Projekte] AS PJ LEFT JOIN " & _
                        "[DB_Kategoriewerte] AS Kat_PJName ON (PJ.ID = Kat_PJName.FK_Projekte AND Kat_PJName.FK_Kategorie = 11)) LEFT JOIN " & _
                        "[DB_Kategoriewerte] AS Kat_PJShortName ON (PJ.ID = Kat_PJShortName.FK_Projekte AND Kat_PJShortName.FK_Kategorie = 8)) "
    sqlGroupBy = " GROUP BY " & _
                            "Kat_PJShortName.wert, PJ.ID, Kat_PJName.wert"
    
    'Werte aus DB Settings Pipe holen um sie weiter zu verarbeiten...
    
    
    'X-Achse
    sql = Get_Achse(Class_Functions.DB.Recordset!X_Art, Class_Functions.DB.Recordset!X_ID_Value, "X", pj_ids)
    
    Klammern = ""
    
    If sql(3) <> "" Then
        For Klammercounter = 0 To sql(3) - 1 Step 1
            Klammern = Klammern & "("
        Next Klammercounter
    End If
    
    'Statement mit X-Achse verbinden
    sqlSelect = sqlSelect & sql(0)
    sqlFrom = Klammern & sqlFrom & sql(1)
    sqlGroupBy = sqlGroupBy & sql(2)

    'Y-Achse
    sql = Get_Achse(Class_Functions.DB.Recordset!Y_Art, Class_Functions.DB.Recordset!Y_ID_Value, "Y", pj_ids)
    
    Klammern = ""
    
    If sql(3) <> "" Then
        For Klammercounter = 0 To sql(3) - 1 Step 1
            Klammern = Klammern & "("
        Next Klammercounter
    End If
    
    'Statement mit Y-Achse verbinden
    sqlSelect = sqlSelect & sql(0)
    sqlFrom = Klammern & sqlFrom & sql(1)
    sqlGroupBy = sqlGroupBy & sql(2)

    'Gr|fffd||fffd|e
    sql = Get_Achse(Class_Functions.DB.Recordset!Size_Art, Class_Functions.DB.Recordset!Size_ID_Value, "Gr", pj_ids) '!!!!!

    Klammern = ""
    If sql(3) <> "" Then
        For Klammercounter = 0 To sql(3) - 1 Step 1
            Klammern = Klammern & "("
        Next Klammercounter
    End If
    
    'Statement mit Gr|fffd||fffd|e verbinden
    sqlSelect = sqlSelect & sql(0)
    sqlFrom = Klammern & sqlFrom & sql(1)
    sqlGroupBy = sqlGroupBy & sql(2)

    'Farbe
    sql = Get_Achse(Class_Functions.DB.Recordset!Color_Art, Class_Functions.DB.Recordset!Color_ID, "Farbe", pj_ids) '!!!!!
    
    Klammern = ""
    
    If sql(3) <> "" Then
        For Klammercounter = 0 To sql(3) - 1 Step 1
            Klammern = Klammern & "("
        Next Klammercounter
    End If
    
    'Statement mit Farbe verbinden
    sqlSelect = sqlSelect & sql(0)
    sqlFrom = " FROM " & Klammern & sqlFrom & sql(1)
    sqlGroupBy = sqlGroupBy & sql(2)
    
    statement = sqlSelect & sqlFrom & sqlwhere & sqlGroupBy
    
    'Daten in Tabelle eintragen
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            listCount = Class_Functions.DB.GetRecordCount(statement)

            'Zeilenformate auf ListCount anpassen
            nlc_ppf_matrix.Range("C96").value = "1"
            nlc_ppf_matrix.Range("C96:M96").Select
            If 96 + listCount - 1 > 96 Then
                Selection.AutoFill Destination:=nlc_ppf_matrix.Range("C96:M" & 96 + listCount - 1), Type:=xlFillDefault
            End If
            
            nlc_ppf_matrix.Range("D96").CopyFromRecordset Class_Functions.DB.Recordset
        End If
    End If
End Sub

Public Sub Get_PieCalc()
    nlc_ppf_pie.Range("D43:G63").ClearContents
    
    Dim Area As String
    Dim name As String
    Dim counter As Integer
    Dim sec_counter As Integer
    Dim pj_ids As String
    
    counter = 43
    
    statement = "SELECT " & _
                    "PieSettings.ID, " & _
                    "PieSettings.Name, " & _
                    "PieSettings.FK_Filter, " & _
                    "PieSettings.Value_Art, " & _
                    "PieSettings.Value_ID_Value, " & _
                    "PieSettings.Cluster_Art, " & _
                    "PieSettings.Cluster_ID_Value, " & _
                    "ShowArea.deutsch AS Area, " & _
                    "PieSettings.Math " & _
                "FROM " & _
                    "[DB_Settings_PieChart] AS PieSettings " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Language] AS ShowArea ON PieSettings.FK_Language_AreaDescr = ShowArea.Term " & _
                "WHERE " & _
                    "(PieSettings.ID = " & calc_master.Range("last_pie_ID") & ")"
    
    'Daten in Tabelle eintragen
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            On Error GoTo EmptyError
            pj_ids = nlc_filter.get_Filter(Class_Functions.DB.Recordset!FK_Filter)
            
            Call Get_Pie_Statement(Class_Functions.DB.Recordset!Value_Art, Class_Functions.DB.Recordset!Value_ID_Value, Class_Functions.DB.Recordset!Cluster_Art, Class_Functions.DB.Recordset!Cluster_ID_Value, N2hk(Class_Functions.DB.Recordset!Math), pj_ids)
            
            name = Class_Functions.DB.Recordset!name
            Area = Class_Functions.DB.Recordset!Area
            
            If Statement2 <> "" Then
                'Bezeichnung in Tabelle eintragen
                If Class_Functions.DB.Select_Statement(statement) = True Then
                    If Not Class_Functions.DB.Recordset.EOF Then
                        'Werte in Tabelle eintragen (per Schleife um nicht |fffd|ber 21 Felder hinaus zu kommen (rest wird Summiert)
                        While Not Class_Functions.DB.Recordset.EOF
                            nlc_ppf_pie.Cells(counter, 4).value = Class_Functions.DB.Recordset!Shortname
                            nlc_ppf_pie.Cells(counter, 5).value = Class_Functions.DB.Recordset!name
                            nlc_ppf_pie.Cells(counter, 7).FormulaR1C1 = "=IF(RC[-1]="""","""",(RC[-1]/SUM(R43C6:R63C6))*100)"
                            
                            If Class_Functions.DB.Recordset.Fields.count = 3 Then
                                nlc_ppf_pie.Cells(counter, 8).value = Class_Functions.DB.Recordset!farbe
                            End If
                            
                            If counter <> 63 Then
                                counter = counter + 1
                            End If
                            
                            Class_Functions.DB.Recordset.movenext
                        Wend
                        
                        If counter = 63 Then
                            nlc_ppf_pie.Cells(63, 5).value = SQL_Abfragen.Get_Language_Value("other")
                            nlc_ppf_pie.Cells(63, 4).value = SQL_Abfragen.Get_Language_Value("other_short")
                        Else
                            nlc_ppf_pie.Cells(63, 5).value = ""
                            nlc_ppf_pie.Cells(63, 4).value = ""
                            
                        End If
                    End If
                End If
                
                'Werte in Tabelle eintragen
                If Class_Functions.DB.Select_Statement(Statement2) = True Then
                    If Not Class_Functions.DB.Recordset.EOF Then
                        'Werte in Tabelle eintragen (per Schleife um nicht |fffd|ber 21 Felder hinaus zu kommen (rest wird Summiert)
                        While Not Class_Functions.DB.Recordset.EOF
                            sec_counter = 43
                            Do While nlc_ppf_pie.Cells(sec_counter, 4).value <> ""
                                If nlc_ppf_pie.Cells(sec_counter, 4).value = Class_Functions.DB.Recordset!Shortname Or sec_counter = 63 Then
                                    nlc_ppf_pie.Cells(sec_counter, 6).value = Class_Functions.DB.Recordset!wert
                                    Exit Do
                                End If
                                sec_counter = sec_counter + 1
                            Loop
                            
                            If counter <> 63 Then
                                counter = counter + 1
                            End If
                            
                            Class_Functions.DB.Recordset.movenext
                        Wend
                        
                        If counter = 63 Then
                            nlc_ppf_pie.Cells(63, 5).value = SQL_Abfragen.Get_Language_Value("other")
                            nlc_ppf_pie.Cells(63, 4).value = SQL_Abfragen.Get_Language_Value("other_short")
                        Else
                            nlc_ppf_pie.Cells(63, 5).value = ""
                            nlc_ppf_pie.Cells(63, 4).value = ""
                            
                        End If
                    End If
                End If
                
                Statement2 = ""
            Else
                'Daten in Tabelle eintragen
                If Class_Functions.DB.Select_Statement(statement) = True Then
                    If Not Class_Functions.DB.Recordset.EOF Then
                        'Werte in Tabelle eintragen (per Schleife um nicht |fffd|ber 21 Felder hinaus zu kommen (rest wird Summiert)
                        While Not Class_Functions.DB.Recordset.EOF
                            nlc_ppf_pie.Cells(counter, 4).value = Class_Functions.DB.Recordset!Shortname
                            nlc_ppf_pie.Cells(counter, 5).value = Class_Functions.DB.Recordset!name
                            nlc_ppf_pie.Cells(counter, 6).value = nlc_ppf_pie.Cells(counter, 6).value + Class_Functions.DB.Recordset!wert
                            nlc_ppf_pie.Cells(counter, 7).FormulaR1C1 = "=IF(RC[-1]="""","""",(RC[-1]/SUM(R43C6:R63C6))*100)"
                            
                            If Class_Functions.DB.Recordset.Fields.count = 4 Then
                                nlc_ppf_pie.Cells(counter, 8).value = Class_Functions.DB.Recordset!farbe
                            End If
                            
                            If counter <> 63 Then
                                counter = counter + 1
                            End If
                            
                            Class_Functions.DB.Recordset.movenext
                        Wend
                        
                        If counter = 63 Then
                            nlc_ppf_pie.Cells(63, 5).value = SQL_Abfragen.Get_Language_Value("other")
                            nlc_ppf_pie.Cells(63, 4).value = SQL_Abfragen.Get_Language_Value("other_short")
                        Else
                            nlc_ppf_pie.Cells(63, 5).value = ""
                            nlc_ppf_pie.Cells(63, 4).value = ""
                            
                        End If
                    End If
                End If
            End If
            
            'Diagramm formatieren
            nlc_ppf_pie.Calculate
            ActiveSheet.ChartObjects("PieChart").Activate
            If Area = "Wert" Then
                ActiveChart.SetElement (msoElementDataLabelOutSideEnd)
                ActiveChart.SeriesCollection(1).DataLabels.ShowValue = True
                ActiveChart.SeriesCollection(1).DataLabels.ShowPercentage = False
            ElseIf Area = "keine" Then
                ActiveChart.SetElement (msoElementDataLabelNone)
'                ActiveChart.SeriesCollection(1).DataLabels.ShowValue = False
'                ActiveChart.SeriesCollection(1).DataLabels.ShowPercentage = False
            Else
                ActiveChart.SetElement (msoElementDataLabelOutSideEnd)
                ActiveChart.SeriesCollection(1).DataLabels.ShowValue = False
                ActiveChart.SeriesCollection(1).DataLabels.ShowPercentage = True
            End If
        End If
    End If
    
    'Datenquelle definieren
    For counter = 63 To 43 Step -1
        If nlc_ppf_pie.Cells(counter, 10) > 0 Then Exit For
    Next counter
    
    ActiveSheet.ChartObjects("PieChart").Activate
    ActiveChart.SetSourceData Source:=nlc_ppf_pie.Range("D43:D" & counter & ",F43:F" & counter)
    
    Exit Sub
    
EmptyError:
    MsgBox "Fehler beim generieren des Pie-Charts."
    Exit Sub
End Sub

Public Sub Get_BarCalc()
    nlc_ppf_bar.Range("D56:Y76").ClearContents
    nlc_ppf_bar.Range("F55:Y55").ClearContents
    
    Dim Area As String
    Dim name As String
    Dim counter As Integer
    Dim sec_counter As Integer
    Dim pj_ids As String
    Dim WertID As String
    
    counter = 56
    
    statement = "SELECT " & _
                    "BarSettings.ID, " & _
                    "BarSettings.Name, " & _
                    "BarSettings.FK_Filter, " & _
                    "BarSettings.X_Art, " & _
                    "BarSettings.X_ArtDetail, " & _
                    "BarSettings.X_Groups, " & _
                    "BarSettings.RessColor, " & _
                    "BarSettings.Y_Art, " & _
                    "BarSettings.Y_Shortname, " & _
                    "BarSettings.Math " & _
                "FROM " & _
                    "[DB_Settings_BarChart] AS BarSettings " & _
                "WHERE " & _
                    "(BarSettings.ID = " & calc_master.Range("last_bar_ID") & ")"
    
    'Daten in Tabelle eintragen
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            WertID = Class_Functions.DB.Recordset!X_ArtDetail
            pj_ids = nlc_filter.get_Filter(Class_Functions.DB.Recordset!FK_Filter)
            
            Call Get_Bar_Statement(calc_master.Range("last_bar_ID"), Class_Functions.DB.Recordset!X_Art, Class_Functions.DB.Recordset!X_ArtDetail, Class_Functions.DB.Recordset!Y_Shortname, Class_Functions.DB.Recordset!Math, Class_Functions.DB.Recordset!X_Groups, pj_ids)
            
            name = Class_Functions.DB.Recordset!name
            
            'Bezeichnung in Tabelle eintragen
            If Class_Functions.DB.Select_Statement(statement) = True Then
                If Not Class_Functions.DB.Recordset.EOF Then
                    counter = 6
                    While Not Class_Functions.DB.Recordset.EOF
                        nlc_ppf_bar.Cells(55, counter).value = Class_Functions.DB.Recordset!Lang
                        
                        Class_Functions.DB.Recordset.movenext
                        counter = counter + 1
                    Wend
                    
                    
                    nlc_ppf_bar.Calculate
                End If
            End If
            
            Dim Rng1 As Range
            Set Rng1 = Union(nlc_ppf_bar.Range("D55:D76"), nlc_ppf_bar.Range("F55:" & VBA.Split(Cells(1, counter - 1).Address, "$")(1) & "76"))
                
            'Werte in Tabelle eintragen
            If Class_Functions.DB.Select_Statement(Statement2) = True Then
                If Not Class_Functions.DB.Recordset.EOF Then
                    'Werte in Tabelle eintragen (per Schleife um nicht |fffd|ber 21 Felder hinaus zu kommen (rest wird Summiert)
                    While Not Class_Functions.DB.Recordset.EOF
                        counter = 6
                        sec_counter = 56
                        
                        'Zuerst Zeilen durchgehen. Wenn Wertname vorhanden, dann spalte suchen sonst neu anlegen
                        For sec_counter = 56 To 76 Step 1
                            If VBA.IsNull(Class_Functions.DB.Recordset!name) Then
                                Exit For
                            End If
                            
                            If sec_counter = 76 Then
                                For counter = 6 To 6 + 19 Step 1
                                    If nlc_ppf_bar.Cells(55, counter).value = Class_Functions.DB.Recordset!KatName Then
                                        If WertID = 9 Then
                                            nlc_ppf_bar.Cells(sec_counter, counter).value = nlc_ppf_bar.Cells(sec_counter, counter).value + (Class_Functions.DB.Recordset!wert * 100)
                                        Else
                                            nlc_ppf_bar.Cells(sec_counter, counter).value = nlc_ppf_bar.Cells(sec_counter, counter).value + Class_Functions.DB.Recordset!wert
                                        End If
                                        Exit For
                                    End If
                                Next counter
                            ElseIf nlc_ppf_bar.Cells(sec_counter, 5).value = Class_Functions.DB.Recordset!name Then
                                For counter = 6 To 6 + 19 Step 1
                                    If nlc_ppf_bar.Cells(55, counter).value = Class_Functions.DB.Recordset!KatName Then
                                        If VBA.IsNumeric(WertID) Then
                                            If WertID = 9 Then
                                                nlc_ppf_bar.Cells(sec_counter, counter).value = nlc_ppf_bar.Cells(sec_counter, counter).value + (Class_Functions.DB.Recordset!wert * 100)
                                            Else
                                                nlc_ppf_bar.Cells(sec_counter, counter).value = nlc_ppf_bar.Cells(sec_counter, counter).value + Class_Functions.DB.Recordset!wert
                                            End If
                                        Else
                                            nlc_ppf_bar.Cells(sec_counter, counter).value = nlc_ppf_bar.Cells(sec_counter, counter).value + Class_Functions.DB.Recordset!wert
                                        End If
                                        Exit For
                                    End If
                                Next counter
                                
                                Exit For
                            ElseIf nlc_ppf_bar.Cells(sec_counter, 5).value = "" Then
                                nlc_ppf_bar.Cells(sec_counter, 4).value = Class_Functions.DB.Recordset!Shortname
                                nlc_ppf_bar.Cells(sec_counter, 5).value = Class_Functions.DB.Recordset!name
                                
                                For counter = 6 To 6 + 19 Step 1
                                    If nlc_ppf_bar.Cells(55, counter).value = Class_Functions.DB.Recordset!KatName Then
                                        If VBA.IsNumeric(WertID) Then
                                            If WertID = 9 Then
                                                nlc_ppf_bar.Cells(sec_counter, counter).value = nlc_ppf_bar.Cells(sec_counter, counter).value + (Class_Functions.DB.Recordset!wert * 100)
                                            Else
                                                nlc_ppf_bar.Cells(sec_counter, counter).value = nlc_ppf_bar.Cells(sec_counter, counter).value + Class_Functions.DB.Recordset!wert
                                            End If
                                        Else
                                            nlc_ppf_bar.Cells(sec_counter, counter).value = nlc_ppf_bar.Cells(sec_counter, counter).value + Class_Functions.DB.Recordset!wert
                                        End If
                                        Exit For
                                    End If
                                Next counter
                                
                                Exit For
                            End If
                        Next sec_counter

                        If sec_counter > 76 Then
                            nlc_ppf_bar.Cells(76, 5).value = "a"
                        End If

                        Class_Functions.DB.Recordset.movenext
                    Wend
                    
                    If nlc_ppf_bar.Cells(76, 5).value = "a" Then
                        nlc_ppf_bar.Cells(76, 5).value = SQL_Abfragen.Get_Language_Value("other")
                        nlc_ppf_bar.Cells(76, 4).value = SQL_Abfragen.Get_Language_Value("other_short")
                    Else
                        nlc_ppf_bar.Cells(76, 5).value = ""
                        nlc_ppf_bar.Cells(76, 4).value = ""

                    End If
                End If
            End If
        
            ActiveSheet.ChartObjects("BarChart").Select
            ActiveChart.SetSourceData Source:=Rng1, PlotBy:=xlRows
            
            Statement2 = ""
        End If
    End If
End Sub

Public Function Get_RessHisto_Calc(Template As String)
    nlc_ppf_resshisto.Range("D57:Y78").ClearContents
    
    Dim Monat As Integer
    Dim group As Boolean
    Dim counter As Integer
    Dim where As String
    Dim pj_ids As String
    Dim filter_id As String
    
    filter_id = SQL_Abfragen.Get_Setting_Rhg_Value(calc_master.Range("last_rhg_ID").value, "FK_Filter")
    pj_ids = nlc_filter.get_Filter(filter_id)
    
    If pj_ids <> "" Then
        where = "AND RessVerteilung.FK_Projekte in (" & pj_ids & ") "
    End If
    
    nlc_ppf_resshisto.Range("RessHisto_Jahr").value = VBA.Year(VBA.Now)
    
    'erst abfragen ob gruppe oder nicht, wenn gruppe dann ressourcen summieren!!!
    statement = "SELECT " & _
                    "Groups " & _
                "FROM " & _
                    "[DB_Settings_RessHisto] " & _
                "WHERE " & _
                    "ID = " & Template
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            group = Class_Functions.DB.Recordset!Groups
        Else
            group = False
        End If
    End If
    
    Call SQL_Abfragen.Get_AllRessourcenarten
    
    If group = False Then 'Wenn keine Gruppen
        statement = "SELECT Lang_Name.deutsch AS Name, Lang_Shortname.deutsch AS Shortname, RessVerteilung.Monat, RessVerteilung.Jahr, SUM(RessVerteilung.Aufwand) AS RessAufwand, MAX(SetCost.Year) AS OriginalYear " & _
                    "From " & _
                        "((((((([DB_Settings_RessHisto] AS SetCost LEFT JOIN " & _
                        "[DB_Settings_RessHisto_RA] AS Settings ON SetCost.ID = Settings.FK_Settings_RessHisto) LEFT JOIN " & _
                        "[DB_Ressourcenarten] AS Ressarten ON Settings.FK_Ressourcenarten = Ressarten.ID) LEFT JOIN " & _
                        "[DB_Language] AS Lang_Name ON Ressarten.FK_Language_Name = Lang_Name.Term) LEFT JOIN " & _
                        "[DB_Language] AS Lang_Shortname ON Ressarten.FK_Language_Shortname = Lang_Shortname.Term) LEFT JOIN " & _
                        "[DB_Ressourcen] AS Ress ON Ressarten.ID = Ress.FK_Ressourcenarten) LEFT JOIN " & _
                        "[DB_Ressourcenverteilung] AS RessVerteilung ON Ress.ID = RessVerteilung.FK_Ressourcen) LEFT JOIN " & _
                        "(SELECT RessHisto.FK_Ressourcenarten AS RA, SUM(RessVerteilung.Aufwand) As wert " & _
                        "FROM " & _
                            "((([DB_Ressourcenarten] AS Ressarten LEFT OUTER JOIN [DB_Ressourcen] AS Ress ON Ressarten.ID = Ress.FK_Ressourcenarten) LEFT OUTER JOIN " & _
                            "[DB_Ressourcenverteilung] AS Ressverteilung ON Ress.ID = Ressverteilung.FK_Ressourcen) RIGHT OUTER JOIN [DB_Settings_RessHisto_RA] AS RessHisto ON Ressarten.ID = RessHisto.FK_Ressourcenarten) " & _
                        "WHERE " & _
                            "(RessHisto.FK_Settings_RessHisto = 22) AND RessVerteilung.FK_Projekte in (13,14,15,16,17,18,19,20,21,22,23,24) AND ((Ressverteilung.Jahr = (SELECT [DB_Settings_RessHisto].Year From [DB_Settings_RessHisto] where ID= 22) - 1) AND " & _
                            "(Ressverteilung.Monat >= 10) OR (RessHisto.FK_Settings_RessHisto = 22) AND (Ressverteilung.Jahr = (SELECT [DB_Settings_RessHisto].Year From [DB_Settings_RessHisto] where ID= 22)) OR " & _
                            "(RessHisto.FK_Settings_RessHisto = 22) AND (Ressverteilung.Jahr = (SELECT [DB_Settings_RessHisto].Year From [DB_Settings_RessHisto] where ID= 22) + 1) AND (Ressverteilung.Monat <= 3)) " & _
                        "group BY " & _
                            "RessHisto.FK_Ressourcenarten) AS Vert  ON Vert.RA = Ressarten.ID) " & _
                    "WHERE (SetCost.ID = " & Template & ") AND ((RessVerteilung.Jahr = SetCost.Year - 1) AND (RessVerteilung.Monat >= 10) OR " & _
                        "(RessVerteilung.Jahr = SetCost.Year) OR (RessVerteilung.Jahr = SetCost.Year + 1) AND (RessVerteilung.Monat <= 3) OR " & _
                        "(RessVerteilung.Jahr IS NULL)) " & where & _
                    "GROUP BY Vert.Wert, RessVerteilung.FK_Ressourcen, RessVerteilung.Monat, RessVerteilung.Jahr, Lang_Name.deutsch, Lang_Shortname.deutsch " & _
                    "ORDER BY Vert.Wert DESC, Lang_Name.deutsch, RessVerteilung.Jahr, RessVerteilung.Monat, MAX(SetCost.Year)"
                 
        'Daten in Tabelle eintragen
        If Class_Functions.DB.Select_Statement(statement) = True Then
            If Not Class_Functions.DB.Recordset.EOF Then
                counter = 57
                
                nlc_ppf_resshisto.Range("RessHisto_Jahr").value = Class_Functions.DB.Recordset!OriginalYear
                
                While Not Class_Functions.DB.Recordset.EOF
                    If Not IsNull(Class_Functions.DB.Recordset!Monat) Then
                        Monat = Class_Functions.DB.Recordset!Monat
                    Else
                        Monat = 0
                    End If
                    
                    If nlc_ppf_resshisto.Cells(counter, 5).value = "" Then
                        'erste mal Datensatz anlegen
                        nlc_ppf_resshisto.Cells(counter, 5).value = Class_Functions.DB.Recordset!name
                        nlc_ppf_resshisto.Cells(counter, 4).value = Class_Functions.DB.Recordset!Shortname
                    End If
                    
                    If nlc_ppf_resshisto.Cells(counter, 5).value <> Class_Functions.DB.Recordset!name Then
                        'neuer Datensatz anlegen weil Ressart nicht mehr passt
                        If counter <> 77 Then 'Wenn Counter = 77 (letzte Zeile) dann nicht mehr erh|fffd|hen, da diese eine Sonstiges Zeile ist!
                            counter = counter + 1
                        End If
                        
                        nlc_ppf_resshisto.Cells(counter, 5).value = Class_Functions.DB.Recordset!name
                        nlc_ppf_resshisto.Cells(counter, 4).value = Class_Functions.DB.Recordset!Shortname
                    End If
                    
                    If Monat > 0 Then
                        'Werte zu vorhandenen Werten dazu z|fffd|hlen
                        If (Class_Functions.DB.Recordset!OriginalYear - 1 = Class_Functions.DB.Recordset!Jahr) Then
                            'Vorjahr bef|fffd|llen
                            nlc_ppf_resshisto.Cells(counter, 5 + (Monat - 9)).value = nlc_ppf_resshisto.Cells(counter, 5 + (Monat - 9)).value + Class_Functions.DB.Recordset!RessAufwand
                        ElseIf (Class_Functions.DB.Recordset!OriginalYear = Class_Functions.DB.Recordset!Jahr) Then
                            'Monate bef|fffd|llen
                            nlc_ppf_resshisto.Cells(counter, 8 + Monat).value = nlc_ppf_resshisto.Cells(counter, 8 + Monat).value + Class_Functions.DB.Recordset!RessAufwand
                        ElseIf (Class_Functions.DB.Recordset!OriginalYear + 1 = Class_Functions.DB.Recordset!Jahr) Then
                            'Folgejahr bef|fffd|llen
                            nlc_ppf_resshisto.Cells(counter, 20 + Monat).value = nlc_ppf_resshisto.Cells(counter, 20 + Monat).value + Class_Functions.DB.Recordset!RessAufwand
                        End If
                    End If
                    
                    Class_Functions.DB.Recordset.movenext
                Wend
                
                If counter = 77 Then
                    nlc_ppf_resshisto.Cells(counter, 5).value = SQL_Abfragen.Get_Language_Value("other")
                    nlc_ppf_resshisto.Cells(counter, 4).value = SQL_Abfragen.Get_Language_Value("other_short")
                    nlc_ppf_resshisto.Range("RessHisto_sonstige").value = nlc_ppf_resshisto.Cells(counter, 5).value
                Else
                    nlc_ppf_resshisto.Cells(77, 5).value = ""
                    nlc_ppf_resshisto.Cells(77, 4).value = ""
                    nlc_ppf_resshisto.Range("RessHisto_sonstige").value = ""
                End If
            End If
        End If
    Else 'Wenn Gruppen
        statement = "SELECT " & _
                        "Lang_Shortname." & calc_master.Range("aktuelle_sprache").value & " AS Shortname, " & _
                        "Lang_Name." & calc_master.Range("aktuelle_sprache").value & " AS Name, " & _
                        "Ressarten.ID, Set_RessHisto.Year " & _
                    "FROM " & _
                        "((((([DB_Settings_RessHisto] AS Set_RessHisto LEFT OUTER JOIN " & _
                        "[DB_Settings_RessHisto_RA] AS Set_RessHisto_RA ON Set_RessHisto.ID = Set_RessHisto_RA.FK_Settings_RessHisto) LEFT OUTER JOIN " & _
                        "[DB_Ressourcenarten] AS Ressarten ON Set_RessHisto_RA.FK_Ressourcenarten = Ressarten.ID) LEFT OUTER JOIN " & _
                        "[DB_Language] AS Lang_Name ON Ressarten.FK_Language_Name = Lang_Name.Term) LEFT OUTER JOIN " & _
                        "[DB_Language] AS Lang_Shortname ON Ressarten.FK_Language_Shortname = Lang_Shortname.Term)  LEFT OUTER JOIN " & _
                        "(SELECT RessHisto.FK_Ressourcenarten AS RA, SUM(RessVerteilung.Aufwand) As wert " & _
                        "From " & _
                            "((([DB_Ressourcenarten] AS Ressarten LEFT OUTER JOIN [DB_Ressourcen] AS Ress ON Ressarten.ID = Ress.FK_Ressourcenarten) LEFT OUTER JOIN " & _
                            "[DB_Ressourcenverteilung] AS Ressverteilung ON Ress.ID = Ressverteilung.FK_Ressourcen) RIGHT OUTER JOIN [DB_Settings_RessHisto_RA] AS RessHisto ON Ressarten.FK_Ressourcenarten = RessHisto.FK_Ressourcenarten) " & _
                        "where " & _
                            "(RessHisto.FK_Settings_RessHisto = 22) AND ((Ressverteilung.Jahr = (SELECT [DB_Settings_RessHisto].Year From [DB_Settings_RessHisto] WHERE ID= 22) - 1) AND " & _
                            "(Ressverteilung.Monat >= 10) OR (RessHisto.FK_Settings_RessHisto = 22) AND (Ressverteilung.Jahr = (SELECT [DB_Settings_RessHisto].Year From [DB_Settings_RessHisto] WHERE ID= 22)) OR " & _
                            "(RessHisto.FK_Settings_RessHisto = 22) AND (Ressverteilung.Jahr = (SELECT [DB_Settings_RessHisto].Year From [DB_Settings_RessHisto] WHERE ID= 22) + 1) AND (Ressverteilung.Monat <= 3)) AND " & _
                            "RessVerteilung.FK_Projekte in (13,14,15,16,17,18,19,20,21,22,23,24) " & _
                        "group BY " & _
                            "RessHisto.FK_Ressourcenarten) AS Vert ON Vert.RA = Ressarten.FK_Ressourcenarten) " & _
                    "WHERE (Set_RessHisto_RA.FK_Settings_RessHisto = " & Template & ") " & _
                    "GROUP BY Vert.Wert, Lang_Shortname.deutsch, Lang_Name.deutsch, Ressarten.ID, Set_RessHisto.Year " & _
                    "ORDER BY Vert.Wert DESC"
                        
        'Bezeichnungen in Tabelle eintragen
        If Class_Functions.DB.Select_Statement(statement) = True Then
            If Not Class_Functions.DB.Recordset.EOF Then
                counter = 57
                nlc_ppf_resshisto.Range("RessHisto_Jahr").value = Class_Functions.DB.Recordset!Year
                
                While Not Class_Functions.DB.Recordset.EOF
                    If nlc_ppf_resshisto.Cells(counter, 5).value = "" Then
                        'erste mal Datensatz anlegen
                        nlc_ppf_resshisto.Cells(counter, 5).value = Class_Functions.DB.Recordset!name
                        nlc_ppf_resshisto.Cells(counter, 4).value = Class_Functions.DB.Recordset!Shortname
                        nlc_ppf_resshisto.Cells(counter, 25).value = Class_Functions.DB.Recordset!ID
                    End If
                    
                    If nlc_ppf_resshisto.Cells(counter, 5).value <> Class_Functions.DB.Recordset!name Then
                        'neuer Datensatz anlegen weil Ressart nicht mehr passt
                        If counter <> 77 Then 'Wenn Counter = 77 (letzte Zeile) dann nicht mehr erh|fffd|hen, da diese eine Sonstiges Zeile ist!
                            counter = counter + 1
                        End If
                        
                        nlc_ppf_resshisto.Cells(counter, 5).value = Class_Functions.DB.Recordset!name
                        nlc_ppf_resshisto.Cells(counter, 4).value = Class_Functions.DB.Recordset!Shortname
                        nlc_ppf_resshisto.Cells(counter, 25).value = Class_Functions.DB.Recordset!ID
                    End If
                    
                    Class_Functions.DB.Recordset.movenext
                Wend
                
                If counter = 77 Then
                    nlc_ppf_resshisto.Cells(counter, 5).value = SQL_Abfragen.Get_Language_Value("other")
                    nlc_ppf_resshisto.Cells(counter, 4).value = SQL_Abfragen.Get_Language_Value("other_short")
                    nlc_ppf_resshisto.Range("RessHisto_sonstige").value = nlc_ppf_resshisto.Cells(counter, 5).value
                Else
                    nlc_ppf_resshisto.Cells(77, 5).value = ""
                    nlc_ppf_resshisto.Cells(77, 4).value = ""
                    nlc_ppf_resshisto.Range("RessHisto_sonstige").value = ""
                End If
            End If
        End If
        
        'Ressourcenarten gruppieren und summieren
        statement = "SELECT " & _
                        "Ressverteilung.Monat, " & _
                        "Ressverteilung.Jahr, " & _
                        "SUM(Ressverteilung.Aufwand) AS RessAufwand, " & _
                        "RessHisto.FK_Ressourcenarten " & _
                    "FROM " & _
                        "((([DB_Ressourcenarten] AS Ressarten LEFT OUTER JOIN " & _
                        "[DB_Ressourcen] AS Ress ON Ressarten.ID = Ress.FK_Ressourcenarten) LEFT OUTER JOIN " & _
                        "[DB_Ressourcenverteilung] AS Ressverteilung ON Ress.ID = Ressverteilung.FK_Ressourcen) RIGHT OUTER JOIN " & _
                        "[DB_Settings_RessHisto_RA] AS RessHisto ON Ressarten.FK_Ressourcenarten = RessHisto.FK_Ressourcenarten) " & _
                    "WHERE " & _
                        "(RessHisto.FK_Settings_RessHisto = " & Template & ") AND " & _
                        "((Ressverteilung.Jahr = " & nlc_ppf_resshisto.Range("RessHisto_Jahr").value & " - 1 AND Ressverteilung.Monat >= 10) OR " & _
                        "(Ressverteilung.Jahr = " & nlc_ppf_resshisto.Range("RessHisto_Jahr").value & ") OR " & _
                        "(Ressverteilung.Jahr = " & nlc_ppf_resshisto.Range("RessHisto_Jahr").value & " + 1 AND Ressverteilung.Monat <= 3)) " & _
                        where & _
                    "GROUP BY " & _
                        "RessHisto.FK_Ressourcenarten, Ressverteilung.Monat, Ressverteilung.Jahr"
                            
        'Werte in Tabelle eintragen
        If Class_Functions.DB.Select_Statement(statement) = True Then
            If Not Class_Functions.DB.Recordset.EOF Then
                counter = 57
                
                While Not Class_Functions.DB.Recordset.EOF
                    If Not IsNull(Class_Functions.DB.Recordset!Monat) Then
                        Monat = Class_Functions.DB.Recordset!Monat
                    Else
                        Monat = 0
                    End If
                    
                    If Monat > 0 Then
                        For counter = 57 To 77 Step 1
                            If nlc_ppf_resshisto.Cells(counter, 25).value = Class_Functions.DB.Recordset!FK_Ressourcenarten Or counter = 77 Then
                                'Werte zu vorhandenen Werten dazu z|fffd|hlen
                                If (nlc_ppf_resshisto.Range("RessHisto_Jahr").value - 1 = Class_Functions.DB.Recordset!Jahr) Then
                                    'Vorjahr bef|fffd|llen
                                    'Monat -8, Spaltenbegin ist 6 + 9.-12. Monat sind 8 Spalten zu viel...
                                    nlc_ppf_resshisto.Cells(counter, 5 + (Monat - 9)).value = nlc_ppf_resshisto.Cells(counter, 5 + (Monat - 9)).value + Class_Functions.DB.Recordset!RessAufwand
                                ElseIf (nlc_ppf_resshisto.Range("RessHisto_Jahr").value = Class_Functions.DB.Recordset!Jahr) Then
                                    'Monate bef|fffd|llen
                                    nlc_ppf_resshisto.Cells(counter, 8 + Monat).value = nlc_ppf_resshisto.Cells(counter, 8 + Monat).value + Class_Functions.DB.Recordset!RessAufwand
                                ElseIf (nlc_ppf_resshisto.Range("RessHisto_Jahr").value + 1 = Class_Functions.DB.Recordset!Jahr) Then
                                    'Folgejahr bef|fffd|llen
                                    nlc_ppf_resshisto.Cells(counter, 20 + Monat).value = nlc_ppf_resshisto.Cells(counter, 20 + Monat).value + Class_Functions.DB.Recordset!RessAufwand
                                End If
                                
                                Exit For
                            End If
                        Next counter
                    End If
                    
                    Class_Functions.DB.Recordset.movenext
                Wend
                
                If counter = 77 Then
                    nlc_ppf_resshisto.Cells(counter, 5).value = SQL_Abfragen.Get_Language_Value("other")
                    nlc_ppf_resshisto.Cells(counter, 4).value = SQL_Abfragen.Get_Language_Value("other_short")
                    nlc_ppf_resshisto.Range("RessHisto_sonstige").value = nlc_ppf_resshisto.Cells(counter, 5).value
                Else
                    nlc_ppf_resshisto.Cells(77, 5).value = ""
                    nlc_ppf_resshisto.Cells(77, 4).value = ""
                    nlc_ppf_resshisto.Range("RessHisto_sonstige").value = ""
                End If
            End If
        End If
    End If
    
    'Verf|fffd|gbarkeit generieren
    Call GenerateVerfuegbarkeit(Template, group)
    nlc_ppf_resshisto.Range("F78").value = nlc_ppf_resshisto.Range("F78").value
End Function

'TODO Statements umschreiben und check Select im Select
Private Sub GenerateVerfuegbarkeit(Template As String, group As Boolean)
    If nlc_ppf_resshisto.Range("RessHisto_Jahr").value = "" Then Exit Sub
    
    'F|fffd|r Gruppen wird das nicht ben|fffd|tigt (Einfach die Summe pro Spalte in die Verf. Zeile schreiben.
    'Check f|fffd|r Ressourcen
    
    Dim Jahr As Integer
    Dim counter As Integer
    Dim ressarten As String

    If group = False Then
        statement = "SELECT " & _
                        "SetRessA.FK_Ressourcenarten AS RessID " & _
                    "FROM " & _
                        "[DB_Settings_RessHisto_RA] AS SetRessA LEFT OUTER JOIN " & _
                        "[DB_Ressourcenarten] AS RessArt ON SetRessA.FK_Ressourcenarten = RessArt.ID " & _
                    "WHERE " & _
                        "(SetRessA.FK_Settings_RessHisto = " & Template & ") And (RessArt.active <> 0)"
    Else
        statement = "SELECT " & _
                        "RessArt.ID AS RessID " & _
                    "FROM " & _
                        "DB_Ressourcenarten AS RessArt " & _
                    "WHERE " & _
                        "RessArt.FK_Ressourcenarten in " & _
                        "(SELECT RessGruppe.fk_Ressourcenarten " & _
                        "FROM [DB_Settings_RessHisto_RA] AS SetRess LEFT OUTER JOIN " & _
                            "[DB_Ressourcenarten] AS RessGruppe ON SetRess.FK_Ressourcenarten = RessGruppe.ID " & _
                        "WHERE " & _
                            "(SetRess.FK_Settings_RessHisto = " & Template & ") AND (RessGruppe.active <> 0)) " & _
                        "AND RessArt.active <> 0 AND RessArt.ID <> RessArt.FK_Ressourcenarten"
    End If

    If Class_Functions.DB.Select_Statement(statement) = True Then
        While Not Class_Functions.DB.Recordset.EOF
            If ressarten = "" Then
                ressarten = Class_Functions.DB.Recordset!RessID
            Else
                ressarten = ressarten & ", " & Class_Functions.DB.Recordset!RessID
            End If
            Class_Functions.DB.Recordset.movenext
        Wend
    End If

    Jahr = nlc_ppf_resshisto.Range("RessHisto_Jahr").value
    
    For counter = 1 To 18 Step 1
        Select Case (counter)
            Case 1:
                statement = get_VerfStatement(counter + 9, VBA.CStr(Jahr - 1), ressarten)
            Case 2 To 3:
                statement = get_VerfStatement(counter + 9, VBA.CStr(Jahr - 1), ressarten)
            Case 4 To 15:
                statement = get_VerfStatement(counter - 3, VBA.CStr(Jahr), ressarten)
            Case 16 To 18:
                statement = get_VerfStatement(counter - 15, VBA.CStr(Jahr + 1), ressarten)
        End Select
        
        If Class_Functions.DB.Select_Statement(statement) = True Then
            If Not Class_Functions.DB.Recordset.EOF Then
                nlc_ppf_resshisto.Range(nlc_ppf_resshisto.Cells(78, counter + 5), nlc_ppf_resshisto.Cells(78, counter + 5)).CopyFromRecordset Class_Functions.DB.Recordset
            End If
        End If
    Next counter
    
    nlc_ppf_resshisto.Cells(78, 4).value = "Verf."
    nlc_ppf_resshisto.Cells(78, 5).value = "Verf|fffd|gbarkeit"
    
    Call GenerateAllVerfuegbarkeit(Template, group)
End Sub

'TODO
Private Function get_VerfStatement(Monat As String, Jahr As String, RessartList As String) As String
    get_VerfStatement = "SELECT SUM(Verfuegbarkeit.Wert) " & _
                                "FROM [DB_Ressourcenarten] LEFT JOIN " & _
                                    "(SELECT  Verfuegbarkeit1.FK_Ressourcenart, Verfuegbarkeit1.Wert " & _
                                    "From " & _
                                        "(SELECT ID, FK_Ressourcenart, " & Class_Functions.DB.Convert(Class_Functions.DB.Convert("Verfuegbarkeit_2.Jahr", T_VARCHAR) & " + '-' + " & Class_Functions.DB.Convert("Verfuegbarkeit_2.Monat", T_VARCHAR) & " + '-01'", T_DATE) & " AS Datum1, Wert " & _
                                        "FROM [Verfuegbarkeit] AS Verfuegbarkeit_2) AS Verfuegbarkeit1 INNER JOIN " & _
                                            "(SELECT FK_Ressourcenart, MAX(" & Class_Functions.DB.Convert(Class_Functions.DB.Convert("Verfuegbarkeit_1.Jahr", T_VARCHAR) & " + '-' + " & Class_Functions.DB.Convert("Verfuegbarkeit_1.Monat", T_VARCHAR) & " + '-01'", T_DATE) & ") AS Datum1 " & _
                                            "FROM  " & _
                                                "[Verfuegbarkeit] AS Verfuegbarkeit_1 " & _
                                            "WHERE ((Verfuegbarkeit_1.Jahr <= " & Jahr & " and Verfuegbarkeit_1.Monat <= " & Monat & ") or Verfuegbarkeit_1.Jahr <= " & Jahr - 1 & ") AND Verfuegbarkeit_1.FK_Ressourcenart in (" & RessartList & ") " & _
                                            "GROUP BY FK_Ressourcenart) " & _
                                  "AS Verfuegbarkeit2 " & _
                             "ON (Verfuegbarkeit1.FK_Ressourcenart = Verfuegbarkeit2.FK_Ressourcenart AND Verfuegbarkeit1.Datum1 = Verfuegbarkeit2.Datum1)) " & _
                        "AS Verfuegbarkeit ON Verfuegbarkeit.FK_Ressourcenart = DB_Ressourcenarten.ID"
End Function

'TODO
Private Function get_VerfStatement2(c As Integer, Monat As String, Jahr As String, RessartList As String) As String
    get_VerfStatement2 = " LEFT JOIN (SELECT DB_Ressourcenarten.FK_Ressourcenarten AS ID, SUM(Verfuegbarkeit.Wert) AS V " & _
                                "FROM [DB_Ressourcenarten] LEFT OUTER JOIN " & _
                                    "(SELECT  Verfuegbarkeit1.FK_Ressourcenart, Verfuegbarkeit1.Wert " & _
                                    "From " & _
                                        "(SELECT ID, FK_Ressourcenart, " & Class_Functions.DB.Convert("Jahr + '-' + Monat + '-01'", T_DATE) & " AS Datum, Wert " & _
                                        "FROM [Verfuegbarkeit] AS Verfuegbarkeit_2) AS Verfuegbarkeit1 INNER JOIN " & _
                                            "(SELECT FK_Ressourcenart, MAX(" & Class_Functions.DB.Convert("Jahr + '-' + Monat + '-01'", T_DATE) & ")  AS Datum " & _
                                            "FROM  [Verfuegbarkeit] " & _
                                                "AS Verfuegbarkeit_1 " & _
                                            "WHERE ((Verfuegbarkeit_1.Jahr <= " & Jahr & " and Verfuegbarkeit_1.Monat <= " & Monat & ") or Verfuegbarkeit_1.Jahr <= " & Jahr - 1 & ") AND Verfuegbarkeit_1.FK_Ressourcenart in (" & RessartList & ") " & _
                                            "GROUP BY FK_Ressourcenart) " & _
                                  "AS Verfuegbarkeit2 " & _
                             "ON Verfuegbarkeit1.FK_Ressourcenart = Verfuegbarkeit2.FK_Ressourcenart AND Verfuegbarkeit1.Datum = Verfuegbarkeit2.Datum) " & _
                        "AS Verfuegbarkeit ON Verfuegbarkeit.FK_Ressourcenart = DB_Ressourcenarten.ID GROUP BY DB_Ressourcenarten.FK_Ressourcenarten) v" & c & " ON ra.ID = v" & c & ".ID)"
End Function

'TODO
Public Function Get_CostHisto_Calc(Template As String)
    nlc_ppf_costhisto.Range("D57:W77").ClearContents

    Dim Monat As Integer
    Dim counter As Integer
    Dim pj_ids As String
    Dim filter_id As String
    Dim where As String
    
    filter_id = SQL_Abfragen.Get_Setting_Chg_Value(calc_master.Range("last_chg_ID").value, "FK_Filter")
    pj_ids = nlc_filter.get_Filter(filter_id)
        
    If pj_ids <> "" Then
        where = "AND CostVerteilung.FK_Projekte in (" & pj_ids & ") "
    End If
    
    nlc_ppf_costhisto.Range("CostHisto_Jahr").value = VBA.Year(VBA.Now)
    
    Call SQL_Abfragen.Get_AllKostenarten

'    statement = "SELECT Lang_Name." & calc_master.range("aktuelle_sprache").value & " AS Name, Lang_Shortname." & calc_master.range("aktuelle_sprache").value & " AS Shortname, CostVerteilung.Monat, CostVerteilung.Jahr, SUM(CostVerteilung.Kosten) As CostAufwand, MAX(SetCost.Year) AS OriginalYear " & _
'                "FROM " & _
'                    "[DB_Settings_CostHisto] AS SetCost LEFT OUTER JOIN " & _
'                        "[DB_Settings_CostHisto_KA] AS Settings ON SetCost.ID = Settings.FK_Settings_CostHisto AND SetCost.ID = " & Template & " LEFT OUTER JOIN " & _
'                        "[DB_Kostenarten] AS Costarten INNER JOIN " & _
'                        "(SELECT CostHistoKa.FK_Kostenarten AS KA, SUM(Costverteilung.Kosten) AS Wert " & _
'                            "FROM   [DB_Kostenarten] AS Kostenarten LEFT OUTER JOIN " & _
'                                "[DB_Kosten] AS Cost ON Kostenarten.ID = Cost.FK_Kostenarten LEFT OUTER JOIN " & _
'                                "[DB_Kostenverteilung] AS Costverteilung ON Cost.ID = Costverteilung.FK_Kosten RIGHT OUTER JOIN " & _
'                                "[DB_Settings_CostHisto_KA] AS CostHistoKa ON Kostenarten.ID = CostHistoKa.FK_Kostenarten " & _
'                            "WHERE  (CostHistoKa.FK_Settings_CostHisto = " & Template & ") " & where & " AND " & _
'                                "((Costverteilung.Jahr = (SELECT Year From [DB_Settings_CostHisto] WHERE ID= " & Template & ") - 1) AND (Costverteilung.Monat >= 10) OR " & _
'                                "(CostHistoKa.FK_Settings_CostHisto = " & Template & ") AND (Costverteilung.Jahr = (SELECT Year From [DB_Settings_CostHisto] WHERE ID= " & Template & ")) OR " & _
'                                "(CostHistoKa.FK_Settings_CostHisto = " & Template & ") AND (Costverteilung.Jahr = (SELECT Year From [DB_Settings_CostHisto] WHERE ID= " & Template & ") + 1) AND (Costverteilung.Monat <= 3)) " & _
'                            "GROUP BY CostHistoKa.FK_Kostenarten) AS Vert ON Vert.KA = Costarten.ID RIGHT OUTER JOIN " & _
'                        "[DB_Language] AS Lang_Name ON Costarten.FK_Language_Name = Lang_Name.Term INNER JOIN " & _
'                        "[DB_Language] AS Lang_Shortname ON Costarten.FK_Language_Shortname = Lang_Shortname.Term ON Settings.FK_Kostenarten = Costarten.ID LEFT OUTER JOIN " & _
'                        "[DB_Kosten] AS Cost ON Costarten.ID = Cost.FK_Kostenarten LEFT OUTER JOIN " & _
'                        "[DB_Kostenverteilung] AS CostVerteilung ON Cost.ID = CostVerteilung.FK_Kosten " & _
'                "WHERE ((CostVerteilung.Jahr = SetCost.Year - 1 AND CostVerteilung.Monat >= 10) OR " & _
'                    "(CostVerteilung.Jahr = SetCost.Year) OR (CostVerteilung.Jahr = SetCost.Year + 1 AND CostVerteilung.Monat <= 3) OR (CostVerteilung.Jahr IS NULL)) " & where & _
'                "GROUP BY Vert.Wert, CostVerteilung.FK_Kosten, CostVerteilung.Monat, CostVerteilung.Jahr, Lang_Name." & calc_master.range("aktuelle_sprache").value & ", Lang_Shortname." & calc_master.range("aktuelle_sprache").value & " " & _
'                "ORDER BY Vert.Wert DESC, Name, CostVerteilung.Jahr, CostVerteilung.Monat, OriginalYear"

    Dim tempStatement As String
    
    tempStatement = "SELECT " & _
                        "CostHistoKa.FK_Kostenarten AS KA, SUM(CostVerteilung.Kosten) As wert " & _
                    "FROM  " & _
                        "((([DB_Settings_CostHisto_KA] AS CostHistoKa LEFT JOIN " & _
                        "[DB_Kostenarten] AS Kostenarten ON Kostenarten.ID = CostHistoKa.FK_Kostenarten) LEFT JOIN " & _
                        "[DB_Kosten] AS Cost ON Kostenarten.ID = Cost.FK_Kostenarten) LEFT JOIN " & _
                        "[DB_Kostenverteilung] AS Costverteilung ON Cost.ID = Costverteilung.FK_Kosten) " & _
                    "WHERE " & _
                        "(CostHistoKa.FK_Settings_CostHisto = " & Template & ") AND CostVerteilung.FK_Projekte in (" & pj_ids & ")  AND " & _
                        "((Costverteilung.Jahr = (SELECT [DB_Settings_CostHisto].Year " & _
                                                "FROM [DB_Settings_CostHisto] " & _
                                                "WHERE Id = " & Template & " ) - 1) AND " & _
                        "(Costverteilung.Monat >= 10) OR (CostHistoKa.FK_Settings_CostHisto = " & Template & ") AND " & _
                        "(Costverteilung.Jahr = (SELECT [DB_Settings_CostHisto].Year " & _
                                                "FROM [DB_Settings_CostHisto] " & _
                                                "WHERE ID= " & Template & ") ) OR (CostHistoKa.FK_Settings_CostHisto = " & Template & ") AND " & _
                        "(Costverteilung.Jahr = (SELECT [DB_Settings_CostHisto].Year " & _
                                                "FROM [DB_Settings_CostHisto] " & _
                                                "WHERE Id = " & Template & ") + 1) AND (Costverteilung.Monat <= 3)) " & _
                    "GROUP BY " & _
                        "CostHistoKa.FK_Kostenarten"

'    statement = "SELECT " & _
'                    "Lang_Name." & calc_master.Range("aktuelle_sprache").value & " AS Name, " & _
'                    "Lang_Shortname." & calc_master.Range("aktuelle_sprache").value & " AS Shortname, " & _
'                    "CostVerteilung.Monat, " & _
'                    "CostVerteilung.Jahr, " & _
'                    "SUM(CostVerteilung.Kosten) As CostAufwand, " & _
'                    "MAX(SetCost.Year) As OriginalYear " & _
'                "FROM " & _
'                    "(((((([DB_Settings_CostHisto] AS SetCost LEFT JOIN " & _
'                    "[DB_Settings_CostHisto_KA] AS SetCostKA ON (SetCost.ID = SetCostKA.FK_Settings_CostHisto AND SetCost.ID = " & Template & ")) LEFT JOIN " & _
'                    "[DB_Kostenarten] AS Costarten ON Costarten.ID = SetCostKA.FK_Kostenarten) LEFT JOIN " & _
'                    "[DB_Kosten] AS Cost ON Costarten.ID = Cost.FK_Kostenarten) LEFT JOIN " & _
'                    "[DB_Kostenverteilung] AS CostVerteilung ON Cost.ID = CostVerteilung.FK_Kosten) LEFT JOIN " & _
'                    "[DB_Language] AS Lang_Shortname ON Lang_Shortname.Term = Costarten.FK_Language_Shortname) LEFT JOIN " & _
'                    "[DB_Language] AS Lang_Name ON Lang_Name.Term = Costarten.FK_Language_Name) LEFT JOIN " & _
'                    "(" & tempStatement & ") AS Vert ON Vert.KA = Costarten.ID " & _
'                "WHERE " & _
'                    "((CostVerteilung.Jahr = SetCost.Year - 1 AND CostVerteilung.Monat >= 10) OR (CostVerteilung.Jahr = SetCost.Year) OR " & _
'                    "(CostVerteilung.Jahr = SetCost.Year + 1 AND CostVerteilung.Monat <= 3) OR (CostVerteilung.Jahr IS NULL)) AND CostVerteilung.FK_Projekte in (" & pj_ids & ") " & _
'                "GROUP BY " & _
'                    "Vert.wert , CostVerteilung.FK_Kosten, CostVerteilung.Monat, CostVerteilung.Jahr, Lang_Name.deutsch, Lang_Shortname.deutsch " & _
'                "ORDER BY " & _
'                    "Vert.wert DESC, Lang_Name.deutsch, CostVerteilung.Jahr, CostVerteilung.Monat, MAX(SetCost.Year)"
                    
                    
                      statement = "SELECT " & _
                    "Lang_Name." & calc_master.Range("aktuelle_sprache").value & " AS Name, " & _
                    "Lang_Shortname." & calc_master.Range("aktuelle_sprache").value & " AS Shortname, " & _
                    "CostVerteilung.Monat, " & _
                    "CostVerteilung.Jahr, " & _
                    "SUM(CostVerteilung.Kosten) As CostAufwand, " & _
                    "MAX(SetCost.Year) As OriginalYear " & _
                "FROM " & _
                    "(((((([DB_Settings_CostHisto] AS SetCost LEFT JOIN " & _
                    "[DB_Settings_CostHisto_KA] AS SetCostKA ON (SetCost.ID = SetCostKA.FK_Settings_CostHisto AND SetCost.ID = " & Template & ")) LEFT JOIN " & _
                    "[DB_Kostenarten] AS Costarten ON Costarten.ID = SetCostKA.FK_Kostenarten) LEFT JOIN " & _
                    "[DB_Kosten] AS Cost ON Costarten.ID = Cost.FK_Kostenarten) LEFT JOIN " & _
                    "[DB_Kostenverteilung] AS CostVerteilung ON Cost.ID = CostVerteilung.FK_Kosten) LEFT JOIN " & _
                    "[DB_Language] AS Lang_Shortname ON Lang_Shortname.Term = Costarten.FK_Language_Shortname) LEFT JOIN " & _
                    "[DB_Language] AS Lang_Name ON Lang_Name.Term = Costarten.FK_Language_Name) LEFT JOIN " & _
                    "(" & tempStatement & ") AS Vert ON Vert.KA = Costarten.ID " & _
                "WHERE " & _
                    "((CostVerteilung.Jahr = SetCost.Year - 1 AND CostVerteilung.Monat >= 10) OR (CostVerteilung.Jahr = SetCost.Year) OR " & _
                    "(CostVerteilung.Jahr = SetCost.Year + 1 AND CostVerteilung.Monat <= 3) OR (CostVerteilung.Jahr IS NULL))  " & _
                "GROUP BY " & _
                    "Vert.wert , CostVerteilung.FK_Kosten, CostVerteilung.Monat, CostVerteilung.Jahr, Lang_Name.deutsch, Lang_Shortname.deutsch " & _
                "ORDER BY " & _
                    "Vert.wert DESC, Lang_Name.deutsch, CostVerteilung.Jahr, CostVerteilung.Monat, MAX(SetCost.Year)"
                    
                    
    'Daten in Tabelle eintragen
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            counter = 57
            
            
            
            While Not Class_Functions.DB.Recordset.EOF
                If Not IsNull(Class_Functions.DB.Recordset!Monat) Then
                    Monat = Class_Functions.DB.Recordset!Monat
                Else
                    Monat = 0
                End If

                If nlc_ppf_costhisto.Cells(counter, 5).value = "" Then
                    'erste mal Datensatz anlegen
                    nlc_ppf_costhisto.Cells(counter, 5).value = Class_Functions.DB.Recordset!name
                    nlc_ppf_costhisto.Cells(counter, 4).value = Class_Functions.DB.Recordset!Shortname
                End If

                If nlc_ppf_costhisto.Cells(counter, 5).value <> Class_Functions.DB.Recordset!name Then
                    'neuer Datensatz anlegen weil Ressart nicht mehr passt
                    If counter <> 77 Then 'Wenn Counter = 77 (letzte Zeile) dann nicht mehr erh|fffd|hen, da diese eine Sonstiges Zeile ist!
                        counter = counter + 1
                    End If

                    nlc_ppf_costhisto.Cells(counter, 5).value = Class_Functions.DB.Recordset!name
                    nlc_ppf_costhisto.Cells(counter, 4).value = Class_Functions.DB.Recordset!Shortname
                End If

                If Monat > 0 Then
                    'Werte zu vorhandenen Werten dazu z|fffd|hlen
                    If (Class_Functions.DB.Recordset!OriginalYear - 1 = Class_Functions.DB.Recordset!Jahr) Then
                        'Vorjahr bef|fffd|llen
                        nlc_ppf_costhisto.Cells(counter, 5 + (Monat - 9)).value = nlc_ppf_costhisto.Cells(counter, 5 + (Monat - 9)).value + Class_Functions.DB.Recordset!CostAufwand
                    ElseIf (Class_Functions.DB.Recordset!OriginalYear = Class_Functions.DB.Recordset!Jahr) Then
                        'Monate bef|fffd|llen
                        nlc_ppf_costhisto.Cells(counter, 8 + Monat).value = nlc_ppf_costhisto.Cells(counter, 8 + Monat).value + Class_Functions.DB.Recordset!CostAufwand
                    ElseIf (Class_Functions.DB.Recordset!OriginalYear + 1 = Class_Functions.DB.Recordset!Jahr) Then
                        'Folgejahr bef|fffd|llen
                        nlc_ppf_costhisto.Cells(counter, 20 + Monat).value = nlc_ppf_costhisto.Cells(counter, 20 + Monat).value + Class_Functions.DB.Recordset!CostAufwand
                    End If
                End If

                Class_Functions.DB.Recordset.movenext
            Wend

            If counter = 77 Then
                nlc_ppf_costhisto.Cells(counter, 5).value = SQL_Abfragen.Get_Language_Value("other")
                nlc_ppf_costhisto.Cells(counter, 4).value = SQL_Abfragen.Get_Language_Value("other_short")
                nlc_ppf_costhisto.Range("CostHisto_sonstige").value = nlc_ppf_costhisto.Cells(counter, 5).value
            Else
                nlc_ppf_costhisto.Cells(77, 5).value = ""
                nlc_ppf_costhisto.Cells(77, 4).value = ""
                nlc_ppf_costhisto.Range("CostHisto_sonstige").value = ""
            End If
        End If
    End If
End Function

Public Sub Get_SPZuweisungen(Optional SPListID As Integer = -1)
    If SPListID = -1 Then
        Call Get_SPZuweisungen(1)
        Call Get_SPZuweisungen(2)
        Exit Sub
    End If
    
    Dim listCount As Integer
    Dim rangeName As String
    
    Dim col
    Dim row
    
    If (SPListID = 1) Then
        rangeName = "SP_MnAFieldList"
        
        statement = "SELECT " & _
                        "SPField.SP_FieldID, " & _
                        "SPField.SP_FieldName, " & _
                        "SPField.SP_FieldType, " & _
                        "Kat.ID, " & _
                        "Lang.deutsch, " & _
                        "Lang_Art.deutsch " & _
                    "FROM " & _
                        "DB_SharePointLists AS SPList LEFT JOIN " & _
                        "DB_SharePointFields AS SPField ON SPField.FK_SharePointLists = SPList.ID LEFT JOIN " & _
                        "DB_Kategorie AS Kat ON Kat.ID = SPField.FK_Kategorie LEFT JOIN " & _
                        "DB_Language AS Lang ON Lang.Term = Kat.FK_Language_Name LEFT JOIN " & _
                        "DB_Art AS Art ON Art.ID = Kat.FK_Art LEFT JOIN " & _
                        "DB_Language AS Lang_Art ON Lang_Art.Term = Art.FK_Language_Description " & _
                    "WHERE " & _
                        "SPList.ID=" & SPListID & " " & _
                    "ORDER BY " & _
                        "SPField.SP_FieldName"
    ElseIf (SPListID = 2) Then
        rangeName = "SP_PJnpf2spList"
        Dim orderby As String
        
        If calc_master.Range("sortOrder").value = 1 Then
            orderby = "Kat.OrderBy,"
        End If
        
        statement = "SELECT " & _
                        "Kat.ID, KatLang.deutsch AS KatName, art.deutsch AS ArtName, SPFields.SP_FieldID, SPFields.SP_FieldName " & _
                    "FROM " & _
                        "DB_Kategorie As Kat LEFT JOIN " & _
                        "DB_Language AS KatLang ON Kat.FK_Language_Name = KatLang.Term LEFT JOIN " & _
                        "DB_SharePointFields AS SPFields ON Kat.ID = SPFields.FK_Kategorie AND SPFields.FK_SharePointLists=" & SPListID & " LEFT JOIN " & _
                        "(SELECT " & _
                            "DB_Art.ID, " & _
                            "ArtLang.deutsch " & _
                        "FROM " & _
                            "DB_Art LEFT JOIN " & _
                            "DB_Language AS ArtLang ON DB_Art.FK_Language_Description = ArtLang.Term " & _
                        ") AS Art ON Art.ID = Kat.FK_Art " & _
                    "WHERE " & _
                        "kat.active = " & Class_Functions.DB.Parse2True & " " & _
                    "ORDER BY " & _
                        orderby & " KatLang." & calc_master.Range("aktuelle_sprache").value
    Else
        Exit Sub
    End If
    
    col = Range(rangeName).Column
    row = Range(rangeName).row
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            listCount = Class_Functions.DB.GetRecordCount(statement)
            
            If (SPListID = 2) Then
                calc_frm_masterdata.Range(calc_frm_masterdata.Cells(row + 1, col), calc_frm_masterdata.Cells(row + 1, col)).CopyFromRecordset Class_Functions.DB.Recordset
            
                statement = "SELECT " & _
                                "SPFields.SP_FieldID, SPFields.SP_FieldName " & _
                            "FROM " & _
                                "DB_SharePointFields AS SPFields " & _
                            "WHERE " & _
                                "SPFields.FK_Kategorie = -2"
                
                If Class_Functions.DB.Select_Statement(statement) = True Then
                    If Not Class_Functions.DB.Recordset.EOF Then
                        calc_frm_masterdata.Cells(row, col + 3).CopyFromRecordset Class_Functions.DB.Recordset
                    End If
                End If
            Else
                calc_frm_masterdata.Range(calc_frm_masterdata.Cells(row, col), calc_frm_masterdata.Cells(row, col)).CopyFromRecordset Class_Functions.DB.Recordset
            End If
        End If
    End If
    
    If listCount > 0 Then
        If (SPListID = 2) Then
            ActiveWorkbook.Names.add name:=rangeName, RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(row, col), calc_frm_masterdata.Cells(listCount + row, col + 4))
        Else
            ActiveWorkbook.Names.add name:=rangeName, RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(row, col), calc_frm_masterdata.Cells(listCount + row - 1, col + 4))
        End If
    Else
        If (SPListID <> 2) Then
            calc_frm_masterdata.Range(calc_frm_masterdata.Cells(row, col), calc_frm_masterdata.Cells(row, col + 4)).ClearContents
        End If
        ActiveWorkbook.Names.add name:=rangeName, RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(row, col), calc_frm_masterdata.Cells(row, col + 4))
    End If
End Sub

Public Sub Get_PjZuweisungen()
    
End Sub

'#########################################
'                Insert
'#########################################
'F|fffd|gt einen neuen Eintrag in die Tabelle DB_Language ein
Public Function Insert_Language(first_lang As String, sec_lang As String, Term As String, intern As Boolean, first_lang_value As String, sec_lang_value As String) As Boolean
    Dim ID As String
    
    statement = "Insert Into [DB_Language] " & _
                    "(Term, " & _
                    "intern, " & _
                    VBA.LCase(first_lang) & ", " & _
                    VBA.LCase(sec_lang) & ")" & _
                "Values " & _
                    "('" & Term & "', '" & _
                    intern & "', '" & _
                    first_lang_value & "', '" & _
                    sec_lang_value & "')"
    
    
    ID = Class_Functions.DB.Insert_Statement(statement)
    If ID <> "-1" Then
        Insert_Language = True
    Else
        Insert_Language = False
    End If
End Function

'F|fffd|gt einen neuen Eintrag in die angegebene Tabelle ein
Public Function Insert_Template(name As String, DB_Name As String, Optional colname As String = "") As Boolean
    Dim ID As String
    
    If colname = "" Then
        statement = "Insert Into [" & DB_Name & "] " & _
                        "(Name)" & _
                    "Values " & _
                        "('" & name & "')"
    Else
        statement = "Insert Into [" & DB_Name & "] " & _
                        "(" & colname & ")" & _
                    "Values " & _
                        "('" & name & "')"
    End If
    
    ID = Class_Functions.DB.Insert_Statement(statement)
    If ID <> "-1" Then
        Insert_Template = True
    Else
        Insert_Template = False
    End If
End Function

'F|fffd|gt einen neuen Eintrag in die Tabelle DB_Meilensteine ein
Public Function Insert_Milestone(Projekt_ID As String, Bezeichnung As String, Optional PHB_UID As Long = 0, Optional Basisdatum As String, Optional Istdatum As String, Optional Aktuelldatum As String) As Boolean
    
    'Sprache
    Dim datumswerte As String
    Dim ID As String
    
    If PHB_UID <> 0 Then
        datumswerte = VBA.CStr(PHB_UID) & ", "
    Else
        datumswerte = "NULL, "
    End If
    If Basisdatum <> "" Then
        datumswerte = datumswerte & "'" & VBA.CStr(VBA.CDate(Basisdatum)) & "', "
    Else
        datumswerte = datumswerte & "NULL, "
    End If
    If Istdatum <> "" Then
        datumswerte = datumswerte & "'" & VBA.CStr(VBA.CDate(Istdatum)) & "', "
    Else
        datumswerte = datumswerte & "NULL, "
    End If
    If Aktuelldatum <> "" Then
        datumswerte = datumswerte & "'" & VBA.CStr(VBA.CDate(Aktuelldatum)) & "'"
    Else
        datumswerte = datumswerte & "NULL"
    End If
    statement = "Insert Into [DB_Meilensteine] " & _
                "(FK_Projekte , " & _
                "Name, " & _
                "PHB_UID, " & _
                "Basisdatum, " & _
                "Istdatum, " & _
                "Aktuelldatum, " & _
                "active) " & _
            "Values " & _
                "('" & Projekt_ID & "', '" & _
                Bezeichnung & "', " & _
                datumswerte & ", " & _
                Class_Functions.DB.Parse2True & ")"
    
    ID = Class_Functions.DB.Insert_Statement(statement)
    If ID <> "-1" Then
        Insert_Milestone = True
    Else
        Insert_Milestone = False
    End If
End Function

'F|fffd|gt ein neues Projekt in der Tabelle DB_Projekte ein
Public Function Insert_Projekt(Projektcode As String, Optional ByVal Exportdatum As Date = #12:00:00 AM#, Optional ByVal Importdatum As Date = #12:00:00 AM#, _
                                Optional ByVal Projektcode_ID As Integer = 0, Optional ByVal Portfolio_ID As Long = 0) As Boolean
    Dim Fields As String
    Dim values As String
    Dim ID As String
    
    'Felder und Werte zusammenbauen (Projektcode muss angegeben werden!)
    Fields = "Projektcode"
    values = "'" & Projektcode & "'"
    
    If Exportdatum <> #12:00:00 AM# Then
        Fields = Fields & ", Exportdatum"
        values = values & ", '" & Exportdatum & "'"
    End If
    
    If Importdatum <> #12:00:00 AM# Then
        Fields = Fields & ", Importdatum"
        values = values & ", '" & Importdatum & "'"
    End If
    
    If Projektcode_ID <> 0 Then
        Fields = Fields & ", Projektcode_ID"
        values = values & ", '" & Projektcode_ID & "'"
    End If
    
    If Portfolio_ID <> 0 Then
        Fields = Fields & ", Portfolio_ID"
        values = values & ", '" & Portfolio_ID & "'"
    End If
    
    'Projekt aktivieren
    Fields = Fields & ", active"
    values = values & ", " & Class_Functions.DB.Parse2True()
    
    'Statement zusammen bauen
    statement = "Insert Into [DB_Projekte] " & _
                    "(" & Fields & ") " & _
                "VALUES " & _
                    "(" & values & ")"
                   
    'Aktion ausf|fffd|hren und demendsprechend handeln
    ID = Class_Functions.DB.Insert_Statement(statement)
    If ID <> "-1" Then
        Insert_Projekt = True
    Else
        Insert_Projekt = False
    End If
End Function

'F|fffd|gt einen neuen Eintrag in die Tabelle DB_Kategoriewerte ein
Public Function Insert_KategorieValues(Projekt_ID As String, Kategorie_ID As String, wert As String, KategorieDetail_ID As String, col As String) As Boolean
    Dim ID As String
    
    statement = ""
    statement = "Insert Into [DB_Kategoriewerte] " & _
                    "(FK_Projekte , " & _
                    "FK_Kategorie, " & _
                    col & ", " & _
                    "FK_Kategorie_Detail) " & _
                "Values " & _
                    "(" & Projekt_ID & ", " & _
                    Kategorie_ID & ", '" & _
                    wert & "', " & _
                    KategorieDetail_ID & ")"
    
    ID = Class_Functions.DB.Insert_Statement(statement)
    If ID <> "-1" Then
        Insert_KategorieValues = True
    Else
        Insert_KategorieValues = False
    End If
End Function

'F|fffd|gt einen neuen Eintrag in die Tabelle DB_Ressourcen ein
Public Function Insert_RessourceValues(Projekt_ID As String, feld As String, wert As String, RessID As String) As Boolean
    Dim ID As String

    statement = "Insert Into [DB_Ressourcen] " & _
                    "(FK_Projekte , " & _
                    "FK_Ressourcenarten, " & _
                    feld & ") " & _
                "Values " & _
                    "(" & Projekt_ID & ", " & _
                    RessID & ", " & _
                    wert & ")"
    
    ID = Class_Functions.DB.Insert_Statement(statement)
    If ID <> "-1" Then
        Insert_RessourceValues = True
    Else
        Insert_RessourceValues = False
    End If
End Function

'F|fffd|gt einen neuen Eintrag in die Tabelle DB_Kosten ein
Public Function Insert_KostenValues(Projekt_ID As String, feld As String, wert As String, Kostname As String) As Boolean
    Dim ID As String
    Dim KostenartID As String
    
    statement = "SELECT " & _
                    "[DB_Kostenarten].ID " & _
                "FROM " & _
                    "([DB_Kostenarten] INNER JOIN " & _
                    "[DB_Language] ON [DB_Kostenarten].FK_Language_Name = [DB_Language].Term) " & _
                "WHERE " & _
                    "([DB_Language]." & calc_master.Range("aktuelle_sprache").value & " = '" & Kostname & "')"
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            KostenartID = Class_Functions.DB.Recordset!ID
        End If
    End If
    
    statement = "Insert Into [DB_Kosten] " & _
                    "(FK_Projekte, " & _
                    "FK_Kostenarten, " & _
                    feld & ") " & _
                "Values " & _
                    "(" & Projekt_ID & ", " & _
                    KostenartID & ", " & _
                    wert & ")"
                    
    ID = Class_Functions.DB.Insert_Statement(statement)
    If ID <> "-1" Then
        Insert_KostenValues = True
    Else
        Insert_KostenValues = False
    End If
End Function

Public Function Insert_Ressourcenart(Shortname As String, name As String, Optional Kostensatz As String = "NULL", Optional Kostenart As String = "NULL", Optional Ressourcenart As String = "NULL")
    Dim ID As String
    Dim statements(2) As String
    Dim ress_art As String
    
    statement = "Insert Into [DB_Ressourcenarten] " & _
                        "(Kostensatz, " & _
                        "FK_Kostenarten, " & _
                        "active) " & _
                    "Values " & _
                        "(" & Kostensatz & ", " & _
                        Kostenart & ", " & _
                        Class_Functions.DB.Parse2True() & ")"
    statement = statement & ";;;;;;SELECT max(ID) AS NewID FROM [DB_Ressourcenarten]"
    
    ID = Class_Functions.DB.Insert_Statement(statement)
    
    If ID = "-1" Then
        Insert_Ressourcenart = False
        Exit Function
    End If
    
    If Ressourcenart = "NULL" Then
        ress_art = ID
    Else
        ress_art = Ressourcenart
    End If
    
    'Sprache Shortname
    statements(0) = "Insert Into [DB_Language] " & _
                        "(Term, " & _
                        "intern, " & _
                        calc_master.Range("aktuelle_sprache").value & ") " & _
                    "Values " & _
                        "('ra" & ID & "_shortname', " & _
                        Class_Functions.DB.Parse2True() & ", '" & _
                        Shortname & "') "
    'Sprache Name
    statements(1) = "Insert Into [DB_Language] " & _
                        "(Term, " & _
                        "intern , " & _
                        calc_master.Range("aktuelle_sprache").value & ") " & _
                    "Values " & _
                        "('ra" & ID & "_name', " & _
                        Class_Functions.DB.Parse2True() & ", '" & _
                        name & "') "
    'Sonstige Werte
    statements(2) = "UPDATE " & _
                        "[DB_Ressourcenarten] " & _
                    "SET " & _
                        "FK_Ressourcenarten = " & ress_art & ", " & _
                        "FK_Language_Shortname = 'ra" & ID & "_shortname', " & _
                        "FK_Language_Name = 'ra" & ID & "_name' " & _
                    "WHERE " & _
                        "ID = " & ID
    
    If Class_Functions.DB.TransStatements(statements) = True Then
        Insert_Ressourcenart = True
    Else
        Insert_Ressourcenart = False
    End If
End Function

Public Function Insert_Planstelle(name As String)
    Dim ID As String
    
    statement = "Insert Into [Planstellen] " & _
                        "(Bezeichnung) " & _
                    "Values " & _
                        "('" & name & "')"
    
    ID = Class_Functions.DB.Insert_Statement(statement)
    
    If ID = "-1" Then
        Insert_Planstelle = False
    Else
        Insert_Planstelle = True
    End If
End Function

Public Function Insert_Einheit(name As String, Optional Faktor As String = "0")
    Dim ID As String
    Dim statements(1) As String
    Dim Einheit_Faktor As String
    
    If Not VBA.IsMissing(Faktor) Then
        Einheit_Faktor = Faktor
    End If
    
    statement = "Insert Into [DB_Einheit] " & _
                        "(Faktor, " & _
                        "active) " & _
                    "Values " & _
                        "(" & Einheit_Faktor & ", " & _
                        Class_Functions.DB.Parse2True() & ")"
    statement = statement & ";;;;;;SELECT max(ID) AS NewID FROM [DB_Einheit]"
    
    ID = Class_Functions.DB.Insert_Statement(statement)
    
    If ID = "-1" Then
        Insert_Einheit = False
        Exit Function
    End If
    
    'Sprache Name
    statements(0) = "Insert Into [DB_Language] " & _
                        "(Term, " & _
                        "intern , " & _
                        calc_master.Range("aktuelle_sprache").value & ") " & _
                    "Values " & _
                        "('einheit" & ID & "', " & _
                        Class_Functions.DB.Parse2True() & ", '" & _
                        name & "') "
    'Sonstige Werte
    statements(1) = "UPDATE [DB_Einheit] " & _
                    "SET " & _
                        "FK_Language_Name = 'einheit" & ID & "' " & _
                    "WHERE " & _
                        "ID = " & ID
    
    If Class_Functions.DB.TransStatements(statements) = True Then
        Insert_Einheit = True
    Else
        Insert_Einheit = False
    End If
End Function

Public Function Insert_User(name As String)
    Dim ID As String
    
    statement = "Insert Into [DB_Users] " & _
                        "(Username) " & _
                    "Values " & _
                        "('" & name & "')"
    
    ID = Class_Functions.DB.Insert_Statement(statement)
    If ID <> "-1" Then
        Insert_User = True
    Else
        Insert_User = False
    End If
End Function

Public Function Insert_Kategorie(Shortname As String, name As String, Gesperrt As String, achsen As String, art As String, ColWidth As String, Optional einheit As String, Optional Min_Value As String, Optional Max_Value As String, Optional kommastellen As String, Optional Summierung As String)
    Dim ID As String
    Dim statements(2) As String
    Dim Felder As String
    Dim werte As String
    Dim tempAchsen As String
    Dim MaxOrderBy As Integer
    
    If VBA.LCase(achsen) = "true" Then
        tempAchsen = Class_Functions.DB.Parse2True()
    Else
        tempAchsen = "0"
    End If
    
    statement = "SELECT " & _
                    "MAX(OrderBy) AS OrderNr " & _
                "FROM " & _
                    "[DB_Kategorie]"
                        
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            MaxOrderBy = nlc_functions.Nz(Class_Functions.DB.Recordset!OrderNr) + 1
        Else
            Insert_Kategorie = False
        Exit Function
        End If
    Else
        Insert_Kategorie = False
        Exit Function
    End If
    
    'Sonstige Werte
    Felder = "Insert Into [DB_Kategorie] " & _
                        "(Achsen, " & _
                        "Gesperrt, " & _
                        "MainTab, " & _
                        "ColWidth, " & _
                        "OrderBy, " & _
                        "active"
    werte = "Values " & _
                        "(" & tempAchsen & ", " & _
                        "'" & Gesperrt & "', " & _
                        "0, " & _
                        ColWidth & ", " & _
                        VBA.CStr(MaxOrderBy) & ", " & _
                        Class_Functions.DB.Parse2True()
    
    If einheit <> "" Then
        Felder = Felder & ", FK_Einheit"
        werte = werte & ", " & einheit
    End If
    If art <> "" Then
        Felder = Felder & ", FK_Art"
        werte = werte & ", " & art
    End If
    If Min_Value <> "" Then
        Felder = Felder & ", Min_Value"
        werte = werte & ", " & Min_Value
    End If
    If Max_Value <> "" Then
        Felder = Felder & ", Max_Value"
        werte = werte & ", " & Max_Value
    End If
    If kommastellen <> "" Then
        Felder = Felder & ", Kommastellen"
        werte = werte & ", " & kommastellen
    End If
    If Summierung <> "" Then
        Felder = Felder & ", Summierung"
        werte = werte & ", " & Summierung
    End If
    
    statement = Felder & ") " & werte & ")"
    
    statement = statement & ";;;;;;SELECT max(ID) AS NewID FROM [DB_Kategorie]"
    
    ID = Class_Functions.DB.Insert_Statement(statement)
    
    If ID = "-1" Then
        Insert_Kategorie = False
        Exit Function
    End If
    
    If art = "1" Then
        Call SQL_Abfragen.Insert_KategorieDetail("tbd", "tbd", ID, "1")
    ElseIf art = "2" Then
        Call SQL_Abfragen.Insert_KategorieDetail("tbd", "tbd", ID, "1")
        Call SQL_Abfragen.Insert_KategorieDetail("tbd", "tbd", ID, "2")
    End If
    
    
    'Sprache Shortname
    statements(0) = "Insert Into [DB_Language] " & _
                        "(Term, " & _
                        "intern , " & _
                        calc_master.Range("aktuelle_sprache").value & ") " & _
                    "Values " & _
                        "('kategorie" & ID & "_shortname', " & _
                        Class_Functions.DB.Parse2True() & ", '" & _
                        Shortname & "') "
    'Sprache Name
    statements(1) = "Insert Into [DB_Language] " & _
                        "(Term, " & _
                        "intern , " & _
                        calc_master.Range("aktuelle_sprache").value & ") " & _
                    "Values " & _
                        "('kategorie" & ID & "_name', " & _
                        Class_Functions.DB.Parse2True() & ", '" & _
                        name & "') "
    statements(2) = "UPDATE [DB_Kategorie] " & _
                    "SET " & _
                        "FK_Language_Shortname = 'kategorie" & ID & "_shortname', " & _
                        "FK_Language_Name = 'kategorie" & ID & "_name' " & _
                    "WHERE " & _
                        "ID = " & ID


    If Class_Functions.DB.TransStatements(statements) = True Then
        Insert_Kategorie = True
    Else
        Insert_Kategorie = False
    End If
End Function

Public Function Insert_KategorieDetail(Shortname As String, name As String, Kategorie_ID As String, orderby As String)
    Dim ID As String
    Dim statements(2) As String
    Dim Felder As String
    Dim werte As String
    
    statement = "Insert Into [DB_Kategorie_Detail] " & _
                    "(FK_Kategorie, " & _
                    "OrderBy, " & _
                    "active) " & _
                "Values " & _
                    "(" & Kategorie_ID & ", " & _
                    orderby & ", " & _
                    Class_Functions.DB.Parse2True() & ")"
                    
    statement = statement & ";;;;;;SELECT max(ID) AS NewID FROM [DB_Kategorie_Detail]"
    
    ID = Class_Functions.DB.Insert_Statement(statement)
    
    If ID = "-1" Then
        Insert_KategorieDetail = False
        Exit Function
    End If
    
    
    'Sprache Shortname
    statements(0) = "Insert Into [DB_Language] " & _
                        "(Term, " & _
                        "intern , " & _
                        calc_master.Range("aktuelle_sprache").value & ") " & _
                    "Values " & _
                        "('kategoried" & ID & "_shortname', " & _
                        Class_Functions.DB.Parse2True() & ", '" & _
                        Shortname & "') "
    'Sprache Name
    statements(1) = "Insert Into [DB_Language] " & _
                        "(Term, " & _
                        "intern , " & _
                        calc_master.Range("aktuelle_sprache").value & ") " & _
                    "Values " & _
                        "('kategoried" & ID & "_name', " & _
                        Class_Functions.DB.Parse2True() & ", '" & _
                        name & "') "
    'Sonstige Werte
    statements(2) = "UPDATE [DB_Kategorie_Detail] " & _
                    "SET " & _
                        "FK_Language_Shortname = 'kategoried" & ID & "_shortname', " & _
                        "FK_Language_Name = 'kategoried" & ID & "_name' " & _
                    "WHERE " & _
                        "ID = " & ID
                        

    If Class_Functions.DB.TransStatements(statements) = True Then
        Insert_KategorieDetail = True
    Else
        Insert_KategorieDetail = False
    End If
End Function

Public Function Insert_RessVerteilung(RessID As String, PJ_ID As String, startdate As Date, enddate As Date, delete As Boolean, row_counter As Integer)
    'Zuerst alle RessVerteilungsWerte l|fffd|schen
    'Es darf nicht jedes mal das komplette Projekt gel|fffd|scht werden, sondern nur mit der selbe Ress ID
    'Aufpassen, da die Deletefunktion auch f|fffd|r die Kostenverteilung verwendet wird...
    If delete Then
        Call Delete_Verteilung(PJ_ID, "DB_Ressourcenverteilung", "FK_Ressourcen", RessID)
    End If
    
    Dim Monate As Integer
    Dim AufwandRest As Double
    Dim AufwandProMonat As Double
    Dim AufwandProMonatRest As Double
    Dim MonatCounter As Integer
    Dim current_Monat As Integer
    Dim current_Jahr As Integer
    Dim ID As String
    Dim statements() As String
    
    statement = ""
    
    Monate = (VBA.Month(enddate) - VBA.Month(startdate)) + ((VBA.Year(enddate) - VBA.Year(startdate)) * 12) + 1
    If Monate = 0 Then Monate = 1
    
    ReDim statements(Monate - 1)
    
    current_Monat = VBA.Month(startdate)
    current_Jahr = VBA.Year(startdate)
    
    If VBA.IsNumeric(calc_frm_projects.Range("lb_ressourcen").Cells(row_counter, 6).value) Then
        If Range("lb_ressourcen").Cells(row_counter, 6).value > 0 Then
            If Monate <> 0 Then
                AufwandProMonat = (calc_frm_projects.Range("lb_ressourcen").Cells(row_counter, 6).value / Monate)
                AufwandProMonatRest = "0,00" + VBA.Mid(AufwandProMonat, VBA.InStr(1, AufwandProMonat, ",") + 3, VBA.Len(AufwandProMonat) - VBA.InStr(1, AufwandProMonat, ",") + 2)
                AufwandProMonat = VBA.Round(AufwandProMonat, 2)
                
                For MonatCounter = 1 To Monate - 1 Step 1
                    If current_Monat > 12 Then
                        current_Monat = 1
                        current_Jahr = current_Jahr + 1
                    End If
                    
                    statements(MonatCounter - 1) = "INSERT INTO " & _
                                                    "[DB_Ressourcenverteilung] (FK_Ressourcen, FK_Projekte, Monat, Jahr, Aufwand) " & _
                                                "VALUES " & _
                                                    "(" & (calc_frm_projects.Range("lb_ressourcen").Cells(row_counter, 1).value) & ", " & PJ_ID & ", " & current_Monat & ", " & current_Jahr & ", " & VBA.Replace(AufwandProMonat, ",", ".") & ")" & VBA.Chr(10)
                    
                    AufwandRest = AufwandRest + AufwandProMonatRest
                    current_Monat = current_Monat + 1
                Next MonatCounter
                
                AufwandRest = AufwandRest + AufwandProMonatRest
                'current_Monat = current_Monat + 1
                If current_Monat > 12 Then
                    current_Monat = 1
                    current_Jahr = current_Jahr + 1
                End If
                    
                If VBA.IsNumeric(AufwandRest) Then
                    statements(MonatCounter - 1) = "INSERT INTO " & _
                                                    "[DB_Ressourcenverteilung] (FK_Ressourcen, FK_Projekte, Monat, Jahr, Aufwand) " & _
                                                "VALUES " & _
                                                    "(" & (calc_frm_projects.Range("lb_ressourcen").Cells(row_counter, 1).value) & ", " & PJ_ID & ", " & current_Monat & ", " & current_Jahr & ", " & VBA.Replace(AufwandProMonat + AufwandRest, ",", ".") & ")" & VBA.Chr(10)
                End If
            End If
        End If
    End If
    
    If Class_Functions.DB.TransStatements(statements) Then
        Insert_RessVerteilung = True
    Else
        Insert_RessVerteilung = False
    End If
    
End Function

Public Function Insert_CostVerteilung(CostID As String, PJ_ID As String, startdate As Date, enddate As Date, delete As Boolean, row_counter)
    'Zuerst alle RessVerteilungsWerte l|fffd|schen
    'Es darf nicht jedes mal das komplette Projekt gel|fffd|scht werden, sondern nur mit der selbe Ress ID
    'Aufpassen, da die Deletefunktion auch f|fffd|r die Kostenverteilung verwendet wird...
    If delete Then
        Call Delete_Verteilung(PJ_ID, "DB_Kostenverteilung", "FK_Kosten", CostID)
    End If
    
    Dim Monate As Integer
    Dim AufwandRest As Double
    Dim AufwandProMonat As Double
    Dim AufwandProMonatRest As Double
    Dim MonatCounter As Integer
    Dim current_Monat As Integer
    Dim current_Jahr As Integer
    Dim ID As String
    Dim statements() As String
    
    statement = ""
    
    Monate = (VBA.Month(enddate) - VBA.Month(startdate)) + ((VBA.Year(enddate) - VBA.Year(startdate)) * 12) + 1
    If Monate = 0 Then Monate = 1
    
    ReDim statements(Monate - 1)
    
    current_Monat = VBA.Month(startdate)
    current_Jahr = VBA.Year(startdate)
    
    If VBA.IsNumeric(calc_frm_projects.Range("lb_kosten").Cells(row_counter, 5).value) Then
        If calc_frm_projects.Range("lb_kosten").Cells(row_counter, 5).value > 0 Then
            AufwandProMonat = (calc_frm_projects.Range("lb_kosten").Cells(row_counter, 5).value / Monate)
            AufwandProMonatRest = "0,00" + VBA.Mid(AufwandProMonat, VBA.InStr(1, AufwandProMonat, ",") + 3, VBA.Len(AufwandProMonat) - VBA.InStr(1, AufwandProMonat, ",") + 2)
            AufwandProMonat = VBA.Round(AufwandProMonat, 2)
            
            For MonatCounter = 1 To Monate - 1 Step 1
                If current_Monat > 12 Then
                    current_Monat = 1
                    current_Jahr = current_Jahr + 1
                End If
                
                statements(MonatCounter - 1) = "INSERT INTO " & _
                                                    "[DB_Kostenverteilung] (FK_Kosten, FK_Projekte, Monat, Jahr, Kosten) " & _
                                                "VALUES " & _
                                                    "(" & (calc_frm_projects.Range("lb_kosten").Cells(row_counter, 1).value) & ", " & PJ_ID & ", " & current_Monat & ", " & current_Jahr & ", " & VBA.Replace(AufwandProMonat, ",", ".") & ")" & VBA.Chr(10)
                
                AufwandRest = AufwandRest + AufwandProMonatRest
                current_Monat = current_Monat + 1
            Next MonatCounter
            
            AufwandRest = AufwandRest + AufwandProMonatRest
            'current_Monat = current_Monat + 1
            If current_Monat > 12 Then
                current_Monat = 1
                current_Jahr = current_Jahr + 1
            End If
                
            If VBA.IsNumeric(AufwandRest) Then
                statements(MonatCounter - 1) = "INSERT INTO " & _
                                                    "[DB_Kostenverteilung] (FK_Kosten, FK_Projekte, Monat, Jahr, Kosten) " & _
                                                "VALUES " & _
                                                    "(" & (calc_frm_projects.Range("lb_kosten").Cells(row_counter, 1).value) & ", " & PJ_ID & ", " & current_Monat & ", " & current_Jahr & ", " & VBA.Replace(AufwandProMonat + AufwandRest, ",", ".") & ")" & VBA.Chr(10)
            End If
        End If
    End If
    
    If Class_Functions.DB.TransStatements(statements) Then
        Insert_CostVerteilung = True
    Else
        Insert_CostVerteilung = False
    End If
    
End Function

Public Function Insert_Verfuegbarkeit(RessID As String, Monat As String, Jahr As String, wert As String)
    Dim ID As String
    Dim statements(2) As String
    
    statement = "Insert Into [Verfuegbarkeit] " & _
                        "(FK_Ressourcenart, " & _
                        "Monat, " & _
                        "Jahr, " & _
                        "Wert) " & _
                    "Values " & _
                        "(" & RessID & ", " & _
                        Monat & ", " & _
                        Jahr & ", " & _
                        VBA.Replace(wert, ",", ".") & ")"

    statement = statement & ";;;;;;SELECT max(ID) AS NewID FROM [Verfuegbarkeit]"
    
    ID = Class_Functions.DB.Insert_Statement(statement)
    
    If ID = "-1" Then
        Insert_Verfuegbarkeit = False
        Exit Function
    Else
        Insert_Verfuegbarkeit = True
        Exit Function
    End If

End Function

Public Function Insert_Kostenart(Shortname As String, name As String, Kostenart As String)
    Dim ID As String
    Dim statements(2) As String
    
    If VBA.LCase(Kostenart) = "true" Then
        Kostenart = Class_Functions.DB.Parse2True()
    Else
        Kostenart = 0
    End If
    
    statement = "Insert Into [DB_Kostenarten] " & _
                        "(Kostenart, " & _
                        "active) " & _
                    "Values " & _
                        "(" & Kostenart & ", " & _
                        Class_Functions.DB.Parse2True() & ")"
                    
    statement = statement & ";;;;;;SELECT max(ID) AS NewID FROM [DB_Kostenarten]"
    
    ID = Class_Functions.DB.Insert_Statement(statement)
    
    If ID = "-1" Then
        Insert_Kostenart = False
        Exit Function
    End If
    
    'Sprache Shortname
    statements(0) = "Insert Into [DB_Language] " & _
                        "(Term, " & _
                        "intern , " & _
                        calc_master.Range("aktuelle_sprache").value & ") " & _
                    "Values " & _
                        "('ka" & ID & "_shortname', " & _
                        Class_Functions.DB.Parse2True() & ", '" & _
                        Shortname & "') "
    'Sprache Name
    statements(1) = "Insert Into [DB_Language] " & _
                        "(Term, " & _
                        "intern , " & _
                        calc_master.Range("aktuelle_sprache").value & ") " & _
                    "Values " & _
                        "('ka" & ID & "_name', " & _
                        Class_Functions.DB.Parse2True() & ", '" & _
                        name & "') "
    'Sonstige Werte
    statements(2) = "UPDATE [DB_Kostenarten] " & _
                    "SET " & _
                        "FK_Language_Shortname = 'ka" & ID & "_shortname', " & _
                        "FK_Language_Name = 'ka" & ID & "_name' " & _
                    "WHERE " & _
                        "ID = " & ID
                    
    If Class_Functions.DB.TransStatements(statements) = True Then
        Insert_Kostenart = True
    Else
        Insert_Kostenart = False
    End If
End Function

'Zuerst werden alle Daten zu den ID|fffd|s gel|fffd|scht und dann alle neu hinzugef|fffd|gt (ein transaction!!!)
Public Function Insert_BarChart_Listbox(Template_ID As String, table As String, FKName As String, lb As Object)
    Dim rowCounter As Integer
    Dim statements() As String
    Dim counter As Integer
    
    ReDim statements(1)
    
    'Alle Werte aus Verkn|fffd|pften Tabellen zum BarChart l|fffd|schen
    If table = "DB_Settings_BarChart_KD" Then
        statements(0) = "DELETE FROM [DB_Settings_BarChart_KD] " & _
                        "WHERE " & _
                            "FK_Settings_BarChart = " & Template_ID
    Else
        statements(0) = "DELETE FROM [DB_Settings_BarChart_KA] " & _
                        "WHERE " & _
                            "FK_Settings_BarChart = " & Template_ID
        statements(1) = "DELETE FROM [DB_Settings_BarChart_RA] " & _
                        "WHERE " & _
                            "FK_Settings_BarChart = " & Template_ID
    End If
    
    'Listbox durchgehen und Insert generieren (mehrere Insert Statements)
    For counter = 0 To lb.listCount - 1 Step 1
        If lb.Selected(counter) = True Then
            rowCounter = rowCounter + 1
        End If
    Next counter
    
    ReDim Preserve statements(rowCounter + 1)
    rowCounter = 2
    
    For counter = 0 To lb.listCount - 1 Step 1
        If lb.Selected(counter) = True Then
            statements(rowCounter) = statements(rowCounter) & VBA.Chr(10) & "Insert Into [" & table & "] " & _
                                "(" & FKName & ", " & _
                                "FK_Settings_BarChart) " & _
                            "Values " & _
                                "(" & lb.list(counter, 0) & ", " & _
                                Template_ID & ") "
            rowCounter = rowCounter + 1
        End If
    Next counter
    
    If Class_Functions.DB.TransStatements(statements) = True Then
        Insert_BarChart_Listbox = True
    Else
        Insert_BarChart_Listbox = False
    End If
End Function

'Zuerst werden alle Daten zu den ID|fffd|s gel|fffd|scht und dann alle neu hinzugef|fffd|gt (ein transaction!!!)
Public Function Insert_RessHisto_RA(Template_ID As String, lb As Object)
    Dim statements() As String
    Dim counter As Integer
    Dim rowCounter As Integer
    
    ReDim statements(0)
    
    'Alle Werte zum RessHisto Template l|fffd|schen
    statements(0) = "DELETE FROM [DB_Settings_RessHisto_RA] " & _
                "WHERE " & _
                    "FK_Settings_RessHisto = " & Template_ID
    
    'Listbox durchgehen und Insert generieren (mehrere Insert Statements)
    For counter = 0 To lb.listCount - 1 Step 1
        If lb.Selected(counter) = True Then
            rowCounter = rowCounter + 1
        End If
    Next counter
    
    ReDim Preserve statements(rowCounter)
    rowCounter = 1
    
    For counter = 0 To lb.listCount - 1 Step 1
        If lb.Selected(counter) = True Then
            statements(rowCounter) = "Insert Into [DB_Settings_RessHisto_RA] " & _
                                        "(FK_Ressourcenarten, " & _
                                        "FK_Settings_RessHisto) " & _
                                    "Values " & _
                                        "(" & lb.list(counter, 0) & ", " & _
                                        Template_ID & ") "
            rowCounter = rowCounter + 1
        End If
    Next counter
    
    If Class_Functions.DB.TransStatements(statements) = True Then
        Insert_RessHisto_RA = True
    Else
        Insert_RessHisto_RA = False
    End If
End Function

'Zuerst werden alle Daten zu den ID|fffd|s gel|fffd|scht und dann alle neu hinzugef|fffd|gt (ein transaction!!!)
Public Function Insert_Users_PFType(Username As String, lb As Object)
    Dim listCount As Integer
    listCount = lb.listCount
    
    Dim statements() As String
    ReDim statements(listCount)
    Dim counter As Integer
    
    'Alle Werte zum RessHisto Template l|fffd|schen
    statements(0) = "DELETE FROM [DB_User_PFType] " & _
                "WHERE " & _
                    "FK_Username = '" & Username & "'"
    
    statements(1) = ""
    
    'Listbox durchgehen und Insert generieren (mehrere Insert Statements)
    For counter = 0 To lb.listCount - 1 Step 1
        If lb.Selected(counter) = True Then
            statements(counter + 1) = "Insert Into [DB_User_PFType] " & _
                                            "(FK_Username, " & _
                                            "FK_KatDetail) " & _
                                        "Values " & _
                                            "('" & Username & "', " & _
                                            lb.list(counter, 0) & ") "
        End If
    Next counter
    
    If Class_Functions.DB.TransStatements(statements) = True Then
        Insert_Users_PFType = True
    Else
        Insert_Users_PFType = False
    End If
End Function

'F|fffd|gt eine Settigszeile f|fffd|r den angelegten Portfolio Typ hinzu
Public Function Insert_PFType_Settings(KatD_ID As String)
'
'    'Alle Werte zum RessHisto Template l|fffd|schen
'    Statements(0) = "DELETE FROM [DB_User_PFType] " & _
'                "WHERE " & _
'                    "FK_Username = '" & username & "'"
'
'    Statements(1) = ""
'
'    'Listbox durchgehen und Insert generieren (mehrere Insert Statements)
'    For counter = 0 To lb.ListCount - 1 Step 1
'        If lb.Selected(counter) = True Then
'            Statements(1) = Statements(1) & VBA.Chr(10) & _
'                            "Insert Into [DB_User_PFType] " & _
'                                "(FK_Username, " & _
'                                "FK_KatDetail) " & _
'                            "Values " & _
'                                "('" & username & "', " & _
'                                lb.List(counter, 0) & ") "
'        End If
'    Next counter
'
'    If Class_Functions.db.TransStatements(Statements) = True Then
'        Insert_Users_PFType = True
'    Else
'        Insert_Users_PFType = False
'    End If
End Function

'Zuerst werden alle Daten zu den ID|fffd|s gel|fffd|scht und dann alle neu hinzugef|fffd|gt (ein transaction!!!)
Public Function Insert_CostHisto_KA(Template_ID As String, lb As Object)
    Dim statements() As String
    Dim counter As Integer
    Dim rowCounter As Integer
    
    ReDim statements(0)
    
    'Alle Werte zum RessHisto Template l|fffd|schen
    statements(0) = "DELETE FROM [DB_Settings_CostHisto_KA] " & _
                "WHERE " & _
                    "FK_Settings_CostHisto = " & Template_ID
    
    'Listbox durchgehen und Insert generieren (mehrere Insert Statements)
    For counter = 0 To lb.listCount - 1 Step 1
        If lb.Selected(counter) = True Then
            rowCounter = rowCounter + 1
        End If
    Next counter
    
    ReDim Preserve statements(rowCounter)
    rowCounter = 1
    
    For counter = 0 To lb.listCount - 1 Step 1
        If lb.Selected(counter) = True Then
            statements(rowCounter) = "Insert Into [DB_Settings_CostHisto_KA] " & _
                                        "(FK_Kostenarten, " & _
                                        "FK_Settings_CostHisto) " & _
                                    "Values " & _
                                        "(" & lb.list(counter, 0) & ", " & _
                                        Template_ID & ") "
            rowCounter = rowCounter + 1
        End If
    Next counter
    
    If Class_Functions.DB.TransStatements(statements) = True Then
        Insert_CostHisto_KA = True
    Else
        Insert_CostHisto_KA = False
    End If
End Function

'Zuerst werden alle Daten zu den ID|fffd|s gel|fffd|scht und dann alle neu hinzugef|fffd|gt (ein transaction!!!)
Public Function Insert_PjTable_K(Template_ID As String, lb As Object, ress As String, costs As String)
    If Not VBA.IsNumeric(Template_ID) Then Exit Function
    
    Dim dkat As Boolean
    
    Dim statements() As String
    Dim counter As Integer
    Dim rowCounter As Integer
    
    ReDim statements(0)
    
    'Alle Werte zum RessHisto Template l|fffd|schen
    statements(0) = "DELETE FROM [DB_Settings_PjTable_K] " & _
                "WHERE " & _
                    "FK_Settings_PjTable = " & Template_ID
    
    ReDim Preserve statements(lb.listCount)
    rowCounter = 1
    
    'Listbox durchgehen und Insert generieren (mehrere Insert Statements)
    For counter = 0 To lb.listCount - 1 Step 1
        If lb.list(counter, 2) = "DB_Kategorie_Detail" Then
            dkat = True
        Else
            dkat = False
        End If
        
        If lb.list(counter, 0) = ress Then
            'Wenn Ressourcen dann KatID = 1 und resscost = r
            statements(rowCounter) = "Insert Into [DB_Settings_PjTable_K] " & _
                                        "(FK_Kategorie, " & _
                                        "FK_Settings_PjTable, " & _
                                        "resscost, " & _
                                        "OrderBy) " & _
                                    "Values " & _
                                        "(100, " & _
                                        Template_ID & ", " & _
                                        "'r', " & _
                                        counter & ") "
            rowCounter = rowCounter + 1
        ElseIf lb.list(counter, 0) = costs Then
            'Wenn Kosten dann KatID = 2 und resscost = c
            statements(rowCounter) = "Insert Into [DB_Settings_PjTable_K] " & _
                                        "(FK_Kategorie, " & _
                                        "FK_Settings_PjTable, " & _
                                        "resscost, " & _
                                        "OrderBy) " & _
                                    "Values " & _
                                        "(101, " & _
                                        Template_ID & ", " & _
                                        "'c', " & _
                                        counter & ") "
            rowCounter = rowCounter + 1
        Else
            'Wenn Kategorie dann KatID = KatID und resscost = ""
            Dim boolValue As String
            
            If VBA.LCase(nlc_intern.get_true_false(dkat)) = Class_Functions.DB.Parse2True Then
                boolValue = Class_Functions.DB.Parse2True
            Else
                boolValue = 0
            End If
            statements(rowCounter) = "Insert Into [DB_Settings_PjTable_K] " & _
                                        "(FK_Kategorie, " & _
                                        "FK_Settings_PjTable, " & _
                                        "Dkat, " & _
                                        "OrderBy) " & _
                                    "Values " & _
                                        "(" & lb.list(counter, 1) & ", " & _
                                        Template_ID & ", " & _
                                        boolValue & ", " & _
                                        counter & ") "
            rowCounter = rowCounter + 1
        End If
    Next counter
    
    If Class_Functions.DB.TransStatements(statements) = True Then
        Insert_PjTable_K = True
    Else
        Insert_PjTable_K = False
    End If
End Function

'Zuerst werden alle Daten zu den ID|fffd|s gel|fffd|scht und dann alle neu hinzugef|fffd|gt (ein transaction!!!)
Public Function Insert_PjTable_KA(Template_ID As String, lb As Object)
    Dim statements() As String
    Dim counter As Integer
    Dim itemCounter As Integer
    
    ReDim statements(0)
    
    'Alle Werte zum RessHisto Template l|fffd|schen
    statements(0) = "DELETE FROM [DB_Settings_PjTable_KA] " & _
                "WHERE " & _
                    "FK_Settings_PjTable = " & Template_ID
    
       
    'Listbox durchgehen und Insert generieren (mehrere Insert Statements)
    For counter = 0 To lb.listCount - 1 Step 1
        If lb.Selected(counter) = True Then
            itemCounter = itemCounter + 1
        End If
    Next counter
    
    ReDim Preserve statements(itemCounter)
    
    itemCounter = 1
    For counter = 0 To lb.listCount - 1 Step 1
        If lb.Selected(counter) = True Then
            statements(itemCounter) = "Insert Into [DB_Settings_PjTable_KA] " & _
                                "(FK_Kostenarten, " & _
                                "FK_Settings_PjTable, " & _
                                "OrderBy) " & _
                            "Values " & _
                                "(" & lb.list(counter, 0) & ", " & _
                                Template_ID & ", " & _
                                counter & ") "
            itemCounter = itemCounter + 1
        End If
    Next counter
    
    If Class_Functions.DB.TransStatements(statements) = True Then
        Insert_PjTable_KA = True
    Else
        Insert_PjTable_KA = False
    End If
End Function

'Zuerst werden alle Daten zu den ID|fffd|s gel|fffd|scht und dann alle neu hinzugef|fffd|gt (ein transaction!!!)
Public Function Insert_PjTable_RA(Template_ID As String, lb As Object)
    Dim statements() As String
    Dim counter As Integer
    Dim itemCounter As Integer
    
    ReDim statements(0)
    
    'Alle Werte zum RessHisto Template l|fffd|schen
    statements(0) = "DELETE FROM [DB_Settings_PjTable_RA] " & _
                "WHERE " & _
                    "FK_Settings_PjTable = " & Template_ID
    
    
    
    'Listbox durchgehen und Insert generieren (mehrere Insert Statements)
    For counter = 0 To lb.listCount - 1 Step 1
        If lb.Selected(counter) = True Then
            itemCounter = itemCounter + 1
        End If
    Next counter
    
    ReDim Preserve statements(itemCounter)
    
    itemCounter = 1
    For counter = 0 To lb.listCount - 1 Step 1
        If lb.Selected(counter) = True Then
            statements(itemCounter) = "Insert Into [DB_Settings_PjTable_RA] " & _
                                        "(FK_Ressourcenarten, " & _
                                        "FK_Settings_PjTable, " & _
                                        "OrderBy) " & _
                                    "Values " & _
                                        "(" & lb.list(counter, 0) & ", " & _
                                        Template_ID & ", " & _
                                        counter & ") "
            itemCounter = itemCounter + 1
        End If
    Next counter
    
    If Class_Functions.DB.TransStatements(statements) = True Then
        Insert_PjTable_RA = True
    Else
        Insert_PjTable_RA = False
    End If
End Function

Public Function Insert_UserRights(PJID As String, lb As Object)
    Dim statements() As String
    Dim counter As Integer
    Dim itemCounter As Integer
    
    ReDim statements(0)
    
    statements(0) = "DELETE FROM [DB_Projekt_User_Zuordnung] " & _
                "WHERE " & _
                    "FK_Projekte = '" & PJID & "'"
    
    
    
    'Listbox durchgehen und Insert generieren (mehrere Insert Statements)
    For counter = 0 To lb.listCount - 1 Step 1
        If lb.Selected(counter) = True Then
            itemCounter = itemCounter + 1
        End If
    Next counter
    
    ReDim Preserve statements(itemCounter)
    
    itemCounter = 1
    For counter = 0 To lb.listCount - 1 Step 1
        If lb.Selected(counter) = True Then
            statements(itemCounter) = "Insert Into [DB_Projekt_User_Zuordnung] " & _
                                        "(FK_Projekte, " & _
                                        "FK_Users) " & _
                                    "Values " & _
                                        "(" & PJID & ", '" & _
                                        lb.list(counter, 0) & "') "
            itemCounter = itemCounter + 1
        End If
    Next counter
    
    If Class_Functions.DB.TransStatements(statements) = True Then
        Insert_UserRights = True
    Else
        Insert_UserRights = False
    End If
End Function

'Zuerst werden alle Daten zu den ID|fffd|s gel|fffd|scht und dann alle neu hinzugef|fffd|gt (ein transaction!!!)
Public Function Insert_FieldVisibility(Username As String, lb As Object)
    Dim statements() As String
    Dim counter As Integer
    Dim itemCounter As Integer
    
    ReDim statements(0)
    
    statements(0) = "DELETE FROM [DB_FieldVisibility] " & _
                "WHERE " & _
                    "FK_DB_Users = '" & Username & "'"
    
    
    
    'Listbox durchgehen und Insert generieren (mehrere Insert Statements)
    For counter = 0 To lb.listCount - 1 Step 1
        If lb.Selected(counter) = True Then
            itemCounter = itemCounter + 1
        End If
    Next counter
    
    ReDim Preserve statements(itemCounter)
    
    itemCounter = 1
    For counter = 0 To lb.listCount - 1 Step 1
        If lb.Selected(counter) = True Then
            statements(itemCounter) = "Insert Into [DB_FieldVisibility] " & _
                                        "(FK_DB_Kategorie, " & _
                                        "FK_DB_Users) " & _
                                    "Values " & _
                                        "(" & lb.list(counter, 0) & ", '" & _
                                        Username & "') "
            itemCounter = itemCounter + 1
        End If
    Next counter
    
    If Class_Functions.DB.TransStatements(statements) = True Then
        Insert_FieldVisibility = True
    Else
        Insert_FieldVisibility = False
    End If
End Function

Public Sub Insert_SPFields(ByRef list() As String, listDbId As Integer)
    Dim counter As Integer
    
    'Vorhandene Werte abfragen
    statement = "SELECT " & _
                    "SP_FieldID " & _
                "FROM " & _
                    "DB_SharePointFields " & _
                "WHERE " & _
                    "FK_SharePointLists=" & listDbId
                    
                    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        While Not Class_Functions.DB.Recordset.EOF
            For counter = 0 To UBound(list, 2) Step 1
                If Class_Functions.DB.Recordset!SP_FieldID = list(0, counter) Then
                    list(0, counter) = ""
                    Exit For
                End If
            Next counter
            
            Class_Functions.DB.Recordset.movenext
        Wend
    End If
    
    'Werte hinzuf|fffd|gen
    For counter = 0 To UBound(list, 2) Step 1
        If list(0, counter) <> "" Then
            statement = "INSERT " & _
                            "INTO DB_SharePointFields (FK_SharePointLists, SP_FieldID, SP_FieldName, SP_FieldType) " & _
                            "VALUES (" & listDbId & ",'" & list(0, counter) & "','" & VBA.Replace(list(1, counter), "'", "''") & "','" & VBA.Replace(list(2, counter), "'", "''") & "')"
                            
            If Class_Functions.DB.Insert_Statement(statement) Then
                
            End If
        End If
    Next counter
    
End Sub

'#########################################
'                 Update
'#########################################

'Editiert einen Eintrag in die Tabelle DB_Language
Public Function Update_LanguageValues(Term As String, feld As String, wert As String) As Boolean
    statement = "Update [DB_Language] " & _
                "Set " & _
                    feld & "= '" & wert & "' " & _
                "Where " & _
                    "[DB_Language].Term = " & Term & " "
    
    'return
    Update_LanguageValues = Class_Functions.DB.Update_Statement(statement)
End Function

'Editiert einen Eintrag in die Tabelle Planstellen
Public Function Update_Planstellen(Planstelle As String, RessID As String)
    statement = "Update [Planstellen] " & _
                "Set " & _
                    "FK_Ressourcenart = " & RessID & " " & _
                "Where " & _
                    "Bezeichnung = '" & Planstelle & "'"
    
    'return
    Update_Planstellen = Class_Functions.DB.Update_Statement(statement)
End Function

'Editiert einen Eintrag in die Tabelle DB_Kategoriewerte
Public Function Update_KategorieValues(Projekt_ID As String, Kategorie_ID As String, wert As String, KategorieDetail_ID As String, col As String) As Boolean
    If wert <> "NULL" And col <> "Wert_Zahl" Then
        wert = "'" & wert & "'"
    End If
    
    statement = "Update [DB_Kategoriewerte] " & _
                "Set " & _
                    col & "= " & wert & ", " & _
                    "FK_Kategorie_Detail=" & KategorieDetail_ID & " " & _
                "Where " & _
                    "[DB_Kategoriewerte].FK_Projekte = " & Projekt_ID & " " & _
                    "And " & _
                    "[DB_Kategoriewerte].FK_Kategorie = " & Kategorie_ID
    
    'return
    Update_KategorieValues = Class_Functions.DB.Update_Statement(statement)
End Function

'Editiert einen Eintrag in die Tabelle DB_Kategoriewerte
Public Function Update_RessourceValues(Projekt_ID As String, Ressvalue_ID As String, feld As String, wert As String) As Boolean
    If wert = "" Then wert = "NULL"
    
    statement = "Update [DB_Ressourcen] " & _
                "Set " & _
                    feld & "= " & wert & " " & _
                "Where " & _
                    "[DB_Ressourcen].ID = " & Ressvalue_ID
    
    'return
    Update_RessourceValues = Class_Functions.DB.Update_Statement(statement)
End Function

'Editiert einen Eintrag in die Tabelle DB_Kosten
Public Function Update_KostenValues(Projekt_ID As String, Kostenvalue_ID As String, feld As String, wert As String) As Boolean
    If wert = "" Then wert = "NULL"
    
    statement = "Update [DB_Kosten] " & _
                "Set " & _
                    feld & "= " & wert & " " & _
                "Where " & _
                    "[DB_Kosten].ID = " & Kostenvalue_ID
    
    'return
    Update_KostenValues = Class_Functions.DB.Update_Statement(statement)
End Function

'Editiert einen Eintrag in die Tabelle DB_Meilensteine
Public Function Update_MilestoneValues(Projekt_ID As String, Milestone_ID As String, feld As String, wert As String) As Boolean
    If wert = "" Then
        wert = "NULL"
    Else
        If VBA.UCase(wert) = "TRUE" Then
            wert = Class_Functions.DB.Parse2True()
        ElseIf VBA.UCase(wert) = "FALSE" Then
            wert = 0
        End If
        wert = "'" & wert & "'"
    End If
    
    'Wenn Sprache, dann anderes Statement
    statement = "Update [DB_Meilensteine] " & _
            "Set " & _
                feld & "= " & wert & " " & _
            "Where " & _
                "[DB_Meilensteine].ID = " & Milestone_ID
    
    'return
    Update_MilestoneValues = Class_Functions.DB.Update_Statement(statement)
End Function

'Editiert einen Eintrag in die Tabelle DB_Ressourcenarten
Public Function Update_Ressourcearten(Ressart_ID As String, feld As String, wert As String) As Boolean
    'Wenn Sprache, dann anderes Statement
    If feld = "FK_Language_Shortname" Or feld = "FK_Language_Name" Then
        statement = "Update [DB_Language] " & _
                "Set " & _
                    "[DB_Language]." & calc_master.Range("aktuelle_sprache").value & "= '" & wert & "' " & _
                "WHERE " & _
                    "[DB_Language].Term = " & _
                    "(SELECT " & _
                        "[DB_Ressourcenarten]." & feld & " " & _
                    "FROM " & _
                        "[DB_Ressourcenarten] " & _
                    "WHERE " & _
                        "[DB_Ressourcenarten].ID = " & Ressart_ID & ")"
    Else
        If VBA.IsNumeric(wert) Or wert = "NULL" Then
            statement = "Update [DB_Ressourcenarten] " & _
                    "Set " & _
                        feld & "= " & wert & " " & _
                    "Where " & _
                        "[DB_Ressourcenarten].ID = " & Ressart_ID
        Else
            If VBA.LCase(wert) = "true" Or VBA.LCase(wert) = "false" Then
                If VBA.LCase(wert) = "true" Then
                    wert = Class_Functions.DB.Parse2True()
                Else
                    wert = 0
                End If
                
                statement = "Update [DB_Ressourcenarten] " & _
                        "Set " & _
                            feld & "= " & wert & " " & _
                        "Where " & _
                            "[DB_Ressourcenarten].ID = " & Ressart_ID
            Else
                statement = "Update [DB_Ressourcenarten] " & _
                        "Set " & _
                            feld & "= '" & wert & "' " & _
                        "Where " & _
                            "[DB_Ressourcenarten].ID = " & Ressart_ID
            End If
        End If
    End If
    
    'return
    Update_Ressourcearten = Class_Functions.DB.Update_Statement(statement)
End Function

'Editiert einen Eintrag in der Tabelle Verfuegbarkeit
Public Function Update_Verfuegbarkeit(Verf_ID As String, feld As String, wert As String) As Boolean
    statement = "Update [Verfuegbarkeit] " & _
                "Set " & _
                    feld & "= " & wert & " " & _
                "Where " & _
                    "[Verfuegbarkeit].ID = " & Verf_ID
                    
    Update_Verfuegbarkeit = Class_Functions.DB.Update_Statement(statement)
End Function

'Editiert einen Eintrag in die Tabelle DB_Einheiten
Public Function Update_Einheiten(Einheit_ID As String, feld As String, wert As String) As Boolean
    'Wenn Sprache, dann anderes Statement
    If feld = "FK_Language_Shortname" Or feld = "FK_Language_Name" Then
        statement = "Update [DB_Language] " & _
                "Set " & _
                    "[DB_Language]." & calc_master.Range("aktuelle_sprache").value & "= '" & wert & "' " & _
                "WHERE " & _
                    "[DB_Language].Term = " & _
                    "(SELECT " & _
                        "[DB_Einheit]." & feld & " " & _
                    "FROM " & _
                        "[DB_Einheit] " & _
                    "WHERE " & _
                        "[DB_Einheit].ID = " & Einheit_ID & ")"
    Else
        statement = "Update [DB_Einheit] " & _
                "Set " & _
                    feld & "= '" & wert & "' " & _
                "Where " & _
                    "[DB_Einheit].ID = " & Einheit_ID
    End If
    
    'return
    Update_Einheiten = Class_Functions.DB.Update_Statement(statement)
End Function

'Editiert einen Eintrag in die Tabelle DB_PPF_Settings
Public Function Update_PF_Settings(ID As String, feld As String, wert As String) As Boolean
    statement = "Update [DB_PPF_Settings] " & _
            "Set " & _
                feld & "= '" & wert & "' " & _
            "Where " & _
                "[DB_PPF_Settings].ID = " & ID
    
    'return
    Update_PF_Settings = Class_Functions.DB.Update_Statement(statement)
End Function

'Editiert einen Eintrag in die Tabelle DB_PPF_Settings
'Es wird abgefragt, ob schon ein Wert vorhanden ist, sonst wird ein neuer erstellt
Public Function Update_PFType_Settings(katD As String, feld As String, wert As String) As Boolean
    Dim ID As String
    statement = "SELECT " & _
                    "Settings.ID " & _
                "FROM " & _
                    "[DB_PPF_Settings] AS Settings " & _
                "WHERE " & _
                    "Settings.FK_KatDetail_PFType = " & katD
       
    If Not VBA.IsNumeric(wert) Then
        wert = "'" & wert & "'"
    End If
       
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            'Eintrag edtieren
            statement = "Update [DB_PPF_Settings] " & _
            "Set " & _
                feld & " = " & wert & " " & _
            "Where " & _
                "[DB_PPF_Settings].ID = " & Class_Functions.DB.Recordset!ID & ""
                
            Update_PFType_Settings = Class_Functions.DB.Update_Statement(statement)
        Else
            'neuen Eintrag erstellen
            statement = "Insert Into [DB_PPF_Settings] " & _
                        "(FK_KatDetail_PFType, " & _
                        feld & ") " & _
                    "Values " & _
                        "(" & katD & ", " & _
                        wert & ")"
            
            ID = Class_Functions.DB.Insert_Statement(statement)
            If ID <> "-1" Then
                Update_PFType_Settings = True
            Else
                Update_PFType_Settings = False
            End If
        End If
    End If
End Function

'Editiert einen Eintrag in die Tabelle DB_Users
Public Function Update_User(User_Name As String, feld As String, wert As String) As Boolean
    statement = "Update [DB_Users] " & _
            "Set " & _
                feld & "= '" & wert & "' " & _
            "Where " & _
                "[DB_Users].Username = '" & User_Name & "'"
    
    'return
    Update_User = Class_Functions.DB.Update_Statement(statement)
End Function

'Editiert einen Eintrag in die Tabelle DB_Settings_Pipeline
Public Function Update_Settings_Pipeline(Settings_Pipeline_ID As String, feld As String, ByVal wert As String) As Boolean
    statement = "Update [DB_Settings_Pipeline] " & _
            "Set " & _
                feld & "= '" & wert & "' " & _
            "Where " & _
                "[DB_Settings_Pipeline].ID = " & Settings_Pipeline_ID
    
    'return
    Update_Settings_Pipeline = Class_Functions.DB.Update_Statement(statement)
End Function

'Editiert einen Eintrag in die Tabelle DB_Settings_Matrixchart
Public Function Update_Settings_Matrixchart(Settings_Matrixchart_ID As String, feld As String, ByVal wert As String) As Boolean
    statement = "Update [DB_Settings_Matrixchart] " & _
            "Set " & _
                feld & "= '" & wert & "' " & _
            "Where " & _
                "[DB_Settings_Matrixchart].ID = " & Settings_Matrixchart_ID
    
    'return
    Update_Settings_Matrixchart = Class_Functions.DB.Update_Statement(statement)
End Function

'Editiert einen Eintrag in die Tabelle DB_Settings_PieChart
Public Function Update_Settings_Piechart(Settings_Piechart_ID As String, feld As String, ByVal wert As String) As Boolean
    statement = "Update [DB_Settings_PieChart] " & _
            "Set " & _
                feld & "= '" & wert & "' " & _
            "Where " & _
                "[DB_Settings_PieChart].ID = " & Settings_Piechart_ID
    
    'return
    Update_Settings_Piechart = Class_Functions.DB.Update_Statement(statement)
End Function

'Editiert einen Eintrag in die Tabelle DB_Settings_Gantt
Public Function Update_Settings_Gantt(Settings_Gantt_ID As String, feld As String, ByVal wert As String) As Boolean
    If feld = "milestones" Or feld = "baseplan" Or feld = "projects" Then
        If VBA.LCase(wert) = Class_Functions.DB.Parse2True() Then
            wert = Class_Functions.DB.Parse2True()
        Else
            wert = "0"
        End If
    Else
        wert = "'" & wert & "'"
    End If

    statement = "Update [DB_Settings_Gantt] " & _
            "Set " & _
                feld & "= " & wert & " " & _
            "Where " & _
                "[DB_Settings_Gantt].ID = " & Settings_Gantt_ID
    
    'return
    Update_Settings_Gantt = Class_Functions.DB.Update_Statement(statement)
End Function

'Editiert einen Eintrag in die Tabelle DB_Settings_Projectviewer
Public Function Update_Settings_PViewer(Settings_Viewer_ID As String, feld As String, ByVal wert As String) As Boolean
    statement = "Update [DB_Settings_Projectviewer] " & _
            "Set " & _
                feld & "= '" & wert & "' " & _
            "Where " & _
                "[DB_Settings_Projectviewer].ID = " & Settings_Viewer_ID
    
    'return
    Update_Settings_PViewer = Class_Functions.DB.Update_Statement(statement)
End Function

'Editiert einen Eintrag in die Tabelle DB_Settings_PieChart
Public Function Update_Settings_PjTable(Settings_PjTable_ID As String, feld As String, ByVal wert As String) As Boolean
    statement = "Update [DB_Settings_PjTable] " & _
            "Set " & _
                feld & "= '" & wert & "' " & _
            "Where " & _
                "[DB_Settings_PjTable].ID = " & Settings_PjTable_ID
    
    'return
    Update_Settings_PjTable = Class_Functions.DB.Update_Statement(statement)
End Function

'Editiert einen Eintrag in die Tabelle DB_Settings_RessHisto
Public Function Update_Settings_RessHisto(Settings_RessHisto_ID As String, feld As String, ByVal wert As String) As Boolean
    If VBA.LCase(feld) = "groups" Or VBA.LCase(feld) = "fk_filter" Or VBA.LCase(feld) = "year" Then
        If LCase(feld) = "groups" Then
            If VBA.LCase(wert) = "false" Then
                wert = 0
            Else
                wert = Class_Functions.DB.Parse2True
            End If
        End If
    Else
        wert = "'" & wert & "'"
    End If
    
    
    statement = "Update [DB_Settings_RessHisto] " & _
            "Set " & _
                "[DB_Settings_RessHisto]." & feld & "=" & wert & " " & _
            "Where " & _
                "[DB_Settings_RessHisto].ID = " & Settings_RessHisto_ID
    
    'return
    Update_Settings_RessHisto = Class_Functions.DB.Update_Statement(statement)
End Function

'Editiert einen Eintrag in die Tabelle DB_Settings_CostHisto
Public Function Update_Settings_CostHisto(Settings_CostHisto_ID As String, feld As String, ByVal wert As String) As Boolean
    If VBA.LCase(feld) <> "fk_filter" And VBA.LCase(feld) <> "year" Then
        wert = "'" & wert & "'"
    End If

    statement = "Update [DB_Settings_CostHisto] " & _
            "Set " & _
                "[DB_Settings_CostHisto]." & feld & "=" & wert & " " & _
            "Where " & _
                "[DB_Settings_CostHisto].ID = " & Settings_CostHisto_ID
    
    'return
    Update_Settings_CostHisto = Class_Functions.DB.Update_Statement(statement)
End Function

'Editiert einen Eintrag in die Tabelle DB_Settings_BarChart
Public Function Update_Settings_BarChart(Settings_BarChart_ID As String, feld As String, ByVal wert As String) As Boolean
    If VBA.LCase(wert) = "true" Then
        wert = Class_Functions.DB.Parse2True()
    ElseIf VBA.LCase(wert) = "false" Then
        wert = 0
    Else
        wert = "'" & wert & "'"
    End If
    
    statement = "Update [DB_Settings_BarChart] " & _
            "Set " & _
                feld & "=" & wert & " " & _
            "Where " & _
                "[DB_Settings_BarChart].ID = " & Settings_BarChart_ID
    
    'return
    Update_Settings_BarChart = Class_Functions.DB.Update_Statement(statement)
End Function

'Editiert einen Eintrag in die Tabelle DB_Kostenarten
Public Function Update_Kostenarten(Kostart_ID As String, feld As String, wert As String) As Boolean
    'Wenn Sprache, dann anderes Statement
    If feld = "FK_Language_Shortname" Or feld = "FK_Language_Name" Then
        statement = "Update [DB_Language] " & _
                "Set " & _
                    "[DB_Language]." & calc_master.Range("aktuelle_sprache").value & "= '" & wert & "' " & _
                "WHERE " & _
                    "[DB_Language].Term = (" & _
                    "SELECT " & _
                        "[DB_Kostenarten]." & feld & " " & _
                    "FROM " & _
                        "[DB_Kostenarten] " & _
                    "WHERE " & _
                        "[DB_Kostenarten].ID = " & Kostart_ID & ")"
    Else
        If VBA.IsNumeric(wert) Or wert = "NULL" Then
            statement = "Update [DB_Kostenarten] " & _
                    "Set " & _
                        feld & "= " & wert & " " & _
                    "Where " & _
                        "[DB_Kostenarten].ID = " & Kostart_ID
        Else
            If VBA.LCase(wert) = "true" Or VBA.LCase(wert) = "false" Then
                If VBA.LCase(wert) = "true" Then
                    wert = Class_Functions.DB.Parse2True()
                Else
                    wert = 0
                End If
                
                statement = "Update [DB_Kostenarten] " & _
                "Set " & _
                    feld & "= " & wert & " " & _
                "Where " & _
                    "[DB_Kostenarten].ID = " & Kostart_ID
            Else
                statement = "Update [DB_Kostenarten] " & _
                "Set " & _
                    feld & "= '" & wert & "' " & _
                "Where " & _
                    "[DB_Kostenarten].ID = " & Kostart_ID
            End If
        End If
    End If
    
    'return
    Update_Kostenarten = Class_Functions.DB.Update_Statement(statement)
End Function

'Editiert einen Eintrag in die Tabelle DB_Kategorie
Public Function Update_Kategorien(Kategorie_ID As String, feld As String, wert As String) As Boolean
    If wert = "" Then
        wert = "NULL"
    End If
    
    'Wenn Sprache, dann anderes Statement
    If feld = "FK_Language_Shortname" Or feld = "FK_Language_Name" Then
        statement = "Update [DB_Language] " & _
                "Set " & _
                    "[DB_Language]." & calc_master.Range("aktuelle_sprache").value & "= '" & wert & "' " & _
                "WHERE " & _
                    "[DB_Language].Term = " & _
                    "(SELECT " & _
                        "[DB_Kategorie]." & feld & " " & _
                    "FROM " & _
                        "[DB_Kategorie] " & _
                    "WHERE " & _
                        "[DB_Kategorie].ID = " & Kategorie_ID & ")"
    Else
        If VBA.IsNumeric(wert) Or wert = "NULL" Then
            wert = VBA.Replace(wert, ",", ".")
            statement = "Update [DB_Kategorie] " & _
                    "Set " & _
                        feld & "=" & wert & " " & _
                    "Where " & _
                        "[DB_Kategorie].ID = " & Kategorie_ID
        Else
            If VBA.LCase(wert) = "true" Or VBA.LCase(wert) = "false" Then
                If VBA.LCase(wert) = "true" Then
                    wert = Class_Functions.DB.Parse2True()
                Else
                    wert = 0
                End If
                
                statement = "Update [DB_Kategorie] " & _
                    "Set " & _
                        feld & "=" & wert & " " & _
                    "Where " & _
                        "[DB_Kategorie].ID = " & Kategorie_ID
            Else
                statement = "Update [DB_Kategorie] " & _
                    "Set " & _
                        feld & "='" & wert & "' " & _
                    "Where " & _
                        "[DB_Kategorie].ID = " & Kategorie_ID
            End If
        End If
    End If
    
    'return
    Update_Kategorien = Class_Functions.DB.Update_Statement(statement)
End Function

'Editiert einen Eintrag in die Tabelle DB_Projekte
Public Function Update_Projekt(ID As String, feld As String, wert As String) As Boolean
    If wert = "" Then
        wert = "NULL"
    End If
    
    statement = "Update " & _
                    "[DB_Projekte] " & _
                "Set " & _
                    feld & "='" & wert & "' " & _
                "Where " & _
                    "[DB_Projekte].ID = " & ID
    
    'return
    Update_Projekt = Class_Functions.DB.Update_Statement(statement)
End Function

'Editiert einen Eintrag in die Tabelle DB_Kategorie_Detail
Public Function Update_KategorieDetail(KategorieDetail_ID As String, feld As String, wert As String) As Boolean
    'Wenn Sprache, dann anderes Statement
    If feld = "FK_Language_Shortname" Or feld = "FK_Language_Name" Then
        statement = "Update [DB_Language] " & _
                "Set " & _
                    "[DB_Language]." & calc_master.Range("aktuelle_sprache").value & "= '" & wert & "' " & _
                "WHERE " & _
                    "[DB_Language].Term = " & _
                    "(SELECT " & _
                        "[DB_Language].Term " & _
                    "FROM " & _
                        "[DB_Kategorie_Detail] " & _
                        "LEFT JOIN " & _
                            "[DB_Language] ON [DB_Kategorie_Detail]." & feld & "= [DB_Language].Term " & _
                    "WHERE " & _
                        "[DB_Kategorie_Detail].ID = " & KategorieDetail_ID & ")"
    Else
        If VBA.LCase(wert) = "true" Or VBA.LCase(wert) = "false" Then
                If VBA.LCase(wert) = "true" Then
                    wert = Class_Functions.DB.Parse2True()
                Else
                    wert = 0
                End If
            statement = "Update [DB_Kategorie_Detail] " & _
                    "Set " & _
                        feld & "=" & wert & " " & _
                    "Where " & _
                        "[DB_Kategorie_Detail].ID = " & KategorieDetail_ID
        Else
            statement = "Update [DB_Kategorie_Detail] " & _
                    "Set " & _
                        feld & "='" & wert & "' " & _
                    "Where " & _
                        "[DB_Kategorie_Detail].ID = " & KategorieDetail_ID
        End If
    End If
    
    'return
    Update_KategorieDetail = Class_Functions.DB.Update_Statement(statement)
End Function


'#########################################
'                 Delete
'#########################################

'L|fffd|scht das angegebene Projekt komplett aus der DB inkl. aller zugeh|fffd|rigen Informationen!!!
'L|fffd|schweitergabe in DB aktiviert!!!
Public Function Delete_Project(PJ_ID As String) As Boolean
    statement = "DELETE FROM [DB_Projekte] " & _
                "WHERE " & _
                    "ID = " & PJ_ID
    
    If Class_Functions.DB.Delete_Statement(statement) = True Then
        Delete_Project = True
    Else
        Delete_Project = False
    End If
End Function

'l|fffd|scht die angegebene Verf|fffd|gbarkeit komplett aus der DB
Public Function Delete_Verfuegbarkeit(VerfID As String) As Boolean
    statement = "DELETE FROM [Verfuegbarkeit] " & _
                "WHERE " & _
                    "ID = " & VerfID
    
    If Class_Functions.DB.Delete_Statement(statement) = True Then
        Delete_Verfuegbarkeit = True
    Else
        Delete_Verfuegbarkeit = False
    End If
End Function

'L|fffd|scht die angegebene Planstelle komplett aus der DB!!!
Public Function Delete_Planstelle(Planstelle As String) As Boolean
    statement = "DELETE FROM [Planstellen] " & _
                "WHERE " & _
                    "Bezeichnung = '" & Planstelle & "'"
    
    If Class_Functions.DB.Delete_Statement(statement) = True Then
        Delete_Planstelle = True
    Else
        Delete_Planstelle = False
    End If
End Function

'L|fffd|scht das angegebene Template komplett aus der DB!!!
Public Function Delete_Template(Tamplate_ID As String, DB_Table As String) As Boolean
    statement = "DELETE FROM [" & DB_Table & "] " & _
                "WHERE " & _
                    "ID = " & Tamplate_ID
    
    If Class_Functions.DB.Delete_Statement(statement) = True Then
        Delete_Template = True
    Else
        Delete_Template = False
    End If
End Function

'L|fffd|scht den angegebene User komplett aus der DB!!!
Public Function Delete_User(Username As String) As Boolean
    statement = "DELETE FROM [DB_Users] " & _
                "WHERE " & _
                    "Username = '" & Username & "'"
    
    If Class_Functions.DB.Delete_Statement(statement) = True Then
        Delete_User = True
    Else
        Delete_User = False
    End If
End Function

'L|fffd|scht die Ressourcen-/Kosten Verteilung f|fffd|r das angegebene Projekt
Public Function Delete_Verteilung(PJ_ID As String, DB As String, feld As String, FeldID As String) As Boolean
    statement = "DELETE FROM [" & DB & "] " & _
                "WHERE " & _
                    "FK_Projekte = " & PJ_ID & " AND " & feld & "=" & FeldID
    
    If Class_Functions.DB.Delete_Statement(statement) = True Then
        Delete_Verteilung = True
    Else
        Delete_Verteilung = False
    End If
End Function

'L|fffd|scht die Ressourcen-/Kosten Verteilung f|fffd|r das angegebene Projekt
Public Function Delete_Katwert(PJ_ID As String, KatID As String) As Boolean
    statement = "DELETE FROM [DB_Kategoriewerte] " & _
                "WHERE " & _
                    "FK_Projekte = '" & PJ_ID & "' AND FK_Kategorie = " & KatID
    
    If Class_Functions.DB.Delete_Statement(statement) = True Then
        Delete_Katwert = True
    Else
        Delete_Katwert = False
    End If
End Function

Public Sub Delete_SPFields(ByRef list() As String, listDbId As Integer)
    Dim counter As Integer
    Dim SPIds As String
    
    For counter = 0 To UBound(list, 2) Step 1
        If SPIds = "" Then
            SPIds = "'" & list(0, counter) & "'"
        Else
            SPIds = SPIds & ", '" & list(0, counter) & "'"
        End If
    Next counter
    
    'MsgBox SPIds
    
    statement = "DELETE FROM " & _
                    "DB_SharePointFields " & _
                "WHERE " & _
                    "FK_SharePointLists = " & listDbId & " AND SP_FieldID NOT IN (" & SPIds & ")"
                    
    If Class_Functions.DB.Delete_Statement(statement) = False Then
        
    End If
End Sub


'#########################################
'                 Sonstiges
'#########################################

'TODO
Private Function Get_Achse(feld As String, wert As String, Achse As String, pjids As String) As String()
    Dim return_value(4) As String
    
    'return_value(0) = Select
    'return_value(1) = From
    'return_value(2) = GroupBy
    'return_value(3) = Anzahl der Klammern
    
    Select Case feld
        Case "Kosten"
            return_value(0) = ", 'Kosten' AS " & Achse & "Achse1, Kosten" & Achse & "." & wert & " AS " & Achse & "Achse2"
            return_value(1) = " LEFT JOIN " & _
                                    "(SELECT FK_Projekte, Sum(" & wert & ") As " & wert & " " & _
                                        "FROM [DB_Kosten] AS Kosten " & _
                                        "WHERE Kosten.FK_Projekte in (" & pjids & ") " & _
                                        "GROUP BY FK_Projekte" & _
                                    ") as Kosten" & Achse & " ON PJ.ID = Kosten" & Achse & ".FK_Projekte) "
            return_value(2) = ", Kosten" & Achse & "." & wert
            return_value(3) = "1"
        Case "Ressourcen"
            return_value(0) = ", 'Ressourcen' AS " & Achse & "Achse1, Ress" & Achse & "." & wert & " AS " & Achse & "Achse2"
            return_value(1) = " LEFT JOIN " & _
                                    "(SELECT FK_Projekte, Sum(" & wert & ") As " & wert & " " & _
                                        "FROM [DB_Ressourcen] AS Ress " & _
                                        "WHERE Ress.FK_Projekte in (" & pjids & ") " & _
                                        "GROUP BY FK_Projekte" & _
                                    ") as Ress" & Achse & " ON PJ.ID = Ress" & Achse & ".FK_Projekte) "
            return_value(2) = ", Ress" & Achse & "." & wert
            return_value(3) = "1"
        Case "Date"
            return_value(0) = ", LangName" & Achse & ".deutsch AS " & Achse & "Achse1, " & Class_Functions.DB.Convert("KatWert" & Achse & ".Wert_Datum", T_DATE) & " as " & Achse & "Achse2"
            return_value(1) = " LEFT JOIN " & _
                                    "[DB_Kategoriewerte] as KatWert" & Achse & " ON (KatWert" & Achse & ".FK_Projekte = PJ.ID AND KatWert" & Achse & ".FK_Kategorie =" & wert & ")) " & _
                                "LEFT JOIN " & _
                                    "[DB_Kategorie] As Kat" & Achse & " ON KatWert" & Achse & ".FK_Kategorie = Kat" & Achse & ".ID) " & _
                                "LEFT JOIN " & _
                                    "[DB_Language] As LangName" & Achse & " ON LangName" & Achse & ".Term = Kat" & Achse & ".FK_Language_Name) "
            return_value(2) = ", LangName" & Achse & ".deutsch, KatWert" & Achse & ".Wert_Datum, KatWert" & Achse & ".FK_Kategorie"
            return_value(3) = "3"
        Case "Number"
            return_value(0) = ", LangName" & Achse & ".deutsch AS " & Achse & "Achse1, KatWert" & Achse & ".Wert_Zahl as " & Achse & "Achse2"
            return_value(1) = " LEFT JOIN " & _
                                    "[DB_Kategoriewerte] as KatWert" & Achse & " ON (KatWert" & Achse & ".FK_Projekte = PJ.ID AND KatWert" & Achse & ".FK_Kategorie =" & wert & ")) " & _
                                "LEFT JOIN " & _
                                    "[DB_Kategorie] As Kat" & Achse & " ON KatWert" & Achse & ".FK_Kategorie = Kat" & Achse & ".ID) " & _
                                "LEFT JOIN " & _
                                    "[DB_Language] As LangName" & Achse & " ON LangName" & Achse & ".Term = Kat" & Achse & ".FK_Language_Name) "
            return_value(2) = ", LangName" & Achse & ".deutsch, KatWert" & Achse & ".Wert_Zahl, KatWert" & Achse & ".FK_Kategorie"
            return_value(3) = "3"
        Case "einheitlich"
            return_value(0) = ", '-' As " & Achse & "1, '1' AS " & Achse & "2"
        Case "Stapel"
    
        Case Else 'Dropdown, true/false, Farbe
            If Achse = "Farbe" Then
                return_value(0) = ", LangName" & Achse & ".deutsch AS " & Achse & "Achse1, KatDetail" & Achse & ".Farbe AS " & Achse & "Achse2"
                return_value(1) = " LEFT JOIN " & _
                                        "[DB_Kategoriewerte] AS KatWert" & Achse & " ON (KatWert" & Achse & ".FK_Projekte = PJ.ID AND KatWert" & Achse & ".FK_Kategorie = " & wert & ")) " & _
                                    "left JOIN " & _
                                        "[DB_Kategorie_Detail] AS KatDetail" & Achse & " ON KatWert" & Achse & ".FK_Kategorie_Detail = KatDetail" & Achse & ".ID) " & _
                                    "left JOIN " & _
                                        "[DB_Language] as LangName" & Achse & " ON KatDetail" & Achse & ".FK_Language_Name = LangName" & Achse & ".Term)"
                return_value(2) = ", LangName" & Achse & ".deutsch, KatWert" & Achse & ".Wert, KatWert" & Achse & ".FK_Kategorie, KatDetail" & Achse & ".Farbe"
                return_value(3) = "3"
            Else
                return_value(0) = ", LangName" & Achse & ".deutsch AS " & Achse & "Achse1, KatDetail" & Achse & ".OrderBy AS " & Achse & "Achse2"
                return_value(1) = " LEFT JOIN " & _
                                        "[DB_Kategoriewerte] AS KatWert" & Achse & " ON (KatWert" & Achse & ".FK_Projekte = PJ.ID AND KatWert" & Achse & ".FK_Kategorie = " & wert & ")) " & _
                                    "LEFT JOIN " & _
                                        "[DB_Kategorie] AS Kat" & Achse & " ON Kat" & Achse & ".ID = KatWert" & Achse & ".FK_Kategorie) " & _
                                    "LEFT JOIN " & _
                                        "[DB_Kategorie_Detail] AS KatDetail" & Achse & " ON KatWert" & Achse & ".FK_Kategorie_Detail = KatDetail" & Achse & ".ID) " & _
                                    "LEFT JOIN " & _
                                        "[DB_Language] AS LangName" & Achse & " ON KatDetail" & Achse & ".FK_Language_Name = LangName" & Achse & ".Term)"
                return_value(2) = ", LangName" & Achse & ".deutsch, KatDetail" & Achse & ".OrderBy"
                return_value(3) = "4"
            End If
    End Select
    
    Get_Achse = return_value
End Function

Private Function Get_Pie_Statement(wert As String, WertDetail As String, Cluster As String, ClusterDetail As String, Math As String, pj_ids As String)
    Dim sum_avg As String
    Dim where As String
    
    If Math = "1" Then
        sum_avg = "SUM"
    ElseIf Math = "2" Then
        sum_avg = "AVG"
    ElseIf Math = "3" Then
        sum_avg = "MIN"
    ElseIf Math = "4" Then
        sum_avg = "MAX"
    End If
    
    If wert = "Kosten" Then
    'Kosten
        'Spalte aufl|fffd|sen
        If WertDetail = "E-Plan" Then WertDetail = "Aktuell"
        If WertDetail = "O-Plan" Then WertDetail = "Basis"
        
        If Cluster = "Kosten" Then
        'Wenn Cluster = Kosten
            If pj_ids <> "" Then
                where = "WHERE Kosten.FK_Projekte in (" & pj_ids & ") and Kostenarten.active <> 0 "
            End If
        
            statement = "SELECT " & _
                            "Lang_Shortname." & calc_master.Range("aktuelle_sprache").value & " AS Shortname, " & _
                            "Lang_Name." & calc_master.Range("aktuelle_sprache").value & " AS Name, " & _
                            sum_avg & "(Kosten." & WertDetail & ") As Wert " & _
                        "From " & _
                            "((([DB_Kostenarten] AS Kostenarten LEFT JOIN " & _
                            "[DB_Kosten] AS Kosten ON kosten.FK_Kostenarten = Kostenarten.id) LEFT JOIN " & _
                            "[DB_Language] AS Lang_Shortname ON Lang_Shortname.Term = Kostenarten.FK_Language_Shortname) LEFT JOIN " & _
                            "[DB_Language] AS Lang_Name ON Lang_Name.Term =Kostenarten.FK_Language_Shortname) " & _
                        where & _
                        "GROUP BY " & _
                            "Lang_Name." & calc_master.Range("aktuelle_sprache").value & ", " & _
                            "Lang_Shortname." & calc_master.Range("aktuelle_sprache").value & " " & _
                        "ORDER BY " & _
                            sum_avg & "(Kosten." & WertDetail & ") DESC"
        
        
        ElseIf Cluster = "Ressourcen" Then
        'WENN Cluster = Ressourcen
            If pj_ids <> "" Then
                where = "WHERE Ress.FK_Projekte in (" & pj_ids & ") And Ressarten.active <> 0 "
            End If
        
            statement = "SELECT " & _
                            "Lang_Shortname." & calc_master.Range("aktuelle_sprache").value & " AS Shortname, " & _
                            "Lang_Name." & calc_master.Range("aktuelle_sprache").value & " AS Name, " & _
                            sum_avg & "(Ress." & WertDetail & " * Ressarten.Kostensatz) AS Wert " & _
                        "FROM " & _
                            "((([DB_Ressourcenarten] AS Ressarten LEFT JOIN " & _
                                "[DB_Ressourcen] AS Ress ON Ress.FK_Ressourcenarten = Ressarten.ID) LEFT JOIN " & _
                                "[DB_Language] AS Lang_Shortname ON Ressarten.FK_Language_Shortname = Lang_Shortname.Term) LEFT JOIN " & _
                                "[DB_Language] AS Lang_Name ON Ressarten.FK_Language_Name = Lang_Name.Term) " & _
                        where & _
                        "GROUP BY " & _
                            "Lang_Shortname." & calc_master.Range("aktuelle_sprache").value & ", " & _
                            "Lang_Name." & calc_master.Range("aktuelle_sprache").value & " " & _
                        "ORDER BY " & _
                            sum_avg & "(Ress." & WertDetail & " * Ressarten.Kostensatz) DESC"
        Else
        'Benutzerdefinierte Felder
            If pj_ids <> "" Then
                where = "AND Katwerte.FK_Projekte in (" & pj_ids & ") AND KatDetail.active <> 0 "
            End If
        
            statement = "SELECT " & _
                            "Lang_Shortname." & calc_master.Range("aktuelle_sprache").value & " AS Shortname, " & _
                            "Lang_Name." & calc_master.Range("aktuelle_sprache").value & " AS Name, " & _
                            sum_avg & "(Kosten." & WertDetail & ") As Wert, " & _
                            "KatDetail.Farbe AS Farbe " & _
                        "FROM " & _
                            "((((([DB_Kategorie_Detail] AS KatDetail LEFT JOIN " & _
                            "[DB_Language] AS Lang_Shortname ON Lang_Shortname.Term = KatDetail.FK_Language_Shortname) LEFT JOIN " & _
                            "[DB_Language] AS Lang_Name ON Lang_Name.Term = KatDetail.FK_Language_Name) LEFT JOIN " & _
                            "[DB_Kategoriewerte] AS Katwerte ON Katwerte.FK_Kategorie_Detail = KatDetail.ID) LEFT JOIN " & _
                            "[DB_Projekte] AS PJ ON PJ.id = Katwerte.FK_Projekte) LEFT JOIN " & _
                            "[DB_Kosten] AS Kosten ON Kosten.FK_Projekte = pj.id) " & _
                        "WHERE " & _
                            "KatDetail.FK_Kategorie = " & ClusterDetail & " " & where & _
                        "GROUP BY " & _
                            "Lang_Shortname." & calc_master.Range("aktuelle_sprache").value & ", " & _
                            "Lang_Name." & calc_master.Range("aktuelle_sprache").value & ", " & _
                            "KatDetail.Farbe " & _
                        "ORDER BY " & _
                            sum_avg & "(Kosten." & WertDetail & ") DESC"
        End If
    ElseIf wert = "Ressourcen" Then
    'Ressourcen
        'Spalte aufl|fffd|sen
        If WertDetail = "E-Plan" Then WertDetail = "Aktuell"
        If WertDetail = "O-Plan" Then WertDetail = "Basis"
    
        If Cluster = "Ressourcen" Then
        'WENN Cluster = Ressourcen
            If pj_ids <> "" Then
                where = "WHERE Ress.FK_Projekte in (" & pj_ids & ") AND Ressarten.active <> 0 "
            End If
        
            statement = "SELECT " & _
                            "Lang_Shortname." & calc_master.Range("aktuelle_sprache").value & " AS Shortname, " & _
                            "Lang_Name." & calc_master.Range("aktuelle_sprache").value & " AS Name, " & _
                            sum_avg & "(Ress." & WertDetail & ") AS Wert " & _
                        "From " & _
                            "((([DB_Ressourcenarten] AS Ressarten LEFT JOIN " & _
                            "[DB_Ressourcen] AS Ress ON ress.FK_Ressourcenarten = Ressarten.ID) LEFT JOIN " & _
                            "[DB_Language] AS Lang_Shortname ON Lang_Shortname.Term = Ressarten.FK_Language_Shortname) LEFT JOIN " & _
                            "[DB_Language] AS Lang_Name ON Lang_Name.Term = Ressarten.FK_Language_Name) " & _
                        where & _
                        "GROUP BY " & _
                            "Lang_Shortname." & calc_master.Range("aktuelle_sprache").value & ", " & _
                            "Lang_Name." & calc_master.Range("aktuelle_sprache").value & " " & _
                        "ORDER BY " & _
                            sum_avg & "(Ress." & WertDetail & ") DESC"
        ElseIf Cluster = "Kosten" Then
        'Wenn Cluster = Kosten
            If pj_ids <> "" Then
                where = "WHERE Ress.FK_Projekte in (" & pj_ids & ") AND Kostenarten.active <> 0 "
            End If
            
            statement = "SELECT " & _
                            "Lang_Shortname." & calc_master.Range("aktuelle_sprache").value & " AS Shortname, " & _
                            "Lang_Name." & calc_master.Range("aktuelle_sprache").value & " AS Name, " & _
                            sum_avg & "(Ress." & WertDetail & ") As Wert " & _
                        "From " & _
                            "(((([DB_Kostenarten] AS Kostenarten LEFT JOIN " & _
                            "[DB_Language] AS Lang_Shortname ON Kostenarten.FK_Language_Shortname = Lang_Shortname.Term) LEFT JOIN " & _
                            "[DB_Language] AS Lang_Name ON Kostenarten.FK_Language_Name = Lang_Name.Term) LEFT JOIN " & _
                            "[DB_Ressourcenarten] AS Ressarten ON Ressarten.FK_Kostenarten = Kostenarten.ID) LEFT JOIN " & _
                            "[DB_Ressourcen] AS Ress ON ress.FK_Ressourcenarten = ressarten.ID) " & _
                        where & _
                        "GROUP BY " & _
                            "Lang_Shortname." & calc_master.Range("aktuelle_sprache").value & ", " & _
                            "Lang_Name." & calc_master.Range("aktuelle_sprache").value & " " & _
                        "ORDER BY " & _
                            sum_avg & "(Ress." & WertDetail & ") DESC"
        Else
        'Benutzerdefinierte Felder
            If pj_ids <> "" Then
                where = "AND Katwerte.FK_Projekte in (" & pj_ids & ") AND KatDetail.active <> 0 "
            End If
        
            statement = "SELECT " & _
                            "Lang_Shortname." & calc_master.Range("aktuelle_sprache").value & " AS Shortname, " & _
                            "Lang_Name." & calc_master.Range("aktuelle_sprache").value & " AS Name, " & _
                            sum_avg & "(Ress." & WertDetail & ") As Wert, " & _
                            "KatDetail.Farbe AS Farbe " & _
                        "FROM " & _
                            "((((([DB_Kategorie_Detail] AS KatDetail LEFT JOIN " & _
                            "[DB_Language] AS Lang_Shortname ON Lang_Shortname.Term = KatDetail.FK_Language_Shortname) LEFT JOIN " & _
                            "[DB_Language] AS Lang_Name ON Lang_Name.Term = KatDetail.FK_Language_Name) LEFT JOIN " & _
                            "[DB_Kategoriewerte] AS Katwerte ON Katwerte.FK_Kategorie_Detail = KatDetail.ID) LEFT JOIN " & _
                            "[DB_Projekte] AS PJ ON PJ.id = Katwerte.FK_Projekte) LEFT JOIN " & _
                            "[DB_Ressourcen] AS Ress ON Ress.FK_Projekte = pj.id) " & _
                        "WHERE " & _
                            "KatDetail.FK_Kategorie = " & ClusterDetail & " " & where & _
                        "GROUP BY " & _
                            "Lang_Shortname." & calc_master.Range("aktuelle_sprache").value & ", " & _
                            "Lang_Name." & calc_master.Range("aktuelle_sprache").value & ", " & _
                            "KatDetail.Farbe " & _
                        "ORDER BY " & _
                            sum_avg & "(Ress." & WertDetail & ") DESC"
    
        End If
    ElseIf wert = "Anzahl" Then
    'Anzahl der Projekte
    'Count
        'Bezeichnung
        If pj_ids <> "" Then
            where = "AND Katwerte.FK_Projekte in (" & pj_ids & ") AND KatDetail.active <> 0 "
        End If
            
        statement = "SELECT " & _
                        "Lang_Shortname." & calc_master.Range("aktuelle_sprache").value & " AS Shortname, " & _
                        "Lang_Name." & calc_master.Range("aktuelle_sprache").value & " AS Name, " & _
                        "KatDetail.Farbe, " & _
                        "COUNT(PJ.ID) As Wert " & _
                    "From " & _
                        "(((([DB_Kategorie_Detail] AS KatDetail LEFT JOIN " & _
                        "[DB_Language] AS Lang_Shortname ON Lang_Shortname.Term = KatDetail.FK_Language_Shortname) LEFT JOIN " & _
                        "[DB_Language] AS Lang_Name ON Lang_Name.Term = KatDetail.FK_Language_Name) LEFT JOIN " & _
                        "[DB_Kategoriewerte] AS Katwerte ON katwerte.FK_Kategorie_Detail = KatDetail.ID) LEFT JOIN " & _
                        "[DB_Projekte] AS PJ ON pj.ID = katwerte.FK_Projekte) " & _
                    "WHERE " & _
                        "Katdetail.FK_Kategorie = " & ClusterDetail & " " & where & _
                    "GROUP BY  " & _
                        "Lang_Shortname." & calc_master.Range("aktuelle_sprache").value & ", " & _
                        "Lang_Name." & calc_master.Range("aktuelle_sprache").value & ",  " & _
                        "Katdetail.farbe, " & _
                        "Katdetail.OrderBy " & _
                    "ORDER BY " & _
                        "Katdetail.Orderby "
    Else
    'Benutzerdefinierte Felder
        'Bezeichnung
        If pj_ids <> "" Then
            where = "AND Katwerte.FK_Projekte in (" & pj_ids & ") AND KatDetail.active <> 0 "
        End If
        
        statement = "SELECT " & _
                        "Lang_Shortname." & calc_master.Range("aktuelle_sprache").value & " AS Shortname, " & _
                        "Lang_Name." & calc_master.Range("aktuelle_sprache").value & " AS Name, " & _
                        "Katdetail.farbe " & _
                    "FROM " & _
                        "(([DB_Language] AS Lang_Name " & _
                        "RIGHT OUTER JOIN " & _
                            "[DB_Kategorie_Detail] AS KatDetail ON Lang_Name.Term = Katdetail.FK_Language_Name) " & _
                        "LEFT OUTER JOIN " & _
                            "[DB_Language] AS Lang_Shortname ON KatDetail.FK_Language_Shortname = Lang_Shortname.Term) " & _
                    "Where " & _
                        "KatDetail.FK_Kategorie = " & ClusterDetail & " AND KatDetail.active <> 0 " & _
                    "GROUP BY " & _
                        "Lang_Shortname." & calc_master.Range("aktuelle_sprache").value & ", " & _
                        "Lang_Name." & calc_master.Range("aktuelle_sprache").value & ", " & _
                        "Katdetail.farbe , " & _
                        "Katdetail.OrderBy " & _
                    "Order BY " & _
                        "Katdetail.OrderBy "

        'Werte
        Statement2 = "SELECT " & _
                            sum_avg & "(Katwerte.Wert_Zahl) AS Wert, " & _
                            "Lang_Shortname." & calc_master.Range("aktuelle_sprache").value & " AS Shortname " & _
                        "From " & _
                            "(((([DB_Kategoriewerte] AS KatSubwerte LEFT JOIN " & _
                            "[DB_Projekte] AS PJ ON KatSubwerte.FK_Projekte = PJ.ID) LEFT JOIN " & _
                            "[DB_Kategoriewerte] AS Katwerte ON PJ.ID = Katwerte.FK_Projekte) LEFT JOIN " & _
                            "[DB_Kategorie_Detail] AS KatDetail ON KatDetail.ID = KatSubwerte.FK_Kategorie_Detail) LEFT JOIN " & _
                            "[DB_Language] AS Lang_Shortname ON Lang_Shortname.Term = KatDetail.FK_Language_Shortname) " & _
                        "Where " & _
                            "Katwerte.FK_Kategorie = " & WertDetail & " AND " & _
                            "KatDetail.FK_Kategorie = " & ClusterDetail & " " & _
                            where & _
                        "group BY " & _
                            "KatDetail.FK_Kategorie, " & _
                            "Lang_Shortname." & calc_master.Range("aktuelle_sprache").value & " " & _
                        "Order BY " & _
                            "SUM(Katwerte.Wert_Zahl) DESC "
    End If
End Function

'TODO Ressourcen
Private Function Get_Bar_Statement(Template_ID As String, wert As String, WertDetail As String, Cluster_Shortname As Boolean, Math As String, group As Boolean, pj_ids As String)
    'Weil Cluster immer Benutzerdefiniertes Feld, Spaltenbezeichnung immer anwenden
    Dim clusterLang As String
    Dim where As String
    Dim where2 As String
    Dim tempStatement As String
    Dim selTemp As String
    Dim selTemp2 As String
    
    If Cluster_Shortname Then
        clusterLang = "FK_Language_Shortname"
    Else
        clusterLang = "FK_Language_Name"
    End If
    
    statement = "SELECT " & _
                    "Lang_Shortname.deutsch AS Lang " & _
                "From " & _
                    "(([DB_Settings_BarChart_KD] AS SetBarchart " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Kategorie_Detail] AS KatDetail ON SetBarchart.FK_Kategorie_Detail = KatDetail.ID) " & _
                    "LEFT OUTER JOIN " & _
                        "[DB_Language] AS Lang_Shortname ON KatDetail." & clusterLang & " = Lang_Shortname.Term) " & _
                "Where " & _
                    "(SetBarchart.FK_Settings_BarChart = " & Template_ID & ") " & _
                "Order BY " & _
                    "Katdetail.OrderBy"
    
    Dim sum_avg As String

    If Math = "1" Then
        sum_avg = "SUM"
    ElseIf Math = "2" Then
        sum_avg = "AVG"
    ElseIf Math = "3" Then
        sum_avg = "MIN"
    ElseIf Math = "4" Then
        sum_avg = "MAX"
    End If


    '1 = Benutzerdefiniert
    '2 = Kosten
    '3 = Ressourcen
    
    If wert = 1 Then
    'Benutzerdefiniert
        If pj_ids <> "" Then
            where = "AND KatwerteValues.FK_Projekte in (" & pj_ids & ") "
            where2 = "WHERE KatWert.FK_Projekte in (" & pj_ids & ") "
        End If
            
        Statement2 = "SELECT " & _
                        "'Name' AS Name, 'Shortname' AS Shortname, " & _
                        "Lang_KatName." & calc_master.Range("aktuelle_sprache").value & " AS Katname, " & _
                        sum_avg & "(KatwerteValues.Wert_Zahl) AS Wert " & _
                    "FROM " & _
                        "((((([DB_Kategoriewerte] AS KatwerteValues RIGHT OUTER JOIN " & _
                        "[DB_Projekte] AS PJ ON KatwerteValues.FK_Projekte = PJ.ID) RIGHT OUTER JOIN " & _
                        "[DB_Kategoriewerte] AS Katwerte ON PJ.ID = Katwerte.FK_Projekte) RIGHT OUTER JOIN " & _
                        "[DB_Kategorie_Detail] AS KatDetail ON Katwerte.FK_Kategorie_Detail = KatDetail.ID) RIGHT OUTER JOIN " & _
                        "[DB_Settings_BarChart_KD] AS Set_KD ON KatDetail.ID = Set_KD.FK_Kategorie_Detail) LEFT OUTER JOIN " & _
                        "[DB_Language] AS Lang_KatName ON KatDetail.FK_Language_Name = Lang_KatName.Term) " & _
                    "WHERE " & _
                        "(KatwerteValues.FK_Kategorie = " & WertDetail & ") AND (Set_KD.FK_Settings_BarChart = " & Template_ID & ") " & where & _
                    "GROUP BY " & _
                        "Lang_KatName." & calc_master.Range("aktuelle_sprache").value & ", " & _
                        "KatwerteValues.FK_Kategorie " & _
                    "ORDER BY " & _
                        "" & sum_avg & "(KatwerteValues.Wert_Zahl) DESC, Lang_KatName." & calc_master.Range("aktuelle_sprache").value
    ElseIf wert = "2" Then
    'Kosten
        If pj_ids <> "" Then
            where = "(Katwerte.FK_Projekte in (" & pj_ids & ")) AND"
        Else
            where = ""
        End If
        
        selTemp = "(SELECT " & _
                        "Katwerte.fk_Projekte, " & _
                        "Lang_KatName." & calc_master.Range("aktuelle_sprache").value & " AS Katname " & _
                    "FROM " & _
                        "((([DB_Settings_BarChart_KD] AS Set_KD LEFT JOIN " & _
                        "[DB_Kategorie_Detail] AS KatDetail ON KatDetail.ID = Set_KD.FK_Kategorie_Detail) LEFT JOIN " & _
                        "[DB_Language] AS Lang_KatName ON Lang_KatName.Term = KatDetail.FK_Language_Name) LEFT JOIN " & _
                        "[DB_Kategoriewerte] AS Katwerte ON Katwerte.FK_Kategorie_Detail = KatDetail.ID) " & _
                    "WHERE " & _
                        where & " (Set_KD.FK_Settings_BarChart = " & Template_ID & ") " & _
                    ")"
        
        If pj_ids <> "" Then
            where = "WHERE (DB_Kosten.FK_Projekte in (" & pj_ids & ")) "
        Else
            where = ""
        End If
        
        selTemp2 = "(SELECT " & _
                        sum_avg & "(" & WertDetail & ") As werte, " & _
                        "FK_Kostenarten As ka " & _
                    "From " & _
                        "DB_Kosten " & _
                    where & _
                    "group BY " & _
                        "DB_Kosten.FK_Kostenarten " & _
                    ")"
        
        If pj_ids <> "" Then
            where = "(kostenwerte.FK_Projekte in (" & pj_ids & ")) AND"
        Else
            where = ""
        End If
        
        selTemp2 = "(SELECT " & _
                        "Lang_Kostenarten_Shortname." & calc_master.Range("aktuelle_sprache").value & " AS Shortname, " & _
                        "Lang_Kostenarten_Name." & calc_master.Range("aktuelle_sprache").value & " AS Name, " & _
                        "kostenwerte." & WertDetail & " AS WertDetail, " & _
                        "kostenwerte.FK_Projekte, " & _
                        "OrderCol.werte " & _
                    "From " & _
                        "((((([DB_Settings_BarChart_KA] AS Set_KA LEFT JOIN " & _
                        "[DB_Kostenarten] AS Kostenarten ON Kostenarten.ID = Set_KA.FK_Kostenarten) LEFT JOIN " & _
                        "[DB_Kosten] AS kostenwerte ON kostenwerte.FK_Kostenarten = Kostenarten.ID) LEFT JOIN " & _
                        "[DB_Language] AS Lang_Kostenarten_Shortname ON Lang_Kostenarten_Shortname.Term = kostenarten.FK_Language_Shortname) LEFT JOIN " & _
                        "[DB_Language] AS Lang_Kostenarten_Name ON Lang_Kostenarten_Name.Term = Kostenarten.FK_Language_Name) LEFT JOIN " & _
                        selTemp2 & " AS OrderCol ON OrderCol.KA = kostenarten.ID) " & _
                   "where " & _
                        where & " (Set_KA.FK_Settings_BarChart = " & Template_ID & ") " & _
                    ")"
        
        If pj_ids <> "" Then
            where = "WHERE (PJ.ID in (" & pj_ids & "))"
        Else
            where = ""
        End If
        
        Statement2 = "SELECT " & _
                        "Kostenwerte.Shortname AS Shortname, " & _
                        "Kostenwerte.Name AS Name, " & _
                        "kostenwerte.WertDetail AS Wert, " & _
                        "Katwerte.Katname AS Katname " & _
                    "From " & _
                        "(([DB_Projekte] AS PJ LEFT JOIN " & _
                        selTemp & " AS Katwerte ON Katwerte.FK_Projekte = PJ.ID) LEFT JOIN " & _
                        selTemp2 & " AS Kostenwerte ON Kostenwerte.FK_Projekte = PJ.id) " & _
                    where & _
                    "ORDER BY " & _
                        "Kostenwerte.Werte DESC, Katwerte.Katname "
    ElseIf wert = "3" Then
    'Ressourcen
        If group Then
            If pj_ids <> "" Then
                where = "(Katwerte.FK_Projekte in (" & pj_ids & ")) AND"
            Else
                where = ""
            End If
        
            selTemp = "(SELECT " & _
                            "Katwerte.FK_Projekte, " & _
                            "Lang_KatName." & calc_master.Range("aktuelle_sprache").value & " AS Name " & _
                        "From " & _
                            "((([DB_Settings_BarChart_KD] AS Set_KD LEFT JOIN " & _
                            "[DB_Kategorie_Detail] AS KatDetail ON KatDetail.id = Set_KD.FK_Kategorie_Detail) LEFT JOIN " & _
                            "[DB_Language] AS Lang_KatName ON Lang_KatName.Term = KatDetail." & clusterLang & ") LEFT JOIN " & _
                            "[DB_Kategoriewerte] AS Katwerte ON Katwerte.FK_Kategorie_Detail = KatDetail.ID) " & _
                        "WHERE " & _
                            where & " (Set_KD.FK_Settings_BarChart = " & Template_ID & ")" & _
                        ")"
                        
            If pj_ids <> "" Then
                where = "(Ress.FK_Projekte in (" & pj_ids & ")) AND"
            Else
                where = ""
            End If
            
            selTemp2 = "(SELECT " & _
                            "RessHisto.FK_Ressourcenarten AS RA, " & _
                            sum_avg & "(" & WertDetail & ") As werte " & _
                        "From " & _
                            "(([DB_Ressourcenarten] AS Ressarten LEFT JOIN " & _
                            "[DB_Ressourcen] AS Ress ON Ressarten.ID = Ress.FK_Ressourcenarten) LEFT JOIN " & _
                            "[DB_Settings_BarChart_RA] AS RessHisto ON Ressarten.FK_Ressourcenarten = RessHisto.FK_Ressourcenarten) " & _
                        "WHERE " & _
                                where & " (RessHisto.FK_Settings_BarChart = " & Template_ID & ") " & _
                        "group BY " & _
                            "RessHisto.FK_Ressourcenarten " & _
                        ")"
            
            If pj_ids <> "" Then
                where = "(Resswerte.FK_Projekte in (" & pj_ids & ")) AND"
            Else
                where = ""
            End If
            
            '|fffd|berschreibt sich selbst, wobei im Statement der alte Wert verwendet wird
            selTemp2 = "(SELECT " & _
                            "Resswerte.FK_Projekte, " & _
                            "OrderCol.Werte, " & _
                            "Lang_RessgroupName." & calc_master.Range("aktuelle_sprache").value & " AS Name, " & _
                            "Lang_RessgroupShortname." & calc_master.Range("aktuelle_sprache").value & " AS SName " & _
                        "From " & _
                            "(((((([DB_Settings_BarChart_RA] AS Set_RA Left JOIN " & _
                            "[DB_Ressourcenarten] AS Ressgruppe ON Ressgruppe.ID = Set_RA.FK_Ressourcenarten) LEFT JOIN " & _
                            "[DB_Language] AS Lang_RessgroupName ON Lang_RessgroupName.Term = Ressgruppe.FK_Language_Name) LEFT JOIN " & _
                            "[DB_Language] AS Lang_RessgroupShortname ON Lang_RessgroupShortname.Term = Ressgruppe.FK_Language_Shortname) LEFT JOIN " & _
                            "[DB_Ressourcenarten] AS Ressarten ON Ressarten.FK_Ressourcenarten = Ressgruppe.ID) LEFT JOIN " & _
                            "[DB_Ressourcen] AS Resswerte ON Resswerte.FK_Ressourcenarten = Ressarten.id) LEFT JOIN " & _
                            selTemp2 & " AS OrderCol ON OrderCol.RA = Ressarten.FK_Ressourcenarten) " & _
                        "WHERE " & _
                            where & " (Set_RA.FK_Settings_BarChart = " & Template_ID & ") " & _
                        ")"
                        
            If pj_ids <> "" Then
                where = "WHERE (PJ.ID in (" & pj_ids & "))"
            End If
    
            Statement2 = "SELECT " & _
                            "Ressw.SName AS Shortname, " & _
                            "Ressw.Name AS Name, " & _
                            "Ressw.werte AS Wert, " & _
                            "kat.name AS Katname " & _
                        "FROM " & _
                            "(([DB_Projekte] AS PJ LEFT JOIN " & _
                            selTemp & " AS Kat ON Kat.FK_Projekte = PJ.ID) LEFT JOIN " & _
                            selTemp2 & " AS Ressw ON Ressw.FK_Projekte = PJ.ID) " & _
                        where & _
                        "ORDER BY " & _
                            "Ressw.werte DESC, kat.name"
        Else
            If pj_ids <> "" Then
                where = "(Katwerte.FK_Projekte in (" & pj_ids & ")) AND"
            Else
                where = ""
            End If
            
            selTemp = "(SELECT " & _
                            "Lang_KatName." & calc_master.Range("aktuelle_sprache").value & " AS Katname, " & _
                            "Katwerte.FK_Projekte " & _
                        "FROM " & _
                            "((([DB_Settings_BarChart_KD] AS Set_KD LEFT JOIN " & _
                            "[DB_Kategorie_Detail] AS KatDetail ON KatDetail.ID = set_kd.FK_Kategorie_Detail) LEFT JOIN " & _
                            "[DB_Language] AS Lang_KatName ON Lang_KatName.Term = KatDetail.FK_Language_Name) LEFT JOIN " & _
                            "[DB_Kategoriewerte] AS Katwerte ON Katwerte.FK_Kategorie_Detail = KatDetail.ID) " & _
                        "WHERE " & _
                            where & " (Set_KD.FK_Settings_BarChart = " & Template_ID & ") " & _
                        ")"
            
            If pj_ids <> "" Then
                where = "WHERE (ress.FK_Projekte in (" & pj_ids & ")) "
            Else
                where = ""
            End If
            
            selTemp2 = "(SELECT " & _
                            sum_avg & "(" & WertDetail & ") as Werte, " & _
                            "FK_Ressourcenarten As ra " & _
                        "FROM " & _
                            "DB_Ressourcen  As ress " & _
                        where & _
                        "GROUP BY " & _
                            "ress.FK_Ressourcenarten " & _
                        ")"
            
            If pj_ids <> "" Then
                where = "(Resswerte.FK_Projekte in (" & pj_ids & ")) AND"
            Else
                where = ""
            End If
            
            selTemp2 = "(SELECT " & _
                            "Lang_Ressarten_Shortname." & calc_master.Range("aktuelle_sprache").value & " AS Shortname, " & _
                            "Lang_Ressarten_Name." & calc_master.Range("aktuelle_sprache").value & " AS Name, " & _
                            "Resswerte.Basis AS WertDetail, " & _
                            "Resswerte.FK_Projekte, " & _
                            "OrderCol.werte " & _
                        "FROM " & _
                            "((((([DB_Settings_BarChart_RA] AS Set_RA LEFT JOIN " & _
                            "[DB_Ressourcenarten] AS Ressarten ON Ressarten.ID = Set_RA.FK_Ressourcenarten) LEFT JOIN " & _
                            "[DB_Ressourcen] AS Resswerte ON Resswerte.FK_Ressourcenarten = Ressarten.ID) LEFT JOIN " & _
                            "[DB_Language] AS Lang_Ressarten_Shortname ON Lang_Ressarten_Shortname.Term = ressarten.FK_Language_Shortname) LEFT JOIN " & _
                            "[DB_Language] AS Lang_Ressarten_Name ON Lang_Ressarten_Name.Term = Ressarten.FK_Language_Name) LEFT JOIN " & _
                            selTemp2 & " AS OrderCol ON OrderCol.RA = Ressarten.ID) " & _
                        "WHERE " & _
                            where & " (Set_RA.FK_Settings_BarChart = " & Template_ID & ") " & _
                        ")"
            
            If pj_ids <> "" Then
                where = "WHERE (PJ.ID  in (" & pj_ids & ")) "
            Else
                where = ""
            End If
            
            Statement2 = "SELECT " & _
                                "Resswerte.Shortname AS Shortname, " & _
                                "Resswerte.Name AS Name, " & _
                                "Resswerte.WertDetail AS Wert, " & _
                                "Kat.Katname AS Katname " & _
                            "FROM " & _
                                "(([DB_Projekte] AS PJ LEFT JOIN " & _
                                selTemp & " AS Kat ON Kat.FK_Projekte = PJ.ID) LEFT JOIN " & _
                                selTemp2 & " AS Resswerte ON resswerte.FK_Projekte = PJ.ID) " & _
                            where & _
                            "ORDER BY " & _
                                "Resswerte.Werte DESC, " & _
                                "kat.KatName"
        End If
    End If
End Function

'Berechnet f|fffd|r alle oder das angegebene Projekt f|fffd|r Ressourcen und Kosten die Rest und Abweichungs Werte
Public Function Calculate_all_RessCost_values(Optional PJ_ID As String = "")
    Dim statements(2) As String
    Dim Updates() As String
    Dim last_rc As Integer
    Dim i As Double
    Dim where As String
    
    If PJ_ID <> "" Then
        where = "WHERE " & _
                        "FK_Projekte=" & PJ_ID
    Else
        where = ""
    End If
    
    'Kosten berechnen
    statements(0) = "SELECT " & _
                        "ID, Basis, Ist, Aktuell " & _
                    "FROM " & _
                        "[DB_Kosten] " & _
                    where
                        
    'Ressourcen berechnen
    statements(1) = "SELECT " & _
                        "ID, Basis, Ist, Aktuell " & _
                    "FROM " & _
                        "[DB_Ressourcen] " & _
                    where
    
    last_rc = Class_Functions.DB.Create_NewRecordset
    
    If Class_Functions.DB.Select_Statement(statements(0)) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            i = Class_Functions.DB.GetRecordCount(statements(0))
        End If
    End If
    If Class_Functions.DB.Select_Statement(statements(1), last_rc) = True Then
        If Not Class_Functions.DB.Recordset(last_rc).EOF Then
            i = i + Class_Functions.DB.GetRecordCount(statements(1), last_rc)
        End If
    End If
    
    'Insert Array auf maximale anzahl an Werten erh|fffd|hen
    ReDim Preserve Updates(i - 1)
    
    i = 0
    'Kosten Updates generieren
    While Not Class_Functions.DB.Recordset.EOF
        Updates(i) = "UPDATE [DB_Kosten] " & _
                            "SET Abweichung = " & VBA.Replace(VBA.CStr(Nz0(Class_Functions.DB.Recordset!aktuell) - Nz0(Class_Functions.DB.Recordset!basis)), ",", ".") & ", " & _
                            "Rest = " & VBA.Replace(VBA.CStr(Nz0(Class_Functions.DB.Recordset!aktuell) - Nz0(Class_Functions.DB.Recordset!ist)), ",", ".") & " " & _
                        "WHERE " & _
                            "ID = " & Class_Functions.DB.Recordset!ID
                        
        Class_Functions.DB.Recordset.movenext
        i = i + 1
    Wend
    
    'Ressourcen Updates generieren
    While Not Class_Functions.DB.Recordset(last_rc).EOF
        Updates(i) = "UPDATE [DB_Ressourcen] " & _
                            "SET Abweichung = " & VBA.Replace(VBA.CStr(Nz0(Class_Functions.DB.Recordset(last_rc)!aktuell) - Nz0(Class_Functions.DB.Recordset(last_rc)!basis)), ",", ".") & ", " & _
                            "Rest = " & VBA.Replace(VBA.CStr(Nz0(Class_Functions.DB.Recordset(last_rc)!aktuell) - Nz0(Class_Functions.DB.Recordset(last_rc)!ist)), ",", ".") & " " & _
                        "WHERE " & _
                            "ID = " & Class_Functions.DB.Recordset(last_rc)!ID
                        
        Class_Functions.DB.Recordset(last_rc).movenext
        i = i + 1
    Wend
    
    Call Class_Functions.DB.Delete_RecordsetItem(last_rc)
    
    'Daten in DB schreiben
    If Class_Functions.DB.TransStatements(Updates) = False Then
        MsgBox nlc_language.FindValue("SMessage_ErrWriteDB"), vbCritical
    End If
End Function

'automatische Kostenarten f|fffd|r alle oder ein Projekt berechnen
Public Function Calculate_all_autoCost_values(Optional PJ_ID As String = "")
    Dim statements(1) As String
    Dim EditStatements() As String
    Dim last_rc As Integer
    Dim i As Double
    Dim where As String
    Dim insert As Boolean
    Dim KostenID As String
    Dim ist As Double
    Dim basis As Double
    Dim aktuell As Double
    
    If PJ_ID <> "" Then
        where = "AND Wert.FK_Projekte=" & PJ_ID & " "
    Else
        where = ""
    End If
    
    'Kosten berechnen
    statements(0) = "SELECT " & _
                    "Wert.FK_Projekte, " & _
                    "Ressarten.FK_Kostenarten, " & _
                    "SUM(Wert.Basis * Ressarten.Kostensatz) AS Basis, " & _
                    "SUM(Wert.Ist * Ressarten.Kostensatz) AS Ist, " & _
                    "SUM(Wert.aktuell * ressarten.Kostensatz) As aktuell " & _
                "FROM " & _
                    "[DB_Ressourcen] AS Wert " & _
                    "INNER Join " & _
                        "[DB_Ressourcenarten] AS Ressarten ON (Wert.FK_Ressourcenarten = Ressarten.ID " & _
                        where & ")" & _
                "GROUP BY " & _
                    "Ressarten.FK_Kostenarten, " & _
                    "Wert.FK_Projekte "
    
    statements(1) = "SELECT " & _
                        "Wert.ID, " & _
                        "Wert.FK_Projekte, " & _
                        "Kostenarten.ID AS Kostenarten_ID " & _
                    "From " & _
                        "[DB_Kosten] AS Wert " & _
                        "LEFT OUTER JOIN " & _
                            "[DB_Kostenarten] AS Kostenarten ON Wert.FK_Kostenarten = Kostenarten.ID " & _
                    "where " & _
                        "(Kostenarten.Kostenart = " & Class_Functions.DB.Parse2True & ") " & _
                        where
    
    last_rc = Class_Functions.DB.Create_NewRecordset
    
    If Class_Functions.DB.Select_Statement(statements(1), last_rc) = False Then
        GoTo error
    End If
    
    i = 1
        
    If Class_Functions.DB.Select_Statement(statements(0)) = True Then
        While Not Class_Functions.DB.Recordset.EOF
            If VBA.IsNull(Class_Functions.DB.Recordset!basis) Then
                basis = 0
            Else
                basis = Class_Functions.DB.Recordset!basis
            End If
            If VBA.IsNull(Class_Functions.DB.Recordset!ist) Then
                ist = 0
            Else
                ist = Class_Functions.DB.Recordset!ist
            End If
            If VBA.IsNull(Class_Functions.DB.Recordset!aktuell) Then
                aktuell = 0
            Else
                aktuell = Class_Functions.DB.Recordset!aktuell
            End If
        
        
            insert = True
            
            If Not Class_Functions.DB.Recordset(last_rc).EOF Then
                Class_Functions.DB.Recordset(last_rc).movefirst
                
                Do While Not Class_Functions.DB.Recordset(last_rc).EOF
                    If Class_Functions.DB.Recordset(last_rc)!Kostenarten_ID = Class_Functions.DB.Recordset!FK_Kostenarten And _
                       Class_Functions.DB.Recordset(last_rc)!FK_Projekte = Class_Functions.DB.Recordset!FK_Projekte Then
                        insert = False
                        
                        Exit Do
                    End If
                    
                    Class_Functions.DB.Recordset(last_rc).movenext
                Loop
            End If
            ReDim Preserve EditStatements(i)
            
            If insert = True Then
                'Insert
                EditStatements(i - 1) = "INSERT INTO " & _
                                        "DB_Kosten " & _
                                            "(FK_Projekte, FK_Kostenarten, Basis, Ist, Aktuell) " & _
                                        "VALUES " & _
                                            "(" & Class_Functions.DB.Recordset!FK_Projekte & ", " & _
                                            Class_Functions.DB.Recordset!FK_Kostenarten & ", " & _
                                            VBA.Replace(basis, ",", ".") & ", " & _
                                            VBA.Replace(ist, ",", ".") & ", " & _
                                            VBA.Replace(aktuell, ",", ".") & ")"
            Else
                'Update
                EditStatements(i - 1) = "UPDATE " & _
                                        "DB_Kosten " & _
                                        "SET " & _
                                            "Basis=" & VBA.Replace(basis, ",", ".") & ", " & _
                                            "Ist=" & VBA.Replace(ist, ",", ".") & ", " & _
                                            "Aktuell=" & VBA.Replace(aktuell, ",", ".") & " " & _
                                        "WHERE " & _
                                            "ID=" & Class_Functions.DB.Recordset(last_rc)!ID
            End If
            
            
            'Debug.Print (EditStatements(i - 1))
            i = i + 1
            
            Class_Functions.DB.Recordset.movenext
        Wend
    Else
        GoTo error
    End If
    
    Class_Functions.DB.Delete_RecordsetItem (last_rc)
    
    If nlc_functions.isArrayEmpty(EditStatements) = False Then
        If Class_Functions.DB.TransStatements(EditStatements) = False Then
            GoTo error
        End If
    End If
    
    Exit Function
error:
    MsgBox nlc_language.FindValue("SMessage_ErrWriteDB"), vbCritical
End Function

'#########################################
'               Filter
'#########################################

Public Function Get_Settings_Filter_dropdown(Tablename As String, where As String) As Variant
    Dim statement As String
    
    'Wenn User dann nur eigene Filter bzw. auch globale (diese aber nicht editierbar)
    'Wenn Useradmin, dann auch globale editierbar
    'nur wenn DB_Settings_Filter
    If Tablename = "DB_Settings_Filter" Then
        If calc_master.Range("Login").value = "admin" Or calc_master.Range("Login").value = "user" Then
            If where = "" Then
                where = "WHERE DB_Users.Username IS NULL"
            Else
                where = where + " AND DB_Users.Username IS NULL"
            End If
        Else
            If where = "" Then
                where = "WHERE DB_Users.Username='" & calc_master.Range("WindowsLogin").value & "' OR DB_Users.Username IS NULL"
            Else
                where = where + " AND DB_Users.Username='" & calc_master.Range("WindowsLogin").value & "' OR DB_Users.Username IS NULL"
            End If
        End If
        
        statement = "SELECT " & _
                        "DB_Settings_Filter.Name, DB_Settings_Filter.ID, DB_Settings_Filter.FK_Users " & _
                    "FROM " & _
                        "DB_Settings_Filter LEFT JOIN " & _
                        "DB_Users ON DB_Settings_Filter.FK_Users = DB_Users.Username " & _
                    where
    Else
        statement = "SELECT " & _
                    "Name, " & _
                    "ID " & _
                "FROM " & _
                    "[" & Tablename & "] " & _
                where
    End If
                
    If (Tablename = "DB_Settings_Filter") Then
        statement = statement & _
                    " ORDER BY " & _
                    " FK_Users, theorder, Name"
    End If
                    
    Dim filters() As String
    Dim i As Double
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            i = Class_Functions.DB.GetRecordCount(statement)
            
            ReDim Preserve filters(i - 1, 1)
            i = 0
            
            While Not Class_Functions.DB.Recordset.EOF
                If (Tablename = "DB_Settings_Filter") Then
'                    If calc_master.range("Login").value <> "admin" And calc_master.range("Login").value <> "user" Then
                        If VBA.IsNull(Class_Functions.DB.Recordset!FK_Users) Then
                            'filters(i, 0) = "[" & Class_Functions.DB.Recordset!name & "]"
                            filters(i, 0) = GlobalIdLeft & Class_Functions.DB.Recordset!name & GlobalIdRight
                        Else
                            filters(i, 0) = Class_Functions.DB.Recordset!name
                        End If
'                    Else
'                        filters(i, 0) = Class_Functions.DB.Recordset!name
'                    End If
                Else
                    filters(i, 0) = Class_Functions.DB.Recordset!name
                End If
                
                filters(i, 1) = Class_Functions.DB.Recordset!ID
                
                Class_Functions.DB.Recordset.movenext
                i = i + 1
            Wend
            
            Get_Settings_Filter_dropdown = filters
        Else
            ReDim Preserve filters(1, 1)
            filters(0, 0) = "leer"
            Get_Settings_Filter_dropdown = filters
        End If
    Else
        ReDim Preserve filters(1, 1)
        filters(0, 0) = "leer"
        Get_Settings_Filter_dropdown = filters
    End If
End Function

Public Function Get_Settings_Filter_Sets(filterGroupID As String)
    
    Dim i As Double
    Dim resourcenarten() As String
    Dim statement As String
    Dim language As String
    language = calc_master.Range("aktuelle_sprache")
       
    statement = "SELECT TOP 1000 fs.ID" & _
                "      ,fs.FK_FilterGroup" & _
                "      ,fs.FK_FilterType" & _
                "      ,fs.Filtertype" & _
                "      ,fs.Comperator" & _
                "      ,fs.value" & _
                "      ,ra_lang." + language + " AS Resourcenart" & _
                "      ,ka_lang." + language + " AS Kostenart" & _
                "      ,kat_lang." + language + " AS Kategorie" & _
                "FROM DB_Settings_Filter_Sets fs" & _
                "" & _
                "LEFT JOIN DB_Ressourcenarten ra ON (Filtertype = 1 AND fs.FK_FilterType = ra.ID)" & _
                "LEFT JOIN DB_Language ra_lang ON(ra.FK_Language_Name = ra_lang.Term)" & _
                "" & _
                "LEFT JOIN DB_Ressourcenarten ka ON (Filtertype = 2 AND fs.FK_FilterType = ka.ID)" & _
                "LEFT JOIN DB_Language ka_lang ON(ka.FK_Language_Name = ka_lang.Term)" & _
                "" & _
                "LEFT JOIN DB_Ressourcenarten kat ON (Filtertype = 3 AND fs.FK_FilterType = kat.ID)" & _
                "LEFT JOIN DB_Language kat_lang ON(kat.FK_Language_Name = kat_lang.Term)" & _
                "WHERE fs.ID = " + filterGroupID


   If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            i = Class_Functions.DB.GetRecordCount(statement)
            
            ReDim Preserve resourcenarten(i - 1, 2)
            i = 0
            
            While Not Class_Functions.DB.Recordset.EOF
                resourcenarten(i, 0) = Class_Functions.DB.Recordset!name
                resourcenarten(i, 1) = Class_Functions.DB.Recordset!ID
                Class_Functions.DB.Recordset.movenext
                i = i + 1
            Wend
            
        Else
            ReDim Preserve resourcenarten(1, 1)
            resourcenarten(0, 0) = "leer"
            
        End If
    Else
        ReDim Preserve resourcenarten(1, 1)
        resourcenarten(0, 0) = "leer"
        
    End If
    
    Get_Settings_Filter_Sets = resourcenarten
End Function

''''''''

Public Function Get_Settings_Filter_Resourcenarten()
    
    Dim i As Double
    Dim resourcenarten() As String
    Dim statement As String
    
    Dim where As String
    
    If calc_master.Range("show_inactive_values") = "FALSE" Then
        where = "WHERE Ressarten.active <> 0 "
    Else
        where = ""
    End If
                    
    statement = "SELECT " & _
                    "Ressarten.ID AS RA_ID, " & _
                    "Lang_Name." & calc_master.Range("aktuelle_sprache").value & " AS langName, " & _
                    "Ressarten.FK_Ressourcenarten AS RessGr " & _
                "FROM " & _
                    "((([DB_Language] AS Lang_Name INNER JOIN " & _
                    "[DB_Ressourcenarten] AS Ressarten ON Lang_Name.Term = Ressarten.FK_Language_Name) LEFT OUTER Join " & _
                    "[DB_Ressourcenarten] AS RessGroup ON RessGroup.ID = Ressarten.FK_Ressourcenarten) LEFT OUTER JOIN " & _
                    "[DB_Language] AS Lang_RessGroupName ON RessGroup.FK_Language_Name = Lang_RessGroupName.Term) " & _
                where & _
                "ORDER BY " & _
                    "Lang_RessGroupName." & calc_master.Range("aktuelle_sprache").value & ", Ressarten.FK_Ressourcenarten, Ressarten.FK_Kostenarten, Lang_Name.deutsch"
                

   If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            i = Class_Functions.DB.GetRecordCount(statement)
            
            ReDim Preserve resourcenarten(i - 1, 2)
            i = 0
            
            While Not Class_Functions.DB.Recordset.EOF
                resourcenarten(i, 0) = Class_Functions.DB.Recordset!LangName
                resourcenarten(i, 1) = Class_Functions.DB.Recordset!RA_ID
                If Class_Functions.DB.Recordset!RessGr Then
                    resourcenarten(i, 2) = "true"
                Else
                    resourcenarten(i, 2) = "false"
                End If
                Class_Functions.DB.Recordset.movenext
                i = i + 1
            Wend
            
        Else
            ReDim Preserve resourcenarten(1, 1)
            resourcenarten(0, 0) = "leer"
            
        End If
    Else
        ReDim Preserve resourcenarten(1, 1)
        resourcenarten(0, 0) = "leer"
        
    End If
    
    Get_Settings_Filter_Resourcenarten = resourcenarten
End Function

Public Function Get_Settings_Filter_Kostenarten()
    
    Dim i As Double
    Dim resourcenarten() As String
    Dim statement As String
       
    statement = "SELECT " & _
                    "ka.ID, " & _
                    "langName.deutsch AS Name " & _
                "FROM " & _
                    "DB_Kostenarten AS ka LEFT JOIN " & _
                    "DB_Language AS langName ON ka.FK_Language_Name = langName.Term " & _
                "Where " & _
                    "ka.active <> 0 AND langName.deutsch <> '-' " & _
                "ORDER BY " & _
                    "langName.deutsch"

   If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            i = Class_Functions.DB.GetRecordCount(statement)
            
            ReDim Preserve resourcenarten(i - 1, 2)
            i = 0
            
            While Not Class_Functions.DB.Recordset.EOF
                resourcenarten(i, 0) = Class_Functions.DB.Recordset!name
                resourcenarten(i, 1) = Class_Functions.DB.Recordset!ID
                resourcenarten(i, 2) = "true" 'Class_Functions.DB.Recordset!isParent
                Class_Functions.DB.Recordset.movenext
                i = i + 1
            Wend
            
        Else
            ReDim Preserve resourcenarten(1, 1)
            resourcenarten(0, 0) = "leer"
            
        End If
    Else
        ReDim Preserve resourcenarten(1, 1)
        resourcenarten(0, 0) = "leer"
        
    End If
    
    Get_Settings_Filter_Kostenarten = resourcenarten
End Function
Public Function Get_Settings_Filter_Kategorien()
    
    Dim i As Double
    Dim resourcenarten() As String
    Dim statement As String
       
    statement = "SELECT " & _
                    "kat.ID, " & _
                    "langName.deutsch AS Name " & _
                "FROM " & _
                    "DB_Kategorie AS kat LEFT JOIN " & _
                    "DB_Language langName ON kat.FK_Language_Name = langName.Term " & _
                "Where " & _
                    "kat.active <> 0 " & _
                "ORDER BY " & _
                    "langName.deutsch"

   If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            i = Class_Functions.DB.GetRecordCount(statement)
            
            ReDim Preserve resourcenarten(i - 1, 2)
            i = 0
            
            While Not Class_Functions.DB.Recordset.EOF
                resourcenarten(i, 0) = Class_Functions.DB.Recordset!name
                resourcenarten(i, 1) = Class_Functions.DB.Recordset!ID
                resourcenarten(i, 2) = "true" 'Class_Functions.DB.Recordset!isParent
                Class_Functions.DB.Recordset.movenext
                i = i + 1
            Wend
            
        Else
            ReDim Preserve resourcenarten(1, 1)
            resourcenarten(0, 0) = "leer"
            
        End If
    Else
        ReDim Preserve resourcenarten(1, 1)
        resourcenarten(0, 0) = "leer"
        
    End If
    
    Get_Settings_Filter_Kategorien = resourcenarten
End Function
Public Function Add_Settings_Filter_Group(filterId As String, filterGroupName As String)

    Dim statement As String
    Dim ID As String
    statement = "INSERT INTO DB_Settings_Filter_Group (Name, FK_Filter) " & _
                "VALUES ('" + filterGroupName + "'," + filterId + ")"
    
    ID = Class_Functions.DB.Insert_Statement(statement)
    If ID <> "-1" Then
        Add_Settings_Filter_Group = True
    End If
End Function

Public Function Add_Settings_Filter_Kriterium(filterGroup As String, filterType As String, filterTypeID As String, Comperator As Integer, value As String, fieldType As String, SetType As String)

    Dim statement As String
    Dim ID As String

    statement = "INSERT INTO DB_Settings_Filter_Sets (FK_FilterGroup, FK_FilterType, Filtertype, Comperator, Werte, fieldType, setType) " & _
                "VALUES (" + str(filterGroup) + "," + str(filterTypeID) + "," + str(filterType) + "," + str(Comperator) + ",'" + value + "'," + fieldType + "," + SetType + " )"
    
    ID = Class_Functions.DB.Insert_Statement(statement)
    If ID <> "-1" Then
        
    End If
End Function

Public Function getFilterById(ByVal filterId As String)
    Dim i As Double
    Dim filter() As String
    Dim statement As String
       
    statement = "SELECT     f.ID, f.Name, f.mode, f.showallprojects " & _
                "FROM        DB_Settings_Filter f " & _
                "Where f.ID = " & filterId

   If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            i = Class_Functions.DB.GetRecordCount(statement)
            
            ReDim Preserve filter(i - 1, 3)
            i = 0
            
            While Not Class_Functions.DB.Recordset.EOF
                filter(i, 0) = Class_Functions.DB.Recordset!ID
                filter(i, 1) = Class_Functions.DB.Recordset!name
                filter(i, 2) = Class_Functions.DB.Recordset!Mode
                filter(i, 3) = Class_Functions.DB.Recordset!showallprojects
                Class_Functions.DB.Recordset.movenext
                i = i + 1
            Wend
            
        Else
            ReDim Preserve filter(0, 1)
            filter(0, 0) = "leer"
            
        End If
    Else
        ReDim Preserve filter(1, 1)
        filter(0, 0) = "leer"
        
    End If
    
    getFilterById = filter
End Function

Public Function getFilterGroupSettingsById(ByVal filterGroupID As String)
    Dim i As Double
    Dim filter() As Variant
    Dim kat() As String
    Dim katD() As String
    Dim ra() As String
    Dim ka() As String
    
    Dim statement As String
    
    ReDim filter(1, 1)
    filter(0, 0) = "leer"
    
    'Kategorien
    statement = "SELECT " & _
                    "f.ID, " & _
                    "ka_l.deutsch AS Name, " & _
                    "f.Comperator As comperator, " & _
                    "f.Werte AS Werte, " & _
                    "f.fieldType As fieldType, " & _
                    "f.setType As setType " & _
                "FROM " & _
                    "((DB_Settings_Filter_Sets AS f LEFT JOIN " & _
                    "DB_Kategorie AS ka ON f.FK_FilterType = ka.ID) LEFT JOIN " & _
                    "DB_Language AS ka_l ON ka_l.term = ka.FK_Language_Name) " & _
                "Where " & _
                    "f.FK_FilterGroup = " + str(filterGroupID) & " AND f.filterType = 4 AND f.setType <> 5"

   If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            i = Class_Functions.DB.GetRecordCount(statement)
            
            ReDim kat(i - 1, 5)
            i = 0
            
            While Not Class_Functions.DB.Recordset.EOF
                kat(i, 0) = Class_Functions.DB.Recordset!ID
                kat(i, 1) = nlc_functions.N2hk(Class_Functions.DB.Recordset!name)
                kat(i, 2) = Class_Functions.DB.Recordset!Comperator
                kat(i, 3) = nlc_functions.N2hk(Class_Functions.DB.Recordset!werte)
                kat(i, 4) = Class_Functions.DB.Recordset!fieldType
                kat(i, 5) = Class_Functions.DB.Recordset!SetType
                Class_Functions.DB.Recordset.movenext
                i = i + 1
            Wend
        Else
            ReDim kat(0, 0)
            kat(0, 0) = "leer"
        End If
    Else
        ReDim kat(0, 0)
        kat(0, 0) = "leer"
    End If
    
    'Detailkategorien
    statement = "SELECT " & _
                    "katD_l.deutsch AS KatDName, " & _
                    "katD.id, " & _
                    "f.werte " & _
                "FROM " & _
                    "((((DB_Settings_Filter_Sets AS f LEFT JOIN " & _
                    "DB_Kategorie AS kat ON f.FK_FilterType = kat.ID) LEFT JOIN " & _
                    "DB_Language AS kat_l ON kat_l.term = kat.FK_Language_Name) LEFT JOIN " & _
                    "DB_Kategorie_Detail AS katD ON katD.FK_Kategorie = kat.ID) LEFT JOIN " & _
                    "DB_Language AS katD_l ON katD_l.Term = katD.FK_Language_Name) " & _
                "Where " & _
                    "f.FK_FilterGroup = " + str(filterGroupID) & " AND kat_l.deutsch <> '' AND f.filterType = 4 AND f.setType = 5"
    
    i = 0
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        While Not Class_Functions.DB.Recordset.EOF
            If Not VBA.IsNull(Class_Functions.DB.Recordset!KatDName) Then
                If VBA.CStr(Class_Functions.DB.Recordset!ID) = VBA.CStr(Class_Functions.DB.Recordset!werte) Then
                    i = i + 1
                End If
            End If
            Class_Functions.DB.Recordset.movenext
        Wend
    End If
    
    If i > 0 Then
        ReDim Preserve katD(i - 1, 5)
        i = 0
        statement = "SELECT " & _
                        "f.ID, " & _
                        "kat_l.deutsch AS name, " & _
                        "f.Comperator As comperator, " & _
                        "katD_l.deutsch AS KatDName, " & _
                        "f.fieldType As fieldType, " & _
                        "f.setType As setType, " & _
                        "katD.id AS KatID, " & _
                        "f.werte " & _
                    "FROM " & _
                        "((((DB_Settings_Filter_Sets AS f LEFT JOIN " & _
                        "DB_Kategorie AS kat ON f.FK_FilterType = kat.ID) LEFT JOIN " & _
                        "DB_Language AS kat_l ON kat_l.term = kat.FK_Language_Name) LEFT JOIN " & _
                        "DB_Kategorie_Detail AS katD ON katD.FK_Kategorie = kat.ID) LEFT JOIN " & _
                        "DB_Language AS katD_l ON katD_l.Term = katD.FK_Language_Name) " & _
                    "Where " & _
                        "f.FK_FilterGroup = " + str(filterGroupID) & " AND kat_l.deutsch <> '' AND f.filterType = 4 AND f.setType = 5"
    
       If Class_Functions.DB.Select_Statement(statement) = True Then
            While Not Class_Functions.DB.Recordset.EOF
                If Not VBA.IsNull(Class_Functions.DB.Recordset!KatDName) Then
                    If VBA.CStr(Class_Functions.DB.Recordset!KatID) = VBA.CStr(Class_Functions.DB.Recordset!werte) Then
                        katD(i, 0) = Class_Functions.DB.Recordset!ID
                        katD(i, 1) = nlc_functions.N2hk(Class_Functions.DB.Recordset!name)
                        katD(i, 2) = Class_Functions.DB.Recordset!Comperator
                        katD(i, 3) = nlc_functions.N2hk(Class_Functions.DB.Recordset!KatDName)
                        katD(i, 4) = Class_Functions.DB.Recordset!fieldType
                        katD(i, 5) = Class_Functions.DB.Recordset!SetType
                        
                        i = i + 1
                    End If
                End If
                
                Class_Functions.DB.Recordset.movenext
            Wend
        End If
    Else
        ReDim katD(0, 0)
        katD(0, 0) = "leer"
    End If
    'Ressourcenarten
    statement = "SELECT " & _
                    "f.ID, " & _
                    "ra_l.deutsch AS name, " & _
                    "f.Comperator As comperator, " & _
                    "f.Werte AS Werte, " & _
                    "f.fieldType As fieldType, " & _
                    "f.setType As setType " & _
                "FROM " & _
                    "((DB_Settings_Filter_Sets AS f LEFT JOIN " & _
                    "DB_Ressourcenarten AS ra ON f.FK_FilterType = ra.ID) LEFT JOIN " & _
                    "DB_Language AS ra_l ON ra_l.term = ra.FK_Language_Name) " & _
                "Where " & _
                    "f.FK_FilterGroup = " + str(filterGroupID) & " AND f.Werte <> '' AND f.filterType = 1"

   If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            i = Class_Functions.DB.GetRecordCount(statement)
            
            ReDim ra(i - 1, 5)
            i = 0
            
            While Not Class_Functions.DB.Recordset.EOF
                ra(i, 0) = Class_Functions.DB.Recordset!ID
                ra(i, 1) = nlc_functions.N2hk(Class_Functions.DB.Recordset!name)
                ra(i, 2) = Class_Functions.DB.Recordset!Comperator
                ra(i, 3) = nlc_functions.N2hk(Class_Functions.DB.Recordset!werte)
                ra(i, 4) = Class_Functions.DB.Recordset!fieldType
                ra(i, 5) = Class_Functions.DB.Recordset!SetType
                Class_Functions.DB.Recordset.movenext
                i = i + 1
            Wend
        Else
            ReDim ra(0, 0)
            ra(0, 0) = "leer"
        End If
    Else
        ReDim ra(0, 0)
        ra(0, 0) = "leer"
    End If
    
    'Kostenarten
    statement = "SELECT " & _
                    "f.ID, " & _
                    "ka_l.deutsch AS name, " & _
                    "f.Comperator As comperator, " & _
                    "f.Werte AS Werte, " & _
                    "f.fieldType As fieldType, " & _
                    "f.setType As setType " & _
                "FROM " & _
                    "((DB_Settings_Filter_Sets AS f LEFT JOIN " & _
                    "DB_Kostenarten AS ka ON f.FK_FilterType = ka.ID) LEFT JOIN " & _
                    "DB_Language AS ka_l ON ka_l.term = ka.FK_Language_Name) " & _
                "Where " & _
                    "f.FK_FilterGroup = " + str(filterGroupID) & " AND f.Werte <> '' AND f.filterType = 3"

   If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            i = Class_Functions.DB.GetRecordCount(statement)
            
            ReDim ka(i - 1, 5)
            i = 0
            
            While Not Class_Functions.DB.Recordset.EOF
                ka(i, 0) = Class_Functions.DB.Recordset!ID
                ka(i, 1) = nlc_functions.N2hk(Class_Functions.DB.Recordset!name)
                ka(i, 2) = Class_Functions.DB.Recordset!Comperator
                ka(i, 3) = nlc_functions.N2hk(Class_Functions.DB.Recordset!werte)
                ka(i, 4) = Class_Functions.DB.Recordset!fieldType
                ka(i, 5) = Class_Functions.DB.Recordset!SetType
                Class_Functions.DB.Recordset.movenext
                i = i + 1
            Wend
        Else
            ReDim ka(0, 0)
            ka(0, 0) = "leer"
        End If
    Else
        ReDim ka(0, 0)
        ka(0, 0) = "leer"
    End If
    
    If kat(0, 0) <> "leer" Or katD(0, 0) <> "leer" Or ra(0, 0) <> "leer" Or ka(0, 0) <> "leer" Then
        Dim counter As Integer
        Dim fcounter As Integer
        Dim MAX As Integer
        
        'max counter gesamt
        If kat(0, 0) <> "leer" Then
            MAX = UBound(kat) + 1
        End If
        If katD(0, 0) <> "leer" Then
            MAX = MAX + UBound(katD) + 1
        End If
        If ra(0, 0) <> "leer" Then
            MAX = MAX + UBound(ra) + 1
        End If
        If ka(0, 0) <> "leer" Then
            MAX = MAX + UBound(ka) + 1
        End If
        
        ReDim filter(MAX, 5)
        
        fcounter = 0
        If kat(0, 0) <> "leer" Then
            For counter = 0 To UBound(kat)
                filter(fcounter, 0) = kat(counter, 0)
                filter(fcounter, 1) = kat(counter, 1)
                filter(fcounter, 2) = kat(counter, 2)
                filter(fcounter, 3) = kat(counter, 3)
                filter(fcounter, 4) = kat(counter, 4)
                filter(fcounter, 5) = kat(counter, 5)
                
                fcounter = fcounter + 1
            Next counter
        End If
        
        If katD(0, 0) <> "leer" Then
            For counter = 0 To UBound(katD)
                filter(fcounter, 0) = katD(counter, 0)
                filter(fcounter, 1) = katD(counter, 1)
                filter(fcounter, 2) = katD(counter, 2)
                filter(fcounter, 3) = katD(counter, 3)
                filter(fcounter, 4) = katD(counter, 4)
                filter(fcounter, 5) = katD(counter, 5)
                
                fcounter = fcounter + 1
            Next counter
        End If
        
        If ra(0, 0) <> "leer" Then
            For counter = 0 To UBound(ra)
                filter(fcounter, 0) = ra(counter, 0)
                filter(fcounter, 1) = ra(counter, 1)
                filter(fcounter, 2) = ra(counter, 2)
                filter(fcounter, 3) = ra(counter, 3)
                filter(fcounter, 4) = ra(counter, 4)
                filter(fcounter, 5) = ra(counter, 5)
                
                fcounter = fcounter + 1
            Next counter
        End If
        
        If ka(0, 0) <> "leer" Then
            For counter = 0 To UBound(ka)
                filter(fcounter, 0) = ka(counter, 0)
                filter(fcounter, 1) = ka(counter, 1)
                filter(fcounter, 2) = ka(counter, 2)
                filter(fcounter, 3) = ka(counter, 3)
                filter(fcounter, 4) = ka(counter, 4)
                filter(fcounter, 5) = ka(counter, 5)
                
                fcounter = fcounter + 1
            Next counter
        End If
    Else
        ReDim Preserve filter(1, 1)
        filter(0, 0) = "leer"
    End If
    
    If UBound(filter) >= 1 Then
        Call nlc_functions.prcSort(Array(1), filter) 'Array(12, 8), kriterium)
    End If
        
    getFilterGroupSettingsById = filter
End Function

Public Function updateFilterName(filterId As String, filterName As String)

    Dim statement As String

    statement = "UPDATE " & _
                    "DB_Settings_Filter " & _
                "SET " & _
                    "Name = '" + filterName + "' " & _
                "WHERE " & _
                    "ID = " & filterId
    
    Call Class_Functions.DB.Update_Statement(statement)
End Function
Public Function updateFilterDetails(filterId As String, filterMode As Integer, filterShowAllProjects As Integer)

    Dim statement As String

    statement = "UPDATE " & _
                    "DB_Settings_Filter " & _
                "SET " & _
                    "mode = " & filterMode & ", " & _
                    "showallprojects = " & filterShowAllProjects & " " & _
                "WHERE " & _
                    "ID = " & filterId
    
    Call Class_Functions.DB.Update_Statement(statement)
End Function

Public Function updateFilterGroup(filterGroupID As String, filterGroupName As String)

    Dim statement As String

    statement = "UPDATE " & _
                    "DB_Settings_Filter_Group " & _
                "SET " & _
                    "Name = '" + filterGroupName + "' " & _
                "WHERE " & _
                    "ID = " & filterGroupID
    
    Call Class_Functions.DB.Update_Statement(statement)
End Function
Public Function updateFilterOrder(filterGroupID As String, order As String)

    Dim statement As String

    statement = "UPDATE " & _
                    "DB_Settings_Filter " & _
                "SET " & _
                    "theOrder = '" + order + "' " & _
                "WHERE " & _
                    "ID = " & filterGroupID
    
    Call Class_Functions.DB.Update_Statement(statement)
End Function


Public Function Update_Settings_Filter_Kriterium(kriteriumID As String, Comperator As String, wert As String, fieldType As String)

    Dim statement As String

    statement = "UPDATE " & _
                    "DB_Settings_Filter_Sets " & _
                "SET " & _
                    "Comperator = " + Comperator + ", " & _
                    "fieldType = " + fieldType + ", " & _
                    "Werte = '" + wert + "' " & _
                "WHERE " & _
                    "ID = " & kriteriumID
    
    Call Class_Functions.DB.Update_Statement(statement)
    
End Function

Public Function Get_FilterKriteriumById(kriteriumID As String)

    Dim kriterium() As String
    ReDim Preserve kriterium(5)
    Dim statement As String
        
    'test = "CASE WHEN re_l.deutsch IS NULL THEN '' ELSE re_l.deutsch END + CASE WHEN ka_l.deutsch IS NULL THEN '' ELSE ka_l.deutsch END + CASE WHEN ko_l.deutsch IS NULL THEN '' ELSE ko_l.deutsch END AS Name, "
    'TODO
    statement = "SELECT " & _
                    "f.ID, " & _
                    "re_l.deutsch AS re_l, ka_l.deutsch AS ka_l, ko_l.deutsch AS ko_l, " & _
                    "f.Comperator As comperator, " & _
                    "ka_det_l.deutsch AS KatDName, " & _
                    "f.Werte AS Werte, " & _
                    "f.fieldType As fieldType, " & _
                    "f.setType As setType, " & _
                    "ka.FK_Art, " & _
                    "f.FilterType, " & _
                    "ka_det.ID As KatID " & _
                "FROM " & _
                    "((((((((DB_Settings_Filter_Sets AS f LEFT JOIN " & _
                    "DB_Kostenarten AS ko ON f.FK_FilterType = ko.ID) LEFT JOIN " & _
                    "DB_Language AS ko_l ON ko_l.term = ko.FK_Language_Name) LEFT JOIN " & _
                    "DB_Kategorie AS ka ON f.FK_FilterType = ka.ID) LEFT JOIN " & _
                    "DB_Language AS ka_l ON ka_l.term = ka.FK_Language_Name) LEFT JOIN " & _
                    "DB_Kategorie_Detail AS ka_det ON ka_det.FK_Kategorie = ka.ID) LEFT JOIN " & _
                    "DB_Language AS ka_det_l ON ka_det_l.Term = ka_det.FK_Language_Name) LEFT JOIN " & _
                    "DB_Ressourcenarten AS re ON f.FK_FilterType = re.ID) LEFT JOIN " & _
                    "DB_Language AS re_l ON re_l.term = re.FK_Language_Name) " & _
                "Where " & _
                    "f.ID = " + kriteriumID
    
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            kriterium(0) = Class_Functions.DB.Recordset!ID
            
            If Class_Functions.DB.Recordset!filterType = "4" Then
                kriterium(1) = nlc_functions.N2hk(Class_Functions.DB.Recordset!ka_l)
            ElseIf Class_Functions.DB.Recordset!filterType = "3" Then
                kriterium(1) = nlc_functions.N2hk(Class_Functions.DB.Recordset!ko_l)
            ElseIf Class_Functions.DB.Recordset!filterType < "3" Then
                kriterium(1) = nlc_functions.N2hk(Class_Functions.DB.Recordset!re_l)
            End If
            
            kriterium(2) = nlc_functions.N2hk(Class_Functions.DB.Recordset!Comperator)
            kriterium(3) = nlc_functions.N2hk(Class_Functions.DB.Recordset!werte)
            kriterium(4) = nlc_functions.N2hk(Class_Functions.DB.Recordset!fieldType)
            kriterium(5) = nlc_functions.N2hk(Class_Functions.DB.Recordset!SetType)
        End If
    End If
    
    Get_FilterKriteriumById = kriterium
End Function

Public Function Get_DataForFilterQueryByFilterId(filterId As String) As Variant
    Dim i As Double
    Dim kriterium() As Variant
    Dim kat() As String
    Dim katD() As String
    Dim ra() As String
    Dim ka() As String
    Dim rs_ID As Integer
    
    'neuen Recordset erstellen
    rs_ID = Class_Functions.DB.Create_NewRecordset
    
    'Kategorien
    statement = "SELECT " & _
                    "f.ID As FilterId, " & _
                    "g.ID AS GroupID, " & _
                    "g.name AS groupname, " & _
                    "s.ID AS SetId, " & _
                    "f.Mode AS mode, " & _
                    "f.showallprojects AS showallprojects, " & _
                    "s.FK_filterType AS FilterTypeId, " & _
                    "s.filtertype AS FilterType, " & _
                    "s.Comperator As comperator, " & _
                    "s.Werte AS Werte, " & _
                    "ka_l.deutsch As Name, " & _
                    "s.setType As setType " & _
                "From " & _
                    "((((DB_Settings_Filter AS f LEFT JOIN " & _
                    "DB_Settings_Filter_Group AS g ON g.FK_Filter = f.ID) LEFT JOIN " & _
                    "DB_Settings_Filter_Sets AS s ON s.FK_FilterGroup = g.ID) LEFT JOIN " & _
                    "DB_Kategorie AS ka ON s.FK_FilterType = ka.ID) LEFT JOIN " & _
                    "DB_Language AS ka_l ON ka_l.term = ka.FK_Language_Name) " & _
                "WHERE " & _
                    "f.Id = " & str(filterId) & " And s.filterType = 4 And s.SetType <> 5 " & _
                "ORDER BY " & _
                    "g.name"
    
    If Class_Functions.DB.Select_Statement(statement, rs_ID) = True Then
        If Not Class_Functions.DB.Recordset(rs_ID).EOF Then
            i = Class_Functions.DB.GetRecordCount(statement, rs_ID)

            ReDim kat(i - 1, 12)
            i = 0
            
            While Not Class_Functions.DB.Recordset(rs_ID).EOF
                kat(i, 0) = str(Class_Functions.DB.Recordset(rs_ID)!filterId)
                kat(i, 1) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!GroupID)
                kat(i, 2) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!SetID)
                
                If Class_Functions.DB.Recordset(rs_ID)!Mode = 0 Then
                    kat(i, 3) = 0
                Else
                    kat(i, 3) = 1
                End If
                
                kat(i, 4) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!filterTypeID)
                kat(i, 5) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!filterType)
                kat(i, 6) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!Comperator)
                kat(i, 7) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!werte)
                kat(i, 8) = nlc_functions.N2hk(Class_Functions.DB.Recordset(rs_ID)!name)
                kat(i, 9) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!SetType)
                
                If Class_Functions.DB.Recordset(rs_ID)!showallprojects = 0 Then
                    kat(i, 10) = 0
                Else
                    kat(i, 10) = 1
                End If
                
                kat(i, 11) = nlc_functions.N2hk(Class_Functions.DB.Recordset(rs_ID)!werte)
                kat(i, 12) = nlc_functions.N2hk(Class_Functions.DB.Recordset(rs_ID)!groupname)

                Class_Functions.DB.Recordset(rs_ID).movenext
                i = i + 1
            Wend
        Else
            ReDim kat(0, 0)
            kat(0, 0) = "leer"
        End If
    Else
        ReDim kat(0, 0)
        kat(0, 0) = "leer"
    End If
    
    'Kategorie Details
    statement = "SELECT " & _
                    "f.ID As FilterId, " & _
                    "g.ID AS GroupID, " & _
                    "g.name AS groupname, " & _
                    "s.ID AS SetId, " & _
                    "f.Mode AS mode, " & _
                    "f.showallprojects AS showallprojects, " & _
                    "s.FK_filterType AS FilterTypeId, " & _
                    "s.filtertype AS FilterType, " & _
                    "s.Comperator As comperator, " & _
                    "s.Werte AS Werte, " & _
                    "ka_l.deutsch As Name, " & _
                    "s.setType As setType, " & _
                    "ka_det_l.deutsch AS KatDName, " & _
                    "ka_det.id AS KatID " & _
                "FROM " & _
                    "((((((DB_Settings_Filter AS f LEFT JOIN " & _
                    "DB_Settings_Filter_Group AS g ON g.FK_Filter = f.ID) LEFT JOIN " & _
                    "DB_Settings_Filter_Sets AS s ON s.FK_FilterGroup = g.ID) LEFT JOIN " & _
                    "DB_Kategorie AS ka ON s.FK_FilterType = ka.ID) LEFT JOIN " & _
                    "DB_Language AS ka_l ON ka_l.term = ka.FK_Language_Name) LEFT JOIN " & _
                    "DB_Kategorie_Detail AS ka_det ON ka_det.FK_Kategorie = ka.ID ) LEFT JOIN " & _
                    "DB_Language AS ka_det_l ON ka_det_l.Term = ka_det.FK_Language_Name) " & _
                "WHERE f.id =  " & str(filterId) & " AND ka_l.deutsch <> '' AND s.Filtertype = 4 and s.setType = 5 " & _
                "ORDER BY g.name"
    i = 0
    
    If Class_Functions.DB.Select_Statement(statement, rs_ID) = True Then
        While Not Class_Functions.DB.Recordset(rs_ID).EOF
            If Not VBA.IsNull(Class_Functions.DB.Recordset(rs_ID)!KatDName) Then
                If VBA.CStr(Class_Functions.DB.Recordset(rs_ID)!KatID) = VBA.CStr(Class_Functions.DB.Recordset(rs_ID)!werte) Then
                    i = i + 1
                End If
            End If
            Class_Functions.DB.Recordset(rs_ID).movenext
        Wend
    End If
    
    If Class_Functions.DB.Select_Statement(statement, rs_ID) = True Then
        If Not Class_Functions.DB.Recordset(rs_ID).EOF Then
            ReDim katD(i - 1, 12)
            i = 0
            
            While Not Class_Functions.DB.Recordset(rs_ID).EOF
                If VBA.CStr(Class_Functions.DB.Recordset(rs_ID)!KatID) = VBA.CStr(Class_Functions.DB.Recordset(rs_ID)!werte) Then
                    katD(i, 0) = str(Class_Functions.DB.Recordset(rs_ID)!filterId)
                    katD(i, 1) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!GroupID)
                    katD(i, 2) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!SetID)
                    
                    If Class_Functions.DB.Recordset(rs_ID)!Mode = 0 Then
                        katD(i, 3) = 0
                    Else
                        katD(i, 3) = 1
                    End If
                    
                    katD(i, 4) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!filterTypeID)
                    katD(i, 5) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!filterType)
                    katD(i, 6) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!Comperator)
                    katD(i, 7) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!KatDName)
                    katD(i, 8) = nlc_functions.N2hk(Class_Functions.DB.Recordset(rs_ID)!name)
                    katD(i, 9) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!SetType)
                    
                    If Class_Functions.DB.Recordset(rs_ID)!showallprojects = 0 Then
                        katD(i, 10) = 0
                    Else
                        katD(i, 10) = 1
                    End If
                    
                    katD(i, 11) = nlc_functions.N2hk(Class_Functions.DB.Recordset(rs_ID)!werte)
                    katD(i, 12) = nlc_functions.N2hk(Class_Functions.DB.Recordset(rs_ID)!groupname)
                    
                    i = i + 1
                End If
                
                Class_Functions.DB.Recordset(rs_ID).movenext
            Wend
        Else
            ReDim katD(0, 0)
            katD(0, 0) = "leer"
        End If
    Else
        ReDim katD(0, 0)
        katD(0, 0) = "leer"
    End If
    
    'Ressourcen
    statement = "SELECT " & _
                    "f.ID As FilterId, " & _
                    "g.ID AS GroupID, " & _
                    "g.name AS groupname, " & _
                    "s.ID AS SetId, " & _
                    "f.Mode AS mode, " & _
                    "f.showallprojects AS showallprojects, " & _
                    "s.FK_filterType AS FilterTypeId, " & _
                    "s.filtertype AS FilterType, " & _
                    "s.Comperator As comperator, " & _
                    "s.Werte AS Werte, " & _
                    "re_l.deutsch AS Name, " & _
                    "s.setType As setType " & _
                "FROM" & _
                    "((((DB_Settings_Filter AS f LEFT JOIN " & _
                    "DB_Settings_Filter_Group AS g ON g.FK_Filter = f.ID) LEFT JOIN " & _
                    "DB_Settings_Filter_Sets AS s ON s.FK_FilterGroup = g.ID) LEFT JOIN " & _
                    "DB_Ressourcenarten AS re ON s.FK_FilterType = re.ID) LEFT JOIN " & _
                    "DB_Language AS re_l ON re_l.term = re.FK_Language_Name) " & _
                "WHERE " & _
                    "f.id =  " & str(filterId) & " AND s.Werte <> '' AND s.filterType = 1 " & _
                "ORDER BY " & _
                    "g.name"
    
    If Class_Functions.DB.Select_Statement(statement, rs_ID) = True Then
        If Not Class_Functions.DB.Recordset(rs_ID).EOF Then
            i = Class_Functions.DB.GetRecordCount(statement)
            
            ReDim ra(i - 1, 12)
            i = 0
            
            While Not Class_Functions.DB.Recordset(rs_ID).EOF
                ra(i, 0) = str(Class_Functions.DB.Recordset(rs_ID)!filterId)
                ra(i, 1) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!GroupID)
                ra(i, 2) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!SetID)
                
                If Class_Functions.DB.Recordset(rs_ID)!Mode = 0 Then
                    ra(i, 3) = 0
                Else
                    ra(i, 3) = 1
                End If
                
                ra(i, 4) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!filterTypeID)
                ra(i, 5) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!filterType)
                ra(i, 6) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!Comperator)
                ra(i, 7) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!werte)
                ra(i, 8) = nlc_functions.N2hk(Class_Functions.DB.Recordset(rs_ID)!name)
                ra(i, 9) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!SetType)
                
                If Class_Functions.DB.Recordset(rs_ID)!showallprojects = 0 Then
                    ra(i, 10) = 0
                Else
                    ra(i, 10) = 1
                End If
                
                ra(i, 11) = nlc_functions.N2hk(Class_Functions.DB.Recordset(rs_ID)!werte)
                ra(i, 12) = nlc_functions.N2hk(Class_Functions.DB.Recordset(rs_ID)!groupname)

                Class_Functions.DB.Recordset(rs_ID).movenext
                i = i + 1
            Wend
        Else
            ReDim ra(0, 0)
            ra(0, 0) = "leer"
        End If
    Else
        ReDim ra(0, 0)
        ra(0, 0) = "leer"
    End If
    
    'Kosten
    statement = "SELECT " & _
                    "f.ID As FilterId, " & _
                    "g.ID AS GroupID, " & _
                    "g.name AS groupname, " & _
                    "s.ID AS SetId, " & _
                    "f.Mode AS mode, " & _
                    "f.showallprojects AS showallprojects, " & _
                    "s.FK_filterType AS FilterTypeId, " & _
                    "s.filtertype AS FilterType, " & _
                    "s.Comperator As comperator, " & _
                    "s.Werte AS Werte, " & _
                    "ko_l.deutsch AS Name, " & _
                    "s.setType As setType " & _
                "FROM " & _
                    "((((DB_Settings_Filter AS f LEFT JOIN " & _
                    "DB_Settings_Filter_Group AS g ON g.FK_Filter = f.ID) LEFT JOIN " & _
                    "DB_Settings_Filter_Sets AS s ON s.FK_FilterGroup = g.ID) LEFT JOIN " & _
                    "DB_Kostenarten AS ko ON s.FK_FilterType = ko.ID) LEFT JOIN " & _
                    "DB_Language AS ko_l ON ko_l.term = ko.FK_Language_Name) " & _
                "WHERE " & _
                    "f.id =  " & str(filterId) & " AND s.Werte <> '' AND s.filterType = 3 " & _
                "ORDER BY " & _
                    "g.name"
    
    
    If Class_Functions.DB.Select_Statement(statement, rs_ID) = True Then
        If Not Class_Functions.DB.Recordset(rs_ID).EOF Then
            i = Class_Functions.DB.GetRecordCount(statement)
            
            ReDim ka(i - 1, 12)
            i = 0
            
            While Not Class_Functions.DB.Recordset(rs_ID).EOF
                ka(i, 0) = str(Class_Functions.DB.Recordset(rs_ID)!filterId)
                ka(i, 1) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!GroupID)
                ka(i, 2) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!SetID)
                
                If Class_Functions.DB.Recordset(rs_ID)!Mode = 0 Then
                    ka(i, 3) = 0
                Else
                    ka(i, 3) = 1
                End If
                
                ka(i, 4) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!filterTypeID)
                ka(i, 5) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!filterType)
                ka(i, 6) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!Comperator)
                ka(i, 7) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!werte)
                ka(i, 8) = nlc_functions.N2hk(Class_Functions.DB.Recordset(rs_ID)!name)
                ka(i, 9) = nlc_functions.Nz(Class_Functions.DB.Recordset(rs_ID)!SetType)
                
                If Class_Functions.DB.Recordset(rs_ID)!showallprojects = 0 Then
                    ka(i, 10) = 0
                Else
                    ka(i, 10) = 1
                End If
                
                ka(i, 11) = nlc_functions.N2hk(Class_Functions.DB.Recordset(rs_ID)!werte)
                ka(i, 12) = nlc_functions.N2hk(Class_Functions.DB.Recordset(rs_ID)!groupname)

                Class_Functions.DB.Recordset(rs_ID).movenext
                i = i + 1
            Wend
        Else
            ReDim ka(0, 0)
            ka(0, 0) = "leer"
        End If
    Else
        ReDim ka(0, 0)
        ka(0, 0) = "leer"
    End If
    
    'Alles zusammenst|fffd|ckeln
    If kat(0, 0) <> "leer" Or katD(0, 0) <> "leer" Or ra(0, 0) <> "leer" Or ka(0, 0) <> "leer" Then
        Dim counter As Integer
        Dim fcounter As Integer
        Dim MAX As Integer
        
        'max counter gesamt
        If kat(0, 0) <> "leer" Then
            MAX = UBound(kat) + 1
        End If
        If katD(0, 0) <> "leer" Then
            MAX = MAX + UBound(katD) + 1
        End If
        If ra(0, 0) <> "leer" Then
            MAX = MAX + UBound(ra) + 1
        End If
        If ka(0, 0) <> "leer" Then
            MAX = MAX + UBound(ka) + 1
        End If
        
        ReDim kriterium(MAX - 1, 13)
        
        fcounter = 0
        If kat(0, 0) <> "leer" Then
            For counter = 0 To UBound(kat)
                kriterium(fcounter, 0) = kat(counter, 0)
                kriterium(fcounter, 1) = kat(counter, 1)
                kriterium(fcounter, 2) = kat(counter, 2)
                kriterium(fcounter, 3) = kat(counter, 3)
                kriterium(fcounter, 4) = kat(counter, 4)
                kriterium(fcounter, 5) = kat(counter, 5)
                kriterium(fcounter, 6) = kat(counter, 6)
                kriterium(fcounter, 7) = kat(counter, 7)
                kriterium(fcounter, 8) = kat(counter, 8)
                kriterium(fcounter, 9) = kat(counter, 9)
                kriterium(fcounter, 10) = kat(counter, 10)
                kriterium(fcounter, 11) = kat(counter, 11)
                kriterium(fcounter, 12) = kat(counter, 12)
                
                fcounter = fcounter + 1
            Next counter
        End If
        
        If katD(0, 0) <> "leer" Then
            For counter = 0 To UBound(katD)
                kriterium(fcounter, 0) = katD(counter, 0)
                kriterium(fcounter, 1) = katD(counter, 1)
                kriterium(fcounter, 2) = katD(counter, 2)
                kriterium(fcounter, 3) = katD(counter, 3)
                kriterium(fcounter, 4) = katD(counter, 4)
                kriterium(fcounter, 5) = katD(counter, 5)
                kriterium(fcounter, 6) = katD(counter, 6)
                kriterium(fcounter, 7) = katD(counter, 7)
                kriterium(fcounter, 8) = katD(counter, 8)
                kriterium(fcounter, 9) = katD(counter, 9)
                kriterium(fcounter, 10) = katD(counter, 10)
                kriterium(fcounter, 11) = katD(counter, 11)
                kriterium(fcounter, 12) = katD(counter, 12)
                
                fcounter = fcounter + 1
            Next counter
        End If
        
        If ra(0, 0) <> "leer" Then
            For counter = 0 To UBound(ra)
                kriterium(fcounter, 0) = ra(counter, 0)
                kriterium(fcounter, 1) = ra(counter, 1)
                kriterium(fcounter, 2) = ra(counter, 2)
                kriterium(fcounter, 3) = ra(counter, 3)
                kriterium(fcounter, 4) = ra(counter, 4)
                kriterium(fcounter, 5) = ra(counter, 5)
                kriterium(fcounter, 6) = ra(counter, 6)
                kriterium(fcounter, 7) = ra(counter, 7)
                kriterium(fcounter, 8) = ra(counter, 8)
                kriterium(fcounter, 9) = ra(counter, 9)
                kriterium(fcounter, 10) = ra(counter, 10)
                kriterium(fcounter, 11) = ra(counter, 11)
                kriterium(fcounter, 12) = ra(counter, 12)
                
                fcounter = fcounter + 1
            Next counter
        End If
        
        If ka(0, 0) <> "leer" Then
            For counter = 0 To UBound(ka)
                kriterium(fcounter, 0) = ka(counter, 0)
                kriterium(fcounter, 1) = ka(counter, 1)
                kriterium(fcounter, 2) = ka(counter, 2)
                kriterium(fcounter, 3) = ka(counter, 3)
                kriterium(fcounter, 4) = ka(counter, 4)
                kriterium(fcounter, 5) = ka(counter, 5)
                kriterium(fcounter, 6) = ka(counter, 6)
                kriterium(fcounter, 7) = ka(counter, 7)
                kriterium(fcounter, 8) = ka(counter, 8)
                kriterium(fcounter, 9) = ka(counter, 9)
                kriterium(fcounter, 10) = ka(counter, 10)
                kriterium(fcounter, 11) = ka(counter, 11)
                kriterium(fcounter, 12) = ka(counter, 12)
                
                fcounter = fcounter + 1
            Next counter
        End If
    Else
        ReDim Preserve kriterium(0, 1)
        kriterium(0, 0) = "leer"
    End If
    
    'Recordset schlie|fffd|en
    Call Class_Functions.DB.Rec_Close(rs_ID)
    
    If UBound(kriterium) >= 1 Then
        Call nlc_functions.prcSort(Array(12, 8), kriterium) 'Array(12, 8), kriterium)
    End If
    
    Get_DataForFilterQueryByFilterId = kriterium
End Function

Public Function GetKategoryById(KatID As String)

    Dim kat() As String
    ReDim Preserve kat(1)
    statement = "SELECT " & _
                    "ID, " & _
                    "FK_Art AS Art " & _
                "FROM " & _
                    "DB_Kategorie " & _
                "WHERE " & _
                    "Id = " + str(KatID)
    
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            kat(0) = Class_Functions.DB.Recordset!ID
            kat(1) = Class_Functions.DB.Recordset!art
            GetKategoryById = kat
        Else
            GetKategoryById = ""
        End If
    Else
        GetKategoryById = ""
    End If
End Function

Public Function GetKriteByFilterSetId(kritId As String)

    Dim kat() As String
    ReDim Preserve kat(0)
    statement = "SELECT FK_FilterType FROM DB_Settings_Filter_Sets WHERE ID = " + str(kritId)
    
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            kat(0) = Class_Functions.DB.Recordset(0)(0)
            GetKriteByFilterSetId = kat(0)
        Else
            GetKriteByFilterSetId = ""
        End If
    Else
        GetKriteByFilterSetId = ""
    End If
End Function

'#########################################
'               Filter Ende
'#########################################



Attribute VB_Name = "UserForm1"
Attribute VB_Base = "0{51A7FAD3-CCCD-4DE8-9AC6-84EB15B9D963}{CB5AB5D0-08BB-4151-8993-7F695D10AD70}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub UserForm_Initialize()
    If SQL_Abfragen.Get_AllExternLanguage_Values(Me.ListBox1) = True Then
    
    End If
End Sub
Attribute VB_Name = "calc_PW"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit
Dim nlc_pw As String

Private Sub Logo_Import_Click()
    Dim nlc_pw As String
    Dim level As Integer
    Dim XObj As Object
    Dim Logo As String
    Dim Adresse As String
    Dim Blatt As String
    Dim WN As Single
    
    nlc_pw = nlc_intern.get_pw
    ' Aktion vorbereiten
    On Error GoTo ErrorHandler
    nlc_intern.Application_off
    Logo = ""
    If calc_PW.Range("F9").value <> "" Then
        Adresse = calc_PW.Range("F9").value
    Else
        Adresse = ""
    End If
    
    ' Logo importieren
    calc_PW.Select
    calc_PW.Range("F16").Select
    Logo = Application.GetOpenFilename("Company Logo (*.jpg; *.bmp; *.gif; *.png),*.jpg;*.bmp;*gif;*png", , "Import Logo")
    
    If Logo = "" Or Logo = "Falsch" Then GoTo ErrorHandler
    calc_PW.Pictures("Logo").delete
    calc_PW.Range("F11").value = 0
    calc_PW.Pictures.insert(Logo).Select

   
    Selection.ShapeRange.LockAspectRatio = msoTrue
    Selection.ShapeRange.Width = 150
    If Selection.ShapeRange.Height > 60 Then Selection.ShapeRange.Height = 60
    WN = Selection.ShapeRange.Width
    
    Selection.Cut
    ActiveSheet.Pictures.Paste.Select
    
    calc_PW.Range("F13").value = WN
    Selection.name = "Logo"
    If Adresse <> "" Then ActiveSheet.Hyperlinks.add Anchor:=Selection.ShapeRange.Item(1), Address:=Adresse
    
    If Application.Version >= "12.0" Then
        Pictures("Logo").Select
        Selection.CopyPicture
    Else
        Selection.Copy
    End If
    
    nlc_ppf_xl.Unprotect (nlc_pw)
    
    ' Logos austauschen
    Dim sheet As Worksheet
    Dim Button As Shape
    For Each sheet In ActiveWorkbook.Sheets
        If (VBA.Left(sheet.CodeName, 4) = "nlc_") Then
            Call nlc_logoupload(sheet.name, WN)
        End If
    Next sheet

ErrorHandler:
' Aktion nachbereiten
    If calc_PW.Range("C4") = "YES" And arbeitsmappenschutz = True Then nlc_ppf_xl.Protect Password:=nlc_pw, Structure:=True, Windows:=False

    calc_PW.Select
    calc_PW.Range("A1").Select
    nlc_intern.Application_on
End Sub

Public Function nlc_logoupload(Blatt As String, weite As Single) As Integer
    
    On Error GoTo ErrorHandler
    
    ' Parameter setzen
    Dim level As Integer
    Dim nlc_pw As String
    Dim WA As Single
    Dim YA As Single
    Dim XA As Single
    Dim WN As Single
    Dim YN As Single
    Dim XN As Single
    Dim error As String
    Dim schutz As Boolean
    Dim versteckt As Double
    
    nlc_pw = nlc_intern.get_pw
    schutz = Sheets(Blatt).ProtectContents
    If schutz = True Then Sheets(Blatt).Unprotect (nlc_pw)
    versteckt = Sheets(Blatt).visible
    If Sheets(Blatt).visible <> xlSheetVisible Then Sheets(Blatt).visible = xlSheetVisible
    Sheets(Blatt).Select
    Sheets(Blatt).Range("A1").Select
    WN = calc_PW.Range("F13").value

    YA = Sheets(Blatt).Pictures("Logo").Top
    XA = Sheets(Blatt).Pictures("Logo").Left
    WA = Sheets(Blatt).Pictures("Logo").Width
    Sheets(Blatt).Pictures("Logo").delete
    
    YN = YA
    ActiveSheet.Paste
    Selection.name = "Logo"
    Sheets(Blatt).Pictures("Logo").Top = YN
    XN = XA + WA - WN
    Sheets(Blatt).Pictures("Logo").Left = XN
    
    Selection.ShapeRange.LockAspectRatio = msoFalse
    Sheets(Blatt).Pictures("Logo").Width = weite
    Selection.ShapeRange.LockAspectRatio = msoTrue
    
    If schutz = True Then Sheets(Blatt).Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
    If versteckt = 2 Then Sheets(Blatt).visible = 2
    Exit Function
ErrorHandler:
    error = calc_PW.Range("F11").value
    calc_PW.Range("F11").value = error + 1
        
End Function
Attribute VB_Name = "calc_frm_masterdata"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "calc_frm_projects"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Attribute VB_Name = "calc_master"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Private Sub CommandButton1_Click()
    frm_MasterData.Show
End Sub
Attribute VB_Name = "calc_pipe_set"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "calc_pv_cost"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "calc_pv_ress"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "frm_AddEinheit"
Attribute VB_Base = "0{1E64A84F-88E4-47F7-B0F7-0FE574F38EDF}{A0EB0D7B-56ED-41A1-97D2-F38F2DF69EE1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btn_ok_Click()
    On Error GoTo error
    Call SQL_Abfragen.Insert_Einheit(VBA.Replace(Me.tb_Einheit_name.text, "'", "''"))

    Call SQL_Abfragen.Get_AllEinheiten
    
    frm_MasterData.lb_einheiten.RowSource = "frm_Einheit"
    frm_MasterData.cbb_cost_einheit.RowSource = "frm_Einheit"
    frm_MasterData.cbb_ress_einheit.RowSource = "frm_Einheit"

    Unload Me
    Exit Sub
    
error:
    MsgBox nlc_language.FindValue("SMessage_ErrWriteDB"), vbCritical + vbOKOnly
End Sub

Private Sub UserForm_Initialize()
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    Call setBtnActivity(False)
End Sub

Private Sub tb_Einheit_name_Change()
    Call checkAdd
End Sub

Private Sub checkAdd()
    If Me.tb_Einheit_name.text <> "" Then
        Call setBtnActivity(True)
    Else
        Call setBtnActivity(False)
    End If

End Sub

Private Sub setBtnActivity(active As Boolean)
    If active Then
        Me.btn_ok.Enabled = True
    Else
        Me.btn_ok.Enabled = False
    End If
End Sub



Attribute VB_Name = "frm_Admin"
Attribute VB_Base = "0{5BEADE52-D228-4D2B-8D87-AF9DEE996650}{35AE934A-11D1-42CD-AB45-CD60879FD564}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Dim nlc_pw As String

Private Sub btn_calculate_all_Costtypes_Click()
    Call SQL_Abfragen.Calculate_all_autoCost_values
End Sub

Private Sub btn_calculate_all_ress_costs_Click()
    Call SQL_Abfragen.Calculate_all_RessCost_values
End Sub

Private Sub btn_change_pw_Click()
    If calc_PW.Range("C4") = "NO" Then frm_change_pw.Show
End Sub

Private Sub btn_changeDB_Click()
    nls_Database.wbopen = False
    nls_Database.ChangeDBCon
End Sub

Private Sub btn_fieldVisibility_Click()
    frm_fieldVisibility.Show
End Sub

Private Sub btn_schliessen_Click()
    Unload Me
End Sub

Public Sub btn_sperren_Click()
    Call nlc_functions.showUnlock
    Call check_enable
End Sub

Private Sub btn_unlock_pftype_Click()
    calc_master.Range("PFType_Lock").value = "'FALSE"
    
    If SQL_Abfragen.Update_PFType_Settings(calc_master.Range("PFType_ID").value, "Locked", 0) = False Then
        MsgBox nlc_language.FindValue("SMessage_ErrWriteDB")
        Exit Sub
    End If
    
    Me.btn_unlock_pftype.visible = False
    Me.btn_lock_pftype.visible = True
End Sub

Private Sub btn_lock_pftype_Click()
    calc_master.Range("PFType_Lock").value = "'TRUE"
    
    If SQL_Abfragen.Update_PFType_Settings(calc_master.Range("PFType_ID").value, "Locked", Class_Functions.DB.Parse2True) = False Then
        MsgBox nlc_language.FindValue("SMessage_ErrWriteDB")
        Exit Sub
    End If
    
    Me.btn_unlock_pftype.visible = True
    Me.btn_lock_pftype.visible = False
End Sub

Private Sub btn_Vorperiode_Click()
Dim statement As String

    statement = "Execute CopyPlan2VPPlan"
    
    'statement = "Execute sp_OracleData"
     If Class_Functions.DB.Execute_Statement(statement) = True Then
        MsgBox " Die Vorperioden wurden kopiert."
    Else
        MsgBox "Fehler beim kopieren der Vorperioden."
     End If
End Sub

Private Sub cbb_sortOrder_Change()
    If Me.cbb_sortOrder.listindex >= 0 Then
        calc_master.Range("sortOrder").value = Me.cbb_sortOrder.listindex
    End If
End Sub

Private Sub chb_show_inaktiv_values_Change()
    If Me.chb_show_inaktiv_values.value = True Then
        calc_master.Range("show_inactive_values").value = "'TRUE"
    Else
        calc_master.Range("show_inactive_values").value = "'FALSE"
    End If
End Sub

Private Sub UserForm_Initialize()
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    Dim temp As String
        
    temp = SQL_Abfragen.Get_PF_Settings("Locked")
    
    If temp = "" Then
        temp = "false"
    Else
        nlc_intern.get_true_false (temp)
    End If
    
    calc_master.Range("PFType_Lock").value = "'" & temp
    
    Me.btn_unlock_pftype.Left = 6
    
    If VBA.LCase(calc_master.Range("PFType_Lock").value) = VBA.LCase("TRUE") Then
        Me.btn_unlock_pftype.visible = True
        Me.btn_lock_pftype.visible = False
    Else
        Me.btn_unlock_pftype.visible = False
        Me.btn_lock_pftype.visible = True
    End If
    
    Me.chb_show_inaktiv_values.value = calc_master.Range("show_inactive_values").value
    
    Me.cbb_sortOrder.listindex = calc_master.Range("sortOrder").value
    
    Call check_enable
    
    If tool_art = "Demo" Then
        Me.MultiPage1.Pages(1).visible = False
    End If
End Sub

Private Sub check_enable()
    If calc_master.Range("Login").value <> "" Then
        '&HFFFFFF
        Me.chb_show_inaktiv_values.Locked = False
        Me.chb_show_inaktiv_values.BackColor = &HFFFFFF
        Me.btn_lock_pftype.Enabled = True
        Me.btn_unlock_pftype.Enabled = True
        Me.btn_Vorperiode.Enabled = True
    Else
        '&H8000000F
        Me.chb_show_inaktiv_values.Locked = True
        Me.chb_show_inaktiv_values.BackColor = &H8000000F
        Me.btn_lock_pftype.Enabled = False
        Me.btn_unlock_pftype.Enabled = False
        Me.btn_Vorperiode.Enabled = False
    End If
End Sub
Attribute VB_Name = "frm_DBRetry"
Attribute VB_Base = "0{9551544F-1074-4263-AA70-075359A6789F}{534D2570-C556-451D-961C-A6531199F021}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub UserForm_Initialize()
'    Me.Caption = nlc_Language_userforms(Me.Name, "Titel")
'    Me.rdb_newDB.Caption = nlc_Language_userforms(Me.Name, "rdb_newDB")
'    Me.rdb_retry.Caption = nlc_Language_userforms(Me.Name, "rdb_retry")
'    Me.btn_ok.Caption = nlc_Language_userforms(Me.Name, "btn_ok")
'    Me.btn_cancel.Caption = nlc_Language_userforms(Me.Name, "btn_cancel")
    
    Me.rdb_retry.value = True
End Sub

Private Sub btn_cancel_Click()
    nls_Database.dbUserReply = nlsCancel
    Unload Me
End Sub

Private Sub btn_ok_Click()
    If Me.rdb_retry.value Then
        nls_Database.dbUserReply = nlsRetry
    Else
        nls_Database.dbUserReply = nlsNewDB
    End If
    
    Unload Me
End Sub
Attribute VB_Name = "frm_MasterData"
Attribute VB_Base = "0{A7ABA8D0-4A90-456C-BA1A-36A7B890C1C6}{B29A32F3-B95F-45F9-892F-6FC85CB28F21}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private click As Boolean
Public sort As Boolean
Private ress_kostenart As Integer
Public initSP As Boolean



Private Sub btn_editVerfuegbarkeit_Click()
    If VBA.IsNumeric(Me.lbl_res_select_index_value.Caption) Then
        Call SQL_Abfragen.Get_VerfuegbarkeitFromRessart(Me.lbl_res_select_index_value.Caption)
        frm_verfuegbarkeit.lbl_ressart_id.Caption = Me.lbl_res_select_index_value.Caption
        frm_verfuegbarkeit.Show
    End If
End Sub



'Private Sub btn_expand_language_Click()
'    Me.Width = 504.75
'End Sub

Private Sub btn_katOrder_Click()
    Dim counter As Integer
    
    For counter = 1 To calc_frm_masterdata.Range("frm_Kategorie").Rows.count
        frm_Order_Kat.lb_kat.addItem
        frm_Order_Kat.lb_kat.list(frm_Order_Kat.lb_kat.listCount - 1, 0) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 1)
        frm_Order_Kat.lb_kat.list(frm_Order_Kat.lb_kat.listCount - 1, 1) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 2)
        frm_Order_Kat.lb_kat.list(frm_Order_Kat.lb_kat.listCount - 1, 2) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 3)
        frm_Order_Kat.lb_kat.list(frm_Order_Kat.lb_kat.listCount - 1, 3) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4)
        frm_Order_Kat.lb_kat.list(frm_Order_Kat.lb_kat.listCount - 1, 4) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 5)
        frm_Order_Kat.lb_kat.list(frm_Order_Kat.lb_kat.listCount - 1, 5) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 6)
        frm_Order_Kat.lb_kat.list(frm_Order_Kat.lb_kat.listCount - 1, 6) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 7)
        frm_Order_Kat.lb_kat.list(frm_Order_Kat.lb_kat.listCount - 1, 7) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 8)
        frm_Order_Kat.lb_kat.list(frm_Order_Kat.lb_kat.listCount - 1, 8) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 9)
        frm_Order_Kat.lb_kat.list(frm_Order_Kat.lb_kat.listCount - 1, 9) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 10)
'        frm_Order_Kat.lb_kat.List(frm_Order_Kat.lb_kat.listcount - 1, 10) = calc_frm_masterdata.range("frm_Kategorie").Cells(counter, 11)
'        frm_Order_Kat.lb_kat.List(frm_Order_Kat.lb_kat.listcount - 1, 11) = calc_frm_masterdata.range("frm_Kategorie").Cells(counter, 12)
    Next counter
    
    frm_Order_Kat.Show
End Sub

Private Sub cbb_cost_einheit_Change()
    If click = False Then
        click = True
        
        Call SQL_Abfragen.Update_PF_Settings(calc_master.Range("PF_Settings_ID").value, "FK_Einheit_Cost", Me.cbb_cost_einheit.list(Me.cbb_cost_einheit.listindex, 0))
    
    click = False
    End If
End Sub

Private Sub cbb_ress_einheit_Change()
    If click = False Then
        click = True
        
        Call SQL_Abfragen.Update_PF_Settings(calc_master.Range("PF_Settings_ID").value, "FK_Einheit_Ress", Me.cbb_ress_einheit.list(Me.cbb_ress_einheit.listindex, 0))
        
        click = False
    End If
End Sub

















Private Sub lb_users_Change()
    If click = False Then
        On Error Resume Next
        click = True
        
        Dim list_index As Integer
        
        list_index = Me.lb_users.listindex
        Call setUserActivity(True)
        
        Me.lbl_user_select_index_value.Caption = Me.lb_users.list(list_index, 0)
        Me.tb_username.text = Me.lb_users.list(list_index, 0)
        
        'Ausgew|fffd|hlte Projekttypen laden
        Call SQL_Abfragen.Get_User_PFType_List(Me.lbl_user_select_index_value.Caption, Me.lb_pftypes)
        
        Me.lb_users.listindex = list_index
'        Me.btn_user_add.Enabled = True
        
        click = False
    End If
End Sub




Private Sub tb_user_colwidth_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False And Me.lb_cat.listindex >= 0 And Me.lbl_kat_id_value.Caption <> "ID" And Me.tb_user_colwidth.text <> "" Then
        click = True
        If VBA.IsNumeric(Me.lbl_kat_id_value.Caption) Then
            Dim list_index As Integer

            list_index = Me.lb_cat.listindex
            
            Call SQL_Abfragen.Update_Kategorien(Me.lb_cat.list(list_index, 0), "ColWidth", Me.tb_user_colwidth.text)
            Call SQL_Abfragen.Get_AllKategorien
            
            Me.lb_cat.RowSource = "frm_Kategorie"
            Me.lb_cat.listindex = list_index
        End If
        click = False
    End If
End Sub

Private Sub tb_user_colwidth_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
        Case 44 'Dezimalkomma nur einmal zul|fffd|ssig
            If InStr(1, tb_user_colwidth, ",") > 0 Then KeyAscii = 0
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub LoadRCEinheit()
    Dim counter As Integer
    Dim ress_id As String
    Dim cost_id As String
    
    ress_id = SQL_Abfragen.Get_PF_Settings("FK_Einheit_Ress")
    cost_id = SQL_Abfragen.Get_PF_Settings("FK_Einheit_Cost")
    
    For counter = 0 To Me.cbb_ress_einheit.listCount - 1 Step 1
        If Me.cbb_ress_einheit.list(counter, 0) = ress_id Then
            Me.cbb_ress_einheit.listindex = counter
            Exit For
        End If
    Next counter
    
    For counter = 0 To Me.cbb_cost_einheit.listCount - 1 Step 1
        If Me.cbb_cost_einheit.list(counter, 0) = cost_id Then
            Me.cbb_cost_einheit.listindex = counter
            Exit For
        End If
    Next counter
End Sub

'1. Userform
'2. Kosten
    '2.1. Allgemein
    '2.2. Attribute
    '2.3 Auspr|fffd|gung
    '2.4. Zahl Eigenschaften
'3. Kosten
'4. Ressourcen
'5. Diagrammgrafiken
'6. Einheiten
'7. Userverwaltung

'####################################################################
'1. Userform
'####################################################################
Private Sub UserForm_Initialize()
    If nlc_intern.check_userrights(False) = False Then
        Me.TabPage(0).visible = False
        Me.TabPage(1).visible = False
        Me.TabPage(2).visible = False
        Me.TabPage(3).visible = False
        Me.TabPage(4).visible = False
    End If
    
    Application.ScreenUpdating = False
    
    'Controlls anpassen
    click = False

    Me.btn_schliessen.Left = 306

    Me.Width = 389.25
    Me.TabPage.Width = 372
    Me.btn_expand_language.Caption = "|fffd|"

    Me.Height = 333.75
    Me.TabPage.Height = 270
    Me.btn_schliessen.Top = 282

    frame_zahl_eigenschaften.Left = 6
    Me.frame_attribut.Width = 357
    Me.frame_zahl_eigenschaften.Width = 357
    Me.frame_Kategorie.Width = 357
    
    If calc_master.Range("Login").value = "admin" Then
        Me.cbb_gesperrt.visible = True
    Else
        Me.cbb_gesperrt.visible = False
    End If
    
    Me.lbl_kat_id_value.Caption = "ID"
    Me.cbb_language.text = calc_master.Range("aktuelle_frm_sprache").value
    Me.cbb_cost_language.text = calc_master.Range("aktuelle_frm_sprache").value
    Me.cbb_res_language.text = calc_master.Range("aktuelle_frm_sprache").value

    'Daten laden
    Call SQL_Abfragen.Get_AllKategorien
    Me.lb_cat.RowSource = "frm_Kategorie"
    Call SQL_Abfragen.Get_AllArten
    Me.cbb_cattype.RowSource = "frm_Art"
    Call SQL_Abfragen.Get_AllEinheiten
    Me.lb_einheiten.RowSource = "frm_Einheit"
    Call SQL_Abfragen.Get_AllKatDetails
    Call SQL_Abfragen.Get_AllKostenarten(True)
    Me.lb_costs.RowSource = "frm_Kostenarten"
    Call SQL_Abfragen.Get_AllRessourcenarten
    Me.lb_resources.RowSource = "frm_Ressourcenarten"
    Call SQL_Abfragen.Get_AllUsers
    Me.lb_users.RowSource = "frm_User"
    
    'Kostenarten f|fffd|r Ressourcenzuweisung laden
    Call cbb_kostenarten_aufbauen
    
    'Auspr|fffd|gungen mit Namen definieren
    Call Named_KatDetails
    
    'cbb_ress_gruppe bef|fffd|llen
    Call generate_cbb_resgroup
    'Resslist f|fffd|r Planstellen
    'Call ress_cbb_fill
    
    
    cbb_cost_cat.addItem "auto"
    cbb_cost_cat.addItem "manuell"
    
    If calc_master.Range("const_anz").value = calc_master.Range("cost_max").value Then
        Me.cbb_cost_cat.listindex = 1
    End If
    
    Call generate_pftype_list
    
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    
    Call setUserFieldsActivity(False)
    Call setUserFieldsDetailActivity(False)
    Call setCostTypesActivity(False)
    Call setResTypesActivity(False)
    Call setUnitActivity(False)
    Call setUserActivity(False)
    
    'Einheiten laden
    Call LoadRCEinheit
    
    Application.ScreenUpdating = True
End Sub

Private Sub ress_cbb_fill()
    Dim change_click As Boolean
    Dim counter As Integer
    Dim lb_counter As Integer
    Dim last_group As String
    
    Dim origRow As Integer
    Dim newRow As Integer
    Dim startCol As Integer
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    startCol = calc_frm_masterdata.Range("frm_Ressourcenlist").columns(1).Column
    newRow = calc_frm_masterdata.Range("frm_Ressourcenlist").Rows(1).row
    origRow = calc_frm_masterdata.Range("frm_Ressourcenarten").Rows(1).row
    
    calc_frm_masterdata.Range("frm_Ressourcenlist").ClearContents
    
    lb_counter = 0
    change_click = click
    click = True
    
    
    'frm_Ressourcenlist
'    Me.cbb_ress_name.clear
    
    For counter = 1 To calc_frm_masterdata.Range("frm_Ressourcenarten").Rows.count
        'nur mit Ressourcen f|fffd|llen (+ Gruppenk|fffd|rzel)
        If VBA.Left(calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 3).value, 5) = "     " Then
            calc_frm_masterdata.Cells(newRow, startCol).value = calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 1).value
            calc_frm_masterdata.Cells(newRow, startCol + 1).value = VBA.Right(calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 2).value, VBA.Len(calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 2).value) - 5) & " (" & last_group & ")"
            calc_frm_masterdata.Cells(newRow, startCol + 2).value = VBA.Right(calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 3).value, VBA.Len(calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 3).value) - 5) & " (" & last_group & ")"
            calc_frm_masterdata.Cells(newRow, startCol + 3).value = calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 4).value
            calc_frm_masterdata.Cells(newRow, startCol + 4).value = calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 5).value
            calc_frm_masterdata.Cells(newRow, startCol + 5).value = calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 6).value
            calc_frm_masterdata.Cells(newRow, startCol + 6).value = calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 7).value
            
            newRow = newRow + 1
        Else
            last_group = calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 2).value
        End If
    Next counter
    
                                                                         
    calc_frm_masterdata.Range("BH4:BN" & newRow - 1).sort Key1:=calc_frm_masterdata.Range("BJ4"), Order1:=xlAscending, Header:=xlNo

    If newRow - 1 > origRow Then
        ActiveWorkbook.Names.add name:="frm_Ressourcenlist", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(origRow, 60), calc_frm_masterdata.Cells(newRow - 1, 66))
    Else
        ActiveWorkbook.Names.add name:="frm_Ressourcenlist", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(origRow, 60), calc_frm_masterdata.Cells(origRow, 66))
    End If
    
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    
    click = change_click
End Sub

Private Sub cbb_kostenarten_aufbauen()
    'Kostenarten f|fffd|r Ressourcenzuweisung laden
    Dim counter As Integer
    Dim cbb_counter As Integer
    cbb_counter = 0
    
    Me.cbb_kostenart.clear
    For counter = 1 To calc_frm_masterdata.Range("frm_Kostenarten").Rows.count
        If calc_frm_masterdata.Range("frm_Kostenarten").Cells(counter, 4).value = "auto" Then
            Me.cbb_kostenart.addItem calc_frm_masterdata.Range("frm_Kostenarten").Cells(counter, 1).value
            Me.cbb_kostenart.list(cbb_counter, 1) = calc_frm_masterdata.Range("frm_Kostenarten").Cells(counter, 2).value
            
            cbb_counter = cbb_counter + 1
        End If
    Next counter
    
    If ress_kostenart >= 0 Then
        Me.cbb_kostenart.listindex = ress_kostenart
    End If
End Sub

'********************************************************************
Private Sub TabPage_Change()

    'Es wird gepr|fffd|ft ob eine |fffd|nderung einer Grafik noch nicht gespeichert wurde
    If lbl_saved_grafik_value.Caption = "false" Then
        
        If MsgBox(nlc_language.FindValue("SMessage_SaveGrafik"), vbQuestion + vbYesNo) = vbYes Then
            Call btn_save_grafik_Click
        End If
        lbl_saved_grafik_value.Caption = "true"
    End If
    
    'Die h|fffd|he der Userform wird angepasst
    If Me.TabPage.SelectedItem.index = 1 Or Me.TabPage.SelectedItem.index = 2 Or Me.TabPage.SelectedItem.index = 3 Then
        
        Call cbb_kostenarten_aufbauen
        
        Me.Height = 333.75
        Me.TabPage.Height = 270
        Me.btn_schliessen.Top = 282
        Me.frame_attribut.visible = False
        Me.frame_Kategorie.visible = False
        Me.frame_zahl_eigenschaften.visible = False
        'If Me.TabPage.SelectedItem.Index = 2 Then Me.cbb_kostenart.RowSource = "frm_kostenart"
    ElseIf Me.TabPage.SelectedItem.index = 5 Then
        Call generate_pftype_list
        Me.lb_users.listindex = -1
        Me.tb_username.text = ""
        Call setUserActivity(False)
    ElseIf Me.TabPage.SelectedItem.index = 6 Then
        click = True
        
        Call SQL_Abfragen.Get_AllFilter
        Call SP_init
        Call Get_SPZuweisungen
        
        click = False
    End If
    
'    If Me.TabPage.SelectedItem.index = 2 Then
'        Me.Width = 389.25
'        Me.TabPage.Width = 372
'        Me.btn_schliessen.Left = 306
'    Else
'        Me.Width = 329.25
'        Me.TabPage.Width = 312
'        Me.btn_schliessen.Left = 246
'    End If
End Sub
'********************************************************************
Private Sub btn_schliessen_Click()
    Call SQL_Abfragen.Get_User_PFType_DropDown(calc_master.Cells(31, 6).value)
    
    If lbl_saved_grafik_value.Caption = "false" Then
        If MsgBox(nlc_language.FindValue("SMessage_SaveGrafik"), vbQuestion + vbYesNo) = vbYes Then
            Call btn_save_grafik_Click
        End If
        lbl_saved_grafik_value.Caption = "true"
    End If

    Unload Me
End Sub
'********************************************************************

Private Sub make_zahl_beispiel()
    Dim counter As Integer
    Dim komma As String
    Dim kommastellen As Integer
    
    If IsNumeric(Me.tb_komma.text) Then
        kommastellen = Me.tb_komma.text
    Else
        kommastellen = 0
    End If
    
    For counter = 1 To VBA.CInt(kommastellen) Step 1
        komma = komma + "0"
    Next counter

    If komma <> "" Then
        Me.lbl_beispiel.Caption = "1.000," & komma
    Else
        Me.lbl_beispiel.Caption = "1.000"
    End If

    If Me.cbb_einheit.text <> "" Then
        Me.lbl_beispiel.Caption = Me.lbl_beispiel.Caption & " " & Me.cbb_einheit.text
    End If
End Sub

'####################################################################
'2. Userfelder
'####################################################################
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'2.1. Allgemein
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub tb_shortname_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False And Me.lb_cat.listindex >= 0 And Me.lbl_kat_id_value.Caption <> "ID" Then
        click = True
        If VBA.IsNumeric(Me.lbl_kat_id_value.Caption) Then
            Dim list_index As Integer

            list_index = Me.lb_cat.listindex
            
            Call SQL_Abfragen.Update_Kategorien(Me.lb_cat.list(list_index, 0), "FK_Language_Shortname", VBA.Replace(Me.tb_shortname.text, "'", "''"))
            Call SQL_Abfragen.Get_AllKategorien
            
            Me.lb_cat.RowSource = "frm_Kategorie"
            Me.lb_cat.listindex = list_index
        End If

        click = False
    End If
End Sub

Private Sub tb_catname_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False And Me.lb_cat.listindex >= 0 And Me.lbl_kat_id_value.Caption <> "ID" Then
        click = True
        If VBA.IsNumeric(Me.lbl_kat_id_value.Caption) Then
            Dim list_index As Integer
            Dim selectedValue As String
            Dim i As Integer
            
            list_index = Me.lb_cat.listindex
            selectedValue = Me.tb_catname.text
            
            Call SQL_Abfragen.Update_Kategorien(Me.lb_cat.list(list_index, 0), "FK_Language_Name", VBA.Replace(Me.tb_catname.text, "'", "''"))
            Call SQL_Abfragen.Get_AllKategorien
            
            Me.lb_cat.RowSource = "frm_Kategorie"
            
            For i = 0 To Me.lb_cat.listCount - 1
                If Me.lb_cat.list(i, 2) = selectedValue Then
                    Me.lb_cat.listindex = i
                    Exit For
                End If
            Next i
            
        End If

        click = False
    End If
End Sub

'Private Sub tb_catname_language_Change()
'    If click = False Then
'        click = True
'        If VBA.IsNumeric(Me.lbl_kat_id_value.Caption) Then
'            Dim lang_col As String
'            Dim list_index As Integer
'
'            list_index = Me.lb_cat.listindex
'
'            lang_col = get_language_col(md_kat.name, Range("aktuelle_frm_sprache").Value)
'            Call SQL_Abfragen.EditTable(md_kat.name, md_kat.Cells(1, VBA.CInt(lang_col)).Value & "='" & Me.tb_catname_language.text & "'", "ID = " & Me.lbl_kat_id_value.Caption & "")
'            Me.lb_cat_language.RowSource = "frm_Kategorie"
'            Me.lb_cat.listindex = list_index
'        End If
'        click = False
'    End If
'End Sub
'********************************************************************

Private Sub cbb_gesperrt_Change()
    If click = False And Me.lb_cat.listindex >= 0 And Me.lbl_kat_id_value.Caption <> "ID" Then
        click = True
        Dim list_index As Integer
        Dim wert As String

        list_index = Me.lb_cat.listindex

        If Me.cbb_gesperrt.value = "l|fffd|schbar" Then
            wert = "l"
        ElseIf Me.cbb_gesperrt.value = "editierbar" Then
            wert = "e"
        ElseIf Me.cbb_gesperrt.value = "l|fffd|schbar_unsichtbar" Then
            wert = "lu"
        ElseIf Me.cbb_gesperrt.value = "editierbar_unsichtbar" Then
            wert = "eu"
        End If
        
        Call SQL_Abfragen.Update_Kategorien(Me.lb_cat.list(list_index, 0), "Gesperrt", wert)
        Call SQL_Abfragen.Get_AllKategorien
        
        Me.lb_cat.listindex = list_index
    End If
End Sub
'
'Private Sub cbb_language_Change()
'    Dim sort_col As String
'    Dim col_counter As Integer
'
'    col_counter = 1
'    Range("aktuelle_frm_sprache").Value = Me.cbb_language.text
'    sort_col = nlc_functions.get_language_col(md_kat.name, Range("aktuelle_frm_sprache").Value)
'
'    Me.cbb_res_language.text = Me.cbb_language.text
'    Me.cbb_cost_language.text = Me.cbb_language.text
'
'    While md_kat.Cells(1, col_counter).Value <> ""
'        If col_width = "" Then
'            If col_counter = VBA.CInt(sort_col) Then
'                col_width = "190 Pt"
'            Else
'                col_width = "0 Pt"
'            End If
'        Else
'            If col_counter = VBA.CInt(sort_col) Then
'                col_width = col_width & "; 95 Pt"
'            Else
'                col_width = col_width & "; 0 Pt"
'            End If
'        End If
'        col_counter = col_counter + 1
'    Wend
'
'    Me.lb_cat_language.ColumnWidths = col_width
'End Sub

'********************************************************************
Private Sub chb_achsen_relevant_Change()
    If click = False And Me.lb_cat.listindex >= 0 And Me.lbl_kat_id_value.Caption <> "ID" Then
        click = True
        If VBA.IsNumeric(Me.lbl_kat_id_value.Caption) Then
            Dim list_index As Integer
            Dim wert As String

            list_index = Me.lb_cat.listindex
            
            If Me.chb_achsen_relevant.value = True Then
                wert = "True"
            Else
                wert = "False"
            End If
            
            Call SQL_Abfragen.Update_Kategorien(Me.lb_cat.list(list_index, 0), "Achsen", wert)
            Call SQL_Abfragen.Get_AllKategorien
            
            Me.lb_cat.RowSource = "frm_Kategorie"
            Me.lb_cat.listindex = list_index
        End If

        click = False
    End If
End Sub

'********************************************************************
Private Sub lb_cat_Change()
    On Error Resume Next
    click = True

    Dim list_index As Integer
    Dim sort_col As String
    Dim order_col As String
    Dim lang_col As String
    Dim row_counter As Integer
    Dim first_row As Integer
    Dim last_row As Integer

    list_index = Me.lb_cat.listindex
    
    Me.btn_color.BackColor = &H8000000F
    Me.btn_color.ForeColor = &H80000012
    
    If list_index >= 0 Then
        Call setUserFieldsActivity(True)
        Me.lbl_kat_id_value.Caption = Me.lb_cat.list(list_index, 0)

        Me.tb_shortname.text = Me.lb_cat.list(list_index, 1)
        Me.tb_catname.text = Me.lb_cat.list(list_index, 2)
        Me.cbb_cattype.text = Me.lb_cat.list(list_index, 3)
        If Me.lb_cat.list(list_index, 8) = True Then
            Me.chb_achsen_relevant.value = True
        Else
            Me.chb_achsen_relevant.value = False
        End If
        
        If Me.lb_cat.list(list_index, 9) = "l" Then
            Me.cbb_gesperrt.value = "l|fffd|schbar"
        ElseIf Me.lb_cat.list(list_index, 9) = "e" Then
            Me.cbb_gesperrt.value = "editierbar"
        ElseIf Me.lb_cat.list(list_index, 9) = "lu" Then
            Me.cbb_gesperrt.value = "l|fffd|schbar_unsichtbar"
        ElseIf Me.lb_cat.list(list_index, 9) = "eu" Then
            Me.cbb_gesperrt.value = "editierbar_unsichtbar"
        End If
        
        Me.tb_user_colwidth.text = Me.lb_cat.list(list_index, 11)
        
        Select Case Me.lb_cat.list(list_index, 3)
            Case "DropDown"
                Me.Height = 464.25
                Me.TabPage.Height = 396
    
                Me.btn_schliessen.Top = 408
                
                Err.clear
                
                Me.lb_dkat.RowSource = "KatD_" & Me.lb_cat.list(list_index, 0)
                If Err.Number <> 0 Then
                    Me.lb_dkat.RowSource = ""
                End If
                Me.lb_dkat_language.RowSource = "KatD_" & Me.lb_cat.list(list_index, 0)
    
                Me.frame_Kategorie.visible = True
                Me.frame_attribut.visible = False
                Me.frame_zahl_eigenschaften.visible = False
    
                Me.tb_neu_dkat_short.text = ""
                Me.tb_neu_dkat.text = ""
            Case "Number"
                Me.Height = 464.25
                Me.TabPage.Height = 396
    
                Me.btn_schliessen.Top = 408
                
                'Me.lb_dkat.RowSource = "KatD_" & Me.lb_cat.List(list_index, 0)
                'Me.lb_dkat_language.RowSource = "KatD_" & Me.lb_cat.List(list_index, 0)
    
                Me.frame_Kategorie.visible = False
                Me.frame_attribut.visible = False
                Me.frame_zahl_eigenschaften.visible = True
                Me.cbb_einheit.listindex = -1
    
                Me.tb_min.text = Range(Me.lb_cat.RowSource).Cells(list_index + 1, 6).value
                Me.tb_max.text = Range(Me.lb_cat.RowSource).Cells(list_index + 1, 7).value
                Me.tb_komma.text = Range(Me.lb_cat.RowSource).Cells(list_index + 1, 8).value
                If Range(Me.lb_cat.RowSource).Cells(list_index + 1, 5).value <> "" Then
                    Me.cbb_einheit.text = Range(Me.lb_cat.RowSource).Cells(list_index + 1, 5).value
                End If
                If Range(Me.lb_cat.RowSource).Cells(list_index + 1, 11).value Then
                    Me.cbb_groupe.text = Range(Me.lb_cat.RowSource).Cells(list_index + 1, 11).value
                Else
                    Me.cbb_groupe.listindex = -1
                End If
                
                Me.lbl_einheit_id.Caption = Range(Me.lb_dkat.RowSource).Cells(1, 4).value
                'Me.cbb_groupe.listindex = VBA.CInt(Me.lb_cat.List(Me.lb_cat.listindex, 12))
            Case "True/False"
                Me.Height = 416
                Me.TabPage.Height = 347
    
                Me.btn_schliessen.Top = 357
                
                Me.lb_dkat.RowSource = "KatD_" & Me.lb_cat.list(list_index, 0)
                Me.lb_dkat_language.RowSource = "KatD_" & Me.lb_cat.list(list_index, 0)
    
                Me.frame_Kategorie.visible = False
                Me.frame_zahl_eigenschaften.visible = False
                Me.frame_attribut.visible = True
    
                Me.lbl_att1_id_value.Caption = Range(Me.lb_dkat.RowSource).Cells(1, 1).value
                Me.lbl_att2_id_value.Caption = Range(Me.lb_dkat.RowSource).Cells(2, 1).value
    
                Me.tb_attribut_1.text = Range(Me.lb_dkat.RowSource).Cells(1, 3).value
                Me.tb_attribut_2.text = Range(Me.lb_dkat.RowSource).Cells(2, 3).value
                Me.tb_attribute_1_language.text = Range(Me.lb_dkat.RowSource).Cells(1, 3).value
                Me.tb_attribute_2_language.text = Range(Me.lb_dkat.RowSource).Cells(2, 3).value
    
            Case Else
                Me.Height = 333.75
                Me.TabPage.Height = 270
                Me.btn_schliessen.Top = 282
    
                Me.frame_Kategorie.visible = False
                Me.frame_attribut.visible = False
                Me.frame_zahl_eigenschaften.visible = False
        End Select

        Me.lb_cat.listindex = list_index
        click = False

        Me.lb_cat_language.listindex = Me.lb_cat.listindex
        Me.lbl_kat_id_value.Caption = Me.lb_cat.list(Me.lb_cat.listindex, 0)
        Me.lbl_dkat_id_value.Caption = "ID"
        
        Me.btn_del_kat.Enabled = False
        
        If Me.cbb_gesperrt.value = "editierbar_unsichtbar" Or Me.cbb_gesperrt.value = "editierbar" Then
            If calc_master.Range("Login").value <> "admin" Then
                Me.tb_shortname.Locked = False
                Me.tb_shortname.BackColor = &HFFFFFF
                Me.tb_catname.Locked = False
                Me.tb_catname.BackColor = &HFFFFFF
                Me.tb_catname_language.Locked = False
                Me.tb_catname_language.BackColor = &HFFFFFF
            Else
                Me.tb_shortname.Locked = False
                Me.tb_shortname.BackColor = &HFFFFFF
                Me.tb_catname.Locked = False
                Me.tb_catname.BackColor = &HFFFFFF
                Me.tb_catname_language.Locked = False
                Me.tb_catname_language.BackColor = &HFFFFFF
            End If
        ElseIf Me.cbb_gesperrt.value = "l|fffd|schbar_unsichtbar" Or Me.cbb_gesperrt.value = "l|fffd|schbar" Then
            If calc_master.Range("Login").value <> "admin" Then
                Me.tb_shortname.Locked = False
                Me.tb_shortname.BackColor = &HFFFFFF
                Me.tb_catname.Locked = False
                Me.tb_catname.BackColor = &HFFFFFF
                Me.tb_catname_language.Locked = False
                Me.tb_catname_language.BackColor = &HFFFFFF
                If Me.cbb_gesperrt.value = "l|fffd|schbar" Then
                    Me.btn_del_kat.Enabled = True
                End If
            Else
                Me.tb_shortname.Locked = False
                Me.tb_shortname.BackColor = &HFFFFFF
                Me.tb_catname.Locked = False
                Me.tb_catname.BackColor = &HFFFFFF
                Me.tb_catname_language.Locked = False
                Me.tb_catname_language.BackColor = &HFFFFFF
                Me.btn_del_kat.Enabled = True
            End If
        End If
    End If
End Sub

'Private Sub lb_cat_language_Click()
'    Me.lb_cat.listindex = Me.lb_cat_language.listindex
'End Sub

'********************************************************************
Private Sub btn_add_kat_Click()
    frm_addKategorie.Show
    
    Call setUserFieldsActivity(False)
End Sub

Private Sub btn_del_kat_Click()
    If click = False And Me.lb_cat.listindex >= 0 And Me.lbl_kat_id_value.Caption <> "ID" Then
        click = True
        Dim list_index As Integer
        
        list_index = Me.lb_cat.listindex
        
        If VBA.IsNumeric(Me.lbl_kat_id_value.Caption) Then
            If Me.lb_cat.list(list_index, 9) = "l" Then
                Call SQL_Abfragen.Update_Kategorien(Me.lb_cat.list(list_index, 0), "FK_Language_Name", Me.lb_cat.list(list_index, 2) & " - gel|fffd|scht")
                Call SQL_Abfragen.Update_Kategorien(Me.lb_cat.list(list_index, 0), "active", "False")
                Call SQL_Abfragen.Get_AllKategorien
            End If
        End If
        
        Call setUserFieldsActivity(False)
        
        click = False
    End If
End Sub

'Private Sub btn_del_kat_Click()
'    'L|fffd|sche Kategorie und alle dazugeh|fffd|rigen Felder (aus den MD Tabellen)
'End Sub
'
'Private Sub btn_expand_language_Click()
'    If Me.Width = 329.25 Then
'        Me.Width = 443.25
'        Me.TabPage.Width = 426
'        Me.frame_attribut.Width = 410
'        Me.frame_zahl_eigenschaften.Width = 410
'        Me.frame_Kategorie.Width = 410
'        Me.btn_expand_language.Caption = "|fffd|"
'        Me.btn_cost_expand_language.Caption = "|fffd|"
'        Me.btn_res_expand_language.Caption = "|fffd|"
'        img_trennlinie_1.Visible = True
'        img_trennlinie_2.Visible = True
'        img_trennlinie_3.Visible = True
'        Me.btn_schliessen.Left = 359.95
'    Else
'        Me.Width = 329.25
'        Me.TabPage.Width = 312
'        Me.frame_attribut.Width = 297
'        Me.frame_zahl_eigenschaften.Width = 297
'        Me.frame_Kategorie.Width = 297
'        Me.btn_expand_language.Caption = "|fffd|"
'        Me.btn_expand_language.Caption = "|fffd|"
'        Me.btn_cost_expand_language.Caption = "|fffd|"
'        Me.btn_res_expand_language.Caption = "|fffd|"
'        img_trennlinie_1.Visible = False
'        img_trennlinie_2.Visible = False
'        img_trennlinie_3.Visible = False
'        Me.btn_schliessen.Left = 246
'    End If
'End Sub

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'2.2. Attribute
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub tb_attribut_1_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False And Me.lb_cat.listindex >= 0 Then
        click = True
        If VBA.IsNumeric(Me.lbl_att1_id_value.Caption) Then
            Dim list_index As Integer

            list_index = Me.lb_cat.listindex
            
            Call SQL_Abfragen.Update_KategorieDetail(Me.lbl_att1_id_value.Caption, "FK_Language_Name", VBA.Replace(Me.tb_attribut_1.text, "'", "''"))
            Call SQL_Abfragen.Get_AllKatDetails
            
            Me.lb_cat.listindex = list_index
        End If
        click = False
    End If
End Sub

Private Sub tb_attribut_2_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False Then
        If VBA.IsNumeric(Me.lbl_att2_id_value.Caption) Then
            Dim listindex As Integer
            
            listindex = Me.lb_cat.listindex
            Call SQL_Abfragen.Update_KategorieDetail(Me.lbl_att2_id_value.Caption, "FK_Language_Name", VBA.Replace(Me.tb_attribut_2.text, "'", "''"))
            Call SQL_Abfragen.Get_AllKatDetails
            Me.lb_cat.listindex = listindex
        End If
    End If
End Sub

Private Sub tb_attribute_1_language_Change()
'    If click = False Then
'        If VBA.IsNumeric(Me.lbl_att1_id_value.Caption) Then
'            Dim lang_col As String
'
'            lang_col = get_language_col(md_kat_d.Name, Range("aktuelle_frm_sprache").Value)
'            Call SQL_Abfragen.EditTable(md_kat_d.Name, md_kat_d.Cells(1, VBA.CInt(lang_col)).Value & "='" & Me.tb_attribute_1_language.text & "'", "ID = " & Me.lbl_att1_id_value.Caption & "")
'        End If
'    End If
End Sub

Private Sub tb_attribute_2_language_Change()
'    If click = False Then
'        If VBA.IsNumeric(Me.lbl_att2_id_value.Caption) Then
'            Dim lang_col As String
'
'            lang_col = get_language_col(md_kat_d.Name, Range("aktuelle_frm_sprache").Value)
'            Call SQL_Abfragen.EditTable(md_kat_d.Name, md_kat_d.Cells(1, VBA.CInt(lang_col)).Value & "='" & Me.tb_attribute_2_language.text & "'", "ID = " & Me.lbl_att2_id_value.Caption & "")
'        End If
'    End If
End Sub

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'2.3 Auspr|fffd|gung
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub tb_neu_dkat_short_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False And Me.lb_dkat.listindex >= 0 Then
        click = True
        If VBA.IsNumeric(Me.lbl_dkat_id_value.Caption) Then
            Dim list_index As Integer
            Dim row_source As Variant
            
            list_index = Me.lb_dkat.listindex
            row_source = Me.lb_dkat.RowSource
            
            Call SQL_Abfragen.Update_KategorieDetail(Me.lb_dkat.list(list_index, 0), "FK_Language_Shortname", VBA.Replace(Me.tb_neu_dkat_short.text, "'", "''"))
            Call SQL_Abfragen.Get_AllKatDetails
            
            Me.lb_dkat.RowSource = row_source
            Me.lb_dkat.listindex = list_index
        End If

        click = False
    End If
End Sub

Private Sub tb_neu_dkat_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False And Me.lb_dkat.listindex >= 0 Then
        click = True
        If VBA.IsNumeric(Me.lbl_dkat_id_value.Caption) Then
            Dim list_index As Integer
            Dim row_source As Variant
            
            list_index = Me.lb_dkat.listindex
            row_source = Me.lb_dkat.RowSource
            
            Call SQL_Abfragen.Update_KategorieDetail(Me.lb_dkat.list(list_index, 0), "FK_Language_Name", VBA.Replace(Me.tb_neu_dkat.text, "'", "''"))
            Call SQL_Abfragen.Get_AllKatDetails
            
            Me.lb_dkat.RowSource = row_source
            Me.lb_dkat.listindex = list_index
        End If
        
        If VBA.IsNumeric(Me.lbl_kat_id_value.Caption) Then
            'wenn ein Feld des Portfoliotyps ge|fffd|ndert wird, muss auch die Liste dazu aktualisiert werden.
            If Me.lbl_kat_id_value.Caption = "29" Then
                Call Get_User_PFType_DropDown(calc_master.Cells(31, 6).value)
            End If
        End If


        click = False
    End If
End Sub
'
'Private Sub tb_dcatname_language_Change()
'    If click = False Then
'        If VBA.IsNumeric(Me.lbl_dkat_id_value.Caption) Then
'            Dim lang_col As String
'            Dim list_index As Integer
'
'            list_index = Me.lb_dkat.listindex
'
'            lang_col = get_language_col(md_kat_d.name, Range("aktuelle_frm_sprache").Value)
'            Call SQL_Abfragen.EditTable(md_kat_d.name, md_kat.Cells(1, VBA.CInt(lang_col)).Value & "='" & Me.tb_dcatname_language.text & "'", "ID = " & Me.lbl_dkat_id_value.Caption & "")
'            Me.lb_dkat.listindex = list_index
'        End If
'    End If
'End Sub
'********************************************************************
Private Sub lb_dkat_Click()
    If sort = False And click = False Then
        Call setUserFieldsDetailActivity(True)
        'Me.lb_dkat_language.listindex = Me.lb_dkat.listindex
        Me.lbl_dkat_id_value.Caption = Me.lb_dkat.list(Me.lb_dkat.listindex, 1)

        Dim list_index As Integer
        Dim farbe_r As String
        Dim farbe_g As String
        Dim farbe_b As String
        Dim color_index As Integer
        Dim Color_ID As Integer

        list_index = Me.lb_dkat.listindex

        Me.lbl_dkat_id_value.Caption = Me.lb_dkat.list(list_index, 0)

        Me.tb_neu_dkat_short.text = Me.lb_dkat.list(list_index, 1)
        Me.tb_neu_dkat.text = Me.lb_dkat.list(list_index, 2)
        Me.tb_dcatname_language.text = Me.lb_dkat.list(list_index, 2)

        If Me.lb_dkat.list(list_index, 4) = 0 Then
            Color_ID = 1
        Else
            Color_ID = Me.lb_dkat.list(list_index, 4)
        End If
            
        color_index = calc_master.Cells(Color_ID + 11, 10).value
        
        farbe_r = ActiveWorkbook.Colors(color_index) And vbRed
        farbe_g = (ActiveWorkbook.Colors(color_index) And vbGreen) \ &H100
        farbe_b = (ActiveWorkbook.Colors(color_index) And vbBlue) \ &H10000

        Me.btn_color.BackColor = VBA.RGB(farbe_r, farbe_g, farbe_b)

        If calc_master.Cells(Color_ID + 11, 11).value = "s" Then
            Me.btn_color.ForeColor = VBA.RGB(0, 0, 0)
        ElseIf calc_master.Cells(Color_ID + 11, 11).value = "w" Then
            Me.btn_color.ForeColor = VBA.RGB(255, 255, 255)
        End If
    End If
End Sub

'Private Sub lb_dkat_language_Click()
'    If sort = False Then Me.lb_dkat.listindex = Me.lb_dkat_language.listindex
'End Sub
'********************************************************************
Private Sub btn_add_dkat_Click()
    frm_addDKategorie.Show
    Call setUserFieldsDetailActivity(False)
End Sub

Private Sub btn_del_dkat_Click()
    If click = False And Me.lb_dkat.listindex >= 0 Then
        click = True
        Dim list_index As Integer
        Dim kat_list_index As Integer
        
        kat_list_index = Me.lb_cat.listindex
        list_index = Me.lb_dkat.listindex
        
        If VBA.IsNumeric(Me.lbl_dkat_id_value.Caption) Then
            Call SQL_Abfragen.Update_KategorieDetail(Me.lb_dkat.list(list_index, 0), "FK_Language_Name", Me.lb_dkat.list(list_index, 2) & " - gel|fffd|scht")
            Call SQL_Abfragen.Update_KategorieDetail(Me.lb_dkat.list(list_index, 0), "active", "False")
            Call SQL_Abfragen.Update_KategorieDetail(Me.lb_dkat.list(list_index, 0), "OrderBy", "1000")
            
            Call SQL_Abfragen.Get_AllKatDetails
            Call Named_KatDetails
            
            Me.lb_dkat.RowSource = Me.lb_dkat.RowSource
            
            'Alle noch aktiven Auspr|fffd|gungen neu sortieren!
            Dim counter As Integer
    
            For counter = 0 To Me.lb_dkat.listCount - 1
                Call SQL_Abfragen.Update_KategorieDetail(Me.lb_dkat.list(counter, 0), "OrderBy", counter + 1)
            Next counter
        End If
        
        
        On Error GoTo error
        Me.lb_dkat.RowSource = Me.lb_dkat.RowSource
        GoTo weiter
error:
        Me.lb_dkat.RowSource = ""
weiter:
        Call setUserFieldsDetailActivity(False)
        
        click = False
    End If
End Sub

'Private Sub btn_del_dkat_Click()
''    Dim row_counter As Integer
''    Dim row_counter_2 As Integer
''    Dim col As String
''    Dim first_row As Integer
''    Dim last_row As Integer
''    Dim sort_col As String
''    Dim order_col As String
''
''    col = get_col(md_kat.name, "ID")
''    sort_col = nlc_functions.get_col(md_kat_d.name, "FK_MD_Kat")
''    order_col = nlc_functions.get_col(md_kat_d.name, "OrderBy")
''
''    For row_counter = 2 To calc_master.Range("C5").Value Step 1
''        If md_kat_d.Cells(row_counter, VBA.CInt(col)).Value = Me.lb_dkat.List(Me.lb_dkat.ListIndex, VBA.CInt(col) - 1) Then
''            For row_counter_2 = 2 To calc_master.Cells(5, 3).Value Step 1
''                If md_kat_d.Cells(row_counter_2, VBA.CInt(sort_col)).Value = VBA.CInt(Me.lbl_kat_id_value.Caption) Then
''                    md_kat_d.Cells(row_counter_2, VBA.CInt(order_col)).Value = "1"
''                    If first_row = 0 Then
''                        first_row = row_counter_2
''                    ElseIf md_kat_d.Cells(row_counter_2 + 1, VBA.CInt(sort_col)).Value <> Me.lbl_kat_id_value.Caption Then
''                        last_row = row_counter_2
''                    End If
''                Else
''                    md_kat_d.Cells(row_counter_2, VBA.CInt(order_col)).Value = "2"
''                End If
''            Next row_counter_2
''
''            If last_row <= 0 Then
''                last_row = first_row
''            Else
''                last_row = last_row - first_row + 2
''            End If
''
''            first_row = 2
''
''            ActiveWorkbook.Names.Add name:="frm_DKat", RefersToR1C1:=md_kat_d.Range(md_kat_d.Cells(first_row, 1), md_kat_d.Cells(last_row - 1, 10))
''
''            lb_dkat.RowSource = "frm_DKat"
''
''            Me.lbl_dkat_id_value.Caption = "ID"
''            calc_master.Cells(5, 3).Value = calc_master.Cells(5, 3).Value - 1
''            Me.lb_dkat.ListIndex = 0
''            md_kat_d.Rows(row_counter).Delete Shift:=xlUp
''        End If
''    Next row_counter
'End Sub

Private Sub btn_color_Click()
    'color_index = calc_master.Cells(Me.lb_dkat.List(Me.lb_dkat.listindex, 5) + 11, 10).value
    frm_farbe.Show
End Sub

Private Sub btn_down_Click()
    Dim counter As Integer
    Dim def_name As String
    
    def_name = "KatD_" & Me.lbl_kat_id_value.Caption
    
    For counter = 1 To calc_frm_masterdata.Range(def_name).Rows.count
        frm_Order_KatD.lb_dkat.addItem
        frm_Order_KatD.lb_dkat.list(frm_Order_KatD.lb_dkat.listCount - 1, 0) = calc_frm_masterdata.Range(def_name).Cells(counter, 1)
        frm_Order_KatD.lb_dkat.list(frm_Order_KatD.lb_dkat.listCount - 1, 1) = calc_frm_masterdata.Range(def_name).Cells(counter, 2)
        frm_Order_KatD.lb_dkat.list(frm_Order_KatD.lb_dkat.listCount - 1, 2) = calc_frm_masterdata.Range(def_name).Cells(counter, 3)
        frm_Order_KatD.lb_dkat.list(frm_Order_KatD.lb_dkat.listCount - 1, 3) = calc_frm_masterdata.Range(def_name).Cells(counter, 4)
        frm_Order_KatD.lb_dkat.list(frm_Order_KatD.lb_dkat.listCount - 1, 4) = calc_frm_masterdata.Range(def_name).Cells(counter, 5)
        frm_Order_KatD.lb_dkat.list(frm_Order_KatD.lb_dkat.listCount - 1, 5) = calc_frm_masterdata.Range(def_name).Cells(counter, 6)
    Next counter
    
    frm_Order_KatD.Show
End Sub

'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'2.4. Zahl Eigenschaften
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Private Sub tb_min_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False And Me.lb_cat.listindex >= 0 And (IsNumeric(Me.tb_min.text) Or Me.tb_min.text = "") Then
        click = True
        If VBA.IsNumeric(Me.lbl_kat_id_value.Caption) Then
            Dim list_index As Integer
            Dim wert As String
            
            list_index = Me.lb_cat.listindex
            
            If Me.tb_min.text = "" Then
                wert = "NULL"
            Else
                wert = Me.tb_min.text
            End If
            
            Call SQL_Abfragen.Update_Kategorien(Me.lb_cat.list(list_index, 0), "Min_Value", wert)
            Call SQL_Abfragen.Get_AllKategorien
            
            Me.lb_cat.listindex = list_index
        End If
        
        click = False
    End If
End Sub

Private Sub tb_min_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
            If Me.tb_max.value <> "" Then
'                If VBA.CDbl(VBA.Left(Me.tb_max.value, Me.tb_max.SelStart) + VBA.Chr(KeyAscii) + VBA.Right(Me.tb_max.value, VBA.Len(Me.tb_max) - Me.tb_max.SelStart - Me.tb_max.SelLength)) < VBA.CDbl(Me.tb_min.text) Then
'                    KeyAscii = 0
'                End If
                If VBA.CDbl(VBA.Left(Me.tb_min.value, Me.tb_min.SelStart) + VBA.Chr(KeyAscii) + VBA.Right(Me.tb_min.value, VBA.Len(Me.tb_min) - Me.tb_min.SelStart - Me.tb_min.SelLength)) >= VBA.CDbl(Me.tb_max.text) Then
                    Me.tb_min.ForeColor = &H2411B9
                Else
                    Me.tb_min.ForeColor = &H40A621
                End If
            Else
                Me.tb_min.ForeColor = &H80000008
            End If
        Case 44 'Dezimalkomma nur einmal zul|fffd|ssig
            If InStr(1, Me.tb_min.value, ",") > 0 Then KeyAscii = 0
        Case 45 'Minuszeichen nur als erstes Zeichen zul|fffd|ssig
            If Me.tb_min.SelStart <> 0 Then KeyAscii = 0
            
        Case 43 'Pluszeichen nur als erstes Zeichen zul|fffd|ssig
            If Len(tb_min) > 0 Then KeyAscii = 0
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub tb_max_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False And Me.lb_cat.listindex >= 0 And (IsNumeric(Me.tb_max.text) Or Me.tb_max.text = "") Then
        click = True
        If VBA.IsNumeric(Me.lbl_kat_id_value.Caption) Then
            Dim list_index As Integer
            Dim wert As String
            
            list_index = Me.lb_cat.listindex
            
            If Me.tb_max.text = "" Then
                wert = "NULL"
            Else
                wert = Me.tb_max.text
            End If
            
            Call SQL_Abfragen.Update_Kategorien(Me.lb_cat.list(list_index, 0), "Max_Value", wert)
            Call SQL_Abfragen.Get_AllKategorien
            
            Me.lb_cat.listindex = list_index
        End If
        
        click = False
    End If
End Sub

Private Sub tb_max_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
            If Me.tb_min.value <> "" Then
'                If VBA.CDbl(VBA.Left(Me.tb_max.value, Me.tb_max.SelStart) + VBA.Chr(KeyAscii) + VBA.Right(Me.tb_max.value, VBA.Len(Me.tb_max) - Me.tb_max.SelStart - Me.tb_max.SelLength)) < VBA.CDbl(Me.tb_min.text) Then
'                    KeyAscii = 0
'                End If
                If VBA.CDbl(VBA.Left(Me.tb_max.value, Me.tb_max.SelStart) + VBA.Chr(KeyAscii) + VBA.Right(Me.tb_max.value, VBA.Len(Me.tb_max) - Me.tb_max.SelStart - Me.tb_max.SelLength)) <= VBA.CDbl(Me.tb_min.text) Then
                    Me.tb_max.ForeColor = &H2411B9
                Else
                    Me.tb_max.ForeColor = &H40A621
                End If
            Else
                Me.tb_max.ForeColor = &H80000008
            End If
        Case 44 'Dezimalkomma nur einmal zul|fffd|ssig
            If InStr(1, Me.tb_max.value, ",") > 0 Then KeyAscii = 0
        Case 45 'Minuszeichen nur als erstes Zeichen zul|fffd|ssig
            If Me.tb_min.SelStart <> 0 Then KeyAscii = 0
            
        Case 43 'Pluszeichen nur als erstes Zeichen zul|fffd|ssig
            If Len(tb_max) > 0 Then KeyAscii = 0
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub tb_komma_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False And Me.lb_cat.listindex >= 0 And (IsNumeric(Me.tb_komma.text) Or Me.tb_komma.text = "") Then
        click = True
        If VBA.IsNumeric(Me.lbl_kat_id_value.Caption) Then
            Dim list_index As Integer

            list_index = Me.lb_cat.listindex
            
            Call SQL_Abfragen.Update_Kategorien(Me.lb_cat.list(list_index, 0), "Kommastellen", Me.tb_komma.text)
            Call SQL_Abfragen.Get_AllKategorien
            
            Me.lb_cat.listindex = list_index
        End If
        
        click = False
    End If
End Sub

Private Sub tb_komma_Change()
    Call make_zahl_beispiel
End Sub

Private Sub tb_komma_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
            If VBA.CDbl(Me.tb_komma.text + VBA.Chr(KeyAscii)) > 4 Then
                KeyAscii = 0
            End If
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub cbb_einheit_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False And Me.lb_cat.listindex >= 0 And Me.cbb_einheit.listindex >= 0 Then
        If VBA.IsNumeric(Me.lbl_kat_id_value.Caption) Then
            Dim list_index As Integer

            list_index = Me.lb_cat.listindex
            
            Call SQL_Abfragen.Update_Kategorien(Me.lb_cat.list(list_index, 0), "FK_Einheit", Me.cbb_einheit.Column(0))
            Call SQL_Abfragen.Get_AllKategorien
            
            Me.lb_cat.listindex = list_index
        End If
    End If
End Sub

Private Sub cbb_einheit_Change()
    Call make_zahl_beispiel
End Sub

'********************************************************************
Private Sub cbb_groupe_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False And Me.lb_cat.listindex >= 0 And IsNumeric(Me.tb_komma.text) Then
        click = True
        If VBA.IsNumeric(Me.lbl_kat_id_value.Caption) Then
            Dim list_index As Integer

            list_index = Me.lb_cat.listindex
            
            Call SQL_Abfragen.Update_Kategorien(Me.lb_cat.list(list_index, 0), "Summierung", Me.cbb_groupe.text)
            Call SQL_Abfragen.Get_AllKategorien
            
            Me.lb_cat.listindex = list_index
        End If
        
        click = False
    End If
End Sub

'####################################################################
'3. Kostenarten
'####################################################################
Private Sub tb_cost_shortname_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False And Me.lb_costs.listindex >= 0 And Me.lbl_cost_select_index_value.Caption <> "ID" Then
        click = True
        If VBA.IsNumeric(Me.lbl_cost_select_index_value.Caption) Then
            Dim list_index As Integer

            list_index = Me.lb_costs.listindex

            Call SQL_Abfragen.Update_Kostenarten(Me.lb_costs.list(list_index, 0), "FK_Language_Shortname", VBA.Replace(Me.tb_cost_shortname.text, "'", "''"))
            Call SQL_Abfragen.Get_AllKostenarten(True)
            
            Me.lb_costs.RowSource = "frm_Kostenarten"
            Me.lb_costs.listindex = list_index
            Call select_selected_Costitem
        End If
        
        click = False
    End If
End Sub

Private Sub tb_cost_name_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False And Me.lb_costs.listindex >= 0 And Me.lbl_cost_select_index_value.Caption <> "ID" Then
        click = True
        If VBA.IsNumeric(Me.lbl_cost_select_index_value.Caption) Then
            Dim list_index As Integer

            list_index = Me.lb_costs.listindex

            Call SQL_Abfragen.Update_Kostenarten(Me.lb_costs.list(list_index, 0), "FK_Language_Name", VBA.Replace(Me.tb_cost_name.text, ",", "."))
            Call SQL_Abfragen.Get_AllKostenarten(True)
            
            Me.lb_costs.RowSource = "frm_Kostenarten"
            Me.lb_costs.listindex = list_index
            Call select_selected_Costitem
        End If
        
        click = False
    End If
End Sub

''********************************************************************
'Private Sub cbb_cost_cat_Change()
'    If Me.tb_cost_shortname.text <> "" And Me.tb_cost_name.text <> "" And Me.cbb_cost_cat.text <> "" Then
'        Me.btn_add_cost.Enabled = True
'    Else
'        Me.btn_add_cost.Enabled = False
'    End If
'End Sub

'********************************************************************
Private Sub lb_costs_Click()
    If click = False Then
        On Error Resume Next
        click = True

        Me.lb_cost_language.listindex = Me.lb_costs.listindex
        Me.lbl_cost_select_index_value.Caption = Me.lb_costs.list(Me.lb_costs.listindex, 0)

        Dim list_index As Integer

        list_index = Me.lb_costs.listindex
        Call setCostTypesActivity(True)

        Me.lbl_res_select_index_value.Caption = Me.lb_costs.list(list_index, 0)

        Me.tb_cost_shortname.text = Me.lb_costs.list(list_index, 1)
        Me.tb_cost_name.text = Me.lb_costs.list(list_index, 2)
        Me.tb_cost_name_language.text = Me.lb_costs.list(list_index, 2)
        Me.cbb_cost_cat.text = Me.lb_costs.list(list_index, 3)

        Me.lb_costs.listindex = list_index
        Me.lb_cost_language.listindex = list_index
        click = False
    End If
End Sub

'********************************************************************
Private Sub btn_add_cost_Click()
    frm_addCosttype.Show
    
    Call setCostTypesActivity(True)
End Sub

Private Sub btn_del_cost_Click()
    If click = False And Me.lb_costs.listindex >= 0 And Me.lbl_cost_select_index_value.Caption <> "ID" Then
        click = True
        Dim list_index As Integer
        
        list_index = Me.lb_costs.listindex
        If Me.lb_costs.list(list_index, 3) <> "auto" Then
            If VBA.IsNumeric(Me.lbl_cost_select_index_value.Caption) Then
                Call SQL_Abfragen.Update_Kostenarten(Me.lb_costs.list(list_index, 0), "active", "False")
                Call SQL_Abfragen.Update_Kostenarten(Me.lb_costs.list(list_index, 0), "FK_Language_Name", Me.lb_costs.list(list_index, 2) & " - gel|fffd|scht")
                
                Call SQL_Abfragen.Get_AllKostenarten(True)
            End If
            
            Me.tb_cost_shortname.text = ""
            Me.tb_cost_name.text = ""
        Else
            MsgBox nlc_language.FindValue("SMessage_DelAutoCost"), vbInformation + vbOKOnly
        End If
        
        Call setCostTypesActivity(False)
        
        click = False
    End If
End Sub
'
'Private Sub btn_cost_expand_language_Click()
'    Call btn_expand_language_Click
'End Sub
'
'####################################################################
'4. Ressourcen
'####################################################################
Private Sub tb_res_shortname_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False And Me.lb_resources.listindex >= 0 And Me.lbl_res_select_index_value.Caption <> "ID" Then
        click = True
        
        Dim list_index As Integer
        Dim listindex As Integer
    
        listindex = Me.cbb_res_group.listindex
        list_index = Me.lb_resources.listindex
        
        If VBA.IsNumeric(Me.lb_resources.list(list_index, 0)) Then
            Call SQL_Abfragen.Update_Ressourcearten(Me.lb_resources.list(list_index, 0), "FK_Language_Shortname", VBA.Replace(Me.tb_res_shortname.text, "'", "''"))
            Call SQL_Abfragen.Get_AllRessourcenarten
            Call generate_cbb_resgroup
        End If
        
        Me.lb_resources.RowSource = "frm_Ressourcenarten"
        Me.lb_resources.listindex = list_index
        Me.cbb_res_group.listindex = listindex
        Call select_selected_item

        click = False
    End If
End Sub

Private Sub tb_res_name_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False And Me.lb_resources.listindex >= 0 And Me.lbl_res_select_index_value.Caption <> "ID" Then
        click = True
        Dim list_index As Integer
        Dim listindex As Integer
    
        listindex = Me.cbb_res_group.listindex
        list_index = Me.lb_resources.listindex
        
        If VBA.IsNumeric(Me.lb_resources.list(list_index, 0)) Then
            Call SQL_Abfragen.Update_Ressourcearten(Me.lb_resources.list(list_index, 0), "FK_Language_Name", VBA.Replace(Me.tb_res_name.text, "'", "''"))
            Call SQL_Abfragen.Get_AllRessourcenarten
            Call generate_cbb_resgroup
        End If
        
        Me.lb_resources.RowSource = "frm_Ressourcenarten"
        Me.cbb_res_group.listindex = listindex
        Me.lb_resources.listindex = list_index
        Call select_selected_item
        
        click = False
    End If
End Sub

Private Sub tb_kostensatz_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False And Me.lb_resources.listindex >= 0 And Me.lbl_res_select_index_value.Caption <> "ID" Then
        click = True
        Dim list_index As Integer
        
        list_index = Me.lb_resources.listindex
        
        If VBA.IsNumeric(Me.lbl_res_select_index_value.Caption) And VBA.IsNumeric(Me.tb_kostensatz.text) Then
            Call SQL_Abfragen.Update_Ressourcearten(Me.lb_resources.list(list_index, 0), "Kostensatz", VBA.Replace(VBA.Round(Me.tb_kostensatz.text, 2), ",", "."))
            Call SQL_Abfragen.Get_AllRessourcenarten
        End If
        
        Me.lb_resources.RowSource = "frm_Ressourcenarten"
        Me.lb_resources.listindex = list_index
        Call select_selected_item

        click = False
    End If
End Sub

Private Sub tb_kostensatz_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
        Case 44 'Dezimalkomma nur einmal zul|fffd|ssig
            If InStr(1, tb_kostensatz, ",") > 0 Then KeyAscii = 0
        Case Else
            KeyAscii = 0
    End Select
End Sub

'********************************************************************
Private Sub cbb_kostenart_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False And Me.cbb_kostenart.listindex >= 0 And Me.lb_resources.listindex >= 0 And Me.lbl_res_select_index_value.Caption <> "ID" Then
        click = True
        If VBA.IsNumeric(Me.lbl_res_select_index_value.Caption) And VBA.IsNumeric(Me.cbb_kostenart.listindex > 0) Then
            Dim list_index As Integer

            list_index = Me.lb_resources.listindex
            
            ress_kostenart = Me.cbb_kostenart.listindex
            
            Call SQL_Abfragen.Update_Ressourcearten(Me.lb_resources.list(list_index, 0), "FK_Kostenarten", Me.cbb_kostenart.Column(0))
            Call SQL_Abfragen.Get_AllRessourcenarten
            
            Me.lb_resources.RowSource = "frm_Ressourcenarten"
            Me.lb_resources.listindex = list_index
            Me.cbb_kostenart.listindex = ress_kostenart
            
            Call select_selected_item
        End If
        click = False
    End If
End Sub

Private Sub cbb_res_group_Change()
    If click = False Then
        click = True
        
        Dim counter As Integer
        
        If Me.cbb_res_group.text <> "" Then
            Me.cbb_kostenart.BackColor = &H80000005
            Me.cbb_kostenart.Locked = False
            Me.tb_kostensatz.BackColor = &H80000005
            Me.tb_kostensatz.Locked = False
        Else
            Me.cbb_kostenart.BackColor = &H8000000F
            Me.cbb_kostenart.Locked = True
            Me.tb_kostensatz.BackColor = &H8000000F
            Me.tb_kostensatz.Locked = True
            Me.cbb_kostenart.listindex = -1
            Me.tb_kostensatz.text = ""
        End If
        
        If Me.lb_resources.listindex >= 0 And Me.lbl_res_select_index_value.Caption <> "ID" Then
            If VBA.IsNumeric(Me.lbl_res_select_index_value.Caption) And VBA.IsNumeric(Me.cbb_kostenart.listindex > 0) Then
                Dim list_index As Integer
    
                list_index = Me.lb_resources.listindex
                
                Call SQL_Abfragen.Update_Ressourcearten(Me.lb_resources.list(list_index, 0), "FK_Ressourcenarten", Me.cbb_res_group.Column(0))
                Call SQL_Abfragen.Get_AllRessourcenarten
                
                Me.lb_resources.listindex = list_index
            End If
        End If
        
        Call select_selected_item
        
        click = False
    End If
End Sub

Private Sub select_selected_item()
    If Me.lb_resources.listindex = -1 Then Exit Sub
    
    Dim counter As Integer
    
    For counter = 0 To Me.lb_resources.listCount - 1 Step 1
        If Me.lbl_res_select_index_value.Caption = Me.lb_resources.list(counter, 0) Then
            Me.lb_resources.listindex = counter
            Exit For
        End If
    Next counter
End Sub

Private Sub select_selected_Costitem()
    If Me.lb_costs.listindex = -1 Then Exit Sub
    
    Dim counter As Integer
    
    For counter = 0 To Me.lb_costs.listCount - 1 Step 1
        If Me.lbl_cost_select_index_value.Caption = Me.lb_costs.list(counter, 0) Then
            Me.lb_costs.listindex = counter
            Exit For
        End If
    Next counter
End Sub

'Private Sub cbb_res_group_Exit(ByVal Cancel As MSForms.ReturnBoolean)
'    If click = False And Me.lb_resources.listindex >= 0 And Me.lbl_res_select_index_value.Caption <> "ID" Then
'        click = True
'        If VBA.IsNumeric(Me.lbl_res_select_index_value.Caption) And VBA.IsNumeric(Me.cbb_kostenart.listindex > 0) Then
'            Dim list_index As Integer
'
'            list_index = Me.lb_resources.listindex
'
'            Call SQL_Abfragen.Update_Ressourcearten(Me.lb_resources.List(list_index, 0), "FK_Ressourcenarten", Me.cbb_res_group.Column(0))
'            Call SQL_Abfragen.Get_AllRessourcenarten
'
'            Me.lb_resources.listindex = list_index
'
'            If Me.tb_res_shortname.text <> "" And Me.tb_res_name.text <> "" And Me.cbb_kostenart.text <> "" Then
'                Me.btn_add_kat.Enabled = True
'            Else
'                Me.btn_add_kat.Enabled = False
'            End If
'        End If
'        click = False
'    End If
'
'    If Me.tb_res_shortname.text <> "" And Me.tb_res_name.text <> "" And Me.tb_kostensatz.text <> "" And Me.cbb_kostenart.text <> "" Then
'        Me.btn_add_res.Enabled = True
'    Else
'        Me.btn_add_res.Enabled = False
'    End If
'End Sub
'
'Private Sub cbb_res_language_Change()
'    Dim sort_col As String
'    Dim col_counter As Integer
'
'    col_counter = 1
'    Range("aktuelle_frm_sprache").Value = Me.cbb_res_language.text
'    Me.cbb_cost_language.text = Me.cbb_res_language.text
'    Me.cbb_language.text = Me.cbb_res_language.text
'
'    sort_col = nlc_functions.get_language_col(MD_RA.name, Range("aktuelle_frm_sprache").Value)
'
'    While MD_RA.Cells(1, col_counter).Value <> ""
'        If col_width = "" Then
'            If col_counter = VBA.CInt(sort_col) Then
'                col_width = "190 Pt"
'            Else
'                col_width = "0 Pt"
'            End If
'        Else
'            If col_counter = VBA.CInt(sort_col) Then
'                col_width = col_width & "; 95 Pt"
'            Else
'                col_width = col_width & "; 0 Pt"
'            End If
'        End If
'        col_counter = col_counter + 1
'    Wend
'
'    Me.lb_res_language.ColumnWidths = col_width
'End Sub
'********************************************************************
Private Sub lb_resources_Click()
    If click = False Then
        On Error Resume Next
        click = True
        
        Me.lb_res_language.listindex = Me.lb_resources.listindex
        Me.lbl_kat_id_value.Caption = Me.lb_resources.list(Me.lb_resources.listindex, 0)

        Dim list_index As Integer
        
        list_index = Me.lb_resources.listindex
        Call setResTypesActivity(True)
        
        Me.lbl_res_select_index_value.Caption = Me.lb_resources.list(list_index, 0)

        Me.tb_res_shortname.text = Me.lb_resources.list(list_index, 1)
        Me.tb_res_name.text = Me.lb_resources.list(list_index, 2)
        Me.tb_res_name_language.text = Me.lb_resources.list(list_index, 2)
        Me.tb_kostensatz.text = Me.lb_resources.list(list_index, 3)
        
        Me.tb_verf.text = Me.lb_resources.list(list_index, 6)
        
        If VBA.IsNull(Me.lb_resources.list(list_index, 4)) Or Me.lb_resources.list(list_index, 4) = "" Then
            Me.cbb_kostenart.listindex = -1
        Else
            Me.cbb_kostenart.text = Me.lb_resources.list(list_index, 4)
        End If
        
        Dim counter As Integer
        
        counter = 0
        Do While counter <= Me.cbb_res_group.listCount
            If Me.cbb_res_group.list(counter, 0) = VBA.CStr(Me.lb_resources.list(list_index, 5)) Then
                Me.cbb_res_group.listindex = counter
                Exit Do
            End If
            counter = counter + 1
        Loop
        
        If Me.cbb_kostenart.text <> "" Then
            Me.cbb_kostenart.BackColor = &H80000005
            Me.cbb_kostenart.Locked = False
            Me.tb_kostensatz.BackColor = &H80000005
            Me.tb_kostensatz.Locked = False
            Me.tb_res_shortname.text = VBA.Right(Me.tb_res_shortname.text, VBA.Len(Me.tb_res_shortname) - 5)
            Me.tb_res_name.text = VBA.Right(Me.tb_res_name.text, VBA.Len(Me.tb_res_name) - 5)
            Me.cbb_res_group.visible = True
            Me.lbl_ressgroupe.visible = True
        Else
            Me.cbb_kostenart.BackColor = &H8000000F
            Me.cbb_kostenart.Locked = True
            Me.tb_kostensatz.BackColor = &H8000000F
            Me.tb_kostensatz.Locked = True
            Me.cbb_res_group.visible = False
            Me.lbl_ressgroupe.visible = False
        End If
        
        Me.lb_resources.RowSource = "frm_Ressourcenarten"
        
        Me.lb_resources.listindex = list_index
        Me.lb_res_language.listindex = list_index
        ress_kostenart = Me.cbb_kostenart.listindex
        
        click = False
    End If
End Sub

'Private Sub lb_res_language_Click()
'    Me.lb_resources.listindex = Me.lb_res_language.listindex
'End Sub
'********************************************************************
Private Sub btn_add_res_Click()
    frm_addRestype.Show
    Call setResTypesActivity(False)
End Sub

Private Sub btn_del_res_Click()
    If click = False And Me.lb_resources.listindex >= 0 And Me.lbl_res_select_index_value.Caption <> "ID" Then
        click = True
        Dim list_index As Integer
        
        list_index = Me.lb_resources.listindex
        
        If Me.tb_kostensatz.Locked = True And Me.cbb_kostenart.Locked = True Then
        'Ressourcengruppe
            If list_index < Me.lb_resources.listCount - 1 Then
                If Me.lb_resources.list(list_index + 1, 5) = Me.lb_resources.list(list_index, 0) Then
                    'Ressourcengruppe hat mindestens eine Ressourcenart zugewiesen
                    If MsgBox(nlc_language.FindValue("SMassage_DelRessgroup"), vbQuestion + vbYesNo) = vbYes Then
                        Dim counter As Integer
                        
                        For counter = list_index + 1 To Me.lb_resources.listCount - 1 Step 1
                            If Me.lb_resources.list(counter, 5) = Me.lb_resources.list(list_index, 0) Then
                                Call SQL_Abfragen.Update_Ressourcearten(Me.lb_resources.list(counter, 0), "active", "False")
                                Call SQL_Abfragen.Update_Ressourcearten(Me.lb_resources.list(counter, 0), "FK_Language_Name", VBA.LTrim(Me.lb_resources.list(counter, 2)) & " - gel|fffd|scht")
                            End If
                        Next counter
                    End If
                End If
            End If
        End If
        
        If VBA.IsNumeric(Me.lb_resources.list(list_index, 0)) Then
            Call SQL_Abfragen.Update_Ressourcearten(Me.lb_resources.list(list_index, 0), "active", "False")
            Call SQL_Abfragen.Update_Ressourcearten(Me.lb_resources.list(list_index, 0), "FK_Language_Name", VBA.LTrim(Me.lb_resources.list(list_index, 2)) & " - gel|fffd|scht")
            Call SQL_Abfragen.Get_AllRessourcenarten
            Call generate_cbb_resgroup
        End If
        
        Me.lb_resources.RowSource = "frm_Ressourcenarten"
        Me.tb_res_shortname.text = ""
        Me.tb_res_name.text = ""
        Me.tb_kostensatz.text = ""
        Me.cbb_kostenart.listindex = -1
        Me.cbb_res_group.listindex = -1
        
        Call setResTypesActivity(False)
        
        click = False
    End If
End Sub

'Private Sub btn_res_expand_language_Click()
'    Call btn_expand_language_Click
'End Sub
'
''####################################################################
''5. Diagrammgrafiken
''####################################################################
Private Sub cbb_grafiken_Change()
    On Error Resume Next
    If click = False Then
        click = True
        If lbl_grafik_select_index_value.Caption <> Me.cbb_grafiken.listindex Then
            If lbl_saved_grafik_value.Caption = "false" Then
                If MsgBox(nlc_language.FindValue("SMessage_SaveGrafik"), vbQuestion + vbYesNo) = vbYes Then
                    Call btn_save_grafik_Click
                End If
                lbl_saved_grafik_value.Caption = "true"
            End If
        End If

'        Select Case Me.cbb_grafiken.listindex
'            Case 0:
'                img_vorschau.Picture = calc_master.btn_grafik_1.Picture
'            Case 1:
'                img_vorschau.Picture = calc_master.btn_grafik_2.Picture
'            Case 2:
'                img_vorschau.Picture = calc_master.btn_grafik_3.Picture
'            Case 3:
'                img_vorschau.Picture = calc_master.btn_grafik_4.Picture
'            Case 4:
'                img_vorschau.Picture = calc_master.btn_grafik_5.Picture
'            Case 5:
'                img_vorschau.Picture = calc_master.btn_grafik_6.Picture
'            Case 6:
'                img_vorschau.Picture = calc_master.btn_grafik_7.Picture
'            Case 7:
'                img_vorschau.Picture = calc_master.btn_grafik_8.Picture
'            Case 8:
'                img_vorschau.Picture = calc_master.btn_grafik_9.Picture
'            Case 9:
'                img_vorschau.Picture = calc_master.btn_grafik_10.Picture
'        End Select
        
        Me.tb_grafikname.text = Me.cbb_grafiken.text
        lbl_grafik_select_index_value.Caption = Me.cbb_grafiken.listindex
        
        If VBA.IsNumeric(lbl_grafik_select_index_value.Caption) Then
            'img_vorschau.Pi
            img_vorschau.Picture = LoadPicture(ActiveWorkbook.Path & "\Hintergrundgrafiken\" & calc_master.Cells(8, 15 + lbl_grafik_select_index_value.Caption).value)
        End If
        
        click = False
    End If
End Sub
'********************************************************************
Private Sub tb_grafikname_Change()
    If click = False Then
        click = True
        
        If Me.tb_grafikname.text <> "" Then
            calc_master.Cells(3, Me.cbb_grafiken.listindex + 15).value = Me.tb_grafikname.text
        End If
        
        click = False
    End If
End Sub
'********************************************************************
Private Sub btn_del_grafik_Click()
'    Select Case Me.cbb_grafiken.listindex
'        Case 0:
'            calc_master.btn_grafik_1.Picture = Nothing
'        Case 1:
'            calc_master.btn_grafik_2.Picture = Nothing
'        Case 2:
'            calc_master.btn_grafik_3.Picture = Nothing
'        Case 3:
'            calc_master.btn_grafik_4.Picture = Nothing
'        Case 4:
'            calc_master.btn_grafik_5.Picture = Nothing
'        Case 5:
'            calc_master.btn_grafik_6.Picture = Nothing
'        Case 6:
'            calc_master.btn_grafik_7.Picture = Nothing
'        Case 7:
'            calc_master.btn_grafik_8.Picture = Nothing
'        Case 8:
'            calc_master.btn_grafik_9.Picture = Nothing
'        Case 9:
'            calc_master.btn_grafik_10.Picture = Nothing
'    End Select
'    Me.img_vorschau.Picture = Nothing

    calc_master.Cells(8, 15 + lbl_grafik_select_index_value.Caption).value = ""
    img_vorschau.Picture = Nothing
End Sub

Private Sub btn_load_grafik_Click()
    Dim XObj As Object
    Dim Logo As String
    Dim Icon As String
    Dim x As Integer
    Dim Y As Integer

    Logo = ""
    ChDrive ActiveWorkbook.Path & "\Hintergrundgrafiken\"
    ChDir ActiveWorkbook.Path & "\Hintergrundgrafiken\"
    Logo = Application.GetOpenFilename("Rule Icon (*.jpg; *.bmp; *.gif),*.jpg;*.bmp;*gif", , "Import chart-background image")
    If Logo = "" Or Logo = "Falsch" Then Exit Sub

    img_vorschau.Picture = LoadPicture(Logo)
    lbl_saved_grafik_value.Caption = "false"
    Logo = Right(Logo, Len(Logo) - VBA.InStrRev(Logo, "\"))
    Me.lbl_path.Caption = Logo
End Sub

Private Sub btn_save_grafik_Click()
'    Select Case lbl_grafik_select_index_value.Caption
'        Case 0:
'            calc_master.btn_grafik_1.Picture = img_vorschau.Picture
'        Case 1:
'            calc_master.btn_grafik_2.Picture = img_vorschau.Picture
'        Case 2:
'            calc_master.btn_grafik_3.Picture = img_vorschau.Picture
'        Case 3:
'            calc_master.btn_grafik_4.Picture = img_vorschau.Picture
'        Case 4:
'            calc_master.btn_grafik_5.Picture = img_vorschau.Picture
'        Case 5:
'            calc_master.btn_grafik_6.Picture = img_vorschau.Picture
'        Case 6:
'            calc_master.btn_grafik_7.Picture = img_vorschau.Picture
'        Case 7:
'            calc_master.btn_grafik_8.Picture = img_vorschau.Picture
'        Case 8:
'            calc_master.btn_grafik_9.Picture = img_vorschau.Picture
'        Case 9:
'            calc_master.btn_grafik_10.Picture = img_vorschau.Picture
'    End Select
    
    If VBA.IsNumeric(lbl_grafik_select_index_value.Caption) Then
        calc_master.Cells(8, 15 + lbl_grafik_select_index_value.Caption).value = Me.lbl_path.Caption
    End If
End Sub

''####################################################################
''6. Einheiten
''####################################################################

Private Sub lb_einheiten_Click()
    If click = False Then
        On Error Resume Next
        click = True
        
        Dim list_index As Integer
        
        list_index = Me.lb_einheiten.listindex
        Call setUnitActivity(True)
        
        Me.lb_einheit_language.listindex = list_index
        Me.lbl_einheit_select_index_value.Caption = Me.lb_einheiten.list(list_index, 0)
        Me.tb_Einheit_name.text = Me.lb_einheiten.list(list_index, 1)
        
        Me.lb_einheiten.listindex = list_index
        Me.lb_einheit_language.listindex = list_index
        
        click = False
    End If
End Sub

Private Sub tb_Einheit_name_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False And Me.lb_einheiten.listindex >= 0 And Me.lbl_einheit_select_index_value.Caption <> "ID" Then
        click = True
        Dim list_index As Integer
        
        list_index = Me.lb_einheiten.listindex
        
        If VBA.IsNumeric(Me.lb_einheiten.list(list_index, 0)) Then
            Call SQL_Abfragen.Update_Einheiten(Me.lb_einheiten.list(list_index, 0), "FK_Language_Name", VBA.Replace(Me.tb_Einheit_name.text, "'", "''"))
            Call SQL_Abfragen.Get_AllEinheiten
            Call LoadRCEinheit
        End If
        
        Me.lb_einheiten.RowSource = "frm_Einheit"
        Me.lb_einheiten.listindex = list_index
        
        click = False
    End If
End Sub

Private Sub btn_add_einheit_Click()
    If click = False Then
        click = True
    
        Dim cbb_ceinheitValue As String
        Dim cbb_reinheitValue As String
        
        cbb_ceinheitValue = cbb_cost_einheit.value
        cbb_reinheitValue = cbb_ress_einheit.value
    
        frm_AddEinheit.Show
        
        cbb_cost_einheit.value = cbb_ceinheitValue
        cbb_ress_einheit.value = cbb_reinheitValue
        
        Call setUnitActivity(False)
        
        click = False
    End If
End Sub

Private Sub btn_del_einheit_Click()
    If click = False And Me.lb_einheiten.listindex >= 0 And Me.lbl_einheit_select_index_value.Caption <> "ID" Then
        click = True
        Dim list_index As Integer
        
        list_index = Me.lb_einheiten.listindex
        
        If VBA.IsNumeric(Me.lb_einheiten.list(list_index, 0)) Then
            Call SQL_Abfragen.Update_Einheiten(Me.lb_einheiten.list(list_index, 0), "active", "0")
            Call SQL_Abfragen.Update_Einheiten(Me.lb_einheiten.list(list_index, 0), "FK_Language_Name", Me.lb_einheiten.list(list_index, 1) & " - gel|fffd|scht")
            Call SQL_Abfragen.Get_AllEinheiten
        End If
        
        Me.tb_Einheit_name.text = ""
        Call setUnitActivity(False)
        Call LoadRCEinheit
        click = False
    End If
End Sub

''####################################################################
''7. Userverwaltung
''####################################################################

Private Sub tb_username_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False And Me.lb_users.listindex >= 0 And Me.lbl_user_select_index_value.Caption <> "ID" Then
        click = True
        Dim list_index As Integer
        
        list_index = Me.lb_users.listindex
        
        Call SQL_Abfragen.Update_User(lbl_user_select_index_value.Caption, "Username", VBA.Replace(VBA.LCase(Me.tb_username.text), "'", "''"))
        Call SQL_Abfragen.Get_AllUsers
        
        Me.lb_users.listindex = list_index
        
        Call Get_User_PFType_DropDown(calc_master.Cells(31, 6).value)
        
        click = False
    End If
    
'    If Me.tb_username.text <> "" Then
'        Me.btn_user_add.Enabled = True
'    Else
'        Me.btn_user_add.Enabled = False
'    End If
End Sub

Private Sub lb_users_Click()
    If click = False Then
        On Error Resume Next
        click = True
        
        Dim list_index As Integer
        
        list_index = Me.lb_users.listindex
        Call setUserActivity(True)
        
        Me.lbl_user_select_index_value.Caption = Me.lb_users.list(list_index, 0)
        Me.tb_username.text = Me.lb_users.list(list_index, 0)
        
        'Ausgew|fffd|hlte Projekttypen laden
        Call SQL_Abfragen.Get_User_PFType_List(Me.lbl_user_select_index_value.Caption, Me.lb_pftypes)
        
        Me.lb_users.listindex = list_index
'        Me.btn_user_add.Enabled = True
        
        click = False
    End If
End Sub

Private Sub btn_user_add_Click()
    frm_addUser.Show
    
    Call setUserActivity(False)
End Sub

Private Sub btn_user_del_Click()
    If click = False And Me.lb_users.listindex >= 0 And Me.lbl_user_select_index_value.Caption <> "ID" Then
        click = True
        Dim list_index As Integer
        
        list_index = Me.lb_users.listindex
        
        If MsgBox(nlc_language.FindValue("SMessage_DelUser1") & Me.lb_users.list(list_index, 0) & nlc_language.FindValue("SMessage_DelUser2") & Chr(10) & _
                   nlc_language.FindValue("SMessage_DelUser3"), vbQuestion + vbYesNo, nlc_language.FindValue("SMessage_DelUser4")) = vbYes Then
            If SQL_Abfragen.Delete_User(Me.lbl_user_select_index_value.Caption) = True Then
                Call SQL_Abfragen.Get_AllUsers
                Me.lb_users.RowSource = "frm_User"
            Else
                MsgBox nlc_language.FindValue("SMessage_ErrDelUser")
            End If
        End If
        
        Me.tb_username.text = ""
        Call setUserActivity(False)
        
        click = False
    End If
End Sub

Private Sub lb_pftypes_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If SQL_Abfragen.Insert_Users_PFType(Me.lbl_user_select_index_value.Caption, Me.lb_pftypes) = False Then
        MsgBox nlc_language.FindValue("SMessage_ErrWriteDB")
    Else
        Call SQL_Abfragen.Get_User_PFType_DropDown(calc_master.Cells(31, 6).value)
    End If
End Sub

Private Sub generate_pftype_list()
    Me.lb_pftypes.clear
    
    Dim i As Integer
    i = 4
    
    While calc_frm_masterdata.Cells(i, 22).value <> ""
        If calc_frm_masterdata.Cells(i, 27).value = 29 Then
            Me.lb_pftypes.addItem calc_frm_masterdata.Cells(i, 22).value
            Me.lb_pftypes.list(Me.lb_pftypes.listCount - 1, 1) = calc_frm_masterdata.Cells(i, 24).value
        End If
        
        i = i + 1
    Wend
End Sub

Public Sub generate_cbb_resgroup()
    Me.cbb_res_group.clear
    Dim counter As Integer
    
    counter = 4
    
    'Me.cbb_res_group.AddItem ""
    While calc_frm_masterdata.Cells(counter, 35).value <> ""
        If calc_frm_masterdata.Cells(counter, 38).value = "" Then
            Me.cbb_res_group.addItem calc_frm_masterdata.Cells(counter, 35).value
            Me.cbb_res_group.list(Me.cbb_res_group.listCount - 1, 1) = calc_frm_masterdata.Cells(counter, 37).value
        End If
        counter = counter + 1
    Wend
    If Me.cbb_res_group.listCount > 0 Then
        Me.cbb_res_group.listindex = 0
    End If
End Sub


''####################################################################
''8. Sonstiges
''####################################################################

Private Sub setUserFieldsActivity(Enabled As Boolean)
    If Enabled Then
        Me.tb_shortname.Enabled = True
        Me.tb_shortname.BackColor = &HFFFFFF
        Me.tb_catname.Enabled = True
        Me.tb_catname.BackColor = &HFFFFFF
        Me.tb_user_colwidth.Enabled = True
        Me.tb_user_colwidth.BackColor = &HFFFFFF
        Me.chb_achsen_relevant.Enabled = True
        Me.chb_achsen_relevant.BackColor = &HFFFFFF
    Else
        Me.lb_cat.RowSource = "frm_Kategorie"
        Me.lbl_kat_id_value.Caption = "ID"
        Me.tb_shortname.text = ""
        Me.tb_catname.text = ""
        Me.tb_catname_language.text = ""
        Me.cbb_cattype.listindex = 0
        Me.tb_user_colwidth.text = ""
        Me.chb_achsen_relevant.value = False
        Me.lb_cat.listindex = -1
        
        Me.tb_shortname.Enabled = False
        Me.tb_shortname.BackColor = &H8000000F
        Me.tb_catname.Enabled = False
        Me.tb_catname.BackColor = &H8000000F
        Me.tb_user_colwidth.Enabled = False
        Me.tb_user_colwidth.BackColor = &H8000000F
        Me.chb_achsen_relevant.Enabled = False
        Me.chb_achsen_relevant.BackColor = &H8000000F
    End If
End Sub

Private Sub setCostTypesActivity(Enabled As Boolean)
    If Enabled Then
        Me.tb_cost_shortname.Enabled = True
        Me.tb_cost_shortname.BackColor = &HFFFFFF
        Me.tb_cost_name.Enabled = True
        Me.tb_cost_name.BackColor = &HFFFFFF
    Else
        Me.lbl_cost_select_index_value.Caption = "ID"
        Me.tb_cost_shortname.text = ""
        Me.tb_cost_name.text = ""
        Me.tb_cost_name_language.text = ""
        Me.cbb_cost_cat.listindex = 1
        Me.lb_costs.listindex = -1
    
        Me.tb_cost_shortname.Enabled = False
        Me.tb_cost_shortname.BackColor = &H8000000F
        Me.tb_cost_name.Enabled = False
        Me.tb_cost_name.BackColor = &H8000000F
    End If
End Sub

Private Sub setResTypesActivity(Enabled As Boolean)
    Me.tb_verf.Enabled = False
    Me.tb_verf.BackColor = &H8000000F

    If Enabled Then
        Me.tb_res_shortname.Enabled = True
        Me.tb_res_shortname.BackColor = &HFFFFFF
        Me.tb_res_name.Enabled = True
        Me.tb_res_name.BackColor = &HFFFFFF
        Me.tb_kostensatz.Enabled = True
        Me.tb_kostensatz.BackColor = &HFFFFFF
        Me.cbb_kostenart.Enabled = True
        Me.cbb_kostenart.BackColor = &HFFFFFF
        Me.cbb_res_group.Enabled = True
        Me.cbb_res_group.BackColor = &HFFFFFF
        If Me.lb_resources.list(Me.lb_resources.listindex, 4) <> "" Then
            Me.btn_editVerfuegbarkeit.Enabled = True
        Else
            Me.btn_editVerfuegbarkeit.Enabled = False
        End If
    Else
        Me.lbl_res_select_index_value.Caption = "ID"
        Me.tb_res_shortname.text = ""
        Me.tb_res_name.text = ""
        Me.tb_kostensatz.text = ""
        Me.tb_res_name_language.text = ""
        If Me.cbb_res_group.listCount > 0 Then Me.cbb_res_group.listindex = 0
        Me.cbb_kostenart.listindex = Me.cbb_kostenart.listCount - 1
        Me.lb_resources.listindex = -1
        
        Me.tb_res_shortname.Enabled = False
        Me.tb_res_shortname.BackColor = &H8000000F
        Me.tb_res_name.Enabled = False
        Me.tb_res_name.BackColor = &H8000000F
        Me.tb_kostensatz.Enabled = False
        Me.tb_kostensatz.BackColor = &H8000000F
        Me.cbb_kostenart.Enabled = False
        Me.cbb_kostenart.BackColor = &H8000000F
        Me.cbb_res_group.Enabled = False
        Me.cbb_res_group.BackColor = &H8000000F
        
        Me.btn_editVerfuegbarkeit.Enabled = False
        
        Me.lbl_ressgroupe.visible = False
        Me.cbb_res_group.visible = False
    End If
End Sub

Private Sub setUnitActivity(Enabled As Boolean)
    If Enabled Then
        Me.tb_Einheit_name.Enabled = True
        Me.tb_Einheit_name.BackColor = &HFFFFFF
    Else
        Me.lbl_einheit_select_index_value.Caption = "ID"
        Me.tb_Einheit_name.text = ""
        Me.tb_einheit_language.text = ""
        Me.lb_einheiten.listindex = -1
        
        Me.tb_Einheit_name.Enabled = False
        Me.tb_Einheit_name.BackColor = &H8000000F
    End If
End Sub

Private Sub setUserActivity(Enabled As Boolean)
    If Enabled Then
        Me.tb_username.Enabled = True
        Me.tb_username.BackColor = &HFFFFFF
        
        Me.lb_pftypes.Enabled = True
        Me.lb_pftypes.BackColor = &HFFFFFF
    Else
        Me.lbl_user_select_index_value.Caption = "ID"
        Me.tb_username.text = ""
        Me.lb_users.listindex = -1
        
        Me.lb_pftypes.Enabled = False
        Me.lb_pftypes.BackColor = &H8000000F
        Me.tb_username.Enabled = False
        Me.tb_username.BackColor = &H8000000F
    End If
End Sub

Private Sub setUserFieldsDetailActivity(Enabled As Boolean)
    If Enabled Then
        Me.tb_neu_dkat_short.Enabled = True
        Me.tb_neu_dkat_short.BackColor = &HFFFFFF
        Me.tb_neu_dkat.Enabled = True
        Me.tb_neu_dkat.BackColor = &HFFFFFF
    Else
        Me.lbl_dkat_id_value.Caption = "ID"
        Me.tb_neu_dkat_short.text = ""
        Me.tb_neu_dkat.text = ""
        Me.lb_dkat.listindex = -1
        
        Me.tb_neu_dkat_short.Enabled = False
        Me.tb_neu_dkat_short.BackColor = &H8000000F
        Me.tb_neu_dkat.Enabled = False
        Me.tb_neu_dkat.BackColor = &H8000000F
    End If
End Sub









































































' Dummy Event zum ausf|fffd|hren der Init funktion
Private Sub lbl_SP_MnAtrackerWebsite_Click()
'    Call SP_init
End Sub

Private Sub cbb_SP_filter_Change()
    If click = False Then
        click = True
        
        calc_master.Range("SP_PJListFilterId").value = cbb_SP_filter.value
        Call SP_writefilter2Db(2, cbb_SP_filter.value)
        
        click = False
    End If
End Sub

' L|fffd|d die erforderlichen Daten ins Form
Private Sub SP_init()
    initSP = True
    
    Call SQL_Abfragen.Get_AllFilter
    
    calc_master.Range("SP_MnAurl").value = SP_readSpUrl(1)
    calc_master.Range("SP_PJListUrl").value = SP_readSpUrl(2)
    
    calc_master.Range("SP_MnAListId").value = SP_readSpListID(1)
    calc_master.Range("SP_PJListId").value = SP_readSpListID(2)
    
    calc_master.Range("SP_PJListFilterId").value = SP_readFilterID(2)
    
    tb_SP_MnAtrackerWebsite.value = calc_master.Range("SP_MnAurl").value
    tb_SP_PJListWebsite.value = calc_master.Range("SP_PJListUrl").value
    
    'TODO: Dropdowns laden
    Call SP_loadListsListFromDB(1, 3, 69, "SP_MnAListsList")
    Call SP_loadListsListFromDB(2, 3, 78, "SP_PJListsList")
    
'    Me.lb_SP_MnAtrackerFields.RowSource = "SP_MnAFieldList"
'    Me.lb_SP_PJListFields.RowSource = "SP_PJnpf2spList"
    
    'Listen sortieren
    calc_frm_masterdata.Range("SP_MnAFieldList").sort _
         Key1:=calc_frm_masterdata.Range(calc_frm_masterdata.Range("SP_MnAFieldList").Cells(1, 2), calc_frm_masterdata.Range("SP_MnAFieldList").Cells(1, 2)), Order1:=xlAscending, _
         Header:=xlNo, orderCustom:=1, _
         MatchCase:=False, Orientation:=xlTopToBottom, _
         DataOption1:=xlSortNormal
         
'    calc_frm_masterdata.range("SP_PJFieldList").sort _
'         Key1:=calc_frm_masterdata.range(calc_frm_masterdata.range("SP_PJFieldList").Cells(1, 3), calc_frm_masterdata.range("SP_PJFieldList").Cells(1, 3)), Order1:=xlAscending, _
'         Key1:=calc_frm_masterdata.range(calc_frm_masterdata.range("SP_PJFieldList").Cells(1, 1), calc_frm_masterdata.range("SP_PJFieldList").Cells(1, 1)), Order1:=xlAscending, _
'         Header:=xlNo, orderCustom:=1, _
'         MatchCase:=False, Orientation:=xlTopToBottom, _
'         DataOption1:=xlSortNormal
    
    'Definierte Namen anpassen
    Dim rowCounter As Integer
    
    rowCounter = 0
    
    While calc_frm_masterdata.Range("SP_PJnpf2spList").Cells(rowCounter, 1).value <> 0
        rowCounter = rowCounter + 1
    Wend
    
    If rowCounter + 2 > 4 Then
        ActiveWorkbook.Names.add name:="SP_PJnpf2spList", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(4, calc_frm_masterdata.Range("SP_PJnpf2spList").Column), calc_frm_masterdata.Cells(rowCounter + 2, calc_frm_masterdata.Range("SP_PJnpf2spList").Column + 4))
    Else
        ActiveWorkbook.Names.add name:="SP_PJnpf2spList", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(4, calc_frm_masterdata.Range("SP_PJnpf2spList").Column), calc_frm_masterdata.Cells(4, calc_frm_masterdata.Range("SP_PJnpf2spList").Column + 4))
    End If
    
    'RowSources neu zuweisen
    cbb_SP_MnAtrackerList.RowSource = "SP_MnAListsList"
    cbb_SP_PJListList.RowSource = "SP_PJListsList"
    cbb_SP_MnAtrackerList.value = calc_master.Range("SP_MnAListId").value
    cbb_SP_PJListList.value = calc_master.Range("SP_PJListId").value
    cbb_SP_filter.value = calc_master.Range("SP_PJListFilterId").value
    
    initSP = False
End Sub

Private Sub btn_SP_MnA_Sync_Click()
    Dim url As String
    Dim list As String
    
    url = calc_master.Range("SP_MnAurl").value
    list = calc_master.Range("SP_MnAListId").value

    Call SP_loadMnAtracker(url, list)
End Sub

Private Function SP_loadMnAtracker(url As String, list As String)
    'TODO right NOW
    Dim projectId
    Dim KatID
    Dim katValue
    Dim col
    Dim row
    Dim statement
    Dim spFielId As String
    Dim spFielType As String
    Dim currentIds As String
    currentIds = "-2"
    Dim iDidSomething
    Dim Lists
    Dim i As Integer
    Dim ii As Integer
    Dim baserow As Integer ' Headerrow
    Dim strSoapBody
    Dim objXMLHTTP As MSXML2.XMLHTTP
    Set objXMLHTTP = SP_getXmlHttp(url, "GetListItems")
    Dim katFieldType
    
    baserow = 3
    
    strSoapBody = "<?xml version='1.0' encoding='utf-8'?>" _
      & "<soap:Envelope xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' " _
      & "xmlns:xsd='http://www.w3.org/2001/XMLSchema' " _
      & "xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/'><soap:Body>" _
      & "<GetListItems xmlns='http://schemas.microsoft.com/sharepoint/soap/'>" _
      & "<listName>" & list & "</listName>" _
      & "<rowLimit>10000</rowLimit>" _
      & "</GetListItems></soap:Body></soap:Envelope>"
      
    objXMLHTTP.send strSoapBody

    If objXMLHTTP.Status = 200 Then
        Set Lists = objXMLHTTP.responseXML.ChildNodes(1).ChildNodes(0).ChildNodes(0).ChildNodes(0).ChildNodes(0).ChildNodes(0).ChildNodes
        
        For i = 1 To Lists.Length
            projectId = getProjectIdBySpId(SP_getValueOfAttribute(Lists(i - 1), "ows_ID"))
            
            col = calc_frm_masterdata.Range("SP_MnAFieldList").Column
            row = calc_frm_masterdata.Range("SP_MnAFieldList").row
            iDidSomething = False
            While calc_frm_masterdata.Cells(row, col).value <> ""
                KatID = calc_frm_masterdata.Cells(row, col + 3).value
                
                If KatID <> "" Then
                    spFielId = calc_frm_masterdata.Cells(row, col)
                    
                    spFielType = calc_frm_masterdata.Cells(row, col + 2)
                    katFieldType = calc_frm_masterdata.Cells(row, col + 5).value
                
                    If (katFieldType = "Number") Then
                        katValue = "0" & SP_getValueOfAttribute(Lists(i - 1), "ows_" & spFielId)
                    ElseIf (katFieldType = "Text" Or katFieldType = "Date" Or katFieldType = "DateTime") Then
                        katValue = SP_getValueOfAttribute(Lists(i - 1), "ows_" & spFielId)
                    ElseIf (katFieldType = "DropDown") Then
                        
                        katValue = SP_getValueOfAttribute(Lists(i - 1), "ows_" & spFielId)
                        statement = "SELECT DISTINCT kd.ID As id FROM DB_Language l JOIN DB_Kategorie_Detail kd ON l.term = kd.FK_Language_Name OR l.term = kd.FK_Language_Shortname WHERE deutsch LIKE '" & katValue & "' AND kd.FK_Kategorie = " & KatID
                        DB.Select_Statement (statement)
                        
                        If Not DB.Recordset.EOF Then
                            katValue = DB.Recordset!ID
                        Else
                            katValue = ""
                        End If
                        
                    ElseIf (katFieldType = "True/False") Then
                    
                        katValue = SP_getValueOfAttribute(Lists(i - 1), "ows_" & spFielId)
                        If katValue = 1 Then
                            statement = "SELECT MIN(kd.ID) As id FROM DB_Kategorie_Detail kd WHERE kd.FK_Kategorie = " & KatID
                        ElseIf katValue = 0 Then
                            statement = "SELECT MAX(kd.ID) As id FROM DB_Kategorie_Detail kd WHERE kd.FK_Kategorie = " & KatID
                        Else
                            GoTo nextElement
                        End If
                        
                        DB.Select_Statement (statement)
                        
                        If Not DB.Recordset.EOF Then
                            katValue = DB.Recordset!ID
                        Else
                            katValue = ""
                        End If
                        
                    Else
                        katValue = ""
                    End If
                    
                    statement = "execute sp_setField  'SHAREPOINT', " & projectId & ", " & KatID & ",'" & katValue & "'"
                    currentIds = currentIds & ", " & projectId
                    DB.Execute_Statement (statement)
                    
                    'TODO
                    'statement = "UPDATE DB_Projekte SET active = 0 WHERE id = " & projectId
                    'DB.Update_Statement (statement)
                End If
                
                row = row + 1
                iDidSomething = True
nextElement:
            Wend
            
            If iDidSomething Then
                statement = "execute sp_setField  'SHAREPOINT', " & projectId & ", 183, '" & Date & "'"
                DB.Execute_Statement (statement)
            End If
        Next i
        
        'statement = "UPDATE DB_Projekte SET active = 0 WHERE SharePoint > 0 AND id NOT IN (" & currentIds & ")"
        'DB.Update_Statement (statement)
    Else
        Call SP_XmlErrorHandler(objXMLHTTP.Status, url, objXMLHTTP.responseText)
    End If
    
    Set objXMLHTTP = Nothing
End Function

Function getProjectIdBySpId(SPID As String)
    Dim statement As String
    
    statement = "SELECT ID FROM DB_Projekte WHERE SharePoint LIKE '" & SPID & "'"

    If DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            getProjectIdBySpId = DB.Recordset!ID
        Else
            statement = "execute sp_addNew_SP_Project 'SHAREPOINT', " & SPID
 
            If DB.Execute_Statement(statement) = True Then
                statement = "SELECT ID FROM DB_Projekte WHERE SharePoint LIKE '" & SPID & "'"
                If DB.Select_Statement(statement) = True Then
                    If Not Class_Functions.DB.Recordset.EOF Then
                        getProjectIdBySpId = DB.Recordset!ID
                        statement = "UPDATE DB_Projekte SET active = 1 WHERE id = " & getProjectIdBySpId
                        DB.Update_Statement (statement)
                        
                        statement = "execute sp_setField  'SHAREPOINT', " & getProjectIdBySpId & ", 8, 'M&A Tracker Project'"
                        Call DB.Execute_Statement(statement)
                    End If
                End If
            End If
        End If
    End If
End Function

' Abfragen der Listen
Private Sub btn_SP_PJListLoadListsList_Click()
    initSP = True
    
    Dim url As String
    url = Me.tb_SP_PJListWebsite.value
    If url = "" Then
        GoTo Ende
    End If
    
    calc_master.Range("SP_PJListUrl").value = url
    cbb_SP_PJListList.value = ""
    Call SP_loadListofLists(url, 78, "SP_PJListsList", 2)
    Me.cbb_SP_PJListList.RowSource = "SP_PJListsList"
    
    'Felder wieder laden
    On Error GoTo Ende
    Me.cbb_SP_PJListList.value = calc_master.Range("SP_PJListId").value

Ende:
    Me.cbb_SP_PJListList.RowSource = "SP_PJListsList"
    initSP = False
    
    Call cbb_SP_PJListList_Change
End Sub

Private Sub btn_SP_MnALoadListsList_Click()
    initSP = True
    Dim url As String
    url = tb_SP_MnAtrackerWebsite.value
    If url = "" Then
        GoTo Ende
    End If
    
    calc_master.Range("SP_MnAurl").value = url
    cbb_SP_MnAtrackerList.value = ""
    Call SP_loadListofLists(url, 69, "SP_MnAListsList", 1)
    Me.cbb_SP_MnAtrackerList.RowSource = "SP_MnAListsList"
    
    'Felder wieder laden
    On Error GoTo Ende
    cbb_SP_MnAtrackerList.value = calc_master.Range("SP_MnAListId").value
    
Ende:
    cbb_SP_MnAtrackerList.RowSource = "SP_MnAListsList"
    initSP = False
    
    Call cbb_SP_MnAtrackerList_Change
End Sub

Private Function SP_loadPJListUrls(url As String, list As String)
    'TODO right NOW
    Dim projectId
    Dim SPID
    Dim KatID
    Dim katValue
    Dim col
    Dim row
    Dim statement
    Dim spFielId As String
    Dim spFielType As String
    Dim currentIds As String
    currentIds = "-2"
    
    Dim Lists
    Dim i As Integer
    Dim ii As Integer
    Dim baserow As Integer ' Headerrow
    Dim strSoapBody
    Dim objXMLHTTP As MSXML2.XMLHTTP
    Set objXMLHTTP = SP_getXmlHttp(url, "GetListItems")
    
    baserow = 3
    col = 95
    
    strSoapBody = "<?xml version='1.0' encoding='utf-8'?>" _
      & "<soap:Envelope xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' " _
      & "xmlns:xsd='http://www.w3.org/2001/XMLSchema' " _
      & "xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/'><soap:Body>" _
      & "<GetListItems xmlns='http://schemas.microsoft.com/sharepoint/soap/'>" _
      & "<listName>" & list & "</listName>" _
      & "<viewFields> <ViewFields xmlns=""""><FieldRef Name=""" & calc_frm_masterdata.Range("SP_PjListSpId") & """/></ViewFields></viewFields>" _
      & "</GetListItems></soap:Body></soap:Envelope>"
      
    objXMLHTTP.send strSoapBody

    If objXMLHTTP.Status = 200 Then
        Set Lists = objXMLHTTP.responseXML.ChildNodes(1).ChildNodes(0).ChildNodes(0).ChildNodes(0).ChildNodes(0).ChildNodes(0).ChildNodes
        
        calc_frm_masterdata.Range("SP_IdsInSp").ClearContents
    
        For i = 1 To Lists.Length
            SPID = SP_getValueOfAttribute(Lists(i - 1), "ows_ID")
            projectId = SP_getValueOfAttribute(Lists(i - 1), "ows_" & calc_frm_masterdata.Range("SP_PjListSpId"))
          
            calc_frm_masterdata.Cells(baserow + i, col).value = projectId
            calc_frm_masterdata.Cells(baserow + i, col + 1).value = SPID
        Next i
        
        calc_frm_masterdata.Range(calc_frm_masterdata.Cells(baserow + 1, col), calc_frm_masterdata.Cells(baserow + i - 1, col + 1)).name = "SP_IdsInSp"
        calc_frm_masterdata.Range(calc_frm_masterdata.Cells(baserow + 1, col), calc_frm_masterdata.Cells(baserow + i - 1, col + 2)).name = "spSelectedFromSharePoint"
    Else
        Call SP_XmlErrorHandler(objXMLHTTP.Status, url, objXMLHTTP.responseText)
    End If
    
    Set objXMLHTTP = Nothing
End Function

Private Sub cbb_SP_PJListList_Change()
    If (initSP) Then
        Exit Sub
    End If
    
    Dim url As String
    Dim listid As String
    Dim sameList As Boolean
    
    url = tb_SP_PJListWebsite.value
    listid = cbb_SP_PJListList
    
    If calc_master.Range("SP_PJListId").value = listid Then
        sameList = True
    Else
        sameList = False
        calc_master.Range("SP_PJListId").value = listid
    End If
    
    calc_frm_masterdata.Range(calc_frm_masterdata.Cells(calc_frm_masterdata.Range("SP_PJFieldList").row + 1, calc_frm_masterdata.Range("SP_PJFieldList").Column + 3), calc_frm_masterdata.Cells(calc_frm_masterdata.Range("SP_PJnpf2spList").Rows.count + calc_frm_masterdata.Range("SP_PJFieldList").row - 1, calc_frm_masterdata.Range("SP_PJFieldList").Column + 5)).ClearContents
    
    Call SP_LoadFieldlist(url, 81, "SP_PJFieldList", listid, True, 2, 2, sameList)
    
    calc_frm_masterdata.Range("SP_PJFieldList").sort _
         Key1:=calc_frm_masterdata.Range(calc_frm_masterdata.Range("SP_PJFieldList").Cells(1, 2), calc_frm_masterdata.Range("SP_PJFieldList").Cells(1, 2)), Order1:=xlAscending, _
         Header:=xlNo, orderCustom:=1, _
         MatchCase:=False, Orientation:=xlTopToBottom, _
         DataOption1:=xlSortNormal
    
    Call SQL_Abfragen.Get_SPZuweisungen(2)
         
    lb_SP_PJListFields.RowSource = "SP_PJnpf2spList"
End Sub

Private Sub cbb_SP_MnAtrackerList_Change()
    If (initSP) Then
        Exit Sub
    End If
    
    Dim sameList As Boolean
    Dim url As String
    url = tb_SP_MnAtrackerWebsite.value
    Dim listid As String
    listid = cbb_SP_MnAtrackerList.value

    calc_frm_masterdata.Range(calc_frm_masterdata.Cells(calc_frm_masterdata.Range("SP_MnAFieldList").row, calc_frm_masterdata.Range("SP_MnAFieldList").Column + 3), calc_frm_masterdata.Cells(calc_frm_masterdata.Range("SP_MnAFieldList").Rows.count + calc_frm_masterdata.Range("SP_MnAFieldList").row - 1, calc_frm_masterdata.Range("SP_MnAFieldList").Column + 4)).ClearContents
    
    If calc_frm_masterdata.Range("SP_MnAListId").value = listid Then
        sameList = True
    Else
        sameList = False
        calc_frm_masterdata.Range("SP_MnAListId").value = listid
    End If
    
    Call SP_LoadFieldlist(url, 72, "SP_MnAFieldList", listid, True, 1, 2, sameList)
    
    calc_frm_masterdata.Range("SP_MnAFieldList").sort _
         Key1:=calc_frm_masterdata.Range(calc_frm_masterdata.Range("SP_MnAFieldList").Cells(1, 2), calc_frm_masterdata.Range("SP_MnAFieldList").Cells(1, 2)), Order1:=xlAscending, _
         Header:=xlNo, orderCustom:=1, _
         MatchCase:=False, Orientation:=xlTopToBottom, _
         DataOption1:=xlSortNormal
    
    Call SQL_Abfragen.Get_SPZuweisungen(1)
         
    lb_SP_MnAtrackerFields.RowSource = "SP_MnAFieldList"
End Sub

Private Sub lb_SP_MnAtrackerFields_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim rangeName
    Dim retVal As String
    Dim rowIndex
    Dim currentId As String
    Dim fieldType As String
    
    rowIndex = lb_SP_MnAtrackerFields.listindex
    currentId = lb_SP_MnAtrackerFields.list(rowIndex, 3)
    fieldType = lb_SP_MnAtrackerFields.list(rowIndex, 2)
    Call frm_selectFieldToMatch.ShowWithData(currentId, "frm_Kategorie", 1, 3, 4, fieldType)
    
    rangeName = lb_SP_MnAtrackerFields.RowSource
    
    On Error GoTo afterError
    retVal = frm_selectFieldToMatch.getCcbValue()
    
    If retVal = "-1" Then
        Call SP_UpdateField(1, Range(rangeName).Cells(rowIndex + 1, 1), -1)
    ElseIf retVal = "" Then
        'do nothing wenn x geklickt wird
    Else
        Call SP_UpdateField(1, Range(rangeName).Cells(rowIndex + 1, 1), retVal)
    End If
    
    Call SQL_Abfragen.Get_SPZuweisungen(1)
afterError:
    Unload frm_selectFieldToMatch
End Sub

Private Sub lb_SP_PJListFields_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim retVal As String
    Dim rowIndex
    Dim currentId As String
    
    rowIndex = lb_SP_PJListFields.listindex
    currentId = lb_SP_PJListFields.list(rowIndex, 3)
    Call frm_selectFieldToMatch.ShowWithData(currentId, "SP_PJFieldList", 1, 2, 3, lb_SP_PJListFields.list(rowIndex, 2))
    
    On Error GoTo afterError
    retVal = frm_selectFieldToMatch.getCcbValue()
    
    If retVal = "-1" Then
        Call SP_UpdateField(2, calc_frm_masterdata.Range("SP_PJnpf2spList").Cells(rowIndex + 1, 1), -1)
    ElseIf retVal = "" Then
        ' do nix wenn x
    Else
        Call SP_UpdateField(2, retVal, calc_frm_masterdata.Range("SP_PJnpf2spList").Cells(rowIndex + 1, 1))
    End If
    
    Call SQL_Abfragen.Get_SPZuweisungen(2)
    
afterError:
    Unload frm_selectFieldToMatch
End Sub

Private Sub SP_LoadFieldlist(url As String, col As Integer, rangeName As String, listid As String, showReadOnly As Boolean, listDbId As Integer, Optional aditionalCols As Integer = 0, Optional sameList As Boolean = False)
    nlc_intern.Application_off
        
    Dim Lists
    Dim i As Integer
    Dim ii As Integer
    Dim baserow
    Dim offset
    Dim strSoapBody As String
    Dim listname As String
    Dim list() As String
    
    offset = 0
    
    baserow = 3
    
    Dim objXMLHTTP As MSXML2.XMLHTTP
    Set objXMLHTTP = SP_getXmlHttp(url, "GetList")
    
    ii = 1
    strSoapBody = "<soap:Envelope xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' " _
      & "xmlns:xsd='http://www.w3.org/2001/XMLSchema' " _
      & "xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/'><soap:Body>" _
      & "<GetList xmlns='http://schemas.microsoft.com/sharepoint/soap/' >" _
      & "<listName>" & listid & " </listName>" _
      & "</GetList >" _
      & "</soap:Body></soap:Envelope>"
      
    objXMLHTTP.send strSoapBody
    
    If objXMLHTTP.Status = 200 Then
        Set Lists = objXMLHTTP.responseXML.ChildNodes(1).ChildNodes(0).ChildNodes(0).ChildNodes(0).ChildNodes(0).ChildNodes(0).ChildNodes
        Range(rangeName).ClearContents
        
        ReDim list(2, 1)
        
        'SP Werte auslesen
        For i = 1 To Lists.Length
            If (SP_getValueOfAttribute(Lists(i - 1), "Hidden") <> "TRUE") Then
                If (showReadOnly Or SP_getValueOfAttribute(Lists(i - 1), "ReadOnly") <> "TRUE") Then
                    calc_frm_masterdata.Cells(baserow + ii + offset, col + 2) = SP_getValueOfAttribute(Lists(i - 1), "Type")
                    
                    If calc_frm_masterdata.Cells(baserow + ii + offset, col + 2) <> "Computed" And _
                       calc_frm_masterdata.Cells(baserow + ii + offset, col + 2) <> "User" And _
                       calc_frm_masterdata.Cells(baserow + ii + offset, col + 2) <> "Attachments" And _
                       calc_frm_masterdata.Cells(baserow + ii + offset, col + 2) <> "Lookup" Then
                        ReDim Preserve list(2, ii - 1)
                        
                        list(0, ii - 1) = SP_getValueOfAttribute(Lists(i - 1), "Name")
                        list(1, ii - 1) = SP_getValueOfAttribute(Lists(i - 1), "DisplayName")
                        list(2, ii - 1) = calc_frm_masterdata.Cells(baserow + ii + offset, col + 2)

                        Call SP_AddField(listDbId, calc_frm_masterdata.Cells(baserow + ii + offset, col + 0), calc_frm_masterdata.Cells(baserow + ii + offset, col + 1), calc_frm_masterdata.Cells(baserow + ii + offset, col + 2))
                        ii = ii + 1
                    Else
                        calc_frm_masterdata.Cells(baserow + ii + offset, col + 2) = ""
                    End If
                End If
            End If
        Next i
        
        If listDbId = 2 Then
            Dim counter As Integer
            counter = 0
            For i = calc_frm_masterdata.Range("SP_PJFieldList").row To UBound(list, 2) Step 1
                calc_frm_masterdata.Cells(i, calc_frm_masterdata.Range("SP_PJFieldList").Column).value = list(0, counter)
                calc_frm_masterdata.Cells(i, calc_frm_masterdata.Range("SP_PJFieldList").Column + 1).value = list(1, counter)
                calc_frm_masterdata.Cells(i, calc_frm_masterdata.Range("SP_PJFieldList").Column + 2).value = list(2, counter)
                
                counter = counter + 1
            Next i
            
            If i > calc_frm_masterdata.Range("SP_PJFieldList").row Then
                ActiveWorkbook.Names.add name:="SP_PJFieldList", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(calc_frm_masterdata.Range("SP_PJFieldList").row, calc_frm_masterdata.Range("SP_PJFieldList").Column), calc_frm_masterdata.Cells(i - 1, calc_frm_masterdata.Range("SP_PJFieldList").Column + 2))
            Else
                ActiveWorkbook.Names.add name:="SP_PJFieldList", RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Cells(calc_frm_masterdata.Range("SP_PJFieldList").row, calc_frm_masterdata.Range("SP_PJFieldList").Column), calc_frm_masterdata.Cells(calc_frm_masterdata.Range("SP_PJFieldList").row, calc_frm_masterdata.Range("SP_PJFieldList").Column + 2))
            End If
        End If
        
        'Felder l|fffd|schen
        If sameList Then
            'Nur nichtmehr vorhandene Eintr|fffd|ge l|fffd|schen und neue hinzuf|fffd|gen
            Call SQL_Abfragen.Delete_SPFields(list, listDbId)
        Else
            'Alle felder l|fffd|schen
            Call SP_ClearFields(listDbId)
        End If
        'Nur neue Eintr|fffd|ge hinzuf|fffd|gen
        Call SQL_Abfragen.Insert_SPFields(list, listDbId)
        
        'Daten auslesen
        Call SQL_Abfragen.Get_SPZuweisungen(listDbId)
        
        'calc_frm_masterdata.range(calc_frm_masterdata.Cells(baserow + 1, col), calc_frm_masterdata.Cells(baserow + ii - 1, col + 2 + aditionalCols)).name = rangeName
        
        If listDbId = 1 Then
            listname = cbb_SP_MnAtrackerList.text
        Else
            listname = cbb_SP_PJListList.text
        End If
        
        Call SP_writeList2Db(listDbId, listid, listname)
    Else
        Call SP_XmlErrorHandler(objXMLHTTP.Status, url, objXMLHTTP.responseText)
    End If
    
    Set objXMLHTTP = Nothing
    
    nlc_intern.Application_on
End Sub

Private Function SP_loadListofLists(url As String, col As Integer, rangeName As String, listid As Integer)
    Dim Lists
    Dim i As Integer
    Dim baserow As Integer ' Headerrow
    Dim strSoapBody
    Dim objXMLHTTP As MSXML2.XMLHTTP
    Set objXMLHTTP = SP_getXmlHttp(url, "GetListCollection")
    
    baserow = 3
    
    strSoapBody = "<soap:Envelope xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' " _
      & "xmlns:xsd='http://www.w3.org/2001/XMLSchema' " _
      & "xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/'><soap:Body>" _
      & "<GetListCollection xmlns='http://schemas.microsoft.com/sharepoint/soap/' />" _
      & "</soap:Body></soap:Envelope>"
      
    objXMLHTTP.send strSoapBody

    If objXMLHTTP.Status = 200 Then
        Set Lists = objXMLHTTP.responseXML.ChildNodes(1).ChildNodes(0).ChildNodes(0).ChildNodes(0).ChildNodes(0).ChildNodes
       
        Range(rangeName).ClearContents
        
        For i = 1 To Lists.Length
              calc_frm_masterdata.Cells(baserow + i, col) = Lists(i - 1).Attributes(3).value
              calc_frm_masterdata.Cells(baserow + i, col + 1) = Lists(i - 1).Attributes(4).value
        Next i
        
        calc_frm_masterdata.Range(calc_frm_masterdata.Cells(baserow + 1, col), calc_frm_masterdata.Cells(baserow + Lists.Length, col + 1)).name = rangeName
        Call SP_writeUrl2Db(listid, url)
    Else
        Call SP_XmlErrorHandler(objXMLHTTP.Status, url, objXMLHTTP.responseText)
    End If
    
    Set objXMLHTTP = Nothing
End Function

Private Function SP_getXmlHttp(url As String, name As String)
    Set SP_getXmlHttp = New MSXML2.XMLHTTP
    
    Dim fullUrl
    
    If url = "" Then
        Exit Function
    End If
    
    fullUrl = "https://" & url & "/_vti_bin/Lists.asmx"
    
    SP_getXmlHttp.Open "POST", fullUrl, False
    
    SP_getXmlHttp.setRequestHeader "Content-Type", "text/xml; charset=""UTF-8"""
    SP_getXmlHttp.setRequestHeader "SOAPAction", "http://schemas.microsoft.com/sharepoint/soap/" & name
End Function

Private Function SP_getValueOfAttribute(ByVal elem As IXMLDOMElement, atr As String)
    Dim i As Integer
    Dim ret As String
    
    ret = ""

    For i = 1 To elem.Attributes.Length
        If (elem.Attributes(i - 1).BaseName = atr) Then
            ret = elem.Attributes(i - 1).text
            Exit For
        End If
    Next i

    SP_getValueOfAttribute = ret
End Function

Private Function SP_XmlErrorHandler(errorCode As Integer, url As String, text As String)
    Dim MsgBoxText As String
    Dim ErrorMsg As String
    
    Select Case errorCode
       Case 404
          MsgBoxText = "Die von Ihnen eingegebene Seite kann nicht gefunden Werden (Error 404)"
          ErrorMsg = "404 - URL: " + url
       Case 500
          MsgBoxText = "Ein internen Serverfehler ist Aufgetreten (Error 500)"
          ErrorMsg = "500 - URL: " + url + " - ResposeText: " + text
       Case Else
          MsgBoxText = "Ein unbekannter Fehler ist aufgetreten (Error " + errorCode + ")"
          ErrorMsg = errorCode + " - URL: " + url + " - ResposeText: " + text
    End Select
    
    'TODO: store in ErrLog
    MsgBox (MsgBoxText)
End Function

Private Sub SP_writeUrl2Db(ID As Integer, url As String)
    DB.Update_Statement ("UPDATE DB_SharePointLists SET URL = '" & url & "' WHERE ID = " & ID)
End Sub

Private Sub SP_writeList2Db(ID As Integer, listid As String, listname As String)
    DB.Update_Statement ("UPDATE DB_SharePointLists SET SP_ListID = '" & listid & "', SP_ListName = '" & listname & "'  WHERE ID = " & ID)
End Sub

Private Sub SP_writefilter2Db(ID As Integer, filterId As String)
    DB.Update_Statement ("UPDATE DB_SharePointLists SET FK_Filter = '" & filterId & "' WHERE ID = " & ID)
End Sub

Private Function SP_readSpUrl(listSpId)
    DB.Select_Statement ("Select URL FROM DB_SharePointLists WHERE ID = " & listSpId)
    SP_readSpUrl = DB.Recordset!url
End Function

Private Function SP_readSpListID(listSpId)
    DB.Select_Statement ("Select SP_ListId FROM DB_SharePointLists WHERE ID = " & listSpId)
    SP_readSpListID = DB.Recordset!SP_ListId
End Function

Private Function SP_readFilterID(listSpId)
    DB.Select_Statement ("Select FK_Filter FROM DB_SharePointLists WHERE ID = " & listSpId)
    SP_readFilterID = DB.Recordset!FK_Filter
End Function

Private Function SP_loadListsListFromDB(listSpId As Integer, baserow As Integer, col As Integer, rangeName As String)
    Range(rangeName).ClearContents
    DB.Select_Statement ("Select SP_ListId, SP_ListName FROM DB_SharePointLists WHERE ID = " & listSpId)
    calc_frm_masterdata.Cells(baserow + 1, col).CopyFromRecordset (DB.Recordset)
    calc_frm_masterdata.Range(calc_frm_masterdata.Cells(baserow + 1, col), calc_frm_masterdata.Cells(baserow + 1, col + 1)).name = rangeName
End Function

Private Sub SP_ClearFields(listDbId As Integer)
    DB.Delete_Statement ("DELETE FROM DB_SharePointFields WHERE FK_SharePointLists = " & listDbId)
End Sub
Public Sub SP_AddField(listDbId As Integer, fieldId As String, fieldName As String, fieldType As String)
    DB.Insert_Statement ("INSERT INTO DB_SharePointFields (FK_SharePointLists, SP_FieldID, SP_FieldName, SP_FieldType) VALUES (" & listDbId & ",'" & fieldId & "','" & fieldName & "','" & fieldType & "')")
End Sub

Private Sub SP_UpdateField(listDbId As Integer, fieldId As String, KatID As String)
    If KatID = -1 Or fieldId = "-1" Then
        If listDbId = 2 Then
            DB.Update_Statement ("UPDATE DB_SharePointFields SET FK_Kategorie = NULL WHERE FK_SharePointLists = " & listDbId & " AND FK_Kategorie = " & KatID & "")
        Else
            DB.Update_Statement ("UPDATE DB_SharePointFields SET FK_Kategorie = NULL WHERE FK_SharePointLists = " & listDbId & " AND SP_FieldID = '" & fieldId & "'")
            'DB.Delete_Statement ("DELETE FROM DB_SharePointFields WHERE FK_SharePointLists = " & listDbId & " AND SP_FieldID = '" & fieldId & "'")
        End If
    Else
        If listDbId = 2 Then
            DB.Update_Statement ("UPDATE DB_SharePointFields SET FK_Kategorie = NULL WHERE FK_SharePointLists = " & listDbId & " AND FK_Kategorie = " & KatID & "")
        End If
        DB.Update_Statement ("UPDATE DB_SharePointFields SET FK_Kategorie = " & KatID & " WHERE FK_SharePointLists = " & listDbId & " AND SP_FieldID = '" & fieldId & "'")
    End If
End Sub

Private Sub SP_getIDs(filterId As String)
    Dim statement As String
    
    statement = (gernateSqlQueryByFilterId(filterId))
    DB.Select_Statement statement
    
    calc_frm_masterdata.Cells(4, 90).CopyFromRecordset (DB.Recordset)
End Sub

Private Sub lbl_SP_PJListFields_Click()
    Call getAllWPsAsInsertstringForSOAP
End Sub

Private Sub btn_SP_PJList_Sync_Click()
    If (calc_frm_masterdata.Cells(4, 88) = "") Then
        MsgBox ("Bitte definieren Sie ein Feld f|fffd|r die NPF ID")
        Exit Sub
    End If
    
    Dim url As String
    Dim list As String
    
    url = calc_master.Range("SP_PJListUrl").value
    list = calc_master.Range("SP_PJListId").value
    
    Dim res As Object
    Dim i As Integer
    
    Dim strBatchXml As String
    Dim strSoapBody As String
    
    Dim objXMLHTTP As MSXML2.XMLHTTP
    Set objXMLHTTP = SP_getXmlHttp(url, "UpdateListItems")

    strSoapBody = "<soap:Envelope xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' " _
      & "xmlns:xsd='http://www.w3.org/2001/XMLSchema' " _
      & "xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/'><soap:Body>" _
      & "<UpdateListItems xmlns='http://schemas.microsoft.com/sharepoint/soap/'>" _
      & "<listName>" & list & "</listName><updates><Batch OnError='Continue' ListVersion='1' >" _
      & getAllWPsAsInsertstringForSOAP() _
      & "</Batch></updates></UpdateListItems>" _
      & "</soap:Body></soap:Envelope>"

objXMLHTTP.send strSoapBody

If objXMLHTTP.Status = 200 Then

End If

Set objXMLHTTP = Nothing
End Sub

Function getAllWPsAsInsertstringForSOAP()
    Dim i As Integer
    Dim j As Integer
    Dim ret As String
    Dim baserow As Integer
    
    ' L|fffd|dt die notwendigen Informationen vom SharePoint
    Call SP_loadPJListUrls(calc_master.Range("SP_PJListUrl").value, calc_master.Range("SP_PJListId").value)

    calc_frm_masterdata.Range("SP_IdsInDB").ClearContents
    DB.Select_Statement (Replace(gernateSqlQueryByFilterId(calc_master.Range("SP_PJListFilterId").value), "pf.FK_Kategorie_Detail,", ""))
    calc_frm_masterdata.Cells(4, 91).CopyFromRecordset (DB.Recordset)
    
    baserow = 3
    ret = ""
    i = baserow + 1
    j = 1
    While (calc_frm_masterdata.Cells(i, 91).value <> "")
        ret = ret & addItem(j, _
                            calc_frm_masterdata.Cells(i, 92), _
                            calc_frm_masterdata.Cells(i, 93), _
                            calc_frm_masterdata.Cells(i, 91))
        i = i + 1
        j = j + 1
    Wend
    
    calc_frm_masterdata.Range(calc_frm_masterdata.Cells(baserow + 1, 91), calc_frm_masterdata.Cells(baserow + i - 1, 91)).name = "SP_IdsInDB"
    calc_frm_masterdata.Range(calc_frm_masterdata.Cells(baserow + 1, 91), calc_frm_masterdata.Cells(baserow + i - 1, 91 + 2)).name = "spSelectedFromdataSheet"
    
    i = baserow + 1
    While (calc_frm_masterdata.Cells(i, 96).value <> "")
        ret = ret & addItem(j, _
                            calc_frm_masterdata.Cells(i, 96), _
                            calc_frm_masterdata.Cells(i, 97), _
                            calc_frm_masterdata.Cells(i, 95))
        i = i + 1
        j = j + 1
    Wend
    
    getAllWPsAsInsertstringForSOAP = ret
End Function

Private Function addItem(ID As Integer, SPID As String, cmd As String, pid As String)
    If cmd = "New" Then
        addItem = addItem & "<Method ID='" & ID & "' Cmd='" & cmd & "'>"
        addItem = addItem & "<Field Name='ID'>" & SPID & "</Field>"
    ElseIf cmd = "Update" Then
        addItem = addItem & "<Method ID='" & ID & "' Cmd='" & cmd & "'>"
        addItem = addItem & "<Field Name='ID'>" & SPID & "</Field>"
    ElseIf cmd = "Delete" Then
        addItem = addItem & "<Method ID='" & ID & "' Cmd='" & cmd & "'>"
        addItem = addItem & "<Field Name='ID'>" & SPID & "</Field>"
        GoTo Ende
    Else
        addItem = ""
        Exit Function
    End If
    
    Dim row
    Dim col
    
    row = 4
    col = 88
    
    addItem = addItem & "<Field Name='" & calc_frm_masterdata.Range("SP_PjListSpId") & "'>" & pid & "</Field>"
    
    row = row + 1
    
    While (calc_frm_masterdata.Cells(row, col - 3).value <> "")
        If (calc_frm_masterdata.Cells(row, col).value <> "") Then
            addItem = addItem & "<Field Name='" & calc_frm_masterdata.Cells(row, col).value & "'>" & SQL_Abfragen.Get_KategorieOrDetailWert(pid, calc_frm_masterdata.Cells(row, col - 3).value) & "</Field>"
        End If
        
        row = row + 1
    Wend

Ende:
    addItem = addItem & "</Method >"
End Function

Private Sub SP_clearColumn(col As Integer)
    Dim row
    row = 4
    calc_frm_masterdata.Range(calc_frm_masterdata.Cells(row, col), calc_frm_masterdata.Cells(row + 1000, col)).ClearContents
End Sub

Private Sub btn_edit_filter_Click()
    If Me.cbb_SP_filter.listindex <> -1 Then
        calc_master.Range("last_filter_id").value = Me.cbb_SP_filter.value
        frm_set_filter.Show
    End If
End Sub

Private Sub btn_SP_MnA_delete_Click()
    If Me.lb_SP_MnAtrackerFields.listindex > -1 Then
        Range(lb_SP_MnAtrackerFields.RowSource).Cells(lb_SP_MnAtrackerFields.listindex + 1, 4) = ""
        Range(lb_SP_MnAtrackerFields.RowSource).Cells(lb_SP_MnAtrackerFields.listindex + 1, 5) = ""
        Call SP_UpdateField(1, Range(lb_SP_MnAtrackerFields.RowSource).Cells(lb_SP_MnAtrackerFields.listindex + 1, 1), -1)
    End If
End Sub

Private Sub btn_SP_PjList_delete_Click()
    If Me.lb_SP_PJListFields.listindex > -1 Then
        calc_frm_masterdata.Range("SP_PJnpf2spList").Cells(lb_SP_PJListFields.listindex + 1, 4) = ""
        calc_frm_masterdata.Range("SP_PJnpf2spList").Cells(lb_SP_PJListFields.listindex + 1, 5) = ""
        Call SP_UpdateField(2, -1, Range(Me.lb_SP_PJListFields.RowSource).Cells(Me.lb_SP_PJListFields.listindex + 1, 1))
    End If
End Sub
Attribute VB_Name = "frm_NewDB"
Attribute VB_Base = "0{6290DCF7-ADB3-4C0A-89A4-612ED7E50D9C}{40CB0494-B562-4F87-B80D-95A7BEF364D6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub UserForm_Initialize()
'    Me.Caption = nlc_Language_userforms(Me.Name, "Titel")
'    Me.rdb_chooseXML.Caption = nlc_Language_userforms(Me.Name, "rdb_chooseXML")
'    Me.rdb_retry.Caption = nlc_Language_userforms(Me.Name, "rdb_retry")
'    Me.btn_ok.Caption = nlc_Language_userforms(Me.Name, "btn_ok")
'    Me.btn_cancel.Caption = nlc_Language_userforms(Me.Name, "btn_cancel")
    
    Me.rdb_retry.value = True
End Sub

Private Sub btn_cancel_Click()
    nls_Database.dbUserReply = nlsCancel
    Unload Me
End Sub

Private Sub btn_ok_Click()
    If Me.rdb_retry.value Then
        nls_Database.dbUserReply = nlsRetry
    Else
        nls_Database.dbUserReply = nlsChooseXML
    End If
    
    Unload Me
End Sub

Attribute VB_Name = "frm_Order_Filter"
Attribute VB_Base = "0{592BBDF7-9734-4892-85EA-CBC0312E775C}{857A0F0C-F7B8-4FE0-9C7B-D30D57D35CA6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False


Private Sub btn_cancel_Click()
    Unload Me
End Sub

Private Sub btn_ok_Click()
    'per sql Statement daten speichern
    'listbox von oben nach unten durchgehen und in db speicher (orderby anhand der position des Items schreiben)
    Dim counter As Integer
    
    For counter = 0 To Me.lb_dkat.listCount - 1
        Call SQL_Abfragen.updateFilterOrder(Me.lb_dkat.list(counter, 0), counter + 1)
    Next counter
    
    'Detailskategorie neu laden, damit |fffd|nderungen in Masterdaten sofort sichtbar sind
    Call SQL_Abfragen.Get_AllFilter
    Unload Me
End Sub

Private Sub UserForm_Initialize()
    If calc_master.Range("Login").value = "admin" Or calc_master.Range("Login").value = "user" Then
        Call SQL_Abfragen.Get_AllFilter
    Else
        Call SQL_Abfragen.Get_AllFilter(True)
    End If
    
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    
    Dim counter As Integer
    
    Me.lb_dkat.clear
    
    For counter = 1 To calc_frm_masterdata.Range("frm_Filter").Rows.count
        Me.lb_dkat.addItem (calc_frm_masterdata.Range("frm_Filter").Cells(counter, 1).value)
        Me.lb_dkat.list(Me.lb_dkat.listCount - 1, 1) = calc_frm_masterdata.Range("frm_Filter").Cells(counter, 2).value
    Next counter
End Sub

'(f|fffd|r ListBox2)
'Das aktive Item wird um eine Position nach unten geschoben
Private Sub btn_down_Click()
    Call nlc_ListboxEvents.btn_down_Click(Me.lb_dkat)
End Sub

'(f|fffd|r ListBox2)
'Das aktive Item wird an die unterster Position geschoben
Private Sub btn_downall_Click()
    Call nlc_ListboxEvents.btn_downall_Click(Me.lb_dkat)
End Sub


'Das aktive Item wird um eine Position nach oben geschoben
Private Sub btn_up_Click()
    Call nlc_ListboxEvents.btn_up_Click(Me.lb_dkat)
End Sub

'Das aktive Item wird an oberste Position geschoben
Private Sub btn_upall_Click()
    Call nlc_ListboxEvents.btn_upall_Click(Me.lb_dkat)
End Sub


Attribute VB_Name = "frm_Order_Kat"
Attribute VB_Base = "0{7A99BEA5-8492-451D-8643-0F5984EB7A52}{13AF6316-D1BE-4E57-A3C7-8F58AE50281D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub btn_cancel_Click()
    Unload Me
End Sub

Private Sub btn_ok_Click()
    'per sql Statement daten speichern
    'listbox von oben nach unten durchgehen und in db speicher (orderby anhand der position des Items schreiben)
    Dim counter As Integer
    
    For counter = 0 To Me.lb_kat.listCount - 1
        Call SQL_Abfragen.Update_Kategorien(Me.lb_kat.list(counter, 0), "OrderBy", counter + 1)
    Next counter
    
    'Detailskategorie neu laden, damit |fffd|nderungen in Masterdaten sofort sichtbar sind
    Call SQL_Abfragen.Get_AllKategorien
    Unload Me
End Sub

Private Sub UserForm_Initialize()
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
End Sub

'(f|fffd|r ListBox2)
'Das aktive Item wird um eine Position nach unten geschoben
Private Sub btn_down_Click()
    Call nlc_ListboxEvents.btn_down_Click(Me.lb_kat)
End Sub

'(f|fffd|r ListBox2)
'Das aktive Item wird an die unterster Position geschoben
Private Sub btn_downall_Click()
    Call nlc_ListboxEvents.btn_downall_Click(Me.lb_kat)
End Sub


'Das aktive Item wird um eine Position nach oben geschoben
Private Sub btn_up_Click()
    Call nlc_ListboxEvents.btn_up_Click(Me.lb_kat)
End Sub

'Das aktive Item wird an oberste Position geschoben
Private Sub btn_upall_Click()
    Call nlc_ListboxEvents.btn_upall_Click(Me.lb_kat)
End Sub



Attribute VB_Name = "frm_Order_KatD"
Attribute VB_Base = "0{9527D6F1-F710-4C23-AB42-8E1676D6D38C}{95C7B72A-E3BB-43D7-B05E-274BF242D9E1}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub btn_cancel_Click()
    Unload Me
End Sub

Private Sub btn_ok_Click()
    'per sql Statement daten speichern
    'listbox von oben nach unten durchgehen und in db speicher (orderby anhand der position des Items schreiben)
    Dim counter As Integer
    
    For counter = 0 To Me.lb_dkat.listCount - 1
        Call SQL_Abfragen.Update_KategorieDetail(Me.lb_dkat.list(counter, 0), "OrderBy", counter + 1)
    Next counter
    
    'Detailskategorie neu laden, damit |fffd|nderungen in Masterdaten sofort sichtbar sind
    Call SQL_Abfragen.Get_AllKatDetails
    Unload Me
End Sub

Private Sub UserForm_Initialize()
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
End Sub

'(f|fffd|r ListBox2)
'Das aktive Item wird um eine Position nach unten geschoben
Private Sub btn_down_Click()
    Call nlc_ListboxEvents.btn_down_Click(Me.lb_dkat)
End Sub

'(f|fffd|r ListBox2)
'Das aktive Item wird an die unterster Position geschoben
Private Sub btn_downall_Click()
    Call nlc_ListboxEvents.btn_downall_Click(Me.lb_dkat)
End Sub


'Das aktive Item wird um eine Position nach oben geschoben
Private Sub btn_up_Click()
    Call nlc_ListboxEvents.btn_up_Click(Me.lb_dkat)
End Sub

'Das aktive Item wird an oberste Position geschoben
Private Sub btn_upall_Click()
    Call nlc_ListboxEvents.btn_upall_Click(Me.lb_dkat)
End Sub


Attribute VB_Name = "frm_SQL_Statements"
Attribute VB_Base = "0{ED38D9DF-4B82-4390-BCA7-5A572F4D126F}{A0972829-1944-454D-B0C2-5BE4D649B536}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub btn_cancel_Click()
    Unload Me
End Sub


Private Sub btn_ok_Click()
    Dim col_counter As Integer
    
    nlc_sqlstatements.Cells.ClearContents
    
    If Class_Functions.DB.Select_Statement(Me.txt_statement.text) = True Then
        For col_counter = 0 To Class_Functions.DB.Recordset.Fields.count - 1
           nlc_sqlstatements.Cells(2, col_counter + 1).value = Class_Functions.DB.Recordset.Fields(col_counter).name
        Next col_counter

        nlc_sqlstatements.Cells(3, 1).CopyFromRecordset Class_Functions.DB.Recordset
        nlc_sqlstatements.columns.AutoFit
        
        nlc_sqlstatements.Cells(1, 1).value = Me.txt_selected_statement.text
        Unload Me
    End If
End Sub

Private Sub lb_statements_Click()

    Me.lbl_list_id.Caption = Me.lb_statements.listindex
    Me.txt_selected_statement.text = Me.lb_statements.list(Me.lbl_list_id.Caption, 0)
    Me.txt_statement.text = Me.lb_statements.list(Me.lbl_list_id.Caption, 1)
End Sub


Private Sub txt_selected_statement_Change()
    If VBA.IsNumeric(Me.lbl_list_id.Caption) Then
        nlc_sqlstatements_calc.Cells(Me.lbl_list_id.Caption + 2, 1).value = Me.txt_selected_statement.text
    End If
End Sub

Private Sub txt_statement_Change()
    nlc_sqlstatements_calc.Cells(Me.lb_statements.listindex + 2, 2).value = Me.txt_statement.text
End Sub

Private Sub UserForm_Initialize()
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
End Sub
Attribute VB_Name = "frm_StartWindow"
Attribute VB_Base = "0{87D9A048-6D5D-4AF3-BEDF-608E2E046EED}{3C734C41-5F5F-46A2-9505-5F1553EAEF0E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim error As Boolean

Private Sub btn_ok_Click()
    Unload Me
End Sub

Private Sub UserForm_Activate()
    If error Then
        Unload Me
    End If
End Sub

'Private Sub btn_license_Click()
'    Unload Me
'End Sub

'Private Sub btn_lizensieren_Click()
'    Unload Me
'    frm_reg_user.Show
'End Sub

Private Sub UserForm_Initialize()
    On Error Resume Next
    Dim c As Date
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption, False) & _
                    calc_PW.Cells(10, 3).value & "." & calc_PW.Cells(11, 3).value & "." & calc_PW.Cells(12, 3).value
                    
    If Me.Caption = "Error" & _
                    calc_PW.Cells(10, 3).value & "." & calc_PW.Cells(11, 3).value & "." & calc_PW.Cells(12, 3).value Then
        error = True
        MsgBox "Can|fffd|t connect to SQL Server. Please contact the Administrator!"
        
'        c = VBA.DateTime.Now + TimeValue("00:00:10")
'        'Application.OnTime EarliestTime:=VBA.CDate(VBA.DateTime.Now + VBA.DateTime.Second(1)), Procedure:="frm_StartWindow.Userform_Close", Schedule:=False
'        Application.OnTime VBA.CDate(c), "frm_StartWindow.Userform_Close"
    End If
End Sub
Attribute VB_Name = "frm_addCosttype"
Attribute VB_Base = "0{B38173EF-6E01-4217-9664-589C98AB942F}{8E2FD6A0-1D79-4A9B-9B25-87598AF02B6C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btn_ok_Click()
    On Error GoTo error
    Call SQL_Abfragen.Insert_Kostenart(VBA.Replace(Me.tb_cost_shortname.text, "'", "''"), VBA.Replace(Me.tb_cost_name.text, "'", "''"), "False")
    Call SQL_Abfragen.Get_AllKostenarten(True)
    
    frm_MasterData.lb_costs.RowSource = "frm_Kostenarten"
    
    Unload Me
    Exit Sub
    
error:
    MsgBox nlc_language.FindValue("SMessage_ErrWriteDB"), vbCritical + vbOKOnly
End Sub

Private Sub tb_cost_shortname_Change()
    Call checkAdd
End Sub

Private Sub tb_cost_name_Change()
    Call checkAdd
End Sub

Private Sub UserForm_Initialize()
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    Call setBtnActivity(False)
End Sub

Private Sub checkAdd()
    If Me.tb_cost_shortname.text <> "" Then
        If Me.tb_cost_name.text <> "" Then
            Call setBtnActivity(True)
        Else
            Call setBtnActivity(False)
        End If
    Else
        Call setBtnActivity(False)
    End If

End Sub

Private Sub setBtnActivity(active As Boolean)
    If active Then
        Me.btn_ok.Enabled = True
    Else
        Me.btn_ok.Enabled = False
    End If
End Sub


Attribute VB_Name = "frm_addDKategorie"
Attribute VB_Base = "0{E37BCF1D-6EB1-465E-A604-9A49D579CBB9}{20B460B4-D65F-4EEF-B688-F62898C52F50}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btn_ok_Click()
    If frm_MasterData.lb_dkat.listCount < maxDetail And frm_MasterData.lb_cat.list(frm_MasterData.lb_cat.listindex, 7) <> "nv" Then
        On Error GoTo error
        Dim list_index As Integer
        
        list_index = frm_MasterData.lb_cat.listindex
        
        If VBA.IsNumeric(frm_MasterData.lbl_kat_id_value.Caption) Then
            Call SQL_Abfragen.Insert_KategorieDetail(VBA.Replace(Me.tb_neu_dkat_short.text, "'", "''"), VBA.Replace(Me.tb_neu_dkat.text, "'", "''"), frm_MasterData.lbl_kat_id_value.Caption, frm_MasterData.lb_dkat.listCount + 1)
        End If
        
        Call SQL_Abfragen.Get_AllKatDetails
        Call Named_KatDetails
        
        On Error Resume Next
        
        Err.clear
        frm_MasterData.lb_dkat.RowSource = "KatD_" & frm_MasterData.lb_cat.list(list_index, 0)
        
        If Err.Number <> 0 Then
            frm_MasterData.lb_dkat.RowSource = ""
        End If
        
        Unload Me
    Else
        MsgBox nlc_language.FindValue("SMessage_NoMoreDetails")
    End If
    Exit Sub
    
error:
    MsgBox nlc_language.FindValue("SMessage_ErrWriteDB"), vbCritical + vbOKOnly
End Sub

Private Sub UserForm_Initialize()
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    Call setBtnActivity(False)
End Sub

Private Sub tb_neu_dkat_short_Change()
    Call checkAdd
End Sub

Private Sub tb_neu_dkat_Change()
    Call checkAdd
End Sub

Private Sub checkAdd()
    If Me.tb_neu_dkat_short.text <> "" Then
        If Me.tb_neu_dkat.text <> "" Then
            Call setBtnActivity(True)
        Else
            Call setBtnActivity(False)
        End If
    Else
        Call setBtnActivity(False)
    End If

End Sub

Private Sub setBtnActivity(active As Boolean)
    If active Then
        Me.btn_ok.Enabled = True
    Else
        Me.btn_ok.Enabled = False
    End If
End Sub
Attribute VB_Name = "frm_addKategorie"
Attribute VB_Base = "0{164CB680-17CB-49CE-BF76-AE85CE5DC175}{606539FF-4F5A-49CA-9089-9A151E8C4712}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btn_ok_Click()
    On Error GoTo error
    Dim werte As String
    Dim bit_value As String
    
    If Me.cbb_gesperrt.value <> "" Then
        If Me.cbb_gesperrt.value = "l|fffd|schbar" Then
            werte = "l"
        ElseIf Me.cbb_gesperrt.value = "editierbar" Then
            werte = "e"
        ElseIf Me.cbb_gesperrt.value = "l|fffd|schbar_unsichtbar" Then
            werte = "lu"
        ElseIf Me.cbb_gesperrt.value = "editierbar_unsichtbar" Then
            werte = "eu"
        Else
            werte = "l"
        End If
    End If
    
    If Me.chb_add_achsen_relevant.value = True Then
        bit_value = "true"
    Else
        bit_value = "false"
    End If
    
    If Me.tb_user_colwidth.text = "" Then
        Me.tb_user_colwidth.text = 10
    End If
    
    Call SQL_Abfragen.Insert_Kategorie(VBA.Replace(Me.tb_shortname.text, "'", "''"), VBA.Replace(Me.tb_catname.text, "'", "''"), werte, bit_value, Me.cbb_cattype.Column(0), VBA.Replace(Me.tb_user_colwidth.text, ",", "."))
    Call SQL_Abfragen.Get_AllKategorien
    Call SQL_Abfragen.Get_AllKatDetails
    Call nlc_intern.Named_KatDetails
    
    'ActiveWorkbook.Names.Add Name:="frm_Kategorie", RefersToR1C1:=md_kat.Range(md_kat.Cells(2, 1), md_kat.Cells(calc_master.Range("C4").Value, 13))
    Unload Me
    Exit Sub
    
error:
    MsgBox nlc_language.FindValue("SMessage_ErrWriteDB"), vbCritical + vbOKOnly
End Sub


Private Sub UserForm_Initialize()
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)

    If calc_master.Range("Login").value = "admin" Then
        Me.cbb_gesperrt.visible = True
    Else
        Me.cbb_gesperrt.visible = False
    End If
    
    Call setBtnActivity(False)
End Sub

Private Sub tb_user_colwidth_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
            If VBA.CDbl(tb_user_colwidth.text & VBA.Chr(KeyAscii)) >= 100 Then
                KeyAscii = 0
            ElseIf InStr(1, tb_user_colwidth.text, ",") > 0 Then
                If (VBA.Len(tb_user_colwidth.text) - VBA.InStr(1, tb_user_colwidth.text, ",")) >= 2 Then KeyAscii = 0
            End If
        Case 44 'Dezimalkomma nur einmal zul|fffd|ssig
            If InStr(1, tb_user_colwidth.text, ",") > 0 Then KeyAscii = 0
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub cbb_cattype_Change()
    Call checkAdd
End Sub

Private Sub tb_user_colwidth_Change()
    Call checkAdd
End Sub

Private Sub tb_shortname_Change()
    Call checkAdd
End Sub

Private Sub tb_catname_Change()
    Call checkAdd
End Sub

Private Sub checkAdd()
    If Me.tb_shortname.text <> "" Then
        If Me.tb_catname.text <> "" Then
            If Me.tb_user_colwidth.text <> "" Then
                If cbb_cattype.listindex >= 0 Then
                    Call setBtnActivity(True)
                Else
                    Call setBtnActivity(False)
                End If
            Else
                Call setBtnActivity(False)
            End If
        Else
            Call setBtnActivity(False)
        End If
    Else
        Call setBtnActivity(False)
    End If

End Sub

Private Sub setBtnActivity(active As Boolean)
    If active Then
        Me.btn_ok.Enabled = True
    Else
        Me.btn_ok.Enabled = False
    End If
End Sub

Attribute VB_Name = "frm_addMST"
Attribute VB_Base = "0{05DF0647-A03C-48D3-A176-E193A957E208}{A44D0F0F-5331-4A19-A405-E2A4F09435B6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private datesOK As Boolean

Private Sub btn_ok_Click()
    On Error GoTo Fehler
    Dim last_MST As Integer
    Dim curr_MST As Integer

    last_MST = 0
    
    If checkDate = False Then Exit Sub
    
    If Me.tb_mst_bez.text <> "" Then
        If SQL_Abfragen.Insert_Milestone(VBA.CStr(frm_projects.lbl_pj_id_value.Caption), VBA.Replace(Me.tb_mst_bez.text, "'", "''"), 0, Me.tb_mst_bdate.text, Me.tb_mst_idate.text, Me.tb_mst_adate.text) = False Then
            GoTo Fehler
        End If
        
        Call SQL_Abfragen.Get_Meilensteine(frm_projects.lbl_pj_id_value.Caption)
        
        frm_projects.lb_mst.RowSource = "lb_mst"
        
        Unload Me
    Else
        MsgBox nlc_language.FindValue("SMessage_NoMstNameEntered"), vbInformation + vbOKOnly
    End If
    Exit Sub

Fehler:
    MsgBox nlc_language.FindValue("SMessage_ErrAddMst")
End Sub

Private Sub UserForm_Initialize()
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    Call setBtnActivity(False)
End Sub

Private Sub tb_mst_bez_Change()
    Call checkAdd
End Sub

Private Sub checkAdd()
    If Me.tb_mst_bez.text <> "" Then
        If checkDate Then
            Call setBtnActivity(True)
        Else
            Call setBtnActivity(False)
        End If
    Else
        Call setBtnActivity(False)
    End If
End Sub

Private Sub setBtnActivity(active As Boolean)
    If active Then
        Me.btn_ok.Enabled = True
    Else
        Me.btn_ok.Enabled = False
    End If
End Sub

Private Function checkDate() As Boolean
    datesOK = True
    
    If Me.tb_mst_bdate.text <> "" Then
        If Check_Date(Me.tb_mst_bdate.text) = False Then
            datesOK = False
        End If
    End If
    
    If Me.tb_mst_adate.text <> "" And datesOK <> False Then
        If Check_Date(Me.tb_mst_adate.text) = False Then
            datesOK = False
        End If
    End If
    
    If Me.tb_mst_idate.text <> "" And datesOK <> False Then
        If Check_Date(Me.tb_mst_idate.text) = False Then
            datesOK = False
        End If
    End If
    
    checkDate = datesOK
End Function


Private Sub tb_mst_bdate_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
        Case 46 'Punkt nur zweimal zul|fffd|ssig
            If Len(tb_mst_bdate) = 0 Or UBound(Split(tb_mst_bdate, ".")) >= 2 Then
                KeyAscii = 0
            End If
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub tb_mst_idate_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
        Case 46 'Punkt nur zweimal zul|fffd|ssig
            If Len(tb_mst_idate) = 0 Or UBound(Split(tb_mst_idate, ".")) >= 2 Then
                KeyAscii = 0
            End If
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub tb_mst_adate_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
        Case 46 'Punkt nur zweimal zul|fffd|ssig
            If Len(tb_mst_adate) = 0 Or UBound(Split(tb_mst_adate, ".")) >= 2 Then
                KeyAscii = 0
            End If
        Case Else
            KeyAscii = 0
    End Select
End Sub
Attribute VB_Name = "frm_addRestype"
Attribute VB_Base = "0{141267DE-3F6A-4649-AA74-4595935C9AC0}{4EC80DBB-E45E-48F7-9E05-4F14ACEBBDF0}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btn_ok_Click()
    On Error GoTo error
    If Me.cbb_res_group.text = "" Then
        Call SQL_Abfragen.Insert_Ressourcenart(Me.tb_res_shortname.text, Me.tb_res_name.text)
    Else
        Call SQL_Abfragen.Insert_Ressourcenart(VBA.Replace(Me.tb_res_shortname.text, "'", "''"), VBA.Replace(Me.tb_res_name.text, "'", "''"), VBA.Replace(Me.tb_kostensatz.text, ",", "."), Me.cbb_kostenart.Column(0), Me.cbb_res_group.list(Me.cbb_res_group.listindex, 0))
    End If
    
    Call SQL_Abfragen.Get_AllRessourcenarten
    Call frm_MasterData.generate_cbb_resgroup
    frm_MasterData.lb_resources.RowSource = "frm_Ressourcenarten"
    
    Unload Me
    Exit Sub
    
error:
    MsgBox nlc_language.FindValue("SMessage_ErrWriteDB"), vbCritical + vbOKOnly
End Sub

Private Sub UserForm_Initialize()
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)

    Dim i As Integer
    
    For i = 0 To frm_MasterData.cbb_kostenart.listCount - 1 Step 1
            Me.cbb_kostenart.addItem (frm_MasterData.cbb_kostenart.list(i, 0))
            Me.cbb_kostenart.list(i, 1) = frm_MasterData.cbb_kostenart.list(i, 1)
    Next i
    
    For i = 0 To frm_MasterData.cbb_res_group.listCount - 1 Step 1
        Me.cbb_res_group.addItem (frm_MasterData.cbb_res_group.list(i, 0))
        If VBA.IsNull(frm_MasterData.cbb_res_group.list(i, 1)) Then
            Me.cbb_res_group.list(i, 1) = ""
        Else
            Me.cbb_res_group.list(i, 1) = frm_MasterData.cbb_res_group.list(i, 1)
        End If
    Next i
    
    Call setChbActivity(False)
    Call setBtnActivity(False)
End Sub

Private Sub cbb_res_group_Change()
    If Me.cbb_res_group.text = "" Then
        Call setChbActivity(False)
    Else
        Call setChbActivity(True)
    End If
    
    Call checkAdd
End Sub

Private Sub cbb_kostenart_Change()
    Call checkAdd
End Sub

Private Sub tb_res_shortname_Change()
    Call checkAdd
End Sub

Private Sub tb_res_name_Change()
    Call checkAdd
End Sub


Private Sub tb_user_colwidth_Change()
    Call checkAdd
End Sub

Private Sub tb_kostensatz_Change()
    Call checkAdd
End Sub

Private Sub checkAdd()
    If Me.tb_res_shortname.text <> "" Then
        If Me.tb_res_name.text <> "" Then
            'Wenn Gruppe, dann nichts mehr fragen
            If Me.cbb_res_group.text <> "" Then
                If Me.tb_kostensatz.text <> "" Then
                    If Me.cbb_kostenart.listindex >= 0 Then
                        Call setBtnActivity(True)
                    Else
                        Call setBtnActivity(False)
                    End If
                Else
                    Call setBtnActivity(False)
                End If
            Else
                Call setBtnActivity(True)
            End If
        Else
            Call setBtnActivity(False)
        End If
    Else
        Call setBtnActivity(False)
    End If

End Sub

Private Sub setBtnActivity(active As Boolean)
    If active Then
        Me.btn_ok.Enabled = True
    Else
        Me.btn_ok.Enabled = False
    End If
End Sub

Private Sub setChbActivity(active As Boolean)
    If active Then
        Me.tb_kostensatz.Enabled = True
        Me.tb_kostensatz.BackColor = &HFFFFFF
        Me.cbb_kostenart.Enabled = True
        Me.cbb_kostenart.BackColor = &HFFFFFF
    Else
        Me.tb_kostensatz.Enabled = False
        Me.tb_kostensatz.BackColor = &H8000000F
        Me.tb_kostensatz.text = ""
        Me.cbb_kostenart.Enabled = False
        Me.cbb_kostenart.BackColor = &H8000000F
        Me.cbb_kostenart.listindex = -1
    End If
End Sub



Private Sub tb_kostensatz_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
        Case 44 'Dezimalkomma nur einmal zul|fffd|ssig
            If InStr(1, tb_kostensatz, ",") > 0 Then KeyAscii = 0
        Case Else
            KeyAscii = 0
    End Select
End Sub

Attribute VB_Name = "frm_addUser"
Attribute VB_Base = "0{E26F8A6D-250E-45CD-9EF8-735774A2D062}{A5ECCE22-4226-4489-8F40-943B621313F2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btn_ok_Click()
    If SQL_Abfragen.Check_UserMax(calc_master.Range("PF_Settings_ID")) = False Then
        Exit Sub
    End If
    
    On Error GoTo error
    Dim counter As Integer
    Dim exist As Boolean
    
    exist = False
    
    For counter = 0 To frm_MasterData.lb_users.listCount - 1 Step 1
        If VBA.LCase(Me.tb_username.text) = frm_MasterData.lb_users.list(counter, 0) Then
            exist = True
            Exit For
        End If
    Next counter
    
    If exist Then
        MsgBox nlc_language.FindValue("SMessage_UsererAlreadyExists"), vbInformation + vbOKOnly
    Else
        Call SQL_Abfragen.Insert_User(VBA.Replace(VBA.LCase(Me.tb_username.text), "'", "''"))
        Call SQL_Abfragen.Get_AllUsers
        
        frm_MasterData.lb_users.RowSource = "frm_User"
        
        Unload Me
    End If
    Exit Sub
    
error:
    MsgBox nlc_language.FindValue("SMessage_ErrWriteDB"), vbCritical + vbOKOnly
End Sub

Private Sub UserForm_Initialize()
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    Call setBtnActivity(False)
End Sub





Private Sub tb_username_Change()
    Call checkAdd
End Sub

Private Sub checkAdd()
    If Me.tb_username.text <> "" Then
        Call setBtnActivity(True)
    Else
        Call setBtnActivity(False)
    End If

End Sub

Private Sub setBtnActivity(active As Boolean)
    If active Then
        Me.btn_ok.Enabled = True
    Else
        Me.btn_ok.Enabled = False
    End If
End Sub




Attribute VB_Name = "frm_addVerf"
Attribute VB_Base = "0{1A20EC67-90FF-4990-819B-99AAAE49E9E9}{139BAAAB-E07F-495F-869D-F868A8B2872A}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Dim onchangevalue As String

Private Sub tb_verf_month_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
            If VBA.Len(tb_verf_month) > 2 Then KeyAscii = 0
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub tb_verf_value_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
        Case 44 'Komma nur einmal zul|fffd|ssig
            If Len(Me.tb_verf_value) = 0 Or UBound(Split(Me.tb_verf_value, ",")) >= 1 Then
                KeyAscii = 0
            End If
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub tb_verf_year_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub UserForm_Initialize()
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    Call setBtnActivity(False)
End Sub

Private Sub tb_verf_month_Change()
    If VBA.CInt(Me.tb_verf_month.text) <= 12 Then
        onchangevalue = Me.tb_verf_month.text
    Else
        Me.tb_verf_month.text = onchangevalue
    End If
    
    Call checkAdd
End Sub

Private Sub tb_verf_value_Change()
    Call checkAdd
End Sub

Private Sub tb_verf_year_Change()
    If Me.tb_verf_year.text <> "" Then
        If VBA.Len(Me.tb_verf_year) < 5 Then
            If VBA.CInt(Me.tb_verf_year.text) < 2499 Or VBA.CInt(Me.tb_verf_year.text) > 2000 Then
                onchangevalue = Me.tb_verf_year.text
            Else
                Me.tb_verf_year.text = onchangevalue
            End If
        Else
            Me.tb_verf_year.text = onchangevalue
        End If
        
        Call checkAdd
    End If
End Sub


Private Sub btn_ok_Click()
    On Error GoTo error
    If SQL_Abfragen.Insert_Verfuegbarkeit(Me.lbl_ressart_id.Caption, Me.tb_verf_month.text, Me.tb_verf_year.text, Me.tb_verf_value.text) = False Then GoTo error

    Call SQL_Abfragen.Get_VerfuegbarkeitFromRessart(Me.lbl_ressart_id.Caption)
    
    frm_verfuegbarkeit.lb_verfuegbarkeit.RowSource = "frm_Verfuegbarkeit"
    
    frm_verfuegbarkeit.tb_month.value = ""
    frm_verfuegbarkeit.tb_year.value = ""
    frm_verfuegbarkeit.tb_value.value = ""
    
    Unload Me
    Exit Sub
    
error:
    MsgBox nlc_language.FindValue("SMessage_ErrWriteDB"), vbCritical + vbOKOnly
End Sub


Private Sub checkAdd()
    If Me.tb_verf_month.text <> "" And Me.tb_verf_year.text <> "" And Me.tb_verf_value.text <> "" Then
        If VBA.CInt(Me.tb_verf_month.text) <= 12 Then
            If VBA.Len(Me.tb_verf_year) < 5 Then
                If VBA.CInt(Me.tb_verf_year.text) < 2499 And VBA.CInt(Me.tb_verf_year.text) > 2000 Then
                    Call setBtnActivity(True)
                    Exit Sub
                End If
            End If
        End If
    End If

    Call setBtnActivity(False)
    
End Sub

Private Sub setBtnActivity(active As Boolean)
    If active Then
        Me.btn_ok.Enabled = True
    Else
        Me.btn_ok.Enabled = False
    End If
End Sub
Attribute VB_Name = "frm_change_pw"
Attribute VB_Base = "0{DED0B49D-1151-4DFB-A7DB-4842CD41767E}{F1FF691E-D6C4-4C05-A524-850CFAEBB4C6}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Public Sub btn_cancel_Click()
    Unload Me
End Sub

Public Sub OKAY1_Click()
    
    Dim Pass_E1 As String
    Dim Pass_E2 As String
    Dim Pass_E3 As String
    Dim Pass_O As String
    
    Pass_E1 = frm_change_pw.PW_Old.value
    Pass_E2 = frm_change_pw.PW_New1.value
    Pass_E3 = frm_change_pw.PW_New2.value
    Pass_O = calc_PW.Range("C2").value
    
    If Pass_E1 = "" Then
        frm_change_pw.PW_Old.SetFocus
    Else
        frm_change_pw.PW_New1.SetFocus
    End If
    
End Sub

Public Sub OKAY2_Click()
    
    Dim Pass_E1 As String
    Dim Pass_E2 As String
    Dim Pass_E3 As String
    Dim Pass_O As String
    
    Pass_E1 = frm_change_pw.PW_Old.value
    Pass_E2 = frm_change_pw.PW_New1.value
    Pass_E3 = frm_change_pw.PW_New2.value
    Pass_O = calc_PW.Range("C2").value
    
    If Pass_E1 = "" Then
        frm_change_pw.PW_Old.SetFocus
    ElseIf Pass_E2 = "" Then
        frm_change_pw.PW_New1.SetFocus
    Else
        frm_change_pw.PW_New2.SetFocus
    End If
       
End Sub

Public Sub btn_ok_Click()
    
    Dim Pass_E1 As String
    Dim Pass_E2 As String
    Dim Pass_E3 As String
    Dim Pass_O As String
    
    Pass_E1 = frm_change_pw.PW_Old.value
    Pass_E2 = frm_change_pw.PW_New1.value
    Pass_E3 = frm_change_pw.PW_New2.value
    Pass_O = calc_PW.Range("C2").value
    
    If Pass_E1 = "" Then
        frm_change_pw.PW_Old.SetFocus
    ElseIf Pass_E2 = "" Then
        frm_change_pw.PW_New1.SetFocus
    ElseIf Pass_E3 = "" Then
        frm_change_pw.PW_New2.SetFocus
    Else
        If Pass_E1 = Pass_O Then
            If Pass_E2 = Pass_E3 Then
                calc_PW.Range("C2").value = Pass_E2
                Unload frm_change_pw
            Else
                MsgBox nlc_language.FindValue("SMessage_pw2")
            End If
        Else
            Unload frm_change_pw
            MsgBox nlc_language.FindValue("SMessage_pw")
        End If
    End If
    
End Sub

Private Sub UserForm_Initialize()
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
End Sub


Attribute VB_Name = "frm_del_projekt"
Attribute VB_Base = "0{9A88C1FC-B00E-45C6-9AFB-3FA201859B1D}{C445591D-D7FE-4FD6-A0B1-1984961605BF}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub btn_cancel_Click()
    Unload Me
End Sub

Private Sub btn_del_pj_Click()
    If MsgBox(nlc_language.FindValue("SMessage_DelPj"), vbQuestion + vbYesNo) = vbYes Then
        Delete_Project (frm_projects.lbl_pj_id_value.Caption)
        Unload Me
        calc_master.Range("sel_pj_id").value = ""
        Call frm_projects.UserForm_Initialize
    End If
End Sub

Private Sub tb_PJNummer_Change()
    If Me.tb_PJNummer.text = "" Then
        Me.lbl_check.Caption = ""
    ElseIf Me.tb_PJNummer = VBA.Left(Me.lbl_pj_del_pj_name.Caption, VBA.InStr(Me.lbl_pj_del_pj_name.Caption, " - ") - 1) Then
        Me.lbl_check.Caption = "R"
        Me.lbl_check.ForeColor = &H40A621
        Me.btn_del_pj.Enabled = True
    Else
        Me.lbl_check.Caption = "Q"
        Me.lbl_check.ForeColor = &H2411B9
        Me.btn_del_pj.Enabled = False
    End If
End Sub

Private Sub UserForm_Initialize()
    Me.lbl_check.Caption = ""
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    Me.lbl_pj_del_question.Caption = VBA.Left(Me.lbl_pj_del_question.Caption, VBA.Len(Me.lbl_pj_del_question.Caption) - 1)
    Me.lbl_pj_del_warning.Caption = VBA.Left(Me.lbl_pj_del_warning.Caption, VBA.Len(Me.lbl_pj_del_warning.Caption) - 1)
End Sub
Attribute VB_Name = "frm_enter_pw"
Attribute VB_Base = "0{A3DE428C-83D7-4946-BC09-58B75E651A8B}{D60B5731-414D-482F-963A-A8FDD1C17889}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Public Sub btn_cancel_Click()
    Unload frm_enter_pw
End Sub

Public Sub btn_ok_Click()
    
    Dim Pass_E As String
    Dim Pass_O As String
    
    Dim solutions As Boolean
    Dim Sperren As Boolean
    
    Pass_E = frm_enter_pw.Password.value
    Pass_O = calc_PW.Range("C2").value
    Unload frm_enter_pw
    
    If Pass_E = Pass_O Or Pass_E = pw_inno Then
    
        If Pass_E <> pw_inno Then
            solutions = False
            Sperren = True
            calc_master.Range("Login").value = "user"
        Else
            solutions = True
            Sperren = False
            calc_master.Range("Login").value = "admin"
        End If
        
        On Error GoTo Ende
        nlc_intern.Application_off
        
       
        nlc_ppf_xl.Unprotect (Pass_O)
        Call nlc_intern.blatt_sperren(nlc_ppf_nav.name, Pass_O, Sperren, "", False, solutions, solutions)
        Call nlc_intern.blatt_sperren(nlc_ppf_pipe.name, Pass_O, Sperren, "", False, solutions, solutions)
        Call nlc_intern.blatt_sperren(nlc_ppf_pie.name, Pass_O, Sperren, "", False, solutions, solutions)
        Call nlc_intern.blatt_sperren(nlc_ppf_PJTabelle.name, Pass_O, Sperren, "", False, solutions, solutions)
        Call nlc_intern.blatt_sperren(nlc_ppf_Gantt.name, Pass_O, Sperren, "", False, solutions, solutions)
        Call nlc_intern.blatt_sperren(nlc_ppf_costhisto.name, Pass_O, Sperren, "", False, solutions, solutions)
        Call nlc_intern.blatt_sperren(nlc_ppf_resshisto.name, Pass_O, Sperren, "", False, solutions, solutions)
        Call nlc_intern.blatt_sperren(nlc_ppf_bar.name, Pass_O, Sperren, "", False, solutions, solutions)
        Call nlc_intern.blatt_sperren(nlc_ppf_matrix.name, Pass_O, Sperren, "", False, solutions, solutions)
        Call nlc_intern.blatt_sperren(nlc_ppf_viewer.name, Pass_O, Sperren, "", False, solutions, solutions)
        
        nlc_ppf_nav.Shapes.Range(Array("btn_edit_masterdata")).visible = True
        nlc_ppf_PJTabelle.Shapes.Range(Array("btn_bigger")).visible = True
        nlc_ppf_PJTabelle.Shapes.Range(Array("btn_smaler")).visible = True
        
        If solutions = True Then
            nlc_sqlstatements.visible = xlSheetVisible
            nlc_sqlstatements_calc.visible = xlSheetVisible
            calc_frm_projects.visible = xlSheetVisible
            calc_frm_masterdata.visible = xlSheetVisible
            calc_master.visible = xlSheetVisible
            calc_pipe_set.visible = xlSheetVisible
            calc_PW.visible = xlSheetVisible
            calc_pv_ress.visible = xlSheetVisible
            calc_pv_cost.visible = xlSheetVisible
            DB_Language.visible = xlSheetVisible
            
            nlc_ppf_nav.Shapes.Range(Array("btn_import_data")).visible = True
        End If
        
        nlc_ppf_nav.Activate
                
        calc_PW.Range("C4") = "NO"
        frm_Admin.btn_change_pw.Enabled = True
        'frm_Admin.btn_sperren.Caption = nlc_Language_userforms("frm_Admin", "Sperren")
Ende:
        nlc_intern.Application_on
    Else
        MsgBox nlc_language.FindValue("SMassage_pw")
    End If
            
End Sub


Private Sub Password_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 13 Then btn_ok_Click
End Sub

Private Sub UserForm_Initialize()
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
End Sub


Attribute VB_Name = "frm_farbe"
Attribute VB_Base = "0{06742E5A-7D50-4E17-A406-C4BE7A533D7C}{E308D099-FF00-4B3A-928E-AFB3C2A12C74}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Dim farbe_r As String
Dim farbe_g As String
Dim farbe_b As String

Private Sub btn_color_1_Click()
    Me.btn_nachher.BackColor = Me.btn_color_1.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_1.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_1.Caption
End Sub
Private Sub btn_color_2_Click()
    Me.btn_nachher.BackColor = Me.btn_color_2.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_2.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_2.Caption
End Sub
Private Sub btn_color_3_Click()
    Me.btn_nachher.BackColor = Me.btn_color_3.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_3.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_3.Caption
End Sub
Private Sub btn_color_4_Click()
    Me.btn_nachher.BackColor = Me.btn_color_4.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_4.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_4.Caption
End Sub
Private Sub btn_color_5_Click()
    Me.btn_nachher.BackColor = Me.btn_color_5.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_5.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_5.Caption
End Sub
Private Sub btn_color_6_Click()
    Me.btn_nachher.BackColor = Me.btn_color_6.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_6.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_6.Caption
End Sub
Private Sub btn_color_7_Click()
    Me.btn_nachher.BackColor = Me.btn_color_7.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_7.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_7.Caption
End Sub
Private Sub btn_color_8_Click()
    Me.btn_nachher.BackColor = Me.btn_color_8.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_8.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_8.Caption
End Sub
Private Sub btn_color_9_Click()
    Me.btn_nachher.BackColor = Me.btn_color_9.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_9.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_9.Caption
End Sub
Private Sub btn_color_10_Click()
    Me.btn_nachher.BackColor = Me.btn_color_10.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_10.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_10.Caption
End Sub
Private Sub btn_color_11_Click()
    Me.btn_nachher.BackColor = Me.btn_color_11.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_11.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_11.Caption
End Sub
Private Sub btn_color_12_Click()
    Me.btn_nachher.BackColor = Me.btn_color_12.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_12.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_12.Caption
End Sub
Private Sub btn_color_13_Click()
    Me.btn_nachher.BackColor = Me.btn_color_13.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_13.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_13.Caption
End Sub
Private Sub btn_color_14_Click()
    Me.btn_nachher.BackColor = Me.btn_color_14.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_14.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_14.Caption
End Sub
Private Sub btn_color_15_Click()
    Me.btn_nachher.BackColor = Me.btn_color_15.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_15.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_15.Caption
End Sub
Private Sub btn_color_16_Click()
    Me.btn_nachher.BackColor = Me.btn_color_16.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_16.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_16.Caption
End Sub
Private Sub btn_color_17_Click()
    Me.btn_nachher.BackColor = Me.btn_color_17.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_17.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_17.Caption
End Sub
Private Sub btn_color_18_Click()
    Me.btn_nachher.BackColor = Me.btn_color_18.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_18.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_18.Caption
End Sub
Private Sub btn_color_19_Click()
    Me.btn_nachher.BackColor = Me.btn_color_19.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_19.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_19.Caption
End Sub
Private Sub btn_color_20_Click()
    Me.btn_nachher.BackColor = Me.btn_color_20.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_20.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_20.Caption
End Sub
Private Sub btn_color_21_Click()
    Me.btn_nachher.BackColor = Me.btn_color_21.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_21.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_21.Caption
End Sub
Private Sub btn_color_22_Click()
    Me.btn_nachher.BackColor = Me.btn_color_22.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_22.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_22.Caption
End Sub
Private Sub btn_color_23_Click()
    Me.btn_nachher.BackColor = Me.btn_color_23.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_23.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_23.Caption
End Sub
Private Sub btn_color_24_Click()
    Me.btn_nachher.BackColor = Me.btn_color_24.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_24.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_24.Caption
End Sub
Private Sub btn_color_25_Click()
    Me.btn_nachher.BackColor = Me.btn_color_25.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_25.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_25.Caption
End Sub
Private Sub btn_color_26_Click()
    Me.btn_nachher.BackColor = Me.btn_color_26.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_26.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_26.Caption
End Sub
Private Sub btn_color_27_Click()
    Me.btn_nachher.BackColor = Me.btn_color_27.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_27.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_27.Caption
End Sub
Private Sub btn_color_28_Click()
    Me.btn_nachher.BackColor = Me.btn_color_28.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_28.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_28.Caption
End Sub
Private Sub btn_color_29_Click()
    Me.btn_nachher.BackColor = Me.btn_color_29.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_29.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_29.Caption
End Sub
Private Sub btn_color_30_Click()
    Me.btn_nachher.BackColor = Me.btn_color_30.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_30.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_30.Caption
End Sub
Private Sub btn_color_31_Click()
    Me.btn_nachher.BackColor = Me.btn_color_31.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_31.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_31.Caption
End Sub
Private Sub btn_color_32_Click()
    Me.btn_nachher.BackColor = Me.btn_color_32.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_32.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_32.Caption
End Sub
Private Sub btn_color_33_Click()
    Me.btn_nachher.BackColor = Me.btn_color_33.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_33.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_33.Caption
End Sub
Private Sub btn_color_34_Click()
    Me.btn_nachher.BackColor = Me.btn_color_34.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_34.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_34.Caption
End Sub
Private Sub btn_color_35_Click()
    Me.btn_nachher.BackColor = Me.btn_color_35.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_35.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_35.Caption
End Sub
Private Sub btn_color_36_Click()
    Me.btn_nachher.BackColor = Me.btn_color_36.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_36.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_36.Caption
End Sub
Private Sub btn_color_37_Click()
    Me.btn_nachher.BackColor = Me.btn_color_37.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_37.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_37.Caption
End Sub
Private Sub btn_color_38_Click()
    Me.btn_nachher.BackColor = Me.btn_color_38.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_38.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_38.Caption
End Sub
Private Sub btn_color_39_Click()
    Me.btn_nachher.BackColor = Me.btn_color_39.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_39.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_39.Caption
End Sub
Private Sub btn_color_40_Click()
    Me.btn_nachher.BackColor = Me.btn_color_40.BackColor
    Me.btn_nachher.ForeColor = Me.btn_color_40.ForeColor
    Me.lbl_select_id.Caption = Me.btn_color_40.Caption
End Sub

Private Sub btn_cancel_Click()
    Unload Me
End Sub

Private Sub btn_ok_Click()
    If click = False And Me.lbl_select_id.Caption <> 0 Then
        click = True
        frm_MasterData.sort = True
        
        If VBA.IsNumeric(frm_MasterData.lbl_dkat_id_value.Caption) Then
            Dim list_index As Integer

            list_index = frm_MasterData.lb_dkat.listindex

            Call SQL_Abfragen.Update_KategorieDetail(frm_MasterData.lbl_dkat_id_value.Caption, _
                                                        "Farbe", Me.lbl_select_id.Caption)
            Call SQL_Abfragen.Get_AllKatDetails
            frm_MasterData.lb_dkat.listindex = list_index
        End If
        frm_MasterData.btn_color.BackColor = btn_nachher.BackColor
        frm_MasterData.btn_color.ForeColor = btn_nachher.ForeColor
        
        click = False
        frm_MasterData.sort = False
    End If
    Unload Me
End Sub

Private Sub UserForm_Initialize()
    Dim btn As CommandButton
    Dim color_value As String
    Dim farbe As String
    
    Me.btn_vorher.BackColor = frm_MasterData.btn_color.BackColor
    Me.btn_vorher.ForeColor = frm_MasterData.btn_color.ForeColor
    
    On Error Resume Next
    For Each btn In Me.Controls
        If VBA.IsNumeric(btn.Caption) = True Then
            color_value = calc_master.Cells(btn.Caption + 11, 10).value
            farbe_r = ActiveWorkbook.Colors(color_value) And vbRed
            farbe_g = (ActiveWorkbook.Colors(color_value) And vbGreen) \ &H100
            farbe_b = (ActiveWorkbook.Colors(color_value) And vbBlue) \ &H10000

            btn.BackColor = VBA.RGB(farbe_r, farbe_g, farbe_b)
            
            If calc_master.Cells(btn.Caption + 11, 11).value = "s" Then
                btn.ForeColor = VBA.RGB(0, 0, 0)
            ElseIf calc_master.Cells(btn.Caption + 11, 11).value = "w" Then
                btn.ForeColor = VBA.RGB(255, 255, 255)
            End If
        End If
    Next btn
    
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
End Sub
Attribute VB_Name = "frm_fieldVisibility"
Attribute VB_Base = "0{55DC9C4A-9FB7-4F9C-A069-213C4895E937}{917C092C-A2A9-4D10-8AC1-066AA9434404}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btn_ok_Click()
    Unload Me
End Sub

Public Sub btn_select_all_Click()
    Dim lCount As Long
    
    For lCount = 0 To Me.lb_fieldVisibility.listCount - 1
        Me.lb_fieldVisibility.Selected(lCount) = True
    Next
    
    'Werte in DB speichern
    If SQL_Abfragen.Insert_FieldVisibility(calc_master.Range("WindowsLogin").value, Me.lb_fieldVisibility) = False Then
        MsgBox nlc_language.FindValue("SMessage_ErrWriteDB")
    End If
End Sub

Private Sub btn_deselect_all_Click()
    Dim lCount As Long
    
    For lCount = 0 To Me.lb_fieldVisibility.listCount - 1
        Me.lb_fieldVisibility.Selected(lCount) = False
    Next
    
    'Werte in DB speichern
    If SQL_Abfragen.Insert_FieldVisibility(calc_master.Range("WindowsLogin").value, Me.lb_fieldVisibility) = False Then
        MsgBox nlc_language.FindValue("SMessage_ErrWriteDB")
    End If
End Sub

Private Sub UserForm_Initialize()
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    
    Call lb_FieldVisibility_aufbauen
    Call SQL_Abfragen.Get_FieldVisibility(calc_master.Range("WindowsLogin").value, Me.lb_fieldVisibility)
End Sub

Private Sub lb_FieldVisibility_aufbauen()
    Dim katItems As Variant
    Dim i As Integer
    
    katItems = SQL_Abfragen.Get_FieldVisibilityList()
    Me.lb_fieldVisibility.clear
    
    If katItems(0, 0) = "leer" Then Exit Sub
    
    For i = 0 To UBound(katItems, 2) Step 1
        Me.lb_fieldVisibility.addItem katItems(0, i)
        Me.lb_fieldVisibility.list(Me.lb_fieldVisibility.listCount - 1, 1) = katItems(1, i)
    Next i
End Sub

Private Sub lb_fieldVisibility_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    If SQL_Abfragen.Insert_FieldVisibility(calc_master.Range("WindowsLogin").value, Me.lb_fieldVisibility) = False Then
        MsgBox nlc_language.FindValue("SMessage_ErrWriteDB")
    End If
End Sub
Attribute VB_Name = "frm_pj_resslist"
Attribute VB_Base = "0{D574AD56-8693-4FC9-8687-B4FB64EAA5FE}{EC1B1D1E-F92F-41F6-8F25-9BA921639EAE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private Sub btn_schliessen_Click()
    Unload Me
End Sub

Private Sub UserForm_Initialize()
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
End Sub
Attribute VB_Name = "frm_projects"
Attribute VB_Base = "0{8880C7F3-F6E4-4283-8B73-49D45C1F23AB}{7D4DBC8A-9E7C-4A84-90A5-BEE4714F0182}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Dim pj_laden As Boolean
Dim ress_cost_change As Boolean
Dim click As Boolean
Dim cbb_clear As Boolean
Dim original_value As String
Dim allgemein_change As Boolean
Dim tb_wert_Update As Boolean
Dim CE() As New Check_Eingabe
Private pj_listindex As Integer
Dim ifCBBActiv As Boolean
Dim KatValueLabel As String

Private Sub btn_add_mst_Click()
    frm_addMST.Show
    
    Call setMSTActivity(False)
    On Error Resume Next
    
    If Me.lb_mst.list(0, 0) = "" Then
        Call setMSTListActivity(False)
    Else
        Call setMSTListActivity(True)
    End If
End Sub

Private Sub btn_del_mst_Click()
    If click = False Then
        click = True
        Dim listindex As Integer
        
        listindex = Me.lb_mst.listindex
        
        If VBA.IsNumeric(Me.lbl_mst_id_value.Caption) Then
            Call SQL_Abfragen.Update_MilestoneValues(Me.lbl_pj_id_value.Caption, Me.lbl_mst_id_value.Caption, "active", "False")
            Call SQL_Abfragen.Get_Meilensteine(Me.lbl_pj_id_value.Caption)
        End If
        
        Call setMSTActivity(False)
        
        If Me.lb_mst.list(0, 0) = "" Then
        Call setMSTListActivity(False)
    Else
        Call setMSTListActivity(True)
    End If
        
        click = False
    End If
End Sub

Private Sub btn_edit_textfield_Click()
    original_value = Me.cbb_user_feld.Column(2)
    frm_projects_textfield.Show
    Call tb_wert_Exit_function
End Sub

Private Sub btn_expand_language_Click()
    If Me.Width = 341.25 Then
        Me.Width = 455.25
        Me.TabPage.Width = 438
        Me.btn_expand_language.Caption = "|fffd|"
        Me.btn_mst_expand_language.Caption = "|fffd|"
        btn_user_felder_expand_language.Caption = "|fffd|"
        Me.btn_schliessen.Left = 372
        img_trennlinie_1.visible = True
        img_trennlinie_2.visible = True
        img_trennlinie_3.visible = True
        img_trennlinie_4.visible = True
        img_trennlinie_5.visible = True
    Else
        Me.Width = 341.25
        Me.TabPage.Width = 324
        Me.btn_expand_language.Caption = "|fffd|"
        Me.btn_mst_expand_language.Caption = "|fffd|"
        btn_user_felder_expand_language.Caption = "|fffd|"
        Me.btn_schliessen.Left = 258 '180
        img_trennlinie_1.visible = False
        img_trennlinie_2.visible = False
        img_trennlinie_3.visible = False
        img_trennlinie_4.visible = False
        img_trennlinie_5.visible = False
    End If
End Sub

Private Sub btn_fieldVisibility_Click()
    frm_fieldVisibility.Show
    
    'neu laden
    Call SQL_Abfragen.Get_FieldVisibility(calc_master.Range("WindowsLogin").value, Me.lb_cat)
    Call SQL_Abfragen.Get_Kategorie(Me.lbl_pj_id_value.Caption)
    Me.lb_cat.RowSource = "lb_kategorien"
    Me.cbb_user_feld.RowSource = "lb_kategorien"
End Sub

Private Sub btn_mst_expand_language_Click()
    Call btn_expand_language_Click
End Sub

Private Sub btn_neues_projekt_Click()
    
    If Class_Functions.DB.Select_Statement("SELECT count(ID) as Anz FROM [DB_Projekte] WHERE active <> 0") = True Then
        If Class_Functions.DB.Recordset!Anz >= maxP Then
            MsgBox "Sie k|fffd|nnen keine weiteren Projekte anlegen. Die maximale Anzahl von " & maxP & " aktiven Projekten ist erreicht."
        Else
            Me.lbl_projekt.visible = False
            Me.cbb_projekte.visible = False
            Me.btn_neues_projekt.visible = False
        
            Me.lbl_pj_nr_neu.visible = True
            Me.tb_pj_nr_neu.visible = True
            Me.btn_projekt_hinzufuegen.visible = True
        
            Me.Top = Me.Top '+ VBA.Round((Me.Height / 2), 0)
            
            Me.Height = 60
        End If
    End If
    
    
    
End Sub

Private Sub btn_projekt_del_Click()
    frm_del_projekt.lbl_pj_del_pj_name.Caption = Me.cbb_projekte.text
    frm_del_projekt.Show
End Sub

Private Sub btn_refresh_costverteilung_Click()
    Call RefreshCostVerteilung
End Sub

Private Sub btn_refresh_ressverteilung_Click()
    Call RefreshRessVerteilung
End Sub

Private Sub btn_schliessen_Click()
    Unload Me
End Sub

Private Sub btn_projekt_hinzufuegen_Click()
    Dim pjnr As String
    
    If Me.tb_pj_nr_neu.text <> "" Then
        If Me.btn_projekt_hinzufuegen.Caption = "Nummer pr|fffd|fen" Then
            If VBA.InStr(1, Me.tb_pj_nr_neu.text, " - ") > 0 Then
                MsgBox "Der Projektcode darf die Zeichenfolge ' - ' nicht enthalten. Verwenden Sie stattdessen nur '-'."
            Else
                If Class_Functions.DB.Select_Statement("SELECT ID FROM [DB_Projekte] WHERE Projektcode LIKE '" & VBA.Replace(Me.tb_pj_nr_neu.text, "'", "''") & "'") = True Then
                    If Class_Functions.DB.Recordset.EOF = True Then
                        Me.btn_projekt_hinzufuegen.BackColor = VBA.RGB(33, 166, 64)
                        Me.btn_projekt_hinzufuegen.Caption = "Projekt anlegen"
                    Else
                        MsgBox nlc_language.FindValue("SMessage_PjNoExists")
                        Me.btn_projekt_hinzufuegen.BackColor = VBA.RGB(185, 17, 36)
                        Me.btn_projekt_hinzufuegen.Caption = "Nummer pr|fffd|fen"
                    End If
                End If
            End If
        Else
            pjnr = Me.tb_pj_nr_neu.text
            Me.Hide
            
            Me.btn_projekt_hinzufuegen.Caption = "Nummer pr|fffd|fen"
            
            On Error GoTo Fehler
            If SQL_Abfragen.Insert_Projekt(VBA.Replace(Me.tb_pj_nr_neu.text, "'", "''")) = False Then GoTo Fehler
            If SQL_Abfragen.Insert_KategorieValues(SQL_Abfragen.Get_Projektwert(VBA.Replace(Me.tb_pj_nr_neu.text, "'", "''"), "ID"), "29", "leer", Range("PFType_ID").value, "Wert") = False Then GoTo Fehler
            If SQL_Abfragen.Insert_KategorieValues(SQL_Abfragen.Get_Projektwert(VBA.Replace(Me.tb_pj_nr_neu.text, "'", "''"), "ID"), "8", Me.tb_pj_nr_neu.text, "NULL", "Wert") = False Then GoTo Fehler
            
            Call UserForm_Initialize

            Me.lbl_pj_nr_neu.visible = False
            Me.tb_pj_nr_neu.visible = False
            Me.btn_projekt_hinzufuegen.visible = False

            Me.lbl_projekt.visible = True
            Me.cbb_projekte.visible = True
            Me.btn_neues_projekt.visible = True

            Me.Height = 456.75
            Me.Top = Me.Height / 2

            Me.tb_pj_nr_neu.text = ""
            Me.btn_projekt_hinzufuegen.BackColor = VBA.RGB(216, 133, 29)
            
            Me.cbb_projekte.text = pjnr & " - " & pjnr

            Me.Show
        End If
    End If
    
    Exit Sub
    
Fehler:
    MsgBox nlc_language.FindValue("SMessage_ErrAddProject")
End Sub

Public Sub btn_select_all_Click() 'TODO
    Dim lCount As Long
    
    For lCount = 0 To Me.lb_users.listCount - 1
        Me.lb_users.Selected(lCount) = True
    Next
    
    'Werte in DB speichern
    If SQL_Abfragen.Insert_UserRights(Me.lbl_pj_id_value.Caption, Me.lb_users) = False Then
        MsgBox nlc_language.FindValue("SMessage_ErrWriteDB")
    End If
End Sub

Private Sub lb_users_aufbauen()
    Dim userItems As Variant
    Dim i As Integer
    
    userItems = SQL_Abfragen.Get_UserRightsList()
    Me.lb_users.clear
    
    If userItems(0) = "leer" Then Exit Sub
    
    For i = 0 To UBound(userItems) Step 1
        Me.lb_users.addItem userItems(i)
    Next i
End Sub

Private Sub btnOpenHyperlink_Click()
Dim sAdress As String

    sAdress = Me.tb_wert.value
    If sAdress <> "" Then
        ActiveWorkbook.FollowHyperlink Address:=sAdress, NewWindow:=True
    End If
End Sub

Private Sub cbb_wert_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 13 Then
        If VBA.IsNumeric(Me.lbl_kat_select_index_value.Caption) Then
            If VBA.CInt(Me.lbl_kat_select_index_value.Caption) + 1 < Me.cbb_user_feld.listCount - 1 Then
                Me.cbb_user_feld.listindex = VBA.CInt(Me.lbl_kat_select_index_value.Caption) + 1
            End If
        End If
    End If
End Sub


'Private Sub cbb_user_feld_Exit(ByVal Cancel As MSForms.ReturnBoolean)
'    Cancel = True
'End Sub

Private Sub lb_users_MouseUp(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    If SQL_Abfragen.Insert_UserRights(Me.lbl_pj_id_value.Caption, Me.lb_users) = False Then
        MsgBox nlc_language.FindValue("SMessage_ErrWriteDB")
    End If
End Sub

Private Sub btn_deselect_all_Click() 'TODO
    Dim lCount As Long
    
    For lCount = 0 To Me.lb_users.listCount - 1
        Me.lb_users.Selected(lCount) = False
    Next
    
    'Werte in DB speichern
    If SQL_Abfragen.Insert_UserRights(Me.lbl_pj_id_value.Caption, Me.lb_users) = False Then
        MsgBox nlc_language.FindValue("SMessage_ErrWriteDB")
    End If
End Sub

Private Sub btn_set_pj_active_Click()
    
    If Class_Functions.DB.Select_Statement("SELECT count(ID) as Anz FROM [DB_Projekte] WHERE active <> 0") = True Then
        If Class_Functions.DB.Recordset!Anz >= maxP Then
            MsgBox "Sie k|fffd|nnen keine weiteren Projekte auf Aktiv setzten. Die maximale Anzahl von " & maxP & " aktiven Projekten ist erreicht."
        Else
            If MsgBox(nlc_language.FindValue("SMessage_SetPjActive"), vbYesNo + vbQuestion) = vbYes Then
                If Update_Projekt(Me.lbl_pj_id_value.Caption, "active", Class_Functions.DB.Parse2True) = False Then
                    MsgBox nlc_language.FindValue("SMessage_ErrDisProject")
                Else
                    Me.btn_set_pj_active.visible = False
                    Me.btn_set_pj_inactive.visible = True
                End If
            End If
        End If
    End If
End Sub

Private Sub btn_set_pj_inactive_Click()
    If MsgBox(nlc_language.FindValue("SMessage_SetPjInactive1") & VBA.Chr(10) & nlc_language.FindValue("SMessage_SetPjInactive2"), vbYesNo + vbQuestion) = vbYes Then
        If Update_Projekt(Me.lbl_pj_id_value.Caption, "active", "0") Then
            'Projektliste neu laden
            Unload Me
            calc_master.Range("sel_pj_id").value = "-1"
            frm_projects.Show
        Else
            MsgBox nlc_language.FindValue("SMessage_ErrDisProject")
        End If
    End If
End Sub

Private Sub btn_user_felder_expand_language_Click()
    Call btn_expand_language_Click
End Sub

Private Sub cbb_kosten_bez_Change()
    If Me.cbb_kosten_bez.text <> "" Then
        If click = False Then
            On Error Resume Next
            click = True

            Dim list_index As Integer
            Dim lang_col As String
            Dim row_counter As Integer

            list_index = Me.cbb_kosten_bez.listindex
            Me.lbl_kosten_id_value.Caption = Me.cbb_kosten_bez.list(Me.cbb_kosten_bez.listindex, 0)

            Me.cbb_kosten_bez.text = Me.cbb_kosten_bez.list(list_index, 1)
            Me.tb_kosten_basis.text = Me.cbb_kosten_bez.list(list_index, 2)
            Me.tb_kosten_ist.text = Me.cbb_kosten_bez.list(list_index, 3)
            Me.tb_kosten_aktuell.text = Me.cbb_kosten_bez.list(list_index, 4)

            Me.lb_kosten.listindex = list_index
            click = False

            If Me.cbb_kosten_bez.list(list_index, 5) = "manuell" Then
                Me.tb_kosten_basis.Locked = False
                Me.tb_kosten_basis.BackColor = &H80000005
                Me.tb_kosten_ist.Locked = False
                Me.tb_kosten_ist.BackColor = &H80000005
                Me.tb_kosten_aktuell.Locked = False
                Me.tb_kosten_aktuell.BackColor = &H80000005
            Else
                Me.tb_kosten_basis.Locked = True
                Me.tb_kosten_basis.BackColor = &H8000000F
                Me.tb_kosten_ist.Locked = True
                Me.tb_kosten_ist.BackColor = &H8000000F
                Me.tb_kosten_aktuell.Locked = True
                Me.tb_kosten_aktuell.BackColor = &H8000000F
            End If
        End If
'    Else
'        Me.tb_kosten_basis.Locked = True
'        Me.tb_kosten_basis.BackColor = &H8000000F
'        Me.tb_kosten_ist.Locked = True
'        Me.tb_kosten_ist.BackColor = &H8000000F
'        Me.tb_kosten_aktuell.Locked = True
'        Me.tb_kosten_aktuell.BackColor = &H8000000F
    End If
End Sub

Private Sub cbb_language_Change()
'    Dim sort_col As String
'    Dim col_counter As Integer
'    Dim col_width As String
'
'
'    col_counter = 1
'    Range("aktuelle_frm_sprache").Value = Me.cbb_language.text
'
'    Call SQL_Abfragen.Get_Recordset_in_table("SELECT " & _
'                                                "[DB_Meilensteine].ID, " & _
'                                                "[DB_Meilensteine].FK_Projekte, " & _
'                                                "[DB_Meilensteine].PHB_UID, " & _
'                                                "[DB_Language]." & calc_master.Range("aktuelle_sprache").Value & " AS Name, " & _
'                                                "Lan2." & Range("aktuelle_frm_sprache").Value & " as Name_Lan, " & _
'                                                "[DB_Meilensteine].Basisdatum, " & _
'                                                "[DB_Meilensteine].Istdatum, " & _
'                                                "[DB_Meilensteine].Aktuelldatum, " & _
'                                                "[DB_Meilensteine].OrderBy " & _
'                                            "FROM " & _
'                                                "([DB_Meilensteine] " & _
'                                                "INNER JOIN [DB_Language] " & _
'                                                  "ON ([DB_Meilensteine].FK_Language_Name = [DB_Language].Term)) " & _
'                                                "INNER JOIN [DB_Language] as Lan2 " & _
'                                                  "ON [DB_Meilensteine].FK_Language_Name = Lan2.Term")
'
'    sort_col = nlc_functions.get_col(calc_frm_daten.name, "Name_Lan")
'
'    While DB_Meilensteine.Cells(1, col_counter).Value <> ""
'        If col_width = "" Then
'            If col_counter = VBA.CInt(sort_col) Then
'                col_width = "190 Pt"
'            Else
'                col_width = "0 Pt"
'            End If
'        Else
'            If col_counter = VBA.CInt(sort_col) Then
'                col_width = col_width & "; 95 Pt"
'            Else
'                col_width = col_width & "; 0 Pt"
'            End If
'        End If
'        col_counter = col_counter + 1
'    Wend
'
'    Me.lb_mst_language.ColumnWidths = col_width
End Sub

Private Sub cbb_projekte_Change()
    If click = False Then
        click = True
        
        Application.ScreenUpdating = False
        If Me.cbb_projekte.text <> "" Then
            Me.btn_projekt_hinzufuegen.Caption = "Nummer pr|fffd|fen"
    
            Me.lbl_pj_nr_neu.visible = False
            Me.tb_pj_nr_neu.visible = False
            Me.btn_projekt_hinzufuegen.visible = False
    
            Me.lbl_projekt.visible = True
            Me.cbb_projekte.visible = True
            Me.btn_neues_projekt.visible = True
    
            Me.Top = Me.Top - ((519.75 / 2) - (Me.Height / 2))
            Me.Height = 519.75 '600
        End If
        
        If cbb_clear = False Then
            'Projektid eintragen
            Me.lbl_pj_id_value.Caption = Get_Projektwert(VBA.Mid(Me.cbb_projekte.text, 1, VBA.InStr(1, Me.cbb_projekte.text, " - ") - 1), "ID")
            calc_master.Range("sel_pj_id").value = Me.lbl_pj_id_value.Caption
            
            'Felder leeren
            Call setMSTActivity(False)
            Me.cbb_user_feld.listindex = -1
            Me.cbb_wert.listindex = -1
            Me.tb_wert.text = ""
            Me.tb_mst_bez.text = ""
            Me.tb_mst_adate.text = ""
            Me.tb_mst_bdate.text = ""
            Me.tb_mst_idate.text = ""
            Me.cbb_ressourcen.listindex = -1
            Me.tb_ressourcen_basis.text = ""
            Me.tb_ressourcen_aktuell.text = ""
            Me.tb_ressourcen_ist.text = ""
            Me.tb_kosten_basis.text = ""
            Me.tb_kosten_aktuell.text = ""
            Me.tb_kosten_ist.text = ""
            Me.tb_fortschritt.text = ""
            Me.tb_pj_pw.text = ""
                       
            'Werte laden
            Call projekt_laden
            Call load_activeTabPage
'            Debug.Print Now()
'            Call SQL_Abfragen.Get_Ressourcen(Me.lbl_pj_id_value.Caption)
'            Debug.Print Now()
'            Call SQL_Abfragen.Get_Kosten(Me.lbl_pj_id_value.Caption)
'            Debug.Print Now()
'            Call SQL_Abfragen.Get_Kategorie(Me.lbl_pj_id_value.Caption)
'            Debug.Print Now()
'            Call SQL_Abfragen.Get_Meilensteine(Me.lbl_pj_id_value.Caption)
'            Debug.Print Now()
            
            calc_frm_projects.Cells.Replace What:="NULL", Replacement:="0", LookAt:=xlWhole, _
            SearchOrder:=xlByRows, MatchCase:=False, SearchFormat:=False, _
            ReplaceFormat:=False
            
            Call fill_sum
    
            Me.lb_resources.RowSource = "lb_ressourcen"
            Me.lb_kosten.RowSource = "lb_kosten"
            Me.lb_cat.RowSource = "lb_kategorien"
            Me.cbb_user_feld.RowSource = "lb_kategorien"
            Me.lb_mst.RowSource = "lb_mst"
        End If
        
        pj_listindex = Me.cbb_projekte.listindex
        
        Application.ScreenUpdating = True
        
        click = False
    End If
End Sub

Sub projekt_laden(Optional Screen_middle As Integer)
    Dim PJ_ID As String
    Dim ppf_imp As String
    Dim datum As Date
    Dim wert As String
    Dim where As String
    
    If calc_master.Range("show_inactive_values") = "FALSE" Then
        where = " AND active<>0"
    End If
    
    pj_laden = True
    PJ_ID = Me.lbl_pj_id_value.Caption
    
    wert = SQL_Abfragen.Get_Kategoriewert(PJ_ID, "8")
    If wert = "NULL" Then wert = ""
    Me.tb_projektbez.text = wert
    Me.cbb_status.listindex = -1
    
    'Debug.Print "Projekte Tabelle laden" & ": " & Now()
    'Werte aus Projekttabelle laden (Projektcode, Import/Exportdatum)
    If Class_Functions.DB.Select_Statement("SELECT Projektcode FROM [DB_Projekte] WHERE ID = " & PJ_ID & where) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            Me.lbl_pj_nr_value.Caption = Class_Functions.DB.Recordset!Projektcode
            
            'Passwort laden
'            If Not VBA.IsNull(Class_Functions.DB.Recordset!Password) Then
'                Me.tb_pj_pw.text = Class_Functions.DB.Recordset!Password
'            End If
            
            'Comboboxen von Allgemein bef|fffd|lle
            Call SQL_Abfragen.Get_KategorieDetailsByID(3, Me.cbb_status)
            
            'Rest laden
            'Debug.Print "Eckdaten laden" & ": " & Now()
            Call Get_Allgemein(PJ_ID)
            
            'Datum formatieren
            If IsDate(Me.lbl_ppf_date.Caption) = True Then
                If VBA.CDate(Me.lbl_ppf_date.Caption) < calc_master.Range("Stichtag").value - 14 Then
                    Me.lbl_ppf_date.ForeColor = VBA.RGB(185, 17, 36)
                Else
                    Me.lbl_ppf_date.ForeColor = VBA.RGB(17, 132, 40)
                End If
            Else
                Me.lbl_ppf_date.ForeColor = &H705032
            End If
            
            'Active/Deactive laden
            If SQL_Abfragen.Get_Projektwert(Me.lbl_pj_id_value.Caption, "active") <> "" Then
                If nlc_intern.get_true_false(SQL_Abfragen.Get_Projektwert(Me.lbl_pj_id_value.Caption, "active")) = "False" Then
                    Me.btn_set_pj_active.visible = True
                    Me.btn_set_pj_inactive.visible = False
                Else
                    Me.btn_set_pj_active.visible = False
                    Me.btn_set_pj_inactive.visible = True
                End If
            End If
        End If
    End If
    
    click = True
    If Me.lbl_pj_nr_value.Caption <> "Pj Nr." Then 'And tb_projektbez.text <> "" Then
        On Error GoTo clear
        Me.cbb_projekte.text = Me.lbl_pj_nr_value.Caption & " - " & tb_projektbez.text
    Else
clear:
        Me.Top = Screen_middle - 30
        Me.Height = 60
    End If
    click = False
End Sub

Private Sub cbb_ressourcen_Change()
    Dim list_index As Integer
    Dim lang_col As String
    Dim row_counter As Integer
    
    If click = False Then
        On Error Resume Next
        click = True
    
        list_index = Me.cbb_ressourcen.listindex
        Me.lbl_ressourcen_id_value.Caption = Me.cbb_ressourcen.list(Me.cbb_ressourcen.listindex, 0)
    
        If Me.cbb_ressourcen.text <> "" And VBA.Left(Me.cbb_ressourcen.text, 5) = "     " Then
            Me.cbb_ressourcen.text = Me.cbb_ressourcen.list(list_index, 2)
            Me.tb_ressourcen_basis.text = Me.cbb_ressourcen.list(list_index, 3)
            Me.tb_ressourcen_ist.text = Me.cbb_ressourcen.list(list_index, 4)
            Me.tb_ressourcen_aktuell.text = Me.cbb_ressourcen.list(list_index, 5)
    
            Me.tb_ressourcen_basis.Locked = False
            Me.tb_ressourcen_basis.BackColor = &H80000005
            Me.tb_ressourcen_ist.Locked = False
            Me.tb_ressourcen_ist.BackColor = &H80000005
            Me.tb_ressourcen_aktuell.Locked = False
            Me.tb_ressourcen_aktuell.BackColor = &H80000005
        Else
            Me.cbb_ressourcen.text = ""
            Me.tb_ressourcen_basis.text = ""
            Me.tb_ressourcen_ist.text = ""
            Me.tb_ressourcen_aktuell.text = ""
            
            Me.tb_ressourcen_basis.Locked = True
            Me.tb_ressourcen_basis.BackColor = &H8000000F
            Me.tb_ressourcen_ist.Locked = True
            Me.tb_ressourcen_ist.BackColor = &H8000000F
            Me.tb_ressourcen_aktuell.Locked = True
            Me.tb_ressourcen_aktuell.BackColor = &H8000000F
        End If
        
        Me.lb_resources.listindex = list_index
        
        click = False
'    Else
'        Me.tb_ressourcen_basis.Locked = True
'        Me.tb_ressourcen_basis.BackColor = &H8000000F
'        Me.tb_ressourcen_ist.Locked = True
'        Me.tb_ressourcen_ist.BackColor = &H8000000F
'        Me.tb_ressourcen_aktuell.Locked = True
'        Me.tb_ressourcen_aktuell.BackColor = &H8000000F
    End If
End Sub

Private Sub cbb_status_Enter()
    original_value = Me.cbb_status.text
End Sub

Private Sub cbb_status_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If original_value <> Me.cbb_status.text Then
        If click = False Then
            click = True
            
            Call edit_kat("3", "leer", Me.cbb_status.Column(0), "Wert")
            Call SQL_Abfragen.Get_Kategorie(Me.lbl_pj_id_value.Caption)
            allgemein_change = True
            click = False
        End If
    End If
End Sub

Private Sub cbb_user_feld_Change()
    lbl_kat_select_index_value.Caption = Me.cbb_user_feld.listindex
    If click = False Then
        click = True
        
        On Error Resume Next
        btn_edit_textfield.visible = False
        Me.btnOpenHyperlink.visible = False
        
        If Me.cbb_user_feld.Column(3) = "DropDown" Or Me.cbb_user_feld.Column(3) = "True/False" Then
            Me.cbb_wert.visible = True
            Me.tb_wert.visible = False
            Call Get_KategorieDetails(Me.cbb_user_feld.text)
            Me.cbb_wert.RowSource = "lb_auspraegung"
            Me.lbl_wert.Caption = KatValueLabel
            
            If Me.cbb_user_feld.Column(2) <> "" Then
                Me.cbb_wert.text = Me.cbb_user_feld.Column(2)
            End If
            
        Else
            If Me.cbb_user_feld.Column(3) = "Text" Or Me.cbb_user_feld.Column(3) = "Hyperlink" Then
                btn_edit_textfield.visible = True
            End If
            If Me.cbb_user_feld.Column(3) = "Hyperlink" Then
                Me.btnOpenHyperlink.visible = True
            End If
            
            
            
            If Me.cbb_user_feld.Column(3) = "Number" And Me.cbb_user_feld.Column(7) <> "" Then
                Me.lbl_wert.Caption = KatValueLabel & " (in " & Me.cbb_user_feld.Column(7) & ")"
            Else
                Me.lbl_wert.Caption = KatValueLabel
            End If
            
            Me.cbb_wert.visible = False
            Me.tb_wert.visible = True
            Me.tb_wert.text = Me.cbb_user_feld.Column(2)
        End If
        
        Me.lbl_wert.visible = True
        Me.lb_cat.listindex = Me.cbb_user_feld.listindex
    
        If Me.cbb_user_feld.listindex = -1 Then
            Me.tb_wert.Locked = True
            Me.tb_wert.BackColor = &H8000000F
            Me.cbb_wert.Locked = True
            Me.cbb_wert.BackColor = &H8000000F
        Else
            Me.tb_wert.Locked = False
            Me.tb_wert.BackColor = &H80000005
            Me.cbb_wert.Locked = False
            Me.cbb_wert.BackColor = &H80000005
        End If
        
        If ifCBBActiv Then '1 Tab weniger
            If Me.cbb_user_feld.Column(3) = "DropDown" Or Me.cbb_user_feld.Column(3) = "True/False" Then
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
            Else
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                If btn_edit_textfield.visible Then CreateObject("WScript.Shell").SendKeys "{TAB}", True
            End If
        Else
            If Me.cbb_user_feld.Column(3) = "DropDown" Or Me.cbb_user_feld.Column(3) = "True/False" Then
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
            Else
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                CreateObject("WScript.Shell").SendKeys "{TAB}", True
                If btn_edit_textfield.visible Then CreateObject("WScript.Shell").SendKeys "{TAB}", True
                End If
        End If
        
        If Me.cbb_user_feld.Column(3) = "DropDown" Or Me.cbb_user_feld.Column(3) = "True/False" Then
            ifCBBActiv = True
'            Me.cbb_wert.SetFocus
'            Me.cbb_wert.SelStart = 0
'            Me.cbb_wert.SelLength = Len(Me.cbb_wert.text)
        Else
            ifCBBActiv = False
'            Me.tb_wert.SetFocus
'            Me.tb_wert.SelStart = 0
'            Me.tb_wert.SelLength = Len(Me.tb_wert.text)
        End If
        
        click = False
    End If
End Sub

Private Sub cbb_wert_Enter()
    original_value = Me.cbb_wert.text
End Sub

Private Sub cbb_wert_Change()
    If original_value <> Me.cbb_wert.text Then
        If click = False Then
            click = True
            Dim list_index As Integer

            list_index = Me.lb_cat.listindex
            Call edit_kat2(Me.cbb_user_feld.text, "leer", Me.cbb_wert.Column(0), "Wert") 'TODO
            Call SQL_Abfragen.Get_Kategorie(Me.lbl_pj_id_value.Caption)
            click = False

            Me.lb_cat.RowSource = "lb_kategorien"
            Me.cbb_user_feld.RowSource = "lb_kategorien"
            
            Me.cbb_user_feld.listindex = list_index
'            Me.lb_cat.listindex = list_index
        End If
    End If
End Sub

Private Sub lb_cat_Click()
    If click = False Then
        Me.cbb_user_feld.listindex = Me.lb_cat.listindex
        
        Me.tb_wert.ForeColor = &H80000008
    End If
End Sub

Private Sub lb_kosten_Click()
    Me.cbb_kosten_bez.listindex = Me.lb_kosten.listindex
End Sub

Private Sub lb_mst_Click()
    If click = False Then
        Call setMSTActivity(True)
        
        On Error Resume Next
        click = True

        Dim list_index As Integer
        Dim order_col As String
        Dim lang_col As String
        Dim row_counter As Integer
        Dim first_row As Integer
        Dim last_row As Integer
        Dim first_col As String

        list_index = Me.lb_mst.listindex
        Me.lbl_mst_id_value.Caption = Me.lb_mst.list(Me.lb_mst.listindex, 0)
        Me.lb_mst_language.listindex = list_index
        
        Me.tb_mst_bdate.text = ""
        Me.tb_mst_idate.text = ""
        Me.tb_mst_adate.text = ""

        Me.tb_mst_bez.text = Me.lb_mst.list(list_index, 1)
        VBA.CDate (VBA.Day(Me.lb_mst.list(list_index, 2)) & "." & VBA.Month(Me.lb_mst.list(list_index, 2)) + 1 & "." & VBA.Year(Me.lb_mst.list(list_index, 2)))
        If Me.lb_mst.list(list_index, 2) <> "" Then Me.tb_mst_bdate.text = VBA.CDate(VBA.Day(Me.lb_mst.list(list_index, 2)) & "." & VBA.Month(Me.lb_mst.list(list_index, 2)) & "." & VBA.Year(Me.lb_mst.list(list_index, 2)))
        If Me.lb_mst.list(list_index, 3) <> "" Then Me.tb_mst_idate.text = VBA.CDate(VBA.Day(Me.lb_mst.list(list_index, 3)) & "." & VBA.Month(Me.lb_mst.list(list_index, 3)) & "." & VBA.Year(Me.lb_mst.list(list_index, 3)))
        If Me.lb_mst.list(list_index, 4) <> "" Then Me.tb_mst_adate.text = VBA.CDate(VBA.Day(Me.lb_mst.list(list_index, 4)) & "." & VBA.Month(Me.lb_mst.list(list_index, 4)) & "." & VBA.Year(Me.lb_mst.list(list_index, 4)))

        Call Get_Meilensteine(Me.lbl_pj_id_value.Caption)

        Me.lb_mst.listindex = list_index
        Me.lb_mst_language.listindex = list_index
        click = False
    End If
End Sub

Private Sub lb_mst_language_Click()
    Me.lb_mst.listindex = Me.lb_mst_language.listindex
End Sub

Private Sub lb_resources_Click()
    Me.cbb_ressourcen.listindex = Me.lb_resources.listindex
End Sub

Private Sub TabPage_Change()
    Call load_activeTabPage
End Sub

Private Sub load_activeTabPage()
    Dim listindex As Integer
    
    If click = False Then
        click = True
        If Me.TabPage.value = 2 Then 'Meilensteine
            Call SQL_Abfragen.Get_Meilensteine(Me.lbl_pj_id_value.Caption)
            Me.lb_mst.RowSource = "lb_mst"
            
            If Me.lb_mst.list(0, 0) = "" Then
                Call setMSTListActivity(False)
            Else
                Call setMSTListActivity(True)
            End If
        ElseIf Me.TabPage.value = 3 Then 'Ressourcen
            listindex = Me.lb_kosten.listindex
            
            Call SQL_Abfragen.Get_Ressourcen(Me.lbl_pj_id_value.Caption)
            Call fill_sum
            Me.lb_resources.RowSource = "lb_ressourcen"
            Me.cbb_ressourcen.RowSource = "lb_ressourcen"
            
            Me.lb_kosten.listindex = listindex
        ElseIf Me.TabPage.value = 4 Then 'Kosten
            Application.ScreenUpdating = False
            Application.Calculation = xlCalculationManual
            
            listindex = Me.lb_kosten.listindex
            
            'Auto Kostenarten aktualisieren
            Call SQL_Abfragen.Calculate_all_autoCost_values(Me.lbl_pj_id_value.Caption)
            Call SQL_Abfragen.Get_Kosten(Me.lbl_pj_id_value.Caption)
            Call fill_sum
            
            Me.lb_kosten.RowSource = "lb_kosten"
            Me.cbb_kosten_bez.RowSource = "lb_kosten"
            
            Me.lb_kosten.listindex = listindex
            
            Application.Calculation = xlCalculationAutomatic
            Application.ScreenUpdating = True
        ElseIf Me.TabPage.value = 1 Then 'Benutzerdefinierte Felder
            Call SQL_Abfragen.Get_FieldVisibility(calc_master.Range("WindowsLogin").value, Me.lb_cat)
            Call SQL_Abfragen.Get_Kategorie(Me.lbl_pj_id_value.Caption)
            Me.lb_cat.RowSource = "lb_kategorien"
            Me.cbb_user_feld.RowSource = "lb_kategorien"
            allgemein_change = False
        ElseIf Me.TabPage.value = 0 Then 'Allgemein
            'Wird ausgetauscht durch eine Abfrage!!! Statement in Load_Allgemein!!!
            Call SQL_Abfragen.Get_Allgemein(Me.lbl_pj_id_value.Caption)
            'Call load_Allgemein(Me.lbl_pj_id_value.Caption)
        ElseIf Me.TabPage.value = 5 Then
            Call SQL_Abfragen.Get_UserRights(Me.lbl_pj_id_value.Caption, Me.lb_users)
        End If
        click = False
    End If
End Sub

Private Sub tb_A_EDatum_Enter()
    original_value = Me.tb_A_EDatum.text
End Sub

Private Sub tb_A_EDatum_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If original_value <> Me.tb_A_EDatum.text Then
        If Check_Date(Me.tb_A_EDatum.text) Then
            Call edit_kat("1", Me.tb_A_EDatum.text, "NULL", "Wert_Datum")
            allgemein_change = True
        Else
            Cancel = True
        End If
    End If
End Sub

Private Sub tb_A_EDatum_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
        Case 46 'Punkt nur zweimal zul|fffd|ssig
            If Len(tb_A_EDatum) = 0 Or UBound(Split(tb_A_EDatum, ".")) >= 2 Then
                KeyAscii = 0
            End If
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub tb_A_SDatum_Enter()
    original_value = Me.tb_A_SDatum.text
End Sub

Private Sub tb_A_SDatum_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If original_value <> Me.tb_A_SDatum.text Then
        If Check_Date(Me.tb_A_SDatum.text) Then
            Call edit_kat("2", Me.tb_A_SDatum.text, "NULL", "Wert_Datum")
            allgemein_change = True
        Else
            Cancel = True
        End If
    End If
End Sub

Private Sub tb_A_SDatum_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
        Case 46 'Punkt nur zweimal zul|fffd|ssig
            If Len(tb_A_SDatum) = 0 Or UBound(Split(tb_A_SDatum, ".")) >= 2 Then
                KeyAscii = 0
            End If
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub tb_fortschritt_Enter()
    original_value = Me.tb_fortschritt.text
End Sub

Private Sub tb_fortschritt_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If original_value <> Me.tb_fortschritt.text Then
        If click = False Then
            click = True
            If Me.tb_fortschritt.text = "" Then
                Call edit_kat("9", "NULL", "NULL", "Wert_Zahl")
            Else
                Call edit_kat("9", VBA.Replace(VBA.CStr(VBA.CDbl(Me.tb_fortschritt.text) / 100), ",", "."), "NULL", "Wert_Zahl")
            End If
            
            Call SQL_Abfragen.Get_Kategorie(Me.lbl_pj_id_value.Caption)
            
            allgemein_change = True
            click = False
        End If
    End If
End Sub

Private Sub tb_fortschritt_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
            If Me.tb_fortschritt.text + VBA.Chr(KeyAscii) > 100 Then KeyAscii = 0
        Case 44 'Punkt nur einmal zul|fffd|ssig
            If Len(Me.tb_fortschritt) = 0 Or UBound(Split(Me.tb_fortschritt, ",")) >= 1 Then
                KeyAscii = 0
            End If
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub tb_kosten_aktuell_Enter()
    original_value = VBA.Replace(Me.tb_kosten_aktuell.text, ".", ",")
End Sub

Private Sub tb_kosten_aktuell_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If original_value <> Me.tb_kosten_aktuell.text And Me.lb_kosten.listindex >= 0 Then
        If click = False Then
            click = True
            Dim list_index As Integer
            
            list_index = Me.lb_kosten.listindex
            
            Call edit_Kost(Me.lb_kosten.list(Me.lb_kosten.listindex, 1), "aktuell", VBA.Replace(Me.tb_kosten_aktuell.text, ",", "."))
            Call SQL_Abfragen.Get_Kosten(Me.lbl_pj_id_value.Caption)
            Call fill_sum
            click = False
            
            ress_cost_change = True
            
            Me.lb_kosten.RowSource = "lb_kosten"
            Me.cbb_kosten_bez.RowSource = "lb_kosten"
            
            Me.lb_kosten.listindex = list_index
            
            Call RefreshCostVerteilung
        End If
    End If
End Sub

Private Sub tb_kosten_aktuell_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
        Case 44 'Dezimalkomma nur einmal zul|fffd|ssig
            If InStr(1, tb_kosten_aktuell, ",") > 0 Then KeyAscii = 0
'        Case 45 'Minuszeichen nur als erstes Zeichen zul|fffd|ssig
'            If Len(tb_kosten_aktuell) > 0 Then KeyAscii = 0
'        Case 43 'Pluszeichen nur als erstes Zeichen zul|fffd|ssig
'            If Len(tb_kosten_aktuell) > 0 Then KeyAscii = 0
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub tb_kosten_basis_Enter()
    original_value = VBA.Replace(Me.tb_kosten_basis.text, ".", ",")
End Sub

Private Sub tb_kosten_basis_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If original_value <> Me.tb_kosten_basis.text And Me.lb_kosten.listindex >= 0 Then
        If click = False Then
            click = True
            Dim list_index As Integer
            
            list_index = Me.lb_kosten.listindex
            
            Call edit_Kost(Me.lb_kosten.list(Me.lb_kosten.listindex, 1), "basis", VBA.Replace(Me.tb_kosten_basis.text, ",", "."))
            Call SQL_Abfragen.Get_Kosten(Me.lbl_pj_id_value.Caption)
            Call fill_sum
            click = False
            
            ress_cost_change = True
            
            Me.lb_kosten.RowSource = "lb_kosten"
            Me.cbb_kosten_bez.RowSource = "lb_kosten"
            Me.lb_kosten.listindex = list_index
            
            Call RefreshCostVerteilung
        End If
    End If
End Sub

Private Sub tb_kosten_basis_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
        Case 44 'Dezimalkomma nur einmal zul|fffd|ssig
            If InStr(1, tb_kosten_basis, ",") > 0 Then KeyAscii = 0
'        Case 45 'Minuszeichen nur als erstes Zeichen zul|fffd|ssig
'            If Len(tb_kosten_basis) > 0 Then KeyAscii = 0
'        Case 43 'Pluszeichen nur als erstes Zeichen zul|fffd|ssig
'            If Len(tb_kosten_basis) > 0 Then KeyAscii = 0
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub tb_kosten_ist_Enter()
    original_value = VBA.Replace(Me.tb_kosten_ist.text, ".", ",")
End Sub

Private Sub tb_kosten_ist_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If original_value <> Me.tb_kosten_ist.text And Me.lb_kosten.listindex >= 0 Then
        If click = False Then
            click = True
            Dim list_index As Integer
            
            list_index = Me.lb_kosten.listindex
            
            Call edit_Kost(Me.lb_kosten.list(Me.lb_kosten.listindex, 1), "ist", VBA.Replace(Me.tb_kosten_ist.text, ",", "."))
            Call SQL_Abfragen.Get_Kosten(Me.lbl_pj_id_value.Caption)
            Call fill_sum
            click = False
            
            ress_cost_change = True
            
            Me.lb_kosten.RowSource = "lb_kosten"
            Me.cbb_kosten_bez.RowSource = "lb_kosten"
            
            Me.lb_kosten.listindex = list_index
            
            Call RefreshCostVerteilung
        End If
    End If
End Sub

Private Sub tb_kosten_ist_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
        Case 44 'Dezimalkomma nur einmal zul|fffd|ssig
            If InStr(1, tb_kosten_ist, ",") > 0 Then KeyAscii = 0
'        Case 45 'Minuszeichen nur als erstes Zeichen zul|fffd|ssig
'            If Len(tb_kosten_ist) > 0 Then KeyAscii = 0
'        Case 43 'Pluszeichen nur als erstes Zeichen zul|fffd|ssig
'            If Len(tb_kosten_ist) > 0 Then KeyAscii = 0
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub tb_mst_adate_Enter()
    original_value = Me.tb_mst_adate.text
End Sub

Private Sub tb_mst_adate_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If original_value <> Me.tb_mst_adate.text Then
        If click = False Then
            click = True
                
            If Check_Date(Me.tb_mst_adate.text) = True Then
                Dim listindex As Integer
                
                listindex = Me.lb_mst.listindex
                
                If VBA.IsNumeric(Me.lbl_mst_id_value.Caption) And (VBA.IsDate(Me.tb_mst_adate.text) Or Me.tb_mst_adate.text = "") Then
                    Call SQL_Abfragen.Update_MilestoneValues(Me.lbl_pj_id_value.Caption, Me.lbl_mst_id_value.Caption, "Aktuelldatum", Me.tb_mst_adate.text)
                    Call SQL_Abfragen.Get_Meilensteine(Me.lbl_pj_id_value.Caption)
                End If
                
                Me.lb_mst.listindex = listindex
            Else
                Cancel = True
            End If
            
            click = False
        End If
    End If
End Sub

Private Sub tb_mst_adate_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
        Case 46 'Punkt nur zweimal zul|fffd|ssig
            If Len(tb_mst_adate) = 0 Or UBound(Split(tb_mst_adate, ".")) >= 2 Then
                KeyAscii = 0
            End If
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub tb_mst_bdate_Enter()
    original_value = Me.tb_mst_bdate.text
End Sub

Private Sub tb_mst_bdate_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If original_value <> Me.tb_mst_bdate.text Then
        If click = False Then
            click = True
            
            If Check_Date(Me.tb_mst_bdate.text) = True Then
                Dim listindex As Integer
                
                listindex = Me.lb_mst.listindex
                
                If VBA.IsNumeric(Me.lbl_mst_id_value.Caption) And (VBA.IsDate(Me.tb_mst_bdate.text) Or Me.tb_mst_bdate.text = "") Then
                    Call SQL_Abfragen.Update_MilestoneValues(Me.lbl_pj_id_value.Caption, Me.lbl_mst_id_value.Caption, "Basisdatum", Me.tb_mst_bdate.text)
                    Call SQL_Abfragen.Get_Meilensteine(Me.lbl_pj_id_value.Caption)
                End If
        
                Me.lb_mst.listindex = listindex
            Else
                Cancel = True
            End If
            
            click = False
        End If
    End If
End Sub

Private Sub tb_mst_bdate_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
        Case 46 'Punkt nur zweimal zul|fffd|ssig
            If Len(tb_mst_bdate) = 0 Or UBound(Split(tb_mst_bdate, ".")) >= 2 Then
                KeyAscii = 0
            End If
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub tb_mst_idate_Enter()
    original_value = Me.tb_mst_idate.text
End Sub

Private Sub tb_mst_idate_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If original_value <> Me.tb_mst_idate.text Then
        If click = False Then
            click = True
            
            If Check_Date(Me.tb_mst_idate.text) = True Then
                Dim listindex As Integer
                
                listindex = Me.lb_mst.listindex
                
                If VBA.IsNumeric(Me.lbl_mst_id_value.Caption) And (VBA.IsDate(Me.tb_mst_idate.text) Or Me.tb_mst_idate.text = "") Then
                    Call SQL_Abfragen.Update_MilestoneValues(Me.lbl_pj_id_value.Caption, Me.lbl_mst_id_value.Caption, "Istdatum", Me.tb_mst_idate.text)
                    Call SQL_Abfragen.Get_Meilensteine(Me.lbl_pj_id_value.Caption)
                End If
        
                Me.lb_mst.listindex = listindex
            Else
                Cancel = True
            End If
            
            click = False
        End If
    End If
End Sub

Private Sub tb_mst_idate_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
        Case 46 'Punkt nur zweimal zul|fffd|ssig
            If Len(tb_mst_idate) = 0 Or UBound(Split(tb_mst_idate, ".")) >= 2 Then
                KeyAscii = 0
            End If
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub tb_mst_bez_Enter()
    original_value = Me.tb_mst_bez.text
End Sub

Private Sub tb_mst_bez_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If original_value <> Me.tb_mst_bez.text Then
        If click = False Then
            click = True
            Dim listindex As Integer
            
            listindex = Me.lb_mst.listindex
            
            If VBA.IsNumeric(Me.lbl_mst_id_value.Caption) Then
                Call SQL_Abfragen.Update_MilestoneValues(Me.lbl_pj_id_value.Caption, Me.lbl_mst_id_value.Caption, "Name", VBA.Replace(Me.tb_mst_bez.text, "'", "''"))
                Call SQL_Abfragen.Get_Meilensteine(Me.lbl_pj_id_value.Caption)
            End If
    
            click = False
            Me.lb_mst.listindex = listindex
        End If
    End If
End Sub

Private Sub tb_mst_bez_language_Exit(ByVal Cancel As MSForms.ReturnBoolean)
'    If click = False Then
'        click = True
'        If VBA.IsNumeric(Me.lbl_mst_id_value.Caption) Then
'            Dim lang_col As String
'            Dim list_index As Integer
'
'            list_index = Me.lb_mst.listindex
'
'            lang_col = get_language_col(md_kat.Name, Range("aktuelle_frm_sprache").Value)
'            Call SQL_Abfragen.EditTable(db_mst.Name, db_mst.Cells(1, VBA.CInt(lang_col)).Value & "='" & Me.tb_mst_bez_language.text & "'", "ID = " & Me.lbl_mst_id_value.Caption & "")
'            Me.lb_mst.listindex = list_index
'        End If
'
'        click = False
'    End If
End Sub

Private Sub tb_pj_bez_language_Exit(ByVal Cancel As MSForms.ReturnBoolean)
'    If pj_laden = False Then
'        Dim db_kat_id As String
'        Dim pj_id As String
'        Dim Bezeichnung As String
'        Dim werte As String
'
'        pj_id = Me.lbl_pj_id_value.Caption
'
'        db_kat_id = get_kat_id("Projektname")
'
'        If check_db_kat_value(db_kat_id, pj_id) = False Then
'            'Datensatz anlegen!
'            Bezeichnung = "ID, FK_DB_Projekte, FK_MD_Kat, Wert"
'            werte = "'" & calc_master.Cells(8, 2).value & _
'                    "', '" & pj_id & _
'                    "', '" & db_kat_id & _
'                    "', '" & Me.tb_projektbez.text & "'"
'            Call SQL_Abfragen.AddTable(db_kat.name, Bezeichnung, werte)
'            calc_master.Cells(8, 2).value = calc_master.Cells(8, 2).value + 1
'            calc_master.Cells(8, 3).value = calc_master.Cells(8, 3).value + 1
'        Else
'            'Datensatz updaten
'            Call set_db_kat_value(db_kat_id, pj_id, Me.tb_projektbez.text)
'        End If
'    End If
End Sub

Private Sub tb_pag_Enter()
    original_value = Me.tb_pag.text
End Sub

Private Sub tb_pag_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If original_value <> Me.tb_pag.text Then
        Call edit_kat("6", VBA.Replace(Me.tb_pag.text, "'", "''"), "NULL", "Wert")
        allgemein_change = True
    End If
End Sub

Private Sub tb_pj_nr_neu_Change()
    If Me.btn_projekt_hinzufuegen.Caption = "Projekt anlegen" Then
        Me.btn_projekt_hinzufuegen.BackColor = VBA.RGB(185, 17, 36)
        Me.btn_projekt_hinzufuegen.Caption = "Nummer pr|fffd|fen"
    End If
End Sub

Private Sub tb_pj_pw_Enter()
    original_value = Me.tb_pj_pw.text
End Sub

Private Sub tb_pj_pw_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False Then
        click = True
        
        If original_value <> Me.tb_pj_pw.text Then
            Call SQL_Abfragen.Update_Projekt(Me.lbl_pj_id_value.Caption, "Password", VBA.Replace(Me.tb_pj_pw.text, "'", "''"))
        End If
        
        click = False
    End If
End Sub

Private Sub tb_projektbez_Enter()
    original_value = Me.tb_projektbez.text
End Sub

Private Sub tb_projektbez_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False Then
        click = True
        
        If original_value <> Me.tb_projektbez.text Then
            Call edit_kat("8", VBA.Replace(Me.tb_projektbez.text, "'", "''"), "NULL", "Wert")
            Call cbb_projekte_aufbauen
            
            Me.cbb_projekte.listindex = pj_listindex
            
            allgemein_change = True
        End If
        
        click = False
    End If
End Sub

Private Sub tb_ressourcen_aktuell_Enter()
    original_value = VBA.Replace(Me.tb_ressourcen_aktuell.text, ".", ",")
End Sub

Private Sub tb_ressourcen_aktuell_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If original_value <> Me.tb_ressourcen_aktuell.text And Me.lb_resources.listindex >= 0 Then
        If click = False Then
            click = True
            Dim list_index As Integer
            
            list_index = Me.lb_resources.listindex
            Call edit_Ress(Me.lb_resources.list(Me.lb_resources.listindex, 1), "aktuell", VBA.Replace(Me.tb_ressourcen_aktuell.text, ",", "."))
            Call SQL_Abfragen.Get_Ressourcen(Me.lbl_pj_id_value.Caption)
            Call fill_sum
            click = False
            
            ress_cost_change = True
            
            Me.lb_resources.RowSource = "lb_ressourcen"
            Me.cbb_ressourcen.RowSource = "lb_ressourcen"
            Me.lb_resources.listindex = list_index
            
            Call RefreshRessVerteilung
        End If
    End If
End Sub

Private Sub tb_ressourcen_aktuell_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
        Case 44 'Dezimalkomma nur einmal zul|fffd|ssig
            If InStr(1, tb_ressourcen_aktuell, ",") > 0 Then KeyAscii = 0
'        Case 45 'Minuszeichen nur als erstes Zeichen zul|fffd|ssig
'            If Len(tb_ressourcen_aktuell) > 0 Then KeyAscii = 0
'        Case 43 'Pluszeichen nur als erstes Zeichen zul|fffd|ssig
'            If Len(tb_ressourcen_aktuell) > 0 Then KeyAscii = 0
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub tb_ressourcen_basis_Enter()
    original_value = VBA.Replace(Me.tb_ressourcen_basis.text, ".", ",")
End Sub

Private Sub tb_ressourcen_basis_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If original_value <> Me.tb_ressourcen_basis.text And Me.lb_resources.listindex >= 0 Then
        If click = False Then
            click = True
            Dim list_index As Integer
            
            list_index = Me.lb_resources.listindex

            Call edit_Ress(Me.lb_resources.list(Me.lb_resources.listindex, 1), "basis", VBA.Replace(Me.tb_ressourcen_basis.text, ",", "."))
            Call SQL_Abfragen.Get_Ressourcen(Me.lbl_pj_id_value.Caption)
            Call fill_sum
            
            click = False
            
            ress_cost_change = True
            
            Me.lb_resources.RowSource = "lb_ressourcen"
            Me.cbb_ressourcen.RowSource = "lb_ressourcen"
            Me.lb_resources.listindex = list_index
            
            Call RefreshRessVerteilung
        End If
    End If
End Sub

Private Sub tb_ressourcen_basis_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
        Case 44 'Dezimalkomma nur einmal zul|fffd|ssig
            If InStr(1, tb_ressourcen_basis, ",") > 0 Then KeyAscii = 0
'        Case 45 'Minuszeichen nur als erstes Zeichen zul|fffd|ssig
'            If Len(tb_ressourcen_basis) > 0 Then KeyAscii = 0
'        Case 43 'Pluszeichen nur als erstes Zeichen zul|fffd|ssig
'            If Len(tb_ressourcen_basis) > 0 Then KeyAscii = 0
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub tb_ressourcen_ist_Enter()
    original_value = VBA.Replace(Me.tb_ressourcen_ist.text, ".", ",")
End Sub

Private Sub tb_ressourcen_ist_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If original_value <> Me.tb_ressourcen_ist.text And Me.lb_resources.listindex >= 0 Then
        If click = False Then
            click = True
            Dim list_index As Integer
            
            list_index = Me.lb_resources.listindex
            Call edit_Ress(Me.lb_resources.list(Me.lb_resources.listindex, 1), "Ist", VBA.Replace(Me.tb_ressourcen_ist.text, ",", "."))
            Call SQL_Abfragen.Get_Ressourcen(Me.lbl_pj_id_value.Caption)
            Call fill_sum
            click = False
            
            ress_cost_change = True
            
            Me.lb_resources.RowSource = "lb_ressourcen"
            Me.cbb_ressourcen.RowSource = "lb_ressourcen"
            Me.lb_resources.listindex = list_index
            
            Call RefreshRessVerteilung
        End If
    End If
End Sub

Private Sub tb_ressourcen_ist_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
        Case 44 'Dezimalkomma nur einmal zul|fffd|ssig
            If InStr(1, tb_ressourcen_ist, ",") > 0 Then KeyAscii = 0
'        Case 45 'Minuszeichen nur als erstes Zeichen zul|fffd|ssig
'            If Len(tb_ressourcen_ist) > 0 Then KeyAscii = 0
'        Case 43 'Pluszeichen nur als erstes Zeichen zul|fffd|ssig
'            If Len(tb_ressourcen_ist) > 0 Then KeyAscii = 0
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub tb_wert_Change()
    If click Then Exit Sub
    If Me.cbb_user_feld.listindex = -1 Then Exit Sub

    If Me.cbb_user_feld.Column(3) = "Number" And Me.tb_wert.text <> "" And VBA.IsNumeric(Me.tb_wert.text) Then
        'gr|fffd||fffd|er als min
        If VBA.IsNumeric(Me.lb_cat.list(Me.lb_cat.listindex, 4)) And Me.lb_cat.list(Me.lb_cat.listindex, 4) <> "" Then
            If Me.tb_wert.text < Me.lb_cat.list(Me.lb_cat.listindex, 4) Then
                Me.tb_wert.ForeColor = &H2411B9
            Else
                Me.tb_wert.ForeColor = &H40A621
            End If
        Else
            Me.tb_wert.ForeColor = &H80000008
        End If
        'kleiner als max
        If VBA.IsNumeric(Me.lb_cat.list(Me.lb_cat.listindex, 5)) And Me.lb_cat.list(Me.lb_cat.listindex, 5) <> "" Then
            If Me.tb_wert.text > VBA.CDbl(Me.lb_cat.list(Me.lb_cat.listindex, 5)) Then
                Me.tb_wert.ForeColor = &H2411B9
            Else
                'wenn <> rot, dann gr|fffd|n
                If Me.tb_wert.ForeColor <> &H2411B9 Then
                    Me.tb_wert.ForeColor = &H40A621
                End If
            End If
        Else

            'wenn <> rot, dann gr|fffd|n f|fffd|rben
            If Me.tb_wert.ForeColor <> &H2411B9 Then
                Me.tb_wert.ForeColor = &H40A621
            ElseIf Me.tb_wert.ForeColor <> &H40A621 Then
                Me.tb_wert.ForeColor = &H80000008
            End If
        End If
    ElseIf Me.cbb_user_feld.Column(3) = "Date" And Me.tb_wert.text <> "" Then
        If Check_Date(Me.tb_wert.text, False) Then
            Me.tb_wert.ForeColor = &H40A621
        Else
            Me.tb_wert.ForeColor = &H2411B9
        End If
    Else
        Me.tb_wert.ForeColor = &H80000008
    End If
End Sub

Private Function deleteFirstZero(Number As String) As String
    Dim cur_character As Long
    
    For cur_character = 1 To VBA.Len(Number)
        If Mid(Number, cur_character, 1) <> "0" Then
            If cur_character = 1 Then GoTo Ende
            
            Number = Mid(Number, cur_character, Len(Number))
        End If
    Next cur_character
Ende:
    deleteFirstZero = Number
End Function

Private Sub tb_wert_Enter()
    original_value = Me.tb_wert.text
End Sub

Private Sub tb_wert_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    Call tb_wert_Exit_function
End Sub

Private Sub tb_wert_Exit_function()
    
    If original_value <> Me.tb_wert.text Then
        If Me.cbb_user_feld.listindex = -1 Then Exit Sub
        
        If click = False Then
            click = True
            Dim list_index As Integer
            
            list_index = Me.lb_cat.listindex
            
            If Me.cbb_user_feld.Column(3) = "Number" Then
                'Wenn Me.tb_wert.text leer dann Zeile l|fffd|schen
                If Me.tb_wert.text = "" Or Me.tb_wert.text = "NULL" Then
                    If Not SQL_Abfragen.Delete_Katwert(Me.lbl_pj_id_value.Caption, Get_KategorieID(Me.cbb_user_feld.text)) Then
                        MsgBox nlc_language.FindValue("SMessage_ErrDelKat") & Me.cbb_user_feld.text & "."
                    End If
                Else
                    'wenn rot, dann abbrechen
                    If Me.tb_wert.ForeColor <> VBA.CDbl(&H40A621) Then
                        GoTo Ende
                    End If
                
                    Call edit_kat2(Me.cbb_user_feld.text, VBA.Replace(deleteFirstZero(Me.tb_wert.text), ",", "."), "NULL", VBA.CStr(Me.cbb_user_feld.list(Me.cbb_user_feld.listindex, 3))) 'TODO
                    
                    Dim Sum1 As Long
                    Dim Obli As Long
                    Dim statement As String
                    Sum1 = 0
                    Obli = 0
                    
                    'O-Plan Gesamt 173
                    If Get_KategorieID(Me.cbb_user_feld.text) = 115 Or Get_KategorieID(Me.cbb_user_feld.text) = 119 Or Get_KategorieID(Me.cbb_user_feld.text) = 123 Then
                        
                        statement = "select sum(wert_zahl) as 'zahl' from db_kategoriewerte where (fk_kategorie = 115 or fk_kategorie = 119) and FK_Projekte = " & Me.lbl_pj_id_value.Caption
                        If Class_Functions.DB.Select_Statement(statement) = True Then
                            If Not Class_Functions.DB.Recordset.EOF Then
                                Sum1 = Class_Functions.DB.Recordset!zahl
                            End If
                        End If
                        
                        statement = "select Wert_Zahl as 'zahl' from db_kategoriewerte where (fk_kategorie = 123 ) and FK_Projekte = " & Me.lbl_pj_id_value.Caption
                        If Class_Functions.DB.Select_Statement(statement) = True Then
                            If Not Class_Functions.DB.Recordset.EOF Then
                                Obli = Class_Functions.DB.Recordset!zahl
                            End If
                        End If
 
                        Call edit_kat3(173, Sum1 + Obli, "NULL", VBA.CStr(Me.cbb_user_feld.list(Me.cbb_user_feld.listindex, 3))) 'TODO
                    End If

                    'E-Plan Gesamt 175
                    If Get_KategorieID(Me.cbb_user_feld.text) = 118 Or Get_KategorieID(Me.cbb_user_feld.text) = 122 Or Get_KategorieID(Me.cbb_user_feld.text) = 126 Then
                        
                        statement = "select sum(wert_zahl) as 'zahl' from db_kategoriewerte where (fk_kategorie = 118 or fk_kategorie = 122) and FK_Projekte = " & Me.lbl_pj_id_value.Caption
                        If Class_Functions.DB.Select_Statement(statement) = True Then
                            If Not Class_Functions.DB.Recordset.EOF Then
                                Sum1 = Class_Functions.DB.Recordset!zahl
                            End If
                        End If
                        
                        statement = "select Wert_Zahl as 'zahl' from db_kategoriewerte where (fk_kategorie = 126 ) and FK_Projekte = " & Me.lbl_pj_id_value.Caption
                        If Class_Functions.DB.Select_Statement(statement) = True Then
                            If Not Class_Functions.DB.Recordset.EOF Then
                                Obli = Class_Functions.DB.Recordset!zahl
                            End If
                        End If
 
                        Call edit_kat3(175, Sum1 + Obli, "NULL", VBA.CStr(Me.cbb_user_feld.list(Me.cbb_user_feld.listindex, 3))) 'TODO
                    End If

                    'Ist-Plan Gesamt 176
                    If Get_KategorieID(Me.cbb_user_feld.text) = 117 Or Get_KategorieID(Me.cbb_user_feld.text) = 121 Or Get_KategorieID(Me.cbb_user_feld.text) = 125 Then
                        statement = "select sum(wert_zahl) as 'zahl' from db_kategoriewerte where (fk_kategorie = 117 or fk_kategorie = 121) and FK_Projekte = " & Me.lbl_pj_id_value.Caption
                        If Class_Functions.DB.Select_Statement(statement) = True Then
                            If Not Class_Functions.DB.Recordset.EOF Then
                                Sum1 = Class_Functions.DB.Recordset!zahl
                            End If
                        End If
                        
                        statement = "select Wert_Zahl as 'zahl' from db_kategoriewerte where (fk_kategorie = 125 ) and FK_Projekte = " & Me.lbl_pj_id_value.Caption
                        If Class_Functions.DB.Select_Statement(statement) = True Then
                            If Not Class_Functions.DB.Recordset.EOF Then
                                Obli = Class_Functions.DB.Recordset!zahl
                            End If
                        End If
 
                        Call edit_kat3(176, Sum1 + Obli, "NULL", VBA.CStr(Me.cbb_user_feld.list(Me.cbb_user_feld.listindex, 3))) 'TODO
                    End If

                    'Gehn-Plan Gesamt 172
                    If Get_KategorieID(Me.cbb_user_feld.text) = 116 Or Get_KategorieID(Me.cbb_user_feld.text) = 120 Or Get_KategorieID(Me.cbb_user_feld.text) = 124 Then
                        statement = "select sum(wert_zahl) as 'zahl' from db_kategoriewerte where (fk_kategorie = 116 or fk_kategorie = 120) and FK_Projekte = " & Me.lbl_pj_id_value.Caption
                        If Class_Functions.DB.Select_Statement(statement) = True Then
                            If Not Class_Functions.DB.Recordset.EOF Then
                                Sum1 = Class_Functions.DB.Recordset!zahl
                            End If
                        End If
                        
                        statement = "select Wert_Zahl as 'zahl' from db_kategoriewerte where (fk_kategorie = 124 ) and FK_Projekte = " & Me.lbl_pj_id_value.Caption
                        If Class_Functions.DB.Select_Statement(statement) = True Then
                            If Not Class_Functions.DB.Recordset.EOF Then
                                Obli = Class_Functions.DB.Recordset!zahl
                            End If
                        End If
 
                        Call edit_kat3(172, Sum1 + Obli, "NULL", VBA.CStr(Me.cbb_user_feld.list(Me.cbb_user_feld.listindex, 3))) 'TODO
                    End If
                    
                    
                End If
            ElseIf Me.cbb_user_feld.Column(3) = "Date" Then
                'Wenn Me.tb_wert.text leer dann Zeile l|fffd|schen
                If Me.tb_wert.text = "" Or Me.tb_wert.text = "NULL" Then
                    If Not SQL_Abfragen.Delete_Katwert(Me.lbl_pj_id_value.Caption, Get_KategorieID(Me.cbb_user_feld.text)) Then
                        MsgBox nlc_language.FindValue("SMessage_ErrDelKat") & Me.cbb_user_feld.text & "."
                    End If
                Else
                    If Not Check_Date(Me.tb_wert.text) Then
                        GoTo Ende
                    End If
                
                    Call edit_kat2(Me.cbb_user_feld.text, Me.tb_wert.text, "NULL", VBA.CStr(Me.cbb_user_feld.list(Me.cbb_user_feld.listindex, 3))) 'TODO
                End If
            Else
                Call edit_kat2(Me.cbb_user_feld.text, VBA.Replace(Me.tb_wert.text, "'", "''"), "NULL", VBA.CStr(Me.cbb_user_feld.list(Me.cbb_user_feld.listindex, 3))) 'TODO
            End If
           
            Call SQL_Abfragen.Get_Kategorie(Me.lbl_pj_id_value.Caption)
            
            Me.lb_cat.RowSource = "lb_kategorien"
            Me.cbb_user_feld.RowSource = "lb_kategorien"
            
            Me.cbb_user_feld.listindex = list_index
            Me.lb_cat.listindex = list_index
Ende:
            click = False
        End If
    End If
End Sub

Private Sub tb_wert_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)
    If KeyCode = 13 Then
        If VBA.IsNumeric(Me.lbl_kat_select_index_value.Caption) Then
            Call tb_wert_Exit_function
            
            If VBA.CInt(Me.lbl_kat_select_index_value.Caption) + 1 < Me.cbb_user_feld.listCount - 1 Then
                Me.cbb_user_feld.listindex = VBA.CInt(Me.lbl_kat_select_index_value.Caption) + 1
            End If
        End If
    End If
End Sub

Private Sub tb_wert_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    If Me.cbb_user_feld.listindex = -1 Then Exit Sub
    
    If Me.cbb_user_feld.Column(3) = "Number" Then
        Select Case KeyAscii
            Case 48 To 57 'Ziffern
                If VBA.InStr(1, tb_wert.text, ",") > 0 Then
                    If (VBA.Len(tb_wert.text) - VBA.InStr(1, tb_wert.text, ",")) >= Me.lb_cat.list(Me.lb_cat.listindex, 6) Then
                        KeyAscii = 0
                    End If
                End If
            Case 44 'Komma nur einmal zul|fffd|ssig
                If VBA.IsNumeric(Me.lb_cat.list(Me.lb_cat.listindex, 6)) And Me.lb_cat.list(Me.lb_cat.listindex, 6) <> "" Then
                    If Me.lb_cat.list(Me.lb_cat.listindex, 6) > 0 Then
                        If Len(tb_wert) = 0 Or UBound(Split(tb_wert, ",")) >= 1 Then
                            KeyAscii = 0
                        End If
                    Else
                        KeyAscii = 0
                    End If
                Else
                    KeyAscii = 0
                End If
            Case 45 'Minuszeichen nur als erstes Zeichen zul|fffd|ssig
                If Me.tb_wert.SelStart <> 0 Then KeyAscii = 0
            Case Else
                KeyAscii = 0
        End Select
    End If
End Sub

Public Sub UserForm_Initialize()
   'Debug.Print "Start" & ": " & Now()
    'Werte der beim |fffd|ndern von Ressourcen und Kosten auf true gesetzt wird
    'um am ende nochmal die rest und abweichungsberechnung anzusto|fffd|en
    ress_cost_change = False
    
    Dim pj_Name_ID As String
    Dim i As Integer
    Dim Screen_middle As Integer
    Dim active_str As String
    
    Screen_middle = Me.Top + VBA.Round((Me.Height / 2), 0)
    
    Me.lbl_pj_nr_neu.Top = 12
    Me.tb_pj_nr_neu.Top = 9
    Me.btn_set_pj_active.Left = 6
    Me.btn_projekt_hinzufuegen.Top = 6
    
    If calc_master.Range("Login").value = "" Then
        Me.btn_set_pj_inactive.visible = False
        Me.btn_projekt_del.visible = False
        Me.lbl_pj_pw.visible = False
        Me.tb_pj_pw.visible = False
    End If
    
    Me.lbl_pj_id_value.Caption = calc_master.Range("sel_pj_id").value

    'Debug.Print "Check Active Fields" & ": " & Now()
    If Me.lbl_pj_id_value.Caption <> "" Then
        If calc_master.Range("sel_pj_id").value <> "" Then
            active_str = SQL_Abfragen.Get_Projektwert(Me.lbl_pj_id_value.Caption, "active")
            If active_str <> "" Then
                If nlc_intern.get_true_false(SQL_Abfragen.Get_Projektwert(Me.lbl_pj_id_value.Caption, "active")) = "False" And calc_master.Range("show_inactive_values").value = "FALSE" Then
                    Me.btn_set_pj_active.visible = True
                    Me.btn_set_pj_inactive.visible = False
                    
                    Me.lbl_pj_id_value.Caption = "ID"
                    
                    If calc_master.Range("sel_pj_id").value <> "reload" Then
                        MsgBox nlc_language.FindValue("SMessage_PjNotAvalible"), vbInformation + vbOKOnly
                    End If
                End If
            End If
        Else
            If nlc_intern.get_true_false(calc_master.Range("show_inactive_values").value) = "False" Then
                Me.btn_set_pj_active.visible = True
                Me.btn_set_pj_inactive.visible = False
                
                'Me.lbl_pj_id_value.Caption = "ID"
            Else
                Me.btn_set_pj_active.visible = False
                Me.btn_set_pj_inactive.visible = True
            End If
        End If
    End If
    
    cbb_clear = True
    Me.cbb_projekte.clear
    cbb_clear = False

    Me.cbb_language.text = calc_master.Range("aktuelle_frm_sprache").value
    
    'Projekte in Auswahlliste laden (Projektcode - Projektname)
    'Debug.Print "Projektliste laden" & ": " & Now()
    Call cbb_projekte_aufbauen
    Call lb_users_aufbauen
    
    'Debug.Print "Projkt laden" & ": " & Now()
    'Wenn von Datenblatt aufgerufen, dann direkt projekt laden, sonst nur maske (leer)
    If IsNumeric(Me.lbl_pj_id_value) = True Then
        If Me.lbl_pj_id_value <> 0 Then
            'Projektdaten laden
            Call projekt_laden(Screen_middle)
        End If
    Else
        Me.Top = Screen_middle - 30
        Me.Height = 60
    End If
    
    'Debug.Print "Form Anpassen" & ": " & Now()
    pj_listindex = Me.cbb_projekte.listindex
    
    Me.Width = 341.25
    Me.TabPage.Width = 324
    Me.btn_expand_language.Caption = "|fffd|"
    Me.btn_schliessen.Left = 258 '180

    Me.lbl_wert.visible = False
    Me.tb_wert.visible = False
    Me.cbb_wert.visible = False
    
    Call setMSTActivity(False)

    Me.cbb_wert.Top = Me.tb_wert.Top

    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    KatValueLabel = Me.lbl_wert.Caption
    Call SQL_Abfragen.getRessCostEinheit
    Me.lbl_cost_text.Caption = "Alle Angaben in " & nlc_PJTabelle.CostEinheit
    Me.lbl_ress_text.Caption = "Alle Angaben in " & nlc_PJTabelle.RessEinheit
    
    Me.lbl_resscost_verteilung.Caption = VBA.Left(Me.lbl_resscost_verteilung.Caption, VBA.Len(Me.lbl_resscost_verteilung.Caption) - 1)
    
'    If tool_art = "Demo" Then
'        Me.TabPage(6).visible = True
'    End If
    'Debug.Print "Ende" & ": " & Now()
    
End Sub

Private Sub cbb_projekte_aufbauen()
    Dim projekte As Variant
    Dim i As Integer
    
    projekte = SQL_Abfragen.Get_Projekt_dropdown()
    Me.cbb_projekte.clear
    
    If projekte(0) = "leer" Then Exit Sub
    
    For i = 0 To UBound(projekte) Step 1
        Me.cbb_projekte.addItem (projekte(i))
    Next i
End Sub

Private Sub tb_pl_Enter()
    original_value = Me.tb_pl.text
End Sub

Private Sub tb_pl_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If original_value <> Me.tb_pl.text Then
        Call edit_kat("7", VBA.Replace(Me.tb_pl.text, "'", "''"), "NULL", "Wert")
        allgemein_change = True
    End If
End Sub

Private Sub edit_kat(DB_KatID As String, Katwert As String, Katdetail As String, Feldart As String)
    If pj_laden = False Or DB_KatID <> "" Then
        Dim DB_KatValue As String
        'Dim DB_KatID As String
        Dim PJ_ID As String

        PJ_ID = Me.lbl_pj_id_value.Caption
        
        DB_KatValue = Get_Kategoriewert(PJ_ID, DB_KatID)
        'DB_KatID = Get_KategorieID(KatName)
        
        If DB_KatID <> "" Then
            If DB_KatValue = "NULL" Then
                'Datensatz anlegen!
                If Insert_KategorieValues(PJ_ID, DB_KatID, Katwert, Katdetail, Feldart) = False Then
                    MsgBox nlc_language.FindValue("SMessage_ErrSaveKat") & DB_KatID & "."
                End If
            Else
                'Datensatz updaten
                If Update_KategorieValues(PJ_ID, DB_KatID, Katwert, Katdetail, Feldart) = False Then
                    MsgBox nlc_language.FindValue("SMessage_ErrEditKat") & DB_KatID & "."
                End If
            End If
        End If
    End If
End Sub

Private Sub edit_kat2(KatName As String, Katwert As String, Katdetail As String, Feldart As String)
    If pj_laden = False Or KatName <> "" Then
        Dim DB_KatValue As String
        Dim DB_KatID As String
        Dim PJ_ID As String

        PJ_ID = Me.lbl_pj_id_value.Caption
        
        DB_KatValue = Get_Kategoriewert2(PJ_ID, KatName)
        DB_KatID = Get_KategorieID(KatName)
        
        If DB_KatID <> "" Then
            If DB_KatValue = "NULL" Then
                'Datensatz anlegen!
                If Insert_KategorieValues(PJ_ID, DB_KatID, Katwert, Katdetail, nlc_intern.GetDBColByKartart(Feldart)) = False Then
                    MsgBox nlc_language.FindValue("SMessage_ErrSaveKat") & KatName & "."
                End If
            Else
                'Datensatz updaten
                If Update_KategorieValues(PJ_ID, DB_KatID, Katwert, Katdetail, nlc_intern.GetDBColByKartart(Feldart)) = False Then
                    MsgBox nlc_language.FindValue("SMessage_ErrEditKat") & KatName & "."
                End If
            End If
        End If
    End If
End Sub

Private Sub edit_kat3(DB_KatID As String, Katwert As String, Katdetail As String, Feldart As String)
    If pj_laden = False Or DB_KatID <> "" Then
        Dim DB_KatValue As String
        
        Dim PJ_ID As String

        PJ_ID = Me.lbl_pj_id_value.Caption
        
        DB_KatValue = Get_Kategoriewert3(PJ_ID, DB_KatID)
        
        
        If DB_KatID <> "" Then
            If DB_KatValue = "NULL" Then
                'Datensatz anlegen!
                If Insert_KategorieValues(PJ_ID, DB_KatID, Katwert, Katdetail, nlc_intern.GetDBColByKartart(Feldart)) = False Then
                    MsgBox nlc_language.FindValue("SMessage_ErrSaveKat") & DB_KatID & "."
                End If
            Else
                'Datensatz updaten
                If Update_KategorieValues(PJ_ID, DB_KatID, Katwert, Katdetail, nlc_intern.GetDBColByKartart(Feldart)) = False Then
                    MsgBox nlc_language.FindValue("SMessage_ErrEditKat") & DB_KatID & "."
                End If
            End If
        End If
    End If
End Sub

Private Sub edit_Ress(RessID As String, feld As String, wert As String)
    If pj_laden = False Or RessID <> "" Then
        Dim DB_ResValue As String
        Dim DB_ResID As String
        Dim PJ_ID As String

        PJ_ID = Me.lbl_pj_id_value.Caption
        
        DB_ResID = Me.lbl_ressourcen_id_value.Caption
        
        If wert = "" Then wert = 0
        
        If DB_ResID = "" Then
            'Datensatz anlegen!
            If Insert_RessourceValues(PJ_ID, feld, wert, RessID) = False Then
                nlc_language.FindValue ("SMessage_ErrSaveKat") & feld
            End If
        Else
            'Datensatz updaten
            If Update_RessourceValues(PJ_ID, DB_ResID, feld, wert) = False Then
                nlc_language.FindValue ("SMessage_ErrEditKat") & feld
            End If
        End If
    End If
End Sub

Private Sub edit_Kost(Kostname As String, feld As String, wert As String)
    If pj_laden = False Or Kostname <> "" Then
        Dim DB_KostValue As String
        Dim DB_KostID As String
        Dim PJ_ID As String

        PJ_ID = Me.lbl_pj_id_value.Caption
        
        DB_KostID = Me.lbl_kosten_id_value.Caption
        
        If wert = "" Then wert = 0
        
        If DB_KostID = "" Then
            'Datensatz anlegen!
            If Insert_KostenValues(PJ_ID, feld, wert, Kostname) = False Then
                nlc_language.FindValue ("SMessage_ErrSaveKat") & Kostname & "."
            End If
        Else
            'Datensatz updaten
            If Update_KostenValues(PJ_ID, DB_KostID, feld, wert) = False Then
                MsgBox nlc_language.FindValue("SMessage_ErrEditKat") & Kostname & "."
            End If
        End If
    End If
End Sub

Private Sub RefreshRessVerteilung()
    Dim counter As Integer
    
    'Call SQL_Abfragen.Delete_Verteilung(Me.lbl_pj_id_value.Caption, "DB_Ressourcenverteilung", "FK_Ressourcen", Range("lb_ressourcen").Cells(counter, 1).value)
    
    If VBA.IsDate(Me.tb_A_SDatum.text) And VBA.IsDate(Me.tb_A_EDatum.text) Then
        If Me.lbl_pj_id_value.Caption <> "ID" Then
            For counter = 1 To calc_frm_projects.Range("lb_ressourcen").Rows.count Step 1
                If calc_frm_projects.Range("lb_ressourcen").Cells(counter, 1).value <> "" Then
                    Call SQL_Abfragen.Insert_RessVerteilung(calc_frm_projects.Range("lb_ressourcen").Cells(counter, 1).value, Me.lbl_pj_id_value.Caption, VBA.CDate(Me.tb_A_SDatum.text), VBA.CDate(Me.tb_A_EDatum.text), True, counter)
                End If
            Next counter
        Else
            nlc_language.FindValue ("SMessage_SelPj")
        End If
    Else
        MsgBox nlc_language.FindValue("SMessage_WrongDateType")
    End If
End Sub

Private Sub RefreshCostVerteilung()
    Dim counter As Integer
    
    'Call SQL_Abfragen.Delete_Verteilung(Me.lbl_pj_id_value.Caption, "DB_Kostenverteilung", "FK_Kosten", Range("lb_kosten").Cells(counter, 1).value)
    
    If VBA.IsDate(Me.tb_A_SDatum.text) And VBA.IsDate(Me.tb_A_EDatum.text) Then
        If Me.lbl_pj_id_value.Caption <> "ID" Then
            For counter = 1 To calc_frm_projects.Range("lb_kosten").Rows.count Step 1
                If Range("lb_kosten").Cells(counter, 1).value <> "" Then
                    Call SQL_Abfragen.Insert_CostVerteilung(calc_frm_projects.Range("lb_kosten").Cells(counter, 1).value, Me.lbl_pj_id_value.Caption, VBA.CDate(Me.tb_A_SDatum.text), VBA.CDate(Me.tb_A_EDatum.text), True, counter)
                End If
            Next counter
        Else
            nlc_language.FindValue ("SMessage_SelPj")
        End If
    Else
        nlc_language.FindValue ("SMessage_WrongDateType")
    End If
End Sub

Private Sub fill_sum()
    calc_frm_projects.Calculate
    'Ressourcen
    Me.tb_res_sum_basis.text = VBA.Format(calc_frm_projects.Cells(2, 2).value, "##,##0.0")
    Me.tb_res_sum_ist.text = VBA.Format(calc_frm_projects.Cells(2, 3).value, "##,##0.0")
    Me.tb_res_sum_aktuell.text = VBA.Format(calc_frm_projects.Cells(2, 4).value, "##,##0.0")
    Me.tb_res_sum_rest.text = VBA.Format(calc_frm_projects.Cells(2, 5).value, "##,##0.0")
    Me.tb_res_sum_abweichung.text = VBA.Format(calc_frm_projects.Cells(2, 6).value, "##,##0.0")
    'Kosten
    Me.tb_kosten_sum_basis.text = VBA.Format(calc_frm_projects.Cells(2, 9).value, "##,##0.0")
    Me.tb_kosten_sum_ist.text = VBA.Format(calc_frm_projects.Cells(2, 10).value, "##,##0.0")
    Me.tb_kosten_sum_aktuell.text = VBA.Format(calc_frm_projects.Cells(2, 11).value, "##,##0.0")
    Me.tb_kosten_sum_rest.text = VBA.Format(calc_frm_projects.Cells(2, 12).value, "##,##0.0")
    Me.tb_kosten_sum_abweichung.text = VBA.Format(calc_frm_projects.Cells(2, 13).value, "##,##0.0")
End Sub

'Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
'    If ress_cost_change = True Then
'        Call SQL_Abfragen.Calculate_all_RessCost_values(Me.lbl_pj_id_value.Caption)
'    End If
'End Sub

Private Sub setMSTActivity(Enabled As Boolean)
    If Enabled Then
        Me.tb_mst_bez.Enabled = True
        Me.tb_mst_bez.BackColor = &HFFFFFF
        Me.tb_mst_adate.Enabled = True
        Me.tb_mst_adate.BackColor = &HFFFFFF
        Me.tb_mst_bdate.Enabled = True
        Me.tb_mst_bdate.BackColor = &HFFFFFF
        Me.tb_mst_idate.Enabled = True
        Me.tb_mst_idate.BackColor = &HFFFFFF
    Else
        Me.lbl_mst_id_value.Caption = "ID"
        Me.tb_mst_bez.text = ""
        Me.tb_mst_adate.text = ""
        Me.tb_mst_bdate.text = ""
        Me.tb_mst_idate.text = ""
        Me.lb_mst.listindex = -1
        
        Me.tb_mst_bez.Enabled = False
        Me.tb_mst_bez.BackColor = &H8000000F
        Me.tb_mst_adate.Enabled = False
        Me.tb_mst_adate.BackColor = &H8000000F
        Me.tb_mst_bdate.Enabled = False
        Me.tb_mst_bdate.BackColor = &H8000000F
        Me.tb_mst_idate.Enabled = False
        Me.tb_mst_idate.BackColor = &H8000000F
    End If
End Sub

Private Sub setMSTListActivity(Enabled As Boolean)
    If Enabled Then
        Me.lb_mst.Enabled = True
        Me.lb_mst.BackColor = &HFFFFFF
    Else
        Me.lb_mst.Enabled = False
        Me.lb_mst.BackColor = &H8000000F
        Me.lb_mst.RowSource = ""
    End If
End Sub


Private Sub UserForm_Terminate()
    Call SQL_Abfragen.Calculate_all_RessCost_values
End Sub
Attribute VB_Name = "frm_projects_textfield"
Attribute VB_Base = "0{D03F4AA9-64C4-4ECD-B370-14BA997A8D00}{7E73DB73-5958-4D4E-9DBC-F2BFCD8DB9B4}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private Sub btn_AddLink_Click()
Dim Pass_O As String
On Error GoTo Fehler
    
    calc_master.Range("I2").ClearHyperlinks
    calc_master.Range("I2").ClearContents
    
    
    Pass_O = calc_PW.Range("C2").value
   
    nlc_intern.Application_off
        
       
    nlc_ppf_xl.Unprotect (Pass_O)
        
    

    calc_master.visible = xlSheetVisible


    
    calc_master.Select
    calc_master.Range("I2").Select

    Application.Dialogs(xlDialogInsertHyperlink).Show
    If calc_master.Range("I2").value <> "" Then
        Me.tb_wert.value = calc_master.Range("I2").Hyperlinks.Item(1).Address
    End If
Fehler:
    nlc_ppf_nav.Select
    calc_master.visible = xlSheetHidden
    If arbeitsmappenschutz = True Then nlc_ppf_xl.Protect Password:=Pass_O, Structure:=True, Windows:=False
    nlc_intern.Application_on
End Sub

Private Sub btn_schliessen_Click()
    frm_projects.tb_wert.text = Me.tb_wert.value
    Unload Me
End Sub



Private Sub UserForm_Initialize()
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    
    Me.Caption = Me.Caption & " " & frm_projects.cbb_user_feld.Column(1)
    Me.tb_wert.value = frm_projects.cbb_user_feld.Column(2)
     If frm_projects.btnOpenHyperlink.visible = True Then
        Me.btn_AddLink.visible = True
    Else
        Me.btn_AddLink.visible = False
    End If
End Sub

Private Sub UserForm_Terminate()
Dim Pass_O As String
    Pass_O = calc_PW.Range("C2").value
    nlc_intern.Application_off
    nlc_ppf_xl.Unprotect (Pass_O)
    calc_master.visible = xlSheetHidden
    If arbeitsmappenschutz = True Then nlc_ppf_xl.Protect Password:=Pass_O, Structure:=True, Windows:=False
    nlc_intern.Application_on
End Sub
Attribute VB_Name = "frm_selectFieldToMatch"
Attribute VB_Base = "0{D9823C2E-3368-4E64-8A3F-700676CCF4AC}{977B0030-A077-4F5D-BF46-BCC7B6B55DCB}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Dim cbbListIndex As Integer

Public Sub ShowWithData(currentId As String, fieldList As String, idCol, nameCol, typeCol As Integer, typeToMatch As String)
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    
    If fieldList <> "frm_Kategorie" Then
        Me.Caption = VBA.Left(Me.lbl_SP_PJSubTitle.Caption, VBA.Len(Me.lbl_SP_PJSubTitle.Caption) - 1) & " - " & Me.Caption
        Me.lbl_SP_PJList.visible = False
        Me.lbl_SP_SPList.visible = True
    Else
        Me.Caption = VBA.Left(Me.lbl_SP_SPSubTitle.Caption, VBA.Len(Me.lbl_SP_SPSubTitle.Caption) - 1) & " - " & Me.Caption
        Me.lbl_SP_PJList.visible = True
        Me.lbl_SP_SPList.visible = False
    End If
    
    Dim range1 As Range
    Dim row As Range
    Dim add As Boolean
    
    Set range1 = calc_frm_masterdata.Range(fieldList)
    
    For Each row In range1.Rows
        add = False

        If typeToMatch = "Choice" Or typeToMatch = "Choice" Then
            If row.Value2(1, typeCol) = "DropDown" Or row.Value2(1, typeCol) = "Text" Then
                add = True
            End If
        ElseIf typeToMatch = "DropDown" Then
            If row.Value2(1, typeCol) = "Choice" Or row.Value2(1, typeCol) = "Text" Then
                add = True
            End If
        ElseIf typeToMatch = "Boolean" Then
            If row.Value2(1, typeCol) = "True/False" Then
                add = True
            End If
        ElseIf typeToMatch = "True/False" Then
            If row.Value2(1, typeCol) = "Boolean" Then
                add = True
            End If
        ElseIf typeToMatch = "Text" Then
            If row.Value2(1, typeCol) = "Text" Or row.Value2(1, typeCol) = "Note" Or row.Value2(1, typeCol) = "Choice" Then
                add = True
            End If
        ElseIf typeToMatch = "Text" Or typeToMatch = "Note" Or row.Value2(1, typeCol) = "Choice" Then
            If row.Value2(1, typeCol) = "Text" Then
                add = True
            End If
        ElseIf typeToMatch = "Number" Then
            If row.Value2(1, typeCol) = "Number" Then
                add = True
            End If
        ElseIf typeToMatch = "Date" Or typeToMatch = "DateTime" Then
            If row.Value2(1, typeCol) = "Date" Or row.Value2(1, typeCol) = "DateTime" Then
                add = True
            End If
        End If
    
        If add Then
            cbb_fieldSelector.addItem (row.Value2(1, idCol))
            cbb_fieldSelector.list(cbb_fieldSelector.listCount - 1, 1) = row.Value2(1, nameCol)
        End If
    Next
    
    cbb_fieldSelector.value = currentId
    cbbListIndex = Me.cbb_fieldSelector.listindex
    
    Me.Show
End Sub

Public Function getCcbValue()
    If IsNull(Me.cbb_fieldSelector.value) Then
        getCcbValue = -1
    Else
        getCcbValue = Me.cbb_fieldSelector.value
    End If
End Function


Private Sub btn_ok_Click()
    Me.Hide
End Sub

Private Sub btn_cancel_Click()
    Me.cbb_fieldSelector.listindex = cbbListIndex
    Me.Hide
End Sub
Attribute VB_Name = "frm_set_barchart"
Attribute VB_Base = "0{A1CF6906-7DE1-4566-9FC4-29A3B685C027}{B6F8211D-744D-4D20-B794-B6CC33B34AED}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private cbb_art(2, 1) As String
Private click As Boolean
Private ress(2) As String
Private kost(2) As String
Private original_value As String

Private Sub btn_cluster_deselect_all_Click()
    Dim lCount As Long
    
    For lCount = 0 To Me.lb_cluster_list.listCount - 1
        Me.lb_cluster_list.Selected(lCount) = False
    Next
    
    'Werte in DB speichern
    Call lb_save("lb_cluster_list")
End Sub

Private Sub btn_cluster_select_top20_Click()
    Dim lCount As Long
    
    For lCount = 0 To Me.lb_cluster_list.listCount - 1
        If lCount = 20 Then
            Exit For
        End If
        
        Me.lb_cluster_list.Selected(lCount) = True
    Next
    
    'Werte in DB speichern
    Call lb_save("lb_cluster_list")
End Sub

Private Sub btn_edit_filter_Click()
    'Filter ID schreiben
    If Me.cbb_filter.listindex <> -1 Then
        calc_master.Range("last_filter_id").value = Me.cbb_filter.list(Me.cbb_filter.listindex, 0)
    End If
    
    frm_set_filter.Show
End Sub

Private Sub btn_generate_Click()
    If Me.cbb_filter.listindex < 0 Then
        MsgBox nlc_language.FindValue("SMessage_SelFilter")
        Exit Sub
    End If
    
    If Not checkFields Then
        MsgBox "Es m|fffd|ssen alle Felder ausgew|fffd|hlt werden. Bitte |fffd|berpr|fffd|fen Sie Ihre Eingabe.", vbInformation + vbOKOnly
        Exit Sub
    End If
    
    nlc_intern.Application_off
    nlc_ppf_bar.Unprotect nlc_intern.get_pw
        
    calc_master.Range("last_bar_ID").value = Me.cbb_template.list(Me.cbb_template.listindex, 1)
    
    Call lb_save("lb_wert_list")
    Call lb_save("lb_cluster_list")
    
    Dim einheit As String
    
    If Me.cbb_bar_wert_art.listindex = 0 Then
        einheit = SQL_Abfragen.getKatEinheit(Me.cbb_bar_wert_art_detail.list(Me.cbb_bar_wert_art_detail.listindex, 0))
    ElseIf Me.cbb_bar_wert_art.listindex = 1 Then
        'Wenn Kosten
        einheit = Application.WorksheetFunction.VLookup(calc_master.Range("Cost_Einheit").value, calc_frm_masterdata.Range("frm_Einheit"), 2, False)
    ElseIf Me.cbb_bar_wert_art.listindex = 2 Then
        'Wenn Ressourcen
        einheit = Application.WorksheetFunction.VLookup(calc_master.Range("Ress_Einheit").value, calc_frm_masterdata.Range("frm_Einheit"), 2, False)
    End If
    
    Call nlc_barchart.generate_barchart
    
    'Daten in Chart schreiben
    nlc_ppf_bar.Activate
    nlc_intern.Application_off
    nlc_ppf_bar.Unprotect nlc_intern.get_pw
    
    If Me.cbb_bar_wert_art.listindex = 0 Then
        If einheit <> "" Then
            nlc_ppf_bar.Range("AD48").FormulaR1C1 = "=IF(R[8]C[-25]="""","""",R[8]C[-25]) & "" (in " + einheit + ")"""
            nlc_ppf_bar.Range("Bar_Werte").value = Me.cbb_bar_wert_art_detail.text '& " (in " + einheit + ")"
        Else
            nlc_ppf_bar.Range("AD48").FormulaR1C1 = "=IF(R[8]C[-25]="""","""",R[8]C[-25]) "
            nlc_ppf_bar.Range("Bar_Werte").value = Me.cbb_bar_wert_art_detail.text
        End If
    ElseIf einheit <> "" Then
        nlc_ppf_bar.Range("AD48").FormulaR1C1 = "=IF(R[8]C[-25]="""","""",R[8]C[-25])"
        nlc_ppf_bar.Range("Bar_Werte").value = Me.cbb_bar_wert_art.text & " (in " + einheit + ")" & " - " & Me.cbb_bar_wert_art_detail.text
    Else
        nlc_ppf_bar.Range("AD48").FormulaR1C1 = "=IF(R[8]C[-25]="""","""",R[8]C[-25])"
        nlc_ppf_bar.Range("Bar_Werte").value = Me.cbb_bar_wert_art.text & " - " & Me.cbb_bar_wert_art_detail.text
    End If
    
    If cbb_bar_wert_art.listindex = 0 Then
        If Me.cbb_bar_math.listindex = 0 Then
            nlc_ppf_bar.Cells(56, 4).value = "SUM"
            nlc_ppf_bar.Cells(56, 5).value = cbb_bar_math.text
        Else
            nlc_ppf_bar.Cells(56, 4).value = "AVG"
            nlc_ppf_bar.Cells(56, 5).value = cbb_bar_math.text
        End If
    End If
    
    calc_master.Range("Filter_Bar").value = Me.cbb_filter.text
    
    Unload Me
    
    nlc_ppf_bar.Protect nlc_intern.get_pw
    nlc_intern.Application_on
End Sub

Private Sub btn_wert_deselect_all_Click()
    Dim lCount As Long
    
    For lCount = 0 To Me.lb_wert_list.listCount - 1
        Me.lb_wert_list.Selected(lCount) = False
    Next
    
    'Werte in DB speichern
    Call lb_save("lb_wert_list")
End Sub

Private Sub btn_wert_select_all_Click()
    Dim lCount As Long
    
    For lCount = 0 To Me.lb_wert_list.listCount - 1
        Me.lb_wert_list.Selected(lCount) = True
    Next
    
    'Werte in DB speichern
    Call lb_save("lb_wert_list")
End Sub

Private Sub cbb_bar_cluster_art_Change()
    If click = False Then
        click = True
    
        If Me.cbb_bar_cluster_art.listindex >= 0 Then
            Call cluster_lb_fill(Me.cbb_bar_cluster_art.list(Me.cbb_bar_cluster_art.listindex, 0))
            Call SQL_Abfragen.Update_Settings_BarChart(Me.lbl_bar_id_value.Caption, "Y_Art", Me.cbb_bar_cluster_art.list(Me.cbb_bar_cluster_art.listindex, 0))
            
            If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
                Me.btn_cluster_deselect_all.Enabled = False
                Me.btn_cluster_select_top20.Enabled = False
            Else
                Me.btn_cluster_deselect_all.Enabled = True
                Me.btn_cluster_select_top20.Enabled = True
            End If
        End If
        
        click = False
    End If
End Sub

Private Sub cbb_bar_math_Change()
    If Me.cbb_bar_math.listindex = -1 Then Exit Sub
    If click = False Then
        click = True
        
        Dim counter As Integer
        Dim art As String

        If Me.cbb_bar_math.list(Me.cbb_bar_math.listindex, 1) = "1" Then
        'Summe
            Call SQL_Abfragen.Update_Settings_BarChart(Me.lbl_bar_id_value.Caption, "Math", "1")
        ElseIf Me.cbb_bar_math.list(Me.cbb_bar_math.listindex, 1) = "2" Then
        'Durchschnitt
            Call SQL_Abfragen.Update_Settings_BarChart(Me.lbl_bar_id_value.Caption, "Math", "2")
        ElseIf Me.cbb_bar_math.list(Me.cbb_bar_math.listindex, 1) = "3" Then
        'Durchschnitt
            Call SQL_Abfragen.Update_Settings_BarChart(Me.lbl_bar_id_value.Caption, "Math", "3")
        ElseIf Me.cbb_bar_math.list(Me.cbb_bar_math.listindex, 1) = "4" Then
        'Durchschnitt
            Call SQL_Abfragen.Update_Settings_BarChart(Me.lbl_bar_id_value.Caption, "Math", "4")
        End If
        
        click = False
    End If
End Sub

Private Sub cbb_bar_wert_art_detail_Change()
    If click = False Then
        click = True
    
        If Me.cbb_bar_wert_art_detail.listindex >= 0 Then
            If Me.cbb_bar_wert_art_detail.list(Me.cbb_bar_wert_art_detail.listindex, 0) <> "" Then
                Call SQL_Abfragen.Update_Settings_BarChart(Me.lbl_bar_id_value.Caption, "X_ArtDetail", Me.cbb_bar_wert_art_detail.list(Me.cbb_bar_wert_art_detail.listindex, 0))
            Else
                Call SQL_Abfragen.Update_Settings_BarChart(Me.lbl_bar_id_value.Caption, "X_ArtDetail", nlc_intern.ConvertValueToColHeader(Me.cbb_bar_wert_art_detail.list(Me.cbb_bar_wert_art_detail.listindex, 1)))
            End If
        End If
        
        click = False
    End If
End Sub

Private Sub cbb_filter_Change()
    If Me.cbb_filter.listindex = -1 Then
        Call EnableFields(False)
        Exit Sub
    End If
    
    Call EnableFields(True)
    
    If click = False Then
        click = True
        Call SQL_Abfragen.Update_Settings_BarChart(Me.lbl_bar_id_value.Caption, "FK_Filter", Me.cbb_filter.list(Me.cbb_filter.listindex, 0))
        click = False
    End If
End Sub

Private Sub cbb_template_Change()
    If Me.cbb_template.listindex = -1 Then
        click = True
            
        Call clear_content
        Call EnableFilters(False)
        Call EnableFields(False)
            
        click = False
        Exit Sub
    End If
    
    Call EnableFilters(True)

    If Me.cbb_template.text <> "" Then
        Me.lbl_bar_id_value.Caption = Me.cbb_template.list(Me.cbb_template.listindex, 1)
        calc_master.Range("last_bar_ID").value = Me.cbb_template.list(Me.cbb_template.listindex, 1)
        Call clear_content
        Call load_content
        
        click = False
    End If
End Sub



Private Sub lb_cluster_list_Click()
    Dim counter As Integer
    Dim count As Integer
    
    For counter = 0 To Me.lb_cluster_list.listCount - 1 Step 1
        If lb_cluster_list.Selected(counter) = True Then
            count = count + 1
        End If
    Next counter
    
    If count <= 20 Then
        MsgBox nlc_language.FindValue("SMessage_SelToManyValues"), vbInformation + vbOKOnly
    Else
        Call lb_save("lb_cluster_list")
    End If
End Sub

Private Sub lb_cluster_list_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Call lb_save("lb_cluster_list")
End Sub

Private Sub lb_wert_list_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    Call lb_save("lb_wert_list")
End Sub

Private Sub lb_save(lb_name As String)
    If lb_name = "lb_cluster_list" Then
        'Benutzerdefinierte Felder
        If SQL_Abfragen.Insert_BarChart_Listbox(Me.lbl_bar_id_value.Caption, "DB_Settings_BarChart_KD", "FK_Kategorie_Detail", Me.lb_cluster_list) = False Then
            MsgBox nlc_language.FindValue("SMessage_ErrWriteDB")
        End If
    Else
        If Me.cbb_bar_wert_art.list(Me.cbb_bar_wert_art.listindex, 1) = "2" Then
        'Kosten
            If SQL_Abfragen.Insert_BarChart_Listbox(Me.lbl_bar_id_value.Caption, "DB_Settings_BarChart_KA", "FK_Kostenarten", Me.lb_wert_list) = False Then
                MsgBox nlc_language.FindValue("SMessage_ErrWriteDB")
            End If
        ElseIf Me.cbb_bar_wert_art.list(Me.cbb_bar_wert_art.listindex, 1) = "3" Then
            'Ressourcen
            If SQL_Abfragen.Insert_BarChart_Listbox(Me.lbl_bar_id_value.Caption, "DB_Settings_BarChart_RA", "FK_Ressourcenarten", Me.lb_wert_list) = False Then
                MsgBox nlc_language.FindValue("SMessage_ErrWriteDB")
            End If
        End If
    End If
End Sub

Private Sub UserForm_Initialize()
    Application.ScreenUpdating = False
    click = True
    
    Dim counter As Integer
    Dim art As String
    
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    
    kost(0) = Me.cbb_bar_wert_art_detail.list(0, 0)
    kost(1) = Me.cbb_bar_wert_art_detail.list(1, 0)
    kost(2) = Me.cbb_bar_wert_art_detail.list(2, 0)
    ress(0) = Me.cbb_bar_wert_art_detail.list(3, 0)
    ress(1) = Me.cbb_bar_wert_art_detail.list(4, 0)
    ress(2) = Me.cbb_bar_wert_art_detail.list(5, 0)
    
    cbb_art(0, 0) = Me.cbb_bar_wert_art.list(0, 0)
    cbb_art(1, 0) = Me.cbb_bar_wert_art.list(1, 0)
    cbb_art(2, 0) = Me.cbb_bar_wert_art.list(2, 0)
    
    'cbb Value
    Me.cbb_bar_wert_art.list(0, 1) = "1"
    Me.cbb_bar_wert_art.list(1, 1) = "2"
    Me.cbb_bar_wert_art.list(2, 1) = "3"
    
    'cbb_math
    Me.cbb_bar_math.list(0, 1) = "1"
    Me.cbb_bar_math.list(1, 1) = "2"
    Me.cbb_bar_math.list(2, 1) = "3"
    Me.cbb_bar_math.list(3, 1) = "4"
    
    
    Call SQL_Abfragen.Get_AllKostenarten
    Call SQL_Abfragen.Get_AllRessourcenarten
    Call SQL_Abfragen.Get_AllKategorien
    Call SQL_Abfragen.Get_AllKatDetails
    Call SQL_Abfragen.Get_AllFilter
    
    Call fill_standardfields
    
    Application.Calculate
    
    Me.cbb_filter.RowSource = "frm_Filter"
    
    Call clear_content
    Call load_content
    

'    If Me.cbb_template.listindex <> -1 And Me.cbb_filter.listindex <> -1 Then
'        Call EnableFields(True)
'    Else
'        Call EnableFields(False)
'    End If
    
    click = False
    Application.ScreenUpdating = True
End Sub

Private Sub btn_add_template_Click()
    If click = False Then
        click = True
        
        Dim InsertColumns As String
        Dim insertValues As String
        
        If calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user" Then
            InsertColumns = "Name, FK_Users"
            insertValues = "New', '" & calc_master.Range("WindowsLogin").value & ""
        Else
            InsertColumns = ""
            insertValues = "New"
        End If
    
        If SQL_Abfragen.Insert_Template(insertValues, "DB_Settings_BarChart", InsertColumns) Then
            Call fill_standardfields
        Else
            MsgBox nlc_language.FindValue("SMessage_ErrAddTemp")
        End If
        
        click = False
    End If
End Sub

Private Sub btn_del_template_Click()
    If Me.lb_templates.listindex = -1 Then Exit Sub
    
    If click = False Then
        click = True
        
        'Verkn|fffd|pfte Tabellen DB_Settings_BarChart_xxx hat eine L|fffd|schweitergabe (auch von Ressourcenarten, Kostenarten und Kategoriedetails aus)
        If SQL_Abfragen.Delete_Template(Me.lb_templates.list(Me.lb_templates.listindex, 1), "DB_Settings_BarChart") = True Then
            Call fill_standardfields
            Me.tb_template_name.value = ""
        Else
            MsgBox nlc_language.FindValue("SMessage_ErrDelTemp")
        End If
        
        click = False
    End If
End Sub

Private Sub lb_templates_Click()
    If click = False Then
        click = True
        
        If tool_art = "Demo" Or ((calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.lb_templates.list(Me.lb_templates.listindex, 0), VBA.Len(GlobalIdLeft)) = GlobalIdLeft) Then
            Me.tb_template_name.Enabled = False
            Me.tb_template_name.BackColor = &H8000000F
            Me.btn_del_template.Enabled = False
        Else
            Me.tb_template_name.Enabled = True
            Me.tb_template_name.BackColor = &HFFFFFF
            Me.btn_del_template.Enabled = True
        End If
        
        Me.tb_template_name.text = get_ValueWithoutGlobal(Me.lb_templates.list(Me.lb_templates.listindex, 0))

        click = False
    End If
End Sub

Private Sub tb_template_name_Enter()
    If Me.lb_templates.listindex = -1 Then Me.tb_template_name.text = ""
    original_value = Me.tb_template_name.text
End Sub

Private Sub tb_template_name_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False Then
        If original_value <> Me.tb_template_name.text And Me.lb_templates.listindex > -1 Then
            click = True
            
            If VBA.Left(Me.tb_template_name.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
                MsgBox "Der Name des Templates darf nicht mit '" & GlobalIdLeft & "' beginnen."
                Me.tb_template_name.text = get_ValueWithoutGlobal(Me.lb_templates.list(Me.lb_templates.listindex, 0))
                Exit Sub
            End If
            
            Dim TBValue As String
            
            TBValue = Me.tb_template_name.text
            
            Call SQL_Abfragen.Update_Settings_BarChart(Me.lb_templates.list(Me.lb_templates.listindex, 1), "Name", TBValue)
            Call fill_standardfields
            
            If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") Then
                Me.lb_templates.text = TBValue
                Me.cbb_template.text = TBValue
            Else
                Me.lb_templates.text = GlobalIdLeft & TBValue & GlobalIdRight
                Me.cbb_template.text = GlobalIdLeft & TBValue & GlobalIdRight
            End If
            
            click = False
        End If
    End If
End Sub

Private Sub chb_bar_cluster_shortname_Click()
    If click = False Then
        click = True

        Call SQL_Abfragen.Update_Settings_BarChart(Me.lbl_bar_id_value.Caption, "Y_Shortname", nlc_intern.get_true_false(Me.chb_bar_cluster_shortname.value))
        
        click = False
    End If
End Sub

Private Sub chb_bar_wert_color_Click()
    If click = False Then
        click = True

        Call SQL_Abfragen.Update_Settings_BarChart(Me.lbl_bar_id_value.Caption, "RessColor", nlc_intern.get_true_false(Me.chb_bar_wert_color.value))
        
        click = False
    End If
End Sub

Private Sub chb_bar_wert_RessGroup_Click()
    If click = False Then
        click = True
        
        Call SQL_Abfragen.Update_Settings_BarChart(Me.lbl_bar_id_value.Caption, "X_Groups", nlc_intern.get_true_false(Me.chb_bar_wert_RessGroup.value))
        
        Call ress_lb_fill
        
        click = False
    End If
End Sub

Private Sub cbb_bar_wert_art_Change()
    If Me.cbb_bar_wert_art.listindex = -1 Then Exit Sub
    If click = False Then
        click = True

        Call ValueEnabled(True)

        Me.cbb_bar_wert_art_detail.clear

        Dim counter As Integer
        Dim art As String
        Dim achsen As Boolean
        
        If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
            Me.btn_wert_select_all.Enabled = False
            Me.btn_wert_deselect_all.Enabled = False
            Me.lb_wert_list.Enabled = False
        Else
            Me.btn_wert_select_all.Enabled = True
            Me.btn_wert_deselect_all.Enabled = True
            Me.lb_wert_list.Enabled = True
        End If
        
        Call SQL_Abfragen.Update_Settings_BarChart(Me.lbl_bar_id_value.Caption, "X_Art", Me.cbb_bar_wert_art.list(Me.cbb_bar_wert_art.listindex, 1))
            
        If Me.cbb_bar_wert_art.list(Me.cbb_bar_wert_art.listindex, 1) = "1" Then
        'Benutzerdefinierte Felder
            For counter = 1 To calc_frm_masterdata.Range("frm_Kategorie").Rows.count Step 1
                art = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
                achsen = nlc_intern.get_true_false(calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 9).value)
                If art = "Number" And achsen = True Then
                    Me.cbb_bar_wert_art_detail.addItem calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 1).value
                    Me.cbb_bar_wert_art_detail.list(Me.cbb_bar_wert_art_detail.listCount - 1, 1) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 3).value
                    Me.cbb_bar_wert_art_detail.list(Me.cbb_bar_wert_art_detail.listCount - 1, 2) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
                End If
            Next counter
            
            Me.lb_wert_list.clear
            
            Me.btn_wert_select_all.Enabled = False
            Me.btn_wert_deselect_all.Enabled = False
            Me.lb_wert_list.Enabled = False
            
            Call SQL_Abfragen.Update_Settings_BarChart(Me.lbl_bar_id_value.Caption, "RessColor", nlc_intern.get_true_false(False))
        ElseIf Me.cbb_bar_wert_art.list(Me.cbb_bar_wert_art.listindex, 1) = "2" Then
        'Kosten
            Me.cbb_bar_wert_art_detail.addItem
            Me.cbb_bar_wert_art_detail.list(Me.cbb_bar_wert_art_detail.listCount - 1, 1) = kost(0)
            Me.cbb_bar_wert_art_detail.addItem
            Me.cbb_bar_wert_art_detail.list(Me.cbb_bar_wert_art_detail.listCount - 1, 1) = kost(1)
            Me.cbb_bar_wert_art_detail.addItem
            Me.cbb_bar_wert_art_detail.list(Me.cbb_bar_wert_art_detail.listCount - 1, 1) = kost(2)
            
            Me.chb_bar_wert_color.visible = True
            
            Call cost_lb_fill
            
            Me.cbb_bar_wert_art_detail.listindex = 0
            Call SQL_Abfragen.Update_Settings_BarChart(Me.lbl_bar_id_value.Caption, "X_ArtDetail", nlc_intern.ConvertValueToColHeader(Me.cbb_bar_wert_art_detail.list(Me.cbb_bar_wert_art_detail.listindex, 1)))
            
        ElseIf Me.cbb_bar_wert_art.list(Me.cbb_bar_wert_art.listindex, 1) = "3" Then
        'Ressourcen
            Me.cbb_bar_wert_art_detail.addItem
            Me.cbb_bar_wert_art_detail.list(Me.cbb_bar_wert_art_detail.listCount - 1, 1) = ress(0)
            Me.cbb_bar_wert_art_detail.addItem
            Me.cbb_bar_wert_art_detail.list(Me.cbb_bar_wert_art_detail.listCount - 1, 1) = ress(1)
            Me.cbb_bar_wert_art_detail.addItem
            Me.cbb_bar_wert_art_detail.list(Me.cbb_bar_wert_art_detail.listCount - 1, 1) = ress(2)
            
            Me.chb_bar_wert_RessGroup.visible = True
            Me.chb_bar_wert_color.visible = True
            
            Call ress_lb_fill
            
            Me.cbb_bar_wert_art_detail.listindex = 0
            Call SQL_Abfragen.Update_Settings_BarChart(Me.lbl_bar_id_value.Caption, "X_ArtDetail", nlc_intern.ConvertValueToColHeader(Me.cbb_bar_wert_art_detail.list(Me.cbb_bar_wert_art_detail.listindex, 1)))
        End If

        click = False
    End If
End Sub

Private Sub ValueEnabled(enable As Boolean)
    If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
        enable = False
    End If

    If enable Then
        Me.cbb_bar_wert_art_detail.Enabled = True
        Me.chb_bar_wert_RessGroup.visible = False
        Me.chb_bar_wert_color.visible = False
    Else
        Call SQL_Abfragen.Update_Settings_BarChart(Me.lbl_bar_id_value.Caption, "X_ArtDetail", "")
        Me.cbb_bar_wert_art_detail.listindex = -1
        Me.cbb_bar_wert_art_detail.Enabled = False
    End If
End Sub

Private Sub fill_standardfields()
    Dim i As Integer
    Dim SelectedItem As String
    'Templates laden (in DropDown und Listbox)
    Dim Template() As String
    
    Template = SQL_Abfragen.Get_Settings_dropdown("DB_Settings_BarChart")
    
    If Not VBA.IsNull(Me.cbb_template.value) Then
        SelectedItem = Me.cbb_template.value
    End If
    
    Me.cbb_template.clear
    Me.lb_templates.clear
    
    If Template(0, 0) <> "leer" Then
        For i = 0 To UBound(Template) Step 1
            Me.cbb_template.addItem (Template(i, 0))
            Me.cbb_template.list(Me.cbb_template.listCount - 1, 1) = (Template(i, 1))
            Me.lb_templates.addItem (Template(i, 0))
            Me.lb_templates.list(Me.lb_templates.listCount - 1, 1) = (Template(i, 1))
        Next i
    End If
    
    On Error Resume Next
    Me.cbb_template.value = SelectedItem
    'Filter bef|fffd|llen
    'geht noch nicht, da die Filtertabelle fehlt und demnach die ID nicht mit dem Name aufgel|fffd|st werden kann
End Sub

Private Sub clear_content()
    'Filter
    Me.cbb_filter.listindex = -1
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Werte
    Me.cbb_bar_wert_art.listindex = -1
    Me.cbb_bar_wert_art_detail.listindex = -1
    'Schnitt
    Me.cbb_bar_math.listindex = -1
    'Cluster bef|fffd|llen
    Me.cbb_bar_cluster_art.clear
    'Checkboxen laden
    Me.chb_bar_wert_RessGroup.value = False
    Me.chb_bar_wert_color.value = False
    
    Me.lb_cluster_list.clear
    Me.lb_wert_list.clear
    
    Me.chb_bar_cluster_shortname.value = False
    
    Me.btn_cluster_deselect_all.Enabled = False
    Me.btn_cluster_select_top20.Enabled = False
End Sub

Private Sub load_content()
    If Not VBA.IsNumeric(calc_master.Range("last_bar_ID").value) Then Exit Sub
    On Error Resume Next

    Dim counter As Integer
    Dim art As String
    Dim value_detail As String
    Dim Math As String
    Dim filter As String

    'Templatetitel laden
    Me.cbb_template.text = SQL_Abfragen.Get_Setting_Bar_Value(calc_master.Range("last_bar_ID").value, "Name") 'calc_pipe_set.Cells(4, 3).value
    Me.lbl_bar_id_value.Caption = Me.cbb_template.list(Me.cbb_template.listindex, 1)
    If Not VBA.IsNumeric(Me.lbl_bar_id_value.Caption) Then Exit Sub
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Allgemein laden
    'Filter laden
    filter = SQL_Abfragen.Get_Setting_Bar_Value(calc_master.Range("last_bar_ID").value, "FK_Filter")
    
    For counter = 0 To Me.cbb_filter.listCount - 1
        If Me.cbb_filter.list(counter, 0) = filter Then
            Me.cbb_filter.listindex = counter
            Exit For
        End If
    Next counter


    'Checkboxen laden
    Me.chb_bar_wert_RessGroup.value = SQL_Abfragen.Get_Setting_Bar_Value(Me.lbl_bar_id_value.Caption, "X_Groups")
    Me.chb_bar_wert_color.value = SQL_Abfragen.Get_Setting_Bar_Value(Me.lbl_bar_id_value.Caption, "RessColor")
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Werte bef|fffd|llen
    art = SQL_Abfragen.Get_Setting_Bar_Value(Me.lbl_bar_id_value.Caption, "X_Art")
    If art = "3" Then
        value_detail = nlc_intern.ConvertColHeaderToValue(SQL_Abfragen.Get_Setting_Bar_Value(Me.lbl_bar_id_value.Caption, "X_ArtDetail"), True)
    Else
        value_detail = nlc_intern.ConvertColHeaderToValue(SQL_Abfragen.Get_Setting_Bar_Value(Me.lbl_bar_id_value.Caption, "X_ArtDetail"), False)
    End If
    
    Math = SQL_Abfragen.Get_Setting_Bar_Value(Me.lbl_bar_id_value.Caption, "Math")
    
    click = False
    
    If art = "2" Or art = "3" Then
        'Kosten / Ressourcen
        Me.cbb_bar_wert_art.listindex = VBA.CInt(art) - 1
        Me.cbb_bar_wert_art_detail.text = value_detail
        
        If art = "2" Then
            'kosten
            Call cost_lb_fill
            Call SQL_Abfragen.Get_Setting_bar_LBValues(Me.lbl_bar_id_value.Caption, Me.lb_wert_list, "DB_Settings_BarChart_KA", "FK_Kostenarten")
        Else
            'ressourcen
            Call ress_lb_fill
            Call SQL_Abfragen.Get_Setting_bar_LBValues(Me.lbl_bar_id_value.Caption, Me.lb_wert_list, "DB_Settings_BarChart_RA", "FK_Ressourcenarten")
        End If
        
    Else
        Me.lb_wert_list.clear
        
        'Benutzerdefinierte Felder
        For counter = 0 To Me.cbb_bar_wert_art.listCount - 1
            If Me.cbb_bar_wert_art.list(counter, 1) = "1" Then
                Me.cbb_bar_wert_art.listindex = counter
                Exit For
            End If
        Next counter

        For counter = 0 To Me.cbb_bar_wert_art_detail.listCount - 1 Step 1
            If Me.cbb_bar_wert_art_detail.list(counter, 0) = value_detail Then
                Me.cbb_bar_wert_art_detail.text = Me.cbb_bar_wert_art_detail.list(counter, 1)
                Exit For
            End If
        Next counter
    End If
    
    'Schnitt
    For counter = 0 To Me.cbb_bar_math.listCount - 1
        If Me.cbb_bar_math.list(counter, 1) = Math Then
            Me.cbb_bar_math.listindex = counter
            Exit For
        End If
    Next counter
    
    'Cluster bef|fffd|llen
    
    value_detail = nlc_intern.ConvertColHeaderToValue(SQL_Abfragen.Get_Setting_Bar_Value(Me.lbl_bar_id_value.Caption, "Y_Art"))
    Me.cbb_bar_cluster_art.clear
    For counter = 1 To calc_frm_masterdata.Range("frm_Kategorie").Rows.count Step 1
        art = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
        If art = "DropDown" Or art = "True/False" Then
            Me.cbb_bar_cluster_art.addItem calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 1).value
            Me.cbb_bar_cluster_art.list(Me.cbb_bar_cluster_art.listCount - 1, 1) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 3).value
            Me.cbb_bar_cluster_art.list(Me.cbb_bar_cluster_art.listCount - 1, 2) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
        End If
    Next counter
    
    For counter = 0 To Me.cbb_bar_cluster_art.listCount - 1 Step 1
        If Me.cbb_bar_cluster_art.list(counter, 0) = value_detail Then
            Me.cbb_bar_cluster_art.listindex = counter
            
            Call cluster_lb_fill(value_detail)
            Call SQL_Abfragen.Get_Setting_bar_LBValues(Me.lbl_bar_id_value.Caption, Me.lb_cluster_list, "DB_Settings_BarChart_KD", "FK_Kategorie_Detail")
            Exit For
        End If
    Next counter
    
    click = True
    
    Me.chb_bar_cluster_shortname.value = SQL_Abfragen.Get_Setting_Bar_Value(Me.lbl_bar_id_value.Caption, "Y_Shortname")
    
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Ressourcenwerte laden (Ressourcenliste kommt von frm_Ressourcenarten)
    
End Sub

Private Sub cost_lb_fill()
    Me.lb_wert_list.clear

    Dim counter As Integer
    Dim lb_counter As Integer
    Dim last_group As String

    lb_counter = 0

    For counter = 1 To calc_frm_masterdata.Range("frm_Kostenarten").Rows.count
        If calc_frm_masterdata.Range("frm_Kostenarten").Cells(counter, 3).value <> "-" Then
            Me.lb_wert_list.addItem calc_frm_masterdata.Range("frm_Kostenarten").Cells(counter, 1).value
            Me.lb_wert_list.list(lb_counter, 1) = calc_frm_masterdata.Range("frm_Kostenarten").Cells(counter, 3).value
            lb_counter = lb_counter + 1
        End If
    Next counter
End Sub

Private Sub ress_lb_fill()
    Me.lb_wert_list.clear
    
    Dim counter As Integer
    Dim lb_counter As Integer
    Dim last_group As String
    
    lb_counter = 0
    
    For counter = 1 To calc_frm_masterdata.Range("frm_Ressourcenarten").Rows.count - 1
        If Me.chb_bar_wert_RessGroup.value = True Then
        'nur mit Gruppen f|fffd|llen
            If VBA.Left(calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 3).value, 5) <> "     " Then
                Me.lb_wert_list.addItem calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 1).value
                Me.lb_wert_list.list(lb_counter, 1) = calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 3).value
                
                lb_counter = lb_counter + 1
            End If
        Else
            'nur mit Ressourcen f|fffd|llen (+ Gruppenk|fffd|rzel)
            If VBA.Left(calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 3).value, 5) = "     " Then
                Me.lb_wert_list.addItem calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 1).value
                Me.lb_wert_list.list(lb_counter, 1) = VBA.Right(calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 3).value, VBA.Len(calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 3).value) - 5) & " (" & last_group & ")"
                
                lb_counter = lb_counter + 1
            Else
                last_group = calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 2).value
            End If
        End If
    Next counter
End Sub

Private Sub cluster_lb_fill(ID As String)
    Me.lb_cluster_list.clear
    
    Dim counter As Integer
    Dim lb_counter As Integer
    Dim last_group As String
    
    lb_counter = 0
    
    For counter = 1 To calc_frm_masterdata.Range("frm_KatDetails").Rows.count
        If calc_frm_masterdata.Range("frm_KatDetails").Cells(counter, 6).value = ID Then
            Me.lb_cluster_list.addItem calc_frm_masterdata.Range("frm_KatDetails").Cells(counter, 1).value
            Me.lb_cluster_list.list(lb_counter, 1) = calc_frm_masterdata.Range("frm_KatDetails").Cells(counter, 3).value
                
            lb_counter = lb_counter + 1
        End If
    Next counter
End Sub

Private Sub EnableFilters(enable As Boolean)
    If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
        enable = False
    End If
    
    Me.cbb_filter.Enabled = enable
    
    If Not enable Then
        Me.cbb_filter.BackColor = &H8000000F
    Else
        Me.cbb_filter.BackColor = &HFFFFFF
    End If
End Sub

Private Sub EnableFields(enable As Boolean)
    If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
        enable = False
    End If
    
     If tool_art = "Demo" Then
        enable = False
        Me.btn_add_template.Enabled = enable
        Me.btn_del_template.Enabled = enable
    End If
    
    
    Me.cbb_bar_wert_art.Enabled = enable
    Me.cbb_bar_wert_art_detail.Enabled = enable
    Me.cbb_bar_math.Enabled = enable
    Me.cbb_bar_cluster_art.Enabled = enable
    Me.lb_cluster_list.Enabled = enable
    Me.lb_wert_list.Enabled = enable
    Me.chb_bar_cluster_shortname.Enabled = enable
    Me.chb_bar_wert_color.Enabled = enable
    Me.chb_bar_wert_RessGroup.Enabled = enable
    
    If Not enable Then
        Me.cbb_bar_wert_art.BackColor = &H8000000F
        Me.cbb_bar_wert_art_detail.BackColor = &H8000000F
        Me.cbb_bar_math.BackColor = &H8000000F
        Me.cbb_bar_cluster_art.BackColor = &H8000000F
        Me.lb_cluster_list.BackColor = &H8000000F
        Me.lb_wert_list.BackColor = &H8000000F
        Me.chb_bar_cluster_shortname.BackColor = &H8000000F
        Me.chb_bar_wert_color.BackColor = &H8000000F
        Me.chb_bar_wert_RessGroup.BackColor = &H8000000F
    Else
        Me.cbb_bar_wert_art.BackColor = &HFFFFFF
        Me.cbb_bar_wert_art_detail.BackColor = &HFFFFFF
        Me.cbb_bar_math.BackColor = &HFFFFFF
        Me.cbb_bar_cluster_art.BackColor = &HFFFFFF
        
        If Me.lb_cluster_list.BackColor <> &HFFFFFF Then
            Me.lb_cluster_list.BackColor = &HFFFFFF
        End If
        
        If Me.lb_wert_list.BackColor <> &HFFFFFF Then
            Me.lb_wert_list.BackColor = &HFFFFFF
        End If
        Me.chb_bar_cluster_shortname.BackColor = &HFFFFFF
        Me.chb_bar_wert_color.BackColor = &HFFFFFF
        Me.chb_bar_wert_RessGroup.BackColor = &HFFFFFF
    End If
End Sub

Private Function checkFields() As Boolean
    If Me.cbb_template.listindex <> -1 And _
        Me.cbb_filter.listindex <> -1 And _
        Me.cbb_bar_wert_art.listindex <> -1 And _
        Me.cbb_bar_wert_art_detail.listindex <> -1 And _
        Me.cbb_bar_math.listindex <> -1 And _
        Me.cbb_bar_cluster_art.listindex <> -1 Then
        checkFields = True
    Else
        checkFields = False
    End If
End Function
Attribute VB_Name = "frm_set_cost_histo"
Attribute VB_Base = "0{16B64511-0205-4801-B48A-7F7ED773F445}{BEDDA66F-0B49-4E02-B581-16A2C10E3A0E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private click As Boolean
Private original_value As String

Private Sub btn_add_template_Click()
    If click = False Then
        click = True
        
        Dim InsertColumns As String
        Dim insertValues As String
        
        If calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user" Then
            InsertColumns = "Name, FK_Users"
            insertValues = "New', '" & calc_master.Range("WindowsLogin").value & ""
        Else
            InsertColumns = ""
            insertValues = "New"
        End If
        
        If SQL_Abfragen.Insert_Template(insertValues, "DB_Settings_CostHisto", InsertColumns) Then
            Call fill_standardfields
        Else
            MsgBox nlc_language.FindValue("SMessage_ErrAddTemp")
        End If
        
        click = False
    End If
End Sub

Private Sub btn_del_template_Click()
    If Me.lb_templates.listindex = -1 Then Exit Sub
    
    If click = False Then
        click = True
        
        'Verkn|fffd|pfte Tabelle DB_Settings_RessHisto_RA hat eine L|fffd|schweitergabe (auch von Ressourcenarten aus)
        If SQL_Abfragen.Delete_Template(Me.lb_templates.list(Me.lb_templates.listindex, 1), "DB_Settings_CostHisto") = True Then
            Call fill_standardfields
        Else
            MsgBox nlc_language.FindValue("SMessage_ErrDelTemp")
        End If

        click = False
    End If
End Sub

Private Sub btn_deselect_all_Click()
    Dim lCount As Long
    
    For lCount = 0 To Me.lb_cost_list.listCount - 1
        Me.lb_cost_list.Selected(lCount) = False
    Next
    
    'Werte in DB speichern
    If SQL_Abfragen.Insert_CostHisto_KA(Me.lbl_chg_id_value.Caption, Me.lb_cost_list) = False Then
        MsgBox nlc_language.FindValue("SMessage_ErrWriteDB")
    End If
End Sub

Private Sub btn_edit_filter_Click()
    'Filter ID schreiben
    If Me.cbb_filter.listindex <> -1 Then
        calc_master.Range("last_filter_id").value = Me.cbb_filter.list(Me.cbb_filter.listindex, 0)
    End If
    
    frm_set_filter.Show
End Sub

Private Sub btn_generate_Click()
    If Me.cbb_filter.listindex < 0 Then
        MsgBox nlc_language.FindValue("SMessage_SelFilter")
        Exit Sub
    End If
    
    If Not checkFields Then
        MsgBox "Es m|fffd|ssen alle Felder ausgew|fffd|hlt werden. Bitte |fffd|berpr|fffd|fen Sie Ihre Eingabe.", vbInformation + vbOKOnly
        Exit Sub
    End If

    calc_master.Range("last_chg_ID").value = Me.cbb_template.list(Me.cbb_template.listindex, 1)
    
    nlc_intern.Application_off
    nlc_ppf_costhisto.Unprotect nlc_intern.get_pw
    
    If SQL_Abfragen.Insert_CostHisto_KA(Me.lbl_chg_id_value.Caption, Me.lb_cost_list) = False Then
        MsgBox nlc_language.FindValue("SMessage_ErrWriteDB")
    End If
    
    nlc_ppf_costhisto.Activate
    Call SQL_Abfragen.Get_CostHisto_Calc(Me.lbl_chg_id_value.Caption)
    calc_master.Range("Filter_CHG").value = Me.cbb_filter.text
    
    Unload Me
    
    nlc_ppf_costhisto.Protect nlc_intern.get_pw
    nlc_intern.Application_on
End Sub

Private Sub btn_select_all_Click()
    Dim lCount As Long
    
    For lCount = 0 To Me.lb_cost_list.listCount - 1
        Me.lb_cost_list.Selected(lCount) = True
    Next
    
    'Werte in DB speichern
    If SQL_Abfragen.Insert_CostHisto_KA(Me.lbl_chg_id_value.Caption, Me.lb_cost_list) = False Then
        MsgBox nlc_language.FindValue("SMessage_ErrWriteDB")
    End If
End Sub

Private Sub cbb_filter_Change()
    If Me.cbb_filter.listindex = -1 Then
        Call EnableFields(False)
        Exit Sub
    End If
    
    Call EnableFields(True)

    If click = False Then
        click = True

        Call SQL_Abfragen.Update_Settings_CostHisto(Me.lbl_chg_id_value.Caption, "FK_Filter", Me.cbb_filter.list(Me.cbb_filter.listindex, 0))
        
        click = False
    End If
End Sub

Private Sub cbb_template_Change()
    If Me.cbb_template.listindex = -1 Then
        click = True
            
        Call clear_content
        Call EnableFilters(False)
        Call EnableFields(False)
            
        click = False
        Exit Sub
    End If
    
    Call EnableFilters(True)
    
    click = True
        
    Me.lbl_chg_id_value.Caption = Me.cbb_template.list(Me.cbb_template.listindex, 1)
    calc_master.Range("last_chg_ID").value = Me.cbb_template.list(Me.cbb_template.listindex, 1)
    Call clear_content
    Call load_content
    
    click = False
End Sub

Private Sub cbb_year_Change()
    If click = False Then
        click = True

        Call SQL_Abfragen.Update_Settings_CostHisto(Me.lbl_chg_id_value.Caption, "Year", Me.cbb_year.text)
        
        click = False
    End If
End Sub

Private Sub lb_cost_list_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False Then
        click = True
        
        If SQL_Abfragen.Insert_CostHisto_KA(Me.lbl_chg_id_value.Caption, Me.lb_cost_list) = False Then
            MsgBox nlc_language.FindValue("SMessage_ErrWriteDB")
        End If
        
        click = False
    End If
End Sub

Private Sub lb_templates_Click()
    If click = False Then
        click = True
        
        If tool_art = "Demo" Or ((calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.lb_templates.list(Me.lb_templates.listindex, 0), VBA.Len(GlobalIdLeft)) = GlobalIdLeft) Then
            Me.tb_template_name.Enabled = False
            Me.tb_template_name.BackColor = &H8000000F
            Me.btn_del_template.Enabled = False
        Else
            Me.tb_template_name.Enabled = True
            Me.tb_template_name.BackColor = &HFFFFFF
            Me.btn_del_template.Enabled = True
        End If

        Me.tb_template_name.text = get_ValueWithoutGlobal(Me.lb_templates.list(Me.lb_templates.listindex, 0))
        
        click = False
    End If
End Sub

Private Sub tb_template_name_Enter()
    If Me.lb_templates.listindex = -1 Then Me.tb_template_name.text = ""
    original_value = Me.tb_template_name.text
End Sub

Private Sub tb_template_name_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False Then
        If original_value <> Me.tb_template_name.text And Me.lb_templates.listindex > -1 Then
            click = True
            
            If VBA.Left(Me.tb_template_name.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
                MsgBox "Der Name des Templates darf nicht mit '" & GlobalIdLeft & "' beginnen."
                Me.tb_template_name.text = get_ValueWithoutGlobal(Me.lb_templates.list(Me.lb_templates.listindex, 0))
                Exit Sub
            End If
            
            Dim TBValue As String
            
            TBValue = Me.tb_template_name.text
            
            Call SQL_Abfragen.Update_Settings_CostHisto(Me.lb_templates.list(Me.lb_templates.listindex, 1), "Name", TBValue)
            Call fill_standardfields
            
            If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
                Me.lb_templates.text = TBValue
                Me.cbb_template.text = TBValue
            Else
                Me.lb_templates.text = GlobalIdLeft & TBValue & GlobalIdRight
                Me.cbb_template.text = GlobalIdLeft & TBValue & GlobalIdRight
            End If
            
            click = False
        End If
    End If
End Sub

Private Sub UserForm_Initialize()
    Application.ScreenUpdating = False
    click = True
    
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    
    Call SQL_Abfragen.Get_AllKostenarten
    Call SQL_Abfragen.Get_AllFilter
    Call fill_standardfields
    
    Application.Calculate
    Me.cbb_filter.RowSource = "frm_Filter"
    click = True
    
    If Me.cbb_template.listindex <> -1 And Me.cbb_filter.listindex <> -1 Then
        Call EnableFields(True)
    Else
        Call EnableFields(False)
    End If
    
    Call clear_content
    Call load_content
    
    click = False
    Application.ScreenUpdating = True
End Sub

Private Sub generate_cbb_year()
    Dim i As Integer
    Dim selected_item As String
    'cbb_year bef|fffd|llen
    
    If Not VBA.IsNull(Me.cbb_year.value) Then
        selected_item = Me.cbb_year.value
    End If
    
    cbb_year.clear
    For i = 2000 To 2099 Step 1
        Me.cbb_year.addItem i
    Next i
    
    On Error Resume Next
    Me.cbb_year.value = selected_item
End Sub

Private Sub fill_standardfields()
    'Templates laden (in DropDown und Listbox)
    Dim Template() As String
    Dim i As Integer
    Dim selected_item As String
    
    If Not VBA.IsNull(Me.cbb_template.value) Then
        selected_item = Me.cbb_template.value
    End If
    
    Template = SQL_Abfragen.Get_Settings_dropdown("DB_Settings_CostHisto")
    Me.cbb_template.clear
    Me.lb_templates.clear

    If Template(0, 0) <> "leer" Then
        For i = 0 To UBound(Template) Step 1
            Me.cbb_template.addItem (Template(i, 0))
            Me.cbb_template.list(Me.cbb_template.listCount - 1, 1) = (Template(i, 1))
            Me.lb_templates.addItem (Template(i, 0))
            Me.lb_templates.list(Me.lb_templates.listCount - 1, 1) = (Template(i, 1))
        Next i
    End If
    
    On Error Resume Next
    Me.cbb_template.value = selected_item
    
    'Filter bef|fffd|llen
    'geht noch nicht, da die Filtertabelle fehlt und demnach die ID nicht mit dem Name aufgel|fffd|st werden kann
End Sub

Private Sub load_content()
    If Not VBA.IsNumeric(calc_master.Range("last_chg_ID").value) Then Exit Sub
    On Error Resume Next

    Dim counter As Integer
    Dim art As String
    Dim filter As String

    'Templatetitel laden
    Me.cbb_template.text = SQL_Abfragen.Get_Setting_Chg_Value(calc_master.Range("last_chg_ID").value, "Name") 'calc_pipe_set.Cells(4, 3).value
    Me.lbl_chg_id_value.Caption = Me.cbb_template.list(Me.cbb_template.listindex, 1)
    If Not VBA.IsNumeric(Me.lbl_chg_id_value.Caption) Then Exit Sub
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Allgemein laden
    'Filter laden
    filter = SQL_Abfragen.Get_Setting_Chg_Value(calc_master.Range("last_chg_ID").value, "FK_Filter")
    
    For counter = 0 To Me.cbb_filter.listCount - 1
        If Me.cbb_filter.list(counter, 0) = filter Then
            Me.cbb_filter.listindex = counter
            Exit For
        End If
    Next counter

    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Jahr laden
    Me.cbb_year.text = VBA.Year(VBA.Now) 'SQL_Abfragen.Get_Setting_Chg_Value(Me.lbl_chg_id_value.Caption, "Year")
    Call SQL_Abfragen.Update_Settings_CostHisto(Me.lbl_chg_id_value.Caption, "Year", Me.cbb_year.text)
    
'    'Gruppen Checkbox laden
'    Me.chb_chg_RessGroup.value = SQL_Abfragen.Get_Setting_Chg_Value(Me.lbl_chg_id_value.Caption, "Groups")
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Ressourcenwerte laden (Ressourcenliste kommt von frm_Ressourcenarten)
    Call cost_lb_fill
    Call SQL_Abfragen.Get_Setting_chg_Kosten(Me.lbl_chg_id_value.Caption, Me.lb_cost_list)
    
End Sub

Private Sub clear_content()
    Call generate_cbb_year
    
    On Error Resume Next
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Allgemein laden
    'Filter laden
    Me.cbb_filter.listindex = -1

    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Jahr laden
    Me.cbb_year.listindex = -1
    
'    'Gruppen Checkbox laden
'    Me.chb_chg_RessGroup.value = SQL_Abfragen.Get_Setting_Chg_Value(Me.lbl_chg_id_value.Caption, "Groups")
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Ressourcenwerte laden (Ressourcenliste kommt von frm_Ressourcenarten)
    Me.lb_cost_list.clear
    
End Sub

Private Sub cost_lb_fill()
    Me.lb_cost_list.clear
    
    Dim counter As Integer
    Dim lb_counter As Integer
    Dim last_group As String
    
    lb_counter = 0
    
    For counter = 1 To calc_frm_masterdata.Range("frm_Kostenarten").Rows.count
        Me.lb_cost_list.addItem calc_frm_masterdata.Range("frm_Kostenarten").Cells(counter, 1).value
        Me.lb_cost_list.list(lb_counter, 1) = calc_frm_masterdata.Range("frm_Kostenarten").Cells(counter, 3).value
        lb_counter = lb_counter + 1
    Next counter
End Sub

Private Sub EnableFilters(enable As Boolean)
    If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
        enable = False
    End If
    
    Me.cbb_filter.Enabled = enable
    
    If Not enable Then
        Me.cbb_filter.BackColor = &H8000000F
    Else
        Me.cbb_filter.BackColor = &HFFFFFF
    End If
End Sub

Private Sub EnableFields(enable As Boolean)
    If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
        enable = False
    End If
    
    If tool_art = "Demo" Then
        enable = False
        Me.btn_add_template.Enabled = enable
        Me.btn_del_template.Enabled = enable
    End If
    
    Me.cbb_year.Enabled = enable
    Me.lb_cost_list.Enabled = enable
    Me.btn_deselect_all.Enabled = enable
    Me.btn_select_all.Enabled = enable
    
    If Not enable Then
        Me.cbb_year.BackColor = &H8000000F
        Me.lb_cost_list.BackColor = &H8000000F
    Else
        Me.cbb_year.BackColor = &HFFFFFF
        If Me.lb_cost_list.BackColor <> &HFFFFFF Then
            Me.lb_cost_list.BackColor = &HFFFFFF
        End If
    End If
End Sub

Private Function checkFields() As Boolean
    If Me.cbb_template.listindex <> -1 And Me.cbb_filter.listindex <> -1 And Me.cbb_year.listindex <> -1 Then
        checkFields = True
    Else
        checkFields = False
    End If
End Function

Attribute VB_Name = "frm_set_filter"
Attribute VB_Base = "0{9A832A71-29A6-4884-AD61-61A68103726D}{46BD62A4-89F4-4A18-AF34-7152208223DE}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Public isResource As Boolean
Private click As Boolean
Private original_value As String


Private Sub btn_add_filter_Click()
    Dim InsertColumns As String
    Dim insertValues As String
    
    If calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user" Then
        InsertColumns = "Name, FK_Users"
        insertValues = "New Filter', '" & calc_master.Range("WindowsLogin").value & ""
    Else
        InsertColumns = ""
        insertValues = "New Filter"
    End If
    
    If SQL_Abfragen.Insert_Template(insertValues, "DB_Settings_Filter", InsertColumns) Then
        Call reload_lb_filter
        'tb_filter_name.value = ""
    Else
        MsgBox nlc_language.FindValue("SMessage_ErrAddTemp")
    End If
End Sub

Private Sub btn_del_filter_Click()
    If Me.lb_filter.listindex >= 0 Then
        click = True
        
        'Verkn|fffd|pfte Tabelle DB_Settings_RessHisto_RA hat eine L|fffd|schweitergabe (auch von Ressourcenarten aus)
        If SQL_Abfragen.Delete_Template(Me.lb_filter.list(Me.lb_filter.listindex, 1), "DB_Settings_Filter") = True Then
            Call reload_lb_filter
        Else
            MsgBox nlc_language.FindValue("SMessage_ErrDelFilter")
        End If

        click = False
    Else
        MsgBox nlc_language.FindValue("SMessage_SelFilter")
    End If
End Sub

Private Sub reload_lb_filter()
    Dim i As Double
    
    'Filter laden (in DropDown und Listbox)
    Dim filter() As String
    
    Dim lastFilterId As Double
    lastFilterId = calc_master.Range("last_filter_id").value
    Dim lastFilterRow As Double
    lastFilterRow = 0
    
    filter = SQL_Abfragen.Get_Settings_Filter_dropdown("DB_Settings_Filter", "")
    
    Me.lb_filter.clear

    If filter(0, 0) <> "leer" Then
        For i = 0 To UBound(filter) Step 1
            Me.lb_filter.addItem (filter(i, 0))
            Me.lb_filter.list(Me.lb_filter.listCount - 1, 1) = (filter(i, 1))
            
            If (filter(i, 1) = VBA.CStr(lastFilterId)) Then
                lastFilterRow = Me.lb_filter.listCount - 1
            End If
        Next i
        Me.lb_filter.listindex = lastFilterRow
    End If
    
    Call reload_cbb_filter
    
End Sub
Private Sub reload_cbb_filter()
    Dim i As Double
    
    'Filter laden (in DropDown und Listbox)
    Dim filter() As String
    
    Dim lastFilterId As Double
    lastFilterId = calc_master.Range("last_filter_id").value
    Dim lastFilterRow As Double
    lastFilterRow = 0
    
    filter = SQL_Abfragen.Get_Settings_Filter_dropdown("DB_Settings_Filter", "")
    
    Me.cbb_filter.clear
    
'    Me.cbb_filter.AddItem ("")
'    Me.cbb_filter.List(Me.cbb_filter.ListCount - 1, 1) = (0)

    If filter(0, 0) <> "leer" Then
        For i = 0 To UBound(filter) Step 1
            Me.cbb_filter.addItem (filter(i, 0))
            Me.cbb_filter.list(Me.cbb_filter.listCount - 1, 1) = (filter(i, 1))
            If (filter(i, 1) = VBA.CStr(lastFilterId)) Then lastFilterRow = i
        Next i
        cbb_filter.listindex = lastFilterRow
    End If
    
    
End Sub

Private Sub btn_del_set_Click()
    Call btn_krit_del_Click
End Sub

Private Sub btn_l2r_Click()
    Call btn_krit_del_Click
End Sub

Private Sub btn_order_Click()
    frm_Order_Filter.Show
    Call reload_lb_filter
End Sub

Private Sub btn_r2l_Click()
    
    Call addFilterKriterium
    
End Sub

Private Sub btn_schliessen_Click()
    Unload Me
End Sub

Private Sub cbb_add_filter_settings_group_Click()
    
    Dim row As Double
    Dim i As Integer
    Dim filterId As String
    row = Me.cbb_filter.listindex
    filterId = Me.cbb_filter.list(row, 1)
    
    If SQL_Abfragen.Add_Settings_Filter_Group(str(filterId), "New Filtergroup") Then
        Call loadFilterGroups(filterId)
        
        row = -1
        For i = 0 To Me.cbb_filter_settings_group.listCount - 1
            If row < Me.cbb_filter_settings_group.list(i, 1) Then
                row = i
            End If
        Next i
        Me.cbb_filter_settings_group.listindex = row
    Else
        MsgBox nlc_language.FindValue("SMessage_ErrAddTemp")
    End If

End Sub

Private Sub cbb_delete_filter_settings_group_Click()
    If Me.cbb_filter_settings_group.listindex >= 0 Then
        click = True
        
        'Verkn|fffd|pfte Tabelle DB_Settings_RessHisto_RA hat eine L|fffd|schweitergabe (auch von Ressourcenarten aus)
        If SQL_Abfragen.Delete_Template(Me.cbb_filter_settings_group.list(Me.cbb_filter_settings_group.listindex, 1), "DB_Settings_Filter_Group") = True Then
            
            Dim row As Double
            Dim filterId As Double
            row = Me.cbb_filter.listindex
            
            Me.cbb_filter_settings_of_group.clear
            
            If (row > -1) Then
                filterId = Me.cbb_filter.list(row, 1)
                Call loadFilterGroups(filterId)
            End If
        Else
            MsgBox nlc_language.FindValue("SMessage_ErrDelFilter")
        End If

        click = False
    Else
        MsgBox nlc_language.FindValue("SMessage_SelFilter")
    End If
End Sub

Private Sub cbb_filter_Change()
    Dim row As Double
    
    Dim filterId As Double
    tb_filter_load.text = "True"
    row = Me.cbb_filter.listindex
    
    If (row > -1) Then
    
        filterId = Me.cbb_filter.list(row, 1)
        Me.cbb_filter_settings_of_group.clear
        Me.txt_filter_sql.text = ""
        
        Call loadFilterGroups(filterId)
        Call loadFilterDetails(filterId)
        calc_master.Range("last_filter_id").value = filterId
    Else

    End If
    
    Call EnableFields(True)
    tb_filter_load.text = "False"
End Sub

Private Function loadFilterGroups(ByVal filterId As String)
    Dim lasrFilterGroupId As Double
    Dim lasrFilterGroupRow As Double
    Dim FilterGroups() As String
    Dim i As Double
    
    FilterGroups = SQL_Abfragen.Get_Settings_Filter_dropdown("DB_Settings_Filter_Group", " WHERE Fk_Filter = " + str(filterId))
    Me.cbb_filter_settings_group.clear

    lasrFilterGroupId = calc_master.Range("last_filter_group_id").value
    lasrFilterGroupRow = 0
    If FilterGroups(0, 0) <> "leer" Then
        For i = 0 To UBound(FilterGroups) Step 1
            Me.cbb_filter_settings_group.addItem (FilterGroups(i, 0))
            Me.cbb_filter_settings_group.list(Me.cbb_filter_settings_group.listCount - 1, 1) = (FilterGroups(i, 1))
            
            If (FilterGroups(i, 1) = VBA.CStr(lasrFilterGroupId)) Then lasrFilterGroupRow = i
        Next i
        Me.cbb_filter_settings_group.listindex = lasrFilterGroupRow
    Else
        Me.tb_filter_settings_group_name.text = ""
    End If
    
    Me.txt_filter_sql.text = nlc_filter.gernateSqlQueryByFilterId(filterId, True)
End Function

Private Sub cbb_filter_settings_group_Change()
    Call loadFilterGroupDetails
End Sub

Private Sub cbb_filter_settings_of_group_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Dim rowFilterKriterium As Double
    Dim filterKriteriumID As String
    
    rowFilterKriterium = Me.cbb_filter_settings_of_group.listindex
    
    If (rowFilterKriterium > -1) Then
        filterKriteriumID = Me.cbb_filter_settings_of_group.list(rowFilterKriterium, 1)
        
        Dim krit() As String
        krit = Get_FilterKriteriumById(filterKriteriumID)
        
        Select Case krit(5)
            Case (1): Call frm_set_filter_zahl.Show4Update(krit(0), krit(1), krit(2), krit(3), krit(4))
            Case (2): Call frm_set_filter_zahl_kat.Show4Update(krit(0), krit(1), krit(2), krit(3), krit(4))
            Case (3): Call frm_set_filter_datum.Show4Update(krit(0), krit(1), krit(2), krit(3), krit(4))
            Case (4): Call frm_set_filter_text.Show4Update(krit(0), krit(1), krit(2), krit(3), krit(4))
            Case (5): Call frm_set_filter_dropdown.Show4Update(krit(0), krit(1), krit(2), krit(3), krit(4))
            Case Else: Exit Sub
        End Select
        
        Call loadFilterGroupDetails
    End If
End Sub

Private Sub cbb_filter_settings_type_Change()
    Dim table As String
    Dim filter() As String
    Dim i As Double
    Dim einrueckung As String
    table = ""
    Me.lb_filter_settings_type.clear
    
    filter = SQL_Abfragen.Get_Settings_Filter_dropdown("DB_Settings_Filter", "")
    
    Select Case Me.cbb_filter_settings_type.list(Me.cbb_filter_settings_type.listindex, 1)
        Case (1): filter = Get_Settings_Filter_Kostenarten
        Case (2): filter = Get_Settings_Filter_Resourcenarten
        Case (3): filter = Get_Settings_Filter_Kategorien
        Case Else: Exit Sub
    End Select
    
    Me.lb_filter_settings_type.clear
    
    If filter(0, 0) <> "leer" Then
        For i = 0 To UBound(filter) Step 1
            If (filter(i, 2) = False) Then
                einrueckung = "   "
            Else:
                einrueckung = ""
            End If
            Me.lb_filter_settings_type.addItem (einrueckung + filter(i, 0))
            Me.lb_filter_settings_type.list(Me.lb_filter_settings_type.listCount - 1, 1) = (filter(i, 1))
        Next i
    End If
End Sub

Private Sub cbb_showAllProjects_Change()
    If tb_filter_load.text = "True" Then Exit Sub

    Call saveFilterDetails
End Sub

Private Sub cbb_type_Change()
    If tb_filter_load.text = "True" Then Exit Sub
    
    Call saveFilterDetails
End Sub

''' Erzeugt das SQL-Query zum aktuell ausgew|fffd|hlten Filter
Private Sub cmb_recalc_sql_Click()
    Dim rowFilter As Double
    Dim filterId As String
    rowFilter = Me.cbb_filter.listindex
    filterId = Me.cbb_filter.list(rowFilter, 1)

    txt_filter_sql.text = nlc_filter.gernateSqlQueryByFilterId(filterId, True) & get_Filter(filterId)
End Sub

Private Sub btn_krit_del_Click()
    Dim rowFilterKriterium
    Dim filterKriteriumID
    Dim statement As String
        
    rowFilterKriterium = Me.cbb_filter_settings_of_group.listindex
    
    If (rowFilterKriterium > -1) Then
        filterKriteriumID = Me.cbb_filter_settings_of_group.list(rowFilterKriterium, 1)
        statement = "DELETE FROM DB_Settings_Filter_Sets WHERE ID = " & filterKriteriumID
        Call Class_Functions.DB.Delete_Statement(statement)
        Call loadFilterGroupDetails
    End If
End Sub

Private Sub filter_showAllProjects_rb_1_Click()
    If Not txt_lb_filter_click.value = "True" Then
        Call saveFilterDetails
    End If
End Sub

Private Sub filter_showAllProjects_rb_2_Click()
    If Not txt_lb_filter_click.value = "True" Then
        Call saveFilterDetails
    End If
End Sub

Private Sub lb_filter_Click()
    txt_lb_filter_click.value = "True"
    Dim row As Double
    Dim filterId As Double
    
    row = Me.lb_filter.listindex
    filterId = Me.lb_filter.list(row, 1)
    
    calc_master.Range("last_filter_id").value = filterId
    
    Call loadFilterName(filterId)
    
    'Me.lb_filter.listindex = row

    txt_lb_filter_click.value = "False"
End Sub

Private Sub lb_filter_settings_type_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    Call addFilterKriterium
End Sub

Private Function addFilterKriterium()
    Dim KriteriumName As String
    Dim rowKriteriumType As Double
    Dim rowKriterium As Double
    Dim rowFilterGroup As Double
    
    Dim kriteriumType As Double
    Dim kriteriumID As Double
    Dim filterGroupID As Double
        
    rowKriteriumType = Me.cbb_filter_settings_type.listindex
    rowKriterium = Me.lb_filter_settings_type.listindex
    rowFilterGroup = Me.cbb_filter_settings_group.listindex
    
    If (rowKriterium < 0) Then Exit Function
    If (rowKriteriumType < 0) Then Exit Function
    If (rowFilterGroup < 0) Then Exit Function
    
    kriteriumType = Me.cbb_filter_settings_type.list(rowKriteriumType, 1)
    kriteriumID = Me.lb_filter_settings_type.list(rowKriterium, 1)
    filterGroupID = Me.cbb_filter_settings_group.list(rowFilterGroup, 1)
    
    KriteriumName = Me.lb_filter_settings_type.text
    
    Call addSlectedElemtToFiltergroup(kriteriumID, kriteriumType, filterGroupID, KriteriumName)
    
    Call loadFilterGroupDetails
End Function

Private Function addSlectedElemtToFiltergroup(ByVal kriteriumID As String, ByVal kriteriumType As Integer, ByVal filterGroupID As String, ByVal KriteriumName As String)
    isResource = False
    ' Wenn es Kostenarten sind
    If (kriteriumType = 1) Then
        'Kostenarten
        Call frm_set_filter_zahl.ShowWithData(KriteriumName, kriteriumID, filterGroupID, 3)
    End If
    If (kriteriumType = 2) Then
        'Resourcen
        isResource = True
        Call frm_set_filter_zahl.ShowWithData(KriteriumName, kriteriumID, filterGroupID, 1 + checkIfResourceIsRresourcegroup(kriteriumID))
    End If
    If (kriteriumType = 3) Then
        'Kategorie
        
        Dim kat() As String
        ReDim Preserve kat(1)
        kat = GetKategoryById(kriteriumID)
        
        Select Case (kat(1))
'        Case 1, 2 ' Dropdown / trueFalse
'            Call frm_set_filter_dropdown.ShowWithData(KriteriumName, kriteriumID, filterGroupID, 4)
'        Case 3 ' Text
'            Call frm_set_filter_text.ShowWithData(KriteriumName, kriteriumID, filterGroupID, 4)
'        Case 4 ' Date
'            Call frm_set_filter_datum.ShowWithData(KriteriumName, kriteriumID, filterGroupID, 4)
        Case 1, 2 ' Dropdown / trueFalse
            Call frm_set_filter_dropdown.ShowWithData(KriteriumName, kriteriumID, filterGroupID, 4)
        Case 3 ' Text
            Call frm_set_filter_text.ShowWithData(KriteriumName, kriteriumID, filterGroupID, 4)
        Case 4 ' Date
            Call frm_set_filter_datum.ShowWithData(KriteriumName, kriteriumID, filterGroupID, 4)
        Case 5 ' Number
            Call frm_set_filter_zahl_kat.ShowWithData(KriteriumName, kriteriumID, filterGroupID, 4)
        End Select
        
        'Call frm_set_filter_zahl.ShowWithData(KriteriumName, kriteriumID, filterGroupID, 4)
    End If
    

'    Select Case (kriteriumType)
'        'Case (2): Call frm_set_filter_zahl.ShowWithData("", kriteriumId, filterGroupId, 1) 'Res
'        'Case (1): Call frm_set_filter_resourcenarten.ShowWithData("", kriteriumId, filterGroupId, 3) 'Kos
'        'Case (3): Call frm_set_filter_zahl.ShowWithData("", kriteriumId, filterGroupId, 4) 'Kat
'    End Select
    
End Function

Private Function checkIfResourceIsRresourcegroup(kriteriumID As String)
    Dim statement  As String
    
    statement = "SELECT " & _
                    "RA.ID, " & _
                    "RA.FK_Ressourcenarten AS RG " & _
                "FROM " & _
                    "DB_Ressourcenarten AS RA " & _
                "WHERE " & _
                    "RA.id = " + str(kriteriumID)

    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            If Class_Functions.DB.Recordset!ID = Class_Functions.DB.Recordset!RG Then
                checkIfResourceIsRresourcegroup = 1
            Else
                checkIfResourceIsRresourcegroup = 0
            End If
        Else
            checkIfResourceIsRresourcegroup = 0
        End If
    Else
        checkIfResourceIsRresourcegroup = 0
    End If
End Function

Private Sub tb_filter_name_Change()
    If Not txt_lb_filter_click.value = "True" Then
        
        If VBA.Left(Me.tb_filter_name.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
            MsgBox "Der Name des Templates darf nicht mit '" & GlobalIdLeft & "' beginnen."
            Me.tb_filter_name.text = get_ValueWithoutGlobal(Me.lb_filter.list(Me.lb_filter.listindex, 0))
            Exit Sub
        End If
        
        Call saveFilterDetails_name
        
    End If
End Sub

Private Sub tb_filter_settings_group_name_Change()
    Dim filterRow As Double
    Dim filterId As Double
    
    Dim filterGroupRow As Double
    Dim filterGroupID As Double
    Dim filterGroupName As String
    
    filterGroupName = Me.tb_filter_settings_group_name.text
    filterGroupRow = Me.cbb_filter_settings_group.listindex
    
    If (filterGroupRow > -1) Then
        filterGroupID = Me.cbb_filter_settings_group.list(filterGroupRow, 1)
        If (cbb_filter_settings_group.text <> filterGroupName) Then Call saveFilterGroupDetails(str(filterGroupID), filterGroupName)
        
    End If
    
    filterRow = Me.cbb_filter.listindex
    If (filterRow > -1) Then
        filterId = Me.lb_filter.list(filterRow, 1)
        If (cbb_filter_settings_group.text <> filterGroupName) Then loadFilterGroups (filterId)
    End If
End Sub

Private Sub UserForm_Initialize()
    
    Me.cbb_filter_settings_type.clear
    Me.cbb_filter_settings_type.addItem ("")
    Me.cbb_filter_settings_type.list(Me.cbb_filter_settings_type.listCount - 1, 1) = (0)
    Me.cbb_filter_settings_type.addItem ("Kostenarten")
    Me.cbb_filter_settings_type.list(Me.cbb_filter_settings_type.listCount - 1, 1) = (1)
    Me.cbb_filter_settings_type.addItem ("Ressourcenarten")
    Me.cbb_filter_settings_type.list(Me.cbb_filter_settings_type.listCount - 1, 1) = (2)
    Me.cbb_filter_settings_type.addItem ("Benutzerdef. Felder")
    Me.cbb_filter_settings_type.list(Me.cbb_filter_settings_type.listCount - 1, 1) = (3)
    
    'Daten laden
    Call SQL_Abfragen.Get_AllKategorien
    Call SQL_Abfragen.Get_AllKatDetails
    
    Call SQL_Abfragen.Get_AllKostenarten
    
    Call SQL_Abfragen.Get_AllRessourcenarten

    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    
    Call reload_lb_filter
    
    If Me.cbb_filter.listindex <> -1 Then
        Call EnableFields(True)
    Else
        Call EnableFields(False)
    End If
    
End Sub

' Filterdetails anzeigen

Private Function loadFilterDetails(ByVal filterId As Double)
    
    Dim filter() As String
    filter = getFilterById(filterId)
        
    If (filter(0, 2) = "True" Or filter(0, 2) = "Wahr") Then
        cbb_type.listindex = 0
    Else
        cbb_type.listindex = 1
    End If
    
    If (filter(0, 3) = "True" Or filter(0, 3) = "Wahr") Then
        cbb_showAllProjects.listindex = 0
    Else
        cbb_showAllProjects.listindex = 1
    End If
    
End Function

Private Function loadFilterName(ByVal filterId As Double)
    
    Dim filter() As String
    filter = getFilterById(filterId)
    
    tb_filter_id.text = filter(0, 0)
    tb_filter_name.text = filter(0, 1)
    
    If tool_art = "Demo" Or ((calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.lb_filter.list(Me.lb_filter.listindex, 0), VBA.Len(GlobalIdLeft)) = GlobalIdLeft) Then
        tb_filter_name.Enabled = False
        tb_filter_name.BackColor = &H8000000F
        Me.btn_del_filter.Enabled = False
    Else
        tb_filter_name.Enabled = True
        tb_filter_name.BackColor = &HFFFFFF
        Me.btn_del_filter.Enabled = True
    End If
    
End Function

' Filterdetails speichern

Private Function saveFilterDetails_name()

    Dim filterId As String
    Dim filterName As String
    
    filterId = tb_filter_id.text
    filterName = tb_filter_name.text
    
    Call updateFilterName(filterId, filterName)
    Call reload_lb_filter
End Function

Private Function saveFilterDetails()

    Dim filterId As String
    Dim filterMode As Integer
    Dim filterShowAllProjects As Integer
    Dim row As Integer
    Dim row1 As Integer
    Dim row2 As Integer
    
    row = Me.cbb_filter.listindex
    row1 = Me.cbb_type.listindex
    row2 = Me.cbb_showAllProjects.listindex
    
    filterId = Me.cbb_filter.list(row, 1)
    
    If row1 = 0 Then
        filterMode = Class_Functions.DB.Parse2True
    Else
        filterMode = 0
    End If
    
    If row2 = 0 Then
        filterShowAllProjects = Class_Functions.DB.Parse2True
    Else
        filterShowAllProjects = 0
    End If
    
    Call updateFilterDetails(filterId, filterMode, filterShowAllProjects)
   
End Function
' Filterdetails anzeigen

Private Function loadFilterGroupDetails()
    
    Dim i As Double
    Dim zeile As String
    Dim counter As Integer
    
    Dim filterGroupSettings() As Variant
    
    Dim filterSettingGrouId As Double
    
    Dim row As Double
    Dim filterId As String
    
    If (Me.cbb_filter_settings_group.listindex > -1) Then
        filterSettingGrouId = Me.cbb_filter_settings_group.list(Me.cbb_filter_settings_group.listindex, 1)
        Me.tb_filter_settings_group_name.text = cbb_filter_settings_group.text
        calc_master.Range("last_filter_group_id").value = filterSettingGrouId
    Else
        Exit Function
    End If
    
    counter = 0
    filterGroupSettings = getFilterGroupSettingsById(filterSettingGrouId)
    
    Me.cbb_filter_settings_of_group.clear
    
    If filterGroupSettings(0, 0) <> "leer" Then
        For i = 0 To UBound(filterGroupSettings) Step 1
            If filterGroupSettings(i, 1) <> "" Then
                zeile = ""
                
                'zeile = zeile + "(" + filterGroupSettings(i, 0) + ") " 'FilterID anzeigen
                zeile = zeile + filterGroupSettings(i, 1)
                
                Select Case (filterGroupSettings(i, 2))
                    Case (1): zeile = zeile + " < "
                    Case (2): zeile = zeile + " <= "
                    Case (3): zeile = zeile + " = "
                    Case (4): zeile = zeile + " <> "
                    Case (5): zeile = zeile + " >= "
                    Case (6): zeile = zeile + " > "
                    Case Else: zeile = zeile + " "
                End Select
                
                zeile = zeile + filterGroupSettings(i, 3)
                Me.cbb_filter_settings_of_group.addItem (zeile)
                            
                Me.cbb_filter_settings_of_group.list(counter, 1) = (filterGroupSettings(i, 0))
                counter = counter + 1
            End If
        Next i
    End If
    
    row = Me.cbb_filter.listindex
    filterId = Me.cbb_filter.list(row, 1)
    Me.txt_filter_sql.text = nlc_filter.gernateSqlQueryByFilterId(filterId, True)
End Function
Private Function saveFilterGroupDetails(filterGroupID As String, filterGroupName As String)
    Call updateFilterGroup(filterGroupID, filterGroupName)
End Function

Private Sub EnableFields(enable As Boolean)
    If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_filter.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
        enable = False
    End If
    
    If tool_art = "Demo" Then
        enable = False
        Me.btn_add_filter.Enabled = enable
        Me.btn_order.Enabled = enable
    End If
    
    Me.cbb_showAllProjects.Enabled = enable
    Me.cbb_type.Enabled = enable
    Me.cbb_filter_settings_group.Enabled = enable
    Me.cbb_add_filter_settings_group.Enabled = enable
    Me.cbb_delete_filter_settings_group.Enabled = enable
    Me.tb_filter_settings_group_name.Enabled = enable
    Me.cbb_filter_settings_type.Enabled = enable
    Me.lb_filter_settings_type.Enabled = enable
    Me.btn_r2l.Enabled = enable
    Me.btn_l2r.Enabled = enable
    Me.cbb_filter_settings_of_group.Enabled = enable
    Me.btn_del_set.Enabled = enable
    
    If Not enable Then
        Me.cbb_showAllProjects.BackColor = &H8000000F
        Me.cbb_type.BackColor = &H8000000F
        Me.cbb_filter_settings_group.BackColor = &H8000000F
        Me.tb_filter_settings_group_name.BackColor = &H8000000F
        Me.cbb_filter_settings_type.BackColor = &H8000000F
        Me.lb_filter_settings_type.BackColor = &H8000000F
        Me.cbb_filter_settings_of_group.BackColor = &H8000000F
    Else
        Me.cbb_showAllProjects.BackColor = &HFFFFFF
        Me.cbb_type.BackColor = &HFFFFFF
        Me.cbb_filter_settings_group.BackColor = &HFFFFFF
        Me.tb_filter_settings_group_name.BackColor = &HFFFFFF
        Me.cbb_filter_settings_type.BackColor = &HFFFFFF
        Me.lb_filter_settings_type.BackColor = &HFFFFFF
        Me.cbb_filter_settings_of_group.BackColor = &HFFFFFF
    End If
    
    
End Sub
Attribute VB_Name = "frm_set_filter_datum"
Attribute VB_Base = "0{91F5AD3B-0973-4193-AFBD-8FA3CAA2490E}{DF0DF6E1-5383-44B0-B257-7110E30C3B99}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub btn_ok_Click()
    Call cbb_save_filter_kriterium_Click
End Sub

Private Sub cbb_delete_filter_set_Click()
    Dim SetID As String
    Dim statement As String
    SetID = Me.txt_ID
    statement = "DELETE FROM DB_Settings_Filter_Sets WHERE ID = " & SetID
    Call Class_Functions.DB.Delete_Statement(statement)
    Unload Me
End Sub

Private Sub cbb_save_filter_kriterium_Click()
    Dim filterGroupID As String
    Dim filterType As String
    Dim filterTypeID As String
    Dim Comperator As Integer
    Dim value As String
    Dim row As Integer
    
    
    filterGroupID = CInt(Me.txt_filterGroup_Id.text)
    filterType = Me.txt_filterType.text
    filterTypeID = Me.txt_kriterium_Id.text
    
    row = Me.cbb_filter_settings_compare_type.listindex
    Comperator = Me.cbb_filter_settings_compare_type.list(row, 1)
    
    value = Me.txt_compareValue.text
    
    If (Check_Date(value)) Then
    
        If (Me.txt_ID.text = "new") Then
        
            Call Add_Settings_Filter_Kriterium(filterGroupID, filterType, filterTypeID, Comperator, value, "1", "3")
            
        Else
        
            Call Update_Settings_Filter_Kriterium(Me.txt_ID.text, str(Comperator), value, "1")
        
        End If
        
        Unload Me
    End If
End Sub

Private Sub cbb_filter_settings_compare_type_Change()
    Call checkUserEntries
End Sub
Private Function checkUserEntries()

    Me.btn_ok.Enabled = True
    
    If (Me.cbb_filter_settings_compare_type.listindex = -1) Then
        Me.btn_ok.Enabled = False
    End If
    
End Function

Private Sub txt_compareValue_Change()
    Call checkUserEntries
End Sub

Private Sub UserForm_Initialize()

    Call nlc_functions.frm_sprache_SQL(Me, "frm_set_filter_kriterium%")
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    
    Me.cbb_filter_settings_compare_type.list(0, 1) = (1)
    Me.cbb_filter_settings_compare_type.list(1, 1) = (2)
    Me.cbb_filter_settings_compare_type.list(2, 1) = (3)
    Me.cbb_filter_settings_compare_type.list(3, 1) = (4)
    Me.cbb_filter_settings_compare_type.list(4, 1) = (5)
    Me.cbb_filter_settings_compare_type.list(5, 1) = (6)
    
    Call checkUserEntries
End Sub

Public Sub ShowWithData(resName As String, resId As String, filterId As String, filterType As Integer)

    Me.txt_Name.text = Trim$(resName)
    Me.txt_kriterium_Id.text = Trim$(resId)
    Me.txt_filterGroup_Id.text = Trim$(filterId)
    Me.txt_filterType.text = Trim$(filterType)
    Me.txt_ID = "new"
    
    'Me.cbb_delete_filter_set.visible = False
    
    Call checkUserEntries
    Me.Show
    
End Sub
Public Sub Show4Update(ID As String, kriterium_name As String, comp As String, value As String, fieldType As String)

    Me.txt_ID.text = str(ID)
    
    Me.txt_Name = kriterium_name
    Me.cbb_filter_settings_compare_type.listindex = comp - 1
    Me.txt_compareValue.text = value
    
    'Me.cbb_delete_filter_set.visible = True
    
    Call checkUserEntries
    Me.Show
    
End Sub
Attribute VB_Name = "frm_set_filter_dropdown"
Attribute VB_Base = "0{8321B141-0CC7-430E-8757-7EED1368FB2B}{6A7960F2-FCDB-4497-8EA2-C3FB5E564A8D}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub cbb_delete_filter_set_Click()
    Dim SetID As String
    Dim statement As String
    SetID = Me.txt_ID
    statement = "DELETE FROM DB_Settings_Filter_Sets WHERE ID = " & SetID
    Call Class_Functions.DB.Delete_Statement(statement)
    Unload Me
End Sub

Private Sub btn_ok_Click()
    Call cbb_save_filter_kriterium_Click
End Sub

Private Sub cbb_save_filter_kriterium_Click()
    Dim filterGroupID As String
    Dim filterType As String
    Dim filterTypeID As String
    Dim Comperator As Integer
    Dim value As String
    Dim row As Integer
    Dim row2 As Integer
    
    
    filterGroupID = CInt(Me.txt_filterGroup_Id.text)
    filterType = Me.txt_filterType.text
    filterTypeID = Me.txt_kriterium_Id.text
    
    row = Me.cbb_filter_settings_compare_type.listindex
    Comperator = Me.cbb_filter_settings_compare_type.list(row, 1)
    
    row2 = Me.cbb_compareValue.listindex
    value = Me.cbb_compareValue.list(row2, 1)
    
    If (Me.txt_ID.text = "new") Then
        Call Add_Settings_Filter_Kriterium(filterGroupID, filterType, filterTypeID, Comperator, value, "1", "5")
    Else
        Call Update_Settings_Filter_Kriterium(Me.txt_ID.text, str(Comperator), value, "1")
    End If
    
    Unload Me
End Sub

Private Sub UserForm_Initialize()
    Call nlc_functions.frm_sprache_SQL(Me, "frm_set_filter_kriterium2")
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    
    Me.cbb_filter_settings_compare_type.list(0, 1) = (3)
    Me.cbb_filter_settings_compare_type.list(1, 1) = (4)
    
    Call checkUserEntries
End Sub

Public Sub ShowWithData(resName As String, resId As String, filterId As String, filterType As Integer)

    Call load_Dropdown(resId, 0)

    Me.txt_Name.text = Trim$(resName)
    Me.txt_kriterium_Id.text = Trim$(resId)
    Me.txt_filterGroup_Id.text = Trim$(filterId)
    Me.txt_filterType.text = Trim$(filterType)
    Me.txt_ID = "new"
    
    'Me.cbb_delete_filter_set.visible = False
    
    Call checkUserEntries
    Me.Show
    
End Sub

Public Sub Show4Update(ID As String, kriterium_name As String, comp As String, value As String, fieldType As String)

    Me.txt_ID.text = str(ID)
    
    Call load_Dropdown_with_data(CInt(ID), CInt(value))
 
    Me.txt_Name.text = Trim$(kriterium_name)
    Me.cbb_filter_settings_compare_type.listindex = comp - 3
    
    'Me.cbb_delete_filter_set.visible = True
    
    Call checkUserEntries
    Me.Show
    
End Sub

Public Function load_Dropdown_with_data(SetID As String, SelctedID As String)

    Dim statement As String
    Dim ID As String
    
    ID = 0
    statement = "SELECT  s.FK_FilterType FROM DB_Settings_Filter_Sets s WHERE id = " & SetID
    
    
    cbb_compareValue.clear
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
    
            If (Not Class_Functions.DB.Recordset.EOF) Then
          
                ID = Class_Functions.DB.Recordset(0)(0)
               
                Class_Functions.DB.Recordset.movenext
                
            End If
        End If
    End If
    
    Call load_Dropdown(CInt(ID), CInt(SelctedID))
    
End Function

Public Function load_Dropdown(KatID As String, SelctedID As Double)

    Dim statement As String
    Dim i As Integer
    Dim selectedRow As Integer
    
    i = 0
    selectedRow = -1
    statement = "SELECT " & _
                    "katD.ID, " & _
                    "lang.deutsch " & _
                "FROM " & _
                    "DB_Kategorie_Detail AS katD LEFT JOIN " & _
                    "DB_Language As lang ON lang.Term = katD.FK_Language_Name " & _
                "WHERE " & _
                    "katD.FK_Kategorie = " & KatID & " ORDER BY katD.OrderBy"
    
    
    cbb_compareValue.clear
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
    
            While Not Class_Functions.DB.Recordset.EOF
          
                Me.cbb_compareValue.addItem (Class_Functions.DB.Recordset!deutsch)
                Me.cbb_compareValue.list(Me.cbb_compareValue.listCount - 1, 1) = (Class_Functions.DB.Recordset!ID)
                
                If (Class_Functions.DB.Recordset!ID = SelctedID) Then
                    selectedRow = i
                End If
                
                Class_Functions.DB.Recordset.movenext
                i = i + 1
            Wend
            
        End If
    End If
    If (selectedRow > -1) Then
        cbb_compareValue.listindex = selectedRow
    End If
    
End Function

Private Sub cbb_filter_settings_compare_type_Change()
    Call checkUserEntries
End Sub

Private Sub cbb_compareValue_Change()
    Call checkUserEntries
End Sub

Private Function checkUserEntries()

    Me.btn_ok.Enabled = True
    
    If (Me.cbb_filter_settings_compare_type.listindex = -1) Then
        Me.btn_ok.Enabled = False
    End If
    
    If (Me.cbb_filter_settings_compare_type.listindex = -1) Then
        Me.btn_ok.Enabled = False
    End If
    
End Function
Attribute VB_Name = "frm_set_filter_text"
Attribute VB_Base = "0{550B76F4-7951-4626-BF1D-07EA631A1BEE}{07075600-E4C3-4830-8C06-F89C9EEB9D07}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit
Private Sub cbb_delete_filter_set_Click()
    Dim SetID As String
    Dim statement As String
    SetID = Me.txt_ID
    statement = "DELETE FROM DB_Settings_Filter_Sets WHERE ID = " & SetID
    Call Class_Functions.DB.Delete_Statement(statement)
    Unload Me
End Sub

Private Sub btn_ok_Click()
    Call cbb_save_filter_kriterium_Click
End Sub

Private Sub cbb_save_filter_kriterium_Click()
    Dim filterGroupID As String
    Dim filterType As String
    Dim filterTypeID As String
    Dim Comperator As Integer
    Dim value As String
    Dim row As Integer
    
    
    filterGroupID = CInt(Me.txt_filterGroup_Id.text)
    filterType = Me.txt_filterType.text
    filterTypeID = Me.txt_kriterium_Id.text
    
    row = Me.cbb_filter_settings_compare_type.listindex
    Comperator = Me.cbb_filter_settings_compare_type.list(row, 1)
    
    value = Me.txt_compareValue.text
    
    If (Me.txt_ID.text = "new") Then
        Call Add_Settings_Filter_Kriterium(filterGroupID, filterType, filterTypeID, Comperator, value, "1", "4")
    Else
        Call Update_Settings_Filter_Kriterium(Me.txt_ID.text, str(Comperator), value, "1")
    End If
    
    Unload Me
End Sub

Private Sub cbb_filter_settings_compare_type_Change()
    Call checkUserEntries
End Sub
Private Function checkUserEntries()

    Me.btn_ok.Enabled = True
    
    If (Me.cbb_filter_settings_compare_type.listindex = -1) Then
        Me.btn_ok.Enabled = False
    End If
    
End Function

Private Sub txt_compareValue_Change()
    Call checkUserEntries
End Sub

Private Sub UserForm_Initialize()

    Call nlc_functions.frm_sprache_SQL(Me, "frm_set_filter_kriterium2")
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    
    Me.cbb_filter_settings_compare_type.list(0, 1) = (3)
    Me.cbb_filter_settings_compare_type.list(1, 1) = (4)
    Call checkUserEntries
    
End Sub

Public Sub ShowWithData(resName As String, resId As String, filterId As String, filterType As Integer)

    Me.txt_Name.text = Trim$(resName)
    Me.txt_kriterium_Id.text = Trim$(resId)
    Me.txt_filterGroup_Id.text = Trim$(filterId)
    Me.txt_filterType.text = Trim$(filterType)
    Me.txt_ID = "new"
    
    'Me.cbb_delete_filter_set.visible = False
    
    Call checkUserEntries
    Me.Show
    
End Sub

Public Sub Show4Update(ID As String, kriterium_name As String, comp As String, value As String, fieldType As String)

    Me.txt_ID.text = str(ID)
    
    Me.txt_Name = kriterium_name
    Me.cbb_filter_settings_compare_type.listindex = comp - 3
    Me.txt_compareValue.text = value
    
    'Me.cbb_delete_filter_set.visible = True
    
    Call checkUserEntries
    Me.Show
    
End Sub
Attribute VB_Name = "frm_set_filter_zahl"
Attribute VB_Base = "0{56DBBE79-F49B-47B6-9058-A2DFB7EE544D}{50C8861B-41A7-4F24-ACFB-7E0DD3A5C8E7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private kost(4) As String
Private ress(4) As String

Private Sub cbb_delete_filter_set_Click()
    Dim SetID As String
    Dim statement As String
    SetID = Me.txt_ID
    statement = "DELETE FROM DB_Settings_Filter_Sets WHERE ID = " & SetID
    Call Class_Functions.DB.Delete_Statement(statement)
    Unload Me
End Sub

Private Sub btn_ok_Click()
    Call cbb_save_filter_kriterium_Click
End Sub

Private Sub cbb_save_filter_kriterium_Click()
    Dim filterGroupID As String
    Dim filterType As String
    Dim filterTypeID As String
    Dim Comperator As Integer
    Dim value As String
    Dim row As Integer
    Dim row2 As Integer
    Dim fieldType As String
    Dim SetType As String
    
    filterGroupID = CInt(Me.txt_filterGroup_Id.text)
    filterType = Me.txt_filterType.text
    filterTypeID = Me.txt_kriterium_Id.text
    SetType = 1
    
    row = Me.cbb_filter_settings_compare_type.listindex
    Comperator = Me.cbb_filter_settings_compare_type.list(row, 1)
    
    row2 = Me.cbb_filter_settings_field_type.listindex
    fieldType = Me.cbb_filter_settings_field_type.list(row2, 1)
    
    value = Me.txt_compareValue.text
    
    If (IsNumeric(value)) Then
        If (Me.txt_ID.text = "new") Then
        
            Call Add_Settings_Filter_Kriterium(filterGroupID, filterType, filterTypeID, Comperator, value, fieldType, SetType)
            
        Else
        
            Call Update_Settings_Filter_Kriterium(Me.txt_ID.text, str(Comperator), value, str(fieldType))
        
        End If
        
        Unload Me
    Else
    
    MsgBox nlc_language.FindValue("SMessage_EnterValidNumber")
    End If
    
End Sub

Private Function checkUserEntries()

    Me.btn_ok.Enabled = True
    
    If (Me.cbb_filter_settings_compare_type.listindex = -1) Then
        Me.btn_ok.Enabled = False
    End If
    
    If (Me.cbb_filter_settings_field_type.listindex = -1) Then
        Me.btn_ok.Enabled = False
    End If
    
    If (Not IsNumeric(txt_compareValue)) Then
        Me.btn_ok.Enabled = False
    End If
    
End Function

Private Sub cbb_filter_settings_compare_type_Change()
    Call checkUserEntries
End Sub

Private Sub cbb_filter_settings_field_type_Change()
    Call checkUserEntries
End Sub

Private Sub txt_compareValue_Change()

    Call checkUserEntries
End Sub

Private Sub txt_compareValue_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
            If VBA.InStr(1, txt_compareValue.text, ",") > 0 Then
                If (VBA.Len(txt_compareValue.text) - VBA.InStr(1, txt_compareValue.text, ",")) > 2 Then
                    KeyAscii = 0
                Else
                    If (txt_compareValue.SelStart > VBA.InStr(1, txt_compareValue.text, ",") And (VBA.Len(txt_compareValue.text) - VBA.InStr(1, txt_compareValue.text, ",")) = 2) Then
                        KeyAscii = 0
                    End If
                End If
            End If
        Case 44 'Komma nur einmal zul|fffd|ssig
            If Len(txt_compareValue) = 0 Or UBound(Split(txt_compareValue, ",")) >= 1 Then
                KeyAscii = 0
            End If
        Case 45 'Minuszeichen nur als erstes Zeichen zul|fffd|ssig
            If Me.txt_compareValue.SelStart <> 0 Then KeyAscii = 0
        Case Else
            KeyAscii = 0
    End Select
    
End Sub

Private Sub UserForm_Initialize()

    Call nlc_functions.frm_sprache_SQL(Me, "frm_set_filter_kriterium%")
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    
    Me.cbb_filter_settings_compare_type.list(0, 1) = (1)
    Me.cbb_filter_settings_compare_type.list(1, 1) = (2)
    Me.cbb_filter_settings_compare_type.list(2, 1) = (3)
    Me.cbb_filter_settings_compare_type.list(3, 1) = (4)
    Me.cbb_filter_settings_compare_type.list(4, 1) = (5)
    Me.cbb_filter_settings_compare_type.list(5, 1) = (6)
    
    kost(0) = Me.cbb_filter_settings_field_type.list(0, 0)
    kost(1) = Me.cbb_filter_settings_field_type.list(1, 0)
    kost(2) = Me.cbb_filter_settings_field_type.list(2, 0)
    kost(3) = Me.cbb_filter_settings_field_type.list(3, 0)
    kost(4) = Me.cbb_filter_settings_field_type.list(4, 0)
    ress(0) = Me.cbb_filter_settings_field_type.list(0, 0)
    ress(1) = Me.cbb_filter_settings_field_type.list(1, 0)
    ress(2) = Me.cbb_filter_settings_field_type.list(2, 0)
    ress(3) = Me.cbb_filter_settings_field_type.list(3, 0)
    ress(4) = Me.cbb_filter_settings_field_type.list(4, 0)
    
    
    Me.cbb_filter_settings_field_type.clear
    
    If frm_set_filter.isResource Then
        Me.cbb_filter_settings_field_type.addItem ress(0)
        Me.cbb_filter_settings_field_type.addItem ress(1)
        Me.cbb_filter_settings_field_type.addItem ress(2)
        Me.cbb_filter_settings_field_type.addItem ress(3)
        Me.cbb_filter_settings_field_type.addItem ress(4)
    Else
        Me.cbb_filter_settings_field_type.addItem kost(0)
        Me.cbb_filter_settings_field_type.addItem kost(1)
        Me.cbb_filter_settings_field_type.addItem kost(2)
        Me.cbb_filter_settings_field_type.addItem kost(3)
        Me.cbb_filter_settings_field_type.addItem kost(4)
    End If
    
    Me.cbb_filter_settings_field_type.list(0, 1) = (1)
    Me.cbb_filter_settings_field_type.list(1, 1) = (2)
    Me.cbb_filter_settings_field_type.list(2, 1) = (3)
    Me.cbb_filter_settings_field_type.list(3, 1) = (4)
    Me.cbb_filter_settings_field_type.list(4, 1) = (5)
    Call checkUserEntries
    
End Sub

Public Sub ShowWithData(resName As String, resId As String, filterId As String, filterType As Integer)

    Me.txt_Name.text = VBA.Trim$(resName)
    Me.txt_kriterium_Id.text = Trim$(resId)
    Me.txt_filterGroup_Id.text = Trim$(filterId)
    Me.txt_filterType.text = Trim$(filterType)
    Me.txt_ID = "new"
    
    'Me.cbb_delete_filter_set.visible = False
    Call checkUserEntries
    Me.Show
    
End Sub

Public Sub Show4Update(ID As String, kriterium_name As String, comp As String, value As String, fieldType As String)

    Me.txt_ID.text = VBA.str(ID)
    
    Me.txt_Name = kriterium_name
    Me.cbb_filter_settings_compare_type.listindex = comp - 1
    Me.cbb_filter_settings_field_type.listindex = fieldType - 1
    
    'Me.cbb_delete_filter_set.visible = True
    
    Me.txt_compareValue.text = value
    Call checkUserEntries
    
    Me.Show
    
End Sub
Attribute VB_Name = "frm_set_filter_zahl_kat"
Attribute VB_Base = "0{A2CADD89-EB6B-4A02-9139-23B57CFA88FE}{2478D4B6-27E3-4FD7-AF10-65A9FA126B1E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False

Option Explicit

Private Sub cbb_delete_filter_set_Click()
    Dim SetID As String
    Dim statement As String
    SetID = Me.txt_ID
    statement = "DELETE FROM DB_Settings_Filter_Sets WHERE ID = " & SetID
    Call Class_Functions.DB.Delete_Statement(statement)
    Unload Me
End Sub


Private Sub btn_ok_Click()
 Call cbb_save_filter_kriterium_Click
End Sub

Private Sub cbb_save_filter_kriterium_Click()
    Dim filterGroupID As String
    Dim filterType As String
    Dim filterTypeID As String
    Dim Comperator As Integer
    Dim value As String
    Dim row As Integer
    
    
    filterGroupID = CInt(Me.txt_filterGroup_Id.text)
    filterType = Me.txt_filterType.text
    filterTypeID = Me.txt_kriterium_Id.text
    
    row = Me.cbb_filter_settings_compare_type.listindex
    Comperator = Me.cbb_filter_settings_compare_type.list(row, 1)
    
    value = Me.txt_compareValue.text
    
    If (IsNumeric(value)) Then
        If (Me.txt_ID.text = "new") Then
        
            Call Add_Settings_Filter_Kriterium(filterGroupID, filterType, filterTypeID, Comperator, value, "1", "2")
            
        Else
        
            Call Update_Settings_Filter_Kriterium(Me.txt_ID.text, str(Comperator), value, "1")
        
        End If
        
        Unload Me
    Else
    MsgBox nlc_language.FindValue("SMessage_EnterValidNumber")
    End If
End Sub

Private Sub cbb_filter_settings_compare_type_Change()

    Call checkUserEntries
End Sub

Private Sub txt_compareValue_Change()
    
    Dim min
    Dim MAX
    Dim ID As Integer
    
    ID = Me.txt_kriterium_Id.value
    min = Application.WorksheetFunction.VLookup(ID, calc_frm_masterdata.Range("frm_Kategorie"), 6, False)
    MAX = Application.WorksheetFunction.VLookup(ID, calc_frm_masterdata.Range("frm_Kategorie"), 7, False)

    If Me.txt_compareValue.text <> "" And VBA.IsNumeric(Me.txt_compareValue.text) Then
        btn_ok.Enabled = True
        'gr|fffd||fffd|er als min
        If VBA.IsNumeric(min) And min <> "" Then
            If Me.txt_compareValue.text < min Then
                Me.txt_compareValue.ForeColor = &H2411B9
                btn_ok.Enabled = False
            Else
                Me.txt_compareValue.ForeColor = &H40A621
            End If
        Else
            Me.txt_compareValue.ForeColor = &H80000008
        End If
        'kleiner als max
        If VBA.IsNumeric(MAX) And MAX <> "" Then
            If Me.txt_compareValue.text > VBA.CDbl(MAX) Then
                Me.txt_compareValue.ForeColor = &H2411B9
                btn_ok.Enabled = False
            Else
                'wenn <> rot, dann gr|fffd|n
                If Me.txt_compareValue.ForeColor <> &H2411B9 Then
                    Me.txt_compareValue.ForeColor = &H40A621
                End If
            End If
        Else
            'wenn <> rot, dann gr|fffd|n f|fffd|rben
            If Me.txt_compareValue.ForeColor <> &H2411B9 Then
                Me.txt_compareValue.ForeColor = &H40A621
            ElseIf Me.txt_compareValue.ForeColor <> &H40A621 Then
                Me.txt_compareValue.ForeColor = &H80000008
            End If
        End If
    Else
        Me.txt_compareValue.ForeColor = &H80000008
    End If
    Call checkUserEntries
End Sub

Private Sub txt_compareValue_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)

    Dim kommastellen
    Dim ID As Integer
    
    ID = Me.txt_kriterium_Id.value
    kommastellen = Application.WorksheetFunction.VLookup(ID, calc_frm_masterdata.Range("frm_Kategorie"), 8, False)
    
    If Not (VBA.IsNumeric(kommastellen)) Then
        kommastellen = 4
    End If
    
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
            If VBA.InStr(1, txt_compareValue.text, ",") > 0 Then
                If (VBA.Len(txt_compareValue.text) - VBA.InStr(1, txt_compareValue.text, ",")) > kommastellen Then
                    KeyAscii = 0
                Else
                    If (txt_compareValue.SelStart > VBA.InStr(1, txt_compareValue.text, ",") And (VBA.Len(txt_compareValue.text) - VBA.InStr(1, txt_compareValue.text, ",")) = 2) Then
                        KeyAscii = 0
                    End If
                End If
            End If
        Case 44 'Komma nur einmal zul|fffd|ssig
            If Len(txt_compareValue) = 0 Or UBound(Split(txt_compareValue, ",")) >= 1 Then
                KeyAscii = 0
            End If
        Case 45 'Minuszeichen nur als erstes Zeichen zul|fffd|ssig
            If Me.txt_compareValue.SelStart <> 0 Then KeyAscii = 0
        Case Else
            KeyAscii = 0
    End Select

End Sub

Private Sub UserForm_Initialize()

    Call nlc_functions.frm_sprache_SQL(Me, "frm_set_filter_kriterium%")
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    
    Me.cbb_filter_settings_compare_type.list(0, 1) = (1)
    Me.cbb_filter_settings_compare_type.list(1, 1) = (2)
    Me.cbb_filter_settings_compare_type.list(2, 1) = (3)
    Me.cbb_filter_settings_compare_type.list(3, 1) = (4)
    Me.cbb_filter_settings_compare_type.list(4, 1) = (5)
    Me.cbb_filter_settings_compare_type.list(5, 1) = (6)
    
    Call checkUserEntries
End Sub

Public Sub ShowWithData(resName As String, resId As String, filterId As String, filterType As Integer)

    Me.txt_Name.text = Trim$(resName)
    Me.txt_kriterium_Id.text = Trim$(resId)
    Me.txt_filterGroup_Id.text = Trim$(filterId)
    Me.txt_filterType.text = Trim$(filterType)
    Me.txt_ID = "new"
    
    'Me.cbb_delete_filter_set.visible = False
    
    Call checkUserEntries
    Me.Show
    
End Sub

Public Sub Show4Update(ID As String, kriterium_name As String, comp As String, value As String, fieldType As String)

    Me.txt_ID.text = str(ID)
    Me.txt_kriterium_Id.text = GetKriteByFilterSetId(ID)
    
    Me.txt_Name = kriterium_name
    Me.cbb_filter_settings_compare_type.listindex = comp - 1
    Me.txt_compareValue.text = value
    
    
    'Me.cbb_delete_filter_set.visible = True
    Call checkUserEntries
    Me.Show
    
End Sub


Private Function checkUserEntries()

    Me.btn_ok.Enabled = True
    
    If (Me.cbb_filter_settings_compare_type.listindex = -1) Then
        Me.btn_ok.Enabled = False
    End If
    
    If (Me.txt_compareValue.ForeColor <> &H40A621) Then
        Me.btn_ok.Enabled = False
    End If
    
End Function
Attribute VB_Name = "frm_set_gantt"
Attribute VB_Base = "0{531CF10D-B8B1-4826-A157-8F1B4C22C068}{38BB3546-83F8-4ACD-92ED-0227D30F2C22}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private click As Boolean
Private original_value As String

Private Sub btn_add_template_Click()
    Dim InsertColumns As String
    Dim insertValues As String
    
    If calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user" Then
        InsertColumns = "Name, FK_Users"
        insertValues = "New', '" & calc_master.Range("WindowsLogin").value & ""
    Else
        InsertColumns = ""
        insertValues = "New"
    End If

    If SQL_Abfragen.Insert_Template(insertValues, "DB_Settings_Gantt", InsertColumns) Then
        Call fill_standardfields
    Else
        MsgBox nlc_language.FindValue("SMessage_ErrAddTemp")
    End If
End Sub

Private Sub btn_del_template_Click()
    If Me.lb_templates.listindex = -1 Then Exit Sub
    
    If click = False Then
        click = True
        
        If SQL_Abfragen.Delete_Template(Me.lb_templates.list(Me.lb_templates.listindex, 1), "DB_Settings_Gantt") = True Then
            Call fill_standardfields
            Me.tb_template_name.text = ""
        Else
            MsgBox nlc_language.FindValue("SMessage_ErrDelTemp")
        End If
        
        click = False
    End If
End Sub

Private Sub btn_edit_filter_Click()
    'Filter ID schreiben
    If Me.cbb_filter.listindex <> -1 Then
        calc_master.Range("last_filter_id").value = Me.cbb_filter.list(Me.cbb_filter.listindex, 0)
    End If
    
    frm_set_filter.Show
End Sub

Private Sub cbb_filter_Change()
    If Me.cbb_filter.listindex = -1 Then
        Call EnableFields(False)
        Exit Sub
    End If
    
    Call EnableFields(True)
    
    If click = False Then
        click = True
        
        Call SQL_Abfragen.Update_Settings_Gantt(Me.lbl_gantt_id_value.Caption, "FK_Filter", Me.cbb_filter.list(Me.cbb_filter.listindex, 0))
        
        click = False
    End If
End Sub

Private Sub fill_standardfields()
    Dim i As Integer
    Dim SelectedItem As String
    'Templates laden (in DropDown und Listbox)
    Dim Template() As String
    
    Template = SQL_Abfragen.Get_Settings_dropdown("DB_Settings_Gantt")
    
    If Not VBA.IsNull(Me.cbb_template.value) Then
        SelectedItem = Me.cbb_template.value
    End If
    
    Me.cbb_template.clear
    Me.lb_templates.clear
    
    If Template(0, 0) <> "leer" Then
        For i = 0 To UBound(Template) Step 1
            Me.cbb_template.addItem (Template(i, 0))
            Me.cbb_template.list(Me.cbb_template.listCount - 1, 1) = (Template(i, 1))
            Me.lb_templates.addItem (Template(i, 0))
            Me.lb_templates.list(Me.lb_templates.listCount - 1, 1) = (Template(i, 1))
        Next i
    End If
    
    On Error Resume Next
    Me.cbb_template.value = SelectedItem
    
    Me.chb_showProjects.value = True
    'Filter bef|fffd|llen
    'geht noch nicht, da die Filtertabelle fehlt und demnach die ID nicht mit dem Name aufgel|fffd|st werden kann
End Sub

Private Sub btn_generate_Click()
    If Me.cbb_filter.listindex < 0 Then
        MsgBox nlc_language.FindValue("SMessage_SelFilter")
        Exit Sub
    End If
    
    nlc_intern.Application_off
    Call SQL_Abfragen.Update_Settings_Gantt(Me.lbl_gantt_id_value.Caption, "projects", nlc_intern.get_true_false(True))
    
    nlc_ppf_Gantt.Unprotect nlc_intern.get_pw
    calc_master.Range("Filter_Gantt").value = Me.cbb_filter.text
    Unload Me
    
    Call nlc_Gantt.generate_Gantt
    nlc_ppf_Gantt.Protect nlc_intern.get_pw
    nlc_intern.Application_on
End Sub

Private Sub cbb_template_Change()
    If Me.cbb_template.listindex = -1 Then
        click = True
            
        Call clear_content
        Call EnableFilters(False)
        Call EnableFields(False)
            
        click = False
        Exit Sub
    End If
    
    Call EnableFilters(True)
    
    If Me.cbb_template.text <> "" Then
        click = True
        Me.lbl_gantt_id_value.Caption = Me.cbb_template.list(Me.cbb_template.listindex, 1)
        calc_master.Range("last_Gantt_ID").value = Me.cbb_template.list(Me.cbb_template.listindex, 1)
        Call clear_content
        click = False
        Call load_content
    End If
End Sub

Private Sub chb_showBaseplan_Click()
    If click = False Then
        click = True
        Call SQL_Abfragen.Update_Settings_Gantt(Me.lbl_gantt_id_value.Caption, "baseplan", nlc_intern.get_true_false(Me.chb_showBaseplan.value))
        click = False
    End If
End Sub

Private Sub chb_showMST_Click()
    If click = False Then
        click = True
        Call SQL_Abfragen.Update_Settings_Gantt(Me.lbl_gantt_id_value.Caption, "milestones", nlc_intern.get_true_false(Me.chb_showMST.value))
        click = False
    End If
End Sub

Private Sub chb_showProjects_Click()
    If click = False Then
        click = True
        Call SQL_Abfragen.Update_Settings_Gantt(Me.lbl_gantt_id_value.Caption, "projects", nlc_intern.get_true_false(Me.chb_showProjects.value))
        click = False
    End If
End Sub

Private Sub lb_templates_Click()
    If click = False Then
        click = True
        
        If tool_art = "Demo" Or ((calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.lb_templates.list(Me.lb_templates.listindex, 0), VBA.Len(GlobalIdLeft)) = GlobalIdLeft) Then
            Me.tb_template_name.Enabled = False
            Me.tb_template_name.BackColor = &H8000000F
            Me.btn_del_template.Enabled = False
        Else
            Me.tb_template_name.Enabled = True
            Me.tb_template_name.BackColor = &HFFFFFF
            Me.btn_del_template.Enabled = True
        End If
        
        Me.tb_template_name.text = get_ValueWithoutGlobal(Me.lb_templates.list(Me.lb_templates.listindex, 0))
        click = False
    End If
End Sub

Private Sub tb_template_name_Enter()
    If Me.lb_templates.listindex = -1 Then Me.tb_template_name.text = ""
    original_value = Me.tb_template_name.text
End Sub

Private Sub tb_template_name_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False Then
        If original_value <> Me.tb_template_name.text And Me.lb_templates.listindex > -1 Then
            click = True
            
            If VBA.Left(Me.tb_template_name.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
                MsgBox "Der Name des Templates darf nicht mit '" & GlobalIdLeft & "' beginnen."
                Me.tb_template_name.text = get_ValueWithoutGlobal(Me.lb_templates.list(Me.lb_templates.listindex, 0))
                Exit Sub
            End If
            
            Dim TBValue As String
            
            TBValue = Me.tb_template_name.text
            
            Call SQL_Abfragen.Update_Settings_Gantt(Me.lb_templates.list(Me.lb_templates.listindex, 1), "Name", TBValue)
            Call fill_standardfields
            
            If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") Then
                Me.lb_templates.text = TBValue
                Me.cbb_template.text = TBValue
            Else
                Me.lb_templates.text = GlobalIdLeft & TBValue & GlobalIdRight
                Me.cbb_template.text = GlobalIdLeft & TBValue & GlobalIdRight
            End If
            
            click = False
        End If
    End If
End Sub

Private Sub UserForm_Initialize()
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    click = True
    
    Call SQL_Abfragen.Get_AllFilter
    Call fill_standardfields
    Me.cbb_filter.RowSource = "frm_Filter"
    click = True
    Call clear_content
    click = False
    Call load_content
    
    If Me.cbb_template.listindex <> -1 And Me.cbb_filter.listindex <> -1 Then
        Call EnableFields(True)
    Else
        Call EnableFields(False)
    End If
End Sub

Private Sub load_content()
    If Not VBA.IsNumeric(calc_master.Range("last_Gantt_ID").value) Then Exit Sub
    On Error Resume Next

    Dim counter As Integer
    Dim art As String
    Dim Math As String
    Dim value_detail As String
    Dim cluster_detail As String
    Dim filter As String
    
    'Templatetitel laden
    Me.cbb_template.text = SQL_Abfragen.Get_Setting_Gantt_Value(calc_master.Range("last_Gantt_ID").value, "Name") 'calc_pipe_set.Cells(4, 3).value
    Me.lbl_gantt_id_value.Caption = Me.cbb_template.list(Me.cbb_template.listindex, 1)
    If Not VBA.IsNumeric(Me.lbl_gantt_id_value.Caption) Then Exit Sub
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Allgemein laden
    'Filter laden
    
    filter = SQL_Abfragen.Get_Setting_Gantt_Value(calc_master.Range("last_Gantt_ID").value, "FK_Filter")
    
    For counter = 0 To Me.cbb_filter.listCount - 1
        If Me.cbb_filter.list(counter, 0) = filter Then
            Me.cbb_filter.listindex = counter
            Exit For
        End If
    Next counter
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Wert-Felder laden
    'Me.chb_showProjects.value = SQL_Abfragen.Get_Setting_Gantt_Value(calc_master.Range("last_Gantt_ID").value, "projects")
    Me.chb_showMST.value = SQL_Abfragen.Get_Setting_Gantt_Value(calc_master.Range("last_Gantt_ID").value, "milestones")
    Me.chb_showBaseplan.value = SQL_Abfragen.Get_Setting_Gantt_Value(calc_master.Range("last_Gantt_ID").value, "baseplan")
    Me.chb_showProjects.value = True
    click = False
End Sub

Private Sub clear_content()
    On Error Resume Next
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Allgemein laden
    'Filter laden
    Me.cbb_filter.listindex = -1
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Wert-Felder laden
    Me.chb_showProjects.value = True
    Me.chb_showMST.value = False
    Me.chb_showBaseplan.value = False
End Sub

Private Sub EnableFilters(enable As Boolean)
    If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
        enable = False
    End If
    
    Me.cbb_filter.Enabled = enable
    
    If Not enable Then
        Me.cbb_filter.BackColor = &H8000000F
    Else
        Me.cbb_filter.BackColor = &HFFFFFF
    End If
End Sub

Private Sub EnableFields(enable As Boolean)
    If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
        enable = False
    End If
    
    If tool_art = "Demo" Then
        enable = False
        Me.btn_add_template.Enabled = enable
        Me.btn_del_template.Enabled = enable
    End If
    
    Me.chb_showBaseplan.Enabled = enable
    Me.chb_showMST.Enabled = enable
    Me.chb_showProjects.Enabled = enable
    
    If Not enable Then
        Me.chb_showBaseplan.BackColor = &H8000000F
        Me.chb_showMST.BackColor = &H8000000F
        Me.chb_showProjects.BackColor = &H8000000F
    Else
        Me.chb_showBaseplan.BackColor = &HFFFFFF
        Me.chb_showMST.BackColor = &HFFFFFF
        Me.chb_showProjects.BackColor = &HFFFFFF
    End If
End Sub

Attribute VB_Name = "frm_set_matrixchart"
Attribute VB_Base = "0{924E9118-E7DF-4C82-A359-861184FD707F}{E05CDA34-308F-499C-99DB-0476CAAF2C1E}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private resskost(2) As String
Private cbb_art_values(3, 1) As String
Private click As Boolean
Dim original_value As String

Private Sub btn_add_template_Click()
    If click = False Then
        click = True
        
        Dim InsertColumns As String
        Dim insertValues As String
        
        If calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user" Then
            InsertColumns = "Name, FK_Users"
            insertValues = "New', '" & calc_master.Range("WindowsLogin").value & ""
        Else
            InsertColumns = ""
            insertValues = "New"
        End If
        
        If SQL_Abfragen.Insert_Template(insertValues, "DB_Settings_Matrixchart", InsertColumns) Then
            Call fill_standardfields
        Else
            MsgBox nlc_language.FindValue("SMessage_ErrAddTemp")
        End If
        
        click = False
    End If
End Sub

Private Sub btn_del_template_Click()
    If Me.lb_templates.listindex = -1 Then Exit Sub
    
    If click = False Then
        click = True
        
        If SQL_Abfragen.Delete_Template(Me.lb_templates.list(Me.lb_templates.listindex, 1), "DB_Settings_Matrixchart") = True Then
            Call fill_standardfields
            Me.tb_template_name.text = ""
        Else
            MsgBox nlc_language.FindValue("SMessage_ErrDelTemp")
        End If
        
        click = False
    End If
End Sub

Private Sub btn_edit_bg_image_Click()
    Dim listindex As Integer
    
    frm_MasterData.TabPage.Pages(0).visible = False
    frm_MasterData.TabPage.Pages(1).visible = False
    frm_MasterData.TabPage.Pages(2).visible = False
    frm_MasterData.TabPage.Pages(3).visible = False
    frm_MasterData.TabPage.Pages(5).visible = False
    frm_MasterData.TabPage.Pages(6).visible = False
    
    
    listindex = Me.cbb_bg_image.listindex
    frm_MasterData.TabPage.value = frm_MasterData.TabPage.Pages.count - 1
    frm_MasterData.cbb_grafiken.text = Me.cbb_bg_image.text
    frm_MasterData.Show
    Me.cbb_bg_image.listindex = -1
    Call load_BackGround
    
    Me.cbb_bg_image.listindex = listindex
End Sub

Private Sub btn_edit_filter_Click()
    'Filter ID schreiben
    If Me.cbb_filter.listindex <> -1 Then
        calc_master.Range("last_filter_id").value = Me.cbb_filter.list(Me.cbb_filter.listindex, 0)
    End If
    
    frm_set_filter.Show
End Sub

Private Sub btn_generate_Click()
    If Me.cbb_filter.listindex < 0 Then
        MsgBox nlc_language.FindValue("SMessage_SelFilter")
        Exit Sub
    End If
    
    If Not checkFields Then
        MsgBox "Es m|fffd|ssen alle Felder ausgew|fffd|hlt werden. Bitte |fffd|berpr|fffd|fen Sie Ihre Eingabe.", vbInformation + vbOKOnly
        Exit Sub
    End If
    
    Unload Me
    nlc_ppf_matrix.Activate
    Call nlc_matrix.generate_matrix
End Sub

Private Sub cbb_bg_image_Change()
    If Me.cbb_bg_image.listindex = -1 Then Exit Sub
    
    If Me.cbb_bg_image.listindex = 0 Then
        Me.btn_edit_bg_image.Enabled = False
    Else
        Me.btn_edit_bg_image.Enabled = True
    End If
    
    If click = False Then
        click = True
        
        Call show_BG_Image
        
        'Wert speichern
    Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "Background", VBA.CStr(Me.cbb_bg_image.listindex))
        
        click = False
    End If
End Sub

Private Sub show_BG_Image()
    On Error Resume Next
    If Me.cbb_bg_image.listindex = -1 Then Exit Sub

'    Select Case Me.cbb_bg_image.listindex
'        Case 0:
'            img_vorschau.Picture = Nothing
'        Case 1:
'            img_vorschau.Picture = calc_master.btn_grafik_1.Picture
'        Case 2:
'            img_vorschau.Picture = calc_master.btn_grafik_2.Picture
'        Case 3:
'            img_vorschau.Picture = calc_master.btn_grafik_3.Picture
'        Case 4:
'            img_vorschau.Picture = calc_master.btn_grafik_4.Picture
'        Case 5:
'            img_vorschau.Picture = calc_master.btn_grafik_5.Picture
'        Case 6:
'            img_vorschau.Picture = calc_master.btn_grafik_6.Picture
'        Case 7:
'            img_vorschau.Picture = calc_master.btn_grafik_7.Picture
'        Case 8:
'            img_vorschau.Picture = calc_master.btn_grafik_8.Picture
'        Case 9:
'            img_vorschau.Picture = calc_master.btn_grafik_9.Picture
'        Case 10:
'            img_vorschau.Picture = calc_master.btn_grafik_10.Picture
'    End Select
    
    If VBA.IsNumeric(Me.cbb_bg_image.listindex) Then
        img_vorschau.Picture = LoadPicture(ActiveWorkbook.Path & "\Hintergrundgrafiken\" & calc_master.Cells(8, 15 + Me.cbb_bg_image.listindex - 1).value)
    End If
End Sub

Private Sub cbb_matrix_farbe_art_Change()
    'Benutzerdefinierte Felder m|fffd|ssen begrenzt werden
    'Zur Auswahl stehen: True/False; Dropdown
    If click = False Then
        click = True
        
        If Me.cbb_matrix_farbe_art.listindex = 0 Then
            Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "Color_Art", "einheitlich")
            Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "Color_ID", "0")
            Call Get_Setting_Matrix_Value(Me.lbl_matrix_id_value.Caption, "Color_ID")
        ElseIf Me.cbb_matrix_farbe_art.listindex = 1 Then
        'Benutzerdefinierte Felder
        End If
        
        Call generate_cbb_farbe_art_detail
        
        click = False
    End If
End Sub

Private Sub cbb_matrix_farbe_art_detail_Change()
    If click = False Then
        click = True
        
        If Me.cbb_matrix_farbe_art_detail.listindex >= 0 Then
            If Me.cbb_matrix_farbe_art_detail.list(Me.cbb_matrix_farbe_art_detail.listindex, 0) <> "" Then
                Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "Color_Art", Me.cbb_matrix_farbe_art_detail.list(Me.cbb_matrix_farbe_art_detail.listindex, 2))
                Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "Color_ID", Me.cbb_matrix_farbe_art_detail.list(Me.cbb_matrix_farbe_art_detail.listindex, 0))
            End If
        End If
        
        click = False
    End If
End Sub

Private Sub cbb_filter_Change()
    If Me.cbb_filter.listindex = -1 Then
        Call EnableFields(False)
        Exit Sub
    End If
    
    Call EnableFields(True)
    
    If click = False Then
        click = True
        
        Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "FK_Filter", Me.cbb_filter.list(Me.cbb_filter.listindex, 0))
        
        calc_master.Range("Filter_Matrix").value = Me.cbb_filter.text
        click = False
    End If
End Sub

Private Sub cbb_matrix_groese_art_Change()
    'Benutzerdefinierte Felder m|fffd|ssen begrenzt werden
    'Zur Auswahl stehen: Number
    'Ressourcen und Kosten werden mit Basis, Ist und Aktuell bef|fffd|llt
    If click = False Then
        click = True
        
        If Me.cbb_matrix_groese_art.listindex = 0 Then
            Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "Size_Art", "einheitlich")
            Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "Size_ID_Value", "0")
        ElseIf Me.cbb_matrix_groese_art.listindex = 1 Then
        'Benutzerdefinierte Felder
        ElseIf Me.cbb_matrix_groese_art.listindex = 2 Then
        'Kosten
            Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "Size_Art", "Kosten")
        ElseIf Me.cbb_matrix_groese_art.listindex = 3 Then
        'Ressourcen
            Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "Size_Art", "Ressourcen")
        End If
        
        Call generate_cbb_groese_art_detail
        
        click = False
    End If
End Sub

Private Sub cbb_matrix_groese_art_detail_Change()
    If click = False Then
        click = True
        
        If Me.cbb_matrix_groese_art_detail.listindex >= 0 Then
            If Me.cbb_matrix_groese_art_detail.list(Me.cbb_matrix_groese_art_detail.listindex, 0) <> "" Then
                Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "Size_Art", Me.cbb_matrix_groese_art_detail.list(Me.cbb_matrix_groese_art_detail.listindex, 2))
                Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "Size_ID_Value", Me.cbb_matrix_groese_art_detail.list(Me.cbb_matrix_groese_art_detail.listindex, 0))
            Else
                Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "Size_ID_Value", Me.cbb_matrix_groese_art_detail.list(Me.cbb_matrix_groese_art_detail.listindex, 1))
            End If
        End If
        
        click = False
    End If
End Sub

Private Sub cbb_matrix_groese_skalierung_Change()
    If click = False Then
        click = True
        Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "Size_Scale", VBA.Left(Me.cbb_matrix_groese_skalierung.text, VBA.Len(Me.cbb_matrix_groese_skalierung.text) - 2))
        click = False
    End If
End Sub

Private Sub cbb_template_Change()
    If Me.cbb_template.listindex = -1 Then
        click = True
            
        Call clear_content
        Call EnableFilters(False)
        Call EnableFields(False)
            
        click = False
        Exit Sub
    End If
    
    Call EnableFilters(True)
    
    If click = False Then
        click = True
        
        Me.lbl_matrix_id_value.Caption = Me.cbb_template.list(Me.cbb_template.listindex, 1)
        calc_master.Range("last_Matrix_ID").value = Me.cbb_template.list(Me.cbb_template.listindex, 1)
        Call clear_content
        Call load_content
        
        If Me.cbb_filter.listindex = -1 Then
            Call EnableFields(False)
        End If
        
        click = False
    End If
End Sub

Private Sub generate_cbb_y_art_detail()
    'Benutzerdefinierte Felder m|fffd|ssen begrenzt werden
    'Zur Auswahl stehen: Date; Number; True/False; Dropdown
    'Ressourcen und Kosten werden mit Basis, Ist und Aktuell bef|fffd|llt
    
    Dim counter As Integer
    Dim art As String
    Dim achsen As Boolean
    Dim selected_item As String
    
    If Not VBA.IsNull(Me.cbb_matrix_y_art_detail.value) Then
        selected_item = Me.cbb_matrix_y_art_detail.value
    End If
    
    Me.cbb_matrix_y_art_detail.clear
    'Me.cbb_matrix_y_art_detail.Enabled = True
    
    If Me.cbb_matrix_y_art.list(Me.cbb_matrix_y_art.listindex, 1) = "2" Then
        Me.cbb_matrix_y_art_detail.Enabled = False
        
        Me.cbb_matrix_x_art.clear
        Me.cbb_matrix_x_art.addItem cbb_art_values(1, 0)
        Me.cbb_matrix_x_art.list(Me.cbb_matrix_x_art.listCount - 1, 1) = cbb_art_values(1, 1)
        Me.cbb_matrix_x_art.addItem cbb_art_values(2, 0)
        Me.cbb_matrix_x_art.list(Me.cbb_matrix_x_art.listCount - 1, 1) = cbb_art_values(2, 1)
        Me.cbb_matrix_x_art.addItem cbb_art_values(3, 0)
        Me.cbb_matrix_x_art.list(Me.cbb_matrix_x_art.listCount - 1, 1) = cbb_art_values(3, 1)
    ElseIf Me.cbb_matrix_y_art.list(Me.cbb_matrix_y_art.listindex, 1) = "1" Then
    'Benutzerdefinierte Felder
        For counter = 1 To calc_frm_masterdata.Range("frm_Kategorie").Rows.count Step 1
            art = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
            achsen = nlc_intern.get_true_false(calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 9).value)
            If achsen = True And (art = "True/False" Or art = "DropDown") Then
                Me.cbb_matrix_y_art_detail.addItem calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 1).value
                Me.cbb_matrix_y_art_detail.list(Me.cbb_matrix_y_art_detail.listCount - 1, 1) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 3).value
                Me.cbb_matrix_y_art_detail.list(Me.cbb_matrix_y_art_detail.listCount - 1, 2) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
            End If
        Next counter
    ElseIf Me.cbb_matrix_y_art.list(Me.cbb_matrix_y_art.listindex, 1) = "3" Then
    'Ressourcen
        Me.cbb_matrix_y_art_detail.addItem
        Me.cbb_matrix_y_art_detail.list(Me.cbb_matrix_y_art_detail.listCount - 1, 1) = resskost(0)
        Me.cbb_matrix_y_art_detail.addItem
        Me.cbb_matrix_y_art_detail.list(Me.cbb_matrix_y_art_detail.listCount - 1, 1) = resskost(1)
        Me.cbb_matrix_y_art_detail.addItem
        Me.cbb_matrix_y_art_detail.list(Me.cbb_matrix_y_art_detail.listCount - 1, 1) = resskost(2)
    ElseIf Me.cbb_matrix_y_art.list(Me.cbb_matrix_y_art.listindex, 1) = "4" Then
    'Kosten
        Me.cbb_matrix_y_art_detail.addItem
        Me.cbb_matrix_y_art_detail.list(Me.cbb_matrix_y_art_detail.listCount - 1, 1) = resskost(0)
        Me.cbb_matrix_y_art_detail.addItem
        Me.cbb_matrix_y_art_detail.list(Me.cbb_matrix_y_art_detail.listCount - 1, 1) = resskost(1)
        Me.cbb_matrix_y_art_detail.addItem
        Me.cbb_matrix_y_art_detail.list(Me.cbb_matrix_y_art_detail.listCount - 1, 1) = resskost(2)
    End If
    
    On Error Resume Next
    Me.cbb_matrix_y_art_detail.value = selected_item
End Sub

Private Sub generate_cbb_skalierung()
    Me.cbb_matrix_groese_skalierung.clear
    
    Me.cbb_matrix_groese_skalierung.clear
    Me.cbb_matrix_groese_skalierung.addItem "5 %"
    Me.cbb_matrix_groese_skalierung.addItem "10 %"
    Me.cbb_matrix_groese_skalierung.addItem "15 %"
    Me.cbb_matrix_groese_skalierung.addItem "20 %"
    Me.cbb_matrix_groese_skalierung.addItem "25 %"
    Me.cbb_matrix_groese_skalierung.addItem "30 %"
    Me.cbb_matrix_groese_skalierung.addItem "35 %"
    Me.cbb_matrix_groese_skalierung.addItem "40 %"
    Me.cbb_matrix_groese_skalierung.addItem "45 %"
    Me.cbb_matrix_groese_skalierung.addItem "50 %"
    Me.cbb_matrix_groese_skalierung.addItem "75 %"
    Me.cbb_matrix_groese_skalierung.addItem "100 %"
    Me.cbb_matrix_groese_skalierung.addItem "150 %"
    Me.cbb_matrix_groese_skalierung.addItem "200 %"
End Sub

Private Sub generate_cbb_x_art_detail()
    Dim counter As Integer
    Dim art As String
    Dim achsen As Boolean
    Dim selected_item As String

    If Not VBA.IsNull(Me.cbb_matrix_x_art_detail.text) Then
        selected_item = Me.cbb_matrix_x_art_detail.text
    End If
    
    Me.cbb_matrix_x_art_detail.clear
    'Me.cbb_matrix_x_art_detail.Enabled = True
    
    If Me.cbb_matrix_x_art.list(Me.cbb_matrix_x_art.listindex, 1) = "2" Then

    ElseIf Me.cbb_matrix_x_art.list(Me.cbb_matrix_x_art.listindex, 1) = "1" Then
    'Benutzerdefinierte Felder
        For counter = 1 To calc_frm_masterdata.Range("frm_Kategorie").Rows.count Step 1
            art = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
            achsen = nlc_intern.get_true_false(calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 9).value)
            If achsen = True And (art = "True/False" Or art = "DropDown") Then
                Me.cbb_matrix_x_art_detail.addItem calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 1).value
                Me.cbb_matrix_x_art_detail.list(Me.cbb_matrix_x_art_detail.listCount - 1, 1) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 3).value
                Me.cbb_matrix_x_art_detail.list(Me.cbb_matrix_x_art_detail.listCount - 1, 2) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
            End If
        Next counter
        
        'Call generate_cbb_matrix_y_art(True)
    ElseIf Me.cbb_matrix_x_art.list(Me.cbb_matrix_x_art.listindex, 1) = "3" Then
    'Ressourcen
        Me.cbb_matrix_x_art_detail.addItem
        Me.cbb_matrix_x_art_detail.list(Me.cbb_matrix_x_art_detail.listCount - 1, 1) = resskost(0)
        Me.cbb_matrix_x_art_detail.addItem
        Me.cbb_matrix_x_art_detail.list(Me.cbb_matrix_x_art_detail.listCount - 1, 1) = resskost(1)
        Me.cbb_matrix_x_art_detail.addItem
        Me.cbb_matrix_x_art_detail.list(Me.cbb_matrix_x_art_detail.listCount - 1, 1) = resskost(2)
    ElseIf Me.cbb_matrix_x_art.list(Me.cbb_matrix_x_art.listindex, 1) = "4" Then
    'Kosten
        Me.cbb_matrix_x_art_detail.addItem
        Me.cbb_matrix_x_art_detail.list(Me.cbb_matrix_x_art_detail.listCount - 1, 1) = resskost(0)
        Me.cbb_matrix_x_art_detail.addItem
        Me.cbb_matrix_x_art_detail.list(Me.cbb_matrix_x_art_detail.listCount - 1, 1) = resskost(1)
        Me.cbb_matrix_x_art_detail.addItem
        Me.cbb_matrix_x_art_detail.list(Me.cbb_matrix_x_art_detail.listCount - 1, 1) = resskost(2)
    End If
    
    On Error Resume Next
    Me.cbb_matrix_x_art_detail.text = selected_item
End Sub

Private Sub generate_cbb_groese_art_detail()
    'Benutzerdefinierte Felder m|fffd|ssen begrenzt werden
    'Zur Auswahl stehen: Number
    'Ressourcen und Kosten werden mit Basis, Ist und Aktuell bef|fffd|llt
        
    Dim counter As Integer
    Dim art As String
    Dim achsen As Boolean
    Dim selecte_item As String
    
    If Not VBA.IsNull(Me.cbb_matrix_groese_art_detail.value) Then
        selecte_item = Me.cbb_matrix_groese_art_detail.value
    End If
    
    Me.cbb_matrix_groese_art_detail.clear
    'Me.cbb_matrix_groese_art_detail.Enabled = True
    
    If Me.cbb_matrix_groese_art.listindex <> -1 Then
        If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
            Me.cbb_matrix_groese_art_detail.BackColor = &H8000000F
            Me.cbb_matrix_groese_art_detail.Enabled = False
        Else
            Me.cbb_matrix_groese_art_detail.BackColor = &HFFFFFF
            Me.cbb_matrix_groese_art_detail.Enabled = True
        End If
    End If
    
    If Me.cbb_matrix_groese_art.listindex = 0 Then
        Me.cbb_matrix_groese_art_detail.BackColor = &H8000000F
        Me.cbb_matrix_groese_art_detail.Enabled = False
    ElseIf Me.cbb_matrix_groese_art.listindex = 1 Then
    'Benutzerdefinierte Felder
        For counter = 1 To calc_frm_masterdata.Range("frm_Kategorie").Rows.count Step 1
            art = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
            achsen = nlc_intern.get_true_false(calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 9).value)
            If art = "Number" And achsen = True Then
                Me.cbb_matrix_groese_art_detail.addItem calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 1).value
                Me.cbb_matrix_groese_art_detail.list(Me.cbb_matrix_groese_art_detail.listCount - 1, 1) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 3).value
                Me.cbb_matrix_groese_art_detail.list(Me.cbb_matrix_groese_art_detail.listCount - 1, 2) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
            End If
        Next counter
    ElseIf Me.cbb_matrix_groese_art.listindex = 2 Then
    'Kosten
        Me.cbb_matrix_groese_art_detail.addItem
        Me.cbb_matrix_groese_art_detail.list(Me.cbb_matrix_groese_art_detail.listCount - 1, 1) = resskost(0)
        Me.cbb_matrix_groese_art_detail.addItem
        Me.cbb_matrix_groese_art_detail.list(Me.cbb_matrix_groese_art_detail.listCount - 1, 1) = resskost(1)
        Me.cbb_matrix_groese_art_detail.addItem
        Me.cbb_matrix_groese_art_detail.list(Me.cbb_matrix_groese_art_detail.listCount - 1, 1) = resskost(2)
    ElseIf Me.cbb_matrix_groese_art.listindex = 3 Then
    'Ressourcen
        Me.cbb_matrix_groese_art_detail.addItem
        Me.cbb_matrix_groese_art_detail.list(Me.cbb_matrix_groese_art_detail.listCount - 1, 1) = resskost(0)
        Me.cbb_matrix_groese_art_detail.addItem
        Me.cbb_matrix_groese_art_detail.list(Me.cbb_matrix_groese_art_detail.listCount - 1, 1) = resskost(1)
        Me.cbb_matrix_groese_art_detail.addItem
        Me.cbb_matrix_groese_art_detail.list(Me.cbb_matrix_groese_art_detail.listCount - 1, 1) = resskost(2)
    End If
    
    On Error Resume Next
    Me.cbb_matrix_groese_art_detail.value = selecte_item
End Sub

Private Sub generate_cbb_farbe_art_detail()
    Dim counter As Integer
    Dim art As String
    Dim achsen As Boolean
    Dim selected_item As String
    
    If Not VBA.IsNull(Me.cbb_matrix_farbe_art_detail.value) Then
        selected_item = Me.cbb_matrix_farbe_art_detail.value
    End If
    
    Me.cbb_matrix_farbe_art_detail.clear
    'Me.cbb_matrix_farbe_art_detail.Enabled = True
    
    If Me.cbb_matrix_farbe_art.listindex <> -1 Then
        If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
            Me.cbb_matrix_farbe_art_detail.BackColor = &H8000000F
            Me.cbb_matrix_farbe_art_detail.Enabled = False
        Else
            Me.cbb_matrix_farbe_art_detail.BackColor = &HFFFFFF
        Me.cbb_matrix_farbe_art_detail.Enabled = True
    End If

        
    End If
    
    If Me.cbb_matrix_farbe_art.listindex = 0 Then
        Me.cbb_matrix_farbe_art_detail.BackColor = &H8000000F
        Me.cbb_matrix_farbe_art_detail.Enabled = False
    ElseIf Me.cbb_matrix_farbe_art.listindex = 1 Then
    'Benutzerdefinierte Felder
        For counter = 1 To calc_frm_masterdata.Range("frm_Kategorie").Rows.count Step 1
            art = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
            achsen = nlc_intern.get_true_false(calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 9).value)
            If achsen = True And (art = "True/False" Or art = "DropDown") Then
                Me.cbb_matrix_farbe_art_detail.addItem calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 1).value
                Me.cbb_matrix_farbe_art_detail.list(Me.cbb_matrix_farbe_art_detail.listCount - 1, 1) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 3).value
                Me.cbb_matrix_farbe_art_detail.list(Me.cbb_matrix_farbe_art_detail.listCount - 1, 2) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
            End If
        Next counter
    End If
    
    On Error Resume Next
    Me.cbb_matrix_farbe_art_detail.value = selected_item
End Sub

Private Sub generate_cbb_x_art(AddAll As Boolean)
    Dim selcted_item As String
    
    If Not VBA.IsNull(Me.cbb_matrix_x_art.value) Then
        selected_item = Me.cbb_matrix_x_art.value
    End If
    
    Me.cbb_matrix_x_art.clear
    
    If AddAll = True Then
        Me.cbb_matrix_x_art.addItem cbb_art_values(0, 0)
        Me.cbb_matrix_x_art.list(Me.cbb_matrix_x_art.listCount - 1, 1) = cbb_art_values(0, 1)
        Me.cbb_matrix_x_art.addItem cbb_art_values(1, 0)
        Me.cbb_matrix_x_art.list(Me.cbb_matrix_x_art.listCount - 1, 1) = cbb_art_values(1, 1)
        Me.cbb_matrix_x_art.addItem cbb_art_values(2, 0)
        Me.cbb_matrix_x_art.list(Me.cbb_matrix_x_art.listCount - 1, 1) = cbb_art_values(2, 1)
        Me.cbb_matrix_x_art.addItem cbb_art_values(3, 0)
        Me.cbb_matrix_x_art.list(Me.cbb_matrix_x_art.listCount - 1, 1) = cbb_art_values(3, 1)
    Else
        Me.cbb_matrix_x_art.addItem cbb_art_values(0, 0)
        Me.cbb_matrix_x_art.list(Me.cbb_matrix_x_art.listCount - 1, 1) = cbb_art_values(0, 1)
        Me.cbb_matrix_x_art.addItem cbb_art_values(2, 0)
        Me.cbb_matrix_x_art.list(Me.cbb_matrix_x_art.listCount - 1, 1) = cbb_art_values(2, 1)
        Me.cbb_matrix_x_art.addItem cbb_art_values(3, 0)
        Me.cbb_matrix_x_art.list(Me.cbb_matrix_x_art.listCount - 1, 1) = cbb_art_values(3, 1)
    End If
    
    On Error Resume Next
    Me.cbb_matrix_x_art.value = selected_item
End Sub

Private Sub cbb_matrix_x_art_Change()
    'Benutzerdefinierte Felder m|fffd|ssen begrenzt werden
    'Zur Auswahl stehen: Date; Number; True/False; Dropdown
    'Ressourcen und Kosten werden mit Basis, Ist und Aktuell bef|fffd|llt
    
    If click = False Then
        click = True
        
        Dim save_art As String
        Dim save_art_detail As String
        
        save_art = Me.cbb_matrix_y_art.text
        save_art_detail = Me.cbb_matrix_y_art_detail.text

        If Me.cbb_matrix_x_art.list(Me.cbb_matrix_x_art.listindex, 1) = "2" Then
            Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "X_Art", "Stapel")
            Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "X_ID_Value", "")
        ElseIf Me.cbb_matrix_x_art.list(Me.cbb_matrix_x_art.listindex, 1) = "1" Then
        'Benutzerdefinierte Felder

        ElseIf Me.cbb_matrix_x_art.list(Me.cbb_matrix_x_art.listindex, 1) = "3" Then
        'Ressourcen
            Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "X_Art", "Ressourcen")
        ElseIf Me.cbb_matrix_x_art.list(Me.cbb_matrix_x_art.listindex, 1) = "4" Then
        'Kosten
            Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "X_Art", "Kosten")
        End If
        
        Call generate_cbb_x_art_detail
        
        On Error Resume Next
        Me.cbb_matrix_y_art.text = save_art
        Me.cbb_matrix_y_art_detail.text = save_art_detail
        
        click = False
    End If
End Sub

Private Sub cbb_matrix_x_art_detail_Change()
    If click = False Then
        click = True
    
        If Me.cbb_matrix_x_art_detail.listindex >= 0 Then
            If Me.cbb_matrix_x_art_detail.list(Me.cbb_matrix_x_art_detail.listindex, 0) <> "" Then
                Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "X_Art", Me.cbb_matrix_x_art_detail.list(Me.cbb_matrix_x_art_detail.listindex, 2))
                Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "X_ID_Value", Me.cbb_matrix_x_art_detail.list(Me.cbb_matrix_x_art_detail.listindex, 0))
            Else
                Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "X_ID_Value", Me.cbb_matrix_x_art_detail.list(Me.cbb_matrix_x_art_detail.listindex, 1))
            End If
        End If
        
        click = False
    End If
End Sub

Private Sub cbb_matrix_y_art_Change()
    'Benutzerdefinierte Felder m|fffd|ssen begrenzt werden
    'Zur Auswahl stehen: Date; Number; True/False; Dropdown
    'Ressourcen und Kosten werden mit Basis, Ist und Aktuell bef|fffd|llt
    
    If click = False Then
        click = True
    
        Dim save_art As String
        Dim save_art_detail As String
        
        save_art = Me.cbb_matrix_x_art.text
        save_art_detail = Me.cbb_matrix_x_art_detail.text
        
        If Me.cbb_matrix_y_art.list(Me.cbb_matrix_y_art.listindex, 1) = "2" Then
            Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "Y_Art", "Stapel")
            Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "Y_ID_Value", "")
        ElseIf Me.cbb_matrix_y_art.list(Me.cbb_matrix_y_art.listindex, 1) = "1" Then
        'Benutzerdefinierte Felder
        ElseIf Me.cbb_matrix_y_art.list(Me.cbb_matrix_y_art.listindex, 1) = "3" Then
        'Ressourcen
            Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "Y_Art", "Ressourcen")
        ElseIf Me.cbb_matrix_y_art.list(Me.cbb_matrix_y_art.listindex, 1) = "4" Then
        'Kosten
            Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "Y_Art", "Kosten")
        End If
        
        Call generate_cbb_y_art_detail
        
        On Error Resume Next
        Me.cbb_matrix_x_art.text = save_art
        Me.cbb_matrix_x_art_detail.text = save_art_detail
        
        click = False
    End If
End Sub

Private Sub cbb_matrix_y_art_detail_Change()
    If click = False Then
        click = True
        
        If Me.cbb_matrix_y_art_detail.listindex >= 0 Then
            If Me.cbb_matrix_y_art_detail.list(Me.cbb_matrix_y_art_detail.listindex, 0) <> "" Then
                Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "Y_Art", Me.cbb_matrix_y_art_detail.list(Me.cbb_matrix_y_art_detail.listindex, 2))
                Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "Y_ID_Value", Me.cbb_matrix_y_art_detail.list(Me.cbb_matrix_y_art_detail.listindex, 0))
            Else
                Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "Y_ID_Value", Me.cbb_matrix_y_art_detail.list(Me.cbb_matrix_y_art_detail.listindex, 1))
            End If
        End If
        
'        Dim save_art As String
'        Dim save_art_detail As String
'
'        save_art = Me.cbb_matrix_x_art.text
'        save_art_detail = Me.cbb_matrix_x_art_detail.text
'
'        Call generate_cbb("0", Me.cbb_matrix_x_art)
'
'        On Error Resume Next
'        Me.cbb_matrix_x_art.text = save_art
'        Me.cbb_matrix_x_art_detail.text = save_art_detail
        
        click = False
    End If
End Sub

Private Sub chb_matrix_shortname_Click()
    If Me.chb_matrix_shortname.value Then
        Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "Bubbles_Shortname", Class_Functions.DB.Parse2True)
    Else
        Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "Bubbles_Shortname", "0")
    End If
End Sub

Private Sub chb_matrix_x_shortname_Click()
    If Me.chb_matrix_x_shortname.value Then
        Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "X_Shortname", Class_Functions.DB.Parse2True)
    Else
        Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "X_Shortname", "0")
    End If
End Sub

Private Sub chb_matrix_y_shortname_Click()
    If Me.chb_matrix_y_shortname.value Then
        Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "Y_Shortname", Class_Functions.DB.Parse2True)
    Else
        Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lbl_matrix_id_value.Caption, "Y_Shortname", "0")
    End If
End Sub

Private Sub lb_templates_Click()
    If click = False Then
        click = True
        
        If tool_art = "Demo" Or ((calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.lb_templates.list(Me.lb_templates.listindex, 0), VBA.Len(GlobalIdLeft)) = GlobalIdLeft) Then
            Me.tb_template_name.Enabled = False
            Me.tb_template_name.BackColor = &H8000000F
            Me.btn_del_template.Enabled = False
        Else
            Me.tb_template_name.Enabled = True
            Me.tb_template_name.BackColor = &HFFFFFF
            Me.btn_del_template.Enabled = True
        End If

        Me.tb_template_name.text = get_ValueWithoutGlobal(Me.lb_templates.list(Me.lb_templates.listindex))
        click = False
    End If
End Sub

Private Sub tb_template_name_Enter()
    If Me.lb_templates.listindex = -1 Then Me.tb_template_name.text = ""
    original_value = Me.tb_template_name.text
End Sub

Private Sub tb_template_name_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False Then
        If original_value <> Me.tb_template_name.text And Me.lb_templates.listindex > -1 Then
            click = True
            
            If VBA.Left(Me.tb_template_name.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
                MsgBox "Der Name des Templates darf nicht mit '" & GlobalIdLeft & "' beginnen."
                Me.tb_template_name.text = get_ValueWithoutGlobal(Me.lb_templates.list(Me.lb_templates.listindex, 0))
                Exit Sub
            End If
            
            Dim TBValue As String
            
            TBValue = Me.tb_template_name.text
            
            Call SQL_Abfragen.Update_Settings_Matrixchart(Me.lb_templates.list(Me.lb_templates.listindex, 1), "Name", TBValue)
            Call fill_standardfields
            
            If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") Then
                Me.lb_templates.text = TBValue
                Me.cbb_template.text = TBValue
            Else
                Me.lb_templates.text = GlobalIdLeft & TBValue & GlobalIdRight
                Me.cbb_template.text = GlobalIdLeft & TBValue & GlobalIdRight
            End If
            
            click = False
        End If
    End If
End Sub

Private Sub UserForm_Initialize()
    click = True
    'Sprache laden
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    
    resskost(0) = Me.cbb_matrix_groese_art_detail.list(0, 0)
    resskost(1) = Me.cbb_matrix_groese_art_detail.list(2, 0)
    resskost(2) = Me.cbb_matrix_groese_art_detail.list(1, 0)
    
    Me.cbb_matrix_x_art.list(0, 1) = "1"
    Me.cbb_matrix_y_art.list(0, 1) = "1"
'    Kategorien neu laden, wird verwendet um f|fffd|r die Details die Userfelder anzeigen zu k|fffd|nnen
    Call SQL_Abfragen.Get_AllKategorien
    Call SQL_Abfragen.Get_AllFilter
    Call fill_standardfields
    Me.cbb_filter.RowSource = "frm_Filter"
    
    click = True
    
    If Me.cbb_template.listindex <> -1 And Me.cbb_filter.listindex <> -1 Then
        Call EnableFields(True)
    Else
        Call EnableFields(False)
    End If
    
    Call clear_content
    Call load_content
    
    click = False
End Sub

Private Sub fill_standardfields()
    'X & Y-Achse
    'Art cbb bef|fffd|llen
    'wird bei Sprache laden ausgef|fffd|hrt
    'Art_Detail bef|fffd|llen
    'wird anhand der Art cbb Auswahl generiert
    Dim Template() As String
    Dim SelectedItem As String
    
    If Not VBA.IsNull(Me.cbb_template.value) Then
        SelectedItem = Me.cbb_template.value
    End If
    
    'Templates laden
    Template = SQL_Abfragen.Get_Settings_dropdown("DB_Settings_Matrixchart")
    Me.cbb_template.clear
    Me.lb_templates.clear
    
    For i = 0 To UBound(Template) Step 1
        Me.cbb_template.addItem (Template(i, 0))
        Me.cbb_template.list(Me.cbb_template.listCount - 1, 1) = (Template(i, 1))
        Me.lb_templates.addItem (Template(i, 0))
        Me.lb_templates.list(Me.lb_templates.listCount - 1, 1) = (Template(i, 1))
    Next i
    
    On Error Resume Next
    Me.cbb_template.value = SelectedItem
    'Filter bef|fffd|llen
    'geht noch nicht, da die Filtertabelle fehlt und demnach die ID nicht mit dem Name aufgel|fffd|st werden kann
    
    'Hintergrund cbb bef|fffd|llen
    Call load_BackGround
End Sub

Private Sub load_BackGround()
    Dim counter As Integer
    Dim selected_item As String
    
    If Not VBA.IsNull(Me.cbb_bg_image.value) Then
        selected_item = Me.cbb_bg_image.value
    End If
    
    counter = 5
    
    Me.cbb_bg_image.clear
    For counter = 0 To 10 Step 1
        If counter = 0 Then
            Me.cbb_bg_image.addItem " - "
        Else
            Me.cbb_bg_image.addItem calc_master.Range("frm_grafiken").Cells(counter, 1).value
        End If
    Next counter
    
    On Error Resume Next
    Me.cbb_bg_image.value = selected_item
End Sub

Private Sub load_content()
    If Not VBA.IsNumeric(calc_master.Range("last_Matrix_ID").value) Then Exit Sub
    On Error Resume Next

    Dim counter As Integer
    Dim art As String
    Dim filter As String
    Dim ID As String
    
    'Templatetitel laden
    Me.cbb_template.text = Get_Setting_Matrix_Value(calc_master.Range("last_Matrix_ID").value, "Name") 'calc_pipe_set.Cells(4, 3).value
    Me.lbl_matrix_id_value.Caption = Me.cbb_template.list(Me.cbb_template.listindex, 1)
    If Not VBA.IsNumeric(Me.lbl_matrix_id_value.Caption) Then Exit Sub
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Allgemein laden
    'Filter laden
    filter = Get_Setting_Matrix_Value(calc_master.Range("last_Matrix_ID").value, "FK_Filter")
    
    For counter = 0 To Me.cbb_filter.listCount - 1
        If Me.cbb_filter.list(counter, 0) = filter Then
            Me.cbb_filter.listindex = counter
        End If
    Next counter
    
    'Shortname?
    Me.chb_matrix_shortname.value = Get_Setting_Matrix_Value(Me.lbl_matrix_id_value.Caption, "Bubbles_Shortname")
    If VBA.IsNull(Me.chb_matrix_shortname.value) Then
        Me.chb_matrix_shortname.value = False
    End If
    
    
    'Hintergrund laden
    Me.cbb_bg_image.listindex = Get_Setting_Matrix_Value(Me.lbl_matrix_id_value.Caption, "Background")
    Call show_BG_Image
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'X-Achse laden
    'Art laden
    art = Get_Setting_Matrix_Value(Me.lbl_matrix_id_value.Caption, "X_Art")
    If art = "Ressourcen" Or art = "Kosten" Or art = "Stapel" Then
        Call generate_cbb_x_art_detail
        Me.cbb_matrix_x_art_detail.text = Get_Setting_Matrix_Value(Me.lbl_matrix_id_value.Caption, "X_ID_Value")
    Else
        For counter = 0 To Me.cbb_matrix_x_art.listCount - 1
            If Me.cbb_matrix_x_art.list(counter, 1) = "1" Then
                Me.cbb_matrix_x_art.listindex = counter
            End If
        Next counter
        Call generate_cbb_x_art_detail
        
        ID = VBA.CStr(Get_Setting_Matrix_Value(Me.lbl_matrix_id_value.Caption, "X_ID_Value"))
        
        For counter = 0 To Me.cbb_matrix_x_art_detail.listCount - 1 Step 1
            If Me.cbb_matrix_x_art_detail.list(counter, 0) = ID Then
                Me.cbb_matrix_x_art_detail.text = Me.cbb_matrix_x_art_detail.list(counter, 1)
            End If
        Next counter
    End If
    
    'Shortname?
    Me.chb_matrix_x_shortname.value = Get_Setting_Matrix_Value(Me.lbl_matrix_id_value.Caption, "X_Shortname")
    If VBA.IsNull(Me.chb_matrix_x_shortname.value) Then
        Me.chb_matrix_x_shortname.value = False
    End If
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Y-Achse laden
    art = Get_Setting_Matrix_Value(Me.lbl_matrix_id_value.Caption, "Y_Art")
    If art = "Ressourcen" Or art = "Kosten" Or art = "Stapel" Then
        Me.cbb_matrix_y_art.text = art
        Call generate_cbb_y_art_detail
        Me.cbb_matrix_y_art_detail.text = Get_Setting_Matrix_Value(Me.lbl_matrix_id_value.Caption, "Y_ID_Value")
    Else
        For counter = 0 To Me.cbb_matrix_y_art.listCount - 1
            If Me.cbb_matrix_y_art.list(counter, 1) = "1" Then
                Me.cbb_matrix_y_art.listindex = counter
            End If
        Next counter
        Call generate_cbb_y_art_detail
        
        ID = VBA.CStr(Get_Setting_Matrix_Value(Me.lbl_matrix_id_value.Caption, "Y_ID_Value"))
        
        For counter = 0 To Me.cbb_matrix_y_art_detail.listCount - 1 Step 1
            If Me.cbb_matrix_y_art_detail.list(counter, 0) = ID Then
                Me.cbb_matrix_y_art_detail.text = Me.cbb_matrix_y_art_detail.list(counter, 1)
            End If
        Next counter
    End If
    
    'Shortname?
    Me.chb_matrix_y_shortname.value = Get_Setting_Matrix_Value(Me.lbl_matrix_id_value.Caption, "Y_Shortname")
    If VBA.IsNull(Me.chb_matrix_y_shortname.value) Then
        Me.chb_matrix_y_shortname.value = False
    End If
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Gr|fffd||fffd|e laden
    art = Get_Setting_Matrix_Value(Me.lbl_matrix_id_value.Caption, "Size_Art")
    If art = "Ressourcen" Or art = "Kosten" Or art = "einheitlich" Then
        Me.cbb_matrix_groese_art.text = art
        generate_cbb_groese_art_detail
        Me.cbb_matrix_groese_art_detail.text = Get_Setting_Matrix_Value(Me.lbl_matrix_id_value.Caption, "Size_ID_Value")
    Else
        Me.cbb_matrix_groese_art.listindex = 1
        
        Call generate_cbb_groese_art_detail
        
        ID = VBA.CStr(Get_Setting_Matrix_Value(Me.lbl_matrix_id_value.Caption, "Size_ID_Value"))
        For counter = 0 To Me.cbb_matrix_groese_art_detail.listCount - 1 Step 1
            If Me.cbb_matrix_groese_art_detail.list(counter, 0) = ID Then
                Me.cbb_matrix_groese_art_detail.text = Me.cbb_matrix_groese_art_detail.list(counter, 1)
            End If
        Next counter
    End If
    
    Me.cbb_matrix_groese_skalierung.text = Get_Setting_Matrix_Value(Me.lbl_matrix_id_value.Caption, "Size_Scale") & " %"
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Farbe laden
    art = Get_Setting_Matrix_Value(Me.lbl_matrix_id_value.Caption, "Color_Art")
    If art = "einheitlich" Then
        Me.cbb_matrix_farbe_art.listindex = 0
    Else
        Me.cbb_matrix_farbe_art.listindex = 1
        
        Call generate_cbb_farbe_art_detail
        
        ID = VBA.CStr(Get_Setting_Matrix_Value(Me.lbl_matrix_id_value.Caption, "Color_ID"))
        For counter = 0 To Me.cbb_matrix_farbe_art_detail.listCount - 1 Step 1
            If Me.cbb_matrix_farbe_art_detail.list(counter, 0) = ID Then
                Me.cbb_matrix_farbe_art_detail.text = Me.cbb_matrix_farbe_art_detail.list(counter, 1)
            End If
        Next counter
    End If
End Sub

Private Sub clear_content()
    Call generate_cbb_skalierung

    On Error Resume Next
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Allgemein laden
    'Filter laden
    Me.cbb_filter.listindex = -1
    
    'Shortname?
    Me.chb_matrix_shortname.value = False
    
    'Hintergrund laden
    Me.cbb_bg_image.listindex = -1
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'X-Achse laden
    'Art laden
    Me.cbb_matrix_x_art.listindex = -1
    Call generate_cbb_x_art_detail
    Me.cbb_matrix_x_art_detail.listindex = -1
    
    
    'Shortname?
    Me.chb_matrix_x_shortname.value = False
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Y-Achse laden
    Me.cbb_matrix_y_art.listindex = -1
    Call generate_cbb_y_art_detail
    Me.cbb_matrix_y_art_detail.listindex = -1

    'Shortname?
    Me.chb_matrix_y_shortname.value = False
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Gr|fffd||fffd|e laden
    Me.cbb_matrix_groese_art.listindex = -1
    Call generate_cbb_groese_art_detail
    Me.cbb_matrix_groese_art_detail.listindex = -1
    
    'Skalierung
    Me.cbb_matrix_groese_skalierung.listindex = -1

    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Farbe laden
    Me.cbb_matrix_farbe_art.listindex = -1
    Call generate_cbb_farbe_art_detail
    Me.cbb_matrix_farbe_art_detail.listindex = -1
    
    
    Me.img_vorschau.Picture = Nothing
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Dim counter As Integer
    
    counter = 5
    
    While calc_pipe_set.Cells(counter, 2).value <> ""
        If calc_pipe_set.Cells(counter, 3).value = Me.cbb_template.text Then
            calc_pipe_set.Range("B4:Q4").Copy
            calc_pipe_set.Range("B" & counter).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        End If
        counter = counter + 1
    Wend
    Application.CutCopyMode = False
End Sub

Private Sub EnableFilters(enable As Boolean)
    If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
        enable = False
    End If
    
    Me.cbb_filter.Enabled = enable
    
    If Not enable Then
        Me.cbb_filter.BackColor = &H8000000F
    Else
        Me.cbb_filter.BackColor = &HFFFFFF
    End If
End Sub

Private Sub EnableFields(enable As Boolean)
    If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
        enable = False
    End If
    
    If tool_art = "Demo" Then
        enable = False
        Me.btn_add_template.Enabled = enable
        Me.btn_del_template.Enabled = enable
    End If
    
    Me.cbb_bg_image.Enabled = enable
    Me.chb_matrix_shortname.Enabled = enable
    Me.cbb_matrix_x_art.Enabled = enable
    Me.cbb_matrix_x_art_detail.Enabled = enable
    Me.chb_matrix_x_shortname.Enabled = enable
    Me.cbb_matrix_y_art.Enabled = enable
    Me.cbb_matrix_y_art_detail.Enabled = enable
    Me.chb_matrix_y_shortname.Enabled = enable
    Me.cbb_matrix_groese_art.Enabled = enable
    Me.cbb_matrix_groese_art_detail.Enabled = enable
    Me.cbb_matrix_groese_skalierung.Enabled = enable
    Me.cbb_matrix_farbe_art.Enabled = enable
    Me.cbb_matrix_farbe_art_detail.Enabled = enable
    
    If Not enable Then
        Me.cbb_bg_image.BackColor = &H8000000F
        Me.chb_matrix_shortname.BackColor = &H8000000F
        Me.cbb_matrix_x_art.BackColor = &H8000000F
        Me.cbb_matrix_x_art_detail.BackColor = &H8000000F
        Me.chb_matrix_x_shortname.BackColor = &H8000000F
        Me.cbb_matrix_y_art.BackColor = &H8000000F
        Me.cbb_matrix_y_art_detail.BackColor = &H8000000F
        Me.chb_matrix_y_shortname.BackColor = &H8000000F
        Me.cbb_matrix_groese_art.BackColor = &H8000000F
        Me.cbb_matrix_groese_art_detail.BackColor = &H8000000F
        Me.cbb_matrix_groese_skalierung.BackColor = &H8000000F
        Me.cbb_matrix_farbe_art.BackColor = &H8000000F
        Me.cbb_matrix_farbe_art_detail.BackColor = &H8000000F
    Else
        Me.cbb_bg_image.BackColor = &HFFFFFF
        Me.chb_matrix_shortname.BackColor = &HFFFFFF
        Me.cbb_matrix_x_art.BackColor = &HFFFFFF
        Me.cbb_matrix_x_art_detail.BackColor = &HFFFFFF
        Me.chb_matrix_x_shortname.BackColor = &HFFFFFF
        Me.cbb_matrix_y_art.BackColor = &HFFFFFF
        Me.cbb_matrix_y_art_detail.BackColor = &HFFFFFF
        Me.chb_matrix_y_shortname.BackColor = &HFFFFFF
        Me.cbb_matrix_groese_art.BackColor = &HFFFFFF
        'Me.cbb_matrix_groese_art_detail.BackColor = &HFFFFFF
        Me.cbb_matrix_groese_skalierung.BackColor = &HFFFFFF
        Me.cbb_matrix_farbe_art.BackColor = &HFFFFFF
        'Me.cbb_matrix_farbe_art_detail.BackColor = &HFFFFFF
        
        If Me.cbb_matrix_groese_art.listindex = 0 Then
            Me.cbb_matrix_groese_art_detail.BackColor = &H8000000F
            Me.cbb_matrix_groese_art_detail.Enabled = False
        Else
            Me.cbb_matrix_groese_art_detail.BackColor = &HFFFFFF
            Me.cbb_matrix_groese_art_detail.Enabled = True
        End If
        
        If Me.cbb_matrix_farbe_art.listindex = 0 Then
            Me.cbb_matrix_farbe_art_detail.BackColor = &H8000000F
            Me.cbb_matrix_farbe_art_detail.Enabled = False
        Else
            Me.cbb_matrix_farbe_art_detail.BackColor = &HFFFFFF
            Me.cbb_matrix_farbe_art_detail.Enabled = True
        End If
    End If
    
End Sub

Private Function checkFields() As Boolean
    Dim check As Boolean
    
    check = False
    
    If Me.cbb_template.listindex <> -1 And _
        Me.cbb_filter.listindex <> -1 And _
        Me.cbb_bg_image.listindex <> -1 And _
        Me.cbb_matrix_x_art.listindex <> -1 And _
        Me.cbb_matrix_x_art_detail.listindex <> -1 And _
        Me.cbb_matrix_y_art.listindex <> -1 And _
        Me.cbb_matrix_y_art_detail.listindex <> -1 And _
        Me.cbb_matrix_groese_art.listindex <> -1 And _
        Me.cbb_matrix_groese_skalierung.listindex <> -1 And _
         Me.cbb_matrix_farbe_art.listindex <> -1 Then
        
        'Variable Felder abfragen
        If Me.cbb_matrix_groese_art.listindex > 0 Then
            If Me.cbb_matrix_groese_art_detail.listindex <> -1 Then
                check = True
            Else
                check = False
            End If
        Else
            check = True
        End If
        
        If Me.cbb_matrix_farbe_art.listindex > 0 Then
            If Me.cbb_matrix_farbe_art_detail.listindex <> -1 Then
                If check Then
                    check = True
                End If
            Else
                check = False
            End If
        Else
            If check Then
                check = True
            End If
        End If
        
        
        If check Then
            checkFields = True
        Else
            checkFields = False
        End If
    Else
        checkFields = False
    End If
End Function
Attribute VB_Name = "frm_set_piechart"
Attribute VB_Base = "0{37F97540-0138-421D-A222-0647D2ECE8D4}{CAE8FD18-F40E-47B6-87EA-DED1379B0916}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private kost(2) As String
Private ress(2) As String
Private cbb_cluster(2, 1) As String
Private click As Boolean
Private original_value As String
Private Stm_select As String
Private Stm_from As String
Private Stm_order As String
Private Stm_group As String

Private Sub btn_add_template_Click()
    If click = False Then
        click = True
        
        Dim InsertColumns As String
        Dim insertValues As String
        
        If calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user" Then
            InsertColumns = "Name, FK_Users"
            insertValues = "New', '" & calc_master.Range("WindowsLogin").value & ""
        Else
            InsertColumns = ""
            insertValues = "New"
        End If
        
        If SQL_Abfragen.Insert_Template(insertValues, "DB_Settings_PieChart", InsertColumns) Then
            Call fill_standardfields
        Else
            MsgBox nlc_language.FindValue("SMessage_ErrAddTemp")
        End If
        
        click = False
    End If
End Sub

Private Sub btn_del_template_Click()
    If Me.lb_templates.listindex = -1 Then Exit Sub
    
    If click = False Then
        click = True
        
        If SQL_Abfragen.Delete_Template(Me.lb_templates.list(Me.lb_templates.listindex, 1), "DB_Settings_PieChart") = True Then
            Call fill_standardfields
            Me.tb_template_name.value = ""
        Else
            MsgBox nlc_language.FindValue("SMessage_ErrDelTemp")
        End If
        
        click = False
    End If
End Sub

Private Sub btn_edit_filter_Click()
    If Me.cbb_filter.listindex <> -1 Then
        calc_master.Range("last_filter_id").value = Me.cbb_filter.list(Me.cbb_filter.listindex, 0)
    End If
        
    frm_set_filter.Show
End Sub

Private Sub cbb_filter_Change()
    If Me.cbb_filter.listindex = -1 Then
        Call EnableFields(False)
        Exit Sub
    End If
    
    Call EnableFields(True)

    If click = False Then
        click = True
        
        If Me.cbb_filter.listindex >= 0 Then
            Call SQL_Abfragen.Update_Settings_Piechart(Me.lbl_pie_id_value.Caption, "FK_Filter", Me.cbb_filter.list(Me.cbb_filter.listindex, 0))
        End If
        
        click = False
    End If
End Sub

Private Sub cbb_pie_math_Change()
    If Me.cbb_pie_math.listindex = -1 Then Exit Sub
    
    If click = False Then
        click = True
        
        Dim counter As Integer
        Dim art As String

        If Me.cbb_pie_math.list(Me.cbb_pie_math.listindex, 1) = "1" Then
        'Summe
            Call SQL_Abfragen.Update_Settings_Piechart(Me.lbl_pie_id_value.Caption, "Math", "1")
        ElseIf Me.cbb_pie_math.list(Me.cbb_pie_math.listindex, 1) = "2" Then
        'Durchschnitt
            Call SQL_Abfragen.Update_Settings_Piechart(Me.lbl_pie_id_value.Caption, "Math", "2")
        ElseIf Me.cbb_pie_math.list(Me.cbb_pie_math.listindex, 1) = "3" Then
        'Minimum
            Call SQL_Abfragen.Update_Settings_Piechart(Me.lbl_pie_id_value.Caption, "Math", "3")
        ElseIf Me.cbb_pie_math.list(Me.cbb_pie_math.listindex, 1) = "4" Then
        'Maximum
            Call SQL_Abfragen.Update_Settings_Piechart(Me.lbl_pie_id_value.Caption, "Math", "4")
        End If
        
        click = False
    End If
End Sub

Private Sub tb_template_name_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False Then
        If original_value <> Me.tb_template_name.text And Me.lb_templates.listindex > -1 Then
            click = True
            
            If VBA.Left(Me.tb_template_name.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
                MsgBox "Der Name des Templates darf nicht mit '" & GlobalIdLeft & "' beginnen."
                Me.tb_template_name.text = get_ValueWithoutGlobal(Me.lb_templates.list(Me.lb_templates.listindex, 0))
                Exit Sub
            End If
            
            Dim TBValue As String
            
            TBValue = Me.tb_template_name.text
            
            Call SQL_Abfragen.Update_Settings_Piechart(Me.lb_templates.list(Me.lb_templates.listindex, 1), "Name", TBValue)
            Call fill_standardfields
            
            If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") Then
                Me.lb_templates.text = TBValue
                Me.cbb_template.text = TBValue
            Else
                Me.lb_templates.text = GlobalIdLeft & TBValue & GlobalIdRight
                Me.cbb_template.text = GlobalIdLeft & TBValue & GlobalIdRight
            End If
            
            click = False
        End If
    End If
End Sub

Private Sub UserForm_Initialize()
    click = True
    
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    
    kost(0) = Me.cbb_pie_value_detail.list(0, 0)
    kost(1) = Me.cbb_pie_value_detail.list(1, 0)
    kost(2) = Me.cbb_pie_value_detail.list(2, 0)
    ress(0) = Me.cbb_pie_value_detail.list(3, 0)
    ress(1) = Me.cbb_pie_value_detail.list(4, 0)
    ress(2) = Me.cbb_pie_value_detail.list(5, 0)
    
    
    cbb_cluster(0, 0) = Me.cbb_pie_cluster.list(0, 0)
    cbb_cluster(0, 1) = "1"
    cbb_cluster(1, 0) = Me.cbb_pie_cluster.list(1, 0)
    cbb_cluster(1, 1) = "2"
    cbb_cluster(2, 0) = Me.cbb_pie_cluster.list(2, 0)
    cbb_cluster(2, 1) = "3"
    
    Call SQL_Abfragen.Get_AllKategorien
    Call SQL_Abfragen.Get_AllFilter
    Call fill_standardfields
    Me.cbb_filter.RowSource = "frm_Filter"
    
    click = True
    
    If Me.cbb_template.listindex <> -1 And Me.cbb_filter.listindex <> -1 Then
        Call EnableFields(True)
    Else
        Call EnableFields(False)
    End If
    
    Call clear_content
    Call load_content
    
    click = False
End Sub

Private Sub generate_cbb_pie_value()
    Me.cbb_pie_value.list(0, 1) = "1"
    Me.cbb_pie_value.list(1, 1) = "2"
    Me.cbb_pie_value.list(2, 1) = "3"
    Me.cbb_pie_value.list(3, 1) = "4"
End Sub

Private Sub generate_cbb_pie_value_detail()
    Call ValueEnabled(True)
        
    Me.cbb_pie_value_detail.clear
    
    Dim counter As Integer
    Dim art As String
    Dim achsen As Boolean
    
    'Call ValueEnabled(True)
    
    If Me.cbb_pie_value.list(Me.cbb_pie_value.listindex, 1) = "1" Then
    'Benutzerdefinierte Felder
        For counter = 1 To calc_frm_masterdata.Range("frm_Kategorie").Rows.count Step 1
            art = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
            achsen = nlc_intern.get_true_false(calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 9).value)
            If art = "Number" And achsen = True Then
                Me.cbb_pie_value_detail.addItem calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 1).value
                Me.cbb_pie_value_detail.list(Me.cbb_pie_value_detail.listCount - 1, 1) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 3).value
                Me.cbb_pie_value_detail.list(Me.cbb_pie_value_detail.listCount - 1, 2) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
            End If
        Next counter
        
        'Me.cbb_pie_value_detail.Enabled = True
        
        Call generate_cbb_pie_cluster(False)
    ElseIf Me.cbb_pie_value.list(Me.cbb_pie_value.listindex, 1) = "2" Then
    'Kosten
        'calc_pipe_set.Cells(4, 6).value = "Kosten"
        Me.cbb_pie_value_detail.addItem
        Me.cbb_pie_value_detail.list(Me.cbb_pie_value_detail.listCount - 1, 1) = kost(0)
        Me.cbb_pie_value_detail.addItem
        Me.cbb_pie_value_detail.list(Me.cbb_pie_value_detail.listCount - 1, 1) = kost(1)
        Me.cbb_pie_value_detail.addItem
        Me.cbb_pie_value_detail.list(Me.cbb_pie_value_detail.listCount - 1, 1) = kost(2)
        
        Call generate_cbb_pie_cluster(True)
        
        'Me.cbb_pie_value_detail.Enabled = True
    ElseIf Me.cbb_pie_value.list(Me.cbb_pie_value.listindex, 1) = "3" Then
    'Ressourcen
        'calc_pipe_set.Cells(4, 6).value = "Ressourcen"
        Me.cbb_pie_value_detail.addItem
        Me.cbb_pie_value_detail.list(Me.cbb_pie_value_detail.listCount - 1, 1) = ress(0)
        Me.cbb_pie_value_detail.addItem
        Me.cbb_pie_value_detail.list(Me.cbb_pie_value_detail.listCount - 1, 1) = ress(1)
        Me.cbb_pie_value_detail.addItem
        Me.cbb_pie_value_detail.list(Me.cbb_pie_value_detail.listCount - 1, 1) = ress(2)
        
        Call generate_cbb_pie_cluster(True)
        
        'Me.cbb_pie_value_detail.Enabled = True
    ElseIf Me.cbb_pie_value.list(Me.cbb_pie_value.listindex, 1) = "4" Then
    'Anzahl der Projekte
        Call ValueEnabled(False)
        
        Call generate_cbb_pie_cluster(False)
    End If
    
    Me.cbb_pie_math.listindex = -1
End Sub

Private Sub generate_cbb_pie_cluster(AddItemAll As Boolean)
    Dim SelectedItem As String
    
    If Not VBA.IsNull(Me.cbb_pie_cluster.value) Then
        SelectedItem = Me.cbb_pie_cluster.value
    End If
    
    Me.cbb_pie_cluster.clear
    
    If AddItemAll = False Then
        Me.cbb_pie_cluster.addItem cbb_cluster(0, 0)
        Me.cbb_pie_cluster.list(cbb_pie_cluster.listCount - 1, 1) = cbb_cluster(0, 1)
    Else
        Me.cbb_pie_cluster.addItem cbb_cluster(0, 0)
        Me.cbb_pie_cluster.list(cbb_pie_cluster.listCount - 1, 1) = cbb_cluster(0, 1)
        Me.cbb_pie_cluster.addItem cbb_cluster(1, 0)
        Me.cbb_pie_cluster.list(cbb_pie_cluster.listCount - 1, 1) = cbb_cluster(1, 1)
        Me.cbb_pie_cluster.addItem cbb_cluster(2, 0)
        Me.cbb_pie_cluster.list(cbb_pie_cluster.listCount - 1, 1) = cbb_cluster(2, 1)
    End If
    
    On Error Resume Next
    Me.cbb_pie_cluster.value = SelectedItem
End Sub

Private Sub generate_cbb_pie_cluster_detail()
    Dim counter As Integer
    Dim art As String

    Me.cbb_pie_cluster_detail.clear
    
    If Me.cbb_pie_cluster.list(Me.cbb_pie_cluster.listindex, 1) = "1" Then
    'Benutzerdefinierte Felder
        If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
            Me.cbb_pie_cluster_detail.Enabled = False
            Me.cbb_pie_cluster_detail.BackColor = &H8000000F
        Else
            Me.cbb_pie_cluster_detail.Enabled = True
            Me.cbb_pie_cluster_detail.BackColor = &HFFFFFF
        End If
        
        For counter = 1 To calc_frm_masterdata.Range("frm_Kategorie").Rows.count Step 1
            art = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
            If art = "DropDown" Or art = "True/False" Then
                Me.cbb_pie_cluster_detail.addItem calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 1).value
                Me.cbb_pie_cluster_detail.list(Me.cbb_pie_cluster_detail.listCount - 1, 1) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 3).value
                Me.cbb_pie_cluster_detail.list(Me.cbb_pie_cluster_detail.listCount - 1, 2) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
            End If
        Next counter
    ElseIf Me.cbb_pie_cluster.list(Me.cbb_pie_cluster.listindex, 1) = "2" Then
    'Kosten
        Me.cbb_pie_cluster_detail.Enabled = False
        Me.cbb_pie_cluster_detail.BackColor = &H8000000F
    ElseIf Me.cbb_pie_cluster.list(Me.cbb_pie_cluster.listindex, 1) = "3" Then
    'Ressourcen
        Me.cbb_pie_cluster_detail.Enabled = False
        Me.cbb_pie_cluster_detail.BackColor = &H8000000F
    End If
End Sub

Private Sub generate_cbb_pie_math()
    Me.cbb_pie_math.list(0, 1) = "1"
    Me.cbb_pie_math.list(1, 1) = "2"
    Me.cbb_pie_math.list(2, 1) = "3"
    Me.cbb_pie_math.list(3, 1) = "4"
End Sub

Private Sub load_content()
    If Not VBA.IsNumeric(calc_master.Range("last_pie_ID").value) Then Exit Sub
    On Error Resume Next

    Dim counter As Integer
    Dim art As String
    Dim Math As String
    Dim value_detail As String
    Dim cluster_detail As String
    Dim filter As String
    
    'Templatetitel laden
    Me.cbb_template.text = SQL_Abfragen.Get_Setting_PieChart_Value(calc_master.Range("last_pie_ID").value, "Name") 'calc_pipe_set.Cells(4, 3).value
    Me.lbl_pie_id_value.Caption = Me.cbb_template.list(Me.cbb_template.listindex, 1)
    If Not VBA.IsNumeric(Me.lbl_pie_id_value.Caption) Then Exit Sub
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Allgemein laden
    'Filter laden
    
    filter = SQL_Abfragen.Get_Setting_PieChart_Value(calc_master.Range("last_pie_ID").value, "FK_Filter")
    
    If filter <> "" Then
        For counter = 0 To Me.cbb_filter.listCount - 1
            If Me.cbb_filter.list(counter, 0) = filter Then
                Me.cbb_filter.listindex = counter
                Exit For
            End If
        Next counter
    Else
        EnableFields (False)
    End If
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Wert-Felder laden
    art = SQL_Abfragen.Get_Setting_PieChart_Value(Me.lbl_pie_id_value.Caption, "Value_Art")
    Math = SQL_Abfragen.Get_Setting_PieChart_Value(Me.lbl_pie_id_value.Caption, "Math")
    
    If art = "Ressourcen" Then
        value_detail = nlc_intern.ConvertColHeaderToValue(SQL_Abfragen.Get_Setting_PieChart_Value(Me.lbl_pie_id_value.Caption, "Value_ID_Value"), True)
    Else
        value_detail = nlc_intern.ConvertColHeaderToValue(SQL_Abfragen.Get_Setting_PieChart_Value(Me.lbl_pie_id_value.Caption, "Value_ID_Value"), False)
    End If
    
    Me.cbb_pie_value.text = art
    
    If art = "Ressourcen" Or art = "Kosten" Then
        Call generate_cbb_pie_value_detail
        Me.cbb_pie_value_detail.text = value_detail
    ElseIf art = "Anzahl" Then
        For counter = 0 To Me.cbb_pie_value.listCount - 1
            If Me.cbb_pie_value.list(counter, 1) = "4" Then
                Me.cbb_pie_value.listindex = counter
                Exit For
            End If
        Next counter
        Call generate_cbb_pie_value_detail
    ElseIf art = "" Then
    
    Else
        For counter = 0 To Me.cbb_pie_value.listCount - 1
            If Me.cbb_pie_value.list(counter, 1) = "1" Then
                Me.cbb_pie_value.listindex = counter
                Exit For
            End If
        Next counter
        Call generate_cbb_pie_value_detail
        For counter = 0 To Me.cbb_pie_value_detail.listCount - 1 Step 1
            If Me.cbb_pie_value_detail.list(counter, 0) = value_detail Then
                Me.cbb_pie_value_detail.text = Me.cbb_pie_value_detail.list(counter, 1)
                Exit For
            End If
        Next counter
    End If
    
    If art <> "Anzahl" Then
        For counter = 0 To Me.cbb_pie_math.listCount - 1
            If Me.cbb_pie_math.list(counter, 1) = Math Then
                Me.cbb_pie_math.listindex = counter
                Exit For
            End If
        Next counter
    End If
    
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Cluster-Felder laden
    art = SQL_Abfragen.Get_Setting_PieChart_Value(Me.lbl_pie_id_value.Caption, "Cluster_Art")
    If art = "Ressourcen" Then
        cluster_detail = nlc_intern.ConvertColHeaderToValue(SQL_Abfragen.Get_Setting_PieChart_Value(Me.lbl_pie_id_value.Caption, "Cluster_ID_Value"), True)
    Else
        cluster_detail = nlc_intern.ConvertColHeaderToValue(SQL_Abfragen.Get_Setting_PieChart_Value(Me.lbl_pie_id_value.Caption, "Cluster_ID_Value"), False)
    End If
    
    Me.cbb_pie_cluster.text = art
    
    If art = "Ressourcen" Or art = "Kosten" Then
        Call generate_cbb_pie_cluster_detail
        Me.cbb_pie_cluster_detail.text = cluster_detail
    ElseIf art = "" Then
    
    Else
        For counter = 0 To Me.cbb_pie_cluster.listCount - 1
            If Me.cbb_pie_cluster.list(counter, 1) = "1" Then
                Me.cbb_pie_cluster.listindex = counter
            End If
        Next counter
        Call generate_cbb_pie_cluster_detail
        For counter = 0 To Me.cbb_pie_cluster_detail.listCount - 1 Step 1
            If Me.cbb_pie_cluster_detail.list(counter, 0) = cluster_detail Then
                Me.cbb_pie_cluster_detail.text = Me.cbb_pie_cluster_detail.list(counter, 1)
            End If
        Next counter
    End If

    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Datenreihenbeschriftung laden
    Me.cbb_pie_dataarea_description.text = SQL_Abfragen.Get_Setting_PieChart_Value(Me.lbl_pie_id_value.Caption, "FK_Language_AreaDescr")
    
    click = False
End Sub

Private Sub clear_content()
    'Comboboxen komplett laden
    'cbb Value
    Call generate_cbb_pie_value
    'cbb_math
    Call generate_cbb_pie_math
    'cbb Cluster
    Call generate_cbb_pie_cluster(True)
    
    On Error Resume Next
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Allgemein laden
    'Filter laden
    Me.cbb_filter.listindex = -1
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Wert-Felder laden
    Me.cbb_pie_value.listindex = -1
    Call generate_cbb_pie_value_detail
    
    Me.cbb_pie_value_detail.listindex = -1

    Me.cbb_pie_math.listindex = -1
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Cluster-Felder laden
    Me.cbb_pie_cluster.listindex = -1
    Call generate_cbb_pie_cluster_detail
    
    Me.cbb_pie_cluster_detail.listindex = -1

    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Datenreihenbeschriftung laden
    Me.cbb_pie_dataarea_description.listindex = -1
End Sub

Private Sub fill_standardfields()
    Dim i As Integer
    Dim SelectedItem As String
    'Templates laden (in DropDown und Listbox)
    Dim Template() As String
    
    Template = SQL_Abfragen.Get_Settings_dropdown("DB_Settings_PieChart")
    
    If Not VBA.IsNull(Me.cbb_template.value) Then
        SelectedItem = Me.cbb_template.value
    End If
    
    Me.cbb_template.clear
    Me.lb_templates.clear
    
    If Template(0, 0) <> "leer" Then
        For i = 0 To UBound(Template) Step 1
            Me.cbb_template.addItem (Template(i, 0))
            Me.cbb_template.list(Me.cbb_template.listCount - 1, 1) = (Template(i, 1))
            Me.lb_templates.addItem (Template(i, 0))
            Me.lb_templates.list(Me.lb_templates.listCount - 1, 1) = (Template(i, 1))
        Next i
    End If
    
    On Error Resume Next
    Me.cbb_template.value = SelectedItem
    'Filter bef|fffd|llen
    'geht noch nicht, da die Filtertabelle fehlt und demnach die ID nicht mit dem Name aufgel|fffd|st werden kann
End Sub

Private Sub btn_generate_Click()
    If Me.cbb_filter.listindex < 0 Then
        MsgBox nlc_language.FindValue("SMessage_SelFilter")
        Exit Sub
    End If
    
    If Not checkFields Then
        MsgBox "Es m|fffd|ssen alle Felder ausgew|fffd|hlt werden. Bitte |fffd|berpr|fffd|fen Sie Ihre Eingabe.", vbInformation + vbOKOnly
        Exit Sub
    End If
    
    nlc_intern.Application_off
    nlc_ppf_pie.Unprotect nlc_intern.get_pw
    
    calc_master.Range("last_pie_ID").value = Me.cbb_template.list(Me.cbb_template.listindex, 1)
    
    Dim einheit As String
    
    If Me.cbb_pie_value.listindex = 0 Then
        einheit = SQL_Abfragen.getKatEinheit(Me.cbb_pie_value_detail.list(Me.cbb_pie_value_detail.listindex, 0))
    ElseIf Me.cbb_pie_value.listindex = 1 Then
        'Wenn Kosten
        einheit = Application.WorksheetFunction.VLookup(calc_master.Range("Cost_Einheit").value, calc_frm_masterdata.Range("frm_Einheit"), 2, False)
    ElseIf Me.cbb_pie_value.listindex = 2 Then
        'Wenn Ressourcen
        einheit = Application.WorksheetFunction.VLookup(calc_master.Range("Ress_Einheit").value, calc_frm_masterdata.Range("frm_Einheit"), 2, False)
    End If
    
    'Daten in Chart schreiben
    nlc_ppf_pie.Activate
    If Me.cbb_pie_value.listindex = 0 Or Me.cbb_pie_value_detail.text <> "" Then
        If einheit <> "" Then
            nlc_ppf_pie.Range("PieValueHeader").Cells(1, 1).FormulaR1C1 = "=VLOOKUP(""SValue_values"",LanguageMatrix,LangCol,FALSE) & "" (in " & einheit & ")"""
            nlc_ppf_pie.Range("Pie_Werte").value = Me.cbb_pie_value.text & " - " & Me.cbb_pie_value_detail.text
        Else
            nlc_ppf_pie.Range("PieValueHeader").Cells(1, 1).FormulaR1C1 = "=VLOOKUP(""SValue_values"",LanguageMatrix,LangCol,FALSE)"
            nlc_ppf_pie.Range("Pie_Werte").value = Me.cbb_pie_value.text
        End If
    Else
        nlc_ppf_pie.Range("PieValueHeader").Cells(1, 1).FormulaR1C1 = "=VLOOKUP(""SValue_values"",LanguageMatrix,LangCol,FALSE)"
        nlc_ppf_pie.Range("Pie_Werte").value = Me.cbb_pie_value.text
    End If
    
    If Me.cbb_pie_cluster.listindex = 0 Then
        nlc_ppf_pie.Range("Pie_Cluster").value = Me.cbb_pie_cluster_detail.text
    Else
        nlc_ppf_pie.Range("Pie_Cluster").value = Me.cbb_pie_cluster.text
    End If
    
    Call nlc_piechart.generate_piechart
    calc_master.Range("Filter_Pie").value = Me.cbb_filter.text
    
    Unload Me
    
    nlc_ppf_pie.Protect nlc_intern.get_pw
    nlc_intern.Application_on
End Sub

Private Sub cbb_pie_dataarea_description_Change()
    If Me.cbb_pie_dataarea_description.listindex = -1 Then Exit Sub
    
    If click = False Then
        click = True
        
        Call SQL_Abfragen.Update_Settings_Piechart(Me.lbl_pie_id_value.Caption, "FK_Language_AreaDescr", "cbb_pie_dataarea_description_0" & Me.cbb_pie_dataarea_description.listindex + 1)
        
        click = False
    End If
End Sub

Private Sub cbb_template_Change()
    If Me.cbb_template.listindex = -1 Then
        click = True
        
        Call clear_content
        Call EnableFilters(False)
        Call EnableFields(False)
            
        click = False
        Exit Sub
    End If
    
    Call EnableFilters(True)
    
    If click = False Then
        click = True
        
        Me.lbl_pie_id_value.Caption = Me.cbb_template.list(Me.cbb_template.listindex, 1)
        calc_master.Range("last_pie_ID").value = Me.cbb_template.list(Me.cbb_template.listindex, 1)
        Call clear_content
        Call load_content
        
        click = False
    End If
End Sub

Private Sub lb_templates_Click()
    If click = False Then
        click = True
        
        If tool_art = "Demo" Or ((calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.lb_templates.list(Me.lb_templates.listindex, 0), VBA.Len(GlobalIdLeft)) = GlobalIdLeft) Then
            Me.tb_template_name.Enabled = False
            Me.tb_template_name.BackColor = &H8000000F
            Me.btn_del_template.Enabled = False
        Else
            
            Me.tb_template_name.Enabled = True
            Me.tb_template_name.BackColor = &HFFFFFF
            Me.btn_del_template.Enabled = True
        End If
        
        Me.tb_template_name.text = get_ValueWithoutGlobal(Me.lb_templates.list(Me.lb_templates.listindex, 0))
        
'        If tool_art = "Demo" Then
'
'        End If
        click = False
    End If
End Sub

Private Sub tb_template_name_Enter()
    If Me.lb_templates.listindex = -1 Then Me.tb_template_name.text = ""
    original_value = Me.tb_template_name.text
End Sub

Private Sub tb_template_name_Exit(ByVal Cancel As MSForms.ReturnBoolean)
'    If click = False Then
'        If original_value <> Me.tb_template_name.text And Me.lb_templates.listindex > -1 Then
'            click = True
'
'            Dim templateSelection As Integer
'            templateSelection = Me.cbb_template.listindex
'
'            Call SQL_Abfragen.Update_Settings_Piechart(Me.lb_templates.List(Me.lb_templates.listindex, 1), "Name", Me.tb_template_name.text)
'            Call fill_standardfields
'
'            Me.cbb_template.listindex = templateSelection
'
'            click = False
'        End If
'    End If
End Sub

Private Sub cbb_pie_cluster_Change()
    If Me.cbb_pie_cluster.listindex = -1 Then Exit Sub
    'Benutzerdefinierte Felder m|fffd|ssen begrenzt werden
    'Zur Auswahl stehen: DropDown, True/False, Ressourcen, Kosten
    'Ressourcen und Kosten werden mit Basis, Ist und Aktuell bef|fffd|llt
    If click = False Then
        click = True
        
        Call EnableFields(True)
        
        Call generate_cbb_pie_cluster_detail
        
        If Me.cbb_pie_cluster.list(Me.cbb_pie_cluster.listindex, 1) = "1" Then
        'Benutzerdefinierte Felder
        ElseIf Me.cbb_pie_cluster.list(Me.cbb_pie_cluster.listindex, 1) = "2" Then
        'Kosten
            Call SQL_Abfragen.Update_Settings_Piechart(Me.lbl_pie_id_value.Caption, "Cluster_Art", "Kosten")
            Call SQL_Abfragen.Update_Settings_Piechart(Me.lbl_pie_id_value.Caption, "Cluster_ID_Value", "0")
        ElseIf Me.cbb_pie_cluster.list(Me.cbb_pie_cluster.listindex, 1) = "3" Then
        'Ressourcen
            Call SQL_Abfragen.Update_Settings_Piechart(Me.lbl_pie_id_value.Caption, "Cluster_Art", "Ressourcen")
            Call SQL_Abfragen.Update_Settings_Piechart(Me.lbl_pie_id_value.Caption, "Cluster_ID_Value", "0")
        End If
        
        click = False
    End If
End Sub

Private Sub cbb_pie_cluster_detail_Change()
    If Me.cbb_pie_cluster_detail.listindex = -1 Then Exit Sub

    If click = False Then
        click = True
        
        If Me.cbb_pie_cluster_detail.list(Me.cbb_pie_cluster_detail.listindex, 0) <> "" Then
            Call SQL_Abfragen.Update_Settings_Piechart(Me.lbl_pie_id_value.Caption, "Cluster_Art", Me.cbb_pie_cluster_detail.list(Me.cbb_pie_cluster_detail.listindex, 2))
            Call SQL_Abfragen.Update_Settings_Piechart(Me.lbl_pie_id_value.Caption, "Cluster_ID_Value", Me.cbb_pie_cluster_detail.list(Me.cbb_pie_cluster_detail.listindex, 0))
        Else
            Call SQL_Abfragen.Update_Settings_Piechart(Me.lbl_pie_id_value.Caption, "Cluster_ID_Value", nlc_intern.ConvertValueToColHeader(Me.cbb_pie_cluster_detail.list(Me.cbb_pie_cluster_detail.listindex, 1)))
        End If
        
        click = False
    End If
End Sub

Private Sub cbb_pie_value_Change()
    If Me.cbb_pie_value.listindex = -1 Then Exit Sub
    
    If click = False Then
        click = True

        If Me.cbb_pie_value.list(Me.cbb_pie_value.listindex, 1) = "1" Then
        'Benutzerdefinierte Felder

        ElseIf Me.cbb_pie_value.list(Me.cbb_pie_value.listindex, 1) = "2" Then
        'Kosten
            Call SQL_Abfragen.Update_Settings_Piechart(Me.lbl_pie_id_value.Caption, "Value_Art", "Kosten")
        ElseIf Me.cbb_pie_value.list(Me.cbb_pie_value.listindex, 1) = "3" Then
        'Ressourcen
            Call SQL_Abfragen.Update_Settings_Piechart(Me.lbl_pie_id_value.Caption, "Value_Art", "Ressourcen")
        ElseIf Me.cbb_pie_value.list(Me.cbb_pie_value.listindex, 1) = "4" Then
        'Anzahl der Projekte
            Call SQL_Abfragen.Update_Settings_Piechart(Me.lbl_pie_id_value.Caption, "Value_Art", "Anzahl")
        End If
        
        Call generate_cbb_pie_value_detail
        
        click = False
    End If
End Sub

Private Sub ValueEnabled(enable As Boolean)
    If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
        enable = False
    End If

    If enable Then
        Me.cbb_pie_value_detail.Enabled = enable
        Me.cbb_pie_value_detail.BackColor = &HFFFFFF
        Me.cbb_pie_math.Enabled = enable
        Me.cbb_pie_math.BackColor = &HFFFFFF
    Else
        Me.cbb_pie_value_detail.listindex = -1
        Me.cbb_pie_value_detail.Enabled = enable
        Me.cbb_pie_value_detail.BackColor = &H8000000F
        If Me.cbb_pie_value.list(Me.cbb_pie_value.listindex, 1) = "4" Then
            Call SQL_Abfragen.Update_Settings_Piechart(Me.lbl_pie_id_value.Caption, "Value_ID_Value", "")
        End If
        
        Me.cbb_pie_math.listindex = -1
        Me.cbb_pie_math.Enabled = enable
        Me.cbb_pie_math.BackColor = &H8000000F
        If Me.cbb_pie_cluster.listindex >= 0 Then
            If Me.cbb_pie_cluster.list(Me.cbb_pie_cluster.listindex, 1) <> "1" Then
                Call SQL_Abfragen.Update_Settings_Piechart(Me.lbl_pie_id_value.Caption, "Cluster_ID_Value", 0)
            End If
        End If
    End If
End Sub

Private Sub cbb_pie_value_detail_Change()
    If click = False Then
        click = True
    
        If Me.cbb_pie_value_detail.listindex >= 0 Then
            If Me.cbb_pie_value_detail.list(Me.cbb_pie_value_detail.listindex, 0) <> "" Then
                Call SQL_Abfragen.Update_Settings_Piechart(Me.lbl_pie_id_value.Caption, "Value_Art", Me.cbb_pie_value_detail.list(Me.cbb_pie_value_detail.listindex, 2))
                Call SQL_Abfragen.Update_Settings_Piechart(Me.lbl_pie_id_value.Caption, "Value_ID_Value", Me.cbb_pie_value_detail.list(Me.cbb_pie_value_detail.listindex, 0))
            Else
                Call SQL_Abfragen.Update_Settings_Piechart(Me.lbl_pie_id_value.Caption, "Value_ID_Value", nlc_intern.ConvertValueToColHeader(Me.cbb_pie_value_detail.list(Me.cbb_pie_value_detail.listindex, 1)))
            End If
        End If
        
        click = False
    End If
End Sub

Private Sub EnableFilters(enable As Boolean)
    If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
        enable = False
    End If
    
    Me.cbb_filter.Enabled = enable
    
    If Not enable Then
        Me.cbb_filter.BackColor = &H8000000F
    Else
        Me.cbb_filter.BackColor = &HFFFFFF
    End If
End Sub

Private Sub EnableFields(enable As Boolean)
    If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
        enable = False
    End If
    
    If tool_art = "Demo" Then
        enable = False
        Me.btn_add_template.Enabled = enable
        Me.btn_del_template.Enabled = enable
    End If
    
    Me.cbb_pie_cluster.Enabled = enable
    Me.cbb_pie_cluster_detail.Enabled = enable
    Me.cbb_pie_dataarea_description.Enabled = enable
    Me.cbb_pie_math.Enabled = enable
    Me.cbb_pie_value.Enabled = enable
    Me.cbb_pie_value_detail.Enabled = enable
    
    If Not enable Then
        Me.cbb_pie_cluster.BackColor = &H8000000F
        Me.cbb_pie_cluster_detail.BackColor = &H8000000F
        Me.cbb_pie_dataarea_description.BackColor = &H8000000F
        Me.cbb_pie_math.BackColor = &H8000000F
        Me.cbb_pie_value.BackColor = &H8000000F
        Me.cbb_pie_value_detail.BackColor = &H8000000F
    Else
        Me.cbb_pie_cluster.BackColor = &HFFFFFF
        Me.cbb_pie_cluster_detail.BackColor = &HFFFFFF
        Me.cbb_pie_dataarea_description.BackColor = &HFFFFFF
        Me.cbb_pie_math.BackColor = &HFFFFFF
        Me.cbb_pie_value.BackColor = &HFFFFFF
        Me.cbb_pie_value_detail.BackColor = &HFFFFFF
        
        If Me.cbb_pie_value.listindex = 3 Then
            Me.cbb_pie_value_detail.BackColor = &H8000000F
            Me.cbb_pie_value_detail.Enabled = False
            Me.cbb_pie_math.BackColor = &H8000000F
            Me.cbb_pie_math.Enabled = False
        Else
            Me.cbb_pie_value_detail.BackColor = &HFFFFFF
            Me.cbb_pie_value_detail.Enabled = True
            Me.cbb_pie_math.BackColor = &HFFFFFF
            Me.cbb_pie_math.Enabled = True
        End If
        
        If Me.cbb_pie_value.listindex = 3 Then
            Me.cbb_pie_value_detail.BackColor = &H8000000F
            Me.cbb_pie_value_detail.Enabled = False
            Me.cbb_pie_math.BackColor = &H8000000F
            Me.cbb_pie_math.Enabled = False
        Else
            Me.cbb_pie_value_detail.BackColor = &HFFFFFF
            Me.cbb_pie_value_detail.Enabled = True
            Me.cbb_pie_math.BackColor = &HFFFFFF
            Me.cbb_pie_math.Enabled = True
        End If
        
        If Me.cbb_pie_cluster.listindex <> -1 Then
            If Me.cbb_pie_cluster.list(Me.cbb_pie_cluster.listindex, 1) <> "1" Then
                If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
                    Me.cbb_pie_cluster_detail.BackColor = &H8000000F
                    Me.cbb_pie_cluster_detail.Enabled = False
                Else
                    Me.cbb_pie_cluster_detail.BackColor = &HFFFFFF
                Me.cbb_pie_cluster_detail.Enabled = True
                End If
            Else
                Me.cbb_pie_cluster_detail.BackColor = &HFFFFFF
                Me.cbb_pie_cluster_detail.Enabled = True
            End If
        End If
    End If
End Sub

Private Function checkFields() As Boolean
    Dim check As Boolean
    
    check = False
    
    If Me.cbb_template.listindex <> -1 And _
        Me.cbb_filter.listindex <> -1 And _
        Me.cbb_pie_cluster.listindex <> -1 And _
        Me.cbb_pie_dataarea_description.listindex <> -1 Then
        
        'Variable Felder abfragen
        If Me.cbb_pie_value.listindex <> 3 Then
            If Me.cbb_pie_value_detail.listindex <> -1 Then
                check = True
            Else
                check = False
            End If
            If Me.cbb_pie_math.listindex <> -1 Then
                check = True
            Else
                check = False
            End If
        Else
            check = True
        End If
        
        If Me.cbb_pie_cluster.list(Me.cbb_pie_cluster.listindex, 1) = "1" Then
            If Me.cbb_pie_cluster_detail.listindex <> -1 Then
                If check Then
                    check = True
                Else
                    check = False
                End If
            Else
                check = False
            End If
        Else
            check = True
        End If
        
        If check Then
            checkFields = True
        Else
            checkFields = False
        End If
    Else
        checkFields = False
    End If
End Function

Attribute VB_Name = "frm_set_pipeline"
Attribute VB_Base = "0{7F5B9261-8154-42AF-8BBF-7315B2487AC4}{6C9FDF50-321B-4A88-92C1-F72324F0A693}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Private kost(2) As String
Private ress(2) As String
Private cbb_art_values(3, 1) As String
Private click As Boolean
Dim original_value As String

Private Sub btn_add_template_Click()
    If click = False Then
        click = True
        
        Dim InsertColumns As String
        Dim insertValues As String
        
        If calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user" Then
            InsertColumns = "Name, FK_Users"
            insertValues = "New', '" & calc_master.Range("WindowsLogin").value & ""
        Else
            InsertColumns = ""
            insertValues = "New"
        End If
        
        If SQL_Abfragen.Insert_Template(insertValues, "DB_Settings_Pipeline", InsertColumns) Then
            Call fill_standardfields
        Else
            MsgBox nlc_language.FindValue("SMessage_ErrAddTemp")
        End If
        
        click = False
    End If
End Sub

Private Sub btn_del_template_Click()
    If Me.lb_templates.listindex = -1 Then Exit Sub
    
    If click = False Then
        click = True
        
        If SQL_Abfragen.Delete_Template(Me.lb_templates.list(Me.lb_templates.listindex, 1), "DB_Settings_Pipeline") = True Then
            Call fill_standardfields
            Me.tb_template_name.text = ""
        Else
            MsgBox nlc_language.FindValue("SMessage_ErrDelTemp")
        End If
        
        click = False
    End If
End Sub

Private Sub btn_edit_bg_image_Click()
    If click = False Then
        click = True

        Dim listindex As Integer
        
        frm_MasterData.TabPage.Pages(0).visible = False
        frm_MasterData.TabPage.Pages(1).visible = False
        frm_MasterData.TabPage.Pages(2).visible = False
        frm_MasterData.TabPage.Pages(3).visible = False
        frm_MasterData.TabPage.Pages(5).visible = False
        frm_MasterData.TabPage.Pages(6).visible = False
        
        listindex = Me.cbb_bg_image.listindex
        frm_MasterData.TabPage.value = frm_MasterData.TabPage.Pages.count - 1
        frm_MasterData.cbb_grafiken.text = Me.cbb_bg_image.text
        frm_MasterData.Show
        'Me.cbb_bg_image.listindex = -1
        Call load_BackGround
        
        Me.cbb_bg_image.listindex = listindex
        Call show_BG_Image
        
        click = False
    End If
End Sub

Private Sub btn_edit_filter_Click()
    'Filter ID schreiben
    If Me.cbb_filter.listindex <> -1 Then
        calc_master.Range("last_filter_id").value = Me.cbb_filter.list(Me.cbb_filter.listindex, 0)
    End If
    
    frm_set_filter.Show
End Sub

Private Sub btn_generate_Click()
    If Me.cbb_filter.listindex < 0 Then
        MsgBox nlc_language.FindValue("SMessage_SelFilter")
        Exit Sub
    End If
    
    If Not checkFields Then
        MsgBox "Es m|fffd|ssen alle Felder ausgew|fffd|hlt werden. Bitte |fffd|berpr|fffd|fen Sie Ihre Eingabe.", vbInformation + vbOKOnly
        Exit Sub
    End If
    calc_master.Range("Filter_Pipe").value = Me.cbb_filter.text
    
    Unload Me
    nlc_ppf_pipe.Activate
    Call nlc_pipeline.generate_portfolio
End Sub

Private Sub cbb_bg_image_Change()
    If Me.cbb_bg_image.listindex = -1 Then Exit Sub
        
    If Me.cbb_bg_image.listindex = 0 Then
        Me.btn_edit_bg_image.Enabled = False
    Else
        Me.btn_edit_bg_image.Enabled = True
    End If
        
    If click = False Then
        click = True
        
        Call show_BG_Image
        
        'Wert speichern
        Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "Background", VBA.CStr(Me.cbb_bg_image.listindex))
        
        click = False
    End If
End Sub

Private Sub show_BG_Image()
    On Error Resume Next
    If Me.cbb_bg_image.listindex = -1 Then Exit Sub
    
'    Select Case Me.cbb_bg_image.listindex
'        Case 0:
'            img_vorschau.Picture = Nothing
'        Case 1:
'            img_vorschau.Picture = calc_master.btn_grafik_1.Picture
'        Case 2:
'            img_vorschau.Picture = calc_master.btn_grafik_2.Picture
'        Case 3:
'            img_vorschau.Picture = calc_master.btn_grafik_3.Picture
'        Case 4:
'            img_vorschau.Picture = calc_master.btn_grafik_4.Picture
'        Case 5:
'            img_vorschau.Picture = calc_master.btn_grafik_5.Picture
'        Case 6:
'            img_vorschau.Picture = calc_master.btn_grafik_6.Picture
'        Case 7:
'            img_vorschau.Picture = calc_master.btn_grafik_7.Picture
'        Case 8:
'            img_vorschau.Picture = calc_master.btn_grafik_8.Picture
'        Case 9:
'            img_vorschau.Picture = calc_master.btn_grafik_9.Picture
'        Case 10:
'            img_vorschau.Picture = calc_master.btn_grafik_10.Picture
'    End Select
    
    If VBA.IsNumeric(Me.cbb_bg_image.listindex) Then
        img_vorschau.Picture = LoadPicture(ActiveWorkbook.Path & "\Hintergrundgrafiken\" & calc_master.Cells(8, 15 + Me.cbb_bg_image.listindex - 1).value)
    End If
End Sub

Private Sub cbb_farbe_art_Change()
    'Benutzerdefinierte Felder m|fffd|ssen begrenzt werden
    'Zur Auswahl stehen: True/False; Dropdown
    If click = False Then
        click = True
        
        If Me.cbb_farbe_art.listindex = 0 Then
            Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "Color_Art", "einheitlich")
            Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "Color_ID", "0")
        ElseIf Me.cbb_farbe_art.listindex = 1 Then
        'Benutzerdefinierte Felder
        
        End If
        
        Call generate_cbb_farbe_art_detail
        
        click = False
    End If
End Sub

Private Sub cbb_farbe_art_detail_Change()
    If click = False Then
        click = True
        
        If Me.cbb_farbe_art_detail.listindex >= 0 Then
            If Me.cbb_farbe_art_detail.list(Me.cbb_farbe_art_detail.listindex, 0) <> "" Then
                Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "Color_Art", Me.cbb_farbe_art_detail.list(Me.cbb_farbe_art_detail.listindex, 2))
                Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "Color_ID", Me.cbb_farbe_art_detail.list(Me.cbb_farbe_art_detail.listindex, 0))
            End If
        End If
        
        click = False
    End If
End Sub

Private Sub cbb_filter_Change()
    If Me.cbb_filter.listindex = -1 Then
        Call EnableFields(False)
        Exit Sub
    End If
    
    Call EnableFields(True)
    
    If click = False Then
        click = True
        Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "FK_Filter", Me.cbb_filter.list(Me.cbb_filter.listindex, 0))
        click = False
    End If
End Sub

Private Sub cbb_groese_art_Change()
    'Benutzerdefinierte Felder m|fffd|ssen begrenzt werden
    'Zur Auswahl stehen: Number
    'Ressourcen und Kosten werden mit Basis, Ist und Aktuell bef|fffd|llt
    If click = False Then
        click = True
        
        Dim counter As Integer
        Dim art As String
        Dim achsen As Boolean
        
        If Me.cbb_groese_art.listindex = 0 Then
            Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "Size_Art", "einheitlich")
            Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "Size_ID_Value", "0")
        ElseIf Me.cbb_groese_art.listindex = 1 Then
        'Benutzerdefinierte Felder

        ElseIf Me.cbb_groese_art.listindex = 2 Then
        'Kosten
            Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "Size_Art", "Kosten")
        ElseIf Me.cbb_groese_art.listindex = 3 Then
        'Ressourcen
            Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "Size_Art", "Ressourcen")
        End If
        
        Call generate_cbb_groese_art_detail
        
        click = False
    End If
End Sub

Private Sub cbb_groese_art_detail_Change()
    If click = False Then
        click = True
        
        If Me.cbb_groese_art_detail.listindex >= 0 Then
            If Me.cbb_groese_art_detail.list(Me.cbb_groese_art_detail.listindex, 0) <> "" Then
                Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "Size_Art", Me.cbb_groese_art_detail.list(Me.cbb_groese_art_detail.listindex, 2))
                Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "Size_ID_Value", Me.cbb_groese_art_detail.list(Me.cbb_groese_art_detail.listindex, 0))
            Else
                Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "Size_ID_Value", nlc_intern.ConvertValueToColHeader(Me.cbb_groese_art_detail.list(Me.cbb_groese_art_detail.listindex, 1)))
            End If
        End If
        
        click = False
    End If
End Sub

Private Sub cbb_groese_skalierung_Change()
    If Me.cbb_groese_skalierung.listindex = -1 Then Exit Sub
    If click = False Then
        click = True
        Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "Size_Scale", VBA.Left(Me.cbb_groese_skalierung.text, VBA.Len(Me.cbb_groese_skalierung.text) - 2))
        click = False
    End If
End Sub

Private Sub cbb_template_Change()
    If Me.cbb_template.listindex = -1 Then
        click = True
            
        Call clear_content
        Call EnableFilters(False)
        Call EnableFields(False)
            
        click = False
        Exit Sub
    End If
    
    Call EnableFilters(True)
    
    If click = False Then
        click = True

        Me.lbl_pipe_id_value.Caption = Me.cbb_template.list(Me.cbb_template.listindex, 1)
        calc_master.Range("last_pipe_ID").value = Me.cbb_template.list(Me.cbb_template.listindex, 1)
        Call clear_content
        Call load_content
        
        If Me.cbb_filter.listindex = -1 Then
            Call EnableFields(False)
        End If
        
        click = False
    End If
    
    
    If tool_art = "Demo" Then
        Me.btn_edit_bg_image.Enabled = False
    End If
        
End Sub

Private Sub cbb_x_art_Change()
    If Me.cbb_x_art.listindex = -1 Then Exit Sub
    'Benutzerdefinierte Felder m|fffd|ssen begrenzt werden
    'Zur Auswahl stehen: Date; Number; True/False; Dropdown
    'Ressourcen und Kosten werden mit Basis, Ist und Aktuell bef|fffd|llt
    
    If click = False Then
        click = True
        
        Dim save_art As String
        Dim save_art_detail As String
        
        save_art = Me.cbb_y_art.text
        save_art_detail = Me.cbb_y_art_detail.text
        
        If Me.cbb_x_art.list(Me.cbb_x_art.listindex, 1) = "1" Then
            Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "X_Art", "Stapel")
            Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "X_ID_Value", "")
        ElseIf Me.cbb_x_art.list(Me.cbb_x_art.listindex, 1) = "2" Then
        'Benutzerdefinierte Felder

        ElseIf Me.cbb_x_art.list(Me.cbb_x_art.listindex, 1) = "3" Then
        'Ressourcen
            Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "X_Art", "Ressourcen")
        ElseIf Me.cbb_x_art.list(Me.cbb_x_art.listindex, 1) = "4" Then
        'Kosten
            Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "X_Art", "Kosten")
        End If
        
        Call generate_cbb_x_art_detail
        Call generate_cbb_y_art_detail
        
        On Error Resume Next
        Me.cbb_y_art.text = save_art
        Me.cbb_y_art_detail.text = save_art_detail
        
        click = False
    End If
End Sub

Private Sub cbb_x_art_detail_Change()
    'Exit Sub
    If click = False Then
        click = True
    
        If Me.cbb_x_art_detail.listindex >= 0 Then
            If Me.cbb_x_art_detail.list(Me.cbb_x_art_detail.listindex, 0) <> "" Then
                'Kategoriefeld
                Call generate_cbb_y_art_detail
                
                Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "X_Art", Me.cbb_x_art_detail.list(Me.cbb_x_art_detail.listindex, 2))
                Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "X_ID_Value", Me.cbb_x_art_detail.list(Me.cbb_x_art_detail.listindex, 0))
            Else
                'alle anderen Felder
                Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "X_ID_Value", nlc_intern.ConvertValueToColHeader(Me.cbb_x_art_detail.list(Me.cbb_x_art_detail.listindex, 1)))
            End If
        End If
        
        Dim save_art As String
        Dim save_art_detail As String
        
        save_art = Me.cbb_y_art.text
        save_art_detail = Me.cbb_y_art_detail.text
        
        Call generate_cbb_y_art(False)

        On Error Resume Next
        Me.cbb_y_art.text = save_art
        Me.cbb_y_art_detail.text = save_art_detail
        
        click = False
    End If
End Sub

Private Sub cbb_y_art_Change()
    If Me.cbb_y_art.listindex = -1 Then Exit Sub
    'Benutzerdefinierte Felder m|fffd|ssen begrenzt werden
    'Zur Auswahl stehen: Date; Number; True/False; Dropdown
    'Ressourcen und Kosten werden mit Basis, Ist und Aktuell bef|fffd|llt
    
    If click = False Then
        click = True
    
        Dim counter As Integer
        Dim art As String
        Dim achsen As Boolean
        Dim save_art As String
        Dim save_art_detail As String
        
        save_art = Me.cbb_x_art.text
        save_art_detail = Me.cbb_x_art_detail.text
        
        If Me.cbb_y_art.list(Me.cbb_y_art.listindex, 1) = "1" Then
            Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "Y_Art", "Stapel")
            Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "Y_ID_Value", "")
        ElseIf Me.cbb_y_art.list(Me.cbb_y_art.listindex, 1) = "2" Then
        'Benutzerdefinierte Felder

        ElseIf Me.cbb_y_art.list(Me.cbb_y_art.listindex, 1) = "3" Then
        'Ressourcen
            Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "Y_Art", "Ressourcen")
        ElseIf Me.cbb_y_art.list(Me.cbb_y_art.listindex, 1) = "4" Then
        'Kosten
            Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "Y_Art", "Kosten")
        End If
        
        Call generate_cbb_y_art_detail
        Call generate_cbb_x_art_detail
        
        
        On Error Resume Next
        Me.cbb_x_art.text = save_art
        Me.cbb_x_art_detail.text = save_art_detail
        
        click = False
    End If
End Sub

Private Sub cbb_y_art_detail_Change()
    'Exit Sub
    If click = False Then
        click = True
        
        If Me.cbb_y_art_detail.listindex >= 0 Then
            If Me.cbb_y_art_detail.list(Me.cbb_y_art_detail.listindex, 0) <> "" Then
                Call generate_cbb_x_art_detail
                
                Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "Y_Art", Me.cbb_y_art_detail.list(Me.cbb_y_art_detail.listindex, 2))
                Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "Y_ID_Value", Me.cbb_y_art_detail.list(Me.cbb_y_art_detail.listindex, 0))
            Else
                Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "Y_ID_Value", nlc_intern.ConvertValueToColHeader(Me.cbb_y_art_detail.list(Me.cbb_y_art_detail.listindex, 1)))
            End If
        End If
        
        Call generate_cbb_x_art(False)
        
        click = False
    End If
End Sub

Private Sub chb_shortname_Click()
    If click = False Then
        click = True
        If Me.chb_shortname.value Then
            Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "Bubbles_Shortname", Class_Functions.DB.Parse2True)
        Else
            Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "Bubbles_Shortname", "0")
        End If

        click = False
    End If
End Sub

Private Sub chb_x_shortname_Click()
    If click = False Then
        click = True
        
        If Me.chb_x_shortname.value Then
            Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "X_Shortname", Class_Functions.DB.Parse2True)
        Else
            Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "X_Shortname", "0")
        End If
        
        click = False
    End If
End Sub

Private Sub chb_y_shortname_Click()
    If click = False Then
        click = True
        
        If Me.chb_y_shortname.value Then
            Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "Y_Shortname", Class_Functions.DB.Parse2True)
        Else
            Call SQL_Abfragen.Update_Settings_Pipeline(Me.lbl_pipe_id_value.Caption, "Y_Shortname", "0")
        End If
        
        click = False
    End If
End Sub

Private Sub lb_templates_Click()
    If click = False Then
        click = True

        If tool_art = "Demo" Or ((calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.lb_templates.list(Me.lb_templates.listindex, 0), VBA.Len(GlobalIdLeft)) = GlobalIdLeft) Then
            Me.tb_template_name.Enabled = False
            Me.tb_template_name.BackColor = &H8000000F
            Me.btn_del_template.Enabled = False
        Else
            Me.tb_template_name.Enabled = True
            Me.tb_template_name.BackColor = &HFFFFFF
            Me.btn_del_template.Enabled = True
        End If
        
        Me.tb_template_name.text = get_ValueWithoutGlobal(Me.lb_templates.list(Me.lb_templates.listindex))
        
        click = False
    End If
End Sub



Private Sub tb_template_name_Enter()
    If Me.lb_templates.listindex = -1 Then Me.tb_template_name.text = ""
    original_value = Me.tb_template_name.text
End Sub

Private Sub tb_template_name_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False Then
        If original_value <> Me.tb_template_name.text And Me.lb_templates.listindex > -1 Then
            click = True
            
            If VBA.Left(Me.tb_template_name.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
                MsgBox "Der Name des Templates darf nicht mit '" & GlobalIdLeft & "' beginnen."
                Me.tb_template_name.text = get_ValueWithoutGlobal(Me.lb_templates.list(Me.lb_templates.listindex, 0))
                Exit Sub
            End If
            
            Dim TBValue As String
            
            TBValue = Me.tb_template_name.text
            
            Call SQL_Abfragen.Update_Settings_Pipeline(Me.lb_templates.list(Me.lb_templates.listindex, 1), "Name", TBValue)
            Call fill_standardfields
            
            If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") Then 'And VBA.Left(Me.tb_template_name.text, VBA.Len(GlobalIdLeft)) <> GlobalIdLeft Then
                Me.lb_templates.text = TBValue
                Me.cbb_template.text = TBValue
            Else
                Me.lb_templates.text = GlobalIdLeft & TBValue & GlobalIdRight
                Me.cbb_template.text = GlobalIdLeft & TBValue & GlobalIdRight
            End If
            
            click = False
        End If
    End If
End Sub

Private Sub UserForm_Initialize()
    click = True
    'Sprache laden
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    
    'Wird bei Sprache laden einmal geladen,
    'damit Basis, Ist und Aktuelle in richtiger Sprache zwischengespeichert werden k|fffd|nnen
    kost(0) = Me.cbb_x_art_detail.list(0, 0)
    kost(1) = Me.cbb_x_art_detail.list(1, 0)
    kost(2) = Me.cbb_x_art_detail.list(2, 0)
    ress(0) = Me.cbb_x_art_detail.list(3, 0)
    ress(1) = Me.cbb_x_art_detail.list(4, 0)
    ress(2) = Me.cbb_x_art_detail.list(5, 0)
    
    cbb_art_values(0, 0) = Me.cbb_x_art.list(0, 0)
    cbb_art_values(0, 1) = "1"
    cbb_art_values(1, 0) = Me.cbb_x_art.list(1, 0)
    cbb_art_values(1, 1) = "2"
    cbb_art_values(2, 0) = Me.cbb_x_art.list(2, 0)
    cbb_art_values(2, 1) = "3"
    cbb_art_values(3, 0) = Me.cbb_x_art.list(3, 0)
    cbb_art_values(3, 1) = "4"
    
'    Kategorien neu laden, wird verwendet um f|fffd|r die Details die Userfelder anzeigen zu k|fffd|nnen
    Call SQL_Abfragen.Get_AllKategorien
    Call SQL_Abfragen.Get_AllFilter
    Call fill_standardfields
    Me.cbb_filter.RowSource = "frm_Filter"
    Call clear_content
    Call load_content
    
    If Me.cbb_template.listindex <> -1 And Me.cbb_filter.listindex <> -1 Then
        Call EnableFields(True)
    Else
        Call EnableFields(False)
    End If
    
    If tool_art = "Demo" Then
        Me.btn_edit_bg_image.Enabled = False
    End If
    
    
    click = False
End Sub

Private Sub fill_standardfields()
    Dim i As Integer
    Dim SelectedItem As String
    'Templates laden (in DropDown und Listbox)
    Dim Template() As String
    
    Template = SQL_Abfragen.Get_Settings_dropdown("DB_Settings_Pipeline")
    
    If Not VBA.IsNull(Me.cbb_template.value) Then
        SelectedItem = Me.cbb_template.value
    End If
    
    Me.cbb_template.clear
    Me.lb_templates.clear
    
    If Template(0, 0) <> "leer" Then
        For i = 0 To UBound(Template) Step 1
            Me.cbb_template.addItem (Template(i, 0))
            Me.cbb_template.list(Me.cbb_template.listCount - 1, 1) = (Template(i, 1))
            Me.lb_templates.addItem (Template(i, 0))
            Me.lb_templates.list(Me.lb_templates.listCount - 1, 1) = (Template(i, 1))
        Next i
    End If
    
    On Error Resume Next
    Me.cbb_template.value = SelectedItem
    'Filter bef|fffd|llen
    'geht noch nicht, da die Filtertabelle fehlt und demnach die ID nicht mit dem Name aufgel|fffd|st werden kann
    
    'Hintergrund cbb bef|fffd|llen
    Call load_BackGround
End Sub

Private Sub generate_cbb_y_art(AddAll As Boolean)
    Dim selected_item As String

    If Not VBA.IsNull(Me.cbb_y_art.value) Then
        selected_item = Me.cbb_y_art.value
    End If

    Me.cbb_y_art.clear

'    If AddAll = True Then
        Me.cbb_y_art.addItem cbb_art_values(0, 0)
        Me.cbb_y_art.list(Me.cbb_y_art.listCount - 1, 1) = cbb_art_values(0, 1)
        Me.cbb_y_art.addItem cbb_art_values(1, 0)
        Me.cbb_y_art.list(Me.cbb_y_art.listCount - 1, 1) = cbb_art_values(1, 1)
        Me.cbb_y_art.addItem cbb_art_values(2, 0)
        Me.cbb_y_art.list(Me.cbb_y_art.listCount - 1, 1) = cbb_art_values(2, 1)
        Me.cbb_y_art.addItem cbb_art_values(3, 0)
        Me.cbb_y_art.list(Me.cbb_y_art.listCount - 1, 1) = cbb_art_values(3, 1)
'    Else
'        Me.cbb_y_art.AddItem cbb_art_values(0, 0)
'        Me.cbb_y_art.List(Me.cbb_y_art.ListCount - 1, 1) = cbb_art_values(0, 1)
'        Me.cbb_y_art.AddItem cbb_art_values(2, 0)
'        Me.cbb_y_art.List(Me.cbb_y_art.ListCount - 1, 1) = cbb_art_values(2, 1)
'        Me.cbb_y_art.AddItem cbb_art_values(3, 0)
'        Me.cbb_y_art.List(Me.cbb_y_art.ListCount - 1, 1) = cbb_art_values(3, 1)
'    End If

    On Error Resume Next
    Me.cbb_y_art.value = selected_item
End Sub

Private Sub generate_cbb_x_art(AddAll As Boolean)
    Dim selcted_item As String

    If Not VBA.IsNull(Me.cbb_x_art.value) Then
        selected_item = Me.cbb_x_art.value
    End If

    Me.cbb_x_art.clear

'    If AddAll = True Then
        Me.cbb_x_art.addItem cbb_art_values(0, 0)
        Me.cbb_x_art.list(Me.cbb_x_art.listCount - 1, 1) = cbb_art_values(0, 1)
        Me.cbb_x_art.addItem cbb_art_values(1, 0)
        Me.cbb_x_art.list(Me.cbb_x_art.listCount - 1, 1) = cbb_art_values(1, 1)
        Me.cbb_x_art.addItem cbb_art_values(2, 0)
        Me.cbb_x_art.list(Me.cbb_x_art.listCount - 1, 1) = cbb_art_values(2, 1)
        Me.cbb_x_art.addItem cbb_art_values(3, 0)
        Me.cbb_x_art.list(Me.cbb_x_art.listCount - 1, 1) = cbb_art_values(3, 1)
'    Else
'        Me.cbb_x_art.AddItem cbb_art_values(0, 0)
'        Me.cbb_x_art.List(Me.cbb_x_art.ListCount - 1, 1) = cbb_art_values(0, 1)
'        Me.cbb_x_art.AddItem cbb_art_values(2, 0)
'        Me.cbb_x_art.List(Me.cbb_x_art.ListCount - 1, 1) = cbb_art_values(2, 1)
'        Me.cbb_x_art.AddItem cbb_art_values(3, 0)
'        Me.cbb_x_art.List(Me.cbb_x_art.ListCount - 1, 1) = cbb_art_values(3, 1)
'    End If

    On Error Resume Next
    Me.cbb_x_art.value = selected_item
End Sub

Private Sub generate_cbb_y_art_detail()
    Dim selected_item As String
    
    If Me.cbb_y_art.listindex = -1 Then Exit Sub

    If Not VBA.IsNull(Me.cbb_y_art_detail.text) Then
        selected_item = Me.cbb_y_art_detail.text
    End If

    Me.cbb_y_art_detail.clear
    Me.cbb_y_art_detail.Enabled = True
    
    If Me.cbb_y_art.list(Me.cbb_y_art.listindex, 1) <> "1" Then
        If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
            Me.cbb_y_art_detail.BackColor = &H8000000F
            Me.cbb_y_art_detail.Enabled = False
        Else
            Me.cbb_y_art_detail.BackColor = &HFFFFFF
            Me.cbb_y_art_detail.Enabled = True
        End If
    End If
    
    If Me.cbb_y_art.list(Me.cbb_y_art.listindex, 1) = "1" Then
        Me.cbb_y_art_detail.BackColor = &H8000000F
        Me.cbb_y_art_detail.Enabled = False
        
        Call generate_cbb_x_art(True)
    ElseIf Me.cbb_y_art.list(Me.cbb_y_art.listindex, 1) = "2" Then
    'Benutzerdefinierte Felder
        For counter = 1 To calc_frm_masterdata.Range("frm_Kategorie").Rows.count Step 1
            art = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
            achsen = nlc_intern.get_true_false(calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 9).value)
'            If achsen = True And (art = "Date" Or art = "Number" Or art = "True/False" Or art = "DropDown") Then
'                Me.cbb_y_art_detail.AddItem calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 1).value
'                Me.cbb_y_art_detail.List(Me.cbb_y_art_detail.ListCount - 1, 1) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 3).value
'                Me.cbb_y_art_detail.List(Me.cbb_y_art_detail.ListCount - 1, 2) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
'            End If
            Me.cbb_y_art_detail.addItem calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 1).value
            Me.cbb_y_art_detail.list(Me.cbb_y_art_detail.listCount - 1, 1) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 3).value
            Me.cbb_y_art_detail.list(Me.cbb_y_art_detail.listCount - 1, 2) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
            
'            If Me.cbb_x_art_detail.listindex = -1 Then
'                If achsen = True And (art = "Date" Or art = "Number" Or art = "True/False" Or art = "DropDown") Then
'                    Me.cbb_y_art_detail.addItem calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 1).value
'                    Me.cbb_y_art_detail.list(Me.cbb_y_art_detail.listCount - 1, 1) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 3).value
'                    Me.cbb_y_art_detail.list(Me.cbb_y_art_detail.listCount - 1, 2) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
'                End If
'            ElseIf Me.cbb_x_art_detail.list(Me.cbb_x_art_detail.listindex, 2) = "Number" Or Me.cbb_x_art_detail.list(Me.cbb_x_art_detail.listindex, 2) = "" Or _
'                    Me.cbb_x_art.text = cbb_art_values(2, 0) Or Me.cbb_x_art.text = cbb_art_values(3, 0) Then
'                If achsen = True And (art = "Date" Or art = "Number" Or art = "True/False" Or art = "DropDown") Then
'                    Me.cbb_y_art_detail.addItem calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 1).value
'                    Me.cbb_y_art_detail.list(Me.cbb_y_art_detail.listCount - 1, 1) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 3).value
'                    Me.cbb_y_art_detail.list(Me.cbb_y_art_detail.listCount - 1, 2) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
'                End If
'            Else
'                If achsen = True And art = "Number" Then
'                    Me.cbb_y_art_detail.addItem calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 1).value
'                    Me.cbb_y_art_detail.list(Me.cbb_y_art_detail.listCount - 1, 1) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 3).value
'                    Me.cbb_y_art_detail.list(Me.cbb_y_art_detail.listCount - 1, 2) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
'                End If
'            End If
            
        Next counter
        
        If art = "DropDown" Then
            Call generate_cbb_x_art(False)
        Else
            Call generate_cbb_x_art(True)
        End If
    ElseIf Me.cbb_y_art.list(Me.cbb_y_art.listindex, 1) = "3" Then
    'Ressourcen
        Me.cbb_y_art_detail.addItem
        Me.cbb_y_art_detail.list(Me.cbb_y_art_detail.listCount - 1, 1) = ress(0)
        Me.cbb_y_art_detail.addItem
        Me.cbb_y_art_detail.list(Me.cbb_y_art_detail.listCount - 1, 1) = ress(1)
        Me.cbb_y_art_detail.addItem
        Me.cbb_y_art_detail.list(Me.cbb_y_art_detail.listCount - 1, 1) = ress(2)
        
        Call generate_cbb_x_art(True)
    ElseIf Me.cbb_y_art.list(Me.cbb_y_art.listindex, 1) = "4" Then
    'Kosten
        Me.cbb_y_art_detail.addItem
        Me.cbb_y_art_detail.list(Me.cbb_y_art_detail.listCount - 1, 1) = kost(0)
        Me.cbb_y_art_detail.addItem
        Me.cbb_y_art_detail.list(Me.cbb_y_art_detail.listCount - 1, 1) = kost(1)
        Me.cbb_y_art_detail.addItem
        Me.cbb_y_art_detail.list(Me.cbb_y_art_detail.listCount - 1, 1) = kost(2)
        
        Call generate_cbb_x_art(True)
    End If
    
    On Error Resume Next
    Me.cbb_y_art_detail.text = selected_item
End Sub

Private Sub generate_cbb_x_art_detail()
    Dim counter As Integer
    Dim art As String
    Dim achsen As Boolean
    Dim selected_item As String
    
    If Me.cbb_x_art.listindex = -1 Then Exit Sub
    
    If Not VBA.IsNull(Me.cbb_x_art_detail.text) Then
        selected_item = Me.cbb_x_art_detail.text
    End If
    
    Me.cbb_x_art_detail.clear
    Me.cbb_x_art_detail.Enabled = True
    
    If Me.cbb_x_art.list(Me.cbb_x_art.listindex, 1) <> "1" Then
        If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
            Me.cbb_x_art_detail.BackColor = &H8000000F
            Me.cbb_x_art_detail.Enabled = False
        Else
            Me.cbb_x_art_detail.BackColor = &HFFFFFF
            Me.cbb_x_art_detail.Enabled = True
        End If
    End If
    
    If Me.cbb_x_art.list(Me.cbb_x_art.listindex, 1) = "1" Then
        Me.cbb_x_art_detail.Enabled = False
        Me.cbb_x_art_detail.BackColor = &H8000000F
        
        Call generate_cbb_y_art(True)
    ElseIf Me.cbb_x_art.list(Me.cbb_x_art.listindex, 1) = "2" Then
    'Benutzerdefinierte Felder
        For counter = 1 To calc_frm_masterdata.Range("frm_Kategorie").Rows.count Step 1
            art = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
            achsen = nlc_intern.get_true_false(calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 9).value)
            
            Me.cbb_x_art_detail.addItem calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 1).value
            Me.cbb_x_art_detail.list(Me.cbb_x_art_detail.listCount - 1, 1) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 3).value
            Me.cbb_x_art_detail.list(Me.cbb_x_art_detail.listCount - 1, 2) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
            
            
'            If Me.cbb_y_art_detail.listindex = -1 And Me.cbb_y_art.text <> cbb_art_values(2, 0) And Me.cbb_y_art.text <> cbb_art_values(3, 0) Then
'                If achsen = True And (art = "True/False" Or art = "DropDown") Then
'                    Me.cbb_x_art_detail.addItem calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 1).value
'                    Me.cbb_x_art_detail.list(Me.cbb_x_art_detail.listCount - 1, 1) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 3).value
'                    Me.cbb_x_art_detail.list(Me.cbb_x_art_detail.listCount - 1, 2) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
'                End If
'            ElseIf Me.cbb_y_art_detail.listindex = -1 And (Me.cbb_y_art.text = cbb_art_values(2, 0) Or Me.cbb_y_art.text = cbb_art_values(3, 0)) Then
'                If achsen = True And (art = "Date" Or art = "Number" Or art = "True/False" Or art = "DropDown") Then
'                    Me.cbb_x_art_detail.addItem calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 1).value
'                    Me.cbb_x_art_detail.list(Me.cbb_x_art_detail.listCount - 1, 1) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 3).value
'                    Me.cbb_x_art_detail.list(Me.cbb_x_art_detail.listCount - 1, 2) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
'                End If
'            ElseIf Me.cbb_y_art_detail.list(Me.cbb_y_art_detail.listindex, 2) = "Number" Or Me.cbb_y_art_detail.list(Me.cbb_y_art_detail.listindex, 2) = "" Or _
'                    Me.cbb_y_art.text = cbb_art_values(2, 0) Or Me.cbb_y_art.text = cbb_art_values(3, 0) Then
'                If achsen = True And (art = "Date" Or art = "Number" Or art = "True/False" Or art = "DropDown") Then
'                    Me.cbb_x_art_detail.addItem calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 1).value
'                    Me.cbb_x_art_detail.list(Me.cbb_x_art_detail.listCount - 1, 1) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 3).value
'                    Me.cbb_x_art_detail.list(Me.cbb_x_art_detail.listCount - 1, 2) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
'                End If
'            Else
'                If achsen = True And art = "Number" Then
'                    Me.cbb_x_art_detail.addItem calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 1).value
'                    Me.cbb_x_art_detail.list(Me.cbb_x_art_detail.listCount - 1, 1) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 3).value
'                    Me.cbb_x_art_detail.list(Me.cbb_x_art_detail.listCount - 1, 2) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
'                End If
'            End If
            
        Next counter
            
        If art = "DropDown" Then
            Call generate_cbb_y_art(False)
        Else
            Call generate_cbb_y_art(True)
        End If
    ElseIf Me.cbb_x_art.list(Me.cbb_x_art.listindex, 1) = "3" Then
    'Ressourcen
        Me.cbb_x_art_detail.addItem
        Me.cbb_x_art_detail.list(Me.cbb_x_art_detail.listCount - 1, 1) = ress(0)
        Me.cbb_x_art_detail.addItem
        Me.cbb_x_art_detail.list(Me.cbb_x_art_detail.listCount - 1, 1) = ress(1)
        Me.cbb_x_art_detail.addItem
        Me.cbb_x_art_detail.list(Me.cbb_x_art_detail.listCount - 1, 1) = ress(2)
        
        Call generate_cbb_y_art(True)
    ElseIf Me.cbb_x_art.list(Me.cbb_x_art.listindex, 1) = "4" Then
    'Kosten
        Me.cbb_x_art_detail.addItem
        Me.cbb_x_art_detail.list(Me.cbb_x_art_detail.listCount - 1, 1) = kost(0)
        Me.cbb_x_art_detail.addItem
        Me.cbb_x_art_detail.list(Me.cbb_x_art_detail.listCount - 1, 1) = kost(1)
        Me.cbb_x_art_detail.addItem
        Me.cbb_x_art_detail.list(Me.cbb_x_art_detail.listCount - 1, 1) = kost(2)
        
        Call generate_cbb_y_art(True)
    End If
'
'    Call generate_cbb_y_art_detail
    
    On Error Resume Next
    Me.cbb_x_art_detail.text = selected_item
End Sub

Private Sub generate_cbb_groese_art_detail()
    Dim counter As Integer
    Dim art As String
    Dim achsen As Boolean
    
    Me.cbb_groese_art_detail.clear
    Me.cbb_groese_art_detail.Enabled = True
    
    If Me.cbb_groese_art.listindex <> 0 Then
        If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
            Me.cbb_groese_art_detail.BackColor = &H8000000F
            Me.cbb_groese_art_detail.Enabled = False
        Else
            Me.cbb_groese_art_detail.BackColor = &HFFFFFF
            Me.cbb_groese_art_detail.Enabled = True
        End If
    End If
    
    If Me.cbb_groese_art.listindex = 0 Then
        Me.cbb_groese_art_detail.BackColor = &H8000000F
        Me.cbb_groese_art_detail.Enabled = False
        Me.cbb_groese_art_detail.listindex = -1
    ElseIf Me.cbb_groese_art.listindex = 1 Then
    'Benutzerdefinierte Felder
        For counter = 1 To calc_frm_masterdata.Range("frm_Kategorie").Rows.count Step 1
            art = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
            achsen = nlc_intern.get_true_false(calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 9).value)
            If art = "Number" And achsen = True Then
                Me.cbb_groese_art_detail.addItem calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 1).value
                Me.cbb_groese_art_detail.list(Me.cbb_groese_art_detail.listCount - 1, 1) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 3).value
                Me.cbb_groese_art_detail.list(Me.cbb_groese_art_detail.listCount - 1, 2) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
            End If
        Next counter
    ElseIf Me.cbb_groese_art.listindex = 2 Then
    'Kosten
        Me.cbb_groese_art_detail.addItem
        Me.cbb_groese_art_detail.list(Me.cbb_groese_art_detail.listCount - 1, 1) = kost(0)
        Me.cbb_groese_art_detail.addItem
        Me.cbb_groese_art_detail.list(Me.cbb_groese_art_detail.listCount - 1, 1) = kost(1)
        Me.cbb_groese_art_detail.addItem
        Me.cbb_groese_art_detail.list(Me.cbb_groese_art_detail.listCount - 1, 1) = kost(2)
    ElseIf Me.cbb_groese_art.listindex = 3 Then
    'Ressourcen
        Me.cbb_groese_art_detail.addItem
        Me.cbb_groese_art_detail.list(Me.cbb_groese_art_detail.listCount - 1, 1) = ress(0)
        Me.cbb_groese_art_detail.addItem
        Me.cbb_groese_art_detail.list(Me.cbb_groese_art_detail.listCount - 1, 1) = ress(1)
        Me.cbb_groese_art_detail.addItem
        Me.cbb_groese_art_detail.list(Me.cbb_groese_art_detail.listCount - 1, 1) = ress(2)
    End If
End Sub

Private Sub generate_cbb_farbe_art_detail()
    'Benutzerdefinierte Felder m|fffd|ssen begrenzt werden
    'Zur Auswahl stehen: True/False; Dropdown
        
    Dim counter As Integer
    Dim art As String
    Dim achsen As Boolean
    
    Me.cbb_farbe_art_detail.clear
    Me.cbb_farbe_art_detail.Enabled = True
    
    If Me.cbb_farbe_art.listindex <> 0 Then
        If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
            Me.cbb_farbe_art_detail.BackColor = &H8000000F
            Me.cbb_farbe_art_detail.Enabled = False
        Else
            Me.cbb_farbe_art_detail.BackColor = &HFFFFFF
            Me.cbb_farbe_art_detail.Enabled = True
        End If
    End If
    
    If Me.cbb_farbe_art.listindex = 0 Then
        Me.cbb_farbe_art_detail.BackColor = &H8000000F
        Me.cbb_farbe_art_detail.Enabled = False
        Me.cbb_farbe_art_detail.listindex = -1
        
        Call Get_Setting_Pipe_Value(Me.lbl_pipe_id_value.Caption, "Color_ID")
    ElseIf Me.cbb_farbe_art.listindex = 1 Then
    'Benutzerdefinierte Felder
        For counter = 1 To calc_frm_masterdata.Range("frm_Kategorie").Rows.count Step 1
            art = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
            achsen = nlc_intern.get_true_false(calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 9).value)
            If achsen = True And (art = "True/False" Or art = "DropDown") Then
                Me.cbb_farbe_art_detail.addItem calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 1).value
                Me.cbb_farbe_art_detail.list(Me.cbb_farbe_art_detail.listCount - 1, 1) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 3).value
                Me.cbb_farbe_art_detail.list(Me.cbb_farbe_art_detail.listCount - 1, 2) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
            End If
        Next counter
    End If
End Sub

Private Sub generate_cbb_pipe_skalierung()
    Me.cbb_groese_skalierung.clear
    
    Me.cbb_groese_skalierung.clear
    Me.cbb_groese_skalierung.addItem "5 %"
    Me.cbb_groese_skalierung.addItem "10 %"
    Me.cbb_groese_skalierung.addItem "15 %"
    Me.cbb_groese_skalierung.addItem "20 %"
    Me.cbb_groese_skalierung.addItem "25 %"
    Me.cbb_groese_skalierung.addItem "30 %"
    Me.cbb_groese_skalierung.addItem "35 %"
    Me.cbb_groese_skalierung.addItem "40 %"
    Me.cbb_groese_skalierung.addItem "45 %"
    Me.cbb_groese_skalierung.addItem "50 %"
    Me.cbb_groese_skalierung.addItem "75 %"
    Me.cbb_groese_skalierung.addItem "100 %"
    Me.cbb_groese_skalierung.addItem "150 %"
    Me.cbb_groese_skalierung.addItem "200 %"
End Sub

Private Sub load_BackGround()
    Dim counter As Integer
    Dim SelectedItem As String
    
    counter = 5
    
    If Not VBA.IsNull(Me.cbb_bg_image) Then
        SelectedItem = Me.cbb_bg_image.value
    End If
    
    Me.cbb_bg_image.clear
    For counter = 0 To 10 Step 1
        If counter = 0 Then
            Me.cbb_bg_image.addItem " - "
        Else
            Me.cbb_bg_image.addItem calc_master.Range("frm_grafiken").Cells(counter, 1).value
        End If
    Next counter
    
    On Error Resume Next
    Me.cbb_bg_image.value = SelectedItem
End Sub

Private Sub load_content()
    If Not VBA.IsNumeric(calc_master.Range("last_pipe_ID").value) Then Exit Sub
    On Error Resume Next

    Dim counter As Integer
    Dim art As String
    Dim filter As String
    Dim ID As String
    
    'Templatetitel laden
    Me.cbb_template.text = Get_Setting_Pipe_Value(calc_master.Range("last_pipe_ID").value, "Name") 'calc_pipe_set.Cells(4, 3).value
    Me.lbl_pipe_id_value.Caption = Me.cbb_template.list(Me.cbb_template.listindex, 1)
    If Not VBA.IsNumeric(Me.lbl_pipe_id_value.Caption) Then Exit Sub
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Allgemein laden
    'Filter laden
    filter = Get_Setting_Pipe_Value(calc_master.Range("last_pipe_ID").value, "FK_Filter")
    
    For counter = 0 To Me.cbb_filter.listCount - 1
        If Me.cbb_filter.list(counter, 0) = filter Then
            Me.cbb_filter.listindex = counter
        End If
    Next counter
    
    'Shortname?
    Me.chb_shortname.value = Get_Setting_Pipe_Value(Me.lbl_pipe_id_value.Caption, "Bubbles_Shortname")
    If VBA.IsNull(Me.chb_shortname.value) Then
        Me.chb_shortname.value = False
    End If
    
    'Hintergrund laden
    Me.cbb_bg_image.listindex = Get_Setting_Pipe_Value(Me.lbl_pipe_id_value.Caption, "Background")
    Call show_BG_Image

'    Me.cbb_bg_image.listindex = calc_pipe_set.Cells(4, 17).value
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'X-Achse laden
    'Art laden
    art = Get_Setting_Pipe_Value(Me.lbl_pipe_id_value.Caption, "X_Art")
    
    Me.cbb_x_art.text = art
    
    If art = "Ressourcen" Or art = "Kosten" Or art = "Stapel" Then
        Call generate_cbb_x_art_detail
        If art = "Ressourcen" Then
            Me.cbb_x_art_detail.text = nlc_intern.ConvertColHeaderToValue(Get_Setting_Pipe_Value(Me.lbl_pipe_id_value.Caption, "X_ID_Value"), True)
        Else
            Me.cbb_x_art_detail.text = nlc_intern.ConvertColHeaderToValue(Get_Setting_Pipe_Value(Me.lbl_pipe_id_value.Caption, "X_ID_Value"))
        End If
    Else
        For counter = 0 To Me.cbb_x_art.listCount - 1
            If Me.cbb_x_art.list(counter, 1) = "2" Then
                Me.cbb_x_art.listindex = counter
                Exit For
            End If
        Next counter
        Call generate_cbb_x_art_detail
        
        ID = VBA.CStr(Get_Setting_Pipe_Value(Me.lbl_pipe_id_value.Caption, "X_ID_Value"))
        
        For counter = 0 To Me.cbb_x_art_detail.listCount - 1 Step 1
            If Me.cbb_x_art_detail.list(counter, 0) = ID Then
                Me.cbb_x_art_detail.text = Me.cbb_x_art_detail.list(counter, 1)
                Exit For
            End If
        Next counter
    End If
    
    'Shortname?
    Me.chb_x_shortname.value = Get_Setting_Pipe_Value(Me.lbl_pipe_id_value.Caption, "X_Shortname")
    If VBA.IsNull(Me.chb_x_shortname.value) Then
        Me.chb_x_shortname.value = False
    End If
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Y-Achse laden
    art = Get_Setting_Pipe_Value(Me.lbl_pipe_id_value.Caption, "Y_Art")
    If art = "Ressourcen" Or art = "Kosten" Or art = "Stapel" Then
        Me.cbb_y_art.text = art
        Call generate_cbb_y_art_detail
        
        If art = "Ressourcen" Then
            Me.cbb_y_art_detail.text = nlc_intern.ConvertColHeaderToValue(Get_Setting_Pipe_Value(Me.lbl_pipe_id_value.Caption, "Y_ID_Value"), True)
        Else
            Me.cbb_y_art_detail.text = nlc_intern.ConvertColHeaderToValue(Get_Setting_Pipe_Value(Me.lbl_pipe_id_value.Caption, "Y_ID_Value"))
        End If
    Else
        Dim tempListindex As Integer
        tempListindex = Me.cbb_x_art_detail.listindex
        For counter = 0 To Me.cbb_y_art.listCount - 1
            If Me.cbb_y_art.list(counter, 1) = "2" Then
                Me.cbb_y_art.listindex = counter
            End If
        Next counter
        Call generate_cbb_y_art_detail
        
        ID = VBA.CStr(Get_Setting_Pipe_Value(Me.lbl_pipe_id_value.Caption, "Y_ID_Value"))
        
        For counter = 0 To Me.cbb_y_art_detail.listCount - 1 Step 1
            If Me.cbb_y_art_detail.list(counter, 0) = ID Then
                Me.cbb_y_art_detail.text = Me.cbb_y_art_detail.list(counter, 1)
                Exit For
            End If
        Next counter
        
        Me.cbb_x_art_detail.listindex = tempListindex
    End If
    
    'Shortname?
    Me.chb_y_shortname.value = Get_Setting_Pipe_Value(Me.lbl_pipe_id_value.Caption, "Y_Shortname")
    If VBA.IsNull(Me.chb_y_shortname.value) Then
        Me.chb_y_shortname.value = False
    End If
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Gr|fffd||fffd|e laden
    art = Get_Setting_Pipe_Value(Me.lbl_pipe_id_value.Caption, "Size_Art")
    If art = "Ressourcen" Or art = "Kosten" Or art = "einheitlich" Then
        Me.cbb_groese_art.text = art
        Call generate_cbb_groese_art_detail
        If art = "Ressourcen" Then
            Me.cbb_groese_art_detail.text = nlc_intern.ConvertColHeaderToValue(Get_Setting_Pipe_Value(Me.lbl_pipe_id_value.Caption, "Size_ID_Value"), True)
        Else
            Me.cbb_groese_art_detail.text = nlc_intern.ConvertColHeaderToValue(Get_Setting_Pipe_Value(Me.lbl_pipe_id_value.Caption, "Size_ID_Value"))
        End If
    Else
        Me.cbb_groese_art.listindex = 1
        Call generate_cbb_groese_art_detail
        
        ID = VBA.CStr(Get_Setting_Pipe_Value(Me.lbl_pipe_id_value.Caption, "Size_ID_Value"))
        
        For counter = 0 To Me.cbb_groese_art_detail.listCount - 1 Step 1
            If Me.cbb_groese_art_detail.list(counter, 0) = ID Then
                Me.cbb_groese_art_detail.text = Me.cbb_groese_art_detail.list(counter, 1)
                Exit For
            End If
        Next counter
    End If
    
    'Skalierung
    Me.cbb_groese_skalierung.text = Get_Setting_Pipe_Value(Me.lbl_pipe_id_value.Caption, "Size_Scale") & " %"
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Farbe laden
    art = Get_Setting_Pipe_Value(Me.lbl_pipe_id_value.Caption, "Color_Art")
    If art = "einheitlich" Then
        Me.cbb_farbe_art.listindex = 0
        Call generate_cbb_farbe_art_detail
    Else
        Me.cbb_farbe_art.listindex = 1
        Call generate_cbb_farbe_art_detail
        
        ID = VBA.CStr(Get_Setting_Pipe_Value(Me.lbl_pipe_id_value.Caption, "Color_ID"))
        
        For counter = 0 To Me.cbb_farbe_art_detail.listCount - 1 Step 1
            If Me.cbb_farbe_art_detail.list(counter, 0) = ID Then
                Me.cbb_farbe_art_detail.text = Me.cbb_farbe_art_detail.list(counter, 1)
                Exit For
            End If
        Next counter
    End If
End Sub

Private Sub clear_content()
    
    Call generate_cbb_x_art(True)
    Call generate_cbb_y_art(True)
    Call generate_cbb_pipe_skalierung
    
    On Error Resume Next
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Allgemein laden
    'Filter laden
    Me.cbb_filter.listindex = -1
    
    'Shortname?
    Me.chb_shortname.value = False
    
    'Hintergrund laden
    Me.cbb_bg_image.listindex = -1
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'X-Achse laden
    'Art laden
    Me.cbb_x_art.listindex = -1
    Call generate_cbb_x_art_detail
    
    Me.cbb_x_art_detail.listindex = -1
    
    'Shortname?
    Me.chb_x_shortname.value = False
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Y-Achse laden
    Me.cbb_y_art.listindex = -1
    Call generate_cbb_y_art_detail
    
    Me.cbb_y_art_detail.listindex = -1
    
    'Shortname?
    Me.chb_y_shortname.value = False
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Gr|fffd||fffd|e laden
    Me.cbb_groese_art.listindex = -1
    Call generate_cbb_groese_art_detail
    
    Me.cbb_groese_art_detail.listindex = -1
    
    'Skalierung
    Me.cbb_groese_skalierung.listindex = -1
    
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Farbe laden
    Me.cbb_farbe_art.listindex = -1
    Call generate_cbb_farbe_art_detail
    
    Me.cbb_farbe_art_detail.listindex = -1
    
    img_vorschau.Picture = Nothing
    
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Dim counter As Integer
    
    counter = 5
    
    While calc_pipe_set.Cells(counter, 2).value <> ""
        If calc_pipe_set.Cells(counter, 3).value = Me.cbb_template.text Then
            calc_pipe_set.Range("B4:Q4").Copy
            calc_pipe_set.Range("B" & counter).PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        End If
        counter = counter + 1
    Wend
    Application.CutCopyMode = False
End Sub


Private Sub EnableFilters(enable As Boolean)
    If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
        enable = False
    End If
    
    Me.cbb_filter.Enabled = enable
    
    If Not enable Then
        Me.cbb_filter.BackColor = &H8000000F
    Else
        Me.cbb_filter.BackColor = &HFFFFFF
    End If
End Sub

Private Sub EnableFields(enable As Boolean)
    If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
        enable = False
    End If
    
    If tool_art = "Demo" Then
        enable = False
        Me.btn_add_template.Enabled = enable
        Me.btn_del_template.Enabled = enable
    End If
    
    
    Me.cbb_bg_image.Enabled = enable
    Me.chb_shortname.Enabled = enable
    Me.cbb_x_art.Enabled = enable
    Me.cbb_x_art_detail.Enabled = enable
    Me.chb_x_shortname.Enabled = enable
    Me.cbb_y_art.Enabled = enable
    Me.cbb_y_art_detail.Enabled = enable
    Me.chb_y_shortname.Enabled = enable
    Me.cbb_groese_art.Enabled = enable
    Me.cbb_groese_art_detail.Enabled = enable
    Me.cbb_groese_skalierung.Enabled = enable
    Me.cbb_farbe_art.Enabled = enable
    Me.cbb_farbe_art_detail.Enabled = enable
    
    If Not enable Then
        Me.cbb_bg_image.BackColor = &H8000000F
        Me.chb_shortname.BackColor = &H8000000F
        Me.cbb_x_art.BackColor = &H8000000F
        Me.cbb_x_art_detail.BackColor = &H8000000F
        Me.chb_x_shortname.BackColor = &H8000000F
        Me.cbb_y_art.BackColor = &H8000000F
        Me.cbb_y_art_detail.BackColor = &H8000000F
        Me.chb_y_shortname.BackColor = &H8000000F
        Me.cbb_groese_art.BackColor = &H8000000F
        Me.cbb_groese_art_detail.BackColor = &H8000000F
        Me.cbb_groese_skalierung.BackColor = &H8000000F
        Me.cbb_farbe_art.BackColor = &H8000000F
        Me.cbb_farbe_art_detail.BackColor = &H8000000F
    Else
        Me.cbb_bg_image.BackColor = &HFFFFFF
        Me.chb_shortname.BackColor = &HFFFFFF
        Me.cbb_x_art.BackColor = &HFFFFFF
        Me.cbb_x_art_detail.BackColor = &HFFFFFF
        Me.chb_x_shortname.BackColor = &HFFFFFF
        Me.cbb_y_art.BackColor = &HFFFFFF
        Me.cbb_y_art_detail.BackColor = &HFFFFFF
        Me.chb_y_shortname.BackColor = &HFFFFFF
        Me.cbb_groese_art.BackColor = &HFFFFFF
        'Me.cbb_groese_art_detail.BackColor = &HFFFFFF
        Me.cbb_groese_skalierung.BackColor = &HFFFFFF
        Me.cbb_farbe_art.BackColor = &HFFFFFF
        'Me.cbb_farbe_art_detail.BackColor = &HFFFFFF
        
        If Me.cbb_x_art.listindex >= 0 Then
            If Me.cbb_x_art.list(Me.cbb_x_art.listindex, 1) = "1" Then
                Me.cbb_x_art_detail.BackColor = &H8000000F
                Me.cbb_x_art_detail.Enabled = False
            Else
                Me.cbb_x_art_detail.BackColor = &HFFFFFF
                Me.cbb_x_art_detail.Enabled = True
            End If
        End If
        
        If Me.cbb_y_art.listindex >= 0 Then
            If Me.cbb_y_art.list(Me.cbb_y_art.listindex, 1) = "1" Then
                Me.cbb_y_art_detail.BackColor = &H8000000F
                Me.cbb_y_art_detail.Enabled = False
            Else
                Me.cbb_y_art_detail.BackColor = &HFFFFFF
                Me.cbb_y_art_detail.Enabled = True
            End If
        End If
        If Me.cbb_groese_art.listindex = 0 Then
            Me.cbb_groese_art_detail.BackColor = &H8000000F
            Me.cbb_groese_art_detail.Enabled = False
        Else
            Me.cbb_groese_art_detail.BackColor = &HFFFFFF
            Me.cbb_groese_art_detail.Enabled = True
        End If
        
        If Me.cbb_farbe_art.listindex = 0 Then
            Me.cbb_farbe_art_detail.BackColor = &H8000000F
            Me.cbb_farbe_art_detail.Enabled = False
        Else
            Me.cbb_farbe_art_detail.BackColor = &HFFFFFF
            Me.cbb_farbe_art_detail.Enabled = True
        End If
    End If
    
    
   
    
    
End Sub

Private Function checkFields() As Boolean
    Dim check As Boolean
    
    check = False
    
    If Me.cbb_template.listindex <> -1 And _
        Me.cbb_filter.listindex <> -1 And _
        Me.cbb_bg_image.listindex <> -1 And _
        Me.cbb_x_art.listindex <> -1 And _
        Me.cbb_y_art.listindex <> -1 And _
        Me.cbb_groese_art.listindex <> -1 And _
        Me.cbb_groese_skalierung.listindex <> -1 And _
         Me.cbb_farbe_art.listindex <> -1 Then
        
        'Variable Felder abfragen
        'X und Y Achse
        If Me.cbb_x_art.list(Me.cbb_x_art.listindex, 1) <> "1" Then
            If Me.cbb_x_art_detail.listindex <> -1 Then
                check = True
            Else
                check = False
            End If
        Else
            check = True
        End If
        
        If Me.cbb_y_art.list(Me.cbb_y_art.listindex, 1) <> "1" Then
            If Me.cbb_y_art_detail.listindex <> -1 Then
                If check Then
                    check = True
                End If
            Else
                check = False
            End If
        Else
            If check Then
                check = True
            End If
        End If
        
        
        'Gr|fffd||fffd|e
        If Me.cbb_groese_art.listindex > 0 Then
            If Me.cbb_groese_art_detail.listindex <> -1 Then
                If check Then
                    check = True
                End If
            Else
                check = False
            End If
        Else
            If check Then
                check = True
            End If
        End If
        
        'Farbe
        If Me.cbb_farbe_art.listindex > 0 Then
            If Me.cbb_farbe_art_detail.listindex <> -1 Then
                If check Then
                    check = True
                End If
            Else
                check = False
            End If
        Else
            If check Then
                check = True
            End If
        End If
        
        
        If check Then
            checkFields = True
        Else
            checkFields = False
        End If
    Else
        checkFields = False
    End If
End Function

Attribute VB_Name = "frm_set_projectviewer"
Attribute VB_Base = "0{361EF229-0404-4ECA-A6E4-878D62713ABF}{8CC1DF54-1DB2-4131-BCF2-B27674242AA7}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private click As Boolean
Private original_value As String

Private Sub btn_add_template_Click()
    If click = False Then
        click = True
        
        Dim InsertColumns As String
        Dim insertValues As String
        
        If calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user" Then
            InsertColumns = "Name, FK_Users"
            insertValues = "New', '" & calc_master.Range("WindowsLogin").value & ""
        Else
            InsertColumns = ""
            insertValues = "New"
        End If

        If SQL_Abfragen.Insert_Template(insertValues, "DB_Settings_Projectviewer", InsertColumns) Then
            Call fill_standardfields
        Else
            MsgBox nlc_language.FindValue("SMessage_ErrAddTemp")
        End If
        
        click = False
    End If
End Sub

Private Sub btn_del_template_Click()
    If Me.lb_templates.listindex = -1 Then Exit Sub
    
    If click = False Then
        click = True
        
        If SQL_Abfragen.Delete_Template(Me.lb_templates.list(Me.lb_templates.listindex, 1), "DB_Settings_Projectviewer") = True Then
            Call fill_standardfields
        Else
            MsgBox nlc_language.FindValue("SMessage_ErrDelTemp")
        End If
        
        Me.tb_template_name.text = ""
        
        click = False
    End If
End Sub

Private Sub btn_edit_filter_Click()
    'Filter ID schreiben
    If Me.cbb_filter.listindex <> -1 Then
        calc_master.Range("last_filter_id").value = Me.cbb_filter.list(Me.cbb_filter.listindex, 0)
    End If
    
    frm_set_filter.Show
End Sub

Private Sub cbb_filter_Change()
    If Me.cbb_filter.listindex = -1 Then Exit Sub
    'If click = False Then
        click = True
                
        Call SQL_Abfragen.Update_Settings_PViewer(Me.lbl_viewer_id_value.Caption, "FK_Filter", Me.cbb_filter.list(Me.cbb_filter.listindex, 0))
        
        'Projekte Laden (anhand des Filters)
        Call SQL_Abfragen.Get_ProjectFilterResult(Me.lb_Projectresult, Me.cbb_filter.list(Me.cbb_filter.listindex, 0), True)
        
        click = False
    'End If
End Sub

Private Sub fill_standardfields()
    Dim i As Integer
    
    'Templates laden (in DropDown und Listbox)
    Dim Template() As String
    
    Template = SQL_Abfragen.Get_Settings_dropdown("DB_Settings_Projectviewer")
    Me.cbb_template.clear
    Me.lb_templates.clear
    
    If Template(0, 0) <> "leer" Then
        For i = 0 To UBound(Template) Step 1
            Me.cbb_template.addItem (Template(i, 0))
            Me.cbb_template.list(Me.cbb_template.listCount - 1, 1) = (Template(i, 1))
            Me.lb_templates.addItem (Template(i, 0))
            Me.lb_templates.list(Me.lb_templates.listCount - 1, 1) = (Template(i, 1))
        Next i
    End If
End Sub

Private Sub btn_generate_Click()
    If Me.cbb_filter.listindex < 0 Then
        MsgBox nlc_language.FindValue("SMessage_SelFilter")
        Exit Sub
    End If
    
    nlc_intern.Application_off
    nlc_ppf_viewer.Unprotect nlc_intern.get_pw
    calc_master.Range("Filter_PViewer").value = Me.cbb_filter.text
    
    Unload Me
    nlc_ppf_viewer.Activate
    If Me.lb_Projectresult.listindex >= 0 Then
        nlc_PViewer.refresh_PJList (Me.lb_Projectresult.list(Me.lb_Projectresult.listindex, 0))
    Else
        nlc_ppf_viewer.Range("PV_SelectedProject").value = ""
        Call PViewer_LoadProject
    End If
    
    nlc_ppf_viewer.Protect nlc_intern.get_pw
    nlc_intern.Application_on
End Sub

Private Sub cbb_template_Change()
    If Me.cbb_template.listindex = -1 Then
        Call clear_content
        Call EnableFilters(False)
        
        Exit Sub
    End If
    
    Call EnableFilters(True)
    
    If click = False Then
        click = True
        
        If Me.cbb_template.text <> "" Then
            Me.lbl_viewer_id_value.Caption = Me.cbb_template.list(Me.cbb_template.listindex, 1)
            calc_master.Range("last_PViewer_ID").value = Me.cbb_template.list(Me.cbb_template.listindex, 1)
            Call clear_content
            Call load_content
        End If
        
        click = False
    End If
End Sub

Private Sub EnableFilters(enable As Boolean)
    If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
        enable = False
    End If
    
    If tool_art = "Demo" Then
        enable = False
        Me.btn_add_template.Enabled = enable
        Me.btn_del_template.Enabled = enable
    End If
    
    Me.cbb_filter.Enabled = enable
    
    If Not enable Then
        Me.cbb_filter.BackColor = &H8000000F
    Else
        Me.cbb_filter.BackColor = &HFFFFFF
    End If
End Sub

Private Sub lb_Projectresult_Click()
    Me.btn_generate.Enabled = True
End Sub

Private Sub lb_Projectresult_Enter()
    Me.btn_generate.Enabled = True
End Sub

Private Sub lb_templates_Click()
    If click = False Then
        click = True
        
        If tool_art = "Demo" Or ((calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.lb_templates.list(Me.lb_templates.listindex, 0), VBA.Len(GlobalIdLeft)) = GlobalIdLeft) Then
            Me.tb_template_name.Enabled = False
            Me.tb_template_name.BackColor = &H8000000F
            Me.btn_del_template.Enabled = False
        Else
            Me.tb_template_name.Enabled = True
            Me.tb_template_name.BackColor = &HFFFFFF
            Me.btn_del_template.Enabled = True
        End If

        Me.tb_template_name.text = get_ValueWithoutGlobal(Me.lb_templates.list(Me.lb_templates.listindex, 0))
        click = False
    End If
End Sub

Private Sub tb_template_name_Enter()
    original_value = Me.tb_template_name.text
End Sub

Private Sub tb_template_name_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False Then
        If original_value <> Me.tb_template_name.text Then
            click = True
            
            If VBA.Left(Me.tb_template_name.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
                MsgBox "Der Name des Templates darf nicht mit '" & GlobalIdLeft & "' beginnen."
                Me.tb_template_name.text = get_ValueWithoutGlobal(Me.lb_templates.list(Me.lb_templates.listindex, 0))
                Exit Sub
            End If
            
            Dim TBValue As String
            
            TBValue = Me.tb_template_name.text
            
            Call SQL_Abfragen.Update_Settings_PViewer(Me.lb_templates.list(Me.lb_templates.listindex, 1), "Name", Me.tb_template_name.text)
            Call fill_standardfields
            
            If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") Then
                Me.lb_templates.text = TBValue
                Me.cbb_template.text = TBValue
            Else
                Me.lb_templates.text = GlobalIdLeft & TBValue & GlobalIdRight
                Me.cbb_template.text = GlobalIdLeft & TBValue & GlobalIdRight
            End If
            
            click = False
        End If
    End If
End Sub

Private Sub UserForm_Initialize()
    'click = True
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)

    Call SQL_Abfragen.Get_AllFilter
    Call fill_standardfields
    Me.cbb_filter.RowSource = "frm_Filter"
    Call clear_content
    Call load_content
    'click = False
End Sub

Private Sub load_content()
    If Not VBA.IsNumeric(calc_master.Range("last_PViewer_ID").value) Then Exit Sub
    On Error Resume Next

    Dim counter As Integer
    Dim art As String
    Dim Math As String
    Dim value_detail As String
    Dim cluster_detail As String
    Dim filter As String

    'Templatetitel laden
    Me.cbb_template.text = SQL_Abfragen.Get_Setting_PViewer_Value(calc_master.Range("last_PViewer_ID").value, "Name") 'calc_pipe_set.Cells(4, 3).value
    Me.lbl_viewer_id_value.Caption = Me.cbb_template.list(Me.cbb_template.listindex, 1)
    If Not VBA.IsNumeric(Me.lbl_viewer_id_value.Caption) Then Exit Sub

    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Allgemein laden
    'Filter laden

    filter = SQL_Abfragen.Get_Setting_PViewer_Value(calc_master.Range("last_PViewer_ID").value, "FK_Filter")

    For counter = 0 To Me.cbb_filter.listCount - 1
        If Me.cbb_filter.list(counter, 0) = filter Then
            Me.cbb_filter.listindex = counter
            Exit For
        End If
    Next counter
End Sub

Private Sub clear_content()
    On Error Resume Next
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Allgemein laden
    'Filter laden
    Me.cbb_filter.listindex = -1

    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Wert-Felder laden
    Me.lb_Projectresult.clear
End Sub

Attribute VB_Name = "frm_set_projekttabelle"
Attribute VB_Base = "0{0DEE238A-9189-4C95-88A7-7AFCCC95FAEC}{D920FBAB-44D2-4ADC-A2C4-0934893E63F8}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit

Private lb1_ItemIndex As Integer
Private lb2_ItemIndex As Integer
Private resskost(2) As String
Private cbb_cluster(2, 1) As String
Private click As Boolean
Private original_value As String
Private Stm_select As String
Private Stm_from As String
Private Stm_order As String
Private Stm_group As String
Private ress As String
Private costs As String
Private lb_click As Object

'########################################################
'                       Tamplates
'########################################################
Private Sub btn_add_template_Click()
    If click = False Then
        click = True
    
        Dim InsertColumns As String
        Dim insertValues As String
        
        If calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user" Then
            InsertColumns = "Name, FK_Users"
            insertValues = "New', '" & calc_master.Range("WindowsLogin").value & ""
        Else
            InsertColumns = ""
            insertValues = "New"
        End If
    
        If SQL_Abfragen.Insert_Template(insertValues, "DB_Settings_PjTable", InsertColumns) Then
            Call fill_standardfields
        Else
            MsgBox nlc_language.FindValue("SMessage_ErrAddTemp")
        End If
        
        click = False
    End If
End Sub

Private Sub btn_del_template_Click()
    If Me.lb_templates.listindex = -1 Then Exit Sub
    
    If click = False Then
        click = True
        
        If SQL_Abfragen.Delete_Template(Me.lb_templates.list(Me.lb_templates.listindex, 1), "DB_Settings_PjTable") = True Then
            If Me.cbb_template.value = Me.lb_templates.list(Me.lb_templates.listindex, 0) Then
                clear_content
            End If
            Me.tb_template_name.text = ""
            Call fill_standardfields
        Else
            MsgBox nlc_language.FindValue("SMessage_ErrDelTemp")
        End If
        
        click = False
    End If
End Sub

Private Sub Save_Katlist()
    If SQL_Abfragen.Insert_PjTable_K(Me.lbl_pjt_id_value.Caption, Me.lb_show_Kategorien, ress, costs) Then
    
    End If
End Sub

Private Sub btn_deselect_all_Click()
    Dim lCount As Long
    
    For lCount = 0 To Me.lb_ress_list.listCount - 1
        Me.lb_ress_list.Selected(lCount) = False
    Next
    
    'Werte in DB speichern
    If SQL_Abfragen.Insert_PjTable_RA(Me.lbl_pjt_id_value.Caption, Me.lb_ress_list) = False Then
        MsgBox nlc_language.FindValue("SMessage_ErrWriteDB")
    End If
End Sub

Private Sub btn_deselect_all_costs_Click()
    Dim lCount As Long
    
    For lCount = 0 To Me.lb_cost_list.listCount - 1
        Me.lb_cost_list.Selected(lCount) = False
    Next
    
    'Werte in DB speichern
    If SQL_Abfragen.Insert_PjTable_KA(Me.lbl_pjt_id_value.Caption, Me.lb_cost_list) = False Then
        MsgBox nlc_language.FindValue("SMessage_ErrWriteDB")
    End If
End Sub

Private Sub btn_edit_filter_Click()
    'Filter ID schreiben
    If Me.cbb_filter.listindex <> -1 Then
        calc_master.Range("last_filter_id").value = Me.cbb_filter.list(Me.cbb_filter.listindex, 0)
    End If
    
    frm_set_filter.Show
End Sub

Private Sub btn_select_all_Click()
    Dim lCount As Long
    
    For lCount = 0 To Me.lb_ress_list.listCount - 1
        Me.lb_ress_list.Selected(lCount) = True
    Next
    
    'Werte in DB speichern
    If SQL_Abfragen.Insert_PjTable_RA(Me.lbl_pjt_id_value.Caption, Me.lb_ress_list) = False Then
        MsgBox nlc_language.FindValue("SMessage_ErrWriteDB")
    End If
End Sub

Private Sub btn_select_all_costs_Click()
    Dim lCount As Long
    
    For lCount = 0 To Me.lb_cost_list.listCount - 1
        Me.lb_cost_list.Selected(lCount) = True
    Next
    
    'Werte in DB speichern
    If SQL_Abfragen.Insert_PjTable_KA(Me.lbl_pjt_id_value.Caption, Me.lb_cost_list) = False Then
        MsgBox nlc_language.FindValue("SMessage_ErrWriteDB")
    End If
End Sub

Private Sub cbb_filter_Change()
    If Me.cbb_filter.listindex = -1 Then
        Call EnableFields(False)
        Exit Sub
    End If
    
    Call EnableFields(True)

    If click = False Then
        click = True

        Call SQL_Abfragen.Update_Settings_PjTable(Me.lbl_pjt_id_value.Caption, "FK_Filter", Me.cbb_filter.list(Me.cbb_filter.listindex, 0))
        
        click = False
    End If
End Sub

Private Sub cbb_template_Change()
    If click = False Then
        If Me.cbb_template.listindex = -1 Then
            click = True
                
            Call clear_content
            Call EnableFilters(False)
            Call EnableFields(False)
                
            click = False
            Exit Sub
        End If
        
        Call EnableFilters(True)
        
        If click = False Then
            click = True
            
            If VBA.IsNumeric(Me.lbl_pjt_id_value.Caption) Then
                Call Save_Katlist
            End If
            
            Me.lbl_pjt_id_value.Caption = Me.cbb_template.list(Me.cbb_template.listindex, 1)
            calc_master.Range("last_pjt_ID").value = Me.cbb_template.list(Me.cbb_template.listindex, 1)
                    
            Call clear_content
            click = False
            'Me.cmbSortUpdDown.listindex = 0
'            Dim counter As Integer
'
'            For counter = 0 To Me.CMBSort.listCount - 1
'                If Me.CMBSort.list(counter, 0) = "8" Then
'                    Me.CMBSort.listindex = counter
'                    Exit For
'                End If
'            Next counter
            
            click = True
            
            Call load_content
            'Call check_resscost
            
            click = False
        End If
    End If
End Sub


Private Sub chb_pjt_RessGroup_Click()
    If click = False Then
        click = True

        Call SQL_Abfragen.Update_Settings_PjTable(Me.lbl_pjt_id_value.Caption, "Groups", nlc_intern.get_true_false(Me.chb_pjt_RessGroup.value))
        
        Call ress_lb_fill
        
        click = False
    End If
End Sub

Private Sub chkGroup_Click()
    If Me.cbb_filter.listindex = -1 Then
        Call EnableFields(False)
        Exit Sub
    End If
    
    Call EnableFields(True)

    If click = False Then
        click = True
        
        If Me.chkGroup.value = True Then
            Me.cmbGroupby.Enabled = True
            Me.cmbGroupby.BackColor = &HFFFFFF
        Else
            Me.cmbGroupby.listindex = -1
            Me.cmbGroupby.Enabled = False
            Me.cmbGroupby.BackColor = &H8000000F
        End If
    
    
        Call SQL_Abfragen.Update_Settings_PjTable(Me.lbl_pjt_id_value.Caption, "f_groupYN", Me.chkGroup.value)
        If Me.cmbGroupby.listindex = -1 Then
            Call SQL_Abfragen.Update_Settings_PjTable(Me.lbl_pjt_id_value.Caption, "f_groupby", 0)
        End If
        click = False
    End If
End Sub


Private Sub cmbGroupby_Change()
    If Me.cbb_filter.listindex = -1 Then
        Call EnableFields(False)
        Exit Sub
    End If
    
    Call EnableFields(True)

    If click = False Then
        click = True

        Call SQL_Abfragen.Update_Settings_PjTable(Me.lbl_pjt_id_value.Caption, "f_groupby", Me.cmbGroupby.list(Me.cmbGroupby.listindex, 0))
        
        click = False
    End If
End Sub

Private Sub CMBSort_Change()
    If Me.cbb_filter.listindex = -1 Then
        Exit Sub
    End If

    If click = False Then
        click = True

        Call SQL_Abfragen.Update_Settings_PjTable(Me.lbl_pjt_id_value.Caption, "f_orderby", Me.CMBSort.list(Me.CMBSort.listindex, 0))
        
        click = False
    End If
End Sub

Private Sub cmbSortUpdDown_Change()
    If Me.cbb_filter.listindex = -1 Then
        Exit Sub
    End If

    If click = False Then
        click = True

        Call SQL_Abfragen.Update_Settings_PjTable(Me.lbl_pjt_id_value.Caption, "f_orderway", Me.cmbSortUpdDown.list(Me.cmbSortUpdDown.listindex, 0))
        
        click = False
    End If
    
End Sub

Private Sub lb_cost_list_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If SQL_Abfragen.Insert_PjTable_KA(Me.lbl_pjt_id_value.Caption, Me.lb_cost_list) = False Then
        MsgBox nlc_language.FindValue("SMessage_ErrWriteDB")
    End If
End Sub

Private Sub lb_ress_list_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If SQL_Abfragen.Insert_PjTable_RA(Me.lbl_pjt_id_value.Caption, Me.lb_ress_list) = False Then
        MsgBox nlc_language.FindValue("SMessage_ErrWriteDB")
    End If
End Sub

Private Sub lb_templates_Click()
    If click = False Then
        click = True
        
        If tool_art = "Demo" Or ((calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.lb_templates.list(Me.lb_templates.listindex, 0), VBA.Len(GlobalIdLeft)) = GlobalIdLeft) Then
            Me.tb_template_name.Enabled = False
            Me.tb_template_name.BackColor = &H8000000F
            Me.btn_del_template.Enabled = False
        Else
            Me.tb_template_name.Enabled = True
            Me.tb_template_name.BackColor = &HFFFFFF
            Me.btn_del_template.Enabled = True
        End If

        Me.tb_template_name.text = get_ValueWithoutGlobal(Me.lb_templates.list(Me.lb_templates.listindex, 0))
        click = False
    End If
End Sub

Private Sub tb_template_name_Enter()
    original_value = Me.tb_template_name.text
End Sub

Private Sub tb_template_name_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False Then
        If original_value <> Me.tb_template_name.text Then
            click = True
            
            If VBA.Left(Me.tb_template_name.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
                MsgBox "Der Name des Templates darf nicht mit '" & GlobalIdLeft & "' beginnen."
                Me.tb_template_name.text = get_ValueWithoutGlobal(Me.lb_templates.list(Me.lb_templates.listindex, 0))
                Exit Sub
            End If
            
            Dim TBValue As String
            
            TBValue = Me.tb_template_name.text
            
            Call SQL_Abfragen.Update_Settings_PjTable(Me.lb_templates.list(Me.lb_templates.listindex, 1), "Name", TBValue)
            Call fill_standardfields
            
            If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") Then
                Me.lb_templates.text = TBValue
                click = False
                Me.cbb_template.text = TBValue
            Else
                Me.lb_templates.text = GlobalIdLeft & TBValue & GlobalIdRight
                click = False
                Me.cbb_template.text = GlobalIdLeft & TBValue & GlobalIdRight
            End If
        End If
    End If
End Sub

'########################################################
'                    Pfeilbuttons
'########################################################
'Das Item wird von lb_Kategorien zu lb_show_Kategorien geschoben
Private Sub btn_l2r_Click()
    If Me.lb_show_Kategorien.listindex >= 0 Then
        Call Drag(Me.lb_show_Kategorien, Me.lb_Kategorien)
        Call check_resscost
    End If
End Sub

'Das Item wird von lb_show_Kategorien zu lb_Kategorien geschoben
Private Sub btn_r2l_Click()
    If Me.lb_Kategorien.listindex >= 0 Then
        Call Drag(Me.lb_Kategorien, Me.lb_show_Kategorien)
        Call check_resscost
    End If
End Sub

'(f|fffd|r lb_show_Kategorien)
'Das aktive Item wird um eine Position nach unten geschoben
Private Sub btn_down_Click()
    Call nlc_ListboxEvents.btn_down_Click(Me.lb_show_Kategorien)
End Sub

'(f|fffd|r lb_show_Kategorien)
'Das aktive Item wird an die unterster Position geschoben
Private Sub btn_downall_Click()
    Call nlc_ListboxEvents.btn_downall_Click(Me.lb_show_Kategorien)
End Sub

'(f|fffd|r lb_show_Kategorien)
'Das aktive Item wird um eine Position nach oben geschoben
Private Sub btn_up_Click()
    Call nlc_ListboxEvents.btn_up_Click(Me.lb_show_Kategorien)
End Sub

'(f|fffd|r lb_show_Kategorien)
'Das aktive Item wird an oberste Position geschoben
Private Sub btn_upall_Click()
    Call nlc_ListboxEvents.btn_upall_Click(Me.lb_show_Kategorien)
End Sub


'########################################################
'                       Drag&Drop
'########################################################
Private Sub lb_show_Kategorien_BeforeDragOver(ByVal Cancel As MSForms.ReturnBoolean, ByVal Data As MSForms.DataObject, ByVal x As Single, _
                                    ByVal Y As Single, ByVal DragState As Long, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer)
    Cancel = True
    Effect = 1
End Sub

Private Sub lb_show_Kategorien_BeforeDropOrPaste(ByVal Cancel As MSForms.ReturnBoolean, ByVal Action As Long, ByVal Data As MSForms.DataObject, _
                                        ByVal x As Single, ByVal Y As Single, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer)
    Cancel = True
    Effect = 1
    Call Drop(Me.lb_show_Kategorien, lb_click) 'check_add(Me.lb_Kategorien))
    Call check_resscost
End Sub

Private Sub lb_show_Kategorien_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    Dim MyDataObject As DataObject
    If Button = 1 Then
        Call Drag(Me.lb_show_Kategorien)
    End If
End Sub

Private Sub lb_Kategorien_BeforeDragOver(ByVal Cancel As MSForms.ReturnBoolean, ByVal Data As MSForms.DataObject, ByVal x As Single, _
                                    ByVal Y As Single, ByVal DragState As Long, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer)
    Cancel = True
    Effect = 1
End Sub

Private Sub lb_Kategorien_BeforeDropOrPaste(ByVal Cancel As MSForms.ReturnBoolean, ByVal Action As Long, ByVal Data As MSForms.DataObject, _
                                        ByVal x As Single, ByVal Y As Single, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer)
    Cancel = True
    Effect = 1
    Call Drop(Me.lb_Kategorien, lb_click) 'check_add(Me.lb_show_Kategorien))
    Call check_resscost
End Sub

Private Sub lb_Kategorien_MouseMove(ByVal Button As Integer, ByVal Shift As Integer, ByVal x As Single, ByVal Y As Single)
    Dim MyDataObject As DataObject
    If Button = 1 Then
        Call Drag(Me.lb_Kategorien)
    End If
End Sub

Private Sub lb_Kategorien_Click()
    Set lb_click = Me.lb_Kategorien
End Sub

Private Sub lb_show_Kategorien_Click()
    Set lb_click = Me.lb_show_Kategorien
End Sub

'########################################################
'                       Berechnung
'########################################################

Private Function check_add(lb As Object) As Boolean
'    If lb.List(lb.listindex, 6) = Me.ComboBox1.text Then
        check_add = True
'    Else
'        check_add = False
'    End If
End Function

'Kopiert das selectierte Item in den Array und f|fffd|hrt das Drop Event aus (wenn erforderlich)
Private Sub Drag(lb As Object, Optional LB2 As Object)
    If VBA.Right(lb.name, 1) = 1 Then
        lb1_ItemIndex = lb.listindex
    Else
        lb2_ItemIndex = lb.listindex
    End If
    
    Dim Effect As Integer
    
    If lb.listindex >= 0 Then
        If check_add(lb) = True Then
            Call nlc_ListboxEvents.SaveListItemInArray(lb.listindex, lb)
        End If
        If LB2 Is Nothing Then
            Dim MyDataObject As DataObject
            Set MyDataObject = New DataObject
            Effect = MyDataObject.StartDrag
        Else
            Call Drop(LB2, lb) 'check_add(lb))
        End If
    End If
End Sub

'F|fffd|gt ein neues Item zur |fffd|bergebenen ListBox hinzu und tr|fffd|gt die Daten aus dem Array ein
'Das Element, welches vorher Kopiert wurde, wird entfernt
Private Sub Drop(lb As Object, LB2 As Object) ', add As Boolean)
        lb.addItem nlc_ListboxEvents.werte(0)
        Call LoadArrayInListItem(lb.listCount - 1, lb)
    
    On Error Resume Next
    If lb2_ItemIndex >= 0 Then
        LB2.RemoveItem (lb2_ItemIndex)
        lb2_ItemIndex = -1
    ElseIf lb1_ItemIndex >= 0 Then
        lb.RemoveItem (lb1_ItemIndex)
        lb1_ItemIndex = -1
    End If
End Sub


'########################################################
'                   Userform Spezifisch
'########################################################
Private Sub load_Listbox(lb As Object, LB2 As Object) ', load_art As String)
    Dim counter As Integer
    Dim sec_counter As Integer
    Dim index As Integer
    
    lb.clear
    LB2.clear
    
    For counter = 1 To calc_frm_masterdata.Range("frm_Kategorie").Rows.count Step 1
        For sec_counter = 1 To LB2.listCount - 1 Step 1
            If LB2.list(sec_counter, 0) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 3).value Then
                GoTo weiter_Kat
            End If
        Next sec_counter
        'Name
        lb.addItem calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 3).value
        index = lb.listCount - 1
        'ID
        lb.list(index, 1) = VBA.CStr(calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 1).value)
        'DB Tabellenname
        If calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value = "DropDown" Or calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value = "True/False" Then
            lb.list(index, 2) = "DB_Kategorie_Detail"
            lb.list(index, 4) = "FK_Kategorie_Detail"
            lb.list(index, 5) = "FK_Language_Name"
        Else
            lb.list(index, 2) = "DB_Kategoriewerte"
            lb.list(index, 4) = ""
            lb.list(index, 5) = "Wert"
        End If
        'DB FK Wert
        lb.list(index, 3) = "FK_Kategorie"
        'CheckBox Zuordnung
        lb.list(index, 6) = "Kategorien"
weiter_Kat:
    Next counter
End Sub

Private Sub load_content()
    If Not VBA.IsNumeric(calc_master.Range("last_pjt_ID").value) Then Exit Sub
    On Error Resume Next
    
    Call load_Listbox(Me.lb_Kategorien, Me.lb_show_Kategorien)
    
    Me.lb_Kategorien.addItem ress '"Ressourcen"
    Me.lb_Kategorien.addItem costs '"Kosten"
    
    lb1_ItemIndex = -1
    lb2_ItemIndex = -1
    
    Dim selected_kat As Variant
    Dim counter As Integer
    Dim sec_counter As Integer
    Dim filter As String
    
    'Templatetitel laden
    Me.cbb_template.text = SQL_Abfragen.Get_Setting_PjTable_Value(calc_master.Range("last_pjt_ID").value, "Name") 'calc_pipe_set.Cells(4, 3).value
    Me.lbl_pjt_id_value.Caption = Me.cbb_template.list(Me.cbb_template.listindex, 1)
    If Not VBA.IsNumeric(Me.lbl_pjt_id_value.Caption) Then Exit Sub
    
    'Orderby
    filter = SQL_Abfragen.Get_Setting_PjTable_Value(calc_master.Range("last_pjt_ID").value, "f_orderby")
    
    For counter = 0 To Me.CMBSort.listCount - 1
        If Me.CMBSort.list(counter, 0) = filter Then
            Me.CMBSort.listindex = counter
            Exit For
        End If
    Next counter
    
    filter = SQL_Abfragen.Get_Setting_PjTable_Value(calc_master.Range("last_pjt_ID").value, "f_orderway")
    
    For counter = 0 To Me.cmbSortUpdDown.listCount - 1
        If Me.cmbSortUpdDown.list(counter, 0) = filter Then
            Me.cmbSortUpdDown.listindex = counter
            Exit For
        End If
    Next counter
    
    
    
    'group Yes/No
    filter = SQL_Abfragen.Get_Setting_PjTable_Value(calc_master.Range("last_pjt_ID").value, "f_groupYN")
    If filter <> "Falsch" Then
        Me.cmbGroupby.Enabled = True
        Me.chkGroup.value = True
    Else
        Me.cmbGroupby.Enabled = False
        Me.chkGroup.value = False
    End If
    
    filter = SQL_Abfragen.Get_Setting_PjTable_Value(calc_master.Range("last_pjt_ID").value, "f_groupby")
    
    For counter = 0 To Me.cmbGroupby.listCount - 1
        If Me.cmbGroupby.list(counter, 0) = filter Then
            Me.cmbGroupby.listindex = counter
            Exit For
        End If
    Next counter
    
    
    
    
    'Allgemein laden
    'Filter laden
    
    filter = SQL_Abfragen.Get_Setting_PjTable_Value(calc_master.Range("last_pjt_ID").value, "FK_Filter")
    
    For counter = 0 To Me.cbb_filter.listCount - 1
        If Me.cbb_filter.list(counter, 0) = filter Then
            Me.cbb_filter.listindex = counter
            Exit For
        End If
    Next counter


    selected_kat = Get_Setting_PjTable_Kategorie(Me.lbl_pjt_id_value.Caption)
    
    For counter = 0 To UBound(selected_kat) Step 1
        For sec_counter = 0 To Me.lb_Kategorien.listCount - 1 Step 1
            If selected_kat(counter, 1) = "r" Then
                'Wenn Ressourcen, dann anders einf|fffd|gen
                If Me.lb_Kategorien.list(sec_counter, 0) = ress Then
                    Me.lb_Kategorien.listindex = sec_counter
                    
                    Call Drag(Me.lb_Kategorien, Me.lb_show_Kategorien)
                    Exit For
                End If
            ElseIf selected_kat(counter, 1) = "c" Then
                If Me.lb_Kategorien.list(sec_counter, 0) = costs Then
                    Me.lb_Kategorien.listindex = sec_counter
                    
                    Call Drag(Me.lb_Kategorien, Me.lb_show_Kategorien)
                    Exit For
                End If
            Else
                If Me.lb_Kategorien.list(sec_counter, 1) = selected_kat(counter, 0) Then
                    Me.lb_Kategorien.listindex = sec_counter
                    
                    Call Drag(Me.lb_Kategorien, Me.lb_show_Kategorien)
                    Exit For
                End If
            End If
        Next sec_counter
    Next counter
    
    chb_pjt_RessGroup.value = nlc_intern.get_true_false(SQL_Abfragen.Get_Setting_PjTable_Value(calc_master.Range("last_pjt_ID").value, "Groups"))
    
    Call check_resscost
    
    Call cost_lb_fill
    Call ress_lb_fill
    
    Call SQL_Abfragen.Get_Setting_Pjt_Ressourcen(Me.lbl_pjt_id_value.Caption, Me.lb_ress_list)
    Call SQL_Abfragen.Get_Setting_Pjt_Kosten(Me.lbl_pjt_id_value.Caption, Me.lb_cost_list)
    
    
    
'    click = False
End Sub

Private Sub clear_content()
    On Error Resume Next
    
    Me.lb_Kategorien.clear
    Me.lb_show_Kategorien.clear
    
    lb1_ItemIndex = -1
    lb2_ItemIndex = -1
    
    'Allgemein laden
    'Filter laden
    Me.cbb_filter.listindex = -1
    Me.cmbGroupby.listindex = -1
    Me.CMBSort.listindex = -1
    Me.cmbSortUpdDown.listindex = -1
    Me.chb_pjt_RessGroup.value = False
    
    Me.lb_cost_list.clear
    Me.lb_ress_list.clear
End Sub


Private Sub fill_standardfields()
    Dim i As Integer
    Dim selected_item As String
    Dim Template() As String
    
    If Not VBA.IsNull(Me.cbb_template.value) Then
        selected_item = Me.cbb_template.value
    End If
    
    Template = SQL_Abfragen.Get_Settings_dropdown("DB_Settings_PjTable")
    Me.cbb_template.clear
    Me.lb_templates.clear
    
    
    
    If Template(0, 0) <> "leer" Then
        For i = 0 To UBound(Template) Step 1
            Me.cbb_template.addItem (Template(i, 0))
            Me.cbb_template.list(Me.cbb_template.listCount - 1, 1) = (Template(i, 1))
            Me.lb_templates.addItem (Template(i, 0))
            Me.lb_templates.list(Me.lb_templates.listCount - 1, 1) = (Template(i, 1))
        Next i
    End If
    
    On Error Resume Next
    Me.cbb_template.value = selected_item
End Sub

Private Sub btn_generate_Click()
Dim GrpByStr As Integer
Dim OrdByStr As Integer
Dim OrdByArt As String

    If Me.cbb_filter.listindex = -1 Then
        MsgBox nlc_language.FindValue("SMessage_SelFilter")
        Exit Sub
    End If

    If Not checkFields Then
        MsgBox "Es muss mindestens 1 Feld zum Anzeigen gew|fffd|hlt sein. Bitte |fffd|berpr|fffd|fen Sie Ihre Eingabe.", vbInformation + vbOKOnly
        Exit Sub
    End If
    
    If Me.cmbSortUpdDown.listindex = -1 Or Me.CMBSort.listindex = -1 Then
        MsgBox "Es muss eine Sortierung angegeben werden. Bitte |fffd|berpr|fffd|fen Sie Ihre Eingabe.", vbInformation + vbOKOnly
        Exit Sub
    End If
    
    If Me.cmbGroupby.listindex = -1 Then
        Me.chkGroup.value = False
    End If

    If click = False Then
        click = True
                
        Call Save_Katlist
        calc_master.Range("Filter_PjTable").value = Me.cbb_filter.text
        Unload Me
        
        click = False
    End If
    If Me.cmbGroupby.listindex <> -1 Then
        GrpByStr = Me.cmbGroupby.list(Me.cmbGroupby.listindex, 0)
    End If
    If Me.CMBSort.listindex <> -1 Then
        OrdByStr = Me.CMBSort.list(Me.CMBSort.listindex, 0)
        OrdByArt = Me.CMBSort.list(Me.CMBSort.listindex, 2)
    End If
    
    'Call nlc_PJTabelle.generate_PJT(Me.cmbGroupBy, Me.cmbSort, Me.cmbSortUpdDown)
    Call nlc_PJTabelle.generate_PJT
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    Call Save_Katlist
End Sub

Private Sub UserForm_Initialize()
    click = True
    
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    
    'Call load_Listbox(Me.lb_Kategorien, Me.lb_show_Kategorien) ', Me.ComboBox1.text)
    
    Call SQL_Abfragen.Get_AllFilter
    Call SQL_Abfragen.Get_AllKategorien
    Call SQL_Abfragen.Get_AllRessourcenarten
    Call SQL_Abfragen.Get_AllKostenarten
    Call fill_standardfields
    
    'Ressourcen und Kosten hinzuf|fffd|gen
    ress = SQL_Abfragen.Get_Language_Value("resources")
    costs = SQL_Abfragen.Get_Language_Value("costs")
    Me.cbb_filter.RowSource = "frm_Filter"
    Call generate_cmb_groupby
    Call generate_cmb_Orderby
    Me.cmbSortUpdDown.addItem "aufsteigend"
    Me.cmbSortUpdDown.addItem "absteigend"
    
    Call clear_content
    Call load_content
    
    click = False
    
    If Me.cbb_template.listindex <> -1 And Me.cbb_filter.listindex <> -1 Then
        Call EnableFields(True)
        Call EnableFilters(True)
    Else
        Call EnableFields(False)
        Call EnableFilters(False)
    End If
End Sub

Private Sub generate_cmb_groupby()
    'Benutzerdefinierte Felder m|fffd|ssen begrenzt werden
    'Zur Auswahl stehen: True/False; Dropdown
        
    Dim counter As Integer
    Dim art As String
    Dim achsen As Boolean
    
    'Me.cmbGroupBy.clear
    
    'Me.cmbGroupBy.clear
    'Me.cmbGroupBy.Enabled = True
    
'    If Me.cbb_farbe_art.listindex <> 0 Then
'        Me.cbb_farbe_art_detail.BackColor = &HFFFFFF
'        Me.cbb_farbe_art_detail.Enabled = True
'    End If
    
'    If Me.cbb_farbe_art.listindex = 0 Then
'        Me.cbb_farbe_art_detail.BackColor = &H8000000F
'        Me.cbb_farbe_art_detail.Enabled = False
'        Me.cbb_farbe_art_detail.listindex = -1
'
'        Call Get_Setting_Pipe_Value(Me.lbl_pipe_id_value.Caption, "Color_ID")
'    ElseIf Me.cbb_farbe_art.listindex = 1 Then
    'Benutzerdefinierte Felder
        For counter = 1 To calc_frm_masterdata.Range("frm_Kategorie").Rows.count Step 1
            art = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
            achsen = nlc_intern.get_true_false(calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 9).value)
            If achsen = True And (art = "True/False" Or art = "DropDown") Then
                Me.cmbGroupby.addItem calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 1).value
                Me.cmbGroupby.list(Me.cmbGroupby.listCount - 1, 1) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 3).value
                Me.cmbGroupby.list(Me.cmbGroupby.listCount - 1, 2) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
            End If
        Next counter
'    End If
End Sub

Private Sub generate_cmb_Orderby()
    'Benutzerdefinierte Felder m|fffd|ssen begrenzt werden
    'Zur Auswahl stehen: True/False; Dropdown
        
    Dim counter As Integer
    Dim art As String
    Dim achsen As Boolean
    
    'Me.cmbGroupBy.clear
  
    'Me.cmbGroupBy.clear
    'Me.cmbGroupBy.Enabled = True
    
'    If Me.cbb_farbe_art.listindex <> 0 Then
'        Me.cbb_farbe_art_detail.BackColor = &HFFFFFF
'        Me.cbb_farbe_art_detail.Enabled = True
'    End If
    
'    If Me.cbb_farbe_art.listindex = 0 Then
'        Me.cbb_farbe_art_detail.BackColor = &H8000000F
'        Me.cbb_farbe_art_detail.Enabled = False
'        Me.cbb_farbe_art_detail.listindex = -1
'
'        Call Get_Setting_Pipe_Value(Me.lbl_pipe_id_value.Caption, "Color_ID")
'    ElseIf Me.cbb_farbe_art.listindex = 1 Then
    'Benutzerdefinierte Felder
        For counter = 1 To calc_frm_masterdata.Range("frm_Kategorie").Rows.count Step 1
            art = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
            achsen = nlc_intern.get_true_false(calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 9).value)
            If achsen = True And (art = "True/False" Or art = "DropDown" Or art = "Number" Or art = "Text" Or art = "Date") Then
                Me.CMBSort.addItem calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 1).value
                Me.CMBSort.list(Me.CMBSort.listCount - 1, 1) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 3).value
                Me.CMBSort.list(Me.CMBSort.listCount - 1, 2) = calc_frm_masterdata.Range("frm_Kategorie").Cells(counter, 4).value
            End If
        Next counter
'    End If
End Sub



Private Sub cost_lb_fill()
    Me.lb_cost_list.clear
    
    Dim counter As Integer
    Dim lb_counter As Integer
    Dim last_group As String
    
    lb_counter = 0
    
    For counter = 1 To calc_frm_masterdata.Range("frm_Kostenarten").Rows.count
        If VBA.LCase(VBA.Left(calc_frm_masterdata.Range("frm_Kostenarten").Cells(counter, 3).value, 4)) <> "auto" Then
            If calc_frm_masterdata.Range("frm_Kostenarten").Cells(counter, 3).value <> "-" Then
                Me.lb_cost_list.addItem calc_frm_masterdata.Range("frm_Kostenarten").Cells(counter, 1).value
                Me.lb_cost_list.list(lb_counter, 1) = calc_frm_masterdata.Range("frm_Kostenarten").Cells(counter, 3).value
                lb_counter = lb_counter + 1
            End If
        End If
    Next counter
End Sub

Private Sub ress_lb_fill()
    Me.lb_ress_list.clear
    
    Dim counter As Integer
    Dim lb_counter As Integer
    Dim last_group As String
    
    lb_counter = 0
    
    For counter = 1 To calc_frm_masterdata.Range("frm_Ressourcenarten").Rows.count
        If Me.chb_pjt_RessGroup.value = True Then
        'nur mit Gruppen f|fffd|llen
            If VBA.Left(calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 3).value, 5) <> "     " Then
                Me.lb_ress_list.addItem calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 1).value
                Me.lb_ress_list.list(lb_counter, 1) = calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 3).value
                
                lb_counter = lb_counter + 1
            End If
        Else
            'nur mit Ressourcen f|fffd|llen (+ Gruppenk|fffd|rzel)
            If VBA.Left(calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 3).value, 5) = "     " Then
                Me.lb_ress_list.addItem calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 1).value
                Me.lb_ress_list.list(lb_counter, 1) = VBA.Right(calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 3).value, VBA.Len(calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 3).value) - 5) & " (" & last_group & ")"
                
                lb_counter = lb_counter + 1
            Else
                last_group = calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 2).value
            End If
        End If
    Next counter
End Sub

Private Sub check_resscost(Optional enable As Boolean = True)
    Dim counter As Integer
    Dim check_ress As Boolean
    Dim check_costs As Boolean
    
    If Me.lb_show_Kategorien.listCount = 0 Then
        Me.chb_pjt_RessGroup.Enabled = False
        Me.lb_ress_list.Enabled = False
        Me.btn_select_all.Enabled = False
        Me.btn_deselect_all.Enabled = False
        
        Me.lb_cost_list.Enabled = False
        Me.btn_select_all_costs.Enabled = False
        Me.btn_deselect_all_costs.Enabled = False
        
        Me.chb_pjt_RessGroup.BackColor = &H8000000F
        Me.lb_ress_list.BackColor = &H8000000F
        Me.lb_cost_list.BackColor = &H8000000F
    End If
    
    
    For counter = 0 To Me.lb_show_Kategorien.listCount - 1
        If Me.lb_show_Kategorien.list(counter, 0) = ress And check_ress = False Then
            Me.chb_pjt_RessGroup.Enabled = enable
            Me.lb_ress_list.Enabled = enable
            Me.btn_select_all.Enabled = enable
            Me.btn_deselect_all.Enabled = enable
            
            check_ress = True
        ElseIf check_ress = False Then
            Me.chb_pjt_RessGroup.Enabled = False
            Me.lb_ress_list.Enabled = False
            Me.btn_select_all.Enabled = False
            Me.btn_deselect_all.Enabled = False
        End If
        
        If Me.lb_show_Kategorien.list(counter, 0) = costs And check_costs = False Then
            Me.lb_cost_list.Enabled = enable
            Me.btn_select_all_costs.Enabled = enable
            Me.btn_deselect_all_costs.Enabled = enable
            
            check_costs = True
        ElseIf check_costs = False Then
            Me.lb_cost_list.Enabled = False
            Me.btn_select_all_costs.Enabled = False
            Me.btn_deselect_all_costs.Enabled = False
        End If
        
        If check_ress = True And check_costs = True Then
            Exit For
        End If
    Next counter
    
    If check_ress Then
        If Me.lb_ress_list.BackColor <> &HFFFFFF Then
            Me.chb_pjt_RessGroup.BackColor = &HFFFFFF
            Me.lb_ress_list.BackColor = &HFFFFFF
        End If
    Else
        Me.chb_pjt_RessGroup.BackColor = &H8000000F
        Me.lb_ress_list.BackColor = &H8000000F
    End If
    
    If check_costs Then
        If Me.lb_cost_list.BackColor <> &HFFFFFF Then
            Me.lb_cost_list.BackColor = &HFFFFFF
        End If
    Else
        Me.lb_cost_list.BackColor = &H8000000F
    End If
    
    If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
        Me.lb_cost_list.Enabled = False
        Me.btn_select_all_costs.Enabled = False
        Me.btn_deselect_all_costs.Enabled = False
        Me.lb_cost_list.BackColor = &H8000000F
        
        Me.chb_pjt_RessGroup.Enabled = False
        Me.lb_ress_list.Enabled = False
        Me.btn_select_all.Enabled = False
        Me.btn_deselect_all.Enabled = False
        Me.chb_pjt_RessGroup.BackColor = &H8000000F
        Me.lb_ress_list.BackColor = &H8000000F
    End If
End Sub

Private Sub EnableFilters(enable As Boolean)
    If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
        enable = False
    End If
    
    Me.cbb_filter.Enabled = enable
    
    If Not enable Then
        Me.cbb_filter.BackColor = &H8000000F
    Else
        Me.cbb_filter.BackColor = &HFFFFFF
    End If
End Sub

Private Sub EnableFields(enable As Boolean)
    If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
        enable = False
    End If
    
    If tool_art = "Demo" Then
        enable = False
        Me.btn_add_template.Enabled = enable
        Me.btn_del_template.Enabled = enable
    End If
    
    Me.lb_Kategorien.Enabled = enable
    Me.lb_show_Kategorien.Enabled = enable
    Me.CMBSort.Enabled = enable
    Me.cmbSortUpdDown.Enabled = enable
    Me.chkGroup.Enabled = enable
    
    If Me.chkGroup.value = True Then
        Me.cmbGroupby.Enabled = enable
        If Not enable Then
            Me.cmbGroupby.BackColor = &H8000000F
        Else
            Me.cmbGroupby.BackColor = &HFFFFFF
        End If
    Else
        Me.cmbGroupby.Enabled = False
        Me.cmbGroupby.BackColor = &H8000000F
    End If
    
    
    'Call check_resscost(enable)
    
    If Not enable Then
        Me.CMBSort.BackColor = &H8000000F
        Me.cmbSortUpdDown.BackColor = &H8000000F
        Me.lb_Kategorien.BackColor = &H8000000F
        Me.lb_show_Kategorien.BackColor = &H8000000F
    Else
        Me.CMBSort.BackColor = &HFFFFFF
        Me.cmbSortUpdDown.BackColor = &HFFFFFF
        Me.lb_Kategorien.BackColor = &HFFFFFF
        Me.lb_show_Kategorien.BackColor = &HFFFFFF
    End If
    
End Sub

Private Function checkFields() As Boolean
    If Me.cbb_template.listindex <> -1 And Me.cbb_filter.listindex <> -1 And Me.lb_show_Kategorien.listCount > 0 Then
        checkFields = True
    Else
        checkFields = False
    End If
End Function

Attribute VB_Name = "frm_set_ress_histo"
Attribute VB_Base = "0{9A4E1942-E345-4010-B33E-D4D93F237D3C}{1F8AD906-FE71-4D6A-95E5-1245F1B2E02C}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private click As Boolean
Private original_value As String

Private Sub btn_add_template_Click()
    If click = False Then
        click = True
        
        Dim InsertColumns As String
        Dim insertValues As String
        
        If calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user" Then
            InsertColumns = "Name, FK_Users"
            insertValues = "New', '" & calc_master.Range("WindowsLogin").value & ""
        Else
            InsertColumns = ""
            insertValues = "New"
        End If
        
        If SQL_Abfragen.Insert_Template(insertValues, "DB_Settings_RessHisto", InsertColumns) Then
            Call fill_standardfields
        Else
            MsgBox nlc_language.FindValue("SMessage_ErrAddTemp")
        End If
        
        click = False
    End If
End Sub

Private Sub btn_del_template_Click()
    If Me.lb_templates.listindex = -1 Then Exit Sub
    
    If click = False Then
        click = True
        
        'Verkn|fffd|pfte Tabelle DB_Settings_RessHisto_RA hat eine L|fffd|schweitergabe (auch von Ressourcenarten aus)
        If SQL_Abfragen.Delete_Template(Me.lb_templates.list(Me.lb_templates.listindex, 1), "DB_Settings_RessHisto") = True Then
            Call fill_standardfields
            Me.tb_template_name.text = ""
        Else
            MsgBox nlc_language.FindValue("SMessage_ErrDelTemp")
        End If

        click = False
    End If
End Sub

Private Sub btn_deselect_all_Click()
    Dim lCount As Long
    
    For lCount = 0 To Me.lb_ress_list.listCount - 1
        Me.lb_ress_list.Selected(lCount) = False
    Next
    
    'Werte in DB speichern
    If SQL_Abfragen.Insert_RessHisto_RA(Me.lbl_rhg_id_value.Caption, Me.lb_ress_list) = False Then
        nlc_language.FindValue ("SMessage_ErrWriteDB")
    End If
End Sub

Private Sub btn_edit_filter_Click()
    'Filter ID schreiben
    If Me.cbb_filter.listindex <> -1 Then
        calc_master.Range("last_filter_id").value = Me.cbb_filter.list(Me.cbb_filter.listindex, 0)
    End If
    
    frm_set_filter.Show
End Sub

Private Sub btn_generate_Click()
    If Me.cbb_filter.listindex < 0 Then
        MsgBox nlc_language.FindValue("SMessage_SelFilter")
        Exit Sub
    End If
    
    If Not checkFields Then
        MsgBox "Es m|fffd|ssen alle Felder ausgew|fffd|hlt werden. Bitte |fffd|berpr|fffd|fen Sie Ihre Eingabe.", vbInformation + vbOKOnly
        Exit Sub
    End If
    
    nlc_intern.Application_off
    nlc_ppf_resshisto.Unprotect nlc_intern.get_pw
    
    calc_master.Range("last_rhg_ID").value = Me.cbb_template.list(Me.cbb_template.listindex, 1)
    
    If SQL_Abfragen.Insert_RessHisto_RA(Me.lbl_rhg_id_value.Caption, Me.lb_ress_list) = False Then
        nlc_language.FindValue ("SMessage_ErrWriteDB")
    End If
    
    nlc_ppf_resshisto.Activate
    calc_master.Range("Filter_RHG").value = Me.cbb_filter.text
    
    Call SQL_Abfragen.Get_RessHisto_Calc(Me.lbl_rhg_id_value.Caption)
    
    Unload Me
    
    nlc_ppf_resshisto.Protect nlc_intern.get_pw
    nlc_intern.Application_on
End Sub

Private Sub btn_select_all_Click()
    Dim lCount As Long
    
    For lCount = 0 To Me.lb_ress_list.listCount - 1
        Me.lb_ress_list.Selected(lCount) = True
    Next
    
    'Werte in DB speichern
    If SQL_Abfragen.Insert_RessHisto_RA(Me.lbl_rhg_id_value.Caption, Me.lb_ress_list) = False Then
        nlc_language.FindValue ("SMessage_ErrWriteDB")
    End If
End Sub

Private Sub cbb_filter_Change()
    If Me.cbb_filter.listindex = -1 Then
        Call EnableFields(False)
        Exit Sub
    End If
    
    Call EnableFields(True)
    
    If click = False Then
        click = True

        Call SQL_Abfragen.Update_Settings_RessHisto(Me.lbl_rhg_id_value.Caption, "FK_Filter", Me.cbb_filter.list(Me.cbb_filter.listindex, 0))
        
        click = False
    End If
End Sub

Private Sub cbb_template_Change()
    'If click = False Then
        click = True
        If Me.cbb_template.listindex = -1 Then
            Call clear_content
            Call EnableFilters(False)
            Call EnableFields(False)
                
            click = False
            Exit Sub
        End If
        
        Call EnableFilters(True)
        
        click = True
        If Me.cbb_template.text <> "" Then
            Me.lbl_rhg_id_value.Caption = Me.cbb_template.list(Me.cbb_template.listindex, 1)
            calc_master.Range("last_rhg_ID").value = Me.cbb_template.list(Me.cbb_template.listindex, 1)
            Call clear_content
            Call load_content
        End If
        click = False
    'End If
End Sub

Private Sub cbb_year_Change()
    If click = False Then
        click = True

        Call SQL_Abfragen.Update_Settings_RessHisto(Me.lbl_rhg_id_value.Caption, "Year", Me.cbb_year.text)
        
        click = False
    End If
End Sub

Private Sub chb_rhg_RessGroup_Click()
    If click = False Then
        click = True

        Call SQL_Abfragen.Update_Settings_RessHisto(Me.lbl_rhg_id_value.Caption, "Groups", nlc_intern.get_true_false(Me.chb_rhg_RessGroup.value))
        
        Call ress_lb_fill
        
        click = False
    End If
End Sub

Private Sub lb_ress_list_Exit(ByVal Cancel As MSForms.ReturnBoolean)
    If SQL_Abfragen.Insert_RessHisto_RA(Me.lbl_rhg_id_value.Caption, Me.lb_ress_list) = False Then
        nlc_language.FindValue ("SMessage_ErrWriteDB")
    End If
End Sub

Private Sub lb_templates_Click()
    If click = False Then
        click = True
        
        If tool_art = "Demo" Or ((calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.lb_templates.list(Me.lb_templates.listindex, 0), VBA.Len(GlobalIdLeft)) = GlobalIdLeft) Then
            Me.tb_template_name.Enabled = False
            Me.tb_template_name.BackColor = &H8000000F
            Me.btn_del_template.Enabled = False
        Else
            Me.tb_template_name.Enabled = True
            Me.tb_template_name.BackColor = &HFFFFFF
            Me.btn_del_template.Enabled = True
        End If
        
        Me.tb_template_name.text = get_ValueWithoutGlobal(Me.lb_templates.list(Me.lb_templates.listindex, 0))
        click = False
    End If
End Sub

Private Sub tb_template_name_Enter()
    If Me.lb_templates.listindex = -1 Then Me.tb_template_name.text = ""
    original_value = Me.tb_template_name.text
End Sub

Private Sub tb_template_name_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If click = False Then
        If original_value <> Me.tb_template_name.text And Me.lb_templates.listindex > -1 Then
            click = True
            
            If VBA.Left(Me.tb_template_name.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
                MsgBox "Der Name des Templates darf nicht mit '" & GlobalIdLeft & "' beginnen."
                Me.tb_template_name.text = get_ValueWithoutGlobal(Me.lb_templates.list(Me.lb_templates.listindex, 0))
                Exit Sub
            End If
            
            Dim TBValue As String
            
            TBValue = Me.tb_template_name.text
            
            Call SQL_Abfragen.Update_Settings_RessHisto(Me.lb_templates.list(Me.lb_templates.listindex, 1), "Name", TBValue)
            Call fill_standardfields
            
            If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") Then
                Me.lb_templates.text = TBValue
                Me.cbb_template.text = TBValue
            Else
                Me.lb_templates.text = GlobalIdLeft & TBValue & GlobalIdRight
                Me.cbb_template.text = GlobalIdLeft & TBValue & GlobalIdRight
            End If
            
            click = False
        End If
    End If
End Sub

Private Sub UserForm_Initialize()
    Application.ScreenUpdating = False
    click = True
    
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    
    Call SQL_Abfragen.Get_AllRessourcenarten
    Call SQL_Abfragen.Get_AllFilter
    Call fill_standardfields
    
    Application.Calculate
    Me.cbb_filter.RowSource = "frm_Filter"
    click = True
    
    If Me.cbb_template.listindex <> -1 And Me.cbb_filter.listindex <> -1 Then
        Call EnableFields(True)
    Else
        Call EnableFields(False)
    End If
    
    Call clear_content
    Call load_content
    
    click = False
    Application.ScreenUpdating = True
End Sub

Private Sub generate_cbb_year()
    Dim i As Integer
    Dim selected_item As String
    
    If Not VBA.IsNull(Me.cbb_year.value) Then
        selected_item = Me.cbb_year.value
    End If
    
    Me.cbb_year.clear
    'cbb_year bef|fffd|llen
    For i = 2000 To 2099 Step 1
        Me.cbb_year.addItem i
    Next i
    
    On Error Resume Next
    Me.cbb_year.value = selected_item
End Sub

Private Sub fill_standardfields()
    'Templates laden (in DropDown und Listbox)
    Dim Template() As String
    Dim i As Integer
    Dim selected_item As String
    
    If Not VBA.IsNull(Me.cbb_template.value) Then
        selected_item = Me.cbb_template.value
    End If

    Template = SQL_Abfragen.Get_Settings_dropdown("DB_Settings_RessHisto")
    Me.cbb_template.clear
    Me.lb_templates.clear

    If Template(0, 0) <> "leer" Then
        For i = 0 To UBound(Template) Step 1
            Me.cbb_template.addItem (Template(i, 0))
            Me.cbb_template.list(Me.cbb_template.listCount - 1, 1) = (Template(i, 1))
            Me.lb_templates.addItem (Template(i, 0))
            Me.lb_templates.list(Me.lb_templates.listCount - 1, 1) = (Template(i, 1))
        Next i
    End If
    
    On Error Resume Next
    Me.cbb_template.value = selected_item

    'Filter bef|fffd|llen
    'geht noch nicht, da die Filtertabelle fehlt und demnach die ID nicht mit dem Name aufgel|fffd|st werden kann
End Sub

Private Sub load_content()
    If Not VBA.IsNumeric(calc_master.Range("last_rhg_ID").value) Then Exit Sub
    On Error Resume Next

    Dim counter As Integer
    Dim art As String
    Dim filter As String

    'Templatetitel laden
    Me.cbb_template.text = SQL_Abfragen.Get_Setting_Rhg_Value(calc_master.Range("last_rhg_ID").value, "Name") 'calc_pipe_set.Cells(4, 3).value
    Me.lbl_rhg_id_value.Caption = Me.cbb_template.list(Me.cbb_template.listindex, 1)
    If Not VBA.IsNumeric(Me.lbl_rhg_id_value.Caption) Then Exit Sub

    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Allgemein laden
    'Filter laden
    filter = Get_Setting_Rhg_Value(calc_master.Range("last_rhg_ID").value, "FK_Filter")
    
    For counter = 0 To Me.cbb_filter.listCount - 1
        If Me.cbb_filter.list(counter, 0) = filter Then
            Me.cbb_filter.listindex = counter
        End If
    Next counter

    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Jahr laden
    Me.cbb_year.text = VBA.Year(VBA.Now) 'SQL_Abfragen.Get_Setting_Rhg_Value(Me.lbl_rhg_id_value.Caption, "Year")
    Call SQL_Abfragen.Update_Settings_RessHisto(Me.lbl_rhg_id_value.Caption, "Year", Me.cbb_year.text)
    
    'Gruppen Checkbox laden
    Me.chb_rhg_RessGroup.value = SQL_Abfragen.Get_Setting_Rhg_Value(Me.lbl_rhg_id_value.Caption, "Groups")
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Ressourcenwerte laden (Ressourcenliste kommt von frm_Ressourcenarten)
    Call ress_lb_fill
    Call SQL_Abfragen.Get_Setting_Rhg_Ressourcen(Me.lbl_rhg_id_value.Caption, Me.lb_ress_list)
End Sub

Private Sub clear_content()
    Call generate_cbb_year

    On Error Resume Next
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Allgemein laden
    'Filter laden
    Me.cbb_filter.listindex = -1

    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Jahr laden
    Me.cbb_year.listindex = -1
    
    'Gruppen Checkbox laden
    Me.chb_rhg_RessGroup.value = False
    '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    'Ressourcenwerte laden (Ressourcenliste kommt von frm_Ressourcenarten)
    Me.lb_ress_list.clear
End Sub


Private Sub ress_lb_fill()
    Me.lb_ress_list.clear
    
    Dim counter As Integer
    Dim lb_counter As Integer
    Dim last_group As String
    
    lb_counter = 0
    
    For counter = 1 To calc_frm_masterdata.Range("frm_Ressourcenarten").Rows.count
        If Me.chb_rhg_RessGroup.value = True Then
        'nur mit Gruppen f|fffd|llen
            If VBA.Left(calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 3).value, 5) <> "     " Then
                Me.lb_ress_list.addItem calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 1).value
                Me.lb_ress_list.list(lb_counter, 1) = calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 3).value
                
                lb_counter = lb_counter + 1
            End If
        Else
            'nur mit Ressourcen f|fffd|llen (+ Gruppenk|fffd|rzel)
            If VBA.Left(calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 3).value, 5) = "     " Then
                Me.lb_ress_list.addItem calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 1).value
                Me.lb_ress_list.list(lb_counter, 1) = VBA.Right(calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 3).value, VBA.Len(calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 3).value) - 5) & " (" & last_group & ")"
                
                lb_counter = lb_counter + 1
            Else
                last_group = calc_frm_masterdata.Range("frm_Ressourcenarten").Cells(counter, 2).value
            End If
        End If
    Next counter
End Sub

Private Sub EnableFilters(enable As Boolean)
    If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
        enable = False
    End If
    
    Me.cbb_filter.Enabled = enable
    
    If Not enable Then
        Me.cbb_filter.BackColor = &H8000000F
    Else
        Me.cbb_filter.BackColor = &HFFFFFF
    End If
End Sub

Private Sub EnableFields(enable As Boolean)
    If (calc_master.Range("Login").value <> "admin" And calc_master.Range("Login").value <> "user") And VBA.Left(Me.cbb_template.text, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
        enable = False
    End If
    
    If tool_art = "Demo" Then
        enable = False
        Me.btn_add_template.Enabled = enable
        Me.btn_del_template.Enabled = enable
    End If
    
    
    Me.cbb_year.Enabled = enable
    Me.lb_ress_list.Enabled = enable
    Me.chb_rhg_RessGroup.Enabled = enable
    Me.btn_deselect_all.Enabled = enable
    Me.btn_select_all.Enabled = enable
    
    If Not enable Then
        Me.cbb_year.BackColor = &H8000000F
        Me.chb_rhg_RessGroup.BackColor = &H8000000F
        Me.lb_ress_list.BackColor = &H8000000F
    Else
        Me.cbb_year.BackColor = &HFFFFFF
        Me.chb_rhg_RessGroup.BackColor = &HFFFFFF
                        
        If Me.lb_ress_list.BackColor <> &HFFFFFF Then
            Me.lb_ress_list.BackColor = &HFFFFFF
        End If
    End If
End Sub

Private Function checkFields() As Boolean
    If Me.chb_rhg_RessGroup.value <> True And Me.chb_rhg_RessGroup.value <> False Then
        Me.chb_rhg_RessGroup.value = False
    End If

    If Me.cbb_template.listindex <> -1 And Me.cbb_filter.listindex <> -1 And Me.cbb_year.listindex <> -1 Then
        checkFields = True
    Else
        checkFields = False
    End If
End Function
Attribute VB_Name = "frm_verfuegbarkeit"
Attribute VB_Base = "0{4627EAF9-9961-4C77-AB85-DEDD508AE023}{38C7E277-7498-4BF4-8969-104CD09E62E2}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
Option Explicit
Private click As Boolean
Private changes As Boolean
Private orignal_value As String
Private onchangevalue As String

Private Sub btn_add_verf_Click()
    frm_addVerf.lbl_ressart_id.Caption = Me.lbl_ressart_id.Caption
    frm_addVerf.Show
End Sub

Private Sub btn_del_verf_Click()
    If click = False And Me.lb_verfuegbarkeit.listindex >= 0 And Me.lbl_verf_select_index_value.Caption <> "ID" Then
        click = True
        
        If MsgBox("Sind Sie sicher, dass Sie die Verf|fffd|gbarkeit vom " & Me.tb_month.text & "." & Me.tb_year.text & " l|fffd|schen wollen? Diese Aktion kann nicht r|fffd|ckg|fffd|ngig gemacht werden!", vbQuestion + vbYesNo) = vbYes Then
            Call SQL_Abfragen.Delete_Verfuegbarkeit(Me.lbl_verf_select_index_value.Caption)
            Call SQL_Abfragen.Get_VerfuegbarkeitFromRessart(Me.lbl_ressart_id.Caption)
            
            Me.lb_verfuegbarkeit.RowSource = "frm_Verfuegbarkeit"
            Me.tb_month.text = ""
            Me.tb_year.text = ""
            Me.tb_value.text = ""
            Me.lb_verfuegbarkeit.listindex = -1
        End If
        
        click = False
    End If
End Sub

Private Sub btn_schliessen_Click()
    Unload Me
End Sub

Private Sub lb_verfuegbarkeit_Click()
    If click = False Then
        On Error Resume Next
        click = True
        
        Me.lbl_verf_select_index_value.Caption = Me.lb_verfuegbarkeit.list(Me.lb_verfuegbarkeit.listindex, 0)

        Dim list_index As Integer
        
        list_index = Me.lb_verfuegbarkeit.listindex
        
        Me.lbl_verf_select_index_value.Caption = Me.lb_verfuegbarkeit.list(list_index, 0)

        Me.tb_month.text = Me.lb_verfuegbarkeit.list(list_index, 1)
        Me.tb_year.text = Me.lb_verfuegbarkeit.list(list_index, 2)
        Me.tb_value.text = Me.lb_verfuegbarkeit.list(list_index, 3)
        
        Call SetActivity(True)
        
        Me.lb_verfuegbarkeit.RowSource = "frm_Verfuegbarkeit"
        Me.lb_verfuegbarkeit.listindex = list_index
        
        click = False
    End If
End Sub

Private Sub tb_month_Change()
    If Me.tb_month.text <> "" Then
        If VBA.CInt(Me.tb_month.text) > 12 Then
            Me.tb_month.text = onchangevalue
        Else
            onchangevalue = Me.tb_month.text
        End If
    End If
End Sub

Private Sub tb_month_Enter()
    orignal_value = Me.tb_month.text
    onchangevalue = Me.tb_month.text
End Sub

Private Sub tb_month_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If orignal_value <> Me.tb_month.text And Me.tb_month.text <> "" Then
        If VBA.CInt(Me.tb_month.text) > 12 Or VBA.CInt(Me.tb_month.text) < 0 Then
            Me.tb_month.text = orignal_value
            Exit Sub
        End If
    
        If click = False And Me.lb_verfuegbarkeit.listindex >= 0 And Me.lbl_verf_select_index_value.Caption <> "ID" Then
            click = True
            Dim list_index As Integer

            list_index = Me.lb_verfuegbarkeit.listindex
            
            If VBA.IsNumeric(Me.lb_verfuegbarkeit.list(list_index, 0)) Then
                Call SQL_Abfragen.Update_Verfuegbarkeit(Me.lb_verfuegbarkeit.list(list_index, 0), "Monat", Me.tb_month.text)
                Call SQL_Abfragen.Get_VerfuegbarkeitFromRessart(Me.lbl_ressart_id.Caption)
            End If
            
            Me.lb_verfuegbarkeit.RowSource = "frm_Verfuegbarkeit"
            Me.lb_verfuegbarkeit.listindex = list_index
            Call select_selected_item
            
            changes = True
            
            click = False
        End If
    End If
End Sub

Private Sub tb_month_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub tb_value_Enter()
    orignal_value = Me.tb_value.text
End Sub

Private Sub tb_value_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If orignal_value <> Me.tb_value.text And Me.tb_value.text <> "" Then
        If click = False And Me.lb_verfuegbarkeit.listindex >= 0 And Me.lbl_verf_select_index_value.Caption <> "ID" Then
            click = True
            Dim list_index As Integer

            list_index = Me.lb_verfuegbarkeit.listindex
            
            If VBA.IsNumeric(Me.lb_verfuegbarkeit.list(list_index, 0)) Then
                Call SQL_Abfragen.Update_Verfuegbarkeit(Me.lb_verfuegbarkeit.list(list_index, 0), "Wert", VBA.Replace(Me.tb_value.text, ",", "."))
                Call SQL_Abfragen.Get_VerfuegbarkeitFromRessart(Me.lbl_ressart_id.Caption)
            End If
            
            Me.lb_verfuegbarkeit.RowSource = "frm_Verfuegbarkeit"
            Me.lb_verfuegbarkeit.listindex = list_index
            Call select_selected_item
            
            changes = True
            
            click = False
        End If
    End If
End Sub

Private Sub tb_value_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
        Case 44 'Komma nur einmal zul|fffd|ssig
            If Len(Me.tb_value) = 0 Or UBound(Split(Me.tb_value, ",")) >= 1 Then
                KeyAscii = 0
            End If
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub tb_year_Change()
    If VBA.Len(Me.tb_year) < 5 And Me.tb_year <> "" Then
        If VBA.CInt(Me.tb_year.text) < 2499 Or VBA.CInt(Me.tb_year.text) > 2000 Then
            onchangevalue = Me.tb_year.text
        Else
            Me.tb_year.text = onchangevalue
        End If
    Else
        Me.tb_year.text = onchangevalue
    End If
End Sub

Private Sub tb_year_Enter()
    orignal_value = Me.tb_year.text
    onchangevalue = Me.tb_month.text
End Sub

Private Sub tb_year_BeforeUpdate(ByVal Cancel As MSForms.ReturnBoolean)
    If orignal_value <> Me.tb_year.text And Me.tb_year.text <> "" Then
        If VBA.CInt(Me.tb_year.text) > 2499 Or VBA.CInt(Me.tb_year.text) < 2000 Then
            Me.tb_year.text = orignal_value
            Exit Sub
        End If
    
        If click = False And Me.lb_verfuegbarkeit.listindex >= 0 And Me.lbl_verf_select_index_value.Caption <> "ID" Then
            click = True
            Dim list_index As Integer

            list_index = Me.lb_verfuegbarkeit.listindex
            
            If VBA.IsNumeric(Me.lb_verfuegbarkeit.list(list_index, 0)) Then
                Call SQL_Abfragen.Update_Verfuegbarkeit(Me.lb_verfuegbarkeit.list(list_index, 0), "Jahr", Me.tb_year.text)
                Call SQL_Abfragen.Get_VerfuegbarkeitFromRessart(Me.lbl_ressart_id.Caption)
            End If
            
            Me.lb_verfuegbarkeit.RowSource = "frm_Verfuegbarkeit"
            Me.lb_verfuegbarkeit.listindex = list_index
            Call select_selected_item
            
            changes = True
            
            click = False
        End If
    End If
End Sub

Private Sub tb_year_KeyPress(ByVal KeyAscii As MSForms.ReturnInteger)
    Select Case KeyAscii
        Case 48 To 57 'Ziffern
        Case Else
            KeyAscii = 0
    End Select
End Sub

Private Sub UserForm_Initialize()
    Me.Caption = nlc_functions.frm_sprache_SQL(Me, Me.Caption)
    Call SetActivity(False)
End Sub

Private Sub SetActivity(eneable As Boolean)
        If eneable Then
            Me.tb_month.BackColor = &H80000005
            Me.tb_month.Locked = False
            Me.tb_year.BackColor = &H80000005
            Me.tb_year.Locked = False
            Me.tb_value.BackColor = &H80000005
            Me.tb_value.Locked = False
        Else
            Me.tb_month.BackColor = &H8000000F
            Me.tb_month.Locked = True
            Me.tb_year.BackColor = &H8000000F
            Me.tb_year.Locked = True
            Me.tb_value.BackColor = &H8000000F
            Me.tb_value.Locked = True
        End If
End Sub

Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)
    If changes Then
        Call SQL_Abfragen.Get_AllRessourcenarten
        frm_MasterData.lb_resources.RowSource = "frm_Ressourcenarten"
    End If
End Sub

Private Sub select_selected_item()
    If Me.lb_verfuegbarkeit.listindex = -1 Then Exit Sub
    
    Dim counter As Integer
    
    For counter = 0 To Me.lb_verfuegbarkeit.listCount - 1 Step 1
        If Me.lbl_verf_select_index_value.Caption = Me.lb_verfuegbarkeit.list(counter, 0) Then
            Me.lb_verfuegbarkeit.listindex = counter
            Exit For
        End If
    Next counter
End Sub

Attribute VB_Name = "nlc_Gantt"
Option Explicit
Option Private Module
Dim nlc_pw As String

Private Const Z_NR_ContentStart = 29
Private Const Z_NR_ShowPJ = 9
Private Const Z_NR_ShowMST = 10
Private Const Z_NR_ShowBP = 12
Private Const Z_NR_PJCopyRowStart = 15
Private Const Z_NR_PJCopyRowEnd = 19
Private Const Z_NR_MSTCopyRowStart = 20
Private Const Z_NR_MSTCopyRowEnd = 22
Private Const Z_NR_StartProjekts = 29

Private Const SP_NR_Bez = 2
Private Const SP_NR_ZUHelp = 6
Private Const SP_NR_ADatum = 7
Private Const SP_NR_EDatum = 8
Private Const SP_NR_ID = 9
Private Const SP_NR_SkalaStart = 10
Private Const SP_NR_SkalaEnd = 40
Private Const SP_NR_End = 41


Public Function Gantt_doubleClick(Target As Range)
    If Target.row >= Z_NR_StartProjekts And Target.row <= calc_master.Range("Gantt_LastRow").value Then
        If nlc_ppf_Gantt.Cells(Target.row - nlc_ppf_Gantt.Cells(Target.row, SP_NR_ZUHelp).value, SP_NR_ID).value = "" Then Exit Function
        calc_master.Range("sel_pj_id").value = nlc_ppf_Gantt.Cells(Target.row - nlc_ppf_Gantt.Cells(Target.row, SP_NR_ZUHelp).value, SP_NR_ID).value
        If calc_master.Range("sel_pj_id").value <> "" Then frm_projects.Show
        Exit Function
    End If
End Function

Private Sub Seitenumbruch()
    'Seitenumbr|fffd|che anpassen
    Dim row_count As Integer
    
    nlc_ppf_Gantt.Select
    nlc_ppf_Gantt.ResetAllPageBreaks
    ActiveWindow.View = xlPageBreakPreview
    For row_count = 1 To nlc_ppf_Gantt.HPageBreaks.count
        If nlc_ppf_Gantt.Cells(nlc_ppf_Gantt.HPageBreaks(row_count).Location.row, SP_NR_ZUHelp).value <> 0 Then
            Set nlc_ppf_Gantt.HPageBreaks(row_count).Location = nlc_ppf_Gantt.Range("A" & CLng(nlc_ppf_Gantt.HPageBreaks(row_count).Location.row - nlc_ppf_Gantt.Cells(nlc_ppf_Gantt.HPageBreaks(row_count).Location.row, SP_NR_ZUHelp).value))
        End If
    Next row_count
    ActiveWindow.View = xlNormalView

End Sub

Public Sub generate_Gantt()
    On Error Resume Next
    nlc_ppf_Gantt.Activate
    
    nlc_ppf_Gantt.Range("J9").value = SQL_Abfragen.Get_Setting_Gantt_Value(calc_master.Range("last_Gantt_ID").value, "projects")
    nlc_ppf_Gantt.Range("J10").value = SQL_Abfragen.Get_Setting_Gantt_Value(calc_master.Range("last_Gantt_ID").value, "milestones")
    nlc_ppf_Gantt.Range("J12").value = SQL_Abfragen.Get_Setting_Gantt_Value(calc_master.Range("last_Gantt_ID").value, "baseplan")
    
    Call WriteGantt
End Sub

Private Sub WriteGantt()
    Dim x As Integer
    Dim zeile_calc As Integer
    Dim sp_Bez As Integer
    Dim sp_plans As Integer
    Dim sp_plane As Integer
    Dim sp_akts As Integer
    Dim sp_akte As Integer
    Dim sp_mst As Integer
    Dim sp_Bez_Anz As Integer
    Dim rs2 As Integer
    Dim rs3 As Integer
    Dim Sqlstr As String
    Dim SqlstrMS As String
    Dim statement As String
    Dim where As String
    Dim pj_ids As String
    Dim filter_id As String
    
    filter_id = SQL_Abfragen.Get_Setting_Gantt_Value(calc_master.Range("last_Gantt_ID").value, "FK_Filter")
    pj_ids = nlc_filter.get_Filter(filter_id)
    
    If pj_ids <> "" Then
        where = "AND PJ.ID in (" & pj_ids & ") "
    End If

    rs2 = Class_Functions.DB.Create_NewRecordset
    rs3 = Class_Functions.DB.Create_NewRecordset
    
    nlc_ppf_Gantt.Rows(Z_NR_ContentStart & ":10000").delete
    
    x = Z_NR_StartProjekts
    
    nlc_ppf_Gantt.Rows(Z_NR_PJCopyRowStart & ":" & Z_NR_MSTCopyRowEnd).Hidden = False
    
    'Alle Projekte Sortiert nach Aktuellem Startdatum
    statement = "SELECT " & _
                    "PJ.ID, Katwerte_2.Wert_Datum AS Startdatum, Katwerte_1.Wert_Datum AS Enddatum " & _
                "FROM " & _
                    "(([DB_Projekte] AS PJ " & _
                    "INNER JOIN " & _
                        "[DB_Kategoriewerte] AS Katwerte_2 ON PJ.ID = Katwerte_2.FK_Projekte) " & _
                    "INNER JOIN " & _
                        "[DB_Kategoriewerte] AS Katwerte_1 ON PJ.ID = Katwerte_1.FK_Projekte) " & _
                "WHERE " & _
                    "(Katwerte_2.FK_Kategorie = 2) AND (Katwerte_1.FK_Kategorie = 1) " & where & _
                "ORDER BY  " & _
                    "Katwerte_2.Wert_Datum, Katwerte_1.Wert_Datum"

    If Class_Functions.DB.Select_Statement(statement) = False Then GoTo error
    
    Do While Not Class_Functions.DB.Recordset.EOF
        If nlc_ppf_Gantt.Range(nlc_ppf_Gantt.Cells(Z_NR_ShowPJ, SP_NR_SkalaStart), nlc_ppf_Gantt.Cells(Z_NR_ShowPJ, SP_NR_SkalaStart)).value = True Then
            Sqlstr = "Select " & _
                        "Projektname.Wert AS Projektname, " & _
                        "Akt_Start.Wert_Datum AS Akt_Start, " & _
                        "Akt_Ende.Wert_Datum AS Akt_Ende, " & _
                        "Basis_Start.Wert_Datum AS Basis_Start, " & _
                        "Basis_Ende.Wert_Datum AS Basis_Ende " & _
                    "FROM " & _
                        "(((((db_projekte LEFT JOIN " & _
                        "DB_Kategoriewerte AS Projektname  on (db_projekte.id = Projektname.fk_projekte  AND Projektname.fk_projekte = " & Class_Functions.DB.Recordset!ID & " and Projektname.FK_Kategorie = 8)) " & _
                        "LEFT JOIN DB_Kategoriewerte AS Akt_Start  on (db_projekte.id = Akt_Start.fk_projekte  AND Akt_Start.fk_projekte = " & Class_Functions.DB.Recordset!ID & " and Akt_Start.FK_Kategorie = 2)) " & _
                        "LEFT JOIN DB_Kategoriewerte AS Akt_Ende  on (db_projekte.id = Akt_Ende.fk_projekte  AND Akt_Ende.fk_projekte = " & Class_Functions.DB.Recordset!ID & " and Akt_Ende.FK_Kategorie = 1)) " & _
                        "LEFT JOIN DB_Kategoriewerte AS Basis_Start  on (db_projekte.id = Basis_Start.fk_projekte  AND Basis_Start.fk_projekte = " & Class_Functions.DB.Recordset!ID & " and Basis_Start.FK_Kategorie = 28)) " & _
                        "LEFT JOIN DB_Kategoriewerte AS Basis_Ende  on (db_projekte.id = Basis_Ende.fk_projekte  AND Basis_Ende.fk_projekte = " & Class_Functions.DB.Recordset!ID & " and Basis_Ende.FK_Kategorie = 27)) " & _
                    "WHERE " & _
                        "DB_Projekte.ID = " & Class_Functions.DB.Recordset!ID
            
            
            If Class_Functions.DB.Select_Statement(Sqlstr, rs2) = False Then GoTo error
                
            Do While Not Class_Functions.DB.Recordset(rs2).EOF
                x = addProject(x, Nz(Class_Functions.DB.Recordset(rs2)!Projektname), _
                                    NZD(Class_Functions.DB.Recordset(rs2)!Basis_Start), _
                                    NZD(Class_Functions.DB.Recordset(rs2)!Basis_Ende), _
                                    NZD(Class_Functions.DB.Recordset(rs2)!Akt_Start), _
                                    NZD(Class_Functions.DB.Recordset(rs2)!Akt_Ende), _
                                    Nz(Class_Functions.DB.Recordset!ID))
                
                If Not Class_Functions.DB.Recordset(rs2).EOF Then
                    Class_Functions.DB.Recordset(rs2).movenext
                Else
                    Exit Do
                End If
            Loop
        End If
        
        If nlc_ppf_Gantt.Range(nlc_ppf_Gantt.Cells(Z_NR_ShowMST, SP_NR_SkalaStart), nlc_ppf_Gantt.Cells(Z_NR_ShowMST, SP_NR_SkalaStart)).value = True Then
            SqlstrMS = "SELECT " & _
                            "MST.Name, " & _
                            "MST.Basisdatum,  " & _
                            "MST.Aktuelldatum  " & _
                        "FROM " & _
                            "[DB_Meilensteine] AS MST " & _
                        "WHERE " & _
                            "MST.FK_Projekte = " & Class_Functions.DB.Recordset!ID & " AND " & _
                            "active <> 0 " & _
                        "ORDER BY " & _
                            "MST.Aktuelldatum"
            If Class_Functions.DB.Select_Statement(SqlstrMS, rs3) = False Then GoTo weiter
            Do While Not Class_Functions.DB.Recordset(rs3).EOF
                x = addMS(x, Nz(Class_Functions.DB.Recordset(rs3)!name), NZD(Class_Functions.DB.Recordset(rs3)!Basisdatum), NZD(Class_Functions.DB.Recordset(rs3)!Aktuelldatum))
                
                If Not Class_Functions.DB.Recordset(rs3).EOF Then
                    Class_Functions.DB.Recordset(rs3).movenext
                Else
                    Exit Do
                End If
            Loop
weiter:
        End If
        
        If Not Class_Functions.DB.Recordset.EOF Then
            Class_Functions.DB.Recordset.movenext
        Else
            Exit Do
        End If
    Loop
    
error:
    Class_Functions.DB.Delete_RecordsetItem (rs2)
    Class_Functions.DB.Delete_RecordsetItem (rs3)
    
    nlc_ppf_Gantt.Rows(Z_NR_PJCopyRowStart & ":" & Z_NR_MSTCopyRowEnd).Hidden = True
    'Legende anf|fffd|gen
    Call add_legend(x + 2, nlc_ppf_Gantt.Range(nlc_ppf_Gantt.Cells(Z_NR_ShowMST, SP_NR_SkalaStart), nlc_ppf_Gantt.Cells(Z_NR_ShowMST, SP_NR_SkalaStart)).value)
    Call endformatierung(x)
    nlc_ppf_Gantt.Range("A1").Select
    Call nlc_Gantt.Seitenumbruch
    calc_master.Range("Gantt_LastRow").value = x
    
End Sub


Private Function addProject(mRow As Integer, Bezeichnung As String, StartB As Date, EndeB As Date, StartA As Date, EndeA As Date, PJ_ID As String) As Integer
    Dim startspalte_get As Integer
    Dim endspalte_get As Integer
    Dim zeile_gantt As Integer

    nlc_ppf_Gantt.Rows(Z_NR_PJCopyRowStart & ":" & Z_NR_PJCopyRowEnd).Copy
    nlc_ppf_Gantt.Rows(mRow & ":" & mRow).insert Shift:=xlDown
    nlc_ppf_Gantt.Cells(mRow, SP_NR_Bez).value = Bezeichnung
    nlc_ppf_Gantt.Cells(mRow, SP_NR_ID).value = PJ_ID

    'zeile_calc = 5
    'plan:
    
    If InStr(1, StartB, "00:00:00") <> 1 Then
        nlc_ppf_Gantt.Cells(mRow + 1, SP_NR_ADatum).value = StartB
    End If
    
    If InStr(1, EndeB, "00:00:00") <> 1 Then
        nlc_ppf_Gantt.Cells(mRow + 1, SP_NR_EDatum).value = EndeB
    End If
    
    If InStr(1, StartB, "00:00:00") <> 1 And InStr(1, EndeB, "00:00:00") <> 1 Then
        startspalte_get = get_startspalte(StartB)
        endspalte_get = get_endspalte(EndeB)
        
        If startspalte_get = 0 Then startspalte_get = 10
        
        zeile_gantt = mRow + 1
        If startspalte_get <= endspalte_get Then Call format_bereich(zeile_gantt, startspalte_get, endspalte_get, "plan")
    End If
   
    'aktuell:
    If InStr(1, StartA, "00:00:00") <> 1 Then
        nlc_ppf_Gantt.Cells(mRow + 3, SP_NR_ADatum).value = StartA
    End If
    If InStr(1, EndeA, "00:00:00") <> 1 Then
        nlc_ppf_Gantt.Cells(mRow + 3, SP_NR_EDatum).value = EndeA
    End If
    
    If InStr(1, StartA, "00:00:00") <> 1 And InStr(1, EndeA, "00:00:00") <> 1 Then
        startspalte_get = get_startspalte(StartA)
        endspalte_get = get_endspalte(EndeA)
        
        If startspalte_get = 0 Then startspalte_get = 10
        
        zeile_gantt = mRow + 3
        If startspalte_get <= endspalte_get Then Call format_bereich(zeile_gantt, startspalte_get, endspalte_get, "aktuell")
    End If
    
    addProject = mRow + 5
    If nlc_ppf_Gantt.Range(nlc_ppf_Gantt.Cells(Z_NR_ShowBP, SP_NR_SkalaStart), nlc_ppf_Gantt.Cells(Z_NR_ShowBP, SP_NR_SkalaStart)).value = False Then nlc_ppf_Gantt.Rows(mRow & ":" & mRow + 1).Hidden = True
End Function

Private Function addMS(mRow As Integer, Bezeichnung As String, EndeB As Date, EndeA As Date) As Integer
    Dim startspalte_get As Integer
    Dim endspalte_get As Integer
    Dim zeile_gantt As Integer

    nlc_ppf_Gantt.Rows(Z_NR_MSTCopyRowStart & ":" & Z_NR_MSTCopyRowEnd).Copy
    nlc_ppf_Gantt.Rows(mRow & ":" & mRow).insert Shift:=xlDown
    nlc_ppf_Gantt.Cells(mRow, SP_NR_Bez).value = Bezeichnung
    
    zeile_gantt = mRow + 1
    
    If nlc_ppf_Gantt.Range(nlc_ppf_Gantt.Cells(Z_NR_ShowBP, SP_NR_SkalaStart), nlc_ppf_Gantt.Cells(Z_NR_ShowBP, SP_NR_SkalaStart)).value = True Then 'Basisplan anzeigen
        'plan:
        If InStr(1, EndeB, "00:00:00") <> 1 Then
            startspalte_get = get_startspalte(EndeB)
            nlc_ppf_Gantt.Cells(mRow + 1, SP_NR_ADatum).value = EndeB
            
            If startspalte_get <> 0 Then
                nlc_ppf_Gantt.Cells(zeile_gantt, startspalte_get).value = VBA.ChrW(9660) '"w"
                nlc_ppf_Gantt.Cells(zeile_gantt, startspalte_get).Font.ColorIndex = 41
            End If
        End If
    End If
    'aktuell:
    If InStr(1, EndeA, "00:00:00") <> 1 Then
        startspalte_get = get_startspalte(EndeA)
        nlc_ppf_Gantt.Cells(mRow + 1, SP_NR_EDatum).value = EndeA
        
        If startspalte_get <> 0 Then
            nlc_ppf_Gantt.Cells(zeile_gantt, startspalte_get).value = VBA.ChrW(9660)  '"w"
            nlc_ppf_Gantt.Cells(zeile_gantt, startspalte_get).Font.ColorIndex = 3
        End If
    End If
    
    addMS = mRow + 3
    
End Function

Private Sub add_legend(last_row As Integer, showMst As Boolean)
    calc_master.Range("AA3:AG7").Copy
    nlc_ppf_Gantt.Activate
    nlc_ppf_Gantt.Cells(last_row, SP_NR_Bez + 1).Activate
    ActiveSheet.Paste
    'vorformatieren
    nlc_ppf_Gantt.Rows(last_row).RowHeight = 10.5
    nlc_ppf_Gantt.Rows(last_row + 2).RowHeight = 10.5
    nlc_ppf_Gantt.Rows(last_row + 4).RowHeight = 10.5
    'letzte zeile formatieren
    nlc_ppf_Gantt.Rows(last_row + 5).RowHeight = 7.5
    'zwischenzeilen formatieren
    nlc_ppf_Gantt.Rows(last_row - 1).RowHeight = 3.75
    nlc_ppf_Gantt.Rows(last_row - 2).RowHeight = 3.75
    nlc_ppf_Gantt.Rows(last_row + 1).RowHeight = 3.75
    nlc_ppf_Gantt.Rows(last_row + 3).RowHeight = 3.75
    
    If showMst = False Then
        nlc_ppf_Gantt.Rows(last_row + 3 & ":" & last_row + 4).Hidden = True
    Else
        nlc_ppf_Gantt.Rows(last_row + 3 & ":" & last_row + 4).Hidden = False
    End If
    
    nlc_ppf_Gantt.PageSetup.PrintArea = "$A$1:$IQ$" & last_row + 5
    
    nlc_ppf_Gantt.Cells(1, 1).Select
End Sub

Private Sub endformatierung(endzeile As Integer)
'Check bzgl. Umbau (grunds|fffd|tzlich angepasst)
    Dim i As Integer
    'nlc_ppf_Gantt.Select
    
    Dim level As Integer
    Dim col_counter As Integer
    Dim color As Integer
    Dim line As Variant
    
    nlc_ppf_Gantt.Range(nlc_ppf_Gantt.Cells(endzeile - 1, 9), nlc_ppf_Gantt.Cells(endzeile - 1, SP_NR_SkalaEnd + 1)).Select
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
'        .TintAndShade = 0
        .Weight = xlThin
    End With

    nlc_ppf_Gantt.Range(nlc_ppf_Gantt.Cells(29, SP_NR_SkalaEnd + 3), nlc_ppf_Gantt.Cells(endzeile - 1, SP_NR_SkalaEnd + 3)).Select
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    
    'Skala neu Formatieren (Border)
    nlc_ppf_Gantt.Range(nlc_ppf_Gantt.Cells(28, SP_NR_SkalaStart), nlc_ppf_Gantt.Cells(28, SP_NR_SkalaEnd + 1)).Select
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlInsideVertical)
        .LineStyle = xlContinuous
        .ColorIndex = 0
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    'Stichtag |fffd|ber ganze Spalte formatieren!!!
    col_counter = SP_NR_SkalaStart
    color = 3
    line = xlDash
    
    Do While nlc_ppf_Gantt.Cells(28, col_counter).value <> ""
        If nlc_ppf_Gantt.Cells(23, col_counter).value = "x" Then
            nlc_ppf_Gantt.Range(nlc_ppf_Gantt.Cells(28, col_counter), nlc_ppf_Gantt.Cells(endzeile - 1, col_counter)).Select
            Selection.Borders(xlDiagonalDown).LineStyle = xlNone
            Selection.Borders(xlDiagonalUp).LineStyle = xlNone
            With Selection.Borders(xlEdgeLeft)
                .LineStyle = line
                .Weight = xlMedium
                .ColorIndex = color
            End With
            With Selection.Borders(xlEdgeRight)
                .LineStyle = line
                .Weight = xlMedium
                .ColorIndex = color
            End With
            With Selection.Borders(xlEdgeTop)
                .LineStyle = line
                .Weight = xlMedium
                .ColorIndex = color
            End With
            With Selection.Borders(xlEdgeBottom)
                .LineStyle = line
                .Weight = xlMedium
                .ColorIndex = color
            End With
            
            Exit Do
        End If
        col_counter = col_counter + 1
    Loop
    
    'Blattrahmen setzten
    nlc_ppf_Gantt.Range(nlc_ppf_Gantt.Cells(endzeile, 1), nlc_ppf_Gantt.Cells(endzeile + 7, SP_NR_End + 1)).Select
    Selection.Borders(xlDiagonalDown).LineStyle = xlNone
    Selection.Borders(xlDiagonalUp).LineStyle = xlNone
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .ColorIndex = xlAutomatic
        .TintAndShade = 0
        .Weight = xlThin
    End With
    
    nlc_ppf_Gantt.PageSetup.PrintArea = "$A$1:$BB$" & endzeile + 9
End Sub

Private Function get_startspalte(sdate As Date) As Integer
    'Check bzgl. Umbau (grunds|fffd|tzlich angepasst)
    Dim i
    get_startspalte = 0
    For i = 10 To SP_NR_End
        If sdate < nlc_ppf_Gantt.Cells(25, i).value Then Exit For
    Next i
    If nlc_ppf_Gantt.Cells(26, i - 1).value < sdate Then
        get_startspalte = 0
    Else
        get_startspalte = i - 1
    End If
    
End Function

Private Function get_endspalte(edate As Date) As Integer
    'Check bzgl. Umbau (grunds|fffd|tzlich angepasst)
    Dim i
    get_endspalte = SP_NR_End
    For i = 9 To SP_NR_End
        If edate <= nlc_ppf_Gantt.Cells(26, i).value Then
            get_endspalte = i
            Exit For
        End If
    Next i

End Function

Private Sub format_bereich(z As Integer, anf As Integer, Ende As Integer, art As String)
    If anf = 0 Then Exit Sub
    
    nlc_ppf_Gantt.Select
    If Ende > SP_NR_End Then Ende = SP_NR_End
    'nlc_ppf_Gantt.Range(nlc_ppf_Gantt.Cells(z, anf), nlc_ppf_Gantt.Cells(z + 1, ende)).MergeCells = True
    nlc_ppf_Gantt.Range(nlc_ppf_Gantt.Cells(z, anf), nlc_ppf_Gantt.Cells(z, Ende)).Select
    With Selection.Borders(xlEdgeLeft)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeTop)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeBottom)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
    With Selection.Borders(xlEdgeRight)
        .LineStyle = xlContinuous
        .Weight = xlThin
        .ColorIndex = xlAutomatic
    End With
'    With Selection.Interior
'        .ColorIndex = f_flaeche
'        .Pattern = xlSolid
'        .PatternColorIndex = xlAutomatic
'    End With
    If art = "plan" Then
        With Selection.Interior
            .Pattern = xlPatternLinearGradient
            .Gradient.Degree = 90
            .Gradient.ColorStops.clear
        End With
        With Selection.Interior.Gradient.ColorStops.add(0)
            .ThemeColor = xlThemeColorAccent6
            .TintAndShade = 0.400006103701895
        End With
        With Selection.Interior.Gradient.ColorStops.add(0.5)
            .ThemeColor = xlThemeColorAccent6
            .TintAndShade = 0.599993896298105
        End With
        With Selection.Interior.Gradient.ColorStops.add(1)
            .ThemeColor = xlThemeColorAccent6
            .TintAndShade = 0.400006103701895
        End With
    Else
        With Selection.Interior
            .Pattern = xlPatternLinearGradient
            .Gradient.Degree = 90
            .Gradient.ColorStops.clear
        End With
        With Selection.Interior.Gradient.ColorStops.add(0)
            .ThemeColor = xlThemeColorLight1
            .TintAndShade = 0.400006103701895
        End With
        With Selection.Interior.Gradient.ColorStops.add(0.5)
            .ThemeColor = xlThemeColorDark2
            .TintAndShade = 0.400006103701895
        End With
        With Selection.Interior.Gradient.ColorStops.add(1)
            .ThemeColor = xlThemeColorLight1
            .TintAndShade = 0.400006103701895
        End With
    End If
    
    If anf <> Ende Then
        nlc_ppf_Gantt.Range(nlc_ppf_Gantt.Cells(z, anf), nlc_ppf_Gantt.Cells(z, Ende - 1)).Select
        Selection.Borders(xlEdgeRight).LineStyle = xlNone
        Selection.Borders(xlInsideVertical).LineStyle = xlNone
        Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
    End If
    
End Sub

Private Sub mst_eintragen(z As Integer, spalte As Integer, mst As String)
    nlc_ppf_Gantt.Select
    If nlc_ppf_Gantt.Cells(z, spalte).value = "" Then
        nlc_ppf_Gantt.Cells(z, spalte).value = mst
    Else
        nlc_ppf_Gantt.Cells(z, spalte).value = nlc_ppf_Gantt.Cells(z, spalte).value & ", " & mst
    End If
End Sub

Private Function NZD(gStr As Variant) As Date
    If VBA.IsNull(gStr) Or gStr = "" Then
        NZD = "00:00:00"
    Else
        NZD = gStr
    End If
End Function
Attribute VB_Name = "nlc_ListboxEvents"
Option Explicit
Option Private Module

Public werte(6) As String

'Das aktive Item wird um eine Position nach unten geschoben
Public Sub btn_down_Click(lb As Object)
    Dim listindex As Integer
        
    listindex = lb.listindex
    If listindex = -1 Then Exit Sub
    
    If listindex < lb.listCount - 1 Then
        Call SaveListItemInArray(listindex, lb)
        Call CopyListItemFromTo(listindex, listindex + 1, lb)
        Call LoadArrayInListItem(listindex + 1, lb)
        
        lb.listindex = listindex + 1
    End If
End Sub

'(f|fffd|r ListBox2)
'Das aktive Item wird an die unterster Position geschoben
Public Sub btn_downall_Click(lb As Object)
    Dim listindex As Integer
        
    listindex = lb.listindex
    If listindex = -1 Then Exit Sub
    
    If listindex < lb.listCount - 1 Then
        lb.addItem lb.list(listindex, 0)
        Call CopyListItemFromTo(lb.listCount - 1, listindex, lb)
        
        lb.RemoveItem (listindex)
        
        lb.listindex = lb.listCount - 1
    End If
End Sub


'Das aktive Item wird um eine Position nach oben geschoben
Public Sub btn_up_Click(lb As Object)
    Dim listindex As Integer
        
    listindex = lb.listindex
    
    If listindex > 0 Then
        Call SaveListItemInArray(listindex, lb)
        Call CopyListItemFromTo(listindex, listindex - 1, lb)
        Call LoadArrayInListItem(listindex - 1, lb)
        
        lb.listindex = listindex - 1
    End If
End Sub

'Das aktive Item wird an oberste Position geschoben
Public Sub btn_upall_Click(lb As Object)
    Dim listindex As Integer
    Dim counter As Integer
        
    listindex = lb.listindex
    
    If listindex > 0 Then
        Call SaveListItemInArray(listindex, lb)
    
        For counter = listindex To 1 Step -1
            Call CopyListItemFromTo(counter, counter - 1, lb)
        Next counter
        
        Call LoadArrayInListItem(0, lb)
        
        lb.listindex = 0
    End If
End Sub

'Speichert das angegebene Item in den Array
Public Sub SaveListItemInArray(listindex As Integer, lb As Object)
    If Not VBA.IsNull(lb.list(listindex, 0)) Then werte(0) = lb.list(listindex, 0)
    If Not VBA.IsNull(lb.list(listindex, 1)) Then werte(1) = lb.list(listindex, 1)
    If Not VBA.IsNull(lb.list(listindex, 2)) Then werte(2) = lb.list(listindex, 2)
    If Not VBA.IsNull(lb.list(listindex, 3)) Then werte(3) = lb.list(listindex, 3)
    If Not VBA.IsNull(lb.list(listindex, 4)) Then werte(4) = lb.list(listindex, 4)
    If Not VBA.IsNull(lb.list(listindex, 5)) Then werte(5) = lb.list(listindex, 5)
    If Not VBA.IsNull(lb.list(listindex, 6)) Then werte(6) = lb.list(listindex, 6)
End Sub

'L|fffd|dt Daten aus dem Array in die Liste zum angegebenen Index
Public Sub LoadArrayInListItem(listindex As Integer, lb As Object)
    If Not VBA.IsNull(werte(0)) Then lb.list(listindex, 0) = werte(0)
    If Not VBA.IsNull(werte(1)) Then lb.list(listindex, 1) = werte(1)
    If Not VBA.IsNull(werte(2)) Then lb.list(listindex, 2) = werte(2)
    If Not VBA.IsNull(werte(3)) Then lb.list(listindex, 3) = werte(3)
    If Not VBA.IsNull(werte(4)) Then lb.list(listindex, 4) = werte(4)
    If Not VBA.IsNull(werte(5)) Then lb.list(listindex, 5) = werte(5)
    If Not VBA.IsNull(werte(6)) Then lb.list(listindex, 6) = werte(6)

End Sub

'Kopiert ein Item der Liste auf ein anderes Feld (sollte vorher gesichert werden!!!)
Public Sub CopyListItemFromTo(listindex_old As Integer, listindex_new As Integer, lb As Object)
    If Not VBA.IsNull(lb.list(listindex_new, 0)) Then lb.list(listindex_old, 0) = lb.list(listindex_new, 0)
    If Not VBA.IsNull(lb.list(listindex_new, 1)) Then lb.list(listindex_old, 1) = lb.list(listindex_new, 1)
    If Not VBA.IsNull(lb.list(listindex_new, 2)) Then lb.list(listindex_old, 2) = lb.list(listindex_new, 2)
    If Not VBA.IsNull(lb.list(listindex_new, 3)) Then lb.list(listindex_old, 3) = lb.list(listindex_new, 3)
    If Not VBA.IsNull(lb.list(listindex_new, 4)) Then lb.list(listindex_old, 4) = lb.list(listindex_new, 4)
    If Not VBA.IsNull(lb.list(listindex_new, 5)) Then lb.list(listindex_old, 5) = lb.list(listindex_new, 5)
    If Not VBA.IsNull(lb.list(listindex_new, 6)) Then lb.list(listindex_old, 6) = lb.list(listindex_new, 6)
End Sub
Attribute VB_Name = "nlc_PJLstExp"
Dim nlc_pw As String
Const startzeile = 6
Const endzeile = 20

Public Sub bericht_exportieren(spalte As Integer)
    
    Dim row_counter As Integer
    Dim main_wb As String
    Dim wb_neu As String
    Dim wb_added As Boolean
    Dim table1 As String
    Dim i As Integer
    Dim Fehler As String
    Dim error_counter As Integer
    
    On Error GoTo Ende
    
    nlc_pw = nlc_intern.get_pw
    
    main_wb = ActiveWorkbook.name
    nlc_ppf.Unprotect nlc_pw
    
    error_counter = 0
    'nlc_ppf_00.range("C15").value = "" 'Fehlerzelle
    
    For row_counter = endzeile To startzeile Step -1
        If nlc_ppf_00.Cells(row_counter, spalte + 1).value <> "" And nlc_ppf_00.Cells(row_counter, spalte + 2).value = "Excel" Then
            If wb_added = False Then
                Workbooks.add
                wb_neu = ActiveWorkbook.name
                table1 = Sheets(1).name
                If ActiveWorkbook.Sheets.count > 2 Then
                    For i = ActiveWorkbook.Sheets.count To 2 Step -1
                        Sheets(i).delete
                    Next i
                End If
                wb_added = True
            'Farben |fffd|bergeben
                Workbooks(wb_neu).Colors = Workbooks(main_wb).Colors
                Workbooks(wb_neu).Colors(17) = RGB(255, 255, 255)
                
                Workbooks(wb_neu).Theme.ThemeColorScheme.Colors(msoThemeLight2) = RGB(195, 183, 155)
                Workbooks(wb_neu).Theme.ThemeColorScheme.Colors(msoThemeDark2) = RGB(58, 87, 104) 'Workbooks(main_wb).Theme.ThemeColorScheme(msoThemeAccent1)
                Workbooks(wb_neu).Theme.ThemeColorScheme.Colors(msoThemeAccent1) = RGB(79, 129, 189)
                Workbooks(wb_neu).Theme.ThemeColorScheme.Colors(msoThemeAccent2) = RGB(192, 80, 77)
                Workbooks(wb_neu).Theme.ThemeColorScheme.Colors(msoThemeAccent3) = RGB(106, 113, 38)
                Workbooks(wb_neu).Theme.ThemeColorScheme.Colors(msoThemeAccent4) = RGB(128, 100, 162)
                Workbooks(wb_neu).Theme.ThemeColorScheme.Colors(msoThemeAccent5) = RGB(101, 170, 188)
                Workbooks(wb_neu).Theme.ThemeColorScheme.Colors(msoThemeAccent6) = RGB(149, 106, 75)
                Workbooks(wb_neu).Theme.ThemeColorScheme.Colors(msoThemeHyperlink) = RGB(211, 112, 25)
                Workbooks(wb_neu).Theme.ThemeColorScheme.Colors(msoThemeFollowedHyperlink) = RGB(142, 26, 125)
            End If
            
            
            Windows(main_wb).Activate
            If nlc_ppf_00.Cells(row_counter, spalte + 6).value = "nlc_ppf_08" Then
                Call nlc_08a.export_projekt(nlc_ppf_08a.name, wb_neu)
            ElseIf nlc_ppf_00.Cells(row_counter, spalte + 6).value = "nlc_ppf_09" Then
                Call nlc_09a.export_projekt(nlc_ppf_09a.name, wb_neu)
            Else
                Fehler = seperate_worksheet(nlc_intern.nlc_search_name(ThisWorkbook, nlc_ppf_00.Cells(row_counter, spalte + 6).value), wb_neu, "", nlc_ppf_00.Cells(row_counter, spalte + 6).value)
                If Fehler = "" Then error_counter = error_counter + 1
            End If
        End If
    Next row_counter

Ende:
    Err.clear
    On Error Resume Next
    Windows(main_wb).Activate
    nlc_ppf.Protect nlc_pw
    nlc_ppf_00.Activate
    
    If nlc_ppf_00.Range("C15").value <> "" Then
        MsgBox "Es sind Fehler beim Excel Export auf folgenden Bl|fffd|ttern aufgetreten: " & nlc_ppf_00.Range("C15").value, vbCritical
    End If
    
    Windows(wb_neu).Activate
    Sheets(table1).delete
    
End Sub

Public Sub blatt_exportieren(vbaname As String, tabname As String)
    
    Dim row_counter As Integer
    Dim main_wb As String
    Dim wb_neu As String
    Dim wb_added As Boolean
    Dim table1 As String
    Dim i As Integer
    Dim Fehler As String
    
    On Error GoTo Ende
    
    nlc_pw = nlc_intern.get_pw
    nlc_ppf_xl.Unprotect nlc_pw
    nlc_intern.Application_off
    
    'nlc_ppf_00.range("C15").value = ""
    
    Fehler = seperate_worksheet(tabname, "", "", vbaname)
    
  

Ende:
    On Error Resume Next
    nlc_intern.Application_on
    nlc_ppf.Protect nlc_pw
    
    ThisWorkbook.Activate
    Sheets(tabname).Activate
    
    If nlc_ppf_00.Range("C15").value <> "" Then
        MsgBox "Es sind Fehler beim Excel Export auf folgenden Bl|fffd|ttern aufgetreten: " & nlc_ppf_00.Range("C15").value, vbCritical
    End If
    If Fehler <> "" Then
        Windows(Fehler).Activate
        Sheets(1).Activate
    End If
    
End Sub

Function seperate_worksheet(tabelle As Variant, neuname As String, tabname As String, vbaname As String) As String 'Worksheets separieren
'Aktion vorbereiten

    Dim activename As String
    Dim activesheetname As String
    Dim anzahl, i As Integer

    On Error GoTo Ende
    nlc_pw = nlc_intern.get_pw
    
    Sheets(tabelle).Unprotect (nlc_pw)
    activename = ActiveWorkbook.name
    activesheetname = Sheets(tabelle).name
    table1 = ""
    If neuname = "" Then 'neue Arbeitsmappe anlegen
        Workbooks.add
        neuname = ActiveWorkbook.name
        table1 = Sheets(1).name
        wb_added = True
        If ActiveWorkbook.Sheets.count > 2 Then
            For i = ActiveWorkbook.Sheets.count To 2 Step -1
                Sheets(i).delete
            Next i
        End If
'Farben |fffd|bergeben
        Workbooks(neuname).Colors = Workbooks(activename).Colors
        'Workbooks(neuname).Theme.ThemeColorScheme.Load (VBA.CStr(Environ("USERPROFILE") & "\AppData\Roaming\Microsoft\Templates\Document Themes\Theme Colors\nlc.xml"))
            '"C:\Users\michael.goldschmidt\AppData\Roaming\Microsoft\Templates\Document Themes\Theme Colors\nlc.xml")

'        Workbooks(neuname).Colors(17) = RGB(255, 255, 255)
'
'        Workbooks(neuname).Theme.ThemeColorScheme.Colors(msoThemeLight2) = RGB(195, 183, 155)
'        Workbooks(neuname).Theme.ThemeColorScheme.Colors(msoThemeDark2) = RGB(58, 87, 104) 'Workbooks(main_wb).Theme.ThemeColorScheme(msoThemeAccent1)
'        Workbooks(neuname).Theme.ThemeColorScheme.Colors(msoThemeAccent1) = RGB(79, 129, 189)
'        Workbooks(neuname).Theme.ThemeColorScheme.Colors(msoThemeAccent2) = RGB(192, 80, 77)
 '       Workbooks(neuname).Theme.ThemeColorScheme.Colors(msoThemeAccent3) = RGB(176, 227, 255)
'        Workbooks(neuname).Theme.ThemeColorScheme.Colors(msoThemeAccent4) = RGB(128, 100, 162)
'        Workbooks(neuname).Theme.ThemeColorScheme.Colors(msoThemeAccent5) = RGB(101, 170, 188)
'        Workbooks(neuname).Theme.ThemeColorScheme.Colors(msoThemeAccent6) = RGB(149, 106, 75)
'        Workbooks(neuname).Theme.ThemeColorScheme.Colors(msoThemeHyperlink) = RGB(211, 112, 25)
'        Workbooks(neuname).Theme.ThemeColorScheme.Colors(msoThemeFollowedHyperlink) = RGB(142, 26, 125)
    End If
    
    Windows(activename).Activate
'Alte kopieren
    Sheets(tabelle).Copy Before:=Workbooks(neuname).Sheets(1)
    Windows(neuname).Activate

    Sheets(1).Cells.Select
    If tabname <> "" Then Sheets(1).name = tabname
    
    'Autofilter aktiv
    
    
    Selection.Copy
    Selection.PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False

'|fffd|berz|fffd|hlige Buttons l|fffd|schen
    anzahl = ActiveSheet.Shapes.count
    For i = anzahl To 1 Step -1
        If ActiveSheet.Shapes(i).Type = 12 Or (ActiveSheet.Shapes(i).Type = msoAutoShape And ActiveSheet.Shapes(i).AutoShapeType = msoShapeRoundedRectangle) Then ActiveSheet.Shapes(i).delete
    Next i
    If table1 <> "" Then Sheets(table1).delete

    Windows(activename).Activate
    Sheets(tabelle).Select
    Sheets(tabelle).Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowSorting:=True, AllowFiltering:=True
   
    Windows(neuname).Activate
    Call bRemoveAllCode(neuname)
    ActiveSheet.Range("A1").Select
    seperate_worksheet = neuname
    Exit Function
    
Ende:
    Err.clear
    seperate_worksheet = neuname
    Windows(activename).Activate
    Sheets(tabelle).Select
    Sheets(tabelle).Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowSorting:=True, AllowFiltering:=True

End Function

Sub bRemoveAllCode(ByVal szBook As String)

    On Error GoTo Ende

    Const lModule As Long = 1
    Const lOther As Long = 100

    Dim lCount As Long
    Dim objCode As Object
    Dim objComponents As Object
    Dim wkbBook As Workbook

    Set wkbBook = Workbooks(szBook)
    Set objComponents = wkbBook.VBProject.VBComponents
    lCount = wkbBook.VBProject.VBComponents.count

    '''Remove all modules & code
    For Each objCode In objComponents
        If objCode.Type = lModule Then
            objComponents.Remove objCode
        ElseIf objCode.Type = lOther Then
            objCode.CodeModule.DeleteLines 1, objCode.CodeModule.CountOfLines
        End If
    Next objCode

    Exit Sub
Ende:
    Err.clear

End Sub



Attribute VB_Name = "nlc_PJTabelle"
Option Explicit
Option Private Module

Public RessEinheit As String
Public CostEinheit As String
Public TextboxText As String

Public Sub generate_PJT() ')
    If check_userrights = False Then Exit Sub
    
    nlc_intern.Application_off
    nlc_ppf_PJTabelle.Unprotect nlc_intern.get_pw
   
    nlc_ppf_PJTabelle.Activate
    Call SQL_Abfragen.getRessCostEinheit
    Call generate_PjtHeader
    Call FillPUE
    Call FormatDateCols
    Call FormatHyperlinks
    
    Call nlc_intern.Logo_Positionieren(nlc_ppf_PJTabelle.name, 2, 0)
    
    On Error Resume Next
    '+ und - Buttons positionieren
    nlc_ppf_PJTabelle.Shapes.Range(Array("btn_bigger")).Select
'    Selection.ShapeRange.Left = 110
'    Selection.ShapeRange.Top = 4
    nlc_ppf_PJTabelle.Shapes.Range(Array("btn_smaler")).Select
'    Selection.ShapeRange.Left = 138.5
'    Selection.ShapeRange.Top = 4
    nlc_ppf_PJTabelle.Range("A1").Select
    
    'Fenster fixieren
    nlc_ppf_PJTabelle.Range("E17").Select
    ActiveWindow.FreezePanes = False
    ActiveWindow.FreezePanes = True
    
    nlc_ppf_PJTabelle.Protect nlc_intern.get_pw
    nlc_intern.Application_on
End Sub

Private Sub generate_PjtHeader()
    'Formatierungen aufheben und Logo verschieben
    nlc_ppf_PJTabelle.Shapes.Range(Array("Logo")).Select
    Selection.ShapeRange.Left = 0
    Selection.ShapeRange.Top = 6
    
    On Error Resume Next
    nlc_ppf_PJTabelle.Shapes.Range(Array("btn_bigger")).Select
'    Selection.ShapeRange.Left = 1
'    Selection.ShapeRange.Top = 3
    nlc_ppf_PJTabelle.Shapes.Range(Array("btn_smaler")).Select
'    Selection.ShapeRange.Left = 1
'    Selection.ShapeRange.Top = 3
    nlc_ppf_PJTabelle.Range("A1").Select
    
    If get_last_col <> "C" Then
        nlc_ppf_PJTabelle.columns("D:" & get_last_col).delete Shift:=xlToLeft
    End If
    
    'Header erstellen
    Call SQL_Abfragen.Get_Setting_PjTable_Header(calc_master.Range("last_pjt_ID"))
    'Vorlagezeile Formatieren (anhand der Header Informationen)
    Dim i As Integer
    Dim x As Integer
    
    i = 4
    While nlc_ppf_PJTabelle.Cells(7, i).value <> ""
        Call SQL_Abfragen.GetPjtFormation(i, 15)
        i = i + 1
    Wend
End Sub


Private Sub FormatHyperlinks()
    On Error Resume Next
    Dim i As Integer
    Dim x As Integer
    Dim HPLinks As String
    HPLinks = GettingHyperlinkIDs
    i = 4
    If HPLinks = "" Then Exit Sub
    While nlc_ppf_PJTabelle.Cells(7, i).value <> ""
    
        If InStr(1, nlc_ppf_PJTabelle.Cells(10, i).value & ",", HPLinks) Then
'        If nlc_ppf_PJTabelle.Cells(10, i).value = 199 Then
            x = 17
            While nlc_ppf_PJTabelle.Cells(x, 2).value <> ""
                If nlc_ppf_PJTabelle.Cells(x, i).value <> "" Then
                    With nlc_ppf_PJTabelle
                        .Hyperlinks.add Anchor:=.Cells(x, i), _
                        Address:=nlc_ppf_PJTabelle.Cells(x, i).value, ScreenTip:=nlc_ppf_PJTabelle.Cells(x, i).value, TextToDisplay:="LINK"
                    End With
                End If
                
                nlc_ppf_PJTabelle.Cells(x, i).Font.ThemeColor = xlThemeColorLight1
                'nlc_ppf_PJTabelle.Cells(X, i).value = VBA.CDate(nlc_ppf_PJTabelle.Cells(X, i).value)
                
               
                
                x = x + 1
            Wend
        End If
        i = i + 1
    Wend
End Sub

Private Function GettingHyperlinkIDs() As String
Dim tmp As String
Dim x As Integer
    tmp = ""
    x = 4
    While calc_frm_masterdata.Cells(x, 2).value <> ""
        If calc_frm_masterdata.Cells(x, 5).value = "Hyperlink" Then
            tmp = tmp & calc_frm_masterdata.Cells(x, 2).value & ","
        End If
        x = x + 1
    Wend
    GettingHyperlinkIDs = tmp
End Function

Private Sub FormatDateCols()
    On Error Resume Next
    Dim i As Integer
    Dim x As Integer

    i = 4

    While nlc_ppf_PJTabelle.Cells(7, i).value <> ""
        If nlc_ppf_PJTabelle.Cells(11, i).value = "Wert_Datum" Then
            x = 17
            While nlc_ppf_PJTabelle.Cells(x, 3).value <> ""
                nlc_ppf_PJTabelle.Cells(x, i).value = VBA.CDate(nlc_ppf_PJTabelle.Cells(x, i).value)
                
                If nlc_ppf_PJTabelle.Cells(x, i).value = "0" Then
                    nlc_ppf_PJTabelle.Cells(x, i).value = ""
                End If
                
                x = x + 1
            Wend
        End If
        i = i + 1
    Wend
End Sub

'gibt den Spaltenbuchstaben zur|fffd|ck, welcher einen rechten Strich hat.
Private Function get_last_col() As String
    Dim col_counter As Integer
    
    col_counter = 4
    
    While nlc_ppf_PJTabelle.Cells(2, col_counter).Borders(xlEdgeRight).LineStyle <> xlContinuous
        col_counter = col_counter + 1
    Wend
    
    get_last_col = Split(Cells(1, col_counter - 1).Address, "$")(1)
End Function

Private Sub FillPUE()
    Dim Fehler As String
    Dim value As String
    Dim x As Long
    Dim Y As Long
    Dim statement As String
    Dim pj_ids As String
    Dim filter_id As String
    Dim where As String
    Dim DrpDwn As Boolean
    Dim tOrder As String
    Dim tmpGrp As Integer
    Dim FSlot As String
    Dim c As Variant
    Dim X2 As Long
    
    '#########################
    'Gruppierung und Sortierung
    Dim GroupByID As String
    Dim OrderID As String
    Dim OrderByFieldArt As String
    Dim OrderWay As String
    
    GroupByID = SQL_Abfragen.Get_Setting_PjTable_Value(calc_master.Range("last_pjt_ID").value, "f_Groupby")
    OrderID = SQL_Abfragen.Get_Setting_PjTable_Value(calc_master.Range("last_pjt_ID").value, "f_Orderby")
    OrderWay = SQL_Abfragen.Get_Setting_PjTable_Value(calc_master.Range("last_pjt_ID").value, "f_Orderway")
    OrderByFieldArt = SQL_Abfragen.Get_FieldArt(OrderID)
    
    '#########################
    
    If OrderWay = "aufsteigend" Or OrderWay = "Up" Then
        tOrder = "asc"
    Else
        tOrder = "desc"
    End If
    

    
    
    nlc_ppf_PJTabelle.Rows("15:15").Hidden = False
    nlc_ppf_PJTabelle.Rows("17:1000").delete
    x = 17
    
    filter_id = SQL_Abfragen.Get_Setting_PjTable_Value(calc_master.Range("last_pjt_ID").value, "FK_Filter")
    
    pj_ids = nlc_filter.get_Filter(VBA.CInt(filter_id))
    
    If pj_ids <> "" Then
        where = "WHERE " & _
                    "Pj.ID in (" & pj_ids & ")"
    End If
    
    If OrderByFieldArt = "DropDown" Or OrderByFieldArt = "True/False" Then
        DrpDwn = True
    Else
        DrpDwn = False
    End If
    
'    ID deutsch
'     1 DropDown
'     2 True/False
'     3 Text
'     4 Date
'     5 Number
    
    FSlot = "W"
    
    If GroupByID <> "0" Then
        If DrpDwn = True Then
            statement = "SELECT " & _
                            "PJ.ID, PJ.Projektcode, t1.Katd, T1.KatDOrder " & _
                        "From " & _
                            "DB_Projekte AS PJ RIGHT JOIN " & _
                            "(SELECT " & _
                                    "Katwerte.FK_Projekte AS PJID, Katwerte.FK_Kategorie_Detail AS KatD, Katd.OrderBy, OrderCol.KatDOrder " & _
                            "From " & _
                                "((DB_Kategorie_Detail AS KatD LEFT JOIN " & _
                                "DB_Kategoriewerte AS KatWerte ON Katwerte.FK_Kategorie_Detail = Katd.ID) LEFT JOIN " & _
                                "(SELECT " & _
                                    "Katwerte.FK_Projekte AS PJID, Katd.OrderBy AS KatDOrder " & _
                                "From " & _
                                    "DB_Kategorie_Detail AS KatD LEFT JOIN " & _
                                    "DB_Kategoriewerte AS KatWerte ON Katwerte.FK_Kategorie_Detail = Katd.ID " & _
                                "WHERE " & _
                                    "katd.FK_Kategorie = " & OrderID & ") AS OrderCol ON Ordercol.PJID = Katwerte.FK_Projekte) " & _
                            "WHERE " & _
                                "katd.FK_Kategorie = " & GroupByID & ") AS T1 ON t1.PJID = Pj.ID " & _
                        where & _
                        " ORDER BY T1.OrderBy, T1.KatDOrder " & tOrder
        Else
            statement = "SELECT " & _
                            "PJ.ID, PJ.Projektcode, t1.Katd, T1.KatDOrder " & _
                        "From " & _
                            "DB_Projekte AS PJ RIGHT JOIN " & _
                            "(SELECT " & _
                                "Katwerte.FK_Projekte AS PJID, Katwerte.FK_Kategorie_Detail AS KatD, Katd.OrderBy, OrderCol.KatDOrder " & _
                            "From " & _
                                "((DB_Kategorie_Detail AS KatD LEFT JOIN " & _
                                "DB_Kategoriewerte AS KatWerte ON Katwerte.FK_Kategorie_Detail = Katd.ID) LEFT JOIN " & _
                                "(SELECT " & _
                                    "Katwerte.FK_Projekte AS PJID, Katwerte.Wert AS KatDOrder " & _
                                "From " & _
                                    "DB_Kategoriewerte As Katwerte " & _
                                "WHERE " & _
                                    "Katwerte.FK_Kategorie = " & OrderID & _
                                ") AS OrderCol ON Ordercol.PJID = Katwerte.FK_Projekte) " & _
                            "WHERE katd.FK_Kategorie = " & GroupByID & _
                            ") AS T1 ON t1.PJID = Pj.ID " & _
                        where & _
                        " ORDER BY T1.OrderBy, T1.KatDOrder " & tOrder
        End If
    Else
        If DrpDwn = True Then
            statement = "SELECT " & _
                            "PJ.ID, PJ.Projektcode, T1.KatDOrder " & _
                        "From " & _
                            "DB_Projekte AS PJ RIGHT JOIN " & _
                            "(SELECT " & _
                                "Katwerte.FK_Projekte AS PJID, Katd.OrderBy AS KatDOrder " & _
                            "From " & _
                                "DB_Kategorie_Detail AS KatD LEFT JOIN " & _
                                "DB_Kategoriewerte AS KatWerte ON Katwerte.FK_Kategorie_Detail = Katd.ID " & _
                            "WHERE " & _
                                "katd.FK_Kategorie = " & OrderID & _
                            ") AS T1 ON t1.PJID = Pj.ID " & where & _
                        " ORDER BY T1.KatDOrder " & tOrder
        Else
            If LCase(OrderByFieldArt) = "text" Then
                statement = "SELECT " & _
                                "PJ.ID, PJ.Projektcode, T1.KatDOrder " & _
                            "From " & _
                                "DB_Projekte AS PJ RIGHT JOIN " & _
                                "(SELECT " & _
                                    "Katwerte.FK_Projekte AS PJID, Katwerte.Wert AS KatDOrder " & _
                                "From " & _
                                    "DB_Kategoriewerte As Katwerte " & _
                                "WHERE " & _
                                    "Katwerte.FK_Kategorie = " & OrderID & _
                                ") AS T1 ON t1.PJID = Pj.ID " & _
                            where & _
                            " ORDER BY " & _
                                "T1.KatDOrder " & tOrder
            ElseIf LCase(OrderByFieldArt) = "date" Then
                statement = "SELECT " & _
                                "PJ.ID, PJ.Projektcode, T1.KatDOrder " & _
                            "From " & _
                                "DB_Projekte AS PJ RIGHT JOIN " & _
                                "(SELECT " & _
                                    "Katwerte.FK_Projekte AS PJID, Katwerte.Wert_Datum AS KatDOrder " & _
                                "From " & _
                                    "DB_Kategoriewerte As Katwerte " & _
                                "WHERE " & _
                                    "Katwerte.FK_Kategorie = " & OrderID & _
                                ") AS T1 ON t1.PJID = Pj.ID " & _
                            where & _
                            " ORDER BY " & _
                                "T1.KatDOrder " & tOrder
            ElseIf LCase(OrderByFieldArt) = "number" Then
                statement = "SELECT " & _
                                "PJ.ID, PJ.Projektcode, T1.KatDOrder " & _
                            "From " & _
                                "DB_Projekte AS PJ RIGHT JOIN " & _
                                "(SELECT " & _
                                    "Katwerte.FK_Projekte AS PJID, Katwerte.Wert_Zahl AS KatDOrder " & _
                                "From " & _
                                    "DB_Kategoriewerte As Katwerte " & _
                                "WHERE " & _
                                    "Katwerte.FK_Kategorie = " & OrderID & _
                                ") AS T1 ON t1.PJID = Pj.ID " & _
                            where & _
                            " ORDER BY " & _
                                "T1.KatDOrder " & tOrder
            End If
        End If
    End If

    nlc_ppf_PJTabelle.Range("D15").FormatConditions.delete
   
    nlc_ppf_PJTabelle.Range("D15").FormatConditions.add Type:=xlExpression, Formula1:= _
                                                                    "=WENN($A15=""G"";WAHR;FALSCH)=WAHR"
     nlc_ppf_PJTabelle.Range("D15").FormatConditions(nlc_ppf_PJTabelle.Range("D15").FormatConditions.count).SetFirstPriority
    With nlc_ppf_PJTabelle.Range("D15").FormatConditions(1).Font
        .Bold = True
        .Italic = False
        .TintAndShade = 0
    End With
    
    nlc_ppf_PJTabelle.Range("D15").FormatConditions(1).StopIfTrue = False
    
    tmpGrp = 0
    
    On Error GoTo error
    If Class_Functions.DB.Select_Statement(statement) = False Then GoTo error
    
    Do While Not Class_Functions.DB.Recordset.EOF
        nlc_ppf_PJTabelle.Rows("15:15").Copy
        nlc_ppf_PJTabelle.Rows(x & ":" & x).PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        
        If GroupByID <> "0" Then
            '###############################################
            '################## GROUP BY STEP ONE ##########
            '###############################################
            
            If tmpGrp <> Nz0(Class_Functions.DB.Recordset!katD) Then
                tmpGrp = Nz0(Class_Functions.DB.Recordset!katD)
                nlc_ppf_PJTabelle.Cells(x, 1).value = "G"
                nlc_ppf_PJTabelle.Cells(x, 2).value = tmpGrp
                'nlc_ppf_PJTabelle.Cells(x, 3).value = "G-" & VBA.CStr(Class_Functions.DB.Recordset!katD)
                
                Y = 4
                While nlc_ppf_PJTabelle.Cells(10, Y).value <> ""
                    With calc_frm_masterdata.Range("B4:B65000")
                        Set c = .Find(nlc_ppf_PJTabelle.Cells(10, Y), LookIn:=xlValues)
                        If Not c Is Nothing Then
                            'firstAddress = c.row
                            If LCase(calc_frm_masterdata.Cells(c.row, 12)) = "summe" Then
                                nlc_ppf_PJTabelle.Cells(x, Y).value = "summe"
                                If x <> 17 Then
                                    For X2 = x - 1 To 17 Step -1
                                        If nlc_ppf_PJTabelle.Cells(X2, Y).value = "summe" Then
                                            nlc_ppf_PJTabelle.Cells(X2, Y).NumberFormat = "General"
                                            nlc_ppf_PJTabelle.Cells(X2, Y).FormulaR1C1 = "=SUM(R[1]C:R[" & x - X2 - 1 & "]C)"
                                            
                                        End If
                                        
                                    Next X2
                                End If
                                
                            ElseIf LCase(calc_frm_masterdata.Cells(c.row, 12)) = "schnitt" Then
                                 If x <> 17 Then
                                    For X2 = x - 1 To 17 Step -1
                                        If nlc_ppf_PJTabelle.Cells(X2, Y).value = "schnitt" Then
                                            nlc_ppf_PJTabelle.Cells(X2, Y).NumberFormat = "General"
                                            nlc_ppf_PJTabelle.Cells(X2, Y).FormulaR1C1 = "=AVERAGE(R[1]C:R[" & x - X2 - 1 & "]C)"
                                        End If
                                        
                                    Next X2
                                End If
                            End If
                        End If
                    End With
                    
                    Y = Y + 1
                Wend
                
                nlc_ppf_PJTabelle.Cells(x, 4).NumberFormat = "General"
                nlc_ppf_PJTabelle.Cells(x, 4).FormulaR1C1 = _
                "=VLOOKUP(RC[-2],calc_frm_masterdata!R4C22:R65000C24,3,FALSE)"
                
                x = x + 1
                nlc_ppf_PJTabelle.Rows("15:15").Copy
                nlc_ppf_PJTabelle.Rows(x & ":" & x).PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
                FSlot = "W"
            End If
            
            '###############################################
            '###############################################
        End If
        
        nlc_ppf_PJTabelle.Cells(x, 1).value = FSlot
        nlc_ppf_PJTabelle.Cells(x, 2).value = VBA.CStr(Class_Functions.DB.Recordset!ID)
        nlc_ppf_PJTabelle.Cells(x, 3).value = VBA.CStr(Class_Functions.DB.Recordset!Projektcode)
        
        If FSlot = "W" Then
            FSlot = "Gu"
        Else
            FSlot = "W"
        End If
        
        If Not Class_Functions.DB.Recordset.EOF Then
            Class_Functions.DB.Recordset.movenext
        Else
            Exit Do
        End If
        x = x + 1
    Loop
    
    If GroupByID <> "0" Then
        '###############################################
        '################## GROUP BY STEP TWO ##########
        '###############################################
          Y = 4
                While nlc_ppf_PJTabelle.Cells(10, Y).value <> ""
                    With calc_frm_masterdata.Range("B4:B65000")
                        Set c = .Find(nlc_ppf_PJTabelle.Cells(10, Y), LookIn:=xlValues)
                        If Not c Is Nothing Then
                            'firstAddress = c.row
                            If LCase(calc_frm_masterdata.Cells(c.row, 12)) = "summe" Then
                                'nlc_ppf_PJTabelle.Cells(x, Y).value = "summe"
                                If x <> 17 Then
                                    For X2 = x - 1 To 17 Step -1
                                        If nlc_ppf_PJTabelle.Cells(X2, Y).value = "summe" Then
                                            nlc_ppf_PJTabelle.Cells(X2, Y).NumberFormat = "General"
                                            nlc_ppf_PJTabelle.Cells(X2, Y).FormulaR1C1 = "=SUM(R[1]C:R[" & x - X2 - 1 & "]C)"
                                        End If
                                        
                                    Next X2
                                End If
                                
                            ElseIf LCase(calc_frm_masterdata.Cells(c.row, 12)) = "schnitt" Then
                                 If x <> 17 Then
                                    For X2 = x - 1 To 17 Step -1
                                        If nlc_ppf_PJTabelle.Cells(X2, Y).value = "schnitt" Then
                                            nlc_ppf_PJTabelle.Cells(X2, Y).NumberFormat = "General"
                                            nlc_ppf_PJTabelle.Cells(X2, Y).FormulaR1C1 = "=AVERAGE(R[1]C:R[" & x - X2 - 1 & "]C)"
                                        End If
                                        
                                    Next X2
                                End If
                            End If
                        End If
                    End With
                
                    Y = Y + 1
                Wend
        
        '###############################################
        '###############################################
    End If
    
    x = 17
    Do While nlc_ppf_PJTabelle.Cells(x, 2) <> ""
        If nlc_ppf_PJTabelle.Cells(x, 1) <> "G" Then
            Call FillP2PUE(x, nlc_ppf_PJTabelle.Cells(x, 2))
        End If
        x = x + 1
    Loop
    
    calc_master.Range("PJT_LastRow").value = x
    nlc_ppf_PJTabelle.Rows("15:15").Hidden = True
    Application.CutCopyMode = False
    nlc_ppf_PJTabelle.Activate
    nlc_ppf_PJTabelle.Range("A1").Select
Exit Sub
    
error:
   MsgBox Err.Description
End Sub

'TODO
Private Sub FillP2PUE(x As Long, ID As Variant)
    Dim Sqlstr As String
    Dim SqlstrKA As String
    Dim SqlstrRE As String
    Dim SqlstrKO As String
    
    Dim aktcol As Integer
    Dim tempWert As String
    Dim Sprache As String
    Dim colCounter As Integer
    Dim Table1Array() As String
    
    Const Table1Row = 7
    Const FKRow = 8
    Const FKDRow = 9
    Const IDRow = 10
    Const WertRow = 11
    
    
    'Neu Spalte f|fffd|r Spalte schreiben
    aktcol = 4
    colCounter = aktcol
    While nlc_ppf_PJTabelle.Cells(7, colCounter).value <> ""
        colCounter = colCounter + 1
    Wend
    
    ReDim Table1Array(colCounter - aktcol - 1)
    colCounter = 0
    
    While nlc_ppf_PJTabelle.Cells(7, aktcol).value <> ""  ' 135
        If nlc_ppf_PJTabelle.Cells(Table1Row, aktcol).value = "DB_Kategoriewerte" Then 'Wert
            If nlc_ppf_PJTabelle.Cells(WertRow, aktcol).value = "Wert_Zahl" Then
                Table1Array(colCounter) = "SELECT " & _
                                            nlc_ppf_PJTabelle.Cells(WertRow, aktcol).value & " " & _
                                         "FROM " & _
                                            "[DB_Projekte] AS PJ LEFT JOIN " & _
                                            nlc_ppf_PJTabelle.Cells(Table1Row, aktcol).value & " as Table1 ON PJ.id = Table1.FK_Projekte " & _
                                        "WHERE " & _
                                            "Table1.FK_Projekte =" & ID & " AND " & nlc_ppf_PJTabelle.Cells(FKRow, aktcol).value & " = " & nlc_ppf_PJTabelle.Cells(IDRow, aktcol).value
                                            
            ElseIf nlc_ppf_PJTabelle.Cells(WertRow, aktcol).value = "Wert_Datum" Then
                Table1Array(colCounter) = "SELECT " & _
                                Class_Functions.DB.Convert(nlc_ppf_PJTabelle.Cells(WertRow, aktcol).value, T_DATE) & " " & _
                            "FROM " & _
                                "DB_Projekte AS PJ LEFT JOIN " & _
                                nlc_ppf_PJTabelle.Cells(Table1Row, aktcol).value & " AS Table1 on PJ.id = Table1.FK_Projekte " & _
                            "WHERE " & _
                                "Table1.FK_Projekte =" & ID & " AND " & nlc_ppf_PJTabelle.Cells(FKRow, aktcol).value & " = " & nlc_ppf_PJTabelle.Cells(IDRow, aktcol).value
            Else
                Table1Array(colCounter) = "SELECT " & _
                                            nlc_ppf_PJTabelle.Cells(WertRow, aktcol).value & " " & _
                                        "FROM " & _
                                            "DB_Projekte AS PJ LEFT JOIN " & _
                                            nlc_ppf_PJTabelle.Cells(Table1Row, aktcol).value & " As Table1 on PJ.id = Table1.FK_Projekte " & _
                                        "WHERE " & _
                                            "Table1.FK_Projekte =" & ID & " AND " & nlc_ppf_PJTabelle.Cells(FKRow, aktcol).value & " = " & nlc_ppf_PJTabelle.Cells(IDRow, aktcol).value
            End If
        ElseIf nlc_ppf_PJTabelle.Cells(Table1Row, aktcol).value = "DB_Kategorie_Detail" Then 'FKDetail
           Table1Array(colCounter) = "SELECT " & _
                                        "Lang." & calc_master.Range("aktuelle_sprache") & " " & _
                                    "FROM" & _
                                        "(((DB_Projekte As PJ LEFT JOIN " & _
                                        "DB_Kategoriewerte AS Katwerte ON PJ.id = Katwerte.fk_projekte) LEFT JOIN " & _
                                        "DB_Kategorie_Detail AS KatDet ON Katwerte.FK_Kategorie_Detail = KatDet.ID) LEFT JOIN " & _
                                        "DB_Language AS Lang ON Lang.Term = KatDet." & nlc_ppf_PJTabelle.Cells(WertRow, aktcol).value & ") " & _
                                    "WHERE " & _
                                        "Katwerte.FK_Projekte =" & ID & " AND Katwerte.FK_Kategorie = " & nlc_ppf_PJTabelle.Cells(IDRow, aktcol).value
        ElseIf nlc_ppf_PJTabelle.Cells(Table1Row, aktcol).value = "DB_Ressourcen" Then 'Ress
            If nlc_ppf_PJTabelle.Cells(9, aktcol).value = "group" Then
                Table1Array(colCounter) = "SELECT " & _
                                            "SUM(" & nlc_ppf_PJTabelle.Cells(WertRow, aktcol).value & ") " & " " & _
                                        "FROM " & _
                                            "(([DB_Ressourcenarten] AS Ressart LEFT JOIN " & _
                                            "[DB_Ressourcen] As Ressourcen ON Ressart.ID = Ressourcen.FK_Ressourcenarten) RIGHT JOIN " & _
                                            "[DB_Ressourcenarten] AS Ressgroup ON Ressgroup.ID = Ressart.FK_Ressourcenarten) " & _
                                        "WHERE " & _
                                            "(Ressgroup.FK_Ressourcenarten = " & nlc_ppf_PJTabelle.Cells(IDRow, aktcol).value & ") " & _
                                        "GROUP BY " & _
                                            "Ressgroup.ID, Ressourcen.FK_Projekte " & _
                                        "HAVING " & _
                                            "(Ressourcen.FK_Projekte = " & ID & ")"
            Else
                Table1Array(colCounter) = "SELECT " & _
                                            nlc_ppf_PJTabelle.Cells(WertRow, aktcol).value & " " & _
                                        "FROM " & _
                                            "DB_Projekte AS PJ LEFT JOIN " & _
                                            nlc_ppf_PJTabelle.Cells(Table1Row, aktcol).value & " AS Table1 ON PJ.id = Table1.FK_Projekte " & _
                                        "WHERE " & _
                                            "Table1.FK_Projekte =" & ID & " AND " & nlc_ppf_PJTabelle.Cells(FKRow, aktcol).value & " = " & nlc_ppf_PJTabelle.Cells(IDRow, aktcol).value
            End If
        ElseIf nlc_ppf_PJTabelle.Cells(Table1Row, aktcol).value = "DB_Kosten" Then 'Ress
            Table1Array(colCounter) = "SELECT " & _
                                        nlc_ppf_PJTabelle.Cells(WertRow, aktcol).value & " " & _
                                    "FROM " & _
                                        "DB_Projekte AS PJ LEFT JOIN " & _
                                        nlc_ppf_PJTabelle.Cells(Table1Row, aktcol).value & " AS Table1 ON PJ.id = Table1.FK_Projekte " & _
                                    "WHERE " & _
                                        "Table1.FK_Projekte =" & ID & " AND " & nlc_ppf_PJTabelle.Cells(FKRow, aktcol).value & " = " & nlc_ppf_PJTabelle.Cells(IDRow, aktcol).value
        End If
        colCounter = colCounter + 1
        aktcol = aktcol + 1
    Wend
    
    colCounter = 0
    aktcol = 4
    
    For colCounter = 0 To UBound(Table1Array) - 1 Step 1
        If Class_Functions.DB.Select_Statement(Table1Array(colCounter)) = True Then
            If Not Class_Functions.DB.Recordset.EOF Then
                nlc_ppf_PJTabelle.Cells(x, aktcol).CopyFromRecordset Class_Functions.DB.Recordset
            End If
        End If
        aktcol = aktcol + 1
    Next colCounter
    
    nlc_ppf_PJTabelle.Range(nlc_ppf_PJTabelle.Cells(17, 2), nlc_ppf_PJTabelle.Cells(x, colCounter + 3)).WrapText = False
    If nlc_ppf_PJTabelle.Cells(x, 1).value = "Gu" Then
        With nlc_ppf_PJTabelle.Range(nlc_ppf_PJTabelle.Cells(x, 2), nlc_ppf_PJTabelle.Cells(x, colCounter + 3))
        .Interior.ThemeColor = xlThemeColorDark1
        .Interior.Pattern = xlSolid
        .Interior.PatternColorIndex = xlAutomatic
        .Interior.TintAndShade = -0.14996795556505
        .Interior.PatternTintAndShade = 0
        End With
    End If
    
error:
    'MsgBox Err.Description
End Sub

Public Sub CellDoubleClick(Target As Range)
    If Target.row >= 17 And Target.row <= calc_master.Range("PJT_LastRow").value Then
        calc_master.Range("sel_pj_id").value = nlc_ppf_PJTabelle.Cells(Target.row, 2).value
        frm_projects.Show
        Exit Sub
    End If
End Sub

Public Sub btn_bigger()
    If VBA.IsNumeric(nlc_ppf_PJTabelle.Cells(10, Selection.Column).value) And nlc_ppf_PJTabelle.Cells(10, Selection.Column).value <> "" Then
        If nlc_ppf_PJTabelle.Cells(7, Selection.Column).value <> "DB_Ressourcen" And nlc_ppf_PJTabelle.Cells(7, Selection.Column).value <> "DB_Kosten" Then
            If nlc_ppf_PJTabelle.Cells(6, Selection.Column).value + 0.75 <= 50 Then
                nlc_intern.Application_off
                nlc_ppf_PJTabelle.Unprotect nlc_intern.get_pw
                
                Call SQL_Abfragen.Update_Kategorien(nlc_ppf_PJTabelle.Cells(10, Selection.Column).value, "ColWidth", VBA.CStr(nlc_ppf_PJTabelle.Cells(6, Selection.Column).value + 0.75))
                nlc_ppf_PJTabelle.Cells(6, Selection.Column).value = nlc_ppf_PJTabelle.Cells(6, Selection.Column).value + 0.75
                nlc_ppf_PJTabelle.columns(Selection.Column).ColumnWidth = nlc_ppf_PJTabelle.Cells(6, Selection.Column).value
            
                nlc_ppf_PJTabelle.Protect nlc_intern.get_pw
                nlc_intern.Application_on
            Else
                nlc_language.FindValue ("SMessage_TempNotFound")
                MsgBox nlc_language.FindValue("SMessage_MaxFieldWidth"), vbInformation + vbOKOnly
            End If
        Else
            MsgBox "Es k|fffd|nnen nur Benutzerdef. Felder ver|fffd|ndert werden.", vbInformation + vbOKOnly
        End If
    Else
        MsgBox "Es k|fffd|nnen nur Benutzerdef. Felder ver|fffd|ndert werden.", vbInformation + vbOKOnly
    End If
End Sub

Public Sub btn_smaler()
    If VBA.IsNumeric(nlc_ppf_PJTabelle.Cells(10, Selection.Column).value) And nlc_ppf_PJTabelle.Cells(10, Selection.Column).value <> "" Then
        If nlc_ppf_PJTabelle.Cells(7, Selection.Column).value <> "DB_Ressourcen" And nlc_ppf_PJTabelle.Cells(7, Selection.Column).value <> "DB_Kosten" Then
            If nlc_ppf_PJTabelle.Cells(6, Selection.Column).value - 0.75 >= 5 Then
                nlc_intern.Application_off
                nlc_ppf_PJTabelle.Unprotect nlc_intern.get_pw
                
                Call SQL_Abfragen.Update_Kategorien(nlc_ppf_PJTabelle.Cells(10, Selection.Column).value, "ColWidth", VBA.CStr(nlc_ppf_PJTabelle.Cells(6, Selection.Column).value - 0.75))
                nlc_ppf_PJTabelle.Cells(6, Selection.Column).value = nlc_ppf_PJTabelle.Cells(6, Selection.Column).value - 0.75
                nlc_ppf_PJTabelle.columns(Selection.Column).ColumnWidth = nlc_ppf_PJTabelle.Cells(6, Selection.Column).value
            
                nlc_ppf_PJTabelle.Protect nlc_intern.get_pw
                nlc_intern.Application_on
            Else
                MsgBox nlc_language.FindValue("SMessage_MinFieldWidth"), vbInformation + vbOKOnly
            End If
        Else
            MsgBox "Es k|fffd|nnen nur Benutzerdef. Felder ver|fffd|ndert werden.", vbInformation + vbOKOnly
        End If
    Else
        MsgBox "Es k|fffd|nnen nur Benutzerdef. Felder ver|fffd|ndert werden.", vbInformation + vbOKOnly
    End If
End Sub


Attribute VB_Name = "nlc_PViewer"
Option Explicit

Public Function PViewer_LoadProject()
    Call clear_content
    
    If nlc_ppf_viewer.Range("PV_SelectedProject").value = "" Then
        Exit Function
    End If
    
    nlc_intern.Application_off
    nlc_ppf_viewer.Unprotect (nlc_intern.get_pw)
    
    nlc_ppf_viewer.Activate
    
    Dim statement As String
    statement = "SELECT Projektcode AS PjNr " & _
                "FROM [DB_Projekte] " & _
                "WHERE ID = " & nlc_ppf_viewer.Range("PV_PJID").value
    
    If Class_Functions.DB.Select_Statement(statement) = True Then
        If Not Class_Functions.DB.Recordset.EOF Then
            nlc_ppf_viewer.Range("PV_PJNr").value = Class_Functions.DB.Recordset!pjnr
        End If
    End If
    
    Call SQL_Abfragen.Get_Setting_PViewer_Values(nlc_ppf_viewer.Range("PV_PJID").value)
    
    'PM Phase erstellen ID 19
    Call generate_Phase
    
    'Ampel setzten Kat ID 3
    'Rot = 3; Gelb = 2; Gr|fffd|n = 1
    If nlc_ppf_viewer.Range("PV_Ampelstatus").value = 2 Then
        Call set_ampel("pv_amepl_yellow", "pv_amepl_red", "pv_amepl_green", msoThemeColorAccent2)
    ElseIf nlc_ppf_viewer.Range("PV_Ampelstatus").value = 1 Then
        Call set_ampel("pv_amepl_green", "pv_amepl_red", "pv_amepl_yellow", msoThemeColorAccent1)
    ElseIf nlc_ppf_viewer.Range("PV_Ampelstatus").value = 3 Then
        Call set_ampel("pv_amepl_red", "pv_amepl_green", "pv_amepl_yellow", msoThemeColorAccent4)
    Else
        'alles grau
        Call set_ampel("pv_amepl_green", "pv_amepl_red", "pv_amepl_yellow", msoThemeColorBackground1)
    End If
    
    'Detailkategorie ID gegen Text austauschen
    'Projektart
    If nlc_ppf_viewer.Range("PV_PJArt") <> "" Then
        nlc_ppf_viewer.Range("PV_PJArt").FormulaR1C1 = "=VLOOKUP(" & nlc_ppf_viewer.Range("PV_PJArt").value & ",frm_KatDetails,3,FALSE)"
    End If
    
    'Komplexit|fffd|t
    If nlc_ppf_viewer.Range("PV_Komplex") <> "" Then
        nlc_ppf_viewer.Range("PV_Komplex").FormulaR1C1 = "=VLOOKUP(" & nlc_ppf_viewer.Range("PV_Komplex").value & ",frm_KatDetails,3,FALSE)"
    End If
    
    'Priorit|fffd|t
    If nlc_ppf_viewer.Range("PV_Prio") <> "" Then
        nlc_ppf_viewer.Range("PV_Prio").FormulaR1C1 = "=VLOOKUP(" & nlc_ppf_viewer.Range("PV_Prio").value & ",frm_KatDetails,3,FALSE)"
    End If
    
    'Portfoliobereich
    If nlc_ppf_viewer.Range("PV_Portfoliobereich") <> "" Then
        nlc_ppf_viewer.Range("PV_Portfoliobereich").FormulaR1C1 = "=VLOOKUP(" & nlc_ppf_viewer.Range("PV_Portfoliobereich").value & ",frm_KatDetails,3,FALSE)"
    End If
    
    
    nlc_ppf_viewer.Range("PV_BStart").value = CDate(nlc_ppf_viewer.Range("PV_BStart").value)
    nlc_ppf_viewer.Range("PV_BEnd").value = CDate(nlc_ppf_viewer.Range("PV_BEnd").value)
    nlc_ppf_viewer.Range("PV_AStart").value = CDate(nlc_ppf_viewer.Range("PV_AStart").value)
    nlc_ppf_viewer.Range("PV_AEnd").value = CDate(nlc_ppf_viewer.Range("PV_AEnd").value)
    
    
    'Lade Meilsteine
    Call SQL_Abfragen.Get_MeilensteinDates(nlc_ppf_viewer.Range("PV_PJID").value)

    'Lade Ressourcen & Kosten
    Call SQL_Abfragen.Get_ResCostValues(nlc_ppf_viewer.Range("PV_PJID").value)
    
    nlc_ppf_viewer.Cells(1, 1).Activate
    
    nlc_ppf_viewer.Protect (nlc_intern.get_pw)
    nlc_intern.Application_on
End Function

Private Sub generate_Phase()
    Dim counter As Integer
    
    If nlc_ppf_viewer.Range("PV_PMPhase").value = "" Then
        Call FormatPMPhase("PMPhaseCurrent-2", False, "")
        Call FormatPMPhase("PMPhaseCurrent-1", False, "")
        Call FormatPMPhase("PMPhaseCurrent", False, "")
        Call FormatPMPhase("PMPhaseCurrent+1", False, "")
        Call FormatPMPhase("PMPhaseCurrent+2", False, "")
        Call FormatPMPhase("PMPhaseCurrent+3", False, "")
    Else
        For counter = 1 To calc_frm_masterdata.Range("KatD_19").Rows.count Step 1
            If VBA.CStr(calc_frm_masterdata.Range("KatD_19").Cells(counter, 1).value) = nlc_ppf_viewer.Range("PV_PMPhase").value Then
                If (counter - 2) > 0 Then
                    'erstes Objekt beschriften
                    Call FormatPMPhase("PMPhaseCurrent-2", True, calc_frm_masterdata.Range("KatD_19").Cells(counter - 2, 3).value)
                    Call FormatPMPhase("PMPhaseCurrent-1", True, calc_frm_masterdata.Range("KatD_19").Cells(counter - 1, 3).value)
                ElseIf (counter - 1) > 0 Then
                    'zweites Objekt beschriften, erstes Objekt ausblenden
                    Call FormatPMPhase("PMPhaseCurrent-2", False, "")
                    Call FormatPMPhase("PMPhaseCurrent-1", True, calc_frm_masterdata.Range("KatD_19").Cells(counter - 1, 3).value)
                Else
                    Call FormatPMPhase("PMPhaseCurrent-2", False, "")
                    Call FormatPMPhase("PMPhaseCurrent-1", False, "")
                End If
                
                Call FormatPMPhase("PMPhaseCurrent", True, calc_frm_masterdata.Range("KatD_19").Cells(counter, 3).value)
                
                If (counter + 3) <= Range("KatD_19").Rows.count Then
                    'erstes Objekt beschriften
                    Call FormatPMPhase("PMPhaseCurrent+3", True, calc_frm_masterdata.Range("KatD_19").Cells(counter + 3, 3).value)
                    Call FormatPMPhase("PMPhaseCurrent+2", True, calc_frm_masterdata.Range("KatD_19").Cells(counter + 2, 3).value)
                    Call FormatPMPhase("PMPhaseCurrent+1", True, calc_frm_masterdata.Range("KatD_19").Cells(counter + 1, 3).value)
                ElseIf (counter + 2) <= Range("KatD_19").Rows.count Then
                    'erstes Objekt beschriften
                    Call FormatPMPhase("PMPhaseCurrent+3", False, "")
                    Call FormatPMPhase("PMPhaseCurrent+2", True, calc_frm_masterdata.Range("KatD_19").Cells(counter + 2, 3).value)
                    Call FormatPMPhase("PMPhaseCurrent+1", True, calc_frm_masterdata.Range("KatD_19").Cells(counter + 1, 3).value)
                ElseIf (counter + 1) <= Range("KatD_19").Rows.count Then
                    'zweites Objekt beschriften, erstes Objekt ausblenden
                    Call FormatPMPhase("PMPhaseCurrent+3", False, "")
                    Call FormatPMPhase("PMPhaseCurrent+2", False, "")
                    Call FormatPMPhase("PMPhaseCurrent+1", True, calc_frm_masterdata.Range("KatD_19").Cells(counter + 1, 3).value)
                Else
                    Call FormatPMPhase("PMPhaseCurrent+2", False, "")
                    Call FormatPMPhase("PMPhaseCurrent+1", False, "")
                End If
                
                Exit For
            End If
        Next counter
    End If
End Sub

Private Sub clear_content()
    nlc_intern.Application_off
    nlc_ppf_viewer.Unprotect (nlc_intern.get_pw)
    
    nlc_ppf_viewer.Range("PV_PJBezeichnung").value = ""
    nlc_ppf_viewer.Range("PV_PJKurzbezeichnung").value = ""
    nlc_ppf_viewer.Range("PV_PJBeschreibung").value = ""
    nlc_ppf_viewer.Range("PV_PAG").value = ""
    nlc_ppf_viewer.Range("PV_PL").value = ""
    nlc_ppf_viewer.Range("PV_PJArt").value = ""
    nlc_ppf_viewer.Range("PV_PJNr").value = ""
    nlc_ppf_viewer.Range("PV_PJSB").value = ""
    nlc_ppf_viewer.Range("PV_Ampelstatus").value = ""
    nlc_ppf_viewer.Range("PV_BStart").value = ""
    nlc_ppf_viewer.Range("PV_BEnd").value = ""
    nlc_ppf_viewer.Range("PV_AStart").value = ""
    nlc_ppf_viewer.Range("PV_AEnd").value = ""
    nlc_ppf_viewer.Range("PV_PMPhase").value = ""
    nlc_ppf_viewer.Range("PV_Portfoliobereich").value = ""
    nlc_ppf_viewer.Range("PV_Prio").value = ""
    nlc_ppf_viewer.Range("PV_Statusdatum").value = ""
    
    'Meilensteine
    nlc_ppf_viewer.Range("PV_MST").ClearContents

    'Ressourcen
'    nlc_ppf_viewer.range("PV_ResBasis") = ""
'    nlc_ppf_viewer.range("PV_ResAktuell") = ""
'    nlc_ppf_viewer.range("PV_ResIst") = ""
    'Kosten
        
    'alles grau
    Call set_ampel("pv_amepl_green", "pv_amepl_red", "pv_amepl_yellow", msoThemeColorBackground1)
    
    nlc_ppf_viewer.Range("PV_PMPhase").value = ""
    Call generate_Phase
    
    nlc_ppf_viewer.Protect (nlc_intern.get_pw)
    nlc_intern.Application_on
End Sub

Private Sub set_ampel(activeShape As String, inactiveShape1 As String, inactiveShape2 As String, activeColor As MsoThemeColorIndex)
    ActiveSheet.Shapes.Range(Array(activeShape)).Select
    With Selection.ShapeRange.Fill
        .ForeColor.ObjectThemeColor = activeColor
        .Solid
    End With
    With Selection.ShapeRange.line
        '.ForeColor.ObjectThemeColor = activeColor
        '.ForeColor.Brightness = -0.5
    End With
    
    ActiveSheet.Shapes.Range(Array(inactiveShape1)).Select
    With Selection.ShapeRange.Fill
        .ForeColor.ObjectThemeColor = msoThemeColorBackground1
        '.ForeColor.Brightness = -0.0500000007
        .Solid
    End With
    With Selection.ShapeRange.line
        '.ForeColor.ObjectThemeColor = msoThemeColorBackground1
        '.ForeColor.Brightness = -0.5
    End With
    
    ActiveSheet.Shapes.Range(Array(inactiveShape2)).Select
    With Selection.ShapeRange.Fill
        .ForeColor.ObjectThemeColor = msoThemeColorBackground1
        '.ForeColor.Brightness = -0.0500000007
        .Solid
    End With
    With Selection.ShapeRange.line
        '.ForeColor.ObjectThemeColor = msoThemeColorBackground1
        '.ForeColor.Brightness = -0.5
    End With
End Sub

Public Function refresh_PJList(Optional SelectedProject As String)
    Dim leer As Object
    Dim result As String
    
    result = SQL_Abfragen.Get_Setting_PViewer_Value(calc_master.Range("last_PViewer_ID").value, "FK_Filter")
    If result = "" Then GoTo error
    
    Call SQL_Abfragen.Get_ProjectFilterResult(leer, SQL_Abfragen.Get_Setting_PViewer_Value(calc_master.Range("last_PViewer_ID").value, "FK_Filter"), False)
    
    If VBA.IsNull(SelectedProject) <> True And SelectedProject <> "" Then
        nlc_ppf_viewer.Range("PV_SelectedProject").value = SelectedProject
        nlc_ppf_viewer.Calculate
    End If
    
    Call PViewer_LoadProject
    
    Exit Function

error:
    Call ErrorHandler.HandleMessage(nlsWarning, "Der zu diesem Template hinterlegte Filter existiert nicht mehr. Bitte w|fffd|hlen Sie einen neuen Filter aus.", "Fehler beim generieren", False)
End Function

Private Sub FormatPMPhase(ObjectName As String, visible As Boolean, value As String)
On Error GoTo Fehler
    With ActiveSheet.Shapes.Range(Array(ObjectName))
        If visible = False Then
            .visible = False
        Else
            .visible = True
            
            .Select
            Selection.ShapeRange(1).TextFrame2.TextRange.Characters.text = value
        End If
        GoTo Ende
Fehler:
        .visible = False
    End With
    
Ende:
End Sub




Attribute VB_Name = "nlc_barchart"
Option Explicit
Option Private Module

Public Sub generate_barchart()
    Dim ValueArt As String
    Dim ValueArtDetail As String
    Dim Cluster_Art As String
    Dim Cluster_ID_Value As String
    Dim AreaDescr As String
    Dim colored As Boolean


    Dim TemplateID As String

    'Tabelle generieren
    'On Error GoTo ende:
    nlc_intern.Application_off
    nlc_ppf_bar.Unprotect (nlc_intern.get_pw)
    
    colored = SQL_Abfragen.Get_Setting_Bar_Value(calc_master.Range("last_bar_ID"), "RessColor")
    
    nlc_ppf_bar.Select

    Call SQL_Abfragen.Get_BarCalc
    
    nlc_ppf_bar.Calculate
    
    If SQL_Abfragen.Get_Setting_Bar_Value(calc_master.Range("last_bar_ID"), "RessColor") = True Then
        Call Set_BarChart_StandardColor(True)
        Call Set_BarCalc_StandardColor(True)
    Else
        Call Set_BarChart_StandardColor(False)
        Call Set_BarCalc_StandardColor(False)
    End If
    
    nlc_ppf_bar.columns("F:Y").ColumnWidth = 0 '2.5
    nlc_ppf_bar.columns("F:Y").EntireColumn.AutoFit
    
    nlc_ppf_bar.Protect (nlc_intern.get_pw)
    nlc_intern.Application_on
End Sub

Private Sub Set_BarChart_CustomColor()
    Dim counter As Integer
    Dim col As Integer
    Dim row As Integer
    
    On Error Resume Next
    nlc_ppf_bar.ChartObjects("BarChart").Activate
    
    row = 18
    col = 10
    
    For counter = 43 To 43 + 21 Step 1
        ActiveChart.SeriesCollection(1).Points(counter - 42).Interior.ColorIndex = calc_master.Range("farben_gesamt").Cells(nlc_ppf_bar.Cells(counter, 7).value, 1).value
        
        nlc_ppf_bar.Cells(row, col).Interior.ColorIndex = calc_master.Range("farben_gesamt").Cells(nlc_ppf_bar.Cells(counter, 7).value, 1).value
        
        If col = 10 Then
            col = 14
        Else
            row = row + 2
            col = 10
        End If
    Next counter
End Sub

Private Sub Set_BarCalc_StandardColor(colored As Boolean)
    If colored Then
        nlc_ppf_bar.Range("AB48").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorAccent5
                .TintAndShade = -0.249946592608417
            End With
        nlc_ppf_bar.Range("AB46").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorAccent3
                .TintAndShade = -0.249946592608417
            End With
        nlc_ppf_bar.Range("AB44").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorAccent1
                .TintAndShade = -0.249946592608417
            End With
        nlc_ppf_bar.Range("AB42").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorDark2
                .TintAndShade = -0.249946592608417
            End With
        nlc_ppf_bar.Range("AB40").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorAccent4
                .TintAndShade = -0.249946592608417
            End With
        nlc_ppf_bar.Range("AB38").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorAccent2
                .TintAndShade = -0.249946592608417
            End With
        nlc_ppf_bar.Range("AB36").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorLight1
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB34").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorAccent5
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB32").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorAccent3
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB30").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorAccent1
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB28").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorDark2
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB26").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorAccent4
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB24").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorAccent2
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB22").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorLight1
                .TintAndShade = 0.799981688894314
            End With
        nlc_ppf_bar.Range("AB20").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorAccent5
                .TintAndShade = 0.799981688894314
            End With
        nlc_ppf_bar.Range("AB18").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorAccent3
                .TintAndShade = 0.799981688894314
            End With
        nlc_ppf_bar.Range("AB16").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorAccent1
                .TintAndShade = 0.799981688894314
            End With
        nlc_ppf_bar.Range("AB14").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorDark2
                .TintAndShade = 0.799981688894314
            End With
        nlc_ppf_bar.Range("AB12").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorAccent4
                .TintAndShade = 0.799981688894314
            End With
        nlc_ppf_bar.Range("AB10").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorAccent2
                .TintAndShade = 0.799981688894314
            End With
    Else
        nlc_ppf_bar.Range("AB48").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorDark2
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB46").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorDark2
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB44").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorDark2
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB42").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorDark2
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB40").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorDark2
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB38").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorDark2
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB36").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorDark2
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB34").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorDark2
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB32").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorDark2
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB30").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorDark2
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB28").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorDark2
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB26").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorDark2
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB24").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorDark2
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB22").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorDark2
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB20").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorDark2
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB18").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorDark2
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB16").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorDark2
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB14").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorDark2
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB12").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorDark2
                .TintAndShade = 0
            End With
        nlc_ppf_bar.Range("AB10").Select
            With Selection.Interior
                .ThemeColor = xlThemeColorDark2
                .TintAndShade = 0
            End With
    End If
End Sub

Private Sub Set_BarChart_StandardColor(colored As Boolean)
    'Wenn nicht alle ChartPoints vorhanden sind einfach |fffd|berspringen...
    On Error Resume Next
    
    nlc_ppf_bar.ChartObjects("BarChart").Activate
    
    If colored Then
        ActiveChart.SeriesCollection(1).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorAccent5
                .ForeColor.Brightness = -0.25
            End With
        ActiveChart.SeriesCollection(2).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorAccent3
                .ForeColor.Brightness = -0.25
            End With
        ActiveChart.SeriesCollection(3).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorAccent1
                .ForeColor.Brightness = -0.25
            End With
        ActiveChart.SeriesCollection(4).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                .ForeColor.Brightness = -0.25
            End With
        ActiveChart.SeriesCollection(5).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorAccent4
                .ForeColor.Brightness = -0.25
            End With
        ActiveChart.SeriesCollection(6).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorAccent2
                .ForeColor.Brightness = -0.25
            End With
        ActiveChart.SeriesCollection(7).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorText1
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(8).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorAccent5
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(9).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorAccent3
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(10).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorAccent1
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(11).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(12).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorAccent4
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(13).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorAccent2
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(14).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorText1
                .ForeColor.Brightness = 0.8000000119
            End With
        ActiveChart.SeriesCollection(15).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorAccent5
                .ForeColor.Brightness = 0.8000000119
            End With
        ActiveChart.SeriesCollection(16).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorAccent3
                .ForeColor.Brightness = 0.8000000119
            End With
        ActiveChart.SeriesCollection(17).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorAccent1
                .ForeColor.Brightness = 0.8000000119
            End With
        ActiveChart.SeriesCollection(18).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                .ForeColor.Brightness = 0.8000000119
            End With
        ActiveChart.SeriesCollection(19).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorAccent4
                .ForeColor.Brightness = 0.8000000119
            End With
        ActiveChart.SeriesCollection(20).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorAccent2
                .ForeColor.Brightness = 0.8000000119
            End With
    Else
        ActiveChart.SeriesCollection(1).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(2).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(3).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(4).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(5).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(6).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(7).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(8).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(9).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(10).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(11).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(12).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(13).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(14).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(15).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(16).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(17).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(18).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(19).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                .ForeColor.Brightness = 0
            End With
        ActiveChart.SeriesCollection(20).Select
            With Selection.Format.Fill
                .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                .ForeColor.Brightness = 0
            End With
    End If
End Sub


Attribute VB_Name = "nlc_filter"
' --------------------------
' Comperators
' --------------------------
' 1 -> <
' 2 -> <=
' 3 -> ==
' 4 -> !=
' 5 -> >
' 6 -> >=
'
' --------------------------
' Filtertypes
' --------------------------
' 1 -> Resourcenart
' 2 -> Resourcengruppe
' 3 -> Kostenart
' 4 -> Kategorie
'
' --------------------------
' FieldTypes
' --------------------------
' 1 -> Basis
' 2 -> Aktuell
' 3 -> Ist
' 4 -> Rest
' 5 -> Abweichung
'
' --------------------------
' SetType
' --------------------------
' 1 -> Zahl (Res, Kosten)
' 2 -> Zahl (Kategorie)
' 3 -> Datum (Kategorie)
' 4 -> String (Kategorie)
' 5 -> Dropdown (Kategorie)

Public Function gernateSqlQueryByFilterId(filterId As String, Optional ByVal getText As Boolean = False)

    Dim i As Double
    Dim krit() As Variant
    Dim ret As String
    Dim sqlSelects As String
    Dim sqlJoins As String
    Dim sqlWheres As String
    Dim sqlResGroup As String
    Dim sql As String
    Dim First As Boolean
    Dim comp As String
    Dim value As String
    Dim value_s As String
    Dim lastGroupId
    Dim SepInGroup As String
    Dim SepBetweenGroup As String
    Dim GroupNumbers As Double
    Dim SetNumbers As Double
    Dim SetJoinId As String
    Dim showallprojects As Boolean
    Dim PFType As String
    Dim groupname As String
    Dim Klammercounter As Integer 'TODO
    Dim KlasserString As String
    
    GroupNumbers = 1
    SetNumbers = 1
    SetJoinId = ""
    krit = Get_DataForFilterQueryByFilterId(filterId) 'erledigt
    ret = ""
    sqlJoins = " LEFT JOIN DB_Kategoriewerte AS pf ON pf.FK_Projekte = p.ID) " & vbNewLine
    Klammercounter = 1
    sqlSelects = ""
    sqlResGroup = ""
    sqlWheres = ""
    sqlResGroup = "SELECT r.FK_Projekte, ra.FK_Ressourcenarten AS Ressourcengruppen, SUM(Ist) AS Ist, SUM(Basis) AS Basis, SUM(Aktuell) AS Aktuell, SUM(Rest) AS Rest, SUM(Abweichung) AS Abweichung  " & _
                  "FROM DB_Ressourcen r  LEFT JOIN DB_Ressourcenarten ra ON r.FK_Ressourcenarten = ra.Id " & _
                  "GROUP BY ra.FK_Ressourcenarten, r.FK_Projekte"
    sql = ""
    First = True
    comp = ""
    
    If krit(0, 0) <> "leer" Then
        If (krit(i, 3) = "0") Then
             SepInGroup = "AND"
             SepBetweenGroup = "OR"
        Else
             SepInGroup = "OR"
             SepBetweenGroup = "AND"
        End If
        
        If (krit(i, 10) = "0") Then
             showallprojects = True
        Else
             showallprojects = False
        End If
        
        For i = 0 To UBound(krit) Step 1
            If (krit(i, 1) <> "0") Then ' Wenns ne Gruppe gibt dann mach weiter
                If (krit(i, 2) <> "0") Then ' Wenns dann auch noch ein Set gibt dann fang an zu hackl'n
                    groupname = krit(i, 12)
                    If (First) Then
                        lastGroupId = krit(i, 1)
                        ret = "" & groupname & vbNewLine
                        sqlWheres = "((" & vbNewLine
                        First = False
                    Else
                        If (lastGroupId <> krit(i, 1)) Then
                            ret = ret & vbNewLine & groupname & " " & vbNewLine
                            sqlWheres = sqlWheres & vbNewLine & ")) " & SepBetweenGroup & " ((" & vbNewLine
                            GroupNumbers = GroupNumbers + 1
                            SetNumbers = 1
                            lastGroupId = krit(i, 1)
                        Else
                            ret = ret & vbNewLine
                            sqlWheres = sqlWheres & " )" & SepInGroup & "( " & vbNewLine
                            SetNumbers = SetNumbers + 1
                        End If
                    End If
                    
                    SetJoinId = "g" & Trim$(str(GroupNumbers)) & "s" & Trim$(str(SetNumbers))
                    
                    Select Case (krit(i, 6))
                        Case (1): comp = " < "
                        Case (2): comp = " <= "
                        Case (3): comp = " = "
                        Case (4): comp = " <> "
                        Case (5): comp = " >= "
                        Case (6): comp = " > "
                    End Select
                    
                    value = krit(i, 7)
                    value_s = krit(i, 12)
                    
                    If (krit(i, 5) = "1") Then 'Resourcenarten
                        Klammercounter = Klammercounter + 1
                        sqlJoins = sqlJoins & " LEFT JOIN DB_Ressourcen AS " & SetJoinId & " ON (" & SetJoinId & ".FK_Projekte = p.ID AND " & SetJoinId & ".FK_Ressourcenarten = " & krit(i, 4) & "))" & vbNewLine
                        sqlSelects = sqlSelects & ", " & SetJoinId & ".Ist AS " & SetJoinId & vbNewLine
                        sqlWheres = sqlWheres & SetJoinId & ".Ist " & comp & " " & value
                    ElseIf (krit(i, 5) = "2") Then 'Rresoucengruppen
                        Klammercounter = Klammercounter + 1
                        sqlJoins = sqlJoins & " LEFT JOIN (" & sqlResGroup & ") AS " & SetJoinId & " ON (" & SetJoinId & ".FK_Projekte = p.ID AND " & SetJoinId & ".Ressourcengruppen = " & krit(i, 4) & "))" & vbNewLine
                        sqlSelects = sqlSelects & ", " & SetJoinId & ".Ist AS " & SetJoinId & vbNewLine
                        sqlWheres = sqlWheres & SetJoinId & ".Ist " & comp & " " & value
                    ElseIf (krit(i, 5) = "3") Then 'Kostenarten
                        Klammercounter = Klammercounter + 1
                        sqlJoins = sqlJoins & " LEFT JOIN DB_Kosten AS " & SetJoinId & " ON (" & SetJoinId & ".FK_Projekte = p.ID AND " & SetJoinId & ".FK_Kostenarten = " & krit(i, 4) & "))" & vbNewLine
                        sqlSelects = sqlSelects & ", " & SetJoinId & ".Ist AS " & SetJoinId & vbNewLine
                        sqlWheres = sqlWheres & SetJoinId & ".Ist " & comp & " " & value
                    ElseIf (krit(i, 5) = "4") Then 'Kategorien
                        Klammercounter = Klammercounter + 1
                        sqlJoins = sqlJoins & " LEFT JOIN DB_Kategoriewerte AS " & SetJoinId & " ON (" & SetJoinId & ".FK_Projekte = p.ID AND " & SetJoinId & ".FK_Kategorie = " & krit(i, 4) & "))" & vbNewLine
                        'sqlWheres = sqlWheres & SetJoinId & ".FK_Kategorie = " & krit(i, 4) & " AND "
                        
                        If (krit(i, 9) = "2") Then
                            sqlWheres = sqlWheres & SetJoinId & ".Wert_Zahl " & comp & " " & value
                            sqlSelects = sqlSelects & ", " & SetJoinId & ".Wert_Zahl AS " & SetJoinId & vbNewLine
                        ElseIf (krit(i, 9) = "3") Then
                            sqlWheres = sqlWheres & SetJoinId & ".Wert_Datum " & comp & " " & Class_Functions.DB.Parse2Date(VBA.CDate(value))
                            sqlSelects = sqlSelects & ", " & SetJoinId & ".Wert_Datum AS " & SetJoinId & vbNewLine
                        ElseIf (krit(i, 9) = "4") Then
                            Select Case (krit(i, 6))
                                Case (3): comp = " LIKE "
                                Case (4): comp = " NOT LIKE "
                            End Select
                            sqlWheres = sqlWheres & SetJoinId & ".Wert " & comp & " '" & value & "'"
                            sqlSelects = sqlSelects & ", " & SetJoinId & ".Wert AS " & SetJoinId & vbNewLine
                        ElseIf (krit(i, 9) = "5") Then
                            sqlWheres = sqlWheres & SetJoinId & ".FK_Kategorie_Detail " & comp & " " & krit(i, 11)
                            sqlSelects = sqlSelects & ", " & SetJoinId & ".FK_Kategorie_Detail AS " & SetJoinId & vbNewLine
                        End If
                    End If
                    
                    If comp = " LIKE " Then comp = " = "
                    If comp = " NOT LIKE " Then comp = " <> "
                    If (krit(i, 9) = "4") Then
                        ret = ret & "     " & krit(i, 8) & comp & """" & value & """"
                    Else
                        ret = ret & "     " & krit(i, 8) & comp & value
                    End If
                End If
            End If
        Next i
        ret = ret & " "
        sqlWheres = sqlWheres & "))"
    End If
    
    If (showallprojects) Then
        PFType = " pf.FK_Kategorie_Detail IN (SELECT u.FK_KatDetail FROM DB_User_PFType AS u WHERE u.FK_Username = '" & calc_master.Range("WindowsLogin") & "' ) "
    Else
        PFType = " pf.FK_Kategorie_Detail = " & calc_master.Range("PFType_ID") & " "
    End If
    
    For i = 1 To Klammercounter Step 1
        Klammerstring = Klammerstring & "("
    Next i
    
    If sqlWheres <> "(( ))" And sqlWheres <> "" Then
        sql = "SELECT TOP " & maxP & " pf.FK_Kategorie_Detail, p.ID FROM " & Klammerstring & "DB_Projekte p " & sqlJoins & " WHERE " & PFType & " AND p.active = " & Class_Functions.DB.Parse2True & " AND pf.FK_Kategorie = 29 AND (" & sqlWheres & ")" ' Ohne alle Selects
    Else
        sql = "SELECT TOP " & maxP & " pf.FK_Kategorie_Detail, p.ID FROM " & Klammerstring & "DB_Projekte p " & sqlJoins & " WHERE " & PFType & " AND p.active = " & Class_Functions.DB.Parse2True & " AND pf.FK_Kategorie = 29" ' Ohne alle Selects
    End If
'     sql = "SELECT p.ID " & sqlSelects & " FROM DB_Projekte p " & sqlJoins & " WHERE " & sqlWheres 'mit allen Selects
    
    If (getText) Then
        gernateSqlQueryByFilterId = ret
    Else
        gernateSqlQueryByFilterId = sql
    End If
    
End Function

Public Function get_Filter(filterId As String)
    Dim statement As String
    Dim i As Double
    Dim ret As String
    Dim rs_ID As Integer
    
    ret = ""
    i = 0
    statement = (gernateSqlQueryByFilterId(filterId))
    
    '|fffd|ffnet einen neuen Recordset
    rs_ID = Class_Functions.DB.Create_NewRecordset()
        
    If Class_Functions.DB.Select_Statement(statement, rs_ID) = True Then
     If Not Class_Functions.DB.Recordset(rs_ID).EOF Then
         While Not Class_Functions.DB.Recordset(rs_ID).EOF
             If (i <> 0) Then
             ret = ret & ","
             End If
             ret = ret & Class_Functions.DB.Recordset(rs_ID)!ID
             Class_Functions.DB.Recordset(rs_ID).movenext
             i = i + 1
         Wend
     End If
    End If
    
    'schlie|fffd|t den Recordset wieder
    Class_Functions.DB.Rec_Close (rs_ID)
    
    If ret = "" Then
        ret = "0"
    End If
    
    
    get_Filter = ret
End Function

Attribute VB_Name = "nlc_functions"
Option Explicit

Public Function Nz0(gStr As Variant) As Double
    If IsNull(gStr) Then
        Nz0 = 0
    Else
        Nz0 = gStr
    End If
End Function

Public Sub lock_unlock()
Attribute lock_unlock.VB_ProcData.VB_Invoke_Func = "S\n14"
    Call Application.Run("'" & ActiveWorkbook.name & "'!nlc_functions.showUnlock")
End Sub

Public Function nls_getTestDB(calc As Range) As String
    Dim decrypt As New nls_Decrypt
    Dim dbname As String
    
    decrypt.Salt = db_Salt
    
    dbname = decrypt.decrypt(calc_master.Range("dbname").value)
    
    If VBA.LCase(VBA.Right(dbname, 4)) = "test" Then
        nls_getTestDB = "Verbunden mit der Testdatenbank " + dbname
    Else
        nls_getTestDB = ""
    End If
End Function

Public Function N2hk(gStr As Variant) As String
    If IsNull(gStr) Then
        N2hk = ""
    Else
        N2hk = gStr
    End If
End Function

Public Function Nz(gStr As Variant) As String
    If VBA.IsNull(gStr) Then
        Nz = ""
    Else
        Nz = gStr
    End If
End Function

Public Function NzTF(gStr As Variant) As Boolean
    If UCase(gStr) = "FALSCH" Then
        NzTF = False
    Else
        NzTF = True
    End If
End Function

Public Function TF01(gStr As String) As Integer
    If UCase(gStr) = "FALSCH" Then
        TF01 = 0
    Else
        TF01 = 1
    End If
End Function


Public Sub showUnlock()
Attribute showUnlock.VB_ProcData.VB_Invoke_Func = " \n14"
    Dim nlc_pw As String

    On Error Resume Next
        
    If calc_PW.Range("C4").value = "YES" Then
        frm_enter_pw.Show
    Else
        calc_master.Range("Login").value = ""
        
        On Error GoTo Ende
        calc_PW.Range("C4").value = "YES"
        nlc_intern.Application_off
        
        nlc_pw = nlc_intern.get_pw
        
        nlc_ppf_xl.Unprotect
        
        Call nlc_intern.blatt_sperren(nlc_ppf_nav.name, nlc_pw, True, nlc_pw, False, False, False)
        Call nlc_intern.blatt_sperren(nlc_ppf_pipe.name, nlc_pw, True, nlc_pw, False, False, False)
        Call nlc_intern.blatt_sperren(nlc_ppf_pie.name, nlc_pw, True, nlc_pw, False, False, False)
        Call nlc_intern.blatt_sperren(nlc_ppf_PJTabelle.name, nlc_pw, True, nlc_pw, False, False, False)
        Call nlc_intern.blatt_sperren(nlc_ppf_Gantt.name, nlc_pw, True, nlc_pw, False, False, False)
        Call nlc_intern.blatt_sperren(nlc_ppf_costhisto.name, nlc_pw, True, nlc_pw, False, False, False)
        Call nlc_intern.blatt_sperren(nlc_ppf_resshisto.name, nlc_pw, True, nlc_pw, False, False, False)
        Call nlc_intern.blatt_sperren(nlc_ppf_bar.name, nlc_pw, True, nlc_pw, False, False, False)
        Call nlc_intern.blatt_sperren(nlc_ppf_matrix.name, nlc_pw, True, nlc_pw, False, False, False)
        Call nlc_intern.blatt_sperren(nlc_ppf_viewer.name, nlc_pw, True, nlc_pw, False, False, False)
        
        nlc_ppf_nav.Shapes.Range(Array("btn_edit_masterdata")).visible = False
        nlc_ppf_PJTabelle.Shapes.Range(Array("btn_bigger")).visible = False
        nlc_ppf_PJTabelle.Shapes.Range(Array("btn_smaler")).visible = False
        
        nlc_sqlstatements.visible = xlSheetVeryHidden
        nlc_sqlstatements_calc.visible = xlSheetVeryHidden
        calc_frm_masterdata.visible = xlSheetVeryHidden
        calc_frm_projects.visible = xlSheetVeryHidden
        calc_master.visible = xlSheetVeryHidden
        calc_pipe_set.visible = xlSheetVeryHidden
        calc_PW.visible = xlSheetVeryHidden
        calc_pv_ress.visible = xlSheetVeryHidden
        calc_pv_cost.visible = xlSheetVeryHidden
        DB_Language.visible = xlSheetVeryHidden
        
        nlc_ppf_nav.Shapes.Range(Array("btn_import_data")).visible = False
        
        If arbeitsmappenschutz = True Then nlc_ppf_xl.Protect Password:=nlc_pw, Structure:=True, Windows:=False
        
        nlc_ppf_nav.Activate
        calc_PW.Range("C4") = "YES"

Ende:
        nlc_intern.Application_on
    End If
End Sub

Public Function isArrayEmpty(parArray As Variant) As Boolean
'Returns true if:
'  - parArray is not an array
'  - parArray is a dynamic array that has not been initialised (ReDim)
'  - parArray is a dynamic array has been erased (Erase)

    If IsArray(parArray) = False Then
        isArrayEmpty = True
        Exit Function
    End If
    
    On Error Resume Next
    If UBound(parArray) < LBound(parArray) Then
        isArrayEmpty = True
        Exit Function
    Else
        isArrayEmpty = False
    End If
End Function

'#####################################################################################################
'#####################################################################################################
'#####################################################################################################
'#####################################################################################################
'#####################################################################################################
'#####################################################################################################
'#####################################################################################################

Public Function insert_pjtable_col(spalte As Integer, resscost As Boolean)
    Dim spalte_buchstabe As String
    
    spalte_buchstabe = Split(Cells(1, spalte).Address, "$")(1)

    'Spalte einf|fffd|gen
    nlc_ppf_PJTabelle.columns(spalte_buchstabe & ":" & spalte_buchstabe).insert Shift:=xlToRight, CopyOrigin:=xlFormatFromLeftOrAbove
    
    'Linien
    With nlc_ppf_PJTabelle.Range(spalte_buchstabe & "7:" & spalte_buchstabe & "17")
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
    End With
    
    'Zellen Verbinden (Header)
    With nlc_ppf_PJTabelle.Range(spalte_buchstabe & "12:" & spalte_buchstabe & "14")
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .WrapText = True
        If resscost = False Then
            .MergeCells = True
        End If
    End With
    
    '1. Value Zelle formatieren
    nlc_ppf_PJTabelle.Range(spalte_buchstabe & "15").Interior.Pattern = xlNone
    nlc_ppf_PJTabelle.Range(spalte_buchstabe & "15").Font.FontStyle = "Standard"
End Function

Public Function format_rescost_header(start_col As Integer, end_col As Integer, sprungfolge As Integer)
    With nlc_ppf_PJTabelle.Range(nlc_ppf_PJTabelle.Cells(12, start_col), nlc_ppf_PJTabelle.Cells(12, end_col))
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .MergeCells = True
        
        'Rahmen
        .Borders(xlEdgeTop).LineStyle = xlContinuous
        .Borders(xlEdgeBottom).LineStyle = xlContinuous
        .Borders(xlEdgeRight).LineStyle = xlContinuous
        .Borders(xlEdgeLeft).LineStyle = xlContinuous
        .Borders(xlInsideVertical).LineStyle = xlContinuous
        .Borders(xlInsideHorizontal).LineStyle = xlContinuous
    
        'Hintergrund
        .Interior.ThemeColor = xlThemeColorLight1
        .Interior.TintAndShade = 0.799981688894314
        
        'Schrift
        .Font.FontStyle = "Fett"
        .Font.ThemeColor = xlThemeColorLight1
        .Font.TintAndShade = 0
        .WrapText = True
    End With
    
    Dim counter As Integer
    
    For counter = start_col To end_col Step sprungfolge
        With nlc_ppf_PJTabelle.Range(nlc_ppf_PJTabelle.Cells(13, counter), nlc_ppf_PJTabelle.Cells(13, counter + sprungfolge - 1))
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .MergeCells = True
            
            'Hintergrund
            .Interior.ThemeColor = xlThemeColorLight1
            .Interior.TintAndShade = 0.799981688894314
            
            'Schrift
            .Font.FontStyle = "Fett"
            .Font.ThemeColor = xlThemeColorLight1
            .Font.TintAndShade = 0
            .WrapText = True
        End With
        
        'ohne zellen verbinden f|fffd|r unterste Reihe
        With nlc_ppf_PJTabelle.Range(nlc_ppf_PJTabelle.Cells(14, counter), nlc_ppf_PJTabelle.Cells(14, counter + sprungfolge - 1))
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            
            'Hintergrund
            .Interior.ThemeColor = xlThemeColorLight1
            .Interior.TintAndShade = 0.799981688894314
            
            'Schrift
            .Font.FontStyle = "Fett"
            .Font.ThemeColor = xlThemeColorLight1
            .Font.TintAndShade = 0
            .WrapText = True
        End With
    Next counter
End Function

Public Function frm_sprache_SQL(ByVal frm As UserForm, frm_name As String, Optional addColon As Boolean = True) As String
    'Diese Sprachfunktion geht in dem |fffd|bergebenen Userform alle Controls durch und gibt die Caption an
    'Wenn ein Steuerelement im Userform erg|fffd|nzt wird, brauch dieses nur per Codename in die Sprachtabelle eingetragen werden!
    frm_sprache_SQL = ""
    
    Dim ctrl As Control
    Dim tp As MSForms.Page
    Dim Fehler As String
    Dim value As String
    
    On Error GoTo error
    
    If Class_Functions.DB.Select_Statement("SELECT " & _
                                                "[DB_Language].Term, " & _
                                                "[DB_Language]." & VBA.LCase(nlc_ppf_nav.Cells(20, 6).value) & " AS Wert " & _
                                           "FROM " & _
                                                "[DB_Language] " & _
                                           "WHERE " & _
                                                "modul = 'btn' OR modul LIKE '" & frm_name & "'") = False Then GoTo error
    
    On Error GoTo weiter
    Do While Not Class_Functions.DB.Recordset.EOF
        For Each ctrl In frm.Controls
            If ctrl.name = Class_Functions.DB.Recordset!Term Or TypeOf ctrl Is MSForms.MultiPage Or TypeOf ctrl Is MSForms.ComboBox Then
                If TypeOf ctrl Is MSForms.Label Then
                    If addColon Then
                        ctrl.Caption = Class_Functions.DB.Recordset!wert & ":"
                    Else
                        ctrl.Caption = Class_Functions.DB.Recordset!wert
                    End If
                ElseIf TypeOf ctrl Is MSForms.CommandButton Or TypeOf ctrl Is MSForms.CheckBox Or TypeOf ctrl Is MSForms.Frame Then
                    ctrl.Caption = Class_Functions.DB.Recordset!wert
                ElseIf TypeOf ctrl Is MSForms.MultiPage Then
                    For Each tp In ctrl.Pages
                        value = Class_Functions.DB.Recordset!wert 'nlc_functions.get_frm_language(tp.Name)
                        If Class_Functions.DB.Recordset!Term = tp.name Then
                            tp.Caption = value
                        End If
                    Next tp
                ElseIf TypeOf ctrl Is MSForms.ComboBox Then
                    If VBA.Left(Class_Functions.DB.Recordset!Term, VBA.Len(Class_Functions.DB.Recordset!Term) - 3) = ctrl.name Then
                        If VBA.Right(Class_Functions.DB.Recordset!Term, 2) >= ctrl.listCount Then
                            ctrl.addItem Class_Functions.DB.Recordset!wert
                        Else
                            ctrl.addItem Class_Functions.DB.Recordset!wert, VBA.Right(Class_Functions.DB.Recordset!Term, 2)
                        End If
                    End If
                End If
            ElseIf frm_name = Class_Functions.DB.Recordset!Term Then
                frm_sprache_SQL = Class_Functions.DB.Recordset!wert
            End If
        Next ctrl
weiter:
        If Not Class_Functions.DB.Recordset.EOF Then
            Class_Functions.DB.Recordset.movenext
        Else
            Exit Do
        End If
    Loop
    
    Exit Function
    
error:
    frm_sprache_SQL = "Error"
End Function

Public Sub prcSort(vntSortArray As Variant, vntArray() As Variant)
    'On Error Resume Next
    Dim intIndex As Integer
    Dim lngIndex1 As Long, lngIndex2 As Long, lngRowsArray() As Long
    Dim lngRowsCount As Long, lngRangeCount As Long
    Dim vntTemp As Variant
    ReDim lngRowsArray(0 To 1, 0 To UBound(vntArray) * 2)

    'Array f|fffd|r den 1. Sortierlauf
    lngRowsArray(0, 0) = LBound(vntArray)
    lngRowsArray(0, 1) = UBound(vntArray)
    lngRowsCount = 1
    
    For intIndex = LBound(vntSortArray) To UBound(vntSortArray)
        'Wenn eine Spalte angegeben
        If vntSortArray(intIndex) <> 0 Then
            lngRangeCount = -1
        
            'Schleife zum sortieren der einzelnen Bereiche
            For lngIndex1 = 0 To lngRowsCount Step 2
                'Sortieren des Bereichs, wenn Zeilenzahl gr|fffd||fffd|er 1
                If UBound(lngRowsArray) >= lngRowsCount Then
                    If lngRowsArray(0, lngIndex1) <> lngRowsArray(0, lngIndex1 + 1) Then
                        Call prcQuickSort(CLng(lngRowsArray(0, lngIndex1)), CLng(lngRowsArray(0, lngIndex1 + 1)), CInt(Abs(vntSortArray(intIndex))), CBool(vntSortArray(intIndex) > 0), vntArray())
                
                        'sortierten Bereich merken
                        lngRangeCount = lngRangeCount + 2
                        lngRowsArray(1, lngRangeCount - 1) = lngRowsArray(0, lngIndex1)
                        lngRowsArray(1, lngRangeCount) = lngRowsArray(0, lngIndex1 + 1)
                    End If
                End If
            Next
            
            lngRowsCount = -1
        
            'Durchsuchen der soeben sortierten Spalte nach Wertewechsel
            For lngIndex1 = 0 To lngRangeCount Step 2
                '1. Zeile des zu sortierenden Bereichs
                vntTemp = vntArray(lngRowsArray(1, lngIndex1), Abs(vntSortArray(intIndex)))
                lngRowsCount = lngRowsCount + 1
                lngRowsArray(0, lngRowsCount) = lngRowsArray(1, lngIndex1)
        
                'Suche nach Wechsel innerhalb des Bereichs
                For lngIndex2 = lngRowsArray(1, lngIndex1) To lngRowsArray(1, lngIndex1 + 1)
                    If vntTemp <> vntArray(lngIndex2, Abs(vntSortArray(intIndex))) Then
                        lngRowsCount = lngRowsCount + 2
                        lngRowsArray(0, lngRowsCount - 1) = lngIndex2 - 1
                        lngRowsArray(0, lngRowsCount) = lngIndex2
                        vntTemp = vntArray(lngIndex2, Abs(vntSortArray(intIndex)))
                    End If
                Next
                
                'letzte Zeile des zu sortierenden Bereichs
                lngRowsCount = lngRowsCount + 1
                If UBound(lngRowsArray) >= lngRowsCount Then
                    lngRowsArray(0, lngRowsCount) = lngRowsArray(1, lngIndex1 + 1)
                End If
            Next
        End If
     Next
End Sub

Private Sub prcQuickSort(lngLbound As Long, lngUbound As Long, intSortColumn As Integer, bntSortKey As Boolean, vntArray() As Variant)
    Dim intIndex As Integer
    Dim lngIndex1 As Long, lngIndex2 As Long
    Dim vntTemp As Variant, vntBuffer As Variant
 
    lngIndex1 = lngLbound
    lngIndex2 = lngUbound
    vntBuffer = vntArray((lngLbound + lngUbound) \ 2, intSortColumn)
 
    Do
        If bntSortKey Then
            Do While vntArray(lngIndex1, intSortColumn) < vntBuffer
                lngIndex1 = lngIndex1 + 1
            Loop
            
            Do While vntBuffer < vntArray(lngIndex2, intSortColumn)
                lngIndex2 = lngIndex2 - 1
            Loop
        Else
            Do While vntArray(lngIndex1, intSortColumn) > vntBuffer
                lngIndex1 = lngIndex1 + 1
            Loop
            
            Do While vntBuffer > vntArray(lngIndex2, intSortColumn)
                lngIndex2 = lngIndex2 - 1
            Loop
        End If
        
        If lngIndex1 < lngIndex2 Then
            If vntArray(lngIndex1, intSortColumn) <> vntArray(lngIndex2, intSortColumn) Then
                For intIndex = LBound(vntArray, 2) To UBound(vntArray, 2)
                    vntTemp = vntArray(lngIndex1, intIndex)
                    vntArray(lngIndex1, intIndex) = _
                    vntArray(lngIndex2, intIndex)
                    vntArray(lngIndex2, intIndex) = vntTemp
                Next
            End If
            
            lngIndex1 = lngIndex1 + 1
            lngIndex2 = lngIndex2 - 1
        ElseIf lngIndex1 = lngIndex2 Then
            lngIndex1 = lngIndex1 + 1
            lngIndex2 = lngIndex2 - 1
        End If
        
    Loop Until lngIndex1 > lngIndex2
    
    If lngLbound < lngIndex2 Then Call prcQuickSort(lngLbound, lngIndex2, intSortColumn, bntSortKey, vntArray())
    If lngIndex1 < lngUbound Then Call prcQuickSort(lngIndex1, lngUbound, intSortColumn, bntSortKey, vntArray())
End Sub
Attribute VB_Name = "nlc_intern"
'Private Declare Function GetUserName Lib "advapi32.dll" Alias "GetUserNameA" (ByVal lpBuffer As String, nSize As Long) As Long
Option Explicit
Option Private Module

Public Function get_pw() As String
    get_pw = calc_PW.Range("c3").value
End Function

Public Function nlc_Language_Msgs(Term As String) As String

'    Dim c
'    Dim zeile As Integer
'    Dim endzeile As Integer
'
'    endzeile = calc_TL_tab4.UsedRange.Rows.Count
'    With calc_TL_tab4.Range("b4:b" & endzeile)
'        Set c = .Find(Term, LookIn:=xlValues, LookAt:=xlWhole)
'        If Not c Is Nothing Then
'            nlc_Language_Msgs = calc_TL_tab4.Cells(c.row, 5).Value
'        Else
'            nlc_Language_Msgs = ""
'        End If
'    End With

End Function

Public Function ConvertValueToColHeader(wert As String) As String
    If wert = "Basis" Then
        ConvertValueToColHeader = "Basis"
    ElseIf wert = "Aktuell" Then
        ConvertValueToColHeader = "Aktuell"
    ElseIf wert = "Ist" Then
        ConvertValueToColHeader = "Ist"
    Else
        ConvertValueToColHeader = wert
    End If
End Function

Public Function ConvertColHeaderToValue(wert As String, Optional ress As Boolean = False) As String
    If ress Then
        If wert = "Basis" Then
            ConvertColHeaderToValue = "Basis"
        ElseIf wert = "Aktuell" Then
            ConvertColHeaderToValue = "Aktuell"
        ElseIf wert = "Ist" Then
            ConvertColHeaderToValue = "Ist"
        Else
            ConvertColHeaderToValue = wert
        End If
    Else
        If wert = "Basis" Then
            ConvertColHeaderToValue = "Basis"
        ElseIf wert = "Aktuell" Then
            ConvertColHeaderToValue = "Aktuell"
        ElseIf wert = "Ist" Then
            ConvertColHeaderToValue = "Ist"
        Else
            ConvertColHeaderToValue = wert
        End If
    End If
End Function

Public Function nlc_Language_userforms(UserForm As String, Term As String) As String

'    Dim c
'    Dim zeile As Integer
'    Dim endzeile As Integer
'    Dim firstAddress As Variant
'
'    nlc_Language_userforms = ""
'
'    endzeile = calc_TL_tab5.UsedRange.Rows.Count
'    With calc_TL_tab5.Range("d4:d" & endzeile)
'    Set c = .Find(Term, LookIn:=xlValues, LookAt:=xlWhole)
'    If Not c Is Nothing Then
'        firstAddress = c.Address
'        If calc_TL_tab5.Cells(c.row, 3).Value = UserForm Then
'            nlc_Language_userforms = calc_TL_tab5.Cells(c.row, 5).Value
'            Exit Function
'        Else
'            Do
'                Set c = .FindNext(c)
'                If Not c Is Nothing Then
'                    If calc_TL_tab5.Cells(c.row, 3).Value = UserForm Then
'                        nlc_Language_userforms = calc_TL_tab5.Cells(c.row, 5).Value
'                        Exit Function
'                    End If
'                End If
'            Loop While Not c Is Nothing And c.Address <> firstAddress
'        End If
'    End If
'End With
End Function

Public Sub refresh_holidays(first_enddate As String)
'    If first_enddate = "" Then
'        GoTo weiter
'    ElseIf VBA.CDate(first_enddate) < nlc_phb_06.Cells(Data_Startzeile, SpNr_DateA_E).Value Then
'        GoTo weiter
'    End If
'    Exit Sub
'
'weiter:
'    Dim cycle_counter As Integer
'        Dim row_counter As Integer
'
'        row_counter = 5
'
'        For cycle_counter = 1 To nlc_phb_51.Cells(4, 68).Value Step 1
'            For row_counter = 5 To nlc_phb_51.Cells(6, 68).Value
'                If nlc_phb_51.Cells(row_counter, 67).Value = cycle_counter Then
'                    Call generate_holiday_series(nlc_phb_51.Cells(row_counter, 65).Value, nlc_phb_51.Cells(row_counter, 64).Value, cycle_counter, "change")
'                    Exit For
'                End If
'            Next row_counter
'        Next cycle_counter
End Sub

Public Sub generate_holiday_series(date_ As String, name_ As String, new_id As Integer, change As String)
'    Dim start_date As String
'    Dim end_Date As String
'
'    If change <> "new" Then
'        If nlc_phb_51.Cells(8, 68).Value = "" Then
'            start_date = date_
'        Else
'            start_date = VBA.DateSerial(nlc_phb_51.Cells(8, 68).Value, VBA.Month(date_), VBA.Day(date_))
'        End If
'        end_Date = nlc_phb_06.Cells(Data_Startzeile, SpNr_DateA_E).Value
'    Else
'        start_date = date_
'        end_Date = nlc_phb_06.Cells(Data_Startzeile, SpNr_DateA_E).Value
'    End If
'
'    If start_date <> "" And end_Date <> "" Then
'        While VBA.Year(start_date) < VBA.Year(end_Date)
'            start_date = DateSerial(VBA.Year(VBA.CDate(start_date)) + 1, VBA.Month(VBA.CDate(start_date)), VBA.Day(VBA.CDate(start_date)))
'            nlc_phb_51.Cells(6, 68).Value = nlc_phb_51.Cells(6, 68).Value + 1
'            nlc_phb_51.Cells(nlc_phb_51.Cells(6, 68).Value, 64).Value = name_
'            nlc_phb_51.Cells(nlc_phb_51.Cells(6, 68).Value, 65).Value = VBA.CDate(start_date)
'            nlc_phb_51.Cells(nlc_phb_51.Cells(6, 68).Value, 66).FormulaR1C1 = "=VLOOKUP(""every_year"",sprachtabelle,4,FALSE)"
'            nlc_phb_51.Cells(nlc_phb_51.Cells(6, 68).Value, 67).Value = new_id
'        Wend
'    End If
'
'    If end_Date <> "" Then
'        nlc_phb_51.Cells(8, 68).Value = VBA.Year(end_Date)
'    End If
'
'    ActiveWorkbook.Names.Add name:="frm_holidays", RefersToR1C1:=nlc_phb_51.Range(nlc_phb_51.Cells(5, 64), nlc_phb_51.Cells(nlc_phb_51.Cells(6, 68).Value, 67))
End Sub

Public Sub blatt_sperren(blattname As String, pw_entsperren As String, Sperren As Boolean, pw_sperren As String, links As Boolean, gitternetzlinien As Boolean, ueberschriften As Boolean)
    
    With Sheets(blattname)
        .Unprotect (pw_entsperren)
        If .visible = xlSheetVisible Then
            .Select
            ActiveWindow.ScrollColumn = 1
            ActiveWindow.ScrollRow = 1
            ActiveWindow.DisplayGridlines = gitternetzlinien
            ActiveWindow.DisplayHeadings = ueberschriften
            .Cells(1, 1).Select
        End If
        If Sperren = True Then .Protect Password:=pw_sperren, DrawingObjects:=True, Contents:=True, Scenarios:=True, AllowInsertingHyperlinks:=links
    End With
End Sub

Public Sub nlc_responsibilities()

'    Dim zeile As Integer, I As Integer
'    Dim Spalte As Integer
'    Dim startzeile As Integer
'
'    Spalte = 16
'    startzeile = 11
'    zeile = startzeile
'
'    nlc_phb_51.Range(nlc_phb_51.Cells(zeile, Spalte), nlc_phb_51.Cells(zeile + 50, Spalte)).ClearContents
'    For I = 8 To 40
'        If nlc_phb_21.Cells(I, 4).Value <> "" Then
'            nlc_phb_51.Cells(zeile, Spalte).Value = nlc_phb_21.Cells(I, 4).Value
'            zeile = zeile + 1
'        End If
'    Next I
'    If zeile > startzeile Then
'        nlc_phb_51.Range(nlc_phb_51.Cells(startzeile, Spalte), nlc_phb_51.Cells(zeile - 1, Spalte)).sort Key1:=nlc_phb_51.Cells(startzeile, Spalte), Order1:=xlAscending, Header:=xlNo
'        ActiveWorkbook.Names.Add name:="verantwortung", RefersToR1C1:=nlc_phb_51.Range(nlc_phb_51.Cells(startzeile, Spalte), nlc_phb_51.Cells(zeile - 1, Spalte))
'    Else
'        ActiveWorkbook.Names.Add name:="verantwortung", RefersToR1C1:=nlc_phb_51.Range(nlc_phb_51.Cells(startzeile, Spalte), nlc_phb_51.Cells(startzeile, Spalte))
'    End If
End Sub

Public Sub nlc_aps()
'    Dim zeile As Integer
'    Dim I As Integer
'    Dim next_zeile As Integer
'    Dim startzeile As Integer
'
'    startzeile = 11
'    zeile = startzeile
'
'    I = Data_Startzeile + 1
'    nlc_phb_51.Range(nlc_phb_51.Cells(startzeile, 14), nlc_phb_51.Cells(startzeile + 5000, 15)).ClearContents
'    nlc_phb_51.Range(nlc_phb_51.Cells(startzeile, 17), nlc_phb_51.Cells(startzeile + 5000, 19)).ClearContents
'    While nlc_phb_06.Cells(I, SpNr_Nr).Value <> "END"
'        If nlc_phb_06.Cells(I, SpNr_PSP).Value <> "" And nlc_phb_06.Cells(I, SpNr_Art).Value <> "SV" Then
'            nlc_phb_51.Cells(zeile, 14).Value = nlc_phb_06.Cells(I, SpNr_PSP).Value
'            nlc_phb_51.Cells(zeile, 15).Value = nlc_phb_06.Cells(I, SpNr_PSP).Value & " - " & nlc_phb_06.Cells(I, SpNr_Name).Value
'
'            nlc_phb_51.Cells(zeile, 17).Value = nlc_phb_06.Cells(I, SpNr_PSP).Value & " - " & nlc_phb_06.Cells(I, SpNr_Name).Value
'            nlc_phb_51.Cells(zeile, 18).Value = nlc_phb_06.Cells(I, SpNr_UID).Value
'            nlc_phb_51.Cells(zeile, 19).Value = nlc_phb_06.Cells(I, SpNr_Nr).Value
'            zeile = zeile + 1
'        End If
'        I = I + 1
'    Wend
'    ActiveWorkbook.Names.Add name:="psp", RefersToR1C1:=nlc_phb_51.Range(nlc_phb_51.Cells(startzeile, 14), nlc_phb_51.Cells(zeile - 1, 14))
'    ActiveWorkbook.Names.Add name:="_psp2", RefersToR1C1:=nlc_phb_51.Range(nlc_phb_51.Cells(startzeile, 15), nlc_phb_51.Cells(zeile - 1, 15))
'    ActiveWorkbook.Names.Add name:="_psp3", RefersToR1C1:=nlc_phb_51.Range(nlc_phb_51.Cells(startzeile, 17), nlc_phb_51.Cells(zeile - 1, 17))
'
End Sub

Public Sub nlc_ListGen()
'    Dim Listgen_Rows As Integer
'    Dim Listgen_Columns As Integer
'    Dim listgen_Range As Range
'    Dim counter As Integer
'    Dim SpNr_Listgen As Integer
'    Dim ZeiNr_Listgen As Integer
'    Dim Listgen_Anzahl As Integer
'    Dim Listgen_Zeilenanzahl As Integer
'
'    SpNr_Listgen = 2
'    ZeiNr_Listgen = 11
'    Listgen_Anzahl = 10
'    Listgen_Zeilenanzahl = 20
'
'    nlc_phb_51.Range(nlc_phb_51.Cells(ZeiNr_Listgen, SpNr_Listgen), nlc_phb_51.Cells(ZeiNr_Listgen + Listgen_Zeilenanzahl - 1, SpNr_Listgen + Listgen_Anzahl)).ClearContents
'
'    For Listgen_Columns = SpNr_Listgen To SpNr_Listgen + Listgen_Anzahl Step 1
'        If nlc_phb_51.Cells(ZeiNr_Listgen - 2, Listgen_Columns).Value <> "" And nlc_phb_51.Cells(ZeiNr_Listgen - 3, Listgen_Columns).Value <> "" And nlc_phb_51.Cells(ZeiNr_Listgen - 1, Listgen_Columns).Value <> "" Then
'
'            counter = 1
'            Set listgen_Range = Worksheets(nlc_phb_51.Cells(ZeiNr_Listgen - 3, Listgen_Columns).Value).Range(nlc_phb_51.Cells(ZeiNr_Listgen - 2, Listgen_Columns).Value)
'
'            For Listgen_Rows = 1 To (nlc_phb_51.Cells(ZeiNr_Listgen - 4, Listgen_Columns).Value - nlc_phb_51.Cells(ZeiNr_Listgen - 6, Listgen_Columns).Value) + 1
'                If listgen_Range.Cells(Listgen_Rows, 1).Value <> "" Then
'                    nlc_phb_51.Cells(counter + ZeiNr_Listgen - 1, Listgen_Columns).Value = listgen_Range.Cells(Listgen_Rows, 1).Value
'                    counter = counter + 1
'                End If
'            Next Listgen_Rows
'
'            'Liste Generieren
'            If counter + ZeiNr_Listgen - 2 < ZeiNr_Listgen Then
'                ActiveWorkbook.Names.Add name:=nlc_phb_51.Cells(ZeiNr_Listgen - 1, Listgen_Columns).Value, RefersToR1C1:=nlc_phb_51.Range(nlc_phb_51.Cells(ZeiNr_Listgen, Listgen_Columns), nlc_phb_51.Cells(ZeiNr_Listgen, Listgen_Columns))
'            Else
'                ActiveWorkbook.Names.Add name:=nlc_phb_51.Cells(ZeiNr_Listgen - 1, Listgen_Columns).Value, RefersToR1C1:=nlc_phb_51.Range(nlc_phb_51.Cells(ZeiNr_Listgen, Listgen_Columns), nlc_phb_51.Cells(counter + ZeiNr_Listgen - 2, Listgen_Columns))
'            End If
'        End If
'    Next Listgen_Columns

End Sub


Public Sub nlc_copypaste(SB As String, SZ As Integer, SS As Integer, EZ As Integer, ES As Integer, ZB As String, ZZ As Integer, ZS As Integer)

    Sheets(SB).Range(Sheets(SB).Cells(SZ, SS), Sheets(SB).Cells(EZ, ES)).Copy
    Sheets(ZB).Cells(ZZ, ZS).PasteSpecial Paste:=xlValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
       
End Sub

Public Sub nlc_clear(SB As String, SZ As Integer, SS As Integer, EZ As Integer, ES As Integer)

    Sheets(SB).Range(Sheets(SB).Cells(SZ, SS), Sheets(SB).Cells(EZ, ES)).ClearContents
       
End Sub

Public Function nlc_search_name(aobj, blatt_vba As String) As String

    Dim i As Integer
    Dim objBl As Object
    
    nlc_search_name = ""
    For Each objBl In aobj.Sheets
        If objBl.CodeName = blatt_vba Then
            nlc_search_name = objBl.name
            Exit Function
        End If
    Next objBl

End Function


Public Function nlc_search_tabname(aobj, blatt_vba As String) As Boolean

    Dim i As Integer
    Dim objBl As Object
    
    nlc_search_tabname = False
    For Each objBl In aobj.Sheets
        If objBl.CodeName = blatt_vba Then
            nlc_search_tabname = True
            Exit Function
        End If
    Next objBl

End Function

Public Function GetDBColByKartart(Katart As String) As String
    Select Case Katart
        Case "Date":
            GetDBColByKartart = "Wert_Datum"
        Case "Number":
            GetDBColByKartart = "Wert_Zahl"
        Case Else
            GetDBColByKartart = "Wert"
    End Select
End Function

Public Function Check_Sheet_Existence(objWB As Object, strblatt As String) As Boolean

    Dim objBl As Object
    
    Check_Sheet_Existence = False
    For Each objBl In objWB.Sheets
        If objBl.name = strblatt Then
            Check_Sheet_Existence = True
            Exit Function
        End If
    Next objBl

End Function

Public Function Get_Data_Zeile(nummer As Integer) As Integer

'    Dim level As Integer, Data_Endzeile As Integer
'    Data_Endzeile = nlc_phb_06.Range("E7").Value
'
'    For level = Data_Startzeile To Data_Endzeile
'        If nlc_phb_06.Cells(level, SpNr_Nr).Value = Nummer Then
'            Get_Data_Zeile = level
'            Exit Function
'        End If
'    Next level
    
End Function

Public Function Check_Multiple_Selection(Markierung As Range) As Boolean

    Dim MarkStart As Integer, MarkEnde As Integer, MarkZellen As Integer
    
    MarkStart = Markierung.Areas.Item(1).row
    MarkZellen = Markierung.Areas.count
    MarkEnde = Markierung.Areas.Item(MarkZellen).row
    
    If MarkEnde - MarkStart + 1 <> MarkZellen Then
        Check_Multiple_Selection = True
    Else
        Check_Multiple_Selection = False
    End If
    
End Function


Sub Change_Buttonname() 'Bitte immer wenn buttons dazu oder wegkommen anpassen!!!
    
'    Dim level As Integer
'    Dim Spalte As Integer
'    Dim zeile As Integer
'    Dim I As Integer
'
'    On Error Resume Next
'
'    Spalte = 5
'    I = 4
'
'    While Not IsEmpty(calc_TL_tab3.Cells(I, 2).Value)
'        Err.Clear
'        Call change_button(calc_TL_tab3.Cells(I, 2).Value, calc_TL_tab3.Cells(I, 3).Value, calc_TL_tab3.Cells(I, Spalte).Value, "", "")
'        I = I + 1
'    Wend
        
End Sub

Public Sub change_button(vbablattname As String, buttonname As String, btncaption As String, btnfarbe As String, btnschriftfarbe As String)
    Dim blattname As String
    blattname = nlc_intern.nlc_search_name(ThisWorkbook, vbablattname)

    With Sheets(blattname).OLEObjects(buttonname).Object
        If btncaption <> "" Then .Caption = btncaption
        If btnschriftfarbe <> "" Then .ForeColor = btnschriftfarbe
        If btnfarbe <> "" Then .BackColor = btnfarbe
    End With
End Sub


Public Sub Change_Sheetname()
    
'    Dim level, Spalte As Integer
'    Dim zeile As Integer
'    Dim tabelle As String
'
'    Spalte = 5
'    zeile = 4
'
'    While Not IsEmpty(calc_TL_tab2.Cells(zeile, 2).Value)
'        tabelle = calc_TL_tab2.Cells(zeile, 3).Value
'        If calc_TL_tab2.Cells(zeile, Spalte).Value <> "" Then
'            Sheets(tabelle).name = calc_TL_tab2.Cells(zeile, Spalte).Value
'            calc_TL_tab2.Cells(zeile, 3).Value = calc_TL_tab2.Cells(zeile, Spalte).Value
'        End If
'        zeile = zeile + 1
'    Wend
End Sub


Public Function Get_WBS_ID(msp_id As Integer, startzeile As Integer) As Integer
'
'    Dim I As Integer
'
'    Get_WBS_ID = 0
'
'    I = startzeile + 1
'    While nlc_phb_06.Cells(I, SpNr_ImpInd).Value = "phb"
'        If nlc_phb_06.Cells(I, SpNr_MSPID).Value = msp_id Then
'            Get_WBS_ID = I
'            Exit Function
'        End If
'        I = I + 1
'    Wend
    
End Function

Public Function Get_MSP_ID(wbs_id As Integer, startzeile As Integer) As Integer

'    Dim I As Integer
'
'    Get_MSP_ID = 0
'
'    I = startzeile + 1
'    While nlc_phb_06.Cells(I, SpNr_ImpInd).Value = "msp"
'        If nlc_phb_06.Cells(I, SpNr_MSPID).Value = wbs_id Then
'            Get_MSP_ID = I
'            Exit Function
'        End If
'        I = I + 1
'    Wend
    
End Function

Public Function Check_MSP_Multiple_Tasks_Level1(bobj As Object) As Boolean

    Dim i As Integer
    Dim ebene1 As Boolean
    
    ebene1 = False
    Check_MSP_Multiple_Tasks_Level1 = False
    
    i = 2
    
    With bobj.Sheets("MS-Project_Exportfile")
        While Not IsEmpty(.Cells(i, 3).value)
            If .Cells(i, 3).value = 1 And ebene1 = False Then
                ebene1 = True
            ElseIf .Cells(i, 3).value = 1 And ebene1 = True Then
                Check_MSP_Multiple_Tasks_Level1 = True
                Exit Function
            End If
            i = i + 1
        Wend
    End With

End Function

Public Function Get_Import_Mastertask(BasisZeile As Integer) As Integer

'    Dim level As Integer
'    level = BasisZeile
'
'    If BasisZeile > Data_Startzeile + 1 Then
'        If nlc_phb_06.Cells(level, SpNr_ImpInd).Value = "phb" Or nlc_phb_06.Cells(level, SpNr_ImpInd).Value = "msp" Then
'            While nlc_phb_06.Cells(level, SpNr_ImpInd).Value <> "PHB" And nlc_phb_06.Cells(level, SpNr_ImpInd).Value <> "MSP"
'                level = level - 1
'                If level < Data_Startzeile Then Exit Function
'            Wend
'        End If
'    Else
'        level = 0
'    End If
'    Get_Import_Mastertask = level
    
End Function

Public Sub Clear_Data_Columns(spalte As Integer)
'
'    Dim Data_Endzeile As Integer
'    Data_Endzeile = nlc_phb_06.Range("E7").Value
'
'    nlc_phb_06.Range(nlc_phb_06.Cells(Data_Startzeile, Spalte), nlc_phb_06.Cells(Data_Endzeile, Spalte)).ClearContents
'
End Sub

Public Sub Copy_Data_Columns(SourceSpalte As Integer, DestinationSpalte As Integer)

'    Dim Data_Endzeile As Integer
'    Data_Endzeile = nlc_phb_06.Range("E7").Value
'
'    nlc_phb_06.Range(nlc_phb_06.Cells(Data_Startzeile, SourceSpalte), nlc_phb_06.Cells(Data_Endzeile, SourceSpalte)).Copy
'    nlc_phb_06.Range(nlc_phb_06.Cells(Data_Startzeile, DestinationSpalte), nlc_phb_06.Cells(Data_Endzeile, DestinationSpalte)).PasteSpecial xlPasteValues
    
End Sub

Sub Logo_Positionieren(Blatt As String, zeile As Integer, spalte As Integer)
    Dim level As Integer
    Dim nlc_pw As String
    Dim schutz As Boolean
    Dim versteckt As Boolean

    nlc_pw = nlc_intern.get_pw
    schutz = Sheets(Blatt).ProtectContents

    If spalte = 0 Then
        level = 1
        
        While Sheets(Blatt).Cells(zeile, level).Borders(xlEdgeRight).LineStyle <> xlContinuous
            level = level + 1
        Wend
'        For level = 1 To 255 Step 1
'            If Sheets(Blatt).Cells(zeile, level).Borders(xlEdgeRight).LineStyle = xlContinuous Then Exit For
'        Next level
    Else
        level = spalte
    End If

    If Sheets(Blatt).CodeName = "nlc_ppf_Gantt" Then level = level - 1

    If schutz = True Then Sheets(Blatt).Unprotect (nlc_pw)
    versteckt = Sheets(Blatt).visible

    If versteckt = 2 Then Sheets(Blatt).visible = xlSheetVisible
    'Sheets(blatt).Select
    'Sheets(blatt).Range("A1").Select

    Sheets(Blatt).Shapes.Range(Array("Logo")).Left = Sheets(Blatt).Cells(zeile, level).Left - Sheets(Blatt).Shapes.Range(Array("Logo")).Width
    Sheets(Blatt).Shapes.Range(Array("Logo")).Top = 6
    
'    If Sheets(Blatt).CodeName = "nlc_phb_07" Or Sheets(Blatt).CodeName = "nlc_phb_17" Or Sheets(Blatt).CodeName = "nlc_phb_19" Then
'        Sheets(Blatt).Shapes.Range(Array("Logo")).ShapeRange.Top = Sheets(Blatt).Cells(zeile, level).Top + 5
'    ElseIf Sheets(Blatt).CodeName = "nlc_ppf_Gantt" Then
'        Sheets(Blatt).Shapes.Range(Array("Logo")).ShapeRange.Top = Sheets(Blatt).Cells(zeile, level).Top + 3
'    ElseIf Sheets(Blatt).CodeName = "nlc_phb_06" Then
'        Sheets(Blatt).Shapes.Range(Array("Logo")).ShapeRange.Top = Sheets(Blatt).Cells(zeile, level).Top + 3
'    End If

    'Sheets(blatt).Pictures("Logo").top = Sheets(blatt).Cells(Zeile, level).top

    If schutz = True Then Sheets(Blatt).Protect Password:=nlc_pw, DrawingObjects:=True, Contents:=True, Scenarios:=True
    If versteckt = 2 Then Sheets(Blatt).visible = 2

End Sub

Function CleanBlank(text As String, Stellenanzahl As Integer)

    Dim MyBuf As String
    Dim MyLen As Integer
    Dim level As Integer
    Dim i As Integer
    i = 1
    MyBuf = ""
    
    MyLen = Len(text) + 1
    While i < MyLen
        If Right(Left(text, i), 1) <> "." And Right(Left(text, i), 1) <> " " And Right(Left(text, i), 1) <> "," Then
            MyBuf = MyBuf & Right(Left(text, i), 1)
        End If
        i = i + 1
    Wend
    
    If Len(MyBuf) < Stellenanzahl + 1 Then
        While Len(MyBuf) < Stellenanzahl
            MyBuf = "0" & MyBuf
        Wend
    Else
        MyBuf = ""
        While Len(MyBuf) < Stellenanzahl
            MyBuf = "9" & MyBuf
        Wend
    End If
    
    CleanBlank = MyBuf
End Function

Private Function change_username(Username As String) As String
    Dim x As Integer
    Dim username_temp As String
    
    username_temp = ""
    For x = Len(Username) To 1 Step -1
        username_temp = username_temp & Mid(Username, x, 1)
    Next x
    
    change_username = username_temp
End Function

'Public Function wb_save() As Boolean
'    If nlc_intern.check_user = True Then
'        wb_save = True
'    Else
'        wb_save = False
'    End If
'End Function

Public Sub Application_off()
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False
    Application.DisplayAlerts = False
End Sub

Public Sub Application_on()
    Application.EnableEvents = True
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.CutCopyMode = False
    Application.StatusBar = False
End Sub

Public Sub aufbau_kosten()
'    Dim row_counter As Integer
'    Dim lang_col As Integer
'
'    calc_frm_projects.Range("H4:M65536").ClearContents
'    lang_col = nlc_functions.get_language_col(md_ka.name, Range("aktuelle_sprache").Value)
'    calc_frm_projects.Calculate
'    For row_counter = 2 To calc_master.Cells(3, 3).Value Step 1
'        calc_frm_projects.Cells(row_counter + 2, 8).Value = md_ka.Cells(row_counter, 2).Value
'        calc_frm_projects.Cells(row_counter + 2, 9).Value = md_ka.Cells(row_counter, lang_col).Value
'        calc_frm_projects.Cells(row_counter + 2, 13).Value = md_ka.Cells(row_counter, 6).Value
'        Call nlc_functions.get_kost_value(md_ka.Cells(row_counter, 2).Value, Range("sel_pj_id").Value, row_counter + 2)
'    Next row_counter
'
'    ActiveWorkbook.Names.Add name:="lb_kosten", RefersToR1C1:=calc_frm_projects.Range(calc_frm_projects.Cells(4, 8), calc_frm_projects.Cells(row_counter + 1, 13))
'
End Sub

'Public Function check_value(Blatt As String, first_col_name As String, PjID As String, sec_col_name As String, RaID As String) As Boolean
'
'    Dim row_counter As Integer
'    Dim first_col As Integer
'    Dim sec_col As Integer
'
'    row_counter = 2
'    first_col = nlc_functions.get_col(Blatt, first_col_name)
'    sec_col = nlc_functions.get_col(Blatt, sec_col_name)
'
'
'    While ActiveWorkbook.Sheets(Blatt).Cells(row_counter, 2).Value <> ""
'        If ActiveWorkbook.Sheets(Blatt).Cells(row_counter, first_col).Value = PjID And ActiveWorkbook.Sheets(Blatt).Cells(row_counter, sec_col).Value = RaID Then
'            check_value = True
'            Exit Function
'        End If
'        row_counter = row_counter + 1
'    Wend
'
'    check_value = False
'End Function

Public Function check_kat_value(Blatt As String, spalte As Integer, Was As String) As Boolean
    Dim row_counter As Integer
    Dim first_col As Integer
    Dim sec_col As Integer
    
    row_counter = 2
    
    While ActiveWorkbook.Sheets(Blatt).Cells(row_counter, 2).value <> ""
        If ActiveWorkbook.Sheets(Blatt).Cells(row_counter, spalte).value = Was Then
            check_kat_value = True
            Exit Function
        End If
        row_counter = row_counter + 1
    Wend

    check_kat_value = False
End Function

Public Sub Named_KatDetails()
    Dim counter As Integer
    Dim KatCounter As Integer
    Dim ItemStartRow As Integer
    Dim ColCount As Integer
    
    calc_frm_masterdata.Calculate
    
    ItemStartRow = 1
    ColCount = calc_frm_masterdata.Range("frm_KatDetails").columns.count
    
    'alle KatD_ definitionen l|fffd|schen!
    Dim i As Integer
    On Error Resume Next
    For i = 1 To ActiveWorkbook.Names.count - 1 Step 1
        If i > ActiveWorkbook.Names.count - 1 Then GoTo weiter
    
        If VBA.Left(ActiveWorkbook.Names(i).name, 5) = "KatD_" Then
            ActiveWorkbook.Names(i).delete
            i = i - 1
        End If
    Next i
weiter:

    For counter = 1 To calc_frm_masterdata.Range("frm_KatDetails").Rows.count Step 1
        If calc_frm_masterdata.Range("frm_KatDetails").Cells(counter, 6).value <> _
                    calc_frm_masterdata.Range("frm_KatDetails").Cells(counter + 1, 6).value Then
            'Namen Definieren
            If counter > ItemStartRow Then
                ActiveWorkbook.Names.add name:="KatD_" & Get_KatIDByKatD(calc_frm_masterdata.Range("frm_KatDetails").Cells(ItemStartRow, ColCount)), _
                    RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Range("frm_KatDetails").Cells(ItemStartRow, 1), calc_frm_masterdata.Range("frm_KatDetails").Cells(counter, ColCount))
            Else
                ActiveWorkbook.Names.add name:="KatD_" & Get_KatIDByKatD(calc_frm_masterdata.Range("frm_KatDetails").Cells(ItemStartRow, ColCount)), _
                    RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Range("frm_KatDetails").Cells(ItemStartRow, 1), calc_frm_masterdata.Range("frm_KatDetails").Cells(ItemStartRow, ColCount))
            End If
            ItemStartRow = counter + 1
        End If
    Next counter
    
    If counter = ItemStartRow Then
        ActiveWorkbook.Names.add name:="KatD_" & Get_KatIDByKatD(calc_frm_masterdata.Range("frm_KatDetails").Cells(ItemStartRow, ColCount)), _
                    RefersToR1C1:=calc_frm_masterdata.Range(calc_frm_masterdata.Range("frm_KatDetails").Cells(ItemStartRow, 1), calc_frm_masterdata.Range("frm_KatDetails").Cells(ItemStartRow, ColCount))
    End If
End Sub

Public Function Get_KatIDByKatD(KatDetail_DK_KatID As String) As String
    Dim c

    With calc_frm_masterdata.Range("frm_Kategorie").columns(1)
        Set c = .Find(KatDetail_DK_KatID, LookIn:=xlValues, LookAt:=xlWhole)
        If Not c Is Nothing Then
            Get_KatIDByKatD = calc_frm_masterdata.Cells(c.row, 2).value
        Else
            Get_KatIDByKatD = 0
        End If
    End With
End Function

Public Function Check_Date(textdate As String, Optional showMsg As Boolean = True) As Boolean
    If textdate = "" Then
        Check_Date = True
        Exit Function
    End If
    
    'RegEx-Klassenobjekt erstellen
    Dim oRegEx As Object, objMatch As Object   ' Vergleichsmuster
    Dim sPattern As String
    
    Set oRegEx = CreateObject("vbscript.regexp")
    
    'Wenn Tag = 1 Zeichen dann mit 0 auff|fffd|llen
    If UBound(VBA.Split(VBA.Left(textdate, 2), ".")) = 1 Then
        textdate = "0" & textdate
    End If
    
    'Wenn Jahr = 2 Zeichen dann mit 20 auff|fffd|llen
    If UBound(VBA.Split(VBA.Right(textdate, 4), ".")) = 1 Then
        textdate = VBA.Left(textdate, VBA.Len(textdate) - 2) & "20" & VBA.Right(textdate, 2)
    End If
    
    'Wenn Monat = 1 Zeichen dann mit 0 auff|fffd|llen
    If UBound(VBA.Split(Mid(textdate, 4, 2), ".")) = 1 Then
        textdate = VBA.Left(textdate, 3) & "0" & VBA.Right(textdate, 6)
    End If
    
    'Hier: Datumsangaben im Bereich 01.01.1800 bis 31.12.2099 zulassen
    sPattern = "(0[1-9]|[12][0-9]|3[01])[.](0[1-9]|1[012])[.](20|20)[0-9]{2}"
    
    With oRegEx    ' Syntax der Datum-Eingabe pr|fffd|fen
        .Pattern = sPattern
        Set objMatch = .Execute(textdate)
        
        If objMatch.count = 0 Or Not VBA.IsDate(textdate) Then
        'If Not .IsMatch(textdate, sPattern) Then
            'Syntax entspricht nicht dem Muster!
            If showMsg Then MsgBox nlc_language.FindValue("SMessage_WrongSyntax")
            Check_Date = False
            Exit Function
        End If
    End With
    
    Check_Date = True
End Function

Public Function get_true_false(wert As Boolean) As String
    If wert = True Then
        get_true_false = Class_Functions.DB.Parse2True
    Else
        get_true_false = "0"
    End If
End Function

Public Function get_ValueWithoutGlobal(origValue As String) As String
    If VBA.Left(origValue, VBA.Len(GlobalIdLeft)) = GlobalIdLeft Then
        origValue = VBA.Right(origValue, VBA.Len(origValue) - VBA.Len(GlobalIdLeft))
    End If
    
    If VBA.Right(origValue, VBA.Len(GlobalIdLeft)) = GlobalIdRight Then
        origValue = VBA.Left(origValue, (VBA.Len(origValue) - VBA.Len(GlobalIdRight)))
    End If
    
    get_ValueWithoutGlobal = origValue
End Function

Public Function check_userrights(Optional show_msg As Boolean = True) As Boolean
    check_userrights = True
    
    If calc_master.Range("user_exist").value = "nein" Then
        If VBA.LCase(nlc_konstanten.tool_art) = VBA.LCase("Demo") Then
            calc_master.Range("toolart").value = "Demo"
            If nlc_konstanten.demoversion < VBA.Date Or calc_master.Range("Stichtag").value > nlc_konstanten.demoversion Then
                If show_msg = True Then
                    MsgBox nlc_language.FindValue("SMessage_EndOfDemo"), vbCritical + vbOKOnly
                End If
                
                check_userrights = False
            End If
        Else
            If show_msg = True Then
                MsgBox nlc_language.FindValue("SMessage_NoRights"), vbCritical + vbOKOnly
            End If
            
            check_userrights = False
        End If
    End If
End Function

Private Sub Set_Useranzahl()
    Dim key As String
    
    key = key_generieren(nlc_konstanten.useranzahl)
    
    If SQL_Abfragen.Update_PF_Settings(calc_master.Range("PF_Settings_ID").value, "UserZahl", key) = False Then
        MsgBox nlc_language.FindValue("SMessage_ErrWriteUsercount")
    End If
End Sub

Public Function key_generieren(Username As String) As String

    Dim name_counter As Integer
    Dim char_index As Integer
    Dim anzahl_char As Integer
    Dim Rest As Integer
    Dim addieren_ As Integer
    Dim check_name_counter As Boolean
    Dim indexer_1 As Integer
    Dim indexer_2 As Integer
    Dim indexer_3 As Integer
    Dim skey As String
    Dim x As Integer
    Dim i As Integer
    Dim nValue As Integer
    
    anzahl_char = 10 + 26 'anzahl Zahlen + Anzahl Buchstaben
    
    Randomize VBA.Len(Username)

    name_counter = 1
'
'    Randomize Timer
'    indexer_1 = Int((9 * Rnd) + 1)
'    Randomize Timer
'    indexer_2 = Int((9 * Rnd) + 1)
'    Randomize Timer
'    indexer_3 = Int((9 * Rnd) + 1)
    
    skey = 1574 'name_counter & indexer_1 & indexer_2 & indexer_3
    
    For x = 1 To 5
        If skey <> "" Then skey = skey & "-"
        For i = 1 To 5
            char_index = VBA.Asc(VBA.Mid$(VBA.UCase(Username), name_counter, 1))
            addieren_ = x * i + name_counter
            nValue = char_index
            If (nValue Mod 10 = 0) Or (nValue Mod 5 = 0) Then 'Or (nValue Mod 3 = 0) Then
              ' Zahl
              Do
                char_index = char_index / addieren_
                nValue = Int(char_index)
              Loop Until nValue >= 1 And nValue <= 9
              skey = skey & Chr$(48 + nValue)
            
            Else
              ' Buchstabe
              Do
                char_index = char_index / addieren_
                nValue = Int(char_index)
              Loop Until nValue >= 1 And nValue <= 26 And nValue <> 9 And nValue <> 15
              skey = skey & Chr$(64 + nValue)
            End If

            If name_counter < VBA.Len(Username) Then
                name_counter = name_counter + 1
            Else
                name_counter = 1
            End If
        Next i
    Next x
    
    key_generieren = skey
End Function

'Public Function key_gegen_generieren(username As String, key As String) As String
'    Dim name_counter As Integer
'    Dim char_index As Integer
'    Dim anzahl_char As Integer
'    Dim Rest As Integer
'    Dim addieren_ As Integer
'    Dim skey As String
'    Dim counter As Integer
'    Dim counter_2 As Integer
'    Dim nValue As Integer
'
'    username = tool & change_username(username)
'
'    anzahl_char = 10 + 26 'anzahl Zahlen + Anzahl Buchstaben
'
'    If key = pw_inno Then
'        skey = "2412"
'        name_counter = "2"
'    Else
'        If IsNumeric(VBA.Mid$(VBA.UCase(key), 1, 1)) = False Then
'            GoTo ende
'        End If
'
'        skey = VBA.Mid$(VBA.UCase(key), 1, 4)
'        name_counter = VBA.Mid$(VBA.UCase(key), 1, 1)
'
'        If IsNumeric(VBA.Mid$(VBA.UCase(key), 1, 1)) <> True Then
'            key_gegen_generieren = ""
'            Exit Function
'        End If
'    End If
'
'    'Zeichen zum Starten suchen
'    On Error GoTo ende
'    For counter = 1 To 5
'        If skey <> "" Then skey = skey & "-"
'        For counter_2 = 1 To 5
'            char_index = VBA.Asc(VBA.Mid$(VBA.UCase(username), name_counter, 1))
'            addieren_ = counter * counter_2 + name_counter
'            nValue = char_index
'            If (nValue Mod 10 = 0) Or (nValue Mod 5 = 0) Then 'Or (nValue Mod 3 = 0) Then
'              ' Zahl
'              Do
'                char_index = char_index / addieren_
'                nValue = Int(char_index)
'              Loop Until nValue >= 1 And nValue <= 9
'              skey = skey & Chr$(48 + nValue)
'
'            Else
'              ' Buchstabe
'              Do
'                char_index = char_index / addieren_
'                nValue = Int(char_index)
'              Loop Until nValue >= 1 And nValue <= 26 And nValue <> 9 And nValue <> 15
'              skey = skey & Chr$(64 + nValue)
'            End If
'
'            If name_counter < VBA.Len(username) Then
'                name_counter = name_counter + 1
'            Else
'                name_counter = 1
'            End If
'
'        Next counter_2
'    Next counter
'
'    If key <> pw_inno Then
'        If skey = key Then
'            key_gegen_generieren = skey
'            Exit Function
'        End If
'    Else
'        key_gegen_generieren = skey
'        Exit Function
'    End If
'
'ende:
'    key_gegen_generieren = ""
'End Function
Attribute VB_Name = "nlc_konstanten"
Option Explicit
Option Private Module

Public Const tool = "ppf"

Public Const pw_inno = "nls4ever!"
Public Const db_Salt = "soul2gether!"

Public Const useradmin = False
Public Const useranzahl = "10"
Public Const maxDetail = 20

'################# FULL ################
'Public Const maxP = 100000
'Public Const tool_art = "Normal"
'Public Const FixedPath = False

'################# Light ################
Public Const maxP = 10
Public Const tool_art = "Demo"
'Public Const tool_art = "Normal"
Public Const demoversion = "" '#tag/monat/jahr# ohne komma!
Public Const FixedPath = True 'ActiveWorkbook.Path & "/" & "portfolio.accdb"


Public Const arbeitsmappenschutz = True 'f|fffd|r office 2007

Public Const Res_Anz = 15
Public Const Cost_Anz = 10

Public Const Sprachen_Anz = 2

Public Const Toolbezeichnung = "phb.xl"

Public Const GlobalIdLeft = "* "
Public Const GlobalIdRight = ""
'
'Public Const Data_Startzeile = 40
'Public Const Data_Startspalte = 3
'Public Const Data_Endspalte = 176
'Public Const MD_Spaltensprung = 25
'Public Const Temp_Startzeile = 40
'Public Const Temp_Endzeile = Temp_Startzeile + 99
'
'Public Const SpNr_Marker = 1
'Public Const SpNr_Header = 2
'Public Const SpNr_Nr = 3
'Public Const SpNr_UID = 4
'Public Const SpNr_ArtB = 5
'Public Const SpNr_MSPID = 6
'Public Const SpNr_SV = 7
'Public Const SpNr_Art = 8
'Public Const SpNr_Ebene = 9
'Public Const SpNr_PSP = 10
'Public Const SpNr_Name = 11
'Public Const SpNr_Fortschritt = 12
'Public Const SpNr_Status = 13
'Public Const SpNr_Verantwortung = 16
'Public Const SpNr_ImpVerantwortung = 17
'Public Const SpNr_DateB_S = 58
'Public Const SpNr_DateB_E = SpNr_DateB_S + 1
'Public Const SpNr_DateA_S = 60
'Public Const SpNr_DateA_E = SpNr_DateA_S + 1
'Public Const SpNr_Dauer = SpNr_DateA_E + 1
'Public Const SpNr_NFA = SpNr_Dauer + 1
'Public Const SpNr_Vorgaenger = SpNr_NFA + 1
'Public Const SpNr_Res_S = 65
'Public Const SpNr_ResA_S = SpNr_Res_S + 2
'Public Const SpNr_Res_E = 109
'Public Const SpNr_ResSumme_Bas = 110
'Public Const SpNr_ResSumme_Akt = 113
'Public Const SpNr_Cost_S = 115
'Public Const SpNr_CostA_S = SpNr_Cost_S + 2
'Public Const SpNr_Cost_E = 144
'Public Const SpNr_CostSumme_Bas = 145
'Public Const SpNr_CostSumme_Akt = 148
'Public Const SpNr_ImpInd = 150
'Public Const SpNr_ImpPfad = 151
'Public Const SpNr_ImpDate = 152
'Public Const SpNr_Comment = 153
'Public Const SpNr_APSpez = 154
'Public Const SpNr_Berechnet = 158
'Public Const SpNr_Lag = SpNr_Berechnet + 1
'Public Const SpNr_Projektbegleitend = SpNr_Lag + 1
'Public Const SpNr_vorgaenger1 = SpNr_Projektbegleitend + 1
'Public Const SpNr_vorgaenger2 = SpNr_vorgaenger1 + 1
'Public Const SpNr_vorgaenger3 = SpNr_vorgaenger2 + 1
'Public Const SpNr_vorgaenger4 = SpNr_vorgaenger3 + 1
'Public Const SpNr_vorgaenger5 = SpNr_vorgaenger4 + 1
'Public Const SpNr_vorgaenger6 = SpNr_vorgaenger5 + 1
'Public Const SpNr_vorgaenger7 = SpNr_vorgaenger6 + 1
'Public Const SpNr_vorgaenger8 = SpNr_vorgaenger7 + 1
'Public Const SpNr_vorgaenger9 = SpNr_vorgaenger8 + 1
'Public Const SpNr_vorgaenger10 = SpNr_vorgaenger9 + 1
'Public Const SpNr_Wert_Berechnet = SpNr_vorgaenger10 + 1
'Public Const SpNr_Link_vorhanden = SpNr_Wert_Berechnet + 1
'Public Const SpNr_left = 173
'Public Const SpNr_top = SpNr_left + 1
'Public Const SpNr_height = SpNr_top + 1
'Public Const SpNr_width = SpNr_height + 1
'
'
'Public Const ZeiNr_VorlageAP = 9
'Public Const ZeiNr_VorlageMS = 10
'Public Const ZeiNr_VorlageSV = 11
'Public Const ZeiNr_VerImpSpAlt = 13
'Public Const ZeiNr_VerImp = 14
'Public Const ZeiNr_PHBImp = 15
'Public Const ZeiNr_MSPImp = 16
'Public Const ZeiNr_AP = 17
'Public Const ZeiNr_MS = 18
'Public Const ZeiNr_SV = 19
'Public Const ZeiNr_FrEbene = 20
'Public Const ZeiNr_LayoutOFF = 23
'Public Const ZeiNr_LayoutON = 24
'Public Const ZeiNr_Layout_Funktion = 29
'Public Const ZeiNr_Layout_Personal = 30
'Public Const ZeiNr_Layout_Kosten = 31
'Public Const ZeiNr_Adminclose = 32
'Public Const ZeiNr_Adminshow = 33
'Public Const ZeiNr_Layout_User = 35
'Public Const ZeiNr_Beschriftung = 38
'Public Const ZeiNr_Projekt = 40
'
'Public Const ZeiNr_Feiertag_start = 5
'Public Const SpNr_Feiertag_date = 64
'
'Public Const MDWBS_Hoehe = 10
'Public Const MDWBS_Breite = 13
'Public Const MDWBS_Abstand = 25

Public Sperren_Variable As Boolean

Dim color_index As String
Attribute VB_Name = "nlc_language"
Option Explicit

Public Sub ChangeButtonName()
    Dim sheet As Worksheet
    Dim Button As Shape
    
    For Each sheet In ActiveWorkbook.Sheets
        If (VBA.Left(sheet.CodeName, 4) = "nlc_") Then
            For Each Button In sheet.Shapes
                Select Case (Button.name)
                    Case "btn_Aktualisieren":
                        Button.TextFrame2.TextRange.Characters.text = FindValue("SButton_refresh")
                    Case "btn_LoadContent":
                        Button.TextFrame2.TextRange.Characters.text = FindValue("SButton_loadProject")
                End Select
            Next Button
        End If
    Next sheet
End Sub

Public Sub ChangeSheetName()
    Dim sheet As Worksheet
    
    For Each sheet In ActiveWorkbook.Sheets
        If VBA.Left(sheet.CodeName, 8) = "nlc_ppf_" Then
            sheet.name = FindValue("SName_" & sheet.CodeName)
        End If
    Next sheet
End Sub

Public Function FindValue(Term As String) As String
    Dim c

    With DB_Language.Range("LanguageMatrix")
        Set c = .Find(Term, LookIn:=xlValues, LookAt:=xlWhole)
        If Not c Is Nothing Then
            FindValue = .Cells(c.row - 1, calc_master.Range("LangCol").value).value
        Else
            FindValue = ""
        End If
    End With
End Function
Attribute VB_Name = "nlc_matrix"
Option Explicit
Option Private Module

'Es wird 3 Hauptroutinen geben; 1.) Maske holt Filter und Einstellungen; 2.) Werte aus Maske werden in Datentabelle geladen; 3.) Portfolio wird generiert

Public Sub generate_matrix()
    Dim XAchseArt As String, YAchseArt As String
    Dim XAchseMax As Integer, YAchseMax As Integer
    Dim XAchseMin As Integer, YAchseMin As Integer

    Dim X_ID_Value As String
    Dim Y_ID_Value As String
    Dim X_Shortname As Boolean
    Dim Y_Shortname As Boolean
    Dim Color_ID As String
    Dim Groesse_ID_Value As String
    Dim Background_ID As Integer
    Dim Pj_Shortname As Boolean
    Dim SizeScale As String

    Dim TemplateID As String
    Dim FarbeArt As String
    Dim GroesseArt As String

    Dim einheit As String

    Dim Rs As Object
    Dim i As Integer
    Dim filter_id As String
    Dim pj_ids As String

    'Tabelle generieren
    'On Error GoTo ende:
    nlc_intern.Application_off
    nlc_ppf_matrix.Unprotect (nlc_intern.get_pw)

    filter_id = SQL_Abfragen.Get_Setting_Matrix_Value(calc_master.Range("last_Matrix_ID").value, "FK_Filter")
    pj_ids = nlc_filter.get_Filter(filter_id)

    'vorbereiten
    TemplateID = calc_master.Range("last_Matrix_ID").value
    nlc_ppf_matrix.Select
    nlc_ppf_matrix.Rows("89:92").Hidden = True
    nlc_ppf_matrix.Range("O10").value = ""
    'farben l|fffd|schen
    nlc_ppf_matrix.Range("O16:O54").Interior.ColorIndex = xlNone
    nlc_ppf_matrix.Range("O14:Q54").ClearContents
    'x-y legende l|fffd|schen
    nlc_ppf_matrix.Range("E89:E92").value = ""

    'Alle Werte vom letzten Template laden um nur einmal auf die DB zugreiffen zu m|fffd|ssen
    'wird in Funktion Get_PipeCalc |fffd|berschrieben, daher werte vorher zwischenspeichern!!!
    If SQL_Abfragen.Get_AllFromWhere("DB_Settings_Matrixchart", "ID=" & TemplateID) = False Then Exit Sub


    XAchseMax = 0
    YAchseMax = 0
    XAchseMin = -2
    YAchseMin = -2

    Pj_Shortname = Class_Functions.DB.Recordset!Bubbles_Shortname
    XAchseArt = Class_Functions.DB.Recordset!X_Art
    YAchseArt = Class_Functions.DB.Recordset!Y_Art
    X_ID_Value = Class_Functions.DB.Recordset!X_ID_Value
    Y_ID_Value = Class_Functions.DB.Recordset!Y_ID_Value
    X_Shortname = Class_Functions.DB.Recordset!X_Shortname
    Y_Shortname = Class_Functions.DB.Recordset!Y_Shortname
    Groesse_ID_Value = Class_Functions.DB.Recordset!Size_ID_Value
    GroesseArt = Class_Functions.DB.Recordset!Size_Art
    SizeScale = Class_Functions.DB.Recordset!Size_Scale
    FarbeArt = Class_Functions.DB.Recordset!Color_Art
    Color_ID = Class_Functions.DB.Recordset!Color_ID
    Background_ID = Class_Functions.DB.Recordset!Background

    Call SQL_Abfragen.Get_MatrixCalc(pj_ids)

'X & Y Achse beschriften
    On Error Resume Next
    If XAchseArt = "Stapel" Or XAchseArt = "DropDown" Or XAchseArt = "True/False" Then XAchseMin = 0
    If YAchseArt = "Stapel" Or YAchseArt = "DropDown" Or YAchseArt = "True/False" Then YAchseMin = 0

    If XAchseArt = "True/False" Then
        XAchseMax = 2 * 4
        nlc_ppf_matrix.Rows("89:90").Hidden = False
        nlc_ppf_matrix.Cells(90, 5).value = SQL_Abfragen.Get_MatrixXYAchse(X_ID_Value, X_Shortname)
    End If
    If YAchseArt = "True/False" Then
        YAchseMax = 2 * 4
        nlc_ppf_matrix.Rows("91:92").Hidden = False
        nlc_ppf_matrix.Cells(92, 5).value = SQL_Abfragen.Get_MatrixXYAchse(Y_ID_Value, Y_Shortname)
    End If

    If XAchseArt = "DropDown" Then
        nlc_ppf_matrix.Range("G94").Calculate

        nlc_ppf_matrix.Rows("89:90").Hidden = False
        nlc_ppf_matrix.Cells(90, 5).value = SQL_Abfragen.Get_MatrixXYAchse(X_ID_Value, X_Shortname)
        XAchseMax = (UBound(Split(nlc_ppf_matrix.Range("E90").value, "   ")) + 1) * 4
    End If
    If YAchseArt = "DropDown" Then
        nlc_ppf_matrix.Range("I94").Calculate
        nlc_ppf_matrix.Rows("91:92").Hidden = False
        nlc_ppf_matrix.Cells(92, 5).value = SQL_Abfragen.Get_MatrixXYAchse(Y_ID_Value, Y_Shortname)
        YAchseMax = (UBound(Split(nlc_ppf_matrix.Range("E92").value, "   ")) + 1) * 4
    End If

'Achsenbeschriftung
    Select Case XAchseArt
        Case "DropDown", "True/False", "Date", "Number"
            nlc_ppf_matrix.Range("D88").value = SQL_Abfragen.Get_KatName(X_ID_Value, X_Shortname)
        Case "Stapel"
            nlc_ppf_matrix.Range("D88").value = XAchseArt
        Case Else
            If XAchseArt = "Kosten" Then
                einheit = " (" & Application.WorksheetFunction.VLookup(calc_master.Range("Cost_Einheit").value, calc_frm_masterdata.Range("frm_Einheit"), 2, False) & ")"
            ElseIf XAchseArt = "Ressourcen" Then
                einheit = " (" & Application.WorksheetFunction.VLookup(calc_master.Range("Ress_Einheit").value, calc_frm_masterdata.Range("frm_Einheit"), 2, False) & ")"
            End If

            nlc_ppf_matrix.Range("D88").value = XAchseArt & einheit & " - " & X_ID_Value
    End Select
    einheit = ""

    Select Case YAchseArt
        Case "DropDown", "True/False", "Date", "Number"
            nlc_ppf_matrix.Range("C6").value = SQL_Abfragen.Get_KatName(Y_ID_Value, Y_Shortname)
        Case "Stapel"
            nlc_ppf_matrix.Range("C6").value = YAchseArt
        Case Else
            If YAchseArt = "Kosten" Then
                einheit = " (" & Application.WorksheetFunction.VLookup(calc_master.Range("Cost_Einheit").value, calc_frm_masterdata.Range("frm_Einheit"), 2, False) & ")"
            ElseIf YAchseArt = "Ressourcen" Then
                einheit = " (" & Application.WorksheetFunction.VLookup(calc_master.Range("Ress_Einheit").value, calc_frm_masterdata.Range("frm_Einheit"), 2, False) & ")"
            End If

            nlc_ppf_matrix.Range("C6").value = YAchseArt & einheit & " - " & Y_ID_Value
    End Select
    einheit = ""

'Farbe
    Call clear_Farben
    If FarbeArt <> "einheitlich" Then Call SQL_Abfragen.Get_MatrixFarben(Color_ID)
    Select Case FarbeArt
        Case "DropDown", "True/False"
            nlc_ppf_matrix.Range("O14").value = SQL_Abfragen.Get_KatName(Color_ID, False) ', True)
        Case Else
            nlc_ppf_matrix.Range("O14").value = FarbeArt
            
            i = 96
            While nlc_ppf_matrix.Cells(i, 3).value <> ""
                nlc_ppf_matrix.Cells(i, 13).value = ""
                i = i + 1
            Wend
    End Select
    einheit = ""

'Gr|fffd||fffd|e
    Select Case GroesseArt
        Case "Number"
            nlc_ppf_matrix.Range("O10").value = SQL_Abfragen.Get_KatName(Groesse_ID_Value, False) ', True)
            einheit = SQL_Abfragen.getKatEinheit(Groesse_ID_Value)
            
            If einheit <> "" Then
                nlc_ppf_matrix.Range("matrixSizeValue").Cells(1, 1).FormulaR1C1 = "=VLOOKUP(""SValue_size"",LanguageMatrix,LangCol,FALSE) & "" (in " & einheit & ")"""
            Else
                nlc_ppf_matrix.Range("matrixSizeValue").Cells(1, 1).FormulaR1C1 = "=VLOOKUP(""SValue_size"",LanguageMatrix,LangCol,FALSE)"
            End If
        Case "einheitlich"
            nlc_ppf_matrix.Range("O10").value = GroesseArt
            nlc_ppf_matrix.Range("matrixSizeValue").Cells(1, 1).FormulaR1C1 = "=VLOOKUP(""SValue_size"",LanguageMatrix,LangCol,FALSE)"
        Case Else
            If GroesseArt = "Kosten" Then
                einheit = Application.WorksheetFunction.VLookup(calc_master.Range("Cost_Einheit").value, calc_frm_masterdata.Range("frm_Einheit"), 2, False)
            ElseIf GroesseArt = "Ressourcen" Then
                einheit = Application.WorksheetFunction.VLookup(calc_master.Range("Ress_Einheit").value, calc_frm_masterdata.Range("frm_Einheit"), 2, False)
            End If

            'nlc_ppf_matrix.range("O10").value = GroesseArt & einheit & " - " & Groesse_ID_Value
            nlc_ppf_matrix.Range("O10").value = GroesseArt & " - " & Groesse_ID_Value
            nlc_ppf_matrix.Range("matrixSizeValue").Cells(1, 1).FormulaR1C1 = "=VLOOKUP(""SValue_size"",LanguageMatrix,LangCol,FALSE) & "" (in " & einheit & ")"""
    End Select
    nlc_ppf_matrix.ChartObjects("MatrixChart").Chart.ChartGroups(1).BubbleScale = VBA.CInt(SizeScale)
    
    einheit = ""

    'Achsen Formatieren
    Call achsen_formatieren(XAchseMax, XAchseMin, XAchseArt, YAchseMax, YAchseMin, YAchseArt)
    
    nlc_ppf_matrix.Calculate
    
    'Matrix berechnen
    Call berechne_Matrix
    
    'Male Bubbles
    Call UpdateChart(Pj_Shortname)

    Call Set_MatrixBackgroundImage(Background_ID)

    nlc_ppf_matrix.Select
    For i = 64 To 163
        If nlc_ppf_matrix.Cells(i, 1).value = "" Then Exit For
    Next i

Ende:
    nlc_ppf_matrix.Rows("90:90").EntireRow.AutoFit
    nlc_ppf_matrix.Rows("92:92").EntireRow.AutoFit
    nlc_ppf_matrix.Protect (nlc_intern.get_pw)
    nlc_intern.Application_on
End Sub

Private Sub clear_Farben()
    Dim counter As Integer
    
    For counter = 16 To 54 Step 2
        nlc_ppf_matrix.Cells(counter, 17).Interior.Pattern = xlNone
    Next counter
End Sub

Private Sub UpdateChart(short As Boolean)
    Dim i As Integer
    Dim j As Integer
    Dim startzeile As Integer
    Dim endzeile As Integer

    With nlc_ppf_matrix.ChartObjects("MatrixChart").Chart
        For i = .SeriesCollection.count To 2 Step -1
            .SeriesCollection(i).delete
        Next

        startzeile = 96
        endzeile = nlc_ppf_matrix.Cells(94, 3).value

        If endzeile < startzeile Then endzeile = startzeile

        j = 0
        i = startzeile

        If startzeile <= endzeile Then
            'Call FormatSeries(j, i)

            For i = startzeile To endzeile
                If nlc_ppf_matrix.Cells(i, 3).value <> "" And (nlc_ppf_matrix.Cells(i, 7).value <> "" And nlc_ppf_matrix.Cells(i, 9).value <> "") Then
                    If j > 0 Then
                        .SeriesCollection.NewSeries
                    End If
                    j = j + 1
                    Call FormatSeries(j, i, short)
                End If
            Next
        End If
    End With
End Sub


Private Sub FormatSeries(j, i, short As Boolean)
    Dim Rs As Object

    With nlc_ppf_matrix.ChartObjects("MatrixChart").Chart
        With .SeriesCollection(j)
            .ApplyDataLabels
            If short = True Then
                .name = nlc_ppf_matrix.Cells(i, 4).value
            Else
                .name = nlc_ppf_matrix.Cells(i, 5).value
            End If
            If nlc_ppf_matrix.Cells(i, 7).value = 1 Then 'X-Achse
                .XValues = 1
            Else
                .XValues = VBA.CInt(IIf(nlc_ppf_matrix.Cells(i, 7).value = "", 0, nlc_ppf_matrix.Cells(i, 7).value))
            End If

            If nlc_ppf_matrix.Cells(i, 9).value = 1 Then 'Y-Achse
                .values = 1
            Else
                .values = VBA.CInt(IIf(nlc_ppf_matrix.Cells(i, 9).value = "", 0, nlc_ppf_matrix.Cells(i, 9).value))
            End If

            If nlc_ppf_matrix.Cells(i, 11).value = 1 Then 'Gr|fffd||fffd|e
                .BubbleSizes = "={1}"
            Else
                .BubbleSizes = "={" & VBA.CDbl(IIf(nlc_ppf_matrix.Cells(i, 11).value = "", 0.01, nlc_ppf_matrix.Cells(i, 11).value)) & "}"
            End If

            If nlc_ppf_matrix.Cells(i, 13).value <> "" Then
                .Border.ColorIndex = IIf(WorksheetFunction.VLookup(calc_master.Range("farben_gesamt").Cells(nlc_ppf_matrix.Cells(i, 13).value, 1).value, calc_master.Range("farben_gesamt"), 2, False) = "w", 2, 1)
                .DataLabels.Font.ColorIndex = 1 'IIf(WorksheetFunction.VLookup(calc_master.Range("farben_gesamt").Cells(nlc_ppf_matrix.Cells(i, 13).value, 1).value, calc_master.Range("farben_gesamt"), 2, False) = "w", 56, 1)
                
                .DataLabels.Format.Fill.ForeColor.ObjectThemeColor = msoThemeColorBackground1
                .DataLabels.Format.Fill.Transparency = 0.25
                .DataLabels.Format.line.visible = msoFalse
                
                .Interior.ColorIndex = calc_master.Range("farben_gesamt").Cells(nlc_ppf_matrix.Cells(i, 13).value, 1).value
            Else
                With .Format.Fill
                    .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                    .ForeColor.Brightness = 0
                End With
                With .Format.line
                    .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                    .ForeColor.Brightness = 0
                End With
            End If
            .Border.Weight = xlThin
            .Border.LineStyle = xlContinuous
            .Has3DEffect = True
           ' .Interior.PatternColorIndex = calc_pipe_tab.Cells(i, 11).Value '
            .Interior.Pattern = xlSolid
            .ApplyDataLabels ShowSeriesName:=True ', AutoText:=True, LegendKey:= False, ShowCategoryName:=False, ShowValue:=False, ShowPercentage:=False, ShowBubbleSize:=False
            .DataLabels.HorizontalAlignment = xlCenter
            .DataLabels.Position = xlLabelPositionCenter
            .DataLabels.ShowValue = False
'           .DataLabels.Font.Background = xlTransparent
            .Format.line.visible = msoFalse
        End With
    End With
End Sub

Private Function berechne_Matrix()
    Dim row_counter As Integer
    Dim item_counter As Integer
    Dim item_count As Integer
    Dim xAchseValue As String
    Dim yAchseValue As String
    
    row_counter = 96
    
    While nlc_ppf_matrix.Cells(row_counter, 3).value <> ""
        item_counter = row_counter
        item_count = 1
        
        xAchseValue = nlc_ppf_matrix.Cells(row_counter, 6).value
        yAchseValue = nlc_ppf_matrix.Cells(row_counter, 8).value
        
        If nlc_ppf_matrix.Cells(row_counter, 15).value <> "x" Then
            While nlc_ppf_matrix.Cells(item_counter, 3).value <> ""
                'Wenn X und Y Achse den selben Startwert haben, wird gerechnet.
                If xAchseValue = nlc_ppf_matrix.Cells(item_counter, 6).value And yAchseValue = nlc_ppf_matrix.Cells(item_counter, 8).value Then
                    Select Case item_count
                        Case 1
                            nlc_ppf_matrix.Cells(item_counter, 7).value = (nlc_ppf_matrix.Cells(item_counter, 7).value * 4) - 2.5
                            nlc_ppf_matrix.Cells(item_counter, 9).value = (nlc_ppf_matrix.Cells(item_counter, 9).value * 4) - 2.5
                        Case 2
                            nlc_ppf_matrix.Cells(item_counter, 7).value = (nlc_ppf_matrix.Cells(item_counter, 7).value * 4) - 3
                            nlc_ppf_matrix.Cells(item_counter, 9).value = (nlc_ppf_matrix.Cells(item_counter, 9).value * 4) - 1
                        Case 3
                            nlc_ppf_matrix.Cells(item_counter, 7).value = (nlc_ppf_matrix.Cells(item_counter, 7).value * 4) - 1
                            nlc_ppf_matrix.Cells(item_counter, 9).value = (nlc_ppf_matrix.Cells(item_counter, 9).value * 4) - 3
                        Case 4
                            nlc_ppf_matrix.Cells(item_counter, 7).value = (nlc_ppf_matrix.Cells(item_counter, 7).value * 4) - 1
                            nlc_ppf_matrix.Cells(item_counter, 9).value = (nlc_ppf_matrix.Cells(item_counter, 9).value * 4) - 1
                        Case 5
                            nlc_ppf_matrix.Cells(item_counter, 7).value = (nlc_ppf_matrix.Cells(item_counter, 7).value * 4) - 3
                            nlc_ppf_matrix.Cells(item_counter, 9).value = (nlc_ppf_matrix.Cells(item_counter, 9).value * 4) - 3
                        Case 6
                            nlc_ppf_matrix.Cells(item_counter, 7).value = (nlc_ppf_matrix.Cells(item_counter, 7).value * 4) - 2.5
                            nlc_ppf_matrix.Cells(item_counter, 9).value = (nlc_ppf_matrix.Cells(item_counter, 9).value * 4) - 1
                        Case 7
                            nlc_ppf_matrix.Cells(item_counter, 7).value = (nlc_ppf_matrix.Cells(item_counter, 7).value * 4) - 2.5
                            nlc_ppf_matrix.Cells(item_counter, 9).value = (nlc_ppf_matrix.Cells(item_counter, 9).value * 4) - 3
                        Case 8
                            nlc_ppf_matrix.Cells(item_counter, 7).value = (nlc_ppf_matrix.Cells(item_counter, 7).value * 4) - 3
                            nlc_ppf_matrix.Cells(item_counter, 9).value = (nlc_ppf_matrix.Cells(item_counter, 9).value * 4) - 2.5
                        Case 9
                            nlc_ppf_matrix.Cells(item_counter, 7).value = (nlc_ppf_matrix.Cells(item_counter, 7).value * 4) - 1
                            nlc_ppf_matrix.Cells(item_counter, 9).value = (nlc_ppf_matrix.Cells(item_counter, 9).value * 4) - 2
                    End Select
                    
                    nlc_ppf_matrix.Cells(item_counter, 15).value = "x"
                    
                    item_count = item_count + 1
                    If item_count = 10 Then
                        item_count = 1
                    End If
                End If
                item_counter = item_counter + 1
            Wend
        End If
        row_counter = row_counter + 1
    Wend
    
End Function

Private Sub achsen_formatieren(XAMax As Integer, XAMin As Integer, XAKat As String, YAMax As Integer, YAMin As Integer, YAKat As String)
    nlc_ppf_matrix.ChartObjects("MatrixChart").Activate

    ' X-Achse anpassen
    With ActiveChart.Axes(xlCategory)
        .MinimumScaleIsAuto = True
        .MaximumScaleIsAuto = True
        .MinorUnitIsAuto = False
        .MajorUnitIsAuto = False
        '.Crosses = xlAutomatic
        .ReversePlotOrder = False
        If XAMax > 0 Then
            .MaximumScale = XAMax
        End If
        If XAMin <> -2 Then
            .MinimumScale = XAMin
            '.Crosses = xlCustom
            '.CrossesAt = 0
        End If
        If XAMin > -2 And XAMax > 0 And XAMax <= 80 Then
            .MinorUnit = 1
            .MajorUnit = 4
        End If
        .ReversePlotOrder = False 'neu
        .TickLabelPosition = xlLow 'neu
    End With

    ' Y-Achse anpassen
    With ActiveChart.Axes(xlValue)
        .MinimumScaleIsAuto = True
        .MaximumScaleIsAuto = True
        .MinorUnitIsAuto = False
        .MajorUnitIsAuto = False
        '.Crosses = xlAutomatic
        .ReversePlotOrder = False
        If YAMax > 0 Then
            .MaximumScale = YAMax
        End If
        If YAMin <> -2 Then
            .MinimumScale = YAMin
            '.Crosses = xlCustom
            '.CrossesAt = 0
        End If
        If YAMin > -2 And YAMax > 0 And YAMax <= 80 Then
            .MinorUnit = 1
            .MajorUnit = 4
        End If
    End With
End Sub

Private Sub test()
    'Call Set_MatrixBackgroundImage(3)
    
    Call achsen_formatieren(20 * 5, 0, "X-Achse", 20 * 5, 0, "Y-Achse")
End Sub

Private Sub Set_MatrixBackgroundImage(image_id As Integer)
    If calc_master.Cells(8, 15 + image_id - 1).value = "Grafiken" Then
        With nlc_ppf_matrix.ChartObjects("MatrixChart").Chart
            .PlotArea.Fill.visible = False
        End With
    Else
        With nlc_ppf_matrix.ChartObjects("MatrixChart").Chart
            .PlotArea.Fill.visible = False
            
            With .PlotArea.Format.Fill
                .visible = msoTrue
                .UserPicture (ActiveWorkbook.Path & "\Hintergrundgrafiken\" & calc_master.Cells(8, 15 + image_id - 1).value)
                .TextureTile = msoFalse
            End With
            
            .PlotArea.Fill.visible = True
        End With
    End If
End Sub




Attribute VB_Name = "nlc_navigation"
Option Explicit

Public Sub img_admin()
    If nls_Database.DbRequired Then
        frm_Admin.Show
    End If
End Sub

Public Sub img_MasterData()
    If nls_Database.DbRequired Then
        frm_MasterData.Show
    End If
End Sub

Public Sub img_projects()
    Application.StatusBar = ""
    If check_userrights = False Then Exit Sub
    
    If nls_Database.DbRequired Then
        frm_projects.Show
    End If
End Sub

Public Sub Sperren()
    Application.StatusBar = ""
    If check_userrights = False Then Exit Sub
    
    If nls_Database.DbRequired Then
        Call frm_Admin.btn_sperren_Click
    End If
End Sub

Public Sub img_pipeline()
    Application.StatusBar = ""
    If check_userrights = False Then Exit Sub
    
    If nls_Database.DbRequired Then
        frm_set_pipeline.Show
    End If
End Sub

Public Sub img_gantt()
    Application.StatusBar = ""
    If check_userrights = False Then Exit Sub
    
    If nls_Database.DbRequired Then
        frm_set_gantt.Show
    End If
End Sub

Public Sub img_resshisto()
    Application.StatusBar = ""
    If check_userrights = False Then Exit Sub
    
    If nls_Database.DbRequired Then
        frm_set_ress_histo.Show
    End If
End Sub

Public Sub img_costhisto()
    Application.StatusBar = ""
    If check_userrights = False Then Exit Sub
    
    If nls_Database.DbRequired Then
        frm_set_cost_histo.Show
    End If
End Sub

Public Sub img_piechart()
    Application.StatusBar = ""
    If check_userrights = False Then Exit Sub
    
    If nls_Database.DbRequired Then
        frm_set_piechart.Show
    End If
End Sub

Public Sub img_barchart()
    Application.StatusBar = ""
    If check_userrights = False Then Exit Sub
    
    If nls_Database.DbRequired Then
        frm_set_barchart.Show
    End If
End Sub

Public Sub img_pjtabelle()
    Application.StatusBar = ""
    If check_userrights = False Then Exit Sub
    
    If nls_Database.DbRequired Then
        frm_set_projekttabelle.Show
    End If
End Sub

Public Sub img_generatePPT()
    Application.StatusBar = ""
    If check_userrights = False Then Exit Sub
    
    If nls_Database.DbRequired Then
        Call PPT_Export.generatePPT
    End If
End Sub

Public Sub img_filter()
    Application.StatusBar = ""
    If check_userrights = False Then Exit Sub
    
    If nls_Database.DbRequired Then
        frm_set_filter.TabPage.tp_filter_edit_templates.Enabled = True
        frm_set_filter.Show
    End If
End Sub

Public Sub img_matrix()
    Application.StatusBar = ""
    If check_userrights = False Then Exit Sub
    
    If nls_Database.DbRequired Then
        frm_set_matrixchart.Show
    End If
End Sub

Public Sub img_pviewer()
    Application.StatusBar = ""
    If check_userrights = False Then Exit Sub
    
    If nls_Database.DbRequired Then
        frm_set_projectviewer.Show
    End If
End Sub

Public Sub img_SAPImport()
    Application.StatusBar = ""
    If check_userrights = False Then Exit Sub
    
    If nls_Database.DbRequired Then
        nlc_sapimport.SAPImport
    End If
End Sub

Attribute VB_Name = "nlc_piechart"
Option Explicit
Option Private Module

'Es wird 3 Hauptroutinen geben; 1.) Maske holt Filter und Einstellungen; 2.) Werte aus Maske werden in Datentabelle geladen; 3.) PieChart wird generiert
Public Sub generate_piechart()
    Dim ValueArt As String
    Dim ValueArtDetail As String
    Dim Cluster_Art As String
    Dim Cluster_ID_Value As String
    Dim AreaDescr As String


    Dim TemplateID As String

    'Tabelle generieren
    'On Error GoTo ende:
    nlc_intern.Application_off
    nlc_ppf_pie.Unprotect (nlc_intern.get_pw)
    
    nlc_ppf_pie.Select

    Call SQL_Abfragen.Get_PieCalc
    
    nlc_ppf_pie.Calculate
    
    If nlc_ppf_pie.Cells(42, 7).value > 0 Then
        Call Set_PieChart_CustomColor
    Else
        Call Set_PieChart_StandardColor
        Call Set_PieCalc_StandardColor
    End If
    
    nlc_ppf_pie.Protect (nlc_intern.get_pw)
    nlc_intern.Application_on
End Sub

Private Sub Set_PieChart_CustomColor()
    Dim counter As Integer
    Dim col As Integer
    Dim row As Integer
    
    On Error Resume Next
    nlc_ppf_pie.ChartObjects("PieChart").Activate
    
    row = 18
    col = 10
    
    For counter = 43 To 43 + 21 Step 1
        ActiveChart.SeriesCollection(1).Points(counter - 42).Interior.ColorIndex = calc_master.Range("farben_gesamt").Cells(nlc_ppf_pie.Cells(counter, 8).value, 1).value
        
        nlc_ppf_pie.Cells(row, col).Interior.ColorIndex = calc_master.Range("farben_gesamt").Cells(nlc_ppf_pie.Cells(counter, 8).value, 1).value
        
        If col = 10 Then
            col = 14
        Else
            row = row + 2
            col = 10
        End If
    Next counter
End Sub

Private Sub Set_PieCalc_StandardColor()
    nlc_ppf_pie.Range("J18").Select
    With Selection.Interior
        .ThemeColor = xlThemeColorAccent5
        .TintAndShade = -0.249946592608417
    End With
    nlc_ppf_pie.Range("N18").Select
    With Selection.Interior
        .ThemeColor = xlThemeColorAccent3
        .TintAndShade = -0.249946592608417
    End With
    nlc_ppf_pie.Range("J20").Select
    With Selection.Interior
        .ThemeColor = xlThemeColorAccent1
        .TintAndShade = -0.249946592608417
    End With
    nlc_ppf_pie.Range("N20").Select
    With Selection.Interior
        .ThemeColor = xlThemeColorDark2
        .TintAndShade = -0.249946592608417
    End With
    nlc_ppf_pie.Range("J22").Select
    With Selection.Interior
        .ThemeColor = xlThemeColorAccent4
        .TintAndShade = -0.249946592608417
    End With
    nlc_ppf_pie.Range("N22").Select
    With Selection.Interior
        .ThemeColor = xlThemeColorAccent2
        .TintAndShade = -0.249946592608417
    End With
    nlc_ppf_pie.Range("J24").Select
    With Selection.Interior
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
    End With
    nlc_ppf_pie.Range("N24").Select
    With Selection.Interior
        .ThemeColor = xlThemeColorAccent5
        .TintAndShade = 0
    End With
    nlc_ppf_pie.Range("J26").Select
    With Selection.Interior
        .ThemeColor = xlThemeColorAccent3
        .TintAndShade = 0
    End With
    nlc_ppf_pie.Range("N26").Select
    With Selection.Interior
        .ThemeColor = xlThemeColorAccent1
        .TintAndShade = 0
    End With
    nlc_ppf_pie.Range("J28").Select
    With Selection.Interior
        .ThemeColor = xlThemeColorDark2
        .TintAndShade = 0
    End With
    nlc_ppf_pie.Range("N28").Select
    With Selection.Interior
        .ThemeColor = xlThemeColorAccent4
        .TintAndShade = 0
    End With
    nlc_ppf_pie.Range("J30").Select
    With Selection.Interior
        .ThemeColor = xlThemeColorAccent2
        .TintAndShade = 0
    End With
    nlc_ppf_pie.Range("N30").Select
    With Selection.Interior
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0.799981688894314
    End With
    nlc_ppf_pie.Range("J32").Select
    With Selection.Interior
        .ThemeColor = xlThemeColorAccent5
        .TintAndShade = 0.799981688894314
    End With
    nlc_ppf_pie.Range("N32").Select
    With Selection.Interior
        .ThemeColor = xlThemeColorAccent3
        .TintAndShade = 0.799981688894314
    End With
    nlc_ppf_pie.Range("J34").Select
    With Selection.Interior
        .ThemeColor = xlThemeColorAccent1
        .TintAndShade = 0.799981688894314
    End With
    nlc_ppf_pie.Range("N34").Select
    With Selection.Interior
        .ThemeColor = xlThemeColorDark2
        .TintAndShade = 0.799981688894314
    End With
    nlc_ppf_pie.Range("J36").Select
    With Selection.Interior
        .ThemeColor = xlThemeColorAccent4
        .TintAndShade = 0.799981688894314
    End With
    nlc_ppf_pie.Range("N36").Select
    With Selection.Interior
        .ThemeColor = xlThemeColorAccent2
        .TintAndShade = 0.799981688894314
    End With
End Sub

Private Sub Set_PieChart_StandardColor()
    'Wenn nicht alle ChartPoints vorhanden sind einfach |fffd|berspringen...
    On Error Resume Next
    nlc_ppf_pie.ChartObjects("PieChart").Activate
    ActiveChart.SeriesCollection(1).Points(1).Select
    With Selection.Format.Fill
        .ForeColor.ObjectThemeColor = msoThemeColorAccent5
        .ForeColor.Brightness = -0.25
    End With
    ActiveChart.SeriesCollection(1).Points(2).Select
    With Selection.Format.Fill
        .ForeColor.ObjectThemeColor = msoThemeColorAccent3
        .ForeColor.Brightness = -0.25
    End With
    ActiveChart.SeriesCollection(1).Points(3).Select
    With Selection.Format.Fill
        .ForeColor.ObjectThemeColor = msoThemeColorAccent1
        .ForeColor.Brightness = -0.25
    End With
    ActiveChart.SeriesCollection(1).Points(4).Select
    With Selection.Format.Fill
        .ForeColor.ObjectThemeColor = msoThemeColorBackground2
        .ForeColor.Brightness = -0.25
    End With
    ActiveChart.SeriesCollection(1).Points(5).Select
    With Selection.Format.Fill
        .ForeColor.ObjectThemeColor = msoThemeColorAccent4
        .ForeColor.Brightness = -0.25
    End With
    ActiveChart.SeriesCollection(1).Points(6).Select
    With Selection.Format.Fill
        .ForeColor.ObjectThemeColor = msoThemeColorAccent2
        .ForeColor.Brightness = -0.25
    End With
    ActiveChart.SeriesCollection(1).Points(7).Select
    With Selection.Format.Fill
        .ForeColor.ObjectThemeColor = msoThemeColorText1
        .ForeColor.Brightness = 0
    End With
    ActiveChart.SeriesCollection(1).Points(8).Select
    With Selection.Format.Fill
        .ForeColor.ObjectThemeColor = msoThemeColorAccent5
        .ForeColor.Brightness = 0
    End With
    ActiveChart.SeriesCollection(1).Points(9).Select
    With Selection.Format.Fill
        .ForeColor.ObjectThemeColor = msoThemeColorAccent3
        .ForeColor.Brightness = 0
    End With
    ActiveChart.SeriesCollection(1).Points(10).Select
    With Selection.Format.Fill
        .ForeColor.ObjectThemeColor = msoThemeColorAccent1
        .ForeColor.Brightness = 0
    End With
    ActiveChart.SeriesCollection(1).Points(11).Select
    With Selection.Format.Fill
        .ForeColor.ObjectThemeColor = msoThemeColorBackground2
        .ForeColor.Brightness = 0
    End With
    ActiveChart.SeriesCollection(1).Points(12).Select
    With Selection.Format.Fill
        .ForeColor.ObjectThemeColor = msoThemeColorAccent4
        .ForeColor.Brightness = 0
    End With
    ActiveChart.SeriesCollection(1).Points(13).Select
    With Selection.Format.Fill
        .ForeColor.ObjectThemeColor = msoThemeColorAccent2
        .ForeColor.Brightness = 0
    End With
    ActiveChart.SeriesCollection(1).Points(14).Select
    With Selection.Format.Fill
        .ForeColor.ObjectThemeColor = msoThemeColorText1
        .ForeColor.Brightness = 0.8000000119
    End With
    ActiveChart.SeriesCollection(1).Points(15).Select
    With Selection.Format.Fill
        .ForeColor.ObjectThemeColor = msoThemeColorAccent5
        .ForeColor.Brightness = 0.8000000119
    End With
    ActiveChart.SeriesCollection(1).Points(16).Select
    With Selection.Format.Fill
        .ForeColor.ObjectThemeColor = msoThemeColorAccent3
        .ForeColor.Brightness = 0.8000000119
    End With
    ActiveChart.SeriesCollection(1).Points(17).Select
    With Selection.Format.Fill
        .ForeColor.ObjectThemeColor = msoThemeColorAccent1
        .ForeColor.Brightness = 0.8000000119
    End With
    ActiveChart.SeriesCollection(1).Points(18).Select
    With Selection.Format.Fill
        .ForeColor.ObjectThemeColor = msoThemeColorBackground2
        .ForeColor.Brightness = 0.8000000119
    End With
    ActiveChart.SeriesCollection(1).Points(19).Select
    With Selection.Format.Fill
        .ForeColor.ObjectThemeColor = msoThemeColorAccent4
        .ForeColor.Brightness = 0.8000000119
    End With
    ActiveChart.SeriesCollection(1).Points(20).Select
    With Selection.Format.Fill
        .ForeColor.ObjectThemeColor = msoThemeColorAccent2
        .ForeColor.Brightness = 0.8000000119
    End With
End Sub

Attribute VB_Name = "nlc_pipeline"
Option Explicit
Option Private Module

'Es wird 3 Hauptroutinen geben; 1.) Maske holt Filter und Einstellungen; 2.) Werte aus Maske werden in Datentabelle geladen; 3.) Portfolio wird generiert

Public Sub generate_portfolio()
    Dim XAchseArt As String, YAchseArt As String
    Dim XAchseMax As Integer, YAchseMax As Integer
    Dim XAchseMin As Integer, YAchseMin As Integer
    
    Dim X_ID_Value As String
    Dim Y_ID_Value As String
    Dim X_Shortname As Boolean
    Dim Y_Shortname As Boolean
    Dim Color_ID As String
    Dim Groesse_ID_Value As String
    Dim Background_ID As Integer
    Dim Pj_Shortname As Boolean
    Dim SizeScale As String
    Dim TemplateID As String
    Dim FarbeArt As String
    Dim GroesseArt As String
    Dim einheit As String
    
    Dim Rs As Object
    Dim i As Integer
    Dim filter_id As String
    Dim pj_ids As String
        
    'Tabelle generieren
    'On Error GoTo ende:
    nlc_intern.Application_off
    nlc_ppf_pipe.Unprotect (nlc_intern.get_pw)
    
    filter_id = SQL_Abfragen.Get_Setting_Pipe_Value(calc_master.Range("last_pipe_ID").value, "FK_Filter")
    pj_ids = nlc_filter.get_Filter(filter_id)
    
    'vorbereiten
    TemplateID = calc_master.Range("last_pipe_ID").value
    nlc_ppf_pipe.Select
    nlc_ppf_pipe.Rows("57:60").Hidden = True
    nlc_ppf_pipe.Range("O10").value = ""
    'farben l|fffd|schen
    nlc_ppf_pipe.Range("O16:O54").Interior.ColorIndex = xlNone
    nlc_ppf_pipe.Range("O14:Q54").ClearContents
    'x-y legende l|fffd|schen
    nlc_ppf_pipe.Range("E57:E60").value = ""
    
    'Alle Werte vom letzten Template laden um nur einmal auf die DB zugreiffen zu m|fffd|ssen
    'wird in Funktion Get_PipeCalc |fffd|berschrieben, daher werte vorher zwischenspeichern!!!
    If SQL_Abfragen.Get_AllFromWhere("DB_Settings_Pipeline", "ID=" & TemplateID) = False Then Exit Sub
    
    
    XAchseMax = 0
    YAchseMax = 0
    XAchseMin = -2
    YAchseMin = -2
    
    Pj_Shortname = Class_Functions.DB.Recordset!Bubbles_Shortname
    XAchseArt = Class_Functions.DB.Recordset!X_Art
    YAchseArt = Class_Functions.DB.Recordset!Y_Art
    X_ID_Value = Class_Functions.DB.Recordset!X_ID_Value
    Y_ID_Value = Class_Functions.DB.Recordset!Y_ID_Value
    X_Shortname = Class_Functions.DB.Recordset!X_Shortname
    Y_Shortname = Class_Functions.DB.Recordset!Y_Shortname
    Groesse_ID_Value = Class_Functions.DB.Recordset!Size_ID_Value
    GroesseArt = Class_Functions.DB.Recordset!Size_Art
    SizeScale = Class_Functions.DB.Recordset!Size_Scale
    FarbeArt = Class_Functions.DB.Recordset!Color_Art
    Color_ID = Class_Functions.DB.Recordset!Color_ID
    Background_ID = Class_Functions.DB.Recordset!Background
    
    Call SQL_Abfragen.Get_PipeCalc(pj_ids)
    
'X & Y Achse beschriften
    On Error Resume Next
    If XAchseArt = "Stapel" Or XAchseArt = "DropDown" Or XAchseArt = "True/False" Then XAchseMin = 0
    If YAchseArt = "Stapel" Or YAchseArt = "DropDown" Or YAchseArt = "True/False" Then YAchseMin = 0

    If XAchseArt = "True/False" Then
        XAchseMax = 3
        nlc_ppf_pipe.Rows("57:58").Hidden = False
        nlc_ppf_pipe.Cells(58, 5).value = SQL_Abfragen.Get_XYAchse(X_ID_Value, X_Shortname)
    End If
    If YAchseArt = "True/False" Then
        YAchseMax = 3
        nlc_ppf_pipe.Rows("59:60").Hidden = False
        nlc_ppf_pipe.Cells(60, 5).value = SQL_Abfragen.Get_XYAchse(Y_ID_Value, Y_Shortname)
    End If

    If XAchseArt = "DropDown" Then
        nlc_ppf_pipe.Range("G62").Calculate
        
        nlc_ppf_pipe.Rows("57:58").Hidden = False
        nlc_ppf_pipe.Cells(58, 5).value = SQL_Abfragen.Get_XYAchse(X_ID_Value, X_Shortname)
        XAchseMax = UBound(Split(nlc_ppf_pipe.Range("E58").value, "   ")) + 2
    End If
    If YAchseArt = "DropDown" Then
        nlc_ppf_pipe.Range("I62").Calculate
        nlc_ppf_pipe.Rows("59:60").Hidden = False
        nlc_ppf_pipe.Cells(60, 5).value = SQL_Abfragen.Get_XYAchse(Y_ID_Value, Y_Shortname)
        YAchseMax = UBound(Split(nlc_ppf_pipe.Range("E60").value, "   ")) + 2
    End If

    '0 Werte erg|fffd|nzen?
    If XAchseArt = "Stapel" Then
        XAchseMax = berechne_autowerte(7, 9) + 1
    ElseIf YAchseArt = "Stapel" Then
        YAchseMax = berechne_autowerte(9, 7) + 1
    End If

'Achsenbeschriftung
    Select Case XAchseArt
        Case "DropDown", "True/False", "Date"
            nlc_ppf_pipe.Range("D56").value = SQL_Abfragen.Get_KatName(X_ID_Value, X_Shortname)
            nlc_ppf_pipe.Range("pfXAchseValue").Cells(1, 1).FormulaR1C1 = "=VLOOKUP(""SValue_xAchses"",LanguageMatrix,LangCol,FALSE)"
        Case "Number"
            einheit = SQL_Abfragen.getKatEinheit(X_ID_Value)
            
            If einheit <> "" Then
                nlc_ppf_pipe.Range("pfXAchseValue").Cells(1, 1).FormulaR1C1 = "=VLOOKUP(""SValue_xAchses"",LanguageMatrix,LangCol,FALSE) & "" (in " & einheit & ")"""
                nlc_ppf_pipe.Range("D56").value = SQL_Abfragen.Get_KatName(X_ID_Value, X_Shortname) & " (in " & einheit & ")"
            Else
                nlc_ppf_pipe.Range("pfXAchseValue").Cells(1, 1).FormulaR1C1 = "=VLOOKUP(""SValue_xAchses"",LanguageMatrix,LangCol,FALSE)"
                nlc_ppf_pipe.Range("D56").value = SQL_Abfragen.Get_KatName(X_ID_Value, X_Shortname)
            End If
        Case "Stapel"
            nlc_ppf_pipe.Range("D56").value = XAchseArt
            nlc_ppf_pipe.Range("pfYAchseValue").Cells(1, 1).FormulaR1C1 = "=VLOOKUP(""SValue_yAchses"",LanguageMatrix,LangCol,FALSE)"
        Case Else
            If XAchseArt = "Kosten" Then
                einheit = Application.WorksheetFunction.VLookup(calc_master.Range("Cost_Einheit").value, calc_frm_masterdata.Range("frm_Einheit"), 2, False)
            ElseIf XAchseArt = "Ressourcen" Then
                einheit = Application.WorksheetFunction.VLookup(calc_master.Range("Ress_Einheit").value, calc_frm_masterdata.Range("frm_Einheit"), 2, False)
            End If
            
            nlc_ppf_pipe.Range("D56").value = XAchseArt & " - " & X_ID_Value & " (in " & einheit & ")"
            nlc_ppf_pipe.Range("pfYAchseValue").Cells(1, 1).FormulaR1C1 = "=VLOOKUP(""SValue_yAchses"",LanguageMatrix,LangCol,FALSE) & "" (in " & einheit & ")"""
    End Select
    einheit = ""
    
    Select Case YAchseArt
        Case "DropDown", "True/False", "Date"
            nlc_ppf_pipe.Range("C6").value = SQL_Abfragen.Get_KatName(Y_ID_Value, Y_Shortname)
            nlc_ppf_pipe.Range("pfYAchseValue").Cells(1, 1).FormulaR1C1 = "=VLOOKUP(""SValue_yAchses"",LanguageMatrix,LangCol,FALSE)"
         Case "Number"
            einheit = SQL_Abfragen.getKatEinheit(Y_ID_Value)
            
            If einheit <> "" Then
                nlc_ppf_pipe.Range("pfYAchseValue").Cells(1, 1).FormulaR1C1 = "=VLOOKUP(""SValue_yAchses"",LanguageMatrix,LangCol,FALSE) & "" (in " & einheit & ")"""
                nlc_ppf_pipe.Range("C6").value = SQL_Abfragen.Get_KatName(Y_ID_Value, Y_Shortname) & " (in " & einheit & ")"
            Else
                nlc_ppf_pipe.Range("pfYAchseValue").Cells(1, 1).FormulaR1C1 = "=VLOOKUP(""SValue_yAchses"",LanguageMatrix,LangCol,FALSE)"
                nlc_ppf_pipe.Range("C6").value = SQL_Abfragen.Get_KatName(Y_ID_Value, Y_Shortname)
            End If
        Case "Stapel"
            nlc_ppf_pipe.Range("C6").value = YAchseArt
            nlc_ppf_pipe.Range("pfYAchseValue").Cells(1, 1).FormulaR1C1 = "=VLOOKUP(""SValue_yAchses"",LanguageMatrix,LangCol,FALSE)"
        Case Else
            If YAchseArt = "Kosten" Then
                einheit = Application.WorksheetFunction.VLookup(calc_master.Range("Cost_Einheit").value, calc_frm_masterdata.Range("frm_Einheit"), 2, False)
            ElseIf YAchseArt = "Ressourcen" Then
                einheit = Application.WorksheetFunction.VLookup(calc_master.Range("Ress_Einheit").value, calc_frm_masterdata.Range("frm_Einheit"), 2, False)
            End If
            
            nlc_ppf_pipe.Range("C6").value = YAchseArt & " - " & Y_ID_Value & " (in " & einheit & ")"
            nlc_ppf_pipe.Range("pfYAchseValue").Cells(1, 1).FormulaR1C1 = "=VLOOKUP(""SValue_yAchses"",LanguageMatrix,LangCol,FALSE) & "" (in " & einheit & ")"""
    End Select
    einheit = ""
    
'Farbe
    Call clear_Farben
    If FarbeArt <> "einheitlich" Then Call SQL_Abfragen.Get_Farben(Color_ID)
    
    Select Case FarbeArt
        Case "DropDown", "True/False"
            nlc_ppf_pipe.Range("O14").value = SQL_Abfragen.Get_KatName(Color_ID, False) 'True)
        Case Else
            nlc_ppf_pipe.Range("O14").value = FarbeArt
            
            i = 64
            While nlc_ppf_pipe.Cells(i, 3).value <> ""
                nlc_ppf_pipe.Cells(i, 13).value = ""
                i = i + 1
            Wend
    End Select
    einheit = ""
    
'Gr|fffd||fffd|e
    Select Case GroesseArt
        Case "Number"
            nlc_ppf_pipe.Range("O10").value = SQL_Abfragen.Get_KatName(Groesse_ID_Value, False) 'True)
            einheit = SQL_Abfragen.getKatEinheit(Groesse_ID_Value)
            
            If einheit <> "" Then
                nlc_ppf_pipe.Range("pfSizeValue").Cells(1, 1).FormulaR1C1 = "=VLOOKUP(""SValue_size"",LanguageMatrix,LangCol,FALSE) & "" (in " & einheit & ")"""
            Else
                nlc_ppf_pipe.Range("pfSizeValue").Cells(1, 1).FormulaR1C1 = "=VLOOKUP(""SValue_size"",LanguageMatrix,LangCol,FALSE)"
            End If
        Case "einheitlich"
            nlc_ppf_pipe.Range("O10").value = GroesseArt
            nlc_ppf_pipe.Range("pfSizeValue").Cells(1, 1).FormulaR1C1 = "=VLOOKUP(""SValue_size"",LanguageMatrix,LangCol,FALSE)"
        Case Else
            If GroesseArt = "Kosten" Then
                einheit = Application.WorksheetFunction.VLookup(calc_master.Range("Cost_Einheit").value, calc_frm_masterdata.Range("frm_Einheit"), 2, False)
            ElseIf GroesseArt = "Ressourcen" Then
                einheit = Application.WorksheetFunction.VLookup(calc_master.Range("Ress_Einheit").value, calc_frm_masterdata.Range("frm_Einheit"), 2, False)
            End If
            
            'nlc_ppf_pipe.range("O10").value = GroesseArt & einheit & " - " & Groesse_ID_Value
            nlc_ppf_pipe.Range("O10").value = GroesseArt & " - " & Groesse_ID_Value
            nlc_ppf_pipe.Range("pfSizeValue").Cells(1, 1).FormulaR1C1 = "=VLOOKUP(""SValue_size"",LanguageMatrix,LangCol,FALSE) & "" (in " & einheit & ")"""
    End Select
    
    nlc_ppf_pipe.ChartObjects("PortfolioChart").Chart.ChartGroups(1).BubbleScale = VBA.CInt(SizeScale)
    einheit = ""

    'Achsen Formatieren
    Call achsen_formatieren(XAchseMax, XAchseMin, XAchseArt, YAchseMax, YAchseMin, YAchseArt)
    
    nlc_ppf_pipe.Calculate

    'Male Bubbles
    Call UpdateChart(Pj_Shortname)
    
    Call Set_BackgroundImage(Background_ID)
    
    nlc_ppf_pipe.Select
    For i = 64 To 163
        If nlc_ppf_pipe.Cells(i, 1).value = "" Then Exit For
    Next i
    
Ende:
    If nlc_ppf_pipe.Cells(58, 5).value <> "" Then nlc_ppf_pipe.Rows("58:58").EntireRow.AutoFit
    If nlc_ppf_pipe.Cells(60, 5).value <> "" Then nlc_ppf_pipe.Rows("60:60").EntireRow.AutoFit
    
    nlc_ppf_pipe.Protect (nlc_intern.get_pw)
    nlc_intern.Application_on
End Sub

Private Sub clear_Farben()
    Dim counter As Integer
    
    For counter = 16 To 54 Step 2
        nlc_ppf_pipe.Cells(counter, 17).Interior.Pattern = xlNone
    Next counter
End Sub


Private Sub UpdateChart(short As Boolean)
    Dim i As Integer
    Dim j As Integer
    Dim startzeile As Integer
    Dim endzeile As Integer
       
    With nlc_ppf_pipe.ChartObjects("PortfolioChart").Chart
        For i = .SeriesCollection.count To 2 Step -1
            .SeriesCollection(i).delete
        Next
        
        startzeile = 64
        endzeile = nlc_ppf_pipe.Cells(62, 3).value
        
        If endzeile < startzeile Then endzeile = startzeile
        
        j = 0
        i = startzeile
        
        If startzeile <= endzeile Then
            'Call FormatSeries(j, i)
            
            For i = startzeile To endzeile
                If nlc_ppf_pipe.Cells(i, 3).value <> "" And (nlc_ppf_pipe.Cells(i, 7).value <> "" And nlc_ppf_pipe.Cells(i, 9).value <> "") Then
                    If j > 0 Then
                        .SeriesCollection.NewSeries
                    End If
                    j = j + 1
                    Call FormatSeries(j, i, short)
                End If
            Next
        End If
    End With

End Sub


Private Sub FormatSeries(j, i, short As Boolean)

    Dim Rs As Object
    
    With nlc_ppf_pipe.ChartObjects("PortfolioChart").Chart
        With .SeriesCollection(j)
            .ApplyDataLabels
            If short = True Then
                .name = nlc_ppf_pipe.Cells(i, 4).value
            Else
                .name = nlc_ppf_pipe.Cells(i, 5).value
            End If
            If nlc_ppf_pipe.Cells(i, 7).value = 1 Then 'X-Achse
                .XValues = 1
            Else
                .XValues = VBA.CDbl(IIf(nlc_ppf_pipe.Cells(i, 7).value = "", 0, nlc_ppf_pipe.Cells(i, 7).value))
            End If
            
            If nlc_ppf_pipe.Cells(i, 9).value = 1 Then 'Y-Achse
                .values = 1
            Else
                .values = VBA.CDbl(IIf(nlc_ppf_pipe.Cells(i, 9).value = "", 0, nlc_ppf_pipe.Cells(i, 9).value))
            End If
            
            If nlc_ppf_pipe.Cells(i, 11).value = 1 Then 'Gr|fffd||fffd|e
                .BubbleSizes = "={1}"
            Else
                .BubbleSizes = "={" & VBA.CDbl(IIf(nlc_ppf_pipe.Cells(i, 11).value = "", 0.01, nlc_ppf_pipe.Cells(i, 11).value)) & "}"
            End If
            
            If nlc_ppf_pipe.Cells(i, 13).value <> "" Then
                .Border.ColorIndex = IIf(WorksheetFunction.VLookup(calc_master.Range("farben_gesamt").Cells(nlc_ppf_pipe.Cells(i, 13).value, 1).value, calc_master.Range("farben_gesamt"), 2, False) = "w", 2, 1)
                .DataLabels.Font.ColorIndex = 1 'IIf(WorksheetFunction.VLookup(calc_master.Range("farben_gesamt").Cells(nlc_ppf_pipe.Cells(i, 13).value, 1).value, calc_master.Range("farben_gesamt"), 2, False) = "w", 56, 1)
                
                .DataLabels.Format.Fill.ForeColor.ObjectThemeColor = msoThemeColorBackground1
                .DataLabels.Format.Fill.Transparency = 0.25
                .DataLabels.Format.line.visible = msoFalse
                
                .Interior.ColorIndex = calc_master.Range("farben_gesamt").Cells(nlc_ppf_pipe.Cells(i, 13).value, 1).value
            Else
                With .Format.Fill
                    .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                    .ForeColor.Brightness = 0
                End With
                With .Format.line
                    .ForeColor.ObjectThemeColor = msoThemeColorBackground2
                    .ForeColor.Brightness = 0
                End With
            End If
            .Border.Weight = xlThin
            .Border.LineStyle = xlContinuous
            .Has3DEffect = True
           ' .Interior.PatternColorIndex = calc_pipe_tab.Cells(i, 11).Value '
            .Interior.Pattern = xlSolid
            .ApplyDataLabels ShowSeriesName:=True ', AutoText:=True, LegendKey:= False, ShowCategoryName:=False, ShowValue:=False, ShowPercentage:=False, ShowBubbleSize:=False
            .DataLabels.HorizontalAlignment = xlCenter
            .DataLabels.Position = xlLabelPositionCenter
            .DataLabels.ShowValue = False
'           .DataLabels.Font.Background = xlTransparent
            .Format.line.visible = msoFalse
        End With
    End With
End Sub


Private Function berechne_autowerte(autospalte As Integer, calcspalte As Integer) As Integer 'r|fffd|ckgabewert achsemax

    Dim AutoWert(10) As Integer
    Dim AchseMax As Integer 'Gr|fffd||fffd|te Zahl der Achse
    Dim RWMin As Integer 'Reichweite Minimum
    Dim RWMax As Integer 'Reichweite Maximum
    Dim Bereich As String
    Dim teiler
    Dim level As Integer
    Dim autozahl As Integer
    
    If autospalte <> 0 And calcspalte <> 0 Then

        AchseMax = 1
        RWMin = 0
        RWMax = 1
        
        If Application.WorksheetFunction.min(nlc_ppf_pipe.Range(nlc_ppf_pipe.Cells(64, calcspalte), nlc_ppf_pipe.Cells(1063, calcspalte))) < RWMin Then RWMin = Application.WorksheetFunction.min(nlc_ppf_pipe.Range(nlc_ppf_pipe.Cells(64, calcspalte), nlc_ppf_pipe.Cells(1063, calcspalte)))
        If Application.WorksheetFunction.MAX(nlc_ppf_pipe.Range(nlc_ppf_pipe.Cells(64, calcspalte), nlc_ppf_pipe.Cells(1063, calcspalte))) > RWMax Then RWMax = Application.WorksheetFunction.MAX(nlc_ppf_pipe.Range(nlc_ppf_pipe.Cells(64, calcspalte), nlc_ppf_pipe.Cells(1063, calcspalte)))
    
        teiler = (RWMax - RWMin) / 10
        For level = 64 To 1063
            If nlc_ppf_pipe.Cells(level, 4).value = "" And nlc_ppf_pipe.Cells(level, 5).value = "" Then GoTo Ende
            autozahl = nlc_ppf_pipe.Cells(level, calcspalte).value
            If autozahl <> 0 Then
                autozahl = Excel.WorksheetFunction.RoundDown(autozahl / teiler, 0)
                AutoWert(autozahl) = AutoWert(autozahl) + 1
                nlc_ppf_pipe.Cells(level, autospalte).value = AutoWert(autozahl)
                If AchseMax < AutoWert(autozahl) Then AchseMax = AutoWert(autozahl)
            End If
        Next level
        AchseMax = AchseMax + 1
        
    End If
Ende:
    berechne_autowerte = AchseMax

End Function

Private Sub achsen_formatieren(XAMax As Integer, XAMin As Integer, XAKat As String, YAMax As Integer, YAMin As Integer, YAKat As String)
    nlc_ppf_pipe.ChartObjects("PortfolioChart").Activate
           
    ' X-Achse anpassen
    With ActiveChart.Axes(xlCategory)
        .MinimumScaleIsAuto = True
        .MaximumScaleIsAuto = True
        .MinorUnitIsAuto = True
        .MajorUnitIsAuto = True
        .Crosses = xlAutomatic
        .ReversePlotOrder = False
        If XAMax > 0 Then
            .MaximumScale = XAMax
        End If
        If XAMin <> -2 Then
            .MinimumScale = XAMin
            .Crosses = xlCustom
            .CrossesAt = 0
        End If
        If XAMin > -2 And XAMax > 0 And XAMax < 25 Then
            .MinorUnit = 1
            .MajorUnit = 1
        End If
        .ReversePlotOrder = False 'neu
        .TickLabelPosition = xlLow 'neu
'        If XAKat <> "True/False" And XAKat <> "Dropdown" Then
'            .ReversePlotOrder = False
'            If YAKat <> "True/False" And YAKat <> "Dropdown" Then
'                .TickLabelPosition = xlLow
'            Else
'                .TickLabelPosition = xlHigh
'            End If
'        ElseIf XAKat = "True/False" Or XAKat = "Dropdown" Then
'            .ReversePlotOrder = True
'            If YAKat <> "True/False" And YAKat <> "Dropdown" Then
'                .TickLabelPosition = xlHigh
'            Else
'                .TickLabelPosition = xlLow
'            End If
'        End If
    End With
    
    ' Y-Achse anpassen
    With ActiveChart.Axes(xlValue)
        .MinimumScaleIsAuto = True
        .MaximumScaleIsAuto = True
        .MinorUnitIsAuto = True
        .MajorUnitIsAuto = True
        .Crosses = xlAutomatic
        .ReversePlotOrder = False
        If YAMax > 0 Then
            .MaximumScale = YAMax
        End If
        If YAMin <> -2 Then
            .MinimumScale = YAMin
            .Crosses = xlCustom
            .CrossesAt = 0
        End If
        If YAMin > -2 And YAMax > 0 And YAMax < 25 Then
            .MinorUnit = 1
            .MajorUnit = 1
        End If
'        If YAKat <> "True/False" And YAKat <> "Dropdown" Then
'            .ReversePlotOrder = False
'            .TickLabelPosition = xlLow
'
'        ElseIf YAKat = "True/False" Or YAKat = "Dropdown" Then
'            .ReversePlotOrder = True
'            .TickLabelPosition = xlLow
'          End If
    End With
End Sub

Private Sub Set_BackgroundImage(image_id As Integer)
    If calc_master.Cells(8, 15 + image_id - 1).value = "Grafiken" Then
        With nlc_ppf_pipe.ChartObjects("PortfolioChart").Chart
            .PlotArea.Fill.visible = False
        End With
    Else
        With nlc_ppf_pipe.ChartObjects("PortfolioChart").Chart
            .PlotArea.Fill.visible = False
    
            With .PlotArea.Format.Fill
                .visible = msoTrue
                .UserPicture (ActiveWorkbook.Path & "\Hintergrundgrafiken\" & calc_master.Cells(8, 15 + image_id - 1).value)
                .TextureTile = msoFalse
            End With
            
            .PlotArea.Fill.visible = True
        End With
    End If
End Sub



Attribute VB_Name = "nlc_ppf_Gantt"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

'Public Sub gantt_options_Click()
'    Call nlc_Gantt.gantt_optionsClick
'End Sub

Public Sub refresh_Click()
    If check_userrights = False Then Exit Sub
    
    nlc_intern.Application_off
    nlc_ppf_Gantt.Unprotect nlc_intern.get_pw
    
    nlc_Gantt.generate_Gantt
    
    nlc_ppf_Gantt.Protect nlc_intern.get_pw
    nlc_intern.Application_on
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    If check_userrights = False Then Exit Sub
    
    If nls_Database.DbRequired Then
        Call nlc_Gantt.Gantt_doubleClick(Target)
    End If
End Sub
Attribute VB_Name = "nlc_ppf_PJTabelle"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit


Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    If check_userrights = False Then Exit Sub
    
    If nls_Database.DbRequired Then
        Call nlc_PJTabelle.CellDoubleClick(Target)
    End If
    Cancel = True
End Sub

Public Sub btn_bigger_click()
    If check_userrights = False Then Exit Sub
    
    If nls_Database.DbRequired Then
        Call nlc_PJTabelle.btn_bigger
    End If
End Sub

Public Sub btn_smaler_click()
    If check_userrights = False Then Exit Sub
    
    If nls_Database.DbRequired Then
        Call nlc_PJTabelle.btn_smaler
    End If
End Sub

Public Sub Export_Click()
    
    'fehler = seperate_worksheet(ActiveSheet.name, "", "", ActiveSheet.CodeName)
    
    Call nlc_PJLstExp.blatt_exportieren(ActiveSheet.CodeName, ActiveSheet.name)
End Sub
Attribute VB_Name = "nlc_ppf_bar"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub btn_bar_aktualisieren_Click()
    If check_userrights = False Then Exit Sub
    
    If nls_Database.DbRequired Then
        Call nlc_barchart.generate_barchart
    End If
End Sub
Attribute VB_Name = "nlc_ppf_costhisto"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub btn_chg_aktualisieren_Click()
    If check_userrights = False Then Exit Sub
    
    Call nlc_ress_cost_histo.generate_chg
End Sub
Attribute VB_Name = "nlc_ppf_matrix"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub btn_matrix_aktualisieren_Click()
    If check_userrights = False Then Exit Sub
    
    If nls_Database.DbRequired Then
        Call nlc_matrix.generate_matrix
    End If
End Sub
Attribute VB_Name = "nlc_ppf_nav"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "nlc_ppf_pie"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub btn_pie_aktualisieren_Click()
    If check_userrights = False Then Exit Sub
    
    If nls_Database.DbRequired Then
        Call nlc_piechart.generate_piechart
    End If
End Sub
Attribute VB_Name = "nlc_ppf_pipe"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub btn_ppf_aktualisieren_Click()
    If check_userrights = False Then Exit Sub
    
    If nls_Database.DbRequired Then
        Call nlc_pipeline.generate_portfolio
    End If
End Sub
Attribute VB_Name = "nlc_ppf_resshisto"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub btn_rhg_aktualisieren_Click()
    If check_userrights = False Then Exit Sub
    
    If nls_Database.DbRequired Then
        Call nlc_ress_cost_histo.generate_rhg
    End If
End Sub

Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    Dim Jahr As String
    
    If Target.row >= 57 And Target.row <= 76 Then
        Select Case (Target.Column)
            Case 6 To 8:
                Jahr = nlc_ppf_resshisto.Cells(55, 6).value
            Case 9 To 20:
                Jahr = nlc_ppf_resshisto.Cells(55, 9).value
            Case 21 To 23:
                Jahr = nlc_ppf_resshisto.Cells(55, 21).value
            Case Else:
                Exit Sub
        End Select
    
        If check_userrights = False Then Exit Sub
    
        If nls_Database.DbRequired Then
            Call SQL_Abfragen.get_PjRessList(nlc_ppf_resshisto.Cells(56, Target.Column).value, Jahr, nlc_ppf_resshisto.Cells(Target.row, 4).value)
            
            frm_pj_resslist.Show
            nlc_ppf_resshisto.Cells(Target.row, 4).Activate
        End If
    End If
End Sub

Attribute VB_Name = "nlc_ppf_viewer"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Option Explicit

Public Sub btn_pviewer_aktualisieren_Click()
    If check_userrights = False Then Exit Sub
    
    Call nlc_PViewer.refresh_PJList
End Sub

Public Sub btn_pviewer_LoadProject_Click()
    If check_userrights = False Then Exit Sub
    
    Call nlc_PViewer.PViewer_LoadProject
End Sub
Attribute VB_Name = "nlc_ppf_xl"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Workbook_BeforeClose(Cancel As Boolean)
    Call Class_Functions.DB.StopTimer
End Sub

Private Sub Workbook_Open()
    'Wenn anderer WinLogin, dann neuen Timestamp
'    If calc_master.range("WindowsLogin") <> Environ("Username") Then
'        calc_master.Cells(28, 6).value = VBA.CLng(VBA.Now) & VBA.Hour(VBA.Now) & VBA.Minute(VBA.Now) & VBA.Second(VBA.Now)
'        calc_master.range("WindowsLogin").value = Environ("Username")
'    End If
    
    calc_master.Cells(28, 6).value = VBA.CLng(VBA.Now) & VBA.Hour(VBA.Now) & VBA.Minute(VBA.Now) & VBA.Second(VBA.Now)
    calc_master.Range("WindowsLogin").value = "user"
    
    nls_Database.wbopen = True
    If LoadFromSQL Then
        frm_StartWindow.Show
    End If
    nls_Database.wbopen = False
End Sub

Public Function LoadFromSQL() As Boolean
    If nls_Database.DbRequired = False Then
        LoadFromSQL = False
        Exit Function
    Else
        LoadFromSQL = True
    End If
    
    
    Call SQL_Abfragen.Get_User_PFType_DropDown(calc_master.Cells(31, 6).value)
    Call SQL_Abfragen.Get_pf_general_settings
    
    'Sprache
    Call SQL_Abfragen.Get_Language_List
    
    'Call DB.Set_SQLSettings("SQLOLEDB.1", "10.1.1.243\SQLEXPRESS", "projektportfolio", "sa", "soul2gether!")
End Function
Attribute VB_Name = "nlc_readini"
Option Explicit
 
Public Function GetDbConnectionString() As String
    Dim sfile As Variant
    Dim input_text As String
    
    If calc_master.Cells(12, 16).value = "" Then
select_file:
        On Error GoTo Error_File
        sfile = Application.GetOpenFilename("(*.ini), *.ini", , nlc_Language_Msgs("msg_ini_select_file"))
        If sfile = False Then
            MsgBox nlc_Language_Msgs("msg_ini_nofileselected"), Title:="ERROR"
            GoTo Ende
        End If
        
        calc_master.Cells(12, 16).value = sfile
    End If
    
    sfile = calc_master.Cells(12, 16).value
On Error GoTo select_file
    Open sfile For Input As #1
    
On Error GoTo Error_File
    If Not EOF(1) Then
        Line Input #1, input_text
        GetDbConnectionString = input_text
    Else
        GoTo Error_File
    End If
    
    GoTo Ende
    
Error_File:
    MsgBox nlc_Language_Msgs("msg_ini_open_error"), Title:="ERROR"
    GetDbConnectionString = ""
    
Ende:
    On Error Resume Next
    Close #1
End Function
Attribute VB_Name = "nlc_ress_cost_histo"
Option Explicit
Option Private Module

Public Sub generate_rhg()
    If check_userrights = False Then Exit Sub
    
    nlc_intern.Application_off
    nlc_ppf_resshisto.Unprotect nlc_intern.get_pw
    
    nlc_ppf_resshisto.Activate
    Call SQL_Abfragen.Get_RessHisto_Calc(calc_master.Range("last_rhg_ID").value)
    
    nlc_ppf_resshisto.Protect nlc_intern.get_pw
    nlc_intern.Application_on
End Sub
    
Public Sub generate_chg()
    If check_userrights = False Then Exit Sub
    
    nlc_intern.Application_off
    nlc_ppf_costhisto.Unprotect nlc_intern.get_pw
    
    nlc_ppf_costhisto.Activate
    Call SQL_Abfragen.Get_CostHisto_Calc(calc_master.Range("last_chg_ID").value)
    
    nlc_ppf_costhisto.Protect nlc_intern.get_pw
    nlc_intern.Application_on
End Sub
Attribute VB_Name = "nlc_sapimport"
Option Explicit
Option Private Module

Public Sub SAPImport()
Dim sfile As Variant
Dim eCon As Object
Dim eRs As Object
Dim edRs As Object
Dim rcCount As Integer
Dim rcCountP As Integer
Dim FullPSP As String
Dim x As Integer


Dim iPsp As Integer
Dim PartPsp() As String
Dim ProjektId As Integer
Dim tJahr As Integer

Dim IstILV As Double
Dim IstExtAufw As Double
Dim IstInvest As Double

Dim PlanILV As Double
Dim PlanExtAufw As Double
Dim PlanInvest As Double

Dim FC1ILV As Double
Dim FC1ExtAufw As Double
Dim FC1Invest As Double

Dim FC2ILV As Double
Dim FC2ExtAufw As Double
Dim FC2Invest As Double

Dim ObligoExtAufwBrutto As Double
Dim ObligoInvestBrutto As Double

Dim LastAkt As Double

Dim IntID As String
Dim AufwID As String
Dim InvID As String

Dim IntNewKostID As String
Dim AufwNewKostID As String
Dim InvNewKostID As String

            
On Error GoTo Fehler

    Dim str As String
    sfile = Application.GetOpenFilename("(*.xls*), *.xls*", , "W|fffd|hlen Sie das Importfile aus!")
    
    If sfile = False Then
        Call ErrorHandler.HandleMessage(nlsInfo, "Keine Datei ausgew|fffd|hlt. Aktion abgebrochen!", , True)
        Exit Sub
    End If

    'Excel Connection
    Set eCon = CreateObject("ADODB.Connection")
    eCon.Provider = "Microsoft.ACE.OLEDB.12.0;Data Source=" & sfile & ";Extended Properties=Excel 12.0;"
    eCon.Open
    
    
    
    'Die Kosten auf 0 setzen
    If SetKosten20() = False Then
        GoTo Fehler
    End If
    
    'Das Jahr abfragen im Excelsheet
    Set edRs = CreateObject("ADODB.Recordset")
    edRs.Open "select * from [Tabelle1]", eCon

    If edRs.State = 1 Then ' successfully opened the recordset
        
        If Len(Nz(edRs!datum)) = 4 Then
            tJahr = edRs!datum
        Else
            tJahr = VBA.Year(edRs!datum)
        End If
        
        If DelYearVerteilung(tJahr) = False Then

        End If
    End If

    edRs.Close
                
   
    'Aktive Projekte mit Eintrag im PSP Element aus der DB lesen
    rcCountP = Class_Functions.DB.Create_NewRecordset
    If Class_Functions.DB.Select_Statement("Select  wert as 'pspElement', db_projekte.id from db_Projekte left join db_kategoriewerte on db_Projekte.id = db_kategoriewerte.fk_projekte where db_Projekte.active = 1 and db_kategoriewerte.FK_Kategorie = 120 And db_kategoriewerte.wert <> ''", rcCountP) = False Then
        Call ErrorHandler.HandleMessage(nlserror, "Fehler beim lesen der Datenbank. Import abgebrochen!", , True)
    End If
    
 
    While Not Class_Functions.DB.Recordset(rcCountP).EOF
        FullPSP = Class_Functions.DB.Recordset(rcCountP)!pspElement
        ProjektId = Class_Functions.DB.Recordset(rcCountP)!ID
        If FullPSP <> "" Then
            
            
            
            IstILV = 0
            IstExtAufw = 0
            IstInvest = 0
            
            PlanILV = 0
            PlanExtAufw = 0
            PlanInvest = 0
            
            FC1ILV = 0
            FC1ExtAufw = 0
            FC1Invest = 0
            
            FC2ILV = 0
            FC2ExtAufw = 0
            FC2Invest = 0
                                
            
            PartPsp = VBA.Split(FullPSP, ",")
            'F|fffd|r jeses gefundene PSP Element eine Abfrage in Excel ausf|fffd|hren
            For x = 0 To UBound(PartPsp)
                Set eRs = CreateObject("ADODB.Recordset")
                eRs.Open "select * from [Tabelle1] where PSPElement like '" & PartPsp(x) & "'", eCon
                If Not eRs.EOF Then
                    'If eRs.State = 1 Then ' successfully opened the recordset
                        
                        If tJahr = 0 Then tJahr = eRs!datum
                        
                        IstILV = IstILV + Nz0(eRs!IstILV)
                        IstExtAufw = IstExtAufw + Nz0(eRs!IstExtAufw) + Nz0(ObligoExtAufwBrutto)
                        IstInvest = IstInvest + Nz0(eRs!IstInvest) + Nz0(ObligoInvestBrutto)
                        
                        PlanILV = PlanILV + Nz0(eRs!PlanILV)
                        PlanExtAufw = PlanExtAufw + Nz0(eRs!PlanExtAufw)
                        PlanInvest = PlanInvest + Nz0(eRs!PlanInvest)
                        
                        FC1ILV = FC1ILV + Nz0(eRs!FC1ILV)
                        FC1ExtAufw = FC1ExtAufw + Nz0(eRs!FC1ExtAufw)
                        FC1Invest = FC1Invest + Nz0(eRs!FC1Invest)
                        
                        FC2ILV = FC2ILV + Nz0(eRs!FC2ILV)
                        FC2ExtAufw = FC2ExtAufw + Nz0(eRs!FC2ExtAufw)
                        FC2Invest = FC2Invest + Nz0(eRs!FC2Invest)
              
                    'End If
                End If
                eRs.Close
            Next x
            
            'Werte in DB schreiben f|fffd|r INT
            LastAkt = 0
            IntID = CheckProjectCostINT(ProjektId)
            
            If FC2ILV <> 0 Then
                LastAkt = FC2ILV
            ElseIf FC1ILV <> 0 Then
                LastAkt = FC1ILV
            Else
                LastAkt = PlanILV
            End If
            
            If IntID <> "0" Then
                'Update
                rcCount = Class_Functions.DB.Create_NewRecordset
                If Class_Functions.DB.Update_Statement("Update db_Kosten set Basis=" & PlanILV & ",Ist=" & IstILV & ",Aktuell=" & LastAkt & ", Rest=" & FC1ILV & ", Abweichung=" & FC2ILV & " where id =  " & IntID, rcCount) = False Then
                    Call ErrorHandler.HandleMessage(nlserror, "Fehler beim Update interner Kosten. Import abgebrochen!", , True)
                End If
                Class_Functions.DB.Delete_RecordsetItem (rcCount)
                'MsgBox "update"
            Else
                'Insert
                'MsgBox "insert"
                rcCount = Class_Functions.DB.Create_NewRecordset
                IntID = Class_Functions.DB.Insert_Statement("Insert into db_Kosten (fk_projekte,fk_kostenarten,Basis,Ist,Aktuell, Rest,Abweichung) Values (" & ProjektId & ",1," & PlanILV & "," & IstILV & "," & LastAkt & "," & FC1ILV & "," & FC2ILV & ")" & ";;;;;;SELECT max(ID) AS NewID FROM [DB_Kosten]", rcCount)
                If IntID = "-1" Then
                    Call ErrorHandler.HandleMessage(nlserror, "Fehler beim Erstellen interner Kosten. Import abgebrochen!", , True)
                End If
                Class_Functions.DB.Delete_RecordsetItem (rcCount)
            End If
            
            'Verteilungen schreiben
            rcCount = Class_Functions.DB.Create_NewRecordset
            IntID = Class_Functions.DB.Insert_Statement("Insert into db_Kostenverteilung (fk_projekte,fk_kosten,Monat,Jahr,Kosten) Values (" & ProjektId & ", " & IntID & ",1," & tJahr & "," & LastAkt & ")", rcCount)
            If IntID = "-1" Then
                Call ErrorHandler.HandleMessage(nlserror, "Fehler beim Erstellen der Verteilung von internen Kosten. Import abgebrochen!", , True)
            End If
            Class_Functions.DB.Delete_RecordsetItem (rcCount)
            
            
           'Werte in DB schreiben f|fffd|r Aufw
            LastAkt = 0
            AufwID = CheckProjectCostAUFW(ProjektId)
            
            If FC2ExtAufw <> 0 Then
                LastAkt = FC2ExtAufw
            ElseIf FC1ExtAufw <> 0 Then
                LastAkt = FC1ExtAufw
            Else
                LastAkt = PlanExtAufw
            End If
            
            If AufwID <> "0" Then
                'Update
                rcCount = Class_Functions.DB.Create_NewRecordset
                If Class_Functions.DB.Update_Statement("Update db_Kosten set Basis=" & PlanExtAufw & ",Ist=" & IstExtAufw & ",Aktuell=" & LastAkt & ", Rest=" & FC1ExtAufw & ", Abweichung=" & FC2ExtAufw & " where id =  " & AufwID, rcCount) = False Then
                    Call ErrorHandler.HandleMessage(nlserror, "Fehler beim Update der Aufwandskosten. Import abgebrochen!", , True)
                    MsgBox "Fehler Update Aufw"
                End If
                Class_Functions.DB.Delete_RecordsetItem (rcCount)
                'MsgBox "update"
            Else
                'Insert
                'MsgBox "insert"
                rcCount = Class_Functions.DB.Create_NewRecordset
                AufwID = Class_Functions.DB.Insert_Statement("Insert into db_Kosten (fk_projekte,fk_kostenarten,Basis,Ist,Aktuell, Rest,Abweichung) Values (" & ProjektId & ",9," & PlanExtAufw & "," & IstExtAufw & "," & LastAkt & "," & FC1ExtAufw & "," & FC2ExtAufw & ")" & ";;;;;;SELECT max(ID) AS NewID FROM [DB_Kosten]", rcCount)
                If AufwID = "-1" Then
                    'MsgBox "Fehler Insert Aufw"
                    Call ErrorHandler.HandleMessage(nlserror, "Fehler beim Erstellen der Aufwandskosten. Import abgebrochen!", , True)
                End If
                Class_Functions.DB.Delete_RecordsetItem (rcCount)
            End If
            
            'Verteilungen schreiben
            rcCount = Class_Functions.DB.Create_NewRecordset
            AufwID = Class_Functions.DB.Insert_Statement("Insert into db_Kostenverteilung (fk_projekte,fk_kosten,Monat,Jahr,Kosten) Values (" & ProjektId & ", " & AufwID & ",1," & tJahr & "," & LastAkt & ")", rcCount)
            If AufwID = "-1" Then
                Call ErrorHandler.HandleMessage(nlserror, "Fehler beim Erstellen der Verteilung von Aufwandskosten Import abgebrochen!", , True)
            End If
            Class_Functions.DB.Delete_RecordsetItem (rcCount)
            
            
           'Werte in DB schreiben f|fffd|r INV
            LastAkt = 0
            InvID = CheckProjectCostINV(ProjektId)
            
            If FC2Invest <> 0 Then
                LastAkt = FC2Invest
            ElseIf FC1Invest <> 0 Then
                LastAkt = FC1Invest
            Else
                LastAkt = PlanInvest
            End If
            
            If InvID <> "0" Then
                'Update
                rcCount = Class_Functions.DB.Create_NewRecordset
                If Class_Functions.DB.Update_Statement("Update db_Kosten set Basis=" & PlanInvest & ",Ist=" & IstInvest & ",Aktuell=" & LastAkt & ", Rest=" & FC1Invest & ", Abweichung=" & FC2Invest & " where id =  " & InvID, rcCount) = False Then
                    Call ErrorHandler.HandleMessage(nlserror, "Fehler beim Update der Investitionskosten. Import abgebrochen!", , True)
                End If
                Class_Functions.DB.Delete_RecordsetItem (rcCount)
                'MsgBox "update"
            Else
                'Insert
                'MsgBox "insert"
                rcCount = Class_Functions.DB.Create_NewRecordset
                InvID = Class_Functions.DB.Insert_Statement("Insert into db_Kosten (fk_projekte,fk_kostenarten,Basis,Ist,Aktuell,Rest, Abweichung) Values (" & ProjektId & ",8," & PlanInvest & "," & IstInvest & "," & LastAkt & "," & FC1Invest & "," & FC2Invest & ")" & ";;;;;;SELECT max(ID) AS NewID FROM [DB_Kosten]", rcCount)
                If InvID = "-1" Then
                    Call ErrorHandler.HandleMessage(nlserror, "Fehler beim Erstellen der Investitionskosten. Import abgebrochen!", , True)
                End If
                Class_Functions.DB.Delete_RecordsetItem (rcCount)
            End If
            
             'Verteilungen schreiben
            rcCount = Class_Functions.DB.Create_NewRecordset
            AufwID = Class_Functions.DB.Insert_Statement("Insert into db_Kostenverteilung (fk_projekte,fk_kosten,Monat,Jahr,Kosten) Values (" & ProjektId & ", " & InvID & ",1," & tJahr & "," & LastAkt & ")", rcCount)
            If InvID = "-1" Then
                Call ErrorHandler.HandleMessage(nlserror, "Fehler beim Erstellen der Verteilungs von den Investitionskosten. Import abgebrochen!", , True)
            End If
            Class_Functions.DB.Delete_RecordsetItem (rcCount)
            
        End If
        
        
     
        Class_Functions.DB.Recordset(rcCountP).movenext
        
    Wend
    eCon.Close
   
    Class_Functions.DB.Delete_RecordsetItem (rcCountP)
    
        
    Call ErrorHandler.HandleMessage(nlsInfo, "Import abgeschlossen")
    

Exit Sub
Fehler:
    MsgBox Err.Description
End Sub

Private Function DelYearVerteilung(mYear As Integer) As Boolean
Dim rcCount As Integer
    DelYearVerteilung = False
    rcCount = Class_Functions.DB.Create_NewRecordset
    If Class_Functions.DB.Delete_Statement("Delete db_Kostenverteilung where Jahr = " & mYear, rcCount) Then
        DelYearVerteilung = True
    End If

    Class_Functions.DB.Delete_RecordsetItem (rcCount)
End Function


Private Function SetKosten20() As Boolean
Dim rcCount As Integer

    SetKosten20 = False
    rcCount = Class_Functions.DB.Create_NewRecordset
    If Class_Functions.DB.Update_Statement("Update db_Kosten set Basis=0,Ist=0,Aktuell=0, Abweichung=0", rcCount) Then
        SetKosten20 = True
    End If

    Class_Functions.DB.Delete_RecordsetItem (rcCount)
End Function

Private Function CheckProjectCostINT(pid As Integer) As Integer
Dim rcCount As Integer

    
    rcCount = Class_Functions.DB.Create_NewRecordset
    If Class_Functions.DB.Select_Statement("select id from db_Kosten where fk_Projekte = " & pid & " and fk_Kostenarten = 1", rcCount) Then
        If Not Class_Functions.DB.Recordset(rcCount).EOF Then
            CheckProjectCostINT = Class_Functions.DB.Recordset(rcCount)!ID
        Else
            CheckProjectCostINT = 0
        End If
    End If

    Class_Functions.DB.Delete_RecordsetItem (rcCount)
    
End Function

Private Function CheckProjectCostINV(pid As Integer) As Integer
Dim rcCount As Integer

    
    rcCount = Class_Functions.DB.Create_NewRecordset
    If Class_Functions.DB.Select_Statement("select id from db_Kosten where fk_Projekte = " & pid & " and fk_Kostenarten = 8", rcCount) Then
        If Not Class_Functions.DB.Recordset(rcCount).EOF Then
            CheckProjectCostINV = Class_Functions.DB.Recordset(rcCount)!ID
        Else
            CheckProjectCostINV = 0
        End If
    End If

    Class_Functions.DB.Delete_RecordsetItem (rcCount)
    
End Function

Private Function CheckProjectCostAUFW(pid As Integer) As Integer
Dim rcCount As Integer

    
    rcCount = Class_Functions.DB.Create_NewRecordset
    If Class_Functions.DB.Select_Statement("select id from db_Kosten where fk_Projekte = " & pid & " and fk_Kostenarten = 9", rcCount) Then
        If Not Class_Functions.DB.Recordset(rcCount).EOF Then
            CheckProjectCostAUFW = Class_Functions.DB.Recordset(rcCount)!ID
        Else
            CheckProjectCostAUFW = 0
        End If
    End If

    Class_Functions.DB.Delete_RecordsetItem (rcCount)
    
End Function

Private Function Nz0(gStr As Variant) As Double
    If IsNull(gStr) Then
        Nz0 = 0
    ElseIf gStr = "" Then
        Nz0 = 0
    Else
        Nz0 = gStr
    End If
End Function

Private Function Nz(gStr As Variant) As String
    If IsNull(gStr) Then
        Nz = ""
    Else
        Nz = gStr
    End If
End Function
Attribute VB_Name = "nlc_sqlstatements"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub CommandButton1_Click()
    frm_SQL_Statements.Show
End Sub
Attribute VB_Name = "nlc_sqlstatements_calc"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "nls_Database"
Option Explicit
Option Private Module

Public ErrorHandler As New nls_ErrorHandler
Public dbUserReply As DBAction
Private canConnect As Boolean
Private decrypt As New nls_Decrypt
Dim newXML As Boolean
Public wbopen As Boolean

Public Enum DBAction
    nlsRetry
    nlsNewDB
    nlsChooseXML
    nlsImportXML
    nlsCancel
End Enum

'1. DB Con Required
Public Function DbRequired() As Boolean
    If newXML = True Then
        DbRequired = True
        Exit Function
    End If
    
    canConnect = False
    
    decrypt.Salt = db_Salt
    
    If CheckDbPath Then
        If TryConnect() Then
            'Verbindung konnte aufgebaut werden
            canConnect = True
        Else
            'keine Verbindung m|fffd|glich
            Call handleRetryForm
        End If
    Else
        'Kein XML Pfad hinterlegt
        If CheckXMLPath Then
            Call handleRetryForm
        Else
            Call handleChooseXML
        End If
    End If
    
    If canConnect Then
        Call Class_Functions.DB.Set_SQLSettings(decrypt.decrypt(calc_master.Range("provider").value), _
                                                decrypt.decrypt(calc_master.Range("servername").value), _
                                                decrypt.decrypt(calc_master.Range("dbname").value), _
                                                decrypt.decrypt(calc_master.Range("username").value), _
                                                decrypt.decrypt(calc_master.Range("password").value))
                                                
        DbRequired = True
    Else
        Call Class_Functions.DB.Set_SQLSettings("", "", "", "", "")
        DbRequired = False
    End If
End Function

'2 Change DB con
Public Sub ChangeDBCon()
    decrypt.Salt = db_Salt
    
    If CheckXMLPath Then
        Call HandleNewDbForm
    Else
        Call handleChooseXML
    End If
End Sub

Private Sub handleChooseXML()
    'XML Dateiselection ausf|fffd|hren
    If ChooseXMLFile Then
        'Datei ausgew|fffd|hlt
        Call handleReadXML
    Else
        'kein XML File gew|fffd|hlt
        Call HandleNewDbForm
    End If
End Sub

Private Sub handleReadXML()
    If ReadXMLValues Then
        If TryConnect(False) Then
            'Verbindung konnte aufgebaut werden
            canConnect = True
        Else
            Call ErrorHandler.HandleMessage(nlserror, "Es konnte keine Verbindung zur Datenbank aufgebaut werden.", , True)
            Call HandleNewDbForm
        End If
    Else
        'XML File ung|fffd|ltig
        Call HandleNewDbForm
    End If
End Sub

Private Function getConString() As String
    getConString = "Provider='" & decrypt.decrypt(calc_master.Range("provider").value) & "';" & _
                    "Data Source='" & decrypt.decrypt(calc_master.Range("servername").value) & "';" & _
                    "Initial Catalog=" & decrypt.decrypt(calc_master.Range("dbname").value) & ";" & _
                    "User ID=" & decrypt.decrypt(calc_master.Range("username").value) & ";" & _
                    "pwd=" & decrypt.decrypt(calc_master.Range("password").value) & ";" & _
                    "Connect Timeout=10"
End Function

Private Function CheckDbPath() As Boolean
    If calc_master.Range("dbname").value = "" Then
        If calc_master.Range("servername").value = "" Then
            CheckDbPath = False
        Else
            CheckDbPath = True
        End If
    Else
        If calc_master.Range("servername").value = "" Or _
                calc_master.Range("username").value = "" Or _
                calc_master.Range("password").value = "" Then
            CheckDbPath = False
        Else
            CheckDbPath = True
        End If
    End If
End Function

Private Function CheckXMLPath() As Boolean
    If calc_master.Range("XMLPfad").value = "" Then
        CheckXMLPath = False
    Else
        CheckXMLPath = True
    End If
End Function

Private Sub handleRetryForm()
    frm_DBRetry.Show
    
    'Erneut versuchen
    If dbUserReply = nlsRetry Then
        If TryConnect(False) Then
            'Verbindung konnte aufgebaut werden
            canConnect = True
            Call ErrorHandler.HandleMessage(nlsInfo, "Die Verbindung zur Datenbank wurde erfolgreich ge|fffd|ndert.", , True)
        Else
            'Verbindung konnte nicht aufgebaut werden
            Call ErrorHandler.HandleMessage(nlserror, "Es konnte keine Verbindung zur Datenbank aufgebaut werden.", , True)
            Call handleRetryForm
        End If
    'DB |fffd|ndern
    ElseIf dbUserReply = nlsNewDB Then
        Call HandleNewDbForm
    'Abbrechen
    ElseIf dbUserReply = nlsCancel Then
        Call ErrorHandler.HandleMessage(nlserror, "Keine Verbindung zur Datenbank m|fffd|glich. Aktion wird nicht ausgef|fffd|hrt.", , True)
    End If
End Sub

Private Sub HandleNewDbForm()
    frm_NewDB.Show
    
    'XML File |fffd|ndern
    If dbUserReply = nlsChooseXML Then
        newXML = True
        Call handleChooseXML
    'XML erneut einlesen
    ElseIf dbUserReply = nlsRetry Then
        Call handleReadXML
    'Abbrechen
    ElseIf dbUserReply = nlsCancel Then
        'Call ErrorHandler.HandleMessage(nlserror, "Keine Verbindung zur Datenbank m|fffd|glich. Aktion wird nicht ausgef|fffd|hrt.", , True)
        'Call ErrorHandler.HandleMessage(nlsInfo, "Die Aktion wurde abgebrochen. Es wurden keine |fffd|nderungen vorgenommen.", , True)
    End If
    
'    If newXML And wbopen = False Then
'        If nlc_ppf_xl.LoadFromSQL Then
'            'Do nothing
'        End If
'    End If
    newXML = False
End Sub

Private Function TryConnect(Optional simple As Boolean = True) As Boolean
    Dim dbConString As String
    
    dbConString = "Data Source='" & decrypt.decrypt(calc_master.Range("servername").value) & "';"
    If calc_master.Range("dbname").value <> "" Then dbConString = dbConString & "Initial Catalog=" & decrypt.decrypt(calc_master.Range("dbname").value) & ";"
    If calc_master.Range("username").value <> "" Then dbConString = dbConString & "User ID=" & decrypt.decrypt(calc_master.Range("username").value) & ";"
    If calc_master.Range("password").value <> "" Then dbConString = dbConString & "pwd=" & decrypt.decrypt(calc_master.Range("password").value) & ";"
    'dbConString = dbConString & "Connect Timeout=5"
    
    Dim counter As Integer
    Dim tempConString As String
    
    
    'Check letzten Provider
    If calc_master.Range("provider").value <> "" Then
        tempConString = "Provider='" & decrypt.decrypt(calc_master.Range("provider").value) & "';" & dbConString
    Else
        tempConString = "Provider='" & decrypt.decrypt(calc_master.Range("providerlist").Cells(1, 1).value) & "';" & dbConString
        Range("provider").value = calc_master.Range("providerlist").Cells(1, 1).value
        
    End If
    If FixedPath = True Then
        tempConString = "Provider='Microsoft.ACE.OLEDB.12.0';Data Source='" & ActiveWorkbook.Path & "\next_portfolio_DB.accdb';User ID=admin;"
    End If
    If TryConnectToDB(tempConString) Then
        TryConnect = True
    End If
    
    If simple = True Or TryConnect = True Or FixedPath = True Then Exit Function
    
    'Check alle anderen Provider
    For counter = 1 To calc_master.Range("providerlist").Rows.count Step 1
        tempConString = "Provider='" & decrypt.decrypt(calc_master.Range("providerlist").Cells(counter, 1).value) & "';" & dbConString
        If TryConnectToDB(tempConString) Then
            'Wenn anderer Provider geht, dann diesen als letzt g|fffd|ltigen eintragen
            calc_master.Range("provider").value = calc_master.Range("providerlist").Cells(counter, 1).value
            TryConnect = True
            Exit Function
        End If
    Next counter

    'wenn keine Verbindung aufgebaut werden kann
    'Call ErrorHandler.HandleMessage(nlsError, nlc_Language_Msgs("msg_no_DB_Connection"), , True)
    
    calc_master.Range("provider").value = ""
    TryConnect = False
    Exit Function
End Function

Private Function TryConnectToDB(conString As String) As Boolean
    Dim consql  As Object
    
    On Error GoTo Fehler
    Set consql = CreateObject("ADODB.Connection") ' Connection Object
    consql.ConnectionString = conString
    consql.Open
    
    TryConnectToDB = True
    
    consql.Close
    Exit Function

Fehler:
    'MsgBox Err.Description
    Err.clear
    Set consql = Nothing
    TryConnectToDB = False
End Function

Private Function ChooseXMLFile() As Boolean
    Dim sfile As Variant
    
    On Error GoTo Error_File
    sfile = Application.GetOpenFilename("(*.xml), *.xml", , "W|fffd|hlen Sie eine XML Datei!")
    
    If sfile = False Then
        Call ErrorHandler.HandleMessage(nlsInfo, "Keine Datei ausgew|fffd|hlt. Aktion abgebrochen!", , True)
        ChooseXMLFile = False
        Exit Function
    End If
    
    calc_master.Range("XMLPfad").value = sfile
    ChooseXMLFile = True
    Exit Function
    
Error_File:
    Call ErrorHandler.HandleMessage(nlserror, nlc_Language_Msgs("msg_xml_open_error"), , True)
    ChooseXMLFile = False
End Function

Private Function ReadXMLValues() As Boolean
    'Kein XML Pfad hinterlegt
    If CheckXMLPath = False Then
        Call ChooseXMLFile
    End If

    On Error GoTo Fehler
    
    Dim xmlReader As New nls_XML_Reader
    Dim counter As Integer
    Dim listItem As Variant
    Dim listValues As Variant
    
    xmlReader.Path = calc_master.Range("XMLPfad").value
    
    Call xmlReader.loadXML(False)
    
    calc_master.Range("servername").value = xmlReader.GetValue("server")
    calc_master.Range("dbname").value = xmlReader.GetValue("database")
    calc_master.Range("username").value = xmlReader.GetValue("username")
    calc_master.Range("password").value = xmlReader.GetValue("password")

    'Providerliste
    counter = calc_master.Range("providerlist").row
    listValues = xmlReader.GetListOfValues("provider")

    For Each listItem In listValues
        If counter = calc_master.Range("providerlist").row + 4 Then
            Exit For
        End If

        calc_master.Cells(counter, calc_master.Range("providerlist").Column).value = listItem
        counter = counter + 1
    Next listItem
    
    ReadXMLValues = True
    Exit Function
Fehler:
    Call ErrorHandler.HandleMessage(nlserror, nlc_Language_Msgs("Ung|fffd|ltige XML Datei. Aktion abgebrochen!"), , True)
    ReadXMLValues = False
End Function
Attribute VB_Name = "nls_DatabaseManager"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'#########################################################################################################################################
'!!!Diese Klasse Verwendet die Klasse "nls_ErrorHandler" um Fehler zur Datenbank speichern zu k|fffd|nnen!!!
'Es werden die Connections, Recordsets und Statements zur DB verwaltet

'Ein ge|fffd|ffneter Recordset der Funktion "Select" ist solange offen, bis die Recordset Close Funktion aufgerufen wird oder ein neuer Recordset ge|fffd|ffnet werden soll!!!
'#########################################################################################################################################

Option Explicit
Private Const cVersion = "V1.2"

Private cRecordset() As Object
Private DB_Connection As Object
Private cProvider As String
Private cDataSource As String
Private cInitial_Catalog As String
Private cUser As String
Private cPassword As String
Private cErrorHandler As New nls_ErrorHandler
Private cCurr_Timer As String
Private cDecrypt As New nls_Decrypt
Private cCloseTimer As Integer
Private cSQLType As SQLType

Public Enum SQLType
    MSSQL
    ACCESS
End Enum

'T_ steht f|fffd|r Type_
Public Enum SQLDataType
    T_DATE
    T_VARCHAR
    T_NVARCHAR
    T_DOUBLE
End Enum

Private Sub Class_Initialize()
    cCurr_Timer = ""
    cCloseTimer = 30
    
    ReDim cRecordset(0)
    Set cRecordset(0) = CreateObject("ADODB.Recordset")
End Sub

'Version ausgeben
Public Property Get Version() As String
    Version = cVersion
End Property

'Get SQL Typ
Public Property Get GetSQLType() As SQLType
    GetSQLType = cSQLType
End Property

'Timer setzen
Public Property Let CloseTime(seconds As Integer)
    If seconds >= 0 And seconds <= 60 Then
        cCloseTimer = seconds
    Else
        Call cErrorHandler.HandleMessage(nlserror, "Der Timer muss zwischen 0 und 60 Sekunden sein.")
    End If
End Property

'Die Versionen der verwendeten Klassen wird gepr|fffd|ft
Private Sub checkVersion()
    Dim ErrorMsg As String
    
    If VBA.Left(cErrorHandler.Version, 3) <> "V1." Then
        ErrorMsg = "Wrong ErrorHandler Version!"
        GoTo handleErr
    End If
    
    If VBA.Left(cDecrypt.Version, 3) <> "V1." Then
        ErrorMsg = "Wrong Decrypt Version!"
        GoTo handleErr
    End If

    cErrorHandler.Debugging = True
    
    Exit Sub
    
handleErr:
    If VBA.Left(cErrorHandler.Version, 3) = "V1." Then
        Call cErrorHandler.LogDebug(nlserror, ErrorMsg, "Wrong Version", True)
    End If
End Sub

'Erh|fffd|ht den Recordset Array um 1 und gibt die neue Max Count zur|fffd|ck
Public Function Create_NewRecordset() As Integer
    'Recordset am Ende hinzuf|fffd|gen
    ReDim Preserve cRecordset(UBound(cRecordset) + 1)
    'Recordset als Recordset definieren
    Set cRecordset(UBound(cRecordset)) = CreateObject("ADODB.Recordset")
    
    'Recordset Count zur|fffd|ckgeben
    Create_NewRecordset = UBound(cRecordset)
End Function

Public Function Delete_RecordsetItem(DeleteItemNumber As Integer)
    Dim i As Long
    
    If DeleteItemNumber < UBound(cRecordset) Then
        'Recordset aus Array l|fffd|schen und alle nachfolgende Recordsets nach vorne schieben
        For i = DeleteItemNumber To UBound(cRecordset) - 1
            Set cRecordset(i) = cRecordset(i + 1)
        Next i
    End If
    
    'Recordsets autom. um 1 Recordset verkleinern
    If UBound(cRecordset) > 0 Then
        ReDim Preserve cRecordset(UBound(cRecordset) - 1)
    End If
    
    'Recordset Count zur|fffd|ckgeben
    Delete_RecordsetItem = UBound(cRecordset)
End Function

Private Sub Class_Terminate()
    Set DB_Connection = Nothing
End Sub

'|fffd|ffnet die DB Verbindung
Public Sub Con_Open()
On Error GoTo Fehler
    
    If DB_Connection.State <> 1 Then
        Call Set_SQLCon
        DB_Connection.Open
    End If
    
    Call Timer(VBA.Now)
    Exit Sub
    
Fehler:
    calc_master.Cells(16, 16).value = ""
    Application.StatusBar = "DB-Connection: Can|fffd|t open connection!"
    Call cErrorHandler.HandleMessage(nlserror, "Fehler beim |fffd|ffnen der Verbindung.", "Error", True)
End Sub

'Schlie|fffd|t die DB Verbindung
Public Sub Con_Close()
On Error GoTo Fehler
    If DB_Connection.State <> 0 Then
        DB_Connection.Close
    End If
    cCurr_Timer = ""
    Exit Sub

Fehler:
    Call cErrorHandler.HandleMessage(nlserror, "Fehler beim Schlie|fffd|en der Verbindung.", "Error", True)
End Sub

'Schlie|fffd|t den angegebenen (oder default) Recordset
Public Sub Rec_Close(Optional RecordsetNumber As Integer = 0)
On Error GoTo Fehler

    If cRecordset(RecordsetNumber).State <> 0 Then
        cRecordset(RecordsetNumber).Close
    Else
        Set cRecordset(RecordsetNumber) = CreateObject("ADODB.Recordset")
    End If
    Exit Sub
    
Fehler:
    Call cErrorHandler.HandleMessage(nlserror, "Fehler beim Schlie|fffd|en des Recordsets", "Error", True)
End Sub


'####################################################
'      Variablen manuell setzten oder abfragen
'####################################################
'Der SQL Connectionstring wird zusammengesetzt
Private Sub Set_SQLCon()
    On Error GoTo Fehler
    'SQL Connection
    Set DB_Connection = CreateObject("ADODB.Connection")
    
    Dim conString As String
    
    conString = "Provider='" & cProvider & "';" _
        & "Data Source='" & cDataSource & "';" _
        
    If cInitial_Catalog <> "" Then conString = conString & "Initial Catalog='" & cInitial_Catalog & "';"
    If cUser <> "" Then conString = conString & "User ID='" & cUser & "';"
    If cPassword <> "" Then conString = conString & "Password='" & cPassword & "';"
    
    If cInitial_Catalog <> "" Then
        cSQLType = MSSQL
        conString = conString & "Current Language='German'"
    Else
        cSQLType = ACCESS
        cCloseTimer = 10
    End If
    
    If FixedPath = True Then
        cSQLType = ACCESS
        cCloseTimer = 10
        conString = "Provider='Microsoft.ACE.OLEDB.12.0';Data Source='" & ActiveWorkbook.Path & "\next_portfolio_db.accdb';User ID=admin;"
    End If
    
    DB_Connection.ConnectionString = conString '"Provider=Microsoft.ACE.OLEDB.12.0;Data Source='\\10.1.1.191\ablage\02_Tools\01 Lizenzpflichtige Tools\next portfolio\V4.0\SV-03\portfolio.accdb';Persist Security Info=False;"
    Exit Sub
   
Fehler:
    Call cErrorHandler.HandleMessage(nlserror, "Fehler beim Definieren der SQL Connection.", "Error", True)
End Sub

'Setzt die SQL Settings um eine Verbindung zur SQL DB herstellen zu k|fffd|nnen
Public Function Set_SQLSettings(ByVal Provider As String, ByVal DataSource As String, ByVal Initial_Catalog As String, ByVal User As String, ByVal Password As String)
    cProvider = Provider
    cDataSource = DataSource
    'Folende Felder nicht f|fffd|r SQL CE erforderlich
    If Initial_Catalog <> "" Then cInitial_Catalog = Initial_Catalog
    If User <> "" Then cUser = User
    If Password <> "" Then cPassword = Password

    Call Set_SQLCon
End Function

'Gibt den angegebenen (oder default) Recordset zur|fffd|ck
Public Property Get Recordset(Optional RecordsetNumber As Integer = 0)
    If RecordsetNumber <= UBound(cRecordset) Then
        Set Recordset = cRecordset(RecordsetNumber)
    End If
End Property

'Wenn die Datenquelle l|fffd|nger als 30 Sekunden nicht verwendet wird, wird die Connection automatisch geschlossen
Private Sub Timer(last_db_change As Date)
    On Error Resume Next
    Call StopTimer
    
    If cCloseTimer < 0 Then
        cCloseTimer = 0
    ElseIf cCloseTimer > 60 Then
        cCloseTimer = 60
    End If
    
    If DB_Connection.State <> 0 Then
        cCurr_Timer = VBA.CStr(last_db_change + TimeValue("00:00:" & cCloseTimer))
        Application.OnTime VBA.CDate(cCurr_Timer), "Class_Functions.DB_Connection_schliessen"
    End If
End Sub

'Wenn ein Timer aktiv ist, wird dieser gestoppt
Public Sub StopTimer()
    On Error Resume Next
    If cCurr_Timer <> "" Then
        Application.OnTime EarliestTime:=VBA.CDate(cCurr_Timer), Procedure:="Class_Functions.DB_Connection_schliessen", Schedule:=False
    End If
End Sub

'Holt den Count des Recordsets
'Das Statement muss |fffd|bergeben werden, da bei einer SQL CE Version eine weitere abfrage mit dem Statement gemacht werden muss
Public Function GetRecordCount(statement As String, Optional RecordsetNumber As Integer = 0) As Integer
    On Error GoTo Fehler
    If cSQLType = MSSQL Then
        Class_Functions.DB.Recordset(RecordsetNumber).movelast
        GetRecordCount = cRecordset(RecordsetNumber).RecordCount
        Class_Functions.DB.Recordset(RecordsetNumber).movefirst
    Else
        'Wenn es sich um Access handelt
        'Das Statmente wird bis zum From gel|fffd|scht und dann mit Select Count(*) erg|fffd|nzt
        Dim findValueNumber As Long
        Dim tempWhere As Long
        findValueNumber = VBA.InStr(1, statement, "FROM", vbTextCompare) - 1
        
        
        If findValueNumber <> -1 Then
            statement = "SELECT COUNT(*) AS Rowcounter " & VBA.Right(statement, VBA.Len(statement) - findValueNumber)
            tempWhere = VBA.InStrRev(statement, "WHERE") - 1
            findValueNumber = VBA.InStrRev(statement, "ORDER BY") - 1
            If findValueNumber <> -1 And findValueNumber > tempWhere Then statement = VBA.Left(statement, findValueNumber)
            findValueNumber = VBA.InStrRev(statement, "GROUP BY") - 1
            tempWhere = VBA.InStrRev(statement, "WHERE") - 1
            If findValueNumber <> -1 And findValueNumber > tempWhere Then statement = VBA.Left(statement, findValueNumber)
            Dim rcIndex As Integer
            rcIndex = Me.Create_NewRecordset
            
            If Select_Statement(statement, rcIndex) Then
                GetRecordCount = Me.Recordset(rcIndex)!rowCounter
            Else
                GetRecordCount = -1
            End If
            
            Call Me.Delete_RecordsetItem(rcIndex)
        End If
    End If
    
    Exit Function
Fehler:
    GetRecordCount = -1
End Function

'####################################################
'              Multiplatform Funktionen
'####################################################

'Muss ein Datentyp konvertiert werden, muss diese Funktion verwendet werden. Diese |fffd|ndert den Term je nach SQL Typ (Access, MS-SQL, etc.) in die richtige Konvertierungsform
'Sollte ein Datentyp oder ein SQL Typ nicht vorhanden sein, so kann dieser (mit erh|fffd|hen der Versionsnummer in der Klasse) erg|fffd|nzt werden.
Public Function Convert(Term As String, dataType As SQLDataType, Optional nvarCount As Integer = 1)
    If Term = "" Then
        Convert = ""
        Exit Function
    End If
    
    If cSQLType = MSSQL Then
        Select Case dataType
            Case SQLDataType.T_DATE
                Convert = "CONVERT(datetime, " & Term & ", 104)"
            Case SQLDataType.T_VARCHAR
                Convert = "CONVERT(varchar, " & Term & ")"
            Case SQLDataType.T_NVARCHAR
                Convert = "CONVERT(nvarchar(" & nvarCount & "), " & Term & ")"
            Case SQLDataType.T_DOUBLE
                Convert = "CONVERT(DECIMAL(9,2), " & Term & ")"
        End Select
    ElseIf cSQLType = ACCESS Then
        Select Case dataType
            Case SQLDataType.T_DATE
                Convert = "CDATE(" & VBA.Replace(Term, "+", "&") & ")"
            Case SQLDataType.T_VARCHAR
                Convert = "CSTR(" & Term & ")"
            Case SQLDataType.T_NVARCHAR
                Convert = "CSTR(" & Term & ")"
            Case SQLDataType.T_DOUBLE
                Convert = "CDBL(" & Term & ")"
        End Select
    End If
End Function

Public Function Parse2True() As String
    If cSQLType = MSSQL Then
        Parse2True = "1"
    ElseIf cSQLType = ACCESS Then
        Parse2True = "-1"
    End If
End Function

Public Function Parse2Date(dataValue As Date) As String
    Dim tempString As String
    
    tempString = VBA.CStr(dataValue)
    
    If cSQLType = ACCESS Then
        tempString = "#" & VBA.Month(dataValue) & "/" & VBA.Day(dataValue) & "/" & VBA.Year(dataValue) & "#"
    ElseIf cSQLType = MSSQL Then
        tempString = "'" & tempString & "'"
    End If
    
    Parse2Date = tempString
End Function

'####################################################
'                   SQL Statements
'####################################################

'Es wird eine Select Statement ausgef|fffd|hrt
Public Function Select_Statement(statement As String, Optional RecordsetNumber As Integer = 0) As Boolean

On Error GoTo Fehler
    'Connection
    Call Con_Open
    'Recordset falls offen schlie|fffd|en
    Call Rec_Close(RecordsetNumber)
    
    'Wenn Datenquelle = SQL dann wird das $ aus den Tabellennamen entfernt
    If VBA.Right(Me.Version, VBA.Len(Me.Version) - 1) < "1.2" Then
        statement = VBA.Replace(statement, "$", "")
    End If
    
    'pr|fffd|fen ob das Statement ein Select ist
    If VBA.LCase(VBA.Left(statement, 6)) = VBA.LCase("select") Then
        If cInitial_Catalog <> "" Then
            cRecordset(RecordsetNumber).CursorLocation = 3 '3 = adUseServer
            cRecordset(RecordsetNumber).Open statement, DB_Connection, 3, 3 ' Paremeter 1 nach DB Con = CursorType; Para 2 = Locktype
        Else
            cRecordset(RecordsetNumber).Open statement, DB_Connection, 3 ' CursorType kann (und muss) mit 3 (adOpenStatic) angegeben werden
        End If
        
        If cRecordset(RecordsetNumber).EOF And cRecordset(RecordsetNumber).bof Then
            Select_Statement = True
            Exit Function
        End If
        Select_Statement = True
    Else
        Select_Statement = False
    End If
    
    Exit Function
    
Fehler:
    If DB_Connection.State = 1 Then
        Call cErrorHandler.HandleMessage(nlserror, "Fehler beim Ausf|fffd|hren des Select Statements: " & statement & ".", "Error", True)
    End If
    Call Rec_Close(RecordsetNumber)
    
    Select_Statement = False
End Function

'Es wird ein Insert auf die Datenquelle gesendet
Public Function Insert_Statement(statement As String, Optional RecordsetNumber As Integer = 0) As String

On Error GoTo Fehler
    'Connection
    Call Con_Open
    'Recordset falls offen schlie|fffd|en
    Call Rec_Close(RecordsetNumber)
    Dim statements() As String
    Dim counter As Integer
    
    'Wenn Datenquelle = SQL dann wird das $ aus den Tabellennamen entfernt
    If VBA.Right(Me.Version, VBA.Len(Me.Version) - 1) < "1.2" Then
        statement = VBA.Replace(statement, "$", "")
    End If
    
    statements = VBA.Split(statement, ";;;;;;")
    
    DB_Connection.BeginTrans
    For counter = 0 To UBound(statements) Step 1
        If counter = 0 Then
            If VBA.LCase(VBA.Left(statement, 6)) = VBA.LCase("insert") Then
                cRecordset(RecordsetNumber).Open statements(counter), DB_Connection
                Insert_Statement = "0"
            Else
                Insert_Statement = "-1"
            End If
        Else
            cRecordset(RecordsetNumber).Open statements(counter), DB_Connection
            Insert_Statement = cRecordset(RecordsetNumber)!NewID
        End If
    Next counter
    DB_Connection.CommitTrans
    
    Call Rec_Close(RecordsetNumber)
    
    Exit Function
    
Fehler:
    DB_Connection.RollbackTrans
    
    Call cErrorHandler.HandleMessage(nlserror, "Fehler beim Ausf|fffd|hren des Insert Statements: " & statement & ".", "Error", True)
    Call Rec_Close(RecordsetNumber)
    
    Insert_Statement = "-1"
End Function

'Es wird ein Update auf die Datenquelle gesendet
Public Function Update_Statement(statement As String, Optional RecordsetNumber As Integer = 0) As Boolean

On Error GoTo Fehler
    'Connection
    Call Con_Open
    'Recordset falls offen schlie|fffd|en
    Call Rec_Close(RecordsetNumber)
    
    'Wenn Datenquelle = SQL dann wird das $ aus den Tabellennamen entfernt
    If VBA.Right(Me.Version, VBA.Len(Me.Version) - 1) < "1.2" Then
        statement = VBA.Replace(statement, "$", "")
    End If
    
    If VBA.LCase(VBA.Left(statement, 6)) = VBA.LCase("update") Then
        cRecordset(RecordsetNumber).Open statement, DB_Connection
        Update_Statement = True
    Else
        Update_Statement = False
    End If
    
    Call Rec_Close(RecordsetNumber)
    
    Exit Function
    
Fehler:
    Call cErrorHandler.HandleMessage(nlserror, "Fehler beim Ausf|fffd|hren des Update Statements: " & statement & ".", "Error", True)
    Call Rec_Close(RecordsetNumber)
    
    Update_Statement = False
End Function

'Es wird ein Delete auf die Datenquelle gesendet
Public Function Delete_Statement(statement As String, Optional RecordsetNumber As Integer = 0) As Boolean

On Error GoTo Fehler
    'Connection
    Call Con_Open
    'Recordset falls offen schlie|fffd|en
    Call Rec_Close(RecordsetNumber)
    
    'Wenn Datenquelle = SQL dann wird das $ aus den Tabellennamen entfernt
    If DB_Connection.Provider = cProvider Then
        statement = VBA.Replace(statement, "$", "")
    End If
    
    If VBA.LCase(VBA.Left(statement, 6)) = VBA.LCase("delete") Then
        cRecordset(RecordsetNumber).Open statement, DB_Connection
        Delete_Statement = True
    Else
        Delete_Statement = False
    End If
    
    Call Rec_Close(RecordsetNumber)
    
    Exit Function
    
Fehler:
    Call cErrorHandler.HandleMessage(nlserror, "Fehler beim Ausf|fffd|hren des Delete Statements: " & statement & ".", "Error", True)
    Call Rec_Close(RecordsetNumber)
    
    Delete_Statement = False
End Function

'Es wird ein Delete auf die Datenquelle gesendet
Public Function Execute_Statement(statement As String, Optional RecordsetNumber As Integer = 0) As Boolean

On Error GoTo Fehler
    'Connection
    Call Con_Open
    'Recordset falls offen schlie|fffd|en
    Call Rec_Close(RecordsetNumber)
    
    'Wenn Datenquelle = SQL dann wird das $ aus den Tabellennamen entfernt
    If DB_Connection.Provider = cProvider Then
        statement = VBA.Replace(statement, "$", "")
    End If
    
    If VBA.LCase(VBA.Left(statement, 7)) = VBA.LCase("execute") Then
        cRecordset(RecordsetNumber).Open statement, DB_Connection
        Execute_Statement = True
    Else
        Execute_Statement = False
    End If
    
    Call Rec_Close(RecordsetNumber)
    
    Exit Function
    
Fehler:
    Call cErrorHandler.HandleMessage(nlserror, "Fehler beim Ausf|fffd|hren des Execute Statements: " & statement & ".", "Error", True)
    Call Rec_Close(RecordsetNumber)
    
    Execute_Statement = False
End Function

'Es werden x Statements ausgef|fffd|hrt, wenn etwas schief l|fffd|uft, werden alle R|fffd|ckg|fffd|ngig gemacht
Public Function TransStatements(statements() As String, Optional RecordsetNumber As Integer = 0) As Boolean
    'Connection
    Call Con_Open
    'Recordset falls offen schlie|fffd|en
    Call Rec_Close(RecordsetNumber)
    
    Dim single_statement As Variant
    Dim statement As String
    
    On Error GoTo Fehler
    
    DB_Connection.BeginTrans
    'alle Statements durchgehen
    For Each single_statement In statements
        'Wenn Datenquelle = SQL dann wird das $ aus den Tabellennamen entfernt
        If DB_Connection.Provider = cProvider Then
            statement = VBA.Replace(single_statement, "$", "")
        End If
        
        If statement <> "" Then
            cRecordset(RecordsetNumber).Open statement, DB_Connection
        End If
    Next single_statement
    'alle Statements |fffd|bertragen
    DB_Connection.CommitTrans
    
    TransStatements = True
    
    Call Rec_Close(RecordsetNumber)
    Exit Function
    
Fehler:
    If TransStatements = False Then
        DB_Connection.RollbackTrans
    End If
    
    Call cErrorHandler.HandleMessage(nlserror, "Fehler beim Ausf|fffd|hren der Statements: " & statement & ".", "Error", True)
    Call Rec_Close(RecordsetNumber)
    
    TransStatements = False
End Function
Attribute VB_Name = "nls_Decrypt"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'#########################################################################################################################################
'Werte werden mit einem angegebenen Schl|fffd|ssel entschl|fffd|sselt
'#########################################################################################################################################

Option Explicit

'Versionsnummer
Private Const cVersion = "V1.0"

Private cSalt As String

'Version ausgeben
Public Property Get Version() As String
    Version = cVersion
End Property

'Salt setzen
Public Property Let Salt(vSalt As String)
    cSalt = vSalt
End Property

'Entschl|fffd|sselt den |fffd|bergebenen String mit dem angegebenen Salt
Public Function decrypt(strInput As String)
    Dim n As Integer, i As Integer, c As Integer
    
    For i = 1 To Len(strInput)
        n = Asc(Mid(cSalt, i Mod Len(cSalt) + 1, 1)) Mod 256
        c = (Asc(Mid(strInput, i, 1)) - n) Mod 256
        If c < 0 Then
            c = c + 256
        End If
        Mid(strInput, i, 1) = Chr(c)
    Next i
    
    decrypt = strInput
End Function

Attribute VB_Name = "nls_ErrorHandler"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'#########################################################################################################################################
'Es wird ein Textfile erstellt mit Namen des Tools und "_Error_Log".
'Wird kein Ordner angegeben, wird in den Eigenen Dateien ein Ordner "next level solutions" erstellt und dort das Textfile gespeichert
'Wird ein Ordner angegeben, wird kein weiterer Ordner erstellt, sondern das Textfile direkt dort reingeschrieben
'#########################################################################################################################################

Option Explicit

'Versionsnummer
Private Const cVersion = "V1.0"

Private cPath As String
Private cNlsFolder As String
Private cError_Kette As String
Private cStrErrorLevel As String
Private cDebugging As Boolean

Public Enum ErrorLevel
    nlserror
    nlsWarning
    nlsInfo
End Enum

Public Enum MsgPrint
showMsgBox
printInConsole
End Enum

Private Sub Class_Initialize()
    cNlsFolder = "\next level solutions"
    cPath = getMyDocumentsFolder() & "\" & tool & "_Log.txt"
    
    cDebugging = False
End Sub

'Version ausgeben
Public Property Get Version() As String
    Version = cVersion
End Property

'debugging setzen
Public Property Let Debugging(ByVal vDebugging As Boolean)
    cDebugging = vDebugging
End Property

'Es wird ein Pfad gesetzt
Public Property Let Pfad(ByVal vPath As String)
    cPath = vPath
End Property

'Es wird die letzte Fehlermeldung ausgelesen
Public Property Get Error_Msg() As String
    Error_Msg = cError_Kette
End Property

'Handlet Fehlermeldungen und gibt diese als jeweilige Messagebox aus
Public Sub HandleMessage(vLevel As ErrorLevel, vDescription As String, Optional vTitle As String = "", Optional vSaveError As Boolean = False)
    Select Case vLevel
        Case ErrorLevel.nlserror
            cStrErrorLevel = "ERROR"
            
            If vTitle = "" Then
                MsgBox vDescription, vbOKOnly + vbCritical
            Else
                MsgBox vDescription, vbOKOnly + vbCritical, vTitle
            End If
        Case ErrorLevel.nlsInfo
            cStrErrorLevel = "INFO"
            
            If vTitle = "" Then
                MsgBox vDescription, vbOKOnly + vbInformation
            Else
                MsgBox vDescription, vbOKOnly + vbInformation, vTitle
            End If
        Case ErrorLevel.nlsWarning
            cStrErrorLevel = "ERROR"
            
            If vTitle = "" Then
                MsgBox vDescription, vbOKOnly + vbExclamation
            Else
                MsgBox vDescription, vbOKOnly + vbExclamation, vTitle
            End If
    End Select
    
    If vSaveError Then
        Call LogMessage(vTitle, vDescription)
    End If
End Sub

'Der Fehler wird in die Logdatei geschrieben
Private Sub LogMessage(vTitle As String, vDescription As String)
    Dim WriteFile
    
    WriteFile = FreeFile()
    Open cPath For Append As #WriteFile
    
    If vTitle = "" Then
        Print #WriteFile, cStrErrorLevel & " - " & VBA.Now & ": " & vDescription
    Else
        Print #WriteFile, cStrErrorLevel & " - " & VBA.Now & ": " & vTitle & " --- " & vDescription
    End If
    Close #WriteFile
End Sub

'Handelt die Debugmessages und gibt diese nur dann aus, wenn Debugging auf true gesetzt ist
'In Klassen ist Debugging immer aktiviert, es wird jedoch keine Messagebox sondern ein Debug.Print ausgegeben
'Messages aus Klassen werden immer gespeichert.
Public Sub LogDebug(vLevel As ErrorLevel, vDescription As String, Optional vTitle As String = "", Optional vSaveError As Boolean = False, Optional vDebugging As MsgPrint = printInConsole)
    If Not cDebugging Then Exit Sub
    
    Select Case vLevel
        Case ErrorLevel.nlserror
            cStrErrorLevel = "ERROR"
            
            If vDebugging = showMsgBox Then
                If vTitle = "" Then
                    MsgBox vDescription, vbOKOnly + vbCritical
                Else
                    MsgBox vDescription, vbOKOnly + vbCritical, vTitle
                End If
            Else
                If vTitle = "" Then
                    Debug.Print vDescription
                Else
                    Debug.Print vTitle & " --- " & vDescription
                End If
            End If
        Case ErrorLevel.nlsInfo
            cStrErrorLevel = "INFO"
            
            If vDebugging = showMsgBox Then
                If vTitle = "" Then
                    MsgBox vDescription, vbOKOnly + vbInformation
                Else
                    MsgBox vDescription, vbOKOnly + vbInformation, vTitle
                End If
            Else
                If vTitle = "" Then
                    Debug.Print vDescription
                Else
                    Debug.Print vTitle & " --- " & vDescription
                End If
            End If
        Case ErrorLevel.nlsWarning
            cStrErrorLevel = "ERROR"
            
            If vDebugging = showMsgBox Then
                If vTitle = "" Then
                    MsgBox vDescription, vbOKOnly + vbExclamation
                Else
                    MsgBox vDescription, vbOKOnly + vbExclamation, vTitle
                End If
            Else
                If vTitle = "" Then
                    Debug.Print vDescription
                Else
                    Debug.Print vTitle & " --- " & vDescription
                End If
            End If
    End Select
    
    If vSaveError Then
        Call LogMessage(vTitle, vDescription)
    End If
End Sub

'Es wird der Pfad zu dem Ordner "Eigene Dateien" ausgelesen
Private Function getMyDocumentsFolder() As String
    Dim WshShell As Object
    
    Set WshShell = CreateObject("WScript.Shell")
    getMyDocumentsFolder = WshShell.SpecialFolders("MyDocuments") & cNlsFolder
    Set WshShell = Nothing
    
    If Dir(getMyDocumentsFolder, vbDirectory) = "" Then
        MkDir getMyDocumentsFolder
    End If
End Function

Attribute VB_Name = "nls_XML_Reader"
Attribute VB_Base = "0{FCFB3D2A-A0FA-1068-A738-08002B3371B5}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = False
'#########################################################################################################################################
'!!!Diese Klasse Verwendet die Klasse nlc_LogError um Fehler speichern zu k|fffd|nnen!!!
'Es k|fffd|nnen XML Dateien ge|fffd|ffnet und gespeichert werden.
'Wenn im angegebenen Pfad keine XML Datei vorhanden ist, wird diese automatisch erstellt.
'#########################################################################################################################################

Option Explicit

Private Const cVersion = "V1.0"

'Private cError As New nlc_LogError
Private cXMLTemp() As String
Private cPath As String
Private cNlsFolder As String
Private cDecrypt As New nls_Decrypt
Private cErrorHandler As New nls_ErrorHandler

'Es werden die Standardparameter f|fffd|r die XML Schnittstelle gesetzt
Private Sub Class_Initialize()
    cNlsFolder = "\next level solutions"
    cPath = getMyDocumentsFolder() & "\" & tool & ".xml"
    ReDim cXMLTemp(0, 1)
    ReDim cOpenNodes(0)
    cDecrypt.Salt = tool
    
    Call checkVersion
End Sub

'Die Versionen der verwendeten Klassen wird gepr|fffd|ft
Private Sub checkVersion()
    Dim ErrorMsg As String
    
    If VBA.Left(cErrorHandler.Version, 3) <> "V1." Then
        ErrorMsg = "Wrong ErrorHandler Version!"
        GoTo handleErr
    End If
    
    If VBA.Left(cDecrypt.Version, 3) <> "V1." Then
        ErrorMsg = "Wrong Decrypt Version!"
        GoTo handleErr
    End If

    cErrorHandler.Debugging = True
    
    Exit Sub
    
handleErr:
    'Wenn andere ErrorHandler Version evtl. anderer aufruf der funktionalit|fffd|t
    If VBA.Left(cErrorHandler.Version, 3) = "V1." Then
        Call cErrorHandler.LogDebug(nlserror, ErrorMsg, "Wrong Version", True)
    End If
End Sub

'Allgemein
'Version ausgeben
Public Property Get Version() As String
    Version = cVersion
End Property

'Pfad ausgeben
Public Property Get Path() As String
    Path = cPath
End Property

'Pfad setzen
Public Property Let Path(vPath As String)
    cPath = vPath
End Property

Public Property Let Salt(vSalt As String)
    cDecrypt.Salt = vSalt
End Property

'Es wird der Pfad zu dem Ordner "Eigene Dateien" ausgelesen
Private Function getMyDocumentsFolder() As String
    Dim WshShell As Object

    Set WshShell = CreateObject("WScript.Shell")
    getMyDocumentsFolder = WshShell.SpecialFolders("MyDocuments") & cNlsFolder
    Set WshShell = Nothing
End Function

'Es wird ein XML File eingelesen und steht dann zum auslesen bereit
Public Function loadXML(Optional decrypt As Boolean = True)
    'Array leeren
    ReDim cXMLTemp(0, 1)

    Dim xmlLine As String
    Dim xmlReadFile

    xmlReadFile = FreeFile()
    Open cPath For Input As #xmlReadFile

    Do Until EOF(xmlReadFile)
        Input #xmlReadFile, xmlLine

        Call addNewLineToTemp

        If UBound(cXMLTemp) = 0 Then
            Call addReadHeader(xmlLine, decrypt)
            'cXMLTemp(UBound(cXMLTemp), 0) = xmlLine
        ElseIf checkIfNode(xmlLine) Then
            Call addReadNode(xmlLine, decrypt)
            'cXMLTemp(UBound(cXMLTemp), 0) = TrimNode(xmlLine)
        Else
            Call addReadValue(xmlLine, decrypt)
            'cXMLTemp(UBound(cXMLTemp), 0) = TrimValue(xmlLine)
        End If
    Loop

    Close #xmlReadFile
End Function

'Es wird gepr|fffd|ft die eingelesenen Zeile ein XML Knoten ist
Private Function checkIfNode(vXmlLine As String) As Boolean
    If VBA.InStr(1, vXmlLine, ">") = VBA.InStrRev(vXmlLine, ">") Then
        checkIfNode = True
    Else
        checkIfNode = False
    End If
End Function

'Es wird die die 1. Zeile aus dem XML ausgelesen
Private Function addReadHeader(vHeaderline As String, decrypt As Boolean)
    cXMLTemp(UBound(cXMLTemp), 0) = vHeaderline
End Function

'Ein wird die eingelesene Zeile als Knoten in den Temp Array gespeichert
Private Function addReadNode(vNodename As String, decrypt As Boolean)
    cXMLTemp(UBound(cXMLTemp), 0) = VBA.Mid(vNodename, VBA.InStr(1, vNodename, "<") + 1, VBA.Len(vNodename) - (VBA.InStr(1, vNodename, "<") + 1) - (VBA.Len(vNodename) - VBA.InStrRev(vNodename, ">")))
End Function

'Ein wird die eingelesene Zeile als Wert in den Temp Array gespeichert
Private Function addReadValue(vAttribute As String, decrypt As Boolean)
    Dim counter As Integer
    Dim startTagStart As Boolean
    Dim startTag As String
    Dim endTagStart As Boolean
    Dim endTag As String
    Dim attributeValue As String
    Dim attributeValueStart As Boolean
    Dim attributeValueEncoded As Boolean

    For counter = 1 To VBA.Len(vAttribute) Step 1
        If VBA.Mid(vAttribute, counter, 1) = " " And startTagStart = False Then
            GoTo weiter
        End If

        'Variante 1 immer Zeichen f|fffd|r Zeichen von links nach rechts durchgehen
        'Nachteil, wenn im Text die Zeichenkombination </ verwendet wird, wird dies als start f|fffd|r den EndTag gewertet
        'Variante 2 w|fffd|rde ich von links nach rechts den StartTag auslesen und von rechts nach links den EndTag, der rest in der mitte ist der Wert (noch nicht programmiert)
        If startTagStart = False And endTagStart = False And attributeValueStart = False Then
            If VBA.Mid(vAttribute, counter, 1) = " " Then
                GoTo weiter
            ElseIf VBA.Mid(vAttribute, counter, 1) = "<" Then
                startTagStart = True
            End If
        ElseIf startTagStart = True Then
            If VBA.Mid(vAttribute, counter, 1) = ">" Then
                startTagStart = False
                attributeValueStart = True
            Else
                If VBA.Mid(vAttribute, counter, 14) = "encoded=""true""" Then
                    attributeValueEncoded = True
                    counter = counter + 13
                Else
                    If VBA.Mid(vAttribute, counter, 1) <> " " Then
                        startTag = startTag & VBA.Mid(vAttribute, counter, 1)
                    End If
                End If
            End If
        ElseIf attributeValueStart = True Then
            If VBA.Mid(vAttribute, counter, 1) = "<" And VBA.Mid(vAttribute, counter + 1, 1) = "/" Then
                If attributeValueEncoded And decrypt Then
                    attributeValue = cDecrypt.decrypt(attributeValue)
                End If

                counter = counter + 1
                attributeValueStart = False
                endTagStart = True
            Else
                attributeValue = attributeValue & VBA.Mid(vAttribute, counter, 1)
            End If
        ElseIf endTagStart = True Then
            If VBA.Mid(vAttribute, counter, 1) = ">" Then
                endTagStart = False
                If startTag = endTag Then
                    cXMLTemp(UBound(cXMLTemp), 0) = startTag
                    cXMLTemp(UBound(cXMLTemp), 1) = attributeValue
                End If
            Else
                endTag = endTag & VBA.Mid(vAttribute, counter, 1)
            End If
        Else
            'Tag falsch eingelesen
        End If
weiter:
    Next counter

End Function

'Es wird ein Wert anhand des Tags ausgegeben
Public Function GetValue(vAttribute As String) As String
    Dim counter As Integer

    For counter = 0 To UBound(cXMLTemp) Step 1
        If cXMLTemp(counter, 0) = vAttribute Then
            GetValue = cXMLTemp(counter, 1)
            Exit Function
        End If
    Next counter

    GetValue = "NV"
End Function

'Es wird ein Array mit Werten anhand des Tags ausgelesen
Public Function GetListOfValues(vAttribute As String) As String()
    Dim counter As Integer
    Dim valueArray() As String
    ReDim valueArray(0)

    For counter = 0 To UBound(cXMLTemp) Step 1
        If cXMLTemp(counter, 0) = vAttribute Then
            If valueArray(0) <> "" Then
                ReDim Preserve valueArray(UBound(valueArray) + 1)
            End If

            valueArray(UBound(valueArray)) = cXMLTemp(counter, 1)
        End If
    Next counter

    GetListOfValues = valueArray
End Function

'Es wird eine neue Zeile im  Array angelegt (nur wenn das 1. Element nicht "" ist)
Private Function addNewLineToTemp()
    If UBound(cXMLTemp) <> 0 Or (UBound(cXMLTemp) = 0 And cXMLTemp(0, 0) <> "") Then
        Call ReDim2D(cXMLTemp, UBound(cXMLTemp) + 1, 1)
    End If
End Function

'Es wird ein 2 Dimensionaler Array ge|fffd|ndert, alle Werte bleiben enthalten
Private Sub ReDim2D(ByRef myArray As Variant, ByVal iDimX As Integer, ByVal iDimY As Integer)
  Dim MyTempArray As Variant
  Dim i As Integer
  Dim j As Integer

  MyTempArray = myArray

  ReDim myArray(iDimX, iDimY)

  For i = LBound(MyTempArray, 1) To UBound(MyTempArray, 1)
    For j = LBound(MyTempArray, 2) To UBound(MyTempArray, 2)
      If i <= iDimX And j <= iDimY Then
        myArray(i, j) = MyTempArray(i, j)
      End If
    Next j
  Next i
End Sub


' InQuest injected base64 decoded content
' [Mjg
' j)@r
' jZ "{
' %zkS

INQUEST-PP=macro
