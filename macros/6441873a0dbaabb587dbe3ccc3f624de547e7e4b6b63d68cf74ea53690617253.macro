Attribute VB_Name = "Module1"
'============================================================================
'= Name: Import Flowchart                                                   =
'= Version: 1.0                                                             =
'= Author: J.Forster                                                        =
'= Date: 29.03.2012                                                         =
'= Descr.: Program to generate Flowchart of daily input                     =
'============================================================================


Option Explicit ' Genaue Deklaration der Variablen wird erzwungen

' Datentyp aller Werte im Ablaufdiagramm, darin werden die eingelesenen Werte gespeichert
Public Type Ablauf_UDT
        
 AVIS_S As Integer          ' Avis Service
 AVIS_RL As Integer         ' Avis ReturnLeasing
 WE_S As Integer            ' WE Service
 WE_RL As Integer           ' WE ReturnLeasing
 DIAG As Integer            ' Diagnose
 WA_ZU_MOTO As Integer      ' WA zu Moto (erfasst)
 MOTOROLA As Integer        ' Bestand bei Motorola
 WE_VON_MOTO As Integer     ' WE von Moto (erfasst)
 S_POOL As Integer          ' Geraetepool
 S_POOL_OHNE As Integer     ' Geraetepool ohne SIM
 WA_ZU_GLS_S As Integer     ' WA zu GLS (erfasst)
 WA_ZU_GLS_IT As Integer    ' WA zu GLS IT (erfasst)
 GLS_IT As Integer          ' Bestand GLS IT
 KLAERFALL As Integer       ' Klaerfaelle
 DEFEKT As Integer          ' Defekt Ger|fffd|te ohne Wartung
 NEU_LAGER As Integer       ' Neuinstall. gelagert in DD
 NEU_INST_KONFIG As Integer ' Neuinstall. zur Konfig. erfasst
 NEU_INST_WA_GLS As Integer ' Neuinstall. zum WA zu GLS erfasst
 NEU_INST_VERSAND As Integer    ' Neuinstall. zum Versand erfasst
 CC_MC3090_NEW As Integer       ' Car Charger MC3090 neu
 CC_MC3090_UNCHECKED As Integer ' Car Charger MC3090 ungeprueft
 CC_MC3090_USED As Integer      ' Car Charger MC3090 gebraucht
 CC_MC9596_NEW As Integer       ' Car Charger MC9596 neu
 CC_MC9596_UNCHECKED As Integer ' Car Charger MC9596 ungeprueft
 CC_MC9596_USED As Integer      ' KFZ Halterung MC9596 gebraucht
 SD_CARD As Integer         ' Neue 4GB SD Karten in DD
 SD_CARD_8 As Integer       ' Neue 8GB SD Karten in DD
 SD_CARD_OLD As Integer     ' Alte SD Karten in DD
 SD_CARD_USED As Integer    ' Gebrauchte SD Karten in DD
 SD_CARD_DEFECT As Integer  ' Defekte SD Karten in DD
 SIM_CARD As Integer        ' Neue SIM Karten in DD
 SIM_CARD_USED As Integer   ' Gebrauchte SIM Karten in DD
 NEU_INST_OFFEN As Integer  ' offene Neuinstall.
 S_OFFEN As Integer         ' offener Service
 POOL_IN_S As Integer       ' Servicegeraete zum Pool
 POOL_IN_R As Integer       ' RLgeraete zum Pool
 WE_MOTO_DAILY As Integer   ' taegl. WE von Moto
 WA_MOTO_DAILY As Integer   ' taegl. WA zu Moto
 WA_GEO_DAILY_S As Integer  ' taegl. WA zu GLS
 WE_GEO_DAILY_S As Integer  ' taegl. WE von GLS Servicegeraete
 WE_GEO_DAILY_R As Integer  ' taegl. WE von GLS RLgeraete
 WA_NEU_INST_DAILY As Integer   ' taegl. WA an Neuinstall.
 REPAIR_BRNO As Integer     ' Geraete in Reparatur in Brno
 WA_BRNO As Integer         ' WA in Brno
 WE_BRNO As Integer         ' WE in Brno
 WAITING_PARTS As Integer   ' auf Teile wartend in Brno
End Type
     
     

     
    

' Datentyp mit Fehlerdaten
Public Type Fehler_UDT
   'zweidimensionales Feld mit 2(0-1) x 17(0-16) Stellen 1.Index Fehlernummer, 2.Index Fehleranzahl
   F_Count(16, 1) As Integer
   ' gesamte Anzahl an Fehlern
   gesamt_anzahl As Integer
End Type

' Datentyp mit Fehlerdaten fuer alle Stati
Public Type Fehler_Gesamt
     fehler_rl_gls_mc3090 As Fehler_UDT         ' GLS Fehlerdaten von RL Geraet MC3090
     fehler_rl_ibm_mc3090 As Fehler_UDT         ' IBM Fehlerdaten von RL Geraet MC3090
     fehler_rl_moto_mc3090 As Fehler_UDT        ' MOTO Fehlerdaten von RL Geraet MC3090
     fehler_service_gls_mc3090 As Fehler_UDT    ' GLS Fehlerdaten von Serv Geraet MC3090
     fehler_service_ibm_mc3090 As Fehler_UDT    ' IBM Fehlerdaten von Serv Geraet MC3090
     fehler_service_moto_mc3090 As Fehler_UDT   ' MOTO Fehlerdaten von Serv Geraet MC3090
     fehler_rl_gls_mc9596 As Fehler_UDT         ' GLS Fehlerdaten von RL Geraet MC9596
     fehler_rl_ibm_mc9596 As Fehler_UDT         ' IBM Fehlerdaten von RL Geraet MC9596
     fehler_rl_moto_mc9596 As Fehler_UDT        ' MOTO Fehlerdaten von RL Geraet MC9596
     fehler_service_gls_mc9596 As Fehler_UDT    ' GLS Fehlerdaten von Serv Geraet MC9596
     fehler_service_ibm_mc9596 As Fehler_UDT    ' IBM Fehlerdaten von Serv Geraet MC9596
     fehler_service_moto_mc9596 As Fehler_UDT   ' MOTO Fehlerdaten von Serv Geraet MC9596
End Type
       
   

'========================================================================================
'= Function: Get_Row                                                                    =
'=                                                                                      =
'= Descr.:   Returns the row number the string specified by such_string was found.      =
'=           The column to search in is specified by such_spalte                        =
'=           Sheetname contains the name of the sheet to search in,                     =
'=           reihen_anzahl contains the row count                                       =
'========================================================================================
Function Get_Row(such_string As String, such_spalte As Integer, reihen_anzahl As Integer, sheetname As String) As Integer
    
    Dim reihen_zaehler As Integer
    
    'durchlaeuft alle reihen des Arbeitsblattes mit dem Namen sheetname
    For reihen_zaehler = 2 To reihen_anzahl
        ' Falls such_string in Zelle, die durch such_spalte und den aktuellen reihen_zaehler bestimmt ist,
        ' gefunden wurde,
        If Sheets(sheetname).Cells(reihen_zaehler, such_spalte) = such_string Then
            ' ... Rueckgabe der aktuellen reihe
            Get_Row = reihen_zaehler
            ' verlasse Function
            Exit Function
        End If
    Next reihen_zaehler
    
    ' Fehlerausgabe, Beschreibung siehe Dokumentation
    Debug.Print ("--------------------Fehlercode:1001  Fehler in Get_Row, Zeile nicht gefunden!--------------------")
    Debug.Print ("Parameter: " + such_string + " " + CStr(such_spalte) + " " + CStr(reihen_anzahl) + " " + sheetname)
    Debug.Print ("--------------------------------------------------------------------------------------------------")
    ' Rueckgabewert, falls Fehler aufgetaucht -1
    Get_Row = -1
    
    
End Function

'========================================================================================
'= Function: Get_Row_3_args                                                             =
'=                                                                                      =
'= Descr.:   Returns the row number if the string specified by such_string_1 was found  =
'=           was found in column such_spalte_1 , the string specified by such_string_2  =
'=           in column such_spalte_2 and the string specified by such_string_3 was found=
'=           in column such_spalte_3                                                    =
'=           Sheetname contains the name of the sheet to search in,                     =
'=           reihen_anzahl contains row count                                           =
'=           Returns -1 if the string wasn't found                                      =
'========================================================================================
Function Get_Row_3_args(such_string_1 As String, such_string_2 As String, such_string_3 As String, _
such_spalte_1 As Integer, such_spalte_2 As Integer, such_spalte_3 As Integer, reihen_anzahl As Integer, _
sheetname As String) As Integer
    
    Dim reihen_zaehler As Integer
    
    'durchlaeuft alle reihen des Arbeitsblattes mit dem Namen sheetname
    For reihen_zaehler = 2 To reihen_anzahl
        ' Falls such_string_1 bzw. _2, _3 in Zellen, die durch such_spalte_1 bzw. _2, _3 und den aktuellen reihen_zaehler bestimmt sind,
        ' gefunden wurden,
        If (Sheets(sheetname).Cells(reihen_zaehler, such_spalte_1) = such_string_1) And _
         (Sheets(sheetname).Cells(reihen_zaehler, such_spalte_2) = such_string_2) And _
         (Sheets(sheetname).Cells(reihen_zaehler, such_spalte_3) = such_string_3) Then
            ' ... Rueckgabe der aktuellen reihe
            Get_Row_3_args = reihen_zaehler
            ' verlasse Function
            Exit Function
        End If
    Next reihen_zaehler
    ' Fehlerausgabe, Beschreibung siehe Dokumentation
    Debug.Print ("--------------------Fehlercode:1101  Fehler in Get_Row3_args, Zeile nicht gefunden!--------------------")
    Debug.Print ("Parameter: " + such_string_1 + " " + such_string_2 + " " + such_string_3)
    Debug.Print ("Parameter: " + CStr(such_spalte_1) + " " + CStr(such_spalte_2) + " " + CStr(such_spalte_3) + " " + CStr(reihen_anzahl) + " " + sheetname)
    Debug.Print ("-------------------------------------------------------------------------------------------------------")
    ' Rueckgabewert, falls Fehler aufgetaucht -1
    Get_Row_3_args = -1
    
End Function

'========================================================================================
'= Function: Get_Column                                                                 =
'=                                                                                      =
'= Descr.:   Returns the column number the string specified by such_string was found in =
'=           This function only searches for the string in the first row                =
'=           Sheetname contains the name of the sheet to search in,                     =
'=           reihen_anzahl contains row count                                           =
'=           Returns -1 if the string wasn't found.                                     =
'========================================================================================
Function Get_Column(such_string As String, spalten_anzahl As Integer, sheetname As String) As Integer
    Dim spalten_zaehler As Integer
    
    'durchlaeuft alle Spalten des Arbeitsblattes mit dem Namen sheetname
    For spalten_zaehler = 1 To spalten_anzahl
        ' Falls such_string in Zelle, die durch spalten_zaehler und Reihe 1 bestimmt ist,
        ' gefunden wurde, (UCase)-> Zeichenkette in Grossbuchstaben
        If UCase(Sheets(sheetname).Cells(1, spalten_zaehler)) = UCase(such_string) Then
            ' ... Rueckgabe der Spalte
            Get_Column = spalten_zaehler
            ' verlasse Function
            Exit Function
        End If
    Next spalten_zaehler
    'Fehlerausgabe
    Debug.Print ("--------------------Fehlercode:1201  Fehler in Get_Column, Zeile nicht gefunden!--------------------")
    Debug.Print ("Parameter: " + such_string + " " + CStr(spalten_anzahl) + " " + sheetname)
    Debug.Print ("-------------------------------------------------------------------------------------------------------")
    ' Rueckgabewert, falls Fehler aufgetaucht -1
    Get_Column = -1
    
End Function


'========================================================================================
'= Function: Get_Value                                                                  =
'=                                                                                      =
'= Descr.: Searches for the column specified by such_string_descr_top and stores the    =
'=         row in which such_string_value is found. Then returns the value of the cell  =
'=         with the stored row and the column, which is given in such_string_value_top  =
'=         Sheetname contains the name of the sheet to search in,                       =
'=         reihen_anzahl contains row count, spalten_anzahl contains column count       =
'=         Returns -1 if the string wasn't found.                                       =
'========================================================================================
Function Get_Value(such_string_descr_top As String, such_string_value_top As String, such_string_value As String, _
spalten_anzahl As Integer, reihen_anzahl As Integer, sheetname As String) As Integer
    
    Dim descr_column As Integer
    Dim value_column As Integer
    Dim value_row As Integer
    
    ' Liefert Spalte in der die Bezeichnung der einzelnen Aktionen (WE / WA / etc.) steht
    descr_column = Get_Column(such_string_descr_top, spalten_anzahl, sheetname)
    ' Falls eine Spalte gefunden wurde (<>-1), dann...
    If descr_column <> -1 Then
        ' ... liefere Spalte zur|fffd|ck in der die Anzahl der Geraete zu finden ist
        value_column = Get_Column(such_string_value_top, spalten_anzahl, sheetname)
        ' Falls eine Spalte gefunden wurde (<>-1), dann...
        If value_column <> -1 Then
            ' ... liefere Reihe zur|fffd|ck in der die Anzahl der Geraete zu finden ist
            value_row = Get_Row(such_string_value, descr_column, reihen_anzahl, sheetname)
            ' Falls eine Reihe gefunden wurde (<>-1), dann...
            If value_row <> -1 Then
                ' ... liefere Anzahl der Geraete zurueck
                Get_Value = Sheets(sheetname).Cells(value_row, value_column)
            Else
                 ' Rueckgabewert, falls Fehler aufgetaucht -1
                Get_Value = -1
                End If
            
        Else
             ' Rueckgabewert, falls Fehler aufgetaucht -1
            Get_Value = -1
             End If
        
    Else
        ' Rueckgabewert, falls Fehler aufgetaucht -1
        Get_Value = -1
          End If
End Function

'========================================================================================
'= Function: Get_Error                                                                  =
'=                                                                                      =
'= Descr.:   Returns the amount of an error specified by err_typ                        =
'=           More detailed description in code comments                                 =
'=           Returns -1 if err_typ couldn't be found                                    =
'========================================================================================
Function Get_Error(such_vorgang_descr As String, such_typ_descr As String, such_code_descr As String, _
    such_vorgang_value As String, such_typ_value As String, such_code_value As String, _
    spalten_anzahl As Integer, reihen_anzahl As Integer, sheetname As String, err_typ As String) As Integer
    
    Dim vorgang_descr_column As Integer
    Dim typ_descr_column As Integer
    Dim code_descr_column As Integer
    Dim value_row As Integer
    Dim value_column As Integer
    
    ' Liefert "Vorgang"(in Parameter such_vorgang_descr) Spaltennummer in Blatt "FehlerAmTag" (in Parameter sheetname) zurueck
    vorgang_descr_column = Get_Column(such_vorgang_descr, spalten_anzahl, sheetname)
    ' Liefert "Typ"(in Parameter such_typ_descr) Spaltennummer in Blatt "FehlerAmTag" (in Parameter sheetname) zurueck
    typ_descr_column = Get_Column(such_typ_descr, spalten_anzahl, sheetname)
    ' Liefert "Code"(in Parameter such_code_descr) Spalte in Blatt "FehlerAmTag" (in Parameter sheetname) zurueck
    code_descr_column = Get_Column(such_code_descr, spalten_anzahl, sheetname)
    
    ' Falls die oberen 3 Spalten gefunden wurden (<>-1), ...
    If (vorgang_descr_column <> -1) And (typ_descr_column <> -1) And (code_descr_column <> -1) Then
            ' ...suche Reihe in der die durch die Parameter such_vorgang_value, such_typ_value, such_code_value gegbenen Wert zu finden sind
            value_row = Get_Row_3_args(such_vorgang_value, such_typ_value, such_code_value, vorgang_descr_column, _
            typ_descr_column, code_descr_column, reihen_anzahl, sheetname)
            ' Falls Reihe gefunden wurde, ...
            If value_row <> -1 Then
                ' ...suche Fehler-Spalte (F101-F117), durch Parameter err_typ bestimmt
                value_column = Get_Column(err_typ, spalten_anzahl, sheetname)
                ' Liefere Anzahl des Fehlers err_typ zurueck
                If value_column <> -1 Then
                    Get_Error = Sheets(sheetname).Cells(value_row, value_column)
                Else
                    Get_Error = -1
                End If
            Else
                ' Falls Reihe nicht gefunden wurde, Rueckgabewert -1
                Get_Error = -1
                
            End If
            
    Else
        'Falls Spalten nicht gefunden wurden, Rueckgabewert -1
        Get_Error = -1

    End If

End Function


'========================================================================================
'= Function: Get_All_Errors                                                             =
'=                                                                                      =
'= Descr.:   Uses Get_Error to retrieve all errors of a model specified by              =
'=           s_vorgang_val, s_typ_val and s_code_val                                    =
'=           More detailed description in code comments and manual                      =
'=           Returns an array of error amounts                                          =
'========================================================================================
Function Get_All_Errors(sheetname As String, s_vorgang_val As String, s_typ_val As String, s_code_val As String) As Fehler_UDT

    Dim Service_Errors As Fehler_UDT
   
    Dim spalten_anzahl As Integer
    Dim reihen_anzahl As Integer
    
    Const vorgang As String = "Vorgang"
    Const typ As String = "Typ"
    Const CODE As String = "Code"
    
    ' Speichere Anzahl der Reihen in Blatt, dessen Name in sheetname gespeichert ist, in reihen_anzahl
    reihen_anzahl = Sheets(sheetname).Cells(Cells.Rows.Count, 1).End(xlUp).Row
    ' Speichere Anzahl der Spalten in Blatt, dessen Name in shetname gespeichert ist, in spalten_anzahl
    spalten_anzahl = Sheets(sheetname).Columns.Count
        
    ' Fehler fuer Fehlercodes F101-F114 werden in F_Count eingelesen
    With Service_Errors
        .F_Count(0, 1) = Get_Error(vorgang, typ, CODE, s_vorgang_val, s_typ_val, _
        s_code_val, spalten_anzahl, reihen_anzahl, sheetname, "F101")
        .F_Count(1, 1) = Get_Error(vorgang, typ, CODE, s_vorgang_val, s_typ_val, _
        s_code_val, spalten_anzahl, reihen_anzahl, sheetname, "F102")
        .F_Count(2, 1) = Get_Error(vorgang, typ, CODE, s_vorgang_val, s_typ_val, _
        s_code_val, spalten_anzahl, reihen_anzahl, sheetname, "F103")
        .F_Count(3, 1) = Get_Error(vorgang, typ, CODE, s_vorgang_val, s_typ_val, _
        s_code_val, spalten_anzahl, reihen_anzahl, sheetname, "F104")
        .F_Count(4, 1) = Get_Error(vorgang, typ, CODE, s_vorgang_val, s_typ_val, _
        s_code_val, spalten_anzahl, reihen_anzahl, sheetname, "F105")
        .F_Count(5, 1) = Get_Error(vorgang, typ, CODE, s_vorgang_val, s_typ_val, _
        s_code_val, spalten_anzahl, reihen_anzahl, sheetname, "F106")
        .F_Count(6, 1) = Get_Error(vorgang, typ, CODE, s_vorgang_val, s_typ_val, _
        s_code_val, spalten_anzahl, reihen_anzahl, sheetname, "F107")
        .F_Count(7, 1) = Get_Error(vorgang, typ, CODE, s_vorgang_val, s_typ_val, _
        s_code_val, spalten_anzahl, reihen_anzahl, sheetname, "F108")
        .F_Count(8, 1) = Get_Error(vorgang, typ, CODE, s_vorgang_val, s_typ_val, _
        s_code_val, spalten_anzahl, reihen_anzahl, sheetname, "F109")
        .F_Count(9, 1) = Get_Error(vorgang, typ, CODE, s_vorgang_val, s_typ_val, _
        s_code_val, spalten_anzahl, reihen_anzahl, sheetname, "F110")
        .F_Count(10, 1) = Get_Error(vorgang, typ, CODE, s_vorgang_val, s_typ_val, _
        s_code_val, spalten_anzahl, reihen_anzahl, sheetname, "F111")
        .F_Count(11, 1) = Get_Error(vorgang, typ, CODE, s_vorgang_val, s_typ_val, _
        s_code_val, spalten_anzahl, reihen_anzahl, sheetname, "F112")
        .F_Count(12, 1) = Get_Error(vorgang, typ, CODE, s_vorgang_val, s_typ_val, _
        s_code_val, spalten_anzahl, reihen_anzahl, sheetname, "F113")
        .F_Count(13, 1) = Get_Error(vorgang, typ, CODE, s_vorgang_val, s_typ_val, _
        s_code_val, spalten_anzahl, reihen_anzahl, sheetname, "F114")
        .F_Count(14, 1) = Get_Error(vorgang, typ, CODE, s_vorgang_val, s_typ_val, _
        s_code_val, spalten_anzahl, reihen_anzahl, sheetname, "F115")
        .F_Count(15, 1) = Get_Error(vorgang, typ, CODE, s_vorgang_val, s_typ_val, _
        s_code_val, spalten_anzahl, reihen_anzahl, sheetname, "F116")
        .F_Count(16, 1) = Get_Error(vorgang, typ, CODE, s_vorgang_val, s_typ_val, _
        s_code_val, spalten_anzahl, reihen_anzahl, sheetname, "F117")
        
        
        'Fehlerindex der einzelnen Fehler wird in Feld F_count gespeichert (zur Sortierung und Zuordnung benoetigt)
        .F_Count(0, 0) = 0
        .F_Count(1, 0) = 1
        .F_Count(2, 0) = 2
        .F_Count(3, 0) = 3
        .F_Count(4, 0) = 4
        .F_Count(5, 0) = 5
        .F_Count(6, 0) = 6
        .F_Count(7, 0) = 7
        .F_Count(8, 0) = 8
        .F_Count(9, 0) = 9
        .F_Count(10, 0) = 10
        .F_Count(11, 0) = 11
        .F_Count(12, 0) = 12
        .F_Count(13, 0) = 13
        .F_Count(14, 0) = 14
        .F_Count(15, 0) = 15
        .F_Count(16, 0) = 16
        
        ' Gesamt Anzahl aller Fehler zu bestimmten Geraet wird in gesamt_anzahl gespeichert
        .gesamt_anzahl = Get_Error(vorgang, typ, CODE, s_vorgang_val, s_typ_val, _
        s_code_val, spalten_anzahl, reihen_anzahl, sheetname, "Anz-Ger|fffd|te")
        
    End With
    
    Get_All_Errors = Service_Errors

End Function






'========================================================================================
'= Function: Get_Asset                                                                  =
'=                                                                                      =
'= Descr.:   Returns the user-defined-type Ablauf_UDT with all amounts of assets   =
'=           listed in the daily report                                                 =
'=           More detailed description in code comments and manual                      =
'========================================================================================
Function Get_Asset(sheetname As String, modell As String) As Ablauf_UDT
    
    Dim Asset_Ablauf As Ablauf_UDT
     
    Dim spalten_anzahl As Integer
    Dim reihen_anzahl As Integer
    
' Konstanten fuer die Bezeichnungsfelder in Statusblaettern (MC3090 / MC9596)

Const C_AVIS_S As String = "AVIS Service"
Const C_AVIS_RL As String = "AVIS ReturnLeasing"
Const C_WE_S As String = "WE Service"
Const C_WE_RL As String = "WE ReturnLeasing"
Const C_DIAG As String = "DIAGNOSE"
Const C_WA_ZU_MOTO As String = "WA zu Motorola"
Const C_MOTOROLA As String = "MOTOROLA"
Const C_WE_VON_MOTO As String = "WE von Motorola"
Const C_S_POOL As String = "Service Pool"
Const C_S_POOL_OHNE As String = "Service Pool ohne SIM"
Const C_WA_ZU_GLS_S As String = "WA zu GLS Service"
Const C_WA_ZU_GLS_IT As String = "WA zu GLS_IT"
Const C_GLS_IT As String = "GLS_IT"
Const C_KLAERFALL As String = "KL|fffd|RFALL"
Const C_DEFEKT As String = "Defekt Ger|fffd|te ohne Wartung"
Const C_NEU_LAGER As String = "Neu Ger|fffd|te Lager"
Const C_NEU_INST_KONFIG As String = "NeuInstallation Konfig"
Const C_NEU_INST_WA_GLS As String = "NeuInstallation WA zu GLS"
Const C_NEU_INST_VERSAND As String = "NeuInstallation Versand"

Const C_CC_MC3090_NEW As String = "Car Charger E.P.M f|fffd|r MC3090 neu"
Const C_CC_MC3090_UNCHECKED As String = "Car Charger E.P.M f|fffd|r MC3090 RL ungepr|fffd|ft"
Const C_CC_MC3090_USED As String = "Car Charger E.P.M f|fffd|r MC3090 used"

Const C_CC_MC9596_NEW As String = "Car Charger MC9596 neu"
Const C_CC_MC9596_UNCHECKED As String = "Car Charger MC9596 ungepr|fffd|ft"
Const C_CC_MC9596_USED As String = "KFZ Halterung MC9596 gebraucht"

Const C_SD_CARD As String = "SD Card  4GB micro ohne Adapter"
Const C_SD_CARD_8 As String = "SD Card Transcend 8GB micro C10, MLC, ohne Adapter"
Const C_SD_CARD_OLD As String = "SD Card  micro Alte Karten GLS"
Const C_SD_CARD_USED As String = "SD Card microSD ohne Adapter"
Const C_SD_CARD_DEFECT As String = "SD Card microSD ohne Adapter defekt"
Const C_SIM_CARD As String = "SIM Card VODAFON UMTS"
Const C_SIM_CARD_USED As String = "SIM Card VODAFON UMTS gebraucht"

Const C_WE_BRNO As String = "TOMOTO"
Const C_WA_BRNO As String = "TODRE"

Const DESCR As String = "BEZEICHNUNG"
Const ANZAHL As String = "ANZAHL"
    
Dim C_NEU_INST_OFFEN As String
    C_NEU_INST_OFFEN = "NeuInstallation offene Ger|fffd|te " + modell
Dim C_S_OFFEN As String
    C_S_OFFEN = "SERVICE offene Ger|fffd|te " + modell
Dim C_POOL_IN_S As String
    C_POOL_IN_S = "POOLIN Ger|fffd|te " + modell + " Service"
Dim C_POOL_IN_R As String
    C_POOL_IN_R = "POOLIN Ger|fffd|te " + modell + " ReturnLeasing"
Dim C_WE_MOTO_DAILY As String
    C_WE_MOTO_DAILY = "Wareneingang MOTOROLA " + modell
Dim C_WA_MOTO_DAILY As String
    C_WA_MOTO_DAILY = "Warenausgang MOTOROLA " + modell
Dim C_WA_GEO_DAILY_S As String
    C_WA_GEO_DAILY_S = "Warenausgang Service " + modell
Dim C_WE_GEO_DAILY_S As String
    C_WE_GEO_DAILY_S = "Wareneingang Service " + modell
Dim C_WE_GEO_DAILY_R As String
    C_WE_GEO_DAILY_R = "Wareneingang Return Leasing " + modell
Dim C_WA_NEU_INST_DAILY As String
    C_WA_NEU_INST_DAILY = "Warenausgang Neuinstallation " + modell
    
    ' Speichere Anzahl der Reihen in Blatt, dessen Name in sheetname gespeichert ist, in reihen_anzahl
    reihen_anzahl = Sheets(sheetname).Cells(Cells.Rows.Count, Get_Column("BEZEICHNUNG", 256, sheetname)).End(xlUp).Row
    ' Speichere Anzahl der Spalten in Blatt, dessen Name in sheetname gespeichert ist, in spalten_anzahl
    spalten_anzahl = Sheets(sheetname).Columns.Count
        
    ' Speichere alle Werte aus dem durch den Parameter sheetname bestimmten Blatt (entweder MC9596 / MC3090)
    With Asset_Ablauf
        .AVIS_RL = Get_Value(DESCR, ANZAHL, C_AVIS_RL, spalten_anzahl, reihen_anzahl, sheetname)
        .AVIS_S = Get_Value(DESCR, ANZAHL, C_AVIS_S, spalten_anzahl, reihen_anzahl, sheetname)
        .DIAG = Get_Value(DESCR, ANZAHL, C_DIAG, spalten_anzahl, reihen_anzahl, sheetname)
        .GLS_IT = Get_Value(DESCR, ANZAHL, C_GLS_IT, spalten_anzahl, reihen_anzahl, sheetname)
        .KLAERFALL = Get_Value(DESCR, ANZAHL, C_KLAERFALL, spalten_anzahl, reihen_anzahl, sheetname)
        .DEFEKT = Get_Value(DESCR, ANZAHL, C_DEFEKT, spalten_anzahl, reihen_anzahl, sheetname)
        .MOTOROLA = Get_Value(DESCR, ANZAHL, C_MOTOROLA, spalten_anzahl, reihen_anzahl, sheetname)
        .NEU_INST_KONFIG = Get_Value(DESCR, ANZAHL, C_NEU_INST_KONFIG, spalten_anzahl, reihen_anzahl, sheetname)
        .NEU_INST_OFFEN = Get_Value(DESCR, ANZAHL, C_NEU_INST_OFFEN, spalten_anzahl, reihen_anzahl, sheetname)
        .NEU_INST_VERSAND = Get_Value(DESCR, ANZAHL, C_NEU_INST_VERSAND, spalten_anzahl, reihen_anzahl, sheetname)
        .NEU_INST_WA_GLS = Get_Value(DESCR, ANZAHL, C_NEU_INST_WA_GLS, spalten_anzahl, reihen_anzahl, sheetname)
        .NEU_LAGER = Get_Value(DESCR, ANZAHL, C_NEU_LAGER, spalten_anzahl, reihen_anzahl, sheetname)
        .POOL_IN_R = Get_Value(DESCR, ANZAHL, C_POOL_IN_R, spalten_anzahl, reihen_anzahl, sheetname)
        .POOL_IN_S = Get_Value(DESCR, ANZAHL, C_POOL_IN_S, spalten_anzahl, reihen_anzahl, sheetname)
        .S_OFFEN = Get_Value(DESCR, ANZAHL, C_S_OFFEN, spalten_anzahl, reihen_anzahl, sheetname)
        .S_POOL = Get_Value(DESCR, ANZAHL, C_S_POOL, spalten_anzahl, reihen_anzahl, sheetname)
        .S_POOL_OHNE = Get_Value(DESCR, ANZAHL, C_S_POOL_OHNE, spalten_anzahl, reihen_anzahl, sheetname)
        .WA_GEO_DAILY_S = Get_Value(DESCR, ANZAHL, C_WA_GEO_DAILY_S, spalten_anzahl, reihen_anzahl, sheetname)
        .WA_MOTO_DAILY = Get_Value(DESCR, ANZAHL, C_WA_MOTO_DAILY, spalten_anzahl, reihen_anzahl, sheetname)
        .WA_NEU_INST_DAILY = Get_Value(DESCR, ANZAHL, C_WA_NEU_INST_DAILY, spalten_anzahl, reihen_anzahl, sheetname)
        .WA_ZU_GLS_IT = Get_Value(DESCR, ANZAHL, C_WA_ZU_GLS_IT, spalten_anzahl, reihen_anzahl, sheetname)
        .WA_ZU_GLS_S = Get_Value(DESCR, ANZAHL, C_WA_ZU_GLS_S, spalten_anzahl, reihen_anzahl, sheetname)
        .WA_ZU_MOTO = Get_Value(DESCR, ANZAHL, C_WA_ZU_MOTO, spalten_anzahl, reihen_anzahl, sheetname)
        .WE_GEO_DAILY_R = Get_Value(DESCR, ANZAHL, C_WE_GEO_DAILY_R, spalten_anzahl, reihen_anzahl, sheetname)
        .WE_GEO_DAILY_S = Get_Value(DESCR, ANZAHL, C_WE_GEO_DAILY_S, spalten_anzahl, reihen_anzahl, sheetname)
        .WE_MOTO_DAILY = Get_Value(DESCR, ANZAHL, C_WE_MOTO_DAILY, spalten_anzahl, reihen_anzahl, sheetname)
        .WE_RL = Get_Value(DESCR, ANZAHL, C_WE_RL, spalten_anzahl, reihen_anzahl, sheetname)
        .WE_S = Get_Value(DESCR, ANZAHL, C_WE_S, spalten_anzahl, reihen_anzahl, sheetname)
        .WE_VON_MOTO = Get_Value(DESCR, ANZAHL, C_WE_VON_MOTO, spalten_anzahl, reihen_anzahl, sheetname)
        .WE_BRNO = Get_Value(DESCR, ANZAHL, C_WE_BRNO, spalten_anzahl, reihen_anzahl, sheetname)
        .WA_BRNO = Get_Value(DESCR, ANZAHL, C_WA_BRNO, spalten_anzahl, reihen_anzahl, sheetname)
        '.REPAIR_BRNO = Get_Value(DESCR, ANZAHL, C_REPAIR_BRNO, spalten_anzahl, reihen_anzahl, sheetname)
        .REPAIR_BRNO = Count_Occurence("GLSMOTINFO", "Vorgang", "In Process", "Ger|fffd|te", modell)
        '.WAITING_PARTS = Get_Value(DESCR, ANZAHL, C_WAITING_PARTS, spalten_anzahl, reihen_anzahl, sheetname)
        .WAITING_PARTS = Count_Occurence("GLSMOTINFO", "Vorgang", "WaitingParts", "Ger|fffd|te", modell)
        ' Fallunterscheidung, da fuer MC3090 und MC9596 unterschiedliche Bezeichnungen vorhanden sind
        If modell = "MC9596" Then
            .CC_MC9596_NEW = Get_Value(DESCR, ANZAHL, C_CC_MC9596_NEW, spalten_anzahl, reihen_anzahl, sheetname)
            .CC_MC9596_UNCHECKED = Get_Value(DESCR, ANZAHL, C_CC_MC9596_UNCHECKED, spalten_anzahl, reihen_anzahl, sheetname)
            .CC_MC9596_USED = Get_Value(DESCR, ANZAHL, C_CC_MC9596_USED, spalten_anzahl, reihen_anzahl, sheetname)
            .SD_CARD = Get_Value(DESCR, ANZAHL, C_SD_CARD, spalten_anzahl, reihen_anzahl, sheetname)
            .SD_CARD_8 = Get_Value(DESCR, ANZAHL, C_SD_CARD_8, spalten_anzahl, reihen_anzahl, sheetname)
            .SD_CARD_OLD = Get_Value(DESCR, ANZAHL, C_SD_CARD_OLD, spalten_anzahl, reihen_anzahl, sheetname)
            .SD_CARD_USED = Get_Value(DESCR, ANZAHL, C_SD_CARD_USED, spalten_anzahl, reihen_anzahl, sheetname)
            .SD_CARD_DEFECT = Get_Value(DESCR, ANZAHL, C_SD_CARD_DEFECT, spalten_anzahl, reihen_anzahl, sheetname)
            .SIM_CARD = Get_Value(DESCR, ANZAHL, C_SIM_CARD, spalten_anzahl, reihen_anzahl, sheetname)
            .SIM_CARD_USED = Get_Value(DESCR, ANZAHL, C_SIM_CARD_USED, spalten_anzahl, reihen_anzahl, sheetname)
        ElseIf modell = "MC3090" Then
            .CC_MC3090_NEW = Get_Value(DESCR, ANZAHL, C_CC_MC3090_NEW, spalten_anzahl, reihen_anzahl, sheetname)
            .CC_MC3090_UNCHECKED = Get_Value(DESCR, ANZAHL, C_CC_MC3090_UNCHECKED, spalten_anzahl, reihen_anzahl, sheetname)
            .CC_MC3090_USED = Get_Value(DESCR, ANZAHL, C_CC_MC3090_USED, spalten_anzahl, reihen_anzahl, sheetname)
       End If
        
        
        
    End With
    ' Rueckgabe aller Statusdaten
    Get_Asset = Asset_Ablauf
    
End Function

'========================================================================================
'= Function: Sum_Error                                                                  =
'=                                                                                      =
'= Descr.:   Returns the user-defined-type Fehler_Gesamt with all amounts of errors of  =
'=           all devices                                                                =
'=           More detailed description in code comments and manual                      =
'========================================================================================
Function Sum_Error(sheetname As String) As Fehler_Gesamt
    Dim Fehler_Report As Fehler_Gesamt
        ' Speichert alle Fehlerdaten fuer jedes unterschiedliche Geraet
        With Fehler_Report
            .fehler_service_gls_mc3090 = Get_All_Errors(sheetname, "Service", "MC3090", "GLS")
            .fehler_service_ibm_mc3090 = Get_All_Errors(sheetname, "Service", "MC3090", "IBM")
            .fehler_service_moto_mc3090 = Get_All_Errors(sheetname, "Service", "MC3090", "MOTOROLA")
            .fehler_service_gls_mc9596 = Get_All_Errors(sheetname, "Service", "MC9596", "GLS")
            .fehler_service_ibm_mc9596 = Get_All_Errors(sheetname, "Service", "MC9596", "IBM")
            .fehler_service_moto_mc9596 = Get_All_Errors(sheetname, "Service", "MC9596", "MOTOROLA")
            .fehler_rl_gls_mc3090 = Get_All_Errors(sheetname, "RET-LEASING", "MC3090", "GLS")
            .fehler_rl_ibm_mc3090 = Get_All_Errors(sheetname, "RET-LEASING", "MC3090", "IBM")
            .fehler_rl_moto_mc3090 = Get_All_Errors(sheetname, "RET-LEASING", "MC3090", "MOTOROLA")
            .fehler_rl_gls_mc9596 = Get_All_Errors(sheetname, "RET-LEASING", "MC9596", "GLS")
            .fehler_rl_ibm_mc9596 = Get_All_Errors(sheetname, "RET-LEASING", "MC9596", "IBM")
            .fehler_rl_moto_mc9596 = Get_All_Errors(sheetname, "RET-LEASING", "MC9596", "MOTOROLA")
        End With
    Sum_Error = Fehler_Report
End Function


'========================================================================================
'= Function: Get_Error_Descr                                                            =
'=                                                                                      =
'= Descr.:   Returns the string describing the error specified by fehler_id in          =
'=           plaintext                                                                  =
'========================================================================================
Function Get_Error_Descr(fehler_id As Integer) As String
' Gitb Fehlerbeschreibung aufgrund von Fehlerindex (fehler_id) zurueck
Select Case (fehler_id)
Case 0
    Get_Error_Descr = "Ger|fffd|t l|fffd|sst s. nicht einschalten"
Case 1
    Get_Error_Descr = "Geh|fffd|use def."
Case 2
    Get_Error_Descr = "Imager, Lesekopf def."
Case 3
    Get_Error_Descr = "Tastatur o. Funktion"
Case 4
    Get_Error_Descr = "Display def."
Case 5
    Get_Error_Descr = "Touch o. Funktion"
Case 6
    Get_Error_Descr = "Beeper def."
Case 7
    Get_Error_Descr = "Lose Teile im Ger|fffd|t"
Case 8
    Get_Error_Descr = "Akkufach, Halteriemen def."
Case 9
    Get_Error_Descr = "Trigger def."
Case 10
    Get_Error_Descr = "Kontaktprob. b. Ladevorgang"
Case 11
    Get_Error_Descr = "Siehe Problembeschreib."
Case 12
    Get_Error_Descr = "Softwarefehler"
Case 13
    Get_Error_Descr = "Ger|fffd|t l|fffd|sst s. nicht installieren"
Case 14
    Get_Error_Descr = "Ger|fffd|t liest SD-Karte nicht"
Case 15
    Get_Error_Descr = "WIFI (WLAN) konnektet nicht"
Case 16
    Get_Error_Descr = "kein Datentransfer (GPRS konnektet nicht)"
End Select
    
End Function


'========================================================================================
'= Function: Sum_Asset                                                                  =
'= Descr.: The main routine for getting the assets of the sheets MC3090 / MC9596 and    =
'=         writing them into the shapes                                                 =
'========================================================================================
Sub Sum_Asset(modell As String)
  Dim Asset_Daily As Ablauf_UDT
  Dim Error_Daily As Fehler_Gesamt
  Dim ablauf As Integer
  Dim date_col_mc9596 As Integer
  Dim help_row_mc9596 As Integer
  Dim descr_col_mc9596 As Integer

    
  Dim errors_mc9596 As String
  Dim errors_mc3090 As String
  Dim sheet_name As String
  
  ' Alle Fehlerdaten werden in "Error_Daily" gespeichert
  Error_Daily = Sum_Error("FEHLERamTag")
  ' Alle Geraetestatusdaten werden in "Asset_Daily" gespeichert
  Asset_Daily = Get_Asset(modell, modell)
  ' Update des Bildschirms wird fuer Laufzeit des Makro deaktiviert
  
  
  ' Name Arbeitsblattes wird erstellt
  sheet_name = modell + " Ablaufplan"
  
  ' Sortieralgorithmus sortiert Fehler mit absteigender Haeufigkeit
  Call Sort(Error_Daily.fehler_service_moto_mc3090.F_Count, 13, 0)
  
  'Daten werden in Textfeld auf Ablaufplan geschrieben, Parameter der Funktion "Set_Shapetext" bei Funktion zu finden und in der Dokumentation
  Call Set_Shapetext(sheet_name, "AVIS_RL_TXT", "Avis: " + CStr(Asset_Daily.AVIS_RL), "", "", "", "", _
    Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.AVIS_RL)
  Call Set_Shapetext(sheet_name, "AVIS_S_TXT", "Avis: " + CStr(Asset_Daily.AVIS_S), "", "", "", "", _
    Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.AVIS_S)
  Call Set_Shapetext(sheet_name, "S_OFFEN", "Offen: " + CStr(Asset_Daily.S_OFFEN), "", "", "", "", _
    Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.S_OFFEN)
  Call Set_Shapetext(sheet_name, "WE_GEO_RL_TXT", "WE RL: " + CStr(Asset_Daily.WE_RL), "", "", "", "", _
    Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.WE_RL)
  Call Set_Shapetext(sheet_name, "WE_GEO_S_TXT", "WE Serv.: " + CStr(Asset_Daily.WE_S), "", "", "", "", _
    Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.WE_S)
  Call Set_Shapetext(sheet_name, "WE_GEO_DAILY_RL", "", "", "", "", "WE RL heute: " + CStr(Asset_Daily.WE_GEO_DAILY_R), _
     Array(1, 0, 0, 0, 1), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.WE_GEO_DAILY_R)
  Call Set_Shapetext(sheet_name, "WE_GEO_DAILY_S", "", "", "", "", "WE Serv. heute: " + CStr(Asset_Daily.WE_GEO_DAILY_S), _
     Array(1, 0, 0, 0, 1), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.WE_GEO_DAILY_S)
  Call Set_Shapetext(sheet_name, "KLAER", "Kl|fffd|rf|fffd|lle: " + CStr(Asset_Daily.KLAERFALL + Asset_Daily.DEFEKT), "", "", "", "", _
    Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.KLAERFALL)
  Call Set_Shapetext(sheet_name, "DIAGNOSE", "Anzahl: " + CStr(Asset_Daily.DIAG), "", "", "", "", _
    Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.DIAG)
  'Call Set_Shapetext(sheet_name, "NEU_BESTELLUNG", , "", "", "", "", Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8,Asset_Daily)
  Call Set_Shapetext(sheet_name, "NEU_INST_OFFEN", "Neu-Install. offen: " + CStr(Asset_Daily.NEU_INST_OFFEN), _
    "", "", "", "", Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.NEU_INST_OFFEN)
  Call Set_Shapetext(sheet_name, "NEU_INST_KONFIG", "Anzahl: " + CStr(Asset_Daily.NEU_INST_KONFIG), _
    "", "", "", "", Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.NEU_INST_KONFIG)
  Call Set_Shapetext(sheet_name, "WA_ZU_MOTO", "Anzahl: " + CStr(Asset_Daily.WA_ZU_MOTO), "", "", "", "", _
    Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.WA_ZU_MOTO)
  Call Set_Shapetext(sheet_name, "WA_MOTO_DAILY", "", "", "", "", "WA Motorola heute: " + CStr(Asset_Daily.WA_MOTO_DAILY), _
   Array(1, 0, 0, 0, 1), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.WA_MOTO_DAILY)
  Call Set_Shapetext(sheet_name, "MOTOROLA", "Anzahl: " + CStr(Asset_Daily.MOTOROLA), "", "", "", "", _
    Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.MOTOROLA)
  Call Set_Shapetext(sheet_name, "WE_VON_MOTO", "Anzahl: " + CStr(Asset_Daily.WE_VON_MOTO), "", "", "", "", _
    Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.WE_VON_MOTO)
  Call Set_Shapetext(sheet_name, "WE_MOTO_DAILY", "", "", "", "", "WE Motorola" + Chr(10) + "heute: " + CStr(Asset_Daily.WE_MOTO_DAILY), _
    Array(1, 0, 0, 0, 1), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.WE_MOTO_DAILY)
  Call Set_Shapetext(sheet_name, "POOL_IN_S", "", "", "", "", "Service to Pool" & Chr(10) & "heute: " + CStr(Asset_Daily.POOL_IN_S), _
    Array(1, 0, 0, 0, 1), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.POOL_IN_S)
  Call Set_Shapetext(sheet_name, "POOL_IN_RL", "", "", "", "", "RL to Pool" & Chr(10) & "heute: " + CStr(Asset_Daily.POOL_IN_R), _
    Array(1, 0, 0, 0, 1), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.POOL_IN_R)
  If modell = "MC9596" Then
    Call Set_Shapetext(sheet_name, "S_POOL", "Gebraucht: " + CStr(Asset_Daily.S_POOL + Asset_Daily.S_POOL_OHNE), "", "", "", "", _
    Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.S_POOL)
  ElseIf modell = "MC3090" Then
    Call Set_Shapetext(sheet_name, "S_POOL", "Anzahl: " + CStr(Asset_Daily.S_POOL), "", "", "", "", _
    Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.S_POOL)
  End If
  Call Set_Shapetext(sheet_name, "WA_ZU_GLS_IT", "Zu GLS IT: " + CStr(Asset_Daily.WA_ZU_GLS_IT), "", "", "", "", _
    Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.WA_ZU_GLS_IT)
  Call Set_Shapetext(sheet_name, "WA_ZU_GLS_S", "Service: " + CStr(Asset_Daily.WA_ZU_GLS_S), "", "", "", "", _
    Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.WA_ZU_GLS_S)
  Call Set_Shapetext(sheet_name, "NEU_INST_WA_GLS", "WA Neu-Install.: " + CStr(Asset_Daily.NEU_INST_WA_GLS), "", "", "", "", _
    Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.NEU_INST_WA_GLS)
  Call Set_Shapetext(sheet_name, "NEU_INST_VERSAND", "Neu-Install.: " + CStr(Asset_Daily.NEU_INST_VERSAND), "", "", "", "", _
    Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.NEU_INST_VERSAND)
  Call Set_Shapetext(sheet_name, "WA_GLS_DAILY", "", "", "", "", "WA Service heute: " + CStr(Asset_Daily.WA_GEO_DAILY_S), _
    Array(1, 0, 0, 0, 1), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.WA_GEO_DAILY_S)
  Call Set_Shapetext(sheet_name, "WA_GLS_NEU_INST_DAILY", "", "", "", "", "WA Neu-Install. heute: " + CStr(Asset_Daily.WA_NEU_INST_DAILY), _
     Array(1, 0, 0, 0, 1), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.WA_NEU_INST_DAILY)
  Call Set_Shapetext(sheet_name, "GLS_IT", "GLS IT: " + CStr(Asset_Daily.GLS_IT), "", "", "", "", _
    Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.GLS_IT)
  Call Set_Shapetext(sheet_name, "WE_BRNO", "WE Brno: " + CStr(Asset_Daily.WE_BRNO), "", "", "", "", _
    Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.WE_BRNO)
  Call Set_Shapetext(sheet_name, "WA_BRNO", "WA Brno: " + CStr(Asset_Daily.WA_BRNO), "", "", "", "", _
    Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.WA_BRNO)
  Call Set_Shapetext(sheet_name, "REPAIR_BRNO", "In repair: " + CStr(Asset_Daily.REPAIR_BRNO), "", "", "", "", _
    Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.REPAIR_BRNO)
  Call Set_Shapetext(sheet_name, "WAITING_PARTS", "Waiting for parts: " + CStr(Asset_Daily.WAITING_PARTS), "", "", "", "", _
    Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.WAITING_PARTS)
  
  
  
  If modell = "MC9596" Then
    Call Set_Shapetext(sheet_name, "NEU_LAGER", "Neu: " + CStr(Asset_Daily.NEU_LAGER), _
        "", "", "", "", Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.NEU_LAGER)
  End If
  
    If modell = "MC9596" Then
        errors_mc9596 = (Get_Error_Descr(Error_Daily.fehler_service_moto_mc9596.F_Count(0, 0)) _
                + ": " + CStr(Error_Daily.fehler_service_moto_mc9596.F_Count(0, 1)) & Chr(10) & _
                Get_Error_Descr(Error_Daily.fehler_service_moto_mc9596.F_Count(1, 0)) _
                + ": " + CStr(Error_Daily.fehler_service_moto_mc9596.F_Count(1, 1)) & Chr(10) & _
                Get_Error_Descr(Error_Daily.fehler_service_moto_mc9596.F_Count(2, 0)) _
                + ": " + CStr(Error_Daily.fehler_service_moto_mc9596.F_Count(2, 1)) & Chr(10) & _
                Get_Error_Descr(Error_Daily.fehler_service_moto_mc9596.F_Count(3, 0)) _
                + ": " + CStr(Error_Daily.fehler_service_moto_mc9596.F_Count(3, 1)) & Chr(10) & _
                Get_Error_Descr(Error_Daily.fehler_service_moto_mc9596.F_Count(4, 0)) _
                + ": " + CStr(Error_Daily.fehler_service_moto_mc9596.F_Count(4, 1)))
         
        Call Set_Shapetext(sheet_name, "MOTO_ERROR", "Top 5 Fehler:" + Chr(10), errors_mc9596, "", "", "", _
            Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, 1)
        Call Set_Shapetext(sheet_name, "CC_POOL_USED", "Gebraucht: " + CStr(Asset_Daily.CC_MC9596_USED), "", "", "", "", _
            Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.CC_MC9596_USED)
        Call Set_Shapetext(sheet_name, "CC_POOL_NEW", "Neu: " + CStr(Asset_Daily.CC_MC9596_NEW), "", "", "", "", _
            Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.CC_MC9596_USED)
        Call Set_Shapetext(sheet_name, "CC_POOL_UNCHECKED", "Ungepr|fffd|ft: " + CStr(Asset_Daily.CC_MC9596_UNCHECKED), "", "", "", "", _
            Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.CC_MC9596_UNCHECKED)
        Call Set_Shapetext(sheet_name, "SIM_POOL", "Neu: " + CStr(Asset_Daily.SIM_CARD), "", "", "", "", _
            Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.SIM_CARD)
        Call Set_Shapetext(sheet_name, "SIM_POOL_USED", "Gebraucht: " + CStr(Asset_Daily.SIM_CARD_USED), "", "", "", "", _
            Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.SIM_CARD_USED)
        Call Set_Shapetext(sheet_name, "SD_POOL", "Neu: " + CStr(Asset_Daily.SD_CARD + Asset_Daily.SD_CARD_8), "", "", "", "", _
            Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.SD_CARD)
        Call Set_Shapetext(sheet_name, "SD_POOL_USED", "Gebraucht: " + CStr(Asset_Daily.SD_CARD_USED), "", "", "", "", _
            Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.SD_CARD_USED)
        Call Set_Shapetext(sheet_name, "SD_POOL_DEFECT", "Alt/Defekt: " + CStr(Asset_Daily.SD_CARD_OLD + Asset_Daily.SD_CARD_DEFECT), "", "", "", "", _
            Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.SD_CARD_OLD)
       
        
    Else
        errors_mc3090 = (Get_Error_Descr(Error_Daily.fehler_service_moto_mc3090.F_Count(0, 0)) _
                + ": " + CStr(Error_Daily.fehler_service_moto_mc3090.F_Count(0, 1)) & Chr(10) & _
                Get_Error_Descr(Error_Daily.fehler_service_moto_mc3090.F_Count(1, 0)) _
                + ": " + CStr(Error_Daily.fehler_service_moto_mc3090.F_Count(1, 1)) & Chr(10) & _
                Get_Error_Descr(Error_Daily.fehler_service_moto_mc3090.F_Count(2, 0)) _
                + ": " + CStr(Error_Daily.fehler_service_moto_mc3090.F_Count(2, 1)) & Chr(10) & _
                Get_Error_Descr(Error_Daily.fehler_service_moto_mc3090.F_Count(3, 0)) _
                + ": " + CStr(Error_Daily.fehler_service_moto_mc3090.F_Count(3, 1)) & Chr(10) & _
                Get_Error_Descr(Error_Daily.fehler_service_moto_mc3090.F_Count(4, 0)) _
                + ": " + CStr(Error_Daily.fehler_service_moto_mc3090.F_Count(4, 1)))
    
          Call Set_Shapetext(sheet_name, "MOTO_ERROR", "Top 5 Fehler:" + Chr(10), errors_mc3090, "", "", "", _
            Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, 1)
          Call Set_Shapetext(sheet_name, "CC_POOL_USED", "Gebraucht: " + CStr(Asset_Daily.CC_MC3090_USED), "", "", "", "", _
            Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.CC_MC3090_USED)
          Call Set_Shapetext(sheet_name, "CC_POOL_NEW", "Neu: " + CStr(Asset_Daily.CC_MC3090_NEW), "", "", "", "", _
            Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.CC_MC3090_NEW)
          Call Set_Shapetext(sheet_name, "CC_POOL_UNCHECKED", "Ungepr|fffd|ft: " + CStr(Asset_Daily.CC_MC3090_UNCHECKED), "", "", "", "", _
            Array(1, 0, 0, 0, 0), Array(1, 1, 1, 1, 1), 1, 8, Asset_Daily.CC_MC3090_UNCHECKED)
            
     End If
    
    With Sheets(sheet_name).Shapes("REPORT_RUN").TextFrame.Characters
        .Font.Name = "Arial"
        .Font.Size = 10
        ' Ermittlung des Erstallungsdatums, holt sich Datum aus MC9596 Blatt aus der Reihe AVIS Service
        descr_col_mc9596 = Get_Column("BEZEICHNUNG", 256, "MC9596")
        date_col_mc9596 = Get_Column("DATUM", 256, "MC9596")
        help_row_mc9596 = Get_Row("AVIS Service", descr_col_mc9596, 100, "MC9596")
        If (descr_col_mc9596 <> -1) And (date_col_mc9596 <> -1) And (help_row_mc9596 <> -1) Then
            .Text = ("Stand: " + CStr(CDate(Sheets("MC9596").Cells(help_row_mc9596, date_col_mc9596))))
        End If
  End With

  
End Sub

'========================================================================================
'= Subroutine: Sort                                                                     =
'=                                                                                      =
'= Descr.:   Sorts a two-dimensional array descending.                                   =
'=           Upper and lower bounds of the array can be specified in parameters         =
'========================================================================================
Sub Sort(ByRef sArray As Variant, upper As Integer, lower As Integer)

Dim zaehler1 As Long
Dim zaehler2 As Long
Dim tausch As Variant   ' Tauschvariable 1
Dim tausch2 As Variant  ' Tauschvariable 2
   
' Bubblesort Sortieralgorithmus, ausreichend fuer diese zu sortierende Mengen
   
    For zaehler1 = upper - 1 To lower Step -1
       
        For zaehler2 = lower To zaehler1
           
            If sArray(zaehler2, 1) < sArray(zaehler2 + 1, 1) Then
               
                tausch = sArray(zaehler2, 1)
                sArray(zaehler2, 1) = sArray(zaehler2 + 1, 1)
                sArray(zaehler2 + 1, 1) = tausch
                
                tausch2 = sArray(zaehler2, 0)
                sArray(zaehler2, 0) = sArray(zaehler2 + 1, 0)
                sArray(zaehler2 + 1, 0) = tausch2
                
            End If
        Next zaehler2
    Next zaehler1
End Sub

'========================================================================================
'= Subroutine: Set_Shapetext                                                            =
'=                                                                                      =
'= Descr.:  Allows to set 5 different texts with different formatting, colour           =
'=          into one shape. The line visibility and colour can also be set.             =
'=          You can set the whole shape to not visible.                                 =
'========================================================================================

Sub Set_Shapetext(sheet_name As String, s_name As String, s_text_1 As String, s_text_2 As String, s_text_3 As String, s_text_4 As String, _
    s_text_5 As String, font_format As Variant, font_color As Variant, line_vis As Integer, line_color As Integer, s_vis As Integer)
    
    On Error GoTo ErrorHandlerShapetext:
       ' Falls Wert in s_vis =-1, d.h. kein Wert fuer best. Geraetestatus gefunden, ...
      If s_vis = -1 Then
        ' ...setze Shape unsichtbar
        Sheets(sheet_name).Shapes(s_name).Visible = msoFalse
      Else
        ' ...anderfalls sichtbar
        Sheets(sheet_name).Shapes(s_name).Visible = msoTrue
      End If
    
         
      
      
      ' AutoSize Eigenschaft von Shape aktivieren
      Sheets(sheet_name).Shapes(s_name).TextFrame.AutoSize = True
      ' Abstand zum Rand links auf 2 Punkte setzen
      Sheets(sheet_name).Shapes(s_name).TextFrame.MarginLeft = 2
      ' Abstand zum Rand unten auf 0.1 Punkte setzen
      Sheets(sheet_name).Shapes(s_name).TextFrame.MarginBottom = 0.1
      ' Abstand zum Rand rechts auf 2 Punkte setzen
      Sheets(sheet_name).Shapes(s_name).TextFrame.MarginRight = 2
      ' Abstand zum Rand oben auf 0.5 Punkte setzen
      Sheets(sheet_name).Shapes(s_name).TextFrame.MarginTop = 0.5
      ' Staerke der Umrandung
      Sheets(sheet_name).Shapes(s_name).Line.Weight = 1
      
      ' Falls Umrandung (line_vis) =1, ...
      If line_vis = 1 Then
        ' ... Umrandung fuer Shape aktivieren
        Sheets(sheet_name).Shapes(s_name).Line.Visible = msoTrue
      Else
       ' ... andernfalls Umrandung deaktivieren
        Sheets(sheet_name).Shapes(s_name).Line.Visible = msoFalse
      End If
      ' Farbe (line_color) fuer Umrandung des Shape setzen (ACHTUNG Farbe ergibt sich aus Excel-Farbindices +7)
      Sheets(sheet_name).Shapes(s_name).Line.ForeColor.SchemeColor = line_color
      ' Alle 5 Texte in Shape einfuegen
      Sheets(sheet_name).Shapes(s_name).TextFrame.Characters.Text = s_text_1 + s_text_2 + s_text_3 + s_text_4 + s_text_5
      
      ' Erster Text wird formatiert
      If Len(s_text_1) > 0 Then
        With Sheets(sheet_name).Shapes(s_name).TextFrame.Characters(0, Len(s_text_1))
            .Font.Name = "Arial"
            .Font.Size = 10
            ' Schriftfarbe fuer ersten Text wird aus Array font_color an Stelle 0 geholt
            .Font.ColorIndex = font_color(0)
            ' Falls font_format an Stelle 0 gleich 1 ist,...
            If font_format(0) = 1 Then
                ' ...setze Fornmatierung auf fett
                .Font.Bold = msoTrue
            Else
                ' ...anderfalls standard
                .Font.Bold = msoFalse
            End If
        End With
     End If
     
     If Len(s_text_2) > 0 Then
        With Sheets(sheet_name).Shapes(s_name).TextFrame.Characters(Len(s_text_1) + 1, Len(s_text_2))
            .Font.Name = "Arial"
            .Font.Size = 10
            ' Schriftfarbe fuer ersten Text wird aus Array font_color an Stelle 1 geholt
            .Font.ColorIndex = font_color(1)
            ' Falls font_format an Stelle 1 gleich 1 ist,...
            If font_format(1) = 1 Then
                ' ...setze Fornmatierung auf fett
                .Font.Bold = msoTrue
            Else
                .Font.Bold = msoFalse
            End If
        End With
    End If
        
    If Len(s_text_3) > 0 Then
        With Sheets(sheet_name).Shapes(s_name).TextFrame.Characters(Len(s_text_1) + Len(s_text_2) + 1, Len(s_text_3))
            .Font.Name = "Arial"
            .Font.Size = 10
            ' Schriftfarbe fuer ersten Text wird aus Array font_color an Stelle 2 geholt
            .Font.ColorIndex = font_color(2)
            ' Falls font_format an Stelle 2 gleich 1 ist,...
            If font_format(2) = 1 Then
                ' ...setze Fornmatierung auf fett
                .Font.Bold = msoTrue
            Else
                .Font.Bold = msoFalse
            End If
        End With
    End If
        
    If Len(s_text_4) > 0 Then
        With Sheets(sheet_name).Shapes(s_name).TextFrame.Characters(Len(s_text_1) + Len(s_text_2) + Len(s_text_3) + 1, Len(s_text_4))
            .Font.Name = "Arial"
            .Font.Size = 9
            ' Schriftfarbe fuer ersten Text wird aus Array font_color an Stelle 3 geholt
            .Font.ColorIndex = font_color(3)
            ' Falls font_format an Stelle 3 gleich 1 ist,...
            If font_format(3) = 1 Then
                ' ...setze Fornmatierung auf fett
                .Font.Bold = msoTrue
            Else
                .Font.Bold = msoFalse
            End If
        End With
    End If
    
    If Len(s_text_5) > 0 Then
        With Sheets(sheet_name).Shapes(s_name).TextFrame.Characters(Len(s_text_1) + Len(s_text_2) + Len(s_text_3) + Len(s_text_4) + 1, Len(s_text_5))
            .Font.Name = "Arial"
            .Font.Size = 11
            ' Schriftfarbe fuer ersten Text wird aus Array font_color an Stelle 4 geholt
            .Font.ColorIndex = font_color(4)
            ' Falls font_format an Stelle 4 gleich 1 ist,...
            If font_format(4) = 1 Then
                ' ...setze Fornmatierung auf fett
                .Font.Bold = msoTrue
                .Font.Italic = msoTrue
                Sheets(sheet_name).Shapes(s_name).Line.Weight = 1.5
            Else
                .Font.Bold = msoFalse
            End If
        End With
    End If
    Exit Sub
ErrorHandlerShapetext:
            Debug.Print ("Error in Set_Shapetext")
Resume
     
    
End Sub

'=============================================================================================
'Author:    Jan Forster
'Date:      02.05.2012
'
'Sub Setup_Page(SheetNo As Integer, benutztes_feld As String)
'Parameter: SheetNo: Auswahl der aktuellen Tabellen ; benutztes_feld: Feldgroesse fuer Druckbereich
'Druckeinstellungen festlegen
'=============================================================================================

Sub Setup_Page(sheet_name As String)
 
 Dim datei_erstell_datum As String                           ' speichert Dateierstellungsdatum
 Dim descr_col_mc9596 As Integer
 Dim date_col_mc9596 As Integer
 Dim help_row_mc9596 As Integer
 
    With Sheets(sheet_name).PageSetup
        .Orientation = xlLandscape                              ' Hochformat
        .LeftMargin = Application.CentimetersToPoints(0.2)      ' Seitenabstand links  (in cm)
        .RightMargin = Application.CentimetersToPoints(0.2)     ' Seitenabstand rechts (in cm)
        .TopMargin = Application.CentimetersToPoints(2)         ' Seitenabstand oben   (in cm)
        .BottomMargin = Application.CentimetersToPoints(0.5)    ' Seitenabstand unten   (in cm)
        .CenterHorizontally = True                              ' Horizontal zentrieren
        .CenterVertically = False                               ' nicht vertikal zentrieren
        ' Ermittlung des Erstallungsdatums, holt sich Datum aus MC9596 Blatt aus der Reihe AVIS Service
        descr_col_mc9596 = Get_Column("BEZEICHNUNG", 256, "MC9596")
        date_col_mc9596 = Get_Column("DATUM", 256, "MC9596")
        help_row_mc9596 = Get_Row("AVIS Service", descr_col_mc9596, 100, "MC9596")
        If (descr_col_mc9596 <> -1) And (date_col_mc9596 <> -1) And (help_row_mc9596 <> -1) Then
            .CenterHeader = "Ger|fffd|testatus Stand: " & CStr(CDate(Sheets("MC9596").Cells(help_row_mc9596, date_col_mc9596))) ' schreibt Erstellungsdatum in Kopfzeile
        End If
    
    End With
    
End Sub
'=============================================================================================
'Author:    Jan Forster
'Date:      02.05.2012
'
'Sub Page_Preview(SheetNo As Integer)
'Parameter: SheetNo: Auswahl der aktuellen Tabellen
'Zeigt Druckvorschau
'=============================================================================================
Sub Page_Preview(sheet_name As String)

    If sheet_name = "MC3090 Ablaufplan" Then        ' Falls in Tabelle MC3090 Druckvorschau gew|fffd|hlt wurde
            Sheets(sheet_name).PrintPreview    ' Aufruf der Druckvorschau
    ElseIf sheet_name = "MC9596 Ablaufplan" Then    ' Falls in Tabelle MC9596 Druckvorschau gew|fffd|hlt wurde
            Sheets(sheet_name).PrintPreview    ' Aufruf der Druckvorschau
    End If

End Sub
'=============================================================================================
'Author:    Jan Forster
'Date:      02.05.2012
'
'Sub Create_Ablauf
'Parameter: keine
'Hauptroutine erstellt Ablaufplan fuer MC3090 und MC9596
'=============================================================================================


Sub Create_Ablauf()

  Application.ScreenUpdating = False
  
  Call Sum_Asset("MC3090")  ' Ablaufplan fuer MC3090 erstellen
  Call Sum_Asset("MC9596")  ' Ablaufplan fuer MC9596 erstellen
  
  Call Setup_Page("MC3090 Ablaufplan")  ' Seite fuer MC3090 einrichten
  Call Setup_Page("MC9596 Ablaufplan")  ' Seite fuer Mc9596 einrichten
 
  If (ActiveSheet.Name = "MC3090 Ablaufplan") Or (ActiveSheet.Name = "MC9596 Ablaufplan") Then
    Page_Preview (ActiveSheet.Name)  ' Druckvorschau f|fffd|r aktuelles Sheet anzeigen
  End If

  Application.ScreenUpdating = True
 
End Sub






Function Translate_Missing_Parts(part_nr As String) As String

' part_def enthaelt alle Daten zu den Ersatzteil

  Dim part_def() As Variant
  part_def = Array(Array("CZWAITING", "DUMMY WAITING PART IN CZ", "", "0,00"), _
        Array("8710-050033-00", "CABLE FLAT IMAGER PICO 51MM", "Kabel f|fffd|r Label-Scanner", "12,83"), _
        Array("8710-050077-00", "CABLE FLAT MAINBOARD TO POWER", "Kabel von Mainboard zur Stromversorgung", "18,07"), _
        Array("8710-050099-00", "ASSY: BATTERY DOOR AND HANDSTR", "Einbau Batteriedeckel & Tragegurt", "28,26"), _
        Array("8710-050010-01", "METAL DOME AND FLEX ASSY: 28KY", "Einbau flexible Leiterplatten & Tastatur mit 28 Tasten", "39,45"), _
        Array("8710-050014-01", "METAL DOME AND FLEX ASSY: 38KY", "Einbau flexible Leiterplatten & Tastatur mit 38 Tasten", "42,59"), _
        Array("8710-050078-01", "I/O PCB+FPC ASSY ADD ESD ISSUE", "Best|fffd|cken der PCB/FPC Leiterplatten,Fehler aufgrund elektrostat. Entladung ", "46,26"), _
        Array("8710-050049-00", "TOUCH PANNEL TR4-030F-14G(E)", "Bildschirm-Tastfeld", "56,47"), _
        Array("8710-050097-01", "SEAL: MAIN BRICK BLACK ", "Geh|fffd|sue-Dichtung", "57,08"), _
        Array("20-77130-06 PICO", "IMAGE SCANNER,ENHANCED,OE ", "verbesserter Label-Scanner OE", "126,94"), _
        Array("8710-050022-01", "SUB ASSEMBLY: TOP HOUSING, NON", " Einabu des vorderen Geh|fffd|uses", "152,75"), _
        Array("SE-4400-E000ER", "PICO IMAGE SCANNER,ENHANCED", "verbesserter Label-Scanner", "175,00"), _
        Array("21-21160-11", "RADIO MODULE: MC3000   ", "Funkmodul MC3090", "189,42"), _
        Array("21-21160-01", "WLAN 802.11ABG SYMBOL COEXANT", "WLAN Modul", "224,04"), _
        Array("8710-050300-13", "N/U  8710-050310-13", "Netzteilplatine PHASE II", "315,96"), _
        Array("8710-050301-02", "BOTTOM HSG: STRAIGHT , AUDIO,", "R|fffd|ckseitiges Geh|fffd|use", "319,20"), _
        Array("8710-050048-01", "TFT-LCD MODULE LQ030B7DD01 320", "TFT-LCD-Bildschirmmodul", "339,80"), _
        Array("8710-050300-14", "N/U  8710-050310-14", "Referenz auf Antennenplatine", "368,22"), _
        Array("8710-050094-02", "ASSY: TOP HSG,FS/ROT,TOUCH PAN", "Einbau vorderes Geh|fffd|use, Touchpanel", "468,55"), _
        Array("8710-050310-13", "POWER BOARD: PHASE II", "Netzteilplatine PHASE II", "485,39"), _
        Array("8710-050310-15", "POWER BOARD: PHASE II", "Netzteilplatine PHASE II", "486,00"), Array("8710-050300-04", "CABLE: FLAT MAINBOARD TO OPTIO", "Flachabndkabel zu den Optionen", "0,00"), _
        Array("8710-050310-14", "OPTION BOARD: PHASE II BT/AUDI", "Antennplatine", "565,69"), Array("91.18H28.013G", "KYPD MODULE:ALPHA PRIME,MC95XX", "Tastatur MC9596", "0,00"), Array("60.18H83.001", "ASSY END CAP 2ND TOOLING-B03", "Geh|fffd|use Abschlu|fffd|kappe", "0,00"), _
        Array("8710-050090-13", "N/U 8710-050091-13", "Mainboard MC3090", "1.717,42"), Array("8710-050091-13", "MAINBOARD: MC3000 GLS", "Mainboard MC3090", "1.717,42"), Array("8710-050310-37", "MB ASSY:HC 128MB BRICK,PXA270", "", "1.728,24"))
   
  Dim zaehler As Integer
    
    For zaehler = 0 To 24
        ' Falls Ersatzteilnummer in Array zu finden ist,...
        If part_def(zaehler)(0) = part_nr Then
            ' R|fffd|ckgabe der deutschen Uebersetzung
            Translate_Missing_Parts = CStr(part_def(zaehler)(2))
            Exit Function
        End If
    Next zaehler
    
    Translate_Missing_Parts = "-1"

End Function

Sub Collect_Missing_Parts(sheetname As String, modell As String)

Dim ersatzteil_id As Variant
Dim typ_array As Variant
Dim vorgang_array As Variant
Dim ersatz_anzahl As Integer
ersatz_anzahl = 24

Dim ersatz_pro_geraet(23, 1) As Integer
Dim ersatz_gesamt(1, 1) As Variant
Dim part_id_col As Integer, vorgang_col As Integer, typ_col As Integer, anzahl_col As Integer
Dim ersatz_msg(1, 1, 4) As String
Dim reihen_anzahl As Integer
Dim zaehler1 As Integer
Dim zaehler2 As Integer
Dim zaehler3 As Integer
Dim zaehler4 As Integer
Dim temp_erg As Integer

reihen_anzahl = Sheets(sheetname).Cells(Cells.Rows.Count, 1).End(xlUp).Row

' Typ-Array
typ_array = Array("MC3090", "MC9596")
' Vorgangs-Array
vorgang_array = Array("RO", "RL")
' Ersatzteil-ID-Array
ersatzteil_id = Array("8710-050033-00", "8710-050077-00", "8710-050099-00", "8710-050010-01", "8710-050014-01", _
"8710-050078-01", "8710-050049-00", "8710-050097-01", "20-77130-06", "8710-050022-01", "SE-4400-E000ER", "8710-050300-04", "60.18H83.001", _
"21-21160-11", "21-21160-01", "8710-050300-13", "8710-050301-02", "8710-050048-01", "8710-050300-14", "91.18H28.013G", _
"8710-050094-02", "8710-050310-13", "8710-050310-15", "8710-050310-14", "8710-050090-13", "8710-050091-13", "8710-050310-37")
'Ersatzteil-Spalte
part_id_col = Get_Column("Et", 256, sheetname)
'Vorgangs-Spale
vorgang_col = Get_Column("Auftrag", 256, sheetname)
'Typ-Spalten
typ_col = Get_Column("Ger|fffd|te", 256, sheetname)

For zaehler1 = 0 To 1
    For zaehler2 = 0 To 1
        For zaehler3 = 0 To ersatz_anzahl - 1
            temp_erg = 0
            For zaehler4 = 1 To reihen_anzahl
                 If (Sheets(sheetname).Cells(zaehler4, part_id_col) = ersatzteil_id(zaehler3)) And _
                    (Left(Sheets(sheetname).Cells(zaehler4, vorgang_col), 2) = vorgang_array(zaehler2)) And _
                    (Sheets(sheetname).Cells(zaehler4, typ_col) = typ_array(zaehler1)) Then
                        temp_erg = temp_erg + 1
                 End If
            Next zaehler4
            ersatz_pro_geraet(zaehler3, 0) = zaehler3
            ersatz_pro_geraet(zaehler3, 1) = temp_erg
        Next zaehler3
        Call Sort(ersatz_pro_geraet, 23, 0)
        ' Zuweisen des Ergebnisarray zu ersatz_gesamt ( Fehler f|fffd|r alle Geraete)
        ersatz_gesamt(zaehler1, zaehler2) = ersatz_pro_geraet
    Next zaehler2
Next zaehler1

    For zaehler2 = 0 To 1
        For zaehler3 = 0 To 1
            For zaehler4 = 0 To 4
                If ersatz_gesamt(zaehler2, zaehler3)(zaehler4, 1) > 0 Then
                    ersatz_msg(zaehler2, zaehler3, zaehler4) = _
                        Translate_Missing_Parts(CStr(ersatzteil_id(ersatz_gesamt(zaehler2, zaehler3)(zaehler4, 0)))) & _
                        ": " & ersatz_gesamt(zaehler2, zaehler3)(zaehler4, 1) & Chr(10)
                Else
                    ersatz_msg(zaehler2, zaehler3, zaehler4) = ""
                End If
            Next zaehler4
        Next zaehler3
    Next zaehler2
If modell = "MC3090" Then
    Call MsgBox("Top 5 fehlender Teile bei Motorola:" & Chr(10) & _
         "Service:" & Chr(10) & _
         ersatz_msg(0, 0, 0) + ersatz_msg(0, 0, 1) + ersatz_msg(0, 0, 2) + ersatz_msg(0, 0, 3) + ersatz_msg(0, 0, 4) + _
          Chr(10) & "Return Leasing:" & Chr(10) & _
          ersatz_msg(0, 1, 0) + ersatz_msg(0, 1, 1) + ersatz_msg(0, 1, 2) + ersatz_msg(0, 1, 3) + ersatz_msg(0, 1, 4) _
          , vbInformation, "Fehlende Ersatzteile")
ElseIf modell = "MC9596" Then
   Call MsgBox("Top 5 fehlender Teile bei Motorola:" & Chr(10) & _
         "Service:" & Chr(10) & _
         ersatz_msg(1, 0, 0) + ersatz_msg(1, 0, 1) + ersatz_msg(1, 0, 2) + ersatz_msg(1, 0, 3) + ersatz_msg(1, 0, 4) + _
         Chr(10) & "Return Leasing:" & Chr(10) & _
          ersatz_msg(1, 1, 0) + ersatz_msg(1, 1, 1) + ersatz_msg(1, 1, 2) + ersatz_msg(1, 1, 3) + ersatz_msg(1, 1, 4), _
          vbInformation, "Fehlende Ersatzteile")
End If
End Sub



Function Count_Occurence(sheetname As String, such_spalte As String, vorgang As String, geraet_spalte As String, geraet As String) As Integer

Dim reihen_anzahl As Integer
Dim vorgang_col As Integer
Dim geraet_col As Integer
Dim laufvar As Integer
Dim zaehler As Integer

zaehler = 0

vorgang_col = Get_Column(such_spalte, 256, sheetname)
geraet_col = Get_Column(geraet_spalte, 256, sheetname)
If vorgang_col <> -1 Then
    reihen_anzahl = Sheets(sheetname).Cells(Cells.Rows.Count, 1).End(xlUp).Row

    For laufvar = 1 To reihen_anzahl
        If UCase(Sheets(sheetname).Cells(laufvar, vorgang_col)) = UCase(vorgang) And _
           UCase(Sheets(sheetname).Cells(laufvar, geraet_col)) = UCase(geraet) Then
            zaehler = zaehler + 1
        End If
    Next laufvar
    Count_Occurence = zaehler
    Exit Function
Else
    Count_Occurence = vorgang_col
End If

    
End Function

Attribute VB_Name = "Module2"

'========================================================================================
'= Function: Get_Legend_Text                                                            =
'=                                                                                      =
'= Descr.:   Returns the description of cell which row is specified by the descr_text   =
'=           and which column is specified by the descr_col.                            =
'=           A more detailed description can be found in the manual                     =
'========================================================================================
Function Get_Legend_Text(descr_text As String) As String

Dim descr_col As Integer
Dim name_col As Integer
Dim descr_row As Integer
Dim row_count As Integer
Dim sheetname As String
' Name des Arbeitsblattes
sheetname = "Legende"

' Bezeichnungsspalte, letzter Param. (19) steht fuer die Zeile in der gesucht wird
name_col = Get_Column_variable("Bezeichnung", 256, sheetname, 19)
If name_col <> -1 Then
    ' Anzahl der Zeilen ermitteln
    row_count = Sheets(sheetname).Cells(Cells.Rows.Count, name_col).End(xlUp).Row
    If row_count > 0 Then
        ' Beschreibungsspalte, letzter Param. (19) steht fuer die Zeile in der gesucht wird
        descr_col = Get_Column_variable("Beschreibung", 256, sheetname, 19)
        'Wurde die Spalte gefunden,...
        If descr_col <> -1 Then
            ' ... ermittle Zeile in der die Bezeichnung in "descr_txt" zu finden ist
            descr_row = Get_Row_ext(descr_text, name_col, row_count, sheetname)
            ' Falls die Zeile gefunden wurde,...
            If descr_row <> -1 Then
                ' liefere Text aus Beschreibungsspalte und Beschreibungszeile zur|fffd|ck
                Get_Legend_Text = Sheets(sheetname).Cells(descr_row, descr_col)
            Else
                Debug.Print ("--------------------Fehlercode:2000  Fehler in Get_Row_ext, descr_row nicht gefunden!--------------------")
                Debug.Print ("Parameter: " + descr_text)
                Debug.Print ("--------------------------------------------------------------------------------------------------")
                Get_Legend_Text = "-1"
            End If
        Else
            Debug.Print ("--------------------Fehlercode:2001  Fehler in Get_Column_variable, descr_col nicht gefunden!--------------------")
            Debug.Print ("Parameter: " + descr_text)
            Debug.Print ("--------------------------------------------------------------------------------------------------")
            Get_Legend_Text = "-1"
        End If
    Else
        Debug.Print ("--------------------Fehlercode:2002  Fehler in Get_Legend_text, row_count <=0!--------------------")
        Debug.Print ("Parameter: " + descr_text)
        Debug.Print ("--------------------------------------------------------------------------------------------------")
        Get_Legend_Text = "-1"
    End If
Else
    Debug.Print ("--------------------Fehlercode:2003  Fehler in Get_Column_variable, name_col nicht gefunden!--------------------")
    Debug.Print ("Parameter: " + descr_text)
    Debug.Print ("--------------------------------------------------------------------------------------------------")
    Get_Legend_Text = "-1"
End If

End Function



'========================================================================================
'= Function: Get_Row_ext                                                                =
'=                                                                                      =
'= Descr.:   Returns the row number the string specified by such_string was found.      =
'=           The column to search in is specified by such_spalte                        =
'=           Sheetname contains the name of the sheet to search in,                     =
'=           reihen_anzahl contains the row count                                       =
'========================================================================================
Function Get_Row_ext(such_string As String, such_spalte As Integer, reihen_anzahl As Integer, sheetname As String) As Integer
    
    Dim reihen_zaehler As Integer
    
    'durchlaeuft alle reihen des Arbeitsblattes mit dem Namen sheetname
    For reihen_zaehler = 2 To reihen_anzahl
        ' Falls such_string in Zelle, die durch such_spalte und den aktuellen reihen_zaehler bestimmt ist,
        ' gefunden wurde,
        If Sheets(sheetname).Cells(reihen_zaehler, such_spalte) = such_string Then
            ' ... Rueckgabe der aktuellen reihe
            Get_Row_ext = reihen_zaehler
            ' verlasse Function
            Exit Function
        End If
    Next reihen_zaehler
    
    ' Fehlerausgabe, Beschreibung siehe Dokumentation
    Debug.Print ("--------------------Fehlercode:1001  Fehler in Get_Row_ext, Zeile nicht gefunden!--------------------")
    Debug.Print ("Parameter: " + such_string + " " + CStr(such_spalte) + " " + CStr(reihen_anzahl) + " " + sheetname)
    Debug.Print ("--------------------------------------------------------------------------------------------------")
    ' Rueckgabewert, falls Fehler aufgetaucht -1
    Get_Row_ext = -1
    
    
End Function

'========================================================================================
'= Function: Get_Column_variable                                                        =
'=                                                                                      =
'= Descr.:   Returns the column number the string specified by such_string was found in =
'=           This function only searches for the string in the first row                =
'=           Sheetname contains the name of the sheet to search in,                     =
'=           reihen_anzahl contains row count                                           =
'=           Returns -1 if the string wasn't found.                                     =
'========================================================================================
Function Get_Column_variable(such_string As String, spalten_anzahl As Integer, sheetname As String, search_row As Integer) As Integer
  Dim spalten_zaehler As Integer
  If start <= spalten_anzahl Then
    'durchlaeuft alle Spalten des Arbeitsblattes mit dem Namen sheetname
    For spalten_zaehler = 1 To spalten_anzahl
        ' Falls such_string in Zelle, die durch spalten_zaehler und Reihe 1 bestimmt ist,
        ' gefunden wurde, (UCase)-> Zeichenkette in Grossbuchstaben
        If UCase(Sheets(sheetname).Cells(search_row, spalten_zaehler)) = UCase(such_string) Then
            ' ... Rueckgabe der Spalte
            Get_Column_variable = spalten_zaehler
            ' verlasse Function
            Exit Function
        End If
    Next spalten_zaehler
   End If
    'Fehlerausgabe
    Debug.Print ("--------------------Fehlercode:1201  Fehler in Get_Column_variable, Zeile nicht gefunden!--------------------")
    Debug.Print ("Parameter: " + such_string + " " + CStr(spalten_anzahl) + " " + sheetname)
    Debug.Print ("-------------------------------------------------------------------------------------------------------")
    ' Rueckgabewert, falls Fehler aufgetaucht -1
    Get_Column_variable = -1
    
End Function








Private Sub NEU_INST_OFFEN_Click()
Call MsgBox(Get_Legend_Text("NeuInstallation offene Ger|fffd|te MCxxxx"), vbInformation, "Info")
End Sub
Private Sub s_offen_Click()
Call MsgBox(Get_Legend_Text("SERVICE offene Ger|fffd|te MCxxxx"), vbInformation, "Info")
End Sub
Private Sub AVIS_S_TXT_Click()
Call MsgBox(Get_Legend_Text("AVIS Service"), vbInformation, "Info")
End Sub
Private Sub AVIS_RL_TXT_Click()
Call MsgBox(Get_Legend_Text("AVIS ReturnLeasing"), vbInformation, "Info")
End Sub
Private Sub WE_GEO_RL_TXT_Click()
Call MsgBox(Get_Legend_Text("WE ReturnLeasing"), vbInformation, "Info")
End Sub
Private Sub WE_GEO_S_TXT_Click()
Call MsgBox(Get_Legend_Text("WE Service"), vbInformation, "Info")
End Sub
Private Sub KLAER_Click()
Call MsgBox(Get_Legend_Text("KL|fffd|RFALL"), vbInformation, "Info")
End Sub
Private Sub WE_GEO_DAILY_S_Click()
Call MsgBox(Get_Legend_Text("Wareneingang Service MCxxxx"), vbInformation, "Info")
End Sub
Private Sub WE_GEO_DAILY_RL_Click()
Call MsgBox(Get_Legend_Text("Wareneingang Return Leasing MCxxxx"), vbInformation, "Info")
End Sub
Private Sub DIAGNOSE_Click()
Call MsgBox(Get_Legend_Text("DIAGNOSE"), vbInformation, "Info")
End Sub
Private Sub WA_MOTO_DAILY_Click()
Call MsgBox(Get_Legend_Text("Warenausgang MOTOROLA MCxxxx"), vbInformation, "Info")
End Sub
Private Sub WA_ZU_MOTO_Click()
Call MsgBox(Get_Legend_Text("WA zu Motorola"), vbInformation, "Info")
End Sub
Private Sub MOTOROLA_Click()
Call MsgBox(Get_Legend_Text("MOTOROLA"), vbInformation, "Info")
End Sub
Private Sub MOTO_ERROR_Click()
Call MsgBox("Top 5 Fehler, die bei Motorola in Brno festgestell wurden. Eine detaillierte Ansicht finden Sie im Arbeitsblatt FEHLERamTag.", vbInformation, "Info")
End Sub
Private Sub WE_VON_MOTO_Click()
Call MsgBox(Get_Legend_Text("WE von Motorola"), vbInformation, "Info")
End Sub
Private Sub We_MOTO_DAILY_Click()
Call MsgBox(Get_Legend_Text("Wareneingang MOTOROLA MCxxxx"), vbInformation, "Info")
End Sub
Private Sub GLS_IT_Click()
Call MsgBox(Get_Legend_Text("GLS_IT"), vbInformation, "Info")
End Sub
Private Sub WA_GLS_DAILY_Click()
Call MsgBox(Get_Legend_Text("Warenausgang Service MCxxxx"), vbInformation, "Info")
End Sub
Private Sub WA_GLS_NEU_INST_DAILY_Click()
Call MsgBox(Get_Legend_Text("Warenausgang Neuinstallation MCxxxx"), vbInformation, "Info")
End Sub
Private Sub NEU_INST_WA_GLS_Click()
Call MsgBox(Get_Legend_Text("NeuInstallation WA zu GLS"), vbInformation, "Info")
End Sub
Private Sub NEU_INST_VERSAND_Click()
Call MsgBox(Get_Legend_Text("NeuInstallation Versand"), vbInformation, "Info")
End Sub
Private Sub WA_ZU_GLS_IT_Click()
Call MsgBox(Get_Legend_Text("WA zu GLS_IT"), vbInformation, "Info")
End Sub
Private Sub WA_ZU_GLS_S_Click()
Call MsgBox(Get_Legend_Text("WA zu GLS Service"), vbInformation, "Info")
End Sub
Private Sub CC_POOL_USED_Click()
Call MsgBox(Get_Legend_Text("Car Charger E.P.M f|fffd|r MC3090 used"), vbInformation, "Info")
End Sub
Private Sub CC_POOL_UNCHECKED_Click()
Call MsgBox(Get_Legend_Text("Car Charger E.P.M f|fffd|r MC3090 RL ungepr|fffd|ft"), vbInformation, "Info")
End Sub
Private Sub CC_POOL_NEW_Click()
Call MsgBox(Get_Legend_Text("Car Charger E.P.M f|fffd|r MC3090 neu"), vbInformation, "Info")
End Sub
Private Sub S_POOL_Click()
Call MsgBox(Get_Legend_Text("Service Pool"), vbInformation, "Info")
End Sub
Private Sub NEU_INST_KONFIG_Click()
Call MsgBox(Get_Legend_Text("NeuInstallation Konfig"), vbInformation, "Info")
End Sub

Private Sub WAITING_PARTS_Click()
    Call Collect_Missing_Parts("GLSMOTINFO", "MC3090")
End Sub
Private Sub WE_BRNO_Click()
Call MsgBox(Get_Legend_Text("TOMOTO"), vbInformation, "Info")
End Sub



Private Sub MC9596Ablaufplan_NEU_INST_OFFEN_Click()
Call MsgBox(Get_Legend_Text("NeuInstallation offene Ger|fffd|te MCxxxx"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_AVIS_S_TXT_Click()
Call MsgBox(Get_Legend_Text("AVIS Service"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_s_offen_Click()
Call MsgBox(Get_Legend_Text("SERVICE offene Ger|fffd|te MCxxxx"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_WE_GEO_S_TXT_Click()
Call MsgBox(Get_Legend_Text("WE Service"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_WE_GEO_RL_TXT_Click()
Call MsgBox(Get_Legend_Text("WE ReturnLeasing"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_AVIS_RL_TXT_Click()
Call MsgBox(Get_Legend_Text("AVIS ReturnLeasing"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_KLAER_Click()
Call MsgBox(Get_Legend_Text("KL|fffd|RFALL"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_WE_GEO_DAILY_S_Click()
Call MsgBox(Get_Legend_Text("Wareneingang Service MCxxxx"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_WE_GEO_DAILY_RL_Click()
Call MsgBox(Get_Legend_Text("Wareneingang Return Leasing MCxxxx"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_DIAGNOSE_Click()
Call MsgBox(Get_Legend_Text("DIAGNOSE"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_WA_MOTO_DAILY_Click()
Call MsgBox(Get_Legend_Text("Warenausgang MOTOROLA MCxxxx"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_WA_ZU_MOTO_Click()
Call MsgBox(Get_Legend_Text("WA zu Motorola"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_MOTOROLA_Click()
Call MsgBox(Get_Legend_Text("MOTOROLA"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_MOTO_ERROR_Click()
Call MsgBox("Top 5 Fehler, die bei Motorola in Brno festgestell wurden. Eine detaillierte Ansicht finden Sie im Arbeitsblatt FEHLERamTag.", vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_WE_VON_MOTO_Click()
Call MsgBox(Get_Legend_Text("WE von Motorola"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_WE_MOTO_DAILY_Click()
Call MsgBox(Get_Legend_Text("Wareneingang MOTOROLA MCxxxx"), vbInformation, "Info")
End Sub
Private Sub SD_POOL_Click()
Call MsgBox(Get_Legend_Text("SD Card 4GB/8GB micro ohne Adapter"), vbInformation, "Info")
End Sub
Private Sub SD_POOL_USED_Click()
Call MsgBox(Get_Legend_Text("SD Card microSD ohne Adapter"), vbInformation, "Info")
End Sub
Private Sub SD_POOL_DEFECT_Click()
Call MsgBox(Get_Legend_Text("SD Card microSD ohne Adapter alt/defekt"), vbInformation, "Info")
End Sub
Private Sub SIM_POOL_Click()
Call MsgBox(Get_Legend_Text("SIM Card VODAFON UMTS"), vbInformation, "Info")
End Sub
Private Sub SIM_POOL_USED_Click()
Call MsgBox(Get_Legend_Text("SIM Card VODAFON UMTS gebraucht"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_CC_POOL_UNCHECKED_Click()
Call MsgBox(Get_Legend_Text("Car Charger MC9596 ungepr|fffd|ft"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_CC_POOL_USED_Click()
Call MsgBox(Get_Legend_Text("Car Charger MC9596 gebraucht"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_CC_POOL_NEW_Click()
Call MsgBox(Get_Legend_Text("Car Charger MC9596 neu"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_S_POOL_Click()
Call MsgBox(Get_Legend_Text("Service Pool"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_GLS_IT_Click()
Call MsgBox(Get_Legend_Text("GLS_IT"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_WA_GLS_NEU_INST_DAILY_Click()
Call MsgBox(Get_Legend_Text("Warenausgang Neuinstallation MCxxxx"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_NEU_INST_WA_GLS_Click()
Call MsgBox(Get_Legend_Text("NeuInstallation WA zu GLS"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_NEU_INST_VERSAND_Click()
Call MsgBox(Get_Legend_Text("NeuInstallation Versand"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_WA_ZU_GLS_IT_Click()
Call MsgBox(Get_Legend_Text("WA zu GLS_IT"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_WA_ZU_GLS_S_Click()
Call MsgBox(Get_Legend_Text("WA zu GLS Service"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_NEU_INST_KONFIG_Click()
Call MsgBox(Get_Legend_Text("NeuInstallation Konfig"), vbInformation, "Info")
End Sub
Private Sub NEU_LAGER_Click()
Call MsgBox(Get_Legend_Text("Neu Ger|fffd|te Lager"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_WA_GLS_DAILY_Click()
Call MsgBox(Get_Legend_Text("Warenausgang Service MCxxxx"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_WAITING_PARTS_Click()
    Call Collect_Missing_Parts("GLSMOTINFO", "MC9596")
End Sub
Private Sub MC9596Ablaufplan_WE_BRNO_Click()
Call MsgBox(Get_Legend_Text(""), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_REPAIR_BRNO_Click()
Call MsgBox("Scanner, die sich gerade in Reperatur bei Motorola in Brno befinden (excl. Waiting for parts).", vbInformation, "Info")
End Sub

Private Sub WA_BRNO_Click()
Call MsgBox(Get_Legend_Text("TODRE"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_WA_BRNO_Click()
Call MsgBox(Get_Legend_Text(""), vbInformation, "Info")
End Sub
Private Sub REPAIR_BRNO_Click()
Call MsgBox("Scanner, die sich gerade in Reperatur bei Motorola in Brno befinden (excl. Waiting for parts).", vbInformation, "Info")
End Sub
Private Sub MC3090Ablaufplan_REPAIR_BRNO_Click()
Call MsgBox(Get_Legend_Text(""), vbInformation, "Info")
End Sub

Private Sub POOL_IN_S_Click()
Call MsgBox(Get_Legend_Text("POOLIN Ger|fffd|te MCxxxx Service "), vbInformation, "Info")
End Sub
Private Sub POOL_IN_RL_Click()
Call MsgBox(Get_Legend_Text("POOLIN Ger|fffd|te MCxxxx ReturnLeasing"), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_POOL_IN_S_Click()
Call MsgBox(Get_Legend_Text("POOLIN Ger|fffd|te MCxxxx Service "), vbInformation, "Info")
End Sub
Private Sub MC9596Ablaufplan_POOL_IN_RL_Click()
Call MsgBox(Get_Legend_Text("POOLIN Ger|fffd|te MCxxxx ReturnLeasing"), vbInformation, "Info")
End Sub
Attribute VB_Name = "Sheet1"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


Attribute VB_Name = "Sheet10"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Private Sub Worksheet_Activate()
    Application.ScreenUpdating = False
    On Error Resume Next
    Call Sum_Asset("MC3090")
    On Error Resume Next
    Call Setup_Page("MC3090 Ablaufplan")
    Application.ScreenUpdating = True
  
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "Sheet3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet4"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet5"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "Sheet9"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True

Private Sub Worksheet_Activate()
Application.ScreenUpdating = False
 On Error Resume Next
    Call Sum_Asset("MC9596")
 On Error Resume Next
    Call Setup_Page("MC9596 Ablaufplan")
    Application.ScreenUpdating = True
 
End Sub

Private Sub Worksheet_SelectionChange(ByVal Target As Range)

End Sub
Attribute VB_Name = "Tabelle3"
Attribute VB_Base = "0{00020820-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True
Attribute VB_Name = "ThisWorkbook"
Attribute VB_Base = "0{00020819-0000-0000-C000-000000000046}"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = True
Attribute VB_TemplateDerived = False
Attribute VB_Customizable = True


INQUEST-PP=macro
